
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000bf90  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000388  08013f90  08013f90  00023f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08014318  08014318  000301e0  2**0
                  CONTENTS
  6 .ARM          00000008  08014318  08014318  00024318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08014320  08014320  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08014320  08014320  00024320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08014324  08014324  00024324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001e0  20000000  08014328  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000744  200001e0  08014508  000301e0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000924  08014508  00030924  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001dc75  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000043fc  00000000  00000000  0004de85  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000015c0  00000000  00000000  00052288  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013a0  00000000  00000000  00053848  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00024033  00000000  00000000  00054be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00014b41  00000000  00000000  00078c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c8c3c  00000000  00000000  0008d75c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00156398  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006580  00000000  00000000  00156414  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001e0 	.word	0x200001e0
 800801c:	00000000 	.word	0x00000000
 8008020:	08013f78 	.word	0x08013f78

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001e4 	.word	0x200001e4
 800803c:	08013f78 	.word	0x08013f78

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <RotateAccel>:
	keep_counter[LEFT] = INITIAL_PULSE;
	keep_counter[RIGHT] = INITIAL_PULSE;
}

void RotateAccel(float deg, float rotate_ang_v)
{
 8008db8:	b5b0      	push	{r4, r5, r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8008dc2:	edc7 0a00 	vstr	s1, [r7]
	float additional_ang_v=0;
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	617b      	str	r3, [r7, #20]
	additional_ang_v = rotate_ang_v;//rotate_ang_v - angular_v;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	617b      	str	r3, [r7, #20]
	//加速度(mm/((ms)^2)) =  割り込み周期(1ms)*到達速度*到達速度(((mm/s)^2)) /(2*移動距離) x = v0t + 0.5at^2 →	a=2*(x-v0*t)/t^2 	a = t*vv/(2*x)

		//周期、角速度、距離


	int move_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8008dd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8008dd4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8008f50 <RotateAccel+0x198>
 8008dd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ddc:	ee16 0a90 	vmov	r0, s13
 8008de0:	f7ff faea 	bl	80083b8 <__aeabi_f2d>
 8008de4:	a354      	add	r3, pc, #336	; (adr r3, 8008f38 <RotateAccel+0x180>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7ff fb3d 	bl	8008468 <__aeabi_dmul>
 8008dee:	4603      	mov	r3, r0
 8008df0:	460c      	mov	r4, r1
 8008df2:	4618      	mov	r0, r3
 8008df4:	4621      	mov	r1, r4
 8008df6:	f7ff fde7 	bl	80089c8 <__aeabi_d2iz>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	613b      	str	r3, [r7, #16]
	int keep_pulse[2] = {
			total_pulse[LEFT],
 8008dfe:	4b55      	ldr	r3, [pc, #340]	; (8008f54 <RotateAccel+0x19c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
	int keep_pulse[2] = {
 8008e02:	60bb      	str	r3, [r7, #8]
			total_pulse[RIGHT]
 8008e04:	4b53      	ldr	r3, [pc, #332]	; (8008f54 <RotateAccel+0x19c>)
 8008e06:	685b      	ldr	r3, [r3, #4]
	int keep_pulse[2] = {
 8008e08:	60fb      	str	r3, [r7, #12]
	};
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if( rotate_ang_v > 0)
 8008e0a:	edd7 7a00 	vldr	s15, [r7]
 8008e0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e16:	dd3f      	ble.n	8008e98 <RotateAccel+0xe0>
	{
		while( ( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) ) )
 8008e18:	e02f      	b.n	8008e7a <RotateAccel+0xc2>
		{
			angular_acceleration = 64*T1*additional_ang_v*additional_ang_v / (2*deg);
 8008e1a:	6978      	ldr	r0, [r7, #20]
 8008e1c:	f7ff facc 	bl	80083b8 <__aeabi_f2d>
 8008e20:	a347      	add	r3, pc, #284	; (adr r3, 8008f40 <RotateAccel+0x188>)
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	f7ff fb1f 	bl	8008468 <__aeabi_dmul>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	4625      	mov	r5, r4
 8008e30:	461c      	mov	r4, r3
 8008e32:	6978      	ldr	r0, [r7, #20]
 8008e34:	f7ff fac0 	bl	80083b8 <__aeabi_f2d>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	4629      	mov	r1, r5
 8008e40:	f7ff fb12 	bl	8008468 <__aeabi_dmul>
 8008e44:	4603      	mov	r3, r0
 8008e46:	460c      	mov	r4, r1
 8008e48:	4625      	mov	r5, r4
 8008e4a:	461c      	mov	r4, r3
 8008e4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008e54:	ee17 0a90 	vmov	r0, s15
 8008e58:	f7ff faae 	bl	80083b8 <__aeabi_f2d>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4620      	mov	r0, r4
 8008e62:	4629      	mov	r1, r5
 8008e64:	f7ff fc2a 	bl	80086bc <__aeabi_ddiv>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	4621      	mov	r1, r4
 8008e70:	f7ff fdd2 	bl	8008a18 <__aeabi_d2f>
 8008e74:	4602      	mov	r2, r0
 8008e76:	4b38      	ldr	r3, [pc, #224]	; (8008f58 <RotateAccel+0x1a0>)
 8008e78:	601a      	str	r2, [r3, #0]
		while( ( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) ) )
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	441a      	add	r2, r3
 8008e80:	4b34      	ldr	r3, [pc, #208]	; (8008f54 <RotateAccel+0x19c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	dd4d      	ble.n	8008f24 <RotateAccel+0x16c>
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	1ad2      	subs	r2, r2, r3
 8008e8e:	4b31      	ldr	r3, [pc, #196]	; (8008f54 <RotateAccel+0x19c>)
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	dbc1      	blt.n	8008e1a <RotateAccel+0x62>
 8008e96:	e045      	b.n	8008f24 <RotateAccel+0x16c>
		}

	}
	else if( rotate_ang_v < 0)
 8008e98:	edd7 7a00 	vldr	s15, [r7]
 8008e9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea4:	d53e      	bpl.n	8008f24 <RotateAccel+0x16c>
	{
		//printf("加速 負\r\n");
		while( ( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) ) )
 8008ea6:	e02f      	b.n	8008f08 <RotateAccel+0x150>
		{
			angular_acceleration = -1*64*T1*additional_ang_v*additional_ang_v / (2*deg);
 8008ea8:	6978      	ldr	r0, [r7, #20]
 8008eaa:	f7ff fa85 	bl	80083b8 <__aeabi_f2d>
 8008eae:	a326      	add	r3, pc, #152	; (adr r3, 8008f48 <RotateAccel+0x190>)
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	f7ff fad8 	bl	8008468 <__aeabi_dmul>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	4625      	mov	r5, r4
 8008ebe:	461c      	mov	r4, r3
 8008ec0:	6978      	ldr	r0, [r7, #20]
 8008ec2:	f7ff fa79 	bl	80083b8 <__aeabi_f2d>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4620      	mov	r0, r4
 8008ecc:	4629      	mov	r1, r5
 8008ece:	f7ff facb 	bl	8008468 <__aeabi_dmul>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	4625      	mov	r5, r4
 8008ed8:	461c      	mov	r4, r3
 8008eda:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ede:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008ee2:	ee17 0a90 	vmov	r0, s15
 8008ee6:	f7ff fa67 	bl	80083b8 <__aeabi_f2d>
 8008eea:	4602      	mov	r2, r0
 8008eec:	460b      	mov	r3, r1
 8008eee:	4620      	mov	r0, r4
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	f7ff fbe3 	bl	80086bc <__aeabi_ddiv>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	460c      	mov	r4, r1
 8008efa:	4618      	mov	r0, r3
 8008efc:	4621      	mov	r1, r4
 8008efe:	f7ff fd8b 	bl	8008a18 <__aeabi_d2f>
 8008f02:	4602      	mov	r2, r0
 8008f04:	4b14      	ldr	r3, [pc, #80]	; (8008f58 <RotateAccel+0x1a0>)
 8008f06:	601a      	str	r2, [r3, #0]
		while( ( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) ) )
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	1ad2      	subs	r2, r2, r3
 8008f0e:	4b11      	ldr	r3, [pc, #68]	; (8008f54 <RotateAccel+0x19c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	da06      	bge.n	8008f24 <RotateAccel+0x16c>
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	441a      	add	r2, r3
 8008f1c:	4b0d      	ldr	r3, [pc, #52]	; (8008f54 <RotateAccel+0x19c>)
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	dcc1      	bgt.n	8008ea8 <RotateAccel+0xf0>
		}

	}
	angular_acceleration = 0;
 8008f24:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <RotateAccel+0x1a0>)
 8008f26:	f04f 0200 	mov.w	r2, #0
 8008f2a:	601a      	str	r2, [r3, #0]
	//target_angular_v = 0;
}
 8008f2c:	bf00      	nop
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bdb0      	pop	{r4, r5, r7, pc}
 8008f34:	f3af 8000 	nop.w
 8008f38:	c95204f7 	.word	0xc95204f7
 8008f3c:	40fc5979 	.word	0x40fc5979
 8008f40:	d2f1a9fc 	.word	0xd2f1a9fc
 8008f44:	3fb0624d 	.word	0x3fb0624d
 8008f48:	d2f1a9fc 	.word	0xd2f1a9fc
 8008f4c:	bfb0624d 	.word	0xbfb0624d
 8008f50:	43b40000 	.word	0x43b40000
 8008f54:	2000027c 	.word	0x2000027c
 8008f58:	200002a8 	.word	0x200002a8
 8008f5c:	00000000 	.word	0x00000000

08008f60 <RotateConst>:
void RotateConst(float deg, float rotate_ang_v)
{
 8008f60:	b590      	push	{r4, r7, lr}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	ed87 0a01 	vstr	s0, [r7, #4]
 8008f6a:	edc7 0a00 	vstr	s1, [r7]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	//int add_distance = (int)( (deg/360) * ROTATE_PULSE) * MM_PER_PULSE;

	int move_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8008f6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f72:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009030 <RotateConst+0xd0>
 8008f76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f7a:	ee16 0a90 	vmov	r0, s13
 8008f7e:	f7ff fa1b 	bl	80083b8 <__aeabi_f2d>
 8008f82:	a329      	add	r3, pc, #164	; (adr r3, 8009028 <RotateConst+0xc8>)
 8008f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f88:	f7ff fa6e 	bl	8008468 <__aeabi_dmul>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	460c      	mov	r4, r1
 8008f90:	4618      	mov	r0, r3
 8008f92:	4621      	mov	r1, r4
 8008f94:	f7ff fd18 	bl	80089c8 <__aeabi_d2iz>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	617b      	str	r3, [r7, #20]
	int keep_pulse[2] = {
			total_pulse[LEFT],
 8008f9c:	4b25      	ldr	r3, [pc, #148]	; (8009034 <RotateConst+0xd4>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
	int keep_pulse[2] = {
 8008fa0:	60fb      	str	r3, [r7, #12]
			total_pulse[RIGHT]
 8008fa2:	4b24      	ldr	r3, [pc, #144]	; (8009034 <RotateConst+0xd4>)
 8008fa4:	685b      	ldr	r3, [r3, #4]
	int keep_pulse[2] = {
 8008fa6:	613b      	str	r3, [r7, #16]
	};
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if (rotate_ang_v > 0)
 8008fa8:	edd7 7a00 	vldr	s15, [r7]
 8008fac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb4:	dd13      	ble.n	8008fde <RotateConst+0x7e>
	{
		while( ( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) ) )
 8008fb6:	e003      	b.n	8008fc0 <RotateConst+0x60>
		{
			//target_angular_v = rotate_ang_v;
			angular_acceleration = 0;
 8008fb8:	4b1f      	ldr	r3, [pc, #124]	; (8009038 <RotateConst+0xd8>)
 8008fba:	f04f 0200 	mov.w	r2, #0
 8008fbe:	601a      	str	r2, [r3, #0]
		while( ( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) ) )
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	441a      	add	r2, r3
 8008fc6:	4b1b      	ldr	r3, [pc, #108]	; (8009034 <RotateConst+0xd4>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	dd21      	ble.n	8009012 <RotateConst+0xb2>
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	1ad2      	subs	r2, r2, r3
 8008fd4:	4b17      	ldr	r3, [pc, #92]	; (8009034 <RotateConst+0xd4>)
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	dbed      	blt.n	8008fb8 <RotateConst+0x58>
 8008fdc:	e019      	b.n	8009012 <RotateConst+0xb2>
		}

	}
	else if (rotate_ang_v < 0)
 8008fde:	edd7 7a00 	vldr	s15, [r7]
 8008fe2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fea:	d512      	bpl.n	8009012 <RotateConst+0xb2>
	{
		//printf("定速 負\r\n");
		while( ( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) ) )
 8008fec:	e003      	b.n	8008ff6 <RotateConst+0x96>
		{
			//target_angular_v = rotate_ang_v;
			angular_acceleration = 0;
 8008fee:	4b12      	ldr	r3, [pc, #72]	; (8009038 <RotateConst+0xd8>)
 8008ff0:	f04f 0200 	mov.w	r2, #0
 8008ff4:	601a      	str	r2, [r3, #0]
		while( ( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) ) )
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	1ad2      	subs	r2, r2, r3
 8008ffc:	4b0d      	ldr	r3, [pc, #52]	; (8009034 <RotateConst+0xd4>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	429a      	cmp	r2, r3
 8009002:	da06      	bge.n	8009012 <RotateConst+0xb2>
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	441a      	add	r2, r3
 800900a:	4b0a      	ldr	r3, [pc, #40]	; (8009034 <RotateConst+0xd4>)
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	429a      	cmp	r2, r3
 8009010:	dced      	bgt.n	8008fee <RotateConst+0x8e>
		}

	}
	angular_acceleration = 0;
 8009012:	4b09      	ldr	r3, [pc, #36]	; (8009038 <RotateConst+0xd8>)
 8009014:	f04f 0200 	mov.w	r2, #0
 8009018:	601a      	str	r2, [r3, #0]
	//target_angular_v = 0;
}
 800901a:	bf00      	nop
 800901c:	371c      	adds	r7, #28
 800901e:	46bd      	mov	sp, r7
 8009020:	bd90      	pop	{r4, r7, pc}
 8009022:	bf00      	nop
 8009024:	f3af 8000 	nop.w
 8009028:	c95204f7 	.word	0xc95204f7
 800902c:	40fc5979 	.word	0x40fc5979
 8009030:	43b40000 	.word	0x43b40000
 8009034:	2000027c 	.word	0x2000027c
 8009038:	200002a8 	.word	0x200002a8
 800903c:	00000000 	.word	0x00000000

08009040 <RotateDecel>:
void RotateDecel(float deg, float rotate_ang_v)
{
 8009040:	b5b0      	push	{r4, r5, r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	ed87 0a01 	vstr	s0, [r7, #4]
 800904a:	edc7 0a00 	vstr	s1, [r7]
	float additional_ang_v=0;
 800904e:	f04f 0300 	mov.w	r3, #0
 8009052:	617b      	str	r3, [r7, #20]
	additional_ang_v = rotate_ang_v;// - angular_v;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	617b      	str	r3, [r7, #20]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	//int add_distance = (int)( (deg/360) * ROTATE_PULSE) * MM_PER_PULSE;
		//周期、角速度、距離

	int move_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009058:	edd7 7a01 	vldr	s15, [r7, #4]
 800905c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8009220 <RotateDecel+0x1e0>
 8009060:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009064:	ee16 0a90 	vmov	r0, s13
 8009068:	f7ff f9a6 	bl	80083b8 <__aeabi_f2d>
 800906c:	a368      	add	r3, pc, #416	; (adr r3, 8009210 <RotateDecel+0x1d0>)
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	f7ff f9f9 	bl	8008468 <__aeabi_dmul>
 8009076:	4603      	mov	r3, r0
 8009078:	460c      	mov	r4, r1
 800907a:	4618      	mov	r0, r3
 800907c:	4621      	mov	r1, r4
 800907e:	f7ff fca3 	bl	80089c8 <__aeabi_d2iz>
 8009082:	4603      	mov	r3, r0
 8009084:	613b      	str	r3, [r7, #16]
	int keep_pulse[2] = {
			total_pulse[LEFT],
 8009086:	4b67      	ldr	r3, [pc, #412]	; (8009224 <RotateDecel+0x1e4>)
 8009088:	681b      	ldr	r3, [r3, #0]
	int keep_pulse[2] = {
 800908a:	60bb      	str	r3, [r7, #8]
			total_pulse[RIGHT]
 800908c:	4b65      	ldr	r3, [pc, #404]	; (8009224 <RotateDecel+0x1e4>)
 800908e:	685b      	ldr	r3, [r3, #4]
	int keep_pulse[2] = {
 8009090:	60fb      	str	r3, [r7, #12]
	};
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	if( rotate_ang_v > 0)
 8009092:	edd7 7a00 	vldr	s15, [r7]
 8009096:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800909a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800909e:	dd50      	ble.n	8009142 <RotateDecel+0x102>
	{

		while( ( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) ) )
 80090a0:	e040      	b.n	8009124 <RotateDecel+0xe4>
		{
			angular_acceleration = -1*64*(T1*additional_ang_v*additional_ang_v / (2*deg));
 80090a2:	6978      	ldr	r0, [r7, #20]
 80090a4:	f7ff f988 	bl	80083b8 <__aeabi_f2d>
 80090a8:	a35b      	add	r3, pc, #364	; (adr r3, 8009218 <RotateDecel+0x1d8>)
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	f7ff f9db 	bl	8008468 <__aeabi_dmul>
 80090b2:	4603      	mov	r3, r0
 80090b4:	460c      	mov	r4, r1
 80090b6:	4625      	mov	r5, r4
 80090b8:	461c      	mov	r4, r3
 80090ba:	6978      	ldr	r0, [r7, #20]
 80090bc:	f7ff f97c 	bl	80083b8 <__aeabi_f2d>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4620      	mov	r0, r4
 80090c6:	4629      	mov	r1, r5
 80090c8:	f7ff f9ce 	bl	8008468 <__aeabi_dmul>
 80090cc:	4603      	mov	r3, r0
 80090ce:	460c      	mov	r4, r1
 80090d0:	4625      	mov	r5, r4
 80090d2:	461c      	mov	r4, r3
 80090d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80090d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80090dc:	ee17 0a90 	vmov	r0, s15
 80090e0:	f7ff f96a 	bl	80083b8 <__aeabi_f2d>
 80090e4:	4602      	mov	r2, r0
 80090e6:	460b      	mov	r3, r1
 80090e8:	4620      	mov	r0, r4
 80090ea:	4629      	mov	r1, r5
 80090ec:	f7ff fae6 	bl	80086bc <__aeabi_ddiv>
 80090f0:	4603      	mov	r3, r0
 80090f2:	460c      	mov	r4, r1
 80090f4:	4618      	mov	r0, r3
 80090f6:	4621      	mov	r1, r4
 80090f8:	f04f 0200 	mov.w	r2, #0
 80090fc:	4b4a      	ldr	r3, [pc, #296]	; (8009228 <RotateDecel+0x1e8>)
 80090fe:	f7ff f9b3 	bl	8008468 <__aeabi_dmul>
 8009102:	4603      	mov	r3, r0
 8009104:	460c      	mov	r4, r1
 8009106:	4618      	mov	r0, r3
 8009108:	4621      	mov	r1, r4
 800910a:	f7ff fc85 	bl	8008a18 <__aeabi_d2f>
 800910e:	4602      	mov	r2, r0
 8009110:	4b46      	ldr	r3, [pc, #280]	; (800922c <RotateDecel+0x1ec>)
 8009112:	601a      	str	r2, [r3, #0]
			if( angular_v <= 0)
 8009114:	4b46      	ldr	r3, [pc, #280]	; (8009230 <RotateDecel+0x1f0>)
 8009116:	edd3 7a00 	vldr	s15, [r3]
 800911a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800911e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009122:	d966      	bls.n	80091f2 <RotateDecel+0x1b2>
		while( ( ( keep_pulse[LEFT]+move_pulse ) > ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( total_pulse[RIGHT] ) ) )
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	441a      	add	r2, r3
 800912a:	4b3e      	ldr	r3, [pc, #248]	; (8009224 <RotateDecel+0x1e4>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	dd62      	ble.n	80091f8 <RotateDecel+0x1b8>
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	1ad2      	subs	r2, r2, r3
 8009138:	4b3a      	ldr	r3, [pc, #232]	; (8009224 <RotateDecel+0x1e4>)
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	429a      	cmp	r2, r3
 800913e:	dbb0      	blt.n	80090a2 <RotateDecel+0x62>
 8009140:	e05a      	b.n	80091f8 <RotateDecel+0x1b8>
				break;
		}

	}
	else if( rotate_ang_v < 0)
 8009142:	edd7 7a00 	vldr	s15, [r7]
 8009146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800914a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800914e:	d553      	bpl.n	80091f8 <RotateDecel+0x1b8>
	{
		//printf("減速 負\r\n");
		while( ( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) ) )
 8009150:	e040      	b.n	80091d4 <RotateDecel+0x194>
		{
			angular_acceleration = 64*(T1*additional_ang_v*additional_ang_v / (2*deg));
 8009152:	6978      	ldr	r0, [r7, #20]
 8009154:	f7ff f930 	bl	80083b8 <__aeabi_f2d>
 8009158:	a32f      	add	r3, pc, #188	; (adr r3, 8009218 <RotateDecel+0x1d8>)
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	f7ff f983 	bl	8008468 <__aeabi_dmul>
 8009162:	4603      	mov	r3, r0
 8009164:	460c      	mov	r4, r1
 8009166:	4625      	mov	r5, r4
 8009168:	461c      	mov	r4, r3
 800916a:	6978      	ldr	r0, [r7, #20]
 800916c:	f7ff f924 	bl	80083b8 <__aeabi_f2d>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4620      	mov	r0, r4
 8009176:	4629      	mov	r1, r5
 8009178:	f7ff f976 	bl	8008468 <__aeabi_dmul>
 800917c:	4603      	mov	r3, r0
 800917e:	460c      	mov	r4, r1
 8009180:	4625      	mov	r5, r4
 8009182:	461c      	mov	r4, r3
 8009184:	edd7 7a01 	vldr	s15, [r7, #4]
 8009188:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800918c:	ee17 0a90 	vmov	r0, s15
 8009190:	f7ff f912 	bl	80083b8 <__aeabi_f2d>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4620      	mov	r0, r4
 800919a:	4629      	mov	r1, r5
 800919c:	f7ff fa8e 	bl	80086bc <__aeabi_ddiv>
 80091a0:	4603      	mov	r3, r0
 80091a2:	460c      	mov	r4, r1
 80091a4:	4618      	mov	r0, r3
 80091a6:	4621      	mov	r1, r4
 80091a8:	f04f 0200 	mov.w	r2, #0
 80091ac:	4b21      	ldr	r3, [pc, #132]	; (8009234 <RotateDecel+0x1f4>)
 80091ae:	f7ff f95b 	bl	8008468 <__aeabi_dmul>
 80091b2:	4603      	mov	r3, r0
 80091b4:	460c      	mov	r4, r1
 80091b6:	4618      	mov	r0, r3
 80091b8:	4621      	mov	r1, r4
 80091ba:	f7ff fc2d 	bl	8008a18 <__aeabi_d2f>
 80091be:	4602      	mov	r2, r0
 80091c0:	4b1a      	ldr	r3, [pc, #104]	; (800922c <RotateDecel+0x1ec>)
 80091c2:	601a      	str	r2, [r3, #0]
			if( angular_v >= 0)
 80091c4:	4b1a      	ldr	r3, [pc, #104]	; (8009230 <RotateDecel+0x1f0>)
 80091c6:	edd3 7a00 	vldr	s15, [r3]
 80091ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d2:	da10      	bge.n	80091f6 <RotateDecel+0x1b6>
		while( ( ( keep_pulse[LEFT]-move_pulse ) < ( total_pulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]+move_pulse ) > ( total_pulse[RIGHT] ) ) )
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	1ad2      	subs	r2, r2, r3
 80091da:	4b12      	ldr	r3, [pc, #72]	; (8009224 <RotateDecel+0x1e4>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	429a      	cmp	r2, r3
 80091e0:	da0a      	bge.n	80091f8 <RotateDecel+0x1b8>
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	441a      	add	r2, r3
 80091e8:	4b0e      	ldr	r3, [pc, #56]	; (8009224 <RotateDecel+0x1e4>)
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	dcb0      	bgt.n	8009152 <RotateDecel+0x112>
 80091f0:	e002      	b.n	80091f8 <RotateDecel+0x1b8>
				break;
 80091f2:	bf00      	nop
 80091f4:	e000      	b.n	80091f8 <RotateDecel+0x1b8>
				break;
 80091f6:	bf00      	nop
		}

	}
	angular_acceleration = 0;
 80091f8:	4b0c      	ldr	r3, [pc, #48]	; (800922c <RotateDecel+0x1ec>)
 80091fa:	f04f 0200 	mov.w	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]
	target_angular_v = 0;
 8009200:	4b0d      	ldr	r3, [pc, #52]	; (8009238 <RotateDecel+0x1f8>)
 8009202:	f04f 0200 	mov.w	r2, #0
 8009206:	601a      	str	r2, [r3, #0]
}
 8009208:	bf00      	nop
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bdb0      	pop	{r4, r5, r7, pc}
 8009210:	c95204f7 	.word	0xc95204f7
 8009214:	40fc5979 	.word	0x40fc5979
 8009218:	d2f1a9fc 	.word	0xd2f1a9fc
 800921c:	3f50624d 	.word	0x3f50624d
 8009220:	43b40000 	.word	0x43b40000
 8009224:	2000027c 	.word	0x2000027c
 8009228:	c0500000 	.word	0xc0500000
 800922c:	200002a8 	.word	0x200002a8
 8009230:	20000288 	.word	0x20000288
 8009234:	40500000 	.word	0x40500000
 8009238:	200002a4 	.word	0x200002a4

0800923c <Rotate>:
void Rotate(float deg, float ang_accel)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	ed87 0a01 	vstr	s0, [r7, #4]
 8009246:	edc7 0a00 	vstr	s1, [r7]
//	}
//	InitPulse((int*)(&(TIM3->CNT)), INITIAL_PULSE);
//	InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//	ResetCounter();

	RotateAccel(deg*15/90, ang_accel);
 800924a:	edd7 7a01 	vldr	s15, [r7, #4]
 800924e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8009252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009256:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80092c0 <Rotate+0x84>
 800925a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800925e:	edd7 0a00 	vldr	s1, [r7]
 8009262:	eeb0 0a66 	vmov.f32	s0, s13
 8009266:	f7ff fda7 	bl	8008db8 <RotateAccel>
	//printf("加速後の角速度 : %f\r\n",angular_v);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",angular_acceleration);
	RotateConst(deg*25/90, ang_accel);
 800926a:	edd7 7a01 	vldr	s15, [r7, #4]
 800926e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8009272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009276:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80092c0 <Rotate+0x84>
 800927a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800927e:	edd7 0a00 	vldr	s1, [r7]
 8009282:	eeb0 0a66 	vmov.f32	s0, s13
 8009286:	f7ff fe6b 	bl	8008f60 <RotateConst>
	RotateDecel(deg*50/90, ang_accel);
 800928a:	edd7 7a01 	vldr	s15, [r7, #4]
 800928e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80092c4 <Rotate+0x88>
 8009292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009296:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80092c0 <Rotate+0x84>
 800929a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800929e:	edd7 0a00 	vldr	s1, [r7]
 80092a2:	eeb0 0a66 	vmov.f32	s0, s13
 80092a6:	f7ff fecb 	bl	8009040 <RotateDecel>
//			target_angular_v = ang_accel;
//			printf("deg:負, angle, angular_v : %f, %f\r\n",angle, angular_v );
//		}
//
//	}
	target_angular_v = 0;
 80092aa:	4b07      	ldr	r3, [pc, #28]	; (80092c8 <Rotate+0x8c>)
 80092ac:	f04f 0200 	mov.w	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]
	printf("回転終了\r\n");
 80092b2:	4806      	ldr	r0, [pc, #24]	; (80092cc <Rotate+0x90>)
 80092b4:	f008 ffae 	bl	8012214 <puts>
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	42b40000 	.word	0x42b40000
 80092c4:	42480000 	.word	0x42480000
 80092c8:	200002a4 	.word	0x200002a4
 80092cc:	08013f90 	.word	0x08013f90

080092d0 <Calib>:
{

}

void Calib()
{
 80092d0:	b480      	push	{r7}
 80092d2:	af00      	add	r7, sp, #0
	//壁使ってセンサ補正か、背中あて補正。状況に応じて補正パターンを変える

	//フラグと変数の状態に応じてフラグを変更し、動作を変える

}
 80092d4:	bf00      	nop
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
	...

080092e0 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 80092e0:	b5b0      	push	{r4, r5, r7, lr}
 80092e2:	b08a      	sub	sp, #40	; 0x28
 80092e4:	af00      	add	r7, sp, #0
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float pre = 5;         //スラローム前距離
 80092e6:	4b76      	ldr	r3, [pc, #472]	; (80094c0 <SlalomRight+0x1e0>)
 80092e8:	627b      	str	r3, [r7, #36]	; 0x24
	float fol = 12;         //スラローム後距離
 80092ea:	4b76      	ldr	r3, [pc, #472]	; (80094c4 <SlalomRight+0x1e4>)
 80092ec:	623b      	str	r3, [r7, #32]
	float v_turn = explore_velocity;       //スラローム時の重心速度
 80092ee:	4b76      	ldr	r3, [pc, #472]	; (80094c8 <SlalomRight+0x1e8>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	61fb      	str	r3, [r7, #28]
	float alpha_turn = 0.13;//0.015*13;  //スラローム時の角加速度
 80092f4:	4b75      	ldr	r3, [pc, #468]	; (80094cc <SlalomRight+0x1ec>)
 80092f6:	61bb      	str	r3, [r7, #24]

	//angle = 0;         //アングルの初期化
	float ang1 = 30*M_PI/180;         //角速度が上がるのは0からang1まで
 80092f8:	4b75      	ldr	r3, [pc, #468]	; (80094d0 <SlalomRight+0x1f0>)
 80092fa:	617b      	str	r3, [r7, #20]
	float ang2 = 60*M_PI/180;         //角速度が一定なのはang1からang2まで
 80092fc:	4b75      	ldr	r3, [pc, #468]	; (80094d4 <SlalomRight+0x1f4>)
 80092fe:	613b      	str	r3, [r7, #16]
	float ang3 = 90*M_PI/180;         //角速度が下がるのはang2からang3まで
 8009300:	4b75      	ldr	r3, [pc, #468]	; (80094d8 <SlalomRight+0x1f8>)
 8009302:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = total_pulse[LEFT] + total_pulse[RIGHT];	//汎用的に書いておく
 8009304:	4b75      	ldr	r3, [pc, #468]	; (80094dc <SlalomRight+0x1fc>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	4b74      	ldr	r3, [pc, #464]	; (80094dc <SlalomRight+0x1fc>)
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	4413      	add	r3, r2
 800930e:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) ) //移動量を条件に直進
 8009310:	e00a      	b.n	8009328 <SlalomRight+0x48>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = 0;
 8009312:	4b73      	ldr	r3, [pc, #460]	; (80094e0 <SlalomRight+0x200>)
 8009314:	f04f 0200 	mov.w	r2, #0
 8009318:	601a      	str	r2, [r3, #0]
			angular_acceleration = 0;
 800931a:	4b72      	ldr	r3, [pc, #456]	; (80094e4 <SlalomRight+0x204>)
 800931c:	f04f 0200 	mov.w	r2, #0
 8009320:	601a      	str	r2, [r3, #0]
			target_velocity[BODY] = v_turn;
 8009322:	4a71      	ldr	r2, [pc, #452]	; (80094e8 <SlalomRight+0x208>)
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	6093      	str	r3, [r2, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) ) //移動量を条件に直進
 8009328:	68b8      	ldr	r0, [r7, #8]
 800932a:	f7ff f833 	bl	8008394 <__aeabi_i2d>
 800932e:	4604      	mov	r4, r0
 8009330:	460d      	mov	r5, r1
 8009332:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009336:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800933a:	ee17 0a90 	vmov	r0, s15
 800933e:	f7ff f83b 	bl	80083b8 <__aeabi_f2d>
 8009342:	a35d      	add	r3, pc, #372	; (adr r3, 80094b8 <SlalomRight+0x1d8>)
 8009344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009348:	f7ff f9b8 	bl	80086bc <__aeabi_ddiv>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4620      	mov	r0, r4
 8009352:	4629      	mov	r1, r5
 8009354:	f7fe fed2 	bl	80080fc <__adddf3>
 8009358:	4603      	mov	r3, r0
 800935a:	460c      	mov	r4, r1
 800935c:	4625      	mov	r5, r4
 800935e:	461c      	mov	r4, r3
 8009360:	4b5e      	ldr	r3, [pc, #376]	; (80094dc <SlalomRight+0x1fc>)
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	4b5d      	ldr	r3, [pc, #372]	; (80094dc <SlalomRight+0x1fc>)
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	4413      	add	r3, r2
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff f812 	bl	8008394 <__aeabi_i2d>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4620      	mov	r0, r4
 8009376:	4629      	mov	r1, r5
 8009378:	f7ff fb06 	bl	8008988 <__aeabi_dcmpgt>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1c7      	bne.n	8009312 <SlalomRight+0x32>

			////printf("直進1\r\n");
	}


	float start_angle = angle;
 8009382:	4b5a      	ldr	r3, [pc, #360]	; (80094ec <SlalomRight+0x20c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	607b      	str	r3, [r7, #4]
	while(start_angle + ang1 > angle)
 8009388:	e005      	b.n	8009396 <SlalomRight+0xb6>
	{

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			angular_acceleration = alpha_turn;
 800938a:	4a56      	ldr	r2, [pc, #344]	; (80094e4 <SlalomRight+0x204>)
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	6013      	str	r3, [r2, #0]
			target_velocity[BODY] = v_turn;
 8009390:	4a55      	ldr	r2, [pc, #340]	; (80094e8 <SlalomRight+0x208>)
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	6093      	str	r3, [r2, #8]
	while(start_angle + ang1 > angle)
 8009396:	ed97 7a01 	vldr	s14, [r7, #4]
 800939a:	edd7 7a05 	vldr	s15, [r7, #20]
 800939e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80093a2:	4b52      	ldr	r3, [pc, #328]	; (80094ec <SlalomRight+0x20c>)
 80093a4:	edd3 7a00 	vldr	s15, [r3]
 80093a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80093ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b0:	dceb      	bgt.n	800938a <SlalomRight+0xaa>

			//printf("クロソイド1\r\n");
	}
	angular_acceleration = 0;
 80093b2:	4b4c      	ldr	r3, [pc, #304]	; (80094e4 <SlalomRight+0x204>)
 80093b4:	f04f 0200 	mov.w	r2, #0
 80093b8:	601a      	str	r2, [r3, #0]
	//alpha_flag = 0;

	while(start_angle + ang2 > angle)
 80093ba:	e006      	b.n	80093ca <SlalomRight+0xea>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = target_angular_v;
 80093bc:	4b48      	ldr	r3, [pc, #288]	; (80094e0 <SlalomRight+0x200>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a47      	ldr	r2, [pc, #284]	; (80094e0 <SlalomRight+0x200>)
 80093c2:	6013      	str	r3, [r2, #0]
			target_velocity[BODY] = v_turn;
 80093c4:	4a48      	ldr	r2, [pc, #288]	; (80094e8 <SlalomRight+0x208>)
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	6093      	str	r3, [r2, #8]
	while(start_angle + ang2 > angle)
 80093ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80093ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80093d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80093d6:	4b45      	ldr	r3, [pc, #276]	; (80094ec <SlalomRight+0x20c>)
 80093d8:	edd3 7a00 	vldr	s15, [r3]
 80093dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80093e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e4:	dcea      	bgt.n	80093bc <SlalomRight+0xdc>
			////printf("円弧\r\n");
	}

	while( start_angle + ang3 > angle)
 80093e6:	e016      	b.n	8009416 <SlalomRight+0x136>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
			angular_acceleration = -alpha_turn;
 80093e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80093ec:	eef1 7a67 	vneg.f32	s15, s15
 80093f0:	4b3c      	ldr	r3, [pc, #240]	; (80094e4 <SlalomRight+0x204>)
 80093f2:	edc3 7a00 	vstr	s15, [r3]
			if(target_angular_v < 0)
 80093f6:	4b3a      	ldr	r3, [pc, #232]	; (80094e0 <SlalomRight+0x200>)
 80093f8:	edd3 7a00 	vldr	s15, [r3]
 80093fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009404:	d504      	bpl.n	8009410 <SlalomRight+0x130>
			{
				target_angular_v = 0;
 8009406:	4b36      	ldr	r3, [pc, #216]	; (80094e0 <SlalomRight+0x200>)
 8009408:	f04f 0200 	mov.w	r2, #0
 800940c:	601a      	str	r2, [r3, #0]
				break;
 800940e:	e010      	b.n	8009432 <SlalomRight+0x152>
			}
			target_velocity[BODY] = v_turn;
 8009410:	4a35      	ldr	r2, [pc, #212]	; (80094e8 <SlalomRight+0x208>)
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	6093      	str	r3, [r2, #8]
	while( start_angle + ang3 > angle)
 8009416:	ed97 7a01 	vldr	s14, [r7, #4]
 800941a:	edd7 7a03 	vldr	s15, [r7, #12]
 800941e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009422:	4b32      	ldr	r3, [pc, #200]	; (80094ec <SlalomRight+0x20c>)
 8009424:	edd3 7a00 	vldr	s15, [r3]
 8009428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800942c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009430:	dcda      	bgt.n	80093e8 <SlalomRight+0x108>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	angular_acceleration = 0;
 8009432:	4b2c      	ldr	r3, [pc, #176]	; (80094e4 <SlalomRight+0x204>)
 8009434:	f04f 0200 	mov.w	r2, #0
 8009438:	601a      	str	r2, [r3, #0]
	now_pulse = total_pulse[LEFT] + total_pulse[RIGHT];
 800943a:	4b28      	ldr	r3, [pc, #160]	; (80094dc <SlalomRight+0x1fc>)
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	4b27      	ldr	r3, [pc, #156]	; (80094dc <SlalomRight+0x1fc>)
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	4413      	add	r3, r2
 8009444:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) )
 8009446:	e006      	b.n	8009456 <SlalomRight+0x176>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = 0;
 8009448:	4b25      	ldr	r3, [pc, #148]	; (80094e0 <SlalomRight+0x200>)
 800944a:	f04f 0200 	mov.w	r2, #0
 800944e:	601a      	str	r2, [r3, #0]
			target_velocity[BODY] = v_turn;
 8009450:	4a25      	ldr	r2, [pc, #148]	; (80094e8 <SlalomRight+0x208>)
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	6093      	str	r3, [r2, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) )
 8009456:	68b8      	ldr	r0, [r7, #8]
 8009458:	f7fe ff9c 	bl	8008394 <__aeabi_i2d>
 800945c:	4604      	mov	r4, r0
 800945e:	460d      	mov	r5, r1
 8009460:	edd7 7a08 	vldr	s15, [r7, #32]
 8009464:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009468:	ee17 0a90 	vmov	r0, s15
 800946c:	f7fe ffa4 	bl	80083b8 <__aeabi_f2d>
 8009470:	a311      	add	r3, pc, #68	; (adr r3, 80094b8 <SlalomRight+0x1d8>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7ff f921 	bl	80086bc <__aeabi_ddiv>
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4620      	mov	r0, r4
 8009480:	4629      	mov	r1, r5
 8009482:	f7fe fe3b 	bl	80080fc <__adddf3>
 8009486:	4603      	mov	r3, r0
 8009488:	460c      	mov	r4, r1
 800948a:	4625      	mov	r5, r4
 800948c:	461c      	mov	r4, r3
 800948e:	4b13      	ldr	r3, [pc, #76]	; (80094dc <SlalomRight+0x1fc>)
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	4b12      	ldr	r3, [pc, #72]	; (80094dc <SlalomRight+0x1fc>)
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	4413      	add	r3, r2
 8009498:	4618      	mov	r0, r3
 800949a:	f7fe ff7b 	bl	8008394 <__aeabi_i2d>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4620      	mov	r0, r4
 80094a4:	4629      	mov	r1, r5
 80094a6:	f7ff fa6f 	bl	8008988 <__aeabi_dcmpgt>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1cb      	bne.n	8009448 <SlalomRight+0x168>
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 80094b0:	bf00      	nop
 80094b2:	3728      	adds	r7, #40	; 0x28
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bdb0      	pop	{r4, r5, r7, pc}
 80094b8:	317249d5 	.word	0x317249d5
 80094bc:	3f502de0 	.word	0x3f502de0
 80094c0:	40a00000 	.word	0x40a00000
 80094c4:	41400000 	.word	0x41400000
 80094c8:	20000000 	.word	0x20000000
 80094cc:	3e051eb8 	.word	0x3e051eb8
 80094d0:	3f060a92 	.word	0x3f060a92
 80094d4:	3f860a92 	.word	0x3f860a92
 80094d8:	3fc90fdb 	.word	0x3fc90fdb
 80094dc:	2000027c 	.word	0x2000027c
 80094e0:	200002a4 	.word	0x200002a4
 80094e4:	200002a8 	.word	0x200002a8
 80094e8:	20000290 	.word	0x20000290
 80094ec:	2000028c 	.word	0x2000028c

080094f0 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 80094f0:	b5b0      	push	{r4, r5, r7, lr}
 80094f2:	b08a      	sub	sp, #40	; 0x28
 80094f4:	af00      	add	r7, sp, #0
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float pre = 5;         //スラローム前距離
 80094f6:	4b76      	ldr	r3, [pc, #472]	; (80096d0 <SlalomLeft+0x1e0>)
 80094f8:	627b      	str	r3, [r7, #36]	; 0x24
	float fol = 12;         //スラローム後距離
 80094fa:	4b76      	ldr	r3, [pc, #472]	; (80096d4 <SlalomLeft+0x1e4>)
 80094fc:	623b      	str	r3, [r7, #32]
	float v_turn = explore_velocity;       //スラローム時の重心速度
 80094fe:	4b76      	ldr	r3, [pc, #472]	; (80096d8 <SlalomLeft+0x1e8>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	61fb      	str	r3, [r7, #28]
	float alpha_turn = -0.13;//-0.015*13;  //スラローム時の角加速度
 8009504:	4b75      	ldr	r3, [pc, #468]	; (80096dc <SlalomLeft+0x1ec>)
 8009506:	61bb      	str	r3, [r7, #24]

	//angle = 0;         //アングルの初期化
	float ang1 = 30*M_PI/180;         //角速度が上がるのは0からang1まで
 8009508:	4b75      	ldr	r3, [pc, #468]	; (80096e0 <SlalomLeft+0x1f0>)
 800950a:	617b      	str	r3, [r7, #20]
	float ang2 = 60*M_PI/180;         //角速度が一定なのはang1からang2まで
 800950c:	4b75      	ldr	r3, [pc, #468]	; (80096e4 <SlalomLeft+0x1f4>)
 800950e:	613b      	str	r3, [r7, #16]
	float ang3 = 90*M_PI/180;         //角速度が下がるのはang2からang3まで
 8009510:	4b75      	ldr	r3, [pc, #468]	; (80096e8 <SlalomLeft+0x1f8>)
 8009512:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = total_pulse[LEFT] + total_pulse[RIGHT];	//汎用的に書いておく
 8009514:	4b75      	ldr	r3, [pc, #468]	; (80096ec <SlalomLeft+0x1fc>)
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	4b74      	ldr	r3, [pc, #464]	; (80096ec <SlalomLeft+0x1fc>)
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	4413      	add	r3, r2
 800951e:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) ) //移動量を条件に直進
 8009520:	e00a      	b.n	8009538 <SlalomLeft+0x48>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = 0;
 8009522:	4b73      	ldr	r3, [pc, #460]	; (80096f0 <SlalomLeft+0x200>)
 8009524:	f04f 0200 	mov.w	r2, #0
 8009528:	601a      	str	r2, [r3, #0]
			angular_acceleration = 0;
 800952a:	4b72      	ldr	r3, [pc, #456]	; (80096f4 <SlalomLeft+0x204>)
 800952c:	f04f 0200 	mov.w	r2, #0
 8009530:	601a      	str	r2, [r3, #0]
			target_velocity[BODY] = v_turn;
 8009532:	4a71      	ldr	r2, [pc, #452]	; (80096f8 <SlalomLeft+0x208>)
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	6093      	str	r3, [r2, #8]
	while( now_pulse + (2*pre/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) ) //移動量を条件に直進
 8009538:	68b8      	ldr	r0, [r7, #8]
 800953a:	f7fe ff2b 	bl	8008394 <__aeabi_i2d>
 800953e:	4604      	mov	r4, r0
 8009540:	460d      	mov	r5, r1
 8009542:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009546:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800954a:	ee17 0a90 	vmov	r0, s15
 800954e:	f7fe ff33 	bl	80083b8 <__aeabi_f2d>
 8009552:	a35d      	add	r3, pc, #372	; (adr r3, 80096c8 <SlalomLeft+0x1d8>)
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	f7ff f8b0 	bl	80086bc <__aeabi_ddiv>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4620      	mov	r0, r4
 8009562:	4629      	mov	r1, r5
 8009564:	f7fe fdca 	bl	80080fc <__adddf3>
 8009568:	4603      	mov	r3, r0
 800956a:	460c      	mov	r4, r1
 800956c:	4625      	mov	r5, r4
 800956e:	461c      	mov	r4, r3
 8009570:	4b5e      	ldr	r3, [pc, #376]	; (80096ec <SlalomLeft+0x1fc>)
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	4b5d      	ldr	r3, [pc, #372]	; (80096ec <SlalomLeft+0x1fc>)
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	4413      	add	r3, r2
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe ff0a 	bl	8008394 <__aeabi_i2d>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4620      	mov	r0, r4
 8009586:	4629      	mov	r1, r5
 8009588:	f7ff f9fe 	bl	8008988 <__aeabi_dcmpgt>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1c7      	bne.n	8009522 <SlalomLeft+0x32>

			////printf("直進1\r\n");
	}


	float start_angle = angle;
 8009592:	4b5a      	ldr	r3, [pc, #360]	; (80096fc <SlalomLeft+0x20c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	607b      	str	r3, [r7, #4]
	while(start_angle - ang1 < angle)
 8009598:	e005      	b.n	80095a6 <SlalomLeft+0xb6>
	{

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			angular_acceleration = alpha_turn;
 800959a:	4a56      	ldr	r2, [pc, #344]	; (80096f4 <SlalomLeft+0x204>)
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	6013      	str	r3, [r2, #0]
			target_velocity[BODY] = v_turn;
 80095a0:	4a55      	ldr	r2, [pc, #340]	; (80096f8 <SlalomLeft+0x208>)
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	6093      	str	r3, [r2, #8]
	while(start_angle - ang1 < angle)
 80095a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80095aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80095ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80095b2:	4b52      	ldr	r3, [pc, #328]	; (80096fc <SlalomLeft+0x20c>)
 80095b4:	edd3 7a00 	vldr	s15, [r3]
 80095b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c0:	d4eb      	bmi.n	800959a <SlalomLeft+0xaa>

			//printf("クロソイド1\r\n");
	}
	angular_acceleration = 0;
 80095c2:	4b4c      	ldr	r3, [pc, #304]	; (80096f4 <SlalomLeft+0x204>)
 80095c4:	f04f 0200 	mov.w	r2, #0
 80095c8:	601a      	str	r2, [r3, #0]
	//alpha_flag = 0;

	while(start_angle - ang2 < angle)
 80095ca:	e006      	b.n	80095da <SlalomLeft+0xea>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = target_angular_v;
 80095cc:	4b48      	ldr	r3, [pc, #288]	; (80096f0 <SlalomLeft+0x200>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a47      	ldr	r2, [pc, #284]	; (80096f0 <SlalomLeft+0x200>)
 80095d2:	6013      	str	r3, [r2, #0]
			target_velocity[BODY] = v_turn;
 80095d4:	4a48      	ldr	r2, [pc, #288]	; (80096f8 <SlalomLeft+0x208>)
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	6093      	str	r3, [r2, #8]
	while(start_angle - ang2 < angle)
 80095da:	ed97 7a01 	vldr	s14, [r7, #4]
 80095de:	edd7 7a04 	vldr	s15, [r7, #16]
 80095e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80095e6:	4b45      	ldr	r3, [pc, #276]	; (80096fc <SlalomLeft+0x20c>)
 80095e8:	edd3 7a00 	vldr	s15, [r3]
 80095ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f4:	d4ea      	bmi.n	80095cc <SlalomLeft+0xdc>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < angle)
 80095f6:	e016      	b.n	8009626 <SlalomLeft+0x136>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
			angular_acceleration = -alpha_turn;
 80095f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80095fc:	eef1 7a67 	vneg.f32	s15, s15
 8009600:	4b3c      	ldr	r3, [pc, #240]	; (80096f4 <SlalomLeft+0x204>)
 8009602:	edc3 7a00 	vstr	s15, [r3]
			if(target_angular_v > 0)
 8009606:	4b3a      	ldr	r3, [pc, #232]	; (80096f0 <SlalomLeft+0x200>)
 8009608:	edd3 7a00 	vldr	s15, [r3]
 800960c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009614:	dd04      	ble.n	8009620 <SlalomLeft+0x130>
			{
				target_angular_v = 0;
 8009616:	4b36      	ldr	r3, [pc, #216]	; (80096f0 <SlalomLeft+0x200>)
 8009618:	f04f 0200 	mov.w	r2, #0
 800961c:	601a      	str	r2, [r3, #0]
				break;
 800961e:	e010      	b.n	8009642 <SlalomLeft+0x152>
			}
			target_velocity[BODY] = v_turn;
 8009620:	4a35      	ldr	r2, [pc, #212]	; (80096f8 <SlalomLeft+0x208>)
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	6093      	str	r3, [r2, #8]
	while( start_angle - ang3 < angle)
 8009626:	ed97 7a01 	vldr	s14, [r7, #4]
 800962a:	edd7 7a03 	vldr	s15, [r7, #12]
 800962e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009632:	4b32      	ldr	r3, [pc, #200]	; (80096fc <SlalomLeft+0x20c>)
 8009634:	edd3 7a00 	vldr	s15, [r3]
 8009638:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800963c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009640:	d4da      	bmi.n	80095f8 <SlalomLeft+0x108>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	angular_acceleration = 0;
 8009642:	4b2c      	ldr	r3, [pc, #176]	; (80096f4 <SlalomLeft+0x204>)
 8009644:	f04f 0200 	mov.w	r2, #0
 8009648:	601a      	str	r2, [r3, #0]
	now_pulse = total_pulse[LEFT] + total_pulse[RIGHT];
 800964a:	4b28      	ldr	r3, [pc, #160]	; (80096ec <SlalomLeft+0x1fc>)
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	4b27      	ldr	r3, [pc, #156]	; (80096ec <SlalomLeft+0x1fc>)
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	4413      	add	r3, r2
 8009654:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) )
 8009656:	e006      	b.n	8009666 <SlalomLeft+0x176>
	{
			//velocity_ctrl_flag = 1;
			target_angular_v = 0;
 8009658:	4b25      	ldr	r3, [pc, #148]	; (80096f0 <SlalomLeft+0x200>)
 800965a:	f04f 0200 	mov.w	r2, #0
 800965e:	601a      	str	r2, [r3, #0]
			target_velocity[BODY] = v_turn;
 8009660:	4a25      	ldr	r2, [pc, #148]	; (80096f8 <SlalomLeft+0x208>)
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	6093      	str	r3, [r2, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (total_pulse[LEFT] + total_pulse[RIGHT]) )
 8009666:	68b8      	ldr	r0, [r7, #8]
 8009668:	f7fe fe94 	bl	8008394 <__aeabi_i2d>
 800966c:	4604      	mov	r4, r0
 800966e:	460d      	mov	r5, r1
 8009670:	edd7 7a08 	vldr	s15, [r7, #32]
 8009674:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009678:	ee17 0a90 	vmov	r0, s15
 800967c:	f7fe fe9c 	bl	80083b8 <__aeabi_f2d>
 8009680:	a311      	add	r3, pc, #68	; (adr r3, 80096c8 <SlalomLeft+0x1d8>)
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	f7ff f819 	bl	80086bc <__aeabi_ddiv>
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	4620      	mov	r0, r4
 8009690:	4629      	mov	r1, r5
 8009692:	f7fe fd33 	bl	80080fc <__adddf3>
 8009696:	4603      	mov	r3, r0
 8009698:	460c      	mov	r4, r1
 800969a:	4625      	mov	r5, r4
 800969c:	461c      	mov	r4, r3
 800969e:	4b13      	ldr	r3, [pc, #76]	; (80096ec <SlalomLeft+0x1fc>)
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	4b12      	ldr	r3, [pc, #72]	; (80096ec <SlalomLeft+0x1fc>)
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	4413      	add	r3, r2
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fe fe73 	bl	8008394 <__aeabi_i2d>
 80096ae:	4602      	mov	r2, r0
 80096b0:	460b      	mov	r3, r1
 80096b2:	4620      	mov	r0, r4
 80096b4:	4629      	mov	r1, r5
 80096b6:	f7ff f967 	bl	8008988 <__aeabi_dcmpgt>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1cb      	bne.n	8009658 <SlalomLeft+0x168>
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 80096c0:	bf00      	nop
 80096c2:	3728      	adds	r7, #40	; 0x28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bdb0      	pop	{r4, r5, r7, pc}
 80096c8:	317249d5 	.word	0x317249d5
 80096cc:	3f502de0 	.word	0x3f502de0
 80096d0:	40a00000 	.word	0x40a00000
 80096d4:	41400000 	.word	0x41400000
 80096d8:	20000000 	.word	0x20000000
 80096dc:	be051eb8 	.word	0xbe051eb8
 80096e0:	3f060a92 	.word	0x3f060a92
 80096e4:	3f860a92 	.word	0x3f860a92
 80096e8:	3fc90fdb 	.word	0x3fc90fdb
 80096ec:	2000027c 	.word	0x2000027c
 80096f0:	200002a4 	.word	0x200002a4
 80096f4:	200002a8 	.word	0x200002a8
 80096f8:	20000290 	.word	0x20000290
 80096fc:	2000028c 	.word	0x2000028c

08009700 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
 8009700:	b5b0      	push	{r4, r5, r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	ed87 0a01 	vstr	s0, [r7, #4]
 800970a:	edc7 0a00 	vstr	s1, [r7]
	float additional_speed=0;
 800970e:	f04f 0300 	mov.w	r3, #0
 8009712:	617b      	str	r3, [r7, #20]
	additional_speed = explore_speed - target_velocity[BODY];
 8009714:	4b34      	ldr	r3, [pc, #208]	; (80097e8 <Accel+0xe8>)
 8009716:	edd3 7a02 	vldr	s15, [r3, #8]
 800971a:	ed97 7a00 	vldr	s14, [r7]
 800971e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009722:	edc7 7a05 	vstr	s15, [r7, #20]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009726:	6978      	ldr	r0, [r7, #20]
 8009728:	f7fe fe46 	bl	80083b8 <__aeabi_f2d>
 800972c:	a32a      	add	r3, pc, #168	; (adr r3, 80097d8 <Accel+0xd8>)
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	f7fe fe99 	bl	8008468 <__aeabi_dmul>
 8009736:	4603      	mov	r3, r0
 8009738:	460c      	mov	r4, r1
 800973a:	4625      	mov	r5, r4
 800973c:	461c      	mov	r4, r3
 800973e:	6978      	ldr	r0, [r7, #20]
 8009740:	f7fe fe3a 	bl	80083b8 <__aeabi_f2d>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4620      	mov	r0, r4
 800974a:	4629      	mov	r1, r5
 800974c:	f7fe fe8c 	bl	8008468 <__aeabi_dmul>
 8009750:	4603      	mov	r3, r0
 8009752:	460c      	mov	r4, r1
 8009754:	4625      	mov	r5, r4
 8009756:	461c      	mov	r4, r3
 8009758:	edd7 7a01 	vldr	s15, [r7, #4]
 800975c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009760:	ee17 0a90 	vmov	r0, s15
 8009764:	f7fe fe28 	bl	80083b8 <__aeabi_f2d>
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	4620      	mov	r0, r4
 800976e:	4629      	mov	r1, r5
 8009770:	f7fe ffa4 	bl	80086bc <__aeabi_ddiv>
 8009774:	4603      	mov	r3, r0
 8009776:	460c      	mov	r4, r1
 8009778:	4618      	mov	r0, r3
 800977a:	4621      	mov	r1, r4
 800977c:	f7ff f94c 	bl	8008a18 <__aeabi_d2f>
 8009780:	4602      	mov	r2, r0
 8009782:	4b1a      	ldr	r3, [pc, #104]	; (80097ec <Accel+0xec>)
 8009784:	601a      	str	r2, [r3, #0]

	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009786:	edd7 7a01 	vldr	s15, [r7, #4]
 800978a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800978e:	ee17 0a90 	vmov	r0, s15
 8009792:	f7fe fe11 	bl	80083b8 <__aeabi_f2d>
 8009796:	a312      	add	r3, pc, #72	; (adr r3, 80097e0 <Accel+0xe0>)
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	f7fe ff8e 	bl	80086bc <__aeabi_ddiv>
 80097a0:	4603      	mov	r3, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	4618      	mov	r0, r3
 80097a6:	4621      	mov	r1, r4
 80097a8:	f7ff f90e 	bl	80089c8 <__aeabi_d2iz>
 80097ac:	4603      	mov	r3, r0
 80097ae:	613b      	str	r3, [r7, #16]
	int keep_pulse = total_pulse[BODY]+target_pulse;
 80097b0:	4b0f      	ldr	r3, [pc, #60]	; (80097f0 <Accel+0xf0>)
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	4413      	add	r3, r2
 80097b8:	60fb      	str	r3, [r7, #12]
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	while( ( keep_pulse ) > ( total_pulse[BODY] ) )
 80097ba:	bf00      	nop
 80097bc:	4b0c      	ldr	r3, [pc, #48]	; (80097f0 <Accel+0xf0>)
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	dcfa      	bgt.n	80097bc <Accel+0xbc>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			keep_counter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	acceleration = 0;
 80097c6:	4b09      	ldr	r3, [pc, #36]	; (80097ec <Accel+0xec>)
 80097c8:	f04f 0200 	mov.w	r2, #0
 80097cc:	601a      	str	r2, [r3, #0]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 80097ce:	bf00      	nop
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bdb0      	pop	{r4, r5, r7, pc}
 80097d6:	bf00      	nop
 80097d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80097dc:	3f50624d 	.word	0x3f50624d
 80097e0:	317249d5 	.word	0x317249d5
 80097e4:	3f502de0 	.word	0x3f502de0
 80097e8:	20000290 	.word	0x20000290
 80097ec:	200002a0 	.word	0x200002a0
 80097f0:	2000027c 	.word	0x2000027c
 80097f4:	00000000 	.word	0x00000000

080097f8 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 80097f8:	b5b0      	push	{r4, r5, r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8009802:	edc7 0a00 	vstr	s1, [r7]
	float down_speed=0;
 8009806:	f04f 0300 	mov.w	r3, #0
 800980a:	617b      	str	r3, [r7, #20]
	down_speed = target_velocity[BODY] - end_speed;
 800980c:	4b3e      	ldr	r3, [pc, #248]	; (8009908 <Decel+0x110>)
 800980e:	ed93 7a02 	vldr	s14, [r3, #8]
 8009812:	edd7 7a00 	vldr	s15, [r7]
 8009816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800981a:	edc7 7a05 	vstr	s15, [r7, #20]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 800981e:	6978      	ldr	r0, [r7, #20]
 8009820:	f7fe fdca 	bl	80083b8 <__aeabi_f2d>
 8009824:	a334      	add	r3, pc, #208	; (adr r3, 80098f8 <Decel+0x100>)
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	f7fe fe1d 	bl	8008468 <__aeabi_dmul>
 800982e:	4603      	mov	r3, r0
 8009830:	460c      	mov	r4, r1
 8009832:	4625      	mov	r5, r4
 8009834:	461c      	mov	r4, r3
 8009836:	6978      	ldr	r0, [r7, #20]
 8009838:	f7fe fdbe 	bl	80083b8 <__aeabi_f2d>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	4620      	mov	r0, r4
 8009842:	4629      	mov	r1, r5
 8009844:	f7fe fe10 	bl	8008468 <__aeabi_dmul>
 8009848:	4603      	mov	r3, r0
 800984a:	460c      	mov	r4, r1
 800984c:	4625      	mov	r5, r4
 800984e:	461c      	mov	r4, r3
 8009850:	edd7 7a01 	vldr	s15, [r7, #4]
 8009854:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009858:	ee17 0a90 	vmov	r0, s15
 800985c:	f7fe fdac 	bl	80083b8 <__aeabi_f2d>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4620      	mov	r0, r4
 8009866:	4629      	mov	r1, r5
 8009868:	f7fe ff28 	bl	80086bc <__aeabi_ddiv>
 800986c:	4603      	mov	r3, r0
 800986e:	460c      	mov	r4, r1
 8009870:	4618      	mov	r0, r3
 8009872:	4621      	mov	r1, r4
 8009874:	f7ff f8d0 	bl	8008a18 <__aeabi_d2f>
 8009878:	4603      	mov	r3, r0
 800987a:	ee07 3a90 	vmov	s15, r3
 800987e:	eef1 7a67 	vneg.f32	s15, s15
 8009882:	4b22      	ldr	r3, [pc, #136]	; (800990c <Decel+0x114>)
 8009884:	edc3 7a00 	vstr	s15, [r3]
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009888:	edd7 7a01 	vldr	s15, [r7, #4]
 800988c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009890:	ee17 0a90 	vmov	r0, s15
 8009894:	f7fe fd90 	bl	80083b8 <__aeabi_f2d>
 8009898:	a319      	add	r3, pc, #100	; (adr r3, 8009900 <Decel+0x108>)
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f7fe ff0d 	bl	80086bc <__aeabi_ddiv>
 80098a2:	4603      	mov	r3, r0
 80098a4:	460c      	mov	r4, r1
 80098a6:	4618      	mov	r0, r3
 80098a8:	4621      	mov	r1, r4
 80098aa:	f7ff f88d 	bl	80089c8 <__aeabi_d2iz>
 80098ae:	4603      	mov	r3, r0
 80098b0:	613b      	str	r3, [r7, #16]
	int keep_pulse = total_pulse[BODY]+target_pulse;
 80098b2:	4b17      	ldr	r3, [pc, #92]	; (8009910 <Decel+0x118>)
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	4413      	add	r3, r2
 80098ba:	60fb      	str	r3, [r7, #12]

	while( ( keep_pulse ) > ( total_pulse[BODY]) )
 80098bc:	e007      	b.n	80098ce <Decel+0xd6>
//		if( (abs(TIM4->CNT - INITIAL_PULSE) >= 29000) )
//		{
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			keep_counter[RIGHT] = INITIAL_PULSE;
//		}
		if(target_velocity[BODY] <= 0)
 80098be:	4b12      	ldr	r3, [pc, #72]	; (8009908 <Decel+0x110>)
 80098c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80098c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80098c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098cc:	d905      	bls.n	80098da <Decel+0xe2>
	while( ( keep_pulse ) > ( total_pulse[BODY]) )
 80098ce:	4b10      	ldr	r3, [pc, #64]	; (8009910 <Decel+0x118>)
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	dcf2      	bgt.n	80098be <Decel+0xc6>
 80098d8:	e000      	b.n	80098dc <Decel+0xe4>
			break;
 80098da:	bf00      	nop
	}
	target_velocity[BODY] = 0;
 80098dc:	4b0a      	ldr	r3, [pc, #40]	; (8009908 <Decel+0x110>)
 80098de:	f04f 0200 	mov.w	r2, #0
 80098e2:	609a      	str	r2, [r3, #8]
	acceleration = 0;
 80098e4:	4b09      	ldr	r3, [pc, #36]	; (800990c <Decel+0x114>)
 80098e6:	f04f 0200 	mov.w	r2, #0
 80098ea:	601a      	str	r2, [r3, #0]
}
 80098ec:	bf00      	nop
 80098ee:	3718      	adds	r7, #24
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bdb0      	pop	{r4, r5, r7, pc}
 80098f4:	f3af 8000 	nop.w
 80098f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80098fc:	3f50624d 	.word	0x3f50624d
 8009900:	317249d5 	.word	0x317249d5
 8009904:	3f502de0 	.word	0x3f502de0
 8009908:	20000290 	.word	0x20000290
 800990c:	200002a0 	.word	0x200002a0
 8009910:	2000027c 	.word	0x2000027c
 8009914:	00000000 	.word	0x00000000

08009918 <GoStraight>:
//色々な処理を合わせて先に関数を作ってしまう方がいいかも。
//加速だけ、減速だけ、定速で、などを組み合わせて台形加減速で一区画走る、とか数区画走れる、途中で壁を見る、とか。

void GoStraight(float move_distance,  float explore_speed, float accel)
{
 8009918:	b590      	push	{r4, r7, lr}
 800991a:	b087      	sub	sp, #28
 800991c:	af00      	add	r7, sp, #0
 800991e:	ed87 0a03 	vstr	s0, [r7, #12]
 8009922:	edc7 0a02 	vstr	s1, [r7, #8]
 8009926:	ed87 1a01 	vstr	s2, [r7, #4]
	//v = v0 + at
	//x = v0t + 0.5*at^2
		//target_velocity[BODY] = explore_speed;
	//加速なら
//	if(accel == TRUE)	//目標移動量と到達速度から加速度を計算する。
	explore_speed += accel;
 800992a:	ed97 7a02 	vldr	s14, [r7, #8]
 800992e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009936:	edc7 7a02 	vstr	s15, [r7, #8]

	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	//移動量は90だけど、加速に要する距離はその半分とか好きに変えられるように。
	Accel( 90/2 , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 800993a:	edd7 0a02 	vldr	s1, [r7, #8]
 800993e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80099b8 <GoStraight+0xa0>
 8009942:	f7ff fedd 	bl	8009700 <Accel>
	//printf("%f, %f, %f\r\n",current_velocity[LEFT],current_velocity[RIGHT], acceleration);
	int target_pulse = (int)(2*(move_distance-45)/MM_PER_PULSE);
 8009946:	edd7 7a03 	vldr	s15, [r7, #12]
 800994a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80099b8 <GoStraight+0xa0>
 800994e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009952:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009956:	ee17 0a90 	vmov	r0, s15
 800995a:	f7fe fd2d 	bl	80083b8 <__aeabi_f2d>
 800995e:	a314      	add	r3, pc, #80	; (adr r3, 80099b0 <GoStraight+0x98>)
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	f7fe feaa 	bl	80086bc <__aeabi_ddiv>
 8009968:	4603      	mov	r3, r0
 800996a:	460c      	mov	r4, r1
 800996c:	4618      	mov	r0, r3
 800996e:	4621      	mov	r1, r4
 8009970:	f7ff f82a 	bl	80089c8 <__aeabi_d2iz>
 8009974:	4603      	mov	r3, r0
 8009976:	617b      	str	r3, [r7, #20]
	int keep_pulse = total_pulse[BODY];
 8009978:	4b10      	ldr	r3, [pc, #64]	; (80099bc <GoStraight+0xa4>)
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	613b      	str	r3, [r7, #16]

	while( ( keep_pulse +target_pulse) > ( total_pulse[BODY]) )
 800997e:	e00b      	b.n	8009998 <GoStraight+0x80>
	{
		//最初の45mmで加速をストップ

		//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
		if( ( keep_pulse + (int)(2*45/MM_PER_PULSE) )  <= ( total_pulse[BODY]) )	//移動量に応じて処理を変える。
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 8009986:	3303      	adds	r3, #3
 8009988:	4a0c      	ldr	r2, [pc, #48]	; (80099bc <GoStraight+0xa4>)
 800998a:	6892      	ldr	r2, [r2, #8]
 800998c:	4293      	cmp	r3, r2
 800998e:	dc03      	bgt.n	8009998 <GoStraight+0x80>
		{
			acceleration = 0;
 8009990:	4b0b      	ldr	r3, [pc, #44]	; (80099c0 <GoStraight+0xa8>)
 8009992:	f04f 0200 	mov.w	r2, #0
 8009996:	601a      	str	r2, [r3, #0]
	while( ( keep_pulse +target_pulse) > ( total_pulse[BODY]) )
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	441a      	add	r2, r3
 800999e:	4b07      	ldr	r3, [pc, #28]	; (80099bc <GoStraight+0xa4>)
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	dcec      	bgt.n	8009980 <GoStraight+0x68>

	//Uターンは別パターン

	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。

}
 80099a6:	bf00      	nop
 80099a8:	371c      	adds	r7, #28
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd90      	pop	{r4, r7, pc}
 80099ae:	bf00      	nop
 80099b0:	317249d5 	.word	0x317249d5
 80099b4:	3f502de0 	.word	0x3f502de0
 80099b8:	42340000 	.word	0x42340000
 80099bc:	2000027c 	.word	0x2000027c
 80099c0:	200002a0 	.word	0x200002a0

080099c4 <TurnRight>:
void TurnRight(char mode)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	71fb      	strb	r3, [r7, #7]
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 80099ce:	79fb      	ldrb	r3, [r7, #7]
 80099d0:	2b53      	cmp	r3, #83	; 0x53
 80099d2:	d020      	beq.n	8009a16 <TurnRight+0x52>
 80099d4:	2b54      	cmp	r3, #84	; 0x54
 80099d6:	d000      	beq.n	80099da <TurnRight+0x16>
	case 'S':
		//スラローム
		SlalomRight();
		break;
	default :
		break;
 80099d8:	e020      	b.n	8009a1c <TurnRight+0x58>
		Decel(40, 0);
 80099da:	eddf 0a12 	vldr	s1, [pc, #72]	; 8009a24 <TurnRight+0x60>
 80099de:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8009a28 <TurnRight+0x64>
 80099e2:	f7ff ff09 	bl	80097f8 <Decel>
		HAL_Delay(500);
 80099e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80099ea:	f003 fc17 	bl	800d21c <HAL_Delay>
		Rotate( 90 , M_PI);
 80099ee:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8009a2c <TurnRight+0x68>
 80099f2:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8009a30 <TurnRight+0x6c>
 80099f6:	f7ff fc21 	bl	800923c <Rotate>
		HAL_Delay(500);
 80099fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80099fe:	f003 fc0d 	bl	800d21c <HAL_Delay>
		Accel(40, explore_velocity);
 8009a02:	4b0c      	ldr	r3, [pc, #48]	; (8009a34 <TurnRight+0x70>)
 8009a04:	edd3 7a00 	vldr	s15, [r3]
 8009a08:	eef0 0a67 	vmov.f32	s1, s15
 8009a0c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8009a28 <TurnRight+0x64>
 8009a10:	f7ff fe76 	bl	8009700 <Accel>
		break;
 8009a14:	e002      	b.n	8009a1c <TurnRight+0x58>
		SlalomRight();
 8009a16:	f7ff fc63 	bl	80092e0 <SlalomRight>
		break;
 8009a1a:	bf00      	nop
	}


}
 8009a1c:	bf00      	nop
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	00000000 	.word	0x00000000
 8009a28:	42200000 	.word	0x42200000
 8009a2c:	40490fdb 	.word	0x40490fdb
 8009a30:	42b40000 	.word	0x42b40000
 8009a34:	20000000 	.word	0x20000000

08009a38 <TurnLeft>:
void TurnLeft(char mode)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	4603      	mov	r3, r0
 8009a40:	71fb      	strb	r3, [r7, #7]
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 8009a42:	79fb      	ldrb	r3, [r7, #7]
 8009a44:	2b53      	cmp	r3, #83	; 0x53
 8009a46:	d020      	beq.n	8009a8a <TurnLeft+0x52>
 8009a48:	2b54      	cmp	r3, #84	; 0x54
 8009a4a:	d000      	beq.n	8009a4e <TurnLeft+0x16>
	case 'S':
		//スラローム
		SlalomLeft();
		break;
	default :
		break;
 8009a4c:	e020      	b.n	8009a90 <TurnLeft+0x58>
		Decel(40, 0);
 8009a4e:	eddf 0a12 	vldr	s1, [pc, #72]	; 8009a98 <TurnLeft+0x60>
 8009a52:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8009a9c <TurnLeft+0x64>
 8009a56:	f7ff fecf 	bl	80097f8 <Decel>
		HAL_Delay(500);
 8009a5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009a5e:	f003 fbdd 	bl	800d21c <HAL_Delay>
		Rotate( 90 , -M_PI);
 8009a62:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8009aa0 <TurnLeft+0x68>
 8009a66:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8009aa4 <TurnLeft+0x6c>
 8009a6a:	f7ff fbe7 	bl	800923c <Rotate>
		HAL_Delay(500);
 8009a6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009a72:	f003 fbd3 	bl	800d21c <HAL_Delay>
		Accel(40, explore_velocity);
 8009a76:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <TurnLeft+0x70>)
 8009a78:	edd3 7a00 	vldr	s15, [r3]
 8009a7c:	eef0 0a67 	vmov.f32	s1, s15
 8009a80:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8009a9c <TurnLeft+0x64>
 8009a84:	f7ff fe3c 	bl	8009700 <Accel>
		break;
 8009a88:	e002      	b.n	8009a90 <TurnLeft+0x58>
		SlalomLeft();
 8009a8a:	f7ff fd31 	bl	80094f0 <SlalomLeft>
		break;
 8009a8e:	bf00      	nop
	}

}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	00000000 	.word	0x00000000
 8009a9c:	42200000 	.word	0x42200000
 8009aa0:	c0490fdb 	.word	0xc0490fdb
 8009aa4:	42b40000 	.word	0x42b40000
 8009aa8:	20000000 	.word	0x20000000

08009aac <GoBack>:
void GoBack()
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0
	//減速して
	Decel(45, 0);
 8009ab0:	eddf 0a16 	vldr	s1, [pc, #88]	; 8009b0c <GoBack+0x60>
 8009ab4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8009b10 <GoBack+0x64>
 8009ab8:	f7ff fe9e 	bl	80097f8 <Decel>
	HAL_Delay(500);
 8009abc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009ac0:	f003 fbac 	bl	800d21c <HAL_Delay>
	//補正して
	Calib();
 8009ac4:	f7ff fc04 	bl	80092d0 <Calib>
	//回転して
	Rotate(90, M_PI);//もしくは二回とも左
 8009ac8:	eddf 0a12 	vldr	s1, [pc, #72]	; 8009b14 <GoBack+0x68>
 8009acc:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8009b18 <GoBack+0x6c>
 8009ad0:	f7ff fbb4 	bl	800923c <Rotate>
	HAL_Delay(500);
 8009ad4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009ad8:	f003 fba0 	bl	800d21c <HAL_Delay>
	//補正して
	Calib();
 8009adc:	f7ff fbf8 	bl	80092d0 <Calib>
	//回転して
	Rotate(90, M_PI);
 8009ae0:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8009b14 <GoBack+0x68>
 8009ae4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009b18 <GoBack+0x6c>
 8009ae8:	f7ff fba8 	bl	800923c <Rotate>
	HAL_Delay(500);
 8009aec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009af0:	f003 fb94 	bl	800d21c <HAL_Delay>
	//加速する
	Accel(45, explore_velocity);
 8009af4:	4b09      	ldr	r3, [pc, #36]	; (8009b1c <GoBack+0x70>)
 8009af6:	edd3 7a00 	vldr	s15, [r3]
 8009afa:	eef0 0a67 	vmov.f32	s1, s15
 8009afe:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8009b10 <GoBack+0x64>
 8009b02:	f7ff fdfd 	bl	8009700 <Accel>
	//ここまでで目標走行距離を完了する

}
 8009b06:	bf00      	nop
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	00000000 	.word	0x00000000
 8009b10:	42340000 	.word	0x42340000
 8009b14:	40490fdb 	.word	0x40490fdb
 8009b18:	42b40000 	.word	0x42b40000
 8009b1c:	20000000 	.word	0x20000000

08009b20 <SelectAction>:



//進行方向決定の処理をどうするかで書き方が変わる。フラグを使うとか。
void SelectAction(char direction)	//前後左右であらわす
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	71fb      	strb	r3, [r7, #7]
	//現在の座標から次の座標に行くまでの処理を一つのアクションとする
	switch(direction)
 8009b2a:	79fb      	ldrb	r3, [r7, #7]
 8009b2c:	3b42      	subs	r3, #66	; 0x42
 8009b2e:	2b11      	cmp	r3, #17
 8009b30:	d840      	bhi.n	8009bb4 <SelectAction+0x94>
 8009b32:	a201      	add	r2, pc, #4	; (adr r2, 8009b38 <SelectAction+0x18>)
 8009b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b38:	08009baf 	.word	0x08009baf
 8009b3c:	08009bb5 	.word	0x08009bb5
 8009b40:	08009bb5 	.word	0x08009bb5
 8009b44:	08009bb5 	.word	0x08009bb5
 8009b48:	08009bb5 	.word	0x08009bb5
 8009b4c:	08009bb5 	.word	0x08009bb5
 8009b50:	08009bb5 	.word	0x08009bb5
 8009b54:	08009bb5 	.word	0x08009bb5
 8009b58:	08009bb5 	.word	0x08009bb5
 8009b5c:	08009bb5 	.word	0x08009bb5
 8009b60:	08009ba7 	.word	0x08009ba7
 8009b64:	08009bb5 	.word	0x08009bb5
 8009b68:	08009bb5 	.word	0x08009bb5
 8009b6c:	08009bb5 	.word	0x08009bb5
 8009b70:	08009bb5 	.word	0x08009bb5
 8009b74:	08009bb5 	.word	0x08009bb5
 8009b78:	08009b9f 	.word	0x08009b9f
 8009b7c:	08009b81 	.word	0x08009b81
	{
	//直進
	case 'S':
		GoStraight(90, explore_velocity, add_velocity);
 8009b80:	4b0f      	ldr	r3, [pc, #60]	; (8009bc0 <SelectAction+0xa0>)
 8009b82:	edd3 7a00 	vldr	s15, [r3]
 8009b86:	4b0f      	ldr	r3, [pc, #60]	; (8009bc4 <SelectAction+0xa4>)
 8009b88:	ed93 7a00 	vldr	s14, [r3]
 8009b8c:	eeb0 1a47 	vmov.f32	s2, s14
 8009b90:	eef0 0a67 	vmov.f32	s1, s15
 8009b94:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009bc8 <SelectAction+0xa8>
 8009b98:	f7ff febe 	bl	8009918 <GoStraight>
		break;
 8009b9c:	e00b      	b.n	8009bb6 <SelectAction+0x96>
	//右方向
	case 'R':	//左右の違いは目標値がそれぞれ入れ替わるだけだから、上手く書けば一つの関数でできる
		//スラロームターンと減速プラスターンetc
		TurnRight('S');
 8009b9e:	2053      	movs	r0, #83	; 0x53
 8009ba0:	f7ff ff10 	bl	80099c4 <TurnRight>
		break;
 8009ba4:	e007      	b.n	8009bb6 <SelectAction+0x96>
	//左方向
	case 'L':
		TurnLeft('S');
 8009ba6:	2053      	movs	r0, #83	; 0x53
 8009ba8:	f7ff ff46 	bl	8009a38 <TurnLeft>
		break;
 8009bac:	e003      	b.n	8009bb6 <SelectAction+0x96>
	case 'B':
		GoBack();	//Uターン
 8009bae:	f7ff ff7d 	bl	8009aac <GoBack>
		break;
 8009bb2:	e000      	b.n	8009bb6 <SelectAction+0x96>


	default :
		break;
 8009bb4:	bf00      	nop

	}
}
 8009bb6:	bf00      	nop
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20000000 	.word	0x20000000
 8009bc4:	2000029c 	.word	0x2000029c
 8009bc8:	42b40000 	.word	0x42b40000

08009bcc <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <GetPulseDisplacement>:
//目的 : エンコーダパルスの初期値との差分を取得する(割り込み内)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : パルスの変位
//-------------------------//
int GetPulseDisplacement(int *timer_counter,  int initial_pulse)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
	//割り込みで呼び出す想定
	//カウンタをリセットするのは別のところ
	int current_pulse = *timer_counter;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60fb      	str	r3, [r7, #12]
	int pulse_displacement = -1* (current_pulse - initial_pulse);
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	60bb      	str	r3, [r7, #8]
	//前回値として保存

//	//次回の呼び出しのためにすぐ初期化。
	InitPulse( timer_counter, initial_pulse);
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff ffe2 	bl	8009bcc <InitPulse>

	return pulse_displacement;
 8009c08:	68bb      	ldr	r3, [r7, #8]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
	...

08009c14 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 8009c24:	4a2c      	ldr	r2, [pc, #176]	; (8009cd8 <GetWallDataAverage+0xc4>)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	bfb8      	it	lt
 8009c34:	425b      	neglt	r3, r3
 8009c36:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 8009c38:	4927      	ldr	r1, [pc, #156]	; (8009cd8 <GetWallDataAverage+0xc4>)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 8009c42:	4a26      	ldr	r2, [pc, #152]	; (8009cdc <GetWallDataAverage+0xc8>)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	441a      	add	r2, r3
 8009c4e:	4923      	ldr	r1, [pc, #140]	; (8009cdc <GetWallDataAverage+0xc8>)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 8009c56:	4a22      	ldr	r2, [pc, #136]	; (8009ce0 <GetWallDataAverage+0xcc>)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c5e:	1c5a      	adds	r2, r3, #1
 8009c60:	491f      	ldr	r1, [pc, #124]	; (8009ce0 <GetWallDataAverage+0xcc>)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 8009c68:	4a1d      	ldr	r2, [pc, #116]	; (8009ce0 <GetWallDataAverage+0xcc>)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d121      	bne.n	8009cba <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 8009c76:	4a19      	ldr	r2, [pc, #100]	; (8009cdc <GetWallDataAverage+0xc8>)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c7e:	ee07 3a90 	vmov	s15, r3
 8009c82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009c86:	4a16      	ldr	r2, [pc, #88]	; (8009ce0 <GetWallDataAverage+0xcc>)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c8e:	ee07 3a90 	vmov	s15, r3
 8009c92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c9a:	4a12      	ldr	r2, [pc, #72]	; (8009ce4 <GetWallDataAverage+0xd0>)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 8009ca6:	4a0d      	ldr	r2, [pc, #52]	; (8009cdc <GetWallDataAverage+0xc8>)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2100      	movs	r1, #0
 8009cac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 8009cb0:	4a0b      	ldr	r2, [pc, #44]	; (8009ce0 <GetWallDataAverage+0xcc>)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 8009cba:	4a0a      	ldr	r2, [pc, #40]	; (8009ce4 <GetWallDataAverage+0xd0>)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	ee07 3a90 	vmov	s15, r3
}
 8009cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8009ccc:	371c      	adds	r7, #28
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	200001fc 	.word	0x200001fc
 8009cdc:	2000020c 	.word	0x2000020c
 8009ce0:	2000021c 	.word	0x2000021c
 8009ce4:	2000022c 	.word	0x2000022c

08009ce8 <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b087      	sub	sp, #28
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	ed87 0a02 	vstr	s0, [r7, #8]
 8009cf4:	edc7 0a01 	vstr	s1, [r7, #4]
 8009cf8:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 8009cfc:	f04f 0300 	mov.w	r3, #0
 8009d00:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	ee07 3a90 	vmov	s15, r3
 8009d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009d10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d14:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d18:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009d1c:	ed97 7a00 	vldr	s14, [r7]
 8009d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d24:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	ee07 3a90 	vmov	s15, r3
}
 8009d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8009d32:	371c      	adds	r7, #28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 8009d46:	2301      	movs	r3, #1
 8009d48:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60bb      	str	r3, [r7, #8]
 8009d4e:	e007      	b.n	8009d60 <IntegerPower+0x24>
	{
		pattern_num *= integer;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	fb02 f303 	mul.w	r3, r2, r3
 8009d58:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	60bb      	str	r3, [r7, #8]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	dbf3      	blt.n	8009d50 <IntegerPower+0x14>
	}
	return pattern_num;
 8009d68:	68fb      	ldr	r3, [r7, #12]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 8009d76:	b480      	push	{r7}
 8009d78:	b08b      	sub	sp, #44	; 0x2c
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	ed87 0a03 	vstr	s0, [r7, #12]
 8009d80:	edc7 0a02 	vstr	s1, [r7, #8]
 8009d84:	ed87 1a01 	vstr	s2, [r7, #4]
 8009d88:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 8009d8a:	edd7 6a03 	vldr	s13, [r7, #12]
 8009d8e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d96:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 8009d9a:	edd7 6a02 	vldr	s13, [r7, #8]
 8009d9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009da6:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 8009daa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dae:	edd7 7a06 	vldr	s15, [r7, #24]
 8009db2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	ee07 3a90 	vmov	s15, r3
 8009dbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dc4:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 8009dcc:	2300      	movs	r3, #0
 8009dce:	623b      	str	r3, [r7, #32]
 8009dd0:	e018      	b.n	8009e04 <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 8009dd2:	6a3b      	ldr	r3, [r7, #32]
 8009dd4:	ee07 3a90 	vmov	s15, r3
 8009dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ddc:	edd7 7a05 	vldr	s15, [r7, #20]
 8009de0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009de4:	edd7 7a06 	vldr	s15, [r7, #24]
 8009de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dec:	ed97 7a07 	vldr	s14, [r7, #28]
 8009df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df8:	db01      	blt.n	8009dfe <GetBatteryLevel+0x88>
		{
			pattern = i;
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	3301      	adds	r3, #1
 8009e02:	623b      	str	r3, [r7, #32]
 8009e04:	6a3a      	ldr	r2, [r7, #32]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	dbe2      	blt.n	8009dd2 <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	372c      	adds	r7, #44	; 0x2c
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <TimeMonitor>:

int timer=0, t=0;
//以下割り込みで呼ぶ関数
//このあたりの関数は、構造体変数を扱うファイルにまとめたほうがいいかもしれない。(メインのアルゴリズム、アクション)
void TimeMonitor()
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	af00      	add	r7, sp, #0
	//いろいろな時間を測って監視する。

}
 8009e1e:	bf00      	nop
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <UpdatePhisicalDataFromEnc>:


void UpdatePhisicalDataFromEnc()
{
 8009e28:	b5b0      	push	{r4, r5, r7, lr}
 8009e2a:	af00      	add	r7, sp, #0

	//エンコーダパルスをどう扱うか。今のままだと1msでの変位が大きいと目標パルス量を大きく通り越してしまう。→速度の取得時にはリセットをしないで、前回のパルスからの差を取ればいいかも。
	//TIM3->CNT - INITIAL_PULSE <= target_pulse の間は直進。みたいなプログラムにして、breakした瞬間にパルスリセット。
	pulse_displacement[LEFT] = GetPulseDisplacement( (int*)(&(TIM3->CNT)),  INITIAL_PULSE/*&keep_counter[LEFT]*/);
 8009e2c:	f247 512f 	movw	r1, #29999	; 0x752f
 8009e30:	484f      	ldr	r0, [pc, #316]	; (8009f70 <UpdatePhisicalDataFromEnc+0x148>)
 8009e32:	f7ff fed9 	bl	8009be8 <GetPulseDisplacement>
 8009e36:	4602      	mov	r2, r0
 8009e38:	4b4e      	ldr	r3, [pc, #312]	; (8009f74 <UpdatePhisicalDataFromEnc+0x14c>)
 8009e3a:	601a      	str	r2, [r3, #0]
	pulse_displacement[RIGHT] = GetPulseDisplacement( (int*)(&(TIM4->CNT)),  INITIAL_PULSE/*&keep_counter[RIGHT]*/);
 8009e3c:	f247 512f 	movw	r1, #29999	; 0x752f
 8009e40:	484d      	ldr	r0, [pc, #308]	; (8009f78 <UpdatePhisicalDataFromEnc+0x150>)
 8009e42:	f7ff fed1 	bl	8009be8 <GetPulseDisplacement>
 8009e46:	4602      	mov	r2, r0
 8009e48:	4b4a      	ldr	r3, [pc, #296]	; (8009f74 <UpdatePhisicalDataFromEnc+0x14c>)
 8009e4a:	605a      	str	r2, [r3, #4]

	//速度 mm/s
	current_velocity[LEFT] = ( (float)pulse_displacement[LEFT] * MM_PER_PULSE ) / T1;
 8009e4c:	4b49      	ldr	r3, [pc, #292]	; (8009f74 <UpdatePhisicalDataFromEnc+0x14c>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	ee07 3a90 	vmov	s15, r3
 8009e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e58:	ee17 0a90 	vmov	r0, s15
 8009e5c:	f7fe faac 	bl	80083b8 <__aeabi_f2d>
 8009e60:	a33f      	add	r3, pc, #252	; (adr r3, 8009f60 <UpdatePhisicalDataFromEnc+0x138>)
 8009e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e66:	f7fe faff 	bl	8008468 <__aeabi_dmul>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	460c      	mov	r4, r1
 8009e6e:	4618      	mov	r0, r3
 8009e70:	4621      	mov	r1, r4
 8009e72:	a33d      	add	r3, pc, #244	; (adr r3, 8009f68 <UpdatePhisicalDataFromEnc+0x140>)
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	f7fe fc20 	bl	80086bc <__aeabi_ddiv>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	4618      	mov	r0, r3
 8009e82:	4621      	mov	r1, r4
 8009e84:	f7fe fdc8 	bl	8008a18 <__aeabi_d2f>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	4b3c      	ldr	r3, [pc, #240]	; (8009f7c <UpdatePhisicalDataFromEnc+0x154>)
 8009e8c:	601a      	str	r2, [r3, #0]
	current_velocity[RIGHT] = ( (float)pulse_displacement[RIGHT] * MM_PER_PULSE ) / T1;
 8009e8e:	4b39      	ldr	r3, [pc, #228]	; (8009f74 <UpdatePhisicalDataFromEnc+0x14c>)
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	ee07 3a90 	vmov	s15, r3
 8009e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e9a:	ee17 0a90 	vmov	r0, s15
 8009e9e:	f7fe fa8b 	bl	80083b8 <__aeabi_f2d>
 8009ea2:	a32f      	add	r3, pc, #188	; (adr r3, 8009f60 <UpdatePhisicalDataFromEnc+0x138>)
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	f7fe fade 	bl	8008468 <__aeabi_dmul>
 8009eac:	4603      	mov	r3, r0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	a32c      	add	r3, pc, #176	; (adr r3, 8009f68 <UpdatePhisicalDataFromEnc+0x140>)
 8009eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eba:	f7fe fbff 	bl	80086bc <__aeabi_ddiv>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	4621      	mov	r1, r4
 8009ec6:	f7fe fda7 	bl	8008a18 <__aeabi_d2f>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	4b2b      	ldr	r3, [pc, #172]	; (8009f7c <UpdatePhisicalDataFromEnc+0x154>)
 8009ece:	605a      	str	r2, [r3, #4]

	//移動量 mm/msを積算
	total_pulse[LEFT] += pulse_displacement[LEFT];
 8009ed0:	4b2b      	ldr	r3, [pc, #172]	; (8009f80 <UpdatePhisicalDataFromEnc+0x158>)
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	4b27      	ldr	r3, [pc, #156]	; (8009f74 <UpdatePhisicalDataFromEnc+0x14c>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4413      	add	r3, r2
 8009eda:	4a29      	ldr	r2, [pc, #164]	; (8009f80 <UpdatePhisicalDataFromEnc+0x158>)
 8009edc:	6013      	str	r3, [r2, #0]
	total_pulse[RIGHT] += pulse_displacement[RIGHT];
 8009ede:	4b28      	ldr	r3, [pc, #160]	; (8009f80 <UpdatePhisicalDataFromEnc+0x158>)
 8009ee0:	685a      	ldr	r2, [r3, #4]
 8009ee2:	4b24      	ldr	r3, [pc, #144]	; (8009f74 <UpdatePhisicalDataFromEnc+0x14c>)
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	4a25      	ldr	r2, [pc, #148]	; (8009f80 <UpdatePhisicalDataFromEnc+0x158>)
 8009eea:	6053      	str	r3, [r2, #4]
	total_pulse[BODY] = total_pulse[LEFT]+total_pulse[RIGHT];
 8009eec:	4b24      	ldr	r3, [pc, #144]	; (8009f80 <UpdatePhisicalDataFromEnc+0x158>)
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	4b23      	ldr	r3, [pc, #140]	; (8009f80 <UpdatePhisicalDataFromEnc+0x158>)
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	4a22      	ldr	r2, [pc, #136]	; (8009f80 <UpdatePhisicalDataFromEnc+0x158>)
 8009ef8:	6093      	str	r3, [r2, #8]
	//角速度 rad/s
	angular_v = ( current_velocity[LEFT] - current_velocity[RIGHT] ) / TREAD_WIDTH;
 8009efa:	4b20      	ldr	r3, [pc, #128]	; (8009f7c <UpdatePhisicalDataFromEnc+0x154>)
 8009efc:	ed93 7a00 	vldr	s14, [r3]
 8009f00:	4b1e      	ldr	r3, [pc, #120]	; (8009f7c <UpdatePhisicalDataFromEnc+0x154>)
 8009f02:	edd3 7a01 	vldr	s15, [r3, #4]
 8009f06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f0a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8009f84 <UpdatePhisicalDataFromEnc+0x15c>
 8009f0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f12:	4b1d      	ldr	r3, [pc, #116]	; (8009f88 <UpdatePhisicalDataFromEnc+0x160>)
 8009f14:	edc3 7a00 	vstr	s15, [r3]

	//角度 rad/msを積算
	angle += angular_v * T1;
 8009f18:	4b1c      	ldr	r3, [pc, #112]	; (8009f8c <UpdatePhisicalDataFromEnc+0x164>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fe fa4b 	bl	80083b8 <__aeabi_f2d>
 8009f22:	4604      	mov	r4, r0
 8009f24:	460d      	mov	r5, r1
 8009f26:	4b18      	ldr	r3, [pc, #96]	; (8009f88 <UpdatePhisicalDataFromEnc+0x160>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fe fa44 	bl	80083b8 <__aeabi_f2d>
 8009f30:	a30d      	add	r3, pc, #52	; (adr r3, 8009f68 <UpdatePhisicalDataFromEnc+0x140>)
 8009f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f36:	f7fe fa97 	bl	8008468 <__aeabi_dmul>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4620      	mov	r0, r4
 8009f40:	4629      	mov	r1, r5
 8009f42:	f7fe f8db 	bl	80080fc <__adddf3>
 8009f46:	4603      	mov	r3, r0
 8009f48:	460c      	mov	r4, r1
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	f7fe fd63 	bl	8008a18 <__aeabi_d2f>
 8009f52:	4602      	mov	r2, r0
 8009f54:	4b0d      	ldr	r3, [pc, #52]	; (8009f8c <UpdatePhisicalDataFromEnc+0x164>)
 8009f56:	601a      	str	r2, [r3, #0]
	//ここまでがエンコーダからのUpdate
}
 8009f58:	bf00      	nop
 8009f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8009f5c:	f3af 8000 	nop.w
 8009f60:	317249d5 	.word	0x317249d5
 8009f64:	3f502de0 	.word	0x3f502de0
 8009f68:	d2f1a9fc 	.word	0xd2f1a9fc
 8009f6c:	3f50624d 	.word	0x3f50624d
 8009f70:	40000424 	.word	0x40000424
 8009f74:	20000268 	.word	0x20000268
 8009f78:	40000824 	.word	0x40000824
 8009f7c:	20000270 	.word	0x20000270
 8009f80:	2000027c 	.word	0x2000027c
 8009f84:	42120000 	.word	0x42120000
 8009f88:	20000288 	.word	0x20000288
 8009f8c:	2000028c 	.word	0x2000028c

08009f90 <ControlMotor>:
void ControlMotor()
{
 8009f90:	b5b0      	push	{r4, r5, r7, lr}
 8009f92:	af00      	add	r7, sp, #0
	//ここで更新する変数をグローバルに、もしくは構造体で書ければ、あとはメインのアルゴリズムを記述するだけ？

	UpdatePhisicalDataFromEnc();
 8009f94:	f7ff ff48 	bl	8009e28 <UpdatePhisicalDataFromEnc>
	//ここからは目標値と現在値を用いた制御。

	//タイヤ目標値計算
	//減速させすぎると、目標パルスに達する前にマイナスに振れてしまう

	target_velocity[BODY] += acceleration;
 8009f98:	4b5e      	ldr	r3, [pc, #376]	; (800a114 <ControlMotor+0x184>)
 8009f9a:	ed93 7a02 	vldr	s14, [r3, #8]
 8009f9e:	4b5e      	ldr	r3, [pc, #376]	; (800a118 <ControlMotor+0x188>)
 8009fa0:	edd3 7a00 	vldr	s15, [r3]
 8009fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fa8:	4b5a      	ldr	r3, [pc, #360]	; (800a114 <ControlMotor+0x184>)
 8009faa:	edc3 7a02 	vstr	s15, [r3, #8]
	target_angular_v += angular_acceleration;
 8009fae:	4b5b      	ldr	r3, [pc, #364]	; (800a11c <ControlMotor+0x18c>)
 8009fb0:	ed93 7a00 	vldr	s14, [r3]
 8009fb4:	4b5a      	ldr	r3, [pc, #360]	; (800a120 <ControlMotor+0x190>)
 8009fb6:	edd3 7a00 	vldr	s15, [r3]
 8009fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fbe:	4b57      	ldr	r3, [pc, #348]	; (800a11c <ControlMotor+0x18c>)
 8009fc0:	edc3 7a00 	vstr	s15, [r3]


	target_velocity[RIGHT] = ( target_velocity[BODY]*2 - target_angular_v * TREAD_WIDTH )/2;
 8009fc4:	4b53      	ldr	r3, [pc, #332]	; (800a114 <ControlMotor+0x184>)
 8009fc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8009fca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009fce:	ee17 0a90 	vmov	r0, s15
 8009fd2:	f7fe f9f1 	bl	80083b8 <__aeabi_f2d>
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	460d      	mov	r5, r1
 8009fda:	4b50      	ldr	r3, [pc, #320]	; (800a11c <ControlMotor+0x18c>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fe f9ea 	bl	80083b8 <__aeabi_f2d>
 8009fe4:	f04f 0200 	mov.w	r2, #0
 8009fe8:	4b4e      	ldr	r3, [pc, #312]	; (800a124 <ControlMotor+0x194>)
 8009fea:	f7fe fa3d 	bl	8008468 <__aeabi_dmul>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	f7fe f87f 	bl	80080f8 <__aeabi_dsub>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	4618      	mov	r0, r3
 800a000:	4621      	mov	r1, r4
 800a002:	f04f 0200 	mov.w	r2, #0
 800a006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a00a:	f7fe fb57 	bl	80086bc <__aeabi_ddiv>
 800a00e:	4603      	mov	r3, r0
 800a010:	460c      	mov	r4, r1
 800a012:	4618      	mov	r0, r3
 800a014:	4621      	mov	r1, r4
 800a016:	f7fe fcff 	bl	8008a18 <__aeabi_d2f>
 800a01a:	4602      	mov	r2, r0
 800a01c:	4b3d      	ldr	r3, [pc, #244]	; (800a114 <ControlMotor+0x184>)
 800a01e:	605a      	str	r2, [r3, #4]
	target_velocity[LEFT] = ( target_angular_v *TREAD_WIDTH ) + target_velocity[RIGHT];
 800a020:	4b3e      	ldr	r3, [pc, #248]	; (800a11c <ControlMotor+0x18c>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4618      	mov	r0, r3
 800a026:	f7fe f9c7 	bl	80083b8 <__aeabi_f2d>
 800a02a:	f04f 0200 	mov.w	r2, #0
 800a02e:	4b3d      	ldr	r3, [pc, #244]	; (800a124 <ControlMotor+0x194>)
 800a030:	f7fe fa1a 	bl	8008468 <__aeabi_dmul>
 800a034:	4603      	mov	r3, r0
 800a036:	460c      	mov	r4, r1
 800a038:	4625      	mov	r5, r4
 800a03a:	461c      	mov	r4, r3
 800a03c:	4b35      	ldr	r3, [pc, #212]	; (800a114 <ControlMotor+0x184>)
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	4618      	mov	r0, r3
 800a042:	f7fe f9b9 	bl	80083b8 <__aeabi_f2d>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	4620      	mov	r0, r4
 800a04c:	4629      	mov	r1, r5
 800a04e:	f7fe f855 	bl	80080fc <__adddf3>
 800a052:	4603      	mov	r3, r0
 800a054:	460c      	mov	r4, r1
 800a056:	4618      	mov	r0, r3
 800a058:	4621      	mov	r1, r4
 800a05a:	f7fe fcdd 	bl	8008a18 <__aeabi_d2f>
 800a05e:	4602      	mov	r2, r0
 800a060:	4b2c      	ldr	r3, [pc, #176]	; (800a114 <ControlMotor+0x184>)
 800a062:	601a      	str	r2, [r3, #0]

	//制御出力値生成
	//PIDControl(int n, int T, float target, float current, int *output);
	velocity_left_out = PIDControl( L_VELO, T1, target_velocity[LEFT], current_velocity[LEFT]);
 800a064:	4b2b      	ldr	r3, [pc, #172]	; (800a114 <ControlMotor+0x184>)
 800a066:	edd3 7a00 	vldr	s15, [r3]
 800a06a:	4b2f      	ldr	r3, [pc, #188]	; (800a128 <ControlMotor+0x198>)
 800a06c:	ed93 7a00 	vldr	s14, [r3]
 800a070:	eeb0 1a47 	vmov.f32	s2, s14
 800a074:	eef0 0a67 	vmov.f32	s1, s15
 800a078:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a12c <ControlMotor+0x19c>
 800a07c:	2000      	movs	r0, #0
 800a07e:	f001 fa91 	bl	800b5a4 <PIDControl>
 800a082:	4602      	mov	r2, r0
 800a084:	4b2a      	ldr	r3, [pc, #168]	; (800a130 <ControlMotor+0x1a0>)
 800a086:	601a      	str	r2, [r3, #0]
	velocity_right_out = PIDControl( R_VELO, T1, target_velocity[RIGHT], current_velocity[RIGHT]);
 800a088:	4b22      	ldr	r3, [pc, #136]	; (800a114 <ControlMotor+0x184>)
 800a08a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a08e:	4b26      	ldr	r3, [pc, #152]	; (800a128 <ControlMotor+0x198>)
 800a090:	ed93 7a01 	vldr	s14, [r3, #4]
 800a094:	eeb0 1a47 	vmov.f32	s2, s14
 800a098:	eef0 0a67 	vmov.f32	s1, s15
 800a09c:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800a12c <ControlMotor+0x19c>
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	f001 fa7f 	bl	800b5a4 <PIDControl>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	4b22      	ldr	r3, [pc, #136]	; (800a134 <ControlMotor+0x1a4>)
 800a0aa:	601a      	str	r2, [r3, #0]
	//PIDControl( B_VELO, T1, target, current, &left);
	wall_left_out = PIDControl( D_WALL, T1, photo[SL], photo[SR]+photo_diff);
 800a0ac:	4b22      	ldr	r3, [pc, #136]	; (800a138 <ControlMotor+0x1a8>)
 800a0ae:	edd3 6a02 	vldr	s13, [r3, #8]
 800a0b2:	4b21      	ldr	r3, [pc, #132]	; (800a138 <ControlMotor+0x1a8>)
 800a0b4:	ed93 7a01 	vldr	s14, [r3, #4]
 800a0b8:	4b20      	ldr	r3, [pc, #128]	; (800a13c <ControlMotor+0x1ac>)
 800a0ba:	edd3 7a00 	vldr	s15, [r3]
 800a0be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0c2:	eeb0 1a67 	vmov.f32	s2, s15
 800a0c6:	eef0 0a66 	vmov.f32	s1, s13
 800a0ca:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a12c <ControlMotor+0x19c>
 800a0ce:	2003      	movs	r0, #3
 800a0d0:	f001 fa68 	bl	800b5a4 <PIDControl>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	4b1a      	ldr	r3, [pc, #104]	; (800a140 <ControlMotor+0x1b0>)
 800a0d8:	601a      	str	r2, [r3, #0]

	wall_right_out = -wall_left_out;
 800a0da:	4b19      	ldr	r3, [pc, #100]	; (800a140 <ControlMotor+0x1b0>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	425b      	negs	r3, r3
 800a0e0:	4a18      	ldr	r2, [pc, #96]	; (800a144 <ControlMotor+0x1b4>)
 800a0e2:	6013      	str	r3, [r2, #0]

	L_motor = wall_left_out + velocity_left_out;
 800a0e4:	4b16      	ldr	r3, [pc, #88]	; (800a140 <ControlMotor+0x1b0>)
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	4b11      	ldr	r3, [pc, #68]	; (800a130 <ControlMotor+0x1a0>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	4a16      	ldr	r2, [pc, #88]	; (800a148 <ControlMotor+0x1b8>)
 800a0f0:	6013      	str	r3, [r2, #0]
	R_motor = wall_right_out + velocity_right_out;
 800a0f2:	4b14      	ldr	r3, [pc, #80]	; (800a144 <ControlMotor+0x1b4>)
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	4b0f      	ldr	r3, [pc, #60]	; (800a134 <ControlMotor+0x1a4>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	4a13      	ldr	r2, [pc, #76]	; (800a14c <ControlMotor+0x1bc>)
 800a0fe:	6013      	str	r3, [r2, #0]

	//モータに出力
	Motor_Switch( L_motor, R_motor );
 800a100:	4b11      	ldr	r3, [pc, #68]	; (800a148 <ControlMotor+0x1b8>)
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	4b11      	ldr	r3, [pc, #68]	; (800a14c <ControlMotor+0x1bc>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4619      	mov	r1, r3
 800a10a:	4610      	mov	r0, r2
 800a10c:	f002 ff88 	bl	800d020 <Motor_Switch>
//	int left = 300, right = 300;
//	Motor_Switch( left, right );

}
 800a110:	bf00      	nop
 800a112:	bdb0      	pop	{r4, r5, r7, pc}
 800a114:	20000290 	.word	0x20000290
 800a118:	200002a0 	.word	0x200002a0
 800a11c:	200002a4 	.word	0x200002a4
 800a120:	200002a8 	.word	0x200002a8
 800a124:	40424000 	.word	0x40424000
 800a128:	20000270 	.word	0x20000270
 800a12c:	3a83126f 	.word	0x3a83126f
 800a130:	200002ac 	.word	0x200002ac
 800a134:	200002b0 	.word	0x200002b0
 800a138:	20000244 	.word	0x20000244
 800a13c:	20000264 	.word	0x20000264
 800a140:	200002b8 	.word	0x200002b8
 800a144:	200002b4 	.word	0x200002b4
 800a148:	200002bc 	.word	0x200002bc
 800a14c:	200002c0 	.word	0x200002c0

0800a150 <UpdatePhotoData>:

void UpdatePhotoData()
{
 800a150:	b580      	push	{r7, lr}
 800a152:	af00      	add	r7, sp, #0
	photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a154:	4b18      	ldr	r3, [pc, #96]	; (800a1b8 <UpdatePhotoData+0x68>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2200      	movs	r2, #0
 800a15a:	4619      	mov	r1, r3
 800a15c:	200a      	movs	r0, #10
 800a15e:	f7ff fd59 	bl	8009c14 <GetWallDataAverage>
 800a162:	eef0 7a40 	vmov.f32	s15, s0
 800a166:	4b15      	ldr	r3, [pc, #84]	; (800a1bc <UpdatePhotoData+0x6c>)
 800a168:	edc3 7a00 	vstr	s15, [r3]
	photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a16c:	4b12      	ldr	r3, [pc, #72]	; (800a1b8 <UpdatePhotoData+0x68>)
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	2201      	movs	r2, #1
 800a172:	4619      	mov	r1, r3
 800a174:	200a      	movs	r0, #10
 800a176:	f7ff fd4d 	bl	8009c14 <GetWallDataAverage>
 800a17a:	eef0 7a40 	vmov.f32	s15, s0
 800a17e:	4b0f      	ldr	r3, [pc, #60]	; (800a1bc <UpdatePhotoData+0x6c>)
 800a180:	edc3 7a01 	vstr	s15, [r3, #4]
	photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a184:	4b0e      	ldr	r3, [pc, #56]	; (800a1c0 <UpdatePhotoData+0x70>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2202      	movs	r2, #2
 800a18a:	4619      	mov	r1, r3
 800a18c:	200a      	movs	r0, #10
 800a18e:	f7ff fd41 	bl	8009c14 <GetWallDataAverage>
 800a192:	eef0 7a40 	vmov.f32	s15, s0
 800a196:	4b09      	ldr	r3, [pc, #36]	; (800a1bc <UpdatePhotoData+0x6c>)
 800a198:	edc3 7a02 	vstr	s15, [r3, #8]
	photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a19c:	4b08      	ldr	r3, [pc, #32]	; (800a1c0 <UpdatePhotoData+0x70>)
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	2203      	movs	r2, #3
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	200a      	movs	r0, #10
 800a1a6:	f7ff fd35 	bl	8009c14 <GetWallDataAverage>
 800a1aa:	eef0 7a40 	vmov.f32	s15, s0
 800a1ae:	4b03      	ldr	r3, [pc, #12]	; (800a1bc <UpdatePhotoData+0x6c>)
 800a1b0:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800a1b4:	bf00      	nop
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	2000042c 	.word	0x2000042c
 800a1bc:	20000244 	.word	0x20000244
 800a1c0:	20000438 	.word	0x20000438

0800a1c4 <HAL_TIM_PeriodElapsedCallback>:


//壁センサの実データ生成はどこでやるか。Convertを使って変換して構造体にいれる。
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
	if( htim == &htim1)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a0c      	ldr	r2, [pc, #48]	; (800a200 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d103      	bne.n	800a1dc <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		TimeMonitor();
 800a1d4:	f7ff fe21 	bl	8009e1a <TimeMonitor>
		//目標値生成はメイン処理で

		//目標値 - 現在値(変換済み)で制御出力値の計算

		//出力値をモータ出力用関数に渡す
		ControlMotor();
 800a1d8:	f7ff feda 	bl	8009f90 <ControlMotor>
	}

	if( htim == &htim8)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a09      	ldr	r2, [pc, #36]	; (800a204 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d108      	bne.n	800a1f6 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		timer += t;
 800a1e4:	4b08      	ldr	r3, [pc, #32]	; (800a208 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	4b08      	ldr	r3, [pc, #32]	; (800a20c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	4a06      	ldr	r2, [pc, #24]	; (800a208 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800a1f0:	6013      	str	r3, [r2, #0]
		//壁センサデータの更新だけ
		UpdatePhotoData();
 800a1f2:	f7ff ffad 	bl	800a150 <UpdatePhotoData>

	}
}
 800a1f6:	bf00      	nop
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	20000818 	.word	0x20000818
 800a204:	20000590 	.word	0x20000590
 800a208:	2000023c 	.word	0x2000023c
 800a20c:	20000240 	.word	0x20000240

0800a210 <wall_store_running>:
	flash_store_init();

}
//壁データの書き込み(走行中)。修復用も作る。座標指定と書き込みデータ
void wall_store_running(uint8_t x, uint8_t y)
{
 800a210:	b590      	push	{r4, r7, lr}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	460a      	mov	r2, r1
 800a21a:	71fb      	strb	r3, [r7, #7]
 800a21c:	4613      	mov	r3, r2
 800a21e:	71bb      	strb	r3, [r7, #6]
	//xの数×4×区画数byte分アドレスオフセット
	//yの数×4byte分アドレスオフセット
	uint32_t address = start_adress_sector1;
 800a220:	4b2c      	ldr	r3, [pc, #176]	; (800a2d4 <wall_store_running+0xc4>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	60fb      	str	r3, [r7, #12]
	//1区画につき、4byte×4=16byte。xを1増やすと16byte先になる。yを1増やすと16byte×区画数分先になる。
	address += ( x*16) + (y*16*(NUMBER_OF_SQUARES) );//4×4区画とすると、(0,0)でスタートアドレス。1,
 800a226:	79f9      	ldrb	r1, [r7, #7]
 800a228:	79ba      	ldrb	r2, [r7, #6]
 800a22a:	4613      	mov	r3, r2
 800a22c:	00db      	lsls	r3, r3, #3
 800a22e:	4413      	add	r3, r2
 800a230:	440b      	add	r3, r1
 800a232:	011b      	lsls	r3, r3, #4
 800a234:	461a      	mov	r2, r3
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	4413      	add	r3, r2
 800a23a:	60fb      	str	r3, [r7, #12]

	//デフォが北(0)。時計回り
	FLASH_Write_Word(address+0, Wall[x][y].north);
 800a23c:	79fa      	ldrb	r2, [r7, #7]
 800a23e:	79b9      	ldrb	r1, [r7, #6]
 800a240:	4825      	ldr	r0, [pc, #148]	; (800a2d8 <wall_store_running+0xc8>)
 800a242:	4613      	mov	r3, r2
 800a244:	00db      	lsls	r3, r3, #3
 800a246:	4413      	add	r3, r2
 800a248:	440b      	add	r3, r1
 800a24a:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a24e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a252:	b2db      	uxtb	r3, r3
 800a254:	4619      	mov	r1, r3
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f002 fda4 	bl	800cda4 <FLASH_Write_Word>
	FLASH_Write_Word(address+4, Wall[x][y].east);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	1d1c      	adds	r4, r3, #4
 800a260:	79fa      	ldrb	r2, [r7, #7]
 800a262:	79b9      	ldrb	r1, [r7, #6]
 800a264:	481c      	ldr	r0, [pc, #112]	; (800a2d8 <wall_store_running+0xc8>)
 800a266:	4613      	mov	r3, r2
 800a268:	00db      	lsls	r3, r3, #3
 800a26a:	4413      	add	r3, r2
 800a26c:	440b      	add	r3, r1
 800a26e:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a272:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a276:	b2db      	uxtb	r3, r3
 800a278:	4619      	mov	r1, r3
 800a27a:	4620      	mov	r0, r4
 800a27c:	f002 fd92 	bl	800cda4 <FLASH_Write_Word>
	FLASH_Write_Word(address+8, Wall[x][y].south);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f103 0408 	add.w	r4, r3, #8
 800a286:	79fa      	ldrb	r2, [r7, #7]
 800a288:	79b9      	ldrb	r1, [r7, #6]
 800a28a:	4813      	ldr	r0, [pc, #76]	; (800a2d8 <wall_store_running+0xc8>)
 800a28c:	4613      	mov	r3, r2
 800a28e:	00db      	lsls	r3, r3, #3
 800a290:	4413      	add	r3, r2
 800a292:	440b      	add	r3, r1
 800a294:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a298:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	4619      	mov	r1, r3
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f002 fd7f 	bl	800cda4 <FLASH_Write_Word>
	FLASH_Write_Word(address+12, Wall[x][y].west);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f103 040c 	add.w	r4, r3, #12
 800a2ac:	79fa      	ldrb	r2, [r7, #7]
 800a2ae:	79b9      	ldrb	r1, [r7, #6]
 800a2b0:	4809      	ldr	r0, [pc, #36]	; (800a2d8 <wall_store_running+0xc8>)
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	00db      	lsls	r3, r3, #3
 800a2b6:	4413      	add	r3, r2
 800a2b8:	440b      	add	r3, r1
 800a2ba:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a2be:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f002 fd6c 	bl	800cda4 <FLASH_Write_Word>

}
 800a2cc:	bf00      	nop
 800a2ce:	3714      	adds	r7, #20
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd90      	pop	{r4, r7, pc}
 800a2d4:	0801404c 	.word	0x0801404c
 800a2d8:	200004ec 	.word	0x200004ec

0800a2dc <wall_set>:
//壁の更新xyグローバル
void wall_set(uint8_t x, uint8_t y, float side_left, float side_right, float front_left, float front_right){
 800a2dc:	b590      	push	{r4, r7, lr}
 800a2de:	b089      	sub	sp, #36	; 0x24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	460a      	mov	r2, r1
 800a2e6:	ed87 0a04 	vstr	s0, [r7, #16]
 800a2ea:	edc7 0a03 	vstr	s1, [r7, #12]
 800a2ee:	ed87 1a02 	vstr	s2, [r7, #8]
 800a2f2:	edc7 1a01 	vstr	s3, [r7, #4]
 800a2f6:	75fb      	strb	r3, [r7, #23]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	75bb      	strb	r3, [r7, #22]
	uint8_t wall_dir[4];
	//壁センサ値を読んで、各方角の壁の有無を判定
	  wall_dir[my_direction] = (front_left + front_right)/2 > FRONT_WALL  ?   WALL : NOWALL;
 800a2fc:	ed97 7a02 	vldr	s14, [r7, #8]
 800a300:	edd7 7a01 	vldr	s15, [r7, #4]
 800a304:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a308:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a30c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a310:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800a314:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a31c:	bfcc      	ite	gt
 800a31e:	2301      	movgt	r3, #1
 800a320:	2300      	movle	r3, #0
 800a322:	b2da      	uxtb	r2, r3
 800a324:	4bbc      	ldr	r3, [pc, #752]	; (800a618 <wall_set+0x33c>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	f107 0120 	add.w	r1, r7, #32
 800a32c:	440b      	add	r3, r1
 800a32e:	f803 2c08 	strb.w	r2, [r3, #-8]
	  wall_dir[(my_direction + 1)%4] = side_right > RIGHT_WALL  ?  WALL :  NOWALL;
 800a332:	edd7 7a03 	vldr	s15, [r7, #12]
 800a336:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 800a61c <wall_set+0x340>
 800a33a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a342:	bfcc      	ite	gt
 800a344:	2301      	movgt	r3, #1
 800a346:	2300      	movle	r3, #0
 800a348:	b2d9      	uxtb	r1, r3
 800a34a:	4bb3      	ldr	r3, [pc, #716]	; (800a618 <wall_set+0x33c>)
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	3301      	adds	r3, #1
 800a350:	425a      	negs	r2, r3
 800a352:	f003 0303 	and.w	r3, r3, #3
 800a356:	f002 0203 	and.w	r2, r2, #3
 800a35a:	bf58      	it	pl
 800a35c:	4253      	negpl	r3, r2
 800a35e:	460a      	mov	r2, r1
 800a360:	f107 0120 	add.w	r1, r7, #32
 800a364:	440b      	add	r3, r1
 800a366:	f803 2c08 	strb.w	r2, [r3, #-8]
	  wall_dir[(my_direction + 2)%4] = NOWALL;
 800a36a:	4bab      	ldr	r3, [pc, #684]	; (800a618 <wall_set+0x33c>)
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	3302      	adds	r3, #2
 800a370:	425a      	negs	r2, r3
 800a372:	f003 0303 	and.w	r3, r3, #3
 800a376:	f002 0203 	and.w	r2, r2, #3
 800a37a:	bf58      	it	pl
 800a37c:	4253      	negpl	r3, r2
 800a37e:	f107 0220 	add.w	r2, r7, #32
 800a382:	4413      	add	r3, r2
 800a384:	2200      	movs	r2, #0
 800a386:	f803 2c08 	strb.w	r2, [r3, #-8]
	  wall_dir[(my_direction + 3)%4] = side_left > LEFT_WALL ?  WALL :  NOWALL;
 800a38a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a38e:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800a620 <wall_set+0x344>
 800a392:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a39a:	bfcc      	ite	gt
 800a39c:	2301      	movgt	r3, #1
 800a39e:	2300      	movle	r3, #0
 800a3a0:	b2d9      	uxtb	r1, r3
 800a3a2:	4b9d      	ldr	r3, [pc, #628]	; (800a618 <wall_set+0x33c>)
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	3303      	adds	r3, #3
 800a3a8:	425a      	negs	r2, r3
 800a3aa:	f003 0303 	and.w	r3, r3, #3
 800a3ae:	f002 0203 	and.w	r2, r2, #3
 800a3b2:	bf58      	it	pl
 800a3b4:	4253      	negpl	r3, r2
 800a3b6:	460a      	mov	r2, r1
 800a3b8:	f107 0120 	add.w	r1, r7, #32
 800a3bc:	440b      	add	r3, r1
 800a3be:	f803 2c08 	strb.w	r2, [r3, #-8]

	  //各方角の壁に壁の有無を代入
	  Wall[x][y].north = wall_dir[0];
 800a3c2:	7e3b      	ldrb	r3, [r7, #24]
 800a3c4:	7dfa      	ldrb	r2, [r7, #23]
 800a3c6:	7dbc      	ldrb	r4, [r7, #22]
 800a3c8:	f003 0303 	and.w	r3, r3, #3
 800a3cc:	b2d8      	uxtb	r0, r3
 800a3ce:	4995      	ldr	r1, [pc, #596]	; (800a624 <wall_set+0x348>)
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	00db      	lsls	r3, r3, #3
 800a3d4:	4413      	add	r3, r2
 800a3d6:	191a      	adds	r2, r3, r4
 800a3d8:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a3dc:	f360 0301 	bfi	r3, r0, #0, #2
 800a3e0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[x][y].east = wall_dir[1];
 800a3e4:	7e7b      	ldrb	r3, [r7, #25]
 800a3e6:	7dfa      	ldrb	r2, [r7, #23]
 800a3e8:	7dbc      	ldrb	r4, [r7, #22]
 800a3ea:	f003 0303 	and.w	r3, r3, #3
 800a3ee:	b2d8      	uxtb	r0, r3
 800a3f0:	498c      	ldr	r1, [pc, #560]	; (800a624 <wall_set+0x348>)
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	00db      	lsls	r3, r3, #3
 800a3f6:	4413      	add	r3, r2
 800a3f8:	191a      	adds	r2, r3, r4
 800a3fa:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a3fe:	f360 0383 	bfi	r3, r0, #2, #2
 800a402:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[x][y].south = wall_dir[2];
 800a406:	7ebb      	ldrb	r3, [r7, #26]
 800a408:	7dfa      	ldrb	r2, [r7, #23]
 800a40a:	7dbc      	ldrb	r4, [r7, #22]
 800a40c:	f003 0303 	and.w	r3, r3, #3
 800a410:	b2d8      	uxtb	r0, r3
 800a412:	4984      	ldr	r1, [pc, #528]	; (800a624 <wall_set+0x348>)
 800a414:	4613      	mov	r3, r2
 800a416:	00db      	lsls	r3, r3, #3
 800a418:	4413      	add	r3, r2
 800a41a:	191a      	adds	r2, r3, r4
 800a41c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a420:	f360 1305 	bfi	r3, r0, #4, #2
 800a424:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[x][y].west = wall_dir[3];
 800a428:	7efb      	ldrb	r3, [r7, #27]
 800a42a:	7dfa      	ldrb	r2, [r7, #23]
 800a42c:	7dbc      	ldrb	r4, [r7, #22]
 800a42e:	f003 0303 	and.w	r3, r3, #3
 800a432:	b2d8      	uxtb	r0, r3
 800a434:	497b      	ldr	r1, [pc, #492]	; (800a624 <wall_set+0x348>)
 800a436:	4613      	mov	r3, r2
 800a438:	00db      	lsls	r3, r3, #3
 800a43a:	4413      	add	r3, r2
 800a43c:	191a      	adds	r2, r3, r4
 800a43e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a442:	f360 1387 	bfi	r3, r0, #6, #2
 800a446:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  //端の座標でなければ反対の壁も記入
	  uint32_t address;
	  if(y < (NUMBER_OF_SQUARES-1) )
 800a44a:	7dbb      	ldrb	r3, [r7, #22]
 800a44c:	2b07      	cmp	r3, #7
 800a44e:	d834      	bhi.n	800a4ba <wall_set+0x1de>
	  {
		  Wall[x][y+1].south = wall_dir[0];//北端でなければ
 800a450:	7e39      	ldrb	r1, [r7, #24]
 800a452:	7dfa      	ldrb	r2, [r7, #23]
 800a454:	7dbb      	ldrb	r3, [r7, #22]
 800a456:	1c5c      	adds	r4, r3, #1
 800a458:	460b      	mov	r3, r1
 800a45a:	f003 0303 	and.w	r3, r3, #3
 800a45e:	b2d8      	uxtb	r0, r3
 800a460:	4970      	ldr	r1, [pc, #448]	; (800a624 <wall_set+0x348>)
 800a462:	4613      	mov	r3, r2
 800a464:	00db      	lsls	r3, r3, #3
 800a466:	4413      	add	r3, r2
 800a468:	191a      	adds	r2, r3, r4
 800a46a:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a46e:	f360 1305 	bfi	r3, r0, #4, #2
 800a472:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  address = start_adress_sector1 + ( x*16) + ( (y+1)*16*(NUMBER_OF_SQUARES) );
 800a476:	7dfb      	ldrb	r3, [r7, #23]
 800a478:	011b      	lsls	r3, r3, #4
 800a47a:	4619      	mov	r1, r3
 800a47c:	7dbb      	ldrb	r3, [r7, #22]
 800a47e:	1c5a      	adds	r2, r3, #1
 800a480:	4613      	mov	r3, r2
 800a482:	00db      	lsls	r3, r3, #3
 800a484:	4413      	add	r3, r2
 800a486:	011b      	lsls	r3, r3, #4
 800a488:	18ca      	adds	r2, r1, r3
 800a48a:	4b67      	ldr	r3, [pc, #412]	; (800a628 <wall_set+0x34c>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4413      	add	r3, r2
 800a490:	61fb      	str	r3, [r7, #28]
		  FLASH_Write_Word(address+8, Wall[x][y+1].south);
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	f103 0408 	add.w	r4, r3, #8
 800a498:	7dfa      	ldrb	r2, [r7, #23]
 800a49a:	7dbb      	ldrb	r3, [r7, #22]
 800a49c:	1c59      	adds	r1, r3, #1
 800a49e:	4861      	ldr	r0, [pc, #388]	; (800a624 <wall_set+0x348>)
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	00db      	lsls	r3, r3, #3
 800a4a4:	4413      	add	r3, r2
 800a4a6:	440b      	add	r3, r1
 800a4a8:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a4ac:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f002 fc75 	bl	800cda4 <FLASH_Write_Word>
	  }
	  if(x < (NUMBER_OF_SQUARES-1) )
 800a4ba:	7dfb      	ldrb	r3, [r7, #23]
 800a4bc:	2b07      	cmp	r3, #7
 800a4be:	d834      	bhi.n	800a52a <wall_set+0x24e>
	  {
		  Wall[x+1][y].west = wall_dir[1];//東端でなければ
 800a4c0:	7e79      	ldrb	r1, [r7, #25]
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
 800a4c4:	1c5a      	adds	r2, r3, #1
 800a4c6:	7dbc      	ldrb	r4, [r7, #22]
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	f003 0303 	and.w	r3, r3, #3
 800a4ce:	b2d8      	uxtb	r0, r3
 800a4d0:	4954      	ldr	r1, [pc, #336]	; (800a624 <wall_set+0x348>)
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	00db      	lsls	r3, r3, #3
 800a4d6:	4413      	add	r3, r2
 800a4d8:	191a      	adds	r2, r3, r4
 800a4da:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a4de:	f360 1387 	bfi	r3, r0, #6, #2
 800a4e2:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  address = start_adress_sector1 + ( (x+1)*16) + ( (y)*16*(NUMBER_OF_SQUARES) );
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	011b      	lsls	r3, r3, #4
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	7dba      	ldrb	r2, [r7, #22]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	00db      	lsls	r3, r3, #3
 800a4f4:	4413      	add	r3, r2
 800a4f6:	011b      	lsls	r3, r3, #4
 800a4f8:	18ca      	adds	r2, r1, r3
 800a4fa:	4b4b      	ldr	r3, [pc, #300]	; (800a628 <wall_set+0x34c>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4413      	add	r3, r2
 800a500:	61fb      	str	r3, [r7, #28]
		  FLASH_Write_Word(address+12, Wall[x+1][y].west);
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	f103 040c 	add.w	r4, r3, #12
 800a508:	7dfb      	ldrb	r3, [r7, #23]
 800a50a:	1c5a      	adds	r2, r3, #1
 800a50c:	7db9      	ldrb	r1, [r7, #22]
 800a50e:	4845      	ldr	r0, [pc, #276]	; (800a624 <wall_set+0x348>)
 800a510:	4613      	mov	r3, r2
 800a512:	00db      	lsls	r3, r3, #3
 800a514:	4413      	add	r3, r2
 800a516:	440b      	add	r3, r1
 800a518:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a51c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a520:	b2db      	uxtb	r3, r3
 800a522:	4619      	mov	r1, r3
 800a524:	4620      	mov	r0, r4
 800a526:	f002 fc3d 	bl	800cda4 <FLASH_Write_Word>
	  }
	  if(y > 0 )
 800a52a:	7dbb      	ldrb	r3, [r7, #22]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d031      	beq.n	800a594 <wall_set+0x2b8>
	  {
		  Wall[x][y-1].north = wall_dir[2];//南端でなければ
 800a530:	7eb9      	ldrb	r1, [r7, #26]
 800a532:	7dfa      	ldrb	r2, [r7, #23]
 800a534:	7dbb      	ldrb	r3, [r7, #22]
 800a536:	1e5c      	subs	r4, r3, #1
 800a538:	460b      	mov	r3, r1
 800a53a:	f003 0303 	and.w	r3, r3, #3
 800a53e:	b2d8      	uxtb	r0, r3
 800a540:	4938      	ldr	r1, [pc, #224]	; (800a624 <wall_set+0x348>)
 800a542:	4613      	mov	r3, r2
 800a544:	00db      	lsls	r3, r3, #3
 800a546:	4413      	add	r3, r2
 800a548:	191a      	adds	r2, r3, r4
 800a54a:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a54e:	f360 0301 	bfi	r3, r0, #0, #2
 800a552:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  address = start_adress_sector1 + ( x*16) + ( (y-1)*16*(NUMBER_OF_SQUARES) );
 800a556:	7dfb      	ldrb	r3, [r7, #23]
 800a558:	011b      	lsls	r3, r3, #4
 800a55a:	4619      	mov	r1, r3
 800a55c:	7dbb      	ldrb	r3, [r7, #22]
 800a55e:	1e5a      	subs	r2, r3, #1
 800a560:	4613      	mov	r3, r2
 800a562:	00db      	lsls	r3, r3, #3
 800a564:	4413      	add	r3, r2
 800a566:	011b      	lsls	r3, r3, #4
 800a568:	18ca      	adds	r2, r1, r3
 800a56a:	4b2f      	ldr	r3, [pc, #188]	; (800a628 <wall_set+0x34c>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4413      	add	r3, r2
 800a570:	61fb      	str	r3, [r7, #28]
		  FLASH_Write_Word(address+0, Wall[x][y-1].north);
 800a572:	7dfa      	ldrb	r2, [r7, #23]
 800a574:	7dbb      	ldrb	r3, [r7, #22]
 800a576:	1e59      	subs	r1, r3, #1
 800a578:	482a      	ldr	r0, [pc, #168]	; (800a624 <wall_set+0x348>)
 800a57a:	4613      	mov	r3, r2
 800a57c:	00db      	lsls	r3, r3, #3
 800a57e:	4413      	add	r3, r2
 800a580:	440b      	add	r3, r1
 800a582:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a586:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	4619      	mov	r1, r3
 800a58e:	69f8      	ldr	r0, [r7, #28]
 800a590:	f002 fc08 	bl	800cda4 <FLASH_Write_Word>
	  }
	  if(x > 0 )
 800a594:	7dfb      	ldrb	r3, [r7, #23]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d033      	beq.n	800a602 <wall_set+0x326>
	  {
		  Wall[x-1][y].east = wall_dir[3];//西端でなければ
 800a59a:	7ef9      	ldrb	r1, [r7, #27]
 800a59c:	7dfb      	ldrb	r3, [r7, #23]
 800a59e:	1e5a      	subs	r2, r3, #1
 800a5a0:	7dbc      	ldrb	r4, [r7, #22]
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	f003 0303 	and.w	r3, r3, #3
 800a5a8:	b2d8      	uxtb	r0, r3
 800a5aa:	491e      	ldr	r1, [pc, #120]	; (800a624 <wall_set+0x348>)
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	00db      	lsls	r3, r3, #3
 800a5b0:	4413      	add	r3, r2
 800a5b2:	191a      	adds	r2, r3, r4
 800a5b4:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a5b8:	f360 0383 	bfi	r3, r0, #2, #2
 800a5bc:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  address = start_adress_sector1 + ( (x-1)*16) + ( y*16*(NUMBER_OF_SQUARES) );
 800a5c0:	7dfb      	ldrb	r3, [r7, #23]
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	011b      	lsls	r3, r3, #4
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	7dba      	ldrb	r2, [r7, #22]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	00db      	lsls	r3, r3, #3
 800a5ce:	4413      	add	r3, r2
 800a5d0:	011b      	lsls	r3, r3, #4
 800a5d2:	18ca      	adds	r2, r1, r3
 800a5d4:	4b14      	ldr	r3, [pc, #80]	; (800a628 <wall_set+0x34c>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4413      	add	r3, r2
 800a5da:	61fb      	str	r3, [r7, #28]
		  FLASH_Write_Word(address+4, Wall[x-1][y].east);
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	1d1c      	adds	r4, r3, #4
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
 800a5e2:	1e5a      	subs	r2, r3, #1
 800a5e4:	7db9      	ldrb	r1, [r7, #22]
 800a5e6:	480f      	ldr	r0, [pc, #60]	; (800a624 <wall_set+0x348>)
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	00db      	lsls	r3, r3, #3
 800a5ec:	4413      	add	r3, r2
 800a5ee:	440b      	add	r3, r1
 800a5f0:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800a5f4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f002 fbd1 	bl	800cda4 <FLASH_Write_Word>
	  }

	  //flashに書き込む
	  wall_store_running(x,y);
 800a602:	7dba      	ldrb	r2, [r7, #22]
 800a604:	7dfb      	ldrb	r3, [r7, #23]
 800a606:	4611      	mov	r1, r2
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff fe01 	bl	800a210 <wall_store_running>
}
 800a60e:	bf00      	nop
 800a610:	3724      	adds	r7, #36	; 0x24
 800a612:	46bd      	mov	sp, r7
 800a614:	bd90      	pop	{r4, r7, pc}
 800a616:	bf00      	nop
 800a618:	200002c4 	.word	0x200002c4
 800a61c:	42c80000 	.word	0x42c80000
 800a620:	430c0000 	.word	0x430c0000
 800a624:	200004ec 	.word	0x200004ec
 800a628:	0801404c 	.word	0x0801404c

0800a62c <UpdateWalkMap>:
	}

}
//評価値マップ生成。
uint16_t walk_map[NUMBER_OF_SQUARES][NUMBER_OF_SQUARES];
void UpdateWalkMap(){
 800a62c:	b490      	push	{r4, r7}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
	//初期化大事すぎた。hosu
	int i = 0, j=0, flag=0, hosu=0;
 800a632:	2300      	movs	r3, #0
 800a634:	60fb      	str	r3, [r7, #12]
 800a636:	2300      	movs	r3, #0
 800a638:	60bb      	str	r3, [r7, #8]
 800a63a:	2300      	movs	r3, #0
 800a63c:	607b      	str	r3, [r7, #4]
 800a63e:	2300      	movs	r3, #0
 800a640:	603b      	str	r3, [r7, #0]

	//区画数に応じて"?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?大歩数 + ゴールのマス?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?-1"に初期?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800a642:	2300      	movs	r3, #0
 800a644:	60fb      	str	r3, [r7, #12]
 800a646:	e015      	b.n	800a674 <UpdateWalkMap+0x48>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800a648:	2300      	movs	r3, #0
 800a64a:	60bb      	str	r3, [r7, #8]
 800a64c:	e00c      	b.n	800a668 <UpdateWalkMap+0x3c>
			walk_map[i][j] = NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1;
 800a64e:	49aa      	ldr	r1, [pc, #680]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	4613      	mov	r3, r2
 800a654:	00db      	lsls	r3, r3, #3
 800a656:	4413      	add	r3, r2
 800a658:	68ba      	ldr	r2, [r7, #8]
 800a65a:	4413      	add	r3, r2
 800a65c:	2250      	movs	r2, #80	; 0x50
 800a65e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	3301      	adds	r3, #1
 800a666:	60bb      	str	r3, [r7, #8]
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	2b08      	cmp	r3, #8
 800a66c:	ddef      	ble.n	800a64e <UpdateWalkMap+0x22>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3301      	adds	r3, #1
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2b08      	cmp	r3, #8
 800a678:	dde6      	ble.n	800a648 <UpdateWalkMap+0x1c>
		}
	}

	//ゴール区画?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?0に初期?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800a67a:	2307      	movs	r3, #7
 800a67c:	60fb      	str	r3, [r7, #12]
 800a67e:	e015      	b.n	800a6ac <UpdateWalkMap+0x80>
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800a680:	2307      	movs	r3, #7
 800a682:	60bb      	str	r3, [r7, #8]
 800a684:	e00c      	b.n	800a6a0 <UpdateWalkMap+0x74>
			walk_map[i][j] = 0;
 800a686:	499c      	ldr	r1, [pc, #624]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	4613      	mov	r3, r2
 800a68c:	00db      	lsls	r3, r3, #3
 800a68e:	4413      	add	r3, r2
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	4413      	add	r3, r2
 800a694:	2200      	movs	r2, #0
 800a696:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	3301      	adds	r3, #1
 800a69e:	60bb      	str	r3, [r7, #8]
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	2b07      	cmp	r3, #7
 800a6a4:	ddef      	ble.n	800a686 <UpdateWalkMap+0x5a>
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	60fb      	str	r3, [r7, #12]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2b07      	cmp	r3, #7
 800a6b0:	dde6      	ble.n	800a680 <UpdateWalkMap+0x54>
		}
	}

	//壁が無?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?として????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��区画に歩数を割り当てる�??
	do{
		flag = 0;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	607b      	str	r3, [r7, #4]
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	60fb      	str	r3, [r7, #12]
 800a6ba:	e10c      	b.n	800a8d6 <UpdateWalkMap+0x2aa>

			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800a6bc:	2300      	movs	r3, #0
 800a6be:	60bb      	str	r3, [r7, #8]
 800a6c0:	e102      	b.n	800a8c8 <UpdateWalkMap+0x29c>
				  //map?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?"?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?大歩数 + ゴールのマス?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?-1"でなければ値を代入?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
				  //walk_map[i][j] != NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1 &&
				  if(walk_map[i][j] == hosu){
 800a6c2:	498d      	ldr	r1, [pc, #564]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	00db      	lsls	r3, r3, #3
 800a6ca:	4413      	add	r3, r2
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	f040 80f2 	bne.w	800a8c2 <UpdateWalkMap+0x296>

					  if(Wall[i][j].north != WALL && walk_map[i][j+1] > walk_map[i][j] && j < NUMBER_OF_SQUARES - 1){
 800a6de:	4987      	ldr	r1, [pc, #540]	; (800a8fc <UpdateWalkMap+0x2d0>)
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	00db      	lsls	r3, r3, #3
 800a6e6:	4413      	add	r3, r2
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800a6f0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d02d      	beq.n	800a756 <UpdateWalkMap+0x12a>
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	1c59      	adds	r1, r3, #1
 800a6fe:	487e      	ldr	r0, [pc, #504]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	4613      	mov	r3, r2
 800a704:	00db      	lsls	r3, r3, #3
 800a706:	4413      	add	r3, r2
 800a708:	440b      	add	r3, r1
 800a70a:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 800a70e:	487a      	ldr	r0, [pc, #488]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	4613      	mov	r3, r2
 800a714:	00db      	lsls	r3, r3, #3
 800a716:	4413      	add	r3, r2
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	4413      	add	r3, r2
 800a71c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800a720:	4299      	cmp	r1, r3
 800a722:	d918      	bls.n	800a756 <UpdateWalkMap+0x12a>
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2b07      	cmp	r3, #7
 800a728:	dc15      	bgt.n	800a756 <UpdateWalkMap+0x12a>
						  walk_map[i][j+1] = walk_map[i][j] + 1;
 800a72a:	4973      	ldr	r1, [pc, #460]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	4613      	mov	r3, r2
 800a730:	00db      	lsls	r3, r3, #3
 800a732:	4413      	add	r3, r2
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	4413      	add	r3, r2
 800a738:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	1c51      	adds	r1, r2, #1
 800a740:	3301      	adds	r3, #1
 800a742:	b29c      	uxth	r4, r3
 800a744:	486c      	ldr	r0, [pc, #432]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	4613      	mov	r3, r2
 800a74a:	00db      	lsls	r3, r3, #3
 800a74c:	4413      	add	r3, r2
 800a74e:	440b      	add	r3, r1
 800a750:	4622      	mov	r2, r4
 800a752:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					  }
					  if(Wall[i][j].east != WALL && walk_map[i+1][j] > walk_map[i][j] && i < NUMBER_OF_SQUARES - 1){
 800a756:	4969      	ldr	r1, [pc, #420]	; (800a8fc <UpdateWalkMap+0x2d0>)
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	4613      	mov	r3, r2
 800a75c:	00db      	lsls	r3, r3, #3
 800a75e:	4413      	add	r3, r2
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	4413      	add	r3, r2
 800a764:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800a768:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d02d      	beq.n	800a7ce <UpdateWalkMap+0x1a2>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	1c5a      	adds	r2, r3, #1
 800a776:	4960      	ldr	r1, [pc, #384]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a778:	4613      	mov	r3, r2
 800a77a:	00db      	lsls	r3, r3, #3
 800a77c:	4413      	add	r3, r2
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	4413      	add	r3, r2
 800a782:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800a786:	485c      	ldr	r0, [pc, #368]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	4613      	mov	r3, r2
 800a78c:	00db      	lsls	r3, r3, #3
 800a78e:	4413      	add	r3, r2
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	4413      	add	r3, r2
 800a794:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800a798:	4299      	cmp	r1, r3
 800a79a:	d918      	bls.n	800a7ce <UpdateWalkMap+0x1a2>
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2b07      	cmp	r3, #7
 800a7a0:	dc15      	bgt.n	800a7ce <UpdateWalkMap+0x1a2>
						  walk_map[i+1][j] = walk_map[i][j] + 1;
 800a7a2:	4955      	ldr	r1, [pc, #340]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	00db      	lsls	r3, r3, #3
 800a7aa:	4413      	add	r3, r2
 800a7ac:	68ba      	ldr	r2, [r7, #8]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	3201      	adds	r2, #1
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	b298      	uxth	r0, r3
 800a7bc:	494e      	ldr	r1, [pc, #312]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a7be:	4613      	mov	r3, r2
 800a7c0:	00db      	lsls	r3, r3, #3
 800a7c2:	4413      	add	r3, r2
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					  }
					  if(Wall[i][j].south != WALL && walk_map[i][j-1] > walk_map[i][j] && j > 0){
 800a7ce:	494b      	ldr	r1, [pc, #300]	; (800a8fc <UpdateWalkMap+0x2d0>)
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	00db      	lsls	r3, r3, #3
 800a7d6:	4413      	add	r3, r2
 800a7d8:	68ba      	ldr	r2, [r7, #8]
 800a7da:	4413      	add	r3, r2
 800a7dc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800a7e0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d02d      	beq.n	800a846 <UpdateWalkMap+0x21a>
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	1e59      	subs	r1, r3, #1
 800a7ee:	4842      	ldr	r0, [pc, #264]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	00db      	lsls	r3, r3, #3
 800a7f6:	4413      	add	r3, r2
 800a7f8:	440b      	add	r3, r1
 800a7fa:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 800a7fe:	483e      	ldr	r0, [pc, #248]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	4613      	mov	r3, r2
 800a804:	00db      	lsls	r3, r3, #3
 800a806:	4413      	add	r3, r2
 800a808:	68ba      	ldr	r2, [r7, #8]
 800a80a:	4413      	add	r3, r2
 800a80c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800a810:	4299      	cmp	r1, r3
 800a812:	d918      	bls.n	800a846 <UpdateWalkMap+0x21a>
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	2b00      	cmp	r3, #0
 800a818:	dd15      	ble.n	800a846 <UpdateWalkMap+0x21a>
						  walk_map[i][j-1] = walk_map[i][j] + 1;
 800a81a:	4937      	ldr	r1, [pc, #220]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	4613      	mov	r3, r2
 800a820:	00db      	lsls	r3, r3, #3
 800a822:	4413      	add	r3, r2
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	4413      	add	r3, r2
 800a828:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	1e51      	subs	r1, r2, #1
 800a830:	3301      	adds	r3, #1
 800a832:	b29c      	uxth	r4, r3
 800a834:	4830      	ldr	r0, [pc, #192]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	4613      	mov	r3, r2
 800a83a:	00db      	lsls	r3, r3, #3
 800a83c:	4413      	add	r3, r2
 800a83e:	440b      	add	r3, r1
 800a840:	4622      	mov	r2, r4
 800a842:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					  }
					  if(Wall[i][j].west != WALL && walk_map[i-1][j] > walk_map[i][j] && i > 0){
 800a846:	492d      	ldr	r1, [pc, #180]	; (800a8fc <UpdateWalkMap+0x2d0>)
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	4613      	mov	r3, r2
 800a84c:	00db      	lsls	r3, r3, #3
 800a84e:	4413      	add	r3, r2
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	4413      	add	r3, r2
 800a854:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800a858:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d02d      	beq.n	800a8be <UpdateWalkMap+0x292>
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	1e5a      	subs	r2, r3, #1
 800a866:	4924      	ldr	r1, [pc, #144]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a868:	4613      	mov	r3, r2
 800a86a:	00db      	lsls	r3, r3, #3
 800a86c:	4413      	add	r3, r2
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	4413      	add	r3, r2
 800a872:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800a876:	4820      	ldr	r0, [pc, #128]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	4613      	mov	r3, r2
 800a87c:	00db      	lsls	r3, r3, #3
 800a87e:	4413      	add	r3, r2
 800a880:	68ba      	ldr	r2, [r7, #8]
 800a882:	4413      	add	r3, r2
 800a884:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800a888:	4299      	cmp	r1, r3
 800a88a:	d918      	bls.n	800a8be <UpdateWalkMap+0x292>
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	dd15      	ble.n	800a8be <UpdateWalkMap+0x292>
						  walk_map[i-1][j] = walk_map[i][j] + 1;
 800a892:	4919      	ldr	r1, [pc, #100]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	4613      	mov	r3, r2
 800a898:	00db      	lsls	r3, r3, #3
 800a89a:	4413      	add	r3, r2
 800a89c:	68ba      	ldr	r2, [r7, #8]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	3a01      	subs	r2, #1
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	b298      	uxth	r0, r3
 800a8ac:	4912      	ldr	r1, [pc, #72]	; (800a8f8 <UpdateWalkMap+0x2cc>)
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	00db      	lsls	r3, r3, #3
 800a8b2:	4413      	add	r3, r2
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					  }

					  flag = 1;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	607b      	str	r3, [r7, #4]
			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	60bb      	str	r3, [r7, #8]
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2b08      	cmp	r3, #8
 800a8cc:	f77f aef9 	ble.w	800a6c2 <UpdateWalkMap+0x96>
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	60fb      	str	r3, [r7, #12]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2b08      	cmp	r3, #8
 800a8da:	f77f aeef 	ble.w	800a6bc <UpdateWalkMap+0x90>
			       }
			  }
		  }
		  //歩数と繰り返しの回数は等し?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
		  hosu++;
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	603b      	str	r3, [r7, #0]
	}while(flag);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f47f aee3 	bne.w	800a6b2 <UpdateWalkMap+0x86>

}
 800a8ec:	bf00      	nop
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bc90      	pop	{r4, r7}
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	20000448 	.word	0x20000448
 800a8fc:	200004ec 	.word	0x200004ec

0800a900 <LeftHandJudge>:
//ノード
//左手法での方向決定
void LeftHandJudge(uint8_t *x, uint8_t *y, direction *dir, char *action_type){
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
 800a90c:	603b      	str	r3, [r7, #0]
	/*--旋回モード選?��?--*/

	/*-=1-=1*/
    	  switch(*dir){
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	2b03      	cmp	r3, #3
 800a914:	f200 81b7 	bhi.w	800ac86 <LeftHandJudge+0x386>
 800a918:	a201      	add	r2, pc, #4	; (adr r2, 800a920 <LeftHandJudge+0x20>)
 800a91a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91e:	bf00      	nop
 800a920:	0800a931 	.word	0x0800a931
 800a924:	0800aa05 	.word	0x0800aa05
 800a928:	0800aad9 	.word	0x0800aad9
 800a92c:	0800abad 	.word	0x0800abad
    	  case north:

    		  if(Wall[*x][*y].west == NOWALL){
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	4619      	mov	r1, r3
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	4618      	mov	r0, r3
 800a93c:	4aab      	ldr	r2, [pc, #684]	; (800abec <LeftHandJudge+0x2ec>)
 800a93e:	460b      	mov	r3, r1
 800a940:	00db      	lsls	r3, r3, #3
 800a942:	440b      	add	r3, r1
 800a944:	4403      	add	r3, r0
 800a946:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a94a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	2b00      	cmp	r3, #0
 800a952:	d10c      	bne.n	800a96e <LeftHandJudge+0x6e>
    			  SelectAction( 'L');
 800a954:	204c      	movs	r0, #76	; 0x4c
 800a956:	f7ff f8e3 	bl	8009b20 <SelectAction>
    			  *dir = west;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2203      	movs	r2, #3
 800a95e:	701a      	strb	r2, [r3, #0]
    		      *x-=1;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	3b01      	subs	r3, #1
 800a966:	b2da      	uxtb	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	701a      	strb	r2, [r3, #0]
    	       	  *y-=1;
    		  }



    		  break;
 800a96c:	e18c      	b.n	800ac88 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].north == NOWALL){
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	4619      	mov	r1, r3
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	4618      	mov	r0, r3
 800a97a:	4a9c      	ldr	r2, [pc, #624]	; (800abec <LeftHandJudge+0x2ec>)
 800a97c:	460b      	mov	r3, r1
 800a97e:	00db      	lsls	r3, r3, #3
 800a980:	440b      	add	r3, r1
 800a982:	4403      	add	r3, r0
 800a984:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a988:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10c      	bne.n	800a9ac <LeftHandJudge+0xac>
    			  SelectAction('S');
 800a992:	2053      	movs	r0, #83	; 0x53
 800a994:	f7ff f8c4 	bl	8009b20 <SelectAction>
    			  *dir = north;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	701a      	strb	r2, [r3, #0]
    			  *y+=1;
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	701a      	strb	r2, [r3, #0]
    		  break;
 800a9aa:	e16d      	b.n	800ac88 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].east == NOWALL){
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	4a8c      	ldr	r2, [pc, #560]	; (800abec <LeftHandJudge+0x2ec>)
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	00db      	lsls	r3, r3, #3
 800a9be:	440b      	add	r3, r1
 800a9c0:	4403      	add	r3, r0
 800a9c2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a9c6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10c      	bne.n	800a9ea <LeftHandJudge+0xea>
    			  SelectAction('R');
 800a9d0:	2052      	movs	r0, #82	; 0x52
 800a9d2:	f7ff f8a5 	bl	8009b20 <SelectAction>
    	          *dir = east;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	701a      	strb	r2, [r3, #0]
    	          *x+=1;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	701a      	strb	r2, [r3, #0]
    		  break;
 800a9e8:	e14e      	b.n	800ac88 <LeftHandJudge+0x388>
    			  SelectAction('B');
 800a9ea:	2042      	movs	r0, #66	; 0x42
 800a9ec:	f7ff f898 	bl	8009b20 <SelectAction>
    	       	  *dir = south;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2202      	movs	r2, #2
 800a9f4:	701a      	strb	r2, [r3, #0]
    	       	  *y-=1;
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	701a      	strb	r2, [r3, #0]
    		  break;
 800aa02:	e141      	b.n	800ac88 <LeftHandJudge+0x388>
    	  case east:
    		  if(Wall[*x][*y].north== NOWALL){
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	4a76      	ldr	r2, [pc, #472]	; (800abec <LeftHandJudge+0x2ec>)
 800aa12:	460b      	mov	r3, r1
 800aa14:	00db      	lsls	r3, r3, #3
 800aa16:	440b      	add	r3, r1
 800aa18:	4403      	add	r3, r0
 800aa1a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800aa1e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10c      	bne.n	800aa42 <LeftHandJudge+0x142>
    			  SelectAction('L');
 800aa28:	204c      	movs	r0, #76	; 0x4c
 800aa2a:	f7ff f879 	bl	8009b20 <SelectAction>
    			  *dir = north;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	701a      	strb	r2, [r3, #0]
    			  *y+=1;
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	701a      	strb	r2, [r3, #0]
    			  SelectAction('B');
      			  *dir = west;
      		      *x-=1;
    		  }

    		  break;
 800aa40:	e122      	b.n	800ac88 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].east == NOWALL){
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	4619      	mov	r1, r3
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	4a67      	ldr	r2, [pc, #412]	; (800abec <LeftHandJudge+0x2ec>)
 800aa50:	460b      	mov	r3, r1
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	440b      	add	r3, r1
 800aa56:	4403      	add	r3, r0
 800aa58:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800aa5c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d10c      	bne.n	800aa80 <LeftHandJudge+0x180>
    			  SelectAction('S');
 800aa66:	2053      	movs	r0, #83	; 0x53
 800aa68:	f7ff f85a 	bl	8009b20 <SelectAction>
    	          *dir = east;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	701a      	strb	r2, [r3, #0]
    	          *x+=1;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	3301      	adds	r3, #1
 800aa78:	b2da      	uxtb	r2, r3
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	701a      	strb	r2, [r3, #0]
    		  break;
 800aa7e:	e103      	b.n	800ac88 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].south == NOWALL){
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	4619      	mov	r1, r3
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	4a57      	ldr	r2, [pc, #348]	; (800abec <LeftHandJudge+0x2ec>)
 800aa8e:	460b      	mov	r3, r1
 800aa90:	00db      	lsls	r3, r3, #3
 800aa92:	440b      	add	r3, r1
 800aa94:	4403      	add	r3, r0
 800aa96:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800aa9a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10c      	bne.n	800aabe <LeftHandJudge+0x1be>
    			  SelectAction('R');
 800aaa4:	2052      	movs	r0, #82	; 0x52
 800aaa6:	f7ff f83b 	bl	8009b20 <SelectAction>
    	       	  *dir = south;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2202      	movs	r2, #2
 800aaae:	701a      	strb	r2, [r3, #0]
    	       	  *y-=1;
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	3b01      	subs	r3, #1
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	701a      	strb	r2, [r3, #0]
    		  break;
 800aabc:	e0e4      	b.n	800ac88 <LeftHandJudge+0x388>
    			  SelectAction('B');
 800aabe:	2042      	movs	r0, #66	; 0x42
 800aac0:	f7ff f82e 	bl	8009b20 <SelectAction>
      			  *dir = west;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2203      	movs	r2, #3
 800aac8:	701a      	strb	r2, [r3, #0]
      		      *x-=1;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	3b01      	subs	r3, #1
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	701a      	strb	r2, [r3, #0]
    		  break;
 800aad6:	e0d7      	b.n	800ac88 <LeftHandJudge+0x388>
    	  case south:
    		  if(Wall[*x][*y].east == NOWALL){
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	4619      	mov	r1, r3
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	4618      	mov	r0, r3
 800aae4:	4a41      	ldr	r2, [pc, #260]	; (800abec <LeftHandJudge+0x2ec>)
 800aae6:	460b      	mov	r3, r1
 800aae8:	00db      	lsls	r3, r3, #3
 800aaea:	440b      	add	r3, r1
 800aaec:	4403      	add	r3, r0
 800aaee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800aaf2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d10c      	bne.n	800ab16 <LeftHandJudge+0x216>
    			  SelectAction('L');
 800aafc:	204c      	movs	r0, #76	; 0x4c
 800aafe:	f7ff f80f 	bl	8009b20 <SelectAction>
    	          *dir = east;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	701a      	strb	r2, [r3, #0]
    	          *x+=1;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	701a      	strb	r2, [r3, #0]
    			  SelectAction('B');
      			  *dir = north;
      			  *y+=1;
    		  }

    		  break;
 800ab14:	e0b8      	b.n	800ac88 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].south == NOWALL){
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	4618      	mov	r0, r3
 800ab22:	4a32      	ldr	r2, [pc, #200]	; (800abec <LeftHandJudge+0x2ec>)
 800ab24:	460b      	mov	r3, r1
 800ab26:	00db      	lsls	r3, r3, #3
 800ab28:	440b      	add	r3, r1
 800ab2a:	4403      	add	r3, r0
 800ab2c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ab30:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10c      	bne.n	800ab54 <LeftHandJudge+0x254>
    			  SelectAction('S');
 800ab3a:	2053      	movs	r0, #83	; 0x53
 800ab3c:	f7fe fff0 	bl	8009b20 <SelectAction>
    	       	  *dir = south;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2202      	movs	r2, #2
 800ab44:	701a      	strb	r2, [r3, #0]
    	       	  *y-=1;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	701a      	strb	r2, [r3, #0]
    		  break;
 800ab52:	e099      	b.n	800ac88 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].west == NOWALL){
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	4619      	mov	r1, r3
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	4a22      	ldr	r2, [pc, #136]	; (800abec <LeftHandJudge+0x2ec>)
 800ab62:	460b      	mov	r3, r1
 800ab64:	00db      	lsls	r3, r3, #3
 800ab66:	440b      	add	r3, r1
 800ab68:	4403      	add	r3, r0
 800ab6a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ab6e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10c      	bne.n	800ab92 <LeftHandJudge+0x292>
    			  SelectAction('R');
 800ab78:	2052      	movs	r0, #82	; 0x52
 800ab7a:	f7fe ffd1 	bl	8009b20 <SelectAction>
      			  *dir = west;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2203      	movs	r2, #3
 800ab82:	701a      	strb	r2, [r3, #0]
      		      *x-=1;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	b2da      	uxtb	r2, r3
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	701a      	strb	r2, [r3, #0]
    		  break;
 800ab90:	e07a      	b.n	800ac88 <LeftHandJudge+0x388>
    			  SelectAction('B');
 800ab92:	2042      	movs	r0, #66	; 0x42
 800ab94:	f7fe ffc4 	bl	8009b20 <SelectAction>
      			  *dir = north;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	701a      	strb	r2, [r3, #0]
      			  *y+=1;
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	3301      	adds	r3, #1
 800aba4:	b2da      	uxtb	r2, r3
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	701a      	strb	r2, [r3, #0]
    		  break;
 800abaa:	e06d      	b.n	800ac88 <LeftHandJudge+0x388>
    	  case west:
    		  if(Wall[*x][*y].south == NOWALL){
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	4619      	mov	r1, r3
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	4618      	mov	r0, r3
 800abb8:	4a0c      	ldr	r2, [pc, #48]	; (800abec <LeftHandJudge+0x2ec>)
 800abba:	460b      	mov	r3, r1
 800abbc:	00db      	lsls	r3, r3, #3
 800abbe:	440b      	add	r3, r1
 800abc0:	4403      	add	r3, r0
 800abc2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800abc6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10f      	bne.n	800abf0 <LeftHandJudge+0x2f0>
    			  SelectAction('L');
 800abd0:	204c      	movs	r0, #76	; 0x4c
 800abd2:	f7fe ffa5 	bl	8009b20 <SelectAction>
    	       	  *dir = south;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2202      	movs	r2, #2
 800abda:	701a      	strb	r2, [r3, #0]
    	       	  *y -= 1;
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	3b01      	subs	r3, #1
 800abe2:	b2da      	uxtb	r2, r3
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	701a      	strb	r2, [r3, #0]
    			  SelectAction('B');
    	          *dir = east;
    	          *x+=1;
    		  }

    		  break;
 800abe8:	e04e      	b.n	800ac88 <LeftHandJudge+0x388>
 800abea:	bf00      	nop
 800abec:	200004ec 	.word	0x200004ec
    		  else if(Wall[*x][*y].west == NOWALL){
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	4619      	mov	r1, r3
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	4618      	mov	r0, r3
 800abfc:	4a24      	ldr	r2, [pc, #144]	; (800ac90 <LeftHandJudge+0x390>)
 800abfe:	460b      	mov	r3, r1
 800ac00:	00db      	lsls	r3, r3, #3
 800ac02:	440b      	add	r3, r1
 800ac04:	4403      	add	r3, r0
 800ac06:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ac0a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10c      	bne.n	800ac2e <LeftHandJudge+0x32e>
    			  SelectAction('S');
 800ac14:	2053      	movs	r0, #83	; 0x53
 800ac16:	f7fe ff83 	bl	8009b20 <SelectAction>
    			  *dir = west;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2203      	movs	r2, #3
 800ac1e:	701a      	strb	r2, [r3, #0]
    		      *x-=1;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	3b01      	subs	r3, #1
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	701a      	strb	r2, [r3, #0]
    		  break;
 800ac2c:	e02c      	b.n	800ac88 <LeftHandJudge+0x388>
    		  else if(Wall[*x][*y].north == NOWALL){
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	4619      	mov	r1, r3
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	4618      	mov	r0, r3
 800ac3a:	4a15      	ldr	r2, [pc, #84]	; (800ac90 <LeftHandJudge+0x390>)
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	00db      	lsls	r3, r3, #3
 800ac40:	440b      	add	r3, r1
 800ac42:	4403      	add	r3, r0
 800ac44:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ac48:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d10c      	bne.n	800ac6c <LeftHandJudge+0x36c>
    			  SelectAction('R');
 800ac52:	2052      	movs	r0, #82	; 0x52
 800ac54:	f7fe ff64 	bl	8009b20 <SelectAction>
      			  *dir = north;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	701a      	strb	r2, [r3, #0]
      			  *y+=1;
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	3301      	adds	r3, #1
 800ac64:	b2da      	uxtb	r2, r3
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	701a      	strb	r2, [r3, #0]
    		  break;
 800ac6a:	e00d      	b.n	800ac88 <LeftHandJudge+0x388>
    			  SelectAction('B');
 800ac6c:	2042      	movs	r0, #66	; 0x42
 800ac6e:	f7fe ff57 	bl	8009b20 <SelectAction>
    	          *dir = east;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	701a      	strb	r2, [r3, #0]
    	          *x+=1;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	b2da      	uxtb	r2, r3
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	701a      	strb	r2, [r3, #0]
    		  break;
 800ac84:	e000      	b.n	800ac88 <LeftHandJudge+0x388>
    	  default:
    		  break;
 800ac86:	bf00      	nop
    	  }//swtich end
}
 800ac88:	bf00      	nop
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	200004ec 	.word	0x200004ec

0800ac94 <WritingFree>:
#include "UI.h"
#include "Action.h"
#include "Map.h"

void WritingFree()
{
 800ac94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac98:	b0ba      	sub	sp, #232	; 0xe8
 800ac9a:	af0c      	add	r7, sp, #48	; 0x30

	//好きなようにいじるモード。テスト場。


	//ペリフェラルの動作開始
	Motor_PWM_Start();
 800ac9c:	f002 f9a4 	bl	800cfe8 <Motor_PWM_Start>
	EncoderStart();
 800aca0:	f002 f8a8 	bl	800cdf4 <EncoderStart>
	EmitterON();
 800aca4:	f002 f8c6 	bl	800ce34 <EmitterON>
	ADCStart();
 800aca8:	f002 f810 	bl	800cccc <ADCStart>

	PIDReset(L_VELO);
 800acac:	2000      	movs	r0, #0
 800acae:	f000 fb47 	bl	800b340 <PIDReset>
	PIDReset(R_VELO);
 800acb2:	2001      	movs	r0, #1
 800acb4:	f000 fb44 	bl	800b340 <PIDReset>

	//PID制御を有効化
	PIDChangeFlag(L_VELO, 1);
 800acb8:	2101      	movs	r1, #1
 800acba:	2000      	movs	r0, #0
 800acbc:	f000 fb2a 	bl	800b314 <PIDChangeFlag>
	PIDChangeFlag(R_VELO, 1);
 800acc0:	2101      	movs	r1, #1
 800acc2:	2001      	movs	r0, #1
 800acc4:	f000 fb26 	bl	800b314 <PIDChangeFlag>
	PIDChangeFlag(D_WALL, 0);
 800acc8:	2100      	movs	r1, #0
 800acca:	2003      	movs	r0, #3
 800accc:	f000 fb22 	bl	800b314 <PIDChangeFlag>
	//PIDChangeFlag(D_WALL, 1);
	PIDSetGain(L_VELO, 1.1941, 33.5232, 0.0059922);
 800acd0:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800af40 <WritingFree+0x2ac>
 800acd4:	eddf 0a9b 	vldr	s1, [pc, #620]	; 800af44 <WritingFree+0x2b0>
 800acd8:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 800af48 <WritingFree+0x2b4>
 800acdc:	2000      	movs	r0, #0
 800acde:	f000 faed 	bl	800b2bc <PIDSetGain>
	PIDSetGain(R_VELO, 1.1941, 33.5232, 0.0059922);
 800ace2:	ed9f 1a97 	vldr	s2, [pc, #604]	; 800af40 <WritingFree+0x2ac>
 800ace6:	eddf 0a97 	vldr	s1, [pc, #604]	; 800af44 <WritingFree+0x2b0>
 800acea:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800af48 <WritingFree+0x2b4>
 800acee:	2001      	movs	r0, #1
 800acf0:	f000 fae4 	bl	800b2bc <PIDSetGain>
	PIDSetGain(D_WALL, 2, 0.1, 0.00004);
 800acf4:	ed9f 1a95 	vldr	s2, [pc, #596]	; 800af4c <WritingFree+0x2b8>
 800acf8:	eddf 0a95 	vldr	s1, [pc, #596]	; 800af50 <WritingFree+0x2bc>
 800acfc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800ad00:	2003      	movs	r0, #3
 800ad02:	f000 fadb 	bl	800b2bc <PIDSetGain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800ad06:	f247 512f 	movw	r1, #29999	; 0x752f
 800ad0a:	4892      	ldr	r0, [pc, #584]	; (800af54 <WritingFree+0x2c0>)
 800ad0c:	f7fe ff5e 	bl	8009bcc <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800ad10:	f247 512f 	movw	r1, #29999	; 0x752f
 800ad14:	4890      	ldr	r0, [pc, #576]	; (800af58 <WritingFree+0x2c4>)
 800ad16:	f7fe ff59 	bl	8009bcc <InitPulse>

	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800ad1a:	4890      	ldr	r0, [pc, #576]	; (800af5c <WritingFree+0x2c8>)
 800ad1c:	f004 fd5f 	bl	800f7de <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800ad20:	488f      	ldr	r0, [pc, #572]	; (800af60 <WritingFree+0x2cc>)
 800ad22:	f004 fd5c 	bl	800f7de <HAL_TIM_Base_Start_IT>
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備
	target_velocity[BODY] = 0;
 800ad26:	4b8f      	ldr	r3, [pc, #572]	; (800af64 <WritingFree+0x2d0>)
 800ad28:	f04f 0200 	mov.w	r2, #0
 800ad2c:	609a      	str	r2, [r3, #8]
	target_angular_v = 0;
 800ad2e:	4b8e      	ldr	r3, [pc, #568]	; (800af68 <WritingFree+0x2d4>)
 800ad30:	f04f 0200 	mov.w	r2, #0
 800ad34:	601a      	str	r2, [r3, #0]
	acceleration = 0;
 800ad36:	4b8d      	ldr	r3, [pc, #564]	; (800af6c <WritingFree+0x2d8>)
 800ad38:	f04f 0200 	mov.w	r2, #0
 800ad3c:	601a      	str	r2, [r3, #0]
	angular_acceleration = 0;
 800ad3e:	4b8c      	ldr	r3, [pc, #560]	; (800af70 <WritingFree+0x2dc>)
 800ad40:	f04f 0200 	mov.w	r2, #0
 800ad44:	601a      	str	r2, [r3, #0]
	total_pulse[LEFT] = 0;
 800ad46:	4b8b      	ldr	r3, [pc, #556]	; (800af74 <WritingFree+0x2e0>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	601a      	str	r2, [r3, #0]
	total_pulse[RIGHT] = 0;
 800ad4c:	4b89      	ldr	r3, [pc, #548]	; (800af74 <WritingFree+0x2e0>)
 800ad4e:	2200      	movs	r2, #0
 800ad50:	605a      	str	r2, [r3, #4]
	total_pulse[BODY] = 0;
 800ad52:	4b88      	ldr	r3, [pc, #544]	; (800af74 <WritingFree+0x2e0>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	target_photo[SL] = photo[SL];
 800ad58:	4b87      	ldr	r3, [pc, #540]	; (800af78 <WritingFree+0x2e4>)
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	4a87      	ldr	r2, [pc, #540]	; (800af7c <WritingFree+0x2e8>)
 800ad5e:	6093      	str	r3, [r2, #8]
	target_photo[SR] = photo[SR];
 800ad60:	4b85      	ldr	r3, [pc, #532]	; (800af78 <WritingFree+0x2e4>)
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	4a85      	ldr	r2, [pc, #532]	; (800af7c <WritingFree+0x2e8>)
 800ad66:	6053      	str	r3, [r2, #4]
	photo_diff = target_photo[SL] - target_photo[SR];
 800ad68:	4b84      	ldr	r3, [pc, #528]	; (800af7c <WritingFree+0x2e8>)
 800ad6a:	ed93 7a02 	vldr	s14, [r3, #8]
 800ad6e:	4b83      	ldr	r3, [pc, #524]	; (800af7c <WritingFree+0x2e8>)
 800ad70:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad78:	4b81      	ldr	r3, [pc, #516]	; (800af80 <WritingFree+0x2ec>)
 800ad7a:	edc3 7a00 	vstr	s15, [r3]
	//加速開始時にがちっと音がするのを今の内に直しておく。
	PIDReset(L_VELO);
 800ad7e:	2000      	movs	r0, #0
 800ad80:	f000 fade 	bl	800b340 <PIDReset>
	PIDReset(R_VELO);
 800ad84:	2001      	movs	r0, #1
 800ad86:	f000 fadb 	bl	800b340 <PIDReset>
	PIDReset(D_WALL);
 800ad8a:	2003      	movs	r0, #3
 800ad8c:	f000 fad8 	bl	800b340 <PIDReset>

	HAL_Delay(500);
 800ad90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ad94:	f002 fa42 	bl	800d21c <HAL_Delay>
	//壁制御と速度制御の相性が悪い
	//打ち消しあわないかつ操作しやすい制御にする。→壁の左右差から角度差を計算して角速度制御させる。
	//角度がθのとき、壁左右値がいくつであるか、という関数を同定し、外部入力から左右値を取得し角度を得る。
	//壁補正は入れるタイミングを決めるのが面倒なので最初はあてにしない。
	//IMUで角速度を入れて、そっちで角度算出するほうを頑張るほうが望みがある。
	float wall_log_L[10]={0},wall_log_R[10]={0},out_log_L[10]={0},out_log_R[10]={0};
 800ad98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ad9c:	2228      	movs	r2, #40	; 0x28
 800ad9e:	2100      	movs	r1, #0
 800ada0:	4618      	mov	r0, r3
 800ada2:	f006 fd5e 	bl	8011862 <memset>
 800ada6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800adaa:	2228      	movs	r2, #40	; 0x28
 800adac:	2100      	movs	r1, #0
 800adae:	4618      	mov	r0, r3
 800adb0:	f006 fd57 	bl	8011862 <memset>
 800adb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800adb8:	2228      	movs	r2, #40	; 0x28
 800adba:	2100      	movs	r1, #0
 800adbc:	4618      	mov	r0, r3
 800adbe:	f006 fd50 	bl	8011862 <memset>
 800adc2:	f107 0314 	add.w	r3, r7, #20
 800adc6:	2228      	movs	r2, #40	; 0x28
 800adc8:	2100      	movs	r1, #0
 800adca:	4618      	mov	r0, r3
 800adcc:	f006 fd49 	bl	8011862 <memset>
	Accel(61.5, explore_velocity);
 800add0:	4b6c      	ldr	r3, [pc, #432]	; (800af84 <WritingFree+0x2f0>)
 800add2:	edd3 7a00 	vldr	s15, [r3]
 800add6:	eef0 0a67 	vmov.f32	s1, s15
 800adda:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 800af88 <WritingFree+0x2f4>
 800adde:	f7fe fc8f 	bl	8009700 <Accel>

	SelectAction('S');
 800ade2:	2053      	movs	r0, #83	; 0x53
 800ade4:	f7fe fe9c 	bl	8009b20 <SelectAction>
	wall_log_L[0] = photo[SL];
 800ade8:	4b63      	ldr	r3, [pc, #396]	; (800af78 <WritingFree+0x2e4>)
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	wall_log_R[0] = photo[SR];
 800adf0:	4b61      	ldr	r3, [pc, #388]	; (800af78 <WritingFree+0x2e4>)
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	667b      	str	r3, [r7, #100]	; 0x64
	out_log_L[0] = wall_left_out;;
 800adf6:	4b65      	ldr	r3, [pc, #404]	; (800af8c <WritingFree+0x2f8>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	ee07 3a90 	vmov	s15, r3
 800adfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae02:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	out_log_R[0] = wall_right_out;
 800ae06:	4b62      	ldr	r3, [pc, #392]	; (800af90 <WritingFree+0x2fc>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	ee07 3a90 	vmov	s15, r3
 800ae0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae12:	edc7 7a05 	vstr	s15, [r7, #20]
	SelectAction('S');
 800ae16:	2053      	movs	r0, #83	; 0x53
 800ae18:	f7fe fe82 	bl	8009b20 <SelectAction>
	PIDChangeFlag(D_WALL, 0);
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	2003      	movs	r0, #3
 800ae20:	f000 fa78 	bl	800b314 <PIDChangeFlag>
	wall_log_L[1] = photo[SL];
 800ae24:	4b54      	ldr	r3, [pc, #336]	; (800af78 <WritingFree+0x2e4>)
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	wall_log_R[1] = photo[SR];
 800ae2c:	4b52      	ldr	r3, [pc, #328]	; (800af78 <WritingFree+0x2e4>)
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	66bb      	str	r3, [r7, #104]	; 0x68
	out_log_L[1] = wall_left_out;
 800ae32:	4b56      	ldr	r3, [pc, #344]	; (800af8c <WritingFree+0x2f8>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	ee07 3a90 	vmov	s15, r3
 800ae3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae3e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	out_log_R[1] = wall_right_out;
 800ae42:	4b53      	ldr	r3, [pc, #332]	; (800af90 <WritingFree+0x2fc>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	ee07 3a90 	vmov	s15, r3
 800ae4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae4e:	edc7 7a06 	vstr	s15, [r7, #24]
	SelectAction('B');
 800ae52:	2042      	movs	r0, #66	; 0x42
 800ae54:	f7fe fe64 	bl	8009b20 <SelectAction>
	wall_log_L[2] = photo[SL];
 800ae58:	4b47      	ldr	r3, [pc, #284]	; (800af78 <WritingFree+0x2e4>)
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	wall_log_R[2] = photo[SR];
 800ae60:	4b45      	ldr	r3, [pc, #276]	; (800af78 <WritingFree+0x2e4>)
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	66fb      	str	r3, [r7, #108]	; 0x6c
	out_log_L[2] = wall_left_out;
 800ae66:	4b49      	ldr	r3, [pc, #292]	; (800af8c <WritingFree+0x2f8>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	ee07 3a90 	vmov	s15, r3
 800ae6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae72:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	out_log_R[2] = wall_right_out;
 800ae76:	4b46      	ldr	r3, [pc, #280]	; (800af90 <WritingFree+0x2fc>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae82:	edc7 7a07 	vstr	s15, [r7, #28]
	add_velocity = 100;
 800ae86:	4b43      	ldr	r3, [pc, #268]	; (800af94 <WritingFree+0x300>)
 800ae88:	4a43      	ldr	r2, [pc, #268]	; (800af98 <WritingFree+0x304>)
 800ae8a:	601a      	str	r2, [r3, #0]
	PIDChangeFlag(D_WALL, 1);
 800ae8c:	2101      	movs	r1, #1
 800ae8e:	2003      	movs	r0, #3
 800ae90:	f000 fa40 	bl	800b314 <PIDChangeFlag>
	SelectAction('S');
 800ae94:	2053      	movs	r0, #83	; 0x53
 800ae96:	f7fe fe43 	bl	8009b20 <SelectAction>
	wall_log_L[3] = photo[SL];
 800ae9a:	4b37      	ldr	r3, [pc, #220]	; (800af78 <WritingFree+0x2e4>)
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	wall_log_R[3] = photo[SR];
 800aea2:	4b35      	ldr	r3, [pc, #212]	; (800af78 <WritingFree+0x2e4>)
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	673b      	str	r3, [r7, #112]	; 0x70
	out_log_L[3] = wall_left_out;
 800aea8:	4b38      	ldr	r3, [pc, #224]	; (800af8c <WritingFree+0x2f8>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	ee07 3a90 	vmov	s15, r3
 800aeb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aeb4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	out_log_R[3] = wall_right_out;
 800aeb8:	4b35      	ldr	r3, [pc, #212]	; (800af90 <WritingFree+0x2fc>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	ee07 3a90 	vmov	s15, r3
 800aec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aec4:	edc7 7a08 	vstr	s15, [r7, #32]
	SelectAction('S');
 800aec8:	2053      	movs	r0, #83	; 0x53
 800aeca:	f7fe fe29 	bl	8009b20 <SelectAction>
	wall_log_L[4] = photo[SL];
 800aece:	4b2a      	ldr	r3, [pc, #168]	; (800af78 <WritingFree+0x2e4>)
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	wall_log_R[4] = photo[SR];
 800aed6:	4b28      	ldr	r3, [pc, #160]	; (800af78 <WritingFree+0x2e4>)
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	677b      	str	r3, [r7, #116]	; 0x74
	out_log_L[4] = wall_left_out;
 800aedc:	4b2b      	ldr	r3, [pc, #172]	; (800af8c <WritingFree+0x2f8>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	ee07 3a90 	vmov	s15, r3
 800aee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aee8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	out_log_R[4] = wall_right_out;
 800aeec:	4b28      	ldr	r3, [pc, #160]	; (800af90 <WritingFree+0x2fc>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	ee07 3a90 	vmov	s15, r3
 800aef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aef8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	//GoStraight( 90,explore_velocity, 0);
	Decel(45, 0);
 800aefc:	eddf 0a27 	vldr	s1, [pc, #156]	; 800af9c <WritingFree+0x308>
 800af00:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800afa0 <WritingFree+0x30c>
 800af04:	f7fe fc78 	bl	80097f8 <Decel>
	wall_log_L[5] = photo[SL];
 800af08:	4b1b      	ldr	r3, [pc, #108]	; (800af78 <WritingFree+0x2e4>)
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	wall_log_R[5] = photo[SR];
 800af10:	4b19      	ldr	r3, [pc, #100]	; (800af78 <WritingFree+0x2e4>)
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	67bb      	str	r3, [r7, #120]	; 0x78
	out_log_L[5] = wall_left_out;
 800af16:	4b1d      	ldr	r3, [pc, #116]	; (800af8c <WritingFree+0x2f8>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	ee07 3a90 	vmov	s15, r3
 800af1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af22:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	out_log_R[5] = wall_right_out;
 800af26:	4b1a      	ldr	r3, [pc, #104]	; (800af90 <WritingFree+0x2fc>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	ee07 3a90 	vmov	s15, r3
 800af2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af32:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	while(1)
	{
	for(int i=0; i < 6; i++)
 800af36:	2300      	movs	r3, #0
 800af38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af3c:	e094      	b.n	800b068 <WritingFree+0x3d4>
 800af3e:	bf00      	nop
 800af40:	3bc45a38 	.word	0x3bc45a38
 800af44:	420617c2 	.word	0x420617c2
 800af48:	3f98d845 	.word	0x3f98d845
 800af4c:	3827c5ac 	.word	0x3827c5ac
 800af50:	3dcccccd 	.word	0x3dcccccd
 800af54:	40000424 	.word	0x40000424
 800af58:	40000824 	.word	0x40000824
 800af5c:	20000818 	.word	0x20000818
 800af60:	20000590 	.word	0x20000590
 800af64:	20000290 	.word	0x20000290
 800af68:	200002a4 	.word	0x200002a4
 800af6c:	200002a0 	.word	0x200002a0
 800af70:	200002a8 	.word	0x200002a8
 800af74:	2000027c 	.word	0x2000027c
 800af78:	20000244 	.word	0x20000244
 800af7c:	20000254 	.word	0x20000254
 800af80:	20000264 	.word	0x20000264
 800af84:	20000000 	.word	0x20000000
 800af88:	42760000 	.word	0x42760000
 800af8c:	200002b8 	.word	0x200002b8
 800af90:	200002b4 	.word	0x200002b4
 800af94:	2000029c 	.word	0x2000029c
 800af98:	42c80000 	.word	0x42c80000
 800af9c:	00000000 	.word	0x00000000
 800afa0:	42340000 	.word	0x42340000
	{
		printf("起動時の壁左右値 : %f,%f, %d : 壁左, 壁右, 出力左, 出力右 :　%f, %f, %f, %f\r\n", target_photo[SL], target_photo[SR],i,wall_log_L[i],wall_log_R[i]+photo_diff, out_log_L[i],out_log_R[i]);
 800afa4:	4b33      	ldr	r3, [pc, #204]	; (800b074 <WritingFree+0x3e0>)
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7fd fa05 	bl	80083b8 <__aeabi_f2d>
 800afae:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800afb2:	4b30      	ldr	r3, [pc, #192]	; (800b074 <WritingFree+0x3e0>)
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fd f9fe 	bl	80083b8 <__aeabi_f2d>
 800afbc:	4604      	mov	r4, r0
 800afbe:	460d      	mov	r5, r1
 800afc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800afca:	440b      	add	r3, r1
 800afcc:	3b2c      	subs	r3, #44	; 0x2c
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7fd f9f1 	bl	80083b8 <__aeabi_f2d>
 800afd6:	4680      	mov	r8, r0
 800afd8:	4689      	mov	r9, r1
 800afda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800afe4:	440b      	add	r3, r1
 800afe6:	3b54      	subs	r3, #84	; 0x54
 800afe8:	ed93 7a00 	vldr	s14, [r3]
 800afec:	4b22      	ldr	r3, [pc, #136]	; (800b078 <WritingFree+0x3e4>)
 800afee:	edd3 7a00 	vldr	s15, [r3]
 800aff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aff6:	ee17 0a90 	vmov	r0, s15
 800affa:	f7fd f9dd 	bl	80083b8 <__aeabi_f2d>
 800affe:	4682      	mov	sl, r0
 800b000:	468b      	mov	fp, r1
 800b002:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800b00c:	440b      	add	r3, r1
 800b00e:	3b7c      	subs	r3, #124	; 0x7c
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4618      	mov	r0, r3
 800b014:	f7fd f9d0 	bl	80083b8 <__aeabi_f2d>
 800b018:	e9c7 0100 	strd	r0, r1, [r7]
 800b01c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800b026:	440b      	add	r3, r1
 800b028:	3ba4      	subs	r3, #164	; 0xa4
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7fd f9c3 	bl	80083b8 <__aeabi_f2d>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b03a:	ed97 7b00 	vldr	d7, [r7]
 800b03e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b042:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800b046:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800b04a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b04e:	9302      	str	r3, [sp, #8]
 800b050:	e9cd 4500 	strd	r4, r5, [sp]
 800b054:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b058:	4808      	ldr	r0, [pc, #32]	; (800b07c <WritingFree+0x3e8>)
 800b05a:	f007 f867 	bl	801212c <iprintf>
	for(int i=0; i < 6; i++)
 800b05e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b062:	3301      	adds	r3, #1
 800b064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b068:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b06c:	2b05      	cmp	r3, #5
 800b06e:	dd99      	ble.n	800afa4 <WritingFree+0x310>
 800b070:	e761      	b.n	800af36 <WritingFree+0x2a2>
 800b072:	bf00      	nop
 800b074:	20000254 	.word	0x20000254
 800b078:	20000264 	.word	0x20000264
 800b07c:	08013fa0 	.word	0x08013fa0

0800b080 <Explore>:


}

void Explore()
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b08a      	sub	sp, #40	; 0x28
 800b084:	af00      	add	r7, sp, #0
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	//ペリフェラルの動作開始
	Motor_PWM_Start();
 800b086:	f001 ffaf 	bl	800cfe8 <Motor_PWM_Start>
	EncoderStart();
 800b08a:	f001 feb3 	bl	800cdf4 <EncoderStart>
	EmitterON();
 800b08e:	f001 fed1 	bl	800ce34 <EmitterON>
	ADCStart();
 800b092:	f001 fe1b 	bl	800cccc <ADCStart>

	PIDReset(L_VELO);
 800b096:	2000      	movs	r0, #0
 800b098:	f000 f952 	bl	800b340 <PIDReset>
	PIDReset(R_VELO);
 800b09c:	2001      	movs	r0, #1
 800b09e:	f000 f94f 	bl	800b340 <PIDReset>

	//PID制御を有効化
	PIDChangeFlag(L_VELO, 1);
 800b0a2:	2101      	movs	r1, #1
 800b0a4:	2000      	movs	r0, #0
 800b0a6:	f000 f935 	bl	800b314 <PIDChangeFlag>
	PIDChangeFlag(R_VELO, 1);
 800b0aa:	2101      	movs	r1, #1
 800b0ac:	2001      	movs	r0, #1
 800b0ae:	f000 f931 	bl	800b314 <PIDChangeFlag>
	PIDChangeFlag(D_WALL, 0);
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	2003      	movs	r0, #3
 800b0b6:	f000 f92d 	bl	800b314 <PIDChangeFlag>
	//PIDChangeFlag(D_WALL, 1);
	PIDSetGain(L_VELO, 1.1941, 33.5232, 0.0059922);
 800b0ba:	ed9f 1a69 	vldr	s2, [pc, #420]	; 800b260 <Explore+0x1e0>
 800b0be:	eddf 0a69 	vldr	s1, [pc, #420]	; 800b264 <Explore+0x1e4>
 800b0c2:	ed9f 0a69 	vldr	s0, [pc, #420]	; 800b268 <Explore+0x1e8>
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	f000 f8f8 	bl	800b2bc <PIDSetGain>
	PIDSetGain(R_VELO, 1.1941, 33.5232, 0.0059922);
 800b0cc:	ed9f 1a64 	vldr	s2, [pc, #400]	; 800b260 <Explore+0x1e0>
 800b0d0:	eddf 0a64 	vldr	s1, [pc, #400]	; 800b264 <Explore+0x1e4>
 800b0d4:	ed9f 0a64 	vldr	s0, [pc, #400]	; 800b268 <Explore+0x1e8>
 800b0d8:	2001      	movs	r0, #1
 800b0da:	f000 f8ef 	bl	800b2bc <PIDSetGain>
	PIDSetGain(D_WALL, 2, 0.1, 0.00004);
 800b0de:	ed9f 1a63 	vldr	s2, [pc, #396]	; 800b26c <Explore+0x1ec>
 800b0e2:	eddf 0a63 	vldr	s1, [pc, #396]	; 800b270 <Explore+0x1f0>
 800b0e6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b0ea:	2003      	movs	r0, #3
 800b0ec:	f000 f8e6 	bl	800b2bc <PIDSetGain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b0f0:	f247 512f 	movw	r1, #29999	; 0x752f
 800b0f4:	485f      	ldr	r0, [pc, #380]	; (800b274 <Explore+0x1f4>)
 800b0f6:	f7fe fd69 	bl	8009bcc <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b0fa:	f247 512f 	movw	r1, #29999	; 0x752f
 800b0fe:	485e      	ldr	r0, [pc, #376]	; (800b278 <Explore+0x1f8>)
 800b100:	f7fe fd64 	bl	8009bcc <InitPulse>

	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800b104:	485d      	ldr	r0, [pc, #372]	; (800b27c <Explore+0x1fc>)
 800b106:	f004 fb6a 	bl	800f7de <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b10a:	485d      	ldr	r0, [pc, #372]	; (800b280 <Explore+0x200>)
 800b10c:	f004 fb67 	bl	800f7de <HAL_TIM_Base_Start_IT>
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備
	target_velocity[BODY] = 0;
 800b110:	4b5c      	ldr	r3, [pc, #368]	; (800b284 <Explore+0x204>)
 800b112:	f04f 0200 	mov.w	r2, #0
 800b116:	609a      	str	r2, [r3, #8]
	target_angular_v = 0;
 800b118:	4b5b      	ldr	r3, [pc, #364]	; (800b288 <Explore+0x208>)
 800b11a:	f04f 0200 	mov.w	r2, #0
 800b11e:	601a      	str	r2, [r3, #0]
	acceleration = 0;
 800b120:	4b5a      	ldr	r3, [pc, #360]	; (800b28c <Explore+0x20c>)
 800b122:	f04f 0200 	mov.w	r2, #0
 800b126:	601a      	str	r2, [r3, #0]
	angular_acceleration = 0;
 800b128:	4b59      	ldr	r3, [pc, #356]	; (800b290 <Explore+0x210>)
 800b12a:	f04f 0200 	mov.w	r2, #0
 800b12e:	601a      	str	r2, [r3, #0]
	total_pulse[LEFT] = 0;
 800b130:	4b58      	ldr	r3, [pc, #352]	; (800b294 <Explore+0x214>)
 800b132:	2200      	movs	r2, #0
 800b134:	601a      	str	r2, [r3, #0]
	total_pulse[RIGHT] = 0;
 800b136:	4b57      	ldr	r3, [pc, #348]	; (800b294 <Explore+0x214>)
 800b138:	2200      	movs	r2, #0
 800b13a:	605a      	str	r2, [r3, #4]
	total_pulse[BODY] = 0;
 800b13c:	4b55      	ldr	r3, [pc, #340]	; (800b294 <Explore+0x214>)
 800b13e:	2200      	movs	r2, #0
 800b140:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	target_photo[SL] = photo[SL];
 800b142:	4b55      	ldr	r3, [pc, #340]	; (800b298 <Explore+0x218>)
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	4a55      	ldr	r2, [pc, #340]	; (800b29c <Explore+0x21c>)
 800b148:	6093      	str	r3, [r2, #8]
	target_photo[SR] = photo[SR];
 800b14a:	4b53      	ldr	r3, [pc, #332]	; (800b298 <Explore+0x218>)
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	4a53      	ldr	r2, [pc, #332]	; (800b29c <Explore+0x21c>)
 800b150:	6053      	str	r3, [r2, #4]
	photo_diff = target_photo[SL] - target_photo[SR];
 800b152:	4b52      	ldr	r3, [pc, #328]	; (800b29c <Explore+0x21c>)
 800b154:	ed93 7a02 	vldr	s14, [r3, #8]
 800b158:	4b50      	ldr	r3, [pc, #320]	; (800b29c <Explore+0x21c>)
 800b15a:	edd3 7a01 	vldr	s15, [r3, #4]
 800b15e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b162:	4b4f      	ldr	r3, [pc, #316]	; (800b2a0 <Explore+0x220>)
 800b164:	edc3 7a00 	vstr	s15, [r3]

	PIDReset(L_VELO);
 800b168:	2000      	movs	r0, #0
 800b16a:	f000 f8e9 	bl	800b340 <PIDReset>
	PIDReset(R_VELO);
 800b16e:	2001      	movs	r0, #1
 800b170:	f000 f8e6 	bl	800b340 <PIDReset>
	PIDReset(D_WALL);
 800b174:	2003      	movs	r0, #3
 800b176:	f000 f8e3 	bl	800b340 <PIDReset>

	HAL_Delay(500);
 800b17a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b17e:	f002 f84d 	bl	800d21c <HAL_Delay>


	//迷路とステータスの準備
	//方角と座標の初期化。
	uint8_t x, y;
	my_direction = north;
 800b182:	4b48      	ldr	r3, [pc, #288]	; (800b2a4 <Explore+0x224>)
 800b184:	2200      	movs	r2, #0
 800b186:	701a      	strb	r2, [r3, #0]
	x=0,y=0;
 800b188:	2300      	movs	r3, #0
 800b18a:	77fb      	strb	r3, [r7, #31]
 800b18c:	2300      	movs	r3, #0
 800b18e:	77bb      	strb	r3, [r7, #30]
	//時間用の処理の初期化。
	int timer = 0;
 800b190:	2300      	movs	r3, #0
 800b192:	623b      	str	r3, [r7, #32]
	//エンコーダ移動量の初期化。
	total_pulse[0] = 0;
 800b194:	4b3f      	ldr	r3, [pc, #252]	; (800b294 <Explore+0x214>)
 800b196:	2200      	movs	r2, #0
 800b198:	601a      	str	r2, [r3, #0]
	total_pulse[1] = 0;
 800b19a:	4b3e      	ldr	r3, [pc, #248]	; (800b294 <Explore+0x214>)
 800b19c:	2200      	movs	r2, #0
 800b19e:	605a      	str	r2, [r3, #4]
	total_pulse[2] = 0;
 800b1a0:	4b3c      	ldr	r3, [pc, #240]	; (800b294 <Explore+0x214>)
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	609a      	str	r2, [r3, #8]
	//スタート時のアクションに設定
	char action_type = 'S';
 800b1a6:	2353      	movs	r3, #83	; 0x53
 800b1a8:	777b      	strb	r3, [r7, #29]
//		break;
//	default:
//		break;
//	}
//}
	explore_velocity=300;
 800b1aa:	4b3f      	ldr	r3, [pc, #252]	; (800b2a8 <Explore+0x228>)
 800b1ac:	4a3f      	ldr	r2, [pc, #252]	; (800b2ac <Explore+0x22c>)
 800b1ae:	601a      	str	r2, [r3, #0]
	Accel(61.5, explore_velocity);
 800b1b0:	4b3d      	ldr	r3, [pc, #244]	; (800b2a8 <Explore+0x228>)
 800b1b2:	edd3 7a00 	vldr	s15, [r3]
 800b1b6:	eef0 0a67 	vmov.f32	s1, s15
 800b1ba:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800b2b0 <Explore+0x230>
 800b1be:	f7fe fa9f 	bl	8009700 <Accel>
	y++;
 800b1c2:	7fbb      	ldrb	r3, [r7, #30]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	77bb      	strb	r3, [r7, #30]
	uint8_t xlog[10]={0},ylog[10]={0};
 800b1ca:	f107 0310 	add.w	r3, r7, #16
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	605a      	str	r2, [r3, #4]
 800b1d4:	811a      	strh	r2, [r3, #8]
 800b1d6:	1d3b      	adds	r3, r7, #4
 800b1d8:	2200      	movs	r2, #0
 800b1da:	601a      	str	r2, [r3, #0]
 800b1dc:	605a      	str	r2, [r3, #4]
 800b1de:	811a      	strh	r2, [r3, #8]
	int i=0;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	627b      	str	r3, [r7, #36]	; 0x24
	while( (x != 3) || (y != 3))
 800b1e4:	e023      	b.n	800b22e <Explore+0x1ae>
		//移動しきったあとに状態を更新するか、アクションが決まった時点で更新するか。後者にすれば、移動しきる前に、壁の状態を検知して、次のマップ更新ができる。次のアクションを用意しておく。
		//今の座標と進行方向から次の方角がわかり座標を更新できる。
		//現在の方角と座標を更新

		//移動後の座標と方角で新たに壁情報を取得
		wall_set(x,y,photo[SL], photo[SR], photo[FL], photo[FR]);
 800b1e6:	7ffa      	ldrb	r2, [r7, #31]
 800b1e8:	7fb9      	ldrb	r1, [r7, #30]
 800b1ea:	4b2b      	ldr	r3, [pc, #172]	; (800b298 <Explore+0x218>)
 800b1ec:	edd3 7a02 	vldr	s15, [r3, #8]
 800b1f0:	4b29      	ldr	r3, [pc, #164]	; (800b298 <Explore+0x218>)
 800b1f2:	ed93 7a01 	vldr	s14, [r3, #4]
 800b1f6:	4b28      	ldr	r3, [pc, #160]	; (800b298 <Explore+0x218>)
 800b1f8:	edd3 6a00 	vldr	s13, [r3]
 800b1fc:	4b26      	ldr	r3, [pc, #152]	; (800b298 <Explore+0x218>)
 800b1fe:	ed93 6a03 	vldr	s12, [r3, #12]
 800b202:	eef0 1a46 	vmov.f32	s3, s12
 800b206:	eeb0 1a66 	vmov.f32	s2, s13
 800b20a:	eef0 0a47 	vmov.f32	s1, s14
 800b20e:	eeb0 0a67 	vmov.f32	s0, s15
 800b212:	4610      	mov	r0, r2
 800b214:	f7ff f862 	bl	800a2dc <wall_set>

		UpdateWalkMap();
 800b218:	f7ff fa08 	bl	800a62c <UpdateWalkMap>

		//方向決定と、座標方角の更新。
		LeftHandJudge(&x, &y, &my_direction, &action_type);
 800b21c:	f107 031d 	add.w	r3, r7, #29
 800b220:	f107 011e 	add.w	r1, r7, #30
 800b224:	f107 001f 	add.w	r0, r7, #31
 800b228:	4a1e      	ldr	r2, [pc, #120]	; (800b2a4 <Explore+0x224>)
 800b22a:	f7ff fb69 	bl	800a900 <LeftHandJudge>
	while( (x != 3) || (y != 3))
 800b22e:	7ffb      	ldrb	r3, [r7, #31]
 800b230:	2b03      	cmp	r3, #3
 800b232:	d1d8      	bne.n	800b1e6 <Explore+0x166>
 800b234:	7fbb      	ldrb	r3, [r7, #30]
 800b236:	2b03      	cmp	r3, #3
 800b238:	d1d5      	bne.n	800b1e6 <Explore+0x166>
		UpdateMap();
		//進行方向決定 (最短経路導出から決定するか、評価値比較か、単純な左手か)
		my_direction = DetermineDirection();
#endif
	}
	Decel(45, 0);
 800b23a:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800b2b4 <Explore+0x234>
 800b23e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800b2b8 <Explore+0x238>
 800b242:	f7fe fad9 	bl	80097f8 <Decel>
	//flashに保存

	Signal(7);
 800b246:	2007      	movs	r0, #7
 800b248:	f000 f9de 	bl	800b608 <Signal>
	while(1)
	{
		for(i=0;i < 10; i++)
 800b24c:	2300      	movs	r3, #0
 800b24e:	627b      	str	r3, [r7, #36]	; 0x24
 800b250:	e002      	b.n	800b258 <Explore+0x1d8>
 800b252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b254:	3301      	adds	r3, #1
 800b256:	627b      	str	r3, [r7, #36]	; 0x24
 800b258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25a:	2b09      	cmp	r3, #9
 800b25c:	ddf9      	ble.n	800b252 <Explore+0x1d2>
 800b25e:	e7f5      	b.n	800b24c <Explore+0x1cc>
 800b260:	3bc45a38 	.word	0x3bc45a38
 800b264:	420617c2 	.word	0x420617c2
 800b268:	3f98d845 	.word	0x3f98d845
 800b26c:	3827c5ac 	.word	0x3827c5ac
 800b270:	3dcccccd 	.word	0x3dcccccd
 800b274:	40000424 	.word	0x40000424
 800b278:	40000824 	.word	0x40000824
 800b27c:	20000818 	.word	0x20000818
 800b280:	20000590 	.word	0x20000590
 800b284:	20000290 	.word	0x20000290
 800b288:	200002a4 	.word	0x200002a4
 800b28c:	200002a0 	.word	0x200002a0
 800b290:	200002a8 	.word	0x200002a8
 800b294:	2000027c 	.word	0x2000027c
 800b298:	20000244 	.word	0x20000244
 800b29c:	20000254 	.word	0x20000254
 800b2a0:	20000264 	.word	0x20000264
 800b2a4:	200002c4 	.word	0x200002c4
 800b2a8:	20000000 	.word	0x20000000
 800b2ac:	43960000 	.word	0x43960000
 800b2b0:	42760000 	.word	0x42760000
 800b2b4:	00000000 	.word	0x00000000
 800b2b8:	42340000 	.word	0x42340000

0800b2bc <PIDSetGain>:
//motor_control *p;
//control angular_velocity[1] = {0};
//control distance_wall[ WALL_SENSOR_NUM] = {0};

void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	ed87 0a02 	vstr	s0, [r7, #8]
 800b2c8:	edc7 0a01 	vstr	s1, [r7, #4]
 800b2cc:	ed87 1a00 	vstr	s2, [r7]
	pid[n].KP = kp;
 800b2d0:	4a0f      	ldr	r2, [pc, #60]	; (800b310 <PIDSetGain+0x54>)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	212c      	movs	r1, #44	; 0x2c
 800b2d6:	fb01 f303 	mul.w	r3, r1, r3
 800b2da:	4413      	add	r3, r2
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	601a      	str	r2, [r3, #0]
	pid[n].KI = ki;
 800b2e0:	4a0b      	ldr	r2, [pc, #44]	; (800b310 <PIDSetGain+0x54>)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	212c      	movs	r1, #44	; 0x2c
 800b2e6:	fb01 f303 	mul.w	r3, r1, r3
 800b2ea:	4413      	add	r3, r2
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	601a      	str	r2, [r3, #0]
	pid[n].KD = kd;
 800b2f2:	4a07      	ldr	r2, [pc, #28]	; (800b310 <PIDSetGain+0x54>)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	212c      	movs	r1, #44	; 0x2c
 800b2f8:	fb01 f303 	mul.w	r3, r1, r3
 800b2fc:	4413      	add	r3, r2
 800b2fe:	3308      	adds	r3, #8
 800b300:	683a      	ldr	r2, [r7, #0]
 800b302:	601a      	str	r2, [r3, #0]
//
//	p = *pid[n];
//	p->KP;
}
 800b304:	bf00      	nop
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr
 800b310:	200002c8 	.word	0x200002c8

0800b314 <PIDChangeFlag>:

void PIDChangeFlag(int n, int on_or_off)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
	pid[n].flag = on_or_off;
 800b31e:	4a07      	ldr	r2, [pc, #28]	; (800b33c <PIDChangeFlag+0x28>)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	212c      	movs	r1, #44	; 0x2c
 800b324:	fb01 f303 	mul.w	r3, r1, r3
 800b328:	4413      	add	r3, r2
 800b32a:	3328      	adds	r3, #40	; 0x28
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	601a      	str	r2, [r3, #0]
}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr
 800b33c:	200002c8 	.word	0x200002c8

0800b340 <PIDReset>:
int PIDGetFlag(int n)
{
	return pid[n].flag;
}
void PIDReset(int n)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	pid[n].e = 0;
 800b348:	4a1b      	ldr	r2, [pc, #108]	; (800b3b8 <PIDReset+0x78>)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	212c      	movs	r1, #44	; 0x2c
 800b34e:	fb01 f303 	mul.w	r3, r1, r3
 800b352:	4413      	add	r3, r2
 800b354:	330c      	adds	r3, #12
 800b356:	f04f 0200 	mov.w	r2, #0
 800b35a:	601a      	str	r2, [r3, #0]
	pid[n].ei = 0;
 800b35c:	4a16      	ldr	r2, [pc, #88]	; (800b3b8 <PIDReset+0x78>)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	212c      	movs	r1, #44	; 0x2c
 800b362:	fb01 f303 	mul.w	r3, r1, r3
 800b366:	4413      	add	r3, r2
 800b368:	3310      	adds	r3, #16
 800b36a:	f04f 0200 	mov.w	r2, #0
 800b36e:	601a      	str	r2, [r3, #0]
	pid[n].ed = 0;
 800b370:	4a11      	ldr	r2, [pc, #68]	; (800b3b8 <PIDReset+0x78>)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	212c      	movs	r1, #44	; 0x2c
 800b376:	fb01 f303 	mul.w	r3, r1, r3
 800b37a:	4413      	add	r3, r2
 800b37c:	3314      	adds	r3, #20
 800b37e:	f04f 0200 	mov.w	r2, #0
 800b382:	601a      	str	r2, [r3, #0]
	pid[n].elast = 0;
 800b384:	4a0c      	ldr	r2, [pc, #48]	; (800b3b8 <PIDReset+0x78>)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	212c      	movs	r1, #44	; 0x2c
 800b38a:	fb01 f303 	mul.w	r3, r1, r3
 800b38e:	4413      	add	r3, r2
 800b390:	3318      	adds	r3, #24
 800b392:	f04f 0200 	mov.w	r2, #0
 800b396:	601a      	str	r2, [r3, #0]
	pid[n].out = 0;
 800b398:	4a07      	ldr	r2, [pc, #28]	; (800b3b8 <PIDReset+0x78>)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	212c      	movs	r1, #44	; 0x2c
 800b39e:	fb01 f303 	mul.w	r3, r1, r3
 800b3a2:	4413      	add	r3, r2
 800b3a4:	3324      	adds	r3, #36	; 0x24
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	601a      	str	r2, [r3, #0]
}
 800b3aa:	bf00      	nop
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	200002c8 	.word	0x200002c8

0800b3bc <PIDCalculate>:

void PIDCalculate(int n, float T)//, float target, float current, int flag
{
 800b3bc:	b590      	push	{r4, r7, lr}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	ed87 0a00 	vstr	s0, [r7]
	pid[n].e = pid[n].target - pid[n].current;
 800b3c8:	4a64      	ldr	r2, [pc, #400]	; (800b55c <PIDCalculate+0x1a0>)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	212c      	movs	r1, #44	; 0x2c
 800b3ce:	fb01 f303 	mul.w	r3, r1, r3
 800b3d2:	4413      	add	r3, r2
 800b3d4:	3320      	adds	r3, #32
 800b3d6:	ed93 7a00 	vldr	s14, [r3]
 800b3da:	4a60      	ldr	r2, [pc, #384]	; (800b55c <PIDCalculate+0x1a0>)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	212c      	movs	r1, #44	; 0x2c
 800b3e0:	fb01 f303 	mul.w	r3, r1, r3
 800b3e4:	4413      	add	r3, r2
 800b3e6:	331c      	adds	r3, #28
 800b3e8:	edd3 7a00 	vldr	s15, [r3]
 800b3ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3f0:	4a5a      	ldr	r2, [pc, #360]	; (800b55c <PIDCalculate+0x1a0>)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	212c      	movs	r1, #44	; 0x2c
 800b3f6:	fb01 f303 	mul.w	r3, r1, r3
 800b3fa:	4413      	add	r3, r2
 800b3fc:	330c      	adds	r3, #12
 800b3fe:	edc3 7a00 	vstr	s15, [r3]
	pid[n].ei += pid[n].e * T;
 800b402:	4a56      	ldr	r2, [pc, #344]	; (800b55c <PIDCalculate+0x1a0>)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	212c      	movs	r1, #44	; 0x2c
 800b408:	fb01 f303 	mul.w	r3, r1, r3
 800b40c:	4413      	add	r3, r2
 800b40e:	3310      	adds	r3, #16
 800b410:	ed93 7a00 	vldr	s14, [r3]
 800b414:	4a51      	ldr	r2, [pc, #324]	; (800b55c <PIDCalculate+0x1a0>)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	212c      	movs	r1, #44	; 0x2c
 800b41a:	fb01 f303 	mul.w	r3, r1, r3
 800b41e:	4413      	add	r3, r2
 800b420:	330c      	adds	r3, #12
 800b422:	edd3 6a00 	vldr	s13, [r3]
 800b426:	edd7 7a00 	vldr	s15, [r7]
 800b42a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b42e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b432:	4a4a      	ldr	r2, [pc, #296]	; (800b55c <PIDCalculate+0x1a0>)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	212c      	movs	r1, #44	; 0x2c
 800b438:	fb01 f303 	mul.w	r3, r1, r3
 800b43c:	4413      	add	r3, r2
 800b43e:	3310      	adds	r3, #16
 800b440:	edc3 7a00 	vstr	s15, [r3]
	pid[n].ed = ( pid[n].e - pid[n].elast ) / T;
 800b444:	4a45      	ldr	r2, [pc, #276]	; (800b55c <PIDCalculate+0x1a0>)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	212c      	movs	r1, #44	; 0x2c
 800b44a:	fb01 f303 	mul.w	r3, r1, r3
 800b44e:	4413      	add	r3, r2
 800b450:	330c      	adds	r3, #12
 800b452:	ed93 7a00 	vldr	s14, [r3]
 800b456:	4a41      	ldr	r2, [pc, #260]	; (800b55c <PIDCalculate+0x1a0>)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	212c      	movs	r1, #44	; 0x2c
 800b45c:	fb01 f303 	mul.w	r3, r1, r3
 800b460:	4413      	add	r3, r2
 800b462:	3318      	adds	r3, #24
 800b464:	edd3 7a00 	vldr	s15, [r3]
 800b468:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b46c:	ed97 7a00 	vldr	s14, [r7]
 800b470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b474:	4a39      	ldr	r2, [pc, #228]	; (800b55c <PIDCalculate+0x1a0>)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	212c      	movs	r1, #44	; 0x2c
 800b47a:	fb01 f303 	mul.w	r3, r1, r3
 800b47e:	4413      	add	r3, r2
 800b480:	3314      	adds	r3, #20
 800b482:	edc3 7a00 	vstr	s15, [r3]
	pid[n].elast = pid[n].e;
 800b486:	4a35      	ldr	r2, [pc, #212]	; (800b55c <PIDCalculate+0x1a0>)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	212c      	movs	r1, #44	; 0x2c
 800b48c:	fb01 f303 	mul.w	r3, r1, r3
 800b490:	4413      	add	r3, r2
 800b492:	330c      	adds	r3, #12
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	4931      	ldr	r1, [pc, #196]	; (800b55c <PIDCalculate+0x1a0>)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	202c      	movs	r0, #44	; 0x2c
 800b49c:	fb00 f303 	mul.w	r3, r0, r3
 800b4a0:	440b      	add	r3, r1
 800b4a2:	3318      	adds	r3, #24
 800b4a4:	601a      	str	r2, [r3, #0]
	pid[n].out = round(pid[n].KP*pid[n].e + pid[n].KI*pid[n].ei + pid[n].KD*pid[n].ed);
 800b4a6:	4a2d      	ldr	r2, [pc, #180]	; (800b55c <PIDCalculate+0x1a0>)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	212c      	movs	r1, #44	; 0x2c
 800b4ac:	fb01 f303 	mul.w	r3, r1, r3
 800b4b0:	4413      	add	r3, r2
 800b4b2:	ed93 7a00 	vldr	s14, [r3]
 800b4b6:	4a29      	ldr	r2, [pc, #164]	; (800b55c <PIDCalculate+0x1a0>)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	212c      	movs	r1, #44	; 0x2c
 800b4bc:	fb01 f303 	mul.w	r3, r1, r3
 800b4c0:	4413      	add	r3, r2
 800b4c2:	330c      	adds	r3, #12
 800b4c4:	edd3 7a00 	vldr	s15, [r3]
 800b4c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b4cc:	4a23      	ldr	r2, [pc, #140]	; (800b55c <PIDCalculate+0x1a0>)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	212c      	movs	r1, #44	; 0x2c
 800b4d2:	fb01 f303 	mul.w	r3, r1, r3
 800b4d6:	4413      	add	r3, r2
 800b4d8:	3304      	adds	r3, #4
 800b4da:	edd3 6a00 	vldr	s13, [r3]
 800b4de:	4a1f      	ldr	r2, [pc, #124]	; (800b55c <PIDCalculate+0x1a0>)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	212c      	movs	r1, #44	; 0x2c
 800b4e4:	fb01 f303 	mul.w	r3, r1, r3
 800b4e8:	4413      	add	r3, r2
 800b4ea:	3310      	adds	r3, #16
 800b4ec:	edd3 7a00 	vldr	s15, [r3]
 800b4f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b4f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b4f8:	4a18      	ldr	r2, [pc, #96]	; (800b55c <PIDCalculate+0x1a0>)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	212c      	movs	r1, #44	; 0x2c
 800b4fe:	fb01 f303 	mul.w	r3, r1, r3
 800b502:	4413      	add	r3, r2
 800b504:	3308      	adds	r3, #8
 800b506:	edd3 6a00 	vldr	s13, [r3]
 800b50a:	4a14      	ldr	r2, [pc, #80]	; (800b55c <PIDCalculate+0x1a0>)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	212c      	movs	r1, #44	; 0x2c
 800b510:	fb01 f303 	mul.w	r3, r1, r3
 800b514:	4413      	add	r3, r2
 800b516:	3314      	adds	r3, #20
 800b518:	edd3 7a00 	vldr	s15, [r3]
 800b51c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b520:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b524:	ee17 0a90 	vmov	r0, s15
 800b528:	f7fc ff46 	bl	80083b8 <__aeabi_f2d>
 800b52c:	4603      	mov	r3, r0
 800b52e:	460c      	mov	r4, r1
 800b530:	ec44 3b10 	vmov	d0, r3, r4
 800b534:	f006 f916 	bl	8011764 <round>
 800b538:	ec54 3b10 	vmov	r3, r4, d0
 800b53c:	4618      	mov	r0, r3
 800b53e:	4621      	mov	r1, r4
 800b540:	f7fd fa42 	bl	80089c8 <__aeabi_d2iz>
 800b544:	4a05      	ldr	r2, [pc, #20]	; (800b55c <PIDCalculate+0x1a0>)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	212c      	movs	r1, #44	; 0x2c
 800b54a:	fb01 f303 	mul.w	r3, r1, r3
 800b54e:	4413      	add	r3, r2
 800b550:	3324      	adds	r3, #36	; 0x24
 800b552:	6018      	str	r0, [r3, #0]
}
 800b554:	bf00      	nop
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd90      	pop	{r4, r7, pc}
 800b55c:	200002c8 	.word	0x200002c8

0800b560 <PIDInput>:
	*output = pid[n].out;
}
//pid制御は現在値と目標値から、出力するべき値を計算するもの。前回の値の保存と積算用の変数が必要なので、独立させるかポインタかフラグで初期化

void PIDInput(int n, float target, float current)
{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	ed87 0a02 	vstr	s0, [r7, #8]
 800b56c:	edc7 0a01 	vstr	s1, [r7, #4]
	pid[n].target = target;
 800b570:	4a0b      	ldr	r2, [pc, #44]	; (800b5a0 <PIDInput+0x40>)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	212c      	movs	r1, #44	; 0x2c
 800b576:	fb01 f303 	mul.w	r3, r1, r3
 800b57a:	4413      	add	r3, r2
 800b57c:	3320      	adds	r3, #32
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	601a      	str	r2, [r3, #0]
	pid[n].current = current;
 800b582:	4a07      	ldr	r2, [pc, #28]	; (800b5a0 <PIDInput+0x40>)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	212c      	movs	r1, #44	; 0x2c
 800b588:	fb01 f303 	mul.w	r3, r1, r3
 800b58c:	4413      	add	r3, r2
 800b58e:	331c      	adds	r3, #28
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	601a      	str	r2, [r3, #0]
}
 800b594:	bf00      	nop
 800b596:	3714      	adds	r7, #20
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr
 800b5a0:	200002c8 	.word	0x200002c8

0800b5a4 <PIDControl>:
int PIDControl(int n, float T, float target, float current)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	ed87 0a02 	vstr	s0, [r7, #8]
 800b5b0:	edc7 0a01 	vstr	s1, [r7, #4]
 800b5b4:	ed87 1a00 	vstr	s2, [r7]
	PIDInput( n, target, current);
 800b5b8:	edd7 0a00 	vldr	s1, [r7]
 800b5bc:	ed97 0a01 	vldr	s0, [r7, #4]
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f7ff ffcd 	bl	800b560 <PIDInput>
	PIDCalculate( n, T );
 800b5c6:	ed97 0a02 	vldr	s0, [r7, #8]
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	f7ff fef6 	bl	800b3bc <PIDCalculate>
	//出力の前に全部0にする処理をフラグで
	if(pid[n].flag == 0)
 800b5d0:	4a0c      	ldr	r2, [pc, #48]	; (800b604 <PIDControl+0x60>)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	212c      	movs	r1, #44	; 0x2c
 800b5d6:	fb01 f303 	mul.w	r3, r1, r3
 800b5da:	4413      	add	r3, r2
 800b5dc:	3328      	adds	r3, #40	; 0x28
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d102      	bne.n	800b5ea <PIDControl+0x46>
	{
		PIDReset(n);
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f7ff feab 	bl	800b340 <PIDReset>
	}
	//*output = pid[n].out;
	//PIDOutput( n, output );
	return pid[n].out;
 800b5ea:	4a06      	ldr	r2, [pc, #24]	; (800b604 <PIDControl+0x60>)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	212c      	movs	r1, #44	; 0x2c
 800b5f0:	fb01 f303 	mul.w	r3, r1, r3
 800b5f4:	4413      	add	r3, r2
 800b5f6:	3324      	adds	r3, #36	; 0x24
 800b5f8:	681b      	ldr	r3, [r3, #0]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	200002c8 	.word	0x200002c8

0800b608 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
float photo[4];

//led_driver
void Signal(int mode)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
	for(int i=0; i < 5; i++)
 800b610:	2300      	movs	r3, #0
 800b612:	60fb      	str	r3, [r7, #12]
 800b614:	e00e      	b.n	800b634 <Signal+0x2c>
	{
		ChangeLED(mode);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f001 fc28 	bl	800ce6c <ChangeLED>
		HAL_Delay(100);
 800b61c:	2064      	movs	r0, #100	; 0x64
 800b61e:	f001 fdfd 	bl	800d21c <HAL_Delay>
		ChangeLED(0);
 800b622:	2000      	movs	r0, #0
 800b624:	f001 fc22 	bl	800ce6c <ChangeLED>
		HAL_Delay(100);
 800b628:	2064      	movs	r0, #100	; 0x64
 800b62a:	f001 fdf7 	bl	800d21c <HAL_Delay>
	for(int i=0; i < 5; i++)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	3301      	adds	r3, #1
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2b04      	cmp	r3, #4
 800b638:	dded      	ble.n	800b616 <Signal+0xe>
	}
}
 800b63a:	bf00      	nop
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
	...

0800b644 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800b64c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800b698 <BatteryCheck+0x54>
 800b650:	eddf 0a12 	vldr	s1, [pc, #72]	; 800b69c <BatteryCheck+0x58>
 800b654:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f7fe fb45 	bl	8009ce8 <ADCToBatteryVoltage>
 800b65e:	ed87 0a05 	vstr	s0, [r7, #20]

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800b662:	2103      	movs	r1, #3
 800b664:	2002      	movs	r0, #2
 800b666:	f7fe fb69 	bl	8009d3c <IntegerPower>
 800b66a:	6138      	str	r0, [r7, #16]

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800b66c:	6938      	ldr	r0, [r7, #16]
 800b66e:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800b6a0 <BatteryCheck+0x5c>
 800b672:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800b6a4 <BatteryCheck+0x60>
 800b676:	ed97 0a05 	vldr	s0, [r7, #20]
 800b67a:	f7fe fb7c 	bl	8009d76 <GetBatteryLevel>
 800b67e:	60f8      	str	r0, [r7, #12]

	printf("%d\r\n", battery_level);
 800b680:	68f9      	ldr	r1, [r7, #12]
 800b682:	4809      	ldr	r0, [pc, #36]	; (800b6a8 <BatteryCheck+0x64>)
 800b684:	f006 fd52 	bl	801212c <iprintf>
	Signal( battery_level );
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f7ff ffbd 	bl	800b608 <Signal>
}
 800b68e:	bf00      	nop
 800b690:	3718      	adds	r7, #24
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	45800000 	.word	0x45800000
 800b69c:	40533333 	.word	0x40533333
 800b6a0:	41066666 	.word	0x41066666
 800b6a4:	40e66666 	.word	0x40e66666
 800b6a8:	08014004 	.word	0x08014004

0800b6ac <ModeSelect>:
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。


void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800b6ac:	b590      	push	{r4, r7, lr}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	603a      	str	r2, [r7, #0]
 800b6b6:	71fb      	strb	r3, [r7, #7]
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	71bb      	strb	r3, [r7, #6]
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ
	EmitterON();
 800b6bc:	f001 fbba 	bl	800ce34 <EmitterON>
	ADCStart();
 800b6c0:	f001 fb04 	bl	800cccc <ADCStart>
	HAL_TIM_Base_Start_IT(&htim8);
 800b6c4:	4840      	ldr	r0, [pc, #256]	; (800b7c8 <ModeSelect+0x11c>)
 800b6c6:	f004 f88a 	bl	800f7de <HAL_TIM_Base_Start_IT>
	//壁センサの値を持ってくる。
	//エンコーダ開始。初期値セット込み
	EncoderStart();
 800b6ca:	f001 fb93 	bl	800cdf4 <EncoderStart>

	//while中で選択
	*pMode=min;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	79fa      	ldrb	r2, [r7, #7]
 800b6d2:	701a      	strb	r2, [r3, #0]

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE_L);
 800b6d4:	f247 512f 	movw	r1, #29999	; 0x752f
 800b6d8:	483c      	ldr	r0, [pc, #240]	; (800b7cc <ModeSelect+0x120>)
 800b6da:	f7fe fa77 	bl	8009bcc <InitPulse>

	int ENC3_LEFT;
	while(photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 800b6de:	e05c      	b.n	800b79a <ModeSelect+0xee>
	{
		printf("photo[FR] : %f\r\n", photo[FR]);
 800b6e0:	4b3b      	ldr	r3, [pc, #236]	; (800b7d0 <ModeSelect+0x124>)
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7fc fe67 	bl	80083b8 <__aeabi_f2d>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	460c      	mov	r4, r1
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	4623      	mov	r3, r4
 800b6f2:	4838      	ldr	r0, [pc, #224]	; (800b7d4 <ModeSelect+0x128>)
 800b6f4:	f006 fd1a 	bl	801212c <iprintf>
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800b6f8:	4b37      	ldr	r3, [pc, #220]	; (800b7d8 <ModeSelect+0x12c>)
 800b6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fc:	60fb      	str	r3, [r7, #12]

		  if(30000 -1 + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f24b 522e 	movw	r2, #46382	; 0xb52e
 800b704:	4293      	cmp	r3, r2
 800b706:	dd21      	ble.n	800b74c <ModeSelect+0xa0>
		  {
		  	  *pMode += 1;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	f993 3000 	ldrsb.w	r3, [r3]
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	3301      	adds	r3, #1
 800b712:	b2db      	uxtb	r3, r3
 800b714:	b25a      	sxtb	r2, r3
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode > max)
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	f993 3000 	ldrsb.w	r3, [r3]
 800b720:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800b724:	429a      	cmp	r2, r3
 800b726:	da02      	bge.n	800b72e <ModeSelect+0x82>
		  	  {
		  		  *pMode = min;
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	79fa      	ldrb	r2, [r7, #7]
 800b72c:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	f993 3000 	ldrsb.w	r3, [r3]
 800b734:	4618      	mov	r0, r3
 800b736:	f001 fb99 	bl	800ce6c <ChangeLED>
		  	  InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE_L);
 800b73a:	f247 512f 	movw	r1, #29999	; 0x752f
 800b73e:	4823      	ldr	r0, [pc, #140]	; (800b7cc <ModeSelect+0x120>)
 800b740:	f7fe fa44 	bl	8009bcc <InitPulse>
		  	  HAL_Delay(500);
 800b744:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b748:	f001 fd68 	bl	800d21c <HAL_Delay>

		  }
		  if(30000 -1 - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f243 522f 	movw	r2, #13615	; 0x352f
 800b752:	4293      	cmp	r3, r2
 800b754:	dc21      	bgt.n	800b79a <ModeSelect+0xee>
		  {
		  	  *pMode -= 1;
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	f993 3000 	ldrsb.w	r3, [r3]
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	3b01      	subs	r3, #1
 800b760:	b2db      	uxtb	r3, r3
 800b762:	b25a      	sxtb	r2, r3
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode < min)
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	f993 3000 	ldrsb.w	r3, [r3]
 800b76e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800b772:	429a      	cmp	r2, r3
 800b774:	dd02      	ble.n	800b77c <ModeSelect+0xd0>
		  	  {
		  	  		  *pMode = max;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	79ba      	ldrb	r2, [r7, #6]
 800b77a:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	f993 3000 	ldrsb.w	r3, [r3]
 800b782:	4618      	mov	r0, r3
 800b784:	f001 fb72 	bl	800ce6c <ChangeLED>
		  	  InitPulse( (int *)&(TIM3->CNT), INITIAL_PULSE_L);
 800b788:	f247 512f 	movw	r1, #29999	; 0x752f
 800b78c:	480f      	ldr	r0, [pc, #60]	; (800b7cc <ModeSelect+0x120>)
 800b78e:	f7fe fa1d 	bl	8009bcc <InitPulse>
		  	  HAL_Delay(500);
 800b792:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b796:	f001 fd41 	bl	800d21c <HAL_Delay>
	while(photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 800b79a:	4b0d      	ldr	r3, [pc, #52]	; (800b7d0 <ModeSelect+0x124>)
 800b79c:	edd3 7a03 	vldr	s15, [r3, #12]
 800b7a0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800b7dc <ModeSelect+0x130>
 800b7a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ac:	d498      	bmi.n	800b6e0 <ModeSelect+0x34>
		  }
	}

	EmitterOFF();
 800b7ae:	f001 fb4f 	bl	800ce50 <EmitterOFF>
	ADCStop();
 800b7b2:	f001 faab 	bl	800cd0c <ADCStop>
	HAL_TIM_Base_Stop_IT(&htim8);
 800b7b6:	4804      	ldr	r0, [pc, #16]	; (800b7c8 <ModeSelect+0x11c>)
 800b7b8:	f004 f835 	bl	800f826 <HAL_TIM_Base_Stop_IT>

	//エンコーダストップ
	EncoderStop();
 800b7bc:	f001 fb2a 	bl	800ce14 <EncoderStop>

	//モード選択後どうするか
}
 800b7c0:	bf00      	nop
 800b7c2:	3714      	adds	r7, #20
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd90      	pop	{r4, r7, pc}
 800b7c8:	20000590 	.word	0x20000590
 800b7cc:	40000424 	.word	0x40000424
 800b7d0:	20000244 	.word	0x20000244
 800b7d4:	0801400c 	.word	0x0801400c
 800b7d8:	40000400 	.word	0x40000400
 800b7dc:	437a0000 	.word	0x437a0000

0800b7e0 <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800b7e8:	1d39      	adds	r1, r7, #4
 800b7ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	4803      	ldr	r0, [pc, #12]	; (800b800 <__io_putchar+0x20>)
 800b7f2:	f005 fb57 	bl	8010ea4 <HAL_UART_Transmit>
	return ch;
 800b7f6:	687b      	ldr	r3, [r7, #4]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3708      	adds	r7, #8
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	20000778 	.word	0x20000778

0800b804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b80a:	f001 fc95 	bl	800d138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b80e:	f000 f85f 	bl	800b8d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b812:	f000 fca9 	bl	800c168 <MX_GPIO_Init>
  MX_DMA_Init();
 800b816:	f000 fc7f 	bl	800c118 <MX_DMA_Init>
  MX_ADC1_Init();
 800b81a:	f000 f8c3 	bl	800b9a4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800b81e:	f000 f92f 	bl	800ba80 <MX_ADC2_Init>
  MX_TIM3_Init();
 800b822:	f000 fa89 	bl	800bd38 <MX_TIM3_Init>
  MX_TIM2_Init();
 800b826:	f000 fa11 	bl	800bc4c <MX_TIM2_Init>
  MX_SPI3_Init();
 800b82a:	f000 f989 	bl	800bb40 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800b82e:	f000 fc49 	bl	800c0c4 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800b832:	f000 fb29 	bl	800be88 <MX_TIM5_Init>
  MX_TIM4_Init();
 800b836:	f000 fad3 	bl	800bde0 <MX_TIM4_Init>
  MX_TIM8_Init();
 800b83a:	f000 fb9b 	bl	800bf74 <MX_TIM8_Init>
  MX_TIM1_Init();
 800b83e:	f000 f9b5 	bl	800bbac <MX_TIM1_Init>
//
//  while(1)
//  {
//
//  }
  ADCStart();
 800b842:	f001 fa43 	bl	800cccc <ADCStart>
  HAL_Delay(500);
 800b846:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b84a:	f001 fce7 	bl	800d21c <HAL_Delay>

  BatteryCheck( (int)adc1[2] );
 800b84e:	4b1d      	ldr	r3, [pc, #116]	; (800b8c4 <main+0xc0>)
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	4618      	mov	r0, r3
 800b854:	f7ff fef6 	bl	800b644 <BatteryCheck>

  int8_t mode=0;
 800b858:	2300      	movs	r3, #0
 800b85a:	71fb      	strb	r3, [r7, #7]
  	  printf("mode : %d\r\n", mode);
 800b85c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b860:	4619      	mov	r1, r3
 800b862:	4819      	ldr	r0, [pc, #100]	; (800b8c8 <main+0xc4>)
 800b864:	f006 fc62 	bl	801212c <iprintf>
  ModeSelect( 0, 7, &mode);
 800b868:	1dfb      	adds	r3, r7, #7
 800b86a:	461a      	mov	r2, r3
 800b86c:	2107      	movs	r1, #7
 800b86e:	2000      	movs	r0, #0
 800b870:	f7ff ff1c 	bl	800b6ac <ModeSelect>
  Signal( mode );
 800b874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b878:	4618      	mov	r0, r3
 800b87a:	f7ff fec5 	bl	800b608 <Signal>
  	  printf("ドン\r\n");
 800b87e:	4813      	ldr	r0, [pc, #76]	; (800b8cc <main+0xc8>)
 800b880:	f006 fcc8 	bl	8012214 <puts>

  while (1)
  {

	  switch( mode )
 800b884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b888:	2b07      	cmp	r3, #7
 800b88a:	d819      	bhi.n	800b8c0 <main+0xbc>
 800b88c:	a201      	add	r2, pc, #4	; (adr r2, 800b894 <main+0x90>)
 800b88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b892:	bf00      	nop
 800b894:	0800b8c1 	.word	0x0800b8c1
 800b898:	0800b8c1 	.word	0x0800b8c1
 800b89c:	0800b8c1 	.word	0x0800b8c1
 800b8a0:	0800b8c1 	.word	0x0800b8c1
 800b8a4:	0800b8c1 	.word	0x0800b8c1
 800b8a8:	0800b8c1 	.word	0x0800b8c1
 800b8ac:	0800b8b5 	.word	0x0800b8b5
 800b8b0:	0800b8bb 	.word	0x0800b8bb
	  case 4:
		  break;
	  case 5:
		  break;
	  case 6:
		  Explore();
 800b8b4:	f7ff fbe4 	bl	800b080 <Explore>
		  break;
 800b8b8:	e003      	b.n	800b8c2 <main+0xbe>
	  case 7:
		  WritingFree();
 800b8ba:	f7ff f9eb 	bl	800ac94 <WritingFree>
		  break;
 800b8be:	e000      	b.n	800b8c2 <main+0xbe>
	  default :
		  break;
 800b8c0:	bf00      	nop
	  switch( mode )
 800b8c2:	e7df      	b.n	800b884 <main+0x80>
 800b8c4:	2000042c 	.word	0x2000042c
 800b8c8:	08014020 	.word	0x08014020
 800b8cc:	0801402c 	.word	0x0801402c

0800b8d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b094      	sub	sp, #80	; 0x50
 800b8d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b8d6:	f107 0320 	add.w	r3, r7, #32
 800b8da:	2230      	movs	r2, #48	; 0x30
 800b8dc:	2100      	movs	r1, #0
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f005 ffbf 	bl	8011862 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b8e4:	f107 030c 	add.w	r3, r7, #12
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	601a      	str	r2, [r3, #0]
 800b8ec:	605a      	str	r2, [r3, #4]
 800b8ee:	609a      	str	r2, [r3, #8]
 800b8f0:	60da      	str	r2, [r3, #12]
 800b8f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	60bb      	str	r3, [r7, #8]
 800b8f8:	4b28      	ldr	r3, [pc, #160]	; (800b99c <SystemClock_Config+0xcc>)
 800b8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fc:	4a27      	ldr	r2, [pc, #156]	; (800b99c <SystemClock_Config+0xcc>)
 800b8fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b902:	6413      	str	r3, [r2, #64]	; 0x40
 800b904:	4b25      	ldr	r3, [pc, #148]	; (800b99c <SystemClock_Config+0xcc>)
 800b906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b90c:	60bb      	str	r3, [r7, #8]
 800b90e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b910:	2300      	movs	r3, #0
 800b912:	607b      	str	r3, [r7, #4]
 800b914:	4b22      	ldr	r3, [pc, #136]	; (800b9a0 <SystemClock_Config+0xd0>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a21      	ldr	r2, [pc, #132]	; (800b9a0 <SystemClock_Config+0xd0>)
 800b91a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b91e:	6013      	str	r3, [r2, #0]
 800b920:	4b1f      	ldr	r3, [pc, #124]	; (800b9a0 <SystemClock_Config+0xd0>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b928:	607b      	str	r3, [r7, #4]
 800b92a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b92c:	2301      	movs	r3, #1
 800b92e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b934:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b936:	2302      	movs	r3, #2
 800b938:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b93a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b93e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800b940:	2304      	movs	r3, #4
 800b942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800b944:	23a8      	movs	r3, #168	; 0xa8
 800b946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b948:	2302      	movs	r3, #2
 800b94a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800b94c:	2304      	movs	r3, #4
 800b94e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b950:	f107 0320 	add.w	r3, r7, #32
 800b954:	4618      	mov	r0, r3
 800b956:	f003 fa51 	bl	800edfc <HAL_RCC_OscConfig>
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d001      	beq.n	800b964 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800b960:	f000 fccc 	bl	800c2fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b964:	230f      	movs	r3, #15
 800b966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b968:	2302      	movs	r3, #2
 800b96a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b96c:	2300      	movs	r3, #0
 800b96e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800b970:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800b974:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b97a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800b97c:	f107 030c 	add.w	r3, r7, #12
 800b980:	2105      	movs	r1, #5
 800b982:	4618      	mov	r0, r3
 800b984:	f003 fcaa 	bl	800f2dc <HAL_RCC_ClockConfig>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800b98e:	f000 fcb5 	bl	800c2fc <Error_Handler>
  }
}
 800b992:	bf00      	nop
 800b994:	3750      	adds	r7, #80	; 0x50
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	40023800 	.word	0x40023800
 800b9a0:	40007000 	.word	0x40007000

0800b9a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800b9aa:	463b      	mov	r3, r7
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	601a      	str	r2, [r3, #0]
 800b9b0:	605a      	str	r2, [r3, #4]
 800b9b2:	609a      	str	r2, [r3, #8]
 800b9b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800b9b6:	4b2f      	ldr	r3, [pc, #188]	; (800ba74 <MX_ADC1_Init+0xd0>)
 800b9b8:	4a2f      	ldr	r2, [pc, #188]	; (800ba78 <MX_ADC1_Init+0xd4>)
 800b9ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800b9bc:	4b2d      	ldr	r3, [pc, #180]	; (800ba74 <MX_ADC1_Init+0xd0>)
 800b9be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b9c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800b9c4:	4b2b      	ldr	r3, [pc, #172]	; (800ba74 <MX_ADC1_Init+0xd0>)
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800b9ca:	4b2a      	ldr	r3, [pc, #168]	; (800ba74 <MX_ADC1_Init+0xd0>)
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800b9d0:	4b28      	ldr	r3, [pc, #160]	; (800ba74 <MX_ADC1_Init+0xd0>)
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b9d6:	4b27      	ldr	r3, [pc, #156]	; (800ba74 <MX_ADC1_Init+0xd0>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b9de:	4b25      	ldr	r3, [pc, #148]	; (800ba74 <MX_ADC1_Init+0xd0>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b9e4:	4b23      	ldr	r3, [pc, #140]	; (800ba74 <MX_ADC1_Init+0xd0>)
 800b9e6:	4a25      	ldr	r2, [pc, #148]	; (800ba7c <MX_ADC1_Init+0xd8>)
 800b9e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b9ea:	4b22      	ldr	r3, [pc, #136]	; (800ba74 <MX_ADC1_Init+0xd0>)
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800b9f0:	4b20      	ldr	r3, [pc, #128]	; (800ba74 <MX_ADC1_Init+0xd0>)
 800b9f2:	2203      	movs	r2, #3
 800b9f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800b9f6:	4b1f      	ldr	r3, [pc, #124]	; (800ba74 <MX_ADC1_Init+0xd0>)
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b9fe:	4b1d      	ldr	r3, [pc, #116]	; (800ba74 <MX_ADC1_Init+0xd0>)
 800ba00:	2201      	movs	r2, #1
 800ba02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ba04:	481b      	ldr	r0, [pc, #108]	; (800ba74 <MX_ADC1_Init+0xd0>)
 800ba06:	f001 fc2b 	bl	800d260 <HAL_ADC_Init>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d001      	beq.n	800ba14 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800ba10:	f000 fc74 	bl	800c2fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800ba14:	230a      	movs	r3, #10
 800ba16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800ba1c:	2303      	movs	r3, #3
 800ba1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ba20:	463b      	mov	r3, r7
 800ba22:	4619      	mov	r1, r3
 800ba24:	4813      	ldr	r0, [pc, #76]	; (800ba74 <MX_ADC1_Init+0xd0>)
 800ba26:	f001 ff03 	bl	800d830 <HAL_ADC_ConfigChannel>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800ba30:	f000 fc64 	bl	800c2fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800ba34:	230e      	movs	r3, #14
 800ba36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800ba38:	2302      	movs	r3, #2
 800ba3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ba3c:	463b      	mov	r3, r7
 800ba3e:	4619      	mov	r1, r3
 800ba40:	480c      	ldr	r0, [pc, #48]	; (800ba74 <MX_ADC1_Init+0xd0>)
 800ba42:	f001 fef5 	bl	800d830 <HAL_ADC_ConfigChannel>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d001      	beq.n	800ba50 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800ba4c:	f000 fc56 	bl	800c2fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800ba50:	2309      	movs	r3, #9
 800ba52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800ba54:	2303      	movs	r3, #3
 800ba56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ba58:	463b      	mov	r3, r7
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	4805      	ldr	r0, [pc, #20]	; (800ba74 <MX_ADC1_Init+0xd0>)
 800ba5e:	f001 fee7 	bl	800d830 <HAL_ADC_ConfigChannel>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d001      	beq.n	800ba6c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800ba68:	f000 fc48 	bl	800c2fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800ba6c:	bf00      	nop
 800ba6e:	3710      	adds	r7, #16
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	20000730 	.word	0x20000730
 800ba78:	40012000 	.word	0x40012000
 800ba7c:	0f000001 	.word	0x0f000001

0800ba80 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ba86:	463b      	mov	r3, r7
 800ba88:	2200      	movs	r2, #0
 800ba8a:	601a      	str	r2, [r3, #0]
 800ba8c:	605a      	str	r2, [r3, #4]
 800ba8e:	609a      	str	r2, [r3, #8]
 800ba90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800ba92:	4b28      	ldr	r3, [pc, #160]	; (800bb34 <MX_ADC2_Init+0xb4>)
 800ba94:	4a28      	ldr	r2, [pc, #160]	; (800bb38 <MX_ADC2_Init+0xb8>)
 800ba96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800ba98:	4b26      	ldr	r3, [pc, #152]	; (800bb34 <MX_ADC2_Init+0xb4>)
 800ba9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ba9e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800baa0:	4b24      	ldr	r3, [pc, #144]	; (800bb34 <MX_ADC2_Init+0xb4>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800baa6:	4b23      	ldr	r3, [pc, #140]	; (800bb34 <MX_ADC2_Init+0xb4>)
 800baa8:	2201      	movs	r2, #1
 800baaa:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800baac:	4b21      	ldr	r3, [pc, #132]	; (800bb34 <MX_ADC2_Init+0xb4>)
 800baae:	2201      	movs	r2, #1
 800bab0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800bab2:	4b20      	ldr	r3, [pc, #128]	; (800bb34 <MX_ADC2_Init+0xb4>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800baba:	4b1e      	ldr	r3, [pc, #120]	; (800bb34 <MX_ADC2_Init+0xb4>)
 800babc:	2200      	movs	r2, #0
 800babe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bac0:	4b1c      	ldr	r3, [pc, #112]	; (800bb34 <MX_ADC2_Init+0xb4>)
 800bac2:	4a1e      	ldr	r2, [pc, #120]	; (800bb3c <MX_ADC2_Init+0xbc>)
 800bac4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bac6:	4b1b      	ldr	r3, [pc, #108]	; (800bb34 <MX_ADC2_Init+0xb4>)
 800bac8:	2200      	movs	r2, #0
 800baca:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800bacc:	4b19      	ldr	r3, [pc, #100]	; (800bb34 <MX_ADC2_Init+0xb4>)
 800bace:	2202      	movs	r2, #2
 800bad0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800bad2:	4b18      	ldr	r3, [pc, #96]	; (800bb34 <MX_ADC2_Init+0xb4>)
 800bad4:	2201      	movs	r2, #1
 800bad6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bada:	4b16      	ldr	r3, [pc, #88]	; (800bb34 <MX_ADC2_Init+0xb4>)
 800badc:	2201      	movs	r2, #1
 800bade:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800bae0:	4814      	ldr	r0, [pc, #80]	; (800bb34 <MX_ADC2_Init+0xb4>)
 800bae2:	f001 fbbd 	bl	800d260 <HAL_ADC_Init>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d001      	beq.n	800baf0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800baec:	f000 fc06 	bl	800c2fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800baf0:	230b      	movs	r3, #11
 800baf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800baf4:	2301      	movs	r3, #1
 800baf6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800baf8:	2303      	movs	r3, #3
 800bafa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800bafc:	463b      	mov	r3, r7
 800bafe:	4619      	mov	r1, r3
 800bb00:	480c      	ldr	r0, [pc, #48]	; (800bb34 <MX_ADC2_Init+0xb4>)
 800bb02:	f001 fe95 	bl	800d830 <HAL_ADC_ConfigChannel>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d001      	beq.n	800bb10 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800bb0c:	f000 fbf6 	bl	800c2fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800bb10:	230f      	movs	r3, #15
 800bb12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800bb14:	2302      	movs	r3, #2
 800bb16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800bb18:	463b      	mov	r3, r7
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	4805      	ldr	r0, [pc, #20]	; (800bb34 <MX_ADC2_Init+0xb4>)
 800bb1e:	f001 fe87 	bl	800d830 <HAL_ADC_ConfigChannel>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d001      	beq.n	800bb2c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800bb28:	f000 fbe8 	bl	800c2fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800bb2c:	bf00      	nop
 800bb2e:	3710      	adds	r7, #16
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	20000610 	.word	0x20000610
 800bb38:	40012100 	.word	0x40012100
 800bb3c:	0f000001 	.word	0x0f000001

0800bb40 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800bb44:	4b17      	ldr	r3, [pc, #92]	; (800bba4 <MX_SPI3_Init+0x64>)
 800bb46:	4a18      	ldr	r2, [pc, #96]	; (800bba8 <MX_SPI3_Init+0x68>)
 800bb48:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800bb4a:	4b16      	ldr	r3, [pc, #88]	; (800bba4 <MX_SPI3_Init+0x64>)
 800bb4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bb50:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800bb52:	4b14      	ldr	r3, [pc, #80]	; (800bba4 <MX_SPI3_Init+0x64>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800bb58:	4b12      	ldr	r3, [pc, #72]	; (800bba4 <MX_SPI3_Init+0x64>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800bb5e:	4b11      	ldr	r3, [pc, #68]	; (800bba4 <MX_SPI3_Init+0x64>)
 800bb60:	2202      	movs	r2, #2
 800bb62:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800bb64:	4b0f      	ldr	r3, [pc, #60]	; (800bba4 <MX_SPI3_Init+0x64>)
 800bb66:	2201      	movs	r2, #1
 800bb68:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800bb6a:	4b0e      	ldr	r3, [pc, #56]	; (800bba4 <MX_SPI3_Init+0x64>)
 800bb6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb70:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800bb72:	4b0c      	ldr	r3, [pc, #48]	; (800bba4 <MX_SPI3_Init+0x64>)
 800bb74:	2228      	movs	r2, #40	; 0x28
 800bb76:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bb78:	4b0a      	ldr	r3, [pc, #40]	; (800bba4 <MX_SPI3_Init+0x64>)
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800bb7e:	4b09      	ldr	r3, [pc, #36]	; (800bba4 <MX_SPI3_Init+0x64>)
 800bb80:	2200      	movs	r2, #0
 800bb82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb84:	4b07      	ldr	r3, [pc, #28]	; (800bba4 <MX_SPI3_Init+0x64>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800bb8a:	4b06      	ldr	r3, [pc, #24]	; (800bba4 <MX_SPI3_Init+0x64>)
 800bb8c:	220a      	movs	r2, #10
 800bb8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800bb90:	4804      	ldr	r0, [pc, #16]	; (800bba4 <MX_SPI3_Init+0x64>)
 800bb92:	f003 fd95 	bl	800f6c0 <HAL_SPI_Init>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d001      	beq.n	800bba0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800bb9c:	f000 fbae 	bl	800c2fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800bba0:	bf00      	nop
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	200006d8 	.word	0x200006d8
 800bba8:	40003c00 	.word	0x40003c00

0800bbac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b086      	sub	sp, #24
 800bbb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bbb2:	f107 0308 	add.w	r3, r7, #8
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	601a      	str	r2, [r3, #0]
 800bbba:	605a      	str	r2, [r3, #4]
 800bbbc:	609a      	str	r2, [r3, #8]
 800bbbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bbc0:	463b      	mov	r3, r7
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800bbc8:	4b1e      	ldr	r3, [pc, #120]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bbca:	4a1f      	ldr	r2, [pc, #124]	; (800bc48 <MX_TIM1_Init+0x9c>)
 800bbcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800bbce:	4b1d      	ldr	r3, [pc, #116]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bbd0:	22a7      	movs	r2, #167	; 0xa7
 800bbd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bbd4:	4b1b      	ldr	r3, [pc, #108]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800bbda:	4b1a      	ldr	r3, [pc, #104]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bbdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800bbe0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bbe2:	4b18      	ldr	r3, [pc, #96]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800bbe8:	4b16      	ldr	r3, [pc, #88]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bbea:	2200      	movs	r2, #0
 800bbec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bbee:	4b15      	ldr	r3, [pc, #84]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800bbf4:	4813      	ldr	r0, [pc, #76]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bbf6:	f003 fdc7 	bl	800f788 <HAL_TIM_Base_Init>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d001      	beq.n	800bc04 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800bc00:	f000 fb7c 	bl	800c2fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bc04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800bc0a:	f107 0308 	add.w	r3, r7, #8
 800bc0e:	4619      	mov	r1, r3
 800bc10:	480c      	ldr	r0, [pc, #48]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bc12:	f004 fb39 	bl	8010288 <HAL_TIM_ConfigClockSource>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d001      	beq.n	800bc20 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800bc1c:	f000 fb6e 	bl	800c2fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bc20:	2300      	movs	r3, #0
 800bc22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bc24:	2300      	movs	r3, #0
 800bc26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800bc28:	463b      	mov	r3, r7
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	4805      	ldr	r0, [pc, #20]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bc2e:	f004 ffe5 	bl	8010bfc <HAL_TIMEx_MasterConfigSynchronization>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d001      	beq.n	800bc3c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800bc38:	f000 fb60 	bl	800c2fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800bc3c:	bf00      	nop
 800bc3e:	3718      	adds	r7, #24
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	20000818 	.word	0x20000818
 800bc48:	40010000 	.word	0x40010000

0800bc4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b08e      	sub	sp, #56	; 0x38
 800bc50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bc52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bc56:	2200      	movs	r2, #0
 800bc58:	601a      	str	r2, [r3, #0]
 800bc5a:	605a      	str	r2, [r3, #4]
 800bc5c:	609a      	str	r2, [r3, #8]
 800bc5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bc60:	f107 0320 	add.w	r3, r7, #32
 800bc64:	2200      	movs	r2, #0
 800bc66:	601a      	str	r2, [r3, #0]
 800bc68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800bc6a:	1d3b      	adds	r3, r7, #4
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	601a      	str	r2, [r3, #0]
 800bc70:	605a      	str	r2, [r3, #4]
 800bc72:	609a      	str	r2, [r3, #8]
 800bc74:	60da      	str	r2, [r3, #12]
 800bc76:	611a      	str	r2, [r3, #16]
 800bc78:	615a      	str	r2, [r3, #20]
 800bc7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800bc7c:	4b2d      	ldr	r3, [pc, #180]	; (800bd34 <MX_TIM2_Init+0xe8>)
 800bc7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bc82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800bc84:	4b2b      	ldr	r3, [pc, #172]	; (800bd34 <MX_TIM2_Init+0xe8>)
 800bc86:	2200      	movs	r2, #0
 800bc88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bc8a:	4b2a      	ldr	r3, [pc, #168]	; (800bd34 <MX_TIM2_Init+0xe8>)
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800bc90:	4b28      	ldr	r3, [pc, #160]	; (800bd34 <MX_TIM2_Init+0xe8>)
 800bc92:	f241 0267 	movw	r2, #4199	; 0x1067
 800bc96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bc98:	4b26      	ldr	r3, [pc, #152]	; (800bd34 <MX_TIM2_Init+0xe8>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bc9e:	4b25      	ldr	r3, [pc, #148]	; (800bd34 <MX_TIM2_Init+0xe8>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800bca4:	4823      	ldr	r0, [pc, #140]	; (800bd34 <MX_TIM2_Init+0xe8>)
 800bca6:	f003 fd6f 	bl	800f788 <HAL_TIM_Base_Init>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800bcb0:	f000 fb24 	bl	800c2fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bcb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800bcba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	481c      	ldr	r0, [pc, #112]	; (800bd34 <MX_TIM2_Init+0xe8>)
 800bcc2:	f004 fae1 	bl	8010288 <HAL_TIM_ConfigClockSource>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d001      	beq.n	800bcd0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800bccc:	f000 fb16 	bl	800c2fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800bcd0:	4818      	ldr	r0, [pc, #96]	; (800bd34 <MX_TIM2_Init+0xe8>)
 800bcd2:	f003 ff27 	bl	800fb24 <HAL_TIM_PWM_Init>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d001      	beq.n	800bce0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800bcdc:	f000 fb0e 	bl	800c2fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bce0:	2300      	movs	r3, #0
 800bce2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bce4:	2300      	movs	r3, #0
 800bce6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800bce8:	f107 0320 	add.w	r3, r7, #32
 800bcec:	4619      	mov	r1, r3
 800bcee:	4811      	ldr	r0, [pc, #68]	; (800bd34 <MX_TIM2_Init+0xe8>)
 800bcf0:	f004 ff84 	bl	8010bfc <HAL_TIMEx_MasterConfigSynchronization>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800bcfa:	f000 faff 	bl	800c2fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bcfe:	2360      	movs	r3, #96	; 0x60
 800bd00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800bd02:	2300      	movs	r3, #0
 800bd04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bd06:	2300      	movs	r3, #0
 800bd08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800bd0e:	1d3b      	adds	r3, r7, #4
 800bd10:	220c      	movs	r2, #12
 800bd12:	4619      	mov	r1, r3
 800bd14:	4807      	ldr	r0, [pc, #28]	; (800bd34 <MX_TIM2_Init+0xe8>)
 800bd16:	f004 f9f1 	bl	80100fc <HAL_TIM_PWM_ConfigChannel>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d001      	beq.n	800bd24 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800bd20:	f000 faec 	bl	800c2fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800bd24:	4803      	ldr	r0, [pc, #12]	; (800bd34 <MX_TIM2_Init+0xe8>)
 800bd26:	f000 fd89 	bl	800c83c <HAL_TIM_MspPostInit>

}
 800bd2a:	bf00      	nop
 800bd2c:	3738      	adds	r7, #56	; 0x38
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	20000858 	.word	0x20000858

0800bd38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b08c      	sub	sp, #48	; 0x30
 800bd3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800bd3e:	f107 030c 	add.w	r3, r7, #12
 800bd42:	2224      	movs	r2, #36	; 0x24
 800bd44:	2100      	movs	r1, #0
 800bd46:	4618      	mov	r0, r3
 800bd48:	f005 fd8b 	bl	8011862 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bd4c:	1d3b      	adds	r3, r7, #4
 800bd4e:	2200      	movs	r2, #0
 800bd50:	601a      	str	r2, [r3, #0]
 800bd52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800bd54:	4b20      	ldr	r3, [pc, #128]	; (800bdd8 <MX_TIM3_Init+0xa0>)
 800bd56:	4a21      	ldr	r2, [pc, #132]	; (800bddc <MX_TIM3_Init+0xa4>)
 800bd58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800bd5a:	4b1f      	ldr	r3, [pc, #124]	; (800bdd8 <MX_TIM3_Init+0xa0>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bd60:	4b1d      	ldr	r3, [pc, #116]	; (800bdd8 <MX_TIM3_Init+0xa0>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800bd66:	4b1c      	ldr	r3, [pc, #112]	; (800bdd8 <MX_TIM3_Init+0xa0>)
 800bd68:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800bd6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bd6e:	4b1a      	ldr	r3, [pc, #104]	; (800bdd8 <MX_TIM3_Init+0xa0>)
 800bd70:	2200      	movs	r2, #0
 800bd72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bd74:	4b18      	ldr	r3, [pc, #96]	; (800bdd8 <MX_TIM3_Init+0xa0>)
 800bd76:	2200      	movs	r2, #0
 800bd78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800bd7a:	2303      	movs	r3, #3
 800bd7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800bd82:	2301      	movs	r3, #1
 800bd84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800bd86:	2300      	movs	r3, #0
 800bd88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800bd92:	2301      	movs	r3, #1
 800bd94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800bd96:	2300      	movs	r3, #0
 800bd98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800bd9e:	f107 030c 	add.w	r3, r7, #12
 800bda2:	4619      	mov	r1, r3
 800bda4:	480c      	ldr	r0, [pc, #48]	; (800bdd8 <MX_TIM3_Init+0xa0>)
 800bda6:	f003 ff31 	bl	800fc0c <HAL_TIM_Encoder_Init>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d001      	beq.n	800bdb4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800bdb0:	f000 faa4 	bl	800c2fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800bdbc:	1d3b      	adds	r3, r7, #4
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	4805      	ldr	r0, [pc, #20]	; (800bdd8 <MX_TIM3_Init+0xa0>)
 800bdc2:	f004 ff1b 	bl	8010bfc <HAL_TIMEx_MasterConfigSynchronization>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d001      	beq.n	800bdd0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800bdcc:	f000 fa96 	bl	800c2fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800bdd0:	bf00      	nop
 800bdd2:	3730      	adds	r7, #48	; 0x30
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	20000698 	.word	0x20000698
 800bddc:	40000400 	.word	0x40000400

0800bde0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b08c      	sub	sp, #48	; 0x30
 800bde4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800bde6:	f107 030c 	add.w	r3, r7, #12
 800bdea:	2224      	movs	r2, #36	; 0x24
 800bdec:	2100      	movs	r1, #0
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f005 fd37 	bl	8011862 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bdf4:	1d3b      	adds	r3, r7, #4
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	601a      	str	r2, [r3, #0]
 800bdfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800bdfc:	4b20      	ldr	r3, [pc, #128]	; (800be80 <MX_TIM4_Init+0xa0>)
 800bdfe:	4a21      	ldr	r2, [pc, #132]	; (800be84 <MX_TIM4_Init+0xa4>)
 800be00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800be02:	4b1f      	ldr	r3, [pc, #124]	; (800be80 <MX_TIM4_Init+0xa0>)
 800be04:	2200      	movs	r2, #0
 800be06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800be08:	4b1d      	ldr	r3, [pc, #116]	; (800be80 <MX_TIM4_Init+0xa0>)
 800be0a:	2200      	movs	r2, #0
 800be0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800be0e:	4b1c      	ldr	r3, [pc, #112]	; (800be80 <MX_TIM4_Init+0xa0>)
 800be10:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800be14:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800be16:	4b1a      	ldr	r3, [pc, #104]	; (800be80 <MX_TIM4_Init+0xa0>)
 800be18:	2200      	movs	r2, #0
 800be1a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800be1c:	4b18      	ldr	r3, [pc, #96]	; (800be80 <MX_TIM4_Init+0xa0>)
 800be1e:	2200      	movs	r2, #0
 800be20:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800be22:	2303      	movs	r3, #3
 800be24:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800be26:	2300      	movs	r3, #0
 800be28:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800be2a:	2301      	movs	r3, #1
 800be2c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800be2e:	2300      	movs	r3, #0
 800be30:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800be32:	2300      	movs	r3, #0
 800be34:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800be36:	2300      	movs	r3, #0
 800be38:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800be3a:	2301      	movs	r3, #1
 800be3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800be3e:	2300      	movs	r3, #0
 800be40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800be42:	2300      	movs	r3, #0
 800be44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800be46:	f107 030c 	add.w	r3, r7, #12
 800be4a:	4619      	mov	r1, r3
 800be4c:	480c      	ldr	r0, [pc, #48]	; (800be80 <MX_TIM4_Init+0xa0>)
 800be4e:	f003 fedd 	bl	800fc0c <HAL_TIM_Encoder_Init>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d001      	beq.n	800be5c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800be58:	f000 fa50 	bl	800c2fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800be5c:	2300      	movs	r3, #0
 800be5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800be60:	2300      	movs	r3, #0
 800be62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800be64:	1d3b      	adds	r3, r7, #4
 800be66:	4619      	mov	r1, r3
 800be68:	4805      	ldr	r0, [pc, #20]	; (800be80 <MX_TIM4_Init+0xa0>)
 800be6a:	f004 fec7 	bl	8010bfc <HAL_TIMEx_MasterConfigSynchronization>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d001      	beq.n	800be78 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800be74:	f000 fa42 	bl	800c2fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800be78:	bf00      	nop
 800be7a:	3730      	adds	r7, #48	; 0x30
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	200005d0 	.word	0x200005d0
 800be84:	40000800 	.word	0x40000800

0800be88 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b08e      	sub	sp, #56	; 0x38
 800be8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800be8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be92:	2200      	movs	r2, #0
 800be94:	601a      	str	r2, [r3, #0]
 800be96:	605a      	str	r2, [r3, #4]
 800be98:	609a      	str	r2, [r3, #8]
 800be9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800be9c:	f107 0320 	add.w	r3, r7, #32
 800bea0:	2200      	movs	r2, #0
 800bea2:	601a      	str	r2, [r3, #0]
 800bea4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800bea6:	1d3b      	adds	r3, r7, #4
 800bea8:	2200      	movs	r2, #0
 800beaa:	601a      	str	r2, [r3, #0]
 800beac:	605a      	str	r2, [r3, #4]
 800beae:	609a      	str	r2, [r3, #8]
 800beb0:	60da      	str	r2, [r3, #12]
 800beb2:	611a      	str	r2, [r3, #16]
 800beb4:	615a      	str	r2, [r3, #20]
 800beb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800beb8:	4b2c      	ldr	r3, [pc, #176]	; (800bf6c <MX_TIM5_Init+0xe4>)
 800beba:	4a2d      	ldr	r2, [pc, #180]	; (800bf70 <MX_TIM5_Init+0xe8>)
 800bebc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800bebe:	4b2b      	ldr	r3, [pc, #172]	; (800bf6c <MX_TIM5_Init+0xe4>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bec4:	4b29      	ldr	r3, [pc, #164]	; (800bf6c <MX_TIM5_Init+0xe4>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800beca:	4b28      	ldr	r3, [pc, #160]	; (800bf6c <MX_TIM5_Init+0xe4>)
 800becc:	f241 0267 	movw	r2, #4199	; 0x1067
 800bed0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bed2:	4b26      	ldr	r3, [pc, #152]	; (800bf6c <MX_TIM5_Init+0xe4>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bed8:	4b24      	ldr	r3, [pc, #144]	; (800bf6c <MX_TIM5_Init+0xe4>)
 800beda:	2200      	movs	r2, #0
 800bedc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800bede:	4823      	ldr	r0, [pc, #140]	; (800bf6c <MX_TIM5_Init+0xe4>)
 800bee0:	f003 fc52 	bl	800f788 <HAL_TIM_Base_Init>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800beea:	f000 fa07 	bl	800c2fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800beee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bef2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800bef4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bef8:	4619      	mov	r1, r3
 800befa:	481c      	ldr	r0, [pc, #112]	; (800bf6c <MX_TIM5_Init+0xe4>)
 800befc:	f004 f9c4 	bl	8010288 <HAL_TIM_ConfigClockSource>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d001      	beq.n	800bf0a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800bf06:	f000 f9f9 	bl	800c2fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800bf0a:	4818      	ldr	r0, [pc, #96]	; (800bf6c <MX_TIM5_Init+0xe4>)
 800bf0c:	f003 fe0a 	bl	800fb24 <HAL_TIM_PWM_Init>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d001      	beq.n	800bf1a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800bf16:	f000 f9f1 	bl	800c2fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800bf22:	f107 0320 	add.w	r3, r7, #32
 800bf26:	4619      	mov	r1, r3
 800bf28:	4810      	ldr	r0, [pc, #64]	; (800bf6c <MX_TIM5_Init+0xe4>)
 800bf2a:	f004 fe67 	bl	8010bfc <HAL_TIMEx_MasterConfigSynchronization>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800bf34:	f000 f9e2 	bl	800c2fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bf38:	2360      	movs	r3, #96	; 0x60
 800bf3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bf40:	2300      	movs	r3, #0
 800bf42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800bf44:	2300      	movs	r3, #0
 800bf46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800bf48:	1d3b      	adds	r3, r7, #4
 800bf4a:	2204      	movs	r2, #4
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	4807      	ldr	r0, [pc, #28]	; (800bf6c <MX_TIM5_Init+0xe4>)
 800bf50:	f004 f8d4 	bl	80100fc <HAL_TIM_PWM_ConfigChannel>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d001      	beq.n	800bf5e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800bf5a:	f000 f9cf 	bl	800c2fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800bf5e:	4803      	ldr	r0, [pc, #12]	; (800bf6c <MX_TIM5_Init+0xe4>)
 800bf60:	f000 fc6c 	bl	800c83c <HAL_TIM_MspPostInit>

}
 800bf64:	bf00      	nop
 800bf66:	3738      	adds	r7, #56	; 0x38
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	20000658 	.word	0x20000658
 800bf70:	40000c00 	.word	0x40000c00

0800bf74 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b096      	sub	sp, #88	; 0x58
 800bf78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bf7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bf7e:	2200      	movs	r2, #0
 800bf80:	601a      	str	r2, [r3, #0]
 800bf82:	605a      	str	r2, [r3, #4]
 800bf84:	609a      	str	r2, [r3, #8]
 800bf86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bf88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	601a      	str	r2, [r3, #0]
 800bf90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800bf92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf96:	2200      	movs	r2, #0
 800bf98:	601a      	str	r2, [r3, #0]
 800bf9a:	605a      	str	r2, [r3, #4]
 800bf9c:	609a      	str	r2, [r3, #8]
 800bf9e:	60da      	str	r2, [r3, #12]
 800bfa0:	611a      	str	r2, [r3, #16]
 800bfa2:	615a      	str	r2, [r3, #20]
 800bfa4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800bfa6:	1d3b      	adds	r3, r7, #4
 800bfa8:	2220      	movs	r2, #32
 800bfaa:	2100      	movs	r1, #0
 800bfac:	4618      	mov	r0, r3
 800bfae:	f005 fc58 	bl	8011862 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800bfb2:	4b42      	ldr	r3, [pc, #264]	; (800c0bc <MX_TIM8_Init+0x148>)
 800bfb4:	4a42      	ldr	r2, [pc, #264]	; (800c0c0 <MX_TIM8_Init+0x14c>)
 800bfb6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800bfb8:	4b40      	ldr	r3, [pc, #256]	; (800c0bc <MX_TIM8_Init+0x148>)
 800bfba:	22a7      	movs	r2, #167	; 0xa7
 800bfbc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bfbe:	4b3f      	ldr	r3, [pc, #252]	; (800c0bc <MX_TIM8_Init+0x148>)
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800bfc4:	4b3d      	ldr	r3, [pc, #244]	; (800c0bc <MX_TIM8_Init+0x148>)
 800bfc6:	2231      	movs	r2, #49	; 0x31
 800bfc8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bfca:	4b3c      	ldr	r3, [pc, #240]	; (800c0bc <MX_TIM8_Init+0x148>)
 800bfcc:	2200      	movs	r2, #0
 800bfce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800bfd0:	4b3a      	ldr	r3, [pc, #232]	; (800c0bc <MX_TIM8_Init+0x148>)
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800bfd6:	4b39      	ldr	r3, [pc, #228]	; (800c0bc <MX_TIM8_Init+0x148>)
 800bfd8:	2280      	movs	r2, #128	; 0x80
 800bfda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800bfdc:	4837      	ldr	r0, [pc, #220]	; (800c0bc <MX_TIM8_Init+0x148>)
 800bfde:	f003 fbd3 	bl	800f788 <HAL_TIM_Base_Init>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d001      	beq.n	800bfec <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800bfe8:	f000 f988 	bl	800c2fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bfec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bff0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800bff2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bff6:	4619      	mov	r1, r3
 800bff8:	4830      	ldr	r0, [pc, #192]	; (800c0bc <MX_TIM8_Init+0x148>)
 800bffa:	f004 f945 	bl	8010288 <HAL_TIM_ConfigClockSource>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d001      	beq.n	800c008 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800c004:	f000 f97a 	bl	800c2fc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800c008:	482c      	ldr	r0, [pc, #176]	; (800c0bc <MX_TIM8_Init+0x148>)
 800c00a:	f003 fc37 	bl	800f87c <HAL_TIM_OC_Init>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800c014:	f000 f972 	bl	800c2fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c018:	2300      	movs	r3, #0
 800c01a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c01c:	2300      	movs	r3, #0
 800c01e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c020:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c024:	4619      	mov	r1, r3
 800c026:	4825      	ldr	r0, [pc, #148]	; (800c0bc <MX_TIM8_Init+0x148>)
 800c028:	f004 fde8 	bl	8010bfc <HAL_TIMEx_MasterConfigSynchronization>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d001      	beq.n	800c036 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800c032:	f000 f963 	bl	800c2fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800c036:	2330      	movs	r3, #48	; 0x30
 800c038:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800c03a:	2318      	movs	r3, #24
 800c03c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c03e:	2300      	movs	r3, #0
 800c040:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800c042:	2300      	movs	r3, #0
 800c044:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c046:	2300      	movs	r3, #0
 800c048:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800c04a:	2300      	movs	r3, #0
 800c04c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800c04e:	2300      	movs	r3, #0
 800c050:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c056:	2200      	movs	r2, #0
 800c058:	4619      	mov	r1, r3
 800c05a:	4818      	ldr	r0, [pc, #96]	; (800c0bc <MX_TIM8_Init+0x148>)
 800c05c:	f003 ffee 	bl	801003c <HAL_TIM_OC_ConfigChannel>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d001      	beq.n	800c06a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800c066:	f000 f949 	bl	800c2fc <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800c06a:	4b14      	ldr	r3, [pc, #80]	; (800c0bc <MX_TIM8_Init+0x148>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	699a      	ldr	r2, [r3, #24]
 800c070:	4b12      	ldr	r3, [pc, #72]	; (800c0bc <MX_TIM8_Init+0x148>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f042 0208 	orr.w	r2, r2, #8
 800c078:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800c07a:	2300      	movs	r3, #0
 800c07c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800c07e:	2300      	movs	r3, #0
 800c080:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800c082:	2300      	movs	r3, #0
 800c084:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800c086:	2300      	movs	r3, #0
 800c088:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800c08a:	2300      	movs	r3, #0
 800c08c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c08e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c092:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800c094:	2300      	movs	r3, #0
 800c096:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800c098:	1d3b      	adds	r3, r7, #4
 800c09a:	4619      	mov	r1, r3
 800c09c:	4807      	ldr	r0, [pc, #28]	; (800c0bc <MX_TIM8_Init+0x148>)
 800c09e:	f004 fe29 	bl	8010cf4 <HAL_TIMEx_ConfigBreakDeadTime>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d001      	beq.n	800c0ac <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800c0a8:	f000 f928 	bl	800c2fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800c0ac:	4803      	ldr	r0, [pc, #12]	; (800c0bc <MX_TIM8_Init+0x148>)
 800c0ae:	f000 fbc5 	bl	800c83c <HAL_TIM_MspPostInit>

}
 800c0b2:	bf00      	nop
 800c0b4:	3758      	adds	r7, #88	; 0x58
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20000590 	.word	0x20000590
 800c0c0:	40010400 	.word	0x40010400

0800c0c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c0c8:	4b11      	ldr	r3, [pc, #68]	; (800c110 <MX_USART1_UART_Init+0x4c>)
 800c0ca:	4a12      	ldr	r2, [pc, #72]	; (800c114 <MX_USART1_UART_Init+0x50>)
 800c0cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c0ce:	4b10      	ldr	r3, [pc, #64]	; (800c110 <MX_USART1_UART_Init+0x4c>)
 800c0d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c0d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c0d6:	4b0e      	ldr	r3, [pc, #56]	; (800c110 <MX_USART1_UART_Init+0x4c>)
 800c0d8:	2200      	movs	r2, #0
 800c0da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c0dc:	4b0c      	ldr	r3, [pc, #48]	; (800c110 <MX_USART1_UART_Init+0x4c>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c0e2:	4b0b      	ldr	r3, [pc, #44]	; (800c110 <MX_USART1_UART_Init+0x4c>)
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c0e8:	4b09      	ldr	r3, [pc, #36]	; (800c110 <MX_USART1_UART_Init+0x4c>)
 800c0ea:	220c      	movs	r2, #12
 800c0ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c0ee:	4b08      	ldr	r3, [pc, #32]	; (800c110 <MX_USART1_UART_Init+0x4c>)
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c0f4:	4b06      	ldr	r3, [pc, #24]	; (800c110 <MX_USART1_UART_Init+0x4c>)
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c0fa:	4805      	ldr	r0, [pc, #20]	; (800c110 <MX_USART1_UART_Init+0x4c>)
 800c0fc:	f004 fe85 	bl	8010e0a <HAL_UART_Init>
 800c100:	4603      	mov	r3, r0
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c106:	f000 f8f9 	bl	800c2fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c10a:	bf00      	nop
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	20000778 	.word	0x20000778
 800c114:	40011000 	.word	0x40011000

0800c118 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c11e:	2300      	movs	r3, #0
 800c120:	607b      	str	r3, [r7, #4]
 800c122:	4b10      	ldr	r3, [pc, #64]	; (800c164 <MX_DMA_Init+0x4c>)
 800c124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c126:	4a0f      	ldr	r2, [pc, #60]	; (800c164 <MX_DMA_Init+0x4c>)
 800c128:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c12c:	6313      	str	r3, [r2, #48]	; 0x30
 800c12e:	4b0d      	ldr	r3, [pc, #52]	; (800c164 <MX_DMA_Init+0x4c>)
 800c130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c136:	607b      	str	r3, [r7, #4]
 800c138:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c13a:	2200      	movs	r2, #0
 800c13c:	2100      	movs	r1, #0
 800c13e:	2038      	movs	r0, #56	; 0x38
 800c140:	f001 fefb 	bl	800df3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800c144:	2038      	movs	r0, #56	; 0x38
 800c146:	f001 ff14 	bl	800df72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800c14a:	2200      	movs	r2, #0
 800c14c:	2100      	movs	r1, #0
 800c14e:	203a      	movs	r0, #58	; 0x3a
 800c150:	f001 fef3 	bl	800df3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800c154:	203a      	movs	r0, #58	; 0x3a
 800c156:	f001 ff0c 	bl	800df72 <HAL_NVIC_EnableIRQ>

}
 800c15a:	bf00      	nop
 800c15c:	3708      	adds	r7, #8
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	40023800 	.word	0x40023800

0800c168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08a      	sub	sp, #40	; 0x28
 800c16c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c16e:	f107 0314 	add.w	r3, r7, #20
 800c172:	2200      	movs	r2, #0
 800c174:	601a      	str	r2, [r3, #0]
 800c176:	605a      	str	r2, [r3, #4]
 800c178:	609a      	str	r2, [r3, #8]
 800c17a:	60da      	str	r2, [r3, #12]
 800c17c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c17e:	2300      	movs	r3, #0
 800c180:	613b      	str	r3, [r7, #16]
 800c182:	4b59      	ldr	r3, [pc, #356]	; (800c2e8 <MX_GPIO_Init+0x180>)
 800c184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c186:	4a58      	ldr	r2, [pc, #352]	; (800c2e8 <MX_GPIO_Init+0x180>)
 800c188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c18c:	6313      	str	r3, [r2, #48]	; 0x30
 800c18e:	4b56      	ldr	r3, [pc, #344]	; (800c2e8 <MX_GPIO_Init+0x180>)
 800c190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c196:	613b      	str	r3, [r7, #16]
 800c198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c19a:	2300      	movs	r3, #0
 800c19c:	60fb      	str	r3, [r7, #12]
 800c19e:	4b52      	ldr	r3, [pc, #328]	; (800c2e8 <MX_GPIO_Init+0x180>)
 800c1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1a2:	4a51      	ldr	r2, [pc, #324]	; (800c2e8 <MX_GPIO_Init+0x180>)
 800c1a4:	f043 0304 	orr.w	r3, r3, #4
 800c1a8:	6313      	str	r3, [r2, #48]	; 0x30
 800c1aa:	4b4f      	ldr	r3, [pc, #316]	; (800c2e8 <MX_GPIO_Init+0x180>)
 800c1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ae:	f003 0304 	and.w	r3, r3, #4
 800c1b2:	60fb      	str	r3, [r7, #12]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60bb      	str	r3, [r7, #8]
 800c1ba:	4b4b      	ldr	r3, [pc, #300]	; (800c2e8 <MX_GPIO_Init+0x180>)
 800c1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1be:	4a4a      	ldr	r2, [pc, #296]	; (800c2e8 <MX_GPIO_Init+0x180>)
 800c1c0:	f043 0301 	orr.w	r3, r3, #1
 800c1c4:	6313      	str	r3, [r2, #48]	; 0x30
 800c1c6:	4b48      	ldr	r3, [pc, #288]	; (800c2e8 <MX_GPIO_Init+0x180>)
 800c1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ca:	f003 0301 	and.w	r3, r3, #1
 800c1ce:	60bb      	str	r3, [r7, #8]
 800c1d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	607b      	str	r3, [r7, #4]
 800c1d6:	4b44      	ldr	r3, [pc, #272]	; (800c2e8 <MX_GPIO_Init+0x180>)
 800c1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1da:	4a43      	ldr	r2, [pc, #268]	; (800c2e8 <MX_GPIO_Init+0x180>)
 800c1dc:	f043 0302 	orr.w	r3, r3, #2
 800c1e0:	6313      	str	r3, [r2, #48]	; 0x30
 800c1e2:	4b41      	ldr	r3, [pc, #260]	; (800c2e8 <MX_GPIO_Init+0x180>)
 800c1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e6:	f003 0302 	and.w	r3, r3, #2
 800c1ea:	607b      	str	r3, [r7, #4]
 800c1ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	603b      	str	r3, [r7, #0]
 800c1f2:	4b3d      	ldr	r3, [pc, #244]	; (800c2e8 <MX_GPIO_Init+0x180>)
 800c1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f6:	4a3c      	ldr	r2, [pc, #240]	; (800c2e8 <MX_GPIO_Init+0x180>)
 800c1f8:	f043 0308 	orr.w	r3, r3, #8
 800c1fc:	6313      	str	r3, [r2, #48]	; 0x30
 800c1fe:	4b3a      	ldr	r3, [pc, #232]	; (800c2e8 <MX_GPIO_Init+0x180>)
 800c200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c202:	f003 0308 	and.w	r3, r3, #8
 800c206:	603b      	str	r3, [r7, #0]
 800c208:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800c20a:	2200      	movs	r2, #0
 800c20c:	f44f 7141 	mov.w	r1, #772	; 0x304
 800c210:	4836      	ldr	r0, [pc, #216]	; (800c2ec <MX_GPIO_Init+0x184>)
 800c212:	f002 fdd9 	bl	800edc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800c216:	2200      	movs	r2, #0
 800c218:	2105      	movs	r1, #5
 800c21a:	4835      	ldr	r0, [pc, #212]	; (800c2f0 <MX_GPIO_Init+0x188>)
 800c21c:	f002 fdd4 	bl	800edc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800c220:	2200      	movs	r2, #0
 800c222:	2104      	movs	r1, #4
 800c224:	4833      	ldr	r0, [pc, #204]	; (800c2f4 <MX_GPIO_Init+0x18c>)
 800c226:	f002 fdcf 	bl	800edc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800c22a:	2200      	movs	r2, #0
 800c22c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c230:	4831      	ldr	r0, [pc, #196]	; (800c2f8 <MX_GPIO_Init+0x190>)
 800c232:	f002 fdc9 	bl	800edc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800c236:	f44f 7341 	mov.w	r3, #772	; 0x304
 800c23a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c23c:	2301      	movs	r3, #1
 800c23e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c240:	2300      	movs	r3, #0
 800c242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c244:	2300      	movs	r3, #0
 800c246:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c248:	f107 0314 	add.w	r3, r7, #20
 800c24c:	4619      	mov	r1, r3
 800c24e:	4827      	ldr	r0, [pc, #156]	; (800c2ec <MX_GPIO_Init+0x184>)
 800c250:	f002 fc20 	bl	800ea94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800c254:	2305      	movs	r3, #5
 800c256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c258:	2301      	movs	r3, #1
 800c25a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c25c:	2300      	movs	r3, #0
 800c25e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c260:	2300      	movs	r3, #0
 800c262:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c264:	f107 0314 	add.w	r3, r7, #20
 800c268:	4619      	mov	r1, r3
 800c26a:	4821      	ldr	r0, [pc, #132]	; (800c2f0 <MX_GPIO_Init+0x188>)
 800c26c:	f002 fc12 	bl	800ea94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800c270:	f241 0304 	movw	r3, #4100	; 0x1004
 800c274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c276:	2300      	movs	r3, #0
 800c278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c27a:	2300      	movs	r3, #0
 800c27c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c27e:	f107 0314 	add.w	r3, r7, #20
 800c282:	4619      	mov	r1, r3
 800c284:	481c      	ldr	r0, [pc, #112]	; (800c2f8 <MX_GPIO_Init+0x190>)
 800c286:	f002 fc05 	bl	800ea94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800c28a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c28e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c290:	2300      	movs	r3, #0
 800c292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c294:	2300      	movs	r3, #0
 800c296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c298:	f107 0314 	add.w	r3, r7, #20
 800c29c:	4619      	mov	r1, r3
 800c29e:	4814      	ldr	r0, [pc, #80]	; (800c2f0 <MX_GPIO_Init+0x188>)
 800c2a0:	f002 fbf8 	bl	800ea94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c2a4:	2304      	movs	r3, #4
 800c2a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c2b4:	f107 0314 	add.w	r3, r7, #20
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	480e      	ldr	r0, [pc, #56]	; (800c2f4 <MX_GPIO_Init+0x18c>)
 800c2bc:	f002 fbea 	bl	800ea94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c2c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c2d2:	f107 0314 	add.w	r3, r7, #20
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	4807      	ldr	r0, [pc, #28]	; (800c2f8 <MX_GPIO_Init+0x190>)
 800c2da:	f002 fbdb 	bl	800ea94 <HAL_GPIO_Init>

}
 800c2de:	bf00      	nop
 800c2e0:	3728      	adds	r7, #40	; 0x28
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	40023800 	.word	0x40023800
 800c2ec:	40020800 	.word	0x40020800
 800c2f0:	40020000 	.word	0x40020000
 800c2f4:	40020c00 	.word	0x40020c00
 800c2f8:	40020400 	.word	0x40020400

0800c2fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c300:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800c302:	e7fe      	b.n	800c302 <Error_Handler+0x6>

0800c304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c30a:	2300      	movs	r3, #0
 800c30c:	607b      	str	r3, [r7, #4]
 800c30e:	4b13      	ldr	r3, [pc, #76]	; (800c35c <HAL_MspInit+0x58>)
 800c310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c312:	4a12      	ldr	r2, [pc, #72]	; (800c35c <HAL_MspInit+0x58>)
 800c314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c318:	6453      	str	r3, [r2, #68]	; 0x44
 800c31a:	4b10      	ldr	r3, [pc, #64]	; (800c35c <HAL_MspInit+0x58>)
 800c31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c31e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c322:	607b      	str	r3, [r7, #4]
 800c324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c326:	2300      	movs	r3, #0
 800c328:	603b      	str	r3, [r7, #0]
 800c32a:	4b0c      	ldr	r3, [pc, #48]	; (800c35c <HAL_MspInit+0x58>)
 800c32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c32e:	4a0b      	ldr	r2, [pc, #44]	; (800c35c <HAL_MspInit+0x58>)
 800c330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c334:	6413      	str	r3, [r2, #64]	; 0x40
 800c336:	4b09      	ldr	r3, [pc, #36]	; (800c35c <HAL_MspInit+0x58>)
 800c338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c33a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c33e:	603b      	str	r3, [r7, #0]
 800c340:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800c342:	2200      	movs	r2, #0
 800c344:	2100      	movs	r1, #0
 800c346:	2004      	movs	r0, #4
 800c348:	f001 fdf7 	bl	800df3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800c34c:	2004      	movs	r0, #4
 800c34e:	f001 fe10 	bl	800df72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c352:	bf00      	nop
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	40023800 	.word	0x40023800

0800c360 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b08c      	sub	sp, #48	; 0x30
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c368:	f107 031c 	add.w	r3, r7, #28
 800c36c:	2200      	movs	r2, #0
 800c36e:	601a      	str	r2, [r3, #0]
 800c370:	605a      	str	r2, [r3, #4]
 800c372:	609a      	str	r2, [r3, #8]
 800c374:	60da      	str	r2, [r3, #12]
 800c376:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a73      	ldr	r2, [pc, #460]	; (800c54c <HAL_ADC_MspInit+0x1ec>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d17a      	bne.n	800c478 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c382:	2300      	movs	r3, #0
 800c384:	61bb      	str	r3, [r7, #24]
 800c386:	4b72      	ldr	r3, [pc, #456]	; (800c550 <HAL_ADC_MspInit+0x1f0>)
 800c388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c38a:	4a71      	ldr	r2, [pc, #452]	; (800c550 <HAL_ADC_MspInit+0x1f0>)
 800c38c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c390:	6453      	str	r3, [r2, #68]	; 0x44
 800c392:	4b6f      	ldr	r3, [pc, #444]	; (800c550 <HAL_ADC_MspInit+0x1f0>)
 800c394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c39a:	61bb      	str	r3, [r7, #24]
 800c39c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c39e:	2300      	movs	r3, #0
 800c3a0:	617b      	str	r3, [r7, #20]
 800c3a2:	4b6b      	ldr	r3, [pc, #428]	; (800c550 <HAL_ADC_MspInit+0x1f0>)
 800c3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3a6:	4a6a      	ldr	r2, [pc, #424]	; (800c550 <HAL_ADC_MspInit+0x1f0>)
 800c3a8:	f043 0304 	orr.w	r3, r3, #4
 800c3ac:	6313      	str	r3, [r2, #48]	; 0x30
 800c3ae:	4b68      	ldr	r3, [pc, #416]	; (800c550 <HAL_ADC_MspInit+0x1f0>)
 800c3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b2:	f003 0304 	and.w	r3, r3, #4
 800c3b6:	617b      	str	r3, [r7, #20]
 800c3b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	613b      	str	r3, [r7, #16]
 800c3be:	4b64      	ldr	r3, [pc, #400]	; (800c550 <HAL_ADC_MspInit+0x1f0>)
 800c3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3c2:	4a63      	ldr	r2, [pc, #396]	; (800c550 <HAL_ADC_MspInit+0x1f0>)
 800c3c4:	f043 0302 	orr.w	r3, r3, #2
 800c3c8:	6313      	str	r3, [r2, #48]	; 0x30
 800c3ca:	4b61      	ldr	r3, [pc, #388]	; (800c550 <HAL_ADC_MspInit+0x1f0>)
 800c3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ce:	f003 0302 	and.w	r3, r3, #2
 800c3d2:	613b      	str	r3, [r7, #16]
 800c3d4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800c3d6:	2311      	movs	r3, #17
 800c3d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c3e2:	f107 031c 	add.w	r3, r7, #28
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	485a      	ldr	r0, [pc, #360]	; (800c554 <HAL_ADC_MspInit+0x1f4>)
 800c3ea:	f002 fb53 	bl	800ea94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800c3ee:	2302      	movs	r3, #2
 800c3f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c3f2:	2303      	movs	r3, #3
 800c3f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c3fa:	f107 031c 	add.w	r3, r7, #28
 800c3fe:	4619      	mov	r1, r3
 800c400:	4855      	ldr	r0, [pc, #340]	; (800c558 <HAL_ADC_MspInit+0x1f8>)
 800c402:	f002 fb47 	bl	800ea94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800c406:	4b55      	ldr	r3, [pc, #340]	; (800c55c <HAL_ADC_MspInit+0x1fc>)
 800c408:	4a55      	ldr	r2, [pc, #340]	; (800c560 <HAL_ADC_MspInit+0x200>)
 800c40a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800c40c:	4b53      	ldr	r3, [pc, #332]	; (800c55c <HAL_ADC_MspInit+0x1fc>)
 800c40e:	2200      	movs	r2, #0
 800c410:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c412:	4b52      	ldr	r3, [pc, #328]	; (800c55c <HAL_ADC_MspInit+0x1fc>)
 800c414:	2200      	movs	r2, #0
 800c416:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c418:	4b50      	ldr	r3, [pc, #320]	; (800c55c <HAL_ADC_MspInit+0x1fc>)
 800c41a:	2200      	movs	r2, #0
 800c41c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c41e:	4b4f      	ldr	r3, [pc, #316]	; (800c55c <HAL_ADC_MspInit+0x1fc>)
 800c420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c424:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c426:	4b4d      	ldr	r3, [pc, #308]	; (800c55c <HAL_ADC_MspInit+0x1fc>)
 800c428:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c42c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c42e:	4b4b      	ldr	r3, [pc, #300]	; (800c55c <HAL_ADC_MspInit+0x1fc>)
 800c430:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c434:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800c436:	4b49      	ldr	r3, [pc, #292]	; (800c55c <HAL_ADC_MspInit+0x1fc>)
 800c438:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c43c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800c43e:	4b47      	ldr	r3, [pc, #284]	; (800c55c <HAL_ADC_MspInit+0x1fc>)
 800c440:	2200      	movs	r2, #0
 800c442:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c444:	4b45      	ldr	r3, [pc, #276]	; (800c55c <HAL_ADC_MspInit+0x1fc>)
 800c446:	2200      	movs	r2, #0
 800c448:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800c44a:	4844      	ldr	r0, [pc, #272]	; (800c55c <HAL_ADC_MspInit+0x1fc>)
 800c44c:	f001 fdac 	bl	800dfa8 <HAL_DMA_Init>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d001      	beq.n	800c45a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800c456:	f7ff ff51 	bl	800c2fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4a3f      	ldr	r2, [pc, #252]	; (800c55c <HAL_ADC_MspInit+0x1fc>)
 800c45e:	639a      	str	r2, [r3, #56]	; 0x38
 800c460:	4a3e      	ldr	r2, [pc, #248]	; (800c55c <HAL_ADC_MspInit+0x1fc>)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c466:	2200      	movs	r2, #0
 800c468:	2100      	movs	r1, #0
 800c46a:	2012      	movs	r0, #18
 800c46c:	f001 fd65 	bl	800df3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c470:	2012      	movs	r0, #18
 800c472:	f001 fd7e 	bl	800df72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800c476:	e065      	b.n	800c544 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a39      	ldr	r2, [pc, #228]	; (800c564 <HAL_ADC_MspInit+0x204>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d160      	bne.n	800c544 <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800c482:	2300      	movs	r3, #0
 800c484:	60fb      	str	r3, [r7, #12]
 800c486:	4b32      	ldr	r3, [pc, #200]	; (800c550 <HAL_ADC_MspInit+0x1f0>)
 800c488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c48a:	4a31      	ldr	r2, [pc, #196]	; (800c550 <HAL_ADC_MspInit+0x1f0>)
 800c48c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c490:	6453      	str	r3, [r2, #68]	; 0x44
 800c492:	4b2f      	ldr	r3, [pc, #188]	; (800c550 <HAL_ADC_MspInit+0x1f0>)
 800c494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c49a:	60fb      	str	r3, [r7, #12]
 800c49c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c49e:	2300      	movs	r3, #0
 800c4a0:	60bb      	str	r3, [r7, #8]
 800c4a2:	4b2b      	ldr	r3, [pc, #172]	; (800c550 <HAL_ADC_MspInit+0x1f0>)
 800c4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a6:	4a2a      	ldr	r2, [pc, #168]	; (800c550 <HAL_ADC_MspInit+0x1f0>)
 800c4a8:	f043 0304 	orr.w	r3, r3, #4
 800c4ac:	6313      	str	r3, [r2, #48]	; 0x30
 800c4ae:	4b28      	ldr	r3, [pc, #160]	; (800c550 <HAL_ADC_MspInit+0x1f0>)
 800c4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b2:	f003 0304 	and.w	r3, r3, #4
 800c4b6:	60bb      	str	r3, [r7, #8]
 800c4b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800c4ba:	2322      	movs	r3, #34	; 0x22
 800c4bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c4be:	2303      	movs	r3, #3
 800c4c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c4c6:	f107 031c 	add.w	r3, r7, #28
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	4821      	ldr	r0, [pc, #132]	; (800c554 <HAL_ADC_MspInit+0x1f4>)
 800c4ce:	f002 fae1 	bl	800ea94 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800c4d2:	4b25      	ldr	r3, [pc, #148]	; (800c568 <HAL_ADC_MspInit+0x208>)
 800c4d4:	4a25      	ldr	r2, [pc, #148]	; (800c56c <HAL_ADC_MspInit+0x20c>)
 800c4d6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800c4d8:	4b23      	ldr	r3, [pc, #140]	; (800c568 <HAL_ADC_MspInit+0x208>)
 800c4da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c4de:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c4e0:	4b21      	ldr	r3, [pc, #132]	; (800c568 <HAL_ADC_MspInit+0x208>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800c4e6:	4b20      	ldr	r3, [pc, #128]	; (800c568 <HAL_ADC_MspInit+0x208>)
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800c4ec:	4b1e      	ldr	r3, [pc, #120]	; (800c568 <HAL_ADC_MspInit+0x208>)
 800c4ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c4f2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c4f4:	4b1c      	ldr	r3, [pc, #112]	; (800c568 <HAL_ADC_MspInit+0x208>)
 800c4f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c4fa:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c4fc:	4b1a      	ldr	r3, [pc, #104]	; (800c568 <HAL_ADC_MspInit+0x208>)
 800c4fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c502:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800c504:	4b18      	ldr	r3, [pc, #96]	; (800c568 <HAL_ADC_MspInit+0x208>)
 800c506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c50a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800c50c:	4b16      	ldr	r3, [pc, #88]	; (800c568 <HAL_ADC_MspInit+0x208>)
 800c50e:	2200      	movs	r2, #0
 800c510:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c512:	4b15      	ldr	r3, [pc, #84]	; (800c568 <HAL_ADC_MspInit+0x208>)
 800c514:	2200      	movs	r2, #0
 800c516:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800c518:	4813      	ldr	r0, [pc, #76]	; (800c568 <HAL_ADC_MspInit+0x208>)
 800c51a:	f001 fd45 	bl	800dfa8 <HAL_DMA_Init>
 800c51e:	4603      	mov	r3, r0
 800c520:	2b00      	cmp	r3, #0
 800c522:	d001      	beq.n	800c528 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 800c524:	f7ff feea 	bl	800c2fc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4a0f      	ldr	r2, [pc, #60]	; (800c568 <HAL_ADC_MspInit+0x208>)
 800c52c:	639a      	str	r2, [r3, #56]	; 0x38
 800c52e:	4a0e      	ldr	r2, [pc, #56]	; (800c568 <HAL_ADC_MspInit+0x208>)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c534:	2200      	movs	r2, #0
 800c536:	2100      	movs	r1, #0
 800c538:	2012      	movs	r0, #18
 800c53a:	f001 fcfe 	bl	800df3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c53e:	2012      	movs	r0, #18
 800c540:	f001 fd17 	bl	800df72 <HAL_NVIC_EnableIRQ>
}
 800c544:	bf00      	nop
 800c546:	3730      	adds	r7, #48	; 0x30
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	40012000 	.word	0x40012000
 800c550:	40023800 	.word	0x40023800
 800c554:	40020800 	.word	0x40020800
 800c558:	40020400 	.word	0x40020400
 800c55c:	200007b8 	.word	0x200007b8
 800c560:	40026410 	.word	0x40026410
 800c564:	40012100 	.word	0x40012100
 800c568:	20000898 	.word	0x20000898
 800c56c:	40026440 	.word	0x40026440

0800c570 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b08a      	sub	sp, #40	; 0x28
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c578:	f107 0314 	add.w	r3, r7, #20
 800c57c:	2200      	movs	r2, #0
 800c57e:	601a      	str	r2, [r3, #0]
 800c580:	605a      	str	r2, [r3, #4]
 800c582:	609a      	str	r2, [r3, #8]
 800c584:	60da      	str	r2, [r3, #12]
 800c586:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a19      	ldr	r2, [pc, #100]	; (800c5f4 <HAL_SPI_MspInit+0x84>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d12c      	bne.n	800c5ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800c592:	2300      	movs	r3, #0
 800c594:	613b      	str	r3, [r7, #16]
 800c596:	4b18      	ldr	r3, [pc, #96]	; (800c5f8 <HAL_SPI_MspInit+0x88>)
 800c598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c59a:	4a17      	ldr	r2, [pc, #92]	; (800c5f8 <HAL_SPI_MspInit+0x88>)
 800c59c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5a0:	6413      	str	r3, [r2, #64]	; 0x40
 800c5a2:	4b15      	ldr	r3, [pc, #84]	; (800c5f8 <HAL_SPI_MspInit+0x88>)
 800c5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5aa:	613b      	str	r3, [r7, #16]
 800c5ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	60fb      	str	r3, [r7, #12]
 800c5b2:	4b11      	ldr	r3, [pc, #68]	; (800c5f8 <HAL_SPI_MspInit+0x88>)
 800c5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5b6:	4a10      	ldr	r2, [pc, #64]	; (800c5f8 <HAL_SPI_MspInit+0x88>)
 800c5b8:	f043 0304 	orr.w	r3, r3, #4
 800c5bc:	6313      	str	r3, [r2, #48]	; 0x30
 800c5be:	4b0e      	ldr	r3, [pc, #56]	; (800c5f8 <HAL_SPI_MspInit+0x88>)
 800c5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5c2:	f003 0304 	and.w	r3, r3, #4
 800c5c6:	60fb      	str	r3, [r7, #12]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800c5ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c5ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5d0:	2302      	movs	r3, #2
 800c5d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800c5dc:	2306      	movs	r3, #6
 800c5de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c5e0:	f107 0314 	add.w	r3, r7, #20
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	4805      	ldr	r0, [pc, #20]	; (800c5fc <HAL_SPI_MspInit+0x8c>)
 800c5e8:	f002 fa54 	bl	800ea94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800c5ec:	bf00      	nop
 800c5ee:	3728      	adds	r7, #40	; 0x28
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	40003c00 	.word	0x40003c00
 800c5f8:	40023800 	.word	0x40023800
 800c5fc:	40020800 	.word	0x40020800

0800c600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4a40      	ldr	r2, [pc, #256]	; (800c710 <HAL_TIM_Base_MspInit+0x110>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d116      	bne.n	800c640 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c612:	2300      	movs	r3, #0
 800c614:	617b      	str	r3, [r7, #20]
 800c616:	4b3f      	ldr	r3, [pc, #252]	; (800c714 <HAL_TIM_Base_MspInit+0x114>)
 800c618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c61a:	4a3e      	ldr	r2, [pc, #248]	; (800c714 <HAL_TIM_Base_MspInit+0x114>)
 800c61c:	f043 0301 	orr.w	r3, r3, #1
 800c620:	6453      	str	r3, [r2, #68]	; 0x44
 800c622:	4b3c      	ldr	r3, [pc, #240]	; (800c714 <HAL_TIM_Base_MspInit+0x114>)
 800c624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c626:	f003 0301 	and.w	r3, r3, #1
 800c62a:	617b      	str	r3, [r7, #20]
 800c62c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800c62e:	2200      	movs	r2, #0
 800c630:	2101      	movs	r1, #1
 800c632:	2019      	movs	r0, #25
 800c634:	f001 fc81 	bl	800df3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800c638:	2019      	movs	r0, #25
 800c63a:	f001 fc9a 	bl	800df72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800c63e:	e062      	b.n	800c706 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c648:	d116      	bne.n	800c678 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c64a:	2300      	movs	r3, #0
 800c64c:	613b      	str	r3, [r7, #16]
 800c64e:	4b31      	ldr	r3, [pc, #196]	; (800c714 <HAL_TIM_Base_MspInit+0x114>)
 800c650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c652:	4a30      	ldr	r2, [pc, #192]	; (800c714 <HAL_TIM_Base_MspInit+0x114>)
 800c654:	f043 0301 	orr.w	r3, r3, #1
 800c658:	6413      	str	r3, [r2, #64]	; 0x40
 800c65a:	4b2e      	ldr	r3, [pc, #184]	; (800c714 <HAL_TIM_Base_MspInit+0x114>)
 800c65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65e:	f003 0301 	and.w	r3, r3, #1
 800c662:	613b      	str	r3, [r7, #16]
 800c664:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800c666:	2200      	movs	r2, #0
 800c668:	2100      	movs	r1, #0
 800c66a:	201c      	movs	r0, #28
 800c66c:	f001 fc65 	bl	800df3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800c670:	201c      	movs	r0, #28
 800c672:	f001 fc7e 	bl	800df72 <HAL_NVIC_EnableIRQ>
}
 800c676:	e046      	b.n	800c706 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a26      	ldr	r2, [pc, #152]	; (800c718 <HAL_TIM_Base_MspInit+0x118>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d116      	bne.n	800c6b0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800c682:	2300      	movs	r3, #0
 800c684:	60fb      	str	r3, [r7, #12]
 800c686:	4b23      	ldr	r3, [pc, #140]	; (800c714 <HAL_TIM_Base_MspInit+0x114>)
 800c688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c68a:	4a22      	ldr	r2, [pc, #136]	; (800c714 <HAL_TIM_Base_MspInit+0x114>)
 800c68c:	f043 0308 	orr.w	r3, r3, #8
 800c690:	6413      	str	r3, [r2, #64]	; 0x40
 800c692:	4b20      	ldr	r3, [pc, #128]	; (800c714 <HAL_TIM_Base_MspInit+0x114>)
 800c694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c696:	f003 0308 	and.w	r3, r3, #8
 800c69a:	60fb      	str	r3, [r7, #12]
 800c69c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800c69e:	2200      	movs	r2, #0
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	2032      	movs	r0, #50	; 0x32
 800c6a4:	f001 fc49 	bl	800df3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800c6a8:	2032      	movs	r0, #50	; 0x32
 800c6aa:	f001 fc62 	bl	800df72 <HAL_NVIC_EnableIRQ>
}
 800c6ae:	e02a      	b.n	800c706 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a19      	ldr	r2, [pc, #100]	; (800c71c <HAL_TIM_Base_MspInit+0x11c>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d125      	bne.n	800c706 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60bb      	str	r3, [r7, #8]
 800c6be:	4b15      	ldr	r3, [pc, #84]	; (800c714 <HAL_TIM_Base_MspInit+0x114>)
 800c6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6c2:	4a14      	ldr	r2, [pc, #80]	; (800c714 <HAL_TIM_Base_MspInit+0x114>)
 800c6c4:	f043 0302 	orr.w	r3, r3, #2
 800c6c8:	6453      	str	r3, [r2, #68]	; 0x44
 800c6ca:	4b12      	ldr	r3, [pc, #72]	; (800c714 <HAL_TIM_Base_MspInit+0x114>)
 800c6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6ce:	f003 0302 	and.w	r3, r3, #2
 800c6d2:	60bb      	str	r3, [r7, #8]
 800c6d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	2102      	movs	r1, #2
 800c6da:	202c      	movs	r0, #44	; 0x2c
 800c6dc:	f001 fc2d 	bl	800df3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800c6e0:	202c      	movs	r0, #44	; 0x2c
 800c6e2:	f001 fc46 	bl	800df72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	202d      	movs	r0, #45	; 0x2d
 800c6ec:	f001 fc25 	bl	800df3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800c6f0:	202d      	movs	r0, #45	; 0x2d
 800c6f2:	f001 fc3e 	bl	800df72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	202e      	movs	r0, #46	; 0x2e
 800c6fc:	f001 fc1d 	bl	800df3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800c700:	202e      	movs	r0, #46	; 0x2e
 800c702:	f001 fc36 	bl	800df72 <HAL_NVIC_EnableIRQ>
}
 800c706:	bf00      	nop
 800c708:	3718      	adds	r7, #24
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	40010000 	.word	0x40010000
 800c714:	40023800 	.word	0x40023800
 800c718:	40000c00 	.word	0x40000c00
 800c71c:	40010400 	.word	0x40010400

0800c720 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b08c      	sub	sp, #48	; 0x30
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c728:	f107 031c 	add.w	r3, r7, #28
 800c72c:	2200      	movs	r2, #0
 800c72e:	601a      	str	r2, [r3, #0]
 800c730:	605a      	str	r2, [r3, #4]
 800c732:	609a      	str	r2, [r3, #8]
 800c734:	60da      	str	r2, [r3, #12]
 800c736:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a3a      	ldr	r2, [pc, #232]	; (800c828 <HAL_TIM_Encoder_MspInit+0x108>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d134      	bne.n	800c7ac <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c742:	2300      	movs	r3, #0
 800c744:	61bb      	str	r3, [r7, #24]
 800c746:	4b39      	ldr	r3, [pc, #228]	; (800c82c <HAL_TIM_Encoder_MspInit+0x10c>)
 800c748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74a:	4a38      	ldr	r2, [pc, #224]	; (800c82c <HAL_TIM_Encoder_MspInit+0x10c>)
 800c74c:	f043 0302 	orr.w	r3, r3, #2
 800c750:	6413      	str	r3, [r2, #64]	; 0x40
 800c752:	4b36      	ldr	r3, [pc, #216]	; (800c82c <HAL_TIM_Encoder_MspInit+0x10c>)
 800c754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c756:	f003 0302 	and.w	r3, r3, #2
 800c75a:	61bb      	str	r3, [r7, #24]
 800c75c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c75e:	2300      	movs	r3, #0
 800c760:	617b      	str	r3, [r7, #20]
 800c762:	4b32      	ldr	r3, [pc, #200]	; (800c82c <HAL_TIM_Encoder_MspInit+0x10c>)
 800c764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c766:	4a31      	ldr	r2, [pc, #196]	; (800c82c <HAL_TIM_Encoder_MspInit+0x10c>)
 800c768:	f043 0301 	orr.w	r3, r3, #1
 800c76c:	6313      	str	r3, [r2, #48]	; 0x30
 800c76e:	4b2f      	ldr	r3, [pc, #188]	; (800c82c <HAL_TIM_Encoder_MspInit+0x10c>)
 800c770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c772:	f003 0301 	and.w	r3, r3, #1
 800c776:	617b      	str	r3, [r7, #20]
 800c778:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c77a:	23c0      	movs	r3, #192	; 0xc0
 800c77c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c77e:	2302      	movs	r3, #2
 800c780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c782:	2300      	movs	r3, #0
 800c784:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c786:	2300      	movs	r3, #0
 800c788:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c78a:	2302      	movs	r3, #2
 800c78c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c78e:	f107 031c 	add.w	r3, r7, #28
 800c792:	4619      	mov	r1, r3
 800c794:	4826      	ldr	r0, [pc, #152]	; (800c830 <HAL_TIM_Encoder_MspInit+0x110>)
 800c796:	f002 f97d 	bl	800ea94 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800c79a:	2200      	movs	r2, #0
 800c79c:	2100      	movs	r1, #0
 800c79e:	201d      	movs	r0, #29
 800c7a0:	f001 fbcb 	bl	800df3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800c7a4:	201d      	movs	r0, #29
 800c7a6:	f001 fbe4 	bl	800df72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800c7aa:	e038      	b.n	800c81e <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a20      	ldr	r2, [pc, #128]	; (800c834 <HAL_TIM_Encoder_MspInit+0x114>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d133      	bne.n	800c81e <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	613b      	str	r3, [r7, #16]
 800c7ba:	4b1c      	ldr	r3, [pc, #112]	; (800c82c <HAL_TIM_Encoder_MspInit+0x10c>)
 800c7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7be:	4a1b      	ldr	r2, [pc, #108]	; (800c82c <HAL_TIM_Encoder_MspInit+0x10c>)
 800c7c0:	f043 0304 	orr.w	r3, r3, #4
 800c7c4:	6413      	str	r3, [r2, #64]	; 0x40
 800c7c6:	4b19      	ldr	r3, [pc, #100]	; (800c82c <HAL_TIM_Encoder_MspInit+0x10c>)
 800c7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ca:	f003 0304 	and.w	r3, r3, #4
 800c7ce:	613b      	str	r3, [r7, #16]
 800c7d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	60fb      	str	r3, [r7, #12]
 800c7d6:	4b15      	ldr	r3, [pc, #84]	; (800c82c <HAL_TIM_Encoder_MspInit+0x10c>)
 800c7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7da:	4a14      	ldr	r2, [pc, #80]	; (800c82c <HAL_TIM_Encoder_MspInit+0x10c>)
 800c7dc:	f043 0302 	orr.w	r3, r3, #2
 800c7e0:	6313      	str	r3, [r2, #48]	; 0x30
 800c7e2:	4b12      	ldr	r3, [pc, #72]	; (800c82c <HAL_TIM_Encoder_MspInit+0x10c>)
 800c7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7e6:	f003 0302 	and.w	r3, r3, #2
 800c7ea:	60fb      	str	r3, [r7, #12]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c7ee:	23c0      	movs	r3, #192	; 0xc0
 800c7f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7f2:	2302      	movs	r3, #2
 800c7f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800c7fe:	2302      	movs	r3, #2
 800c800:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c802:	f107 031c 	add.w	r3, r7, #28
 800c806:	4619      	mov	r1, r3
 800c808:	480b      	ldr	r0, [pc, #44]	; (800c838 <HAL_TIM_Encoder_MspInit+0x118>)
 800c80a:	f002 f943 	bl	800ea94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800c80e:	2200      	movs	r2, #0
 800c810:	2100      	movs	r1, #0
 800c812:	201e      	movs	r0, #30
 800c814:	f001 fb91 	bl	800df3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800c818:	201e      	movs	r0, #30
 800c81a:	f001 fbaa 	bl	800df72 <HAL_NVIC_EnableIRQ>
}
 800c81e:	bf00      	nop
 800c820:	3730      	adds	r7, #48	; 0x30
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	40000400 	.word	0x40000400
 800c82c:	40023800 	.word	0x40023800
 800c830:	40020000 	.word	0x40020000
 800c834:	40000800 	.word	0x40000800
 800c838:	40020400 	.word	0x40020400

0800c83c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08c      	sub	sp, #48	; 0x30
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c844:	f107 031c 	add.w	r3, r7, #28
 800c848:	2200      	movs	r2, #0
 800c84a:	601a      	str	r2, [r3, #0]
 800c84c:	605a      	str	r2, [r3, #4]
 800c84e:	609a      	str	r2, [r3, #8]
 800c850:	60da      	str	r2, [r3, #12]
 800c852:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c85c:	d11e      	bne.n	800c89c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c85e:	2300      	movs	r3, #0
 800c860:	61bb      	str	r3, [r7, #24]
 800c862:	4b43      	ldr	r3, [pc, #268]	; (800c970 <HAL_TIM_MspPostInit+0x134>)
 800c864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c866:	4a42      	ldr	r2, [pc, #264]	; (800c970 <HAL_TIM_MspPostInit+0x134>)
 800c868:	f043 0301 	orr.w	r3, r3, #1
 800c86c:	6313      	str	r3, [r2, #48]	; 0x30
 800c86e:	4b40      	ldr	r3, [pc, #256]	; (800c970 <HAL_TIM_MspPostInit+0x134>)
 800c870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c872:	f003 0301 	and.w	r3, r3, #1
 800c876:	61bb      	str	r3, [r7, #24]
 800c878:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c87a:	2308      	movs	r3, #8
 800c87c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c87e:	2302      	movs	r3, #2
 800c880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c882:	2300      	movs	r3, #0
 800c884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c886:	2303      	movs	r3, #3
 800c888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c88a:	2301      	movs	r3, #1
 800c88c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c88e:	f107 031c 	add.w	r3, r7, #28
 800c892:	4619      	mov	r1, r3
 800c894:	4837      	ldr	r0, [pc, #220]	; (800c974 <HAL_TIM_MspPostInit+0x138>)
 800c896:	f002 f8fd 	bl	800ea94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800c89a:	e064      	b.n	800c966 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a35      	ldr	r2, [pc, #212]	; (800c978 <HAL_TIM_MspPostInit+0x13c>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d11e      	bne.n	800c8e4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	617b      	str	r3, [r7, #20]
 800c8aa:	4b31      	ldr	r3, [pc, #196]	; (800c970 <HAL_TIM_MspPostInit+0x134>)
 800c8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ae:	4a30      	ldr	r2, [pc, #192]	; (800c970 <HAL_TIM_MspPostInit+0x134>)
 800c8b0:	f043 0301 	orr.w	r3, r3, #1
 800c8b4:	6313      	str	r3, [r2, #48]	; 0x30
 800c8b6:	4b2e      	ldr	r3, [pc, #184]	; (800c970 <HAL_TIM_MspPostInit+0x134>)
 800c8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ba:	f003 0301 	and.w	r3, r3, #1
 800c8be:	617b      	str	r3, [r7, #20]
 800c8c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800c8c2:	2302      	movs	r3, #2
 800c8c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8c6:	2302      	movs	r3, #2
 800c8c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800c8d2:	2302      	movs	r3, #2
 800c8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8d6:	f107 031c 	add.w	r3, r7, #28
 800c8da:	4619      	mov	r1, r3
 800c8dc:	4825      	ldr	r0, [pc, #148]	; (800c974 <HAL_TIM_MspPostInit+0x138>)
 800c8de:	f002 f8d9 	bl	800ea94 <HAL_GPIO_Init>
}
 800c8e2:	e040      	b.n	800c966 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a24      	ldr	r2, [pc, #144]	; (800c97c <HAL_TIM_MspPostInit+0x140>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d13b      	bne.n	800c966 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	613b      	str	r3, [r7, #16]
 800c8f2:	4b1f      	ldr	r3, [pc, #124]	; (800c970 <HAL_TIM_MspPostInit+0x134>)
 800c8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8f6:	4a1e      	ldr	r2, [pc, #120]	; (800c970 <HAL_TIM_MspPostInit+0x134>)
 800c8f8:	f043 0301 	orr.w	r3, r3, #1
 800c8fc:	6313      	str	r3, [r2, #48]	; 0x30
 800c8fe:	4b1c      	ldr	r3, [pc, #112]	; (800c970 <HAL_TIM_MspPostInit+0x134>)
 800c900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c902:	f003 0301 	and.w	r3, r3, #1
 800c906:	613b      	str	r3, [r7, #16]
 800c908:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c90a:	2300      	movs	r3, #0
 800c90c:	60fb      	str	r3, [r7, #12]
 800c90e:	4b18      	ldr	r3, [pc, #96]	; (800c970 <HAL_TIM_MspPostInit+0x134>)
 800c910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c912:	4a17      	ldr	r2, [pc, #92]	; (800c970 <HAL_TIM_MspPostInit+0x134>)
 800c914:	f043 0304 	orr.w	r3, r3, #4
 800c918:	6313      	str	r3, [r2, #48]	; 0x30
 800c91a:	4b15      	ldr	r3, [pc, #84]	; (800c970 <HAL_TIM_MspPostInit+0x134>)
 800c91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c91e:	f003 0304 	and.w	r3, r3, #4
 800c922:	60fb      	str	r3, [r7, #12]
 800c924:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800c926:	2320      	movs	r3, #32
 800c928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c92a:	2302      	movs	r3, #2
 800c92c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c92e:	2300      	movs	r3, #0
 800c930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c932:	2300      	movs	r3, #0
 800c934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800c936:	2303      	movs	r3, #3
 800c938:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c93a:	f107 031c 	add.w	r3, r7, #28
 800c93e:	4619      	mov	r1, r3
 800c940:	480c      	ldr	r0, [pc, #48]	; (800c974 <HAL_TIM_MspPostInit+0x138>)
 800c942:	f002 f8a7 	bl	800ea94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800c946:	2340      	movs	r3, #64	; 0x40
 800c948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c94a:	2302      	movs	r3, #2
 800c94c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c94e:	2300      	movs	r3, #0
 800c950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c952:	2300      	movs	r3, #0
 800c954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800c956:	2303      	movs	r3, #3
 800c958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c95a:	f107 031c 	add.w	r3, r7, #28
 800c95e:	4619      	mov	r1, r3
 800c960:	4807      	ldr	r0, [pc, #28]	; (800c980 <HAL_TIM_MspPostInit+0x144>)
 800c962:	f002 f897 	bl	800ea94 <HAL_GPIO_Init>
}
 800c966:	bf00      	nop
 800c968:	3730      	adds	r7, #48	; 0x30
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	40023800 	.word	0x40023800
 800c974:	40020000 	.word	0x40020000
 800c978:	40000c00 	.word	0x40000c00
 800c97c:	40010400 	.word	0x40010400
 800c980:	40020800 	.word	0x40020800

0800c984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b08a      	sub	sp, #40	; 0x28
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c98c:	f107 0314 	add.w	r3, r7, #20
 800c990:	2200      	movs	r2, #0
 800c992:	601a      	str	r2, [r3, #0]
 800c994:	605a      	str	r2, [r3, #4]
 800c996:	609a      	str	r2, [r3, #8]
 800c998:	60da      	str	r2, [r3, #12]
 800c99a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a19      	ldr	r2, [pc, #100]	; (800ca08 <HAL_UART_MspInit+0x84>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d12c      	bne.n	800ca00 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	613b      	str	r3, [r7, #16]
 800c9aa:	4b18      	ldr	r3, [pc, #96]	; (800ca0c <HAL_UART_MspInit+0x88>)
 800c9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9ae:	4a17      	ldr	r2, [pc, #92]	; (800ca0c <HAL_UART_MspInit+0x88>)
 800c9b0:	f043 0310 	orr.w	r3, r3, #16
 800c9b4:	6453      	str	r3, [r2, #68]	; 0x44
 800c9b6:	4b15      	ldr	r3, [pc, #84]	; (800ca0c <HAL_UART_MspInit+0x88>)
 800c9b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9ba:	f003 0310 	and.w	r3, r3, #16
 800c9be:	613b      	str	r3, [r7, #16]
 800c9c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	60fb      	str	r3, [r7, #12]
 800c9c6:	4b11      	ldr	r3, [pc, #68]	; (800ca0c <HAL_UART_MspInit+0x88>)
 800c9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ca:	4a10      	ldr	r2, [pc, #64]	; (800ca0c <HAL_UART_MspInit+0x88>)
 800c9cc:	f043 0301 	orr.w	r3, r3, #1
 800c9d0:	6313      	str	r3, [r2, #48]	; 0x30
 800c9d2:	4b0e      	ldr	r3, [pc, #56]	; (800ca0c <HAL_UART_MspInit+0x88>)
 800c9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9d6:	f003 0301 	and.w	r3, r3, #1
 800c9da:	60fb      	str	r3, [r7, #12]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800c9de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800c9e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9e4:	2302      	movs	r3, #2
 800c9e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9ec:	2303      	movs	r3, #3
 800c9ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c9f0:	2307      	movs	r3, #7
 800c9f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c9f4:	f107 0314 	add.w	r3, r7, #20
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	4805      	ldr	r0, [pc, #20]	; (800ca10 <HAL_UART_MspInit+0x8c>)
 800c9fc:	f002 f84a 	bl	800ea94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800ca00:	bf00      	nop
 800ca02:	3728      	adds	r7, #40	; 0x28
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	40011000 	.word	0x40011000
 800ca0c:	40023800 	.word	0x40023800
 800ca10:	40020000 	.word	0x40020000

0800ca14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ca14:	b480      	push	{r7}
 800ca16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ca18:	e7fe      	b.n	800ca18 <NMI_Handler+0x4>

0800ca1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ca1a:	b480      	push	{r7}
 800ca1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ca1e:	e7fe      	b.n	800ca1e <HardFault_Handler+0x4>

0800ca20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ca20:	b480      	push	{r7}
 800ca22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ca24:	e7fe      	b.n	800ca24 <MemManage_Handler+0x4>

0800ca26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ca26:	b480      	push	{r7}
 800ca28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ca2a:	e7fe      	b.n	800ca2a <BusFault_Handler+0x4>

0800ca2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ca30:	e7fe      	b.n	800ca30 <UsageFault_Handler+0x4>

0800ca32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ca32:	b480      	push	{r7}
 800ca34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ca36:	bf00      	nop
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ca40:	b480      	push	{r7}
 800ca42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ca44:	bf00      	nop
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr

0800ca4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ca4e:	b480      	push	{r7}
 800ca50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ca52:	bf00      	nop
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ca60:	f000 fbbc 	bl	800d1dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ca64:	bf00      	nop
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800ca6c:	f001 fe7a 	bl	800e764 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800ca70:	bf00      	nop
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800ca78:	4803      	ldr	r0, [pc, #12]	; (800ca88 <ADC_IRQHandler+0x14>)
 800ca7a:	f000 fc34 	bl	800d2e6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800ca7e:	4803      	ldr	r0, [pc, #12]	; (800ca8c <ADC_IRQHandler+0x18>)
 800ca80:	f000 fc31 	bl	800d2e6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800ca84:	bf00      	nop
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	20000730 	.word	0x20000730
 800ca8c:	20000610 	.word	0x20000610

0800ca90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ca94:	4802      	ldr	r0, [pc, #8]	; (800caa0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800ca96:	f003 f9c9 	bl	800fe2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800ca9a:	bf00      	nop
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	20000818 	.word	0x20000818

0800caa4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800caa8:	4802      	ldr	r0, [pc, #8]	; (800cab4 <TIM2_IRQHandler+0x10>)
 800caaa:	f003 f9bf 	bl	800fe2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800caae:	bf00      	nop
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	20000858 	.word	0x20000858

0800cab8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800cabc:	4802      	ldr	r0, [pc, #8]	; (800cac8 <TIM3_IRQHandler+0x10>)
 800cabe:	f003 f9b5 	bl	800fe2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800cac2:	bf00      	nop
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	20000698 	.word	0x20000698

0800cacc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800cad0:	4802      	ldr	r0, [pc, #8]	; (800cadc <TIM4_IRQHandler+0x10>)
 800cad2:	f003 f9ab 	bl	800fe2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800cad6:	bf00      	nop
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	200005d0 	.word	0x200005d0

0800cae0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cae4:	4802      	ldr	r0, [pc, #8]	; (800caf0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800cae6:	f003 f9a1 	bl	800fe2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800caea:	bf00      	nop
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	20000590 	.word	0x20000590

0800caf4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800caf8:	4802      	ldr	r0, [pc, #8]	; (800cb04 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800cafa:	f003 f997 	bl	800fe2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800cafe:	bf00      	nop
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	20000590 	.word	0x20000590

0800cb08 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cb0c:	4802      	ldr	r0, [pc, #8]	; (800cb18 <TIM8_CC_IRQHandler+0x10>)
 800cb0e:	f003 f98d 	bl	800fe2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800cb12:	bf00      	nop
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	20000590 	.word	0x20000590

0800cb1c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800cb20:	4802      	ldr	r0, [pc, #8]	; (800cb2c <TIM5_IRQHandler+0x10>)
 800cb22:	f003 f983 	bl	800fe2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800cb26:	bf00      	nop
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	20000658 	.word	0x20000658

0800cb30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800cb34:	4802      	ldr	r0, [pc, #8]	; (800cb40 <DMA2_Stream0_IRQHandler+0x10>)
 800cb36:	f001 fbad 	bl	800e294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800cb3a:	bf00      	nop
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	200007b8 	.word	0x200007b8

0800cb44 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800cb48:	4802      	ldr	r0, [pc, #8]	; (800cb54 <DMA2_Stream2_IRQHandler+0x10>)
 800cb4a:	f001 fba3 	bl	800e294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800cb4e:	bf00      	nop
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	20000898 	.word	0x20000898

0800cb58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cb5c:	4b08      	ldr	r3, [pc, #32]	; (800cb80 <SystemInit+0x28>)
 800cb5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb62:	4a07      	ldr	r2, [pc, #28]	; (800cb80 <SystemInit+0x28>)
 800cb64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cb6c:	4b04      	ldr	r3, [pc, #16]	; (800cb80 <SystemInit+0x28>)
 800cb6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cb72:	609a      	str	r2, [r3, #8]
#endif
}
 800cb74:	bf00      	nop
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	e000ed00 	.word	0xe000ed00

0800cb84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b086      	sub	sp, #24
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cb90:	2300      	movs	r3, #0
 800cb92:	617b      	str	r3, [r7, #20]
 800cb94:	e00a      	b.n	800cbac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800cb96:	f3af 8000 	nop.w
 800cb9a:	4601      	mov	r1, r0
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	1c5a      	adds	r2, r3, #1
 800cba0:	60ba      	str	r2, [r7, #8]
 800cba2:	b2ca      	uxtb	r2, r1
 800cba4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	3301      	adds	r3, #1
 800cbaa:	617b      	str	r3, [r7, #20]
 800cbac:	697a      	ldr	r2, [r7, #20]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	dbf0      	blt.n	800cb96 <_read+0x12>
	}

return len;
 800cbb4:	687b      	ldr	r3, [r7, #4]
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3718      	adds	r7, #24
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b086      	sub	sp, #24
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	60f8      	str	r0, [r7, #12]
 800cbc6:	60b9      	str	r1, [r7, #8]
 800cbc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cbca:	2300      	movs	r3, #0
 800cbcc:	617b      	str	r3, [r7, #20]
 800cbce:	e009      	b.n	800cbe4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	1c5a      	adds	r2, r3, #1
 800cbd4:	60ba      	str	r2, [r7, #8]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7fe fe01 	bl	800b7e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	617b      	str	r3, [r7, #20]
 800cbe4:	697a      	ldr	r2, [r7, #20]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	dbf1      	blt.n	800cbd0 <_write+0x12>
	}
	return len;
 800cbec:	687b      	ldr	r3, [r7, #4]
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3718      	adds	r7, #24
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <_close>:

int _close(int file)
{
 800cbf6:	b480      	push	{r7}
 800cbf8:	b083      	sub	sp, #12
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	6078      	str	r0, [r7, #4]
	return -1;
 800cbfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	370c      	adds	r7, #12
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr

0800cc0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cc0e:	b480      	push	{r7}
 800cc10:	b083      	sub	sp, #12
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
 800cc16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cc1e:	605a      	str	r2, [r3, #4]
	return 0;
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	370c      	adds	r7, #12
 800cc26:	46bd      	mov	sp, r7
 800cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2c:	4770      	bx	lr

0800cc2e <_isatty>:

int _isatty(int file)
{
 800cc2e:	b480      	push	{r7}
 800cc30:	b083      	sub	sp, #12
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
	return 1;
 800cc36:	2301      	movs	r3, #1
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	370c      	adds	r7, #12
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	607a      	str	r2, [r7, #4]
	return 0;
 800cc50:	2300      	movs	r3, #0
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3714      	adds	r7, #20
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr
	...

0800cc60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b086      	sub	sp, #24
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800cc68:	4a14      	ldr	r2, [pc, #80]	; (800ccbc <_sbrk+0x5c>)
 800cc6a:	4b15      	ldr	r3, [pc, #84]	; (800ccc0 <_sbrk+0x60>)
 800cc6c:	1ad3      	subs	r3, r2, r3
 800cc6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800cc74:	4b13      	ldr	r3, [pc, #76]	; (800ccc4 <_sbrk+0x64>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d102      	bne.n	800cc82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800cc7c:	4b11      	ldr	r3, [pc, #68]	; (800ccc4 <_sbrk+0x64>)
 800cc7e:	4a12      	ldr	r2, [pc, #72]	; (800ccc8 <_sbrk+0x68>)
 800cc80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800cc82:	4b10      	ldr	r3, [pc, #64]	; (800ccc4 <_sbrk+0x64>)
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	4413      	add	r3, r2
 800cc8a:	693a      	ldr	r2, [r7, #16]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d207      	bcs.n	800cca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800cc90:	f004 fdb2 	bl	80117f8 <__errno>
 800cc94:	4602      	mov	r2, r0
 800cc96:	230c      	movs	r3, #12
 800cc98:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800cc9a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc9e:	e009      	b.n	800ccb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800cca0:	4b08      	ldr	r3, [pc, #32]	; (800ccc4 <_sbrk+0x64>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800cca6:	4b07      	ldr	r3, [pc, #28]	; (800ccc4 <_sbrk+0x64>)
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4413      	add	r3, r2
 800ccae:	4a05      	ldr	r2, [pc, #20]	; (800ccc4 <_sbrk+0x64>)
 800ccb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3718      	adds	r7, #24
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	20020000 	.word	0x20020000
 800ccc0:	00000400 	.word	0x00000400
 800ccc4:	20000428 	.word	0x20000428
 800ccc8:	20000928 	.word	0x20000928

0800cccc <ADCStart>:

uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800cccc:	b580      	push	{r7, lr}
 800ccce:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800ccd0:	2203      	movs	r2, #3
 800ccd2:	490a      	ldr	r1, [pc, #40]	; (800ccfc <ADCStart+0x30>)
 800ccd4:	480a      	ldr	r0, [pc, #40]	; (800cd00 <ADCStart+0x34>)
 800ccd6:	f000 fc47 	bl	800d568 <HAL_ADC_Start_DMA>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d001      	beq.n	800cce4 <ADCStart+0x18>
	{
		Error_Handler();
 800cce0:	f7ff fb0c 	bl	800c2fc <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800cce4:	2202      	movs	r2, #2
 800cce6:	4907      	ldr	r1, [pc, #28]	; (800cd04 <ADCStart+0x38>)
 800cce8:	4807      	ldr	r0, [pc, #28]	; (800cd08 <ADCStart+0x3c>)
 800ccea:	f000 fc3d 	bl	800d568 <HAL_ADC_Start_DMA>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d001      	beq.n	800ccf8 <ADCStart+0x2c>
	{
		Error_Handler();
 800ccf4:	f7ff fb02 	bl	800c2fc <Error_Handler>
	}

}
 800ccf8:	bf00      	nop
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	2000042c 	.word	0x2000042c
 800cd00:	20000730 	.word	0x20000730
 800cd04:	20000438 	.word	0x20000438
 800cd08:	20000610 	.word	0x20000610

0800cd0c <ADCStop>:
void ADCStop()
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800cd10:	4808      	ldr	r0, [pc, #32]	; (800cd34 <ADCStop+0x28>)
 800cd12:	f000 fd1b 	bl	800d74c <HAL_ADC_Stop_DMA>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d001      	beq.n	800cd20 <ADCStop+0x14>
	{
		Error_Handler();
 800cd1c:	f7ff faee 	bl	800c2fc <Error_Handler>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800cd20:	4805      	ldr	r0, [pc, #20]	; (800cd38 <ADCStop+0x2c>)
 800cd22:	f000 fd13 	bl	800d74c <HAL_ADC_Stop_DMA>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d001      	beq.n	800cd30 <ADCStop+0x24>
	{
		Error_Handler();
 800cd2c:	f7ff fae6 	bl	800c2fc <Error_Handler>
	}
}
 800cd30:	bf00      	nop
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	20000730 	.word	0x20000730
 800cd38:	20000610 	.word	0x20000610

0800cd3c <FLASH_Unlock>:
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 800cd40:	4b05      	ldr	r3, [pc, #20]	; (800cd58 <FLASH_Unlock+0x1c>)
 800cd42:	4a06      	ldr	r2, [pc, #24]	; (800cd5c <FLASH_Unlock+0x20>)
 800cd44:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800cd46:	4b04      	ldr	r3, [pc, #16]	; (800cd58 <FLASH_Unlock+0x1c>)
 800cd48:	4a05      	ldr	r2, [pc, #20]	; (800cd60 <FLASH_Unlock+0x24>)
 800cd4a:	605a      	str	r2, [r3, #4]
}
 800cd4c:	bf00      	nop
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	40023c00 	.word	0x40023c00
 800cd5c:	45670123 	.word	0x45670123
 800cd60:	cdef89ab 	.word	0xcdef89ab

0800cd64 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800cd64:	b480      	push	{r7}
 800cd66:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800cd68:	4b05      	ldr	r3, [pc, #20]	; (800cd80 <FLASH_Lock+0x1c>)
 800cd6a:	691b      	ldr	r3, [r3, #16]
 800cd6c:	4a04      	ldr	r2, [pc, #16]	; (800cd80 <FLASH_Lock+0x1c>)
 800cd6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd72:	6113      	str	r3, [r2, #16]

}
 800cd74:	bf00      	nop
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr
 800cd7e:	bf00      	nop
 800cd80:	40023c00 	.word	0x40023c00

0800cd84 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800cd84:	b480      	push	{r7}
 800cd86:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800cd88:	bf00      	nop
 800cd8a:	4b05      	ldr	r3, [pc, #20]	; (800cda0 <FLASH_WaitBusy+0x1c>)
 800cd8c:	68db      	ldr	r3, [r3, #12]
 800cd8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d1f9      	bne.n	800cd8a <FLASH_WaitBusy+0x6>
}
 800cd96:	bf00      	nop
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr
 800cda0:	40023c00 	.word	0x40023c00

0800cda4 <FLASH_Write_Word>:

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800cdae:	f7ff ffc5 	bl	800cd3c <FLASH_Unlock>

	FLASH_WaitBusy();
 800cdb2:	f7ff ffe7 	bl	800cd84 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800cdb6:	4b0e      	ldr	r3, [pc, #56]	; (800cdf0 <FLASH_Write_Word+0x4c>)
 800cdb8:	691b      	ldr	r3, [r3, #16]
 800cdba:	4a0d      	ldr	r2, [pc, #52]	; (800cdf0 <FLASH_Write_Word+0x4c>)
 800cdbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cdc0:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800cdc2:	4b0b      	ldr	r3, [pc, #44]	; (800cdf0 <FLASH_Write_Word+0x4c>)
 800cdc4:	691b      	ldr	r3, [r3, #16]
 800cdc6:	4a0a      	ldr	r2, [pc, #40]	; (800cdf0 <FLASH_Write_Word+0x4c>)
 800cdc8:	f043 0301 	orr.w	r3, r3, #1
 800cdcc:	6113      	str	r3, [r2, #16]

	*(__IO uint32_t*)address = data;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	683a      	ldr	r2, [r7, #0]
 800cdd2:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800cdd4:	f7ff ffd6 	bl	800cd84 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800cdd8:	4b05      	ldr	r3, [pc, #20]	; (800cdf0 <FLASH_Write_Word+0x4c>)
 800cdda:	691b      	ldr	r3, [r3, #16]
 800cddc:	4a04      	ldr	r2, [pc, #16]	; (800cdf0 <FLASH_Write_Word+0x4c>)
 800cdde:	f023 0301 	bic.w	r3, r3, #1
 800cde2:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800cde4:	f7ff ffbe 	bl	800cd64 <FLASH_Lock>
}
 800cde8:	bf00      	nop
 800cdea:	3708      	adds	r7, #8
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	40023c00 	.word	0x40023c00

0800cdf4 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800cdf8:	213c      	movs	r1, #60	; 0x3c
 800cdfa:	4804      	ldr	r0, [pc, #16]	; (800ce0c <EncoderStart+0x18>)
 800cdfc:	f002 ff98 	bl	800fd30 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800ce00:	213c      	movs	r1, #60	; 0x3c
 800ce02:	4803      	ldr	r0, [pc, #12]	; (800ce10 <EncoderStart+0x1c>)
 800ce04:	f002 ff94 	bl	800fd30 <HAL_TIM_Encoder_Start>
}
 800ce08:	bf00      	nop
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	20000698 	.word	0x20000698
 800ce10:	200005d0 	.word	0x200005d0

0800ce14 <EncoderStop>:
//PulseInit((int *) (&(TIM3->CNT) ), INITIAL_PULSE_L);
//PulseInit((int *) (&(TIM4->CNT) ), INITIAL_PUSEL_R );
void EncoderStop()
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 800ce18:	213c      	movs	r1, #60	; 0x3c
 800ce1a:	4804      	ldr	r0, [pc, #16]	; (800ce2c <EncoderStop+0x18>)
 800ce1c:	f002 ffbf 	bl	800fd9e <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4,TIM_CHANNEL_ALL);
 800ce20:	213c      	movs	r1, #60	; 0x3c
 800ce22:	4803      	ldr	r0, [pc, #12]	; (800ce30 <EncoderStop+0x1c>)
 800ce24:	f002 ffbb 	bl	800fd9e <HAL_TIM_Encoder_Stop>
}
 800ce28:	bf00      	nop
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	20000698 	.word	0x20000698
 800ce30:	200005d0 	.word	0x200005d0

0800ce34 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800ce38:	2100      	movs	r1, #0
 800ce3a:	4804      	ldr	r0, [pc, #16]	; (800ce4c <EmitterON+0x18>)
 800ce3c:	f002 fd54 	bl	800f8e8 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800ce40:	2100      	movs	r1, #0
 800ce42:	4802      	ldr	r0, [pc, #8]	; (800ce4c <EmitterON+0x18>)
 800ce44:	f003 fe0f 	bl	8010a66 <HAL_TIMEx_OCN_Start_IT>

}
 800ce48:	bf00      	nop
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	20000590 	.word	0x20000590

0800ce50 <EmitterOFF>:
void EmitterOFF()
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800ce54:	2100      	movs	r1, #0
 800ce56:	4804      	ldr	r0, [pc, #16]	; (800ce68 <EmitterOFF+0x18>)
 800ce58:	f002 fdca 	bl	800f9f0 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	4802      	ldr	r0, [pc, #8]	; (800ce68 <EmitterOFF+0x18>)
 800ce60:	f003 fe56 	bl	8010b10 <HAL_TIMEx_OCN_Stop_IT>

}
 800ce64:	bf00      	nop
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	20000590 	.word	0x20000590

0800ce6c <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b07      	cmp	r3, #7
 800ce78:	f200 80ac 	bhi.w	800cfd4 <ChangeLED+0x168>
 800ce7c:	a201      	add	r2, pc, #4	; (adr r2, 800ce84 <ChangeLED+0x18>)
 800ce7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce82:	bf00      	nop
 800ce84:	0800cea5 	.word	0x0800cea5
 800ce88:	0800cecb 	.word	0x0800cecb
 800ce8c:	0800cef1 	.word	0x0800cef1
 800ce90:	0800cf17 	.word	0x0800cf17
 800ce94:	0800cf3d 	.word	0x0800cf3d
 800ce98:	0800cf63 	.word	0x0800cf63
 800ce9c:	0800cf89 	.word	0x0800cf89
 800cea0:	0800cfaf 	.word	0x0800cfaf
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800cea4:	2200      	movs	r2, #0
 800cea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ceaa:	484d      	ldr	r0, [pc, #308]	; (800cfe0 <ChangeLED+0x174>)
 800ceac:	f001 ff8c 	bl	800edc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ceb6:	484a      	ldr	r0, [pc, #296]	; (800cfe0 <ChangeLED+0x174>)
 800ceb8:	f001 ff86 	bl	800edc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800cebc:	2200      	movs	r2, #0
 800cebe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cec2:	4848      	ldr	r0, [pc, #288]	; (800cfe4 <ChangeLED+0x178>)
 800cec4:	f001 ff80 	bl	800edc8 <HAL_GPIO_WritePin>
		break;
 800cec8:	e085      	b.n	800cfd6 <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800ceca:	2201      	movs	r2, #1
 800cecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ced0:	4843      	ldr	r0, [pc, #268]	; (800cfe0 <ChangeLED+0x174>)
 800ced2:	f001 ff79 	bl	800edc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800ced6:	2200      	movs	r2, #0
 800ced8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cedc:	4840      	ldr	r0, [pc, #256]	; (800cfe0 <ChangeLED+0x174>)
 800cede:	f001 ff73 	bl	800edc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800cee2:	2200      	movs	r2, #0
 800cee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cee8:	483e      	ldr	r0, [pc, #248]	; (800cfe4 <ChangeLED+0x178>)
 800ceea:	f001 ff6d 	bl	800edc8 <HAL_GPIO_WritePin>
		break;
 800ceee:	e072      	b.n	800cfd6 <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800cef0:	2200      	movs	r2, #0
 800cef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cef6:	483a      	ldr	r0, [pc, #232]	; (800cfe0 <ChangeLED+0x174>)
 800cef8:	f001 ff66 	bl	800edc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800cefc:	2201      	movs	r2, #1
 800cefe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cf02:	4837      	ldr	r0, [pc, #220]	; (800cfe0 <ChangeLED+0x174>)
 800cf04:	f001 ff60 	bl	800edc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf0e:	4835      	ldr	r0, [pc, #212]	; (800cfe4 <ChangeLED+0x178>)
 800cf10:	f001 ff5a 	bl	800edc8 <HAL_GPIO_WritePin>

		break;
 800cf14:	e05f      	b.n	800cfd6 <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800cf16:	2201      	movs	r2, #1
 800cf18:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf1c:	4830      	ldr	r0, [pc, #192]	; (800cfe0 <ChangeLED+0x174>)
 800cf1e:	f001 ff53 	bl	800edc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800cf22:	2201      	movs	r2, #1
 800cf24:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cf28:	482d      	ldr	r0, [pc, #180]	; (800cfe0 <ChangeLED+0x174>)
 800cf2a:	f001 ff4d 	bl	800edc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf34:	482b      	ldr	r0, [pc, #172]	; (800cfe4 <ChangeLED+0x178>)
 800cf36:	f001 ff47 	bl	800edc8 <HAL_GPIO_WritePin>
		break;
 800cf3a:	e04c      	b.n	800cfd6 <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf42:	4827      	ldr	r0, [pc, #156]	; (800cfe0 <ChangeLED+0x174>)
 800cf44:	f001 ff40 	bl	800edc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cf4e:	4824      	ldr	r0, [pc, #144]	; (800cfe0 <ChangeLED+0x174>)
 800cf50:	f001 ff3a 	bl	800edc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800cf54:	2201      	movs	r2, #1
 800cf56:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf5a:	4822      	ldr	r0, [pc, #136]	; (800cfe4 <ChangeLED+0x178>)
 800cf5c:	f001 ff34 	bl	800edc8 <HAL_GPIO_WritePin>
		break;
 800cf60:	e039      	b.n	800cfd6 <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800cf62:	2201      	movs	r2, #1
 800cf64:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf68:	481d      	ldr	r0, [pc, #116]	; (800cfe0 <ChangeLED+0x174>)
 800cf6a:	f001 ff2d 	bl	800edc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800cf6e:	2200      	movs	r2, #0
 800cf70:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cf74:	481a      	ldr	r0, [pc, #104]	; (800cfe0 <ChangeLED+0x174>)
 800cf76:	f001 ff27 	bl	800edc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf80:	4818      	ldr	r0, [pc, #96]	; (800cfe4 <ChangeLED+0x178>)
 800cf82:	f001 ff21 	bl	800edc8 <HAL_GPIO_WritePin>
		break;
 800cf86:	e026      	b.n	800cfd6 <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf8e:	4814      	ldr	r0, [pc, #80]	; (800cfe0 <ChangeLED+0x174>)
 800cf90:	f001 ff1a 	bl	800edc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800cf94:	2201      	movs	r2, #1
 800cf96:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cf9a:	4811      	ldr	r0, [pc, #68]	; (800cfe0 <ChangeLED+0x174>)
 800cf9c:	f001 ff14 	bl	800edc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cfa6:	480f      	ldr	r0, [pc, #60]	; (800cfe4 <ChangeLED+0x178>)
 800cfa8:	f001 ff0e 	bl	800edc8 <HAL_GPIO_WritePin>

		break;
 800cfac:	e013      	b.n	800cfd6 <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800cfae:	2201      	movs	r2, #1
 800cfb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cfb4:	480a      	ldr	r0, [pc, #40]	; (800cfe0 <ChangeLED+0x174>)
 800cfb6:	f001 ff07 	bl	800edc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800cfba:	2201      	movs	r2, #1
 800cfbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cfc0:	4807      	ldr	r0, [pc, #28]	; (800cfe0 <ChangeLED+0x174>)
 800cfc2:	f001 ff01 	bl	800edc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cfcc:	4805      	ldr	r0, [pc, #20]	; (800cfe4 <ChangeLED+0x178>)
 800cfce:	f001 fefb 	bl	800edc8 <HAL_GPIO_WritePin>

		break;
 800cfd2:	e000      	b.n	800cfd6 <ChangeLED+0x16a>
	default: break;
 800cfd4:	bf00      	nop

	}
}
 800cfd6:	bf00      	nop
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	40020800 	.word	0x40020800
 800cfe4:	40020400 	.word	0x40020400

0800cfe8 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800cfec:	210c      	movs	r1, #12
 800cfee:	4809      	ldr	r0, [pc, #36]	; (800d014 <Motor_PWM_Start+0x2c>)
 800cff0:	f002 fdce 	bl	800fb90 <HAL_TIM_PWM_Start>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d001      	beq.n	800cffe <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800cffa:	f7ff f97f 	bl	800c2fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800cffe:	2104      	movs	r1, #4
 800d000:	4805      	ldr	r0, [pc, #20]	; (800d018 <Motor_PWM_Start+0x30>)
 800d002:	f002 fdc5 	bl	800fb90 <HAL_TIM_PWM_Start>
 800d006:	4603      	mov	r3, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d001      	beq.n	800d010 <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800d00c:	f7ff f976 	bl	800c2fc <Error_Handler>
  }
#endif
}
 800d010:	bf00      	nop
 800d012:	bd80      	pop	{r7, pc}
 800d014:	20000858 	.word	0x20000858
 800d018:	20000658 	.word	0x20000658
 800d01c:	00000000 	.word	0x00000000

0800d020 <Motor_Switch>:
  {
	  Error_Handler();
  }
#endif
}
void Motor_Switch(int left, int right){
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	dd05      	ble.n	800d03c <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800d030:	2201      	movs	r2, #1
 800d032:	2104      	movs	r1, #4
 800d034:	4828      	ldr	r0, [pc, #160]	; (800d0d8 <Motor_Switch+0xb8>)
 800d036:	f001 fec7 	bl	800edc8 <HAL_GPIO_WritePin>
 800d03a:	e00a      	b.n	800d052 <Motor_Switch+0x32>

	}
	else  if (left < 0){
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	da07      	bge.n	800d052 <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800d042:	2200      	movs	r2, #0
 800d044:	2104      	movs	r1, #4
 800d046:	4824      	ldr	r0, [pc, #144]	; (800d0d8 <Motor_Switch+0xb8>)
 800d048:	f001 febe 	bl	800edc8 <HAL_GPIO_WritePin>
		left = -left;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	425b      	negs	r3, r3
 800d050:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	dd05      	ble.n	800d064 <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800d058:	2200      	movs	r2, #0
 800d05a:	2101      	movs	r1, #1
 800d05c:	481e      	ldr	r0, [pc, #120]	; (800d0d8 <Motor_Switch+0xb8>)
 800d05e:	f001 feb3 	bl	800edc8 <HAL_GPIO_WritePin>
 800d062:	e00a      	b.n	800d07a <Motor_Switch+0x5a>

	}

	else if (right < 0){
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	da07      	bge.n	800d07a <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800d06a:	2201      	movs	r2, #1
 800d06c:	2101      	movs	r1, #1
 800d06e:	481a      	ldr	r0, [pc, #104]	; (800d0d8 <Motor_Switch+0xb8>)
 800d070:	f001 feaa 	bl	800edc8 <HAL_GPIO_WritePin>
	  	right = -right;
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	425b      	negs	r3, r3
 800d078:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f7fb f98a 	bl	8008394 <__aeabi_i2d>
 800d080:	a313      	add	r3, pc, #76	; (adr r3, 800d0d0 <Motor_Switch+0xb0>)
 800d082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d086:	f7fb fc7f 	bl	8008988 <__aeabi_dcmpgt>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d002      	beq.n	800d096 <Motor_Switch+0x76>
 800d090:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800d094:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 800d096:	6838      	ldr	r0, [r7, #0]
 800d098:	f7fb f97c 	bl	8008394 <__aeabi_i2d>
 800d09c:	a30c      	add	r3, pc, #48	; (adr r3, 800d0d0 <Motor_Switch+0xb0>)
 800d09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a2:	f7fb fc71 	bl	8008988 <__aeabi_dcmpgt>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d002      	beq.n	800d0b2 <Motor_Switch+0x92>
 800d0ac:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800d0b0:	603b      	str	r3, [r7, #0]

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800d0b2:	4b0a      	ldr	r3, [pc, #40]	; (800d0dc <Motor_Switch+0xbc>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800d0ba:	4b09      	ldr	r3, [pc, #36]	; (800d0e0 <Motor_Switch+0xc0>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	683a      	ldr	r2, [r7, #0]
 800d0c0:	639a      	str	r2, [r3, #56]	; 0x38
}
 800d0c2:	bf00      	nop
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	f3af 8000 	nop.w
 800d0d0:	00000000 	.word	0x00000000
 800d0d4:	40a3b000 	.word	0x40a3b000
 800d0d8:	40020000 	.word	0x40020000
 800d0dc:	20000858 	.word	0x20000858
 800d0e0:	20000658 	.word	0x20000658

0800d0e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d0e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d11c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d0e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d0ea:	e003      	b.n	800d0f4 <LoopCopyDataInit>

0800d0ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d0ec:	4b0c      	ldr	r3, [pc, #48]	; (800d120 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d0ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d0f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d0f2:	3104      	adds	r1, #4

0800d0f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d0f4:	480b      	ldr	r0, [pc, #44]	; (800d124 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d0f6:	4b0c      	ldr	r3, [pc, #48]	; (800d128 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d0f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d0fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d0fc:	d3f6      	bcc.n	800d0ec <CopyDataInit>
  ldr  r2, =_sbss
 800d0fe:	4a0b      	ldr	r2, [pc, #44]	; (800d12c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d100:	e002      	b.n	800d108 <LoopFillZerobss>

0800d102 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d102:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d104:	f842 3b04 	str.w	r3, [r2], #4

0800d108 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d108:	4b09      	ldr	r3, [pc, #36]	; (800d130 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d10a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d10c:	d3f9      	bcc.n	800d102 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d10e:	f7ff fd23 	bl	800cb58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d112:	f004 fb77 	bl	8011804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d116:	f7fe fb75 	bl	800b804 <main>
  bx  lr    
 800d11a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d11c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d120:	08014328 	.word	0x08014328
  ldr  r0, =_sdata
 800d124:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d128:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800d12c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800d130:	20000924 	.word	0x20000924

0800d134 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d134:	e7fe      	b.n	800d134 <CAN1_RX0_IRQHandler>
	...

0800d138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d13c:	4b0e      	ldr	r3, [pc, #56]	; (800d178 <HAL_Init+0x40>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a0d      	ldr	r2, [pc, #52]	; (800d178 <HAL_Init+0x40>)
 800d142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d146:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800d148:	4b0b      	ldr	r3, [pc, #44]	; (800d178 <HAL_Init+0x40>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a0a      	ldr	r2, [pc, #40]	; (800d178 <HAL_Init+0x40>)
 800d14e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d152:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d154:	4b08      	ldr	r3, [pc, #32]	; (800d178 <HAL_Init+0x40>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a07      	ldr	r2, [pc, #28]	; (800d178 <HAL_Init+0x40>)
 800d15a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d15e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d160:	2003      	movs	r0, #3
 800d162:	f000 fedf 	bl	800df24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d166:	2000      	movs	r0, #0
 800d168:	f000 f808 	bl	800d17c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d16c:	f7ff f8ca 	bl	800c304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	40023c00 	.word	0x40023c00

0800d17c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d184:	4b12      	ldr	r3, [pc, #72]	; (800d1d0 <HAL_InitTick+0x54>)
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	4b12      	ldr	r3, [pc, #72]	; (800d1d4 <HAL_InitTick+0x58>)
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	4619      	mov	r1, r3
 800d18e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d192:	fbb3 f3f1 	udiv	r3, r3, r1
 800d196:	fbb2 f3f3 	udiv	r3, r2, r3
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 fef7 	bl	800df8e <HAL_SYSTICK_Config>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e00e      	b.n	800d1c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2b0f      	cmp	r3, #15
 800d1ae:	d80a      	bhi.n	800d1c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	6879      	ldr	r1, [r7, #4]
 800d1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b8:	f000 febf 	bl	800df3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d1bc:	4a06      	ldr	r2, [pc, #24]	; (800d1d8 <HAL_InitTick+0x5c>)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	e000      	b.n	800d1c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800d1c6:	2301      	movs	r3, #1
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3708      	adds	r7, #8
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	20000004 	.word	0x20000004
 800d1d4:	2000000c 	.word	0x2000000c
 800d1d8:	20000008 	.word	0x20000008

0800d1dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d1e0:	4b06      	ldr	r3, [pc, #24]	; (800d1fc <HAL_IncTick+0x20>)
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	4b06      	ldr	r3, [pc, #24]	; (800d200 <HAL_IncTick+0x24>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4413      	add	r3, r2
 800d1ec:	4a04      	ldr	r2, [pc, #16]	; (800d200 <HAL_IncTick+0x24>)
 800d1ee:	6013      	str	r3, [r2, #0]
}
 800d1f0:	bf00      	nop
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr
 800d1fa:	bf00      	nop
 800d1fc:	2000000c 	.word	0x2000000c
 800d200:	200008fc 	.word	0x200008fc

0800d204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d204:	b480      	push	{r7}
 800d206:	af00      	add	r7, sp, #0
  return uwTick;
 800d208:	4b03      	ldr	r3, [pc, #12]	; (800d218 <HAL_GetTick+0x14>)
 800d20a:	681b      	ldr	r3, [r3, #0]
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	46bd      	mov	sp, r7
 800d210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d214:	4770      	bx	lr
 800d216:	bf00      	nop
 800d218:	200008fc 	.word	0x200008fc

0800d21c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d224:	f7ff ffee 	bl	800d204 <HAL_GetTick>
 800d228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d234:	d005      	beq.n	800d242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d236:	4b09      	ldr	r3, [pc, #36]	; (800d25c <HAL_Delay+0x40>)
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	461a      	mov	r2, r3
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	4413      	add	r3, r2
 800d240:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800d242:	bf00      	nop
 800d244:	f7ff ffde 	bl	800d204 <HAL_GetTick>
 800d248:	4602      	mov	r2, r0
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	1ad3      	subs	r3, r2, r3
 800d24e:	68fa      	ldr	r2, [r7, #12]
 800d250:	429a      	cmp	r2, r3
 800d252:	d8f7      	bhi.n	800d244 <HAL_Delay+0x28>
  {
  }
}
 800d254:	bf00      	nop
 800d256:	3710      	adds	r7, #16
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	2000000c 	.word	0x2000000c

0800d260 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d268:	2300      	movs	r3, #0
 800d26a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d101      	bne.n	800d276 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800d272:	2301      	movs	r3, #1
 800d274:	e033      	b.n	800d2de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d109      	bne.n	800d292 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f7ff f86e 	bl	800c360 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2200      	movs	r2, #0
 800d288:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d296:	f003 0310 	and.w	r3, r3, #16
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d118      	bne.n	800d2d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800d2a6:	f023 0302 	bic.w	r3, r3, #2
 800d2aa:	f043 0202 	orr.w	r2, r3, #2
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 fbde 	bl	800da74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c2:	f023 0303 	bic.w	r3, r3, #3
 800d2c6:	f043 0201 	orr.w	r2, r3, #1
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	641a      	str	r2, [r3, #64]	; 0x40
 800d2ce:	e001      	b.n	800d2d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800d2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}

0800d2e6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800d2e6:	b580      	push	{r7, lr}
 800d2e8:	b084      	sub	sp, #16
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	60fb      	str	r3, [r7, #12]
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 0302 	and.w	r3, r3, #2
 800d300:	2b02      	cmp	r3, #2
 800d302:	bf0c      	ite	eq
 800d304:	2301      	moveq	r3, #1
 800d306:	2300      	movne	r3, #0
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	f003 0320 	and.w	r3, r3, #32
 800d316:	2b20      	cmp	r3, #32
 800d318:	bf0c      	ite	eq
 800d31a:	2301      	moveq	r3, #1
 800d31c:	2300      	movne	r3, #0
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d049      	beq.n	800d3bc <HAL_ADC_IRQHandler+0xd6>
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d046      	beq.n	800d3bc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d332:	f003 0310 	and.w	r3, r3, #16
 800d336:	2b00      	cmp	r3, #0
 800d338:	d105      	bne.n	800d346 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d350:	2b00      	cmp	r3, #0
 800d352:	d12b      	bne.n	800d3ac <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d127      	bne.n	800d3ac <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d362:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800d366:	2b00      	cmp	r3, #0
 800d368:	d006      	beq.n	800d378 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800d374:	2b00      	cmp	r3, #0
 800d376:	d119      	bne.n	800d3ac <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	685a      	ldr	r2, [r3, #4]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f022 0220 	bic.w	r2, r2, #32
 800d386:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d105      	bne.n	800d3ac <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a4:	f043 0201 	orr.w	r2, r3, #1
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 fa17 	bl	800d7e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f06f 0212 	mvn.w	r2, #18
 800d3ba:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f003 0304 	and.w	r3, r3, #4
 800d3c6:	2b04      	cmp	r3, #4
 800d3c8:	bf0c      	ite	eq
 800d3ca:	2301      	moveq	r3, #1
 800d3cc:	2300      	movne	r3, #0
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3dc:	2b80      	cmp	r3, #128	; 0x80
 800d3de:	bf0c      	ite	eq
 800d3e0:	2301      	moveq	r3, #1
 800d3e2:	2300      	movne	r3, #0
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d057      	beq.n	800d49e <HAL_ADC_IRQHandler+0x1b8>
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d054      	beq.n	800d49e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f8:	f003 0310 	and.w	r3, r3, #16
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d105      	bne.n	800d40c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d404:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800d416:	2b00      	cmp	r3, #0
 800d418:	d139      	bne.n	800d48e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d420:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800d424:	2b00      	cmp	r3, #0
 800d426:	d006      	beq.n	800d436 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800d432:	2b00      	cmp	r3, #0
 800d434:	d12b      	bne.n	800d48e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800d440:	2b00      	cmp	r3, #0
 800d442:	d124      	bne.n	800d48e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d11d      	bne.n	800d48e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800d456:	2b00      	cmp	r3, #0
 800d458:	d119      	bne.n	800d48e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	685a      	ldr	r2, [r3, #4]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d468:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d46e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d105      	bne.n	800d48e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d486:	f043 0201 	orr.w	r2, r3, #1
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 fc6e 	bl	800dd70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f06f 020c 	mvn.w	r2, #12
 800d49c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f003 0301 	and.w	r3, r3, #1
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	bf0c      	ite	eq
 800d4ac:	2301      	moveq	r3, #1
 800d4ae:	2300      	movne	r3, #0
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4be:	2b40      	cmp	r3, #64	; 0x40
 800d4c0:	bf0c      	ite	eq
 800d4c2:	2301      	moveq	r3, #1
 800d4c4:	2300      	movne	r3, #0
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d017      	beq.n	800d500 <HAL_ADC_IRQHandler+0x21a>
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d014      	beq.n	800d500 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f003 0301 	and.w	r3, r3, #1
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d10d      	bne.n	800d500 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f000 f989 	bl	800d808 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f06f 0201 	mvn.w	r2, #1
 800d4fe:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f003 0320 	and.w	r3, r3, #32
 800d50a:	2b20      	cmp	r3, #32
 800d50c:	bf0c      	ite	eq
 800d50e:	2301      	moveq	r3, #1
 800d510:	2300      	movne	r3, #0
 800d512:	b2db      	uxtb	r3, r3
 800d514:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d524:	bf0c      	ite	eq
 800d526:	2301      	moveq	r3, #1
 800d528:	2300      	movne	r3, #0
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d015      	beq.n	800d560 <HAL_ADC_IRQHandler+0x27a>
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d012      	beq.n	800d560 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d53e:	f043 0202 	orr.w	r2, r3, #2
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f06f 0220 	mvn.w	r2, #32
 800d54e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 f963 	bl	800d81c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f06f 0220 	mvn.w	r2, #32
 800d55e:	601a      	str	r2, [r3, #0]
  }
}
 800d560:	bf00      	nop
 800d562:	3710      	adds	r7, #16
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b086      	sub	sp, #24
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	60b9      	str	r1, [r7, #8]
 800d572:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800d574:	2300      	movs	r3, #0
 800d576:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d101      	bne.n	800d586 <HAL_ADC_Start_DMA+0x1e>
 800d582:	2302      	movs	r3, #2
 800d584:	e0cc      	b.n	800d720 <HAL_ADC_Start_DMA+0x1b8>
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2201      	movs	r2, #1
 800d58a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	689b      	ldr	r3, [r3, #8]
 800d594:	f003 0301 	and.w	r3, r3, #1
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d018      	beq.n	800d5ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	689a      	ldr	r2, [r3, #8]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f042 0201 	orr.w	r2, r2, #1
 800d5aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800d5ac:	4b5e      	ldr	r3, [pc, #376]	; (800d728 <HAL_ADC_Start_DMA+0x1c0>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4a5e      	ldr	r2, [pc, #376]	; (800d72c <HAL_ADC_Start_DMA+0x1c4>)
 800d5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5b6:	0c9a      	lsrs	r2, r3, #18
 800d5b8:	4613      	mov	r3, r2
 800d5ba:	005b      	lsls	r3, r3, #1
 800d5bc:	4413      	add	r3, r2
 800d5be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800d5c0:	e002      	b.n	800d5c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	3b01      	subs	r3, #1
 800d5c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d1f9      	bne.n	800d5c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	689b      	ldr	r3, [r3, #8]
 800d5d4:	f003 0301 	and.w	r3, r3, #1
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	f040 80a0 	bne.w	800d71e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800d5e6:	f023 0301 	bic.w	r3, r3, #1
 800d5ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d007      	beq.n	800d610 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d604:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800d608:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d61c:	d106      	bne.n	800d62c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d622:	f023 0206 	bic.w	r2, r3, #6
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	645a      	str	r2, [r3, #68]	; 0x44
 800d62a:	e002      	b.n	800d632 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2200      	movs	r2, #0
 800d630:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2200      	movs	r2, #0
 800d636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800d63a:	4b3d      	ldr	r3, [pc, #244]	; (800d730 <HAL_ADC_Start_DMA+0x1c8>)
 800d63c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d642:	4a3c      	ldr	r2, [pc, #240]	; (800d734 <HAL_ADC_Start_DMA+0x1cc>)
 800d644:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d64a:	4a3b      	ldr	r2, [pc, #236]	; (800d738 <HAL_ADC_Start_DMA+0x1d0>)
 800d64c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d652:	4a3a      	ldr	r2, [pc, #232]	; (800d73c <HAL_ADC_Start_DMA+0x1d4>)
 800d654:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800d65e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	685a      	ldr	r2, [r3, #4]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800d66e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	689a      	ldr	r2, [r3, #8]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d67e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	334c      	adds	r3, #76	; 0x4c
 800d68a:	4619      	mov	r1, r3
 800d68c:	68ba      	ldr	r2, [r7, #8]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f000 fd38 	bl	800e104 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	f003 031f 	and.w	r3, r3, #31
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d12a      	bne.n	800d6f6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a26      	ldr	r2, [pc, #152]	; (800d740 <HAL_ADC_Start_DMA+0x1d8>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d015      	beq.n	800d6d6 <HAL_ADC_Start_DMA+0x16e>
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a25      	ldr	r2, [pc, #148]	; (800d744 <HAL_ADC_Start_DMA+0x1dc>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d105      	bne.n	800d6c0 <HAL_ADC_Start_DMA+0x158>
 800d6b4:	4b1e      	ldr	r3, [pc, #120]	; (800d730 <HAL_ADC_Start_DMA+0x1c8>)
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	f003 031f 	and.w	r3, r3, #31
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d00a      	beq.n	800d6d6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a20      	ldr	r2, [pc, #128]	; (800d748 <HAL_ADC_Start_DMA+0x1e0>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d129      	bne.n	800d71e <HAL_ADC_Start_DMA+0x1b6>
 800d6ca:	4b19      	ldr	r3, [pc, #100]	; (800d730 <HAL_ADC_Start_DMA+0x1c8>)
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	f003 031f 	and.w	r3, r3, #31
 800d6d2:	2b0f      	cmp	r3, #15
 800d6d4:	d823      	bhi.n	800d71e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d11c      	bne.n	800d71e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	689a      	ldr	r2, [r3, #8]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d6f2:	609a      	str	r2, [r3, #8]
 800d6f4:	e013      	b.n	800d71e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a11      	ldr	r2, [pc, #68]	; (800d740 <HAL_ADC_Start_DMA+0x1d8>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d10e      	bne.n	800d71e <HAL_ADC_Start_DMA+0x1b6>
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d107      	bne.n	800d71e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	689a      	ldr	r2, [r3, #8]
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d71c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800d71e:	2300      	movs	r3, #0
}
 800d720:	4618      	mov	r0, r3
 800d722:	3718      	adds	r7, #24
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	20000004 	.word	0x20000004
 800d72c:	431bde83 	.word	0x431bde83
 800d730:	40012300 	.word	0x40012300
 800d734:	0800dc6d 	.word	0x0800dc6d
 800d738:	0800dd27 	.word	0x0800dd27
 800d73c:	0800dd43 	.word	0x0800dd43
 800d740:	40012000 	.word	0x40012000
 800d744:	40012100 	.word	0x40012100
 800d748:	40012200 	.word	0x40012200

0800d74c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d754:	2300      	movs	r3, #0
 800d756:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d101      	bne.n	800d766 <HAL_ADC_Stop_DMA+0x1a>
 800d762:	2302      	movs	r3, #2
 800d764:	e038      	b.n	800d7d8 <HAL_ADC_Stop_DMA+0x8c>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2201      	movs	r2, #1
 800d76a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	689a      	ldr	r2, [r3, #8]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f022 0201 	bic.w	r2, r2, #1
 800d77c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	f003 0301 	and.w	r3, r3, #1
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d120      	bne.n	800d7ce <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	689a      	ldr	r2, [r3, #8]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d79a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 fd07 	bl	800e1b4 <HAL_DMA_Abort>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	685a      	ldr	r2, [r3, #4]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800d7b8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800d7c2:	f023 0301 	bic.w	r3, r3, #1
 800d7c6:	f043 0201 	orr.w	r2, r3, #1
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800d7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800d7e8:	bf00      	nop
 800d7ea:	370c      	adds	r7, #12
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800d7fc:	bf00      	nop
 800d7fe:	370c      	adds	r7, #12
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800d810:	bf00      	nop
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800d824:	bf00      	nop
 800d826:	370c      	adds	r7, #12
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800d830:	b480      	push	{r7}
 800d832:	b085      	sub	sp, #20
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800d83a:	2300      	movs	r3, #0
 800d83c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d844:	2b01      	cmp	r3, #1
 800d846:	d101      	bne.n	800d84c <HAL_ADC_ConfigChannel+0x1c>
 800d848:	2302      	movs	r3, #2
 800d84a:	e105      	b.n	800da58 <HAL_ADC_ConfigChannel+0x228>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2201      	movs	r2, #1
 800d850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b09      	cmp	r3, #9
 800d85a:	d925      	bls.n	800d8a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	68d9      	ldr	r1, [r3, #12]
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	b29b      	uxth	r3, r3
 800d868:	461a      	mov	r2, r3
 800d86a:	4613      	mov	r3, r2
 800d86c:	005b      	lsls	r3, r3, #1
 800d86e:	4413      	add	r3, r2
 800d870:	3b1e      	subs	r3, #30
 800d872:	2207      	movs	r2, #7
 800d874:	fa02 f303 	lsl.w	r3, r2, r3
 800d878:	43da      	mvns	r2, r3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	400a      	ands	r2, r1
 800d880:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	68d9      	ldr	r1, [r3, #12]
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	689a      	ldr	r2, [r3, #8]
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	b29b      	uxth	r3, r3
 800d892:	4618      	mov	r0, r3
 800d894:	4603      	mov	r3, r0
 800d896:	005b      	lsls	r3, r3, #1
 800d898:	4403      	add	r3, r0
 800d89a:	3b1e      	subs	r3, #30
 800d89c:	409a      	lsls	r2, r3
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	430a      	orrs	r2, r1
 800d8a4:	60da      	str	r2, [r3, #12]
 800d8a6:	e022      	b.n	800d8ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	6919      	ldr	r1, [r3, #16]
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	005b      	lsls	r3, r3, #1
 800d8ba:	4413      	add	r3, r2
 800d8bc:	2207      	movs	r2, #7
 800d8be:	fa02 f303 	lsl.w	r3, r2, r3
 800d8c2:	43da      	mvns	r2, r3
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	400a      	ands	r2, r1
 800d8ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	6919      	ldr	r1, [r3, #16]
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	689a      	ldr	r2, [r3, #8]
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	4618      	mov	r0, r3
 800d8de:	4603      	mov	r3, r0
 800d8e0:	005b      	lsls	r3, r3, #1
 800d8e2:	4403      	add	r3, r0
 800d8e4:	409a      	lsls	r2, r3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	430a      	orrs	r2, r1
 800d8ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	2b06      	cmp	r3, #6
 800d8f4:	d824      	bhi.n	800d940 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	685a      	ldr	r2, [r3, #4]
 800d900:	4613      	mov	r3, r2
 800d902:	009b      	lsls	r3, r3, #2
 800d904:	4413      	add	r3, r2
 800d906:	3b05      	subs	r3, #5
 800d908:	221f      	movs	r2, #31
 800d90a:	fa02 f303 	lsl.w	r3, r2, r3
 800d90e:	43da      	mvns	r2, r3
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	400a      	ands	r2, r1
 800d916:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	b29b      	uxth	r3, r3
 800d924:	4618      	mov	r0, r3
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	685a      	ldr	r2, [r3, #4]
 800d92a:	4613      	mov	r3, r2
 800d92c:	009b      	lsls	r3, r3, #2
 800d92e:	4413      	add	r3, r2
 800d930:	3b05      	subs	r3, #5
 800d932:	fa00 f203 	lsl.w	r2, r0, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	430a      	orrs	r2, r1
 800d93c:	635a      	str	r2, [r3, #52]	; 0x34
 800d93e:	e04c      	b.n	800d9da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	2b0c      	cmp	r3, #12
 800d946:	d824      	bhi.n	800d992 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	685a      	ldr	r2, [r3, #4]
 800d952:	4613      	mov	r3, r2
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	4413      	add	r3, r2
 800d958:	3b23      	subs	r3, #35	; 0x23
 800d95a:	221f      	movs	r2, #31
 800d95c:	fa02 f303 	lsl.w	r3, r2, r3
 800d960:	43da      	mvns	r2, r3
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	400a      	ands	r2, r1
 800d968:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	b29b      	uxth	r3, r3
 800d976:	4618      	mov	r0, r3
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	685a      	ldr	r2, [r3, #4]
 800d97c:	4613      	mov	r3, r2
 800d97e:	009b      	lsls	r3, r3, #2
 800d980:	4413      	add	r3, r2
 800d982:	3b23      	subs	r3, #35	; 0x23
 800d984:	fa00 f203 	lsl.w	r2, r0, r3
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	430a      	orrs	r2, r1
 800d98e:	631a      	str	r2, [r3, #48]	; 0x30
 800d990:	e023      	b.n	800d9da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	685a      	ldr	r2, [r3, #4]
 800d99c:	4613      	mov	r3, r2
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	4413      	add	r3, r2
 800d9a2:	3b41      	subs	r3, #65	; 0x41
 800d9a4:	221f      	movs	r2, #31
 800d9a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d9aa:	43da      	mvns	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	400a      	ands	r2, r1
 800d9b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	685a      	ldr	r2, [r3, #4]
 800d9c6:	4613      	mov	r3, r2
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	4413      	add	r3, r2
 800d9cc:	3b41      	subs	r3, #65	; 0x41
 800d9ce:	fa00 f203 	lsl.w	r2, r0, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	430a      	orrs	r2, r1
 800d9d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800d9da:	4b22      	ldr	r3, [pc, #136]	; (800da64 <HAL_ADC_ConfigChannel+0x234>)
 800d9dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4a21      	ldr	r2, [pc, #132]	; (800da68 <HAL_ADC_ConfigChannel+0x238>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d109      	bne.n	800d9fc <HAL_ADC_ConfigChannel+0x1cc>
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2b12      	cmp	r3, #18
 800d9ee:	d105      	bne.n	800d9fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a19      	ldr	r2, [pc, #100]	; (800da68 <HAL_ADC_ConfigChannel+0x238>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d123      	bne.n	800da4e <HAL_ADC_ConfigChannel+0x21e>
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2b10      	cmp	r3, #16
 800da0c:	d003      	beq.n	800da16 <HAL_ADC_ConfigChannel+0x1e6>
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2b11      	cmp	r3, #17
 800da14:	d11b      	bne.n	800da4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2b10      	cmp	r3, #16
 800da28:	d111      	bne.n	800da4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800da2a:	4b10      	ldr	r3, [pc, #64]	; (800da6c <HAL_ADC_ConfigChannel+0x23c>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4a10      	ldr	r2, [pc, #64]	; (800da70 <HAL_ADC_ConfigChannel+0x240>)
 800da30:	fba2 2303 	umull	r2, r3, r2, r3
 800da34:	0c9a      	lsrs	r2, r3, #18
 800da36:	4613      	mov	r3, r2
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	4413      	add	r3, r2
 800da3c:	005b      	lsls	r3, r3, #1
 800da3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800da40:	e002      	b.n	800da48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	3b01      	subs	r3, #1
 800da46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d1f9      	bne.n	800da42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2200      	movs	r2, #0
 800da52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800da56:	2300      	movs	r3, #0
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3714      	adds	r7, #20
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr
 800da64:	40012300 	.word	0x40012300
 800da68:	40012000 	.word	0x40012000
 800da6c:	20000004 	.word	0x20000004
 800da70:	431bde83 	.word	0x431bde83

0800da74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800da7c:	4b79      	ldr	r3, [pc, #484]	; (800dc64 <ADC_Init+0x1f0>)
 800da7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	685a      	ldr	r2, [r3, #4]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	685b      	ldr	r3, [r3, #4]
 800da94:	431a      	orrs	r2, r3
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	685a      	ldr	r2, [r3, #4]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800daa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	6859      	ldr	r1, [r3, #4]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	691b      	ldr	r3, [r3, #16]
 800dab4:	021a      	lsls	r2, r3, #8
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	430a      	orrs	r2, r1
 800dabc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	685a      	ldr	r2, [r3, #4]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800dacc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	6859      	ldr	r1, [r3, #4]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	689a      	ldr	r2, [r3, #8]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	430a      	orrs	r2, r1
 800dade:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	689a      	ldr	r2, [r3, #8]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800daee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	6899      	ldr	r1, [r3, #8]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	68da      	ldr	r2, [r3, #12]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	430a      	orrs	r2, r1
 800db00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db06:	4a58      	ldr	r2, [pc, #352]	; (800dc68 <ADC_Init+0x1f4>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d022      	beq.n	800db52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	689a      	ldr	r2, [r3, #8]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800db1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	6899      	ldr	r1, [r3, #8]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	430a      	orrs	r2, r1
 800db2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	689a      	ldr	r2, [r3, #8]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800db3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	6899      	ldr	r1, [r3, #8]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	430a      	orrs	r2, r1
 800db4e:	609a      	str	r2, [r3, #8]
 800db50:	e00f      	b.n	800db72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	689a      	ldr	r2, [r3, #8]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800db60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	689a      	ldr	r2, [r3, #8]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800db70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	689a      	ldr	r2, [r3, #8]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f022 0202 	bic.w	r2, r2, #2
 800db80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	6899      	ldr	r1, [r3, #8]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	7e1b      	ldrb	r3, [r3, #24]
 800db8c:	005a      	lsls	r2, r3, #1
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	430a      	orrs	r2, r1
 800db94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f893 3020 	ldrb.w	r3, [r3, #32]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d01b      	beq.n	800dbd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	685a      	ldr	r2, [r3, #4]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dbae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	685a      	ldr	r2, [r3, #4]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800dbbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	6859      	ldr	r1, [r3, #4]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	035a      	lsls	r2, r3, #13
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	430a      	orrs	r2, r1
 800dbd4:	605a      	str	r2, [r3, #4]
 800dbd6:	e007      	b.n	800dbe8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	685a      	ldr	r2, [r3, #4]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dbe6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800dbf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	69db      	ldr	r3, [r3, #28]
 800dc02:	3b01      	subs	r3, #1
 800dc04:	051a      	lsls	r2, r3, #20
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	430a      	orrs	r2, r1
 800dc0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	689a      	ldr	r2, [r3, #8]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800dc1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	6899      	ldr	r1, [r3, #8]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc2a:	025a      	lsls	r2, r3, #9
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	430a      	orrs	r2, r1
 800dc32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	689a      	ldr	r2, [r3, #8]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	6899      	ldr	r1, [r3, #8]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	695b      	ldr	r3, [r3, #20]
 800dc4e:	029a      	lsls	r2, r3, #10
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	430a      	orrs	r2, r1
 800dc56:	609a      	str	r2, [r3, #8]
}
 800dc58:	bf00      	nop
 800dc5a:	3714      	adds	r7, #20
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr
 800dc64:	40012300 	.word	0x40012300
 800dc68:	0f000001 	.word	0x0f000001

0800dc6c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc78:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc7e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d13c      	bne.n	800dd00 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	689b      	ldr	r3, [r3, #8]
 800dc98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d12b      	bne.n	800dcf8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d127      	bne.n	800dcf8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d006      	beq.n	800dcc4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d119      	bne.n	800dcf8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	685a      	ldr	r2, [r3, #4]
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f022 0220 	bic.w	r2, r2, #32
 800dcd2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d105      	bne.n	800dcf8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcf0:	f043 0201 	orr.w	r2, r3, #1
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800dcf8:	68f8      	ldr	r0, [r7, #12]
 800dcfa:	f7ff fd71 	bl	800d7e0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800dcfe:	e00e      	b.n	800dd1e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd04:	f003 0310 	and.w	r3, r3, #16
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d003      	beq.n	800dd14 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800dd0c:	68f8      	ldr	r0, [r7, #12]
 800dd0e:	f7ff fd85 	bl	800d81c <HAL_ADC_ErrorCallback>
}
 800dd12:	e004      	b.n	800dd1e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	4798      	blx	r3
}
 800dd1e:	bf00      	nop
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800dd26:	b580      	push	{r7, lr}
 800dd28:	b084      	sub	sp, #16
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd32:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f7ff fd5d 	bl	800d7f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800dd3a:	bf00      	nop
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b084      	sub	sp, #16
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd4e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2240      	movs	r2, #64	; 0x40
 800dd54:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd5a:	f043 0204 	orr.w	r2, r3, #4
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800dd62:	68f8      	ldr	r0, [r7, #12]
 800dd64:	f7ff fd5a 	bl	800d81c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800dd68:	bf00      	nop
 800dd6a:	3710      	adds	r7, #16
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800dd78:	bf00      	nop
 800dd7a:	370c      	adds	r7, #12
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f003 0307 	and.w	r3, r3, #7
 800dd92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dd94:	4b0c      	ldr	r3, [pc, #48]	; (800ddc8 <__NVIC_SetPriorityGrouping+0x44>)
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800dda0:	4013      	ands	r3, r2
 800dda2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ddac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ddb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ddb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ddb6:	4a04      	ldr	r2, [pc, #16]	; (800ddc8 <__NVIC_SetPriorityGrouping+0x44>)
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	60d3      	str	r3, [r2, #12]
}
 800ddbc:	bf00      	nop
 800ddbe:	3714      	adds	r7, #20
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr
 800ddc8:	e000ed00 	.word	0xe000ed00

0800ddcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ddd0:	4b04      	ldr	r3, [pc, #16]	; (800dde4 <__NVIC_GetPriorityGrouping+0x18>)
 800ddd2:	68db      	ldr	r3, [r3, #12]
 800ddd4:	0a1b      	lsrs	r3, r3, #8
 800ddd6:	f003 0307 	and.w	r3, r3, #7
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr
 800dde4:	e000ed00 	.word	0xe000ed00

0800dde8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b083      	sub	sp, #12
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	4603      	mov	r3, r0
 800ddf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ddf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	db0b      	blt.n	800de12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ddfa:	79fb      	ldrb	r3, [r7, #7]
 800ddfc:	f003 021f 	and.w	r2, r3, #31
 800de00:	4907      	ldr	r1, [pc, #28]	; (800de20 <__NVIC_EnableIRQ+0x38>)
 800de02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de06:	095b      	lsrs	r3, r3, #5
 800de08:	2001      	movs	r0, #1
 800de0a:	fa00 f202 	lsl.w	r2, r0, r2
 800de0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800de12:	bf00      	nop
 800de14:	370c      	adds	r7, #12
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr
 800de1e:	bf00      	nop
 800de20:	e000e100 	.word	0xe000e100

0800de24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800de24:	b480      	push	{r7}
 800de26:	b083      	sub	sp, #12
 800de28:	af00      	add	r7, sp, #0
 800de2a:	4603      	mov	r3, r0
 800de2c:	6039      	str	r1, [r7, #0]
 800de2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800de30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de34:	2b00      	cmp	r3, #0
 800de36:	db0a      	blt.n	800de4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	b2da      	uxtb	r2, r3
 800de3c:	490c      	ldr	r1, [pc, #48]	; (800de70 <__NVIC_SetPriority+0x4c>)
 800de3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de42:	0112      	lsls	r2, r2, #4
 800de44:	b2d2      	uxtb	r2, r2
 800de46:	440b      	add	r3, r1
 800de48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800de4c:	e00a      	b.n	800de64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	b2da      	uxtb	r2, r3
 800de52:	4908      	ldr	r1, [pc, #32]	; (800de74 <__NVIC_SetPriority+0x50>)
 800de54:	79fb      	ldrb	r3, [r7, #7]
 800de56:	f003 030f 	and.w	r3, r3, #15
 800de5a:	3b04      	subs	r3, #4
 800de5c:	0112      	lsls	r2, r2, #4
 800de5e:	b2d2      	uxtb	r2, r2
 800de60:	440b      	add	r3, r1
 800de62:	761a      	strb	r2, [r3, #24]
}
 800de64:	bf00      	nop
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr
 800de70:	e000e100 	.word	0xe000e100
 800de74:	e000ed00 	.word	0xe000ed00

0800de78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800de78:	b480      	push	{r7}
 800de7a:	b089      	sub	sp, #36	; 0x24
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f003 0307 	and.w	r3, r3, #7
 800de8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	f1c3 0307 	rsb	r3, r3, #7
 800de92:	2b04      	cmp	r3, #4
 800de94:	bf28      	it	cs
 800de96:	2304      	movcs	r3, #4
 800de98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	3304      	adds	r3, #4
 800de9e:	2b06      	cmp	r3, #6
 800dea0:	d902      	bls.n	800dea8 <NVIC_EncodePriority+0x30>
 800dea2:	69fb      	ldr	r3, [r7, #28]
 800dea4:	3b03      	subs	r3, #3
 800dea6:	e000      	b.n	800deaa <NVIC_EncodePriority+0x32>
 800dea8:	2300      	movs	r3, #0
 800deaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800deac:	f04f 32ff 	mov.w	r2, #4294967295
 800deb0:	69bb      	ldr	r3, [r7, #24]
 800deb2:	fa02 f303 	lsl.w	r3, r2, r3
 800deb6:	43da      	mvns	r2, r3
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	401a      	ands	r2, r3
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800dec0:	f04f 31ff 	mov.w	r1, #4294967295
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	fa01 f303 	lsl.w	r3, r1, r3
 800deca:	43d9      	mvns	r1, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ded0:	4313      	orrs	r3, r2
         );
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3724      	adds	r7, #36	; 0x24
 800ded6:	46bd      	mov	sp, r7
 800ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dedc:	4770      	bx	lr
	...

0800dee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b082      	sub	sp, #8
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	3b01      	subs	r3, #1
 800deec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800def0:	d301      	bcc.n	800def6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800def2:	2301      	movs	r3, #1
 800def4:	e00f      	b.n	800df16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800def6:	4a0a      	ldr	r2, [pc, #40]	; (800df20 <SysTick_Config+0x40>)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	3b01      	subs	r3, #1
 800defc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800defe:	210f      	movs	r1, #15
 800df00:	f04f 30ff 	mov.w	r0, #4294967295
 800df04:	f7ff ff8e 	bl	800de24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800df08:	4b05      	ldr	r3, [pc, #20]	; (800df20 <SysTick_Config+0x40>)
 800df0a:	2200      	movs	r2, #0
 800df0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800df0e:	4b04      	ldr	r3, [pc, #16]	; (800df20 <SysTick_Config+0x40>)
 800df10:	2207      	movs	r2, #7
 800df12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800df14:	2300      	movs	r3, #0
}
 800df16:	4618      	mov	r0, r3
 800df18:	3708      	adds	r7, #8
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	e000e010 	.word	0xe000e010

0800df24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f7ff ff29 	bl	800dd84 <__NVIC_SetPriorityGrouping>
}
 800df32:	bf00      	nop
 800df34:	3708      	adds	r7, #8
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}

0800df3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800df3a:	b580      	push	{r7, lr}
 800df3c:	b086      	sub	sp, #24
 800df3e:	af00      	add	r7, sp, #0
 800df40:	4603      	mov	r3, r0
 800df42:	60b9      	str	r1, [r7, #8]
 800df44:	607a      	str	r2, [r7, #4]
 800df46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800df48:	2300      	movs	r3, #0
 800df4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800df4c:	f7ff ff3e 	bl	800ddcc <__NVIC_GetPriorityGrouping>
 800df50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	68b9      	ldr	r1, [r7, #8]
 800df56:	6978      	ldr	r0, [r7, #20]
 800df58:	f7ff ff8e 	bl	800de78 <NVIC_EncodePriority>
 800df5c:	4602      	mov	r2, r0
 800df5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df62:	4611      	mov	r1, r2
 800df64:	4618      	mov	r0, r3
 800df66:	f7ff ff5d 	bl	800de24 <__NVIC_SetPriority>
}
 800df6a:	bf00      	nop
 800df6c:	3718      	adds	r7, #24
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}

0800df72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800df72:	b580      	push	{r7, lr}
 800df74:	b082      	sub	sp, #8
 800df76:	af00      	add	r7, sp, #0
 800df78:	4603      	mov	r3, r0
 800df7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800df7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df80:	4618      	mov	r0, r3
 800df82:	f7ff ff31 	bl	800dde8 <__NVIC_EnableIRQ>
}
 800df86:	bf00      	nop
 800df88:	3708      	adds	r7, #8
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}

0800df8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800df8e:	b580      	push	{r7, lr}
 800df90:	b082      	sub	sp, #8
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f7ff ffa2 	bl	800dee0 <SysTick_Config>
 800df9c:	4603      	mov	r3, r0
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3708      	adds	r7, #8
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
	...

0800dfa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b086      	sub	sp, #24
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800dfb4:	f7ff f926 	bl	800d204 <HAL_GetTick>
 800dfb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d101      	bne.n	800dfc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e099      	b.n	800e0f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2202      	movs	r2, #2
 800dfd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f022 0201 	bic.w	r2, r2, #1
 800dfe2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800dfe4:	e00f      	b.n	800e006 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800dfe6:	f7ff f90d 	bl	800d204 <HAL_GetTick>
 800dfea:	4602      	mov	r2, r0
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	1ad3      	subs	r3, r2, r3
 800dff0:	2b05      	cmp	r3, #5
 800dff2:	d908      	bls.n	800e006 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2220      	movs	r2, #32
 800dff8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2203      	movs	r2, #3
 800dffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800e002:	2303      	movs	r3, #3
 800e004:	e078      	b.n	800e0f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f003 0301 	and.w	r3, r3, #1
 800e010:	2b00      	cmp	r3, #0
 800e012:	d1e8      	bne.n	800dfe6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e01c:	697a      	ldr	r2, [r7, #20]
 800e01e:	4b38      	ldr	r3, [pc, #224]	; (800e100 <HAL_DMA_Init+0x158>)
 800e020:	4013      	ands	r3, r2
 800e022:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685a      	ldr	r2, [r3, #4]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	689b      	ldr	r3, [r3, #8]
 800e02c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e032:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	691b      	ldr	r3, [r3, #16]
 800e038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e03e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	699b      	ldr	r3, [r3, #24]
 800e044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e04a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6a1b      	ldr	r3, [r3, #32]
 800e050:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e052:	697a      	ldr	r2, [r7, #20]
 800e054:	4313      	orrs	r3, r2
 800e056:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e05c:	2b04      	cmp	r3, #4
 800e05e:	d107      	bne.n	800e070 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e068:	4313      	orrs	r3, r2
 800e06a:	697a      	ldr	r2, [r7, #20]
 800e06c:	4313      	orrs	r3, r2
 800e06e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	697a      	ldr	r2, [r7, #20]
 800e076:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	695b      	ldr	r3, [r3, #20]
 800e07e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	f023 0307 	bic.w	r3, r3, #7
 800e086:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e08c:	697a      	ldr	r2, [r7, #20]
 800e08e:	4313      	orrs	r3, r2
 800e090:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e096:	2b04      	cmp	r3, #4
 800e098:	d117      	bne.n	800e0ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e09e:	697a      	ldr	r2, [r7, #20]
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00e      	beq.n	800e0ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f000 fadf 	bl	800e670 <DMA_CheckFifoParam>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d008      	beq.n	800e0ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2240      	movs	r2, #64	; 0x40
 800e0bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	e016      	b.n	800e0f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	697a      	ldr	r2, [r7, #20]
 800e0d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 fa96 	bl	800e604 <DMA_CalcBaseAndBitshift>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0e0:	223f      	movs	r2, #63	; 0x3f
 800e0e2:	409a      	lsls	r2, r3
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800e0f6:	2300      	movs	r3, #0
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3718      	adds	r7, #24
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	f010803f 	.word	0xf010803f

0800e104 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af00      	add	r7, sp, #0
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	607a      	str	r2, [r7, #4]
 800e110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e112:	2300      	movs	r3, #0
 800e114:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e11a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e122:	2b01      	cmp	r3, #1
 800e124:	d101      	bne.n	800e12a <HAL_DMA_Start_IT+0x26>
 800e126:	2302      	movs	r3, #2
 800e128:	e040      	b.n	800e1ac <HAL_DMA_Start_IT+0xa8>
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2201      	movs	r2, #1
 800e12e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	d12f      	bne.n	800e19e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2202      	movs	r2, #2
 800e142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2200      	movs	r2, #0
 800e14a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	68b9      	ldr	r1, [r7, #8]
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f000 fa28 	bl	800e5a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e15c:	223f      	movs	r2, #63	; 0x3f
 800e15e:	409a      	lsls	r2, r3
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f042 0216 	orr.w	r2, r2, #22
 800e172:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d007      	beq.n	800e18c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f042 0208 	orr.w	r2, r2, #8
 800e18a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f042 0201 	orr.w	r2, r2, #1
 800e19a:	601a      	str	r2, [r3, #0]
 800e19c:	e005      	b.n	800e1aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800e1a6:	2302      	movs	r3, #2
 800e1a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800e1aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3718      	adds	r7, #24
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800e1c2:	f7ff f81f 	bl	800d204 <HAL_GetTick>
 800e1c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e1ce:	b2db      	uxtb	r3, r3
 800e1d0:	2b02      	cmp	r3, #2
 800e1d2:	d008      	beq.n	800e1e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2280      	movs	r2, #128	; 0x80
 800e1d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	e052      	b.n	800e28c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f022 0216 	bic.w	r2, r2, #22
 800e1f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	695a      	ldr	r2, [r3, #20]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e204:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d103      	bne.n	800e216 <HAL_DMA_Abort+0x62>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e212:	2b00      	cmp	r3, #0
 800e214:	d007      	beq.n	800e226 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f022 0208 	bic.w	r2, r2, #8
 800e224:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f022 0201 	bic.w	r2, r2, #1
 800e234:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e236:	e013      	b.n	800e260 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e238:	f7fe ffe4 	bl	800d204 <HAL_GetTick>
 800e23c:	4602      	mov	r2, r0
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	1ad3      	subs	r3, r2, r3
 800e242:	2b05      	cmp	r3, #5
 800e244:	d90c      	bls.n	800e260 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2220      	movs	r2, #32
 800e24a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2200      	movs	r2, #0
 800e250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2203      	movs	r2, #3
 800e258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800e25c:	2303      	movs	r3, #3
 800e25e:	e015      	b.n	800e28c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f003 0301 	and.w	r3, r3, #1
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d1e4      	bne.n	800e238 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e272:	223f      	movs	r2, #63	; 0x3f
 800e274:	409a      	lsls	r2, r3
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2200      	movs	r2, #0
 800e27e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2201      	movs	r2, #1
 800e286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800e28a:	2300      	movs	r3, #0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3710      	adds	r7, #16
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b086      	sub	sp, #24
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800e29c:	2300      	movs	r3, #0
 800e29e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e2a0:	4b92      	ldr	r3, [pc, #584]	; (800e4ec <HAL_DMA_IRQHandler+0x258>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4a92      	ldr	r2, [pc, #584]	; (800e4f0 <HAL_DMA_IRQHandler+0x25c>)
 800e2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800e2aa:	0a9b      	lsrs	r3, r3, #10
 800e2ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2be:	2208      	movs	r2, #8
 800e2c0:	409a      	lsls	r2, r3
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	4013      	ands	r3, r2
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d01a      	beq.n	800e300 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f003 0304 	and.w	r3, r3, #4
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d013      	beq.n	800e300 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	681a      	ldr	r2, [r3, #0]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f022 0204 	bic.w	r2, r2, #4
 800e2e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2ec:	2208      	movs	r2, #8
 800e2ee:	409a      	lsls	r2, r3
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2f8:	f043 0201 	orr.w	r2, r3, #1
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e304:	2201      	movs	r2, #1
 800e306:	409a      	lsls	r2, r3
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	4013      	ands	r3, r2
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d012      	beq.n	800e336 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	695b      	ldr	r3, [r3, #20]
 800e316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00b      	beq.n	800e336 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e322:	2201      	movs	r2, #1
 800e324:	409a      	lsls	r2, r3
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e32e:	f043 0202 	orr.w	r2, r3, #2
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e33a:	2204      	movs	r2, #4
 800e33c:	409a      	lsls	r2, r3
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	4013      	ands	r3, r2
 800e342:	2b00      	cmp	r3, #0
 800e344:	d012      	beq.n	800e36c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f003 0302 	and.w	r3, r3, #2
 800e350:	2b00      	cmp	r3, #0
 800e352:	d00b      	beq.n	800e36c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e358:	2204      	movs	r2, #4
 800e35a:	409a      	lsls	r2, r3
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e364:	f043 0204 	orr.w	r2, r3, #4
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e370:	2210      	movs	r2, #16
 800e372:	409a      	lsls	r2, r3
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	4013      	ands	r3, r2
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d043      	beq.n	800e404 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f003 0308 	and.w	r3, r3, #8
 800e386:	2b00      	cmp	r3, #0
 800e388:	d03c      	beq.n	800e404 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e38e:	2210      	movs	r2, #16
 800e390:	409a      	lsls	r2, r3
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d018      	beq.n	800e3d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d108      	bne.n	800e3c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d024      	beq.n	800e404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	4798      	blx	r3
 800e3c2:	e01f      	b.n	800e404 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d01b      	beq.n	800e404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	4798      	blx	r3
 800e3d4:	e016      	b.n	800e404 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d107      	bne.n	800e3f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f022 0208 	bic.w	r2, r2, #8
 800e3f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d003      	beq.n	800e404 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e408:	2220      	movs	r2, #32
 800e40a:	409a      	lsls	r2, r3
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	4013      	ands	r3, r2
 800e410:	2b00      	cmp	r3, #0
 800e412:	f000 808e 	beq.w	800e532 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f003 0310 	and.w	r3, r3, #16
 800e420:	2b00      	cmp	r3, #0
 800e422:	f000 8086 	beq.w	800e532 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e42a:	2220      	movs	r2, #32
 800e42c:	409a      	lsls	r2, r3
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	2b05      	cmp	r3, #5
 800e43c:	d136      	bne.n	800e4ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f022 0216 	bic.w	r2, r2, #22
 800e44c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	695a      	ldr	r2, [r3, #20]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e45c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e462:	2b00      	cmp	r3, #0
 800e464:	d103      	bne.n	800e46e <HAL_DMA_IRQHandler+0x1da>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d007      	beq.n	800e47e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f022 0208 	bic.w	r2, r2, #8
 800e47c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e482:	223f      	movs	r2, #63	; 0x3f
 800e484:	409a      	lsls	r2, r3
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2200      	movs	r2, #0
 800e48e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2201      	movs	r2, #1
 800e496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d07d      	beq.n	800e59e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	4798      	blx	r3
        }
        return;
 800e4aa:	e078      	b.n	800e59e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d01c      	beq.n	800e4f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d108      	bne.n	800e4da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d030      	beq.n	800e532 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	4798      	blx	r3
 800e4d8:	e02b      	b.n	800e532 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d027      	beq.n	800e532 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	4798      	blx	r3
 800e4ea:	e022      	b.n	800e532 <HAL_DMA_IRQHandler+0x29e>
 800e4ec:	20000004 	.word	0x20000004
 800e4f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d10f      	bne.n	800e522 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	681a      	ldr	r2, [r3, #0]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f022 0210 	bic.w	r2, r2, #16
 800e510:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2201      	movs	r2, #1
 800e51e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e526:	2b00      	cmp	r3, #0
 800e528:	d003      	beq.n	800e532 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e536:	2b00      	cmp	r3, #0
 800e538:	d032      	beq.n	800e5a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e53e:	f003 0301 	and.w	r3, r3, #1
 800e542:	2b00      	cmp	r3, #0
 800e544:	d022      	beq.n	800e58c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2205      	movs	r2, #5
 800e54a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	681a      	ldr	r2, [r3, #0]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f022 0201 	bic.w	r2, r2, #1
 800e55c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	3301      	adds	r3, #1
 800e562:	60bb      	str	r3, [r7, #8]
 800e564:	697a      	ldr	r2, [r7, #20]
 800e566:	429a      	cmp	r2, r3
 800e568:	d307      	bcc.n	800e57a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	f003 0301 	and.w	r3, r3, #1
 800e574:	2b00      	cmp	r3, #0
 800e576:	d1f2      	bne.n	800e55e <HAL_DMA_IRQHandler+0x2ca>
 800e578:	e000      	b.n	800e57c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800e57a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2200      	movs	r2, #0
 800e580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2201      	movs	r2, #1
 800e588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e590:	2b00      	cmp	r3, #0
 800e592:	d005      	beq.n	800e5a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	4798      	blx	r3
 800e59c:	e000      	b.n	800e5a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800e59e:	bf00      	nop
    }
  }
}
 800e5a0:	3718      	adds	r7, #24
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop

0800e5a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	60f8      	str	r0, [r7, #12]
 800e5b0:	60b9      	str	r1, [r7, #8]
 800e5b2:	607a      	str	r2, [r7, #4]
 800e5b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e5c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	683a      	ldr	r2, [r7, #0]
 800e5cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	689b      	ldr	r3, [r3, #8]
 800e5d2:	2b40      	cmp	r3, #64	; 0x40
 800e5d4:	d108      	bne.n	800e5e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	687a      	ldr	r2, [r7, #4]
 800e5dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	68ba      	ldr	r2, [r7, #8]
 800e5e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800e5e6:	e007      	b.n	800e5f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	68ba      	ldr	r2, [r7, #8]
 800e5ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	60da      	str	r2, [r3, #12]
}
 800e5f8:	bf00      	nop
 800e5fa:	3714      	adds	r7, #20
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr

0800e604 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e604:	b480      	push	{r7}
 800e606:	b085      	sub	sp, #20
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	b2db      	uxtb	r3, r3
 800e612:	3b10      	subs	r3, #16
 800e614:	4a14      	ldr	r2, [pc, #80]	; (800e668 <DMA_CalcBaseAndBitshift+0x64>)
 800e616:	fba2 2303 	umull	r2, r3, r2, r3
 800e61a:	091b      	lsrs	r3, r3, #4
 800e61c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800e61e:	4a13      	ldr	r2, [pc, #76]	; (800e66c <DMA_CalcBaseAndBitshift+0x68>)
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	4413      	add	r3, r2
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	461a      	mov	r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2b03      	cmp	r3, #3
 800e630:	d909      	bls.n	800e646 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800e63a:	f023 0303 	bic.w	r3, r3, #3
 800e63e:	1d1a      	adds	r2, r3, #4
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	659a      	str	r2, [r3, #88]	; 0x58
 800e644:	e007      	b.n	800e656 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800e64e:	f023 0303 	bic.w	r3, r3, #3
 800e652:	687a      	ldr	r2, [r7, #4]
 800e654:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3714      	adds	r7, #20
 800e65e:	46bd      	mov	sp, r7
 800e660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e664:	4770      	bx	lr
 800e666:	bf00      	nop
 800e668:	aaaaaaab 	.word	0xaaaaaaab
 800e66c:	08014050 	.word	0x08014050

0800e670 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800e670:	b480      	push	{r7}
 800e672:	b085      	sub	sp, #20
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e678:	2300      	movs	r3, #0
 800e67a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e680:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	699b      	ldr	r3, [r3, #24]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d11f      	bne.n	800e6ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	2b03      	cmp	r3, #3
 800e68e:	d855      	bhi.n	800e73c <DMA_CheckFifoParam+0xcc>
 800e690:	a201      	add	r2, pc, #4	; (adr r2, 800e698 <DMA_CheckFifoParam+0x28>)
 800e692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e696:	bf00      	nop
 800e698:	0800e6a9 	.word	0x0800e6a9
 800e69c:	0800e6bb 	.word	0x0800e6bb
 800e6a0:	0800e6a9 	.word	0x0800e6a9
 800e6a4:	0800e73d 	.word	0x0800e73d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d045      	beq.n	800e740 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e6b8:	e042      	b.n	800e740 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e6c2:	d13f      	bne.n	800e744 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e6c8:	e03c      	b.n	800e744 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	699b      	ldr	r3, [r3, #24]
 800e6ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e6d2:	d121      	bne.n	800e718 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	2b03      	cmp	r3, #3
 800e6d8:	d836      	bhi.n	800e748 <DMA_CheckFifoParam+0xd8>
 800e6da:	a201      	add	r2, pc, #4	; (adr r2, 800e6e0 <DMA_CheckFifoParam+0x70>)
 800e6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e0:	0800e6f1 	.word	0x0800e6f1
 800e6e4:	0800e6f7 	.word	0x0800e6f7
 800e6e8:	0800e6f1 	.word	0x0800e6f1
 800e6ec:	0800e709 	.word	0x0800e709
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	73fb      	strb	r3, [r7, #15]
      break;
 800e6f4:	e02f      	b.n	800e756 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d024      	beq.n	800e74c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800e702:	2301      	movs	r3, #1
 800e704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e706:	e021      	b.n	800e74c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e70c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e710:	d11e      	bne.n	800e750 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800e712:	2301      	movs	r3, #1
 800e714:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800e716:	e01b      	b.n	800e750 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	2b02      	cmp	r3, #2
 800e71c:	d902      	bls.n	800e724 <DMA_CheckFifoParam+0xb4>
 800e71e:	2b03      	cmp	r3, #3
 800e720:	d003      	beq.n	800e72a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800e722:	e018      	b.n	800e756 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800e724:	2301      	movs	r3, #1
 800e726:	73fb      	strb	r3, [r7, #15]
      break;
 800e728:	e015      	b.n	800e756 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e72e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e732:	2b00      	cmp	r3, #0
 800e734:	d00e      	beq.n	800e754 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800e736:	2301      	movs	r3, #1
 800e738:	73fb      	strb	r3, [r7, #15]
      break;
 800e73a:	e00b      	b.n	800e754 <DMA_CheckFifoParam+0xe4>
      break;
 800e73c:	bf00      	nop
 800e73e:	e00a      	b.n	800e756 <DMA_CheckFifoParam+0xe6>
      break;
 800e740:	bf00      	nop
 800e742:	e008      	b.n	800e756 <DMA_CheckFifoParam+0xe6>
      break;
 800e744:	bf00      	nop
 800e746:	e006      	b.n	800e756 <DMA_CheckFifoParam+0xe6>
      break;
 800e748:	bf00      	nop
 800e74a:	e004      	b.n	800e756 <DMA_CheckFifoParam+0xe6>
      break;
 800e74c:	bf00      	nop
 800e74e:	e002      	b.n	800e756 <DMA_CheckFifoParam+0xe6>
      break;   
 800e750:	bf00      	nop
 800e752:	e000      	b.n	800e756 <DMA_CheckFifoParam+0xe6>
      break;
 800e754:	bf00      	nop
    }
  } 
  
  return status; 
 800e756:	7bfb      	ldrb	r3, [r7, #15]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3714      	adds	r7, #20
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800e76a:	2300      	movs	r3, #0
 800e76c:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800e76e:	4b4b      	ldr	r3, [pc, #300]	; (800e89c <HAL_FLASH_IRQHandler+0x138>)
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800e776:	2b00      	cmp	r3, #0
 800e778:	d020      	beq.n	800e7bc <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800e77a:	4b49      	ldr	r3, [pc, #292]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	b2db      	uxtb	r3, r3
 800e780:	2b01      	cmp	r3, #1
 800e782:	d107      	bne.n	800e794 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800e784:	4b46      	ldr	r3, [pc, #280]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800e78a:	4b45      	ldr	r3, [pc, #276]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e78c:	f04f 32ff 	mov.w	r2, #4294967295
 800e790:	60da      	str	r2, [r3, #12]
 800e792:	e00b      	b.n	800e7ac <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800e794:	4b42      	ldr	r3, [pc, #264]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	2b02      	cmp	r3, #2
 800e79c:	d103      	bne.n	800e7a6 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800e79e:	4b40      	ldr	r3, [pc, #256]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e7a0:	691b      	ldr	r3, [r3, #16]
 800e7a2:	607b      	str	r3, [r7, #4]
 800e7a4:	e002      	b.n	800e7ac <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800e7a6:	4b3e      	ldr	r3, [pc, #248]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e7a8:	695b      	ldr	r3, [r3, #20]
 800e7aa:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800e7ac:	f000 f88e 	bl	800e8cc <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 f881 	bl	800e8b8 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800e7b6:	4b3a      	ldr	r3, [pc, #232]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800e7bc:	4b37      	ldr	r3, [pc, #220]	; (800e89c <HAL_FLASH_IRQHandler+0x138>)
 800e7be:	68db      	ldr	r3, [r3, #12]
 800e7c0:	f003 0301 	and.w	r3, r3, #1
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d04a      	beq.n	800e85e <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e7c8:	4b34      	ldr	r3, [pc, #208]	; (800e89c <HAL_FLASH_IRQHandler+0x138>)
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800e7ce:	4b34      	ldr	r3, [pc, #208]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d12d      	bne.n	800e834 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800e7d8:	4b31      	ldr	r3, [pc, #196]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	3b01      	subs	r3, #1
 800e7de:	4a30      	ldr	r2, [pc, #192]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e7e0:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800e7e2:	4b2f      	ldr	r3, [pc, #188]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d015      	beq.n	800e816 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800e7ea:	4b2d      	ldr	r3, [pc, #180]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f000 f857 	bl	800e8a4 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800e7f6:	4b2a      	ldr	r3, [pc, #168]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e7f8:	68db      	ldr	r3, [r3, #12]
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	4a28      	ldr	r2, [pc, #160]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e7fe:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800e800:	4b27      	ldr	r3, [pc, #156]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e802:	68db      	ldr	r3, [r3, #12]
 800e804:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800e806:	4b26      	ldr	r3, [pc, #152]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e808:	7a1b      	ldrb	r3, [r3, #8]
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	4619      	mov	r1, r3
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f000 f8b2 	bl	800e978 <FLASH_Erase_Sector>
 800e814:	e023      	b.n	800e85e <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800e816:	f04f 33ff 	mov.w	r3, #4294967295
 800e81a:	607b      	str	r3, [r7, #4]
 800e81c:	4a20      	ldr	r2, [pc, #128]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800e822:	4b1f      	ldr	r3, [pc, #124]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e824:	2200      	movs	r2, #0
 800e826:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800e828:	f000 f8ee 	bl	800ea08 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 f839 	bl	800e8a4 <HAL_FLASH_EndOfOperationCallback>
 800e832:	e014      	b.n	800e85e <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800e834:	4b1a      	ldr	r3, [pc, #104]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	2b02      	cmp	r3, #2
 800e83c:	d107      	bne.n	800e84e <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800e83e:	f000 f8e3 	bl	800ea08 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800e842:	4b17      	ldr	r3, [pc, #92]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e844:	691b      	ldr	r3, [r3, #16]
 800e846:	4618      	mov	r0, r3
 800e848:	f000 f82c 	bl	800e8a4 <HAL_FLASH_EndOfOperationCallback>
 800e84c:	e004      	b.n	800e858 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800e84e:	4b14      	ldr	r3, [pc, #80]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e850:	695b      	ldr	r3, [r3, #20]
 800e852:	4618      	mov	r0, r3
 800e854:	f000 f826 	bl	800e8a4 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800e858:	4b11      	ldr	r3, [pc, #68]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e85a:	2200      	movs	r2, #0
 800e85c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800e85e:	4b10      	ldr	r3, [pc, #64]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	b2db      	uxtb	r3, r3
 800e864:	2b00      	cmp	r3, #0
 800e866:	d114      	bne.n	800e892 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800e868:	4b0c      	ldr	r3, [pc, #48]	; (800e89c <HAL_FLASH_IRQHandler+0x138>)
 800e86a:	691b      	ldr	r3, [r3, #16]
 800e86c:	4a0b      	ldr	r2, [pc, #44]	; (800e89c <HAL_FLASH_IRQHandler+0x138>)
 800e86e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e872:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800e874:	4b09      	ldr	r3, [pc, #36]	; (800e89c <HAL_FLASH_IRQHandler+0x138>)
 800e876:	691b      	ldr	r3, [r3, #16]
 800e878:	4a08      	ldr	r2, [pc, #32]	; (800e89c <HAL_FLASH_IRQHandler+0x138>)
 800e87a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e87e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800e880:	4b06      	ldr	r3, [pc, #24]	; (800e89c <HAL_FLASH_IRQHandler+0x138>)
 800e882:	691b      	ldr	r3, [r3, #16]
 800e884:	4a05      	ldr	r2, [pc, #20]	; (800e89c <HAL_FLASH_IRQHandler+0x138>)
 800e886:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800e88a:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800e88c:	4b04      	ldr	r3, [pc, #16]	; (800e8a0 <HAL_FLASH_IRQHandler+0x13c>)
 800e88e:	2200      	movs	r2, #0
 800e890:	761a      	strb	r2, [r3, #24]
  }
}
 800e892:	bf00      	nop
 800e894:	3708      	adds	r7, #8
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
 800e89a:	bf00      	nop
 800e89c:	40023c00 	.word	0x40023c00
 800e8a0:	20000900 	.word	0x20000900

0800e8a4 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800e8ac:	bf00      	nop
 800e8ae:	370c      	adds	r7, #12
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800e8c0:	bf00      	nop
 800e8c2:	370c      	adds	r7, #12
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr

0800e8cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800e8cc:	b480      	push	{r7}
 800e8ce:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800e8d0:	4b27      	ldr	r3, [pc, #156]	; (800e970 <FLASH_SetErrorCode+0xa4>)
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	f003 0310 	and.w	r3, r3, #16
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d008      	beq.n	800e8ee <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800e8dc:	4b25      	ldr	r3, [pc, #148]	; (800e974 <FLASH_SetErrorCode+0xa8>)
 800e8de:	69db      	ldr	r3, [r3, #28]
 800e8e0:	f043 0310 	orr.w	r3, r3, #16
 800e8e4:	4a23      	ldr	r2, [pc, #140]	; (800e974 <FLASH_SetErrorCode+0xa8>)
 800e8e6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800e8e8:	4b21      	ldr	r3, [pc, #132]	; (800e970 <FLASH_SetErrorCode+0xa4>)
 800e8ea:	2210      	movs	r2, #16
 800e8ec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800e8ee:	4b20      	ldr	r3, [pc, #128]	; (800e970 <FLASH_SetErrorCode+0xa4>)
 800e8f0:	68db      	ldr	r3, [r3, #12]
 800e8f2:	f003 0320 	and.w	r3, r3, #32
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d008      	beq.n	800e90c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800e8fa:	4b1e      	ldr	r3, [pc, #120]	; (800e974 <FLASH_SetErrorCode+0xa8>)
 800e8fc:	69db      	ldr	r3, [r3, #28]
 800e8fe:	f043 0308 	orr.w	r3, r3, #8
 800e902:	4a1c      	ldr	r2, [pc, #112]	; (800e974 <FLASH_SetErrorCode+0xa8>)
 800e904:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800e906:	4b1a      	ldr	r3, [pc, #104]	; (800e970 <FLASH_SetErrorCode+0xa4>)
 800e908:	2220      	movs	r2, #32
 800e90a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800e90c:	4b18      	ldr	r3, [pc, #96]	; (800e970 <FLASH_SetErrorCode+0xa4>)
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e914:	2b00      	cmp	r3, #0
 800e916:	d008      	beq.n	800e92a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800e918:	4b16      	ldr	r3, [pc, #88]	; (800e974 <FLASH_SetErrorCode+0xa8>)
 800e91a:	69db      	ldr	r3, [r3, #28]
 800e91c:	f043 0304 	orr.w	r3, r3, #4
 800e920:	4a14      	ldr	r2, [pc, #80]	; (800e974 <FLASH_SetErrorCode+0xa8>)
 800e922:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800e924:	4b12      	ldr	r3, [pc, #72]	; (800e970 <FLASH_SetErrorCode+0xa4>)
 800e926:	2240      	movs	r2, #64	; 0x40
 800e928:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800e92a:	4b11      	ldr	r3, [pc, #68]	; (800e970 <FLASH_SetErrorCode+0xa4>)
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e932:	2b00      	cmp	r3, #0
 800e934:	d008      	beq.n	800e948 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800e936:	4b0f      	ldr	r3, [pc, #60]	; (800e974 <FLASH_SetErrorCode+0xa8>)
 800e938:	69db      	ldr	r3, [r3, #28]
 800e93a:	f043 0302 	orr.w	r3, r3, #2
 800e93e:	4a0d      	ldr	r2, [pc, #52]	; (800e974 <FLASH_SetErrorCode+0xa8>)
 800e940:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800e942:	4b0b      	ldr	r3, [pc, #44]	; (800e970 <FLASH_SetErrorCode+0xa4>)
 800e944:	2280      	movs	r2, #128	; 0x80
 800e946:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800e948:	4b09      	ldr	r3, [pc, #36]	; (800e970 <FLASH_SetErrorCode+0xa4>)
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	f003 0302 	and.w	r3, r3, #2
 800e950:	2b00      	cmp	r3, #0
 800e952:	d008      	beq.n	800e966 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800e954:	4b07      	ldr	r3, [pc, #28]	; (800e974 <FLASH_SetErrorCode+0xa8>)
 800e956:	69db      	ldr	r3, [r3, #28]
 800e958:	f043 0320 	orr.w	r3, r3, #32
 800e95c:	4a05      	ldr	r2, [pc, #20]	; (800e974 <FLASH_SetErrorCode+0xa8>)
 800e95e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800e960:	4b03      	ldr	r3, [pc, #12]	; (800e970 <FLASH_SetErrorCode+0xa4>)
 800e962:	2202      	movs	r2, #2
 800e964:	60da      	str	r2, [r3, #12]
  }
}
 800e966:	bf00      	nop
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr
 800e970:	40023c00 	.word	0x40023c00
 800e974:	20000900 	.word	0x20000900

0800e978 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800e978:	b480      	push	{r7}
 800e97a:	b085      	sub	sp, #20
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	460b      	mov	r3, r1
 800e982:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800e984:	2300      	movs	r3, #0
 800e986:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800e988:	78fb      	ldrb	r3, [r7, #3]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d102      	bne.n	800e994 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800e98e:	2300      	movs	r3, #0
 800e990:	60fb      	str	r3, [r7, #12]
 800e992:	e010      	b.n	800e9b6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800e994:	78fb      	ldrb	r3, [r7, #3]
 800e996:	2b01      	cmp	r3, #1
 800e998:	d103      	bne.n	800e9a2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800e99a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e99e:	60fb      	str	r3, [r7, #12]
 800e9a0:	e009      	b.n	800e9b6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800e9a2:	78fb      	ldrb	r3, [r7, #3]
 800e9a4:	2b02      	cmp	r3, #2
 800e9a6:	d103      	bne.n	800e9b0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800e9a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e9ac:	60fb      	str	r3, [r7, #12]
 800e9ae:	e002      	b.n	800e9b6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800e9b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e9b4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e9b6:	4b13      	ldr	r3, [pc, #76]	; (800ea04 <FLASH_Erase_Sector+0x8c>)
 800e9b8:	691b      	ldr	r3, [r3, #16]
 800e9ba:	4a12      	ldr	r2, [pc, #72]	; (800ea04 <FLASH_Erase_Sector+0x8c>)
 800e9bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800e9c2:	4b10      	ldr	r3, [pc, #64]	; (800ea04 <FLASH_Erase_Sector+0x8c>)
 800e9c4:	691a      	ldr	r2, [r3, #16]
 800e9c6:	490f      	ldr	r1, [pc, #60]	; (800ea04 <FLASH_Erase_Sector+0x8c>)
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	4313      	orrs	r3, r2
 800e9cc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800e9ce:	4b0d      	ldr	r3, [pc, #52]	; (800ea04 <FLASH_Erase_Sector+0x8c>)
 800e9d0:	691b      	ldr	r3, [r3, #16]
 800e9d2:	4a0c      	ldr	r2, [pc, #48]	; (800ea04 <FLASH_Erase_Sector+0x8c>)
 800e9d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e9d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800e9da:	4b0a      	ldr	r3, [pc, #40]	; (800ea04 <FLASH_Erase_Sector+0x8c>)
 800e9dc:	691a      	ldr	r2, [r3, #16]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	00db      	lsls	r3, r3, #3
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	4a07      	ldr	r2, [pc, #28]	; (800ea04 <FLASH_Erase_Sector+0x8c>)
 800e9e6:	f043 0302 	orr.w	r3, r3, #2
 800e9ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800e9ec:	4b05      	ldr	r3, [pc, #20]	; (800ea04 <FLASH_Erase_Sector+0x8c>)
 800e9ee:	691b      	ldr	r3, [r3, #16]
 800e9f0:	4a04      	ldr	r2, [pc, #16]	; (800ea04 <FLASH_Erase_Sector+0x8c>)
 800e9f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e9f6:	6113      	str	r3, [r2, #16]
}
 800e9f8:	bf00      	nop
 800e9fa:	3714      	adds	r7, #20
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr
 800ea04:	40023c00 	.word	0x40023c00

0800ea08 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800ea0c:	4b20      	ldr	r3, [pc, #128]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d017      	beq.n	800ea48 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800ea18:	4b1d      	ldr	r3, [pc, #116]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a1c      	ldr	r2, [pc, #112]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ea22:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800ea24:	4b1a      	ldr	r3, [pc, #104]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a19      	ldr	r2, [pc, #100]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ea2e:	6013      	str	r3, [r2, #0]
 800ea30:	4b17      	ldr	r3, [pc, #92]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4a16      	ldr	r2, [pc, #88]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea3a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ea3c:	4b14      	ldr	r3, [pc, #80]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4a13      	ldr	r2, [pc, #76]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ea46:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800ea48:	4b11      	ldr	r3, [pc, #68]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d017      	beq.n	800ea84 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800ea54:	4b0e      	ldr	r3, [pc, #56]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	4a0d      	ldr	r2, [pc, #52]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ea5e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800ea60:	4b0b      	ldr	r3, [pc, #44]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4a0a      	ldr	r2, [pc, #40]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ea6a:	6013      	str	r3, [r2, #0]
 800ea6c:	4b08      	ldr	r3, [pc, #32]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4a07      	ldr	r2, [pc, #28]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea76:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800ea78:	4b05      	ldr	r3, [pc, #20]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	4a04      	ldr	r2, [pc, #16]	; (800ea90 <FLASH_FlushCaches+0x88>)
 800ea7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ea82:	6013      	str	r3, [r2, #0]
  }
}
 800ea84:	bf00      	nop
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr
 800ea8e:	bf00      	nop
 800ea90:	40023c00 	.word	0x40023c00

0800ea94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b089      	sub	sp, #36	; 0x24
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800eaaa:	2300      	movs	r3, #0
 800eaac:	61fb      	str	r3, [r7, #28]
 800eaae:	e16b      	b.n	800ed88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800eab0:	2201      	movs	r2, #1
 800eab2:	69fb      	ldr	r3, [r7, #28]
 800eab4:	fa02 f303 	lsl.w	r3, r2, r3
 800eab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	697a      	ldr	r2, [r7, #20]
 800eac0:	4013      	ands	r3, r2
 800eac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800eac4:	693a      	ldr	r2, [r7, #16]
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	f040 815a 	bne.w	800ed82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	2b01      	cmp	r3, #1
 800ead4:	d00b      	beq.n	800eaee <HAL_GPIO_Init+0x5a>
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	2b02      	cmp	r3, #2
 800eadc:	d007      	beq.n	800eaee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800eae2:	2b11      	cmp	r3, #17
 800eae4:	d003      	beq.n	800eaee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	2b12      	cmp	r3, #18
 800eaec:	d130      	bne.n	800eb50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	689b      	ldr	r3, [r3, #8]
 800eaf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	005b      	lsls	r3, r3, #1
 800eaf8:	2203      	movs	r2, #3
 800eafa:	fa02 f303 	lsl.w	r3, r2, r3
 800eafe:	43db      	mvns	r3, r3
 800eb00:	69ba      	ldr	r2, [r7, #24]
 800eb02:	4013      	ands	r3, r2
 800eb04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	68da      	ldr	r2, [r3, #12]
 800eb0a:	69fb      	ldr	r3, [r7, #28]
 800eb0c:	005b      	lsls	r3, r3, #1
 800eb0e:	fa02 f303 	lsl.w	r3, r2, r3
 800eb12:	69ba      	ldr	r2, [r7, #24]
 800eb14:	4313      	orrs	r3, r2
 800eb16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	69ba      	ldr	r2, [r7, #24]
 800eb1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800eb24:	2201      	movs	r2, #1
 800eb26:	69fb      	ldr	r3, [r7, #28]
 800eb28:	fa02 f303 	lsl.w	r3, r2, r3
 800eb2c:	43db      	mvns	r3, r3
 800eb2e:	69ba      	ldr	r2, [r7, #24]
 800eb30:	4013      	ands	r3, r2
 800eb32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	091b      	lsrs	r3, r3, #4
 800eb3a:	f003 0201 	and.w	r2, r3, #1
 800eb3e:	69fb      	ldr	r3, [r7, #28]
 800eb40:	fa02 f303 	lsl.w	r3, r2, r3
 800eb44:	69ba      	ldr	r2, [r7, #24]
 800eb46:	4313      	orrs	r3, r2
 800eb48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	69ba      	ldr	r2, [r7, #24]
 800eb4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	68db      	ldr	r3, [r3, #12]
 800eb54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800eb56:	69fb      	ldr	r3, [r7, #28]
 800eb58:	005b      	lsls	r3, r3, #1
 800eb5a:	2203      	movs	r2, #3
 800eb5c:	fa02 f303 	lsl.w	r3, r2, r3
 800eb60:	43db      	mvns	r3, r3
 800eb62:	69ba      	ldr	r2, [r7, #24]
 800eb64:	4013      	ands	r3, r2
 800eb66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	689a      	ldr	r2, [r3, #8]
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	005b      	lsls	r3, r3, #1
 800eb70:	fa02 f303 	lsl.w	r3, r2, r3
 800eb74:	69ba      	ldr	r2, [r7, #24]
 800eb76:	4313      	orrs	r3, r2
 800eb78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	69ba      	ldr	r2, [r7, #24]
 800eb7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	2b02      	cmp	r3, #2
 800eb86:	d003      	beq.n	800eb90 <HAL_GPIO_Init+0xfc>
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	2b12      	cmp	r3, #18
 800eb8e:	d123      	bne.n	800ebd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	08da      	lsrs	r2, r3, #3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	3208      	adds	r2, #8
 800eb98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800eb9e:	69fb      	ldr	r3, [r7, #28]
 800eba0:	f003 0307 	and.w	r3, r3, #7
 800eba4:	009b      	lsls	r3, r3, #2
 800eba6:	220f      	movs	r2, #15
 800eba8:	fa02 f303 	lsl.w	r3, r2, r3
 800ebac:	43db      	mvns	r3, r3
 800ebae:	69ba      	ldr	r2, [r7, #24]
 800ebb0:	4013      	ands	r3, r2
 800ebb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	691a      	ldr	r2, [r3, #16]
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	f003 0307 	and.w	r3, r3, #7
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	fa02 f303 	lsl.w	r3, r2, r3
 800ebc4:	69ba      	ldr	r2, [r7, #24]
 800ebc6:	4313      	orrs	r3, r2
 800ebc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	08da      	lsrs	r2, r3, #3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	3208      	adds	r2, #8
 800ebd2:	69b9      	ldr	r1, [r7, #24]
 800ebd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	005b      	lsls	r3, r3, #1
 800ebe2:	2203      	movs	r2, #3
 800ebe4:	fa02 f303 	lsl.w	r3, r2, r3
 800ebe8:	43db      	mvns	r3, r3
 800ebea:	69ba      	ldr	r2, [r7, #24]
 800ebec:	4013      	ands	r3, r2
 800ebee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	f003 0203 	and.w	r2, r3, #3
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	005b      	lsls	r3, r3, #1
 800ebfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ec00:	69ba      	ldr	r2, [r7, #24]
 800ec02:	4313      	orrs	r3, r2
 800ec04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	69ba      	ldr	r2, [r7, #24]
 800ec0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	685b      	ldr	r3, [r3, #4]
 800ec10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	f000 80b4 	beq.w	800ed82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	60fb      	str	r3, [r7, #12]
 800ec1e:	4b5f      	ldr	r3, [pc, #380]	; (800ed9c <HAL_GPIO_Init+0x308>)
 800ec20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec22:	4a5e      	ldr	r2, [pc, #376]	; (800ed9c <HAL_GPIO_Init+0x308>)
 800ec24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ec28:	6453      	str	r3, [r2, #68]	; 0x44
 800ec2a:	4b5c      	ldr	r3, [pc, #368]	; (800ed9c <HAL_GPIO_Init+0x308>)
 800ec2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec32:	60fb      	str	r3, [r7, #12]
 800ec34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ec36:	4a5a      	ldr	r2, [pc, #360]	; (800eda0 <HAL_GPIO_Init+0x30c>)
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	089b      	lsrs	r3, r3, #2
 800ec3c:	3302      	adds	r3, #2
 800ec3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	f003 0303 	and.w	r3, r3, #3
 800ec4a:	009b      	lsls	r3, r3, #2
 800ec4c:	220f      	movs	r2, #15
 800ec4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ec52:	43db      	mvns	r3, r3
 800ec54:	69ba      	ldr	r2, [r7, #24]
 800ec56:	4013      	ands	r3, r2
 800ec58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	4a51      	ldr	r2, [pc, #324]	; (800eda4 <HAL_GPIO_Init+0x310>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d02b      	beq.n	800ecba <HAL_GPIO_Init+0x226>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	4a50      	ldr	r2, [pc, #320]	; (800eda8 <HAL_GPIO_Init+0x314>)
 800ec66:	4293      	cmp	r3, r2
 800ec68:	d025      	beq.n	800ecb6 <HAL_GPIO_Init+0x222>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	4a4f      	ldr	r2, [pc, #316]	; (800edac <HAL_GPIO_Init+0x318>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d01f      	beq.n	800ecb2 <HAL_GPIO_Init+0x21e>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	4a4e      	ldr	r2, [pc, #312]	; (800edb0 <HAL_GPIO_Init+0x31c>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d019      	beq.n	800ecae <HAL_GPIO_Init+0x21a>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	4a4d      	ldr	r2, [pc, #308]	; (800edb4 <HAL_GPIO_Init+0x320>)
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	d013      	beq.n	800ecaa <HAL_GPIO_Init+0x216>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	4a4c      	ldr	r2, [pc, #304]	; (800edb8 <HAL_GPIO_Init+0x324>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d00d      	beq.n	800eca6 <HAL_GPIO_Init+0x212>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	4a4b      	ldr	r2, [pc, #300]	; (800edbc <HAL_GPIO_Init+0x328>)
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d007      	beq.n	800eca2 <HAL_GPIO_Init+0x20e>
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	4a4a      	ldr	r2, [pc, #296]	; (800edc0 <HAL_GPIO_Init+0x32c>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d101      	bne.n	800ec9e <HAL_GPIO_Init+0x20a>
 800ec9a:	2307      	movs	r3, #7
 800ec9c:	e00e      	b.n	800ecbc <HAL_GPIO_Init+0x228>
 800ec9e:	2308      	movs	r3, #8
 800eca0:	e00c      	b.n	800ecbc <HAL_GPIO_Init+0x228>
 800eca2:	2306      	movs	r3, #6
 800eca4:	e00a      	b.n	800ecbc <HAL_GPIO_Init+0x228>
 800eca6:	2305      	movs	r3, #5
 800eca8:	e008      	b.n	800ecbc <HAL_GPIO_Init+0x228>
 800ecaa:	2304      	movs	r3, #4
 800ecac:	e006      	b.n	800ecbc <HAL_GPIO_Init+0x228>
 800ecae:	2303      	movs	r3, #3
 800ecb0:	e004      	b.n	800ecbc <HAL_GPIO_Init+0x228>
 800ecb2:	2302      	movs	r3, #2
 800ecb4:	e002      	b.n	800ecbc <HAL_GPIO_Init+0x228>
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	e000      	b.n	800ecbc <HAL_GPIO_Init+0x228>
 800ecba:	2300      	movs	r3, #0
 800ecbc:	69fa      	ldr	r2, [r7, #28]
 800ecbe:	f002 0203 	and.w	r2, r2, #3
 800ecc2:	0092      	lsls	r2, r2, #2
 800ecc4:	4093      	lsls	r3, r2
 800ecc6:	69ba      	ldr	r2, [r7, #24]
 800ecc8:	4313      	orrs	r3, r2
 800ecca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800eccc:	4934      	ldr	r1, [pc, #208]	; (800eda0 <HAL_GPIO_Init+0x30c>)
 800ecce:	69fb      	ldr	r3, [r7, #28]
 800ecd0:	089b      	lsrs	r3, r3, #2
 800ecd2:	3302      	adds	r3, #2
 800ecd4:	69ba      	ldr	r2, [r7, #24]
 800ecd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ecda:	4b3a      	ldr	r3, [pc, #232]	; (800edc4 <HAL_GPIO_Init+0x330>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	43db      	mvns	r3, r3
 800ece4:	69ba      	ldr	r2, [r7, #24]
 800ece6:	4013      	ands	r3, r2
 800ece8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d003      	beq.n	800ecfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ecf6:	69ba      	ldr	r2, [r7, #24]
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	4313      	orrs	r3, r2
 800ecfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ecfe:	4a31      	ldr	r2, [pc, #196]	; (800edc4 <HAL_GPIO_Init+0x330>)
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ed04:	4b2f      	ldr	r3, [pc, #188]	; (800edc4 <HAL_GPIO_Init+0x330>)
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	43db      	mvns	r3, r3
 800ed0e:	69ba      	ldr	r2, [r7, #24]
 800ed10:	4013      	ands	r3, r2
 800ed12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d003      	beq.n	800ed28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ed20:	69ba      	ldr	r2, [r7, #24]
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	4313      	orrs	r3, r2
 800ed26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ed28:	4a26      	ldr	r2, [pc, #152]	; (800edc4 <HAL_GPIO_Init+0x330>)
 800ed2a:	69bb      	ldr	r3, [r7, #24]
 800ed2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ed2e:	4b25      	ldr	r3, [pc, #148]	; (800edc4 <HAL_GPIO_Init+0x330>)
 800ed30:	689b      	ldr	r3, [r3, #8]
 800ed32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	43db      	mvns	r3, r3
 800ed38:	69ba      	ldr	r2, [r7, #24]
 800ed3a:	4013      	ands	r3, r2
 800ed3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d003      	beq.n	800ed52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800ed4a:	69ba      	ldr	r2, [r7, #24]
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ed52:	4a1c      	ldr	r2, [pc, #112]	; (800edc4 <HAL_GPIO_Init+0x330>)
 800ed54:	69bb      	ldr	r3, [r7, #24]
 800ed56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ed58:	4b1a      	ldr	r3, [pc, #104]	; (800edc4 <HAL_GPIO_Init+0x330>)
 800ed5a:	68db      	ldr	r3, [r3, #12]
 800ed5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	43db      	mvns	r3, r3
 800ed62:	69ba      	ldr	r2, [r7, #24]
 800ed64:	4013      	ands	r3, r2
 800ed66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d003      	beq.n	800ed7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800ed74:	69ba      	ldr	r2, [r7, #24]
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	4313      	orrs	r3, r2
 800ed7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ed7c:	4a11      	ldr	r2, [pc, #68]	; (800edc4 <HAL_GPIO_Init+0x330>)
 800ed7e:	69bb      	ldr	r3, [r7, #24]
 800ed80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	3301      	adds	r3, #1
 800ed86:	61fb      	str	r3, [r7, #28]
 800ed88:	69fb      	ldr	r3, [r7, #28]
 800ed8a:	2b0f      	cmp	r3, #15
 800ed8c:	f67f ae90 	bls.w	800eab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ed90:	bf00      	nop
 800ed92:	3724      	adds	r7, #36	; 0x24
 800ed94:	46bd      	mov	sp, r7
 800ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9a:	4770      	bx	lr
 800ed9c:	40023800 	.word	0x40023800
 800eda0:	40013800 	.word	0x40013800
 800eda4:	40020000 	.word	0x40020000
 800eda8:	40020400 	.word	0x40020400
 800edac:	40020800 	.word	0x40020800
 800edb0:	40020c00 	.word	0x40020c00
 800edb4:	40021000 	.word	0x40021000
 800edb8:	40021400 	.word	0x40021400
 800edbc:	40021800 	.word	0x40021800
 800edc0:	40021c00 	.word	0x40021c00
 800edc4:	40013c00 	.word	0x40013c00

0800edc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	460b      	mov	r3, r1
 800edd2:	807b      	strh	r3, [r7, #2]
 800edd4:	4613      	mov	r3, r2
 800edd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800edd8:	787b      	ldrb	r3, [r7, #1]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d003      	beq.n	800ede6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800edde:	887a      	ldrh	r2, [r7, #2]
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ede4:	e003      	b.n	800edee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ede6:	887b      	ldrh	r3, [r7, #2]
 800ede8:	041a      	lsls	r2, r3, #16
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	619a      	str	r2, [r3, #24]
}
 800edee:	bf00      	nop
 800edf0:	370c      	adds	r7, #12
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr
	...

0800edfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b086      	sub	sp, #24
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d101      	bne.n	800ee0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	e25b      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f003 0301 	and.w	r3, r3, #1
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d075      	beq.n	800ef06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ee1a:	4ba3      	ldr	r3, [pc, #652]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ee1c:	689b      	ldr	r3, [r3, #8]
 800ee1e:	f003 030c 	and.w	r3, r3, #12
 800ee22:	2b04      	cmp	r3, #4
 800ee24:	d00c      	beq.n	800ee40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ee26:	4ba0      	ldr	r3, [pc, #640]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ee2e:	2b08      	cmp	r3, #8
 800ee30:	d112      	bne.n	800ee58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ee32:	4b9d      	ldr	r3, [pc, #628]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ee34:	685b      	ldr	r3, [r3, #4]
 800ee36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee3e:	d10b      	bne.n	800ee58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ee40:	4b99      	ldr	r3, [pc, #612]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d05b      	beq.n	800ef04 <HAL_RCC_OscConfig+0x108>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d157      	bne.n	800ef04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ee54:	2301      	movs	r3, #1
 800ee56:	e236      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee60:	d106      	bne.n	800ee70 <HAL_RCC_OscConfig+0x74>
 800ee62:	4b91      	ldr	r3, [pc, #580]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	4a90      	ldr	r2, [pc, #576]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ee68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ee6c:	6013      	str	r3, [r2, #0]
 800ee6e:	e01d      	b.n	800eeac <HAL_RCC_OscConfig+0xb0>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ee78:	d10c      	bne.n	800ee94 <HAL_RCC_OscConfig+0x98>
 800ee7a:	4b8b      	ldr	r3, [pc, #556]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4a8a      	ldr	r2, [pc, #552]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ee80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ee84:	6013      	str	r3, [r2, #0]
 800ee86:	4b88      	ldr	r3, [pc, #544]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a87      	ldr	r2, [pc, #540]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ee8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ee90:	6013      	str	r3, [r2, #0]
 800ee92:	e00b      	b.n	800eeac <HAL_RCC_OscConfig+0xb0>
 800ee94:	4b84      	ldr	r3, [pc, #528]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a83      	ldr	r2, [pc, #524]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ee9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ee9e:	6013      	str	r3, [r2, #0]
 800eea0:	4b81      	ldr	r3, [pc, #516]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4a80      	ldr	r2, [pc, #512]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800eea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eeaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d013      	beq.n	800eedc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eeb4:	f7fe f9a6 	bl	800d204 <HAL_GetTick>
 800eeb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eeba:	e008      	b.n	800eece <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800eebc:	f7fe f9a2 	bl	800d204 <HAL_GetTick>
 800eec0:	4602      	mov	r2, r0
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	1ad3      	subs	r3, r2, r3
 800eec6:	2b64      	cmp	r3, #100	; 0x64
 800eec8:	d901      	bls.n	800eece <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800eeca:	2303      	movs	r3, #3
 800eecc:	e1fb      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eece:	4b76      	ldr	r3, [pc, #472]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d0f0      	beq.n	800eebc <HAL_RCC_OscConfig+0xc0>
 800eeda:	e014      	b.n	800ef06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eedc:	f7fe f992 	bl	800d204 <HAL_GetTick>
 800eee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eee2:	e008      	b.n	800eef6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800eee4:	f7fe f98e 	bl	800d204 <HAL_GetTick>
 800eee8:	4602      	mov	r2, r0
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	1ad3      	subs	r3, r2, r3
 800eeee:	2b64      	cmp	r3, #100	; 0x64
 800eef0:	d901      	bls.n	800eef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800eef2:	2303      	movs	r3, #3
 800eef4:	e1e7      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eef6:	4b6c      	ldr	r3, [pc, #432]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1f0      	bne.n	800eee4 <HAL_RCC_OscConfig+0xe8>
 800ef02:	e000      	b.n	800ef06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ef04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f003 0302 	and.w	r3, r3, #2
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d063      	beq.n	800efda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ef12:	4b65      	ldr	r3, [pc, #404]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ef14:	689b      	ldr	r3, [r3, #8]
 800ef16:	f003 030c 	and.w	r3, r3, #12
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00b      	beq.n	800ef36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ef1e:	4b62      	ldr	r3, [pc, #392]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ef20:	689b      	ldr	r3, [r3, #8]
 800ef22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ef26:	2b08      	cmp	r3, #8
 800ef28:	d11c      	bne.n	800ef64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ef2a:	4b5f      	ldr	r3, [pc, #380]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d116      	bne.n	800ef64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ef36:	4b5c      	ldr	r3, [pc, #368]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f003 0302 	and.w	r3, r3, #2
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d005      	beq.n	800ef4e <HAL_RCC_OscConfig+0x152>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d001      	beq.n	800ef4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	e1bb      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ef4e:	4b56      	ldr	r3, [pc, #344]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	691b      	ldr	r3, [r3, #16]
 800ef5a:	00db      	lsls	r3, r3, #3
 800ef5c:	4952      	ldr	r1, [pc, #328]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ef62:	e03a      	b.n	800efda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	68db      	ldr	r3, [r3, #12]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d020      	beq.n	800efae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ef6c:	4b4f      	ldr	r3, [pc, #316]	; (800f0ac <HAL_RCC_OscConfig+0x2b0>)
 800ef6e:	2201      	movs	r2, #1
 800ef70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef72:	f7fe f947 	bl	800d204 <HAL_GetTick>
 800ef76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef78:	e008      	b.n	800ef8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ef7a:	f7fe f943 	bl	800d204 <HAL_GetTick>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	1ad3      	subs	r3, r2, r3
 800ef84:	2b02      	cmp	r3, #2
 800ef86:	d901      	bls.n	800ef8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ef88:	2303      	movs	r3, #3
 800ef8a:	e19c      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef8c:	4b46      	ldr	r3, [pc, #280]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f003 0302 	and.w	r3, r3, #2
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d0f0      	beq.n	800ef7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ef98:	4b43      	ldr	r3, [pc, #268]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	691b      	ldr	r3, [r3, #16]
 800efa4:	00db      	lsls	r3, r3, #3
 800efa6:	4940      	ldr	r1, [pc, #256]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800efa8:	4313      	orrs	r3, r2
 800efaa:	600b      	str	r3, [r1, #0]
 800efac:	e015      	b.n	800efda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800efae:	4b3f      	ldr	r3, [pc, #252]	; (800f0ac <HAL_RCC_OscConfig+0x2b0>)
 800efb0:	2200      	movs	r2, #0
 800efb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800efb4:	f7fe f926 	bl	800d204 <HAL_GetTick>
 800efb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800efba:	e008      	b.n	800efce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800efbc:	f7fe f922 	bl	800d204 <HAL_GetTick>
 800efc0:	4602      	mov	r2, r0
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	1ad3      	subs	r3, r2, r3
 800efc6:	2b02      	cmp	r3, #2
 800efc8:	d901      	bls.n	800efce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800efca:	2303      	movs	r3, #3
 800efcc:	e17b      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800efce:	4b36      	ldr	r3, [pc, #216]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f003 0302 	and.w	r3, r3, #2
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d1f0      	bne.n	800efbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f003 0308 	and.w	r3, r3, #8
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d030      	beq.n	800f048 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	695b      	ldr	r3, [r3, #20]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d016      	beq.n	800f01c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800efee:	4b30      	ldr	r3, [pc, #192]	; (800f0b0 <HAL_RCC_OscConfig+0x2b4>)
 800eff0:	2201      	movs	r2, #1
 800eff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eff4:	f7fe f906 	bl	800d204 <HAL_GetTick>
 800eff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800effa:	e008      	b.n	800f00e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800effc:	f7fe f902 	bl	800d204 <HAL_GetTick>
 800f000:	4602      	mov	r2, r0
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	1ad3      	subs	r3, r2, r3
 800f006:	2b02      	cmp	r3, #2
 800f008:	d901      	bls.n	800f00e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f00a:	2303      	movs	r3, #3
 800f00c:	e15b      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f00e:	4b26      	ldr	r3, [pc, #152]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800f010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f012:	f003 0302 	and.w	r3, r3, #2
 800f016:	2b00      	cmp	r3, #0
 800f018:	d0f0      	beq.n	800effc <HAL_RCC_OscConfig+0x200>
 800f01a:	e015      	b.n	800f048 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f01c:	4b24      	ldr	r3, [pc, #144]	; (800f0b0 <HAL_RCC_OscConfig+0x2b4>)
 800f01e:	2200      	movs	r2, #0
 800f020:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f022:	f7fe f8ef 	bl	800d204 <HAL_GetTick>
 800f026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f028:	e008      	b.n	800f03c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f02a:	f7fe f8eb 	bl	800d204 <HAL_GetTick>
 800f02e:	4602      	mov	r2, r0
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	1ad3      	subs	r3, r2, r3
 800f034:	2b02      	cmp	r3, #2
 800f036:	d901      	bls.n	800f03c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800f038:	2303      	movs	r3, #3
 800f03a:	e144      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f03c:	4b1a      	ldr	r3, [pc, #104]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800f03e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f040:	f003 0302 	and.w	r3, r3, #2
 800f044:	2b00      	cmp	r3, #0
 800f046:	d1f0      	bne.n	800f02a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f003 0304 	and.w	r3, r3, #4
 800f050:	2b00      	cmp	r3, #0
 800f052:	f000 80a0 	beq.w	800f196 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f056:	2300      	movs	r3, #0
 800f058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f05a:	4b13      	ldr	r3, [pc, #76]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800f05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f05e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f062:	2b00      	cmp	r3, #0
 800f064:	d10f      	bne.n	800f086 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f066:	2300      	movs	r3, #0
 800f068:	60bb      	str	r3, [r7, #8]
 800f06a:	4b0f      	ldr	r3, [pc, #60]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800f06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f06e:	4a0e      	ldr	r2, [pc, #56]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800f070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f074:	6413      	str	r3, [r2, #64]	; 0x40
 800f076:	4b0c      	ldr	r3, [pc, #48]	; (800f0a8 <HAL_RCC_OscConfig+0x2ac>)
 800f078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f07a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f07e:	60bb      	str	r3, [r7, #8]
 800f080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f082:	2301      	movs	r3, #1
 800f084:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f086:	4b0b      	ldr	r3, [pc, #44]	; (800f0b4 <HAL_RCC_OscConfig+0x2b8>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d121      	bne.n	800f0d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f092:	4b08      	ldr	r3, [pc, #32]	; (800f0b4 <HAL_RCC_OscConfig+0x2b8>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	4a07      	ldr	r2, [pc, #28]	; (800f0b4 <HAL_RCC_OscConfig+0x2b8>)
 800f098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f09c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f09e:	f7fe f8b1 	bl	800d204 <HAL_GetTick>
 800f0a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f0a4:	e011      	b.n	800f0ca <HAL_RCC_OscConfig+0x2ce>
 800f0a6:	bf00      	nop
 800f0a8:	40023800 	.word	0x40023800
 800f0ac:	42470000 	.word	0x42470000
 800f0b0:	42470e80 	.word	0x42470e80
 800f0b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f0b8:	f7fe f8a4 	bl	800d204 <HAL_GetTick>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	1ad3      	subs	r3, r2, r3
 800f0c2:	2b02      	cmp	r3, #2
 800f0c4:	d901      	bls.n	800f0ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800f0c6:	2303      	movs	r3, #3
 800f0c8:	e0fd      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f0ca:	4b81      	ldr	r3, [pc, #516]	; (800f2d0 <HAL_RCC_OscConfig+0x4d4>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d0f0      	beq.n	800f0b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	689b      	ldr	r3, [r3, #8]
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d106      	bne.n	800f0ec <HAL_RCC_OscConfig+0x2f0>
 800f0de:	4b7d      	ldr	r3, [pc, #500]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f0e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0e2:	4a7c      	ldr	r2, [pc, #496]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f0e4:	f043 0301 	orr.w	r3, r3, #1
 800f0e8:	6713      	str	r3, [r2, #112]	; 0x70
 800f0ea:	e01c      	b.n	800f126 <HAL_RCC_OscConfig+0x32a>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	689b      	ldr	r3, [r3, #8]
 800f0f0:	2b05      	cmp	r3, #5
 800f0f2:	d10c      	bne.n	800f10e <HAL_RCC_OscConfig+0x312>
 800f0f4:	4b77      	ldr	r3, [pc, #476]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f0f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0f8:	4a76      	ldr	r2, [pc, #472]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f0fa:	f043 0304 	orr.w	r3, r3, #4
 800f0fe:	6713      	str	r3, [r2, #112]	; 0x70
 800f100:	4b74      	ldr	r3, [pc, #464]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f104:	4a73      	ldr	r2, [pc, #460]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f106:	f043 0301 	orr.w	r3, r3, #1
 800f10a:	6713      	str	r3, [r2, #112]	; 0x70
 800f10c:	e00b      	b.n	800f126 <HAL_RCC_OscConfig+0x32a>
 800f10e:	4b71      	ldr	r3, [pc, #452]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f112:	4a70      	ldr	r2, [pc, #448]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f114:	f023 0301 	bic.w	r3, r3, #1
 800f118:	6713      	str	r3, [r2, #112]	; 0x70
 800f11a:	4b6e      	ldr	r3, [pc, #440]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f11e:	4a6d      	ldr	r2, [pc, #436]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f120:	f023 0304 	bic.w	r3, r3, #4
 800f124:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	689b      	ldr	r3, [r3, #8]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d015      	beq.n	800f15a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f12e:	f7fe f869 	bl	800d204 <HAL_GetTick>
 800f132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f134:	e00a      	b.n	800f14c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f136:	f7fe f865 	bl	800d204 <HAL_GetTick>
 800f13a:	4602      	mov	r2, r0
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	1ad3      	subs	r3, r2, r3
 800f140:	f241 3288 	movw	r2, #5000	; 0x1388
 800f144:	4293      	cmp	r3, r2
 800f146:	d901      	bls.n	800f14c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800f148:	2303      	movs	r3, #3
 800f14a:	e0bc      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f14c:	4b61      	ldr	r3, [pc, #388]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f14e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f150:	f003 0302 	and.w	r3, r3, #2
 800f154:	2b00      	cmp	r3, #0
 800f156:	d0ee      	beq.n	800f136 <HAL_RCC_OscConfig+0x33a>
 800f158:	e014      	b.n	800f184 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f15a:	f7fe f853 	bl	800d204 <HAL_GetTick>
 800f15e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f160:	e00a      	b.n	800f178 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f162:	f7fe f84f 	bl	800d204 <HAL_GetTick>
 800f166:	4602      	mov	r2, r0
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	1ad3      	subs	r3, r2, r3
 800f16c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f170:	4293      	cmp	r3, r2
 800f172:	d901      	bls.n	800f178 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800f174:	2303      	movs	r3, #3
 800f176:	e0a6      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f178:	4b56      	ldr	r3, [pc, #344]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f17a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f17c:	f003 0302 	and.w	r3, r3, #2
 800f180:	2b00      	cmp	r3, #0
 800f182:	d1ee      	bne.n	800f162 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f184:	7dfb      	ldrb	r3, [r7, #23]
 800f186:	2b01      	cmp	r3, #1
 800f188:	d105      	bne.n	800f196 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f18a:	4b52      	ldr	r3, [pc, #328]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f18e:	4a51      	ldr	r2, [pc, #324]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f194:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	699b      	ldr	r3, [r3, #24]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	f000 8092 	beq.w	800f2c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f1a0:	4b4c      	ldr	r3, [pc, #304]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f1a2:	689b      	ldr	r3, [r3, #8]
 800f1a4:	f003 030c 	and.w	r3, r3, #12
 800f1a8:	2b08      	cmp	r3, #8
 800f1aa:	d05c      	beq.n	800f266 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	699b      	ldr	r3, [r3, #24]
 800f1b0:	2b02      	cmp	r3, #2
 800f1b2:	d141      	bne.n	800f238 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f1b4:	4b48      	ldr	r3, [pc, #288]	; (800f2d8 <HAL_RCC_OscConfig+0x4dc>)
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f1ba:	f7fe f823 	bl	800d204 <HAL_GetTick>
 800f1be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f1c0:	e008      	b.n	800f1d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f1c2:	f7fe f81f 	bl	800d204 <HAL_GetTick>
 800f1c6:	4602      	mov	r2, r0
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	1ad3      	subs	r3, r2, r3
 800f1cc:	2b02      	cmp	r3, #2
 800f1ce:	d901      	bls.n	800f1d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800f1d0:	2303      	movs	r3, #3
 800f1d2:	e078      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f1d4:	4b3f      	ldr	r3, [pc, #252]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d1f0      	bne.n	800f1c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	69da      	ldr	r2, [r3, #28]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6a1b      	ldr	r3, [r3, #32]
 800f1e8:	431a      	orrs	r2, r3
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ee:	019b      	lsls	r3, r3, #6
 800f1f0:	431a      	orrs	r2, r3
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1f6:	085b      	lsrs	r3, r3, #1
 800f1f8:	3b01      	subs	r3, #1
 800f1fa:	041b      	lsls	r3, r3, #16
 800f1fc:	431a      	orrs	r2, r3
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f202:	061b      	lsls	r3, r3, #24
 800f204:	4933      	ldr	r1, [pc, #204]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f206:	4313      	orrs	r3, r2
 800f208:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f20a:	4b33      	ldr	r3, [pc, #204]	; (800f2d8 <HAL_RCC_OscConfig+0x4dc>)
 800f20c:	2201      	movs	r2, #1
 800f20e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f210:	f7fd fff8 	bl	800d204 <HAL_GetTick>
 800f214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f216:	e008      	b.n	800f22a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f218:	f7fd fff4 	bl	800d204 <HAL_GetTick>
 800f21c:	4602      	mov	r2, r0
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	1ad3      	subs	r3, r2, r3
 800f222:	2b02      	cmp	r3, #2
 800f224:	d901      	bls.n	800f22a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800f226:	2303      	movs	r3, #3
 800f228:	e04d      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f22a:	4b2a      	ldr	r3, [pc, #168]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f232:	2b00      	cmp	r3, #0
 800f234:	d0f0      	beq.n	800f218 <HAL_RCC_OscConfig+0x41c>
 800f236:	e045      	b.n	800f2c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f238:	4b27      	ldr	r3, [pc, #156]	; (800f2d8 <HAL_RCC_OscConfig+0x4dc>)
 800f23a:	2200      	movs	r2, #0
 800f23c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f23e:	f7fd ffe1 	bl	800d204 <HAL_GetTick>
 800f242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f244:	e008      	b.n	800f258 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f246:	f7fd ffdd 	bl	800d204 <HAL_GetTick>
 800f24a:	4602      	mov	r2, r0
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	1ad3      	subs	r3, r2, r3
 800f250:	2b02      	cmp	r3, #2
 800f252:	d901      	bls.n	800f258 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800f254:	2303      	movs	r3, #3
 800f256:	e036      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f258:	4b1e      	ldr	r3, [pc, #120]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f260:	2b00      	cmp	r3, #0
 800f262:	d1f0      	bne.n	800f246 <HAL_RCC_OscConfig+0x44a>
 800f264:	e02e      	b.n	800f2c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	699b      	ldr	r3, [r3, #24]
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d101      	bne.n	800f272 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800f26e:	2301      	movs	r3, #1
 800f270:	e029      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f272:	4b18      	ldr	r3, [pc, #96]	; (800f2d4 <HAL_RCC_OscConfig+0x4d8>)
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	69db      	ldr	r3, [r3, #28]
 800f282:	429a      	cmp	r2, r3
 800f284:	d11c      	bne.n	800f2c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f290:	429a      	cmp	r2, r3
 800f292:	d115      	bne.n	800f2c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800f294:	68fa      	ldr	r2, [r7, #12]
 800f296:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f29a:	4013      	ands	r3, r2
 800f29c:	687a      	ldr	r2, [r7, #4]
 800f29e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d10d      	bne.n	800f2c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d106      	bne.n	800f2c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d001      	beq.n	800f2c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	e000      	b.n	800f2c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800f2c4:	2300      	movs	r3, #0
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3718      	adds	r7, #24
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	40007000 	.word	0x40007000
 800f2d4:	40023800 	.word	0x40023800
 800f2d8:	42470060 	.word	0x42470060

0800f2dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d101      	bne.n	800f2f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	e0cc      	b.n	800f48a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f2f0:	4b68      	ldr	r3, [pc, #416]	; (800f494 <HAL_RCC_ClockConfig+0x1b8>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f003 030f 	and.w	r3, r3, #15
 800f2f8:	683a      	ldr	r2, [r7, #0]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d90c      	bls.n	800f318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f2fe:	4b65      	ldr	r3, [pc, #404]	; (800f494 <HAL_RCC_ClockConfig+0x1b8>)
 800f300:	683a      	ldr	r2, [r7, #0]
 800f302:	b2d2      	uxtb	r2, r2
 800f304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f306:	4b63      	ldr	r3, [pc, #396]	; (800f494 <HAL_RCC_ClockConfig+0x1b8>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f003 030f 	and.w	r3, r3, #15
 800f30e:	683a      	ldr	r2, [r7, #0]
 800f310:	429a      	cmp	r2, r3
 800f312:	d001      	beq.n	800f318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f314:	2301      	movs	r3, #1
 800f316:	e0b8      	b.n	800f48a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	f003 0302 	and.w	r3, r3, #2
 800f320:	2b00      	cmp	r3, #0
 800f322:	d020      	beq.n	800f366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f003 0304 	and.w	r3, r3, #4
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d005      	beq.n	800f33c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f330:	4b59      	ldr	r3, [pc, #356]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	4a58      	ldr	r2, [pc, #352]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f336:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f33a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	f003 0308 	and.w	r3, r3, #8
 800f344:	2b00      	cmp	r3, #0
 800f346:	d005      	beq.n	800f354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f348:	4b53      	ldr	r3, [pc, #332]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	4a52      	ldr	r2, [pc, #328]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f34e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f354:	4b50      	ldr	r3, [pc, #320]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f356:	689b      	ldr	r3, [r3, #8]
 800f358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	689b      	ldr	r3, [r3, #8]
 800f360:	494d      	ldr	r1, [pc, #308]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f362:	4313      	orrs	r3, r2
 800f364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f003 0301 	and.w	r3, r3, #1
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d044      	beq.n	800f3fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	2b01      	cmp	r3, #1
 800f378:	d107      	bne.n	800f38a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f37a:	4b47      	ldr	r3, [pc, #284]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f382:	2b00      	cmp	r3, #0
 800f384:	d119      	bne.n	800f3ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f386:	2301      	movs	r3, #1
 800f388:	e07f      	b.n	800f48a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	2b02      	cmp	r3, #2
 800f390:	d003      	beq.n	800f39a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f396:	2b03      	cmp	r3, #3
 800f398:	d107      	bne.n	800f3aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f39a:	4b3f      	ldr	r3, [pc, #252]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d109      	bne.n	800f3ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	e06f      	b.n	800f48a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f3aa:	4b3b      	ldr	r3, [pc, #236]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f003 0302 	and.w	r3, r3, #2
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d101      	bne.n	800f3ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	e067      	b.n	800f48a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f3ba:	4b37      	ldr	r3, [pc, #220]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f3bc:	689b      	ldr	r3, [r3, #8]
 800f3be:	f023 0203 	bic.w	r2, r3, #3
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	4934      	ldr	r1, [pc, #208]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f3c8:	4313      	orrs	r3, r2
 800f3ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f3cc:	f7fd ff1a 	bl	800d204 <HAL_GetTick>
 800f3d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f3d2:	e00a      	b.n	800f3ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f3d4:	f7fd ff16 	bl	800d204 <HAL_GetTick>
 800f3d8:	4602      	mov	r2, r0
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	1ad3      	subs	r3, r2, r3
 800f3de:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d901      	bls.n	800f3ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f3e6:	2303      	movs	r3, #3
 800f3e8:	e04f      	b.n	800f48a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f3ea:	4b2b      	ldr	r3, [pc, #172]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f3ec:	689b      	ldr	r3, [r3, #8]
 800f3ee:	f003 020c 	and.w	r2, r3, #12
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d1eb      	bne.n	800f3d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f3fc:	4b25      	ldr	r3, [pc, #148]	; (800f494 <HAL_RCC_ClockConfig+0x1b8>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f003 030f 	and.w	r3, r3, #15
 800f404:	683a      	ldr	r2, [r7, #0]
 800f406:	429a      	cmp	r2, r3
 800f408:	d20c      	bcs.n	800f424 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f40a:	4b22      	ldr	r3, [pc, #136]	; (800f494 <HAL_RCC_ClockConfig+0x1b8>)
 800f40c:	683a      	ldr	r2, [r7, #0]
 800f40e:	b2d2      	uxtb	r2, r2
 800f410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f412:	4b20      	ldr	r3, [pc, #128]	; (800f494 <HAL_RCC_ClockConfig+0x1b8>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f003 030f 	and.w	r3, r3, #15
 800f41a:	683a      	ldr	r2, [r7, #0]
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d001      	beq.n	800f424 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f420:	2301      	movs	r3, #1
 800f422:	e032      	b.n	800f48a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	f003 0304 	and.w	r3, r3, #4
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d008      	beq.n	800f442 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f430:	4b19      	ldr	r3, [pc, #100]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f432:	689b      	ldr	r3, [r3, #8]
 800f434:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	68db      	ldr	r3, [r3, #12]
 800f43c:	4916      	ldr	r1, [pc, #88]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f43e:	4313      	orrs	r3, r2
 800f440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	f003 0308 	and.w	r3, r3, #8
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d009      	beq.n	800f462 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f44e:	4b12      	ldr	r3, [pc, #72]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f450:	689b      	ldr	r3, [r3, #8]
 800f452:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	691b      	ldr	r3, [r3, #16]
 800f45a:	00db      	lsls	r3, r3, #3
 800f45c:	490e      	ldr	r1, [pc, #56]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f45e:	4313      	orrs	r3, r2
 800f460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f462:	f000 f821 	bl	800f4a8 <HAL_RCC_GetSysClockFreq>
 800f466:	4601      	mov	r1, r0
 800f468:	4b0b      	ldr	r3, [pc, #44]	; (800f498 <HAL_RCC_ClockConfig+0x1bc>)
 800f46a:	689b      	ldr	r3, [r3, #8]
 800f46c:	091b      	lsrs	r3, r3, #4
 800f46e:	f003 030f 	and.w	r3, r3, #15
 800f472:	4a0a      	ldr	r2, [pc, #40]	; (800f49c <HAL_RCC_ClockConfig+0x1c0>)
 800f474:	5cd3      	ldrb	r3, [r2, r3]
 800f476:	fa21 f303 	lsr.w	r3, r1, r3
 800f47a:	4a09      	ldr	r2, [pc, #36]	; (800f4a0 <HAL_RCC_ClockConfig+0x1c4>)
 800f47c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f47e:	4b09      	ldr	r3, [pc, #36]	; (800f4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	4618      	mov	r0, r3
 800f484:	f7fd fe7a 	bl	800d17c <HAL_InitTick>

  return HAL_OK;
 800f488:	2300      	movs	r3, #0
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	3710      	adds	r7, #16
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	40023c00 	.word	0x40023c00
 800f498:	40023800 	.word	0x40023800
 800f49c:	08014034 	.word	0x08014034
 800f4a0:	20000004 	.word	0x20000004
 800f4a4:	20000008 	.word	0x20000008

0800f4a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4aa:	b085      	sub	sp, #20
 800f4ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	607b      	str	r3, [r7, #4]
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	60fb      	str	r3, [r7, #12]
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f4be:	4b63      	ldr	r3, [pc, #396]	; (800f64c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f4c0:	689b      	ldr	r3, [r3, #8]
 800f4c2:	f003 030c 	and.w	r3, r3, #12
 800f4c6:	2b04      	cmp	r3, #4
 800f4c8:	d007      	beq.n	800f4da <HAL_RCC_GetSysClockFreq+0x32>
 800f4ca:	2b08      	cmp	r3, #8
 800f4cc:	d008      	beq.n	800f4e0 <HAL_RCC_GetSysClockFreq+0x38>
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	f040 80b4 	bne.w	800f63c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f4d4:	4b5e      	ldr	r3, [pc, #376]	; (800f650 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800f4d6:	60bb      	str	r3, [r7, #8]
       break;
 800f4d8:	e0b3      	b.n	800f642 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f4da:	4b5e      	ldr	r3, [pc, #376]	; (800f654 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800f4dc:	60bb      	str	r3, [r7, #8]
      break;
 800f4de:	e0b0      	b.n	800f642 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f4e0:	4b5a      	ldr	r3, [pc, #360]	; (800f64c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f4ea:	4b58      	ldr	r3, [pc, #352]	; (800f64c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d04a      	beq.n	800f58c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f4f6:	4b55      	ldr	r3, [pc, #340]	; (800f64c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	099b      	lsrs	r3, r3, #6
 800f4fc:	f04f 0400 	mov.w	r4, #0
 800f500:	f240 11ff 	movw	r1, #511	; 0x1ff
 800f504:	f04f 0200 	mov.w	r2, #0
 800f508:	ea03 0501 	and.w	r5, r3, r1
 800f50c:	ea04 0602 	and.w	r6, r4, r2
 800f510:	4629      	mov	r1, r5
 800f512:	4632      	mov	r2, r6
 800f514:	f04f 0300 	mov.w	r3, #0
 800f518:	f04f 0400 	mov.w	r4, #0
 800f51c:	0154      	lsls	r4, r2, #5
 800f51e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800f522:	014b      	lsls	r3, r1, #5
 800f524:	4619      	mov	r1, r3
 800f526:	4622      	mov	r2, r4
 800f528:	1b49      	subs	r1, r1, r5
 800f52a:	eb62 0206 	sbc.w	r2, r2, r6
 800f52e:	f04f 0300 	mov.w	r3, #0
 800f532:	f04f 0400 	mov.w	r4, #0
 800f536:	0194      	lsls	r4, r2, #6
 800f538:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800f53c:	018b      	lsls	r3, r1, #6
 800f53e:	1a5b      	subs	r3, r3, r1
 800f540:	eb64 0402 	sbc.w	r4, r4, r2
 800f544:	f04f 0100 	mov.w	r1, #0
 800f548:	f04f 0200 	mov.w	r2, #0
 800f54c:	00e2      	lsls	r2, r4, #3
 800f54e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800f552:	00d9      	lsls	r1, r3, #3
 800f554:	460b      	mov	r3, r1
 800f556:	4614      	mov	r4, r2
 800f558:	195b      	adds	r3, r3, r5
 800f55a:	eb44 0406 	adc.w	r4, r4, r6
 800f55e:	f04f 0100 	mov.w	r1, #0
 800f562:	f04f 0200 	mov.w	r2, #0
 800f566:	0262      	lsls	r2, r4, #9
 800f568:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800f56c:	0259      	lsls	r1, r3, #9
 800f56e:	460b      	mov	r3, r1
 800f570:	4614      	mov	r4, r2
 800f572:	4618      	mov	r0, r3
 800f574:	4621      	mov	r1, r4
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f04f 0400 	mov.w	r4, #0
 800f57c:	461a      	mov	r2, r3
 800f57e:	4623      	mov	r3, r4
 800f580:	f7f9 fa9a 	bl	8008ab8 <__aeabi_uldivmod>
 800f584:	4603      	mov	r3, r0
 800f586:	460c      	mov	r4, r1
 800f588:	60fb      	str	r3, [r7, #12]
 800f58a:	e049      	b.n	800f620 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f58c:	4b2f      	ldr	r3, [pc, #188]	; (800f64c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	099b      	lsrs	r3, r3, #6
 800f592:	f04f 0400 	mov.w	r4, #0
 800f596:	f240 11ff 	movw	r1, #511	; 0x1ff
 800f59a:	f04f 0200 	mov.w	r2, #0
 800f59e:	ea03 0501 	and.w	r5, r3, r1
 800f5a2:	ea04 0602 	and.w	r6, r4, r2
 800f5a6:	4629      	mov	r1, r5
 800f5a8:	4632      	mov	r2, r6
 800f5aa:	f04f 0300 	mov.w	r3, #0
 800f5ae:	f04f 0400 	mov.w	r4, #0
 800f5b2:	0154      	lsls	r4, r2, #5
 800f5b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800f5b8:	014b      	lsls	r3, r1, #5
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	4622      	mov	r2, r4
 800f5be:	1b49      	subs	r1, r1, r5
 800f5c0:	eb62 0206 	sbc.w	r2, r2, r6
 800f5c4:	f04f 0300 	mov.w	r3, #0
 800f5c8:	f04f 0400 	mov.w	r4, #0
 800f5cc:	0194      	lsls	r4, r2, #6
 800f5ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800f5d2:	018b      	lsls	r3, r1, #6
 800f5d4:	1a5b      	subs	r3, r3, r1
 800f5d6:	eb64 0402 	sbc.w	r4, r4, r2
 800f5da:	f04f 0100 	mov.w	r1, #0
 800f5de:	f04f 0200 	mov.w	r2, #0
 800f5e2:	00e2      	lsls	r2, r4, #3
 800f5e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800f5e8:	00d9      	lsls	r1, r3, #3
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	4614      	mov	r4, r2
 800f5ee:	195b      	adds	r3, r3, r5
 800f5f0:	eb44 0406 	adc.w	r4, r4, r6
 800f5f4:	f04f 0100 	mov.w	r1, #0
 800f5f8:	f04f 0200 	mov.w	r2, #0
 800f5fc:	02a2      	lsls	r2, r4, #10
 800f5fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800f602:	0299      	lsls	r1, r3, #10
 800f604:	460b      	mov	r3, r1
 800f606:	4614      	mov	r4, r2
 800f608:	4618      	mov	r0, r3
 800f60a:	4621      	mov	r1, r4
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f04f 0400 	mov.w	r4, #0
 800f612:	461a      	mov	r2, r3
 800f614:	4623      	mov	r3, r4
 800f616:	f7f9 fa4f 	bl	8008ab8 <__aeabi_uldivmod>
 800f61a:	4603      	mov	r3, r0
 800f61c:	460c      	mov	r4, r1
 800f61e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f620:	4b0a      	ldr	r3, [pc, #40]	; (800f64c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	0c1b      	lsrs	r3, r3, #16
 800f626:	f003 0303 	and.w	r3, r3, #3
 800f62a:	3301      	adds	r3, #1
 800f62c:	005b      	lsls	r3, r3, #1
 800f62e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800f630:	68fa      	ldr	r2, [r7, #12]
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	fbb2 f3f3 	udiv	r3, r2, r3
 800f638:	60bb      	str	r3, [r7, #8]
      break;
 800f63a:	e002      	b.n	800f642 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f63c:	4b04      	ldr	r3, [pc, #16]	; (800f650 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800f63e:	60bb      	str	r3, [r7, #8]
      break;
 800f640:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f642:	68bb      	ldr	r3, [r7, #8]
}
 800f644:	4618      	mov	r0, r3
 800f646:	3714      	adds	r7, #20
 800f648:	46bd      	mov	sp, r7
 800f64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f64c:	40023800 	.word	0x40023800
 800f650:	00f42400 	.word	0x00f42400
 800f654:	007a1200 	.word	0x007a1200

0800f658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f658:	b480      	push	{r7}
 800f65a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f65c:	4b03      	ldr	r3, [pc, #12]	; (800f66c <HAL_RCC_GetHCLKFreq+0x14>)
 800f65e:	681b      	ldr	r3, [r3, #0]
}
 800f660:	4618      	mov	r0, r3
 800f662:	46bd      	mov	sp, r7
 800f664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f668:	4770      	bx	lr
 800f66a:	bf00      	nop
 800f66c:	20000004 	.word	0x20000004

0800f670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f674:	f7ff fff0 	bl	800f658 <HAL_RCC_GetHCLKFreq>
 800f678:	4601      	mov	r1, r0
 800f67a:	4b05      	ldr	r3, [pc, #20]	; (800f690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	0a9b      	lsrs	r3, r3, #10
 800f680:	f003 0307 	and.w	r3, r3, #7
 800f684:	4a03      	ldr	r2, [pc, #12]	; (800f694 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f686:	5cd3      	ldrb	r3, [r2, r3]
 800f688:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	bd80      	pop	{r7, pc}
 800f690:	40023800 	.word	0x40023800
 800f694:	08014044 	.word	0x08014044

0800f698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f69c:	f7ff ffdc 	bl	800f658 <HAL_RCC_GetHCLKFreq>
 800f6a0:	4601      	mov	r1, r0
 800f6a2:	4b05      	ldr	r3, [pc, #20]	; (800f6b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f6a4:	689b      	ldr	r3, [r3, #8]
 800f6a6:	0b5b      	lsrs	r3, r3, #13
 800f6a8:	f003 0307 	and.w	r3, r3, #7
 800f6ac:	4a03      	ldr	r2, [pc, #12]	; (800f6bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800f6ae:	5cd3      	ldrb	r3, [r2, r3]
 800f6b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	bd80      	pop	{r7, pc}
 800f6b8:	40023800 	.word	0x40023800
 800f6bc:	08014044 	.word	0x08014044

0800f6c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d101      	bne.n	800f6d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e056      	b.n	800f780 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d106      	bne.n	800f6f2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f7fc ff3f 	bl	800c570 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2202      	movs	r2, #2
 800f6f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	681a      	ldr	r2, [r3, #0]
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f708:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	685a      	ldr	r2, [r3, #4]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	689b      	ldr	r3, [r3, #8]
 800f712:	431a      	orrs	r2, r3
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	431a      	orrs	r2, r3
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	691b      	ldr	r3, [r3, #16]
 800f71e:	431a      	orrs	r2, r3
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	695b      	ldr	r3, [r3, #20]
 800f724:	431a      	orrs	r2, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	699b      	ldr	r3, [r3, #24]
 800f72a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f72e:	431a      	orrs	r2, r3
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	69db      	ldr	r3, [r3, #28]
 800f734:	431a      	orrs	r2, r3
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6a1b      	ldr	r3, [r3, #32]
 800f73a:	ea42 0103 	orr.w	r1, r2, r3
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	430a      	orrs	r2, r1
 800f748:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	699b      	ldr	r3, [r3, #24]
 800f74e:	0c1b      	lsrs	r3, r3, #16
 800f750:	f003 0104 	and.w	r1, r3, #4
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	430a      	orrs	r2, r1
 800f75e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	69da      	ldr	r2, [r3, #28]
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f76e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2200      	movs	r2, #0
 800f774:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2201      	movs	r2, #1
 800f77a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f77e:	2300      	movs	r3, #0
}
 800f780:	4618      	mov	r0, r3
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d101      	bne.n	800f79a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f796:	2301      	movs	r3, #1
 800f798:	e01d      	b.n	800f7d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d106      	bne.n	800f7b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f7fc ff26 	bl	800c600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2202      	movs	r2, #2
 800f7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	3304      	adds	r3, #4
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	4610      	mov	r0, r2
 800f7c8:	f000 fe3e 	bl	8010448 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f7d4:	2300      	movs	r3, #0
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3708      	adds	r7, #8
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f7de:	b480      	push	{r7}
 800f7e0:	b085      	sub	sp, #20
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	68da      	ldr	r2, [r3, #12]
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	f042 0201 	orr.w	r2, r2, #1
 800f7f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	689b      	ldr	r3, [r3, #8]
 800f7fc:	f003 0307 	and.w	r3, r3, #7
 800f800:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2b06      	cmp	r3, #6
 800f806:	d007      	beq.n	800f818 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	681a      	ldr	r2, [r3, #0]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f042 0201 	orr.w	r2, r2, #1
 800f816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f818:	2300      	movs	r3, #0
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3714      	adds	r7, #20
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr

0800f826 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f826:	b480      	push	{r7}
 800f828:	b083      	sub	sp, #12
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	68da      	ldr	r2, [r3, #12]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f022 0201 	bic.w	r2, r2, #1
 800f83c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	6a1a      	ldr	r2, [r3, #32]
 800f844:	f241 1311 	movw	r3, #4369	; 0x1111
 800f848:	4013      	ands	r3, r2
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d10f      	bne.n	800f86e <HAL_TIM_Base_Stop_IT+0x48>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	6a1a      	ldr	r2, [r3, #32]
 800f854:	f240 4344 	movw	r3, #1092	; 0x444
 800f858:	4013      	ands	r3, r2
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d107      	bne.n	800f86e <HAL_TIM_Base_Stop_IT+0x48>
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f022 0201 	bic.w	r2, r2, #1
 800f86c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f86e:	2300      	movs	r3, #0
}
 800f870:	4618      	mov	r0, r3
 800f872:	370c      	adds	r7, #12
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr

0800f87c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d101      	bne.n	800f88e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800f88a:	2301      	movs	r3, #1
 800f88c:	e01d      	b.n	800f8ca <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f894:	b2db      	uxtb	r3, r3
 800f896:	2b00      	cmp	r3, #0
 800f898:	d106      	bne.n	800f8a8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2200      	movs	r2, #0
 800f89e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 f815 	bl	800f8d2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2202      	movs	r2, #2
 800f8ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	3304      	adds	r3, #4
 800f8b8:	4619      	mov	r1, r3
 800f8ba:	4610      	mov	r0, r2
 800f8bc:	f000 fdc4 	bl	8010448 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2201      	movs	r2, #1
 800f8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f8c8:	2300      	movs	r3, #0
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3708      	adds	r7, #8
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}

0800f8d2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800f8d2:	b480      	push	{r7}
 800f8d4:	b083      	sub	sp, #12
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800f8da:	bf00      	nop
 800f8dc:	370c      	adds	r7, #12
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e4:	4770      	bx	lr
	...

0800f8e8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	2b0c      	cmp	r3, #12
 800f8f6:	d841      	bhi.n	800f97c <HAL_TIM_OC_Start_IT+0x94>
 800f8f8:	a201      	add	r2, pc, #4	; (adr r2, 800f900 <HAL_TIM_OC_Start_IT+0x18>)
 800f8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8fe:	bf00      	nop
 800f900:	0800f935 	.word	0x0800f935
 800f904:	0800f97d 	.word	0x0800f97d
 800f908:	0800f97d 	.word	0x0800f97d
 800f90c:	0800f97d 	.word	0x0800f97d
 800f910:	0800f947 	.word	0x0800f947
 800f914:	0800f97d 	.word	0x0800f97d
 800f918:	0800f97d 	.word	0x0800f97d
 800f91c:	0800f97d 	.word	0x0800f97d
 800f920:	0800f959 	.word	0x0800f959
 800f924:	0800f97d 	.word	0x0800f97d
 800f928:	0800f97d 	.word	0x0800f97d
 800f92c:	0800f97d 	.word	0x0800f97d
 800f930:	0800f96b 	.word	0x0800f96b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	68da      	ldr	r2, [r3, #12]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f042 0202 	orr.w	r2, r2, #2
 800f942:	60da      	str	r2, [r3, #12]
      break;
 800f944:	e01b      	b.n	800f97e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	68da      	ldr	r2, [r3, #12]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f042 0204 	orr.w	r2, r2, #4
 800f954:	60da      	str	r2, [r3, #12]
      break;
 800f956:	e012      	b.n	800f97e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	68da      	ldr	r2, [r3, #12]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f042 0208 	orr.w	r2, r2, #8
 800f966:	60da      	str	r2, [r3, #12]
      break;
 800f968:	e009      	b.n	800f97e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	68da      	ldr	r2, [r3, #12]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	f042 0210 	orr.w	r2, r2, #16
 800f978:	60da      	str	r2, [r3, #12]
      break;
 800f97a:	e000      	b.n	800f97e <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 800f97c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2201      	movs	r2, #1
 800f984:	6839      	ldr	r1, [r7, #0]
 800f986:	4618      	mov	r0, r3
 800f988:	f001 f848 	bl	8010a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4a15      	ldr	r2, [pc, #84]	; (800f9e8 <HAL_TIM_OC_Start_IT+0x100>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d004      	beq.n	800f9a0 <HAL_TIM_OC_Start_IT+0xb8>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4a14      	ldr	r2, [pc, #80]	; (800f9ec <HAL_TIM_OC_Start_IT+0x104>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d101      	bne.n	800f9a4 <HAL_TIM_OC_Start_IT+0xbc>
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	e000      	b.n	800f9a6 <HAL_TIM_OC_Start_IT+0xbe>
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d007      	beq.n	800f9ba <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f9b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	689b      	ldr	r3, [r3, #8]
 800f9c0:	f003 0307 	and.w	r3, r3, #7
 800f9c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2b06      	cmp	r3, #6
 800f9ca:	d007      	beq.n	800f9dc <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	f042 0201 	orr.w	r2, r2, #1
 800f9da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f9dc:	2300      	movs	r3, #0
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3710      	adds	r7, #16
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	40010000 	.word	0x40010000
 800f9ec:	40010400 	.word	0x40010400

0800f9f0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	2b0c      	cmp	r3, #12
 800f9fe:	d841      	bhi.n	800fa84 <HAL_TIM_OC_Stop_IT+0x94>
 800fa00:	a201      	add	r2, pc, #4	; (adr r2, 800fa08 <HAL_TIM_OC_Stop_IT+0x18>)
 800fa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa06:	bf00      	nop
 800fa08:	0800fa3d 	.word	0x0800fa3d
 800fa0c:	0800fa85 	.word	0x0800fa85
 800fa10:	0800fa85 	.word	0x0800fa85
 800fa14:	0800fa85 	.word	0x0800fa85
 800fa18:	0800fa4f 	.word	0x0800fa4f
 800fa1c:	0800fa85 	.word	0x0800fa85
 800fa20:	0800fa85 	.word	0x0800fa85
 800fa24:	0800fa85 	.word	0x0800fa85
 800fa28:	0800fa61 	.word	0x0800fa61
 800fa2c:	0800fa85 	.word	0x0800fa85
 800fa30:	0800fa85 	.word	0x0800fa85
 800fa34:	0800fa85 	.word	0x0800fa85
 800fa38:	0800fa73 	.word	0x0800fa73
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	68da      	ldr	r2, [r3, #12]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	f022 0202 	bic.w	r2, r2, #2
 800fa4a:	60da      	str	r2, [r3, #12]
      break;
 800fa4c:	e01b      	b.n	800fa86 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	68da      	ldr	r2, [r3, #12]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f022 0204 	bic.w	r2, r2, #4
 800fa5c:	60da      	str	r2, [r3, #12]
      break;
 800fa5e:	e012      	b.n	800fa86 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	68da      	ldr	r2, [r3, #12]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	f022 0208 	bic.w	r2, r2, #8
 800fa6e:	60da      	str	r2, [r3, #12]
      break;
 800fa70:	e009      	b.n	800fa86 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	68da      	ldr	r2, [r3, #12]
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f022 0210 	bic.w	r2, r2, #16
 800fa80:	60da      	str	r2, [r3, #12]
      break;
 800fa82:	e000      	b.n	800fa86 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 800fa84:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	6839      	ldr	r1, [r7, #0]
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f000 ffc4 	bl	8010a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a20      	ldr	r2, [pc, #128]	; (800fb1c <HAL_TIM_OC_Stop_IT+0x12c>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d004      	beq.n	800faa8 <HAL_TIM_OC_Stop_IT+0xb8>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	4a1f      	ldr	r2, [pc, #124]	; (800fb20 <HAL_TIM_OC_Stop_IT+0x130>)
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d101      	bne.n	800faac <HAL_TIM_OC_Stop_IT+0xbc>
 800faa8:	2301      	movs	r3, #1
 800faaa:	e000      	b.n	800faae <HAL_TIM_OC_Stop_IT+0xbe>
 800faac:	2300      	movs	r3, #0
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d017      	beq.n	800fae2 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	6a1a      	ldr	r2, [r3, #32]
 800fab8:	f241 1311 	movw	r3, #4369	; 0x1111
 800fabc:	4013      	ands	r3, r2
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d10f      	bne.n	800fae2 <HAL_TIM_OC_Stop_IT+0xf2>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	6a1a      	ldr	r2, [r3, #32]
 800fac8:	f240 4344 	movw	r3, #1092	; 0x444
 800facc:	4013      	ands	r3, r2
 800face:	2b00      	cmp	r3, #0
 800fad0:	d107      	bne.n	800fae2 <HAL_TIM_OC_Stop_IT+0xf2>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fae0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	6a1a      	ldr	r2, [r3, #32]
 800fae8:	f241 1311 	movw	r3, #4369	; 0x1111
 800faec:	4013      	ands	r3, r2
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d10f      	bne.n	800fb12 <HAL_TIM_OC_Stop_IT+0x122>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	6a1a      	ldr	r2, [r3, #32]
 800faf8:	f240 4344 	movw	r3, #1092	; 0x444
 800fafc:	4013      	ands	r3, r2
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d107      	bne.n	800fb12 <HAL_TIM_OC_Stop_IT+0x122>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	681a      	ldr	r2, [r3, #0]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f022 0201 	bic.w	r2, r2, #1
 800fb10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800fb12:	2300      	movs	r3, #0
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3708      	adds	r7, #8
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	40010000 	.word	0x40010000
 800fb20:	40010400 	.word	0x40010400

0800fb24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d101      	bne.n	800fb36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fb32:	2301      	movs	r3, #1
 800fb34:	e01d      	b.n	800fb72 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb3c:	b2db      	uxtb	r3, r3
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d106      	bne.n	800fb50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2200      	movs	r2, #0
 800fb46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 f815 	bl	800fb7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2202      	movs	r2, #2
 800fb54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681a      	ldr	r2, [r3, #0]
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	3304      	adds	r3, #4
 800fb60:	4619      	mov	r1, r3
 800fb62:	4610      	mov	r0, r2
 800fb64:	f000 fc70 	bl	8010448 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fb70:	2300      	movs	r3, #0
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3708      	adds	r7, #8
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}

0800fb7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800fb7a:	b480      	push	{r7}
 800fb7c:	b083      	sub	sp, #12
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800fb82:	bf00      	nop
 800fb84:	370c      	adds	r7, #12
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr
	...

0800fb90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	2201      	movs	r2, #1
 800fba0:	6839      	ldr	r1, [r7, #0]
 800fba2:	4618      	mov	r0, r3
 800fba4:	f000 ff3a 	bl	8010a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	4a15      	ldr	r2, [pc, #84]	; (800fc04 <HAL_TIM_PWM_Start+0x74>)
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d004      	beq.n	800fbbc <HAL_TIM_PWM_Start+0x2c>
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	4a14      	ldr	r2, [pc, #80]	; (800fc08 <HAL_TIM_PWM_Start+0x78>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d101      	bne.n	800fbc0 <HAL_TIM_PWM_Start+0x30>
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	e000      	b.n	800fbc2 <HAL_TIM_PWM_Start+0x32>
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d007      	beq.n	800fbd6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fbd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	689b      	ldr	r3, [r3, #8]
 800fbdc:	f003 0307 	and.w	r3, r3, #7
 800fbe0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	2b06      	cmp	r3, #6
 800fbe6:	d007      	beq.n	800fbf8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	681a      	ldr	r2, [r3, #0]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	f042 0201 	orr.w	r2, r2, #1
 800fbf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fbf8:	2300      	movs	r3, #0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3710      	adds	r7, #16
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop
 800fc04:	40010000 	.word	0x40010000
 800fc08:	40010400 	.word	0x40010400

0800fc0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b086      	sub	sp, #24
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d101      	bne.n	800fc20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	e083      	b.n	800fd28 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d106      	bne.n	800fc3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f7fc fd73 	bl	800c720 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2202      	movs	r2, #2
 800fc3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	689b      	ldr	r3, [r3, #8]
 800fc48:	687a      	ldr	r2, [r7, #4]
 800fc4a:	6812      	ldr	r2, [r2, #0]
 800fc4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fc50:	f023 0307 	bic.w	r3, r3, #7
 800fc54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	3304      	adds	r3, #4
 800fc5e:	4619      	mov	r1, r3
 800fc60:	4610      	mov	r0, r2
 800fc62:	f000 fbf1 	bl	8010448 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	689b      	ldr	r3, [r3, #8]
 800fc6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	699b      	ldr	r3, [r3, #24]
 800fc74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	6a1b      	ldr	r3, [r3, #32]
 800fc7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	697a      	ldr	r2, [r7, #20]
 800fc84:	4313      	orrs	r3, r2
 800fc86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc8e:	f023 0303 	bic.w	r3, r3, #3
 800fc92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	689a      	ldr	r2, [r3, #8]
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	699b      	ldr	r3, [r3, #24]
 800fc9c:	021b      	lsls	r3, r3, #8
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	693a      	ldr	r2, [r7, #16]
 800fca2:	4313      	orrs	r3, r2
 800fca4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800fcac:	f023 030c 	bic.w	r3, r3, #12
 800fcb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fcb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fcbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	68da      	ldr	r2, [r3, #12]
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	69db      	ldr	r3, [r3, #28]
 800fcc6:	021b      	lsls	r3, r3, #8
 800fcc8:	4313      	orrs	r3, r2
 800fcca:	693a      	ldr	r2, [r7, #16]
 800fccc:	4313      	orrs	r3, r2
 800fcce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	691b      	ldr	r3, [r3, #16]
 800fcd4:	011a      	lsls	r2, r3, #4
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	6a1b      	ldr	r3, [r3, #32]
 800fcda:	031b      	lsls	r3, r3, #12
 800fcdc:	4313      	orrs	r3, r2
 800fcde:	693a      	ldr	r2, [r7, #16]
 800fce0:	4313      	orrs	r3, r2
 800fce2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800fcea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800fcf2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	685a      	ldr	r2, [r3, #4]
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	695b      	ldr	r3, [r3, #20]
 800fcfc:	011b      	lsls	r3, r3, #4
 800fcfe:	4313      	orrs	r3, r2
 800fd00:	68fa      	ldr	r2, [r7, #12]
 800fd02:	4313      	orrs	r3, r2
 800fd04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	697a      	ldr	r2, [r7, #20]
 800fd0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	693a      	ldr	r2, [r7, #16]
 800fd14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	68fa      	ldr	r2, [r7, #12]
 800fd1c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2201      	movs	r2, #1
 800fd22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fd26:	2300      	movs	r3, #0
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3718      	adds	r7, #24
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d002      	beq.n	800fd46 <HAL_TIM_Encoder_Start+0x16>
 800fd40:	2b04      	cmp	r3, #4
 800fd42:	d008      	beq.n	800fd56 <HAL_TIM_Encoder_Start+0x26>
 800fd44:	e00f      	b.n	800fd66 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	2100      	movs	r1, #0
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f000 fe64 	bl	8010a1c <TIM_CCxChannelCmd>
      break;
 800fd54:	e016      	b.n	800fd84 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	2104      	movs	r1, #4
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f000 fe5c 	bl	8010a1c <TIM_CCxChannelCmd>
      break;
 800fd64:	e00e      	b.n	800fd84 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	2100      	movs	r1, #0
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f000 fe54 	bl	8010a1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	2201      	movs	r2, #1
 800fd7a:	2104      	movs	r1, #4
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f000 fe4d 	bl	8010a1c <TIM_CCxChannelCmd>
      break;
 800fd82:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	681a      	ldr	r2, [r3, #0]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	f042 0201 	orr.w	r2, r2, #1
 800fd92:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800fd94:	2300      	movs	r3, #0
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	3708      	adds	r7, #8
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}

0800fd9e <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fd9e:	b580      	push	{r7, lr}
 800fda0:	b082      	sub	sp, #8
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	6078      	str	r0, [r7, #4]
 800fda6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d002      	beq.n	800fdb4 <HAL_TIM_Encoder_Stop+0x16>
 800fdae:	2b04      	cmp	r3, #4
 800fdb0:	d008      	beq.n	800fdc4 <HAL_TIM_Encoder_Stop+0x26>
 800fdb2:	e00f      	b.n	800fdd4 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	2100      	movs	r1, #0
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f000 fe2d 	bl	8010a1c <TIM_CCxChannelCmd>
      break;
 800fdc2:	e016      	b.n	800fdf2 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	2104      	movs	r1, #4
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f000 fe25 	bl	8010a1c <TIM_CCxChannelCmd>
      break;
 800fdd2:	e00e      	b.n	800fdf2 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	2100      	movs	r1, #0
 800fddc:	4618      	mov	r0, r3
 800fdde:	f000 fe1d 	bl	8010a1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	2200      	movs	r2, #0
 800fde8:	2104      	movs	r1, #4
 800fdea:	4618      	mov	r0, r3
 800fdec:	f000 fe16 	bl	8010a1c <TIM_CCxChannelCmd>
      break;
 800fdf0:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	6a1a      	ldr	r2, [r3, #32]
 800fdf8:	f241 1311 	movw	r3, #4369	; 0x1111
 800fdfc:	4013      	ands	r3, r2
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d10f      	bne.n	800fe22 <HAL_TIM_Encoder_Stop+0x84>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	6a1a      	ldr	r2, [r3, #32]
 800fe08:	f240 4344 	movw	r3, #1092	; 0x444
 800fe0c:	4013      	ands	r3, r2
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d107      	bne.n	800fe22 <HAL_TIM_Encoder_Stop+0x84>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f022 0201 	bic.w	r2, r2, #1
 800fe20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800fe22:	2300      	movs	r3, #0
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3708      	adds	r7, #8
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	691b      	ldr	r3, [r3, #16]
 800fe3a:	f003 0302 	and.w	r3, r3, #2
 800fe3e:	2b02      	cmp	r3, #2
 800fe40:	d122      	bne.n	800fe88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	68db      	ldr	r3, [r3, #12]
 800fe48:	f003 0302 	and.w	r3, r3, #2
 800fe4c:	2b02      	cmp	r3, #2
 800fe4e:	d11b      	bne.n	800fe88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	f06f 0202 	mvn.w	r2, #2
 800fe58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	699b      	ldr	r3, [r3, #24]
 800fe66:	f003 0303 	and.w	r3, r3, #3
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d003      	beq.n	800fe76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f000 facb 	bl	801040a <HAL_TIM_IC_CaptureCallback>
 800fe74:	e005      	b.n	800fe82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f000 fabd 	bl	80103f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f000 face 	bl	801041e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2200      	movs	r2, #0
 800fe86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	691b      	ldr	r3, [r3, #16]
 800fe8e:	f003 0304 	and.w	r3, r3, #4
 800fe92:	2b04      	cmp	r3, #4
 800fe94:	d122      	bne.n	800fedc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	68db      	ldr	r3, [r3, #12]
 800fe9c:	f003 0304 	and.w	r3, r3, #4
 800fea0:	2b04      	cmp	r3, #4
 800fea2:	d11b      	bne.n	800fedc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f06f 0204 	mvn.w	r2, #4
 800feac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2202      	movs	r2, #2
 800feb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	699b      	ldr	r3, [r3, #24]
 800feba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d003      	beq.n	800feca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f000 faa1 	bl	801040a <HAL_TIM_IC_CaptureCallback>
 800fec8:	e005      	b.n	800fed6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f000 fa93 	bl	80103f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f000 faa4 	bl	801041e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2200      	movs	r2, #0
 800feda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	691b      	ldr	r3, [r3, #16]
 800fee2:	f003 0308 	and.w	r3, r3, #8
 800fee6:	2b08      	cmp	r3, #8
 800fee8:	d122      	bne.n	800ff30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	68db      	ldr	r3, [r3, #12]
 800fef0:	f003 0308 	and.w	r3, r3, #8
 800fef4:	2b08      	cmp	r3, #8
 800fef6:	d11b      	bne.n	800ff30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	f06f 0208 	mvn.w	r2, #8
 800ff00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2204      	movs	r2, #4
 800ff06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	69db      	ldr	r3, [r3, #28]
 800ff0e:	f003 0303 	and.w	r3, r3, #3
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d003      	beq.n	800ff1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f000 fa77 	bl	801040a <HAL_TIM_IC_CaptureCallback>
 800ff1c:	e005      	b.n	800ff2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f000 fa69 	bl	80103f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 fa7a 	bl	801041e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	691b      	ldr	r3, [r3, #16]
 800ff36:	f003 0310 	and.w	r3, r3, #16
 800ff3a:	2b10      	cmp	r3, #16
 800ff3c:	d122      	bne.n	800ff84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	68db      	ldr	r3, [r3, #12]
 800ff44:	f003 0310 	and.w	r3, r3, #16
 800ff48:	2b10      	cmp	r3, #16
 800ff4a:	d11b      	bne.n	800ff84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f06f 0210 	mvn.w	r2, #16
 800ff54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2208      	movs	r2, #8
 800ff5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	69db      	ldr	r3, [r3, #28]
 800ff62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d003      	beq.n	800ff72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 fa4d 	bl	801040a <HAL_TIM_IC_CaptureCallback>
 800ff70:	e005      	b.n	800ff7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f000 fa3f 	bl	80103f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 fa50 	bl	801041e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2200      	movs	r2, #0
 800ff82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	691b      	ldr	r3, [r3, #16]
 800ff8a:	f003 0301 	and.w	r3, r3, #1
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d10e      	bne.n	800ffb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	f003 0301 	and.w	r3, r3, #1
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	d107      	bne.n	800ffb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	f06f 0201 	mvn.w	r2, #1
 800ffa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f7fa f90a 	bl	800a1c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	691b      	ldr	r3, [r3, #16]
 800ffb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffba:	2b80      	cmp	r3, #128	; 0x80
 800ffbc:	d10e      	bne.n	800ffdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	68db      	ldr	r3, [r3, #12]
 800ffc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffc8:	2b80      	cmp	r3, #128	; 0x80
 800ffca:	d107      	bne.n	800ffdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ffd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f000 fee8 	bl	8010dac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	691b      	ldr	r3, [r3, #16]
 800ffe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffe6:	2b40      	cmp	r3, #64	; 0x40
 800ffe8:	d10e      	bne.n	8010008 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	68db      	ldr	r3, [r3, #12]
 800fff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fff4:	2b40      	cmp	r3, #64	; 0x40
 800fff6:	d107      	bne.n	8010008 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 fa15 	bl	8010432 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	691b      	ldr	r3, [r3, #16]
 801000e:	f003 0320 	and.w	r3, r3, #32
 8010012:	2b20      	cmp	r3, #32
 8010014:	d10e      	bne.n	8010034 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	68db      	ldr	r3, [r3, #12]
 801001c:	f003 0320 	and.w	r3, r3, #32
 8010020:	2b20      	cmp	r3, #32
 8010022:	d107      	bne.n	8010034 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	f06f 0220 	mvn.w	r2, #32
 801002c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f000 feb2 	bl	8010d98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010034:	bf00      	nop
 8010036:	3708      	adds	r7, #8
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}

0801003c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b084      	sub	sp, #16
 8010040:	af00      	add	r7, sp, #0
 8010042:	60f8      	str	r0, [r7, #12]
 8010044:	60b9      	str	r1, [r7, #8]
 8010046:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801004e:	2b01      	cmp	r3, #1
 8010050:	d101      	bne.n	8010056 <HAL_TIM_OC_ConfigChannel+0x1a>
 8010052:	2302      	movs	r3, #2
 8010054:	e04e      	b.n	80100f4 <HAL_TIM_OC_ConfigChannel+0xb8>
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2201      	movs	r2, #1
 801005a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2202      	movs	r2, #2
 8010062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2b0c      	cmp	r3, #12
 801006a:	d839      	bhi.n	80100e0 <HAL_TIM_OC_ConfigChannel+0xa4>
 801006c:	a201      	add	r2, pc, #4	; (adr r2, 8010074 <HAL_TIM_OC_ConfigChannel+0x38>)
 801006e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010072:	bf00      	nop
 8010074:	080100a9 	.word	0x080100a9
 8010078:	080100e1 	.word	0x080100e1
 801007c:	080100e1 	.word	0x080100e1
 8010080:	080100e1 	.word	0x080100e1
 8010084:	080100b7 	.word	0x080100b7
 8010088:	080100e1 	.word	0x080100e1
 801008c:	080100e1 	.word	0x080100e1
 8010090:	080100e1 	.word	0x080100e1
 8010094:	080100c5 	.word	0x080100c5
 8010098:	080100e1 	.word	0x080100e1
 801009c:	080100e1 	.word	0x080100e1
 80100a0:	080100e1 	.word	0x080100e1
 80100a4:	080100d3 	.word	0x080100d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	68b9      	ldr	r1, [r7, #8]
 80100ae:	4618      	mov	r0, r3
 80100b0:	f000 fa6a 	bl	8010588 <TIM_OC1_SetConfig>
      break;
 80100b4:	e015      	b.n	80100e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	68b9      	ldr	r1, [r7, #8]
 80100bc:	4618      	mov	r0, r3
 80100be:	f000 fad3 	bl	8010668 <TIM_OC2_SetConfig>
      break;
 80100c2:	e00e      	b.n	80100e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	68b9      	ldr	r1, [r7, #8]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f000 fb42 	bl	8010754 <TIM_OC3_SetConfig>
      break;
 80100d0:	e007      	b.n	80100e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	68b9      	ldr	r1, [r7, #8]
 80100d8:	4618      	mov	r0, r3
 80100da:	f000 fbaf 	bl	801083c <TIM_OC4_SetConfig>
      break;
 80100de:	e000      	b.n	80100e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80100e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2201      	movs	r2, #1
 80100e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	2200      	movs	r2, #0
 80100ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80100f2:	2300      	movs	r3, #0
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	3710      	adds	r7, #16
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b084      	sub	sp, #16
 8010100:	af00      	add	r7, sp, #0
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	60b9      	str	r1, [r7, #8]
 8010106:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801010e:	2b01      	cmp	r3, #1
 8010110:	d101      	bne.n	8010116 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010112:	2302      	movs	r3, #2
 8010114:	e0b4      	b.n	8010280 <HAL_TIM_PWM_ConfigChannel+0x184>
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2201      	movs	r2, #1
 801011a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	2202      	movs	r2, #2
 8010122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2b0c      	cmp	r3, #12
 801012a:	f200 809f 	bhi.w	801026c <HAL_TIM_PWM_ConfigChannel+0x170>
 801012e:	a201      	add	r2, pc, #4	; (adr r2, 8010134 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8010130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010134:	08010169 	.word	0x08010169
 8010138:	0801026d 	.word	0x0801026d
 801013c:	0801026d 	.word	0x0801026d
 8010140:	0801026d 	.word	0x0801026d
 8010144:	080101a9 	.word	0x080101a9
 8010148:	0801026d 	.word	0x0801026d
 801014c:	0801026d 	.word	0x0801026d
 8010150:	0801026d 	.word	0x0801026d
 8010154:	080101eb 	.word	0x080101eb
 8010158:	0801026d 	.word	0x0801026d
 801015c:	0801026d 	.word	0x0801026d
 8010160:	0801026d 	.word	0x0801026d
 8010164:	0801022b 	.word	0x0801022b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	68b9      	ldr	r1, [r7, #8]
 801016e:	4618      	mov	r0, r3
 8010170:	f000 fa0a 	bl	8010588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	699a      	ldr	r2, [r3, #24]
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	f042 0208 	orr.w	r2, r2, #8
 8010182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	699a      	ldr	r2, [r3, #24]
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f022 0204 	bic.w	r2, r2, #4
 8010192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	6999      	ldr	r1, [r3, #24]
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	691a      	ldr	r2, [r3, #16]
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	430a      	orrs	r2, r1
 80101a4:	619a      	str	r2, [r3, #24]
      break;
 80101a6:	e062      	b.n	801026e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	68b9      	ldr	r1, [r7, #8]
 80101ae:	4618      	mov	r0, r3
 80101b0:	f000 fa5a 	bl	8010668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	699a      	ldr	r2, [r3, #24]
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80101c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	699a      	ldr	r2, [r3, #24]
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80101d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	6999      	ldr	r1, [r3, #24]
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	691b      	ldr	r3, [r3, #16]
 80101de:	021a      	lsls	r2, r3, #8
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	430a      	orrs	r2, r1
 80101e6:	619a      	str	r2, [r3, #24]
      break;
 80101e8:	e041      	b.n	801026e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	68b9      	ldr	r1, [r7, #8]
 80101f0:	4618      	mov	r0, r3
 80101f2:	f000 faaf 	bl	8010754 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	69da      	ldr	r2, [r3, #28]
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f042 0208 	orr.w	r2, r2, #8
 8010204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	69da      	ldr	r2, [r3, #28]
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	f022 0204 	bic.w	r2, r2, #4
 8010214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	69d9      	ldr	r1, [r3, #28]
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	691a      	ldr	r2, [r3, #16]
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	430a      	orrs	r2, r1
 8010226:	61da      	str	r2, [r3, #28]
      break;
 8010228:	e021      	b.n	801026e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	68b9      	ldr	r1, [r7, #8]
 8010230:	4618      	mov	r0, r3
 8010232:	f000 fb03 	bl	801083c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	69da      	ldr	r2, [r3, #28]
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	69da      	ldr	r2, [r3, #28]
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	69d9      	ldr	r1, [r3, #28]
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	691b      	ldr	r3, [r3, #16]
 8010260:	021a      	lsls	r2, r3, #8
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	430a      	orrs	r2, r1
 8010268:	61da      	str	r2, [r3, #28]
      break;
 801026a:	e000      	b.n	801026e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 801026c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	2201      	movs	r2, #1
 8010272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2200      	movs	r2, #0
 801027a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801027e:	2300      	movs	r3, #0
}
 8010280:	4618      	mov	r0, r3
 8010282:	3710      	adds	r7, #16
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}

08010288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b084      	sub	sp, #16
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010298:	2b01      	cmp	r3, #1
 801029a:	d101      	bne.n	80102a0 <HAL_TIM_ConfigClockSource+0x18>
 801029c:	2302      	movs	r3, #2
 801029e:	e0a6      	b.n	80103ee <HAL_TIM_ConfigClockSource+0x166>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2201      	movs	r2, #1
 80102a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2202      	movs	r2, #2
 80102ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	689b      	ldr	r3, [r3, #8]
 80102b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80102be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80102c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	68fa      	ldr	r2, [r7, #12]
 80102ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	2b40      	cmp	r3, #64	; 0x40
 80102d6:	d067      	beq.n	80103a8 <HAL_TIM_ConfigClockSource+0x120>
 80102d8:	2b40      	cmp	r3, #64	; 0x40
 80102da:	d80b      	bhi.n	80102f4 <HAL_TIM_ConfigClockSource+0x6c>
 80102dc:	2b10      	cmp	r3, #16
 80102de:	d073      	beq.n	80103c8 <HAL_TIM_ConfigClockSource+0x140>
 80102e0:	2b10      	cmp	r3, #16
 80102e2:	d802      	bhi.n	80102ea <HAL_TIM_ConfigClockSource+0x62>
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d06f      	beq.n	80103c8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80102e8:	e078      	b.n	80103dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80102ea:	2b20      	cmp	r3, #32
 80102ec:	d06c      	beq.n	80103c8 <HAL_TIM_ConfigClockSource+0x140>
 80102ee:	2b30      	cmp	r3, #48	; 0x30
 80102f0:	d06a      	beq.n	80103c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80102f2:	e073      	b.n	80103dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80102f4:	2b70      	cmp	r3, #112	; 0x70
 80102f6:	d00d      	beq.n	8010314 <HAL_TIM_ConfigClockSource+0x8c>
 80102f8:	2b70      	cmp	r3, #112	; 0x70
 80102fa:	d804      	bhi.n	8010306 <HAL_TIM_ConfigClockSource+0x7e>
 80102fc:	2b50      	cmp	r3, #80	; 0x50
 80102fe:	d033      	beq.n	8010368 <HAL_TIM_ConfigClockSource+0xe0>
 8010300:	2b60      	cmp	r3, #96	; 0x60
 8010302:	d041      	beq.n	8010388 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8010304:	e06a      	b.n	80103dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8010306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801030a:	d066      	beq.n	80103da <HAL_TIM_ConfigClockSource+0x152>
 801030c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010310:	d017      	beq.n	8010342 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8010312:	e063      	b.n	80103dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6818      	ldr	r0, [r3, #0]
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	6899      	ldr	r1, [r3, #8]
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	685a      	ldr	r2, [r3, #4]
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	68db      	ldr	r3, [r3, #12]
 8010324:	f000 fb5a 	bl	80109dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	689b      	ldr	r3, [r3, #8]
 801032e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010336:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	68fa      	ldr	r2, [r7, #12]
 801033e:	609a      	str	r2, [r3, #8]
      break;
 8010340:	e04c      	b.n	80103dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6818      	ldr	r0, [r3, #0]
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	6899      	ldr	r1, [r3, #8]
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	685a      	ldr	r2, [r3, #4]
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	68db      	ldr	r3, [r3, #12]
 8010352:	f000 fb43 	bl	80109dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	689a      	ldr	r2, [r3, #8]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010364:	609a      	str	r2, [r3, #8]
      break;
 8010366:	e039      	b.n	80103dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6818      	ldr	r0, [r3, #0]
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	6859      	ldr	r1, [r3, #4]
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	461a      	mov	r2, r3
 8010376:	f000 fab7 	bl	80108e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	2150      	movs	r1, #80	; 0x50
 8010380:	4618      	mov	r0, r3
 8010382:	f000 fb10 	bl	80109a6 <TIM_ITRx_SetConfig>
      break;
 8010386:	e029      	b.n	80103dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6818      	ldr	r0, [r3, #0]
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	6859      	ldr	r1, [r3, #4]
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	68db      	ldr	r3, [r3, #12]
 8010394:	461a      	mov	r2, r3
 8010396:	f000 fad6 	bl	8010946 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	2160      	movs	r1, #96	; 0x60
 80103a0:	4618      	mov	r0, r3
 80103a2:	f000 fb00 	bl	80109a6 <TIM_ITRx_SetConfig>
      break;
 80103a6:	e019      	b.n	80103dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6818      	ldr	r0, [r3, #0]
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	6859      	ldr	r1, [r3, #4]
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	68db      	ldr	r3, [r3, #12]
 80103b4:	461a      	mov	r2, r3
 80103b6:	f000 fa97 	bl	80108e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	2140      	movs	r1, #64	; 0x40
 80103c0:	4618      	mov	r0, r3
 80103c2:	f000 faf0 	bl	80109a6 <TIM_ITRx_SetConfig>
      break;
 80103c6:	e009      	b.n	80103dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	4619      	mov	r1, r3
 80103d2:	4610      	mov	r0, r2
 80103d4:	f000 fae7 	bl	80109a6 <TIM_ITRx_SetConfig>
      break;
 80103d8:	e000      	b.n	80103dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80103da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2201      	movs	r2, #1
 80103e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2200      	movs	r2, #0
 80103e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80103ec:	2300      	movs	r3, #0
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3710      	adds	r7, #16
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}

080103f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80103f6:	b480      	push	{r7}
 80103f8:	b083      	sub	sp, #12
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80103fe:	bf00      	nop
 8010400:	370c      	adds	r7, #12
 8010402:	46bd      	mov	sp, r7
 8010404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010408:	4770      	bx	lr

0801040a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801040a:	b480      	push	{r7}
 801040c:	b083      	sub	sp, #12
 801040e:	af00      	add	r7, sp, #0
 8010410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010412:	bf00      	nop
 8010414:	370c      	adds	r7, #12
 8010416:	46bd      	mov	sp, r7
 8010418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041c:	4770      	bx	lr

0801041e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801041e:	b480      	push	{r7}
 8010420:	b083      	sub	sp, #12
 8010422:	af00      	add	r7, sp, #0
 8010424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010426:	bf00      	nop
 8010428:	370c      	adds	r7, #12
 801042a:	46bd      	mov	sp, r7
 801042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010430:	4770      	bx	lr

08010432 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010432:	b480      	push	{r7}
 8010434:	b083      	sub	sp, #12
 8010436:	af00      	add	r7, sp, #0
 8010438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801043a:	bf00      	nop
 801043c:	370c      	adds	r7, #12
 801043e:	46bd      	mov	sp, r7
 8010440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010444:	4770      	bx	lr
	...

08010448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010448:	b480      	push	{r7}
 801044a:	b085      	sub	sp, #20
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	4a40      	ldr	r2, [pc, #256]	; (801055c <TIM_Base_SetConfig+0x114>)
 801045c:	4293      	cmp	r3, r2
 801045e:	d013      	beq.n	8010488 <TIM_Base_SetConfig+0x40>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010466:	d00f      	beq.n	8010488 <TIM_Base_SetConfig+0x40>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	4a3d      	ldr	r2, [pc, #244]	; (8010560 <TIM_Base_SetConfig+0x118>)
 801046c:	4293      	cmp	r3, r2
 801046e:	d00b      	beq.n	8010488 <TIM_Base_SetConfig+0x40>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	4a3c      	ldr	r2, [pc, #240]	; (8010564 <TIM_Base_SetConfig+0x11c>)
 8010474:	4293      	cmp	r3, r2
 8010476:	d007      	beq.n	8010488 <TIM_Base_SetConfig+0x40>
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	4a3b      	ldr	r2, [pc, #236]	; (8010568 <TIM_Base_SetConfig+0x120>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d003      	beq.n	8010488 <TIM_Base_SetConfig+0x40>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	4a3a      	ldr	r2, [pc, #232]	; (801056c <TIM_Base_SetConfig+0x124>)
 8010484:	4293      	cmp	r3, r2
 8010486:	d108      	bne.n	801049a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801048e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	68fa      	ldr	r2, [r7, #12]
 8010496:	4313      	orrs	r3, r2
 8010498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	4a2f      	ldr	r2, [pc, #188]	; (801055c <TIM_Base_SetConfig+0x114>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d02b      	beq.n	80104fa <TIM_Base_SetConfig+0xb2>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104a8:	d027      	beq.n	80104fa <TIM_Base_SetConfig+0xb2>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	4a2c      	ldr	r2, [pc, #176]	; (8010560 <TIM_Base_SetConfig+0x118>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d023      	beq.n	80104fa <TIM_Base_SetConfig+0xb2>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	4a2b      	ldr	r2, [pc, #172]	; (8010564 <TIM_Base_SetConfig+0x11c>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d01f      	beq.n	80104fa <TIM_Base_SetConfig+0xb2>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	4a2a      	ldr	r2, [pc, #168]	; (8010568 <TIM_Base_SetConfig+0x120>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d01b      	beq.n	80104fa <TIM_Base_SetConfig+0xb2>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	4a29      	ldr	r2, [pc, #164]	; (801056c <TIM_Base_SetConfig+0x124>)
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d017      	beq.n	80104fa <TIM_Base_SetConfig+0xb2>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	4a28      	ldr	r2, [pc, #160]	; (8010570 <TIM_Base_SetConfig+0x128>)
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d013      	beq.n	80104fa <TIM_Base_SetConfig+0xb2>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	4a27      	ldr	r2, [pc, #156]	; (8010574 <TIM_Base_SetConfig+0x12c>)
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d00f      	beq.n	80104fa <TIM_Base_SetConfig+0xb2>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	4a26      	ldr	r2, [pc, #152]	; (8010578 <TIM_Base_SetConfig+0x130>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d00b      	beq.n	80104fa <TIM_Base_SetConfig+0xb2>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4a25      	ldr	r2, [pc, #148]	; (801057c <TIM_Base_SetConfig+0x134>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d007      	beq.n	80104fa <TIM_Base_SetConfig+0xb2>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4a24      	ldr	r2, [pc, #144]	; (8010580 <TIM_Base_SetConfig+0x138>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d003      	beq.n	80104fa <TIM_Base_SetConfig+0xb2>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	4a23      	ldr	r2, [pc, #140]	; (8010584 <TIM_Base_SetConfig+0x13c>)
 80104f6:	4293      	cmp	r3, r2
 80104f8:	d108      	bne.n	801050c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	68db      	ldr	r3, [r3, #12]
 8010506:	68fa      	ldr	r2, [r7, #12]
 8010508:	4313      	orrs	r3, r2
 801050a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	695b      	ldr	r3, [r3, #20]
 8010516:	4313      	orrs	r3, r2
 8010518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	68fa      	ldr	r2, [r7, #12]
 801051e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	689a      	ldr	r2, [r3, #8]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	4a0a      	ldr	r2, [pc, #40]	; (801055c <TIM_Base_SetConfig+0x114>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d003      	beq.n	8010540 <TIM_Base_SetConfig+0xf8>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	4a0c      	ldr	r2, [pc, #48]	; (801056c <TIM_Base_SetConfig+0x124>)
 801053c:	4293      	cmp	r3, r2
 801053e:	d103      	bne.n	8010548 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	691a      	ldr	r2, [r3, #16]
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2201      	movs	r2, #1
 801054c:	615a      	str	r2, [r3, #20]
}
 801054e:	bf00      	nop
 8010550:	3714      	adds	r7, #20
 8010552:	46bd      	mov	sp, r7
 8010554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010558:	4770      	bx	lr
 801055a:	bf00      	nop
 801055c:	40010000 	.word	0x40010000
 8010560:	40000400 	.word	0x40000400
 8010564:	40000800 	.word	0x40000800
 8010568:	40000c00 	.word	0x40000c00
 801056c:	40010400 	.word	0x40010400
 8010570:	40014000 	.word	0x40014000
 8010574:	40014400 	.word	0x40014400
 8010578:	40014800 	.word	0x40014800
 801057c:	40001800 	.word	0x40001800
 8010580:	40001c00 	.word	0x40001c00
 8010584:	40002000 	.word	0x40002000

08010588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010588:	b480      	push	{r7}
 801058a:	b087      	sub	sp, #28
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6a1b      	ldr	r3, [r3, #32]
 8010596:	f023 0201 	bic.w	r2, r3, #1
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6a1b      	ldr	r3, [r3, #32]
 80105a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	685b      	ldr	r3, [r3, #4]
 80105a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	699b      	ldr	r3, [r3, #24]
 80105ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	f023 0303 	bic.w	r3, r3, #3
 80105be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	68fa      	ldr	r2, [r7, #12]
 80105c6:	4313      	orrs	r3, r2
 80105c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	f023 0302 	bic.w	r3, r3, #2
 80105d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	689b      	ldr	r3, [r3, #8]
 80105d6:	697a      	ldr	r2, [r7, #20]
 80105d8:	4313      	orrs	r3, r2
 80105da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	4a20      	ldr	r2, [pc, #128]	; (8010660 <TIM_OC1_SetConfig+0xd8>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d003      	beq.n	80105ec <TIM_OC1_SetConfig+0x64>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	4a1f      	ldr	r2, [pc, #124]	; (8010664 <TIM_OC1_SetConfig+0xdc>)
 80105e8:	4293      	cmp	r3, r2
 80105ea:	d10c      	bne.n	8010606 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	f023 0308 	bic.w	r3, r3, #8
 80105f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	68db      	ldr	r3, [r3, #12]
 80105f8:	697a      	ldr	r2, [r7, #20]
 80105fa:	4313      	orrs	r3, r2
 80105fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	f023 0304 	bic.w	r3, r3, #4
 8010604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	4a15      	ldr	r2, [pc, #84]	; (8010660 <TIM_OC1_SetConfig+0xd8>)
 801060a:	4293      	cmp	r3, r2
 801060c:	d003      	beq.n	8010616 <TIM_OC1_SetConfig+0x8e>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	4a14      	ldr	r2, [pc, #80]	; (8010664 <TIM_OC1_SetConfig+0xdc>)
 8010612:	4293      	cmp	r3, r2
 8010614:	d111      	bne.n	801063a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801061c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801061e:	693b      	ldr	r3, [r7, #16]
 8010620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	695b      	ldr	r3, [r3, #20]
 801062a:	693a      	ldr	r2, [r7, #16]
 801062c:	4313      	orrs	r3, r2
 801062e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	699b      	ldr	r3, [r3, #24]
 8010634:	693a      	ldr	r2, [r7, #16]
 8010636:	4313      	orrs	r3, r2
 8010638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	693a      	ldr	r2, [r7, #16]
 801063e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	68fa      	ldr	r2, [r7, #12]
 8010644:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	685a      	ldr	r2, [r3, #4]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	697a      	ldr	r2, [r7, #20]
 8010652:	621a      	str	r2, [r3, #32]
}
 8010654:	bf00      	nop
 8010656:	371c      	adds	r7, #28
 8010658:	46bd      	mov	sp, r7
 801065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065e:	4770      	bx	lr
 8010660:	40010000 	.word	0x40010000
 8010664:	40010400 	.word	0x40010400

08010668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010668:	b480      	push	{r7}
 801066a:	b087      	sub	sp, #28
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6a1b      	ldr	r3, [r3, #32]
 8010676:	f023 0210 	bic.w	r2, r3, #16
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6a1b      	ldr	r3, [r3, #32]
 8010682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	685b      	ldr	r3, [r3, #4]
 8010688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	699b      	ldr	r3, [r3, #24]
 801068e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801069e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	021b      	lsls	r3, r3, #8
 80106a6:	68fa      	ldr	r2, [r7, #12]
 80106a8:	4313      	orrs	r3, r2
 80106aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	f023 0320 	bic.w	r3, r3, #32
 80106b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	689b      	ldr	r3, [r3, #8]
 80106b8:	011b      	lsls	r3, r3, #4
 80106ba:	697a      	ldr	r2, [r7, #20]
 80106bc:	4313      	orrs	r3, r2
 80106be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	4a22      	ldr	r2, [pc, #136]	; (801074c <TIM_OC2_SetConfig+0xe4>)
 80106c4:	4293      	cmp	r3, r2
 80106c6:	d003      	beq.n	80106d0 <TIM_OC2_SetConfig+0x68>
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	4a21      	ldr	r2, [pc, #132]	; (8010750 <TIM_OC2_SetConfig+0xe8>)
 80106cc:	4293      	cmp	r3, r2
 80106ce:	d10d      	bne.n	80106ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80106d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	68db      	ldr	r3, [r3, #12]
 80106dc:	011b      	lsls	r3, r3, #4
 80106de:	697a      	ldr	r2, [r7, #20]
 80106e0:	4313      	orrs	r3, r2
 80106e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	4a17      	ldr	r2, [pc, #92]	; (801074c <TIM_OC2_SetConfig+0xe4>)
 80106f0:	4293      	cmp	r3, r2
 80106f2:	d003      	beq.n	80106fc <TIM_OC2_SetConfig+0x94>
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	4a16      	ldr	r2, [pc, #88]	; (8010750 <TIM_OC2_SetConfig+0xe8>)
 80106f8:	4293      	cmp	r3, r2
 80106fa:	d113      	bne.n	8010724 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801070a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	695b      	ldr	r3, [r3, #20]
 8010710:	009b      	lsls	r3, r3, #2
 8010712:	693a      	ldr	r2, [r7, #16]
 8010714:	4313      	orrs	r3, r2
 8010716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	699b      	ldr	r3, [r3, #24]
 801071c:	009b      	lsls	r3, r3, #2
 801071e:	693a      	ldr	r2, [r7, #16]
 8010720:	4313      	orrs	r3, r2
 8010722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	693a      	ldr	r2, [r7, #16]
 8010728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	68fa      	ldr	r2, [r7, #12]
 801072e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	685a      	ldr	r2, [r3, #4]
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	697a      	ldr	r2, [r7, #20]
 801073c:	621a      	str	r2, [r3, #32]
}
 801073e:	bf00      	nop
 8010740:	371c      	adds	r7, #28
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr
 801074a:	bf00      	nop
 801074c:	40010000 	.word	0x40010000
 8010750:	40010400 	.word	0x40010400

08010754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010754:	b480      	push	{r7}
 8010756:	b087      	sub	sp, #28
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6a1b      	ldr	r3, [r3, #32]
 8010762:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6a1b      	ldr	r3, [r3, #32]
 801076e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	69db      	ldr	r3, [r3, #28]
 801077a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	f023 0303 	bic.w	r3, r3, #3
 801078a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	68fa      	ldr	r2, [r7, #12]
 8010792:	4313      	orrs	r3, r2
 8010794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801079c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	689b      	ldr	r3, [r3, #8]
 80107a2:	021b      	lsls	r3, r3, #8
 80107a4:	697a      	ldr	r2, [r7, #20]
 80107a6:	4313      	orrs	r3, r2
 80107a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	4a21      	ldr	r2, [pc, #132]	; (8010834 <TIM_OC3_SetConfig+0xe0>)
 80107ae:	4293      	cmp	r3, r2
 80107b0:	d003      	beq.n	80107ba <TIM_OC3_SetConfig+0x66>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	4a20      	ldr	r2, [pc, #128]	; (8010838 <TIM_OC3_SetConfig+0xe4>)
 80107b6:	4293      	cmp	r3, r2
 80107b8:	d10d      	bne.n	80107d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80107c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	68db      	ldr	r3, [r3, #12]
 80107c6:	021b      	lsls	r3, r3, #8
 80107c8:	697a      	ldr	r2, [r7, #20]
 80107ca:	4313      	orrs	r3, r2
 80107cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80107d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	4a16      	ldr	r2, [pc, #88]	; (8010834 <TIM_OC3_SetConfig+0xe0>)
 80107da:	4293      	cmp	r3, r2
 80107dc:	d003      	beq.n	80107e6 <TIM_OC3_SetConfig+0x92>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	4a15      	ldr	r2, [pc, #84]	; (8010838 <TIM_OC3_SetConfig+0xe4>)
 80107e2:	4293      	cmp	r3, r2
 80107e4:	d113      	bne.n	801080e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80107e6:	693b      	ldr	r3, [r7, #16]
 80107e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80107ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80107f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	695b      	ldr	r3, [r3, #20]
 80107fa:	011b      	lsls	r3, r3, #4
 80107fc:	693a      	ldr	r2, [r7, #16]
 80107fe:	4313      	orrs	r3, r2
 8010800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	699b      	ldr	r3, [r3, #24]
 8010806:	011b      	lsls	r3, r3, #4
 8010808:	693a      	ldr	r2, [r7, #16]
 801080a:	4313      	orrs	r3, r2
 801080c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	693a      	ldr	r2, [r7, #16]
 8010812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	68fa      	ldr	r2, [r7, #12]
 8010818:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	685a      	ldr	r2, [r3, #4]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	697a      	ldr	r2, [r7, #20]
 8010826:	621a      	str	r2, [r3, #32]
}
 8010828:	bf00      	nop
 801082a:	371c      	adds	r7, #28
 801082c:	46bd      	mov	sp, r7
 801082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010832:	4770      	bx	lr
 8010834:	40010000 	.word	0x40010000
 8010838:	40010400 	.word	0x40010400

0801083c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801083c:	b480      	push	{r7}
 801083e:	b087      	sub	sp, #28
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6a1b      	ldr	r3, [r3, #32]
 801084a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6a1b      	ldr	r3, [r3, #32]
 8010856:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	69db      	ldr	r3, [r3, #28]
 8010862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801086a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	021b      	lsls	r3, r3, #8
 801087a:	68fa      	ldr	r2, [r7, #12]
 801087c:	4313      	orrs	r3, r2
 801087e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010880:	693b      	ldr	r3, [r7, #16]
 8010882:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	689b      	ldr	r3, [r3, #8]
 801088c:	031b      	lsls	r3, r3, #12
 801088e:	693a      	ldr	r2, [r7, #16]
 8010890:	4313      	orrs	r3, r2
 8010892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	4a12      	ldr	r2, [pc, #72]	; (80108e0 <TIM_OC4_SetConfig+0xa4>)
 8010898:	4293      	cmp	r3, r2
 801089a:	d003      	beq.n	80108a4 <TIM_OC4_SetConfig+0x68>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	4a11      	ldr	r2, [pc, #68]	; (80108e4 <TIM_OC4_SetConfig+0xa8>)
 80108a0:	4293      	cmp	r3, r2
 80108a2:	d109      	bne.n	80108b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80108aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	695b      	ldr	r3, [r3, #20]
 80108b0:	019b      	lsls	r3, r3, #6
 80108b2:	697a      	ldr	r2, [r7, #20]
 80108b4:	4313      	orrs	r3, r2
 80108b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	697a      	ldr	r2, [r7, #20]
 80108bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	68fa      	ldr	r2, [r7, #12]
 80108c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	685a      	ldr	r2, [r3, #4]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	693a      	ldr	r2, [r7, #16]
 80108d0:	621a      	str	r2, [r3, #32]
}
 80108d2:	bf00      	nop
 80108d4:	371c      	adds	r7, #28
 80108d6:	46bd      	mov	sp, r7
 80108d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108dc:	4770      	bx	lr
 80108de:	bf00      	nop
 80108e0:	40010000 	.word	0x40010000
 80108e4:	40010400 	.word	0x40010400

080108e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80108e8:	b480      	push	{r7}
 80108ea:	b087      	sub	sp, #28
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	60f8      	str	r0, [r7, #12]
 80108f0:	60b9      	str	r1, [r7, #8]
 80108f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	6a1b      	ldr	r3, [r3, #32]
 80108f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	6a1b      	ldr	r3, [r3, #32]
 80108fe:	f023 0201 	bic.w	r2, r3, #1
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	699b      	ldr	r3, [r3, #24]
 801090a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	011b      	lsls	r3, r3, #4
 8010918:	693a      	ldr	r2, [r7, #16]
 801091a:	4313      	orrs	r3, r2
 801091c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	f023 030a 	bic.w	r3, r3, #10
 8010924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010926:	697a      	ldr	r2, [r7, #20]
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	4313      	orrs	r3, r2
 801092c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	693a      	ldr	r2, [r7, #16]
 8010932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	697a      	ldr	r2, [r7, #20]
 8010938:	621a      	str	r2, [r3, #32]
}
 801093a:	bf00      	nop
 801093c:	371c      	adds	r7, #28
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr

08010946 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010946:	b480      	push	{r7}
 8010948:	b087      	sub	sp, #28
 801094a:	af00      	add	r7, sp, #0
 801094c:	60f8      	str	r0, [r7, #12]
 801094e:	60b9      	str	r1, [r7, #8]
 8010950:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	6a1b      	ldr	r3, [r3, #32]
 8010956:	f023 0210 	bic.w	r2, r3, #16
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	699b      	ldr	r3, [r3, #24]
 8010962:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	6a1b      	ldr	r3, [r3, #32]
 8010968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010970:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	031b      	lsls	r3, r3, #12
 8010976:	697a      	ldr	r2, [r7, #20]
 8010978:	4313      	orrs	r3, r2
 801097a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010982:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	011b      	lsls	r3, r3, #4
 8010988:	693a      	ldr	r2, [r7, #16]
 801098a:	4313      	orrs	r3, r2
 801098c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	697a      	ldr	r2, [r7, #20]
 8010992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	693a      	ldr	r2, [r7, #16]
 8010998:	621a      	str	r2, [r3, #32]
}
 801099a:	bf00      	nop
 801099c:	371c      	adds	r7, #28
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr

080109a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80109a6:	b480      	push	{r7}
 80109a8:	b085      	sub	sp, #20
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	6078      	str	r0, [r7, #4]
 80109ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	689b      	ldr	r3, [r3, #8]
 80109b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80109be:	683a      	ldr	r2, [r7, #0]
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	4313      	orrs	r3, r2
 80109c4:	f043 0307 	orr.w	r3, r3, #7
 80109c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	68fa      	ldr	r2, [r7, #12]
 80109ce:	609a      	str	r2, [r3, #8]
}
 80109d0:	bf00      	nop
 80109d2:	3714      	adds	r7, #20
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr

080109dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80109dc:	b480      	push	{r7}
 80109de:	b087      	sub	sp, #28
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	60f8      	str	r0, [r7, #12]
 80109e4:	60b9      	str	r1, [r7, #8]
 80109e6:	607a      	str	r2, [r7, #4]
 80109e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	689b      	ldr	r3, [r3, #8]
 80109ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80109f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	021a      	lsls	r2, r3, #8
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	431a      	orrs	r2, r3
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	4313      	orrs	r3, r2
 8010a04:	697a      	ldr	r2, [r7, #20]
 8010a06:	4313      	orrs	r3, r2
 8010a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	697a      	ldr	r2, [r7, #20]
 8010a0e:	609a      	str	r2, [r3, #8]
}
 8010a10:	bf00      	nop
 8010a12:	371c      	adds	r7, #28
 8010a14:	46bd      	mov	sp, r7
 8010a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1a:	4770      	bx	lr

08010a1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	b087      	sub	sp, #28
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	f003 031f 	and.w	r3, r3, #31
 8010a2e:	2201      	movs	r2, #1
 8010a30:	fa02 f303 	lsl.w	r3, r2, r3
 8010a34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	6a1a      	ldr	r2, [r3, #32]
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	43db      	mvns	r3, r3
 8010a3e:	401a      	ands	r2, r3
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	6a1a      	ldr	r2, [r3, #32]
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	f003 031f 	and.w	r3, r3, #31
 8010a4e:	6879      	ldr	r1, [r7, #4]
 8010a50:	fa01 f303 	lsl.w	r3, r1, r3
 8010a54:	431a      	orrs	r2, r3
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	621a      	str	r2, [r3, #32]
}
 8010a5a:	bf00      	nop
 8010a5c:	371c      	adds	r7, #28
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a64:	4770      	bx	lr

08010a66 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010a66:	b580      	push	{r7, lr}
 8010a68:	b084      	sub	sp, #16
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	6078      	str	r0, [r7, #4]
 8010a6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	2b04      	cmp	r3, #4
 8010a74:	d00d      	beq.n	8010a92 <HAL_TIMEx_OCN_Start_IT+0x2c>
 8010a76:	2b08      	cmp	r3, #8
 8010a78:	d014      	beq.n	8010aa4 <HAL_TIMEx_OCN_Start_IT+0x3e>
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d000      	beq.n	8010a80 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8010a7e:	e01a      	b.n	8010ab6 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	68da      	ldr	r2, [r3, #12]
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	f042 0202 	orr.w	r2, r2, #2
 8010a8e:	60da      	str	r2, [r3, #12]
      break;
 8010a90:	e011      	b.n	8010ab6 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	68da      	ldr	r2, [r3, #12]
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	f042 0204 	orr.w	r2, r2, #4
 8010aa0:	60da      	str	r2, [r3, #12]
      break;
 8010aa2:	e008      	b.n	8010ab6 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	68da      	ldr	r2, [r3, #12]
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	f042 0208 	orr.w	r2, r2, #8
 8010ab2:	60da      	str	r2, [r3, #12]
      break;
 8010ab4:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	68da      	ldr	r2, [r3, #12]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010ac4:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	2204      	movs	r2, #4
 8010acc:	6839      	ldr	r1, [r7, #0]
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f000 f976 	bl	8010dc0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010ae2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	689b      	ldr	r3, [r3, #8]
 8010aea:	f003 0307 	and.w	r3, r3, #7
 8010aee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	2b06      	cmp	r3, #6
 8010af4:	d007      	beq.n	8010b06 <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	681a      	ldr	r2, [r3, #0]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	f042 0201 	orr.w	r2, r2, #1
 8010b04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010b06:	2300      	movs	r3, #0
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3710      	adds	r7, #16
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b084      	sub	sp, #16
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	2b04      	cmp	r3, #4
 8010b1e:	d00d      	beq.n	8010b3c <HAL_TIMEx_OCN_Stop_IT+0x2c>
 8010b20:	2b08      	cmp	r3, #8
 8010b22:	d014      	beq.n	8010b4e <HAL_TIMEx_OCN_Stop_IT+0x3e>
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d000      	beq.n	8010b2a <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8010b28:	e01a      	b.n	8010b60 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	68da      	ldr	r2, [r3, #12]
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	f022 0202 	bic.w	r2, r2, #2
 8010b38:	60da      	str	r2, [r3, #12]
      break;
 8010b3a:	e011      	b.n	8010b60 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	68da      	ldr	r2, [r3, #12]
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	f022 0204 	bic.w	r2, r2, #4
 8010b4a:	60da      	str	r2, [r3, #12]
      break;
 8010b4c:	e008      	b.n	8010b60 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	68da      	ldr	r2, [r3, #12]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	f022 0208 	bic.w	r2, r2, #8
 8010b5c:	60da      	str	r2, [r3, #12]
      break;
 8010b5e:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2200      	movs	r2, #0
 8010b66:	6839      	ldr	r1, [r7, #0]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f000 f929 	bl	8010dc0 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	6a1b      	ldr	r3, [r3, #32]
 8010b74:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8010b76:	68fa      	ldr	r2, [r7, #12]
 8010b78:	f240 4344 	movw	r3, #1092	; 0x444
 8010b7c:	4013      	ands	r3, r2
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d107      	bne.n	8010b92 <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	68da      	ldr	r2, [r3, #12]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010b90:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	6a1a      	ldr	r2, [r3, #32]
 8010b98:	f241 1311 	movw	r3, #4369	; 0x1111
 8010b9c:	4013      	ands	r3, r2
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d10f      	bne.n	8010bc2 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	6a1a      	ldr	r2, [r3, #32]
 8010ba8:	f240 4344 	movw	r3, #1092	; 0x444
 8010bac:	4013      	ands	r3, r2
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d107      	bne.n	8010bc2 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010bc0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	6a1a      	ldr	r2, [r3, #32]
 8010bc8:	f241 1311 	movw	r3, #4369	; 0x1111
 8010bcc:	4013      	ands	r3, r2
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d10f      	bne.n	8010bf2 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	6a1a      	ldr	r2, [r3, #32]
 8010bd8:	f240 4344 	movw	r3, #1092	; 0x444
 8010bdc:	4013      	ands	r3, r2
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d107      	bne.n	8010bf2 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	681a      	ldr	r2, [r3, #0]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	f022 0201 	bic.w	r2, r2, #1
 8010bf0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010bf2:	2300      	movs	r3, #0
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3710      	adds	r7, #16
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010bfc:	b480      	push	{r7}
 8010bfe:	b085      	sub	sp, #20
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010c0c:	2b01      	cmp	r3, #1
 8010c0e:	d101      	bne.n	8010c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010c10:	2302      	movs	r3, #2
 8010c12:	e05a      	b.n	8010cca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2201      	movs	r2, #1
 8010c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2202      	movs	r2, #2
 8010c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	689b      	ldr	r3, [r3, #8]
 8010c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	68fa      	ldr	r2, [r7, #12]
 8010c42:	4313      	orrs	r3, r2
 8010c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	68fa      	ldr	r2, [r7, #12]
 8010c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	4a21      	ldr	r2, [pc, #132]	; (8010cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010c54:	4293      	cmp	r3, r2
 8010c56:	d022      	beq.n	8010c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c60:	d01d      	beq.n	8010c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	4a1d      	ldr	r2, [pc, #116]	; (8010cdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010c68:	4293      	cmp	r3, r2
 8010c6a:	d018      	beq.n	8010c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4a1b      	ldr	r2, [pc, #108]	; (8010ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8010c72:	4293      	cmp	r3, r2
 8010c74:	d013      	beq.n	8010c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	4a1a      	ldr	r2, [pc, #104]	; (8010ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010c7c:	4293      	cmp	r3, r2
 8010c7e:	d00e      	beq.n	8010c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	4a18      	ldr	r2, [pc, #96]	; (8010ce8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010c86:	4293      	cmp	r3, r2
 8010c88:	d009      	beq.n	8010c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	4a17      	ldr	r2, [pc, #92]	; (8010cec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010c90:	4293      	cmp	r3, r2
 8010c92:	d004      	beq.n	8010c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	4a15      	ldr	r2, [pc, #84]	; (8010cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010c9a:	4293      	cmp	r3, r2
 8010c9c:	d10c      	bne.n	8010cb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	685b      	ldr	r3, [r3, #4]
 8010caa:	68ba      	ldr	r2, [r7, #8]
 8010cac:	4313      	orrs	r3, r2
 8010cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	68ba      	ldr	r2, [r7, #8]
 8010cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2201      	movs	r2, #1
 8010cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010cc8:	2300      	movs	r3, #0
}
 8010cca:	4618      	mov	r0, r3
 8010ccc:	3714      	adds	r7, #20
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd4:	4770      	bx	lr
 8010cd6:	bf00      	nop
 8010cd8:	40010000 	.word	0x40010000
 8010cdc:	40000400 	.word	0x40000400
 8010ce0:	40000800 	.word	0x40000800
 8010ce4:	40000c00 	.word	0x40000c00
 8010ce8:	40010400 	.word	0x40010400
 8010cec:	40014000 	.word	0x40014000
 8010cf0:	40001800 	.word	0x40001800

08010cf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	b085      	sub	sp, #20
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
 8010cfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010cfe:	2300      	movs	r3, #0
 8010d00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d101      	bne.n	8010d10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010d0c:	2302      	movs	r3, #2
 8010d0e:	e03d      	b.n	8010d8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2201      	movs	r2, #1
 8010d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	4313      	orrs	r3, r2
 8010d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	689b      	ldr	r3, [r3, #8]
 8010d30:	4313      	orrs	r3, r2
 8010d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	685b      	ldr	r3, [r3, #4]
 8010d3e:	4313      	orrs	r3, r2
 8010d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	4313      	orrs	r3, r2
 8010d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	691b      	ldr	r3, [r3, #16]
 8010d5a:	4313      	orrs	r3, r2
 8010d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	695b      	ldr	r3, [r3, #20]
 8010d68:	4313      	orrs	r3, r2
 8010d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	69db      	ldr	r3, [r3, #28]
 8010d76:	4313      	orrs	r3, r2
 8010d78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	68fa      	ldr	r2, [r7, #12]
 8010d80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2200      	movs	r2, #0
 8010d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010d8a:	2300      	movs	r3, #0
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3714      	adds	r7, #20
 8010d90:	46bd      	mov	sp, r7
 8010d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d96:	4770      	bx	lr

08010d98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010d98:	b480      	push	{r7}
 8010d9a:	b083      	sub	sp, #12
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010da0:	bf00      	nop
 8010da2:	370c      	adds	r7, #12
 8010da4:	46bd      	mov	sp, r7
 8010da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010daa:	4770      	bx	lr

08010dac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010dac:	b480      	push	{r7}
 8010dae:	b083      	sub	sp, #12
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010db4:	bf00      	nop
 8010db6:	370c      	adds	r7, #12
 8010db8:	46bd      	mov	sp, r7
 8010dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbe:	4770      	bx	lr

08010dc0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8010dc0:	b480      	push	{r7}
 8010dc2:	b087      	sub	sp, #28
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	60f8      	str	r0, [r7, #12]
 8010dc8:	60b9      	str	r1, [r7, #8]
 8010dca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	f003 031f 	and.w	r3, r3, #31
 8010dd2:	2204      	movs	r2, #4
 8010dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8010dd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	6a1a      	ldr	r2, [r3, #32]
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	43db      	mvns	r3, r3
 8010de2:	401a      	ands	r2, r3
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	6a1a      	ldr	r2, [r3, #32]
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	f003 031f 	and.w	r3, r3, #31
 8010df2:	6879      	ldr	r1, [r7, #4]
 8010df4:	fa01 f303 	lsl.w	r3, r1, r3
 8010df8:	431a      	orrs	r2, r3
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	621a      	str	r2, [r3, #32]
}
 8010dfe:	bf00      	nop
 8010e00:	371c      	adds	r7, #28
 8010e02:	46bd      	mov	sp, r7
 8010e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e08:	4770      	bx	lr

08010e0a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b082      	sub	sp, #8
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d101      	bne.n	8010e1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010e18:	2301      	movs	r3, #1
 8010e1a:	e03f      	b.n	8010e9c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010e22:	b2db      	uxtb	r3, r3
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d106      	bne.n	8010e36 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f7fb fda7 	bl	800c984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2224      	movs	r2, #36	; 0x24
 8010e3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	68da      	ldr	r2, [r3, #12]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010e4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f000 f90c 	bl	801106c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	691a      	ldr	r2, [r3, #16]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010e62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	695a      	ldr	r2, [r3, #20]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010e72:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	68da      	ldr	r2, [r3, #12]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010e82:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2200      	movs	r2, #0
 8010e88:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2220      	movs	r2, #32
 8010e8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2220      	movs	r2, #32
 8010e96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010e9a:	2300      	movs	r3, #0
}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3708      	adds	r7, #8
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b088      	sub	sp, #32
 8010ea8:	af02      	add	r7, sp, #8
 8010eaa:	60f8      	str	r0, [r7, #12]
 8010eac:	60b9      	str	r1, [r7, #8]
 8010eae:	603b      	str	r3, [r7, #0]
 8010eb0:	4613      	mov	r3, r2
 8010eb2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010ebe:	b2db      	uxtb	r3, r3
 8010ec0:	2b20      	cmp	r3, #32
 8010ec2:	f040 8083 	bne.w	8010fcc <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d002      	beq.n	8010ed2 <HAL_UART_Transmit+0x2e>
 8010ecc:	88fb      	ldrh	r3, [r7, #6]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d101      	bne.n	8010ed6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	e07b      	b.n	8010fce <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	d101      	bne.n	8010ee4 <HAL_UART_Transmit+0x40>
 8010ee0:	2302      	movs	r3, #2
 8010ee2:	e074      	b.n	8010fce <HAL_UART_Transmit+0x12a>
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	2201      	movs	r2, #1
 8010ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	2221      	movs	r2, #33	; 0x21
 8010ef6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8010efa:	f7fc f983 	bl	800d204 <HAL_GetTick>
 8010efe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	88fa      	ldrh	r2, [r7, #6]
 8010f04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	88fa      	ldrh	r2, [r7, #6]
 8010f0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8010f14:	e042      	b.n	8010f9c <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	3b01      	subs	r3, #1
 8010f1e:	b29a      	uxth	r2, r3
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	689b      	ldr	r3, [r3, #8]
 8010f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f2c:	d122      	bne.n	8010f74 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	9300      	str	r3, [sp, #0]
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	2200      	movs	r2, #0
 8010f36:	2180      	movs	r1, #128	; 0x80
 8010f38:	68f8      	ldr	r0, [r7, #12]
 8010f3a:	f000 f84c 	bl	8010fd6 <UART_WaitOnFlagUntilTimeout>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d001      	beq.n	8010f48 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8010f44:	2303      	movs	r3, #3
 8010f46:	e042      	b.n	8010fce <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	881b      	ldrh	r3, [r3, #0]
 8010f50:	461a      	mov	r2, r3
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010f5a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	691b      	ldr	r3, [r3, #16]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d103      	bne.n	8010f6c <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	3302      	adds	r3, #2
 8010f68:	60bb      	str	r3, [r7, #8]
 8010f6a:	e017      	b.n	8010f9c <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	3301      	adds	r3, #1
 8010f70:	60bb      	str	r3, [r7, #8]
 8010f72:	e013      	b.n	8010f9c <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	9300      	str	r3, [sp, #0]
 8010f78:	697b      	ldr	r3, [r7, #20]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	2180      	movs	r1, #128	; 0x80
 8010f7e:	68f8      	ldr	r0, [r7, #12]
 8010f80:	f000 f829 	bl	8010fd6 <UART_WaitOnFlagUntilTimeout>
 8010f84:	4603      	mov	r3, r0
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d001      	beq.n	8010f8e <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8010f8a:	2303      	movs	r3, #3
 8010f8c:	e01f      	b.n	8010fce <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	1c5a      	adds	r2, r3, #1
 8010f92:	60ba      	str	r2, [r7, #8]
 8010f94:	781a      	ldrb	r2, [r3, #0]
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010fa0:	b29b      	uxth	r3, r3
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d1b7      	bne.n	8010f16 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	9300      	str	r3, [sp, #0]
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	2200      	movs	r2, #0
 8010fae:	2140      	movs	r1, #64	; 0x40
 8010fb0:	68f8      	ldr	r0, [r7, #12]
 8010fb2:	f000 f810 	bl	8010fd6 <UART_WaitOnFlagUntilTimeout>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d001      	beq.n	8010fc0 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8010fbc:	2303      	movs	r3, #3
 8010fbe:	e006      	b.n	8010fce <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	2220      	movs	r2, #32
 8010fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	e000      	b.n	8010fce <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8010fcc:	2302      	movs	r3, #2
  }
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3718      	adds	r7, #24
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}

08010fd6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010fd6:	b580      	push	{r7, lr}
 8010fd8:	b084      	sub	sp, #16
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	60f8      	str	r0, [r7, #12]
 8010fde:	60b9      	str	r1, [r7, #8]
 8010fe0:	603b      	str	r3, [r7, #0]
 8010fe2:	4613      	mov	r3, r2
 8010fe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010fe6:	e02c      	b.n	8011042 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010fe8:	69bb      	ldr	r3, [r7, #24]
 8010fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fee:	d028      	beq.n	8011042 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010ff0:	69bb      	ldr	r3, [r7, #24]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d007      	beq.n	8011006 <UART_WaitOnFlagUntilTimeout+0x30>
 8010ff6:	f7fc f905 	bl	800d204 <HAL_GetTick>
 8010ffa:	4602      	mov	r2, r0
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	1ad3      	subs	r3, r2, r3
 8011000:	69ba      	ldr	r2, [r7, #24]
 8011002:	429a      	cmp	r2, r3
 8011004:	d21d      	bcs.n	8011042 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	68da      	ldr	r2, [r3, #12]
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011014:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	695a      	ldr	r2, [r3, #20]
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	f022 0201 	bic.w	r2, r2, #1
 8011024:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	2220      	movs	r2, #32
 801102a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	2220      	movs	r2, #32
 8011032:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	2200      	movs	r2, #0
 801103a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801103e:	2303      	movs	r3, #3
 8011040:	e00f      	b.n	8011062 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	4013      	ands	r3, r2
 801104c:	68ba      	ldr	r2, [r7, #8]
 801104e:	429a      	cmp	r2, r3
 8011050:	bf0c      	ite	eq
 8011052:	2301      	moveq	r3, #1
 8011054:	2300      	movne	r3, #0
 8011056:	b2db      	uxtb	r3, r3
 8011058:	461a      	mov	r2, r3
 801105a:	79fb      	ldrb	r3, [r7, #7]
 801105c:	429a      	cmp	r2, r3
 801105e:	d0c3      	beq.n	8010fe8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011060:	2300      	movs	r3, #0
}
 8011062:	4618      	mov	r0, r3
 8011064:	3710      	adds	r7, #16
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
	...

0801106c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801106c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011070:	b085      	sub	sp, #20
 8011072:	af00      	add	r7, sp, #0
 8011074:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	691b      	ldr	r3, [r3, #16]
 801107c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	68da      	ldr	r2, [r3, #12]
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	430a      	orrs	r2, r1
 801108a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	689a      	ldr	r2, [r3, #8]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	691b      	ldr	r3, [r3, #16]
 8011094:	431a      	orrs	r2, r3
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	695b      	ldr	r3, [r3, #20]
 801109a:	431a      	orrs	r2, r3
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	69db      	ldr	r3, [r3, #28]
 80110a0:	4313      	orrs	r3, r2
 80110a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	68db      	ldr	r3, [r3, #12]
 80110aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80110ae:	f023 030c 	bic.w	r3, r3, #12
 80110b2:	687a      	ldr	r2, [r7, #4]
 80110b4:	6812      	ldr	r2, [r2, #0]
 80110b6:	68f9      	ldr	r1, [r7, #12]
 80110b8:	430b      	orrs	r3, r1
 80110ba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	695b      	ldr	r3, [r3, #20]
 80110c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	699a      	ldr	r2, [r3, #24]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	430a      	orrs	r2, r1
 80110d0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	69db      	ldr	r3, [r3, #28]
 80110d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80110da:	f040 818b 	bne.w	80113f4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	4ac1      	ldr	r2, [pc, #772]	; (80113e8 <UART_SetConfig+0x37c>)
 80110e4:	4293      	cmp	r3, r2
 80110e6:	d005      	beq.n	80110f4 <UART_SetConfig+0x88>
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	4abf      	ldr	r2, [pc, #764]	; (80113ec <UART_SetConfig+0x380>)
 80110ee:	4293      	cmp	r3, r2
 80110f0:	f040 80bd 	bne.w	801126e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80110f4:	f7fe fad0 	bl	800f698 <HAL_RCC_GetPCLK2Freq>
 80110f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80110fa:	68bb      	ldr	r3, [r7, #8]
 80110fc:	461d      	mov	r5, r3
 80110fe:	f04f 0600 	mov.w	r6, #0
 8011102:	46a8      	mov	r8, r5
 8011104:	46b1      	mov	r9, r6
 8011106:	eb18 0308 	adds.w	r3, r8, r8
 801110a:	eb49 0409 	adc.w	r4, r9, r9
 801110e:	4698      	mov	r8, r3
 8011110:	46a1      	mov	r9, r4
 8011112:	eb18 0805 	adds.w	r8, r8, r5
 8011116:	eb49 0906 	adc.w	r9, r9, r6
 801111a:	f04f 0100 	mov.w	r1, #0
 801111e:	f04f 0200 	mov.w	r2, #0
 8011122:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011126:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801112a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801112e:	4688      	mov	r8, r1
 8011130:	4691      	mov	r9, r2
 8011132:	eb18 0005 	adds.w	r0, r8, r5
 8011136:	eb49 0106 	adc.w	r1, r9, r6
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	461d      	mov	r5, r3
 8011140:	f04f 0600 	mov.w	r6, #0
 8011144:	196b      	adds	r3, r5, r5
 8011146:	eb46 0406 	adc.w	r4, r6, r6
 801114a:	461a      	mov	r2, r3
 801114c:	4623      	mov	r3, r4
 801114e:	f7f7 fcb3 	bl	8008ab8 <__aeabi_uldivmod>
 8011152:	4603      	mov	r3, r0
 8011154:	460c      	mov	r4, r1
 8011156:	461a      	mov	r2, r3
 8011158:	4ba5      	ldr	r3, [pc, #660]	; (80113f0 <UART_SetConfig+0x384>)
 801115a:	fba3 2302 	umull	r2, r3, r3, r2
 801115e:	095b      	lsrs	r3, r3, #5
 8011160:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	461d      	mov	r5, r3
 8011168:	f04f 0600 	mov.w	r6, #0
 801116c:	46a9      	mov	r9, r5
 801116e:	46b2      	mov	sl, r6
 8011170:	eb19 0309 	adds.w	r3, r9, r9
 8011174:	eb4a 040a 	adc.w	r4, sl, sl
 8011178:	4699      	mov	r9, r3
 801117a:	46a2      	mov	sl, r4
 801117c:	eb19 0905 	adds.w	r9, r9, r5
 8011180:	eb4a 0a06 	adc.w	sl, sl, r6
 8011184:	f04f 0100 	mov.w	r1, #0
 8011188:	f04f 0200 	mov.w	r2, #0
 801118c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011190:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011194:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011198:	4689      	mov	r9, r1
 801119a:	4692      	mov	sl, r2
 801119c:	eb19 0005 	adds.w	r0, r9, r5
 80111a0:	eb4a 0106 	adc.w	r1, sl, r6
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	685b      	ldr	r3, [r3, #4]
 80111a8:	461d      	mov	r5, r3
 80111aa:	f04f 0600 	mov.w	r6, #0
 80111ae:	196b      	adds	r3, r5, r5
 80111b0:	eb46 0406 	adc.w	r4, r6, r6
 80111b4:	461a      	mov	r2, r3
 80111b6:	4623      	mov	r3, r4
 80111b8:	f7f7 fc7e 	bl	8008ab8 <__aeabi_uldivmod>
 80111bc:	4603      	mov	r3, r0
 80111be:	460c      	mov	r4, r1
 80111c0:	461a      	mov	r2, r3
 80111c2:	4b8b      	ldr	r3, [pc, #556]	; (80113f0 <UART_SetConfig+0x384>)
 80111c4:	fba3 1302 	umull	r1, r3, r3, r2
 80111c8:	095b      	lsrs	r3, r3, #5
 80111ca:	2164      	movs	r1, #100	; 0x64
 80111cc:	fb01 f303 	mul.w	r3, r1, r3
 80111d0:	1ad3      	subs	r3, r2, r3
 80111d2:	00db      	lsls	r3, r3, #3
 80111d4:	3332      	adds	r3, #50	; 0x32
 80111d6:	4a86      	ldr	r2, [pc, #536]	; (80113f0 <UART_SetConfig+0x384>)
 80111d8:	fba2 2303 	umull	r2, r3, r2, r3
 80111dc:	095b      	lsrs	r3, r3, #5
 80111de:	005b      	lsls	r3, r3, #1
 80111e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80111e4:	4498      	add	r8, r3
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	461d      	mov	r5, r3
 80111ea:	f04f 0600 	mov.w	r6, #0
 80111ee:	46a9      	mov	r9, r5
 80111f0:	46b2      	mov	sl, r6
 80111f2:	eb19 0309 	adds.w	r3, r9, r9
 80111f6:	eb4a 040a 	adc.w	r4, sl, sl
 80111fa:	4699      	mov	r9, r3
 80111fc:	46a2      	mov	sl, r4
 80111fe:	eb19 0905 	adds.w	r9, r9, r5
 8011202:	eb4a 0a06 	adc.w	sl, sl, r6
 8011206:	f04f 0100 	mov.w	r1, #0
 801120a:	f04f 0200 	mov.w	r2, #0
 801120e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011212:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011216:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801121a:	4689      	mov	r9, r1
 801121c:	4692      	mov	sl, r2
 801121e:	eb19 0005 	adds.w	r0, r9, r5
 8011222:	eb4a 0106 	adc.w	r1, sl, r6
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	685b      	ldr	r3, [r3, #4]
 801122a:	461d      	mov	r5, r3
 801122c:	f04f 0600 	mov.w	r6, #0
 8011230:	196b      	adds	r3, r5, r5
 8011232:	eb46 0406 	adc.w	r4, r6, r6
 8011236:	461a      	mov	r2, r3
 8011238:	4623      	mov	r3, r4
 801123a:	f7f7 fc3d 	bl	8008ab8 <__aeabi_uldivmod>
 801123e:	4603      	mov	r3, r0
 8011240:	460c      	mov	r4, r1
 8011242:	461a      	mov	r2, r3
 8011244:	4b6a      	ldr	r3, [pc, #424]	; (80113f0 <UART_SetConfig+0x384>)
 8011246:	fba3 1302 	umull	r1, r3, r3, r2
 801124a:	095b      	lsrs	r3, r3, #5
 801124c:	2164      	movs	r1, #100	; 0x64
 801124e:	fb01 f303 	mul.w	r3, r1, r3
 8011252:	1ad3      	subs	r3, r2, r3
 8011254:	00db      	lsls	r3, r3, #3
 8011256:	3332      	adds	r3, #50	; 0x32
 8011258:	4a65      	ldr	r2, [pc, #404]	; (80113f0 <UART_SetConfig+0x384>)
 801125a:	fba2 2303 	umull	r2, r3, r2, r3
 801125e:	095b      	lsrs	r3, r3, #5
 8011260:	f003 0207 	and.w	r2, r3, #7
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	4442      	add	r2, r8
 801126a:	609a      	str	r2, [r3, #8]
 801126c:	e26f      	b.n	801174e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801126e:	f7fe f9ff 	bl	800f670 <HAL_RCC_GetPCLK1Freq>
 8011272:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	461d      	mov	r5, r3
 8011278:	f04f 0600 	mov.w	r6, #0
 801127c:	46a8      	mov	r8, r5
 801127e:	46b1      	mov	r9, r6
 8011280:	eb18 0308 	adds.w	r3, r8, r8
 8011284:	eb49 0409 	adc.w	r4, r9, r9
 8011288:	4698      	mov	r8, r3
 801128a:	46a1      	mov	r9, r4
 801128c:	eb18 0805 	adds.w	r8, r8, r5
 8011290:	eb49 0906 	adc.w	r9, r9, r6
 8011294:	f04f 0100 	mov.w	r1, #0
 8011298:	f04f 0200 	mov.w	r2, #0
 801129c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80112a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80112a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80112a8:	4688      	mov	r8, r1
 80112aa:	4691      	mov	r9, r2
 80112ac:	eb18 0005 	adds.w	r0, r8, r5
 80112b0:	eb49 0106 	adc.w	r1, r9, r6
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	685b      	ldr	r3, [r3, #4]
 80112b8:	461d      	mov	r5, r3
 80112ba:	f04f 0600 	mov.w	r6, #0
 80112be:	196b      	adds	r3, r5, r5
 80112c0:	eb46 0406 	adc.w	r4, r6, r6
 80112c4:	461a      	mov	r2, r3
 80112c6:	4623      	mov	r3, r4
 80112c8:	f7f7 fbf6 	bl	8008ab8 <__aeabi_uldivmod>
 80112cc:	4603      	mov	r3, r0
 80112ce:	460c      	mov	r4, r1
 80112d0:	461a      	mov	r2, r3
 80112d2:	4b47      	ldr	r3, [pc, #284]	; (80113f0 <UART_SetConfig+0x384>)
 80112d4:	fba3 2302 	umull	r2, r3, r3, r2
 80112d8:	095b      	lsrs	r3, r3, #5
 80112da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	461d      	mov	r5, r3
 80112e2:	f04f 0600 	mov.w	r6, #0
 80112e6:	46a9      	mov	r9, r5
 80112e8:	46b2      	mov	sl, r6
 80112ea:	eb19 0309 	adds.w	r3, r9, r9
 80112ee:	eb4a 040a 	adc.w	r4, sl, sl
 80112f2:	4699      	mov	r9, r3
 80112f4:	46a2      	mov	sl, r4
 80112f6:	eb19 0905 	adds.w	r9, r9, r5
 80112fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80112fe:	f04f 0100 	mov.w	r1, #0
 8011302:	f04f 0200 	mov.w	r2, #0
 8011306:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801130a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801130e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011312:	4689      	mov	r9, r1
 8011314:	4692      	mov	sl, r2
 8011316:	eb19 0005 	adds.w	r0, r9, r5
 801131a:	eb4a 0106 	adc.w	r1, sl, r6
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	685b      	ldr	r3, [r3, #4]
 8011322:	461d      	mov	r5, r3
 8011324:	f04f 0600 	mov.w	r6, #0
 8011328:	196b      	adds	r3, r5, r5
 801132a:	eb46 0406 	adc.w	r4, r6, r6
 801132e:	461a      	mov	r2, r3
 8011330:	4623      	mov	r3, r4
 8011332:	f7f7 fbc1 	bl	8008ab8 <__aeabi_uldivmod>
 8011336:	4603      	mov	r3, r0
 8011338:	460c      	mov	r4, r1
 801133a:	461a      	mov	r2, r3
 801133c:	4b2c      	ldr	r3, [pc, #176]	; (80113f0 <UART_SetConfig+0x384>)
 801133e:	fba3 1302 	umull	r1, r3, r3, r2
 8011342:	095b      	lsrs	r3, r3, #5
 8011344:	2164      	movs	r1, #100	; 0x64
 8011346:	fb01 f303 	mul.w	r3, r1, r3
 801134a:	1ad3      	subs	r3, r2, r3
 801134c:	00db      	lsls	r3, r3, #3
 801134e:	3332      	adds	r3, #50	; 0x32
 8011350:	4a27      	ldr	r2, [pc, #156]	; (80113f0 <UART_SetConfig+0x384>)
 8011352:	fba2 2303 	umull	r2, r3, r2, r3
 8011356:	095b      	lsrs	r3, r3, #5
 8011358:	005b      	lsls	r3, r3, #1
 801135a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801135e:	4498      	add	r8, r3
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	461d      	mov	r5, r3
 8011364:	f04f 0600 	mov.w	r6, #0
 8011368:	46a9      	mov	r9, r5
 801136a:	46b2      	mov	sl, r6
 801136c:	eb19 0309 	adds.w	r3, r9, r9
 8011370:	eb4a 040a 	adc.w	r4, sl, sl
 8011374:	4699      	mov	r9, r3
 8011376:	46a2      	mov	sl, r4
 8011378:	eb19 0905 	adds.w	r9, r9, r5
 801137c:	eb4a 0a06 	adc.w	sl, sl, r6
 8011380:	f04f 0100 	mov.w	r1, #0
 8011384:	f04f 0200 	mov.w	r2, #0
 8011388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801138c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011390:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011394:	4689      	mov	r9, r1
 8011396:	4692      	mov	sl, r2
 8011398:	eb19 0005 	adds.w	r0, r9, r5
 801139c:	eb4a 0106 	adc.w	r1, sl, r6
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	685b      	ldr	r3, [r3, #4]
 80113a4:	461d      	mov	r5, r3
 80113a6:	f04f 0600 	mov.w	r6, #0
 80113aa:	196b      	adds	r3, r5, r5
 80113ac:	eb46 0406 	adc.w	r4, r6, r6
 80113b0:	461a      	mov	r2, r3
 80113b2:	4623      	mov	r3, r4
 80113b4:	f7f7 fb80 	bl	8008ab8 <__aeabi_uldivmod>
 80113b8:	4603      	mov	r3, r0
 80113ba:	460c      	mov	r4, r1
 80113bc:	461a      	mov	r2, r3
 80113be:	4b0c      	ldr	r3, [pc, #48]	; (80113f0 <UART_SetConfig+0x384>)
 80113c0:	fba3 1302 	umull	r1, r3, r3, r2
 80113c4:	095b      	lsrs	r3, r3, #5
 80113c6:	2164      	movs	r1, #100	; 0x64
 80113c8:	fb01 f303 	mul.w	r3, r1, r3
 80113cc:	1ad3      	subs	r3, r2, r3
 80113ce:	00db      	lsls	r3, r3, #3
 80113d0:	3332      	adds	r3, #50	; 0x32
 80113d2:	4a07      	ldr	r2, [pc, #28]	; (80113f0 <UART_SetConfig+0x384>)
 80113d4:	fba2 2303 	umull	r2, r3, r2, r3
 80113d8:	095b      	lsrs	r3, r3, #5
 80113da:	f003 0207 	and.w	r2, r3, #7
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	4442      	add	r2, r8
 80113e4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80113e6:	e1b2      	b.n	801174e <UART_SetConfig+0x6e2>
 80113e8:	40011000 	.word	0x40011000
 80113ec:	40011400 	.word	0x40011400
 80113f0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	4ad7      	ldr	r2, [pc, #860]	; (8011758 <UART_SetConfig+0x6ec>)
 80113fa:	4293      	cmp	r3, r2
 80113fc:	d005      	beq.n	801140a <UART_SetConfig+0x39e>
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	4ad6      	ldr	r2, [pc, #856]	; (801175c <UART_SetConfig+0x6f0>)
 8011404:	4293      	cmp	r3, r2
 8011406:	f040 80d1 	bne.w	80115ac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801140a:	f7fe f945 	bl	800f698 <HAL_RCC_GetPCLK2Freq>
 801140e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	469a      	mov	sl, r3
 8011414:	f04f 0b00 	mov.w	fp, #0
 8011418:	46d0      	mov	r8, sl
 801141a:	46d9      	mov	r9, fp
 801141c:	eb18 0308 	adds.w	r3, r8, r8
 8011420:	eb49 0409 	adc.w	r4, r9, r9
 8011424:	4698      	mov	r8, r3
 8011426:	46a1      	mov	r9, r4
 8011428:	eb18 080a 	adds.w	r8, r8, sl
 801142c:	eb49 090b 	adc.w	r9, r9, fp
 8011430:	f04f 0100 	mov.w	r1, #0
 8011434:	f04f 0200 	mov.w	r2, #0
 8011438:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801143c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011440:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011444:	4688      	mov	r8, r1
 8011446:	4691      	mov	r9, r2
 8011448:	eb1a 0508 	adds.w	r5, sl, r8
 801144c:	eb4b 0609 	adc.w	r6, fp, r9
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	4619      	mov	r1, r3
 8011456:	f04f 0200 	mov.w	r2, #0
 801145a:	f04f 0300 	mov.w	r3, #0
 801145e:	f04f 0400 	mov.w	r4, #0
 8011462:	0094      	lsls	r4, r2, #2
 8011464:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011468:	008b      	lsls	r3, r1, #2
 801146a:	461a      	mov	r2, r3
 801146c:	4623      	mov	r3, r4
 801146e:	4628      	mov	r0, r5
 8011470:	4631      	mov	r1, r6
 8011472:	f7f7 fb21 	bl	8008ab8 <__aeabi_uldivmod>
 8011476:	4603      	mov	r3, r0
 8011478:	460c      	mov	r4, r1
 801147a:	461a      	mov	r2, r3
 801147c:	4bb8      	ldr	r3, [pc, #736]	; (8011760 <UART_SetConfig+0x6f4>)
 801147e:	fba3 2302 	umull	r2, r3, r3, r2
 8011482:	095b      	lsrs	r3, r3, #5
 8011484:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	469b      	mov	fp, r3
 801148c:	f04f 0c00 	mov.w	ip, #0
 8011490:	46d9      	mov	r9, fp
 8011492:	46e2      	mov	sl, ip
 8011494:	eb19 0309 	adds.w	r3, r9, r9
 8011498:	eb4a 040a 	adc.w	r4, sl, sl
 801149c:	4699      	mov	r9, r3
 801149e:	46a2      	mov	sl, r4
 80114a0:	eb19 090b 	adds.w	r9, r9, fp
 80114a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80114a8:	f04f 0100 	mov.w	r1, #0
 80114ac:	f04f 0200 	mov.w	r2, #0
 80114b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80114b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80114b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80114bc:	4689      	mov	r9, r1
 80114be:	4692      	mov	sl, r2
 80114c0:	eb1b 0509 	adds.w	r5, fp, r9
 80114c4:	eb4c 060a 	adc.w	r6, ip, sl
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	685b      	ldr	r3, [r3, #4]
 80114cc:	4619      	mov	r1, r3
 80114ce:	f04f 0200 	mov.w	r2, #0
 80114d2:	f04f 0300 	mov.w	r3, #0
 80114d6:	f04f 0400 	mov.w	r4, #0
 80114da:	0094      	lsls	r4, r2, #2
 80114dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80114e0:	008b      	lsls	r3, r1, #2
 80114e2:	461a      	mov	r2, r3
 80114e4:	4623      	mov	r3, r4
 80114e6:	4628      	mov	r0, r5
 80114e8:	4631      	mov	r1, r6
 80114ea:	f7f7 fae5 	bl	8008ab8 <__aeabi_uldivmod>
 80114ee:	4603      	mov	r3, r0
 80114f0:	460c      	mov	r4, r1
 80114f2:	461a      	mov	r2, r3
 80114f4:	4b9a      	ldr	r3, [pc, #616]	; (8011760 <UART_SetConfig+0x6f4>)
 80114f6:	fba3 1302 	umull	r1, r3, r3, r2
 80114fa:	095b      	lsrs	r3, r3, #5
 80114fc:	2164      	movs	r1, #100	; 0x64
 80114fe:	fb01 f303 	mul.w	r3, r1, r3
 8011502:	1ad3      	subs	r3, r2, r3
 8011504:	011b      	lsls	r3, r3, #4
 8011506:	3332      	adds	r3, #50	; 0x32
 8011508:	4a95      	ldr	r2, [pc, #596]	; (8011760 <UART_SetConfig+0x6f4>)
 801150a:	fba2 2303 	umull	r2, r3, r2, r3
 801150e:	095b      	lsrs	r3, r3, #5
 8011510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011514:	4498      	add	r8, r3
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	469b      	mov	fp, r3
 801151a:	f04f 0c00 	mov.w	ip, #0
 801151e:	46d9      	mov	r9, fp
 8011520:	46e2      	mov	sl, ip
 8011522:	eb19 0309 	adds.w	r3, r9, r9
 8011526:	eb4a 040a 	adc.w	r4, sl, sl
 801152a:	4699      	mov	r9, r3
 801152c:	46a2      	mov	sl, r4
 801152e:	eb19 090b 	adds.w	r9, r9, fp
 8011532:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011536:	f04f 0100 	mov.w	r1, #0
 801153a:	f04f 0200 	mov.w	r2, #0
 801153e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011542:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011546:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801154a:	4689      	mov	r9, r1
 801154c:	4692      	mov	sl, r2
 801154e:	eb1b 0509 	adds.w	r5, fp, r9
 8011552:	eb4c 060a 	adc.w	r6, ip, sl
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	685b      	ldr	r3, [r3, #4]
 801155a:	4619      	mov	r1, r3
 801155c:	f04f 0200 	mov.w	r2, #0
 8011560:	f04f 0300 	mov.w	r3, #0
 8011564:	f04f 0400 	mov.w	r4, #0
 8011568:	0094      	lsls	r4, r2, #2
 801156a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801156e:	008b      	lsls	r3, r1, #2
 8011570:	461a      	mov	r2, r3
 8011572:	4623      	mov	r3, r4
 8011574:	4628      	mov	r0, r5
 8011576:	4631      	mov	r1, r6
 8011578:	f7f7 fa9e 	bl	8008ab8 <__aeabi_uldivmod>
 801157c:	4603      	mov	r3, r0
 801157e:	460c      	mov	r4, r1
 8011580:	461a      	mov	r2, r3
 8011582:	4b77      	ldr	r3, [pc, #476]	; (8011760 <UART_SetConfig+0x6f4>)
 8011584:	fba3 1302 	umull	r1, r3, r3, r2
 8011588:	095b      	lsrs	r3, r3, #5
 801158a:	2164      	movs	r1, #100	; 0x64
 801158c:	fb01 f303 	mul.w	r3, r1, r3
 8011590:	1ad3      	subs	r3, r2, r3
 8011592:	011b      	lsls	r3, r3, #4
 8011594:	3332      	adds	r3, #50	; 0x32
 8011596:	4a72      	ldr	r2, [pc, #456]	; (8011760 <UART_SetConfig+0x6f4>)
 8011598:	fba2 2303 	umull	r2, r3, r2, r3
 801159c:	095b      	lsrs	r3, r3, #5
 801159e:	f003 020f 	and.w	r2, r3, #15
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	4442      	add	r2, r8
 80115a8:	609a      	str	r2, [r3, #8]
 80115aa:	e0d0      	b.n	801174e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80115ac:	f7fe f860 	bl	800f670 <HAL_RCC_GetPCLK1Freq>
 80115b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	469a      	mov	sl, r3
 80115b6:	f04f 0b00 	mov.w	fp, #0
 80115ba:	46d0      	mov	r8, sl
 80115bc:	46d9      	mov	r9, fp
 80115be:	eb18 0308 	adds.w	r3, r8, r8
 80115c2:	eb49 0409 	adc.w	r4, r9, r9
 80115c6:	4698      	mov	r8, r3
 80115c8:	46a1      	mov	r9, r4
 80115ca:	eb18 080a 	adds.w	r8, r8, sl
 80115ce:	eb49 090b 	adc.w	r9, r9, fp
 80115d2:	f04f 0100 	mov.w	r1, #0
 80115d6:	f04f 0200 	mov.w	r2, #0
 80115da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80115de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80115e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80115e6:	4688      	mov	r8, r1
 80115e8:	4691      	mov	r9, r2
 80115ea:	eb1a 0508 	adds.w	r5, sl, r8
 80115ee:	eb4b 0609 	adc.w	r6, fp, r9
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	685b      	ldr	r3, [r3, #4]
 80115f6:	4619      	mov	r1, r3
 80115f8:	f04f 0200 	mov.w	r2, #0
 80115fc:	f04f 0300 	mov.w	r3, #0
 8011600:	f04f 0400 	mov.w	r4, #0
 8011604:	0094      	lsls	r4, r2, #2
 8011606:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801160a:	008b      	lsls	r3, r1, #2
 801160c:	461a      	mov	r2, r3
 801160e:	4623      	mov	r3, r4
 8011610:	4628      	mov	r0, r5
 8011612:	4631      	mov	r1, r6
 8011614:	f7f7 fa50 	bl	8008ab8 <__aeabi_uldivmod>
 8011618:	4603      	mov	r3, r0
 801161a:	460c      	mov	r4, r1
 801161c:	461a      	mov	r2, r3
 801161e:	4b50      	ldr	r3, [pc, #320]	; (8011760 <UART_SetConfig+0x6f4>)
 8011620:	fba3 2302 	umull	r2, r3, r3, r2
 8011624:	095b      	lsrs	r3, r3, #5
 8011626:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	469b      	mov	fp, r3
 801162e:	f04f 0c00 	mov.w	ip, #0
 8011632:	46d9      	mov	r9, fp
 8011634:	46e2      	mov	sl, ip
 8011636:	eb19 0309 	adds.w	r3, r9, r9
 801163a:	eb4a 040a 	adc.w	r4, sl, sl
 801163e:	4699      	mov	r9, r3
 8011640:	46a2      	mov	sl, r4
 8011642:	eb19 090b 	adds.w	r9, r9, fp
 8011646:	eb4a 0a0c 	adc.w	sl, sl, ip
 801164a:	f04f 0100 	mov.w	r1, #0
 801164e:	f04f 0200 	mov.w	r2, #0
 8011652:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011656:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801165a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801165e:	4689      	mov	r9, r1
 8011660:	4692      	mov	sl, r2
 8011662:	eb1b 0509 	adds.w	r5, fp, r9
 8011666:	eb4c 060a 	adc.w	r6, ip, sl
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	685b      	ldr	r3, [r3, #4]
 801166e:	4619      	mov	r1, r3
 8011670:	f04f 0200 	mov.w	r2, #0
 8011674:	f04f 0300 	mov.w	r3, #0
 8011678:	f04f 0400 	mov.w	r4, #0
 801167c:	0094      	lsls	r4, r2, #2
 801167e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011682:	008b      	lsls	r3, r1, #2
 8011684:	461a      	mov	r2, r3
 8011686:	4623      	mov	r3, r4
 8011688:	4628      	mov	r0, r5
 801168a:	4631      	mov	r1, r6
 801168c:	f7f7 fa14 	bl	8008ab8 <__aeabi_uldivmod>
 8011690:	4603      	mov	r3, r0
 8011692:	460c      	mov	r4, r1
 8011694:	461a      	mov	r2, r3
 8011696:	4b32      	ldr	r3, [pc, #200]	; (8011760 <UART_SetConfig+0x6f4>)
 8011698:	fba3 1302 	umull	r1, r3, r3, r2
 801169c:	095b      	lsrs	r3, r3, #5
 801169e:	2164      	movs	r1, #100	; 0x64
 80116a0:	fb01 f303 	mul.w	r3, r1, r3
 80116a4:	1ad3      	subs	r3, r2, r3
 80116a6:	011b      	lsls	r3, r3, #4
 80116a8:	3332      	adds	r3, #50	; 0x32
 80116aa:	4a2d      	ldr	r2, [pc, #180]	; (8011760 <UART_SetConfig+0x6f4>)
 80116ac:	fba2 2303 	umull	r2, r3, r2, r3
 80116b0:	095b      	lsrs	r3, r3, #5
 80116b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80116b6:	4498      	add	r8, r3
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	469b      	mov	fp, r3
 80116bc:	f04f 0c00 	mov.w	ip, #0
 80116c0:	46d9      	mov	r9, fp
 80116c2:	46e2      	mov	sl, ip
 80116c4:	eb19 0309 	adds.w	r3, r9, r9
 80116c8:	eb4a 040a 	adc.w	r4, sl, sl
 80116cc:	4699      	mov	r9, r3
 80116ce:	46a2      	mov	sl, r4
 80116d0:	eb19 090b 	adds.w	r9, r9, fp
 80116d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80116d8:	f04f 0100 	mov.w	r1, #0
 80116dc:	f04f 0200 	mov.w	r2, #0
 80116e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80116e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80116e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80116ec:	4689      	mov	r9, r1
 80116ee:	4692      	mov	sl, r2
 80116f0:	eb1b 0509 	adds.w	r5, fp, r9
 80116f4:	eb4c 060a 	adc.w	r6, ip, sl
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	685b      	ldr	r3, [r3, #4]
 80116fc:	4619      	mov	r1, r3
 80116fe:	f04f 0200 	mov.w	r2, #0
 8011702:	f04f 0300 	mov.w	r3, #0
 8011706:	f04f 0400 	mov.w	r4, #0
 801170a:	0094      	lsls	r4, r2, #2
 801170c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011710:	008b      	lsls	r3, r1, #2
 8011712:	461a      	mov	r2, r3
 8011714:	4623      	mov	r3, r4
 8011716:	4628      	mov	r0, r5
 8011718:	4631      	mov	r1, r6
 801171a:	f7f7 f9cd 	bl	8008ab8 <__aeabi_uldivmod>
 801171e:	4603      	mov	r3, r0
 8011720:	460c      	mov	r4, r1
 8011722:	461a      	mov	r2, r3
 8011724:	4b0e      	ldr	r3, [pc, #56]	; (8011760 <UART_SetConfig+0x6f4>)
 8011726:	fba3 1302 	umull	r1, r3, r3, r2
 801172a:	095b      	lsrs	r3, r3, #5
 801172c:	2164      	movs	r1, #100	; 0x64
 801172e:	fb01 f303 	mul.w	r3, r1, r3
 8011732:	1ad3      	subs	r3, r2, r3
 8011734:	011b      	lsls	r3, r3, #4
 8011736:	3332      	adds	r3, #50	; 0x32
 8011738:	4a09      	ldr	r2, [pc, #36]	; (8011760 <UART_SetConfig+0x6f4>)
 801173a:	fba2 2303 	umull	r2, r3, r2, r3
 801173e:	095b      	lsrs	r3, r3, #5
 8011740:	f003 020f 	and.w	r2, r3, #15
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	4442      	add	r2, r8
 801174a:	609a      	str	r2, [r3, #8]
}
 801174c:	e7ff      	b.n	801174e <UART_SetConfig+0x6e2>
 801174e:	bf00      	nop
 8011750:	3714      	adds	r7, #20
 8011752:	46bd      	mov	sp, r7
 8011754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011758:	40011000 	.word	0x40011000
 801175c:	40011400 	.word	0x40011400
 8011760:	51eb851f 	.word	0x51eb851f

08011764 <round>:
 8011764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011766:	ec57 6b10 	vmov	r6, r7, d0
 801176a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 801176e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8011772:	2c13      	cmp	r4, #19
 8011774:	463b      	mov	r3, r7
 8011776:	463d      	mov	r5, r7
 8011778:	dc17      	bgt.n	80117aa <round+0x46>
 801177a:	2c00      	cmp	r4, #0
 801177c:	da09      	bge.n	8011792 <round+0x2e>
 801177e:	3401      	adds	r4, #1
 8011780:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8011784:	d103      	bne.n	801178e <round+0x2a>
 8011786:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801178a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801178e:	2100      	movs	r1, #0
 8011790:	e02c      	b.n	80117ec <round+0x88>
 8011792:	4a18      	ldr	r2, [pc, #96]	; (80117f4 <round+0x90>)
 8011794:	4122      	asrs	r2, r4
 8011796:	4217      	tst	r7, r2
 8011798:	d100      	bne.n	801179c <round+0x38>
 801179a:	b19e      	cbz	r6, 80117c4 <round+0x60>
 801179c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80117a0:	4123      	asrs	r3, r4
 80117a2:	442b      	add	r3, r5
 80117a4:	ea23 0302 	bic.w	r3, r3, r2
 80117a8:	e7f1      	b.n	801178e <round+0x2a>
 80117aa:	2c33      	cmp	r4, #51	; 0x33
 80117ac:	dd0d      	ble.n	80117ca <round+0x66>
 80117ae:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80117b2:	d107      	bne.n	80117c4 <round+0x60>
 80117b4:	4630      	mov	r0, r6
 80117b6:	4639      	mov	r1, r7
 80117b8:	ee10 2a10 	vmov	r2, s0
 80117bc:	f7f6 fc9e 	bl	80080fc <__adddf3>
 80117c0:	4606      	mov	r6, r0
 80117c2:	460f      	mov	r7, r1
 80117c4:	ec47 6b10 	vmov	d0, r6, r7
 80117c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117ca:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80117ce:	f04f 30ff 	mov.w	r0, #4294967295
 80117d2:	40d0      	lsrs	r0, r2
 80117d4:	4206      	tst	r6, r0
 80117d6:	d0f5      	beq.n	80117c4 <round+0x60>
 80117d8:	2201      	movs	r2, #1
 80117da:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80117de:	fa02 f404 	lsl.w	r4, r2, r4
 80117e2:	1931      	adds	r1, r6, r4
 80117e4:	bf28      	it	cs
 80117e6:	189b      	addcs	r3, r3, r2
 80117e8:	ea21 0100 	bic.w	r1, r1, r0
 80117ec:	461f      	mov	r7, r3
 80117ee:	460e      	mov	r6, r1
 80117f0:	e7e8      	b.n	80117c4 <round+0x60>
 80117f2:	bf00      	nop
 80117f4:	000fffff 	.word	0x000fffff

080117f8 <__errno>:
 80117f8:	4b01      	ldr	r3, [pc, #4]	; (8011800 <__errno+0x8>)
 80117fa:	6818      	ldr	r0, [r3, #0]
 80117fc:	4770      	bx	lr
 80117fe:	bf00      	nop
 8011800:	20000010 	.word	0x20000010

08011804 <__libc_init_array>:
 8011804:	b570      	push	{r4, r5, r6, lr}
 8011806:	4e0d      	ldr	r6, [pc, #52]	; (801183c <__libc_init_array+0x38>)
 8011808:	4c0d      	ldr	r4, [pc, #52]	; (8011840 <__libc_init_array+0x3c>)
 801180a:	1ba4      	subs	r4, r4, r6
 801180c:	10a4      	asrs	r4, r4, #2
 801180e:	2500      	movs	r5, #0
 8011810:	42a5      	cmp	r5, r4
 8011812:	d109      	bne.n	8011828 <__libc_init_array+0x24>
 8011814:	4e0b      	ldr	r6, [pc, #44]	; (8011844 <__libc_init_array+0x40>)
 8011816:	4c0c      	ldr	r4, [pc, #48]	; (8011848 <__libc_init_array+0x44>)
 8011818:	f002 fbae 	bl	8013f78 <_init>
 801181c:	1ba4      	subs	r4, r4, r6
 801181e:	10a4      	asrs	r4, r4, #2
 8011820:	2500      	movs	r5, #0
 8011822:	42a5      	cmp	r5, r4
 8011824:	d105      	bne.n	8011832 <__libc_init_array+0x2e>
 8011826:	bd70      	pop	{r4, r5, r6, pc}
 8011828:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801182c:	4798      	blx	r3
 801182e:	3501      	adds	r5, #1
 8011830:	e7ee      	b.n	8011810 <__libc_init_array+0xc>
 8011832:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011836:	4798      	blx	r3
 8011838:	3501      	adds	r5, #1
 801183a:	e7f2      	b.n	8011822 <__libc_init_array+0x1e>
 801183c:	08014320 	.word	0x08014320
 8011840:	08014320 	.word	0x08014320
 8011844:	08014320 	.word	0x08014320
 8011848:	08014324 	.word	0x08014324

0801184c <memcpy>:
 801184c:	b510      	push	{r4, lr}
 801184e:	1e43      	subs	r3, r0, #1
 8011850:	440a      	add	r2, r1
 8011852:	4291      	cmp	r1, r2
 8011854:	d100      	bne.n	8011858 <memcpy+0xc>
 8011856:	bd10      	pop	{r4, pc}
 8011858:	f811 4b01 	ldrb.w	r4, [r1], #1
 801185c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011860:	e7f7      	b.n	8011852 <memcpy+0x6>

08011862 <memset>:
 8011862:	4402      	add	r2, r0
 8011864:	4603      	mov	r3, r0
 8011866:	4293      	cmp	r3, r2
 8011868:	d100      	bne.n	801186c <memset+0xa>
 801186a:	4770      	bx	lr
 801186c:	f803 1b01 	strb.w	r1, [r3], #1
 8011870:	e7f9      	b.n	8011866 <memset+0x4>

08011872 <__cvt>:
 8011872:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011876:	ec55 4b10 	vmov	r4, r5, d0
 801187a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801187c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011880:	2d00      	cmp	r5, #0
 8011882:	460e      	mov	r6, r1
 8011884:	4691      	mov	r9, r2
 8011886:	4619      	mov	r1, r3
 8011888:	bfb8      	it	lt
 801188a:	4622      	movlt	r2, r4
 801188c:	462b      	mov	r3, r5
 801188e:	f027 0720 	bic.w	r7, r7, #32
 8011892:	bfbb      	ittet	lt
 8011894:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011898:	461d      	movlt	r5, r3
 801189a:	2300      	movge	r3, #0
 801189c:	232d      	movlt	r3, #45	; 0x2d
 801189e:	bfb8      	it	lt
 80118a0:	4614      	movlt	r4, r2
 80118a2:	2f46      	cmp	r7, #70	; 0x46
 80118a4:	700b      	strb	r3, [r1, #0]
 80118a6:	d004      	beq.n	80118b2 <__cvt+0x40>
 80118a8:	2f45      	cmp	r7, #69	; 0x45
 80118aa:	d100      	bne.n	80118ae <__cvt+0x3c>
 80118ac:	3601      	adds	r6, #1
 80118ae:	2102      	movs	r1, #2
 80118b0:	e000      	b.n	80118b4 <__cvt+0x42>
 80118b2:	2103      	movs	r1, #3
 80118b4:	ab03      	add	r3, sp, #12
 80118b6:	9301      	str	r3, [sp, #4]
 80118b8:	ab02      	add	r3, sp, #8
 80118ba:	9300      	str	r3, [sp, #0]
 80118bc:	4632      	mov	r2, r6
 80118be:	4653      	mov	r3, sl
 80118c0:	ec45 4b10 	vmov	d0, r4, r5
 80118c4:	f000 fdfc 	bl	80124c0 <_dtoa_r>
 80118c8:	2f47      	cmp	r7, #71	; 0x47
 80118ca:	4680      	mov	r8, r0
 80118cc:	d102      	bne.n	80118d4 <__cvt+0x62>
 80118ce:	f019 0f01 	tst.w	r9, #1
 80118d2:	d026      	beq.n	8011922 <__cvt+0xb0>
 80118d4:	2f46      	cmp	r7, #70	; 0x46
 80118d6:	eb08 0906 	add.w	r9, r8, r6
 80118da:	d111      	bne.n	8011900 <__cvt+0x8e>
 80118dc:	f898 3000 	ldrb.w	r3, [r8]
 80118e0:	2b30      	cmp	r3, #48	; 0x30
 80118e2:	d10a      	bne.n	80118fa <__cvt+0x88>
 80118e4:	2200      	movs	r2, #0
 80118e6:	2300      	movs	r3, #0
 80118e8:	4620      	mov	r0, r4
 80118ea:	4629      	mov	r1, r5
 80118ec:	f7f7 f824 	bl	8008938 <__aeabi_dcmpeq>
 80118f0:	b918      	cbnz	r0, 80118fa <__cvt+0x88>
 80118f2:	f1c6 0601 	rsb	r6, r6, #1
 80118f6:	f8ca 6000 	str.w	r6, [sl]
 80118fa:	f8da 3000 	ldr.w	r3, [sl]
 80118fe:	4499      	add	r9, r3
 8011900:	2200      	movs	r2, #0
 8011902:	2300      	movs	r3, #0
 8011904:	4620      	mov	r0, r4
 8011906:	4629      	mov	r1, r5
 8011908:	f7f7 f816 	bl	8008938 <__aeabi_dcmpeq>
 801190c:	b938      	cbnz	r0, 801191e <__cvt+0xac>
 801190e:	2230      	movs	r2, #48	; 0x30
 8011910:	9b03      	ldr	r3, [sp, #12]
 8011912:	454b      	cmp	r3, r9
 8011914:	d205      	bcs.n	8011922 <__cvt+0xb0>
 8011916:	1c59      	adds	r1, r3, #1
 8011918:	9103      	str	r1, [sp, #12]
 801191a:	701a      	strb	r2, [r3, #0]
 801191c:	e7f8      	b.n	8011910 <__cvt+0x9e>
 801191e:	f8cd 900c 	str.w	r9, [sp, #12]
 8011922:	9b03      	ldr	r3, [sp, #12]
 8011924:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011926:	eba3 0308 	sub.w	r3, r3, r8
 801192a:	4640      	mov	r0, r8
 801192c:	6013      	str	r3, [r2, #0]
 801192e:	b004      	add	sp, #16
 8011930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011934 <__exponent>:
 8011934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011936:	2900      	cmp	r1, #0
 8011938:	4604      	mov	r4, r0
 801193a:	bfba      	itte	lt
 801193c:	4249      	neglt	r1, r1
 801193e:	232d      	movlt	r3, #45	; 0x2d
 8011940:	232b      	movge	r3, #43	; 0x2b
 8011942:	2909      	cmp	r1, #9
 8011944:	f804 2b02 	strb.w	r2, [r4], #2
 8011948:	7043      	strb	r3, [r0, #1]
 801194a:	dd20      	ble.n	801198e <__exponent+0x5a>
 801194c:	f10d 0307 	add.w	r3, sp, #7
 8011950:	461f      	mov	r7, r3
 8011952:	260a      	movs	r6, #10
 8011954:	fb91 f5f6 	sdiv	r5, r1, r6
 8011958:	fb06 1115 	mls	r1, r6, r5, r1
 801195c:	3130      	adds	r1, #48	; 0x30
 801195e:	2d09      	cmp	r5, #9
 8011960:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011964:	f103 32ff 	add.w	r2, r3, #4294967295
 8011968:	4629      	mov	r1, r5
 801196a:	dc09      	bgt.n	8011980 <__exponent+0x4c>
 801196c:	3130      	adds	r1, #48	; 0x30
 801196e:	3b02      	subs	r3, #2
 8011970:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011974:	42bb      	cmp	r3, r7
 8011976:	4622      	mov	r2, r4
 8011978:	d304      	bcc.n	8011984 <__exponent+0x50>
 801197a:	1a10      	subs	r0, r2, r0
 801197c:	b003      	add	sp, #12
 801197e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011980:	4613      	mov	r3, r2
 8011982:	e7e7      	b.n	8011954 <__exponent+0x20>
 8011984:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011988:	f804 2b01 	strb.w	r2, [r4], #1
 801198c:	e7f2      	b.n	8011974 <__exponent+0x40>
 801198e:	2330      	movs	r3, #48	; 0x30
 8011990:	4419      	add	r1, r3
 8011992:	7083      	strb	r3, [r0, #2]
 8011994:	1d02      	adds	r2, r0, #4
 8011996:	70c1      	strb	r1, [r0, #3]
 8011998:	e7ef      	b.n	801197a <__exponent+0x46>
	...

0801199c <_printf_float>:
 801199c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a0:	b08d      	sub	sp, #52	; 0x34
 80119a2:	460c      	mov	r4, r1
 80119a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80119a8:	4616      	mov	r6, r2
 80119aa:	461f      	mov	r7, r3
 80119ac:	4605      	mov	r5, r0
 80119ae:	f001 fcb9 	bl	8013324 <_localeconv_r>
 80119b2:	6803      	ldr	r3, [r0, #0]
 80119b4:	9304      	str	r3, [sp, #16]
 80119b6:	4618      	mov	r0, r3
 80119b8:	f7f6 fb42 	bl	8008040 <strlen>
 80119bc:	2300      	movs	r3, #0
 80119be:	930a      	str	r3, [sp, #40]	; 0x28
 80119c0:	f8d8 3000 	ldr.w	r3, [r8]
 80119c4:	9005      	str	r0, [sp, #20]
 80119c6:	3307      	adds	r3, #7
 80119c8:	f023 0307 	bic.w	r3, r3, #7
 80119cc:	f103 0208 	add.w	r2, r3, #8
 80119d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80119d4:	f8d4 b000 	ldr.w	fp, [r4]
 80119d8:	f8c8 2000 	str.w	r2, [r8]
 80119dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80119e4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80119e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80119ec:	9307      	str	r3, [sp, #28]
 80119ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80119f2:	f04f 32ff 	mov.w	r2, #4294967295
 80119f6:	4ba7      	ldr	r3, [pc, #668]	; (8011c94 <_printf_float+0x2f8>)
 80119f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80119fc:	f7f6 ffce 	bl	800899c <__aeabi_dcmpun>
 8011a00:	bb70      	cbnz	r0, 8011a60 <_printf_float+0xc4>
 8011a02:	f04f 32ff 	mov.w	r2, #4294967295
 8011a06:	4ba3      	ldr	r3, [pc, #652]	; (8011c94 <_printf_float+0x2f8>)
 8011a08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a0c:	f7f6 ffa8 	bl	8008960 <__aeabi_dcmple>
 8011a10:	bb30      	cbnz	r0, 8011a60 <_printf_float+0xc4>
 8011a12:	2200      	movs	r2, #0
 8011a14:	2300      	movs	r3, #0
 8011a16:	4640      	mov	r0, r8
 8011a18:	4649      	mov	r1, r9
 8011a1a:	f7f6 ff97 	bl	800894c <__aeabi_dcmplt>
 8011a1e:	b110      	cbz	r0, 8011a26 <_printf_float+0x8a>
 8011a20:	232d      	movs	r3, #45	; 0x2d
 8011a22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a26:	4a9c      	ldr	r2, [pc, #624]	; (8011c98 <_printf_float+0x2fc>)
 8011a28:	4b9c      	ldr	r3, [pc, #624]	; (8011c9c <_printf_float+0x300>)
 8011a2a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011a2e:	bf8c      	ite	hi
 8011a30:	4690      	movhi	r8, r2
 8011a32:	4698      	movls	r8, r3
 8011a34:	2303      	movs	r3, #3
 8011a36:	f02b 0204 	bic.w	r2, fp, #4
 8011a3a:	6123      	str	r3, [r4, #16]
 8011a3c:	6022      	str	r2, [r4, #0]
 8011a3e:	f04f 0900 	mov.w	r9, #0
 8011a42:	9700      	str	r7, [sp, #0]
 8011a44:	4633      	mov	r3, r6
 8011a46:	aa0b      	add	r2, sp, #44	; 0x2c
 8011a48:	4621      	mov	r1, r4
 8011a4a:	4628      	mov	r0, r5
 8011a4c:	f000 f9e6 	bl	8011e1c <_printf_common>
 8011a50:	3001      	adds	r0, #1
 8011a52:	f040 808d 	bne.w	8011b70 <_printf_float+0x1d4>
 8011a56:	f04f 30ff 	mov.w	r0, #4294967295
 8011a5a:	b00d      	add	sp, #52	; 0x34
 8011a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a60:	4642      	mov	r2, r8
 8011a62:	464b      	mov	r3, r9
 8011a64:	4640      	mov	r0, r8
 8011a66:	4649      	mov	r1, r9
 8011a68:	f7f6 ff98 	bl	800899c <__aeabi_dcmpun>
 8011a6c:	b110      	cbz	r0, 8011a74 <_printf_float+0xd8>
 8011a6e:	4a8c      	ldr	r2, [pc, #560]	; (8011ca0 <_printf_float+0x304>)
 8011a70:	4b8c      	ldr	r3, [pc, #560]	; (8011ca4 <_printf_float+0x308>)
 8011a72:	e7da      	b.n	8011a2a <_printf_float+0x8e>
 8011a74:	6861      	ldr	r1, [r4, #4]
 8011a76:	1c4b      	adds	r3, r1, #1
 8011a78:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8011a7c:	a80a      	add	r0, sp, #40	; 0x28
 8011a7e:	d13e      	bne.n	8011afe <_printf_float+0x162>
 8011a80:	2306      	movs	r3, #6
 8011a82:	6063      	str	r3, [r4, #4]
 8011a84:	2300      	movs	r3, #0
 8011a86:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011a8a:	ab09      	add	r3, sp, #36	; 0x24
 8011a8c:	9300      	str	r3, [sp, #0]
 8011a8e:	ec49 8b10 	vmov	d0, r8, r9
 8011a92:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011a96:	6022      	str	r2, [r4, #0]
 8011a98:	f8cd a004 	str.w	sl, [sp, #4]
 8011a9c:	6861      	ldr	r1, [r4, #4]
 8011a9e:	4628      	mov	r0, r5
 8011aa0:	f7ff fee7 	bl	8011872 <__cvt>
 8011aa4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8011aa8:	2b47      	cmp	r3, #71	; 0x47
 8011aaa:	4680      	mov	r8, r0
 8011aac:	d109      	bne.n	8011ac2 <_printf_float+0x126>
 8011aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ab0:	1cd8      	adds	r0, r3, #3
 8011ab2:	db02      	blt.n	8011aba <_printf_float+0x11e>
 8011ab4:	6862      	ldr	r2, [r4, #4]
 8011ab6:	4293      	cmp	r3, r2
 8011ab8:	dd47      	ble.n	8011b4a <_printf_float+0x1ae>
 8011aba:	f1aa 0a02 	sub.w	sl, sl, #2
 8011abe:	fa5f fa8a 	uxtb.w	sl, sl
 8011ac2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011ac6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ac8:	d824      	bhi.n	8011b14 <_printf_float+0x178>
 8011aca:	3901      	subs	r1, #1
 8011acc:	4652      	mov	r2, sl
 8011ace:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011ad2:	9109      	str	r1, [sp, #36]	; 0x24
 8011ad4:	f7ff ff2e 	bl	8011934 <__exponent>
 8011ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ada:	1813      	adds	r3, r2, r0
 8011adc:	2a01      	cmp	r2, #1
 8011ade:	4681      	mov	r9, r0
 8011ae0:	6123      	str	r3, [r4, #16]
 8011ae2:	dc02      	bgt.n	8011aea <_printf_float+0x14e>
 8011ae4:	6822      	ldr	r2, [r4, #0]
 8011ae6:	07d1      	lsls	r1, r2, #31
 8011ae8:	d501      	bpl.n	8011aee <_printf_float+0x152>
 8011aea:	3301      	adds	r3, #1
 8011aec:	6123      	str	r3, [r4, #16]
 8011aee:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d0a5      	beq.n	8011a42 <_printf_float+0xa6>
 8011af6:	232d      	movs	r3, #45	; 0x2d
 8011af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011afc:	e7a1      	b.n	8011a42 <_printf_float+0xa6>
 8011afe:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8011b02:	f000 8177 	beq.w	8011df4 <_printf_float+0x458>
 8011b06:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011b0a:	d1bb      	bne.n	8011a84 <_printf_float+0xe8>
 8011b0c:	2900      	cmp	r1, #0
 8011b0e:	d1b9      	bne.n	8011a84 <_printf_float+0xe8>
 8011b10:	2301      	movs	r3, #1
 8011b12:	e7b6      	b.n	8011a82 <_printf_float+0xe6>
 8011b14:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8011b18:	d119      	bne.n	8011b4e <_printf_float+0x1b2>
 8011b1a:	2900      	cmp	r1, #0
 8011b1c:	6863      	ldr	r3, [r4, #4]
 8011b1e:	dd0c      	ble.n	8011b3a <_printf_float+0x19e>
 8011b20:	6121      	str	r1, [r4, #16]
 8011b22:	b913      	cbnz	r3, 8011b2a <_printf_float+0x18e>
 8011b24:	6822      	ldr	r2, [r4, #0]
 8011b26:	07d2      	lsls	r2, r2, #31
 8011b28:	d502      	bpl.n	8011b30 <_printf_float+0x194>
 8011b2a:	3301      	adds	r3, #1
 8011b2c:	440b      	add	r3, r1
 8011b2e:	6123      	str	r3, [r4, #16]
 8011b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b32:	65a3      	str	r3, [r4, #88]	; 0x58
 8011b34:	f04f 0900 	mov.w	r9, #0
 8011b38:	e7d9      	b.n	8011aee <_printf_float+0x152>
 8011b3a:	b913      	cbnz	r3, 8011b42 <_printf_float+0x1a6>
 8011b3c:	6822      	ldr	r2, [r4, #0]
 8011b3e:	07d0      	lsls	r0, r2, #31
 8011b40:	d501      	bpl.n	8011b46 <_printf_float+0x1aa>
 8011b42:	3302      	adds	r3, #2
 8011b44:	e7f3      	b.n	8011b2e <_printf_float+0x192>
 8011b46:	2301      	movs	r3, #1
 8011b48:	e7f1      	b.n	8011b2e <_printf_float+0x192>
 8011b4a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8011b4e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011b52:	4293      	cmp	r3, r2
 8011b54:	db05      	blt.n	8011b62 <_printf_float+0x1c6>
 8011b56:	6822      	ldr	r2, [r4, #0]
 8011b58:	6123      	str	r3, [r4, #16]
 8011b5a:	07d1      	lsls	r1, r2, #31
 8011b5c:	d5e8      	bpl.n	8011b30 <_printf_float+0x194>
 8011b5e:	3301      	adds	r3, #1
 8011b60:	e7e5      	b.n	8011b2e <_printf_float+0x192>
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	bfd4      	ite	le
 8011b66:	f1c3 0302 	rsble	r3, r3, #2
 8011b6a:	2301      	movgt	r3, #1
 8011b6c:	4413      	add	r3, r2
 8011b6e:	e7de      	b.n	8011b2e <_printf_float+0x192>
 8011b70:	6823      	ldr	r3, [r4, #0]
 8011b72:	055a      	lsls	r2, r3, #21
 8011b74:	d407      	bmi.n	8011b86 <_printf_float+0x1ea>
 8011b76:	6923      	ldr	r3, [r4, #16]
 8011b78:	4642      	mov	r2, r8
 8011b7a:	4631      	mov	r1, r6
 8011b7c:	4628      	mov	r0, r5
 8011b7e:	47b8      	blx	r7
 8011b80:	3001      	adds	r0, #1
 8011b82:	d12b      	bne.n	8011bdc <_printf_float+0x240>
 8011b84:	e767      	b.n	8011a56 <_printf_float+0xba>
 8011b86:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011b8a:	f240 80dc 	bls.w	8011d46 <_printf_float+0x3aa>
 8011b8e:	2200      	movs	r2, #0
 8011b90:	2300      	movs	r3, #0
 8011b92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011b96:	f7f6 fecf 	bl	8008938 <__aeabi_dcmpeq>
 8011b9a:	2800      	cmp	r0, #0
 8011b9c:	d033      	beq.n	8011c06 <_printf_float+0x26a>
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	4a41      	ldr	r2, [pc, #260]	; (8011ca8 <_printf_float+0x30c>)
 8011ba2:	4631      	mov	r1, r6
 8011ba4:	4628      	mov	r0, r5
 8011ba6:	47b8      	blx	r7
 8011ba8:	3001      	adds	r0, #1
 8011baa:	f43f af54 	beq.w	8011a56 <_printf_float+0xba>
 8011bae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	db02      	blt.n	8011bbc <_printf_float+0x220>
 8011bb6:	6823      	ldr	r3, [r4, #0]
 8011bb8:	07d8      	lsls	r0, r3, #31
 8011bba:	d50f      	bpl.n	8011bdc <_printf_float+0x240>
 8011bbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011bc0:	4631      	mov	r1, r6
 8011bc2:	4628      	mov	r0, r5
 8011bc4:	47b8      	blx	r7
 8011bc6:	3001      	adds	r0, #1
 8011bc8:	f43f af45 	beq.w	8011a56 <_printf_float+0xba>
 8011bcc:	f04f 0800 	mov.w	r8, #0
 8011bd0:	f104 091a 	add.w	r9, r4, #26
 8011bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bd6:	3b01      	subs	r3, #1
 8011bd8:	4543      	cmp	r3, r8
 8011bda:	dc09      	bgt.n	8011bf0 <_printf_float+0x254>
 8011bdc:	6823      	ldr	r3, [r4, #0]
 8011bde:	079b      	lsls	r3, r3, #30
 8011be0:	f100 8103 	bmi.w	8011dea <_printf_float+0x44e>
 8011be4:	68e0      	ldr	r0, [r4, #12]
 8011be6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011be8:	4298      	cmp	r0, r3
 8011bea:	bfb8      	it	lt
 8011bec:	4618      	movlt	r0, r3
 8011bee:	e734      	b.n	8011a5a <_printf_float+0xbe>
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	464a      	mov	r2, r9
 8011bf4:	4631      	mov	r1, r6
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	47b8      	blx	r7
 8011bfa:	3001      	adds	r0, #1
 8011bfc:	f43f af2b 	beq.w	8011a56 <_printf_float+0xba>
 8011c00:	f108 0801 	add.w	r8, r8, #1
 8011c04:	e7e6      	b.n	8011bd4 <_printf_float+0x238>
 8011c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	dc2b      	bgt.n	8011c64 <_printf_float+0x2c8>
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	4a26      	ldr	r2, [pc, #152]	; (8011ca8 <_printf_float+0x30c>)
 8011c10:	4631      	mov	r1, r6
 8011c12:	4628      	mov	r0, r5
 8011c14:	47b8      	blx	r7
 8011c16:	3001      	adds	r0, #1
 8011c18:	f43f af1d 	beq.w	8011a56 <_printf_float+0xba>
 8011c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c1e:	b923      	cbnz	r3, 8011c2a <_printf_float+0x28e>
 8011c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c22:	b913      	cbnz	r3, 8011c2a <_printf_float+0x28e>
 8011c24:	6823      	ldr	r3, [r4, #0]
 8011c26:	07d9      	lsls	r1, r3, #31
 8011c28:	d5d8      	bpl.n	8011bdc <_printf_float+0x240>
 8011c2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c2e:	4631      	mov	r1, r6
 8011c30:	4628      	mov	r0, r5
 8011c32:	47b8      	blx	r7
 8011c34:	3001      	adds	r0, #1
 8011c36:	f43f af0e 	beq.w	8011a56 <_printf_float+0xba>
 8011c3a:	f04f 0900 	mov.w	r9, #0
 8011c3e:	f104 0a1a 	add.w	sl, r4, #26
 8011c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c44:	425b      	negs	r3, r3
 8011c46:	454b      	cmp	r3, r9
 8011c48:	dc01      	bgt.n	8011c4e <_printf_float+0x2b2>
 8011c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c4c:	e794      	b.n	8011b78 <_printf_float+0x1dc>
 8011c4e:	2301      	movs	r3, #1
 8011c50:	4652      	mov	r2, sl
 8011c52:	4631      	mov	r1, r6
 8011c54:	4628      	mov	r0, r5
 8011c56:	47b8      	blx	r7
 8011c58:	3001      	adds	r0, #1
 8011c5a:	f43f aefc 	beq.w	8011a56 <_printf_float+0xba>
 8011c5e:	f109 0901 	add.w	r9, r9, #1
 8011c62:	e7ee      	b.n	8011c42 <_printf_float+0x2a6>
 8011c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	bfa8      	it	ge
 8011c6c:	461a      	movge	r2, r3
 8011c6e:	2a00      	cmp	r2, #0
 8011c70:	4691      	mov	r9, r2
 8011c72:	dd07      	ble.n	8011c84 <_printf_float+0x2e8>
 8011c74:	4613      	mov	r3, r2
 8011c76:	4631      	mov	r1, r6
 8011c78:	4642      	mov	r2, r8
 8011c7a:	4628      	mov	r0, r5
 8011c7c:	47b8      	blx	r7
 8011c7e:	3001      	adds	r0, #1
 8011c80:	f43f aee9 	beq.w	8011a56 <_printf_float+0xba>
 8011c84:	f104 031a 	add.w	r3, r4, #26
 8011c88:	f04f 0b00 	mov.w	fp, #0
 8011c8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c90:	9306      	str	r3, [sp, #24]
 8011c92:	e015      	b.n	8011cc0 <_printf_float+0x324>
 8011c94:	7fefffff 	.word	0x7fefffff
 8011c98:	08014060 	.word	0x08014060
 8011c9c:	0801405c 	.word	0x0801405c
 8011ca0:	08014068 	.word	0x08014068
 8011ca4:	08014064 	.word	0x08014064
 8011ca8:	0801406c 	.word	0x0801406c
 8011cac:	2301      	movs	r3, #1
 8011cae:	9a06      	ldr	r2, [sp, #24]
 8011cb0:	4631      	mov	r1, r6
 8011cb2:	4628      	mov	r0, r5
 8011cb4:	47b8      	blx	r7
 8011cb6:	3001      	adds	r0, #1
 8011cb8:	f43f aecd 	beq.w	8011a56 <_printf_float+0xba>
 8011cbc:	f10b 0b01 	add.w	fp, fp, #1
 8011cc0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011cc4:	ebaa 0309 	sub.w	r3, sl, r9
 8011cc8:	455b      	cmp	r3, fp
 8011cca:	dcef      	bgt.n	8011cac <_printf_float+0x310>
 8011ccc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	44d0      	add	r8, sl
 8011cd4:	db15      	blt.n	8011d02 <_printf_float+0x366>
 8011cd6:	6823      	ldr	r3, [r4, #0]
 8011cd8:	07da      	lsls	r2, r3, #31
 8011cda:	d412      	bmi.n	8011d02 <_printf_float+0x366>
 8011cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ce0:	eba3 020a 	sub.w	r2, r3, sl
 8011ce4:	eba3 0a01 	sub.w	sl, r3, r1
 8011ce8:	4592      	cmp	sl, r2
 8011cea:	bfa8      	it	ge
 8011cec:	4692      	movge	sl, r2
 8011cee:	f1ba 0f00 	cmp.w	sl, #0
 8011cf2:	dc0e      	bgt.n	8011d12 <_printf_float+0x376>
 8011cf4:	f04f 0800 	mov.w	r8, #0
 8011cf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011cfc:	f104 091a 	add.w	r9, r4, #26
 8011d00:	e019      	b.n	8011d36 <_printf_float+0x39a>
 8011d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d06:	4631      	mov	r1, r6
 8011d08:	4628      	mov	r0, r5
 8011d0a:	47b8      	blx	r7
 8011d0c:	3001      	adds	r0, #1
 8011d0e:	d1e5      	bne.n	8011cdc <_printf_float+0x340>
 8011d10:	e6a1      	b.n	8011a56 <_printf_float+0xba>
 8011d12:	4653      	mov	r3, sl
 8011d14:	4642      	mov	r2, r8
 8011d16:	4631      	mov	r1, r6
 8011d18:	4628      	mov	r0, r5
 8011d1a:	47b8      	blx	r7
 8011d1c:	3001      	adds	r0, #1
 8011d1e:	d1e9      	bne.n	8011cf4 <_printf_float+0x358>
 8011d20:	e699      	b.n	8011a56 <_printf_float+0xba>
 8011d22:	2301      	movs	r3, #1
 8011d24:	464a      	mov	r2, r9
 8011d26:	4631      	mov	r1, r6
 8011d28:	4628      	mov	r0, r5
 8011d2a:	47b8      	blx	r7
 8011d2c:	3001      	adds	r0, #1
 8011d2e:	f43f ae92 	beq.w	8011a56 <_printf_float+0xba>
 8011d32:	f108 0801 	add.w	r8, r8, #1
 8011d36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d3a:	1a9b      	subs	r3, r3, r2
 8011d3c:	eba3 030a 	sub.w	r3, r3, sl
 8011d40:	4543      	cmp	r3, r8
 8011d42:	dcee      	bgt.n	8011d22 <_printf_float+0x386>
 8011d44:	e74a      	b.n	8011bdc <_printf_float+0x240>
 8011d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d48:	2a01      	cmp	r2, #1
 8011d4a:	dc01      	bgt.n	8011d50 <_printf_float+0x3b4>
 8011d4c:	07db      	lsls	r3, r3, #31
 8011d4e:	d53a      	bpl.n	8011dc6 <_printf_float+0x42a>
 8011d50:	2301      	movs	r3, #1
 8011d52:	4642      	mov	r2, r8
 8011d54:	4631      	mov	r1, r6
 8011d56:	4628      	mov	r0, r5
 8011d58:	47b8      	blx	r7
 8011d5a:	3001      	adds	r0, #1
 8011d5c:	f43f ae7b 	beq.w	8011a56 <_printf_float+0xba>
 8011d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d64:	4631      	mov	r1, r6
 8011d66:	4628      	mov	r0, r5
 8011d68:	47b8      	blx	r7
 8011d6a:	3001      	adds	r0, #1
 8011d6c:	f108 0801 	add.w	r8, r8, #1
 8011d70:	f43f ae71 	beq.w	8011a56 <_printf_float+0xba>
 8011d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d76:	2200      	movs	r2, #0
 8011d78:	f103 3aff 	add.w	sl, r3, #4294967295
 8011d7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011d80:	2300      	movs	r3, #0
 8011d82:	f7f6 fdd9 	bl	8008938 <__aeabi_dcmpeq>
 8011d86:	b9c8      	cbnz	r0, 8011dbc <_printf_float+0x420>
 8011d88:	4653      	mov	r3, sl
 8011d8a:	4642      	mov	r2, r8
 8011d8c:	4631      	mov	r1, r6
 8011d8e:	4628      	mov	r0, r5
 8011d90:	47b8      	blx	r7
 8011d92:	3001      	adds	r0, #1
 8011d94:	d10e      	bne.n	8011db4 <_printf_float+0x418>
 8011d96:	e65e      	b.n	8011a56 <_printf_float+0xba>
 8011d98:	2301      	movs	r3, #1
 8011d9a:	4652      	mov	r2, sl
 8011d9c:	4631      	mov	r1, r6
 8011d9e:	4628      	mov	r0, r5
 8011da0:	47b8      	blx	r7
 8011da2:	3001      	adds	r0, #1
 8011da4:	f43f ae57 	beq.w	8011a56 <_printf_float+0xba>
 8011da8:	f108 0801 	add.w	r8, r8, #1
 8011dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dae:	3b01      	subs	r3, #1
 8011db0:	4543      	cmp	r3, r8
 8011db2:	dcf1      	bgt.n	8011d98 <_printf_float+0x3fc>
 8011db4:	464b      	mov	r3, r9
 8011db6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011dba:	e6de      	b.n	8011b7a <_printf_float+0x1de>
 8011dbc:	f04f 0800 	mov.w	r8, #0
 8011dc0:	f104 0a1a 	add.w	sl, r4, #26
 8011dc4:	e7f2      	b.n	8011dac <_printf_float+0x410>
 8011dc6:	2301      	movs	r3, #1
 8011dc8:	e7df      	b.n	8011d8a <_printf_float+0x3ee>
 8011dca:	2301      	movs	r3, #1
 8011dcc:	464a      	mov	r2, r9
 8011dce:	4631      	mov	r1, r6
 8011dd0:	4628      	mov	r0, r5
 8011dd2:	47b8      	blx	r7
 8011dd4:	3001      	adds	r0, #1
 8011dd6:	f43f ae3e 	beq.w	8011a56 <_printf_float+0xba>
 8011dda:	f108 0801 	add.w	r8, r8, #1
 8011dde:	68e3      	ldr	r3, [r4, #12]
 8011de0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011de2:	1a9b      	subs	r3, r3, r2
 8011de4:	4543      	cmp	r3, r8
 8011de6:	dcf0      	bgt.n	8011dca <_printf_float+0x42e>
 8011de8:	e6fc      	b.n	8011be4 <_printf_float+0x248>
 8011dea:	f04f 0800 	mov.w	r8, #0
 8011dee:	f104 0919 	add.w	r9, r4, #25
 8011df2:	e7f4      	b.n	8011dde <_printf_float+0x442>
 8011df4:	2900      	cmp	r1, #0
 8011df6:	f43f ae8b 	beq.w	8011b10 <_printf_float+0x174>
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011e00:	ab09      	add	r3, sp, #36	; 0x24
 8011e02:	9300      	str	r3, [sp, #0]
 8011e04:	ec49 8b10 	vmov	d0, r8, r9
 8011e08:	6022      	str	r2, [r4, #0]
 8011e0a:	f8cd a004 	str.w	sl, [sp, #4]
 8011e0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011e12:	4628      	mov	r0, r5
 8011e14:	f7ff fd2d 	bl	8011872 <__cvt>
 8011e18:	4680      	mov	r8, r0
 8011e1a:	e648      	b.n	8011aae <_printf_float+0x112>

08011e1c <_printf_common>:
 8011e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e20:	4691      	mov	r9, r2
 8011e22:	461f      	mov	r7, r3
 8011e24:	688a      	ldr	r2, [r1, #8]
 8011e26:	690b      	ldr	r3, [r1, #16]
 8011e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	bfb8      	it	lt
 8011e30:	4613      	movlt	r3, r2
 8011e32:	f8c9 3000 	str.w	r3, [r9]
 8011e36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e3a:	4606      	mov	r6, r0
 8011e3c:	460c      	mov	r4, r1
 8011e3e:	b112      	cbz	r2, 8011e46 <_printf_common+0x2a>
 8011e40:	3301      	adds	r3, #1
 8011e42:	f8c9 3000 	str.w	r3, [r9]
 8011e46:	6823      	ldr	r3, [r4, #0]
 8011e48:	0699      	lsls	r1, r3, #26
 8011e4a:	bf42      	ittt	mi
 8011e4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011e50:	3302      	addmi	r3, #2
 8011e52:	f8c9 3000 	strmi.w	r3, [r9]
 8011e56:	6825      	ldr	r5, [r4, #0]
 8011e58:	f015 0506 	ands.w	r5, r5, #6
 8011e5c:	d107      	bne.n	8011e6e <_printf_common+0x52>
 8011e5e:	f104 0a19 	add.w	sl, r4, #25
 8011e62:	68e3      	ldr	r3, [r4, #12]
 8011e64:	f8d9 2000 	ldr.w	r2, [r9]
 8011e68:	1a9b      	subs	r3, r3, r2
 8011e6a:	42ab      	cmp	r3, r5
 8011e6c:	dc28      	bgt.n	8011ec0 <_printf_common+0xa4>
 8011e6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011e72:	6822      	ldr	r2, [r4, #0]
 8011e74:	3300      	adds	r3, #0
 8011e76:	bf18      	it	ne
 8011e78:	2301      	movne	r3, #1
 8011e7a:	0692      	lsls	r2, r2, #26
 8011e7c:	d42d      	bmi.n	8011eda <_printf_common+0xbe>
 8011e7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e82:	4639      	mov	r1, r7
 8011e84:	4630      	mov	r0, r6
 8011e86:	47c0      	blx	r8
 8011e88:	3001      	adds	r0, #1
 8011e8a:	d020      	beq.n	8011ece <_printf_common+0xb2>
 8011e8c:	6823      	ldr	r3, [r4, #0]
 8011e8e:	68e5      	ldr	r5, [r4, #12]
 8011e90:	f8d9 2000 	ldr.w	r2, [r9]
 8011e94:	f003 0306 	and.w	r3, r3, #6
 8011e98:	2b04      	cmp	r3, #4
 8011e9a:	bf08      	it	eq
 8011e9c:	1aad      	subeq	r5, r5, r2
 8011e9e:	68a3      	ldr	r3, [r4, #8]
 8011ea0:	6922      	ldr	r2, [r4, #16]
 8011ea2:	bf0c      	ite	eq
 8011ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ea8:	2500      	movne	r5, #0
 8011eaa:	4293      	cmp	r3, r2
 8011eac:	bfc4      	itt	gt
 8011eae:	1a9b      	subgt	r3, r3, r2
 8011eb0:	18ed      	addgt	r5, r5, r3
 8011eb2:	f04f 0900 	mov.w	r9, #0
 8011eb6:	341a      	adds	r4, #26
 8011eb8:	454d      	cmp	r5, r9
 8011eba:	d11a      	bne.n	8011ef2 <_printf_common+0xd6>
 8011ebc:	2000      	movs	r0, #0
 8011ebe:	e008      	b.n	8011ed2 <_printf_common+0xb6>
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	4652      	mov	r2, sl
 8011ec4:	4639      	mov	r1, r7
 8011ec6:	4630      	mov	r0, r6
 8011ec8:	47c0      	blx	r8
 8011eca:	3001      	adds	r0, #1
 8011ecc:	d103      	bne.n	8011ed6 <_printf_common+0xba>
 8011ece:	f04f 30ff 	mov.w	r0, #4294967295
 8011ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ed6:	3501      	adds	r5, #1
 8011ed8:	e7c3      	b.n	8011e62 <_printf_common+0x46>
 8011eda:	18e1      	adds	r1, r4, r3
 8011edc:	1c5a      	adds	r2, r3, #1
 8011ede:	2030      	movs	r0, #48	; 0x30
 8011ee0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011ee4:	4422      	add	r2, r4
 8011ee6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011eea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011eee:	3302      	adds	r3, #2
 8011ef0:	e7c5      	b.n	8011e7e <_printf_common+0x62>
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	4622      	mov	r2, r4
 8011ef6:	4639      	mov	r1, r7
 8011ef8:	4630      	mov	r0, r6
 8011efa:	47c0      	blx	r8
 8011efc:	3001      	adds	r0, #1
 8011efe:	d0e6      	beq.n	8011ece <_printf_common+0xb2>
 8011f00:	f109 0901 	add.w	r9, r9, #1
 8011f04:	e7d8      	b.n	8011eb8 <_printf_common+0x9c>
	...

08011f08 <_printf_i>:
 8011f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f0c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011f10:	460c      	mov	r4, r1
 8011f12:	7e09      	ldrb	r1, [r1, #24]
 8011f14:	b085      	sub	sp, #20
 8011f16:	296e      	cmp	r1, #110	; 0x6e
 8011f18:	4617      	mov	r7, r2
 8011f1a:	4606      	mov	r6, r0
 8011f1c:	4698      	mov	r8, r3
 8011f1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011f20:	f000 80b3 	beq.w	801208a <_printf_i+0x182>
 8011f24:	d822      	bhi.n	8011f6c <_printf_i+0x64>
 8011f26:	2963      	cmp	r1, #99	; 0x63
 8011f28:	d036      	beq.n	8011f98 <_printf_i+0x90>
 8011f2a:	d80a      	bhi.n	8011f42 <_printf_i+0x3a>
 8011f2c:	2900      	cmp	r1, #0
 8011f2e:	f000 80b9 	beq.w	80120a4 <_printf_i+0x19c>
 8011f32:	2958      	cmp	r1, #88	; 0x58
 8011f34:	f000 8083 	beq.w	801203e <_printf_i+0x136>
 8011f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f3c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011f40:	e032      	b.n	8011fa8 <_printf_i+0xa0>
 8011f42:	2964      	cmp	r1, #100	; 0x64
 8011f44:	d001      	beq.n	8011f4a <_printf_i+0x42>
 8011f46:	2969      	cmp	r1, #105	; 0x69
 8011f48:	d1f6      	bne.n	8011f38 <_printf_i+0x30>
 8011f4a:	6820      	ldr	r0, [r4, #0]
 8011f4c:	6813      	ldr	r3, [r2, #0]
 8011f4e:	0605      	lsls	r5, r0, #24
 8011f50:	f103 0104 	add.w	r1, r3, #4
 8011f54:	d52a      	bpl.n	8011fac <_printf_i+0xa4>
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	6011      	str	r1, [r2, #0]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	da03      	bge.n	8011f66 <_printf_i+0x5e>
 8011f5e:	222d      	movs	r2, #45	; 0x2d
 8011f60:	425b      	negs	r3, r3
 8011f62:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011f66:	486f      	ldr	r0, [pc, #444]	; (8012124 <_printf_i+0x21c>)
 8011f68:	220a      	movs	r2, #10
 8011f6a:	e039      	b.n	8011fe0 <_printf_i+0xd8>
 8011f6c:	2973      	cmp	r1, #115	; 0x73
 8011f6e:	f000 809d 	beq.w	80120ac <_printf_i+0x1a4>
 8011f72:	d808      	bhi.n	8011f86 <_printf_i+0x7e>
 8011f74:	296f      	cmp	r1, #111	; 0x6f
 8011f76:	d020      	beq.n	8011fba <_printf_i+0xb2>
 8011f78:	2970      	cmp	r1, #112	; 0x70
 8011f7a:	d1dd      	bne.n	8011f38 <_printf_i+0x30>
 8011f7c:	6823      	ldr	r3, [r4, #0]
 8011f7e:	f043 0320 	orr.w	r3, r3, #32
 8011f82:	6023      	str	r3, [r4, #0]
 8011f84:	e003      	b.n	8011f8e <_printf_i+0x86>
 8011f86:	2975      	cmp	r1, #117	; 0x75
 8011f88:	d017      	beq.n	8011fba <_printf_i+0xb2>
 8011f8a:	2978      	cmp	r1, #120	; 0x78
 8011f8c:	d1d4      	bne.n	8011f38 <_printf_i+0x30>
 8011f8e:	2378      	movs	r3, #120	; 0x78
 8011f90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011f94:	4864      	ldr	r0, [pc, #400]	; (8012128 <_printf_i+0x220>)
 8011f96:	e055      	b.n	8012044 <_printf_i+0x13c>
 8011f98:	6813      	ldr	r3, [r2, #0]
 8011f9a:	1d19      	adds	r1, r3, #4
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	6011      	str	r1, [r2, #0]
 8011fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011fa8:	2301      	movs	r3, #1
 8011faa:	e08c      	b.n	80120c6 <_printf_i+0x1be>
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	6011      	str	r1, [r2, #0]
 8011fb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011fb4:	bf18      	it	ne
 8011fb6:	b21b      	sxthne	r3, r3
 8011fb8:	e7cf      	b.n	8011f5a <_printf_i+0x52>
 8011fba:	6813      	ldr	r3, [r2, #0]
 8011fbc:	6825      	ldr	r5, [r4, #0]
 8011fbe:	1d18      	adds	r0, r3, #4
 8011fc0:	6010      	str	r0, [r2, #0]
 8011fc2:	0628      	lsls	r0, r5, #24
 8011fc4:	d501      	bpl.n	8011fca <_printf_i+0xc2>
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	e002      	b.n	8011fd0 <_printf_i+0xc8>
 8011fca:	0668      	lsls	r0, r5, #25
 8011fcc:	d5fb      	bpl.n	8011fc6 <_printf_i+0xbe>
 8011fce:	881b      	ldrh	r3, [r3, #0]
 8011fd0:	4854      	ldr	r0, [pc, #336]	; (8012124 <_printf_i+0x21c>)
 8011fd2:	296f      	cmp	r1, #111	; 0x6f
 8011fd4:	bf14      	ite	ne
 8011fd6:	220a      	movne	r2, #10
 8011fd8:	2208      	moveq	r2, #8
 8011fda:	2100      	movs	r1, #0
 8011fdc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011fe0:	6865      	ldr	r5, [r4, #4]
 8011fe2:	60a5      	str	r5, [r4, #8]
 8011fe4:	2d00      	cmp	r5, #0
 8011fe6:	f2c0 8095 	blt.w	8012114 <_printf_i+0x20c>
 8011fea:	6821      	ldr	r1, [r4, #0]
 8011fec:	f021 0104 	bic.w	r1, r1, #4
 8011ff0:	6021      	str	r1, [r4, #0]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d13d      	bne.n	8012072 <_printf_i+0x16a>
 8011ff6:	2d00      	cmp	r5, #0
 8011ff8:	f040 808e 	bne.w	8012118 <_printf_i+0x210>
 8011ffc:	4665      	mov	r5, ip
 8011ffe:	2a08      	cmp	r2, #8
 8012000:	d10b      	bne.n	801201a <_printf_i+0x112>
 8012002:	6823      	ldr	r3, [r4, #0]
 8012004:	07db      	lsls	r3, r3, #31
 8012006:	d508      	bpl.n	801201a <_printf_i+0x112>
 8012008:	6923      	ldr	r3, [r4, #16]
 801200a:	6862      	ldr	r2, [r4, #4]
 801200c:	429a      	cmp	r2, r3
 801200e:	bfde      	ittt	le
 8012010:	2330      	movle	r3, #48	; 0x30
 8012012:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012016:	f105 35ff 	addle.w	r5, r5, #4294967295
 801201a:	ebac 0305 	sub.w	r3, ip, r5
 801201e:	6123      	str	r3, [r4, #16]
 8012020:	f8cd 8000 	str.w	r8, [sp]
 8012024:	463b      	mov	r3, r7
 8012026:	aa03      	add	r2, sp, #12
 8012028:	4621      	mov	r1, r4
 801202a:	4630      	mov	r0, r6
 801202c:	f7ff fef6 	bl	8011e1c <_printf_common>
 8012030:	3001      	adds	r0, #1
 8012032:	d14d      	bne.n	80120d0 <_printf_i+0x1c8>
 8012034:	f04f 30ff 	mov.w	r0, #4294967295
 8012038:	b005      	add	sp, #20
 801203a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801203e:	4839      	ldr	r0, [pc, #228]	; (8012124 <_printf_i+0x21c>)
 8012040:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012044:	6813      	ldr	r3, [r2, #0]
 8012046:	6821      	ldr	r1, [r4, #0]
 8012048:	1d1d      	adds	r5, r3, #4
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	6015      	str	r5, [r2, #0]
 801204e:	060a      	lsls	r2, r1, #24
 8012050:	d50b      	bpl.n	801206a <_printf_i+0x162>
 8012052:	07ca      	lsls	r2, r1, #31
 8012054:	bf44      	itt	mi
 8012056:	f041 0120 	orrmi.w	r1, r1, #32
 801205a:	6021      	strmi	r1, [r4, #0]
 801205c:	b91b      	cbnz	r3, 8012066 <_printf_i+0x15e>
 801205e:	6822      	ldr	r2, [r4, #0]
 8012060:	f022 0220 	bic.w	r2, r2, #32
 8012064:	6022      	str	r2, [r4, #0]
 8012066:	2210      	movs	r2, #16
 8012068:	e7b7      	b.n	8011fda <_printf_i+0xd2>
 801206a:	064d      	lsls	r5, r1, #25
 801206c:	bf48      	it	mi
 801206e:	b29b      	uxthmi	r3, r3
 8012070:	e7ef      	b.n	8012052 <_printf_i+0x14a>
 8012072:	4665      	mov	r5, ip
 8012074:	fbb3 f1f2 	udiv	r1, r3, r2
 8012078:	fb02 3311 	mls	r3, r2, r1, r3
 801207c:	5cc3      	ldrb	r3, [r0, r3]
 801207e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012082:	460b      	mov	r3, r1
 8012084:	2900      	cmp	r1, #0
 8012086:	d1f5      	bne.n	8012074 <_printf_i+0x16c>
 8012088:	e7b9      	b.n	8011ffe <_printf_i+0xf6>
 801208a:	6813      	ldr	r3, [r2, #0]
 801208c:	6825      	ldr	r5, [r4, #0]
 801208e:	6961      	ldr	r1, [r4, #20]
 8012090:	1d18      	adds	r0, r3, #4
 8012092:	6010      	str	r0, [r2, #0]
 8012094:	0628      	lsls	r0, r5, #24
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	d501      	bpl.n	801209e <_printf_i+0x196>
 801209a:	6019      	str	r1, [r3, #0]
 801209c:	e002      	b.n	80120a4 <_printf_i+0x19c>
 801209e:	066a      	lsls	r2, r5, #25
 80120a0:	d5fb      	bpl.n	801209a <_printf_i+0x192>
 80120a2:	8019      	strh	r1, [r3, #0]
 80120a4:	2300      	movs	r3, #0
 80120a6:	6123      	str	r3, [r4, #16]
 80120a8:	4665      	mov	r5, ip
 80120aa:	e7b9      	b.n	8012020 <_printf_i+0x118>
 80120ac:	6813      	ldr	r3, [r2, #0]
 80120ae:	1d19      	adds	r1, r3, #4
 80120b0:	6011      	str	r1, [r2, #0]
 80120b2:	681d      	ldr	r5, [r3, #0]
 80120b4:	6862      	ldr	r2, [r4, #4]
 80120b6:	2100      	movs	r1, #0
 80120b8:	4628      	mov	r0, r5
 80120ba:	f7f5 ffc9 	bl	8008050 <memchr>
 80120be:	b108      	cbz	r0, 80120c4 <_printf_i+0x1bc>
 80120c0:	1b40      	subs	r0, r0, r5
 80120c2:	6060      	str	r0, [r4, #4]
 80120c4:	6863      	ldr	r3, [r4, #4]
 80120c6:	6123      	str	r3, [r4, #16]
 80120c8:	2300      	movs	r3, #0
 80120ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120ce:	e7a7      	b.n	8012020 <_printf_i+0x118>
 80120d0:	6923      	ldr	r3, [r4, #16]
 80120d2:	462a      	mov	r2, r5
 80120d4:	4639      	mov	r1, r7
 80120d6:	4630      	mov	r0, r6
 80120d8:	47c0      	blx	r8
 80120da:	3001      	adds	r0, #1
 80120dc:	d0aa      	beq.n	8012034 <_printf_i+0x12c>
 80120de:	6823      	ldr	r3, [r4, #0]
 80120e0:	079b      	lsls	r3, r3, #30
 80120e2:	d413      	bmi.n	801210c <_printf_i+0x204>
 80120e4:	68e0      	ldr	r0, [r4, #12]
 80120e6:	9b03      	ldr	r3, [sp, #12]
 80120e8:	4298      	cmp	r0, r3
 80120ea:	bfb8      	it	lt
 80120ec:	4618      	movlt	r0, r3
 80120ee:	e7a3      	b.n	8012038 <_printf_i+0x130>
 80120f0:	2301      	movs	r3, #1
 80120f2:	464a      	mov	r2, r9
 80120f4:	4639      	mov	r1, r7
 80120f6:	4630      	mov	r0, r6
 80120f8:	47c0      	blx	r8
 80120fa:	3001      	adds	r0, #1
 80120fc:	d09a      	beq.n	8012034 <_printf_i+0x12c>
 80120fe:	3501      	adds	r5, #1
 8012100:	68e3      	ldr	r3, [r4, #12]
 8012102:	9a03      	ldr	r2, [sp, #12]
 8012104:	1a9b      	subs	r3, r3, r2
 8012106:	42ab      	cmp	r3, r5
 8012108:	dcf2      	bgt.n	80120f0 <_printf_i+0x1e8>
 801210a:	e7eb      	b.n	80120e4 <_printf_i+0x1dc>
 801210c:	2500      	movs	r5, #0
 801210e:	f104 0919 	add.w	r9, r4, #25
 8012112:	e7f5      	b.n	8012100 <_printf_i+0x1f8>
 8012114:	2b00      	cmp	r3, #0
 8012116:	d1ac      	bne.n	8012072 <_printf_i+0x16a>
 8012118:	7803      	ldrb	r3, [r0, #0]
 801211a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801211e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012122:	e76c      	b.n	8011ffe <_printf_i+0xf6>
 8012124:	0801406e 	.word	0x0801406e
 8012128:	0801407f 	.word	0x0801407f

0801212c <iprintf>:
 801212c:	b40f      	push	{r0, r1, r2, r3}
 801212e:	4b0a      	ldr	r3, [pc, #40]	; (8012158 <iprintf+0x2c>)
 8012130:	b513      	push	{r0, r1, r4, lr}
 8012132:	681c      	ldr	r4, [r3, #0]
 8012134:	b124      	cbz	r4, 8012140 <iprintf+0x14>
 8012136:	69a3      	ldr	r3, [r4, #24]
 8012138:	b913      	cbnz	r3, 8012140 <iprintf+0x14>
 801213a:	4620      	mov	r0, r4
 801213c:	f001 f868 	bl	8013210 <__sinit>
 8012140:	ab05      	add	r3, sp, #20
 8012142:	9a04      	ldr	r2, [sp, #16]
 8012144:	68a1      	ldr	r1, [r4, #8]
 8012146:	9301      	str	r3, [sp, #4]
 8012148:	4620      	mov	r0, r4
 801214a:	f001 fd21 	bl	8013b90 <_vfiprintf_r>
 801214e:	b002      	add	sp, #8
 8012150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012154:	b004      	add	sp, #16
 8012156:	4770      	bx	lr
 8012158:	20000010 	.word	0x20000010

0801215c <_puts_r>:
 801215c:	b570      	push	{r4, r5, r6, lr}
 801215e:	460e      	mov	r6, r1
 8012160:	4605      	mov	r5, r0
 8012162:	b118      	cbz	r0, 801216c <_puts_r+0x10>
 8012164:	6983      	ldr	r3, [r0, #24]
 8012166:	b90b      	cbnz	r3, 801216c <_puts_r+0x10>
 8012168:	f001 f852 	bl	8013210 <__sinit>
 801216c:	69ab      	ldr	r3, [r5, #24]
 801216e:	68ac      	ldr	r4, [r5, #8]
 8012170:	b913      	cbnz	r3, 8012178 <_puts_r+0x1c>
 8012172:	4628      	mov	r0, r5
 8012174:	f001 f84c 	bl	8013210 <__sinit>
 8012178:	4b23      	ldr	r3, [pc, #140]	; (8012208 <_puts_r+0xac>)
 801217a:	429c      	cmp	r4, r3
 801217c:	d117      	bne.n	80121ae <_puts_r+0x52>
 801217e:	686c      	ldr	r4, [r5, #4]
 8012180:	89a3      	ldrh	r3, [r4, #12]
 8012182:	071b      	lsls	r3, r3, #28
 8012184:	d51d      	bpl.n	80121c2 <_puts_r+0x66>
 8012186:	6923      	ldr	r3, [r4, #16]
 8012188:	b1db      	cbz	r3, 80121c2 <_puts_r+0x66>
 801218a:	3e01      	subs	r6, #1
 801218c:	68a3      	ldr	r3, [r4, #8]
 801218e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012192:	3b01      	subs	r3, #1
 8012194:	60a3      	str	r3, [r4, #8]
 8012196:	b9e9      	cbnz	r1, 80121d4 <_puts_r+0x78>
 8012198:	2b00      	cmp	r3, #0
 801219a:	da2e      	bge.n	80121fa <_puts_r+0x9e>
 801219c:	4622      	mov	r2, r4
 801219e:	210a      	movs	r1, #10
 80121a0:	4628      	mov	r0, r5
 80121a2:	f000 f83f 	bl	8012224 <__swbuf_r>
 80121a6:	3001      	adds	r0, #1
 80121a8:	d011      	beq.n	80121ce <_puts_r+0x72>
 80121aa:	200a      	movs	r0, #10
 80121ac:	e011      	b.n	80121d2 <_puts_r+0x76>
 80121ae:	4b17      	ldr	r3, [pc, #92]	; (801220c <_puts_r+0xb0>)
 80121b0:	429c      	cmp	r4, r3
 80121b2:	d101      	bne.n	80121b8 <_puts_r+0x5c>
 80121b4:	68ac      	ldr	r4, [r5, #8]
 80121b6:	e7e3      	b.n	8012180 <_puts_r+0x24>
 80121b8:	4b15      	ldr	r3, [pc, #84]	; (8012210 <_puts_r+0xb4>)
 80121ba:	429c      	cmp	r4, r3
 80121bc:	bf08      	it	eq
 80121be:	68ec      	ldreq	r4, [r5, #12]
 80121c0:	e7de      	b.n	8012180 <_puts_r+0x24>
 80121c2:	4621      	mov	r1, r4
 80121c4:	4628      	mov	r0, r5
 80121c6:	f000 f87f 	bl	80122c8 <__swsetup_r>
 80121ca:	2800      	cmp	r0, #0
 80121cc:	d0dd      	beq.n	801218a <_puts_r+0x2e>
 80121ce:	f04f 30ff 	mov.w	r0, #4294967295
 80121d2:	bd70      	pop	{r4, r5, r6, pc}
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	da04      	bge.n	80121e2 <_puts_r+0x86>
 80121d8:	69a2      	ldr	r2, [r4, #24]
 80121da:	429a      	cmp	r2, r3
 80121dc:	dc06      	bgt.n	80121ec <_puts_r+0x90>
 80121de:	290a      	cmp	r1, #10
 80121e0:	d004      	beq.n	80121ec <_puts_r+0x90>
 80121e2:	6823      	ldr	r3, [r4, #0]
 80121e4:	1c5a      	adds	r2, r3, #1
 80121e6:	6022      	str	r2, [r4, #0]
 80121e8:	7019      	strb	r1, [r3, #0]
 80121ea:	e7cf      	b.n	801218c <_puts_r+0x30>
 80121ec:	4622      	mov	r2, r4
 80121ee:	4628      	mov	r0, r5
 80121f0:	f000 f818 	bl	8012224 <__swbuf_r>
 80121f4:	3001      	adds	r0, #1
 80121f6:	d1c9      	bne.n	801218c <_puts_r+0x30>
 80121f8:	e7e9      	b.n	80121ce <_puts_r+0x72>
 80121fa:	6823      	ldr	r3, [r4, #0]
 80121fc:	200a      	movs	r0, #10
 80121fe:	1c5a      	adds	r2, r3, #1
 8012200:	6022      	str	r2, [r4, #0]
 8012202:	7018      	strb	r0, [r3, #0]
 8012204:	e7e5      	b.n	80121d2 <_puts_r+0x76>
 8012206:	bf00      	nop
 8012208:	080140c0 	.word	0x080140c0
 801220c:	080140e0 	.word	0x080140e0
 8012210:	080140a0 	.word	0x080140a0

08012214 <puts>:
 8012214:	4b02      	ldr	r3, [pc, #8]	; (8012220 <puts+0xc>)
 8012216:	4601      	mov	r1, r0
 8012218:	6818      	ldr	r0, [r3, #0]
 801221a:	f7ff bf9f 	b.w	801215c <_puts_r>
 801221e:	bf00      	nop
 8012220:	20000010 	.word	0x20000010

08012224 <__swbuf_r>:
 8012224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012226:	460e      	mov	r6, r1
 8012228:	4614      	mov	r4, r2
 801222a:	4605      	mov	r5, r0
 801222c:	b118      	cbz	r0, 8012236 <__swbuf_r+0x12>
 801222e:	6983      	ldr	r3, [r0, #24]
 8012230:	b90b      	cbnz	r3, 8012236 <__swbuf_r+0x12>
 8012232:	f000 ffed 	bl	8013210 <__sinit>
 8012236:	4b21      	ldr	r3, [pc, #132]	; (80122bc <__swbuf_r+0x98>)
 8012238:	429c      	cmp	r4, r3
 801223a:	d12a      	bne.n	8012292 <__swbuf_r+0x6e>
 801223c:	686c      	ldr	r4, [r5, #4]
 801223e:	69a3      	ldr	r3, [r4, #24]
 8012240:	60a3      	str	r3, [r4, #8]
 8012242:	89a3      	ldrh	r3, [r4, #12]
 8012244:	071a      	lsls	r2, r3, #28
 8012246:	d52e      	bpl.n	80122a6 <__swbuf_r+0x82>
 8012248:	6923      	ldr	r3, [r4, #16]
 801224a:	b363      	cbz	r3, 80122a6 <__swbuf_r+0x82>
 801224c:	6923      	ldr	r3, [r4, #16]
 801224e:	6820      	ldr	r0, [r4, #0]
 8012250:	1ac0      	subs	r0, r0, r3
 8012252:	6963      	ldr	r3, [r4, #20]
 8012254:	b2f6      	uxtb	r6, r6
 8012256:	4283      	cmp	r3, r0
 8012258:	4637      	mov	r7, r6
 801225a:	dc04      	bgt.n	8012266 <__swbuf_r+0x42>
 801225c:	4621      	mov	r1, r4
 801225e:	4628      	mov	r0, r5
 8012260:	f000 ff6c 	bl	801313c <_fflush_r>
 8012264:	bb28      	cbnz	r0, 80122b2 <__swbuf_r+0x8e>
 8012266:	68a3      	ldr	r3, [r4, #8]
 8012268:	3b01      	subs	r3, #1
 801226a:	60a3      	str	r3, [r4, #8]
 801226c:	6823      	ldr	r3, [r4, #0]
 801226e:	1c5a      	adds	r2, r3, #1
 8012270:	6022      	str	r2, [r4, #0]
 8012272:	701e      	strb	r6, [r3, #0]
 8012274:	6963      	ldr	r3, [r4, #20]
 8012276:	3001      	adds	r0, #1
 8012278:	4283      	cmp	r3, r0
 801227a:	d004      	beq.n	8012286 <__swbuf_r+0x62>
 801227c:	89a3      	ldrh	r3, [r4, #12]
 801227e:	07db      	lsls	r3, r3, #31
 8012280:	d519      	bpl.n	80122b6 <__swbuf_r+0x92>
 8012282:	2e0a      	cmp	r6, #10
 8012284:	d117      	bne.n	80122b6 <__swbuf_r+0x92>
 8012286:	4621      	mov	r1, r4
 8012288:	4628      	mov	r0, r5
 801228a:	f000 ff57 	bl	801313c <_fflush_r>
 801228e:	b190      	cbz	r0, 80122b6 <__swbuf_r+0x92>
 8012290:	e00f      	b.n	80122b2 <__swbuf_r+0x8e>
 8012292:	4b0b      	ldr	r3, [pc, #44]	; (80122c0 <__swbuf_r+0x9c>)
 8012294:	429c      	cmp	r4, r3
 8012296:	d101      	bne.n	801229c <__swbuf_r+0x78>
 8012298:	68ac      	ldr	r4, [r5, #8]
 801229a:	e7d0      	b.n	801223e <__swbuf_r+0x1a>
 801229c:	4b09      	ldr	r3, [pc, #36]	; (80122c4 <__swbuf_r+0xa0>)
 801229e:	429c      	cmp	r4, r3
 80122a0:	bf08      	it	eq
 80122a2:	68ec      	ldreq	r4, [r5, #12]
 80122a4:	e7cb      	b.n	801223e <__swbuf_r+0x1a>
 80122a6:	4621      	mov	r1, r4
 80122a8:	4628      	mov	r0, r5
 80122aa:	f000 f80d 	bl	80122c8 <__swsetup_r>
 80122ae:	2800      	cmp	r0, #0
 80122b0:	d0cc      	beq.n	801224c <__swbuf_r+0x28>
 80122b2:	f04f 37ff 	mov.w	r7, #4294967295
 80122b6:	4638      	mov	r0, r7
 80122b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122ba:	bf00      	nop
 80122bc:	080140c0 	.word	0x080140c0
 80122c0:	080140e0 	.word	0x080140e0
 80122c4:	080140a0 	.word	0x080140a0

080122c8 <__swsetup_r>:
 80122c8:	4b32      	ldr	r3, [pc, #200]	; (8012394 <__swsetup_r+0xcc>)
 80122ca:	b570      	push	{r4, r5, r6, lr}
 80122cc:	681d      	ldr	r5, [r3, #0]
 80122ce:	4606      	mov	r6, r0
 80122d0:	460c      	mov	r4, r1
 80122d2:	b125      	cbz	r5, 80122de <__swsetup_r+0x16>
 80122d4:	69ab      	ldr	r3, [r5, #24]
 80122d6:	b913      	cbnz	r3, 80122de <__swsetup_r+0x16>
 80122d8:	4628      	mov	r0, r5
 80122da:	f000 ff99 	bl	8013210 <__sinit>
 80122de:	4b2e      	ldr	r3, [pc, #184]	; (8012398 <__swsetup_r+0xd0>)
 80122e0:	429c      	cmp	r4, r3
 80122e2:	d10f      	bne.n	8012304 <__swsetup_r+0x3c>
 80122e4:	686c      	ldr	r4, [r5, #4]
 80122e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122ea:	b29a      	uxth	r2, r3
 80122ec:	0715      	lsls	r5, r2, #28
 80122ee:	d42c      	bmi.n	801234a <__swsetup_r+0x82>
 80122f0:	06d0      	lsls	r0, r2, #27
 80122f2:	d411      	bmi.n	8012318 <__swsetup_r+0x50>
 80122f4:	2209      	movs	r2, #9
 80122f6:	6032      	str	r2, [r6, #0]
 80122f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122fc:	81a3      	strh	r3, [r4, #12]
 80122fe:	f04f 30ff 	mov.w	r0, #4294967295
 8012302:	e03e      	b.n	8012382 <__swsetup_r+0xba>
 8012304:	4b25      	ldr	r3, [pc, #148]	; (801239c <__swsetup_r+0xd4>)
 8012306:	429c      	cmp	r4, r3
 8012308:	d101      	bne.n	801230e <__swsetup_r+0x46>
 801230a:	68ac      	ldr	r4, [r5, #8]
 801230c:	e7eb      	b.n	80122e6 <__swsetup_r+0x1e>
 801230e:	4b24      	ldr	r3, [pc, #144]	; (80123a0 <__swsetup_r+0xd8>)
 8012310:	429c      	cmp	r4, r3
 8012312:	bf08      	it	eq
 8012314:	68ec      	ldreq	r4, [r5, #12]
 8012316:	e7e6      	b.n	80122e6 <__swsetup_r+0x1e>
 8012318:	0751      	lsls	r1, r2, #29
 801231a:	d512      	bpl.n	8012342 <__swsetup_r+0x7a>
 801231c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801231e:	b141      	cbz	r1, 8012332 <__swsetup_r+0x6a>
 8012320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012324:	4299      	cmp	r1, r3
 8012326:	d002      	beq.n	801232e <__swsetup_r+0x66>
 8012328:	4630      	mov	r0, r6
 801232a:	f001 fb5f 	bl	80139ec <_free_r>
 801232e:	2300      	movs	r3, #0
 8012330:	6363      	str	r3, [r4, #52]	; 0x34
 8012332:	89a3      	ldrh	r3, [r4, #12]
 8012334:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012338:	81a3      	strh	r3, [r4, #12]
 801233a:	2300      	movs	r3, #0
 801233c:	6063      	str	r3, [r4, #4]
 801233e:	6923      	ldr	r3, [r4, #16]
 8012340:	6023      	str	r3, [r4, #0]
 8012342:	89a3      	ldrh	r3, [r4, #12]
 8012344:	f043 0308 	orr.w	r3, r3, #8
 8012348:	81a3      	strh	r3, [r4, #12]
 801234a:	6923      	ldr	r3, [r4, #16]
 801234c:	b94b      	cbnz	r3, 8012362 <__swsetup_r+0x9a>
 801234e:	89a3      	ldrh	r3, [r4, #12]
 8012350:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012358:	d003      	beq.n	8012362 <__swsetup_r+0x9a>
 801235a:	4621      	mov	r1, r4
 801235c:	4630      	mov	r0, r6
 801235e:	f001 f813 	bl	8013388 <__smakebuf_r>
 8012362:	89a2      	ldrh	r2, [r4, #12]
 8012364:	f012 0301 	ands.w	r3, r2, #1
 8012368:	d00c      	beq.n	8012384 <__swsetup_r+0xbc>
 801236a:	2300      	movs	r3, #0
 801236c:	60a3      	str	r3, [r4, #8]
 801236e:	6963      	ldr	r3, [r4, #20]
 8012370:	425b      	negs	r3, r3
 8012372:	61a3      	str	r3, [r4, #24]
 8012374:	6923      	ldr	r3, [r4, #16]
 8012376:	b953      	cbnz	r3, 801238e <__swsetup_r+0xc6>
 8012378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801237c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012380:	d1ba      	bne.n	80122f8 <__swsetup_r+0x30>
 8012382:	bd70      	pop	{r4, r5, r6, pc}
 8012384:	0792      	lsls	r2, r2, #30
 8012386:	bf58      	it	pl
 8012388:	6963      	ldrpl	r3, [r4, #20]
 801238a:	60a3      	str	r3, [r4, #8]
 801238c:	e7f2      	b.n	8012374 <__swsetup_r+0xac>
 801238e:	2000      	movs	r0, #0
 8012390:	e7f7      	b.n	8012382 <__swsetup_r+0xba>
 8012392:	bf00      	nop
 8012394:	20000010 	.word	0x20000010
 8012398:	080140c0 	.word	0x080140c0
 801239c:	080140e0 	.word	0x080140e0
 80123a0:	080140a0 	.word	0x080140a0

080123a4 <quorem>:
 80123a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123a8:	6903      	ldr	r3, [r0, #16]
 80123aa:	690c      	ldr	r4, [r1, #16]
 80123ac:	42a3      	cmp	r3, r4
 80123ae:	4680      	mov	r8, r0
 80123b0:	f2c0 8082 	blt.w	80124b8 <quorem+0x114>
 80123b4:	3c01      	subs	r4, #1
 80123b6:	f101 0714 	add.w	r7, r1, #20
 80123ba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80123be:	f100 0614 	add.w	r6, r0, #20
 80123c2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80123c6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80123ca:	eb06 030c 	add.w	r3, r6, ip
 80123ce:	3501      	adds	r5, #1
 80123d0:	eb07 090c 	add.w	r9, r7, ip
 80123d4:	9301      	str	r3, [sp, #4]
 80123d6:	fbb0 f5f5 	udiv	r5, r0, r5
 80123da:	b395      	cbz	r5, 8012442 <quorem+0x9e>
 80123dc:	f04f 0a00 	mov.w	sl, #0
 80123e0:	4638      	mov	r0, r7
 80123e2:	46b6      	mov	lr, r6
 80123e4:	46d3      	mov	fp, sl
 80123e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80123ea:	b293      	uxth	r3, r2
 80123ec:	fb05 a303 	mla	r3, r5, r3, sl
 80123f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80123f4:	b29b      	uxth	r3, r3
 80123f6:	ebab 0303 	sub.w	r3, fp, r3
 80123fa:	0c12      	lsrs	r2, r2, #16
 80123fc:	f8de b000 	ldr.w	fp, [lr]
 8012400:	fb05 a202 	mla	r2, r5, r2, sl
 8012404:	fa13 f38b 	uxtah	r3, r3, fp
 8012408:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801240c:	fa1f fb82 	uxth.w	fp, r2
 8012410:	f8de 2000 	ldr.w	r2, [lr]
 8012414:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012418:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801241c:	b29b      	uxth	r3, r3
 801241e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012422:	4581      	cmp	r9, r0
 8012424:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012428:	f84e 3b04 	str.w	r3, [lr], #4
 801242c:	d2db      	bcs.n	80123e6 <quorem+0x42>
 801242e:	f856 300c 	ldr.w	r3, [r6, ip]
 8012432:	b933      	cbnz	r3, 8012442 <quorem+0x9e>
 8012434:	9b01      	ldr	r3, [sp, #4]
 8012436:	3b04      	subs	r3, #4
 8012438:	429e      	cmp	r6, r3
 801243a:	461a      	mov	r2, r3
 801243c:	d330      	bcc.n	80124a0 <quorem+0xfc>
 801243e:	f8c8 4010 	str.w	r4, [r8, #16]
 8012442:	4640      	mov	r0, r8
 8012444:	f001 f9fe 	bl	8013844 <__mcmp>
 8012448:	2800      	cmp	r0, #0
 801244a:	db25      	blt.n	8012498 <quorem+0xf4>
 801244c:	3501      	adds	r5, #1
 801244e:	4630      	mov	r0, r6
 8012450:	f04f 0c00 	mov.w	ip, #0
 8012454:	f857 2b04 	ldr.w	r2, [r7], #4
 8012458:	f8d0 e000 	ldr.w	lr, [r0]
 801245c:	b293      	uxth	r3, r2
 801245e:	ebac 0303 	sub.w	r3, ip, r3
 8012462:	0c12      	lsrs	r2, r2, #16
 8012464:	fa13 f38e 	uxtah	r3, r3, lr
 8012468:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801246c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012470:	b29b      	uxth	r3, r3
 8012472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012476:	45b9      	cmp	r9, r7
 8012478:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801247c:	f840 3b04 	str.w	r3, [r0], #4
 8012480:	d2e8      	bcs.n	8012454 <quorem+0xb0>
 8012482:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012486:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801248a:	b92a      	cbnz	r2, 8012498 <quorem+0xf4>
 801248c:	3b04      	subs	r3, #4
 801248e:	429e      	cmp	r6, r3
 8012490:	461a      	mov	r2, r3
 8012492:	d30b      	bcc.n	80124ac <quorem+0x108>
 8012494:	f8c8 4010 	str.w	r4, [r8, #16]
 8012498:	4628      	mov	r0, r5
 801249a:	b003      	add	sp, #12
 801249c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124a0:	6812      	ldr	r2, [r2, #0]
 80124a2:	3b04      	subs	r3, #4
 80124a4:	2a00      	cmp	r2, #0
 80124a6:	d1ca      	bne.n	801243e <quorem+0x9a>
 80124a8:	3c01      	subs	r4, #1
 80124aa:	e7c5      	b.n	8012438 <quorem+0x94>
 80124ac:	6812      	ldr	r2, [r2, #0]
 80124ae:	3b04      	subs	r3, #4
 80124b0:	2a00      	cmp	r2, #0
 80124b2:	d1ef      	bne.n	8012494 <quorem+0xf0>
 80124b4:	3c01      	subs	r4, #1
 80124b6:	e7ea      	b.n	801248e <quorem+0xea>
 80124b8:	2000      	movs	r0, #0
 80124ba:	e7ee      	b.n	801249a <quorem+0xf6>
 80124bc:	0000      	movs	r0, r0
	...

080124c0 <_dtoa_r>:
 80124c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c4:	ec57 6b10 	vmov	r6, r7, d0
 80124c8:	b097      	sub	sp, #92	; 0x5c
 80124ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80124cc:	9106      	str	r1, [sp, #24]
 80124ce:	4604      	mov	r4, r0
 80124d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80124d2:	9312      	str	r3, [sp, #72]	; 0x48
 80124d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80124d8:	e9cd 6700 	strd	r6, r7, [sp]
 80124dc:	b93d      	cbnz	r5, 80124ee <_dtoa_r+0x2e>
 80124de:	2010      	movs	r0, #16
 80124e0:	f000 ff92 	bl	8013408 <malloc>
 80124e4:	6260      	str	r0, [r4, #36]	; 0x24
 80124e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80124ea:	6005      	str	r5, [r0, #0]
 80124ec:	60c5      	str	r5, [r0, #12]
 80124ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124f0:	6819      	ldr	r1, [r3, #0]
 80124f2:	b151      	cbz	r1, 801250a <_dtoa_r+0x4a>
 80124f4:	685a      	ldr	r2, [r3, #4]
 80124f6:	604a      	str	r2, [r1, #4]
 80124f8:	2301      	movs	r3, #1
 80124fa:	4093      	lsls	r3, r2
 80124fc:	608b      	str	r3, [r1, #8]
 80124fe:	4620      	mov	r0, r4
 8012500:	f000 ffbe 	bl	8013480 <_Bfree>
 8012504:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012506:	2200      	movs	r2, #0
 8012508:	601a      	str	r2, [r3, #0]
 801250a:	1e3b      	subs	r3, r7, #0
 801250c:	bfbb      	ittet	lt
 801250e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012512:	9301      	strlt	r3, [sp, #4]
 8012514:	2300      	movge	r3, #0
 8012516:	2201      	movlt	r2, #1
 8012518:	bfac      	ite	ge
 801251a:	f8c8 3000 	strge.w	r3, [r8]
 801251e:	f8c8 2000 	strlt.w	r2, [r8]
 8012522:	4baf      	ldr	r3, [pc, #700]	; (80127e0 <_dtoa_r+0x320>)
 8012524:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012528:	ea33 0308 	bics.w	r3, r3, r8
 801252c:	d114      	bne.n	8012558 <_dtoa_r+0x98>
 801252e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012530:	f242 730f 	movw	r3, #9999	; 0x270f
 8012534:	6013      	str	r3, [r2, #0]
 8012536:	9b00      	ldr	r3, [sp, #0]
 8012538:	b923      	cbnz	r3, 8012544 <_dtoa_r+0x84>
 801253a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801253e:	2800      	cmp	r0, #0
 8012540:	f000 8542 	beq.w	8012fc8 <_dtoa_r+0xb08>
 8012544:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012546:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80127f4 <_dtoa_r+0x334>
 801254a:	2b00      	cmp	r3, #0
 801254c:	f000 8544 	beq.w	8012fd8 <_dtoa_r+0xb18>
 8012550:	f10b 0303 	add.w	r3, fp, #3
 8012554:	f000 bd3e 	b.w	8012fd4 <_dtoa_r+0xb14>
 8012558:	e9dd 6700 	ldrd	r6, r7, [sp]
 801255c:	2200      	movs	r2, #0
 801255e:	2300      	movs	r3, #0
 8012560:	4630      	mov	r0, r6
 8012562:	4639      	mov	r1, r7
 8012564:	f7f6 f9e8 	bl	8008938 <__aeabi_dcmpeq>
 8012568:	4681      	mov	r9, r0
 801256a:	b168      	cbz	r0, 8012588 <_dtoa_r+0xc8>
 801256c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801256e:	2301      	movs	r3, #1
 8012570:	6013      	str	r3, [r2, #0]
 8012572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012574:	2b00      	cmp	r3, #0
 8012576:	f000 8524 	beq.w	8012fc2 <_dtoa_r+0xb02>
 801257a:	4b9a      	ldr	r3, [pc, #616]	; (80127e4 <_dtoa_r+0x324>)
 801257c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801257e:	f103 3bff 	add.w	fp, r3, #4294967295
 8012582:	6013      	str	r3, [r2, #0]
 8012584:	f000 bd28 	b.w	8012fd8 <_dtoa_r+0xb18>
 8012588:	aa14      	add	r2, sp, #80	; 0x50
 801258a:	a915      	add	r1, sp, #84	; 0x54
 801258c:	ec47 6b10 	vmov	d0, r6, r7
 8012590:	4620      	mov	r0, r4
 8012592:	f001 f9ce 	bl	8013932 <__d2b>
 8012596:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801259a:	9004      	str	r0, [sp, #16]
 801259c:	2d00      	cmp	r5, #0
 801259e:	d07c      	beq.n	801269a <_dtoa_r+0x1da>
 80125a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80125a4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80125a8:	46b2      	mov	sl, r6
 80125aa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80125ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80125b2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80125b6:	2200      	movs	r2, #0
 80125b8:	4b8b      	ldr	r3, [pc, #556]	; (80127e8 <_dtoa_r+0x328>)
 80125ba:	4650      	mov	r0, sl
 80125bc:	4659      	mov	r1, fp
 80125be:	f7f5 fd9b 	bl	80080f8 <__aeabi_dsub>
 80125c2:	a381      	add	r3, pc, #516	; (adr r3, 80127c8 <_dtoa_r+0x308>)
 80125c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c8:	f7f5 ff4e 	bl	8008468 <__aeabi_dmul>
 80125cc:	a380      	add	r3, pc, #512	; (adr r3, 80127d0 <_dtoa_r+0x310>)
 80125ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d2:	f7f5 fd93 	bl	80080fc <__adddf3>
 80125d6:	4606      	mov	r6, r0
 80125d8:	4628      	mov	r0, r5
 80125da:	460f      	mov	r7, r1
 80125dc:	f7f5 feda 	bl	8008394 <__aeabi_i2d>
 80125e0:	a37d      	add	r3, pc, #500	; (adr r3, 80127d8 <_dtoa_r+0x318>)
 80125e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e6:	f7f5 ff3f 	bl	8008468 <__aeabi_dmul>
 80125ea:	4602      	mov	r2, r0
 80125ec:	460b      	mov	r3, r1
 80125ee:	4630      	mov	r0, r6
 80125f0:	4639      	mov	r1, r7
 80125f2:	f7f5 fd83 	bl	80080fc <__adddf3>
 80125f6:	4606      	mov	r6, r0
 80125f8:	460f      	mov	r7, r1
 80125fa:	f7f6 f9e5 	bl	80089c8 <__aeabi_d2iz>
 80125fe:	2200      	movs	r2, #0
 8012600:	4682      	mov	sl, r0
 8012602:	2300      	movs	r3, #0
 8012604:	4630      	mov	r0, r6
 8012606:	4639      	mov	r1, r7
 8012608:	f7f6 f9a0 	bl	800894c <__aeabi_dcmplt>
 801260c:	b148      	cbz	r0, 8012622 <_dtoa_r+0x162>
 801260e:	4650      	mov	r0, sl
 8012610:	f7f5 fec0 	bl	8008394 <__aeabi_i2d>
 8012614:	4632      	mov	r2, r6
 8012616:	463b      	mov	r3, r7
 8012618:	f7f6 f98e 	bl	8008938 <__aeabi_dcmpeq>
 801261c:	b908      	cbnz	r0, 8012622 <_dtoa_r+0x162>
 801261e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012622:	f1ba 0f16 	cmp.w	sl, #22
 8012626:	d859      	bhi.n	80126dc <_dtoa_r+0x21c>
 8012628:	4970      	ldr	r1, [pc, #448]	; (80127ec <_dtoa_r+0x32c>)
 801262a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801262e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012636:	f7f6 f9a7 	bl	8008988 <__aeabi_dcmpgt>
 801263a:	2800      	cmp	r0, #0
 801263c:	d050      	beq.n	80126e0 <_dtoa_r+0x220>
 801263e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012642:	2300      	movs	r3, #0
 8012644:	930f      	str	r3, [sp, #60]	; 0x3c
 8012646:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012648:	1b5d      	subs	r5, r3, r5
 801264a:	f1b5 0801 	subs.w	r8, r5, #1
 801264e:	bf49      	itett	mi
 8012650:	f1c5 0301 	rsbmi	r3, r5, #1
 8012654:	2300      	movpl	r3, #0
 8012656:	9305      	strmi	r3, [sp, #20]
 8012658:	f04f 0800 	movmi.w	r8, #0
 801265c:	bf58      	it	pl
 801265e:	9305      	strpl	r3, [sp, #20]
 8012660:	f1ba 0f00 	cmp.w	sl, #0
 8012664:	db3e      	blt.n	80126e4 <_dtoa_r+0x224>
 8012666:	2300      	movs	r3, #0
 8012668:	44d0      	add	r8, sl
 801266a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801266e:	9307      	str	r3, [sp, #28]
 8012670:	9b06      	ldr	r3, [sp, #24]
 8012672:	2b09      	cmp	r3, #9
 8012674:	f200 8090 	bhi.w	8012798 <_dtoa_r+0x2d8>
 8012678:	2b05      	cmp	r3, #5
 801267a:	bfc4      	itt	gt
 801267c:	3b04      	subgt	r3, #4
 801267e:	9306      	strgt	r3, [sp, #24]
 8012680:	9b06      	ldr	r3, [sp, #24]
 8012682:	f1a3 0302 	sub.w	r3, r3, #2
 8012686:	bfcc      	ite	gt
 8012688:	2500      	movgt	r5, #0
 801268a:	2501      	movle	r5, #1
 801268c:	2b03      	cmp	r3, #3
 801268e:	f200 808f 	bhi.w	80127b0 <_dtoa_r+0x2f0>
 8012692:	e8df f003 	tbb	[pc, r3]
 8012696:	7f7d      	.short	0x7f7d
 8012698:	7131      	.short	0x7131
 801269a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801269e:	441d      	add	r5, r3
 80126a0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80126a4:	2820      	cmp	r0, #32
 80126a6:	dd13      	ble.n	80126d0 <_dtoa_r+0x210>
 80126a8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80126ac:	9b00      	ldr	r3, [sp, #0]
 80126ae:	fa08 f800 	lsl.w	r8, r8, r0
 80126b2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80126b6:	fa23 f000 	lsr.w	r0, r3, r0
 80126ba:	ea48 0000 	orr.w	r0, r8, r0
 80126be:	f7f5 fe59 	bl	8008374 <__aeabi_ui2d>
 80126c2:	2301      	movs	r3, #1
 80126c4:	4682      	mov	sl, r0
 80126c6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80126ca:	3d01      	subs	r5, #1
 80126cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80126ce:	e772      	b.n	80125b6 <_dtoa_r+0xf6>
 80126d0:	9b00      	ldr	r3, [sp, #0]
 80126d2:	f1c0 0020 	rsb	r0, r0, #32
 80126d6:	fa03 f000 	lsl.w	r0, r3, r0
 80126da:	e7f0      	b.n	80126be <_dtoa_r+0x1fe>
 80126dc:	2301      	movs	r3, #1
 80126de:	e7b1      	b.n	8012644 <_dtoa_r+0x184>
 80126e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80126e2:	e7b0      	b.n	8012646 <_dtoa_r+0x186>
 80126e4:	9b05      	ldr	r3, [sp, #20]
 80126e6:	eba3 030a 	sub.w	r3, r3, sl
 80126ea:	9305      	str	r3, [sp, #20]
 80126ec:	f1ca 0300 	rsb	r3, sl, #0
 80126f0:	9307      	str	r3, [sp, #28]
 80126f2:	2300      	movs	r3, #0
 80126f4:	930e      	str	r3, [sp, #56]	; 0x38
 80126f6:	e7bb      	b.n	8012670 <_dtoa_r+0x1b0>
 80126f8:	2301      	movs	r3, #1
 80126fa:	930a      	str	r3, [sp, #40]	; 0x28
 80126fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126fe:	2b00      	cmp	r3, #0
 8012700:	dd59      	ble.n	80127b6 <_dtoa_r+0x2f6>
 8012702:	9302      	str	r3, [sp, #8]
 8012704:	4699      	mov	r9, r3
 8012706:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012708:	2200      	movs	r2, #0
 801270a:	6072      	str	r2, [r6, #4]
 801270c:	2204      	movs	r2, #4
 801270e:	f102 0014 	add.w	r0, r2, #20
 8012712:	4298      	cmp	r0, r3
 8012714:	6871      	ldr	r1, [r6, #4]
 8012716:	d953      	bls.n	80127c0 <_dtoa_r+0x300>
 8012718:	4620      	mov	r0, r4
 801271a:	f000 fe7d 	bl	8013418 <_Balloc>
 801271e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012720:	6030      	str	r0, [r6, #0]
 8012722:	f1b9 0f0e 	cmp.w	r9, #14
 8012726:	f8d3 b000 	ldr.w	fp, [r3]
 801272a:	f200 80e6 	bhi.w	80128fa <_dtoa_r+0x43a>
 801272e:	2d00      	cmp	r5, #0
 8012730:	f000 80e3 	beq.w	80128fa <_dtoa_r+0x43a>
 8012734:	ed9d 7b00 	vldr	d7, [sp]
 8012738:	f1ba 0f00 	cmp.w	sl, #0
 801273c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012740:	dd74      	ble.n	801282c <_dtoa_r+0x36c>
 8012742:	4a2a      	ldr	r2, [pc, #168]	; (80127ec <_dtoa_r+0x32c>)
 8012744:	f00a 030f 	and.w	r3, sl, #15
 8012748:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801274c:	ed93 7b00 	vldr	d7, [r3]
 8012750:	ea4f 162a 	mov.w	r6, sl, asr #4
 8012754:	06f0      	lsls	r0, r6, #27
 8012756:	ed8d 7b08 	vstr	d7, [sp, #32]
 801275a:	d565      	bpl.n	8012828 <_dtoa_r+0x368>
 801275c:	4b24      	ldr	r3, [pc, #144]	; (80127f0 <_dtoa_r+0x330>)
 801275e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012762:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012766:	f7f5 ffa9 	bl	80086bc <__aeabi_ddiv>
 801276a:	e9cd 0100 	strd	r0, r1, [sp]
 801276e:	f006 060f 	and.w	r6, r6, #15
 8012772:	2503      	movs	r5, #3
 8012774:	4f1e      	ldr	r7, [pc, #120]	; (80127f0 <_dtoa_r+0x330>)
 8012776:	e04c      	b.n	8012812 <_dtoa_r+0x352>
 8012778:	2301      	movs	r3, #1
 801277a:	930a      	str	r3, [sp, #40]	; 0x28
 801277c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801277e:	4453      	add	r3, sl
 8012780:	f103 0901 	add.w	r9, r3, #1
 8012784:	9302      	str	r3, [sp, #8]
 8012786:	464b      	mov	r3, r9
 8012788:	2b01      	cmp	r3, #1
 801278a:	bfb8      	it	lt
 801278c:	2301      	movlt	r3, #1
 801278e:	e7ba      	b.n	8012706 <_dtoa_r+0x246>
 8012790:	2300      	movs	r3, #0
 8012792:	e7b2      	b.n	80126fa <_dtoa_r+0x23a>
 8012794:	2300      	movs	r3, #0
 8012796:	e7f0      	b.n	801277a <_dtoa_r+0x2ba>
 8012798:	2501      	movs	r5, #1
 801279a:	2300      	movs	r3, #0
 801279c:	9306      	str	r3, [sp, #24]
 801279e:	950a      	str	r5, [sp, #40]	; 0x28
 80127a0:	f04f 33ff 	mov.w	r3, #4294967295
 80127a4:	9302      	str	r3, [sp, #8]
 80127a6:	4699      	mov	r9, r3
 80127a8:	2200      	movs	r2, #0
 80127aa:	2312      	movs	r3, #18
 80127ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80127ae:	e7aa      	b.n	8012706 <_dtoa_r+0x246>
 80127b0:	2301      	movs	r3, #1
 80127b2:	930a      	str	r3, [sp, #40]	; 0x28
 80127b4:	e7f4      	b.n	80127a0 <_dtoa_r+0x2e0>
 80127b6:	2301      	movs	r3, #1
 80127b8:	9302      	str	r3, [sp, #8]
 80127ba:	4699      	mov	r9, r3
 80127bc:	461a      	mov	r2, r3
 80127be:	e7f5      	b.n	80127ac <_dtoa_r+0x2ec>
 80127c0:	3101      	adds	r1, #1
 80127c2:	6071      	str	r1, [r6, #4]
 80127c4:	0052      	lsls	r2, r2, #1
 80127c6:	e7a2      	b.n	801270e <_dtoa_r+0x24e>
 80127c8:	636f4361 	.word	0x636f4361
 80127cc:	3fd287a7 	.word	0x3fd287a7
 80127d0:	8b60c8b3 	.word	0x8b60c8b3
 80127d4:	3fc68a28 	.word	0x3fc68a28
 80127d8:	509f79fb 	.word	0x509f79fb
 80127dc:	3fd34413 	.word	0x3fd34413
 80127e0:	7ff00000 	.word	0x7ff00000
 80127e4:	0801406d 	.word	0x0801406d
 80127e8:	3ff80000 	.word	0x3ff80000
 80127ec:	08014128 	.word	0x08014128
 80127f0:	08014100 	.word	0x08014100
 80127f4:	08014099 	.word	0x08014099
 80127f8:	07f1      	lsls	r1, r6, #31
 80127fa:	d508      	bpl.n	801280e <_dtoa_r+0x34e>
 80127fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012804:	f7f5 fe30 	bl	8008468 <__aeabi_dmul>
 8012808:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801280c:	3501      	adds	r5, #1
 801280e:	1076      	asrs	r6, r6, #1
 8012810:	3708      	adds	r7, #8
 8012812:	2e00      	cmp	r6, #0
 8012814:	d1f0      	bne.n	80127f8 <_dtoa_r+0x338>
 8012816:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801281a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801281e:	f7f5 ff4d 	bl	80086bc <__aeabi_ddiv>
 8012822:	e9cd 0100 	strd	r0, r1, [sp]
 8012826:	e01a      	b.n	801285e <_dtoa_r+0x39e>
 8012828:	2502      	movs	r5, #2
 801282a:	e7a3      	b.n	8012774 <_dtoa_r+0x2b4>
 801282c:	f000 80a0 	beq.w	8012970 <_dtoa_r+0x4b0>
 8012830:	f1ca 0600 	rsb	r6, sl, #0
 8012834:	4b9f      	ldr	r3, [pc, #636]	; (8012ab4 <_dtoa_r+0x5f4>)
 8012836:	4fa0      	ldr	r7, [pc, #640]	; (8012ab8 <_dtoa_r+0x5f8>)
 8012838:	f006 020f 	and.w	r2, r6, #15
 801283c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012844:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012848:	f7f5 fe0e 	bl	8008468 <__aeabi_dmul>
 801284c:	e9cd 0100 	strd	r0, r1, [sp]
 8012850:	1136      	asrs	r6, r6, #4
 8012852:	2300      	movs	r3, #0
 8012854:	2502      	movs	r5, #2
 8012856:	2e00      	cmp	r6, #0
 8012858:	d17f      	bne.n	801295a <_dtoa_r+0x49a>
 801285a:	2b00      	cmp	r3, #0
 801285c:	d1e1      	bne.n	8012822 <_dtoa_r+0x362>
 801285e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012860:	2b00      	cmp	r3, #0
 8012862:	f000 8087 	beq.w	8012974 <_dtoa_r+0x4b4>
 8012866:	e9dd 6700 	ldrd	r6, r7, [sp]
 801286a:	2200      	movs	r2, #0
 801286c:	4b93      	ldr	r3, [pc, #588]	; (8012abc <_dtoa_r+0x5fc>)
 801286e:	4630      	mov	r0, r6
 8012870:	4639      	mov	r1, r7
 8012872:	f7f6 f86b 	bl	800894c <__aeabi_dcmplt>
 8012876:	2800      	cmp	r0, #0
 8012878:	d07c      	beq.n	8012974 <_dtoa_r+0x4b4>
 801287a:	f1b9 0f00 	cmp.w	r9, #0
 801287e:	d079      	beq.n	8012974 <_dtoa_r+0x4b4>
 8012880:	9b02      	ldr	r3, [sp, #8]
 8012882:	2b00      	cmp	r3, #0
 8012884:	dd35      	ble.n	80128f2 <_dtoa_r+0x432>
 8012886:	f10a 33ff 	add.w	r3, sl, #4294967295
 801288a:	9308      	str	r3, [sp, #32]
 801288c:	4639      	mov	r1, r7
 801288e:	2200      	movs	r2, #0
 8012890:	4b8b      	ldr	r3, [pc, #556]	; (8012ac0 <_dtoa_r+0x600>)
 8012892:	4630      	mov	r0, r6
 8012894:	f7f5 fde8 	bl	8008468 <__aeabi_dmul>
 8012898:	e9cd 0100 	strd	r0, r1, [sp]
 801289c:	9f02      	ldr	r7, [sp, #8]
 801289e:	3501      	adds	r5, #1
 80128a0:	4628      	mov	r0, r5
 80128a2:	f7f5 fd77 	bl	8008394 <__aeabi_i2d>
 80128a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128aa:	f7f5 fddd 	bl	8008468 <__aeabi_dmul>
 80128ae:	2200      	movs	r2, #0
 80128b0:	4b84      	ldr	r3, [pc, #528]	; (8012ac4 <_dtoa_r+0x604>)
 80128b2:	f7f5 fc23 	bl	80080fc <__adddf3>
 80128b6:	4605      	mov	r5, r0
 80128b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80128bc:	2f00      	cmp	r7, #0
 80128be:	d15d      	bne.n	801297c <_dtoa_r+0x4bc>
 80128c0:	2200      	movs	r2, #0
 80128c2:	4b81      	ldr	r3, [pc, #516]	; (8012ac8 <_dtoa_r+0x608>)
 80128c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128c8:	f7f5 fc16 	bl	80080f8 <__aeabi_dsub>
 80128cc:	462a      	mov	r2, r5
 80128ce:	4633      	mov	r3, r6
 80128d0:	e9cd 0100 	strd	r0, r1, [sp]
 80128d4:	f7f6 f858 	bl	8008988 <__aeabi_dcmpgt>
 80128d8:	2800      	cmp	r0, #0
 80128da:	f040 8288 	bne.w	8012dee <_dtoa_r+0x92e>
 80128de:	462a      	mov	r2, r5
 80128e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80128e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128e8:	f7f6 f830 	bl	800894c <__aeabi_dcmplt>
 80128ec:	2800      	cmp	r0, #0
 80128ee:	f040 827c 	bne.w	8012dea <_dtoa_r+0x92a>
 80128f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80128f6:	e9cd 2300 	strd	r2, r3, [sp]
 80128fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	f2c0 8150 	blt.w	8012ba2 <_dtoa_r+0x6e2>
 8012902:	f1ba 0f0e 	cmp.w	sl, #14
 8012906:	f300 814c 	bgt.w	8012ba2 <_dtoa_r+0x6e2>
 801290a:	4b6a      	ldr	r3, [pc, #424]	; (8012ab4 <_dtoa_r+0x5f4>)
 801290c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012910:	ed93 7b00 	vldr	d7, [r3]
 8012914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012916:	2b00      	cmp	r3, #0
 8012918:	ed8d 7b02 	vstr	d7, [sp, #8]
 801291c:	f280 80d8 	bge.w	8012ad0 <_dtoa_r+0x610>
 8012920:	f1b9 0f00 	cmp.w	r9, #0
 8012924:	f300 80d4 	bgt.w	8012ad0 <_dtoa_r+0x610>
 8012928:	f040 825e 	bne.w	8012de8 <_dtoa_r+0x928>
 801292c:	2200      	movs	r2, #0
 801292e:	4b66      	ldr	r3, [pc, #408]	; (8012ac8 <_dtoa_r+0x608>)
 8012930:	ec51 0b17 	vmov	r0, r1, d7
 8012934:	f7f5 fd98 	bl	8008468 <__aeabi_dmul>
 8012938:	e9dd 2300 	ldrd	r2, r3, [sp]
 801293c:	f7f6 f81a 	bl	8008974 <__aeabi_dcmpge>
 8012940:	464f      	mov	r7, r9
 8012942:	464e      	mov	r6, r9
 8012944:	2800      	cmp	r0, #0
 8012946:	f040 8234 	bne.w	8012db2 <_dtoa_r+0x8f2>
 801294a:	2331      	movs	r3, #49	; 0x31
 801294c:	f10b 0501 	add.w	r5, fp, #1
 8012950:	f88b 3000 	strb.w	r3, [fp]
 8012954:	f10a 0a01 	add.w	sl, sl, #1
 8012958:	e22f      	b.n	8012dba <_dtoa_r+0x8fa>
 801295a:	07f2      	lsls	r2, r6, #31
 801295c:	d505      	bpl.n	801296a <_dtoa_r+0x4aa>
 801295e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012962:	f7f5 fd81 	bl	8008468 <__aeabi_dmul>
 8012966:	3501      	adds	r5, #1
 8012968:	2301      	movs	r3, #1
 801296a:	1076      	asrs	r6, r6, #1
 801296c:	3708      	adds	r7, #8
 801296e:	e772      	b.n	8012856 <_dtoa_r+0x396>
 8012970:	2502      	movs	r5, #2
 8012972:	e774      	b.n	801285e <_dtoa_r+0x39e>
 8012974:	f8cd a020 	str.w	sl, [sp, #32]
 8012978:	464f      	mov	r7, r9
 801297a:	e791      	b.n	80128a0 <_dtoa_r+0x3e0>
 801297c:	4b4d      	ldr	r3, [pc, #308]	; (8012ab4 <_dtoa_r+0x5f4>)
 801297e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012982:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012988:	2b00      	cmp	r3, #0
 801298a:	d047      	beq.n	8012a1c <_dtoa_r+0x55c>
 801298c:	4602      	mov	r2, r0
 801298e:	460b      	mov	r3, r1
 8012990:	2000      	movs	r0, #0
 8012992:	494e      	ldr	r1, [pc, #312]	; (8012acc <_dtoa_r+0x60c>)
 8012994:	f7f5 fe92 	bl	80086bc <__aeabi_ddiv>
 8012998:	462a      	mov	r2, r5
 801299a:	4633      	mov	r3, r6
 801299c:	f7f5 fbac 	bl	80080f8 <__aeabi_dsub>
 80129a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80129a4:	465d      	mov	r5, fp
 80129a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129aa:	f7f6 f80d 	bl	80089c8 <__aeabi_d2iz>
 80129ae:	4606      	mov	r6, r0
 80129b0:	f7f5 fcf0 	bl	8008394 <__aeabi_i2d>
 80129b4:	4602      	mov	r2, r0
 80129b6:	460b      	mov	r3, r1
 80129b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129bc:	f7f5 fb9c 	bl	80080f8 <__aeabi_dsub>
 80129c0:	3630      	adds	r6, #48	; 0x30
 80129c2:	f805 6b01 	strb.w	r6, [r5], #1
 80129c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80129ca:	e9cd 0100 	strd	r0, r1, [sp]
 80129ce:	f7f5 ffbd 	bl	800894c <__aeabi_dcmplt>
 80129d2:	2800      	cmp	r0, #0
 80129d4:	d163      	bne.n	8012a9e <_dtoa_r+0x5de>
 80129d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129da:	2000      	movs	r0, #0
 80129dc:	4937      	ldr	r1, [pc, #220]	; (8012abc <_dtoa_r+0x5fc>)
 80129de:	f7f5 fb8b 	bl	80080f8 <__aeabi_dsub>
 80129e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80129e6:	f7f5 ffb1 	bl	800894c <__aeabi_dcmplt>
 80129ea:	2800      	cmp	r0, #0
 80129ec:	f040 80b7 	bne.w	8012b5e <_dtoa_r+0x69e>
 80129f0:	eba5 030b 	sub.w	r3, r5, fp
 80129f4:	429f      	cmp	r7, r3
 80129f6:	f77f af7c 	ble.w	80128f2 <_dtoa_r+0x432>
 80129fa:	2200      	movs	r2, #0
 80129fc:	4b30      	ldr	r3, [pc, #192]	; (8012ac0 <_dtoa_r+0x600>)
 80129fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012a02:	f7f5 fd31 	bl	8008468 <__aeabi_dmul>
 8012a06:	2200      	movs	r2, #0
 8012a08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012a0c:	4b2c      	ldr	r3, [pc, #176]	; (8012ac0 <_dtoa_r+0x600>)
 8012a0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a12:	f7f5 fd29 	bl	8008468 <__aeabi_dmul>
 8012a16:	e9cd 0100 	strd	r0, r1, [sp]
 8012a1a:	e7c4      	b.n	80129a6 <_dtoa_r+0x4e6>
 8012a1c:	462a      	mov	r2, r5
 8012a1e:	4633      	mov	r3, r6
 8012a20:	f7f5 fd22 	bl	8008468 <__aeabi_dmul>
 8012a24:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012a28:	eb0b 0507 	add.w	r5, fp, r7
 8012a2c:	465e      	mov	r6, fp
 8012a2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a32:	f7f5 ffc9 	bl	80089c8 <__aeabi_d2iz>
 8012a36:	4607      	mov	r7, r0
 8012a38:	f7f5 fcac 	bl	8008394 <__aeabi_i2d>
 8012a3c:	3730      	adds	r7, #48	; 0x30
 8012a3e:	4602      	mov	r2, r0
 8012a40:	460b      	mov	r3, r1
 8012a42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a46:	f7f5 fb57 	bl	80080f8 <__aeabi_dsub>
 8012a4a:	f806 7b01 	strb.w	r7, [r6], #1
 8012a4e:	42ae      	cmp	r6, r5
 8012a50:	e9cd 0100 	strd	r0, r1, [sp]
 8012a54:	f04f 0200 	mov.w	r2, #0
 8012a58:	d126      	bne.n	8012aa8 <_dtoa_r+0x5e8>
 8012a5a:	4b1c      	ldr	r3, [pc, #112]	; (8012acc <_dtoa_r+0x60c>)
 8012a5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012a60:	f7f5 fb4c 	bl	80080fc <__adddf3>
 8012a64:	4602      	mov	r2, r0
 8012a66:	460b      	mov	r3, r1
 8012a68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a6c:	f7f5 ff8c 	bl	8008988 <__aeabi_dcmpgt>
 8012a70:	2800      	cmp	r0, #0
 8012a72:	d174      	bne.n	8012b5e <_dtoa_r+0x69e>
 8012a74:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012a78:	2000      	movs	r0, #0
 8012a7a:	4914      	ldr	r1, [pc, #80]	; (8012acc <_dtoa_r+0x60c>)
 8012a7c:	f7f5 fb3c 	bl	80080f8 <__aeabi_dsub>
 8012a80:	4602      	mov	r2, r0
 8012a82:	460b      	mov	r3, r1
 8012a84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a88:	f7f5 ff60 	bl	800894c <__aeabi_dcmplt>
 8012a8c:	2800      	cmp	r0, #0
 8012a8e:	f43f af30 	beq.w	80128f2 <_dtoa_r+0x432>
 8012a92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012a96:	2b30      	cmp	r3, #48	; 0x30
 8012a98:	f105 32ff 	add.w	r2, r5, #4294967295
 8012a9c:	d002      	beq.n	8012aa4 <_dtoa_r+0x5e4>
 8012a9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012aa2:	e04a      	b.n	8012b3a <_dtoa_r+0x67a>
 8012aa4:	4615      	mov	r5, r2
 8012aa6:	e7f4      	b.n	8012a92 <_dtoa_r+0x5d2>
 8012aa8:	4b05      	ldr	r3, [pc, #20]	; (8012ac0 <_dtoa_r+0x600>)
 8012aaa:	f7f5 fcdd 	bl	8008468 <__aeabi_dmul>
 8012aae:	e9cd 0100 	strd	r0, r1, [sp]
 8012ab2:	e7bc      	b.n	8012a2e <_dtoa_r+0x56e>
 8012ab4:	08014128 	.word	0x08014128
 8012ab8:	08014100 	.word	0x08014100
 8012abc:	3ff00000 	.word	0x3ff00000
 8012ac0:	40240000 	.word	0x40240000
 8012ac4:	401c0000 	.word	0x401c0000
 8012ac8:	40140000 	.word	0x40140000
 8012acc:	3fe00000 	.word	0x3fe00000
 8012ad0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012ad4:	465d      	mov	r5, fp
 8012ad6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ada:	4630      	mov	r0, r6
 8012adc:	4639      	mov	r1, r7
 8012ade:	f7f5 fded 	bl	80086bc <__aeabi_ddiv>
 8012ae2:	f7f5 ff71 	bl	80089c8 <__aeabi_d2iz>
 8012ae6:	4680      	mov	r8, r0
 8012ae8:	f7f5 fc54 	bl	8008394 <__aeabi_i2d>
 8012aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012af0:	f7f5 fcba 	bl	8008468 <__aeabi_dmul>
 8012af4:	4602      	mov	r2, r0
 8012af6:	460b      	mov	r3, r1
 8012af8:	4630      	mov	r0, r6
 8012afa:	4639      	mov	r1, r7
 8012afc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012b00:	f7f5 fafa 	bl	80080f8 <__aeabi_dsub>
 8012b04:	f805 6b01 	strb.w	r6, [r5], #1
 8012b08:	eba5 060b 	sub.w	r6, r5, fp
 8012b0c:	45b1      	cmp	r9, r6
 8012b0e:	4602      	mov	r2, r0
 8012b10:	460b      	mov	r3, r1
 8012b12:	d139      	bne.n	8012b88 <_dtoa_r+0x6c8>
 8012b14:	f7f5 faf2 	bl	80080fc <__adddf3>
 8012b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b1c:	4606      	mov	r6, r0
 8012b1e:	460f      	mov	r7, r1
 8012b20:	f7f5 ff32 	bl	8008988 <__aeabi_dcmpgt>
 8012b24:	b9c8      	cbnz	r0, 8012b5a <_dtoa_r+0x69a>
 8012b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b2a:	4630      	mov	r0, r6
 8012b2c:	4639      	mov	r1, r7
 8012b2e:	f7f5 ff03 	bl	8008938 <__aeabi_dcmpeq>
 8012b32:	b110      	cbz	r0, 8012b3a <_dtoa_r+0x67a>
 8012b34:	f018 0f01 	tst.w	r8, #1
 8012b38:	d10f      	bne.n	8012b5a <_dtoa_r+0x69a>
 8012b3a:	9904      	ldr	r1, [sp, #16]
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	f000 fc9f 	bl	8013480 <_Bfree>
 8012b42:	2300      	movs	r3, #0
 8012b44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012b46:	702b      	strb	r3, [r5, #0]
 8012b48:	f10a 0301 	add.w	r3, sl, #1
 8012b4c:	6013      	str	r3, [r2, #0]
 8012b4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	f000 8241 	beq.w	8012fd8 <_dtoa_r+0xb18>
 8012b56:	601d      	str	r5, [r3, #0]
 8012b58:	e23e      	b.n	8012fd8 <_dtoa_r+0xb18>
 8012b5a:	f8cd a020 	str.w	sl, [sp, #32]
 8012b5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012b62:	2a39      	cmp	r2, #57	; 0x39
 8012b64:	f105 33ff 	add.w	r3, r5, #4294967295
 8012b68:	d108      	bne.n	8012b7c <_dtoa_r+0x6bc>
 8012b6a:	459b      	cmp	fp, r3
 8012b6c:	d10a      	bne.n	8012b84 <_dtoa_r+0x6c4>
 8012b6e:	9b08      	ldr	r3, [sp, #32]
 8012b70:	3301      	adds	r3, #1
 8012b72:	9308      	str	r3, [sp, #32]
 8012b74:	2330      	movs	r3, #48	; 0x30
 8012b76:	f88b 3000 	strb.w	r3, [fp]
 8012b7a:	465b      	mov	r3, fp
 8012b7c:	781a      	ldrb	r2, [r3, #0]
 8012b7e:	3201      	adds	r2, #1
 8012b80:	701a      	strb	r2, [r3, #0]
 8012b82:	e78c      	b.n	8012a9e <_dtoa_r+0x5de>
 8012b84:	461d      	mov	r5, r3
 8012b86:	e7ea      	b.n	8012b5e <_dtoa_r+0x69e>
 8012b88:	2200      	movs	r2, #0
 8012b8a:	4b9b      	ldr	r3, [pc, #620]	; (8012df8 <_dtoa_r+0x938>)
 8012b8c:	f7f5 fc6c 	bl	8008468 <__aeabi_dmul>
 8012b90:	2200      	movs	r2, #0
 8012b92:	2300      	movs	r3, #0
 8012b94:	4606      	mov	r6, r0
 8012b96:	460f      	mov	r7, r1
 8012b98:	f7f5 fece 	bl	8008938 <__aeabi_dcmpeq>
 8012b9c:	2800      	cmp	r0, #0
 8012b9e:	d09a      	beq.n	8012ad6 <_dtoa_r+0x616>
 8012ba0:	e7cb      	b.n	8012b3a <_dtoa_r+0x67a>
 8012ba2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ba4:	2a00      	cmp	r2, #0
 8012ba6:	f000 808b 	beq.w	8012cc0 <_dtoa_r+0x800>
 8012baa:	9a06      	ldr	r2, [sp, #24]
 8012bac:	2a01      	cmp	r2, #1
 8012bae:	dc6e      	bgt.n	8012c8e <_dtoa_r+0x7ce>
 8012bb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012bb2:	2a00      	cmp	r2, #0
 8012bb4:	d067      	beq.n	8012c86 <_dtoa_r+0x7c6>
 8012bb6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012bba:	9f07      	ldr	r7, [sp, #28]
 8012bbc:	9d05      	ldr	r5, [sp, #20]
 8012bbe:	9a05      	ldr	r2, [sp, #20]
 8012bc0:	2101      	movs	r1, #1
 8012bc2:	441a      	add	r2, r3
 8012bc4:	4620      	mov	r0, r4
 8012bc6:	9205      	str	r2, [sp, #20]
 8012bc8:	4498      	add	r8, r3
 8012bca:	f000 fcf9 	bl	80135c0 <__i2b>
 8012bce:	4606      	mov	r6, r0
 8012bd0:	2d00      	cmp	r5, #0
 8012bd2:	dd0c      	ble.n	8012bee <_dtoa_r+0x72e>
 8012bd4:	f1b8 0f00 	cmp.w	r8, #0
 8012bd8:	dd09      	ble.n	8012bee <_dtoa_r+0x72e>
 8012bda:	4545      	cmp	r5, r8
 8012bdc:	9a05      	ldr	r2, [sp, #20]
 8012bde:	462b      	mov	r3, r5
 8012be0:	bfa8      	it	ge
 8012be2:	4643      	movge	r3, r8
 8012be4:	1ad2      	subs	r2, r2, r3
 8012be6:	9205      	str	r2, [sp, #20]
 8012be8:	1aed      	subs	r5, r5, r3
 8012bea:	eba8 0803 	sub.w	r8, r8, r3
 8012bee:	9b07      	ldr	r3, [sp, #28]
 8012bf0:	b1eb      	cbz	r3, 8012c2e <_dtoa_r+0x76e>
 8012bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d067      	beq.n	8012cc8 <_dtoa_r+0x808>
 8012bf8:	b18f      	cbz	r7, 8012c1e <_dtoa_r+0x75e>
 8012bfa:	4631      	mov	r1, r6
 8012bfc:	463a      	mov	r2, r7
 8012bfe:	4620      	mov	r0, r4
 8012c00:	f000 fd7e 	bl	8013700 <__pow5mult>
 8012c04:	9a04      	ldr	r2, [sp, #16]
 8012c06:	4601      	mov	r1, r0
 8012c08:	4606      	mov	r6, r0
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	f000 fce1 	bl	80135d2 <__multiply>
 8012c10:	9904      	ldr	r1, [sp, #16]
 8012c12:	9008      	str	r0, [sp, #32]
 8012c14:	4620      	mov	r0, r4
 8012c16:	f000 fc33 	bl	8013480 <_Bfree>
 8012c1a:	9b08      	ldr	r3, [sp, #32]
 8012c1c:	9304      	str	r3, [sp, #16]
 8012c1e:	9b07      	ldr	r3, [sp, #28]
 8012c20:	1bda      	subs	r2, r3, r7
 8012c22:	d004      	beq.n	8012c2e <_dtoa_r+0x76e>
 8012c24:	9904      	ldr	r1, [sp, #16]
 8012c26:	4620      	mov	r0, r4
 8012c28:	f000 fd6a 	bl	8013700 <__pow5mult>
 8012c2c:	9004      	str	r0, [sp, #16]
 8012c2e:	2101      	movs	r1, #1
 8012c30:	4620      	mov	r0, r4
 8012c32:	f000 fcc5 	bl	80135c0 <__i2b>
 8012c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c38:	4607      	mov	r7, r0
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	f000 81d0 	beq.w	8012fe0 <_dtoa_r+0xb20>
 8012c40:	461a      	mov	r2, r3
 8012c42:	4601      	mov	r1, r0
 8012c44:	4620      	mov	r0, r4
 8012c46:	f000 fd5b 	bl	8013700 <__pow5mult>
 8012c4a:	9b06      	ldr	r3, [sp, #24]
 8012c4c:	2b01      	cmp	r3, #1
 8012c4e:	4607      	mov	r7, r0
 8012c50:	dc40      	bgt.n	8012cd4 <_dtoa_r+0x814>
 8012c52:	9b00      	ldr	r3, [sp, #0]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d139      	bne.n	8012ccc <_dtoa_r+0x80c>
 8012c58:	9b01      	ldr	r3, [sp, #4]
 8012c5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d136      	bne.n	8012cd0 <_dtoa_r+0x810>
 8012c62:	9b01      	ldr	r3, [sp, #4]
 8012c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012c68:	0d1b      	lsrs	r3, r3, #20
 8012c6a:	051b      	lsls	r3, r3, #20
 8012c6c:	b12b      	cbz	r3, 8012c7a <_dtoa_r+0x7ba>
 8012c6e:	9b05      	ldr	r3, [sp, #20]
 8012c70:	3301      	adds	r3, #1
 8012c72:	9305      	str	r3, [sp, #20]
 8012c74:	f108 0801 	add.w	r8, r8, #1
 8012c78:	2301      	movs	r3, #1
 8012c7a:	9307      	str	r3, [sp, #28]
 8012c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d12a      	bne.n	8012cd8 <_dtoa_r+0x818>
 8012c82:	2001      	movs	r0, #1
 8012c84:	e030      	b.n	8012ce8 <_dtoa_r+0x828>
 8012c86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012c88:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012c8c:	e795      	b.n	8012bba <_dtoa_r+0x6fa>
 8012c8e:	9b07      	ldr	r3, [sp, #28]
 8012c90:	f109 37ff 	add.w	r7, r9, #4294967295
 8012c94:	42bb      	cmp	r3, r7
 8012c96:	bfbf      	itttt	lt
 8012c98:	9b07      	ldrlt	r3, [sp, #28]
 8012c9a:	9707      	strlt	r7, [sp, #28]
 8012c9c:	1afa      	sublt	r2, r7, r3
 8012c9e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012ca0:	bfbb      	ittet	lt
 8012ca2:	189b      	addlt	r3, r3, r2
 8012ca4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012ca6:	1bdf      	subge	r7, r3, r7
 8012ca8:	2700      	movlt	r7, #0
 8012caa:	f1b9 0f00 	cmp.w	r9, #0
 8012cae:	bfb5      	itete	lt
 8012cb0:	9b05      	ldrlt	r3, [sp, #20]
 8012cb2:	9d05      	ldrge	r5, [sp, #20]
 8012cb4:	eba3 0509 	sublt.w	r5, r3, r9
 8012cb8:	464b      	movge	r3, r9
 8012cba:	bfb8      	it	lt
 8012cbc:	2300      	movlt	r3, #0
 8012cbe:	e77e      	b.n	8012bbe <_dtoa_r+0x6fe>
 8012cc0:	9f07      	ldr	r7, [sp, #28]
 8012cc2:	9d05      	ldr	r5, [sp, #20]
 8012cc4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012cc6:	e783      	b.n	8012bd0 <_dtoa_r+0x710>
 8012cc8:	9a07      	ldr	r2, [sp, #28]
 8012cca:	e7ab      	b.n	8012c24 <_dtoa_r+0x764>
 8012ccc:	2300      	movs	r3, #0
 8012cce:	e7d4      	b.n	8012c7a <_dtoa_r+0x7ba>
 8012cd0:	9b00      	ldr	r3, [sp, #0]
 8012cd2:	e7d2      	b.n	8012c7a <_dtoa_r+0x7ba>
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	9307      	str	r3, [sp, #28]
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012cde:	6918      	ldr	r0, [r3, #16]
 8012ce0:	f000 fc20 	bl	8013524 <__hi0bits>
 8012ce4:	f1c0 0020 	rsb	r0, r0, #32
 8012ce8:	4440      	add	r0, r8
 8012cea:	f010 001f 	ands.w	r0, r0, #31
 8012cee:	d047      	beq.n	8012d80 <_dtoa_r+0x8c0>
 8012cf0:	f1c0 0320 	rsb	r3, r0, #32
 8012cf4:	2b04      	cmp	r3, #4
 8012cf6:	dd3b      	ble.n	8012d70 <_dtoa_r+0x8b0>
 8012cf8:	9b05      	ldr	r3, [sp, #20]
 8012cfa:	f1c0 001c 	rsb	r0, r0, #28
 8012cfe:	4403      	add	r3, r0
 8012d00:	9305      	str	r3, [sp, #20]
 8012d02:	4405      	add	r5, r0
 8012d04:	4480      	add	r8, r0
 8012d06:	9b05      	ldr	r3, [sp, #20]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	dd05      	ble.n	8012d18 <_dtoa_r+0x858>
 8012d0c:	461a      	mov	r2, r3
 8012d0e:	9904      	ldr	r1, [sp, #16]
 8012d10:	4620      	mov	r0, r4
 8012d12:	f000 fd43 	bl	801379c <__lshift>
 8012d16:	9004      	str	r0, [sp, #16]
 8012d18:	f1b8 0f00 	cmp.w	r8, #0
 8012d1c:	dd05      	ble.n	8012d2a <_dtoa_r+0x86a>
 8012d1e:	4639      	mov	r1, r7
 8012d20:	4642      	mov	r2, r8
 8012d22:	4620      	mov	r0, r4
 8012d24:	f000 fd3a 	bl	801379c <__lshift>
 8012d28:	4607      	mov	r7, r0
 8012d2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d2c:	b353      	cbz	r3, 8012d84 <_dtoa_r+0x8c4>
 8012d2e:	4639      	mov	r1, r7
 8012d30:	9804      	ldr	r0, [sp, #16]
 8012d32:	f000 fd87 	bl	8013844 <__mcmp>
 8012d36:	2800      	cmp	r0, #0
 8012d38:	da24      	bge.n	8012d84 <_dtoa_r+0x8c4>
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	220a      	movs	r2, #10
 8012d3e:	9904      	ldr	r1, [sp, #16]
 8012d40:	4620      	mov	r0, r4
 8012d42:	f000 fbb4 	bl	80134ae <__multadd>
 8012d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d48:	9004      	str	r0, [sp, #16]
 8012d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	f000 814d 	beq.w	8012fee <_dtoa_r+0xb2e>
 8012d54:	2300      	movs	r3, #0
 8012d56:	4631      	mov	r1, r6
 8012d58:	220a      	movs	r2, #10
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	f000 fba7 	bl	80134ae <__multadd>
 8012d60:	9b02      	ldr	r3, [sp, #8]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	4606      	mov	r6, r0
 8012d66:	dc4f      	bgt.n	8012e08 <_dtoa_r+0x948>
 8012d68:	9b06      	ldr	r3, [sp, #24]
 8012d6a:	2b02      	cmp	r3, #2
 8012d6c:	dd4c      	ble.n	8012e08 <_dtoa_r+0x948>
 8012d6e:	e011      	b.n	8012d94 <_dtoa_r+0x8d4>
 8012d70:	d0c9      	beq.n	8012d06 <_dtoa_r+0x846>
 8012d72:	9a05      	ldr	r2, [sp, #20]
 8012d74:	331c      	adds	r3, #28
 8012d76:	441a      	add	r2, r3
 8012d78:	9205      	str	r2, [sp, #20]
 8012d7a:	441d      	add	r5, r3
 8012d7c:	4498      	add	r8, r3
 8012d7e:	e7c2      	b.n	8012d06 <_dtoa_r+0x846>
 8012d80:	4603      	mov	r3, r0
 8012d82:	e7f6      	b.n	8012d72 <_dtoa_r+0x8b2>
 8012d84:	f1b9 0f00 	cmp.w	r9, #0
 8012d88:	dc38      	bgt.n	8012dfc <_dtoa_r+0x93c>
 8012d8a:	9b06      	ldr	r3, [sp, #24]
 8012d8c:	2b02      	cmp	r3, #2
 8012d8e:	dd35      	ble.n	8012dfc <_dtoa_r+0x93c>
 8012d90:	f8cd 9008 	str.w	r9, [sp, #8]
 8012d94:	9b02      	ldr	r3, [sp, #8]
 8012d96:	b963      	cbnz	r3, 8012db2 <_dtoa_r+0x8f2>
 8012d98:	4639      	mov	r1, r7
 8012d9a:	2205      	movs	r2, #5
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	f000 fb86 	bl	80134ae <__multadd>
 8012da2:	4601      	mov	r1, r0
 8012da4:	4607      	mov	r7, r0
 8012da6:	9804      	ldr	r0, [sp, #16]
 8012da8:	f000 fd4c 	bl	8013844 <__mcmp>
 8012dac:	2800      	cmp	r0, #0
 8012dae:	f73f adcc 	bgt.w	801294a <_dtoa_r+0x48a>
 8012db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012db4:	465d      	mov	r5, fp
 8012db6:	ea6f 0a03 	mvn.w	sl, r3
 8012dba:	f04f 0900 	mov.w	r9, #0
 8012dbe:	4639      	mov	r1, r7
 8012dc0:	4620      	mov	r0, r4
 8012dc2:	f000 fb5d 	bl	8013480 <_Bfree>
 8012dc6:	2e00      	cmp	r6, #0
 8012dc8:	f43f aeb7 	beq.w	8012b3a <_dtoa_r+0x67a>
 8012dcc:	f1b9 0f00 	cmp.w	r9, #0
 8012dd0:	d005      	beq.n	8012dde <_dtoa_r+0x91e>
 8012dd2:	45b1      	cmp	r9, r6
 8012dd4:	d003      	beq.n	8012dde <_dtoa_r+0x91e>
 8012dd6:	4649      	mov	r1, r9
 8012dd8:	4620      	mov	r0, r4
 8012dda:	f000 fb51 	bl	8013480 <_Bfree>
 8012dde:	4631      	mov	r1, r6
 8012de0:	4620      	mov	r0, r4
 8012de2:	f000 fb4d 	bl	8013480 <_Bfree>
 8012de6:	e6a8      	b.n	8012b3a <_dtoa_r+0x67a>
 8012de8:	2700      	movs	r7, #0
 8012dea:	463e      	mov	r6, r7
 8012dec:	e7e1      	b.n	8012db2 <_dtoa_r+0x8f2>
 8012dee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012df2:	463e      	mov	r6, r7
 8012df4:	e5a9      	b.n	801294a <_dtoa_r+0x48a>
 8012df6:	bf00      	nop
 8012df8:	40240000 	.word	0x40240000
 8012dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dfe:	f8cd 9008 	str.w	r9, [sp, #8]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	f000 80fa 	beq.w	8012ffc <_dtoa_r+0xb3c>
 8012e08:	2d00      	cmp	r5, #0
 8012e0a:	dd05      	ble.n	8012e18 <_dtoa_r+0x958>
 8012e0c:	4631      	mov	r1, r6
 8012e0e:	462a      	mov	r2, r5
 8012e10:	4620      	mov	r0, r4
 8012e12:	f000 fcc3 	bl	801379c <__lshift>
 8012e16:	4606      	mov	r6, r0
 8012e18:	9b07      	ldr	r3, [sp, #28]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d04c      	beq.n	8012eb8 <_dtoa_r+0x9f8>
 8012e1e:	6871      	ldr	r1, [r6, #4]
 8012e20:	4620      	mov	r0, r4
 8012e22:	f000 faf9 	bl	8013418 <_Balloc>
 8012e26:	6932      	ldr	r2, [r6, #16]
 8012e28:	3202      	adds	r2, #2
 8012e2a:	4605      	mov	r5, r0
 8012e2c:	0092      	lsls	r2, r2, #2
 8012e2e:	f106 010c 	add.w	r1, r6, #12
 8012e32:	300c      	adds	r0, #12
 8012e34:	f7fe fd0a 	bl	801184c <memcpy>
 8012e38:	2201      	movs	r2, #1
 8012e3a:	4629      	mov	r1, r5
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	f000 fcad 	bl	801379c <__lshift>
 8012e42:	9b00      	ldr	r3, [sp, #0]
 8012e44:	f8cd b014 	str.w	fp, [sp, #20]
 8012e48:	f003 0301 	and.w	r3, r3, #1
 8012e4c:	46b1      	mov	r9, r6
 8012e4e:	9307      	str	r3, [sp, #28]
 8012e50:	4606      	mov	r6, r0
 8012e52:	4639      	mov	r1, r7
 8012e54:	9804      	ldr	r0, [sp, #16]
 8012e56:	f7ff faa5 	bl	80123a4 <quorem>
 8012e5a:	4649      	mov	r1, r9
 8012e5c:	4605      	mov	r5, r0
 8012e5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012e62:	9804      	ldr	r0, [sp, #16]
 8012e64:	f000 fcee 	bl	8013844 <__mcmp>
 8012e68:	4632      	mov	r2, r6
 8012e6a:	9000      	str	r0, [sp, #0]
 8012e6c:	4639      	mov	r1, r7
 8012e6e:	4620      	mov	r0, r4
 8012e70:	f000 fd02 	bl	8013878 <__mdiff>
 8012e74:	68c3      	ldr	r3, [r0, #12]
 8012e76:	4602      	mov	r2, r0
 8012e78:	bb03      	cbnz	r3, 8012ebc <_dtoa_r+0x9fc>
 8012e7a:	4601      	mov	r1, r0
 8012e7c:	9008      	str	r0, [sp, #32]
 8012e7e:	9804      	ldr	r0, [sp, #16]
 8012e80:	f000 fce0 	bl	8013844 <__mcmp>
 8012e84:	9a08      	ldr	r2, [sp, #32]
 8012e86:	4603      	mov	r3, r0
 8012e88:	4611      	mov	r1, r2
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	9308      	str	r3, [sp, #32]
 8012e8e:	f000 faf7 	bl	8013480 <_Bfree>
 8012e92:	9b08      	ldr	r3, [sp, #32]
 8012e94:	b9a3      	cbnz	r3, 8012ec0 <_dtoa_r+0xa00>
 8012e96:	9a06      	ldr	r2, [sp, #24]
 8012e98:	b992      	cbnz	r2, 8012ec0 <_dtoa_r+0xa00>
 8012e9a:	9a07      	ldr	r2, [sp, #28]
 8012e9c:	b982      	cbnz	r2, 8012ec0 <_dtoa_r+0xa00>
 8012e9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012ea2:	d029      	beq.n	8012ef8 <_dtoa_r+0xa38>
 8012ea4:	9b00      	ldr	r3, [sp, #0]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	dd01      	ble.n	8012eae <_dtoa_r+0x9ee>
 8012eaa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012eae:	9b05      	ldr	r3, [sp, #20]
 8012eb0:	1c5d      	adds	r5, r3, #1
 8012eb2:	f883 8000 	strb.w	r8, [r3]
 8012eb6:	e782      	b.n	8012dbe <_dtoa_r+0x8fe>
 8012eb8:	4630      	mov	r0, r6
 8012eba:	e7c2      	b.n	8012e42 <_dtoa_r+0x982>
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	e7e3      	b.n	8012e88 <_dtoa_r+0x9c8>
 8012ec0:	9a00      	ldr	r2, [sp, #0]
 8012ec2:	2a00      	cmp	r2, #0
 8012ec4:	db04      	blt.n	8012ed0 <_dtoa_r+0xa10>
 8012ec6:	d125      	bne.n	8012f14 <_dtoa_r+0xa54>
 8012ec8:	9a06      	ldr	r2, [sp, #24]
 8012eca:	bb1a      	cbnz	r2, 8012f14 <_dtoa_r+0xa54>
 8012ecc:	9a07      	ldr	r2, [sp, #28]
 8012ece:	bb0a      	cbnz	r2, 8012f14 <_dtoa_r+0xa54>
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	ddec      	ble.n	8012eae <_dtoa_r+0x9ee>
 8012ed4:	2201      	movs	r2, #1
 8012ed6:	9904      	ldr	r1, [sp, #16]
 8012ed8:	4620      	mov	r0, r4
 8012eda:	f000 fc5f 	bl	801379c <__lshift>
 8012ede:	4639      	mov	r1, r7
 8012ee0:	9004      	str	r0, [sp, #16]
 8012ee2:	f000 fcaf 	bl	8013844 <__mcmp>
 8012ee6:	2800      	cmp	r0, #0
 8012ee8:	dc03      	bgt.n	8012ef2 <_dtoa_r+0xa32>
 8012eea:	d1e0      	bne.n	8012eae <_dtoa_r+0x9ee>
 8012eec:	f018 0f01 	tst.w	r8, #1
 8012ef0:	d0dd      	beq.n	8012eae <_dtoa_r+0x9ee>
 8012ef2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012ef6:	d1d8      	bne.n	8012eaa <_dtoa_r+0x9ea>
 8012ef8:	9b05      	ldr	r3, [sp, #20]
 8012efa:	9a05      	ldr	r2, [sp, #20]
 8012efc:	1c5d      	adds	r5, r3, #1
 8012efe:	2339      	movs	r3, #57	; 0x39
 8012f00:	7013      	strb	r3, [r2, #0]
 8012f02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012f06:	2b39      	cmp	r3, #57	; 0x39
 8012f08:	f105 32ff 	add.w	r2, r5, #4294967295
 8012f0c:	d04f      	beq.n	8012fae <_dtoa_r+0xaee>
 8012f0e:	3301      	adds	r3, #1
 8012f10:	7013      	strb	r3, [r2, #0]
 8012f12:	e754      	b.n	8012dbe <_dtoa_r+0x8fe>
 8012f14:	9a05      	ldr	r2, [sp, #20]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	f102 0501 	add.w	r5, r2, #1
 8012f1c:	dd06      	ble.n	8012f2c <_dtoa_r+0xa6c>
 8012f1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012f22:	d0e9      	beq.n	8012ef8 <_dtoa_r+0xa38>
 8012f24:	f108 0801 	add.w	r8, r8, #1
 8012f28:	9b05      	ldr	r3, [sp, #20]
 8012f2a:	e7c2      	b.n	8012eb2 <_dtoa_r+0x9f2>
 8012f2c:	9a02      	ldr	r2, [sp, #8]
 8012f2e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012f32:	eba5 030b 	sub.w	r3, r5, fp
 8012f36:	4293      	cmp	r3, r2
 8012f38:	d021      	beq.n	8012f7e <_dtoa_r+0xabe>
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	220a      	movs	r2, #10
 8012f3e:	9904      	ldr	r1, [sp, #16]
 8012f40:	4620      	mov	r0, r4
 8012f42:	f000 fab4 	bl	80134ae <__multadd>
 8012f46:	45b1      	cmp	r9, r6
 8012f48:	9004      	str	r0, [sp, #16]
 8012f4a:	f04f 0300 	mov.w	r3, #0
 8012f4e:	f04f 020a 	mov.w	r2, #10
 8012f52:	4649      	mov	r1, r9
 8012f54:	4620      	mov	r0, r4
 8012f56:	d105      	bne.n	8012f64 <_dtoa_r+0xaa4>
 8012f58:	f000 faa9 	bl	80134ae <__multadd>
 8012f5c:	4681      	mov	r9, r0
 8012f5e:	4606      	mov	r6, r0
 8012f60:	9505      	str	r5, [sp, #20]
 8012f62:	e776      	b.n	8012e52 <_dtoa_r+0x992>
 8012f64:	f000 faa3 	bl	80134ae <__multadd>
 8012f68:	4631      	mov	r1, r6
 8012f6a:	4681      	mov	r9, r0
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	220a      	movs	r2, #10
 8012f70:	4620      	mov	r0, r4
 8012f72:	f000 fa9c 	bl	80134ae <__multadd>
 8012f76:	4606      	mov	r6, r0
 8012f78:	e7f2      	b.n	8012f60 <_dtoa_r+0xaa0>
 8012f7a:	f04f 0900 	mov.w	r9, #0
 8012f7e:	2201      	movs	r2, #1
 8012f80:	9904      	ldr	r1, [sp, #16]
 8012f82:	4620      	mov	r0, r4
 8012f84:	f000 fc0a 	bl	801379c <__lshift>
 8012f88:	4639      	mov	r1, r7
 8012f8a:	9004      	str	r0, [sp, #16]
 8012f8c:	f000 fc5a 	bl	8013844 <__mcmp>
 8012f90:	2800      	cmp	r0, #0
 8012f92:	dcb6      	bgt.n	8012f02 <_dtoa_r+0xa42>
 8012f94:	d102      	bne.n	8012f9c <_dtoa_r+0xadc>
 8012f96:	f018 0f01 	tst.w	r8, #1
 8012f9a:	d1b2      	bne.n	8012f02 <_dtoa_r+0xa42>
 8012f9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012fa0:	2b30      	cmp	r3, #48	; 0x30
 8012fa2:	f105 32ff 	add.w	r2, r5, #4294967295
 8012fa6:	f47f af0a 	bne.w	8012dbe <_dtoa_r+0x8fe>
 8012faa:	4615      	mov	r5, r2
 8012fac:	e7f6      	b.n	8012f9c <_dtoa_r+0xadc>
 8012fae:	4593      	cmp	fp, r2
 8012fb0:	d105      	bne.n	8012fbe <_dtoa_r+0xafe>
 8012fb2:	2331      	movs	r3, #49	; 0x31
 8012fb4:	f10a 0a01 	add.w	sl, sl, #1
 8012fb8:	f88b 3000 	strb.w	r3, [fp]
 8012fbc:	e6ff      	b.n	8012dbe <_dtoa_r+0x8fe>
 8012fbe:	4615      	mov	r5, r2
 8012fc0:	e79f      	b.n	8012f02 <_dtoa_r+0xa42>
 8012fc2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8013028 <_dtoa_r+0xb68>
 8012fc6:	e007      	b.n	8012fd8 <_dtoa_r+0xb18>
 8012fc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012fca:	f8df b060 	ldr.w	fp, [pc, #96]	; 801302c <_dtoa_r+0xb6c>
 8012fce:	b11b      	cbz	r3, 8012fd8 <_dtoa_r+0xb18>
 8012fd0:	f10b 0308 	add.w	r3, fp, #8
 8012fd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012fd6:	6013      	str	r3, [r2, #0]
 8012fd8:	4658      	mov	r0, fp
 8012fda:	b017      	add	sp, #92	; 0x5c
 8012fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fe0:	9b06      	ldr	r3, [sp, #24]
 8012fe2:	2b01      	cmp	r3, #1
 8012fe4:	f77f ae35 	ble.w	8012c52 <_dtoa_r+0x792>
 8012fe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012fea:	9307      	str	r3, [sp, #28]
 8012fec:	e649      	b.n	8012c82 <_dtoa_r+0x7c2>
 8012fee:	9b02      	ldr	r3, [sp, #8]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	dc03      	bgt.n	8012ffc <_dtoa_r+0xb3c>
 8012ff4:	9b06      	ldr	r3, [sp, #24]
 8012ff6:	2b02      	cmp	r3, #2
 8012ff8:	f73f aecc 	bgt.w	8012d94 <_dtoa_r+0x8d4>
 8012ffc:	465d      	mov	r5, fp
 8012ffe:	4639      	mov	r1, r7
 8013000:	9804      	ldr	r0, [sp, #16]
 8013002:	f7ff f9cf 	bl	80123a4 <quorem>
 8013006:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801300a:	f805 8b01 	strb.w	r8, [r5], #1
 801300e:	9a02      	ldr	r2, [sp, #8]
 8013010:	eba5 030b 	sub.w	r3, r5, fp
 8013014:	429a      	cmp	r2, r3
 8013016:	ddb0      	ble.n	8012f7a <_dtoa_r+0xaba>
 8013018:	2300      	movs	r3, #0
 801301a:	220a      	movs	r2, #10
 801301c:	9904      	ldr	r1, [sp, #16]
 801301e:	4620      	mov	r0, r4
 8013020:	f000 fa45 	bl	80134ae <__multadd>
 8013024:	9004      	str	r0, [sp, #16]
 8013026:	e7ea      	b.n	8012ffe <_dtoa_r+0xb3e>
 8013028:	0801406c 	.word	0x0801406c
 801302c:	08014090 	.word	0x08014090

08013030 <__sflush_r>:
 8013030:	898a      	ldrh	r2, [r1, #12]
 8013032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013036:	4605      	mov	r5, r0
 8013038:	0710      	lsls	r0, r2, #28
 801303a:	460c      	mov	r4, r1
 801303c:	d458      	bmi.n	80130f0 <__sflush_r+0xc0>
 801303e:	684b      	ldr	r3, [r1, #4]
 8013040:	2b00      	cmp	r3, #0
 8013042:	dc05      	bgt.n	8013050 <__sflush_r+0x20>
 8013044:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013046:	2b00      	cmp	r3, #0
 8013048:	dc02      	bgt.n	8013050 <__sflush_r+0x20>
 801304a:	2000      	movs	r0, #0
 801304c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013052:	2e00      	cmp	r6, #0
 8013054:	d0f9      	beq.n	801304a <__sflush_r+0x1a>
 8013056:	2300      	movs	r3, #0
 8013058:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801305c:	682f      	ldr	r7, [r5, #0]
 801305e:	6a21      	ldr	r1, [r4, #32]
 8013060:	602b      	str	r3, [r5, #0]
 8013062:	d032      	beq.n	80130ca <__sflush_r+0x9a>
 8013064:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013066:	89a3      	ldrh	r3, [r4, #12]
 8013068:	075a      	lsls	r2, r3, #29
 801306a:	d505      	bpl.n	8013078 <__sflush_r+0x48>
 801306c:	6863      	ldr	r3, [r4, #4]
 801306e:	1ac0      	subs	r0, r0, r3
 8013070:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013072:	b10b      	cbz	r3, 8013078 <__sflush_r+0x48>
 8013074:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013076:	1ac0      	subs	r0, r0, r3
 8013078:	2300      	movs	r3, #0
 801307a:	4602      	mov	r2, r0
 801307c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801307e:	6a21      	ldr	r1, [r4, #32]
 8013080:	4628      	mov	r0, r5
 8013082:	47b0      	blx	r6
 8013084:	1c43      	adds	r3, r0, #1
 8013086:	89a3      	ldrh	r3, [r4, #12]
 8013088:	d106      	bne.n	8013098 <__sflush_r+0x68>
 801308a:	6829      	ldr	r1, [r5, #0]
 801308c:	291d      	cmp	r1, #29
 801308e:	d848      	bhi.n	8013122 <__sflush_r+0xf2>
 8013090:	4a29      	ldr	r2, [pc, #164]	; (8013138 <__sflush_r+0x108>)
 8013092:	40ca      	lsrs	r2, r1
 8013094:	07d6      	lsls	r6, r2, #31
 8013096:	d544      	bpl.n	8013122 <__sflush_r+0xf2>
 8013098:	2200      	movs	r2, #0
 801309a:	6062      	str	r2, [r4, #4]
 801309c:	04d9      	lsls	r1, r3, #19
 801309e:	6922      	ldr	r2, [r4, #16]
 80130a0:	6022      	str	r2, [r4, #0]
 80130a2:	d504      	bpl.n	80130ae <__sflush_r+0x7e>
 80130a4:	1c42      	adds	r2, r0, #1
 80130a6:	d101      	bne.n	80130ac <__sflush_r+0x7c>
 80130a8:	682b      	ldr	r3, [r5, #0]
 80130aa:	b903      	cbnz	r3, 80130ae <__sflush_r+0x7e>
 80130ac:	6560      	str	r0, [r4, #84]	; 0x54
 80130ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80130b0:	602f      	str	r7, [r5, #0]
 80130b2:	2900      	cmp	r1, #0
 80130b4:	d0c9      	beq.n	801304a <__sflush_r+0x1a>
 80130b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130ba:	4299      	cmp	r1, r3
 80130bc:	d002      	beq.n	80130c4 <__sflush_r+0x94>
 80130be:	4628      	mov	r0, r5
 80130c0:	f000 fc94 	bl	80139ec <_free_r>
 80130c4:	2000      	movs	r0, #0
 80130c6:	6360      	str	r0, [r4, #52]	; 0x34
 80130c8:	e7c0      	b.n	801304c <__sflush_r+0x1c>
 80130ca:	2301      	movs	r3, #1
 80130cc:	4628      	mov	r0, r5
 80130ce:	47b0      	blx	r6
 80130d0:	1c41      	adds	r1, r0, #1
 80130d2:	d1c8      	bne.n	8013066 <__sflush_r+0x36>
 80130d4:	682b      	ldr	r3, [r5, #0]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d0c5      	beq.n	8013066 <__sflush_r+0x36>
 80130da:	2b1d      	cmp	r3, #29
 80130dc:	d001      	beq.n	80130e2 <__sflush_r+0xb2>
 80130de:	2b16      	cmp	r3, #22
 80130e0:	d101      	bne.n	80130e6 <__sflush_r+0xb6>
 80130e2:	602f      	str	r7, [r5, #0]
 80130e4:	e7b1      	b.n	801304a <__sflush_r+0x1a>
 80130e6:	89a3      	ldrh	r3, [r4, #12]
 80130e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130ec:	81a3      	strh	r3, [r4, #12]
 80130ee:	e7ad      	b.n	801304c <__sflush_r+0x1c>
 80130f0:	690f      	ldr	r7, [r1, #16]
 80130f2:	2f00      	cmp	r7, #0
 80130f4:	d0a9      	beq.n	801304a <__sflush_r+0x1a>
 80130f6:	0793      	lsls	r3, r2, #30
 80130f8:	680e      	ldr	r6, [r1, #0]
 80130fa:	bf08      	it	eq
 80130fc:	694b      	ldreq	r3, [r1, #20]
 80130fe:	600f      	str	r7, [r1, #0]
 8013100:	bf18      	it	ne
 8013102:	2300      	movne	r3, #0
 8013104:	eba6 0807 	sub.w	r8, r6, r7
 8013108:	608b      	str	r3, [r1, #8]
 801310a:	f1b8 0f00 	cmp.w	r8, #0
 801310e:	dd9c      	ble.n	801304a <__sflush_r+0x1a>
 8013110:	4643      	mov	r3, r8
 8013112:	463a      	mov	r2, r7
 8013114:	6a21      	ldr	r1, [r4, #32]
 8013116:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013118:	4628      	mov	r0, r5
 801311a:	47b0      	blx	r6
 801311c:	2800      	cmp	r0, #0
 801311e:	dc06      	bgt.n	801312e <__sflush_r+0xfe>
 8013120:	89a3      	ldrh	r3, [r4, #12]
 8013122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013126:	81a3      	strh	r3, [r4, #12]
 8013128:	f04f 30ff 	mov.w	r0, #4294967295
 801312c:	e78e      	b.n	801304c <__sflush_r+0x1c>
 801312e:	4407      	add	r7, r0
 8013130:	eba8 0800 	sub.w	r8, r8, r0
 8013134:	e7e9      	b.n	801310a <__sflush_r+0xda>
 8013136:	bf00      	nop
 8013138:	20400001 	.word	0x20400001

0801313c <_fflush_r>:
 801313c:	b538      	push	{r3, r4, r5, lr}
 801313e:	690b      	ldr	r3, [r1, #16]
 8013140:	4605      	mov	r5, r0
 8013142:	460c      	mov	r4, r1
 8013144:	b1db      	cbz	r3, 801317e <_fflush_r+0x42>
 8013146:	b118      	cbz	r0, 8013150 <_fflush_r+0x14>
 8013148:	6983      	ldr	r3, [r0, #24]
 801314a:	b90b      	cbnz	r3, 8013150 <_fflush_r+0x14>
 801314c:	f000 f860 	bl	8013210 <__sinit>
 8013150:	4b0c      	ldr	r3, [pc, #48]	; (8013184 <_fflush_r+0x48>)
 8013152:	429c      	cmp	r4, r3
 8013154:	d109      	bne.n	801316a <_fflush_r+0x2e>
 8013156:	686c      	ldr	r4, [r5, #4]
 8013158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801315c:	b17b      	cbz	r3, 801317e <_fflush_r+0x42>
 801315e:	4621      	mov	r1, r4
 8013160:	4628      	mov	r0, r5
 8013162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013166:	f7ff bf63 	b.w	8013030 <__sflush_r>
 801316a:	4b07      	ldr	r3, [pc, #28]	; (8013188 <_fflush_r+0x4c>)
 801316c:	429c      	cmp	r4, r3
 801316e:	d101      	bne.n	8013174 <_fflush_r+0x38>
 8013170:	68ac      	ldr	r4, [r5, #8]
 8013172:	e7f1      	b.n	8013158 <_fflush_r+0x1c>
 8013174:	4b05      	ldr	r3, [pc, #20]	; (801318c <_fflush_r+0x50>)
 8013176:	429c      	cmp	r4, r3
 8013178:	bf08      	it	eq
 801317a:	68ec      	ldreq	r4, [r5, #12]
 801317c:	e7ec      	b.n	8013158 <_fflush_r+0x1c>
 801317e:	2000      	movs	r0, #0
 8013180:	bd38      	pop	{r3, r4, r5, pc}
 8013182:	bf00      	nop
 8013184:	080140c0 	.word	0x080140c0
 8013188:	080140e0 	.word	0x080140e0
 801318c:	080140a0 	.word	0x080140a0

08013190 <std>:
 8013190:	2300      	movs	r3, #0
 8013192:	b510      	push	{r4, lr}
 8013194:	4604      	mov	r4, r0
 8013196:	e9c0 3300 	strd	r3, r3, [r0]
 801319a:	6083      	str	r3, [r0, #8]
 801319c:	8181      	strh	r1, [r0, #12]
 801319e:	6643      	str	r3, [r0, #100]	; 0x64
 80131a0:	81c2      	strh	r2, [r0, #14]
 80131a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80131a6:	6183      	str	r3, [r0, #24]
 80131a8:	4619      	mov	r1, r3
 80131aa:	2208      	movs	r2, #8
 80131ac:	305c      	adds	r0, #92	; 0x5c
 80131ae:	f7fe fb58 	bl	8011862 <memset>
 80131b2:	4b05      	ldr	r3, [pc, #20]	; (80131c8 <std+0x38>)
 80131b4:	6263      	str	r3, [r4, #36]	; 0x24
 80131b6:	4b05      	ldr	r3, [pc, #20]	; (80131cc <std+0x3c>)
 80131b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80131ba:	4b05      	ldr	r3, [pc, #20]	; (80131d0 <std+0x40>)
 80131bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80131be:	4b05      	ldr	r3, [pc, #20]	; (80131d4 <std+0x44>)
 80131c0:	6224      	str	r4, [r4, #32]
 80131c2:	6323      	str	r3, [r4, #48]	; 0x30
 80131c4:	bd10      	pop	{r4, pc}
 80131c6:	bf00      	nop
 80131c8:	08013ddd 	.word	0x08013ddd
 80131cc:	08013dff 	.word	0x08013dff
 80131d0:	08013e37 	.word	0x08013e37
 80131d4:	08013e5b 	.word	0x08013e5b

080131d8 <_cleanup_r>:
 80131d8:	4901      	ldr	r1, [pc, #4]	; (80131e0 <_cleanup_r+0x8>)
 80131da:	f000 b885 	b.w	80132e8 <_fwalk_reent>
 80131de:	bf00      	nop
 80131e0:	0801313d 	.word	0x0801313d

080131e4 <__sfmoreglue>:
 80131e4:	b570      	push	{r4, r5, r6, lr}
 80131e6:	1e4a      	subs	r2, r1, #1
 80131e8:	2568      	movs	r5, #104	; 0x68
 80131ea:	4355      	muls	r5, r2
 80131ec:	460e      	mov	r6, r1
 80131ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80131f2:	f000 fc49 	bl	8013a88 <_malloc_r>
 80131f6:	4604      	mov	r4, r0
 80131f8:	b140      	cbz	r0, 801320c <__sfmoreglue+0x28>
 80131fa:	2100      	movs	r1, #0
 80131fc:	e9c0 1600 	strd	r1, r6, [r0]
 8013200:	300c      	adds	r0, #12
 8013202:	60a0      	str	r0, [r4, #8]
 8013204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013208:	f7fe fb2b 	bl	8011862 <memset>
 801320c:	4620      	mov	r0, r4
 801320e:	bd70      	pop	{r4, r5, r6, pc}

08013210 <__sinit>:
 8013210:	6983      	ldr	r3, [r0, #24]
 8013212:	b510      	push	{r4, lr}
 8013214:	4604      	mov	r4, r0
 8013216:	bb33      	cbnz	r3, 8013266 <__sinit+0x56>
 8013218:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801321c:	6503      	str	r3, [r0, #80]	; 0x50
 801321e:	4b12      	ldr	r3, [pc, #72]	; (8013268 <__sinit+0x58>)
 8013220:	4a12      	ldr	r2, [pc, #72]	; (801326c <__sinit+0x5c>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	6282      	str	r2, [r0, #40]	; 0x28
 8013226:	4298      	cmp	r0, r3
 8013228:	bf04      	itt	eq
 801322a:	2301      	moveq	r3, #1
 801322c:	6183      	streq	r3, [r0, #24]
 801322e:	f000 f81f 	bl	8013270 <__sfp>
 8013232:	6060      	str	r0, [r4, #4]
 8013234:	4620      	mov	r0, r4
 8013236:	f000 f81b 	bl	8013270 <__sfp>
 801323a:	60a0      	str	r0, [r4, #8]
 801323c:	4620      	mov	r0, r4
 801323e:	f000 f817 	bl	8013270 <__sfp>
 8013242:	2200      	movs	r2, #0
 8013244:	60e0      	str	r0, [r4, #12]
 8013246:	2104      	movs	r1, #4
 8013248:	6860      	ldr	r0, [r4, #4]
 801324a:	f7ff ffa1 	bl	8013190 <std>
 801324e:	2201      	movs	r2, #1
 8013250:	2109      	movs	r1, #9
 8013252:	68a0      	ldr	r0, [r4, #8]
 8013254:	f7ff ff9c 	bl	8013190 <std>
 8013258:	2202      	movs	r2, #2
 801325a:	2112      	movs	r1, #18
 801325c:	68e0      	ldr	r0, [r4, #12]
 801325e:	f7ff ff97 	bl	8013190 <std>
 8013262:	2301      	movs	r3, #1
 8013264:	61a3      	str	r3, [r4, #24]
 8013266:	bd10      	pop	{r4, pc}
 8013268:	08014058 	.word	0x08014058
 801326c:	080131d9 	.word	0x080131d9

08013270 <__sfp>:
 8013270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013272:	4b1b      	ldr	r3, [pc, #108]	; (80132e0 <__sfp+0x70>)
 8013274:	681e      	ldr	r6, [r3, #0]
 8013276:	69b3      	ldr	r3, [r6, #24]
 8013278:	4607      	mov	r7, r0
 801327a:	b913      	cbnz	r3, 8013282 <__sfp+0x12>
 801327c:	4630      	mov	r0, r6
 801327e:	f7ff ffc7 	bl	8013210 <__sinit>
 8013282:	3648      	adds	r6, #72	; 0x48
 8013284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013288:	3b01      	subs	r3, #1
 801328a:	d503      	bpl.n	8013294 <__sfp+0x24>
 801328c:	6833      	ldr	r3, [r6, #0]
 801328e:	b133      	cbz	r3, 801329e <__sfp+0x2e>
 8013290:	6836      	ldr	r6, [r6, #0]
 8013292:	e7f7      	b.n	8013284 <__sfp+0x14>
 8013294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013298:	b16d      	cbz	r5, 80132b6 <__sfp+0x46>
 801329a:	3468      	adds	r4, #104	; 0x68
 801329c:	e7f4      	b.n	8013288 <__sfp+0x18>
 801329e:	2104      	movs	r1, #4
 80132a0:	4638      	mov	r0, r7
 80132a2:	f7ff ff9f 	bl	80131e4 <__sfmoreglue>
 80132a6:	6030      	str	r0, [r6, #0]
 80132a8:	2800      	cmp	r0, #0
 80132aa:	d1f1      	bne.n	8013290 <__sfp+0x20>
 80132ac:	230c      	movs	r3, #12
 80132ae:	603b      	str	r3, [r7, #0]
 80132b0:	4604      	mov	r4, r0
 80132b2:	4620      	mov	r0, r4
 80132b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132b6:	4b0b      	ldr	r3, [pc, #44]	; (80132e4 <__sfp+0x74>)
 80132b8:	6665      	str	r5, [r4, #100]	; 0x64
 80132ba:	e9c4 5500 	strd	r5, r5, [r4]
 80132be:	60a5      	str	r5, [r4, #8]
 80132c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80132c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80132c8:	2208      	movs	r2, #8
 80132ca:	4629      	mov	r1, r5
 80132cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80132d0:	f7fe fac7 	bl	8011862 <memset>
 80132d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80132d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80132dc:	e7e9      	b.n	80132b2 <__sfp+0x42>
 80132de:	bf00      	nop
 80132e0:	08014058 	.word	0x08014058
 80132e4:	ffff0001 	.word	0xffff0001

080132e8 <_fwalk_reent>:
 80132e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132ec:	4680      	mov	r8, r0
 80132ee:	4689      	mov	r9, r1
 80132f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80132f4:	2600      	movs	r6, #0
 80132f6:	b914      	cbnz	r4, 80132fe <_fwalk_reent+0x16>
 80132f8:	4630      	mov	r0, r6
 80132fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013302:	3f01      	subs	r7, #1
 8013304:	d501      	bpl.n	801330a <_fwalk_reent+0x22>
 8013306:	6824      	ldr	r4, [r4, #0]
 8013308:	e7f5      	b.n	80132f6 <_fwalk_reent+0xe>
 801330a:	89ab      	ldrh	r3, [r5, #12]
 801330c:	2b01      	cmp	r3, #1
 801330e:	d907      	bls.n	8013320 <_fwalk_reent+0x38>
 8013310:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013314:	3301      	adds	r3, #1
 8013316:	d003      	beq.n	8013320 <_fwalk_reent+0x38>
 8013318:	4629      	mov	r1, r5
 801331a:	4640      	mov	r0, r8
 801331c:	47c8      	blx	r9
 801331e:	4306      	orrs	r6, r0
 8013320:	3568      	adds	r5, #104	; 0x68
 8013322:	e7ee      	b.n	8013302 <_fwalk_reent+0x1a>

08013324 <_localeconv_r>:
 8013324:	4b04      	ldr	r3, [pc, #16]	; (8013338 <_localeconv_r+0x14>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	6a18      	ldr	r0, [r3, #32]
 801332a:	4b04      	ldr	r3, [pc, #16]	; (801333c <_localeconv_r+0x18>)
 801332c:	2800      	cmp	r0, #0
 801332e:	bf08      	it	eq
 8013330:	4618      	moveq	r0, r3
 8013332:	30f0      	adds	r0, #240	; 0xf0
 8013334:	4770      	bx	lr
 8013336:	bf00      	nop
 8013338:	20000010 	.word	0x20000010
 801333c:	20000074 	.word	0x20000074

08013340 <__swhatbuf_r>:
 8013340:	b570      	push	{r4, r5, r6, lr}
 8013342:	460e      	mov	r6, r1
 8013344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013348:	2900      	cmp	r1, #0
 801334a:	b096      	sub	sp, #88	; 0x58
 801334c:	4614      	mov	r4, r2
 801334e:	461d      	mov	r5, r3
 8013350:	da07      	bge.n	8013362 <__swhatbuf_r+0x22>
 8013352:	2300      	movs	r3, #0
 8013354:	602b      	str	r3, [r5, #0]
 8013356:	89b3      	ldrh	r3, [r6, #12]
 8013358:	061a      	lsls	r2, r3, #24
 801335a:	d410      	bmi.n	801337e <__swhatbuf_r+0x3e>
 801335c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013360:	e00e      	b.n	8013380 <__swhatbuf_r+0x40>
 8013362:	466a      	mov	r2, sp
 8013364:	f000 fda0 	bl	8013ea8 <_fstat_r>
 8013368:	2800      	cmp	r0, #0
 801336a:	dbf2      	blt.n	8013352 <__swhatbuf_r+0x12>
 801336c:	9a01      	ldr	r2, [sp, #4]
 801336e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013372:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013376:	425a      	negs	r2, r3
 8013378:	415a      	adcs	r2, r3
 801337a:	602a      	str	r2, [r5, #0]
 801337c:	e7ee      	b.n	801335c <__swhatbuf_r+0x1c>
 801337e:	2340      	movs	r3, #64	; 0x40
 8013380:	2000      	movs	r0, #0
 8013382:	6023      	str	r3, [r4, #0]
 8013384:	b016      	add	sp, #88	; 0x58
 8013386:	bd70      	pop	{r4, r5, r6, pc}

08013388 <__smakebuf_r>:
 8013388:	898b      	ldrh	r3, [r1, #12]
 801338a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801338c:	079d      	lsls	r5, r3, #30
 801338e:	4606      	mov	r6, r0
 8013390:	460c      	mov	r4, r1
 8013392:	d507      	bpl.n	80133a4 <__smakebuf_r+0x1c>
 8013394:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013398:	6023      	str	r3, [r4, #0]
 801339a:	6123      	str	r3, [r4, #16]
 801339c:	2301      	movs	r3, #1
 801339e:	6163      	str	r3, [r4, #20]
 80133a0:	b002      	add	sp, #8
 80133a2:	bd70      	pop	{r4, r5, r6, pc}
 80133a4:	ab01      	add	r3, sp, #4
 80133a6:	466a      	mov	r2, sp
 80133a8:	f7ff ffca 	bl	8013340 <__swhatbuf_r>
 80133ac:	9900      	ldr	r1, [sp, #0]
 80133ae:	4605      	mov	r5, r0
 80133b0:	4630      	mov	r0, r6
 80133b2:	f000 fb69 	bl	8013a88 <_malloc_r>
 80133b6:	b948      	cbnz	r0, 80133cc <__smakebuf_r+0x44>
 80133b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133bc:	059a      	lsls	r2, r3, #22
 80133be:	d4ef      	bmi.n	80133a0 <__smakebuf_r+0x18>
 80133c0:	f023 0303 	bic.w	r3, r3, #3
 80133c4:	f043 0302 	orr.w	r3, r3, #2
 80133c8:	81a3      	strh	r3, [r4, #12]
 80133ca:	e7e3      	b.n	8013394 <__smakebuf_r+0xc>
 80133cc:	4b0d      	ldr	r3, [pc, #52]	; (8013404 <__smakebuf_r+0x7c>)
 80133ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80133d0:	89a3      	ldrh	r3, [r4, #12]
 80133d2:	6020      	str	r0, [r4, #0]
 80133d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133d8:	81a3      	strh	r3, [r4, #12]
 80133da:	9b00      	ldr	r3, [sp, #0]
 80133dc:	6163      	str	r3, [r4, #20]
 80133de:	9b01      	ldr	r3, [sp, #4]
 80133e0:	6120      	str	r0, [r4, #16]
 80133e2:	b15b      	cbz	r3, 80133fc <__smakebuf_r+0x74>
 80133e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133e8:	4630      	mov	r0, r6
 80133ea:	f000 fd6f 	bl	8013ecc <_isatty_r>
 80133ee:	b128      	cbz	r0, 80133fc <__smakebuf_r+0x74>
 80133f0:	89a3      	ldrh	r3, [r4, #12]
 80133f2:	f023 0303 	bic.w	r3, r3, #3
 80133f6:	f043 0301 	orr.w	r3, r3, #1
 80133fa:	81a3      	strh	r3, [r4, #12]
 80133fc:	89a3      	ldrh	r3, [r4, #12]
 80133fe:	431d      	orrs	r5, r3
 8013400:	81a5      	strh	r5, [r4, #12]
 8013402:	e7cd      	b.n	80133a0 <__smakebuf_r+0x18>
 8013404:	080131d9 	.word	0x080131d9

08013408 <malloc>:
 8013408:	4b02      	ldr	r3, [pc, #8]	; (8013414 <malloc+0xc>)
 801340a:	4601      	mov	r1, r0
 801340c:	6818      	ldr	r0, [r3, #0]
 801340e:	f000 bb3b 	b.w	8013a88 <_malloc_r>
 8013412:	bf00      	nop
 8013414:	20000010 	.word	0x20000010

08013418 <_Balloc>:
 8013418:	b570      	push	{r4, r5, r6, lr}
 801341a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801341c:	4604      	mov	r4, r0
 801341e:	460e      	mov	r6, r1
 8013420:	b93d      	cbnz	r5, 8013432 <_Balloc+0x1a>
 8013422:	2010      	movs	r0, #16
 8013424:	f7ff fff0 	bl	8013408 <malloc>
 8013428:	6260      	str	r0, [r4, #36]	; 0x24
 801342a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801342e:	6005      	str	r5, [r0, #0]
 8013430:	60c5      	str	r5, [r0, #12]
 8013432:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013434:	68eb      	ldr	r3, [r5, #12]
 8013436:	b183      	cbz	r3, 801345a <_Balloc+0x42>
 8013438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801343a:	68db      	ldr	r3, [r3, #12]
 801343c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013440:	b9b8      	cbnz	r0, 8013472 <_Balloc+0x5a>
 8013442:	2101      	movs	r1, #1
 8013444:	fa01 f506 	lsl.w	r5, r1, r6
 8013448:	1d6a      	adds	r2, r5, #5
 801344a:	0092      	lsls	r2, r2, #2
 801344c:	4620      	mov	r0, r4
 801344e:	f000 fabf 	bl	80139d0 <_calloc_r>
 8013452:	b160      	cbz	r0, 801346e <_Balloc+0x56>
 8013454:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013458:	e00e      	b.n	8013478 <_Balloc+0x60>
 801345a:	2221      	movs	r2, #33	; 0x21
 801345c:	2104      	movs	r1, #4
 801345e:	4620      	mov	r0, r4
 8013460:	f000 fab6 	bl	80139d0 <_calloc_r>
 8013464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013466:	60e8      	str	r0, [r5, #12]
 8013468:	68db      	ldr	r3, [r3, #12]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d1e4      	bne.n	8013438 <_Balloc+0x20>
 801346e:	2000      	movs	r0, #0
 8013470:	bd70      	pop	{r4, r5, r6, pc}
 8013472:	6802      	ldr	r2, [r0, #0]
 8013474:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013478:	2300      	movs	r3, #0
 801347a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801347e:	e7f7      	b.n	8013470 <_Balloc+0x58>

08013480 <_Bfree>:
 8013480:	b570      	push	{r4, r5, r6, lr}
 8013482:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013484:	4606      	mov	r6, r0
 8013486:	460d      	mov	r5, r1
 8013488:	b93c      	cbnz	r4, 801349a <_Bfree+0x1a>
 801348a:	2010      	movs	r0, #16
 801348c:	f7ff ffbc 	bl	8013408 <malloc>
 8013490:	6270      	str	r0, [r6, #36]	; 0x24
 8013492:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013496:	6004      	str	r4, [r0, #0]
 8013498:	60c4      	str	r4, [r0, #12]
 801349a:	b13d      	cbz	r5, 80134ac <_Bfree+0x2c>
 801349c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801349e:	686a      	ldr	r2, [r5, #4]
 80134a0:	68db      	ldr	r3, [r3, #12]
 80134a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80134a6:	6029      	str	r1, [r5, #0]
 80134a8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80134ac:	bd70      	pop	{r4, r5, r6, pc}

080134ae <__multadd>:
 80134ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134b2:	690d      	ldr	r5, [r1, #16]
 80134b4:	461f      	mov	r7, r3
 80134b6:	4606      	mov	r6, r0
 80134b8:	460c      	mov	r4, r1
 80134ba:	f101 0c14 	add.w	ip, r1, #20
 80134be:	2300      	movs	r3, #0
 80134c0:	f8dc 0000 	ldr.w	r0, [ip]
 80134c4:	b281      	uxth	r1, r0
 80134c6:	fb02 7101 	mla	r1, r2, r1, r7
 80134ca:	0c0f      	lsrs	r7, r1, #16
 80134cc:	0c00      	lsrs	r0, r0, #16
 80134ce:	fb02 7000 	mla	r0, r2, r0, r7
 80134d2:	b289      	uxth	r1, r1
 80134d4:	3301      	adds	r3, #1
 80134d6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80134da:	429d      	cmp	r5, r3
 80134dc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80134e0:	f84c 1b04 	str.w	r1, [ip], #4
 80134e4:	dcec      	bgt.n	80134c0 <__multadd+0x12>
 80134e6:	b1d7      	cbz	r7, 801351e <__multadd+0x70>
 80134e8:	68a3      	ldr	r3, [r4, #8]
 80134ea:	42ab      	cmp	r3, r5
 80134ec:	dc12      	bgt.n	8013514 <__multadd+0x66>
 80134ee:	6861      	ldr	r1, [r4, #4]
 80134f0:	4630      	mov	r0, r6
 80134f2:	3101      	adds	r1, #1
 80134f4:	f7ff ff90 	bl	8013418 <_Balloc>
 80134f8:	6922      	ldr	r2, [r4, #16]
 80134fa:	3202      	adds	r2, #2
 80134fc:	f104 010c 	add.w	r1, r4, #12
 8013500:	4680      	mov	r8, r0
 8013502:	0092      	lsls	r2, r2, #2
 8013504:	300c      	adds	r0, #12
 8013506:	f7fe f9a1 	bl	801184c <memcpy>
 801350a:	4621      	mov	r1, r4
 801350c:	4630      	mov	r0, r6
 801350e:	f7ff ffb7 	bl	8013480 <_Bfree>
 8013512:	4644      	mov	r4, r8
 8013514:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013518:	3501      	adds	r5, #1
 801351a:	615f      	str	r7, [r3, #20]
 801351c:	6125      	str	r5, [r4, #16]
 801351e:	4620      	mov	r0, r4
 8013520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013524 <__hi0bits>:
 8013524:	0c02      	lsrs	r2, r0, #16
 8013526:	0412      	lsls	r2, r2, #16
 8013528:	4603      	mov	r3, r0
 801352a:	b9b2      	cbnz	r2, 801355a <__hi0bits+0x36>
 801352c:	0403      	lsls	r3, r0, #16
 801352e:	2010      	movs	r0, #16
 8013530:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013534:	bf04      	itt	eq
 8013536:	021b      	lsleq	r3, r3, #8
 8013538:	3008      	addeq	r0, #8
 801353a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801353e:	bf04      	itt	eq
 8013540:	011b      	lsleq	r3, r3, #4
 8013542:	3004      	addeq	r0, #4
 8013544:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013548:	bf04      	itt	eq
 801354a:	009b      	lsleq	r3, r3, #2
 801354c:	3002      	addeq	r0, #2
 801354e:	2b00      	cmp	r3, #0
 8013550:	db06      	blt.n	8013560 <__hi0bits+0x3c>
 8013552:	005b      	lsls	r3, r3, #1
 8013554:	d503      	bpl.n	801355e <__hi0bits+0x3a>
 8013556:	3001      	adds	r0, #1
 8013558:	4770      	bx	lr
 801355a:	2000      	movs	r0, #0
 801355c:	e7e8      	b.n	8013530 <__hi0bits+0xc>
 801355e:	2020      	movs	r0, #32
 8013560:	4770      	bx	lr

08013562 <__lo0bits>:
 8013562:	6803      	ldr	r3, [r0, #0]
 8013564:	f013 0207 	ands.w	r2, r3, #7
 8013568:	4601      	mov	r1, r0
 801356a:	d00b      	beq.n	8013584 <__lo0bits+0x22>
 801356c:	07da      	lsls	r2, r3, #31
 801356e:	d423      	bmi.n	80135b8 <__lo0bits+0x56>
 8013570:	0798      	lsls	r0, r3, #30
 8013572:	bf49      	itett	mi
 8013574:	085b      	lsrmi	r3, r3, #1
 8013576:	089b      	lsrpl	r3, r3, #2
 8013578:	2001      	movmi	r0, #1
 801357a:	600b      	strmi	r3, [r1, #0]
 801357c:	bf5c      	itt	pl
 801357e:	600b      	strpl	r3, [r1, #0]
 8013580:	2002      	movpl	r0, #2
 8013582:	4770      	bx	lr
 8013584:	b298      	uxth	r0, r3
 8013586:	b9a8      	cbnz	r0, 80135b4 <__lo0bits+0x52>
 8013588:	0c1b      	lsrs	r3, r3, #16
 801358a:	2010      	movs	r0, #16
 801358c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013590:	bf04      	itt	eq
 8013592:	0a1b      	lsreq	r3, r3, #8
 8013594:	3008      	addeq	r0, #8
 8013596:	071a      	lsls	r2, r3, #28
 8013598:	bf04      	itt	eq
 801359a:	091b      	lsreq	r3, r3, #4
 801359c:	3004      	addeq	r0, #4
 801359e:	079a      	lsls	r2, r3, #30
 80135a0:	bf04      	itt	eq
 80135a2:	089b      	lsreq	r3, r3, #2
 80135a4:	3002      	addeq	r0, #2
 80135a6:	07da      	lsls	r2, r3, #31
 80135a8:	d402      	bmi.n	80135b0 <__lo0bits+0x4e>
 80135aa:	085b      	lsrs	r3, r3, #1
 80135ac:	d006      	beq.n	80135bc <__lo0bits+0x5a>
 80135ae:	3001      	adds	r0, #1
 80135b0:	600b      	str	r3, [r1, #0]
 80135b2:	4770      	bx	lr
 80135b4:	4610      	mov	r0, r2
 80135b6:	e7e9      	b.n	801358c <__lo0bits+0x2a>
 80135b8:	2000      	movs	r0, #0
 80135ba:	4770      	bx	lr
 80135bc:	2020      	movs	r0, #32
 80135be:	4770      	bx	lr

080135c0 <__i2b>:
 80135c0:	b510      	push	{r4, lr}
 80135c2:	460c      	mov	r4, r1
 80135c4:	2101      	movs	r1, #1
 80135c6:	f7ff ff27 	bl	8013418 <_Balloc>
 80135ca:	2201      	movs	r2, #1
 80135cc:	6144      	str	r4, [r0, #20]
 80135ce:	6102      	str	r2, [r0, #16]
 80135d0:	bd10      	pop	{r4, pc}

080135d2 <__multiply>:
 80135d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135d6:	4614      	mov	r4, r2
 80135d8:	690a      	ldr	r2, [r1, #16]
 80135da:	6923      	ldr	r3, [r4, #16]
 80135dc:	429a      	cmp	r2, r3
 80135de:	bfb8      	it	lt
 80135e0:	460b      	movlt	r3, r1
 80135e2:	4688      	mov	r8, r1
 80135e4:	bfbc      	itt	lt
 80135e6:	46a0      	movlt	r8, r4
 80135e8:	461c      	movlt	r4, r3
 80135ea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80135ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80135f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80135f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80135fa:	eb07 0609 	add.w	r6, r7, r9
 80135fe:	42b3      	cmp	r3, r6
 8013600:	bfb8      	it	lt
 8013602:	3101      	addlt	r1, #1
 8013604:	f7ff ff08 	bl	8013418 <_Balloc>
 8013608:	f100 0514 	add.w	r5, r0, #20
 801360c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013610:	462b      	mov	r3, r5
 8013612:	2200      	movs	r2, #0
 8013614:	4573      	cmp	r3, lr
 8013616:	d316      	bcc.n	8013646 <__multiply+0x74>
 8013618:	f104 0214 	add.w	r2, r4, #20
 801361c:	f108 0114 	add.w	r1, r8, #20
 8013620:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013624:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013628:	9300      	str	r3, [sp, #0]
 801362a:	9b00      	ldr	r3, [sp, #0]
 801362c:	9201      	str	r2, [sp, #4]
 801362e:	4293      	cmp	r3, r2
 8013630:	d80c      	bhi.n	801364c <__multiply+0x7a>
 8013632:	2e00      	cmp	r6, #0
 8013634:	dd03      	ble.n	801363e <__multiply+0x6c>
 8013636:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801363a:	2b00      	cmp	r3, #0
 801363c:	d05d      	beq.n	80136fa <__multiply+0x128>
 801363e:	6106      	str	r6, [r0, #16]
 8013640:	b003      	add	sp, #12
 8013642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013646:	f843 2b04 	str.w	r2, [r3], #4
 801364a:	e7e3      	b.n	8013614 <__multiply+0x42>
 801364c:	f8b2 b000 	ldrh.w	fp, [r2]
 8013650:	f1bb 0f00 	cmp.w	fp, #0
 8013654:	d023      	beq.n	801369e <__multiply+0xcc>
 8013656:	4689      	mov	r9, r1
 8013658:	46ac      	mov	ip, r5
 801365a:	f04f 0800 	mov.w	r8, #0
 801365e:	f859 4b04 	ldr.w	r4, [r9], #4
 8013662:	f8dc a000 	ldr.w	sl, [ip]
 8013666:	b2a3      	uxth	r3, r4
 8013668:	fa1f fa8a 	uxth.w	sl, sl
 801366c:	fb0b a303 	mla	r3, fp, r3, sl
 8013670:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013674:	f8dc 4000 	ldr.w	r4, [ip]
 8013678:	4443      	add	r3, r8
 801367a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801367e:	fb0b 840a 	mla	r4, fp, sl, r8
 8013682:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013686:	46e2      	mov	sl, ip
 8013688:	b29b      	uxth	r3, r3
 801368a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801368e:	454f      	cmp	r7, r9
 8013690:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013694:	f84a 3b04 	str.w	r3, [sl], #4
 8013698:	d82b      	bhi.n	80136f2 <__multiply+0x120>
 801369a:	f8cc 8004 	str.w	r8, [ip, #4]
 801369e:	9b01      	ldr	r3, [sp, #4]
 80136a0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80136a4:	3204      	adds	r2, #4
 80136a6:	f1ba 0f00 	cmp.w	sl, #0
 80136aa:	d020      	beq.n	80136ee <__multiply+0x11c>
 80136ac:	682b      	ldr	r3, [r5, #0]
 80136ae:	4689      	mov	r9, r1
 80136b0:	46a8      	mov	r8, r5
 80136b2:	f04f 0b00 	mov.w	fp, #0
 80136b6:	f8b9 c000 	ldrh.w	ip, [r9]
 80136ba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80136be:	fb0a 440c 	mla	r4, sl, ip, r4
 80136c2:	445c      	add	r4, fp
 80136c4:	46c4      	mov	ip, r8
 80136c6:	b29b      	uxth	r3, r3
 80136c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80136cc:	f84c 3b04 	str.w	r3, [ip], #4
 80136d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80136d4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80136d8:	0c1b      	lsrs	r3, r3, #16
 80136da:	fb0a b303 	mla	r3, sl, r3, fp
 80136de:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80136e2:	454f      	cmp	r7, r9
 80136e4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80136e8:	d805      	bhi.n	80136f6 <__multiply+0x124>
 80136ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80136ee:	3504      	adds	r5, #4
 80136f0:	e79b      	b.n	801362a <__multiply+0x58>
 80136f2:	46d4      	mov	ip, sl
 80136f4:	e7b3      	b.n	801365e <__multiply+0x8c>
 80136f6:	46e0      	mov	r8, ip
 80136f8:	e7dd      	b.n	80136b6 <__multiply+0xe4>
 80136fa:	3e01      	subs	r6, #1
 80136fc:	e799      	b.n	8013632 <__multiply+0x60>
	...

08013700 <__pow5mult>:
 8013700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013704:	4615      	mov	r5, r2
 8013706:	f012 0203 	ands.w	r2, r2, #3
 801370a:	4606      	mov	r6, r0
 801370c:	460f      	mov	r7, r1
 801370e:	d007      	beq.n	8013720 <__pow5mult+0x20>
 8013710:	3a01      	subs	r2, #1
 8013712:	4c21      	ldr	r4, [pc, #132]	; (8013798 <__pow5mult+0x98>)
 8013714:	2300      	movs	r3, #0
 8013716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801371a:	f7ff fec8 	bl	80134ae <__multadd>
 801371e:	4607      	mov	r7, r0
 8013720:	10ad      	asrs	r5, r5, #2
 8013722:	d035      	beq.n	8013790 <__pow5mult+0x90>
 8013724:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013726:	b93c      	cbnz	r4, 8013738 <__pow5mult+0x38>
 8013728:	2010      	movs	r0, #16
 801372a:	f7ff fe6d 	bl	8013408 <malloc>
 801372e:	6270      	str	r0, [r6, #36]	; 0x24
 8013730:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013734:	6004      	str	r4, [r0, #0]
 8013736:	60c4      	str	r4, [r0, #12]
 8013738:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801373c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013740:	b94c      	cbnz	r4, 8013756 <__pow5mult+0x56>
 8013742:	f240 2171 	movw	r1, #625	; 0x271
 8013746:	4630      	mov	r0, r6
 8013748:	f7ff ff3a 	bl	80135c0 <__i2b>
 801374c:	2300      	movs	r3, #0
 801374e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013752:	4604      	mov	r4, r0
 8013754:	6003      	str	r3, [r0, #0]
 8013756:	f04f 0800 	mov.w	r8, #0
 801375a:	07eb      	lsls	r3, r5, #31
 801375c:	d50a      	bpl.n	8013774 <__pow5mult+0x74>
 801375e:	4639      	mov	r1, r7
 8013760:	4622      	mov	r2, r4
 8013762:	4630      	mov	r0, r6
 8013764:	f7ff ff35 	bl	80135d2 <__multiply>
 8013768:	4639      	mov	r1, r7
 801376a:	4681      	mov	r9, r0
 801376c:	4630      	mov	r0, r6
 801376e:	f7ff fe87 	bl	8013480 <_Bfree>
 8013772:	464f      	mov	r7, r9
 8013774:	106d      	asrs	r5, r5, #1
 8013776:	d00b      	beq.n	8013790 <__pow5mult+0x90>
 8013778:	6820      	ldr	r0, [r4, #0]
 801377a:	b938      	cbnz	r0, 801378c <__pow5mult+0x8c>
 801377c:	4622      	mov	r2, r4
 801377e:	4621      	mov	r1, r4
 8013780:	4630      	mov	r0, r6
 8013782:	f7ff ff26 	bl	80135d2 <__multiply>
 8013786:	6020      	str	r0, [r4, #0]
 8013788:	f8c0 8000 	str.w	r8, [r0]
 801378c:	4604      	mov	r4, r0
 801378e:	e7e4      	b.n	801375a <__pow5mult+0x5a>
 8013790:	4638      	mov	r0, r7
 8013792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013796:	bf00      	nop
 8013798:	080141f0 	.word	0x080141f0

0801379c <__lshift>:
 801379c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137a0:	460c      	mov	r4, r1
 80137a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80137a6:	6923      	ldr	r3, [r4, #16]
 80137a8:	6849      	ldr	r1, [r1, #4]
 80137aa:	eb0a 0903 	add.w	r9, sl, r3
 80137ae:	68a3      	ldr	r3, [r4, #8]
 80137b0:	4607      	mov	r7, r0
 80137b2:	4616      	mov	r6, r2
 80137b4:	f109 0501 	add.w	r5, r9, #1
 80137b8:	42ab      	cmp	r3, r5
 80137ba:	db32      	blt.n	8013822 <__lshift+0x86>
 80137bc:	4638      	mov	r0, r7
 80137be:	f7ff fe2b 	bl	8013418 <_Balloc>
 80137c2:	2300      	movs	r3, #0
 80137c4:	4680      	mov	r8, r0
 80137c6:	f100 0114 	add.w	r1, r0, #20
 80137ca:	461a      	mov	r2, r3
 80137cc:	4553      	cmp	r3, sl
 80137ce:	db2b      	blt.n	8013828 <__lshift+0x8c>
 80137d0:	6920      	ldr	r0, [r4, #16]
 80137d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80137d6:	f104 0314 	add.w	r3, r4, #20
 80137da:	f016 021f 	ands.w	r2, r6, #31
 80137de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80137e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80137e6:	d025      	beq.n	8013834 <__lshift+0x98>
 80137e8:	f1c2 0e20 	rsb	lr, r2, #32
 80137ec:	2000      	movs	r0, #0
 80137ee:	681e      	ldr	r6, [r3, #0]
 80137f0:	468a      	mov	sl, r1
 80137f2:	4096      	lsls	r6, r2
 80137f4:	4330      	orrs	r0, r6
 80137f6:	f84a 0b04 	str.w	r0, [sl], #4
 80137fa:	f853 0b04 	ldr.w	r0, [r3], #4
 80137fe:	459c      	cmp	ip, r3
 8013800:	fa20 f00e 	lsr.w	r0, r0, lr
 8013804:	d814      	bhi.n	8013830 <__lshift+0x94>
 8013806:	6048      	str	r0, [r1, #4]
 8013808:	b108      	cbz	r0, 801380e <__lshift+0x72>
 801380a:	f109 0502 	add.w	r5, r9, #2
 801380e:	3d01      	subs	r5, #1
 8013810:	4638      	mov	r0, r7
 8013812:	f8c8 5010 	str.w	r5, [r8, #16]
 8013816:	4621      	mov	r1, r4
 8013818:	f7ff fe32 	bl	8013480 <_Bfree>
 801381c:	4640      	mov	r0, r8
 801381e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013822:	3101      	adds	r1, #1
 8013824:	005b      	lsls	r3, r3, #1
 8013826:	e7c7      	b.n	80137b8 <__lshift+0x1c>
 8013828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801382c:	3301      	adds	r3, #1
 801382e:	e7cd      	b.n	80137cc <__lshift+0x30>
 8013830:	4651      	mov	r1, sl
 8013832:	e7dc      	b.n	80137ee <__lshift+0x52>
 8013834:	3904      	subs	r1, #4
 8013836:	f853 2b04 	ldr.w	r2, [r3], #4
 801383a:	f841 2f04 	str.w	r2, [r1, #4]!
 801383e:	459c      	cmp	ip, r3
 8013840:	d8f9      	bhi.n	8013836 <__lshift+0x9a>
 8013842:	e7e4      	b.n	801380e <__lshift+0x72>

08013844 <__mcmp>:
 8013844:	6903      	ldr	r3, [r0, #16]
 8013846:	690a      	ldr	r2, [r1, #16]
 8013848:	1a9b      	subs	r3, r3, r2
 801384a:	b530      	push	{r4, r5, lr}
 801384c:	d10c      	bne.n	8013868 <__mcmp+0x24>
 801384e:	0092      	lsls	r2, r2, #2
 8013850:	3014      	adds	r0, #20
 8013852:	3114      	adds	r1, #20
 8013854:	1884      	adds	r4, r0, r2
 8013856:	4411      	add	r1, r2
 8013858:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801385c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013860:	4295      	cmp	r5, r2
 8013862:	d003      	beq.n	801386c <__mcmp+0x28>
 8013864:	d305      	bcc.n	8013872 <__mcmp+0x2e>
 8013866:	2301      	movs	r3, #1
 8013868:	4618      	mov	r0, r3
 801386a:	bd30      	pop	{r4, r5, pc}
 801386c:	42a0      	cmp	r0, r4
 801386e:	d3f3      	bcc.n	8013858 <__mcmp+0x14>
 8013870:	e7fa      	b.n	8013868 <__mcmp+0x24>
 8013872:	f04f 33ff 	mov.w	r3, #4294967295
 8013876:	e7f7      	b.n	8013868 <__mcmp+0x24>

08013878 <__mdiff>:
 8013878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801387c:	460d      	mov	r5, r1
 801387e:	4607      	mov	r7, r0
 8013880:	4611      	mov	r1, r2
 8013882:	4628      	mov	r0, r5
 8013884:	4614      	mov	r4, r2
 8013886:	f7ff ffdd 	bl	8013844 <__mcmp>
 801388a:	1e06      	subs	r6, r0, #0
 801388c:	d108      	bne.n	80138a0 <__mdiff+0x28>
 801388e:	4631      	mov	r1, r6
 8013890:	4638      	mov	r0, r7
 8013892:	f7ff fdc1 	bl	8013418 <_Balloc>
 8013896:	2301      	movs	r3, #1
 8013898:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801389c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138a0:	bfa4      	itt	ge
 80138a2:	4623      	movge	r3, r4
 80138a4:	462c      	movge	r4, r5
 80138a6:	4638      	mov	r0, r7
 80138a8:	6861      	ldr	r1, [r4, #4]
 80138aa:	bfa6      	itte	ge
 80138ac:	461d      	movge	r5, r3
 80138ae:	2600      	movge	r6, #0
 80138b0:	2601      	movlt	r6, #1
 80138b2:	f7ff fdb1 	bl	8013418 <_Balloc>
 80138b6:	692b      	ldr	r3, [r5, #16]
 80138b8:	60c6      	str	r6, [r0, #12]
 80138ba:	6926      	ldr	r6, [r4, #16]
 80138bc:	f105 0914 	add.w	r9, r5, #20
 80138c0:	f104 0214 	add.w	r2, r4, #20
 80138c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80138c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80138cc:	f100 0514 	add.w	r5, r0, #20
 80138d0:	f04f 0e00 	mov.w	lr, #0
 80138d4:	f852 ab04 	ldr.w	sl, [r2], #4
 80138d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80138dc:	fa1e f18a 	uxtah	r1, lr, sl
 80138e0:	b2a3      	uxth	r3, r4
 80138e2:	1ac9      	subs	r1, r1, r3
 80138e4:	0c23      	lsrs	r3, r4, #16
 80138e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80138ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80138ee:	b289      	uxth	r1, r1
 80138f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80138f4:	45c8      	cmp	r8, r9
 80138f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80138fa:	4694      	mov	ip, r2
 80138fc:	f845 3b04 	str.w	r3, [r5], #4
 8013900:	d8e8      	bhi.n	80138d4 <__mdiff+0x5c>
 8013902:	45bc      	cmp	ip, r7
 8013904:	d304      	bcc.n	8013910 <__mdiff+0x98>
 8013906:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801390a:	b183      	cbz	r3, 801392e <__mdiff+0xb6>
 801390c:	6106      	str	r6, [r0, #16]
 801390e:	e7c5      	b.n	801389c <__mdiff+0x24>
 8013910:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013914:	fa1e f381 	uxtah	r3, lr, r1
 8013918:	141a      	asrs	r2, r3, #16
 801391a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801391e:	b29b      	uxth	r3, r3
 8013920:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013924:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013928:	f845 3b04 	str.w	r3, [r5], #4
 801392c:	e7e9      	b.n	8013902 <__mdiff+0x8a>
 801392e:	3e01      	subs	r6, #1
 8013930:	e7e9      	b.n	8013906 <__mdiff+0x8e>

08013932 <__d2b>:
 8013932:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013936:	460e      	mov	r6, r1
 8013938:	2101      	movs	r1, #1
 801393a:	ec59 8b10 	vmov	r8, r9, d0
 801393e:	4615      	mov	r5, r2
 8013940:	f7ff fd6a 	bl	8013418 <_Balloc>
 8013944:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013948:	4607      	mov	r7, r0
 801394a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801394e:	bb34      	cbnz	r4, 801399e <__d2b+0x6c>
 8013950:	9301      	str	r3, [sp, #4]
 8013952:	f1b8 0300 	subs.w	r3, r8, #0
 8013956:	d027      	beq.n	80139a8 <__d2b+0x76>
 8013958:	a802      	add	r0, sp, #8
 801395a:	f840 3d08 	str.w	r3, [r0, #-8]!
 801395e:	f7ff fe00 	bl	8013562 <__lo0bits>
 8013962:	9900      	ldr	r1, [sp, #0]
 8013964:	b1f0      	cbz	r0, 80139a4 <__d2b+0x72>
 8013966:	9a01      	ldr	r2, [sp, #4]
 8013968:	f1c0 0320 	rsb	r3, r0, #32
 801396c:	fa02 f303 	lsl.w	r3, r2, r3
 8013970:	430b      	orrs	r3, r1
 8013972:	40c2      	lsrs	r2, r0
 8013974:	617b      	str	r3, [r7, #20]
 8013976:	9201      	str	r2, [sp, #4]
 8013978:	9b01      	ldr	r3, [sp, #4]
 801397a:	61bb      	str	r3, [r7, #24]
 801397c:	2b00      	cmp	r3, #0
 801397e:	bf14      	ite	ne
 8013980:	2102      	movne	r1, #2
 8013982:	2101      	moveq	r1, #1
 8013984:	6139      	str	r1, [r7, #16]
 8013986:	b1c4      	cbz	r4, 80139ba <__d2b+0x88>
 8013988:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801398c:	4404      	add	r4, r0
 801398e:	6034      	str	r4, [r6, #0]
 8013990:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013994:	6028      	str	r0, [r5, #0]
 8013996:	4638      	mov	r0, r7
 8013998:	b003      	add	sp, #12
 801399a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801399e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80139a2:	e7d5      	b.n	8013950 <__d2b+0x1e>
 80139a4:	6179      	str	r1, [r7, #20]
 80139a6:	e7e7      	b.n	8013978 <__d2b+0x46>
 80139a8:	a801      	add	r0, sp, #4
 80139aa:	f7ff fdda 	bl	8013562 <__lo0bits>
 80139ae:	9b01      	ldr	r3, [sp, #4]
 80139b0:	617b      	str	r3, [r7, #20]
 80139b2:	2101      	movs	r1, #1
 80139b4:	6139      	str	r1, [r7, #16]
 80139b6:	3020      	adds	r0, #32
 80139b8:	e7e5      	b.n	8013986 <__d2b+0x54>
 80139ba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80139be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80139c2:	6030      	str	r0, [r6, #0]
 80139c4:	6918      	ldr	r0, [r3, #16]
 80139c6:	f7ff fdad 	bl	8013524 <__hi0bits>
 80139ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80139ce:	e7e1      	b.n	8013994 <__d2b+0x62>

080139d0 <_calloc_r>:
 80139d0:	b538      	push	{r3, r4, r5, lr}
 80139d2:	fb02 f401 	mul.w	r4, r2, r1
 80139d6:	4621      	mov	r1, r4
 80139d8:	f000 f856 	bl	8013a88 <_malloc_r>
 80139dc:	4605      	mov	r5, r0
 80139de:	b118      	cbz	r0, 80139e8 <_calloc_r+0x18>
 80139e0:	4622      	mov	r2, r4
 80139e2:	2100      	movs	r1, #0
 80139e4:	f7fd ff3d 	bl	8011862 <memset>
 80139e8:	4628      	mov	r0, r5
 80139ea:	bd38      	pop	{r3, r4, r5, pc}

080139ec <_free_r>:
 80139ec:	b538      	push	{r3, r4, r5, lr}
 80139ee:	4605      	mov	r5, r0
 80139f0:	2900      	cmp	r1, #0
 80139f2:	d045      	beq.n	8013a80 <_free_r+0x94>
 80139f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139f8:	1f0c      	subs	r4, r1, #4
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	bfb8      	it	lt
 80139fe:	18e4      	addlt	r4, r4, r3
 8013a00:	f000 fa98 	bl	8013f34 <__malloc_lock>
 8013a04:	4a1f      	ldr	r2, [pc, #124]	; (8013a84 <_free_r+0x98>)
 8013a06:	6813      	ldr	r3, [r2, #0]
 8013a08:	4610      	mov	r0, r2
 8013a0a:	b933      	cbnz	r3, 8013a1a <_free_r+0x2e>
 8013a0c:	6063      	str	r3, [r4, #4]
 8013a0e:	6014      	str	r4, [r2, #0]
 8013a10:	4628      	mov	r0, r5
 8013a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a16:	f000 ba8e 	b.w	8013f36 <__malloc_unlock>
 8013a1a:	42a3      	cmp	r3, r4
 8013a1c:	d90c      	bls.n	8013a38 <_free_r+0x4c>
 8013a1e:	6821      	ldr	r1, [r4, #0]
 8013a20:	1862      	adds	r2, r4, r1
 8013a22:	4293      	cmp	r3, r2
 8013a24:	bf04      	itt	eq
 8013a26:	681a      	ldreq	r2, [r3, #0]
 8013a28:	685b      	ldreq	r3, [r3, #4]
 8013a2a:	6063      	str	r3, [r4, #4]
 8013a2c:	bf04      	itt	eq
 8013a2e:	1852      	addeq	r2, r2, r1
 8013a30:	6022      	streq	r2, [r4, #0]
 8013a32:	6004      	str	r4, [r0, #0]
 8013a34:	e7ec      	b.n	8013a10 <_free_r+0x24>
 8013a36:	4613      	mov	r3, r2
 8013a38:	685a      	ldr	r2, [r3, #4]
 8013a3a:	b10a      	cbz	r2, 8013a40 <_free_r+0x54>
 8013a3c:	42a2      	cmp	r2, r4
 8013a3e:	d9fa      	bls.n	8013a36 <_free_r+0x4a>
 8013a40:	6819      	ldr	r1, [r3, #0]
 8013a42:	1858      	adds	r0, r3, r1
 8013a44:	42a0      	cmp	r0, r4
 8013a46:	d10b      	bne.n	8013a60 <_free_r+0x74>
 8013a48:	6820      	ldr	r0, [r4, #0]
 8013a4a:	4401      	add	r1, r0
 8013a4c:	1858      	adds	r0, r3, r1
 8013a4e:	4282      	cmp	r2, r0
 8013a50:	6019      	str	r1, [r3, #0]
 8013a52:	d1dd      	bne.n	8013a10 <_free_r+0x24>
 8013a54:	6810      	ldr	r0, [r2, #0]
 8013a56:	6852      	ldr	r2, [r2, #4]
 8013a58:	605a      	str	r2, [r3, #4]
 8013a5a:	4401      	add	r1, r0
 8013a5c:	6019      	str	r1, [r3, #0]
 8013a5e:	e7d7      	b.n	8013a10 <_free_r+0x24>
 8013a60:	d902      	bls.n	8013a68 <_free_r+0x7c>
 8013a62:	230c      	movs	r3, #12
 8013a64:	602b      	str	r3, [r5, #0]
 8013a66:	e7d3      	b.n	8013a10 <_free_r+0x24>
 8013a68:	6820      	ldr	r0, [r4, #0]
 8013a6a:	1821      	adds	r1, r4, r0
 8013a6c:	428a      	cmp	r2, r1
 8013a6e:	bf04      	itt	eq
 8013a70:	6811      	ldreq	r1, [r2, #0]
 8013a72:	6852      	ldreq	r2, [r2, #4]
 8013a74:	6062      	str	r2, [r4, #4]
 8013a76:	bf04      	itt	eq
 8013a78:	1809      	addeq	r1, r1, r0
 8013a7a:	6021      	streq	r1, [r4, #0]
 8013a7c:	605c      	str	r4, [r3, #4]
 8013a7e:	e7c7      	b.n	8013a10 <_free_r+0x24>
 8013a80:	bd38      	pop	{r3, r4, r5, pc}
 8013a82:	bf00      	nop
 8013a84:	20000440 	.word	0x20000440

08013a88 <_malloc_r>:
 8013a88:	b570      	push	{r4, r5, r6, lr}
 8013a8a:	1ccd      	adds	r5, r1, #3
 8013a8c:	f025 0503 	bic.w	r5, r5, #3
 8013a90:	3508      	adds	r5, #8
 8013a92:	2d0c      	cmp	r5, #12
 8013a94:	bf38      	it	cc
 8013a96:	250c      	movcc	r5, #12
 8013a98:	2d00      	cmp	r5, #0
 8013a9a:	4606      	mov	r6, r0
 8013a9c:	db01      	blt.n	8013aa2 <_malloc_r+0x1a>
 8013a9e:	42a9      	cmp	r1, r5
 8013aa0:	d903      	bls.n	8013aaa <_malloc_r+0x22>
 8013aa2:	230c      	movs	r3, #12
 8013aa4:	6033      	str	r3, [r6, #0]
 8013aa6:	2000      	movs	r0, #0
 8013aa8:	bd70      	pop	{r4, r5, r6, pc}
 8013aaa:	f000 fa43 	bl	8013f34 <__malloc_lock>
 8013aae:	4a21      	ldr	r2, [pc, #132]	; (8013b34 <_malloc_r+0xac>)
 8013ab0:	6814      	ldr	r4, [r2, #0]
 8013ab2:	4621      	mov	r1, r4
 8013ab4:	b991      	cbnz	r1, 8013adc <_malloc_r+0x54>
 8013ab6:	4c20      	ldr	r4, [pc, #128]	; (8013b38 <_malloc_r+0xb0>)
 8013ab8:	6823      	ldr	r3, [r4, #0]
 8013aba:	b91b      	cbnz	r3, 8013ac4 <_malloc_r+0x3c>
 8013abc:	4630      	mov	r0, r6
 8013abe:	f000 f97d 	bl	8013dbc <_sbrk_r>
 8013ac2:	6020      	str	r0, [r4, #0]
 8013ac4:	4629      	mov	r1, r5
 8013ac6:	4630      	mov	r0, r6
 8013ac8:	f000 f978 	bl	8013dbc <_sbrk_r>
 8013acc:	1c43      	adds	r3, r0, #1
 8013ace:	d124      	bne.n	8013b1a <_malloc_r+0x92>
 8013ad0:	230c      	movs	r3, #12
 8013ad2:	6033      	str	r3, [r6, #0]
 8013ad4:	4630      	mov	r0, r6
 8013ad6:	f000 fa2e 	bl	8013f36 <__malloc_unlock>
 8013ada:	e7e4      	b.n	8013aa6 <_malloc_r+0x1e>
 8013adc:	680b      	ldr	r3, [r1, #0]
 8013ade:	1b5b      	subs	r3, r3, r5
 8013ae0:	d418      	bmi.n	8013b14 <_malloc_r+0x8c>
 8013ae2:	2b0b      	cmp	r3, #11
 8013ae4:	d90f      	bls.n	8013b06 <_malloc_r+0x7e>
 8013ae6:	600b      	str	r3, [r1, #0]
 8013ae8:	50cd      	str	r5, [r1, r3]
 8013aea:	18cc      	adds	r4, r1, r3
 8013aec:	4630      	mov	r0, r6
 8013aee:	f000 fa22 	bl	8013f36 <__malloc_unlock>
 8013af2:	f104 000b 	add.w	r0, r4, #11
 8013af6:	1d23      	adds	r3, r4, #4
 8013af8:	f020 0007 	bic.w	r0, r0, #7
 8013afc:	1ac3      	subs	r3, r0, r3
 8013afe:	d0d3      	beq.n	8013aa8 <_malloc_r+0x20>
 8013b00:	425a      	negs	r2, r3
 8013b02:	50e2      	str	r2, [r4, r3]
 8013b04:	e7d0      	b.n	8013aa8 <_malloc_r+0x20>
 8013b06:	428c      	cmp	r4, r1
 8013b08:	684b      	ldr	r3, [r1, #4]
 8013b0a:	bf16      	itet	ne
 8013b0c:	6063      	strne	r3, [r4, #4]
 8013b0e:	6013      	streq	r3, [r2, #0]
 8013b10:	460c      	movne	r4, r1
 8013b12:	e7eb      	b.n	8013aec <_malloc_r+0x64>
 8013b14:	460c      	mov	r4, r1
 8013b16:	6849      	ldr	r1, [r1, #4]
 8013b18:	e7cc      	b.n	8013ab4 <_malloc_r+0x2c>
 8013b1a:	1cc4      	adds	r4, r0, #3
 8013b1c:	f024 0403 	bic.w	r4, r4, #3
 8013b20:	42a0      	cmp	r0, r4
 8013b22:	d005      	beq.n	8013b30 <_malloc_r+0xa8>
 8013b24:	1a21      	subs	r1, r4, r0
 8013b26:	4630      	mov	r0, r6
 8013b28:	f000 f948 	bl	8013dbc <_sbrk_r>
 8013b2c:	3001      	adds	r0, #1
 8013b2e:	d0cf      	beq.n	8013ad0 <_malloc_r+0x48>
 8013b30:	6025      	str	r5, [r4, #0]
 8013b32:	e7db      	b.n	8013aec <_malloc_r+0x64>
 8013b34:	20000440 	.word	0x20000440
 8013b38:	20000444 	.word	0x20000444

08013b3c <__sfputc_r>:
 8013b3c:	6893      	ldr	r3, [r2, #8]
 8013b3e:	3b01      	subs	r3, #1
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	b410      	push	{r4}
 8013b44:	6093      	str	r3, [r2, #8]
 8013b46:	da08      	bge.n	8013b5a <__sfputc_r+0x1e>
 8013b48:	6994      	ldr	r4, [r2, #24]
 8013b4a:	42a3      	cmp	r3, r4
 8013b4c:	db01      	blt.n	8013b52 <__sfputc_r+0x16>
 8013b4e:	290a      	cmp	r1, #10
 8013b50:	d103      	bne.n	8013b5a <__sfputc_r+0x1e>
 8013b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b56:	f7fe bb65 	b.w	8012224 <__swbuf_r>
 8013b5a:	6813      	ldr	r3, [r2, #0]
 8013b5c:	1c58      	adds	r0, r3, #1
 8013b5e:	6010      	str	r0, [r2, #0]
 8013b60:	7019      	strb	r1, [r3, #0]
 8013b62:	4608      	mov	r0, r1
 8013b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b68:	4770      	bx	lr

08013b6a <__sfputs_r>:
 8013b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b6c:	4606      	mov	r6, r0
 8013b6e:	460f      	mov	r7, r1
 8013b70:	4614      	mov	r4, r2
 8013b72:	18d5      	adds	r5, r2, r3
 8013b74:	42ac      	cmp	r4, r5
 8013b76:	d101      	bne.n	8013b7c <__sfputs_r+0x12>
 8013b78:	2000      	movs	r0, #0
 8013b7a:	e007      	b.n	8013b8c <__sfputs_r+0x22>
 8013b7c:	463a      	mov	r2, r7
 8013b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b82:	4630      	mov	r0, r6
 8013b84:	f7ff ffda 	bl	8013b3c <__sfputc_r>
 8013b88:	1c43      	adds	r3, r0, #1
 8013b8a:	d1f3      	bne.n	8013b74 <__sfputs_r+0xa>
 8013b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013b90 <_vfiprintf_r>:
 8013b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b94:	460c      	mov	r4, r1
 8013b96:	b09d      	sub	sp, #116	; 0x74
 8013b98:	4617      	mov	r7, r2
 8013b9a:	461d      	mov	r5, r3
 8013b9c:	4606      	mov	r6, r0
 8013b9e:	b118      	cbz	r0, 8013ba8 <_vfiprintf_r+0x18>
 8013ba0:	6983      	ldr	r3, [r0, #24]
 8013ba2:	b90b      	cbnz	r3, 8013ba8 <_vfiprintf_r+0x18>
 8013ba4:	f7ff fb34 	bl	8013210 <__sinit>
 8013ba8:	4b7c      	ldr	r3, [pc, #496]	; (8013d9c <_vfiprintf_r+0x20c>)
 8013baa:	429c      	cmp	r4, r3
 8013bac:	d158      	bne.n	8013c60 <_vfiprintf_r+0xd0>
 8013bae:	6874      	ldr	r4, [r6, #4]
 8013bb0:	89a3      	ldrh	r3, [r4, #12]
 8013bb2:	0718      	lsls	r0, r3, #28
 8013bb4:	d55e      	bpl.n	8013c74 <_vfiprintf_r+0xe4>
 8013bb6:	6923      	ldr	r3, [r4, #16]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d05b      	beq.n	8013c74 <_vfiprintf_r+0xe4>
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8013bc0:	2320      	movs	r3, #32
 8013bc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013bc6:	2330      	movs	r3, #48	; 0x30
 8013bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013bcc:	9503      	str	r5, [sp, #12]
 8013bce:	f04f 0b01 	mov.w	fp, #1
 8013bd2:	46b8      	mov	r8, r7
 8013bd4:	4645      	mov	r5, r8
 8013bd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013bda:	b10b      	cbz	r3, 8013be0 <_vfiprintf_r+0x50>
 8013bdc:	2b25      	cmp	r3, #37	; 0x25
 8013bde:	d154      	bne.n	8013c8a <_vfiprintf_r+0xfa>
 8013be0:	ebb8 0a07 	subs.w	sl, r8, r7
 8013be4:	d00b      	beq.n	8013bfe <_vfiprintf_r+0x6e>
 8013be6:	4653      	mov	r3, sl
 8013be8:	463a      	mov	r2, r7
 8013bea:	4621      	mov	r1, r4
 8013bec:	4630      	mov	r0, r6
 8013bee:	f7ff ffbc 	bl	8013b6a <__sfputs_r>
 8013bf2:	3001      	adds	r0, #1
 8013bf4:	f000 80c2 	beq.w	8013d7c <_vfiprintf_r+0x1ec>
 8013bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bfa:	4453      	add	r3, sl
 8013bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8013bfe:	f898 3000 	ldrb.w	r3, [r8]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	f000 80ba 	beq.w	8013d7c <_vfiprintf_r+0x1ec>
 8013c08:	2300      	movs	r3, #0
 8013c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c12:	9304      	str	r3, [sp, #16]
 8013c14:	9307      	str	r3, [sp, #28]
 8013c16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c1a:	931a      	str	r3, [sp, #104]	; 0x68
 8013c1c:	46a8      	mov	r8, r5
 8013c1e:	2205      	movs	r2, #5
 8013c20:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013c24:	485e      	ldr	r0, [pc, #376]	; (8013da0 <_vfiprintf_r+0x210>)
 8013c26:	f7f4 fa13 	bl	8008050 <memchr>
 8013c2a:	9b04      	ldr	r3, [sp, #16]
 8013c2c:	bb78      	cbnz	r0, 8013c8e <_vfiprintf_r+0xfe>
 8013c2e:	06d9      	lsls	r1, r3, #27
 8013c30:	bf44      	itt	mi
 8013c32:	2220      	movmi	r2, #32
 8013c34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013c38:	071a      	lsls	r2, r3, #28
 8013c3a:	bf44      	itt	mi
 8013c3c:	222b      	movmi	r2, #43	; 0x2b
 8013c3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013c42:	782a      	ldrb	r2, [r5, #0]
 8013c44:	2a2a      	cmp	r2, #42	; 0x2a
 8013c46:	d02a      	beq.n	8013c9e <_vfiprintf_r+0x10e>
 8013c48:	9a07      	ldr	r2, [sp, #28]
 8013c4a:	46a8      	mov	r8, r5
 8013c4c:	2000      	movs	r0, #0
 8013c4e:	250a      	movs	r5, #10
 8013c50:	4641      	mov	r1, r8
 8013c52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c56:	3b30      	subs	r3, #48	; 0x30
 8013c58:	2b09      	cmp	r3, #9
 8013c5a:	d969      	bls.n	8013d30 <_vfiprintf_r+0x1a0>
 8013c5c:	b360      	cbz	r0, 8013cb8 <_vfiprintf_r+0x128>
 8013c5e:	e024      	b.n	8013caa <_vfiprintf_r+0x11a>
 8013c60:	4b50      	ldr	r3, [pc, #320]	; (8013da4 <_vfiprintf_r+0x214>)
 8013c62:	429c      	cmp	r4, r3
 8013c64:	d101      	bne.n	8013c6a <_vfiprintf_r+0xda>
 8013c66:	68b4      	ldr	r4, [r6, #8]
 8013c68:	e7a2      	b.n	8013bb0 <_vfiprintf_r+0x20>
 8013c6a:	4b4f      	ldr	r3, [pc, #316]	; (8013da8 <_vfiprintf_r+0x218>)
 8013c6c:	429c      	cmp	r4, r3
 8013c6e:	bf08      	it	eq
 8013c70:	68f4      	ldreq	r4, [r6, #12]
 8013c72:	e79d      	b.n	8013bb0 <_vfiprintf_r+0x20>
 8013c74:	4621      	mov	r1, r4
 8013c76:	4630      	mov	r0, r6
 8013c78:	f7fe fb26 	bl	80122c8 <__swsetup_r>
 8013c7c:	2800      	cmp	r0, #0
 8013c7e:	d09d      	beq.n	8013bbc <_vfiprintf_r+0x2c>
 8013c80:	f04f 30ff 	mov.w	r0, #4294967295
 8013c84:	b01d      	add	sp, #116	; 0x74
 8013c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c8a:	46a8      	mov	r8, r5
 8013c8c:	e7a2      	b.n	8013bd4 <_vfiprintf_r+0x44>
 8013c8e:	4a44      	ldr	r2, [pc, #272]	; (8013da0 <_vfiprintf_r+0x210>)
 8013c90:	1a80      	subs	r0, r0, r2
 8013c92:	fa0b f000 	lsl.w	r0, fp, r0
 8013c96:	4318      	orrs	r0, r3
 8013c98:	9004      	str	r0, [sp, #16]
 8013c9a:	4645      	mov	r5, r8
 8013c9c:	e7be      	b.n	8013c1c <_vfiprintf_r+0x8c>
 8013c9e:	9a03      	ldr	r2, [sp, #12]
 8013ca0:	1d11      	adds	r1, r2, #4
 8013ca2:	6812      	ldr	r2, [r2, #0]
 8013ca4:	9103      	str	r1, [sp, #12]
 8013ca6:	2a00      	cmp	r2, #0
 8013ca8:	db01      	blt.n	8013cae <_vfiprintf_r+0x11e>
 8013caa:	9207      	str	r2, [sp, #28]
 8013cac:	e004      	b.n	8013cb8 <_vfiprintf_r+0x128>
 8013cae:	4252      	negs	r2, r2
 8013cb0:	f043 0302 	orr.w	r3, r3, #2
 8013cb4:	9207      	str	r2, [sp, #28]
 8013cb6:	9304      	str	r3, [sp, #16]
 8013cb8:	f898 3000 	ldrb.w	r3, [r8]
 8013cbc:	2b2e      	cmp	r3, #46	; 0x2e
 8013cbe:	d10e      	bne.n	8013cde <_vfiprintf_r+0x14e>
 8013cc0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8013cc6:	d138      	bne.n	8013d3a <_vfiprintf_r+0x1aa>
 8013cc8:	9b03      	ldr	r3, [sp, #12]
 8013cca:	1d1a      	adds	r2, r3, #4
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	9203      	str	r2, [sp, #12]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	bfb8      	it	lt
 8013cd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8013cd8:	f108 0802 	add.w	r8, r8, #2
 8013cdc:	9305      	str	r3, [sp, #20]
 8013cde:	4d33      	ldr	r5, [pc, #204]	; (8013dac <_vfiprintf_r+0x21c>)
 8013ce0:	f898 1000 	ldrb.w	r1, [r8]
 8013ce4:	2203      	movs	r2, #3
 8013ce6:	4628      	mov	r0, r5
 8013ce8:	f7f4 f9b2 	bl	8008050 <memchr>
 8013cec:	b140      	cbz	r0, 8013d00 <_vfiprintf_r+0x170>
 8013cee:	2340      	movs	r3, #64	; 0x40
 8013cf0:	1b40      	subs	r0, r0, r5
 8013cf2:	fa03 f000 	lsl.w	r0, r3, r0
 8013cf6:	9b04      	ldr	r3, [sp, #16]
 8013cf8:	4303      	orrs	r3, r0
 8013cfa:	f108 0801 	add.w	r8, r8, #1
 8013cfe:	9304      	str	r3, [sp, #16]
 8013d00:	f898 1000 	ldrb.w	r1, [r8]
 8013d04:	482a      	ldr	r0, [pc, #168]	; (8013db0 <_vfiprintf_r+0x220>)
 8013d06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d0a:	2206      	movs	r2, #6
 8013d0c:	f108 0701 	add.w	r7, r8, #1
 8013d10:	f7f4 f99e 	bl	8008050 <memchr>
 8013d14:	2800      	cmp	r0, #0
 8013d16:	d037      	beq.n	8013d88 <_vfiprintf_r+0x1f8>
 8013d18:	4b26      	ldr	r3, [pc, #152]	; (8013db4 <_vfiprintf_r+0x224>)
 8013d1a:	bb1b      	cbnz	r3, 8013d64 <_vfiprintf_r+0x1d4>
 8013d1c:	9b03      	ldr	r3, [sp, #12]
 8013d1e:	3307      	adds	r3, #7
 8013d20:	f023 0307 	bic.w	r3, r3, #7
 8013d24:	3308      	adds	r3, #8
 8013d26:	9303      	str	r3, [sp, #12]
 8013d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d2a:	444b      	add	r3, r9
 8013d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8013d2e:	e750      	b.n	8013bd2 <_vfiprintf_r+0x42>
 8013d30:	fb05 3202 	mla	r2, r5, r2, r3
 8013d34:	2001      	movs	r0, #1
 8013d36:	4688      	mov	r8, r1
 8013d38:	e78a      	b.n	8013c50 <_vfiprintf_r+0xc0>
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	f108 0801 	add.w	r8, r8, #1
 8013d40:	9305      	str	r3, [sp, #20]
 8013d42:	4619      	mov	r1, r3
 8013d44:	250a      	movs	r5, #10
 8013d46:	4640      	mov	r0, r8
 8013d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d4c:	3a30      	subs	r2, #48	; 0x30
 8013d4e:	2a09      	cmp	r2, #9
 8013d50:	d903      	bls.n	8013d5a <_vfiprintf_r+0x1ca>
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d0c3      	beq.n	8013cde <_vfiprintf_r+0x14e>
 8013d56:	9105      	str	r1, [sp, #20]
 8013d58:	e7c1      	b.n	8013cde <_vfiprintf_r+0x14e>
 8013d5a:	fb05 2101 	mla	r1, r5, r1, r2
 8013d5e:	2301      	movs	r3, #1
 8013d60:	4680      	mov	r8, r0
 8013d62:	e7f0      	b.n	8013d46 <_vfiprintf_r+0x1b6>
 8013d64:	ab03      	add	r3, sp, #12
 8013d66:	9300      	str	r3, [sp, #0]
 8013d68:	4622      	mov	r2, r4
 8013d6a:	4b13      	ldr	r3, [pc, #76]	; (8013db8 <_vfiprintf_r+0x228>)
 8013d6c:	a904      	add	r1, sp, #16
 8013d6e:	4630      	mov	r0, r6
 8013d70:	f7fd fe14 	bl	801199c <_printf_float>
 8013d74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013d78:	4681      	mov	r9, r0
 8013d7a:	d1d5      	bne.n	8013d28 <_vfiprintf_r+0x198>
 8013d7c:	89a3      	ldrh	r3, [r4, #12]
 8013d7e:	065b      	lsls	r3, r3, #25
 8013d80:	f53f af7e 	bmi.w	8013c80 <_vfiprintf_r+0xf0>
 8013d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d86:	e77d      	b.n	8013c84 <_vfiprintf_r+0xf4>
 8013d88:	ab03      	add	r3, sp, #12
 8013d8a:	9300      	str	r3, [sp, #0]
 8013d8c:	4622      	mov	r2, r4
 8013d8e:	4b0a      	ldr	r3, [pc, #40]	; (8013db8 <_vfiprintf_r+0x228>)
 8013d90:	a904      	add	r1, sp, #16
 8013d92:	4630      	mov	r0, r6
 8013d94:	f7fe f8b8 	bl	8011f08 <_printf_i>
 8013d98:	e7ec      	b.n	8013d74 <_vfiprintf_r+0x1e4>
 8013d9a:	bf00      	nop
 8013d9c:	080140c0 	.word	0x080140c0
 8013da0:	080141fc 	.word	0x080141fc
 8013da4:	080140e0 	.word	0x080140e0
 8013da8:	080140a0 	.word	0x080140a0
 8013dac:	08014202 	.word	0x08014202
 8013db0:	08014206 	.word	0x08014206
 8013db4:	0801199d 	.word	0x0801199d
 8013db8:	08013b6b 	.word	0x08013b6b

08013dbc <_sbrk_r>:
 8013dbc:	b538      	push	{r3, r4, r5, lr}
 8013dbe:	4c06      	ldr	r4, [pc, #24]	; (8013dd8 <_sbrk_r+0x1c>)
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	4605      	mov	r5, r0
 8013dc4:	4608      	mov	r0, r1
 8013dc6:	6023      	str	r3, [r4, #0]
 8013dc8:	f7f8 ff4a 	bl	800cc60 <_sbrk>
 8013dcc:	1c43      	adds	r3, r0, #1
 8013dce:	d102      	bne.n	8013dd6 <_sbrk_r+0x1a>
 8013dd0:	6823      	ldr	r3, [r4, #0]
 8013dd2:	b103      	cbz	r3, 8013dd6 <_sbrk_r+0x1a>
 8013dd4:	602b      	str	r3, [r5, #0]
 8013dd6:	bd38      	pop	{r3, r4, r5, pc}
 8013dd8:	20000920 	.word	0x20000920

08013ddc <__sread>:
 8013ddc:	b510      	push	{r4, lr}
 8013dde:	460c      	mov	r4, r1
 8013de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013de4:	f000 f8a8 	bl	8013f38 <_read_r>
 8013de8:	2800      	cmp	r0, #0
 8013dea:	bfab      	itete	ge
 8013dec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013dee:	89a3      	ldrhlt	r3, [r4, #12]
 8013df0:	181b      	addge	r3, r3, r0
 8013df2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013df6:	bfac      	ite	ge
 8013df8:	6563      	strge	r3, [r4, #84]	; 0x54
 8013dfa:	81a3      	strhlt	r3, [r4, #12]
 8013dfc:	bd10      	pop	{r4, pc}

08013dfe <__swrite>:
 8013dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e02:	461f      	mov	r7, r3
 8013e04:	898b      	ldrh	r3, [r1, #12]
 8013e06:	05db      	lsls	r3, r3, #23
 8013e08:	4605      	mov	r5, r0
 8013e0a:	460c      	mov	r4, r1
 8013e0c:	4616      	mov	r6, r2
 8013e0e:	d505      	bpl.n	8013e1c <__swrite+0x1e>
 8013e10:	2302      	movs	r3, #2
 8013e12:	2200      	movs	r2, #0
 8013e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e18:	f000 f868 	bl	8013eec <_lseek_r>
 8013e1c:	89a3      	ldrh	r3, [r4, #12]
 8013e1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013e26:	81a3      	strh	r3, [r4, #12]
 8013e28:	4632      	mov	r2, r6
 8013e2a:	463b      	mov	r3, r7
 8013e2c:	4628      	mov	r0, r5
 8013e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e32:	f000 b817 	b.w	8013e64 <_write_r>

08013e36 <__sseek>:
 8013e36:	b510      	push	{r4, lr}
 8013e38:	460c      	mov	r4, r1
 8013e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e3e:	f000 f855 	bl	8013eec <_lseek_r>
 8013e42:	1c43      	adds	r3, r0, #1
 8013e44:	89a3      	ldrh	r3, [r4, #12]
 8013e46:	bf15      	itete	ne
 8013e48:	6560      	strne	r0, [r4, #84]	; 0x54
 8013e4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013e4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013e52:	81a3      	strheq	r3, [r4, #12]
 8013e54:	bf18      	it	ne
 8013e56:	81a3      	strhne	r3, [r4, #12]
 8013e58:	bd10      	pop	{r4, pc}

08013e5a <__sclose>:
 8013e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e5e:	f000 b813 	b.w	8013e88 <_close_r>
	...

08013e64 <_write_r>:
 8013e64:	b538      	push	{r3, r4, r5, lr}
 8013e66:	4c07      	ldr	r4, [pc, #28]	; (8013e84 <_write_r+0x20>)
 8013e68:	4605      	mov	r5, r0
 8013e6a:	4608      	mov	r0, r1
 8013e6c:	4611      	mov	r1, r2
 8013e6e:	2200      	movs	r2, #0
 8013e70:	6022      	str	r2, [r4, #0]
 8013e72:	461a      	mov	r2, r3
 8013e74:	f7f8 fea3 	bl	800cbbe <_write>
 8013e78:	1c43      	adds	r3, r0, #1
 8013e7a:	d102      	bne.n	8013e82 <_write_r+0x1e>
 8013e7c:	6823      	ldr	r3, [r4, #0]
 8013e7e:	b103      	cbz	r3, 8013e82 <_write_r+0x1e>
 8013e80:	602b      	str	r3, [r5, #0]
 8013e82:	bd38      	pop	{r3, r4, r5, pc}
 8013e84:	20000920 	.word	0x20000920

08013e88 <_close_r>:
 8013e88:	b538      	push	{r3, r4, r5, lr}
 8013e8a:	4c06      	ldr	r4, [pc, #24]	; (8013ea4 <_close_r+0x1c>)
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	4605      	mov	r5, r0
 8013e90:	4608      	mov	r0, r1
 8013e92:	6023      	str	r3, [r4, #0]
 8013e94:	f7f8 feaf 	bl	800cbf6 <_close>
 8013e98:	1c43      	adds	r3, r0, #1
 8013e9a:	d102      	bne.n	8013ea2 <_close_r+0x1a>
 8013e9c:	6823      	ldr	r3, [r4, #0]
 8013e9e:	b103      	cbz	r3, 8013ea2 <_close_r+0x1a>
 8013ea0:	602b      	str	r3, [r5, #0]
 8013ea2:	bd38      	pop	{r3, r4, r5, pc}
 8013ea4:	20000920 	.word	0x20000920

08013ea8 <_fstat_r>:
 8013ea8:	b538      	push	{r3, r4, r5, lr}
 8013eaa:	4c07      	ldr	r4, [pc, #28]	; (8013ec8 <_fstat_r+0x20>)
 8013eac:	2300      	movs	r3, #0
 8013eae:	4605      	mov	r5, r0
 8013eb0:	4608      	mov	r0, r1
 8013eb2:	4611      	mov	r1, r2
 8013eb4:	6023      	str	r3, [r4, #0]
 8013eb6:	f7f8 feaa 	bl	800cc0e <_fstat>
 8013eba:	1c43      	adds	r3, r0, #1
 8013ebc:	d102      	bne.n	8013ec4 <_fstat_r+0x1c>
 8013ebe:	6823      	ldr	r3, [r4, #0]
 8013ec0:	b103      	cbz	r3, 8013ec4 <_fstat_r+0x1c>
 8013ec2:	602b      	str	r3, [r5, #0]
 8013ec4:	bd38      	pop	{r3, r4, r5, pc}
 8013ec6:	bf00      	nop
 8013ec8:	20000920 	.word	0x20000920

08013ecc <_isatty_r>:
 8013ecc:	b538      	push	{r3, r4, r5, lr}
 8013ece:	4c06      	ldr	r4, [pc, #24]	; (8013ee8 <_isatty_r+0x1c>)
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	4605      	mov	r5, r0
 8013ed4:	4608      	mov	r0, r1
 8013ed6:	6023      	str	r3, [r4, #0]
 8013ed8:	f7f8 fea9 	bl	800cc2e <_isatty>
 8013edc:	1c43      	adds	r3, r0, #1
 8013ede:	d102      	bne.n	8013ee6 <_isatty_r+0x1a>
 8013ee0:	6823      	ldr	r3, [r4, #0]
 8013ee2:	b103      	cbz	r3, 8013ee6 <_isatty_r+0x1a>
 8013ee4:	602b      	str	r3, [r5, #0]
 8013ee6:	bd38      	pop	{r3, r4, r5, pc}
 8013ee8:	20000920 	.word	0x20000920

08013eec <_lseek_r>:
 8013eec:	b538      	push	{r3, r4, r5, lr}
 8013eee:	4c07      	ldr	r4, [pc, #28]	; (8013f0c <_lseek_r+0x20>)
 8013ef0:	4605      	mov	r5, r0
 8013ef2:	4608      	mov	r0, r1
 8013ef4:	4611      	mov	r1, r2
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	6022      	str	r2, [r4, #0]
 8013efa:	461a      	mov	r2, r3
 8013efc:	f7f8 fea2 	bl	800cc44 <_lseek>
 8013f00:	1c43      	adds	r3, r0, #1
 8013f02:	d102      	bne.n	8013f0a <_lseek_r+0x1e>
 8013f04:	6823      	ldr	r3, [r4, #0]
 8013f06:	b103      	cbz	r3, 8013f0a <_lseek_r+0x1e>
 8013f08:	602b      	str	r3, [r5, #0]
 8013f0a:	bd38      	pop	{r3, r4, r5, pc}
 8013f0c:	20000920 	.word	0x20000920

08013f10 <__ascii_mbtowc>:
 8013f10:	b082      	sub	sp, #8
 8013f12:	b901      	cbnz	r1, 8013f16 <__ascii_mbtowc+0x6>
 8013f14:	a901      	add	r1, sp, #4
 8013f16:	b142      	cbz	r2, 8013f2a <__ascii_mbtowc+0x1a>
 8013f18:	b14b      	cbz	r3, 8013f2e <__ascii_mbtowc+0x1e>
 8013f1a:	7813      	ldrb	r3, [r2, #0]
 8013f1c:	600b      	str	r3, [r1, #0]
 8013f1e:	7812      	ldrb	r2, [r2, #0]
 8013f20:	1c10      	adds	r0, r2, #0
 8013f22:	bf18      	it	ne
 8013f24:	2001      	movne	r0, #1
 8013f26:	b002      	add	sp, #8
 8013f28:	4770      	bx	lr
 8013f2a:	4610      	mov	r0, r2
 8013f2c:	e7fb      	b.n	8013f26 <__ascii_mbtowc+0x16>
 8013f2e:	f06f 0001 	mvn.w	r0, #1
 8013f32:	e7f8      	b.n	8013f26 <__ascii_mbtowc+0x16>

08013f34 <__malloc_lock>:
 8013f34:	4770      	bx	lr

08013f36 <__malloc_unlock>:
 8013f36:	4770      	bx	lr

08013f38 <_read_r>:
 8013f38:	b538      	push	{r3, r4, r5, lr}
 8013f3a:	4c07      	ldr	r4, [pc, #28]	; (8013f58 <_read_r+0x20>)
 8013f3c:	4605      	mov	r5, r0
 8013f3e:	4608      	mov	r0, r1
 8013f40:	4611      	mov	r1, r2
 8013f42:	2200      	movs	r2, #0
 8013f44:	6022      	str	r2, [r4, #0]
 8013f46:	461a      	mov	r2, r3
 8013f48:	f7f8 fe1c 	bl	800cb84 <_read>
 8013f4c:	1c43      	adds	r3, r0, #1
 8013f4e:	d102      	bne.n	8013f56 <_read_r+0x1e>
 8013f50:	6823      	ldr	r3, [r4, #0]
 8013f52:	b103      	cbz	r3, 8013f56 <_read_r+0x1e>
 8013f54:	602b      	str	r3, [r5, #0]
 8013f56:	bd38      	pop	{r3, r4, r5, pc}
 8013f58:	20000920 	.word	0x20000920

08013f5c <__ascii_wctomb>:
 8013f5c:	b149      	cbz	r1, 8013f72 <__ascii_wctomb+0x16>
 8013f5e:	2aff      	cmp	r2, #255	; 0xff
 8013f60:	bf85      	ittet	hi
 8013f62:	238a      	movhi	r3, #138	; 0x8a
 8013f64:	6003      	strhi	r3, [r0, #0]
 8013f66:	700a      	strbls	r2, [r1, #0]
 8013f68:	f04f 30ff 	movhi.w	r0, #4294967295
 8013f6c:	bf98      	it	ls
 8013f6e:	2001      	movls	r0, #1
 8013f70:	4770      	bx	lr
 8013f72:	4608      	mov	r0, r1
 8013f74:	4770      	bx	lr
	...

08013f78 <_init>:
 8013f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f7a:	bf00      	nop
 8013f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f7e:	bc08      	pop	{r3}
 8013f80:	469e      	mov	lr, r3
 8013f82:	4770      	bx	lr

08013f84 <_fini>:
 8013f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f86:	bf00      	nop
 8013f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f8a:	bc08      	pop	{r3}
 8013f8c:	469e      	mov	lr, r3
 8013f8e:	4770      	bx	lr
