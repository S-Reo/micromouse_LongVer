
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
<<<<<<< HEAD
  2 .text         000109b8  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000418  080189b8  080189b8  000289b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08018dd0  08018dd0  00030250  2**0
                  CONTENTS
  5 .ARM          00000008  08018dd0  08018dd0  00028dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08018dd8  08018dd8  00030250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08018dd8  08018dd8  00028dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08018ddc  08018ddc  00028ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000250  20000000  08018de0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0001a590  20000250  08019030  00030250  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2001a7e0  08019030  0003a7e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f2c  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002ce2  00000000  00000000  000451ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000014b8  00000000  00000000  00047e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001360  00000000  00000000  00049348  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00021b3e  00000000  00000000  0004a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f64c  00000000  00000000  0006c1e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c8605  00000000  00000000  0007b832  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00143e37  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064e8  00000000  00000000  00143eb4  2**2
=======
  2 .text         0000e918  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000420  08016918  08016918  00026918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08016d38  08016d38  00030edc  2**0
                  CONTENTS
  5 .ARM          00000008  08016d38  08016d38  00026d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08016d40  08016d40  00030edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08016d40  08016d40  00026d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08016d44  08016d44  00026d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000edc  20000000  08016d48  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00015788  20000ee0  08017c24  00030ee0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20016668  08017c24  00036668  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030edc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000143b8  00000000  00000000  00030f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002cd7  00000000  00000000  000452c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000014a8  00000000  00000000  00047fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001350  00000000  00000000  00049448  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00021b3e  00000000  00000000  0004a798  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000ef29  00000000  00000000  0006c2d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c8617  00000000  00000000  0007b1ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00143816  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006460  00000000  00000000  00143894  2**2
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
<<<<<<< HEAD
 8008018:	20000250 	.word	0x20000250
 800801c:	00000000 	.word	0x00000000
 8008020:	080189a0 	.word	0x080189a0
=======
 8008018:	20000ee0 	.word	0x20000ee0
 800801c:	00000000 	.word	0x00000000
 8008020:	08016900 	.word	0x08016900
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8008038:	20000254 	.word	0x20000254
 800803c:	080189a0 	.word	0x080189a0
=======
 8008038:	20000ee4 	.word	0x20000ee4
 800803c:	08016900 	.word	0x08016900
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <Side_Wall_Control>:

float R_velocity, L_velocity;
float Target_R_velo, Target_L_velo;

//壁制御
void Side_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 8008db8:	b590      	push	{r4, r7, lr}
 8008dba:	b087      	sub	sp, #28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	ed87 0a05 	vstr	s0, [r7, #20]
 8008dc2:	edc7 0a04 	vstr	s1, [r7, #16]
 8008dc6:	ed87 1a03 	vstr	s2, [r7, #12]
 8008dca:	edc7 1a02 	vstr	s3, [r7, #8]
 8008dce:	ed87 2a01 	vstr	s4, [r7, #4]
 8008dd2:	edc7 2a00 	vstr	s5, [r7]

	static float e=0, ei=0, ed=0, e0=0;
	if(error_reset == 0){
 8008dd6:	4b54      	ldr	r3, [pc, #336]	; (8008f28 <Side_Wall_Control+0x170>)
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10f      	bne.n	8008dfe <Side_Wall_Control+0x46>
		e=0;
 8008dde:	4b53      	ldr	r3, [pc, #332]	; (8008f2c <Side_Wall_Control+0x174>)
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]
		ei =0;
 8008de6:	4b52      	ldr	r3, [pc, #328]	; (8008f30 <Side_Wall_Control+0x178>)
 8008de8:	f04f 0200 	mov.w	r2, #0
 8008dec:	601a      	str	r2, [r3, #0]
		ed = 0;
 8008dee:	4b51      	ldr	r3, [pc, #324]	; (8008f34 <Side_Wall_Control+0x17c>)
 8008df0:	f04f 0200 	mov.w	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8008df6:	4b50      	ldr	r3, [pc, #320]	; (8008f38 <Side_Wall_Control+0x180>)
 8008df8:	f04f 0200 	mov.w	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8008dfe:	4b4a      	ldr	r3, [pc, #296]	; (8008f28 <Side_Wall_Control+0x170>)
 8008e00:	2201      	movs	r2, #1
 8008e02:	701a      	strb	r2, [r3, #0]
	e =  40 + target - now;//r - l
 8008e04:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e08:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8008f3c <Side_Wall_Control+0x184>
 8008e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e10:	edd7 7a04 	vldr	s15, [r7, #16]
 8008e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e18:	4b44      	ldr	r3, [pc, #272]	; (8008f2c <Side_Wall_Control+0x174>)
 8008e1a:	edc3 7a00 	vstr	s15, [r3]
	ei += e * T;
 8008e1e:	4b43      	ldr	r3, [pc, #268]	; (8008f2c <Side_Wall_Control+0x174>)
 8008e20:	ed93 7a00 	vldr	s14, [r3]
 8008e24:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e2c:	4b40      	ldr	r3, [pc, #256]	; (8008f30 <Side_Wall_Control+0x178>)
 8008e2e:	edd3 7a00 	vldr	s15, [r3]
 8008e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e36:	4b3e      	ldr	r3, [pc, #248]	; (8008f30 <Side_Wall_Control+0x178>)
 8008e38:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8008e3c:	4b3b      	ldr	r3, [pc, #236]	; (8008f2c <Side_Wall_Control+0x174>)
 8008e3e:	ed93 7a00 	vldr	s14, [r3]
 8008e42:	4b3d      	ldr	r3, [pc, #244]	; (8008f38 <Side_Wall_Control+0x180>)
 8008e44:	edd3 7a00 	vldr	s15, [r3]
 8008e48:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008e4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8008e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e54:	4b37      	ldr	r3, [pc, #220]	; (8008f34 <Side_Wall_Control+0x17c>)
 8008e56:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 8008e5a:	4b34      	ldr	r3, [pc, #208]	; (8008f2c <Side_Wall_Control+0x174>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a36      	ldr	r2, [pc, #216]	; (8008f38 <Side_Wall_Control+0x180>)
 8008e60:	6013      	str	r3, [r2, #0]

	R_wall =  (int16_t)round(KP*e + KI*ei + KD*ed);
 8008e62:	4b32      	ldr	r3, [pc, #200]	; (8008f2c <Side_Wall_Control+0x174>)
 8008e64:	ed93 7a00 	vldr	s14, [r3]
 8008e68:	edd7 7a02 	vldr	s15, [r7, #8]
 8008e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e70:	4b2f      	ldr	r3, [pc, #188]	; (8008f30 <Side_Wall_Control+0x178>)
 8008e72:	edd3 6a00 	vldr	s13, [r3]
 8008e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e82:	4b2c      	ldr	r3, [pc, #176]	; (8008f34 <Side_Wall_Control+0x17c>)
 8008e84:	edd3 6a00 	vldr	s13, [r3]
 8008e88:	edd7 7a00 	vldr	s15, [r7]
 8008e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e94:	ee17 0a90 	vmov	r0, s15
 8008e98:	f7ff fa8e 	bl	80083b8 <__aeabi_f2d>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	ec44 3b10 	vmov	d0, r3, r4
<<<<<<< HEAD
 8008ea4:	f00d f972 	bl	801618c <round>
=======
 8008ea4:	f00b f924 	bl	80140f0 <round>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 8008ea8:	ec54 3b10 	vmov	r3, r4, d0
 8008eac:	4618      	mov	r0, r3
 8008eae:	4621      	mov	r1, r4
 8008eb0:	f7ff fd8a 	bl	80089c8 <__aeabi_d2iz>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	b21a      	sxth	r2, r3
 8008eb8:	4b21      	ldr	r3, [pc, #132]	; (8008f40 <Side_Wall_Control+0x188>)
 8008eba:	801a      	strh	r2, [r3, #0]
	L_wall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8008ebc:	4b1b      	ldr	r3, [pc, #108]	; (8008f2c <Side_Wall_Control+0x174>)
 8008ebe:	ed93 7a00 	vldr	s14, [r3]
 8008ec2:	edd7 7a02 	vldr	s15, [r7, #8]
 8008ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008eca:	4b19      	ldr	r3, [pc, #100]	; (8008f30 <Side_Wall_Control+0x178>)
 8008ecc:	edd3 6a00 	vldr	s13, [r3]
 8008ed0:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ed8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008edc:	4b15      	ldr	r3, [pc, #84]	; (8008f34 <Side_Wall_Control+0x17c>)
 8008ede:	edd3 6a00 	vldr	s13, [r3]
 8008ee2:	edd7 7a00 	vldr	s15, [r7]
 8008ee6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008eee:	ee17 0a90 	vmov	r0, s15
 8008ef2:	f7ff fa61 	bl	80083b8 <__aeabi_f2d>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	460c      	mov	r4, r1
 8008efa:	ec44 3b10 	vmov	d0, r3, r4
<<<<<<< HEAD
 8008efe:	f00d f945 	bl	801618c <round>
=======
 8008efe:	f00b f8f7 	bl	80140f0 <round>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 8008f02:	ec54 3b10 	vmov	r3, r4, d0
 8008f06:	4618      	mov	r0, r3
 8008f08:	4621      	mov	r1, r4
 8008f0a:	f7ff fd5d 	bl	80089c8 <__aeabi_d2iz>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	b21b      	sxth	r3, r3
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	425b      	negs	r3, r3
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	b21a      	sxth	r2, r3
 8008f1a:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <Side_Wall_Control+0x18c>)
 8008f1c:	801a      	strh	r2, [r3, #0]

}
 8008f1e:	bf00      	nop
 8008f20:	371c      	adds	r7, #28
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd90      	pop	{r4, r7, pc}
 8008f26:	bf00      	nop
<<<<<<< HEAD
 8008f28:	2000026c 	.word	0x2000026c
 8008f2c:	20000270 	.word	0x20000270
 8008f30:	20000274 	.word	0x20000274
 8008f34:	20000278 	.word	0x20000278
 8008f38:	2000027c 	.word	0x2000027c
=======
 8008f28:	20000efc 	.word	0x20000efc
 8008f2c:	20000f00 	.word	0x20000f00
 8008f30:	20000f04 	.word	0x20000f04
 8008f34:	20000f08 	.word	0x20000f08
 8008f38:	20000f0c 	.word	0x20000f0c
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 8008f3c:	42200000 	.word	0x42200000
 8008f40:	20005056 	.word	0x20005056
 8008f44:	20005068 	.word	0x20005068

08008f48 <Left_Wall_Control>:

void Left_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 8008f48:	b590      	push	{r4, r7, lr}
 8008f4a:	b087      	sub	sp, #28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	ed87 0a05 	vstr	s0, [r7, #20]
 8008f52:	edc7 0a04 	vstr	s1, [r7, #16]
 8008f56:	ed87 1a03 	vstr	s2, [r7, #12]
 8008f5a:	edc7 1a02 	vstr	s3, [r7, #8]
 8008f5e:	ed87 2a01 	vstr	s4, [r7, #4]
 8008f62:	edc7 2a00 	vstr	s5, [r7]

	static float e=0, ei=0, ed=0, e0=0;
	if(error_reset == 0){
 8008f66:	4b59      	ldr	r3, [pc, #356]	; (80090cc <Left_Wall_Control+0x184>)
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10f      	bne.n	8008f8e <Left_Wall_Control+0x46>
		e=0;
 8008f6e:	4b58      	ldr	r3, [pc, #352]	; (80090d0 <Left_Wall_Control+0x188>)
 8008f70:	f04f 0200 	mov.w	r2, #0
 8008f74:	601a      	str	r2, [r3, #0]
		ei =0;
 8008f76:	4b57      	ldr	r3, [pc, #348]	; (80090d4 <Left_Wall_Control+0x18c>)
 8008f78:	f04f 0200 	mov.w	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]
		ed = 0;
 8008f7e:	4b56      	ldr	r3, [pc, #344]	; (80090d8 <Left_Wall_Control+0x190>)
 8008f80:	f04f 0200 	mov.w	r2, #0
 8008f84:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8008f86:	4b55      	ldr	r3, [pc, #340]	; (80090dc <Left_Wall_Control+0x194>)
 8008f88:	f04f 0200 	mov.w	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8008f8e:	4b4f      	ldr	r3, [pc, #316]	; (80090cc <Left_Wall_Control+0x184>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	701a      	strb	r2, [r3, #0]
	e = 1.2*(target - now);
 8008f94:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f98:	edd7 7a04 	vldr	s15, [r7, #16]
 8008f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008fa0:	ee17 0a90 	vmov	r0, s15
 8008fa4:	f7ff fa08 	bl	80083b8 <__aeabi_f2d>
 8008fa8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8008fac:	4b4c      	ldr	r3, [pc, #304]	; (80090e0 <Left_Wall_Control+0x198>)
 8008fae:	f7ff fa5b 	bl	8008468 <__aeabi_dmul>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	4621      	mov	r1, r4
 8008fba:	f7ff fd2d 	bl	8008a18 <__aeabi_d2f>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	4b43      	ldr	r3, [pc, #268]	; (80090d0 <Left_Wall_Control+0x188>)
 8008fc2:	601a      	str	r2, [r3, #0]
	ei += e * T;
 8008fc4:	4b42      	ldr	r3, [pc, #264]	; (80090d0 <Left_Wall_Control+0x188>)
 8008fc6:	ed93 7a00 	vldr	s14, [r3]
 8008fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8008fce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fd2:	4b40      	ldr	r3, [pc, #256]	; (80090d4 <Left_Wall_Control+0x18c>)
 8008fd4:	edd3 7a00 	vldr	s15, [r3]
 8008fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fdc:	4b3d      	ldr	r3, [pc, #244]	; (80090d4 <Left_Wall_Control+0x18c>)
 8008fde:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8008fe2:	4b3b      	ldr	r3, [pc, #236]	; (80090d0 <Left_Wall_Control+0x188>)
 8008fe4:	ed93 7a00 	vldr	s14, [r3]
 8008fe8:	4b3c      	ldr	r3, [pc, #240]	; (80090dc <Left_Wall_Control+0x194>)
 8008fea:	edd3 7a00 	vldr	s15, [r3]
 8008fee:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008ff2:	ed97 7a03 	vldr	s14, [r7, #12]
 8008ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ffa:	4b37      	ldr	r3, [pc, #220]	; (80090d8 <Left_Wall_Control+0x190>)
 8008ffc:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 8009000:	4b33      	ldr	r3, [pc, #204]	; (80090d0 <Left_Wall_Control+0x188>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a35      	ldr	r2, [pc, #212]	; (80090dc <Left_Wall_Control+0x194>)
 8009006:	6013      	str	r3, [r2, #0]
	L_leftwall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8009008:	4b31      	ldr	r3, [pc, #196]	; (80090d0 <Left_Wall_Control+0x188>)
 800900a:	ed93 7a00 	vldr	s14, [r3]
 800900e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009012:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009016:	4b2f      	ldr	r3, [pc, #188]	; (80090d4 <Left_Wall_Control+0x18c>)
 8009018:	edd3 6a00 	vldr	s13, [r3]
 800901c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009024:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009028:	4b2b      	ldr	r3, [pc, #172]	; (80090d8 <Left_Wall_Control+0x190>)
 800902a:	edd3 6a00 	vldr	s13, [r3]
 800902e:	edd7 7a00 	vldr	s15, [r7]
 8009032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800903a:	ee17 0a90 	vmov	r0, s15
 800903e:	f7ff f9bb 	bl	80083b8 <__aeabi_f2d>
 8009042:	4603      	mov	r3, r0
 8009044:	460c      	mov	r4, r1
 8009046:	ec44 3b10 	vmov	d0, r3, r4
<<<<<<< HEAD
 800904a:	f00d f89f 	bl	801618c <round>
=======
 800904a:	f00b f851 	bl	80140f0 <round>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 800904e:	ec54 3b10 	vmov	r3, r4, d0
 8009052:	4618      	mov	r0, r3
 8009054:	4621      	mov	r1, r4
 8009056:	f7ff fcb7 	bl	80089c8 <__aeabi_d2iz>
 800905a:	4603      	mov	r3, r0
 800905c:	b21b      	sxth	r3, r3
 800905e:	b29b      	uxth	r3, r3
 8009060:	425b      	negs	r3, r3
 8009062:	b29b      	uxth	r3, r3
 8009064:	b21a      	sxth	r2, r3
 8009066:	4b1f      	ldr	r3, [pc, #124]	; (80090e4 <Left_Wall_Control+0x19c>)
 8009068:	801a      	strh	r2, [r3, #0]
	R_leftwall = (int16_t)round(KP*e + KI*ei + KD*ed);
 800906a:	4b19      	ldr	r3, [pc, #100]	; (80090d0 <Left_Wall_Control+0x188>)
 800906c:	ed93 7a00 	vldr	s14, [r3]
 8009070:	edd7 7a02 	vldr	s15, [r7, #8]
 8009074:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009078:	4b16      	ldr	r3, [pc, #88]	; (80090d4 <Left_Wall_Control+0x18c>)
 800907a:	edd3 6a00 	vldr	s13, [r3]
 800907e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009086:	ee37 7a27 	vadd.f32	s14, s14, s15
 800908a:	4b13      	ldr	r3, [pc, #76]	; (80090d8 <Left_Wall_Control+0x190>)
 800908c:	edd3 6a00 	vldr	s13, [r3]
 8009090:	edd7 7a00 	vldr	s15, [r7]
 8009094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800909c:	ee17 0a90 	vmov	r0, s15
 80090a0:	f7ff f98a 	bl	80083b8 <__aeabi_f2d>
 80090a4:	4603      	mov	r3, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	ec44 3b10 	vmov	d0, r3, r4
<<<<<<< HEAD
 80090ac:	f00d f86e 	bl	801618c <round>
=======
 80090ac:	f00b f820 	bl	80140f0 <round>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 80090b0:	ec54 3b10 	vmov	r3, r4, d0
 80090b4:	4618      	mov	r0, r3
 80090b6:	4621      	mov	r1, r4
 80090b8:	f7ff fc86 	bl	80089c8 <__aeabi_d2iz>
 80090bc:	4603      	mov	r3, r0
 80090be:	b21a      	sxth	r2, r3
 80090c0:	4b09      	ldr	r3, [pc, #36]	; (80090e8 <Left_Wall_Control+0x1a0>)
 80090c2:	801a      	strh	r2, [r3, #0]
}
 80090c4:	bf00      	nop
 80090c6:	371c      	adds	r7, #28
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd90      	pop	{r4, r7, pc}
<<<<<<< HEAD
 80090cc:	2000026c 	.word	0x2000026c
 80090d0:	20000280 	.word	0x20000280
 80090d4:	20000284 	.word	0x20000284
 80090d8:	20000288 	.word	0x20000288
 80090dc:	2000028c 	.word	0x2000028c
=======
 80090cc:	20000efc 	.word	0x20000efc
 80090d0:	20000f10 	.word	0x20000f10
 80090d4:	20000f14 	.word	0x20000f14
 80090d8:	20000f18 	.word	0x20000f18
 80090dc:	20000f1c 	.word	0x20000f1c
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 80090e0:	3ff33333 	.word	0x3ff33333
 80090e4:	20005052 	.word	0x20005052
 80090e8:	20005074 	.word	0x20005074

080090ec <Right_Wall_Control>:

void Right_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 80090ec:	b590      	push	{r4, r7, lr}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	ed87 0a05 	vstr	s0, [r7, #20]
 80090f6:	edc7 0a04 	vstr	s1, [r7, #16]
 80090fa:	ed87 1a03 	vstr	s2, [r7, #12]
 80090fe:	edc7 1a02 	vstr	s3, [r7, #8]
 8009102:	ed87 2a01 	vstr	s4, [r7, #4]
 8009106:	edc7 2a00 	vstr	s5, [r7]

	static float e=0, ei=0, ed=0, e0=0;
	if(error_reset == 0){
 800910a:	4b59      	ldr	r3, [pc, #356]	; (8009270 <Right_Wall_Control+0x184>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10f      	bne.n	8009132 <Right_Wall_Control+0x46>
		e=0;
 8009112:	4b58      	ldr	r3, [pc, #352]	; (8009274 <Right_Wall_Control+0x188>)
 8009114:	f04f 0200 	mov.w	r2, #0
 8009118:	601a      	str	r2, [r3, #0]
		ei =0;
 800911a:	4b57      	ldr	r3, [pc, #348]	; (8009278 <Right_Wall_Control+0x18c>)
 800911c:	f04f 0200 	mov.w	r2, #0
 8009120:	601a      	str	r2, [r3, #0]
		ed = 0;
 8009122:	4b56      	ldr	r3, [pc, #344]	; (800927c <Right_Wall_Control+0x190>)
 8009124:	f04f 0200 	mov.w	r2, #0
 8009128:	601a      	str	r2, [r3, #0]
		e0 = 0;
 800912a:	4b55      	ldr	r3, [pc, #340]	; (8009280 <Right_Wall_Control+0x194>)
 800912c:	f04f 0200 	mov.w	r2, #0
 8009130:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8009132:	4b4f      	ldr	r3, [pc, #316]	; (8009270 <Right_Wall_Control+0x184>)
 8009134:	2201      	movs	r2, #1
 8009136:	701a      	strb	r2, [r3, #0]
	e = 1.2*(target - now);
 8009138:	ed97 7a05 	vldr	s14, [r7, #20]
 800913c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009144:	ee17 0a90 	vmov	r0, s15
 8009148:	f7ff f936 	bl	80083b8 <__aeabi_f2d>
 800914c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8009150:	4b4c      	ldr	r3, [pc, #304]	; (8009284 <Right_Wall_Control+0x198>)
 8009152:	f7ff f989 	bl	8008468 <__aeabi_dmul>
 8009156:	4603      	mov	r3, r0
 8009158:	460c      	mov	r4, r1
 800915a:	4618      	mov	r0, r3
 800915c:	4621      	mov	r1, r4
 800915e:	f7ff fc5b 	bl	8008a18 <__aeabi_d2f>
 8009162:	4602      	mov	r2, r0
 8009164:	4b43      	ldr	r3, [pc, #268]	; (8009274 <Right_Wall_Control+0x188>)
 8009166:	601a      	str	r2, [r3, #0]
	ei += e * T;
 8009168:	4b42      	ldr	r3, [pc, #264]	; (8009274 <Right_Wall_Control+0x188>)
 800916a:	ed93 7a00 	vldr	s14, [r3]
 800916e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009176:	4b40      	ldr	r3, [pc, #256]	; (8009278 <Right_Wall_Control+0x18c>)
 8009178:	edd3 7a00 	vldr	s15, [r3]
 800917c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009180:	4b3d      	ldr	r3, [pc, #244]	; (8009278 <Right_Wall_Control+0x18c>)
 8009182:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8009186:	4b3b      	ldr	r3, [pc, #236]	; (8009274 <Right_Wall_Control+0x188>)
 8009188:	ed93 7a00 	vldr	s14, [r3]
 800918c:	4b3c      	ldr	r3, [pc, #240]	; (8009280 <Right_Wall_Control+0x194>)
 800918e:	edd3 7a00 	vldr	s15, [r3]
 8009192:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009196:	ed97 7a03 	vldr	s14, [r7, #12]
 800919a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800919e:	4b37      	ldr	r3, [pc, #220]	; (800927c <Right_Wall_Control+0x190>)
 80091a0:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 80091a4:	4b33      	ldr	r3, [pc, #204]	; (8009274 <Right_Wall_Control+0x188>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a35      	ldr	r2, [pc, #212]	; (8009280 <Right_Wall_Control+0x194>)
 80091aa:	6013      	str	r3, [r2, #0]
	L_rightwall = (int16_t)round(KP*e + KI*ei + KD*ed);
 80091ac:	4b31      	ldr	r3, [pc, #196]	; (8009274 <Right_Wall_Control+0x188>)
 80091ae:	ed93 7a00 	vldr	s14, [r3]
 80091b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80091b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80091ba:	4b2f      	ldr	r3, [pc, #188]	; (8009278 <Right_Wall_Control+0x18c>)
 80091bc:	edd3 6a00 	vldr	s13, [r3]
 80091c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80091c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80091cc:	4b2b      	ldr	r3, [pc, #172]	; (800927c <Right_Wall_Control+0x190>)
 80091ce:	edd3 6a00 	vldr	s13, [r3]
 80091d2:	edd7 7a00 	vldr	s15, [r7]
 80091d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091de:	ee17 0a90 	vmov	r0, s15
 80091e2:	f7ff f8e9 	bl	80083b8 <__aeabi_f2d>
 80091e6:	4603      	mov	r3, r0
 80091e8:	460c      	mov	r4, r1
 80091ea:	ec44 3b10 	vmov	d0, r3, r4
<<<<<<< HEAD
 80091ee:	f00c ffcd 	bl	801618c <round>
=======
 80091ee:	f00a ff7f 	bl	80140f0 <round>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 80091f2:	ec54 3b10 	vmov	r3, r4, d0
 80091f6:	4618      	mov	r0, r3
 80091f8:	4621      	mov	r1, r4
 80091fa:	f7ff fbe5 	bl	80089c8 <__aeabi_d2iz>
 80091fe:	4603      	mov	r3, r0
 8009200:	b21a      	sxth	r2, r3
 8009202:	4b21      	ldr	r3, [pc, #132]	; (8009288 <Right_Wall_Control+0x19c>)
 8009204:	801a      	strh	r2, [r3, #0]
	R_rightwall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8009206:	4b1b      	ldr	r3, [pc, #108]	; (8009274 <Right_Wall_Control+0x188>)
 8009208:	ed93 7a00 	vldr	s14, [r3]
 800920c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009210:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009214:	4b18      	ldr	r3, [pc, #96]	; (8009278 <Right_Wall_Control+0x18c>)
 8009216:	edd3 6a00 	vldr	s13, [r3]
 800921a:	edd7 7a01 	vldr	s15, [r7, #4]
 800921e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009222:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009226:	4b15      	ldr	r3, [pc, #84]	; (800927c <Right_Wall_Control+0x190>)
 8009228:	edd3 6a00 	vldr	s13, [r3]
 800922c:	edd7 7a00 	vldr	s15, [r7]
 8009230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009238:	ee17 0a90 	vmov	r0, s15
 800923c:	f7ff f8bc 	bl	80083b8 <__aeabi_f2d>
 8009240:	4603      	mov	r3, r0
 8009242:	460c      	mov	r4, r1
 8009244:	ec44 3b10 	vmov	d0, r3, r4
<<<<<<< HEAD
 8009248:	f00c ffa0 	bl	801618c <round>
=======
 8009248:	f00a ff52 	bl	80140f0 <round>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 800924c:	ec54 3b10 	vmov	r3, r4, d0
 8009250:	4618      	mov	r0, r3
 8009252:	4621      	mov	r1, r4
 8009254:	f7ff fbb8 	bl	80089c8 <__aeabi_d2iz>
 8009258:	4603      	mov	r3, r0
 800925a:	b21b      	sxth	r3, r3
 800925c:	b29b      	uxth	r3, r3
 800925e:	425b      	negs	r3, r3
 8009260:	b29b      	uxth	r3, r3
 8009262:	b21a      	sxth	r2, r3
 8009264:	4b09      	ldr	r3, [pc, #36]	; (800928c <Right_Wall_Control+0x1a0>)
 8009266:	801a      	strh	r2, [r3, #0]
}
 8009268:	bf00      	nop
 800926a:	371c      	adds	r7, #28
 800926c:	46bd      	mov	sp, r7
 800926e:	bd90      	pop	{r4, r7, pc}
<<<<<<< HEAD
 8009270:	2000026c 	.word	0x2000026c
 8009274:	20000290 	.word	0x20000290
 8009278:	20000294 	.word	0x20000294
 800927c:	20000298 	.word	0x20000298
 8009280:	2000029c 	.word	0x2000029c
=======
 8009270:	20000efc 	.word	0x20000efc
 8009274:	20000f20 	.word	0x20000f20
 8009278:	20000f24 	.word	0x20000f24
 800927c:	20000f28 	.word	0x20000f28
 8009280:	20000f2c 	.word	0x20000f2c
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 8009284:	3ff33333 	.word	0x3ff33333
 8009288:	20005044 	.word	0x20005044
 800928c:	2000505c 	.word	0x2000505c

08009290 <Velocity_Control>:

//速度制御
void Velocity_Control(float target, float now, float T, float KP, float KI, float KD){ //TIM3,4
 8009290:	b590      	push	{r4, r7, lr}
 8009292:	b087      	sub	sp, #28
 8009294:	af00      	add	r7, sp, #0
 8009296:	ed87 0a05 	vstr	s0, [r7, #20]
 800929a:	edc7 0a04 	vstr	s1, [r7, #16]
 800929e:	ed87 1a03 	vstr	s2, [r7, #12]
 80092a2:	edc7 1a02 	vstr	s3, [r7, #8]
 80092a6:	ed87 2a01 	vstr	s4, [r7, #4]
 80092aa:	edc7 2a00 	vstr	s5, [r7]

	static float e=0, ei=0, ed=0, e0=0;

	if(error_reset == 0){
 80092ae:	4b50      	ldr	r3, [pc, #320]	; (80093f0 <Velocity_Control+0x160>)
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10f      	bne.n	80092d6 <Velocity_Control+0x46>
		e=0;
 80092b6:	4b4f      	ldr	r3, [pc, #316]	; (80093f4 <Velocity_Control+0x164>)
 80092b8:	f04f 0200 	mov.w	r2, #0
 80092bc:	601a      	str	r2, [r3, #0]
		ei =0;
 80092be:	4b4e      	ldr	r3, [pc, #312]	; (80093f8 <Velocity_Control+0x168>)
 80092c0:	f04f 0200 	mov.w	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]
		ed = 0;
 80092c6:	4b4d      	ldr	r3, [pc, #308]	; (80093fc <Velocity_Control+0x16c>)
 80092c8:	f04f 0200 	mov.w	r2, #0
 80092cc:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80092ce:	4b4c      	ldr	r3, [pc, #304]	; (8009400 <Velocity_Control+0x170>)
 80092d0:	f04f 0200 	mov.w	r2, #0
 80092d4:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80092d6:	4b46      	ldr	r3, [pc, #280]	; (80093f0 <Velocity_Control+0x160>)
 80092d8:	2201      	movs	r2, #1
 80092da:	701a      	strb	r2, [r3, #0]
	e = target - now;
 80092dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80092e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80092e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092e8:	4b42      	ldr	r3, [pc, #264]	; (80093f4 <Velocity_Control+0x164>)
 80092ea:	edc3 7a00 	vstr	s15, [r3]
	ei += e * T;
 80092ee:	4b41      	ldr	r3, [pc, #260]	; (80093f4 <Velocity_Control+0x164>)
 80092f0:	ed93 7a00 	vldr	s14, [r3]
 80092f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80092f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092fc:	4b3e      	ldr	r3, [pc, #248]	; (80093f8 <Velocity_Control+0x168>)
 80092fe:	edd3 7a00 	vldr	s15, [r3]
 8009302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009306:	4b3c      	ldr	r3, [pc, #240]	; (80093f8 <Velocity_Control+0x168>)
 8009308:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 800930c:	4b39      	ldr	r3, [pc, #228]	; (80093f4 <Velocity_Control+0x164>)
 800930e:	ed93 7a00 	vldr	s14, [r3]
 8009312:	4b3b      	ldr	r3, [pc, #236]	; (8009400 <Velocity_Control+0x170>)
 8009314:	edd3 7a00 	vldr	s15, [r3]
 8009318:	ee77 6a67 	vsub.f32	s13, s14, s15
 800931c:	ed97 7a03 	vldr	s14, [r7, #12]
 8009320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009324:	4b35      	ldr	r3, [pc, #212]	; (80093fc <Velocity_Control+0x16c>)
 8009326:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 800932a:	4b32      	ldr	r3, [pc, #200]	; (80093f4 <Velocity_Control+0x164>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a34      	ldr	r2, [pc, #208]	; (8009400 <Velocity_Control+0x170>)
 8009330:	6013      	str	r3, [r2, #0]

    //o PID制御して、PWMの出力に反映
	R_v_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009332:	4b30      	ldr	r3, [pc, #192]	; (80093f4 <Velocity_Control+0x164>)
 8009334:	ed93 7a00 	vldr	s14, [r3]
 8009338:	edd7 7a02 	vldr	s15, [r7, #8]
 800933c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009340:	4b2d      	ldr	r3, [pc, #180]	; (80093f8 <Velocity_Control+0x168>)
 8009342:	edd3 6a00 	vldr	s13, [r3]
 8009346:	edd7 7a01 	vldr	s15, [r7, #4]
 800934a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800934e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009352:	4b2a      	ldr	r3, [pc, #168]	; (80093fc <Velocity_Control+0x16c>)
 8009354:	edd3 6a00 	vldr	s13, [r3]
 8009358:	edd7 7a00 	vldr	s15, [r7]
 800935c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009364:	ee17 0a90 	vmov	r0, s15
 8009368:	f7ff f826 	bl	80083b8 <__aeabi_f2d>
 800936c:	4603      	mov	r3, r0
 800936e:	460c      	mov	r4, r1
 8009370:	ec44 3b10 	vmov	d0, r3, r4
<<<<<<< HEAD
 8009374:	f00c ff0a 	bl	801618c <round>
=======
 8009374:	f00a febc 	bl	80140f0 <round>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 8009378:	ec54 3b10 	vmov	r3, r4, d0
 800937c:	4618      	mov	r0, r3
 800937e:	4621      	mov	r1, r4
 8009380:	f7ff fb22 	bl	80089c8 <__aeabi_d2iz>
 8009384:	4603      	mov	r3, r0
 8009386:	b21a      	sxth	r2, r3
 8009388:	4b1e      	ldr	r3, [pc, #120]	; (8009404 <Velocity_Control+0x174>)
 800938a:	801a      	strh	r2, [r3, #0]
	L_v_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 800938c:	4b19      	ldr	r3, [pc, #100]	; (80093f4 <Velocity_Control+0x164>)
 800938e:	ed93 7a00 	vldr	s14, [r3]
 8009392:	edd7 7a02 	vldr	s15, [r7, #8]
 8009396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800939a:	4b17      	ldr	r3, [pc, #92]	; (80093f8 <Velocity_Control+0x168>)
 800939c:	edd3 6a00 	vldr	s13, [r3]
 80093a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80093a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80093a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80093ac:	4b13      	ldr	r3, [pc, #76]	; (80093fc <Velocity_Control+0x16c>)
 80093ae:	edd3 6a00 	vldr	s13, [r3]
 80093b2:	edd7 7a00 	vldr	s15, [r7]
 80093b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80093ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093be:	ee17 0a90 	vmov	r0, s15
 80093c2:	f7fe fff9 	bl	80083b8 <__aeabi_f2d>
 80093c6:	4603      	mov	r3, r0
 80093c8:	460c      	mov	r4, r1
 80093ca:	ec44 3b10 	vmov	d0, r3, r4
<<<<<<< HEAD
 80093ce:	f00c fedd 	bl	801618c <round>
=======
 80093ce:	f00a fe8f 	bl	80140f0 <round>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 80093d2:	ec54 3b10 	vmov	r3, r4, d0
 80093d6:	4618      	mov	r0, r3
 80093d8:	4621      	mov	r1, r4
 80093da:	f7ff faf5 	bl	80089c8 <__aeabi_d2iz>
 80093de:	4603      	mov	r3, r0
 80093e0:	b21a      	sxth	r2, r3
 80093e2:	4b09      	ldr	r3, [pc, #36]	; (8009408 <Velocity_Control+0x178>)
 80093e4:	801a      	strh	r2, [r3, #0]

	//o代入は個でよさそう
}
 80093e6:	bf00      	nop
 80093e8:	371c      	adds	r7, #28
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd90      	pop	{r4, r7, pc}
 80093ee:	bf00      	nop
<<<<<<< HEAD
 80093f0:	2000026c 	.word	0x2000026c
 80093f4:	200002a0 	.word	0x200002a0
 80093f8:	200002a4 	.word	0x200002a4
 80093fc:	200002a8 	.word	0x200002a8
 8009400:	200002ac 	.word	0x200002ac
 8009404:	2000e01c 	.word	0x2000e01c
 8009408:	2000e014 	.word	0x2000e014
=======
 80093f0:	20000efc 	.word	0x20000efc
 80093f4:	20000f30 	.word	0x20000f30
 80093f8:	20000f34 	.word	0x20000f34
 80093fc:	20000f38 	.word	0x20000f38
 8009400:	20000f3c 	.word	0x20000f3c
 8009404:	20005058 	.word	0x20005058
 8009408:	20005050 	.word	0x20005050
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

0800940c <Right_Velo_Control>:

void Right_Velo_Control(float target, float now, float T, float KP, float KI, float KD){
 800940c:	b590      	push	{r4, r7, lr}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	ed87 0a05 	vstr	s0, [r7, #20]
 8009416:	edc7 0a04 	vstr	s1, [r7, #16]
 800941a:	ed87 1a03 	vstr	s2, [r7, #12]
 800941e:	edc7 1a02 	vstr	s3, [r7, #8]
 8009422:	ed87 2a01 	vstr	s4, [r7, #4]
 8009426:	edc7 2a00 	vstr	s5, [r7]

	static float e, ei, ed, e0;

	if(error_reset == 0){
 800942a:	4b39      	ldr	r3, [pc, #228]	; (8009510 <Right_Velo_Control+0x104>)
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10f      	bne.n	8009452 <Right_Velo_Control+0x46>
		e=0;
 8009432:	4b38      	ldr	r3, [pc, #224]	; (8009514 <Right_Velo_Control+0x108>)
 8009434:	f04f 0200 	mov.w	r2, #0
 8009438:	601a      	str	r2, [r3, #0]
		ei =0;
 800943a:	4b37      	ldr	r3, [pc, #220]	; (8009518 <Right_Velo_Control+0x10c>)
 800943c:	f04f 0200 	mov.w	r2, #0
 8009440:	601a      	str	r2, [r3, #0]
		ed = 0;
 8009442:	4b36      	ldr	r3, [pc, #216]	; (800951c <Right_Velo_Control+0x110>)
 8009444:	f04f 0200 	mov.w	r2, #0
 8009448:	601a      	str	r2, [r3, #0]
		e0 = 0;
 800944a:	4b35      	ldr	r3, [pc, #212]	; (8009520 <Right_Velo_Control+0x114>)
 800944c:	f04f 0200 	mov.w	r2, #0
 8009450:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8009452:	4b2f      	ldr	r3, [pc, #188]	; (8009510 <Right_Velo_Control+0x104>)
 8009454:	2201      	movs	r2, #1
 8009456:	701a      	strb	r2, [r3, #0]
	e = target - now;
 8009458:	ed97 7a05 	vldr	s14, [r7, #20]
 800945c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009464:	4b2b      	ldr	r3, [pc, #172]	; (8009514 <Right_Velo_Control+0x108>)
 8009466:	edc3 7a00 	vstr	s15, [r3]
	ei += e * T;
 800946a:	4b2a      	ldr	r3, [pc, #168]	; (8009514 <Right_Velo_Control+0x108>)
 800946c:	ed93 7a00 	vldr	s14, [r3]
 8009470:	edd7 7a03 	vldr	s15, [r7, #12]
 8009474:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009478:	4b27      	ldr	r3, [pc, #156]	; (8009518 <Right_Velo_Control+0x10c>)
 800947a:	edd3 7a00 	vldr	s15, [r3]
 800947e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009482:	4b25      	ldr	r3, [pc, #148]	; (8009518 <Right_Velo_Control+0x10c>)
 8009484:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 8009488:	4b22      	ldr	r3, [pc, #136]	; (8009514 <Right_Velo_Control+0x108>)
 800948a:	ed93 7a00 	vldr	s14, [r3]
 800948e:	4b24      	ldr	r3, [pc, #144]	; (8009520 <Right_Velo_Control+0x114>)
 8009490:	edd3 7a00 	vldr	s15, [r3]
 8009494:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009498:	ed97 7a03 	vldr	s14, [r7, #12]
 800949c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a0:	4b1e      	ldr	r3, [pc, #120]	; (800951c <Right_Velo_Control+0x110>)
 80094a2:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 80094a6:	4b1b      	ldr	r3, [pc, #108]	; (8009514 <Right_Velo_Control+0x108>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a1d      	ldr	r2, [pc, #116]	; (8009520 <Right_Velo_Control+0x114>)
 80094ac:	6013      	str	r3, [r2, #0]

	R_velo_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 80094ae:	4b19      	ldr	r3, [pc, #100]	; (8009514 <Right_Velo_Control+0x108>)
 80094b0:	ed93 7a00 	vldr	s14, [r3]
 80094b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80094b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80094bc:	4b16      	ldr	r3, [pc, #88]	; (8009518 <Right_Velo_Control+0x10c>)
 80094be:	edd3 6a00 	vldr	s13, [r3]
 80094c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80094c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80094ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80094ce:	4b13      	ldr	r3, [pc, #76]	; (800951c <Right_Velo_Control+0x110>)
 80094d0:	edd3 6a00 	vldr	s13, [r3]
 80094d4:	edd7 7a00 	vldr	s15, [r7]
 80094d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80094dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094e0:	ee17 0a90 	vmov	r0, s15
 80094e4:	f7fe ff68 	bl	80083b8 <__aeabi_f2d>
 80094e8:	4603      	mov	r3, r0
 80094ea:	460c      	mov	r4, r1
 80094ec:	ec44 3b10 	vmov	d0, r3, r4
<<<<<<< HEAD
 80094f0:	f00c fe4c 	bl	801618c <round>
=======
 80094f0:	f00a fdfe 	bl	80140f0 <round>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 80094f4:	ec54 3b10 	vmov	r3, r4, d0
 80094f8:	4618      	mov	r0, r3
 80094fa:	4621      	mov	r1, r4
 80094fc:	f7ff fa64 	bl	80089c8 <__aeabi_d2iz>
 8009500:	4603      	mov	r3, r0
 8009502:	b21a      	sxth	r2, r3
 8009504:	4b07      	ldr	r3, [pc, #28]	; (8009524 <Right_Velo_Control+0x118>)
 8009506:	801a      	strh	r2, [r3, #0]
}
 8009508:	bf00      	nop
 800950a:	371c      	adds	r7, #28
 800950c:	46bd      	mov	sp, r7
 800950e:	bd90      	pop	{r4, r7, pc}
<<<<<<< HEAD
 8009510:	2000026c 	.word	0x2000026c
 8009514:	200002b0 	.word	0x200002b0
 8009518:	200002b4 	.word	0x200002b4
 800951c:	200002b8 	.word	0x200002b8
 8009520:	200002bc 	.word	0x200002bc
 8009524:	2000e00c 	.word	0x2000e00c
=======
 8009510:	20000efc 	.word	0x20000efc
 8009514:	20000f40 	.word	0x20000f40
 8009518:	20000f44 	.word	0x20000f44
 800951c:	20000f48 	.word	0x20000f48
 8009520:	20000f4c 	.word	0x20000f4c
 8009524:	20005048 	.word	0x20005048
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

08009528 <Left_Velo_Control>:

void Left_Velo_Control(float target, float now, float T, float KP, float KI, float KD){
 8009528:	b590      	push	{r4, r7, lr}
 800952a:	b087      	sub	sp, #28
 800952c:	af00      	add	r7, sp, #0
 800952e:	ed87 0a05 	vstr	s0, [r7, #20]
 8009532:	edc7 0a04 	vstr	s1, [r7, #16]
 8009536:	ed87 1a03 	vstr	s2, [r7, #12]
 800953a:	edc7 1a02 	vstr	s3, [r7, #8]
 800953e:	ed87 2a01 	vstr	s4, [r7, #4]
 8009542:	edc7 2a00 	vstr	s5, [r7]

	static float e, ei, ed, e0;

	if(error_reset == 0){
 8009546:	4b39      	ldr	r3, [pc, #228]	; (800962c <Left_Velo_Control+0x104>)
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10f      	bne.n	800956e <Left_Velo_Control+0x46>
		e=0;
 800954e:	4b38      	ldr	r3, [pc, #224]	; (8009630 <Left_Velo_Control+0x108>)
 8009550:	f04f 0200 	mov.w	r2, #0
 8009554:	601a      	str	r2, [r3, #0]
		ei =0;
 8009556:	4b37      	ldr	r3, [pc, #220]	; (8009634 <Left_Velo_Control+0x10c>)
 8009558:	f04f 0200 	mov.w	r2, #0
 800955c:	601a      	str	r2, [r3, #0]
		ed = 0;
 800955e:	4b36      	ldr	r3, [pc, #216]	; (8009638 <Left_Velo_Control+0x110>)
 8009560:	f04f 0200 	mov.w	r2, #0
 8009564:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8009566:	4b35      	ldr	r3, [pc, #212]	; (800963c <Left_Velo_Control+0x114>)
 8009568:	f04f 0200 	mov.w	r2, #0
 800956c:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 800956e:	4b2f      	ldr	r3, [pc, #188]	; (800962c <Left_Velo_Control+0x104>)
 8009570:	2201      	movs	r2, #1
 8009572:	701a      	strb	r2, [r3, #0]
	e = target - now;
 8009574:	ed97 7a05 	vldr	s14, [r7, #20]
 8009578:	edd7 7a04 	vldr	s15, [r7, #16]
 800957c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009580:	4b2b      	ldr	r3, [pc, #172]	; (8009630 <Left_Velo_Control+0x108>)
 8009582:	edc3 7a00 	vstr	s15, [r3]
	ei += e * T;
 8009586:	4b2a      	ldr	r3, [pc, #168]	; (8009630 <Left_Velo_Control+0x108>)
 8009588:	ed93 7a00 	vldr	s14, [r3]
 800958c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009590:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009594:	4b27      	ldr	r3, [pc, #156]	; (8009634 <Left_Velo_Control+0x10c>)
 8009596:	edd3 7a00 	vldr	s15, [r3]
 800959a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800959e:	4b25      	ldr	r3, [pc, #148]	; (8009634 <Left_Velo_Control+0x10c>)
 80095a0:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 80095a4:	4b22      	ldr	r3, [pc, #136]	; (8009630 <Left_Velo_Control+0x108>)
 80095a6:	ed93 7a00 	vldr	s14, [r3]
 80095aa:	4b24      	ldr	r3, [pc, #144]	; (800963c <Left_Velo_Control+0x114>)
 80095ac:	edd3 7a00 	vldr	s15, [r3]
 80095b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80095b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80095b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095bc:	4b1e      	ldr	r3, [pc, #120]	; (8009638 <Left_Velo_Control+0x110>)
 80095be:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 80095c2:	4b1b      	ldr	r3, [pc, #108]	; (8009630 <Left_Velo_Control+0x108>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a1d      	ldr	r2, [pc, #116]	; (800963c <Left_Velo_Control+0x114>)
 80095c8:	6013      	str	r3, [r2, #0]

	L_velo_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 80095ca:	4b19      	ldr	r3, [pc, #100]	; (8009630 <Left_Velo_Control+0x108>)
 80095cc:	ed93 7a00 	vldr	s14, [r3]
 80095d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80095d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80095d8:	4b16      	ldr	r3, [pc, #88]	; (8009634 <Left_Velo_Control+0x10c>)
 80095da:	edd3 6a00 	vldr	s13, [r3]
 80095de:	edd7 7a01 	vldr	s15, [r7, #4]
 80095e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80095e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095ea:	4b13      	ldr	r3, [pc, #76]	; (8009638 <Left_Velo_Control+0x110>)
 80095ec:	edd3 6a00 	vldr	s13, [r3]
 80095f0:	edd7 7a00 	vldr	s15, [r7]
 80095f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80095f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095fc:	ee17 0a90 	vmov	r0, s15
 8009600:	f7fe feda 	bl	80083b8 <__aeabi_f2d>
 8009604:	4603      	mov	r3, r0
 8009606:	460c      	mov	r4, r1
 8009608:	ec44 3b10 	vmov	d0, r3, r4
<<<<<<< HEAD
 800960c:	f00c fdbe 	bl	801618c <round>
=======
 800960c:	f00a fd70 	bl	80140f0 <round>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 8009610:	ec54 3b10 	vmov	r3, r4, d0
 8009614:	4618      	mov	r0, r3
 8009616:	4621      	mov	r1, r4
 8009618:	f7ff f9d6 	bl	80089c8 <__aeabi_d2iz>
 800961c:	4603      	mov	r3, r0
 800961e:	b21a      	sxth	r2, r3
 8009620:	4b07      	ldr	r3, [pc, #28]	; (8009640 <Left_Velo_Control+0x118>)
 8009622:	801a      	strh	r2, [r3, #0]
}
 8009624:	bf00      	nop
 8009626:	371c      	adds	r7, #28
 8009628:	46bd      	mov	sp, r7
 800962a:	bd90      	pop	{r4, r7, pc}
<<<<<<< HEAD
 800962c:	2000026c 	.word	0x2000026c
 8009630:	200002c0 	.word	0x200002c0
 8009634:	200002c4 	.word	0x200002c4
 8009638:	200002c8 	.word	0x200002c8
 800963c:	200002cc 	.word	0x200002cc
 8009640:	2000e02e 	.word	0x2000e02e
=======
 800962c:	20000efc 	.word	0x20000efc
 8009630:	20000f50 	.word	0x20000f50
 8009634:	20000f54 	.word	0x20000f54
 8009638:	20000f58 	.word	0x20000f58
 800963c:	20000f5c 	.word	0x20000f5c
 8009640:	2000506a 	.word	0x2000506a
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

08009644 <Enc_Velo_Control>:
	R_rotate = (int16_t)round(KP*e_R + KI*ei_R + KD*ed_R);
	L_rotate = (int16_t)round(KP*e_L + KI*ei_L + KD*ed_L);

}

void Enc_Velo_Control(float T, float KP, float KI, float KD){
 8009644:	b590      	push	{r4, r7, lr}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	ed87 0a03 	vstr	s0, [r7, #12]
 800964e:	edc7 0a02 	vstr	s1, [r7, #8]
 8009652:	ed87 1a01 	vstr	s2, [r7, #4]
 8009656:	edc7 1a00 	vstr	s3, [r7]

	static float e, ei, ed, e0;

	if(error_reset == 0){
 800965a:	4b53      	ldr	r3, [pc, #332]	; (80097a8 <Enc_Velo_Control+0x164>)
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10f      	bne.n	8009682 <Enc_Velo_Control+0x3e>
		e=0;
 8009662:	4b52      	ldr	r3, [pc, #328]	; (80097ac <Enc_Velo_Control+0x168>)
 8009664:	f04f 0200 	mov.w	r2, #0
 8009668:	601a      	str	r2, [r3, #0]
		ei =0;
 800966a:	4b51      	ldr	r3, [pc, #324]	; (80097b0 <Enc_Velo_Control+0x16c>)
 800966c:	f04f 0200 	mov.w	r2, #0
 8009670:	601a      	str	r2, [r3, #0]
		ed = 0;
 8009672:	4b50      	ldr	r3, [pc, #320]	; (80097b4 <Enc_Velo_Control+0x170>)
 8009674:	f04f 0200 	mov.w	r2, #0
 8009678:	601a      	str	r2, [r3, #0]
		e0 = 0;
 800967a:	4b4f      	ldr	r3, [pc, #316]	; (80097b8 <Enc_Velo_Control+0x174>)
 800967c:	f04f 0200 	mov.w	r2, #0
 8009680:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8009682:	4b49      	ldr	r3, [pc, #292]	; (80097a8 <Enc_Velo_Control+0x164>)
 8009684:	2201      	movs	r2, #1
 8009686:	701a      	strb	r2, [r3, #0]
	e = L_velocity - R_velocity;
 8009688:	4b4c      	ldr	r3, [pc, #304]	; (80097bc <Enc_Velo_Control+0x178>)
 800968a:	ed93 7a00 	vldr	s14, [r3]
 800968e:	4b4c      	ldr	r3, [pc, #304]	; (80097c0 <Enc_Velo_Control+0x17c>)
 8009690:	edd3 7a00 	vldr	s15, [r3]
 8009694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009698:	4b44      	ldr	r3, [pc, #272]	; (80097ac <Enc_Velo_Control+0x168>)
 800969a:	edc3 7a00 	vstr	s15, [r3]
	ei += e * T;
 800969e:	4b43      	ldr	r3, [pc, #268]	; (80097ac <Enc_Velo_Control+0x168>)
 80096a0:	ed93 7a00 	vldr	s14, [r3]
 80096a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80096a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096ac:	4b40      	ldr	r3, [pc, #256]	; (80097b0 <Enc_Velo_Control+0x16c>)
 80096ae:	edd3 7a00 	vldr	s15, [r3]
 80096b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096b6:	4b3e      	ldr	r3, [pc, #248]	; (80097b0 <Enc_Velo_Control+0x16c>)
 80096b8:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 80096bc:	4b3b      	ldr	r3, [pc, #236]	; (80097ac <Enc_Velo_Control+0x168>)
 80096be:	ed93 7a00 	vldr	s14, [r3]
 80096c2:	4b3d      	ldr	r3, [pc, #244]	; (80097b8 <Enc_Velo_Control+0x174>)
 80096c4:	edd3 7a00 	vldr	s15, [r3]
 80096c8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80096cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80096d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096d4:	4b37      	ldr	r3, [pc, #220]	; (80097b4 <Enc_Velo_Control+0x170>)
 80096d6:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 80096da:	4b34      	ldr	r3, [pc, #208]	; (80097ac <Enc_Velo_Control+0x168>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a36      	ldr	r2, [pc, #216]	; (80097b8 <Enc_Velo_Control+0x174>)
 80096e0:	6013      	str	r3, [r2, #0]

	R_env_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 80096e2:	4b32      	ldr	r3, [pc, #200]	; (80097ac <Enc_Velo_Control+0x168>)
 80096e4:	ed93 7a00 	vldr	s14, [r3]
 80096e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80096ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096f0:	4b2f      	ldr	r3, [pc, #188]	; (80097b0 <Enc_Velo_Control+0x16c>)
 80096f2:	edd3 6a00 	vldr	s13, [r3]
 80096f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80096fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009702:	4b2c      	ldr	r3, [pc, #176]	; (80097b4 <Enc_Velo_Control+0x170>)
 8009704:	edd3 6a00 	vldr	s13, [r3]
 8009708:	edd7 7a00 	vldr	s15, [r7]
 800970c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009714:	ee17 0a90 	vmov	r0, s15
 8009718:	f7fe fe4e 	bl	80083b8 <__aeabi_f2d>
 800971c:	4603      	mov	r3, r0
 800971e:	460c      	mov	r4, r1
 8009720:	ec44 3b10 	vmov	d0, r3, r4
<<<<<<< HEAD
 8009724:	f00c fd32 	bl	801618c <round>
=======
 8009724:	f00a fce4 	bl	80140f0 <round>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 8009728:	ec54 3b10 	vmov	r3, r4, d0
 800972c:	4618      	mov	r0, r3
 800972e:	4621      	mov	r1, r4
 8009730:	f7ff f94a 	bl	80089c8 <__aeabi_d2iz>
 8009734:	4603      	mov	r3, r0
 8009736:	b21a      	sxth	r2, r3
 8009738:	4b22      	ldr	r3, [pc, #136]	; (80097c4 <Enc_Velo_Control+0x180>)
 800973a:	801a      	strh	r2, [r3, #0]
	L_env_control = -(int16_t)round(KP*e + KI*ei + KD*ed);
 800973c:	4b1b      	ldr	r3, [pc, #108]	; (80097ac <Enc_Velo_Control+0x168>)
 800973e:	ed93 7a00 	vldr	s14, [r3]
 8009742:	edd7 7a02 	vldr	s15, [r7, #8]
 8009746:	ee27 7a27 	vmul.f32	s14, s14, s15
 800974a:	4b19      	ldr	r3, [pc, #100]	; (80097b0 <Enc_Velo_Control+0x16c>)
 800974c:	edd3 6a00 	vldr	s13, [r3]
 8009750:	edd7 7a01 	vldr	s15, [r7, #4]
 8009754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009758:	ee37 7a27 	vadd.f32	s14, s14, s15
 800975c:	4b15      	ldr	r3, [pc, #84]	; (80097b4 <Enc_Velo_Control+0x170>)
 800975e:	edd3 6a00 	vldr	s13, [r3]
 8009762:	edd7 7a00 	vldr	s15, [r7]
 8009766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800976a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800976e:	ee17 0a90 	vmov	r0, s15
 8009772:	f7fe fe21 	bl	80083b8 <__aeabi_f2d>
 8009776:	4603      	mov	r3, r0
 8009778:	460c      	mov	r4, r1
 800977a:	ec44 3b10 	vmov	d0, r3, r4
<<<<<<< HEAD
 800977e:	f00c fd05 	bl	801618c <round>
=======
 800977e:	f00a fcb7 	bl	80140f0 <round>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 8009782:	ec54 3b10 	vmov	r3, r4, d0
 8009786:	4618      	mov	r0, r3
 8009788:	4621      	mov	r1, r4
 800978a:	f7ff f91d 	bl	80089c8 <__aeabi_d2iz>
 800978e:	4603      	mov	r3, r0
 8009790:	b21b      	sxth	r3, r3
 8009792:	b29b      	uxth	r3, r3
 8009794:	425b      	negs	r3, r3
 8009796:	b29b      	uxth	r3, r3
 8009798:	b21a      	sxth	r2, r3
 800979a:	4b0b      	ldr	r3, [pc, #44]	; (80097c8 <Enc_Velo_Control+0x184>)
 800979c:	801a      	strh	r2, [r3, #0]
}
 800979e:	bf00      	nop
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd90      	pop	{r4, r7, pc}
 80097a6:	bf00      	nop
<<<<<<< HEAD
 80097a8:	2000026c 	.word	0x2000026c
 80097ac:	200002d0 	.word	0x200002d0
 80097b0:	200002d4 	.word	0x200002d4
 80097b4:	200002d8 	.word	0x200002d8
 80097b8:	200002dc 	.word	0x200002dc
 80097bc:	2000e028 	.word	0x2000e028
 80097c0:	2000e034 	.word	0x2000e034
 80097c4:	2000e018 	.word	0x2000e018
 80097c8:	2000e00a 	.word	0x2000e00a
=======
 80097a8:	20000efc 	.word	0x20000efc
 80097ac:	20000f60 	.word	0x20000f60
 80097b0:	20000f64 	.word	0x20000f64
 80097b4:	20000f68 	.word	0x20000f68
 80097b8:	20000f6c 	.word	0x20000f6c
 80097bc:	20005064 	.word	0x20005064
 80097c0:	20005070 	.word	0x20005070
 80097c4:	20005054 	.word	0x20005054
 80097c8:	20005046 	.word	0x20005046
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

080097cc <read_byte>:
#include "ICM_20648.h"

volatile int16_t	xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80097d6:	79fb      	ldrb	r3, [r7, #7]
 80097d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80097e0:	2200      	movs	r2, #0
 80097e2:	2104      	movs	r1, #4
 80097e4:	480d      	ldr	r0, [pc, #52]	; (800981c <read_byte+0x50>)
<<<<<<< HEAD
 80097e6:	f009 fb01 	bl	8012dec <HAL_GPIO_WritePin>
=======
 80097e6:	f007 fab3 	bl	8010d50 <HAL_GPIO_WritePin>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 80097ea:	f107 010f 	add.w	r1, r7, #15
 80097ee:	2364      	movs	r3, #100	; 0x64
 80097f0:	2201      	movs	r2, #1
 80097f2:	480b      	ldr	r0, [pc, #44]	; (8009820 <read_byte+0x54>)
<<<<<<< HEAD
 80097f4:	f009 ffda 	bl	80137ac <HAL_SPI_Transmit>
=======
 80097f4:	f007 ff8c 	bl	8011710 <HAL_SPI_Transmit>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	HAL_SPI_Receive(&hspi3,&val,1,100);
 80097f8:	f107 010e 	add.w	r1, r7, #14
 80097fc:	2364      	movs	r3, #100	; 0x64
 80097fe:	2201      	movs	r2, #1
 8009800:	4807      	ldr	r0, [pc, #28]	; (8009820 <read_byte+0x54>)
<<<<<<< HEAD
 8009802:	f00a f907 	bl	8013a14 <HAL_SPI_Receive>
=======
 8009802:	f008 f8b9 	bl	8011978 <HAL_SPI_Receive>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	CS_SET;
 8009806:	2201      	movs	r2, #1
 8009808:	2104      	movs	r1, #4
 800980a:	4804      	ldr	r0, [pc, #16]	; (800981c <read_byte+0x50>)
<<<<<<< HEAD
 800980c:	f009 faee 	bl	8012dec <HAL_GPIO_WritePin>
=======
 800980c:	f007 faa0 	bl	8010d50 <HAL_GPIO_WritePin>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	return val;
 8009810:	7bbb      	ldrb	r3, [r7, #14]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	40020c00 	.word	0x40020c00
 8009820:	20015bbc 	.word	0x20015bbc

08009824 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	460a      	mov	r2, r1
 800982e:	71fb      	strb	r3, [r7, #7]
 8009830:	4613      	mov	r3, r2
 8009832:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8009834:	79fb      	ldrb	r3, [r7, #7]
 8009836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800983a:	b2db      	uxtb	r3, r3
 800983c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800983e:	2200      	movs	r2, #0
 8009840:	2104      	movs	r1, #4
 8009842:	480c      	ldr	r0, [pc, #48]	; (8009874 <write_byte+0x50>)
<<<<<<< HEAD
 8009844:	f009 fad2 	bl	8012dec <HAL_GPIO_WritePin>
=======
 8009844:	f007 fa84 	bl	8010d50 <HAL_GPIO_WritePin>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8009848:	f107 010f 	add.w	r1, r7, #15
 800984c:	2364      	movs	r3, #100	; 0x64
 800984e:	2201      	movs	r2, #1
 8009850:	4809      	ldr	r0, [pc, #36]	; (8009878 <write_byte+0x54>)
<<<<<<< HEAD
 8009852:	f009 ffab 	bl	80137ac <HAL_SPI_Transmit>
=======
 8009852:	f007 ff5d 	bl	8011710 <HAL_SPI_Transmit>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 8009856:	1db9      	adds	r1, r7, #6
 8009858:	2364      	movs	r3, #100	; 0x64
 800985a:	2201      	movs	r2, #1
 800985c:	4806      	ldr	r0, [pc, #24]	; (8009878 <write_byte+0x54>)
<<<<<<< HEAD
 800985e:	f009 ffa5 	bl	80137ac <HAL_SPI_Transmit>
=======
 800985e:	f007 ff57 	bl	8011710 <HAL_SPI_Transmit>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	CS_SET;
 8009862:	2201      	movs	r2, #1
 8009864:	2104      	movs	r1, #4
 8009866:	4803      	ldr	r0, [pc, #12]	; (8009874 <write_byte+0x50>)
<<<<<<< HEAD
 8009868:	f009 fac0 	bl	8012dec <HAL_GPIO_WritePin>
=======
 8009868:	f007 fa72 	bl	8010d50 <HAL_GPIO_WritePin>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
}
 800986c:	bf00      	nop
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	40020c00 	.word	0x40020c00
 8009878:	20015bbc 	.word	0x20015bbc

0800987c <IMU_init>:

uint8_t IMU_init() {
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8009882:	2000      	movs	r0, #0
 8009884:	f7ff ffa2 	bl	80097cc <read_byte>
 8009888:	4603      	mov	r3, r0
 800988a:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 800988c:	79bb      	ldrb	r3, [r7, #6]
 800988e:	2be0      	cmp	r3, #224	; 0xe0
 8009890:	d119      	bne.n	80098c6 <IMU_init+0x4a>
		ret = 1;
 8009892:	2301      	movs	r3, #1
 8009894:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8009896:	2101      	movs	r1, #1
 8009898:	2006      	movs	r0, #6
 800989a:	f7ff ffc3 	bl	8009824 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800989e:	2110      	movs	r1, #16
 80098a0:	2003      	movs	r0, #3
 80098a2:	f7ff ffbf 	bl	8009824 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80098a6:	2120      	movs	r1, #32
 80098a8:	207f      	movs	r0, #127	; 0x7f
 80098aa:	f7ff ffbb 	bl	8009824 <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 80098ae:	2117      	movs	r1, #23
 80098b0:	2001      	movs	r0, #1
 80098b2:	f7ff ffb7 	bl	8009824 <write_byte>

		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//	レンジ±16g
 80098b6:	2106      	movs	r1, #6
 80098b8:	2014      	movs	r0, #20
 80098ba:	f7ff ffb3 	bl	8009824 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80098be:	2100      	movs	r1, #0
 80098c0:	207f      	movs	r0, #127	; 0x7f
 80098c2:	f7ff ffaf 	bl	8009824 <write_byte>
	}
	return ret;
 80098c6:	79fb      	ldrb	r3, [r7, #7]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <read_gyro_data>:

void read_gyro_data() {
 80098d0:	b598      	push	{r3, r4, r7, lr}
 80098d2:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80098d4:	2033      	movs	r0, #51	; 0x33
 80098d6:	f7ff ff79 	bl	80097cc <read_byte>
 80098da:	4603      	mov	r3, r0
 80098dc:	021b      	lsls	r3, r3, #8
 80098de:	b21c      	sxth	r4, r3
 80098e0:	2034      	movs	r0, #52	; 0x34
 80098e2:	f7ff ff73 	bl	80097cc <read_byte>
 80098e6:	4603      	mov	r3, r0
 80098e8:	b21b      	sxth	r3, r3
 80098ea:	4323      	orrs	r3, r4
 80098ec:	b21a      	sxth	r2, r3
 80098ee:	4b11      	ldr	r3, [pc, #68]	; (8009934 <read_gyro_data+0x64>)
 80098f0:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80098f2:	2035      	movs	r0, #53	; 0x35
 80098f4:	f7ff ff6a 	bl	80097cc <read_byte>
 80098f8:	4603      	mov	r3, r0
 80098fa:	021b      	lsls	r3, r3, #8
 80098fc:	b21c      	sxth	r4, r3
 80098fe:	2036      	movs	r0, #54	; 0x36
 8009900:	f7ff ff64 	bl	80097cc <read_byte>
 8009904:	4603      	mov	r3, r0
 8009906:	b21b      	sxth	r3, r3
 8009908:	4323      	orrs	r3, r4
 800990a:	b21a      	sxth	r2, r3
 800990c:	4b0a      	ldr	r3, [pc, #40]	; (8009938 <read_gyro_data+0x68>)
 800990e:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8009910:	2037      	movs	r0, #55	; 0x37
 8009912:	f7ff ff5b 	bl	80097cc <read_byte>
 8009916:	4603      	mov	r3, r0
 8009918:	021b      	lsls	r3, r3, #8
 800991a:	b21c      	sxth	r4, r3
 800991c:	2038      	movs	r0, #56	; 0x38
 800991e:	f7ff ff55 	bl	80097cc <read_byte>
 8009922:	4603      	mov	r3, r0
 8009924:	b21b      	sxth	r3, r3
 8009926:	4323      	orrs	r3, r4
 8009928:	b21a      	sxth	r2, r3
 800992a:	4b04      	ldr	r3, [pc, #16]	; (800993c <read_gyro_data+0x6c>)
 800992c:	801a      	strh	r2, [r3, #0]
}
 800992e:	bf00      	nop
 8009930:	bd98      	pop	{r3, r4, r7, pc}
 8009932:	bf00      	nop
 8009934:	2000507e 	.word	0x2000507e
 8009938:	2000507c 	.word	0x2000507c
 800993c:	20005076 	.word	0x20005076

08009940 <read_accel_data>:

void read_accel_data() {
 8009940:	b598      	push	{r3, r4, r7, lr}
 8009942:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8009944:	202d      	movs	r0, #45	; 0x2d
 8009946:	f7ff ff41 	bl	80097cc <read_byte>
 800994a:	4603      	mov	r3, r0
 800994c:	021b      	lsls	r3, r3, #8
 800994e:	b21c      	sxth	r4, r3
 8009950:	202e      	movs	r0, #46	; 0x2e
 8009952:	f7ff ff3b 	bl	80097cc <read_byte>
 8009956:	4603      	mov	r3, r0
 8009958:	b21b      	sxth	r3, r3
 800995a:	4323      	orrs	r3, r4
 800995c:	b21a      	sxth	r2, r3
 800995e:	4b11      	ldr	r3, [pc, #68]	; (80099a4 <read_accel_data+0x64>)
 8009960:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 8009962:	202f      	movs	r0, #47	; 0x2f
 8009964:	f7ff ff32 	bl	80097cc <read_byte>
 8009968:	4603      	mov	r3, r0
 800996a:	021b      	lsls	r3, r3, #8
 800996c:	b21c      	sxth	r4, r3
 800996e:	2030      	movs	r0, #48	; 0x30
 8009970:	f7ff ff2c 	bl	80097cc <read_byte>
 8009974:	4603      	mov	r3, r0
 8009976:	b21b      	sxth	r3, r3
 8009978:	4323      	orrs	r3, r4
 800997a:	b21a      	sxth	r2, r3
 800997c:	4b0a      	ldr	r3, [pc, #40]	; (80099a8 <read_accel_data+0x68>)
 800997e:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 8009980:	2031      	movs	r0, #49	; 0x31
 8009982:	f7ff ff23 	bl	80097cc <read_byte>
 8009986:	4603      	mov	r3, r0
 8009988:	021b      	lsls	r3, r3, #8
 800998a:	b21c      	sxth	r4, r3
 800998c:	2032      	movs	r0, #50	; 0x32
 800998e:	f7ff ff1d 	bl	80097cc <read_byte>
 8009992:	4603      	mov	r3, r0
 8009994:	b21b      	sxth	r3, r3
 8009996:	4323      	orrs	r3, r4
 8009998:	b21a      	sxth	r2, r3
 800999a:	4b04      	ldr	r3, [pc, #16]	; (80099ac <read_accel_data+0x6c>)
 800999c:	801a      	strh	r2, [r3, #0]
}
 800999e:	bf00      	nop
 80099a0:	bd98      	pop	{r3, r4, r7, pc}
 80099a2:	bf00      	nop
 80099a4:	2000507a 	.word	0x2000507a
 80099a8:	20005080 	.word	0x20005080
 80099ac:	20005078 	.word	0x20005078

080099b0 <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 80099b8:	1d39      	adds	r1, r7, #4
 80099ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80099be:	2201      	movs	r2, #1
 80099c0:	4803      	ldr	r0, [pc, #12]	; (80099d0 <__io_putchar+0x20>)
<<<<<<< HEAD
 80099c2:	f00b ff83 	bl	80158cc <HAL_UART_Transmit>
=======
 80099c2:	f009 ff35 	bl	8013830 <HAL_UART_Transmit>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	return ch;
 80099c6:	687b      	ldr	r3, [r7, #4]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	20015c64 	.word	0x20015c64

080099d4 <Motor_Count_Clear>:
	*R_counter = round(567 * R_Volt);
	*L_counter = round(567 * L_Volt);

}

void Motor_Count_Clear(){
 80099d4:	b480      	push	{r7}
 80099d6:	af00      	add	r7, sp, #0
	 L_motor = L_v_control =  L_wall = L_leftwall = L_rightwall = L_rotate = L_angular_velocity = L_env_control = L_velo_control = 0;
 80099d8:	4b2d      	ldr	r3, [pc, #180]	; (8009a90 <Motor_Count_Clear+0xbc>)
 80099da:	2200      	movs	r2, #0
 80099dc:	801a      	strh	r2, [r3, #0]
 80099de:	4b2c      	ldr	r3, [pc, #176]	; (8009a90 <Motor_Count_Clear+0xbc>)
 80099e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099e4:	4b2b      	ldr	r3, [pc, #172]	; (8009a94 <Motor_Count_Clear+0xc0>)
 80099e6:	801a      	strh	r2, [r3, #0]
 80099e8:	4b2a      	ldr	r3, [pc, #168]	; (8009a94 <Motor_Count_Clear+0xc0>)
 80099ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099ee:	4b2a      	ldr	r3, [pc, #168]	; (8009a98 <Motor_Count_Clear+0xc4>)
 80099f0:	801a      	strh	r2, [r3, #0]
 80099f2:	4b29      	ldr	r3, [pc, #164]	; (8009a98 <Motor_Count_Clear+0xc4>)
 80099f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099f8:	4b28      	ldr	r3, [pc, #160]	; (8009a9c <Motor_Count_Clear+0xc8>)
 80099fa:	801a      	strh	r2, [r3, #0]
 80099fc:	4b27      	ldr	r3, [pc, #156]	; (8009a9c <Motor_Count_Clear+0xc8>)
 80099fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a02:	4b27      	ldr	r3, [pc, #156]	; (8009aa0 <Motor_Count_Clear+0xcc>)
 8009a04:	801a      	strh	r2, [r3, #0]
 8009a06:	4b26      	ldr	r3, [pc, #152]	; (8009aa0 <Motor_Count_Clear+0xcc>)
 8009a08:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a0c:	4b25      	ldr	r3, [pc, #148]	; (8009aa4 <Motor_Count_Clear+0xd0>)
 8009a0e:	801a      	strh	r2, [r3, #0]
 8009a10:	4b24      	ldr	r3, [pc, #144]	; (8009aa4 <Motor_Count_Clear+0xd0>)
 8009a12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a16:	4b24      	ldr	r3, [pc, #144]	; (8009aa8 <Motor_Count_Clear+0xd4>)
 8009a18:	801a      	strh	r2, [r3, #0]
 8009a1a:	4b23      	ldr	r3, [pc, #140]	; (8009aa8 <Motor_Count_Clear+0xd4>)
 8009a1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a20:	4b22      	ldr	r3, [pc, #136]	; (8009aac <Motor_Count_Clear+0xd8>)
 8009a22:	801a      	strh	r2, [r3, #0]
 8009a24:	4b21      	ldr	r3, [pc, #132]	; (8009aac <Motor_Count_Clear+0xd8>)
 8009a26:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a2a:	4b21      	ldr	r3, [pc, #132]	; (8009ab0 <Motor_Count_Clear+0xdc>)
 8009a2c:	801a      	strh	r2, [r3, #0]
	 R_motor = R_v_control = R_wall = R_leftwall = R_rightwall = R_rotate = R_angular_velocity = R_env_control = R_velo_control = 0;
 8009a2e:	4b21      	ldr	r3, [pc, #132]	; (8009ab4 <Motor_Count_Clear+0xe0>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	801a      	strh	r2, [r3, #0]
 8009a34:	4b1f      	ldr	r3, [pc, #124]	; (8009ab4 <Motor_Count_Clear+0xe0>)
 8009a36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a3a:	4b1f      	ldr	r3, [pc, #124]	; (8009ab8 <Motor_Count_Clear+0xe4>)
 8009a3c:	801a      	strh	r2, [r3, #0]
 8009a3e:	4b1e      	ldr	r3, [pc, #120]	; (8009ab8 <Motor_Count_Clear+0xe4>)
 8009a40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a44:	4b1d      	ldr	r3, [pc, #116]	; (8009abc <Motor_Count_Clear+0xe8>)
 8009a46:	801a      	strh	r2, [r3, #0]
 8009a48:	4b1c      	ldr	r3, [pc, #112]	; (8009abc <Motor_Count_Clear+0xe8>)
 8009a4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a4e:	4b1c      	ldr	r3, [pc, #112]	; (8009ac0 <Motor_Count_Clear+0xec>)
 8009a50:	801a      	strh	r2, [r3, #0]
 8009a52:	4b1b      	ldr	r3, [pc, #108]	; (8009ac0 <Motor_Count_Clear+0xec>)
 8009a54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a58:	4b1a      	ldr	r3, [pc, #104]	; (8009ac4 <Motor_Count_Clear+0xf0>)
 8009a5a:	801a      	strh	r2, [r3, #0]
 8009a5c:	4b19      	ldr	r3, [pc, #100]	; (8009ac4 <Motor_Count_Clear+0xf0>)
 8009a5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a62:	4b19      	ldr	r3, [pc, #100]	; (8009ac8 <Motor_Count_Clear+0xf4>)
 8009a64:	801a      	strh	r2, [r3, #0]
 8009a66:	4b18      	ldr	r3, [pc, #96]	; (8009ac8 <Motor_Count_Clear+0xf4>)
 8009a68:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a6c:	4b17      	ldr	r3, [pc, #92]	; (8009acc <Motor_Count_Clear+0xf8>)
 8009a6e:	801a      	strh	r2, [r3, #0]
 8009a70:	4b16      	ldr	r3, [pc, #88]	; (8009acc <Motor_Count_Clear+0xf8>)
 8009a72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a76:	4b16      	ldr	r3, [pc, #88]	; (8009ad0 <Motor_Count_Clear+0xfc>)
 8009a78:	801a      	strh	r2, [r3, #0]
 8009a7a:	4b15      	ldr	r3, [pc, #84]	; (8009ad0 <Motor_Count_Clear+0xfc>)
 8009a7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a80:	4b14      	ldr	r3, [pc, #80]	; (8009ad4 <Motor_Count_Clear+0x100>)
 8009a82:	801a      	strh	r2, [r3, #0]
}
 8009a84:	bf00      	nop
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	2000506a 	.word	0x2000506a
 8009a94:	20005046 	.word	0x20005046
 8009a98:	2000505a 	.word	0x2000505a
 8009a9c:	20005060 	.word	0x20005060
 8009aa0:	20005044 	.word	0x20005044
 8009aa4:	20005052 	.word	0x20005052
 8009aa8:	20005068 	.word	0x20005068
 8009aac:	20005050 	.word	0x20005050
 8009ab0:	200165c0 	.word	0x200165c0
 8009ab4:	20005048 	.word	0x20005048
 8009ab8:	20005054 	.word	0x20005054
 8009abc:	2000505e 	.word	0x2000505e
 8009ac0:	20005062 	.word	0x20005062
 8009ac4:	2000505c 	.word	0x2000505c
 8009ac8:	20005074 	.word	0x20005074
 8009acc:	20005056 	.word	0x20005056
 8009ad0:	20005058 	.word	0x20005058
 8009ad4:	20015b2c 	.word	0x20015b2c

08009ad8 <Tim_Count>:

void Tim_Count(){
 8009ad8:	b598      	push	{r3, r4, r7, lr}
 8009ada:	af00      	add	r7, sp, #0


	if(mode.select%2 != 1){
 8009adc:	4b19      	ldr	r3, [pc, #100]	; (8009b44 <Tim_Count+0x6c>)
 8009ade:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f003 0301 	and.w	r3, r3, #1
 8009ae8:	bfb8      	it	lt
 8009aea:	425b      	neglt	r3, r3
 8009aec:	b25b      	sxtb	r3, r3
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d025      	beq.n	8009b3e <Tim_Count+0x66>
		timer += 1;
 8009af2:	4b15      	ldr	r3, [pc, #84]	; (8009b48 <Tim_Count+0x70>)
 8009af4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009af8:	f04f 0200 	mov.w	r2, #0
 8009afc:	4b13      	ldr	r3, [pc, #76]	; (8009b4c <Tim_Count+0x74>)
 8009afe:	f7fe fafd 	bl	80080fc <__adddf3>
 8009b02:	4603      	mov	r3, r0
 8009b04:	460c      	mov	r4, r1
 8009b06:	4a10      	ldr	r2, [pc, #64]	; (8009b48 <Tim_Count+0x70>)
 8009b08:	e9c2 3400 	strd	r3, r4, [r2]
		if(timer == 1000){
 8009b0c:	4b0e      	ldr	r3, [pc, #56]	; (8009b48 <Tim_Count+0x70>)
 8009b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b12:	f04f 0200 	mov.w	r2, #0
 8009b16:	4b0e      	ldr	r3, [pc, #56]	; (8009b50 <Tim_Count+0x78>)
 8009b18:	f7fe ff0e 	bl	8008938 <__aeabi_dcmpeq>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d100      	bne.n	8009b24 <Tim_Count+0x4c>
			self_timer ++;
		}
	}

}
 8009b22:	e00c      	b.n	8009b3e <Tim_Count+0x66>
			self_timer ++;
 8009b24:	4b0b      	ldr	r3, [pc, #44]	; (8009b54 <Tim_Count+0x7c>)
 8009b26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b2a:	f04f 0200 	mov.w	r2, #0
 8009b2e:	4b07      	ldr	r3, [pc, #28]	; (8009b4c <Tim_Count+0x74>)
 8009b30:	f7fe fae4 	bl	80080fc <__adddf3>
 8009b34:	4603      	mov	r3, r0
 8009b36:	460c      	mov	r4, r1
 8009b38:	4a06      	ldr	r2, [pc, #24]	; (8009b54 <Tim_Count+0x7c>)
 8009b3a:	e9c2 3400 	strd	r3, r4, [r2]
}
 8009b3e:	bf00      	nop
 8009b40:	bd98      	pop	{r3, r4, r7, pc}
 8009b42:	bf00      	nop
<<<<<<< HEAD
 8009b44:	20000068 	.word	0x20000068
 8009b48:	20000310 	.word	0x20000310
 8009b4c:	3ff00000 	.word	0x3ff00000
 8009b50:	408f4000 	.word	0x408f4000
 8009b54:	20000308 	.word	0x20000308
=======
 8009b44:	20000cf4 	.word	0x20000cf4
 8009b48:	20000fa0 	.word	0x20000fa0
 8009b4c:	3ff00000 	.word	0x3ff00000
 8009b50:	408f4000 	.word	0x408f4000
 8009b54:	20000f98 	.word	0x20000f98
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

08009b58 <map_init>:

void map_init(){
 8009b58:	b4b0      	push	{r4, r5, r7}
 8009b5a:	af00      	add	r7, sp, #0
	static int i = 0, j=0;

	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009b5c:	4b35      	ldr	r3, [pc, #212]	; (8009c34 <map_init+0xdc>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	601a      	str	r2, [r3, #0]
 8009b62:	e05e      	b.n	8009c22 <map_init+0xca>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009b64:	4b34      	ldr	r3, [pc, #208]	; (8009c38 <map_init+0xe0>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	e051      	b.n	8009c10 <map_init+0xb8>
			wall[i][j].north
			= wall[i][j].east
			= wall[i][j].south
			= wall[i][j].west = UNKNOWN;
 8009b6c:	4b31      	ldr	r3, [pc, #196]	; (8009c34 <map_init+0xdc>)
 8009b6e:	6819      	ldr	r1, [r3, #0]
 8009b70:	4b31      	ldr	r3, [pc, #196]	; (8009c38 <map_init+0xe0>)
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	4c31      	ldr	r4, [pc, #196]	; (8009c3c <map_init+0xe4>)
 8009b76:	008b      	lsls	r3, r1, #2
 8009b78:	1898      	adds	r0, r3, r2
 8009b7a:	f814 3010 	ldrb.w	r3, [r4, r0, lsl #1]
 8009b7e:	2502      	movs	r5, #2
 8009b80:	f365 1387 	bfi	r3, r5, #6, #2
 8009b84:	f804 3010 	strb.w	r3, [r4, r0, lsl #1]
			= wall[i][j].south
 8009b88:	4b2a      	ldr	r3, [pc, #168]	; (8009c34 <map_init+0xdc>)
 8009b8a:	681c      	ldr	r4, [r3, #0]
 8009b8c:	4b2a      	ldr	r3, [pc, #168]	; (8009c38 <map_init+0xe0>)
 8009b8e:	6818      	ldr	r0, [r3, #0]
			= wall[i][j].west = UNKNOWN;
 8009b90:	4d2a      	ldr	r5, [pc, #168]	; (8009c3c <map_init+0xe4>)
 8009b92:	008b      	lsls	r3, r1, #2
 8009b94:	4413      	add	r3, r2
 8009b96:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 8009b9a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009b9e:	b2dd      	uxtb	r5, r3
 8009ba0:	4926      	ldr	r1, [pc, #152]	; (8009c3c <map_init+0xe4>)
 8009ba2:	00a3      	lsls	r3, r4, #2
 8009ba4:	181a      	adds	r2, r3, r0
 8009ba6:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 8009baa:	f365 1305 	bfi	r3, r5, #4, #2
 8009bae:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			= wall[i][j].east
 8009bb2:	4b20      	ldr	r3, [pc, #128]	; (8009c34 <map_init+0xdc>)
 8009bb4:	6819      	ldr	r1, [r3, #0]
 8009bb6:	4b20      	ldr	r3, [pc, #128]	; (8009c38 <map_init+0xe0>)
 8009bb8:	681a      	ldr	r2, [r3, #0]
			= wall[i][j].south
 8009bba:	4d20      	ldr	r5, [pc, #128]	; (8009c3c <map_init+0xe4>)
 8009bbc:	00a3      	lsls	r3, r4, #2
 8009bbe:	4403      	add	r3, r0
 8009bc0:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 8009bc4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009bc8:	b2dd      	uxtb	r5, r3
 8009bca:	4c1c      	ldr	r4, [pc, #112]	; (8009c3c <map_init+0xe4>)
 8009bcc:	008b      	lsls	r3, r1, #2
 8009bce:	1898      	adds	r0, r3, r2
 8009bd0:	f814 3010 	ldrb.w	r3, [r4, r0, lsl #1]
 8009bd4:	f365 0383 	bfi	r3, r5, #2, #2
 8009bd8:	f804 3010 	strb.w	r3, [r4, r0, lsl #1]
			wall[i][j].north
 8009bdc:	4b15      	ldr	r3, [pc, #84]	; (8009c34 <map_init+0xdc>)
 8009bde:	681c      	ldr	r4, [r3, #0]
 8009be0:	4b15      	ldr	r3, [pc, #84]	; (8009c38 <map_init+0xe0>)
 8009be2:	681b      	ldr	r3, [r3, #0]
			= wall[i][j].east
 8009be4:	4815      	ldr	r0, [pc, #84]	; (8009c3c <map_init+0xe4>)
 8009be6:	0089      	lsls	r1, r1, #2
 8009be8:	440a      	add	r2, r1
 8009bea:	f810 2012 	ldrb.w	r2, [r0, r2, lsl #1]
 8009bee:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8009bf2:	b2d0      	uxtb	r0, r2
 8009bf4:	4911      	ldr	r1, [pc, #68]	; (8009c3c <map_init+0xe4>)
 8009bf6:	00a2      	lsls	r2, r4, #2
 8009bf8:	441a      	add	r2, r3
 8009bfa:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 8009bfe:	f360 0301 	bfi	r3, r0, #0, #2
 8009c02:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009c06:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <map_init+0xe0>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	4a0a      	ldr	r2, [pc, #40]	; (8009c38 <map_init+0xe0>)
 8009c0e:	6013      	str	r3, [r2, #0]
 8009c10:	4b09      	ldr	r3, [pc, #36]	; (8009c38 <map_init+0xe0>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2b03      	cmp	r3, #3
 8009c16:	dda9      	ble.n	8009b6c <map_init+0x14>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009c18:	4b06      	ldr	r3, [pc, #24]	; (8009c34 <map_init+0xdc>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	4a05      	ldr	r2, [pc, #20]	; (8009c34 <map_init+0xdc>)
 8009c20:	6013      	str	r3, [r2, #0]
 8009c22:	4b04      	ldr	r3, [pc, #16]	; (8009c34 <map_init+0xdc>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	dd9c      	ble.n	8009b64 <map_init+0xc>

		}

	}
}
 8009c2a:	bf00      	nop
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bcb0      	pop	{r4, r5, r7}
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
<<<<<<< HEAD
 8009c34:	2000df7c 	.word	0x2000df7c
 8009c38:	2000df80 	.word	0x2000df80
 8009c3c:	2001a6d8 	.word	0x2001a6d8
=======
 8009c34:	20004fd4 	.word	0x20004fd4
 8009c38:	20004fd8 	.word	0x20004fd8
 8009c3c:	20016560 	.word	0x20016560
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

08009c40 <mapcopy>:

void mapcopy(){
 8009c40:	b480      	push	{r7}
 8009c42:	af00      	add	r7, sp, #0
		}

	}
#endif

	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009c44:	4b4b      	ldr	r3, [pc, #300]	; (8009d74 <mapcopy+0x134>)
 8009c46:	2203      	movs	r2, #3
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	e05d      	b.n	8009d08 <mapcopy+0xc8>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009c4c:	4b4a      	ldr	r3, [pc, #296]	; (8009d78 <mapcopy+0x138>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	601a      	str	r2, [r3, #0]
 8009c52:	e050      	b.n	8009cf6 <mapcopy+0xb6>
			work_ram[k] = wall[i][j].north;
 8009c54:	4b48      	ldr	r3, [pc, #288]	; (8009d78 <mapcopy+0x138>)
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	4b46      	ldr	r3, [pc, #280]	; (8009d74 <mapcopy+0x134>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4947      	ldr	r1, [pc, #284]	; (8009d7c <mapcopy+0x13c>)
 8009c5e:	0092      	lsls	r2, r2, #2
 8009c60:	4413      	add	r3, r2
 8009c62:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009c66:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009c6a:	b2da      	uxtb	r2, r3
 8009c6c:	4b44      	ldr	r3, [pc, #272]	; (8009d80 <mapcopy+0x140>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4611      	mov	r1, r2
 8009c72:	4a44      	ldr	r2, [pc, #272]	; (8009d84 <mapcopy+0x144>)
 8009c74:	54d1      	strb	r1, [r2, r3]
			work_ram[k+1] = wall[i][j].east;
 8009c76:	4b40      	ldr	r3, [pc, #256]	; (8009d78 <mapcopy+0x138>)
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	4b3e      	ldr	r3, [pc, #248]	; (8009d74 <mapcopy+0x134>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	493f      	ldr	r1, [pc, #252]	; (8009d7c <mapcopy+0x13c>)
 8009c80:	0092      	lsls	r2, r2, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009c88:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009c8c:	b2da      	uxtb	r2, r3
 8009c8e:	4b3c      	ldr	r3, [pc, #240]	; (8009d80 <mapcopy+0x140>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3301      	adds	r3, #1
 8009c94:	4611      	mov	r1, r2
 8009c96:	4a3b      	ldr	r2, [pc, #236]	; (8009d84 <mapcopy+0x144>)
 8009c98:	54d1      	strb	r1, [r2, r3]
			work_ram[k+2] = wall[i][j].south;
 8009c9a:	4b37      	ldr	r3, [pc, #220]	; (8009d78 <mapcopy+0x138>)
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	4b35      	ldr	r3, [pc, #212]	; (8009d74 <mapcopy+0x134>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4936      	ldr	r1, [pc, #216]	; (8009d7c <mapcopy+0x13c>)
 8009ca4:	0092      	lsls	r2, r2, #2
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009cac:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009cb0:	b2da      	uxtb	r2, r3
 8009cb2:	4b33      	ldr	r3, [pc, #204]	; (8009d80 <mapcopy+0x140>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3302      	adds	r3, #2
 8009cb8:	4611      	mov	r1, r2
 8009cba:	4a32      	ldr	r2, [pc, #200]	; (8009d84 <mapcopy+0x144>)
 8009cbc:	54d1      	strb	r1, [r2, r3]
			work_ram[k+3] = wall[i][j].west;
 8009cbe:	4b2e      	ldr	r3, [pc, #184]	; (8009d78 <mapcopy+0x138>)
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	4b2c      	ldr	r3, [pc, #176]	; (8009d74 <mapcopy+0x134>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	492d      	ldr	r1, [pc, #180]	; (8009d7c <mapcopy+0x13c>)
 8009cc8:	0092      	lsls	r2, r2, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009cd0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	4b2a      	ldr	r3, [pc, #168]	; (8009d80 <mapcopy+0x140>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	3303      	adds	r3, #3
 8009cdc:	4611      	mov	r1, r2
 8009cde:	4a29      	ldr	r2, [pc, #164]	; (8009d84 <mapcopy+0x144>)
 8009ce0:	54d1      	strb	r1, [r2, r3]
			k+=4;
 8009ce2:	4b27      	ldr	r3, [pc, #156]	; (8009d80 <mapcopy+0x140>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	4a25      	ldr	r2, [pc, #148]	; (8009d80 <mapcopy+0x140>)
 8009cea:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009cec:	4b22      	ldr	r3, [pc, #136]	; (8009d78 <mapcopy+0x138>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	4a21      	ldr	r2, [pc, #132]	; (8009d78 <mapcopy+0x138>)
 8009cf4:	6013      	str	r3, [r2, #0]
 8009cf6:	4b20      	ldr	r3, [pc, #128]	; (8009d78 <mapcopy+0x138>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b03      	cmp	r3, #3
 8009cfc:	ddaa      	ble.n	8009c54 <mapcopy+0x14>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009cfe:	4b1d      	ldr	r3, [pc, #116]	; (8009d74 <mapcopy+0x134>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3b01      	subs	r3, #1
 8009d04:	4a1b      	ldr	r2, [pc, #108]	; (8009d74 <mapcopy+0x134>)
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	4b1a      	ldr	r3, [pc, #104]	; (8009d74 <mapcopy+0x134>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	da9d      	bge.n	8009c4c <mapcopy+0xc>
		//要�?は4*NOS*NOS番目 - 1 まで�?ま�?
		//kは60まで行ったあと�?4*NOS*NOS になって値が�?�らず終わ�?

	}

	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009d10:	4b18      	ldr	r3, [pc, #96]	; (8009d74 <mapcopy+0x134>)
 8009d12:	2203      	movs	r2, #3
 8009d14:	601a      	str	r2, [r3, #0]
 8009d16:	e023      	b.n	8009d60 <mapcopy+0x120>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009d18:	4b17      	ldr	r3, [pc, #92]	; (8009d78 <mapcopy+0x138>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	e016      	b.n	8009d4e <mapcopy+0x10e>
			work_ram[k] = walk_map[i][j];
 8009d20:	4b15      	ldr	r3, [pc, #84]	; (8009d78 <mapcopy+0x138>)
 8009d22:	6819      	ldr	r1, [r3, #0]
 8009d24:	4b13      	ldr	r3, [pc, #76]	; (8009d74 <mapcopy+0x134>)
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	4b15      	ldr	r3, [pc, #84]	; (8009d80 <mapcopy+0x140>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4816      	ldr	r0, [pc, #88]	; (8009d88 <mapcopy+0x148>)
 8009d2e:	0089      	lsls	r1, r1, #2
 8009d30:	4401      	add	r1, r0
 8009d32:	440a      	add	r2, r1
 8009d34:	7811      	ldrb	r1, [r2, #0]
 8009d36:	4a13      	ldr	r2, [pc, #76]	; (8009d84 <mapcopy+0x144>)
 8009d38:	54d1      	strb	r1, [r2, r3]
			k+=1;
 8009d3a:	4b11      	ldr	r3, [pc, #68]	; (8009d80 <mapcopy+0x140>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	4a0f      	ldr	r2, [pc, #60]	; (8009d80 <mapcopy+0x140>)
 8009d42:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009d44:	4b0c      	ldr	r3, [pc, #48]	; (8009d78 <mapcopy+0x138>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	4a0b      	ldr	r2, [pc, #44]	; (8009d78 <mapcopy+0x138>)
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <mapcopy+0x138>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	dde4      	ble.n	8009d20 <mapcopy+0xe0>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009d56:	4b07      	ldr	r3, [pc, #28]	; (8009d74 <mapcopy+0x134>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	4a05      	ldr	r2, [pc, #20]	; (8009d74 <mapcopy+0x134>)
 8009d5e:	6013      	str	r3, [r2, #0]
 8009d60:	4b04      	ldr	r3, [pc, #16]	; (8009d74 <mapcopy+0x134>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	dad7      	bge.n	8009d18 <mapcopy+0xd8>
//	if(i <= 10){
//		work_ram[i][0] = wall[1][1].east;
//		i++;
//	}
//wall[4][4].south = 64? why
}
 8009d68:	bf00      	nop
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
<<<<<<< HEAD
 8009d74:	2000df84 	.word	0x2000df84
 8009d78:	2000df88 	.word	0x2000df88
 8009d7c:	2001a6d8 	.word	0x2001a6d8
 8009d80:	2000df8c 	.word	0x2000df8c
 8009d84:	20009f7c 	.word	0x20009f7c
 8009d88:	2001a268 	.word	0x2001a268
=======
 8009d74:	20004fdc 	.word	0x20004fdc
 8009d78:	20004fe0 	.word	0x20004fe0
 8009d7c:	20016560 	.word	0x20016560
 8009d80:	20004fe4 	.word	0x20004fe4
 8009d84:	20000fd4 	.word	0x20000fd4
 8009d88:	200160f0 	.word	0x200160f0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

08009d8c <mapprint>:

void mapprint(){
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	af00      	add	r7, sp, #0

	static int i = 0, j=0,k=0;
#if 1
	//迷路�?報
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009d90:	4b3f      	ldr	r3, [pc, #252]	; (8009e90 <mapprint+0x104>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	601a      	str	r2, [r3, #0]
 8009d96:	e041      	b.n	8009e1c <mapprint+0x90>
		for(j=0; j < NUMBER_OF_SQUARES * 4; j++){
 8009d98:	4b3e      	ldr	r3, [pc, #248]	; (8009e94 <mapprint+0x108>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	e031      	b.n	8009e04 <mapprint+0x78>
			printf("%u",work_ram[k]);
 8009da0:	4b3d      	ldr	r3, [pc, #244]	; (8009e98 <mapprint+0x10c>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a3d      	ldr	r2, [pc, #244]	; (8009e9c <mapprint+0x110>)
 8009da6:	5cd3      	ldrb	r3, [r2, r3]
 8009da8:	4619      	mov	r1, r3
 8009daa:	483d      	ldr	r0, [pc, #244]	; (8009ea0 <mapprint+0x114>)
<<<<<<< HEAD
 8009dac:	f00c fed2 	bl	8016b54 <iprintf>
=======
 8009dac:	f00a fe84 	bl	8014ab8 <iprintf>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
			if((k+1)%(NUMBER_OF_SQUARES * 4) != 0){
 8009db0:	4b39      	ldr	r3, [pc, #228]	; (8009e98 <mapprint+0x10c>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3301      	adds	r3, #1
 8009db6:	f003 030f 	and.w	r3, r3, #15
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00e      	beq.n	8009ddc <mapprint+0x50>
			if((k+1) >= 4 && (k+1)%4 == 0)
 8009dbe:	4b36      	ldr	r3, [pc, #216]	; (8009e98 <mapprint+0x10c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	2b03      	cmp	r3, #3
 8009dc6:	dd09      	ble.n	8009ddc <mapprint+0x50>
 8009dc8:	4b33      	ldr	r3, [pc, #204]	; (8009e98 <mapprint+0x10c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	f003 0303 	and.w	r3, r3, #3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d102      	bne.n	8009ddc <mapprint+0x50>
				printf("  ");
 8009dd6:	4833      	ldr	r0, [pc, #204]	; (8009ea4 <mapprint+0x118>)
<<<<<<< HEAD
 8009dd8:	f00c febc 	bl	8016b54 <iprintf>
=======
 8009dd8:	f00a fe6e 	bl	8014ab8 <iprintf>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
			}
			if((k+1)%(NUMBER_OF_SQUARES * 4) == 0){
 8009ddc:	4b2e      	ldr	r3, [pc, #184]	; (8009e98 <mapprint+0x10c>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3301      	adds	r3, #1
 8009de2:	f003 030f 	and.w	r3, r3, #15
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d102      	bne.n	8009df0 <mapprint+0x64>
				printf("\r\n");
 8009dea:	482f      	ldr	r0, [pc, #188]	; (8009ea8 <mapprint+0x11c>)
<<<<<<< HEAD
 8009dec:	f00c ff26 	bl	8016c3c <puts>
=======
 8009dec:	f00a fed8 	bl	8014ba0 <puts>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
			}
			k++;
 8009df0:	4b29      	ldr	r3, [pc, #164]	; (8009e98 <mapprint+0x10c>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3301      	adds	r3, #1
 8009df6:	4a28      	ldr	r2, [pc, #160]	; (8009e98 <mapprint+0x10c>)
 8009df8:	6013      	str	r3, [r2, #0]
		for(j=0; j < NUMBER_OF_SQUARES * 4; j++){
 8009dfa:	4b26      	ldr	r3, [pc, #152]	; (8009e94 <mapprint+0x108>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	4a24      	ldr	r2, [pc, #144]	; (8009e94 <mapprint+0x108>)
 8009e02:	6013      	str	r3, [r2, #0]
 8009e04:	4b23      	ldr	r3, [pc, #140]	; (8009e94 <mapprint+0x108>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b0f      	cmp	r3, #15
 8009e0a:	ddc9      	ble.n	8009da0 <mapprint+0x14>
		}
		printf("\r\n");
 8009e0c:	4826      	ldr	r0, [pc, #152]	; (8009ea8 <mapprint+0x11c>)
<<<<<<< HEAD
 8009e0e:	f00c ff15 	bl	8016c3c <puts>
=======
 8009e0e:	f00a fec7 	bl	8014ba0 <puts>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009e12:	4b1f      	ldr	r3, [pc, #124]	; (8009e90 <mapprint+0x104>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	3301      	adds	r3, #1
 8009e18:	4a1d      	ldr	r2, [pc, #116]	; (8009e90 <mapprint+0x104>)
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	4b1c      	ldr	r3, [pc, #112]	; (8009e90 <mapprint+0x104>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b03      	cmp	r3, #3
 8009e22:	ddb9      	ble.n	8009d98 <mapprint+0xc>
	}

	printf("\r\n");
 8009e24:	4820      	ldr	r0, [pc, #128]	; (8009ea8 <mapprint+0x11c>)
<<<<<<< HEAD
 8009e26:	f00c ff09 	bl	8016c3c <puts>
	printf("\r\n");
 8009e2a:	481f      	ldr	r0, [pc, #124]	; (8009ea8 <mapprint+0x11c>)
 8009e2c:	f00c ff06 	bl	8016c3c <puts>
=======
 8009e26:	f00a febb 	bl	8014ba0 <puts>
	printf("\r\n");
 8009e2a:	481f      	ldr	r0, [pc, #124]	; (8009ea8 <mapprint+0x11c>)
 8009e2c:	f00a feb8 	bl	8014ba0 <puts>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac


	//歩数マッ�?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009e30:	4b17      	ldr	r3, [pc, #92]	; (8009e90 <mapprint+0x104>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	601a      	str	r2, [r3, #0]
 8009e36:	e024      	b.n	8009e82 <mapprint+0xf6>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009e38:	4b16      	ldr	r3, [pc, #88]	; (8009e94 <mapprint+0x108>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	e011      	b.n	8009e64 <mapprint+0xd8>
			printf("%u  ",work_ram[k]);
 8009e40:	4b15      	ldr	r3, [pc, #84]	; (8009e98 <mapprint+0x10c>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a15      	ldr	r2, [pc, #84]	; (8009e9c <mapprint+0x110>)
 8009e46:	5cd3      	ldrb	r3, [r2, r3]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4818      	ldr	r0, [pc, #96]	; (8009eac <mapprint+0x120>)
<<<<<<< HEAD
 8009e4c:	f00c fe82 	bl	8016b54 <iprintf>
=======
 8009e4c:	f00a fe34 	bl	8014ab8 <iprintf>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
			k++;
 8009e50:	4b11      	ldr	r3, [pc, #68]	; (8009e98 <mapprint+0x10c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3301      	adds	r3, #1
 8009e56:	4a10      	ldr	r2, [pc, #64]	; (8009e98 <mapprint+0x10c>)
 8009e58:	6013      	str	r3, [r2, #0]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009e5a:	4b0e      	ldr	r3, [pc, #56]	; (8009e94 <mapprint+0x108>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	4a0c      	ldr	r2, [pc, #48]	; (8009e94 <mapprint+0x108>)
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	4b0b      	ldr	r3, [pc, #44]	; (8009e94 <mapprint+0x108>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b03      	cmp	r3, #3
 8009e6a:	dde9      	ble.n	8009e40 <mapprint+0xb4>
		}
		printf("\r\n");
 8009e6c:	480e      	ldr	r0, [pc, #56]	; (8009ea8 <mapprint+0x11c>)
<<<<<<< HEAD
 8009e6e:	f00c fee5 	bl	8016c3c <puts>
		printf("\r\n");
 8009e72:	480d      	ldr	r0, [pc, #52]	; (8009ea8 <mapprint+0x11c>)
 8009e74:	f00c fee2 	bl	8016c3c <puts>
=======
 8009e6e:	f00a fe97 	bl	8014ba0 <puts>
		printf("\r\n");
 8009e72:	480d      	ldr	r0, [pc, #52]	; (8009ea8 <mapprint+0x11c>)
 8009e74:	f00a fe94 	bl	8014ba0 <puts>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009e78:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <mapprint+0x104>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	4a04      	ldr	r2, [pc, #16]	; (8009e90 <mapprint+0x104>)
 8009e80:	6013      	str	r3, [r2, #0]
 8009e82:	4b03      	ldr	r3, [pc, #12]	; (8009e90 <mapprint+0x104>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	ddd6      	ble.n	8009e38 <mapprint+0xac>
	}
#endif
//	for(int i=0; i <=10; i++)
//	printf("保存データ :: %d \r\n",work_ram[i][0]);

}
 8009e8a:	bf00      	nop
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
<<<<<<< HEAD
 8009e90:	2000df90 	.word	0x2000df90
 8009e94:	2000df94 	.word	0x2000df94
 8009e98:	2000df98 	.word	0x2000df98
 8009e9c:	20009f7c 	.word	0x20009f7c
 8009ea0:	080189b8 	.word	0x080189b8
 8009ea4:	080189bc 	.word	0x080189bc
 8009ea8:	080189c0 	.word	0x080189c0
 8009eac:	080189c4 	.word	0x080189c4
=======
 8009e90:	20004fe8 	.word	0x20004fe8
 8009e94:	20004fec 	.word	0x20004fec
 8009e98:	20004ff0 	.word	0x20004ff0
 8009e9c:	20000fd4 	.word	0x20000fd4
 8009ea0:	08016918 	.word	0x08016918
 8009ea4:	0801691c 	.word	0x0801691c
 8009ea8:	08016920 	.word	0x08016920
 8009eac:	08016924 	.word	0x08016924
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

08009eb0 <Flash_clear>:
// Flashのsectoe1を消去
bool Flash_clear()
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b088      	sub	sp, #32
 8009eb4:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
<<<<<<< HEAD
 8009eb6:	f008 fb65 	bl	8012584 <HAL_FLASH_Unlock>
=======
 8009eb6:	f006 fb17 	bl	80104e8 <HAL_FLASH_Unlock>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 8009eca:	1d3a      	adds	r2, r7, #4
 8009ecc:	f107 0308 	add.w	r3, r7, #8
 8009ed0:	4611      	mov	r1, r2
 8009ed2:	4618      	mov	r0, r3
<<<<<<< HEAD
 8009ed4:	f008 fcb6 	bl	8012844 <HAL_FLASHEx_Erase>
=======
 8009ed4:	f006 fc68 	bl	80107a8 <HAL_FLASHEx_Erase>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 8009ed8:	4603      	mov	r3, r0
 8009eda:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
<<<<<<< HEAD
 8009edc:	f008 fb74 	bl	80125c8 <HAL_FLASH_Lock>
=======
 8009edc:	f006 fb26 	bl	801052c <HAL_FLASH_Lock>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 8009ee0:	7ffb      	ldrb	r3, [r7, #31]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d105      	bne.n	8009ef2 <Flash_clear+0x42>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eec:	d101      	bne.n	8009ef2 <Flash_clear+0x42>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e000      	b.n	8009ef4 <Flash_clear+0x44>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	f003 0301 	and.w	r3, r3, #1
 8009ef8:	b2db      	uxtb	r3, r3
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3720      	adds	r7, #32
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
	...

08009f04 <Flash_load>:

// Flashのsector1のてwork_ramに読み出
// work_ramの先アドレスを返す
uint8_t* Flash_load() //uint8_t*
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);//BACKUP_FLASH_SECTOR_SIZE
 8009f08:	4a05      	ldr	r2, [pc, #20]	; (8009f20 <Flash_load+0x1c>)
 8009f0a:	4b06      	ldr	r3, [pc, #24]	; (8009f24 <Flash_load+0x20>)
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	4619      	mov	r1, r3
 8009f10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009f14:	461a      	mov	r2, r3
<<<<<<< HEAD
 8009f16:	f00c f9ad 	bl	8016274 <memcpy>
=======
 8009f16:	f00a f95f 	bl	80141d8 <memcpy>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    return work_ram;
 8009f1a:	4b01      	ldr	r3, [pc, #4]	; (8009f20 <Flash_load+0x1c>)
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
 8009f20:	20009f7c 	.word	0x20009f7c
=======
 8009f20:	20000fd4 	.word	0x20000fd4
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 8009f24:	08004000 	.word	0x08004000

08009f28 <Flash_store>:

// Flashのsector1を消去後�???��?��タを書き込
bool Flash_store()
{
 8009f28:	b590      	push	{r4, r7, lr}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return false;
 8009f2e:	f7ff ffbf 	bl	8009eb0 <Flash_clear>
 8009f32:	4603      	mov	r3, r0
 8009f34:	f083 0301 	eor.w	r3, r3, #1
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <Flash_store+0x1a>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	e02f      	b.n	8009fa2 <Flash_store+0x7a>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 8009f42:	4b1a      	ldr	r3, [pc, #104]	; (8009fac <Flash_store+0x84>)
 8009f44:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
<<<<<<< HEAD
 8009f46:	f008 fb1d 	bl	8012584 <HAL_FLASH_Unlock>
=======
 8009f46:	f006 facf 	bl	80104e8 <HAL_FLASH_Unlock>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

    // work_ramにある4バイトごとまとめて書き込
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 8009f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f4e:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 8009f50:	2300      	movs	r3, #0
 8009f52:	60bb      	str	r3, [r7, #8]
 8009f54:	e017      	b.n	8009f86 <Flash_store+0x5e>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4a15      	ldr	r2, [pc, #84]	; (8009fb0 <Flash_store+0x88>)
        result = HAL_FLASH_Program(
 8009f5c:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	4413      	add	r3, r2
 8009f66:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 8009f68:	f04f 0400 	mov.w	r4, #0
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	4623      	mov	r3, r4
 8009f70:	2002      	movs	r0, #2
<<<<<<< HEAD
 8009f72:	f008 f9ff 	bl	8012374 <HAL_FLASH_Program>
=======
 8009f72:	f006 f9b1 	bl	80102d8 <HAL_FLASH_Program>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 8009f76:	4603      	mov	r3, r0
 8009f78:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d107      	bne.n	8009f90 <Flash_store+0x68>
    for (size_t i=0; i<write_cnt; i++)
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	3301      	adds	r3, #1
 8009f84:	60bb      	str	r3, [r7, #8]
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d3e3      	bcc.n	8009f56 <Flash_store+0x2e>
 8009f8e:	e000      	b.n	8009f92 <Flash_store+0x6a>
        if (result != HAL_OK) break;
 8009f90:	bf00      	nop
    }

    HAL_FLASH_Lock();
<<<<<<< HEAD
 8009f92:	f008 fb19 	bl	80125c8 <HAL_FLASH_Lock>
=======
 8009f92:	f006 facb 	bl	801052c <HAL_FLASH_Lock>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

    return result == HAL_OK;
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	bf0c      	ite	eq
 8009f9c:	2301      	moveq	r3, #1
 8009f9e:	2300      	movne	r3, #0
 8009fa0:	b2db      	uxtb	r3, r3
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd90      	pop	{r4, r7, pc}
 8009faa:	bf00      	nop
<<<<<<< HEAD
 8009fac:	20009f7c 	.word	0x20009f7c
=======
 8009fac:	20000fd4 	.word	0x20000fd4
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 8009fb0:	08004000 	.word	0x08004000

08009fb4 <Emitter_ON>:
        printf("\r\n");
        HAL_Delay(T3);
}


void Emitter_ON(){  // 赤外線エミッタに出力比�?トグルモードを相補で
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	af00      	add	r7, sp, #0
#if 1
  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 8009fb8:	2100      	movs	r1, #0
 8009fba:	4804      	ldr	r0, [pc, #16]	; (8009fcc <Emitter_ON+0x18>)
<<<<<<< HEAD
 8009fbc:	f00a f996 	bl	80142ec <HAL_TIM_OC_Start_IT>
  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	4802      	ldr	r0, [pc, #8]	; (8009fcc <Emitter_ON+0x18>)
 8009fc4:	f00b fa63 	bl	801548e <HAL_TIMEx_OCN_Start_IT>
=======
 8009fbc:	f008 f948 	bl	8012250 <HAL_TIM_OC_Start_IT>
  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	4802      	ldr	r0, [pc, #8]	; (8009fcc <Emitter_ON+0x18>)
 8009fc4:	f009 fa15 	bl	80133f2 <HAL_TIMEx_OCN_Start_IT>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif
}
 8009fc8:	bf00      	nop
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	20005090 	.word	0x20005090

08009fd0 <Emitter_OFF>:
void Emitter_OFF(){
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	af00      	add	r7, sp, #0
#if 1
  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	4804      	ldr	r0, [pc, #16]	; (8009fe8 <Emitter_OFF+0x18>)
<<<<<<< HEAD
 8009fd8:	f00a fa0c 	bl	80143f4 <HAL_TIM_OC_Stop_IT>
  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 8009fdc:	2100      	movs	r1, #0
 8009fde:	4802      	ldr	r0, [pc, #8]	; (8009fe8 <Emitter_OFF+0x18>)
 8009fe0:	f00b faaa 	bl	8015538 <HAL_TIMEx_OCN_Stop_IT>
=======
 8009fd8:	f008 f9be 	bl	8012358 <HAL_TIM_OC_Stop_IT>
  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 8009fdc:	2100      	movs	r1, #0
 8009fde:	4802      	ldr	r0, [pc, #8]	; (8009fe8 <Emitter_OFF+0x18>)
 8009fe0:	f009 fa5c 	bl	801349c <HAL_TIMEx_OCN_Stop_IT>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif
}
 8009fe4:	bf00      	nop
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	20005090 	.word	0x20005090

08009fec <ADC_Start>:
void ADC_Start(){  //AD値のDMA
 8009fec:	b580      	push	{r7, lr}
 8009fee:	af00      	add	r7, sp, #0
#if 1
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog1, 3) != HAL_OK){
 8009ff0:	2203      	movs	r2, #3
 8009ff2:	490a      	ldr	r1, [pc, #40]	; (800a01c <ADC_Start+0x30>)
 8009ff4:	480a      	ldr	r0, [pc, #40]	; (800a020 <ADC_Start+0x34>)
<<<<<<< HEAD
 8009ff6:	f007 f8c9 	bl	801118c <HAL_ADC_Start_DMA>
=======
 8009ff6:	f005 f87b 	bl	800f0f0 <HAL_ADC_Start_DMA>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <ADC_Start+0x18>
  		        Error_Handler();
<<<<<<< HEAD
 800a000:	f006 f99a 	bl	8010338 <Error_Handler>
=======
 800a000:	f004 f94c 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  		    }

  if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog2, 2) != HAL_OK){
 800a004:	2202      	movs	r2, #2
 800a006:	4907      	ldr	r1, [pc, #28]	; (800a024 <ADC_Start+0x38>)
 800a008:	4807      	ldr	r0, [pc, #28]	; (800a028 <ADC_Start+0x3c>)
<<<<<<< HEAD
 800a00a:	f007 f8bf 	bl	801118c <HAL_ADC_Start_DMA>
=======
 800a00a:	f005 f871 	bl	800f0f0 <HAL_ADC_Start_DMA>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <ADC_Start+0x2c>
  		    	Error_Handler();
<<<<<<< HEAD
 800a014:	f006 f990 	bl	8010338 <Error_Handler>
=======
 800a014:	f004 f942 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 }
#endif
}
 800a018:	bf00      	nop
 800a01a:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
 800a01c:	20009f60 	.word	0x20009f60
 800a020:	20019d90 	.word	0x20019d90
 800a024:	20009f68 	.word	0x20009f68
 800a028:	2000e0d4 	.word	0x2000e0d4
=======
 800a01c:	20000fb8 	.word	0x20000fb8
 800a020:	20015c18 	.word	0x20015c18
 800a024:	20000fc0 	.word	0x20000fc0
 800a028:	20005114 	.word	0x20005114
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

0800a02c <ADC_Stop>:
void ADC_Stop(){
 800a02c:	b580      	push	{r7, lr}
 800a02e:	af00      	add	r7, sp, #0
#if 1
  if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK){
 800a030:	4808      	ldr	r0, [pc, #32]	; (800a054 <ADC_Stop+0x28>)
<<<<<<< HEAD
 800a032:	f007 f99d 	bl	8011370 <HAL_ADC_Stop_DMA>
=======
 800a032:	f005 f94f 	bl	800f2d4 <HAL_ADC_Stop_DMA>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d001      	beq.n	800a040 <ADC_Stop+0x14>
  		        Error_Handler();
<<<<<<< HEAD
 800a03c:	f006 f97c 	bl	8010338 <Error_Handler>
=======
 800a03c:	f004 f92e 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  		    }

  if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK){
 800a040:	4805      	ldr	r0, [pc, #20]	; (800a058 <ADC_Stop+0x2c>)
<<<<<<< HEAD
 800a042:	f007 f995 	bl	8011370 <HAL_ADC_Stop_DMA>
=======
 800a042:	f005 f947 	bl	800f2d4 <HAL_ADC_Stop_DMA>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d001      	beq.n	800a050 <ADC_Stop+0x24>
  		    	Error_Handler();
<<<<<<< HEAD
 800a04c:	f006 f974 	bl	8010338 <Error_Handler>
=======
 800a04c:	f004 f926 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
            }
#endif
}
 800a050:	bf00      	nop
 800a052:	bd80      	pop	{r7, pc}
 800a054:	20015c18 	.word	0x20015c18
 800a058:	20005114 	.word	0x20005114

0800a05c <Encoder_Start>:
void Encoder_Start(){  //TIM3_Left, TIM4_Right
 800a05c:	b580      	push	{r7, lr}
 800a05e:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800a060:	213c      	movs	r1, #60	; 0x3c
 800a062:	4804      	ldr	r0, [pc, #16]	; (800a074 <Encoder_Start+0x18>)
<<<<<<< HEAD
 800a064:	f00a fbbe 	bl	80147e4 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800a068:	213c      	movs	r1, #60	; 0x3c
 800a06a:	4803      	ldr	r0, [pc, #12]	; (800a078 <Encoder_Start+0x1c>)
 800a06c:	f00a fbba 	bl	80147e4 <HAL_TIM_Encoder_Start>
=======
 800a064:	f008 fb70 	bl	8012748 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800a068:	213c      	movs	r1, #60	; 0x3c
 800a06a:	4803      	ldr	r0, [pc, #12]	; (800a078 <Encoder_Start+0x1c>)
 800a06c:	f008 fb6c 	bl	8012748 <HAL_TIM_Encoder_Start>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
}
 800a070:	bf00      	nop
 800a072:	bd80      	pop	{r7, pc}
 800a074:	20015b78 	.word	0x20015b78
 800a078:	200050d4 	.word	0x200050d4

0800a07c <Motor_PWM_Start>:
void Encoder_Stop(){

}
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800a07c:	b580      	push	{r7, lr}
 800a07e:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK){
 800a080:	210c      	movs	r1, #12
 800a082:	4809      	ldr	r0, [pc, #36]	; (800a0a8 <Motor_PWM_Start+0x2c>)
<<<<<<< HEAD
 800a084:	f00a fa86 	bl	8014594 <HAL_TIM_PWM_Start>
=======
 800a084:	f008 fa38 	bl	80124f8 <HAL_TIM_PWM_Start>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <Motor_PWM_Start+0x16>
	 	    	            Error_Handler();
<<<<<<< HEAD
 800a08e:	f006 f953 	bl	8010338 <Error_Handler>
=======
 800a08e:	f004 f905 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	 	    	        }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK){
 800a092:	2104      	movs	r1, #4
 800a094:	4805      	ldr	r0, [pc, #20]	; (800a0ac <Motor_PWM_Start+0x30>)
<<<<<<< HEAD
 800a096:	f00a fa7d 	bl	8014594 <HAL_TIM_PWM_Start>
=======
 800a096:	f008 fa2f 	bl	80124f8 <HAL_TIM_PWM_Start>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d001      	beq.n	800a0a4 <Motor_PWM_Start+0x28>
	 	    	            Error_Handler();
<<<<<<< HEAD
 800a0a0:	f006 f94a 	bl	8010338 <Error_Handler>
=======
 800a0a0:	f004 f8fc 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	 	    	        }


#endif
}
 800a0a4:	bf00      	nop
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	20016580 	.word	0x20016580
 800a0ac:	20015b34 	.word	0x20015b34

0800a0b0 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK){
 800a0b4:	210c      	movs	r1, #12
 800a0b6:	4809      	ldr	r0, [pc, #36]	; (800a0dc <Motor_PWM_Stop+0x2c>)
<<<<<<< HEAD
 800a0b8:	f00a faaa 	bl	8014610 <HAL_TIM_PWM_Stop>
=======
 800a0b8:	f008 fa5c 	bl	8012574 <HAL_TIM_PWM_Stop>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <Motor_PWM_Stop+0x16>
	 	    	            Error_Handler();
<<<<<<< HEAD
 800a0c2:	f006 f939 	bl	8010338 <Error_Handler>
=======
 800a0c2:	f004 f8eb 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	 }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK){
 800a0c6:	2104      	movs	r1, #4
 800a0c8:	4805      	ldr	r0, [pc, #20]	; (800a0e0 <Motor_PWM_Stop+0x30>)
<<<<<<< HEAD
 800a0ca:	f00a faa1 	bl	8014610 <HAL_TIM_PWM_Stop>
=======
 800a0ca:	f008 fa53 	bl	8012574 <HAL_TIM_PWM_Stop>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <Motor_PWM_Stop+0x28>
	 	    	            Error_Handler();
<<<<<<< HEAD
 800a0d4:	f006 f930 	bl	8010338 <Error_Handler>
=======
 800a0d4:	f004 f8e2 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	 }

#endif
}
 800a0d8:	bf00      	nop
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20016580 	.word	0x20016580
 800a0e0:	20015b34 	.word	0x20015b34

0800a0e4 <Init>:
void PWM_Log(){
//左右のモータのカウント値を配列に格納


}
void Init() { // 諸
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	af00      	add	r7, sp, #0

	Emitter_ON();
 800a0e8:	f7ff ff64 	bl	8009fb4 <Emitter_ON>
	ADC_Start();
 800a0ec:	f7ff ff7e 	bl	8009fec <ADC_Start>
	IMU_init();
 800a0f0:	f7ff fbc4 	bl	800987c <IMU_init>
	Motor_PWM_Start();
 800a0f4:	f7ff ffc2 	bl	800a07c <Motor_PWM_Start>
	 if (HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1) != HAL_OK){
	 	  	  	          Error_Handler();
	 }

#endif
}
 800a0f8:	bf00      	nop
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <lowpass_filter>:



/*---- DEFINING FUNCTION ----*/
double lowpass_filter(float x, float x0, float r)
{
 800a0fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a100:	b084      	sub	sp, #16
 800a102:	af00      	add	r7, sp, #0
 800a104:	ed87 0a03 	vstr	s0, [r7, #12]
 800a108:	edc7 0a02 	vstr	s1, [r7, #8]
 800a10c:	ed87 1a01 	vstr	s2, [r7, #4]
	return ((r)*(x) + (1.0 - (r))* (x0));
 800a110:	ed97 7a01 	vldr	s14, [r7, #4]
 800a114:	edd7 7a03 	vldr	s15, [r7, #12]
 800a118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a11c:	ee17 0a90 	vmov	r0, s15
 800a120:	f7fe f94a 	bl	80083b8 <__aeabi_f2d>
 800a124:	4604      	mov	r4, r0
 800a126:	460d      	mov	r5, r1
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f7fe f945 	bl	80083b8 <__aeabi_f2d>
 800a12e:	4602      	mov	r2, r0
 800a130:	460b      	mov	r3, r1
 800a132:	f04f 0000 	mov.w	r0, #0
 800a136:	4911      	ldr	r1, [pc, #68]	; (800a17c <lowpass_filter+0x80>)
 800a138:	f7fd ffde 	bl	80080f8 <__aeabi_dsub>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4690      	mov	r8, r2
 800a142:	4699      	mov	r9, r3
 800a144:	68b8      	ldr	r0, [r7, #8]
 800a146:	f7fe f937 	bl	80083b8 <__aeabi_f2d>
 800a14a:	4602      	mov	r2, r0
 800a14c:	460b      	mov	r3, r1
 800a14e:	4640      	mov	r0, r8
 800a150:	4649      	mov	r1, r9
 800a152:	f7fe f989 	bl	8008468 <__aeabi_dmul>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	4620      	mov	r0, r4
 800a15c:	4629      	mov	r1, r5
 800a15e:	f7fd ffcd 	bl	80080fc <__adddf3>
 800a162:	4603      	mov	r3, r0
 800a164:	460c      	mov	r4, r1
 800a166:	ec44 3b17 	vmov	d7, r3, r4
}
 800a16a:	eeb0 0a47 	vmov.f32	s0, s14
 800a16e:	eef0 0a67 	vmov.f32	s1, s15
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a17a:	bf00      	nop
 800a17c:	3ff00000 	.word	0x3ff00000

0800a180 <IMU_Get_Data>:
double IMU_Get_Data(){// IMUの値を取
 800a180:	b5b0      	push	{r4, r5, r7, lr}
 800a182:	af00      	add	r7, sp, #0
	//int i = 0;
	static double  /*imu_pre_angle=0,*/ imu_accel=0, imu_pre_accel=0;
	static double LPF=0, lastLPF=0;
    read_gyro_data();
 800a184:	f7ff fba4 	bl	80098d0 <read_gyro_data>
    read_accel_data();
 800a188:	f7ff fbda 	bl	8009940 <read_accel_data>

    //atan2(za,xa);
    imu_accel =  ( ( (double)zg - offset )/16.4) * PI /180;//rad/s or rad/0.001s
 800a18c:	4b4e      	ldr	r3, [pc, #312]	; (800a2c8 <IMU_Get_Data+0x148>)
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	b21b      	sxth	r3, r3
 800a192:	4618      	mov	r0, r3
 800a194:	f7fe f8fe 	bl	8008394 <__aeabi_i2d>
 800a198:	4b4c      	ldr	r3, [pc, #304]	; (800a2cc <IMU_Get_Data+0x14c>)
 800a19a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	4623      	mov	r3, r4
 800a1a2:	f7fd ffa9 	bl	80080f8 <__aeabi_dsub>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	4621      	mov	r1, r4
 800a1ae:	a340      	add	r3, pc, #256	; (adr r3, 800a2b0 <IMU_Get_Data+0x130>)
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	f7fe fa82 	bl	80086bc <__aeabi_ddiv>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	460c      	mov	r4, r1
 800a1bc:	4618      	mov	r0, r3
 800a1be:	4621      	mov	r1, r4
 800a1c0:	a33d      	add	r3, pc, #244	; (adr r3, 800a2b8 <IMU_Get_Data+0x138>)
 800a1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c6:	f7fe f94f 	bl	8008468 <__aeabi_dmul>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	460c      	mov	r4, r1
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	f04f 0200 	mov.w	r2, #0
 800a1d6:	4b3e      	ldr	r3, [pc, #248]	; (800a2d0 <IMU_Get_Data+0x150>)
 800a1d8:	f7fe fa70 	bl	80086bc <__aeabi_ddiv>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	460c      	mov	r4, r1
 800a1e0:	4a3c      	ldr	r2, [pc, #240]	; (800a2d4 <IMU_Get_Data+0x154>)
 800a1e2:	e9c2 3400 	strd	r3, r4, [r2]
    LPF = lowpass_filter(imu_accel, lastLPF,0.01);
 800a1e6:	4b3b      	ldr	r3, [pc, #236]	; (800a2d4 <IMU_Get_Data+0x154>)
 800a1e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	f7fe fc12 	bl	8008a18 <__aeabi_d2f>
 800a1f4:	4605      	mov	r5, r0
 800a1f6:	4b38      	ldr	r3, [pc, #224]	; (800a2d8 <IMU_Get_Data+0x158>)
 800a1f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	4621      	mov	r1, r4
 800a200:	f7fe fc0a 	bl	8008a18 <__aeabi_d2f>
 800a204:	4603      	mov	r3, r0
 800a206:	ed9f 1a35 	vldr	s2, [pc, #212]	; 800a2dc <IMU_Get_Data+0x15c>
 800a20a:	ee00 3a90 	vmov	s1, r3
 800a20e:	ee00 5a10 	vmov	s0, r5
 800a212:	f7ff ff73 	bl	800a0fc <lowpass_filter>
 800a216:	eeb0 7a40 	vmov.f32	s14, s0
 800a21a:	eef0 7a60 	vmov.f32	s15, s1
 800a21e:	4b30      	ldr	r3, [pc, #192]	; (800a2e0 <IMU_Get_Data+0x160>)
 800a220:	ed83 7b00 	vstr	d7, [r3]
    imu_angle += T1*LPF;
 800a224:	4b2e      	ldr	r3, [pc, #184]	; (800a2e0 <IMU_Get_Data+0x160>)
 800a226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a22a:	a325      	add	r3, pc, #148	; (adr r3, 800a2c0 <IMU_Get_Data+0x140>)
 800a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a230:	f7fe f91a 	bl	8008468 <__aeabi_dmul>
 800a234:	4603      	mov	r3, r0
 800a236:	460c      	mov	r4, r1
 800a238:	4618      	mov	r0, r3
 800a23a:	4621      	mov	r1, r4
 800a23c:	4b29      	ldr	r3, [pc, #164]	; (800a2e4 <IMU_Get_Data+0x164>)
 800a23e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a242:	461a      	mov	r2, r3
 800a244:	4623      	mov	r3, r4
 800a246:	f7fd ff59 	bl	80080fc <__adddf3>
 800a24a:	4603      	mov	r3, r0
 800a24c:	460c      	mov	r4, r1
 800a24e:	4a25      	ldr	r2, [pc, #148]	; (800a2e4 <IMU_Get_Data+0x164>)
 800a250:	e9c2 3400 	strd	r3, r4, [r2]
    lastLPF = LPF;
 800a254:	4b22      	ldr	r3, [pc, #136]	; (800a2e0 <IMU_Get_Data+0x160>)
 800a256:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a25a:	4a1f      	ldr	r2, [pc, #124]	; (800a2d8 <IMU_Get_Data+0x158>)
 800a25c:	e9c2 3400 	strd	r3, r4, [r2]
	imu_pre_accel = imu_accel;
 800a260:	4b1c      	ldr	r3, [pc, #112]	; (800a2d4 <IMU_Get_Data+0x154>)
 800a262:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a266:	4a20      	ldr	r2, [pc, #128]	; (800a2e8 <IMU_Get_Data+0x168>)
 800a268:	e9c2 3400 	strd	r3, r4, [r2]
	//imu_pre_angle = imu_angle;

	//0.95 * imu_pre_angle + 0.05 * (imu_pre_accel + imu_accel) * T1 / 2;
	Body_angle = imu_angle * 180 / PI;
 800a26c:	4b1d      	ldr	r3, [pc, #116]	; (800a2e4 <IMU_Get_Data+0x164>)
 800a26e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a272:	f04f 0200 	mov.w	r2, #0
 800a276:	4b16      	ldr	r3, [pc, #88]	; (800a2d0 <IMU_Get_Data+0x150>)
 800a278:	f7fe f8f6 	bl	8008468 <__aeabi_dmul>
 800a27c:	4603      	mov	r3, r0
 800a27e:	460c      	mov	r4, r1
 800a280:	4618      	mov	r0, r3
 800a282:	4621      	mov	r1, r4
 800a284:	a30c      	add	r3, pc, #48	; (adr r3, 800a2b8 <IMU_Get_Data+0x138>)
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	f7fe fa17 	bl	80086bc <__aeabi_ddiv>
 800a28e:	4603      	mov	r3, r0
 800a290:	460c      	mov	r4, r1
 800a292:	4a16      	ldr	r2, [pc, #88]	; (800a2ec <IMU_Get_Data+0x16c>)
 800a294:	e9c2 3400 	strd	r3, r4, [r2]

	  return imu_accel;
<<<<<<< HEAD
 800a298:	4b0e      	ldr	r3, [pc, #56]	; (800a2d4 <IMU_Get_Data+0x154>)
 800a29a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a29e:	ec44 3b17 	vmov	d7, r3, r4
}
 800a2a2:	eeb0 0a47 	vmov.f32	s0, s14
 800a2a6:	eef0 0a67 	vmov.f32	s1, s15
 800a2aa:	bdb0      	pop	{r4, r5, r7, pc}
 800a2ac:	f3af 8000 	nop.w
 800a2b0:	66666666 	.word	0x66666666
 800a2b4:	40306666 	.word	0x40306666
 800a2b8:	54442d18 	.word	0x54442d18
 800a2bc:	400921fb 	.word	0x400921fb
 800a2c0:	d2f1a9fc 	.word	0xd2f1a9fc
 800a2c4:	3f50624d 	.word	0x3f50624d
 800a2c8:	2000e03a 	.word	0x2000e03a
 800a2cc:	20000300 	.word	0x20000300
 800a2d0:	40668000 	.word	0x40668000
 800a2d4:	2000dfa0 	.word	0x2000dfa0
 800a2d8:	2000dfa8 	.word	0x2000dfa8
 800a2dc:	3c23d70a 	.word	0x3c23d70a
 800a2e0:	2000dfb0 	.word	0x2000dfb0
 800a2e4:	200002f0 	.word	0x200002f0
 800a2e8:	2000dfb8 	.word	0x2000dfb8
 800a2ec:	200002e8 	.word	0x200002e8

0800a2f0 <IMU_Control>:
=======
 800a236:	4b0f      	ldr	r3, [pc, #60]	; (800a274 <IMU_Get_Data+0x174>)
 800a238:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a23c:	ec44 3b17 	vmov	d7, r3, r4
}
 800a240:	eeb0 0a47 	vmov.f32	s0, s14
 800a244:	eef0 0a67 	vmov.f32	s1, s15
 800a248:	bdb0      	pop	{r4, r5, r7, pc}
 800a24a:	bf00      	nop
 800a24c:	f3af 8000 	nop.w
 800a250:	66666666 	.word	0x66666666
 800a254:	40306666 	.word	0x40306666
 800a258:	54442d18 	.word	0x54442d18
 800a25c:	400921fb 	.word	0x400921fb
 800a260:	d2f1a9fc 	.word	0xd2f1a9fc
 800a264:	3f50624d 	.word	0x3f50624d
 800a268:	20005076 	.word	0x20005076
 800a26c:	20000f90 	.word	0x20000f90
 800a270:	40668000 	.word	0x40668000
 800a274:	20004ff8 	.word	0x20004ff8
 800a278:	20005000 	.word	0x20005000
 800a27c:	20000f80 	.word	0x20000f80
 800a280:	20000018 	.word	0x20000018
 800a284:	20000f78 	.word	0x20000f78

0800a288 <IMU_Control>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
void IMU_Control(double target, double now, double T, double KP, double KI, double KD){
 800a2f0:	b5b0      	push	{r4, r5, r7, lr}
 800a2f2:	b08c      	sub	sp, #48	; 0x30
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 800a2fa:	ed87 1b08 	vstr	d1, [r7, #32]
 800a2fe:	ed87 2b06 	vstr	d2, [r7, #24]
 800a302:	ed87 3b04 	vstr	d3, [r7, #16]
 800a306:	ed87 4b02 	vstr	d4, [r7, #8]
 800a30a:	ed87 5b00 	vstr	d5, [r7]

	static double e=0, ei=0, ed=0, e0=0;

	if(mode.imu == 0 || (Target_velocity == 0 && Target_Rad_velo == 0)){
 800a30e:	4b7c      	ldr	r3, [pc, #496]	; (800a500 <IMU_Control+0x210>)
 800a310:	799b      	ldrb	r3, [r3, #6]
 800a312:	f003 0301 	and.w	r3, r3, #1
 800a316:	b2db      	uxtb	r3, r3
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00f      	beq.n	800a33c <IMU_Control+0x4c>
 800a31c:	4b79      	ldr	r3, [pc, #484]	; (800a504 <IMU_Control+0x214>)
 800a31e:	edd3 7a00 	vldr	s15, [r3]
 800a322:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a32a:	d123      	bne.n	800a374 <IMU_Control+0x84>
 800a32c:	4b76      	ldr	r3, [pc, #472]	; (800a508 <IMU_Control+0x218>)
 800a32e:	edd3 7a00 	vldr	s15, [r3]
 800a332:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a33a:	d11b      	bne.n	800a374 <IMU_Control+0x84>
		e=0;
 800a33c:	4a73      	ldr	r2, [pc, #460]	; (800a50c <IMU_Control+0x21c>)
 800a33e:	f04f 0300 	mov.w	r3, #0
 800a342:	f04f 0400 	mov.w	r4, #0
 800a346:	e9c2 3400 	strd	r3, r4, [r2]
		ei = 0;
 800a34a:	4a71      	ldr	r2, [pc, #452]	; (800a510 <IMU_Control+0x220>)
 800a34c:	f04f 0300 	mov.w	r3, #0
 800a350:	f04f 0400 	mov.w	r4, #0
 800a354:	e9c2 3400 	strd	r3, r4, [r2]
		ed=0;
 800a358:	4a6e      	ldr	r2, [pc, #440]	; (800a514 <IMU_Control+0x224>)
 800a35a:	f04f 0300 	mov.w	r3, #0
 800a35e:	f04f 0400 	mov.w	r4, #0
 800a362:	e9c2 3400 	strd	r3, r4, [r2]
		e0=0;
 800a366:	4a6c      	ldr	r2, [pc, #432]	; (800a518 <IMU_Control+0x228>)
 800a368:	f04f 0300 	mov.w	r3, #0
 800a36c:	f04f 0400 	mov.w	r4, #0
 800a370:	e9c2 3400 	strd	r3, r4, [r2]
	}
	mode.imu = 1;
 800a374:	4a62      	ldr	r2, [pc, #392]	; (800a500 <IMU_Control+0x210>)
 800a376:	7993      	ldrb	r3, [r2, #6]
 800a378:	f043 0301 	orr.w	r3, r3, #1
 800a37c:	7193      	strb	r3, [r2, #6]

	e = target - now;
 800a37e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a382:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a386:	f7fd feb7 	bl	80080f8 <__aeabi_dsub>
 800a38a:	4603      	mov	r3, r0
 800a38c:	460c      	mov	r4, r1
 800a38e:	4a5f      	ldr	r2, [pc, #380]	; (800a50c <IMU_Control+0x21c>)
 800a390:	e9c2 3400 	strd	r3, r4, [r2]
	ei += e * T;
 800a394:	4b5d      	ldr	r3, [pc, #372]	; (800a50c <IMU_Control+0x21c>)
 800a396:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a39a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a39e:	f7fe f863 	bl	8008468 <__aeabi_dmul>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	4b59      	ldr	r3, [pc, #356]	; (800a510 <IMU_Control+0x220>)
 800a3ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	4623      	mov	r3, r4
 800a3b4:	f7fd fea2 	bl	80080fc <__adddf3>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	4a54      	ldr	r2, [pc, #336]	; (800a510 <IMU_Control+0x220>)
 800a3be:	e9c2 3400 	strd	r3, r4, [r2]
	ed = (e- e0) / T;
 800a3c2:	4b52      	ldr	r3, [pc, #328]	; (800a50c <IMU_Control+0x21c>)
 800a3c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3c8:	4b53      	ldr	r3, [pc, #332]	; (800a518 <IMU_Control+0x228>)
 800a3ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	4623      	mov	r3, r4
 800a3d2:	f7fd fe91 	bl	80080f8 <__aeabi_dsub>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	460c      	mov	r4, r1
 800a3da:	4618      	mov	r0, r3
 800a3dc:	4621      	mov	r1, r4
 800a3de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a3e2:	f7fe f96b 	bl	80086bc <__aeabi_ddiv>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	460c      	mov	r4, r1
<<<<<<< HEAD
 800a3ea:	4a4a      	ldr	r2, [pc, #296]	; (800a514 <IMU_Control+0x224>)
 800a3ec:	e9c2 3400 	strd	r3, r4, [r2]
	e0 = e;
 800a3f0:	4b46      	ldr	r3, [pc, #280]	; (800a50c <IMU_Control+0x21c>)
 800a3f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3f6:	4a48      	ldr	r2, [pc, #288]	; (800a518 <IMU_Control+0x228>)
 800a3f8:	e9c2 3400 	strd	r3, r4, [r2]

	L_angular_velocity = -(int16_t)round(KP*e + KI*ei + KD*ed);
 800a3fc:	4b43      	ldr	r3, [pc, #268]	; (800a50c <IMU_Control+0x21c>)
 800a3fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a402:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a406:	f7fe f82f 	bl	8008468 <__aeabi_dmul>
 800a40a:	4603      	mov	r3, r0
 800a40c:	460c      	mov	r4, r1
 800a40e:	4625      	mov	r5, r4
 800a410:	461c      	mov	r4, r3
 800a412:	4b3f      	ldr	r3, [pc, #252]	; (800a510 <IMU_Control+0x220>)
 800a414:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a418:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a41c:	f7fe f824 	bl	8008468 <__aeabi_dmul>
 800a420:	4602      	mov	r2, r0
 800a422:	460b      	mov	r3, r1
 800a424:	4620      	mov	r0, r4
 800a426:	4629      	mov	r1, r5
 800a428:	f7fd fe68 	bl	80080fc <__adddf3>
 800a42c:	4603      	mov	r3, r0
 800a42e:	460c      	mov	r4, r1
 800a430:	4625      	mov	r5, r4
 800a432:	461c      	mov	r4, r3
 800a434:	4b37      	ldr	r3, [pc, #220]	; (800a514 <IMU_Control+0x224>)
 800a436:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a43a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a43e:	f7fe f813 	bl	8008468 <__aeabi_dmul>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	4620      	mov	r0, r4
 800a448:	4629      	mov	r1, r5
 800a44a:	f7fd fe57 	bl	80080fc <__adddf3>
 800a44e:	4603      	mov	r3, r0
 800a450:	460c      	mov	r4, r1
 800a452:	ec44 3b17 	vmov	d7, r3, r4
 800a456:	eeb0 0a47 	vmov.f32	s0, s14
 800a45a:	eef0 0a67 	vmov.f32	s1, s15
 800a45e:	f00b fe95 	bl	801618c <round>
 800a462:	ec54 3b10 	vmov	r3, r4, d0
 800a466:	4618      	mov	r0, r3
 800a468:	4621      	mov	r1, r4
 800a46a:	f7fe faad 	bl	80089c8 <__aeabi_d2iz>
 800a46e:	4603      	mov	r3, r0
 800a470:	b21b      	sxth	r3, r3
 800a472:	b29b      	uxth	r3, r3
 800a474:	425b      	negs	r3, r3
 800a476:	b29b      	uxth	r3, r3
 800a478:	b21a      	sxth	r2, r3
 800a47a:	4b28      	ldr	r3, [pc, #160]	; (800a51c <IMU_Control+0x22c>)
 800a47c:	801a      	strh	r2, [r3, #0]
	R_angular_velocity =  (int16_t)round(KP*e + KI*ei + KD*ed);
 800a47e:	4b23      	ldr	r3, [pc, #140]	; (800a50c <IMU_Control+0x21c>)
 800a480:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a484:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a488:	f7fd ffee 	bl	8008468 <__aeabi_dmul>
 800a48c:	4603      	mov	r3, r0
 800a48e:	460c      	mov	r4, r1
 800a490:	4625      	mov	r5, r4
 800a492:	461c      	mov	r4, r3
 800a494:	4b1e      	ldr	r3, [pc, #120]	; (800a510 <IMU_Control+0x220>)
 800a496:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a49a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a49e:	f7fd ffe3 	bl	8008468 <__aeabi_dmul>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	f7fd fe27 	bl	80080fc <__adddf3>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	4625      	mov	r5, r4
 800a4b4:	461c      	mov	r4, r3
 800a4b6:	4b17      	ldr	r3, [pc, #92]	; (800a514 <IMU_Control+0x224>)
 800a4b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a4bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4c0:	f7fd ffd2 	bl	8008468 <__aeabi_dmul>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	f7fd fe16 	bl	80080fc <__adddf3>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	ec44 3b17 	vmov	d7, r3, r4
 800a4d8:	eeb0 0a47 	vmov.f32	s0, s14
 800a4dc:	eef0 0a67 	vmov.f32	s1, s15
 800a4e0:	f00b fe54 	bl	801618c <round>
 800a4e4:	ec54 3b10 	vmov	r3, r4, d0
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	f7fe fa6c 	bl	80089c8 <__aeabi_d2iz>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	b21a      	sxth	r2, r3
 800a4f4:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <IMU_Control+0x230>)
 800a4f6:	801a      	strh	r2, [r3, #0]

	//b 車体度0は前回の速度制御
}
 800a4f8:	bf00      	nop
 800a4fa:	3730      	adds	r7, #48	; 0x30
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bdb0      	pop	{r4, r5, r7, pc}
 800a500:	20000068 	.word	0x20000068
 800a504:	200002e0 	.word	0x200002e0
 800a508:	200002e4 	.word	0x200002e4
 800a50c:	2000dfc0 	.word	0x2000dfc0
 800a510:	2000dfc8 	.word	0x2000dfc8
 800a514:	2000dfd0 	.word	0x2000dfd0
 800a518:	2000dfd8 	.word	0x2000dfd8
 800a51c:	2000e01e 	.word	0x2000e01e
 800a520:	2000e022 	.word	0x2000e022

0800a524 <IMU_Calib>:
=======
 800a3ea:	ec44 3b17 	vmov	d7, r3, r4
 800a3ee:	eeb0 0a47 	vmov.f32	s0, s14
 800a3f2:	eef0 0a67 	vmov.f32	s1, s15
 800a3f6:	f009 fe7b 	bl	80140f0 <round>
 800a3fa:	ec54 3b10 	vmov	r3, r4, d0
 800a3fe:	4618      	mov	r0, r3
 800a400:	4621      	mov	r1, r4
 800a402:	f7fe fae1 	bl	80089c8 <__aeabi_d2iz>
 800a406:	4603      	mov	r3, r0
 800a408:	b21b      	sxth	r3, r3
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	425b      	negs	r3, r3
 800a40e:	b29b      	uxth	r3, r3
 800a410:	b21a      	sxth	r2, r3
 800a412:	4b28      	ldr	r3, [pc, #160]	; (800a4b4 <IMU_Control+0x22c>)
 800a414:	801a      	strh	r2, [r3, #0]
	R_angular_velocity =  (int16_t)round(KP*e + KI*ei + KD*ed);
 800a416:	4b23      	ldr	r3, [pc, #140]	; (800a4a4 <IMU_Control+0x21c>)
 800a418:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a41c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a420:	f7fe f822 	bl	8008468 <__aeabi_dmul>
 800a424:	4603      	mov	r3, r0
 800a426:	460c      	mov	r4, r1
 800a428:	4625      	mov	r5, r4
 800a42a:	461c      	mov	r4, r3
 800a42c:	4b1e      	ldr	r3, [pc, #120]	; (800a4a8 <IMU_Control+0x220>)
 800a42e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a432:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a436:	f7fe f817 	bl	8008468 <__aeabi_dmul>
 800a43a:	4602      	mov	r2, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	4620      	mov	r0, r4
 800a440:	4629      	mov	r1, r5
 800a442:	f7fd fe5b 	bl	80080fc <__adddf3>
 800a446:	4603      	mov	r3, r0
 800a448:	460c      	mov	r4, r1
 800a44a:	4625      	mov	r5, r4
 800a44c:	461c      	mov	r4, r3
 800a44e:	4b17      	ldr	r3, [pc, #92]	; (800a4ac <IMU_Control+0x224>)
 800a450:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a454:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a458:	f7fe f806 	bl	8008468 <__aeabi_dmul>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	4620      	mov	r0, r4
 800a462:	4629      	mov	r1, r5
 800a464:	f7fd fe4a 	bl	80080fc <__adddf3>
 800a468:	4603      	mov	r3, r0
 800a46a:	460c      	mov	r4, r1
 800a46c:	ec44 3b17 	vmov	d7, r3, r4
 800a470:	eeb0 0a47 	vmov.f32	s0, s14
 800a474:	eef0 0a67 	vmov.f32	s1, s15
 800a478:	f009 fe3a 	bl	80140f0 <round>
 800a47c:	ec54 3b10 	vmov	r3, r4, d0
 800a480:	4618      	mov	r0, r3
 800a482:	4621      	mov	r1, r4
 800a484:	f7fe faa0 	bl	80089c8 <__aeabi_d2iz>
 800a488:	4603      	mov	r3, r0
 800a48a:	b21a      	sxth	r2, r3
 800a48c:	4b0a      	ldr	r3, [pc, #40]	; (800a4b8 <IMU_Control+0x230>)
 800a48e:	801a      	strh	r2, [r3, #0]

	//b 車体度0は前回の速度制御
}
 800a490:	bf00      	nop
 800a492:	3730      	adds	r7, #48	; 0x30
 800a494:	46bd      	mov	sp, r7
 800a496:	bdb0      	pop	{r4, r5, r7, pc}
 800a498:	20000cf4 	.word	0x20000cf4
 800a49c:	20000f70 	.word	0x20000f70
 800a4a0:	20000f74 	.word	0x20000f74
 800a4a4:	20005008 	.word	0x20005008
 800a4a8:	20005010 	.word	0x20005010
 800a4ac:	20005018 	.word	0x20005018
 800a4b0:	20005020 	.word	0x20005020
 800a4b4:	2000505a 	.word	0x2000505a
 800a4b8:	2000505e 	.word	0x2000505e

0800a4bc <IMU_Calib>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
void IMU_Calib(){
 800a524:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a526:	b089      	sub	sp, #36	; 0x24
 800a528:	af00      	add	r7, sp, #0
 800a52a:	466b      	mov	r3, sp
 800a52c:	461e      	mov	r6, r3

<<<<<<< HEAD
	HAL_Delay(250);
 800a52e:	20fa      	movs	r0, #250	; 0xfa
 800a530:	f006 fc86 	bl	8010e40 <HAL_Delay>
=======
	HAL_Delay(1000);
 800a4c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a4ca:	f004 fc6b 	bl	800eda4 <HAL_Delay>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	int16_t num = 2000;
 800a534:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a538:	81fb      	strh	r3, [r7, #14]
	double zg_vals[num];
 800a53a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800a53e:	4603      	mov	r3, r0
 800a540:	3b01      	subs	r3, #1
 800a542:	60bb      	str	r3, [r7, #8]
 800a544:	4603      	mov	r3, r0
 800a546:	4619      	mov	r1, r3
 800a548:	f04f 0200 	mov.w	r2, #0
 800a54c:	f04f 0300 	mov.w	r3, #0
 800a550:	f04f 0400 	mov.w	r4, #0
 800a554:	0194      	lsls	r4, r2, #6
 800a556:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a55a:	018b      	lsls	r3, r1, #6
 800a55c:	4603      	mov	r3, r0
 800a55e:	4619      	mov	r1, r3
 800a560:	f04f 0200 	mov.w	r2, #0
 800a564:	f04f 0300 	mov.w	r3, #0
 800a568:	f04f 0400 	mov.w	r4, #0
 800a56c:	0194      	lsls	r4, r2, #6
 800a56e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a572:	018b      	lsls	r3, r1, #6
 800a574:	4603      	mov	r3, r0
 800a576:	00db      	lsls	r3, r3, #3
 800a578:	3307      	adds	r3, #7
 800a57a:	3307      	adds	r3, #7
 800a57c:	08db      	lsrs	r3, r3, #3
 800a57e:	00db      	lsls	r3, r3, #3
 800a580:	ebad 0d03 	sub.w	sp, sp, r3
 800a584:	466b      	mov	r3, sp
 800a586:	3307      	adds	r3, #7
 800a588:	08db      	lsrs	r3, r3, #3
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	607b      	str	r3, [r7, #4]
	double sum;
	for(uint16_t i = 0; i < num; i++){
 800a58e:	2300      	movs	r3, #0
 800a590:	83fb      	strh	r3, [r7, #30]
 800a592:	e023      	b.n	800a5dc <IMU_Calib+0xb8>
		zg_vals[i] = (double)zg;
 800a594:	4b1f      	ldr	r3, [pc, #124]	; (800a614 <IMU_Calib+0xf0>)
 800a596:	881b      	ldrh	r3, [r3, #0]
 800a598:	b21b      	sxth	r3, r3
 800a59a:	8bfd      	ldrh	r5, [r7, #30]
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7fd fef9 	bl	8008394 <__aeabi_i2d>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	6879      	ldr	r1, [r7, #4]
 800a5a8:	00ea      	lsls	r2, r5, #3
 800a5aa:	440a      	add	r2, r1
 800a5ac:	e9c2 3400 	strd	r3, r4, [r2]
		sum += zg_vals[i];
 800a5b0:	8bfb      	ldrh	r3, [r7, #30]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	00db      	lsls	r3, r3, #3
 800a5b6:	4413      	add	r3, r2
 800a5b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	4623      	mov	r3, r4
 800a5c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a5c4:	f7fd fd9a 	bl	80080fc <__adddf3>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	e9c7 3404 	strd	r3, r4, [r7, #16]
		HAL_Delay(2);
<<<<<<< HEAD
 800a5d0:	2002      	movs	r0, #2
 800a5d2:	f006 fc35 	bl	8010e40 <HAL_Delay>
=======
 800a56a:	2002      	movs	r0, #2
 800a56c:	f004 fc1a 	bl	800eda4 <HAL_Delay>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	for(uint16_t i = 0; i < num; i++){
 800a5d6:	8bfb      	ldrh	r3, [r7, #30]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	83fb      	strh	r3, [r7, #30]
 800a5dc:	8bfa      	ldrh	r2, [r7, #30]
 800a5de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	dbd6      	blt.n	800a594 <IMU_Calib+0x70>
	}

	offset = sum / num;
<<<<<<< HEAD
 800a5e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fd fed2 	bl	8008394 <__aeabi_i2d>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	4623      	mov	r3, r4
 800a5f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a5fc:	f7fe f85e 	bl	80086bc <__aeabi_ddiv>
 800a600:	4603      	mov	r3, r0
 800a602:	460c      	mov	r4, r1
 800a604:	4a04      	ldr	r2, [pc, #16]	; (800a618 <IMU_Calib+0xf4>)
 800a606:	e9c2 3400 	strd	r3, r4, [r2]
 800a60a:	46b5      	mov	sp, r6
}
 800a60c:	bf00      	nop
 800a60e:	3724      	adds	r7, #36	; 0x24
 800a610:	46bd      	mov	sp, r7
 800a612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a614:	2000e03a 	.word	0x2000e03a
 800a618:	20000300 	.word	0x20000300

0800a61c <LED_Change>:
=======
 800a580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a584:	4618      	mov	r0, r3
 800a586:	f7fd ff05 	bl	8008394 <__aeabi_i2d>
 800a58a:	4603      	mov	r3, r0
 800a58c:	460c      	mov	r4, r1
 800a58e:	461a      	mov	r2, r3
 800a590:	4623      	mov	r3, r4
 800a592:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a596:	f7fe f891 	bl	80086bc <__aeabi_ddiv>
 800a59a:	4603      	mov	r3, r0
 800a59c:	460c      	mov	r4, r1
 800a59e:	4a05      	ldr	r2, [pc, #20]	; (800a5b4 <IMU_Calib+0xf8>)
 800a5a0:	e9c2 3400 	strd	r3, r4, [r2]
 800a5a4:	46b5      	mov	sp, r6
}
 800a5a6:	bf00      	nop
 800a5a8:	3724      	adds	r7, #36	; 0x24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	20005076 	.word	0x20005076
 800a5b4:	20000f90 	.word	0x20000f90

0800a5b8 <LED_Change>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

void LED_Change(){
 800a61c:	b580      	push	{r7, lr}
 800a61e:	af00      	add	r7, sp, #0
	//Switch
	switch(mode.LED){
 800a620:	4b5a      	ldr	r3, [pc, #360]	; (800a78c <LED_Change+0x170>)
 800a622:	f993 3000 	ldrsb.w	r3, [r3]
 800a626:	2b07      	cmp	r3, #7
 800a628:	f200 80ac 	bhi.w	800a784 <LED_Change+0x168>
 800a62c:	a201      	add	r2, pc, #4	; (adr r2, 800a634 <LED_Change+0x18>)
 800a62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a632:	bf00      	nop
 800a634:	0800a655 	.word	0x0800a655
 800a638:	0800a67b 	.word	0x0800a67b
 800a63c:	0800a6a1 	.word	0x0800a6a1
 800a640:	0800a6c7 	.word	0x0800a6c7
 800a644:	0800a6ed 	.word	0x0800a6ed
 800a648:	0800a713 	.word	0x0800a713
 800a64c:	0800a739 	.word	0x0800a739
 800a650:	0800a75f 	.word	0x0800a75f
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
<<<<<<< HEAD
 800a654:	2200      	movs	r2, #0
 800a656:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a65a:	484d      	ldr	r0, [pc, #308]	; (800a790 <LED_Change+0x174>)
 800a65c:	f008 fbc6 	bl	8012dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a660:	2200      	movs	r2, #0
 800a662:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a666:	484a      	ldr	r0, [pc, #296]	; (800a790 <LED_Change+0x174>)
 800a668:	f008 fbc0 	bl	8012dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a66c:	2200      	movs	r2, #0
 800a66e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a672:	4848      	ldr	r0, [pc, #288]	; (800a794 <LED_Change+0x178>)
 800a674:	f008 fbba 	bl	8012dec <HAL_GPIO_WritePin>
=======
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5f6:	484d      	ldr	r0, [pc, #308]	; (800a72c <LED_Change+0x174>)
 800a5f8:	f006 fbaa 	bl	8010d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a602:	484a      	ldr	r0, [pc, #296]	; (800a72c <LED_Change+0x174>)
 800a604:	f006 fba4 	bl	8010d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a608:	2200      	movs	r2, #0
 800a60a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a60e:	4848      	ldr	r0, [pc, #288]	; (800a730 <LED_Change+0x178>)
 800a610:	f006 fb9e 	bl	8010d50 <HAL_GPIO_WritePin>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
		break;
 800a678:	e085      	b.n	800a786 <LED_Change+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
<<<<<<< HEAD
 800a67a:	2201      	movs	r2, #1
 800a67c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a680:	4843      	ldr	r0, [pc, #268]	; (800a790 <LED_Change+0x174>)
 800a682:	f008 fbb3 	bl	8012dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a686:	2200      	movs	r2, #0
 800a688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a68c:	4840      	ldr	r0, [pc, #256]	; (800a790 <LED_Change+0x174>)
 800a68e:	f008 fbad 	bl	8012dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a692:	2200      	movs	r2, #0
 800a694:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a698:	483e      	ldr	r0, [pc, #248]	; (800a794 <LED_Change+0x178>)
 800a69a:	f008 fba7 	bl	8012dec <HAL_GPIO_WritePin>
=======
 800a616:	2201      	movs	r2, #1
 800a618:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a61c:	4843      	ldr	r0, [pc, #268]	; (800a72c <LED_Change+0x174>)
 800a61e:	f006 fb97 	bl	8010d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a622:	2200      	movs	r2, #0
 800a624:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a628:	4840      	ldr	r0, [pc, #256]	; (800a72c <LED_Change+0x174>)
 800a62a:	f006 fb91 	bl	8010d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a62e:	2200      	movs	r2, #0
 800a630:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a634:	483e      	ldr	r0, [pc, #248]	; (800a730 <LED_Change+0x178>)
 800a636:	f006 fb8b 	bl	8010d50 <HAL_GPIO_WritePin>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
		break;
 800a69e:	e072      	b.n	800a786 <LED_Change+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
<<<<<<< HEAD
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6a6:	483a      	ldr	r0, [pc, #232]	; (800a790 <LED_Change+0x174>)
 800a6a8:	f008 fba0 	bl	8012dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6b2:	4837      	ldr	r0, [pc, #220]	; (800a790 <LED_Change+0x174>)
 800a6b4:	f008 fb9a 	bl	8012dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6be:	4835      	ldr	r0, [pc, #212]	; (800a794 <LED_Change+0x178>)
 800a6c0:	f008 fb94 	bl	8012dec <HAL_GPIO_WritePin>
=======
 800a63c:	2200      	movs	r2, #0
 800a63e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a642:	483a      	ldr	r0, [pc, #232]	; (800a72c <LED_Change+0x174>)
 800a644:	f006 fb84 	bl	8010d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a648:	2201      	movs	r2, #1
 800a64a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a64e:	4837      	ldr	r0, [pc, #220]	; (800a72c <LED_Change+0x174>)
 800a650:	f006 fb7e 	bl	8010d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a654:	2200      	movs	r2, #0
 800a656:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a65a:	4835      	ldr	r0, [pc, #212]	; (800a730 <LED_Change+0x178>)
 800a65c:	f006 fb78 	bl	8010d50 <HAL_GPIO_WritePin>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

		break;
 800a6c4:	e05f      	b.n	800a786 <LED_Change+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
<<<<<<< HEAD
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6cc:	4830      	ldr	r0, [pc, #192]	; (800a790 <LED_Change+0x174>)
 800a6ce:	f008 fb8d 	bl	8012dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6d8:	482d      	ldr	r0, [pc, #180]	; (800a790 <LED_Change+0x174>)
 800a6da:	f008 fb87 	bl	8012dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6e4:	482b      	ldr	r0, [pc, #172]	; (800a794 <LED_Change+0x178>)
 800a6e6:	f008 fb81 	bl	8012dec <HAL_GPIO_WritePin>
=======
 800a662:	2201      	movs	r2, #1
 800a664:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a668:	4830      	ldr	r0, [pc, #192]	; (800a72c <LED_Change+0x174>)
 800a66a:	f006 fb71 	bl	8010d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a66e:	2201      	movs	r2, #1
 800a670:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a674:	482d      	ldr	r0, [pc, #180]	; (800a72c <LED_Change+0x174>)
 800a676:	f006 fb6b 	bl	8010d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a67a:	2200      	movs	r2, #0
 800a67c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a680:	482b      	ldr	r0, [pc, #172]	; (800a730 <LED_Change+0x178>)
 800a682:	f006 fb65 	bl	8010d50 <HAL_GPIO_WritePin>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
		break;
 800a6ea:	e04c      	b.n	800a786 <LED_Change+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
<<<<<<< HEAD
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6f2:	4827      	ldr	r0, [pc, #156]	; (800a790 <LED_Change+0x174>)
 800a6f4:	f008 fb7a 	bl	8012dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6fe:	4824      	ldr	r0, [pc, #144]	; (800a790 <LED_Change+0x174>)
 800a700:	f008 fb74 	bl	8012dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a704:	2201      	movs	r2, #1
 800a706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a70a:	4822      	ldr	r0, [pc, #136]	; (800a794 <LED_Change+0x178>)
 800a70c:	f008 fb6e 	bl	8012dec <HAL_GPIO_WritePin>
=======
 800a688:	2200      	movs	r2, #0
 800a68a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a68e:	4827      	ldr	r0, [pc, #156]	; (800a72c <LED_Change+0x174>)
 800a690:	f006 fb5e 	bl	8010d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a694:	2200      	movs	r2, #0
 800a696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a69a:	4824      	ldr	r0, [pc, #144]	; (800a72c <LED_Change+0x174>)
 800a69c:	f006 fb58 	bl	8010d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6a6:	4822      	ldr	r0, [pc, #136]	; (800a730 <LED_Change+0x178>)
 800a6a8:	f006 fb52 	bl	8010d50 <HAL_GPIO_WritePin>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
		break;
 800a710:	e039      	b.n	800a786 <LED_Change+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
<<<<<<< HEAD
 800a712:	2201      	movs	r2, #1
 800a714:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a718:	481d      	ldr	r0, [pc, #116]	; (800a790 <LED_Change+0x174>)
 800a71a:	f008 fb67 	bl	8012dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a71e:	2200      	movs	r2, #0
 800a720:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a724:	481a      	ldr	r0, [pc, #104]	; (800a790 <LED_Change+0x174>)
 800a726:	f008 fb61 	bl	8012dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a72a:	2201      	movs	r2, #1
 800a72c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a730:	4818      	ldr	r0, [pc, #96]	; (800a794 <LED_Change+0x178>)
 800a732:	f008 fb5b 	bl	8012dec <HAL_GPIO_WritePin>
=======
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6b4:	481d      	ldr	r0, [pc, #116]	; (800a72c <LED_Change+0x174>)
 800a6b6:	f006 fb4b 	bl	8010d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6c0:	481a      	ldr	r0, [pc, #104]	; (800a72c <LED_Change+0x174>)
 800a6c2:	f006 fb45 	bl	8010d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6cc:	4818      	ldr	r0, [pc, #96]	; (800a730 <LED_Change+0x178>)
 800a6ce:	f006 fb3f 	bl	8010d50 <HAL_GPIO_WritePin>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
		break;
 800a736:	e026      	b.n	800a786 <LED_Change+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
<<<<<<< HEAD
 800a738:	2200      	movs	r2, #0
 800a73a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a73e:	4814      	ldr	r0, [pc, #80]	; (800a790 <LED_Change+0x174>)
 800a740:	f008 fb54 	bl	8012dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a744:	2201      	movs	r2, #1
 800a746:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a74a:	4811      	ldr	r0, [pc, #68]	; (800a790 <LED_Change+0x174>)
 800a74c:	f008 fb4e 	bl	8012dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a750:	2201      	movs	r2, #1
 800a752:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a756:	480f      	ldr	r0, [pc, #60]	; (800a794 <LED_Change+0x178>)
 800a758:	f008 fb48 	bl	8012dec <HAL_GPIO_WritePin>
=======
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6da:	4814      	ldr	r0, [pc, #80]	; (800a72c <LED_Change+0x174>)
 800a6dc:	f006 fb38 	bl	8010d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6e6:	4811      	ldr	r0, [pc, #68]	; (800a72c <LED_Change+0x174>)
 800a6e8:	f006 fb32 	bl	8010d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6f2:	480f      	ldr	r0, [pc, #60]	; (800a730 <LED_Change+0x178>)
 800a6f4:	f006 fb2c 	bl	8010d50 <HAL_GPIO_WritePin>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

		break;
 800a75c:	e013      	b.n	800a786 <LED_Change+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
<<<<<<< HEAD
 800a75e:	2201      	movs	r2, #1
 800a760:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a764:	480a      	ldr	r0, [pc, #40]	; (800a790 <LED_Change+0x174>)
 800a766:	f008 fb41 	bl	8012dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a76a:	2201      	movs	r2, #1
 800a76c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a770:	4807      	ldr	r0, [pc, #28]	; (800a790 <LED_Change+0x174>)
 800a772:	f008 fb3b 	bl	8012dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a776:	2201      	movs	r2, #1
 800a778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a77c:	4805      	ldr	r0, [pc, #20]	; (800a794 <LED_Change+0x178>)
 800a77e:	f008 fb35 	bl	8012dec <HAL_GPIO_WritePin>
=======
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a700:	480a      	ldr	r0, [pc, #40]	; (800a72c <LED_Change+0x174>)
 800a702:	f006 fb25 	bl	8010d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a706:	2201      	movs	r2, #1
 800a708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a70c:	4807      	ldr	r0, [pc, #28]	; (800a72c <LED_Change+0x174>)
 800a70e:	f006 fb1f 	bl	8010d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a712:	2201      	movs	r2, #1
 800a714:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a718:	4805      	ldr	r0, [pc, #20]	; (800a730 <LED_Change+0x178>)
 800a71a:	f006 fb19 	bl	8010d50 <HAL_GPIO_WritePin>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

		break;
 800a782:	e000      	b.n	800a786 <LED_Change+0x16a>
	default: break;
 800a784:	bf00      	nop

	}
}
<<<<<<< HEAD
 800a786:	bf00      	nop
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	20000068 	.word	0x20000068
 800a790:	40020800 	.word	0x40020800
 800a794:	40020400 	.word	0x40020400
=======
 800a722:	bf00      	nop
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	20000cf4 	.word	0x20000cf4
 800a72c:	40020800 	.word	0x40020800
 800a730:	40020400 	.word	0x40020400
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

0800a798 <Motor_Switch>:
void Motor_Switch(int16_t L, int16_t R){
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	460a      	mov	r2, r1
 800a7a2:	80fb      	strh	r3, [r7, #6]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	80bb      	strh	r3, [r7, #4]
	if (L > 0 ){
 800a7a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	dd05      	ble.n	800a7bc <Motor_Switch+0x24>
		//to -
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); //A2が左SET:1で正転
<<<<<<< HEAD
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	2104      	movs	r1, #4
 800a7b4:	481a      	ldr	r0, [pc, #104]	; (800a820 <Motor_Switch+0x88>)
 800a7b6:	f008 fb19 	bl	8012dec <HAL_GPIO_WritePin>
 800a7ba:	e00c      	b.n	800a7d6 <Motor_Switch+0x3e>
=======
 800a74c:	2201      	movs	r2, #1
 800a74e:	2104      	movs	r1, #4
 800a750:	481a      	ldr	r0, [pc, #104]	; (800a7bc <Motor_Switch+0x88>)
 800a752:	f006 fafd 	bl	8010d50 <HAL_GPIO_WritePin>
 800a756:	e00c      	b.n	800a772 <Motor_Switch+0x3e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	}
	else  if (L < 0){
 800a7bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	da08      	bge.n	800a7d6 <Motor_Switch+0x3e>
		//to +
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //A2が左,RESET:0で転
<<<<<<< HEAD
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2104      	movs	r1, #4
 800a7c8:	4815      	ldr	r0, [pc, #84]	; (800a820 <Motor_Switch+0x88>)
 800a7ca:	f008 fb0f 	bl	8012dec <HAL_GPIO_WritePin>
=======
 800a760:	2200      	movs	r2, #0
 800a762:	2104      	movs	r1, #4
 800a764:	4815      	ldr	r0, [pc, #84]	; (800a7bc <Motor_Switch+0x88>)
 800a766:	f006 faf3 	bl	8010d50 <HAL_GPIO_WritePin>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
		L = -L;
 800a7ce:	88fb      	ldrh	r3, [r7, #6]
 800a7d0:	425b      	negs	r3, r3
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	80fb      	strh	r3, [r7, #6]
	}
	if (R > 0){
 800a7d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	dd05      	ble.n	800a7ea <Motor_Switch+0x52>
		//to -
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); //A0が右,RESET:0で転
<<<<<<< HEAD
 800a7de:	2200      	movs	r2, #0
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	480f      	ldr	r0, [pc, #60]	; (800a820 <Motor_Switch+0x88>)
 800a7e4:	f008 fb02 	bl	8012dec <HAL_GPIO_WritePin>
 800a7e8:	e00c      	b.n	800a804 <Motor_Switch+0x6c>
=======
 800a77a:	2200      	movs	r2, #0
 800a77c:	2101      	movs	r1, #1
 800a77e:	480f      	ldr	r0, [pc, #60]	; (800a7bc <Motor_Switch+0x88>)
 800a780:	f006 fae6 	bl	8010d50 <HAL_GPIO_WritePin>
 800a784:	e00c      	b.n	800a7a0 <Motor_Switch+0x6c>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	}

	else if (R < 0){
 800a7ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	da08      	bge.n	800a804 <Motor_Switch+0x6c>
	  	//to +
	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //A0が右,SET:1で正転
<<<<<<< HEAD
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	2101      	movs	r1, #1
 800a7f6:	480a      	ldr	r0, [pc, #40]	; (800a820 <Motor_Switch+0x88>)
 800a7f8:	f008 faf8 	bl	8012dec <HAL_GPIO_WritePin>
=======
 800a78e:	2201      	movs	r2, #1
 800a790:	2101      	movs	r1, #1
 800a792:	480a      	ldr	r0, [pc, #40]	; (800a7bc <Motor_Switch+0x88>)
 800a794:	f006 fadc 	bl	8010d50 <HAL_GPIO_WritePin>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	  	R = -R;
 800a7fc:	88bb      	ldrh	r3, [r7, #4]
 800a7fe:	425b      	negs	r3, r3
 800a800:	b29b      	uxth	r3, r3
 800a802:	80bb      	strh	r3, [r7, #4]
	}

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, L); //tim2ch4が左
 800a804:	4b07      	ldr	r3, [pc, #28]	; (800a824 <Motor_Switch+0x8c>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a80c:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, R); //tim5ch2が右
 800a80e:	4b06      	ldr	r3, [pc, #24]	; (800a828 <Motor_Switch+0x90>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a816:	639a      	str	r2, [r3, #56]	; 0x38
}
<<<<<<< HEAD
 800a818:	bf00      	nop
 800a81a:	3708      	adds	r7, #8
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	40020000 	.word	0x40020000
 800a824:	2001a6f8 	.word	0x2001a6f8
 800a828:	20019cac 	.word	0x20019cac
=======
 800a7b4:	bf00      	nop
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	40020000 	.word	0x40020000
 800a7c0:	20016580 	.word	0x20016580
 800a7c4:	20015b34 	.word	0x20015b34
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

0800a82c <ADC_Get_Data>:

void ADC_Get_Data(){
<<<<<<< HEAD
 800a82c:	b480      	push	{r7}
 800a82e:	af00      	add	r7, sp, #0
=======
 800a7c8:	b598      	push	{r3, r4, r7, lr}
 800a7ca:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	static int count = 0;

	    sl_ad1_10 = analog1[0];
<<<<<<< HEAD
 800a830:	4b80      	ldr	r3, [pc, #512]	; (800aa34 <ADC_Get_Data+0x208>)
 800a832:	881b      	ldrh	r3, [r3, #0]
 800a834:	b21a      	sxth	r2, r3
 800a836:	4b80      	ldr	r3, [pc, #512]	; (800aa38 <ADC_Get_Data+0x20c>)
 800a838:	801a      	strh	r2, [r3, #0]
		fr_ad1_14 = analog1[1];
 800a83a:	4b7e      	ldr	r3, [pc, #504]	; (800aa34 <ADC_Get_Data+0x208>)
 800a83c:	885b      	ldrh	r3, [r3, #2]
 800a83e:	b21a      	sxth	r2, r3
 800a840:	4b7e      	ldr	r3, [pc, #504]	; (800aa3c <ADC_Get_Data+0x210>)
 800a842:	801a      	strh	r2, [r3, #0]
		fl_ad2_11 = analog2[0];
 800a844:	4b7e      	ldr	r3, [pc, #504]	; (800aa40 <ADC_Get_Data+0x214>)
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	b21a      	sxth	r2, r3
 800a84a:	4b7e      	ldr	r3, [pc, #504]	; (800aa44 <ADC_Get_Data+0x218>)
 800a84c:	801a      	strh	r2, [r3, #0]
		sr_ad2_15 = analog2[1];
 800a84e:	4b7c      	ldr	r3, [pc, #496]	; (800aa40 <ADC_Get_Data+0x214>)
 800a850:	885b      	ldrh	r3, [r3, #2]
 800a852:	b21a      	sxth	r2, r3
 800a854:	4b7c      	ldr	r3, [pc, #496]	; (800aa48 <ADC_Get_Data+0x21c>)
 800a856:	801a      	strh	r2, [r3, #0]

	    sl_error = abs(sl_path - sl_ad1_10);
 800a858:	4b7c      	ldr	r3, [pc, #496]	; (800aa4c <ADC_Get_Data+0x220>)
 800a85a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a85e:	461a      	mov	r2, r3
 800a860:	4b75      	ldr	r3, [pc, #468]	; (800aa38 <ADC_Get_Data+0x20c>)
 800a862:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	2b00      	cmp	r3, #0
 800a86a:	bfb8      	it	lt
 800a86c:	425b      	neglt	r3, r3
 800a86e:	b21a      	sxth	r2, r3
 800a870:	4b77      	ldr	r3, [pc, #476]	; (800aa50 <ADC_Get_Data+0x224>)
 800a872:	801a      	strh	r2, [r3, #0]
		fr_error = abs(fr_path - fr_ad1_14);
 800a874:	4b77      	ldr	r3, [pc, #476]	; (800aa54 <ADC_Get_Data+0x228>)
 800a876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a87a:	461a      	mov	r2, r3
 800a87c:	4b6f      	ldr	r3, [pc, #444]	; (800aa3c <ADC_Get_Data+0x210>)
 800a87e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	2b00      	cmp	r3, #0
 800a886:	bfb8      	it	lt
 800a888:	425b      	neglt	r3, r3
 800a88a:	b21a      	sxth	r2, r3
 800a88c:	4b72      	ldr	r3, [pc, #456]	; (800aa58 <ADC_Get_Data+0x22c>)
 800a88e:	801a      	strh	r2, [r3, #0]
	    fl_error = abs(fl_path - fl_ad2_11);
 800a890:	4b72      	ldr	r3, [pc, #456]	; (800aa5c <ADC_Get_Data+0x230>)
 800a892:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a896:	461a      	mov	r2, r3
 800a898:	4b6a      	ldr	r3, [pc, #424]	; (800aa44 <ADC_Get_Data+0x218>)
 800a89a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	bfb8      	it	lt
 800a8a4:	425b      	neglt	r3, r3
 800a8a6:	b21a      	sxth	r2, r3
 800a8a8:	4b6d      	ldr	r3, [pc, #436]	; (800aa60 <ADC_Get_Data+0x234>)
 800a8aa:	801a      	strh	r2, [r3, #0]
	    sr_error = abs(sr_path - sr_ad2_15);
 800a8ac:	4b6d      	ldr	r3, [pc, #436]	; (800aa64 <ADC_Get_Data+0x238>)
 800a8ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	4b64      	ldr	r3, [pc, #400]	; (800aa48 <ADC_Get_Data+0x21c>)
 800a8b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	bfb8      	it	lt
 800a8c0:	425b      	neglt	r3, r3
 800a8c2:	b21a      	sxth	r2, r3
 800a8c4:	4b68      	ldr	r3, [pc, #416]	; (800aa68 <ADC_Get_Data+0x23c>)
 800a8c6:	801a      	strh	r2, [r3, #0]

	    sl_path = sl_ad1_10;
 800a8c8:	4b5b      	ldr	r3, [pc, #364]	; (800aa38 <ADC_Get_Data+0x20c>)
 800a8ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a8ce:	4b5f      	ldr	r3, [pc, #380]	; (800aa4c <ADC_Get_Data+0x220>)
 800a8d0:	801a      	strh	r2, [r3, #0]
	    fr_path = fr_ad1_14;
 800a8d2:	4b5a      	ldr	r3, [pc, #360]	; (800aa3c <ADC_Get_Data+0x210>)
 800a8d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a8d8:	4b5e      	ldr	r3, [pc, #376]	; (800aa54 <ADC_Get_Data+0x228>)
 800a8da:	801a      	strh	r2, [r3, #0]
	    fl_path = fl_ad2_11;
 800a8dc:	4b59      	ldr	r3, [pc, #356]	; (800aa44 <ADC_Get_Data+0x218>)
 800a8de:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a8e2:	4b5e      	ldr	r3, [pc, #376]	; (800aa5c <ADC_Get_Data+0x230>)
 800a8e4:	801a      	strh	r2, [r3, #0]
		sr_path = sr_ad2_15;
 800a8e6:	4b58      	ldr	r3, [pc, #352]	; (800aa48 <ADC_Get_Data+0x21c>)
 800a8e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a8ec:	4b5d      	ldr	r3, [pc, #372]	; (800aa64 <ADC_Get_Data+0x238>)
 800a8ee:	801a      	strh	r2, [r3, #0]

		battery_V = analog1[2];
 800a8f0:	4b50      	ldr	r3, [pc, #320]	; (800aa34 <ADC_Get_Data+0x208>)
 800a8f2:	889b      	ldrh	r3, [r3, #4]
 800a8f4:	ee07 3a90 	vmov	s15, r3
 800a8f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8fc:	4b5b      	ldr	r3, [pc, #364]	; (800aa6c <ADC_Get_Data+0x240>)
 800a8fe:	edc3 7a00 	vstr	s15, [r3]
#if 1
		sl_integrate += sl_error;
 800a902:	4b5b      	ldr	r3, [pc, #364]	; (800aa70 <ADC_Get_Data+0x244>)
 800a904:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a908:	b29a      	uxth	r2, r3
 800a90a:	4b51      	ldr	r3, [pc, #324]	; (800aa50 <ADC_Get_Data+0x224>)
 800a90c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a910:	b29b      	uxth	r3, r3
 800a912:	4413      	add	r3, r2
 800a914:	b29b      	uxth	r3, r3
 800a916:	b21a      	sxth	r2, r3
 800a918:	4b55      	ldr	r3, [pc, #340]	; (800aa70 <ADC_Get_Data+0x244>)
 800a91a:	801a      	strh	r2, [r3, #0]
		fr_integrate += fr_error;
 800a91c:	4b55      	ldr	r3, [pc, #340]	; (800aa74 <ADC_Get_Data+0x248>)
 800a91e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a922:	b29a      	uxth	r2, r3
 800a924:	4b4c      	ldr	r3, [pc, #304]	; (800aa58 <ADC_Get_Data+0x22c>)
 800a926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	4413      	add	r3, r2
 800a92e:	b29b      	uxth	r3, r3
 800a930:	b21a      	sxth	r2, r3
 800a932:	4b50      	ldr	r3, [pc, #320]	; (800aa74 <ADC_Get_Data+0x248>)
 800a934:	801a      	strh	r2, [r3, #0]
		fl_integrate += fl_error;
 800a936:	4b50      	ldr	r3, [pc, #320]	; (800aa78 <ADC_Get_Data+0x24c>)
 800a938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	4b48      	ldr	r3, [pc, #288]	; (800aa60 <ADC_Get_Data+0x234>)
 800a940:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a944:	b29b      	uxth	r3, r3
 800a946:	4413      	add	r3, r2
 800a948:	b29b      	uxth	r3, r3
 800a94a:	b21a      	sxth	r2, r3
 800a94c:	4b4a      	ldr	r3, [pc, #296]	; (800aa78 <ADC_Get_Data+0x24c>)
 800a94e:	801a      	strh	r2, [r3, #0]
		sr_integrate += sr_error;
 800a950:	4b4a      	ldr	r3, [pc, #296]	; (800aa7c <ADC_Get_Data+0x250>)
 800a952:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a956:	b29a      	uxth	r2, r3
 800a958:	4b43      	ldr	r3, [pc, #268]	; (800aa68 <ADC_Get_Data+0x23c>)
 800a95a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a95e:	b29b      	uxth	r3, r3
 800a960:	4413      	add	r3, r2
 800a962:	b29b      	uxth	r3, r3
 800a964:	b21a      	sxth	r2, r3
 800a966:	4b45      	ldr	r3, [pc, #276]	; (800aa7c <ADC_Get_Data+0x250>)
 800a968:	801a      	strh	r2, [r3, #0]

		count ++;
 800a96a:	4b45      	ldr	r3, [pc, #276]	; (800aa80 <ADC_Get_Data+0x254>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	3301      	adds	r3, #1
 800a970:	4a43      	ldr	r2, [pc, #268]	; (800aa80 <ADC_Get_Data+0x254>)
 800a972:	6013      	str	r3, [r2, #0]
		if(count == 10){
 800a974:	4b42      	ldr	r3, [pc, #264]	; (800aa80 <ADC_Get_Data+0x254>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2b0a      	cmp	r3, #10
 800a97a:	d156      	bne.n	800aa2a <ADC_Get_Data+0x1fe>
			sl_average = (float)sl_integrate / count;
 800a97c:	4b3c      	ldr	r3, [pc, #240]	; (800aa70 <ADC_Get_Data+0x244>)
 800a97e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a982:	ee07 3a90 	vmov	s15, r3
 800a986:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a98a:	4b3d      	ldr	r3, [pc, #244]	; (800aa80 <ADC_Get_Data+0x254>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	ee07 3a90 	vmov	s15, r3
 800a992:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a99a:	4b3a      	ldr	r3, [pc, #232]	; (800aa84 <ADC_Get_Data+0x258>)
 800a99c:	edc3 7a00 	vstr	s15, [r3]
			fr_average = (float)fr_integrate / count;
 800a9a0:	4b34      	ldr	r3, [pc, #208]	; (800aa74 <ADC_Get_Data+0x248>)
 800a9a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9a6:	ee07 3a90 	vmov	s15, r3
 800a9aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a9ae:	4b34      	ldr	r3, [pc, #208]	; (800aa80 <ADC_Get_Data+0x254>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	ee07 3a90 	vmov	s15, r3
 800a9b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a9ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9be:	4b32      	ldr	r3, [pc, #200]	; (800aa88 <ADC_Get_Data+0x25c>)
 800a9c0:	edc3 7a00 	vstr	s15, [r3]
			fl_average = (float)fl_integrate / count;
 800a9c4:	4b2c      	ldr	r3, [pc, #176]	; (800aa78 <ADC_Get_Data+0x24c>)
 800a9c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9ca:	ee07 3a90 	vmov	s15, r3
 800a9ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a9d2:	4b2b      	ldr	r3, [pc, #172]	; (800aa80 <ADC_Get_Data+0x254>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	ee07 3a90 	vmov	s15, r3
 800a9da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a9de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9e2:	4b2a      	ldr	r3, [pc, #168]	; (800aa8c <ADC_Get_Data+0x260>)
 800a9e4:	edc3 7a00 	vstr	s15, [r3]
			sr_average = (float)sr_integrate / count;
 800a9e8:	4b24      	ldr	r3, [pc, #144]	; (800aa7c <ADC_Get_Data+0x250>)
 800a9ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a9f6:	4b22      	ldr	r3, [pc, #136]	; (800aa80 <ADC_Get_Data+0x254>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	ee07 3a90 	vmov	s15, r3
 800a9fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa06:	4b22      	ldr	r3, [pc, #136]	; (800aa90 <ADC_Get_Data+0x264>)
 800aa08:	edc3 7a00 	vstr	s15, [r3]


			sl_integrate = 0;
 800aa0c:	4b18      	ldr	r3, [pc, #96]	; (800aa70 <ADC_Get_Data+0x244>)
 800aa0e:	2200      	movs	r2, #0
 800aa10:	801a      	strh	r2, [r3, #0]
			fr_integrate = 0;
 800aa12:	4b18      	ldr	r3, [pc, #96]	; (800aa74 <ADC_Get_Data+0x248>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	801a      	strh	r2, [r3, #0]
			fl_integrate = 0;
 800aa18:	4b17      	ldr	r3, [pc, #92]	; (800aa78 <ADC_Get_Data+0x24c>)
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	801a      	strh	r2, [r3, #0]
			sr_integrate = 0;
 800aa1e:	4b17      	ldr	r3, [pc, #92]	; (800aa7c <ADC_Get_Data+0x250>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	801a      	strh	r2, [r3, #0]

			count = 0;
 800aa24:	4b16      	ldr	r3, [pc, #88]	; (800aa80 <ADC_Get_Data+0x254>)
 800aa26:	2200      	movs	r2, #0
 800aa28:	601a      	str	r2, [r3, #0]
=======
 800a7cc:	4b8c      	ldr	r3, [pc, #560]	; (800aa00 <ADC_Get_Data+0x238>)
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	b21a      	sxth	r2, r3
 800a7d2:	4b8c      	ldr	r3, [pc, #560]	; (800aa04 <ADC_Get_Data+0x23c>)
 800a7d4:	801a      	strh	r2, [r3, #0]
		fr_ad1_14 = analog1[1];
 800a7d6:	4b8a      	ldr	r3, [pc, #552]	; (800aa00 <ADC_Get_Data+0x238>)
 800a7d8:	885b      	ldrh	r3, [r3, #2]
 800a7da:	b21a      	sxth	r2, r3
 800a7dc:	4b8a      	ldr	r3, [pc, #552]	; (800aa08 <ADC_Get_Data+0x240>)
 800a7de:	801a      	strh	r2, [r3, #0]
		fl_ad2_11 = analog2[0];
 800a7e0:	4b8a      	ldr	r3, [pc, #552]	; (800aa0c <ADC_Get_Data+0x244>)
 800a7e2:	881b      	ldrh	r3, [r3, #0]
 800a7e4:	b21a      	sxth	r2, r3
 800a7e6:	4b8a      	ldr	r3, [pc, #552]	; (800aa10 <ADC_Get_Data+0x248>)
 800a7e8:	801a      	strh	r2, [r3, #0]
		sr_ad2_15 = analog2[1];
 800a7ea:	4b88      	ldr	r3, [pc, #544]	; (800aa0c <ADC_Get_Data+0x244>)
 800a7ec:	885b      	ldrh	r3, [r3, #2]
 800a7ee:	b21a      	sxth	r2, r3
 800a7f0:	4b88      	ldr	r3, [pc, #544]	; (800aa14 <ADC_Get_Data+0x24c>)
 800a7f2:	801a      	strh	r2, [r3, #0]

	    sl_error = abs(sl_path - sl_ad1_10);
 800a7f4:	4b88      	ldr	r3, [pc, #544]	; (800aa18 <ADC_Get_Data+0x250>)
 800a7f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	4b81      	ldr	r3, [pc, #516]	; (800aa04 <ADC_Get_Data+0x23c>)
 800a7fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	2b00      	cmp	r3, #0
 800a806:	bfb8      	it	lt
 800a808:	425b      	neglt	r3, r3
 800a80a:	b21a      	sxth	r2, r3
 800a80c:	4b83      	ldr	r3, [pc, #524]	; (800aa1c <ADC_Get_Data+0x254>)
 800a80e:	801a      	strh	r2, [r3, #0]
		fr_error = abs(fr_path - fr_ad1_14);
 800a810:	4b83      	ldr	r3, [pc, #524]	; (800aa20 <ADC_Get_Data+0x258>)
 800a812:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a816:	461a      	mov	r2, r3
 800a818:	4b7b      	ldr	r3, [pc, #492]	; (800aa08 <ADC_Get_Data+0x240>)
 800a81a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	2b00      	cmp	r3, #0
 800a822:	bfb8      	it	lt
 800a824:	425b      	neglt	r3, r3
 800a826:	b21a      	sxth	r2, r3
 800a828:	4b7e      	ldr	r3, [pc, #504]	; (800aa24 <ADC_Get_Data+0x25c>)
 800a82a:	801a      	strh	r2, [r3, #0]
	    fl_error = abs(fl_path - fl_ad2_11);
 800a82c:	4b7e      	ldr	r3, [pc, #504]	; (800aa28 <ADC_Get_Data+0x260>)
 800a82e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a832:	461a      	mov	r2, r3
 800a834:	4b76      	ldr	r3, [pc, #472]	; (800aa10 <ADC_Get_Data+0x248>)
 800a836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	bfb8      	it	lt
 800a840:	425b      	neglt	r3, r3
 800a842:	b21a      	sxth	r2, r3
 800a844:	4b79      	ldr	r3, [pc, #484]	; (800aa2c <ADC_Get_Data+0x264>)
 800a846:	801a      	strh	r2, [r3, #0]
	    sr_error = abs(sr_path - sr_ad2_15);
 800a848:	4b79      	ldr	r3, [pc, #484]	; (800aa30 <ADC_Get_Data+0x268>)
 800a84a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a84e:	461a      	mov	r2, r3
 800a850:	4b70      	ldr	r3, [pc, #448]	; (800aa14 <ADC_Get_Data+0x24c>)
 800a852:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a856:	1ad3      	subs	r3, r2, r3
 800a858:	2b00      	cmp	r3, #0
 800a85a:	bfb8      	it	lt
 800a85c:	425b      	neglt	r3, r3
 800a85e:	b21a      	sxth	r2, r3
 800a860:	4b74      	ldr	r3, [pc, #464]	; (800aa34 <ADC_Get_Data+0x26c>)
 800a862:	801a      	strh	r2, [r3, #0]

	    sl_path = sl_ad1_10;
 800a864:	4b67      	ldr	r3, [pc, #412]	; (800aa04 <ADC_Get_Data+0x23c>)
 800a866:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a86a:	4b6b      	ldr	r3, [pc, #428]	; (800aa18 <ADC_Get_Data+0x250>)
 800a86c:	801a      	strh	r2, [r3, #0]
	    fr_path = fr_ad1_14;
 800a86e:	4b66      	ldr	r3, [pc, #408]	; (800aa08 <ADC_Get_Data+0x240>)
 800a870:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a874:	4b6a      	ldr	r3, [pc, #424]	; (800aa20 <ADC_Get_Data+0x258>)
 800a876:	801a      	strh	r2, [r3, #0]
	    fl_path = fl_ad2_11;
 800a878:	4b65      	ldr	r3, [pc, #404]	; (800aa10 <ADC_Get_Data+0x248>)
 800a87a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a87e:	4b6a      	ldr	r3, [pc, #424]	; (800aa28 <ADC_Get_Data+0x260>)
 800a880:	801a      	strh	r2, [r3, #0]
		sr_path = sr_ad2_15;
 800a882:	4b64      	ldr	r3, [pc, #400]	; (800aa14 <ADC_Get_Data+0x24c>)
 800a884:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a888:	4b69      	ldr	r3, [pc, #420]	; (800aa30 <ADC_Get_Data+0x268>)
 800a88a:	801a      	strh	r2, [r3, #0]

		battery_V = 3*analog1[2]*3.3/4096;
 800a88c:	4b5c      	ldr	r3, [pc, #368]	; (800aa00 <ADC_Get_Data+0x238>)
 800a88e:	889b      	ldrh	r3, [r3, #4]
 800a890:	461a      	mov	r2, r3
 800a892:	4613      	mov	r3, r2
 800a894:	005b      	lsls	r3, r3, #1
 800a896:	4413      	add	r3, r2
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fd fd7b 	bl	8008394 <__aeabi_i2d>
 800a89e:	a356      	add	r3, pc, #344	; (adr r3, 800a9f8 <ADC_Get_Data+0x230>)
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	f7fd fde0 	bl	8008468 <__aeabi_dmul>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	460c      	mov	r4, r1
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	f04f 0200 	mov.w	r2, #0
 800a8b4:	4b60      	ldr	r3, [pc, #384]	; (800aa38 <ADC_Get_Data+0x270>)
 800a8b6:	f7fd ff01 	bl	80086bc <__aeabi_ddiv>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	460c      	mov	r4, r1
 800a8be:	4618      	mov	r0, r3
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	f7fe f8a9 	bl	8008a18 <__aeabi_d2f>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	4b5c      	ldr	r3, [pc, #368]	; (800aa3c <ADC_Get_Data+0x274>)
 800a8ca:	601a      	str	r2, [r3, #0]
#if 1
		sl_integrate += sl_error;
 800a8cc:	4b5c      	ldr	r3, [pc, #368]	; (800aa40 <ADC_Get_Data+0x278>)
 800a8ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	4b51      	ldr	r3, [pc, #324]	; (800aa1c <ADC_Get_Data+0x254>)
 800a8d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	4413      	add	r3, r2
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	b21a      	sxth	r2, r3
 800a8e2:	4b57      	ldr	r3, [pc, #348]	; (800aa40 <ADC_Get_Data+0x278>)
 800a8e4:	801a      	strh	r2, [r3, #0]
		fr_integrate += fr_error;
 800a8e6:	4b57      	ldr	r3, [pc, #348]	; (800aa44 <ADC_Get_Data+0x27c>)
 800a8e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	4b4d      	ldr	r3, [pc, #308]	; (800aa24 <ADC_Get_Data+0x25c>)
 800a8f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	4413      	add	r3, r2
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	b21a      	sxth	r2, r3
 800a8fc:	4b51      	ldr	r3, [pc, #324]	; (800aa44 <ADC_Get_Data+0x27c>)
 800a8fe:	801a      	strh	r2, [r3, #0]
		fl_integrate += fl_error;
 800a900:	4b51      	ldr	r3, [pc, #324]	; (800aa48 <ADC_Get_Data+0x280>)
 800a902:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a906:	b29a      	uxth	r2, r3
 800a908:	4b48      	ldr	r3, [pc, #288]	; (800aa2c <ADC_Get_Data+0x264>)
 800a90a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a90e:	b29b      	uxth	r3, r3
 800a910:	4413      	add	r3, r2
 800a912:	b29b      	uxth	r3, r3
 800a914:	b21a      	sxth	r2, r3
 800a916:	4b4c      	ldr	r3, [pc, #304]	; (800aa48 <ADC_Get_Data+0x280>)
 800a918:	801a      	strh	r2, [r3, #0]
		sr_integrate += sr_error;
 800a91a:	4b4c      	ldr	r3, [pc, #304]	; (800aa4c <ADC_Get_Data+0x284>)
 800a91c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a920:	b29a      	uxth	r2, r3
 800a922:	4b44      	ldr	r3, [pc, #272]	; (800aa34 <ADC_Get_Data+0x26c>)
 800a924:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	4413      	add	r3, r2
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	b21a      	sxth	r2, r3
 800a930:	4b46      	ldr	r3, [pc, #280]	; (800aa4c <ADC_Get_Data+0x284>)
 800a932:	801a      	strh	r2, [r3, #0]

		count ++;
 800a934:	4b46      	ldr	r3, [pc, #280]	; (800aa50 <ADC_Get_Data+0x288>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	3301      	adds	r3, #1
 800a93a:	4a45      	ldr	r2, [pc, #276]	; (800aa50 <ADC_Get_Data+0x288>)
 800a93c:	6013      	str	r3, [r2, #0]
		if(count == 10){
 800a93e:	4b44      	ldr	r3, [pc, #272]	; (800aa50 <ADC_Get_Data+0x288>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2b0a      	cmp	r3, #10
 800a944:	d156      	bne.n	800a9f4 <ADC_Get_Data+0x22c>
			sl_average = (float)sl_integrate / count;
 800a946:	4b3e      	ldr	r3, [pc, #248]	; (800aa40 <ADC_Get_Data+0x278>)
 800a948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a94c:	ee07 3a90 	vmov	s15, r3
 800a950:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a954:	4b3e      	ldr	r3, [pc, #248]	; (800aa50 <ADC_Get_Data+0x288>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	ee07 3a90 	vmov	s15, r3
 800a95c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a964:	4b3b      	ldr	r3, [pc, #236]	; (800aa54 <ADC_Get_Data+0x28c>)
 800a966:	edc3 7a00 	vstr	s15, [r3]
			fr_average = (float)fr_integrate / count;
 800a96a:	4b36      	ldr	r3, [pc, #216]	; (800aa44 <ADC_Get_Data+0x27c>)
 800a96c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a970:	ee07 3a90 	vmov	s15, r3
 800a974:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a978:	4b35      	ldr	r3, [pc, #212]	; (800aa50 <ADC_Get_Data+0x288>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	ee07 3a90 	vmov	s15, r3
 800a980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a988:	4b33      	ldr	r3, [pc, #204]	; (800aa58 <ADC_Get_Data+0x290>)
 800a98a:	edc3 7a00 	vstr	s15, [r3]
			fl_average = (float)fl_integrate / count;
 800a98e:	4b2e      	ldr	r3, [pc, #184]	; (800aa48 <ADC_Get_Data+0x280>)
 800a990:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a994:	ee07 3a90 	vmov	s15, r3
 800a998:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a99c:	4b2c      	ldr	r3, [pc, #176]	; (800aa50 <ADC_Get_Data+0x288>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	ee07 3a90 	vmov	s15, r3
 800a9a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a9a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9ac:	4b2b      	ldr	r3, [pc, #172]	; (800aa5c <ADC_Get_Data+0x294>)
 800a9ae:	edc3 7a00 	vstr	s15, [r3]
			sr_average = (float)sr_integrate / count;
 800a9b2:	4b26      	ldr	r3, [pc, #152]	; (800aa4c <ADC_Get_Data+0x284>)
 800a9b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9b8:	ee07 3a90 	vmov	s15, r3
 800a9bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a9c0:	4b23      	ldr	r3, [pc, #140]	; (800aa50 <ADC_Get_Data+0x288>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	ee07 3a90 	vmov	s15, r3
 800a9c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a9cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9d0:	4b23      	ldr	r3, [pc, #140]	; (800aa60 <ADC_Get_Data+0x298>)
 800a9d2:	edc3 7a00 	vstr	s15, [r3]


			sl_integrate = 0;
 800a9d6:	4b1a      	ldr	r3, [pc, #104]	; (800aa40 <ADC_Get_Data+0x278>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	801a      	strh	r2, [r3, #0]
			fr_integrate = 0;
 800a9dc:	4b19      	ldr	r3, [pc, #100]	; (800aa44 <ADC_Get_Data+0x27c>)
 800a9de:	2200      	movs	r2, #0
 800a9e0:	801a      	strh	r2, [r3, #0]
			fl_integrate = 0;
 800a9e2:	4b19      	ldr	r3, [pc, #100]	; (800aa48 <ADC_Get_Data+0x280>)
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	801a      	strh	r2, [r3, #0]
			sr_integrate = 0;
 800a9e8:	4b18      	ldr	r3, [pc, #96]	; (800aa4c <ADC_Get_Data+0x284>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	801a      	strh	r2, [r3, #0]

			count = 0;
 800a9ee:	4b18      	ldr	r3, [pc, #96]	; (800aa50 <ADC_Get_Data+0x288>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
		}

#endif
}
<<<<<<< HEAD
 800aa2a:	bf00      	nop
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	20009f60 	.word	0x20009f60
 800aa38:	2000e11c 	.word	0x2000e11c
 800aa3c:	2000001c 	.word	0x2000001c
 800aa40:	20009f68 	.word	0x20009f68
 800aa44:	20009f6e 	.word	0x20009f6e
 800aa48:	2001a73a 	.word	0x2001a73a
 800aa4c:	2000e120 	.word	0x2000e120
 800aa50:	2000e11e 	.word	0x2000e11e
 800aa54:	20009f72 	.word	0x20009f72
 800aa58:	20009f74 	.word	0x20009f74
 800aa5c:	20009f70 	.word	0x20009f70
 800aa60:	20009f76 	.word	0x20009f76
 800aa64:	2000e048 	.word	0x2000e048
 800aa68:	20019cec 	.word	0x20019cec
 800aa6c:	2001a7b4 	.word	0x2001a7b4
 800aa70:	20019ca6 	.word	0x20019ca6
 800aa74:	20019dd8 	.word	0x20019dd8
 800aa78:	20019d8c 	.word	0x20019d8c
 800aa7c:	20019d30 	.word	0x20019d30
 800aa80:	2000dfe0 	.word	0x2000dfe0
 800aa84:	2001a7a0 	.word	0x2001a7a0
 800aa88:	2001a6d0 	.word	0x2001a6d0
 800aa8c:	2000e04c 	.word	0x2000e04c
 800aa90:	20019ca8 	.word	0x20019ca8

0800aa94 <Velocity_Get>:
float Velocity_Get(float EN, float T){ // TIM2,TIM5の割り込み周
 800aa94:	b480      	push	{r7}
 800aa96:	b087      	sub	sp, #28
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	ed87 0a01 	vstr	s0, [r7, #4]
 800aa9e:	edc7 0a00 	vstr	s1, [r7]
=======
 800a9f4:	bf00      	nop
 800a9f6:	bd98      	pop	{r3, r4, r7, pc}
 800a9f8:	66666666 	.word	0x66666666
 800a9fc:	400a6666 	.word	0x400a6666
 800aa00:	20000fb8 	.word	0x20000fb8
 800aa04:	2000515c 	.word	0x2000515c
 800aa08:	20000028 	.word	0x20000028
 800aa0c:	20000fc0 	.word	0x20000fc0
 800aa10:	20000fc6 	.word	0x20000fc6
 800aa14:	200165c2 	.word	0x200165c2
 800aa18:	20005160 	.word	0x20005160
 800aa1c:	2000515e 	.word	0x2000515e
 800aa20:	20000fca 	.word	0x20000fca
 800aa24:	20000fcc 	.word	0x20000fcc
 800aa28:	20000fc8 	.word	0x20000fc8
 800aa2c:	20000fce 	.word	0x20000fce
 800aa30:	20005088 	.word	0x20005088
 800aa34:	20015b74 	.word	0x20015b74
 800aa38:	40b00000 	.word	0x40b00000
 800aa3c:	2001663c 	.word	0x2001663c
 800aa40:	20015b2e 	.word	0x20015b2e
 800aa44:	20015c60 	.word	0x20015c60
 800aa48:	20015c14 	.word	0x20015c14
 800aa4c:	20015bb8 	.word	0x20015bb8
 800aa50:	20005028 	.word	0x20005028
 800aa54:	20016628 	.word	0x20016628
 800aa58:	20016558 	.word	0x20016558
 800aa5c:	2000508c 	.word	0x2000508c
 800aa60:	20015b30 	.word	0x20015b30

0800aa64 <Velocity_Get>:
float Velocity_Get(float EN, float T){ // TIM2,TIM5の割り込み周
 800aa64:	b480      	push	{r7}
 800aa66:	b087      	sub	sp, #28
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	ed87 0a01 	vstr	s0, [r7, #4]
 800aa6e:	edc7 0a00 	vstr	s1, [r7]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

 float Circumference, TirePulse_of_Circumference, velocity;

    Circumference = TIRE_DEAMETER * PI; // 周
<<<<<<< HEAD
 800aaa2:	4b0f      	ldr	r3, [pc, #60]	; (800aae0 <Velocity_Get+0x4c>)
 800aaa4:	617b      	str	r3, [r7, #20]
    TirePulse_of_Circumference = ENCODER_PULSE * REDUCATION_RATIO; // タイヤ周のパルス
 800aaa6:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 800aaaa:	613b      	str	r3, [r7, #16]
    velocity = EN * (Circumference /TirePulse_of_Circumference)/ T; //a 1パルスで進距離 * パルス数/制御周
 800aaac:	edd7 6a05 	vldr	s13, [r7, #20]
 800aab0:	edd7 7a04 	vldr	s15, [r7, #16]
 800aab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aab8:	edd7 7a01 	vldr	s15, [r7, #4]
 800aabc:	ee67 6a27 	vmul.f32	s13, s14, s15
 800aac0:	ed97 7a00 	vldr	s14, [r7]
 800aac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aac8:	edc7 7a03 	vstr	s15, [r7, #12]

    return velocity;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	ee07 3a90 	vmov	s15, r3

	 //TIM3 or 4 // 0.0012329102 = ( 20.2mm *) / (4096 * 4)
}
 800aad2:	eeb0 0a67 	vmov.f32	s0, s15
 800aad6:	371c      	adds	r7, #28
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr
 800aae0:	42821f0e 	.word	0x42821f0e

0800aae4 <Encoder_Reset>:
=======
 800aa72:	4b0f      	ldr	r3, [pc, #60]	; (800aab0 <Velocity_Get+0x4c>)
 800aa74:	617b      	str	r3, [r7, #20]
    TirePulse_of_Circumference = ENCODER_PULSE * REDUCATION_RATIO; // タイヤ周のパルス
 800aa76:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 800aa7a:	613b      	str	r3, [r7, #16]
    velocity = EN * (Circumference /TirePulse_of_Circumference)/ T; //a 1パルスで進距離 * パルス数/制御周
 800aa7c:	edd7 6a05 	vldr	s13, [r7, #20]
 800aa80:	edd7 7a04 	vldr	s15, [r7, #16]
 800aa84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa88:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa8c:	ee67 6a27 	vmul.f32	s13, s14, s15
 800aa90:	ed97 7a00 	vldr	s14, [r7]
 800aa94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa98:	edc7 7a03 	vstr	s15, [r7, #12]

    return velocity;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	ee07 3a90 	vmov	s15, r3

	 //TIM3 or 4 // 0.0012329102 = ( 20.2mm *) / (4096 * 4)
}
 800aaa2:	eeb0 0a67 	vmov.f32	s0, s15
 800aaa6:	371c      	adds	r7, #28
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr
 800aab0:	42821f0e 	.word	0x42821f0e

0800aab4 <Encoder_Reset>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac


}


void Encoder_Reset(){
<<<<<<< HEAD
 800aae4:	b480      	push	{r7}
 800aae6:	af00      	add	r7, sp, #0
    TIM3 -> CNT = 30000 - 1;
 800aae8:	4b06      	ldr	r3, [pc, #24]	; (800ab04 <Encoder_Reset+0x20>)
 800aaea:	f247 522f 	movw	r2, #29999	; 0x752f
 800aaee:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = 30000 - 1;
 800aaf0:	4b05      	ldr	r3, [pc, #20]	; (800ab08 <Encoder_Reset+0x24>)
 800aaf2:	f247 522f 	movw	r2, #29999	; 0x752f
 800aaf6:	625a      	str	r2, [r3, #36]	; 0x24

}
 800aaf8:	bf00      	nop
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	40000400 	.word	0x40000400
 800ab08:	40000800 	.word	0x40000800

0800ab0c <Encoder_Count>:
int16_t Encoder_Count(int16_t mode){
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	4603      	mov	r3, r0
 800ab14:	80fb      	strh	r3, [r7, #6]

	if(mode == 0){
 800ab16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d102      	bne.n	800ab24 <Encoder_Count+0x18>

		mode = 0;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	80fb      	strh	r3, [r7, #6]
 800ab22:	e030      	b.n	800ab86 <Encoder_Count+0x7a>
	  }
	  else if(mode == 1){
 800ab24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d12c      	bne.n	800ab86 <Encoder_Count+0x7a>
	    EN3_L.integrate += EN3_L.count;
 800ab2c:	4b1a      	ldr	r3, [pc, #104]	; (800ab98 <Encoder_Count+0x8c>)
 800ab2e:	685a      	ldr	r2, [r3, #4]
 800ab30:	4b19      	ldr	r3, [pc, #100]	; (800ab98 <Encoder_Count+0x8c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4413      	add	r3, r2
 800ab36:	4a18      	ldr	r2, [pc, #96]	; (800ab98 <Encoder_Count+0x8c>)
 800ab38:	6053      	str	r3, [r2, #4]
	    EN4_R.integrate += EN4_R.count;
 800ab3a:	4b18      	ldr	r3, [pc, #96]	; (800ab9c <Encoder_Count+0x90>)
 800ab3c:	685a      	ldr	r2, [r3, #4]
 800ab3e:	4b17      	ldr	r3, [pc, #92]	; (800ab9c <Encoder_Count+0x90>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4413      	add	r3, r2
 800ab44:	4a15      	ldr	r2, [pc, #84]	; (800ab9c <Encoder_Count+0x90>)
 800ab46:	6053      	str	r3, [r2, #4]
	    EN_Body.integrate = (float)(EN3_L.integrate + EN4_R.integrate)/2;
 800ab48:	4b13      	ldr	r3, [pc, #76]	; (800ab98 <Encoder_Count+0x8c>)
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	4b13      	ldr	r3, [pc, #76]	; (800ab9c <Encoder_Count+0x90>)
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	4413      	add	r3, r2
 800ab52:	ee07 3a90 	vmov	s15, r3
 800ab56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ab5a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ab5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ab62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab66:	ee17 2a90 	vmov	r2, s15
 800ab6a:	4b0d      	ldr	r3, [pc, #52]	; (800aba0 <Encoder_Count+0x94>)
 800ab6c:	605a      	str	r2, [r3, #4]
	    All_Pulse_cut += EN3_L.count + EN4_R.count;
 800ab6e:	4b0a      	ldr	r3, [pc, #40]	; (800ab98 <Encoder_Count+0x8c>)
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	4b0a      	ldr	r3, [pc, #40]	; (800ab9c <Encoder_Count+0x90>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	441a      	add	r2, r3
 800ab78:	4b0a      	ldr	r3, [pc, #40]	; (800aba4 <Encoder_Count+0x98>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	4a09      	ldr	r2, [pc, #36]	; (800aba4 <Encoder_Count+0x98>)
 800ab80:	6013      	str	r3, [r2, #0]
	    mode =1;
 800ab82:	2301      	movs	r3, #1
 800ab84:	80fb      	strh	r3, [r7, #6]

	  }
	return mode;
 800ab86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	20000044 	.word	0x20000044
 800ab9c:	20000050 	.word	0x20000050
 800aba0:	2000005c 	.word	0x2000005c
 800aba4:	20000318 	.word	0x20000318

0800aba8 <Start_Accel>:
//o グローバル変数の処
//o 走行用の関数
=======
 800aab4:	b480      	push	{r7}
 800aab6:	af00      	add	r7, sp, #0
    TIM3 -> CNT = 30000 - 1;
 800aab8:	4b06      	ldr	r3, [pc, #24]	; (800aad4 <Encoder_Reset+0x20>)
 800aaba:	f247 522f 	movw	r2, #29999	; 0x752f
 800aabe:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = 30000 - 1;
 800aac0:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <Encoder_Reset+0x24>)
 800aac2:	f247 522f 	movw	r2, #29999	; 0x752f
 800aac6:	625a      	str	r2, [r3, #36]	; 0x24

}
 800aac8:	bf00      	nop
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	40000400 	.word	0x40000400
 800aad8:	40000800 	.word	0x40000800

0800aadc <Encoder_Count>:
int16_t Encoder_Count(int16_t mode){
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	80fb      	strh	r3, [r7, #6]

	if(mode == 0){
 800aae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d102      	bne.n	800aaf4 <Encoder_Count+0x18>

		mode = 0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	80fb      	strh	r3, [r7, #6]
 800aaf2:	e030      	b.n	800ab56 <Encoder_Count+0x7a>
	  }
	  else if(mode == 1){
 800aaf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d12c      	bne.n	800ab56 <Encoder_Count+0x7a>
	    EN3_L.integrate += EN3_L.count;
 800aafc:	4b1a      	ldr	r3, [pc, #104]	; (800ab68 <Encoder_Count+0x8c>)
 800aafe:	685a      	ldr	r2, [r3, #4]
 800ab00:	4b19      	ldr	r3, [pc, #100]	; (800ab68 <Encoder_Count+0x8c>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4413      	add	r3, r2
 800ab06:	4a18      	ldr	r2, [pc, #96]	; (800ab68 <Encoder_Count+0x8c>)
 800ab08:	6053      	str	r3, [r2, #4]
	    EN4_R.integrate += EN4_R.count;
 800ab0a:	4b18      	ldr	r3, [pc, #96]	; (800ab6c <Encoder_Count+0x90>)
 800ab0c:	685a      	ldr	r2, [r3, #4]
 800ab0e:	4b17      	ldr	r3, [pc, #92]	; (800ab6c <Encoder_Count+0x90>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4413      	add	r3, r2
 800ab14:	4a15      	ldr	r2, [pc, #84]	; (800ab6c <Encoder_Count+0x90>)
 800ab16:	6053      	str	r3, [r2, #4]
	    EN_Body.integrate = (float)(EN3_L.integrate + EN4_R.integrate)/2;
 800ab18:	4b13      	ldr	r3, [pc, #76]	; (800ab68 <Encoder_Count+0x8c>)
 800ab1a:	685a      	ldr	r2, [r3, #4]
 800ab1c:	4b13      	ldr	r3, [pc, #76]	; (800ab6c <Encoder_Count+0x90>)
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	4413      	add	r3, r2
 800ab22:	ee07 3a90 	vmov	s15, r3
 800ab26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ab2a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ab2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ab32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab36:	ee17 2a90 	vmov	r2, s15
 800ab3a:	4b0d      	ldr	r3, [pc, #52]	; (800ab70 <Encoder_Count+0x94>)
 800ab3c:	605a      	str	r2, [r3, #4]
	    All_Pulse_cut += EN3_L.count + EN4_R.count;
 800ab3e:	4b0a      	ldr	r3, [pc, #40]	; (800ab68 <Encoder_Count+0x8c>)
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	4b0a      	ldr	r3, [pc, #40]	; (800ab6c <Encoder_Count+0x90>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	441a      	add	r2, r3
 800ab48:	4b0a      	ldr	r3, [pc, #40]	; (800ab74 <Encoder_Count+0x98>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	4a09      	ldr	r2, [pc, #36]	; (800ab74 <Encoder_Count+0x98>)
 800ab50:	6013      	str	r3, [r2, #0]
	    mode =1;
 800ab52:	2301      	movs	r3, #1
 800ab54:	80fb      	strh	r3, [r7, #6]

	  }
	return mode;
 800ab56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	370c      	adds	r7, #12
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	20000cd0 	.word	0x20000cd0
 800ab6c:	20000cdc 	.word	0x20000cdc
 800ab70:	20000ce8 	.word	0x20000ce8
 800ab74:	20000fb0 	.word	0x20000fb0

0800ab78 <wait>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
//Motion.cとMotion.hにまとめる
//
//時間待ち関数

void wait(double wait_second)
{
 800ab78:	b590      	push	{r4, r7, lr}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	ed87 0b00 	vstr	d0, [r7]
	//グローバル変数のtimerを使う
	//いらない制御を切って待つ。か、つけっぱなし。
	//つけっぱなしのパターン
	//待った先の時間 - 現在の時間
	//待ちたい時間
	double starting_point_of_time = elapsed_time;
 800ab82:	4b0f      	ldr	r3, [pc, #60]	; (800abc0 <wait+0x48>)
 800ab84:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab88:	e9c7 3402 	strd	r3, r4, [r7, #8]
	while(starting_point_of_time + wait_second > elapsed_time)
 800ab8c:	bf00      	nop
 800ab8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab96:	f7fd fab1 	bl	80080fc <__adddf3>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	460c      	mov	r4, r1
 800ab9e:	4618      	mov	r0, r3
 800aba0:	4621      	mov	r1, r4
 800aba2:	4b07      	ldr	r3, [pc, #28]	; (800abc0 <wait+0x48>)
 800aba4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aba8:	461a      	mov	r2, r3
 800abaa:	4623      	mov	r3, r4
 800abac:	f7fd feec 	bl	8008988 <__aeabi_dcmpgt>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1eb      	bne.n	800ab8e <wait+0x16>
	{

	}

	//いらない制御を切るパターン
}
 800abb6:	bf00      	nop
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd90      	pop	{r4, r7, pc}
 800abbe:	bf00      	nop
 800abc0:	20000fa8 	.word	0x20000fa8
 800abc4:	00000000 	.word	0x00000000

0800abc8 <Start_Accel>:


void Start_Accel(){
<<<<<<< HEAD
 800aba8:	b580      	push	{r7, lr}
 800abaa:	af00      	add	r7, sp, #0
	error_reset = 0;
 800abac:	4b22      	ldr	r3, [pc, #136]	; (800ac38 <Start_Accel+0x90>)
 800abae:	2200      	movs	r2, #0
 800abb0:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800abb2:	f7fe ff0f 	bl	80099d4 <Motor_Count_Clear>
	//IMU_init();

    EN3_L.integrate = 0;
 800abb6:	4b21      	ldr	r3, [pc, #132]	; (800ac3c <Start_Accel+0x94>)
 800abb8:	2200      	movs	r2, #0
 800abba:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800abbc:	4b20      	ldr	r3, [pc, #128]	; (800ac40 <Start_Accel+0x98>)
 800abbe:	2200      	movs	r2, #0
 800abc0:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800abc2:	4b20      	ldr	r3, [pc, #128]	; (800ac44 <Start_Accel+0x9c>)
 800abc4:	2200      	movs	r2, #0
 800abc6:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800abc8:	4b1f      	ldr	r3, [pc, #124]	; (800ac48 <Start_Accel+0xa0>)
 800abca:	2201      	movs	r2, #1
 800abcc:	70da      	strb	r2, [r3, #3]

	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < START_ACCEL_PULSE * 2){
 800abce:	e005      	b.n	800abdc <Start_Accel+0x34>
		mode.control = 4;
 800abd0:	4b1d      	ldr	r3, [pc, #116]	; (800ac48 <Start_Accel+0xa0>)
 800abd2:	2204      	movs	r2, #4
 800abd4:	715a      	strb	r2, [r3, #5]
		mode.accel= 1;
 800abd6:	4b1c      	ldr	r3, [pc, #112]	; (800ac48 <Start_Accel+0xa0>)
 800abd8:	2201      	movs	r2, #1
 800abda:	705a      	strb	r2, [r3, #1]
	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < START_ACCEL_PULSE * 2){
 800abdc:	4b17      	ldr	r3, [pc, #92]	; (800ac3c <Start_Accel+0x94>)
 800abde:	685a      	ldr	r2, [r3, #4]
 800abe0:	4b17      	ldr	r3, [pc, #92]	; (800ac40 <Start_Accel+0x98>)
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	4413      	add	r3, r2
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	db0f      	blt.n	800ac0a <Start_Accel+0x62>
 800abea:	4b14      	ldr	r3, [pc, #80]	; (800ac3c <Start_Accel+0x94>)
 800abec:	685a      	ldr	r2, [r3, #4]
 800abee:	4b14      	ldr	r3, [pc, #80]	; (800ac40 <Start_Accel+0x98>)
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	4413      	add	r3, r2
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fd fbcd 	bl	8008394 <__aeabi_i2d>
 800abfa:	a30d      	add	r3, pc, #52	; (adr r3, 800ac30 <Start_Accel+0x88>)
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	f7fd fea4 	bl	800894c <__aeabi_dcmplt>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1e2      	bne.n	800abd0 <Start_Accel+0x28>
	}
	mode.accel = 0;
 800ac0a:	4b0f      	ldr	r3, [pc, #60]	; (800ac48 <Start_Accel+0xa0>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	705a      	strb	r2, [r3, #1]
	Target_velocity = SEARCH_SPEED;
 800ac10:	4b0e      	ldr	r3, [pc, #56]	; (800ac4c <Start_Accel+0xa4>)
 800ac12:	4a0f      	ldr	r2, [pc, #60]	; (800ac50 <Start_Accel+0xa8>)
 800ac14:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800ac16:	4b09      	ldr	r3, [pc, #36]	; (800ac3c <Start_Accel+0x94>)
 800ac18:	2200      	movs	r2, #0
 800ac1a:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ac1c:	4b08      	ldr	r3, [pc, #32]	; (800ac40 <Start_Accel+0x98>)
 800ac1e:	2200      	movs	r2, #0
 800ac20:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ac22:	4b08      	ldr	r3, [pc, #32]	; (800ac44 <Start_Accel+0x9c>)
 800ac24:	2200      	movs	r2, #0
 800ac26:	605a      	str	r2, [r3, #4]

}
 800ac28:	bf00      	nop
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	f3af 8000 	nop.w
 800ac30:	fc6ebdc8 	.word	0xfc6ebdc8
 800ac34:	40ee5f24 	.word	0x40ee5f24
 800ac38:	2000026c 	.word	0x2000026c
 800ac3c:	20000044 	.word	0x20000044
 800ac40:	20000050 	.word	0x20000050
 800ac44:	2000005c 	.word	0x2000005c
 800ac48:	20000068 	.word	0x20000068
 800ac4c:	200002e0 	.word	0x200002e0
 800ac50:	43340000 	.word	0x43340000
 800ac54:	00000000 	.word	0x00000000

0800ac58 <Accelerate>:

void Accelerate(){
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	af00      	add	r7, sp, #0

	error_reset = 0;
 800ac5c:	4b4a      	ldr	r3, [pc, #296]	; (800ad88 <Accelerate+0x130>)
 800ac5e:	2200      	movs	r2, #0
 800ac60:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ac62:	f7fe feb7 	bl	80099d4 <Motor_Count_Clear>
	//IMU_init();

	mode.control = 3;
 800ac66:	4b49      	ldr	r3, [pc, #292]	; (800ad8c <Accelerate+0x134>)
 800ac68:	2203      	movs	r2, #3
 800ac6a:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800ac6c:	4b48      	ldr	r3, [pc, #288]	; (800ad90 <Accelerate+0x138>)
 800ac6e:	2200      	movs	r2, #0
 800ac70:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ac72:	4b48      	ldr	r3, [pc, #288]	; (800ad94 <Accelerate+0x13c>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ac78:	4b47      	ldr	r3, [pc, #284]	; (800ad98 <Accelerate+0x140>)
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	605a      	str	r2, [r3, #4]
	mode.enc = 1;
 800ac7e:	4b43      	ldr	r3, [pc, #268]	; (800ad8c <Accelerate+0x134>)
 800ac80:	2201      	movs	r2, #1
 800ac82:	70da      	strb	r2, [r3, #3]

	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < ACCE_DECE_PULSE * 2){
 800ac84:	e04d      	b.n	800ad22 <Accelerate+0xca>

		mode.accel = 2;
 800ac86:	4b41      	ldr	r3, [pc, #260]	; (800ad8c <Accelerate+0x134>)
 800ac88:	2202      	movs	r2, #2
 800ac8a:	705a      	strb	r2, [r3, #1]
#if 1
		if(WALL_JUDGE_PULSE * 2 < EN3_L.integrate + EN4_R.integrate){
 800ac8c:	4b40      	ldr	r3, [pc, #256]	; (800ad90 <Accelerate+0x138>)
 800ac8e:	685a      	ldr	r2, [r3, #4]
 800ac90:	4b40      	ldr	r3, [pc, #256]	; (800ad94 <Accelerate+0x13c>)
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	4413      	add	r3, r2
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7fd fb7c 	bl	8008394 <__aeabi_i2d>
 800ac9c:	a336      	add	r3, pc, #216	; (adr r3, 800ad78 <Accelerate+0x120>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	f7fd fe71 	bl	8008988 <__aeabi_dcmpgt>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d037      	beq.n	800ad1c <Accelerate+0xc4>
			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800acac:	4b3b      	ldr	r3, [pc, #236]	; (800ad9c <Accelerate+0x144>)
 800acae:	edd3 7a00 	vldr	s15, [r3]
 800acb2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800ada0 <Accelerate+0x148>
 800acb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acbe:	dd0d      	ble.n	800acdc <Accelerate+0x84>
 800acc0:	4b38      	ldr	r3, [pc, #224]	; (800ada4 <Accelerate+0x14c>)
 800acc2:	edd3 7a00 	vldr	s15, [r3]
 800acc6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ada8 <Accelerate+0x150>
 800acca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd2:	dd03      	ble.n	800acdc <Accelerate+0x84>
				  mode.control = 0;
 800acd4:	4b2d      	ldr	r3, [pc, #180]	; (800ad8c <Accelerate+0x134>)
 800acd6:	2200      	movs	r2, #0
 800acd8:	715a      	strb	r2, [r3, #5]
 800acda:	e022      	b.n	800ad22 <Accelerate+0xca>
=======
 800abc8:	b580      	push	{r7, lr}
 800abca:	af00      	add	r7, sp, #0
	error_reset = 0;
 800abcc:	4b22      	ldr	r3, [pc, #136]	; (800ac58 <Start_Accel+0x90>)
 800abce:	2200      	movs	r2, #0
 800abd0:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800abd2:	f7fe feff 	bl	80099d4 <Motor_Count_Clear>

    EN3_L.integrate = 0;
 800abd6:	4b21      	ldr	r3, [pc, #132]	; (800ac5c <Start_Accel+0x94>)
 800abd8:	2200      	movs	r2, #0
 800abda:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800abdc:	4b20      	ldr	r3, [pc, #128]	; (800ac60 <Start_Accel+0x98>)
 800abde:	2200      	movs	r2, #0
 800abe0:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800abe2:	4b20      	ldr	r3, [pc, #128]	; (800ac64 <Start_Accel+0x9c>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800abe8:	4b1f      	ldr	r3, [pc, #124]	; (800ac68 <Start_Accel+0xa0>)
 800abea:	2201      	movs	r2, #1
 800abec:	70da      	strb	r2, [r3, #3]

	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < START_ACCEL_PULSE * 2){
 800abee:	e005      	b.n	800abfc <Start_Accel+0x34>
		mode.control = 4;
 800abf0:	4b1d      	ldr	r3, [pc, #116]	; (800ac68 <Start_Accel+0xa0>)
 800abf2:	2204      	movs	r2, #4
 800abf4:	715a      	strb	r2, [r3, #5]
		mode.accel= 1;
 800abf6:	4b1c      	ldr	r3, [pc, #112]	; (800ac68 <Start_Accel+0xa0>)
 800abf8:	2201      	movs	r2, #1
 800abfa:	705a      	strb	r2, [r3, #1]
	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < START_ACCEL_PULSE * 2){
 800abfc:	4b17      	ldr	r3, [pc, #92]	; (800ac5c <Start_Accel+0x94>)
 800abfe:	685a      	ldr	r2, [r3, #4]
 800ac00:	4b17      	ldr	r3, [pc, #92]	; (800ac60 <Start_Accel+0x98>)
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	4413      	add	r3, r2
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	db0f      	blt.n	800ac2a <Start_Accel+0x62>
 800ac0a:	4b14      	ldr	r3, [pc, #80]	; (800ac5c <Start_Accel+0x94>)
 800ac0c:	685a      	ldr	r2, [r3, #4]
 800ac0e:	4b14      	ldr	r3, [pc, #80]	; (800ac60 <Start_Accel+0x98>)
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	4413      	add	r3, r2
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7fd fbbd 	bl	8008394 <__aeabi_i2d>
 800ac1a:	a30d      	add	r3, pc, #52	; (adr r3, 800ac50 <Start_Accel+0x88>)
 800ac1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac20:	f7fd fe94 	bl	800894c <__aeabi_dcmplt>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1e2      	bne.n	800abf0 <Start_Accel+0x28>
	}
	mode.accel = 0;
 800ac2a:	4b0f      	ldr	r3, [pc, #60]	; (800ac68 <Start_Accel+0xa0>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	705a      	strb	r2, [r3, #1]
	Target_velocity = SEARCH_SPEED;
 800ac30:	4b0e      	ldr	r3, [pc, #56]	; (800ac6c <Start_Accel+0xa4>)
 800ac32:	4a0f      	ldr	r2, [pc, #60]	; (800ac70 <Start_Accel+0xa8>)
 800ac34:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800ac36:	4b09      	ldr	r3, [pc, #36]	; (800ac5c <Start_Accel+0x94>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ac3c:	4b08      	ldr	r3, [pc, #32]	; (800ac60 <Start_Accel+0x98>)
 800ac3e:	2200      	movs	r2, #0
 800ac40:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ac42:	4b08      	ldr	r3, [pc, #32]	; (800ac64 <Start_Accel+0x9c>)
 800ac44:	2200      	movs	r2, #0
 800ac46:	605a      	str	r2, [r3, #4]

}
 800ac48:	bf00      	nop
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	f3af 8000 	nop.w
 800ac50:	fc6ebdc8 	.word	0xfc6ebdc8
 800ac54:	40ee5f24 	.word	0x40ee5f24
 800ac58:	20000efc 	.word	0x20000efc
 800ac5c:	20000cd0 	.word	0x20000cd0
 800ac60:	20000cdc 	.word	0x20000cdc
 800ac64:	20000ce8 	.word	0x20000ce8
 800ac68:	20000cf4 	.word	0x20000cf4
 800ac6c:	20000f70 	.word	0x20000f70
 800ac70:	43700000 	.word	0x43700000
 800ac74:	00000000 	.word	0x00000000

0800ac78 <Accelerate>:

void Accelerate(){
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	af00      	add	r7, sp, #0

	error_reset = 0;
 800ac7c:	4b48      	ldr	r3, [pc, #288]	; (800ada0 <Accelerate+0x128>)
 800ac7e:	2200      	movs	r2, #0
 800ac80:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ac82:	f7fe fea7 	bl	80099d4 <Motor_Count_Clear>

	//mode.control = 3;
    EN3_L.integrate = 0;
 800ac86:	4b47      	ldr	r3, [pc, #284]	; (800ada4 <Accelerate+0x12c>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ac8c:	4b46      	ldr	r3, [pc, #280]	; (800ada8 <Accelerate+0x130>)
 800ac8e:	2200      	movs	r2, #0
 800ac90:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ac92:	4b46      	ldr	r3, [pc, #280]	; (800adac <Accelerate+0x134>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	605a      	str	r2, [r3, #4]
	mode.enc = 1;
 800ac98:	4b45      	ldr	r3, [pc, #276]	; (800adb0 <Accelerate+0x138>)
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	70da      	strb	r2, [r3, #3]

	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < ACCE_DECE_PULSE * 2){
 800ac9e:	e04d      	b.n	800ad3c <Accelerate+0xc4>

		mode.accel = 2;
 800aca0:	4b43      	ldr	r3, [pc, #268]	; (800adb0 <Accelerate+0x138>)
 800aca2:	2202      	movs	r2, #2
 800aca4:	705a      	strb	r2, [r3, #1]
#if 1
		if(WALL_JUDGE_PULSE * 2 < EN3_L.integrate + EN4_R.integrate){
 800aca6:	4b3f      	ldr	r3, [pc, #252]	; (800ada4 <Accelerate+0x12c>)
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	4b3f      	ldr	r3, [pc, #252]	; (800ada8 <Accelerate+0x130>)
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	4413      	add	r3, r2
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fd fb6f 	bl	8008394 <__aeabi_i2d>
 800acb6:	a336      	add	r3, pc, #216	; (adr r3, 800ad90 <Accelerate+0x118>)
 800acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbc:	f7fd fe64 	bl	8008988 <__aeabi_dcmpgt>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d037      	beq.n	800ad36 <Accelerate+0xbe>
			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800acc6:	4b3b      	ldr	r3, [pc, #236]	; (800adb4 <Accelerate+0x13c>)
 800acc8:	edd3 7a00 	vldr	s15, [r3]
 800accc:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800adb8 <Accelerate+0x140>
 800acd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd8:	dd0d      	ble.n	800acf6 <Accelerate+0x7e>
 800acda:	4b38      	ldr	r3, [pc, #224]	; (800adbc <Accelerate+0x144>)
 800acdc:	edd3 7a00 	vldr	s15, [r3]
 800ace0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800adc0 <Accelerate+0x148>
 800ace4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ace8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acec:	dd03      	ble.n	800acf6 <Accelerate+0x7e>
				  mode.control = 0;
 800acee:	4b30      	ldr	r3, [pc, #192]	; (800adb0 <Accelerate+0x138>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	715a      	strb	r2, [r3, #5]
 800acf4:	e022      	b.n	800ad3c <Accelerate+0xc4>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

				 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
		    }
			else if(fl_average > LEFT_WALL){
<<<<<<< HEAD
 800acdc:	4b31      	ldr	r3, [pc, #196]	; (800ada4 <Accelerate+0x14c>)
 800acde:	edd3 7a00 	vldr	s15, [r3]
 800ace2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ada8 <Accelerate+0x150>
 800ace6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acee:	dd03      	ble.n	800acf8 <Accelerate+0xa0>
				  mode.control = 1;
 800acf0:	4b26      	ldr	r3, [pc, #152]	; (800ad8c <Accelerate+0x134>)
 800acf2:	2201      	movs	r2, #1
 800acf4:	715a      	strb	r2, [r3, #5]
 800acf6:	e014      	b.n	800ad22 <Accelerate+0xca>
				 // Left_Wall_Control();
		    }
			else if(fr_average > RIGHT_WALL){
 800acf8:	4b28      	ldr	r3, [pc, #160]	; (800ad9c <Accelerate+0x144>)
 800acfa:	edd3 7a00 	vldr	s15, [r3]
 800acfe:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800ada0 <Accelerate+0x148>
 800ad02:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad0a:	dd03      	ble.n	800ad14 <Accelerate+0xbc>
				  mode.control = 2;
 800ad0c:	4b1f      	ldr	r3, [pc, #124]	; (800ad8c <Accelerate+0x134>)
 800ad0e:	2202      	movs	r2, #2
 800ad10:	715a      	strb	r2, [r3, #5]
 800ad12:	e006      	b.n	800ad22 <Accelerate+0xca>
							 // Right_Wall_Control();
		    }
			else mode.control = 4;
 800ad14:	4b1d      	ldr	r3, [pc, #116]	; (800ad8c <Accelerate+0x134>)
 800ad16:	2204      	movs	r2, #4
 800ad18:	715a      	strb	r2, [r3, #5]
 800ad1a:	e002      	b.n	800ad22 <Accelerate+0xca>
		}
		else mode.control = 4;
 800ad1c:	4b1b      	ldr	r3, [pc, #108]	; (800ad8c <Accelerate+0x134>)
 800ad1e:	2204      	movs	r2, #4
 800ad20:	715a      	strb	r2, [r3, #5]
	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < ACCE_DECE_PULSE * 2){
 800ad22:	4b1b      	ldr	r3, [pc, #108]	; (800ad90 <Accelerate+0x138>)
 800ad24:	685a      	ldr	r2, [r3, #4]
 800ad26:	4b1b      	ldr	r3, [pc, #108]	; (800ad94 <Accelerate+0x13c>)
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	db0f      	blt.n	800ad50 <Accelerate+0xf8>
 800ad30:	4b17      	ldr	r3, [pc, #92]	; (800ad90 <Accelerate+0x138>)
 800ad32:	685a      	ldr	r2, [r3, #4]
 800ad34:	4b17      	ldr	r3, [pc, #92]	; (800ad94 <Accelerate+0x13c>)
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	4413      	add	r3, r2
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fd fb2a 	bl	8008394 <__aeabi_i2d>
 800ad40:	a30f      	add	r3, pc, #60	; (adr r3, 800ad80 <Accelerate+0x128>)
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	f7fd fe01 	bl	800894c <__aeabi_dcmplt>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d19a      	bne.n	800ac86 <Accelerate+0x2e>
=======
 800acf6:	4b31      	ldr	r3, [pc, #196]	; (800adbc <Accelerate+0x144>)
 800acf8:	edd3 7a00 	vldr	s15, [r3]
 800acfc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800adc0 <Accelerate+0x148>
 800ad00:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad08:	dd03      	ble.n	800ad12 <Accelerate+0x9a>
				  mode.control = 1;
 800ad0a:	4b29      	ldr	r3, [pc, #164]	; (800adb0 <Accelerate+0x138>)
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	715a      	strb	r2, [r3, #5]
 800ad10:	e014      	b.n	800ad3c <Accelerate+0xc4>
				 // Left_Wall_Control();
		    }
			else if(fr_average > RIGHT_WALL){
 800ad12:	4b28      	ldr	r3, [pc, #160]	; (800adb4 <Accelerate+0x13c>)
 800ad14:	edd3 7a00 	vldr	s15, [r3]
 800ad18:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800adb8 <Accelerate+0x140>
 800ad1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad24:	dd03      	ble.n	800ad2e <Accelerate+0xb6>
				  mode.control = 2;
 800ad26:	4b22      	ldr	r3, [pc, #136]	; (800adb0 <Accelerate+0x138>)
 800ad28:	2202      	movs	r2, #2
 800ad2a:	715a      	strb	r2, [r3, #5]
 800ad2c:	e006      	b.n	800ad3c <Accelerate+0xc4>
							 // Right_Wall_Control();
		    }
			else mode.control = 4;
 800ad2e:	4b20      	ldr	r3, [pc, #128]	; (800adb0 <Accelerate+0x138>)
 800ad30:	2204      	movs	r2, #4
 800ad32:	715a      	strb	r2, [r3, #5]
 800ad34:	e002      	b.n	800ad3c <Accelerate+0xc4>
		}
		else mode.control = 4;
 800ad36:	4b1e      	ldr	r3, [pc, #120]	; (800adb0 <Accelerate+0x138>)
 800ad38:	2204      	movs	r2, #4
 800ad3a:	715a      	strb	r2, [r3, #5]
	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < ACCE_DECE_PULSE * 2){
 800ad3c:	4b19      	ldr	r3, [pc, #100]	; (800ada4 <Accelerate+0x12c>)
 800ad3e:	685a      	ldr	r2, [r3, #4]
 800ad40:	4b19      	ldr	r3, [pc, #100]	; (800ada8 <Accelerate+0x130>)
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	4413      	add	r3, r2
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	db0f      	blt.n	800ad6a <Accelerate+0xf2>
 800ad4a:	4b16      	ldr	r3, [pc, #88]	; (800ada4 <Accelerate+0x12c>)
 800ad4c:	685a      	ldr	r2, [r3, #4]
 800ad4e:	4b16      	ldr	r3, [pc, #88]	; (800ada8 <Accelerate+0x130>)
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	4413      	add	r3, r2
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7fd fb1d 	bl	8008394 <__aeabi_i2d>
 800ad5a:	a30f      	add	r3, pc, #60	; (adr r3, 800ad98 <Accelerate+0x120>)
 800ad5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad60:	f7fd fdf4 	bl	800894c <__aeabi_dcmplt>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d19a      	bne.n	800aca0 <Accelerate+0x28>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	}
#else
	mode.control = 3;
}
#endif
	mode.accel = 0;
<<<<<<< HEAD
 800ad50:	4b0e      	ldr	r3, [pc, #56]	; (800ad8c <Accelerate+0x134>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	705a      	strb	r2, [r3, #1]
	Target_velocity = SEARCH_SPEED;
 800ad56:	4b15      	ldr	r3, [pc, #84]	; (800adac <Accelerate+0x154>)
 800ad58:	4a15      	ldr	r2, [pc, #84]	; (800adb0 <Accelerate+0x158>)
 800ad5a:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800ad5c:	4b0c      	ldr	r3, [pc, #48]	; (800ad90 <Accelerate+0x138>)
 800ad5e:	2200      	movs	r2, #0
 800ad60:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ad62:	4b0c      	ldr	r3, [pc, #48]	; (800ad94 <Accelerate+0x13c>)
 800ad64:	2200      	movs	r2, #0
 800ad66:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ad68:	4b0b      	ldr	r3, [pc, #44]	; (800ad98 <Accelerate+0x140>)
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	605a      	str	r2, [r3, #4]

}
 800ad6e:	bf00      	nop
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	f3af 8000 	nop.w
 800ad78:	de04ae66 	.word	0xde04ae66
 800ad7c:	40d897a9 	.word	0x40d897a9
 800ad80:	e16a9cf5 	.word	0xe16a9cf5
 800ad84:	40e62218 	.word	0x40e62218
 800ad88:	2000026c 	.word	0x2000026c
 800ad8c:	20000068 	.word	0x20000068
 800ad90:	20000044 	.word	0x20000044
 800ad94:	20000050 	.word	0x20000050
 800ad98:	2000005c 	.word	0x2000005c
 800ad9c:	2001a6d0 	.word	0x2001a6d0
 800ada0:	42c80000 	.word	0x42c80000
 800ada4:	2000e04c 	.word	0x2000e04c
 800ada8:	430c0000 	.word	0x430c0000
 800adac:	200002e0 	.word	0x200002e0
 800adb0:	43340000 	.word	0x43340000
 800adb4:	00000000 	.word	0x00000000

0800adb8 <Decelerate>:
void Decelerate(){
 800adb8:	b580      	push	{r7, lr}
 800adba:	af00      	add	r7, sp, #0


	//IMU_init();
	//mode.control = 4;

	mode.control = 3;
 800adbc:	4b48      	ldr	r3, [pc, #288]	; (800aee0 <Decelerate+0x128>)
 800adbe:	2203      	movs	r2, #3
 800adc0:	715a      	strb	r2, [r3, #5]
	//printf("%d\r\n",EN3_L.integrate + EN4_R.integrate);
	while(EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2 && (sl_average + sr_average )/2 < 2150){
 800adc2:	e04d      	b.n	800ae60 <Decelerate+0xa8>
		mode.accel = 3;
 800adc4:	4b46      	ldr	r3, [pc, #280]	; (800aee0 <Decelerate+0x128>)
 800adc6:	2203      	movs	r2, #3
 800adc8:	705a      	strb	r2, [r3, #1]
#if 1
		if(EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2 - (WALL_JUDGE_PULSE  * 2 *3/5) ){//ここの閾値の意味:減速する距離は半区画 -
 800adca:	4b46      	ldr	r3, [pc, #280]	; (800aee4 <Decelerate+0x12c>)
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	4b46      	ldr	r3, [pc, #280]	; (800aee8 <Decelerate+0x130>)
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	4413      	add	r3, r2
 800add4:	4618      	mov	r0, r3
 800add6:	f7fd fadd 	bl	8008394 <__aeabi_i2d>
 800adda:	a33d      	add	r3, pc, #244	; (adr r3, 800aed0 <Decelerate+0x118>)
 800addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade0:	f7fd fdb4 	bl	800894c <__aeabi_dcmplt>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d037      	beq.n	800ae5a <Decelerate+0xa2>
		  if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800adea:	4b40      	ldr	r3, [pc, #256]	; (800aeec <Decelerate+0x134>)
 800adec:	edd3 7a00 	vldr	s15, [r3]
 800adf0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800aef0 <Decelerate+0x138>
 800adf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adfc:	dd0d      	ble.n	800ae1a <Decelerate+0x62>
 800adfe:	4b3d      	ldr	r3, [pc, #244]	; (800aef4 <Decelerate+0x13c>)
 800ae00:	edd3 7a00 	vldr	s15, [r3]
 800ae04:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800aef8 <Decelerate+0x140>
 800ae08:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae10:	dd03      	ble.n	800ae1a <Decelerate+0x62>
			  mode.control = 0;
 800ae12:	4b33      	ldr	r3, [pc, #204]	; (800aee0 <Decelerate+0x128>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	715a      	strb	r2, [r3, #5]
 800ae18:	e022      	b.n	800ae60 <Decelerate+0xa8>
=======
 800ad6a:	4b11      	ldr	r3, [pc, #68]	; (800adb0 <Accelerate+0x138>)
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	705a      	strb	r2, [r3, #1]
	Target_velocity = SEARCH_SPEED;
 800ad70:	4b14      	ldr	r3, [pc, #80]	; (800adc4 <Accelerate+0x14c>)
 800ad72:	4a15      	ldr	r2, [pc, #84]	; (800adc8 <Accelerate+0x150>)
 800ad74:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800ad76:	4b0b      	ldr	r3, [pc, #44]	; (800ada4 <Accelerate+0x12c>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ad7c:	4b0a      	ldr	r3, [pc, #40]	; (800ada8 <Accelerate+0x130>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ad82:	4b0a      	ldr	r3, [pc, #40]	; (800adac <Accelerate+0x134>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	605a      	str	r2, [r3, #4]

}
 800ad88:	bf00      	nop
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	f3af 8000 	nop.w
 800ad90:	de04ae66 	.word	0xde04ae66
 800ad94:	40d897a9 	.word	0x40d897a9
 800ad98:	e16a9cf5 	.word	0xe16a9cf5
 800ad9c:	40e62218 	.word	0x40e62218
 800ada0:	20000efc 	.word	0x20000efc
 800ada4:	20000cd0 	.word	0x20000cd0
 800ada8:	20000cdc 	.word	0x20000cdc
 800adac:	20000ce8 	.word	0x20000ce8
 800adb0:	20000cf4 	.word	0x20000cf4
 800adb4:	20016558 	.word	0x20016558
 800adb8:	42c80000 	.word	0x42c80000
 800adbc:	2000508c 	.word	0x2000508c
 800adc0:	430c0000 	.word	0x430c0000
 800adc4:	20000f70 	.word	0x20000f70
 800adc8:	43700000 	.word	0x43700000
 800adcc:	00000000 	.word	0x00000000

0800add0 <Decelerate>:
void Decelerate(){
 800add0:	b580      	push	{r7, lr}
 800add2:	af00      	add	r7, sp, #0
	//IMU_init();
	//mode.control = 4;

	//mode.control = 3;
	//printf("%d\r\n",EN3_L.integrate + EN4_R.integrate);
	while(EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2 && (sl_average + sr_average )/2 < 1980){
 800add4:	e04d      	b.n	800ae72 <Decelerate+0xa2>
		mode.accel = 3;
 800add6:	4b46      	ldr	r3, [pc, #280]	; (800aef0 <Decelerate+0x120>)
 800add8:	2203      	movs	r2, #3
 800adda:	705a      	strb	r2, [r3, #1]
#if 1
		if(EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2 - (WALL_JUDGE_PULSE  * 2 *3/5) ){//ここの閾値の意味:減速する距離は半区画 -
 800addc:	4b45      	ldr	r3, [pc, #276]	; (800aef4 <Decelerate+0x124>)
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	4b45      	ldr	r3, [pc, #276]	; (800aef8 <Decelerate+0x128>)
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	4413      	add	r3, r2
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fd fad4 	bl	8008394 <__aeabi_i2d>
 800adec:	a33c      	add	r3, pc, #240	; (adr r3, 800aee0 <Decelerate+0x110>)
 800adee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf2:	f7fd fdab 	bl	800894c <__aeabi_dcmplt>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d037      	beq.n	800ae6c <Decelerate+0x9c>
		  if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800adfc:	4b3f      	ldr	r3, [pc, #252]	; (800aefc <Decelerate+0x12c>)
 800adfe:	edd3 7a00 	vldr	s15, [r3]
 800ae02:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800af00 <Decelerate+0x130>
 800ae06:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae0e:	dd0d      	ble.n	800ae2c <Decelerate+0x5c>
 800ae10:	4b3c      	ldr	r3, [pc, #240]	; (800af04 <Decelerate+0x134>)
 800ae12:	edd3 7a00 	vldr	s15, [r3]
 800ae16:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800af08 <Decelerate+0x138>
 800ae1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae22:	dd03      	ble.n	800ae2c <Decelerate+0x5c>
			  mode.control = 0;
 800ae24:	4b32      	ldr	r3, [pc, #200]	; (800aef0 <Decelerate+0x120>)
 800ae26:	2200      	movs	r2, #0
 800ae28:	715a      	strb	r2, [r3, #5]
 800ae2a:	e022      	b.n	800ae72 <Decelerate+0xa2>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

			 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
	      }
		  else if(fl_average > LEFT_WALL){
<<<<<<< HEAD
 800ae1a:	4b36      	ldr	r3, [pc, #216]	; (800aef4 <Decelerate+0x13c>)
 800ae1c:	edd3 7a00 	vldr	s15, [r3]
 800ae20:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800aef8 <Decelerate+0x140>
 800ae24:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae2c:	dd03      	ble.n	800ae36 <Decelerate+0x7e>
			  mode.control = 1;
 800ae2e:	4b2c      	ldr	r3, [pc, #176]	; (800aee0 <Decelerate+0x128>)
 800ae30:	2201      	movs	r2, #1
 800ae32:	715a      	strb	r2, [r3, #5]
 800ae34:	e014      	b.n	800ae60 <Decelerate+0xa8>
			 // Left_Wall_Control();
	      }
		  else if(fr_average > RIGHT_WALL){
 800ae36:	4b2d      	ldr	r3, [pc, #180]	; (800aeec <Decelerate+0x134>)
 800ae38:	edd3 7a00 	vldr	s15, [r3]
 800ae3c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800aef0 <Decelerate+0x138>
 800ae40:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae48:	dd03      	ble.n	800ae52 <Decelerate+0x9a>
			  mode.control = 2;
 800ae4a:	4b25      	ldr	r3, [pc, #148]	; (800aee0 <Decelerate+0x128>)
 800ae4c:	2202      	movs	r2, #2
 800ae4e:	715a      	strb	r2, [r3, #5]
 800ae50:	e006      	b.n	800ae60 <Decelerate+0xa8>
						 // Right_Wall_Control();
	      }
		  else mode.control = 4;
 800ae52:	4b23      	ldr	r3, [pc, #140]	; (800aee0 <Decelerate+0x128>)
 800ae54:	2204      	movs	r2, #4
 800ae56:	715a      	strb	r2, [r3, #5]
 800ae58:	e002      	b.n	800ae60 <Decelerate+0xa8>
		}
		else mode.control = 4;
 800ae5a:	4b21      	ldr	r3, [pc, #132]	; (800aee0 <Decelerate+0x128>)
 800ae5c:	2204      	movs	r2, #4
 800ae5e:	715a      	strb	r2, [r3, #5]
	while(EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2 && (sl_average + sr_average )/2 < 2150){
 800ae60:	4b20      	ldr	r3, [pc, #128]	; (800aee4 <Decelerate+0x12c>)
 800ae62:	685a      	ldr	r2, [r3, #4]
 800ae64:	4b20      	ldr	r3, [pc, #128]	; (800aee8 <Decelerate+0x130>)
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	4413      	add	r3, r2
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fd fa92 	bl	8008394 <__aeabi_i2d>
 800ae70:	a319      	add	r3, pc, #100	; (adr r3, 800aed8 <Decelerate+0x120>)
 800ae72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae76:	f7fd fd69 	bl	800894c <__aeabi_dcmplt>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d012      	beq.n	800aea6 <Decelerate+0xee>
 800ae80:	4b1e      	ldr	r3, [pc, #120]	; (800aefc <Decelerate+0x144>)
 800ae82:	ed93 7a00 	vldr	s14, [r3]
 800ae86:	4b1e      	ldr	r3, [pc, #120]	; (800af00 <Decelerate+0x148>)
 800ae88:	edd3 7a00 	vldr	s15, [r3]
 800ae8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ae90:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ae94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ae98:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800af04 <Decelerate+0x14c>
 800ae9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aea4:	d48e      	bmi.n	800adc4 <Decelerate+0xc>
=======
 800ae2c:	4b35      	ldr	r3, [pc, #212]	; (800af04 <Decelerate+0x134>)
 800ae2e:	edd3 7a00 	vldr	s15, [r3]
 800ae32:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800af08 <Decelerate+0x138>
 800ae36:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae3e:	dd03      	ble.n	800ae48 <Decelerate+0x78>
			  mode.control = 1;
 800ae40:	4b2b      	ldr	r3, [pc, #172]	; (800aef0 <Decelerate+0x120>)
 800ae42:	2201      	movs	r2, #1
 800ae44:	715a      	strb	r2, [r3, #5]
 800ae46:	e014      	b.n	800ae72 <Decelerate+0xa2>
			 // Left_Wall_Control();
	      }
		  else if(fr_average > RIGHT_WALL){
 800ae48:	4b2c      	ldr	r3, [pc, #176]	; (800aefc <Decelerate+0x12c>)
 800ae4a:	edd3 7a00 	vldr	s15, [r3]
 800ae4e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800af00 <Decelerate+0x130>
 800ae52:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae5a:	dd03      	ble.n	800ae64 <Decelerate+0x94>
			  mode.control = 2;
 800ae5c:	4b24      	ldr	r3, [pc, #144]	; (800aef0 <Decelerate+0x120>)
 800ae5e:	2202      	movs	r2, #2
 800ae60:	715a      	strb	r2, [r3, #5]
 800ae62:	e006      	b.n	800ae72 <Decelerate+0xa2>
						 // Right_Wall_Control();
	      }
		  else mode.control = 4;
 800ae64:	4b22      	ldr	r3, [pc, #136]	; (800aef0 <Decelerate+0x120>)
 800ae66:	2204      	movs	r2, #4
 800ae68:	715a      	strb	r2, [r3, #5]
 800ae6a:	e002      	b.n	800ae72 <Decelerate+0xa2>
		}
		else mode.control = 4;
 800ae6c:	4b20      	ldr	r3, [pc, #128]	; (800aef0 <Decelerate+0x120>)
 800ae6e:	2204      	movs	r2, #4
 800ae70:	715a      	strb	r2, [r3, #5]
	while(EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2 && (sl_average + sr_average )/2 < 1980){
 800ae72:	4b20      	ldr	r3, [pc, #128]	; (800aef4 <Decelerate+0x124>)
 800ae74:	685a      	ldr	r2, [r3, #4]
 800ae76:	4b20      	ldr	r3, [pc, #128]	; (800aef8 <Decelerate+0x128>)
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7fd fa89 	bl	8008394 <__aeabi_i2d>
 800ae82:	a319      	add	r3, pc, #100	; (adr r3, 800aee8 <Decelerate+0x118>)
 800ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae88:	f7fd fd60 	bl	800894c <__aeabi_dcmplt>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d012      	beq.n	800aeb8 <Decelerate+0xe8>
 800ae92:	4b1e      	ldr	r3, [pc, #120]	; (800af0c <Decelerate+0x13c>)
 800ae94:	ed93 7a00 	vldr	s14, [r3]
 800ae98:	4b1d      	ldr	r3, [pc, #116]	; (800af10 <Decelerate+0x140>)
 800ae9a:	edd3 7a00 	vldr	s15, [r3]
 800ae9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aea2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800aea6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aeaa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800af14 <Decelerate+0x144>
 800aeae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aeb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb6:	d48e      	bmi.n	800add6 <Decelerate+0x6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#else
	mode.control = 3;
}
#endif

	mode.accel = 0;
<<<<<<< HEAD
 800aea6:	4b0e      	ldr	r3, [pc, #56]	; (800aee0 <Decelerate+0x128>)
 800aea8:	2200      	movs	r2, #0
 800aeaa:	705a      	strb	r2, [r3, #1]
	mode.control = 5;
 800aeac:	4b0c      	ldr	r3, [pc, #48]	; (800aee0 <Decelerate+0x128>)
 800aeae:	2205      	movs	r2, #5
 800aeb0:	715a      	strb	r2, [r3, #5]
	Target_velocity = 0;
 800aeb2:	4b15      	ldr	r3, [pc, #84]	; (800af08 <Decelerate+0x150>)
 800aeb4:	f04f 0200 	mov.w	r2, #0
 800aeb8:	601a      	str	r2, [r3, #0]
	mode.enc = 0;
 800aeba:	4b09      	ldr	r3, [pc, #36]	; (800aee0 <Decelerate+0x128>)
 800aebc:	2200      	movs	r2, #0
 800aebe:	70da      	strb	r2, [r3, #3]
	error_reset = 0;
 800aec0:	4b12      	ldr	r3, [pc, #72]	; (800af0c <Decelerate+0x154>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800aec6:	f7fe fd85 	bl	80099d4 <Motor_Count_Clear>

	//printf("減�?????��?��??��?��???��?��??��?��した???��?��??��?��?\r\n");
}
 800aeca:	bf00      	nop
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	d738d147 	.word	0xd738d147
 800aed4:	40dd82cb 	.word	0x40dd82cb
 800aed8:	e16a9cf5 	.word	0xe16a9cf5
 800aedc:	40e62218 	.word	0x40e62218
 800aee0:	20000068 	.word	0x20000068
 800aee4:	20000044 	.word	0x20000044
 800aee8:	20000050 	.word	0x20000050
 800aeec:	2001a6d0 	.word	0x2001a6d0
 800aef0:	42c80000 	.word	0x42c80000
 800aef4:	2000e04c 	.word	0x2000e04c
 800aef8:	430c0000 	.word	0x430c0000
 800aefc:	2001a7a0 	.word	0x2001a7a0
 800af00:	20019ca8 	.word	0x20019ca8
 800af04:	45066000 	.word	0x45066000
 800af08:	200002e0 	.word	0x200002e0
 800af0c:	2000026c 	.word	0x2000026c

0800af10 <straight>:
=======
 800aeb8:	4b0d      	ldr	r3, [pc, #52]	; (800aef0 <Decelerate+0x120>)
 800aeba:	2200      	movs	r2, #0
 800aebc:	705a      	strb	r2, [r3, #1]
	mode.control = 5;
 800aebe:	4b0c      	ldr	r3, [pc, #48]	; (800aef0 <Decelerate+0x120>)
 800aec0:	2205      	movs	r2, #5
 800aec2:	715a      	strb	r2, [r3, #5]
	Target_velocity = 0;
 800aec4:	4b14      	ldr	r3, [pc, #80]	; (800af18 <Decelerate+0x148>)
 800aec6:	f04f 0200 	mov.w	r2, #0
 800aeca:	601a      	str	r2, [r3, #0]
	mode.enc = 0;
 800aecc:	4b08      	ldr	r3, [pc, #32]	; (800aef0 <Decelerate+0x120>)
 800aece:	2200      	movs	r2, #0
 800aed0:	70da      	strb	r2, [r3, #3]
	error_reset = 0;
 800aed2:	4b12      	ldr	r3, [pc, #72]	; (800af1c <Decelerate+0x14c>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800aed8:	f7fe fd7c 	bl	80099d4 <Motor_Count_Clear>
	//printf("減�?????��?��??��?��???��?��??��?��した???��?��??��?��?\r\n");
}
 800aedc:	bf00      	nop
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	d738d147 	.word	0xd738d147
 800aee4:	40dd82cb 	.word	0x40dd82cb
 800aee8:	e16a9cf5 	.word	0xe16a9cf5
 800aeec:	40e62218 	.word	0x40e62218
 800aef0:	20000cf4 	.word	0x20000cf4
 800aef4:	20000cd0 	.word	0x20000cd0
 800aef8:	20000cdc 	.word	0x20000cdc
 800aefc:	20016558 	.word	0x20016558
 800af00:	42c80000 	.word	0x42c80000
 800af04:	2000508c 	.word	0x2000508c
 800af08:	430c0000 	.word	0x430c0000
 800af0c:	20016628 	.word	0x20016628
 800af10:	20015b30 	.word	0x20015b30
 800af14:	44f78000 	.word	0x44f78000
 800af18:	20000f70 	.word	0x20000f70
 800af1c:	20000efc 	.word	0x20000efc

0800af20 <straight>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

			return Velocity;


}
void straight(){ //uint8_t block_num
<<<<<<< HEAD
 800af10:	b5b0      	push	{r4, r5, r7, lr}
 800af12:	af00      	add	r7, sp, #0
=======
 800af20:	b5b0      	push	{r4, r5, r7, lr}
 800af22:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
//    EN3_L.integrate = 0;
//    EN4_R.integrate = 0;
//	  EN_Body.integrate = 0;
//    mode.enc = 1;

  while(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 ){
<<<<<<< HEAD
 800af14:	e07e      	b.n	800b014 <straight+0x104>
#if 1
	  if(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 *0.45 || Target_pulse * 2 - (WALL_JUDGE_PULSE * 12/5) < EN3_L.integrate + EN4_R.integrate){
 800af16:	4b54      	ldr	r3, [pc, #336]	; (800b068 <straight+0x158>)
 800af18:	685a      	ldr	r2, [r3, #4]
 800af1a:	4b54      	ldr	r3, [pc, #336]	; (800b06c <straight+0x15c>)
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	4413      	add	r3, r2
 800af20:	4618      	mov	r0, r3
 800af22:	f7fd fa37 	bl	8008394 <__aeabi_i2d>
 800af26:	4604      	mov	r4, r0
 800af28:	460d      	mov	r5, r1
 800af2a:	4b51      	ldr	r3, [pc, #324]	; (800b070 <straight+0x160>)
 800af2c:	edd3 7a00 	vldr	s15, [r3]
 800af30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800af34:	ee17 0a90 	vmov	r0, s15
 800af38:	f7fd fa3e 	bl	80083b8 <__aeabi_f2d>
 800af3c:	a346      	add	r3, pc, #280	; (adr r3, 800b058 <straight+0x148>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	f7fd fa91 	bl	8008468 <__aeabi_dmul>
 800af46:	4602      	mov	r2, r0
 800af48:	460b      	mov	r3, r1
 800af4a:	4620      	mov	r0, r4
 800af4c:	4629      	mov	r1, r5
 800af4e:	f7fd fcfd 	bl	800894c <__aeabi_dcmplt>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d122      	bne.n	800af9e <straight+0x8e>
 800af58:	4b45      	ldr	r3, [pc, #276]	; (800b070 <straight+0x160>)
 800af5a:	edd3 7a00 	vldr	s15, [r3]
 800af5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800af62:	ee17 0a90 	vmov	r0, s15
 800af66:	f7fd fa27 	bl	80083b8 <__aeabi_f2d>
 800af6a:	a33d      	add	r3, pc, #244	; (adr r3, 800b060 <straight+0x150>)
 800af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af70:	f7fd f8c2 	bl	80080f8 <__aeabi_dsub>
 800af74:	4603      	mov	r3, r0
 800af76:	460c      	mov	r4, r1
 800af78:	4625      	mov	r5, r4
 800af7a:	461c      	mov	r4, r3
 800af7c:	4b3a      	ldr	r3, [pc, #232]	; (800b068 <straight+0x158>)
 800af7e:	685a      	ldr	r2, [r3, #4]
 800af80:	4b3a      	ldr	r3, [pc, #232]	; (800b06c <straight+0x15c>)
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	4413      	add	r3, r2
 800af86:	4618      	mov	r0, r3
 800af88:	f7fd fa04 	bl	8008394 <__aeabi_i2d>
 800af8c:	4602      	mov	r2, r0
 800af8e:	460b      	mov	r3, r1
 800af90:	4620      	mov	r0, r4
 800af92:	4629      	mov	r1, r5
 800af94:	f7fd fcda 	bl	800894c <__aeabi_dcmplt>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d037      	beq.n	800b00e <straight+0xfe>

			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800af9e:	4b35      	ldr	r3, [pc, #212]	; (800b074 <straight+0x164>)
 800afa0:	edd3 7a00 	vldr	s15, [r3]
 800afa4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b078 <straight+0x168>
 800afa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afb0:	dd0d      	ble.n	800afce <straight+0xbe>
 800afb2:	4b32      	ldr	r3, [pc, #200]	; (800b07c <straight+0x16c>)
 800afb4:	edd3 7a00 	vldr	s15, [r3]
 800afb8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b080 <straight+0x170>
 800afbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afc4:	dd03      	ble.n	800afce <straight+0xbe>
				  mode.control = 0;
 800afc6:	4b2f      	ldr	r3, [pc, #188]	; (800b084 <straight+0x174>)
 800afc8:	2200      	movs	r2, #0
 800afca:	715a      	strb	r2, [r3, #5]
 800afcc:	e01e      	b.n	800b00c <straight+0xfc>
=======
 800af24:	e07e      	b.n	800b024 <straight+0x104>
#if 1
	  if(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 *0.45 || Target_pulse * 2 - (WALL_JUDGE_PULSE * 12/5) < EN3_L.integrate + EN4_R.integrate){
 800af26:	4b54      	ldr	r3, [pc, #336]	; (800b078 <straight+0x158>)
 800af28:	685a      	ldr	r2, [r3, #4]
 800af2a:	4b54      	ldr	r3, [pc, #336]	; (800b07c <straight+0x15c>)
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	4413      	add	r3, r2
 800af30:	4618      	mov	r0, r3
 800af32:	f7fd fa2f 	bl	8008394 <__aeabi_i2d>
 800af36:	4604      	mov	r4, r0
 800af38:	460d      	mov	r5, r1
 800af3a:	4b51      	ldr	r3, [pc, #324]	; (800b080 <straight+0x160>)
 800af3c:	edd3 7a00 	vldr	s15, [r3]
 800af40:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800af44:	ee17 0a90 	vmov	r0, s15
 800af48:	f7fd fa36 	bl	80083b8 <__aeabi_f2d>
 800af4c:	a346      	add	r3, pc, #280	; (adr r3, 800b068 <straight+0x148>)
 800af4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af52:	f7fd fa89 	bl	8008468 <__aeabi_dmul>
 800af56:	4602      	mov	r2, r0
 800af58:	460b      	mov	r3, r1
 800af5a:	4620      	mov	r0, r4
 800af5c:	4629      	mov	r1, r5
 800af5e:	f7fd fcf5 	bl	800894c <__aeabi_dcmplt>
 800af62:	4603      	mov	r3, r0
 800af64:	2b00      	cmp	r3, #0
 800af66:	d122      	bne.n	800afae <straight+0x8e>
 800af68:	4b45      	ldr	r3, [pc, #276]	; (800b080 <straight+0x160>)
 800af6a:	edd3 7a00 	vldr	s15, [r3]
 800af6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800af72:	ee17 0a90 	vmov	r0, s15
 800af76:	f7fd fa1f 	bl	80083b8 <__aeabi_f2d>
 800af7a:	a33d      	add	r3, pc, #244	; (adr r3, 800b070 <straight+0x150>)
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	f7fd f8ba 	bl	80080f8 <__aeabi_dsub>
 800af84:	4603      	mov	r3, r0
 800af86:	460c      	mov	r4, r1
 800af88:	4625      	mov	r5, r4
 800af8a:	461c      	mov	r4, r3
 800af8c:	4b3a      	ldr	r3, [pc, #232]	; (800b078 <straight+0x158>)
 800af8e:	685a      	ldr	r2, [r3, #4]
 800af90:	4b3a      	ldr	r3, [pc, #232]	; (800b07c <straight+0x15c>)
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	4413      	add	r3, r2
 800af96:	4618      	mov	r0, r3
 800af98:	f7fd f9fc 	bl	8008394 <__aeabi_i2d>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4620      	mov	r0, r4
 800afa2:	4629      	mov	r1, r5
 800afa4:	f7fd fcd2 	bl	800894c <__aeabi_dcmplt>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d037      	beq.n	800b01e <straight+0xfe>

			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800afae:	4b35      	ldr	r3, [pc, #212]	; (800b084 <straight+0x164>)
 800afb0:	edd3 7a00 	vldr	s15, [r3]
 800afb4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b088 <straight+0x168>
 800afb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afc0:	dd0d      	ble.n	800afde <straight+0xbe>
 800afc2:	4b32      	ldr	r3, [pc, #200]	; (800b08c <straight+0x16c>)
 800afc4:	edd3 7a00 	vldr	s15, [r3]
 800afc8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b090 <straight+0x170>
 800afcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afd4:	dd03      	ble.n	800afde <straight+0xbe>
				  mode.control = 0;
 800afd6:	4b2f      	ldr	r3, [pc, #188]	; (800b094 <straight+0x174>)
 800afd8:	2200      	movs	r2, #0
 800afda:	715a      	strb	r2, [r3, #5]
 800afdc:	e01e      	b.n	800b01c <straight+0xfc>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

				 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
		    }
			else if(fl_average > LEFT_WALL){
<<<<<<< HEAD
 800afce:	4b2b      	ldr	r3, [pc, #172]	; (800b07c <straight+0x16c>)
 800afd0:	edd3 7a00 	vldr	s15, [r3]
 800afd4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800b080 <straight+0x170>
 800afd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afe0:	dd03      	ble.n	800afea <straight+0xda>
				  mode.control = 1;
 800afe2:	4b28      	ldr	r3, [pc, #160]	; (800b084 <straight+0x174>)
 800afe4:	2201      	movs	r2, #1
 800afe6:	715a      	strb	r2, [r3, #5]
 800afe8:	e014      	b.n	800b014 <straight+0x104>
				 // Left_Wall_Control();
		    }
			else if(fr_average > RIGHT_WALL){
 800afea:	4b22      	ldr	r3, [pc, #136]	; (800b074 <straight+0x164>)
 800afec:	edd3 7a00 	vldr	s15, [r3]
 800aff0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800b078 <straight+0x168>
 800aff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800affc:	dd03      	ble.n	800b006 <straight+0xf6>
				  mode.control = 2;
 800affe:	4b21      	ldr	r3, [pc, #132]	; (800b084 <straight+0x174>)
 800b000:	2202      	movs	r2, #2
 800b002:	715a      	strb	r2, [r3, #5]
 800b004:	e006      	b.n	800b014 <straight+0x104>
							 // Right_Wall_Control();
		    }
			else mode.control = 4;
 800b006:	4b1f      	ldr	r3, [pc, #124]	; (800b084 <straight+0x174>)
 800b008:	2204      	movs	r2, #4
 800b00a:	715a      	strb	r2, [r3, #5]
			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800b00c:	e002      	b.n	800b014 <straight+0x104>
	  }
	  else
		  mode.control = 4;
 800b00e:	4b1d      	ldr	r3, [pc, #116]	; (800b084 <straight+0x174>)
 800b010:	2204      	movs	r2, #4
 800b012:	715a      	strb	r2, [r3, #5]
  while(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 ){
 800b014:	4b14      	ldr	r3, [pc, #80]	; (800b068 <straight+0x158>)
 800b016:	685a      	ldr	r2, [r3, #4]
 800b018:	4b14      	ldr	r3, [pc, #80]	; (800b06c <straight+0x15c>)
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	4413      	add	r3, r2
 800b01e:	ee07 3a90 	vmov	s15, r3
 800b022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b026:	4b12      	ldr	r3, [pc, #72]	; (800b070 <straight+0x160>)
 800b028:	edd3 7a00 	vldr	s15, [r3]
 800b02c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b038:	f53f af6d 	bmi.w	800af16 <straight+0x6>
=======
 800afde:	4b2b      	ldr	r3, [pc, #172]	; (800b08c <straight+0x16c>)
 800afe0:	edd3 7a00 	vldr	s15, [r3]
 800afe4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800b090 <straight+0x170>
 800afe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aff0:	dd03      	ble.n	800affa <straight+0xda>
				  mode.control = 1;
 800aff2:	4b28      	ldr	r3, [pc, #160]	; (800b094 <straight+0x174>)
 800aff4:	2201      	movs	r2, #1
 800aff6:	715a      	strb	r2, [r3, #5]
 800aff8:	e014      	b.n	800b024 <straight+0x104>
				 // Left_Wall_Control();
		    }
			else if(fr_average > RIGHT_WALL){
 800affa:	4b22      	ldr	r3, [pc, #136]	; (800b084 <straight+0x164>)
 800affc:	edd3 7a00 	vldr	s15, [r3]
 800b000:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800b088 <straight+0x168>
 800b004:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b00c:	dd03      	ble.n	800b016 <straight+0xf6>
				  mode.control = 2;
 800b00e:	4b21      	ldr	r3, [pc, #132]	; (800b094 <straight+0x174>)
 800b010:	2202      	movs	r2, #2
 800b012:	715a      	strb	r2, [r3, #5]
 800b014:	e006      	b.n	800b024 <straight+0x104>
							 // Right_Wall_Control();
		    }
			else mode.control = 4;
 800b016:	4b1f      	ldr	r3, [pc, #124]	; (800b094 <straight+0x174>)
 800b018:	2204      	movs	r2, #4
 800b01a:	715a      	strb	r2, [r3, #5]
			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800b01c:	e002      	b.n	800b024 <straight+0x104>
	  }
	  else
		  mode.control = 4;
 800b01e:	4b1d      	ldr	r3, [pc, #116]	; (800b094 <straight+0x174>)
 800b020:	2204      	movs	r2, #4
 800b022:	715a      	strb	r2, [r3, #5]
  while(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 ){
 800b024:	4b14      	ldr	r3, [pc, #80]	; (800b078 <straight+0x158>)
 800b026:	685a      	ldr	r2, [r3, #4]
 800b028:	4b14      	ldr	r3, [pc, #80]	; (800b07c <straight+0x15c>)
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	4413      	add	r3, r2
 800b02e:	ee07 3a90 	vmov	s15, r3
 800b032:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b036:	4b12      	ldr	r3, [pc, #72]	; (800b080 <straight+0x160>)
 800b038:	edd3 7a00 	vldr	s15, [r3]
 800b03c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b040:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b048:	f53f af6d 	bmi.w	800af26 <straight+0x6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#else

		  mode.control = 3;
  }
#endif
      EN3_L.integrate = 0;
<<<<<<< HEAD
 800b03c:	4b0a      	ldr	r3, [pc, #40]	; (800b068 <straight+0x158>)
 800b03e:	2200      	movs	r2, #0
 800b040:	605a      	str	r2, [r3, #4]
      EN4_R.integrate = 0;
 800b042:	4b0a      	ldr	r3, [pc, #40]	; (800b06c <straight+0x15c>)
 800b044:	2200      	movs	r2, #0
 800b046:	605a      	str	r2, [r3, #4]
      EN_Body.integrate = 0;
 800b048:	4b0f      	ldr	r3, [pc, #60]	; (800b088 <straight+0x178>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	605a      	str	r2, [r3, #4]
=======
 800b04c:	4b0a      	ldr	r3, [pc, #40]	; (800b078 <straight+0x158>)
 800b04e:	2200      	movs	r2, #0
 800b050:	605a      	str	r2, [r3, #4]
      EN4_R.integrate = 0;
 800b052:	4b0a      	ldr	r3, [pc, #40]	; (800b07c <straight+0x15c>)
 800b054:	2200      	movs	r2, #0
 800b056:	605a      	str	r2, [r3, #4]
      EN_Body.integrate = 0;
 800b058:	4b0f      	ldr	r3, [pc, #60]	; (800b098 <straight+0x178>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	605a      	str	r2, [r3, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    printf("3区画進んだ??��?��? : %d \r\n",check);

#endif
}
<<<<<<< HEAD
 800b04e:	bf00      	nop
 800b050:	bdb0      	pop	{r4, r5, r7, pc}
 800b052:	bf00      	nop
 800b054:	f3af 8000 	nop.w
 800b058:	cccccccd 	.word	0xcccccccd
 800b05c:	3fdccccc 	.word	0x3fdccccc
 800b060:	d738d146 	.word	0xd738d146
 800b064:	40dd82cb 	.word	0x40dd82cb
 800b068:	20000044 	.word	0x20000044
 800b06c:	20000050 	.word	0x20000050
 800b070:	20000000 	.word	0x20000000
 800b074:	2001a6d0 	.word	0x2001a6d0
 800b078:	42c80000 	.word	0x42c80000
 800b07c:	2000e04c 	.word	0x2000e04c
 800b080:	430c0000 	.word	0x430c0000
 800b084:	20000068 	.word	0x20000068
 800b088:	2000005c 	.word	0x2000005c
 800b08c:	00000000 	.word	0x00000000

0800b090 <IMU_turn>:
=======
 800b05e:	bf00      	nop
 800b060:	bdb0      	pop	{r4, r5, r7, pc}
 800b062:	bf00      	nop
 800b064:	f3af 8000 	nop.w
 800b068:	cccccccd 	.word	0xcccccccd
 800b06c:	3fdccccc 	.word	0x3fdccccc
 800b070:	d738d146 	.word	0xd738d146
 800b074:	40dd82cb 	.word	0x40dd82cb
 800b078:	20000cd0 	.word	0x20000cd0
 800b07c:	20000cdc 	.word	0x20000cdc
 800b080:	20000000 	.word	0x20000000
 800b084:	20016558 	.word	0x20016558
 800b088:	42c80000 	.word	0x42c80000
 800b08c:	2000508c 	.word	0x2000508c
 800b090:	430c0000 	.word	0x430c0000
 800b094:	20000cf4 	.word	0x20000cf4
 800b098:	20000ce8 	.word	0x20000ce8
 800b09c:	00000000 	.word	0x00000000

0800b0a0 <IMU_turn>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

			return Velocity;

}

void IMU_turn(int8_t target_angle, double target_angle_velo){
<<<<<<< HEAD
 800b090:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b094:	ed2d 8b02 	vpush	{d8}
 800b098:	b084      	sub	sp, #16
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	4603      	mov	r3, r0
 800b09e:	ed87 0b00 	vstr	d0, [r7]
 800b0a2:	73fb      	strb	r3, [r7, #15]
	    Motor_PWM_Start();
 800b0a4:	f7fe ffea 	bl	800a07c <Motor_PWM_Start>
	    if(target_angle < 0){
 800b0a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	da37      	bge.n	800b120 <IMU_turn+0x90>
	     while(target_angle < Body_angle){
 800b0b0:	e027      	b.n	800b102 <IMU_turn+0x72>

		   IMU_Control(target_angle_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800b0b2:	4b47      	ldr	r3, [pc, #284]	; (800b1d0 <IMU_turn+0x140>)
 800b0b4:	ed93 8b00 	vldr	d8, [r3]
 800b0b8:	4b46      	ldr	r3, [pc, #280]	; (800b1d4 <IMU_turn+0x144>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7fd f97b 	bl	80083b8 <__aeabi_f2d>
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	460d      	mov	r5, r1
 800b0c6:	4b43      	ldr	r3, [pc, #268]	; (800b1d4 <IMU_turn+0x144>)
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7fd f974 	bl	80083b8 <__aeabi_f2d>
 800b0d0:	4680      	mov	r8, r0
 800b0d2:	4689      	mov	r9, r1
 800b0d4:	4b3f      	ldr	r3, [pc, #252]	; (800b1d4 <IMU_turn+0x144>)
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fd f96d 	bl	80083b8 <__aeabi_f2d>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	ec43 2b15 	vmov	d5, r2, r3
 800b0e6:	ec49 8b14 	vmov	d4, r8, r9
 800b0ea:	ec45 4b13 	vmov	d3, r4, r5
 800b0ee:	ed9f 2b36 	vldr	d2, [pc, #216]	; 800b1c8 <IMU_turn+0x138>
 800b0f2:	eeb0 1a48 	vmov.f32	s2, s16
 800b0f6:	eef0 1a68 	vmov.f32	s3, s17
 800b0fa:	ed97 0b00 	vldr	d0, [r7]
 800b0fe:	f7ff f8f7 	bl	800a2f0 <IMU_Control>
	     while(target_angle < Body_angle){
 800b102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b106:	4618      	mov	r0, r3
 800b108:	f7fd f944 	bl	8008394 <__aeabi_i2d>
 800b10c:	4b32      	ldr	r3, [pc, #200]	; (800b1d8 <IMU_turn+0x148>)
 800b10e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b112:	461a      	mov	r2, r3
 800b114:	4623      	mov	r3, r4
 800b116:	f7fd fc19 	bl	800894c <__aeabi_dcmplt>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d1c8      	bne.n	800b0b2 <IMU_turn+0x22>
=======
 800b0a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b0a4:	ed2d 8b02 	vpush	{d8}
 800b0a8:	b084      	sub	sp, #16
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	ed87 0b00 	vstr	d0, [r7]
 800b0b2:	73fb      	strb	r3, [r7, #15]
	    Motor_PWM_Start();
 800b0b4:	f7fe ffe2 	bl	800a07c <Motor_PWM_Start>
	    if(target_angle < 0){
 800b0b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	da37      	bge.n	800b130 <IMU_turn+0x90>
	     while(target_angle < Body_angle){
 800b0c0:	e027      	b.n	800b112 <IMU_turn+0x72>

		   IMU_Control(target_angle_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800b0c2:	4b47      	ldr	r3, [pc, #284]	; (800b1e0 <IMU_turn+0x140>)
 800b0c4:	ed93 8b00 	vldr	d8, [r3]
 800b0c8:	4b46      	ldr	r3, [pc, #280]	; (800b1e4 <IMU_turn+0x144>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7fd f973 	bl	80083b8 <__aeabi_f2d>
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	460d      	mov	r5, r1
 800b0d6:	4b43      	ldr	r3, [pc, #268]	; (800b1e4 <IMU_turn+0x144>)
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fd f96c 	bl	80083b8 <__aeabi_f2d>
 800b0e0:	4680      	mov	r8, r0
 800b0e2:	4689      	mov	r9, r1
 800b0e4:	4b3f      	ldr	r3, [pc, #252]	; (800b1e4 <IMU_turn+0x144>)
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7fd f965 	bl	80083b8 <__aeabi_f2d>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	ec43 2b15 	vmov	d5, r2, r3
 800b0f6:	ec49 8b14 	vmov	d4, r8, r9
 800b0fa:	ec45 4b13 	vmov	d3, r4, r5
 800b0fe:	ed9f 2b36 	vldr	d2, [pc, #216]	; 800b1d8 <IMU_turn+0x138>
 800b102:	eeb0 1a48 	vmov.f32	s2, s16
 800b106:	eef0 1a68 	vmov.f32	s3, s17
 800b10a:	ed97 0b00 	vldr	d0, [r7]
 800b10e:	f7ff f8bb 	bl	800a288 <IMU_Control>
	     while(target_angle < Body_angle){
 800b112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b116:	4618      	mov	r0, r3
 800b118:	f7fd f93c 	bl	8008394 <__aeabi_i2d>
 800b11c:	4b32      	ldr	r3, [pc, #200]	; (800b1e8 <IMU_turn+0x148>)
 800b11e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b122:	461a      	mov	r2, r3
 800b124:	4623      	mov	r3, r4
 800b126:	f7fd fc11 	bl	800894c <__aeabi_dcmplt>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1c8      	bne.n	800b0c2 <IMU_turn+0x22>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
		//printf("ジャイロ : %f \r\n", Body_angle*180/ M_PI);
	     }
	    }
	    if(target_angle > 0){
<<<<<<< HEAD
 800b120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b124:	2b00      	cmp	r3, #0
 800b126:	dd37      	ble.n	800b198 <IMU_turn+0x108>
	     while(target_angle > Body_angle){
 800b128:	e027      	b.n	800b17a <IMU_turn+0xea>

	       IMU_Control(target_angle_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800b12a:	4b29      	ldr	r3, [pc, #164]	; (800b1d0 <IMU_turn+0x140>)
 800b12c:	ed93 8b00 	vldr	d8, [r3]
 800b130:	4b28      	ldr	r3, [pc, #160]	; (800b1d4 <IMU_turn+0x144>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4618      	mov	r0, r3
 800b136:	f7fd f93f 	bl	80083b8 <__aeabi_f2d>
 800b13a:	4604      	mov	r4, r0
 800b13c:	460d      	mov	r5, r1
 800b13e:	4b25      	ldr	r3, [pc, #148]	; (800b1d4 <IMU_turn+0x144>)
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	4618      	mov	r0, r3
 800b144:	f7fd f938 	bl	80083b8 <__aeabi_f2d>
 800b148:	4680      	mov	r8, r0
 800b14a:	4689      	mov	r9, r1
 800b14c:	4b21      	ldr	r3, [pc, #132]	; (800b1d4 <IMU_turn+0x144>)
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	4618      	mov	r0, r3
 800b152:	f7fd f931 	bl	80083b8 <__aeabi_f2d>
 800b156:	4602      	mov	r2, r0
 800b158:	460b      	mov	r3, r1
 800b15a:	ec43 2b15 	vmov	d5, r2, r3
 800b15e:	ec49 8b14 	vmov	d4, r8, r9
 800b162:	ec45 4b13 	vmov	d3, r4, r5
 800b166:	ed9f 2b18 	vldr	d2, [pc, #96]	; 800b1c8 <IMU_turn+0x138>
 800b16a:	eeb0 1a48 	vmov.f32	s2, s16
 800b16e:	eef0 1a68 	vmov.f32	s3, s17
 800b172:	ed97 0b00 	vldr	d0, [r7]
 800b176:	f7ff f8bb 	bl	800a2f0 <IMU_Control>
	     while(target_angle > Body_angle){
 800b17a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fd f908 	bl	8008394 <__aeabi_i2d>
 800b184:	4b14      	ldr	r3, [pc, #80]	; (800b1d8 <IMU_turn+0x148>)
 800b186:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b18a:	461a      	mov	r2, r3
 800b18c:	4623      	mov	r3, r4
 800b18e:	f7fd fbfb 	bl	8008988 <__aeabi_dcmpgt>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1c8      	bne.n	800b12a <IMU_turn+0x9a>
=======
 800b130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b134:	2b00      	cmp	r3, #0
 800b136:	dd37      	ble.n	800b1a8 <IMU_turn+0x108>
	     while(target_angle > Body_angle){
 800b138:	e027      	b.n	800b18a <IMU_turn+0xea>

	       IMU_Control(target_angle_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800b13a:	4b29      	ldr	r3, [pc, #164]	; (800b1e0 <IMU_turn+0x140>)
 800b13c:	ed93 8b00 	vldr	d8, [r3]
 800b140:	4b28      	ldr	r3, [pc, #160]	; (800b1e4 <IMU_turn+0x144>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4618      	mov	r0, r3
 800b146:	f7fd f937 	bl	80083b8 <__aeabi_f2d>
 800b14a:	4604      	mov	r4, r0
 800b14c:	460d      	mov	r5, r1
 800b14e:	4b25      	ldr	r3, [pc, #148]	; (800b1e4 <IMU_turn+0x144>)
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	4618      	mov	r0, r3
 800b154:	f7fd f930 	bl	80083b8 <__aeabi_f2d>
 800b158:	4680      	mov	r8, r0
 800b15a:	4689      	mov	r9, r1
 800b15c:	4b21      	ldr	r3, [pc, #132]	; (800b1e4 <IMU_turn+0x144>)
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	4618      	mov	r0, r3
 800b162:	f7fd f929 	bl	80083b8 <__aeabi_f2d>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	ec43 2b15 	vmov	d5, r2, r3
 800b16e:	ec49 8b14 	vmov	d4, r8, r9
 800b172:	ec45 4b13 	vmov	d3, r4, r5
 800b176:	ed9f 2b18 	vldr	d2, [pc, #96]	; 800b1d8 <IMU_turn+0x138>
 800b17a:	eeb0 1a48 	vmov.f32	s2, s16
 800b17e:	eef0 1a68 	vmov.f32	s3, s17
 800b182:	ed97 0b00 	vldr	d0, [r7]
 800b186:	f7ff f87f 	bl	800a288 <IMU_Control>
	     while(target_angle > Body_angle){
 800b18a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fd f900 	bl	8008394 <__aeabi_i2d>
 800b194:	4b14      	ldr	r3, [pc, #80]	; (800b1e8 <IMU_turn+0x148>)
 800b196:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b19a:	461a      	mov	r2, r3
 800b19c:	4623      	mov	r3, r4
 800b19e:	f7fd fbf3 	bl	8008988 <__aeabi_dcmpgt>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1c8      	bne.n	800b13a <IMU_turn+0x9a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	    			//printf("ジャイロ : %f \r\n", Body_angle*180/ M_PI);
	     }
	    }
	    mode.enc = 0;
<<<<<<< HEAD
 800b198:	4b10      	ldr	r3, [pc, #64]	; (800b1dc <IMU_turn+0x14c>)
 800b19a:	2200      	movs	r2, #0
 800b19c:	70da      	strb	r2, [r3, #3]
	    imu_angle = 0;
 800b19e:	4a10      	ldr	r2, [pc, #64]	; (800b1e0 <IMU_turn+0x150>)
 800b1a0:	f04f 0300 	mov.w	r3, #0
 800b1a4:	f04f 0400 	mov.w	r4, #0
 800b1a8:	e9c2 3400 	strd	r3, r4, [r2]
	    Body_angle = 0;
 800b1ac:	4a0a      	ldr	r2, [pc, #40]	; (800b1d8 <IMU_turn+0x148>)
 800b1ae:	f04f 0300 	mov.w	r3, #0
 800b1b2:	f04f 0400 	mov.w	r4, #0
 800b1b6:	e9c2 3400 	strd	r3, r4, [r2]
=======
 800b1a8:	4b10      	ldr	r3, [pc, #64]	; (800b1ec <IMU_turn+0x14c>)
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	70da      	strb	r2, [r3, #3]
	    imu_angle = 0;
 800b1ae:	4a10      	ldr	r2, [pc, #64]	; (800b1f0 <IMU_turn+0x150>)
 800b1b0:	f04f 0300 	mov.w	r3, #0
 800b1b4:	f04f 0400 	mov.w	r4, #0
 800b1b8:	e9c2 3400 	strd	r3, r4, [r2]
	    Body_angle = 0;
 800b1bc:	4a0a      	ldr	r2, [pc, #40]	; (800b1e8 <IMU_turn+0x148>)
 800b1be:	f04f 0300 	mov.w	r3, #0
 800b1c2:	f04f 0400 	mov.w	r4, #0
 800b1c6:	e9c2 3400 	strd	r3, r4, [r2]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	//Motor_PWM_Stop();

}
<<<<<<< HEAD
 800b1ba:	bf00      	nop
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	ecbd 8b02 	vpop	{d8}
 800b1c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b1c8:	d2f1a9fc 	.word	0xd2f1a9fc
 800b1cc:	3f50624d 	.word	0x3f50624d
 800b1d0:	200002f8 	.word	0x200002f8
 800b1d4:	20000038 	.word	0x20000038
 800b1d8:	200002e8 	.word	0x200002e8
 800b1dc:	20000068 	.word	0x20000068
 800b1e0:	200002f0 	.word	0x200002f0

0800b1e4 <turn_right>:

void turn_right(){
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
=======
 800b1ca:	bf00      	nop
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	ecbd 8b02 	vpop	{d8}
 800b1d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b1d8:	d2f1a9fc 	.word	0xd2f1a9fc
 800b1dc:	3f50624d 	.word	0x3f50624d
 800b1e0:	20000f88 	.word	0x20000f88
 800b1e4:	20000cc4 	.word	0x20000cc4
 800b1e8:	20000f78 	.word	0x20000f78
 800b1ec:	20000cf4 	.word	0x20000cf4
 800b1f0:	20000f80 	.word	0x20000f80

0800b1f4 <turn_right>:

void turn_right(){
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	//左右の車輪速度制御
	//or 角速度制御で旋回
	  uint8_t counter=0;
<<<<<<< HEAD
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	71fb      	strb	r3, [r7, #7]

	   while(counter < 1){
 800b1ee:	e045      	b.n	800b27c <turn_right+0x98>

			Target_velocity = 0;
 800b1f0:	4b28      	ldr	r3, [pc, #160]	; (800b294 <turn_right+0xb0>)
 800b1f2:	f04f 0200 	mov.w	r2, #0
 800b1f6:	601a      	str	r2, [r3, #0]

			error_reset = 0;
 800b1f8:	4b27      	ldr	r3, [pc, #156]	; (800b298 <turn_right+0xb4>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	701a      	strb	r2, [r3, #0]
			Motor_Count_Clear();
 800b1fe:	f7fe fbe9 	bl	80099d4 <Motor_Count_Clear>
	    EN3_L.integrate = 0;
 800b202:	4b26      	ldr	r3, [pc, #152]	; (800b29c <turn_right+0xb8>)
 800b204:	2200      	movs	r2, #0
 800b206:	605a      	str	r2, [r3, #4]
	    EN4_R.integrate = 0;
 800b208:	4b25      	ldr	r3, [pc, #148]	; (800b2a0 <turn_right+0xbc>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	605a      	str	r2, [r3, #4]
		  EN_Body.integrate = 0;
 800b20e:	4b25      	ldr	r3, [pc, #148]	; (800b2a4 <turn_right+0xc0>)
 800b210:	2200      	movs	r2, #0
 800b212:	605a      	str	r2, [r3, #4]
		  mode.enc = 1;
 800b214:	4b24      	ldr	r3, [pc, #144]	; (800b2a8 <turn_right+0xc4>)
 800b216:	2201      	movs	r2, #1
 800b218:	70da      	strb	r2, [r3, #3]
		///while(EN3_L.integrate >= -Target_pul_quarter && EN4_R.integrate <= Target_pul_quarter){
	  while(EN3_L.integrate + (-1)*EN4_R.integrate <= Target_pul_quarter*2){
 800b21a:	e005      	b.n	800b228 <turn_right+0x44>
		  mode.control = 3;
 800b21c:	4b22      	ldr	r3, [pc, #136]	; (800b2a8 <turn_right+0xc4>)
 800b21e:	2203      	movs	r2, #3
 800b220:	715a      	strb	r2, [r3, #5]
		  Target_Rad_velo = -3;//Rotate(Target_Rad_velo, -5, Target_pul_quarter, EN3_L.integrate);
 800b222:	4b22      	ldr	r3, [pc, #136]	; (800b2ac <turn_right+0xc8>)
 800b224:	4a22      	ldr	r2, [pc, #136]	; (800b2b0 <turn_right+0xcc>)
 800b226:	601a      	str	r2, [r3, #0]
	  while(EN3_L.integrate + (-1)*EN4_R.integrate <= Target_pul_quarter*2){
 800b228:	4b1c      	ldr	r3, [pc, #112]	; (800b29c <turn_right+0xb8>)
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	4b1c      	ldr	r3, [pc, #112]	; (800b2a0 <turn_right+0xbc>)
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	ee07 3a90 	vmov	s15, r3
 800b236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b23a:	4b1e      	ldr	r3, [pc, #120]	; (800b2b4 <turn_right+0xd0>)
 800b23c:	edd3 7a00 	vldr	s15, [r3]
 800b240:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b244:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b24c:	d9e6      	bls.n	800b21c <turn_right+0x38>
=======
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	71fb      	strb	r3, [r7, #7]

	   while(counter < 1){
 800b1fe:	e045      	b.n	800b28c <turn_right+0x98>

			Target_velocity = 0;
 800b200:	4b28      	ldr	r3, [pc, #160]	; (800b2a4 <turn_right+0xb0>)
 800b202:	f04f 0200 	mov.w	r2, #0
 800b206:	601a      	str	r2, [r3, #0]

			error_reset = 0;
 800b208:	4b27      	ldr	r3, [pc, #156]	; (800b2a8 <turn_right+0xb4>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	701a      	strb	r2, [r3, #0]
			Motor_Count_Clear();
 800b20e:	f7fe fbe1 	bl	80099d4 <Motor_Count_Clear>
	    EN3_L.integrate = 0;
 800b212:	4b26      	ldr	r3, [pc, #152]	; (800b2ac <turn_right+0xb8>)
 800b214:	2200      	movs	r2, #0
 800b216:	605a      	str	r2, [r3, #4]
	    EN4_R.integrate = 0;
 800b218:	4b25      	ldr	r3, [pc, #148]	; (800b2b0 <turn_right+0xbc>)
 800b21a:	2200      	movs	r2, #0
 800b21c:	605a      	str	r2, [r3, #4]
		  EN_Body.integrate = 0;
 800b21e:	4b25      	ldr	r3, [pc, #148]	; (800b2b4 <turn_right+0xc0>)
 800b220:	2200      	movs	r2, #0
 800b222:	605a      	str	r2, [r3, #4]
		  mode.enc = 1;
 800b224:	4b24      	ldr	r3, [pc, #144]	; (800b2b8 <turn_right+0xc4>)
 800b226:	2201      	movs	r2, #1
 800b228:	70da      	strb	r2, [r3, #3]
		///while(EN3_L.integrate >= -Target_pul_quarter && EN4_R.integrate <= Target_pul_quarter){
	  while(EN3_L.integrate + (-1)*EN4_R.integrate <= Target_pul_quarter*2){
 800b22a:	e005      	b.n	800b238 <turn_right+0x44>
		  mode.control = 3;
 800b22c:	4b22      	ldr	r3, [pc, #136]	; (800b2b8 <turn_right+0xc4>)
 800b22e:	2203      	movs	r2, #3
 800b230:	715a      	strb	r2, [r3, #5]
		  Target_Rad_velo = -3;//Rotate(Target_Rad_velo, -5, Target_pul_quarter, EN3_L.integrate);
 800b232:	4b22      	ldr	r3, [pc, #136]	; (800b2bc <turn_right+0xc8>)
 800b234:	4a22      	ldr	r2, [pc, #136]	; (800b2c0 <turn_right+0xcc>)
 800b236:	601a      	str	r2, [r3, #0]
	  while(EN3_L.integrate + (-1)*EN4_R.integrate <= Target_pul_quarter*2){
 800b238:	4b1c      	ldr	r3, [pc, #112]	; (800b2ac <turn_right+0xb8>)
 800b23a:	685a      	ldr	r2, [r3, #4]
 800b23c:	4b1c      	ldr	r3, [pc, #112]	; (800b2b0 <turn_right+0xbc>)
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	ee07 3a90 	vmov	s15, r3
 800b246:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b24a:	4b1e      	ldr	r3, [pc, #120]	; (800b2c4 <turn_right+0xd0>)
 800b24c:	edd3 7a00 	vldr	s15, [r3]
 800b250:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b25c:	d9e6      	bls.n	800b22c <turn_right+0x38>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
		  //Rotate_Control(Target_rotate,T1, velocity.KP, velocity.KI, velocity.KD);
//		  mode.control = 3;
//		  Target_Rad_velo = -10;
	    	}
	      mode.enc = 0;
<<<<<<< HEAD
 800b24e:	4b16      	ldr	r3, [pc, #88]	; (800b2a8 <turn_right+0xc4>)
 800b250:	2200      	movs	r2, #0
 800b252:	70da      	strb	r2, [r3, #3]
	      Target_Rad_velo = 0;
 800b254:	4b15      	ldr	r3, [pc, #84]	; (800b2ac <turn_right+0xc8>)
 800b256:	f04f 0200 	mov.w	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]
//	      mode.control = 4;
//	      Target_Rad_velo = 0;
	      Target_velocity = 0;
 800b25c:	4b0d      	ldr	r3, [pc, #52]	; (800b294 <turn_right+0xb0>)
 800b25e:	f04f 0200 	mov.w	r2, #0
 800b262:	601a      	str	r2, [r3, #0]
	      //Target_rotate =0;
	      EN3_L.integrate = 0;
 800b264:	4b0d      	ldr	r3, [pc, #52]	; (800b29c <turn_right+0xb8>)
 800b266:	2200      	movs	r2, #0
 800b268:	605a      	str	r2, [r3, #4]
	      EN4_R.integrate = 0;
 800b26a:	4b0d      	ldr	r3, [pc, #52]	; (800b2a0 <turn_right+0xbc>)
 800b26c:	2200      	movs	r2, #0
 800b26e:	605a      	str	r2, [r3, #4]
	      EN_Body.integrate = 0;
 800b270:	4b0c      	ldr	r3, [pc, #48]	; (800b2a4 <turn_right+0xc0>)
 800b272:	2200      	movs	r2, #0
 800b274:	605a      	str	r2, [r3, #4]
	      counter++;
 800b276:	79fb      	ldrb	r3, [r7, #7]
 800b278:	3301      	adds	r3, #1
 800b27a:	71fb      	strb	r3, [r7, #7]
	   while(counter < 1){
 800b27c:	79fb      	ldrb	r3, [r7, #7]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d0b6      	beq.n	800b1f0 <turn_right+0xc>
	     }
		error_reset = 0;
 800b282:	4b05      	ldr	r3, [pc, #20]	; (800b298 <turn_right+0xb4>)
 800b284:	2200      	movs	r2, #0
 800b286:	701a      	strb	r2, [r3, #0]
		Motor_Count_Clear();
 800b288:	f7fe fba4 	bl	80099d4 <Motor_Count_Clear>
=======
 800b25e:	4b16      	ldr	r3, [pc, #88]	; (800b2b8 <turn_right+0xc4>)
 800b260:	2200      	movs	r2, #0
 800b262:	70da      	strb	r2, [r3, #3]
	      Target_Rad_velo = 0;
 800b264:	4b15      	ldr	r3, [pc, #84]	; (800b2bc <turn_right+0xc8>)
 800b266:	f04f 0200 	mov.w	r2, #0
 800b26a:	601a      	str	r2, [r3, #0]
//	      mode.control = 4;
//	      Target_Rad_velo = 0;
	      Target_velocity = 0;
 800b26c:	4b0d      	ldr	r3, [pc, #52]	; (800b2a4 <turn_right+0xb0>)
 800b26e:	f04f 0200 	mov.w	r2, #0
 800b272:	601a      	str	r2, [r3, #0]
	      //Target_rotate =0;
	      EN3_L.integrate = 0;
 800b274:	4b0d      	ldr	r3, [pc, #52]	; (800b2ac <turn_right+0xb8>)
 800b276:	2200      	movs	r2, #0
 800b278:	605a      	str	r2, [r3, #4]
	      EN4_R.integrate = 0;
 800b27a:	4b0d      	ldr	r3, [pc, #52]	; (800b2b0 <turn_right+0xbc>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	605a      	str	r2, [r3, #4]
	      EN_Body.integrate = 0;
 800b280:	4b0c      	ldr	r3, [pc, #48]	; (800b2b4 <turn_right+0xc0>)
 800b282:	2200      	movs	r2, #0
 800b284:	605a      	str	r2, [r3, #4]
	      counter++;
 800b286:	79fb      	ldrb	r3, [r7, #7]
 800b288:	3301      	adds	r3, #1
 800b28a:	71fb      	strb	r3, [r7, #7]
	   while(counter < 1){
 800b28c:	79fb      	ldrb	r3, [r7, #7]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d0b6      	beq.n	800b200 <turn_right+0xc>
	     }
		error_reset = 0;
 800b292:	4b05      	ldr	r3, [pc, #20]	; (800b2a8 <turn_right+0xb4>)
 800b294:	2200      	movs	r2, #0
 800b296:	701a      	strb	r2, [r3, #0]
		Motor_Count_Clear();
 800b298:	f7fe fb9c 	bl	80099d4 <Motor_Count_Clear>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac



}
<<<<<<< HEAD
 800b28c:	bf00      	nop
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	200002e0 	.word	0x200002e0
 800b298:	2000026c 	.word	0x2000026c
 800b29c:	20000044 	.word	0x20000044
 800b2a0:	20000050 	.word	0x20000050
 800b2a4:	2000005c 	.word	0x2000005c
 800b2a8:	20000068 	.word	0x20000068
 800b2ac:	200002e4 	.word	0x200002e4
 800b2b0:	c0400000 	.word	0xc0400000
 800b2b4:	20000004 	.word	0x20000004

0800b2b8 <turn_left>:

void turn_left(){
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0

	  uint8_t counter=0;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	71fb      	strb	r3, [r7, #7]
	  //static int check = 0, check2 = 0;

    while(counter < 1){
 800b2c2:	e045      	b.n	800b350 <turn_left+0x98>

			Target_velocity = 0;
 800b2c4:	4b28      	ldr	r3, [pc, #160]	; (800b368 <turn_left+0xb0>)
 800b2c6:	f04f 0200 	mov.w	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]
			error_reset = 0;
 800b2cc:	4b27      	ldr	r3, [pc, #156]	; (800b36c <turn_left+0xb4>)
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	701a      	strb	r2, [r3, #0]
			Motor_Count_Clear();
 800b2d2:	f7fe fb7f 	bl	80099d4 <Motor_Count_Clear>
	      EN3_L.integrate = 0;
 800b2d6:	4b26      	ldr	r3, [pc, #152]	; (800b370 <turn_left+0xb8>)
 800b2d8:	2200      	movs	r2, #0
 800b2da:	605a      	str	r2, [r3, #4]
	      EN4_R.integrate = 0;
 800b2dc:	4b25      	ldr	r3, [pc, #148]	; (800b374 <turn_left+0xbc>)
 800b2de:	2200      	movs	r2, #0
 800b2e0:	605a      	str	r2, [r3, #4]
		  EN_Body.integrate = 0;
 800b2e2:	4b25      	ldr	r3, [pc, #148]	; (800b378 <turn_left+0xc0>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	605a      	str	r2, [r3, #4]
		  mode.enc = 1;
 800b2e8:	4b24      	ldr	r3, [pc, #144]	; (800b37c <turn_left+0xc4>)
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	70da      	strb	r2, [r3, #3]
	while((-1)*EN3_L.integrate + EN4_R.integrate <= Target_pul_quarter * 2){
 800b2ee:	e005      	b.n	800b2fc <turn_left+0x44>

		  mode.control = 3;
 800b2f0:	4b22      	ldr	r3, [pc, #136]	; (800b37c <turn_left+0xc4>)
 800b2f2:	2203      	movs	r2, #3
 800b2f4:	715a      	strb	r2, [r3, #5]
		  Target_Rad_velo = 3;//Rotate(Target_Rad_velo, 5, Target_pul_quarter, EN4_R.integrate);
 800b2f6:	4b22      	ldr	r3, [pc, #136]	; (800b380 <turn_left+0xc8>)
 800b2f8:	4a22      	ldr	r2, [pc, #136]	; (800b384 <turn_left+0xcc>)
 800b2fa:	601a      	str	r2, [r3, #0]
	while((-1)*EN3_L.integrate + EN4_R.integrate <= Target_pul_quarter * 2){
 800b2fc:	4b1d      	ldr	r3, [pc, #116]	; (800b374 <turn_left+0xbc>)
 800b2fe:	685a      	ldr	r2, [r3, #4]
 800b300:	4b1b      	ldr	r3, [pc, #108]	; (800b370 <turn_left+0xb8>)
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	1ad3      	subs	r3, r2, r3
 800b306:	ee07 3a90 	vmov	s15, r3
 800b30a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b30e:	4b1e      	ldr	r3, [pc, #120]	; (800b388 <turn_left+0xd0>)
 800b310:	edd3 7a00 	vldr	s15, [r3]
 800b314:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b318:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b320:	d9e6      	bls.n	800b2f0 <turn_left+0x38>
=======
 800b29c:	bf00      	nop
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	20000f70 	.word	0x20000f70
 800b2a8:	20000efc 	.word	0x20000efc
 800b2ac:	20000cd0 	.word	0x20000cd0
 800b2b0:	20000cdc 	.word	0x20000cdc
 800b2b4:	20000ce8 	.word	0x20000ce8
 800b2b8:	20000cf4 	.word	0x20000cf4
 800b2bc:	20000f74 	.word	0x20000f74
 800b2c0:	c0400000 	.word	0xc0400000
 800b2c4:	20000004 	.word	0x20000004

0800b2c8 <turn_left>:

void turn_left(){
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0

	  uint8_t counter=0;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	71fb      	strb	r3, [r7, #7]
	  //static int check = 0, check2 = 0;

    while(counter < 1){
 800b2d2:	e045      	b.n	800b360 <turn_left+0x98>

			Target_velocity = 0;
 800b2d4:	4b28      	ldr	r3, [pc, #160]	; (800b378 <turn_left+0xb0>)
 800b2d6:	f04f 0200 	mov.w	r2, #0
 800b2da:	601a      	str	r2, [r3, #0]
			error_reset = 0;
 800b2dc:	4b27      	ldr	r3, [pc, #156]	; (800b37c <turn_left+0xb4>)
 800b2de:	2200      	movs	r2, #0
 800b2e0:	701a      	strb	r2, [r3, #0]
			Motor_Count_Clear();
 800b2e2:	f7fe fb77 	bl	80099d4 <Motor_Count_Clear>
	      EN3_L.integrate = 0;
 800b2e6:	4b26      	ldr	r3, [pc, #152]	; (800b380 <turn_left+0xb8>)
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	605a      	str	r2, [r3, #4]
	      EN4_R.integrate = 0;
 800b2ec:	4b25      	ldr	r3, [pc, #148]	; (800b384 <turn_left+0xbc>)
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	605a      	str	r2, [r3, #4]
		  EN_Body.integrate = 0;
 800b2f2:	4b25      	ldr	r3, [pc, #148]	; (800b388 <turn_left+0xc0>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	605a      	str	r2, [r3, #4]
		  mode.enc = 1;
 800b2f8:	4b24      	ldr	r3, [pc, #144]	; (800b38c <turn_left+0xc4>)
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	70da      	strb	r2, [r3, #3]
	while((-1)*EN3_L.integrate + EN4_R.integrate <= Target_pul_quarter * 2){
 800b2fe:	e005      	b.n	800b30c <turn_left+0x44>

		  mode.control = 3;
 800b300:	4b22      	ldr	r3, [pc, #136]	; (800b38c <turn_left+0xc4>)
 800b302:	2203      	movs	r2, #3
 800b304:	715a      	strb	r2, [r3, #5]
		  Target_Rad_velo = 3;//Rotate(Target_Rad_velo, 5, Target_pul_quarter, EN4_R.integrate);
 800b306:	4b22      	ldr	r3, [pc, #136]	; (800b390 <turn_left+0xc8>)
 800b308:	4a22      	ldr	r2, [pc, #136]	; (800b394 <turn_left+0xcc>)
 800b30a:	601a      	str	r2, [r3, #0]
	while((-1)*EN3_L.integrate + EN4_R.integrate <= Target_pul_quarter * 2){
 800b30c:	4b1d      	ldr	r3, [pc, #116]	; (800b384 <turn_left+0xbc>)
 800b30e:	685a      	ldr	r2, [r3, #4]
 800b310:	4b1b      	ldr	r3, [pc, #108]	; (800b380 <turn_left+0xb8>)
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	ee07 3a90 	vmov	s15, r3
 800b31a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b31e:	4b1e      	ldr	r3, [pc, #120]	; (800b398 <turn_left+0xd0>)
 800b320:	edd3 7a00 	vldr	s15, [r3]
 800b324:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b328:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b330:	d9e6      	bls.n	800b300 <turn_left+0x38>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
//	      check = EN3_L.integrate;
//	      check2 = EN4_R.integrate;
//		mode.control = 3;
//		Target_Rad_velo = 10;
	}
    mode.enc = 0;
<<<<<<< HEAD
 800b322:	4b16      	ldr	r3, [pc, #88]	; (800b37c <turn_left+0xc4>)
 800b324:	2200      	movs	r2, #0
 800b326:	70da      	strb	r2, [r3, #3]
    Target_Rad_velo = 0;
 800b328:	4b15      	ldr	r3, [pc, #84]	; (800b380 <turn_left+0xc8>)
 800b32a:	f04f 0200 	mov.w	r2, #0
 800b32e:	601a      	str	r2, [r3, #0]
//	mode.control = 4;
//	Target_Rad_velo = 0;
    Target_velocity = 0;
 800b330:	4b0d      	ldr	r3, [pc, #52]	; (800b368 <turn_left+0xb0>)
 800b332:	f04f 0200 	mov.w	r2, #0
 800b336:	601a      	str	r2, [r3, #0]
    //Target_rotate =0;
    EN3_L.integrate = 0;
 800b338:	4b0d      	ldr	r3, [pc, #52]	; (800b370 <turn_left+0xb8>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b33e:	4b0d      	ldr	r3, [pc, #52]	; (800b374 <turn_left+0xbc>)
 800b340:	2200      	movs	r2, #0
 800b342:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b344:	4b0c      	ldr	r3, [pc, #48]	; (800b378 <turn_left+0xc0>)
 800b346:	2200      	movs	r2, #0
 800b348:	605a      	str	r2, [r3, #4]
    counter++;
 800b34a:	79fb      	ldrb	r3, [r7, #7]
 800b34c:	3301      	adds	r3, #1
 800b34e:	71fb      	strb	r3, [r7, #7]
    while(counter < 1){
 800b350:	79fb      	ldrb	r3, [r7, #7]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d0b6      	beq.n	800b2c4 <turn_left+0xc>
   }
	error_reset = 0;
 800b356:	4b05      	ldr	r3, [pc, #20]	; (800b36c <turn_left+0xb4>)
 800b358:	2200      	movs	r2, #0
 800b35a:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800b35c:	f7fe fb3a 	bl	80099d4 <Motor_Count_Clear>
=======
 800b332:	4b16      	ldr	r3, [pc, #88]	; (800b38c <turn_left+0xc4>)
 800b334:	2200      	movs	r2, #0
 800b336:	70da      	strb	r2, [r3, #3]
    Target_Rad_velo = 0;
 800b338:	4b15      	ldr	r3, [pc, #84]	; (800b390 <turn_left+0xc8>)
 800b33a:	f04f 0200 	mov.w	r2, #0
 800b33e:	601a      	str	r2, [r3, #0]
//	mode.control = 4;
//	Target_Rad_velo = 0;
    Target_velocity = 0;
 800b340:	4b0d      	ldr	r3, [pc, #52]	; (800b378 <turn_left+0xb0>)
 800b342:	f04f 0200 	mov.w	r2, #0
 800b346:	601a      	str	r2, [r3, #0]
    //Target_rotate =0;
    EN3_L.integrate = 0;
 800b348:	4b0d      	ldr	r3, [pc, #52]	; (800b380 <turn_left+0xb8>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b34e:	4b0d      	ldr	r3, [pc, #52]	; (800b384 <turn_left+0xbc>)
 800b350:	2200      	movs	r2, #0
 800b352:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b354:	4b0c      	ldr	r3, [pc, #48]	; (800b388 <turn_left+0xc0>)
 800b356:	2200      	movs	r2, #0
 800b358:	605a      	str	r2, [r3, #4]
    counter++;
 800b35a:	79fb      	ldrb	r3, [r7, #7]
 800b35c:	3301      	adds	r3, #1
 800b35e:	71fb      	strb	r3, [r7, #7]
    while(counter < 1){
 800b360:	79fb      	ldrb	r3, [r7, #7]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d0b6      	beq.n	800b2d4 <turn_left+0xc>
   }
	error_reset = 0;
 800b366:	4b05      	ldr	r3, [pc, #20]	; (800b37c <turn_left+0xb4>)
 800b368:	2200      	movs	r2, #0
 800b36a:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800b36c:	f7fe fb32 	bl	80099d4 <Motor_Count_Clear>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
//    printf("左に90°回転時左 : %d \r\n",check);
//    printf("左に90°回転時右 : %d \r\n",check2);
//    printf("\r\n");

}
<<<<<<< HEAD
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	200002e0 	.word	0x200002e0
 800b36c:	2000026c 	.word	0x2000026c
 800b370:	20000044 	.word	0x20000044
 800b374:	20000050 	.word	0x20000050
 800b378:	2000005c 	.word	0x2000005c
 800b37c:	20000068 	.word	0x20000068
 800b380:	200002e4 	.word	0x200002e4
 800b384:	40400000 	.word	0x40400000
 800b388:	20000004 	.word	0x20000004
 800b38c:	00000000 	.word	0x00000000

0800b390 <slow_turn_R>:

void slow_turn_R(){
 800b390:	b598      	push	{r3, r4, r7, lr}
 800b392:	af00      	add	r7, sp, #0

		mode.control = 6;
 800b394:	4b50      	ldr	r3, [pc, #320]	; (800b4d8 <slow_turn_R+0x148>)
 800b396:	2206      	movs	r2, #6
 800b398:	715a      	strb	r2, [r3, #5]

		while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b39a:	e002      	b.n	800b3a2 <slow_turn_R+0x12>
			mode.accel = 6;
 800b39c:	4b4e      	ldr	r3, [pc, #312]	; (800b4d8 <slow_turn_R+0x148>)
 800b39e:	2206      	movs	r2, #6
 800b3a0:	705a      	strb	r2, [r3, #1]
		while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b3a2:	4b4e      	ldr	r3, [pc, #312]	; (800b4dc <slow_turn_R+0x14c>)
 800b3a4:	685a      	ldr	r2, [r3, #4]
 800b3a6:	4b4e      	ldr	r3, [pc, #312]	; (800b4e0 <slow_turn_R+0x150>)
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7fc fff1 	bl	8008394 <__aeabi_i2d>
 800b3b2:	a33f      	add	r3, pc, #252	; (adr r3, 800b4b0 <slow_turn_R+0x120>)
 800b3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b8:	f7fd fac8 	bl	800894c <__aeabi_dcmplt>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1ec      	bne.n	800b39c <slow_turn_R+0xc>

		}
		mode.accel = 0;
 800b3c2:	4b45      	ldr	r3, [pc, #276]	; (800b4d8 <slow_turn_R+0x148>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	705a      	strb	r2, [r3, #1]

		while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b3c8:	e021      	b.n	800b40e <slow_turn_R+0x7e>
			Target_velocity = CURVE_SPEED;
 800b3ca:	4b46      	ldr	r3, [pc, #280]	; (800b4e4 <slow_turn_R+0x154>)
 800b3cc:	4a46      	ldr	r2, [pc, #280]	; (800b4e8 <slow_turn_R+0x158>)
 800b3ce:	601a      	str	r2, [r3, #0]
			Target_L_velo = CURVE_SPEED  * (90+TREAD_WIDTH)/90;//130/90;//124.6/90;
 800b3d0:	4b46      	ldr	r3, [pc, #280]	; (800b4ec <slow_turn_R+0x15c>)
 800b3d2:	4a47      	ldr	r2, [pc, #284]	; (800b4f0 <slow_turn_R+0x160>)
 800b3d4:	601a      	str	r2, [r3, #0]
			Target_R_velo = Target_L_velo * (90-TREAD_WIDTH) / (90+TREAD_WIDTH);//50/130;//55.4 / 124.6;
 800b3d6:	4b45      	ldr	r3, [pc, #276]	; (800b4ec <slow_turn_R+0x15c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fc ffec 	bl	80083b8 <__aeabi_f2d>
 800b3e0:	a335      	add	r3, pc, #212	; (adr r3, 800b4b8 <slow_turn_R+0x128>)
 800b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e6:	f7fd f83f 	bl	8008468 <__aeabi_dmul>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	460c      	mov	r4, r1
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	a333      	add	r3, pc, #204	; (adr r3, 800b4c0 <slow_turn_R+0x130>)
 800b3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f8:	f7fd f960 	bl	80086bc <__aeabi_ddiv>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	460c      	mov	r4, r1
 800b400:	4618      	mov	r0, r3
 800b402:	4621      	mov	r1, r4
 800b404:	f7fd fb08 	bl	8008a18 <__aeabi_d2f>
 800b408:	4602      	mov	r2, r0
 800b40a:	4b3a      	ldr	r3, [pc, #232]	; (800b4f4 <slow_turn_R+0x164>)
 800b40c:	601a      	str	r2, [r3, #0]
		while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b40e:	4b33      	ldr	r3, [pc, #204]	; (800b4dc <slow_turn_R+0x14c>)
 800b410:	685a      	ldr	r2, [r3, #4]
 800b412:	4b33      	ldr	r3, [pc, #204]	; (800b4e0 <slow_turn_R+0x150>)
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	4413      	add	r3, r2
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fc ffbb 	bl	8008394 <__aeabi_i2d>
 800b41e:	a324      	add	r3, pc, #144	; (adr r3, 800b4b0 <slow_turn_R+0x120>)
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f7fd faa6 	bl	8008974 <__aeabi_dcmpge>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00f      	beq.n	800b44e <slow_turn_R+0xbe>
 800b42e:	4b2b      	ldr	r3, [pc, #172]	; (800b4dc <slow_turn_R+0x14c>)
 800b430:	685a      	ldr	r2, [r3, #4]
 800b432:	4b2b      	ldr	r3, [pc, #172]	; (800b4e0 <slow_turn_R+0x150>)
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	4413      	add	r3, r2
 800b438:	4618      	mov	r0, r3
 800b43a:	f7fc ffab 	bl	8008394 <__aeabi_i2d>
 800b43e:	a322      	add	r3, pc, #136	; (adr r3, 800b4c8 <slow_turn_R+0x138>)
 800b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b444:	f7fd fa82 	bl	800894c <__aeabi_dcmplt>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1bd      	bne.n	800b3ca <slow_turn_R+0x3a>

		}
		while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b44e:	e002      	b.n	800b456 <slow_turn_R+0xc6>
			mode.accel = 7;
 800b450:	4b21      	ldr	r3, [pc, #132]	; (800b4d8 <slow_turn_R+0x148>)
 800b452:	2207      	movs	r2, #7
 800b454:	705a      	strb	r2, [r3, #1]
		while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b456:	4b21      	ldr	r3, [pc, #132]	; (800b4dc <slow_turn_R+0x14c>)
 800b458:	685a      	ldr	r2, [r3, #4]
 800b45a:	4b21      	ldr	r3, [pc, #132]	; (800b4e0 <slow_turn_R+0x150>)
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	4413      	add	r3, r2
 800b460:	4618      	mov	r0, r3
 800b462:	f7fc ff97 	bl	8008394 <__aeabi_i2d>
 800b466:	a31a      	add	r3, pc, #104	; (adr r3, 800b4d0 <slow_turn_R+0x140>)
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	f7fd fa6e 	bl	800894c <__aeabi_dcmplt>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d1ec      	bne.n	800b450 <slow_turn_R+0xc0>

		}
		mode.accel = 0;
 800b476:	4b18      	ldr	r3, [pc, #96]	; (800b4d8 <slow_turn_R+0x148>)
 800b478:	2200      	movs	r2, #0
 800b47a:	705a      	strb	r2, [r3, #1]
=======
 800b370:	bf00      	nop
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	20000f70 	.word	0x20000f70
 800b37c:	20000efc 	.word	0x20000efc
 800b380:	20000cd0 	.word	0x20000cd0
 800b384:	20000cdc 	.word	0x20000cdc
 800b388:	20000ce8 	.word	0x20000ce8
 800b38c:	20000cf4 	.word	0x20000cf4
 800b390:	20000f74 	.word	0x20000f74
 800b394:	40400000 	.word	0x40400000
 800b398:	20000004 	.word	0x20000004
 800b39c:	00000000 	.word	0x00000000

0800b3a0 <slow_turn_R>:

void slow_turn_R(){
 800b3a0:	b598      	push	{r3, r4, r7, lr}
 800b3a2:	af00      	add	r7, sp, #0

		mode.control = 6;
 800b3a4:	4b50      	ldr	r3, [pc, #320]	; (800b4e8 <slow_turn_R+0x148>)
 800b3a6:	2206      	movs	r2, #6
 800b3a8:	715a      	strb	r2, [r3, #5]

		while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b3aa:	e002      	b.n	800b3b2 <slow_turn_R+0x12>
			mode.accel = 6;
 800b3ac:	4b4e      	ldr	r3, [pc, #312]	; (800b4e8 <slow_turn_R+0x148>)
 800b3ae:	2206      	movs	r2, #6
 800b3b0:	705a      	strb	r2, [r3, #1]
		while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b3b2:	4b4e      	ldr	r3, [pc, #312]	; (800b4ec <slow_turn_R+0x14c>)
 800b3b4:	685a      	ldr	r2, [r3, #4]
 800b3b6:	4b4e      	ldr	r3, [pc, #312]	; (800b4f0 <slow_turn_R+0x150>)
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7fc ffe9 	bl	8008394 <__aeabi_i2d>
 800b3c2:	a33f      	add	r3, pc, #252	; (adr r3, 800b4c0 <slow_turn_R+0x120>)
 800b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c8:	f7fd fac0 	bl	800894c <__aeabi_dcmplt>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1ec      	bne.n	800b3ac <slow_turn_R+0xc>

		}
		mode.accel = 0;
 800b3d2:	4b45      	ldr	r3, [pc, #276]	; (800b4e8 <slow_turn_R+0x148>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	705a      	strb	r2, [r3, #1]

		while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b3d8:	e021      	b.n	800b41e <slow_turn_R+0x7e>
			Target_velocity = CURVE_SPEED;
 800b3da:	4b46      	ldr	r3, [pc, #280]	; (800b4f4 <slow_turn_R+0x154>)
 800b3dc:	4a46      	ldr	r2, [pc, #280]	; (800b4f8 <slow_turn_R+0x158>)
 800b3de:	601a      	str	r2, [r3, #0]
			Target_L_velo = CURVE_SPEED  * 124.6/90;//130/90;//124.6/90;
 800b3e0:	4b46      	ldr	r3, [pc, #280]	; (800b4fc <slow_turn_R+0x15c>)
 800b3e2:	4a47      	ldr	r2, [pc, #284]	; (800b500 <slow_turn_R+0x160>)
 800b3e4:	601a      	str	r2, [r3, #0]
			Target_R_velo = Target_L_velo * 55.4 / 124.6;//50/130;//55.4 / 124.6;
 800b3e6:	4b45      	ldr	r3, [pc, #276]	; (800b4fc <slow_turn_R+0x15c>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7fc ffe4 	bl	80083b8 <__aeabi_f2d>
 800b3f0:	a335      	add	r3, pc, #212	; (adr r3, 800b4c8 <slow_turn_R+0x128>)
 800b3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f6:	f7fd f837 	bl	8008468 <__aeabi_dmul>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	4618      	mov	r0, r3
 800b400:	4621      	mov	r1, r4
 800b402:	a333      	add	r3, pc, #204	; (adr r3, 800b4d0 <slow_turn_R+0x130>)
 800b404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b408:	f7fd f958 	bl	80086bc <__aeabi_ddiv>
 800b40c:	4603      	mov	r3, r0
 800b40e:	460c      	mov	r4, r1
 800b410:	4618      	mov	r0, r3
 800b412:	4621      	mov	r1, r4
 800b414:	f7fd fb00 	bl	8008a18 <__aeabi_d2f>
 800b418:	4602      	mov	r2, r0
 800b41a:	4b3a      	ldr	r3, [pc, #232]	; (800b504 <slow_turn_R+0x164>)
 800b41c:	601a      	str	r2, [r3, #0]
		while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b41e:	4b33      	ldr	r3, [pc, #204]	; (800b4ec <slow_turn_R+0x14c>)
 800b420:	685a      	ldr	r2, [r3, #4]
 800b422:	4b33      	ldr	r3, [pc, #204]	; (800b4f0 <slow_turn_R+0x150>)
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	4413      	add	r3, r2
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fc ffb3 	bl	8008394 <__aeabi_i2d>
 800b42e:	a324      	add	r3, pc, #144	; (adr r3, 800b4c0 <slow_turn_R+0x120>)
 800b430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b434:	f7fd fa9e 	bl	8008974 <__aeabi_dcmpge>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00f      	beq.n	800b45e <slow_turn_R+0xbe>
 800b43e:	4b2b      	ldr	r3, [pc, #172]	; (800b4ec <slow_turn_R+0x14c>)
 800b440:	685a      	ldr	r2, [r3, #4]
 800b442:	4b2b      	ldr	r3, [pc, #172]	; (800b4f0 <slow_turn_R+0x150>)
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	4413      	add	r3, r2
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fc ffa3 	bl	8008394 <__aeabi_i2d>
 800b44e:	a322      	add	r3, pc, #136	; (adr r3, 800b4d8 <slow_turn_R+0x138>)
 800b450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b454:	f7fd fa7a 	bl	800894c <__aeabi_dcmplt>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d1bd      	bne.n	800b3da <slow_turn_R+0x3a>

		}
		while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b45e:	e002      	b.n	800b466 <slow_turn_R+0xc6>
			mode.accel = 7;
 800b460:	4b21      	ldr	r3, [pc, #132]	; (800b4e8 <slow_turn_R+0x148>)
 800b462:	2207      	movs	r2, #7
 800b464:	705a      	strb	r2, [r3, #1]
		while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b466:	4b21      	ldr	r3, [pc, #132]	; (800b4ec <slow_turn_R+0x14c>)
 800b468:	685a      	ldr	r2, [r3, #4]
 800b46a:	4b21      	ldr	r3, [pc, #132]	; (800b4f0 <slow_turn_R+0x150>)
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	4413      	add	r3, r2
 800b470:	4618      	mov	r0, r3
 800b472:	f7fc ff8f 	bl	8008394 <__aeabi_i2d>
 800b476:	a31a      	add	r3, pc, #104	; (adr r3, 800b4e0 <slow_turn_R+0x140>)
 800b478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47c:	f7fd fa66 	bl	800894c <__aeabi_dcmplt>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d1ec      	bne.n	800b460 <slow_turn_R+0xc0>

		}
		mode.accel = 0;
 800b486:	4b18      	ldr	r3, [pc, #96]	; (800b4e8 <slow_turn_R+0x148>)
 800b488:	2200      	movs	r2, #0
 800b48a:	705a      	strb	r2, [r3, #1]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
//		if(Body_angle < -90){
//			IMU_init();
//			break;
//		}

	mode.control = 4;
<<<<<<< HEAD
 800b47c:	4b16      	ldr	r3, [pc, #88]	; (800b4d8 <slow_turn_R+0x148>)
 800b47e:	2204      	movs	r2, #4
 800b480:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b482:	4b16      	ldr	r3, [pc, #88]	; (800b4dc <slow_turn_R+0x14c>)
 800b484:	2200      	movs	r2, #0
 800b486:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b488:	4b15      	ldr	r3, [pc, #84]	; (800b4e0 <slow_turn_R+0x150>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b48e:	4b1a      	ldr	r3, [pc, #104]	; (800b4f8 <slow_turn_R+0x168>)
 800b490:	2200      	movs	r2, #0
 800b492:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b494:	4b15      	ldr	r3, [pc, #84]	; (800b4ec <slow_turn_R+0x15c>)
 800b496:	f04f 0200 	mov.w	r2, #0
 800b49a:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b49c:	4b15      	ldr	r3, [pc, #84]	; (800b4f4 <slow_turn_R+0x164>)
 800b49e:	f04f 0200 	mov.w	r2, #0
 800b4a2:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b4a4:	4b0f      	ldr	r3, [pc, #60]	; (800b4e4 <slow_turn_R+0x154>)
 800b4a6:	4a10      	ldr	r2, [pc, #64]	; (800b4e8 <slow_turn_R+0x158>)
 800b4a8:	601a      	str	r2, [r3, #0]
}
 800b4aa:	bf00      	nop
 800b4ac:	bd98      	pop	{r3, r4, r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	234f4839 	.word	0x234f4839
 800b4b4:	40b7f082 	.word	0x40b7f082
 800b4b8:	9999999a 	.word	0x9999999a
 800b4bc:	404a9999 	.word	0x404a9999
 800b4c0:	33333333 	.word	0x33333333
 800b4c4:	405fb333 	.word	0x405fb333
 800b4c8:	9a953a3f 	.word	0x9a953a3f
 800b4cc:	40efc638 	.word	0x40efc638
 800b4d0:	6f7f91a3 	.word	0x6f7f91a3
 800b4d4:	40f16224 	.word	0x40f16224
 800b4d8:	20000068 	.word	0x20000068
 800b4dc:	20000044 	.word	0x20000044
 800b4e0:	20000050 	.word	0x20000050
 800b4e4:	200002e0 	.word	0x200002e0
 800b4e8:	43340000 	.word	0x43340000
 800b4ec:	2000e030 	.word	0x2000e030
 800b4f0:	437d999a 	.word	0x437d999a
 800b4f4:	2000e010 	.word	0x2000e010
 800b4f8:	2000005c 	.word	0x2000005c
 800b4fc:	00000000 	.word	0x00000000

0800b500 <slow_turn_L>:

void slow_turn_L(){
 800b500:	b598      	push	{r3, r4, r7, lr}
 800b502:	af00      	add	r7, sp, #0
	//左右輪制御
	mode.control = 6;
 800b504:	4b50      	ldr	r3, [pc, #320]	; (800b648 <slow_turn_L+0x148>)
 800b506:	2206      	movs	r2, #6
 800b508:	715a      	strb	r2, [r3, #5]

	//等加速度加速減速
	while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b50a:	e002      	b.n	800b512 <slow_turn_L+0x12>
		mode.accel = 4;
 800b50c:	4b4e      	ldr	r3, [pc, #312]	; (800b648 <slow_turn_L+0x148>)
 800b50e:	2204      	movs	r2, #4
 800b510:	705a      	strb	r2, [r3, #1]
	while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b512:	4b4e      	ldr	r3, [pc, #312]	; (800b64c <slow_turn_L+0x14c>)
 800b514:	685a      	ldr	r2, [r3, #4]
 800b516:	4b4e      	ldr	r3, [pc, #312]	; (800b650 <slow_turn_L+0x150>)
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	4413      	add	r3, r2
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fc ff39 	bl	8008394 <__aeabi_i2d>
 800b522:	a33f      	add	r3, pc, #252	; (adr r3, 800b620 <slow_turn_L+0x120>)
 800b524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b528:	f7fd fa10 	bl	800894c <__aeabi_dcmplt>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1ec      	bne.n	800b50c <slow_turn_L+0xc>
=======
 800b48c:	4b16      	ldr	r3, [pc, #88]	; (800b4e8 <slow_turn_R+0x148>)
 800b48e:	2204      	movs	r2, #4
 800b490:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b492:	4b16      	ldr	r3, [pc, #88]	; (800b4ec <slow_turn_R+0x14c>)
 800b494:	2200      	movs	r2, #0
 800b496:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b498:	4b15      	ldr	r3, [pc, #84]	; (800b4f0 <slow_turn_R+0x150>)
 800b49a:	2200      	movs	r2, #0
 800b49c:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b49e:	4b1a      	ldr	r3, [pc, #104]	; (800b508 <slow_turn_R+0x168>)
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b4a4:	4b15      	ldr	r3, [pc, #84]	; (800b4fc <slow_turn_R+0x15c>)
 800b4a6:	f04f 0200 	mov.w	r2, #0
 800b4aa:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b4ac:	4b15      	ldr	r3, [pc, #84]	; (800b504 <slow_turn_R+0x164>)
 800b4ae:	f04f 0200 	mov.w	r2, #0
 800b4b2:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b4b4:	4b0f      	ldr	r3, [pc, #60]	; (800b4f4 <slow_turn_R+0x154>)
 800b4b6:	4a15      	ldr	r2, [pc, #84]	; (800b50c <slow_turn_R+0x16c>)
 800b4b8:	601a      	str	r2, [r3, #0]
}
 800b4ba:	bf00      	nop
 800b4bc:	bd98      	pop	{r3, r4, r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	234f4839 	.word	0x234f4839
 800b4c4:	40b7f082 	.word	0x40b7f082
 800b4c8:	33333333 	.word	0x33333333
 800b4cc:	404bb333 	.word	0x404bb333
 800b4d0:	66666666 	.word	0x66666666
 800b4d4:	405f2666 	.word	0x405f2666
 800b4d8:	9a953a3f 	.word	0x9a953a3f
 800b4dc:	40efc638 	.word	0x40efc638
 800b4e0:	6f7f91a3 	.word	0x6f7f91a3
 800b4e4:	40f16224 	.word	0x40f16224
 800b4e8:	20000cf4 	.word	0x20000cf4
 800b4ec:	20000cd0 	.word	0x20000cd0
 800b4f0:	20000cdc 	.word	0x20000cdc
 800b4f4:	20000f70 	.word	0x20000f70
 800b4f8:	43340000 	.word	0x43340000
 800b4fc:	2000506c 	.word	0x2000506c
 800b500:	43793333 	.word	0x43793333
 800b504:	2000504c 	.word	0x2000504c
 800b508:	20000ce8 	.word	0x20000ce8
 800b50c:	43700000 	.word	0x43700000

0800b510 <slow_turn_L>:

void slow_turn_L(){
 800b510:	b598      	push	{r3, r4, r7, lr}
 800b512:	af00      	add	r7, sp, #0
	//左右輪制御
	mode.control = 6;
 800b514:	4b50      	ldr	r3, [pc, #320]	; (800b658 <slow_turn_L+0x148>)
 800b516:	2206      	movs	r2, #6
 800b518:	715a      	strb	r2, [r3, #5]

	//等加速度加速減速
	while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b51a:	e002      	b.n	800b522 <slow_turn_L+0x12>
		mode.accel = 4;
 800b51c:	4b4e      	ldr	r3, [pc, #312]	; (800b658 <slow_turn_L+0x148>)
 800b51e:	2204      	movs	r2, #4
 800b520:	705a      	strb	r2, [r3, #1]
	while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b522:	4b4e      	ldr	r3, [pc, #312]	; (800b65c <slow_turn_L+0x14c>)
 800b524:	685a      	ldr	r2, [r3, #4]
 800b526:	4b4e      	ldr	r3, [pc, #312]	; (800b660 <slow_turn_L+0x150>)
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	4413      	add	r3, r2
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7fc ff31 	bl	8008394 <__aeabi_i2d>
 800b532:	a33f      	add	r3, pc, #252	; (adr r3, 800b630 <slow_turn_L+0x120>)
 800b534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b538:	f7fd fa08 	bl	800894c <__aeabi_dcmplt>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d1ec      	bne.n	800b51c <slow_turn_L+0xc>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	}
	//加速やめる
	mode.accel = 0;
<<<<<<< HEAD
 800b532:	4b45      	ldr	r3, [pc, #276]	; (800b648 <slow_turn_L+0x148>)
 800b534:	2200      	movs	r2, #0
 800b536:	705a      	strb	r2, [r3, #1]

	//等速カーブ
	while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b538:	e021      	b.n	800b57e <slow_turn_L+0x7e>
		Target_velocity = CURVE_SPEED;
 800b53a:	4b46      	ldr	r3, [pc, #280]	; (800b654 <slow_turn_L+0x154>)
 800b53c:	4a46      	ldr	r2, [pc, #280]	; (800b658 <slow_turn_L+0x158>)
 800b53e:	601a      	str	r2, [r3, #0]
		Target_R_velo = CURVE_SPEED   * (90+TREAD_WIDTH)/90;
 800b540:	4b46      	ldr	r3, [pc, #280]	; (800b65c <slow_turn_L+0x15c>)
 800b542:	4a47      	ldr	r2, [pc, #284]	; (800b660 <slow_turn_L+0x160>)
 800b544:	601a      	str	r2, [r3, #0]
		Target_L_velo = Target_R_velo * (90-TREAD_WIDTH) / (90+TREAD_WIDTH);
 800b546:	4b45      	ldr	r3, [pc, #276]	; (800b65c <slow_turn_L+0x15c>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fc ff34 	bl	80083b8 <__aeabi_f2d>
 800b550:	a335      	add	r3, pc, #212	; (adr r3, 800b628 <slow_turn_L+0x128>)
 800b552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b556:	f7fc ff87 	bl	8008468 <__aeabi_dmul>
 800b55a:	4603      	mov	r3, r0
 800b55c:	460c      	mov	r4, r1
 800b55e:	4618      	mov	r0, r3
 800b560:	4621      	mov	r1, r4
 800b562:	a333      	add	r3, pc, #204	; (adr r3, 800b630 <slow_turn_L+0x130>)
 800b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b568:	f7fd f8a8 	bl	80086bc <__aeabi_ddiv>
 800b56c:	4603      	mov	r3, r0
 800b56e:	460c      	mov	r4, r1
 800b570:	4618      	mov	r0, r3
 800b572:	4621      	mov	r1, r4
 800b574:	f7fd fa50 	bl	8008a18 <__aeabi_d2f>
 800b578:	4602      	mov	r2, r0
 800b57a:	4b3a      	ldr	r3, [pc, #232]	; (800b664 <slow_turn_L+0x164>)
 800b57c:	601a      	str	r2, [r3, #0]
	while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b57e:	4b33      	ldr	r3, [pc, #204]	; (800b64c <slow_turn_L+0x14c>)
 800b580:	685a      	ldr	r2, [r3, #4]
 800b582:	4b33      	ldr	r3, [pc, #204]	; (800b650 <slow_turn_L+0x150>)
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	4413      	add	r3, r2
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fc ff03 	bl	8008394 <__aeabi_i2d>
 800b58e:	a324      	add	r3, pc, #144	; (adr r3, 800b620 <slow_turn_L+0x120>)
 800b590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b594:	f7fd f9ee 	bl	8008974 <__aeabi_dcmpge>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00f      	beq.n	800b5be <slow_turn_L+0xbe>
 800b59e:	4b2b      	ldr	r3, [pc, #172]	; (800b64c <slow_turn_L+0x14c>)
 800b5a0:	685a      	ldr	r2, [r3, #4]
 800b5a2:	4b2b      	ldr	r3, [pc, #172]	; (800b650 <slow_turn_L+0x150>)
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7fc fef3 	bl	8008394 <__aeabi_i2d>
 800b5ae:	a322      	add	r3, pc, #136	; (adr r3, 800b638 <slow_turn_L+0x138>)
 800b5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b4:	f7fd f9ca 	bl	800894c <__aeabi_dcmplt>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1bd      	bne.n	800b53a <slow_turn_L+0x3a>
		//タイヤ幅が広くなってから比率を変えていなかったはず
	}
	//等加速度加速減速
	while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b5be:	e002      	b.n	800b5c6 <slow_turn_L+0xc6>
		mode.accel = 5;
 800b5c0:	4b21      	ldr	r3, [pc, #132]	; (800b648 <slow_turn_L+0x148>)
 800b5c2:	2205      	movs	r2, #5
 800b5c4:	705a      	strb	r2, [r3, #1]
	while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b5c6:	4b21      	ldr	r3, [pc, #132]	; (800b64c <slow_turn_L+0x14c>)
 800b5c8:	685a      	ldr	r2, [r3, #4]
 800b5ca:	4b21      	ldr	r3, [pc, #132]	; (800b650 <slow_turn_L+0x150>)
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fc fedf 	bl	8008394 <__aeabi_i2d>
 800b5d6:	a31a      	add	r3, pc, #104	; (adr r3, 800b640 <slow_turn_L+0x140>)
 800b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5dc:	f7fd f9b6 	bl	800894c <__aeabi_dcmplt>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d1ec      	bne.n	800b5c0 <slow_turn_L+0xc0>
=======
 800b542:	4b45      	ldr	r3, [pc, #276]	; (800b658 <slow_turn_L+0x148>)
 800b544:	2200      	movs	r2, #0
 800b546:	705a      	strb	r2, [r3, #1]

	//等速カーブ
	while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b548:	e021      	b.n	800b58e <slow_turn_L+0x7e>
		Target_velocity = CURVE_SPEED;
 800b54a:	4b46      	ldr	r3, [pc, #280]	; (800b664 <slow_turn_L+0x154>)
 800b54c:	4a46      	ldr	r2, [pc, #280]	; (800b668 <slow_turn_L+0x158>)
 800b54e:	601a      	str	r2, [r3, #0]
		Target_R_velo = CURVE_SPEED   * 124.6/90;
 800b550:	4b46      	ldr	r3, [pc, #280]	; (800b66c <slow_turn_L+0x15c>)
 800b552:	4a47      	ldr	r2, [pc, #284]	; (800b670 <slow_turn_L+0x160>)
 800b554:	601a      	str	r2, [r3, #0]
		Target_L_velo = Target_R_velo * 55.4 / 124.6;
 800b556:	4b45      	ldr	r3, [pc, #276]	; (800b66c <slow_turn_L+0x15c>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fc ff2c 	bl	80083b8 <__aeabi_f2d>
 800b560:	a335      	add	r3, pc, #212	; (adr r3, 800b638 <slow_turn_L+0x128>)
 800b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b566:	f7fc ff7f 	bl	8008468 <__aeabi_dmul>
 800b56a:	4603      	mov	r3, r0
 800b56c:	460c      	mov	r4, r1
 800b56e:	4618      	mov	r0, r3
 800b570:	4621      	mov	r1, r4
 800b572:	a333      	add	r3, pc, #204	; (adr r3, 800b640 <slow_turn_L+0x130>)
 800b574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b578:	f7fd f8a0 	bl	80086bc <__aeabi_ddiv>
 800b57c:	4603      	mov	r3, r0
 800b57e:	460c      	mov	r4, r1
 800b580:	4618      	mov	r0, r3
 800b582:	4621      	mov	r1, r4
 800b584:	f7fd fa48 	bl	8008a18 <__aeabi_d2f>
 800b588:	4602      	mov	r2, r0
 800b58a:	4b3a      	ldr	r3, [pc, #232]	; (800b674 <slow_turn_L+0x164>)
 800b58c:	601a      	str	r2, [r3, #0]
	while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b58e:	4b33      	ldr	r3, [pc, #204]	; (800b65c <slow_turn_L+0x14c>)
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	4b33      	ldr	r3, [pc, #204]	; (800b660 <slow_turn_L+0x150>)
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	4413      	add	r3, r2
 800b598:	4618      	mov	r0, r3
 800b59a:	f7fc fefb 	bl	8008394 <__aeabi_i2d>
 800b59e:	a324      	add	r3, pc, #144	; (adr r3, 800b630 <slow_turn_L+0x120>)
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	f7fd f9e6 	bl	8008974 <__aeabi_dcmpge>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00f      	beq.n	800b5ce <slow_turn_L+0xbe>
 800b5ae:	4b2b      	ldr	r3, [pc, #172]	; (800b65c <slow_turn_L+0x14c>)
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	4b2b      	ldr	r3, [pc, #172]	; (800b660 <slow_turn_L+0x150>)
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fc feeb 	bl	8008394 <__aeabi_i2d>
 800b5be:	a322      	add	r3, pc, #136	; (adr r3, 800b648 <slow_turn_L+0x138>)
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f7fd f9c2 	bl	800894c <__aeabi_dcmplt>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1bd      	bne.n	800b54a <slow_turn_L+0x3a>
	}
	//等加速度加速減速
	while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b5ce:	e002      	b.n	800b5d6 <slow_turn_L+0xc6>
		mode.accel = 5;
 800b5d0:	4b21      	ldr	r3, [pc, #132]	; (800b658 <slow_turn_L+0x148>)
 800b5d2:	2205      	movs	r2, #5
 800b5d4:	705a      	strb	r2, [r3, #1]
	while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b5d6:	4b21      	ldr	r3, [pc, #132]	; (800b65c <slow_turn_L+0x14c>)
 800b5d8:	685a      	ldr	r2, [r3, #4]
 800b5da:	4b21      	ldr	r3, [pc, #132]	; (800b660 <slow_turn_L+0x150>)
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	4413      	add	r3, r2
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7fc fed7 	bl	8008394 <__aeabi_i2d>
 800b5e6:	a31a      	add	r3, pc, #104	; (adr r3, 800b650 <slow_turn_L+0x140>)
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	f7fd f9ae 	bl	800894c <__aeabi_dcmplt>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1ec      	bne.n	800b5d0 <slow_turn_L+0xc0>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	}
	//加減速やめる
	mode.accel = 0;
<<<<<<< HEAD
 800b5e6:	4b18      	ldr	r3, [pc, #96]	; (800b648 <slow_turn_L+0x148>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	705a      	strb	r2, [r3, #1]
=======
 800b5f6:	4b18      	ldr	r3, [pc, #96]	; (800b658 <slow_turn_L+0x148>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	705a      	strb	r2, [r3, #1]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
//		if(Body_angle > 90){
//			IMU_init();
//			break;
//		}

	mode.control = 4;
<<<<<<< HEAD
 800b5ec:	4b16      	ldr	r3, [pc, #88]	; (800b648 <slow_turn_L+0x148>)
 800b5ee:	2204      	movs	r2, #4
 800b5f0:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b5f2:	4b16      	ldr	r3, [pc, #88]	; (800b64c <slow_turn_L+0x14c>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b5f8:	4b15      	ldr	r3, [pc, #84]	; (800b650 <slow_turn_L+0x150>)
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b5fe:	4b1a      	ldr	r3, [pc, #104]	; (800b668 <slow_turn_L+0x168>)
 800b600:	2200      	movs	r2, #0
 800b602:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b604:	4b17      	ldr	r3, [pc, #92]	; (800b664 <slow_turn_L+0x164>)
 800b606:	f04f 0200 	mov.w	r2, #0
 800b60a:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b60c:	4b13      	ldr	r3, [pc, #76]	; (800b65c <slow_turn_L+0x15c>)
 800b60e:	f04f 0200 	mov.w	r2, #0
 800b612:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b614:	4b0f      	ldr	r3, [pc, #60]	; (800b654 <slow_turn_L+0x154>)
 800b616:	4a10      	ldr	r2, [pc, #64]	; (800b658 <slow_turn_L+0x158>)
 800b618:	601a      	str	r2, [r3, #0]
}
 800b61a:	bf00      	nop
 800b61c:	bd98      	pop	{r3, r4, r7, pc}
 800b61e:	bf00      	nop
 800b620:	234f4839 	.word	0x234f4839
 800b624:	40b7f082 	.word	0x40b7f082
 800b628:	9999999a 	.word	0x9999999a
 800b62c:	404a9999 	.word	0x404a9999
 800b630:	33333333 	.word	0x33333333
 800b634:	405fb333 	.word	0x405fb333
 800b638:	9a953a3f 	.word	0x9a953a3f
 800b63c:	40efc638 	.word	0x40efc638
 800b640:	6f7f91a3 	.word	0x6f7f91a3
 800b644:	40f16224 	.word	0x40f16224
 800b648:	20000068 	.word	0x20000068
 800b64c:	20000044 	.word	0x20000044
 800b650:	20000050 	.word	0x20000050
 800b654:	200002e0 	.word	0x200002e0
 800b658:	43340000 	.word	0x43340000
 800b65c:	2000e010 	.word	0x2000e010
 800b660:	437d999a 	.word	0x437d999a
 800b664:	2000e030 	.word	0x2000e030
 800b668:	2000005c 	.word	0x2000005c
 800b66c:	00000000 	.word	0x00000000

0800b670 <shinchi_turn_R>:

void shinchi_turn_R(){
 800b670:	b580      	push	{r7, lr}
 800b672:	af00      	add	r7, sp, #0

	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2 ){
 800b674:	e070      	b.n	800b758 <shinchi_turn_R+0xe8>
		if(EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2){
 800b676:	4b56      	ldr	r3, [pc, #344]	; (800b7d0 <shinchi_turn_R+0x160>)
 800b678:	685a      	ldr	r2, [r3, #4]
 800b67a:	4b56      	ldr	r3, [pc, #344]	; (800b7d4 <shinchi_turn_R+0x164>)
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	4413      	add	r3, r2
 800b680:	4618      	mov	r0, r3
 800b682:	f7fc fe87 	bl	8008394 <__aeabi_i2d>
 800b686:	a34a      	add	r3, pc, #296	; (adr r3, 800b7b0 <shinchi_turn_R+0x140>)
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	f7fd f95e 	bl	800894c <__aeabi_dcmplt>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d005      	beq.n	800b6a2 <shinchi_turn_R+0x32>
			mode.control = 4;
 800b696:	4b50      	ldr	r3, [pc, #320]	; (800b7d8 <shinchi_turn_R+0x168>)
 800b698:	2204      	movs	r2, #4
 800b69a:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b69c:	4b4f      	ldr	r3, [pc, #316]	; (800b7dc <shinchi_turn_R+0x16c>)
 800b69e:	4a50      	ldr	r2, [pc, #320]	; (800b7e0 <shinchi_turn_R+0x170>)
 800b6a0:	601a      	str	r2, [r3, #0]
		}
		if(DECE_CURVE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE){
 800b6a2:	4b4b      	ldr	r3, [pc, #300]	; (800b7d0 <shinchi_turn_R+0x160>)
 800b6a4:	685a      	ldr	r2, [r3, #4]
 800b6a6:	4b4b      	ldr	r3, [pc, #300]	; (800b7d4 <shinchi_turn_R+0x164>)
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7fc fe71 	bl	8008394 <__aeabi_i2d>
 800b6b2:	a33f      	add	r3, pc, #252	; (adr r3, 800b7b0 <shinchi_turn_R+0x140>)
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	f7fd f95c 	bl	8008974 <__aeabi_dcmpge>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d022      	beq.n	800b708 <shinchi_turn_R+0x98>
 800b6c2:	4b43      	ldr	r3, [pc, #268]	; (800b7d0 <shinchi_turn_R+0x160>)
 800b6c4:	685a      	ldr	r2, [r3, #4]
 800b6c6:	4b43      	ldr	r3, [pc, #268]	; (800b7d4 <shinchi_turn_R+0x164>)
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	4413      	add	r3, r2
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fc fe61 	bl	8008394 <__aeabi_i2d>
 800b6d2:	a339      	add	r3, pc, #228	; (adr r3, 800b7b8 <shinchi_turn_R+0x148>)
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	f7fd f938 	bl	800894c <__aeabi_dcmplt>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d012      	beq.n	800b708 <shinchi_turn_R+0x98>
		mode.control = 6;
 800b6e2:	4b3d      	ldr	r3, [pc, #244]	; (800b7d8 <shinchi_turn_R+0x168>)
 800b6e4:	2206      	movs	r2, #6
 800b6e6:	715a      	strb	r2, [r3, #5]
		//IMU_Control(Target_Rad_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
		Target_velocity = CURVE_SPEED;
 800b6e8:	4b3c      	ldr	r3, [pc, #240]	; (800b7dc <shinchi_turn_R+0x16c>)
 800b6ea:	4a3d      	ldr	r2, [pc, #244]	; (800b7e0 <shinchi_turn_R+0x170>)
 800b6ec:	601a      	str	r2, [r3, #0]
		Target_L_velo = CURVE_SPEED  * 2;
 800b6ee:	4b3d      	ldr	r3, [pc, #244]	; (800b7e4 <shinchi_turn_R+0x174>)
 800b6f0:	4a3d      	ldr	r2, [pc, #244]	; (800b7e8 <shinchi_turn_R+0x178>)
 800b6f2:	601a      	str	r2, [r3, #0]
		Target_R_velo = Target_L_velo * 0;
 800b6f4:	4b3b      	ldr	r3, [pc, #236]	; (800b7e4 <shinchi_turn_R+0x174>)
 800b6f6:	edd3 7a00 	vldr	s15, [r3]
 800b6fa:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800b7ec <shinchi_turn_R+0x17c>
 800b6fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b702:	4b3b      	ldr	r3, [pc, #236]	; (800b7f0 <shinchi_turn_R+0x180>)
 800b704:	edc3 7a00 	vstr	s15, [r3]
		}
		if(DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 4 + SHINCHI_ROTATE_PULSE){
 800b708:	4b31      	ldr	r3, [pc, #196]	; (800b7d0 <shinchi_turn_R+0x160>)
 800b70a:	685a      	ldr	r2, [r3, #4]
 800b70c:	4b31      	ldr	r3, [pc, #196]	; (800b7d4 <shinchi_turn_R+0x164>)
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	4413      	add	r3, r2
 800b712:	4618      	mov	r0, r3
 800b714:	f7fc fe3e 	bl	8008394 <__aeabi_i2d>
 800b718:	a327      	add	r3, pc, #156	; (adr r3, 800b7b8 <shinchi_turn_R+0x148>)
 800b71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71e:	f7fd f929 	bl	8008974 <__aeabi_dcmpge>
 800b722:	4603      	mov	r3, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d100      	bne.n	800b72a <shinchi_turn_R+0xba>
 800b728:	e016      	b.n	800b758 <shinchi_turn_R+0xe8>
 800b72a:	4b29      	ldr	r3, [pc, #164]	; (800b7d0 <shinchi_turn_R+0x160>)
 800b72c:	685a      	ldr	r2, [r3, #4]
 800b72e:	4b29      	ldr	r3, [pc, #164]	; (800b7d4 <shinchi_turn_R+0x164>)
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	4413      	add	r3, r2
 800b734:	4618      	mov	r0, r3
 800b736:	f7fc fe2d 	bl	8008394 <__aeabi_i2d>
 800b73a:	a321      	add	r3, pc, #132	; (adr r3, 800b7c0 <shinchi_turn_R+0x150>)
 800b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b740:	f7fd f904 	bl	800894c <__aeabi_dcmplt>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d100      	bne.n	800b74c <shinchi_turn_R+0xdc>
 800b74a:	e005      	b.n	800b758 <shinchi_turn_R+0xe8>
			mode.control = 4;
 800b74c:	4b22      	ldr	r3, [pc, #136]	; (800b7d8 <shinchi_turn_R+0x168>)
 800b74e:	2204      	movs	r2, #4
 800b750:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b752:	4b22      	ldr	r3, [pc, #136]	; (800b7dc <shinchi_turn_R+0x16c>)
 800b754:	4a22      	ldr	r2, [pc, #136]	; (800b7e0 <shinchi_turn_R+0x170>)
 800b756:	601a      	str	r2, [r3, #0]
	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2 ){
 800b758:	4b1d      	ldr	r3, [pc, #116]	; (800b7d0 <shinchi_turn_R+0x160>)
 800b75a:	685a      	ldr	r2, [r3, #4]
 800b75c:	4b1d      	ldr	r3, [pc, #116]	; (800b7d4 <shinchi_turn_R+0x164>)
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	4413      	add	r3, r2
 800b762:	4618      	mov	r0, r3
 800b764:	f7fc fe16 	bl	8008394 <__aeabi_i2d>
 800b768:	a317      	add	r3, pc, #92	; (adr r3, 800b7c8 <shinchi_turn_R+0x158>)
 800b76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76e:	f7fd f8ed 	bl	800894c <__aeabi_dcmplt>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	f47f af7e 	bne.w	800b676 <shinchi_turn_R+0x6>
=======
 800b5fc:	4b16      	ldr	r3, [pc, #88]	; (800b658 <slow_turn_L+0x148>)
 800b5fe:	2204      	movs	r2, #4
 800b600:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b602:	4b16      	ldr	r3, [pc, #88]	; (800b65c <slow_turn_L+0x14c>)
 800b604:	2200      	movs	r2, #0
 800b606:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b608:	4b15      	ldr	r3, [pc, #84]	; (800b660 <slow_turn_L+0x150>)
 800b60a:	2200      	movs	r2, #0
 800b60c:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b60e:	4b1a      	ldr	r3, [pc, #104]	; (800b678 <slow_turn_L+0x168>)
 800b610:	2200      	movs	r2, #0
 800b612:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b614:	4b17      	ldr	r3, [pc, #92]	; (800b674 <slow_turn_L+0x164>)
 800b616:	f04f 0200 	mov.w	r2, #0
 800b61a:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b61c:	4b13      	ldr	r3, [pc, #76]	; (800b66c <slow_turn_L+0x15c>)
 800b61e:	f04f 0200 	mov.w	r2, #0
 800b622:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b624:	4b0f      	ldr	r3, [pc, #60]	; (800b664 <slow_turn_L+0x154>)
 800b626:	4a15      	ldr	r2, [pc, #84]	; (800b67c <slow_turn_L+0x16c>)
 800b628:	601a      	str	r2, [r3, #0]
}
 800b62a:	bf00      	nop
 800b62c:	bd98      	pop	{r3, r4, r7, pc}
 800b62e:	bf00      	nop
 800b630:	234f4839 	.word	0x234f4839
 800b634:	40b7f082 	.word	0x40b7f082
 800b638:	33333333 	.word	0x33333333
 800b63c:	404bb333 	.word	0x404bb333
 800b640:	66666666 	.word	0x66666666
 800b644:	405f2666 	.word	0x405f2666
 800b648:	9a953a3f 	.word	0x9a953a3f
 800b64c:	40efc638 	.word	0x40efc638
 800b650:	6f7f91a3 	.word	0x6f7f91a3
 800b654:	40f16224 	.word	0x40f16224
 800b658:	20000cf4 	.word	0x20000cf4
 800b65c:	20000cd0 	.word	0x20000cd0
 800b660:	20000cdc 	.word	0x20000cdc
 800b664:	20000f70 	.word	0x20000f70
 800b668:	43340000 	.word	0x43340000
 800b66c:	2000504c 	.word	0x2000504c
 800b670:	43793333 	.word	0x43793333
 800b674:	2000506c 	.word	0x2000506c
 800b678:	20000ce8 	.word	0x20000ce8
 800b67c:	43700000 	.word	0x43700000

0800b680 <shinchi_turn_R>:

void shinchi_turn_R(){
 800b680:	b580      	push	{r7, lr}
 800b682:	af00      	add	r7, sp, #0

	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2 ){
 800b684:	e070      	b.n	800b768 <shinchi_turn_R+0xe8>
		if(EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2){
 800b686:	4b56      	ldr	r3, [pc, #344]	; (800b7e0 <shinchi_turn_R+0x160>)
 800b688:	685a      	ldr	r2, [r3, #4]
 800b68a:	4b56      	ldr	r3, [pc, #344]	; (800b7e4 <shinchi_turn_R+0x164>)
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	4413      	add	r3, r2
 800b690:	4618      	mov	r0, r3
 800b692:	f7fc fe7f 	bl	8008394 <__aeabi_i2d>
 800b696:	a34a      	add	r3, pc, #296	; (adr r3, 800b7c0 <shinchi_turn_R+0x140>)
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	f7fd f956 	bl	800894c <__aeabi_dcmplt>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d005      	beq.n	800b6b2 <shinchi_turn_R+0x32>
			mode.control = 4;
 800b6a6:	4b50      	ldr	r3, [pc, #320]	; (800b7e8 <shinchi_turn_R+0x168>)
 800b6a8:	2204      	movs	r2, #4
 800b6aa:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b6ac:	4b4f      	ldr	r3, [pc, #316]	; (800b7ec <shinchi_turn_R+0x16c>)
 800b6ae:	4a50      	ldr	r2, [pc, #320]	; (800b7f0 <shinchi_turn_R+0x170>)
 800b6b0:	601a      	str	r2, [r3, #0]
		}
		if(DECE_CURVE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE){
 800b6b2:	4b4b      	ldr	r3, [pc, #300]	; (800b7e0 <shinchi_turn_R+0x160>)
 800b6b4:	685a      	ldr	r2, [r3, #4]
 800b6b6:	4b4b      	ldr	r3, [pc, #300]	; (800b7e4 <shinchi_turn_R+0x164>)
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fc fe69 	bl	8008394 <__aeabi_i2d>
 800b6c2:	a33f      	add	r3, pc, #252	; (adr r3, 800b7c0 <shinchi_turn_R+0x140>)
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	f7fd f954 	bl	8008974 <__aeabi_dcmpge>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d022      	beq.n	800b718 <shinchi_turn_R+0x98>
 800b6d2:	4b43      	ldr	r3, [pc, #268]	; (800b7e0 <shinchi_turn_R+0x160>)
 800b6d4:	685a      	ldr	r2, [r3, #4]
 800b6d6:	4b43      	ldr	r3, [pc, #268]	; (800b7e4 <shinchi_turn_R+0x164>)
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	4413      	add	r3, r2
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7fc fe59 	bl	8008394 <__aeabi_i2d>
 800b6e2:	a339      	add	r3, pc, #228	; (adr r3, 800b7c8 <shinchi_turn_R+0x148>)
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	f7fd f930 	bl	800894c <__aeabi_dcmplt>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d012      	beq.n	800b718 <shinchi_turn_R+0x98>
		mode.control = 6;
 800b6f2:	4b3d      	ldr	r3, [pc, #244]	; (800b7e8 <shinchi_turn_R+0x168>)
 800b6f4:	2206      	movs	r2, #6
 800b6f6:	715a      	strb	r2, [r3, #5]
		//IMU_Control(Target_Rad_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
		Target_velocity = CURVE_SPEED;
 800b6f8:	4b3c      	ldr	r3, [pc, #240]	; (800b7ec <shinchi_turn_R+0x16c>)
 800b6fa:	4a3d      	ldr	r2, [pc, #244]	; (800b7f0 <shinchi_turn_R+0x170>)
 800b6fc:	601a      	str	r2, [r3, #0]
		Target_L_velo = CURVE_SPEED  * 2;
 800b6fe:	4b3d      	ldr	r3, [pc, #244]	; (800b7f4 <shinchi_turn_R+0x174>)
 800b700:	4a3d      	ldr	r2, [pc, #244]	; (800b7f8 <shinchi_turn_R+0x178>)
 800b702:	601a      	str	r2, [r3, #0]
		Target_R_velo = Target_L_velo * 0;
 800b704:	4b3b      	ldr	r3, [pc, #236]	; (800b7f4 <shinchi_turn_R+0x174>)
 800b706:	edd3 7a00 	vldr	s15, [r3]
 800b70a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800b7fc <shinchi_turn_R+0x17c>
 800b70e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b712:	4b3b      	ldr	r3, [pc, #236]	; (800b800 <shinchi_turn_R+0x180>)
 800b714:	edc3 7a00 	vstr	s15, [r3]
		}
		if(DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 4 + SHINCHI_ROTATE_PULSE){
 800b718:	4b31      	ldr	r3, [pc, #196]	; (800b7e0 <shinchi_turn_R+0x160>)
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	4b31      	ldr	r3, [pc, #196]	; (800b7e4 <shinchi_turn_R+0x164>)
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	4413      	add	r3, r2
 800b722:	4618      	mov	r0, r3
 800b724:	f7fc fe36 	bl	8008394 <__aeabi_i2d>
 800b728:	a327      	add	r3, pc, #156	; (adr r3, 800b7c8 <shinchi_turn_R+0x148>)
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f7fd f921 	bl	8008974 <__aeabi_dcmpge>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d100      	bne.n	800b73a <shinchi_turn_R+0xba>
 800b738:	e016      	b.n	800b768 <shinchi_turn_R+0xe8>
 800b73a:	4b29      	ldr	r3, [pc, #164]	; (800b7e0 <shinchi_turn_R+0x160>)
 800b73c:	685a      	ldr	r2, [r3, #4]
 800b73e:	4b29      	ldr	r3, [pc, #164]	; (800b7e4 <shinchi_turn_R+0x164>)
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	4413      	add	r3, r2
 800b744:	4618      	mov	r0, r3
 800b746:	f7fc fe25 	bl	8008394 <__aeabi_i2d>
 800b74a:	a321      	add	r3, pc, #132	; (adr r3, 800b7d0 <shinchi_turn_R+0x150>)
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	f7fd f8fc 	bl	800894c <__aeabi_dcmplt>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d100      	bne.n	800b75c <shinchi_turn_R+0xdc>
 800b75a:	e005      	b.n	800b768 <shinchi_turn_R+0xe8>
			mode.control = 4;
 800b75c:	4b22      	ldr	r3, [pc, #136]	; (800b7e8 <shinchi_turn_R+0x168>)
 800b75e:	2204      	movs	r2, #4
 800b760:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b762:	4b22      	ldr	r3, [pc, #136]	; (800b7ec <shinchi_turn_R+0x16c>)
 800b764:	4a22      	ldr	r2, [pc, #136]	; (800b7f0 <shinchi_turn_R+0x170>)
 800b766:	601a      	str	r2, [r3, #0]
	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2 ){
 800b768:	4b1d      	ldr	r3, [pc, #116]	; (800b7e0 <shinchi_turn_R+0x160>)
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	4b1d      	ldr	r3, [pc, #116]	; (800b7e4 <shinchi_turn_R+0x164>)
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	4413      	add	r3, r2
 800b772:	4618      	mov	r0, r3
 800b774:	f7fc fe0e 	bl	8008394 <__aeabi_i2d>
 800b778:	a317      	add	r3, pc, #92	; (adr r3, 800b7d8 <shinchi_turn_R+0x158>)
 800b77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77e:	f7fd f8e5 	bl	800894c <__aeabi_dcmplt>
 800b782:	4603      	mov	r3, r0
 800b784:	2b00      	cmp	r3, #0
 800b786:	f47f af7e 	bne.w	800b686 <shinchi_turn_R+0x6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
//			IMU_init();
//			break;
//		}

	}
	mode.control = 4;
<<<<<<< HEAD
 800b77a:	4b17      	ldr	r3, [pc, #92]	; (800b7d8 <shinchi_turn_R+0x168>)
 800b77c:	2204      	movs	r2, #4
 800b77e:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b780:	4b13      	ldr	r3, [pc, #76]	; (800b7d0 <shinchi_turn_R+0x160>)
 800b782:	2200      	movs	r2, #0
 800b784:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b786:	4b13      	ldr	r3, [pc, #76]	; (800b7d4 <shinchi_turn_R+0x164>)
 800b788:	2200      	movs	r2, #0
 800b78a:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b78c:	4b19      	ldr	r3, [pc, #100]	; (800b7f4 <shinchi_turn_R+0x184>)
 800b78e:	2200      	movs	r2, #0
 800b790:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b792:	4b14      	ldr	r3, [pc, #80]	; (800b7e4 <shinchi_turn_R+0x174>)
 800b794:	f04f 0200 	mov.w	r2, #0
 800b798:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b79a:	4b15      	ldr	r3, [pc, #84]	; (800b7f0 <shinchi_turn_R+0x180>)
 800b79c:	f04f 0200 	mov.w	r2, #0
 800b7a0:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b7a2:	4b0e      	ldr	r3, [pc, #56]	; (800b7dc <shinchi_turn_R+0x16c>)
 800b7a4:	4a0e      	ldr	r2, [pc, #56]	; (800b7e0 <shinchi_turn_R+0x170>)
 800b7a6:	601a      	str	r2, [r3, #0]

}
 800b7a8:	bf00      	nop
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	f3af 8000 	nop.w
 800b7b0:	04cdaf52 	.word	0x04cdaf52
 800b7b4:	40da2a96 	.word	0x40da2a96
 800b7b8:	40001702 	.word	0x40001702
 800b7bc:	40eb4c85 	.word	0x40eb4c85
 800b7c0:	21337755 	.word	0x21337755
 800b7c4:	40f430e8 	.word	0x40f430e8
 800b7c8:	21337756 	.word	0x21337756
 800b7cc:	40f430e8 	.word	0x40f430e8
 800b7d0:	20000044 	.word	0x20000044
 800b7d4:	20000050 	.word	0x20000050
 800b7d8:	20000068 	.word	0x20000068
 800b7dc:	200002e0 	.word	0x200002e0
 800b7e0:	43340000 	.word	0x43340000
 800b7e4:	2000e030 	.word	0x2000e030
 800b7e8:	43b40000 	.word	0x43b40000
 800b7ec:	00000000 	.word	0x00000000
 800b7f0:	2000e010 	.word	0x2000e010
 800b7f4:	2000005c 	.word	0x2000005c

0800b7f8 <shinchi_turn_L>:
void shinchi_turn_L(){
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	af00      	add	r7, sp, #0

	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2){
 800b7fc:	e070      	b.n	800b8e0 <shinchi_turn_L+0xe8>
		if(EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2){
 800b7fe:	4b56      	ldr	r3, [pc, #344]	; (800b958 <shinchi_turn_L+0x160>)
 800b800:	685a      	ldr	r2, [r3, #4]
 800b802:	4b56      	ldr	r3, [pc, #344]	; (800b95c <shinchi_turn_L+0x164>)
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	4413      	add	r3, r2
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fc fdc3 	bl	8008394 <__aeabi_i2d>
 800b80e:	a34a      	add	r3, pc, #296	; (adr r3, 800b938 <shinchi_turn_L+0x140>)
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	f7fd f89a 	bl	800894c <__aeabi_dcmplt>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d005      	beq.n	800b82a <shinchi_turn_L+0x32>
			mode.control = 4;
 800b81e:	4b50      	ldr	r3, [pc, #320]	; (800b960 <shinchi_turn_L+0x168>)
 800b820:	2204      	movs	r2, #4
 800b822:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b824:	4b4f      	ldr	r3, [pc, #316]	; (800b964 <shinchi_turn_L+0x16c>)
 800b826:	4a50      	ldr	r2, [pc, #320]	; (800b968 <shinchi_turn_L+0x170>)
 800b828:	601a      	str	r2, [r3, #0]
		}
		if(DECE_CURVE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE){
 800b82a:	4b4b      	ldr	r3, [pc, #300]	; (800b958 <shinchi_turn_L+0x160>)
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	4b4b      	ldr	r3, [pc, #300]	; (800b95c <shinchi_turn_L+0x164>)
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	4413      	add	r3, r2
 800b834:	4618      	mov	r0, r3
 800b836:	f7fc fdad 	bl	8008394 <__aeabi_i2d>
 800b83a:	a33f      	add	r3, pc, #252	; (adr r3, 800b938 <shinchi_turn_L+0x140>)
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f7fd f898 	bl	8008974 <__aeabi_dcmpge>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d022      	beq.n	800b890 <shinchi_turn_L+0x98>
 800b84a:	4b43      	ldr	r3, [pc, #268]	; (800b958 <shinchi_turn_L+0x160>)
 800b84c:	685a      	ldr	r2, [r3, #4]
 800b84e:	4b43      	ldr	r3, [pc, #268]	; (800b95c <shinchi_turn_L+0x164>)
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	4413      	add	r3, r2
 800b854:	4618      	mov	r0, r3
 800b856:	f7fc fd9d 	bl	8008394 <__aeabi_i2d>
 800b85a:	a339      	add	r3, pc, #228	; (adr r3, 800b940 <shinchi_turn_L+0x148>)
 800b85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b860:	f7fd f874 	bl	800894c <__aeabi_dcmplt>
 800b864:	4603      	mov	r3, r0
 800b866:	2b00      	cmp	r3, #0
 800b868:	d012      	beq.n	800b890 <shinchi_turn_L+0x98>
		mode.control = 6;
 800b86a:	4b3d      	ldr	r3, [pc, #244]	; (800b960 <shinchi_turn_L+0x168>)
 800b86c:	2206      	movs	r2, #6
 800b86e:	715a      	strb	r2, [r3, #5]
		Target_velocity = CURVE_SPEED;
 800b870:	4b3c      	ldr	r3, [pc, #240]	; (800b964 <shinchi_turn_L+0x16c>)
 800b872:	4a3d      	ldr	r2, [pc, #244]	; (800b968 <shinchi_turn_L+0x170>)
 800b874:	601a      	str	r2, [r3, #0]
		Target_R_velo = CURVE_SPEED  * 2;
 800b876:	4b3d      	ldr	r3, [pc, #244]	; (800b96c <shinchi_turn_L+0x174>)
 800b878:	4a3d      	ldr	r2, [pc, #244]	; (800b970 <shinchi_turn_L+0x178>)
 800b87a:	601a      	str	r2, [r3, #0]
		Target_L_velo = Target_R_velo * 0;
 800b87c:	4b3b      	ldr	r3, [pc, #236]	; (800b96c <shinchi_turn_L+0x174>)
 800b87e:	edd3 7a00 	vldr	s15, [r3]
 800b882:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800b974 <shinchi_turn_L+0x17c>
 800b886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b88a:	4b3b      	ldr	r3, [pc, #236]	; (800b978 <shinchi_turn_L+0x180>)
 800b88c:	edc3 7a00 	vstr	s15, [r3]
		}
		if(DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 4 + SHINCHI_ROTATE_PULSE){
 800b890:	4b31      	ldr	r3, [pc, #196]	; (800b958 <shinchi_turn_L+0x160>)
 800b892:	685a      	ldr	r2, [r3, #4]
 800b894:	4b31      	ldr	r3, [pc, #196]	; (800b95c <shinchi_turn_L+0x164>)
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	4413      	add	r3, r2
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fc fd7a 	bl	8008394 <__aeabi_i2d>
 800b8a0:	a327      	add	r3, pc, #156	; (adr r3, 800b940 <shinchi_turn_L+0x148>)
 800b8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a6:	f7fd f865 	bl	8008974 <__aeabi_dcmpge>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d100      	bne.n	800b8b2 <shinchi_turn_L+0xba>
 800b8b0:	e016      	b.n	800b8e0 <shinchi_turn_L+0xe8>
 800b8b2:	4b29      	ldr	r3, [pc, #164]	; (800b958 <shinchi_turn_L+0x160>)
 800b8b4:	685a      	ldr	r2, [r3, #4]
 800b8b6:	4b29      	ldr	r3, [pc, #164]	; (800b95c <shinchi_turn_L+0x164>)
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7fc fd69 	bl	8008394 <__aeabi_i2d>
 800b8c2:	a321      	add	r3, pc, #132	; (adr r3, 800b948 <shinchi_turn_L+0x150>)
 800b8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c8:	f7fd f840 	bl	800894c <__aeabi_dcmplt>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d100      	bne.n	800b8d4 <shinchi_turn_L+0xdc>
 800b8d2:	e005      	b.n	800b8e0 <shinchi_turn_L+0xe8>
			mode.control = 4;
 800b8d4:	4b22      	ldr	r3, [pc, #136]	; (800b960 <shinchi_turn_L+0x168>)
 800b8d6:	2204      	movs	r2, #4
 800b8d8:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b8da:	4b22      	ldr	r3, [pc, #136]	; (800b964 <shinchi_turn_L+0x16c>)
 800b8dc:	4a22      	ldr	r2, [pc, #136]	; (800b968 <shinchi_turn_L+0x170>)
 800b8de:	601a      	str	r2, [r3, #0]
	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2){
 800b8e0:	4b1d      	ldr	r3, [pc, #116]	; (800b958 <shinchi_turn_L+0x160>)
 800b8e2:	685a      	ldr	r2, [r3, #4]
 800b8e4:	4b1d      	ldr	r3, [pc, #116]	; (800b95c <shinchi_turn_L+0x164>)
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fc fd52 	bl	8008394 <__aeabi_i2d>
 800b8f0:	a317      	add	r3, pc, #92	; (adr r3, 800b950 <shinchi_turn_L+0x158>)
 800b8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f6:	f7fd f829 	bl	800894c <__aeabi_dcmplt>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f47f af7e 	bne.w	800b7fe <shinchi_turn_L+0x6>
=======
 800b78a:	4b17      	ldr	r3, [pc, #92]	; (800b7e8 <shinchi_turn_R+0x168>)
 800b78c:	2204      	movs	r2, #4
 800b78e:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b790:	4b13      	ldr	r3, [pc, #76]	; (800b7e0 <shinchi_turn_R+0x160>)
 800b792:	2200      	movs	r2, #0
 800b794:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b796:	4b13      	ldr	r3, [pc, #76]	; (800b7e4 <shinchi_turn_R+0x164>)
 800b798:	2200      	movs	r2, #0
 800b79a:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b79c:	4b19      	ldr	r3, [pc, #100]	; (800b804 <shinchi_turn_R+0x184>)
 800b79e:	2200      	movs	r2, #0
 800b7a0:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b7a2:	4b14      	ldr	r3, [pc, #80]	; (800b7f4 <shinchi_turn_R+0x174>)
 800b7a4:	f04f 0200 	mov.w	r2, #0
 800b7a8:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b7aa:	4b15      	ldr	r3, [pc, #84]	; (800b800 <shinchi_turn_R+0x180>)
 800b7ac:	f04f 0200 	mov.w	r2, #0
 800b7b0:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b7b2:	4b0e      	ldr	r3, [pc, #56]	; (800b7ec <shinchi_turn_R+0x16c>)
 800b7b4:	4a14      	ldr	r2, [pc, #80]	; (800b808 <shinchi_turn_R+0x188>)
 800b7b6:	601a      	str	r2, [r3, #0]

}
 800b7b8:	bf00      	nop
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	f3af 8000 	nop.w
 800b7c0:	04cdaf52 	.word	0x04cdaf52
 800b7c4:	40da2a96 	.word	0x40da2a96
 800b7c8:	40001702 	.word	0x40001702
 800b7cc:	40eb4c85 	.word	0x40eb4c85
 800b7d0:	21337755 	.word	0x21337755
 800b7d4:	40f430e8 	.word	0x40f430e8
 800b7d8:	21337756 	.word	0x21337756
 800b7dc:	40f430e8 	.word	0x40f430e8
 800b7e0:	20000cd0 	.word	0x20000cd0
 800b7e4:	20000cdc 	.word	0x20000cdc
 800b7e8:	20000cf4 	.word	0x20000cf4
 800b7ec:	20000f70 	.word	0x20000f70
 800b7f0:	43340000 	.word	0x43340000
 800b7f4:	2000506c 	.word	0x2000506c
 800b7f8:	43b40000 	.word	0x43b40000
 800b7fc:	00000000 	.word	0x00000000
 800b800:	2000504c 	.word	0x2000504c
 800b804:	20000ce8 	.word	0x20000ce8
 800b808:	43700000 	.word	0x43700000
 800b80c:	00000000 	.word	0x00000000

0800b810 <shinchi_turn_L>:
void shinchi_turn_L(){
 800b810:	b580      	push	{r7, lr}
 800b812:	af00      	add	r7, sp, #0

	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2){
 800b814:	e070      	b.n	800b8f8 <shinchi_turn_L+0xe8>
		if(EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2){
 800b816:	4b56      	ldr	r3, [pc, #344]	; (800b970 <shinchi_turn_L+0x160>)
 800b818:	685a      	ldr	r2, [r3, #4]
 800b81a:	4b56      	ldr	r3, [pc, #344]	; (800b974 <shinchi_turn_L+0x164>)
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	4413      	add	r3, r2
 800b820:	4618      	mov	r0, r3
 800b822:	f7fc fdb7 	bl	8008394 <__aeabi_i2d>
 800b826:	a34a      	add	r3, pc, #296	; (adr r3, 800b950 <shinchi_turn_L+0x140>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	f7fd f88e 	bl	800894c <__aeabi_dcmplt>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d005      	beq.n	800b842 <shinchi_turn_L+0x32>
			mode.control = 4;
 800b836:	4b50      	ldr	r3, [pc, #320]	; (800b978 <shinchi_turn_L+0x168>)
 800b838:	2204      	movs	r2, #4
 800b83a:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b83c:	4b4f      	ldr	r3, [pc, #316]	; (800b97c <shinchi_turn_L+0x16c>)
 800b83e:	4a50      	ldr	r2, [pc, #320]	; (800b980 <shinchi_turn_L+0x170>)
 800b840:	601a      	str	r2, [r3, #0]
		}
		if(DECE_CURVE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE){
 800b842:	4b4b      	ldr	r3, [pc, #300]	; (800b970 <shinchi_turn_L+0x160>)
 800b844:	685a      	ldr	r2, [r3, #4]
 800b846:	4b4b      	ldr	r3, [pc, #300]	; (800b974 <shinchi_turn_L+0x164>)
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	4413      	add	r3, r2
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7fc fda1 	bl	8008394 <__aeabi_i2d>
 800b852:	a33f      	add	r3, pc, #252	; (adr r3, 800b950 <shinchi_turn_L+0x140>)
 800b854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b858:	f7fd f88c 	bl	8008974 <__aeabi_dcmpge>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d022      	beq.n	800b8a8 <shinchi_turn_L+0x98>
 800b862:	4b43      	ldr	r3, [pc, #268]	; (800b970 <shinchi_turn_L+0x160>)
 800b864:	685a      	ldr	r2, [r3, #4]
 800b866:	4b43      	ldr	r3, [pc, #268]	; (800b974 <shinchi_turn_L+0x164>)
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	4413      	add	r3, r2
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fc fd91 	bl	8008394 <__aeabi_i2d>
 800b872:	a339      	add	r3, pc, #228	; (adr r3, 800b958 <shinchi_turn_L+0x148>)
 800b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b878:	f7fd f868 	bl	800894c <__aeabi_dcmplt>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d012      	beq.n	800b8a8 <shinchi_turn_L+0x98>
		mode.control = 6;
 800b882:	4b3d      	ldr	r3, [pc, #244]	; (800b978 <shinchi_turn_L+0x168>)
 800b884:	2206      	movs	r2, #6
 800b886:	715a      	strb	r2, [r3, #5]
		Target_velocity = CURVE_SPEED;
 800b888:	4b3c      	ldr	r3, [pc, #240]	; (800b97c <shinchi_turn_L+0x16c>)
 800b88a:	4a3d      	ldr	r2, [pc, #244]	; (800b980 <shinchi_turn_L+0x170>)
 800b88c:	601a      	str	r2, [r3, #0]
		Target_R_velo = CURVE_SPEED  * 2;
 800b88e:	4b3d      	ldr	r3, [pc, #244]	; (800b984 <shinchi_turn_L+0x174>)
 800b890:	4a3d      	ldr	r2, [pc, #244]	; (800b988 <shinchi_turn_L+0x178>)
 800b892:	601a      	str	r2, [r3, #0]
		Target_L_velo = Target_R_velo * 0;
 800b894:	4b3b      	ldr	r3, [pc, #236]	; (800b984 <shinchi_turn_L+0x174>)
 800b896:	edd3 7a00 	vldr	s15, [r3]
 800b89a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800b98c <shinchi_turn_L+0x17c>
 800b89e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8a2:	4b3b      	ldr	r3, [pc, #236]	; (800b990 <shinchi_turn_L+0x180>)
 800b8a4:	edc3 7a00 	vstr	s15, [r3]
		}
		if(DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 4 + SHINCHI_ROTATE_PULSE){
 800b8a8:	4b31      	ldr	r3, [pc, #196]	; (800b970 <shinchi_turn_L+0x160>)
 800b8aa:	685a      	ldr	r2, [r3, #4]
 800b8ac:	4b31      	ldr	r3, [pc, #196]	; (800b974 <shinchi_turn_L+0x164>)
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	4413      	add	r3, r2
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fc fd6e 	bl	8008394 <__aeabi_i2d>
 800b8b8:	a327      	add	r3, pc, #156	; (adr r3, 800b958 <shinchi_turn_L+0x148>)
 800b8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8be:	f7fd f859 	bl	8008974 <__aeabi_dcmpge>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d100      	bne.n	800b8ca <shinchi_turn_L+0xba>
 800b8c8:	e016      	b.n	800b8f8 <shinchi_turn_L+0xe8>
 800b8ca:	4b29      	ldr	r3, [pc, #164]	; (800b970 <shinchi_turn_L+0x160>)
 800b8cc:	685a      	ldr	r2, [r3, #4]
 800b8ce:	4b29      	ldr	r3, [pc, #164]	; (800b974 <shinchi_turn_L+0x164>)
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7fc fd5d 	bl	8008394 <__aeabi_i2d>
 800b8da:	a321      	add	r3, pc, #132	; (adr r3, 800b960 <shinchi_turn_L+0x150>)
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	f7fd f834 	bl	800894c <__aeabi_dcmplt>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d100      	bne.n	800b8ec <shinchi_turn_L+0xdc>
 800b8ea:	e005      	b.n	800b8f8 <shinchi_turn_L+0xe8>
			mode.control = 4;
 800b8ec:	4b22      	ldr	r3, [pc, #136]	; (800b978 <shinchi_turn_L+0x168>)
 800b8ee:	2204      	movs	r2, #4
 800b8f0:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b8f2:	4b22      	ldr	r3, [pc, #136]	; (800b97c <shinchi_turn_L+0x16c>)
 800b8f4:	4a22      	ldr	r2, [pc, #136]	; (800b980 <shinchi_turn_L+0x170>)
 800b8f6:	601a      	str	r2, [r3, #0]
	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2){
 800b8f8:	4b1d      	ldr	r3, [pc, #116]	; (800b970 <shinchi_turn_L+0x160>)
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	4b1d      	ldr	r3, [pc, #116]	; (800b974 <shinchi_turn_L+0x164>)
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	4413      	add	r3, r2
 800b902:	4618      	mov	r0, r3
 800b904:	f7fc fd46 	bl	8008394 <__aeabi_i2d>
 800b908:	a317      	add	r3, pc, #92	; (adr r3, 800b968 <shinchi_turn_L+0x158>)
 800b90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90e:	f7fd f81d 	bl	800894c <__aeabi_dcmplt>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	f47f af7e 	bne.w	800b816 <shinchi_turn_L+0x6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
//		if(Body_angle > 90){
//			IMU_init();
//			break;
//		}
	}
	mode.control = 4;
<<<<<<< HEAD
 800b902:	4b17      	ldr	r3, [pc, #92]	; (800b960 <shinchi_turn_L+0x168>)
 800b904:	2204      	movs	r2, #4
 800b906:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b908:	4b13      	ldr	r3, [pc, #76]	; (800b958 <shinchi_turn_L+0x160>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b90e:	4b13      	ldr	r3, [pc, #76]	; (800b95c <shinchi_turn_L+0x164>)
 800b910:	2200      	movs	r2, #0
 800b912:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b914:	4b19      	ldr	r3, [pc, #100]	; (800b97c <shinchi_turn_L+0x184>)
 800b916:	2200      	movs	r2, #0
 800b918:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b91a:	4b17      	ldr	r3, [pc, #92]	; (800b978 <shinchi_turn_L+0x180>)
 800b91c:	f04f 0200 	mov.w	r2, #0
 800b920:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b922:	4b12      	ldr	r3, [pc, #72]	; (800b96c <shinchi_turn_L+0x174>)
 800b924:	f04f 0200 	mov.w	r2, #0
 800b928:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b92a:	4b0e      	ldr	r3, [pc, #56]	; (800b964 <shinchi_turn_L+0x16c>)
 800b92c:	4a0e      	ldr	r2, [pc, #56]	; (800b968 <shinchi_turn_L+0x170>)
 800b92e:	601a      	str	r2, [r3, #0]
}
 800b930:	bf00      	nop
 800b932:	bd80      	pop	{r7, pc}
 800b934:	f3af 8000 	nop.w
 800b938:	04cdaf52 	.word	0x04cdaf52
 800b93c:	40da2a96 	.word	0x40da2a96
 800b940:	40001702 	.word	0x40001702
 800b944:	40eb4c85 	.word	0x40eb4c85
 800b948:	21337755 	.word	0x21337755
 800b94c:	40f430e8 	.word	0x40f430e8
 800b950:	21337756 	.word	0x21337756
 800b954:	40f430e8 	.word	0x40f430e8
 800b958:	20000044 	.word	0x20000044
 800b95c:	20000050 	.word	0x20000050
 800b960:	20000068 	.word	0x20000068
 800b964:	200002e0 	.word	0x200002e0
 800b968:	43340000 	.word	0x43340000
 800b96c:	2000e010 	.word	0x2000e010
 800b970:	43b40000 	.word	0x43b40000
 800b974:	00000000 	.word	0x00000000
 800b978:	2000e030 	.word	0x2000e030
 800b97c:	2000005c 	.word	0x2000005c

0800b980 <rotate180>:
void rotate180(){
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
  uint8_t counter=0;
 800b986:	2300      	movs	r3, #0
 800b988:	71fb      	strb	r3, [r7, #7]
  //static int check = 0, check2 = 0;

   while(counter < 1){
 800b98a:	e054      	b.n	800ba36 <rotate180+0xb6>

		Target_velocity = 0;
 800b98c:	4b30      	ldr	r3, [pc, #192]	; (800ba50 <rotate180+0xd0>)
 800b98e:	f04f 0200 	mov.w	r2, #0
 800b992:	601a      	str	r2, [r3, #0]
		error_reset = 0;
 800b994:	4b2f      	ldr	r3, [pc, #188]	; (800ba54 <rotate180+0xd4>)
 800b996:	2200      	movs	r2, #0
 800b998:	701a      	strb	r2, [r3, #0]
		Motor_Count_Clear();
 800b99a:	f7fe f81b 	bl	80099d4 <Motor_Count_Clear>
    EN3_L.integrate = 0;
 800b99e:	4b2e      	ldr	r3, [pc, #184]	; (800ba58 <rotate180+0xd8>)
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b9a4:	4b2d      	ldr	r3, [pc, #180]	; (800ba5c <rotate180+0xdc>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	605a      	str	r2, [r3, #4]
	  EN_Body.integrate = 0;
 800b9aa:	4b2d      	ldr	r3, [pc, #180]	; (800ba60 <rotate180+0xe0>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	605a      	str	r2, [r3, #4]
	  mode.enc = 1;
 800b9b0:	4b2c      	ldr	r3, [pc, #176]	; (800ba64 <rotate180+0xe4>)
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	70da      	strb	r2, [r3, #3]
	///while(EN3_L.integrate >= -Target_pul_quarter && EN4_R.integrate <= Target_pul_quarter){
  while(EN3_L.integrate <= Target_pul_quarter*2 || EN4_R.integrate >= -Target_pul_quarter*2){
 800b9b6:	e005      	b.n	800b9c4 <rotate180+0x44>
	  mode.control = 3;
 800b9b8:	4b2a      	ldr	r3, [pc, #168]	; (800ba64 <rotate180+0xe4>)
 800b9ba:	2203      	movs	r2, #3
 800b9bc:	715a      	strb	r2, [r3, #5]
	  Target_Rad_velo = -6;//Rotate(Target_Rad_velo, -5, Target_pul_quarter*2, EN3_L.integrate);
 800b9be:	4b2a      	ldr	r3, [pc, #168]	; (800ba68 <rotate180+0xe8>)
 800b9c0:	4a2a      	ldr	r2, [pc, #168]	; (800ba6c <rotate180+0xec>)
 800b9c2:	601a      	str	r2, [r3, #0]
  while(EN3_L.integrate <= Target_pul_quarter*2 || EN4_R.integrate >= -Target_pul_quarter*2){
 800b9c4:	4b24      	ldr	r3, [pc, #144]	; (800ba58 <rotate180+0xd8>)
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	ee07 3a90 	vmov	s15, r3
 800b9cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b9d0:	4b27      	ldr	r3, [pc, #156]	; (800ba70 <rotate180+0xf0>)
 800b9d2:	edd3 7a00 	vldr	s15, [r3]
 800b9d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b9da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9e2:	d9e9      	bls.n	800b9b8 <rotate180+0x38>
 800b9e4:	4b1d      	ldr	r3, [pc, #116]	; (800ba5c <rotate180+0xdc>)
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	ee07 3a90 	vmov	s15, r3
 800b9ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b9f0:	4b1f      	ldr	r3, [pc, #124]	; (800ba70 <rotate180+0xf0>)
 800b9f2:	edd3 7a00 	vldr	s15, [r3]
 800b9f6:	eef1 7a67 	vneg.f32	s15, s15
 800b9fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b9fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ba02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba06:	dad7      	bge.n	800b9b8 <rotate180+0x38>
=======
 800b91a:	4b17      	ldr	r3, [pc, #92]	; (800b978 <shinchi_turn_L+0x168>)
 800b91c:	2204      	movs	r2, #4
 800b91e:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b920:	4b13      	ldr	r3, [pc, #76]	; (800b970 <shinchi_turn_L+0x160>)
 800b922:	2200      	movs	r2, #0
 800b924:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b926:	4b13      	ldr	r3, [pc, #76]	; (800b974 <shinchi_turn_L+0x164>)
 800b928:	2200      	movs	r2, #0
 800b92a:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b92c:	4b19      	ldr	r3, [pc, #100]	; (800b994 <shinchi_turn_L+0x184>)
 800b92e:	2200      	movs	r2, #0
 800b930:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b932:	4b17      	ldr	r3, [pc, #92]	; (800b990 <shinchi_turn_L+0x180>)
 800b934:	f04f 0200 	mov.w	r2, #0
 800b938:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b93a:	4b12      	ldr	r3, [pc, #72]	; (800b984 <shinchi_turn_L+0x174>)
 800b93c:	f04f 0200 	mov.w	r2, #0
 800b940:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b942:	4b0e      	ldr	r3, [pc, #56]	; (800b97c <shinchi_turn_L+0x16c>)
 800b944:	4a14      	ldr	r2, [pc, #80]	; (800b998 <shinchi_turn_L+0x188>)
 800b946:	601a      	str	r2, [r3, #0]
}
 800b948:	bf00      	nop
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	f3af 8000 	nop.w
 800b950:	04cdaf52 	.word	0x04cdaf52
 800b954:	40da2a96 	.word	0x40da2a96
 800b958:	40001702 	.word	0x40001702
 800b95c:	40eb4c85 	.word	0x40eb4c85
 800b960:	21337755 	.word	0x21337755
 800b964:	40f430e8 	.word	0x40f430e8
 800b968:	21337756 	.word	0x21337756
 800b96c:	40f430e8 	.word	0x40f430e8
 800b970:	20000cd0 	.word	0x20000cd0
 800b974:	20000cdc 	.word	0x20000cdc
 800b978:	20000cf4 	.word	0x20000cf4
 800b97c:	20000f70 	.word	0x20000f70
 800b980:	43340000 	.word	0x43340000
 800b984:	2000504c 	.word	0x2000504c
 800b988:	43b40000 	.word	0x43b40000
 800b98c:	00000000 	.word	0x00000000
 800b990:	2000506c 	.word	0x2000506c
 800b994:	20000ce8 	.word	0x20000ce8
 800b998:	43700000 	.word	0x43700000

0800b99c <rotate180>:
void rotate180(){
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
  uint8_t counter=0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	71fb      	strb	r3, [r7, #7]
  //static int check = 0, check2 = 0;

   while(counter < 1){
 800b9a6:	e054      	b.n	800ba52 <rotate180+0xb6>

		Target_velocity = 0;
 800b9a8:	4b30      	ldr	r3, [pc, #192]	; (800ba6c <rotate180+0xd0>)
 800b9aa:	f04f 0200 	mov.w	r2, #0
 800b9ae:	601a      	str	r2, [r3, #0]
		error_reset = 0;
 800b9b0:	4b2f      	ldr	r3, [pc, #188]	; (800ba70 <rotate180+0xd4>)
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	701a      	strb	r2, [r3, #0]
		Motor_Count_Clear();
 800b9b6:	f7fe f80d 	bl	80099d4 <Motor_Count_Clear>
    EN3_L.integrate = 0;
 800b9ba:	4b2e      	ldr	r3, [pc, #184]	; (800ba74 <rotate180+0xd8>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b9c0:	4b2d      	ldr	r3, [pc, #180]	; (800ba78 <rotate180+0xdc>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	605a      	str	r2, [r3, #4]
	  EN_Body.integrate = 0;
 800b9c6:	4b2d      	ldr	r3, [pc, #180]	; (800ba7c <rotate180+0xe0>)
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	605a      	str	r2, [r3, #4]
	  mode.enc = 1;
 800b9cc:	4b2c      	ldr	r3, [pc, #176]	; (800ba80 <rotate180+0xe4>)
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	70da      	strb	r2, [r3, #3]
	///while(EN3_L.integrate >= -Target_pul_quarter && EN4_R.integrate <= Target_pul_quarter){
  while(EN3_L.integrate <= Target_pul_quarter*2 || EN4_R.integrate >= -Target_pul_quarter*2){
 800b9d2:	e005      	b.n	800b9e0 <rotate180+0x44>
	  mode.control = 3;
 800b9d4:	4b2a      	ldr	r3, [pc, #168]	; (800ba80 <rotate180+0xe4>)
 800b9d6:	2203      	movs	r2, #3
 800b9d8:	715a      	strb	r2, [r3, #5]
	  Target_Rad_velo = -3;//Rotate(Target_Rad_velo, -5, Target_pul_quarter*2, EN3_L.integrate);
 800b9da:	4b2a      	ldr	r3, [pc, #168]	; (800ba84 <rotate180+0xe8>)
 800b9dc:	4a2a      	ldr	r2, [pc, #168]	; (800ba88 <rotate180+0xec>)
 800b9de:	601a      	str	r2, [r3, #0]
  while(EN3_L.integrate <= Target_pul_quarter*2 || EN4_R.integrate >= -Target_pul_quarter*2){
 800b9e0:	4b24      	ldr	r3, [pc, #144]	; (800ba74 <rotate180+0xd8>)
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	ee07 3a90 	vmov	s15, r3
 800b9e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b9ec:	4b27      	ldr	r3, [pc, #156]	; (800ba8c <rotate180+0xf0>)
 800b9ee:	edd3 7a00 	vldr	s15, [r3]
 800b9f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b9f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9fe:	d9e9      	bls.n	800b9d4 <rotate180+0x38>
 800ba00:	4b1d      	ldr	r3, [pc, #116]	; (800ba78 <rotate180+0xdc>)
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	ee07 3a90 	vmov	s15, r3
 800ba08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba0c:	4b1f      	ldr	r3, [pc, #124]	; (800ba8c <rotate180+0xf0>)
 800ba0e:	edd3 7a00 	vldr	s15, [r3]
 800ba12:	eef1 7a67 	vneg.f32	s15, s15
 800ba16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ba1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ba1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba22:	dad7      	bge.n	800b9d4 <rotate180+0x38>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	  //Rotate_Control(Target_rotate,T1, velocity.KP, velocity.KI, velocity.KD);

//    	check = EN3_L.integrate;
//    	check2 = EN4_R.integrate;
    	}
      mode.enc = 0;
<<<<<<< HEAD
 800ba08:	4b16      	ldr	r3, [pc, #88]	; (800ba64 <rotate180+0xe4>)
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	70da      	strb	r2, [r3, #3]
      Target_velocity = 0;
 800ba0e:	4b10      	ldr	r3, [pc, #64]	; (800ba50 <rotate180+0xd0>)
 800ba10:	f04f 0200 	mov.w	r2, #0
 800ba14:	601a      	str	r2, [r3, #0]
      Target_Rad_velo =0;
 800ba16:	4b14      	ldr	r3, [pc, #80]	; (800ba68 <rotate180+0xe8>)
 800ba18:	f04f 0200 	mov.w	r2, #0
 800ba1c:	601a      	str	r2, [r3, #0]
      EN3_L.integrate = 0;
 800ba1e:	4b0e      	ldr	r3, [pc, #56]	; (800ba58 <rotate180+0xd8>)
 800ba20:	2200      	movs	r2, #0
 800ba22:	605a      	str	r2, [r3, #4]
      EN4_R.integrate = 0;
 800ba24:	4b0d      	ldr	r3, [pc, #52]	; (800ba5c <rotate180+0xdc>)
 800ba26:	2200      	movs	r2, #0
 800ba28:	605a      	str	r2, [r3, #4]
  	  EN_Body.integrate = 0;
 800ba2a:	4b0d      	ldr	r3, [pc, #52]	; (800ba60 <rotate180+0xe0>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	605a      	str	r2, [r3, #4]

      counter++;
 800ba30:	79fb      	ldrb	r3, [r7, #7]
 800ba32:	3301      	adds	r3, #1
 800ba34:	71fb      	strb	r3, [r7, #7]
   while(counter < 1){
 800ba36:	79fb      	ldrb	r3, [r7, #7]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d0a7      	beq.n	800b98c <rotate180+0xc>
     }
	error_reset = 0;
 800ba3c:	4b05      	ldr	r3, [pc, #20]	; (800ba54 <rotate180+0xd4>)
 800ba3e:	2200      	movs	r2, #0
 800ba40:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ba42:	f7fd ffc7 	bl	80099d4 <Motor_Count_Clear>
=======
 800ba24:	4b16      	ldr	r3, [pc, #88]	; (800ba80 <rotate180+0xe4>)
 800ba26:	2200      	movs	r2, #0
 800ba28:	70da      	strb	r2, [r3, #3]
      Target_velocity = 0;
 800ba2a:	4b10      	ldr	r3, [pc, #64]	; (800ba6c <rotate180+0xd0>)
 800ba2c:	f04f 0200 	mov.w	r2, #0
 800ba30:	601a      	str	r2, [r3, #0]
      Target_Rad_velo =0;
 800ba32:	4b14      	ldr	r3, [pc, #80]	; (800ba84 <rotate180+0xe8>)
 800ba34:	f04f 0200 	mov.w	r2, #0
 800ba38:	601a      	str	r2, [r3, #0]
      EN3_L.integrate = 0;
 800ba3a:	4b0e      	ldr	r3, [pc, #56]	; (800ba74 <rotate180+0xd8>)
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	605a      	str	r2, [r3, #4]
      EN4_R.integrate = 0;
 800ba40:	4b0d      	ldr	r3, [pc, #52]	; (800ba78 <rotate180+0xdc>)
 800ba42:	2200      	movs	r2, #0
 800ba44:	605a      	str	r2, [r3, #4]
  	  EN_Body.integrate = 0;
 800ba46:	4b0d      	ldr	r3, [pc, #52]	; (800ba7c <rotate180+0xe0>)
 800ba48:	2200      	movs	r2, #0
 800ba4a:	605a      	str	r2, [r3, #4]

      counter++;
 800ba4c:	79fb      	ldrb	r3, [r7, #7]
 800ba4e:	3301      	adds	r3, #1
 800ba50:	71fb      	strb	r3, [r7, #7]
   while(counter < 1){
 800ba52:	79fb      	ldrb	r3, [r7, #7]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d0a7      	beq.n	800b9a8 <rotate180+0xc>
     }
	error_reset = 0;
 800ba58:	4b05      	ldr	r3, [pc, #20]	; (800ba70 <rotate180+0xd4>)
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ba5e:	f7fd ffb9 	bl	80099d4 <Motor_Count_Clear>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
//    	    printf("180°回転時左 : %d \r\n",check);
//    	    printf("180°回転時右 : %d \r\n",check2);
//    	    printf("\r\n");

}
<<<<<<< HEAD
 800ba46:	bf00      	nop
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	200002e0 	.word	0x200002e0
 800ba54:	2000026c 	.word	0x2000026c
 800ba58:	20000044 	.word	0x20000044
 800ba5c:	20000050 	.word	0x20000050
 800ba60:	2000005c 	.word	0x2000005c
 800ba64:	20000068 	.word	0x20000068
 800ba68:	200002e4 	.word	0x200002e4
 800ba6c:	c0c00000 	.word	0xc0c00000
 800ba70:	20000004 	.word	0x20000004
 800ba74:	00000000 	.word	0x00000000

0800ba78 <back_calib>:
=======
 800ba62:	bf00      	nop
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	20000f70 	.word	0x20000f70
 800ba70:	20000efc 	.word	0x20000efc
 800ba74:	20000cd0 	.word	0x20000cd0
 800ba78:	20000cdc 	.word	0x20000cdc
 800ba7c:	20000ce8 	.word	0x20000ce8
 800ba80:	20000cf4 	.word	0x20000cf4
 800ba84:	20000f74 	.word	0x20000f74
 800ba88:	c0400000 	.word	0xc0400000
 800ba8c:	20000004 	.word	0x20000004

0800ba90 <back_calib>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	EN_Body.integrate = 0;
	error_reset = 0;
	Motor_Count_Clear();

}
void back_calib(){
<<<<<<< HEAD
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
	error_reset = 0;
 800ba7e:	4b2a      	ldr	r3, [pc, #168]	; (800bb28 <back_calib+0xb0>)
 800ba80:	2200      	movs	r2, #0
 800ba82:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ba84:	f7fd ffa6 	bl	80099d4 <Motor_Count_Clear>
    EN3_L.integrate = 0;
 800ba88:	4b28      	ldr	r3, [pc, #160]	; (800bb2c <back_calib+0xb4>)
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ba8e:	4b28      	ldr	r3, [pc, #160]	; (800bb30 <back_calib+0xb8>)
 800ba90:	2200      	movs	r2, #0
 800ba92:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800ba94:	4b27      	ldr	r3, [pc, #156]	; (800bb34 <back_calib+0xbc>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800ba9a:	4b27      	ldr	r3, [pc, #156]	; (800bb38 <back_calib+0xc0>)
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	70da      	strb	r2, [r3, #3]
    //50mmバック

    while(EN3_L.integrate + EN4_R.integrate > -2 * (61.75-40) / MM_PER_PULSE){
 800baa0:	e005      	b.n	800baae <back_calib+0x36>
    	Target_velocity = -90;
 800baa2:	4b26      	ldr	r3, [pc, #152]	; (800bb3c <back_calib+0xc4>)
 800baa4:	4a26      	ldr	r2, [pc, #152]	; (800bb40 <back_calib+0xc8>)
 800baa6:	601a      	str	r2, [r3, #0]
    	mode.control = 4;
 800baa8:	4b23      	ldr	r3, [pc, #140]	; (800bb38 <back_calib+0xc0>)
 800baaa:	2204      	movs	r2, #4
 800baac:	715a      	strb	r2, [r3, #5]
    while(EN3_L.integrate + EN4_R.integrate > -2 * (61.75-40) / MM_PER_PULSE){
 800baae:	4b1f      	ldr	r3, [pc, #124]	; (800bb2c <back_calib+0xb4>)
 800bab0:	685a      	ldr	r2, [r3, #4]
 800bab2:	4b1f      	ldr	r3, [pc, #124]	; (800bb30 <back_calib+0xb8>)
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	4413      	add	r3, r2
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fc fc6b 	bl	8008394 <__aeabi_i2d>
 800babe:	a318      	add	r3, pc, #96	; (adr r3, 800bb20 <back_calib+0xa8>)
 800bac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac4:	f7fc ff60 	bl	8008988 <__aeabi_dcmpgt>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1e9      	bne.n	800baa2 <back_calib+0x2a>
    }
    Target_velocity = 0;
 800bace:	4b1b      	ldr	r3, [pc, #108]	; (800bb3c <back_calib+0xc4>)
 800bad0:	f04f 0200 	mov.w	r2, #0
 800bad4:	601a      	str	r2, [r3, #0]
    mode.control = 5;
 800bad6:	4b18      	ldr	r3, [pc, #96]	; (800bb38 <back_calib+0xc0>)
 800bad8:	2205      	movs	r2, #5
 800bada:	715a      	strb	r2, [r3, #5]
    mode.enc = 0;
 800badc:	4b16      	ldr	r3, [pc, #88]	; (800bb38 <back_calib+0xc0>)
 800bade:	2200      	movs	r2, #0
 800bae0:	70da      	strb	r2, [r3, #3]
    EN3_L.integrate = 0;
 800bae2:	4b12      	ldr	r3, [pc, #72]	; (800bb2c <back_calib+0xb4>)
 800bae4:	2200      	movs	r2, #0
 800bae6:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800bae8:	4b11      	ldr	r3, [pc, #68]	; (800bb30 <back_calib+0xb8>)
 800baea:	2200      	movs	r2, #0
 800baec:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800baee:	4b11      	ldr	r3, [pc, #68]	; (800bb34 <back_calib+0xbc>)
 800baf0:	2200      	movs	r2, #0
 800baf2:	605a      	str	r2, [r3, #4]
	error_reset = 0;
 800baf4:	4b0c      	ldr	r3, [pc, #48]	; (800bb28 <back_calib+0xb0>)
 800baf6:	2200      	movs	r2, #0
 800baf8:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800bafa:	f7fd ff6b 	bl	80099d4 <Motor_Count_Clear>
    for(int i=0;i < WAIT*4;i++);
 800bafe:	2300      	movs	r3, #0
 800bb00:	607b      	str	r3, [r7, #4]
 800bb02:	e002      	b.n	800bb0a <back_calib+0x92>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	3301      	adds	r3, #1
 800bb08:	607b      	str	r3, [r7, #4]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a0d      	ldr	r2, [pc, #52]	; (800bb44 <back_calib+0xcc>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	ddf8      	ble.n	800bb04 <back_calib+0x8c>

}
 800bb12:	bf00      	nop
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	f3af 8000 	nop.w
 800bb20:	2f3c6487 	.word	0x2f3c6487
 800bb24:	c0d5653a 	.word	0xc0d5653a
 800bb28:	2000026c 	.word	0x2000026c
 800bb2c:	20000044 	.word	0x20000044
 800bb30:	20000050 	.word	0x20000050
 800bb34:	2000005c 	.word	0x2000005c
 800bb38:	20000068 	.word	0x20000068
 800bb3c:	200002e0 	.word	0x200002e0
 800bb40:	c2b40000 	.word	0xc2b40000
 800bb44:	0001d4bf 	.word	0x0001d4bf

0800bb48 <R_turn_select>:
=======
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
	error_reset = 0;
 800ba96:	4b2a      	ldr	r3, [pc, #168]	; (800bb40 <back_calib+0xb0>)
 800ba98:	2200      	movs	r2, #0
 800ba9a:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ba9c:	f7fd ff9a 	bl	80099d4 <Motor_Count_Clear>
    EN3_L.integrate = 0;
 800baa0:	4b28      	ldr	r3, [pc, #160]	; (800bb44 <back_calib+0xb4>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800baa6:	4b28      	ldr	r3, [pc, #160]	; (800bb48 <back_calib+0xb8>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800baac:	4b27      	ldr	r3, [pc, #156]	; (800bb4c <back_calib+0xbc>)
 800baae:	2200      	movs	r2, #0
 800bab0:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800bab2:	4b27      	ldr	r3, [pc, #156]	; (800bb50 <back_calib+0xc0>)
 800bab4:	2201      	movs	r2, #1
 800bab6:	70da      	strb	r2, [r3, #3]
    //50mmバック

    while(EN3_L.integrate + EN4_R.integrate > -2 * (61.75-44) / MM_PER_PULSE){
 800bab8:	e005      	b.n	800bac6 <back_calib+0x36>
    	Target_velocity = -90;
 800baba:	4b26      	ldr	r3, [pc, #152]	; (800bb54 <back_calib+0xc4>)
 800babc:	4a26      	ldr	r2, [pc, #152]	; (800bb58 <back_calib+0xc8>)
 800babe:	601a      	str	r2, [r3, #0]
    	mode.control = 4;
 800bac0:	4b23      	ldr	r3, [pc, #140]	; (800bb50 <back_calib+0xc0>)
 800bac2:	2204      	movs	r2, #4
 800bac4:	715a      	strb	r2, [r3, #5]
    while(EN3_L.integrate + EN4_R.integrate > -2 * (61.75-44) / MM_PER_PULSE){
 800bac6:	4b1f      	ldr	r3, [pc, #124]	; (800bb44 <back_calib+0xb4>)
 800bac8:	685a      	ldr	r2, [r3, #4]
 800baca:	4b1f      	ldr	r3, [pc, #124]	; (800bb48 <back_calib+0xb8>)
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	4413      	add	r3, r2
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7fc fc5f 	bl	8008394 <__aeabi_i2d>
 800bad6:	a318      	add	r3, pc, #96	; (adr r3, 800bb38 <back_calib+0xa8>)
 800bad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800badc:	f7fc ff54 	bl	8008988 <__aeabi_dcmpgt>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1e9      	bne.n	800baba <back_calib+0x2a>
    }
    Target_velocity = 0;
 800bae6:	4b1b      	ldr	r3, [pc, #108]	; (800bb54 <back_calib+0xc4>)
 800bae8:	f04f 0200 	mov.w	r2, #0
 800baec:	601a      	str	r2, [r3, #0]
    mode.control = 5;
 800baee:	4b18      	ldr	r3, [pc, #96]	; (800bb50 <back_calib+0xc0>)
 800baf0:	2205      	movs	r2, #5
 800baf2:	715a      	strb	r2, [r3, #5]
    mode.enc = 0;
 800baf4:	4b16      	ldr	r3, [pc, #88]	; (800bb50 <back_calib+0xc0>)
 800baf6:	2200      	movs	r2, #0
 800baf8:	70da      	strb	r2, [r3, #3]
    EN3_L.integrate = 0;
 800bafa:	4b12      	ldr	r3, [pc, #72]	; (800bb44 <back_calib+0xb4>)
 800bafc:	2200      	movs	r2, #0
 800bafe:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800bb00:	4b11      	ldr	r3, [pc, #68]	; (800bb48 <back_calib+0xb8>)
 800bb02:	2200      	movs	r2, #0
 800bb04:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800bb06:	4b11      	ldr	r3, [pc, #68]	; (800bb4c <back_calib+0xbc>)
 800bb08:	2200      	movs	r2, #0
 800bb0a:	605a      	str	r2, [r3, #4]
	error_reset = 0;
 800bb0c:	4b0c      	ldr	r3, [pc, #48]	; (800bb40 <back_calib+0xb0>)
 800bb0e:	2200      	movs	r2, #0
 800bb10:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800bb12:	f7fd ff5f 	bl	80099d4 <Motor_Count_Clear>
    for(int i=0;i < WAIT*4;i++);
 800bb16:	2300      	movs	r3, #0
 800bb18:	607b      	str	r3, [r7, #4]
 800bb1a:	e002      	b.n	800bb22 <back_calib+0x92>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	607b      	str	r3, [r7, #4]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4a0d      	ldr	r2, [pc, #52]	; (800bb5c <back_calib+0xcc>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	ddf8      	ble.n	800bb1c <back_calib+0x8c>

}
 800bb2a:	bf00      	nop
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	f3af 8000 	nop.w
 800bb38:	ce45e239 	.word	0xce45e239
 800bb3c:	c0d175eb 	.word	0xc0d175eb
 800bb40:	20000efc 	.word	0x20000efc
 800bb44:	20000cd0 	.word	0x20000cd0
 800bb48:	20000cdc 	.word	0x20000cdc
 800bb4c:	20000ce8 	.word	0x20000ce8
 800bb50:	20000cf4 	.word	0x20000cf4
 800bb54:	20000f70 	.word	0x20000f70
 800bb58:	c2b40000 	.word	0xc2b40000
 800bb5c:	00061a7f 	.word	0x00061a7f

0800bb60 <R_turn_select>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	//経過時間計測オフ



}
void R_turn_select(){
<<<<<<< HEAD
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
  switch(mode.turn){
 800bb4e:	4b24      	ldr	r3, [pc, #144]	; (800bbe0 <R_turn_select+0x98>)
 800bb50:	7a5b      	ldrb	r3, [r3, #9]
 800bb52:	2b03      	cmp	r3, #3
 800bb54:	d83a      	bhi.n	800bbcc <R_turn_select+0x84>
 800bb56:	a201      	add	r2, pc, #4	; (adr r2, 800bb5c <R_turn_select+0x14>)
 800bb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5c:	0800bb6d 	.word	0x0800bb6d
 800bb60:	0800bba7 	.word	0x0800bba7
 800bb64:	0800bbad 	.word	0x0800bbad
 800bb68:	0800bbb3 	.word	0x0800bbb3
  case 0:
	  Decelerate();
 800bb6c:	f7ff f924 	bl	800adb8 <Decelerate>
	  for(int i=0;i < WAIT;i++);
 800bb70:	2300      	movs	r3, #0
 800bb72:	607b      	str	r3, [r7, #4]
 800bb74:	e002      	b.n	800bb7c <R_turn_select+0x34>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	607b      	str	r3, [r7, #4]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f247 522f 	movw	r2, #29999	; 0x752f
 800bb82:	4293      	cmp	r3, r2
 800bb84:	ddf7      	ble.n	800bb76 <R_turn_select+0x2e>
	  turn_right();
 800bb86:	f7ff fb2d 	bl	800b1e4 <turn_right>
	  for(int i=0;i < WAIT;i++);
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	603b      	str	r3, [r7, #0]
 800bb8e:	e002      	b.n	800bb96 <R_turn_select+0x4e>
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	3301      	adds	r3, #1
 800bb94:	603b      	str	r3, [r7, #0]
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	f247 522f 	movw	r2, #29999	; 0x752f
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	ddf7      	ble.n	800bb90 <R_turn_select+0x48>
      Accelerate();
 800bba0:	f7ff f85a 	bl	800ac58 <Accelerate>
      break;
 800bba4:	e012      	b.n	800bbcc <R_turn_select+0x84>
  case 1:
	  slow_turn_R();
 800bba6:	f7ff fbf3 	bl	800b390 <slow_turn_R>
	  break;
 800bbaa:	e00f      	b.n	800bbcc <R_turn_select+0x84>
  case 2:
	  shinchi_turn_R();
 800bbac:	f7ff fd60 	bl	800b670 <shinchi_turn_R>
	  break;
 800bbb0:	e00c      	b.n	800bbcc <R_turn_select+0x84>
  case 3:
      Decelerate();
 800bbb2:	f7ff f901 	bl	800adb8 <Decelerate>
      IMU_turn(-90,-5);
 800bbb6:	ed9f 0b08 	vldr	d0, [pc, #32]	; 800bbd8 <R_turn_select+0x90>
 800bbba:	f06f 0059 	mvn.w	r0, #89	; 0x59
 800bbbe:	f7ff fa67 	bl	800b090 <IMU_turn>
      IMU_init();
 800bbc2:	f7fd fe5b 	bl	800987c <IMU_init>
      Accelerate();
 800bbc6:	f7ff f847 	bl	800ac58 <Accelerate>
      break;
 800bbca:	bf00      	nop
  }
}
 800bbcc:	bf00      	nop
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	f3af 8000 	nop.w
 800bbd8:	00000000 	.word	0x00000000
 800bbdc:	c0140000 	.word	0xc0140000
 800bbe0:	20000068 	.word	0x20000068
=======
 800bb60:	b580      	push	{r7, lr}
 800bb62:	af00      	add	r7, sp, #0
  switch(mode.turn){
 800bb64:	4b1e      	ldr	r3, [pc, #120]	; (800bbe0 <R_turn_select+0x80>)
 800bb66:	7a5b      	ldrb	r3, [r3, #9]
 800bb68:	2b03      	cmp	r3, #3
 800bb6a:	d82d      	bhi.n	800bbc8 <R_turn_select+0x68>
 800bb6c:	a201      	add	r2, pc, #4	; (adr r2, 800bb74 <R_turn_select+0x14>)
 800bb6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb72:	bf00      	nop
 800bb74:	0800bb85 	.word	0x0800bb85
 800bb78:	0800bba3 	.word	0x0800bba3
 800bb7c:	0800bba9 	.word	0x0800bba9
 800bb80:	0800bbaf 	.word	0x0800bbaf
  case 0:
	  Decelerate();
 800bb84:	f7ff f924 	bl	800add0 <Decelerate>
	  wait(0.3);
 800bb88:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800bbd0 <R_turn_select+0x70>
 800bb8c:	f7fe fff4 	bl	800ab78 <wait>
	  turn_right();
 800bb90:	f7ff fb30 	bl	800b1f4 <turn_right>
	  wait(0.3);
 800bb94:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bbd0 <R_turn_select+0x70>
 800bb98:	f7fe ffee 	bl	800ab78 <wait>
      Accelerate();
 800bb9c:	f7ff f86c 	bl	800ac78 <Accelerate>
      break;
 800bba0:	e012      	b.n	800bbc8 <R_turn_select+0x68>
  case 1:
	  slow_turn_R();
 800bba2:	f7ff fbfd 	bl	800b3a0 <slow_turn_R>
	  break;
 800bba6:	e00f      	b.n	800bbc8 <R_turn_select+0x68>
  case 2:
	  shinchi_turn_R();
 800bba8:	f7ff fd6a 	bl	800b680 <shinchi_turn_R>
	  break;
 800bbac:	e00c      	b.n	800bbc8 <R_turn_select+0x68>
  case 3:
      Decelerate();
 800bbae:	f7ff f90f 	bl	800add0 <Decelerate>
      IMU_turn(-90,-5);
 800bbb2:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bbd8 <R_turn_select+0x78>
 800bbb6:	f06f 0059 	mvn.w	r0, #89	; 0x59
 800bbba:	f7ff fa71 	bl	800b0a0 <IMU_turn>
      IMU_init();
 800bbbe:	f7fd fe5d 	bl	800987c <IMU_init>
      Accelerate();
 800bbc2:	f7ff f859 	bl	800ac78 <Accelerate>
      break;
 800bbc6:	bf00      	nop
  }
}
 800bbc8:	bf00      	nop
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	f3af 8000 	nop.w
 800bbd0:	33333333 	.word	0x33333333
 800bbd4:	3fd33333 	.word	0x3fd33333
 800bbd8:	00000000 	.word	0x00000000
 800bbdc:	c0140000 	.word	0xc0140000
 800bbe0:	20000cf4 	.word	0x20000cf4
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 800bbe4:	00000000 	.word	0x00000000

0800bbe8 <L_turn_select>:
void L_turn_select(){
 800bbe8:	b580      	push	{r7, lr}
<<<<<<< HEAD
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
  switch(mode.turn){
 800bbee:	4b24      	ldr	r3, [pc, #144]	; (800bc80 <L_turn_select+0x98>)
 800bbf0:	7a5b      	ldrb	r3, [r3, #9]
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	d839      	bhi.n	800bc6a <L_turn_select+0x82>
 800bbf6:	a201      	add	r2, pc, #4	; (adr r2, 800bbfc <L_turn_select+0x14>)
 800bbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbfc:	0800bc0d 	.word	0x0800bc0d
 800bc00:	0800bc47 	.word	0x0800bc47
 800bc04:	0800bc4d 	.word	0x0800bc4d
 800bc08:	0800bc53 	.word	0x0800bc53
  case 0:
	  //加減速超信地旋回
	  Decelerate();
 800bc0c:	f7ff f8d4 	bl	800adb8 <Decelerate>
	  for(int i=0;i < WAIT;i++);
 800bc10:	2300      	movs	r3, #0
 800bc12:	607b      	str	r3, [r7, #4]
 800bc14:	e002      	b.n	800bc1c <L_turn_select+0x34>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	607b      	str	r3, [r7, #4]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f247 522f 	movw	r2, #29999	; 0x752f
 800bc22:	4293      	cmp	r3, r2
 800bc24:	ddf7      	ble.n	800bc16 <L_turn_select+0x2e>
	  turn_left();
 800bc26:	f7ff fb47 	bl	800b2b8 <turn_left>
	  for(int i=0;i < WAIT;i++);
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	603b      	str	r3, [r7, #0]
 800bc2e:	e002      	b.n	800bc36 <L_turn_select+0x4e>
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	3301      	adds	r3, #1
 800bc34:	603b      	str	r3, [r7, #0]
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	f247 522f 	movw	r2, #29999	; 0x752f
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	ddf7      	ble.n	800bc30 <L_turn_select+0x48>
      Accelerate();
 800bc40:	f7ff f80a 	bl	800ac58 <Accelerate>
      break;
 800bc44:	e011      	b.n	800bc6a <L_turn_select+0x82>
  case 1:
	  //緩旋回
	  slow_turn_L();
 800bc46:	f7ff fc5b 	bl	800b500 <slow_turn_L>
	  break;
 800bc4a:	e00e      	b.n	800bc6a <L_turn_select+0x82>
  case 2:
	  //片輪旋回
	  shinchi_turn_L();
 800bc4c:	f7ff fdd4 	bl	800b7f8 <shinchi_turn_L>
	  break;
 800bc50:	e00b      	b.n	800bc6a <L_turn_select+0x82>
  case 3:
	  //IMUで等角速度超信地旋回
      Decelerate();
 800bc52:	f7ff f8b1 	bl	800adb8 <Decelerate>
      IMU_turn(90,5);
 800bc56:	ed9f 0b08 	vldr	d0, [pc, #32]	; 800bc78 <L_turn_select+0x90>
 800bc5a:	205a      	movs	r0, #90	; 0x5a
 800bc5c:	f7ff fa18 	bl	800b090 <IMU_turn>
      IMU_init();
 800bc60:	f7fd fe0c 	bl	800987c <IMU_init>
      Accelerate();
 800bc64:	f7fe fff8 	bl	800ac58 <Accelerate>
      break;
 800bc68:	bf00      	nop
  }
}
 800bc6a:	bf00      	nop
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	f3af 8000 	nop.w
 800bc78:	00000000 	.word	0x00000000
 800bc7c:	40140000 	.word	0x40140000
 800bc80:	20000068 	.word	0x20000068

0800bc84 <Execution_Select>:
/*---- DEFINING FUNCTION ----*/

void Execution_Select(){
 800bc84:	b580      	push	{r7, lr}
 800bc86:	af00      	add	r7, sp, #0


	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 800bc88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bc8c:	4859      	ldr	r0, [pc, #356]	; (800bdf4 <Execution_Select+0x170>)
 800bc8e:	f007 f895 	bl	8012dbc <HAL_GPIO_ReadPin>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	f040 809e 	bne.w	800bdd6 <Execution_Select+0x152>
	    	printf("押した\r\n");
 800bc9a:	4857      	ldr	r0, [pc, #348]	; (800bdf8 <Execution_Select+0x174>)
 800bc9c:	f00a ffce 	bl	8016c3c <puts>
			Motor_PWM_Stop();
 800bca0:	f7fe fa06 	bl	800a0b0 <Motor_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 800bca4:	4855      	ldr	r0, [pc, #340]	; (800bdfc <Execution_Select+0x178>)
 800bca6:	f008 fac0 	bl	801422a <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim8);
 800bcaa:	4855      	ldr	r0, [pc, #340]	; (800be00 <Execution_Select+0x17c>)
 800bcac:	f008 fabd 	bl	801422a <HAL_TIM_Base_Stop_IT>
			Emitter_OFF();
 800bcb0:	f7fe f98e 	bl	8009fd0 <Emitter_OFF>
			ADC_Stop();
 800bcb4:	f7fe f9ba 	bl	800a02c <ADC_Stop>
	    	HAL_Delay(400);
 800bcb8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800bcbc:	f005 f8c0 	bl	8010e40 <HAL_Delay>

	    	mode.select += 1;
 800bcc0:	4b50      	ldr	r3, [pc, #320]	; (800be04 <Execution_Select+0x180>)
 800bcc2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	3301      	adds	r3, #1
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	b25a      	sxtb	r2, r3
 800bcce:	4b4d      	ldr	r3, [pc, #308]	; (800be04 <Execution_Select+0x180>)
 800bcd0:	711a      	strb	r2, [r3, #4]
	    	if(mode.select == 5)
 800bcd2:	4b4c      	ldr	r3, [pc, #304]	; (800be04 <Execution_Select+0x180>)
 800bcd4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bcd8:	2b05      	cmp	r3, #5
 800bcda:	d17c      	bne.n	800bdd6 <Execution_Select+0x152>
	    		mode.select = 3;
 800bcdc:	4b49      	ldr	r3, [pc, #292]	; (800be04 <Execution_Select+0x180>)
 800bcde:	2203      	movs	r2, #3
 800bce0:	711a      	strb	r2, [r3, #4]
=======
 800bbea:	af00      	add	r7, sp, #0
  switch(mode.turn){
 800bbec:	4b1e      	ldr	r3, [pc, #120]	; (800bc68 <L_turn_select+0x80>)
 800bbee:	7a5b      	ldrb	r3, [r3, #9]
 800bbf0:	2b03      	cmp	r3, #3
 800bbf2:	d82c      	bhi.n	800bc4e <L_turn_select+0x66>
 800bbf4:	a201      	add	r2, pc, #4	; (adr r2, 800bbfc <L_turn_select+0x14>)
 800bbf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbfa:	bf00      	nop
 800bbfc:	0800bc0d 	.word	0x0800bc0d
 800bc00:	0800bc2b 	.word	0x0800bc2b
 800bc04:	0800bc31 	.word	0x0800bc31
 800bc08:	0800bc37 	.word	0x0800bc37
  case 0:
	  //加減速超信地旋回
	  Decelerate();
 800bc0c:	f7ff f8e0 	bl	800add0 <Decelerate>
	  wait(0.3);
 800bc10:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800bc58 <L_turn_select+0x70>
 800bc14:	f7fe ffb0 	bl	800ab78 <wait>
	  turn_left();
 800bc18:	f7ff fb56 	bl	800b2c8 <turn_left>
	  wait(0.3);
 800bc1c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bc58 <L_turn_select+0x70>
 800bc20:	f7fe ffaa 	bl	800ab78 <wait>
      Accelerate();
 800bc24:	f7ff f828 	bl	800ac78 <Accelerate>
      break;
 800bc28:	e011      	b.n	800bc4e <L_turn_select+0x66>
  case 1:
	  //緩旋回
	  slow_turn_L();
 800bc2a:	f7ff fc71 	bl	800b510 <slow_turn_L>
	  break;
 800bc2e:	e00e      	b.n	800bc4e <L_turn_select+0x66>
  case 2:
	  //片輪旋回
	  shinchi_turn_L();
 800bc30:	f7ff fdee 	bl	800b810 <shinchi_turn_L>
	  break;
 800bc34:	e00b      	b.n	800bc4e <L_turn_select+0x66>
  case 3:
	  //IMUで等角速度超信地旋回
      Decelerate();
 800bc36:	f7ff f8cb 	bl	800add0 <Decelerate>
      IMU_turn(90,5);
 800bc3a:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bc60 <L_turn_select+0x78>
 800bc3e:	205a      	movs	r0, #90	; 0x5a
 800bc40:	f7ff fa2e 	bl	800b0a0 <IMU_turn>
      IMU_init();
 800bc44:	f7fd fe1a 	bl	800987c <IMU_init>
      Accelerate();
 800bc48:	f7ff f816 	bl	800ac78 <Accelerate>
      break;
 800bc4c:	bf00      	nop
  }
}
 800bc4e:	bf00      	nop
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	f3af 8000 	nop.w
 800bc58:	33333333 	.word	0x33333333
 800bc5c:	3fd33333 	.word	0x3fd33333
 800bc60:	00000000 	.word	0x00000000
 800bc64:	40140000 	.word	0x40140000
 800bc68:	20000cf4 	.word	0x20000cf4

0800bc6c <Execution_Select>:
/*---- DEFINING FUNCTION ----*/

void Execution_Select(){
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	af00      	add	r7, sp, #0


	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 800bc70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bc74:	485b      	ldr	r0, [pc, #364]	; (800bde4 <Execution_Select+0x178>)
 800bc76:	f005 f853 	bl	8010d20 <HAL_GPIO_ReadPin>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	f040 80a3 	bne.w	800bdc8 <Execution_Select+0x15c>
	    	printf("押した\r\n");
 800bc82:	4859      	ldr	r0, [pc, #356]	; (800bde8 <Execution_Select+0x17c>)
 800bc84:	f008 ff8c 	bl	8014ba0 <puts>
			Motor_PWM_Stop();
 800bc88:	f7fe fa12 	bl	800a0b0 <Motor_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 800bc8c:	4857      	ldr	r0, [pc, #348]	; (800bdec <Execution_Select+0x180>)
 800bc8e:	f006 fa7e 	bl	801218e <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim8);
 800bc92:	4857      	ldr	r0, [pc, #348]	; (800bdf0 <Execution_Select+0x184>)
 800bc94:	f006 fa7b 	bl	801218e <HAL_TIM_Base_Stop_IT>
			Emitter_OFF();
 800bc98:	f7fe f99a 	bl	8009fd0 <Emitter_OFF>
			ADC_Stop();
 800bc9c:	f7fe f9c6 	bl	800a02c <ADC_Stop>
	    	HAL_Delay(400);
 800bca0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800bca4:	f003 f87e 	bl	800eda4 <HAL_Delay>

	    	mode.select += 1;
 800bca8:	4b52      	ldr	r3, [pc, #328]	; (800bdf4 <Execution_Select+0x188>)
 800bcaa:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	b25a      	sxtb	r2, r3
 800bcb6:	4b4f      	ldr	r3, [pc, #316]	; (800bdf4 <Execution_Select+0x188>)
 800bcb8:	711a      	strb	r2, [r3, #4]
	    	if(mode.select == 5)
 800bcba:	4b4e      	ldr	r3, [pc, #312]	; (800bdf4 <Execution_Select+0x188>)
 800bcbc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bcc0:	2b05      	cmp	r3, #5
 800bcc2:	f040 8081 	bne.w	800bdc8 <Execution_Select+0x15c>
	    		mode.select = 3;
 800bcc6:	4b4b      	ldr	r3, [pc, #300]	; (800bdf4 <Execution_Select+0x188>)
 800bcc8:	2203      	movs	r2, #3
 800bcca:	711a      	strb	r2, [r3, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	    }

	   //printf("%d\r\n",mode.select);

	while(mode.select%2 == 1){
<<<<<<< HEAD
 800bce2:	e078      	b.n	800bdd6 <Execution_Select+0x152>

	  	    EN3_L.count = TIM3 -> CNT;
 800bce4:	4b48      	ldr	r3, [pc, #288]	; (800be08 <Execution_Select+0x184>)
 800bce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce8:	461a      	mov	r2, r3
 800bcea:	4b48      	ldr	r3, [pc, #288]	; (800be0c <Execution_Select+0x188>)
 800bcec:	601a      	str	r2, [r3, #0]
	  	   // EN3_L.count = -(EN3_L.count - (30000-1));
	  	    printf("%d\r\n",EN3_L.count);
 800bcee:	4b47      	ldr	r3, [pc, #284]	; (800be0c <Execution_Select+0x188>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	4846      	ldr	r0, [pc, #280]	; (800be10 <Execution_Select+0x18c>)
 800bcf6:	f00a ff2d 	bl	8016b54 <iprintf>
=======
 800bccc:	e07c      	b.n	800bdc8 <Execution_Select+0x15c>

	  	    EN3_L.count = TIM3 -> CNT;
 800bcce:	4b4a      	ldr	r3, [pc, #296]	; (800bdf8 <Execution_Select+0x18c>)
 800bcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	4b49      	ldr	r3, [pc, #292]	; (800bdfc <Execution_Select+0x190>)
 800bcd6:	601a      	str	r2, [r3, #0]
	  	   // EN3_L.count = -(EN3_L.count - (30000-1));
	  	    printf("%d\r\n",EN3_L.count);
 800bcd8:	4b48      	ldr	r3, [pc, #288]	; (800bdfc <Execution_Select+0x190>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4619      	mov	r1, r3
 800bcde:	4848      	ldr	r0, [pc, #288]	; (800be00 <Execution_Select+0x194>)
 800bce0:	f008 feea 	bl	8014ab8 <iprintf>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	  	    //EN3_L.integrate += EN3_L.count;


	  if(30000 -1 + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= EN3_L.count ){
<<<<<<< HEAD
 800bcfa:	4b44      	ldr	r3, [pc, #272]	; (800be0c <Execution_Select+0x188>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f249 522e 	movw	r2, #38190	; 0x952e
 800bd02:	4293      	cmp	r3, r2
 800bd04:	dd1e      	ble.n	800bd44 <Execution_Select+0xc0>
	  	  mode.LED += 1;
 800bd06:	4b3f      	ldr	r3, [pc, #252]	; (800be04 <Execution_Select+0x180>)
 800bd08:	f993 3000 	ldrsb.w	r3, [r3]
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	3301      	adds	r3, #1
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	b25a      	sxtb	r2, r3
 800bd14:	4b3b      	ldr	r3, [pc, #236]	; (800be04 <Execution_Select+0x180>)
 800bd16:	701a      	strb	r2, [r3, #0]
	  	  if(mode.LED > 7)
 800bd18:	4b3a      	ldr	r3, [pc, #232]	; (800be04 <Execution_Select+0x180>)
 800bd1a:	f993 3000 	ldrsb.w	r3, [r3]
 800bd1e:	2b07      	cmp	r3, #7
 800bd20:	dd02      	ble.n	800bd28 <Execution_Select+0xa4>
	  		  mode.LED = 0;
 800bd22:	4b38      	ldr	r3, [pc, #224]	; (800be04 <Execution_Select+0x180>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	701a      	strb	r2, [r3, #0]
	  	  LED_Change();
 800bd28:	f7fe fc78 	bl	800a61c <LED_Change>

	  	  Encoder_Reset();
 800bd2c:	f7fe feda 	bl	800aae4 <Encoder_Reset>
	  	  //mode.execution = mode.LED;
	  	  mode.execution = mode.LED;
 800bd30:	4b34      	ldr	r3, [pc, #208]	; (800be04 <Execution_Select+0x180>)
 800bd32:	f993 2000 	ldrsb.w	r2, [r3]
 800bd36:	4b33      	ldr	r3, [pc, #204]	; (800be04 <Execution_Select+0x180>)
 800bd38:	709a      	strb	r2, [r3, #2]
	  	  HAL_Delay(500);
 800bd3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bd3e:	f005 f87f 	bl	8010e40 <HAL_Delay>
 800bd42:	e048      	b.n	800bdd6 <Execution_Select+0x152>

	  }
	  else if(30000 -1 - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= EN3_L.count){
 800bd44:	4b31      	ldr	r3, [pc, #196]	; (800be0c <Execution_Select+0x188>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f245 522f 	movw	r2, #21807	; 0x552f
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	dc1e      	bgt.n	800bd8e <Execution_Select+0x10a>
	  	  mode.LED -= 1;
 800bd50:	4b2c      	ldr	r3, [pc, #176]	; (800be04 <Execution_Select+0x180>)
 800bd52:	f993 3000 	ldrsb.w	r3, [r3]
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	b25a      	sxtb	r2, r3
 800bd5e:	4b29      	ldr	r3, [pc, #164]	; (800be04 <Execution_Select+0x180>)
 800bd60:	701a      	strb	r2, [r3, #0]
	  	  if(mode.LED < 0)
 800bd62:	4b28      	ldr	r3, [pc, #160]	; (800be04 <Execution_Select+0x180>)
 800bd64:	f993 3000 	ldrsb.w	r3, [r3]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	da02      	bge.n	800bd72 <Execution_Select+0xee>
	  	  		  mode.LED = 7;
 800bd6c:	4b25      	ldr	r3, [pc, #148]	; (800be04 <Execution_Select+0x180>)
 800bd6e:	2207      	movs	r2, #7
 800bd70:	701a      	strb	r2, [r3, #0]
	  	  LED_Change();
 800bd72:	f7fe fc53 	bl	800a61c <LED_Change>

	  	  Encoder_Reset();
 800bd76:	f7fe feb5 	bl	800aae4 <Encoder_Reset>
	  	  //mode.execution = mode.LED;
	  	  mode.execution = mode.LED;
 800bd7a:	4b22      	ldr	r3, [pc, #136]	; (800be04 <Execution_Select+0x180>)
 800bd7c:	f993 2000 	ldrsb.w	r2, [r3]
 800bd80:	4b20      	ldr	r3, [pc, #128]	; (800be04 <Execution_Select+0x180>)
 800bd82:	709a      	strb	r2, [r3, #2]
	  	  HAL_Delay(500);
 800bd84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bd88:	f005 f85a 	bl	8010e40 <HAL_Delay>
 800bd8c:	e023      	b.n	800bdd6 <Execution_Select+0x152>
	  }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 800bd8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bd92:	4818      	ldr	r0, [pc, #96]	; (800bdf4 <Execution_Select+0x170>)
 800bd94:	f007 f812 	bl	8012dbc <HAL_GPIO_ReadPin>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d11b      	bne.n	800bdd6 <Execution_Select+0x152>
		  //printf("\r\n");
		      HAL_Delay(250);
 800bd9e:	20fa      	movs	r0, #250	; 0xfa
 800bda0:	f005 f84e 	bl	8010e40 <HAL_Delay>
	  		  Init(); // mycodeInit(); // mycode
 800bda4:	f7fe f99e 	bl	800a0e4 <Init>
	  		  TIM3 -> CNT = 30000 - 1;
 800bda8:	4b17      	ldr	r3, [pc, #92]	; (800be08 <Execution_Select+0x184>)
 800bdaa:	f247 522f 	movw	r2, #29999	; 0x752f
 800bdae:	625a      	str	r2, [r3, #36]	; 0x24
	  		  TIM4 -> CNT = 30000 - 1;
 800bdb0:	4b18      	ldr	r3, [pc, #96]	; (800be14 <Execution_Select+0x190>)
 800bdb2:	f247 522f 	movw	r2, #29999	; 0x752f
 800bdb6:	625a      	str	r2, [r3, #36]	; 0x24
	  		  HAL_TIM_Base_Start_IT(&htim8);
 800bdb8:	4811      	ldr	r0, [pc, #68]	; (800be00 <Execution_Select+0x17c>)
 800bdba:	f008 fa12 	bl	80141e2 <HAL_TIM_Base_Start_IT>
	  		  HAL_TIM_Base_Start_IT(&htim1);
 800bdbe:	480f      	ldr	r0, [pc, #60]	; (800bdfc <Execution_Select+0x178>)
 800bdc0:	f008 fa0f 	bl	80141e2 <HAL_TIM_Base_Start_IT>
	  		  mode.select += 1;
 800bdc4:	4b0f      	ldr	r3, [pc, #60]	; (800be04 <Execution_Select+0x180>)
 800bdc6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	3301      	adds	r3, #1
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	b25a      	sxtb	r2, r3
 800bdd2:	4b0c      	ldr	r3, [pc, #48]	; (800be04 <Execution_Select+0x180>)
 800bdd4:	711a      	strb	r2, [r3, #4]
	while(mode.select%2 == 1){
 800bdd6:	4b0b      	ldr	r3, [pc, #44]	; (800be04 <Execution_Select+0x180>)
 800bdd8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f003 0301 	and.w	r3, r3, #1
 800bde2:	bfb8      	it	lt
 800bde4:	425b      	neglt	r3, r3
 800bde6:	b25b      	sxtb	r3, r3
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	f43f af7b 	beq.w	800bce4 <Execution_Select+0x60>
=======
 800bce4:	4b45      	ldr	r3, [pc, #276]	; (800bdfc <Execution_Select+0x190>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f249 522e 	movw	r2, #38190	; 0x952e
 800bcec:	4293      	cmp	r3, r2
 800bcee:	dd1e      	ble.n	800bd2e <Execution_Select+0xc2>
	  	  mode.LED += 1;
 800bcf0:	4b40      	ldr	r3, [pc, #256]	; (800bdf4 <Execution_Select+0x188>)
 800bcf2:	f993 3000 	ldrsb.w	r3, [r3]
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	b25a      	sxtb	r2, r3
 800bcfe:	4b3d      	ldr	r3, [pc, #244]	; (800bdf4 <Execution_Select+0x188>)
 800bd00:	701a      	strb	r2, [r3, #0]
	  	  if(mode.LED > 7)
 800bd02:	4b3c      	ldr	r3, [pc, #240]	; (800bdf4 <Execution_Select+0x188>)
 800bd04:	f993 3000 	ldrsb.w	r3, [r3]
 800bd08:	2b07      	cmp	r3, #7
 800bd0a:	dd02      	ble.n	800bd12 <Execution_Select+0xa6>
	  		  mode.LED = 0;
 800bd0c:	4b39      	ldr	r3, [pc, #228]	; (800bdf4 <Execution_Select+0x188>)
 800bd0e:	2200      	movs	r2, #0
 800bd10:	701a      	strb	r2, [r3, #0]
	  	  LED_Change();
 800bd12:	f7fe fc51 	bl	800a5b8 <LED_Change>

	  	  Encoder_Reset();
 800bd16:	f7fe fecd 	bl	800aab4 <Encoder_Reset>
	  	  //mode.execution = mode.LED;
	  	  mode.execution = mode.LED;
 800bd1a:	4b36      	ldr	r3, [pc, #216]	; (800bdf4 <Execution_Select+0x188>)
 800bd1c:	f993 2000 	ldrsb.w	r2, [r3]
 800bd20:	4b34      	ldr	r3, [pc, #208]	; (800bdf4 <Execution_Select+0x188>)
 800bd22:	709a      	strb	r2, [r3, #2]
	  	  HAL_Delay(500);
 800bd24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bd28:	f003 f83c 	bl	800eda4 <HAL_Delay>
 800bd2c:	e04c      	b.n	800bdc8 <Execution_Select+0x15c>

	  }
	  else if(30000 -1 - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= EN3_L.count){
 800bd2e:	4b33      	ldr	r3, [pc, #204]	; (800bdfc <Execution_Select+0x190>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f245 522f 	movw	r2, #21807	; 0x552f
 800bd36:	4293      	cmp	r3, r2
 800bd38:	dc1e      	bgt.n	800bd78 <Execution_Select+0x10c>
	  	  mode.LED -= 1;
 800bd3a:	4b2e      	ldr	r3, [pc, #184]	; (800bdf4 <Execution_Select+0x188>)
 800bd3c:	f993 3000 	ldrsb.w	r3, [r3]
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	3b01      	subs	r3, #1
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	b25a      	sxtb	r2, r3
 800bd48:	4b2a      	ldr	r3, [pc, #168]	; (800bdf4 <Execution_Select+0x188>)
 800bd4a:	701a      	strb	r2, [r3, #0]
	  	  if(mode.LED < 0)
 800bd4c:	4b29      	ldr	r3, [pc, #164]	; (800bdf4 <Execution_Select+0x188>)
 800bd4e:	f993 3000 	ldrsb.w	r3, [r3]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	da02      	bge.n	800bd5c <Execution_Select+0xf0>
	  	  		  mode.LED = 7;
 800bd56:	4b27      	ldr	r3, [pc, #156]	; (800bdf4 <Execution_Select+0x188>)
 800bd58:	2207      	movs	r2, #7
 800bd5a:	701a      	strb	r2, [r3, #0]
	  	  LED_Change();
 800bd5c:	f7fe fc2c 	bl	800a5b8 <LED_Change>

	  	  Encoder_Reset();
 800bd60:	f7fe fea8 	bl	800aab4 <Encoder_Reset>
	  	  //mode.execution = mode.LED;
	  	  mode.execution = mode.LED;
 800bd64:	4b23      	ldr	r3, [pc, #140]	; (800bdf4 <Execution_Select+0x188>)
 800bd66:	f993 2000 	ldrsb.w	r2, [r3]
 800bd6a:	4b22      	ldr	r3, [pc, #136]	; (800bdf4 <Execution_Select+0x188>)
 800bd6c:	709a      	strb	r2, [r3, #2]
	  	  HAL_Delay(500);
 800bd6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bd72:	f003 f817 	bl	800eda4 <HAL_Delay>
 800bd76:	e027      	b.n	800bdc8 <Execution_Select+0x15c>
	  }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 800bd78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bd7c:	4819      	ldr	r0, [pc, #100]	; (800bde4 <Execution_Select+0x178>)
 800bd7e:	f004 ffcf 	bl	8010d20 <HAL_GPIO_ReadPin>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d11f      	bne.n	800bdc8 <Execution_Select+0x15c>
		  printf("\r\n");
 800bd88:	481e      	ldr	r0, [pc, #120]	; (800be04 <Execution_Select+0x198>)
 800bd8a:	f008 ff09 	bl	8014ba0 <puts>
		      HAL_Delay(500);
 800bd8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bd92:	f003 f807 	bl	800eda4 <HAL_Delay>
	  		  Init(); // mycodeInit(); // mycode
 800bd96:	f7fe f9a5 	bl	800a0e4 <Init>
	  		  TIM3 -> CNT = 30000 - 1;
 800bd9a:	4b17      	ldr	r3, [pc, #92]	; (800bdf8 <Execution_Select+0x18c>)
 800bd9c:	f247 522f 	movw	r2, #29999	; 0x752f
 800bda0:	625a      	str	r2, [r3, #36]	; 0x24
	  		  TIM4 -> CNT = 30000 - 1;
 800bda2:	4b19      	ldr	r3, [pc, #100]	; (800be08 <Execution_Select+0x19c>)
 800bda4:	f247 522f 	movw	r2, #29999	; 0x752f
 800bda8:	625a      	str	r2, [r3, #36]	; 0x24
	  		  HAL_TIM_Base_Start_IT(&htim8);
 800bdaa:	4811      	ldr	r0, [pc, #68]	; (800bdf0 <Execution_Select+0x184>)
 800bdac:	f006 f9cb 	bl	8012146 <HAL_TIM_Base_Start_IT>
	  		  HAL_TIM_Base_Start_IT(&htim1);
 800bdb0:	480e      	ldr	r0, [pc, #56]	; (800bdec <Execution_Select+0x180>)
 800bdb2:	f006 f9c8 	bl	8012146 <HAL_TIM_Base_Start_IT>
	  		  mode.select += 1;
 800bdb6:	4b0f      	ldr	r3, [pc, #60]	; (800bdf4 <Execution_Select+0x188>)
 800bdb8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	b25a      	sxtb	r2, r3
 800bdc4:	4b0b      	ldr	r3, [pc, #44]	; (800bdf4 <Execution_Select+0x188>)
 800bdc6:	711a      	strb	r2, [r3, #4]
	while(mode.select%2 == 1){
 800bdc8:	4b0a      	ldr	r3, [pc, #40]	; (800bdf4 <Execution_Select+0x188>)
 800bdca:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f003 0301 	and.w	r3, r3, #1
 800bdd4:	bfb8      	it	lt
 800bdd6:	425b      	neglt	r3, r3
 800bdd8:	b25b      	sxtb	r3, r3
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	f43f af77 	beq.w	800bcce <Execution_Select+0x62>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
}

	}
  }
<<<<<<< HEAD
 800bdee:	bf00      	nop
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	40020400 	.word	0x40020400
 800bdf8:	08018a54 	.word	0x08018a54
 800bdfc:	2001a2a8 	.word	0x2001a2a8
 800be00:	2000e050 	.word	0x2000e050
 800be04:	20000068 	.word	0x20000068
 800be08:	40000400 	.word	0x40000400
 800be0c:	20000044 	.word	0x20000044
 800be10:	08018a60 	.word	0x08018a60
 800be14:	40000800 	.word	0x40000800

0800be18 <Walk_Map_Update>:
=======
 800bde0:	bf00      	nop
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	40020400 	.word	0x40020400
 800bde8:	080169b4 	.word	0x080169b4
 800bdec:	20016130 	.word	0x20016130
 800bdf0:	20005090 	.word	0x20005090
 800bdf4:	20000cf4 	.word	0x20000cf4
 800bdf8:	40000400 	.word	0x40000400
 800bdfc:	20000cd0 	.word	0x20000cd0
 800be00:	080169c0 	.word	0x080169c0
 800be04:	08016920 	.word	0x08016920
 800be08:	40000800 	.word	0x40000800

0800be0c <Walk_Map_Update>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
void Gain_Change(){

}


void Walk_Map_Update(){
<<<<<<< HEAD
 800be18:	b480      	push	{r7}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
	//初期化大事すぎた。hosu
	int i = 0, j=0, flag=0, hosu=0;
 800be1e:	2300      	movs	r3, #0
 800be20:	60fb      	str	r3, [r7, #12]
 800be22:	2300      	movs	r3, #0
 800be24:	60bb      	str	r3, [r7, #8]
 800be26:	2300      	movs	r3, #0
 800be28:	607b      	str	r3, [r7, #4]
 800be2a:	2300      	movs	r3, #0
 800be2c:	603b      	str	r3, [r7, #0]

	//区画数に応じて"�?大歩数 + ゴールのマス�?-1"に初期�?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800be2e:	2300      	movs	r3, #0
 800be30:	60fb      	str	r3, [r7, #12]
 800be32:	e013      	b.n	800be5c <Walk_Map_Update+0x44>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800be34:	2300      	movs	r3, #0
 800be36:	60bb      	str	r3, [r7, #8]
 800be38:	e00a      	b.n	800be50 <Walk_Map_Update+0x38>
			walk_map[i][j] = NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1;
 800be3a:	4a93      	ldr	r2, [pc, #588]	; (800c088 <Walk_Map_Update+0x270>)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	441a      	add	r2, r3
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	4413      	add	r3, r2
 800be46:	220f      	movs	r2, #15
 800be48:	701a      	strb	r2, [r3, #0]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	3301      	adds	r3, #1
 800be4e:	60bb      	str	r3, [r7, #8]
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	2b03      	cmp	r3, #3
 800be54:	ddf1      	ble.n	800be3a <Walk_Map_Update+0x22>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	3301      	adds	r3, #1
 800be5a:	60fb      	str	r3, [r7, #12]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2b03      	cmp	r3, #3
 800be60:	dde8      	ble.n	800be34 <Walk_Map_Update+0x1c>
=======
 800be0c:	b480      	push	{r7}
 800be0e:	b085      	sub	sp, #20
 800be10:	af00      	add	r7, sp, #0
	//初期化大事すぎた。hosu
	int i = 0, j=0, flag=0, hosu=0;
 800be12:	2300      	movs	r3, #0
 800be14:	60fb      	str	r3, [r7, #12]
 800be16:	2300      	movs	r3, #0
 800be18:	60bb      	str	r3, [r7, #8]
 800be1a:	2300      	movs	r3, #0
 800be1c:	607b      	str	r3, [r7, #4]
 800be1e:	2300      	movs	r3, #0
 800be20:	603b      	str	r3, [r7, #0]

	//区画数に応じて"�?大歩数 + ゴールのマス�?-1"に初期�?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800be22:	2300      	movs	r3, #0
 800be24:	60fb      	str	r3, [r7, #12]
 800be26:	e013      	b.n	800be50 <Walk_Map_Update+0x44>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800be28:	2300      	movs	r3, #0
 800be2a:	60bb      	str	r3, [r7, #8]
 800be2c:	e00a      	b.n	800be44 <Walk_Map_Update+0x38>
			walk_map[i][j] = NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1;
 800be2e:	4a93      	ldr	r2, [pc, #588]	; (800c07c <Walk_Map_Update+0x270>)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	441a      	add	r2, r3
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	4413      	add	r3, r2
 800be3a:	220f      	movs	r2, #15
 800be3c:	701a      	strb	r2, [r3, #0]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	3301      	adds	r3, #1
 800be42:	60bb      	str	r3, [r7, #8]
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	2b03      	cmp	r3, #3
 800be48:	ddf1      	ble.n	800be2e <Walk_Map_Update+0x22>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3301      	adds	r3, #1
 800be4e:	60fb      	str	r3, [r7, #12]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2b03      	cmp	r3, #3
 800be54:	dde8      	ble.n	800be28 <Walk_Map_Update+0x1c>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
		}
	}

	//ゴール区画�?0に初期�?
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
<<<<<<< HEAD
 800be62:	2302      	movs	r3, #2
 800be64:	60fb      	str	r3, [r7, #12]
 800be66:	e013      	b.n	800be90 <Walk_Map_Update+0x78>
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800be68:	2300      	movs	r3, #0
 800be6a:	60bb      	str	r3, [r7, #8]
 800be6c:	e00a      	b.n	800be84 <Walk_Map_Update+0x6c>
			walk_map[i][j] = 0;
 800be6e:	4a86      	ldr	r2, [pc, #536]	; (800c088 <Walk_Map_Update+0x270>)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	441a      	add	r2, r3
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	4413      	add	r3, r2
 800be7a:	2200      	movs	r2, #0
 800be7c:	701a      	strb	r2, [r3, #0]
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	3301      	adds	r3, #1
 800be82:	60bb      	str	r3, [r7, #8]
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	2b01      	cmp	r3, #1
 800be88:	ddf1      	ble.n	800be6e <Walk_Map_Update+0x56>
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	3301      	adds	r3, #1
 800be8e:	60fb      	str	r3, [r7, #12]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2b03      	cmp	r3, #3
 800be94:	dde8      	ble.n	800be68 <Walk_Map_Update+0x50>
=======
 800be56:	2302      	movs	r3, #2
 800be58:	60fb      	str	r3, [r7, #12]
 800be5a:	e013      	b.n	800be84 <Walk_Map_Update+0x78>
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800be5c:	2300      	movs	r3, #0
 800be5e:	60bb      	str	r3, [r7, #8]
 800be60:	e00a      	b.n	800be78 <Walk_Map_Update+0x6c>
			walk_map[i][j] = 0;
 800be62:	4a86      	ldr	r2, [pc, #536]	; (800c07c <Walk_Map_Update+0x270>)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	441a      	add	r2, r3
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	4413      	add	r3, r2
 800be6e:	2200      	movs	r2, #0
 800be70:	701a      	strb	r2, [r3, #0]
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	3301      	adds	r3, #1
 800be76:	60bb      	str	r3, [r7, #8]
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	ddf1      	ble.n	800be62 <Walk_Map_Update+0x56>
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	3301      	adds	r3, #1
 800be82:	60fb      	str	r3, [r7, #12]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b03      	cmp	r3, #3
 800be88:	dde8      	ble.n	800be5c <Walk_Map_Update+0x50>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
		}
	}

	//壁が無�?として、�?�区画に歩数を割り当てる�??
	do{
		flag = 0;
<<<<<<< HEAD
 800be96:	2300      	movs	r3, #0
 800be98:	607b      	str	r3, [r7, #4]
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800be9a:	2300      	movs	r3, #0
 800be9c:	60fb      	str	r3, [r7, #12]
 800be9e:	e0e2      	b.n	800c066 <Walk_Map_Update+0x24e>

			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bea0:	2300      	movs	r3, #0
 800bea2:	60bb      	str	r3, [r7, #8]
 800bea4:	e0d8      	b.n	800c058 <Walk_Map_Update+0x240>
				  //map�?"�?大歩数 + ゴールのマス�?-1"でなければ値を代入�?
				  //walk_map[i][j] != NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1 &&
				  if(walk_map[i][j] == hosu){
 800bea6:	4a78      	ldr	r2, [pc, #480]	; (800c088 <Walk_Map_Update+0x270>)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	441a      	add	r2, r3
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	4413      	add	r3, r2
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	461a      	mov	r2, r3
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	4293      	cmp	r3, r2
 800beba:	f040 80ca 	bne.w	800c052 <Walk_Map_Update+0x23a>

					  if(wall[i][j].north != WALL && walk_map[i][j+1] > walk_map[i][j] && j < NUMBER_OF_SQUARES - 1){
 800bebe:	4973      	ldr	r1, [pc, #460]	; (800c08c <Walk_Map_Update+0x274>)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	009a      	lsls	r2, r3, #2
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	4413      	add	r3, r2
 800bec8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800becc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d025      	beq.n	800bf22 <Walk_Map_Update+0x10a>
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	3301      	adds	r3, #1
 800beda:	496b      	ldr	r1, [pc, #428]	; (800c088 <Walk_Map_Update+0x270>)
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	0092      	lsls	r2, r2, #2
 800bee0:	440a      	add	r2, r1
 800bee2:	4413      	add	r3, r2
 800bee4:	781a      	ldrb	r2, [r3, #0]
 800bee6:	4968      	ldr	r1, [pc, #416]	; (800c088 <Walk_Map_Update+0x270>)
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	4419      	add	r1, r3
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	440b      	add	r3, r1
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d914      	bls.n	800bf22 <Walk_Map_Update+0x10a>
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	2b02      	cmp	r3, #2
 800befc:	dc11      	bgt.n	800bf22 <Walk_Map_Update+0x10a>
						  walk_map[i][j+1] = walk_map[i][j] + 1;
 800befe:	4a62      	ldr	r2, [pc, #392]	; (800c088 <Walk_Map_Update+0x270>)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	441a      	add	r2, r3
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	4413      	add	r3, r2
 800bf0a:	781a      	ldrb	r2, [r3, #0]
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	3201      	adds	r2, #1
 800bf12:	b2d0      	uxtb	r0, r2
 800bf14:	495c      	ldr	r1, [pc, #368]	; (800c088 <Walk_Map_Update+0x270>)
 800bf16:	68fa      	ldr	r2, [r7, #12]
 800bf18:	0092      	lsls	r2, r2, #2
 800bf1a:	440a      	add	r2, r1
 800bf1c:	4413      	add	r3, r2
 800bf1e:	4602      	mov	r2, r0
 800bf20:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].east != WALL && walk_map[i+1][j] > walk_map[i][j] && i < NUMBER_OF_SQUARES - 1){
 800bf22:	495a      	ldr	r1, [pc, #360]	; (800c08c <Walk_Map_Update+0x274>)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	009a      	lsls	r2, r3, #2
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bf30:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d025      	beq.n	800bf86 <Walk_Map_Update+0x16e>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	4a52      	ldr	r2, [pc, #328]	; (800c088 <Walk_Map_Update+0x270>)
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	441a      	add	r2, r3
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	4413      	add	r3, r2
 800bf48:	781a      	ldrb	r2, [r3, #0]
 800bf4a:	494f      	ldr	r1, [pc, #316]	; (800c088 <Walk_Map_Update+0x270>)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	4419      	add	r1, r3
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	440b      	add	r3, r1
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d914      	bls.n	800bf86 <Walk_Map_Update+0x16e>
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	dc11      	bgt.n	800bf86 <Walk_Map_Update+0x16e>
						  walk_map[i+1][j] = walk_map[i][j] + 1;
 800bf62:	4a49      	ldr	r2, [pc, #292]	; (800c088 <Walk_Map_Update+0x270>)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	441a      	add	r2, r3
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	781a      	ldrb	r2, [r3, #0]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3301      	adds	r3, #1
 800bf74:	3201      	adds	r2, #1
 800bf76:	b2d1      	uxtb	r1, r2
 800bf78:	4a43      	ldr	r2, [pc, #268]	; (800c088 <Walk_Map_Update+0x270>)
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	441a      	add	r2, r3
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	4413      	add	r3, r2
 800bf82:	460a      	mov	r2, r1
 800bf84:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].south != WALL && walk_map[i][j-1] > walk_map[i][j] && j > 0){
 800bf86:	4941      	ldr	r1, [pc, #260]	; (800c08c <Walk_Map_Update+0x274>)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	009a      	lsls	r2, r3, #2
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	4413      	add	r3, r2
 800bf90:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bf94:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d025      	beq.n	800bfea <Walk_Map_Update+0x1d2>
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	4939      	ldr	r1, [pc, #228]	; (800c088 <Walk_Map_Update+0x270>)
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	0092      	lsls	r2, r2, #2
 800bfa8:	440a      	add	r2, r1
 800bfaa:	4413      	add	r3, r2
 800bfac:	781a      	ldrb	r2, [r3, #0]
 800bfae:	4936      	ldr	r1, [pc, #216]	; (800c088 <Walk_Map_Update+0x270>)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	4419      	add	r1, r3
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	440b      	add	r3, r1
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d914      	bls.n	800bfea <Walk_Map_Update+0x1d2>
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	dd11      	ble.n	800bfea <Walk_Map_Update+0x1d2>
						  walk_map[i][j-1] = walk_map[i][j] + 1;
 800bfc6:	4a30      	ldr	r2, [pc, #192]	; (800c088 <Walk_Map_Update+0x270>)
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	441a      	add	r2, r3
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	781a      	ldrb	r2, [r3, #0]
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	3201      	adds	r2, #1
 800bfda:	b2d0      	uxtb	r0, r2
 800bfdc:	492a      	ldr	r1, [pc, #168]	; (800c088 <Walk_Map_Update+0x270>)
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	0092      	lsls	r2, r2, #2
 800bfe2:	440a      	add	r2, r1
 800bfe4:	4413      	add	r3, r2
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].west != WALL && walk_map[i-1][j] > walk_map[i][j] && i > 0){
 800bfea:	4928      	ldr	r1, [pc, #160]	; (800c08c <Walk_Map_Update+0x274>)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	009a      	lsls	r2, r3, #2
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	4413      	add	r3, r2
 800bff4:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bff8:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d025      	beq.n	800c04e <Walk_Map_Update+0x236>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	3b01      	subs	r3, #1
 800c006:	4a20      	ldr	r2, [pc, #128]	; (800c088 <Walk_Map_Update+0x270>)
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	441a      	add	r2, r3
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	4413      	add	r3, r2
 800c010:	781a      	ldrb	r2, [r3, #0]
 800c012:	491d      	ldr	r1, [pc, #116]	; (800c088 <Walk_Map_Update+0x270>)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4419      	add	r1, r3
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	440b      	add	r3, r1
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	429a      	cmp	r2, r3
 800c022:	d914      	bls.n	800c04e <Walk_Map_Update+0x236>
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2b00      	cmp	r3, #0
 800c028:	dd11      	ble.n	800c04e <Walk_Map_Update+0x236>
						  walk_map[i-1][j] = walk_map[i][j] + 1;
 800c02a:	4a17      	ldr	r2, [pc, #92]	; (800c088 <Walk_Map_Update+0x270>)
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	441a      	add	r2, r3
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	4413      	add	r3, r2
 800c036:	781a      	ldrb	r2, [r3, #0]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	3b01      	subs	r3, #1
 800c03c:	3201      	adds	r2, #1
 800c03e:	b2d1      	uxtb	r1, r2
 800c040:	4a11      	ldr	r2, [pc, #68]	; (800c088 <Walk_Map_Update+0x270>)
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	441a      	add	r2, r3
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	4413      	add	r3, r2
 800c04a:	460a      	mov	r2, r1
 800c04c:	701a      	strb	r2, [r3, #0]
					  }

					  flag = 1;
 800c04e:	2301      	movs	r3, #1
 800c050:	607b      	str	r3, [r7, #4]
			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	3301      	adds	r3, #1
 800c056:	60bb      	str	r3, [r7, #8]
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	2b03      	cmp	r3, #3
 800c05c:	f77f af23 	ble.w	800bea6 <Walk_Map_Update+0x8e>
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	3301      	adds	r3, #1
 800c064:	60fb      	str	r3, [r7, #12]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2b03      	cmp	r3, #3
 800c06a:	f77f af19 	ble.w	800bea0 <Walk_Map_Update+0x88>
=======
 800be8a:	2300      	movs	r3, #0
 800be8c:	607b      	str	r3, [r7, #4]
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800be8e:	2300      	movs	r3, #0
 800be90:	60fb      	str	r3, [r7, #12]
 800be92:	e0e2      	b.n	800c05a <Walk_Map_Update+0x24e>

			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800be94:	2300      	movs	r3, #0
 800be96:	60bb      	str	r3, [r7, #8]
 800be98:	e0d8      	b.n	800c04c <Walk_Map_Update+0x240>
				  //map�?"�?大歩数 + ゴールのマス�?-1"でなければ値を代入�?
				  //walk_map[i][j] != NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1 &&
				  if(walk_map[i][j] == hosu){
 800be9a:	4a78      	ldr	r2, [pc, #480]	; (800c07c <Walk_Map_Update+0x270>)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	441a      	add	r2, r3
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	4413      	add	r3, r2
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	461a      	mov	r2, r3
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	4293      	cmp	r3, r2
 800beae:	f040 80ca 	bne.w	800c046 <Walk_Map_Update+0x23a>

					  if(wall[i][j].north != WALL && walk_map[i][j+1] > walk_map[i][j] && j < NUMBER_OF_SQUARES - 1){
 800beb2:	4973      	ldr	r1, [pc, #460]	; (800c080 <Walk_Map_Update+0x274>)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	009a      	lsls	r2, r3, #2
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	4413      	add	r3, r2
 800bebc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bec0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d025      	beq.n	800bf16 <Walk_Map_Update+0x10a>
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	3301      	adds	r3, #1
 800bece:	496b      	ldr	r1, [pc, #428]	; (800c07c <Walk_Map_Update+0x270>)
 800bed0:	68fa      	ldr	r2, [r7, #12]
 800bed2:	0092      	lsls	r2, r2, #2
 800bed4:	440a      	add	r2, r1
 800bed6:	4413      	add	r3, r2
 800bed8:	781a      	ldrb	r2, [r3, #0]
 800beda:	4968      	ldr	r1, [pc, #416]	; (800c07c <Walk_Map_Update+0x270>)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4419      	add	r1, r3
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	440b      	add	r3, r1
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d914      	bls.n	800bf16 <Walk_Map_Update+0x10a>
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	2b02      	cmp	r3, #2
 800bef0:	dc11      	bgt.n	800bf16 <Walk_Map_Update+0x10a>
						  walk_map[i][j+1] = walk_map[i][j] + 1;
 800bef2:	4a62      	ldr	r2, [pc, #392]	; (800c07c <Walk_Map_Update+0x270>)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	441a      	add	r2, r3
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	4413      	add	r3, r2
 800befe:	781a      	ldrb	r2, [r3, #0]
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	3301      	adds	r3, #1
 800bf04:	3201      	adds	r2, #1
 800bf06:	b2d0      	uxtb	r0, r2
 800bf08:	495c      	ldr	r1, [pc, #368]	; (800c07c <Walk_Map_Update+0x270>)
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	0092      	lsls	r2, r2, #2
 800bf0e:	440a      	add	r2, r1
 800bf10:	4413      	add	r3, r2
 800bf12:	4602      	mov	r2, r0
 800bf14:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].east != WALL && walk_map[i+1][j] > walk_map[i][j] && i < NUMBER_OF_SQUARES - 1){
 800bf16:	495a      	ldr	r1, [pc, #360]	; (800c080 <Walk_Map_Update+0x274>)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	009a      	lsls	r2, r3, #2
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	4413      	add	r3, r2
 800bf20:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bf24:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d025      	beq.n	800bf7a <Walk_Map_Update+0x16e>
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	3301      	adds	r3, #1
 800bf32:	4a52      	ldr	r2, [pc, #328]	; (800c07c <Walk_Map_Update+0x270>)
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	441a      	add	r2, r3
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	781a      	ldrb	r2, [r3, #0]
 800bf3e:	494f      	ldr	r1, [pc, #316]	; (800c07c <Walk_Map_Update+0x270>)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4419      	add	r1, r3
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	440b      	add	r3, r1
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d914      	bls.n	800bf7a <Walk_Map_Update+0x16e>
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2b02      	cmp	r3, #2
 800bf54:	dc11      	bgt.n	800bf7a <Walk_Map_Update+0x16e>
						  walk_map[i+1][j] = walk_map[i][j] + 1;
 800bf56:	4a49      	ldr	r2, [pc, #292]	; (800c07c <Walk_Map_Update+0x270>)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	441a      	add	r2, r3
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	4413      	add	r3, r2
 800bf62:	781a      	ldrb	r2, [r3, #0]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	3301      	adds	r3, #1
 800bf68:	3201      	adds	r2, #1
 800bf6a:	b2d1      	uxtb	r1, r2
 800bf6c:	4a43      	ldr	r2, [pc, #268]	; (800c07c <Walk_Map_Update+0x270>)
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	441a      	add	r2, r3
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	4413      	add	r3, r2
 800bf76:	460a      	mov	r2, r1
 800bf78:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].south != WALL && walk_map[i][j-1] > walk_map[i][j] && j > 0){
 800bf7a:	4941      	ldr	r1, [pc, #260]	; (800c080 <Walk_Map_Update+0x274>)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	009a      	lsls	r2, r3, #2
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	4413      	add	r3, r2
 800bf84:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bf88:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d025      	beq.n	800bfde <Walk_Map_Update+0x1d2>
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	3b01      	subs	r3, #1
 800bf96:	4939      	ldr	r1, [pc, #228]	; (800c07c <Walk_Map_Update+0x270>)
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	0092      	lsls	r2, r2, #2
 800bf9c:	440a      	add	r2, r1
 800bf9e:	4413      	add	r3, r2
 800bfa0:	781a      	ldrb	r2, [r3, #0]
 800bfa2:	4936      	ldr	r1, [pc, #216]	; (800c07c <Walk_Map_Update+0x270>)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	4419      	add	r1, r3
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	440b      	add	r3, r1
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d914      	bls.n	800bfde <Walk_Map_Update+0x1d2>
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	dd11      	ble.n	800bfde <Walk_Map_Update+0x1d2>
						  walk_map[i][j-1] = walk_map[i][j] + 1;
 800bfba:	4a30      	ldr	r2, [pc, #192]	; (800c07c <Walk_Map_Update+0x270>)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	441a      	add	r2, r3
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	781a      	ldrb	r2, [r3, #0]
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	3201      	adds	r2, #1
 800bfce:	b2d0      	uxtb	r0, r2
 800bfd0:	492a      	ldr	r1, [pc, #168]	; (800c07c <Walk_Map_Update+0x270>)
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	0092      	lsls	r2, r2, #2
 800bfd6:	440a      	add	r2, r1
 800bfd8:	4413      	add	r3, r2
 800bfda:	4602      	mov	r2, r0
 800bfdc:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].west != WALL && walk_map[i-1][j] > walk_map[i][j] && i > 0){
 800bfde:	4928      	ldr	r1, [pc, #160]	; (800c080 <Walk_Map_Update+0x274>)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	009a      	lsls	r2, r3, #2
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	4413      	add	r3, r2
 800bfe8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bfec:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d025      	beq.n	800c042 <Walk_Map_Update+0x236>
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	3b01      	subs	r3, #1
 800bffa:	4a20      	ldr	r2, [pc, #128]	; (800c07c <Walk_Map_Update+0x270>)
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	441a      	add	r2, r3
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	4413      	add	r3, r2
 800c004:	781a      	ldrb	r2, [r3, #0]
 800c006:	491d      	ldr	r1, [pc, #116]	; (800c07c <Walk_Map_Update+0x270>)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	4419      	add	r1, r3
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	440b      	add	r3, r1
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	429a      	cmp	r2, r3
 800c016:	d914      	bls.n	800c042 <Walk_Map_Update+0x236>
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	dd11      	ble.n	800c042 <Walk_Map_Update+0x236>
						  walk_map[i-1][j] = walk_map[i][j] + 1;
 800c01e:	4a17      	ldr	r2, [pc, #92]	; (800c07c <Walk_Map_Update+0x270>)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	441a      	add	r2, r3
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	4413      	add	r3, r2
 800c02a:	781a      	ldrb	r2, [r3, #0]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	3b01      	subs	r3, #1
 800c030:	3201      	adds	r2, #1
 800c032:	b2d1      	uxtb	r1, r2
 800c034:	4a11      	ldr	r2, [pc, #68]	; (800c07c <Walk_Map_Update+0x270>)
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	441a      	add	r2, r3
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	4413      	add	r3, r2
 800c03e:	460a      	mov	r2, r1
 800c040:	701a      	strb	r2, [r3, #0]
					  }

					  flag = 1;
 800c042:	2301      	movs	r3, #1
 800c044:	607b      	str	r3, [r7, #4]
			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	3301      	adds	r3, #1
 800c04a:	60bb      	str	r3, [r7, #8]
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	2b03      	cmp	r3, #3
 800c050:	f77f af23 	ble.w	800be9a <Walk_Map_Update+0x8e>
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	3301      	adds	r3, #1
 800c058:	60fb      	str	r3, [r7, #12]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	f77f af19 	ble.w	800be94 <Walk_Map_Update+0x88>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
			       }
			  }
		  }
		  //歩数と繰り返しの回数は等し�?
		  hosu++;
<<<<<<< HEAD
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	3301      	adds	r3, #1
 800c072:	603b      	str	r3, [r7, #0]
	}while(flag);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	f47f af0d 	bne.w	800be96 <Walk_Map_Update+0x7e>

}
 800c07c:	bf00      	nop
 800c07e:	3714      	adds	r7, #20
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr
 800c088:	2001a268 	.word	0x2001a268
 800c08c:	2001a6d8 	.word	0x2001a6d8

0800c090 <Tire_Maintenance>:
=======
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	3301      	adds	r3, #1
 800c066:	603b      	str	r3, [r7, #0]
	}while(flag);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f47f af0d 	bne.w	800be8a <Walk_Map_Update+0x7e>

}
 800c070:	bf00      	nop
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr
 800c07c:	200160f0 	.word	0x200160f0
 800c080:	20016560 	.word	0x20016560

0800c084 <Tire_Maintenance>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
//
//	}
}


void Tire_Maintenance(){
<<<<<<< HEAD
 800c090:	b580      	push	{r7, lr}
 800c092:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 800c094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c098:	f004 fed2 	bl	8010e40 <HAL_Delay>
	Accelerate();
 800c09c:	f7fe fddc 	bl	800ac58 <Accelerate>
	straight();
 800c0a0:	f7fe ff36 	bl	800af10 <straight>
	straight();
 800c0a4:	f7fe ff34 	bl	800af10 <straight>
	Decelerate();
 800c0a8:	f7fe fe86 	bl	800adb8 <Decelerate>
	Motor_PWM_Stop();
 800c0ac:	f7fe f800 	bl	800a0b0 <Motor_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 800c0b0:	480a      	ldr	r0, [pc, #40]	; (800c0dc <Tire_Maintenance+0x4c>)
 800c0b2:	f008 f8ba 	bl	801422a <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800c0b6:	480a      	ldr	r0, [pc, #40]	; (800c0e0 <Tire_Maintenance+0x50>)
 800c0b8:	f008 f8b7 	bl	801422a <HAL_TIM_Base_Stop_IT>
	while(1){
		printf("リセ�?トな�? : %d\r\n", All_Pulse_anytime);
 800c0bc:	4b09      	ldr	r3, [pc, #36]	; (800c0e4 <Tire_Maintenance+0x54>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	4809      	ldr	r0, [pc, #36]	; (800c0e8 <Tire_Maintenance+0x58>)
 800c0c4:	f00a fd46 	bl	8016b54 <iprintf>
		printf("リセ�?トあ�? : %d\r\n", All_Pulse_cut);
 800c0c8:	4b08      	ldr	r3, [pc, #32]	; (800c0ec <Tire_Maintenance+0x5c>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	4808      	ldr	r0, [pc, #32]	; (800c0f0 <Tire_Maintenance+0x60>)
 800c0d0:	f00a fd40 	bl	8016b54 <iprintf>
		printf("\r\n");
 800c0d4:	4807      	ldr	r0, [pc, #28]	; (800c0f4 <Tire_Maintenance+0x64>)
 800c0d6:	f00a fdb1 	bl	8016c3c <puts>
		printf("リセ�?トな�? : %d\r\n", All_Pulse_anytime);
 800c0da:	e7ef      	b.n	800c0bc <Tire_Maintenance+0x2c>
 800c0dc:	2001a2a8 	.word	0x2001a2a8
 800c0e0:	2000e050 	.word	0x2000e050
 800c0e4:	2000031c 	.word	0x2000031c
 800c0e8:	08018a68 	.word	0x08018a68
 800c0ec:	20000318 	.word	0x20000318
 800c0f0:	08018a84 	.word	0x08018a84
 800c0f4:	080189c0 	.word	0x080189c0

0800c0f8 <wall_set>:
=======
 800c084:	b580      	push	{r7, lr}
 800c086:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 800c088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c08c:	f002 fe8a 	bl	800eda4 <HAL_Delay>
	Accelerate();
 800c090:	f7fe fdf2 	bl	800ac78 <Accelerate>
	straight();
 800c094:	f7fe ff44 	bl	800af20 <straight>
	straight();
 800c098:	f7fe ff42 	bl	800af20 <straight>
	Decelerate();
 800c09c:	f7fe fe98 	bl	800add0 <Decelerate>
	Motor_PWM_Stop();
 800c0a0:	f7fe f806 	bl	800a0b0 <Motor_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 800c0a4:	480a      	ldr	r0, [pc, #40]	; (800c0d0 <Tire_Maintenance+0x4c>)
 800c0a6:	f006 f872 	bl	801218e <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800c0aa:	480a      	ldr	r0, [pc, #40]	; (800c0d4 <Tire_Maintenance+0x50>)
 800c0ac:	f006 f86f 	bl	801218e <HAL_TIM_Base_Stop_IT>
	while(1){
		printf("リセ�?トな�? : %d\r\n", All_Pulse_anytime);
 800c0b0:	4b09      	ldr	r3, [pc, #36]	; (800c0d8 <Tire_Maintenance+0x54>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	4809      	ldr	r0, [pc, #36]	; (800c0dc <Tire_Maintenance+0x58>)
 800c0b8:	f008 fcfe 	bl	8014ab8 <iprintf>
		printf("リセ�?トあ�? : %d\r\n", All_Pulse_cut);
 800c0bc:	4b08      	ldr	r3, [pc, #32]	; (800c0e0 <Tire_Maintenance+0x5c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	4808      	ldr	r0, [pc, #32]	; (800c0e4 <Tire_Maintenance+0x60>)
 800c0c4:	f008 fcf8 	bl	8014ab8 <iprintf>
		printf("\r\n");
 800c0c8:	4807      	ldr	r0, [pc, #28]	; (800c0e8 <Tire_Maintenance+0x64>)
 800c0ca:	f008 fd69 	bl	8014ba0 <puts>
		printf("リセ�?トな�? : %d\r\n", All_Pulse_anytime);
 800c0ce:	e7ef      	b.n	800c0b0 <Tire_Maintenance+0x2c>
 800c0d0:	20016130 	.word	0x20016130
 800c0d4:	20005090 	.word	0x20005090
 800c0d8:	20000fb4 	.word	0x20000fb4
 800c0dc:	080169c8 	.word	0x080169c8
 800c0e0:	20000fb0 	.word	0x20000fb0
 800c0e4:	080169e4 	.word	0x080169e4
 800c0e8:	08016920 	.word	0x08016920

0800c0ec <wall_set>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	}

}
void wall_set(){
<<<<<<< HEAD
 800c0f8:	b490      	push	{r4, r7}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
	uint8_t wall_dir[4];
	  wall_dir[my_direction] = (sl_average + sr_average)/2 > FRONT_WALL  ?   WALL : NOWALL;
 800c0fe:	4b8b      	ldr	r3, [pc, #556]	; (800c32c <wall_set+0x234>)
 800c100:	ed93 7a00 	vldr	s14, [r3]
 800c104:	4b8a      	ldr	r3, [pc, #552]	; (800c330 <wall_set+0x238>)
 800c106:	edd3 7a00 	vldr	s15, [r3]
 800c10a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c10e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c116:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800c11a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c122:	bfcc      	ite	gt
 800c124:	2301      	movgt	r3, #1
 800c126:	2300      	movle	r3, #0
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	4b82      	ldr	r3, [pc, #520]	; (800c334 <wall_set+0x23c>)
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	f107 0108 	add.w	r1, r7, #8
 800c132:	440b      	add	r3, r1
 800c134:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(my_direction + 1)%4] = fr_average > RIGHT_WALL  ?  WALL :  NOWALL;
 800c138:	4b7f      	ldr	r3, [pc, #508]	; (800c338 <wall_set+0x240>)
 800c13a:	edd3 7a00 	vldr	s15, [r3]
 800c13e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800c33c <wall_set+0x244>
 800c142:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c14a:	bfcc      	ite	gt
 800c14c:	2301      	movgt	r3, #1
 800c14e:	2300      	movle	r3, #0
 800c150:	b2d9      	uxtb	r1, r3
 800c152:	4b78      	ldr	r3, [pc, #480]	; (800c334 <wall_set+0x23c>)
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	3301      	adds	r3, #1
 800c158:	425a      	negs	r2, r3
 800c15a:	f003 0303 	and.w	r3, r3, #3
 800c15e:	f002 0203 	and.w	r2, r2, #3
 800c162:	bf58      	it	pl
 800c164:	4253      	negpl	r3, r2
 800c166:	460a      	mov	r2, r1
 800c168:	f107 0108 	add.w	r1, r7, #8
 800c16c:	440b      	add	r3, r1
 800c16e:	f803 2c04 	strb.w	r2, [r3, #-4]
		  wall_dir[(my_direction + 2)%4] = NOWALL;
 800c172:	4b70      	ldr	r3, [pc, #448]	; (800c334 <wall_set+0x23c>)
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	3302      	adds	r3, #2
 800c178:	425a      	negs	r2, r3
 800c17a:	f003 0303 	and.w	r3, r3, #3
 800c17e:	f002 0203 	and.w	r2, r2, #3
 800c182:	bf58      	it	pl
 800c184:	4253      	negpl	r3, r2
 800c186:	f107 0208 	add.w	r2, r7, #8
 800c18a:	4413      	add	r3, r2
 800c18c:	2200      	movs	r2, #0
 800c18e:	f803 2c04 	strb.w	r2, [r3, #-4]
		  wall_dir[(my_direction + 3)%4] = fl_average > LEFT_WALL ?  WALL :  NOWALL;
 800c192:	4b6b      	ldr	r3, [pc, #428]	; (800c340 <wall_set+0x248>)
 800c194:	edd3 7a00 	vldr	s15, [r3]
 800c198:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800c344 <wall_set+0x24c>
 800c19c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a4:	bfcc      	ite	gt
 800c1a6:	2301      	movgt	r3, #1
 800c1a8:	2300      	movle	r3, #0
 800c1aa:	b2d9      	uxtb	r1, r3
 800c1ac:	4b61      	ldr	r3, [pc, #388]	; (800c334 <wall_set+0x23c>)
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	3303      	adds	r3, #3
 800c1b2:	425a      	negs	r2, r3
 800c1b4:	f003 0303 	and.w	r3, r3, #3
 800c1b8:	f002 0203 	and.w	r2, r2, #3
 800c1bc:	bf58      	it	pl
 800c1be:	4253      	negpl	r3, r2
 800c1c0:	460a      	mov	r2, r1
 800c1c2:	f107 0108 	add.w	r1, r7, #8
 800c1c6:	440b      	add	r3, r1
 800c1c8:	f803 2c04 	strb.w	r2, [r3, #-4]

	  wall[x][y].north = wall_dir[0];
 800c1cc:	7939      	ldrb	r1, [r7, #4]
 800c1ce:	4b5e      	ldr	r3, [pc, #376]	; (800c348 <wall_set+0x250>)
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	461c      	mov	r4, r3
 800c1d4:	4b5d      	ldr	r3, [pc, #372]	; (800c34c <wall_set+0x254>)
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	461a      	mov	r2, r3
 800c1da:	460b      	mov	r3, r1
 800c1dc:	f003 0303 	and.w	r3, r3, #3
 800c1e0:	b2d8      	uxtb	r0, r3
 800c1e2:	495b      	ldr	r1, [pc, #364]	; (800c350 <wall_set+0x258>)
 800c1e4:	00a3      	lsls	r3, r4, #2
 800c1e6:	441a      	add	r2, r3
 800c1e8:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c1ec:	f360 0301 	bfi	r3, r0, #0, #2
 800c1f0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].east = wall_dir[1];
 800c1f4:	7979      	ldrb	r1, [r7, #5]
 800c1f6:	4b54      	ldr	r3, [pc, #336]	; (800c348 <wall_set+0x250>)
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	461c      	mov	r4, r3
 800c1fc:	4b53      	ldr	r3, [pc, #332]	; (800c34c <wall_set+0x254>)
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	461a      	mov	r2, r3
 800c202:	460b      	mov	r3, r1
 800c204:	f003 0303 	and.w	r3, r3, #3
 800c208:	b2d8      	uxtb	r0, r3
 800c20a:	4951      	ldr	r1, [pc, #324]	; (800c350 <wall_set+0x258>)
 800c20c:	00a3      	lsls	r3, r4, #2
 800c20e:	441a      	add	r2, r3
 800c210:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c214:	f360 0383 	bfi	r3, r0, #2, #2
 800c218:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].south = wall_dir[2];
 800c21c:	79b9      	ldrb	r1, [r7, #6]
 800c21e:	4b4a      	ldr	r3, [pc, #296]	; (800c348 <wall_set+0x250>)
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	461c      	mov	r4, r3
 800c224:	4b49      	ldr	r3, [pc, #292]	; (800c34c <wall_set+0x254>)
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	461a      	mov	r2, r3
 800c22a:	460b      	mov	r3, r1
 800c22c:	f003 0303 	and.w	r3, r3, #3
 800c230:	b2d8      	uxtb	r0, r3
 800c232:	4947      	ldr	r1, [pc, #284]	; (800c350 <wall_set+0x258>)
 800c234:	00a3      	lsls	r3, r4, #2
 800c236:	441a      	add	r2, r3
 800c238:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c23c:	f360 1305 	bfi	r3, r0, #4, #2
 800c240:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].west = wall_dir[3];
 800c244:	79f9      	ldrb	r1, [r7, #7]
 800c246:	4b40      	ldr	r3, [pc, #256]	; (800c348 <wall_set+0x250>)
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	461c      	mov	r4, r3
 800c24c:	4b3f      	ldr	r3, [pc, #252]	; (800c34c <wall_set+0x254>)
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	461a      	mov	r2, r3
 800c252:	460b      	mov	r3, r1
 800c254:	f003 0303 	and.w	r3, r3, #3
 800c258:	b2d8      	uxtb	r0, r3
 800c25a:	493d      	ldr	r1, [pc, #244]	; (800c350 <wall_set+0x258>)
 800c25c:	00a3      	lsls	r3, r4, #2
 800c25e:	441a      	add	r2, r3
 800c260:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c264:	f360 1387 	bfi	r3, r0, #6, #2
 800c268:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  if(y < (NUMBER_OF_SQUARES-1) )wall[x][y+1].south = wall_dir[0];
 800c26c:	4b37      	ldr	r3, [pc, #220]	; (800c34c <wall_set+0x254>)
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	2b02      	cmp	r3, #2
 800c272:	d812      	bhi.n	800c29a <wall_set+0x1a2>
 800c274:	7939      	ldrb	r1, [r7, #4]
 800c276:	4b34      	ldr	r3, [pc, #208]	; (800c348 <wall_set+0x250>)
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	461a      	mov	r2, r3
 800c27c:	4b33      	ldr	r3, [pc, #204]	; (800c34c <wall_set+0x254>)
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	3301      	adds	r3, #1
 800c282:	f001 0103 	and.w	r1, r1, #3
 800c286:	b2c8      	uxtb	r0, r1
 800c288:	4931      	ldr	r1, [pc, #196]	; (800c350 <wall_set+0x258>)
 800c28a:	0092      	lsls	r2, r2, #2
 800c28c:	441a      	add	r2, r3
 800c28e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c292:	f360 1305 	bfi	r3, r0, #4, #2
 800c296:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(x < (NUMBER_OF_SQUARES-1) )wall[x+1][y].west = wall_dir[1];
 800c29a:	4b2b      	ldr	r3, [pc, #172]	; (800c348 <wall_set+0x250>)
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d811      	bhi.n	800c2c6 <wall_set+0x1ce>
 800c2a2:	7979      	ldrb	r1, [r7, #5]
 800c2a4:	4b28      	ldr	r3, [pc, #160]	; (800c348 <wall_set+0x250>)
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	4a28      	ldr	r2, [pc, #160]	; (800c34c <wall_set+0x254>)
 800c2ac:	7812      	ldrb	r2, [r2, #0]
 800c2ae:	f001 0103 	and.w	r1, r1, #3
 800c2b2:	b2c8      	uxtb	r0, r1
 800c2b4:	4926      	ldr	r1, [pc, #152]	; (800c350 <wall_set+0x258>)
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	441a      	add	r2, r3
 800c2ba:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c2be:	f360 1387 	bfi	r3, r0, #6, #2
 800c2c2:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(y > 0 ) wall[x][y-1].north = wall_dir[2];
 800c2c6:	4b21      	ldr	r3, [pc, #132]	; (800c34c <wall_set+0x254>)
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d012      	beq.n	800c2f4 <wall_set+0x1fc>
 800c2ce:	79b9      	ldrb	r1, [r7, #6]
 800c2d0:	4b1d      	ldr	r3, [pc, #116]	; (800c348 <wall_set+0x250>)
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	4b1d      	ldr	r3, [pc, #116]	; (800c34c <wall_set+0x254>)
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	f001 0103 	and.w	r1, r1, #3
 800c2e0:	b2c8      	uxtb	r0, r1
 800c2e2:	491b      	ldr	r1, [pc, #108]	; (800c350 <wall_set+0x258>)
 800c2e4:	0092      	lsls	r2, r2, #2
 800c2e6:	441a      	add	r2, r3
 800c2e8:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c2ec:	f360 0301 	bfi	r3, r0, #0, #2
 800c2f0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(x > 0 ) wall[x-1][y].east = wall_dir[3];
 800c2f4:	4b14      	ldr	r3, [pc, #80]	; (800c348 <wall_set+0x250>)
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d011      	beq.n	800c320 <wall_set+0x228>
 800c2fc:	79f9      	ldrb	r1, [r7, #7]
 800c2fe:	4b12      	ldr	r3, [pc, #72]	; (800c348 <wall_set+0x250>)
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	3b01      	subs	r3, #1
 800c304:	4a11      	ldr	r2, [pc, #68]	; (800c34c <wall_set+0x254>)
 800c306:	7812      	ldrb	r2, [r2, #0]
 800c308:	f001 0103 	and.w	r1, r1, #3
 800c30c:	b2c8      	uxtb	r0, r1
 800c30e:	4910      	ldr	r1, [pc, #64]	; (800c350 <wall_set+0x258>)
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	441a      	add	r2, r3
 800c314:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c318:	f360 0383 	bfi	r3, r0, #2, #2
 800c31c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

}
 800c320:	bf00      	nop
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bc90      	pop	{r4, r7}
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	2001a7a0 	.word	0x2001a7a0
 800c330:	20019ca8 	.word	0x20019ca8
 800c334:	2000e122 	.word	0x2000e122
 800c338:	2001a6d0 	.word	0x2001a6d0
 800c33c:	42c80000 	.word	0x42c80000
 800c340:	2000e04c 	.word	0x2000e04c
 800c344:	430c0000 	.word	0x430c0000
 800c348:	20009f6c 	.word	0x20009f6c
 800c34c:	20009f6d 	.word	0x20009f6d
 800c350:	2001a6d8 	.word	0x2001a6d8
 800c354:	00000000 	.word	0x00000000

0800c358 <goal_area_search>:
    	}
#endif
}


void goal_area_search(){
 800c358:	b580      	push	{r7, lr}
 800c35a:	b0be      	sub	sp, #248	; 0xf8
 800c35c:	af00      	add	r7, sp, #0

	char orbit;

	//壁更新
	wall_set();
 800c35e:	f7ff fecb 	bl	800c0f8 <wall_set>

	//マップ更新
	Walk_Map_Update();
 800c362:	f7ff fd59 	bl	800be18 <Walk_Map_Update>


	switch(my_direction){
 800c366:	4bcc      	ldr	r3, [pc, #816]	; (800c698 <goal_area_search+0x340>)
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	2b03      	cmp	r3, #3
 800c36c:	f200 86f7 	bhi.w	800d15e <goal_area_search+0xe06>
 800c370:	a201      	add	r2, pc, #4	; (adr r2, 800c378 <goal_area_search+0x20>)
 800c372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c376:	bf00      	nop
 800c378:	0800c389 	.word	0x0800c389
 800c37c:	0800c73d 	.word	0x0800c73d
 800c380:	0800cae7 	.word	0x0800cae7
 800c384:	0800ce23 	.word	0x0800ce23
	case north:

		//現在の座標 == ゴールの下2マス
		//xが小さいほうなら、右回り
		//直進
		Accelerate();
 800c388:	f7fe fc66 	bl	800ac58 <Accelerate>
		Decelerate();
 800c38c:	f7fe fd14 	bl	800adb8 <Decelerate>
		y++;
 800c390:	4bc2      	ldr	r3, [pc, #776]	; (800c69c <goal_area_search+0x344>)
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	3301      	adds	r3, #1
 800c396:	b2da      	uxtb	r2, r3
 800c398:	4bc0      	ldr	r3, [pc, #768]	; (800c69c <goal_area_search+0x344>)
 800c39a:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800c39c:	f7ff feac 	bl	800c0f8 <wall_set>
		//待つ
		for(int i=0;i < WAIT*0.5;i++);
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c3a6:	e004      	b.n	800c3b2 <goal_area_search+0x5a>
 800c3a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c3b2:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800c3b6:	f7fb ffed 	bl	8008394 <__aeabi_i2d>
 800c3ba:	a3b5      	add	r3, pc, #724	; (adr r3, 800c690 <goal_area_search+0x338>)
 800c3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c0:	f7fc fac4 	bl	800894c <__aeabi_dcmplt>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1ee      	bne.n	800c3a8 <goal_area_search+0x50>

		if(x == X_GOAL_LESSER){
 800c3ca:	4bb5      	ldr	r3, [pc, #724]	; (800c6a0 <goal_area_search+0x348>)
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	2b02      	cmp	r3, #2
 800c3d0:	d103      	bne.n	800c3da <goal_area_search+0x82>
			orbit = 'R';
 800c3d2:	2352      	movs	r3, #82	; 0x52
 800c3d4:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800c3d8:	e006      	b.n	800c3e8 <goal_area_search+0x90>
		}
		//xが大きい方なら、左回り
		else if(x == X_GOAL_LARGER){
 800c3da:	4bb1      	ldr	r3, [pc, #708]	; (800c6a0 <goal_area_search+0x348>)
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	2b03      	cmp	r3, #3
 800c3e0:	d102      	bne.n	800c3e8 <goal_area_search+0x90>
			orbit = 'L';
 800c3e2:	234c      	movs	r3, #76	; 0x4c
 800c3e4:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}

		if(orbit == 'R'){
 800c3e8:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c3ec:	2b52      	cmp	r3, #82	; 0x52
 800c3ee:	f040 80c9 	bne.w	800c584 <goal_area_search+0x22c>
			//右回り
			turn_right();
 800c3f2:	f7fe fef7 	bl	800b1e4 <turn_right>
			my_direction = east;
 800c3f6:	4ba8      	ldr	r3, [pc, #672]	; (800c698 <goal_area_search+0x340>)
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c402:	e004      	b.n	800c40e <goal_area_search+0xb6>
 800c404:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c408:	3301      	adds	r3, #1
 800c40a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c40e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800c412:	f7fb ffbf 	bl	8008394 <__aeabi_i2d>
 800c416:	a39e      	add	r3, pc, #632	; (adr r3, 800c690 <goal_area_search+0x338>)
 800c418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41c:	f7fc fa96 	bl	800894c <__aeabi_dcmplt>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1ee      	bne.n	800c404 <goal_area_search+0xac>
			//直進
			Accelerate();
 800c426:	f7fe fc17 	bl	800ac58 <Accelerate>
			Decelerate();
 800c42a:	f7fe fcc5 	bl	800adb8 <Decelerate>
			x++;
 800c42e:	4b9c      	ldr	r3, [pc, #624]	; (800c6a0 <goal_area_search+0x348>)
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	3301      	adds	r3, #1
 800c434:	b2da      	uxtb	r2, r3
 800c436:	4b9a      	ldr	r3, [pc, #616]	; (800c6a0 <goal_area_search+0x348>)
 800c438:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c43a:	f7ff fe5d 	bl	800c0f8 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c43e:	2300      	movs	r3, #0
 800c440:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c444:	e004      	b.n	800c450 <goal_area_search+0xf8>
 800c446:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c44a:	3301      	adds	r3, #1
 800c44c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c450:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800c454:	f7fb ff9e 	bl	8008394 <__aeabi_i2d>
 800c458:	a38d      	add	r3, pc, #564	; (adr r3, 800c690 <goal_area_search+0x338>)
 800c45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45e:	f7fc fa75 	bl	800894c <__aeabi_dcmplt>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d1ee      	bne.n	800c446 <goal_area_search+0xee>


			//右回り
			turn_right();
 800c468:	f7fe febc 	bl	800b1e4 <turn_right>
			my_direction = south;
 800c46c:	4b8a      	ldr	r3, [pc, #552]	; (800c698 <goal_area_search+0x340>)
 800c46e:	2202      	movs	r2, #2
 800c470:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c472:	2300      	movs	r3, #0
 800c474:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c478:	e004      	b.n	800c484 <goal_area_search+0x12c>
 800c47a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c47e:	3301      	adds	r3, #1
 800c480:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c484:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800c488:	f7fb ff84 	bl	8008394 <__aeabi_i2d>
 800c48c:	a380      	add	r3, pc, #512	; (adr r3, 800c690 <goal_area_search+0x338>)
 800c48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c492:	f7fc fa5b 	bl	800894c <__aeabi_dcmplt>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1ee      	bne.n	800c47a <goal_area_search+0x122>
			//直進
			Accelerate();
 800c49c:	f7fe fbdc 	bl	800ac58 <Accelerate>
			Decelerate();
 800c4a0:	f7fe fc8a 	bl	800adb8 <Decelerate>
			y--;
 800c4a4:	4b7d      	ldr	r3, [pc, #500]	; (800c69c <goal_area_search+0x344>)
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	b2da      	uxtb	r2, r3
 800c4ac:	4b7b      	ldr	r3, [pc, #492]	; (800c69c <goal_area_search+0x344>)
 800c4ae:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c4b0:	f7ff fe22 	bl	800c0f8 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c4ba:	e004      	b.n	800c4c6 <goal_area_search+0x16e>
 800c4bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c4c6:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800c4ca:	f7fb ff63 	bl	8008394 <__aeabi_i2d>
 800c4ce:	a370      	add	r3, pc, #448	; (adr r3, 800c690 <goal_area_search+0x338>)
 800c4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d4:	f7fc fa3a 	bl	800894c <__aeabi_dcmplt>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d1ee      	bne.n	800c4bc <goal_area_search+0x164>

			//右回転
			turn_right();
 800c4de:	f7fe fe81 	bl	800b1e4 <turn_right>
			my_direction = west;
 800c4e2:	4b6d      	ldr	r3, [pc, #436]	; (800c698 <goal_area_search+0x340>)
 800c4e4:	2203      	movs	r2, #3
 800c4e6:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c4ee:	e004      	b.n	800c4fa <goal_area_search+0x1a2>
 800c4f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c4fa:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800c4fe:	f7fb ff49 	bl	8008394 <__aeabi_i2d>
 800c502:	a363      	add	r3, pc, #396	; (adr r3, 800c690 <goal_area_search+0x338>)
 800c504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c508:	f7fc fa20 	bl	800894c <__aeabi_dcmplt>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1ee      	bne.n	800c4f0 <goal_area_search+0x198>
			//直進
			Accelerate();
 800c512:	f7fe fba1 	bl	800ac58 <Accelerate>
			Decelerate();
 800c516:	f7fe fc4f 	bl	800adb8 <Decelerate>
			y--;
 800c51a:	4b60      	ldr	r3, [pc, #384]	; (800c69c <goal_area_search+0x344>)
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	3b01      	subs	r3, #1
 800c520:	b2da      	uxtb	r2, r3
 800c522:	4b5e      	ldr	r3, [pc, #376]	; (800c69c <goal_area_search+0x344>)
 800c524:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c526:	2300      	movs	r3, #0
 800c528:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c52c:	e004      	b.n	800c538 <goal_area_search+0x1e0>
 800c52e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c532:	3301      	adds	r3, #1
 800c534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c538:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800c53c:	f7fb ff2a 	bl	8008394 <__aeabi_i2d>
 800c540:	a353      	add	r3, pc, #332	; (adr r3, 800c690 <goal_area_search+0x338>)
 800c542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c546:	f7fc fa01 	bl	800894c <__aeabi_dcmplt>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1ee      	bne.n	800c52e <goal_area_search+0x1d6>
			//左回転
			turn_left();
 800c550:	f7fe feb2 	bl	800b2b8 <turn_left>
			my_direction = south;
 800c554:	4b50      	ldr	r3, [pc, #320]	; (800c698 <goal_area_search+0x340>)
 800c556:	2202      	movs	r2, #2
 800c558:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c55a:	2300      	movs	r3, #0
 800c55c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c560:	e004      	b.n	800c56c <goal_area_search+0x214>
 800c562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c566:	3301      	adds	r3, #1
 800c568:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c56c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800c570:	f7fb ff10 	bl	8008394 <__aeabi_i2d>
 800c574:	a346      	add	r3, pc, #280	; (adr r3, 800c690 <goal_area_search+0x338>)
 800c576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57a:	f7fc f9e7 	bl	800894c <__aeabi_dcmplt>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1ee      	bne.n	800c562 <goal_area_search+0x20a>
		}

		if(orbit == 'L'){
 800c584:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c588:	2b4c      	cmp	r3, #76	; 0x4c
 800c58a:	f040 85ea 	bne.w	800d162 <goal_area_search+0xe0a>
			//左回り
			turn_left();
 800c58e:	f7fe fe93 	bl	800b2b8 <turn_left>
			my_direction = west;
 800c592:	4b41      	ldr	r3, [pc, #260]	; (800c698 <goal_area_search+0x340>)
 800c594:	2203      	movs	r2, #3
 800c596:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c598:	2300      	movs	r3, #0
 800c59a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c59e:	e004      	b.n	800c5aa <goal_area_search+0x252>
 800c5a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c5aa:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800c5ae:	f7fb fef1 	bl	8008394 <__aeabi_i2d>
 800c5b2:	a337      	add	r3, pc, #220	; (adr r3, 800c690 <goal_area_search+0x338>)
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	f7fc f9c8 	bl	800894c <__aeabi_dcmplt>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d1ee      	bne.n	800c5a0 <goal_area_search+0x248>
			//直進
			Accelerate();
 800c5c2:	f7fe fb49 	bl	800ac58 <Accelerate>
			Decelerate();
 800c5c6:	f7fe fbf7 	bl	800adb8 <Decelerate>
			x--;
 800c5ca:	4b35      	ldr	r3, [pc, #212]	; (800c6a0 <goal_area_search+0x348>)
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	b2da      	uxtb	r2, r3
 800c5d2:	4b33      	ldr	r3, [pc, #204]	; (800c6a0 <goal_area_search+0x348>)
 800c5d4:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c5d6:	f7ff fd8f 	bl	800c0f8 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c5da:	2300      	movs	r3, #0
 800c5dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c5e0:	e004      	b.n	800c5ec <goal_area_search+0x294>
 800c5e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c5ec:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800c5f0:	f7fb fed0 	bl	8008394 <__aeabi_i2d>
 800c5f4:	a326      	add	r3, pc, #152	; (adr r3, 800c690 <goal_area_search+0x338>)
 800c5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fa:	f7fc f9a7 	bl	800894c <__aeabi_dcmplt>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1ee      	bne.n	800c5e2 <goal_area_search+0x28a>

			turn_left();
 800c604:	f7fe fe58 	bl	800b2b8 <turn_left>
			my_direction = south;
 800c608:	4b23      	ldr	r3, [pc, #140]	; (800c698 <goal_area_search+0x340>)
 800c60a:	2202      	movs	r2, #2
 800c60c:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c60e:	2300      	movs	r3, #0
 800c610:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c614:	e004      	b.n	800c620 <goal_area_search+0x2c8>
 800c616:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c61a:	3301      	adds	r3, #1
 800c61c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c620:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800c624:	f7fb feb6 	bl	8008394 <__aeabi_i2d>
 800c628:	a319      	add	r3, pc, #100	; (adr r3, 800c690 <goal_area_search+0x338>)
 800c62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62e:	f7fc f98d 	bl	800894c <__aeabi_dcmplt>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d1ee      	bne.n	800c616 <goal_area_search+0x2be>
			//直進
			Accelerate();
 800c638:	f7fe fb0e 	bl	800ac58 <Accelerate>
			Decelerate();
 800c63c:	f7fe fbbc 	bl	800adb8 <Decelerate>
			y--;
 800c640:	4b16      	ldr	r3, [pc, #88]	; (800c69c <goal_area_search+0x344>)
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	3b01      	subs	r3, #1
 800c646:	b2da      	uxtb	r2, r3
 800c648:	4b14      	ldr	r3, [pc, #80]	; (800c69c <goal_area_search+0x344>)
 800c64a:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c64c:	f7ff fd54 	bl	800c0f8 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c650:	2300      	movs	r3, #0
 800c652:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c656:	e004      	b.n	800c662 <goal_area_search+0x30a>
 800c658:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c65c:	3301      	adds	r3, #1
 800c65e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c662:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800c666:	f7fb fe95 	bl	8008394 <__aeabi_i2d>
 800c66a:	a309      	add	r3, pc, #36	; (adr r3, 800c690 <goal_area_search+0x338>)
 800c66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c670:	f7fc f96c 	bl	800894c <__aeabi_dcmplt>
 800c674:	4603      	mov	r3, r0
 800c676:	2b00      	cmp	r3, #0
 800c678:	d1ee      	bne.n	800c658 <goal_area_search+0x300>

			//左回転
			turn_left();
 800c67a:	f7fe fe1d 	bl	800b2b8 <turn_left>
			my_direction = east;
 800c67e:	4b06      	ldr	r3, [pc, #24]	; (800c698 <goal_area_search+0x340>)
 800c680:	2201      	movs	r2, #1
 800c682:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c684:	2300      	movs	r3, #0
 800c686:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c68a:	e010      	b.n	800c6ae <goal_area_search+0x356>
 800c68c:	f3af 8000 	nop.w
 800c690:	00000000 	.word	0x00000000
 800c694:	40cd4c00 	.word	0x40cd4c00
 800c698:	2000e122 	.word	0x2000e122
 800c69c:	20009f6d 	.word	0x20009f6d
 800c6a0:	20009f6c 	.word	0x20009f6c
 800c6a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c6ae:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800c6b2:	f7fb fe6f 	bl	8008394 <__aeabi_i2d>
 800c6b6:	a3d6      	add	r3, pc, #856	; (adr r3, 800ca10 <goal_area_search+0x6b8>)
 800c6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6bc:	f7fc f946 	bl	800894c <__aeabi_dcmplt>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1ee      	bne.n	800c6a4 <goal_area_search+0x34c>
			//直進
			Accelerate();
 800c6c6:	f7fe fac7 	bl	800ac58 <Accelerate>
			Decelerate();
 800c6ca:	f7fe fb75 	bl	800adb8 <Decelerate>
			x++;
 800c6ce:	4bd2      	ldr	r3, [pc, #840]	; (800ca18 <goal_area_search+0x6c0>)
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	4bd0      	ldr	r3, [pc, #832]	; (800ca18 <goal_area_search+0x6c0>)
 800c6d8:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c6da:	2300      	movs	r3, #0
 800c6dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c6e0:	e004      	b.n	800c6ec <goal_area_search+0x394>
 800c6e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c6ec:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800c6f0:	f7fb fe50 	bl	8008394 <__aeabi_i2d>
 800c6f4:	a3c6      	add	r3, pc, #792	; (adr r3, 800ca10 <goal_area_search+0x6b8>)
 800c6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fa:	f7fc f927 	bl	800894c <__aeabi_dcmplt>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d1ee      	bne.n	800c6e2 <goal_area_search+0x38a>
			//右回転
			turn_right();
 800c704:	f7fe fd6e 	bl	800b1e4 <turn_right>
			my_direction = north;
 800c708:	4bc4      	ldr	r3, [pc, #784]	; (800ca1c <goal_area_search+0x6c4>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c70e:	2300      	movs	r3, #0
 800c710:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c714:	e004      	b.n	800c720 <goal_area_search+0x3c8>
 800c716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c71a:	3301      	adds	r3, #1
 800c71c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c720:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800c724:	f7fb fe36 	bl	8008394 <__aeabi_i2d>
 800c728:	a3b9      	add	r3, pc, #740	; (adr r3, 800ca10 <goal_area_search+0x6b8>)
 800c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72e:	f7fc f90d 	bl	800894c <__aeabi_dcmplt>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d1ee      	bne.n	800c716 <goal_area_search+0x3be>
		}

		break;
 800c738:	f000 bd13 	b.w	800d162 <goal_area_search+0xe0a>
	case east:
		//直進
		Accelerate();
 800c73c:	f7fe fa8c 	bl	800ac58 <Accelerate>
		Decelerate();
 800c740:	f7fe fb3a 	bl	800adb8 <Decelerate>
		x++;
 800c744:	4bb4      	ldr	r3, [pc, #720]	; (800ca18 <goal_area_search+0x6c0>)
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	3301      	adds	r3, #1
 800c74a:	b2da      	uxtb	r2, r3
 800c74c:	4bb2      	ldr	r3, [pc, #712]	; (800ca18 <goal_area_search+0x6c0>)
 800c74e:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800c750:	f7ff fcd2 	bl	800c0f8 <wall_set>
		//待つ
		for(int i=0;i < WAIT*0.5;i++);
 800c754:	2300      	movs	r3, #0
 800c756:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c75a:	e004      	b.n	800c766 <goal_area_search+0x40e>
 800c75c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c760:	3301      	adds	r3, #1
 800c762:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c766:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800c76a:	f7fb fe13 	bl	8008394 <__aeabi_i2d>
 800c76e:	a3a8      	add	r3, pc, #672	; (adr r3, 800ca10 <goal_area_search+0x6b8>)
 800c770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c774:	f7fc f8ea 	bl	800894c <__aeabi_dcmplt>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1ee      	bne.n	800c75c <goal_area_search+0x404>

		//現在の座標 == ゴールの左2マス
		if(y == Y_GOAL_LESSER){
 800c77e:	4ba8      	ldr	r3, [pc, #672]	; (800ca20 <goal_area_search+0x6c8>)
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d103      	bne.n	800c78e <goal_area_search+0x436>
			orbit = 'L';
 800c786:	234c      	movs	r3, #76	; 0x4c
 800c788:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800c78c:	e006      	b.n	800c79c <goal_area_search+0x444>
		}
		//yが大きい方なら、左回り
		else if(y == Y_GOAL_LARGER){
 800c78e:	4ba4      	ldr	r3, [pc, #656]	; (800ca20 <goal_area_search+0x6c8>)
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	2b01      	cmp	r3, #1
 800c794:	d102      	bne.n	800c79c <goal_area_search+0x444>
			orbit = 'R';
 800c796:	2352      	movs	r3, #82	; 0x52
 800c798:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800c79c:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c7a0:	2b52      	cmp	r3, #82	; 0x52
 800c7a2:	f040 80c9 	bne.w	800c938 <goal_area_search+0x5e0>
			//右回り
			turn_right();
 800c7a6:	f7fe fd1d 	bl	800b1e4 <turn_right>
			my_direction = south;
 800c7aa:	4b9c      	ldr	r3, [pc, #624]	; (800ca1c <goal_area_search+0x6c4>)
 800c7ac:	2202      	movs	r2, #2
 800c7ae:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c7b6:	e004      	b.n	800c7c2 <goal_area_search+0x46a>
 800c7b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c7bc:	3301      	adds	r3, #1
 800c7be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c7c2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800c7c6:	f7fb fde5 	bl	8008394 <__aeabi_i2d>
 800c7ca:	a391      	add	r3, pc, #580	; (adr r3, 800ca10 <goal_area_search+0x6b8>)
 800c7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d0:	f7fc f8bc 	bl	800894c <__aeabi_dcmplt>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1ee      	bne.n	800c7b8 <goal_area_search+0x460>
			//直進
			Accelerate();
 800c7da:	f7fe fa3d 	bl	800ac58 <Accelerate>
			Decelerate();
 800c7de:	f7fe faeb 	bl	800adb8 <Decelerate>
			y--;
 800c7e2:	4b8f      	ldr	r3, [pc, #572]	; (800ca20 <goal_area_search+0x6c8>)
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	4b8d      	ldr	r3, [pc, #564]	; (800ca20 <goal_area_search+0x6c8>)
 800c7ec:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c7ee:	f7ff fc83 	bl	800c0f8 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c7f8:	e004      	b.n	800c804 <goal_area_search+0x4ac>
 800c7fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c7fe:	3301      	adds	r3, #1
 800c800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c804:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800c808:	f7fb fdc4 	bl	8008394 <__aeabi_i2d>
 800c80c:	a380      	add	r3, pc, #512	; (adr r3, 800ca10 <goal_area_search+0x6b8>)
 800c80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c812:	f7fc f89b 	bl	800894c <__aeabi_dcmplt>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d1ee      	bne.n	800c7fa <goal_area_search+0x4a2>

			//右回り
			turn_right();
 800c81c:	f7fe fce2 	bl	800b1e4 <turn_right>
			my_direction = west;
 800c820:	4b7e      	ldr	r3, [pc, #504]	; (800ca1c <goal_area_search+0x6c4>)
 800c822:	2203      	movs	r2, #3
 800c824:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c826:	2300      	movs	r3, #0
 800c828:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c82c:	e004      	b.n	800c838 <goal_area_search+0x4e0>
 800c82e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c832:	3301      	adds	r3, #1
 800c834:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c838:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800c83c:	f7fb fdaa 	bl	8008394 <__aeabi_i2d>
 800c840:	a373      	add	r3, pc, #460	; (adr r3, 800ca10 <goal_area_search+0x6b8>)
 800c842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c846:	f7fc f881 	bl	800894c <__aeabi_dcmplt>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1ee      	bne.n	800c82e <goal_area_search+0x4d6>
			//直進
			Accelerate();
 800c850:	f7fe fa02 	bl	800ac58 <Accelerate>
			Decelerate();
 800c854:	f7fe fab0 	bl	800adb8 <Decelerate>
			x--;
 800c858:	4b6f      	ldr	r3, [pc, #444]	; (800ca18 <goal_area_search+0x6c0>)
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	3b01      	subs	r3, #1
 800c85e:	b2da      	uxtb	r2, r3
 800c860:	4b6d      	ldr	r3, [pc, #436]	; (800ca18 <goal_area_search+0x6c0>)
 800c862:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c864:	f7ff fc48 	bl	800c0f8 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c868:	2300      	movs	r3, #0
 800c86a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c86e:	e004      	b.n	800c87a <goal_area_search+0x522>
 800c870:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c874:	3301      	adds	r3, #1
 800c876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c87a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800c87e:	f7fb fd89 	bl	8008394 <__aeabi_i2d>
 800c882:	a363      	add	r3, pc, #396	; (adr r3, 800ca10 <goal_area_search+0x6b8>)
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	f7fc f860 	bl	800894c <__aeabi_dcmplt>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1ee      	bne.n	800c870 <goal_area_search+0x518>

			//右回転
			turn_right();
 800c892:	f7fe fca7 	bl	800b1e4 <turn_right>
			my_direction = north;
 800c896:	4b61      	ldr	r3, [pc, #388]	; (800ca1c <goal_area_search+0x6c4>)
 800c898:	2200      	movs	r2, #0
 800c89a:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c89c:	2300      	movs	r3, #0
 800c89e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c8a2:	e004      	b.n	800c8ae <goal_area_search+0x556>
 800c8a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c8ae:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800c8b2:	f7fb fd6f 	bl	8008394 <__aeabi_i2d>
 800c8b6:	a356      	add	r3, pc, #344	; (adr r3, 800ca10 <goal_area_search+0x6b8>)
 800c8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8bc:	f7fc f846 	bl	800894c <__aeabi_dcmplt>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d1ee      	bne.n	800c8a4 <goal_area_search+0x54c>
			//直進
			Accelerate();
 800c8c6:	f7fe f9c7 	bl	800ac58 <Accelerate>
			Decelerate();
 800c8ca:	f7fe fa75 	bl	800adb8 <Decelerate>
			y++;
 800c8ce:	4b54      	ldr	r3, [pc, #336]	; (800ca20 <goal_area_search+0x6c8>)
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	4b52      	ldr	r3, [pc, #328]	; (800ca20 <goal_area_search+0x6c8>)
 800c8d8:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c8da:	2300      	movs	r3, #0
 800c8dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c8e0:	e004      	b.n	800c8ec <goal_area_search+0x594>
 800c8e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c8ec:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800c8f0:	f7fb fd50 	bl	8008394 <__aeabi_i2d>
 800c8f4:	a346      	add	r3, pc, #280	; (adr r3, 800ca10 <goal_area_search+0x6b8>)
 800c8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fa:	f7fc f827 	bl	800894c <__aeabi_dcmplt>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d1ee      	bne.n	800c8e2 <goal_area_search+0x58a>
			//左回転
			turn_left();
 800c904:	f7fe fcd8 	bl	800b2b8 <turn_left>
			my_direction = west;
 800c908:	4b44      	ldr	r3, [pc, #272]	; (800ca1c <goal_area_search+0x6c4>)
 800c90a:	2203      	movs	r2, #3
 800c90c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c90e:	2300      	movs	r3, #0
 800c910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c914:	e004      	b.n	800c920 <goal_area_search+0x5c8>
 800c916:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c91a:	3301      	adds	r3, #1
 800c91c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c920:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c924:	f7fb fd36 	bl	8008394 <__aeabi_i2d>
 800c928:	a339      	add	r3, pc, #228	; (adr r3, 800ca10 <goal_area_search+0x6b8>)
 800c92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92e:	f7fc f80d 	bl	800894c <__aeabi_dcmplt>
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1ee      	bne.n	800c916 <goal_area_search+0x5be>
		}

		if(orbit == 'L'){
 800c938:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c93c:	2b4c      	cmp	r3, #76	; 0x4c
 800c93e:	f040 8412 	bne.w	800d166 <goal_area_search+0xe0e>
			//左回り
			turn_left();
 800c942:	f7fe fcb9 	bl	800b2b8 <turn_left>
			my_direction = north;
 800c946:	4b35      	ldr	r3, [pc, #212]	; (800ca1c <goal_area_search+0x6c4>)
 800c948:	2200      	movs	r2, #0
 800c94a:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c94c:	2300      	movs	r3, #0
 800c94e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c952:	e004      	b.n	800c95e <goal_area_search+0x606>
 800c954:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c958:	3301      	adds	r3, #1
 800c95a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c95e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800c962:	f7fb fd17 	bl	8008394 <__aeabi_i2d>
 800c966:	a32a      	add	r3, pc, #168	; (adr r3, 800ca10 <goal_area_search+0x6b8>)
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	f7fb ffee 	bl	800894c <__aeabi_dcmplt>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d1ee      	bne.n	800c954 <goal_area_search+0x5fc>
			//直進
			Accelerate();
 800c976:	f7fe f96f 	bl	800ac58 <Accelerate>
			Decelerate();
 800c97a:	f7fe fa1d 	bl	800adb8 <Decelerate>
			y++;
 800c97e:	4b28      	ldr	r3, [pc, #160]	; (800ca20 <goal_area_search+0x6c8>)
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	3301      	adds	r3, #1
 800c984:	b2da      	uxtb	r2, r3
 800c986:	4b26      	ldr	r3, [pc, #152]	; (800ca20 <goal_area_search+0x6c8>)
 800c988:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c98a:	f7ff fbb5 	bl	800c0f8 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c98e:	2300      	movs	r3, #0
 800c990:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c994:	e004      	b.n	800c9a0 <goal_area_search+0x648>
 800c996:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c99a:	3301      	adds	r3, #1
 800c99c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c9a0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c9a4:	f7fb fcf6 	bl	8008394 <__aeabi_i2d>
 800c9a8:	a319      	add	r3, pc, #100	; (adr r3, 800ca10 <goal_area_search+0x6b8>)
 800c9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ae:	f7fb ffcd 	bl	800894c <__aeabi_dcmplt>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d1ee      	bne.n	800c996 <goal_area_search+0x63e>

			turn_left();
 800c9b8:	f7fe fc7e 	bl	800b2b8 <turn_left>
			my_direction = west;
 800c9bc:	4b17      	ldr	r3, [pc, #92]	; (800ca1c <goal_area_search+0x6c4>)
 800c9be:	2203      	movs	r2, #3
 800c9c0:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c9c8:	e004      	b.n	800c9d4 <goal_area_search+0x67c>
 800c9ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c9d4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c9d8:	f7fb fcdc 	bl	8008394 <__aeabi_i2d>
 800c9dc:	a30c      	add	r3, pc, #48	; (adr r3, 800ca10 <goal_area_search+0x6b8>)
 800c9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e2:	f7fb ffb3 	bl	800894c <__aeabi_dcmplt>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1ee      	bne.n	800c9ca <goal_area_search+0x672>
			//直進
			Accelerate();
 800c9ec:	f7fe f934 	bl	800ac58 <Accelerate>
			Decelerate();
 800c9f0:	f7fe f9e2 	bl	800adb8 <Decelerate>
			x--;
 800c9f4:	4b08      	ldr	r3, [pc, #32]	; (800ca18 <goal_area_search+0x6c0>)
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	b2da      	uxtb	r2, r3
 800c9fc:	4b06      	ldr	r3, [pc, #24]	; (800ca18 <goal_area_search+0x6c0>)
 800c9fe:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800ca00:	f7ff fb7a 	bl	800c0f8 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800ca04:	2300      	movs	r3, #0
 800ca06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ca0a:	e010      	b.n	800ca2e <goal_area_search+0x6d6>
 800ca0c:	f3af 8000 	nop.w
 800ca10:	00000000 	.word	0x00000000
 800ca14:	40cd4c00 	.word	0x40cd4c00
 800ca18:	20009f6c 	.word	0x20009f6c
 800ca1c:	2000e122 	.word	0x2000e122
 800ca20:	20009f6d 	.word	0x20009f6d
 800ca24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ca28:	3301      	adds	r3, #1
 800ca2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ca2e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800ca32:	f7fb fcaf 	bl	8008394 <__aeabi_i2d>
 800ca36:	a3bc      	add	r3, pc, #752	; (adr r3, 800cd28 <goal_area_search+0x9d0>)
 800ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3c:	f7fb ff86 	bl	800894c <__aeabi_dcmplt>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1ee      	bne.n	800ca24 <goal_area_search+0x6cc>

			//左回転
			turn_left();
 800ca46:	f7fe fc37 	bl	800b2b8 <turn_left>
			my_direction = south;
 800ca4a:	4bb9      	ldr	r3, [pc, #740]	; (800cd30 <goal_area_search+0x9d8>)
 800ca4c:	2202      	movs	r2, #2
 800ca4e:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ca50:	2300      	movs	r3, #0
 800ca52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ca56:	e004      	b.n	800ca62 <goal_area_search+0x70a>
 800ca58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ca62:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800ca66:	f7fb fc95 	bl	8008394 <__aeabi_i2d>
 800ca6a:	a3af      	add	r3, pc, #700	; (adr r3, 800cd28 <goal_area_search+0x9d0>)
 800ca6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca70:	f7fb ff6c 	bl	800894c <__aeabi_dcmplt>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1ee      	bne.n	800ca58 <goal_area_search+0x700>
			//直進
			Accelerate();
 800ca7a:	f7fe f8ed 	bl	800ac58 <Accelerate>
			Decelerate();
 800ca7e:	f7fe f99b 	bl	800adb8 <Decelerate>
			y--;
 800ca82:	4bac      	ldr	r3, [pc, #688]	; (800cd34 <goal_area_search+0x9dc>)
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	3b01      	subs	r3, #1
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	4baa      	ldr	r3, [pc, #680]	; (800cd34 <goal_area_search+0x9dc>)
 800ca8c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ca8e:	2300      	movs	r3, #0
 800ca90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ca94:	e004      	b.n	800caa0 <goal_area_search+0x748>
 800ca96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800caa0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800caa4:	f7fb fc76 	bl	8008394 <__aeabi_i2d>
 800caa8:	a39f      	add	r3, pc, #636	; (adr r3, 800cd28 <goal_area_search+0x9d0>)
 800caaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caae:	f7fb ff4d 	bl	800894c <__aeabi_dcmplt>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d1ee      	bne.n	800ca96 <goal_area_search+0x73e>
			//右回転
			turn_right();
 800cab8:	f7fe fb94 	bl	800b1e4 <turn_right>
			my_direction = west;
 800cabc:	4b9c      	ldr	r3, [pc, #624]	; (800cd30 <goal_area_search+0x9d8>)
 800cabe:	2203      	movs	r2, #3
 800cac0:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cac2:	2300      	movs	r3, #0
 800cac4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cac6:	e002      	b.n	800cace <goal_area_search+0x776>
 800cac8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800caca:	3301      	adds	r3, #1
 800cacc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cace:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cad0:	f7fb fc60 	bl	8008394 <__aeabi_i2d>
 800cad4:	a394      	add	r3, pc, #592	; (adr r3, 800cd28 <goal_area_search+0x9d0>)
 800cad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cada:	f7fb ff37 	bl	800894c <__aeabi_dcmplt>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d1f1      	bne.n	800cac8 <goal_area_search+0x770>


		}
		break;
 800cae4:	e33f      	b.n	800d166 <goal_area_search+0xe0e>
	case south:
		//直進
		Accelerate();
 800cae6:	f7fe f8b7 	bl	800ac58 <Accelerate>
		Decelerate();
 800caea:	f7fe f965 	bl	800adb8 <Decelerate>
		y--;
 800caee:	4b91      	ldr	r3, [pc, #580]	; (800cd34 <goal_area_search+0x9dc>)
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	3b01      	subs	r3, #1
 800caf4:	b2da      	uxtb	r2, r3
 800caf6:	4b8f      	ldr	r3, [pc, #572]	; (800cd34 <goal_area_search+0x9dc>)
 800caf8:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800cafa:	f7ff fafd 	bl	800c0f8 <wall_set>
		//待つ
		for(int i=0;i < WAIT*0.5;i++);
 800cafe:	2300      	movs	r3, #0
 800cb00:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb02:	e002      	b.n	800cb0a <goal_area_search+0x7b2>
 800cb04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb06:	3301      	adds	r3, #1
 800cb08:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb0a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800cb0c:	f7fb fc42 	bl	8008394 <__aeabi_i2d>
 800cb10:	a385      	add	r3, pc, #532	; (adr r3, 800cd28 <goal_area_search+0x9d0>)
 800cb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb16:	f7fb ff19 	bl	800894c <__aeabi_dcmplt>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d1f1      	bne.n	800cb04 <goal_area_search+0x7ac>

		//現在の座標 == ゴールの上2マス
		if(x == X_GOAL_LESSER){
 800cb20:	4b85      	ldr	r3, [pc, #532]	; (800cd38 <goal_area_search+0x9e0>)
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	2b02      	cmp	r3, #2
 800cb26:	d103      	bne.n	800cb30 <goal_area_search+0x7d8>
			orbit = 'L';
 800cb28:	234c      	movs	r3, #76	; 0x4c
 800cb2a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800cb2e:	e006      	b.n	800cb3e <goal_area_search+0x7e6>
		}
		//xが大きい方なら、左回り
		else if(x == X_GOAL_LARGER){
 800cb30:	4b81      	ldr	r3, [pc, #516]	; (800cd38 <goal_area_search+0x9e0>)
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	2b03      	cmp	r3, #3
 800cb36:	d102      	bne.n	800cb3e <goal_area_search+0x7e6>
			orbit = 'R';
 800cb38:	2352      	movs	r3, #82	; 0x52
 800cb3a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800cb3e:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cb42:	2b52      	cmp	r3, #82	; 0x52
 800cb44:	f040 80ad 	bne.w	800cca2 <goal_area_search+0x94a>
			//右回り
			turn_right();
 800cb48:	f7fe fb4c 	bl	800b1e4 <turn_right>
			my_direction = west;
 800cb4c:	4b78      	ldr	r3, [pc, #480]	; (800cd30 <goal_area_search+0x9d8>)
 800cb4e:	2203      	movs	r2, #3
 800cb50:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cb52:	2300      	movs	r3, #0
 800cb54:	677b      	str	r3, [r7, #116]	; 0x74
 800cb56:	e002      	b.n	800cb5e <goal_area_search+0x806>
 800cb58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	677b      	str	r3, [r7, #116]	; 0x74
 800cb5e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800cb60:	f7fb fc18 	bl	8008394 <__aeabi_i2d>
 800cb64:	a370      	add	r3, pc, #448	; (adr r3, 800cd28 <goal_area_search+0x9d0>)
 800cb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6a:	f7fb feef 	bl	800894c <__aeabi_dcmplt>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d1f1      	bne.n	800cb58 <goal_area_search+0x800>
			//直進
			Accelerate();
 800cb74:	f7fe f870 	bl	800ac58 <Accelerate>
			Decelerate();
 800cb78:	f7fe f91e 	bl	800adb8 <Decelerate>
			x--;
 800cb7c:	4b6e      	ldr	r3, [pc, #440]	; (800cd38 <goal_area_search+0x9e0>)
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	3b01      	subs	r3, #1
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	4b6c      	ldr	r3, [pc, #432]	; (800cd38 <goal_area_search+0x9e0>)
 800cb86:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cb88:	f7ff fab6 	bl	800c0f8 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	673b      	str	r3, [r7, #112]	; 0x70
 800cb90:	e002      	b.n	800cb98 <goal_area_search+0x840>
 800cb92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb94:	3301      	adds	r3, #1
 800cb96:	673b      	str	r3, [r7, #112]	; 0x70
 800cb98:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800cb9a:	f7fb fbfb 	bl	8008394 <__aeabi_i2d>
 800cb9e:	a362      	add	r3, pc, #392	; (adr r3, 800cd28 <goal_area_search+0x9d0>)
 800cba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba4:	f7fb fed2 	bl	800894c <__aeabi_dcmplt>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1f1      	bne.n	800cb92 <goal_area_search+0x83a>

			//右回り
			turn_right();
 800cbae:	f7fe fb19 	bl	800b1e4 <turn_right>
			my_direction = north;
 800cbb2:	4b5f      	ldr	r3, [pc, #380]	; (800cd30 <goal_area_search+0x9d8>)
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cbb8:	2300      	movs	r3, #0
 800cbba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cbbc:	e002      	b.n	800cbc4 <goal_area_search+0x86c>
 800cbbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cbc4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cbc6:	f7fb fbe5 	bl	8008394 <__aeabi_i2d>
 800cbca:	a357      	add	r3, pc, #348	; (adr r3, 800cd28 <goal_area_search+0x9d0>)
 800cbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd0:	f7fb febc 	bl	800894c <__aeabi_dcmplt>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d1f1      	bne.n	800cbbe <goal_area_search+0x866>
			//直進
			Accelerate();
 800cbda:	f7fe f83d 	bl	800ac58 <Accelerate>
			Decelerate();
 800cbde:	f7fe f8eb 	bl	800adb8 <Decelerate>
			y++;
 800cbe2:	4b54      	ldr	r3, [pc, #336]	; (800cd34 <goal_area_search+0x9dc>)
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	4b52      	ldr	r3, [pc, #328]	; (800cd34 <goal_area_search+0x9dc>)
 800cbec:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cbee:	f7ff fa83 	bl	800c0f8 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbf6:	e002      	b.n	800cbfe <goal_area_search+0x8a6>
 800cbf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbfe:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800cc00:	f7fb fbc8 	bl	8008394 <__aeabi_i2d>
 800cc04:	a348      	add	r3, pc, #288	; (adr r3, 800cd28 <goal_area_search+0x9d0>)
 800cc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0a:	f7fb fe9f 	bl	800894c <__aeabi_dcmplt>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1f1      	bne.n	800cbf8 <goal_area_search+0x8a0>

			//右回転
			turn_right();
 800cc14:	f7fe fae6 	bl	800b1e4 <turn_right>
			my_direction = east;
 800cc18:	4b45      	ldr	r3, [pc, #276]	; (800cd30 <goal_area_search+0x9d8>)
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cc1e:	2300      	movs	r3, #0
 800cc20:	667b      	str	r3, [r7, #100]	; 0x64
 800cc22:	e002      	b.n	800cc2a <goal_area_search+0x8d2>
 800cc24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc26:	3301      	adds	r3, #1
 800cc28:	667b      	str	r3, [r7, #100]	; 0x64
 800cc2a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cc2c:	f7fb fbb2 	bl	8008394 <__aeabi_i2d>
 800cc30:	a33d      	add	r3, pc, #244	; (adr r3, 800cd28 <goal_area_search+0x9d0>)
 800cc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc36:	f7fb fe89 	bl	800894c <__aeabi_dcmplt>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d1f1      	bne.n	800cc24 <goal_area_search+0x8cc>
			//直進
			Accelerate();
 800cc40:	f7fe f80a 	bl	800ac58 <Accelerate>
			Decelerate();
 800cc44:	f7fe f8b8 	bl	800adb8 <Decelerate>
			x++;
 800cc48:	4b3b      	ldr	r3, [pc, #236]	; (800cd38 <goal_area_search+0x9e0>)
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	b2da      	uxtb	r2, r3
 800cc50:	4b39      	ldr	r3, [pc, #228]	; (800cd38 <goal_area_search+0x9e0>)
 800cc52:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cc54:	2300      	movs	r3, #0
 800cc56:	663b      	str	r3, [r7, #96]	; 0x60
 800cc58:	e002      	b.n	800cc60 <goal_area_search+0x908>
 800cc5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	663b      	str	r3, [r7, #96]	; 0x60
 800cc60:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800cc62:	f7fb fb97 	bl	8008394 <__aeabi_i2d>
 800cc66:	a330      	add	r3, pc, #192	; (adr r3, 800cd28 <goal_area_search+0x9d0>)
 800cc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6c:	f7fb fe6e 	bl	800894c <__aeabi_dcmplt>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d1f1      	bne.n	800cc5a <goal_area_search+0x902>
			//左回転
			turn_left();
 800cc76:	f7fe fb1f 	bl	800b2b8 <turn_left>
			my_direction = north;
 800cc7a:	4b2d      	ldr	r3, [pc, #180]	; (800cd30 <goal_area_search+0x9d8>)
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cc80:	2300      	movs	r3, #0
 800cc82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc84:	e002      	b.n	800cc8c <goal_area_search+0x934>
 800cc86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc88:	3301      	adds	r3, #1
 800cc8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc8c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cc8e:	f7fb fb81 	bl	8008394 <__aeabi_i2d>
 800cc92:	a325      	add	r3, pc, #148	; (adr r3, 800cd28 <goal_area_search+0x9d0>)
 800cc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc98:	f7fb fe58 	bl	800894c <__aeabi_dcmplt>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d1f1      	bne.n	800cc86 <goal_area_search+0x92e>
		}

		if(orbit == 'L'){
 800cca2:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cca6:	2b4c      	cmp	r3, #76	; 0x4c
 800cca8:	f040 825f 	bne.w	800d16a <goal_area_search+0xe12>
			//左回り
			turn_left();
 800ccac:	f7fe fb04 	bl	800b2b8 <turn_left>
			my_direction = east;
 800ccb0:	4b1f      	ldr	r3, [pc, #124]	; (800cd30 <goal_area_search+0x9d8>)
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	65bb      	str	r3, [r7, #88]	; 0x58
 800ccba:	e002      	b.n	800ccc2 <goal_area_search+0x96a>
 800ccbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	65bb      	str	r3, [r7, #88]	; 0x58
 800ccc2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ccc4:	f7fb fb66 	bl	8008394 <__aeabi_i2d>
 800ccc8:	a317      	add	r3, pc, #92	; (adr r3, 800cd28 <goal_area_search+0x9d0>)
 800ccca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccce:	f7fb fe3d 	bl	800894c <__aeabi_dcmplt>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1f1      	bne.n	800ccbc <goal_area_search+0x964>
			//直進
			Accelerate();
 800ccd8:	f7fd ffbe 	bl	800ac58 <Accelerate>
			Decelerate();
 800ccdc:	f7fe f86c 	bl	800adb8 <Decelerate>
			x++;
 800cce0:	4b15      	ldr	r3, [pc, #84]	; (800cd38 <goal_area_search+0x9e0>)
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	3301      	adds	r3, #1
 800cce6:	b2da      	uxtb	r2, r3
 800cce8:	4b13      	ldr	r3, [pc, #76]	; (800cd38 <goal_area_search+0x9e0>)
 800ccea:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800ccec:	f7ff fa04 	bl	800c0f8 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	657b      	str	r3, [r7, #84]	; 0x54
 800ccf4:	e002      	b.n	800ccfc <goal_area_search+0x9a4>
 800ccf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	657b      	str	r3, [r7, #84]	; 0x54
 800ccfc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ccfe:	f7fb fb49 	bl	8008394 <__aeabi_i2d>
 800cd02:	a309      	add	r3, pc, #36	; (adr r3, 800cd28 <goal_area_search+0x9d0>)
 800cd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd08:	f7fb fe20 	bl	800894c <__aeabi_dcmplt>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1f1      	bne.n	800ccf6 <goal_area_search+0x99e>

			turn_left();
 800cd12:	f7fe fad1 	bl	800b2b8 <turn_left>
			my_direction = north;
 800cd16:	4b06      	ldr	r3, [pc, #24]	; (800cd30 <goal_area_search+0x9d8>)
 800cd18:	2200      	movs	r2, #0
 800cd1a:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	653b      	str	r3, [r7, #80]	; 0x50
 800cd20:	e00f      	b.n	800cd42 <goal_area_search+0x9ea>
 800cd22:	bf00      	nop
 800cd24:	f3af 8000 	nop.w
 800cd28:	00000000 	.word	0x00000000
 800cd2c:	40cd4c00 	.word	0x40cd4c00
 800cd30:	2000e122 	.word	0x2000e122
 800cd34:	20009f6d 	.word	0x20009f6d
 800cd38:	20009f6c 	.word	0x20009f6c
 800cd3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd3e:	3301      	adds	r3, #1
 800cd40:	653b      	str	r3, [r7, #80]	; 0x50
 800cd42:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cd44:	f7fb fb26 	bl	8008394 <__aeabi_i2d>
 800cd48:	a3bb      	add	r3, pc, #748	; (adr r3, 800d038 <goal_area_search+0xce0>)
 800cd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4e:	f7fb fdfd 	bl	800894c <__aeabi_dcmplt>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d1f1      	bne.n	800cd3c <goal_area_search+0x9e4>
			//直進
			Accelerate();
 800cd58:	f7fd ff7e 	bl	800ac58 <Accelerate>
			Decelerate();
 800cd5c:	f7fe f82c 	bl	800adb8 <Decelerate>
			y++;
 800cd60:	4bb7      	ldr	r3, [pc, #732]	; (800d040 <goal_area_search+0xce8>)
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	3301      	adds	r3, #1
 800cd66:	b2da      	uxtb	r2, r3
 800cd68:	4bb5      	ldr	r3, [pc, #724]	; (800d040 <goal_area_search+0xce8>)
 800cd6a:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cd6c:	f7ff f9c4 	bl	800c0f8 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cd70:	2300      	movs	r3, #0
 800cd72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd74:	e002      	b.n	800cd7c <goal_area_search+0xa24>
 800cd76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd78:	3301      	adds	r3, #1
 800cd7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd7c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cd7e:	f7fb fb09 	bl	8008394 <__aeabi_i2d>
 800cd82:	a3ad      	add	r3, pc, #692	; (adr r3, 800d038 <goal_area_search+0xce0>)
 800cd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd88:	f7fb fde0 	bl	800894c <__aeabi_dcmplt>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1f1      	bne.n	800cd76 <goal_area_search+0xa1e>

			//左回転
			turn_left();
 800cd92:	f7fe fa91 	bl	800b2b8 <turn_left>
			my_direction = west;
 800cd96:	4bab      	ldr	r3, [pc, #684]	; (800d044 <goal_area_search+0xcec>)
 800cd98:	2203      	movs	r2, #3
 800cd9a:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cda0:	e002      	b.n	800cda8 <goal_area_search+0xa50>
 800cda2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cda4:	3301      	adds	r3, #1
 800cda6:	64bb      	str	r3, [r7, #72]	; 0x48
 800cda8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800cdaa:	f7fb faf3 	bl	8008394 <__aeabi_i2d>
 800cdae:	a3a2      	add	r3, pc, #648	; (adr r3, 800d038 <goal_area_search+0xce0>)
 800cdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb4:	f7fb fdca 	bl	800894c <__aeabi_dcmplt>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1f1      	bne.n	800cda2 <goal_area_search+0xa4a>
			//直進
			Accelerate();
 800cdbe:	f7fd ff4b 	bl	800ac58 <Accelerate>
			Decelerate();
 800cdc2:	f7fd fff9 	bl	800adb8 <Decelerate>
			x--;
 800cdc6:	4ba0      	ldr	r3, [pc, #640]	; (800d048 <goal_area_search+0xcf0>)
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	3b01      	subs	r3, #1
 800cdcc:	b2da      	uxtb	r2, r3
 800cdce:	4b9e      	ldr	r3, [pc, #632]	; (800d048 <goal_area_search+0xcf0>)
 800cdd0:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	647b      	str	r3, [r7, #68]	; 0x44
 800cdd6:	e002      	b.n	800cdde <goal_area_search+0xa86>
 800cdd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdda:	3301      	adds	r3, #1
 800cddc:	647b      	str	r3, [r7, #68]	; 0x44
 800cdde:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cde0:	f7fb fad8 	bl	8008394 <__aeabi_i2d>
 800cde4:	a394      	add	r3, pc, #592	; (adr r3, 800d038 <goal_area_search+0xce0>)
 800cde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdea:	f7fb fdaf 	bl	800894c <__aeabi_dcmplt>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d1f1      	bne.n	800cdd8 <goal_area_search+0xa80>
			//右回転
			turn_right();
 800cdf4:	f7fe f9f6 	bl	800b1e4 <turn_right>
			my_direction = north;
 800cdf8:	4b92      	ldr	r3, [pc, #584]	; (800d044 <goal_area_search+0xcec>)
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cdfe:	2300      	movs	r3, #0
 800ce00:	643b      	str	r3, [r7, #64]	; 0x40
 800ce02:	e002      	b.n	800ce0a <goal_area_search+0xab2>
 800ce04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce06:	3301      	adds	r3, #1
 800ce08:	643b      	str	r3, [r7, #64]	; 0x40
 800ce0a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ce0c:	f7fb fac2 	bl	8008394 <__aeabi_i2d>
 800ce10:	a389      	add	r3, pc, #548	; (adr r3, 800d038 <goal_area_search+0xce0>)
 800ce12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce16:	f7fb fd99 	bl	800894c <__aeabi_dcmplt>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1f1      	bne.n	800ce04 <goal_area_search+0xaac>
		}
		break;
 800ce20:	e1a3      	b.n	800d16a <goal_area_search+0xe12>
	case west:
		//直進
		Accelerate();
 800ce22:	f7fd ff19 	bl	800ac58 <Accelerate>
		Decelerate();
 800ce26:	f7fd ffc7 	bl	800adb8 <Decelerate>
		x--;
 800ce2a:	4b87      	ldr	r3, [pc, #540]	; (800d048 <goal_area_search+0xcf0>)
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	4b85      	ldr	r3, [pc, #532]	; (800d048 <goal_area_search+0xcf0>)
 800ce34:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800ce36:	f7ff f95f 	bl	800c0f8 <wall_set>
		//待つ
		for(int i=0;i < WAIT*0.5;i++);
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce3e:	e002      	b.n	800ce46 <goal_area_search+0xaee>
 800ce40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce42:	3301      	adds	r3, #1
 800ce44:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ce48:	f7fb faa4 	bl	8008394 <__aeabi_i2d>
 800ce4c:	a37a      	add	r3, pc, #488	; (adr r3, 800d038 <goal_area_search+0xce0>)
 800ce4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce52:	f7fb fd7b 	bl	800894c <__aeabi_dcmplt>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d1f1      	bne.n	800ce40 <goal_area_search+0xae8>

		//現在の座標 == ゴールの右2マス
		if(y == Y_GOAL_LESSER){
 800ce5c:	4b78      	ldr	r3, [pc, #480]	; (800d040 <goal_area_search+0xce8>)
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d103      	bne.n	800ce6c <goal_area_search+0xb14>
			orbit = 'R';
 800ce64:	2352      	movs	r3, #82	; 0x52
 800ce66:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800ce6a:	e006      	b.n	800ce7a <goal_area_search+0xb22>
		}
		//xが大きい方なら、左回り
		else if(y == Y_GOAL_LARGER){
 800ce6c:	4b74      	ldr	r3, [pc, #464]	; (800d040 <goal_area_search+0xce8>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d102      	bne.n	800ce7a <goal_area_search+0xb22>
			orbit = 'L';
 800ce74:	234c      	movs	r3, #76	; 0x4c
 800ce76:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800ce7a:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800ce7e:	2b52      	cmp	r3, #82	; 0x52
 800ce80:	f040 80ad 	bne.w	800cfde <goal_area_search+0xc86>
			//右回り
			turn_right();
 800ce84:	f7fe f9ae 	bl	800b1e4 <turn_right>
			my_direction = north;
 800ce88:	4b6e      	ldr	r3, [pc, #440]	; (800d044 <goal_area_search+0xcec>)
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800ce8e:	2300      	movs	r3, #0
 800ce90:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce92:	e002      	b.n	800ce9a <goal_area_search+0xb42>
 800ce94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce96:	3301      	adds	r3, #1
 800ce98:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce9c:	f7fb fa7a 	bl	8008394 <__aeabi_i2d>
 800cea0:	a365      	add	r3, pc, #404	; (adr r3, 800d038 <goal_area_search+0xce0>)
 800cea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea6:	f7fb fd51 	bl	800894c <__aeabi_dcmplt>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d1f1      	bne.n	800ce94 <goal_area_search+0xb3c>
			//直進
			Accelerate();
 800ceb0:	f7fd fed2 	bl	800ac58 <Accelerate>
			Decelerate();
 800ceb4:	f7fd ff80 	bl	800adb8 <Decelerate>
			y++;
 800ceb8:	4b61      	ldr	r3, [pc, #388]	; (800d040 <goal_area_search+0xce8>)
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	3301      	adds	r3, #1
 800cebe:	b2da      	uxtb	r2, r3
 800cec0:	4b5f      	ldr	r3, [pc, #380]	; (800d040 <goal_area_search+0xce8>)
 800cec2:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cec4:	f7ff f918 	bl	800c0f8 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cec8:	2300      	movs	r3, #0
 800ceca:	637b      	str	r3, [r7, #52]	; 0x34
 800cecc:	e002      	b.n	800ced4 <goal_area_search+0xb7c>
 800cece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced0:	3301      	adds	r3, #1
 800ced2:	637b      	str	r3, [r7, #52]	; 0x34
 800ced4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ced6:	f7fb fa5d 	bl	8008394 <__aeabi_i2d>
 800ceda:	a357      	add	r3, pc, #348	; (adr r3, 800d038 <goal_area_search+0xce0>)
 800cedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee0:	f7fb fd34 	bl	800894c <__aeabi_dcmplt>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d1f1      	bne.n	800cece <goal_area_search+0xb76>

			//右回り
			turn_right();
 800ceea:	f7fe f97b 	bl	800b1e4 <turn_right>
			my_direction = east;
 800ceee:	4b55      	ldr	r3, [pc, #340]	; (800d044 <goal_area_search+0xcec>)
 800cef0:	2201      	movs	r2, #1
 800cef2:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cef4:	2300      	movs	r3, #0
 800cef6:	633b      	str	r3, [r7, #48]	; 0x30
 800cef8:	e002      	b.n	800cf00 <goal_area_search+0xba8>
 800cefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefc:	3301      	adds	r3, #1
 800cefe:	633b      	str	r3, [r7, #48]	; 0x30
 800cf00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf02:	f7fb fa47 	bl	8008394 <__aeabi_i2d>
 800cf06:	a34c      	add	r3, pc, #304	; (adr r3, 800d038 <goal_area_search+0xce0>)
 800cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0c:	f7fb fd1e 	bl	800894c <__aeabi_dcmplt>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d1f1      	bne.n	800cefa <goal_area_search+0xba2>
			//直進
			Accelerate();
 800cf16:	f7fd fe9f 	bl	800ac58 <Accelerate>
			Decelerate();
 800cf1a:	f7fd ff4d 	bl	800adb8 <Decelerate>
			x++;
 800cf1e:	4b4a      	ldr	r3, [pc, #296]	; (800d048 <goal_area_search+0xcf0>)
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	3301      	adds	r3, #1
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	4b48      	ldr	r3, [pc, #288]	; (800d048 <goal_area_search+0xcf0>)
 800cf28:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cf2a:	f7ff f8e5 	bl	800c0f8 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cf2e:	2300      	movs	r3, #0
 800cf30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf32:	e002      	b.n	800cf3a <goal_area_search+0xbe2>
 800cf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf36:	3301      	adds	r3, #1
 800cf38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf3c:	f7fb fa2a 	bl	8008394 <__aeabi_i2d>
 800cf40:	a33d      	add	r3, pc, #244	; (adr r3, 800d038 <goal_area_search+0xce0>)
 800cf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf46:	f7fb fd01 	bl	800894c <__aeabi_dcmplt>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d1f1      	bne.n	800cf34 <goal_area_search+0xbdc>

			//右回転
			turn_right();
 800cf50:	f7fe f948 	bl	800b1e4 <turn_right>
			my_direction = south;
 800cf54:	4b3b      	ldr	r3, [pc, #236]	; (800d044 <goal_area_search+0xcec>)
 800cf56:	2202      	movs	r2, #2
 800cf58:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf5e:	e002      	b.n	800cf66 <goal_area_search+0xc0e>
 800cf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf62:	3301      	adds	r3, #1
 800cf64:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf68:	f7fb fa14 	bl	8008394 <__aeabi_i2d>
 800cf6c:	a332      	add	r3, pc, #200	; (adr r3, 800d038 <goal_area_search+0xce0>)
 800cf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf72:	f7fb fceb 	bl	800894c <__aeabi_dcmplt>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1f1      	bne.n	800cf60 <goal_area_search+0xc08>
			//直進
			Accelerate();
 800cf7c:	f7fd fe6c 	bl	800ac58 <Accelerate>
			Decelerate();
 800cf80:	f7fd ff1a 	bl	800adb8 <Decelerate>
			y--;
 800cf84:	4b2e      	ldr	r3, [pc, #184]	; (800d040 <goal_area_search+0xce8>)
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	3b01      	subs	r3, #1
 800cf8a:	b2da      	uxtb	r2, r3
 800cf8c:	4b2c      	ldr	r3, [pc, #176]	; (800d040 <goal_area_search+0xce8>)
 800cf8e:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cf90:	2300      	movs	r3, #0
 800cf92:	627b      	str	r3, [r7, #36]	; 0x24
 800cf94:	e002      	b.n	800cf9c <goal_area_search+0xc44>
 800cf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf98:	3301      	adds	r3, #1
 800cf9a:	627b      	str	r3, [r7, #36]	; 0x24
 800cf9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf9e:	f7fb f9f9 	bl	8008394 <__aeabi_i2d>
 800cfa2:	a325      	add	r3, pc, #148	; (adr r3, 800d038 <goal_area_search+0xce0>)
 800cfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa8:	f7fb fcd0 	bl	800894c <__aeabi_dcmplt>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d1f1      	bne.n	800cf96 <goal_area_search+0xc3e>
			//左回転
			turn_left();
 800cfb2:	f7fe f981 	bl	800b2b8 <turn_left>
			my_direction = east;
 800cfb6:	4b23      	ldr	r3, [pc, #140]	; (800d044 <goal_area_search+0xcec>)
 800cfb8:	2201      	movs	r2, #1
 800cfba:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	623b      	str	r3, [r7, #32]
 800cfc0:	e002      	b.n	800cfc8 <goal_area_search+0xc70>
 800cfc2:	6a3b      	ldr	r3, [r7, #32]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	623b      	str	r3, [r7, #32]
 800cfc8:	6a38      	ldr	r0, [r7, #32]
 800cfca:	f7fb f9e3 	bl	8008394 <__aeabi_i2d>
 800cfce:	a31a      	add	r3, pc, #104	; (adr r3, 800d038 <goal_area_search+0xce0>)
 800cfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd4:	f7fb fcba 	bl	800894c <__aeabi_dcmplt>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d1f1      	bne.n	800cfc2 <goal_area_search+0xc6a>
		}

		if(orbit == 'L'){
 800cfde:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cfe2:	2b4c      	cmp	r3, #76	; 0x4c
 800cfe4:	f040 80c3 	bne.w	800d16e <goal_area_search+0xe16>
			//左回り
			turn_left();
 800cfe8:	f7fe f966 	bl	800b2b8 <turn_left>
			my_direction = south;
 800cfec:	4b15      	ldr	r3, [pc, #84]	; (800d044 <goal_area_search+0xcec>)
 800cfee:	2202      	movs	r2, #2
 800cff0:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cff2:	2300      	movs	r3, #0
 800cff4:	61fb      	str	r3, [r7, #28]
 800cff6:	e002      	b.n	800cffe <goal_area_search+0xca6>
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	3301      	adds	r3, #1
 800cffc:	61fb      	str	r3, [r7, #28]
 800cffe:	69f8      	ldr	r0, [r7, #28]
 800d000:	f7fb f9c8 	bl	8008394 <__aeabi_i2d>
 800d004:	a30c      	add	r3, pc, #48	; (adr r3, 800d038 <goal_area_search+0xce0>)
 800d006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00a:	f7fb fc9f 	bl	800894c <__aeabi_dcmplt>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d1f1      	bne.n	800cff8 <goal_area_search+0xca0>
			//直進
			Accelerate();
 800d014:	f7fd fe20 	bl	800ac58 <Accelerate>
			Decelerate();
 800d018:	f7fd fece 	bl	800adb8 <Decelerate>
			y--;
 800d01c:	4b08      	ldr	r3, [pc, #32]	; (800d040 <goal_area_search+0xce8>)
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	3b01      	subs	r3, #1
 800d022:	b2da      	uxtb	r2, r3
 800d024:	4b06      	ldr	r3, [pc, #24]	; (800d040 <goal_area_search+0xce8>)
 800d026:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800d028:	f7ff f866 	bl	800c0f8 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800d02c:	2300      	movs	r3, #0
 800d02e:	61bb      	str	r3, [r7, #24]
 800d030:	e00f      	b.n	800d052 <goal_area_search+0xcfa>
 800d032:	bf00      	nop
 800d034:	f3af 8000 	nop.w
 800d038:	00000000 	.word	0x00000000
 800d03c:	40cd4c00 	.word	0x40cd4c00
 800d040:	20009f6d 	.word	0x20009f6d
 800d044:	2000e122 	.word	0x2000e122
 800d048:	20009f6c 	.word	0x20009f6c
 800d04c:	69bb      	ldr	r3, [r7, #24]
 800d04e:	3301      	adds	r3, #1
 800d050:	61bb      	str	r3, [r7, #24]
 800d052:	69b8      	ldr	r0, [r7, #24]
 800d054:	f7fb f99e 	bl	8008394 <__aeabi_i2d>
 800d058:	a349      	add	r3, pc, #292	; (adr r3, 800d180 <goal_area_search+0xe28>)
 800d05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05e:	f7fb fc75 	bl	800894c <__aeabi_dcmplt>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d1f1      	bne.n	800d04c <goal_area_search+0xcf4>

			turn_left();
 800d068:	f7fe f926 	bl	800b2b8 <turn_left>
			my_direction = east;
 800d06c:	4b46      	ldr	r3, [pc, #280]	; (800d188 <goal_area_search+0xe30>)
 800d06e:	2201      	movs	r2, #1
 800d070:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800d072:	2300      	movs	r3, #0
 800d074:	617b      	str	r3, [r7, #20]
 800d076:	e002      	b.n	800d07e <goal_area_search+0xd26>
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	3301      	adds	r3, #1
 800d07c:	617b      	str	r3, [r7, #20]
 800d07e:	6978      	ldr	r0, [r7, #20]
 800d080:	f7fb f988 	bl	8008394 <__aeabi_i2d>
 800d084:	a33e      	add	r3, pc, #248	; (adr r3, 800d180 <goal_area_search+0xe28>)
 800d086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08a:	f7fb fc5f 	bl	800894c <__aeabi_dcmplt>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1f1      	bne.n	800d078 <goal_area_search+0xd20>
			//直進
			Accelerate();
 800d094:	f7fd fde0 	bl	800ac58 <Accelerate>
			Decelerate();
 800d098:	f7fd fe8e 	bl	800adb8 <Decelerate>
			x++;
 800d09c:	4b3b      	ldr	r3, [pc, #236]	; (800d18c <goal_area_search+0xe34>)
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	b2da      	uxtb	r2, r3
 800d0a4:	4b39      	ldr	r3, [pc, #228]	; (800d18c <goal_area_search+0xe34>)
 800d0a6:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800d0a8:	f7ff f826 	bl	800c0f8 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	613b      	str	r3, [r7, #16]
 800d0b0:	e002      	b.n	800d0b8 <goal_area_search+0xd60>
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	613b      	str	r3, [r7, #16]
 800d0b8:	6938      	ldr	r0, [r7, #16]
 800d0ba:	f7fb f96b 	bl	8008394 <__aeabi_i2d>
 800d0be:	a330      	add	r3, pc, #192	; (adr r3, 800d180 <goal_area_search+0xe28>)
 800d0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c4:	f7fb fc42 	bl	800894c <__aeabi_dcmplt>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d1f1      	bne.n	800d0b2 <goal_area_search+0xd5a>

			//左回転
			turn_left();
 800d0ce:	f7fe f8f3 	bl	800b2b8 <turn_left>
			my_direction = north;
 800d0d2:	4b2d      	ldr	r3, [pc, #180]	; (800d188 <goal_area_search+0xe30>)
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d0d8:	2300      	movs	r3, #0
 800d0da:	60fb      	str	r3, [r7, #12]
 800d0dc:	e002      	b.n	800d0e4 <goal_area_search+0xd8c>
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	60fb      	str	r3, [r7, #12]
 800d0e4:	68f8      	ldr	r0, [r7, #12]
 800d0e6:	f7fb f955 	bl	8008394 <__aeabi_i2d>
 800d0ea:	a325      	add	r3, pc, #148	; (adr r3, 800d180 <goal_area_search+0xe28>)
 800d0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f0:	f7fb fc2c 	bl	800894c <__aeabi_dcmplt>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1f1      	bne.n	800d0de <goal_area_search+0xd86>
			//直進
			Accelerate();
 800d0fa:	f7fd fdad 	bl	800ac58 <Accelerate>
			Decelerate();
 800d0fe:	f7fd fe5b 	bl	800adb8 <Decelerate>
			y++;
 800d102:	4b23      	ldr	r3, [pc, #140]	; (800d190 <goal_area_search+0xe38>)
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	3301      	adds	r3, #1
 800d108:	b2da      	uxtb	r2, r3
 800d10a:	4b21      	ldr	r3, [pc, #132]	; (800d190 <goal_area_search+0xe38>)
 800d10c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d10e:	2300      	movs	r3, #0
 800d110:	60bb      	str	r3, [r7, #8]
 800d112:	e002      	b.n	800d11a <goal_area_search+0xdc2>
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	3301      	adds	r3, #1
 800d118:	60bb      	str	r3, [r7, #8]
 800d11a:	68b8      	ldr	r0, [r7, #8]
 800d11c:	f7fb f93a 	bl	8008394 <__aeabi_i2d>
 800d120:	a317      	add	r3, pc, #92	; (adr r3, 800d180 <goal_area_search+0xe28>)
 800d122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d126:	f7fb fc11 	bl	800894c <__aeabi_dcmplt>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d1f1      	bne.n	800d114 <goal_area_search+0xdbc>
			//右回転
			turn_right();
 800d130:	f7fe f858 	bl	800b1e4 <turn_right>
			my_direction = east;
 800d134:	4b14      	ldr	r3, [pc, #80]	; (800d188 <goal_area_search+0xe30>)
 800d136:	2201      	movs	r2, #1
 800d138:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d13a:	2300      	movs	r3, #0
 800d13c:	607b      	str	r3, [r7, #4]
 800d13e:	e002      	b.n	800d146 <goal_area_search+0xdee>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	3301      	adds	r3, #1
 800d144:	607b      	str	r3, [r7, #4]
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f7fb f924 	bl	8008394 <__aeabi_i2d>
 800d14c:	a30c      	add	r3, pc, #48	; (adr r3, 800d180 <goal_area_search+0xe28>)
 800d14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d152:	f7fb fbfb 	bl	800894c <__aeabi_dcmplt>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1f1      	bne.n	800d140 <goal_area_search+0xde8>
		}
		break;
 800d15c:	e007      	b.n	800d16e <goal_area_search+0xe16>
	default :
		break;
 800d15e:	bf00      	nop
 800d160:	e006      	b.n	800d170 <goal_area_search+0xe18>
		break;
 800d162:	bf00      	nop
 800d164:	e004      	b.n	800d170 <goal_area_search+0xe18>
		break;
 800d166:	bf00      	nop
 800d168:	e002      	b.n	800d170 <goal_area_search+0xe18>
		break;
 800d16a:	bf00      	nop
 800d16c:	e000      	b.n	800d170 <goal_area_search+0xe18>
		break;
 800d16e:	bf00      	nop
	}

	//マップ更新
	Walk_Map_Update();
 800d170:	f7fe fe52 	bl	800be18 <Walk_Map_Update>



	//向きが反転して、xもしくはyが変わる

}
 800d174:	bf00      	nop
 800d176:	37f8      	adds	r7, #248	; 0xf8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	f3af 8000 	nop.w
 800d180:	00000000 	.word	0x00000000
 800d184:	40cd4c00 	.word	0x40cd4c00
 800d188:	2000e122 	.word	0x2000e122
 800d18c:	20009f6c 	.word	0x20009f6c
 800d190:	20009f6d 	.word	0x20009f6d

0800d194 <Adachi_judge>:

//足立法探索
void Adachi_judge(){
 800d194:	b590      	push	{r4, r7, lr}
 800d196:	b08d      	sub	sp, #52	; 0x34
 800d198:	af00      	add	r7, sp, #0

	/*------旋回モード選択-----*/
	mode.turn = 0;
 800d19a:	4b97      	ldr	r3, [pc, #604]	; (800d3f8 <Adachi_judge+0x264>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	725a      	strb	r2, [r3, #9]
=======
 800c0ec:	b490      	push	{r4, r7}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
	uint8_t wall_dir[4];
	  wall_dir[my_direction] = (sl_average + sr_average)/2 > FRONT_WALL  ?   WALL : NOWALL;
 800c0f2:	4b8b      	ldr	r3, [pc, #556]	; (800c320 <wall_set+0x234>)
 800c0f4:	ed93 7a00 	vldr	s14, [r3]
 800c0f8:	4b8a      	ldr	r3, [pc, #552]	; (800c324 <wall_set+0x238>)
 800c0fa:	edd3 7a00 	vldr	s15, [r3]
 800c0fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c102:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c106:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c10a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800c10e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c116:	bfcc      	ite	gt
 800c118:	2301      	movgt	r3, #1
 800c11a:	2300      	movle	r3, #0
 800c11c:	b2da      	uxtb	r2, r3
 800c11e:	4b82      	ldr	r3, [pc, #520]	; (800c328 <wall_set+0x23c>)
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	f107 0108 	add.w	r1, r7, #8
 800c126:	440b      	add	r3, r1
 800c128:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(my_direction + 1)%4] = fr_average > RIGHT_WALL  ?  WALL :  NOWALL;
 800c12c:	4b7f      	ldr	r3, [pc, #508]	; (800c32c <wall_set+0x240>)
 800c12e:	edd3 7a00 	vldr	s15, [r3]
 800c132:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800c330 <wall_set+0x244>
 800c136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13e:	bfcc      	ite	gt
 800c140:	2301      	movgt	r3, #1
 800c142:	2300      	movle	r3, #0
 800c144:	b2d9      	uxtb	r1, r3
 800c146:	4b78      	ldr	r3, [pc, #480]	; (800c328 <wall_set+0x23c>)
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	3301      	adds	r3, #1
 800c14c:	425a      	negs	r2, r3
 800c14e:	f003 0303 	and.w	r3, r3, #3
 800c152:	f002 0203 	and.w	r2, r2, #3
 800c156:	bf58      	it	pl
 800c158:	4253      	negpl	r3, r2
 800c15a:	460a      	mov	r2, r1
 800c15c:	f107 0108 	add.w	r1, r7, #8
 800c160:	440b      	add	r3, r1
 800c162:	f803 2c04 	strb.w	r2, [r3, #-4]
		  wall_dir[(my_direction + 2)%4] = NOWALL;
 800c166:	4b70      	ldr	r3, [pc, #448]	; (800c328 <wall_set+0x23c>)
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	3302      	adds	r3, #2
 800c16c:	425a      	negs	r2, r3
 800c16e:	f003 0303 	and.w	r3, r3, #3
 800c172:	f002 0203 	and.w	r2, r2, #3
 800c176:	bf58      	it	pl
 800c178:	4253      	negpl	r3, r2
 800c17a:	f107 0208 	add.w	r2, r7, #8
 800c17e:	4413      	add	r3, r2
 800c180:	2200      	movs	r2, #0
 800c182:	f803 2c04 	strb.w	r2, [r3, #-4]
		  wall_dir[(my_direction + 3)%4] = fl_average > LEFT_WALL ?  WALL :  NOWALL;
 800c186:	4b6b      	ldr	r3, [pc, #428]	; (800c334 <wall_set+0x248>)
 800c188:	edd3 7a00 	vldr	s15, [r3]
 800c18c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800c338 <wall_set+0x24c>
 800c190:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c198:	bfcc      	ite	gt
 800c19a:	2301      	movgt	r3, #1
 800c19c:	2300      	movle	r3, #0
 800c19e:	b2d9      	uxtb	r1, r3
 800c1a0:	4b61      	ldr	r3, [pc, #388]	; (800c328 <wall_set+0x23c>)
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	3303      	adds	r3, #3
 800c1a6:	425a      	negs	r2, r3
 800c1a8:	f003 0303 	and.w	r3, r3, #3
 800c1ac:	f002 0203 	and.w	r2, r2, #3
 800c1b0:	bf58      	it	pl
 800c1b2:	4253      	negpl	r3, r2
 800c1b4:	460a      	mov	r2, r1
 800c1b6:	f107 0108 	add.w	r1, r7, #8
 800c1ba:	440b      	add	r3, r1
 800c1bc:	f803 2c04 	strb.w	r2, [r3, #-4]

	  wall[x][y].north = wall_dir[0];
 800c1c0:	7939      	ldrb	r1, [r7, #4]
 800c1c2:	4b5e      	ldr	r3, [pc, #376]	; (800c33c <wall_set+0x250>)
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	461c      	mov	r4, r3
 800c1c8:	4b5d      	ldr	r3, [pc, #372]	; (800c340 <wall_set+0x254>)
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	f003 0303 	and.w	r3, r3, #3
 800c1d4:	b2d8      	uxtb	r0, r3
 800c1d6:	495b      	ldr	r1, [pc, #364]	; (800c344 <wall_set+0x258>)
 800c1d8:	00a3      	lsls	r3, r4, #2
 800c1da:	441a      	add	r2, r3
 800c1dc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c1e0:	f360 0301 	bfi	r3, r0, #0, #2
 800c1e4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].east = wall_dir[1];
 800c1e8:	7979      	ldrb	r1, [r7, #5]
 800c1ea:	4b54      	ldr	r3, [pc, #336]	; (800c33c <wall_set+0x250>)
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	461c      	mov	r4, r3
 800c1f0:	4b53      	ldr	r3, [pc, #332]	; (800c340 <wall_set+0x254>)
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	f003 0303 	and.w	r3, r3, #3
 800c1fc:	b2d8      	uxtb	r0, r3
 800c1fe:	4951      	ldr	r1, [pc, #324]	; (800c344 <wall_set+0x258>)
 800c200:	00a3      	lsls	r3, r4, #2
 800c202:	441a      	add	r2, r3
 800c204:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c208:	f360 0383 	bfi	r3, r0, #2, #2
 800c20c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].south = wall_dir[2];
 800c210:	79b9      	ldrb	r1, [r7, #6]
 800c212:	4b4a      	ldr	r3, [pc, #296]	; (800c33c <wall_set+0x250>)
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	461c      	mov	r4, r3
 800c218:	4b49      	ldr	r3, [pc, #292]	; (800c340 <wall_set+0x254>)
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	461a      	mov	r2, r3
 800c21e:	460b      	mov	r3, r1
 800c220:	f003 0303 	and.w	r3, r3, #3
 800c224:	b2d8      	uxtb	r0, r3
 800c226:	4947      	ldr	r1, [pc, #284]	; (800c344 <wall_set+0x258>)
 800c228:	00a3      	lsls	r3, r4, #2
 800c22a:	441a      	add	r2, r3
 800c22c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c230:	f360 1305 	bfi	r3, r0, #4, #2
 800c234:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].west = wall_dir[3];
 800c238:	79f9      	ldrb	r1, [r7, #7]
 800c23a:	4b40      	ldr	r3, [pc, #256]	; (800c33c <wall_set+0x250>)
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	461c      	mov	r4, r3
 800c240:	4b3f      	ldr	r3, [pc, #252]	; (800c340 <wall_set+0x254>)
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	461a      	mov	r2, r3
 800c246:	460b      	mov	r3, r1
 800c248:	f003 0303 	and.w	r3, r3, #3
 800c24c:	b2d8      	uxtb	r0, r3
 800c24e:	493d      	ldr	r1, [pc, #244]	; (800c344 <wall_set+0x258>)
 800c250:	00a3      	lsls	r3, r4, #2
 800c252:	441a      	add	r2, r3
 800c254:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c258:	f360 1387 	bfi	r3, r0, #6, #2
 800c25c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  if(y < (NUMBER_OF_SQUARES-1) )wall[x][y+1].south = wall_dir[0];
 800c260:	4b37      	ldr	r3, [pc, #220]	; (800c340 <wall_set+0x254>)
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	2b02      	cmp	r3, #2
 800c266:	d812      	bhi.n	800c28e <wall_set+0x1a2>
 800c268:	7939      	ldrb	r1, [r7, #4]
 800c26a:	4b34      	ldr	r3, [pc, #208]	; (800c33c <wall_set+0x250>)
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	461a      	mov	r2, r3
 800c270:	4b33      	ldr	r3, [pc, #204]	; (800c340 <wall_set+0x254>)
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	3301      	adds	r3, #1
 800c276:	f001 0103 	and.w	r1, r1, #3
 800c27a:	b2c8      	uxtb	r0, r1
 800c27c:	4931      	ldr	r1, [pc, #196]	; (800c344 <wall_set+0x258>)
 800c27e:	0092      	lsls	r2, r2, #2
 800c280:	441a      	add	r2, r3
 800c282:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c286:	f360 1305 	bfi	r3, r0, #4, #2
 800c28a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(x < (NUMBER_OF_SQUARES-1) )wall[x+1][y].west = wall_dir[1];
 800c28e:	4b2b      	ldr	r3, [pc, #172]	; (800c33c <wall_set+0x250>)
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	2b02      	cmp	r3, #2
 800c294:	d811      	bhi.n	800c2ba <wall_set+0x1ce>
 800c296:	7979      	ldrb	r1, [r7, #5]
 800c298:	4b28      	ldr	r3, [pc, #160]	; (800c33c <wall_set+0x250>)
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	3301      	adds	r3, #1
 800c29e:	4a28      	ldr	r2, [pc, #160]	; (800c340 <wall_set+0x254>)
 800c2a0:	7812      	ldrb	r2, [r2, #0]
 800c2a2:	f001 0103 	and.w	r1, r1, #3
 800c2a6:	b2c8      	uxtb	r0, r1
 800c2a8:	4926      	ldr	r1, [pc, #152]	; (800c344 <wall_set+0x258>)
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	441a      	add	r2, r3
 800c2ae:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c2b2:	f360 1387 	bfi	r3, r0, #6, #2
 800c2b6:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(y > 0 ) wall[x][y-1].north = wall_dir[2];
 800c2ba:	4b21      	ldr	r3, [pc, #132]	; (800c340 <wall_set+0x254>)
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d012      	beq.n	800c2e8 <wall_set+0x1fc>
 800c2c2:	79b9      	ldrb	r1, [r7, #6]
 800c2c4:	4b1d      	ldr	r3, [pc, #116]	; (800c33c <wall_set+0x250>)
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	4b1d      	ldr	r3, [pc, #116]	; (800c340 <wall_set+0x254>)
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	f001 0103 	and.w	r1, r1, #3
 800c2d4:	b2c8      	uxtb	r0, r1
 800c2d6:	491b      	ldr	r1, [pc, #108]	; (800c344 <wall_set+0x258>)
 800c2d8:	0092      	lsls	r2, r2, #2
 800c2da:	441a      	add	r2, r3
 800c2dc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c2e0:	f360 0301 	bfi	r3, r0, #0, #2
 800c2e4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(x > 0 ) wall[x-1][y].east = wall_dir[3];
 800c2e8:	4b14      	ldr	r3, [pc, #80]	; (800c33c <wall_set+0x250>)
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d011      	beq.n	800c314 <wall_set+0x228>
 800c2f0:	79f9      	ldrb	r1, [r7, #7]
 800c2f2:	4b12      	ldr	r3, [pc, #72]	; (800c33c <wall_set+0x250>)
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	4a11      	ldr	r2, [pc, #68]	; (800c340 <wall_set+0x254>)
 800c2fa:	7812      	ldrb	r2, [r2, #0]
 800c2fc:	f001 0103 	and.w	r1, r1, #3
 800c300:	b2c8      	uxtb	r0, r1
 800c302:	4910      	ldr	r1, [pc, #64]	; (800c344 <wall_set+0x258>)
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	441a      	add	r2, r3
 800c308:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c30c:	f360 0383 	bfi	r3, r0, #2, #2
 800c310:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

}
 800c314:	bf00      	nop
 800c316:	3708      	adds	r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bc90      	pop	{r4, r7}
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	20016628 	.word	0x20016628
 800c324:	20015b30 	.word	0x20015b30
 800c328:	20005162 	.word	0x20005162
 800c32c:	20016558 	.word	0x20016558
 800c330:	42c80000 	.word	0x42c80000
 800c334:	2000508c 	.word	0x2000508c
 800c338:	430c0000 	.word	0x430c0000
 800c33c:	20000fc4 	.word	0x20000fc4
 800c340:	20000fc5 	.word	0x20000fc5
 800c344:	20016560 	.word	0x20016560

0800c348 <Adachi_judge>:
       //wall.east[x][y];
       //Flash_store();
    	}
#endif
}
void Adachi_judge(){
 800c348:	b598      	push	{r3, r4, r7, lr}
 800c34a:	af00      	add	r7, sp, #0

	/*------旋回モード選択-----*/
	mode.turn = 0;
 800c34c:	4baa      	ldr	r3, [pc, #680]	; (800c5f8 <Adachi_judge+0x2b0>)
 800c34e:	2200      	movs	r2, #0
 800c350:	725a      	strb	r2, [r3, #9]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	/*----------------------------*/


	//今�?�評価値よりも前の評価値が小さければ...
	//前左右
	  switch(my_direction){
<<<<<<< HEAD
 800d1a0:	4b96      	ldr	r3, [pc, #600]	; (800d3fc <Adachi_judge+0x268>)
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	2b03      	cmp	r3, #3
 800d1a6:	f200 83be 	bhi.w	800d926 <Adachi_judge+0x792>
 800d1aa:	a201      	add	r2, pc, #4	; (adr r2, 800d1b0 <Adachi_judge+0x1c>)
 800d1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b0:	0800d1c1 	.word	0x0800d1c1
 800d1b4:	0800d387 	.word	0x0800d387
 800d1b8:	0800d567 	.word	0x0800d567
 800d1bc:	0800d747 	.word	0x0800d747
	  case north:
		  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d1c0:	4b8f      	ldr	r3, [pc, #572]	; (800d400 <Adachi_judge+0x26c>)
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	4b8f      	ldr	r3, [pc, #572]	; (800d404 <Adachi_judge+0x270>)
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	4a8e      	ldr	r2, [pc, #568]	; (800d408 <Adachi_judge+0x274>)
 800d1ce:	0083      	lsls	r3, r0, #2
 800d1d0:	440b      	add	r3, r1
 800d1d2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d1d6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d127      	bne.n	800d230 <Adachi_judge+0x9c>
 800d1e0:	4b87      	ldr	r3, [pc, #540]	; (800d400 <Adachi_judge+0x26c>)
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	4b87      	ldr	r3, [pc, #540]	; (800d404 <Adachi_judge+0x270>)
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	4987      	ldr	r1, [pc, #540]	; (800d40c <Adachi_judge+0x278>)
 800d1ee:	0092      	lsls	r2, r2, #2
 800d1f0:	440a      	add	r2, r1
 800d1f2:	4413      	add	r3, r2
 800d1f4:	781a      	ldrb	r2, [r3, #0]
 800d1f6:	4b82      	ldr	r3, [pc, #520]	; (800d400 <Adachi_judge+0x26c>)
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	461c      	mov	r4, r3
 800d1fc:	4b81      	ldr	r3, [pc, #516]	; (800d404 <Adachi_judge+0x270>)
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	4618      	mov	r0, r3
 800d202:	4982      	ldr	r1, [pc, #520]	; (800d40c <Adachi_judge+0x278>)
 800d204:	00a3      	lsls	r3, r4, #2
 800d206:	440b      	add	r3, r1
 800d208:	4403      	add	r3, r0
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d20f      	bcs.n	800d230 <Adachi_judge+0x9c>
 800d210:	4b7c      	ldr	r3, [pc, #496]	; (800d404 <Adachi_judge+0x270>)
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	2b02      	cmp	r3, #2
 800d216:	d80b      	bhi.n	800d230 <Adachi_judge+0x9c>
			  //前北
			  straight();
 800d218:	f7fd fe7a 	bl	800af10 <straight>
			  my_direction = north;
 800d21c:	4b77      	ldr	r3, [pc, #476]	; (800d3fc <Adachi_judge+0x268>)
 800d21e:	2200      	movs	r2, #0
 800d220:	701a      	strb	r2, [r3, #0]
			  y++;
 800d222:	4b78      	ldr	r3, [pc, #480]	; (800d404 <Adachi_judge+0x270>)
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	3301      	adds	r3, #1
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	4b76      	ldr	r3, [pc, #472]	; (800d404 <Adachi_judge+0x270>)
 800d22c:	701a      	strb	r2, [r3, #0]
 800d22e:	e0a9      	b.n	800d384 <Adachi_judge+0x1f0>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d230:	4b73      	ldr	r3, [pc, #460]	; (800d400 <Adachi_judge+0x26c>)
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	4618      	mov	r0, r3
 800d236:	4b73      	ldr	r3, [pc, #460]	; (800d404 <Adachi_judge+0x270>)
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	4619      	mov	r1, r3
 800d23c:	4a72      	ldr	r2, [pc, #456]	; (800d408 <Adachi_judge+0x274>)
 800d23e:	0083      	lsls	r3, r0, #2
 800d240:	440b      	add	r3, r1
 800d242:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d246:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d127      	bne.n	800d2a0 <Adachi_judge+0x10c>
 800d250:	4b6b      	ldr	r3, [pc, #428]	; (800d400 <Adachi_judge+0x26c>)
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	3b01      	subs	r3, #1
 800d256:	4a6b      	ldr	r2, [pc, #428]	; (800d404 <Adachi_judge+0x270>)
 800d258:	7812      	ldrb	r2, [r2, #0]
 800d25a:	4611      	mov	r1, r2
 800d25c:	4a6b      	ldr	r2, [pc, #428]	; (800d40c <Adachi_judge+0x278>)
 800d25e:	009b      	lsls	r3, r3, #2
 800d260:	4413      	add	r3, r2
 800d262:	440b      	add	r3, r1
 800d264:	781a      	ldrb	r2, [r3, #0]
 800d266:	4b66      	ldr	r3, [pc, #408]	; (800d400 <Adachi_judge+0x26c>)
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	461c      	mov	r4, r3
 800d26c:	4b65      	ldr	r3, [pc, #404]	; (800d404 <Adachi_judge+0x270>)
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	4618      	mov	r0, r3
 800d272:	4966      	ldr	r1, [pc, #408]	; (800d40c <Adachi_judge+0x278>)
 800d274:	00a3      	lsls	r3, r4, #2
 800d276:	440b      	add	r3, r1
 800d278:	4403      	add	r3, r0
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d20f      	bcs.n	800d2a0 <Adachi_judge+0x10c>
 800d280:	4b5f      	ldr	r3, [pc, #380]	; (800d400 <Adachi_judge+0x26c>)
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d00b      	beq.n	800d2a0 <Adachi_judge+0x10c>
			  //左西
			  L_turn_select();
 800d288:	f7fe fcae 	bl	800bbe8 <L_turn_select>
			  my_direction = west;
 800d28c:	4b5b      	ldr	r3, [pc, #364]	; (800d3fc <Adachi_judge+0x268>)
 800d28e:	2203      	movs	r2, #3
 800d290:	701a      	strb	r2, [r3, #0]
		      x--;
 800d292:	4b5b      	ldr	r3, [pc, #364]	; (800d400 <Adachi_judge+0x26c>)
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	3b01      	subs	r3, #1
 800d298:	b2da      	uxtb	r2, r3
 800d29a:	4b59      	ldr	r3, [pc, #356]	; (800d400 <Adachi_judge+0x26c>)
 800d29c:	701a      	strb	r2, [r3, #0]
 800d29e:	e071      	b.n	800d384 <Adachi_judge+0x1f0>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800d2a0:	4b57      	ldr	r3, [pc, #348]	; (800d400 <Adachi_judge+0x26c>)
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	4b57      	ldr	r3, [pc, #348]	; (800d404 <Adachi_judge+0x270>)
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	4a56      	ldr	r2, [pc, #344]	; (800d408 <Adachi_judge+0x274>)
 800d2ae:	0083      	lsls	r3, r0, #2
 800d2b0:	440b      	add	r3, r1
 800d2b2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d2b6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d127      	bne.n	800d310 <Adachi_judge+0x17c>
 800d2c0:	4b4f      	ldr	r3, [pc, #316]	; (800d400 <Adachi_judge+0x26c>)
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	4a4f      	ldr	r2, [pc, #316]	; (800d404 <Adachi_judge+0x270>)
 800d2c8:	7812      	ldrb	r2, [r2, #0]
 800d2ca:	4611      	mov	r1, r2
 800d2cc:	4a4f      	ldr	r2, [pc, #316]	; (800d40c <Adachi_judge+0x278>)
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	4413      	add	r3, r2
 800d2d2:	440b      	add	r3, r1
 800d2d4:	781a      	ldrb	r2, [r3, #0]
 800d2d6:	4b4a      	ldr	r3, [pc, #296]	; (800d400 <Adachi_judge+0x26c>)
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	461c      	mov	r4, r3
 800d2dc:	4b49      	ldr	r3, [pc, #292]	; (800d404 <Adachi_judge+0x270>)
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	494a      	ldr	r1, [pc, #296]	; (800d40c <Adachi_judge+0x278>)
 800d2e4:	00a3      	lsls	r3, r4, #2
 800d2e6:	440b      	add	r3, r1
 800d2e8:	4403      	add	r3, r0
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d20f      	bcs.n	800d310 <Adachi_judge+0x17c>
 800d2f0:	4b43      	ldr	r3, [pc, #268]	; (800d400 <Adachi_judge+0x26c>)
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	2b02      	cmp	r3, #2
 800d2f6:	d80b      	bhi.n	800d310 <Adachi_judge+0x17c>
			  //右東
			  R_turn_select();
 800d2f8:	f7fe fc26 	bl	800bb48 <R_turn_select>
	          my_direction = east;
 800d2fc:	4b3f      	ldr	r3, [pc, #252]	; (800d3fc <Adachi_judge+0x268>)
 800d2fe:	2201      	movs	r2, #1
 800d300:	701a      	strb	r2, [r3, #0]
	          x++;
 800d302:	4b3f      	ldr	r3, [pc, #252]	; (800d400 <Adachi_judge+0x26c>)
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	3301      	adds	r3, #1
 800d308:	b2da      	uxtb	r2, r3
 800d30a:	4b3d      	ldr	r3, [pc, #244]	; (800d400 <Adachi_judge+0x26c>)
 800d30c:	701a      	strb	r2, [r3, #0]
 800d30e:	e039      	b.n	800d384 <Adachi_judge+0x1f0>
=======
 800c352:	4baa      	ldr	r3, [pc, #680]	; (800c5fc <Adachi_judge+0x2b4>)
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	2b03      	cmp	r3, #3
 800c358:	f200 8364 	bhi.w	800ca24 <Adachi_judge+0x6dc>
 800c35c:	a201      	add	r2, pc, #4	; (adr r2, 800c364 <Adachi_judge+0x1c>)
 800c35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c362:	bf00      	nop
 800c364:	0800c375 	.word	0x0800c375
 800c368:	0800c511 	.word	0x0800c511
 800c36c:	0800c6cd 	.word	0x0800c6cd
 800c370:	0800c889 	.word	0x0800c889
	  case north:
		  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800c374:	4ba2      	ldr	r3, [pc, #648]	; (800c600 <Adachi_judge+0x2b8>)
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	4618      	mov	r0, r3
 800c37a:	4ba2      	ldr	r3, [pc, #648]	; (800c604 <Adachi_judge+0x2bc>)
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	4619      	mov	r1, r3
 800c380:	4aa1      	ldr	r2, [pc, #644]	; (800c608 <Adachi_judge+0x2c0>)
 800c382:	0083      	lsls	r3, r0, #2
 800c384:	440b      	add	r3, r1
 800c386:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c38a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	2b00      	cmp	r3, #0
 800c392:	d127      	bne.n	800c3e4 <Adachi_judge+0x9c>
 800c394:	4b9a      	ldr	r3, [pc, #616]	; (800c600 <Adachi_judge+0x2b8>)
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	461a      	mov	r2, r3
 800c39a:	4b9a      	ldr	r3, [pc, #616]	; (800c604 <Adachi_judge+0x2bc>)
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	3301      	adds	r3, #1
 800c3a0:	499a      	ldr	r1, [pc, #616]	; (800c60c <Adachi_judge+0x2c4>)
 800c3a2:	0092      	lsls	r2, r2, #2
 800c3a4:	440a      	add	r2, r1
 800c3a6:	4413      	add	r3, r2
 800c3a8:	781a      	ldrb	r2, [r3, #0]
 800c3aa:	4b95      	ldr	r3, [pc, #596]	; (800c600 <Adachi_judge+0x2b8>)
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	461c      	mov	r4, r3
 800c3b0:	4b94      	ldr	r3, [pc, #592]	; (800c604 <Adachi_judge+0x2bc>)
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	4995      	ldr	r1, [pc, #596]	; (800c60c <Adachi_judge+0x2c4>)
 800c3b8:	00a3      	lsls	r3, r4, #2
 800c3ba:	440b      	add	r3, r1
 800c3bc:	4403      	add	r3, r0
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d20f      	bcs.n	800c3e4 <Adachi_judge+0x9c>
 800c3c4:	4b8f      	ldr	r3, [pc, #572]	; (800c604 <Adachi_judge+0x2bc>)
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	2b02      	cmp	r3, #2
 800c3ca:	d80b      	bhi.n	800c3e4 <Adachi_judge+0x9c>
			  //前北
			  straight();
 800c3cc:	f7fe fda8 	bl	800af20 <straight>
			  my_direction = north;
 800c3d0:	4b8a      	ldr	r3, [pc, #552]	; (800c5fc <Adachi_judge+0x2b4>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	701a      	strb	r2, [r3, #0]
			  y++;
 800c3d6:	4b8b      	ldr	r3, [pc, #556]	; (800c604 <Adachi_judge+0x2bc>)
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	3301      	adds	r3, #1
 800c3dc:	b2da      	uxtb	r2, r3
 800c3de:	4b89      	ldr	r3, [pc, #548]	; (800c604 <Adachi_judge+0x2bc>)
 800c3e0:	701a      	strb	r2, [r3, #0]
 800c3e2:	e094      	b.n	800c50e <Adachi_judge+0x1c6>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800c3e4:	4b86      	ldr	r3, [pc, #536]	; (800c600 <Adachi_judge+0x2b8>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	4b86      	ldr	r3, [pc, #536]	; (800c604 <Adachi_judge+0x2bc>)
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	4a85      	ldr	r2, [pc, #532]	; (800c608 <Adachi_judge+0x2c0>)
 800c3f2:	0083      	lsls	r3, r0, #2
 800c3f4:	440b      	add	r3, r1
 800c3f6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c3fa:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	2b00      	cmp	r3, #0
 800c402:	d127      	bne.n	800c454 <Adachi_judge+0x10c>
 800c404:	4b7e      	ldr	r3, [pc, #504]	; (800c600 <Adachi_judge+0x2b8>)
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	3b01      	subs	r3, #1
 800c40a:	4a7e      	ldr	r2, [pc, #504]	; (800c604 <Adachi_judge+0x2bc>)
 800c40c:	7812      	ldrb	r2, [r2, #0]
 800c40e:	4611      	mov	r1, r2
 800c410:	4a7e      	ldr	r2, [pc, #504]	; (800c60c <Adachi_judge+0x2c4>)
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	4413      	add	r3, r2
 800c416:	440b      	add	r3, r1
 800c418:	781a      	ldrb	r2, [r3, #0]
 800c41a:	4b79      	ldr	r3, [pc, #484]	; (800c600 <Adachi_judge+0x2b8>)
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	461c      	mov	r4, r3
 800c420:	4b78      	ldr	r3, [pc, #480]	; (800c604 <Adachi_judge+0x2bc>)
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	4618      	mov	r0, r3
 800c426:	4979      	ldr	r1, [pc, #484]	; (800c60c <Adachi_judge+0x2c4>)
 800c428:	00a3      	lsls	r3, r4, #2
 800c42a:	440b      	add	r3, r1
 800c42c:	4403      	add	r3, r0
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	429a      	cmp	r2, r3
 800c432:	d20f      	bcs.n	800c454 <Adachi_judge+0x10c>
 800c434:	4b72      	ldr	r3, [pc, #456]	; (800c600 <Adachi_judge+0x2b8>)
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d00b      	beq.n	800c454 <Adachi_judge+0x10c>
			  //左西
			  L_turn_select();
 800c43c:	f7ff fbd4 	bl	800bbe8 <L_turn_select>
			  my_direction = west;
 800c440:	4b6e      	ldr	r3, [pc, #440]	; (800c5fc <Adachi_judge+0x2b4>)
 800c442:	2203      	movs	r2, #3
 800c444:	701a      	strb	r2, [r3, #0]
		      x--;
 800c446:	4b6e      	ldr	r3, [pc, #440]	; (800c600 <Adachi_judge+0x2b8>)
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	3b01      	subs	r3, #1
 800c44c:	b2da      	uxtb	r2, r3
 800c44e:	4b6c      	ldr	r3, [pc, #432]	; (800c600 <Adachi_judge+0x2b8>)
 800c450:	701a      	strb	r2, [r3, #0]
 800c452:	e05c      	b.n	800c50e <Adachi_judge+0x1c6>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800c454:	4b6a      	ldr	r3, [pc, #424]	; (800c600 <Adachi_judge+0x2b8>)
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	4618      	mov	r0, r3
 800c45a:	4b6a      	ldr	r3, [pc, #424]	; (800c604 <Adachi_judge+0x2bc>)
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	4619      	mov	r1, r3
 800c460:	4a69      	ldr	r2, [pc, #420]	; (800c608 <Adachi_judge+0x2c0>)
 800c462:	0083      	lsls	r3, r0, #2
 800c464:	440b      	add	r3, r1
 800c466:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c46a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	2b00      	cmp	r3, #0
 800c472:	d127      	bne.n	800c4c4 <Adachi_judge+0x17c>
 800c474:	4b62      	ldr	r3, [pc, #392]	; (800c600 <Adachi_judge+0x2b8>)
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	3301      	adds	r3, #1
 800c47a:	4a62      	ldr	r2, [pc, #392]	; (800c604 <Adachi_judge+0x2bc>)
 800c47c:	7812      	ldrb	r2, [r2, #0]
 800c47e:	4611      	mov	r1, r2
 800c480:	4a62      	ldr	r2, [pc, #392]	; (800c60c <Adachi_judge+0x2c4>)
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	4413      	add	r3, r2
 800c486:	440b      	add	r3, r1
 800c488:	781a      	ldrb	r2, [r3, #0]
 800c48a:	4b5d      	ldr	r3, [pc, #372]	; (800c600 <Adachi_judge+0x2b8>)
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	461c      	mov	r4, r3
 800c490:	4b5c      	ldr	r3, [pc, #368]	; (800c604 <Adachi_judge+0x2bc>)
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	4618      	mov	r0, r3
 800c496:	495d      	ldr	r1, [pc, #372]	; (800c60c <Adachi_judge+0x2c4>)
 800c498:	00a3      	lsls	r3, r4, #2
 800c49a:	440b      	add	r3, r1
 800c49c:	4403      	add	r3, r0
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d20f      	bcs.n	800c4c4 <Adachi_judge+0x17c>
 800c4a4:	4b56      	ldr	r3, [pc, #344]	; (800c600 <Adachi_judge+0x2b8>)
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	2b02      	cmp	r3, #2
 800c4aa:	d80b      	bhi.n	800c4c4 <Adachi_judge+0x17c>
			  //右東
			  R_turn_select();
 800c4ac:	f7ff fb58 	bl	800bb60 <R_turn_select>
	          my_direction = east;
 800c4b0:	4b52      	ldr	r3, [pc, #328]	; (800c5fc <Adachi_judge+0x2b4>)
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	701a      	strb	r2, [r3, #0]
	          x++;
 800c4b6:	4b52      	ldr	r3, [pc, #328]	; (800c600 <Adachi_judge+0x2b8>)
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	b2da      	uxtb	r2, r3
 800c4be:	4b50      	ldr	r3, [pc, #320]	; (800c600 <Adachi_judge+0x2b8>)
 800c4c0:	701a      	strb	r2, [r3, #0]
 800c4c2:	e024      	b.n	800c50e <Adachi_judge+0x1c6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
		  }
		  else {
			  //後南
	          Decelerate();
<<<<<<< HEAD
 800d310:	f7fd fd52 	bl	800adb8 <Decelerate>
	          for(int i=0;i < WAIT;i++);
 800d314:	2300      	movs	r3, #0
 800d316:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d318:	e002      	b.n	800d320 <Adachi_judge+0x18c>
 800d31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31c:	3301      	adds	r3, #1
 800d31e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d322:	f247 522f 	movw	r2, #29999	; 0x752f
 800d326:	4293      	cmp	r3, r2
 800d328:	ddf7      	ble.n	800d31a <Adachi_judge+0x186>

	          if(mode.execution == 1)
 800d32a:	4b33      	ldr	r3, [pc, #204]	; (800d3f8 <Adachi_judge+0x264>)
 800d32c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d330:	2b01      	cmp	r3, #1
 800d332:	d101      	bne.n	800d338 <Adachi_judge+0x1a4>
	        	  Motor_PWM_Stop();
 800d334:	f7fc febc 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800d338:	f7fe fb22 	bl	800b980 <rotate180>
	  	      for(int i=0;i < WAIT;i++);;
 800d33c:	2300      	movs	r3, #0
 800d33e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d340:	e002      	b.n	800d348 <Adachi_judge+0x1b4>
 800d342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d344:	3301      	adds	r3, #1
 800d346:	62bb      	str	r3, [r7, #40]	; 0x28
 800d348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34a:	f247 522f 	movw	r2, #29999	; 0x752f
 800d34e:	4293      	cmp	r3, r2
 800d350:	ddf7      	ble.n	800d342 <Adachi_judge+0x1ae>
	  	      back_calib();
 800d352:	f7fe fb91 	bl	800ba78 <back_calib>
	  	      for(int i=0;i < WAIT;i++);
 800d356:	2300      	movs	r3, #0
 800d358:	627b      	str	r3, [r7, #36]	; 0x24
 800d35a:	e002      	b.n	800d362 <Adachi_judge+0x1ce>
 800d35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35e:	3301      	adds	r3, #1
 800d360:	627b      	str	r3, [r7, #36]	; 0x24
 800d362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d364:	f247 522f 	movw	r2, #29999	; 0x752f
 800d368:	4293      	cmp	r3, r2
 800d36a:	ddf7      	ble.n	800d35c <Adachi_judge+0x1c8>
	       	  Start_Accel();
 800d36c:	f7fd fc1c 	bl	800aba8 <Start_Accel>
	       	  my_direction = south;
 800d370:	4b22      	ldr	r3, [pc, #136]	; (800d3fc <Adachi_judge+0x268>)
 800d372:	2202      	movs	r2, #2
 800d374:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d376:	4b23      	ldr	r3, [pc, #140]	; (800d404 <Adachi_judge+0x270>)
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	3b01      	subs	r3, #1
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	4b21      	ldr	r3, [pc, #132]	; (800d404 <Adachi_judge+0x270>)
 800d380:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d382:	e2d1      	b.n	800d928 <Adachi_judge+0x794>
 800d384:	e2d0      	b.n	800d928 <Adachi_judge+0x794>
=======
 800c4c4:	f7fe fc84 	bl	800add0 <Decelerate>
	          wait(0.3);
 800c4c8:	ed9f 0b49 	vldr	d0, [pc, #292]	; 800c5f0 <Adachi_judge+0x2a8>
 800c4cc:	f7fe fb54 	bl	800ab78 <wait>

	          if(mode.execution == 1)
 800c4d0:	4b49      	ldr	r3, [pc, #292]	; (800c5f8 <Adachi_judge+0x2b0>)
 800c4d2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d101      	bne.n	800c4de <Adachi_judge+0x196>
	        	  Motor_PWM_Stop();
 800c4da:	f7fd fde9 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800c4de:	f7ff fa5d 	bl	800b99c <rotate180>
	  	      wait(0.3);
 800c4e2:	ed9f 0b43 	vldr	d0, [pc, #268]	; 800c5f0 <Adachi_judge+0x2a8>
 800c4e6:	f7fe fb47 	bl	800ab78 <wait>
	  	      back_calib();
 800c4ea:	f7ff fad1 	bl	800ba90 <back_calib>
	  	      wait(0.3);
 800c4ee:	ed9f 0b40 	vldr	d0, [pc, #256]	; 800c5f0 <Adachi_judge+0x2a8>
 800c4f2:	f7fe fb41 	bl	800ab78 <wait>
	       	  Start_Accel();
 800c4f6:	f7fe fb67 	bl	800abc8 <Start_Accel>
	       	  my_direction = south;
 800c4fa:	4b40      	ldr	r3, [pc, #256]	; (800c5fc <Adachi_judge+0x2b4>)
 800c4fc:	2202      	movs	r2, #2
 800c4fe:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800c500:	4b40      	ldr	r3, [pc, #256]	; (800c604 <Adachi_judge+0x2bc>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	3b01      	subs	r3, #1
 800c506:	b2da      	uxtb	r2, r3
 800c508:	4b3e      	ldr	r3, [pc, #248]	; (800c604 <Adachi_judge+0x2bc>)
 800c50a:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800c50c:	e28b      	b.n	800ca26 <Adachi_judge+0x6de>
 800c50e:	e28a      	b.n	800ca26 <Adachi_judge+0x6de>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	  case east:

		  if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
<<<<<<< HEAD
 800d386:	4b1e      	ldr	r3, [pc, #120]	; (800d400 <Adachi_judge+0x26c>)
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	4618      	mov	r0, r3
 800d38c:	4b1d      	ldr	r3, [pc, #116]	; (800d404 <Adachi_judge+0x270>)
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	4619      	mov	r1, r3
 800d392:	4a1d      	ldr	r2, [pc, #116]	; (800d408 <Adachi_judge+0x274>)
 800d394:	0083      	lsls	r3, r0, #2
 800d396:	440b      	add	r3, r1
 800d398:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d39c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d134      	bne.n	800d410 <Adachi_judge+0x27c>
 800d3a6:	4b16      	ldr	r3, [pc, #88]	; (800d400 <Adachi_judge+0x26c>)
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	4a15      	ldr	r2, [pc, #84]	; (800d404 <Adachi_judge+0x270>)
 800d3ae:	7812      	ldrb	r2, [r2, #0]
 800d3b0:	4611      	mov	r1, r2
 800d3b2:	4a16      	ldr	r2, [pc, #88]	; (800d40c <Adachi_judge+0x278>)
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	4413      	add	r3, r2
 800d3b8:	440b      	add	r3, r1
 800d3ba:	781a      	ldrb	r2, [r3, #0]
 800d3bc:	4b10      	ldr	r3, [pc, #64]	; (800d400 <Adachi_judge+0x26c>)
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	461c      	mov	r4, r3
 800d3c2:	4b10      	ldr	r3, [pc, #64]	; (800d404 <Adachi_judge+0x270>)
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	4910      	ldr	r1, [pc, #64]	; (800d40c <Adachi_judge+0x278>)
 800d3ca:	00a3      	lsls	r3, r4, #2
 800d3cc:	440b      	add	r3, r1
 800d3ce:	4403      	add	r3, r0
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d21c      	bcs.n	800d410 <Adachi_judge+0x27c>
 800d3d6:	4b0a      	ldr	r3, [pc, #40]	; (800d400 <Adachi_judge+0x26c>)
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	2b02      	cmp	r3, #2
 800d3dc:	d818      	bhi.n	800d410 <Adachi_judge+0x27c>
			  //前東
			  straight();
 800d3de:	f7fd fd97 	bl	800af10 <straight>
	       	  my_direction = east;
 800d3e2:	4b06      	ldr	r3, [pc, #24]	; (800d3fc <Adachi_judge+0x268>)
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d3e8:	4b05      	ldr	r3, [pc, #20]	; (800d400 <Adachi_judge+0x26c>)
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	b2da      	uxtb	r2, r3
 800d3f0:	4b03      	ldr	r3, [pc, #12]	; (800d400 <Adachi_judge+0x26c>)
 800d3f2:	701a      	strb	r2, [r3, #0]
 800d3f4:	e0b6      	b.n	800d564 <Adachi_judge+0x3d0>
 800d3f6:	bf00      	nop
 800d3f8:	20000068 	.word	0x20000068
 800d3fc:	2000e122 	.word	0x2000e122
 800d400:	20009f6c 	.word	0x20009f6c
 800d404:	20009f6d 	.word	0x20009f6d
 800d408:	2001a6d8 	.word	0x2001a6d8
 800d40c:	2001a268 	.word	0x2001a268
		  }
		  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d410:	4b8d      	ldr	r3, [pc, #564]	; (800d648 <Adachi_judge+0x4b4>)
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	4618      	mov	r0, r3
 800d416:	4b8d      	ldr	r3, [pc, #564]	; (800d64c <Adachi_judge+0x4b8>)
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	4619      	mov	r1, r3
 800d41c:	4a8c      	ldr	r2, [pc, #560]	; (800d650 <Adachi_judge+0x4bc>)
 800d41e:	0083      	lsls	r3, r0, #2
 800d420:	440b      	add	r3, r1
 800d422:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d426:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d127      	bne.n	800d480 <Adachi_judge+0x2ec>
 800d430:	4b85      	ldr	r3, [pc, #532]	; (800d648 <Adachi_judge+0x4b4>)
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	461a      	mov	r2, r3
 800d436:	4b85      	ldr	r3, [pc, #532]	; (800d64c <Adachi_judge+0x4b8>)
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	3301      	adds	r3, #1
 800d43c:	4985      	ldr	r1, [pc, #532]	; (800d654 <Adachi_judge+0x4c0>)
 800d43e:	0092      	lsls	r2, r2, #2
 800d440:	440a      	add	r2, r1
 800d442:	4413      	add	r3, r2
 800d444:	781a      	ldrb	r2, [r3, #0]
 800d446:	4b80      	ldr	r3, [pc, #512]	; (800d648 <Adachi_judge+0x4b4>)
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	461c      	mov	r4, r3
 800d44c:	4b7f      	ldr	r3, [pc, #508]	; (800d64c <Adachi_judge+0x4b8>)
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	4618      	mov	r0, r3
 800d452:	4980      	ldr	r1, [pc, #512]	; (800d654 <Adachi_judge+0x4c0>)
 800d454:	00a3      	lsls	r3, r4, #2
 800d456:	440b      	add	r3, r1
 800d458:	4403      	add	r3, r0
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d20f      	bcs.n	800d480 <Adachi_judge+0x2ec>
 800d460:	4b7a      	ldr	r3, [pc, #488]	; (800d64c <Adachi_judge+0x4b8>)
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	2b02      	cmp	r3, #2
 800d466:	d80b      	bhi.n	800d480 <Adachi_judge+0x2ec>
			  //左�?
			  L_turn_select();
 800d468:	f7fe fbbe 	bl	800bbe8 <L_turn_select>
	       	  my_direction = north;
 800d46c:	4b7a      	ldr	r3, [pc, #488]	; (800d658 <Adachi_judge+0x4c4>)
 800d46e:	2200      	movs	r2, #0
 800d470:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d472:	4b76      	ldr	r3, [pc, #472]	; (800d64c <Adachi_judge+0x4b8>)
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	3301      	adds	r3, #1
 800d478:	b2da      	uxtb	r2, r3
 800d47a:	4b74      	ldr	r3, [pc, #464]	; (800d64c <Adachi_judge+0x4b8>)
 800d47c:	701a      	strb	r2, [r3, #0]
 800d47e:	e071      	b.n	800d564 <Adachi_judge+0x3d0>
		  }
		  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d480:	4b71      	ldr	r3, [pc, #452]	; (800d648 <Adachi_judge+0x4b4>)
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	4618      	mov	r0, r3
 800d486:	4b71      	ldr	r3, [pc, #452]	; (800d64c <Adachi_judge+0x4b8>)
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	4619      	mov	r1, r3
 800d48c:	4a70      	ldr	r2, [pc, #448]	; (800d650 <Adachi_judge+0x4bc>)
 800d48e:	0083      	lsls	r3, r0, #2
 800d490:	440b      	add	r3, r1
 800d492:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d496:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d127      	bne.n	800d4f0 <Adachi_judge+0x35c>
 800d4a0:	4b69      	ldr	r3, [pc, #420]	; (800d648 <Adachi_judge+0x4b4>)
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	4b69      	ldr	r3, [pc, #420]	; (800d64c <Adachi_judge+0x4b8>)
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	4969      	ldr	r1, [pc, #420]	; (800d654 <Adachi_judge+0x4c0>)
 800d4ae:	0092      	lsls	r2, r2, #2
 800d4b0:	440a      	add	r2, r1
 800d4b2:	4413      	add	r3, r2
 800d4b4:	781a      	ldrb	r2, [r3, #0]
 800d4b6:	4b64      	ldr	r3, [pc, #400]	; (800d648 <Adachi_judge+0x4b4>)
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	461c      	mov	r4, r3
 800d4bc:	4b63      	ldr	r3, [pc, #396]	; (800d64c <Adachi_judge+0x4b8>)
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	4964      	ldr	r1, [pc, #400]	; (800d654 <Adachi_judge+0x4c0>)
 800d4c4:	00a3      	lsls	r3, r4, #2
 800d4c6:	440b      	add	r3, r1
 800d4c8:	4403      	add	r3, r0
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d20f      	bcs.n	800d4f0 <Adachi_judge+0x35c>
 800d4d0:	4b5e      	ldr	r3, [pc, #376]	; (800d64c <Adachi_judge+0x4b8>)
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d00b      	beq.n	800d4f0 <Adachi_judge+0x35c>
			  //右�?
			  R_turn_select();
 800d4d8:	f7fe fb36 	bl	800bb48 <R_turn_select>
	       	  my_direction = south;
 800d4dc:	4b5e      	ldr	r3, [pc, #376]	; (800d658 <Adachi_judge+0x4c4>)
 800d4de:	2202      	movs	r2, #2
 800d4e0:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d4e2:	4b5a      	ldr	r3, [pc, #360]	; (800d64c <Adachi_judge+0x4b8>)
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	3b01      	subs	r3, #1
 800d4e8:	b2da      	uxtb	r2, r3
 800d4ea:	4b58      	ldr	r3, [pc, #352]	; (800d64c <Adachi_judge+0x4b8>)
 800d4ec:	701a      	strb	r2, [r3, #0]
 800d4ee:	e039      	b.n	800d564 <Adachi_judge+0x3d0>
=======
 800c510:	4b3b      	ldr	r3, [pc, #236]	; (800c600 <Adachi_judge+0x2b8>)
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	4618      	mov	r0, r3
 800c516:	4b3b      	ldr	r3, [pc, #236]	; (800c604 <Adachi_judge+0x2bc>)
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	4619      	mov	r1, r3
 800c51c:	4a3a      	ldr	r2, [pc, #232]	; (800c608 <Adachi_judge+0x2c0>)
 800c51e:	0083      	lsls	r3, r0, #2
 800c520:	440b      	add	r3, r1
 800c522:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c526:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d127      	bne.n	800c580 <Adachi_judge+0x238>
 800c530:	4b33      	ldr	r3, [pc, #204]	; (800c600 <Adachi_judge+0x2b8>)
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	3301      	adds	r3, #1
 800c536:	4a33      	ldr	r2, [pc, #204]	; (800c604 <Adachi_judge+0x2bc>)
 800c538:	7812      	ldrb	r2, [r2, #0]
 800c53a:	4611      	mov	r1, r2
 800c53c:	4a33      	ldr	r2, [pc, #204]	; (800c60c <Adachi_judge+0x2c4>)
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	4413      	add	r3, r2
 800c542:	440b      	add	r3, r1
 800c544:	781a      	ldrb	r2, [r3, #0]
 800c546:	4b2e      	ldr	r3, [pc, #184]	; (800c600 <Adachi_judge+0x2b8>)
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	461c      	mov	r4, r3
 800c54c:	4b2d      	ldr	r3, [pc, #180]	; (800c604 <Adachi_judge+0x2bc>)
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	4618      	mov	r0, r3
 800c552:	492e      	ldr	r1, [pc, #184]	; (800c60c <Adachi_judge+0x2c4>)
 800c554:	00a3      	lsls	r3, r4, #2
 800c556:	440b      	add	r3, r1
 800c558:	4403      	add	r3, r0
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d20f      	bcs.n	800c580 <Adachi_judge+0x238>
 800c560:	4b27      	ldr	r3, [pc, #156]	; (800c600 <Adachi_judge+0x2b8>)
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	2b02      	cmp	r3, #2
 800c566:	d80b      	bhi.n	800c580 <Adachi_judge+0x238>
			  //前東
			  straight();
 800c568:	f7fe fcda 	bl	800af20 <straight>
	       	  my_direction = east;
 800c56c:	4b23      	ldr	r3, [pc, #140]	; (800c5fc <Adachi_judge+0x2b4>)
 800c56e:	2201      	movs	r2, #1
 800c570:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800c572:	4b23      	ldr	r3, [pc, #140]	; (800c600 <Adachi_judge+0x2b8>)
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	3301      	adds	r3, #1
 800c578:	b2da      	uxtb	r2, r3
 800c57a:	4b21      	ldr	r3, [pc, #132]	; (800c600 <Adachi_judge+0x2b8>)
 800c57c:	701a      	strb	r2, [r3, #0]
 800c57e:	e0a4      	b.n	800c6ca <Adachi_judge+0x382>
		  }
		  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800c580:	4b1f      	ldr	r3, [pc, #124]	; (800c600 <Adachi_judge+0x2b8>)
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	4618      	mov	r0, r3
 800c586:	4b1f      	ldr	r3, [pc, #124]	; (800c604 <Adachi_judge+0x2bc>)
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	4619      	mov	r1, r3
 800c58c:	4a1e      	ldr	r2, [pc, #120]	; (800c608 <Adachi_judge+0x2c0>)
 800c58e:	0083      	lsls	r3, r0, #2
 800c590:	440b      	add	r3, r1
 800c592:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c596:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d137      	bne.n	800c610 <Adachi_judge+0x2c8>
 800c5a0:	4b17      	ldr	r3, [pc, #92]	; (800c600 <Adachi_judge+0x2b8>)
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	4b17      	ldr	r3, [pc, #92]	; (800c604 <Adachi_judge+0x2bc>)
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	4917      	ldr	r1, [pc, #92]	; (800c60c <Adachi_judge+0x2c4>)
 800c5ae:	0092      	lsls	r2, r2, #2
 800c5b0:	440a      	add	r2, r1
 800c5b2:	4413      	add	r3, r2
 800c5b4:	781a      	ldrb	r2, [r3, #0]
 800c5b6:	4b12      	ldr	r3, [pc, #72]	; (800c600 <Adachi_judge+0x2b8>)
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	461c      	mov	r4, r3
 800c5bc:	4b11      	ldr	r3, [pc, #68]	; (800c604 <Adachi_judge+0x2bc>)
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	4912      	ldr	r1, [pc, #72]	; (800c60c <Adachi_judge+0x2c4>)
 800c5c4:	00a3      	lsls	r3, r4, #2
 800c5c6:	440b      	add	r3, r1
 800c5c8:	4403      	add	r3, r0
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d21f      	bcs.n	800c610 <Adachi_judge+0x2c8>
 800c5d0:	4b0c      	ldr	r3, [pc, #48]	; (800c604 <Adachi_judge+0x2bc>)
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	2b02      	cmp	r3, #2
 800c5d6:	d81b      	bhi.n	800c610 <Adachi_judge+0x2c8>
			  //左�?
			  L_turn_select();
 800c5d8:	f7ff fb06 	bl	800bbe8 <L_turn_select>
	       	  my_direction = north;
 800c5dc:	4b07      	ldr	r3, [pc, #28]	; (800c5fc <Adachi_judge+0x2b4>)
 800c5de:	2200      	movs	r2, #0
 800c5e0:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800c5e2:	4b08      	ldr	r3, [pc, #32]	; (800c604 <Adachi_judge+0x2bc>)
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	b2da      	uxtb	r2, r3
 800c5ea:	4b06      	ldr	r3, [pc, #24]	; (800c604 <Adachi_judge+0x2bc>)
 800c5ec:	701a      	strb	r2, [r3, #0]
 800c5ee:	e06c      	b.n	800c6ca <Adachi_judge+0x382>
 800c5f0:	33333333 	.word	0x33333333
 800c5f4:	3fd33333 	.word	0x3fd33333
 800c5f8:	20000cf4 	.word	0x20000cf4
 800c5fc:	20005162 	.word	0x20005162
 800c600:	20000fc4 	.word	0x20000fc4
 800c604:	20000fc5 	.word	0x20000fc5
 800c608:	20016560 	.word	0x20016560
 800c60c:	200160f0 	.word	0x200160f0
		  }
		  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800c610:	4b97      	ldr	r3, [pc, #604]	; (800c870 <Adachi_judge+0x528>)
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	4618      	mov	r0, r3
 800c616:	4b97      	ldr	r3, [pc, #604]	; (800c874 <Adachi_judge+0x52c>)
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	4619      	mov	r1, r3
 800c61c:	4a96      	ldr	r2, [pc, #600]	; (800c878 <Adachi_judge+0x530>)
 800c61e:	0083      	lsls	r3, r0, #2
 800c620:	440b      	add	r3, r1
 800c622:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c626:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d127      	bne.n	800c680 <Adachi_judge+0x338>
 800c630:	4b8f      	ldr	r3, [pc, #572]	; (800c870 <Adachi_judge+0x528>)
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	461a      	mov	r2, r3
 800c636:	4b8f      	ldr	r3, [pc, #572]	; (800c874 <Adachi_judge+0x52c>)
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	3b01      	subs	r3, #1
 800c63c:	498f      	ldr	r1, [pc, #572]	; (800c87c <Adachi_judge+0x534>)
 800c63e:	0092      	lsls	r2, r2, #2
 800c640:	440a      	add	r2, r1
 800c642:	4413      	add	r3, r2
 800c644:	781a      	ldrb	r2, [r3, #0]
 800c646:	4b8a      	ldr	r3, [pc, #552]	; (800c870 <Adachi_judge+0x528>)
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	461c      	mov	r4, r3
 800c64c:	4b89      	ldr	r3, [pc, #548]	; (800c874 <Adachi_judge+0x52c>)
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	4618      	mov	r0, r3
 800c652:	498a      	ldr	r1, [pc, #552]	; (800c87c <Adachi_judge+0x534>)
 800c654:	00a3      	lsls	r3, r4, #2
 800c656:	440b      	add	r3, r1
 800c658:	4403      	add	r3, r0
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d20f      	bcs.n	800c680 <Adachi_judge+0x338>
 800c660:	4b84      	ldr	r3, [pc, #528]	; (800c874 <Adachi_judge+0x52c>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00b      	beq.n	800c680 <Adachi_judge+0x338>
			  //右�?
			  R_turn_select();
 800c668:	f7ff fa7a 	bl	800bb60 <R_turn_select>
	       	  my_direction = south;
 800c66c:	4b84      	ldr	r3, [pc, #528]	; (800c880 <Adachi_judge+0x538>)
 800c66e:	2202      	movs	r2, #2
 800c670:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800c672:	4b80      	ldr	r3, [pc, #512]	; (800c874 <Adachi_judge+0x52c>)
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	3b01      	subs	r3, #1
 800c678:	b2da      	uxtb	r2, r3
 800c67a:	4b7e      	ldr	r3, [pc, #504]	; (800c874 <Adachi_judge+0x52c>)
 800c67c:	701a      	strb	r2, [r3, #0]
 800c67e:	e024      	b.n	800c6ca <Adachi_judge+0x382>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
		  }
		  else {
			  //後西
	          Decelerate();
<<<<<<< HEAD
 800d4f0:	f7fd fc62 	bl	800adb8 <Decelerate>
	          for(int i=0;i < WAIT;i++);
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	623b      	str	r3, [r7, #32]
 800d4f8:	e002      	b.n	800d500 <Adachi_judge+0x36c>
 800d4fa:	6a3b      	ldr	r3, [r7, #32]
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	623b      	str	r3, [r7, #32]
 800d500:	6a3b      	ldr	r3, [r7, #32]
 800d502:	f247 522f 	movw	r2, #29999	; 0x752f
 800d506:	4293      	cmp	r3, r2
 800d508:	ddf7      	ble.n	800d4fa <Adachi_judge+0x366>

	          if(mode.execution == 1)
 800d50a:	4b54      	ldr	r3, [pc, #336]	; (800d65c <Adachi_judge+0x4c8>)
 800d50c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d101      	bne.n	800d518 <Adachi_judge+0x384>
	        	  Motor_PWM_Stop();
 800d514:	f7fc fdcc 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800d518:	f7fe fa32 	bl	800b980 <rotate180>
	  	      for(int i=0;i < WAIT;i++);
 800d51c:	2300      	movs	r3, #0
 800d51e:	61fb      	str	r3, [r7, #28]
 800d520:	e002      	b.n	800d528 <Adachi_judge+0x394>
 800d522:	69fb      	ldr	r3, [r7, #28]
 800d524:	3301      	adds	r3, #1
 800d526:	61fb      	str	r3, [r7, #28]
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	f247 522f 	movw	r2, #29999	; 0x752f
 800d52e:	4293      	cmp	r3, r2
 800d530:	ddf7      	ble.n	800d522 <Adachi_judge+0x38e>
	  	      back_calib();
 800d532:	f7fe faa1 	bl	800ba78 <back_calib>
	  	      for(int i=0;i < WAIT;i++);
 800d536:	2300      	movs	r3, #0
 800d538:	61bb      	str	r3, [r7, #24]
 800d53a:	e002      	b.n	800d542 <Adachi_judge+0x3ae>
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	3301      	adds	r3, #1
 800d540:	61bb      	str	r3, [r7, #24]
 800d542:	69bb      	ldr	r3, [r7, #24]
 800d544:	f247 522f 	movw	r2, #29999	; 0x752f
 800d548:	4293      	cmp	r3, r2
 800d54a:	ddf7      	ble.n	800d53c <Adachi_judge+0x3a8>
	       	  Start_Accel();
 800d54c:	f7fd fb2c 	bl	800aba8 <Start_Accel>

	       	  my_direction = west;
 800d550:	4b41      	ldr	r3, [pc, #260]	; (800d658 <Adachi_judge+0x4c4>)
 800d552:	2203      	movs	r2, #3
 800d554:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d556:	4b3c      	ldr	r3, [pc, #240]	; (800d648 <Adachi_judge+0x4b4>)
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	3b01      	subs	r3, #1
 800d55c:	b2da      	uxtb	r2, r3
 800d55e:	4b3a      	ldr	r3, [pc, #232]	; (800d648 <Adachi_judge+0x4b4>)
 800d560:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d562:	e1e1      	b.n	800d928 <Adachi_judge+0x794>
 800d564:	e1e0      	b.n	800d928 <Adachi_judge+0x794>
=======
 800c680:	f7fe fba6 	bl	800add0 <Decelerate>
	          wait(0.3);
 800c684:	ed9f 0b78 	vldr	d0, [pc, #480]	; 800c868 <Adachi_judge+0x520>
 800c688:	f7fe fa76 	bl	800ab78 <wait>

	          if(mode.execution == 1)
 800c68c:	4b7d      	ldr	r3, [pc, #500]	; (800c884 <Adachi_judge+0x53c>)
 800c68e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800c692:	2b01      	cmp	r3, #1
 800c694:	d101      	bne.n	800c69a <Adachi_judge+0x352>
	        	  Motor_PWM_Stop();
 800c696:	f7fd fd0b 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800c69a:	f7ff f97f 	bl	800b99c <rotate180>
	  	      wait(0.3);
 800c69e:	ed9f 0b72 	vldr	d0, [pc, #456]	; 800c868 <Adachi_judge+0x520>
 800c6a2:	f7fe fa69 	bl	800ab78 <wait>
	  	      back_calib();
 800c6a6:	f7ff f9f3 	bl	800ba90 <back_calib>
	  	      wait(0.3);
 800c6aa:	ed9f 0b6f 	vldr	d0, [pc, #444]	; 800c868 <Adachi_judge+0x520>
 800c6ae:	f7fe fa63 	bl	800ab78 <wait>
	       	  Start_Accel();
 800c6b2:	f7fe fa89 	bl	800abc8 <Start_Accel>

	       	  my_direction = west;
 800c6b6:	4b72      	ldr	r3, [pc, #456]	; (800c880 <Adachi_judge+0x538>)
 800c6b8:	2203      	movs	r2, #3
 800c6ba:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800c6bc:	4b6c      	ldr	r3, [pc, #432]	; (800c870 <Adachi_judge+0x528>)
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	b2da      	uxtb	r2, r3
 800c6c4:	4b6a      	ldr	r3, [pc, #424]	; (800c870 <Adachi_judge+0x528>)
 800c6c6:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800c6c8:	e1ad      	b.n	800ca26 <Adachi_judge+0x6de>
 800c6ca:	e1ac      	b.n	800ca26 <Adachi_judge+0x6de>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	  case south:

		  if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
<<<<<<< HEAD
 800d566:	4b38      	ldr	r3, [pc, #224]	; (800d648 <Adachi_judge+0x4b4>)
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	4618      	mov	r0, r3
 800d56c:	4b37      	ldr	r3, [pc, #220]	; (800d64c <Adachi_judge+0x4b8>)
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	4619      	mov	r1, r3
 800d572:	4a37      	ldr	r2, [pc, #220]	; (800d650 <Adachi_judge+0x4bc>)
 800d574:	0083      	lsls	r3, r0, #2
 800d576:	440b      	add	r3, r1
 800d578:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d57c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b00      	cmp	r3, #0
 800d584:	d127      	bne.n	800d5d6 <Adachi_judge+0x442>
 800d586:	4b30      	ldr	r3, [pc, #192]	; (800d648 <Adachi_judge+0x4b4>)
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	461a      	mov	r2, r3
 800d58c:	4b2f      	ldr	r3, [pc, #188]	; (800d64c <Adachi_judge+0x4b8>)
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	3b01      	subs	r3, #1
 800d592:	4930      	ldr	r1, [pc, #192]	; (800d654 <Adachi_judge+0x4c0>)
 800d594:	0092      	lsls	r2, r2, #2
 800d596:	440a      	add	r2, r1
 800d598:	4413      	add	r3, r2
 800d59a:	781a      	ldrb	r2, [r3, #0]
 800d59c:	4b2a      	ldr	r3, [pc, #168]	; (800d648 <Adachi_judge+0x4b4>)
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	461c      	mov	r4, r3
 800d5a2:	4b2a      	ldr	r3, [pc, #168]	; (800d64c <Adachi_judge+0x4b8>)
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	492a      	ldr	r1, [pc, #168]	; (800d654 <Adachi_judge+0x4c0>)
 800d5aa:	00a3      	lsls	r3, r4, #2
 800d5ac:	440b      	add	r3, r1
 800d5ae:	4403      	add	r3, r0
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d20f      	bcs.n	800d5d6 <Adachi_judge+0x442>
 800d5b6:	4b25      	ldr	r3, [pc, #148]	; (800d64c <Adachi_judge+0x4b8>)
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d00b      	beq.n	800d5d6 <Adachi_judge+0x442>
			  //前南
			  straight();
 800d5be:	f7fd fca7 	bl	800af10 <straight>
	       	  my_direction = south;
 800d5c2:	4b25      	ldr	r3, [pc, #148]	; (800d658 <Adachi_judge+0x4c4>)
 800d5c4:	2202      	movs	r2, #2
 800d5c6:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d5c8:	4b20      	ldr	r3, [pc, #128]	; (800d64c <Adachi_judge+0x4b8>)
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	3b01      	subs	r3, #1
 800d5ce:	b2da      	uxtb	r2, r3
 800d5d0:	4b1e      	ldr	r3, [pc, #120]	; (800d64c <Adachi_judge+0x4b8>)
 800d5d2:	701a      	strb	r2, [r3, #0]
 800d5d4:	e0b6      	b.n	800d744 <Adachi_judge+0x5b0>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800d5d6:	4b1c      	ldr	r3, [pc, #112]	; (800d648 <Adachi_judge+0x4b4>)
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	4b1b      	ldr	r3, [pc, #108]	; (800d64c <Adachi_judge+0x4b8>)
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	4a1b      	ldr	r2, [pc, #108]	; (800d650 <Adachi_judge+0x4bc>)
 800d5e4:	0083      	lsls	r3, r0, #2
 800d5e6:	440b      	add	r3, r1
 800d5e8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d5ec:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d134      	bne.n	800d660 <Adachi_judge+0x4cc>
 800d5f6:	4b14      	ldr	r3, [pc, #80]	; (800d648 <Adachi_judge+0x4b4>)
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	4a13      	ldr	r2, [pc, #76]	; (800d64c <Adachi_judge+0x4b8>)
 800d5fe:	7812      	ldrb	r2, [r2, #0]
 800d600:	4611      	mov	r1, r2
 800d602:	4a14      	ldr	r2, [pc, #80]	; (800d654 <Adachi_judge+0x4c0>)
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	4413      	add	r3, r2
 800d608:	440b      	add	r3, r1
 800d60a:	781a      	ldrb	r2, [r3, #0]
 800d60c:	4b0e      	ldr	r3, [pc, #56]	; (800d648 <Adachi_judge+0x4b4>)
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	461c      	mov	r4, r3
 800d612:	4b0e      	ldr	r3, [pc, #56]	; (800d64c <Adachi_judge+0x4b8>)
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	4618      	mov	r0, r3
 800d618:	490e      	ldr	r1, [pc, #56]	; (800d654 <Adachi_judge+0x4c0>)
 800d61a:	00a3      	lsls	r3, r4, #2
 800d61c:	440b      	add	r3, r1
 800d61e:	4403      	add	r3, r0
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	429a      	cmp	r2, r3
 800d624:	d21c      	bcs.n	800d660 <Adachi_judge+0x4cc>
 800d626:	4b08      	ldr	r3, [pc, #32]	; (800d648 <Adachi_judge+0x4b4>)
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	d818      	bhi.n	800d660 <Adachi_judge+0x4cc>
			  //左東
			  L_turn_select();
 800d62e:	f7fe fadb 	bl	800bbe8 <L_turn_select>
	       	  my_direction = east;
 800d632:	4b09      	ldr	r3, [pc, #36]	; (800d658 <Adachi_judge+0x4c4>)
 800d634:	2201      	movs	r2, #1
 800d636:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d638:	4b03      	ldr	r3, [pc, #12]	; (800d648 <Adachi_judge+0x4b4>)
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	3301      	adds	r3, #1
 800d63e:	b2da      	uxtb	r2, r3
 800d640:	4b01      	ldr	r3, [pc, #4]	; (800d648 <Adachi_judge+0x4b4>)
 800d642:	701a      	strb	r2, [r3, #0]
 800d644:	e07e      	b.n	800d744 <Adachi_judge+0x5b0>
 800d646:	bf00      	nop
 800d648:	20009f6c 	.word	0x20009f6c
 800d64c:	20009f6d 	.word	0x20009f6d
 800d650:	2001a6d8 	.word	0x2001a6d8
 800d654:	2001a268 	.word	0x2001a268
 800d658:	2000e122 	.word	0x2000e122
 800d65c:	20000068 	.word	0x20000068
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d660:	4ba0      	ldr	r3, [pc, #640]	; (800d8e4 <Adachi_judge+0x750>)
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	4618      	mov	r0, r3
 800d666:	4ba0      	ldr	r3, [pc, #640]	; (800d8e8 <Adachi_judge+0x754>)
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	4619      	mov	r1, r3
 800d66c:	4a9f      	ldr	r2, [pc, #636]	; (800d8ec <Adachi_judge+0x758>)
 800d66e:	0083      	lsls	r3, r0, #2
 800d670:	440b      	add	r3, r1
 800d672:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d676:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d127      	bne.n	800d6d0 <Adachi_judge+0x53c>
 800d680:	4b98      	ldr	r3, [pc, #608]	; (800d8e4 <Adachi_judge+0x750>)
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	3b01      	subs	r3, #1
 800d686:	4a98      	ldr	r2, [pc, #608]	; (800d8e8 <Adachi_judge+0x754>)
 800d688:	7812      	ldrb	r2, [r2, #0]
 800d68a:	4611      	mov	r1, r2
 800d68c:	4a98      	ldr	r2, [pc, #608]	; (800d8f0 <Adachi_judge+0x75c>)
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	4413      	add	r3, r2
 800d692:	440b      	add	r3, r1
 800d694:	781a      	ldrb	r2, [r3, #0]
 800d696:	4b93      	ldr	r3, [pc, #588]	; (800d8e4 <Adachi_judge+0x750>)
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	461c      	mov	r4, r3
 800d69c:	4b92      	ldr	r3, [pc, #584]	; (800d8e8 <Adachi_judge+0x754>)
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	4993      	ldr	r1, [pc, #588]	; (800d8f0 <Adachi_judge+0x75c>)
 800d6a4:	00a3      	lsls	r3, r4, #2
 800d6a6:	440b      	add	r3, r1
 800d6a8:	4403      	add	r3, r0
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d20f      	bcs.n	800d6d0 <Adachi_judge+0x53c>
 800d6b0:	4b8c      	ldr	r3, [pc, #560]	; (800d8e4 <Adachi_judge+0x750>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00b      	beq.n	800d6d0 <Adachi_judge+0x53c>
			  //右西
			  R_turn_select();
 800d6b8:	f7fe fa46 	bl	800bb48 <R_turn_select>
	       	  my_direction = west;
 800d6bc:	4b8d      	ldr	r3, [pc, #564]	; (800d8f4 <Adachi_judge+0x760>)
 800d6be:	2203      	movs	r2, #3
 800d6c0:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d6c2:	4b88      	ldr	r3, [pc, #544]	; (800d8e4 <Adachi_judge+0x750>)
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	3b01      	subs	r3, #1
 800d6c8:	b2da      	uxtb	r2, r3
 800d6ca:	4b86      	ldr	r3, [pc, #536]	; (800d8e4 <Adachi_judge+0x750>)
 800d6cc:	701a      	strb	r2, [r3, #0]
 800d6ce:	e039      	b.n	800d744 <Adachi_judge+0x5b0>
=======
 800c6cc:	4b68      	ldr	r3, [pc, #416]	; (800c870 <Adachi_judge+0x528>)
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	4b68      	ldr	r3, [pc, #416]	; (800c874 <Adachi_judge+0x52c>)
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	4a67      	ldr	r2, [pc, #412]	; (800c878 <Adachi_judge+0x530>)
 800c6da:	0083      	lsls	r3, r0, #2
 800c6dc:	440b      	add	r3, r1
 800c6de:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c6e2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d127      	bne.n	800c73c <Adachi_judge+0x3f4>
 800c6ec:	4b60      	ldr	r3, [pc, #384]	; (800c870 <Adachi_judge+0x528>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	4b60      	ldr	r3, [pc, #384]	; (800c874 <Adachi_judge+0x52c>)
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	3b01      	subs	r3, #1
 800c6f8:	4960      	ldr	r1, [pc, #384]	; (800c87c <Adachi_judge+0x534>)
 800c6fa:	0092      	lsls	r2, r2, #2
 800c6fc:	440a      	add	r2, r1
 800c6fe:	4413      	add	r3, r2
 800c700:	781a      	ldrb	r2, [r3, #0]
 800c702:	4b5b      	ldr	r3, [pc, #364]	; (800c870 <Adachi_judge+0x528>)
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	461c      	mov	r4, r3
 800c708:	4b5a      	ldr	r3, [pc, #360]	; (800c874 <Adachi_judge+0x52c>)
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	4618      	mov	r0, r3
 800c70e:	495b      	ldr	r1, [pc, #364]	; (800c87c <Adachi_judge+0x534>)
 800c710:	00a3      	lsls	r3, r4, #2
 800c712:	440b      	add	r3, r1
 800c714:	4403      	add	r3, r0
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d20f      	bcs.n	800c73c <Adachi_judge+0x3f4>
 800c71c:	4b55      	ldr	r3, [pc, #340]	; (800c874 <Adachi_judge+0x52c>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00b      	beq.n	800c73c <Adachi_judge+0x3f4>
			  //前南
			  straight();
 800c724:	f7fe fbfc 	bl	800af20 <straight>
	       	  my_direction = south;
 800c728:	4b55      	ldr	r3, [pc, #340]	; (800c880 <Adachi_judge+0x538>)
 800c72a:	2202      	movs	r2, #2
 800c72c:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800c72e:	4b51      	ldr	r3, [pc, #324]	; (800c874 <Adachi_judge+0x52c>)
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	3b01      	subs	r3, #1
 800c734:	b2da      	uxtb	r2, r3
 800c736:	4b4f      	ldr	r3, [pc, #316]	; (800c874 <Adachi_judge+0x52c>)
 800c738:	701a      	strb	r2, [r3, #0]
 800c73a:	e094      	b.n	800c866 <Adachi_judge+0x51e>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800c73c:	4b4c      	ldr	r3, [pc, #304]	; (800c870 <Adachi_judge+0x528>)
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	4618      	mov	r0, r3
 800c742:	4b4c      	ldr	r3, [pc, #304]	; (800c874 <Adachi_judge+0x52c>)
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	4619      	mov	r1, r3
 800c748:	4a4b      	ldr	r2, [pc, #300]	; (800c878 <Adachi_judge+0x530>)
 800c74a:	0083      	lsls	r3, r0, #2
 800c74c:	440b      	add	r3, r1
 800c74e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c752:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c756:	b2db      	uxtb	r3, r3
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d127      	bne.n	800c7ac <Adachi_judge+0x464>
 800c75c:	4b44      	ldr	r3, [pc, #272]	; (800c870 <Adachi_judge+0x528>)
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	3301      	adds	r3, #1
 800c762:	4a44      	ldr	r2, [pc, #272]	; (800c874 <Adachi_judge+0x52c>)
 800c764:	7812      	ldrb	r2, [r2, #0]
 800c766:	4611      	mov	r1, r2
 800c768:	4a44      	ldr	r2, [pc, #272]	; (800c87c <Adachi_judge+0x534>)
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	4413      	add	r3, r2
 800c76e:	440b      	add	r3, r1
 800c770:	781a      	ldrb	r2, [r3, #0]
 800c772:	4b3f      	ldr	r3, [pc, #252]	; (800c870 <Adachi_judge+0x528>)
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	461c      	mov	r4, r3
 800c778:	4b3e      	ldr	r3, [pc, #248]	; (800c874 <Adachi_judge+0x52c>)
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	4618      	mov	r0, r3
 800c77e:	493f      	ldr	r1, [pc, #252]	; (800c87c <Adachi_judge+0x534>)
 800c780:	00a3      	lsls	r3, r4, #2
 800c782:	440b      	add	r3, r1
 800c784:	4403      	add	r3, r0
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d20f      	bcs.n	800c7ac <Adachi_judge+0x464>
 800c78c:	4b38      	ldr	r3, [pc, #224]	; (800c870 <Adachi_judge+0x528>)
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	2b02      	cmp	r3, #2
 800c792:	d80b      	bhi.n	800c7ac <Adachi_judge+0x464>
			  //左東
			  L_turn_select();
 800c794:	f7ff fa28 	bl	800bbe8 <L_turn_select>
	       	  my_direction = east;
 800c798:	4b39      	ldr	r3, [pc, #228]	; (800c880 <Adachi_judge+0x538>)
 800c79a:	2201      	movs	r2, #1
 800c79c:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800c79e:	4b34      	ldr	r3, [pc, #208]	; (800c870 <Adachi_judge+0x528>)
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	b2da      	uxtb	r2, r3
 800c7a6:	4b32      	ldr	r3, [pc, #200]	; (800c870 <Adachi_judge+0x528>)
 800c7a8:	701a      	strb	r2, [r3, #0]
 800c7aa:	e05c      	b.n	800c866 <Adachi_judge+0x51e>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800c7ac:	4b30      	ldr	r3, [pc, #192]	; (800c870 <Adachi_judge+0x528>)
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	4b30      	ldr	r3, [pc, #192]	; (800c874 <Adachi_judge+0x52c>)
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	4a2f      	ldr	r2, [pc, #188]	; (800c878 <Adachi_judge+0x530>)
 800c7ba:	0083      	lsls	r3, r0, #2
 800c7bc:	440b      	add	r3, r1
 800c7be:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c7c2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d127      	bne.n	800c81c <Adachi_judge+0x4d4>
 800c7cc:	4b28      	ldr	r3, [pc, #160]	; (800c870 <Adachi_judge+0x528>)
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	4a28      	ldr	r2, [pc, #160]	; (800c874 <Adachi_judge+0x52c>)
 800c7d4:	7812      	ldrb	r2, [r2, #0]
 800c7d6:	4611      	mov	r1, r2
 800c7d8:	4a28      	ldr	r2, [pc, #160]	; (800c87c <Adachi_judge+0x534>)
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	4413      	add	r3, r2
 800c7de:	440b      	add	r3, r1
 800c7e0:	781a      	ldrb	r2, [r3, #0]
 800c7e2:	4b23      	ldr	r3, [pc, #140]	; (800c870 <Adachi_judge+0x528>)
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	461c      	mov	r4, r3
 800c7e8:	4b22      	ldr	r3, [pc, #136]	; (800c874 <Adachi_judge+0x52c>)
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	4923      	ldr	r1, [pc, #140]	; (800c87c <Adachi_judge+0x534>)
 800c7f0:	00a3      	lsls	r3, r4, #2
 800c7f2:	440b      	add	r3, r1
 800c7f4:	4403      	add	r3, r0
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d20f      	bcs.n	800c81c <Adachi_judge+0x4d4>
 800c7fc:	4b1c      	ldr	r3, [pc, #112]	; (800c870 <Adachi_judge+0x528>)
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00b      	beq.n	800c81c <Adachi_judge+0x4d4>
			  //右西
			  R_turn_select();
 800c804:	f7ff f9ac 	bl	800bb60 <R_turn_select>
	       	  my_direction = west;
 800c808:	4b1d      	ldr	r3, [pc, #116]	; (800c880 <Adachi_judge+0x538>)
 800c80a:	2203      	movs	r2, #3
 800c80c:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800c80e:	4b18      	ldr	r3, [pc, #96]	; (800c870 <Adachi_judge+0x528>)
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	3b01      	subs	r3, #1
 800c814:	b2da      	uxtb	r2, r3
 800c816:	4b16      	ldr	r3, [pc, #88]	; (800c870 <Adachi_judge+0x528>)
 800c818:	701a      	strb	r2, [r3, #0]
 800c81a:	e024      	b.n	800c866 <Adachi_judge+0x51e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
		  }
		  else {
			  //後北
	          Decelerate();
<<<<<<< HEAD
 800d6d0:	f7fd fb72 	bl	800adb8 <Decelerate>
	          for(int i=0;i < WAIT;i++);;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	617b      	str	r3, [r7, #20]
 800d6d8:	e002      	b.n	800d6e0 <Adachi_judge+0x54c>
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	3301      	adds	r3, #1
 800d6de:	617b      	str	r3, [r7, #20]
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	f247 522f 	movw	r2, #29999	; 0x752f
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	ddf7      	ble.n	800d6da <Adachi_judge+0x546>

	          if(mode.execution == 1)
 800d6ea:	4b83      	ldr	r3, [pc, #524]	; (800d8f8 <Adachi_judge+0x764>)
 800d6ec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d101      	bne.n	800d6f8 <Adachi_judge+0x564>
	        	  Motor_PWM_Stop();
 800d6f4:	f7fc fcdc 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800d6f8:	f7fe f942 	bl	800b980 <rotate180>
	  	      for(int i=0;i < WAIT;i++);;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	613b      	str	r3, [r7, #16]
 800d700:	e002      	b.n	800d708 <Adachi_judge+0x574>
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	3301      	adds	r3, #1
 800d706:	613b      	str	r3, [r7, #16]
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	f247 522f 	movw	r2, #29999	; 0x752f
 800d70e:	4293      	cmp	r3, r2
 800d710:	ddf7      	ble.n	800d702 <Adachi_judge+0x56e>
	  	      back_calib();
 800d712:	f7fe f9b1 	bl	800ba78 <back_calib>
	  	      for(int i=0;i < WAIT;i++);
 800d716:	2300      	movs	r3, #0
 800d718:	60fb      	str	r3, [r7, #12]
 800d71a:	e002      	b.n	800d722 <Adachi_judge+0x58e>
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	3301      	adds	r3, #1
 800d720:	60fb      	str	r3, [r7, #12]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f247 522f 	movw	r2, #29999	; 0x752f
 800d728:	4293      	cmp	r3, r2
 800d72a:	ddf7      	ble.n	800d71c <Adachi_judge+0x588>
	       	  Start_Accel();
 800d72c:	f7fd fa3c 	bl	800aba8 <Start_Accel>

	       	  my_direction = north;
 800d730:	4b70      	ldr	r3, [pc, #448]	; (800d8f4 <Adachi_judge+0x760>)
 800d732:	2200      	movs	r2, #0
 800d734:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d736:	4b6c      	ldr	r3, [pc, #432]	; (800d8e8 <Adachi_judge+0x754>)
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	3301      	adds	r3, #1
 800d73c:	b2da      	uxtb	r2, r3
 800d73e:	4b6a      	ldr	r3, [pc, #424]	; (800d8e8 <Adachi_judge+0x754>)
 800d740:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d742:	e0f1      	b.n	800d928 <Adachi_judge+0x794>
 800d744:	e0f0      	b.n	800d928 <Adachi_judge+0x794>
=======
 800c81c:	f7fe fad8 	bl	800add0 <Decelerate>
	          wait(0.3);
 800c820:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800c868 <Adachi_judge+0x520>
 800c824:	f7fe f9a8 	bl	800ab78 <wait>

	          if(mode.execution == 1)
 800c828:	4b16      	ldr	r3, [pc, #88]	; (800c884 <Adachi_judge+0x53c>)
 800c82a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d101      	bne.n	800c836 <Adachi_judge+0x4ee>
	        	  Motor_PWM_Stop();
 800c832:	f7fd fc3d 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800c836:	f7ff f8b1 	bl	800b99c <rotate180>
	  	      wait(0.3);
 800c83a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800c868 <Adachi_judge+0x520>
 800c83e:	f7fe f99b 	bl	800ab78 <wait>
	  	      back_calib();
 800c842:	f7ff f925 	bl	800ba90 <back_calib>
	  	      wait(0.3);
 800c846:	ed9f 0b08 	vldr	d0, [pc, #32]	; 800c868 <Adachi_judge+0x520>
 800c84a:	f7fe f995 	bl	800ab78 <wait>
	       	  Start_Accel();
 800c84e:	f7fe f9bb 	bl	800abc8 <Start_Accel>

	       	  my_direction = north;
 800c852:	4b0b      	ldr	r3, [pc, #44]	; (800c880 <Adachi_judge+0x538>)
 800c854:	2200      	movs	r2, #0
 800c856:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800c858:	4b06      	ldr	r3, [pc, #24]	; (800c874 <Adachi_judge+0x52c>)
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	3301      	adds	r3, #1
 800c85e:	b2da      	uxtb	r2, r3
 800c860:	4b04      	ldr	r3, [pc, #16]	; (800c874 <Adachi_judge+0x52c>)
 800c862:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800c864:	e0df      	b.n	800ca26 <Adachi_judge+0x6de>
 800c866:	e0de      	b.n	800ca26 <Adachi_judge+0x6de>
 800c868:	33333333 	.word	0x33333333
 800c86c:	3fd33333 	.word	0x3fd33333
 800c870:	20000fc4 	.word	0x20000fc4
 800c874:	20000fc5 	.word	0x20000fc5
 800c878:	20016560 	.word	0x20016560
 800c87c:	200160f0 	.word	0x200160f0
 800c880:	20005162 	.word	0x20005162
 800c884:	20000cf4 	.word	0x20000cf4
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	  case west:

		  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
<<<<<<< HEAD
 800d746:	4b67      	ldr	r3, [pc, #412]	; (800d8e4 <Adachi_judge+0x750>)
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	4618      	mov	r0, r3
 800d74c:	4b66      	ldr	r3, [pc, #408]	; (800d8e8 <Adachi_judge+0x754>)
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	4619      	mov	r1, r3
 800d752:	4a66      	ldr	r2, [pc, #408]	; (800d8ec <Adachi_judge+0x758>)
 800d754:	0083      	lsls	r3, r0, #2
 800d756:	440b      	add	r3, r1
 800d758:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d75c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d760:	b2db      	uxtb	r3, r3
 800d762:	2b00      	cmp	r3, #0
 800d764:	d127      	bne.n	800d7b6 <Adachi_judge+0x622>
 800d766:	4b5f      	ldr	r3, [pc, #380]	; (800d8e4 <Adachi_judge+0x750>)
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	3b01      	subs	r3, #1
 800d76c:	4a5e      	ldr	r2, [pc, #376]	; (800d8e8 <Adachi_judge+0x754>)
 800d76e:	7812      	ldrb	r2, [r2, #0]
 800d770:	4611      	mov	r1, r2
 800d772:	4a5f      	ldr	r2, [pc, #380]	; (800d8f0 <Adachi_judge+0x75c>)
 800d774:	009b      	lsls	r3, r3, #2
 800d776:	4413      	add	r3, r2
 800d778:	440b      	add	r3, r1
 800d77a:	781a      	ldrb	r2, [r3, #0]
 800d77c:	4b59      	ldr	r3, [pc, #356]	; (800d8e4 <Adachi_judge+0x750>)
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	461c      	mov	r4, r3
 800d782:	4b59      	ldr	r3, [pc, #356]	; (800d8e8 <Adachi_judge+0x754>)
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	4618      	mov	r0, r3
 800d788:	4959      	ldr	r1, [pc, #356]	; (800d8f0 <Adachi_judge+0x75c>)
 800d78a:	00a3      	lsls	r3, r4, #2
 800d78c:	440b      	add	r3, r1
 800d78e:	4403      	add	r3, r0
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	429a      	cmp	r2, r3
 800d794:	d20f      	bcs.n	800d7b6 <Adachi_judge+0x622>
 800d796:	4b53      	ldr	r3, [pc, #332]	; (800d8e4 <Adachi_judge+0x750>)
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00b      	beq.n	800d7b6 <Adachi_judge+0x622>
			  //前西
			  straight();
 800d79e:	f7fd fbb7 	bl	800af10 <straight>
	       	  my_direction = west;
 800d7a2:	4b54      	ldr	r3, [pc, #336]	; (800d8f4 <Adachi_judge+0x760>)
 800d7a4:	2203      	movs	r2, #3
 800d7a6:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d7a8:	4b4e      	ldr	r3, [pc, #312]	; (800d8e4 <Adachi_judge+0x750>)
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	4b4c      	ldr	r3, [pc, #304]	; (800d8e4 <Adachi_judge+0x750>)
 800d7b2:	701a      	strb	r2, [r3, #0]
 800d7b4:	e0b6      	b.n	800d924 <Adachi_judge+0x790>
		  }
		  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d7b6:	4b4b      	ldr	r3, [pc, #300]	; (800d8e4 <Adachi_judge+0x750>)
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	4b4a      	ldr	r3, [pc, #296]	; (800d8e8 <Adachi_judge+0x754>)
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	4a4a      	ldr	r2, [pc, #296]	; (800d8ec <Adachi_judge+0x758>)
 800d7c4:	0083      	lsls	r3, r0, #2
 800d7c6:	440b      	add	r3, r1
 800d7c8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d7cc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d127      	bne.n	800d826 <Adachi_judge+0x692>
 800d7d6:	4b43      	ldr	r3, [pc, #268]	; (800d8e4 <Adachi_judge+0x750>)
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	461a      	mov	r2, r3
 800d7dc:	4b42      	ldr	r3, [pc, #264]	; (800d8e8 <Adachi_judge+0x754>)
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	4943      	ldr	r1, [pc, #268]	; (800d8f0 <Adachi_judge+0x75c>)
 800d7e4:	0092      	lsls	r2, r2, #2
 800d7e6:	440a      	add	r2, r1
 800d7e8:	4413      	add	r3, r2
 800d7ea:	781a      	ldrb	r2, [r3, #0]
 800d7ec:	4b3d      	ldr	r3, [pc, #244]	; (800d8e4 <Adachi_judge+0x750>)
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	461c      	mov	r4, r3
 800d7f2:	4b3d      	ldr	r3, [pc, #244]	; (800d8e8 <Adachi_judge+0x754>)
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	493d      	ldr	r1, [pc, #244]	; (800d8f0 <Adachi_judge+0x75c>)
 800d7fa:	00a3      	lsls	r3, r4, #2
 800d7fc:	440b      	add	r3, r1
 800d7fe:	4403      	add	r3, r0
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	429a      	cmp	r2, r3
 800d804:	d20f      	bcs.n	800d826 <Adachi_judge+0x692>
 800d806:	4b38      	ldr	r3, [pc, #224]	; (800d8e8 <Adachi_judge+0x754>)
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00b      	beq.n	800d826 <Adachi_judge+0x692>
			  //左�?
			  L_turn_select();
 800d80e:	f7fe f9eb 	bl	800bbe8 <L_turn_select>
	       	  my_direction = south;
 800d812:	4b38      	ldr	r3, [pc, #224]	; (800d8f4 <Adachi_judge+0x760>)
 800d814:	2202      	movs	r2, #2
 800d816:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d818:	4b33      	ldr	r3, [pc, #204]	; (800d8e8 <Adachi_judge+0x754>)
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	3b01      	subs	r3, #1
 800d81e:	b2da      	uxtb	r2, r3
 800d820:	4b31      	ldr	r3, [pc, #196]	; (800d8e8 <Adachi_judge+0x754>)
 800d822:	701a      	strb	r2, [r3, #0]
 800d824:	e07e      	b.n	800d924 <Adachi_judge+0x790>
		  }
		  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d826:	4b2f      	ldr	r3, [pc, #188]	; (800d8e4 <Adachi_judge+0x750>)
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	4618      	mov	r0, r3
 800d82c:	4b2e      	ldr	r3, [pc, #184]	; (800d8e8 <Adachi_judge+0x754>)
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	4619      	mov	r1, r3
 800d832:	4a2e      	ldr	r2, [pc, #184]	; (800d8ec <Adachi_judge+0x758>)
 800d834:	0083      	lsls	r3, r0, #2
 800d836:	440b      	add	r3, r1
 800d838:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d83c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d840:	b2db      	uxtb	r3, r3
 800d842:	2b00      	cmp	r3, #0
 800d844:	d127      	bne.n	800d896 <Adachi_judge+0x702>
 800d846:	4b27      	ldr	r3, [pc, #156]	; (800d8e4 <Adachi_judge+0x750>)
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	461a      	mov	r2, r3
 800d84c:	4b26      	ldr	r3, [pc, #152]	; (800d8e8 <Adachi_judge+0x754>)
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	3301      	adds	r3, #1
 800d852:	4927      	ldr	r1, [pc, #156]	; (800d8f0 <Adachi_judge+0x75c>)
 800d854:	0092      	lsls	r2, r2, #2
 800d856:	440a      	add	r2, r1
 800d858:	4413      	add	r3, r2
 800d85a:	781a      	ldrb	r2, [r3, #0]
 800d85c:	4b21      	ldr	r3, [pc, #132]	; (800d8e4 <Adachi_judge+0x750>)
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	461c      	mov	r4, r3
 800d862:	4b21      	ldr	r3, [pc, #132]	; (800d8e8 <Adachi_judge+0x754>)
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	4618      	mov	r0, r3
 800d868:	4921      	ldr	r1, [pc, #132]	; (800d8f0 <Adachi_judge+0x75c>)
 800d86a:	00a3      	lsls	r3, r4, #2
 800d86c:	440b      	add	r3, r1
 800d86e:	4403      	add	r3, r0
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	429a      	cmp	r2, r3
 800d874:	d20f      	bcs.n	800d896 <Adachi_judge+0x702>
 800d876:	4b1c      	ldr	r3, [pc, #112]	; (800d8e8 <Adachi_judge+0x754>)
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	2b02      	cmp	r3, #2
 800d87c:	d80b      	bhi.n	800d896 <Adachi_judge+0x702>
			  //右�?
			  R_turn_select();
 800d87e:	f7fe f963 	bl	800bb48 <R_turn_select>
	       	  my_direction = north;
 800d882:	4b1c      	ldr	r3, [pc, #112]	; (800d8f4 <Adachi_judge+0x760>)
 800d884:	2200      	movs	r2, #0
 800d886:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d888:	4b17      	ldr	r3, [pc, #92]	; (800d8e8 <Adachi_judge+0x754>)
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	3301      	adds	r3, #1
 800d88e:	b2da      	uxtb	r2, r3
 800d890:	4b15      	ldr	r3, [pc, #84]	; (800d8e8 <Adachi_judge+0x754>)
 800d892:	701a      	strb	r2, [r3, #0]
 800d894:	e046      	b.n	800d924 <Adachi_judge+0x790>
		  }
		  else {
			  //後東
	          Decelerate();
 800d896:	f7fd fa8f 	bl	800adb8 <Decelerate>
	          for(int i=0;i < WAIT;i++);;
 800d89a:	2300      	movs	r3, #0
 800d89c:	60bb      	str	r3, [r7, #8]
 800d89e:	e002      	b.n	800d8a6 <Adachi_judge+0x712>
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	60bb      	str	r3, [r7, #8]
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	f247 522f 	movw	r2, #29999	; 0x752f
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	ddf7      	ble.n	800d8a0 <Adachi_judge+0x70c>

	          if(mode.execution == 1)
 800d8b0:	4b11      	ldr	r3, [pc, #68]	; (800d8f8 <Adachi_judge+0x764>)
 800d8b2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d101      	bne.n	800d8be <Adachi_judge+0x72a>
	        	  Motor_PWM_Stop();
 800d8ba:	f7fc fbf9 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800d8be:	f7fe f85f 	bl	800b980 <rotate180>
	  	      for(int i=0;i < WAIT;i++);;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	607b      	str	r3, [r7, #4]
 800d8c6:	e002      	b.n	800d8ce <Adachi_judge+0x73a>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	607b      	str	r3, [r7, #4]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f247 522f 	movw	r2, #29999	; 0x752f
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	ddf7      	ble.n	800d8c8 <Adachi_judge+0x734>
	  	      back_calib();
 800d8d8:	f7fe f8ce 	bl	800ba78 <back_calib>
	  	      for(int i=0;i < WAIT;i++);
 800d8dc:	2300      	movs	r3, #0
 800d8de:	603b      	str	r3, [r7, #0]
 800d8e0:	e00f      	b.n	800d902 <Adachi_judge+0x76e>
 800d8e2:	bf00      	nop
 800d8e4:	20009f6c 	.word	0x20009f6c
 800d8e8:	20009f6d 	.word	0x20009f6d
 800d8ec:	2001a6d8 	.word	0x2001a6d8
 800d8f0:	2001a268 	.word	0x2001a268
 800d8f4:	2000e122 	.word	0x2000e122
 800d8f8:	20000068 	.word	0x20000068
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	3301      	adds	r3, #1
 800d900:	603b      	str	r3, [r7, #0]
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	f247 522f 	movw	r2, #29999	; 0x752f
 800d908:	4293      	cmp	r3, r2
 800d90a:	ddf7      	ble.n	800d8fc <Adachi_judge+0x768>
	       	  Start_Accel();
 800d90c:	f7fd f94c 	bl	800aba8 <Start_Accel>

	       	  my_direction = east;
 800d910:	4b07      	ldr	r3, [pc, #28]	; (800d930 <Adachi_judge+0x79c>)
 800d912:	2201      	movs	r2, #1
 800d914:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d916:	4b07      	ldr	r3, [pc, #28]	; (800d934 <Adachi_judge+0x7a0>)
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	3301      	adds	r3, #1
 800d91c:	b2da      	uxtb	r2, r3
 800d91e:	4b05      	ldr	r3, [pc, #20]	; (800d934 <Adachi_judge+0x7a0>)
 800d920:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d922:	e001      	b.n	800d928 <Adachi_judge+0x794>
 800d924:	e000      	b.n	800d928 <Adachi_judge+0x794>

	  default:
		  break;
 800d926:	bf00      	nop
	  }//swtich end
}
 800d928:	bf00      	nop
 800d92a:	3734      	adds	r7, #52	; 0x34
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd90      	pop	{r4, r7, pc}
 800d930:	2000e122 	.word	0x2000e122
 800d934:	20009f6c 	.word	0x20009f6c

0800d938 <Adachi_go_back>:
void Adachi_go_back(){
 800d938:	b590      	push	{r4, r7, lr}
 800d93a:	b08d      	sub	sp, #52	; 0x34
 800d93c:	af00      	add	r7, sp, #0

	/*------旋回モード選択-----*/
	mode.turn = 0;
 800d93e:	4b97      	ldr	r3, [pc, #604]	; (800db9c <Adachi_go_back+0x264>)
 800d940:	2200      	movs	r2, #0
 800d942:	725a      	strb	r2, [r3, #9]
	/*----------------------------*/


	//今�?�評価値よりも前の評価値が小さければ...
	//前左右
	  switch(my_direction){
 800d944:	4b96      	ldr	r3, [pc, #600]	; (800dba0 <Adachi_go_back+0x268>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	2b03      	cmp	r3, #3
 800d94a:	f200 83be 	bhi.w	800e0ca <Adachi_go_back+0x792>
 800d94e:	a201      	add	r2, pc, #4	; (adr r2, 800d954 <Adachi_go_back+0x1c>)
 800d950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d954:	0800d965 	.word	0x0800d965
 800d958:	0800db2b 	.word	0x0800db2b
 800d95c:	0800dd0b 	.word	0x0800dd0b
 800d960:	0800deeb 	.word	0x0800deeb
	  case north:
		  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] > walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d964:	4b8f      	ldr	r3, [pc, #572]	; (800dba4 <Adachi_go_back+0x26c>)
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	4618      	mov	r0, r3
 800d96a:	4b8f      	ldr	r3, [pc, #572]	; (800dba8 <Adachi_go_back+0x270>)
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	4619      	mov	r1, r3
 800d970:	4a8e      	ldr	r2, [pc, #568]	; (800dbac <Adachi_go_back+0x274>)
 800d972:	0083      	lsls	r3, r0, #2
 800d974:	440b      	add	r3, r1
 800d976:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d97a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	2b00      	cmp	r3, #0
 800d982:	d127      	bne.n	800d9d4 <Adachi_go_back+0x9c>
 800d984:	4b87      	ldr	r3, [pc, #540]	; (800dba4 <Adachi_go_back+0x26c>)
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	461a      	mov	r2, r3
 800d98a:	4b87      	ldr	r3, [pc, #540]	; (800dba8 <Adachi_go_back+0x270>)
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	3301      	adds	r3, #1
 800d990:	4987      	ldr	r1, [pc, #540]	; (800dbb0 <Adachi_go_back+0x278>)
 800d992:	0092      	lsls	r2, r2, #2
 800d994:	440a      	add	r2, r1
 800d996:	4413      	add	r3, r2
 800d998:	781a      	ldrb	r2, [r3, #0]
 800d99a:	4b82      	ldr	r3, [pc, #520]	; (800dba4 <Adachi_go_back+0x26c>)
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	461c      	mov	r4, r3
 800d9a0:	4b81      	ldr	r3, [pc, #516]	; (800dba8 <Adachi_go_back+0x270>)
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	4982      	ldr	r1, [pc, #520]	; (800dbb0 <Adachi_go_back+0x278>)
 800d9a8:	00a3      	lsls	r3, r4, #2
 800d9aa:	440b      	add	r3, r1
 800d9ac:	4403      	add	r3, r0
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d90f      	bls.n	800d9d4 <Adachi_go_back+0x9c>
 800d9b4:	4b7c      	ldr	r3, [pc, #496]	; (800dba8 <Adachi_go_back+0x270>)
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	2b02      	cmp	r3, #2
 800d9ba:	d80b      	bhi.n	800d9d4 <Adachi_go_back+0x9c>
			  //前北
			  straight();
 800d9bc:	f7fd faa8 	bl	800af10 <straight>
			  my_direction = north;
 800d9c0:	4b77      	ldr	r3, [pc, #476]	; (800dba0 <Adachi_go_back+0x268>)
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	701a      	strb	r2, [r3, #0]
			  y++;
 800d9c6:	4b78      	ldr	r3, [pc, #480]	; (800dba8 <Adachi_go_back+0x270>)
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	b2da      	uxtb	r2, r3
 800d9ce:	4b76      	ldr	r3, [pc, #472]	; (800dba8 <Adachi_go_back+0x270>)
 800d9d0:	701a      	strb	r2, [r3, #0]
 800d9d2:	e0a9      	b.n	800db28 <Adachi_go_back+0x1f0>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] > walk_map[x][y] && x > 0){
 800d9d4:	4b73      	ldr	r3, [pc, #460]	; (800dba4 <Adachi_go_back+0x26c>)
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	4618      	mov	r0, r3
 800d9da:	4b73      	ldr	r3, [pc, #460]	; (800dba8 <Adachi_go_back+0x270>)
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	4619      	mov	r1, r3
 800d9e0:	4a72      	ldr	r2, [pc, #456]	; (800dbac <Adachi_go_back+0x274>)
 800d9e2:	0083      	lsls	r3, r0, #2
 800d9e4:	440b      	add	r3, r1
 800d9e6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d9ea:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d9ee:	b2db      	uxtb	r3, r3
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d127      	bne.n	800da44 <Adachi_go_back+0x10c>
 800d9f4:	4b6b      	ldr	r3, [pc, #428]	; (800dba4 <Adachi_go_back+0x26c>)
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	4a6b      	ldr	r2, [pc, #428]	; (800dba8 <Adachi_go_back+0x270>)
 800d9fc:	7812      	ldrb	r2, [r2, #0]
 800d9fe:	4611      	mov	r1, r2
 800da00:	4a6b      	ldr	r2, [pc, #428]	; (800dbb0 <Adachi_go_back+0x278>)
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	4413      	add	r3, r2
 800da06:	440b      	add	r3, r1
 800da08:	781a      	ldrb	r2, [r3, #0]
 800da0a:	4b66      	ldr	r3, [pc, #408]	; (800dba4 <Adachi_go_back+0x26c>)
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	461c      	mov	r4, r3
 800da10:	4b65      	ldr	r3, [pc, #404]	; (800dba8 <Adachi_go_back+0x270>)
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	4618      	mov	r0, r3
 800da16:	4966      	ldr	r1, [pc, #408]	; (800dbb0 <Adachi_go_back+0x278>)
 800da18:	00a3      	lsls	r3, r4, #2
 800da1a:	440b      	add	r3, r1
 800da1c:	4403      	add	r3, r0
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	429a      	cmp	r2, r3
 800da22:	d90f      	bls.n	800da44 <Adachi_go_back+0x10c>
 800da24:	4b5f      	ldr	r3, [pc, #380]	; (800dba4 <Adachi_go_back+0x26c>)
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d00b      	beq.n	800da44 <Adachi_go_back+0x10c>
			  //左西
			  L_turn_select();
 800da2c:	f7fe f8dc 	bl	800bbe8 <L_turn_select>
			  my_direction = west;
 800da30:	4b5b      	ldr	r3, [pc, #364]	; (800dba0 <Adachi_go_back+0x268>)
 800da32:	2203      	movs	r2, #3
 800da34:	701a      	strb	r2, [r3, #0]
		      x--;
 800da36:	4b5b      	ldr	r3, [pc, #364]	; (800dba4 <Adachi_go_back+0x26c>)
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	3b01      	subs	r3, #1
 800da3c:	b2da      	uxtb	r2, r3
 800da3e:	4b59      	ldr	r3, [pc, #356]	; (800dba4 <Adachi_go_back+0x26c>)
 800da40:	701a      	strb	r2, [r3, #0]
 800da42:	e071      	b.n	800db28 <Adachi_go_back+0x1f0>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] > walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800da44:	4b57      	ldr	r3, [pc, #348]	; (800dba4 <Adachi_go_back+0x26c>)
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	4618      	mov	r0, r3
 800da4a:	4b57      	ldr	r3, [pc, #348]	; (800dba8 <Adachi_go_back+0x270>)
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	4619      	mov	r1, r3
 800da50:	4a56      	ldr	r2, [pc, #344]	; (800dbac <Adachi_go_back+0x274>)
 800da52:	0083      	lsls	r3, r0, #2
 800da54:	440b      	add	r3, r1
 800da56:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800da5a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	2b00      	cmp	r3, #0
 800da62:	d127      	bne.n	800dab4 <Adachi_go_back+0x17c>
 800da64:	4b4f      	ldr	r3, [pc, #316]	; (800dba4 <Adachi_go_back+0x26c>)
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	3301      	adds	r3, #1
 800da6a:	4a4f      	ldr	r2, [pc, #316]	; (800dba8 <Adachi_go_back+0x270>)
 800da6c:	7812      	ldrb	r2, [r2, #0]
 800da6e:	4611      	mov	r1, r2
 800da70:	4a4f      	ldr	r2, [pc, #316]	; (800dbb0 <Adachi_go_back+0x278>)
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	4413      	add	r3, r2
 800da76:	440b      	add	r3, r1
 800da78:	781a      	ldrb	r2, [r3, #0]
 800da7a:	4b4a      	ldr	r3, [pc, #296]	; (800dba4 <Adachi_go_back+0x26c>)
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	461c      	mov	r4, r3
 800da80:	4b49      	ldr	r3, [pc, #292]	; (800dba8 <Adachi_go_back+0x270>)
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	4618      	mov	r0, r3
 800da86:	494a      	ldr	r1, [pc, #296]	; (800dbb0 <Adachi_go_back+0x278>)
 800da88:	00a3      	lsls	r3, r4, #2
 800da8a:	440b      	add	r3, r1
 800da8c:	4403      	add	r3, r0
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	429a      	cmp	r2, r3
 800da92:	d90f      	bls.n	800dab4 <Adachi_go_back+0x17c>
 800da94:	4b43      	ldr	r3, [pc, #268]	; (800dba4 <Adachi_go_back+0x26c>)
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	2b02      	cmp	r3, #2
 800da9a:	d80b      	bhi.n	800dab4 <Adachi_go_back+0x17c>
			  //右東
			  R_turn_select();
 800da9c:	f7fe f854 	bl	800bb48 <R_turn_select>
	          my_direction = east;
 800daa0:	4b3f      	ldr	r3, [pc, #252]	; (800dba0 <Adachi_go_back+0x268>)
 800daa2:	2201      	movs	r2, #1
 800daa4:	701a      	strb	r2, [r3, #0]
	          x++;
 800daa6:	4b3f      	ldr	r3, [pc, #252]	; (800dba4 <Adachi_go_back+0x26c>)
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	3301      	adds	r3, #1
 800daac:	b2da      	uxtb	r2, r3
 800daae:	4b3d      	ldr	r3, [pc, #244]	; (800dba4 <Adachi_go_back+0x26c>)
 800dab0:	701a      	strb	r2, [r3, #0]
 800dab2:	e039      	b.n	800db28 <Adachi_go_back+0x1f0>
		  }
		  else {
			  //後南
	          Decelerate();
 800dab4:	f7fd f980 	bl	800adb8 <Decelerate>
	          for(int i=0;i < WAIT;i++);
 800dab8:	2300      	movs	r3, #0
 800daba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dabc:	e002      	b.n	800dac4 <Adachi_go_back+0x18c>
 800dabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac0:	3301      	adds	r3, #1
 800dac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac6:	f247 522f 	movw	r2, #29999	; 0x752f
 800daca:	4293      	cmp	r3, r2
 800dacc:	ddf7      	ble.n	800dabe <Adachi_go_back+0x186>

	          if(mode.execution == 1)
 800dace:	4b33      	ldr	r3, [pc, #204]	; (800db9c <Adachi_go_back+0x264>)
 800dad0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d101      	bne.n	800dadc <Adachi_go_back+0x1a4>
	        	  Motor_PWM_Stop();
 800dad8:	f7fc faea 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800dadc:	f7fd ff50 	bl	800b980 <rotate180>
	  	      for(int i=0;i < WAIT;i++);;
 800dae0:	2300      	movs	r3, #0
 800dae2:	62bb      	str	r3, [r7, #40]	; 0x28
 800dae4:	e002      	b.n	800daec <Adachi_go_back+0x1b4>
 800dae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae8:	3301      	adds	r3, #1
 800daea:	62bb      	str	r3, [r7, #40]	; 0x28
 800daec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daee:	f247 522f 	movw	r2, #29999	; 0x752f
 800daf2:	4293      	cmp	r3, r2
 800daf4:	ddf7      	ble.n	800dae6 <Adachi_go_back+0x1ae>
	  	      back_calib();
 800daf6:	f7fd ffbf 	bl	800ba78 <back_calib>
	  	      for(int i=0;i < WAIT;i++);
 800dafa:	2300      	movs	r3, #0
 800dafc:	627b      	str	r3, [r7, #36]	; 0x24
 800dafe:	e002      	b.n	800db06 <Adachi_go_back+0x1ce>
 800db00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db02:	3301      	adds	r3, #1
 800db04:	627b      	str	r3, [r7, #36]	; 0x24
 800db06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db08:	f247 522f 	movw	r2, #29999	; 0x752f
 800db0c:	4293      	cmp	r3, r2
 800db0e:	ddf7      	ble.n	800db00 <Adachi_go_back+0x1c8>
	       	  Start_Accel();
 800db10:	f7fd f84a 	bl	800aba8 <Start_Accel>
	       	  my_direction = south;
 800db14:	4b22      	ldr	r3, [pc, #136]	; (800dba0 <Adachi_go_back+0x268>)
 800db16:	2202      	movs	r2, #2
 800db18:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800db1a:	4b23      	ldr	r3, [pc, #140]	; (800dba8 <Adachi_go_back+0x270>)
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	3b01      	subs	r3, #1
 800db20:	b2da      	uxtb	r2, r3
 800db22:	4b21      	ldr	r3, [pc, #132]	; (800dba8 <Adachi_go_back+0x270>)
 800db24:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800db26:	e2d1      	b.n	800e0cc <Adachi_go_back+0x794>
 800db28:	e2d0      	b.n	800e0cc <Adachi_go_back+0x794>

	  case east:

		  if(wall[x][y].east == NOWALL && walk_map[x+1][y] > walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800db2a:	4b1e      	ldr	r3, [pc, #120]	; (800dba4 <Adachi_go_back+0x26c>)
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	4618      	mov	r0, r3
 800db30:	4b1d      	ldr	r3, [pc, #116]	; (800dba8 <Adachi_go_back+0x270>)
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	4619      	mov	r1, r3
 800db36:	4a1d      	ldr	r2, [pc, #116]	; (800dbac <Adachi_go_back+0x274>)
 800db38:	0083      	lsls	r3, r0, #2
 800db3a:	440b      	add	r3, r1
 800db3c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800db40:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800db44:	b2db      	uxtb	r3, r3
 800db46:	2b00      	cmp	r3, #0
 800db48:	d134      	bne.n	800dbb4 <Adachi_go_back+0x27c>
 800db4a:	4b16      	ldr	r3, [pc, #88]	; (800dba4 <Adachi_go_back+0x26c>)
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	3301      	adds	r3, #1
 800db50:	4a15      	ldr	r2, [pc, #84]	; (800dba8 <Adachi_go_back+0x270>)
 800db52:	7812      	ldrb	r2, [r2, #0]
 800db54:	4611      	mov	r1, r2
 800db56:	4a16      	ldr	r2, [pc, #88]	; (800dbb0 <Adachi_go_back+0x278>)
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	4413      	add	r3, r2
 800db5c:	440b      	add	r3, r1
 800db5e:	781a      	ldrb	r2, [r3, #0]
 800db60:	4b10      	ldr	r3, [pc, #64]	; (800dba4 <Adachi_go_back+0x26c>)
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	461c      	mov	r4, r3
 800db66:	4b10      	ldr	r3, [pc, #64]	; (800dba8 <Adachi_go_back+0x270>)
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	4618      	mov	r0, r3
 800db6c:	4910      	ldr	r1, [pc, #64]	; (800dbb0 <Adachi_go_back+0x278>)
 800db6e:	00a3      	lsls	r3, r4, #2
 800db70:	440b      	add	r3, r1
 800db72:	4403      	add	r3, r0
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	429a      	cmp	r2, r3
 800db78:	d91c      	bls.n	800dbb4 <Adachi_go_back+0x27c>
 800db7a:	4b0a      	ldr	r3, [pc, #40]	; (800dba4 <Adachi_go_back+0x26c>)
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	2b02      	cmp	r3, #2
 800db80:	d818      	bhi.n	800dbb4 <Adachi_go_back+0x27c>
			  //前東
			  straight();
 800db82:	f7fd f9c5 	bl	800af10 <straight>
	       	  my_direction = east;
 800db86:	4b06      	ldr	r3, [pc, #24]	; (800dba0 <Adachi_go_back+0x268>)
 800db88:	2201      	movs	r2, #1
 800db8a:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800db8c:	4b05      	ldr	r3, [pc, #20]	; (800dba4 <Adachi_go_back+0x26c>)
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	3301      	adds	r3, #1
 800db92:	b2da      	uxtb	r2, r3
 800db94:	4b03      	ldr	r3, [pc, #12]	; (800dba4 <Adachi_go_back+0x26c>)
 800db96:	701a      	strb	r2, [r3, #0]
 800db98:	e0b6      	b.n	800dd08 <Adachi_go_back+0x3d0>
 800db9a:	bf00      	nop
 800db9c:	20000068 	.word	0x20000068
 800dba0:	2000e122 	.word	0x2000e122
 800dba4:	20009f6c 	.word	0x20009f6c
 800dba8:	20009f6d 	.word	0x20009f6d
 800dbac:	2001a6d8 	.word	0x2001a6d8
 800dbb0:	2001a268 	.word	0x2001a268
		  }
		  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] > walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800dbb4:	4b8d      	ldr	r3, [pc, #564]	; (800ddec <Adachi_go_back+0x4b4>)
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	4b8d      	ldr	r3, [pc, #564]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	4a8c      	ldr	r2, [pc, #560]	; (800ddf4 <Adachi_go_back+0x4bc>)
 800dbc2:	0083      	lsls	r3, r0, #2
 800dbc4:	440b      	add	r3, r1
 800dbc6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dbca:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d127      	bne.n	800dc24 <Adachi_go_back+0x2ec>
 800dbd4:	4b85      	ldr	r3, [pc, #532]	; (800ddec <Adachi_go_back+0x4b4>)
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	461a      	mov	r2, r3
 800dbda:	4b85      	ldr	r3, [pc, #532]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	4985      	ldr	r1, [pc, #532]	; (800ddf8 <Adachi_go_back+0x4c0>)
 800dbe2:	0092      	lsls	r2, r2, #2
 800dbe4:	440a      	add	r2, r1
 800dbe6:	4413      	add	r3, r2
 800dbe8:	781a      	ldrb	r2, [r3, #0]
 800dbea:	4b80      	ldr	r3, [pc, #512]	; (800ddec <Adachi_go_back+0x4b4>)
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	461c      	mov	r4, r3
 800dbf0:	4b7f      	ldr	r3, [pc, #508]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	4980      	ldr	r1, [pc, #512]	; (800ddf8 <Adachi_go_back+0x4c0>)
 800dbf8:	00a3      	lsls	r3, r4, #2
 800dbfa:	440b      	add	r3, r1
 800dbfc:	4403      	add	r3, r0
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d90f      	bls.n	800dc24 <Adachi_go_back+0x2ec>
 800dc04:	4b7a      	ldr	r3, [pc, #488]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	2b02      	cmp	r3, #2
 800dc0a:	d80b      	bhi.n	800dc24 <Adachi_go_back+0x2ec>
			  //左�?
			  L_turn_select();
 800dc0c:	f7fd ffec 	bl	800bbe8 <L_turn_select>
	       	  my_direction = north;
 800dc10:	4b7a      	ldr	r3, [pc, #488]	; (800ddfc <Adachi_go_back+0x4c4>)
 800dc12:	2200      	movs	r2, #0
 800dc14:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800dc16:	4b76      	ldr	r3, [pc, #472]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	b2da      	uxtb	r2, r3
 800dc1e:	4b74      	ldr	r3, [pc, #464]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dc20:	701a      	strb	r2, [r3, #0]
 800dc22:	e071      	b.n	800dd08 <Adachi_go_back+0x3d0>
		  }
		  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] > walk_map[x][y] && y > 0){
 800dc24:	4b71      	ldr	r3, [pc, #452]	; (800ddec <Adachi_go_back+0x4b4>)
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	4b71      	ldr	r3, [pc, #452]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	4619      	mov	r1, r3
 800dc30:	4a70      	ldr	r2, [pc, #448]	; (800ddf4 <Adachi_go_back+0x4bc>)
 800dc32:	0083      	lsls	r3, r0, #2
 800dc34:	440b      	add	r3, r1
 800dc36:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dc3a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d127      	bne.n	800dc94 <Adachi_go_back+0x35c>
 800dc44:	4b69      	ldr	r3, [pc, #420]	; (800ddec <Adachi_go_back+0x4b4>)
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	461a      	mov	r2, r3
 800dc4a:	4b69      	ldr	r3, [pc, #420]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	4969      	ldr	r1, [pc, #420]	; (800ddf8 <Adachi_go_back+0x4c0>)
 800dc52:	0092      	lsls	r2, r2, #2
 800dc54:	440a      	add	r2, r1
 800dc56:	4413      	add	r3, r2
 800dc58:	781a      	ldrb	r2, [r3, #0]
 800dc5a:	4b64      	ldr	r3, [pc, #400]	; (800ddec <Adachi_go_back+0x4b4>)
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	461c      	mov	r4, r3
 800dc60:	4b63      	ldr	r3, [pc, #396]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	4618      	mov	r0, r3
 800dc66:	4964      	ldr	r1, [pc, #400]	; (800ddf8 <Adachi_go_back+0x4c0>)
 800dc68:	00a3      	lsls	r3, r4, #2
 800dc6a:	440b      	add	r3, r1
 800dc6c:	4403      	add	r3, r0
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d90f      	bls.n	800dc94 <Adachi_go_back+0x35c>
 800dc74:	4b5e      	ldr	r3, [pc, #376]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00b      	beq.n	800dc94 <Adachi_go_back+0x35c>
			  //右�?
			  R_turn_select();
 800dc7c:	f7fd ff64 	bl	800bb48 <R_turn_select>
	       	  my_direction = south;
 800dc80:	4b5e      	ldr	r3, [pc, #376]	; (800ddfc <Adachi_go_back+0x4c4>)
 800dc82:	2202      	movs	r2, #2
 800dc84:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800dc86:	4b5a      	ldr	r3, [pc, #360]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	b2da      	uxtb	r2, r3
 800dc8e:	4b58      	ldr	r3, [pc, #352]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dc90:	701a      	strb	r2, [r3, #0]
 800dc92:	e039      	b.n	800dd08 <Adachi_go_back+0x3d0>
		  }
		  else {
			  //後西
	          Decelerate();
 800dc94:	f7fd f890 	bl	800adb8 <Decelerate>
	          for(int i=0;i < WAIT;i++);
 800dc98:	2300      	movs	r3, #0
 800dc9a:	623b      	str	r3, [r7, #32]
 800dc9c:	e002      	b.n	800dca4 <Adachi_go_back+0x36c>
 800dc9e:	6a3b      	ldr	r3, [r7, #32]
 800dca0:	3301      	adds	r3, #1
 800dca2:	623b      	str	r3, [r7, #32]
 800dca4:	6a3b      	ldr	r3, [r7, #32]
 800dca6:	f247 522f 	movw	r2, #29999	; 0x752f
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	ddf7      	ble.n	800dc9e <Adachi_go_back+0x366>

	          if(mode.execution == 1)
 800dcae:	4b54      	ldr	r3, [pc, #336]	; (800de00 <Adachi_go_back+0x4c8>)
 800dcb0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d101      	bne.n	800dcbc <Adachi_go_back+0x384>
	        	  Motor_PWM_Stop();
 800dcb8:	f7fc f9fa 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800dcbc:	f7fd fe60 	bl	800b980 <rotate180>
	  	      for(int i=0;i < WAIT;i++);
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	61fb      	str	r3, [r7, #28]
 800dcc4:	e002      	b.n	800dccc <Adachi_go_back+0x394>
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	3301      	adds	r3, #1
 800dcca:	61fb      	str	r3, [r7, #28]
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	f247 522f 	movw	r2, #29999	; 0x752f
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	ddf7      	ble.n	800dcc6 <Adachi_go_back+0x38e>
	  	      back_calib();
 800dcd6:	f7fd fecf 	bl	800ba78 <back_calib>
	  	      for(int i=0;i < WAIT;i++);
 800dcda:	2300      	movs	r3, #0
 800dcdc:	61bb      	str	r3, [r7, #24]
 800dcde:	e002      	b.n	800dce6 <Adachi_go_back+0x3ae>
 800dce0:	69bb      	ldr	r3, [r7, #24]
 800dce2:	3301      	adds	r3, #1
 800dce4:	61bb      	str	r3, [r7, #24]
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	f247 522f 	movw	r2, #29999	; 0x752f
 800dcec:	4293      	cmp	r3, r2
 800dcee:	ddf7      	ble.n	800dce0 <Adachi_go_back+0x3a8>
	       	  Start_Accel();
 800dcf0:	f7fc ff5a 	bl	800aba8 <Start_Accel>

	       	  my_direction = west;
 800dcf4:	4b41      	ldr	r3, [pc, #260]	; (800ddfc <Adachi_go_back+0x4c4>)
 800dcf6:	2203      	movs	r2, #3
 800dcf8:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800dcfa:	4b3c      	ldr	r3, [pc, #240]	; (800ddec <Adachi_go_back+0x4b4>)
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	4b3a      	ldr	r3, [pc, #232]	; (800ddec <Adachi_go_back+0x4b4>)
 800dd04:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800dd06:	e1e1      	b.n	800e0cc <Adachi_go_back+0x794>
 800dd08:	e1e0      	b.n	800e0cc <Adachi_go_back+0x794>

	  case south:

		  if(wall[x][y].south == NOWALL &&walk_map[x][y-1] > walk_map[x][y] && y > 0){
 800dd0a:	4b38      	ldr	r3, [pc, #224]	; (800ddec <Adachi_go_back+0x4b4>)
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	4618      	mov	r0, r3
 800dd10:	4b37      	ldr	r3, [pc, #220]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	4619      	mov	r1, r3
 800dd16:	4a37      	ldr	r2, [pc, #220]	; (800ddf4 <Adachi_go_back+0x4bc>)
 800dd18:	0083      	lsls	r3, r0, #2
 800dd1a:	440b      	add	r3, r1
 800dd1c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dd20:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d127      	bne.n	800dd7a <Adachi_go_back+0x442>
 800dd2a:	4b30      	ldr	r3, [pc, #192]	; (800ddec <Adachi_go_back+0x4b4>)
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	461a      	mov	r2, r3
 800dd30:	4b2f      	ldr	r3, [pc, #188]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	3b01      	subs	r3, #1
 800dd36:	4930      	ldr	r1, [pc, #192]	; (800ddf8 <Adachi_go_back+0x4c0>)
 800dd38:	0092      	lsls	r2, r2, #2
 800dd3a:	440a      	add	r2, r1
 800dd3c:	4413      	add	r3, r2
 800dd3e:	781a      	ldrb	r2, [r3, #0]
 800dd40:	4b2a      	ldr	r3, [pc, #168]	; (800ddec <Adachi_go_back+0x4b4>)
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	461c      	mov	r4, r3
 800dd46:	4b2a      	ldr	r3, [pc, #168]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	492a      	ldr	r1, [pc, #168]	; (800ddf8 <Adachi_go_back+0x4c0>)
 800dd4e:	00a3      	lsls	r3, r4, #2
 800dd50:	440b      	add	r3, r1
 800dd52:	4403      	add	r3, r0
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d90f      	bls.n	800dd7a <Adachi_go_back+0x442>
 800dd5a:	4b25      	ldr	r3, [pc, #148]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00b      	beq.n	800dd7a <Adachi_go_back+0x442>
			  //前南
			  straight();
 800dd62:	f7fd f8d5 	bl	800af10 <straight>
	       	  my_direction = south;
 800dd66:	4b25      	ldr	r3, [pc, #148]	; (800ddfc <Adachi_go_back+0x4c4>)
 800dd68:	2202      	movs	r2, #2
 800dd6a:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800dd6c:	4b20      	ldr	r3, [pc, #128]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	3b01      	subs	r3, #1
 800dd72:	b2da      	uxtb	r2, r3
 800dd74:	4b1e      	ldr	r3, [pc, #120]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dd76:	701a      	strb	r2, [r3, #0]
 800dd78:	e0b6      	b.n	800dee8 <Adachi_go_back+0x5b0>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] > walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800dd7a:	4b1c      	ldr	r3, [pc, #112]	; (800ddec <Adachi_go_back+0x4b4>)
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	4b1b      	ldr	r3, [pc, #108]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	4619      	mov	r1, r3
 800dd86:	4a1b      	ldr	r2, [pc, #108]	; (800ddf4 <Adachi_go_back+0x4bc>)
 800dd88:	0083      	lsls	r3, r0, #2
 800dd8a:	440b      	add	r3, r1
 800dd8c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dd90:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d134      	bne.n	800de04 <Adachi_go_back+0x4cc>
 800dd9a:	4b14      	ldr	r3, [pc, #80]	; (800ddec <Adachi_go_back+0x4b4>)
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	4a13      	ldr	r2, [pc, #76]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800dda2:	7812      	ldrb	r2, [r2, #0]
 800dda4:	4611      	mov	r1, r2
 800dda6:	4a14      	ldr	r2, [pc, #80]	; (800ddf8 <Adachi_go_back+0x4c0>)
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	4413      	add	r3, r2
 800ddac:	440b      	add	r3, r1
 800ddae:	781a      	ldrb	r2, [r3, #0]
 800ddb0:	4b0e      	ldr	r3, [pc, #56]	; (800ddec <Adachi_go_back+0x4b4>)
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	461c      	mov	r4, r3
 800ddb6:	4b0e      	ldr	r3, [pc, #56]	; (800ddf0 <Adachi_go_back+0x4b8>)
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	4618      	mov	r0, r3
 800ddbc:	490e      	ldr	r1, [pc, #56]	; (800ddf8 <Adachi_go_back+0x4c0>)
 800ddbe:	00a3      	lsls	r3, r4, #2
 800ddc0:	440b      	add	r3, r1
 800ddc2:	4403      	add	r3, r0
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d91c      	bls.n	800de04 <Adachi_go_back+0x4cc>
 800ddca:	4b08      	ldr	r3, [pc, #32]	; (800ddec <Adachi_go_back+0x4b4>)
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	2b02      	cmp	r3, #2
 800ddd0:	d818      	bhi.n	800de04 <Adachi_go_back+0x4cc>
			  //左東
			  L_turn_select();
 800ddd2:	f7fd ff09 	bl	800bbe8 <L_turn_select>
	       	  my_direction = east;
 800ddd6:	4b09      	ldr	r3, [pc, #36]	; (800ddfc <Adachi_go_back+0x4c4>)
 800ddd8:	2201      	movs	r2, #1
 800ddda:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800dddc:	4b03      	ldr	r3, [pc, #12]	; (800ddec <Adachi_go_back+0x4b4>)
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	3301      	adds	r3, #1
 800dde2:	b2da      	uxtb	r2, r3
 800dde4:	4b01      	ldr	r3, [pc, #4]	; (800ddec <Adachi_go_back+0x4b4>)
 800dde6:	701a      	strb	r2, [r3, #0]
 800dde8:	e07e      	b.n	800dee8 <Adachi_go_back+0x5b0>
 800ddea:	bf00      	nop
 800ddec:	20009f6c 	.word	0x20009f6c
 800ddf0:	20009f6d 	.word	0x20009f6d
 800ddf4:	2001a6d8 	.word	0x2001a6d8
 800ddf8:	2001a268 	.word	0x2001a268
 800ddfc:	2000e122 	.word	0x2000e122
 800de00:	20000068 	.word	0x20000068
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] > walk_map[x][y] && x > 0){
 800de04:	4ba0      	ldr	r3, [pc, #640]	; (800e088 <Adachi_go_back+0x750>)
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	4618      	mov	r0, r3
 800de0a:	4ba0      	ldr	r3, [pc, #640]	; (800e08c <Adachi_go_back+0x754>)
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	4619      	mov	r1, r3
 800de10:	4a9f      	ldr	r2, [pc, #636]	; (800e090 <Adachi_go_back+0x758>)
 800de12:	0083      	lsls	r3, r0, #2
 800de14:	440b      	add	r3, r1
 800de16:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800de1a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	2b00      	cmp	r3, #0
 800de22:	d127      	bne.n	800de74 <Adachi_go_back+0x53c>
 800de24:	4b98      	ldr	r3, [pc, #608]	; (800e088 <Adachi_go_back+0x750>)
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	3b01      	subs	r3, #1
 800de2a:	4a98      	ldr	r2, [pc, #608]	; (800e08c <Adachi_go_back+0x754>)
 800de2c:	7812      	ldrb	r2, [r2, #0]
 800de2e:	4611      	mov	r1, r2
 800de30:	4a98      	ldr	r2, [pc, #608]	; (800e094 <Adachi_go_back+0x75c>)
 800de32:	009b      	lsls	r3, r3, #2
 800de34:	4413      	add	r3, r2
 800de36:	440b      	add	r3, r1
 800de38:	781a      	ldrb	r2, [r3, #0]
 800de3a:	4b93      	ldr	r3, [pc, #588]	; (800e088 <Adachi_go_back+0x750>)
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	461c      	mov	r4, r3
 800de40:	4b92      	ldr	r3, [pc, #584]	; (800e08c <Adachi_go_back+0x754>)
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	4618      	mov	r0, r3
 800de46:	4993      	ldr	r1, [pc, #588]	; (800e094 <Adachi_go_back+0x75c>)
 800de48:	00a3      	lsls	r3, r4, #2
 800de4a:	440b      	add	r3, r1
 800de4c:	4403      	add	r3, r0
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	429a      	cmp	r2, r3
 800de52:	d90f      	bls.n	800de74 <Adachi_go_back+0x53c>
 800de54:	4b8c      	ldr	r3, [pc, #560]	; (800e088 <Adachi_go_back+0x750>)
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d00b      	beq.n	800de74 <Adachi_go_back+0x53c>
			  //右西
			  R_turn_select();
 800de5c:	f7fd fe74 	bl	800bb48 <R_turn_select>
	       	  my_direction = west;
 800de60:	4b8d      	ldr	r3, [pc, #564]	; (800e098 <Adachi_go_back+0x760>)
 800de62:	2203      	movs	r2, #3
 800de64:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800de66:	4b88      	ldr	r3, [pc, #544]	; (800e088 <Adachi_go_back+0x750>)
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	3b01      	subs	r3, #1
 800de6c:	b2da      	uxtb	r2, r3
 800de6e:	4b86      	ldr	r3, [pc, #536]	; (800e088 <Adachi_go_back+0x750>)
 800de70:	701a      	strb	r2, [r3, #0]
 800de72:	e039      	b.n	800dee8 <Adachi_go_back+0x5b0>
		  }
		  else {
			  //後北
	          Decelerate();
 800de74:	f7fc ffa0 	bl	800adb8 <Decelerate>
	          for(int i=0;i < WAIT;i++);;
 800de78:	2300      	movs	r3, #0
 800de7a:	617b      	str	r3, [r7, #20]
 800de7c:	e002      	b.n	800de84 <Adachi_go_back+0x54c>
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	3301      	adds	r3, #1
 800de82:	617b      	str	r3, [r7, #20]
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	f247 522f 	movw	r2, #29999	; 0x752f
 800de8a:	4293      	cmp	r3, r2
 800de8c:	ddf7      	ble.n	800de7e <Adachi_go_back+0x546>

	          if(mode.execution == 1)
 800de8e:	4b83      	ldr	r3, [pc, #524]	; (800e09c <Adachi_go_back+0x764>)
 800de90:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800de94:	2b01      	cmp	r3, #1
 800de96:	d101      	bne.n	800de9c <Adachi_go_back+0x564>
	        	  Motor_PWM_Stop();
 800de98:	f7fc f90a 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800de9c:	f7fd fd70 	bl	800b980 <rotate180>
	  	      for(int i=0;i < WAIT;i++);;
 800dea0:	2300      	movs	r3, #0
 800dea2:	613b      	str	r3, [r7, #16]
 800dea4:	e002      	b.n	800deac <Adachi_go_back+0x574>
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	3301      	adds	r3, #1
 800deaa:	613b      	str	r3, [r7, #16]
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	f247 522f 	movw	r2, #29999	; 0x752f
 800deb2:	4293      	cmp	r3, r2
 800deb4:	ddf7      	ble.n	800dea6 <Adachi_go_back+0x56e>
	  	      back_calib();
 800deb6:	f7fd fddf 	bl	800ba78 <back_calib>
	  	      for(int i=0;i < WAIT;i++);
 800deba:	2300      	movs	r3, #0
 800debc:	60fb      	str	r3, [r7, #12]
 800debe:	e002      	b.n	800dec6 <Adachi_go_back+0x58e>
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	3301      	adds	r3, #1
 800dec4:	60fb      	str	r3, [r7, #12]
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	f247 522f 	movw	r2, #29999	; 0x752f
 800decc:	4293      	cmp	r3, r2
 800dece:	ddf7      	ble.n	800dec0 <Adachi_go_back+0x588>
	       	  Start_Accel();
 800ded0:	f7fc fe6a 	bl	800aba8 <Start_Accel>

	       	  my_direction = north;
 800ded4:	4b70      	ldr	r3, [pc, #448]	; (800e098 <Adachi_go_back+0x760>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800deda:	4b6c      	ldr	r3, [pc, #432]	; (800e08c <Adachi_go_back+0x754>)
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	3301      	adds	r3, #1
 800dee0:	b2da      	uxtb	r2, r3
 800dee2:	4b6a      	ldr	r3, [pc, #424]	; (800e08c <Adachi_go_back+0x754>)
 800dee4:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800dee6:	e0f1      	b.n	800e0cc <Adachi_go_back+0x794>
 800dee8:	e0f0      	b.n	800e0cc <Adachi_go_back+0x794>

	  case west:

		  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] > walk_map[x][y] && x > 0){
 800deea:	4b67      	ldr	r3, [pc, #412]	; (800e088 <Adachi_go_back+0x750>)
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	4618      	mov	r0, r3
 800def0:	4b66      	ldr	r3, [pc, #408]	; (800e08c <Adachi_go_back+0x754>)
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	4619      	mov	r1, r3
 800def6:	4a66      	ldr	r2, [pc, #408]	; (800e090 <Adachi_go_back+0x758>)
 800def8:	0083      	lsls	r3, r0, #2
 800defa:	440b      	add	r3, r1
 800defc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800df00:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800df04:	b2db      	uxtb	r3, r3
 800df06:	2b00      	cmp	r3, #0
 800df08:	d127      	bne.n	800df5a <Adachi_go_back+0x622>
 800df0a:	4b5f      	ldr	r3, [pc, #380]	; (800e088 <Adachi_go_back+0x750>)
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	3b01      	subs	r3, #1
 800df10:	4a5e      	ldr	r2, [pc, #376]	; (800e08c <Adachi_go_back+0x754>)
 800df12:	7812      	ldrb	r2, [r2, #0]
 800df14:	4611      	mov	r1, r2
 800df16:	4a5f      	ldr	r2, [pc, #380]	; (800e094 <Adachi_go_back+0x75c>)
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	4413      	add	r3, r2
 800df1c:	440b      	add	r3, r1
 800df1e:	781a      	ldrb	r2, [r3, #0]
 800df20:	4b59      	ldr	r3, [pc, #356]	; (800e088 <Adachi_go_back+0x750>)
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	461c      	mov	r4, r3
 800df26:	4b59      	ldr	r3, [pc, #356]	; (800e08c <Adachi_go_back+0x754>)
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	4618      	mov	r0, r3
 800df2c:	4959      	ldr	r1, [pc, #356]	; (800e094 <Adachi_go_back+0x75c>)
 800df2e:	00a3      	lsls	r3, r4, #2
 800df30:	440b      	add	r3, r1
 800df32:	4403      	add	r3, r0
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	429a      	cmp	r2, r3
 800df38:	d90f      	bls.n	800df5a <Adachi_go_back+0x622>
 800df3a:	4b53      	ldr	r3, [pc, #332]	; (800e088 <Adachi_go_back+0x750>)
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d00b      	beq.n	800df5a <Adachi_go_back+0x622>
			  //前西
			  straight();
 800df42:	f7fc ffe5 	bl	800af10 <straight>
	       	  my_direction = west;
 800df46:	4b54      	ldr	r3, [pc, #336]	; (800e098 <Adachi_go_back+0x760>)
 800df48:	2203      	movs	r2, #3
 800df4a:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800df4c:	4b4e      	ldr	r3, [pc, #312]	; (800e088 <Adachi_go_back+0x750>)
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	3b01      	subs	r3, #1
 800df52:	b2da      	uxtb	r2, r3
 800df54:	4b4c      	ldr	r3, [pc, #304]	; (800e088 <Adachi_go_back+0x750>)
 800df56:	701a      	strb	r2, [r3, #0]
 800df58:	e0b6      	b.n	800e0c8 <Adachi_go_back+0x790>
		  }
		  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] > walk_map[x][y] && y > 0){
 800df5a:	4b4b      	ldr	r3, [pc, #300]	; (800e088 <Adachi_go_back+0x750>)
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	4618      	mov	r0, r3
 800df60:	4b4a      	ldr	r3, [pc, #296]	; (800e08c <Adachi_go_back+0x754>)
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	4619      	mov	r1, r3
 800df66:	4a4a      	ldr	r2, [pc, #296]	; (800e090 <Adachi_go_back+0x758>)
 800df68:	0083      	lsls	r3, r0, #2
 800df6a:	440b      	add	r3, r1
 800df6c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800df70:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800df74:	b2db      	uxtb	r3, r3
 800df76:	2b00      	cmp	r3, #0
 800df78:	d127      	bne.n	800dfca <Adachi_go_back+0x692>
 800df7a:	4b43      	ldr	r3, [pc, #268]	; (800e088 <Adachi_go_back+0x750>)
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	461a      	mov	r2, r3
 800df80:	4b42      	ldr	r3, [pc, #264]	; (800e08c <Adachi_go_back+0x754>)
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	3b01      	subs	r3, #1
 800df86:	4943      	ldr	r1, [pc, #268]	; (800e094 <Adachi_go_back+0x75c>)
 800df88:	0092      	lsls	r2, r2, #2
 800df8a:	440a      	add	r2, r1
 800df8c:	4413      	add	r3, r2
 800df8e:	781a      	ldrb	r2, [r3, #0]
 800df90:	4b3d      	ldr	r3, [pc, #244]	; (800e088 <Adachi_go_back+0x750>)
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	461c      	mov	r4, r3
 800df96:	4b3d      	ldr	r3, [pc, #244]	; (800e08c <Adachi_go_back+0x754>)
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	4618      	mov	r0, r3
 800df9c:	493d      	ldr	r1, [pc, #244]	; (800e094 <Adachi_go_back+0x75c>)
 800df9e:	00a3      	lsls	r3, r4, #2
 800dfa0:	440b      	add	r3, r1
 800dfa2:	4403      	add	r3, r0
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d90f      	bls.n	800dfca <Adachi_go_back+0x692>
 800dfaa:	4b38      	ldr	r3, [pc, #224]	; (800e08c <Adachi_go_back+0x754>)
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d00b      	beq.n	800dfca <Adachi_go_back+0x692>
			  //左�?
			  L_turn_select();
 800dfb2:	f7fd fe19 	bl	800bbe8 <L_turn_select>
	       	  my_direction = south;
 800dfb6:	4b38      	ldr	r3, [pc, #224]	; (800e098 <Adachi_go_back+0x760>)
 800dfb8:	2202      	movs	r2, #2
 800dfba:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800dfbc:	4b33      	ldr	r3, [pc, #204]	; (800e08c <Adachi_go_back+0x754>)
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	3b01      	subs	r3, #1
 800dfc2:	b2da      	uxtb	r2, r3
 800dfc4:	4b31      	ldr	r3, [pc, #196]	; (800e08c <Adachi_go_back+0x754>)
 800dfc6:	701a      	strb	r2, [r3, #0]
 800dfc8:	e07e      	b.n	800e0c8 <Adachi_go_back+0x790>
		  }
		  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] > walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800dfca:	4b2f      	ldr	r3, [pc, #188]	; (800e088 <Adachi_go_back+0x750>)
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	4618      	mov	r0, r3
 800dfd0:	4b2e      	ldr	r3, [pc, #184]	; (800e08c <Adachi_go_back+0x754>)
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	4a2e      	ldr	r2, [pc, #184]	; (800e090 <Adachi_go_back+0x758>)
 800dfd8:	0083      	lsls	r3, r0, #2
 800dfda:	440b      	add	r3, r1
 800dfdc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dfe0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800dfe4:	b2db      	uxtb	r3, r3
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d127      	bne.n	800e03a <Adachi_go_back+0x702>
 800dfea:	4b27      	ldr	r3, [pc, #156]	; (800e088 <Adachi_go_back+0x750>)
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	461a      	mov	r2, r3
 800dff0:	4b26      	ldr	r3, [pc, #152]	; (800e08c <Adachi_go_back+0x754>)
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	3301      	adds	r3, #1
 800dff6:	4927      	ldr	r1, [pc, #156]	; (800e094 <Adachi_go_back+0x75c>)
 800dff8:	0092      	lsls	r2, r2, #2
 800dffa:	440a      	add	r2, r1
 800dffc:	4413      	add	r3, r2
 800dffe:	781a      	ldrb	r2, [r3, #0]
 800e000:	4b21      	ldr	r3, [pc, #132]	; (800e088 <Adachi_go_back+0x750>)
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	461c      	mov	r4, r3
 800e006:	4b21      	ldr	r3, [pc, #132]	; (800e08c <Adachi_go_back+0x754>)
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	4618      	mov	r0, r3
 800e00c:	4921      	ldr	r1, [pc, #132]	; (800e094 <Adachi_go_back+0x75c>)
 800e00e:	00a3      	lsls	r3, r4, #2
 800e010:	440b      	add	r3, r1
 800e012:	4403      	add	r3, r0
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	429a      	cmp	r2, r3
 800e018:	d90f      	bls.n	800e03a <Adachi_go_back+0x702>
 800e01a:	4b1c      	ldr	r3, [pc, #112]	; (800e08c <Adachi_go_back+0x754>)
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	2b02      	cmp	r3, #2
 800e020:	d80b      	bhi.n	800e03a <Adachi_go_back+0x702>
			  //右�?
			  R_turn_select();
 800e022:	f7fd fd91 	bl	800bb48 <R_turn_select>
	       	  my_direction = north;
 800e026:	4b1c      	ldr	r3, [pc, #112]	; (800e098 <Adachi_go_back+0x760>)
 800e028:	2200      	movs	r2, #0
 800e02a:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800e02c:	4b17      	ldr	r3, [pc, #92]	; (800e08c <Adachi_go_back+0x754>)
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	3301      	adds	r3, #1
 800e032:	b2da      	uxtb	r2, r3
 800e034:	4b15      	ldr	r3, [pc, #84]	; (800e08c <Adachi_go_back+0x754>)
 800e036:	701a      	strb	r2, [r3, #0]
 800e038:	e046      	b.n	800e0c8 <Adachi_go_back+0x790>
=======
 800c888:	4b6b      	ldr	r3, [pc, #428]	; (800ca38 <Adachi_judge+0x6f0>)
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	4618      	mov	r0, r3
 800c88e:	4b6b      	ldr	r3, [pc, #428]	; (800ca3c <Adachi_judge+0x6f4>)
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	4619      	mov	r1, r3
 800c894:	4a6a      	ldr	r2, [pc, #424]	; (800ca40 <Adachi_judge+0x6f8>)
 800c896:	0083      	lsls	r3, r0, #2
 800c898:	440b      	add	r3, r1
 800c89a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c89e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d127      	bne.n	800c8f8 <Adachi_judge+0x5b0>
 800c8a8:	4b63      	ldr	r3, [pc, #396]	; (800ca38 <Adachi_judge+0x6f0>)
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	3b01      	subs	r3, #1
 800c8ae:	4a63      	ldr	r2, [pc, #396]	; (800ca3c <Adachi_judge+0x6f4>)
 800c8b0:	7812      	ldrb	r2, [r2, #0]
 800c8b2:	4611      	mov	r1, r2
 800c8b4:	4a63      	ldr	r2, [pc, #396]	; (800ca44 <Adachi_judge+0x6fc>)
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	440b      	add	r3, r1
 800c8bc:	781a      	ldrb	r2, [r3, #0]
 800c8be:	4b5e      	ldr	r3, [pc, #376]	; (800ca38 <Adachi_judge+0x6f0>)
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	461c      	mov	r4, r3
 800c8c4:	4b5d      	ldr	r3, [pc, #372]	; (800ca3c <Adachi_judge+0x6f4>)
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	495e      	ldr	r1, [pc, #376]	; (800ca44 <Adachi_judge+0x6fc>)
 800c8cc:	00a3      	lsls	r3, r4, #2
 800c8ce:	440b      	add	r3, r1
 800c8d0:	4403      	add	r3, r0
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d20f      	bcs.n	800c8f8 <Adachi_judge+0x5b0>
 800c8d8:	4b57      	ldr	r3, [pc, #348]	; (800ca38 <Adachi_judge+0x6f0>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d00b      	beq.n	800c8f8 <Adachi_judge+0x5b0>
			  //前西
			  straight();
 800c8e0:	f7fe fb1e 	bl	800af20 <straight>
	       	  my_direction = west;
 800c8e4:	4b58      	ldr	r3, [pc, #352]	; (800ca48 <Adachi_judge+0x700>)
 800c8e6:	2203      	movs	r2, #3
 800c8e8:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800c8ea:	4b53      	ldr	r3, [pc, #332]	; (800ca38 <Adachi_judge+0x6f0>)
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	b2da      	uxtb	r2, r3
 800c8f2:	4b51      	ldr	r3, [pc, #324]	; (800ca38 <Adachi_judge+0x6f0>)
 800c8f4:	701a      	strb	r2, [r3, #0]
 800c8f6:	e094      	b.n	800ca22 <Adachi_judge+0x6da>
		  }
		  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800c8f8:	4b4f      	ldr	r3, [pc, #316]	; (800ca38 <Adachi_judge+0x6f0>)
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	4b4f      	ldr	r3, [pc, #316]	; (800ca3c <Adachi_judge+0x6f4>)
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	4619      	mov	r1, r3
 800c904:	4a4e      	ldr	r2, [pc, #312]	; (800ca40 <Adachi_judge+0x6f8>)
 800c906:	0083      	lsls	r3, r0, #2
 800c908:	440b      	add	r3, r1
 800c90a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c90e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c912:	b2db      	uxtb	r3, r3
 800c914:	2b00      	cmp	r3, #0
 800c916:	d127      	bne.n	800c968 <Adachi_judge+0x620>
 800c918:	4b47      	ldr	r3, [pc, #284]	; (800ca38 <Adachi_judge+0x6f0>)
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	461a      	mov	r2, r3
 800c91e:	4b47      	ldr	r3, [pc, #284]	; (800ca3c <Adachi_judge+0x6f4>)
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	3b01      	subs	r3, #1
 800c924:	4947      	ldr	r1, [pc, #284]	; (800ca44 <Adachi_judge+0x6fc>)
 800c926:	0092      	lsls	r2, r2, #2
 800c928:	440a      	add	r2, r1
 800c92a:	4413      	add	r3, r2
 800c92c:	781a      	ldrb	r2, [r3, #0]
 800c92e:	4b42      	ldr	r3, [pc, #264]	; (800ca38 <Adachi_judge+0x6f0>)
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	461c      	mov	r4, r3
 800c934:	4b41      	ldr	r3, [pc, #260]	; (800ca3c <Adachi_judge+0x6f4>)
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	4618      	mov	r0, r3
 800c93a:	4942      	ldr	r1, [pc, #264]	; (800ca44 <Adachi_judge+0x6fc>)
 800c93c:	00a3      	lsls	r3, r4, #2
 800c93e:	440b      	add	r3, r1
 800c940:	4403      	add	r3, r0
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	429a      	cmp	r2, r3
 800c946:	d20f      	bcs.n	800c968 <Adachi_judge+0x620>
 800c948:	4b3c      	ldr	r3, [pc, #240]	; (800ca3c <Adachi_judge+0x6f4>)
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d00b      	beq.n	800c968 <Adachi_judge+0x620>
			  //左�?
			  L_turn_select();
 800c950:	f7ff f94a 	bl	800bbe8 <L_turn_select>
	       	  my_direction = south;
 800c954:	4b3c      	ldr	r3, [pc, #240]	; (800ca48 <Adachi_judge+0x700>)
 800c956:	2202      	movs	r2, #2
 800c958:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800c95a:	4b38      	ldr	r3, [pc, #224]	; (800ca3c <Adachi_judge+0x6f4>)
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	3b01      	subs	r3, #1
 800c960:	b2da      	uxtb	r2, r3
 800c962:	4b36      	ldr	r3, [pc, #216]	; (800ca3c <Adachi_judge+0x6f4>)
 800c964:	701a      	strb	r2, [r3, #0]
 800c966:	e05c      	b.n	800ca22 <Adachi_judge+0x6da>
		  }
		  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800c968:	4b33      	ldr	r3, [pc, #204]	; (800ca38 <Adachi_judge+0x6f0>)
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	4618      	mov	r0, r3
 800c96e:	4b33      	ldr	r3, [pc, #204]	; (800ca3c <Adachi_judge+0x6f4>)
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	4619      	mov	r1, r3
 800c974:	4a32      	ldr	r2, [pc, #200]	; (800ca40 <Adachi_judge+0x6f8>)
 800c976:	0083      	lsls	r3, r0, #2
 800c978:	440b      	add	r3, r1
 800c97a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c97e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c982:	b2db      	uxtb	r3, r3
 800c984:	2b00      	cmp	r3, #0
 800c986:	d127      	bne.n	800c9d8 <Adachi_judge+0x690>
 800c988:	4b2b      	ldr	r3, [pc, #172]	; (800ca38 <Adachi_judge+0x6f0>)
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	461a      	mov	r2, r3
 800c98e:	4b2b      	ldr	r3, [pc, #172]	; (800ca3c <Adachi_judge+0x6f4>)
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	3301      	adds	r3, #1
 800c994:	492b      	ldr	r1, [pc, #172]	; (800ca44 <Adachi_judge+0x6fc>)
 800c996:	0092      	lsls	r2, r2, #2
 800c998:	440a      	add	r2, r1
 800c99a:	4413      	add	r3, r2
 800c99c:	781a      	ldrb	r2, [r3, #0]
 800c99e:	4b26      	ldr	r3, [pc, #152]	; (800ca38 <Adachi_judge+0x6f0>)
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	461c      	mov	r4, r3
 800c9a4:	4b25      	ldr	r3, [pc, #148]	; (800ca3c <Adachi_judge+0x6f4>)
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	4926      	ldr	r1, [pc, #152]	; (800ca44 <Adachi_judge+0x6fc>)
 800c9ac:	00a3      	lsls	r3, r4, #2
 800c9ae:	440b      	add	r3, r1
 800c9b0:	4403      	add	r3, r0
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d20f      	bcs.n	800c9d8 <Adachi_judge+0x690>
 800c9b8:	4b20      	ldr	r3, [pc, #128]	; (800ca3c <Adachi_judge+0x6f4>)
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d80b      	bhi.n	800c9d8 <Adachi_judge+0x690>
			  //右�?
			  R_turn_select();
 800c9c0:	f7ff f8ce 	bl	800bb60 <R_turn_select>
	       	  my_direction = north;
 800c9c4:	4b20      	ldr	r3, [pc, #128]	; (800ca48 <Adachi_judge+0x700>)
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800c9ca:	4b1c      	ldr	r3, [pc, #112]	; (800ca3c <Adachi_judge+0x6f4>)
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	b2da      	uxtb	r2, r3
 800c9d2:	4b1a      	ldr	r3, [pc, #104]	; (800ca3c <Adachi_judge+0x6f4>)
 800c9d4:	701a      	strb	r2, [r3, #0]
 800c9d6:	e024      	b.n	800ca22 <Adachi_judge+0x6da>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
		  }
		  else {
			  //後東
	          Decelerate();
<<<<<<< HEAD
 800e03a:	f7fc febd 	bl	800adb8 <Decelerate>
	          for(int i=0;i < WAIT;i++);;
 800e03e:	2300      	movs	r3, #0
 800e040:	60bb      	str	r3, [r7, #8]
 800e042:	e002      	b.n	800e04a <Adachi_go_back+0x712>
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	3301      	adds	r3, #1
 800e048:	60bb      	str	r3, [r7, #8]
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	f247 522f 	movw	r2, #29999	; 0x752f
 800e050:	4293      	cmp	r3, r2
 800e052:	ddf7      	ble.n	800e044 <Adachi_go_back+0x70c>

	          if(mode.execution == 1)
 800e054:	4b11      	ldr	r3, [pc, #68]	; (800e09c <Adachi_go_back+0x764>)
 800e056:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d101      	bne.n	800e062 <Adachi_go_back+0x72a>
	        	  Motor_PWM_Stop();
 800e05e:	f7fc f827 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800e062:	f7fd fc8d 	bl	800b980 <rotate180>
	  	      for(int i=0;i < WAIT;i++);;
 800e066:	2300      	movs	r3, #0
 800e068:	607b      	str	r3, [r7, #4]
 800e06a:	e002      	b.n	800e072 <Adachi_go_back+0x73a>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	3301      	adds	r3, #1
 800e070:	607b      	str	r3, [r7, #4]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f247 522f 	movw	r2, #29999	; 0x752f
 800e078:	4293      	cmp	r3, r2
 800e07a:	ddf7      	ble.n	800e06c <Adachi_go_back+0x734>
	  	      back_calib();
 800e07c:	f7fd fcfc 	bl	800ba78 <back_calib>
	  	      for(int i=0;i < WAIT;i++);
 800e080:	2300      	movs	r3, #0
 800e082:	603b      	str	r3, [r7, #0]
 800e084:	e00f      	b.n	800e0a6 <Adachi_go_back+0x76e>
 800e086:	bf00      	nop
 800e088:	20009f6c 	.word	0x20009f6c
 800e08c:	20009f6d 	.word	0x20009f6d
 800e090:	2001a6d8 	.word	0x2001a6d8
 800e094:	2001a268 	.word	0x2001a268
 800e098:	2000e122 	.word	0x2000e122
 800e09c:	20000068 	.word	0x20000068
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	603b      	str	r3, [r7, #0]
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	f247 522f 	movw	r2, #29999	; 0x752f
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	ddf7      	ble.n	800e0a0 <Adachi_go_back+0x768>
	       	  Start_Accel();
 800e0b0:	f7fc fd7a 	bl	800aba8 <Start_Accel>

	       	  my_direction = east;
 800e0b4:	4b07      	ldr	r3, [pc, #28]	; (800e0d4 <Adachi_go_back+0x79c>)
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800e0ba:	4b07      	ldr	r3, [pc, #28]	; (800e0d8 <Adachi_go_back+0x7a0>)
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	3301      	adds	r3, #1
 800e0c0:	b2da      	uxtb	r2, r3
 800e0c2:	4b05      	ldr	r3, [pc, #20]	; (800e0d8 <Adachi_go_back+0x7a0>)
 800e0c4:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800e0c6:	e001      	b.n	800e0cc <Adachi_go_back+0x794>
 800e0c8:	e000      	b.n	800e0cc <Adachi_go_back+0x794>

	  default:
		  break;
 800e0ca:	bf00      	nop
	  }//swtich end
}
 800e0cc:	bf00      	nop
 800e0ce:	3734      	adds	r7, #52	; 0x34
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd90      	pop	{r4, r7, pc}
 800e0d4:	2000e122 	.word	0x2000e122
 800e0d8:	20009f6c 	.word	0x20009f6c

0800e0dc <Adachi_search>:
void Adachi_search(){
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
=======
 800c9d8:	f7fe f9fa 	bl	800add0 <Decelerate>
	          wait(0.3);
 800c9dc:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800ca30 <Adachi_judge+0x6e8>
 800c9e0:	f7fe f8ca 	bl	800ab78 <wait>

	          if(mode.execution == 1)
 800c9e4:	4b19      	ldr	r3, [pc, #100]	; (800ca4c <Adachi_judge+0x704>)
 800c9e6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d101      	bne.n	800c9f2 <Adachi_judge+0x6aa>
	        	  Motor_PWM_Stop();
 800c9ee:	f7fd fb5f 	bl	800a0b0 <Motor_PWM_Stop>

	  	      rotate180();
 800c9f2:	f7fe ffd3 	bl	800b99c <rotate180>
	  	      wait(0.3);
 800c9f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ca30 <Adachi_judge+0x6e8>
 800c9fa:	f7fe f8bd 	bl	800ab78 <wait>
	  	      back_calib();
 800c9fe:	f7ff f847 	bl	800ba90 <back_calib>
	  	      wait(0.3);
 800ca02:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800ca30 <Adachi_judge+0x6e8>
 800ca06:	f7fe f8b7 	bl	800ab78 <wait>
	       	  Start_Accel();
 800ca0a:	f7fe f8dd 	bl	800abc8 <Start_Accel>

	       	  my_direction = east;
 800ca0e:	4b0e      	ldr	r3, [pc, #56]	; (800ca48 <Adachi_judge+0x700>)
 800ca10:	2201      	movs	r2, #1
 800ca12:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800ca14:	4b08      	ldr	r3, [pc, #32]	; (800ca38 <Adachi_judge+0x6f0>)
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	b2da      	uxtb	r2, r3
 800ca1c:	4b06      	ldr	r3, [pc, #24]	; (800ca38 <Adachi_judge+0x6f0>)
 800ca1e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800ca20:	e001      	b.n	800ca26 <Adachi_judge+0x6de>
 800ca22:	e000      	b.n	800ca26 <Adachi_judge+0x6de>

	  default:
		  break;
 800ca24:	bf00      	nop
	  }//swtich end
}
 800ca26:	bf00      	nop
 800ca28:	bd98      	pop	{r3, r4, r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	f3af 8000 	nop.w
 800ca30:	33333333 	.word	0x33333333
 800ca34:	3fd33333 	.word	0x3fd33333
 800ca38:	20000fc4 	.word	0x20000fc4
 800ca3c:	20000fc5 	.word	0x20000fc5
 800ca40:	20016560 	.word	0x20016560
 800ca44:	200160f0 	.word	0x200160f0
 800ca48:	20005162 	.word	0x20005162
 800ca4c:	20000cf4 	.word	0x20000cf4

0800ca50 <Adachi_search>:
void Adachi_search(){
 800ca50:	b580      	push	{r7, lr}
 800ca52:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	//back_calib();
	/*ここは書籍から引用*/

	//マップ�?�初期�?
	map_init();
<<<<<<< HEAD
 800e0e2:	f7fb fd39 	bl	8009b58 <map_init>
	//座標�?�初期�?
	x = y = 0;
 800e0e6:	4b45      	ldr	r3, [pc, #276]	; (800e1fc <Adachi_search+0x120>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	701a      	strb	r2, [r3, #0]
 800e0ec:	4b43      	ldr	r3, [pc, #268]	; (800e1fc <Adachi_search+0x120>)
 800e0ee:	781a      	ldrb	r2, [r3, #0]
 800e0f0:	4b43      	ldr	r3, [pc, #268]	; (800e200 <Adachi_search+0x124>)
 800e0f2:	701a      	strb	r2, [r3, #0]
	//方向�?�初期�?
	my_direction=north;
 800e0f4:	4b43      	ldr	r3, [pc, #268]	; (800e204 <Adachi_search+0x128>)
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	701a      	strb	r2, [r3, #0]
=======
 800ca54:	f7fd f880 	bl	8009b58 <map_init>
	//座標�?�初期�?
	x = y = 0;
 800ca58:	4b2a      	ldr	r3, [pc, #168]	; (800cb04 <Adachi_search+0xb4>)
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	701a      	strb	r2, [r3, #0]
 800ca5e:	4b29      	ldr	r3, [pc, #164]	; (800cb04 <Adachi_search+0xb4>)
 800ca60:	781a      	ldrb	r2, [r3, #0]
 800ca62:	4b29      	ldr	r3, [pc, #164]	; (800cb08 <Adachi_search+0xb8>)
 800ca64:	701a      	strb	r2, [r3, #0]
	//方向�?�初期�?
	my_direction=north;
 800ca66:	4b29      	ldr	r3, [pc, #164]	; (800cb0c <Adachi_search+0xbc>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	701a      	strb	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	/*ここまで*/

	//壁情報の初期�?
	wall_set();
<<<<<<< HEAD
 800e0fa:	f7fd fffd 	bl	800c0f8 <wall_set>
=======
 800ca6c:	f7ff fb3e 	bl	800c0ec <wall_set>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	//開始位置の後ろはWALL
	//左右はwall_set()でセ�?�?
	wall[x][y].south = WALL;
<<<<<<< HEAD
 800e0fe:	4b40      	ldr	r3, [pc, #256]	; (800e200 <Adachi_search+0x124>)
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	4618      	mov	r0, r3
 800e104:	4b3d      	ldr	r3, [pc, #244]	; (800e1fc <Adachi_search+0x120>)
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	461a      	mov	r2, r3
 800e10a:	493f      	ldr	r1, [pc, #252]	; (800e208 <Adachi_search+0x12c>)
 800e10c:	0083      	lsls	r3, r0, #2
 800e10e:	441a      	add	r2, r3
 800e110:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800e114:	2001      	movs	r0, #1
 800e116:	f360 1305 	bfi	r3, r0, #4, #2
 800e11a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	//歩数マップ�?�更新(ここでは初期�?)
	Walk_Map_Update();
 800e11e:	f7fd fe7b 	bl	800be18 <Walk_Map_Update>

	//�?初�?�直進
	Start_Accel();
 800e122:	f7fc fd41 	bl	800aba8 <Start_Accel>

	x = 0;
 800e126:	4b36      	ldr	r3, [pc, #216]	; (800e200 <Adachi_search+0x124>)
 800e128:	2200      	movs	r2, #0
 800e12a:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800e12c:	4b33      	ldr	r3, [pc, #204]	; (800e1fc <Adachi_search+0x120>)
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	3301      	adds	r3, #1
 800e132:	b2da      	uxtb	r2, r3
 800e134:	4b31      	ldr	r3, [pc, #196]	; (800e1fc <Adachi_search+0x120>)
 800e136:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800e138:	e005      	b.n	800e146 <Adachi_search+0x6a>
		//壁更新
		wall_set();
 800e13a:	f7fd ffdd 	bl	800c0f8 <wall_set>

		//マップ更新
		Walk_Map_Update();
 800e13e:	f7fd fe6b 	bl	800be18 <Walk_Map_Update>

		//次の動きを判定し動く
		Adachi_judge();
 800e142:	f7ff f827 	bl	800d194 <Adachi_judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800e146:	4b2e      	ldr	r3, [pc, #184]	; (800e200 <Adachi_search+0x124>)
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	d9f5      	bls.n	800e13a <Adachi_search+0x5e>
 800e14e:	4b2c      	ldr	r3, [pc, #176]	; (800e200 <Adachi_search+0x124>)
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	2b03      	cmp	r3, #3
 800e154:	d8f1      	bhi.n	800e13a <Adachi_search+0x5e>
 800e156:	4b29      	ldr	r3, [pc, #164]	; (800e1fc <Adachi_search+0x120>)
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d8ed      	bhi.n	800e13a <Adachi_search+0x5e>
	}

	//after-gall#2
	      Decelerate();
 800e15e:	f7fc fe2b 	bl	800adb8 <Decelerate>
	      mode.LED = 7;
 800e162:	4b2a      	ldr	r3, [pc, #168]	; (800e20c <Adachi_search+0x130>)
 800e164:	2207      	movs	r2, #7
 800e166:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800e168:	f7fc fa58 	bl	800a61c <LED_Change>
	      HAL_Delay(1000);
 800e16c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e170:	f002 fe66 	bl	8010e40 <HAL_Delay>
//	      mapcopy();
//	      Flash_store();
	      mode.LED = 0;
 800e174:	4b25      	ldr	r3, [pc, #148]	; (800e20c <Adachi_search+0x130>)
 800e176:	2200      	movs	r2, #0
 800e178:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800e17a:	f7fc fa4f 	bl	800a61c <LED_Change>

	      //ゴールエリア巡回 2×2を想定
	      goal_area_search();
 800e17e:	f7fe f8eb 	bl	800c358 <goal_area_search>
//	      HAL_Delay(10000);
//
//    	  for(int i=0; i < 10000; i+=5)
//    	  printf("%f, %f, %f, %f, %f\r\n",data_log[i],data_log[i+1],data_log[i+2],data_log[i+3],data_log[i+4]);
//    	  HAL_Delay(100000);
	      Accelerate();
 800e182:	f7fc fd69 	bl	800ac58 <Accelerate>
	  	  y = y + 1;
 800e186:	4b1d      	ldr	r3, [pc, #116]	; (800e1fc <Adachi_search+0x120>)
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	3301      	adds	r3, #1
 800e18c:	b2da      	uxtb	r2, r3
 800e18e:	4b1b      	ldr	r3, [pc, #108]	; (800e1fc <Adachi_search+0x120>)
 800e190:	701a      	strb	r2, [r3, #0]
	      //スタートから一番遠い未探索あり座標に向かう
	      //右ルート左ルートで分けてみる
	      //未探索あり座標を目的地としてひとつずつまわり、最終的にスタート地点を目標にして帰ってくる
	      //最短経路を解く、を、しっかりやらないといけなさそう

	  	while( !(x == 0 && y == 0)){
 800e192:	e005      	b.n	800e1a0 <Adachi_search+0xc4>
	  		//壁更新
	  		wall_set();
 800e194:	f7fd ffb0 	bl	800c0f8 <wall_set>

	  		//マップ更新
	  		Walk_Map_Update();
 800e198:	f7fd fe3e 	bl	800be18 <Walk_Map_Update>

	  		//次の動きを判定し動く
	  		Adachi_go_back();
 800e19c:	f7ff fbcc 	bl	800d938 <Adachi_go_back>
	  	while( !(x == 0 && y == 0)){
 800e1a0:	4b17      	ldr	r3, [pc, #92]	; (800e200 <Adachi_search+0x124>)
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d1f5      	bne.n	800e194 <Adachi_search+0xb8>
 800e1a8:	4b14      	ldr	r3, [pc, #80]	; (800e1fc <Adachi_search+0x120>)
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d1f1      	bne.n	800e194 <Adachi_search+0xb8>
	  	}

	  	  Decelerate();
 800e1b0:	f7fc fe02 	bl	800adb8 <Decelerate>
	      rotate180();
 800e1b4:	f7fd fbe4 	bl	800b980 <rotate180>
	      for(int i=0;i < WAIT;i++);
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	607b      	str	r3, [r7, #4]
 800e1bc:	e002      	b.n	800e1c4 <Adachi_search+0xe8>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	607b      	str	r3, [r7, #4]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f247 522f 	movw	r2, #29999	; 0x752f
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	ddf7      	ble.n	800e1be <Adachi_search+0xe2>
	      back_calib();
 800e1ce:	f7fd fc53 	bl	800ba78 <back_calib>
	      for(int i=0;i < WAIT;i++);
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	603b      	str	r3, [r7, #0]
 800e1d6:	e002      	b.n	800e1de <Adachi_search+0x102>
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	603b      	str	r3, [r7, #0]
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	f247 522f 	movw	r2, #29999	; 0x752f
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	ddf7      	ble.n	800e1d8 <Adachi_search+0xfc>
	      mapcopy();
 800e1e8:	f7fb fd2a 	bl	8009c40 <mapcopy>
	      Flash_store();
 800e1ec:	f7fb fe9c 	bl	8009f28 <Flash_store>
	      //mode.execution = 3;
	      Motor_PWM_Stop();
 800e1f0:	f7fb ff5e 	bl	800a0b0 <Motor_PWM_Stop>





}
 800e1f4:	bf00      	nop
 800e1f6:	3708      	adds	r7, #8
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	20009f6d 	.word	0x20009f6d
 800e200:	20009f6c 	.word	0x20009f6c
 800e204:	2000e122 	.word	0x2000e122
 800e208:	2001a6d8 	.word	0x2001a6d8
 800e20c:	20000068 	.word	0x20000068

0800e210 <Map_Load>:
void Map_Load(){
 800e210:	b580      	push	{r7, lr}
 800e212:	af00      	add	r7, sp, #0
	//ROMの迷路�?ータをRAMに入れる
	Flash_load();
 800e214:	f7fb fe76 	bl	8009f04 <Flash_load>

	//work_ram[]の�?ータをwall[][]とwalk_map[][]に入れる
	static int i = 0, j=0,k=0;

	//壁情報
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800e218:	4b50      	ldr	r3, [pc, #320]	; (800e35c <Map_Load+0x14c>)
 800e21a:	2203      	movs	r2, #3
 800e21c:	601a      	str	r2, [r3, #0]
 800e21e:	e069      	b.n	800e2f4 <Map_Load+0xe4>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800e220:	4b4f      	ldr	r3, [pc, #316]	; (800e360 <Map_Load+0x150>)
 800e222:	2200      	movs	r2, #0
 800e224:	601a      	str	r2, [r3, #0]
 800e226:	e05c      	b.n	800e2e2 <Map_Load+0xd2>
			wall[i][j].north = work_ram[k];
 800e228:	4b4e      	ldr	r3, [pc, #312]	; (800e364 <Map_Load+0x154>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4a4e      	ldr	r2, [pc, #312]	; (800e368 <Map_Load+0x158>)
 800e22e:	5cd1      	ldrb	r1, [r2, r3]
 800e230:	4b4b      	ldr	r3, [pc, #300]	; (800e360 <Map_Load+0x150>)
 800e232:	681a      	ldr	r2, [r3, #0]
 800e234:	4b49      	ldr	r3, [pc, #292]	; (800e35c <Map_Load+0x14c>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f001 0103 	and.w	r1, r1, #3
 800e23c:	b2c8      	uxtb	r0, r1
 800e23e:	494b      	ldr	r1, [pc, #300]	; (800e36c <Map_Load+0x15c>)
 800e240:	0092      	lsls	r2, r2, #2
 800e242:	441a      	add	r2, r3
 800e244:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800e248:	f360 0301 	bfi	r3, r0, #0, #2
 800e24c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].east = work_ram[k+1];
 800e250:	4b44      	ldr	r3, [pc, #272]	; (800e364 <Map_Load+0x154>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	3301      	adds	r3, #1
 800e256:	4a44      	ldr	r2, [pc, #272]	; (800e368 <Map_Load+0x158>)
 800e258:	5cd1      	ldrb	r1, [r2, r3]
 800e25a:	4b41      	ldr	r3, [pc, #260]	; (800e360 <Map_Load+0x150>)
 800e25c:	681a      	ldr	r2, [r3, #0]
 800e25e:	4b3f      	ldr	r3, [pc, #252]	; (800e35c <Map_Load+0x14c>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f001 0103 	and.w	r1, r1, #3
 800e266:	b2c8      	uxtb	r0, r1
 800e268:	4940      	ldr	r1, [pc, #256]	; (800e36c <Map_Load+0x15c>)
 800e26a:	0092      	lsls	r2, r2, #2
 800e26c:	441a      	add	r2, r3
 800e26e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800e272:	f360 0383 	bfi	r3, r0, #2, #2
 800e276:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].south = work_ram[k+2];
 800e27a:	4b3a      	ldr	r3, [pc, #232]	; (800e364 <Map_Load+0x154>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	3302      	adds	r3, #2
 800e280:	4a39      	ldr	r2, [pc, #228]	; (800e368 <Map_Load+0x158>)
 800e282:	5cd1      	ldrb	r1, [r2, r3]
 800e284:	4b36      	ldr	r3, [pc, #216]	; (800e360 <Map_Load+0x150>)
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	4b34      	ldr	r3, [pc, #208]	; (800e35c <Map_Load+0x14c>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f001 0103 	and.w	r1, r1, #3
 800e290:	b2c8      	uxtb	r0, r1
 800e292:	4936      	ldr	r1, [pc, #216]	; (800e36c <Map_Load+0x15c>)
 800e294:	0092      	lsls	r2, r2, #2
 800e296:	441a      	add	r2, r3
 800e298:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800e29c:	f360 1305 	bfi	r3, r0, #4, #2
 800e2a0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].west = work_ram[k+3];
 800e2a4:	4b2f      	ldr	r3, [pc, #188]	; (800e364 <Map_Load+0x154>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	3303      	adds	r3, #3
 800e2aa:	4a2f      	ldr	r2, [pc, #188]	; (800e368 <Map_Load+0x158>)
 800e2ac:	5cd1      	ldrb	r1, [r2, r3]
 800e2ae:	4b2c      	ldr	r3, [pc, #176]	; (800e360 <Map_Load+0x150>)
 800e2b0:	681a      	ldr	r2, [r3, #0]
 800e2b2:	4b2a      	ldr	r3, [pc, #168]	; (800e35c <Map_Load+0x14c>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f001 0103 	and.w	r1, r1, #3
 800e2ba:	b2c8      	uxtb	r0, r1
 800e2bc:	492b      	ldr	r1, [pc, #172]	; (800e36c <Map_Load+0x15c>)
 800e2be:	0092      	lsls	r2, r2, #2
 800e2c0:	441a      	add	r2, r3
 800e2c2:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800e2c6:	f360 1387 	bfi	r3, r0, #6, #2
 800e2ca:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			k+=4;
 800e2ce:	4b25      	ldr	r3, [pc, #148]	; (800e364 <Map_Load+0x154>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	3304      	adds	r3, #4
 800e2d4:	4a23      	ldr	r2, [pc, #140]	; (800e364 <Map_Load+0x154>)
 800e2d6:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800e2d8:	4b21      	ldr	r3, [pc, #132]	; (800e360 <Map_Load+0x150>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	3301      	adds	r3, #1
 800e2de:	4a20      	ldr	r2, [pc, #128]	; (800e360 <Map_Load+0x150>)
 800e2e0:	6013      	str	r3, [r2, #0]
 800e2e2:	4b1f      	ldr	r3, [pc, #124]	; (800e360 <Map_Load+0x150>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b03      	cmp	r3, #3
 800e2e8:	dd9e      	ble.n	800e228 <Map_Load+0x18>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800e2ea:	4b1c      	ldr	r3, [pc, #112]	; (800e35c <Map_Load+0x14c>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	4a1a      	ldr	r2, [pc, #104]	; (800e35c <Map_Load+0x14c>)
 800e2f2:	6013      	str	r3, [r2, #0]
 800e2f4:	4b19      	ldr	r3, [pc, #100]	; (800e35c <Map_Load+0x14c>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	da91      	bge.n	800e220 <Map_Load+0x10>
		//kは60まで行ったあと�?4*NOS*NOS になって値が�?�らず終わ�?

	}

	//歩数マッ�?
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800e2fc:	4b17      	ldr	r3, [pc, #92]	; (800e35c <Map_Load+0x14c>)
 800e2fe:	2203      	movs	r2, #3
 800e300:	601a      	str	r2, [r3, #0]
 800e302:	e024      	b.n	800e34e <Map_Load+0x13e>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800e304:	4b16      	ldr	r3, [pc, #88]	; (800e360 <Map_Load+0x150>)
 800e306:	2200      	movs	r2, #0
 800e308:	601a      	str	r2, [r3, #0]
 800e30a:	e017      	b.n	800e33c <Map_Load+0x12c>
			walk_map[i][j] = work_ram[k];
 800e30c:	4b15      	ldr	r3, [pc, #84]	; (800e364 <Map_Load+0x154>)
 800e30e:	6819      	ldr	r1, [r3, #0]
 800e310:	4b13      	ldr	r3, [pc, #76]	; (800e360 <Map_Load+0x150>)
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	4b11      	ldr	r3, [pc, #68]	; (800e35c <Map_Load+0x14c>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	4813      	ldr	r0, [pc, #76]	; (800e368 <Map_Load+0x158>)
 800e31a:	5c40      	ldrb	r0, [r0, r1]
 800e31c:	4914      	ldr	r1, [pc, #80]	; (800e370 <Map_Load+0x160>)
 800e31e:	0092      	lsls	r2, r2, #2
 800e320:	440a      	add	r2, r1
 800e322:	4413      	add	r3, r2
 800e324:	4602      	mov	r2, r0
 800e326:	701a      	strb	r2, [r3, #0]
			k+=1;
 800e328:	4b0e      	ldr	r3, [pc, #56]	; (800e364 <Map_Load+0x154>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	3301      	adds	r3, #1
 800e32e:	4a0d      	ldr	r2, [pc, #52]	; (800e364 <Map_Load+0x154>)
 800e330:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800e332:	4b0b      	ldr	r3, [pc, #44]	; (800e360 <Map_Load+0x150>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	3301      	adds	r3, #1
 800e338:	4a09      	ldr	r2, [pc, #36]	; (800e360 <Map_Load+0x150>)
 800e33a:	6013      	str	r3, [r2, #0]
 800e33c:	4b08      	ldr	r3, [pc, #32]	; (800e360 <Map_Load+0x150>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2b03      	cmp	r3, #3
 800e342:	dde3      	ble.n	800e30c <Map_Load+0xfc>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800e344:	4b05      	ldr	r3, [pc, #20]	; (800e35c <Map_Load+0x14c>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	3b01      	subs	r3, #1
 800e34a:	4a04      	ldr	r2, [pc, #16]	; (800e35c <Map_Load+0x14c>)
 800e34c:	6013      	str	r3, [r2, #0]
 800e34e:	4b03      	ldr	r3, [pc, #12]	; (800e35c <Map_Load+0x14c>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	dad6      	bge.n	800e304 <Map_Load+0xf4>
		}
	}

}
 800e356:	bf00      	nop
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	2000dfe4 	.word	0x2000dfe4
 800e360:	2000dfe8 	.word	0x2000dfe8
 800e364:	2000dfec 	.word	0x2000dfec
 800e368:	20009f7c 	.word	0x20009f7c
 800e36c:	2001a6d8 	.word	0x2001a6d8
 800e370:	2001a268 	.word	0x2001a268

0800e374 <Shortest_Run_Judge>:

void Shortest_Run_Judge(){
 800e374:	b590      	push	{r4, r7, lr}
 800e376:	b089      	sub	sp, #36	; 0x24
 800e378:	af00      	add	r7, sp, #0
	/*------旋回モード選択-----*/
	mode.turn = 1;
 800e37a:	4b90      	ldr	r3, [pc, #576]	; (800e5bc <Shortest_Run_Judge+0x248>)
 800e37c:	2201      	movs	r2, #1
 800e37e:	725a      	strb	r2, [r3, #9]
	// 2 : 片輪旋回                  //
	// 3 : IMUで超信地旋回       //
	/*----------------------------*/


	switch(my_direction){
 800e380:	4b8f      	ldr	r3, [pc, #572]	; (800e5c0 <Shortest_Run_Judge+0x24c>)
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	2b03      	cmp	r3, #3
 800e386:	f200 837c 	bhi.w	800ea82 <Shortest_Run_Judge+0x70e>
 800e38a:	a201      	add	r2, pc, #4	; (adr r2, 800e390 <Shortest_Run_Judge+0x1c>)
 800e38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e390:	0800e3a1 	.word	0x0800e3a1
 800e394:	0800e54d 	.word	0x0800e54d
 800e398:	0800e711 	.word	0x0800e711
 800e39c:	0800e8d7 	.word	0x0800e8d7
	  		  case north:
	  			  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800e3a0:	4b88      	ldr	r3, [pc, #544]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	4b88      	ldr	r3, [pc, #544]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	4a87      	ldr	r2, [pc, #540]	; (800e5cc <Shortest_Run_Judge+0x258>)
 800e3ae:	0083      	lsls	r3, r0, #2
 800e3b0:	440b      	add	r3, r1
 800e3b2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e3b6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d127      	bne.n	800e410 <Shortest_Run_Judge+0x9c>
 800e3c0:	4b80      	ldr	r3, [pc, #512]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	4b80      	ldr	r3, [pc, #512]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e3c8:	781b      	ldrb	r3, [r3, #0]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	4980      	ldr	r1, [pc, #512]	; (800e5d0 <Shortest_Run_Judge+0x25c>)
 800e3ce:	0092      	lsls	r2, r2, #2
 800e3d0:	440a      	add	r2, r1
 800e3d2:	4413      	add	r3, r2
 800e3d4:	781a      	ldrb	r2, [r3, #0]
 800e3d6:	4b7b      	ldr	r3, [pc, #492]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	461c      	mov	r4, r3
 800e3dc:	4b7a      	ldr	r3, [pc, #488]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	497b      	ldr	r1, [pc, #492]	; (800e5d0 <Shortest_Run_Judge+0x25c>)
 800e3e4:	00a3      	lsls	r3, r4, #2
 800e3e6:	440b      	add	r3, r1
 800e3e8:	4403      	add	r3, r0
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d20f      	bcs.n	800e410 <Shortest_Run_Judge+0x9c>
 800e3f0:	4b75      	ldr	r3, [pc, #468]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	2b02      	cmp	r3, #2
 800e3f6:	d80b      	bhi.n	800e410 <Shortest_Run_Judge+0x9c>
	  				  //前北
	  				  straight();
 800e3f8:	f7fc fd8a 	bl	800af10 <straight>
	  				  my_direction = north;
 800e3fc:	4b70      	ldr	r3, [pc, #448]	; (800e5c0 <Shortest_Run_Judge+0x24c>)
 800e3fe:	2200      	movs	r2, #0
 800e400:	701a      	strb	r2, [r3, #0]
	  				  y++;
 800e402:	4b71      	ldr	r3, [pc, #452]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	3301      	adds	r3, #1
 800e408:	b2da      	uxtb	r2, r3
 800e40a:	4b6f      	ldr	r3, [pc, #444]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e40c:	701a      	strb	r2, [r3, #0]
 800e40e:	e09c      	b.n	800e54a <Shortest_Run_Judge+0x1d6>
	  			  }
	  			  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e410:	4b6c      	ldr	r3, [pc, #432]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	4618      	mov	r0, r3
 800e416:	4b6c      	ldr	r3, [pc, #432]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	4619      	mov	r1, r3
 800e41c:	4a6b      	ldr	r2, [pc, #428]	; (800e5cc <Shortest_Run_Judge+0x258>)
 800e41e:	0083      	lsls	r3, r0, #2
 800e420:	440b      	add	r3, r1
 800e422:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e426:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d127      	bne.n	800e480 <Shortest_Run_Judge+0x10c>
 800e430:	4b64      	ldr	r3, [pc, #400]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	3b01      	subs	r3, #1
 800e436:	4a64      	ldr	r2, [pc, #400]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e438:	7812      	ldrb	r2, [r2, #0]
 800e43a:	4611      	mov	r1, r2
 800e43c:	4a64      	ldr	r2, [pc, #400]	; (800e5d0 <Shortest_Run_Judge+0x25c>)
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	4413      	add	r3, r2
 800e442:	440b      	add	r3, r1
 800e444:	781a      	ldrb	r2, [r3, #0]
 800e446:	4b5f      	ldr	r3, [pc, #380]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	461c      	mov	r4, r3
 800e44c:	4b5e      	ldr	r3, [pc, #376]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	4618      	mov	r0, r3
 800e452:	495f      	ldr	r1, [pc, #380]	; (800e5d0 <Shortest_Run_Judge+0x25c>)
 800e454:	00a3      	lsls	r3, r4, #2
 800e456:	440b      	add	r3, r1
 800e458:	4403      	add	r3, r0
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d20f      	bcs.n	800e480 <Shortest_Run_Judge+0x10c>
 800e460:	4b58      	ldr	r3, [pc, #352]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d00b      	beq.n	800e480 <Shortest_Run_Judge+0x10c>
	  				  //左西
	  				  L_turn_select();
 800e468:	f7fd fbbe 	bl	800bbe8 <L_turn_select>
	  				  my_direction = west;
 800e46c:	4b54      	ldr	r3, [pc, #336]	; (800e5c0 <Shortest_Run_Judge+0x24c>)
 800e46e:	2203      	movs	r2, #3
 800e470:	701a      	strb	r2, [r3, #0]
	  			      x--;
 800e472:	4b54      	ldr	r3, [pc, #336]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	3b01      	subs	r3, #1
 800e478:	b2da      	uxtb	r2, r3
 800e47a:	4b52      	ldr	r3, [pc, #328]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e47c:	701a      	strb	r2, [r3, #0]
 800e47e:	e064      	b.n	800e54a <Shortest_Run_Judge+0x1d6>
	  			  }
	  			  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800e480:	4b50      	ldr	r3, [pc, #320]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	4618      	mov	r0, r3
 800e486:	4b50      	ldr	r3, [pc, #320]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	4619      	mov	r1, r3
 800e48c:	4a4f      	ldr	r2, [pc, #316]	; (800e5cc <Shortest_Run_Judge+0x258>)
 800e48e:	0083      	lsls	r3, r0, #2
 800e490:	440b      	add	r3, r1
 800e492:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e496:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d127      	bne.n	800e4f0 <Shortest_Run_Judge+0x17c>
 800e4a0:	4b48      	ldr	r3, [pc, #288]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	4a48      	ldr	r2, [pc, #288]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e4a8:	7812      	ldrb	r2, [r2, #0]
 800e4aa:	4611      	mov	r1, r2
 800e4ac:	4a48      	ldr	r2, [pc, #288]	; (800e5d0 <Shortest_Run_Judge+0x25c>)
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	4413      	add	r3, r2
 800e4b2:	440b      	add	r3, r1
 800e4b4:	781a      	ldrb	r2, [r3, #0]
 800e4b6:	4b43      	ldr	r3, [pc, #268]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	461c      	mov	r4, r3
 800e4bc:	4b42      	ldr	r3, [pc, #264]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	4943      	ldr	r1, [pc, #268]	; (800e5d0 <Shortest_Run_Judge+0x25c>)
 800e4c4:	00a3      	lsls	r3, r4, #2
 800e4c6:	440b      	add	r3, r1
 800e4c8:	4403      	add	r3, r0
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d20f      	bcs.n	800e4f0 <Shortest_Run_Judge+0x17c>
 800e4d0:	4b3c      	ldr	r3, [pc, #240]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	2b02      	cmp	r3, #2
 800e4d6:	d80b      	bhi.n	800e4f0 <Shortest_Run_Judge+0x17c>
	  				  //右東
	  				  R_turn_select();
 800e4d8:	f7fd fb36 	bl	800bb48 <R_turn_select>
	  		          my_direction = east;
 800e4dc:	4b38      	ldr	r3, [pc, #224]	; (800e5c0 <Shortest_Run_Judge+0x24c>)
 800e4de:	2201      	movs	r2, #1
 800e4e0:	701a      	strb	r2, [r3, #0]
	  		          x++;
 800e4e2:	4b38      	ldr	r3, [pc, #224]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	b2da      	uxtb	r2, r3
 800e4ea:	4b36      	ldr	r3, [pc, #216]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e4ec:	701a      	strb	r2, [r3, #0]
 800e4ee:	e02c      	b.n	800e54a <Shortest_Run_Judge+0x1d6>
	  			  }

	  			  else {
	  				  //後南
	  		          Decelerate();
 800e4f0:	f7fc fc62 	bl	800adb8 <Decelerate>
	  		          for(int i=0;i < WAIT;i++);;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	61fb      	str	r3, [r7, #28]
 800e4f8:	e002      	b.n	800e500 <Shortest_Run_Judge+0x18c>
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	61fb      	str	r3, [r7, #28]
 800e500:	69fb      	ldr	r3, [r7, #28]
 800e502:	f247 522f 	movw	r2, #29999	; 0x752f
 800e506:	4293      	cmp	r3, r2
 800e508:	ddf7      	ble.n	800e4fa <Shortest_Run_Judge+0x186>

	  		          if(mode.execution == 1)
 800e50a:	4b2c      	ldr	r3, [pc, #176]	; (800e5bc <Shortest_Run_Judge+0x248>)
 800e50c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e510:	2b01      	cmp	r3, #1
 800e512:	d101      	bne.n	800e518 <Shortest_Run_Judge+0x1a4>
	  		        	  Motor_PWM_Stop();
 800e514:	f7fb fdcc 	bl	800a0b0 <Motor_PWM_Stop>

	  		  	      rotate180();
 800e518:	f7fd fa32 	bl	800b980 <rotate180>
	  		  	      for(int i=0;i < WAIT;i++);;
 800e51c:	2300      	movs	r3, #0
 800e51e:	61bb      	str	r3, [r7, #24]
 800e520:	e002      	b.n	800e528 <Shortest_Run_Judge+0x1b4>
 800e522:	69bb      	ldr	r3, [r7, #24]
 800e524:	3301      	adds	r3, #1
 800e526:	61bb      	str	r3, [r7, #24]
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	f247 522f 	movw	r2, #29999	; 0x752f
 800e52e:	4293      	cmp	r3, r2
 800e530:	ddf7      	ble.n	800e522 <Shortest_Run_Judge+0x1ae>
	  		       	  Accelerate();
 800e532:	f7fc fb91 	bl	800ac58 <Accelerate>
	  		       	  my_direction = south;
 800e536:	4b22      	ldr	r3, [pc, #136]	; (800e5c0 <Shortest_Run_Judge+0x24c>)
 800e538:	2202      	movs	r2, #2
 800e53a:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800e53c:	4b22      	ldr	r3, [pc, #136]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	3b01      	subs	r3, #1
 800e542:	b2da      	uxtb	r2, r3
 800e544:	4b20      	ldr	r3, [pc, #128]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e546:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800e548:	e29c      	b.n	800ea84 <Shortest_Run_Judge+0x710>
 800e54a:	e29b      	b.n	800ea84 <Shortest_Run_Judge+0x710>

	  		  case east:

	  			  if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800e54c:	4b1d      	ldr	r3, [pc, #116]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	4618      	mov	r0, r3
 800e552:	4b1d      	ldr	r3, [pc, #116]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	4619      	mov	r1, r3
 800e558:	4a1c      	ldr	r2, [pc, #112]	; (800e5cc <Shortest_Run_Judge+0x258>)
 800e55a:	0083      	lsls	r3, r0, #2
 800e55c:	440b      	add	r3, r1
 800e55e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e562:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e566:	b2db      	uxtb	r3, r3
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d133      	bne.n	800e5d4 <Shortest_Run_Judge+0x260>
 800e56c:	4b15      	ldr	r3, [pc, #84]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	3301      	adds	r3, #1
 800e572:	4a15      	ldr	r2, [pc, #84]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e574:	7812      	ldrb	r2, [r2, #0]
 800e576:	4611      	mov	r1, r2
 800e578:	4a15      	ldr	r2, [pc, #84]	; (800e5d0 <Shortest_Run_Judge+0x25c>)
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	4413      	add	r3, r2
 800e57e:	440b      	add	r3, r1
 800e580:	781a      	ldrb	r2, [r3, #0]
 800e582:	4b10      	ldr	r3, [pc, #64]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e584:	781b      	ldrb	r3, [r3, #0]
 800e586:	461c      	mov	r4, r3
 800e588:	4b0f      	ldr	r3, [pc, #60]	; (800e5c8 <Shortest_Run_Judge+0x254>)
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	4618      	mov	r0, r3
 800e58e:	4910      	ldr	r1, [pc, #64]	; (800e5d0 <Shortest_Run_Judge+0x25c>)
 800e590:	00a3      	lsls	r3, r4, #2
 800e592:	440b      	add	r3, r1
 800e594:	4403      	add	r3, r0
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d21b      	bcs.n	800e5d4 <Shortest_Run_Judge+0x260>
 800e59c:	4b09      	ldr	r3, [pc, #36]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	2b02      	cmp	r3, #2
 800e5a2:	d817      	bhi.n	800e5d4 <Shortest_Run_Judge+0x260>
	  				  //前東
	  				  straight();
 800e5a4:	f7fc fcb4 	bl	800af10 <straight>
	  		       	  my_direction = east;
 800e5a8:	4b05      	ldr	r3, [pc, #20]	; (800e5c0 <Shortest_Run_Judge+0x24c>)
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800e5ae:	4b05      	ldr	r3, [pc, #20]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	b2da      	uxtb	r2, r3
 800e5b6:	4b03      	ldr	r3, [pc, #12]	; (800e5c4 <Shortest_Run_Judge+0x250>)
 800e5b8:	701a      	strb	r2, [r3, #0]
 800e5ba:	e0a8      	b.n	800e70e <Shortest_Run_Judge+0x39a>
 800e5bc:	20000068 	.word	0x20000068
 800e5c0:	2000e122 	.word	0x2000e122
 800e5c4:	20009f6c 	.word	0x20009f6c
 800e5c8:	20009f6d 	.word	0x20009f6d
 800e5cc:	2001a6d8 	.word	0x2001a6d8
 800e5d0:	2001a268 	.word	0x2001a268
	  			  }
	  			  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800e5d4:	4ba5      	ldr	r3, [pc, #660]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	4618      	mov	r0, r3
 800e5da:	4ba5      	ldr	r3, [pc, #660]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	4619      	mov	r1, r3
 800e5e0:	4aa4      	ldr	r2, [pc, #656]	; (800e874 <Shortest_Run_Judge+0x500>)
 800e5e2:	0083      	lsls	r3, r0, #2
 800e5e4:	440b      	add	r3, r1
 800e5e6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e5ea:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d127      	bne.n	800e644 <Shortest_Run_Judge+0x2d0>
 800e5f4:	4b9d      	ldr	r3, [pc, #628]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	4b9d      	ldr	r3, [pc, #628]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	3301      	adds	r3, #1
 800e600:	499d      	ldr	r1, [pc, #628]	; (800e878 <Shortest_Run_Judge+0x504>)
 800e602:	0092      	lsls	r2, r2, #2
 800e604:	440a      	add	r2, r1
 800e606:	4413      	add	r3, r2
 800e608:	781a      	ldrb	r2, [r3, #0]
 800e60a:	4b98      	ldr	r3, [pc, #608]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	461c      	mov	r4, r3
 800e610:	4b97      	ldr	r3, [pc, #604]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	4618      	mov	r0, r3
 800e616:	4998      	ldr	r1, [pc, #608]	; (800e878 <Shortest_Run_Judge+0x504>)
 800e618:	00a3      	lsls	r3, r4, #2
 800e61a:	440b      	add	r3, r1
 800e61c:	4403      	add	r3, r0
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	429a      	cmp	r2, r3
 800e622:	d20f      	bcs.n	800e644 <Shortest_Run_Judge+0x2d0>
 800e624:	4b92      	ldr	r3, [pc, #584]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	2b02      	cmp	r3, #2
 800e62a:	d80b      	bhi.n	800e644 <Shortest_Run_Judge+0x2d0>
	  				  //左�?
	  				  L_turn_select();
 800e62c:	f7fd fadc 	bl	800bbe8 <L_turn_select>
	  		       	  my_direction = north;
 800e630:	4b92      	ldr	r3, [pc, #584]	; (800e87c <Shortest_Run_Judge+0x508>)
 800e632:	2200      	movs	r2, #0
 800e634:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800e636:	4b8e      	ldr	r3, [pc, #568]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	3301      	adds	r3, #1
 800e63c:	b2da      	uxtb	r2, r3
 800e63e:	4b8c      	ldr	r3, [pc, #560]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e640:	701a      	strb	r2, [r3, #0]
 800e642:	e064      	b.n	800e70e <Shortest_Run_Judge+0x39a>
	  			  }
	  			  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e644:	4b89      	ldr	r3, [pc, #548]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	4618      	mov	r0, r3
 800e64a:	4b89      	ldr	r3, [pc, #548]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	4619      	mov	r1, r3
 800e650:	4a88      	ldr	r2, [pc, #544]	; (800e874 <Shortest_Run_Judge+0x500>)
 800e652:	0083      	lsls	r3, r0, #2
 800e654:	440b      	add	r3, r1
 800e656:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e65a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	2b00      	cmp	r3, #0
 800e662:	d127      	bne.n	800e6b4 <Shortest_Run_Judge+0x340>
 800e664:	4b81      	ldr	r3, [pc, #516]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	461a      	mov	r2, r3
 800e66a:	4b81      	ldr	r3, [pc, #516]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	3b01      	subs	r3, #1
 800e670:	4981      	ldr	r1, [pc, #516]	; (800e878 <Shortest_Run_Judge+0x504>)
 800e672:	0092      	lsls	r2, r2, #2
 800e674:	440a      	add	r2, r1
 800e676:	4413      	add	r3, r2
 800e678:	781a      	ldrb	r2, [r3, #0]
 800e67a:	4b7c      	ldr	r3, [pc, #496]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	461c      	mov	r4, r3
 800e680:	4b7b      	ldr	r3, [pc, #492]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	4618      	mov	r0, r3
 800e686:	497c      	ldr	r1, [pc, #496]	; (800e878 <Shortest_Run_Judge+0x504>)
 800e688:	00a3      	lsls	r3, r4, #2
 800e68a:	440b      	add	r3, r1
 800e68c:	4403      	add	r3, r0
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	429a      	cmp	r2, r3
 800e692:	d20f      	bcs.n	800e6b4 <Shortest_Run_Judge+0x340>
 800e694:	4b76      	ldr	r3, [pc, #472]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d00b      	beq.n	800e6b4 <Shortest_Run_Judge+0x340>
	  				  //右�?
	  				  R_turn_select();
 800e69c:	f7fd fa54 	bl	800bb48 <R_turn_select>
	  		       	  my_direction = south;
 800e6a0:	4b76      	ldr	r3, [pc, #472]	; (800e87c <Shortest_Run_Judge+0x508>)
 800e6a2:	2202      	movs	r2, #2
 800e6a4:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800e6a6:	4b72      	ldr	r3, [pc, #456]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	b2da      	uxtb	r2, r3
 800e6ae:	4b70      	ldr	r3, [pc, #448]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e6b0:	701a      	strb	r2, [r3, #0]
 800e6b2:	e02c      	b.n	800e70e <Shortest_Run_Judge+0x39a>
	  			  }
	  			  else {
	  				  //後西
	  		          Decelerate();
 800e6b4:	f7fc fb80 	bl	800adb8 <Decelerate>
	  		          for(int i=0;i < WAIT;i++);;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	617b      	str	r3, [r7, #20]
 800e6bc:	e002      	b.n	800e6c4 <Shortest_Run_Judge+0x350>
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	617b      	str	r3, [r7, #20]
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	f247 522f 	movw	r2, #29999	; 0x752f
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	ddf7      	ble.n	800e6be <Shortest_Run_Judge+0x34a>

	  		          if(mode.execution == 1)
 800e6ce:	4b6c      	ldr	r3, [pc, #432]	; (800e880 <Shortest_Run_Judge+0x50c>)
 800e6d0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d101      	bne.n	800e6dc <Shortest_Run_Judge+0x368>
	  		        	  Motor_PWM_Stop();
 800e6d8:	f7fb fcea 	bl	800a0b0 <Motor_PWM_Stop>

	  		  	      rotate180();
 800e6dc:	f7fd f950 	bl	800b980 <rotate180>
	  		  	      for(int i=0;i < WAIT;i++);;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	613b      	str	r3, [r7, #16]
 800e6e4:	e002      	b.n	800e6ec <Shortest_Run_Judge+0x378>
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	613b      	str	r3, [r7, #16]
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	f247 522f 	movw	r2, #29999	; 0x752f
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	ddf7      	ble.n	800e6e6 <Shortest_Run_Judge+0x372>
	  		       	  Accelerate();
 800e6f6:	f7fc faaf 	bl	800ac58 <Accelerate>

	  		       	  my_direction = west;
 800e6fa:	4b60      	ldr	r3, [pc, #384]	; (800e87c <Shortest_Run_Judge+0x508>)
 800e6fc:	2203      	movs	r2, #3
 800e6fe:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800e700:	4b5a      	ldr	r3, [pc, #360]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	3b01      	subs	r3, #1
 800e706:	b2da      	uxtb	r2, r3
 800e708:	4b58      	ldr	r3, [pc, #352]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e70a:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800e70c:	e1ba      	b.n	800ea84 <Shortest_Run_Judge+0x710>
 800e70e:	e1b9      	b.n	800ea84 <Shortest_Run_Judge+0x710>

	  		  case south:

	  			  if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e710:	4b56      	ldr	r3, [pc, #344]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	4618      	mov	r0, r3
 800e716:	4b56      	ldr	r3, [pc, #344]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	4619      	mov	r1, r3
 800e71c:	4a55      	ldr	r2, [pc, #340]	; (800e874 <Shortest_Run_Judge+0x500>)
 800e71e:	0083      	lsls	r3, r0, #2
 800e720:	440b      	add	r3, r1
 800e722:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e726:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d127      	bne.n	800e780 <Shortest_Run_Judge+0x40c>
 800e730:	4b4e      	ldr	r3, [pc, #312]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	461a      	mov	r2, r3
 800e736:	4b4e      	ldr	r3, [pc, #312]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	3b01      	subs	r3, #1
 800e73c:	494e      	ldr	r1, [pc, #312]	; (800e878 <Shortest_Run_Judge+0x504>)
 800e73e:	0092      	lsls	r2, r2, #2
 800e740:	440a      	add	r2, r1
 800e742:	4413      	add	r3, r2
 800e744:	781a      	ldrb	r2, [r3, #0]
 800e746:	4b49      	ldr	r3, [pc, #292]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	461c      	mov	r4, r3
 800e74c:	4b48      	ldr	r3, [pc, #288]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	4618      	mov	r0, r3
 800e752:	4949      	ldr	r1, [pc, #292]	; (800e878 <Shortest_Run_Judge+0x504>)
 800e754:	00a3      	lsls	r3, r4, #2
 800e756:	440b      	add	r3, r1
 800e758:	4403      	add	r3, r0
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d20f      	bcs.n	800e780 <Shortest_Run_Judge+0x40c>
 800e760:	4b43      	ldr	r3, [pc, #268]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d00b      	beq.n	800e780 <Shortest_Run_Judge+0x40c>
	  				  //前南
	  				  straight();
 800e768:	f7fc fbd2 	bl	800af10 <straight>
	  		       	  my_direction = south;
 800e76c:	4b43      	ldr	r3, [pc, #268]	; (800e87c <Shortest_Run_Judge+0x508>)
 800e76e:	2202      	movs	r2, #2
 800e770:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800e772:	4b3f      	ldr	r3, [pc, #252]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	3b01      	subs	r3, #1
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	4b3d      	ldr	r3, [pc, #244]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e77c:	701a      	strb	r2, [r3, #0]
 800e77e:	e0a9      	b.n	800e8d4 <Shortest_Run_Judge+0x560>
	  			  }
	  			  else if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800e780:	4b3a      	ldr	r3, [pc, #232]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	4618      	mov	r0, r3
 800e786:	4b3a      	ldr	r3, [pc, #232]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	4619      	mov	r1, r3
 800e78c:	4a39      	ldr	r2, [pc, #228]	; (800e874 <Shortest_Run_Judge+0x500>)
 800e78e:	0083      	lsls	r3, r0, #2
 800e790:	440b      	add	r3, r1
 800e792:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e796:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d127      	bne.n	800e7f0 <Shortest_Run_Judge+0x47c>
 800e7a0:	4b32      	ldr	r3, [pc, #200]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	4a32      	ldr	r2, [pc, #200]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e7a8:	7812      	ldrb	r2, [r2, #0]
 800e7aa:	4611      	mov	r1, r2
 800e7ac:	4a32      	ldr	r2, [pc, #200]	; (800e878 <Shortest_Run_Judge+0x504>)
 800e7ae:	009b      	lsls	r3, r3, #2
 800e7b0:	4413      	add	r3, r2
 800e7b2:	440b      	add	r3, r1
 800e7b4:	781a      	ldrb	r2, [r3, #0]
 800e7b6:	4b2d      	ldr	r3, [pc, #180]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	461c      	mov	r4, r3
 800e7bc:	4b2c      	ldr	r3, [pc, #176]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	492d      	ldr	r1, [pc, #180]	; (800e878 <Shortest_Run_Judge+0x504>)
 800e7c4:	00a3      	lsls	r3, r4, #2
 800e7c6:	440b      	add	r3, r1
 800e7c8:	4403      	add	r3, r0
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d20f      	bcs.n	800e7f0 <Shortest_Run_Judge+0x47c>
 800e7d0:	4b26      	ldr	r3, [pc, #152]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	2b02      	cmp	r3, #2
 800e7d6:	d80b      	bhi.n	800e7f0 <Shortest_Run_Judge+0x47c>
	  				  //左東
	  				  L_turn_select();
 800e7d8:	f7fd fa06 	bl	800bbe8 <L_turn_select>
	  		       	  my_direction = east;
 800e7dc:	4b27      	ldr	r3, [pc, #156]	; (800e87c <Shortest_Run_Judge+0x508>)
 800e7de:	2201      	movs	r2, #1
 800e7e0:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800e7e2:	4b22      	ldr	r3, [pc, #136]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	b2da      	uxtb	r2, r3
 800e7ea:	4b20      	ldr	r3, [pc, #128]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e7ec:	701a      	strb	r2, [r3, #0]
 800e7ee:	e071      	b.n	800e8d4 <Shortest_Run_Judge+0x560>
	  			  }
	  			  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e7f0:	4b1e      	ldr	r3, [pc, #120]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e7f2:	781b      	ldrb	r3, [r3, #0]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	4b1e      	ldr	r3, [pc, #120]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	4a1d      	ldr	r2, [pc, #116]	; (800e874 <Shortest_Run_Judge+0x500>)
 800e7fe:	0083      	lsls	r3, r0, #2
 800e800:	440b      	add	r3, r1
 800e802:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e806:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d127      	bne.n	800e860 <Shortest_Run_Judge+0x4ec>
 800e810:	4b16      	ldr	r3, [pc, #88]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	3b01      	subs	r3, #1
 800e816:	4a16      	ldr	r2, [pc, #88]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e818:	7812      	ldrb	r2, [r2, #0]
 800e81a:	4611      	mov	r1, r2
 800e81c:	4a16      	ldr	r2, [pc, #88]	; (800e878 <Shortest_Run_Judge+0x504>)
 800e81e:	009b      	lsls	r3, r3, #2
 800e820:	4413      	add	r3, r2
 800e822:	440b      	add	r3, r1
 800e824:	781a      	ldrb	r2, [r3, #0]
 800e826:	4b11      	ldr	r3, [pc, #68]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e828:	781b      	ldrb	r3, [r3, #0]
 800e82a:	461c      	mov	r4, r3
 800e82c:	4b10      	ldr	r3, [pc, #64]	; (800e870 <Shortest_Run_Judge+0x4fc>)
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	4618      	mov	r0, r3
 800e832:	4911      	ldr	r1, [pc, #68]	; (800e878 <Shortest_Run_Judge+0x504>)
 800e834:	00a3      	lsls	r3, r4, #2
 800e836:	440b      	add	r3, r1
 800e838:	4403      	add	r3, r0
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d20f      	bcs.n	800e860 <Shortest_Run_Judge+0x4ec>
 800e840:	4b0a      	ldr	r3, [pc, #40]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d00b      	beq.n	800e860 <Shortest_Run_Judge+0x4ec>
	  				  //右西
	  				  R_turn_select();
 800e848:	f7fd f97e 	bl	800bb48 <R_turn_select>
	  		       	  my_direction = west;
 800e84c:	4b0b      	ldr	r3, [pc, #44]	; (800e87c <Shortest_Run_Judge+0x508>)
 800e84e:	2203      	movs	r2, #3
 800e850:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800e852:	4b06      	ldr	r3, [pc, #24]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	3b01      	subs	r3, #1
 800e858:	b2da      	uxtb	r2, r3
 800e85a:	4b04      	ldr	r3, [pc, #16]	; (800e86c <Shortest_Run_Judge+0x4f8>)
 800e85c:	701a      	strb	r2, [r3, #0]
 800e85e:	e039      	b.n	800e8d4 <Shortest_Run_Judge+0x560>
	  			  }
	  			  else {
	  				  //後北
	  		          Decelerate();
 800e860:	f7fc faaa 	bl	800adb8 <Decelerate>
	  		          for(int i=0;i < WAIT;i++);;
 800e864:	2300      	movs	r3, #0
 800e866:	60fb      	str	r3, [r7, #12]
 800e868:	e00f      	b.n	800e88a <Shortest_Run_Judge+0x516>
 800e86a:	bf00      	nop
 800e86c:	20009f6c 	.word	0x20009f6c
 800e870:	20009f6d 	.word	0x20009f6d
 800e874:	2001a6d8 	.word	0x2001a6d8
 800e878:	2001a268 	.word	0x2001a268
 800e87c:	2000e122 	.word	0x2000e122
 800e880:	20000068 	.word	0x20000068
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	3301      	adds	r3, #1
 800e888:	60fb      	str	r3, [r7, #12]
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f247 522f 	movw	r2, #29999	; 0x752f
 800e890:	4293      	cmp	r3, r2
 800e892:	ddf7      	ble.n	800e884 <Shortest_Run_Judge+0x510>

	  		          if(mode.execution == 1)
 800e894:	4b7d      	ldr	r3, [pc, #500]	; (800ea8c <Shortest_Run_Judge+0x718>)
 800e896:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d101      	bne.n	800e8a2 <Shortest_Run_Judge+0x52e>
	  		        	  Motor_PWM_Stop();
 800e89e:	f7fb fc07 	bl	800a0b0 <Motor_PWM_Stop>

	  		  	      rotate180();
 800e8a2:	f7fd f86d 	bl	800b980 <rotate180>
	  		  	      for(int i=0;i < WAIT;i++);;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	60bb      	str	r3, [r7, #8]
 800e8aa:	e002      	b.n	800e8b2 <Shortest_Run_Judge+0x53e>
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	60bb      	str	r3, [r7, #8]
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	f247 522f 	movw	r2, #29999	; 0x752f
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	ddf7      	ble.n	800e8ac <Shortest_Run_Judge+0x538>
	  		       	  Accelerate();
 800e8bc:	f7fc f9cc 	bl	800ac58 <Accelerate>

	  		       	  my_direction = north;
 800e8c0:	4b73      	ldr	r3, [pc, #460]	; (800ea90 <Shortest_Run_Judge+0x71c>)
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800e8c6:	4b73      	ldr	r3, [pc, #460]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	b2da      	uxtb	r2, r3
 800e8ce:	4b71      	ldr	r3, [pc, #452]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800e8d0:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800e8d2:	e0d7      	b.n	800ea84 <Shortest_Run_Judge+0x710>
 800e8d4:	e0d6      	b.n	800ea84 <Shortest_Run_Judge+0x710>

	  		  case west:

	  			  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e8d6:	4b70      	ldr	r3, [pc, #448]	; (800ea98 <Shortest_Run_Judge+0x724>)
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	4618      	mov	r0, r3
 800e8dc:	4b6d      	ldr	r3, [pc, #436]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	4a6e      	ldr	r2, [pc, #440]	; (800ea9c <Shortest_Run_Judge+0x728>)
 800e8e4:	0083      	lsls	r3, r0, #2
 800e8e6:	440b      	add	r3, r1
 800e8e8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e8ec:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d127      	bne.n	800e946 <Shortest_Run_Judge+0x5d2>
 800e8f6:	4b68      	ldr	r3, [pc, #416]	; (800ea98 <Shortest_Run_Judge+0x724>)
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	3b01      	subs	r3, #1
 800e8fc:	4a65      	ldr	r2, [pc, #404]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800e8fe:	7812      	ldrb	r2, [r2, #0]
 800e900:	4611      	mov	r1, r2
 800e902:	4a67      	ldr	r2, [pc, #412]	; (800eaa0 <Shortest_Run_Judge+0x72c>)
 800e904:	009b      	lsls	r3, r3, #2
 800e906:	4413      	add	r3, r2
 800e908:	440b      	add	r3, r1
 800e90a:	781a      	ldrb	r2, [r3, #0]
 800e90c:	4b62      	ldr	r3, [pc, #392]	; (800ea98 <Shortest_Run_Judge+0x724>)
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	461c      	mov	r4, r3
 800e912:	4b60      	ldr	r3, [pc, #384]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	4618      	mov	r0, r3
 800e918:	4961      	ldr	r1, [pc, #388]	; (800eaa0 <Shortest_Run_Judge+0x72c>)
 800e91a:	00a3      	lsls	r3, r4, #2
 800e91c:	440b      	add	r3, r1
 800e91e:	4403      	add	r3, r0
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	429a      	cmp	r2, r3
 800e924:	d20f      	bcs.n	800e946 <Shortest_Run_Judge+0x5d2>
 800e926:	4b5c      	ldr	r3, [pc, #368]	; (800ea98 <Shortest_Run_Judge+0x724>)
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d00b      	beq.n	800e946 <Shortest_Run_Judge+0x5d2>
	  				  //前西
	  				  straight();
 800e92e:	f7fc faef 	bl	800af10 <straight>
	  		       	  my_direction = west;
 800e932:	4b57      	ldr	r3, [pc, #348]	; (800ea90 <Shortest_Run_Judge+0x71c>)
 800e934:	2203      	movs	r2, #3
 800e936:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800e938:	4b57      	ldr	r3, [pc, #348]	; (800ea98 <Shortest_Run_Judge+0x724>)
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	3b01      	subs	r3, #1
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	4b55      	ldr	r3, [pc, #340]	; (800ea98 <Shortest_Run_Judge+0x724>)
 800e942:	701a      	strb	r2, [r3, #0]
 800e944:	e09c      	b.n	800ea80 <Shortest_Run_Judge+0x70c>
	  			  }
	  			  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e946:	4b54      	ldr	r3, [pc, #336]	; (800ea98 <Shortest_Run_Judge+0x724>)
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	4618      	mov	r0, r3
 800e94c:	4b51      	ldr	r3, [pc, #324]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	4619      	mov	r1, r3
 800e952:	4a52      	ldr	r2, [pc, #328]	; (800ea9c <Shortest_Run_Judge+0x728>)
 800e954:	0083      	lsls	r3, r0, #2
 800e956:	440b      	add	r3, r1
 800e958:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e95c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e960:	b2db      	uxtb	r3, r3
 800e962:	2b00      	cmp	r3, #0
 800e964:	d127      	bne.n	800e9b6 <Shortest_Run_Judge+0x642>
 800e966:	4b4c      	ldr	r3, [pc, #304]	; (800ea98 <Shortest_Run_Judge+0x724>)
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	461a      	mov	r2, r3
 800e96c:	4b49      	ldr	r3, [pc, #292]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	3b01      	subs	r3, #1
 800e972:	494b      	ldr	r1, [pc, #300]	; (800eaa0 <Shortest_Run_Judge+0x72c>)
 800e974:	0092      	lsls	r2, r2, #2
 800e976:	440a      	add	r2, r1
 800e978:	4413      	add	r3, r2
 800e97a:	781a      	ldrb	r2, [r3, #0]
 800e97c:	4b46      	ldr	r3, [pc, #280]	; (800ea98 <Shortest_Run_Judge+0x724>)
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	461c      	mov	r4, r3
 800e982:	4b44      	ldr	r3, [pc, #272]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	4618      	mov	r0, r3
 800e988:	4945      	ldr	r1, [pc, #276]	; (800eaa0 <Shortest_Run_Judge+0x72c>)
 800e98a:	00a3      	lsls	r3, r4, #2
 800e98c:	440b      	add	r3, r1
 800e98e:	4403      	add	r3, r0
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	429a      	cmp	r2, r3
 800e994:	d20f      	bcs.n	800e9b6 <Shortest_Run_Judge+0x642>
 800e996:	4b3f      	ldr	r3, [pc, #252]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00b      	beq.n	800e9b6 <Shortest_Run_Judge+0x642>
	  				  //左�?
	  				  L_turn_select();
 800e99e:	f7fd f923 	bl	800bbe8 <L_turn_select>
	  		       	  my_direction = south;
 800e9a2:	4b3b      	ldr	r3, [pc, #236]	; (800ea90 <Shortest_Run_Judge+0x71c>)
 800e9a4:	2202      	movs	r2, #2
 800e9a6:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800e9a8:	4b3a      	ldr	r3, [pc, #232]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	b2da      	uxtb	r2, r3
 800e9b0:	4b38      	ldr	r3, [pc, #224]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800e9b2:	701a      	strb	r2, [r3, #0]
 800e9b4:	e064      	b.n	800ea80 <Shortest_Run_Judge+0x70c>
	  			  }
	  			  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800e9b6:	4b38      	ldr	r3, [pc, #224]	; (800ea98 <Shortest_Run_Judge+0x724>)
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	4b35      	ldr	r3, [pc, #212]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	4a36      	ldr	r2, [pc, #216]	; (800ea9c <Shortest_Run_Judge+0x728>)
 800e9c4:	0083      	lsls	r3, r0, #2
 800e9c6:	440b      	add	r3, r1
 800e9c8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e9cc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e9d0:	b2db      	uxtb	r3, r3
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d127      	bne.n	800ea26 <Shortest_Run_Judge+0x6b2>
 800e9d6:	4b30      	ldr	r3, [pc, #192]	; (800ea98 <Shortest_Run_Judge+0x724>)
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	461a      	mov	r2, r3
 800e9dc:	4b2d      	ldr	r3, [pc, #180]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	492f      	ldr	r1, [pc, #188]	; (800eaa0 <Shortest_Run_Judge+0x72c>)
 800e9e4:	0092      	lsls	r2, r2, #2
 800e9e6:	440a      	add	r2, r1
 800e9e8:	4413      	add	r3, r2
 800e9ea:	781a      	ldrb	r2, [r3, #0]
 800e9ec:	4b2a      	ldr	r3, [pc, #168]	; (800ea98 <Shortest_Run_Judge+0x724>)
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	461c      	mov	r4, r3
 800e9f2:	4b28      	ldr	r3, [pc, #160]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	4929      	ldr	r1, [pc, #164]	; (800eaa0 <Shortest_Run_Judge+0x72c>)
 800e9fa:	00a3      	lsls	r3, r4, #2
 800e9fc:	440b      	add	r3, r1
 800e9fe:	4403      	add	r3, r0
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d20f      	bcs.n	800ea26 <Shortest_Run_Judge+0x6b2>
 800ea06:	4b23      	ldr	r3, [pc, #140]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	2b02      	cmp	r3, #2
 800ea0c:	d80b      	bhi.n	800ea26 <Shortest_Run_Judge+0x6b2>
	  				  //右�?
	  				  R_turn_select();
 800ea0e:	f7fd f89b 	bl	800bb48 <R_turn_select>
	  		       	  my_direction = north;
 800ea12:	4b1f      	ldr	r3, [pc, #124]	; (800ea90 <Shortest_Run_Judge+0x71c>)
 800ea14:	2200      	movs	r2, #0
 800ea16:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800ea18:	4b1e      	ldr	r3, [pc, #120]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	b2da      	uxtb	r2, r3
 800ea20:	4b1c      	ldr	r3, [pc, #112]	; (800ea94 <Shortest_Run_Judge+0x720>)
 800ea22:	701a      	strb	r2, [r3, #0]
 800ea24:	e02c      	b.n	800ea80 <Shortest_Run_Judge+0x70c>
	  			  }
	  			  else {
	  				  //後東
	  		          Decelerate();
 800ea26:	f7fc f9c7 	bl	800adb8 <Decelerate>
	  		          for(int i=0;i < WAIT;i++);;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	607b      	str	r3, [r7, #4]
 800ea2e:	e002      	b.n	800ea36 <Shortest_Run_Judge+0x6c2>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	3301      	adds	r3, #1
 800ea34:	607b      	str	r3, [r7, #4]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f247 522f 	movw	r2, #29999	; 0x752f
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	ddf7      	ble.n	800ea30 <Shortest_Run_Judge+0x6bc>

	  		          if(mode.execution == 1)
 800ea40:	4b12      	ldr	r3, [pc, #72]	; (800ea8c <Shortest_Run_Judge+0x718>)
 800ea42:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d101      	bne.n	800ea4e <Shortest_Run_Judge+0x6da>
	  		        	  Motor_PWM_Stop();
 800ea4a:	f7fb fb31 	bl	800a0b0 <Motor_PWM_Stop>

	  		  	      rotate180();
 800ea4e:	f7fc ff97 	bl	800b980 <rotate180>
	  		  	      for(int i=0;i < WAIT;i++);;
 800ea52:	2300      	movs	r3, #0
 800ea54:	603b      	str	r3, [r7, #0]
 800ea56:	e002      	b.n	800ea5e <Shortest_Run_Judge+0x6ea>
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	603b      	str	r3, [r7, #0]
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	f247 522f 	movw	r2, #29999	; 0x752f
 800ea64:	4293      	cmp	r3, r2
 800ea66:	ddf7      	ble.n	800ea58 <Shortest_Run_Judge+0x6e4>
	  		       	  Accelerate();
 800ea68:	f7fc f8f6 	bl	800ac58 <Accelerate>

	  		       	  my_direction = east;
 800ea6c:	4b08      	ldr	r3, [pc, #32]	; (800ea90 <Shortest_Run_Judge+0x71c>)
 800ea6e:	2201      	movs	r2, #1
 800ea70:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800ea72:	4b09      	ldr	r3, [pc, #36]	; (800ea98 <Shortest_Run_Judge+0x724>)
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	3301      	adds	r3, #1
 800ea78:	b2da      	uxtb	r2, r3
 800ea7a:	4b07      	ldr	r3, [pc, #28]	; (800ea98 <Shortest_Run_Judge+0x724>)
 800ea7c:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800ea7e:	e001      	b.n	800ea84 <Shortest_Run_Judge+0x710>
 800ea80:	e000      	b.n	800ea84 <Shortest_Run_Judge+0x710>

	  		  default:
	  			  break;
 800ea82:	bf00      	nop
	  		  }//swtich end
}
 800ea84:	bf00      	nop
 800ea86:	3724      	adds	r7, #36	; 0x24
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd90      	pop	{r4, r7, pc}
 800ea8c:	20000068 	.word	0x20000068
 800ea90:	2000e122 	.word	0x2000e122
 800ea94:	20009f6d 	.word	0x20009f6d
 800ea98:	20009f6c 	.word	0x20009f6c
 800ea9c:	2001a6d8 	.word	0x2001a6d8
 800eaa0:	2001a268 	.word	0x2001a268
 800eaa4:	00000000 	.word	0x00000000

0800eaa8 <Shortest_Run>:
void Shortest_Run(){
 800eaa8:	b598      	push	{r3, r4, r7, lr}
 800eaaa:	af00      	add	r7, sp, #0

	//ROMの迷路�?ータをRAMに入れる
	Map_Load();
 800eaac:	f7ff fbb0 	bl	800e210 <Map_Load>

	//座標�?�初期�?
	x = y = 0;
 800eab0:	4b33      	ldr	r3, [pc, #204]	; (800eb80 <Shortest_Run+0xd8>)
 800eab2:	2200      	movs	r2, #0
 800eab4:	701a      	strb	r2, [r3, #0]
 800eab6:	4b32      	ldr	r3, [pc, #200]	; (800eb80 <Shortest_Run+0xd8>)
 800eab8:	781a      	ldrb	r2, [r3, #0]
 800eaba:	4b32      	ldr	r3, [pc, #200]	; (800eb84 <Shortest_Run+0xdc>)
 800eabc:	701a      	strb	r2, [r3, #0]
	//方向�?�初期�?
	my_direction=north;
 800eabe:	4b32      	ldr	r3, [pc, #200]	; (800eb88 <Shortest_Run+0xe0>)
 800eac0:	2200      	movs	r2, #0
 800eac2:	701a      	strb	r2, [r3, #0]

	//�?初�?�直進
	Start_Accel();
 800eac4:	f7fc f870 	bl	800aba8 <Start_Accel>

	x = 0;
 800eac8:	4b2e      	ldr	r3, [pc, #184]	; (800eb84 <Shortest_Run+0xdc>)
 800eaca:	2200      	movs	r2, #0
 800eacc:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800eace:	4b2c      	ldr	r3, [pc, #176]	; (800eb80 <Shortest_Run+0xd8>)
 800ead0:	781b      	ldrb	r3, [r3, #0]
 800ead2:	3301      	adds	r3, #1
 800ead4:	b2da      	uxtb	r2, r3
 800ead6:	4b2a      	ldr	r3, [pc, #168]	; (800eb80 <Shortest_Run+0xd8>)
 800ead8:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800eada:	e001      	b.n	800eae0 <Shortest_Run+0x38>
		Shortest_Run_Judge();
 800eadc:	f7ff fc4a 	bl	800e374 <Shortest_Run_Judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800eae0:	4b28      	ldr	r3, [pc, #160]	; (800eb84 <Shortest_Run+0xdc>)
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d9f9      	bls.n	800eadc <Shortest_Run+0x34>
 800eae8:	4b26      	ldr	r3, [pc, #152]	; (800eb84 <Shortest_Run+0xdc>)
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	2b03      	cmp	r3, #3
 800eaee:	d8f5      	bhi.n	800eadc <Shortest_Run+0x34>
 800eaf0:	4b23      	ldr	r3, [pc, #140]	; (800eb80 <Shortest_Run+0xd8>)
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d8f1      	bhi.n	800eadc <Shortest_Run+0x34>

	}
	goal_time[0] = timer*T1;
 800eaf8:	4b24      	ldr	r3, [pc, #144]	; (800eb8c <Shortest_Run+0xe4>)
 800eafa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eafe:	a31e      	add	r3, pc, #120	; (adr r3, 800eb78 <Shortest_Run+0xd0>)
 800eb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb04:	f7f9 fcb0 	bl	8008468 <__aeabi_dmul>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	460c      	mov	r4, r1
 800eb0c:	4a20      	ldr	r2, [pc, #128]	; (800eb90 <Shortest_Run+0xe8>)
 800eb0e:	e9c2 3400 	strd	r3, r4, [r2]
	goal_time[1] = self_timer;
 800eb12:	4b20      	ldr	r3, [pc, #128]	; (800eb94 <Shortest_Run+0xec>)
 800eb14:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eb18:	4a1d      	ldr	r2, [pc, #116]	; (800eb90 <Shortest_Run+0xe8>)
 800eb1a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	      Decelerate();
 800eb1e:	f7fc f94b 	bl	800adb8 <Decelerate>
	      //wall_set();
	      Motor_PWM_Stop();
 800eb22:	f7fb fac5 	bl	800a0b0 <Motor_PWM_Stop>
	      mode.LED = 7;
 800eb26:	4b1c      	ldr	r3, [pc, #112]	; (800eb98 <Shortest_Run+0xf0>)
 800eb28:	2207      	movs	r2, #7
 800eb2a:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800eb2c:	f7fb fd76 	bl	800a61c <LED_Change>
	      HAL_Delay(1000);
 800eb30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800eb34:	f002 f984 	bl	8010e40 <HAL_Delay>
	      mapcopy();
 800eb38:	f7fb f882 	bl	8009c40 <mapcopy>
	      Flash_store();
 800eb3c:	f7fb f9f4 	bl	8009f28 <Flash_store>
	      mode.LED = 0;
 800eb40:	4b15      	ldr	r3, [pc, #84]	; (800eb98 <Shortest_Run+0xf0>)
 800eb42:	2200      	movs	r2, #0
 800eb44:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800eb46:	f7fb fd69 	bl	800a61c <LED_Change>
	      while(1){
	    	  printf("小数のほう : %lf \r\n",goal_time[0]);
 800eb4a:	4b11      	ldr	r3, [pc, #68]	; (800eb90 <Shortest_Run+0xe8>)
 800eb4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eb50:	461a      	mov	r2, r3
 800eb52:	4623      	mov	r3, r4
 800eb54:	4811      	ldr	r0, [pc, #68]	; (800eb9c <Shortest_Run+0xf4>)
 800eb56:	f007 fffd 	bl	8016b54 <iprintf>
	    	  printf("整数のほう : %lf \r\n",goal_time[1]);
 800eb5a:	4b0d      	ldr	r3, [pc, #52]	; (800eb90 <Shortest_Run+0xe8>)
 800eb5c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800eb60:	461a      	mov	r2, r3
 800eb62:	4623      	mov	r3, r4
 800eb64:	480e      	ldr	r0, [pc, #56]	; (800eba0 <Shortest_Run+0xf8>)
 800eb66:	f007 fff5 	bl	8016b54 <iprintf>
	    	  printf("\r\n");
 800eb6a:	480e      	ldr	r0, [pc, #56]	; (800eba4 <Shortest_Run+0xfc>)
 800eb6c:	f008 f866 	bl	8016c3c <puts>
	    	  printf("小数のほう : %lf \r\n",goal_time[0]);
 800eb70:	e7eb      	b.n	800eb4a <Shortest_Run+0xa2>
 800eb72:	bf00      	nop
 800eb74:	f3af 8000 	nop.w
 800eb78:	d2f1a9fc 	.word	0xd2f1a9fc
 800eb7c:	3f50624d 	.word	0x3f50624d
 800eb80:	20009f6d 	.word	0x20009f6d
 800eb84:	20009f6c 	.word	0x20009f6c
 800eb88:	2000e122 	.word	0x2000e122
 800eb8c:	20000310 	.word	0x20000310
 800eb90:	2001a280 	.word	0x2001a280
 800eb94:	20000308 	.word	0x20000308
 800eb98:	20000068 	.word	0x20000068
 800eb9c:	08018ab8 	.word	0x08018ab8
 800eba0:	08018ad4 	.word	0x08018ad4
 800eba4:	080189c0 	.word	0x080189c0

0800eba8 <HAL_ADC_ConvCpltCallback>:
	      }
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* Adchandle) {
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]

}
 800ebb0:	bf00      	nop
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr
 800ebbc:	0000      	movs	r0, r0
	...

0800ebc0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  // 割り込み0.05ms 20kHz
{
 800ebc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ebc4:	ed2d 8b02 	vpush	{d8}
 800ebc8:	b082      	sub	sp, #8
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
=======
 800ca70:	4b25      	ldr	r3, [pc, #148]	; (800cb08 <Adachi_search+0xb8>)
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	4618      	mov	r0, r3
 800ca76:	4b23      	ldr	r3, [pc, #140]	; (800cb04 <Adachi_search+0xb4>)
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	4924      	ldr	r1, [pc, #144]	; (800cb10 <Adachi_search+0xc0>)
 800ca7e:	0083      	lsls	r3, r0, #2
 800ca80:	441a      	add	r2, r3
 800ca82:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800ca86:	2001      	movs	r0, #1
 800ca88:	f360 1305 	bfi	r3, r0, #4, #2
 800ca8c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	//歩数マップ�?�更新(ここでは初期�?)
	Walk_Map_Update();
 800ca90:	f7ff f9bc 	bl	800be0c <Walk_Map_Update>

	//�?初�?�直進
	Start_Accel();
 800ca94:	f7fe f898 	bl	800abc8 <Start_Accel>

	x = 0;
 800ca98:	4b1b      	ldr	r3, [pc, #108]	; (800cb08 <Adachi_search+0xb8>)
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800ca9e:	4b19      	ldr	r3, [pc, #100]	; (800cb04 <Adachi_search+0xb4>)
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	3301      	adds	r3, #1
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	4b17      	ldr	r3, [pc, #92]	; (800cb04 <Adachi_search+0xb4>)
 800caa8:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800caaa:	e005      	b.n	800cab8 <Adachi_search+0x68>
		//壁更新
		wall_set();
 800caac:	f7ff fb1e 	bl	800c0ec <wall_set>

		//マップ更新
		Walk_Map_Update();
 800cab0:	f7ff f9ac 	bl	800be0c <Walk_Map_Update>

		//次の動きを判定し動く
		Adachi_judge();
 800cab4:	f7ff fc48 	bl	800c348 <Adachi_judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800cab8:	4b13      	ldr	r3, [pc, #76]	; (800cb08 <Adachi_search+0xb8>)
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d9f5      	bls.n	800caac <Adachi_search+0x5c>
 800cac0:	4b11      	ldr	r3, [pc, #68]	; (800cb08 <Adachi_search+0xb8>)
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	2b03      	cmp	r3, #3
 800cac6:	d8f1      	bhi.n	800caac <Adachi_search+0x5c>
 800cac8:	4b0e      	ldr	r3, [pc, #56]	; (800cb04 <Adachi_search+0xb4>)
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d8ed      	bhi.n	800caac <Adachi_search+0x5c>
	}

	//after-gall#2
	      Decelerate();
 800cad0:	f7fe f97e 	bl	800add0 <Decelerate>
	      wall_set();
 800cad4:	f7ff fb0a 	bl	800c0ec <wall_set>
	      Motor_PWM_Stop();
 800cad8:	f7fd faea 	bl	800a0b0 <Motor_PWM_Stop>
	      mode.LED = 7;
 800cadc:	4b0d      	ldr	r3, [pc, #52]	; (800cb14 <Adachi_search+0xc4>)
 800cade:	2207      	movs	r2, #7
 800cae0:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800cae2:	f7fd fd69 	bl	800a5b8 <LED_Change>
	      HAL_Delay(1000);
 800cae6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800caea:	f002 f95b 	bl	800eda4 <HAL_Delay>
	      mapcopy();
 800caee:	f7fd f8a7 	bl	8009c40 <mapcopy>
	      Flash_store();
 800caf2:	f7fd fa19 	bl	8009f28 <Flash_store>
	      mode.LED = 0;
 800caf6:	4b07      	ldr	r3, [pc, #28]	; (800cb14 <Adachi_search+0xc4>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800cafc:	f7fd fd5c 	bl	800a5b8 <LED_Change>





}
 800cb00:	bf00      	nop
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	20000fc5 	.word	0x20000fc5
 800cb08:	20000fc4 	.word	0x20000fc4
 800cb0c:	20005162 	.word	0x20005162
 800cb10:	20016560 	.word	0x20016560
 800cb14:	20000cf4 	.word	0x20000cf4

0800cb18 <HAL_ADC_ConvCpltCallback>:
	    	  printf("小数のほう : %lf \r\n",goal_time[0]);
	    	  printf("整数のほう : %lf \r\n",goal_time[1]);
	    	  printf("\r\n");
	      }
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* Adchandle) {
 800cb18:	b480      	push	{r7}
 800cb1a:	b083      	sub	sp, #12
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]

}
 800cb20:	bf00      	nop
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	0000      	movs	r0, r0
	...

0800cb30 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  // 割り込み0.05ms 20kHz
{
 800cb30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb34:	ed2d 8b02 	vpush	{d8}
 800cb38:	b082      	sub	sp, #8
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	//static double angular_velo=CURVE_SPEED*2/90;
	//static int k=0;
	static int i=0,j=0,k=0;
  if(htim == &htim1){
<<<<<<< HEAD
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	4ac1      	ldr	r2, [pc, #772]	; (800eed8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	f040 8526 	bne.w	800f624 <HAL_TIM_PeriodElapsedCallback+0xa64>
	  switch(mode.interrupt){
 800ebd8:	4bc0      	ldr	r3, [pc, #768]	; (800eedc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800ebda:	7a1b      	ldrb	r3, [r3, #8]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d004      	beq.n	800ebea <HAL_TIM_PeriodElapsedCallback+0x2a>
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	f000 848d 	beq.w	800f500 <HAL_TIM_PeriodElapsedCallback+0x940>
=======
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4abf      	ldr	r2, [pc, #764]	; (800ce40 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	f040 847e 	bne.w	800d444 <HAL_TIM_PeriodElapsedCallback+0x914>
	  elapsed_time +=T1;
 800cb48:	4bbe      	ldr	r3, [pc, #760]	; (800ce44 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800cb4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb4e:	a3b8      	add	r3, pc, #736	; (adr r3, 800ce30 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	f7fb fad2 	bl	80080fc <__adddf3>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	460c      	mov	r4, r1
 800cb5c:	4ab9      	ldr	r2, [pc, #740]	; (800ce44 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800cb5e:	e9c2 3400 	strd	r3, r4, [r2]

	  switch(mode.interrupt){
 800cb62:	4bb9      	ldr	r3, [pc, #740]	; (800ce48 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800cb64:	7a1b      	ldrb	r3, [r3, #8]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d004      	beq.n	800cb74 <HAL_TIM_PeriodElapsedCallback+0x44>
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	f000 839e 	beq.w	800d2ac <HAL_TIM_PeriodElapsedCallback+0x77c>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
			}
			//モータ出力更新
			Motor_Switch(L_motor,R_motor);
			break;
		default:
			break;
<<<<<<< HEAD
 800ebe6:	f000 bd1e 	b.w	800f626 <HAL_TIM_PeriodElapsedCallback+0xa66>
	  Tim_Count();
 800ebea:	f7fa ff75 	bl	8009ad8 <Tim_Count>
      	EN3_L.count = TIM3 -> CNT;
 800ebee:	4bbc      	ldr	r3, [pc, #752]	; (800eee0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800ebf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf2:	461a      	mov	r2, r3
 800ebf4:	4bbb      	ldr	r3, [pc, #748]	; (800eee4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ebf6:	601a      	str	r2, [r3, #0]
	    EN4_R.count = TIM4 -> CNT;
 800ebf8:	4bbb      	ldr	r3, [pc, #748]	; (800eee8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800ebfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	4bbb      	ldr	r3, [pc, #748]	; (800eeec <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ec00:	601a      	str	r2, [r3, #0]
	    EN3_L.count = -(EN3_L.count - (30000-1));
 800ec02:	4bb8      	ldr	r3, [pc, #736]	; (800eee4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800ec0a:	332f      	adds	r3, #47	; 0x2f
 800ec0c:	4ab5      	ldr	r2, [pc, #724]	; (800eee4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ec0e:	6013      	str	r3, [r2, #0]
	    EN4_R.count = -(EN4_R.count - (30000-1));
 800ec10:	4bb6      	ldr	r3, [pc, #728]	; (800eeec <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800ec18:	332f      	adds	r3, #47	; 0x2f
 800ec1a:	4ab4      	ldr	r2, [pc, #720]	; (800eeec <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ec1c:	6013      	str	r3, [r2, #0]
	    mode.enc = Encoder_Count(mode.enc);
 800ec1e:	4baf      	ldr	r3, [pc, #700]	; (800eedc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800ec20:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800ec24:	b21b      	sxth	r3, r3
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7fb ff70 	bl	800ab0c <Encoder_Count>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	b25a      	sxtb	r2, r3
 800ec30:	4baa      	ldr	r3, [pc, #680]	; (800eedc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800ec32:	70da      	strb	r2, [r3, #3]
	    All_Pulse_anytime += EN4_R.count + EN3_L.count;
 800ec34:	4bad      	ldr	r3, [pc, #692]	; (800eeec <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ec36:	681a      	ldr	r2, [r3, #0]
 800ec38:	4baa      	ldr	r3, [pc, #680]	; (800eee4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	441a      	add	r2, r3
 800ec3e:	4bac      	ldr	r3, [pc, #688]	; (800eef0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	4413      	add	r3, r2
 800ec44:	4aaa      	ldr	r2, [pc, #680]	; (800eef0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800ec46:	6013      	str	r3, [r2, #0]
	    Encoder_Reset();
 800ec48:	f7fb ff4c 	bl	800aae4 <Encoder_Reset>
	    L_velocity = Velocity_Get( (float)EN3_L.count , T1 );
 800ec4c:	4ba5      	ldr	r3, [pc, #660]	; (800eee4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	ee07 3a90 	vmov	s15, r3
 800ec54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec58:	eddf 0aa6 	vldr	s1, [pc, #664]	; 800eef4 <HAL_TIM_PeriodElapsedCallback+0x334>
 800ec5c:	eeb0 0a67 	vmov.f32	s0, s15
 800ec60:	f7fb ff18 	bl	800aa94 <Velocity_Get>
 800ec64:	eef0 7a40 	vmov.f32	s15, s0
 800ec68:	4ba3      	ldr	r3, [pc, #652]	; (800eef8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800ec6a:	edc3 7a00 	vstr	s15, [r3]
		R_velocity = Velocity_Get( (float)EN4_R.count , T1 );
 800ec6e:	4b9f      	ldr	r3, [pc, #636]	; (800eeec <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	ee07 3a90 	vmov	s15, r3
 800ec76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec7a:	eddf 0a9e 	vldr	s1, [pc, #632]	; 800eef4 <HAL_TIM_PeriodElapsedCallback+0x334>
 800ec7e:	eeb0 0a67 	vmov.f32	s0, s15
 800ec82:	f7fb ff07 	bl	800aa94 <Velocity_Get>
 800ec86:	eef0 7a40 	vmov.f32	s15, s0
 800ec8a:	4b9c      	ldr	r3, [pc, #624]	; (800eefc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800ec8c:	edc3 7a00 	vstr	s15, [r3]
	    Body_velocity = (L_velocity + R_velocity) / 2; // (進んだパルス * パルスあたりに
 800ec90:	4b99      	ldr	r3, [pc, #612]	; (800eef8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800ec92:	ed93 7a00 	vldr	s14, [r3]
 800ec96:	4b99      	ldr	r3, [pc, #612]	; (800eefc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800ec98:	edd3 7a00 	vldr	s15, [r3]
 800ec9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eca0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800eca4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800eca8:	4b95      	ldr	r3, [pc, #596]	; (800ef00 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800ecaa:	edc3 7a00 	vstr	s15, [r3]
	    imu_data = IMU_Get_Data();
 800ecae:	f7fb fa67 	bl	800a180 <IMU_Get_Data>
 800ecb2:	eeb0 7a40 	vmov.f32	s14, s0
 800ecb6:	eef0 7a60 	vmov.f32	s15, s1
 800ecba:	4b92      	ldr	r3, [pc, #584]	; (800ef04 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800ecbc:	ed83 7b00 	vstr	d7, [r3]
	    switch(mode.control){
 800ecc0:	4b86      	ldr	r3, [pc, #536]	; (800eedc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800ecc2:	795b      	ldrb	r3, [r3, #5]
 800ecc4:	2b06      	cmp	r3, #6
 800ecc6:	f200 81ac 	bhi.w	800f022 <HAL_TIM_PeriodElapsedCallback+0x462>
 800ecca:	a201      	add	r2, pc, #4	; (adr r2, 800ecd0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800eccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd0:	0800eced 	.word	0x0800eced
 800ecd4:	0800ed6b 	.word	0x0800ed6b
 800ecd8:	0800ede9 	.word	0x0800ede9
 800ecdc:	0800ee67 	.word	0x0800ee67
 800ece0:	0800ef29 	.word	0x0800ef29
 800ece4:	0800efa1 	.word	0x0800efa1
 800ece8:	0800efad 	.word	0x0800efad
	    	   Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
 800ecec:	4b86      	ldr	r3, [pc, #536]	; (800ef08 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800ecee:	edd3 7a00 	vldr	s15, [r3]
 800ecf2:	4b86      	ldr	r3, [pc, #536]	; (800ef0c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800ecf4:	ed93 7a00 	vldr	s14, [r3]
 800ecf8:	4b85      	ldr	r3, [pc, #532]	; (800ef10 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800ecfa:	edd3 6a00 	vldr	s13, [r3]
 800ecfe:	4b84      	ldr	r3, [pc, #528]	; (800ef10 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800ed00:	ed93 6a01 	vldr	s12, [r3, #4]
 800ed04:	4b82      	ldr	r3, [pc, #520]	; (800ef10 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800ed06:	edd3 5a02 	vldr	s11, [r3, #8]
 800ed0a:	eef0 2a65 	vmov.f32	s5, s11
 800ed0e:	eeb0 2a46 	vmov.f32	s4, s12
 800ed12:	eef0 1a66 	vmov.f32	s3, s13
 800ed16:	ed9f 1a7f 	vldr	s2, [pc, #508]	; 800ef14 <HAL_TIM_PeriodElapsedCallback+0x354>
 800ed1a:	eef0 0a47 	vmov.f32	s1, s14
 800ed1e:	eeb0 0a67 	vmov.f32	s0, s15
 800ed22:	f7fa f849 	bl	8008db8 <Side_Wall_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, 0 );
 800ed26:	4b77      	ldr	r3, [pc, #476]	; (800ef04 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800ed28:	ed93 8b00 	vldr	d8, [r3]
 800ed2c:	4b7a      	ldr	r3, [pc, #488]	; (800ef18 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7f9 fb41 	bl	80083b8 <__aeabi_f2d>
 800ed36:	4604      	mov	r4, r0
 800ed38:	460d      	mov	r5, r1
 800ed3a:	4b77      	ldr	r3, [pc, #476]	; (800ef18 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7f9 fb3a 	bl	80083b8 <__aeabi_f2d>
 800ed44:	4602      	mov	r2, r0
 800ed46:	460b      	mov	r3, r1
 800ed48:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 800eec8 <HAL_TIM_PeriodElapsedCallback+0x308>
 800ed4c:	ec43 2b14 	vmov	d4, r2, r3
 800ed50:	ec45 4b13 	vmov	d3, r4, r5
 800ed54:	ed9f 2b5e 	vldr	d2, [pc, #376]	; 800eed0 <HAL_TIM_PeriodElapsedCallback+0x310>
 800ed58:	eeb0 1a48 	vmov.f32	s2, s16
 800ed5c:	eef0 1a68 	vmov.f32	s3, s17
 800ed60:	ed9f 0b59 	vldr	d0, [pc, #356]	; 800eec8 <HAL_TIM_PeriodElapsedCallback+0x308>
 800ed64:	f7fb fac4 	bl	800a2f0 <IMU_Control>
	    	   break;
 800ed68:	e15c      	b.n	800f024 <HAL_TIM_PeriodElapsedCallback+0x464>
	    	   Left_Wall_Control(distance_wall_left, fl_average,T8, Wall.KP, Wall.KI, Wall.KD);
 800ed6a:	4b6c      	ldr	r3, [pc, #432]	; (800ef1c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800ed6c:	edd3 7a00 	vldr	s15, [r3]
 800ed70:	4b66      	ldr	r3, [pc, #408]	; (800ef0c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800ed72:	ed93 7a00 	vldr	s14, [r3]
 800ed76:	4b66      	ldr	r3, [pc, #408]	; (800ef10 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800ed78:	edd3 6a00 	vldr	s13, [r3]
 800ed7c:	4b64      	ldr	r3, [pc, #400]	; (800ef10 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800ed7e:	ed93 6a01 	vldr	s12, [r3, #4]
 800ed82:	4b63      	ldr	r3, [pc, #396]	; (800ef10 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800ed84:	edd3 5a02 	vldr	s11, [r3, #8]
 800ed88:	eef0 2a65 	vmov.f32	s5, s11
 800ed8c:	eeb0 2a46 	vmov.f32	s4, s12
 800ed90:	eef0 1a66 	vmov.f32	s3, s13
 800ed94:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 800ef14 <HAL_TIM_PeriodElapsedCallback+0x354>
 800ed98:	eef0 0a47 	vmov.f32	s1, s14
 800ed9c:	eeb0 0a67 	vmov.f32	s0, s15
 800eda0:	f7fa f8d2 	bl	8008f48 <Left_Wall_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, 0 );
 800eda4:	4b57      	ldr	r3, [pc, #348]	; (800ef04 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800eda6:	ed93 8b00 	vldr	d8, [r3]
 800edaa:	4b5b      	ldr	r3, [pc, #364]	; (800ef18 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	4618      	mov	r0, r3
 800edb0:	f7f9 fb02 	bl	80083b8 <__aeabi_f2d>
 800edb4:	4604      	mov	r4, r0
 800edb6:	460d      	mov	r5, r1
 800edb8:	4b57      	ldr	r3, [pc, #348]	; (800ef18 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7f9 fafb 	bl	80083b8 <__aeabi_f2d>
 800edc2:	4602      	mov	r2, r0
 800edc4:	460b      	mov	r3, r1
 800edc6:	ed9f 5b40 	vldr	d5, [pc, #256]	; 800eec8 <HAL_TIM_PeriodElapsedCallback+0x308>
 800edca:	ec43 2b14 	vmov	d4, r2, r3
 800edce:	ec45 4b13 	vmov	d3, r4, r5
 800edd2:	ed9f 2b3f 	vldr	d2, [pc, #252]	; 800eed0 <HAL_TIM_PeriodElapsedCallback+0x310>
 800edd6:	eeb0 1a48 	vmov.f32	s2, s16
 800edda:	eef0 1a68 	vmov.f32	s3, s17
 800edde:	ed9f 0b3a 	vldr	d0, [pc, #232]	; 800eec8 <HAL_TIM_PeriodElapsedCallback+0x308>
 800ede2:	f7fb fa85 	bl	800a2f0 <IMU_Control>
	    	   break;
 800ede6:	e11d      	b.n	800f024 <HAL_TIM_PeriodElapsedCallback+0x464>
	    	   Right_Wall_Control(distance_wall_right, fr_average,T8, Wall.KP, Wall.KI, Wall.KD);
 800ede8:	4b4d      	ldr	r3, [pc, #308]	; (800ef20 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800edea:	edd3 7a00 	vldr	s15, [r3]
 800edee:	4b46      	ldr	r3, [pc, #280]	; (800ef08 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800edf0:	ed93 7a00 	vldr	s14, [r3]
 800edf4:	4b46      	ldr	r3, [pc, #280]	; (800ef10 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800edf6:	edd3 6a00 	vldr	s13, [r3]
 800edfa:	4b45      	ldr	r3, [pc, #276]	; (800ef10 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800edfc:	ed93 6a01 	vldr	s12, [r3, #4]
 800ee00:	4b43      	ldr	r3, [pc, #268]	; (800ef10 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800ee02:	edd3 5a02 	vldr	s11, [r3, #8]
 800ee06:	eef0 2a65 	vmov.f32	s5, s11
 800ee0a:	eeb0 2a46 	vmov.f32	s4, s12
 800ee0e:	eef0 1a66 	vmov.f32	s3, s13
 800ee12:	ed9f 1a40 	vldr	s2, [pc, #256]	; 800ef14 <HAL_TIM_PeriodElapsedCallback+0x354>
 800ee16:	eef0 0a47 	vmov.f32	s1, s14
 800ee1a:	eeb0 0a67 	vmov.f32	s0, s15
 800ee1e:	f7fa f965 	bl	80090ec <Right_Wall_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, 0 );
 800ee22:	4b38      	ldr	r3, [pc, #224]	; (800ef04 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800ee24:	ed93 8b00 	vldr	d8, [r3]
 800ee28:	4b3b      	ldr	r3, [pc, #236]	; (800ef18 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7f9 fac3 	bl	80083b8 <__aeabi_f2d>
 800ee32:	4604      	mov	r4, r0
 800ee34:	460d      	mov	r5, r1
 800ee36:	4b38      	ldr	r3, [pc, #224]	; (800ef18 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7f9 fabc 	bl	80083b8 <__aeabi_f2d>
 800ee40:	4602      	mov	r2, r0
 800ee42:	460b      	mov	r3, r1
 800ee44:	ed9f 5b20 	vldr	d5, [pc, #128]	; 800eec8 <HAL_TIM_PeriodElapsedCallback+0x308>
 800ee48:	ec43 2b14 	vmov	d4, r2, r3
 800ee4c:	ec45 4b13 	vmov	d3, r4, r5
 800ee50:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 800eed0 <HAL_TIM_PeriodElapsedCallback+0x310>
 800ee54:	eeb0 1a48 	vmov.f32	s2, s16
 800ee58:	eef0 1a68 	vmov.f32	s3, s17
 800ee5c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800eec8 <HAL_TIM_PeriodElapsedCallback+0x308>
 800ee60:	f7fb fa46 	bl	800a2f0 <IMU_Control>
	    	   break;
 800ee64:	e0de      	b.n	800f024 <HAL_TIM_PeriodElapsedCallback+0x464>
	    	   IMU_Control(Target_Rad_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800ee66:	4b2f      	ldr	r3, [pc, #188]	; (800ef24 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7f9 faa4 	bl	80083b8 <__aeabi_f2d>
 800ee70:	4604      	mov	r4, r0
 800ee72:	460d      	mov	r5, r1
 800ee74:	4b23      	ldr	r3, [pc, #140]	; (800ef04 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800ee76:	ed93 8b00 	vldr	d8, [r3]
 800ee7a:	4b27      	ldr	r3, [pc, #156]	; (800ef18 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7f9 fa9a 	bl	80083b8 <__aeabi_f2d>
 800ee84:	4680      	mov	r8, r0
 800ee86:	4689      	mov	r9, r1
 800ee88:	4b23      	ldr	r3, [pc, #140]	; (800ef18 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7f9 fa93 	bl	80083b8 <__aeabi_f2d>
 800ee92:	4682      	mov	sl, r0
 800ee94:	468b      	mov	fp, r1
 800ee96:	4b20      	ldr	r3, [pc, #128]	; (800ef18 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800ee98:	689b      	ldr	r3, [r3, #8]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7f9 fa8c 	bl	80083b8 <__aeabi_f2d>
 800eea0:	4602      	mov	r2, r0
 800eea2:	460b      	mov	r3, r1
 800eea4:	ec43 2b15 	vmov	d5, r2, r3
 800eea8:	ec4b ab14 	vmov	d4, sl, fp
 800eeac:	ec49 8b13 	vmov	d3, r8, r9
 800eeb0:	ed9f 2b07 	vldr	d2, [pc, #28]	; 800eed0 <HAL_TIM_PeriodElapsedCallback+0x310>
 800eeb4:	eeb0 1a48 	vmov.f32	s2, s16
 800eeb8:	eef0 1a68 	vmov.f32	s3, s17
 800eebc:	ec45 4b10 	vmov	d0, r4, r5
 800eec0:	f7fb fa16 	bl	800a2f0 <IMU_Control>
	    	   break;
 800eec4:	e0ae      	b.n	800f024 <HAL_TIM_PeriodElapsedCallback+0x464>
 800eec6:	bf00      	nop
	...
 800eed0:	d2f1a9fc 	.word	0xd2f1a9fc
 800eed4:	3f50624d 	.word	0x3f50624d
 800eed8:	2001a2a8 	.word	0x2001a2a8
 800eedc:	20000068 	.word	0x20000068
 800eee0:	40000400 	.word	0x40000400
 800eee4:	20000044 	.word	0x20000044
 800eee8:	40000800 	.word	0x40000800
 800eeec:	20000050 	.word	0x20000050
 800eef0:	2000031c 	.word	0x2000031c
 800eef4:	3a83126f 	.word	0x3a83126f
 800eef8:	2000e028 	.word	0x2000e028
 800eefc:	2000e034 	.word	0x2000e034
 800ef00:	2000e090 	.word	0x2000e090
 800ef04:	200002f8 	.word	0x200002f8
 800ef08:	2001a6d0 	.word	0x2001a6d0
 800ef0c:	2000e04c 	.word	0x2000e04c
 800ef10:	20000020 	.word	0x20000020
 800ef14:	3851b717 	.word	0x3851b717
 800ef18:	20000038 	.word	0x20000038
 800ef1c:	20000018 	.word	0x20000018
 800ef20:	20000014 	.word	0x20000014
 800ef24:	200002e4 	.word	0x200002e4
	    	   Enc_Velo_Control(T1, velocity.KP, velocity.KI, velocity.KD);
 800ef28:	4baf      	ldr	r3, [pc, #700]	; (800f1e8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800ef2a:	edd3 7a00 	vldr	s15, [r3]
 800ef2e:	4bae      	ldr	r3, [pc, #696]	; (800f1e8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800ef30:	ed93 7a01 	vldr	s14, [r3, #4]
 800ef34:	4bac      	ldr	r3, [pc, #688]	; (800f1e8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800ef36:	edd3 6a02 	vldr	s13, [r3, #8]
 800ef3a:	eef0 1a66 	vmov.f32	s3, s13
 800ef3e:	eeb0 1a47 	vmov.f32	s2, s14
 800ef42:	eef0 0a67 	vmov.f32	s1, s15
 800ef46:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 800f1ec <HAL_TIM_PeriodElapsedCallback+0x62c>
 800ef4a:	f7fa fb7b 	bl	8009644 <Enc_Velo_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800ef4e:	4ba8      	ldr	r3, [pc, #672]	; (800f1f0 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800ef50:	ed93 8b00 	vldr	d8, [r3]
 800ef54:	4ba7      	ldr	r3, [pc, #668]	; (800f1f4 <HAL_TIM_PeriodElapsedCallback+0x634>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7f9 fa2d 	bl	80083b8 <__aeabi_f2d>
 800ef5e:	4604      	mov	r4, r0
 800ef60:	460d      	mov	r5, r1
 800ef62:	4ba4      	ldr	r3, [pc, #656]	; (800f1f4 <HAL_TIM_PeriodElapsedCallback+0x634>)
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7f9 fa26 	bl	80083b8 <__aeabi_f2d>
 800ef6c:	4680      	mov	r8, r0
 800ef6e:	4689      	mov	r9, r1
 800ef70:	4ba0      	ldr	r3, [pc, #640]	; (800f1f4 <HAL_TIM_PeriodElapsedCallback+0x634>)
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7f9 fa1f 	bl	80083b8 <__aeabi_f2d>
 800ef7a:	4602      	mov	r2, r0
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	ec43 2b15 	vmov	d5, r2, r3
 800ef82:	ec49 8b14 	vmov	d4, r8, r9
 800ef86:	ec45 4b13 	vmov	d3, r4, r5
 800ef8a:	ed9f 2b91 	vldr	d2, [pc, #580]	; 800f1d0 <HAL_TIM_PeriodElapsedCallback+0x610>
 800ef8e:	eeb0 1a48 	vmov.f32	s2, s16
 800ef92:	eef0 1a68 	vmov.f32	s3, s17
 800ef96:	ed9f 0b90 	vldr	d0, [pc, #576]	; 800f1d8 <HAL_TIM_PeriodElapsedCallback+0x618>
 800ef9a:	f7fb f9a9 	bl	800a2f0 <IMU_Control>
	    	   break;
 800ef9e:	e041      	b.n	800f024 <HAL_TIM_PeriodElapsedCallback+0x464>
	    	   mode.imu = 0;
 800efa0:	4a95      	ldr	r2, [pc, #596]	; (800f1f8 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800efa2:	7993      	ldrb	r3, [r2, #6]
 800efa4:	f36f 0300 	bfc	r3, #0, #1
 800efa8:	7193      	strb	r3, [r2, #6]
	    	   break;
 800efaa:	e03b      	b.n	800f024 <HAL_TIM_PeriodElapsedCallback+0x464>
	    	   Right_Velo_Control(Target_R_velo, R_velocity,T1, velocity.KP, velocity.KI, velocity.KD);
 800efac:	4b93      	ldr	r3, [pc, #588]	; (800f1fc <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800efae:	edd3 7a00 	vldr	s15, [r3]
 800efb2:	4b93      	ldr	r3, [pc, #588]	; (800f200 <HAL_TIM_PeriodElapsedCallback+0x640>)
 800efb4:	ed93 7a00 	vldr	s14, [r3]
 800efb8:	4b8b      	ldr	r3, [pc, #556]	; (800f1e8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800efba:	edd3 6a00 	vldr	s13, [r3]
 800efbe:	4b8a      	ldr	r3, [pc, #552]	; (800f1e8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800efc0:	ed93 6a01 	vldr	s12, [r3, #4]
 800efc4:	4b88      	ldr	r3, [pc, #544]	; (800f1e8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800efc6:	edd3 5a02 	vldr	s11, [r3, #8]
 800efca:	eef0 2a65 	vmov.f32	s5, s11
 800efce:	eeb0 2a46 	vmov.f32	s4, s12
 800efd2:	eef0 1a66 	vmov.f32	s3, s13
 800efd6:	ed9f 1a85 	vldr	s2, [pc, #532]	; 800f1ec <HAL_TIM_PeriodElapsedCallback+0x62c>
 800efda:	eef0 0a47 	vmov.f32	s1, s14
 800efde:	eeb0 0a67 	vmov.f32	s0, s15
 800efe2:	f7fa fa13 	bl	800940c <Right_Velo_Control>
	    	   Left_Velo_Control(Target_L_velo, L_velocity,T1, velocity.KP, velocity.KI, velocity.KD);
 800efe6:	4b87      	ldr	r3, [pc, #540]	; (800f204 <HAL_TIM_PeriodElapsedCallback+0x644>)
 800efe8:	edd3 7a00 	vldr	s15, [r3]
 800efec:	4b86      	ldr	r3, [pc, #536]	; (800f208 <HAL_TIM_PeriodElapsedCallback+0x648>)
 800efee:	ed93 7a00 	vldr	s14, [r3]
 800eff2:	4b7d      	ldr	r3, [pc, #500]	; (800f1e8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800eff4:	edd3 6a00 	vldr	s13, [r3]
 800eff8:	4b7b      	ldr	r3, [pc, #492]	; (800f1e8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800effa:	ed93 6a01 	vldr	s12, [r3, #4]
 800effe:	4b7a      	ldr	r3, [pc, #488]	; (800f1e8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800f000:	edd3 5a02 	vldr	s11, [r3, #8]
 800f004:	eef0 2a65 	vmov.f32	s5, s11
 800f008:	eeb0 2a46 	vmov.f32	s4, s12
 800f00c:	eef0 1a66 	vmov.f32	s3, s13
 800f010:	ed9f 1a76 	vldr	s2, [pc, #472]	; 800f1ec <HAL_TIM_PeriodElapsedCallback+0x62c>
 800f014:	eef0 0a47 	vmov.f32	s1, s14
 800f018:	eeb0 0a67 	vmov.f32	s0, s15
 800f01c:	f7fa fa84 	bl	8009528 <Left_Velo_Control>
	    	   break;
 800f020:	e000      	b.n	800f024 <HAL_TIM_PeriodElapsedCallback+0x464>
	    	   break;
 800f022:	bf00      	nop
	    if( mode.accel == 1 ){
 800f024:	4b74      	ldr	r3, [pc, #464]	; (800f1f8 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800f026:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f02a:	2b01      	cmp	r3, #1
 800f02c:	d116      	bne.n	800f05c <HAL_TIM_PeriodElapsedCallback+0x49c>
		  if(Target_velocity < SEARCH_SPEED){
 800f02e:	4b77      	ldr	r3, [pc, #476]	; (800f20c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800f030:	edd3 7a00 	vldr	s15, [r3]
 800f034:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800f210 <HAL_TIM_PeriodElapsedCallback+0x650>
 800f038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f040:	f140 8113 	bpl.w	800f26a <HAL_TIM_PeriodElapsedCallback+0x6aa>
			Target_velocity += a_start;
 800f044:	4b71      	ldr	r3, [pc, #452]	; (800f20c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800f046:	ed93 7a00 	vldr	s14, [r3]
 800f04a:	4b72      	ldr	r3, [pc, #456]	; (800f214 <HAL_TIM_PeriodElapsedCallback+0x654>)
 800f04c:	edd3 7a00 	vldr	s15, [r3]
 800f050:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f054:	4b6d      	ldr	r3, [pc, #436]	; (800f20c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800f056:	edc3 7a00 	vstr	s15, [r3]
 800f05a:	e106      	b.n	800f26a <HAL_TIM_PeriodElapsedCallback+0x6aa>
	    else if( mode.accel == 2 ){
 800f05c:	4b66      	ldr	r3, [pc, #408]	; (800f1f8 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800f05e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f062:	2b02      	cmp	r3, #2
 800f064:	d116      	bne.n	800f094 <HAL_TIM_PeriodElapsedCallback+0x4d4>
		  if(Target_velocity < SEARCH_SPEED){
 800f066:	4b69      	ldr	r3, [pc, #420]	; (800f20c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800f068:	edd3 7a00 	vldr	s15, [r3]
 800f06c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800f210 <HAL_TIM_PeriodElapsedCallback+0x650>
 800f070:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f078:	f140 80f7 	bpl.w	800f26a <HAL_TIM_PeriodElapsedCallback+0x6aa>
			Target_velocity += a;
 800f07c:	4b63      	ldr	r3, [pc, #396]	; (800f20c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800f07e:	ed93 7a00 	vldr	s14, [r3]
 800f082:	4b65      	ldr	r3, [pc, #404]	; (800f218 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800f084:	edd3 7a00 	vldr	s15, [r3]
 800f088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f08c:	4b5f      	ldr	r3, [pc, #380]	; (800f20c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800f08e:	edc3 7a00 	vstr	s15, [r3]
 800f092:	e0ea      	b.n	800f26a <HAL_TIM_PeriodElapsedCallback+0x6aa>
	    else if( mode.accel == 3 ){
 800f094:	4b58      	ldr	r3, [pc, #352]	; (800f1f8 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800f096:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f09a:	2b03      	cmp	r3, #3
 800f09c:	d11b      	bne.n	800f0d6 <HAL_TIM_PeriodElapsedCallback+0x516>
		  if(Target_velocity > 5*a){
 800f09e:	4b5e      	ldr	r3, [pc, #376]	; (800f218 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800f0a0:	edd3 7a00 	vldr	s15, [r3]
 800f0a4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800f0a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f0ac:	4b57      	ldr	r3, [pc, #348]	; (800f20c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800f0ae:	edd3 7a00 	vldr	s15, [r3]
 800f0b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ba:	f140 80d6 	bpl.w	800f26a <HAL_TIM_PeriodElapsedCallback+0x6aa>
			Target_velocity -= a;
 800f0be:	4b53      	ldr	r3, [pc, #332]	; (800f20c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800f0c0:	ed93 7a00 	vldr	s14, [r3]
 800f0c4:	4b54      	ldr	r3, [pc, #336]	; (800f218 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800f0c6:	edd3 7a00 	vldr	s15, [r3]
 800f0ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f0ce:	4b4f      	ldr	r3, [pc, #316]	; (800f20c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800f0d0:	edc3 7a00 	vstr	s15, [r3]
 800f0d4:	e0c9      	b.n	800f26a <HAL_TIM_PeriodElapsedCallback+0x6aa>
	    else if( mode.accel == 4 ){ //左に旋回�?�?
 800f0d6:	4b48      	ldr	r3, [pc, #288]	; (800f1f8 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800f0d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f0dc:	2b04      	cmp	r3, #4
 800f0de:	d124      	bne.n	800f12a <HAL_TIM_PeriodElapsedCallback+0x56a>
	      if(Target_R_velo < SEARCH_SPEED * 124.6/90){
 800f0e0:	4b46      	ldr	r3, [pc, #280]	; (800f1fc <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7f9 f967 	bl	80083b8 <__aeabi_f2d>
 800f0ea:	a33d      	add	r3, pc, #244	; (adr r3, 800f1e0 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800f0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f0:	f7f9 fc2c 	bl	800894c <__aeabi_dcmplt>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	f000 80b7 	beq.w	800f26a <HAL_TIM_PeriodElapsedCallback+0x6aa>
	    	Target_R_velo += a_curve;
 800f0fc:	4b3f      	ldr	r3, [pc, #252]	; (800f1fc <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800f0fe:	ed93 7a00 	vldr	s14, [r3]
 800f102:	4b46      	ldr	r3, [pc, #280]	; (800f21c <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800f104:	edd3 7a00 	vldr	s15, [r3]
 800f108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f10c:	4b3b      	ldr	r3, [pc, #236]	; (800f1fc <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800f10e:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo -= a_curve;
 800f112:	4b3c      	ldr	r3, [pc, #240]	; (800f204 <HAL_TIM_PeriodElapsedCallback+0x644>)
 800f114:	ed93 7a00 	vldr	s14, [r3]
 800f118:	4b40      	ldr	r3, [pc, #256]	; (800f21c <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800f11a:	edd3 7a00 	vldr	s15, [r3]
 800f11e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f122:	4b38      	ldr	r3, [pc, #224]	; (800f204 <HAL_TIM_PeriodElapsedCallback+0x644>)
 800f124:	edc3 7a00 	vstr	s15, [r3]
 800f128:	e09f      	b.n	800f26a <HAL_TIM_PeriodElapsedCallback+0x6aa>
	    else if( mode.accel == 5 ){//左に旋回減�??
 800f12a:	4b33      	ldr	r3, [pc, #204]	; (800f1f8 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800f12c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f130:	2b05      	cmp	r3, #5
 800f132:	d121      	bne.n	800f178 <HAL_TIM_PeriodElapsedCallback+0x5b8>
		      if(Target_R_velo > SEARCH_SPEED){
 800f134:	4b31      	ldr	r3, [pc, #196]	; (800f1fc <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800f136:	edd3 7a00 	vldr	s15, [r3]
 800f13a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800f210 <HAL_TIM_PeriodElapsedCallback+0x650>
 800f13e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f146:	f340 8090 	ble.w	800f26a <HAL_TIM_PeriodElapsedCallback+0x6aa>
		    	Target_R_velo -= a_curve;
 800f14a:	4b2c      	ldr	r3, [pc, #176]	; (800f1fc <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800f14c:	ed93 7a00 	vldr	s14, [r3]
 800f150:	4b32      	ldr	r3, [pc, #200]	; (800f21c <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800f152:	edd3 7a00 	vldr	s15, [r3]
 800f156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f15a:	4b28      	ldr	r3, [pc, #160]	; (800f1fc <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800f15c:	edc3 7a00 	vstr	s15, [r3]
		    	Target_L_velo += a_curve;
 800f160:	4b28      	ldr	r3, [pc, #160]	; (800f204 <HAL_TIM_PeriodElapsedCallback+0x644>)
 800f162:	ed93 7a00 	vldr	s14, [r3]
 800f166:	4b2d      	ldr	r3, [pc, #180]	; (800f21c <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800f168:	edd3 7a00 	vldr	s15, [r3]
 800f16c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f170:	4b24      	ldr	r3, [pc, #144]	; (800f204 <HAL_TIM_PeriodElapsedCallback+0x644>)
 800f172:	edc3 7a00 	vstr	s15, [r3]
 800f176:	e078      	b.n	800f26a <HAL_TIM_PeriodElapsedCallback+0x6aa>
	    else if( mode.accel == 6 ){//右に旋回�?�?
 800f178:	4b1f      	ldr	r3, [pc, #124]	; (800f1f8 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800f17a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f17e:	2b06      	cmp	r3, #6
 800f180:	d14e      	bne.n	800f220 <HAL_TIM_PeriodElapsedCallback+0x660>
	      if(Target_L_velo < SEARCH_SPEED * 124.6/90){
 800f182:	4b20      	ldr	r3, [pc, #128]	; (800f204 <HAL_TIM_PeriodElapsedCallback+0x644>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	4618      	mov	r0, r3
 800f188:	f7f9 f916 	bl	80083b8 <__aeabi_f2d>
 800f18c:	a314      	add	r3, pc, #80	; (adr r3, 800f1e0 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800f18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f192:	f7f9 fbdb 	bl	800894c <__aeabi_dcmplt>
 800f196:	4603      	mov	r3, r0
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d066      	beq.n	800f26a <HAL_TIM_PeriodElapsedCallback+0x6aa>
	    	Target_R_velo -= a_curve;
 800f19c:	4b17      	ldr	r3, [pc, #92]	; (800f1fc <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800f19e:	ed93 7a00 	vldr	s14, [r3]
 800f1a2:	4b1e      	ldr	r3, [pc, #120]	; (800f21c <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800f1a4:	edd3 7a00 	vldr	s15, [r3]
 800f1a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1ac:	4b13      	ldr	r3, [pc, #76]	; (800f1fc <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800f1ae:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo += a_curve;
 800f1b2:	4b14      	ldr	r3, [pc, #80]	; (800f204 <HAL_TIM_PeriodElapsedCallback+0x644>)
 800f1b4:	ed93 7a00 	vldr	s14, [r3]
 800f1b8:	4b18      	ldr	r3, [pc, #96]	; (800f21c <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800f1ba:	edd3 7a00 	vldr	s15, [r3]
 800f1be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1c2:	4b10      	ldr	r3, [pc, #64]	; (800f204 <HAL_TIM_PeriodElapsedCallback+0x644>)
 800f1c4:	edc3 7a00 	vstr	s15, [r3]
 800f1c8:	e04f      	b.n	800f26a <HAL_TIM_PeriodElapsedCallback+0x6aa>
 800f1ca:	bf00      	nop
 800f1cc:	f3af 8000 	nop.w
 800f1d0:	d2f1a9fc 	.word	0xd2f1a9fc
 800f1d4:	3f50624d 	.word	0x3f50624d
	...
 800f1e0:	66666666 	.word	0x66666666
 800f1e4:	406f2666 	.word	0x406f2666
 800f1e8:	2000002c 	.word	0x2000002c
 800f1ec:	3a83126f 	.word	0x3a83126f
 800f1f0:	200002f8 	.word	0x200002f8
 800f1f4:	20000038 	.word	0x20000038
 800f1f8:	20000068 	.word	0x20000068
 800f1fc:	2000e010 	.word	0x2000e010
 800f200:	2000e034 	.word	0x2000e034
 800f204:	2000e030 	.word	0x2000e030
 800f208:	2000e028 	.word	0x2000e028
 800f20c:	200002e0 	.word	0x200002e0
 800f210:	43340000 	.word	0x43340000
 800f214:	20000008 	.word	0x20000008
 800f218:	2000000c 	.word	0x2000000c
 800f21c:	20000010 	.word	0x20000010
	    else if( mode.accel == 7 ){//右に旋回減�??
 800f220:	4b90      	ldr	r3, [pc, #576]	; (800f464 <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 800f222:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f226:	2b07      	cmp	r3, #7
 800f228:	d11f      	bne.n	800f26a <HAL_TIM_PeriodElapsedCallback+0x6aa>
	      if(Target_L_velo > SEARCH_SPEED){
 800f22a:	4b8f      	ldr	r3, [pc, #572]	; (800f468 <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 800f22c:	edd3 7a00 	vldr	s15, [r3]
 800f230:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800f46c <HAL_TIM_PeriodElapsedCallback+0x8ac>
 800f234:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f23c:	dd15      	ble.n	800f26a <HAL_TIM_PeriodElapsedCallback+0x6aa>
	    	Target_R_velo += a_curve;
 800f23e:	4b8c      	ldr	r3, [pc, #560]	; (800f470 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 800f240:	ed93 7a00 	vldr	s14, [r3]
 800f244:	4b8b      	ldr	r3, [pc, #556]	; (800f474 <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 800f246:	edd3 7a00 	vldr	s15, [r3]
 800f24a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f24e:	4b88      	ldr	r3, [pc, #544]	; (800f470 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 800f250:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo -= a_curve;
 800f254:	4b84      	ldr	r3, [pc, #528]	; (800f468 <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 800f256:	ed93 7a00 	vldr	s14, [r3]
 800f25a:	4b86      	ldr	r3, [pc, #536]	; (800f474 <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 800f25c:	edd3 7a00 	vldr	s15, [r3]
 800f260:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f264:	4b80      	ldr	r3, [pc, #512]	; (800f468 <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 800f266:	edc3 7a00 	vstr	s15, [r3]
	    Velocity_Control(Target_velocity, Body_velocity, T1,velocity.KP ,velocity.KI, velocity.KD);
 800f26a:	4b83      	ldr	r3, [pc, #524]	; (800f478 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 800f26c:	edd3 7a00 	vldr	s15, [r3]
 800f270:	4b82      	ldr	r3, [pc, #520]	; (800f47c <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 800f272:	ed93 7a00 	vldr	s14, [r3]
 800f276:	4b82      	ldr	r3, [pc, #520]	; (800f480 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800f278:	edd3 6a00 	vldr	s13, [r3]
 800f27c:	4b80      	ldr	r3, [pc, #512]	; (800f480 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800f27e:	ed93 6a01 	vldr	s12, [r3, #4]
 800f282:	4b7f      	ldr	r3, [pc, #508]	; (800f480 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800f284:	edd3 5a02 	vldr	s11, [r3, #8]
 800f288:	eef0 2a65 	vmov.f32	s5, s11
 800f28c:	eeb0 2a46 	vmov.f32	s4, s12
 800f290:	eef0 1a66 	vmov.f32	s3, s13
 800f294:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 800f484 <HAL_TIM_PeriodElapsedCallback+0x8c4>
 800f298:	eef0 0a47 	vmov.f32	s1, s14
 800f29c:	eeb0 0a67 	vmov.f32	s0, s15
 800f2a0:	f7f9 fff6 	bl	8009290 <Velocity_Control>
		L_motor = L_v_control + L_wall + L_leftwall + L_rightwall + L_rotate + L_angular_velocity + L_env_control + L_velo_control;
 800f2a4:	4b78      	ldr	r3, [pc, #480]	; (800f488 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 800f2a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2aa:	b29a      	uxth	r2, r3
 800f2ac:	4b77      	ldr	r3, [pc, #476]	; (800f48c <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 800f2ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	4413      	add	r3, r2
 800f2b6:	b29a      	uxth	r2, r3
 800f2b8:	4b75      	ldr	r3, [pc, #468]	; (800f490 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 800f2ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2be:	b29b      	uxth	r3, r3
 800f2c0:	4413      	add	r3, r2
 800f2c2:	b29a      	uxth	r2, r3
 800f2c4:	4b73      	ldr	r3, [pc, #460]	; (800f494 <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 800f2c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2ca:	b29b      	uxth	r3, r3
 800f2cc:	4413      	add	r3, r2
 800f2ce:	b29a      	uxth	r2, r3
 800f2d0:	4b71      	ldr	r3, [pc, #452]	; (800f498 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 800f2d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	4413      	add	r3, r2
 800f2da:	b29a      	uxth	r2, r3
 800f2dc:	4b6f      	ldr	r3, [pc, #444]	; (800f49c <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800f2de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	4413      	add	r3, r2
 800f2e6:	b29a      	uxth	r2, r3
 800f2e8:	4b6d      	ldr	r3, [pc, #436]	; (800f4a0 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800f2ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	4413      	add	r3, r2
 800f2f2:	b29a      	uxth	r2, r3
 800f2f4:	4b6b      	ldr	r3, [pc, #428]	; (800f4a4 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800f2f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	4413      	add	r3, r2
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	b21a      	sxth	r2, r3
 800f302:	4b69      	ldr	r3, [pc, #420]	; (800f4a8 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800f304:	801a      	strh	r2, [r3, #0]
		R_motor = R_v_control + R_wall + R_leftwall + R_rightwall + R_rotate + R_angular_velocity + R_env_control + R_velo_control;
 800f306:	4b69      	ldr	r3, [pc, #420]	; (800f4ac <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800f308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	4b68      	ldr	r3, [pc, #416]	; (800f4b0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800f310:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f314:	b29b      	uxth	r3, r3
 800f316:	4413      	add	r3, r2
 800f318:	b29a      	uxth	r2, r3
 800f31a:	4b66      	ldr	r3, [pc, #408]	; (800f4b4 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800f31c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f320:	b29b      	uxth	r3, r3
 800f322:	4413      	add	r3, r2
 800f324:	b29a      	uxth	r2, r3
 800f326:	4b64      	ldr	r3, [pc, #400]	; (800f4b8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800f328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	4413      	add	r3, r2
 800f330:	b29a      	uxth	r2, r3
 800f332:	4b62      	ldr	r3, [pc, #392]	; (800f4bc <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800f334:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f338:	b29b      	uxth	r3, r3
 800f33a:	4413      	add	r3, r2
 800f33c:	b29a      	uxth	r2, r3
 800f33e:	4b60      	ldr	r3, [pc, #384]	; (800f4c0 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800f340:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f344:	b29b      	uxth	r3, r3
 800f346:	4413      	add	r3, r2
 800f348:	b29a      	uxth	r2, r3
 800f34a:	4b5e      	ldr	r3, [pc, #376]	; (800f4c4 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800f34c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f350:	b29b      	uxth	r3, r3
 800f352:	4413      	add	r3, r2
 800f354:	b29a      	uxth	r2, r3
 800f356:	4b5c      	ldr	r3, [pc, #368]	; (800f4c8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800f358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	4413      	add	r3, r2
 800f360:	b29b      	uxth	r3, r3
 800f362:	b21a      	sxth	r2, r3
 800f364:	4b59      	ldr	r3, [pc, #356]	; (800f4cc <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800f366:	801a      	strh	r2, [r3, #0]
		if(timer <= 2000){
 800f368:	4b59      	ldr	r3, [pc, #356]	; (800f4d0 <HAL_TIM_PeriodElapsedCallback+0x910>)
 800f36a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f36e:	f04f 0200 	mov.w	r2, #0
 800f372:	4b58      	ldr	r3, [pc, #352]	; (800f4d4 <HAL_TIM_PeriodElapsedCallback+0x914>)
 800f374:	f7f9 faf4 	bl	8008960 <__aeabi_dcmple>
 800f378:	4603      	mov	r3, r0
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d018      	beq.n	800f3b0 <HAL_TIM_PeriodElapsedCallback+0x7f0>
			if((int)timer % 5== 0){
 800f37e:	4b54      	ldr	r3, [pc, #336]	; (800f4d0 <HAL_TIM_PeriodElapsedCallback+0x910>)
 800f380:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f384:	4618      	mov	r0, r3
 800f386:	4621      	mov	r1, r4
 800f388:	f7f9 fb1e 	bl	80089c8 <__aeabi_d2iz>
 800f38c:	4601      	mov	r1, r0
 800f38e:	4b52      	ldr	r3, [pc, #328]	; (800f4d8 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800f390:	fb83 2301 	smull	r2, r3, r3, r1
 800f394:	105a      	asrs	r2, r3, #1
 800f396:	17cb      	asrs	r3, r1, #31
 800f398:	1ad2      	subs	r2, r2, r3
 800f39a:	4613      	mov	r3, r2
 800f39c:	009b      	lsls	r3, r3, #2
 800f39e:	4413      	add	r3, r2
 800f3a0:	1aca      	subs	r2, r1, r3
 800f3a2:	2a00      	cmp	r2, #0
 800f3a4:	d104      	bne.n	800f3b0 <HAL_TIM_PeriodElapsedCallback+0x7f0>
		     k++;
 800f3a6:	4b4d      	ldr	r3, [pc, #308]	; (800f4dc <HAL_TIM_PeriodElapsedCallback+0x91c>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	4a4b      	ldr	r2, [pc, #300]	; (800f4dc <HAL_TIM_PeriodElapsedCallback+0x91c>)
 800f3ae:	6013      	str	r3, [r2, #0]
		Motor_Switch(L_motor,R_motor);
 800f3b0:	4b3d      	ldr	r3, [pc, #244]	; (800f4a8 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800f3b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f3b6:	4b45      	ldr	r3, [pc, #276]	; (800f4cc <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800f3b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3bc:	4619      	mov	r1, r3
 800f3be:	4610      	mov	r0, r2
 800f3c0:	f7fb f9ea 	bl	800a798 <Motor_Switch>
		if(i%100==0 && i < 100000){
 800f3c4:	4b46      	ldr	r3, [pc, #280]	; (800f4e0 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800f3c6:	681a      	ldr	r2, [r3, #0]
 800f3c8:	4b46      	ldr	r3, [pc, #280]	; (800f4e4 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800f3ca:	fb83 1302 	smull	r1, r3, r3, r2
 800f3ce:	1159      	asrs	r1, r3, #5
 800f3d0:	17d3      	asrs	r3, r2, #31
 800f3d2:	1acb      	subs	r3, r1, r3
 800f3d4:	2164      	movs	r1, #100	; 0x64
 800f3d6:	fb01 f303 	mul.w	r3, r1, r3
 800f3da:	1ad3      	subs	r3, r2, r3
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d13b      	bne.n	800f458 <HAL_TIM_PeriodElapsedCallback+0x898>
 800f3e0:	4b3f      	ldr	r3, [pc, #252]	; (800f4e0 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	4a40      	ldr	r2, [pc, #256]	; (800f4e8 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	dc36      	bgt.n	800f458 <HAL_TIM_PeriodElapsedCallback+0x898>
			data_log[z] = L_velocity;
 800f3ea:	4b40      	ldr	r3, [pc, #256]	; (800f4ec <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	4a40      	ldr	r2, [pc, #256]	; (800f4f0 <HAL_TIM_PeriodElapsedCallback+0x930>)
 800f3f0:	6812      	ldr	r2, [r2, #0]
 800f3f2:	4940      	ldr	r1, [pc, #256]	; (800f4f4 <HAL_TIM_PeriodElapsedCallback+0x934>)
 800f3f4:	009b      	lsls	r3, r3, #2
 800f3f6:	440b      	add	r3, r1
 800f3f8:	601a      	str	r2, [r3, #0]
			data_log[z+1] = R_velocity;
 800f3fa:	4b3c      	ldr	r3, [pc, #240]	; (800f4ec <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	3301      	adds	r3, #1
 800f400:	4a3d      	ldr	r2, [pc, #244]	; (800f4f8 <HAL_TIM_PeriodElapsedCallback+0x938>)
 800f402:	6812      	ldr	r2, [r2, #0]
 800f404:	493b      	ldr	r1, [pc, #236]	; (800f4f4 <HAL_TIM_PeriodElapsedCallback+0x934>)
 800f406:	009b      	lsls	r3, r3, #2
 800f408:	440b      	add	r3, r1
 800f40a:	601a      	str	r2, [r3, #0]
			data_log[z+2] = (float)imu_data;
 800f40c:	4b3b      	ldr	r3, [pc, #236]	; (800f4fc <HAL_TIM_PeriodElapsedCallback+0x93c>)
 800f40e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f412:	4a36      	ldr	r2, [pc, #216]	; (800f4ec <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800f414:	6812      	ldr	r2, [r2, #0]
 800f416:	1c95      	adds	r5, r2, #2
 800f418:	4618      	mov	r0, r3
 800f41a:	4621      	mov	r1, r4
 800f41c:	f7f9 fafc 	bl	8008a18 <__aeabi_d2f>
 800f420:	4601      	mov	r1, r0
 800f422:	4a34      	ldr	r2, [pc, #208]	; (800f4f4 <HAL_TIM_PeriodElapsedCallback+0x934>)
 800f424:	00ab      	lsls	r3, r5, #2
 800f426:	4413      	add	r3, r2
 800f428:	6019      	str	r1, [r3, #0]
			data_log[z+3] = Body_velocity;
 800f42a:	4b30      	ldr	r3, [pc, #192]	; (800f4ec <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	3303      	adds	r3, #3
 800f430:	4a12      	ldr	r2, [pc, #72]	; (800f47c <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 800f432:	6812      	ldr	r2, [r2, #0]
 800f434:	492f      	ldr	r1, [pc, #188]	; (800f4f4 <HAL_TIM_PeriodElapsedCallback+0x934>)
 800f436:	009b      	lsls	r3, r3, #2
 800f438:	440b      	add	r3, r1
 800f43a:	601a      	str	r2, [r3, #0]
			data_log[z+4] = Target_velocity;
 800f43c:	4b2b      	ldr	r3, [pc, #172]	; (800f4ec <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	3304      	adds	r3, #4
 800f442:	4a0d      	ldr	r2, [pc, #52]	; (800f478 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 800f444:	6812      	ldr	r2, [r2, #0]
 800f446:	492b      	ldr	r1, [pc, #172]	; (800f4f4 <HAL_TIM_PeriodElapsedCallback+0x934>)
 800f448:	009b      	lsls	r3, r3, #2
 800f44a:	440b      	add	r3, r1
 800f44c:	601a      	str	r2, [r3, #0]
			z+=5;
 800f44e:	4b27      	ldr	r3, [pc, #156]	; (800f4ec <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	3305      	adds	r3, #5
 800f454:	4a25      	ldr	r2, [pc, #148]	; (800f4ec <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800f456:	6013      	str	r3, [r2, #0]
		i++;
 800f458:	4b21      	ldr	r3, [pc, #132]	; (800f4e0 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	3301      	adds	r3, #1
 800f45e:	4a20      	ldr	r2, [pc, #128]	; (800f4e0 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800f460:	6013      	str	r3, [r2, #0]
		break;
 800f462:	e0e0      	b.n	800f626 <HAL_TIM_PeriodElapsedCallback+0xa66>
 800f464:	20000068 	.word	0x20000068
 800f468:	2000e030 	.word	0x2000e030
 800f46c:	43340000 	.word	0x43340000
 800f470:	2000e010 	.word	0x2000e010
 800f474:	20000010 	.word	0x20000010
 800f478:	200002e0 	.word	0x200002e0
 800f47c:	2000e090 	.word	0x2000e090
 800f480:	2000002c 	.word	0x2000002c
 800f484:	3a83126f 	.word	0x3a83126f
 800f488:	2000e014 	.word	0x2000e014
 800f48c:	2000e02c 	.word	0x2000e02c
 800f490:	2000e016 	.word	0x2000e016
 800f494:	2000e008 	.word	0x2000e008
 800f498:	2000e024 	.word	0x2000e024
 800f49c:	2000e01e 	.word	0x2000e01e
 800f4a0:	2000e00a 	.word	0x2000e00a
 800f4a4:	2000e02e 	.word	0x2000e02e
 800f4a8:	2001a738 	.word	0x2001a738
 800f4ac:	2000e01c 	.word	0x2000e01c
 800f4b0:	2000e01a 	.word	0x2000e01a
 800f4b4:	2000e038 	.word	0x2000e038
 800f4b8:	2000e020 	.word	0x2000e020
 800f4bc:	2000e026 	.word	0x2000e026
 800f4c0:	2000e022 	.word	0x2000e022
 800f4c4:	2000e018 	.word	0x2000e018
 800f4c8:	2000e00c 	.word	0x2000e00c
 800f4cc:	20019ca4 	.word	0x20019ca4
 800f4d0:	20000310 	.word	0x20000310
 800f4d4:	409f4000 	.word	0x409f4000
 800f4d8:	66666667 	.word	0x66666667
 800f4dc:	2000dff0 	.word	0x2000dff0
 800f4e0:	2000dff4 	.word	0x2000dff4
 800f4e4:	51eb851f 	.word	0x51eb851f
 800f4e8:	0001869f 	.word	0x0001869f
 800f4ec:	2000dff8 	.word	0x2000dff8
 800f4f0:	2000e028 	.word	0x2000e028
 800f4f4:	20000320 	.word	0x20000320
 800f4f8:	2000e034 	.word	0x2000e034
 800f4fc:	200002f8 	.word	0x200002f8
			Tim_Count();
 800f500:	f7fa faea 	bl	8009ad8 <Tim_Count>
	      	EN3_L.count = TIM3 -> CNT;
 800f504:	4b50      	ldr	r3, [pc, #320]	; (800f648 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 800f506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f508:	461a      	mov	r2, r3
 800f50a:	4b50      	ldr	r3, [pc, #320]	; (800f64c <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 800f50c:	601a      	str	r2, [r3, #0]
		    EN4_R.count = TIM4 -> CNT;
 800f50e:	4b50      	ldr	r3, [pc, #320]	; (800f650 <HAL_TIM_PeriodElapsedCallback+0xa90>)
 800f510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f512:	461a      	mov	r2, r3
 800f514:	4b4f      	ldr	r3, [pc, #316]	; (800f654 <HAL_TIM_PeriodElapsedCallback+0xa94>)
 800f516:	601a      	str	r2, [r3, #0]
		    EN3_L.count = -(EN3_L.count - (30000-1));
 800f518:	4b4c      	ldr	r3, [pc, #304]	; (800f64c <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800f520:	332f      	adds	r3, #47	; 0x2f
 800f522:	4a4a      	ldr	r2, [pc, #296]	; (800f64c <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 800f524:	6013      	str	r3, [r2, #0]
		    EN4_R.count = -(EN4_R.count - (30000-1));
 800f526:	4b4b      	ldr	r3, [pc, #300]	; (800f654 <HAL_TIM_PeriodElapsedCallback+0xa94>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800f52e:	332f      	adds	r3, #47	; 0x2f
 800f530:	4a48      	ldr	r2, [pc, #288]	; (800f654 <HAL_TIM_PeriodElapsedCallback+0xa94>)
 800f532:	6013      	str	r3, [r2, #0]
		    mode.enc = Encoder_Count(mode.enc);
 800f534:	4b48      	ldr	r3, [pc, #288]	; (800f658 <HAL_TIM_PeriodElapsedCallback+0xa98>)
 800f536:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800f53a:	b21b      	sxth	r3, r3
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7fb fae5 	bl	800ab0c <Encoder_Count>
 800f542:	4603      	mov	r3, r0
 800f544:	b25a      	sxtb	r2, r3
 800f546:	4b44      	ldr	r3, [pc, #272]	; (800f658 <HAL_TIM_PeriodElapsedCallback+0xa98>)
 800f548:	70da      	strb	r2, [r3, #3]
		    All_Pulse_anytime += EN4_R.count + EN3_L.count;
 800f54a:	4b42      	ldr	r3, [pc, #264]	; (800f654 <HAL_TIM_PeriodElapsedCallback+0xa94>)
 800f54c:	681a      	ldr	r2, [r3, #0]
 800f54e:	4b3f      	ldr	r3, [pc, #252]	; (800f64c <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	441a      	add	r2, r3
 800f554:	4b41      	ldr	r3, [pc, #260]	; (800f65c <HAL_TIM_PeriodElapsedCallback+0xa9c>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	4413      	add	r3, r2
 800f55a:	4a40      	ldr	r2, [pc, #256]	; (800f65c <HAL_TIM_PeriodElapsedCallback+0xa9c>)
 800f55c:	6013      	str	r3, [r2, #0]
		    Encoder_Reset();
 800f55e:	f7fb fac1 	bl	800aae4 <Encoder_Reset>
		    L_velocity = Velocity_Get( (float)EN3_L.count , T1 );
 800f562:	4b3a      	ldr	r3, [pc, #232]	; (800f64c <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	ee07 3a90 	vmov	s15, r3
 800f56a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f56e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800f660 <HAL_TIM_PeriodElapsedCallback+0xaa0>
 800f572:	eeb0 0a67 	vmov.f32	s0, s15
 800f576:	f7fb fa8d 	bl	800aa94 <Velocity_Get>
 800f57a:	eef0 7a40 	vmov.f32	s15, s0
 800f57e:	4b39      	ldr	r3, [pc, #228]	; (800f664 <HAL_TIM_PeriodElapsedCallback+0xaa4>)
 800f580:	edc3 7a00 	vstr	s15, [r3]
			R_velocity = Velocity_Get( (float)EN4_R.count , T1 );
 800f584:	4b33      	ldr	r3, [pc, #204]	; (800f654 <HAL_TIM_PeriodElapsedCallback+0xa94>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	ee07 3a90 	vmov	s15, r3
 800f58c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f590:	eddf 0a33 	vldr	s1, [pc, #204]	; 800f660 <HAL_TIM_PeriodElapsedCallback+0xaa0>
 800f594:	eeb0 0a67 	vmov.f32	s0, s15
 800f598:	f7fb fa7c 	bl	800aa94 <Velocity_Get>
 800f59c:	eef0 7a40 	vmov.f32	s15, s0
 800f5a0:	4b31      	ldr	r3, [pc, #196]	; (800f668 <HAL_TIM_PeriodElapsedCallback+0xaa8>)
 800f5a2:	edc3 7a00 	vstr	s15, [r3]
			imu_data = IMU_Get_Data();
 800f5a6:	f7fa fdeb 	bl	800a180 <IMU_Get_Data>
 800f5aa:	eeb0 7a40 	vmov.f32	s14, s0
 800f5ae:	eef0 7a60 	vmov.f32	s15, s1
 800f5b2:	4b2e      	ldr	r3, [pc, #184]	; (800f66c <HAL_TIM_PeriodElapsedCallback+0xaac>)
 800f5b4:	ed83 7b00 	vstr	d7, [r3]
			if(timer <= 48000){
 800f5b8:	4b2d      	ldr	r3, [pc, #180]	; (800f670 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 800f5ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5be:	a320      	add	r3, pc, #128	; (adr r3, 800f640 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 800f5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c4:	f7f9 f9cc 	bl	8008960 <__aeabi_dcmple>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d01f      	beq.n	800f60e <HAL_TIM_PeriodElapsedCallback+0xa4e>
				if((int)timer % 60 == 0){
 800f5ce:	4b28      	ldr	r3, [pc, #160]	; (800f670 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 800f5d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	4621      	mov	r1, r4
 800f5d8:	f7f9 f9f6 	bl	80089c8 <__aeabi_d2iz>
 800f5dc:	4601      	mov	r1, r0
 800f5de:	4b25      	ldr	r3, [pc, #148]	; (800f674 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 800f5e0:	fb83 2301 	smull	r2, r3, r3, r1
 800f5e4:	440b      	add	r3, r1
 800f5e6:	115a      	asrs	r2, r3, #5
 800f5e8:	17cb      	asrs	r3, r1, #31
 800f5ea:	1ad2      	subs	r2, r2, r3
 800f5ec:	4613      	mov	r3, r2
 800f5ee:	011b      	lsls	r3, r3, #4
 800f5f0:	1a9b      	subs	r3, r3, r2
 800f5f2:	009b      	lsls	r3, r3, #2
 800f5f4:	1aca      	subs	r2, r1, r3
 800f5f6:	2a00      	cmp	r2, #0
 800f5f8:	d104      	bne.n	800f604 <HAL_TIM_PeriodElapsedCallback+0xa44>
			     k++;
 800f5fa:	4b1f      	ldr	r3, [pc, #124]	; (800f678 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	3301      	adds	r3, #1
 800f600:	4a1d      	ldr	r2, [pc, #116]	; (800f678 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 800f602:	6013      	str	r3, [r2, #0]
			i++;
 800f604:	4b1d      	ldr	r3, [pc, #116]	; (800f67c <HAL_TIM_PeriodElapsedCallback+0xabc>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	3301      	adds	r3, #1
 800f60a:	4a1c      	ldr	r2, [pc, #112]	; (800f67c <HAL_TIM_PeriodElapsedCallback+0xabc>)
 800f60c:	6013      	str	r3, [r2, #0]
			Motor_Switch(L_motor,R_motor);
 800f60e:	4b1c      	ldr	r3, [pc, #112]	; (800f680 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 800f610:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f614:	4b1b      	ldr	r3, [pc, #108]	; (800f684 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 800f616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f61a:	4619      	mov	r1, r3
 800f61c:	4610      	mov	r0, r2
 800f61e:	f7fb f8bb 	bl	800a798 <Motor_Switch>
			break;
 800f622:	e000      	b.n	800f626 <HAL_TIM_PeriodElapsedCallback+0xa66>
	  }

  }
 800f624:	bf00      	nop

  if(htim == &htim8){
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	4a17      	ldr	r2, [pc, #92]	; (800f688 <HAL_TIM_PeriodElapsedCallback+0xac8>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d101      	bne.n	800f632 <HAL_TIM_PeriodElapsedCallback+0xa72>


	  ADC_Get_Data();
 800f62e:	f7fb f8fd 	bl	800a82c <ADC_Get_Data>


  }
}
 800f632:	bf00      	nop
 800f634:	3708      	adds	r7, #8
 800f636:	46bd      	mov	sp, r7
 800f638:	ecbd 8b02 	vpop	{d8}
 800f63c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f640:	00000000 	.word	0x00000000
 800f644:	40e77000 	.word	0x40e77000
 800f648:	40000400 	.word	0x40000400
 800f64c:	20000044 	.word	0x20000044
 800f650:	40000800 	.word	0x40000800
 800f654:	20000050 	.word	0x20000050
 800f658:	20000068 	.word	0x20000068
 800f65c:	2000031c 	.word	0x2000031c
 800f660:	3a83126f 	.word	0x3a83126f
 800f664:	2000e028 	.word	0x2000e028
 800f668:	2000e034 	.word	0x2000e034
 800f66c:	200002f8 	.word	0x200002f8
 800f670:	20000310 	.word	0x20000310
 800f674:	88888889 	.word	0x88888889
 800f678:	2000dff0 	.word	0x2000dff0
 800f67c:	2000dff4 	.word	0x2000dff4
 800f680:	2001a738 	.word	0x2001a738
 800f684:	20019ca4 	.word	0x20019ca4
 800f688:	2000e050 	.word	0x2000e050

0800f68c <Exe_num0>:

=======
 800cb70:	f000 bc69 	b.w	800d446 <HAL_TIM_PeriodElapsedCallback+0x916>
	  Tim_Count();
 800cb74:	f7fc ffb0 	bl	8009ad8 <Tim_Count>
      	EN3_L.count = TIM3 -> CNT;
 800cb78:	4bb4      	ldr	r3, [pc, #720]	; (800ce4c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800cb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	4bb4      	ldr	r3, [pc, #720]	; (800ce50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800cb80:	601a      	str	r2, [r3, #0]
	    EN4_R.count = TIM4 -> CNT;
 800cb82:	4bb4      	ldr	r3, [pc, #720]	; (800ce54 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800cb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb86:	461a      	mov	r2, r3
 800cb88:	4bb3      	ldr	r3, [pc, #716]	; (800ce58 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800cb8a:	601a      	str	r2, [r3, #0]
	    EN3_L.count = -(EN3_L.count - (30000-1));
 800cb8c:	4bb0      	ldr	r3, [pc, #704]	; (800ce50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800cb94:	332f      	adds	r3, #47	; 0x2f
 800cb96:	4aae      	ldr	r2, [pc, #696]	; (800ce50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800cb98:	6013      	str	r3, [r2, #0]
	    EN4_R.count = -(EN4_R.count - (30000-1));
 800cb9a:	4baf      	ldr	r3, [pc, #700]	; (800ce58 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800cba2:	332f      	adds	r3, #47	; 0x2f
 800cba4:	4aac      	ldr	r2, [pc, #688]	; (800ce58 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800cba6:	6013      	str	r3, [r2, #0]
	    mode.enc = Encoder_Count(mode.enc);
 800cba8:	4ba7      	ldr	r3, [pc, #668]	; (800ce48 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800cbaa:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800cbae:	b21b      	sxth	r3, r3
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7fd ff93 	bl	800aadc <Encoder_Count>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	b25a      	sxtb	r2, r3
 800cbba:	4ba3      	ldr	r3, [pc, #652]	; (800ce48 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800cbbc:	70da      	strb	r2, [r3, #3]
	    All_Pulse_anytime += EN4_R.count + EN3_L.count;
 800cbbe:	4ba6      	ldr	r3, [pc, #664]	; (800ce58 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	4ba3      	ldr	r3, [pc, #652]	; (800ce50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	441a      	add	r2, r3
 800cbc8:	4ba4      	ldr	r3, [pc, #656]	; (800ce5c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4413      	add	r3, r2
 800cbce:	4aa3      	ldr	r2, [pc, #652]	; (800ce5c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800cbd0:	6013      	str	r3, [r2, #0]
	    Encoder_Reset();
 800cbd2:	f7fd ff6f 	bl	800aab4 <Encoder_Reset>
	    L_velocity = Velocity_Get( (float)EN3_L.count , T1 );
 800cbd6:	4b9e      	ldr	r3, [pc, #632]	; (800ce50 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	ee07 3a90 	vmov	s15, r3
 800cbde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbe2:	eddf 0a9f 	vldr	s1, [pc, #636]	; 800ce60 <HAL_TIM_PeriodElapsedCallback+0x330>
 800cbe6:	eeb0 0a67 	vmov.f32	s0, s15
 800cbea:	f7fd ff3b 	bl	800aa64 <Velocity_Get>
 800cbee:	eef0 7a40 	vmov.f32	s15, s0
 800cbf2:	4b9c      	ldr	r3, [pc, #624]	; (800ce64 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800cbf4:	edc3 7a00 	vstr	s15, [r3]
		R_velocity = Velocity_Get( (float)EN4_R.count , T1 );
 800cbf8:	4b97      	ldr	r3, [pc, #604]	; (800ce58 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	ee07 3a90 	vmov	s15, r3
 800cc00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc04:	eddf 0a96 	vldr	s1, [pc, #600]	; 800ce60 <HAL_TIM_PeriodElapsedCallback+0x330>
 800cc08:	eeb0 0a67 	vmov.f32	s0, s15
 800cc0c:	f7fd ff2a 	bl	800aa64 <Velocity_Get>
 800cc10:	eef0 7a40 	vmov.f32	s15, s0
 800cc14:	4b94      	ldr	r3, [pc, #592]	; (800ce68 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800cc16:	edc3 7a00 	vstr	s15, [r3]
	    Body_velocity = (L_velocity + R_velocity) / 2; // (進んだパルス * パルスあたりに
 800cc1a:	4b92      	ldr	r3, [pc, #584]	; (800ce64 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800cc1c:	ed93 7a00 	vldr	s14, [r3]
 800cc20:	4b91      	ldr	r3, [pc, #580]	; (800ce68 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800cc22:	edd3 7a00 	vldr	s15, [r3]
 800cc26:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cc2a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cc2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc32:	4b8e      	ldr	r3, [pc, #568]	; (800ce6c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800cc34:	edc3 7a00 	vstr	s15, [r3]
	    imu_data = IMU_Get_Data();
 800cc38:	f7fd fa62 	bl	800a100 <IMU_Get_Data>
 800cc3c:	eeb0 7a40 	vmov.f32	s14, s0
 800cc40:	eef0 7a60 	vmov.f32	s15, s1
 800cc44:	4b8a      	ldr	r3, [pc, #552]	; (800ce70 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800cc46:	ed83 7b00 	vstr	d7, [r3]
	    switch(mode.control){
 800cc4a:	4b7f      	ldr	r3, [pc, #508]	; (800ce48 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800cc4c:	795b      	ldrb	r3, [r3, #5]
 800cc4e:	2b06      	cmp	r3, #6
 800cc50:	f200 815d 	bhi.w	800cf0e <HAL_TIM_PeriodElapsedCallback+0x3de>
 800cc54:	a201      	add	r2, pc, #4	; (adr r2, 800cc5c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800cc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc5a:	bf00      	nop
 800cc5c:	0800cc79 	.word	0x0800cc79
 800cc60:	0800ccbf 	.word	0x0800ccbf
 800cc64:	0800cd05 	.word	0x0800cd05
 800cc68:	0800cd4b 	.word	0x0800cd4b
 800cc6c:	0800cdab 	.word	0x0800cdab
 800cc70:	0800ce23 	.word	0x0800ce23
 800cc74:	0800ce99 	.word	0x0800ce99
	    	   Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
 800cc78:	4b7e      	ldr	r3, [pc, #504]	; (800ce74 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800cc7a:	edd3 7a00 	vldr	s15, [r3]
 800cc7e:	4b7e      	ldr	r3, [pc, #504]	; (800ce78 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800cc80:	ed93 7a00 	vldr	s14, [r3]
 800cc84:	4b7d      	ldr	r3, [pc, #500]	; (800ce7c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800cc86:	edd3 6a00 	vldr	s13, [r3]
 800cc8a:	4b7c      	ldr	r3, [pc, #496]	; (800ce7c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800cc8c:	ed93 6a01 	vldr	s12, [r3, #4]
 800cc90:	4b7a      	ldr	r3, [pc, #488]	; (800ce7c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800cc92:	edd3 5a02 	vldr	s11, [r3, #8]
 800cc96:	eef0 2a65 	vmov.f32	s5, s11
 800cc9a:	eeb0 2a46 	vmov.f32	s4, s12
 800cc9e:	eef0 1a66 	vmov.f32	s3, s13
 800cca2:	ed9f 1a77 	vldr	s2, [pc, #476]	; 800ce80 <HAL_TIM_PeriodElapsedCallback+0x350>
 800cca6:	eef0 0a47 	vmov.f32	s1, s14
 800ccaa:	eeb0 0a67 	vmov.f32	s0, s15
 800ccae:	f7fc f883 	bl	8008db8 <Side_Wall_Control>
	    	   mode.imu = 0;
 800ccb2:	4a65      	ldr	r2, [pc, #404]	; (800ce48 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800ccb4:	7993      	ldrb	r3, [r2, #6]
 800ccb6:	f36f 0300 	bfc	r3, #0, #1
 800ccba:	7193      	strb	r3, [r2, #6]
	    	   break;
 800ccbc:	e128      	b.n	800cf10 <HAL_TIM_PeriodElapsedCallback+0x3e0>
	    	   Left_Wall_Control(distance_wall_left, fl_average,T8, Wall.KP, Wall.KI, Wall.KD);
 800ccbe:	4b71      	ldr	r3, [pc, #452]	; (800ce84 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800ccc0:	edd3 7a00 	vldr	s15, [r3]
 800ccc4:	4b6c      	ldr	r3, [pc, #432]	; (800ce78 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800ccc6:	ed93 7a00 	vldr	s14, [r3]
 800ccca:	4b6c      	ldr	r3, [pc, #432]	; (800ce7c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800cccc:	edd3 6a00 	vldr	s13, [r3]
 800ccd0:	4b6a      	ldr	r3, [pc, #424]	; (800ce7c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800ccd2:	ed93 6a01 	vldr	s12, [r3, #4]
 800ccd6:	4b69      	ldr	r3, [pc, #420]	; (800ce7c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800ccd8:	edd3 5a02 	vldr	s11, [r3, #8]
 800ccdc:	eef0 2a65 	vmov.f32	s5, s11
 800cce0:	eeb0 2a46 	vmov.f32	s4, s12
 800cce4:	eef0 1a66 	vmov.f32	s3, s13
 800cce8:	ed9f 1a65 	vldr	s2, [pc, #404]	; 800ce80 <HAL_TIM_PeriodElapsedCallback+0x350>
 800ccec:	eef0 0a47 	vmov.f32	s1, s14
 800ccf0:	eeb0 0a67 	vmov.f32	s0, s15
 800ccf4:	f7fc f928 	bl	8008f48 <Left_Wall_Control>
	    	   mode.imu = 0;
 800ccf8:	4a53      	ldr	r2, [pc, #332]	; (800ce48 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800ccfa:	7993      	ldrb	r3, [r2, #6]
 800ccfc:	f36f 0300 	bfc	r3, #0, #1
 800cd00:	7193      	strb	r3, [r2, #6]
	    	   break;
 800cd02:	e105      	b.n	800cf10 <HAL_TIM_PeriodElapsedCallback+0x3e0>
	    	   Right_Wall_Control(distance_wall_right, fr_average,T8, Wall.KP, Wall.KI, Wall.KD);
 800cd04:	4b60      	ldr	r3, [pc, #384]	; (800ce88 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800cd06:	edd3 7a00 	vldr	s15, [r3]
 800cd0a:	4b5a      	ldr	r3, [pc, #360]	; (800ce74 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800cd0c:	ed93 7a00 	vldr	s14, [r3]
 800cd10:	4b5a      	ldr	r3, [pc, #360]	; (800ce7c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800cd12:	edd3 6a00 	vldr	s13, [r3]
 800cd16:	4b59      	ldr	r3, [pc, #356]	; (800ce7c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800cd18:	ed93 6a01 	vldr	s12, [r3, #4]
 800cd1c:	4b57      	ldr	r3, [pc, #348]	; (800ce7c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800cd1e:	edd3 5a02 	vldr	s11, [r3, #8]
 800cd22:	eef0 2a65 	vmov.f32	s5, s11
 800cd26:	eeb0 2a46 	vmov.f32	s4, s12
 800cd2a:	eef0 1a66 	vmov.f32	s3, s13
 800cd2e:	ed9f 1a54 	vldr	s2, [pc, #336]	; 800ce80 <HAL_TIM_PeriodElapsedCallback+0x350>
 800cd32:	eef0 0a47 	vmov.f32	s1, s14
 800cd36:	eeb0 0a67 	vmov.f32	s0, s15
 800cd3a:	f7fc f9d7 	bl	80090ec <Right_Wall_Control>
	    	   mode.imu = 0;
 800cd3e:	4a42      	ldr	r2, [pc, #264]	; (800ce48 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800cd40:	7993      	ldrb	r3, [r2, #6]
 800cd42:	f36f 0300 	bfc	r3, #0, #1
 800cd46:	7193      	strb	r3, [r2, #6]
	    	   break;
 800cd48:	e0e2      	b.n	800cf10 <HAL_TIM_PeriodElapsedCallback+0x3e0>
	    	   IMU_Control(Target_Rad_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800cd4a:	4b50      	ldr	r3, [pc, #320]	; (800ce8c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7fb fb32 	bl	80083b8 <__aeabi_f2d>
 800cd54:	4604      	mov	r4, r0
 800cd56:	460d      	mov	r5, r1
 800cd58:	4b45      	ldr	r3, [pc, #276]	; (800ce70 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800cd5a:	ed93 8b00 	vldr	d8, [r3]
 800cd5e:	4b4c      	ldr	r3, [pc, #304]	; (800ce90 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7fb fb28 	bl	80083b8 <__aeabi_f2d>
 800cd68:	4680      	mov	r8, r0
 800cd6a:	4689      	mov	r9, r1
 800cd6c:	4b48      	ldr	r3, [pc, #288]	; (800ce90 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fb fb21 	bl	80083b8 <__aeabi_f2d>
 800cd76:	4682      	mov	sl, r0
 800cd78:	468b      	mov	fp, r1
 800cd7a:	4b45      	ldr	r3, [pc, #276]	; (800ce90 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800cd7c:	689b      	ldr	r3, [r3, #8]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7fb fb1a 	bl	80083b8 <__aeabi_f2d>
 800cd84:	4602      	mov	r2, r0
 800cd86:	460b      	mov	r3, r1
 800cd88:	ec43 2b15 	vmov	d5, r2, r3
 800cd8c:	ec4b ab14 	vmov	d4, sl, fp
 800cd90:	ec49 8b13 	vmov	d3, r8, r9
 800cd94:	ed9f 2b26 	vldr	d2, [pc, #152]	; 800ce30 <HAL_TIM_PeriodElapsedCallback+0x300>
 800cd98:	eeb0 1a48 	vmov.f32	s2, s16
 800cd9c:	eef0 1a68 	vmov.f32	s3, s17
 800cda0:	ec45 4b10 	vmov	d0, r4, r5
 800cda4:	f7fd fa70 	bl	800a288 <IMU_Control>
	    	   break;
 800cda8:	e0b2      	b.n	800cf10 <HAL_TIM_PeriodElapsedCallback+0x3e0>
	    	   Enc_Velo_Control(T1, velocity.KP, velocity.KI, velocity.KD);
 800cdaa:	4b3a      	ldr	r3, [pc, #232]	; (800ce94 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800cdac:	edd3 7a00 	vldr	s15, [r3]
 800cdb0:	4b38      	ldr	r3, [pc, #224]	; (800ce94 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800cdb2:	ed93 7a01 	vldr	s14, [r3, #4]
 800cdb6:	4b37      	ldr	r3, [pc, #220]	; (800ce94 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800cdb8:	edd3 6a02 	vldr	s13, [r3, #8]
 800cdbc:	eef0 1a66 	vmov.f32	s3, s13
 800cdc0:	eeb0 1a47 	vmov.f32	s2, s14
 800cdc4:	eef0 0a67 	vmov.f32	s1, s15
 800cdc8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800ce60 <HAL_TIM_PeriodElapsedCallback+0x330>
 800cdcc:	f7fc fc3a 	bl	8009644 <Enc_Velo_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800cdd0:	4b27      	ldr	r3, [pc, #156]	; (800ce70 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800cdd2:	ed93 8b00 	vldr	d8, [r3]
 800cdd6:	4b2e      	ldr	r3, [pc, #184]	; (800ce90 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fb faec 	bl	80083b8 <__aeabi_f2d>
 800cde0:	4604      	mov	r4, r0
 800cde2:	460d      	mov	r5, r1
 800cde4:	4b2a      	ldr	r3, [pc, #168]	; (800ce90 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7fb fae5 	bl	80083b8 <__aeabi_f2d>
 800cdee:	4680      	mov	r8, r0
 800cdf0:	4689      	mov	r9, r1
 800cdf2:	4b27      	ldr	r3, [pc, #156]	; (800ce90 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fb fade 	bl	80083b8 <__aeabi_f2d>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	460b      	mov	r3, r1
 800ce00:	ec43 2b15 	vmov	d5, r2, r3
 800ce04:	ec49 8b14 	vmov	d4, r8, r9
 800ce08:	ec45 4b13 	vmov	d3, r4, r5
 800ce0c:	ed9f 2b08 	vldr	d2, [pc, #32]	; 800ce30 <HAL_TIM_PeriodElapsedCallback+0x300>
 800ce10:	eeb0 1a48 	vmov.f32	s2, s16
 800ce14:	eef0 1a68 	vmov.f32	s3, s17
 800ce18:	ed9f 0b07 	vldr	d0, [pc, #28]	; 800ce38 <HAL_TIM_PeriodElapsedCallback+0x308>
 800ce1c:	f7fd fa34 	bl	800a288 <IMU_Control>
	    	   break;
 800ce20:	e076      	b.n	800cf10 <HAL_TIM_PeriodElapsedCallback+0x3e0>
	    	   mode.imu = 0;
 800ce22:	4a09      	ldr	r2, [pc, #36]	; (800ce48 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800ce24:	7993      	ldrb	r3, [r2, #6]
 800ce26:	f36f 0300 	bfc	r3, #0, #1
 800ce2a:	7193      	strb	r3, [r2, #6]
	    	   break;
 800ce2c:	e070      	b.n	800cf10 <HAL_TIM_PeriodElapsedCallback+0x3e0>
 800ce2e:	bf00      	nop
 800ce30:	d2f1a9fc 	.word	0xd2f1a9fc
 800ce34:	3f50624d 	.word	0x3f50624d
	...
 800ce40:	20016130 	.word	0x20016130
 800ce44:	20000fa8 	.word	0x20000fa8
 800ce48:	20000cf4 	.word	0x20000cf4
 800ce4c:	40000400 	.word	0x40000400
 800ce50:	20000cd0 	.word	0x20000cd0
 800ce54:	40000800 	.word	0x40000800
 800ce58:	20000cdc 	.word	0x20000cdc
 800ce5c:	20000fb4 	.word	0x20000fb4
 800ce60:	3a83126f 	.word	0x3a83126f
 800ce64:	20005064 	.word	0x20005064
 800ce68:	20005070 	.word	0x20005070
 800ce6c:	200050d0 	.word	0x200050d0
 800ce70:	20000f88 	.word	0x20000f88
 800ce74:	20016558 	.word	0x20016558
 800ce78:	2000508c 	.word	0x2000508c
 800ce7c:	20000cac 	.word	0x20000cac
 800ce80:	3851b717 	.word	0x3851b717
 800ce84:	20000024 	.word	0x20000024
 800ce88:	20000020 	.word	0x20000020
 800ce8c:	20000f74 	.word	0x20000f74
 800ce90:	20000cc4 	.word	0x20000cc4
 800ce94:	20000cb8 	.word	0x20000cb8
	    	   Right_Velo_Control(Target_R_velo, R_velocity,T1, velocity.KP, velocity.KI, velocity.KD);
 800ce98:	4b85      	ldr	r3, [pc, #532]	; (800d0b0 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800ce9a:	edd3 7a00 	vldr	s15, [r3]
 800ce9e:	4b85      	ldr	r3, [pc, #532]	; (800d0b4 <HAL_TIM_PeriodElapsedCallback+0x584>)
 800cea0:	ed93 7a00 	vldr	s14, [r3]
 800cea4:	4b84      	ldr	r3, [pc, #528]	; (800d0b8 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800cea6:	edd3 6a00 	vldr	s13, [r3]
 800ceaa:	4b83      	ldr	r3, [pc, #524]	; (800d0b8 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800ceac:	ed93 6a01 	vldr	s12, [r3, #4]
 800ceb0:	4b81      	ldr	r3, [pc, #516]	; (800d0b8 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800ceb2:	edd3 5a02 	vldr	s11, [r3, #8]
 800ceb6:	eef0 2a65 	vmov.f32	s5, s11
 800ceba:	eeb0 2a46 	vmov.f32	s4, s12
 800cebe:	eef0 1a66 	vmov.f32	s3, s13
 800cec2:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 800d0bc <HAL_TIM_PeriodElapsedCallback+0x58c>
 800cec6:	eef0 0a47 	vmov.f32	s1, s14
 800ceca:	eeb0 0a67 	vmov.f32	s0, s15
 800cece:	f7fc fa9d 	bl	800940c <Right_Velo_Control>
	    	   Left_Velo_Control(Target_L_velo, L_velocity,T1, velocity.KP, velocity.KI, velocity.KD);
 800ced2:	4b7b      	ldr	r3, [pc, #492]	; (800d0c0 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800ced4:	edd3 7a00 	vldr	s15, [r3]
 800ced8:	4b7a      	ldr	r3, [pc, #488]	; (800d0c4 <HAL_TIM_PeriodElapsedCallback+0x594>)
 800ceda:	ed93 7a00 	vldr	s14, [r3]
 800cede:	4b76      	ldr	r3, [pc, #472]	; (800d0b8 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800cee0:	edd3 6a00 	vldr	s13, [r3]
 800cee4:	4b74      	ldr	r3, [pc, #464]	; (800d0b8 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800cee6:	ed93 6a01 	vldr	s12, [r3, #4]
 800ceea:	4b73      	ldr	r3, [pc, #460]	; (800d0b8 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800ceec:	edd3 5a02 	vldr	s11, [r3, #8]
 800cef0:	eef0 2a65 	vmov.f32	s5, s11
 800cef4:	eeb0 2a46 	vmov.f32	s4, s12
 800cef8:	eef0 1a66 	vmov.f32	s3, s13
 800cefc:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800d0bc <HAL_TIM_PeriodElapsedCallback+0x58c>
 800cf00:	eef0 0a47 	vmov.f32	s1, s14
 800cf04:	eeb0 0a67 	vmov.f32	s0, s15
 800cf08:	f7fc fb0e 	bl	8009528 <Left_Velo_Control>
	    	   break;
 800cf0c:	e000      	b.n	800cf10 <HAL_TIM_PeriodElapsedCallback+0x3e0>
	    	   break;
 800cf0e:	bf00      	nop
	    if( mode.accel == 1 ){
 800cf10:	4b6d      	ldr	r3, [pc, #436]	; (800d0c8 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800cf12:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d116      	bne.n	800cf48 <HAL_TIM_PeriodElapsedCallback+0x418>
		  if(Target_velocity < SEARCH_SPEED){
 800cf1a:	4b6c      	ldr	r3, [pc, #432]	; (800d0cc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800cf1c:	edd3 7a00 	vldr	s15, [r3]
 800cf20:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800d0d0 <HAL_TIM_PeriodElapsedCallback+0x5a0>
 800cf24:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf2c:	f140 80fd 	bpl.w	800d12a <HAL_TIM_PeriodElapsedCallback+0x5fa>
			Target_velocity += a_start;
 800cf30:	4b66      	ldr	r3, [pc, #408]	; (800d0cc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800cf32:	ed93 7a00 	vldr	s14, [r3]
 800cf36:	4b67      	ldr	r3, [pc, #412]	; (800d0d4 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800cf38:	edd3 7a00 	vldr	s15, [r3]
 800cf3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf40:	4b62      	ldr	r3, [pc, #392]	; (800d0cc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800cf42:	edc3 7a00 	vstr	s15, [r3]
 800cf46:	e0f0      	b.n	800d12a <HAL_TIM_PeriodElapsedCallback+0x5fa>
	    else if( mode.accel == 2 ){
 800cf48:	4b5f      	ldr	r3, [pc, #380]	; (800d0c8 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800cf4a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800cf4e:	2b02      	cmp	r3, #2
 800cf50:	d116      	bne.n	800cf80 <HAL_TIM_PeriodElapsedCallback+0x450>
		  if(Target_velocity < SEARCH_SPEED){
 800cf52:	4b5e      	ldr	r3, [pc, #376]	; (800d0cc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800cf54:	edd3 7a00 	vldr	s15, [r3]
 800cf58:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800d0d0 <HAL_TIM_PeriodElapsedCallback+0x5a0>
 800cf5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf64:	f140 80e1 	bpl.w	800d12a <HAL_TIM_PeriodElapsedCallback+0x5fa>
			Target_velocity += a;
 800cf68:	4b58      	ldr	r3, [pc, #352]	; (800d0cc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800cf6a:	ed93 7a00 	vldr	s14, [r3]
 800cf6e:	4b5a      	ldr	r3, [pc, #360]	; (800d0d8 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800cf70:	edd3 7a00 	vldr	s15, [r3]
 800cf74:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf78:	4b54      	ldr	r3, [pc, #336]	; (800d0cc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800cf7a:	edc3 7a00 	vstr	s15, [r3]
 800cf7e:	e0d4      	b.n	800d12a <HAL_TIM_PeriodElapsedCallback+0x5fa>
	    else if( mode.accel == 3 ){
 800cf80:	4b51      	ldr	r3, [pc, #324]	; (800d0c8 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800cf82:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800cf86:	2b03      	cmp	r3, #3
 800cf88:	d114      	bne.n	800cfb4 <HAL_TIM_PeriodElapsedCallback+0x484>
		  if(Target_velocity > 0){
 800cf8a:	4b50      	ldr	r3, [pc, #320]	; (800d0cc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800cf8c:	edd3 7a00 	vldr	s15, [r3]
 800cf90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf98:	f340 80c7 	ble.w	800d12a <HAL_TIM_PeriodElapsedCallback+0x5fa>
			Target_velocity -= a;
 800cf9c:	4b4b      	ldr	r3, [pc, #300]	; (800d0cc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800cf9e:	ed93 7a00 	vldr	s14, [r3]
 800cfa2:	4b4d      	ldr	r3, [pc, #308]	; (800d0d8 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800cfa4:	edd3 7a00 	vldr	s15, [r3]
 800cfa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfac:	4b47      	ldr	r3, [pc, #284]	; (800d0cc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800cfae:	edc3 7a00 	vstr	s15, [r3]
 800cfb2:	e0ba      	b.n	800d12a <HAL_TIM_PeriodElapsedCallback+0x5fa>
	    else if( mode.accel == 4 ){ //左に旋回�?�?
 800cfb4:	4b44      	ldr	r3, [pc, #272]	; (800d0c8 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800cfb6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800cfba:	2b04      	cmp	r3, #4
 800cfbc:	d124      	bne.n	800d008 <HAL_TIM_PeriodElapsedCallback+0x4d8>
	      if(Target_R_velo < SEARCH_SPEED * 124.6/90){
 800cfbe:	4b3c      	ldr	r3, [pc, #240]	; (800d0b0 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fb f9f8 	bl	80083b8 <__aeabi_f2d>
 800cfc8:	a337      	add	r3, pc, #220	; (adr r3, 800d0a8 <HAL_TIM_PeriodElapsedCallback+0x578>)
 800cfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfce:	f7fb fcbd 	bl	800894c <__aeabi_dcmplt>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f000 80a8 	beq.w	800d12a <HAL_TIM_PeriodElapsedCallback+0x5fa>
	    	Target_R_velo += a_curve;
 800cfda:	4b35      	ldr	r3, [pc, #212]	; (800d0b0 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800cfdc:	ed93 7a00 	vldr	s14, [r3]
 800cfe0:	4b3e      	ldr	r3, [pc, #248]	; (800d0dc <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800cfe2:	edd3 7a00 	vldr	s15, [r3]
 800cfe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfea:	4b31      	ldr	r3, [pc, #196]	; (800d0b0 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800cfec:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo -= a_curve;
 800cff0:	4b33      	ldr	r3, [pc, #204]	; (800d0c0 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800cff2:	ed93 7a00 	vldr	s14, [r3]
 800cff6:	4b39      	ldr	r3, [pc, #228]	; (800d0dc <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800cff8:	edd3 7a00 	vldr	s15, [r3]
 800cffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d000:	4b2f      	ldr	r3, [pc, #188]	; (800d0c0 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800d002:	edc3 7a00 	vstr	s15, [r3]
 800d006:	e090      	b.n	800d12a <HAL_TIM_PeriodElapsedCallback+0x5fa>
	    else if( mode.accel == 5 ){//左に旋回減�??
 800d008:	4b2f      	ldr	r3, [pc, #188]	; (800d0c8 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800d00a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d00e:	2b05      	cmp	r3, #5
 800d010:	d121      	bne.n	800d056 <HAL_TIM_PeriodElapsedCallback+0x526>
		      if(Target_R_velo > SEARCH_SPEED){
 800d012:	4b27      	ldr	r3, [pc, #156]	; (800d0b0 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800d014:	edd3 7a00 	vldr	s15, [r3]
 800d018:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800d0d0 <HAL_TIM_PeriodElapsedCallback+0x5a0>
 800d01c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d024:	f340 8081 	ble.w	800d12a <HAL_TIM_PeriodElapsedCallback+0x5fa>
		    	Target_R_velo -= a_curve;
 800d028:	4b21      	ldr	r3, [pc, #132]	; (800d0b0 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800d02a:	ed93 7a00 	vldr	s14, [r3]
 800d02e:	4b2b      	ldr	r3, [pc, #172]	; (800d0dc <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800d030:	edd3 7a00 	vldr	s15, [r3]
 800d034:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d038:	4b1d      	ldr	r3, [pc, #116]	; (800d0b0 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800d03a:	edc3 7a00 	vstr	s15, [r3]
		    	Target_L_velo += a_curve;
 800d03e:	4b20      	ldr	r3, [pc, #128]	; (800d0c0 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800d040:	ed93 7a00 	vldr	s14, [r3]
 800d044:	4b25      	ldr	r3, [pc, #148]	; (800d0dc <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800d046:	edd3 7a00 	vldr	s15, [r3]
 800d04a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d04e:	4b1c      	ldr	r3, [pc, #112]	; (800d0c0 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800d050:	edc3 7a00 	vstr	s15, [r3]
 800d054:	e069      	b.n	800d12a <HAL_TIM_PeriodElapsedCallback+0x5fa>
	    else if( mode.accel == 6 ){//右に旋回�?�?
 800d056:	4b1c      	ldr	r3, [pc, #112]	; (800d0c8 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800d058:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d05c:	2b06      	cmp	r3, #6
 800d05e:	d13f      	bne.n	800d0e0 <HAL_TIM_PeriodElapsedCallback+0x5b0>
	      if(Target_L_velo < SEARCH_SPEED * 124.6/90){
 800d060:	4b17      	ldr	r3, [pc, #92]	; (800d0c0 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4618      	mov	r0, r3
 800d066:	f7fb f9a7 	bl	80083b8 <__aeabi_f2d>
 800d06a:	a30f      	add	r3, pc, #60	; (adr r3, 800d0a8 <HAL_TIM_PeriodElapsedCallback+0x578>)
 800d06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d070:	f7fb fc6c 	bl	800894c <__aeabi_dcmplt>
 800d074:	4603      	mov	r3, r0
 800d076:	2b00      	cmp	r3, #0
 800d078:	d057      	beq.n	800d12a <HAL_TIM_PeriodElapsedCallback+0x5fa>
	    	Target_R_velo -= a_curve;
 800d07a:	4b0d      	ldr	r3, [pc, #52]	; (800d0b0 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800d07c:	ed93 7a00 	vldr	s14, [r3]
 800d080:	4b16      	ldr	r3, [pc, #88]	; (800d0dc <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800d082:	edd3 7a00 	vldr	s15, [r3]
 800d086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d08a:	4b09      	ldr	r3, [pc, #36]	; (800d0b0 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800d08c:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo += a_curve;
 800d090:	4b0b      	ldr	r3, [pc, #44]	; (800d0c0 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800d092:	ed93 7a00 	vldr	s14, [r3]
 800d096:	4b11      	ldr	r3, [pc, #68]	; (800d0dc <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800d098:	edd3 7a00 	vldr	s15, [r3]
 800d09c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0a0:	4b07      	ldr	r3, [pc, #28]	; (800d0c0 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800d0a2:	edc3 7a00 	vstr	s15, [r3]
 800d0a6:	e040      	b.n	800d12a <HAL_TIM_PeriodElapsedCallback+0x5fa>
 800d0a8:	44444444 	.word	0x44444444
 800d0ac:	4074c444 	.word	0x4074c444
 800d0b0:	2000504c 	.word	0x2000504c
 800d0b4:	20005070 	.word	0x20005070
 800d0b8:	20000cb8 	.word	0x20000cb8
 800d0bc:	3a83126f 	.word	0x3a83126f
 800d0c0:	2000506c 	.word	0x2000506c
 800d0c4:	20005064 	.word	0x20005064
 800d0c8:	20000cf4 	.word	0x20000cf4
 800d0cc:	20000f70 	.word	0x20000f70
 800d0d0:	43700000 	.word	0x43700000
 800d0d4:	20000008 	.word	0x20000008
 800d0d8:	2000000c 	.word	0x2000000c
 800d0dc:	20000010 	.word	0x20000010
	    else if( mode.accel == 7 ){//右に旋回減�??
 800d0e0:	4b57      	ldr	r3, [pc, #348]	; (800d240 <HAL_TIM_PeriodElapsedCallback+0x710>)
 800d0e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d0e6:	2b07      	cmp	r3, #7
 800d0e8:	d11f      	bne.n	800d12a <HAL_TIM_PeriodElapsedCallback+0x5fa>
	      if(Target_L_velo > SEARCH_SPEED){
 800d0ea:	4b56      	ldr	r3, [pc, #344]	; (800d244 <HAL_TIM_PeriodElapsedCallback+0x714>)
 800d0ec:	edd3 7a00 	vldr	s15, [r3]
 800d0f0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800d248 <HAL_TIM_PeriodElapsedCallback+0x718>
 800d0f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0fc:	dd15      	ble.n	800d12a <HAL_TIM_PeriodElapsedCallback+0x5fa>
	    	Target_R_velo += a_curve;
 800d0fe:	4b53      	ldr	r3, [pc, #332]	; (800d24c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 800d100:	ed93 7a00 	vldr	s14, [r3]
 800d104:	4b52      	ldr	r3, [pc, #328]	; (800d250 <HAL_TIM_PeriodElapsedCallback+0x720>)
 800d106:	edd3 7a00 	vldr	s15, [r3]
 800d10a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d10e:	4b4f      	ldr	r3, [pc, #316]	; (800d24c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 800d110:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo -= a_curve;
 800d114:	4b4b      	ldr	r3, [pc, #300]	; (800d244 <HAL_TIM_PeriodElapsedCallback+0x714>)
 800d116:	ed93 7a00 	vldr	s14, [r3]
 800d11a:	4b4d      	ldr	r3, [pc, #308]	; (800d250 <HAL_TIM_PeriodElapsedCallback+0x720>)
 800d11c:	edd3 7a00 	vldr	s15, [r3]
 800d120:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d124:	4b47      	ldr	r3, [pc, #284]	; (800d244 <HAL_TIM_PeriodElapsedCallback+0x714>)
 800d126:	edc3 7a00 	vstr	s15, [r3]
	    Velocity_Control(Target_velocity, Body_velocity, T1,velocity.KP ,velocity.KI, velocity.KD);
 800d12a:	4b4a      	ldr	r3, [pc, #296]	; (800d254 <HAL_TIM_PeriodElapsedCallback+0x724>)
 800d12c:	edd3 7a00 	vldr	s15, [r3]
 800d130:	4b49      	ldr	r3, [pc, #292]	; (800d258 <HAL_TIM_PeriodElapsedCallback+0x728>)
 800d132:	ed93 7a00 	vldr	s14, [r3]
 800d136:	4b49      	ldr	r3, [pc, #292]	; (800d25c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 800d138:	edd3 6a00 	vldr	s13, [r3]
 800d13c:	4b47      	ldr	r3, [pc, #284]	; (800d25c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 800d13e:	ed93 6a01 	vldr	s12, [r3, #4]
 800d142:	4b46      	ldr	r3, [pc, #280]	; (800d25c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 800d144:	edd3 5a02 	vldr	s11, [r3, #8]
 800d148:	eef0 2a65 	vmov.f32	s5, s11
 800d14c:	eeb0 2a46 	vmov.f32	s4, s12
 800d150:	eef0 1a66 	vmov.f32	s3, s13
 800d154:	ed9f 1a42 	vldr	s2, [pc, #264]	; 800d260 <HAL_TIM_PeriodElapsedCallback+0x730>
 800d158:	eef0 0a47 	vmov.f32	s1, s14
 800d15c:	eeb0 0a67 	vmov.f32	s0, s15
 800d160:	f7fc f896 	bl	8009290 <Velocity_Control>
		L_motor = L_v_control + L_wall + L_leftwall + L_rightwall + L_rotate + L_angular_velocity + L_env_control + L_velo_control;
 800d164:	4b3f      	ldr	r3, [pc, #252]	; (800d264 <HAL_TIM_PeriodElapsedCallback+0x734>)
 800d166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	4b3e      	ldr	r3, [pc, #248]	; (800d268 <HAL_TIM_PeriodElapsedCallback+0x738>)
 800d16e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d172:	b29b      	uxth	r3, r3
 800d174:	4413      	add	r3, r2
 800d176:	b29a      	uxth	r2, r3
 800d178:	4b3c      	ldr	r3, [pc, #240]	; (800d26c <HAL_TIM_PeriodElapsedCallback+0x73c>)
 800d17a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d17e:	b29b      	uxth	r3, r3
 800d180:	4413      	add	r3, r2
 800d182:	b29a      	uxth	r2, r3
 800d184:	4b3a      	ldr	r3, [pc, #232]	; (800d270 <HAL_TIM_PeriodElapsedCallback+0x740>)
 800d186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	4413      	add	r3, r2
 800d18e:	b29a      	uxth	r2, r3
 800d190:	4b38      	ldr	r3, [pc, #224]	; (800d274 <HAL_TIM_PeriodElapsedCallback+0x744>)
 800d192:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d196:	b29b      	uxth	r3, r3
 800d198:	4413      	add	r3, r2
 800d19a:	b29a      	uxth	r2, r3
 800d19c:	4b36      	ldr	r3, [pc, #216]	; (800d278 <HAL_TIM_PeriodElapsedCallback+0x748>)
 800d19e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	4413      	add	r3, r2
 800d1a6:	b29a      	uxth	r2, r3
 800d1a8:	4b34      	ldr	r3, [pc, #208]	; (800d27c <HAL_TIM_PeriodElapsedCallback+0x74c>)
 800d1aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1ae:	b29b      	uxth	r3, r3
 800d1b0:	4413      	add	r3, r2
 800d1b2:	b29a      	uxth	r2, r3
 800d1b4:	4b32      	ldr	r3, [pc, #200]	; (800d280 <HAL_TIM_PeriodElapsedCallback+0x750>)
 800d1b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	4413      	add	r3, r2
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	b21a      	sxth	r2, r3
 800d1c2:	4b30      	ldr	r3, [pc, #192]	; (800d284 <HAL_TIM_PeriodElapsedCallback+0x754>)
 800d1c4:	801a      	strh	r2, [r3, #0]
		R_motor = R_v_control + R_wall + R_leftwall + R_rightwall + R_rotate + R_angular_velocity + R_env_control + R_velo_control;
 800d1c6:	4b30      	ldr	r3, [pc, #192]	; (800d288 <HAL_TIM_PeriodElapsedCallback+0x758>)
 800d1c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1cc:	b29a      	uxth	r2, r3
 800d1ce:	4b2f      	ldr	r3, [pc, #188]	; (800d28c <HAL_TIM_PeriodElapsedCallback+0x75c>)
 800d1d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	4413      	add	r3, r2
 800d1d8:	b29a      	uxth	r2, r3
 800d1da:	4b2d      	ldr	r3, [pc, #180]	; (800d290 <HAL_TIM_PeriodElapsedCallback+0x760>)
 800d1dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	4413      	add	r3, r2
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	4b2b      	ldr	r3, [pc, #172]	; (800d294 <HAL_TIM_PeriodElapsedCallback+0x764>)
 800d1e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	4413      	add	r3, r2
 800d1f0:	b29a      	uxth	r2, r3
 800d1f2:	4b29      	ldr	r3, [pc, #164]	; (800d298 <HAL_TIM_PeriodElapsedCallback+0x768>)
 800d1f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	4413      	add	r3, r2
 800d1fc:	b29a      	uxth	r2, r3
 800d1fe:	4b27      	ldr	r3, [pc, #156]	; (800d29c <HAL_TIM_PeriodElapsedCallback+0x76c>)
 800d200:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d204:	b29b      	uxth	r3, r3
 800d206:	4413      	add	r3, r2
 800d208:	b29a      	uxth	r2, r3
 800d20a:	4b25      	ldr	r3, [pc, #148]	; (800d2a0 <HAL_TIM_PeriodElapsedCallback+0x770>)
 800d20c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d210:	b29b      	uxth	r3, r3
 800d212:	4413      	add	r3, r2
 800d214:	b29a      	uxth	r2, r3
 800d216:	4b23      	ldr	r3, [pc, #140]	; (800d2a4 <HAL_TIM_PeriodElapsedCallback+0x774>)
 800d218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	4413      	add	r3, r2
 800d220:	b29b      	uxth	r3, r3
 800d222:	b21a      	sxth	r2, r3
 800d224:	4b20      	ldr	r3, [pc, #128]	; (800d2a8 <HAL_TIM_PeriodElapsedCallback+0x778>)
 800d226:	801a      	strh	r2, [r3, #0]
		Motor_Switch(L_motor,R_motor);
 800d228:	4b16      	ldr	r3, [pc, #88]	; (800d284 <HAL_TIM_PeriodElapsedCallback+0x754>)
 800d22a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d22e:	4b1e      	ldr	r3, [pc, #120]	; (800d2a8 <HAL_TIM_PeriodElapsedCallback+0x778>)
 800d230:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d234:	4619      	mov	r1, r3
 800d236:	4610      	mov	r0, r2
 800d238:	f7fd fa7c 	bl	800a734 <Motor_Switch>
		break;
 800d23c:	e103      	b.n	800d446 <HAL_TIM_PeriodElapsedCallback+0x916>
 800d23e:	bf00      	nop
 800d240:	20000cf4 	.word	0x20000cf4
 800d244:	2000506c 	.word	0x2000506c
 800d248:	43700000 	.word	0x43700000
 800d24c:	2000504c 	.word	0x2000504c
 800d250:	20000010 	.word	0x20000010
 800d254:	20000f70 	.word	0x20000f70
 800d258:	200050d0 	.word	0x200050d0
 800d25c:	20000cb8 	.word	0x20000cb8
 800d260:	3a83126f 	.word	0x3a83126f
 800d264:	20005050 	.word	0x20005050
 800d268:	20005068 	.word	0x20005068
 800d26c:	20005052 	.word	0x20005052
 800d270:	20005044 	.word	0x20005044
 800d274:	20005060 	.word	0x20005060
 800d278:	2000505a 	.word	0x2000505a
 800d27c:	20005046 	.word	0x20005046
 800d280:	2000506a 	.word	0x2000506a
 800d284:	200165c0 	.word	0x200165c0
 800d288:	20005058 	.word	0x20005058
 800d28c:	20005056 	.word	0x20005056
 800d290:	20005074 	.word	0x20005074
 800d294:	2000505c 	.word	0x2000505c
 800d298:	20005062 	.word	0x20005062
 800d29c:	2000505e 	.word	0x2000505e
 800d2a0:	20005054 	.word	0x20005054
 800d2a4:	20005048 	.word	0x20005048
 800d2a8:	20015b2c 	.word	0x20015b2c
			Tim_Count();
 800d2ac:	f7fc fc14 	bl	8009ad8 <Tim_Count>
	      	EN3_L.count = TIM3 -> CNT;
 800d2b0:	4b6f      	ldr	r3, [pc, #444]	; (800d470 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800d2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	4b6f      	ldr	r3, [pc, #444]	; (800d474 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800d2b8:	601a      	str	r2, [r3, #0]
		    EN4_R.count = TIM4 -> CNT;
 800d2ba:	4b6f      	ldr	r3, [pc, #444]	; (800d478 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800d2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2be:	461a      	mov	r2, r3
 800d2c0:	4b6e      	ldr	r3, [pc, #440]	; (800d47c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800d2c2:	601a      	str	r2, [r3, #0]
		    EN3_L.count = -(EN3_L.count - (30000-1));
 800d2c4:	4b6b      	ldr	r3, [pc, #428]	; (800d474 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800d2cc:	332f      	adds	r3, #47	; 0x2f
 800d2ce:	4a69      	ldr	r2, [pc, #420]	; (800d474 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800d2d0:	6013      	str	r3, [r2, #0]
		    EN4_R.count = -(EN4_R.count - (30000-1));
 800d2d2:	4b6a      	ldr	r3, [pc, #424]	; (800d47c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800d2da:	332f      	adds	r3, #47	; 0x2f
 800d2dc:	4a67      	ldr	r2, [pc, #412]	; (800d47c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800d2de:	6013      	str	r3, [r2, #0]
		    mode.enc = Encoder_Count(mode.enc);
 800d2e0:	4b67      	ldr	r3, [pc, #412]	; (800d480 <HAL_TIM_PeriodElapsedCallback+0x950>)
 800d2e2:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800d2e6:	b21b      	sxth	r3, r3
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7fd fbf7 	bl	800aadc <Encoder_Count>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	b25a      	sxtb	r2, r3
 800d2f2:	4b63      	ldr	r3, [pc, #396]	; (800d480 <HAL_TIM_PeriodElapsedCallback+0x950>)
 800d2f4:	70da      	strb	r2, [r3, #3]
		    All_Pulse_anytime += EN4_R.count + EN3_L.count;
 800d2f6:	4b61      	ldr	r3, [pc, #388]	; (800d47c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	4b5e      	ldr	r3, [pc, #376]	; (800d474 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	441a      	add	r2, r3
 800d300:	4b60      	ldr	r3, [pc, #384]	; (800d484 <HAL_TIM_PeriodElapsedCallback+0x954>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4413      	add	r3, r2
 800d306:	4a5f      	ldr	r2, [pc, #380]	; (800d484 <HAL_TIM_PeriodElapsedCallback+0x954>)
 800d308:	6013      	str	r3, [r2, #0]
		    Encoder_Reset();
 800d30a:	f7fd fbd3 	bl	800aab4 <Encoder_Reset>
		    L_velocity = Velocity_Get( (float)EN3_L.count , T1 );
 800d30e:	4b59      	ldr	r3, [pc, #356]	; (800d474 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	ee07 3a90 	vmov	s15, r3
 800d316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d31a:	eddf 0a5b 	vldr	s1, [pc, #364]	; 800d488 <HAL_TIM_PeriodElapsedCallback+0x958>
 800d31e:	eeb0 0a67 	vmov.f32	s0, s15
 800d322:	f7fd fb9f 	bl	800aa64 <Velocity_Get>
 800d326:	eef0 7a40 	vmov.f32	s15, s0
 800d32a:	4b58      	ldr	r3, [pc, #352]	; (800d48c <HAL_TIM_PeriodElapsedCallback+0x95c>)
 800d32c:	edc3 7a00 	vstr	s15, [r3]
			R_velocity = Velocity_Get( (float)EN4_R.count , T1 );
 800d330:	4b52      	ldr	r3, [pc, #328]	; (800d47c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	ee07 3a90 	vmov	s15, r3
 800d338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d33c:	eddf 0a52 	vldr	s1, [pc, #328]	; 800d488 <HAL_TIM_PeriodElapsedCallback+0x958>
 800d340:	eeb0 0a67 	vmov.f32	s0, s15
 800d344:	f7fd fb8e 	bl	800aa64 <Velocity_Get>
 800d348:	eef0 7a40 	vmov.f32	s15, s0
 800d34c:	4b50      	ldr	r3, [pc, #320]	; (800d490 <HAL_TIM_PeriodElapsedCallback+0x960>)
 800d34e:	edc3 7a00 	vstr	s15, [r3]
			imu_data = IMU_Get_Data();
 800d352:	f7fc fed5 	bl	800a100 <IMU_Get_Data>
 800d356:	eeb0 7a40 	vmov.f32	s14, s0
 800d35a:	eef0 7a60 	vmov.f32	s15, s1
 800d35e:	4b4d      	ldr	r3, [pc, #308]	; (800d494 <HAL_TIM_PeriodElapsedCallback+0x964>)
 800d360:	ed83 7b00 	vstr	d7, [r3]
			if(timer <= 48000){
 800d364:	4b4c      	ldr	r3, [pc, #304]	; (800d498 <HAL_TIM_PeriodElapsedCallback+0x968>)
 800d366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d36a:	a33d      	add	r3, pc, #244	; (adr r3, 800d460 <HAL_TIM_PeriodElapsedCallback+0x930>)
 800d36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d370:	f7fb faf6 	bl	8008960 <__aeabi_dcmple>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d059      	beq.n	800d42e <HAL_TIM_PeriodElapsedCallback+0x8fe>
				if((int)timer % 60 == 0){
 800d37a:	4b47      	ldr	r3, [pc, #284]	; (800d498 <HAL_TIM_PeriodElapsedCallback+0x968>)
 800d37c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d380:	4618      	mov	r0, r3
 800d382:	4621      	mov	r1, r4
 800d384:	f7fb fb20 	bl	80089c8 <__aeabi_d2iz>
 800d388:	4601      	mov	r1, r0
 800d38a:	4b44      	ldr	r3, [pc, #272]	; (800d49c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 800d38c:	fb83 2301 	smull	r2, r3, r3, r1
 800d390:	440b      	add	r3, r1
 800d392:	115a      	asrs	r2, r3, #5
 800d394:	17cb      	asrs	r3, r1, #31
 800d396:	1ad2      	subs	r2, r2, r3
 800d398:	4613      	mov	r3, r2
 800d39a:	011b      	lsls	r3, r3, #4
 800d39c:	1a9b      	subs	r3, r3, r2
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	1aca      	subs	r2, r1, r3
 800d3a2:	2a00      	cmp	r2, #0
 800d3a4:	d112      	bne.n	800d3cc <HAL_TIM_PeriodElapsedCallback+0x89c>
			     identify[k] =  imu_data;//角速度
 800d3a6:	4b3b      	ldr	r3, [pc, #236]	; (800d494 <HAL_TIM_PeriodElapsedCallback+0x964>)
 800d3a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d3ac:	4a3c      	ldr	r2, [pc, #240]	; (800d4a0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800d3ae:	6815      	ldr	r5, [r2, #0]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	4621      	mov	r1, r4
 800d3b4:	f7fb fb30 	bl	8008a18 <__aeabi_d2f>
 800d3b8:	4601      	mov	r1, r0
 800d3ba:	4a3a      	ldr	r2, [pc, #232]	; (800d4a4 <HAL_TIM_PeriodElapsedCallback+0x974>)
 800d3bc:	00ab      	lsls	r3, r5, #2
 800d3be:	4413      	add	r3, r2
 800d3c0:	6019      	str	r1, [r3, #0]
			     k++;
 800d3c2:	4b37      	ldr	r3, [pc, #220]	; (800d4a0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	4a35      	ldr	r2, [pc, #212]	; (800d4a0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800d3ca:	6013      	str	r3, [r2, #0]
			i++;
 800d3cc:	4b36      	ldr	r3, [pc, #216]	; (800d4a8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	4a35      	ldr	r2, [pc, #212]	; (800d4a8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800d3d4:	6013      	str	r3, [r2, #0]
			if(i % 60 == 0){
 800d3d6:	4b34      	ldr	r3, [pc, #208]	; (800d4a8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	4b30      	ldr	r3, [pc, #192]	; (800d49c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 800d3dc:	fb83 1302 	smull	r1, r3, r3, r2
 800d3e0:	4413      	add	r3, r2
 800d3e2:	1159      	asrs	r1, r3, #5
 800d3e4:	17d3      	asrs	r3, r2, #31
 800d3e6:	1ac9      	subs	r1, r1, r3
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	011b      	lsls	r3, r3, #4
 800d3ec:	1a5b      	subs	r3, r3, r1
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	1ad1      	subs	r1, r2, r3
 800d3f2:	2900      	cmp	r1, #0
 800d3f4:	d11b      	bne.n	800d42e <HAL_TIM_PeriodElapsedCallback+0x8fe>
				msig_input = 0.06 * msignal[j];
 800d3f6:	4b2d      	ldr	r3, [pc, #180]	; (800d4ac <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4a2d      	ldr	r2, [pc, #180]	; (800d4b0 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	4413      	add	r3, r2
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4618      	mov	r0, r3
 800d404:	f7fa ffd8 	bl	80083b8 <__aeabi_f2d>
 800d408:	a317      	add	r3, pc, #92	; (adr r3, 800d468 <HAL_TIM_PeriodElapsedCallback+0x938>)
 800d40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40e:	f7fb f82b 	bl	8008468 <__aeabi_dmul>
 800d412:	4603      	mov	r3, r0
 800d414:	460c      	mov	r4, r1
 800d416:	4618      	mov	r0, r3
 800d418:	4621      	mov	r1, r4
 800d41a:	f7fb fafd 	bl	8008a18 <__aeabi_d2f>
 800d41e:	4602      	mov	r2, r0
 800d420:	4b24      	ldr	r3, [pc, #144]	; (800d4b4 <HAL_TIM_PeriodElapsedCallback+0x984>)
 800d422:	601a      	str	r2, [r3, #0]
				j++;
 800d424:	4b21      	ldr	r3, [pc, #132]	; (800d4ac <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	3301      	adds	r3, #1
 800d42a:	4a20      	ldr	r2, [pc, #128]	; (800d4ac <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800d42c:	6013      	str	r3, [r2, #0]
			Motor_Switch(L_motor,R_motor);
 800d42e:	4b22      	ldr	r3, [pc, #136]	; (800d4b8 <HAL_TIM_PeriodElapsedCallback+0x988>)
 800d430:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d434:	4b21      	ldr	r3, [pc, #132]	; (800d4bc <HAL_TIM_PeriodElapsedCallback+0x98c>)
 800d436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d43a:	4619      	mov	r1, r3
 800d43c:	4610      	mov	r0, r2
 800d43e:	f7fd f979 	bl	800a734 <Motor_Switch>
			break;
 800d442:	e000      	b.n	800d446 <HAL_TIM_PeriodElapsedCallback+0x916>
	  }

  }
 800d444:	bf00      	nop

  if(htim == &htim8){
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4a1d      	ldr	r2, [pc, #116]	; (800d4c0 <HAL_TIM_PeriodElapsedCallback+0x990>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d101      	bne.n	800d452 <HAL_TIM_PeriodElapsedCallback+0x922>
	 //static int count=0;

	  ADC_Get_Data();
 800d44e:	f7fd f9bb 	bl	800a7c8 <ADC_Get_Data>
//
//	  }
//	  count++;

  }
}
 800d452:	bf00      	nop
 800d454:	3708      	adds	r7, #8
 800d456:	46bd      	mov	sp, r7
 800d458:	ecbd 8b02 	vpop	{d8}
 800d45c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d460:	00000000 	.word	0x00000000
 800d464:	40e77000 	.word	0x40e77000
 800d468:	eb851eb8 	.word	0xeb851eb8
 800d46c:	3faeb851 	.word	0x3faeb851
 800d470:	40000400 	.word	0x40000400
 800d474:	20000cd0 	.word	0x20000cd0
 800d478:	40000800 	.word	0x40000800
 800d47c:	20000cdc 	.word	0x20000cdc
 800d480:	20000cf4 	.word	0x20000cf4
 800d484:	20000fb4 	.word	0x20000fb4
 800d488:	3a83126f 	.word	0x3a83126f
 800d48c:	20005064 	.word	0x20005064
 800d490:	20005070 	.word	0x20005070
 800d494:	20000f88 	.word	0x20000f88
 800d498:	20000fa0 	.word	0x20000fa0
 800d49c:	88888889 	.word	0x88888889
 800d4a0:	2000502c 	.word	0x2000502c
 800d4a4:	20005164 	.word	0x20005164
 800d4a8:	20005030 	.word	0x20005030
 800d4ac:	20005034 	.word	0x20005034
 800d4b0:	2000002c 	.word	0x2000002c
 800d4b4:	20000fd0 	.word	0x20000fd0
 800d4b8:	200165c0 	.word	0x200165c0
 800d4bc:	20015b2c 	.word	0x20015b2c
 800d4c0:	20005090 	.word	0x20005090
 800d4c4:	00000000 	.word	0x00000000

0800d4c8 <Exe_num0>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/*---- DEFINING FUNCTION ----*/

//実行時に切り替えるモード
void Exe_num0(){
<<<<<<< HEAD
 800f68c:	b480      	push	{r7}
 800f68e:	af00      	add	r7, sp, #0

//printf("%lf\r\n",(double)zg);
	mode.control = 0;
 800f690:	4b07      	ldr	r3, [pc, #28]	; (800f6b0 <Exe_num0+0x24>)
 800f692:	2200      	movs	r2, #0
 800f694:	715a      	strb	r2, [r3, #5]
	Target_velocity=SEARCH_SPEED;
 800f696:	4b07      	ldr	r3, [pc, #28]	; (800f6b4 <Exe_num0+0x28>)
 800f698:	4a07      	ldr	r2, [pc, #28]	; (800f6b8 <Exe_num0+0x2c>)
 800f69a:	601a      	str	r2, [r3, #0]
=======
 800d4c8:	b590      	push	{r4, r7, lr}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	mode.control = 3;
 800d4ce:	4b2a      	ldr	r3, [pc, #168]	; (800d578 <Exe_num0+0xb0>)
 800d4d0:	2203      	movs	r2, #3
 800d4d2:	715a      	strb	r2, [r3, #5]
	Target_Rad_velo=0;
<<<<<<< HEAD
 800f69c:	4b07      	ldr	r3, [pc, #28]	; (800f6bc <Exe_num0+0x30>)
 800f69e:	f04f 0200 	mov.w	r2, #0
 800f6a2:	601a      	str	r2, [r3, #0]

}
 800f6a4:	bf00      	nop
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr
 800f6ae:	bf00      	nop
 800f6b0:	20000068 	.word	0x20000068
 800f6b4:	200002e0 	.word	0x200002e0
 800f6b8:	43340000 	.word	0x43340000
 800f6bc:	200002e4 	.word	0x200002e4

0800f6c0 <Exe_num1>:
void Exe_num1(){
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	af00      	add	r7, sp, #0
	  Flash_load();
 800f6c4:	f7fa fc1e 	bl	8009f04 <Flash_load>
  	  HAL_Delay(2000);
 800f6c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f6cc:	f001 fbb8 	bl	8010e40 <HAL_Delay>

  	  mapprint();
 800f6d0:	f7fa fb5c 	bl	8009d8c <mapprint>
  	  while(1);
 800f6d4:	e7fe      	b.n	800f6d4 <Exe_num1+0x14>

0800f6d6 <Exe_num2>:
}
void Exe_num2(){
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	af00      	add	r7, sp, #0
=======
 800d4d4:	4b29      	ldr	r3, [pc, #164]	; (800d57c <Exe_num0+0xb4>)
 800d4d6:	f04f 0200 	mov.w	r2, #0
 800d4da:	601a      	str	r2, [r3, #0]
	Target_velocity=90;
 800d4dc:	4b28      	ldr	r3, [pc, #160]	; (800d580 <Exe_num0+0xb8>)
 800d4de:	4a29      	ldr	r2, [pc, #164]	; (800d584 <Exe_num0+0xbc>)
 800d4e0:	601a      	str	r2, [r3, #0]
	double stating_point_of_time = elapsed_time;
 800d4e2:	4b29      	ldr	r3, [pc, #164]	; (800d588 <Exe_num0+0xc0>)
 800d4e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d4e8:	e9c7 3400 	strd	r3, r4, [r7]
	while(stating_point_of_time + 1 > elapsed_time);
 800d4ec:	bf00      	nop
 800d4ee:	f04f 0200 	mov.w	r2, #0
 800d4f2:	4b26      	ldr	r3, [pc, #152]	; (800d58c <Exe_num0+0xc4>)
 800d4f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d4f8:	f7fa fe00 	bl	80080fc <__adddf3>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	460c      	mov	r4, r1
 800d500:	4618      	mov	r0, r3
 800d502:	4621      	mov	r1, r4
 800d504:	4b20      	ldr	r3, [pc, #128]	; (800d588 <Exe_num0+0xc0>)
 800d506:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d50a:	461a      	mov	r2, r3
 800d50c:	4623      	mov	r3, r4
 800d50e:	f7fb fa3b 	bl	8008988 <__aeabi_dcmpgt>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d1ea      	bne.n	800d4ee <Exe_num0+0x26>
	wait(0.3);
 800d518:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800d570 <Exe_num0+0xa8>
 800d51c:	f7fd fb2c 	bl	800ab78 <wait>
	Target_velocity=90;
 800d520:	4b17      	ldr	r3, [pc, #92]	; (800d580 <Exe_num0+0xb8>)
 800d522:	4a18      	ldr	r2, [pc, #96]	; (800d584 <Exe_num0+0xbc>)
 800d524:	601a      	str	r2, [r3, #0]

	stating_point_of_time = elapsed_time;
 800d526:	4b18      	ldr	r3, [pc, #96]	; (800d588 <Exe_num0+0xc0>)
 800d528:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d52c:	e9c7 3400 	strd	r3, r4, [r7]
	while(stating_point_of_time + 1 > elapsed_time);
 800d530:	bf00      	nop
 800d532:	f04f 0200 	mov.w	r2, #0
 800d536:	4b15      	ldr	r3, [pc, #84]	; (800d58c <Exe_num0+0xc4>)
 800d538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d53c:	f7fa fdde 	bl	80080fc <__adddf3>
 800d540:	4603      	mov	r3, r0
 800d542:	460c      	mov	r4, r1
 800d544:	4618      	mov	r0, r3
 800d546:	4621      	mov	r1, r4
 800d548:	4b0f      	ldr	r3, [pc, #60]	; (800d588 <Exe_num0+0xc0>)
 800d54a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d54e:	461a      	mov	r2, r3
 800d550:	4623      	mov	r3, r4
 800d552:	f7fb fa19 	bl	8008988 <__aeabi_dcmpgt>
 800d556:	4603      	mov	r3, r0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1ea      	bne.n	800d532 <Exe_num0+0x6a>
	wait(0.3);
 800d55c:	ed9f 0b04 	vldr	d0, [pc, #16]	; 800d570 <Exe_num0+0xa8>
 800d560:	f7fd fb0a 	bl	800ab78 <wait>
	Target_velocity=0;
 800d564:	4b06      	ldr	r3, [pc, #24]	; (800d580 <Exe_num0+0xb8>)
 800d566:	f04f 0200 	mov.w	r2, #0
 800d56a:	601a      	str	r2, [r3, #0]
	while(1);
 800d56c:	e7fe      	b.n	800d56c <Exe_num0+0xa4>
 800d56e:	bf00      	nop
 800d570:	33333333 	.word	0x33333333
 800d574:	3fd33333 	.word	0x3fd33333
 800d578:	20000cf4 	.word	0x20000cf4
 800d57c:	20000f74 	.word	0x20000f74
 800d580:	20000f70 	.word	0x20000f70
 800d584:	42b40000 	.word	0x42b40000
 800d588:	20000fa8 	.word	0x20000fa8
 800d58c:	3ff00000 	.word	0x3ff00000

0800d590 <Exe_num1>:

}
void Exe_num1(){
 800d590:	b580      	push	{r7, lr}
 800d592:	af00      	add	r7, sp, #0
	  Flash_load();
 800d594:	f7fc fcb6 	bl	8009f04 <Flash_load>
  	  HAL_Delay(2000);
 800d598:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d59c:	f001 fc02 	bl	800eda4 <HAL_Delay>

  	  mapprint();
 800d5a0:	f7fc fbf4 	bl	8009d8c <mapprint>
  	  while(1);
 800d5a4:	e7fe      	b.n	800d5a4 <Exe_num1+0x14>

0800d5a6 <Exe_num2>:
}
void Exe_num2(){
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
//        		  printf("小数のほう : %lf \r\n",timer);
//        	  if(self_timer == 10000)
//        		  printf("整数のほう : %lf \r\n",self_timer/1000);

        	  //start_calib();
     	      Tire_Maintenance();
<<<<<<< HEAD
 800f6da:	f7fc fcd9 	bl	800c090 <Tire_Maintenance>
}
 800f6de:	bf00      	nop
 800f6e0:	bd80      	pop	{r7, pc}

0800f6e2 <Exe_num3>:
void Exe_num3(){
 800f6e2:	b580      	push	{r7, lr}
 800f6e4:	af00      	add	r7, sp, #0
	  //printf("helloあいうえお\r\n");

        	  Shortest_Run();
 800f6e6:	f7ff f9df 	bl	800eaa8 <Shortest_Run>
//        		  Target_Rad_velo=5;
=======
 800d5aa:	f7fe fd6b 	bl	800c084 <Tire_Maintenance>
}
 800d5ae:	bf00      	nop
 800d5b0:	bd80      	pop	{r7, pc}
	...

0800d5b4 <Exe_num3>:
void Exe_num3(){
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	af00      	add	r7, sp, #0
//        	  }

//        	  HAL_Delay(1500);
//        	  Shortest_Run();

	  HAL_Delay(1500);
 800d5b8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800d5bc:	f001 fbf2 	bl	800eda4 <HAL_Delay>
	  mode.control=0;
 800d5c0:	4b03      	ldr	r3, [pc, #12]	; (800d5d0 <Exe_num3+0x1c>)
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	715a      	strb	r2, [r3, #5]
	  Target_velocity=90;
 800d5c6:	4b03      	ldr	r3, [pc, #12]	; (800d5d4 <Exe_num3+0x20>)
 800d5c8:	4a03      	ldr	r2, [pc, #12]	; (800d5d8 <Exe_num3+0x24>)
 800d5ca:	601a      	str	r2, [r3, #0]
	  while(1);
 800d5cc:	e7fe      	b.n	800d5cc <Exe_num3+0x18>
 800d5ce:	bf00      	nop
 800d5d0:	20000cf4 	.word	0x20000cf4
 800d5d4:	20000f70 	.word	0x20000f70
 800d5d8:	42b40000 	.word	0x42b40000
 800d5dc:	00000000 	.word	0x00000000

0800d5e0 <Exe_num4>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
			  //printf("%d\r\n",zg);
//        		  printf("%f\r\n",Body_angle);
//        		  HAL_Delay(1);

}
<<<<<<< HEAD
 800f6ea:	bf00      	nop
 800f6ec:	bd80      	pop	{r7, pc}
	...

0800f6f0 <Exe_num4>:
void Exe_num4(){
 800f6f0:	b590      	push	{r4, r7, lr}
 800f6f2:	b083      	sub	sp, #12
 800f6f4:	af00      	add	r7, sp, #0
	  //HAL_Delay(1500);
	  mode.interrupt = 1;
 800f6f6:	4b28      	ldr	r3, [pc, #160]	; (800f798 <Exe_num4+0xa8>)
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	721a      	strb	r2, [r3, #8]
	  timer = 0;
 800f6fc:	4a27      	ldr	r2, [pc, #156]	; (800f79c <Exe_num4+0xac>)
 800f6fe:	f04f 0300 	mov.w	r3, #0
 800f702:	f04f 0400 	mov.w	r4, #0
 800f706:	e9c2 3400 	strd	r3, r4, [r2]
	  self_timer = 0;
 800f70a:	4a25      	ldr	r2, [pc, #148]	; (800f7a0 <Exe_num4+0xb0>)
 800f70c:	f04f 0300 	mov.w	r3, #0
 800f710:	f04f 0400 	mov.w	r4, #0
 800f714:	e9c2 3400 	strd	r3, r4, [r2]
=======
void Exe_num4(){
 800d5e0:	b590      	push	{r4, r7, lr}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af00      	add	r7, sp, #0
	  //HAL_Delay(1500);
	  mode.interrupt = 1;
 800d5e6:	4b30      	ldr	r3, [pc, #192]	; (800d6a8 <Exe_num4+0xc8>)
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	721a      	strb	r2, [r3, #8]
	  timer = 0;
 800d5ec:	4a2f      	ldr	r2, [pc, #188]	; (800d6ac <Exe_num4+0xcc>)
 800d5ee:	f04f 0300 	mov.w	r3, #0
 800d5f2:	f04f 0400 	mov.w	r4, #0
 800d5f6:	e9c2 3400 	strd	r3, r4, [r2]
	  self_timer = 0;
 800d5fa:	4a2d      	ldr	r2, [pc, #180]	; (800d6b0 <Exe_num4+0xd0>)
 800d5fc:	f04f 0300 	mov.w	r3, #0
 800d600:	f04f 0400 	mov.w	r4, #0
 800d604:	e9c2 3400 	strd	r3, r4, [r2]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	  while(1){
	  //duty比0.05
#if 0
		  Volt_Set(0.444, &R_motor, -0.444, &L_motor);
#else
		  R_motor = msig_input * 4200;
<<<<<<< HEAD
 800f718:	4b22      	ldr	r3, [pc, #136]	; (800f7a4 <Exe_num4+0xb4>)
 800f71a:	edd3 7a00 	vldr	s15, [r3]
 800f71e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800f7a8 <Exe_num4+0xb8>
 800f722:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f72a:	ee17 3a90 	vmov	r3, s15
 800f72e:	b21a      	sxth	r2, r3
 800f730:	4b1e      	ldr	r3, [pc, #120]	; (800f7ac <Exe_num4+0xbc>)
 800f732:	801a      	strh	r2, [r3, #0]
		  L_motor = -msig_input * 4200;
 800f734:	4b1b      	ldr	r3, [pc, #108]	; (800f7a4 <Exe_num4+0xb4>)
 800f736:	edd3 7a00 	vldr	s15, [r3]
 800f73a:	eef1 7a67 	vneg.f32	s15, s15
 800f73e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800f7a8 <Exe_num4+0xb8>
 800f742:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f74a:	ee17 3a90 	vmov	r3, s15
 800f74e:	b21a      	sxth	r2, r3
 800f750:	4b17      	ldr	r3, [pc, #92]	; (800f7b0 <Exe_num4+0xc0>)
 800f752:	801a      	strh	r2, [r3, #0]
=======
 800d608:	4b2a      	ldr	r3, [pc, #168]	; (800d6b4 <Exe_num4+0xd4>)
 800d60a:	edd3 7a00 	vldr	s15, [r3]
 800d60e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d6b8 <Exe_num4+0xd8>
 800d612:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d61a:	ee17 3a90 	vmov	r3, s15
 800d61e:	b21a      	sxth	r2, r3
 800d620:	4b26      	ldr	r3, [pc, #152]	; (800d6bc <Exe_num4+0xdc>)
 800d622:	801a      	strh	r2, [r3, #0]
		  L_motor = -msig_input * 4200;
 800d624:	4b23      	ldr	r3, [pc, #140]	; (800d6b4 <Exe_num4+0xd4>)
 800d626:	edd3 7a00 	vldr	s15, [r3]
 800d62a:	eef1 7a67 	vneg.f32	s15, s15
 800d62e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800d6b8 <Exe_num4+0xd8>
 800d632:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d63a:	ee17 3a90 	vmov	r3, s15
 800d63e:	b21a      	sxth	r2, r3
 800d640:	4b1f      	ldr	r3, [pc, #124]	; (800d6c0 <Exe_num4+0xe0>)
 800d642:	801a      	strh	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
			 // printf("%f\r\n",identify[k]);

			  //
		  }
#else
 		  if(timer >= 48000){
<<<<<<< HEAD
 800f754:	4b11      	ldr	r3, [pc, #68]	; (800f79c <Exe_num4+0xac>)
 800f756:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f75a:	a30d      	add	r3, pc, #52	; (adr r3, 800f790 <Exe_num4+0xa0>)
 800f75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f760:	f7f9 f908 	bl	8008974 <__aeabi_dcmpge>
 800f764:	4603      	mov	r3, r0
 800f766:	2b00      	cmp	r3, #0
 800f768:	d00f      	beq.n	800f78a <Exe_num4+0x9a>
  		  Motor_PWM_Stop();
 800f76a:	f7fa fca1 	bl	800a0b0 <Motor_PWM_Stop>
  		  HAL_Delay(20000);
 800f76e:	f644 6020 	movw	r0, #20000	; 0x4e20
 800f772:	f001 fb65 	bl	8010e40 <HAL_Delay>
  		  for(int k=0;k < 800; k++){}
 800f776:	2300      	movs	r3, #0
 800f778:	607b      	str	r3, [r7, #4]
 800f77a:	e002      	b.n	800f782 <Exe_num4+0x92>
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	3301      	adds	r3, #1
 800f780:	607b      	str	r3, [r7, #4]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800f788:	dbf8      	blt.n	800f77c <Exe_num4+0x8c>
		  R_motor = msig_input * 4200;
 800f78a:	e7c5      	b.n	800f718 <Exe_num4+0x28>
 800f78c:	f3af 8000 	nop.w
 800f790:	00000000 	.word	0x00000000
 800f794:	40e77000 	.word	0x40e77000
 800f798:	20000068 	.word	0x20000068
 800f79c:	20000310 	.word	0x20000310
 800f7a0:	20000308 	.word	0x20000308
 800f7a4:	20009f78 	.word	0x20009f78
 800f7a8:	45834000 	.word	0x45834000
 800f7ac:	20019ca4 	.word	0x20019ca4
 800f7b0:	2001a738 	.word	0x2001a738

0800f7b4 <Exe_num5>:
=======
 800d644:	4b19      	ldr	r3, [pc, #100]	; (800d6ac <Exe_num4+0xcc>)
 800d646:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d64a:	a315      	add	r3, pc, #84	; (adr r3, 800d6a0 <Exe_num4+0xc0>)
 800d64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d650:	f7fb f990 	bl	8008974 <__aeabi_dcmpge>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d01e      	beq.n	800d698 <Exe_num4+0xb8>
  		  Motor_PWM_Stop();
 800d65a:	f7fc fd29 	bl	800a0b0 <Motor_PWM_Stop>
  		  HAL_Delay(20000);
 800d65e:	f644 6020 	movw	r0, #20000	; 0x4e20
 800d662:	f001 fb9f 	bl	800eda4 <HAL_Delay>
  		  for(int k=0;k < 800; k++)
 800d666:	2300      	movs	r3, #0
 800d668:	607b      	str	r3, [r7, #4]
 800d66a:	e011      	b.n	800d690 <Exe_num4+0xb0>
  			  printf("%f\r\n",identify[k]);
 800d66c:	4a15      	ldr	r2, [pc, #84]	; (800d6c4 <Exe_num4+0xe4>)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4413      	add	r3, r2
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4618      	mov	r0, r3
 800d678:	f7fa fe9e 	bl	80083b8 <__aeabi_f2d>
 800d67c:	4603      	mov	r3, r0
 800d67e:	460c      	mov	r4, r1
 800d680:	461a      	mov	r2, r3
 800d682:	4623      	mov	r3, r4
 800d684:	4810      	ldr	r0, [pc, #64]	; (800d6c8 <Exe_num4+0xe8>)
 800d686:	f007 fa17 	bl	8014ab8 <iprintf>
  		  for(int k=0;k < 800; k++)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	3301      	adds	r3, #1
 800d68e:	607b      	str	r3, [r7, #4]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800d696:	dbe9      	blt.n	800d66c <Exe_num4+0x8c>
		  R_motor = msig_input * 4200;
 800d698:	e7b6      	b.n	800d608 <Exe_num4+0x28>
 800d69a:	bf00      	nop
 800d69c:	f3af 8000 	nop.w
 800d6a0:	00000000 	.word	0x00000000
 800d6a4:	40e77000 	.word	0x40e77000
 800d6a8:	20000cf4 	.word	0x20000cf4
 800d6ac:	20000fa0 	.word	0x20000fa0
 800d6b0:	20000f98 	.word	0x20000f98
 800d6b4:	20000fd0 	.word	0x20000fd0
 800d6b8:	45834000 	.word	0x45834000
 800d6bc:	20015b2c 	.word	0x20015b2c
 800d6c0:	200165c0 	.word	0x200165c0
 800d6c4:	20005164 	.word	0x20005164
 800d6c8:	08016a50 	.word	0x08016a50

0800d6cc <Exe_num5>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
//        	  printf("左 : %d \r\n",EN3_L.integrate);
//        	  printf("右 : %d \r\n",EN4_R.integrate);
//        	  printf("\r\n");

}
void Exe_num5(){
<<<<<<< HEAD
 800f7b4:	b590      	push	{r4, r7, lr}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
	  //Exe_num5();
	  mode.control = 4;
 800f7ba:	4b18      	ldr	r3, [pc, #96]	; (800f81c <Exe_num5+0x68>)
 800f7bc:	2204      	movs	r2, #4
 800f7be:	715a      	strb	r2, [r3, #5]
	  Target_velocity = 90;
 800f7c0:	4b17      	ldr	r3, [pc, #92]	; (800f820 <Exe_num5+0x6c>)
 800f7c2:	4a18      	ldr	r2, [pc, #96]	; (800f824 <Exe_num5+0x70>)
 800f7c4:	601a      	str	r2, [r3, #0]
	  timer = 0;
 800f7c6:	4a18      	ldr	r2, [pc, #96]	; (800f828 <Exe_num5+0x74>)
 800f7c8:	f04f 0300 	mov.w	r3, #0
 800f7cc:	f04f 0400 	mov.w	r4, #0
 800f7d0:	e9c2 3400 	strd	r3, r4, [r2]
	  self_timer = 0;
 800f7d4:	4a15      	ldr	r2, [pc, #84]	; (800f82c <Exe_num5+0x78>)
 800f7d6:	f04f 0300 	mov.w	r3, #0
 800f7da:	f04f 0400 	mov.w	r4, #0
 800f7de:	e9c2 3400 	strd	r3, r4, [r2]
	  while(1){
	  if(timer >= 2000){
 800f7e2:	4b11      	ldr	r3, [pc, #68]	; (800f828 <Exe_num5+0x74>)
 800f7e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f7e8:	f04f 0200 	mov.w	r2, #0
 800f7ec:	4b10      	ldr	r3, [pc, #64]	; (800f830 <Exe_num5+0x7c>)
 800f7ee:	f7f9 f8c1 	bl	8008974 <__aeabi_dcmpge>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d0f4      	beq.n	800f7e2 <Exe_num5+0x2e>
	  Motor_PWM_Stop();
 800f7f8:	f7fa fc5a 	bl	800a0b0 <Motor_PWM_Stop>
	  HAL_Delay(17000);
 800f7fc:	f244 2068 	movw	r0, #17000	; 0x4268
 800f800:	f001 fb1e 	bl	8010e40 <HAL_Delay>
	  for(int k=0;k < 400; k++){}
 800f804:	2300      	movs	r3, #0
 800f806:	607b      	str	r3, [r7, #4]
 800f808:	e002      	b.n	800f810 <Exe_num5+0x5c>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	3301      	adds	r3, #1
 800f80e:	607b      	str	r3, [r7, #4]
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800f816:	dbf8      	blt.n	800f80a <Exe_num5+0x56>
	  if(timer >= 2000){
 800f818:	e7e3      	b.n	800f7e2 <Exe_num5+0x2e>
 800f81a:	bf00      	nop
 800f81c:	20000068 	.word	0x20000068
 800f820:	200002e0 	.word	0x200002e0
 800f824:	42b40000 	.word	0x42b40000
 800f828:	20000310 	.word	0x20000310
 800f82c:	20000308 	.word	0x20000308
 800f830:	409f4000 	.word	0x409f4000

0800f834 <Exe_num6>:
=======
 800d6cc:	b590      	push	{r4, r7, lr}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
	  Exe_num5();
 800d6d2:	f7ff fffb 	bl	800d6cc <Exe_num5>
	  mode.control = 4;
 800d6d6:	4b1f      	ldr	r3, [pc, #124]	; (800d754 <Exe_num5+0x88>)
 800d6d8:	2204      	movs	r2, #4
 800d6da:	715a      	strb	r2, [r3, #5]
	  Target_velocity = 90;
 800d6dc:	4b1e      	ldr	r3, [pc, #120]	; (800d758 <Exe_num5+0x8c>)
 800d6de:	4a1f      	ldr	r2, [pc, #124]	; (800d75c <Exe_num5+0x90>)
 800d6e0:	601a      	str	r2, [r3, #0]
	  timer = 0;
 800d6e2:	4a1f      	ldr	r2, [pc, #124]	; (800d760 <Exe_num5+0x94>)
 800d6e4:	f04f 0300 	mov.w	r3, #0
 800d6e8:	f04f 0400 	mov.w	r4, #0
 800d6ec:	e9c2 3400 	strd	r3, r4, [r2]
	  self_timer = 0;
 800d6f0:	4a1c      	ldr	r2, [pc, #112]	; (800d764 <Exe_num5+0x98>)
 800d6f2:	f04f 0300 	mov.w	r3, #0
 800d6f6:	f04f 0400 	mov.w	r4, #0
 800d6fa:	e9c2 3400 	strd	r3, r4, [r2]
	  while(1){
	  if(timer >= 2000){
 800d6fe:	4b18      	ldr	r3, [pc, #96]	; (800d760 <Exe_num5+0x94>)
 800d700:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d704:	f04f 0200 	mov.w	r2, #0
 800d708:	4b17      	ldr	r3, [pc, #92]	; (800d768 <Exe_num5+0x9c>)
 800d70a:	f7fb f933 	bl	8008974 <__aeabi_dcmpge>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d0f4      	beq.n	800d6fe <Exe_num5+0x32>
	  Motor_PWM_Stop();
 800d714:	f7fc fccc 	bl	800a0b0 <Motor_PWM_Stop>
	  HAL_Delay(17000);
 800d718:	f244 2068 	movw	r0, #17000	; 0x4268
 800d71c:	f001 fb42 	bl	800eda4 <HAL_Delay>
	  for(int k=0;k < 400; k++)
 800d720:	2300      	movs	r3, #0
 800d722:	607b      	str	r3, [r7, #4]
 800d724:	e011      	b.n	800d74a <Exe_num5+0x7e>
		  printf("%f\r\n",identify[k]);
 800d726:	4a11      	ldr	r2, [pc, #68]	; (800d76c <Exe_num5+0xa0>)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	4413      	add	r3, r2
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4618      	mov	r0, r3
 800d732:	f7fa fe41 	bl	80083b8 <__aeabi_f2d>
 800d736:	4603      	mov	r3, r0
 800d738:	460c      	mov	r4, r1
 800d73a:	461a      	mov	r2, r3
 800d73c:	4623      	mov	r3, r4
 800d73e:	480c      	ldr	r0, [pc, #48]	; (800d770 <Exe_num5+0xa4>)
 800d740:	f007 f9ba 	bl	8014ab8 <iprintf>
	  for(int k=0;k < 400; k++)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	3301      	adds	r3, #1
 800d748:	607b      	str	r3, [r7, #4]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800d750:	dbe9      	blt.n	800d726 <Exe_num5+0x5a>
	  if(timer >= 2000){
 800d752:	e7d4      	b.n	800d6fe <Exe_num5+0x32>
 800d754:	20000cf4 	.word	0x20000cf4
 800d758:	20000f70 	.word	0x20000f70
 800d75c:	42b40000 	.word	0x42b40000
 800d760:	20000fa0 	.word	0x20000fa0
 800d764:	20000f98 	.word	0x20000f98
 800d768:	409f4000 	.word	0x409f4000
 800d76c:	20005164 	.word	0x20005164
 800d770:	08016a50 	.word	0x08016a50

0800d774 <Exe_num6>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    printf("\r\n");
#endif

#endif
}
void Exe_num6(){
<<<<<<< HEAD
 800f834:	b480      	push	{r7}
 800f836:	af00      	add	r7, sp, #0
=======
 800d774:	b480      	push	{r7}
 800d776:	af00      	add	r7, sp, #0
        	                    //3 imu
        	                    //4 enc
        	                    //5 nothing
        	                    //6 curve

        	  Target_velocity = 135;//test_velo_6;
 800d778:	4b07      	ldr	r3, [pc, #28]	; (800d798 <Exe_num6+0x24>)
 800d77a:	4a08      	ldr	r2, [pc, #32]	; (800d79c <Exe_num6+0x28>)
 800d77c:	601a      	str	r2, [r3, #0]
        	  mode.control = 3;
 800d77e:	4b08      	ldr	r3, [pc, #32]	; (800d7a0 <Exe_num6+0x2c>)
 800d780:	2203      	movs	r2, #3
 800d782:	715a      	strb	r2, [r3, #5]
        	  Target_Rad_velo= 0;
 800d784:	4b07      	ldr	r3, [pc, #28]	; (800d7a4 <Exe_num6+0x30>)
 800d786:	f04f 0200 	mov.w	r2, #0
 800d78a:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

#endif


//		Velocity_Control(Target_velocity, Body_velocity, T1,velocity.KP ,velocity.KI*, velocity.KD);
}
<<<<<<< HEAD
 800f838:	bf00      	nop
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr

0800f842 <Exe_num7>:
void Exe_num7(){
 800f842:	b580      	push	{r7, lr}
 800f844:	af00      	add	r7, sp, #0
=======
 800d78c:	bf00      	nop
 800d78e:	46bd      	mov	sp, r7
 800d790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d794:	4770      	bx	lr
 800d796:	bf00      	nop
 800d798:	20000f70 	.word	0x20000f70
 800d79c:	43070000 	.word	0x43070000
 800d7a0:	20000cf4 	.word	0x20000cf4
 800d7a4:	20000f74 	.word	0x20000f74

0800d7a8 <Exe_num7>:
void Exe_num7(){
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	  //mode.control = 5;
	 // mode.control = 3; //1 Left_wall

#if 1
	  Adachi_search();
<<<<<<< HEAD
 800f846:	f7fe fc49 	bl	800e0dc <Adachi_search>
=======
 800d7ac:	f7ff f950 	bl	800ca50 <Adachi_search>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
//        		      printf("右 : %f\r\n",fr_average);
//        		  }
		  mode.control = 2;
		  Target_velocity = test_velo_7;
#endif
}
<<<<<<< HEAD
 800f84a:	bf00      	nop
 800f84c:	bd80      	pop	{r7, pc}
	...

0800f850 <main>:
=======
 800d7b0:	bf00      	nop
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <main>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 800f850:	b580      	push	{r7, lr}
 800f852:	af00      	add	r7, sp, #0
=======
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 800f854:	f001 fa82 	bl	8010d5c <HAL_Init>
=======
 800d7b8:	f001 fa82 	bl	800ecc0 <HAL_Init>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 800f858:	f000 f866 	bl	800f928 <SystemClock_Config>
=======
 800d7bc:	f000 f866 	bl	800d88c <SystemClock_Config>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 800f85c:	f000 fcb0 	bl	80101c0 <MX_GPIO_Init>
  MX_DMA_Init();
 800f860:	f000 fc86 	bl	8010170 <MX_DMA_Init>
  MX_ADC1_Init();
 800f864:	f000 f8ca 	bl	800f9fc <MX_ADC1_Init>
  MX_ADC2_Init();
 800f868:	f000 f936 	bl	800fad8 <MX_ADC2_Init>
  MX_TIM3_Init();
 800f86c:	f000 fa90 	bl	800fd90 <MX_TIM3_Init>
  MX_TIM2_Init();
 800f870:	f000 fa18 	bl	800fca4 <MX_TIM2_Init>
  MX_SPI3_Init();
 800f874:	f000 f990 	bl	800fb98 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800f878:	f000 fc50 	bl	801011c <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800f87c:	f000 fb30 	bl	800fee0 <MX_TIM5_Init>
  MX_TIM4_Init();
 800f880:	f000 fada 	bl	800fe38 <MX_TIM4_Init>
  MX_TIM8_Init();
 800f884:	f000 fba2 	bl	800ffcc <MX_TIM8_Init>
  MX_TIM1_Init();
 800f888:	f000 f9bc 	bl	800fc04 <MX_TIM1_Init>
=======
 800d7c0:	f000 fcb0 	bl	800e124 <MX_GPIO_Init>
  MX_DMA_Init();
 800d7c4:	f000 fc86 	bl	800e0d4 <MX_DMA_Init>
  MX_ADC1_Init();
 800d7c8:	f000 f8ca 	bl	800d960 <MX_ADC1_Init>
  MX_ADC2_Init();
 800d7cc:	f000 f936 	bl	800da3c <MX_ADC2_Init>
  MX_TIM3_Init();
 800d7d0:	f000 fa90 	bl	800dcf4 <MX_TIM3_Init>
  MX_TIM2_Init();
 800d7d4:	f000 fa18 	bl	800dc08 <MX_TIM2_Init>
  MX_SPI3_Init();
 800d7d8:	f000 f990 	bl	800dafc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800d7dc:	f000 fc50 	bl	800e080 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800d7e0:	f000 fb30 	bl	800de44 <MX_TIM5_Init>
  MX_TIM4_Init();
 800d7e4:	f000 fada 	bl	800dd9c <MX_TIM4_Init>
  MX_TIM8_Init();
 800d7e8:	f000 fba2 	bl	800df30 <MX_TIM8_Init>
  MX_TIM1_Init();
 800d7ec:	f000 f9bc 	bl	800db68 <MX_TIM1_Init>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Encoder_Start();
<<<<<<< HEAD
 800f88c:	f7fa fbe6 	bl	800a05c <Encoder_Start>
  Encoder_Reset();
 800f890:	f7fb f928 	bl	800aae4 <Encoder_Reset>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); //LED
 800f894:	2201      	movs	r2, #1
 800f896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f89a:	4821      	ldr	r0, [pc, #132]	; (800f920 <main+0xd0>)
 800f89c:	f003 faa6 	bl	8012dec <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800f8a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f8a4:	f001 facc 	bl	8010e40 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET); //LED
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f8ae:	481c      	ldr	r0, [pc, #112]	; (800f920 <main+0xd0>)
 800f8b0:	f003 fa9c 	bl	8012dec <HAL_GPIO_WritePin>
=======
 800d7f0:	f7fc fc34 	bl	800a05c <Encoder_Start>
  Encoder_Reset();
 800d7f4:	f7fd f95e 	bl	800aab4 <Encoder_Reset>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); //LED
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d7fe:	4821      	ldr	r0, [pc, #132]	; (800d884 <main+0xd0>)
 800d800:	f003 faa6 	bl	8010d50 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800d804:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d808:	f001 facc 	bl	800eda4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET); //LED
 800d80c:	2200      	movs	r2, #0
 800d80e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d812:	481c      	ldr	r0, [pc, #112]	; (800d884 <main+0xd0>)
 800d814:	f003 fa9c 	bl	8010d50 <HAL_GPIO_WritePin>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  while (1)
  {
	  Execution_Select();
<<<<<<< HEAD
 800f8b4:	f7fc f9e6 	bl	800bc84 <Execution_Select>
=======
 800d818:	f7fe fa28 	bl	800bc6c <Execution_Select>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

//      printf("EN3_L.integrate : %d \r\n", EN3_L.integrate);
//      printf("EN4_R.integrate : %d \r\n", EN4_R.integrate);
//      printf("EN_Body.integrate : %d \r\n", EN_Body.integrate);
	  //誤差補正のオフセット値決定
	  IMU_Calib();
<<<<<<< HEAD
 800f8b8:	f7fa fe34 	bl	800a524 <IMU_Calib>
=======
 800d81c:	f7fc fe4e 	bl	800a4bc <IMU_Calib>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

	  while(1){


switch(mode.execution){
<<<<<<< HEAD
 800f8bc:	4b19      	ldr	r3, [pc, #100]	; (800f924 <main+0xd4>)
 800f8be:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f8c2:	2b07      	cmp	r3, #7
 800f8c4:	d82a      	bhi.n	800f91c <main+0xcc>
 800f8c6:	a201      	add	r2, pc, #4	; (adr r2, 800f8cc <main+0x7c>)
 800f8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8cc:	0800f8ed 	.word	0x0800f8ed
 800f8d0:	0800f8f3 	.word	0x0800f8f3
 800f8d4:	0800f8f9 	.word	0x0800f8f9
 800f8d8:	0800f8ff 	.word	0x0800f8ff
 800f8dc:	0800f905 	.word	0x0800f905
 800f8e0:	0800f90b 	.word	0x0800f90b
 800f8e4:	0800f911 	.word	0x0800f911
 800f8e8:	0800f917 	.word	0x0800f917
          case 0:
        	  Exe_num0();
 800f8ec:	f7ff fece 	bl	800f68c <Exe_num0>
        	  break;
 800f8f0:	e015      	b.n	800f91e <main+0xce>
	  /*------------------------------------------*/
          case 1:
        	  Exe_num1();
 800f8f2:	f7ff fee5 	bl	800f6c0 <Exe_num1>
              break;
 800f8f6:	e012      	b.n	800f91e <main+0xce>
	  /*------------------------------------------*/
          case 2:
        	  Exe_num2();
 800f8f8:	f7ff feed 	bl	800f6d6 <Exe_num2>
	          break;
 800f8fc:	e00f      	b.n	800f91e <main+0xce>
	  /*------------------------------------------*/
          case 3:
        	  Exe_num3();
 800f8fe:	f7ff fef0 	bl	800f6e2 <Exe_num3>
              break;
 800f902:	e00c      	b.n	800f91e <main+0xce>
	  /*------------------------------------------*/
          case 4:
        	  Exe_num4();
 800f904:	f7ff fef4 	bl	800f6f0 <Exe_num4>
        	  break;
 800f908:	e009      	b.n	800f91e <main+0xce>
	  /*------------------------------------------*/
          case 5:
        	  Exe_num5();
 800f90a:	f7ff ff53 	bl	800f7b4 <Exe_num5>
	          break;
 800f90e:	e006      	b.n	800f91e <main+0xce>
	  /*------------------------------------------*/
          case 6:
        	  Exe_num6();
 800f910:	f7ff ff90 	bl	800f834 <Exe_num6>
		    break;
 800f914:	e003      	b.n	800f91e <main+0xce>
	  /*------------------------------------------*/
          case 7:
        	  Exe_num7();
 800f916:	f7ff ff94 	bl	800f842 <Exe_num7>
	  	      break;
 800f91a:	e000      	b.n	800f91e <main+0xce>
          default:
        	  break;
 800f91c:	bf00      	nop
switch(mode.execution){
 800f91e:	e7cd      	b.n	800f8bc <main+0x6c>
 800f920:	40020800 	.word	0x40020800
 800f924:	20000068 	.word	0x20000068

0800f928 <SystemClock_Config>:
=======
 800d820:	4b19      	ldr	r3, [pc, #100]	; (800d888 <main+0xd4>)
 800d822:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d826:	2b07      	cmp	r3, #7
 800d828:	d82a      	bhi.n	800d880 <main+0xcc>
 800d82a:	a201      	add	r2, pc, #4	; (adr r2, 800d830 <main+0x7c>)
 800d82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d830:	0800d851 	.word	0x0800d851
 800d834:	0800d857 	.word	0x0800d857
 800d838:	0800d85d 	.word	0x0800d85d
 800d83c:	0800d863 	.word	0x0800d863
 800d840:	0800d869 	.word	0x0800d869
 800d844:	0800d86f 	.word	0x0800d86f
 800d848:	0800d875 	.word	0x0800d875
 800d84c:	0800d87b 	.word	0x0800d87b
          case 0:
        	  Exe_num0();
 800d850:	f7ff fe3a 	bl	800d4c8 <Exe_num0>
        	  break;
 800d854:	e015      	b.n	800d882 <main+0xce>
	  /*------------------------------------------*/
          case 1:
        	  Exe_num1();
 800d856:	f7ff fe9b 	bl	800d590 <Exe_num1>
              break;
 800d85a:	e012      	b.n	800d882 <main+0xce>
	  /*------------------------------------------*/
          case 2:
        	  Exe_num2();
 800d85c:	f7ff fea3 	bl	800d5a6 <Exe_num2>
	          break;
 800d860:	e00f      	b.n	800d882 <main+0xce>
	  /*------------------------------------------*/
          case 3:
        	  Exe_num3();
 800d862:	f7ff fea7 	bl	800d5b4 <Exe_num3>
              break;
 800d866:	e00c      	b.n	800d882 <main+0xce>
	  /*------------------------------------------*/
          case 4:
        	  Exe_num4();
 800d868:	f7ff feba 	bl	800d5e0 <Exe_num4>
        	  break;
 800d86c:	e009      	b.n	800d882 <main+0xce>
	  /*------------------------------------------*/
          case 5:
        	  Exe_num5();
 800d86e:	f7ff ff2d 	bl	800d6cc <Exe_num5>
	          break;
 800d872:	e006      	b.n	800d882 <main+0xce>
	  /*------------------------------------------*/
          case 6:
        	  Exe_num6();
 800d874:	f7ff ff7e 	bl	800d774 <Exe_num6>
		    break;
 800d878:	e003      	b.n	800d882 <main+0xce>
	  /*------------------------------------------*/
          case 7:
        	  Exe_num7();
 800d87a:	f7ff ff95 	bl	800d7a8 <Exe_num7>
	  	      break;
 800d87e:	e000      	b.n	800d882 <main+0xce>
          default:
        	  break;
 800d880:	bf00      	nop
switch(mode.execution){
 800d882:	e7cd      	b.n	800d820 <main+0x6c>
 800d884:	40020800 	.word	0x40020800
 800d888:	20000cf4 	.word	0x20000cf4

0800d88c <SystemClock_Config>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 800f928:	b580      	push	{r7, lr}
 800f92a:	b094      	sub	sp, #80	; 0x50
 800f92c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f92e:	f107 0320 	add.w	r3, r7, #32
 800f932:	2230      	movs	r2, #48	; 0x30
 800f934:	2100      	movs	r1, #0
 800f936:	4618      	mov	r0, r3
 800f938:	f006 fca7 	bl	801628a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f93c:	f107 030c 	add.w	r3, r7, #12
 800f940:	2200      	movs	r2, #0
 800f942:	601a      	str	r2, [r3, #0]
 800f944:	605a      	str	r2, [r3, #4]
 800f946:	609a      	str	r2, [r3, #8]
 800f948:	60da      	str	r2, [r3, #12]
 800f94a:	611a      	str	r2, [r3, #16]
=======
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b094      	sub	sp, #80	; 0x50
 800d890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d892:	f107 0320 	add.w	r3, r7, #32
 800d896:	2230      	movs	r2, #48	; 0x30
 800d898:	2100      	movs	r1, #0
 800d89a:	4618      	mov	r0, r3
 800d89c:	f006 fca7 	bl	80141ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d8a0:	f107 030c 	add.w	r3, r7, #12
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	601a      	str	r2, [r3, #0]
 800d8a8:	605a      	str	r2, [r3, #4]
 800d8aa:	609a      	str	r2, [r3, #8]
 800d8ac:	60da      	str	r2, [r3, #12]
 800d8ae:	611a      	str	r2, [r3, #16]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 800f94c:	2300      	movs	r3, #0
 800f94e:	60bb      	str	r3, [r7, #8]
 800f950:	4b28      	ldr	r3, [pc, #160]	; (800f9f4 <SystemClock_Config+0xcc>)
 800f952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f954:	4a27      	ldr	r2, [pc, #156]	; (800f9f4 <SystemClock_Config+0xcc>)
 800f956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f95a:	6413      	str	r3, [r2, #64]	; 0x40
 800f95c:	4b25      	ldr	r3, [pc, #148]	; (800f9f4 <SystemClock_Config+0xcc>)
 800f95e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f964:	60bb      	str	r3, [r7, #8]
 800f966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f968:	2300      	movs	r3, #0
 800f96a:	607b      	str	r3, [r7, #4]
 800f96c:	4b22      	ldr	r3, [pc, #136]	; (800f9f8 <SystemClock_Config+0xd0>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4a21      	ldr	r2, [pc, #132]	; (800f9f8 <SystemClock_Config+0xd0>)
 800f972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f976:	6013      	str	r3, [r2, #0]
 800f978:	4b1f      	ldr	r3, [pc, #124]	; (800f9f8 <SystemClock_Config+0xd0>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f980:	607b      	str	r3, [r7, #4]
 800f982:	687b      	ldr	r3, [r7, #4]
=======
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	60bb      	str	r3, [r7, #8]
 800d8b4:	4b28      	ldr	r3, [pc, #160]	; (800d958 <SystemClock_Config+0xcc>)
 800d8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8b8:	4a27      	ldr	r2, [pc, #156]	; (800d958 <SystemClock_Config+0xcc>)
 800d8ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8be:	6413      	str	r3, [r2, #64]	; 0x40
 800d8c0:	4b25      	ldr	r3, [pc, #148]	; (800d958 <SystemClock_Config+0xcc>)
 800d8c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8c8:	60bb      	str	r3, [r7, #8]
 800d8ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	607b      	str	r3, [r7, #4]
 800d8d0:	4b22      	ldr	r3, [pc, #136]	; (800d95c <SystemClock_Config+0xd0>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a21      	ldr	r2, [pc, #132]	; (800d95c <SystemClock_Config+0xd0>)
 800d8d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d8da:	6013      	str	r3, [r2, #0]
 800d8dc:	4b1f      	ldr	r3, [pc, #124]	; (800d95c <SystemClock_Config+0xd0>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d8e4:	607b      	str	r3, [r7, #4]
 800d8e6:	687b      	ldr	r3, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 800f984:	2301      	movs	r3, #1
 800f986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f98c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f98e:	2302      	movs	r3, #2
 800f990:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800f998:	2304      	movs	r3, #4
 800f99a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800f99c:	23a8      	movs	r3, #168	; 0xa8
 800f99e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f9a0:	2302      	movs	r3, #2
 800f9a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800f9a4:	2304      	movs	r3, #4
 800f9a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f9a8:	f107 0320 	add.w	r3, r7, #32
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f003 fa37 	bl	8012e20 <HAL_RCC_OscConfig>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d001      	beq.n	800f9bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 800f9b8:	f000 fcbe 	bl	8010338 <Error_Handler>
=======
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d8ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d8f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d8f2:	2302      	movs	r3, #2
 800d8f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d8f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800d8fc:	2304      	movs	r3, #4
 800d8fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800d900:	23a8      	movs	r3, #168	; 0xa8
 800d902:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d904:	2302      	movs	r3, #2
 800d906:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800d908:	2304      	movs	r3, #4
 800d90a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d90c:	f107 0320 	add.w	r3, r7, #32
 800d910:	4618      	mov	r0, r3
 800d912:	f003 fa37 	bl	8010d84 <HAL_RCC_OscConfig>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d001      	beq.n	800d920 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d91c:	f000 fcbe 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 800f9bc:	230f      	movs	r3, #15
 800f9be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f9c0:	2302      	movs	r3, #2
 800f9c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f9c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f9cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f9ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f9d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800f9d4:	f107 030c 	add.w	r3, r7, #12
 800f9d8:	2105      	movs	r1, #5
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f003 fc90 	bl	8013300 <HAL_RCC_ClockConfig>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d001      	beq.n	800f9ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800f9e6:	f000 fca7 	bl	8010338 <Error_Handler>
  }
}
 800f9ea:	bf00      	nop
 800f9ec:	3750      	adds	r7, #80	; 0x50
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	40023800 	.word	0x40023800
 800f9f8:	40007000 	.word	0x40007000

0800f9fc <MX_ADC1_Init>:
=======
 800d920:	230f      	movs	r3, #15
 800d922:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d924:	2302      	movs	r3, #2
 800d926:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d928:	2300      	movs	r3, #0
 800d92a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d92c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d930:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d936:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d938:	f107 030c 	add.w	r3, r7, #12
 800d93c:	2105      	movs	r1, #5
 800d93e:	4618      	mov	r0, r3
 800d940:	f003 fc90 	bl	8011264 <HAL_RCC_ClockConfig>
 800d944:	4603      	mov	r3, r0
 800d946:	2b00      	cmp	r3, #0
 800d948:	d001      	beq.n	800d94e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800d94a:	f000 fca7 	bl	800e29c <Error_Handler>
  }
}
 800d94e:	bf00      	nop
 800d950:	3750      	adds	r7, #80	; 0x50
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	40023800 	.word	0x40023800
 800d95c:	40007000 	.word	0x40007000

0800d960 <MX_ADC1_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b084      	sub	sp, #16
 800fa00:	af00      	add	r7, sp, #0
=======
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 800fa02:	463b      	mov	r3, r7
 800fa04:	2200      	movs	r2, #0
 800fa06:	601a      	str	r2, [r3, #0]
 800fa08:	605a      	str	r2, [r3, #4]
 800fa0a:	609a      	str	r2, [r3, #8]
 800fa0c:	60da      	str	r2, [r3, #12]
=======
 800d966:	463b      	mov	r3, r7
 800d968:	2200      	movs	r2, #0
 800d96a:	601a      	str	r2, [r3, #0]
 800d96c:	605a      	str	r2, [r3, #4]
 800d96e:	609a      	str	r2, [r3, #8]
 800d970:	60da      	str	r2, [r3, #12]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
<<<<<<< HEAD
 800fa0e:	4b2f      	ldr	r3, [pc, #188]	; (800facc <MX_ADC1_Init+0xd0>)
 800fa10:	4a2f      	ldr	r2, [pc, #188]	; (800fad0 <MX_ADC1_Init+0xd4>)
 800fa12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800fa14:	4b2d      	ldr	r3, [pc, #180]	; (800facc <MX_ADC1_Init+0xd0>)
 800fa16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fa1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800fa1c:	4b2b      	ldr	r3, [pc, #172]	; (800facc <MX_ADC1_Init+0xd0>)
 800fa1e:	2200      	movs	r2, #0
 800fa20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800fa22:	4b2a      	ldr	r3, [pc, #168]	; (800facc <MX_ADC1_Init+0xd0>)
 800fa24:	2201      	movs	r2, #1
 800fa26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800fa28:	4b28      	ldr	r3, [pc, #160]	; (800facc <MX_ADC1_Init+0xd0>)
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800fa2e:	4b27      	ldr	r3, [pc, #156]	; (800facc <MX_ADC1_Init+0xd0>)
 800fa30:	2200      	movs	r2, #0
 800fa32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800fa36:	4b25      	ldr	r3, [pc, #148]	; (800facc <MX_ADC1_Init+0xd0>)
 800fa38:	2200      	movs	r2, #0
 800fa3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800fa3c:	4b23      	ldr	r3, [pc, #140]	; (800facc <MX_ADC1_Init+0xd0>)
 800fa3e:	4a25      	ldr	r2, [pc, #148]	; (800fad4 <MX_ADC1_Init+0xd8>)
 800fa40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800fa42:	4b22      	ldr	r3, [pc, #136]	; (800facc <MX_ADC1_Init+0xd0>)
 800fa44:	2200      	movs	r2, #0
 800fa46:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800fa48:	4b20      	ldr	r3, [pc, #128]	; (800facc <MX_ADC1_Init+0xd0>)
 800fa4a:	2203      	movs	r2, #3
 800fa4c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800fa4e:	4b1f      	ldr	r3, [pc, #124]	; (800facc <MX_ADC1_Init+0xd0>)
 800fa50:	2201      	movs	r2, #1
 800fa52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800fa56:	4b1d      	ldr	r3, [pc, #116]	; (800facc <MX_ADC1_Init+0xd0>)
 800fa58:	2201      	movs	r2, #1
 800fa5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800fa5c:	481b      	ldr	r0, [pc, #108]	; (800facc <MX_ADC1_Init+0xd0>)
 800fa5e:	f001 fa11 	bl	8010e84 <HAL_ADC_Init>
 800fa62:	4603      	mov	r3, r0
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d001      	beq.n	800fa6c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800fa68:	f000 fc66 	bl	8010338 <Error_Handler>
=======
 800d972:	4b2f      	ldr	r3, [pc, #188]	; (800da30 <MX_ADC1_Init+0xd0>)
 800d974:	4a2f      	ldr	r2, [pc, #188]	; (800da34 <MX_ADC1_Init+0xd4>)
 800d976:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800d978:	4b2d      	ldr	r3, [pc, #180]	; (800da30 <MX_ADC1_Init+0xd0>)
 800d97a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d97e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d980:	4b2b      	ldr	r3, [pc, #172]	; (800da30 <MX_ADC1_Init+0xd0>)
 800d982:	2200      	movs	r2, #0
 800d984:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800d986:	4b2a      	ldr	r3, [pc, #168]	; (800da30 <MX_ADC1_Init+0xd0>)
 800d988:	2201      	movs	r2, #1
 800d98a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800d98c:	4b28      	ldr	r3, [pc, #160]	; (800da30 <MX_ADC1_Init+0xd0>)
 800d98e:	2201      	movs	r2, #1
 800d990:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d992:	4b27      	ldr	r3, [pc, #156]	; (800da30 <MX_ADC1_Init+0xd0>)
 800d994:	2200      	movs	r2, #0
 800d996:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d99a:	4b25      	ldr	r3, [pc, #148]	; (800da30 <MX_ADC1_Init+0xd0>)
 800d99c:	2200      	movs	r2, #0
 800d99e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d9a0:	4b23      	ldr	r3, [pc, #140]	; (800da30 <MX_ADC1_Init+0xd0>)
 800d9a2:	4a25      	ldr	r2, [pc, #148]	; (800da38 <MX_ADC1_Init+0xd8>)
 800d9a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d9a6:	4b22      	ldr	r3, [pc, #136]	; (800da30 <MX_ADC1_Init+0xd0>)
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800d9ac:	4b20      	ldr	r3, [pc, #128]	; (800da30 <MX_ADC1_Init+0xd0>)
 800d9ae:	2203      	movs	r2, #3
 800d9b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800d9b2:	4b1f      	ldr	r3, [pc, #124]	; (800da30 <MX_ADC1_Init+0xd0>)
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d9ba:	4b1d      	ldr	r3, [pc, #116]	; (800da30 <MX_ADC1_Init+0xd0>)
 800d9bc:	2201      	movs	r2, #1
 800d9be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d9c0:	481b      	ldr	r0, [pc, #108]	; (800da30 <MX_ADC1_Init+0xd0>)
 800d9c2:	f001 fa11 	bl	800ede8 <HAL_ADC_Init>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d001      	beq.n	800d9d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800d9cc:	f000 fc66 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
<<<<<<< HEAD
 800fa6c:	230a      	movs	r3, #10
 800fa6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800fa70:	2301      	movs	r3, #1
 800fa72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800fa74:	2303      	movs	r3, #3
 800fa76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800fa78:	463b      	mov	r3, r7
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	4813      	ldr	r0, [pc, #76]	; (800facc <MX_ADC1_Init+0xd0>)
 800fa7e:	f001 fcdf 	bl	8011440 <HAL_ADC_ConfigChannel>
 800fa82:	4603      	mov	r3, r0
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d001      	beq.n	800fa8c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800fa88:	f000 fc56 	bl	8010338 <Error_Handler>
=======
 800d9d0:	230a      	movs	r3, #10
 800d9d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800d9d8:	2303      	movs	r3, #3
 800d9da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d9dc:	463b      	mov	r3, r7
 800d9de:	4619      	mov	r1, r3
 800d9e0:	4813      	ldr	r0, [pc, #76]	; (800da30 <MX_ADC1_Init+0xd0>)
 800d9e2:	f001 fcdf 	bl	800f3a4 <HAL_ADC_ConfigChannel>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d001      	beq.n	800d9f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800d9ec:	f000 fc56 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
<<<<<<< HEAD
 800fa8c:	230e      	movs	r3, #14
 800fa8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800fa90:	2302      	movs	r3, #2
 800fa92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800fa94:	463b      	mov	r3, r7
 800fa96:	4619      	mov	r1, r3
 800fa98:	480c      	ldr	r0, [pc, #48]	; (800facc <MX_ADC1_Init+0xd0>)
 800fa9a:	f001 fcd1 	bl	8011440 <HAL_ADC_ConfigChannel>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d001      	beq.n	800faa8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800faa4:	f000 fc48 	bl	8010338 <Error_Handler>
=======
 800d9f0:	230e      	movs	r3, #14
 800d9f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d9f8:	463b      	mov	r3, r7
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	480c      	ldr	r0, [pc, #48]	; (800da30 <MX_ADC1_Init+0xd0>)
 800d9fe:	f001 fcd1 	bl	800f3a4 <HAL_ADC_ConfigChannel>
 800da02:	4603      	mov	r3, r0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d001      	beq.n	800da0c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800da08:	f000 fc48 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
<<<<<<< HEAD
 800faa8:	2309      	movs	r3, #9
 800faaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800faac:	2303      	movs	r3, #3
 800faae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800fab0:	463b      	mov	r3, r7
 800fab2:	4619      	mov	r1, r3
 800fab4:	4805      	ldr	r0, [pc, #20]	; (800facc <MX_ADC1_Init+0xd0>)
 800fab6:	f001 fcc3 	bl	8011440 <HAL_ADC_ConfigChannel>
 800faba:	4603      	mov	r3, r0
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d001      	beq.n	800fac4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800fac0:	f000 fc3a 	bl	8010338 <Error_Handler>
=======
 800da0c:	2309      	movs	r3, #9
 800da0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800da10:	2303      	movs	r3, #3
 800da12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800da14:	463b      	mov	r3, r7
 800da16:	4619      	mov	r1, r3
 800da18:	4805      	ldr	r0, [pc, #20]	; (800da30 <MX_ADC1_Init+0xd0>)
 800da1a:	f001 fcc3 	bl	800f3a4 <HAL_ADC_ConfigChannel>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d001      	beq.n	800da28 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800da24:	f000 fc3a 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< HEAD
 800fac4:	bf00      	nop
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	20019d90 	.word	0x20019d90
 800fad0:	40012000 	.word	0x40012000
 800fad4:	0f000001 	.word	0x0f000001

0800fad8 <MX_ADC2_Init>:
=======
 800da28:	bf00      	nop
 800da2a:	3710      	adds	r7, #16
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	20015c18 	.word	0x20015c18
 800da34:	40012000 	.word	0x40012000
 800da38:	0f000001 	.word	0x0f000001

0800da3c <MX_ADC2_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
<<<<<<< HEAD
 800fad8:	b580      	push	{r7, lr}
 800fada:	b084      	sub	sp, #16
 800fadc:	af00      	add	r7, sp, #0
=======
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 800fade:	463b      	mov	r3, r7
 800fae0:	2200      	movs	r2, #0
 800fae2:	601a      	str	r2, [r3, #0]
 800fae4:	605a      	str	r2, [r3, #4]
 800fae6:	609a      	str	r2, [r3, #8]
 800fae8:	60da      	str	r2, [r3, #12]
=======
 800da42:	463b      	mov	r3, r7
 800da44:	2200      	movs	r2, #0
 800da46:	601a      	str	r2, [r3, #0]
 800da48:	605a      	str	r2, [r3, #4]
 800da4a:	609a      	str	r2, [r3, #8]
 800da4c:	60da      	str	r2, [r3, #12]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
<<<<<<< HEAD
 800faea:	4b28      	ldr	r3, [pc, #160]	; (800fb8c <MX_ADC2_Init+0xb4>)
 800faec:	4a28      	ldr	r2, [pc, #160]	; (800fb90 <MX_ADC2_Init+0xb8>)
 800faee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800faf0:	4b26      	ldr	r3, [pc, #152]	; (800fb8c <MX_ADC2_Init+0xb4>)
 800faf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800faf6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800faf8:	4b24      	ldr	r3, [pc, #144]	; (800fb8c <MX_ADC2_Init+0xb4>)
 800fafa:	2200      	movs	r2, #0
 800fafc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800fafe:	4b23      	ldr	r3, [pc, #140]	; (800fb8c <MX_ADC2_Init+0xb4>)
 800fb00:	2201      	movs	r2, #1
 800fb02:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800fb04:	4b21      	ldr	r3, [pc, #132]	; (800fb8c <MX_ADC2_Init+0xb4>)
 800fb06:	2201      	movs	r2, #1
 800fb08:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800fb0a:	4b20      	ldr	r3, [pc, #128]	; (800fb8c <MX_ADC2_Init+0xb4>)
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800fb12:	4b1e      	ldr	r3, [pc, #120]	; (800fb8c <MX_ADC2_Init+0xb4>)
 800fb14:	2200      	movs	r2, #0
 800fb16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800fb18:	4b1c      	ldr	r3, [pc, #112]	; (800fb8c <MX_ADC2_Init+0xb4>)
 800fb1a:	4a1e      	ldr	r2, [pc, #120]	; (800fb94 <MX_ADC2_Init+0xbc>)
 800fb1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800fb1e:	4b1b      	ldr	r3, [pc, #108]	; (800fb8c <MX_ADC2_Init+0xb4>)
 800fb20:	2200      	movs	r2, #0
 800fb22:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800fb24:	4b19      	ldr	r3, [pc, #100]	; (800fb8c <MX_ADC2_Init+0xb4>)
 800fb26:	2202      	movs	r2, #2
 800fb28:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800fb2a:	4b18      	ldr	r3, [pc, #96]	; (800fb8c <MX_ADC2_Init+0xb4>)
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800fb32:	4b16      	ldr	r3, [pc, #88]	; (800fb8c <MX_ADC2_Init+0xb4>)
 800fb34:	2201      	movs	r2, #1
 800fb36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800fb38:	4814      	ldr	r0, [pc, #80]	; (800fb8c <MX_ADC2_Init+0xb4>)
 800fb3a:	f001 f9a3 	bl	8010e84 <HAL_ADC_Init>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d001      	beq.n	800fb48 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800fb44:	f000 fbf8 	bl	8010338 <Error_Handler>
=======
 800da4e:	4b28      	ldr	r3, [pc, #160]	; (800daf0 <MX_ADC2_Init+0xb4>)
 800da50:	4a28      	ldr	r2, [pc, #160]	; (800daf4 <MX_ADC2_Init+0xb8>)
 800da52:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800da54:	4b26      	ldr	r3, [pc, #152]	; (800daf0 <MX_ADC2_Init+0xb4>)
 800da56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800da5a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800da5c:	4b24      	ldr	r3, [pc, #144]	; (800daf0 <MX_ADC2_Init+0xb4>)
 800da5e:	2200      	movs	r2, #0
 800da60:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800da62:	4b23      	ldr	r3, [pc, #140]	; (800daf0 <MX_ADC2_Init+0xb4>)
 800da64:	2201      	movs	r2, #1
 800da66:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800da68:	4b21      	ldr	r3, [pc, #132]	; (800daf0 <MX_ADC2_Init+0xb4>)
 800da6a:	2201      	movs	r2, #1
 800da6c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800da6e:	4b20      	ldr	r3, [pc, #128]	; (800daf0 <MX_ADC2_Init+0xb4>)
 800da70:	2200      	movs	r2, #0
 800da72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800da76:	4b1e      	ldr	r3, [pc, #120]	; (800daf0 <MX_ADC2_Init+0xb4>)
 800da78:	2200      	movs	r2, #0
 800da7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800da7c:	4b1c      	ldr	r3, [pc, #112]	; (800daf0 <MX_ADC2_Init+0xb4>)
 800da7e:	4a1e      	ldr	r2, [pc, #120]	; (800daf8 <MX_ADC2_Init+0xbc>)
 800da80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800da82:	4b1b      	ldr	r3, [pc, #108]	; (800daf0 <MX_ADC2_Init+0xb4>)
 800da84:	2200      	movs	r2, #0
 800da86:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800da88:	4b19      	ldr	r3, [pc, #100]	; (800daf0 <MX_ADC2_Init+0xb4>)
 800da8a:	2202      	movs	r2, #2
 800da8c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800da8e:	4b18      	ldr	r3, [pc, #96]	; (800daf0 <MX_ADC2_Init+0xb4>)
 800da90:	2201      	movs	r2, #1
 800da92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800da96:	4b16      	ldr	r3, [pc, #88]	; (800daf0 <MX_ADC2_Init+0xb4>)
 800da98:	2201      	movs	r2, #1
 800da9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800da9c:	4814      	ldr	r0, [pc, #80]	; (800daf0 <MX_ADC2_Init+0xb4>)
 800da9e:	f001 f9a3 	bl	800ede8 <HAL_ADC_Init>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800daa8:	f000 fbf8 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
<<<<<<< HEAD
 800fb48:	230b      	movs	r3, #11
 800fb4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800fb50:	2303      	movs	r3, #3
 800fb52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800fb54:	463b      	mov	r3, r7
 800fb56:	4619      	mov	r1, r3
 800fb58:	480c      	ldr	r0, [pc, #48]	; (800fb8c <MX_ADC2_Init+0xb4>)
 800fb5a:	f001 fc71 	bl	8011440 <HAL_ADC_ConfigChannel>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d001      	beq.n	800fb68 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800fb64:	f000 fbe8 	bl	8010338 <Error_Handler>
=======
 800daac:	230b      	movs	r3, #11
 800daae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800dab0:	2301      	movs	r3, #1
 800dab2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800dab4:	2303      	movs	r3, #3
 800dab6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800dab8:	463b      	mov	r3, r7
 800daba:	4619      	mov	r1, r3
 800dabc:	480c      	ldr	r0, [pc, #48]	; (800daf0 <MX_ADC2_Init+0xb4>)
 800dabe:	f001 fc71 	bl	800f3a4 <HAL_ADC_ConfigChannel>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d001      	beq.n	800dacc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800dac8:	f000 fbe8 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
<<<<<<< HEAD
 800fb68:	230f      	movs	r3, #15
 800fb6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800fb6c:	2302      	movs	r3, #2
 800fb6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800fb70:	463b      	mov	r3, r7
 800fb72:	4619      	mov	r1, r3
 800fb74:	4805      	ldr	r0, [pc, #20]	; (800fb8c <MX_ADC2_Init+0xb4>)
 800fb76:	f001 fc63 	bl	8011440 <HAL_ADC_ConfigChannel>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d001      	beq.n	800fb84 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800fb80:	f000 fbda 	bl	8010338 <Error_Handler>
=======
 800dacc:	230f      	movs	r3, #15
 800dace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800dad0:	2302      	movs	r3, #2
 800dad2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800dad4:	463b      	mov	r3, r7
 800dad6:	4619      	mov	r1, r3
 800dad8:	4805      	ldr	r0, [pc, #20]	; (800daf0 <MX_ADC2_Init+0xb4>)
 800dada:	f001 fc63 	bl	800f3a4 <HAL_ADC_ConfigChannel>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d001      	beq.n	800dae8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800dae4:	f000 fbda 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
<<<<<<< HEAD
 800fb84:	bf00      	nop
 800fb86:	3710      	adds	r7, #16
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}
 800fb8c:	2000e0d4 	.word	0x2000e0d4
 800fb90:	40012100 	.word	0x40012100
 800fb94:	0f000001 	.word	0x0f000001

0800fb98 <MX_SPI3_Init>:
=======
 800dae8:	bf00      	nop
 800daea:	3710      	adds	r7, #16
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	20005114 	.word	0x20005114
 800daf4:	40012100 	.word	0x40012100
 800daf8:	0f000001 	.word	0x0f000001

0800dafc <MX_SPI3_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
<<<<<<< HEAD
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	af00      	add	r7, sp, #0
=======
 800dafc:	b580      	push	{r7, lr}
 800dafe:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
<<<<<<< HEAD
 800fb9c:	4b17      	ldr	r3, [pc, #92]	; (800fbfc <MX_SPI3_Init+0x64>)
 800fb9e:	4a18      	ldr	r2, [pc, #96]	; (800fc00 <MX_SPI3_Init+0x68>)
 800fba0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800fba2:	4b16      	ldr	r3, [pc, #88]	; (800fbfc <MX_SPI3_Init+0x64>)
 800fba4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800fba8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800fbaa:	4b14      	ldr	r3, [pc, #80]	; (800fbfc <MX_SPI3_Init+0x64>)
 800fbac:	2200      	movs	r2, #0
 800fbae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800fbb0:	4b12      	ldr	r3, [pc, #72]	; (800fbfc <MX_SPI3_Init+0x64>)
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800fbb6:	4b11      	ldr	r3, [pc, #68]	; (800fbfc <MX_SPI3_Init+0x64>)
 800fbb8:	2202      	movs	r2, #2
 800fbba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800fbbc:	4b0f      	ldr	r3, [pc, #60]	; (800fbfc <MX_SPI3_Init+0x64>)
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800fbc2:	4b0e      	ldr	r3, [pc, #56]	; (800fbfc <MX_SPI3_Init+0x64>)
 800fbc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fbc8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800fbca:	4b0c      	ldr	r3, [pc, #48]	; (800fbfc <MX_SPI3_Init+0x64>)
 800fbcc:	2228      	movs	r2, #40	; 0x28
 800fbce:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800fbd0:	4b0a      	ldr	r3, [pc, #40]	; (800fbfc <MX_SPI3_Init+0x64>)
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800fbd6:	4b09      	ldr	r3, [pc, #36]	; (800fbfc <MX_SPI3_Init+0x64>)
 800fbd8:	2200      	movs	r2, #0
 800fbda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fbdc:	4b07      	ldr	r3, [pc, #28]	; (800fbfc <MX_SPI3_Init+0x64>)
 800fbde:	2200      	movs	r2, #0
 800fbe0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800fbe2:	4b06      	ldr	r3, [pc, #24]	; (800fbfc <MX_SPI3_Init+0x64>)
 800fbe4:	220a      	movs	r2, #10
 800fbe6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800fbe8:	4804      	ldr	r0, [pc, #16]	; (800fbfc <MX_SPI3_Init+0x64>)
 800fbea:	f003 fd7b 	bl	80136e4 <HAL_SPI_Init>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d001      	beq.n	800fbf8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800fbf4:	f000 fba0 	bl	8010338 <Error_Handler>
=======
 800db00:	4b17      	ldr	r3, [pc, #92]	; (800db60 <MX_SPI3_Init+0x64>)
 800db02:	4a18      	ldr	r2, [pc, #96]	; (800db64 <MX_SPI3_Init+0x68>)
 800db04:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800db06:	4b16      	ldr	r3, [pc, #88]	; (800db60 <MX_SPI3_Init+0x64>)
 800db08:	f44f 7282 	mov.w	r2, #260	; 0x104
 800db0c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800db0e:	4b14      	ldr	r3, [pc, #80]	; (800db60 <MX_SPI3_Init+0x64>)
 800db10:	2200      	movs	r2, #0
 800db12:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800db14:	4b12      	ldr	r3, [pc, #72]	; (800db60 <MX_SPI3_Init+0x64>)
 800db16:	2200      	movs	r2, #0
 800db18:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800db1a:	4b11      	ldr	r3, [pc, #68]	; (800db60 <MX_SPI3_Init+0x64>)
 800db1c:	2202      	movs	r2, #2
 800db1e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800db20:	4b0f      	ldr	r3, [pc, #60]	; (800db60 <MX_SPI3_Init+0x64>)
 800db22:	2201      	movs	r2, #1
 800db24:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800db26:	4b0e      	ldr	r3, [pc, #56]	; (800db60 <MX_SPI3_Init+0x64>)
 800db28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db2c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800db2e:	4b0c      	ldr	r3, [pc, #48]	; (800db60 <MX_SPI3_Init+0x64>)
 800db30:	2228      	movs	r2, #40	; 0x28
 800db32:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800db34:	4b0a      	ldr	r3, [pc, #40]	; (800db60 <MX_SPI3_Init+0x64>)
 800db36:	2200      	movs	r2, #0
 800db38:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800db3a:	4b09      	ldr	r3, [pc, #36]	; (800db60 <MX_SPI3_Init+0x64>)
 800db3c:	2200      	movs	r2, #0
 800db3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db40:	4b07      	ldr	r3, [pc, #28]	; (800db60 <MX_SPI3_Init+0x64>)
 800db42:	2200      	movs	r2, #0
 800db44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800db46:	4b06      	ldr	r3, [pc, #24]	; (800db60 <MX_SPI3_Init+0x64>)
 800db48:	220a      	movs	r2, #10
 800db4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800db4c:	4804      	ldr	r0, [pc, #16]	; (800db60 <MX_SPI3_Init+0x64>)
 800db4e:	f003 fd7b 	bl	8011648 <HAL_SPI_Init>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d001      	beq.n	800db5c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800db58:	f000 fba0 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
<<<<<<< HEAD
 800fbf8:	bf00      	nop
 800fbfa:	bd80      	pop	{r7, pc}
 800fbfc:	20019d34 	.word	0x20019d34
 800fc00:	40003c00 	.word	0x40003c00

0800fc04 <MX_TIM1_Init>:
=======
 800db5c:	bf00      	nop
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	20015bbc 	.word	0x20015bbc
 800db64:	40003c00 	.word	0x40003c00

0800db68 <MX_TIM1_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
<<<<<<< HEAD
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b086      	sub	sp, #24
 800fc08:	af00      	add	r7, sp, #0
=======
 800db68:	b580      	push	{r7, lr}
 800db6a:	b086      	sub	sp, #24
 800db6c:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 800fc0a:	f107 0308 	add.w	r3, r7, #8
 800fc0e:	2200      	movs	r2, #0
 800fc10:	601a      	str	r2, [r3, #0]
 800fc12:	605a      	str	r2, [r3, #4]
 800fc14:	609a      	str	r2, [r3, #8]
 800fc16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fc18:	463b      	mov	r3, r7
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	601a      	str	r2, [r3, #0]
 800fc1e:	605a      	str	r2, [r3, #4]
=======
 800db6e:	f107 0308 	add.w	r3, r7, #8
 800db72:	2200      	movs	r2, #0
 800db74:	601a      	str	r2, [r3, #0]
 800db76:	605a      	str	r2, [r3, #4]
 800db78:	609a      	str	r2, [r3, #8]
 800db7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800db7c:	463b      	mov	r3, r7
 800db7e:	2200      	movs	r2, #0
 800db80:	601a      	str	r2, [r3, #0]
 800db82:	605a      	str	r2, [r3, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< HEAD
 800fc20:	4b1e      	ldr	r3, [pc, #120]	; (800fc9c <MX_TIM1_Init+0x98>)
 800fc22:	4a1f      	ldr	r2, [pc, #124]	; (800fca0 <MX_TIM1_Init+0x9c>)
 800fc24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800fc26:	4b1d      	ldr	r3, [pc, #116]	; (800fc9c <MX_TIM1_Init+0x98>)
 800fc28:	22a7      	movs	r2, #167	; 0xa7
 800fc2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fc2c:	4b1b      	ldr	r3, [pc, #108]	; (800fc9c <MX_TIM1_Init+0x98>)
 800fc2e:	2200      	movs	r2, #0
 800fc30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800fc32:	4b1a      	ldr	r3, [pc, #104]	; (800fc9c <MX_TIM1_Init+0x98>)
 800fc34:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fc38:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fc3a:	4b18      	ldr	r3, [pc, #96]	; (800fc9c <MX_TIM1_Init+0x98>)
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800fc40:	4b16      	ldr	r3, [pc, #88]	; (800fc9c <MX_TIM1_Init+0x98>)
 800fc42:	2200      	movs	r2, #0
 800fc44:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fc46:	4b15      	ldr	r3, [pc, #84]	; (800fc9c <MX_TIM1_Init+0x98>)
 800fc48:	2200      	movs	r2, #0
 800fc4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800fc4c:	4813      	ldr	r0, [pc, #76]	; (800fc9c <MX_TIM1_Init+0x98>)
 800fc4e:	f004 fa9d 	bl	801418c <HAL_TIM_Base_Init>
 800fc52:	4603      	mov	r3, r0
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d001      	beq.n	800fc5c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800fc58:	f000 fb6e 	bl	8010338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fc5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800fc62:	f107 0308 	add.w	r3, r7, #8
 800fc66:	4619      	mov	r1, r3
 800fc68:	480c      	ldr	r0, [pc, #48]	; (800fc9c <MX_TIM1_Init+0x98>)
 800fc6a:	f005 f821 	bl	8014cb0 <HAL_TIM_ConfigClockSource>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d001      	beq.n	800fc78 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800fc74:	f000 fb60 	bl	8010338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fc78:	2300      	movs	r3, #0
 800fc7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800fc80:	463b      	mov	r3, r7
 800fc82:	4619      	mov	r1, r3
 800fc84:	4805      	ldr	r0, [pc, #20]	; (800fc9c <MX_TIM1_Init+0x98>)
 800fc86:	f005 fccd 	bl	8015624 <HAL_TIMEx_MasterConfigSynchronization>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d001      	beq.n	800fc94 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800fc90:	f000 fb52 	bl	8010338 <Error_Handler>
=======
 800db84:	4b1e      	ldr	r3, [pc, #120]	; (800dc00 <MX_TIM1_Init+0x98>)
 800db86:	4a1f      	ldr	r2, [pc, #124]	; (800dc04 <MX_TIM1_Init+0x9c>)
 800db88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800db8a:	4b1d      	ldr	r3, [pc, #116]	; (800dc00 <MX_TIM1_Init+0x98>)
 800db8c:	22a7      	movs	r2, #167	; 0xa7
 800db8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800db90:	4b1b      	ldr	r3, [pc, #108]	; (800dc00 <MX_TIM1_Init+0x98>)
 800db92:	2200      	movs	r2, #0
 800db94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800db96:	4b1a      	ldr	r3, [pc, #104]	; (800dc00 <MX_TIM1_Init+0x98>)
 800db98:	f240 32e7 	movw	r2, #999	; 0x3e7
 800db9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800db9e:	4b18      	ldr	r3, [pc, #96]	; (800dc00 <MX_TIM1_Init+0x98>)
 800dba0:	2200      	movs	r2, #0
 800dba2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800dba4:	4b16      	ldr	r3, [pc, #88]	; (800dc00 <MX_TIM1_Init+0x98>)
 800dba6:	2200      	movs	r2, #0
 800dba8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dbaa:	4b15      	ldr	r3, [pc, #84]	; (800dc00 <MX_TIM1_Init+0x98>)
 800dbac:	2200      	movs	r2, #0
 800dbae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800dbb0:	4813      	ldr	r0, [pc, #76]	; (800dc00 <MX_TIM1_Init+0x98>)
 800dbb2:	f004 fa9d 	bl	80120f0 <HAL_TIM_Base_Init>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d001      	beq.n	800dbc0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800dbbc:	f000 fb6e 	bl	800e29c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dbc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800dbc6:	f107 0308 	add.w	r3, r7, #8
 800dbca:	4619      	mov	r1, r3
 800dbcc:	480c      	ldr	r0, [pc, #48]	; (800dc00 <MX_TIM1_Init+0x98>)
 800dbce:	f005 f821 	bl	8012c14 <HAL_TIM_ConfigClockSource>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d001      	beq.n	800dbdc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800dbd8:	f000 fb60 	bl	800e29c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800dbe4:	463b      	mov	r3, r7
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	4805      	ldr	r0, [pc, #20]	; (800dc00 <MX_TIM1_Init+0x98>)
 800dbea:	f005 fccd 	bl	8013588 <HAL_TIMEx_MasterConfigSynchronization>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d001      	beq.n	800dbf8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800dbf4:	f000 fb52 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
<<<<<<< HEAD
 800fc94:	bf00      	nop
 800fc96:	3718      	adds	r7, #24
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	2001a2a8 	.word	0x2001a2a8
 800fca0:	40010000 	.word	0x40010000

0800fca4 <MX_TIM2_Init>:
=======
 800dbf8:	bf00      	nop
 800dbfa:	3718      	adds	r7, #24
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	20016130 	.word	0x20016130
 800dc04:	40010000 	.word	0x40010000

0800dc08 <MX_TIM2_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b08e      	sub	sp, #56	; 0x38
 800fca8:	af00      	add	r7, sp, #0
=======
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b08e      	sub	sp, #56	; 0x38
 800dc0c:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 800fcaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fcae:	2200      	movs	r2, #0
 800fcb0:	601a      	str	r2, [r3, #0]
 800fcb2:	605a      	str	r2, [r3, #4]
 800fcb4:	609a      	str	r2, [r3, #8]
 800fcb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fcb8:	f107 0320 	add.w	r3, r7, #32
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	601a      	str	r2, [r3, #0]
 800fcc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fcc2:	1d3b      	adds	r3, r7, #4
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	601a      	str	r2, [r3, #0]
 800fcc8:	605a      	str	r2, [r3, #4]
 800fcca:	609a      	str	r2, [r3, #8]
 800fccc:	60da      	str	r2, [r3, #12]
 800fcce:	611a      	str	r2, [r3, #16]
 800fcd0:	615a      	str	r2, [r3, #20]
 800fcd2:	619a      	str	r2, [r3, #24]
=======
 800dc0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc12:	2200      	movs	r2, #0
 800dc14:	601a      	str	r2, [r3, #0]
 800dc16:	605a      	str	r2, [r3, #4]
 800dc18:	609a      	str	r2, [r3, #8]
 800dc1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc1c:	f107 0320 	add.w	r3, r7, #32
 800dc20:	2200      	movs	r2, #0
 800dc22:	601a      	str	r2, [r3, #0]
 800dc24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dc26:	1d3b      	adds	r3, r7, #4
 800dc28:	2200      	movs	r2, #0
 800dc2a:	601a      	str	r2, [r3, #0]
 800dc2c:	605a      	str	r2, [r3, #4]
 800dc2e:	609a      	str	r2, [r3, #8]
 800dc30:	60da      	str	r2, [r3, #12]
 800dc32:	611a      	str	r2, [r3, #16]
 800dc34:	615a      	str	r2, [r3, #20]
 800dc36:	619a      	str	r2, [r3, #24]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 800fcd4:	4b2d      	ldr	r3, [pc, #180]	; (800fd8c <MX_TIM2_Init+0xe8>)
 800fcd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fcda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800fcdc:	4b2b      	ldr	r3, [pc, #172]	; (800fd8c <MX_TIM2_Init+0xe8>)
 800fcde:	2200      	movs	r2, #0
 800fce0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fce2:	4b2a      	ldr	r3, [pc, #168]	; (800fd8c <MX_TIM2_Init+0xe8>)
 800fce4:	2200      	movs	r2, #0
 800fce6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800fce8:	4b28      	ldr	r3, [pc, #160]	; (800fd8c <MX_TIM2_Init+0xe8>)
 800fcea:	f241 0267 	movw	r2, #4199	; 0x1067
 800fcee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fcf0:	4b26      	ldr	r3, [pc, #152]	; (800fd8c <MX_TIM2_Init+0xe8>)
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fcf6:	4b25      	ldr	r3, [pc, #148]	; (800fd8c <MX_TIM2_Init+0xe8>)
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800fcfc:	4823      	ldr	r0, [pc, #140]	; (800fd8c <MX_TIM2_Init+0xe8>)
 800fcfe:	f004 fa45 	bl	801418c <HAL_TIM_Base_Init>
 800fd02:	4603      	mov	r3, r0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d001      	beq.n	800fd0c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800fd08:	f000 fb16 	bl	8010338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fd0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800fd12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd16:	4619      	mov	r1, r3
 800fd18:	481c      	ldr	r0, [pc, #112]	; (800fd8c <MX_TIM2_Init+0xe8>)
 800fd1a:	f004 ffc9 	bl	8014cb0 <HAL_TIM_ConfigClockSource>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d001      	beq.n	800fd28 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800fd24:	f000 fb08 	bl	8010338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800fd28:	4818      	ldr	r0, [pc, #96]	; (800fd8c <MX_TIM2_Init+0xe8>)
 800fd2a:	f004 fbfd 	bl	8014528 <HAL_TIM_PWM_Init>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d001      	beq.n	800fd38 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800fd34:	f000 fb00 	bl	8010338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800fd40:	f107 0320 	add.w	r3, r7, #32
 800fd44:	4619      	mov	r1, r3
 800fd46:	4811      	ldr	r0, [pc, #68]	; (800fd8c <MX_TIM2_Init+0xe8>)
 800fd48:	f005 fc6c 	bl	8015624 <HAL_TIMEx_MasterConfigSynchronization>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d001      	beq.n	800fd56 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800fd52:	f000 faf1 	bl	8010338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fd56:	2360      	movs	r3, #96	; 0x60
 800fd58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fd62:	2300      	movs	r3, #0
 800fd64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800fd66:	1d3b      	adds	r3, r7, #4
 800fd68:	220c      	movs	r2, #12
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	4807      	ldr	r0, [pc, #28]	; (800fd8c <MX_TIM2_Init+0xe8>)
 800fd6e:	f004 fed9 	bl	8014b24 <HAL_TIM_PWM_ConfigChannel>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d001      	beq.n	800fd7c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800fd78:	f000 fade 	bl	8010338 <Error_Handler>
=======
 800dc38:	4b2d      	ldr	r3, [pc, #180]	; (800dcf0 <MX_TIM2_Init+0xe8>)
 800dc3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dc3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800dc40:	4b2b      	ldr	r3, [pc, #172]	; (800dcf0 <MX_TIM2_Init+0xe8>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc46:	4b2a      	ldr	r3, [pc, #168]	; (800dcf0 <MX_TIM2_Init+0xe8>)
 800dc48:	2200      	movs	r2, #0
 800dc4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800dc4c:	4b28      	ldr	r3, [pc, #160]	; (800dcf0 <MX_TIM2_Init+0xe8>)
 800dc4e:	f241 0267 	movw	r2, #4199	; 0x1067
 800dc52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc54:	4b26      	ldr	r3, [pc, #152]	; (800dcf0 <MX_TIM2_Init+0xe8>)
 800dc56:	2200      	movs	r2, #0
 800dc58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc5a:	4b25      	ldr	r3, [pc, #148]	; (800dcf0 <MX_TIM2_Init+0xe8>)
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800dc60:	4823      	ldr	r0, [pc, #140]	; (800dcf0 <MX_TIM2_Init+0xe8>)
 800dc62:	f004 fa45 	bl	80120f0 <HAL_TIM_Base_Init>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d001      	beq.n	800dc70 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800dc6c:	f000 fb16 	bl	800e29c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dc70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc74:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800dc76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	481c      	ldr	r0, [pc, #112]	; (800dcf0 <MX_TIM2_Init+0xe8>)
 800dc7e:	f004 ffc9 	bl	8012c14 <HAL_TIM_ConfigClockSource>
 800dc82:	4603      	mov	r3, r0
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d001      	beq.n	800dc8c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800dc88:	f000 fb08 	bl	800e29c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800dc8c:	4818      	ldr	r0, [pc, #96]	; (800dcf0 <MX_TIM2_Init+0xe8>)
 800dc8e:	f004 fbfd 	bl	801248c <HAL_TIM_PWM_Init>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d001      	beq.n	800dc9c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800dc98:	f000 fb00 	bl	800e29c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dca0:	2300      	movs	r3, #0
 800dca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800dca4:	f107 0320 	add.w	r3, r7, #32
 800dca8:	4619      	mov	r1, r3
 800dcaa:	4811      	ldr	r0, [pc, #68]	; (800dcf0 <MX_TIM2_Init+0xe8>)
 800dcac:	f005 fc6c 	bl	8013588 <HAL_TIMEx_MasterConfigSynchronization>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d001      	beq.n	800dcba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800dcb6:	f000 faf1 	bl	800e29c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dcba:	2360      	movs	r3, #96	; 0x60
 800dcbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800dcca:	1d3b      	adds	r3, r7, #4
 800dccc:	220c      	movs	r2, #12
 800dcce:	4619      	mov	r1, r3
 800dcd0:	4807      	ldr	r0, [pc, #28]	; (800dcf0 <MX_TIM2_Init+0xe8>)
 800dcd2:	f004 fed9 	bl	8012a88 <HAL_TIM_PWM_ConfigChannel>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d001      	beq.n	800dce0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800dcdc:	f000 fade 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
<<<<<<< HEAD
 800fd7c:	4803      	ldr	r0, [pc, #12]	; (800fd8c <MX_TIM2_Init+0xe8>)
 800fd7e:	f000 fd7b 	bl	8010878 <HAL_TIM_MspPostInit>

}
 800fd82:	bf00      	nop
 800fd84:	3738      	adds	r7, #56	; 0x38
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	2001a6f8 	.word	0x2001a6f8

0800fd90 <MX_TIM3_Init>:
=======
 800dce0:	4803      	ldr	r0, [pc, #12]	; (800dcf0 <MX_TIM2_Init+0xe8>)
 800dce2:	f000 fd7b 	bl	800e7dc <HAL_TIM_MspPostInit>

}
 800dce6:	bf00      	nop
 800dce8:	3738      	adds	r7, #56	; 0x38
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	20016580 	.word	0x20016580

0800dcf4 <MX_TIM3_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
<<<<<<< HEAD
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b08c      	sub	sp, #48	; 0x30
 800fd94:	af00      	add	r7, sp, #0
=======
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b08c      	sub	sp, #48	; 0x30
 800dcf8:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
<<<<<<< HEAD
 800fd96:	f107 030c 	add.w	r3, r7, #12
 800fd9a:	2224      	movs	r2, #36	; 0x24
 800fd9c:	2100      	movs	r1, #0
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f006 fa73 	bl	801628a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fda4:	1d3b      	adds	r3, r7, #4
 800fda6:	2200      	movs	r2, #0
 800fda8:	601a      	str	r2, [r3, #0]
 800fdaa:	605a      	str	r2, [r3, #4]
=======
 800dcfa:	f107 030c 	add.w	r3, r7, #12
 800dcfe:	2224      	movs	r2, #36	; 0x24
 800dd00:	2100      	movs	r1, #0
 800dd02:	4618      	mov	r0, r3
 800dd04:	f006 fa73 	bl	80141ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dd08:	1d3b      	adds	r3, r7, #4
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	601a      	str	r2, [r3, #0]
 800dd0e:	605a      	str	r2, [r3, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 800fdac:	4b20      	ldr	r3, [pc, #128]	; (800fe30 <MX_TIM3_Init+0xa0>)
 800fdae:	4a21      	ldr	r2, [pc, #132]	; (800fe34 <MX_TIM3_Init+0xa4>)
 800fdb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800fdb2:	4b1f      	ldr	r3, [pc, #124]	; (800fe30 <MX_TIM3_Init+0xa0>)
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fdb8:	4b1d      	ldr	r3, [pc, #116]	; (800fe30 <MX_TIM3_Init+0xa0>)
 800fdba:	2200      	movs	r2, #0
 800fdbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800fdbe:	4b1c      	ldr	r3, [pc, #112]	; (800fe30 <MX_TIM3_Init+0xa0>)
 800fdc0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800fdc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fdc6:	4b1a      	ldr	r3, [pc, #104]	; (800fe30 <MX_TIM3_Init+0xa0>)
 800fdc8:	2200      	movs	r2, #0
 800fdca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fdcc:	4b18      	ldr	r3, [pc, #96]	; (800fe30 <MX_TIM3_Init+0xa0>)
 800fdce:	2200      	movs	r2, #0
 800fdd0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800fdda:	2301      	movs	r3, #1
 800fddc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800fdde:	2300      	movs	r3, #0
 800fde0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800fde2:	2300      	movs	r3, #0
 800fde4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800fde6:	2300      	movs	r3, #0
 800fde8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800fdea:	2301      	movs	r3, #1
 800fdec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800fdf6:	f107 030c 	add.w	r3, r7, #12
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	480c      	ldr	r0, [pc, #48]	; (800fe30 <MX_TIM3_Init+0xa0>)
 800fdfe:	f004 fc5f 	bl	80146c0 <HAL_TIM_Encoder_Init>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d001      	beq.n	800fe0c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800fe08:	f000 fa96 	bl	8010338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fe10:	2300      	movs	r3, #0
 800fe12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800fe14:	1d3b      	adds	r3, r7, #4
 800fe16:	4619      	mov	r1, r3
 800fe18:	4805      	ldr	r0, [pc, #20]	; (800fe30 <MX_TIM3_Init+0xa0>)
 800fe1a:	f005 fc03 	bl	8015624 <HAL_TIMEx_MasterConfigSynchronization>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d001      	beq.n	800fe28 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800fe24:	f000 fa88 	bl	8010338 <Error_Handler>
=======
 800dd10:	4b20      	ldr	r3, [pc, #128]	; (800dd94 <MX_TIM3_Init+0xa0>)
 800dd12:	4a21      	ldr	r2, [pc, #132]	; (800dd98 <MX_TIM3_Init+0xa4>)
 800dd14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800dd16:	4b1f      	ldr	r3, [pc, #124]	; (800dd94 <MX_TIM3_Init+0xa0>)
 800dd18:	2200      	movs	r2, #0
 800dd1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd1c:	4b1d      	ldr	r3, [pc, #116]	; (800dd94 <MX_TIM3_Init+0xa0>)
 800dd1e:	2200      	movs	r2, #0
 800dd20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800dd22:	4b1c      	ldr	r3, [pc, #112]	; (800dd94 <MX_TIM3_Init+0xa0>)
 800dd24:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800dd28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dd2a:	4b1a      	ldr	r3, [pc, #104]	; (800dd94 <MX_TIM3_Init+0xa0>)
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dd30:	4b18      	ldr	r3, [pc, #96]	; (800dd94 <MX_TIM3_Init+0xa0>)
 800dd32:	2200      	movs	r2, #0
 800dd34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800dd36:	2301      	movs	r3, #1
 800dd38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800dd42:	2300      	movs	r3, #0
 800dd44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800dd46:	2300      	movs	r3, #0
 800dd48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800dd4e:	2301      	movs	r3, #1
 800dd50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800dd52:	2300      	movs	r3, #0
 800dd54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800dd56:	2300      	movs	r3, #0
 800dd58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800dd5a:	f107 030c 	add.w	r3, r7, #12
 800dd5e:	4619      	mov	r1, r3
 800dd60:	480c      	ldr	r0, [pc, #48]	; (800dd94 <MX_TIM3_Init+0xa0>)
 800dd62:	f004 fc5f 	bl	8012624 <HAL_TIM_Encoder_Init>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d001      	beq.n	800dd70 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800dd6c:	f000 fa96 	bl	800e29c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dd70:	2300      	movs	r3, #0
 800dd72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dd74:	2300      	movs	r3, #0
 800dd76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800dd78:	1d3b      	adds	r3, r7, #4
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	4805      	ldr	r0, [pc, #20]	; (800dd94 <MX_TIM3_Init+0xa0>)
 800dd7e:	f005 fc03 	bl	8013588 <HAL_TIMEx_MasterConfigSynchronization>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d001      	beq.n	800dd8c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800dd88:	f000 fa88 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
<<<<<<< HEAD
 800fe28:	bf00      	nop
 800fe2a:	3730      	adds	r7, #48	; 0x30
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	20019cf0 	.word	0x20019cf0
 800fe34:	40000400 	.word	0x40000400

0800fe38 <MX_TIM4_Init>:
=======
 800dd8c:	bf00      	nop
 800dd8e:	3730      	adds	r7, #48	; 0x30
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	20015b78 	.word	0x20015b78
 800dd98:	40000400 	.word	0x40000400

0800dd9c <MX_TIM4_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
<<<<<<< HEAD
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b08c      	sub	sp, #48	; 0x30
 800fe3c:	af00      	add	r7, sp, #0
=======
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b08c      	sub	sp, #48	; 0x30
 800dda0:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
<<<<<<< HEAD
 800fe3e:	f107 030c 	add.w	r3, r7, #12
 800fe42:	2224      	movs	r2, #36	; 0x24
 800fe44:	2100      	movs	r1, #0
 800fe46:	4618      	mov	r0, r3
 800fe48:	f006 fa1f 	bl	801628a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fe4c:	1d3b      	adds	r3, r7, #4
 800fe4e:	2200      	movs	r2, #0
 800fe50:	601a      	str	r2, [r3, #0]
 800fe52:	605a      	str	r2, [r3, #4]
=======
 800dda2:	f107 030c 	add.w	r3, r7, #12
 800dda6:	2224      	movs	r2, #36	; 0x24
 800dda8:	2100      	movs	r1, #0
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f006 fa1f 	bl	80141ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ddb0:	1d3b      	adds	r3, r7, #4
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	601a      	str	r2, [r3, #0]
 800ddb6:	605a      	str	r2, [r3, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
<<<<<<< HEAD
 800fe54:	4b20      	ldr	r3, [pc, #128]	; (800fed8 <MX_TIM4_Init+0xa0>)
 800fe56:	4a21      	ldr	r2, [pc, #132]	; (800fedc <MX_TIM4_Init+0xa4>)
 800fe58:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800fe5a:	4b1f      	ldr	r3, [pc, #124]	; (800fed8 <MX_TIM4_Init+0xa0>)
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fe60:	4b1d      	ldr	r3, [pc, #116]	; (800fed8 <MX_TIM4_Init+0xa0>)
 800fe62:	2200      	movs	r2, #0
 800fe64:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800fe66:	4b1c      	ldr	r3, [pc, #112]	; (800fed8 <MX_TIM4_Init+0xa0>)
 800fe68:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800fe6c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fe6e:	4b1a      	ldr	r3, [pc, #104]	; (800fed8 <MX_TIM4_Init+0xa0>)
 800fe70:	2200      	movs	r2, #0
 800fe72:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fe74:	4b18      	ldr	r3, [pc, #96]	; (800fed8 <MX_TIM4_Init+0xa0>)
 800fe76:	2200      	movs	r2, #0
 800fe78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800fe82:	2301      	movs	r3, #1
 800fe84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800fe86:	2300      	movs	r3, #0
 800fe88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800fe92:	2301      	movs	r3, #1
 800fe94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800fe96:	2300      	movs	r3, #0
 800fe98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800fe9e:	f107 030c 	add.w	r3, r7, #12
 800fea2:	4619      	mov	r1, r3
 800fea4:	480c      	ldr	r0, [pc, #48]	; (800fed8 <MX_TIM4_Init+0xa0>)
 800fea6:	f004 fc0b 	bl	80146c0 <HAL_TIM_Encoder_Init>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d001      	beq.n	800feb4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800feb0:	f000 fa42 	bl	8010338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800feb4:	2300      	movs	r3, #0
 800feb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800feb8:	2300      	movs	r3, #0
 800feba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800febc:	1d3b      	adds	r3, r7, #4
 800febe:	4619      	mov	r1, r3
 800fec0:	4805      	ldr	r0, [pc, #20]	; (800fed8 <MX_TIM4_Init+0xa0>)
 800fec2:	f005 fbaf 	bl	8015624 <HAL_TIMEx_MasterConfigSynchronization>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d001      	beq.n	800fed0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800fecc:	f000 fa34 	bl	8010338 <Error_Handler>
=======
 800ddb8:	4b20      	ldr	r3, [pc, #128]	; (800de3c <MX_TIM4_Init+0xa0>)
 800ddba:	4a21      	ldr	r2, [pc, #132]	; (800de40 <MX_TIM4_Init+0xa4>)
 800ddbc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800ddbe:	4b1f      	ldr	r3, [pc, #124]	; (800de3c <MX_TIM4_Init+0xa0>)
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ddc4:	4b1d      	ldr	r3, [pc, #116]	; (800de3c <MX_TIM4_Init+0xa0>)
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800ddca:	4b1c      	ldr	r3, [pc, #112]	; (800de3c <MX_TIM4_Init+0xa0>)
 800ddcc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800ddd0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ddd2:	4b1a      	ldr	r3, [pc, #104]	; (800de3c <MX_TIM4_Init+0xa0>)
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ddd8:	4b18      	ldr	r3, [pc, #96]	; (800de3c <MX_TIM4_Init+0xa0>)
 800ddda:	2200      	movs	r2, #0
 800dddc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800ddde:	2301      	movs	r3, #1
 800dde0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800dde2:	2300      	movs	r3, #0
 800dde4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800dde6:	2301      	movs	r3, #1
 800dde8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ddea:	2300      	movs	r3, #0
 800ddec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ddfe:	2300      	movs	r3, #0
 800de00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800de02:	f107 030c 	add.w	r3, r7, #12
 800de06:	4619      	mov	r1, r3
 800de08:	480c      	ldr	r0, [pc, #48]	; (800de3c <MX_TIM4_Init+0xa0>)
 800de0a:	f004 fc0b 	bl	8012624 <HAL_TIM_Encoder_Init>
 800de0e:	4603      	mov	r3, r0
 800de10:	2b00      	cmp	r3, #0
 800de12:	d001      	beq.n	800de18 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800de14:	f000 fa42 	bl	800e29c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de18:	2300      	movs	r3, #0
 800de1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de1c:	2300      	movs	r3, #0
 800de1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800de20:	1d3b      	adds	r3, r7, #4
 800de22:	4619      	mov	r1, r3
 800de24:	4805      	ldr	r0, [pc, #20]	; (800de3c <MX_TIM4_Init+0xa0>)
 800de26:	f005 fbaf 	bl	8013588 <HAL_TIMEx_MasterConfigSynchronization>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d001      	beq.n	800de34 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800de30:	f000 fa34 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
<<<<<<< HEAD
 800fed0:	bf00      	nop
 800fed2:	3730      	adds	r7, #48	; 0x30
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}
 800fed8:	2000e094 	.word	0x2000e094
 800fedc:	40000800 	.word	0x40000800

0800fee0 <MX_TIM5_Init>:
=======
 800de34:	bf00      	nop
 800de36:	3730      	adds	r7, #48	; 0x30
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}
 800de3c:	200050d4 	.word	0x200050d4
 800de40:	40000800 	.word	0x40000800

0800de44 <MX_TIM5_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
<<<<<<< HEAD
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b08e      	sub	sp, #56	; 0x38
 800fee4:	af00      	add	r7, sp, #0
=======
 800de44:	b580      	push	{r7, lr}
 800de46:	b08e      	sub	sp, #56	; 0x38
 800de48:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 800fee6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800feea:	2200      	movs	r2, #0
 800feec:	601a      	str	r2, [r3, #0]
 800feee:	605a      	str	r2, [r3, #4]
 800fef0:	609a      	str	r2, [r3, #8]
 800fef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fef4:	f107 0320 	add.w	r3, r7, #32
 800fef8:	2200      	movs	r2, #0
 800fefa:	601a      	str	r2, [r3, #0]
 800fefc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fefe:	1d3b      	adds	r3, r7, #4
 800ff00:	2200      	movs	r2, #0
 800ff02:	601a      	str	r2, [r3, #0]
 800ff04:	605a      	str	r2, [r3, #4]
 800ff06:	609a      	str	r2, [r3, #8]
 800ff08:	60da      	str	r2, [r3, #12]
 800ff0a:	611a      	str	r2, [r3, #16]
 800ff0c:	615a      	str	r2, [r3, #20]
 800ff0e:	619a      	str	r2, [r3, #24]
=======
 800de4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de4e:	2200      	movs	r2, #0
 800de50:	601a      	str	r2, [r3, #0]
 800de52:	605a      	str	r2, [r3, #4]
 800de54:	609a      	str	r2, [r3, #8]
 800de56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800de58:	f107 0320 	add.w	r3, r7, #32
 800de5c:	2200      	movs	r2, #0
 800de5e:	601a      	str	r2, [r3, #0]
 800de60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800de62:	1d3b      	adds	r3, r7, #4
 800de64:	2200      	movs	r2, #0
 800de66:	601a      	str	r2, [r3, #0]
 800de68:	605a      	str	r2, [r3, #4]
 800de6a:	609a      	str	r2, [r3, #8]
 800de6c:	60da      	str	r2, [r3, #12]
 800de6e:	611a      	str	r2, [r3, #16]
 800de70:	615a      	str	r2, [r3, #20]
 800de72:	619a      	str	r2, [r3, #24]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
<<<<<<< HEAD
 800ff10:	4b2c      	ldr	r3, [pc, #176]	; (800ffc4 <MX_TIM5_Init+0xe4>)
 800ff12:	4a2d      	ldr	r2, [pc, #180]	; (800ffc8 <MX_TIM5_Init+0xe8>)
 800ff14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800ff16:	4b2b      	ldr	r3, [pc, #172]	; (800ffc4 <MX_TIM5_Init+0xe4>)
 800ff18:	2200      	movs	r2, #0
 800ff1a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ff1c:	4b29      	ldr	r3, [pc, #164]	; (800ffc4 <MX_TIM5_Init+0xe4>)
 800ff1e:	2200      	movs	r2, #0
 800ff20:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800ff22:	4b28      	ldr	r3, [pc, #160]	; (800ffc4 <MX_TIM5_Init+0xe4>)
 800ff24:	f241 0267 	movw	r2, #4199	; 0x1067
 800ff28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ff2a:	4b26      	ldr	r3, [pc, #152]	; (800ffc4 <MX_TIM5_Init+0xe4>)
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ff30:	4b24      	ldr	r3, [pc, #144]	; (800ffc4 <MX_TIM5_Init+0xe4>)
 800ff32:	2200      	movs	r2, #0
 800ff34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800ff36:	4823      	ldr	r0, [pc, #140]	; (800ffc4 <MX_TIM5_Init+0xe4>)
 800ff38:	f004 f928 	bl	801418c <HAL_TIM_Base_Init>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d001      	beq.n	800ff46 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800ff42:	f000 f9f9 	bl	8010338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ff46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800ff4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff50:	4619      	mov	r1, r3
 800ff52:	481c      	ldr	r0, [pc, #112]	; (800ffc4 <MX_TIM5_Init+0xe4>)
 800ff54:	f004 feac 	bl	8014cb0 <HAL_TIM_ConfigClockSource>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d001      	beq.n	800ff62 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800ff5e:	f000 f9eb 	bl	8010338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800ff62:	4818      	ldr	r0, [pc, #96]	; (800ffc4 <MX_TIM5_Init+0xe4>)
 800ff64:	f004 fae0 	bl	8014528 <HAL_TIM_PWM_Init>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d001      	beq.n	800ff72 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800ff6e:	f000 f9e3 	bl	8010338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ff72:	2300      	movs	r3, #0
 800ff74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ff76:	2300      	movs	r3, #0
 800ff78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800ff7a:	f107 0320 	add.w	r3, r7, #32
 800ff7e:	4619      	mov	r1, r3
 800ff80:	4810      	ldr	r0, [pc, #64]	; (800ffc4 <MX_TIM5_Init+0xe4>)
 800ff82:	f005 fb4f 	bl	8015624 <HAL_TIMEx_MasterConfigSynchronization>
 800ff86:	4603      	mov	r3, r0
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d001      	beq.n	800ff90 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800ff8c:	f000 f9d4 	bl	8010338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ff90:	2360      	movs	r3, #96	; 0x60
 800ff92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ff94:	2300      	movs	r3, #0
 800ff96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ffa0:	1d3b      	adds	r3, r7, #4
 800ffa2:	2204      	movs	r2, #4
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	4807      	ldr	r0, [pc, #28]	; (800ffc4 <MX_TIM5_Init+0xe4>)
 800ffa8:	f004 fdbc 	bl	8014b24 <HAL_TIM_PWM_ConfigChannel>
 800ffac:	4603      	mov	r3, r0
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d001      	beq.n	800ffb6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800ffb2:	f000 f9c1 	bl	8010338 <Error_Handler>
=======
 800de74:	4b2c      	ldr	r3, [pc, #176]	; (800df28 <MX_TIM5_Init+0xe4>)
 800de76:	4a2d      	ldr	r2, [pc, #180]	; (800df2c <MX_TIM5_Init+0xe8>)
 800de78:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800de7a:	4b2b      	ldr	r3, [pc, #172]	; (800df28 <MX_TIM5_Init+0xe4>)
 800de7c:	2200      	movs	r2, #0
 800de7e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de80:	4b29      	ldr	r3, [pc, #164]	; (800df28 <MX_TIM5_Init+0xe4>)
 800de82:	2200      	movs	r2, #0
 800de84:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800de86:	4b28      	ldr	r3, [pc, #160]	; (800df28 <MX_TIM5_Init+0xe4>)
 800de88:	f241 0267 	movw	r2, #4199	; 0x1067
 800de8c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800de8e:	4b26      	ldr	r3, [pc, #152]	; (800df28 <MX_TIM5_Init+0xe4>)
 800de90:	2200      	movs	r2, #0
 800de92:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800de94:	4b24      	ldr	r3, [pc, #144]	; (800df28 <MX_TIM5_Init+0xe4>)
 800de96:	2200      	movs	r2, #0
 800de98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800de9a:	4823      	ldr	r0, [pc, #140]	; (800df28 <MX_TIM5_Init+0xe4>)
 800de9c:	f004 f928 	bl	80120f0 <HAL_TIM_Base_Init>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d001      	beq.n	800deaa <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800dea6:	f000 f9f9 	bl	800e29c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800deaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800deae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800deb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800deb4:	4619      	mov	r1, r3
 800deb6:	481c      	ldr	r0, [pc, #112]	; (800df28 <MX_TIM5_Init+0xe4>)
 800deb8:	f004 feac 	bl	8012c14 <HAL_TIM_ConfigClockSource>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d001      	beq.n	800dec6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800dec2:	f000 f9eb 	bl	800e29c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800dec6:	4818      	ldr	r0, [pc, #96]	; (800df28 <MX_TIM5_Init+0xe4>)
 800dec8:	f004 fae0 	bl	801248c <HAL_TIM_PWM_Init>
 800decc:	4603      	mov	r3, r0
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800ded2:	f000 f9e3 	bl	800e29c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ded6:	2300      	movs	r3, #0
 800ded8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800deda:	2300      	movs	r3, #0
 800dedc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800dede:	f107 0320 	add.w	r3, r7, #32
 800dee2:	4619      	mov	r1, r3
 800dee4:	4810      	ldr	r0, [pc, #64]	; (800df28 <MX_TIM5_Init+0xe4>)
 800dee6:	f005 fb4f 	bl	8013588 <HAL_TIMEx_MasterConfigSynchronization>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d001      	beq.n	800def4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800def0:	f000 f9d4 	bl	800e29c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800def4:	2360      	movs	r3, #96	; 0x60
 800def6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800def8:	2300      	movs	r3, #0
 800defa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800defc:	2300      	movs	r3, #0
 800defe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800df00:	2300      	movs	r3, #0
 800df02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800df04:	1d3b      	adds	r3, r7, #4
 800df06:	2204      	movs	r2, #4
 800df08:	4619      	mov	r1, r3
 800df0a:	4807      	ldr	r0, [pc, #28]	; (800df28 <MX_TIM5_Init+0xe4>)
 800df0c:	f004 fdbc 	bl	8012a88 <HAL_TIM_PWM_ConfigChannel>
 800df10:	4603      	mov	r3, r0
 800df12:	2b00      	cmp	r3, #0
 800df14:	d001      	beq.n	800df1a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800df16:	f000 f9c1 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
<<<<<<< HEAD
 800ffb6:	4803      	ldr	r0, [pc, #12]	; (800ffc4 <MX_TIM5_Init+0xe4>)
 800ffb8:	f000 fc5e 	bl	8010878 <HAL_TIM_MspPostInit>

}
 800ffbc:	bf00      	nop
 800ffbe:	3738      	adds	r7, #56	; 0x38
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}
 800ffc4:	20019cac 	.word	0x20019cac
 800ffc8:	40000c00 	.word	0x40000c00

0800ffcc <MX_TIM8_Init>:
=======
 800df1a:	4803      	ldr	r0, [pc, #12]	; (800df28 <MX_TIM5_Init+0xe4>)
 800df1c:	f000 fc5e 	bl	800e7dc <HAL_TIM_MspPostInit>

}
 800df20:	bf00      	nop
 800df22:	3738      	adds	r7, #56	; 0x38
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}
 800df28:	20015b34 	.word	0x20015b34
 800df2c:	40000c00 	.word	0x40000c00

0800df30 <MX_TIM8_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
<<<<<<< HEAD
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b096      	sub	sp, #88	; 0x58
 800ffd0:	af00      	add	r7, sp, #0
=======
 800df30:	b580      	push	{r7, lr}
 800df32:	b096      	sub	sp, #88	; 0x58
 800df34:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 800ffd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	601a      	str	r2, [r3, #0]
 800ffda:	605a      	str	r2, [r3, #4]
 800ffdc:	609a      	str	r2, [r3, #8]
 800ffde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ffe0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	601a      	str	r2, [r3, #0]
 800ffe8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ffea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ffee:	2200      	movs	r2, #0
 800fff0:	601a      	str	r2, [r3, #0]
 800fff2:	605a      	str	r2, [r3, #4]
 800fff4:	609a      	str	r2, [r3, #8]
 800fff6:	60da      	str	r2, [r3, #12]
 800fff8:	611a      	str	r2, [r3, #16]
 800fffa:	615a      	str	r2, [r3, #20]
 800fffc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800fffe:	1d3b      	adds	r3, r7, #4
 8010000:	2220      	movs	r2, #32
 8010002:	2100      	movs	r1, #0
 8010004:	4618      	mov	r0, r3
 8010006:	f006 f940 	bl	801628a <memset>
=======
 800df36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df3a:	2200      	movs	r2, #0
 800df3c:	601a      	str	r2, [r3, #0]
 800df3e:	605a      	str	r2, [r3, #4]
 800df40:	609a      	str	r2, [r3, #8]
 800df42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800df44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800df48:	2200      	movs	r2, #0
 800df4a:	601a      	str	r2, [r3, #0]
 800df4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800df4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df52:	2200      	movs	r2, #0
 800df54:	601a      	str	r2, [r3, #0]
 800df56:	605a      	str	r2, [r3, #4]
 800df58:	609a      	str	r2, [r3, #8]
 800df5a:	60da      	str	r2, [r3, #12]
 800df5c:	611a      	str	r2, [r3, #16]
 800df5e:	615a      	str	r2, [r3, #20]
 800df60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800df62:	1d3b      	adds	r3, r7, #4
 800df64:	2220      	movs	r2, #32
 800df66:	2100      	movs	r1, #0
 800df68:	4618      	mov	r0, r3
 800df6a:	f006 f940 	bl	80141ee <memset>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
<<<<<<< HEAD
 801000a:	4b42      	ldr	r3, [pc, #264]	; (8010114 <MX_TIM8_Init+0x148>)
 801000c:	4a42      	ldr	r2, [pc, #264]	; (8010118 <MX_TIM8_Init+0x14c>)
 801000e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 8010010:	4b40      	ldr	r3, [pc, #256]	; (8010114 <MX_TIM8_Init+0x148>)
 8010012:	22a7      	movs	r2, #167	; 0xa7
 8010014:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010016:	4b3f      	ldr	r3, [pc, #252]	; (8010114 <MX_TIM8_Init+0x148>)
 8010018:	2200      	movs	r2, #0
 801001a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 801001c:	4b3d      	ldr	r3, [pc, #244]	; (8010114 <MX_TIM8_Init+0x148>)
 801001e:	2231      	movs	r2, #49	; 0x31
 8010020:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010022:	4b3c      	ldr	r3, [pc, #240]	; (8010114 <MX_TIM8_Init+0x148>)
 8010024:	2200      	movs	r2, #0
 8010026:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8010028:	4b3a      	ldr	r3, [pc, #232]	; (8010114 <MX_TIM8_Init+0x148>)
 801002a:	2200      	movs	r2, #0
 801002c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801002e:	4b39      	ldr	r3, [pc, #228]	; (8010114 <MX_TIM8_Init+0x148>)
 8010030:	2280      	movs	r2, #128	; 0x80
 8010032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8010034:	4837      	ldr	r0, [pc, #220]	; (8010114 <MX_TIM8_Init+0x148>)
 8010036:	f004 f8a9 	bl	801418c <HAL_TIM_Base_Init>
 801003a:	4603      	mov	r3, r0
 801003c:	2b00      	cmp	r3, #0
 801003e:	d001      	beq.n	8010044 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8010040:	f000 f97a 	bl	8010338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010048:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 801004a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801004e:	4619      	mov	r1, r3
 8010050:	4830      	ldr	r0, [pc, #192]	; (8010114 <MX_TIM8_Init+0x148>)
 8010052:	f004 fe2d 	bl	8014cb0 <HAL_TIM_ConfigClockSource>
 8010056:	4603      	mov	r3, r0
 8010058:	2b00      	cmp	r3, #0
 801005a:	d001      	beq.n	8010060 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 801005c:	f000 f96c 	bl	8010338 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8010060:	482c      	ldr	r0, [pc, #176]	; (8010114 <MX_TIM8_Init+0x148>)
 8010062:	f004 f90d 	bl	8014280 <HAL_TIM_OC_Init>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d001      	beq.n	8010070 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 801006c:	f000 f964 	bl	8010338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010070:	2300      	movs	r3, #0
 8010072:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010074:	2300      	movs	r3, #0
 8010076:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8010078:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801007c:	4619      	mov	r1, r3
 801007e:	4825      	ldr	r0, [pc, #148]	; (8010114 <MX_TIM8_Init+0x148>)
 8010080:	f005 fad0 	bl	8015624 <HAL_TIMEx_MasterConfigSynchronization>
 8010084:	4603      	mov	r3, r0
 8010086:	2b00      	cmp	r3, #0
 8010088:	d001      	beq.n	801008e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 801008a:	f000 f955 	bl	8010338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 801008e:	2330      	movs	r3, #48	; 0x30
 8010090:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 8010092:	2318      	movs	r3, #24
 8010094:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8010096:	2300      	movs	r3, #0
 8010098:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801009a:	2300      	movs	r3, #0
 801009c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801009e:	2300      	movs	r3, #0
 80100a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80100a2:	2300      	movs	r3, #0
 80100a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80100a6:	2300      	movs	r3, #0
 80100a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80100aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80100ae:	2200      	movs	r2, #0
 80100b0:	4619      	mov	r1, r3
 80100b2:	4818      	ldr	r0, [pc, #96]	; (8010114 <MX_TIM8_Init+0x148>)
 80100b4:	f004 fcd6 	bl	8014a64 <HAL_TIM_OC_ConfigChannel>
 80100b8:	4603      	mov	r3, r0
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d001      	beq.n	80100c2 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80100be:	f000 f93b 	bl	8010338 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 80100c2:	4b14      	ldr	r3, [pc, #80]	; (8010114 <MX_TIM8_Init+0x148>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	699a      	ldr	r2, [r3, #24]
 80100c8:	4b12      	ldr	r3, [pc, #72]	; (8010114 <MX_TIM8_Init+0x148>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	f042 0208 	orr.w	r2, r2, #8
 80100d0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80100d2:	2300      	movs	r3, #0
 80100d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80100d6:	2300      	movs	r3, #0
 80100d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80100da:	2300      	movs	r3, #0
 80100dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80100de:	2300      	movs	r3, #0
 80100e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80100e2:	2300      	movs	r3, #0
 80100e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80100e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80100ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80100ec:	2300      	movs	r3, #0
 80100ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80100f0:	1d3b      	adds	r3, r7, #4
 80100f2:	4619      	mov	r1, r3
 80100f4:	4807      	ldr	r0, [pc, #28]	; (8010114 <MX_TIM8_Init+0x148>)
 80100f6:	f005 fb11 	bl	801571c <HAL_TIMEx_ConfigBreakDeadTime>
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d001      	beq.n	8010104 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8010100:	f000 f91a 	bl	8010338 <Error_Handler>
=======
 800df6e:	4b42      	ldr	r3, [pc, #264]	; (800e078 <MX_TIM8_Init+0x148>)
 800df70:	4a42      	ldr	r2, [pc, #264]	; (800e07c <MX_TIM8_Init+0x14c>)
 800df72:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800df74:	4b40      	ldr	r3, [pc, #256]	; (800e078 <MX_TIM8_Init+0x148>)
 800df76:	22a7      	movs	r2, #167	; 0xa7
 800df78:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800df7a:	4b3f      	ldr	r3, [pc, #252]	; (800e078 <MX_TIM8_Init+0x148>)
 800df7c:	2200      	movs	r2, #0
 800df7e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800df80:	4b3d      	ldr	r3, [pc, #244]	; (800e078 <MX_TIM8_Init+0x148>)
 800df82:	2231      	movs	r2, #49	; 0x31
 800df84:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800df86:	4b3c      	ldr	r3, [pc, #240]	; (800e078 <MX_TIM8_Init+0x148>)
 800df88:	2200      	movs	r2, #0
 800df8a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800df8c:	4b3a      	ldr	r3, [pc, #232]	; (800e078 <MX_TIM8_Init+0x148>)
 800df8e:	2200      	movs	r2, #0
 800df90:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800df92:	4b39      	ldr	r3, [pc, #228]	; (800e078 <MX_TIM8_Init+0x148>)
 800df94:	2280      	movs	r2, #128	; 0x80
 800df96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800df98:	4837      	ldr	r0, [pc, #220]	; (800e078 <MX_TIM8_Init+0x148>)
 800df9a:	f004 f8a9 	bl	80120f0 <HAL_TIM_Base_Init>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d001      	beq.n	800dfa8 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800dfa4:	f000 f97a 	bl	800e29c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dfa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800dfae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	4830      	ldr	r0, [pc, #192]	; (800e078 <MX_TIM8_Init+0x148>)
 800dfb6:	f004 fe2d 	bl	8012c14 <HAL_TIM_ConfigClockSource>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d001      	beq.n	800dfc4 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800dfc0:	f000 f96c 	bl	800e29c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800dfc4:	482c      	ldr	r0, [pc, #176]	; (800e078 <MX_TIM8_Init+0x148>)
 800dfc6:	f004 f90d 	bl	80121e4 <HAL_TIM_OC_Init>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d001      	beq.n	800dfd4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800dfd0:	f000 f964 	bl	800e29c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800dfdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	4825      	ldr	r0, [pc, #148]	; (800e078 <MX_TIM8_Init+0x148>)
 800dfe4:	f005 fad0 	bl	8013588 <HAL_TIMEx_MasterConfigSynchronization>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800dfee:	f000 f955 	bl	800e29c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800dff2:	2330      	movs	r3, #48	; 0x30
 800dff4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800dff6:	2318      	movs	r3, #24
 800dff8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dffa:	2300      	movs	r3, #0
 800dffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800dffe:	2300      	movs	r3, #0
 800e000:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e002:	2300      	movs	r3, #0
 800e004:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e006:	2300      	movs	r3, #0
 800e008:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e00a:	2300      	movs	r3, #0
 800e00c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e00e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e012:	2200      	movs	r2, #0
 800e014:	4619      	mov	r1, r3
 800e016:	4818      	ldr	r0, [pc, #96]	; (800e078 <MX_TIM8_Init+0x148>)
 800e018:	f004 fcd6 	bl	80129c8 <HAL_TIM_OC_ConfigChannel>
 800e01c:	4603      	mov	r3, r0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d001      	beq.n	800e026 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800e022:	f000 f93b 	bl	800e29c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800e026:	4b14      	ldr	r3, [pc, #80]	; (800e078 <MX_TIM8_Init+0x148>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	699a      	ldr	r2, [r3, #24]
 800e02c:	4b12      	ldr	r3, [pc, #72]	; (800e078 <MX_TIM8_Init+0x148>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f042 0208 	orr.w	r2, r2, #8
 800e034:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800e036:	2300      	movs	r3, #0
 800e038:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800e03a:	2300      	movs	r3, #0
 800e03c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800e03e:	2300      	movs	r3, #0
 800e040:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800e042:	2300      	movs	r3, #0
 800e044:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800e046:	2300      	movs	r3, #0
 800e048:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800e04a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e04e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800e050:	2300      	movs	r3, #0
 800e052:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800e054:	1d3b      	adds	r3, r7, #4
 800e056:	4619      	mov	r1, r3
 800e058:	4807      	ldr	r0, [pc, #28]	; (800e078 <MX_TIM8_Init+0x148>)
 800e05a:	f005 fb11 	bl	8013680 <HAL_TIMEx_ConfigBreakDeadTime>
 800e05e:	4603      	mov	r3, r0
 800e060:	2b00      	cmp	r3, #0
 800e062:	d001      	beq.n	800e068 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800e064:	f000 f91a 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
<<<<<<< HEAD
 8010104:	4803      	ldr	r0, [pc, #12]	; (8010114 <MX_TIM8_Init+0x148>)
 8010106:	f000 fbb7 	bl	8010878 <HAL_TIM_MspPostInit>

}
 801010a:	bf00      	nop
 801010c:	3758      	adds	r7, #88	; 0x58
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
 8010112:	bf00      	nop
 8010114:	2000e050 	.word	0x2000e050
 8010118:	40010400 	.word	0x40010400

0801011c <MX_USART1_UART_Init>:
=======
 800e068:	4803      	ldr	r0, [pc, #12]	; (800e078 <MX_TIM8_Init+0x148>)
 800e06a:	f000 fbb7 	bl	800e7dc <HAL_TIM_MspPostInit>

}
 800e06e:	bf00      	nop
 800e070:	3758      	adds	r7, #88	; 0x58
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	20005090 	.word	0x20005090
 800e07c:	40010400 	.word	0x40010400

0800e080 <MX_USART1_UART_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 801011c:	b580      	push	{r7, lr}
 801011e:	af00      	add	r7, sp, #0
=======
 800e080:	b580      	push	{r7, lr}
 800e082:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8010120:	4b11      	ldr	r3, [pc, #68]	; (8010168 <MX_USART1_UART_Init+0x4c>)
 8010122:	4a12      	ldr	r2, [pc, #72]	; (801016c <MX_USART1_UART_Init+0x50>)
 8010124:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8010126:	4b10      	ldr	r3, [pc, #64]	; (8010168 <MX_USART1_UART_Init+0x4c>)
 8010128:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 801012c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801012e:	4b0e      	ldr	r3, [pc, #56]	; (8010168 <MX_USART1_UART_Init+0x4c>)
 8010130:	2200      	movs	r2, #0
 8010132:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8010134:	4b0c      	ldr	r3, [pc, #48]	; (8010168 <MX_USART1_UART_Init+0x4c>)
 8010136:	2200      	movs	r2, #0
 8010138:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801013a:	4b0b      	ldr	r3, [pc, #44]	; (8010168 <MX_USART1_UART_Init+0x4c>)
 801013c:	2200      	movs	r2, #0
 801013e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8010140:	4b09      	ldr	r3, [pc, #36]	; (8010168 <MX_USART1_UART_Init+0x4c>)
 8010142:	220c      	movs	r2, #12
 8010144:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010146:	4b08      	ldr	r3, [pc, #32]	; (8010168 <MX_USART1_UART_Init+0x4c>)
 8010148:	2200      	movs	r2, #0
 801014a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801014c:	4b06      	ldr	r3, [pc, #24]	; (8010168 <MX_USART1_UART_Init+0x4c>)
 801014e:	2200      	movs	r2, #0
 8010150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8010152:	4805      	ldr	r0, [pc, #20]	; (8010168 <MX_USART1_UART_Init+0x4c>)
 8010154:	f005 fb6d 	bl	8015832 <HAL_UART_Init>
 8010158:	4603      	mov	r3, r0
 801015a:	2b00      	cmp	r3, #0
 801015c:	d001      	beq.n	8010162 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 801015e:	f000 f8eb 	bl	8010338 <Error_Handler>
=======
 800e084:	4b11      	ldr	r3, [pc, #68]	; (800e0cc <MX_USART1_UART_Init+0x4c>)
 800e086:	4a12      	ldr	r2, [pc, #72]	; (800e0d0 <MX_USART1_UART_Init+0x50>)
 800e088:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800e08a:	4b10      	ldr	r3, [pc, #64]	; (800e0cc <MX_USART1_UART_Init+0x4c>)
 800e08c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800e090:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e092:	4b0e      	ldr	r3, [pc, #56]	; (800e0cc <MX_USART1_UART_Init+0x4c>)
 800e094:	2200      	movs	r2, #0
 800e096:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e098:	4b0c      	ldr	r3, [pc, #48]	; (800e0cc <MX_USART1_UART_Init+0x4c>)
 800e09a:	2200      	movs	r2, #0
 800e09c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e09e:	4b0b      	ldr	r3, [pc, #44]	; (800e0cc <MX_USART1_UART_Init+0x4c>)
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e0a4:	4b09      	ldr	r3, [pc, #36]	; (800e0cc <MX_USART1_UART_Init+0x4c>)
 800e0a6:	220c      	movs	r2, #12
 800e0a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e0aa:	4b08      	ldr	r3, [pc, #32]	; (800e0cc <MX_USART1_UART_Init+0x4c>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e0b0:	4b06      	ldr	r3, [pc, #24]	; (800e0cc <MX_USART1_UART_Init+0x4c>)
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e0b6:	4805      	ldr	r0, [pc, #20]	; (800e0cc <MX_USART1_UART_Init+0x4c>)
 800e0b8:	f005 fb6d 	bl	8013796 <HAL_UART_Init>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d001      	beq.n	800e0c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800e0c2:	f000 f8eb 	bl	800e29c <Error_Handler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 8010162:	bf00      	nop
 8010164:	bd80      	pop	{r7, pc}
 8010166:	bf00      	nop
 8010168:	20019ddc 	.word	0x20019ddc
 801016c:	40011000 	.word	0x40011000

08010170 <MX_DMA_Init>:
=======
 800e0c6:	bf00      	nop
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	20015c64 	.word	0x20015c64
 800e0d0:	40011000 	.word	0x40011000

0800e0d4 <MX_DMA_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
<<<<<<< HEAD
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8010176:	2300      	movs	r3, #0
 8010178:	607b      	str	r3, [r7, #4]
 801017a:	4b10      	ldr	r3, [pc, #64]	; (80101bc <MX_DMA_Init+0x4c>)
 801017c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801017e:	4a0f      	ldr	r2, [pc, #60]	; (80101bc <MX_DMA_Init+0x4c>)
 8010180:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010184:	6313      	str	r3, [r2, #48]	; 0x30
 8010186:	4b0d      	ldr	r3, [pc, #52]	; (80101bc <MX_DMA_Init+0x4c>)
 8010188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801018a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801018e:	607b      	str	r3, [r7, #4]
 8010190:	687b      	ldr	r3, [r7, #4]
=======
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b082      	sub	sp, #8
 800e0d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800e0da:	2300      	movs	r3, #0
 800e0dc:	607b      	str	r3, [r7, #4]
 800e0de:	4b10      	ldr	r3, [pc, #64]	; (800e120 <MX_DMA_Init+0x4c>)
 800e0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0e2:	4a0f      	ldr	r2, [pc, #60]	; (800e120 <MX_DMA_Init+0x4c>)
 800e0e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e0e8:	6313      	str	r3, [r2, #48]	; 0x30
 800e0ea:	4b0d      	ldr	r3, [pc, #52]	; (800e120 <MX_DMA_Init+0x4c>)
 800e0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e0f2:	607b      	str	r3, [r7, #4]
 800e0f4:	687b      	ldr	r3, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
<<<<<<< HEAD
 8010192:	2200      	movs	r2, #0
 8010194:	2100      	movs	r1, #0
 8010196:	2038      	movs	r0, #56	; 0x38
 8010198:	f001 fcd7 	bl	8011b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 801019c:	2038      	movs	r0, #56	; 0x38
 801019e:	f001 fcf0 	bl	8011b82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80101a2:	2200      	movs	r2, #0
 80101a4:	2100      	movs	r1, #0
 80101a6:	203a      	movs	r0, #58	; 0x3a
 80101a8:	f001 fccf 	bl	8011b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80101ac:	203a      	movs	r0, #58	; 0x3a
 80101ae:	f001 fce8 	bl	8011b82 <HAL_NVIC_EnableIRQ>

}
 80101b2:	bf00      	nop
 80101b4:	3708      	adds	r7, #8
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	40023800 	.word	0x40023800

080101c0 <MX_GPIO_Init>:
=======
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	2100      	movs	r1, #0
 800e0fa:	2038      	movs	r0, #56	; 0x38
 800e0fc:	f001 fcd7 	bl	800faae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800e100:	2038      	movs	r0, #56	; 0x38
 800e102:	f001 fcf0 	bl	800fae6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800e106:	2200      	movs	r2, #0
 800e108:	2100      	movs	r1, #0
 800e10a:	203a      	movs	r0, #58	; 0x3a
 800e10c:	f001 fccf 	bl	800faae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800e110:	203a      	movs	r0, #58	; 0x3a
 800e112:	f001 fce8 	bl	800fae6 <HAL_NVIC_EnableIRQ>

}
 800e116:	bf00      	nop
 800e118:	3708      	adds	r7, #8
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	40023800 	.word	0x40023800

0800e124 <MX_GPIO_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b08a      	sub	sp, #40	; 0x28
 80101c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80101c6:	f107 0314 	add.w	r3, r7, #20
 80101ca:	2200      	movs	r2, #0
 80101cc:	601a      	str	r2, [r3, #0]
 80101ce:	605a      	str	r2, [r3, #4]
 80101d0:	609a      	str	r2, [r3, #8]
 80101d2:	60da      	str	r2, [r3, #12]
 80101d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80101d6:	2300      	movs	r3, #0
 80101d8:	613b      	str	r3, [r7, #16]
 80101da:	4b52      	ldr	r3, [pc, #328]	; (8010324 <MX_GPIO_Init+0x164>)
 80101dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101de:	4a51      	ldr	r2, [pc, #324]	; (8010324 <MX_GPIO_Init+0x164>)
 80101e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101e4:	6313      	str	r3, [r2, #48]	; 0x30
 80101e6:	4b4f      	ldr	r3, [pc, #316]	; (8010324 <MX_GPIO_Init+0x164>)
 80101e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101ee:	613b      	str	r3, [r7, #16]
 80101f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80101f2:	2300      	movs	r3, #0
 80101f4:	60fb      	str	r3, [r7, #12]
 80101f6:	4b4b      	ldr	r3, [pc, #300]	; (8010324 <MX_GPIO_Init+0x164>)
 80101f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101fa:	4a4a      	ldr	r2, [pc, #296]	; (8010324 <MX_GPIO_Init+0x164>)
 80101fc:	f043 0304 	orr.w	r3, r3, #4
 8010200:	6313      	str	r3, [r2, #48]	; 0x30
 8010202:	4b48      	ldr	r3, [pc, #288]	; (8010324 <MX_GPIO_Init+0x164>)
 8010204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010206:	f003 0304 	and.w	r3, r3, #4
 801020a:	60fb      	str	r3, [r7, #12]
 801020c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801020e:	2300      	movs	r3, #0
 8010210:	60bb      	str	r3, [r7, #8]
 8010212:	4b44      	ldr	r3, [pc, #272]	; (8010324 <MX_GPIO_Init+0x164>)
 8010214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010216:	4a43      	ldr	r2, [pc, #268]	; (8010324 <MX_GPIO_Init+0x164>)
 8010218:	f043 0301 	orr.w	r3, r3, #1
 801021c:	6313      	str	r3, [r2, #48]	; 0x30
 801021e:	4b41      	ldr	r3, [pc, #260]	; (8010324 <MX_GPIO_Init+0x164>)
 8010220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010222:	f003 0301 	and.w	r3, r3, #1
 8010226:	60bb      	str	r3, [r7, #8]
 8010228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801022a:	2300      	movs	r3, #0
 801022c:	607b      	str	r3, [r7, #4]
 801022e:	4b3d      	ldr	r3, [pc, #244]	; (8010324 <MX_GPIO_Init+0x164>)
 8010230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010232:	4a3c      	ldr	r2, [pc, #240]	; (8010324 <MX_GPIO_Init+0x164>)
 8010234:	f043 0302 	orr.w	r3, r3, #2
 8010238:	6313      	str	r3, [r2, #48]	; 0x30
 801023a:	4b3a      	ldr	r3, [pc, #232]	; (8010324 <MX_GPIO_Init+0x164>)
 801023c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801023e:	f003 0302 	and.w	r3, r3, #2
 8010242:	607b      	str	r3, [r7, #4]
 8010244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010246:	2300      	movs	r3, #0
 8010248:	603b      	str	r3, [r7, #0]
 801024a:	4b36      	ldr	r3, [pc, #216]	; (8010324 <MX_GPIO_Init+0x164>)
 801024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801024e:	4a35      	ldr	r2, [pc, #212]	; (8010324 <MX_GPIO_Init+0x164>)
 8010250:	f043 0308 	orr.w	r3, r3, #8
 8010254:	6313      	str	r3, [r2, #48]	; 0x30
 8010256:	4b33      	ldr	r3, [pc, #204]	; (8010324 <MX_GPIO_Init+0x164>)
 8010258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801025a:	f003 0308 	and.w	r3, r3, #8
 801025e:	603b      	str	r3, [r7, #0]
 8010260:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8010262:	2200      	movs	r2, #0
 8010264:	f44f 7141 	mov.w	r1, #772	; 0x304
 8010268:	482f      	ldr	r0, [pc, #188]	; (8010328 <MX_GPIO_Init+0x168>)
 801026a:	f002 fdbf 	bl	8012dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 801026e:	2200      	movs	r2, #0
 8010270:	2105      	movs	r1, #5
 8010272:	482e      	ldr	r0, [pc, #184]	; (801032c <MX_GPIO_Init+0x16c>)
 8010274:	f002 fdba 	bl	8012dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8010278:	2200      	movs	r2, #0
 801027a:	2104      	movs	r1, #4
 801027c:	482c      	ldr	r0, [pc, #176]	; (8010330 <MX_GPIO_Init+0x170>)
 801027e:	f002 fdb5 	bl	8012dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8010282:	2200      	movs	r2, #0
 8010284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010288:	482a      	ldr	r0, [pc, #168]	; (8010334 <MX_GPIO_Init+0x174>)
 801028a:	f002 fdaf 	bl	8012dec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 801028e:	f44f 7341 	mov.w	r3, #772	; 0x304
 8010292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010294:	2301      	movs	r3, #1
 8010296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010298:	2300      	movs	r3, #0
 801029a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801029c:	2300      	movs	r3, #0
 801029e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80102a0:	f107 0314 	add.w	r3, r7, #20
 80102a4:	4619      	mov	r1, r3
 80102a6:	4820      	ldr	r0, [pc, #128]	; (8010328 <MX_GPIO_Init+0x168>)
 80102a8:	f002 fbee 	bl	8012a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80102ac:	2305      	movs	r3, #5
 80102ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80102b0:	2301      	movs	r3, #1
 80102b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102b4:	2300      	movs	r3, #0
 80102b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80102b8:	2300      	movs	r3, #0
 80102ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80102bc:	f107 0314 	add.w	r3, r7, #20
 80102c0:	4619      	mov	r1, r3
 80102c2:	481a      	ldr	r0, [pc, #104]	; (801032c <MX_GPIO_Init+0x16c>)
 80102c4:	f002 fbe0 	bl	8012a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 80102c8:	f241 0304 	movw	r3, #4100	; 0x1004
 80102cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80102ce:	2300      	movs	r3, #0
 80102d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102d2:	2300      	movs	r3, #0
 80102d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80102d6:	f107 0314 	add.w	r3, r7, #20
 80102da:	4619      	mov	r1, r3
 80102dc:	4815      	ldr	r0, [pc, #84]	; (8010334 <MX_GPIO_Init+0x174>)
 80102de:	f002 fbd3 	bl	8012a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80102e2:	2304      	movs	r3, #4
 80102e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80102e6:	2301      	movs	r3, #1
 80102e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102ea:	2300      	movs	r3, #0
 80102ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80102ee:	2300      	movs	r3, #0
 80102f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80102f2:	f107 0314 	add.w	r3, r7, #20
 80102f6:	4619      	mov	r1, r3
 80102f8:	480d      	ldr	r0, [pc, #52]	; (8010330 <MX_GPIO_Init+0x170>)
 80102fa:	f002 fbc5 	bl	8012a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80102fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010304:	2301      	movs	r3, #1
 8010306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010308:	2300      	movs	r3, #0
 801030a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801030c:	2300      	movs	r3, #0
 801030e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010310:	f107 0314 	add.w	r3, r7, #20
 8010314:	4619      	mov	r1, r3
 8010316:	4807      	ldr	r0, [pc, #28]	; (8010334 <MX_GPIO_Init+0x174>)
 8010318:	f002 fbb6 	bl	8012a88 <HAL_GPIO_Init>

}
 801031c:	bf00      	nop
 801031e:	3728      	adds	r7, #40	; 0x28
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}
 8010324:	40023800 	.word	0x40023800
 8010328:	40020800 	.word	0x40020800
 801032c:	40020000 	.word	0x40020000
 8010330:	40020c00 	.word	0x40020c00
 8010334:	40020400 	.word	0x40020400

08010338 <Error_Handler>:
=======
 800e124:	b580      	push	{r7, lr}
 800e126:	b08a      	sub	sp, #40	; 0x28
 800e128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e12a:	f107 0314 	add.w	r3, r7, #20
 800e12e:	2200      	movs	r2, #0
 800e130:	601a      	str	r2, [r3, #0]
 800e132:	605a      	str	r2, [r3, #4]
 800e134:	609a      	str	r2, [r3, #8]
 800e136:	60da      	str	r2, [r3, #12]
 800e138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e13a:	2300      	movs	r3, #0
 800e13c:	613b      	str	r3, [r7, #16]
 800e13e:	4b52      	ldr	r3, [pc, #328]	; (800e288 <MX_GPIO_Init+0x164>)
 800e140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e142:	4a51      	ldr	r2, [pc, #324]	; (800e288 <MX_GPIO_Init+0x164>)
 800e144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e148:	6313      	str	r3, [r2, #48]	; 0x30
 800e14a:	4b4f      	ldr	r3, [pc, #316]	; (800e288 <MX_GPIO_Init+0x164>)
 800e14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e152:	613b      	str	r3, [r7, #16]
 800e154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e156:	2300      	movs	r3, #0
 800e158:	60fb      	str	r3, [r7, #12]
 800e15a:	4b4b      	ldr	r3, [pc, #300]	; (800e288 <MX_GPIO_Init+0x164>)
 800e15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e15e:	4a4a      	ldr	r2, [pc, #296]	; (800e288 <MX_GPIO_Init+0x164>)
 800e160:	f043 0304 	orr.w	r3, r3, #4
 800e164:	6313      	str	r3, [r2, #48]	; 0x30
 800e166:	4b48      	ldr	r3, [pc, #288]	; (800e288 <MX_GPIO_Init+0x164>)
 800e168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e16a:	f003 0304 	and.w	r3, r3, #4
 800e16e:	60fb      	str	r3, [r7, #12]
 800e170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e172:	2300      	movs	r3, #0
 800e174:	60bb      	str	r3, [r7, #8]
 800e176:	4b44      	ldr	r3, [pc, #272]	; (800e288 <MX_GPIO_Init+0x164>)
 800e178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e17a:	4a43      	ldr	r2, [pc, #268]	; (800e288 <MX_GPIO_Init+0x164>)
 800e17c:	f043 0301 	orr.w	r3, r3, #1
 800e180:	6313      	str	r3, [r2, #48]	; 0x30
 800e182:	4b41      	ldr	r3, [pc, #260]	; (800e288 <MX_GPIO_Init+0x164>)
 800e184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e186:	f003 0301 	and.w	r3, r3, #1
 800e18a:	60bb      	str	r3, [r7, #8]
 800e18c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e18e:	2300      	movs	r3, #0
 800e190:	607b      	str	r3, [r7, #4]
 800e192:	4b3d      	ldr	r3, [pc, #244]	; (800e288 <MX_GPIO_Init+0x164>)
 800e194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e196:	4a3c      	ldr	r2, [pc, #240]	; (800e288 <MX_GPIO_Init+0x164>)
 800e198:	f043 0302 	orr.w	r3, r3, #2
 800e19c:	6313      	str	r3, [r2, #48]	; 0x30
 800e19e:	4b3a      	ldr	r3, [pc, #232]	; (800e288 <MX_GPIO_Init+0x164>)
 800e1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1a2:	f003 0302 	and.w	r3, r3, #2
 800e1a6:	607b      	str	r3, [r7, #4]
 800e1a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	603b      	str	r3, [r7, #0]
 800e1ae:	4b36      	ldr	r3, [pc, #216]	; (800e288 <MX_GPIO_Init+0x164>)
 800e1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1b2:	4a35      	ldr	r2, [pc, #212]	; (800e288 <MX_GPIO_Init+0x164>)
 800e1b4:	f043 0308 	orr.w	r3, r3, #8
 800e1b8:	6313      	str	r3, [r2, #48]	; 0x30
 800e1ba:	4b33      	ldr	r3, [pc, #204]	; (800e288 <MX_GPIO_Init+0x164>)
 800e1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1be:	f003 0308 	and.w	r3, r3, #8
 800e1c2:	603b      	str	r3, [r7, #0]
 800e1c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f44f 7141 	mov.w	r1, #772	; 0x304
 800e1cc:	482f      	ldr	r0, [pc, #188]	; (800e28c <MX_GPIO_Init+0x168>)
 800e1ce:	f002 fdbf 	bl	8010d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	2105      	movs	r1, #5
 800e1d6:	482e      	ldr	r0, [pc, #184]	; (800e290 <MX_GPIO_Init+0x16c>)
 800e1d8:	f002 fdba 	bl	8010d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800e1dc:	2200      	movs	r2, #0
 800e1de:	2104      	movs	r1, #4
 800e1e0:	482c      	ldr	r0, [pc, #176]	; (800e294 <MX_GPIO_Init+0x170>)
 800e1e2:	f002 fdb5 	bl	8010d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e1ec:	482a      	ldr	r0, [pc, #168]	; (800e298 <MX_GPIO_Init+0x174>)
 800e1ee:	f002 fdaf 	bl	8010d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800e1f2:	f44f 7341 	mov.w	r3, #772	; 0x304
 800e1f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e200:	2300      	movs	r3, #0
 800e202:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e204:	f107 0314 	add.w	r3, r7, #20
 800e208:	4619      	mov	r1, r3
 800e20a:	4820      	ldr	r0, [pc, #128]	; (800e28c <MX_GPIO_Init+0x168>)
 800e20c:	f002 fbee 	bl	80109ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800e210:	2305      	movs	r3, #5
 800e212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e214:	2301      	movs	r3, #1
 800e216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e218:	2300      	movs	r3, #0
 800e21a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e21c:	2300      	movs	r3, #0
 800e21e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e220:	f107 0314 	add.w	r3, r7, #20
 800e224:	4619      	mov	r1, r3
 800e226:	481a      	ldr	r0, [pc, #104]	; (800e290 <MX_GPIO_Init+0x16c>)
 800e228:	f002 fbe0 	bl	80109ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800e22c:	f241 0304 	movw	r3, #4100	; 0x1004
 800e230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e232:	2300      	movs	r3, #0
 800e234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e236:	2300      	movs	r3, #0
 800e238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e23a:	f107 0314 	add.w	r3, r7, #20
 800e23e:	4619      	mov	r1, r3
 800e240:	4815      	ldr	r0, [pc, #84]	; (800e298 <MX_GPIO_Init+0x174>)
 800e242:	f002 fbd3 	bl	80109ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e246:	2304      	movs	r3, #4
 800e248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e24a:	2301      	movs	r3, #1
 800e24c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e24e:	2300      	movs	r3, #0
 800e250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e252:	2300      	movs	r3, #0
 800e254:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e256:	f107 0314 	add.w	r3, r7, #20
 800e25a:	4619      	mov	r1, r3
 800e25c:	480d      	ldr	r0, [pc, #52]	; (800e294 <MX_GPIO_Init+0x170>)
 800e25e:	f002 fbc5 	bl	80109ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e262:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e268:	2301      	movs	r3, #1
 800e26a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e26c:	2300      	movs	r3, #0
 800e26e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e270:	2300      	movs	r3, #0
 800e272:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e274:	f107 0314 	add.w	r3, r7, #20
 800e278:	4619      	mov	r1, r3
 800e27a:	4807      	ldr	r0, [pc, #28]	; (800e298 <MX_GPIO_Init+0x174>)
 800e27c:	f002 fbb6 	bl	80109ec <HAL_GPIO_Init>

}
 800e280:	bf00      	nop
 800e282:	3728      	adds	r7, #40	; 0x28
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	40023800 	.word	0x40023800
 800e28c:	40020800 	.word	0x40020800
 800e290:	40020000 	.word	0x40020000
 800e294:	40020c00 	.word	0x40020c00
 800e298:	40020400 	.word	0x40020400

0800e29c <Error_Handler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8010338:	b480      	push	{r7}
 801033a:	af00      	add	r7, sp, #0
=======
 800e29c:	b480      	push	{r7}
 800e29e:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 801033c:	b672      	cpsid	i
=======
 800e2a0:	b672      	cpsid	i
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 801033e:	e7fe      	b.n	801033e <Error_Handler+0x6>

08010340 <HAL_MspInit>:
=======
 800e2a2:	e7fe      	b.n	800e2a2 <Error_Handler+0x6>

0800e2a4 <HAL_MspInit>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8010340:	b580      	push	{r7, lr}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0
=======
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8010346:	2300      	movs	r3, #0
 8010348:	607b      	str	r3, [r7, #4]
 801034a:	4b13      	ldr	r3, [pc, #76]	; (8010398 <HAL_MspInit+0x58>)
 801034c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801034e:	4a12      	ldr	r2, [pc, #72]	; (8010398 <HAL_MspInit+0x58>)
 8010350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010354:	6453      	str	r3, [r2, #68]	; 0x44
 8010356:	4b10      	ldr	r3, [pc, #64]	; (8010398 <HAL_MspInit+0x58>)
 8010358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801035a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801035e:	607b      	str	r3, [r7, #4]
 8010360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010362:	2300      	movs	r3, #0
 8010364:	603b      	str	r3, [r7, #0]
 8010366:	4b0c      	ldr	r3, [pc, #48]	; (8010398 <HAL_MspInit+0x58>)
 8010368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801036a:	4a0b      	ldr	r2, [pc, #44]	; (8010398 <HAL_MspInit+0x58>)
 801036c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010370:	6413      	str	r3, [r2, #64]	; 0x40
 8010372:	4b09      	ldr	r3, [pc, #36]	; (8010398 <HAL_MspInit+0x58>)
 8010374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801037a:	603b      	str	r3, [r7, #0]
 801037c:	683b      	ldr	r3, [r7, #0]
=======
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	607b      	str	r3, [r7, #4]
 800e2ae:	4b13      	ldr	r3, [pc, #76]	; (800e2fc <HAL_MspInit+0x58>)
 800e2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2b2:	4a12      	ldr	r2, [pc, #72]	; (800e2fc <HAL_MspInit+0x58>)
 800e2b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e2b8:	6453      	str	r3, [r2, #68]	; 0x44
 800e2ba:	4b10      	ldr	r3, [pc, #64]	; (800e2fc <HAL_MspInit+0x58>)
 800e2bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2c2:	607b      	str	r3, [r7, #4]
 800e2c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	603b      	str	r3, [r7, #0]
 800e2ca:	4b0c      	ldr	r3, [pc, #48]	; (800e2fc <HAL_MspInit+0x58>)
 800e2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ce:	4a0b      	ldr	r2, [pc, #44]	; (800e2fc <HAL_MspInit+0x58>)
 800e2d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2d4:	6413      	str	r3, [r2, #64]	; 0x40
 800e2d6:	4b09      	ldr	r3, [pc, #36]	; (800e2fc <HAL_MspInit+0x58>)
 800e2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e2de:	603b      	str	r3, [r7, #0]
 800e2e0:	683b      	ldr	r3, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
<<<<<<< HEAD
 801037e:	2200      	movs	r2, #0
 8010380:	2100      	movs	r1, #0
 8010382:	2004      	movs	r0, #4
 8010384:	f001 fbe1 	bl	8011b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8010388:	2004      	movs	r0, #4
 801038a:	f001 fbfa 	bl	8011b82 <HAL_NVIC_EnableIRQ>
=======
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	2100      	movs	r1, #0
 800e2e6:	2004      	movs	r0, #4
 800e2e8:	f001 fbe1 	bl	800faae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800e2ec:	2004      	movs	r0, #4
 800e2ee:	f001 fbfa 	bl	800fae6 <HAL_NVIC_EnableIRQ>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 801038e:	bf00      	nop
 8010390:	3708      	adds	r7, #8
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}
 8010396:	bf00      	nop
 8010398:	40023800 	.word	0x40023800

0801039c <HAL_ADC_MspInit>:
=======
 800e2f2:	bf00      	nop
 800e2f4:	3708      	adds	r7, #8
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	40023800 	.word	0x40023800

0800e300 <HAL_ADC_MspInit>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 801039c:	b580      	push	{r7, lr}
 801039e:	b08c      	sub	sp, #48	; 0x30
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80103a4:	f107 031c 	add.w	r3, r7, #28
 80103a8:	2200      	movs	r2, #0
 80103aa:	601a      	str	r2, [r3, #0]
 80103ac:	605a      	str	r2, [r3, #4]
 80103ae:	609a      	str	r2, [r3, #8]
 80103b0:	60da      	str	r2, [r3, #12]
 80103b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	4a73      	ldr	r2, [pc, #460]	; (8010588 <HAL_ADC_MspInit+0x1ec>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d17a      	bne.n	80104b4 <HAL_ADC_MspInit+0x118>
=======
 800e300:	b580      	push	{r7, lr}
 800e302:	b08c      	sub	sp, #48	; 0x30
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e308:	f107 031c 	add.w	r3, r7, #28
 800e30c:	2200      	movs	r2, #0
 800e30e:	601a      	str	r2, [r3, #0]
 800e310:	605a      	str	r2, [r3, #4]
 800e312:	609a      	str	r2, [r3, #8]
 800e314:	60da      	str	r2, [r3, #12]
 800e316:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a73      	ldr	r2, [pc, #460]	; (800e4ec <HAL_ADC_MspInit+0x1ec>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d17a      	bne.n	800e418 <HAL_ADC_MspInit+0x118>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< HEAD
 80103be:	2300      	movs	r3, #0
 80103c0:	61bb      	str	r3, [r7, #24]
 80103c2:	4b72      	ldr	r3, [pc, #456]	; (801058c <HAL_ADC_MspInit+0x1f0>)
 80103c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103c6:	4a71      	ldr	r2, [pc, #452]	; (801058c <HAL_ADC_MspInit+0x1f0>)
 80103c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80103cc:	6453      	str	r3, [r2, #68]	; 0x44
 80103ce:	4b6f      	ldr	r3, [pc, #444]	; (801058c <HAL_ADC_MspInit+0x1f0>)
 80103d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103d6:	61bb      	str	r3, [r7, #24]
 80103d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80103da:	2300      	movs	r3, #0
 80103dc:	617b      	str	r3, [r7, #20]
 80103de:	4b6b      	ldr	r3, [pc, #428]	; (801058c <HAL_ADC_MspInit+0x1f0>)
 80103e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103e2:	4a6a      	ldr	r2, [pc, #424]	; (801058c <HAL_ADC_MspInit+0x1f0>)
 80103e4:	f043 0304 	orr.w	r3, r3, #4
 80103e8:	6313      	str	r3, [r2, #48]	; 0x30
 80103ea:	4b68      	ldr	r3, [pc, #416]	; (801058c <HAL_ADC_MspInit+0x1f0>)
 80103ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103ee:	f003 0304 	and.w	r3, r3, #4
 80103f2:	617b      	str	r3, [r7, #20]
 80103f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80103f6:	2300      	movs	r3, #0
 80103f8:	613b      	str	r3, [r7, #16]
 80103fa:	4b64      	ldr	r3, [pc, #400]	; (801058c <HAL_ADC_MspInit+0x1f0>)
 80103fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103fe:	4a63      	ldr	r2, [pc, #396]	; (801058c <HAL_ADC_MspInit+0x1f0>)
 8010400:	f043 0302 	orr.w	r3, r3, #2
 8010404:	6313      	str	r3, [r2, #48]	; 0x30
 8010406:	4b61      	ldr	r3, [pc, #388]	; (801058c <HAL_ADC_MspInit+0x1f0>)
 8010408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801040a:	f003 0302 	and.w	r3, r3, #2
 801040e:	613b      	str	r3, [r7, #16]
 8010410:	693b      	ldr	r3, [r7, #16]
=======
 800e322:	2300      	movs	r3, #0
 800e324:	61bb      	str	r3, [r7, #24]
 800e326:	4b72      	ldr	r3, [pc, #456]	; (800e4f0 <HAL_ADC_MspInit+0x1f0>)
 800e328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e32a:	4a71      	ldr	r2, [pc, #452]	; (800e4f0 <HAL_ADC_MspInit+0x1f0>)
 800e32c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e330:	6453      	str	r3, [r2, #68]	; 0x44
 800e332:	4b6f      	ldr	r3, [pc, #444]	; (800e4f0 <HAL_ADC_MspInit+0x1f0>)
 800e334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e33a:	61bb      	str	r3, [r7, #24]
 800e33c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e33e:	2300      	movs	r3, #0
 800e340:	617b      	str	r3, [r7, #20]
 800e342:	4b6b      	ldr	r3, [pc, #428]	; (800e4f0 <HAL_ADC_MspInit+0x1f0>)
 800e344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e346:	4a6a      	ldr	r2, [pc, #424]	; (800e4f0 <HAL_ADC_MspInit+0x1f0>)
 800e348:	f043 0304 	orr.w	r3, r3, #4
 800e34c:	6313      	str	r3, [r2, #48]	; 0x30
 800e34e:	4b68      	ldr	r3, [pc, #416]	; (800e4f0 <HAL_ADC_MspInit+0x1f0>)
 800e350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e352:	f003 0304 	and.w	r3, r3, #4
 800e356:	617b      	str	r3, [r7, #20]
 800e358:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e35a:	2300      	movs	r3, #0
 800e35c:	613b      	str	r3, [r7, #16]
 800e35e:	4b64      	ldr	r3, [pc, #400]	; (800e4f0 <HAL_ADC_MspInit+0x1f0>)
 800e360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e362:	4a63      	ldr	r2, [pc, #396]	; (800e4f0 <HAL_ADC_MspInit+0x1f0>)
 800e364:	f043 0302 	orr.w	r3, r3, #2
 800e368:	6313      	str	r3, [r2, #48]	; 0x30
 800e36a:	4b61      	ldr	r3, [pc, #388]	; (800e4f0 <HAL_ADC_MspInit+0x1f0>)
 800e36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e36e:	f003 0302 	and.w	r3, r3, #2
 800e372:	613b      	str	r3, [r7, #16]
 800e374:	693b      	ldr	r3, [r7, #16]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
<<<<<<< HEAD
 8010412:	2311      	movs	r3, #17
 8010414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010416:	2303      	movs	r3, #3
 8010418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801041a:	2300      	movs	r3, #0
 801041c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801041e:	f107 031c 	add.w	r3, r7, #28
 8010422:	4619      	mov	r1, r3
 8010424:	485a      	ldr	r0, [pc, #360]	; (8010590 <HAL_ADC_MspInit+0x1f4>)
 8010426:	f002 fb2f 	bl	8012a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801042a:	2302      	movs	r3, #2
 801042c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801042e:	2303      	movs	r3, #3
 8010430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010432:	2300      	movs	r3, #0
 8010434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010436:	f107 031c 	add.w	r3, r7, #28
 801043a:	4619      	mov	r1, r3
 801043c:	4855      	ldr	r0, [pc, #340]	; (8010594 <HAL_ADC_MspInit+0x1f8>)
 801043e:	f002 fb23 	bl	8012a88 <HAL_GPIO_Init>
=======
 800e376:	2311      	movs	r3, #17
 800e378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e37a:	2303      	movs	r3, #3
 800e37c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e37e:	2300      	movs	r3, #0
 800e380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e382:	f107 031c 	add.w	r3, r7, #28
 800e386:	4619      	mov	r1, r3
 800e388:	485a      	ldr	r0, [pc, #360]	; (800e4f4 <HAL_ADC_MspInit+0x1f4>)
 800e38a:	f002 fb2f 	bl	80109ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e38e:	2302      	movs	r3, #2
 800e390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e392:	2303      	movs	r3, #3
 800e394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e396:	2300      	movs	r3, #0
 800e398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e39a:	f107 031c 	add.w	r3, r7, #28
 800e39e:	4619      	mov	r1, r3
 800e3a0:	4855      	ldr	r0, [pc, #340]	; (800e4f8 <HAL_ADC_MspInit+0x1f8>)
 800e3a2:	f002 fb23 	bl	80109ec <HAL_GPIO_Init>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
<<<<<<< HEAD
 8010442:	4b55      	ldr	r3, [pc, #340]	; (8010598 <HAL_ADC_MspInit+0x1fc>)
 8010444:	4a55      	ldr	r2, [pc, #340]	; (801059c <HAL_ADC_MspInit+0x200>)
 8010446:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8010448:	4b53      	ldr	r3, [pc, #332]	; (8010598 <HAL_ADC_MspInit+0x1fc>)
 801044a:	2200      	movs	r2, #0
 801044c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801044e:	4b52      	ldr	r3, [pc, #328]	; (8010598 <HAL_ADC_MspInit+0x1fc>)
 8010450:	2200      	movs	r2, #0
 8010452:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8010454:	4b50      	ldr	r3, [pc, #320]	; (8010598 <HAL_ADC_MspInit+0x1fc>)
 8010456:	2200      	movs	r2, #0
 8010458:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 801045a:	4b4f      	ldr	r3, [pc, #316]	; (8010598 <HAL_ADC_MspInit+0x1fc>)
 801045c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010460:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010462:	4b4d      	ldr	r3, [pc, #308]	; (8010598 <HAL_ADC_MspInit+0x1fc>)
 8010464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010468:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801046a:	4b4b      	ldr	r3, [pc, #300]	; (8010598 <HAL_ADC_MspInit+0x1fc>)
 801046c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010470:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8010472:	4b49      	ldr	r3, [pc, #292]	; (8010598 <HAL_ADC_MspInit+0x1fc>)
 8010474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010478:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 801047a:	4b47      	ldr	r3, [pc, #284]	; (8010598 <HAL_ADC_MspInit+0x1fc>)
 801047c:	2200      	movs	r2, #0
 801047e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8010480:	4b45      	ldr	r3, [pc, #276]	; (8010598 <HAL_ADC_MspInit+0x1fc>)
 8010482:	2200      	movs	r2, #0
 8010484:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8010486:	4844      	ldr	r0, [pc, #272]	; (8010598 <HAL_ADC_MspInit+0x1fc>)
 8010488:	f001 fb96 	bl	8011bb8 <HAL_DMA_Init>
 801048c:	4603      	mov	r3, r0
 801048e:	2b00      	cmp	r3, #0
 8010490:	d001      	beq.n	8010496 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8010492:	f7ff ff51 	bl	8010338 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	4a3f      	ldr	r2, [pc, #252]	; (8010598 <HAL_ADC_MspInit+0x1fc>)
 801049a:	639a      	str	r2, [r3, #56]	; 0x38
 801049c:	4a3e      	ldr	r2, [pc, #248]	; (8010598 <HAL_ADC_MspInit+0x1fc>)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80104a2:	2200      	movs	r2, #0
 80104a4:	2100      	movs	r1, #0
 80104a6:	2012      	movs	r0, #18
 80104a8:	f001 fb4f 	bl	8011b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80104ac:	2012      	movs	r0, #18
 80104ae:	f001 fb68 	bl	8011b82 <HAL_NVIC_EnableIRQ>
=======
 800e3a6:	4b55      	ldr	r3, [pc, #340]	; (800e4fc <HAL_ADC_MspInit+0x1fc>)
 800e3a8:	4a55      	ldr	r2, [pc, #340]	; (800e500 <HAL_ADC_MspInit+0x200>)
 800e3aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800e3ac:	4b53      	ldr	r3, [pc, #332]	; (800e4fc <HAL_ADC_MspInit+0x1fc>)
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e3b2:	4b52      	ldr	r3, [pc, #328]	; (800e4fc <HAL_ADC_MspInit+0x1fc>)
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e3b8:	4b50      	ldr	r3, [pc, #320]	; (800e4fc <HAL_ADC_MspInit+0x1fc>)
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800e3be:	4b4f      	ldr	r3, [pc, #316]	; (800e4fc <HAL_ADC_MspInit+0x1fc>)
 800e3c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e3c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e3c6:	4b4d      	ldr	r3, [pc, #308]	; (800e4fc <HAL_ADC_MspInit+0x1fc>)
 800e3c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e3cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e3ce:	4b4b      	ldr	r3, [pc, #300]	; (800e4fc <HAL_ADC_MspInit+0x1fc>)
 800e3d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e3d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800e3d6:	4b49      	ldr	r3, [pc, #292]	; (800e4fc <HAL_ADC_MspInit+0x1fc>)
 800e3d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e3dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800e3de:	4b47      	ldr	r3, [pc, #284]	; (800e4fc <HAL_ADC_MspInit+0x1fc>)
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e3e4:	4b45      	ldr	r3, [pc, #276]	; (800e4fc <HAL_ADC_MspInit+0x1fc>)
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800e3ea:	4844      	ldr	r0, [pc, #272]	; (800e4fc <HAL_ADC_MspInit+0x1fc>)
 800e3ec:	f001 fb96 	bl	800fb1c <HAL_DMA_Init>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d001      	beq.n	800e3fa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800e3f6:	f7ff ff51 	bl	800e29c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	4a3f      	ldr	r2, [pc, #252]	; (800e4fc <HAL_ADC_MspInit+0x1fc>)
 800e3fe:	639a      	str	r2, [r3, #56]	; 0x38
 800e400:	4a3e      	ldr	r2, [pc, #248]	; (800e4fc <HAL_ADC_MspInit+0x1fc>)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800e406:	2200      	movs	r2, #0
 800e408:	2100      	movs	r1, #0
 800e40a:	2012      	movs	r0, #18
 800e40c:	f001 fb4f 	bl	800faae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800e410:	2012      	movs	r0, #18
 800e412:	f001 fb68 	bl	800fae6 <HAL_NVIC_EnableIRQ>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
<<<<<<< HEAD
 80104b2:	e065      	b.n	8010580 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	4a39      	ldr	r2, [pc, #228]	; (80105a0 <HAL_ADC_MspInit+0x204>)
 80104ba:	4293      	cmp	r3, r2
 80104bc:	d160      	bne.n	8010580 <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80104be:	2300      	movs	r3, #0
 80104c0:	60fb      	str	r3, [r7, #12]
 80104c2:	4b32      	ldr	r3, [pc, #200]	; (801058c <HAL_ADC_MspInit+0x1f0>)
 80104c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104c6:	4a31      	ldr	r2, [pc, #196]	; (801058c <HAL_ADC_MspInit+0x1f0>)
 80104c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80104cc:	6453      	str	r3, [r2, #68]	; 0x44
 80104ce:	4b2f      	ldr	r3, [pc, #188]	; (801058c <HAL_ADC_MspInit+0x1f0>)
 80104d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80104d6:	60fb      	str	r3, [r7, #12]
 80104d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80104da:	2300      	movs	r3, #0
 80104dc:	60bb      	str	r3, [r7, #8]
 80104de:	4b2b      	ldr	r3, [pc, #172]	; (801058c <HAL_ADC_MspInit+0x1f0>)
 80104e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104e2:	4a2a      	ldr	r2, [pc, #168]	; (801058c <HAL_ADC_MspInit+0x1f0>)
 80104e4:	f043 0304 	orr.w	r3, r3, #4
 80104e8:	6313      	str	r3, [r2, #48]	; 0x30
 80104ea:	4b28      	ldr	r3, [pc, #160]	; (801058c <HAL_ADC_MspInit+0x1f0>)
 80104ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104ee:	f003 0304 	and.w	r3, r3, #4
 80104f2:	60bb      	str	r3, [r7, #8]
 80104f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80104f6:	2322      	movs	r3, #34	; 0x22
 80104f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80104fa:	2303      	movs	r3, #3
 80104fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80104fe:	2300      	movs	r3, #0
 8010500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010502:	f107 031c 	add.w	r3, r7, #28
 8010506:	4619      	mov	r1, r3
 8010508:	4821      	ldr	r0, [pc, #132]	; (8010590 <HAL_ADC_MspInit+0x1f4>)
 801050a:	f002 fabd 	bl	8012a88 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 801050e:	4b25      	ldr	r3, [pc, #148]	; (80105a4 <HAL_ADC_MspInit+0x208>)
 8010510:	4a25      	ldr	r2, [pc, #148]	; (80105a8 <HAL_ADC_MspInit+0x20c>)
 8010512:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8010514:	4b23      	ldr	r3, [pc, #140]	; (80105a4 <HAL_ADC_MspInit+0x208>)
 8010516:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801051a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801051c:	4b21      	ldr	r3, [pc, #132]	; (80105a4 <HAL_ADC_MspInit+0x208>)
 801051e:	2200      	movs	r2, #0
 8010520:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8010522:	4b20      	ldr	r3, [pc, #128]	; (80105a4 <HAL_ADC_MspInit+0x208>)
 8010524:	2200      	movs	r2, #0
 8010526:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8010528:	4b1e      	ldr	r3, [pc, #120]	; (80105a4 <HAL_ADC_MspInit+0x208>)
 801052a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801052e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010530:	4b1c      	ldr	r3, [pc, #112]	; (80105a4 <HAL_ADC_MspInit+0x208>)
 8010532:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010536:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8010538:	4b1a      	ldr	r3, [pc, #104]	; (80105a4 <HAL_ADC_MspInit+0x208>)
 801053a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801053e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8010540:	4b18      	ldr	r3, [pc, #96]	; (80105a4 <HAL_ADC_MspInit+0x208>)
 8010542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010546:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8010548:	4b16      	ldr	r3, [pc, #88]	; (80105a4 <HAL_ADC_MspInit+0x208>)
 801054a:	2200      	movs	r2, #0
 801054c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801054e:	4b15      	ldr	r3, [pc, #84]	; (80105a4 <HAL_ADC_MspInit+0x208>)
 8010550:	2200      	movs	r2, #0
 8010552:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8010554:	4813      	ldr	r0, [pc, #76]	; (80105a4 <HAL_ADC_MspInit+0x208>)
 8010556:	f001 fb2f 	bl	8011bb8 <HAL_DMA_Init>
 801055a:	4603      	mov	r3, r0
 801055c:	2b00      	cmp	r3, #0
 801055e:	d001      	beq.n	8010564 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 8010560:	f7ff feea 	bl	8010338 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	4a0f      	ldr	r2, [pc, #60]	; (80105a4 <HAL_ADC_MspInit+0x208>)
 8010568:	639a      	str	r2, [r3, #56]	; 0x38
 801056a:	4a0e      	ldr	r2, [pc, #56]	; (80105a4 <HAL_ADC_MspInit+0x208>)
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8010570:	2200      	movs	r2, #0
 8010572:	2100      	movs	r1, #0
 8010574:	2012      	movs	r0, #18
 8010576:	f001 fae8 	bl	8011b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 801057a:	2012      	movs	r0, #18
 801057c:	f001 fb01 	bl	8011b82 <HAL_NVIC_EnableIRQ>
}
 8010580:	bf00      	nop
 8010582:	3730      	adds	r7, #48	; 0x30
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	40012000 	.word	0x40012000
 801058c:	40023800 	.word	0x40023800
 8010590:	40020800 	.word	0x40020800
 8010594:	40020400 	.word	0x40020400
 8010598:	2001a208 	.word	0x2001a208
 801059c:	40026410 	.word	0x40026410
 80105a0:	40012100 	.word	0x40012100
 80105a4:	2001a73c 	.word	0x2001a73c
 80105a8:	40026440 	.word	0x40026440

080105ac <HAL_SPI_MspInit>:
=======
 800e416:	e065      	b.n	800e4e4 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	4a39      	ldr	r2, [pc, #228]	; (800e504 <HAL_ADC_MspInit+0x204>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d160      	bne.n	800e4e4 <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800e422:	2300      	movs	r3, #0
 800e424:	60fb      	str	r3, [r7, #12]
 800e426:	4b32      	ldr	r3, [pc, #200]	; (800e4f0 <HAL_ADC_MspInit+0x1f0>)
 800e428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e42a:	4a31      	ldr	r2, [pc, #196]	; (800e4f0 <HAL_ADC_MspInit+0x1f0>)
 800e42c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e430:	6453      	str	r3, [r2, #68]	; 0x44
 800e432:	4b2f      	ldr	r3, [pc, #188]	; (800e4f0 <HAL_ADC_MspInit+0x1f0>)
 800e434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e43a:	60fb      	str	r3, [r7, #12]
 800e43c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e43e:	2300      	movs	r3, #0
 800e440:	60bb      	str	r3, [r7, #8]
 800e442:	4b2b      	ldr	r3, [pc, #172]	; (800e4f0 <HAL_ADC_MspInit+0x1f0>)
 800e444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e446:	4a2a      	ldr	r2, [pc, #168]	; (800e4f0 <HAL_ADC_MspInit+0x1f0>)
 800e448:	f043 0304 	orr.w	r3, r3, #4
 800e44c:	6313      	str	r3, [r2, #48]	; 0x30
 800e44e:	4b28      	ldr	r3, [pc, #160]	; (800e4f0 <HAL_ADC_MspInit+0x1f0>)
 800e450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e452:	f003 0304 	and.w	r3, r3, #4
 800e456:	60bb      	str	r3, [r7, #8]
 800e458:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800e45a:	2322      	movs	r3, #34	; 0x22
 800e45c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e45e:	2303      	movs	r3, #3
 800e460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e462:	2300      	movs	r3, #0
 800e464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e466:	f107 031c 	add.w	r3, r7, #28
 800e46a:	4619      	mov	r1, r3
 800e46c:	4821      	ldr	r0, [pc, #132]	; (800e4f4 <HAL_ADC_MspInit+0x1f4>)
 800e46e:	f002 fabd 	bl	80109ec <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800e472:	4b25      	ldr	r3, [pc, #148]	; (800e508 <HAL_ADC_MspInit+0x208>)
 800e474:	4a25      	ldr	r2, [pc, #148]	; (800e50c <HAL_ADC_MspInit+0x20c>)
 800e476:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800e478:	4b23      	ldr	r3, [pc, #140]	; (800e508 <HAL_ADC_MspInit+0x208>)
 800e47a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e47e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e480:	4b21      	ldr	r3, [pc, #132]	; (800e508 <HAL_ADC_MspInit+0x208>)
 800e482:	2200      	movs	r2, #0
 800e484:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e486:	4b20      	ldr	r3, [pc, #128]	; (800e508 <HAL_ADC_MspInit+0x208>)
 800e488:	2200      	movs	r2, #0
 800e48a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800e48c:	4b1e      	ldr	r3, [pc, #120]	; (800e508 <HAL_ADC_MspInit+0x208>)
 800e48e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e492:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e494:	4b1c      	ldr	r3, [pc, #112]	; (800e508 <HAL_ADC_MspInit+0x208>)
 800e496:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e49a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e49c:	4b1a      	ldr	r3, [pc, #104]	; (800e508 <HAL_ADC_MspInit+0x208>)
 800e49e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e4a2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800e4a4:	4b18      	ldr	r3, [pc, #96]	; (800e508 <HAL_ADC_MspInit+0x208>)
 800e4a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e4aa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800e4ac:	4b16      	ldr	r3, [pc, #88]	; (800e508 <HAL_ADC_MspInit+0x208>)
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e4b2:	4b15      	ldr	r3, [pc, #84]	; (800e508 <HAL_ADC_MspInit+0x208>)
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800e4b8:	4813      	ldr	r0, [pc, #76]	; (800e508 <HAL_ADC_MspInit+0x208>)
 800e4ba:	f001 fb2f 	bl	800fb1c <HAL_DMA_Init>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d001      	beq.n	800e4c8 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 800e4c4:	f7ff feea 	bl	800e29c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	4a0f      	ldr	r2, [pc, #60]	; (800e508 <HAL_ADC_MspInit+0x208>)
 800e4cc:	639a      	str	r2, [r3, #56]	; 0x38
 800e4ce:	4a0e      	ldr	r2, [pc, #56]	; (800e508 <HAL_ADC_MspInit+0x208>)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	2100      	movs	r1, #0
 800e4d8:	2012      	movs	r0, #18
 800e4da:	f001 fae8 	bl	800faae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800e4de:	2012      	movs	r0, #18
 800e4e0:	f001 fb01 	bl	800fae6 <HAL_NVIC_EnableIRQ>
}
 800e4e4:	bf00      	nop
 800e4e6:	3730      	adds	r7, #48	; 0x30
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	40012000 	.word	0x40012000
 800e4f0:	40023800 	.word	0x40023800
 800e4f4:	40020800 	.word	0x40020800
 800e4f8:	40020400 	.word	0x40020400
 800e4fc:	20016090 	.word	0x20016090
 800e500:	40026410 	.word	0x40026410
 800e504:	40012100 	.word	0x40012100
 800e508:	200165c4 	.word	0x200165c4
 800e50c:	40026440 	.word	0x40026440

0800e510 <HAL_SPI_MspInit>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< HEAD
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b08a      	sub	sp, #40	; 0x28
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80105b4:	f107 0314 	add.w	r3, r7, #20
 80105b8:	2200      	movs	r2, #0
 80105ba:	601a      	str	r2, [r3, #0]
 80105bc:	605a      	str	r2, [r3, #4]
 80105be:	609a      	str	r2, [r3, #8]
 80105c0:	60da      	str	r2, [r3, #12]
 80105c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	4a19      	ldr	r2, [pc, #100]	; (8010630 <HAL_SPI_MspInit+0x84>)
 80105ca:	4293      	cmp	r3, r2
 80105cc:	d12c      	bne.n	8010628 <HAL_SPI_MspInit+0x7c>
=======
 800e510:	b580      	push	{r7, lr}
 800e512:	b08a      	sub	sp, #40	; 0x28
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e518:	f107 0314 	add.w	r3, r7, #20
 800e51c:	2200      	movs	r2, #0
 800e51e:	601a      	str	r2, [r3, #0]
 800e520:	605a      	str	r2, [r3, #4]
 800e522:	609a      	str	r2, [r3, #8]
 800e524:	60da      	str	r2, [r3, #12]
 800e526:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a19      	ldr	r2, [pc, #100]	; (800e594 <HAL_SPI_MspInit+0x84>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d12c      	bne.n	800e58c <HAL_SPI_MspInit+0x7c>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
<<<<<<< HEAD
 80105ce:	2300      	movs	r3, #0
 80105d0:	613b      	str	r3, [r7, #16]
 80105d2:	4b18      	ldr	r3, [pc, #96]	; (8010634 <HAL_SPI_MspInit+0x88>)
 80105d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105d6:	4a17      	ldr	r2, [pc, #92]	; (8010634 <HAL_SPI_MspInit+0x88>)
 80105d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80105dc:	6413      	str	r3, [r2, #64]	; 0x40
 80105de:	4b15      	ldr	r3, [pc, #84]	; (8010634 <HAL_SPI_MspInit+0x88>)
 80105e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80105e6:	613b      	str	r3, [r7, #16]
 80105e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80105ea:	2300      	movs	r3, #0
 80105ec:	60fb      	str	r3, [r7, #12]
 80105ee:	4b11      	ldr	r3, [pc, #68]	; (8010634 <HAL_SPI_MspInit+0x88>)
 80105f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105f2:	4a10      	ldr	r2, [pc, #64]	; (8010634 <HAL_SPI_MspInit+0x88>)
 80105f4:	f043 0304 	orr.w	r3, r3, #4
 80105f8:	6313      	str	r3, [r2, #48]	; 0x30
 80105fa:	4b0e      	ldr	r3, [pc, #56]	; (8010634 <HAL_SPI_MspInit+0x88>)
 80105fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105fe:	f003 0304 	and.w	r3, r3, #4
 8010602:	60fb      	str	r3, [r7, #12]
 8010604:	68fb      	ldr	r3, [r7, #12]
=======
 800e532:	2300      	movs	r3, #0
 800e534:	613b      	str	r3, [r7, #16]
 800e536:	4b18      	ldr	r3, [pc, #96]	; (800e598 <HAL_SPI_MspInit+0x88>)
 800e538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e53a:	4a17      	ldr	r2, [pc, #92]	; (800e598 <HAL_SPI_MspInit+0x88>)
 800e53c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e540:	6413      	str	r3, [r2, #64]	; 0x40
 800e542:	4b15      	ldr	r3, [pc, #84]	; (800e598 <HAL_SPI_MspInit+0x88>)
 800e544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e546:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e54a:	613b      	str	r3, [r7, #16]
 800e54c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e54e:	2300      	movs	r3, #0
 800e550:	60fb      	str	r3, [r7, #12]
 800e552:	4b11      	ldr	r3, [pc, #68]	; (800e598 <HAL_SPI_MspInit+0x88>)
 800e554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e556:	4a10      	ldr	r2, [pc, #64]	; (800e598 <HAL_SPI_MspInit+0x88>)
 800e558:	f043 0304 	orr.w	r3, r3, #4
 800e55c:	6313      	str	r3, [r2, #48]	; 0x30
 800e55e:	4b0e      	ldr	r3, [pc, #56]	; (800e598 <HAL_SPI_MspInit+0x88>)
 800e560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e562:	f003 0304 	and.w	r3, r3, #4
 800e566:	60fb      	str	r3, [r7, #12]
 800e568:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
<<<<<<< HEAD
 8010606:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801060a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801060c:	2302      	movs	r3, #2
 801060e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010610:	2300      	movs	r3, #0
 8010612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010614:	2303      	movs	r3, #3
 8010616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010618:	2306      	movs	r3, #6
 801061a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801061c:	f107 0314 	add.w	r3, r7, #20
 8010620:	4619      	mov	r1, r3
 8010622:	4805      	ldr	r0, [pc, #20]	; (8010638 <HAL_SPI_MspInit+0x8c>)
 8010624:	f002 fa30 	bl	8012a88 <HAL_GPIO_Init>
=======
 800e56a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e56e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e570:	2302      	movs	r3, #2
 800e572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e574:	2300      	movs	r3, #0
 800e576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e578:	2303      	movs	r3, #3
 800e57a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800e57c:	2306      	movs	r3, #6
 800e57e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e580:	f107 0314 	add.w	r3, r7, #20
 800e584:	4619      	mov	r1, r3
 800e586:	4805      	ldr	r0, [pc, #20]	; (800e59c <HAL_SPI_MspInit+0x8c>)
 800e588:	f002 fa30 	bl	80109ec <HAL_GPIO_Init>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
<<<<<<< HEAD
 8010628:	bf00      	nop
 801062a:	3728      	adds	r7, #40	; 0x28
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}
 8010630:	40003c00 	.word	0x40003c00
 8010634:	40023800 	.word	0x40023800
 8010638:	40020800 	.word	0x40020800

0801063c <HAL_TIM_Base_MspInit>:
=======
 800e58c:	bf00      	nop
 800e58e:	3728      	adds	r7, #40	; 0x28
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}
 800e594:	40003c00 	.word	0x40003c00
 800e598:	40023800 	.word	0x40023800
 800e59c:	40020800 	.word	0x40020800

0800e5a0 <HAL_TIM_Base_MspInit>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 801063c:	b580      	push	{r7, lr}
 801063e:	b086      	sub	sp, #24
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	4a40      	ldr	r2, [pc, #256]	; (801074c <HAL_TIM_Base_MspInit+0x110>)
 801064a:	4293      	cmp	r3, r2
 801064c:	d116      	bne.n	801067c <HAL_TIM_Base_MspInit+0x40>
=======
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a40      	ldr	r2, [pc, #256]	; (800e6b0 <HAL_TIM_Base_MspInit+0x110>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d116      	bne.n	800e5e0 <HAL_TIM_Base_MspInit+0x40>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
 801064e:	2300      	movs	r3, #0
 8010650:	617b      	str	r3, [r7, #20]
 8010652:	4b3f      	ldr	r3, [pc, #252]	; (8010750 <HAL_TIM_Base_MspInit+0x114>)
 8010654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010656:	4a3e      	ldr	r2, [pc, #248]	; (8010750 <HAL_TIM_Base_MspInit+0x114>)
 8010658:	f043 0301 	orr.w	r3, r3, #1
 801065c:	6453      	str	r3, [r2, #68]	; 0x44
 801065e:	4b3c      	ldr	r3, [pc, #240]	; (8010750 <HAL_TIM_Base_MspInit+0x114>)
 8010660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010662:	f003 0301 	and.w	r3, r3, #1
 8010666:	617b      	str	r3, [r7, #20]
 8010668:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 801066a:	2200      	movs	r2, #0
 801066c:	2101      	movs	r1, #1
 801066e:	2019      	movs	r0, #25
 8010670:	f001 fa6b 	bl	8011b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8010674:	2019      	movs	r0, #25
 8010676:	f001 fa84 	bl	8011b82 <HAL_NVIC_EnableIRQ>
=======
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	617b      	str	r3, [r7, #20]
 800e5b6:	4b3f      	ldr	r3, [pc, #252]	; (800e6b4 <HAL_TIM_Base_MspInit+0x114>)
 800e5b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5ba:	4a3e      	ldr	r2, [pc, #248]	; (800e6b4 <HAL_TIM_Base_MspInit+0x114>)
 800e5bc:	f043 0301 	orr.w	r3, r3, #1
 800e5c0:	6453      	str	r3, [r2, #68]	; 0x44
 800e5c2:	4b3c      	ldr	r3, [pc, #240]	; (800e6b4 <HAL_TIM_Base_MspInit+0x114>)
 800e5c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5c6:	f003 0301 	and.w	r3, r3, #1
 800e5ca:	617b      	str	r3, [r7, #20]
 800e5cc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	2101      	movs	r1, #1
 800e5d2:	2019      	movs	r0, #25
 800e5d4:	f001 fa6b 	bl	800faae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800e5d8:	2019      	movs	r0, #25
 800e5da:	f001 fa84 	bl	800fae6 <HAL_NVIC_EnableIRQ>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
<<<<<<< HEAD
 801067a:	e062      	b.n	8010742 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010684:	d116      	bne.n	80106b4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8010686:	2300      	movs	r3, #0
 8010688:	613b      	str	r3, [r7, #16]
 801068a:	4b31      	ldr	r3, [pc, #196]	; (8010750 <HAL_TIM_Base_MspInit+0x114>)
 801068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801068e:	4a30      	ldr	r2, [pc, #192]	; (8010750 <HAL_TIM_Base_MspInit+0x114>)
 8010690:	f043 0301 	orr.w	r3, r3, #1
 8010694:	6413      	str	r3, [r2, #64]	; 0x40
 8010696:	4b2e      	ldr	r3, [pc, #184]	; (8010750 <HAL_TIM_Base_MspInit+0x114>)
 8010698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801069a:	f003 0301 	and.w	r3, r3, #1
 801069e:	613b      	str	r3, [r7, #16]
 80106a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80106a2:	2200      	movs	r2, #0
 80106a4:	2100      	movs	r1, #0
 80106a6:	201c      	movs	r0, #28
 80106a8:	f001 fa4f 	bl	8011b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80106ac:	201c      	movs	r0, #28
 80106ae:	f001 fa68 	bl	8011b82 <HAL_NVIC_EnableIRQ>
}
 80106b2:	e046      	b.n	8010742 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4a26      	ldr	r2, [pc, #152]	; (8010754 <HAL_TIM_Base_MspInit+0x118>)
 80106ba:	4293      	cmp	r3, r2
 80106bc:	d116      	bne.n	80106ec <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80106be:	2300      	movs	r3, #0
 80106c0:	60fb      	str	r3, [r7, #12]
 80106c2:	4b23      	ldr	r3, [pc, #140]	; (8010750 <HAL_TIM_Base_MspInit+0x114>)
 80106c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106c6:	4a22      	ldr	r2, [pc, #136]	; (8010750 <HAL_TIM_Base_MspInit+0x114>)
 80106c8:	f043 0308 	orr.w	r3, r3, #8
 80106cc:	6413      	str	r3, [r2, #64]	; 0x40
 80106ce:	4b20      	ldr	r3, [pc, #128]	; (8010750 <HAL_TIM_Base_MspInit+0x114>)
 80106d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106d2:	f003 0308 	and.w	r3, r3, #8
 80106d6:	60fb      	str	r3, [r7, #12]
 80106d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80106da:	2200      	movs	r2, #0
 80106dc:	2100      	movs	r1, #0
 80106de:	2032      	movs	r0, #50	; 0x32
 80106e0:	f001 fa33 	bl	8011b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80106e4:	2032      	movs	r0, #50	; 0x32
 80106e6:	f001 fa4c 	bl	8011b82 <HAL_NVIC_EnableIRQ>
}
 80106ea:	e02a      	b.n	8010742 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	4a19      	ldr	r2, [pc, #100]	; (8010758 <HAL_TIM_Base_MspInit+0x11c>)
 80106f2:	4293      	cmp	r3, r2
 80106f4:	d125      	bne.n	8010742 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80106f6:	2300      	movs	r3, #0
 80106f8:	60bb      	str	r3, [r7, #8]
 80106fa:	4b15      	ldr	r3, [pc, #84]	; (8010750 <HAL_TIM_Base_MspInit+0x114>)
 80106fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106fe:	4a14      	ldr	r2, [pc, #80]	; (8010750 <HAL_TIM_Base_MspInit+0x114>)
 8010700:	f043 0302 	orr.w	r3, r3, #2
 8010704:	6453      	str	r3, [r2, #68]	; 0x44
 8010706:	4b12      	ldr	r3, [pc, #72]	; (8010750 <HAL_TIM_Base_MspInit+0x114>)
 8010708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801070a:	f003 0302 	and.w	r3, r3, #2
 801070e:	60bb      	str	r3, [r7, #8]
 8010710:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 8010712:	2200      	movs	r2, #0
 8010714:	2102      	movs	r1, #2
 8010716:	202c      	movs	r0, #44	; 0x2c
 8010718:	f001 fa17 	bl	8011b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 801071c:	202c      	movs	r0, #44	; 0x2c
 801071e:	f001 fa30 	bl	8011b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8010722:	2200      	movs	r2, #0
 8010724:	2100      	movs	r1, #0
 8010726:	202d      	movs	r0, #45	; 0x2d
 8010728:	f001 fa0f 	bl	8011b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 801072c:	202d      	movs	r0, #45	; 0x2d
 801072e:	f001 fa28 	bl	8011b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8010732:	2200      	movs	r2, #0
 8010734:	2100      	movs	r1, #0
 8010736:	202e      	movs	r0, #46	; 0x2e
 8010738:	f001 fa07 	bl	8011b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 801073c:	202e      	movs	r0, #46	; 0x2e
 801073e:	f001 fa20 	bl	8011b82 <HAL_NVIC_EnableIRQ>
}
 8010742:	bf00      	nop
 8010744:	3718      	adds	r7, #24
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	40010000 	.word	0x40010000
 8010750:	40023800 	.word	0x40023800
 8010754:	40000c00 	.word	0x40000c00
 8010758:	40010400 	.word	0x40010400

0801075c <HAL_TIM_Encoder_MspInit>:
=======
 800e5de:	e062      	b.n	800e6a6 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5e8:	d116      	bne.n	800e618 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	613b      	str	r3, [r7, #16]
 800e5ee:	4b31      	ldr	r3, [pc, #196]	; (800e6b4 <HAL_TIM_Base_MspInit+0x114>)
 800e5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5f2:	4a30      	ldr	r2, [pc, #192]	; (800e6b4 <HAL_TIM_Base_MspInit+0x114>)
 800e5f4:	f043 0301 	orr.w	r3, r3, #1
 800e5f8:	6413      	str	r3, [r2, #64]	; 0x40
 800e5fa:	4b2e      	ldr	r3, [pc, #184]	; (800e6b4 <HAL_TIM_Base_MspInit+0x114>)
 800e5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5fe:	f003 0301 	and.w	r3, r3, #1
 800e602:	613b      	str	r3, [r7, #16]
 800e604:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800e606:	2200      	movs	r2, #0
 800e608:	2100      	movs	r1, #0
 800e60a:	201c      	movs	r0, #28
 800e60c:	f001 fa4f 	bl	800faae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800e610:	201c      	movs	r0, #28
 800e612:	f001 fa68 	bl	800fae6 <HAL_NVIC_EnableIRQ>
}
 800e616:	e046      	b.n	800e6a6 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a26      	ldr	r2, [pc, #152]	; (800e6b8 <HAL_TIM_Base_MspInit+0x118>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d116      	bne.n	800e650 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800e622:	2300      	movs	r3, #0
 800e624:	60fb      	str	r3, [r7, #12]
 800e626:	4b23      	ldr	r3, [pc, #140]	; (800e6b4 <HAL_TIM_Base_MspInit+0x114>)
 800e628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e62a:	4a22      	ldr	r2, [pc, #136]	; (800e6b4 <HAL_TIM_Base_MspInit+0x114>)
 800e62c:	f043 0308 	orr.w	r3, r3, #8
 800e630:	6413      	str	r3, [r2, #64]	; 0x40
 800e632:	4b20      	ldr	r3, [pc, #128]	; (800e6b4 <HAL_TIM_Base_MspInit+0x114>)
 800e634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e636:	f003 0308 	and.w	r3, r3, #8
 800e63a:	60fb      	str	r3, [r7, #12]
 800e63c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800e63e:	2200      	movs	r2, #0
 800e640:	2100      	movs	r1, #0
 800e642:	2032      	movs	r0, #50	; 0x32
 800e644:	f001 fa33 	bl	800faae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800e648:	2032      	movs	r0, #50	; 0x32
 800e64a:	f001 fa4c 	bl	800fae6 <HAL_NVIC_EnableIRQ>
}
 800e64e:	e02a      	b.n	800e6a6 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4a19      	ldr	r2, [pc, #100]	; (800e6bc <HAL_TIM_Base_MspInit+0x11c>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d125      	bne.n	800e6a6 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800e65a:	2300      	movs	r3, #0
 800e65c:	60bb      	str	r3, [r7, #8]
 800e65e:	4b15      	ldr	r3, [pc, #84]	; (800e6b4 <HAL_TIM_Base_MspInit+0x114>)
 800e660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e662:	4a14      	ldr	r2, [pc, #80]	; (800e6b4 <HAL_TIM_Base_MspInit+0x114>)
 800e664:	f043 0302 	orr.w	r3, r3, #2
 800e668:	6453      	str	r3, [r2, #68]	; 0x44
 800e66a:	4b12      	ldr	r3, [pc, #72]	; (800e6b4 <HAL_TIM_Base_MspInit+0x114>)
 800e66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e66e:	f003 0302 	and.w	r3, r3, #2
 800e672:	60bb      	str	r3, [r7, #8]
 800e674:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 800e676:	2200      	movs	r2, #0
 800e678:	2102      	movs	r1, #2
 800e67a:	202c      	movs	r0, #44	; 0x2c
 800e67c:	f001 fa17 	bl	800faae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800e680:	202c      	movs	r0, #44	; 0x2c
 800e682:	f001 fa30 	bl	800fae6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800e686:	2200      	movs	r2, #0
 800e688:	2100      	movs	r1, #0
 800e68a:	202d      	movs	r0, #45	; 0x2d
 800e68c:	f001 fa0f 	bl	800faae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800e690:	202d      	movs	r0, #45	; 0x2d
 800e692:	f001 fa28 	bl	800fae6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800e696:	2200      	movs	r2, #0
 800e698:	2100      	movs	r1, #0
 800e69a:	202e      	movs	r0, #46	; 0x2e
 800e69c:	f001 fa07 	bl	800faae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800e6a0:	202e      	movs	r0, #46	; 0x2e
 800e6a2:	f001 fa20 	bl	800fae6 <HAL_NVIC_EnableIRQ>
}
 800e6a6:	bf00      	nop
 800e6a8:	3718      	adds	r7, #24
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	40010000 	.word	0x40010000
 800e6b4:	40023800 	.word	0x40023800
 800e6b8:	40000c00 	.word	0x40000c00
 800e6bc:	40010400 	.word	0x40010400

0800e6c0 <HAL_TIM_Encoder_MspInit>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
<<<<<<< HEAD
 801075c:	b580      	push	{r7, lr}
 801075e:	b08c      	sub	sp, #48	; 0x30
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010764:	f107 031c 	add.w	r3, r7, #28
 8010768:	2200      	movs	r2, #0
 801076a:	601a      	str	r2, [r3, #0]
 801076c:	605a      	str	r2, [r3, #4]
 801076e:	609a      	str	r2, [r3, #8]
 8010770:	60da      	str	r2, [r3, #12]
 8010772:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	4a3a      	ldr	r2, [pc, #232]	; (8010864 <HAL_TIM_Encoder_MspInit+0x108>)
 801077a:	4293      	cmp	r3, r2
 801077c:	d134      	bne.n	80107e8 <HAL_TIM_Encoder_MspInit+0x8c>
=======
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b08c      	sub	sp, #48	; 0x30
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6c8:	f107 031c 	add.w	r3, r7, #28
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	601a      	str	r2, [r3, #0]
 800e6d0:	605a      	str	r2, [r3, #4]
 800e6d2:	609a      	str	r2, [r3, #8]
 800e6d4:	60da      	str	r2, [r3, #12]
 800e6d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4a3a      	ldr	r2, [pc, #232]	; (800e7c8 <HAL_TIM_Encoder_MspInit+0x108>)
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	d134      	bne.n	800e74c <HAL_TIM_Encoder_MspInit+0x8c>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
<<<<<<< HEAD
 801077e:	2300      	movs	r3, #0
 8010780:	61bb      	str	r3, [r7, #24]
 8010782:	4b39      	ldr	r3, [pc, #228]	; (8010868 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010786:	4a38      	ldr	r2, [pc, #224]	; (8010868 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010788:	f043 0302 	orr.w	r3, r3, #2
 801078c:	6413      	str	r3, [r2, #64]	; 0x40
 801078e:	4b36      	ldr	r3, [pc, #216]	; (8010868 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010792:	f003 0302 	and.w	r3, r3, #2
 8010796:	61bb      	str	r3, [r7, #24]
 8010798:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801079a:	2300      	movs	r3, #0
 801079c:	617b      	str	r3, [r7, #20]
 801079e:	4b32      	ldr	r3, [pc, #200]	; (8010868 <HAL_TIM_Encoder_MspInit+0x10c>)
 80107a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107a2:	4a31      	ldr	r2, [pc, #196]	; (8010868 <HAL_TIM_Encoder_MspInit+0x10c>)
 80107a4:	f043 0301 	orr.w	r3, r3, #1
 80107a8:	6313      	str	r3, [r2, #48]	; 0x30
 80107aa:	4b2f      	ldr	r3, [pc, #188]	; (8010868 <HAL_TIM_Encoder_MspInit+0x10c>)
 80107ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107ae:	f003 0301 	and.w	r3, r3, #1
 80107b2:	617b      	str	r3, [r7, #20]
 80107b4:	697b      	ldr	r3, [r7, #20]
=======
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	61bb      	str	r3, [r7, #24]
 800e6e6:	4b39      	ldr	r3, [pc, #228]	; (800e7cc <HAL_TIM_Encoder_MspInit+0x10c>)
 800e6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ea:	4a38      	ldr	r2, [pc, #224]	; (800e7cc <HAL_TIM_Encoder_MspInit+0x10c>)
 800e6ec:	f043 0302 	orr.w	r3, r3, #2
 800e6f0:	6413      	str	r3, [r2, #64]	; 0x40
 800e6f2:	4b36      	ldr	r3, [pc, #216]	; (800e7cc <HAL_TIM_Encoder_MspInit+0x10c>)
 800e6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6f6:	f003 0302 	and.w	r3, r3, #2
 800e6fa:	61bb      	str	r3, [r7, #24]
 800e6fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6fe:	2300      	movs	r3, #0
 800e700:	617b      	str	r3, [r7, #20]
 800e702:	4b32      	ldr	r3, [pc, #200]	; (800e7cc <HAL_TIM_Encoder_MspInit+0x10c>)
 800e704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e706:	4a31      	ldr	r2, [pc, #196]	; (800e7cc <HAL_TIM_Encoder_MspInit+0x10c>)
 800e708:	f043 0301 	orr.w	r3, r3, #1
 800e70c:	6313      	str	r3, [r2, #48]	; 0x30
 800e70e:	4b2f      	ldr	r3, [pc, #188]	; (800e7cc <HAL_TIM_Encoder_MspInit+0x10c>)
 800e710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e712:	f003 0301 	and.w	r3, r3, #1
 800e716:	617b      	str	r3, [r7, #20]
 800e718:	697b      	ldr	r3, [r7, #20]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< HEAD
 80107b6:	23c0      	movs	r3, #192	; 0xc0
 80107b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107ba:	2302      	movs	r3, #2
 80107bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107be:	2300      	movs	r3, #0
 80107c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107c2:	2300      	movs	r3, #0
 80107c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80107c6:	2302      	movs	r3, #2
 80107c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80107ca:	f107 031c 	add.w	r3, r7, #28
 80107ce:	4619      	mov	r1, r3
 80107d0:	4826      	ldr	r0, [pc, #152]	; (801086c <HAL_TIM_Encoder_MspInit+0x110>)
 80107d2:	f002 f959 	bl	8012a88 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80107d6:	2200      	movs	r2, #0
 80107d8:	2100      	movs	r1, #0
 80107da:	201d      	movs	r0, #29
 80107dc:	f001 f9b5 	bl	8011b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80107e0:	201d      	movs	r0, #29
 80107e2:	f001 f9ce 	bl	8011b82 <HAL_NVIC_EnableIRQ>
=======
 800e71a:	23c0      	movs	r3, #192	; 0xc0
 800e71c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e71e:	2302      	movs	r3, #2
 800e720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e722:	2300      	movs	r3, #0
 800e724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e726:	2300      	movs	r3, #0
 800e728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e72a:	2302      	movs	r3, #2
 800e72c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e72e:	f107 031c 	add.w	r3, r7, #28
 800e732:	4619      	mov	r1, r3
 800e734:	4826      	ldr	r0, [pc, #152]	; (800e7d0 <HAL_TIM_Encoder_MspInit+0x110>)
 800e736:	f002 f959 	bl	80109ec <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800e73a:	2200      	movs	r2, #0
 800e73c:	2100      	movs	r1, #0
 800e73e:	201d      	movs	r0, #29
 800e740:	f001 f9b5 	bl	800faae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800e744:	201d      	movs	r0, #29
 800e746:	f001 f9ce 	bl	800fae6 <HAL_NVIC_EnableIRQ>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
<<<<<<< HEAD
 80107e6:	e038      	b.n	801085a <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	4a20      	ldr	r2, [pc, #128]	; (8010870 <HAL_TIM_Encoder_MspInit+0x114>)
 80107ee:	4293      	cmp	r3, r2
 80107f0:	d133      	bne.n	801085a <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80107f2:	2300      	movs	r3, #0
 80107f4:	613b      	str	r3, [r7, #16]
 80107f6:	4b1c      	ldr	r3, [pc, #112]	; (8010868 <HAL_TIM_Encoder_MspInit+0x10c>)
 80107f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107fa:	4a1b      	ldr	r2, [pc, #108]	; (8010868 <HAL_TIM_Encoder_MspInit+0x10c>)
 80107fc:	f043 0304 	orr.w	r3, r3, #4
 8010800:	6413      	str	r3, [r2, #64]	; 0x40
 8010802:	4b19      	ldr	r3, [pc, #100]	; (8010868 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010806:	f003 0304 	and.w	r3, r3, #4
 801080a:	613b      	str	r3, [r7, #16]
 801080c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801080e:	2300      	movs	r3, #0
 8010810:	60fb      	str	r3, [r7, #12]
 8010812:	4b15      	ldr	r3, [pc, #84]	; (8010868 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010816:	4a14      	ldr	r2, [pc, #80]	; (8010868 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010818:	f043 0302 	orr.w	r3, r3, #2
 801081c:	6313      	str	r3, [r2, #48]	; 0x30
 801081e:	4b12      	ldr	r3, [pc, #72]	; (8010868 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010822:	f003 0302 	and.w	r3, r3, #2
 8010826:	60fb      	str	r3, [r7, #12]
 8010828:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801082a:	23c0      	movs	r3, #192	; 0xc0
 801082c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801082e:	2302      	movs	r3, #2
 8010830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010832:	2300      	movs	r3, #0
 8010834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010836:	2300      	movs	r3, #0
 8010838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 801083a:	2302      	movs	r3, #2
 801083c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801083e:	f107 031c 	add.w	r3, r7, #28
 8010842:	4619      	mov	r1, r3
 8010844:	480b      	ldr	r0, [pc, #44]	; (8010874 <HAL_TIM_Encoder_MspInit+0x118>)
 8010846:	f002 f91f 	bl	8012a88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801084a:	2200      	movs	r2, #0
 801084c:	2100      	movs	r1, #0
 801084e:	201e      	movs	r0, #30
 8010850:	f001 f97b 	bl	8011b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8010854:	201e      	movs	r0, #30
 8010856:	f001 f994 	bl	8011b82 <HAL_NVIC_EnableIRQ>
}
 801085a:	bf00      	nop
 801085c:	3730      	adds	r7, #48	; 0x30
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
 8010862:	bf00      	nop
 8010864:	40000400 	.word	0x40000400
 8010868:	40023800 	.word	0x40023800
 801086c:	40020000 	.word	0x40020000
 8010870:	40000800 	.word	0x40000800
 8010874:	40020400 	.word	0x40020400

08010878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b08c      	sub	sp, #48	; 0x30
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010880:	f107 031c 	add.w	r3, r7, #28
 8010884:	2200      	movs	r2, #0
 8010886:	601a      	str	r2, [r3, #0]
 8010888:	605a      	str	r2, [r3, #4]
 801088a:	609a      	str	r2, [r3, #8]
 801088c:	60da      	str	r2, [r3, #12]
 801088e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010898:	d11e      	bne.n	80108d8 <HAL_TIM_MspPostInit+0x60>
=======
 800e74a:	e038      	b.n	800e7be <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4a20      	ldr	r2, [pc, #128]	; (800e7d4 <HAL_TIM_Encoder_MspInit+0x114>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d133      	bne.n	800e7be <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e756:	2300      	movs	r3, #0
 800e758:	613b      	str	r3, [r7, #16]
 800e75a:	4b1c      	ldr	r3, [pc, #112]	; (800e7cc <HAL_TIM_Encoder_MspInit+0x10c>)
 800e75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e75e:	4a1b      	ldr	r2, [pc, #108]	; (800e7cc <HAL_TIM_Encoder_MspInit+0x10c>)
 800e760:	f043 0304 	orr.w	r3, r3, #4
 800e764:	6413      	str	r3, [r2, #64]	; 0x40
 800e766:	4b19      	ldr	r3, [pc, #100]	; (800e7cc <HAL_TIM_Encoder_MspInit+0x10c>)
 800e768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e76a:	f003 0304 	and.w	r3, r3, #4
 800e76e:	613b      	str	r3, [r7, #16]
 800e770:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e772:	2300      	movs	r3, #0
 800e774:	60fb      	str	r3, [r7, #12]
 800e776:	4b15      	ldr	r3, [pc, #84]	; (800e7cc <HAL_TIM_Encoder_MspInit+0x10c>)
 800e778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e77a:	4a14      	ldr	r2, [pc, #80]	; (800e7cc <HAL_TIM_Encoder_MspInit+0x10c>)
 800e77c:	f043 0302 	orr.w	r3, r3, #2
 800e780:	6313      	str	r3, [r2, #48]	; 0x30
 800e782:	4b12      	ldr	r3, [pc, #72]	; (800e7cc <HAL_TIM_Encoder_MspInit+0x10c>)
 800e784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e786:	f003 0302 	and.w	r3, r3, #2
 800e78a:	60fb      	str	r3, [r7, #12]
 800e78c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e78e:	23c0      	movs	r3, #192	; 0xc0
 800e790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e792:	2302      	movs	r3, #2
 800e794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e796:	2300      	movs	r3, #0
 800e798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e79a:	2300      	movs	r3, #0
 800e79c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800e79e:	2302      	movs	r3, #2
 800e7a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e7a2:	f107 031c 	add.w	r3, r7, #28
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	480b      	ldr	r0, [pc, #44]	; (800e7d8 <HAL_TIM_Encoder_MspInit+0x118>)
 800e7aa:	f002 f91f 	bl	80109ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	201e      	movs	r0, #30
 800e7b4:	f001 f97b 	bl	800faae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800e7b8:	201e      	movs	r0, #30
 800e7ba:	f001 f994 	bl	800fae6 <HAL_NVIC_EnableIRQ>
}
 800e7be:	bf00      	nop
 800e7c0:	3730      	adds	r7, #48	; 0x30
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	40000400 	.word	0x40000400
 800e7cc:	40023800 	.word	0x40023800
 800e7d0:	40020000 	.word	0x40020000
 800e7d4:	40000800 	.word	0x40000800
 800e7d8:	40020400 	.word	0x40020400

0800e7dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b08c      	sub	sp, #48	; 0x30
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e7e4:	f107 031c 	add.w	r3, r7, #28
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	601a      	str	r2, [r3, #0]
 800e7ec:	605a      	str	r2, [r3, #4]
 800e7ee:	609a      	str	r2, [r3, #8]
 800e7f0:	60da      	str	r2, [r3, #12]
 800e7f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7fc:	d11e      	bne.n	800e83c <HAL_TIM_MspPostInit+0x60>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 801089a:	2300      	movs	r3, #0
 801089c:	61bb      	str	r3, [r7, #24]
 801089e:	4b43      	ldr	r3, [pc, #268]	; (80109ac <HAL_TIM_MspPostInit+0x134>)
 80108a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108a2:	4a42      	ldr	r2, [pc, #264]	; (80109ac <HAL_TIM_MspPostInit+0x134>)
 80108a4:	f043 0301 	orr.w	r3, r3, #1
 80108a8:	6313      	str	r3, [r2, #48]	; 0x30
 80108aa:	4b40      	ldr	r3, [pc, #256]	; (80109ac <HAL_TIM_MspPostInit+0x134>)
 80108ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108ae:	f003 0301 	and.w	r3, r3, #1
 80108b2:	61bb      	str	r3, [r7, #24]
 80108b4:	69bb      	ldr	r3, [r7, #24]
=======
 800e7fe:	2300      	movs	r3, #0
 800e800:	61bb      	str	r3, [r7, #24]
 800e802:	4b43      	ldr	r3, [pc, #268]	; (800e910 <HAL_TIM_MspPostInit+0x134>)
 800e804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e806:	4a42      	ldr	r2, [pc, #264]	; (800e910 <HAL_TIM_MspPostInit+0x134>)
 800e808:	f043 0301 	orr.w	r3, r3, #1
 800e80c:	6313      	str	r3, [r2, #48]	; 0x30
 800e80e:	4b40      	ldr	r3, [pc, #256]	; (800e910 <HAL_TIM_MspPostInit+0x134>)
 800e810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e812:	f003 0301 	and.w	r3, r3, #1
 800e816:	61bb      	str	r3, [r7, #24]
 800e818:	69bb      	ldr	r3, [r7, #24]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
<<<<<<< HEAD
 80108b6:	2308      	movs	r3, #8
 80108b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108ba:	2302      	movs	r3, #2
 80108bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108be:	2300      	movs	r3, #0
 80108c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80108c2:	2303      	movs	r3, #3
 80108c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80108c6:	2301      	movs	r3, #1
 80108c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80108ca:	f107 031c 	add.w	r3, r7, #28
 80108ce:	4619      	mov	r1, r3
 80108d0:	4837      	ldr	r0, [pc, #220]	; (80109b0 <HAL_TIM_MspPostInit+0x138>)
 80108d2:	f002 f8d9 	bl	8012a88 <HAL_GPIO_Init>
=======
 800e81a:	2308      	movs	r3, #8
 800e81c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e81e:	2302      	movs	r3, #2
 800e820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e822:	2300      	movs	r3, #0
 800e824:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e826:	2303      	movs	r3, #3
 800e828:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e82a:	2301      	movs	r3, #1
 800e82c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e82e:	f107 031c 	add.w	r3, r7, #28
 800e832:	4619      	mov	r1, r3
 800e834:	4837      	ldr	r0, [pc, #220]	; (800e914 <HAL_TIM_MspPostInit+0x138>)
 800e836:	f002 f8d9 	bl	80109ec <HAL_GPIO_Init>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 80108d6:	e064      	b.n	80109a2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4a35      	ldr	r2, [pc, #212]	; (80109b4 <HAL_TIM_MspPostInit+0x13c>)
 80108de:	4293      	cmp	r3, r2
 80108e0:	d11e      	bne.n	8010920 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80108e2:	2300      	movs	r3, #0
 80108e4:	617b      	str	r3, [r7, #20]
 80108e6:	4b31      	ldr	r3, [pc, #196]	; (80109ac <HAL_TIM_MspPostInit+0x134>)
 80108e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108ea:	4a30      	ldr	r2, [pc, #192]	; (80109ac <HAL_TIM_MspPostInit+0x134>)
 80108ec:	f043 0301 	orr.w	r3, r3, #1
 80108f0:	6313      	str	r3, [r2, #48]	; 0x30
 80108f2:	4b2e      	ldr	r3, [pc, #184]	; (80109ac <HAL_TIM_MspPostInit+0x134>)
 80108f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108f6:	f003 0301 	and.w	r3, r3, #1
 80108fa:	617b      	str	r3, [r7, #20]
 80108fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80108fe:	2302      	movs	r3, #2
 8010900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010902:	2302      	movs	r3, #2
 8010904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010906:	2300      	movs	r3, #0
 8010908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801090a:	2300      	movs	r3, #0
 801090c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 801090e:	2302      	movs	r3, #2
 8010910:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010912:	f107 031c 	add.w	r3, r7, #28
 8010916:	4619      	mov	r1, r3
 8010918:	4825      	ldr	r0, [pc, #148]	; (80109b0 <HAL_TIM_MspPostInit+0x138>)
 801091a:	f002 f8b5 	bl	8012a88 <HAL_GPIO_Init>
}
 801091e:	e040      	b.n	80109a2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	4a24      	ldr	r2, [pc, #144]	; (80109b8 <HAL_TIM_MspPostInit+0x140>)
 8010926:	4293      	cmp	r3, r2
 8010928:	d13b      	bne.n	80109a2 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801092a:	2300      	movs	r3, #0
 801092c:	613b      	str	r3, [r7, #16]
 801092e:	4b1f      	ldr	r3, [pc, #124]	; (80109ac <HAL_TIM_MspPostInit+0x134>)
 8010930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010932:	4a1e      	ldr	r2, [pc, #120]	; (80109ac <HAL_TIM_MspPostInit+0x134>)
 8010934:	f043 0301 	orr.w	r3, r3, #1
 8010938:	6313      	str	r3, [r2, #48]	; 0x30
 801093a:	4b1c      	ldr	r3, [pc, #112]	; (80109ac <HAL_TIM_MspPostInit+0x134>)
 801093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801093e:	f003 0301 	and.w	r3, r3, #1
 8010942:	613b      	str	r3, [r7, #16]
 8010944:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010946:	2300      	movs	r3, #0
 8010948:	60fb      	str	r3, [r7, #12]
 801094a:	4b18      	ldr	r3, [pc, #96]	; (80109ac <HAL_TIM_MspPostInit+0x134>)
 801094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801094e:	4a17      	ldr	r2, [pc, #92]	; (80109ac <HAL_TIM_MspPostInit+0x134>)
 8010950:	f043 0304 	orr.w	r3, r3, #4
 8010954:	6313      	str	r3, [r2, #48]	; 0x30
 8010956:	4b15      	ldr	r3, [pc, #84]	; (80109ac <HAL_TIM_MspPostInit+0x134>)
 8010958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801095a:	f003 0304 	and.w	r3, r3, #4
 801095e:	60fb      	str	r3, [r7, #12]
 8010960:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8010962:	2320      	movs	r3, #32
 8010964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010966:	2302      	movs	r3, #2
 8010968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801096a:	2300      	movs	r3, #0
 801096c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801096e:	2300      	movs	r3, #0
 8010970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010972:	2303      	movs	r3, #3
 8010974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010976:	f107 031c 	add.w	r3, r7, #28
 801097a:	4619      	mov	r1, r3
 801097c:	480c      	ldr	r0, [pc, #48]	; (80109b0 <HAL_TIM_MspPostInit+0x138>)
 801097e:	f002 f883 	bl	8012a88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8010982:	2340      	movs	r3, #64	; 0x40
 8010984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010986:	2302      	movs	r3, #2
 8010988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801098a:	2300      	movs	r3, #0
 801098c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801098e:	2300      	movs	r3, #0
 8010990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010992:	2303      	movs	r3, #3
 8010994:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010996:	f107 031c 	add.w	r3, r7, #28
 801099a:	4619      	mov	r1, r3
 801099c:	4807      	ldr	r0, [pc, #28]	; (80109bc <HAL_TIM_MspPostInit+0x144>)
 801099e:	f002 f873 	bl	8012a88 <HAL_GPIO_Init>
}
 80109a2:	bf00      	nop
 80109a4:	3730      	adds	r7, #48	; 0x30
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop
 80109ac:	40023800 	.word	0x40023800
 80109b0:	40020000 	.word	0x40020000
 80109b4:	40000c00 	.word	0x40000c00
 80109b8:	40010400 	.word	0x40010400
 80109bc:	40020800 	.word	0x40020800

080109c0 <HAL_UART_MspInit>:
=======
 800e83a:	e064      	b.n	800e906 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4a35      	ldr	r2, [pc, #212]	; (800e918 <HAL_TIM_MspPostInit+0x13c>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d11e      	bne.n	800e884 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e846:	2300      	movs	r3, #0
 800e848:	617b      	str	r3, [r7, #20]
 800e84a:	4b31      	ldr	r3, [pc, #196]	; (800e910 <HAL_TIM_MspPostInit+0x134>)
 800e84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e84e:	4a30      	ldr	r2, [pc, #192]	; (800e910 <HAL_TIM_MspPostInit+0x134>)
 800e850:	f043 0301 	orr.w	r3, r3, #1
 800e854:	6313      	str	r3, [r2, #48]	; 0x30
 800e856:	4b2e      	ldr	r3, [pc, #184]	; (800e910 <HAL_TIM_MspPostInit+0x134>)
 800e858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e85a:	f003 0301 	and.w	r3, r3, #1
 800e85e:	617b      	str	r3, [r7, #20]
 800e860:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e862:	2302      	movs	r3, #2
 800e864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e866:	2302      	movs	r3, #2
 800e868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e86a:	2300      	movs	r3, #0
 800e86c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e86e:	2300      	movs	r3, #0
 800e870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800e872:	2302      	movs	r3, #2
 800e874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e876:	f107 031c 	add.w	r3, r7, #28
 800e87a:	4619      	mov	r1, r3
 800e87c:	4825      	ldr	r0, [pc, #148]	; (800e914 <HAL_TIM_MspPostInit+0x138>)
 800e87e:	f002 f8b5 	bl	80109ec <HAL_GPIO_Init>
}
 800e882:	e040      	b.n	800e906 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a24      	ldr	r2, [pc, #144]	; (800e91c <HAL_TIM_MspPostInit+0x140>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d13b      	bne.n	800e906 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e88e:	2300      	movs	r3, #0
 800e890:	613b      	str	r3, [r7, #16]
 800e892:	4b1f      	ldr	r3, [pc, #124]	; (800e910 <HAL_TIM_MspPostInit+0x134>)
 800e894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e896:	4a1e      	ldr	r2, [pc, #120]	; (800e910 <HAL_TIM_MspPostInit+0x134>)
 800e898:	f043 0301 	orr.w	r3, r3, #1
 800e89c:	6313      	str	r3, [r2, #48]	; 0x30
 800e89e:	4b1c      	ldr	r3, [pc, #112]	; (800e910 <HAL_TIM_MspPostInit+0x134>)
 800e8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8a2:	f003 0301 	and.w	r3, r3, #1
 800e8a6:	613b      	str	r3, [r7, #16]
 800e8a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	60fb      	str	r3, [r7, #12]
 800e8ae:	4b18      	ldr	r3, [pc, #96]	; (800e910 <HAL_TIM_MspPostInit+0x134>)
 800e8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8b2:	4a17      	ldr	r2, [pc, #92]	; (800e910 <HAL_TIM_MspPostInit+0x134>)
 800e8b4:	f043 0304 	orr.w	r3, r3, #4
 800e8b8:	6313      	str	r3, [r2, #48]	; 0x30
 800e8ba:	4b15      	ldr	r3, [pc, #84]	; (800e910 <HAL_TIM_MspPostInit+0x134>)
 800e8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8be:	f003 0304 	and.w	r3, r3, #4
 800e8c2:	60fb      	str	r3, [r7, #12]
 800e8c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800e8c6:	2320      	movs	r3, #32
 800e8c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8ca:	2302      	movs	r3, #2
 800e8cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e8d6:	2303      	movs	r3, #3
 800e8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8da:	f107 031c 	add.w	r3, r7, #28
 800e8de:	4619      	mov	r1, r3
 800e8e0:	480c      	ldr	r0, [pc, #48]	; (800e914 <HAL_TIM_MspPostInit+0x138>)
 800e8e2:	f002 f883 	bl	80109ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e8e6:	2340      	movs	r3, #64	; 0x40
 800e8e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8ea:	2302      	movs	r3, #2
 800e8ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e8f6:	2303      	movs	r3, #3
 800e8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e8fa:	f107 031c 	add.w	r3, r7, #28
 800e8fe:	4619      	mov	r1, r3
 800e900:	4807      	ldr	r0, [pc, #28]	; (800e920 <HAL_TIM_MspPostInit+0x144>)
 800e902:	f002 f873 	bl	80109ec <HAL_GPIO_Init>
}
 800e906:	bf00      	nop
 800e908:	3730      	adds	r7, #48	; 0x30
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	40023800 	.word	0x40023800
 800e914:	40020000 	.word	0x40020000
 800e918:	40000c00 	.word	0x40000c00
 800e91c:	40010400 	.word	0x40010400
 800e920:	40020800 	.word	0x40020800

0800e924 <HAL_UART_MspInit>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b08a      	sub	sp, #40	; 0x28
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80109c8:	f107 0314 	add.w	r3, r7, #20
 80109cc:	2200      	movs	r2, #0
 80109ce:	601a      	str	r2, [r3, #0]
 80109d0:	605a      	str	r2, [r3, #4]
 80109d2:	609a      	str	r2, [r3, #8]
 80109d4:	60da      	str	r2, [r3, #12]
 80109d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	4a19      	ldr	r2, [pc, #100]	; (8010a44 <HAL_UART_MspInit+0x84>)
 80109de:	4293      	cmp	r3, r2
 80109e0:	d12c      	bne.n	8010a3c <HAL_UART_MspInit+0x7c>
=======
 800e924:	b580      	push	{r7, lr}
 800e926:	b08a      	sub	sp, #40	; 0x28
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e92c:	f107 0314 	add.w	r3, r7, #20
 800e930:	2200      	movs	r2, #0
 800e932:	601a      	str	r2, [r3, #0]
 800e934:	605a      	str	r2, [r3, #4]
 800e936:	609a      	str	r2, [r3, #8]
 800e938:	60da      	str	r2, [r3, #12]
 800e93a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4a19      	ldr	r2, [pc, #100]	; (800e9a8 <HAL_UART_MspInit+0x84>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d12c      	bne.n	800e9a0 <HAL_UART_MspInit+0x7c>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 80109e2:	2300      	movs	r3, #0
 80109e4:	613b      	str	r3, [r7, #16]
 80109e6:	4b18      	ldr	r3, [pc, #96]	; (8010a48 <HAL_UART_MspInit+0x88>)
 80109e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109ea:	4a17      	ldr	r2, [pc, #92]	; (8010a48 <HAL_UART_MspInit+0x88>)
 80109ec:	f043 0310 	orr.w	r3, r3, #16
 80109f0:	6453      	str	r3, [r2, #68]	; 0x44
 80109f2:	4b15      	ldr	r3, [pc, #84]	; (8010a48 <HAL_UART_MspInit+0x88>)
 80109f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109f6:	f003 0310 	and.w	r3, r3, #16
 80109fa:	613b      	str	r3, [r7, #16]
 80109fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80109fe:	2300      	movs	r3, #0
 8010a00:	60fb      	str	r3, [r7, #12]
 8010a02:	4b11      	ldr	r3, [pc, #68]	; (8010a48 <HAL_UART_MspInit+0x88>)
 8010a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a06:	4a10      	ldr	r2, [pc, #64]	; (8010a48 <HAL_UART_MspInit+0x88>)
 8010a08:	f043 0301 	orr.w	r3, r3, #1
 8010a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8010a0e:	4b0e      	ldr	r3, [pc, #56]	; (8010a48 <HAL_UART_MspInit+0x88>)
 8010a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a12:	f003 0301 	and.w	r3, r3, #1
 8010a16:	60fb      	str	r3, [r7, #12]
 8010a18:	68fb      	ldr	r3, [r7, #12]
=======
 800e946:	2300      	movs	r3, #0
 800e948:	613b      	str	r3, [r7, #16]
 800e94a:	4b18      	ldr	r3, [pc, #96]	; (800e9ac <HAL_UART_MspInit+0x88>)
 800e94c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e94e:	4a17      	ldr	r2, [pc, #92]	; (800e9ac <HAL_UART_MspInit+0x88>)
 800e950:	f043 0310 	orr.w	r3, r3, #16
 800e954:	6453      	str	r3, [r2, #68]	; 0x44
 800e956:	4b15      	ldr	r3, [pc, #84]	; (800e9ac <HAL_UART_MspInit+0x88>)
 800e958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e95a:	f003 0310 	and.w	r3, r3, #16
 800e95e:	613b      	str	r3, [r7, #16]
 800e960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e962:	2300      	movs	r3, #0
 800e964:	60fb      	str	r3, [r7, #12]
 800e966:	4b11      	ldr	r3, [pc, #68]	; (800e9ac <HAL_UART_MspInit+0x88>)
 800e968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e96a:	4a10      	ldr	r2, [pc, #64]	; (800e9ac <HAL_UART_MspInit+0x88>)
 800e96c:	f043 0301 	orr.w	r3, r3, #1
 800e970:	6313      	str	r3, [r2, #48]	; 0x30
 800e972:	4b0e      	ldr	r3, [pc, #56]	; (800e9ac <HAL_UART_MspInit+0x88>)
 800e974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e976:	f003 0301 	and.w	r3, r3, #1
 800e97a:	60fb      	str	r3, [r7, #12]
 800e97c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
<<<<<<< HEAD
 8010a1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8010a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a20:	2302      	movs	r3, #2
 8010a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a24:	2300      	movs	r3, #0
 8010a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010a28:	2303      	movs	r3, #3
 8010a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8010a2c:	2307      	movs	r3, #7
 8010a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010a30:	f107 0314 	add.w	r3, r7, #20
 8010a34:	4619      	mov	r1, r3
 8010a36:	4805      	ldr	r0, [pc, #20]	; (8010a4c <HAL_UART_MspInit+0x8c>)
 8010a38:	f002 f826 	bl	8012a88 <HAL_GPIO_Init>
=======
 800e97e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e984:	2302      	movs	r3, #2
 800e986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e988:	2300      	movs	r3, #0
 800e98a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e98c:	2303      	movs	r3, #3
 800e98e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e990:	2307      	movs	r3, #7
 800e992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e994:	f107 0314 	add.w	r3, r7, #20
 800e998:	4619      	mov	r1, r3
 800e99a:	4805      	ldr	r0, [pc, #20]	; (800e9b0 <HAL_UART_MspInit+0x8c>)
 800e99c:	f002 f826 	bl	80109ec <HAL_GPIO_Init>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8010a3c:	bf00      	nop
 8010a3e:	3728      	adds	r7, #40	; 0x28
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}
 8010a44:	40011000 	.word	0x40011000
 8010a48:	40023800 	.word	0x40023800
 8010a4c:	40020000 	.word	0x40020000

08010a50 <NMI_Handler>:
=======
 800e9a0:	bf00      	nop
 800e9a2:	3728      	adds	r7, #40	; 0x28
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}
 800e9a8:	40011000 	.word	0x40011000
 800e9ac:	40023800 	.word	0x40023800
 800e9b0:	40020000 	.word	0x40020000

0800e9b4 <NMI_Handler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8010a50:	b480      	push	{r7}
 8010a52:	af00      	add	r7, sp, #0
=======
 800e9b4:	b480      	push	{r7}
 800e9b6:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8010a54:	e7fe      	b.n	8010a54 <NMI_Handler+0x4>

08010a56 <HardFault_Handler>:
=======
 800e9b8:	e7fe      	b.n	800e9b8 <NMI_Handler+0x4>

0800e9ba <HardFault_Handler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8010a56:	b480      	push	{r7}
 8010a58:	af00      	add	r7, sp, #0
=======
 800e9ba:	b480      	push	{r7}
 800e9bc:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8010a5a:	e7fe      	b.n	8010a5a <HardFault_Handler+0x4>

08010a5c <MemManage_Handler>:
=======
 800e9be:	e7fe      	b.n	800e9be <HardFault_Handler+0x4>

0800e9c0 <MemManage_Handler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8010a5c:	b480      	push	{r7}
 8010a5e:	af00      	add	r7, sp, #0
=======
 800e9c0:	b480      	push	{r7}
 800e9c2:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8010a60:	e7fe      	b.n	8010a60 <MemManage_Handler+0x4>

08010a62 <BusFault_Handler>:
=======
 800e9c4:	e7fe      	b.n	800e9c4 <MemManage_Handler+0x4>

0800e9c6 <BusFault_Handler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8010a62:	b480      	push	{r7}
 8010a64:	af00      	add	r7, sp, #0
=======
 800e9c6:	b480      	push	{r7}
 800e9c8:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8010a66:	e7fe      	b.n	8010a66 <BusFault_Handler+0x4>

08010a68 <UsageFault_Handler>:
=======
 800e9ca:	e7fe      	b.n	800e9ca <BusFault_Handler+0x4>

0800e9cc <UsageFault_Handler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8010a68:	b480      	push	{r7}
 8010a6a:	af00      	add	r7, sp, #0
=======
 800e9cc:	b480      	push	{r7}
 800e9ce:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8010a6c:	e7fe      	b.n	8010a6c <UsageFault_Handler+0x4>

08010a6e <SVC_Handler>:
=======
 800e9d0:	e7fe      	b.n	800e9d0 <UsageFault_Handler+0x4>

0800e9d2 <SVC_Handler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8010a6e:	b480      	push	{r7}
 8010a70:	af00      	add	r7, sp, #0
=======
 800e9d2:	b480      	push	{r7}
 800e9d4:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8010a72:	bf00      	nop
 8010a74:	46bd      	mov	sp, r7
 8010a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7a:	4770      	bx	lr

08010a7c <DebugMon_Handler>:
=======
 800e9d6:	bf00      	nop
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <DebugMon_Handler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8010a7c:	b480      	push	{r7}
 8010a7e:	af00      	add	r7, sp, #0
=======
 800e9e0:	b480      	push	{r7}
 800e9e2:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8010a80:	bf00      	nop
 8010a82:	46bd      	mov	sp, r7
 8010a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a88:	4770      	bx	lr

08010a8a <PendSV_Handler>:
=======
 800e9e4:	bf00      	nop
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr

0800e9ee <PendSV_Handler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8010a8a:	b480      	push	{r7}
 8010a8c:	af00      	add	r7, sp, #0
=======
 800e9ee:	b480      	push	{r7}
 800e9f0:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8010a8e:	bf00      	nop
 8010a90:	46bd      	mov	sp, r7
 8010a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a96:	4770      	bx	lr

08010a98 <SysTick_Handler>:
=======
 800e9f2:	bf00      	nop
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <SysTick_Handler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	af00      	add	r7, sp, #0
=======
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8010a9c:	f000 f9b0 	bl	8010e00 <HAL_IncTick>
=======
 800ea00:	f000 f9b0 	bl	800ed64 <HAL_IncTick>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8010aa0:	bf00      	nop
 8010aa2:	bd80      	pop	{r7, pc}

08010aa4 <FLASH_IRQHandler>:
=======
 800ea04:	bf00      	nop
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <FLASH_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
<<<<<<< HEAD
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	af00      	add	r7, sp, #0
=======
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
<<<<<<< HEAD
 8010aa8:	f001 fcb8 	bl	801241c <HAL_FLASH_IRQHandler>
=======
 800ea0c:	f001 fcb8 	bl	8010380 <HAL_FLASH_IRQHandler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
<<<<<<< HEAD
 8010aac:	bf00      	nop
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <ADC_IRQHandler>:
=======
 800ea10:	bf00      	nop
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <ADC_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
<<<<<<< HEAD
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	af00      	add	r7, sp, #0
=======
 800ea14:	b580      	push	{r7, lr}
 800ea16:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
<<<<<<< HEAD
 8010ab4:	4803      	ldr	r0, [pc, #12]	; (8010ac4 <ADC_IRQHandler+0x14>)
 8010ab6:	f000 fa28 	bl	8010f0a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8010aba:	4803      	ldr	r0, [pc, #12]	; (8010ac8 <ADC_IRQHandler+0x18>)
 8010abc:	f000 fa25 	bl	8010f0a <HAL_ADC_IRQHandler>
=======
 800ea18:	4803      	ldr	r0, [pc, #12]	; (800ea28 <ADC_IRQHandler+0x14>)
 800ea1a:	f000 fa28 	bl	800ee6e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800ea1e:	4803      	ldr	r0, [pc, #12]	; (800ea2c <ADC_IRQHandler+0x18>)
 800ea20:	f000 fa25 	bl	800ee6e <HAL_ADC_IRQHandler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
<<<<<<< HEAD
 8010ac0:	bf00      	nop
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	20019d90 	.word	0x20019d90
 8010ac8:	2000e0d4 	.word	0x2000e0d4

08010acc <TIM1_UP_TIM10_IRQHandler>:
=======
 800ea24:	bf00      	nop
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	20015c18 	.word	0x20015c18
 800ea2c:	20005114 	.word	0x20005114

0800ea30 <TIM1_UP_TIM10_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
<<<<<<< HEAD
 8010acc:	b580      	push	{r7, lr}
 8010ace:	af00      	add	r7, sp, #0
=======
 800ea30:	b580      	push	{r7, lr}
 800ea32:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
<<<<<<< HEAD
 8010ad0:	4802      	ldr	r0, [pc, #8]	; (8010adc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8010ad2:	f003 febe 	bl	8014852 <HAL_TIM_IRQHandler>
=======
 800ea34:	4802      	ldr	r0, [pc, #8]	; (800ea40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800ea36:	f003 febe 	bl	80127b6 <HAL_TIM_IRQHandler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
<<<<<<< HEAD
 8010ad6:	bf00      	nop
 8010ad8:	bd80      	pop	{r7, pc}
 8010ada:	bf00      	nop
 8010adc:	2001a2a8 	.word	0x2001a2a8

08010ae0 <TIM2_IRQHandler>:
=======
 800ea3a:	bf00      	nop
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	20016130 	.word	0x20016130

0800ea44 <TIM2_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
<<<<<<< HEAD
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	af00      	add	r7, sp, #0
=======
 800ea44:	b580      	push	{r7, lr}
 800ea46:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< HEAD
 8010ae4:	4802      	ldr	r0, [pc, #8]	; (8010af0 <TIM2_IRQHandler+0x10>)
 8010ae6:	f003 feb4 	bl	8014852 <HAL_TIM_IRQHandler>
=======
 800ea48:	4802      	ldr	r0, [pc, #8]	; (800ea54 <TIM2_IRQHandler+0x10>)
 800ea4a:	f003 feb4 	bl	80127b6 <HAL_TIM_IRQHandler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
<<<<<<< HEAD
 8010aea:	bf00      	nop
 8010aec:	bd80      	pop	{r7, pc}
 8010aee:	bf00      	nop
 8010af0:	2001a6f8 	.word	0x2001a6f8

08010af4 <TIM3_IRQHandler>:
=======
 800ea4e:	bf00      	nop
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	20016580 	.word	0x20016580

0800ea58 <TIM3_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
<<<<<<< HEAD
 8010af4:	b580      	push	{r7, lr}
 8010af6:	af00      	add	r7, sp, #0
=======
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
<<<<<<< HEAD
 8010af8:	4802      	ldr	r0, [pc, #8]	; (8010b04 <TIM3_IRQHandler+0x10>)
 8010afa:	f003 feaa 	bl	8014852 <HAL_TIM_IRQHandler>
=======
 800ea5c:	4802      	ldr	r0, [pc, #8]	; (800ea68 <TIM3_IRQHandler+0x10>)
 800ea5e:	f003 feaa 	bl	80127b6 <HAL_TIM_IRQHandler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
<<<<<<< HEAD
 8010afe:	bf00      	nop
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	20019cf0 	.word	0x20019cf0

08010b08 <TIM4_IRQHandler>:
=======
 800ea62:	bf00      	nop
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	20015b78 	.word	0x20015b78

0800ea6c <TIM4_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
<<<<<<< HEAD
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	af00      	add	r7, sp, #0
=======
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
<<<<<<< HEAD
 8010b0c:	4802      	ldr	r0, [pc, #8]	; (8010b18 <TIM4_IRQHandler+0x10>)
 8010b0e:	f003 fea0 	bl	8014852 <HAL_TIM_IRQHandler>
=======
 800ea70:	4802      	ldr	r0, [pc, #8]	; (800ea7c <TIM4_IRQHandler+0x10>)
 800ea72:	f003 fea0 	bl	80127b6 <HAL_TIM_IRQHandler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
<<<<<<< HEAD
 8010b12:	bf00      	nop
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop
 8010b18:	2000e094 	.word	0x2000e094

08010b1c <TIM8_UP_TIM13_IRQHandler>:
=======
 800ea76:	bf00      	nop
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	200050d4 	.word	0x200050d4

0800ea80 <TIM8_UP_TIM13_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
<<<<<<< HEAD
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	af00      	add	r7, sp, #0
=======
 800ea80:	b580      	push	{r7, lr}
 800ea82:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
<<<<<<< HEAD
 8010b20:	4802      	ldr	r0, [pc, #8]	; (8010b2c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8010b22:	f003 fe96 	bl	8014852 <HAL_TIM_IRQHandler>
=======
 800ea84:	4802      	ldr	r0, [pc, #8]	; (800ea90 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800ea86:	f003 fe96 	bl	80127b6 <HAL_TIM_IRQHandler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
<<<<<<< HEAD
 8010b26:	bf00      	nop
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	2000e050 	.word	0x2000e050

08010b30 <TIM8_TRG_COM_TIM14_IRQHandler>:
=======
 800ea8a:	bf00      	nop
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	20005090 	.word	0x20005090

0800ea94 <TIM8_TRG_COM_TIM14_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
<<<<<<< HEAD
 8010b30:	b580      	push	{r7, lr}
 8010b32:	af00      	add	r7, sp, #0
=======
 800ea94:	b580      	push	{r7, lr}
 800ea96:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
<<<<<<< HEAD
 8010b34:	4802      	ldr	r0, [pc, #8]	; (8010b40 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8010b36:	f003 fe8c 	bl	8014852 <HAL_TIM_IRQHandler>
=======
 800ea98:	4802      	ldr	r0, [pc, #8]	; (800eaa4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800ea9a:	f003 fe8c 	bl	80127b6 <HAL_TIM_IRQHandler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
<<<<<<< HEAD
 8010b3a:	bf00      	nop
 8010b3c:	bd80      	pop	{r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	2000e050 	.word	0x2000e050

08010b44 <TIM8_CC_IRQHandler>:
=======
 800ea9e:	bf00      	nop
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	20005090 	.word	0x20005090

0800eaa8 <TIM8_CC_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
<<<<<<< HEAD
 8010b44:	b580      	push	{r7, lr}
 8010b46:	af00      	add	r7, sp, #0
=======
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
<<<<<<< HEAD
 8010b48:	4802      	ldr	r0, [pc, #8]	; (8010b54 <TIM8_CC_IRQHandler+0x10>)
 8010b4a:	f003 fe82 	bl	8014852 <HAL_TIM_IRQHandler>
=======
 800eaac:	4802      	ldr	r0, [pc, #8]	; (800eab8 <TIM8_CC_IRQHandler+0x10>)
 800eaae:	f003 fe82 	bl	80127b6 <HAL_TIM_IRQHandler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
<<<<<<< HEAD
 8010b4e:	bf00      	nop
 8010b50:	bd80      	pop	{r7, pc}
 8010b52:	bf00      	nop
 8010b54:	2000e050 	.word	0x2000e050

08010b58 <TIM5_IRQHandler>:
=======
 800eab2:	bf00      	nop
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop
 800eab8:	20005090 	.word	0x20005090

0800eabc <TIM5_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
<<<<<<< HEAD
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	af00      	add	r7, sp, #0
=======
 800eabc:	b580      	push	{r7, lr}
 800eabe:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
<<<<<<< HEAD
 8010b5c:	4802      	ldr	r0, [pc, #8]	; (8010b68 <TIM5_IRQHandler+0x10>)
 8010b5e:	f003 fe78 	bl	8014852 <HAL_TIM_IRQHandler>
=======
 800eac0:	4802      	ldr	r0, [pc, #8]	; (800eacc <TIM5_IRQHandler+0x10>)
 800eac2:	f003 fe78 	bl	80127b6 <HAL_TIM_IRQHandler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
<<<<<<< HEAD
 8010b62:	bf00      	nop
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop
 8010b68:	20019cac 	.word	0x20019cac

08010b6c <DMA2_Stream0_IRQHandler>:
=======
 800eac6:	bf00      	nop
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	20015b34 	.word	0x20015b34

0800ead0 <DMA2_Stream0_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
<<<<<<< HEAD
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	af00      	add	r7, sp, #0
=======
 800ead0:	b580      	push	{r7, lr}
 800ead2:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< HEAD
 8010b70:	4802      	ldr	r0, [pc, #8]	; (8010b7c <DMA2_Stream0_IRQHandler+0x10>)
 8010b72:	f001 f997 	bl	8011ea4 <HAL_DMA_IRQHandler>
=======
 800ead4:	4802      	ldr	r0, [pc, #8]	; (800eae0 <DMA2_Stream0_IRQHandler+0x10>)
 800ead6:	f001 f997 	bl	800fe08 <HAL_DMA_IRQHandler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
<<<<<<< HEAD
 8010b76:	bf00      	nop
 8010b78:	bd80      	pop	{r7, pc}
 8010b7a:	bf00      	nop
 8010b7c:	2001a208 	.word	0x2001a208

08010b80 <DMA2_Stream2_IRQHandler>:
=======
 800eada:	bf00      	nop
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	20016090 	.word	0x20016090

0800eae4 <DMA2_Stream2_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
<<<<<<< HEAD
 8010b80:	b580      	push	{r7, lr}
 8010b82:	af00      	add	r7, sp, #0
=======
 800eae4:	b580      	push	{r7, lr}
 800eae6:	af00      	add	r7, sp, #0
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
<<<<<<< HEAD
 8010b84:	4802      	ldr	r0, [pc, #8]	; (8010b90 <DMA2_Stream2_IRQHandler+0x10>)
 8010b86:	f001 f98d 	bl	8011ea4 <HAL_DMA_IRQHandler>
=======
 800eae8:	4802      	ldr	r0, [pc, #8]	; (800eaf4 <DMA2_Stream2_IRQHandler+0x10>)
 800eaea:	f001 f98d 	bl	800fe08 <HAL_DMA_IRQHandler>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
<<<<<<< HEAD
 8010b8a:	bf00      	nop
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	2001a73c 	.word	0x2001a73c

08010b94 <_read>:
=======
 800eaee:	bf00      	nop
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	200165c4 	.word	0x200165c4

0800eaf8 <_read>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b086      	sub	sp, #24
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	60f8      	str	r0, [r7, #12]
 8010b9c:	60b9      	str	r1, [r7, #8]
 8010b9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	617b      	str	r3, [r7, #20]
 8010ba4:	e00a      	b.n	8010bbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010ba6:	f3af 8000 	nop.w
 8010baa:	4601      	mov	r1, r0
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	1c5a      	adds	r2, r3, #1
 8010bb0:	60ba      	str	r2, [r7, #8]
 8010bb2:	b2ca      	uxtb	r2, r1
 8010bb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	3301      	adds	r3, #1
 8010bba:	617b      	str	r3, [r7, #20]
 8010bbc:	697a      	ldr	r2, [r7, #20]
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	dbf0      	blt.n	8010ba6 <_read+0x12>
	}

return len;
 8010bc4:	687b      	ldr	r3, [r7, #4]
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3718      	adds	r7, #24
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}

08010bce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010bce:	b580      	push	{r7, lr}
 8010bd0:	b086      	sub	sp, #24
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	60f8      	str	r0, [r7, #12]
 8010bd6:	60b9      	str	r1, [r7, #8]
 8010bd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010bda:	2300      	movs	r3, #0
 8010bdc:	617b      	str	r3, [r7, #20]
 8010bde:	e009      	b.n	8010bf4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	1c5a      	adds	r2, r3, #1
 8010be4:	60ba      	str	r2, [r7, #8]
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7f8 fee1 	bl	80099b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	617b      	str	r3, [r7, #20]
 8010bf4:	697a      	ldr	r2, [r7, #20]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	dbf1      	blt.n	8010be0 <_write+0x12>
	}
	return len;
 8010bfc:	687b      	ldr	r3, [r7, #4]
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3718      	adds	r7, #24
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}

08010c06 <_close>:

int _close(int file)
{
 8010c06:	b480      	push	{r7}
 8010c08:	b083      	sub	sp, #12
 8010c0a:	af00      	add	r7, sp, #0
 8010c0c:	6078      	str	r0, [r7, #4]
	return -1;
 8010c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	370c      	adds	r7, #12
 8010c16:	46bd      	mov	sp, r7
 8010c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1c:	4770      	bx	lr

08010c1e <_fstat>:
=======
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b086      	sub	sp, #24
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eb04:	2300      	movs	r3, #0
 800eb06:	617b      	str	r3, [r7, #20]
 800eb08:	e00a      	b.n	800eb20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800eb0a:	f3af 8000 	nop.w
 800eb0e:	4601      	mov	r1, r0
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	1c5a      	adds	r2, r3, #1
 800eb14:	60ba      	str	r2, [r7, #8]
 800eb16:	b2ca      	uxtb	r2, r1
 800eb18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	617b      	str	r3, [r7, #20]
 800eb20:	697a      	ldr	r2, [r7, #20]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	dbf0      	blt.n	800eb0a <_read+0x12>
	}

return len;
 800eb28:	687b      	ldr	r3, [r7, #4]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3718      	adds	r7, #24
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}

0800eb32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b086      	sub	sp, #24
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	60f8      	str	r0, [r7, #12]
 800eb3a:	60b9      	str	r1, [r7, #8]
 800eb3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eb3e:	2300      	movs	r3, #0
 800eb40:	617b      	str	r3, [r7, #20]
 800eb42:	e009      	b.n	800eb58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	1c5a      	adds	r2, r3, #1
 800eb48:	60ba      	str	r2, [r7, #8]
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7fa ff2f 	bl	80099b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	3301      	adds	r3, #1
 800eb56:	617b      	str	r3, [r7, #20]
 800eb58:	697a      	ldr	r2, [r7, #20]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	dbf1      	blt.n	800eb44 <_write+0x12>
	}
	return len;
 800eb60:	687b      	ldr	r3, [r7, #4]
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3718      	adds	r7, #24
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}

0800eb6a <_close>:

int _close(int file)
{
 800eb6a:	b480      	push	{r7}
 800eb6c:	b083      	sub	sp, #12
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	6078      	str	r0, [r7, #4]
	return -1;
 800eb72:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	370c      	adds	r7, #12
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr

0800eb82 <_fstat>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac


int _fstat(int file, struct stat *st)
{
<<<<<<< HEAD
 8010c1e:	b480      	push	{r7}
 8010c20:	b083      	sub	sp, #12
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	6078      	str	r0, [r7, #4]
 8010c26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010c2e:	605a      	str	r2, [r3, #4]
	return 0;
 8010c30:	2300      	movs	r3, #0
}
 8010c32:	4618      	mov	r0, r3
 8010c34:	370c      	adds	r7, #12
 8010c36:	46bd      	mov	sp, r7
 8010c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3c:	4770      	bx	lr

08010c3e <_isatty>:

int _isatty(int file)
{
 8010c3e:	b480      	push	{r7}
 8010c40:	b083      	sub	sp, #12
 8010c42:	af00      	add	r7, sp, #0
 8010c44:	6078      	str	r0, [r7, #4]
	return 1;
 8010c46:	2301      	movs	r3, #1
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	370c      	adds	r7, #12
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c52:	4770      	bx	lr

08010c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010c54:	b480      	push	{r7}
 8010c56:	b085      	sub	sp, #20
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	60f8      	str	r0, [r7, #12]
 8010c5c:	60b9      	str	r1, [r7, #8]
 8010c5e:	607a      	str	r2, [r7, #4]
	return 0;
 8010c60:	2300      	movs	r3, #0
}
 8010c62:	4618      	mov	r0, r3
 8010c64:	3714      	adds	r7, #20
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr
	...

08010c70 <_sbrk>:
=======
 800eb82:	b480      	push	{r7}
 800eb84:	b083      	sub	sp, #12
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
 800eb8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eb92:	605a      	str	r2, [r3, #4]
	return 0;
 800eb94:	2300      	movs	r3, #0
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	370c      	adds	r7, #12
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba0:	4770      	bx	lr

0800eba2 <_isatty>:

int _isatty(int file)
{
 800eba2:	b480      	push	{r7}
 800eba4:	b083      	sub	sp, #12
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	6078      	str	r0, [r7, #4]
	return 1;
 800ebaa:	2301      	movs	r3, #1
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	370c      	adds	r7, #12
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr

0800ebb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b085      	sub	sp, #20
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	60f8      	str	r0, [r7, #12]
 800ebc0:	60b9      	str	r1, [r7, #8]
 800ebc2:	607a      	str	r2, [r7, #4]
	return 0;
 800ebc4:	2300      	movs	r3, #0
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3714      	adds	r7, #20
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd0:	4770      	bx	lr
	...

0800ebd4 <_sbrk>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b086      	sub	sp, #24
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
=======
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b086      	sub	sp, #24
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 8010c78:	4a14      	ldr	r2, [pc, #80]	; (8010ccc <_sbrk+0x5c>)
 8010c7a:	4b15      	ldr	r3, [pc, #84]	; (8010cd0 <_sbrk+0x60>)
 8010c7c:	1ad3      	subs	r3, r2, r3
 8010c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	613b      	str	r3, [r7, #16]
=======
 800ebdc:	4a14      	ldr	r2, [pc, #80]	; (800ec30 <_sbrk+0x5c>)
 800ebde:	4b15      	ldr	r3, [pc, #84]	; (800ec34 <_sbrk+0x60>)
 800ebe0:	1ad3      	subs	r3, r2, r3
 800ebe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	613b      	str	r3, [r7, #16]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 8010c84:	4b13      	ldr	r3, [pc, #76]	; (8010cd4 <_sbrk+0x64>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d102      	bne.n	8010c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010c8c:	4b11      	ldr	r3, [pc, #68]	; (8010cd4 <_sbrk+0x64>)
 8010c8e:	4a12      	ldr	r2, [pc, #72]	; (8010cd8 <_sbrk+0x68>)
 8010c90:	601a      	str	r2, [r3, #0]
=======
 800ebe8:	4b13      	ldr	r3, [pc, #76]	; (800ec38 <_sbrk+0x64>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d102      	bne.n	800ebf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ebf0:	4b11      	ldr	r3, [pc, #68]	; (800ec38 <_sbrk+0x64>)
 800ebf2:	4a12      	ldr	r2, [pc, #72]	; (800ec3c <_sbrk+0x68>)
 800ebf4:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 8010c92:	4b10      	ldr	r3, [pc, #64]	; (8010cd4 <_sbrk+0x64>)
 8010c94:	681a      	ldr	r2, [r3, #0]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	4413      	add	r3, r2
 8010c9a:	693a      	ldr	r2, [r7, #16]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d207      	bcs.n	8010cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010ca0:	f005 fabe 	bl	8016220 <__errno>
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	230c      	movs	r3, #12
 8010ca8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8010caa:	f04f 33ff 	mov.w	r3, #4294967295
 8010cae:	e009      	b.n	8010cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010cb0:	4b08      	ldr	r3, [pc, #32]	; (8010cd4 <_sbrk+0x64>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010cb6:	4b07      	ldr	r3, [pc, #28]	; (8010cd4 <_sbrk+0x64>)
 8010cb8:	681a      	ldr	r2, [r3, #0]
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	4a05      	ldr	r2, [pc, #20]	; (8010cd4 <_sbrk+0x64>)
 8010cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	3718      	adds	r7, #24
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}
 8010ccc:	20020000 	.word	0x20020000
 8010cd0:	00000400 	.word	0x00000400
 8010cd4:	2000dffc 	.word	0x2000dffc
 8010cd8:	2001a7e0 	.word	0x2001a7e0

08010cdc <SystemInit>:
=======
 800ebf6:	4b10      	ldr	r3, [pc, #64]	; (800ec38 <_sbrk+0x64>)
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	693a      	ldr	r2, [r7, #16]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d207      	bcs.n	800ec14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ec04:	f005 fabe 	bl	8014184 <__errno>
 800ec08:	4602      	mov	r2, r0
 800ec0a:	230c      	movs	r3, #12
 800ec0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800ec0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ec12:	e009      	b.n	800ec28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ec14:	4b08      	ldr	r3, [pc, #32]	; (800ec38 <_sbrk+0x64>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ec1a:	4b07      	ldr	r3, [pc, #28]	; (800ec38 <_sbrk+0x64>)
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	4413      	add	r3, r2
 800ec22:	4a05      	ldr	r2, [pc, #20]	; (800ec38 <_sbrk+0x64>)
 800ec24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ec26:	68fb      	ldr	r3, [r7, #12]
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3718      	adds	r7, #24
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	20020000 	.word	0x20020000
 800ec34:	00000400 	.word	0x00000400
 800ec38:	20005038 	.word	0x20005038
 800ec3c:	20016668 	.word	0x20016668

0800ec40 <SystemInit>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8010cdc:	b480      	push	{r7}
 8010cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010ce0:	4b08      	ldr	r3, [pc, #32]	; (8010d04 <SystemInit+0x28>)
 8010ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ce6:	4a07      	ldr	r2, [pc, #28]	; (8010d04 <SystemInit+0x28>)
 8010ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 800ec40:	b480      	push	{r7}
 800ec42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ec44:	4b08      	ldr	r3, [pc, #32]	; (800ec68 <SystemInit+0x28>)
 800ec46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec4a:	4a07      	ldr	r2, [pc, #28]	; (800ec68 <SystemInit+0x28>)
 800ec4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ec50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
<<<<<<< HEAD
 8010cf0:	4b04      	ldr	r3, [pc, #16]	; (8010d04 <SystemInit+0x28>)
 8010cf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010cf6:	609a      	str	r2, [r3, #8]
#endif
}
 8010cf8:	bf00      	nop
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d00:	4770      	bx	lr
 8010d02:	bf00      	nop
 8010d04:	e000ed00 	.word	0xe000ed00

08010d08 <Reset_Handler>:
=======
 800ec54:	4b04      	ldr	r3, [pc, #16]	; (800ec68 <SystemInit+0x28>)
 800ec56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ec5a:	609a      	str	r2, [r3, #8]
#endif
}
 800ec5c:	bf00      	nop
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr
 800ec66:	bf00      	nop
 800ec68:	e000ed00 	.word	0xe000ed00

0800ec6c <Reset_Handler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
<<<<<<< HEAD
 8010d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010d40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010d0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010d0e:	e003      	b.n	8010d18 <LoopCopyDataInit>

08010d10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010d10:	4b0c      	ldr	r3, [pc, #48]	; (8010d44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010d12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010d14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010d16:	3104      	adds	r1, #4

08010d18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010d18:	480b      	ldr	r0, [pc, #44]	; (8010d48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010d1a:	4b0c      	ldr	r3, [pc, #48]	; (8010d4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010d1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010d1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010d20:	d3f6      	bcc.n	8010d10 <CopyDataInit>
  ldr  r2, =_sbss
 8010d22:	4a0b      	ldr	r2, [pc, #44]	; (8010d50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010d24:	e002      	b.n	8010d2c <LoopFillZerobss>

08010d26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010d26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010d28:	f842 3b04 	str.w	r3, [r2], #4

08010d2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010d2c:	4b09      	ldr	r3, [pc, #36]	; (8010d54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010d2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010d30:	d3f9      	bcc.n	8010d26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010d32:	f7ff ffd3 	bl	8010cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010d36:	f005 fa79 	bl	801622c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010d3a:	f7fe fd89 	bl	800f850 <main>
  bx  lr    
 8010d3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010d40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010d44:	08018de0 	.word	0x08018de0
  ldr  r0, =_sdata
 8010d48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010d4c:	20000250 	.word	0x20000250
  ldr  r2, =_sbss
 8010d50:	20000250 	.word	0x20000250
  ldr  r3, = _ebss
 8010d54:	2001a7e0 	.word	0x2001a7e0

08010d58 <CAN1_RX0_IRQHandler>:
=======
 800ec6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800eca4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ec70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ec72:	e003      	b.n	800ec7c <LoopCopyDataInit>

0800ec74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ec74:	4b0c      	ldr	r3, [pc, #48]	; (800eca8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ec76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ec78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ec7a:	3104      	adds	r1, #4

0800ec7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ec7c:	480b      	ldr	r0, [pc, #44]	; (800ecac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ec7e:	4b0c      	ldr	r3, [pc, #48]	; (800ecb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ec80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ec82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ec84:	d3f6      	bcc.n	800ec74 <CopyDataInit>
  ldr  r2, =_sbss
 800ec86:	4a0b      	ldr	r2, [pc, #44]	; (800ecb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ec88:	e002      	b.n	800ec90 <LoopFillZerobss>

0800ec8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ec8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ec8c:	f842 3b04 	str.w	r3, [r2], #4

0800ec90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ec90:	4b09      	ldr	r3, [pc, #36]	; (800ecb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ec92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ec94:	d3f9      	bcc.n	800ec8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ec96:	f7ff ffd3 	bl	800ec40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ec9a:	f005 fa79 	bl	8014190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ec9e:	f7fe fd89 	bl	800d7b4 <main>
  bx  lr    
 800eca2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800eca4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800eca8:	08016d48 	.word	0x08016d48
  ldr  r0, =_sdata
 800ecac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ecb0:	20000edc 	.word	0x20000edc
  ldr  r2, =_sbss
 800ecb4:	20000ee0 	.word	0x20000ee0
  ldr  r3, = _ebss
 800ecb8:	20016668 	.word	0x20016668

0800ecbc <CAN1_RX0_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8010d58:	e7fe      	b.n	8010d58 <CAN1_RX0_IRQHandler>
	...

08010d5c <HAL_Init>:
=======
 800ecbc:	e7fe      	b.n	800ecbc <CAN1_RX0_IRQHandler>
	...

0800ecc0 <HAL_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010d60:	4b0e      	ldr	r3, [pc, #56]	; (8010d9c <HAL_Init+0x40>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	4a0d      	ldr	r2, [pc, #52]	; (8010d9c <HAL_Init+0x40>)
 8010d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010d6a:	6013      	str	r3, [r2, #0]
=======
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ecc4:	4b0e      	ldr	r3, [pc, #56]	; (800ed00 <HAL_Init+0x40>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a0d      	ldr	r2, [pc, #52]	; (800ed00 <HAL_Init+0x40>)
 800ecca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ecce:	6013      	str	r3, [r2, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8010d6c:	4b0b      	ldr	r3, [pc, #44]	; (8010d9c <HAL_Init+0x40>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4a0a      	ldr	r2, [pc, #40]	; (8010d9c <HAL_Init+0x40>)
 8010d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010d76:	6013      	str	r3, [r2, #0]
=======
 800ecd0:	4b0b      	ldr	r3, [pc, #44]	; (800ed00 <HAL_Init+0x40>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4a0a      	ldr	r2, [pc, #40]	; (800ed00 <HAL_Init+0x40>)
 800ecd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ecda:	6013      	str	r3, [r2, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8010d78:	4b08      	ldr	r3, [pc, #32]	; (8010d9c <HAL_Init+0x40>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4a07      	ldr	r2, [pc, #28]	; (8010d9c <HAL_Init+0x40>)
 8010d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010d82:	6013      	str	r3, [r2, #0]
=======
 800ecdc:	4b08      	ldr	r3, [pc, #32]	; (800ed00 <HAL_Init+0x40>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a07      	ldr	r2, [pc, #28]	; (800ed00 <HAL_Init+0x40>)
 800ece2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ece6:	6013      	str	r3, [r2, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8010d84:	2003      	movs	r0, #3
 8010d86:	f000 fed5 	bl	8011b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010d8a:	2000      	movs	r0, #0
 8010d8c:	f000 f808 	bl	8010da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010d90:	f7ff fad6 	bl	8010340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010d94:	2300      	movs	r3, #0
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	bd80      	pop	{r7, pc}
 8010d9a:	bf00      	nop
 8010d9c:	40023c00 	.word	0x40023c00

08010da0 <HAL_InitTick>:
=======
 800ece8:	2003      	movs	r0, #3
 800ecea:	f000 fed5 	bl	800fa98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ecee:	2000      	movs	r0, #0
 800ecf0:	f000 f808 	bl	800ed04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ecf4:	f7ff fad6 	bl	800e2a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ecf8:	2300      	movs	r3, #0
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	40023c00 	.word	0x40023c00

0800ed04 <HAL_InitTick>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010da8:	4b12      	ldr	r3, [pc, #72]	; (8010df4 <HAL_InitTick+0x54>)
 8010daa:	681a      	ldr	r2, [r3, #0]
 8010dac:	4b12      	ldr	r3, [pc, #72]	; (8010df8 <HAL_InitTick+0x58>)
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	4619      	mov	r1, r3
 8010db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8010dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f000 feed 	bl	8011b9e <HAL_SYSTICK_Config>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d001      	beq.n	8010dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010dca:	2301      	movs	r3, #1
 8010dcc:	e00e      	b.n	8010dec <HAL_InitTick+0x4c>
=======
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ed0c:	4b12      	ldr	r3, [pc, #72]	; (800ed58 <HAL_InitTick+0x54>)
 800ed0e:	681a      	ldr	r2, [r3, #0]
 800ed10:	4b12      	ldr	r3, [pc, #72]	; (800ed5c <HAL_InitTick+0x58>)
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	4619      	mov	r1, r3
 800ed16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ed1a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed22:	4618      	mov	r0, r3
 800ed24:	f000 feed 	bl	800fb02 <HAL_SYSTICK_Config>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d001      	beq.n	800ed32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	e00e      	b.n	800ed50 <HAL_InitTick+0x4c>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2b0f      	cmp	r3, #15
 8010dd2:	d80a      	bhi.n	8010dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	6879      	ldr	r1, [r7, #4]
 8010dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8010ddc:	f000 feb5 	bl	8011b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010de0:	4a06      	ldr	r2, [pc, #24]	; (8010dfc <HAL_InitTick+0x5c>)
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6013      	str	r3, [r2, #0]
=======
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2b0f      	cmp	r3, #15
 800ed36:	d80a      	bhi.n	800ed4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ed38:	2200      	movs	r2, #0
 800ed3a:	6879      	ldr	r1, [r7, #4]
 800ed3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed40:	f000 feb5 	bl	800faae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ed44:	4a06      	ldr	r2, [pc, #24]	; (800ed60 <HAL_InitTick+0x5c>)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6013      	str	r3, [r2, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8010de6:	2300      	movs	r3, #0
 8010de8:	e000      	b.n	8010dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010dea:	2301      	movs	r3, #1
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3708      	adds	r7, #8
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}
 8010df4:	20000074 	.word	0x20000074
 8010df8:	2000007c 	.word	0x2000007c
 8010dfc:	20000078 	.word	0x20000078

08010e00 <HAL_IncTick>:
=======
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	e000      	b.n	800ed50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ed4e:	2301      	movs	r3, #1
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3708      	adds	r7, #8
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	20000d00 	.word	0x20000d00
 800ed5c:	20000d08 	.word	0x20000d08
 800ed60:	20000d04 	.word	0x20000d04

0800ed64 <HAL_IncTick>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8010e00:	b480      	push	{r7}
 8010e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010e04:	4b06      	ldr	r3, [pc, #24]	; (8010e20 <HAL_IncTick+0x20>)
 8010e06:	781b      	ldrb	r3, [r3, #0]
 8010e08:	461a      	mov	r2, r3
 8010e0a:	4b06      	ldr	r3, [pc, #24]	; (8010e24 <HAL_IncTick+0x24>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	4413      	add	r3, r2
 8010e10:	4a04      	ldr	r2, [pc, #16]	; (8010e24 <HAL_IncTick+0x24>)
 8010e12:	6013      	str	r3, [r2, #0]
}
 8010e14:	bf00      	nop
 8010e16:	46bd      	mov	sp, r7
 8010e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1c:	4770      	bx	lr
 8010e1e:	bf00      	nop
 8010e20:	2000007c 	.word	0x2000007c
 8010e24:	2001a7b8 	.word	0x2001a7b8

08010e28 <HAL_GetTick>:
=======
 800ed64:	b480      	push	{r7}
 800ed66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ed68:	4b06      	ldr	r3, [pc, #24]	; (800ed84 <HAL_IncTick+0x20>)
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	4b06      	ldr	r3, [pc, #24]	; (800ed88 <HAL_IncTick+0x24>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	4413      	add	r3, r2
 800ed74:	4a04      	ldr	r2, [pc, #16]	; (800ed88 <HAL_IncTick+0x24>)
 800ed76:	6013      	str	r3, [r2, #0]
}
 800ed78:	bf00      	nop
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr
 800ed82:	bf00      	nop
 800ed84:	20000d08 	.word	0x20000d08
 800ed88:	20016640 	.word	0x20016640

0800ed8c <HAL_GetTick>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8010e28:	b480      	push	{r7}
 8010e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8010e2c:	4b03      	ldr	r3, [pc, #12]	; (8010e3c <HAL_GetTick+0x14>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	46bd      	mov	sp, r7
 8010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e38:	4770      	bx	lr
 8010e3a:	bf00      	nop
 8010e3c:	2001a7b8 	.word	0x2001a7b8

08010e40 <HAL_Delay>:
=======
 800ed8c:	b480      	push	{r7}
 800ed8e:	af00      	add	r7, sp, #0
  return uwTick;
 800ed90:	4b03      	ldr	r3, [pc, #12]	; (800eda0 <HAL_GetTick+0x14>)
 800ed92:	681b      	ldr	r3, [r3, #0]
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr
 800ed9e:	bf00      	nop
 800eda0:	20016640 	.word	0x20016640

0800eda4 <HAL_Delay>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b084      	sub	sp, #16
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010e48:	f7ff ffee 	bl	8010e28 <HAL_GetTick>
 8010e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e58:	d005      	beq.n	8010e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010e5a:	4b09      	ldr	r3, [pc, #36]	; (8010e80 <HAL_Delay+0x40>)
 8010e5c:	781b      	ldrb	r3, [r3, #0]
 8010e5e:	461a      	mov	r2, r3
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	4413      	add	r3, r2
 8010e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010e66:	bf00      	nop
 8010e68:	f7ff ffde 	bl	8010e28 <HAL_GetTick>
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	1ad3      	subs	r3, r2, r3
 8010e72:	68fa      	ldr	r2, [r7, #12]
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d8f7      	bhi.n	8010e68 <HAL_Delay+0x28>
  {
  }
}
 8010e78:	bf00      	nop
 8010e7a:	3710      	adds	r7, #16
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}
 8010e80:	2000007c 	.word	0x2000007c

08010e84 <HAL_ADC_Init>:
=======
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800edac:	f7ff ffee 	bl	800ed8c <HAL_GetTick>
 800edb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edbc:	d005      	beq.n	800edca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800edbe:	4b09      	ldr	r3, [pc, #36]	; (800ede4 <HAL_Delay+0x40>)
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	461a      	mov	r2, r3
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	4413      	add	r3, r2
 800edc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800edca:	bf00      	nop
 800edcc:	f7ff ffde 	bl	800ed8c <HAL_GetTick>
 800edd0:	4602      	mov	r2, r0
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	1ad3      	subs	r3, r2, r3
 800edd6:	68fa      	ldr	r2, [r7, #12]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d8f7      	bhi.n	800edcc <HAL_Delay+0x28>
  {
  }
}
 800eddc:	bf00      	nop
 800edde:	3710      	adds	r7, #16
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	20000d08 	.word	0x20000d08

0800ede8 <HAL_ADC_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d101      	bne.n	8010e9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8010e96:	2301      	movs	r3, #1
 8010e98:	e033      	b.n	8010f02 <HAL_ADC_Init+0x7e>
=======
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800edf0:	2300      	movs	r3, #0
 800edf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d101      	bne.n	800edfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800edfa:	2301      	movs	r3, #1
 800edfc:	e033      	b.n	800ee66 <HAL_ADC_Init+0x7e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d109      	bne.n	8010eb6 <HAL_ADC_Init+0x32>
=======
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d109      	bne.n	800ee1a <HAL_ADC_Init+0x32>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f7ff fa7a 	bl	801039c <HAL_ADC_MspInit>
=======
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f7ff fa7a 	bl	800e300 <HAL_ADC_MspInit>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2200      	movs	r2, #0
 800ee16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< HEAD
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eba:	f003 0310 	and.w	r3, r3, #16
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d118      	bne.n	8010ef4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ec6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010eca:	f023 0302 	bic.w	r3, r3, #2
 8010ece:	f043 0202 	orr.w	r2, r3, #2
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee1e:	f003 0310 	and.w	r3, r3, #16
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d118      	bne.n	800ee58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ee2e:	f023 0302 	bic.w	r3, r3, #2
 800ee32:	f043 0202 	orr.w	r2, r3, #2
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< HEAD
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f000 fbd4 	bl	8011684 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2200      	movs	r2, #0
 8010ee0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee6:	f023 0303 	bic.w	r3, r3, #3
 8010eea:	f043 0201 	orr.w	r2, r3, #1
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8010ef2:	e001      	b.n	8010ef8 <HAL_ADC_Init+0x74>
=======
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f000 fbd4 	bl	800f5e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2200      	movs	r2, #0
 800ee44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee4a:	f023 0303 	bic.w	r3, r3, #3
 800ee4e:	f043 0201 	orr.w	r2, r3, #1
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	641a      	str	r2, [r3, #64]	; 0x40
 800ee56:	e001      	b.n	800ee5c <HAL_ADC_Init+0x74>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	73fb      	strb	r3, [r7, #15]
=======
 800ee58:	2301      	movs	r3, #1
 800ee5a:	73fb      	strb	r3, [r7, #15]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2200      	movs	r2, #0
 8010efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8010f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3710      	adds	r7, #16
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}

08010f0a <HAL_ADC_IRQHandler>:
=======
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800ee64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}

0800ee6e <HAL_ADC_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8010f0a:	b580      	push	{r7, lr}
 8010f0c:	b084      	sub	sp, #16
 8010f0e:	af00      	add	r7, sp, #0
 8010f10:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8010f12:	2300      	movs	r3, #0
 8010f14:	60fb      	str	r3, [r7, #12]
 8010f16:	2300      	movs	r3, #0
 8010f18:	60bb      	str	r3, [r7, #8]
=======
 800ee6e:	b580      	push	{r7, lr}
 800ee70:	b084      	sub	sp, #16
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800ee76:	2300      	movs	r3, #0
 800ee78:	60fb      	str	r3, [r7, #12]
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	60bb      	str	r3, [r7, #8]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
<<<<<<< HEAD
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	f003 0302 	and.w	r3, r3, #2
 8010f24:	2b02      	cmp	r3, #2
 8010f26:	bf0c      	ite	eq
 8010f28:	2301      	moveq	r3, #1
 8010f2a:	2300      	movne	r3, #0
 8010f2c:	b2db      	uxtb	r3, r3
 8010f2e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	685b      	ldr	r3, [r3, #4]
 8010f36:	f003 0320 	and.w	r3, r3, #32
 8010f3a:	2b20      	cmp	r3, #32
 8010f3c:	bf0c      	ite	eq
 8010f3e:	2301      	moveq	r3, #1
 8010f40:	2300      	movne	r3, #0
 8010f42:	b2db      	uxtb	r3, r3
 8010f44:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d049      	beq.n	8010fe0 <HAL_ADC_IRQHandler+0xd6>
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d046      	beq.n	8010fe0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f56:	f003 0310 	and.w	r3, r3, #16
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d105      	bne.n	8010f6a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f003 0302 	and.w	r3, r3, #2
 800ee88:	2b02      	cmp	r3, #2
 800ee8a:	bf0c      	ite	eq
 800ee8c:	2301      	moveq	r3, #1
 800ee8e:	2300      	movne	r3, #0
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	f003 0320 	and.w	r3, r3, #32
 800ee9e:	2b20      	cmp	r3, #32
 800eea0:	bf0c      	ite	eq
 800eea2:	2301      	moveq	r3, #1
 800eea4:	2300      	movne	r3, #0
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d049      	beq.n	800ef44 <HAL_ADC_IRQHandler+0xd6>
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d046      	beq.n	800ef44 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeba:	f003 0310 	and.w	r3, r3, #16
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d105      	bne.n	800eece <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eec6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< HEAD
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	689b      	ldr	r3, [r3, #8]
 8010f70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d12b      	bne.n	8010fd0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d127      	bne.n	8010fd0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f86:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d006      	beq.n	8010f9c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	689b      	ldr	r3, [r3, #8]
 8010f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d119      	bne.n	8010fd0 <HAL_ADC_IRQHandler+0xc6>
=======
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	689b      	ldr	r3, [r3, #8]
 800eed4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d12b      	bne.n	800ef34 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d127      	bne.n	800ef34 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d006      	beq.n	800ef00 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	689b      	ldr	r3, [r3, #8]
 800eef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d119      	bne.n	800ef34 <HAL_ADC_IRQHandler+0xc6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
<<<<<<< HEAD
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	685a      	ldr	r2, [r3, #4]
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	f022 0220 	bic.w	r2, r2, #32
 8010faa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d105      	bne.n	8010fd0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fc8:	f043 0201 	orr.w	r2, r3, #1
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	685a      	ldr	r2, [r3, #4]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f022 0220 	bic.w	r2, r2, #32
 800ef0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d105      	bne.n	800ef34 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef2c:	f043 0201 	orr.w	r2, r3, #1
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f7fd fde9 	bl	800eba8 <HAL_ADC_ConvCpltCallback>
=======
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f7fd fdef 	bl	800cb18 <HAL_ADC_ConvCpltCallback>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
<<<<<<< HEAD
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	f06f 0212 	mvn.w	r2, #18
 8010fde:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f003 0304 	and.w	r3, r3, #4
 8010fea:	2b04      	cmp	r3, #4
 8010fec:	bf0c      	ite	eq
 8010fee:	2301      	moveq	r3, #1
 8010ff0:	2300      	movne	r3, #0
 8010ff2:	b2db      	uxtb	r3, r3
 8010ff4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	685b      	ldr	r3, [r3, #4]
 8010ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011000:	2b80      	cmp	r3, #128	; 0x80
 8011002:	bf0c      	ite	eq
 8011004:	2301      	moveq	r3, #1
 8011006:	2300      	movne	r3, #0
 8011008:	b2db      	uxtb	r3, r3
 801100a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d057      	beq.n	80110c2 <HAL_ADC_IRQHandler+0x1b8>
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d054      	beq.n	80110c2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801101c:	f003 0310 	and.w	r3, r3, #16
 8011020:	2b00      	cmp	r3, #0
 8011022:	d105      	bne.n	8011030 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011028:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f06f 0212 	mvn.w	r2, #18
 800ef42:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f003 0304 	and.w	r3, r3, #4
 800ef4e:	2b04      	cmp	r3, #4
 800ef50:	bf0c      	ite	eq
 800ef52:	2301      	moveq	r3, #1
 800ef54:	2300      	movne	r3, #0
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	685b      	ldr	r3, [r3, #4]
 800ef60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef64:	2b80      	cmp	r3, #128	; 0x80
 800ef66:	bf0c      	ite	eq
 800ef68:	2301      	moveq	r3, #1
 800ef6a:	2300      	movne	r3, #0
 800ef6c:	b2db      	uxtb	r3, r3
 800ef6e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d057      	beq.n	800f026 <HAL_ADC_IRQHandler+0x1b8>
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d054      	beq.n	800f026 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef80:	f003 0310 	and.w	r3, r3, #16
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d105      	bne.n	800ef94 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
<<<<<<< HEAD
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	689b      	ldr	r3, [r3, #8]
 8011036:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 801103a:	2b00      	cmp	r3, #0
 801103c:	d139      	bne.n	80110b2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011044:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8011048:	2b00      	cmp	r3, #0
 801104a:	d006      	beq.n	801105a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	689b      	ldr	r3, [r3, #8]
 8011052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8011056:	2b00      	cmp	r3, #0
 8011058:	d12b      	bne.n	80110b2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	685b      	ldr	r3, [r3, #4]
 8011060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8011064:	2b00      	cmp	r3, #0
 8011066:	d124      	bne.n	80110b2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	689b      	ldr	r3, [r3, #8]
 801106e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8011072:	2b00      	cmp	r3, #0
 8011074:	d11d      	bne.n	80110b2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 801107a:	2b00      	cmp	r3, #0
 801107c:	d119      	bne.n	80110b2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	685a      	ldr	r2, [r3, #4]
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801108c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011092:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801109e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d105      	bne.n	80110b2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110aa:	f043 0201 	orr.w	r2, r3, #1
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	689b      	ldr	r3, [r3, #8]
 800ef9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d139      	bne.n	800f016 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efa8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800efac:	2b00      	cmp	r3, #0
 800efae:	d006      	beq.n	800efbe <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	689b      	ldr	r3, [r3, #8]
 800efb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d12b      	bne.n	800f016 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	685b      	ldr	r3, [r3, #4]
 800efc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d124      	bne.n	800f016 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	689b      	ldr	r3, [r3, #8]
 800efd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d11d      	bne.n	800f016 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d119      	bne.n	800f016 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	685a      	ldr	r2, [r3, #4]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eff0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eff6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f006:	2b00      	cmp	r3, #0
 800f008:	d105      	bne.n	800f016 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f00e:	f043 0201 	orr.w	r2, r3, #1
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
<<<<<<< HEAD
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f000 fc64 	bl	8011980 <HAL_ADCEx_InjectedConvCpltCallback>
=======
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f000 fc64 	bl	800f8e4 <HAL_ADCEx_InjectedConvCpltCallback>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
<<<<<<< HEAD
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f06f 020c 	mvn.w	r2, #12
 80110c0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	f003 0301 	and.w	r3, r3, #1
 80110cc:	2b01      	cmp	r3, #1
 80110ce:	bf0c      	ite	eq
 80110d0:	2301      	moveq	r3, #1
 80110d2:	2300      	movne	r3, #0
 80110d4:	b2db      	uxtb	r3, r3
 80110d6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110e2:	2b40      	cmp	r3, #64	; 0x40
 80110e4:	bf0c      	ite	eq
 80110e6:	2301      	moveq	r3, #1
 80110e8:	2300      	movne	r3, #0
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d017      	beq.n	8011124 <HAL_ADC_IRQHandler+0x21a>
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d014      	beq.n	8011124 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f003 0301 	and.w	r3, r3, #1
 8011104:	2b01      	cmp	r3, #1
 8011106:	d10d      	bne.n	8011124 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801110c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f06f 020c 	mvn.w	r2, #12
 800f024:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f003 0301 	and.w	r3, r3, #1
 800f030:	2b01      	cmp	r3, #1
 800f032:	bf0c      	ite	eq
 800f034:	2301      	moveq	r3, #1
 800f036:	2300      	movne	r3, #0
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f046:	2b40      	cmp	r3, #64	; 0x40
 800f048:	bf0c      	ite	eq
 800f04a:	2301      	moveq	r3, #1
 800f04c:	2300      	movne	r3, #0
 800f04e:	b2db      	uxtb	r3, r3
 800f050:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d017      	beq.n	800f088 <HAL_ADC_IRQHandler+0x21a>
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d014      	beq.n	800f088 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f003 0301 	and.w	r3, r3, #1
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d10d      	bne.n	800f088 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f070:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
<<<<<<< HEAD
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f000 f97f 	bl	8011418 <HAL_ADC_LevelOutOfWindowCallback>
=======
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f000 f97f 	bl	800f37c <HAL_ADC_LevelOutOfWindowCallback>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
<<<<<<< HEAD
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	f06f 0201 	mvn.w	r2, #1
 8011122:	601a      	str	r2, [r3, #0]
=======
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f06f 0201 	mvn.w	r2, #1
 800f086:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
<<<<<<< HEAD
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	f003 0320 	and.w	r3, r3, #32
 801112e:	2b20      	cmp	r3, #32
 8011130:	bf0c      	ite	eq
 8011132:	2301      	moveq	r3, #1
 8011134:	2300      	movne	r3, #0
 8011136:	b2db      	uxtb	r3, r3
 8011138:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	685b      	ldr	r3, [r3, #4]
 8011140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011148:	bf0c      	ite	eq
 801114a:	2301      	moveq	r3, #1
 801114c:	2300      	movne	r3, #0
 801114e:	b2db      	uxtb	r3, r3
 8011150:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d015      	beq.n	8011184 <HAL_ADC_IRQHandler+0x27a>
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d012      	beq.n	8011184 <HAL_ADC_IRQHandler+0x27a>
=======
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f003 0320 	and.w	r3, r3, #32
 800f092:	2b20      	cmp	r3, #32
 800f094:	bf0c      	ite	eq
 800f096:	2301      	moveq	r3, #1
 800f098:	2300      	movne	r3, #0
 800f09a:	b2db      	uxtb	r3, r3
 800f09c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f0a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f0ac:	bf0c      	ite	eq
 800f0ae:	2301      	moveq	r3, #1
 800f0b0:	2300      	movne	r3, #0
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d015      	beq.n	800f0e8 <HAL_ADC_IRQHandler+0x27a>
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d012      	beq.n	800f0e8 <HAL_ADC_IRQHandler+0x27a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
<<<<<<< HEAD
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011162:	f043 0202 	orr.w	r2, r3, #2
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	f06f 0220 	mvn.w	r2, #32
 8011172:	601a      	str	r2, [r3, #0]
=======
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0c6:	f043 0202 	orr.w	r2, r3, #2
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	f06f 0220 	mvn.w	r2, #32
 800f0d6:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f000 f959 	bl	801142c <HAL_ADC_ErrorCallback>
=======
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f000 f959 	bl	800f390 <HAL_ADC_ErrorCallback>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
<<<<<<< HEAD
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	f06f 0220 	mvn.w	r2, #32
 8011182:	601a      	str	r2, [r3, #0]
  }
}
 8011184:	bf00      	nop
 8011186:	3710      	adds	r7, #16
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <HAL_ADC_Start_DMA>:
=======
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f06f 0220 	mvn.w	r2, #32
 800f0e6:	601a      	str	r2, [r3, #0]
  }
}
 800f0e8:	bf00      	nop
 800f0ea:	3710      	adds	r7, #16
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <HAL_ADC_Start_DMA>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
<<<<<<< HEAD
 801118c:	b580      	push	{r7, lr}
 801118e:	b086      	sub	sp, #24
 8011190:	af00      	add	r7, sp, #0
 8011192:	60f8      	str	r0, [r7, #12]
 8011194:	60b9      	str	r1, [r7, #8]
 8011196:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8011198:	2300      	movs	r3, #0
 801119a:	613b      	str	r3, [r7, #16]
=======
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b086      	sub	sp, #24
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	613b      	str	r3, [r7, #16]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80111a2:	2b01      	cmp	r3, #1
 80111a4:	d101      	bne.n	80111aa <HAL_ADC_Start_DMA+0x1e>
 80111a6:	2302      	movs	r3, #2
 80111a8:	e0cc      	b.n	8011344 <HAL_ADC_Start_DMA+0x1b8>
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	2201      	movs	r2, #1
 80111ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f106:	2b01      	cmp	r3, #1
 800f108:	d101      	bne.n	800f10e <HAL_ADC_Start_DMA+0x1e>
 800f10a:	2302      	movs	r3, #2
 800f10c:	e0cc      	b.n	800f2a8 <HAL_ADC_Start_DMA+0x1b8>
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2201      	movs	r2, #1
 800f112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
<<<<<<< HEAD
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	689b      	ldr	r3, [r3, #8]
 80111b8:	f003 0301 	and.w	r3, r3, #1
 80111bc:	2b01      	cmp	r3, #1
 80111be:	d018      	beq.n	80111f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	689a      	ldr	r2, [r3, #8]
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	f042 0201 	orr.w	r2, r2, #1
 80111ce:	609a      	str	r2, [r3, #8]
=======
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	689b      	ldr	r3, [r3, #8]
 800f11c:	f003 0301 	and.w	r3, r3, #1
 800f120:	2b01      	cmp	r3, #1
 800f122:	d018      	beq.n	800f156 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	689a      	ldr	r2, [r3, #8]
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f042 0201 	orr.w	r2, r2, #1
 800f132:	609a      	str	r2, [r3, #8]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 80111d0:	4b5e      	ldr	r3, [pc, #376]	; (801134c <HAL_ADC_Start_DMA+0x1c0>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	4a5e      	ldr	r2, [pc, #376]	; (8011350 <HAL_ADC_Start_DMA+0x1c4>)
 80111d6:	fba2 2303 	umull	r2, r3, r2, r3
 80111da:	0c9a      	lsrs	r2, r3, #18
 80111dc:	4613      	mov	r3, r2
 80111de:	005b      	lsls	r3, r3, #1
 80111e0:	4413      	add	r3, r2
 80111e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80111e4:	e002      	b.n	80111ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80111e6:	693b      	ldr	r3, [r7, #16]
 80111e8:	3b01      	subs	r3, #1
 80111ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d1f9      	bne.n	80111e6 <HAL_ADC_Start_DMA+0x5a>
=======
 800f134:	4b5e      	ldr	r3, [pc, #376]	; (800f2b0 <HAL_ADC_Start_DMA+0x1c0>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	4a5e      	ldr	r2, [pc, #376]	; (800f2b4 <HAL_ADC_Start_DMA+0x1c4>)
 800f13a:	fba2 2303 	umull	r2, r3, r2, r3
 800f13e:	0c9a      	lsrs	r2, r3, #18
 800f140:	4613      	mov	r3, r2
 800f142:	005b      	lsls	r3, r3, #1
 800f144:	4413      	add	r3, r2
 800f146:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800f148:	e002      	b.n	800f150 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	3b01      	subs	r3, #1
 800f14e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d1f9      	bne.n	800f14a <HAL_ADC_Start_DMA+0x5a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< HEAD
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	689b      	ldr	r3, [r3, #8]
 80111f8:	f003 0301 	and.w	r3, r3, #1
 80111fc:	2b01      	cmp	r3, #1
 80111fe:	f040 80a0 	bne.w	8011342 <HAL_ADC_Start_DMA+0x1b6>
=======
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	689b      	ldr	r3, [r3, #8]
 800f15c:	f003 0301 	and.w	r3, r3, #1
 800f160:	2b01      	cmp	r3, #1
 800f162:	f040 80a0 	bne.w	800f2a6 <HAL_ADC_Start_DMA+0x1b6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011206:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801120a:	f023 0301 	bic.w	r3, r3, #1
 801120e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f16a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800f16e:	f023 0301 	bic.w	r3, r3, #1
 800f172:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< HEAD
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	685b      	ldr	r3, [r3, #4]
 801121c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011220:	2b00      	cmp	r3, #0
 8011222:	d007      	beq.n	8011234 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011228:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801122c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f184:	2b00      	cmp	r3, #0
 800f186:	d007      	beq.n	800f198 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f18c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800f190:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801123c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011240:	d106      	bne.n	8011250 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011246:	f023 0206 	bic.w	r2, r3, #6
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	645a      	str	r2, [r3, #68]	; 0x44
 801124e:	e002      	b.n	8011256 <HAL_ADC_Start_DMA+0xca>
=======
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f19c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f1a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1a4:	d106      	bne.n	800f1b4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1aa:	f023 0206 	bic.w	r2, r3, #6
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	645a      	str	r2, [r3, #68]	; 0x44
 800f1b2:	e002      	b.n	800f1ba <HAL_ADC_Start_DMA+0xca>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	2200      	movs	r2, #0
 8011254:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
<<<<<<< HEAD
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	2200      	movs	r2, #0
 801125a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 801125e:	4b3d      	ldr	r3, [pc, #244]	; (8011354 <HAL_ADC_Start_DMA+0x1c8>)
 8011260:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011266:	4a3c      	ldr	r2, [pc, #240]	; (8011358 <HAL_ADC_Start_DMA+0x1cc>)
 8011268:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801126e:	4a3b      	ldr	r2, [pc, #236]	; (801135c <HAL_ADC_Start_DMA+0x1d0>)
 8011270:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011276:	4a3a      	ldr	r2, [pc, #232]	; (8011360 <HAL_ADC_Start_DMA+0x1d4>)
 8011278:	64da      	str	r2, [r3, #76]	; 0x4c
=======
 800f1c2:	4b3d      	ldr	r3, [pc, #244]	; (800f2b8 <HAL_ADC_Start_DMA+0x1c8>)
 800f1c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ca:	4a3c      	ldr	r2, [pc, #240]	; (800f2bc <HAL_ADC_Start_DMA+0x1cc>)
 800f1cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1d2:	4a3b      	ldr	r2, [pc, #236]	; (800f2c0 <HAL_ADC_Start_DMA+0x1d0>)
 800f1d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1da:	4a3a      	ldr	r2, [pc, #232]	; (800f2c4 <HAL_ADC_Start_DMA+0x1d4>)
 800f1dc:	64da      	str	r2, [r3, #76]	; 0x4c
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
<<<<<<< HEAD
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8011282:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	685a      	ldr	r2, [r3, #4]
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8011292:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	689a      	ldr	r2, [r3, #8]
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80112a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	334c      	adds	r3, #76	; 0x4c
 80112ae:	4619      	mov	r1, r3
 80112b0:	68ba      	ldr	r2, [r7, #8]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	f000 fd2e 	bl	8011d14 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	f003 031f 	and.w	r3, r3, #31
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d12a      	bne.n	801131a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	4a26      	ldr	r2, [pc, #152]	; (8011364 <HAL_ADC_Start_DMA+0x1d8>)
 80112ca:	4293      	cmp	r3, r2
 80112cc:	d015      	beq.n	80112fa <HAL_ADC_Start_DMA+0x16e>
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	4a25      	ldr	r2, [pc, #148]	; (8011368 <HAL_ADC_Start_DMA+0x1dc>)
 80112d4:	4293      	cmp	r3, r2
 80112d6:	d105      	bne.n	80112e4 <HAL_ADC_Start_DMA+0x158>
 80112d8:	4b1e      	ldr	r3, [pc, #120]	; (8011354 <HAL_ADC_Start_DMA+0x1c8>)
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	f003 031f 	and.w	r3, r3, #31
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d00a      	beq.n	80112fa <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	4a20      	ldr	r2, [pc, #128]	; (801136c <HAL_ADC_Start_DMA+0x1e0>)
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d129      	bne.n	8011342 <HAL_ADC_Start_DMA+0x1b6>
 80112ee:	4b19      	ldr	r3, [pc, #100]	; (8011354 <HAL_ADC_Start_DMA+0x1c8>)
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	f003 031f 	and.w	r3, r3, #31
 80112f6:	2b0f      	cmp	r3, #15
 80112f8:	d823      	bhi.n	8011342 <HAL_ADC_Start_DMA+0x1b6>
=======
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800f1e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	685a      	ldr	r2, [r3, #4]
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f1f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	689a      	ldr	r2, [r3, #8]
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f206:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	334c      	adds	r3, #76	; 0x4c
 800f212:	4619      	mov	r1, r3
 800f214:	68ba      	ldr	r2, [r7, #8]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f000 fd2e 	bl	800fc78 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	f003 031f 	and.w	r3, r3, #31
 800f224:	2b00      	cmp	r3, #0
 800f226:	d12a      	bne.n	800f27e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4a26      	ldr	r2, [pc, #152]	; (800f2c8 <HAL_ADC_Start_DMA+0x1d8>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d015      	beq.n	800f25e <HAL_ADC_Start_DMA+0x16e>
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	4a25      	ldr	r2, [pc, #148]	; (800f2cc <HAL_ADC_Start_DMA+0x1dc>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d105      	bne.n	800f248 <HAL_ADC_Start_DMA+0x158>
 800f23c:	4b1e      	ldr	r3, [pc, #120]	; (800f2b8 <HAL_ADC_Start_DMA+0x1c8>)
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	f003 031f 	and.w	r3, r3, #31
 800f244:	2b00      	cmp	r3, #0
 800f246:	d00a      	beq.n	800f25e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4a20      	ldr	r2, [pc, #128]	; (800f2d0 <HAL_ADC_Start_DMA+0x1e0>)
 800f24e:	4293      	cmp	r3, r2
 800f250:	d129      	bne.n	800f2a6 <HAL_ADC_Start_DMA+0x1b6>
 800f252:	4b19      	ldr	r3, [pc, #100]	; (800f2b8 <HAL_ADC_Start_DMA+0x1c8>)
 800f254:	685b      	ldr	r3, [r3, #4]
 800f256:	f003 031f 	and.w	r3, r3, #31
 800f25a:	2b0f      	cmp	r3, #15
 800f25c:	d823      	bhi.n	800f2a6 <HAL_ADC_Start_DMA+0x1b6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
<<<<<<< HEAD
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	689b      	ldr	r3, [r3, #8]
 8011300:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011304:	2b00      	cmp	r3, #0
 8011306:	d11c      	bne.n	8011342 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	689a      	ldr	r2, [r3, #8]
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011316:	609a      	str	r2, [r3, #8]
 8011318:	e013      	b.n	8011342 <HAL_ADC_Start_DMA+0x1b6>
=======
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	689b      	ldr	r3, [r3, #8]
 800f264:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d11c      	bne.n	800f2a6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	689a      	ldr	r2, [r3, #8]
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f27a:	609a      	str	r2, [r3, #8]
 800f27c:	e013      	b.n	800f2a6 <HAL_ADC_Start_DMA+0x1b6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
<<<<<<< HEAD
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	4a11      	ldr	r2, [pc, #68]	; (8011364 <HAL_ADC_Start_DMA+0x1d8>)
 8011320:	4293      	cmp	r3, r2
 8011322:	d10e      	bne.n	8011342 <HAL_ADC_Start_DMA+0x1b6>
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	689b      	ldr	r3, [r3, #8]
 801132a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801132e:	2b00      	cmp	r3, #0
 8011330:	d107      	bne.n	8011342 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	689a      	ldr	r2, [r3, #8]
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011340:	609a      	str	r2, [r3, #8]
=======
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	4a11      	ldr	r2, [pc, #68]	; (800f2c8 <HAL_ADC_Start_DMA+0x1d8>)
 800f284:	4293      	cmp	r3, r2
 800f286:	d10e      	bne.n	800f2a6 <HAL_ADC_Start_DMA+0x1b6>
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	689b      	ldr	r3, [r3, #8]
 800f28e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f292:	2b00      	cmp	r3, #0
 800f294:	d107      	bne.n	800f2a6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	689a      	ldr	r2, [r3, #8]
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f2a4:	609a      	str	r2, [r3, #8]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8011342:	2300      	movs	r3, #0
}
 8011344:	4618      	mov	r0, r3
 8011346:	3718      	adds	r7, #24
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}
 801134c:	20000074 	.word	0x20000074
 8011350:	431bde83 	.word	0x431bde83
 8011354:	40012300 	.word	0x40012300
 8011358:	0801187d 	.word	0x0801187d
 801135c:	08011937 	.word	0x08011937
 8011360:	08011953 	.word	0x08011953
 8011364:	40012000 	.word	0x40012000
 8011368:	40012100 	.word	0x40012100
 801136c:	40012200 	.word	0x40012200

08011370 <HAL_ADC_Stop_DMA>:
=======
 800f2a6:	2300      	movs	r3, #0
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3718      	adds	r7, #24
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	20000d00 	.word	0x20000d00
 800f2b4:	431bde83 	.word	0x431bde83
 800f2b8:	40012300 	.word	0x40012300
 800f2bc:	0800f7e1 	.word	0x0800f7e1
 800f2c0:	0800f89b 	.word	0x0800f89b
 800f2c4:	0800f8b7 	.word	0x0800f8b7
 800f2c8:	40012000 	.word	0x40012000
 800f2cc:	40012100 	.word	0x40012100
 800f2d0:	40012200 	.word	0x40012200

0800f2d4 <HAL_ADC_Stop_DMA>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8011370:	b580      	push	{r7, lr}
 8011372:	b084      	sub	sp, #16
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011378:	2300      	movs	r3, #0
 801137a:	73fb      	strb	r3, [r7, #15]
=======
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b084      	sub	sp, #16
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	73fb      	strb	r3, [r7, #15]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011382:	2b01      	cmp	r3, #1
 8011384:	d101      	bne.n	801138a <HAL_ADC_Stop_DMA+0x1a>
 8011386:	2302      	movs	r3, #2
 8011388:	e038      	b.n	80113fc <HAL_ADC_Stop_DMA+0x8c>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2201      	movs	r2, #1
 801138e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d101      	bne.n	800f2ee <HAL_ADC_Stop_DMA+0x1a>
 800f2ea:	2302      	movs	r3, #2
 800f2ec:	e038      	b.n	800f360 <HAL_ADC_Stop_DMA+0x8c>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
<<<<<<< HEAD
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	689a      	ldr	r2, [r3, #8]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	f022 0201 	bic.w	r2, r2, #1
 80113a0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	689b      	ldr	r3, [r3, #8]
 80113a8:	f003 0301 	and.w	r3, r3, #1
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d120      	bne.n	80113f2 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	689a      	ldr	r2, [r3, #8]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80113be:	609a      	str	r2, [r3, #8]
=======
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	689a      	ldr	r2, [r3, #8]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	f022 0201 	bic.w	r2, r2, #1
 800f304:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	689b      	ldr	r3, [r3, #8]
 800f30c:	f003 0301 	and.w	r3, r3, #1
 800f310:	2b00      	cmp	r3, #0
 800f312:	d120      	bne.n	800f356 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	689a      	ldr	r2, [r3, #8]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f322:	609a      	str	r2, [r3, #8]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
<<<<<<< HEAD
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113c4:	4618      	mov	r0, r3
 80113c6:	f000 fcfd 	bl	8011dc4 <HAL_DMA_Abort>
 80113ca:	4603      	mov	r3, r0
 80113cc:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	685a      	ldr	r2, [r3, #4]
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80113dc:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80113e6:	f023 0301 	bic.w	r3, r3, #1
 80113ea:	f043 0201 	orr.w	r2, r3, #1
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f328:	4618      	mov	r0, r3
 800f32a:	f000 fcfd 	bl	800fd28 <HAL_DMA_Abort>
 800f32e:	4603      	mov	r3, r0
 800f330:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	685a      	ldr	r2, [r3, #4]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800f340:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f346:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f34a:	f023 0301 	bic.w	r3, r3, #1
 800f34e:	f043 0201 	orr.w	r2, r3, #1
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2200      	movs	r2, #0
 80113f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80113fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3710      	adds	r7, #16
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}

08011404 <HAL_ADC_ConvHalfCpltCallback>:
=======
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2200      	movs	r2, #0
 800f35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800f35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f360:	4618      	mov	r0, r3
 800f362:	3710      	adds	r7, #16
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <HAL_ADC_ConvHalfCpltCallback>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8011404:	b480      	push	{r7}
 8011406:	b083      	sub	sp, #12
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
=======
 800f368:	b480      	push	{r7}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 801140c:	bf00      	nop
 801140e:	370c      	adds	r7, #12
 8011410:	46bd      	mov	sp, r7
 8011412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011416:	4770      	bx	lr

08011418 <HAL_ADC_LevelOutOfWindowCallback>:
=======
 800f370:	bf00      	nop
 800f372:	370c      	adds	r7, #12
 800f374:	46bd      	mov	sp, r7
 800f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37a:	4770      	bx	lr

0800f37c <HAL_ADC_LevelOutOfWindowCallback>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8011418:	b480      	push	{r7}
 801141a:	b083      	sub	sp, #12
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
=======
 800f37c:	b480      	push	{r7}
 800f37e:	b083      	sub	sp, #12
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8011420:	bf00      	nop
 8011422:	370c      	adds	r7, #12
 8011424:	46bd      	mov	sp, r7
 8011426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142a:	4770      	bx	lr

0801142c <HAL_ADC_ErrorCallback>:
=======
 800f384:	bf00      	nop
 800f386:	370c      	adds	r7, #12
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr

0800f390 <HAL_ADC_ErrorCallback>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 801142c:	b480      	push	{r7}
 801142e:	b083      	sub	sp, #12
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
=======
 800f390:	b480      	push	{r7}
 800f392:	b083      	sub	sp, #12
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8011434:	bf00      	nop
 8011436:	370c      	adds	r7, #12
 8011438:	46bd      	mov	sp, r7
 801143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143e:	4770      	bx	lr

08011440 <HAL_ADC_ConfigChannel>:
=======
 800f398:	bf00      	nop
 800f39a:	370c      	adds	r7, #12
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr

0800f3a4 <HAL_ADC_ConfigChannel>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
<<<<<<< HEAD
 8011440:	b480      	push	{r7}
 8011442:	b085      	sub	sp, #20
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801144a:	2300      	movs	r3, #0
 801144c:	60bb      	str	r3, [r7, #8]
=======
 800f3a4:	b480      	push	{r7}
 800f3a6:	b085      	sub	sp, #20
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	60bb      	str	r3, [r7, #8]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011454:	2b01      	cmp	r3, #1
 8011456:	d101      	bne.n	801145c <HAL_ADC_ConfigChannel+0x1c>
 8011458:	2302      	movs	r3, #2
 801145a:	e105      	b.n	8011668 <HAL_ADC_ConfigChannel+0x228>
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2201      	movs	r2, #1
 8011460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	2b09      	cmp	r3, #9
 801146a:	d925      	bls.n	80114b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	68d9      	ldr	r1, [r3, #12]
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	b29b      	uxth	r3, r3
 8011478:	461a      	mov	r2, r3
 801147a:	4613      	mov	r3, r2
 801147c:	005b      	lsls	r3, r3, #1
 801147e:	4413      	add	r3, r2
 8011480:	3b1e      	subs	r3, #30
 8011482:	2207      	movs	r2, #7
 8011484:	fa02 f303 	lsl.w	r3, r2, r3
 8011488:	43da      	mvns	r2, r3
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	400a      	ands	r2, r1
 8011490:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	68d9      	ldr	r1, [r3, #12]
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	689a      	ldr	r2, [r3, #8]
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	b29b      	uxth	r3, r3
 80114a2:	4618      	mov	r0, r3
 80114a4:	4603      	mov	r3, r0
 80114a6:	005b      	lsls	r3, r3, #1
 80114a8:	4403      	add	r3, r0
 80114aa:	3b1e      	subs	r3, #30
 80114ac:	409a      	lsls	r2, r3
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	430a      	orrs	r2, r1
 80114b4:	60da      	str	r2, [r3, #12]
 80114b6:	e022      	b.n	80114fe <HAL_ADC_ConfigChannel+0xbe>
=======
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	d101      	bne.n	800f3c0 <HAL_ADC_ConfigChannel+0x1c>
 800f3bc:	2302      	movs	r3, #2
 800f3be:	e105      	b.n	800f5cc <HAL_ADC_ConfigChannel+0x228>
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	2b09      	cmp	r3, #9
 800f3ce:	d925      	bls.n	800f41c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	68d9      	ldr	r1, [r3, #12]
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	461a      	mov	r2, r3
 800f3de:	4613      	mov	r3, r2
 800f3e0:	005b      	lsls	r3, r3, #1
 800f3e2:	4413      	add	r3, r2
 800f3e4:	3b1e      	subs	r3, #30
 800f3e6:	2207      	movs	r2, #7
 800f3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800f3ec:	43da      	mvns	r2, r3
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	400a      	ands	r2, r1
 800f3f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	68d9      	ldr	r1, [r3, #12]
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	689a      	ldr	r2, [r3, #8]
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	b29b      	uxth	r3, r3
 800f406:	4618      	mov	r0, r3
 800f408:	4603      	mov	r3, r0
 800f40a:	005b      	lsls	r3, r3, #1
 800f40c:	4403      	add	r3, r0
 800f40e:	3b1e      	subs	r3, #30
 800f410:	409a      	lsls	r2, r3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	430a      	orrs	r2, r1
 800f418:	60da      	str	r2, [r3, #12]
 800f41a:	e022      	b.n	800f462 <HAL_ADC_ConfigChannel+0xbe>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< HEAD
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	6919      	ldr	r1, [r3, #16]
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	461a      	mov	r2, r3
 80114c6:	4613      	mov	r3, r2
 80114c8:	005b      	lsls	r3, r3, #1
 80114ca:	4413      	add	r3, r2
 80114cc:	2207      	movs	r2, #7
 80114ce:	fa02 f303 	lsl.w	r3, r2, r3
 80114d2:	43da      	mvns	r2, r3
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	400a      	ands	r2, r1
 80114da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	6919      	ldr	r1, [r3, #16]
 80114e2:	683b      	ldr	r3, [r7, #0]
 80114e4:	689a      	ldr	r2, [r3, #8]
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	b29b      	uxth	r3, r3
 80114ec:	4618      	mov	r0, r3
 80114ee:	4603      	mov	r3, r0
 80114f0:	005b      	lsls	r3, r3, #1
 80114f2:	4403      	add	r3, r0
 80114f4:	409a      	lsls	r2, r3
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	430a      	orrs	r2, r1
 80114fc:	611a      	str	r2, [r3, #16]
=======
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	6919      	ldr	r1, [r3, #16]
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	b29b      	uxth	r3, r3
 800f428:	461a      	mov	r2, r3
 800f42a:	4613      	mov	r3, r2
 800f42c:	005b      	lsls	r3, r3, #1
 800f42e:	4413      	add	r3, r2
 800f430:	2207      	movs	r2, #7
 800f432:	fa02 f303 	lsl.w	r3, r2, r3
 800f436:	43da      	mvns	r2, r3
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	400a      	ands	r2, r1
 800f43e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	6919      	ldr	r1, [r3, #16]
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	689a      	ldr	r2, [r3, #8]
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	b29b      	uxth	r3, r3
 800f450:	4618      	mov	r0, r3
 800f452:	4603      	mov	r3, r0
 800f454:	005b      	lsls	r3, r3, #1
 800f456:	4403      	add	r3, r0
 800f458:	409a      	lsls	r2, r3
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	430a      	orrs	r2, r1
 800f460:	611a      	str	r2, [r3, #16]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	685b      	ldr	r3, [r3, #4]
 8011502:	2b06      	cmp	r3, #6
 8011504:	d824      	bhi.n	8011550 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	685a      	ldr	r2, [r3, #4]
 8011510:	4613      	mov	r3, r2
 8011512:	009b      	lsls	r3, r3, #2
 8011514:	4413      	add	r3, r2
 8011516:	3b05      	subs	r3, #5
 8011518:	221f      	movs	r2, #31
 801151a:	fa02 f303 	lsl.w	r3, r2, r3
 801151e:	43da      	mvns	r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	400a      	ands	r2, r1
 8011526:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	b29b      	uxth	r3, r3
 8011534:	4618      	mov	r0, r3
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	685a      	ldr	r2, [r3, #4]
 801153a:	4613      	mov	r3, r2
 801153c:	009b      	lsls	r3, r3, #2
 801153e:	4413      	add	r3, r2
 8011540:	3b05      	subs	r3, #5
 8011542:	fa00 f203 	lsl.w	r2, r0, r3
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	430a      	orrs	r2, r1
 801154c:	635a      	str	r2, [r3, #52]	; 0x34
 801154e:	e04c      	b.n	80115ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	2b0c      	cmp	r3, #12
 8011556:	d824      	bhi.n	80115a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	685a      	ldr	r2, [r3, #4]
 8011562:	4613      	mov	r3, r2
 8011564:	009b      	lsls	r3, r3, #2
 8011566:	4413      	add	r3, r2
 8011568:	3b23      	subs	r3, #35	; 0x23
 801156a:	221f      	movs	r2, #31
 801156c:	fa02 f303 	lsl.w	r3, r2, r3
 8011570:	43da      	mvns	r2, r3
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	400a      	ands	r2, r1
 8011578:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	b29b      	uxth	r3, r3
 8011586:	4618      	mov	r0, r3
 8011588:	683b      	ldr	r3, [r7, #0]
 801158a:	685a      	ldr	r2, [r3, #4]
 801158c:	4613      	mov	r3, r2
 801158e:	009b      	lsls	r3, r3, #2
 8011590:	4413      	add	r3, r2
 8011592:	3b23      	subs	r3, #35	; 0x23
 8011594:	fa00 f203 	lsl.w	r2, r0, r3
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	430a      	orrs	r2, r1
 801159e:	631a      	str	r2, [r3, #48]	; 0x30
 80115a0:	e023      	b.n	80115ea <HAL_ADC_ConfigChannel+0x1aa>
=======
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	685b      	ldr	r3, [r3, #4]
 800f466:	2b06      	cmp	r3, #6
 800f468:	d824      	bhi.n	800f4b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	685a      	ldr	r2, [r3, #4]
 800f474:	4613      	mov	r3, r2
 800f476:	009b      	lsls	r3, r3, #2
 800f478:	4413      	add	r3, r2
 800f47a:	3b05      	subs	r3, #5
 800f47c:	221f      	movs	r2, #31
 800f47e:	fa02 f303 	lsl.w	r3, r2, r3
 800f482:	43da      	mvns	r2, r3
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	400a      	ands	r2, r1
 800f48a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	b29b      	uxth	r3, r3
 800f498:	4618      	mov	r0, r3
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	685a      	ldr	r2, [r3, #4]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	4413      	add	r3, r2
 800f4a4:	3b05      	subs	r3, #5
 800f4a6:	fa00 f203 	lsl.w	r2, r0, r3
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	430a      	orrs	r2, r1
 800f4b0:	635a      	str	r2, [r3, #52]	; 0x34
 800f4b2:	e04c      	b.n	800f54e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	2b0c      	cmp	r3, #12
 800f4ba:	d824      	bhi.n	800f506 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	685a      	ldr	r2, [r3, #4]
 800f4c6:	4613      	mov	r3, r2
 800f4c8:	009b      	lsls	r3, r3, #2
 800f4ca:	4413      	add	r3, r2
 800f4cc:	3b23      	subs	r3, #35	; 0x23
 800f4ce:	221f      	movs	r2, #31
 800f4d0:	fa02 f303 	lsl.w	r3, r2, r3
 800f4d4:	43da      	mvns	r2, r3
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	400a      	ands	r2, r1
 800f4dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	685a      	ldr	r2, [r3, #4]
 800f4f0:	4613      	mov	r3, r2
 800f4f2:	009b      	lsls	r3, r3, #2
 800f4f4:	4413      	add	r3, r2
 800f4f6:	3b23      	subs	r3, #35	; 0x23
 800f4f8:	fa00 f203 	lsl.w	r2, r0, r3
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	430a      	orrs	r2, r1
 800f502:	631a      	str	r2, [r3, #48]	; 0x30
 800f504:	e023      	b.n	800f54e <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< HEAD
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	685a      	ldr	r2, [r3, #4]
 80115ac:	4613      	mov	r3, r2
 80115ae:	009b      	lsls	r3, r3, #2
 80115b0:	4413      	add	r3, r2
 80115b2:	3b41      	subs	r3, #65	; 0x41
 80115b4:	221f      	movs	r2, #31
 80115b6:	fa02 f303 	lsl.w	r3, r2, r3
 80115ba:	43da      	mvns	r2, r3
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	400a      	ands	r2, r1
 80115c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	b29b      	uxth	r3, r3
 80115d0:	4618      	mov	r0, r3
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	685a      	ldr	r2, [r3, #4]
 80115d6:	4613      	mov	r3, r2
 80115d8:	009b      	lsls	r3, r3, #2
 80115da:	4413      	add	r3, r2
 80115dc:	3b41      	subs	r3, #65	; 0x41
 80115de:	fa00 f203 	lsl.w	r2, r0, r3
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	430a      	orrs	r2, r1
 80115e8:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	685a      	ldr	r2, [r3, #4]
 800f510:	4613      	mov	r3, r2
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	4413      	add	r3, r2
 800f516:	3b41      	subs	r3, #65	; 0x41
 800f518:	221f      	movs	r2, #31
 800f51a:	fa02 f303 	lsl.w	r3, r2, r3
 800f51e:	43da      	mvns	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	400a      	ands	r2, r1
 800f526:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	b29b      	uxth	r3, r3
 800f534:	4618      	mov	r0, r3
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	685a      	ldr	r2, [r3, #4]
 800f53a:	4613      	mov	r3, r2
 800f53c:	009b      	lsls	r3, r3, #2
 800f53e:	4413      	add	r3, r2
 800f540:	3b41      	subs	r3, #65	; 0x41
 800f542:	fa00 f203 	lsl.w	r2, r0, r3
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	430a      	orrs	r2, r1
 800f54c:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 80115ea:	4b22      	ldr	r3, [pc, #136]	; (8011674 <HAL_ADC_ConfigChannel+0x234>)
 80115ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	4a21      	ldr	r2, [pc, #132]	; (8011678 <HAL_ADC_ConfigChannel+0x238>)
 80115f4:	4293      	cmp	r3, r2
 80115f6:	d109      	bne.n	801160c <HAL_ADC_ConfigChannel+0x1cc>
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	2b12      	cmp	r3, #18
 80115fe:	d105      	bne.n	801160c <HAL_ADC_ConfigChannel+0x1cc>
=======
 800f54e:	4b22      	ldr	r3, [pc, #136]	; (800f5d8 <HAL_ADC_ConfigChannel+0x234>)
 800f550:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	4a21      	ldr	r2, [pc, #132]	; (800f5dc <HAL_ADC_ConfigChannel+0x238>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d109      	bne.n	800f570 <HAL_ADC_ConfigChannel+0x1cc>
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	2b12      	cmp	r3, #18
 800f562:	d105      	bne.n	800f570 <HAL_ADC_ConfigChannel+0x1cc>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
<<<<<<< HEAD
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	685b      	ldr	r3, [r3, #4]
 8011604:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	605a      	str	r2, [r3, #4]
=======
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	605a      	str	r2, [r3, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< HEAD
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	4a19      	ldr	r2, [pc, #100]	; (8011678 <HAL_ADC_ConfigChannel+0x238>)
 8011612:	4293      	cmp	r3, r2
 8011614:	d123      	bne.n	801165e <HAL_ADC_ConfigChannel+0x21e>
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	2b10      	cmp	r3, #16
 801161c:	d003      	beq.n	8011626 <HAL_ADC_ConfigChannel+0x1e6>
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	2b11      	cmp	r3, #17
 8011624:	d11b      	bne.n	801165e <HAL_ADC_ConfigChannel+0x21e>
=======
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4a19      	ldr	r2, [pc, #100]	; (800f5dc <HAL_ADC_ConfigChannel+0x238>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d123      	bne.n	800f5c2 <HAL_ADC_ConfigChannel+0x21e>
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	2b10      	cmp	r3, #16
 800f580:	d003      	beq.n	800f58a <HAL_ADC_ConfigChannel+0x1e6>
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	2b11      	cmp	r3, #17
 800f588:	d11b      	bne.n	800f5c2 <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
<<<<<<< HEAD
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	685b      	ldr	r3, [r3, #4]
 801162a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8011632:	683b      	ldr	r3, [r7, #0]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	2b10      	cmp	r3, #16
 8011638:	d111      	bne.n	801165e <HAL_ADC_ConfigChannel+0x21e>
=======
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	2b10      	cmp	r3, #16
 800f59c:	d111      	bne.n	800f5c2 <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 801163a:	4b10      	ldr	r3, [pc, #64]	; (801167c <HAL_ADC_ConfigChannel+0x23c>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	4a10      	ldr	r2, [pc, #64]	; (8011680 <HAL_ADC_ConfigChannel+0x240>)
 8011640:	fba2 2303 	umull	r2, r3, r2, r3
 8011644:	0c9a      	lsrs	r2, r3, #18
 8011646:	4613      	mov	r3, r2
 8011648:	009b      	lsls	r3, r3, #2
 801164a:	4413      	add	r3, r2
 801164c:	005b      	lsls	r3, r3, #1
 801164e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8011650:	e002      	b.n	8011658 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	3b01      	subs	r3, #1
 8011656:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d1f9      	bne.n	8011652 <HAL_ADC_ConfigChannel+0x212>
=======
 800f59e:	4b10      	ldr	r3, [pc, #64]	; (800f5e0 <HAL_ADC_ConfigChannel+0x23c>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	4a10      	ldr	r2, [pc, #64]	; (800f5e4 <HAL_ADC_ConfigChannel+0x240>)
 800f5a4:	fba2 2303 	umull	r2, r3, r2, r3
 800f5a8:	0c9a      	lsrs	r2, r3, #18
 800f5aa:	4613      	mov	r3, r2
 800f5ac:	009b      	lsls	r3, r3, #2
 800f5ae:	4413      	add	r3, r2
 800f5b0:	005b      	lsls	r3, r3, #1
 800f5b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800f5b4:	e002      	b.n	800f5bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	3b01      	subs	r3, #1
 800f5ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d1f9      	bne.n	800f5b6 <HAL_ADC_ConfigChannel+0x212>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2200      	movs	r2, #0
 8011662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8011666:	2300      	movs	r3, #0
}
 8011668:	4618      	mov	r0, r3
 801166a:	3714      	adds	r7, #20
 801166c:	46bd      	mov	sp, r7
 801166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011672:	4770      	bx	lr
 8011674:	40012300 	.word	0x40012300
 8011678:	40012000 	.word	0x40012000
 801167c:	20000074 	.word	0x20000074
 8011680:	431bde83 	.word	0x431bde83

08011684 <ADC_Init>:
=======
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800f5ca:	2300      	movs	r3, #0
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3714      	adds	r7, #20
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d6:	4770      	bx	lr
 800f5d8:	40012300 	.word	0x40012300
 800f5dc:	40012000 	.word	0x40012000
 800f5e0:	20000d00 	.word	0x20000d00
 800f5e4:	431bde83 	.word	0x431bde83

0800f5e8 <ADC_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8011684:	b480      	push	{r7}
 8011686:	b085      	sub	sp, #20
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
=======
 800f5e8:	b480      	push	{r7}
 800f5ea:	b085      	sub	sp, #20
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 801168c:	4b79      	ldr	r3, [pc, #484]	; (8011874 <ADC_Init+0x1f0>)
 801168e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	685a      	ldr	r2, [r3, #4]
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	431a      	orrs	r2, r3
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	685a      	ldr	r2, [r3, #4]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80116b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	6859      	ldr	r1, [r3, #4]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	691b      	ldr	r3, [r3, #16]
 80116c4:	021a      	lsls	r2, r3, #8
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	430a      	orrs	r2, r1
 80116cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	685a      	ldr	r2, [r3, #4]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80116dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	6859      	ldr	r1, [r3, #4]
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	689a      	ldr	r2, [r3, #8]
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	430a      	orrs	r2, r1
 80116ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	689a      	ldr	r2, [r3, #8]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80116fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	6899      	ldr	r1, [r3, #8]
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	68da      	ldr	r2, [r3, #12]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	430a      	orrs	r2, r1
 8011710:	609a      	str	r2, [r3, #8]
=======
 800f5f0:	4b79      	ldr	r3, [pc, #484]	; (800f7d8 <ADC_Init+0x1f0>)
 800f5f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	685a      	ldr	r2, [r3, #4]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	685b      	ldr	r3, [r3, #4]
 800f608:	431a      	orrs	r2, r3
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	685a      	ldr	r2, [r3, #4]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f61c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	6859      	ldr	r1, [r3, #4]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	691b      	ldr	r3, [r3, #16]
 800f628:	021a      	lsls	r2, r3, #8
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	430a      	orrs	r2, r1
 800f630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	685a      	ldr	r2, [r3, #4]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800f640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	6859      	ldr	r1, [r3, #4]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	689a      	ldr	r2, [r3, #8]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	430a      	orrs	r2, r1
 800f652:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	689a      	ldr	r2, [r3, #8]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	6899      	ldr	r1, [r3, #8]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	68da      	ldr	r2, [r3, #12]
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	430a      	orrs	r2, r1
 800f674:	609a      	str	r2, [r3, #8]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011716:	4a58      	ldr	r2, [pc, #352]	; (8011878 <ADC_Init+0x1f4>)
 8011718:	4293      	cmp	r3, r2
 801171a:	d022      	beq.n	8011762 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	689a      	ldr	r2, [r3, #8]
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801172a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	6899      	ldr	r1, [r3, #8]
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	430a      	orrs	r2, r1
 801173c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	689a      	ldr	r2, [r3, #8]
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801174c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	6899      	ldr	r1, [r3, #8]
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	430a      	orrs	r2, r1
 801175e:	609a      	str	r2, [r3, #8]
 8011760:	e00f      	b.n	8011782 <ADC_Init+0xfe>
=======
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f67a:	4a58      	ldr	r2, [pc, #352]	; (800f7dc <ADC_Init+0x1f4>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d022      	beq.n	800f6c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	689a      	ldr	r2, [r3, #8]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f68e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	6899      	ldr	r1, [r3, #8]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	430a      	orrs	r2, r1
 800f6a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	689a      	ldr	r2, [r3, #8]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f6b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	6899      	ldr	r1, [r3, #8]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	430a      	orrs	r2, r1
 800f6c2:	609a      	str	r2, [r3, #8]
 800f6c4:	e00f      	b.n	800f6e6 <ADC_Init+0xfe>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	689a      	ldr	r2, [r3, #8]
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011770:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	689a      	ldr	r2, [r3, #8]
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011780:	609a      	str	r2, [r3, #8]
=======
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	689a      	ldr	r2, [r3, #8]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f6d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	689a      	ldr	r2, [r3, #8]
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f6e4:	609a      	str	r2, [r3, #8]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< HEAD
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	689a      	ldr	r2, [r3, #8]
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	f022 0202 	bic.w	r2, r2, #2
 8011790:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	6899      	ldr	r1, [r3, #8]
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	7e1b      	ldrb	r3, [r3, #24]
 801179c:	005a      	lsls	r2, r3, #1
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	430a      	orrs	r2, r1
 80117a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d01b      	beq.n	80117e8 <ADC_Init+0x164>
=======
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	689a      	ldr	r2, [r3, #8]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f022 0202 	bic.w	r2, r2, #2
 800f6f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	6899      	ldr	r1, [r3, #8]
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	7e1b      	ldrb	r3, [r3, #24]
 800f700:	005a      	lsls	r2, r3, #1
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	430a      	orrs	r2, r1
 800f708:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d01b      	beq.n	800f74c <ADC_Init+0x164>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< HEAD
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	685a      	ldr	r2, [r3, #4]
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80117be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	685a      	ldr	r2, [r3, #4]
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80117ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	6859      	ldr	r1, [r3, #4]
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117da:	3b01      	subs	r3, #1
 80117dc:	035a      	lsls	r2, r3, #13
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	430a      	orrs	r2, r1
 80117e4:	605a      	str	r2, [r3, #4]
 80117e6:	e007      	b.n	80117f8 <ADC_Init+0x174>
=======
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	685a      	ldr	r2, [r3, #4]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f722:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	685a      	ldr	r2, [r3, #4]
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800f732:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	6859      	ldr	r1, [r3, #4]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f73e:	3b01      	subs	r3, #1
 800f740:	035a      	lsls	r2, r3, #13
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	430a      	orrs	r2, r1
 800f748:	605a      	str	r2, [r3, #4]
 800f74a:	e007      	b.n	800f75c <ADC_Init+0x174>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< HEAD
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	685a      	ldr	r2, [r3, #4]
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80117f6:	605a      	str	r2, [r3, #4]
=======
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	685a      	ldr	r2, [r3, #4]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f75a:	605a      	str	r2, [r3, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< HEAD
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8011806:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	69db      	ldr	r3, [r3, #28]
 8011812:	3b01      	subs	r3, #1
 8011814:	051a      	lsls	r2, r3, #20
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	430a      	orrs	r2, r1
 801181c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	689a      	ldr	r2, [r3, #8]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801182c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	6899      	ldr	r1, [r3, #8]
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801183a:	025a      	lsls	r2, r3, #9
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	430a      	orrs	r2, r1
 8011842:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	689a      	ldr	r2, [r3, #8]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011852:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	6899      	ldr	r1, [r3, #8]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	695b      	ldr	r3, [r3, #20]
 801185e:	029a      	lsls	r2, r3, #10
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	430a      	orrs	r2, r1
 8011866:	609a      	str	r2, [r3, #8]
}
 8011868:	bf00      	nop
 801186a:	3714      	adds	r7, #20
 801186c:	46bd      	mov	sp, r7
 801186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011872:	4770      	bx	lr
 8011874:	40012300 	.word	0x40012300
 8011878:	0f000001 	.word	0x0f000001

0801187c <ADC_DMAConvCplt>:
=======
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800f76a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	69db      	ldr	r3, [r3, #28]
 800f776:	3b01      	subs	r3, #1
 800f778:	051a      	lsls	r2, r3, #20
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	430a      	orrs	r2, r1
 800f780:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	689a      	ldr	r2, [r3, #8]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f790:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	6899      	ldr	r1, [r3, #8]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f79e:	025a      	lsls	r2, r3, #9
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	430a      	orrs	r2, r1
 800f7a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	689a      	ldr	r2, [r3, #8]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f7b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	6899      	ldr	r1, [r3, #8]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	695b      	ldr	r3, [r3, #20]
 800f7c2:	029a      	lsls	r2, r3, #10
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	430a      	orrs	r2, r1
 800f7ca:	609a      	str	r2, [r3, #8]
}
 800f7cc:	bf00      	nop
 800f7ce:	3714      	adds	r7, #20
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr
 800f7d8:	40012300 	.word	0x40012300
 800f7dc:	0f000001 	.word	0x0f000001

0800f7e0 <ADC_DMAConvCplt>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
<<<<<<< HEAD
 801187c:	b580      	push	{r7, lr}
 801187e:	b084      	sub	sp, #16
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011888:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801188e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011892:	2b00      	cmp	r3, #0
 8011894:	d13c      	bne.n	8011910 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801189a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b084      	sub	sp, #16
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d13c      	bne.n	800f874 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< HEAD
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	689b      	ldr	r3, [r3, #8]
 80118a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d12b      	bne.n	8011908 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d127      	bne.n	8011908 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d006      	beq.n	80118d4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	689b      	ldr	r3, [r3, #8]
 80118cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d119      	bne.n	8011908 <ADC_DMAConvCplt+0x8c>
=======
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	689b      	ldr	r3, [r3, #8]
 800f80c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f810:	2b00      	cmp	r3, #0
 800f812:	d12b      	bne.n	800f86c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d127      	bne.n	800f86c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f822:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f826:	2b00      	cmp	r3, #0
 800f828:	d006      	beq.n	800f838 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	689b      	ldr	r3, [r3, #8]
 800f830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f834:	2b00      	cmp	r3, #0
 800f836:	d119      	bne.n	800f86c <ADC_DMAConvCplt+0x8c>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
<<<<<<< HEAD
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	685a      	ldr	r2, [r3, #4]
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f022 0220 	bic.w	r2, r2, #32
 80118e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d105      	bne.n	8011908 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011900:	f043 0201 	orr.w	r2, r3, #1
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	685a      	ldr	r2, [r3, #4]
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	f022 0220 	bic.w	r2, r2, #32
 800f846:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f84c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d105      	bne.n	800f86c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f864:	f043 0201 	orr.w	r2, r3, #1
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 8011908:	68f8      	ldr	r0, [r7, #12]
 801190a:	f7fd f94d 	bl	800eba8 <HAL_ADC_ConvCpltCallback>
=======
 800f86c:	68f8      	ldr	r0, [r7, #12]
 800f86e:	f7fd f953 	bl	800cb18 <HAL_ADC_ConvCpltCallback>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
<<<<<<< HEAD
 801190e:	e00e      	b.n	801192e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011914:	f003 0310 	and.w	r3, r3, #16
 8011918:	2b00      	cmp	r3, #0
 801191a:	d003      	beq.n	8011924 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801191c:	68f8      	ldr	r0, [r7, #12]
 801191e:	f7ff fd85 	bl	801142c <HAL_ADC_ErrorCallback>
}
 8011922:	e004      	b.n	801192e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	4798      	blx	r3
}
 801192e:	bf00      	nop
 8011930:	3710      	adds	r7, #16
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}

08011936 <ADC_DMAHalfConvCplt>:
=======
 800f872:	e00e      	b.n	800f892 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f878:	f003 0310 	and.w	r3, r3, #16
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d003      	beq.n	800f888 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800f880:	68f8      	ldr	r0, [r7, #12]
 800f882:	f7ff fd85 	bl	800f390 <HAL_ADC_ErrorCallback>
}
 800f886:	e004      	b.n	800f892 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f88c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	4798      	blx	r3
}
 800f892:	bf00      	nop
 800f894:	3710      	adds	r7, #16
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}

0800f89a <ADC_DMAHalfConvCplt>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
<<<<<<< HEAD
 8011936:	b580      	push	{r7, lr}
 8011938:	b084      	sub	sp, #16
 801193a:	af00      	add	r7, sp, #0
 801193c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011942:	60fb      	str	r3, [r7, #12]
=======
 800f89a:	b580      	push	{r7, lr}
 800f89c:	b084      	sub	sp, #16
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8a6:	60fb      	str	r3, [r7, #12]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
<<<<<<< HEAD
 8011944:	68f8      	ldr	r0, [r7, #12]
 8011946:	f7ff fd5d 	bl	8011404 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801194a:	bf00      	nop
 801194c:	3710      	adds	r7, #16
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}

08011952 <ADC_DMAError>:
=======
 800f8a8:	68f8      	ldr	r0, [r7, #12]
 800f8aa:	f7ff fd5d 	bl	800f368 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f8ae:	bf00      	nop
 800f8b0:	3710      	adds	r7, #16
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}

0800f8b6 <ADC_DMAError>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
<<<<<<< HEAD
 8011952:	b580      	push	{r7, lr}
 8011954:	b084      	sub	sp, #16
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801195e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	2240      	movs	r2, #64	; 0x40
 8011964:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801196a:	f043 0204 	orr.w	r2, r3, #4
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b084      	sub	sp, #16
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2240      	movs	r2, #64	; 0x40
 800f8c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8ce:	f043 0204 	orr.w	r2, r3, #4
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 8011972:	68f8      	ldr	r0, [r7, #12]
 8011974:	f7ff fd5a 	bl	801142c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8011978:	bf00      	nop
 801197a:	3710      	adds	r7, #16
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}

08011980 <HAL_ADCEx_InjectedConvCpltCallback>:
=======
 800f8d6:	68f8      	ldr	r0, [r7, #12]
 800f8d8:	f7ff fd5a 	bl	800f390 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f8dc:	bf00      	nop
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <HAL_ADCEx_InjectedConvCpltCallback>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8011980:	b480      	push	{r7}
 8011982:	b083      	sub	sp, #12
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
=======
 800f8e4:	b480      	push	{r7}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8011988:	bf00      	nop
 801198a:	370c      	adds	r7, #12
 801198c:	46bd      	mov	sp, r7
 801198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011992:	4770      	bx	lr

08011994 <__NVIC_SetPriorityGrouping>:
=======
 800f8ec:	bf00      	nop
 800f8ee:	370c      	adds	r7, #12
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <__NVIC_SetPriorityGrouping>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8011994:	b480      	push	{r7}
 8011996:	b085      	sub	sp, #20
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f003 0307 	and.w	r3, r3, #7
 80119a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80119a4:	4b0c      	ldr	r3, [pc, #48]	; (80119d8 <__NVIC_SetPriorityGrouping+0x44>)
 80119a6:	68db      	ldr	r3, [r3, #12]
 80119a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80119aa:	68ba      	ldr	r2, [r7, #8]
 80119ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80119b0:	4013      	ands	r3, r2
 80119b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80119bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80119c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80119c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80119c6:	4a04      	ldr	r2, [pc, #16]	; (80119d8 <__NVIC_SetPriorityGrouping+0x44>)
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	60d3      	str	r3, [r2, #12]
}
 80119cc:	bf00      	nop
 80119ce:	3714      	adds	r7, #20
 80119d0:	46bd      	mov	sp, r7
 80119d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d6:	4770      	bx	lr
 80119d8:	e000ed00 	.word	0xe000ed00

080119dc <__NVIC_GetPriorityGrouping>:
=======
 800f8f8:	b480      	push	{r7}
 800f8fa:	b085      	sub	sp, #20
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f003 0307 	and.w	r3, r3, #7
 800f906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f908:	4b0c      	ldr	r3, [pc, #48]	; (800f93c <__NVIC_SetPriorityGrouping+0x44>)
 800f90a:	68db      	ldr	r3, [r3, #12]
 800f90c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f90e:	68ba      	ldr	r2, [r7, #8]
 800f910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f914:	4013      	ands	r3, r2
 800f916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f92a:	4a04      	ldr	r2, [pc, #16]	; (800f93c <__NVIC_SetPriorityGrouping+0x44>)
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	60d3      	str	r3, [r2, #12]
}
 800f930:	bf00      	nop
 800f932:	3714      	adds	r7, #20
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr
 800f93c:	e000ed00 	.word	0xe000ed00

0800f940 <__NVIC_GetPriorityGrouping>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80119dc:	b480      	push	{r7}
 80119de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80119e0:	4b04      	ldr	r3, [pc, #16]	; (80119f4 <__NVIC_GetPriorityGrouping+0x18>)
 80119e2:	68db      	ldr	r3, [r3, #12]
 80119e4:	0a1b      	lsrs	r3, r3, #8
 80119e6:	f003 0307 	and.w	r3, r3, #7
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	46bd      	mov	sp, r7
 80119ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f2:	4770      	bx	lr
 80119f4:	e000ed00 	.word	0xe000ed00

080119f8 <__NVIC_EnableIRQ>:
=======
 800f940:	b480      	push	{r7}
 800f942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f944:	4b04      	ldr	r3, [pc, #16]	; (800f958 <__NVIC_GetPriorityGrouping+0x18>)
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	0a1b      	lsrs	r3, r3, #8
 800f94a:	f003 0307 	and.w	r3, r3, #7
}
 800f94e:	4618      	mov	r0, r3
 800f950:	46bd      	mov	sp, r7
 800f952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f956:	4770      	bx	lr
 800f958:	e000ed00 	.word	0xe000ed00

0800f95c <__NVIC_EnableIRQ>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80119f8:	b480      	push	{r7}
 80119fa:	b083      	sub	sp, #12
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	4603      	mov	r3, r0
 8011a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	db0b      	blt.n	8011a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011a0a:	79fb      	ldrb	r3, [r7, #7]
 8011a0c:	f003 021f 	and.w	r2, r3, #31
 8011a10:	4907      	ldr	r1, [pc, #28]	; (8011a30 <__NVIC_EnableIRQ+0x38>)
 8011a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a16:	095b      	lsrs	r3, r3, #5
 8011a18:	2001      	movs	r0, #1
 8011a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8011a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8011a22:	bf00      	nop
 8011a24:	370c      	adds	r7, #12
 8011a26:	46bd      	mov	sp, r7
 8011a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2c:	4770      	bx	lr
 8011a2e:	bf00      	nop
 8011a30:	e000e100 	.word	0xe000e100

08011a34 <__NVIC_SetPriority>:
=======
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
 800f962:	4603      	mov	r3, r0
 800f964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	db0b      	blt.n	800f986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f96e:	79fb      	ldrb	r3, [r7, #7]
 800f970:	f003 021f 	and.w	r2, r3, #31
 800f974:	4907      	ldr	r1, [pc, #28]	; (800f994 <__NVIC_EnableIRQ+0x38>)
 800f976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f97a:	095b      	lsrs	r3, r3, #5
 800f97c:	2001      	movs	r0, #1
 800f97e:	fa00 f202 	lsl.w	r2, r0, r2
 800f982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f986:	bf00      	nop
 800f988:	370c      	adds	r7, #12
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr
 800f992:	bf00      	nop
 800f994:	e000e100 	.word	0xe000e100

0800f998 <__NVIC_SetPriority>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8011a34:	b480      	push	{r7}
 8011a36:	b083      	sub	sp, #12
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	6039      	str	r1, [r7, #0]
 8011a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	db0a      	blt.n	8011a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	b2da      	uxtb	r2, r3
 8011a4c:	490c      	ldr	r1, [pc, #48]	; (8011a80 <__NVIC_SetPriority+0x4c>)
 8011a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a52:	0112      	lsls	r2, r2, #4
 8011a54:	b2d2      	uxtb	r2, r2
 8011a56:	440b      	add	r3, r1
 8011a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 800f998:	b480      	push	{r7}
 800f99a:	b083      	sub	sp, #12
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	4603      	mov	r3, r0
 800f9a0:	6039      	str	r1, [r7, #0]
 800f9a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f9a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	db0a      	blt.n	800f9c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	b2da      	uxtb	r2, r3
 800f9b0:	490c      	ldr	r1, [pc, #48]	; (800f9e4 <__NVIC_SetPriority+0x4c>)
 800f9b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f9b6:	0112      	lsls	r2, r2, #4
 800f9b8:	b2d2      	uxtb	r2, r2
 800f9ba:	440b      	add	r3, r1
 800f9bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8011a5c:	e00a      	b.n	8011a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	b2da      	uxtb	r2, r3
 8011a62:	4908      	ldr	r1, [pc, #32]	; (8011a84 <__NVIC_SetPriority+0x50>)
 8011a64:	79fb      	ldrb	r3, [r7, #7]
 8011a66:	f003 030f 	and.w	r3, r3, #15
 8011a6a:	3b04      	subs	r3, #4
 8011a6c:	0112      	lsls	r2, r2, #4
 8011a6e:	b2d2      	uxtb	r2, r2
 8011a70:	440b      	add	r3, r1
 8011a72:	761a      	strb	r2, [r3, #24]
}
 8011a74:	bf00      	nop
 8011a76:	370c      	adds	r7, #12
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7e:	4770      	bx	lr
 8011a80:	e000e100 	.word	0xe000e100
 8011a84:	e000ed00 	.word	0xe000ed00

08011a88 <NVIC_EncodePriority>:
=======
 800f9c0:	e00a      	b.n	800f9d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	b2da      	uxtb	r2, r3
 800f9c6:	4908      	ldr	r1, [pc, #32]	; (800f9e8 <__NVIC_SetPriority+0x50>)
 800f9c8:	79fb      	ldrb	r3, [r7, #7]
 800f9ca:	f003 030f 	and.w	r3, r3, #15
 800f9ce:	3b04      	subs	r3, #4
 800f9d0:	0112      	lsls	r2, r2, #4
 800f9d2:	b2d2      	uxtb	r2, r2
 800f9d4:	440b      	add	r3, r1
 800f9d6:	761a      	strb	r2, [r3, #24]
}
 800f9d8:	bf00      	nop
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr
 800f9e4:	e000e100 	.word	0xe000e100
 800f9e8:	e000ed00 	.word	0xe000ed00

0800f9ec <NVIC_EncodePriority>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8011a88:	b480      	push	{r7}
 8011a8a:	b089      	sub	sp, #36	; 0x24
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	60f8      	str	r0, [r7, #12]
 8011a90:	60b9      	str	r1, [r7, #8]
 8011a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	f003 0307 	and.w	r3, r3, #7
 8011a9a:	61fb      	str	r3, [r7, #28]
=======
 800f9ec:	b480      	push	{r7}
 800f9ee:	b089      	sub	sp, #36	; 0x24
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	60f8      	str	r0, [r7, #12]
 800f9f4:	60b9      	str	r1, [r7, #8]
 800f9f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	f003 0307 	and.w	r3, r3, #7
 800f9fe:	61fb      	str	r3, [r7, #28]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8011a9c:	69fb      	ldr	r3, [r7, #28]
 8011a9e:	f1c3 0307 	rsb	r3, r3, #7
 8011aa2:	2b04      	cmp	r3, #4
 8011aa4:	bf28      	it	cs
 8011aa6:	2304      	movcs	r3, #4
 8011aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011aaa:	69fb      	ldr	r3, [r7, #28]
 8011aac:	3304      	adds	r3, #4
 8011aae:	2b06      	cmp	r3, #6
 8011ab0:	d902      	bls.n	8011ab8 <NVIC_EncodePriority+0x30>
 8011ab2:	69fb      	ldr	r3, [r7, #28]
 8011ab4:	3b03      	subs	r3, #3
 8011ab6:	e000      	b.n	8011aba <NVIC_EncodePriority+0x32>
 8011ab8:	2300      	movs	r3, #0
 8011aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011abc:	f04f 32ff 	mov.w	r2, #4294967295
 8011ac0:	69bb      	ldr	r3, [r7, #24]
 8011ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8011ac6:	43da      	mvns	r2, r3
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	401a      	ands	r2, r3
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8011ad4:	697b      	ldr	r3, [r7, #20]
 8011ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8011ada:	43d9      	mvns	r1, r3
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011ae0:	4313      	orrs	r3, r2
         );
}
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	3724      	adds	r7, #36	; 0x24
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aec:	4770      	bx	lr
	...

08011af0 <SysTick_Config>:
=======
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	f1c3 0307 	rsb	r3, r3, #7
 800fa06:	2b04      	cmp	r3, #4
 800fa08:	bf28      	it	cs
 800fa0a:	2304      	movcs	r3, #4
 800fa0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800fa0e:	69fb      	ldr	r3, [r7, #28]
 800fa10:	3304      	adds	r3, #4
 800fa12:	2b06      	cmp	r3, #6
 800fa14:	d902      	bls.n	800fa1c <NVIC_EncodePriority+0x30>
 800fa16:	69fb      	ldr	r3, [r7, #28]
 800fa18:	3b03      	subs	r3, #3
 800fa1a:	e000      	b.n	800fa1e <NVIC_EncodePriority+0x32>
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800fa20:	f04f 32ff 	mov.w	r2, #4294967295
 800fa24:	69bb      	ldr	r3, [r7, #24]
 800fa26:	fa02 f303 	lsl.w	r3, r2, r3
 800fa2a:	43da      	mvns	r2, r3
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	401a      	ands	r2, r3
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800fa34:	f04f 31ff 	mov.w	r1, #4294967295
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	fa01 f303 	lsl.w	r3, r1, r3
 800fa3e:	43d9      	mvns	r1, r3
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800fa44:	4313      	orrs	r3, r2
         );
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3724      	adds	r7, #36	; 0x24
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa50:	4770      	bx	lr
	...

0800fa54 <SysTick_Config>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	3b01      	subs	r3, #1
 8011afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011b00:	d301      	bcc.n	8011b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011b02:	2301      	movs	r3, #1
 8011b04:	e00f      	b.n	8011b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011b06:	4a0a      	ldr	r2, [pc, #40]	; (8011b30 <SysTick_Config+0x40>)
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	3b01      	subs	r3, #1
 8011b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011b0e:	210f      	movs	r1, #15
 8011b10:	f04f 30ff 	mov.w	r0, #4294967295
 8011b14:	f7ff ff8e 	bl	8011a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011b18:	4b05      	ldr	r3, [pc, #20]	; (8011b30 <SysTick_Config+0x40>)
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011b1e:	4b04      	ldr	r3, [pc, #16]	; (8011b30 <SysTick_Config+0x40>)
 8011b20:	2207      	movs	r2, #7
 8011b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011b24:	2300      	movs	r3, #0
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	3708      	adds	r7, #8
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}
 8011b2e:	bf00      	nop
 8011b30:	e000e010 	.word	0xe000e010

08011b34 <HAL_NVIC_SetPriorityGrouping>:
=======
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b082      	sub	sp, #8
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fa64:	d301      	bcc.n	800fa6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800fa66:	2301      	movs	r3, #1
 800fa68:	e00f      	b.n	800fa8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fa6a:	4a0a      	ldr	r2, [pc, #40]	; (800fa94 <SysTick_Config+0x40>)
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	3b01      	subs	r3, #1
 800fa70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800fa72:	210f      	movs	r1, #15
 800fa74:	f04f 30ff 	mov.w	r0, #4294967295
 800fa78:	f7ff ff8e 	bl	800f998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fa7c:	4b05      	ldr	r3, [pc, #20]	; (800fa94 <SysTick_Config+0x40>)
 800fa7e:	2200      	movs	r2, #0
 800fa80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fa82:	4b04      	ldr	r3, [pc, #16]	; (800fa94 <SysTick_Config+0x40>)
 800fa84:	2207      	movs	r2, #7
 800fa86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fa88:	2300      	movs	r3, #0
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3708      	adds	r7, #8
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	e000e010 	.word	0xe000e010

0800fa98 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
=======
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f7ff ff29 	bl	8011994 <__NVIC_SetPriorityGrouping>
}
 8011b42:	bf00      	nop
 8011b44:	3708      	adds	r7, #8
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}

08011b4a <HAL_NVIC_SetPriority>:
=======
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7ff ff29 	bl	800f8f8 <__NVIC_SetPriorityGrouping>
}
 800faa6:	bf00      	nop
 800faa8:	3708      	adds	r7, #8
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}

0800faae <HAL_NVIC_SetPriority>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8011b4a:	b580      	push	{r7, lr}
 8011b4c:	b086      	sub	sp, #24
 8011b4e:	af00      	add	r7, sp, #0
 8011b50:	4603      	mov	r3, r0
 8011b52:	60b9      	str	r1, [r7, #8]
 8011b54:	607a      	str	r2, [r7, #4]
 8011b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	617b      	str	r3, [r7, #20]
=======
 800faae:	b580      	push	{r7, lr}
 800fab0:	b086      	sub	sp, #24
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	4603      	mov	r3, r0
 800fab6:	60b9      	str	r1, [r7, #8]
 800fab8:	607a      	str	r2, [r7, #4]
 800faba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800fabc:	2300      	movs	r3, #0
 800fabe:	617b      	str	r3, [r7, #20]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8011b5c:	f7ff ff3e 	bl	80119dc <__NVIC_GetPriorityGrouping>
 8011b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011b62:	687a      	ldr	r2, [r7, #4]
 8011b64:	68b9      	ldr	r1, [r7, #8]
 8011b66:	6978      	ldr	r0, [r7, #20]
 8011b68:	f7ff ff8e 	bl	8011a88 <NVIC_EncodePriority>
 8011b6c:	4602      	mov	r2, r0
 8011b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b72:	4611      	mov	r1, r2
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7ff ff5d 	bl	8011a34 <__NVIC_SetPriority>
}
 8011b7a:	bf00      	nop
 8011b7c:	3718      	adds	r7, #24
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}

08011b82 <HAL_NVIC_EnableIRQ>:
=======
 800fac0:	f7ff ff3e 	bl	800f940 <__NVIC_GetPriorityGrouping>
 800fac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	68b9      	ldr	r1, [r7, #8]
 800faca:	6978      	ldr	r0, [r7, #20]
 800facc:	f7ff ff8e 	bl	800f9ec <NVIC_EncodePriority>
 800fad0:	4602      	mov	r2, r0
 800fad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fad6:	4611      	mov	r1, r2
 800fad8:	4618      	mov	r0, r3
 800fada:	f7ff ff5d 	bl	800f998 <__NVIC_SetPriority>
}
 800fade:	bf00      	nop
 800fae0:	3718      	adds	r7, #24
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}

0800fae6 <HAL_NVIC_EnableIRQ>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8011b82:	b580      	push	{r7, lr}
 8011b84:	b082      	sub	sp, #8
 8011b86:	af00      	add	r7, sp, #0
 8011b88:	4603      	mov	r3, r0
 8011b8a:	71fb      	strb	r3, [r7, #7]
=======
 800fae6:	b580      	push	{r7, lr}
 800fae8:	b082      	sub	sp, #8
 800faea:	af00      	add	r7, sp, #0
 800faec:	4603      	mov	r3, r0
 800faee:	71fb      	strb	r3, [r7, #7]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8011b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b90:	4618      	mov	r0, r3
 8011b92:	f7ff ff31 	bl	80119f8 <__NVIC_EnableIRQ>
}
 8011b96:	bf00      	nop
 8011b98:	3708      	adds	r7, #8
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}

08011b9e <HAL_SYSTICK_Config>:
=======
 800faf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7ff ff31 	bl	800f95c <__NVIC_EnableIRQ>
}
 800fafa:	bf00      	nop
 800fafc:	3708      	adds	r7, #8
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}

0800fb02 <HAL_SYSTICK_Config>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8011b9e:	b580      	push	{r7, lr}
 8011ba0:	b082      	sub	sp, #8
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f7ff ffa2 	bl	8011af0 <SysTick_Config>
 8011bac:	4603      	mov	r3, r0
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3708      	adds	r7, #8
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
	...

08011bb8 <HAL_DMA_Init>:
=======
 800fb02:	b580      	push	{r7, lr}
 800fb04:	b082      	sub	sp, #8
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f7ff ffa2 	bl	800fa54 <SysTick_Config>
 800fb10:	4603      	mov	r3, r0
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3708      	adds	r7, #8
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
	...

0800fb1c <HAL_DMA_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b086      	sub	sp, #24
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8011bc4:	f7ff f930 	bl	8010e28 <HAL_GetTick>
 8011bc8:	6138      	str	r0, [r7, #16]
=======
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b086      	sub	sp, #24
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800fb24:	2300      	movs	r3, #0
 800fb26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800fb28:	f7ff f930 	bl	800ed8c <HAL_GetTick>
 800fb2c:	6138      	str	r0, [r7, #16]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< HEAD
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d101      	bne.n	8011bd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	e099      	b.n	8011d08 <HAL_DMA_Init+0x150>
=======
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d101      	bne.n	800fb38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800fb34:	2301      	movs	r3, #1
 800fb36:	e099      	b.n	800fc6c <HAL_DMA_Init+0x150>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2202      	movs	r2, #2
 8011be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	681a      	ldr	r2, [r3, #0]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	f022 0201 	bic.w	r2, r2, #1
 8011bf2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011bf4:	e00f      	b.n	8011c16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011bf6:	f7ff f917 	bl	8010e28 <HAL_GetTick>
 8011bfa:	4602      	mov	r2, r0
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	1ad3      	subs	r3, r2, r3
 8011c00:	2b05      	cmp	r3, #5
 8011c02:	d908      	bls.n	8011c16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2220      	movs	r2, #32
 8011c08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2203      	movs	r2, #3
 8011c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8011c12:	2303      	movs	r3, #3
 8011c14:	e078      	b.n	8011d08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	f003 0301 	and.w	r3, r3, #1
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d1e8      	bne.n	8011bf6 <HAL_DMA_Init+0x3e>
=======
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2202      	movs	r2, #2
 800fb44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	681a      	ldr	r2, [r3, #0]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f022 0201 	bic.w	r2, r2, #1
 800fb56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800fb58:	e00f      	b.n	800fb7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800fb5a:	f7ff f917 	bl	800ed8c <HAL_GetTick>
 800fb5e:	4602      	mov	r2, r0
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	1ad3      	subs	r3, r2, r3
 800fb64:	2b05      	cmp	r3, #5
 800fb66:	d908      	bls.n	800fb7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2220      	movs	r2, #32
 800fb6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2203      	movs	r2, #3
 800fb72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800fb76:	2303      	movs	r3, #3
 800fb78:	e078      	b.n	800fc6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	f003 0301 	and.w	r3, r3, #1
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d1e8      	bne.n	800fb5a <HAL_DMA_Init+0x3e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< HEAD
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011c2c:	697a      	ldr	r2, [r7, #20]
 8011c2e:	4b38      	ldr	r3, [pc, #224]	; (8011d10 <HAL_DMA_Init+0x158>)
 8011c30:	4013      	ands	r3, r2
 8011c32:	617b      	str	r3, [r7, #20]
=======
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800fb90:	697a      	ldr	r2, [r7, #20]
 800fb92:	4b38      	ldr	r3, [pc, #224]	; (800fc74 <HAL_DMA_Init+0x158>)
 800fb94:	4013      	ands	r3, r2
 800fb96:	617b      	str	r3, [r7, #20]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< HEAD
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	685a      	ldr	r2, [r3, #4]
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	689b      	ldr	r3, [r3, #8]
 8011c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	691b      	ldr	r3, [r3, #16]
 8011c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011c4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	699b      	ldr	r3, [r3, #24]
 8011c54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011c5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	6a1b      	ldr	r3, [r3, #32]
 8011c60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011c62:	697a      	ldr	r2, [r7, #20]
 8011c64:	4313      	orrs	r3, r2
 8011c66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c6c:	2b04      	cmp	r3, #4
 8011c6e:	d107      	bne.n	8011c80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c78:	4313      	orrs	r3, r2
 8011c7a:	697a      	ldr	r2, [r7, #20]
 8011c7c:	4313      	orrs	r3, r2
 8011c7e:	617b      	str	r3, [r7, #20]
=======
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	685a      	ldr	r2, [r3, #4]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800fba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	691b      	ldr	r3, [r3, #16]
 800fbac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fbb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	699b      	ldr	r3, [r3, #24]
 800fbb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fbbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6a1b      	ldr	r3, [r3, #32]
 800fbc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800fbc6:	697a      	ldr	r2, [r7, #20]
 800fbc8:	4313      	orrs	r3, r2
 800fbca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbd0:	2b04      	cmp	r3, #4
 800fbd2:	d107      	bne.n	800fbe4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbdc:	4313      	orrs	r3, r2
 800fbde:	697a      	ldr	r2, [r7, #20]
 800fbe0:	4313      	orrs	r3, r2
 800fbe2:	617b      	str	r3, [r7, #20]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< HEAD
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	697a      	ldr	r2, [r7, #20]
 8011c86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	695b      	ldr	r3, [r3, #20]
 8011c8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	f023 0307 	bic.w	r3, r3, #7
 8011c96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c9c:	697a      	ldr	r2, [r7, #20]
 8011c9e:	4313      	orrs	r3, r2
 8011ca0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ca6:	2b04      	cmp	r3, #4
 8011ca8:	d117      	bne.n	8011cda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cae:	697a      	ldr	r2, [r7, #20]
 8011cb0:	4313      	orrs	r3, r2
 8011cb2:	617b      	str	r3, [r7, #20]
=======
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	697a      	ldr	r2, [r7, #20]
 800fbea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	695b      	ldr	r3, [r3, #20]
 800fbf2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	f023 0307 	bic.w	r3, r3, #7
 800fbfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc00:	697a      	ldr	r2, [r7, #20]
 800fc02:	4313      	orrs	r3, r2
 800fc04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc0a:	2b04      	cmp	r3, #4
 800fc0c:	d117      	bne.n	800fc3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc12:	697a      	ldr	r2, [r7, #20]
 800fc14:	4313      	orrs	r3, r2
 800fc16:	617b      	str	r3, [r7, #20]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< HEAD
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d00e      	beq.n	8011cda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011cbc:	6878      	ldr	r0, [r7, #4]
 8011cbe:	f000 fadf 	bl	8012280 <DMA_CheckFifoParam>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d008      	beq.n	8011cda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2240      	movs	r2, #64	; 0x40
 8011ccc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	e016      	b.n	8011d08 <HAL_DMA_Init+0x150>
=======
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d00e      	beq.n	800fc3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f000 fadf 	bl	80101e4 <DMA_CheckFifoParam>
 800fc26:	4603      	mov	r3, r0
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d008      	beq.n	800fc3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2240      	movs	r2, #64	; 0x40
 800fc30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2201      	movs	r2, #1
 800fc36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	e016      	b.n	800fc6c <HAL_DMA_Init+0x150>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< HEAD
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	697a      	ldr	r2, [r7, #20]
 8011ce0:	615a      	str	r2, [r3, #20]
=======
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	697a      	ldr	r2, [r7, #20]
 800fc44:	615a      	str	r2, [r3, #20]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f000 fa96 	bl	8012214 <DMA_CalcBaseAndBitshift>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011cf0:	223f      	movs	r2, #63	; 0x3f
 8011cf2:	409a      	lsls	r2, r3
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2201      	movs	r2, #1
 8011d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8011d06:	2300      	movs	r3, #0
}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	3718      	adds	r7, #24
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}
 8011d10:	f010803f 	.word	0xf010803f

08011d14 <HAL_DMA_Start_IT>:
=======
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 fa96 	bl	8010178 <DMA_CalcBaseAndBitshift>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc54:	223f      	movs	r2, #63	; 0x3f
 800fc56:	409a      	lsls	r2, r3
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2201      	movs	r2, #1
 800fc66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800fc6a:	2300      	movs	r3, #0
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3718      	adds	r7, #24
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	f010803f 	.word	0xf010803f

0800fc78 <HAL_DMA_Start_IT>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b086      	sub	sp, #24
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	60f8      	str	r0, [r7, #12]
 8011d1c:	60b9      	str	r1, [r7, #8]
 8011d1e:	607a      	str	r2, [r7, #4]
 8011d20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011d22:	2300      	movs	r3, #0
 8011d24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d2a:	613b      	str	r3, [r7, #16]
=======
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b086      	sub	sp, #24
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	60f8      	str	r0, [r7, #12]
 800fc80:	60b9      	str	r1, [r7, #8]
 800fc82:	607a      	str	r2, [r7, #4]
 800fc84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fc86:	2300      	movs	r3, #0
 800fc88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc8e:	613b      	str	r3, [r7, #16]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011d32:	2b01      	cmp	r3, #1
 8011d34:	d101      	bne.n	8011d3a <HAL_DMA_Start_IT+0x26>
 8011d36:	2302      	movs	r3, #2
 8011d38:	e040      	b.n	8011dbc <HAL_DMA_Start_IT+0xa8>
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	2201      	movs	r2, #1
 8011d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011d48:	b2db      	uxtb	r3, r3
 8011d4a:	2b01      	cmp	r3, #1
 8011d4c:	d12f      	bne.n	8011dae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	2202      	movs	r2, #2
 8011d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	687a      	ldr	r2, [r7, #4]
 8011d60:	68b9      	ldr	r1, [r7, #8]
 8011d62:	68f8      	ldr	r0, [r7, #12]
 8011d64:	f000 fa28 	bl	80121b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d6c:	223f      	movs	r2, #63	; 0x3f
 8011d6e:	409a      	lsls	r2, r3
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	681a      	ldr	r2, [r3, #0]
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	f042 0216 	orr.w	r2, r2, #22
 8011d82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d007      	beq.n	8011d9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	681a      	ldr	r2, [r3, #0]
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	f042 0208 	orr.w	r2, r2, #8
 8011d9a:	601a      	str	r2, [r3, #0]
=======
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc96:	2b01      	cmp	r3, #1
 800fc98:	d101      	bne.n	800fc9e <HAL_DMA_Start_IT+0x26>
 800fc9a:	2302      	movs	r3, #2
 800fc9c:	e040      	b.n	800fd20 <HAL_DMA_Start_IT+0xa8>
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2201      	movs	r2, #1
 800fca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	2b01      	cmp	r3, #1
 800fcb0:	d12f      	bne.n	800fd12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	2202      	movs	r2, #2
 800fcb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	687a      	ldr	r2, [r7, #4]
 800fcc4:	68b9      	ldr	r1, [r7, #8]
 800fcc6:	68f8      	ldr	r0, [r7, #12]
 800fcc8:	f000 fa28 	bl	801011c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcd0:	223f      	movs	r2, #63	; 0x3f
 800fcd2:	409a      	lsls	r2, r3
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	f042 0216 	orr.w	r2, r2, #22
 800fce6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d007      	beq.n	800fd00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	681a      	ldr	r2, [r3, #0]
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	f042 0208 	orr.w	r2, r2, #8
 800fcfe:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	681a      	ldr	r2, [r3, #0]
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	f042 0201 	orr.w	r2, r2, #1
 8011daa:	601a      	str	r2, [r3, #0]
 8011dac:	e005      	b.n	8011dba <HAL_DMA_Start_IT+0xa6>
=======
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	681a      	ldr	r2, [r3, #0]
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f042 0201 	orr.w	r2, r2, #1
 800fd0e:	601a      	str	r2, [r3, #0]
 800fd10:	e005      	b.n	800fd1e <HAL_DMA_Start_IT+0xa6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
<<<<<<< HEAD
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	2200      	movs	r2, #0
 8011db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8011db6:	2302      	movs	r3, #2
 8011db8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8011dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3718      	adds	r7, #24
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}

08011dc4 <HAL_DMA_Abort>:
=======
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2200      	movs	r2, #0
 800fd16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800fd1a:	2302      	movs	r3, #2
 800fd1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800fd1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3718      	adds	r7, #24
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <HAL_DMA_Abort>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b084      	sub	sp, #16
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011dd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8011dd2:	f7ff f829 	bl	8010e28 <HAL_GetTick>
 8011dd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011dde:	b2db      	uxtb	r3, r3
 8011de0:	2b02      	cmp	r3, #2
 8011de2:	d008      	beq.n	8011df6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2280      	movs	r2, #128	; 0x80
 8011de8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2200      	movs	r2, #0
 8011dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8011df2:	2301      	movs	r3, #1
 8011df4:	e052      	b.n	8011e9c <HAL_DMA_Abort+0xd8>
=======
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b084      	sub	sp, #16
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800fd36:	f7ff f829 	bl	800ed8c <HAL_GetTick>
 800fd3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fd42:	b2db      	uxtb	r3, r3
 800fd44:	2b02      	cmp	r3, #2
 800fd46:	d008      	beq.n	800fd5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2280      	movs	r2, #128	; 0x80
 800fd4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800fd56:	2301      	movs	r3, #1
 800fd58:	e052      	b.n	800fe00 <HAL_DMA_Abort+0xd8>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< HEAD
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	681a      	ldr	r2, [r3, #0]
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f022 0216 	bic.w	r2, r2, #22
 8011e04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	695a      	ldr	r2, [r3, #20]
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011e14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d103      	bne.n	8011e26 <HAL_DMA_Abort+0x62>
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d007      	beq.n	8011e36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	681a      	ldr	r2, [r3, #0]
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	f022 0208 	bic.w	r2, r2, #8
 8011e34:	601a      	str	r2, [r3, #0]
=======
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	681a      	ldr	r2, [r3, #0]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	f022 0216 	bic.w	r2, r2, #22
 800fd68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	695a      	ldr	r2, [r3, #20]
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fd78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d103      	bne.n	800fd8a <HAL_DMA_Abort+0x62>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d007      	beq.n	800fd9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	681a      	ldr	r2, [r3, #0]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	f022 0208 	bic.w	r2, r2, #8
 800fd98:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	681a      	ldr	r2, [r3, #0]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	f022 0201 	bic.w	r2, r2, #1
 8011e44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011e46:	e013      	b.n	8011e70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011e48:	f7fe ffee 	bl	8010e28 <HAL_GetTick>
 8011e4c:	4602      	mov	r2, r0
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	1ad3      	subs	r3, r2, r3
 8011e52:	2b05      	cmp	r3, #5
 8011e54:	d90c      	bls.n	8011e70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2220      	movs	r2, #32
 8011e5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2203      	movs	r2, #3
 8011e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8011e6c:	2303      	movs	r3, #3
 8011e6e:	e015      	b.n	8011e9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	f003 0301 	and.w	r3, r3, #1
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d1e4      	bne.n	8011e48 <HAL_DMA_Abort+0x84>
=======
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	681a      	ldr	r2, [r3, #0]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f022 0201 	bic.w	r2, r2, #1
 800fda8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800fdaa:	e013      	b.n	800fdd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800fdac:	f7fe ffee 	bl	800ed8c <HAL_GetTick>
 800fdb0:	4602      	mov	r2, r0
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	1ad3      	subs	r3, r2, r3
 800fdb6:	2b05      	cmp	r3, #5
 800fdb8:	d90c      	bls.n	800fdd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2220      	movs	r2, #32
 800fdbe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2203      	movs	r2, #3
 800fdcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800fdd0:	2303      	movs	r3, #3
 800fdd2:	e015      	b.n	800fe00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f003 0301 	and.w	r3, r3, #1
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d1e4      	bne.n	800fdac <HAL_DMA_Abort+0x84>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e82:	223f      	movs	r2, #63	; 0x3f
 8011e84:	409a      	lsls	r2, r3
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	2201      	movs	r2, #1
 8011e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8011e9a:	2300      	movs	r3, #0
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3710      	adds	r7, #16
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}

08011ea4 <HAL_DMA_IRQHandler>:
=======
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fde6:	223f      	movs	r2, #63	; 0x3f
 800fde8:	409a      	lsls	r2, r3
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800fdfe:	2300      	movs	r3, #0
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3710      	adds	r7, #16
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <HAL_DMA_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b086      	sub	sp, #24
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8011eac:	2300      	movs	r3, #0
 8011eae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8011eb0:	4b92      	ldr	r3, [pc, #584]	; (80120fc <HAL_DMA_IRQHandler+0x258>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	4a92      	ldr	r2, [pc, #584]	; (8012100 <HAL_DMA_IRQHandler+0x25c>)
 8011eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8011eba:	0a9b      	lsrs	r3, r3, #10
 8011ebc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ec2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8011ec4:	693b      	ldr	r3, [r7, #16]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ece:	2208      	movs	r2, #8
 8011ed0:	409a      	lsls	r2, r3
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	4013      	ands	r3, r2
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d01a      	beq.n	8011f10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	f003 0304 	and.w	r3, r3, #4
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d013      	beq.n	8011f10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	f022 0204 	bic.w	r2, r2, #4
 8011ef6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011efc:	2208      	movs	r2, #8
 8011efe:	409a      	lsls	r2, r3
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f08:	f043 0201 	orr.w	r2, r3, #1
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b086      	sub	sp, #24
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800fe10:	2300      	movs	r3, #0
 800fe12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800fe14:	4b92      	ldr	r3, [pc, #584]	; (8010060 <HAL_DMA_IRQHandler+0x258>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	4a92      	ldr	r2, [pc, #584]	; (8010064 <HAL_DMA_IRQHandler+0x25c>)
 800fe1a:	fba2 2303 	umull	r2, r3, r2, r3
 800fe1e:	0a9b      	lsrs	r3, r3, #10
 800fe20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe32:	2208      	movs	r2, #8
 800fe34:	409a      	lsls	r2, r3
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	4013      	ands	r3, r2
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d01a      	beq.n	800fe74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	f003 0304 	and.w	r3, r3, #4
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d013      	beq.n	800fe74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	681a      	ldr	r2, [r3, #0]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	f022 0204 	bic.w	r2, r2, #4
 800fe5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe60:	2208      	movs	r2, #8
 800fe62:	409a      	lsls	r2, r3
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe6c:	f043 0201 	orr.w	r2, r3, #1
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f14:	2201      	movs	r2, #1
 8011f16:	409a      	lsls	r2, r3
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	4013      	ands	r3, r2
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d012      	beq.n	8011f46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	695b      	ldr	r3, [r3, #20]
 8011f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d00b      	beq.n	8011f46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f32:	2201      	movs	r2, #1
 8011f34:	409a      	lsls	r2, r3
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f3e:	f043 0202 	orr.w	r2, r3, #2
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe78:	2201      	movs	r2, #1
 800fe7a:	409a      	lsls	r2, r3
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	4013      	ands	r3, r2
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d012      	beq.n	800feaa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	695b      	ldr	r3, [r3, #20]
 800fe8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d00b      	beq.n	800feaa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe96:	2201      	movs	r2, #1
 800fe98:	409a      	lsls	r2, r3
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fea2:	f043 0202 	orr.w	r2, r3, #2
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f4a:	2204      	movs	r2, #4
 8011f4c:	409a      	lsls	r2, r3
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	4013      	ands	r3, r2
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d012      	beq.n	8011f7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	f003 0302 	and.w	r3, r3, #2
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d00b      	beq.n	8011f7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f68:	2204      	movs	r2, #4
 8011f6a:	409a      	lsls	r2, r3
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f74:	f043 0204 	orr.w	r2, r3, #4
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800feae:	2204      	movs	r2, #4
 800feb0:	409a      	lsls	r2, r3
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	4013      	ands	r3, r2
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d012      	beq.n	800fee0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	f003 0302 	and.w	r3, r3, #2
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d00b      	beq.n	800fee0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fecc:	2204      	movs	r2, #4
 800fece:	409a      	lsls	r2, r3
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fed8:	f043 0204 	orr.w	r2, r3, #4
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f80:	2210      	movs	r2, #16
 8011f82:	409a      	lsls	r2, r3
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	4013      	ands	r3, r2
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d043      	beq.n	8012014 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	f003 0308 	and.w	r3, r3, #8
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d03c      	beq.n	8012014 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f9e:	2210      	movs	r2, #16
 8011fa0:	409a      	lsls	r2, r3
 8011fa2:	693b      	ldr	r3, [r7, #16]
 8011fa4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d018      	beq.n	8011fe6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d108      	bne.n	8011fd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d024      	beq.n	8012014 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	4798      	blx	r3
 8011fd2:	e01f      	b.n	8012014 <HAL_DMA_IRQHandler+0x170>
=======
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fee4:	2210      	movs	r2, #16
 800fee6:	409a      	lsls	r2, r3
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	4013      	ands	r3, r2
 800feec:	2b00      	cmp	r3, #0
 800feee:	d043      	beq.n	800ff78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	f003 0308 	and.w	r3, r3, #8
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d03c      	beq.n	800ff78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff02:	2210      	movs	r2, #16
 800ff04:	409a      	lsls	r2, r3
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d018      	beq.n	800ff4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d108      	bne.n	800ff38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d024      	beq.n	800ff78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	4798      	blx	r3
 800ff36:	e01f      	b.n	800ff78 <HAL_DMA_IRQHandler+0x170>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< HEAD
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d01b      	beq.n	8012014 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	4798      	blx	r3
 8011fe4:	e016      	b.n	8012014 <HAL_DMA_IRQHandler+0x170>
=======
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d01b      	beq.n	800ff78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	4798      	blx	r3
 800ff48:	e016      	b.n	800ff78 <HAL_DMA_IRQHandler+0x170>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d107      	bne.n	8012004 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	681a      	ldr	r2, [r3, #0]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	f022 0208 	bic.w	r2, r2, #8
 8012002:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012008:	2b00      	cmp	r3, #0
 801200a:	d003      	beq.n	8012014 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	4798      	blx	r3
=======
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d107      	bne.n	800ff68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	681a      	ldr	r2, [r3, #0]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	f022 0208 	bic.w	r2, r2, #8
 800ff66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d003      	beq.n	800ff78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	4798      	blx	r3
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012018:	2220      	movs	r2, #32
 801201a:	409a      	lsls	r2, r3
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	4013      	ands	r3, r2
 8012020:	2b00      	cmp	r3, #0
 8012022:	f000 808e 	beq.w	8012142 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	f003 0310 	and.w	r3, r3, #16
 8012030:	2b00      	cmp	r3, #0
 8012032:	f000 8086 	beq.w	8012142 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801203a:	2220      	movs	r2, #32
 801203c:	409a      	lsls	r2, r3
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012048:	b2db      	uxtb	r3, r3
 801204a:	2b05      	cmp	r3, #5
 801204c:	d136      	bne.n	80120bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	681a      	ldr	r2, [r3, #0]
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	f022 0216 	bic.w	r2, r2, #22
 801205c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	695a      	ldr	r2, [r3, #20]
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801206c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012072:	2b00      	cmp	r3, #0
 8012074:	d103      	bne.n	801207e <HAL_DMA_IRQHandler+0x1da>
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801207a:	2b00      	cmp	r3, #0
 801207c:	d007      	beq.n	801208e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	681a      	ldr	r2, [r3, #0]
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	f022 0208 	bic.w	r2, r2, #8
 801208c:	601a      	str	r2, [r3, #0]
=======
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff7c:	2220      	movs	r2, #32
 800ff7e:	409a      	lsls	r2, r3
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	4013      	ands	r3, r2
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	f000 808e 	beq.w	80100a6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f003 0310 	and.w	r3, r3, #16
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	f000 8086 	beq.w	80100a6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff9e:	2220      	movs	r2, #32
 800ffa0:	409a      	lsls	r2, r3
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ffac:	b2db      	uxtb	r3, r3
 800ffae:	2b05      	cmp	r3, #5
 800ffb0:	d136      	bne.n	8010020 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	681a      	ldr	r2, [r3, #0]
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f022 0216 	bic.w	r2, r2, #22
 800ffc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	695a      	ldr	r2, [r3, #20]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ffd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d103      	bne.n	800ffe2 <HAL_DMA_IRQHandler+0x1da>
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d007      	beq.n	800fff2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f022 0208 	bic.w	r2, r2, #8
 800fff0:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012092:	223f      	movs	r2, #63	; 0x3f
 8012094:	409a      	lsls	r2, r3
 8012096:	693b      	ldr	r3, [r7, #16]
 8012098:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2200      	movs	r2, #0
 801209e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2201      	movs	r2, #1
 80120a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d07d      	beq.n	80121ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	4798      	blx	r3
        }
        return;
 80120ba:	e078      	b.n	80121ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d01c      	beq.n	8012104 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d108      	bne.n	80120ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d030      	beq.n	8012142 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	4798      	blx	r3
 80120e8:	e02b      	b.n	8012142 <HAL_DMA_IRQHandler+0x29e>
=======
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fff6:	223f      	movs	r2, #63	; 0x3f
 800fff8:	409a      	lsls	r2, r3
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2200      	movs	r2, #0
 8010002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2201      	movs	r2, #1
 801000a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010012:	2b00      	cmp	r3, #0
 8010014:	d07d      	beq.n	8010112 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	4798      	blx	r3
        }
        return;
 801001e:	e078      	b.n	8010112 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801002a:	2b00      	cmp	r3, #0
 801002c:	d01c      	beq.n	8010068 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010038:	2b00      	cmp	r3, #0
 801003a:	d108      	bne.n	801004e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010040:	2b00      	cmp	r3, #0
 8010042:	d030      	beq.n	80100a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	4798      	blx	r3
 801004c:	e02b      	b.n	80100a6 <HAL_DMA_IRQHandler+0x29e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d027      	beq.n	8012142 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	4798      	blx	r3
 80120fa:	e022      	b.n	8012142 <HAL_DMA_IRQHandler+0x29e>
 80120fc:	20000074 	.word	0x20000074
 8012100:	1b4e81b5 	.word	0x1b4e81b5
=======
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010052:	2b00      	cmp	r3, #0
 8010054:	d027      	beq.n	80100a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	4798      	blx	r3
 801005e:	e022      	b.n	80100a6 <HAL_DMA_IRQHandler+0x29e>
 8010060:	20000d00 	.word	0x20000d00
 8010064:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801210e:	2b00      	cmp	r3, #0
 8012110:	d10f      	bne.n	8012132 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	681a      	ldr	r2, [r3, #0]
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	f022 0210 	bic.w	r2, r2, #16
 8012120:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2200      	movs	r2, #0
 8012126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2201      	movs	r2, #1
 801212e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012136:	2b00      	cmp	r3, #0
 8012138:	d003      	beq.n	8012142 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	4798      	blx	r3
=======
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010072:	2b00      	cmp	r3, #0
 8010074:	d10f      	bne.n	8010096 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	681a      	ldr	r2, [r3, #0]
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f022 0210 	bic.w	r2, r2, #16
 8010084:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2200      	movs	r2, #0
 801008a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2201      	movs	r2, #1
 8010092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801009a:	2b00      	cmp	r3, #0
 801009c:	d003      	beq.n	80100a6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	4798      	blx	r3
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< HEAD
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012146:	2b00      	cmp	r3, #0
 8012148:	d032      	beq.n	80121b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801214e:	f003 0301 	and.w	r3, r3, #1
 8012152:	2b00      	cmp	r3, #0
 8012154:	d022      	beq.n	801219c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2205      	movs	r2, #5
 801215a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	681a      	ldr	r2, [r3, #0]
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	f022 0201 	bic.w	r2, r2, #1
 801216c:	601a      	str	r2, [r3, #0]
=======
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d032      	beq.n	8010114 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100b2:	f003 0301 	and.w	r3, r3, #1
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d022      	beq.n	8010100 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2205      	movs	r2, #5
 80100be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	681a      	ldr	r2, [r3, #0]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	f022 0201 	bic.w	r2, r2, #1
 80100d0:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

      do
      {
        if (++count > timeout)
<<<<<<< HEAD
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	3301      	adds	r3, #1
 8012172:	60bb      	str	r3, [r7, #8]
 8012174:	697a      	ldr	r2, [r7, #20]
 8012176:	429a      	cmp	r2, r3
 8012178:	d307      	bcc.n	801218a <HAL_DMA_IRQHandler+0x2e6>
=======
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	3301      	adds	r3, #1
 80100d6:	60bb      	str	r3, [r7, #8]
 80100d8:	697a      	ldr	r2, [r7, #20]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d307      	bcc.n	80100ee <HAL_DMA_IRQHandler+0x2e6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< HEAD
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	f003 0301 	and.w	r3, r3, #1
 8012184:	2b00      	cmp	r3, #0
 8012186:	d1f2      	bne.n	801216e <HAL_DMA_IRQHandler+0x2ca>
 8012188:	e000      	b.n	801218c <HAL_DMA_IRQHandler+0x2e8>
          break;
 801218a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2200      	movs	r2, #0
 8012190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2201      	movs	r2, #1
 8012198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d005      	beq.n	80121b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	4798      	blx	r3
 80121ac:	e000      	b.n	80121b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80121ae:	bf00      	nop
    }
  }
}
 80121b0:	3718      	adds	r7, #24
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bd80      	pop	{r7, pc}
 80121b6:	bf00      	nop

080121b8 <DMA_SetConfig>:
=======
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f003 0301 	and.w	r3, r3, #1
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d1f2      	bne.n	80100d2 <HAL_DMA_IRQHandler+0x2ca>
 80100ec:	e000      	b.n	80100f0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80100ee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2200      	movs	r2, #0
 80100f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2201      	movs	r2, #1
 80100fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010104:	2b00      	cmp	r3, #0
 8010106:	d005      	beq.n	8010114 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	4798      	blx	r3
 8010110:	e000      	b.n	8010114 <HAL_DMA_IRQHandler+0x30c>
        return;
 8010112:	bf00      	nop
    }
  }
}
 8010114:	3718      	adds	r7, #24
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop

0801011c <DMA_SetConfig>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 80121b8:	b480      	push	{r7}
 80121ba:	b085      	sub	sp, #20
 80121bc:	af00      	add	r7, sp, #0
 80121be:	60f8      	str	r0, [r7, #12]
 80121c0:	60b9      	str	r1, [r7, #8]
 80121c2:	607a      	str	r2, [r7, #4]
 80121c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	681a      	ldr	r2, [r3, #0]
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80121d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	683a      	ldr	r2, [r7, #0]
 80121dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	689b      	ldr	r3, [r3, #8]
 80121e2:	2b40      	cmp	r3, #64	; 0x40
 80121e4:	d108      	bne.n	80121f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	687a      	ldr	r2, [r7, #4]
 80121ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	68ba      	ldr	r2, [r7, #8]
 80121f4:	60da      	str	r2, [r3, #12]
=======
 801011c:	b480      	push	{r7}
 801011e:	b085      	sub	sp, #20
 8010120:	af00      	add	r7, sp, #0
 8010122:	60f8      	str	r0, [r7, #12]
 8010124:	60b9      	str	r1, [r7, #8]
 8010126:	607a      	str	r2, [r7, #4]
 8010128:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	681a      	ldr	r2, [r3, #0]
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010138:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	683a      	ldr	r2, [r7, #0]
 8010140:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	689b      	ldr	r3, [r3, #8]
 8010146:	2b40      	cmp	r3, #64	; 0x40
 8010148:	d108      	bne.n	801015c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	687a      	ldr	r2, [r7, #4]
 8010150:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	68ba      	ldr	r2, [r7, #8]
 8010158:	60da      	str	r2, [r3, #12]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< HEAD
 80121f6:	e007      	b.n	8012208 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	68ba      	ldr	r2, [r7, #8]
 80121fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	687a      	ldr	r2, [r7, #4]
 8012206:	60da      	str	r2, [r3, #12]
}
 8012208:	bf00      	nop
 801220a:	3714      	adds	r7, #20
 801220c:	46bd      	mov	sp, r7
 801220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012212:	4770      	bx	lr

08012214 <DMA_CalcBaseAndBitshift>:
=======
 801015a:	e007      	b.n	801016c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	68ba      	ldr	r2, [r7, #8]
 8010162:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	687a      	ldr	r2, [r7, #4]
 801016a:	60da      	str	r2, [r3, #12]
}
 801016c:	bf00      	nop
 801016e:	3714      	adds	r7, #20
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr

08010178 <DMA_CalcBaseAndBitshift>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8012214:	b480      	push	{r7}
 8012216:	b085      	sub	sp, #20
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	b2db      	uxtb	r3, r3
 8012222:	3b10      	subs	r3, #16
 8012224:	4a14      	ldr	r2, [pc, #80]	; (8012278 <DMA_CalcBaseAndBitshift+0x64>)
 8012226:	fba2 2303 	umull	r2, r3, r2, r3
 801222a:	091b      	lsrs	r3, r3, #4
 801222c:	60fb      	str	r3, [r7, #12]
=======
 8010178:	b480      	push	{r7}
 801017a:	b085      	sub	sp, #20
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	b2db      	uxtb	r3, r3
 8010186:	3b10      	subs	r3, #16
 8010188:	4a14      	ldr	r2, [pc, #80]	; (80101dc <DMA_CalcBaseAndBitshift+0x64>)
 801018a:	fba2 2303 	umull	r2, r3, r2, r3
 801018e:	091b      	lsrs	r3, r3, #4
 8010190:	60fb      	str	r3, [r7, #12]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< HEAD
 801222e:	4a13      	ldr	r2, [pc, #76]	; (801227c <DMA_CalcBaseAndBitshift+0x68>)
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	4413      	add	r3, r2
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	461a      	mov	r2, r3
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	2b03      	cmp	r3, #3
 8012240:	d909      	bls.n	8012256 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801224a:	f023 0303 	bic.w	r3, r3, #3
 801224e:	1d1a      	adds	r2, r3, #4
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	659a      	str	r2, [r3, #88]	; 0x58
 8012254:	e007      	b.n	8012266 <DMA_CalcBaseAndBitshift+0x52>
=======
 8010192:	4a13      	ldr	r2, [pc, #76]	; (80101e0 <DMA_CalcBaseAndBitshift+0x68>)
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	4413      	add	r3, r2
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	461a      	mov	r2, r3
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2b03      	cmp	r3, #3
 80101a4:	d909      	bls.n	80101ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80101ae:	f023 0303 	bic.w	r3, r3, #3
 80101b2:	1d1a      	adds	r2, r3, #4
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	659a      	str	r2, [r3, #88]	; 0x58
 80101b8:	e007      	b.n	80101ca <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< HEAD
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801225e:	f023 0303 	bic.w	r3, r3, #3
 8012262:	687a      	ldr	r2, [r7, #4]
 8012264:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801226a:	4618      	mov	r0, r3
 801226c:	3714      	adds	r7, #20
 801226e:	46bd      	mov	sp, r7
 8012270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012274:	4770      	bx	lr
 8012276:	bf00      	nop
 8012278:	aaaaaaab 	.word	0xaaaaaaab
 801227c:	08018b08 	.word	0x08018b08

08012280 <DMA_CheckFifoParam>:
=======
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80101c2:	f023 0303 	bic.w	r3, r3, #3
 80101c6:	687a      	ldr	r2, [r7, #4]
 80101c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3714      	adds	r7, #20
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop
 80101dc:	aaaaaaab 	.word	0xaaaaaaab
 80101e0:	08016a70 	.word	0x08016a70

080101e4 <DMA_CheckFifoParam>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8012280:	b480      	push	{r7}
 8012282:	b085      	sub	sp, #20
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012288:	2300      	movs	r3, #0
 801228a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012290:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	699b      	ldr	r3, [r3, #24]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d11f      	bne.n	80122da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801229a:	68bb      	ldr	r3, [r7, #8]
 801229c:	2b03      	cmp	r3, #3
 801229e:	d855      	bhi.n	801234c <DMA_CheckFifoParam+0xcc>
 80122a0:	a201      	add	r2, pc, #4	; (adr r2, 80122a8 <DMA_CheckFifoParam+0x28>)
 80122a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122a6:	bf00      	nop
 80122a8:	080122b9 	.word	0x080122b9
 80122ac:	080122cb 	.word	0x080122cb
 80122b0:	080122b9 	.word	0x080122b9
 80122b4:	0801234d 	.word	0x0801234d
=======
 80101e4:	b480      	push	{r7}
 80101e6:	b085      	sub	sp, #20
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80101ec:	2300      	movs	r3, #0
 80101ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	699b      	ldr	r3, [r3, #24]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d11f      	bne.n	801023e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	2b03      	cmp	r3, #3
 8010202:	d855      	bhi.n	80102b0 <DMA_CheckFifoParam+0xcc>
 8010204:	a201      	add	r2, pc, #4	; (adr r2, 801020c <DMA_CheckFifoParam+0x28>)
 8010206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801020a:	bf00      	nop
 801020c:	0801021d 	.word	0x0801021d
 8010210:	0801022f 	.word	0x0801022f
 8010214:	0801021d 	.word	0x0801021d
 8010218:	080102b1 	.word	0x080102b1
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d045      	beq.n	8012350 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80122c4:	2301      	movs	r3, #1
 80122c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80122c8:	e042      	b.n	8012350 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80122d2:	d13f      	bne.n	8012354 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80122d4:	2301      	movs	r3, #1
 80122d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80122d8:	e03c      	b.n	8012354 <DMA_CheckFifoParam+0xd4>
=======
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010224:	2b00      	cmp	r3, #0
 8010226:	d045      	beq.n	80102b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8010228:	2301      	movs	r3, #1
 801022a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801022c:	e042      	b.n	80102b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010232:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010236:	d13f      	bne.n	80102b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8010238:	2301      	movs	r3, #1
 801023a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801023c:	e03c      	b.n	80102b8 <DMA_CheckFifoParam+0xd4>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< HEAD
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	699b      	ldr	r3, [r3, #24]
 80122de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80122e2:	d121      	bne.n	8012328 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80122e4:	68bb      	ldr	r3, [r7, #8]
 80122e6:	2b03      	cmp	r3, #3
 80122e8:	d836      	bhi.n	8012358 <DMA_CheckFifoParam+0xd8>
 80122ea:	a201      	add	r2, pc, #4	; (adr r2, 80122f0 <DMA_CheckFifoParam+0x70>)
 80122ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122f0:	08012301 	.word	0x08012301
 80122f4:	08012307 	.word	0x08012307
 80122f8:	08012301 	.word	0x08012301
 80122fc:	08012319 	.word	0x08012319
=======
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	699b      	ldr	r3, [r3, #24]
 8010242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010246:	d121      	bne.n	801028c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	2b03      	cmp	r3, #3
 801024c:	d836      	bhi.n	80102bc <DMA_CheckFifoParam+0xd8>
 801024e:	a201      	add	r2, pc, #4	; (adr r2, 8010254 <DMA_CheckFifoParam+0x70>)
 8010250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010254:	08010265 	.word	0x08010265
 8010258:	0801026b 	.word	0x0801026b
 801025c:	08010265 	.word	0x08010265
 8010260:	0801027d 	.word	0x0801027d
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< HEAD
 8012300:	2301      	movs	r3, #1
 8012302:	73fb      	strb	r3, [r7, #15]
      break;
 8012304:	e02f      	b.n	8012366 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801230a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801230e:	2b00      	cmp	r3, #0
 8012310:	d024      	beq.n	801235c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8012312:	2301      	movs	r3, #1
 8012314:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012316:	e021      	b.n	801235c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801231c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012320:	d11e      	bne.n	8012360 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8012322:	2301      	movs	r3, #1
 8012324:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8012326:	e01b      	b.n	8012360 <DMA_CheckFifoParam+0xe0>
=======
 8010264:	2301      	movs	r3, #1
 8010266:	73fb      	strb	r3, [r7, #15]
      break;
 8010268:	e02f      	b.n	80102ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801026e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010272:	2b00      	cmp	r3, #0
 8010274:	d024      	beq.n	80102c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8010276:	2301      	movs	r3, #1
 8010278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801027a:	e021      	b.n	80102c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010280:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010284:	d11e      	bne.n	80102c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8010286:	2301      	movs	r3, #1
 8010288:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801028a:	e01b      	b.n	80102c4 <DMA_CheckFifoParam+0xe0>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< HEAD
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	2b02      	cmp	r3, #2
 801232c:	d902      	bls.n	8012334 <DMA_CheckFifoParam+0xb4>
 801232e:	2b03      	cmp	r3, #3
 8012330:	d003      	beq.n	801233a <DMA_CheckFifoParam+0xba>
=======
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	2b02      	cmp	r3, #2
 8010290:	d902      	bls.n	8010298 <DMA_CheckFifoParam+0xb4>
 8010292:	2b03      	cmp	r3, #3
 8010294:	d003      	beq.n	801029e <DMA_CheckFifoParam+0xba>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< HEAD
 8012332:	e018      	b.n	8012366 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8012334:	2301      	movs	r3, #1
 8012336:	73fb      	strb	r3, [r7, #15]
      break;
 8012338:	e015      	b.n	8012366 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801233e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012342:	2b00      	cmp	r3, #0
 8012344:	d00e      	beq.n	8012364 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8012346:	2301      	movs	r3, #1
 8012348:	73fb      	strb	r3, [r7, #15]
      break;
 801234a:	e00b      	b.n	8012364 <DMA_CheckFifoParam+0xe4>
      break;
 801234c:	bf00      	nop
 801234e:	e00a      	b.n	8012366 <DMA_CheckFifoParam+0xe6>
      break;
 8012350:	bf00      	nop
 8012352:	e008      	b.n	8012366 <DMA_CheckFifoParam+0xe6>
      break;
 8012354:	bf00      	nop
 8012356:	e006      	b.n	8012366 <DMA_CheckFifoParam+0xe6>
      break;
 8012358:	bf00      	nop
 801235a:	e004      	b.n	8012366 <DMA_CheckFifoParam+0xe6>
      break;
 801235c:	bf00      	nop
 801235e:	e002      	b.n	8012366 <DMA_CheckFifoParam+0xe6>
      break;   
 8012360:	bf00      	nop
 8012362:	e000      	b.n	8012366 <DMA_CheckFifoParam+0xe6>
      break;
 8012364:	bf00      	nop
=======
 8010296:	e018      	b.n	80102ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8010298:	2301      	movs	r3, #1
 801029a:	73fb      	strb	r3, [r7, #15]
      break;
 801029c:	e015      	b.n	80102ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00e      	beq.n	80102c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80102aa:	2301      	movs	r3, #1
 80102ac:	73fb      	strb	r3, [r7, #15]
      break;
 80102ae:	e00b      	b.n	80102c8 <DMA_CheckFifoParam+0xe4>
      break;
 80102b0:	bf00      	nop
 80102b2:	e00a      	b.n	80102ca <DMA_CheckFifoParam+0xe6>
      break;
 80102b4:	bf00      	nop
 80102b6:	e008      	b.n	80102ca <DMA_CheckFifoParam+0xe6>
      break;
 80102b8:	bf00      	nop
 80102ba:	e006      	b.n	80102ca <DMA_CheckFifoParam+0xe6>
      break;
 80102bc:	bf00      	nop
 80102be:	e004      	b.n	80102ca <DMA_CheckFifoParam+0xe6>
      break;
 80102c0:	bf00      	nop
 80102c2:	e002      	b.n	80102ca <DMA_CheckFifoParam+0xe6>
      break;   
 80102c4:	bf00      	nop
 80102c6:	e000      	b.n	80102ca <DMA_CheckFifoParam+0xe6>
      break;
 80102c8:	bf00      	nop
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  } 
  
  return status; 
<<<<<<< HEAD
 8012366:	7bfb      	ldrb	r3, [r7, #15]
}
 8012368:	4618      	mov	r0, r3
 801236a:	3714      	adds	r7, #20
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr

08012374 <HAL_FLASH_Program>:
=======
 80102ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3714      	adds	r7, #20
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr

080102d8 <HAL_FLASH_Program>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
<<<<<<< HEAD
 8012374:	b580      	push	{r7, lr}
 8012376:	b086      	sub	sp, #24
 8012378:	af00      	add	r7, sp, #0
 801237a:	60f8      	str	r0, [r7, #12]
 801237c:	60b9      	str	r1, [r7, #8]
 801237e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012382:	2301      	movs	r3, #1
 8012384:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8012386:	4b23      	ldr	r3, [pc, #140]	; (8012414 <HAL_FLASH_Program+0xa0>)
 8012388:	7e1b      	ldrb	r3, [r3, #24]
 801238a:	2b01      	cmp	r3, #1
 801238c:	d101      	bne.n	8012392 <HAL_FLASH_Program+0x1e>
 801238e:	2302      	movs	r3, #2
 8012390:	e03b      	b.n	801240a <HAL_FLASH_Program+0x96>
 8012392:	4b20      	ldr	r3, [pc, #128]	; (8012414 <HAL_FLASH_Program+0xa0>)
 8012394:	2201      	movs	r2, #1
 8012396:	761a      	strb	r2, [r3, #24]
=======
 80102d8:	b580      	push	{r7, lr}
 80102da:	b086      	sub	sp, #24
 80102dc:	af00      	add	r7, sp, #0
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80102e6:	2301      	movs	r3, #1
 80102e8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80102ea:	4b23      	ldr	r3, [pc, #140]	; (8010378 <HAL_FLASH_Program+0xa0>)
 80102ec:	7e1b      	ldrb	r3, [r3, #24]
 80102ee:	2b01      	cmp	r3, #1
 80102f0:	d101      	bne.n	80102f6 <HAL_FLASH_Program+0x1e>
 80102f2:	2302      	movs	r3, #2
 80102f4:	e03b      	b.n	801036e <HAL_FLASH_Program+0x96>
 80102f6:	4b20      	ldr	r3, [pc, #128]	; (8010378 <HAL_FLASH_Program+0xa0>)
 80102f8:	2201      	movs	r2, #1
 80102fa:	761a      	strb	r2, [r3, #24]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
<<<<<<< HEAD
 8012398:	f24c 3050 	movw	r0, #50000	; 0xc350
 801239c:	f000 f924 	bl	80125e8 <FLASH_WaitForLastOperation>
 80123a0:	4603      	mov	r3, r0
 80123a2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80123a4:	7dfb      	ldrb	r3, [r7, #23]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d12b      	bne.n	8012402 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d105      	bne.n	80123bc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80123b0:	783b      	ldrb	r3, [r7, #0]
 80123b2:	4619      	mov	r1, r3
 80123b4:	68b8      	ldr	r0, [r7, #8]
 80123b6:	f000 f9cd 	bl	8012754 <FLASH_Program_Byte>
 80123ba:	e016      	b.n	80123ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	2b01      	cmp	r3, #1
 80123c0:	d105      	bne.n	80123ce <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80123c2:	883b      	ldrh	r3, [r7, #0]
 80123c4:	4619      	mov	r1, r3
 80123c6:	68b8      	ldr	r0, [r7, #8]
 80123c8:	f000 f9a0 	bl	801270c <FLASH_Program_HalfWord>
 80123cc:	e00d      	b.n	80123ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	2b02      	cmp	r3, #2
 80123d2:	d105      	bne.n	80123e0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	4619      	mov	r1, r3
 80123d8:	68b8      	ldr	r0, [r7, #8]
 80123da:	f000 f975 	bl	80126c8 <FLASH_Program_Word>
 80123de:	e004      	b.n	80123ea <HAL_FLASH_Program+0x76>
=======
 80102fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010300:	f000 f924 	bl	801054c <FLASH_WaitForLastOperation>
 8010304:	4603      	mov	r3, r0
 8010306:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8010308:	7dfb      	ldrb	r3, [r7, #23]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d12b      	bne.n	8010366 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d105      	bne.n	8010320 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8010314:	783b      	ldrb	r3, [r7, #0]
 8010316:	4619      	mov	r1, r3
 8010318:	68b8      	ldr	r0, [r7, #8]
 801031a:	f000 f9cd 	bl	80106b8 <FLASH_Program_Byte>
 801031e:	e016      	b.n	801034e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2b01      	cmp	r3, #1
 8010324:	d105      	bne.n	8010332 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8010326:	883b      	ldrh	r3, [r7, #0]
 8010328:	4619      	mov	r1, r3
 801032a:	68b8      	ldr	r0, [r7, #8]
 801032c:	f000 f9a0 	bl	8010670 <FLASH_Program_HalfWord>
 8010330:	e00d      	b.n	801034e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	2b02      	cmp	r3, #2
 8010336:	d105      	bne.n	8010344 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	4619      	mov	r1, r3
 801033c:	68b8      	ldr	r0, [r7, #8]
 801033e:	f000 f975 	bl	801062c <FLASH_Program_Word>
 8010342:	e004      	b.n	801034e <HAL_FLASH_Program+0x76>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
<<<<<<< HEAD
 80123e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80123e4:	68b8      	ldr	r0, [r7, #8]
 80123e6:	f000 f93f 	bl	8012668 <FLASH_Program_DoubleWord>
=======
 8010344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010348:	68b8      	ldr	r0, [r7, #8]
 801034a:	f000 f93f 	bl	80105cc <FLASH_Program_DoubleWord>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
<<<<<<< HEAD
 80123ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80123ee:	f000 f8fb 	bl	80125e8 <FLASH_WaitForLastOperation>
 80123f2:	4603      	mov	r3, r0
 80123f4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80123f6:	4b08      	ldr	r3, [pc, #32]	; (8012418 <HAL_FLASH_Program+0xa4>)
 80123f8:	691b      	ldr	r3, [r3, #16]
 80123fa:	4a07      	ldr	r2, [pc, #28]	; (8012418 <HAL_FLASH_Program+0xa4>)
 80123fc:	f023 0301 	bic.w	r3, r3, #1
 8012400:	6113      	str	r3, [r2, #16]
=======
 801034e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010352:	f000 f8fb 	bl	801054c <FLASH_WaitForLastOperation>
 8010356:	4603      	mov	r3, r0
 8010358:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 801035a:	4b08      	ldr	r3, [pc, #32]	; (801037c <HAL_FLASH_Program+0xa4>)
 801035c:	691b      	ldr	r3, [r3, #16]
 801035e:	4a07      	ldr	r2, [pc, #28]	; (801037c <HAL_FLASH_Program+0xa4>)
 8010360:	f023 0301 	bic.w	r3, r3, #1
 8010364:	6113      	str	r3, [r2, #16]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
<<<<<<< HEAD
 8012402:	4b04      	ldr	r3, [pc, #16]	; (8012414 <HAL_FLASH_Program+0xa0>)
 8012404:	2200      	movs	r2, #0
 8012406:	761a      	strb	r2, [r3, #24]
  
  return status;
 8012408:	7dfb      	ldrb	r3, [r7, #23]
}
 801240a:	4618      	mov	r0, r3
 801240c:	3718      	adds	r7, #24
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}
 8012412:	bf00      	nop
 8012414:	2001a7bc 	.word	0x2001a7bc
 8012418:	40023c00 	.word	0x40023c00

0801241c <HAL_FLASH_IRQHandler>:
=======
 8010366:	4b04      	ldr	r3, [pc, #16]	; (8010378 <HAL_FLASH_Program+0xa0>)
 8010368:	2200      	movs	r2, #0
 801036a:	761a      	strb	r2, [r3, #24]
  
  return status;
 801036c:	7dfb      	ldrb	r3, [r7, #23]
}
 801036e:	4618      	mov	r0, r3
 8010370:	3718      	adds	r7, #24
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	20016644 	.word	0x20016644
 801037c:	40023c00 	.word	0x40023c00

08010380 <HAL_FLASH_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
<<<<<<< HEAD
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8012422:	2300      	movs	r3, #0
 8012424:	607b      	str	r3, [r7, #4]
=======
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8010386:	2300      	movs	r3, #0
 8010388:	607b      	str	r3, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
<<<<<<< HEAD
 8012426:	4b4b      	ldr	r3, [pc, #300]	; (8012554 <HAL_FLASH_IRQHandler+0x138>)
 8012428:	68db      	ldr	r3, [r3, #12]
 801242a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 801242e:	2b00      	cmp	r3, #0
 8012430:	d020      	beq.n	8012474 <HAL_FLASH_IRQHandler+0x58>
=======
 801038a:	4b4b      	ldr	r3, [pc, #300]	; (80104b8 <HAL_FLASH_IRQHandler+0x138>)
 801038c:	68db      	ldr	r3, [r3, #12]
 801038e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8010392:	2b00      	cmp	r3, #0
 8010394:	d020      	beq.n	80103d8 <HAL_FLASH_IRQHandler+0x58>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
<<<<<<< HEAD
 8012432:	4b49      	ldr	r3, [pc, #292]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 8012434:	781b      	ldrb	r3, [r3, #0]
 8012436:	b2db      	uxtb	r3, r3
 8012438:	2b01      	cmp	r3, #1
 801243a:	d107      	bne.n	801244c <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 801243c:	4b46      	ldr	r3, [pc, #280]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 801243e:	68db      	ldr	r3, [r3, #12]
 8012440:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8012442:	4b45      	ldr	r3, [pc, #276]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 8012444:	f04f 32ff 	mov.w	r2, #4294967295
 8012448:	60da      	str	r2, [r3, #12]
 801244a:	e00b      	b.n	8012464 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 801244c:	4b42      	ldr	r3, [pc, #264]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 801244e:	781b      	ldrb	r3, [r3, #0]
 8012450:	b2db      	uxtb	r3, r3
 8012452:	2b02      	cmp	r3, #2
 8012454:	d103      	bne.n	801245e <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8012456:	4b40      	ldr	r3, [pc, #256]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 8012458:	691b      	ldr	r3, [r3, #16]
 801245a:	607b      	str	r3, [r7, #4]
 801245c:	e002      	b.n	8012464 <HAL_FLASH_IRQHandler+0x48>
=======
 8010396:	4b49      	ldr	r3, [pc, #292]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 8010398:	781b      	ldrb	r3, [r3, #0]
 801039a:	b2db      	uxtb	r3, r3
 801039c:	2b01      	cmp	r3, #1
 801039e:	d107      	bne.n	80103b0 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 80103a0:	4b46      	ldr	r3, [pc, #280]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 80103a2:	68db      	ldr	r3, [r3, #12]
 80103a4:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 80103a6:	4b45      	ldr	r3, [pc, #276]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 80103a8:	f04f 32ff 	mov.w	r2, #4294967295
 80103ac:	60da      	str	r2, [r3, #12]
 80103ae:	e00b      	b.n	80103c8 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80103b0:	4b42      	ldr	r3, [pc, #264]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	2b02      	cmp	r3, #2
 80103b8:	d103      	bne.n	80103c2 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 80103ba:	4b40      	ldr	r3, [pc, #256]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 80103bc:	691b      	ldr	r3, [r3, #16]
 80103be:	607b      	str	r3, [r7, #4]
 80103c0:	e002      	b.n	80103c8 <HAL_FLASH_IRQHandler+0x48>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
<<<<<<< HEAD
 801245e:	4b3e      	ldr	r3, [pc, #248]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 8012460:	695b      	ldr	r3, [r3, #20]
 8012462:	607b      	str	r3, [r7, #4]
=======
 80103c2:	4b3e      	ldr	r3, [pc, #248]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 80103c4:	695b      	ldr	r3, [r3, #20]
 80103c6:	607b      	str	r3, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
<<<<<<< HEAD
 8012464:	f000 f998 	bl	8012798 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f000 f881 	bl	8012570 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 801246e:	4b3a      	ldr	r3, [pc, #232]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 8012470:	2200      	movs	r2, #0
 8012472:	701a      	strb	r2, [r3, #0]
=======
 80103c8:	f000 f998 	bl	80106fc <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f000 f881 	bl	80104d4 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80103d2:	4b3a      	ldr	r3, [pc, #232]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 80103d4:	2200      	movs	r2, #0
 80103d6:	701a      	strb	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
<<<<<<< HEAD
 8012474:	4b37      	ldr	r3, [pc, #220]	; (8012554 <HAL_FLASH_IRQHandler+0x138>)
 8012476:	68db      	ldr	r3, [r3, #12]
 8012478:	f003 0301 	and.w	r3, r3, #1
 801247c:	2b00      	cmp	r3, #0
 801247e:	d04a      	beq.n	8012516 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012480:	4b34      	ldr	r3, [pc, #208]	; (8012554 <HAL_FLASH_IRQHandler+0x138>)
 8012482:	2201      	movs	r2, #1
 8012484:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8012486:	4b34      	ldr	r3, [pc, #208]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 8012488:	781b      	ldrb	r3, [r3, #0]
 801248a:	b2db      	uxtb	r3, r3
 801248c:	2b01      	cmp	r3, #1
 801248e:	d12d      	bne.n	80124ec <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8012490:	4b31      	ldr	r3, [pc, #196]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	3b01      	subs	r3, #1
 8012496:	4a30      	ldr	r2, [pc, #192]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 8012498:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 801249a:	4b2f      	ldr	r3, [pc, #188]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 801249c:	685b      	ldr	r3, [r3, #4]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d015      	beq.n	80124ce <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 80124a2:	4b2d      	ldr	r3, [pc, #180]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 80124a4:	68db      	ldr	r3, [r3, #12]
 80124a6:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80124a8:	6878      	ldr	r0, [r7, #4]
 80124aa:	f000 f857 	bl	801255c <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 80124ae:	4b2a      	ldr	r3, [pc, #168]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 80124b0:	68db      	ldr	r3, [r3, #12]
 80124b2:	3301      	adds	r3, #1
 80124b4:	4a28      	ldr	r2, [pc, #160]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 80124b6:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 80124b8:	4b27      	ldr	r3, [pc, #156]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 80124ba:	68db      	ldr	r3, [r3, #12]
 80124bc:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 80124be:	4b26      	ldr	r3, [pc, #152]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 80124c0:	7a1b      	ldrb	r3, [r3, #8]
 80124c2:	b2db      	uxtb	r3, r3
 80124c4:	4619      	mov	r1, r3
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f000 fa50 	bl	801296c <FLASH_Erase_Sector>
 80124cc:	e023      	b.n	8012516 <HAL_FLASH_IRQHandler+0xfa>
=======
 80103d8:	4b37      	ldr	r3, [pc, #220]	; (80104b8 <HAL_FLASH_IRQHandler+0x138>)
 80103da:	68db      	ldr	r3, [r3, #12]
 80103dc:	f003 0301 	and.w	r3, r3, #1
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d04a      	beq.n	801047a <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80103e4:	4b34      	ldr	r3, [pc, #208]	; (80104b8 <HAL_FLASH_IRQHandler+0x138>)
 80103e6:	2201      	movs	r2, #1
 80103e8:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80103ea:	4b34      	ldr	r3, [pc, #208]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	b2db      	uxtb	r3, r3
 80103f0:	2b01      	cmp	r3, #1
 80103f2:	d12d      	bne.n	8010450 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 80103f4:	4b31      	ldr	r3, [pc, #196]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 80103f6:	685b      	ldr	r3, [r3, #4]
 80103f8:	3b01      	subs	r3, #1
 80103fa:	4a30      	ldr	r2, [pc, #192]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 80103fc:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 80103fe:	4b2f      	ldr	r3, [pc, #188]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 8010400:	685b      	ldr	r3, [r3, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d015      	beq.n	8010432 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8010406:	4b2d      	ldr	r3, [pc, #180]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 8010408:	68db      	ldr	r3, [r3, #12]
 801040a:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f000 f857 	bl	80104c0 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8010412:	4b2a      	ldr	r3, [pc, #168]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 8010414:	68db      	ldr	r3, [r3, #12]
 8010416:	3301      	adds	r3, #1
 8010418:	4a28      	ldr	r2, [pc, #160]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 801041a:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 801041c:	4b27      	ldr	r3, [pc, #156]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 801041e:	68db      	ldr	r3, [r3, #12]
 8010420:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8010422:	4b26      	ldr	r3, [pc, #152]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 8010424:	7a1b      	ldrb	r3, [r3, #8]
 8010426:	b2db      	uxtb	r3, r3
 8010428:	4619      	mov	r1, r3
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 fa50 	bl	80108d0 <FLASH_Erase_Sector>
 8010430:	e023      	b.n	801047a <HAL_FLASH_IRQHandler+0xfa>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
<<<<<<< HEAD
 80124ce:	f04f 33ff 	mov.w	r3, #4294967295
 80124d2:	607b      	str	r3, [r7, #4]
 80124d4:	4a20      	ldr	r2, [pc, #128]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80124da:	4b1f      	ldr	r3, [pc, #124]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 80124dc:	2200      	movs	r2, #0
 80124de:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80124e0:	f000 fa8c 	bl	80129fc <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f000 f839 	bl	801255c <HAL_FLASH_EndOfOperationCallback>
 80124ea:	e014      	b.n	8012516 <HAL_FLASH_IRQHandler+0xfa>
=======
 8010432:	f04f 33ff 	mov.w	r3, #4294967295
 8010436:	607b      	str	r3, [r7, #4]
 8010438:	4a20      	ldr	r2, [pc, #128]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 801043e:	4b1f      	ldr	r3, [pc, #124]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 8010440:	2200      	movs	r2, #0
 8010442:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8010444:	f000 fa8c 	bl	8010960 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f000 f839 	bl	80104c0 <HAL_FLASH_EndOfOperationCallback>
 801044e:	e014      	b.n	801047a <HAL_FLASH_IRQHandler+0xfa>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
<<<<<<< HEAD
 80124ec:	4b1a      	ldr	r3, [pc, #104]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 80124ee:	781b      	ldrb	r3, [r3, #0]
 80124f0:	b2db      	uxtb	r3, r3
 80124f2:	2b02      	cmp	r3, #2
 80124f4:	d107      	bne.n	8012506 <HAL_FLASH_IRQHandler+0xea>
=======
 8010450:	4b1a      	ldr	r3, [pc, #104]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 8010452:	781b      	ldrb	r3, [r3, #0]
 8010454:	b2db      	uxtb	r3, r3
 8010456:	2b02      	cmp	r3, #2
 8010458:	d107      	bne.n	801046a <HAL_FLASH_IRQHandler+0xea>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
<<<<<<< HEAD
 80124f6:	f000 fa81 	bl	80129fc <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80124fa:	4b17      	ldr	r3, [pc, #92]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 80124fc:	691b      	ldr	r3, [r3, #16]
 80124fe:	4618      	mov	r0, r3
 8012500:	f000 f82c 	bl	801255c <HAL_FLASH_EndOfOperationCallback>
 8012504:	e004      	b.n	8012510 <HAL_FLASH_IRQHandler+0xf4>
=======
 801045a:	f000 fa81 	bl	8010960 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 801045e:	4b17      	ldr	r3, [pc, #92]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 8010460:	691b      	ldr	r3, [r3, #16]
 8010462:	4618      	mov	r0, r3
 8010464:	f000 f82c 	bl	80104c0 <HAL_FLASH_EndOfOperationCallback>
 8010468:	e004      	b.n	8010474 <HAL_FLASH_IRQHandler+0xf4>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
<<<<<<< HEAD
 8012506:	4b14      	ldr	r3, [pc, #80]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 8012508:	695b      	ldr	r3, [r3, #20]
 801250a:	4618      	mov	r0, r3
 801250c:	f000 f826 	bl	801255c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8012510:	4b11      	ldr	r3, [pc, #68]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 8012512:	2200      	movs	r2, #0
 8012514:	701a      	strb	r2, [r3, #0]
=======
 801046a:	4b14      	ldr	r3, [pc, #80]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 801046c:	695b      	ldr	r3, [r3, #20]
 801046e:	4618      	mov	r0, r3
 8010470:	f000 f826 	bl	80104c0 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8010474:	4b11      	ldr	r3, [pc, #68]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 8010476:	2200      	movs	r2, #0
 8010478:	701a      	strb	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
<<<<<<< HEAD
 8012516:	4b10      	ldr	r3, [pc, #64]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 8012518:	781b      	ldrb	r3, [r3, #0]
 801251a:	b2db      	uxtb	r3, r3
 801251c:	2b00      	cmp	r3, #0
 801251e:	d114      	bne.n	801254a <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8012520:	4b0c      	ldr	r3, [pc, #48]	; (8012554 <HAL_FLASH_IRQHandler+0x138>)
 8012522:	691b      	ldr	r3, [r3, #16]
 8012524:	4a0b      	ldr	r2, [pc, #44]	; (8012554 <HAL_FLASH_IRQHandler+0x138>)
 8012526:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801252a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 801252c:	4b09      	ldr	r3, [pc, #36]	; (8012554 <HAL_FLASH_IRQHandler+0x138>)
 801252e:	691b      	ldr	r3, [r3, #16]
 8012530:	4a08      	ldr	r2, [pc, #32]	; (8012554 <HAL_FLASH_IRQHandler+0x138>)
 8012532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012536:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8012538:	4b06      	ldr	r3, [pc, #24]	; (8012554 <HAL_FLASH_IRQHandler+0x138>)
 801253a:	691b      	ldr	r3, [r3, #16]
 801253c:	4a05      	ldr	r2, [pc, #20]	; (8012554 <HAL_FLASH_IRQHandler+0x138>)
 801253e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8012542:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8012544:	4b04      	ldr	r3, [pc, #16]	; (8012558 <HAL_FLASH_IRQHandler+0x13c>)
 8012546:	2200      	movs	r2, #0
 8012548:	761a      	strb	r2, [r3, #24]
  }
}
 801254a:	bf00      	nop
 801254c:	3708      	adds	r7, #8
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}
 8012552:	bf00      	nop
 8012554:	40023c00 	.word	0x40023c00
 8012558:	2001a7bc 	.word	0x2001a7bc

0801255c <HAL_FLASH_EndOfOperationCallback>:
=======
 801047a:	4b10      	ldr	r3, [pc, #64]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	b2db      	uxtb	r3, r3
 8010480:	2b00      	cmp	r3, #0
 8010482:	d114      	bne.n	80104ae <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8010484:	4b0c      	ldr	r3, [pc, #48]	; (80104b8 <HAL_FLASH_IRQHandler+0x138>)
 8010486:	691b      	ldr	r3, [r3, #16]
 8010488:	4a0b      	ldr	r2, [pc, #44]	; (80104b8 <HAL_FLASH_IRQHandler+0x138>)
 801048a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801048e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8010490:	4b09      	ldr	r3, [pc, #36]	; (80104b8 <HAL_FLASH_IRQHandler+0x138>)
 8010492:	691b      	ldr	r3, [r3, #16]
 8010494:	4a08      	ldr	r2, [pc, #32]	; (80104b8 <HAL_FLASH_IRQHandler+0x138>)
 8010496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801049a:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 801049c:	4b06      	ldr	r3, [pc, #24]	; (80104b8 <HAL_FLASH_IRQHandler+0x138>)
 801049e:	691b      	ldr	r3, [r3, #16]
 80104a0:	4a05      	ldr	r2, [pc, #20]	; (80104b8 <HAL_FLASH_IRQHandler+0x138>)
 80104a2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80104a6:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80104a8:	4b04      	ldr	r3, [pc, #16]	; (80104bc <HAL_FLASH_IRQHandler+0x13c>)
 80104aa:	2200      	movs	r2, #0
 80104ac:	761a      	strb	r2, [r3, #24]
  }
}
 80104ae:	bf00      	nop
 80104b0:	3708      	adds	r7, #8
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	40023c00 	.word	0x40023c00
 80104bc:	20016644 	.word	0x20016644

080104c0 <HAL_FLASH_EndOfOperationCallback>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
<<<<<<< HEAD
 801255c:	b480      	push	{r7}
 801255e:	b083      	sub	sp, #12
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
=======
 80104c0:	b480      	push	{r7}
 80104c2:	b083      	sub	sp, #12
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
<<<<<<< HEAD
 8012564:	bf00      	nop
 8012566:	370c      	adds	r7, #12
 8012568:	46bd      	mov	sp, r7
 801256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256e:	4770      	bx	lr

08012570 <HAL_FLASH_OperationErrorCallback>:
=======
 80104c8:	bf00      	nop
 80104ca:	370c      	adds	r7, #12
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr

080104d4 <HAL_FLASH_OperationErrorCallback>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
<<<<<<< HEAD
 8012570:	b480      	push	{r7}
 8012572:	b083      	sub	sp, #12
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
=======
 80104d4:	b480      	push	{r7}
 80104d6:	b083      	sub	sp, #12
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
<<<<<<< HEAD
 8012578:	bf00      	nop
 801257a:	370c      	adds	r7, #12
 801257c:	46bd      	mov	sp, r7
 801257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012582:	4770      	bx	lr

08012584 <HAL_FLASH_Unlock>:
=======
 80104dc:	bf00      	nop
 80104de:	370c      	adds	r7, #12
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <HAL_FLASH_Unlock>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
<<<<<<< HEAD
 8012584:	b480      	push	{r7}
 8012586:	b083      	sub	sp, #12
 8012588:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801258a:	2300      	movs	r3, #0
 801258c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801258e:	4b0b      	ldr	r3, [pc, #44]	; (80125bc <HAL_FLASH_Unlock+0x38>)
 8012590:	691b      	ldr	r3, [r3, #16]
 8012592:	2b00      	cmp	r3, #0
 8012594:	da0b      	bge.n	80125ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8012596:	4b09      	ldr	r3, [pc, #36]	; (80125bc <HAL_FLASH_Unlock+0x38>)
 8012598:	4a09      	ldr	r2, [pc, #36]	; (80125c0 <HAL_FLASH_Unlock+0x3c>)
 801259a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801259c:	4b07      	ldr	r3, [pc, #28]	; (80125bc <HAL_FLASH_Unlock+0x38>)
 801259e:	4a09      	ldr	r2, [pc, #36]	; (80125c4 <HAL_FLASH_Unlock+0x40>)
 80125a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80125a2:	4b06      	ldr	r3, [pc, #24]	; (80125bc <HAL_FLASH_Unlock+0x38>)
 80125a4:	691b      	ldr	r3, [r3, #16]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	da01      	bge.n	80125ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80125aa:	2301      	movs	r3, #1
 80125ac:	71fb      	strb	r3, [r7, #7]
=======
 80104e8:	b480      	push	{r7}
 80104ea:	b083      	sub	sp, #12
 80104ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80104ee:	2300      	movs	r3, #0
 80104f0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80104f2:	4b0b      	ldr	r3, [pc, #44]	; (8010520 <HAL_FLASH_Unlock+0x38>)
 80104f4:	691b      	ldr	r3, [r3, #16]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	da0b      	bge.n	8010512 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80104fa:	4b09      	ldr	r3, [pc, #36]	; (8010520 <HAL_FLASH_Unlock+0x38>)
 80104fc:	4a09      	ldr	r2, [pc, #36]	; (8010524 <HAL_FLASH_Unlock+0x3c>)
 80104fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010500:	4b07      	ldr	r3, [pc, #28]	; (8010520 <HAL_FLASH_Unlock+0x38>)
 8010502:	4a09      	ldr	r2, [pc, #36]	; (8010528 <HAL_FLASH_Unlock+0x40>)
 8010504:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8010506:	4b06      	ldr	r3, [pc, #24]	; (8010520 <HAL_FLASH_Unlock+0x38>)
 8010508:	691b      	ldr	r3, [r3, #16]
 801050a:	2b00      	cmp	r3, #0
 801050c:	da01      	bge.n	8010512 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801050e:	2301      	movs	r3, #1
 8010510:	71fb      	strb	r3, [r7, #7]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }

  return status;
<<<<<<< HEAD
 80125ae:	79fb      	ldrb	r3, [r7, #7]
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	370c      	adds	r7, #12
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr
 80125bc:	40023c00 	.word	0x40023c00
 80125c0:	45670123 	.word	0x45670123
 80125c4:	cdef89ab 	.word	0xcdef89ab

080125c8 <HAL_FLASH_Lock>:
=======
 8010512:	79fb      	ldrb	r3, [r7, #7]
}
 8010514:	4618      	mov	r0, r3
 8010516:	370c      	adds	r7, #12
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr
 8010520:	40023c00 	.word	0x40023c00
 8010524:	45670123 	.word	0x45670123
 8010528:	cdef89ab 	.word	0xcdef89ab

0801052c <HAL_FLASH_Lock>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
<<<<<<< HEAD
 80125c8:	b480      	push	{r7}
 80125ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80125cc:	4b05      	ldr	r3, [pc, #20]	; (80125e4 <HAL_FLASH_Lock+0x1c>)
 80125ce:	691b      	ldr	r3, [r3, #16]
 80125d0:	4a04      	ldr	r2, [pc, #16]	; (80125e4 <HAL_FLASH_Lock+0x1c>)
 80125d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80125d6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80125d8:	2300      	movs	r3, #0
}
 80125da:	4618      	mov	r0, r3
 80125dc:	46bd      	mov	sp, r7
 80125de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e2:	4770      	bx	lr
 80125e4:	40023c00 	.word	0x40023c00

080125e8 <FLASH_WaitForLastOperation>:
=======
 801052c:	b480      	push	{r7}
 801052e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8010530:	4b05      	ldr	r3, [pc, #20]	; (8010548 <HAL_FLASH_Lock+0x1c>)
 8010532:	691b      	ldr	r3, [r3, #16]
 8010534:	4a04      	ldr	r2, [pc, #16]	; (8010548 <HAL_FLASH_Lock+0x1c>)
 8010536:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801053a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 801053c:	2300      	movs	r3, #0
}
 801053e:	4618      	mov	r0, r3
 8010540:	46bd      	mov	sp, r7
 8010542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010546:	4770      	bx	lr
 8010548:	40023c00 	.word	0x40023c00

0801054c <FLASH_WaitForLastOperation>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
<<<<<<< HEAD
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b084      	sub	sp, #16
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80125f0:	2300      	movs	r3, #0
 80125f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80125f4:	4b1a      	ldr	r3, [pc, #104]	; (8012660 <FLASH_WaitForLastOperation+0x78>)
 80125f6:	2200      	movs	r2, #0
 80125f8:	61da      	str	r2, [r3, #28]
=======
 801054c:	b580      	push	{r7, lr}
 801054e:	b084      	sub	sp, #16
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010554:	2300      	movs	r3, #0
 8010556:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010558:	4b1a      	ldr	r3, [pc, #104]	; (80105c4 <FLASH_WaitForLastOperation+0x78>)
 801055a:	2200      	movs	r2, #0
 801055c:	61da      	str	r2, [r3, #28]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
<<<<<<< HEAD
 80125fa:	f7fe fc15 	bl	8010e28 <HAL_GetTick>
 80125fe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8012600:	e010      	b.n	8012624 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012608:	d00c      	beq.n	8012624 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d007      	beq.n	8012620 <FLASH_WaitForLastOperation+0x38>
 8012610:	f7fe fc0a 	bl	8010e28 <HAL_GetTick>
 8012614:	4602      	mov	r2, r0
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	1ad3      	subs	r3, r2, r3
 801261a:	687a      	ldr	r2, [r7, #4]
 801261c:	429a      	cmp	r2, r3
 801261e:	d201      	bcs.n	8012624 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8012620:	2303      	movs	r3, #3
 8012622:	e019      	b.n	8012658 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8012624:	4b0f      	ldr	r3, [pc, #60]	; (8012664 <FLASH_WaitForLastOperation+0x7c>)
 8012626:	68db      	ldr	r3, [r3, #12]
 8012628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801262c:	2b00      	cmp	r3, #0
 801262e:	d1e8      	bne.n	8012602 <FLASH_WaitForLastOperation+0x1a>
=======
 801055e:	f7fe fc15 	bl	800ed8c <HAL_GetTick>
 8010562:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8010564:	e010      	b.n	8010588 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801056c:	d00c      	beq.n	8010588 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d007      	beq.n	8010584 <FLASH_WaitForLastOperation+0x38>
 8010574:	f7fe fc0a 	bl	800ed8c <HAL_GetTick>
 8010578:	4602      	mov	r2, r0
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	1ad3      	subs	r3, r2, r3
 801057e:	687a      	ldr	r2, [r7, #4]
 8010580:	429a      	cmp	r2, r3
 8010582:	d201      	bcs.n	8010588 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8010584:	2303      	movs	r3, #3
 8010586:	e019      	b.n	80105bc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8010588:	4b0f      	ldr	r3, [pc, #60]	; (80105c8 <FLASH_WaitForLastOperation+0x7c>)
 801058a:	68db      	ldr	r3, [r3, #12]
 801058c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010590:	2b00      	cmp	r3, #0
 8010592:	d1e8      	bne.n	8010566 <FLASH_WaitForLastOperation+0x1a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
<<<<<<< HEAD
 8012630:	4b0c      	ldr	r3, [pc, #48]	; (8012664 <FLASH_WaitForLastOperation+0x7c>)
 8012632:	68db      	ldr	r3, [r3, #12]
 8012634:	f003 0301 	and.w	r3, r3, #1
 8012638:	2b00      	cmp	r3, #0
 801263a:	d002      	beq.n	8012642 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801263c:	4b09      	ldr	r3, [pc, #36]	; (8012664 <FLASH_WaitForLastOperation+0x7c>)
 801263e:	2201      	movs	r2, #1
 8012640:	60da      	str	r2, [r3, #12]
=======
 8010594:	4b0c      	ldr	r3, [pc, #48]	; (80105c8 <FLASH_WaitForLastOperation+0x7c>)
 8010596:	68db      	ldr	r3, [r3, #12]
 8010598:	f003 0301 	and.w	r3, r3, #1
 801059c:	2b00      	cmp	r3, #0
 801059e:	d002      	beq.n	80105a6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80105a0:	4b09      	ldr	r3, [pc, #36]	; (80105c8 <FLASH_WaitForLastOperation+0x7c>)
 80105a2:	2201      	movs	r2, #1
 80105a4:	60da      	str	r2, [r3, #12]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
<<<<<<< HEAD
 8012642:	4b08      	ldr	r3, [pc, #32]	; (8012664 <FLASH_WaitForLastOperation+0x7c>)
 8012644:	68db      	ldr	r3, [r3, #12]
 8012646:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 801264a:	2b00      	cmp	r3, #0
 801264c:	d003      	beq.n	8012656 <FLASH_WaitForLastOperation+0x6e>
=======
 80105a6:	4b08      	ldr	r3, [pc, #32]	; (80105c8 <FLASH_WaitForLastOperation+0x7c>)
 80105a8:	68db      	ldr	r3, [r3, #12]
 80105aa:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d003      	beq.n	80105ba <FLASH_WaitForLastOperation+0x6e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
<<<<<<< HEAD
 801264e:	f000 f8a3 	bl	8012798 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8012652:	2301      	movs	r3, #1
 8012654:	e000      	b.n	8012658 <FLASH_WaitForLastOperation+0x70>
=======
 80105b2:	f000 f8a3 	bl	80106fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80105b6:	2301      	movs	r3, #1
 80105b8:	e000      	b.n	80105bc <FLASH_WaitForLastOperation+0x70>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* If there is no error flag set */
  return HAL_OK;
<<<<<<< HEAD
 8012656:	2300      	movs	r3, #0
  
}  
 8012658:	4618      	mov	r0, r3
 801265a:	3710      	adds	r7, #16
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}
 8012660:	2001a7bc 	.word	0x2001a7bc
 8012664:	40023c00 	.word	0x40023c00

08012668 <FLASH_Program_DoubleWord>:
=======
 80105ba:	2300      	movs	r3, #0
  
}  
 80105bc:	4618      	mov	r0, r3
 80105be:	3710      	adds	r7, #16
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	20016644 	.word	0x20016644
 80105c8:	40023c00 	.word	0x40023c00

080105cc <FLASH_Program_DoubleWord>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
<<<<<<< HEAD
 8012668:	b490      	push	{r4, r7}
 801266a:	b084      	sub	sp, #16
 801266c:	af00      	add	r7, sp, #0
 801266e:	60f8      	str	r0, [r7, #12]
 8012670:	e9c7 2300 	strd	r2, r3, [r7]
=======
 80105cc:	b490      	push	{r4, r7}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	60f8      	str	r0, [r7, #12]
 80105d4:	e9c7 2300 	strd	r2, r3, [r7]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
<<<<<<< HEAD
 8012674:	4b13      	ldr	r3, [pc, #76]	; (80126c4 <FLASH_Program_DoubleWord+0x5c>)
 8012676:	691b      	ldr	r3, [r3, #16]
 8012678:	4a12      	ldr	r2, [pc, #72]	; (80126c4 <FLASH_Program_DoubleWord+0x5c>)
 801267a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801267e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8012680:	4b10      	ldr	r3, [pc, #64]	; (80126c4 <FLASH_Program_DoubleWord+0x5c>)
 8012682:	691b      	ldr	r3, [r3, #16]
 8012684:	4a0f      	ldr	r2, [pc, #60]	; (80126c4 <FLASH_Program_DoubleWord+0x5c>)
 8012686:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801268a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801268c:	4b0d      	ldr	r3, [pc, #52]	; (80126c4 <FLASH_Program_DoubleWord+0x5c>)
 801268e:	691b      	ldr	r3, [r3, #16]
 8012690:	4a0c      	ldr	r2, [pc, #48]	; (80126c4 <FLASH_Program_DoubleWord+0x5c>)
 8012692:	f043 0301 	orr.w	r3, r3, #1
 8012696:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	683a      	ldr	r2, [r7, #0]
 801269c:	601a      	str	r2, [r3, #0]
=======
 80105d8:	4b13      	ldr	r3, [pc, #76]	; (8010628 <FLASH_Program_DoubleWord+0x5c>)
 80105da:	691b      	ldr	r3, [r3, #16]
 80105dc:	4a12      	ldr	r2, [pc, #72]	; (8010628 <FLASH_Program_DoubleWord+0x5c>)
 80105de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80105e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80105e4:	4b10      	ldr	r3, [pc, #64]	; (8010628 <FLASH_Program_DoubleWord+0x5c>)
 80105e6:	691b      	ldr	r3, [r3, #16]
 80105e8:	4a0f      	ldr	r2, [pc, #60]	; (8010628 <FLASH_Program_DoubleWord+0x5c>)
 80105ea:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80105ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80105f0:	4b0d      	ldr	r3, [pc, #52]	; (8010628 <FLASH_Program_DoubleWord+0x5c>)
 80105f2:	691b      	ldr	r3, [r3, #16]
 80105f4:	4a0c      	ldr	r2, [pc, #48]	; (8010628 <FLASH_Program_DoubleWord+0x5c>)
 80105f6:	f043 0301 	orr.w	r3, r3, #1
 80105fa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	683a      	ldr	r2, [r7, #0]
 8010600:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
<<<<<<< HEAD
 801269e:	f3bf 8f6f 	isb	sy
=======
 8010602:	f3bf 8f6f 	isb	sy
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
<<<<<<< HEAD
 80126a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80126a6:	f04f 0300 	mov.w	r3, #0
 80126aa:	f04f 0400 	mov.w	r4, #0
 80126ae:	0013      	movs	r3, r2
 80126b0:	2400      	movs	r4, #0
 80126b2:	68fa      	ldr	r2, [r7, #12]
 80126b4:	3204      	adds	r2, #4
 80126b6:	6013      	str	r3, [r2, #0]
}
 80126b8:	bf00      	nop
 80126ba:	3710      	adds	r7, #16
 80126bc:	46bd      	mov	sp, r7
 80126be:	bc90      	pop	{r4, r7}
 80126c0:	4770      	bx	lr
 80126c2:	bf00      	nop
 80126c4:	40023c00 	.word	0x40023c00

080126c8 <FLASH_Program_Word>:
=======
 8010606:	e9d7 1200 	ldrd	r1, r2, [r7]
 801060a:	f04f 0300 	mov.w	r3, #0
 801060e:	f04f 0400 	mov.w	r4, #0
 8010612:	0013      	movs	r3, r2
 8010614:	2400      	movs	r4, #0
 8010616:	68fa      	ldr	r2, [r7, #12]
 8010618:	3204      	adds	r2, #4
 801061a:	6013      	str	r3, [r2, #0]
}
 801061c:	bf00      	nop
 801061e:	3710      	adds	r7, #16
 8010620:	46bd      	mov	sp, r7
 8010622:	bc90      	pop	{r4, r7}
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop
 8010628:	40023c00 	.word	0x40023c00

0801062c <FLASH_Program_Word>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
<<<<<<< HEAD
 80126c8:	b480      	push	{r7}
 80126ca:	b083      	sub	sp, #12
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6039      	str	r1, [r7, #0]
=======
 801062c:	b480      	push	{r7}
 801062e:	b083      	sub	sp, #12
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
 8010634:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
<<<<<<< HEAD
 80126d2:	4b0d      	ldr	r3, [pc, #52]	; (8012708 <FLASH_Program_Word+0x40>)
 80126d4:	691b      	ldr	r3, [r3, #16]
 80126d6:	4a0c      	ldr	r2, [pc, #48]	; (8012708 <FLASH_Program_Word+0x40>)
 80126d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80126dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80126de:	4b0a      	ldr	r3, [pc, #40]	; (8012708 <FLASH_Program_Word+0x40>)
 80126e0:	691b      	ldr	r3, [r3, #16]
 80126e2:	4a09      	ldr	r2, [pc, #36]	; (8012708 <FLASH_Program_Word+0x40>)
 80126e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80126e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80126ea:	4b07      	ldr	r3, [pc, #28]	; (8012708 <FLASH_Program_Word+0x40>)
 80126ec:	691b      	ldr	r3, [r3, #16]
 80126ee:	4a06      	ldr	r2, [pc, #24]	; (8012708 <FLASH_Program_Word+0x40>)
 80126f0:	f043 0301 	orr.w	r3, r3, #1
 80126f4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	683a      	ldr	r2, [r7, #0]
 80126fa:	601a      	str	r2, [r3, #0]
}
 80126fc:	bf00      	nop
 80126fe:	370c      	adds	r7, #12
 8012700:	46bd      	mov	sp, r7
 8012702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012706:	4770      	bx	lr
 8012708:	40023c00 	.word	0x40023c00

0801270c <FLASH_Program_HalfWord>:
=======
 8010636:	4b0d      	ldr	r3, [pc, #52]	; (801066c <FLASH_Program_Word+0x40>)
 8010638:	691b      	ldr	r3, [r3, #16]
 801063a:	4a0c      	ldr	r2, [pc, #48]	; (801066c <FLASH_Program_Word+0x40>)
 801063c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010640:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8010642:	4b0a      	ldr	r3, [pc, #40]	; (801066c <FLASH_Program_Word+0x40>)
 8010644:	691b      	ldr	r3, [r3, #16]
 8010646:	4a09      	ldr	r2, [pc, #36]	; (801066c <FLASH_Program_Word+0x40>)
 8010648:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801064c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801064e:	4b07      	ldr	r3, [pc, #28]	; (801066c <FLASH_Program_Word+0x40>)
 8010650:	691b      	ldr	r3, [r3, #16]
 8010652:	4a06      	ldr	r2, [pc, #24]	; (801066c <FLASH_Program_Word+0x40>)
 8010654:	f043 0301 	orr.w	r3, r3, #1
 8010658:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	683a      	ldr	r2, [r7, #0]
 801065e:	601a      	str	r2, [r3, #0]
}
 8010660:	bf00      	nop
 8010662:	370c      	adds	r7, #12
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr
 801066c:	40023c00 	.word	0x40023c00

08010670 <FLASH_Program_HalfWord>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
<<<<<<< HEAD
 801270c:	b480      	push	{r7}
 801270e:	b083      	sub	sp, #12
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
 8012714:	460b      	mov	r3, r1
 8012716:	807b      	strh	r3, [r7, #2]
=======
 8010670:	b480      	push	{r7}
 8010672:	b083      	sub	sp, #12
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	460b      	mov	r3, r1
 801067a:	807b      	strh	r3, [r7, #2]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
<<<<<<< HEAD
 8012718:	4b0d      	ldr	r3, [pc, #52]	; (8012750 <FLASH_Program_HalfWord+0x44>)
 801271a:	691b      	ldr	r3, [r3, #16]
 801271c:	4a0c      	ldr	r2, [pc, #48]	; (8012750 <FLASH_Program_HalfWord+0x44>)
 801271e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012722:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8012724:	4b0a      	ldr	r3, [pc, #40]	; (8012750 <FLASH_Program_HalfWord+0x44>)
 8012726:	691b      	ldr	r3, [r3, #16]
 8012728:	4a09      	ldr	r2, [pc, #36]	; (8012750 <FLASH_Program_HalfWord+0x44>)
 801272a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801272e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012730:	4b07      	ldr	r3, [pc, #28]	; (8012750 <FLASH_Program_HalfWord+0x44>)
 8012732:	691b      	ldr	r3, [r3, #16]
 8012734:	4a06      	ldr	r2, [pc, #24]	; (8012750 <FLASH_Program_HalfWord+0x44>)
 8012736:	f043 0301 	orr.w	r3, r3, #1
 801273a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	887a      	ldrh	r2, [r7, #2]
 8012740:	801a      	strh	r2, [r3, #0]
}
 8012742:	bf00      	nop
 8012744:	370c      	adds	r7, #12
 8012746:	46bd      	mov	sp, r7
 8012748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274c:	4770      	bx	lr
 801274e:	bf00      	nop
 8012750:	40023c00 	.word	0x40023c00

08012754 <FLASH_Program_Byte>:
=======
 801067c:	4b0d      	ldr	r3, [pc, #52]	; (80106b4 <FLASH_Program_HalfWord+0x44>)
 801067e:	691b      	ldr	r3, [r3, #16]
 8010680:	4a0c      	ldr	r2, [pc, #48]	; (80106b4 <FLASH_Program_HalfWord+0x44>)
 8010682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010686:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8010688:	4b0a      	ldr	r3, [pc, #40]	; (80106b4 <FLASH_Program_HalfWord+0x44>)
 801068a:	691b      	ldr	r3, [r3, #16]
 801068c:	4a09      	ldr	r2, [pc, #36]	; (80106b4 <FLASH_Program_HalfWord+0x44>)
 801068e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010692:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8010694:	4b07      	ldr	r3, [pc, #28]	; (80106b4 <FLASH_Program_HalfWord+0x44>)
 8010696:	691b      	ldr	r3, [r3, #16]
 8010698:	4a06      	ldr	r2, [pc, #24]	; (80106b4 <FLASH_Program_HalfWord+0x44>)
 801069a:	f043 0301 	orr.w	r3, r3, #1
 801069e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	887a      	ldrh	r2, [r7, #2]
 80106a4:	801a      	strh	r2, [r3, #0]
}
 80106a6:	bf00      	nop
 80106a8:	370c      	adds	r7, #12
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop
 80106b4:	40023c00 	.word	0x40023c00

080106b8 <FLASH_Program_Byte>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
<<<<<<< HEAD
 8012754:	b480      	push	{r7}
 8012756:	b083      	sub	sp, #12
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
 801275c:	460b      	mov	r3, r1
 801275e:	70fb      	strb	r3, [r7, #3]
=======
 80106b8:	b480      	push	{r7}
 80106ba:	b083      	sub	sp, #12
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	460b      	mov	r3, r1
 80106c2:	70fb      	strb	r3, [r7, #3]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
<<<<<<< HEAD
 8012760:	4b0c      	ldr	r3, [pc, #48]	; (8012794 <FLASH_Program_Byte+0x40>)
 8012762:	691b      	ldr	r3, [r3, #16]
 8012764:	4a0b      	ldr	r2, [pc, #44]	; (8012794 <FLASH_Program_Byte+0x40>)
 8012766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801276a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 801276c:	4b09      	ldr	r3, [pc, #36]	; (8012794 <FLASH_Program_Byte+0x40>)
 801276e:	4a09      	ldr	r2, [pc, #36]	; (8012794 <FLASH_Program_Byte+0x40>)
 8012770:	691b      	ldr	r3, [r3, #16]
 8012772:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012774:	4b07      	ldr	r3, [pc, #28]	; (8012794 <FLASH_Program_Byte+0x40>)
 8012776:	691b      	ldr	r3, [r3, #16]
 8012778:	4a06      	ldr	r2, [pc, #24]	; (8012794 <FLASH_Program_Byte+0x40>)
 801277a:	f043 0301 	orr.w	r3, r3, #1
 801277e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	78fa      	ldrb	r2, [r7, #3]
 8012784:	701a      	strb	r2, [r3, #0]
}
 8012786:	bf00      	nop
 8012788:	370c      	adds	r7, #12
 801278a:	46bd      	mov	sp, r7
 801278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012790:	4770      	bx	lr
 8012792:	bf00      	nop
 8012794:	40023c00 	.word	0x40023c00

08012798 <FLASH_SetErrorCode>:
=======
 80106c4:	4b0c      	ldr	r3, [pc, #48]	; (80106f8 <FLASH_Program_Byte+0x40>)
 80106c6:	691b      	ldr	r3, [r3, #16]
 80106c8:	4a0b      	ldr	r2, [pc, #44]	; (80106f8 <FLASH_Program_Byte+0x40>)
 80106ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80106ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80106d0:	4b09      	ldr	r3, [pc, #36]	; (80106f8 <FLASH_Program_Byte+0x40>)
 80106d2:	4a09      	ldr	r2, [pc, #36]	; (80106f8 <FLASH_Program_Byte+0x40>)
 80106d4:	691b      	ldr	r3, [r3, #16]
 80106d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80106d8:	4b07      	ldr	r3, [pc, #28]	; (80106f8 <FLASH_Program_Byte+0x40>)
 80106da:	691b      	ldr	r3, [r3, #16]
 80106dc:	4a06      	ldr	r2, [pc, #24]	; (80106f8 <FLASH_Program_Byte+0x40>)
 80106de:	f043 0301 	orr.w	r3, r3, #1
 80106e2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	78fa      	ldrb	r2, [r7, #3]
 80106e8:	701a      	strb	r2, [r3, #0]
}
 80106ea:	bf00      	nop
 80106ec:	370c      	adds	r7, #12
 80106ee:	46bd      	mov	sp, r7
 80106f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f4:	4770      	bx	lr
 80106f6:	bf00      	nop
 80106f8:	40023c00 	.word	0x40023c00

080106fc <FLASH_SetErrorCode>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
<<<<<<< HEAD
 8012798:	b480      	push	{r7}
 801279a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 801279c:	4b27      	ldr	r3, [pc, #156]	; (801283c <FLASH_SetErrorCode+0xa4>)
 801279e:	68db      	ldr	r3, [r3, #12]
 80127a0:	f003 0310 	and.w	r3, r3, #16
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d008      	beq.n	80127ba <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80127a8:	4b25      	ldr	r3, [pc, #148]	; (8012840 <FLASH_SetErrorCode+0xa8>)
 80127aa:	69db      	ldr	r3, [r3, #28]
 80127ac:	f043 0310 	orr.w	r3, r3, #16
 80127b0:	4a23      	ldr	r2, [pc, #140]	; (8012840 <FLASH_SetErrorCode+0xa8>)
 80127b2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80127b4:	4b21      	ldr	r3, [pc, #132]	; (801283c <FLASH_SetErrorCode+0xa4>)
 80127b6:	2210      	movs	r2, #16
 80127b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80127ba:	4b20      	ldr	r3, [pc, #128]	; (801283c <FLASH_SetErrorCode+0xa4>)
 80127bc:	68db      	ldr	r3, [r3, #12]
 80127be:	f003 0320 	and.w	r3, r3, #32
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d008      	beq.n	80127d8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80127c6:	4b1e      	ldr	r3, [pc, #120]	; (8012840 <FLASH_SetErrorCode+0xa8>)
 80127c8:	69db      	ldr	r3, [r3, #28]
 80127ca:	f043 0308 	orr.w	r3, r3, #8
 80127ce:	4a1c      	ldr	r2, [pc, #112]	; (8012840 <FLASH_SetErrorCode+0xa8>)
 80127d0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80127d2:	4b1a      	ldr	r3, [pc, #104]	; (801283c <FLASH_SetErrorCode+0xa4>)
 80127d4:	2220      	movs	r2, #32
 80127d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80127d8:	4b18      	ldr	r3, [pc, #96]	; (801283c <FLASH_SetErrorCode+0xa4>)
 80127da:	68db      	ldr	r3, [r3, #12]
 80127dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d008      	beq.n	80127f6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80127e4:	4b16      	ldr	r3, [pc, #88]	; (8012840 <FLASH_SetErrorCode+0xa8>)
 80127e6:	69db      	ldr	r3, [r3, #28]
 80127e8:	f043 0304 	orr.w	r3, r3, #4
 80127ec:	4a14      	ldr	r2, [pc, #80]	; (8012840 <FLASH_SetErrorCode+0xa8>)
 80127ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80127f0:	4b12      	ldr	r3, [pc, #72]	; (801283c <FLASH_SetErrorCode+0xa4>)
 80127f2:	2240      	movs	r2, #64	; 0x40
 80127f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80127f6:	4b11      	ldr	r3, [pc, #68]	; (801283c <FLASH_SetErrorCode+0xa4>)
 80127f8:	68db      	ldr	r3, [r3, #12]
 80127fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d008      	beq.n	8012814 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8012802:	4b0f      	ldr	r3, [pc, #60]	; (8012840 <FLASH_SetErrorCode+0xa8>)
 8012804:	69db      	ldr	r3, [r3, #28]
 8012806:	f043 0302 	orr.w	r3, r3, #2
 801280a:	4a0d      	ldr	r2, [pc, #52]	; (8012840 <FLASH_SetErrorCode+0xa8>)
 801280c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801280e:	4b0b      	ldr	r3, [pc, #44]	; (801283c <FLASH_SetErrorCode+0xa4>)
 8012810:	2280      	movs	r2, #128	; 0x80
 8012812:	60da      	str	r2, [r3, #12]
=======
 80106fc:	b480      	push	{r7}
 80106fe:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8010700:	4b27      	ldr	r3, [pc, #156]	; (80107a0 <FLASH_SetErrorCode+0xa4>)
 8010702:	68db      	ldr	r3, [r3, #12]
 8010704:	f003 0310 	and.w	r3, r3, #16
 8010708:	2b00      	cmp	r3, #0
 801070a:	d008      	beq.n	801071e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801070c:	4b25      	ldr	r3, [pc, #148]	; (80107a4 <FLASH_SetErrorCode+0xa8>)
 801070e:	69db      	ldr	r3, [r3, #28]
 8010710:	f043 0310 	orr.w	r3, r3, #16
 8010714:	4a23      	ldr	r2, [pc, #140]	; (80107a4 <FLASH_SetErrorCode+0xa8>)
 8010716:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8010718:	4b21      	ldr	r3, [pc, #132]	; (80107a0 <FLASH_SetErrorCode+0xa4>)
 801071a:	2210      	movs	r2, #16
 801071c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 801071e:	4b20      	ldr	r3, [pc, #128]	; (80107a0 <FLASH_SetErrorCode+0xa4>)
 8010720:	68db      	ldr	r3, [r3, #12]
 8010722:	f003 0320 	and.w	r3, r3, #32
 8010726:	2b00      	cmp	r3, #0
 8010728:	d008      	beq.n	801073c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 801072a:	4b1e      	ldr	r3, [pc, #120]	; (80107a4 <FLASH_SetErrorCode+0xa8>)
 801072c:	69db      	ldr	r3, [r3, #28]
 801072e:	f043 0308 	orr.w	r3, r3, #8
 8010732:	4a1c      	ldr	r2, [pc, #112]	; (80107a4 <FLASH_SetErrorCode+0xa8>)
 8010734:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8010736:	4b1a      	ldr	r3, [pc, #104]	; (80107a0 <FLASH_SetErrorCode+0xa4>)
 8010738:	2220      	movs	r2, #32
 801073a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 801073c:	4b18      	ldr	r3, [pc, #96]	; (80107a0 <FLASH_SetErrorCode+0xa4>)
 801073e:	68db      	ldr	r3, [r3, #12]
 8010740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010744:	2b00      	cmp	r3, #0
 8010746:	d008      	beq.n	801075a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8010748:	4b16      	ldr	r3, [pc, #88]	; (80107a4 <FLASH_SetErrorCode+0xa8>)
 801074a:	69db      	ldr	r3, [r3, #28]
 801074c:	f043 0304 	orr.w	r3, r3, #4
 8010750:	4a14      	ldr	r2, [pc, #80]	; (80107a4 <FLASH_SetErrorCode+0xa8>)
 8010752:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8010754:	4b12      	ldr	r3, [pc, #72]	; (80107a0 <FLASH_SetErrorCode+0xa4>)
 8010756:	2240      	movs	r2, #64	; 0x40
 8010758:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801075a:	4b11      	ldr	r3, [pc, #68]	; (80107a0 <FLASH_SetErrorCode+0xa4>)
 801075c:	68db      	ldr	r3, [r3, #12]
 801075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010762:	2b00      	cmp	r3, #0
 8010764:	d008      	beq.n	8010778 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8010766:	4b0f      	ldr	r3, [pc, #60]	; (80107a4 <FLASH_SetErrorCode+0xa8>)
 8010768:	69db      	ldr	r3, [r3, #28]
 801076a:	f043 0302 	orr.w	r3, r3, #2
 801076e:	4a0d      	ldr	r2, [pc, #52]	; (80107a4 <FLASH_SetErrorCode+0xa8>)
 8010770:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8010772:	4b0b      	ldr	r3, [pc, #44]	; (80107a0 <FLASH_SetErrorCode+0xa4>)
 8010774:	2280      	movs	r2, #128	; 0x80
 8010776:	60da      	str	r2, [r3, #12]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
<<<<<<< HEAD
 8012814:	4b09      	ldr	r3, [pc, #36]	; (801283c <FLASH_SetErrorCode+0xa4>)
 8012816:	68db      	ldr	r3, [r3, #12]
 8012818:	f003 0302 	and.w	r3, r3, #2
 801281c:	2b00      	cmp	r3, #0
 801281e:	d008      	beq.n	8012832 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8012820:	4b07      	ldr	r3, [pc, #28]	; (8012840 <FLASH_SetErrorCode+0xa8>)
 8012822:	69db      	ldr	r3, [r3, #28]
 8012824:	f043 0320 	orr.w	r3, r3, #32
 8012828:	4a05      	ldr	r2, [pc, #20]	; (8012840 <FLASH_SetErrorCode+0xa8>)
 801282a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 801282c:	4b03      	ldr	r3, [pc, #12]	; (801283c <FLASH_SetErrorCode+0xa4>)
 801282e:	2202      	movs	r2, #2
 8012830:	60da      	str	r2, [r3, #12]
  }
}
 8012832:	bf00      	nop
 8012834:	46bd      	mov	sp, r7
 8012836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283a:	4770      	bx	lr
 801283c:	40023c00 	.word	0x40023c00
 8012840:	2001a7bc 	.word	0x2001a7bc

08012844 <HAL_FLASHEx_Erase>:
=======
 8010778:	4b09      	ldr	r3, [pc, #36]	; (80107a0 <FLASH_SetErrorCode+0xa4>)
 801077a:	68db      	ldr	r3, [r3, #12]
 801077c:	f003 0302 	and.w	r3, r3, #2
 8010780:	2b00      	cmp	r3, #0
 8010782:	d008      	beq.n	8010796 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8010784:	4b07      	ldr	r3, [pc, #28]	; (80107a4 <FLASH_SetErrorCode+0xa8>)
 8010786:	69db      	ldr	r3, [r3, #28]
 8010788:	f043 0320 	orr.w	r3, r3, #32
 801078c:	4a05      	ldr	r2, [pc, #20]	; (80107a4 <FLASH_SetErrorCode+0xa8>)
 801078e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8010790:	4b03      	ldr	r3, [pc, #12]	; (80107a0 <FLASH_SetErrorCode+0xa4>)
 8010792:	2202      	movs	r2, #2
 8010794:	60da      	str	r2, [r3, #12]
  }
}
 8010796:	bf00      	nop
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr
 80107a0:	40023c00 	.word	0x40023c00
 80107a4:	20016644 	.word	0x20016644

080107a8 <HAL_FLASHEx_Erase>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
<<<<<<< HEAD
 8012844:	b580      	push	{r7, lr}
 8012846:	b084      	sub	sp, #16
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801284e:	2301      	movs	r3, #1
 8012850:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8012852:	2300      	movs	r3, #0
 8012854:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8012856:	4b31      	ldr	r3, [pc, #196]	; (801291c <HAL_FLASHEx_Erase+0xd8>)
 8012858:	7e1b      	ldrb	r3, [r3, #24]
 801285a:	2b01      	cmp	r3, #1
 801285c:	d101      	bne.n	8012862 <HAL_FLASHEx_Erase+0x1e>
 801285e:	2302      	movs	r3, #2
 8012860:	e058      	b.n	8012914 <HAL_FLASHEx_Erase+0xd0>
 8012862:	4b2e      	ldr	r3, [pc, #184]	; (801291c <HAL_FLASHEx_Erase+0xd8>)
 8012864:	2201      	movs	r2, #1
 8012866:	761a      	strb	r2, [r3, #24]
=======
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80107b2:	2301      	movs	r3, #1
 80107b4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80107b6:	2300      	movs	r3, #0
 80107b8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80107ba:	4b31      	ldr	r3, [pc, #196]	; (8010880 <HAL_FLASHEx_Erase+0xd8>)
 80107bc:	7e1b      	ldrb	r3, [r3, #24]
 80107be:	2b01      	cmp	r3, #1
 80107c0:	d101      	bne.n	80107c6 <HAL_FLASHEx_Erase+0x1e>
 80107c2:	2302      	movs	r3, #2
 80107c4:	e058      	b.n	8010878 <HAL_FLASHEx_Erase+0xd0>
 80107c6:	4b2e      	ldr	r3, [pc, #184]	; (8010880 <HAL_FLASHEx_Erase+0xd8>)
 80107c8:	2201      	movs	r2, #1
 80107ca:	761a      	strb	r2, [r3, #24]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
<<<<<<< HEAD
 8012868:	f24c 3050 	movw	r0, #50000	; 0xc350
 801286c:	f7ff febc 	bl	80125e8 <FLASH_WaitForLastOperation>
 8012870:	4603      	mov	r3, r0
 8012872:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8012874:	7bfb      	ldrb	r3, [r7, #15]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d148      	bne.n	801290c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	f04f 32ff 	mov.w	r2, #4294967295
 8012880:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	2b01      	cmp	r3, #1
 8012888:	d115      	bne.n	80128b6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	691b      	ldr	r3, [r3, #16]
 801288e:	b2da      	uxtb	r2, r3
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	4619      	mov	r1, r3
 8012896:	4610      	mov	r0, r2
 8012898:	f000 f844 	bl	8012924 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801289c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80128a0:	f7ff fea2 	bl	80125e8 <FLASH_WaitForLastOperation>
 80128a4:	4603      	mov	r3, r0
 80128a6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80128a8:	4b1d      	ldr	r3, [pc, #116]	; (8012920 <HAL_FLASHEx_Erase+0xdc>)
 80128aa:	691b      	ldr	r3, [r3, #16]
 80128ac:	4a1c      	ldr	r2, [pc, #112]	; (8012920 <HAL_FLASHEx_Erase+0xdc>)
 80128ae:	f023 0304 	bic.w	r3, r3, #4
 80128b2:	6113      	str	r3, [r2, #16]
 80128b4:	e028      	b.n	8012908 <HAL_FLASHEx_Erase+0xc4>
=======
 80107cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80107d0:	f7ff febc 	bl	801054c <FLASH_WaitForLastOperation>
 80107d4:	4603      	mov	r3, r0
 80107d6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80107d8:	7bfb      	ldrb	r3, [r7, #15]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d148      	bne.n	8010870 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	f04f 32ff 	mov.w	r2, #4294967295
 80107e4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d115      	bne.n	801081a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	691b      	ldr	r3, [r3, #16]
 80107f2:	b2da      	uxtb	r2, r3
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	685b      	ldr	r3, [r3, #4]
 80107f8:	4619      	mov	r1, r3
 80107fa:	4610      	mov	r0, r2
 80107fc:	f000 f844 	bl	8010888 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010800:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010804:	f7ff fea2 	bl	801054c <FLASH_WaitForLastOperation>
 8010808:	4603      	mov	r3, r0
 801080a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 801080c:	4b1d      	ldr	r3, [pc, #116]	; (8010884 <HAL_FLASHEx_Erase+0xdc>)
 801080e:	691b      	ldr	r3, [r3, #16]
 8010810:	4a1c      	ldr	r2, [pc, #112]	; (8010884 <HAL_FLASHEx_Erase+0xdc>)
 8010812:	f023 0304 	bic.w	r3, r3, #4
 8010816:	6113      	str	r3, [r2, #16]
 8010818:	e028      	b.n	801086c <HAL_FLASHEx_Erase+0xc4>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
<<<<<<< HEAD
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	689b      	ldr	r3, [r3, #8]
 80128ba:	60bb      	str	r3, [r7, #8]
 80128bc:	e01c      	b.n	80128f8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	691b      	ldr	r3, [r3, #16]
 80128c2:	b2db      	uxtb	r3, r3
 80128c4:	4619      	mov	r1, r3
 80128c6:	68b8      	ldr	r0, [r7, #8]
 80128c8:	f000 f850 	bl	801296c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80128cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80128d0:	f7ff fe8a 	bl	80125e8 <FLASH_WaitForLastOperation>
 80128d4:	4603      	mov	r3, r0
 80128d6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80128d8:	4b11      	ldr	r3, [pc, #68]	; (8012920 <HAL_FLASHEx_Erase+0xdc>)
 80128da:	691b      	ldr	r3, [r3, #16]
 80128dc:	4a10      	ldr	r2, [pc, #64]	; (8012920 <HAL_FLASHEx_Erase+0xdc>)
 80128de:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80128e2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80128e4:	7bfb      	ldrb	r3, [r7, #15]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d003      	beq.n	80128f2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	68ba      	ldr	r2, [r7, #8]
 80128ee:	601a      	str	r2, [r3, #0]
          break;
 80128f0:	e00a      	b.n	8012908 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	3301      	adds	r3, #1
 80128f6:	60bb      	str	r3, [r7, #8]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	68da      	ldr	r2, [r3, #12]
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	689b      	ldr	r3, [r3, #8]
 8012900:	4413      	add	r3, r2
 8012902:	68ba      	ldr	r2, [r7, #8]
 8012904:	429a      	cmp	r2, r3
 8012906:	d3da      	bcc.n	80128be <HAL_FLASHEx_Erase+0x7a>
=======
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	689b      	ldr	r3, [r3, #8]
 801081e:	60bb      	str	r3, [r7, #8]
 8010820:	e01c      	b.n	801085c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	691b      	ldr	r3, [r3, #16]
 8010826:	b2db      	uxtb	r3, r3
 8010828:	4619      	mov	r1, r3
 801082a:	68b8      	ldr	r0, [r7, #8]
 801082c:	f000 f850 	bl	80108d0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010830:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010834:	f7ff fe8a 	bl	801054c <FLASH_WaitForLastOperation>
 8010838:	4603      	mov	r3, r0
 801083a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 801083c:	4b11      	ldr	r3, [pc, #68]	; (8010884 <HAL_FLASHEx_Erase+0xdc>)
 801083e:	691b      	ldr	r3, [r3, #16]
 8010840:	4a10      	ldr	r2, [pc, #64]	; (8010884 <HAL_FLASHEx_Erase+0xdc>)
 8010842:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8010846:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8010848:	7bfb      	ldrb	r3, [r7, #15]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d003      	beq.n	8010856 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	68ba      	ldr	r2, [r7, #8]
 8010852:	601a      	str	r2, [r3, #0]
          break;
 8010854:	e00a      	b.n	801086c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	3301      	adds	r3, #1
 801085a:	60bb      	str	r3, [r7, #8]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	68da      	ldr	r2, [r3, #12]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	689b      	ldr	r3, [r3, #8]
 8010864:	4413      	add	r3, r2
 8010866:	68ba      	ldr	r2, [r7, #8]
 8010868:	429a      	cmp	r2, r3
 801086a:	d3da      	bcc.n	8010822 <HAL_FLASHEx_Erase+0x7a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
<<<<<<< HEAD
 8012908:	f000 f878 	bl	80129fc <FLASH_FlushCaches>
=======
 801086c:	f000 f878 	bl	8010960 <FLASH_FlushCaches>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
<<<<<<< HEAD
 801290c:	4b03      	ldr	r3, [pc, #12]	; (801291c <HAL_FLASHEx_Erase+0xd8>)
 801290e:	2200      	movs	r2, #0
 8012910:	761a      	strb	r2, [r3, #24]

  return status;
 8012912:	7bfb      	ldrb	r3, [r7, #15]
}
 8012914:	4618      	mov	r0, r3
 8012916:	3710      	adds	r7, #16
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	2001a7bc 	.word	0x2001a7bc
 8012920:	40023c00 	.word	0x40023c00

08012924 <FLASH_MassErase>:
=======
 8010870:	4b03      	ldr	r3, [pc, #12]	; (8010880 <HAL_FLASHEx_Erase+0xd8>)
 8010872:	2200      	movs	r2, #0
 8010874:	761a      	strb	r2, [r3, #24]

  return status;
 8010876:	7bfb      	ldrb	r3, [r7, #15]
}
 8010878:	4618      	mov	r0, r3
 801087a:	3710      	adds	r7, #16
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	20016644 	.word	0x20016644
 8010884:	40023c00 	.word	0x40023c00

08010888 <FLASH_MassErase>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
<<<<<<< HEAD
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
 801292a:	4603      	mov	r3, r0
 801292c:	6039      	str	r1, [r7, #0]
 801292e:	71fb      	strb	r3, [r7, #7]
=======
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
 801088e:	4603      	mov	r3, r0
 8010890:	6039      	str	r1, [r7, #0]
 8010892:	71fb      	strb	r3, [r7, #7]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
<<<<<<< HEAD
 8012930:	4b0d      	ldr	r3, [pc, #52]	; (8012968 <FLASH_MassErase+0x44>)
 8012932:	691b      	ldr	r3, [r3, #16]
 8012934:	4a0c      	ldr	r2, [pc, #48]	; (8012968 <FLASH_MassErase+0x44>)
 8012936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801293a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 801293c:	4b0a      	ldr	r3, [pc, #40]	; (8012968 <FLASH_MassErase+0x44>)
 801293e:	691b      	ldr	r3, [r3, #16]
 8012940:	4a09      	ldr	r2, [pc, #36]	; (8012968 <FLASH_MassErase+0x44>)
 8012942:	f043 0304 	orr.w	r3, r3, #4
 8012946:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8012948:	4b07      	ldr	r3, [pc, #28]	; (8012968 <FLASH_MassErase+0x44>)
 801294a:	691a      	ldr	r2, [r3, #16]
 801294c:	79fb      	ldrb	r3, [r7, #7]
 801294e:	021b      	lsls	r3, r3, #8
 8012950:	4313      	orrs	r3, r2
 8012952:	4a05      	ldr	r2, [pc, #20]	; (8012968 <FLASH_MassErase+0x44>)
 8012954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012958:	6113      	str	r3, [r2, #16]
}
 801295a:	bf00      	nop
 801295c:	370c      	adds	r7, #12
 801295e:	46bd      	mov	sp, r7
 8012960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012964:	4770      	bx	lr
 8012966:	bf00      	nop
 8012968:	40023c00 	.word	0x40023c00

0801296c <FLASH_Erase_Sector>:
=======
 8010894:	4b0d      	ldr	r3, [pc, #52]	; (80108cc <FLASH_MassErase+0x44>)
 8010896:	691b      	ldr	r3, [r3, #16]
 8010898:	4a0c      	ldr	r2, [pc, #48]	; (80108cc <FLASH_MassErase+0x44>)
 801089a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801089e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80108a0:	4b0a      	ldr	r3, [pc, #40]	; (80108cc <FLASH_MassErase+0x44>)
 80108a2:	691b      	ldr	r3, [r3, #16]
 80108a4:	4a09      	ldr	r2, [pc, #36]	; (80108cc <FLASH_MassErase+0x44>)
 80108a6:	f043 0304 	orr.w	r3, r3, #4
 80108aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80108ac:	4b07      	ldr	r3, [pc, #28]	; (80108cc <FLASH_MassErase+0x44>)
 80108ae:	691a      	ldr	r2, [r3, #16]
 80108b0:	79fb      	ldrb	r3, [r7, #7]
 80108b2:	021b      	lsls	r3, r3, #8
 80108b4:	4313      	orrs	r3, r2
 80108b6:	4a05      	ldr	r2, [pc, #20]	; (80108cc <FLASH_MassErase+0x44>)
 80108b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80108bc:	6113      	str	r3, [r2, #16]
}
 80108be:	bf00      	nop
 80108c0:	370c      	adds	r7, #12
 80108c2:	46bd      	mov	sp, r7
 80108c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c8:	4770      	bx	lr
 80108ca:	bf00      	nop
 80108cc:	40023c00 	.word	0x40023c00

080108d0 <FLASH_Erase_Sector>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
<<<<<<< HEAD
 801296c:	b480      	push	{r7}
 801296e:	b085      	sub	sp, #20
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
 8012974:	460b      	mov	r3, r1
 8012976:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8012978:	2300      	movs	r3, #0
 801297a:	60fb      	str	r3, [r7, #12]
=======
 80108d0:	b480      	push	{r7}
 80108d2:	b085      	sub	sp, #20
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	460b      	mov	r3, r1
 80108da:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80108dc:	2300      	movs	r3, #0
 80108de:	60fb      	str	r3, [r7, #12]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
<<<<<<< HEAD
 801297c:	78fb      	ldrb	r3, [r7, #3]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d102      	bne.n	8012988 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8012982:	2300      	movs	r3, #0
 8012984:	60fb      	str	r3, [r7, #12]
 8012986:	e010      	b.n	80129aa <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8012988:	78fb      	ldrb	r3, [r7, #3]
 801298a:	2b01      	cmp	r3, #1
 801298c:	d103      	bne.n	8012996 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801298e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012992:	60fb      	str	r3, [r7, #12]
 8012994:	e009      	b.n	80129aa <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8012996:	78fb      	ldrb	r3, [r7, #3]
 8012998:	2b02      	cmp	r3, #2
 801299a:	d103      	bne.n	80129a4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 801299c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80129a0:	60fb      	str	r3, [r7, #12]
 80129a2:	e002      	b.n	80129aa <FLASH_Erase_Sector+0x3e>
=======
 80108e0:	78fb      	ldrb	r3, [r7, #3]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d102      	bne.n	80108ec <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80108e6:	2300      	movs	r3, #0
 80108e8:	60fb      	str	r3, [r7, #12]
 80108ea:	e010      	b.n	801090e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80108ec:	78fb      	ldrb	r3, [r7, #3]
 80108ee:	2b01      	cmp	r3, #1
 80108f0:	d103      	bne.n	80108fa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80108f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108f6:	60fb      	str	r3, [r7, #12]
 80108f8:	e009      	b.n	801090e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80108fa:	78fb      	ldrb	r3, [r7, #3]
 80108fc:	2b02      	cmp	r3, #2
 80108fe:	d103      	bne.n	8010908 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8010900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010904:	60fb      	str	r3, [r7, #12]
 8010906:	e002      	b.n	801090e <FLASH_Erase_Sector+0x3e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
<<<<<<< HEAD
 80129a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80129a8:	60fb      	str	r3, [r7, #12]
=======
 8010908:	f44f 7340 	mov.w	r3, #768	; 0x300
 801090c:	60fb      	str	r3, [r7, #12]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
<<<<<<< HEAD
 80129aa:	4b13      	ldr	r3, [pc, #76]	; (80129f8 <FLASH_Erase_Sector+0x8c>)
 80129ac:	691b      	ldr	r3, [r3, #16]
 80129ae:	4a12      	ldr	r2, [pc, #72]	; (80129f8 <FLASH_Erase_Sector+0x8c>)
 80129b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80129b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80129b6:	4b10      	ldr	r3, [pc, #64]	; (80129f8 <FLASH_Erase_Sector+0x8c>)
 80129b8:	691a      	ldr	r2, [r3, #16]
 80129ba:	490f      	ldr	r1, [pc, #60]	; (80129f8 <FLASH_Erase_Sector+0x8c>)
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	4313      	orrs	r3, r2
 80129c0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80129c2:	4b0d      	ldr	r3, [pc, #52]	; (80129f8 <FLASH_Erase_Sector+0x8c>)
 80129c4:	691b      	ldr	r3, [r3, #16]
 80129c6:	4a0c      	ldr	r2, [pc, #48]	; (80129f8 <FLASH_Erase_Sector+0x8c>)
 80129c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80129cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80129ce:	4b0a      	ldr	r3, [pc, #40]	; (80129f8 <FLASH_Erase_Sector+0x8c>)
 80129d0:	691a      	ldr	r2, [r3, #16]
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	00db      	lsls	r3, r3, #3
 80129d6:	4313      	orrs	r3, r2
 80129d8:	4a07      	ldr	r2, [pc, #28]	; (80129f8 <FLASH_Erase_Sector+0x8c>)
 80129da:	f043 0302 	orr.w	r3, r3, #2
 80129de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80129e0:	4b05      	ldr	r3, [pc, #20]	; (80129f8 <FLASH_Erase_Sector+0x8c>)
 80129e2:	691b      	ldr	r3, [r3, #16]
 80129e4:	4a04      	ldr	r2, [pc, #16]	; (80129f8 <FLASH_Erase_Sector+0x8c>)
 80129e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80129ea:	6113      	str	r3, [r2, #16]
}
 80129ec:	bf00      	nop
 80129ee:	3714      	adds	r7, #20
 80129f0:	46bd      	mov	sp, r7
 80129f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f6:	4770      	bx	lr
 80129f8:	40023c00 	.word	0x40023c00

080129fc <FLASH_FlushCaches>:
=======
 801090e:	4b13      	ldr	r3, [pc, #76]	; (801095c <FLASH_Erase_Sector+0x8c>)
 8010910:	691b      	ldr	r3, [r3, #16]
 8010912:	4a12      	ldr	r2, [pc, #72]	; (801095c <FLASH_Erase_Sector+0x8c>)
 8010914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010918:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 801091a:	4b10      	ldr	r3, [pc, #64]	; (801095c <FLASH_Erase_Sector+0x8c>)
 801091c:	691a      	ldr	r2, [r3, #16]
 801091e:	490f      	ldr	r1, [pc, #60]	; (801095c <FLASH_Erase_Sector+0x8c>)
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	4313      	orrs	r3, r2
 8010924:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8010926:	4b0d      	ldr	r3, [pc, #52]	; (801095c <FLASH_Erase_Sector+0x8c>)
 8010928:	691b      	ldr	r3, [r3, #16]
 801092a:	4a0c      	ldr	r2, [pc, #48]	; (801095c <FLASH_Erase_Sector+0x8c>)
 801092c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8010930:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8010932:	4b0a      	ldr	r3, [pc, #40]	; (801095c <FLASH_Erase_Sector+0x8c>)
 8010934:	691a      	ldr	r2, [r3, #16]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	00db      	lsls	r3, r3, #3
 801093a:	4313      	orrs	r3, r2
 801093c:	4a07      	ldr	r2, [pc, #28]	; (801095c <FLASH_Erase_Sector+0x8c>)
 801093e:	f043 0302 	orr.w	r3, r3, #2
 8010942:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8010944:	4b05      	ldr	r3, [pc, #20]	; (801095c <FLASH_Erase_Sector+0x8c>)
 8010946:	691b      	ldr	r3, [r3, #16]
 8010948:	4a04      	ldr	r2, [pc, #16]	; (801095c <FLASH_Erase_Sector+0x8c>)
 801094a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801094e:	6113      	str	r3, [r2, #16]
}
 8010950:	bf00      	nop
 8010952:	3714      	adds	r7, #20
 8010954:	46bd      	mov	sp, r7
 8010956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095a:	4770      	bx	lr
 801095c:	40023c00 	.word	0x40023c00

08010960 <FLASH_FlushCaches>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
<<<<<<< HEAD
 80129fc:	b480      	push	{r7}
 80129fe:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8012a00:	4b20      	ldr	r3, [pc, #128]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d017      	beq.n	8012a3c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8012a0c:	4b1d      	ldr	r3, [pc, #116]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	4a1c      	ldr	r2, [pc, #112]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012a16:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8012a18:	4b1a      	ldr	r3, [pc, #104]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	4a19      	ldr	r2, [pc, #100]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012a22:	6013      	str	r3, [r2, #0]
 8012a24:	4b17      	ldr	r3, [pc, #92]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	4a16      	ldr	r2, [pc, #88]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012a2e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8012a30:	4b14      	ldr	r3, [pc, #80]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	4a13      	ldr	r2, [pc, #76]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012a3a:	6013      	str	r3, [r2, #0]
=======
 8010960:	b480      	push	{r7}
 8010962:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8010964:	4b20      	ldr	r3, [pc, #128]	; (80109e8 <FLASH_FlushCaches+0x88>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801096c:	2b00      	cmp	r3, #0
 801096e:	d017      	beq.n	80109a0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8010970:	4b1d      	ldr	r3, [pc, #116]	; (80109e8 <FLASH_FlushCaches+0x88>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	4a1c      	ldr	r2, [pc, #112]	; (80109e8 <FLASH_FlushCaches+0x88>)
 8010976:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801097a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801097c:	4b1a      	ldr	r3, [pc, #104]	; (80109e8 <FLASH_FlushCaches+0x88>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	4a19      	ldr	r2, [pc, #100]	; (80109e8 <FLASH_FlushCaches+0x88>)
 8010982:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010986:	6013      	str	r3, [r2, #0]
 8010988:	4b17      	ldr	r3, [pc, #92]	; (80109e8 <FLASH_FlushCaches+0x88>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	4a16      	ldr	r2, [pc, #88]	; (80109e8 <FLASH_FlushCaches+0x88>)
 801098e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010992:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010994:	4b14      	ldr	r3, [pc, #80]	; (80109e8 <FLASH_FlushCaches+0x88>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	4a13      	ldr	r2, [pc, #76]	; (80109e8 <FLASH_FlushCaches+0x88>)
 801099a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801099e:	6013      	str	r3, [r2, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
<<<<<<< HEAD
 8012a3c:	4b11      	ldr	r3, [pc, #68]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d017      	beq.n	8012a78 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8012a48:	4b0e      	ldr	r3, [pc, #56]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	4a0d      	ldr	r2, [pc, #52]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012a52:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8012a54:	4b0b      	ldr	r3, [pc, #44]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	4a0a      	ldr	r2, [pc, #40]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012a5e:	6013      	str	r3, [r2, #0]
 8012a60:	4b08      	ldr	r3, [pc, #32]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	4a07      	ldr	r2, [pc, #28]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a6a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8012a6c:	4b05      	ldr	r3, [pc, #20]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	4a04      	ldr	r2, [pc, #16]	; (8012a84 <FLASH_FlushCaches+0x88>)
 8012a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012a76:	6013      	str	r3, [r2, #0]
  }
}
 8012a78:	bf00      	nop
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a80:	4770      	bx	lr
 8012a82:	bf00      	nop
 8012a84:	40023c00 	.word	0x40023c00

08012a88 <HAL_GPIO_Init>:
=======
 80109a0:	4b11      	ldr	r3, [pc, #68]	; (80109e8 <FLASH_FlushCaches+0x88>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d017      	beq.n	80109dc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80109ac:	4b0e      	ldr	r3, [pc, #56]	; (80109e8 <FLASH_FlushCaches+0x88>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	4a0d      	ldr	r2, [pc, #52]	; (80109e8 <FLASH_FlushCaches+0x88>)
 80109b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80109b6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80109b8:	4b0b      	ldr	r3, [pc, #44]	; (80109e8 <FLASH_FlushCaches+0x88>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4a0a      	ldr	r2, [pc, #40]	; (80109e8 <FLASH_FlushCaches+0x88>)
 80109be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80109c2:	6013      	str	r3, [r2, #0]
 80109c4:	4b08      	ldr	r3, [pc, #32]	; (80109e8 <FLASH_FlushCaches+0x88>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	4a07      	ldr	r2, [pc, #28]	; (80109e8 <FLASH_FlushCaches+0x88>)
 80109ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80109ce:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80109d0:	4b05      	ldr	r3, [pc, #20]	; (80109e8 <FLASH_FlushCaches+0x88>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4a04      	ldr	r2, [pc, #16]	; (80109e8 <FLASH_FlushCaches+0x88>)
 80109d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80109da:	6013      	str	r3, [r2, #0]
  }
}
 80109dc:	bf00      	nop
 80109de:	46bd      	mov	sp, r7
 80109e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e4:	4770      	bx	lr
 80109e6:	bf00      	nop
 80109e8:	40023c00 	.word	0x40023c00

080109ec <HAL_GPIO_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8012a88:	b480      	push	{r7}
 8012a8a:	b089      	sub	sp, #36	; 0x24
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
 8012a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012a92:	2300      	movs	r3, #0
 8012a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012a96:	2300      	movs	r3, #0
 8012a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	61bb      	str	r3, [r7, #24]
=======
 80109ec:	b480      	push	{r7}
 80109ee:	b089      	sub	sp, #36	; 0x24
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
 80109f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80109f6:	2300      	movs	r3, #0
 80109f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80109fa:	2300      	movs	r3, #0
 80109fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80109fe:	2300      	movs	r3, #0
 8010a00:	61bb      	str	r3, [r7, #24]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	61fb      	str	r3, [r7, #28]
 8012aa2:	e16b      	b.n	8012d7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012aa4:	2201      	movs	r2, #1
 8012aa6:	69fb      	ldr	r3, [r7, #28]
 8012aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8012aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	697a      	ldr	r2, [r7, #20]
 8012ab4:	4013      	ands	r3, r2
 8012ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012ab8:	693a      	ldr	r2, [r7, #16]
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	429a      	cmp	r2, r3
 8012abe:	f040 815a 	bne.w	8012d76 <HAL_GPIO_Init+0x2ee>
=======
 8010a02:	2300      	movs	r3, #0
 8010a04:	61fb      	str	r3, [r7, #28]
 8010a06:	e16b      	b.n	8010ce0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010a08:	2201      	movs	r2, #1
 8010a0a:	69fb      	ldr	r3, [r7, #28]
 8010a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8010a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	697a      	ldr	r2, [r7, #20]
 8010a18:	4013      	ands	r3, r2
 8010a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010a1c:	693a      	ldr	r2, [r7, #16]
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	f040 815a 	bne.w	8010cda <HAL_GPIO_Init+0x2ee>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
<<<<<<< HEAD
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	2b01      	cmp	r3, #1
 8012ac8:	d00b      	beq.n	8012ae2 <HAL_GPIO_Init+0x5a>
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	685b      	ldr	r3, [r3, #4]
 8012ace:	2b02      	cmp	r3, #2
 8012ad0:	d007      	beq.n	8012ae2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012ad6:	2b11      	cmp	r3, #17
 8012ad8:	d003      	beq.n	8012ae2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012ada:	683b      	ldr	r3, [r7, #0]
 8012adc:	685b      	ldr	r3, [r3, #4]
 8012ade:	2b12      	cmp	r3, #18
 8012ae0:	d130      	bne.n	8012b44 <HAL_GPIO_Init+0xbc>
=======
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	2b01      	cmp	r3, #1
 8010a2c:	d00b      	beq.n	8010a46 <HAL_GPIO_Init+0x5a>
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	2b02      	cmp	r3, #2
 8010a34:	d007      	beq.n	8010a46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010a3a:	2b11      	cmp	r3, #17
 8010a3c:	d003      	beq.n	8010a46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	685b      	ldr	r3, [r3, #4]
 8010a42:	2b12      	cmp	r3, #18
 8010a44:	d130      	bne.n	8010aa8 <HAL_GPIO_Init+0xbc>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	689b      	ldr	r3, [r3, #8]
 8012ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012ae8:	69fb      	ldr	r3, [r7, #28]
 8012aea:	005b      	lsls	r3, r3, #1
 8012aec:	2203      	movs	r2, #3
 8012aee:	fa02 f303 	lsl.w	r3, r2, r3
 8012af2:	43db      	mvns	r3, r3
 8012af4:	69ba      	ldr	r2, [r7, #24]
 8012af6:	4013      	ands	r3, r2
 8012af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	68da      	ldr	r2, [r3, #12]
 8012afe:	69fb      	ldr	r3, [r7, #28]
 8012b00:	005b      	lsls	r3, r3, #1
 8012b02:	fa02 f303 	lsl.w	r3, r2, r3
 8012b06:	69ba      	ldr	r2, [r7, #24]
 8012b08:	4313      	orrs	r3, r2
 8012b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	69ba      	ldr	r2, [r7, #24]
 8012b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	685b      	ldr	r3, [r3, #4]
 8012b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012b18:	2201      	movs	r2, #1
 8012b1a:	69fb      	ldr	r3, [r7, #28]
 8012b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8012b20:	43db      	mvns	r3, r3
 8012b22:	69ba      	ldr	r2, [r7, #24]
 8012b24:	4013      	ands	r3, r2
 8012b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	091b      	lsrs	r3, r3, #4
 8012b2e:	f003 0201 	and.w	r2, r3, #1
 8012b32:	69fb      	ldr	r3, [r7, #28]
 8012b34:	fa02 f303 	lsl.w	r3, r2, r3
 8012b38:	69ba      	ldr	r2, [r7, #24]
 8012b3a:	4313      	orrs	r3, r2
 8012b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	69ba      	ldr	r2, [r7, #24]
 8012b42:	605a      	str	r2, [r3, #4]
=======
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	689b      	ldr	r3, [r3, #8]
 8010a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010a4c:	69fb      	ldr	r3, [r7, #28]
 8010a4e:	005b      	lsls	r3, r3, #1
 8010a50:	2203      	movs	r2, #3
 8010a52:	fa02 f303 	lsl.w	r3, r2, r3
 8010a56:	43db      	mvns	r3, r3
 8010a58:	69ba      	ldr	r2, [r7, #24]
 8010a5a:	4013      	ands	r3, r2
 8010a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	68da      	ldr	r2, [r3, #12]
 8010a62:	69fb      	ldr	r3, [r7, #28]
 8010a64:	005b      	lsls	r3, r3, #1
 8010a66:	fa02 f303 	lsl.w	r3, r2, r3
 8010a6a:	69ba      	ldr	r2, [r7, #24]
 8010a6c:	4313      	orrs	r3, r2
 8010a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	69ba      	ldr	r2, [r7, #24]
 8010a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	685b      	ldr	r3, [r3, #4]
 8010a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010a7c:	2201      	movs	r2, #1
 8010a7e:	69fb      	ldr	r3, [r7, #28]
 8010a80:	fa02 f303 	lsl.w	r3, r2, r3
 8010a84:	43db      	mvns	r3, r3
 8010a86:	69ba      	ldr	r2, [r7, #24]
 8010a88:	4013      	ands	r3, r2
 8010a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	685b      	ldr	r3, [r3, #4]
 8010a90:	091b      	lsrs	r3, r3, #4
 8010a92:	f003 0201 	and.w	r2, r3, #1
 8010a96:	69fb      	ldr	r3, [r7, #28]
 8010a98:	fa02 f303 	lsl.w	r3, r2, r3
 8010a9c:	69ba      	ldr	r2, [r7, #24]
 8010a9e:	4313      	orrs	r3, r2
 8010aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	69ba      	ldr	r2, [r7, #24]
 8010aa6:	605a      	str	r2, [r3, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	68db      	ldr	r3, [r3, #12]
 8012b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012b4a:	69fb      	ldr	r3, [r7, #28]
 8012b4c:	005b      	lsls	r3, r3, #1
 8012b4e:	2203      	movs	r2, #3
 8012b50:	fa02 f303 	lsl.w	r3, r2, r3
 8012b54:	43db      	mvns	r3, r3
 8012b56:	69ba      	ldr	r2, [r7, #24]
 8012b58:	4013      	ands	r3, r2
 8012b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	689a      	ldr	r2, [r3, #8]
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	005b      	lsls	r3, r3, #1
 8012b64:	fa02 f303 	lsl.w	r3, r2, r3
 8012b68:	69ba      	ldr	r2, [r7, #24]
 8012b6a:	4313      	orrs	r3, r2
 8012b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	69ba      	ldr	r2, [r7, #24]
 8012b72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012b74:	683b      	ldr	r3, [r7, #0]
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	2b02      	cmp	r3, #2
 8012b7a:	d003      	beq.n	8012b84 <HAL_GPIO_Init+0xfc>
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	685b      	ldr	r3, [r3, #4]
 8012b80:	2b12      	cmp	r3, #18
 8012b82:	d123      	bne.n	8012bcc <HAL_GPIO_Init+0x144>
=======
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	68db      	ldr	r3, [r3, #12]
 8010aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010aae:	69fb      	ldr	r3, [r7, #28]
 8010ab0:	005b      	lsls	r3, r3, #1
 8010ab2:	2203      	movs	r2, #3
 8010ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8010ab8:	43db      	mvns	r3, r3
 8010aba:	69ba      	ldr	r2, [r7, #24]
 8010abc:	4013      	ands	r3, r2
 8010abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	689a      	ldr	r2, [r3, #8]
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	005b      	lsls	r3, r3, #1
 8010ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8010acc:	69ba      	ldr	r2, [r7, #24]
 8010ace:	4313      	orrs	r3, r2
 8010ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	69ba      	ldr	r2, [r7, #24]
 8010ad6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	685b      	ldr	r3, [r3, #4]
 8010adc:	2b02      	cmp	r3, #2
 8010ade:	d003      	beq.n	8010ae8 <HAL_GPIO_Init+0xfc>
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	685b      	ldr	r3, [r3, #4]
 8010ae4:	2b12      	cmp	r3, #18
 8010ae6:	d123      	bne.n	8010b30 <HAL_GPIO_Init+0x144>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8012b84:	69fb      	ldr	r3, [r7, #28]
 8012b86:	08da      	lsrs	r2, r3, #3
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	3208      	adds	r2, #8
 8012b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012b92:	69fb      	ldr	r3, [r7, #28]
 8012b94:	f003 0307 	and.w	r3, r3, #7
 8012b98:	009b      	lsls	r3, r3, #2
 8012b9a:	220f      	movs	r2, #15
 8012b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8012ba0:	43db      	mvns	r3, r3
 8012ba2:	69ba      	ldr	r2, [r7, #24]
 8012ba4:	4013      	ands	r3, r2
 8012ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	691a      	ldr	r2, [r3, #16]
 8012bac:	69fb      	ldr	r3, [r7, #28]
 8012bae:	f003 0307 	and.w	r3, r3, #7
 8012bb2:	009b      	lsls	r3, r3, #2
 8012bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8012bb8:	69ba      	ldr	r2, [r7, #24]
 8012bba:	4313      	orrs	r3, r2
 8012bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012bbe:	69fb      	ldr	r3, [r7, #28]
 8012bc0:	08da      	lsrs	r2, r3, #3
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	3208      	adds	r2, #8
 8012bc6:	69b9      	ldr	r1, [r7, #24]
 8012bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8010ae8:	69fb      	ldr	r3, [r7, #28]
 8010aea:	08da      	lsrs	r2, r3, #3
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	3208      	adds	r2, #8
 8010af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010af6:	69fb      	ldr	r3, [r7, #28]
 8010af8:	f003 0307 	and.w	r3, r3, #7
 8010afc:	009b      	lsls	r3, r3, #2
 8010afe:	220f      	movs	r2, #15
 8010b00:	fa02 f303 	lsl.w	r3, r2, r3
 8010b04:	43db      	mvns	r3, r3
 8010b06:	69ba      	ldr	r2, [r7, #24]
 8010b08:	4013      	ands	r3, r2
 8010b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	691a      	ldr	r2, [r3, #16]
 8010b10:	69fb      	ldr	r3, [r7, #28]
 8010b12:	f003 0307 	and.w	r3, r3, #7
 8010b16:	009b      	lsls	r3, r3, #2
 8010b18:	fa02 f303 	lsl.w	r3, r2, r3
 8010b1c:	69ba      	ldr	r2, [r7, #24]
 8010b1e:	4313      	orrs	r3, r2
 8010b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010b22:	69fb      	ldr	r3, [r7, #28]
 8010b24:	08da      	lsrs	r2, r3, #3
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	3208      	adds	r2, #8
 8010b2a:	69b9      	ldr	r1, [r7, #24]
 8010b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012bd2:	69fb      	ldr	r3, [r7, #28]
 8012bd4:	005b      	lsls	r3, r3, #1
 8012bd6:	2203      	movs	r2, #3
 8012bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8012bdc:	43db      	mvns	r3, r3
 8012bde:	69ba      	ldr	r2, [r7, #24]
 8012be0:	4013      	ands	r3, r2
 8012be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	685b      	ldr	r3, [r3, #4]
 8012be8:	f003 0203 	and.w	r2, r3, #3
 8012bec:	69fb      	ldr	r3, [r7, #28]
 8012bee:	005b      	lsls	r3, r3, #1
 8012bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8012bf4:	69ba      	ldr	r2, [r7, #24]
 8012bf6:	4313      	orrs	r3, r2
 8012bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	69ba      	ldr	r2, [r7, #24]
 8012bfe:	601a      	str	r2, [r3, #0]
=======
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010b36:	69fb      	ldr	r3, [r7, #28]
 8010b38:	005b      	lsls	r3, r3, #1
 8010b3a:	2203      	movs	r2, #3
 8010b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8010b40:	43db      	mvns	r3, r3
 8010b42:	69ba      	ldr	r2, [r7, #24]
 8010b44:	4013      	ands	r3, r2
 8010b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	685b      	ldr	r3, [r3, #4]
 8010b4c:	f003 0203 	and.w	r2, r3, #3
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	005b      	lsls	r3, r3, #1
 8010b54:	fa02 f303 	lsl.w	r3, r2, r3
 8010b58:	69ba      	ldr	r2, [r7, #24]
 8010b5a:	4313      	orrs	r3, r2
 8010b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	69ba      	ldr	r2, [r7, #24]
 8010b62:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	f000 80b4 	beq.w	8012d76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012c0e:	2300      	movs	r3, #0
 8012c10:	60fb      	str	r3, [r7, #12]
 8012c12:	4b5f      	ldr	r3, [pc, #380]	; (8012d90 <HAL_GPIO_Init+0x308>)
 8012c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c16:	4a5e      	ldr	r2, [pc, #376]	; (8012d90 <HAL_GPIO_Init+0x308>)
 8012c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8012c1e:	4b5c      	ldr	r3, [pc, #368]	; (8012d90 <HAL_GPIO_Init+0x308>)
 8012c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012c26:	60fb      	str	r3, [r7, #12]
 8012c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012c2a:	4a5a      	ldr	r2, [pc, #360]	; (8012d94 <HAL_GPIO_Init+0x30c>)
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	089b      	lsrs	r3, r3, #2
 8012c30:	3302      	adds	r3, #2
 8012c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012c38:	69fb      	ldr	r3, [r7, #28]
 8012c3a:	f003 0303 	and.w	r3, r3, #3
 8012c3e:	009b      	lsls	r3, r3, #2
 8012c40:	220f      	movs	r2, #15
 8012c42:	fa02 f303 	lsl.w	r3, r2, r3
 8012c46:	43db      	mvns	r3, r3
 8012c48:	69ba      	ldr	r2, [r7, #24]
 8012c4a:	4013      	ands	r3, r2
 8012c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	4a51      	ldr	r2, [pc, #324]	; (8012d98 <HAL_GPIO_Init+0x310>)
 8012c52:	4293      	cmp	r3, r2
 8012c54:	d02b      	beq.n	8012cae <HAL_GPIO_Init+0x226>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	4a50      	ldr	r2, [pc, #320]	; (8012d9c <HAL_GPIO_Init+0x314>)
 8012c5a:	4293      	cmp	r3, r2
 8012c5c:	d025      	beq.n	8012caa <HAL_GPIO_Init+0x222>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	4a4f      	ldr	r2, [pc, #316]	; (8012da0 <HAL_GPIO_Init+0x318>)
 8012c62:	4293      	cmp	r3, r2
 8012c64:	d01f      	beq.n	8012ca6 <HAL_GPIO_Init+0x21e>
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	4a4e      	ldr	r2, [pc, #312]	; (8012da4 <HAL_GPIO_Init+0x31c>)
 8012c6a:	4293      	cmp	r3, r2
 8012c6c:	d019      	beq.n	8012ca2 <HAL_GPIO_Init+0x21a>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	4a4d      	ldr	r2, [pc, #308]	; (8012da8 <HAL_GPIO_Init+0x320>)
 8012c72:	4293      	cmp	r3, r2
 8012c74:	d013      	beq.n	8012c9e <HAL_GPIO_Init+0x216>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	4a4c      	ldr	r2, [pc, #304]	; (8012dac <HAL_GPIO_Init+0x324>)
 8012c7a:	4293      	cmp	r3, r2
 8012c7c:	d00d      	beq.n	8012c9a <HAL_GPIO_Init+0x212>
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	4a4b      	ldr	r2, [pc, #300]	; (8012db0 <HAL_GPIO_Init+0x328>)
 8012c82:	4293      	cmp	r3, r2
 8012c84:	d007      	beq.n	8012c96 <HAL_GPIO_Init+0x20e>
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	4a4a      	ldr	r2, [pc, #296]	; (8012db4 <HAL_GPIO_Init+0x32c>)
 8012c8a:	4293      	cmp	r3, r2
 8012c8c:	d101      	bne.n	8012c92 <HAL_GPIO_Init+0x20a>
 8012c8e:	2307      	movs	r3, #7
 8012c90:	e00e      	b.n	8012cb0 <HAL_GPIO_Init+0x228>
 8012c92:	2308      	movs	r3, #8
 8012c94:	e00c      	b.n	8012cb0 <HAL_GPIO_Init+0x228>
 8012c96:	2306      	movs	r3, #6
 8012c98:	e00a      	b.n	8012cb0 <HAL_GPIO_Init+0x228>
 8012c9a:	2305      	movs	r3, #5
 8012c9c:	e008      	b.n	8012cb0 <HAL_GPIO_Init+0x228>
 8012c9e:	2304      	movs	r3, #4
 8012ca0:	e006      	b.n	8012cb0 <HAL_GPIO_Init+0x228>
 8012ca2:	2303      	movs	r3, #3
 8012ca4:	e004      	b.n	8012cb0 <HAL_GPIO_Init+0x228>
 8012ca6:	2302      	movs	r3, #2
 8012ca8:	e002      	b.n	8012cb0 <HAL_GPIO_Init+0x228>
 8012caa:	2301      	movs	r3, #1
 8012cac:	e000      	b.n	8012cb0 <HAL_GPIO_Init+0x228>
 8012cae:	2300      	movs	r3, #0
 8012cb0:	69fa      	ldr	r2, [r7, #28]
 8012cb2:	f002 0203 	and.w	r2, r2, #3
 8012cb6:	0092      	lsls	r2, r2, #2
 8012cb8:	4093      	lsls	r3, r2
 8012cba:	69ba      	ldr	r2, [r7, #24]
 8012cbc:	4313      	orrs	r3, r2
 8012cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012cc0:	4934      	ldr	r1, [pc, #208]	; (8012d94 <HAL_GPIO_Init+0x30c>)
 8012cc2:	69fb      	ldr	r3, [r7, #28]
 8012cc4:	089b      	lsrs	r3, r3, #2
 8012cc6:	3302      	adds	r3, #2
 8012cc8:	69ba      	ldr	r2, [r7, #24]
 8012cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012cce:	4b3a      	ldr	r3, [pc, #232]	; (8012db8 <HAL_GPIO_Init+0x330>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012cd4:	693b      	ldr	r3, [r7, #16]
 8012cd6:	43db      	mvns	r3, r3
 8012cd8:	69ba      	ldr	r2, [r7, #24]
 8012cda:	4013      	ands	r3, r2
 8012cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d003      	beq.n	8012cf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012cea:	69ba      	ldr	r2, [r7, #24]
 8012cec:	693b      	ldr	r3, [r7, #16]
 8012cee:	4313      	orrs	r3, r2
 8012cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8012cf2:	4a31      	ldr	r2, [pc, #196]	; (8012db8 <HAL_GPIO_Init+0x330>)
 8012cf4:	69bb      	ldr	r3, [r7, #24]
 8012cf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012cf8:	4b2f      	ldr	r3, [pc, #188]	; (8012db8 <HAL_GPIO_Init+0x330>)
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	43db      	mvns	r3, r3
 8012d02:	69ba      	ldr	r2, [r7, #24]
 8012d04:	4013      	ands	r3, r2
 8012d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	685b      	ldr	r3, [r3, #4]
 8012d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d003      	beq.n	8012d1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8012d14:	69ba      	ldr	r2, [r7, #24]
 8012d16:	693b      	ldr	r3, [r7, #16]
 8012d18:	4313      	orrs	r3, r2
 8012d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012d1c:	4a26      	ldr	r2, [pc, #152]	; (8012db8 <HAL_GPIO_Init+0x330>)
 8012d1e:	69bb      	ldr	r3, [r7, #24]
 8012d20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8012d22:	4b25      	ldr	r3, [pc, #148]	; (8012db8 <HAL_GPIO_Init+0x330>)
 8012d24:	689b      	ldr	r3, [r3, #8]
 8012d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012d28:	693b      	ldr	r3, [r7, #16]
 8012d2a:	43db      	mvns	r3, r3
 8012d2c:	69ba      	ldr	r2, [r7, #24]
 8012d2e:	4013      	ands	r3, r2
 8012d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d003      	beq.n	8012d46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8012d3e:	69ba      	ldr	r2, [r7, #24]
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	4313      	orrs	r3, r2
 8012d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8012d46:	4a1c      	ldr	r2, [pc, #112]	; (8012db8 <HAL_GPIO_Init+0x330>)
 8012d48:	69bb      	ldr	r3, [r7, #24]
 8012d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012d4c:	4b1a      	ldr	r3, [pc, #104]	; (8012db8 <HAL_GPIO_Init+0x330>)
 8012d4e:	68db      	ldr	r3, [r3, #12]
 8012d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	43db      	mvns	r3, r3
 8012d56:	69ba      	ldr	r2, [r7, #24]
 8012d58:	4013      	ands	r3, r2
 8012d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d003      	beq.n	8012d70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8012d68:	69ba      	ldr	r2, [r7, #24]
 8012d6a:	693b      	ldr	r3, [r7, #16]
 8012d6c:	4313      	orrs	r3, r2
 8012d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012d70:	4a11      	ldr	r2, [pc, #68]	; (8012db8 <HAL_GPIO_Init+0x330>)
 8012d72:	69bb      	ldr	r3, [r7, #24]
 8012d74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012d76:	69fb      	ldr	r3, [r7, #28]
 8012d78:	3301      	adds	r3, #1
 8012d7a:	61fb      	str	r3, [r7, #28]
 8012d7c:	69fb      	ldr	r3, [r7, #28]
 8012d7e:	2b0f      	cmp	r3, #15
 8012d80:	f67f ae90 	bls.w	8012aa4 <HAL_GPIO_Init+0x1c>
=======
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	f000 80b4 	beq.w	8010cda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010b72:	2300      	movs	r3, #0
 8010b74:	60fb      	str	r3, [r7, #12]
 8010b76:	4b5f      	ldr	r3, [pc, #380]	; (8010cf4 <HAL_GPIO_Init+0x308>)
 8010b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b7a:	4a5e      	ldr	r2, [pc, #376]	; (8010cf4 <HAL_GPIO_Init+0x308>)
 8010b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010b80:	6453      	str	r3, [r2, #68]	; 0x44
 8010b82:	4b5c      	ldr	r3, [pc, #368]	; (8010cf4 <HAL_GPIO_Init+0x308>)
 8010b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b8a:	60fb      	str	r3, [r7, #12]
 8010b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010b8e:	4a5a      	ldr	r2, [pc, #360]	; (8010cf8 <HAL_GPIO_Init+0x30c>)
 8010b90:	69fb      	ldr	r3, [r7, #28]
 8010b92:	089b      	lsrs	r3, r3, #2
 8010b94:	3302      	adds	r3, #2
 8010b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	f003 0303 	and.w	r3, r3, #3
 8010ba2:	009b      	lsls	r3, r3, #2
 8010ba4:	220f      	movs	r2, #15
 8010ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8010baa:	43db      	mvns	r3, r3
 8010bac:	69ba      	ldr	r2, [r7, #24]
 8010bae:	4013      	ands	r3, r2
 8010bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	4a51      	ldr	r2, [pc, #324]	; (8010cfc <HAL_GPIO_Init+0x310>)
 8010bb6:	4293      	cmp	r3, r2
 8010bb8:	d02b      	beq.n	8010c12 <HAL_GPIO_Init+0x226>
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	4a50      	ldr	r2, [pc, #320]	; (8010d00 <HAL_GPIO_Init+0x314>)
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	d025      	beq.n	8010c0e <HAL_GPIO_Init+0x222>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	4a4f      	ldr	r2, [pc, #316]	; (8010d04 <HAL_GPIO_Init+0x318>)
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	d01f      	beq.n	8010c0a <HAL_GPIO_Init+0x21e>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	4a4e      	ldr	r2, [pc, #312]	; (8010d08 <HAL_GPIO_Init+0x31c>)
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	d019      	beq.n	8010c06 <HAL_GPIO_Init+0x21a>
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	4a4d      	ldr	r2, [pc, #308]	; (8010d0c <HAL_GPIO_Init+0x320>)
 8010bd6:	4293      	cmp	r3, r2
 8010bd8:	d013      	beq.n	8010c02 <HAL_GPIO_Init+0x216>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	4a4c      	ldr	r2, [pc, #304]	; (8010d10 <HAL_GPIO_Init+0x324>)
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d00d      	beq.n	8010bfe <HAL_GPIO_Init+0x212>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	4a4b      	ldr	r2, [pc, #300]	; (8010d14 <HAL_GPIO_Init+0x328>)
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d007      	beq.n	8010bfa <HAL_GPIO_Init+0x20e>
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	4a4a      	ldr	r2, [pc, #296]	; (8010d18 <HAL_GPIO_Init+0x32c>)
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	d101      	bne.n	8010bf6 <HAL_GPIO_Init+0x20a>
 8010bf2:	2307      	movs	r3, #7
 8010bf4:	e00e      	b.n	8010c14 <HAL_GPIO_Init+0x228>
 8010bf6:	2308      	movs	r3, #8
 8010bf8:	e00c      	b.n	8010c14 <HAL_GPIO_Init+0x228>
 8010bfa:	2306      	movs	r3, #6
 8010bfc:	e00a      	b.n	8010c14 <HAL_GPIO_Init+0x228>
 8010bfe:	2305      	movs	r3, #5
 8010c00:	e008      	b.n	8010c14 <HAL_GPIO_Init+0x228>
 8010c02:	2304      	movs	r3, #4
 8010c04:	e006      	b.n	8010c14 <HAL_GPIO_Init+0x228>
 8010c06:	2303      	movs	r3, #3
 8010c08:	e004      	b.n	8010c14 <HAL_GPIO_Init+0x228>
 8010c0a:	2302      	movs	r3, #2
 8010c0c:	e002      	b.n	8010c14 <HAL_GPIO_Init+0x228>
 8010c0e:	2301      	movs	r3, #1
 8010c10:	e000      	b.n	8010c14 <HAL_GPIO_Init+0x228>
 8010c12:	2300      	movs	r3, #0
 8010c14:	69fa      	ldr	r2, [r7, #28]
 8010c16:	f002 0203 	and.w	r2, r2, #3
 8010c1a:	0092      	lsls	r2, r2, #2
 8010c1c:	4093      	lsls	r3, r2
 8010c1e:	69ba      	ldr	r2, [r7, #24]
 8010c20:	4313      	orrs	r3, r2
 8010c22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010c24:	4934      	ldr	r1, [pc, #208]	; (8010cf8 <HAL_GPIO_Init+0x30c>)
 8010c26:	69fb      	ldr	r3, [r7, #28]
 8010c28:	089b      	lsrs	r3, r3, #2
 8010c2a:	3302      	adds	r3, #2
 8010c2c:	69ba      	ldr	r2, [r7, #24]
 8010c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010c32:	4b3a      	ldr	r3, [pc, #232]	; (8010d1c <HAL_GPIO_Init+0x330>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	43db      	mvns	r3, r3
 8010c3c:	69ba      	ldr	r2, [r7, #24]
 8010c3e:	4013      	ands	r3, r2
 8010c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d003      	beq.n	8010c56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8010c4e:	69ba      	ldr	r2, [r7, #24]
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	4313      	orrs	r3, r2
 8010c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010c56:	4a31      	ldr	r2, [pc, #196]	; (8010d1c <HAL_GPIO_Init+0x330>)
 8010c58:	69bb      	ldr	r3, [r7, #24]
 8010c5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8010c5c:	4b2f      	ldr	r3, [pc, #188]	; (8010d1c <HAL_GPIO_Init+0x330>)
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	43db      	mvns	r3, r3
 8010c66:	69ba      	ldr	r2, [r7, #24]
 8010c68:	4013      	ands	r3, r2
 8010c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d003      	beq.n	8010c80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8010c78:	69ba      	ldr	r2, [r7, #24]
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	4313      	orrs	r3, r2
 8010c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010c80:	4a26      	ldr	r2, [pc, #152]	; (8010d1c <HAL_GPIO_Init+0x330>)
 8010c82:	69bb      	ldr	r3, [r7, #24]
 8010c84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010c86:	4b25      	ldr	r3, [pc, #148]	; (8010d1c <HAL_GPIO_Init+0x330>)
 8010c88:	689b      	ldr	r3, [r3, #8]
 8010c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010c8c:	693b      	ldr	r3, [r7, #16]
 8010c8e:	43db      	mvns	r3, r3
 8010c90:	69ba      	ldr	r2, [r7, #24]
 8010c92:	4013      	ands	r3, r2
 8010c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	685b      	ldr	r3, [r3, #4]
 8010c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d003      	beq.n	8010caa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8010ca2:	69ba      	ldr	r2, [r7, #24]
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	4313      	orrs	r3, r2
 8010ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010caa:	4a1c      	ldr	r2, [pc, #112]	; (8010d1c <HAL_GPIO_Init+0x330>)
 8010cac:	69bb      	ldr	r3, [r7, #24]
 8010cae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010cb0:	4b1a      	ldr	r3, [pc, #104]	; (8010d1c <HAL_GPIO_Init+0x330>)
 8010cb2:	68db      	ldr	r3, [r3, #12]
 8010cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	43db      	mvns	r3, r3
 8010cba:	69ba      	ldr	r2, [r7, #24]
 8010cbc:	4013      	ands	r3, r2
 8010cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	685b      	ldr	r3, [r3, #4]
 8010cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d003      	beq.n	8010cd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8010ccc:	69ba      	ldr	r2, [r7, #24]
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	4313      	orrs	r3, r2
 8010cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010cd4:	4a11      	ldr	r2, [pc, #68]	; (8010d1c <HAL_GPIO_Init+0x330>)
 8010cd6:	69bb      	ldr	r3, [r7, #24]
 8010cd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010cda:	69fb      	ldr	r3, [r7, #28]
 8010cdc:	3301      	adds	r3, #1
 8010cde:	61fb      	str	r3, [r7, #28]
 8010ce0:	69fb      	ldr	r3, [r7, #28]
 8010ce2:	2b0f      	cmp	r3, #15
 8010ce4:	f67f ae90 	bls.w	8010a08 <HAL_GPIO_Init+0x1c>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
  }
}
<<<<<<< HEAD
 8012d84:	bf00      	nop
 8012d86:	3724      	adds	r7, #36	; 0x24
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8e:	4770      	bx	lr
 8012d90:	40023800 	.word	0x40023800
 8012d94:	40013800 	.word	0x40013800
 8012d98:	40020000 	.word	0x40020000
 8012d9c:	40020400 	.word	0x40020400
 8012da0:	40020800 	.word	0x40020800
 8012da4:	40020c00 	.word	0x40020c00
 8012da8:	40021000 	.word	0x40021000
 8012dac:	40021400 	.word	0x40021400
 8012db0:	40021800 	.word	0x40021800
 8012db4:	40021c00 	.word	0x40021c00
 8012db8:	40013c00 	.word	0x40013c00

08012dbc <HAL_GPIO_ReadPin>:
=======
 8010ce8:	bf00      	nop
 8010cea:	3724      	adds	r7, #36	; 0x24
 8010cec:	46bd      	mov	sp, r7
 8010cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf2:	4770      	bx	lr
 8010cf4:	40023800 	.word	0x40023800
 8010cf8:	40013800 	.word	0x40013800
 8010cfc:	40020000 	.word	0x40020000
 8010d00:	40020400 	.word	0x40020400
 8010d04:	40020800 	.word	0x40020800
 8010d08:	40020c00 	.word	0x40020c00
 8010d0c:	40021000 	.word	0x40021000
 8010d10:	40021400 	.word	0x40021400
 8010d14:	40021800 	.word	0x40021800
 8010d18:	40021c00 	.word	0x40021c00
 8010d1c:	40013c00 	.word	0x40013c00

08010d20 <HAL_GPIO_ReadPin>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8012dbc:	b480      	push	{r7}
 8012dbe:	b085      	sub	sp, #20
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
 8012dc4:	460b      	mov	r3, r1
 8012dc6:	807b      	strh	r3, [r7, #2]
=======
 8010d20:	b480      	push	{r7}
 8010d22:	b085      	sub	sp, #20
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	460b      	mov	r3, r1
 8010d2a:	807b      	strh	r3, [r7, #2]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	691a      	ldr	r2, [r3, #16]
 8012dcc:	887b      	ldrh	r3, [r7, #2]
 8012dce:	4013      	ands	r3, r2
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d002      	beq.n	8012dda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	73fb      	strb	r3, [r7, #15]
 8012dd8:	e001      	b.n	8012dde <HAL_GPIO_ReadPin+0x22>
=======
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	691a      	ldr	r2, [r3, #16]
 8010d30:	887b      	ldrh	r3, [r7, #2]
 8010d32:	4013      	ands	r3, r2
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d002      	beq.n	8010d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8010d38:	2301      	movs	r3, #1
 8010d3a:	73fb      	strb	r3, [r7, #15]
 8010d3c:	e001      	b.n	8010d42 <HAL_GPIO_ReadPin+0x22>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 8012dda:	2300      	movs	r3, #0
 8012ddc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8012de0:	4618      	mov	r0, r3
 8012de2:	3714      	adds	r7, #20
 8012de4:	46bd      	mov	sp, r7
 8012de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dea:	4770      	bx	lr

08012dec <HAL_GPIO_WritePin>:
=======
 8010d3e:	2300      	movs	r3, #0
 8010d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3714      	adds	r7, #20
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr

08010d50 <HAL_GPIO_WritePin>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8012dec:	b480      	push	{r7}
 8012dee:	b083      	sub	sp, #12
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
 8012df4:	460b      	mov	r3, r1
 8012df6:	807b      	strh	r3, [r7, #2]
 8012df8:	4613      	mov	r3, r2
 8012dfa:	707b      	strb	r3, [r7, #1]
=======
 8010d50:	b480      	push	{r7}
 8010d52:	b083      	sub	sp, #12
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	460b      	mov	r3, r1
 8010d5a:	807b      	strh	r3, [r7, #2]
 8010d5c:	4613      	mov	r3, r2
 8010d5e:	707b      	strb	r3, [r7, #1]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8012dfc:	787b      	ldrb	r3, [r7, #1]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d003      	beq.n	8012e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012e02:	887a      	ldrh	r2, [r7, #2]
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	619a      	str	r2, [r3, #24]
=======
 8010d60:	787b      	ldrb	r3, [r7, #1]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d003      	beq.n	8010d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010d66:	887a      	ldrh	r2, [r7, #2]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	619a      	str	r2, [r3, #24]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8012e08:	e003      	b.n	8012e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012e0a:	887b      	ldrh	r3, [r7, #2]
 8012e0c:	041a      	lsls	r2, r3, #16
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	619a      	str	r2, [r3, #24]
}
 8012e12:	bf00      	nop
 8012e14:	370c      	adds	r7, #12
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr
	...

08012e20 <HAL_RCC_OscConfig>:
=======
 8010d6c:	e003      	b.n	8010d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8010d6e:	887b      	ldrh	r3, [r7, #2]
 8010d70:	041a      	lsls	r2, r3, #16
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	619a      	str	r2, [r3, #24]
}
 8010d76:	bf00      	nop
 8010d78:	370c      	adds	r7, #12
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d80:	4770      	bx	lr
	...

08010d84 <HAL_RCC_OscConfig>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b086      	sub	sp, #24
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
=======
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b086      	sub	sp, #24
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d101      	bne.n	8012e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012e2e:	2301      	movs	r3, #1
 8012e30:	e25b      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
=======
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d101      	bne.n	8010d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010d92:	2301      	movs	r3, #1
 8010d94:	e25b      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	f003 0301 	and.w	r3, r3, #1
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d075      	beq.n	8012f2a <HAL_RCC_OscConfig+0x10a>
=======
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f003 0301 	and.w	r3, r3, #1
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d075      	beq.n	8010e8e <HAL_RCC_OscConfig+0x10a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 8012e3e:	4ba3      	ldr	r3, [pc, #652]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012e40:	689b      	ldr	r3, [r3, #8]
 8012e42:	f003 030c 	and.w	r3, r3, #12
 8012e46:	2b04      	cmp	r3, #4
 8012e48:	d00c      	beq.n	8012e64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012e4a:	4ba0      	ldr	r3, [pc, #640]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012e4c:	689b      	ldr	r3, [r3, #8]
 8012e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012e52:	2b08      	cmp	r3, #8
 8012e54:	d112      	bne.n	8012e7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012e56:	4b9d      	ldr	r3, [pc, #628]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012e58:	685b      	ldr	r3, [r3, #4]
 8012e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012e62:	d10b      	bne.n	8012e7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012e64:	4b99      	ldr	r3, [pc, #612]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d05b      	beq.n	8012f28 <HAL_RCC_OscConfig+0x108>
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d157      	bne.n	8012f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012e78:	2301      	movs	r3, #1
 8012e7a:	e236      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
=======
 8010da2:	4ba3      	ldr	r3, [pc, #652]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010da4:	689b      	ldr	r3, [r3, #8]
 8010da6:	f003 030c 	and.w	r3, r3, #12
 8010daa:	2b04      	cmp	r3, #4
 8010dac:	d00c      	beq.n	8010dc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010dae:	4ba0      	ldr	r3, [pc, #640]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010db0:	689b      	ldr	r3, [r3, #8]
 8010db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8010db6:	2b08      	cmp	r3, #8
 8010db8:	d112      	bne.n	8010de0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010dba:	4b9d      	ldr	r3, [pc, #628]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010dbc:	685b      	ldr	r3, [r3, #4]
 8010dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010dc6:	d10b      	bne.n	8010de0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010dc8:	4b99      	ldr	r3, [pc, #612]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d05b      	beq.n	8010e8c <HAL_RCC_OscConfig+0x108>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d157      	bne.n	8010e8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	e236      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	685b      	ldr	r3, [r3, #4]
 8012e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e84:	d106      	bne.n	8012e94 <HAL_RCC_OscConfig+0x74>
 8012e86:	4b91      	ldr	r3, [pc, #580]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	4a90      	ldr	r2, [pc, #576]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012e90:	6013      	str	r3, [r2, #0]
 8012e92:	e01d      	b.n	8012ed0 <HAL_RCC_OscConfig+0xb0>
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012e9c:	d10c      	bne.n	8012eb8 <HAL_RCC_OscConfig+0x98>
 8012e9e:	4b8b      	ldr	r3, [pc, #556]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	4a8a      	ldr	r2, [pc, #552]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012ea8:	6013      	str	r3, [r2, #0]
 8012eaa:	4b88      	ldr	r3, [pc, #544]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	4a87      	ldr	r2, [pc, #540]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012eb4:	6013      	str	r3, [r2, #0]
 8012eb6:	e00b      	b.n	8012ed0 <HAL_RCC_OscConfig+0xb0>
 8012eb8:	4b84      	ldr	r3, [pc, #528]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	4a83      	ldr	r2, [pc, #524]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012ec2:	6013      	str	r3, [r2, #0]
 8012ec4:	4b81      	ldr	r3, [pc, #516]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	4a80      	ldr	r2, [pc, #512]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	685b      	ldr	r3, [r3, #4]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d013      	beq.n	8012f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012ed8:	f7fd ffa6 	bl	8010e28 <HAL_GetTick>
 8012edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012ede:	e008      	b.n	8012ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012ee0:	f7fd ffa2 	bl	8010e28 <HAL_GetTick>
 8012ee4:	4602      	mov	r2, r0
 8012ee6:	693b      	ldr	r3, [r7, #16]
 8012ee8:	1ad3      	subs	r3, r2, r3
 8012eea:	2b64      	cmp	r3, #100	; 0x64
 8012eec:	d901      	bls.n	8012ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012eee:	2303      	movs	r3, #3
 8012ef0:	e1fb      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012ef2:	4b76      	ldr	r3, [pc, #472]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d0f0      	beq.n	8012ee0 <HAL_RCC_OscConfig+0xc0>
 8012efe:	e014      	b.n	8012f2a <HAL_RCC_OscConfig+0x10a>
=======
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010de8:	d106      	bne.n	8010df8 <HAL_RCC_OscConfig+0x74>
 8010dea:	4b91      	ldr	r3, [pc, #580]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	4a90      	ldr	r2, [pc, #576]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010df4:	6013      	str	r3, [r2, #0]
 8010df6:	e01d      	b.n	8010e34 <HAL_RCC_OscConfig+0xb0>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010e00:	d10c      	bne.n	8010e1c <HAL_RCC_OscConfig+0x98>
 8010e02:	4b8b      	ldr	r3, [pc, #556]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	4a8a      	ldr	r2, [pc, #552]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010e0c:	6013      	str	r3, [r2, #0]
 8010e0e:	4b88      	ldr	r3, [pc, #544]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	4a87      	ldr	r2, [pc, #540]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010e18:	6013      	str	r3, [r2, #0]
 8010e1a:	e00b      	b.n	8010e34 <HAL_RCC_OscConfig+0xb0>
 8010e1c:	4b84      	ldr	r3, [pc, #528]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	4a83      	ldr	r2, [pc, #524]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e26:	6013      	str	r3, [r2, #0]
 8010e28:	4b81      	ldr	r3, [pc, #516]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	4a80      	ldr	r2, [pc, #512]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d013      	beq.n	8010e64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010e3c:	f7fd ffa6 	bl	800ed8c <HAL_GetTick>
 8010e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010e42:	e008      	b.n	8010e56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010e44:	f7fd ffa2 	bl	800ed8c <HAL_GetTick>
 8010e48:	4602      	mov	r2, r0
 8010e4a:	693b      	ldr	r3, [r7, #16]
 8010e4c:	1ad3      	subs	r3, r2, r3
 8010e4e:	2b64      	cmp	r3, #100	; 0x64
 8010e50:	d901      	bls.n	8010e56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8010e52:	2303      	movs	r3, #3
 8010e54:	e1fb      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010e56:	4b76      	ldr	r3, [pc, #472]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d0f0      	beq.n	8010e44 <HAL_RCC_OscConfig+0xc0>
 8010e62:	e014      	b.n	8010e8e <HAL_RCC_OscConfig+0x10a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8012f00:	f7fd ff92 	bl	8010e28 <HAL_GetTick>
 8012f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012f06:	e008      	b.n	8012f1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012f08:	f7fd ff8e 	bl	8010e28 <HAL_GetTick>
 8012f0c:	4602      	mov	r2, r0
 8012f0e:	693b      	ldr	r3, [r7, #16]
 8012f10:	1ad3      	subs	r3, r2, r3
 8012f12:	2b64      	cmp	r3, #100	; 0x64
 8012f14:	d901      	bls.n	8012f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012f16:	2303      	movs	r3, #3
 8012f18:	e1e7      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012f1a:	4b6c      	ldr	r3, [pc, #432]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d1f0      	bne.n	8012f08 <HAL_RCC_OscConfig+0xe8>
 8012f26:	e000      	b.n	8012f2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012f28:	bf00      	nop
=======
 8010e64:	f7fd ff92 	bl	800ed8c <HAL_GetTick>
 8010e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010e6a:	e008      	b.n	8010e7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010e6c:	f7fd ff8e 	bl	800ed8c <HAL_GetTick>
 8010e70:	4602      	mov	r2, r0
 8010e72:	693b      	ldr	r3, [r7, #16]
 8010e74:	1ad3      	subs	r3, r2, r3
 8010e76:	2b64      	cmp	r3, #100	; 0x64
 8010e78:	d901      	bls.n	8010e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010e7a:	2303      	movs	r3, #3
 8010e7c:	e1e7      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010e7e:	4b6c      	ldr	r3, [pc, #432]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d1f0      	bne.n	8010e6c <HAL_RCC_OscConfig+0xe8>
 8010e8a:	e000      	b.n	8010e8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010e8c:	bf00      	nop
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	f003 0302 	and.w	r3, r3, #2
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d063      	beq.n	8012ffe <HAL_RCC_OscConfig+0x1de>
=======
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	f003 0302 	and.w	r3, r3, #2
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d063      	beq.n	8010f62 <HAL_RCC_OscConfig+0x1de>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 8012f36:	4b65      	ldr	r3, [pc, #404]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012f38:	689b      	ldr	r3, [r3, #8]
 8012f3a:	f003 030c 	and.w	r3, r3, #12
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d00b      	beq.n	8012f5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012f42:	4b62      	ldr	r3, [pc, #392]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012f44:	689b      	ldr	r3, [r3, #8]
 8012f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012f4a:	2b08      	cmp	r3, #8
 8012f4c:	d11c      	bne.n	8012f88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012f4e:	4b5f      	ldr	r3, [pc, #380]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012f50:	685b      	ldr	r3, [r3, #4]
 8012f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d116      	bne.n	8012f88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012f5a:	4b5c      	ldr	r3, [pc, #368]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	f003 0302 	and.w	r3, r3, #2
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d005      	beq.n	8012f72 <HAL_RCC_OscConfig+0x152>
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	68db      	ldr	r3, [r3, #12]
 8012f6a:	2b01      	cmp	r3, #1
 8012f6c:	d001      	beq.n	8012f72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012f6e:	2301      	movs	r3, #1
 8012f70:	e1bb      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
=======
 8010e9a:	4b65      	ldr	r3, [pc, #404]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010e9c:	689b      	ldr	r3, [r3, #8]
 8010e9e:	f003 030c 	and.w	r3, r3, #12
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d00b      	beq.n	8010ebe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010ea6:	4b62      	ldr	r3, [pc, #392]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010ea8:	689b      	ldr	r3, [r3, #8]
 8010eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010eae:	2b08      	cmp	r3, #8
 8010eb0:	d11c      	bne.n	8010eec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010eb2:	4b5f      	ldr	r3, [pc, #380]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010eb4:	685b      	ldr	r3, [r3, #4]
 8010eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d116      	bne.n	8010eec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010ebe:	4b5c      	ldr	r3, [pc, #368]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	f003 0302 	and.w	r3, r3, #2
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d005      	beq.n	8010ed6 <HAL_RCC_OscConfig+0x152>
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	68db      	ldr	r3, [r3, #12]
 8010ece:	2b01      	cmp	r3, #1
 8010ed0:	d001      	beq.n	8010ed6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	e1bb      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8012f72:	4b56      	ldr	r3, [pc, #344]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	691b      	ldr	r3, [r3, #16]
 8012f7e:	00db      	lsls	r3, r3, #3
 8012f80:	4952      	ldr	r1, [pc, #328]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012f82:	4313      	orrs	r3, r2
 8012f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012f86:	e03a      	b.n	8012ffe <HAL_RCC_OscConfig+0x1de>
=======
 8010ed6:	4b56      	ldr	r3, [pc, #344]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	691b      	ldr	r3, [r3, #16]
 8010ee2:	00db      	lsls	r3, r3, #3
 8010ee4:	4952      	ldr	r1, [pc, #328]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010ee6:	4313      	orrs	r3, r2
 8010ee8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010eea:	e03a      	b.n	8010f62 <HAL_RCC_OscConfig+0x1de>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	68db      	ldr	r3, [r3, #12]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d020      	beq.n	8012fd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012f90:	4b4f      	ldr	r3, [pc, #316]	; (80130d0 <HAL_RCC_OscConfig+0x2b0>)
 8012f92:	2201      	movs	r2, #1
 8012f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012f96:	f7fd ff47 	bl	8010e28 <HAL_GetTick>
 8012f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012f9c:	e008      	b.n	8012fb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012f9e:	f7fd ff43 	bl	8010e28 <HAL_GetTick>
 8012fa2:	4602      	mov	r2, r0
 8012fa4:	693b      	ldr	r3, [r7, #16]
 8012fa6:	1ad3      	subs	r3, r2, r3
 8012fa8:	2b02      	cmp	r3, #2
 8012faa:	d901      	bls.n	8012fb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012fac:	2303      	movs	r3, #3
 8012fae:	e19c      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012fb0:	4b46      	ldr	r3, [pc, #280]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	f003 0302 	and.w	r3, r3, #2
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d0f0      	beq.n	8012f9e <HAL_RCC_OscConfig+0x17e>
=======
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	68db      	ldr	r3, [r3, #12]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d020      	beq.n	8010f36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010ef4:	4b4f      	ldr	r3, [pc, #316]	; (8011034 <HAL_RCC_OscConfig+0x2b0>)
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010efa:	f7fd ff47 	bl	800ed8c <HAL_GetTick>
 8010efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010f00:	e008      	b.n	8010f14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010f02:	f7fd ff43 	bl	800ed8c <HAL_GetTick>
 8010f06:	4602      	mov	r2, r0
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	1ad3      	subs	r3, r2, r3
 8010f0c:	2b02      	cmp	r3, #2
 8010f0e:	d901      	bls.n	8010f14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8010f10:	2303      	movs	r3, #3
 8010f12:	e19c      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010f14:	4b46      	ldr	r3, [pc, #280]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	f003 0302 	and.w	r3, r3, #2
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d0f0      	beq.n	8010f02 <HAL_RCC_OscConfig+0x17e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8012fbc:	4b43      	ldr	r3, [pc, #268]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	691b      	ldr	r3, [r3, #16]
 8012fc8:	00db      	lsls	r3, r3, #3
 8012fca:	4940      	ldr	r1, [pc, #256]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012fcc:	4313      	orrs	r3, r2
 8012fce:	600b      	str	r3, [r1, #0]
 8012fd0:	e015      	b.n	8012ffe <HAL_RCC_OscConfig+0x1de>
=======
 8010f20:	4b43      	ldr	r3, [pc, #268]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	691b      	ldr	r3, [r3, #16]
 8010f2c:	00db      	lsls	r3, r3, #3
 8010f2e:	4940      	ldr	r1, [pc, #256]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010f30:	4313      	orrs	r3, r2
 8010f32:	600b      	str	r3, [r1, #0]
 8010f34:	e015      	b.n	8010f62 <HAL_RCC_OscConfig+0x1de>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8012fd2:	4b3f      	ldr	r3, [pc, #252]	; (80130d0 <HAL_RCC_OscConfig+0x2b0>)
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012fd8:	f7fd ff26 	bl	8010e28 <HAL_GetTick>
 8012fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012fde:	e008      	b.n	8012ff2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012fe0:	f7fd ff22 	bl	8010e28 <HAL_GetTick>
 8012fe4:	4602      	mov	r2, r0
 8012fe6:	693b      	ldr	r3, [r7, #16]
 8012fe8:	1ad3      	subs	r3, r2, r3
 8012fea:	2b02      	cmp	r3, #2
 8012fec:	d901      	bls.n	8012ff2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012fee:	2303      	movs	r3, #3
 8012ff0:	e17b      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012ff2:	4b36      	ldr	r3, [pc, #216]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	f003 0302 	and.w	r3, r3, #2
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d1f0      	bne.n	8012fe0 <HAL_RCC_OscConfig+0x1c0>
=======
 8010f36:	4b3f      	ldr	r3, [pc, #252]	; (8011034 <HAL_RCC_OscConfig+0x2b0>)
 8010f38:	2200      	movs	r2, #0
 8010f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f3c:	f7fd ff26 	bl	800ed8c <HAL_GetTick>
 8010f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010f42:	e008      	b.n	8010f56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010f44:	f7fd ff22 	bl	800ed8c <HAL_GetTick>
 8010f48:	4602      	mov	r2, r0
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	1ad3      	subs	r3, r2, r3
 8010f4e:	2b02      	cmp	r3, #2
 8010f50:	d901      	bls.n	8010f56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8010f52:	2303      	movs	r3, #3
 8010f54:	e17b      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010f56:	4b36      	ldr	r3, [pc, #216]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	f003 0302 	and.w	r3, r3, #2
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d1f0      	bne.n	8010f44 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	f003 0308 	and.w	r3, r3, #8
 8013006:	2b00      	cmp	r3, #0
 8013008:	d030      	beq.n	801306c <HAL_RCC_OscConfig+0x24c>
=======
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	f003 0308 	and.w	r3, r3, #8
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d030      	beq.n	8010fd0 <HAL_RCC_OscConfig+0x24c>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	695b      	ldr	r3, [r3, #20]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d016      	beq.n	8013040 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013012:	4b30      	ldr	r3, [pc, #192]	; (80130d4 <HAL_RCC_OscConfig+0x2b4>)
 8013014:	2201      	movs	r2, #1
 8013016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013018:	f7fd ff06 	bl	8010e28 <HAL_GetTick>
 801301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801301e:	e008      	b.n	8013032 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013020:	f7fd ff02 	bl	8010e28 <HAL_GetTick>
 8013024:	4602      	mov	r2, r0
 8013026:	693b      	ldr	r3, [r7, #16]
 8013028:	1ad3      	subs	r3, r2, r3
 801302a:	2b02      	cmp	r3, #2
 801302c:	d901      	bls.n	8013032 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801302e:	2303      	movs	r3, #3
 8013030:	e15b      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013032:	4b26      	ldr	r3, [pc, #152]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8013034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013036:	f003 0302 	and.w	r3, r3, #2
 801303a:	2b00      	cmp	r3, #0
 801303c:	d0f0      	beq.n	8013020 <HAL_RCC_OscConfig+0x200>
 801303e:	e015      	b.n	801306c <HAL_RCC_OscConfig+0x24c>
=======
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	695b      	ldr	r3, [r3, #20]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d016      	beq.n	8010fa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010f76:	4b30      	ldr	r3, [pc, #192]	; (8011038 <HAL_RCC_OscConfig+0x2b4>)
 8010f78:	2201      	movs	r2, #1
 8010f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010f7c:	f7fd ff06 	bl	800ed8c <HAL_GetTick>
 8010f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010f82:	e008      	b.n	8010f96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010f84:	f7fd ff02 	bl	800ed8c <HAL_GetTick>
 8010f88:	4602      	mov	r2, r0
 8010f8a:	693b      	ldr	r3, [r7, #16]
 8010f8c:	1ad3      	subs	r3, r2, r3
 8010f8e:	2b02      	cmp	r3, #2
 8010f90:	d901      	bls.n	8010f96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8010f92:	2303      	movs	r3, #3
 8010f94:	e15b      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010f96:	4b26      	ldr	r3, [pc, #152]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f9a:	f003 0302 	and.w	r3, r3, #2
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d0f0      	beq.n	8010f84 <HAL_RCC_OscConfig+0x200>
 8010fa2:	e015      	b.n	8010fd0 <HAL_RCC_OscConfig+0x24c>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8013040:	4b24      	ldr	r3, [pc, #144]	; (80130d4 <HAL_RCC_OscConfig+0x2b4>)
 8013042:	2200      	movs	r2, #0
 8013044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013046:	f7fd feef 	bl	8010e28 <HAL_GetTick>
 801304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801304c:	e008      	b.n	8013060 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801304e:	f7fd feeb 	bl	8010e28 <HAL_GetTick>
 8013052:	4602      	mov	r2, r0
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	1ad3      	subs	r3, r2, r3
 8013058:	2b02      	cmp	r3, #2
 801305a:	d901      	bls.n	8013060 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801305c:	2303      	movs	r3, #3
 801305e:	e144      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013060:	4b1a      	ldr	r3, [pc, #104]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8013062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013064:	f003 0302 	and.w	r3, r3, #2
 8013068:	2b00      	cmp	r3, #0
 801306a:	d1f0      	bne.n	801304e <HAL_RCC_OscConfig+0x22e>
=======
 8010fa4:	4b24      	ldr	r3, [pc, #144]	; (8011038 <HAL_RCC_OscConfig+0x2b4>)
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010faa:	f7fd feef 	bl	800ed8c <HAL_GetTick>
 8010fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010fb0:	e008      	b.n	8010fc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010fb2:	f7fd feeb 	bl	800ed8c <HAL_GetTick>
 8010fb6:	4602      	mov	r2, r0
 8010fb8:	693b      	ldr	r3, [r7, #16]
 8010fba:	1ad3      	subs	r3, r2, r3
 8010fbc:	2b02      	cmp	r3, #2
 8010fbe:	d901      	bls.n	8010fc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8010fc0:	2303      	movs	r3, #3
 8010fc2:	e144      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010fc4:	4b1a      	ldr	r3, [pc, #104]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fc8:	f003 0302 	and.w	r3, r3, #2
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d1f0      	bne.n	8010fb2 <HAL_RCC_OscConfig+0x22e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	f003 0304 	and.w	r3, r3, #4
 8013074:	2b00      	cmp	r3, #0
 8013076:	f000 80a0 	beq.w	80131ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801307a:	2300      	movs	r3, #0
 801307c:	75fb      	strb	r3, [r7, #23]
=======
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	f003 0304 	and.w	r3, r3, #4
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	f000 80a0 	beq.w	801111e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	75fb      	strb	r3, [r7, #23]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 801307e:	4b13      	ldr	r3, [pc, #76]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8013080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013086:	2b00      	cmp	r3, #0
 8013088:	d10f      	bne.n	80130aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801308a:	2300      	movs	r3, #0
 801308c:	60bb      	str	r3, [r7, #8]
 801308e:	4b0f      	ldr	r3, [pc, #60]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8013090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013092:	4a0e      	ldr	r2, [pc, #56]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 8013094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013098:	6413      	str	r3, [r2, #64]	; 0x40
 801309a:	4b0c      	ldr	r3, [pc, #48]	; (80130cc <HAL_RCC_OscConfig+0x2ac>)
 801309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80130a2:	60bb      	str	r3, [r7, #8]
 80130a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80130a6:	2301      	movs	r3, #1
 80130a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80130aa:	4b0b      	ldr	r3, [pc, #44]	; (80130d8 <HAL_RCC_OscConfig+0x2b8>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d121      	bne.n	80130fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80130b6:	4b08      	ldr	r3, [pc, #32]	; (80130d8 <HAL_RCC_OscConfig+0x2b8>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	4a07      	ldr	r2, [pc, #28]	; (80130d8 <HAL_RCC_OscConfig+0x2b8>)
 80130bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80130c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80130c2:	f7fd feb1 	bl	8010e28 <HAL_GetTick>
 80130c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80130c8:	e011      	b.n	80130ee <HAL_RCC_OscConfig+0x2ce>
 80130ca:	bf00      	nop
 80130cc:	40023800 	.word	0x40023800
 80130d0:	42470000 	.word	0x42470000
 80130d4:	42470e80 	.word	0x42470e80
 80130d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80130dc:	f7fd fea4 	bl	8010e28 <HAL_GetTick>
 80130e0:	4602      	mov	r2, r0
 80130e2:	693b      	ldr	r3, [r7, #16]
 80130e4:	1ad3      	subs	r3, r2, r3
 80130e6:	2b02      	cmp	r3, #2
 80130e8:	d901      	bls.n	80130ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80130ea:	2303      	movs	r3, #3
 80130ec:	e0fd      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80130ee:	4b81      	ldr	r3, [pc, #516]	; (80132f4 <HAL_RCC_OscConfig+0x4d4>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d0f0      	beq.n	80130dc <HAL_RCC_OscConfig+0x2bc>
=======
 8010fe2:	4b13      	ldr	r3, [pc, #76]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d10f      	bne.n	801100e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010fee:	2300      	movs	r3, #0
 8010ff0:	60bb      	str	r3, [r7, #8]
 8010ff2:	4b0f      	ldr	r3, [pc, #60]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ff6:	4a0e      	ldr	r2, [pc, #56]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8010ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8010ffe:	4b0c      	ldr	r3, [pc, #48]	; (8011030 <HAL_RCC_OscConfig+0x2ac>)
 8011000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011006:	60bb      	str	r3, [r7, #8]
 8011008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801100a:	2301      	movs	r3, #1
 801100c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801100e:	4b0b      	ldr	r3, [pc, #44]	; (801103c <HAL_RCC_OscConfig+0x2b8>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011016:	2b00      	cmp	r3, #0
 8011018:	d121      	bne.n	801105e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801101a:	4b08      	ldr	r3, [pc, #32]	; (801103c <HAL_RCC_OscConfig+0x2b8>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	4a07      	ldr	r2, [pc, #28]	; (801103c <HAL_RCC_OscConfig+0x2b8>)
 8011020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011026:	f7fd feb1 	bl	800ed8c <HAL_GetTick>
 801102a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801102c:	e011      	b.n	8011052 <HAL_RCC_OscConfig+0x2ce>
 801102e:	bf00      	nop
 8011030:	40023800 	.word	0x40023800
 8011034:	42470000 	.word	0x42470000
 8011038:	42470e80 	.word	0x42470e80
 801103c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011040:	f7fd fea4 	bl	800ed8c <HAL_GetTick>
 8011044:	4602      	mov	r2, r0
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	1ad3      	subs	r3, r2, r3
 801104a:	2b02      	cmp	r3, #2
 801104c:	d901      	bls.n	8011052 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801104e:	2303      	movs	r3, #3
 8011050:	e0fd      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011052:	4b81      	ldr	r3, [pc, #516]	; (8011258 <HAL_RCC_OscConfig+0x4d4>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801105a:	2b00      	cmp	r3, #0
 801105c:	d0f0      	beq.n	8011040 <HAL_RCC_OscConfig+0x2bc>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	689b      	ldr	r3, [r3, #8]
 80130fe:	2b01      	cmp	r3, #1
 8013100:	d106      	bne.n	8013110 <HAL_RCC_OscConfig+0x2f0>
 8013102:	4b7d      	ldr	r3, [pc, #500]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 8013104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013106:	4a7c      	ldr	r2, [pc, #496]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 8013108:	f043 0301 	orr.w	r3, r3, #1
 801310c:	6713      	str	r3, [r2, #112]	; 0x70
 801310e:	e01c      	b.n	801314a <HAL_RCC_OscConfig+0x32a>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	689b      	ldr	r3, [r3, #8]
 8013114:	2b05      	cmp	r3, #5
 8013116:	d10c      	bne.n	8013132 <HAL_RCC_OscConfig+0x312>
 8013118:	4b77      	ldr	r3, [pc, #476]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 801311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801311c:	4a76      	ldr	r2, [pc, #472]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 801311e:	f043 0304 	orr.w	r3, r3, #4
 8013122:	6713      	str	r3, [r2, #112]	; 0x70
 8013124:	4b74      	ldr	r3, [pc, #464]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 8013126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013128:	4a73      	ldr	r2, [pc, #460]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 801312a:	f043 0301 	orr.w	r3, r3, #1
 801312e:	6713      	str	r3, [r2, #112]	; 0x70
 8013130:	e00b      	b.n	801314a <HAL_RCC_OscConfig+0x32a>
 8013132:	4b71      	ldr	r3, [pc, #452]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 8013134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013136:	4a70      	ldr	r2, [pc, #448]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 8013138:	f023 0301 	bic.w	r3, r3, #1
 801313c:	6713      	str	r3, [r2, #112]	; 0x70
 801313e:	4b6e      	ldr	r3, [pc, #440]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 8013140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013142:	4a6d      	ldr	r2, [pc, #436]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 8013144:	f023 0304 	bic.w	r3, r3, #4
 8013148:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	689b      	ldr	r3, [r3, #8]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d015      	beq.n	801317e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013152:	f7fd fe69 	bl	8010e28 <HAL_GetTick>
 8013156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013158:	e00a      	b.n	8013170 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801315a:	f7fd fe65 	bl	8010e28 <HAL_GetTick>
 801315e:	4602      	mov	r2, r0
 8013160:	693b      	ldr	r3, [r7, #16]
 8013162:	1ad3      	subs	r3, r2, r3
 8013164:	f241 3288 	movw	r2, #5000	; 0x1388
 8013168:	4293      	cmp	r3, r2
 801316a:	d901      	bls.n	8013170 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801316c:	2303      	movs	r3, #3
 801316e:	e0bc      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013170:	4b61      	ldr	r3, [pc, #388]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 8013172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013174:	f003 0302 	and.w	r3, r3, #2
 8013178:	2b00      	cmp	r3, #0
 801317a:	d0ee      	beq.n	801315a <HAL_RCC_OscConfig+0x33a>
 801317c:	e014      	b.n	80131a8 <HAL_RCC_OscConfig+0x388>
=======
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	689b      	ldr	r3, [r3, #8]
 8011062:	2b01      	cmp	r3, #1
 8011064:	d106      	bne.n	8011074 <HAL_RCC_OscConfig+0x2f0>
 8011066:	4b7d      	ldr	r3, [pc, #500]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 8011068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801106a:	4a7c      	ldr	r2, [pc, #496]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 801106c:	f043 0301 	orr.w	r3, r3, #1
 8011070:	6713      	str	r3, [r2, #112]	; 0x70
 8011072:	e01c      	b.n	80110ae <HAL_RCC_OscConfig+0x32a>
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	689b      	ldr	r3, [r3, #8]
 8011078:	2b05      	cmp	r3, #5
 801107a:	d10c      	bne.n	8011096 <HAL_RCC_OscConfig+0x312>
 801107c:	4b77      	ldr	r3, [pc, #476]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 801107e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011080:	4a76      	ldr	r2, [pc, #472]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 8011082:	f043 0304 	orr.w	r3, r3, #4
 8011086:	6713      	str	r3, [r2, #112]	; 0x70
 8011088:	4b74      	ldr	r3, [pc, #464]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 801108a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801108c:	4a73      	ldr	r2, [pc, #460]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 801108e:	f043 0301 	orr.w	r3, r3, #1
 8011092:	6713      	str	r3, [r2, #112]	; 0x70
 8011094:	e00b      	b.n	80110ae <HAL_RCC_OscConfig+0x32a>
 8011096:	4b71      	ldr	r3, [pc, #452]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 8011098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801109a:	4a70      	ldr	r2, [pc, #448]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 801109c:	f023 0301 	bic.w	r3, r3, #1
 80110a0:	6713      	str	r3, [r2, #112]	; 0x70
 80110a2:	4b6e      	ldr	r3, [pc, #440]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 80110a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110a6:	4a6d      	ldr	r2, [pc, #436]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 80110a8:	f023 0304 	bic.w	r3, r3, #4
 80110ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	689b      	ldr	r3, [r3, #8]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d015      	beq.n	80110e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80110b6:	f7fd fe69 	bl	800ed8c <HAL_GetTick>
 80110ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80110bc:	e00a      	b.n	80110d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80110be:	f7fd fe65 	bl	800ed8c <HAL_GetTick>
 80110c2:	4602      	mov	r2, r0
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	1ad3      	subs	r3, r2, r3
 80110c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80110cc:	4293      	cmp	r3, r2
 80110ce:	d901      	bls.n	80110d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80110d0:	2303      	movs	r3, #3
 80110d2:	e0bc      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80110d4:	4b61      	ldr	r3, [pc, #388]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 80110d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110d8:	f003 0302 	and.w	r3, r3, #2
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d0ee      	beq.n	80110be <HAL_RCC_OscConfig+0x33a>
 80110e0:	e014      	b.n	801110c <HAL_RCC_OscConfig+0x388>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 801317e:	f7fd fe53 	bl	8010e28 <HAL_GetTick>
 8013182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013184:	e00a      	b.n	801319c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013186:	f7fd fe4f 	bl	8010e28 <HAL_GetTick>
 801318a:	4602      	mov	r2, r0
 801318c:	693b      	ldr	r3, [r7, #16]
 801318e:	1ad3      	subs	r3, r2, r3
 8013190:	f241 3288 	movw	r2, #5000	; 0x1388
 8013194:	4293      	cmp	r3, r2
 8013196:	d901      	bls.n	801319c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8013198:	2303      	movs	r3, #3
 801319a:	e0a6      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801319c:	4b56      	ldr	r3, [pc, #344]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 801319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131a0:	f003 0302 	and.w	r3, r3, #2
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d1ee      	bne.n	8013186 <HAL_RCC_OscConfig+0x366>
=======
 80110e2:	f7fd fe53 	bl	800ed8c <HAL_GetTick>
 80110e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80110e8:	e00a      	b.n	8011100 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80110ea:	f7fd fe4f 	bl	800ed8c <HAL_GetTick>
 80110ee:	4602      	mov	r2, r0
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	1ad3      	subs	r3, r2, r3
 80110f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80110f8:	4293      	cmp	r3, r2
 80110fa:	d901      	bls.n	8011100 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80110fc:	2303      	movs	r3, #3
 80110fe:	e0a6      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011100:	4b56      	ldr	r3, [pc, #344]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 8011102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011104:	f003 0302 	and.w	r3, r3, #2
 8011108:	2b00      	cmp	r3, #0
 801110a:	d1ee      	bne.n	80110ea <HAL_RCC_OscConfig+0x366>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 80131a8:	7dfb      	ldrb	r3, [r7, #23]
 80131aa:	2b01      	cmp	r3, #1
 80131ac:	d105      	bne.n	80131ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80131ae:	4b52      	ldr	r3, [pc, #328]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 80131b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131b2:	4a51      	ldr	r2, [pc, #324]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 80131b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80131b8:	6413      	str	r3, [r2, #64]	; 0x40
=======
 801110c:	7dfb      	ldrb	r3, [r7, #23]
 801110e:	2b01      	cmp	r3, #1
 8011110:	d105      	bne.n	801111e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011112:	4b52      	ldr	r3, [pc, #328]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 8011114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011116:	4a51      	ldr	r2, [pc, #324]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 8011118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801111c:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	699b      	ldr	r3, [r3, #24]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	f000 8092 	beq.w	80132e8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80131c4:	4b4c      	ldr	r3, [pc, #304]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 80131c6:	689b      	ldr	r3, [r3, #8]
 80131c8:	f003 030c 	and.w	r3, r3, #12
 80131cc:	2b08      	cmp	r3, #8
 80131ce:	d05c      	beq.n	801328a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	699b      	ldr	r3, [r3, #24]
 80131d4:	2b02      	cmp	r3, #2
 80131d6:	d141      	bne.n	801325c <HAL_RCC_OscConfig+0x43c>
=======
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	699b      	ldr	r3, [r3, #24]
 8011122:	2b00      	cmp	r3, #0
 8011124:	f000 8092 	beq.w	801124c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011128:	4b4c      	ldr	r3, [pc, #304]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 801112a:	689b      	ldr	r3, [r3, #8]
 801112c:	f003 030c 	and.w	r3, r3, #12
 8011130:	2b08      	cmp	r3, #8
 8011132:	d05c      	beq.n	80111ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	699b      	ldr	r3, [r3, #24]
 8011138:	2b02      	cmp	r3, #2
 801113a:	d141      	bne.n	80111c0 <HAL_RCC_OscConfig+0x43c>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80131d8:	4b48      	ldr	r3, [pc, #288]	; (80132fc <HAL_RCC_OscConfig+0x4dc>)
 80131da:	2200      	movs	r2, #0
 80131dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80131de:	f7fd fe23 	bl	8010e28 <HAL_GetTick>
 80131e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80131e4:	e008      	b.n	80131f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80131e6:	f7fd fe1f 	bl	8010e28 <HAL_GetTick>
 80131ea:	4602      	mov	r2, r0
 80131ec:	693b      	ldr	r3, [r7, #16]
 80131ee:	1ad3      	subs	r3, r2, r3
 80131f0:	2b02      	cmp	r3, #2
 80131f2:	d901      	bls.n	80131f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80131f4:	2303      	movs	r3, #3
 80131f6:	e078      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80131f8:	4b3f      	ldr	r3, [pc, #252]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013200:	2b00      	cmp	r3, #0
 8013202:	d1f0      	bne.n	80131e6 <HAL_RCC_OscConfig+0x3c6>
=======
 801113c:	4b48      	ldr	r3, [pc, #288]	; (8011260 <HAL_RCC_OscConfig+0x4dc>)
 801113e:	2200      	movs	r2, #0
 8011140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011142:	f7fd fe23 	bl	800ed8c <HAL_GetTick>
 8011146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011148:	e008      	b.n	801115c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801114a:	f7fd fe1f 	bl	800ed8c <HAL_GetTick>
 801114e:	4602      	mov	r2, r0
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	1ad3      	subs	r3, r2, r3
 8011154:	2b02      	cmp	r3, #2
 8011156:	d901      	bls.n	801115c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8011158:	2303      	movs	r3, #3
 801115a:	e078      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801115c:	4b3f      	ldr	r3, [pc, #252]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011164:	2b00      	cmp	r3, #0
 8011166:	d1f0      	bne.n	801114a <HAL_RCC_OscConfig+0x3c6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	69da      	ldr	r2, [r3, #28]
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	6a1b      	ldr	r3, [r3, #32]
 801320c:	431a      	orrs	r2, r3
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013212:	019b      	lsls	r3, r3, #6
 8013214:	431a      	orrs	r2, r3
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801321a:	085b      	lsrs	r3, r3, #1
 801321c:	3b01      	subs	r3, #1
 801321e:	041b      	lsls	r3, r3, #16
 8013220:	431a      	orrs	r2, r3
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013226:	061b      	lsls	r3, r3, #24
 8013228:	4933      	ldr	r1, [pc, #204]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 801322a:	4313      	orrs	r3, r2
 801322c:	604b      	str	r3, [r1, #4]
=======
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	69da      	ldr	r2, [r3, #28]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6a1b      	ldr	r3, [r3, #32]
 8011170:	431a      	orrs	r2, r3
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011176:	019b      	lsls	r3, r3, #6
 8011178:	431a      	orrs	r2, r3
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801117e:	085b      	lsrs	r3, r3, #1
 8011180:	3b01      	subs	r3, #1
 8011182:	041b      	lsls	r3, r3, #16
 8011184:	431a      	orrs	r2, r3
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801118a:	061b      	lsls	r3, r3, #24
 801118c:	4933      	ldr	r1, [pc, #204]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 801118e:	4313      	orrs	r3, r2
 8011190:	604b      	str	r3, [r1, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 801322e:	4b33      	ldr	r3, [pc, #204]	; (80132fc <HAL_RCC_OscConfig+0x4dc>)
 8013230:	2201      	movs	r2, #1
 8013232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013234:	f7fd fdf8 	bl	8010e28 <HAL_GetTick>
 8013238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801323a:	e008      	b.n	801324e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801323c:	f7fd fdf4 	bl	8010e28 <HAL_GetTick>
 8013240:	4602      	mov	r2, r0
 8013242:	693b      	ldr	r3, [r7, #16]
 8013244:	1ad3      	subs	r3, r2, r3
 8013246:	2b02      	cmp	r3, #2
 8013248:	d901      	bls.n	801324e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801324a:	2303      	movs	r3, #3
 801324c:	e04d      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801324e:	4b2a      	ldr	r3, [pc, #168]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013256:	2b00      	cmp	r3, #0
 8013258:	d0f0      	beq.n	801323c <HAL_RCC_OscConfig+0x41c>
 801325a:	e045      	b.n	80132e8 <HAL_RCC_OscConfig+0x4c8>
=======
 8011192:	4b33      	ldr	r3, [pc, #204]	; (8011260 <HAL_RCC_OscConfig+0x4dc>)
 8011194:	2201      	movs	r2, #1
 8011196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011198:	f7fd fdf8 	bl	800ed8c <HAL_GetTick>
 801119c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801119e:	e008      	b.n	80111b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80111a0:	f7fd fdf4 	bl	800ed8c <HAL_GetTick>
 80111a4:	4602      	mov	r2, r0
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	1ad3      	subs	r3, r2, r3
 80111aa:	2b02      	cmp	r3, #2
 80111ac:	d901      	bls.n	80111b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80111ae:	2303      	movs	r3, #3
 80111b0:	e04d      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80111b2:	4b2a      	ldr	r3, [pc, #168]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d0f0      	beq.n	80111a0 <HAL_RCC_OscConfig+0x41c>
 80111be:	e045      	b.n	801124c <HAL_RCC_OscConfig+0x4c8>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 801325c:	4b27      	ldr	r3, [pc, #156]	; (80132fc <HAL_RCC_OscConfig+0x4dc>)
 801325e:	2200      	movs	r2, #0
 8013260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013262:	f7fd fde1 	bl	8010e28 <HAL_GetTick>
 8013266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013268:	e008      	b.n	801327c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801326a:	f7fd fddd 	bl	8010e28 <HAL_GetTick>
 801326e:	4602      	mov	r2, r0
 8013270:	693b      	ldr	r3, [r7, #16]
 8013272:	1ad3      	subs	r3, r2, r3
 8013274:	2b02      	cmp	r3, #2
 8013276:	d901      	bls.n	801327c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8013278:	2303      	movs	r3, #3
 801327a:	e036      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801327c:	4b1e      	ldr	r3, [pc, #120]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013284:	2b00      	cmp	r3, #0
 8013286:	d1f0      	bne.n	801326a <HAL_RCC_OscConfig+0x44a>
 8013288:	e02e      	b.n	80132e8 <HAL_RCC_OscConfig+0x4c8>
=======
 80111c0:	4b27      	ldr	r3, [pc, #156]	; (8011260 <HAL_RCC_OscConfig+0x4dc>)
 80111c2:	2200      	movs	r2, #0
 80111c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80111c6:	f7fd fde1 	bl	800ed8c <HAL_GetTick>
 80111ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80111cc:	e008      	b.n	80111e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80111ce:	f7fd fddd 	bl	800ed8c <HAL_GetTick>
 80111d2:	4602      	mov	r2, r0
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	1ad3      	subs	r3, r2, r3
 80111d8:	2b02      	cmp	r3, #2
 80111da:	d901      	bls.n	80111e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80111dc:	2303      	movs	r3, #3
 80111de:	e036      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80111e0:	4b1e      	ldr	r3, [pc, #120]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d1f0      	bne.n	80111ce <HAL_RCC_OscConfig+0x44a>
 80111ec:	e02e      	b.n	801124c <HAL_RCC_OscConfig+0x4c8>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	699b      	ldr	r3, [r3, #24]
 801328e:	2b01      	cmp	r3, #1
 8013290:	d101      	bne.n	8013296 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8013292:	2301      	movs	r3, #1
 8013294:	e029      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
=======
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	699b      	ldr	r3, [r3, #24]
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d101      	bne.n	80111fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80111f6:	2301      	movs	r3, #1
 80111f8:	e029      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8013296:	4b18      	ldr	r3, [pc, #96]	; (80132f8 <HAL_RCC_OscConfig+0x4d8>)
 8013298:	685b      	ldr	r3, [r3, #4]
 801329a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	69db      	ldr	r3, [r3, #28]
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d11c      	bne.n	80132e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80132b4:	429a      	cmp	r2, r3
 80132b6:	d115      	bne.n	80132e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80132b8:	68fa      	ldr	r2, [r7, #12]
 80132ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80132be:	4013      	ands	r3, r2
 80132c0:	687a      	ldr	r2, [r7, #4]
 80132c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80132c4:	4293      	cmp	r3, r2
 80132c6:	d10d      	bne.n	80132e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80132d2:	429a      	cmp	r2, r3
 80132d4:	d106      	bne.n	80132e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80132e0:	429a      	cmp	r2, r3
 80132e2:	d001      	beq.n	80132e8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80132e4:	2301      	movs	r3, #1
 80132e6:	e000      	b.n	80132ea <HAL_RCC_OscConfig+0x4ca>
=======
 80111fa:	4b18      	ldr	r3, [pc, #96]	; (801125c <HAL_RCC_OscConfig+0x4d8>)
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	69db      	ldr	r3, [r3, #28]
 801120a:	429a      	cmp	r2, r3
 801120c:	d11c      	bne.n	8011248 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011218:	429a      	cmp	r2, r3
 801121a:	d115      	bne.n	8011248 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801121c:	68fa      	ldr	r2, [r7, #12]
 801121e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8011222:	4013      	ands	r3, r2
 8011224:	687a      	ldr	r2, [r7, #4]
 8011226:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8011228:	4293      	cmp	r3, r2
 801122a:	d10d      	bne.n	8011248 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8011236:	429a      	cmp	r2, r3
 8011238:	d106      	bne.n	8011248 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8011244:	429a      	cmp	r2, r3
 8011246:	d001      	beq.n	801124c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8011248:	2301      	movs	r3, #1
 801124a:	e000      	b.n	801124e <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80132e8:	2300      	movs	r3, #0
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	3718      	adds	r7, #24
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}
 80132f2:	bf00      	nop
 80132f4:	40007000 	.word	0x40007000
 80132f8:	40023800 	.word	0x40023800
 80132fc:	42470060 	.word	0x42470060

08013300 <HAL_RCC_ClockConfig>:
=======
 801124c:	2300      	movs	r3, #0
}
 801124e:	4618      	mov	r0, r3
 8011250:	3718      	adds	r7, #24
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}
 8011256:	bf00      	nop
 8011258:	40007000 	.word	0x40007000
 801125c:	40023800 	.word	0x40023800
 8011260:	42470060 	.word	0x42470060

08011264 <HAL_RCC_ClockConfig>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8013300:	b580      	push	{r7, lr}
 8013302:	b084      	sub	sp, #16
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	6039      	str	r1, [r7, #0]
=======
 8011264:	b580      	push	{r7, lr}
 8011266:	b084      	sub	sp, #16
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d101      	bne.n	8013314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013310:	2301      	movs	r3, #1
 8013312:	e0cc      	b.n	80134ae <HAL_RCC_ClockConfig+0x1ae>
=======
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d101      	bne.n	8011278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011274:	2301      	movs	r3, #1
 8011276:	e0cc      	b.n	8011412 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8013314:	4b68      	ldr	r3, [pc, #416]	; (80134b8 <HAL_RCC_ClockConfig+0x1b8>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	f003 030f 	and.w	r3, r3, #15
 801331c:	683a      	ldr	r2, [r7, #0]
 801331e:	429a      	cmp	r2, r3
 8013320:	d90c      	bls.n	801333c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013322:	4b65      	ldr	r3, [pc, #404]	; (80134b8 <HAL_RCC_ClockConfig+0x1b8>)
 8013324:	683a      	ldr	r2, [r7, #0]
 8013326:	b2d2      	uxtb	r2, r2
 8013328:	701a      	strb	r2, [r3, #0]
=======
 8011278:	4b68      	ldr	r3, [pc, #416]	; (801141c <HAL_RCC_ClockConfig+0x1b8>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	f003 030f 	and.w	r3, r3, #15
 8011280:	683a      	ldr	r2, [r7, #0]
 8011282:	429a      	cmp	r2, r3
 8011284:	d90c      	bls.n	80112a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011286:	4b65      	ldr	r3, [pc, #404]	; (801141c <HAL_RCC_ClockConfig+0x1b8>)
 8011288:	683a      	ldr	r2, [r7, #0]
 801128a:	b2d2      	uxtb	r2, r2
 801128c:	701a      	strb	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 801332a:	4b63      	ldr	r3, [pc, #396]	; (80134b8 <HAL_RCC_ClockConfig+0x1b8>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	f003 030f 	and.w	r3, r3, #15
 8013332:	683a      	ldr	r2, [r7, #0]
 8013334:	429a      	cmp	r2, r3
 8013336:	d001      	beq.n	801333c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013338:	2301      	movs	r3, #1
 801333a:	e0b8      	b.n	80134ae <HAL_RCC_ClockConfig+0x1ae>
=======
 801128e:	4b63      	ldr	r3, [pc, #396]	; (801141c <HAL_RCC_ClockConfig+0x1b8>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	f003 030f 	and.w	r3, r3, #15
 8011296:	683a      	ldr	r2, [r7, #0]
 8011298:	429a      	cmp	r2, r3
 801129a:	d001      	beq.n	80112a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801129c:	2301      	movs	r3, #1
 801129e:	e0b8      	b.n	8011412 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	f003 0302 	and.w	r3, r3, #2
 8013344:	2b00      	cmp	r3, #0
 8013346:	d020      	beq.n	801338a <HAL_RCC_ClockConfig+0x8a>
=======
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	f003 0302 	and.w	r3, r3, #2
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d020      	beq.n	80112ee <HAL_RCC_ClockConfig+0x8a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	f003 0304 	and.w	r3, r3, #4
 8013350:	2b00      	cmp	r3, #0
 8013352:	d005      	beq.n	8013360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013354:	4b59      	ldr	r3, [pc, #356]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 8013356:	689b      	ldr	r3, [r3, #8]
 8013358:	4a58      	ldr	r2, [pc, #352]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 801335a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801335e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	f003 0308 	and.w	r3, r3, #8
 8013368:	2b00      	cmp	r3, #0
 801336a:	d005      	beq.n	8013378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801336c:	4b53      	ldr	r3, [pc, #332]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 801336e:	689b      	ldr	r3, [r3, #8]
 8013370:	4a52      	ldr	r2, [pc, #328]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 8013372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013376:	6093      	str	r3, [r2, #8]
=======
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	f003 0304 	and.w	r3, r3, #4
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d005      	beq.n	80112c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80112b8:	4b59      	ldr	r3, [pc, #356]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 80112ba:	689b      	ldr	r3, [r3, #8]
 80112bc:	4a58      	ldr	r2, [pc, #352]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 80112be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80112c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	f003 0308 	and.w	r3, r3, #8
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d005      	beq.n	80112dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80112d0:	4b53      	ldr	r3, [pc, #332]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 80112d2:	689b      	ldr	r3, [r3, #8]
 80112d4:	4a52      	ldr	r2, [pc, #328]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 80112d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80112da:	6093      	str	r3, [r2, #8]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8013378:	4b50      	ldr	r3, [pc, #320]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 801337a:	689b      	ldr	r3, [r3, #8]
 801337c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	689b      	ldr	r3, [r3, #8]
 8013384:	494d      	ldr	r1, [pc, #308]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 8013386:	4313      	orrs	r3, r2
 8013388:	608b      	str	r3, [r1, #8]
=======
 80112dc:	4b50      	ldr	r3, [pc, #320]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 80112de:	689b      	ldr	r3, [r3, #8]
 80112e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	689b      	ldr	r3, [r3, #8]
 80112e8:	494d      	ldr	r1, [pc, #308]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 80112ea:	4313      	orrs	r3, r2
 80112ec:	608b      	str	r3, [r1, #8]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	f003 0301 	and.w	r3, r3, #1
 8013392:	2b00      	cmp	r3, #0
 8013394:	d044      	beq.n	8013420 <HAL_RCC_ClockConfig+0x120>
=======
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	f003 0301 	and.w	r3, r3, #1
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d044      	beq.n	8011384 <HAL_RCC_ClockConfig+0x120>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	685b      	ldr	r3, [r3, #4]
 801339a:	2b01      	cmp	r3, #1
 801339c:	d107      	bne.n	80133ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801339e:	4b47      	ldr	r3, [pc, #284]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d119      	bne.n	80133de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80133aa:	2301      	movs	r3, #1
 80133ac:	e07f      	b.n	80134ae <HAL_RCC_ClockConfig+0x1ae>
=======
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	685b      	ldr	r3, [r3, #4]
 80112fe:	2b01      	cmp	r3, #1
 8011300:	d107      	bne.n	8011312 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011302:	4b47      	ldr	r3, [pc, #284]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801130a:	2b00      	cmp	r3, #0
 801130c:	d119      	bne.n	8011342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801130e:	2301      	movs	r3, #1
 8011310:	e07f      	b.n	8011412 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	685b      	ldr	r3, [r3, #4]
 80133b2:	2b02      	cmp	r3, #2
 80133b4:	d003      	beq.n	80133be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80133ba:	2b03      	cmp	r3, #3
 80133bc:	d107      	bne.n	80133ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80133be:	4b3f      	ldr	r3, [pc, #252]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d109      	bne.n	80133de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80133ca:	2301      	movs	r3, #1
 80133cc:	e06f      	b.n	80134ae <HAL_RCC_ClockConfig+0x1ae>
=======
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	2b02      	cmp	r3, #2
 8011318:	d003      	beq.n	8011322 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801131e:	2b03      	cmp	r3, #3
 8011320:	d107      	bne.n	8011332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011322:	4b3f      	ldr	r3, [pc, #252]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801132a:	2b00      	cmp	r3, #0
 801132c:	d109      	bne.n	8011342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801132e:	2301      	movs	r3, #1
 8011330:	e06f      	b.n	8011412 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 80133ce:	4b3b      	ldr	r3, [pc, #236]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	f003 0302 	and.w	r3, r3, #2
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d101      	bne.n	80133de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80133da:	2301      	movs	r3, #1
 80133dc:	e067      	b.n	80134ae <HAL_RCC_ClockConfig+0x1ae>
=======
 8011332:	4b3b      	ldr	r3, [pc, #236]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	f003 0302 	and.w	r3, r3, #2
 801133a:	2b00      	cmp	r3, #0
 801133c:	d101      	bne.n	8011342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801133e:	2301      	movs	r3, #1
 8011340:	e067      	b.n	8011412 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 80133de:	4b37      	ldr	r3, [pc, #220]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 80133e0:	689b      	ldr	r3, [r3, #8]
 80133e2:	f023 0203 	bic.w	r2, r3, #3
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	685b      	ldr	r3, [r3, #4]
 80133ea:	4934      	ldr	r1, [pc, #208]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 80133ec:	4313      	orrs	r3, r2
 80133ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80133f0:	f7fd fd1a 	bl	8010e28 <HAL_GetTick>
 80133f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80133f6:	e00a      	b.n	801340e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80133f8:	f7fd fd16 	bl	8010e28 <HAL_GetTick>
 80133fc:	4602      	mov	r2, r0
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	1ad3      	subs	r3, r2, r3
 8013402:	f241 3288 	movw	r2, #5000	; 0x1388
 8013406:	4293      	cmp	r3, r2
 8013408:	d901      	bls.n	801340e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801340a:	2303      	movs	r3, #3
 801340c:	e04f      	b.n	80134ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801340e:	4b2b      	ldr	r3, [pc, #172]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 8013410:	689b      	ldr	r3, [r3, #8]
 8013412:	f003 020c 	and.w	r2, r3, #12
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	685b      	ldr	r3, [r3, #4]
 801341a:	009b      	lsls	r3, r3, #2
 801341c:	429a      	cmp	r2, r3
 801341e:	d1eb      	bne.n	80133f8 <HAL_RCC_ClockConfig+0xf8>
=======
 8011342:	4b37      	ldr	r3, [pc, #220]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 8011344:	689b      	ldr	r3, [r3, #8]
 8011346:	f023 0203 	bic.w	r2, r3, #3
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	4934      	ldr	r1, [pc, #208]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 8011350:	4313      	orrs	r3, r2
 8011352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011354:	f7fd fd1a 	bl	800ed8c <HAL_GetTick>
 8011358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801135a:	e00a      	b.n	8011372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801135c:	f7fd fd16 	bl	800ed8c <HAL_GetTick>
 8011360:	4602      	mov	r2, r0
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	1ad3      	subs	r3, r2, r3
 8011366:	f241 3288 	movw	r2, #5000	; 0x1388
 801136a:	4293      	cmp	r3, r2
 801136c:	d901      	bls.n	8011372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801136e:	2303      	movs	r3, #3
 8011370:	e04f      	b.n	8011412 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011372:	4b2b      	ldr	r3, [pc, #172]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 8011374:	689b      	ldr	r3, [r3, #8]
 8011376:	f003 020c 	and.w	r2, r3, #12
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	009b      	lsls	r3, r3, #2
 8011380:	429a      	cmp	r2, r3
 8011382:	d1eb      	bne.n	801135c <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8013420:	4b25      	ldr	r3, [pc, #148]	; (80134b8 <HAL_RCC_ClockConfig+0x1b8>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	f003 030f 	and.w	r3, r3, #15
 8013428:	683a      	ldr	r2, [r7, #0]
 801342a:	429a      	cmp	r2, r3
 801342c:	d20c      	bcs.n	8013448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801342e:	4b22      	ldr	r3, [pc, #136]	; (80134b8 <HAL_RCC_ClockConfig+0x1b8>)
 8013430:	683a      	ldr	r2, [r7, #0]
 8013432:	b2d2      	uxtb	r2, r2
 8013434:	701a      	strb	r2, [r3, #0]
=======
 8011384:	4b25      	ldr	r3, [pc, #148]	; (801141c <HAL_RCC_ClockConfig+0x1b8>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	f003 030f 	and.w	r3, r3, #15
 801138c:	683a      	ldr	r2, [r7, #0]
 801138e:	429a      	cmp	r2, r3
 8011390:	d20c      	bcs.n	80113ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011392:	4b22      	ldr	r3, [pc, #136]	; (801141c <HAL_RCC_ClockConfig+0x1b8>)
 8011394:	683a      	ldr	r2, [r7, #0]
 8011396:	b2d2      	uxtb	r2, r2
 8011398:	701a      	strb	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8013436:	4b20      	ldr	r3, [pc, #128]	; (80134b8 <HAL_RCC_ClockConfig+0x1b8>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	f003 030f 	and.w	r3, r3, #15
 801343e:	683a      	ldr	r2, [r7, #0]
 8013440:	429a      	cmp	r2, r3
 8013442:	d001      	beq.n	8013448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013444:	2301      	movs	r3, #1
 8013446:	e032      	b.n	80134ae <HAL_RCC_ClockConfig+0x1ae>
=======
 801139a:	4b20      	ldr	r3, [pc, #128]	; (801141c <HAL_RCC_ClockConfig+0x1b8>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f003 030f 	and.w	r3, r3, #15
 80113a2:	683a      	ldr	r2, [r7, #0]
 80113a4:	429a      	cmp	r2, r3
 80113a6:	d001      	beq.n	80113ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80113a8:	2301      	movs	r3, #1
 80113aa:	e032      	b.n	8011412 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	f003 0304 	and.w	r3, r3, #4
 8013450:	2b00      	cmp	r3, #0
 8013452:	d008      	beq.n	8013466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013454:	4b19      	ldr	r3, [pc, #100]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 8013456:	689b      	ldr	r3, [r3, #8]
 8013458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	68db      	ldr	r3, [r3, #12]
 8013460:	4916      	ldr	r1, [pc, #88]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 8013462:	4313      	orrs	r3, r2
 8013464:	608b      	str	r3, [r1, #8]
=======
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f003 0304 	and.w	r3, r3, #4
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d008      	beq.n	80113ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80113b8:	4b19      	ldr	r3, [pc, #100]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 80113ba:	689b      	ldr	r3, [r3, #8]
 80113bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	4916      	ldr	r1, [pc, #88]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 80113c6:	4313      	orrs	r3, r2
 80113c8:	608b      	str	r3, [r1, #8]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	f003 0308 	and.w	r3, r3, #8
 801346e:	2b00      	cmp	r3, #0
 8013470:	d009      	beq.n	8013486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013472:	4b12      	ldr	r3, [pc, #72]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 8013474:	689b      	ldr	r3, [r3, #8]
 8013476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	691b      	ldr	r3, [r3, #16]
 801347e:	00db      	lsls	r3, r3, #3
 8013480:	490e      	ldr	r1, [pc, #56]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 8013482:	4313      	orrs	r3, r2
 8013484:	608b      	str	r3, [r1, #8]
=======
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	f003 0308 	and.w	r3, r3, #8
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d009      	beq.n	80113ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80113d6:	4b12      	ldr	r3, [pc, #72]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 80113d8:	689b      	ldr	r3, [r3, #8]
 80113da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	691b      	ldr	r3, [r3, #16]
 80113e2:	00db      	lsls	r3, r3, #3
 80113e4:	490e      	ldr	r1, [pc, #56]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 80113e6:	4313      	orrs	r3, r2
 80113e8:	608b      	str	r3, [r1, #8]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8013486:	f000 f821 	bl	80134cc <HAL_RCC_GetSysClockFreq>
 801348a:	4601      	mov	r1, r0
 801348c:	4b0b      	ldr	r3, [pc, #44]	; (80134bc <HAL_RCC_ClockConfig+0x1bc>)
 801348e:	689b      	ldr	r3, [r3, #8]
 8013490:	091b      	lsrs	r3, r3, #4
 8013492:	f003 030f 	and.w	r3, r3, #15
 8013496:	4a0a      	ldr	r2, [pc, #40]	; (80134c0 <HAL_RCC_ClockConfig+0x1c0>)
 8013498:	5cd3      	ldrb	r3, [r2, r3]
 801349a:	fa21 f303 	lsr.w	r3, r1, r3
 801349e:	4a09      	ldr	r2, [pc, #36]	; (80134c4 <HAL_RCC_ClockConfig+0x1c4>)
 80134a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80134a2:	4b09      	ldr	r3, [pc, #36]	; (80134c8 <HAL_RCC_ClockConfig+0x1c8>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	4618      	mov	r0, r3
 80134a8:	f7fd fc7a 	bl	8010da0 <HAL_InitTick>

  return HAL_OK;
 80134ac:	2300      	movs	r3, #0
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3710      	adds	r7, #16
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	bf00      	nop
 80134b8:	40023c00 	.word	0x40023c00
 80134bc:	40023800 	.word	0x40023800
 80134c0:	08018af0 	.word	0x08018af0
 80134c4:	20000074 	.word	0x20000074
 80134c8:	20000078 	.word	0x20000078

080134cc <HAL_RCC_GetSysClockFreq>:
=======
 80113ea:	f000 f821 	bl	8011430 <HAL_RCC_GetSysClockFreq>
 80113ee:	4601      	mov	r1, r0
 80113f0:	4b0b      	ldr	r3, [pc, #44]	; (8011420 <HAL_RCC_ClockConfig+0x1bc>)
 80113f2:	689b      	ldr	r3, [r3, #8]
 80113f4:	091b      	lsrs	r3, r3, #4
 80113f6:	f003 030f 	and.w	r3, r3, #15
 80113fa:	4a0a      	ldr	r2, [pc, #40]	; (8011424 <HAL_RCC_ClockConfig+0x1c0>)
 80113fc:	5cd3      	ldrb	r3, [r2, r3]
 80113fe:	fa21 f303 	lsr.w	r3, r1, r3
 8011402:	4a09      	ldr	r2, [pc, #36]	; (8011428 <HAL_RCC_ClockConfig+0x1c4>)
 8011404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011406:	4b09      	ldr	r3, [pc, #36]	; (801142c <HAL_RCC_ClockConfig+0x1c8>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	4618      	mov	r0, r3
 801140c:	f7fd fc7a 	bl	800ed04 <HAL_InitTick>

  return HAL_OK;
 8011410:	2300      	movs	r3, #0
}
 8011412:	4618      	mov	r0, r3
 8011414:	3710      	adds	r7, #16
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop
 801141c:	40023c00 	.word	0x40023c00
 8011420:	40023800 	.word	0x40023800
 8011424:	08016a58 	.word	0x08016a58
 8011428:	20000d00 	.word	0x20000d00
 801142c:	20000d04 	.word	0x20000d04

08011430 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 80134cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134ce:	b085      	sub	sp, #20
 80134d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80134d2:	2300      	movs	r3, #0
 80134d4:	607b      	str	r3, [r7, #4]
 80134d6:	2300      	movs	r3, #0
 80134d8:	60fb      	str	r3, [r7, #12]
 80134da:	2300      	movs	r3, #0
 80134dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80134de:	2300      	movs	r3, #0
 80134e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80134e2:	4b63      	ldr	r3, [pc, #396]	; (8013670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80134e4:	689b      	ldr	r3, [r3, #8]
 80134e6:	f003 030c 	and.w	r3, r3, #12
 80134ea:	2b04      	cmp	r3, #4
 80134ec:	d007      	beq.n	80134fe <HAL_RCC_GetSysClockFreq+0x32>
 80134ee:	2b08      	cmp	r3, #8
 80134f0:	d008      	beq.n	8013504 <HAL_RCC_GetSysClockFreq+0x38>
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	f040 80b4 	bne.w	8013660 <HAL_RCC_GetSysClockFreq+0x194>
=======
 8011430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011432:	b085      	sub	sp, #20
 8011434:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8011436:	2300      	movs	r3, #0
 8011438:	607b      	str	r3, [r7, #4]
 801143a:	2300      	movs	r3, #0
 801143c:	60fb      	str	r3, [r7, #12]
 801143e:	2300      	movs	r3, #0
 8011440:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8011442:	2300      	movs	r3, #0
 8011444:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011446:	4b63      	ldr	r3, [pc, #396]	; (80115d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011448:	689b      	ldr	r3, [r3, #8]
 801144a:	f003 030c 	and.w	r3, r3, #12
 801144e:	2b04      	cmp	r3, #4
 8011450:	d007      	beq.n	8011462 <HAL_RCC_GetSysClockFreq+0x32>
 8011452:	2b08      	cmp	r3, #8
 8011454:	d008      	beq.n	8011468 <HAL_RCC_GetSysClockFreq+0x38>
 8011456:	2b00      	cmp	r3, #0
 8011458:	f040 80b4 	bne.w	80115c4 <HAL_RCC_GetSysClockFreq+0x194>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80134f8:	4b5e      	ldr	r3, [pc, #376]	; (8013674 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80134fa:	60bb      	str	r3, [r7, #8]
       break;
 80134fc:	e0b3      	b.n	8013666 <HAL_RCC_GetSysClockFreq+0x19a>
=======
 801145c:	4b5e      	ldr	r3, [pc, #376]	; (80115d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801145e:	60bb      	str	r3, [r7, #8]
       break;
 8011460:	e0b3      	b.n	80115ca <HAL_RCC_GetSysClockFreq+0x19a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 80134fe:	4b5e      	ldr	r3, [pc, #376]	; (8013678 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8013500:	60bb      	str	r3, [r7, #8]
      break;
 8013502:	e0b0      	b.n	8013666 <HAL_RCC_GetSysClockFreq+0x19a>
=======
 8011462:	4b5e      	ldr	r3, [pc, #376]	; (80115dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8011464:	60bb      	str	r3, [r7, #8]
      break;
 8011466:	e0b0      	b.n	80115ca <HAL_RCC_GetSysClockFreq+0x19a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8013504:	4b5a      	ldr	r3, [pc, #360]	; (8013670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013506:	685b      	ldr	r3, [r3, #4]
 8013508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801350c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801350e:	4b58      	ldr	r3, [pc, #352]	; (8013670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013510:	685b      	ldr	r3, [r3, #4]
 8013512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013516:	2b00      	cmp	r3, #0
 8013518:	d04a      	beq.n	80135b0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801351a:	4b55      	ldr	r3, [pc, #340]	; (8013670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801351c:	685b      	ldr	r3, [r3, #4]
 801351e:	099b      	lsrs	r3, r3, #6
 8013520:	f04f 0400 	mov.w	r4, #0
 8013524:	f240 11ff 	movw	r1, #511	; 0x1ff
 8013528:	f04f 0200 	mov.w	r2, #0
 801352c:	ea03 0501 	and.w	r5, r3, r1
 8013530:	ea04 0602 	and.w	r6, r4, r2
 8013534:	4629      	mov	r1, r5
 8013536:	4632      	mov	r2, r6
 8013538:	f04f 0300 	mov.w	r3, #0
 801353c:	f04f 0400 	mov.w	r4, #0
 8013540:	0154      	lsls	r4, r2, #5
 8013542:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013546:	014b      	lsls	r3, r1, #5
 8013548:	4619      	mov	r1, r3
 801354a:	4622      	mov	r2, r4
 801354c:	1b49      	subs	r1, r1, r5
 801354e:	eb62 0206 	sbc.w	r2, r2, r6
 8013552:	f04f 0300 	mov.w	r3, #0
 8013556:	f04f 0400 	mov.w	r4, #0
 801355a:	0194      	lsls	r4, r2, #6
 801355c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8013560:	018b      	lsls	r3, r1, #6
 8013562:	1a5b      	subs	r3, r3, r1
 8013564:	eb64 0402 	sbc.w	r4, r4, r2
 8013568:	f04f 0100 	mov.w	r1, #0
 801356c:	f04f 0200 	mov.w	r2, #0
 8013570:	00e2      	lsls	r2, r4, #3
 8013572:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8013576:	00d9      	lsls	r1, r3, #3
 8013578:	460b      	mov	r3, r1
 801357a:	4614      	mov	r4, r2
 801357c:	195b      	adds	r3, r3, r5
 801357e:	eb44 0406 	adc.w	r4, r4, r6
 8013582:	f04f 0100 	mov.w	r1, #0
 8013586:	f04f 0200 	mov.w	r2, #0
 801358a:	0262      	lsls	r2, r4, #9
 801358c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8013590:	0259      	lsls	r1, r3, #9
 8013592:	460b      	mov	r3, r1
 8013594:	4614      	mov	r4, r2
 8013596:	4618      	mov	r0, r3
 8013598:	4621      	mov	r1, r4
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f04f 0400 	mov.w	r4, #0
 80135a0:	461a      	mov	r2, r3
 80135a2:	4623      	mov	r3, r4
 80135a4:	f7f5 fa88 	bl	8008ab8 <__aeabi_uldivmod>
 80135a8:	4603      	mov	r3, r0
 80135aa:	460c      	mov	r4, r1
 80135ac:	60fb      	str	r3, [r7, #12]
 80135ae:	e049      	b.n	8013644 <HAL_RCC_GetSysClockFreq+0x178>
=======
 8011468:	4b5a      	ldr	r3, [pc, #360]	; (80115d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011470:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011472:	4b58      	ldr	r3, [pc, #352]	; (80115d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801147a:	2b00      	cmp	r3, #0
 801147c:	d04a      	beq.n	8011514 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801147e:	4b55      	ldr	r3, [pc, #340]	; (80115d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011480:	685b      	ldr	r3, [r3, #4]
 8011482:	099b      	lsrs	r3, r3, #6
 8011484:	f04f 0400 	mov.w	r4, #0
 8011488:	f240 11ff 	movw	r1, #511	; 0x1ff
 801148c:	f04f 0200 	mov.w	r2, #0
 8011490:	ea03 0501 	and.w	r5, r3, r1
 8011494:	ea04 0602 	and.w	r6, r4, r2
 8011498:	4629      	mov	r1, r5
 801149a:	4632      	mov	r2, r6
 801149c:	f04f 0300 	mov.w	r3, #0
 80114a0:	f04f 0400 	mov.w	r4, #0
 80114a4:	0154      	lsls	r4, r2, #5
 80114a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80114aa:	014b      	lsls	r3, r1, #5
 80114ac:	4619      	mov	r1, r3
 80114ae:	4622      	mov	r2, r4
 80114b0:	1b49      	subs	r1, r1, r5
 80114b2:	eb62 0206 	sbc.w	r2, r2, r6
 80114b6:	f04f 0300 	mov.w	r3, #0
 80114ba:	f04f 0400 	mov.w	r4, #0
 80114be:	0194      	lsls	r4, r2, #6
 80114c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80114c4:	018b      	lsls	r3, r1, #6
 80114c6:	1a5b      	subs	r3, r3, r1
 80114c8:	eb64 0402 	sbc.w	r4, r4, r2
 80114cc:	f04f 0100 	mov.w	r1, #0
 80114d0:	f04f 0200 	mov.w	r2, #0
 80114d4:	00e2      	lsls	r2, r4, #3
 80114d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80114da:	00d9      	lsls	r1, r3, #3
 80114dc:	460b      	mov	r3, r1
 80114de:	4614      	mov	r4, r2
 80114e0:	195b      	adds	r3, r3, r5
 80114e2:	eb44 0406 	adc.w	r4, r4, r6
 80114e6:	f04f 0100 	mov.w	r1, #0
 80114ea:	f04f 0200 	mov.w	r2, #0
 80114ee:	0262      	lsls	r2, r4, #9
 80114f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80114f4:	0259      	lsls	r1, r3, #9
 80114f6:	460b      	mov	r3, r1
 80114f8:	4614      	mov	r4, r2
 80114fa:	4618      	mov	r0, r3
 80114fc:	4621      	mov	r1, r4
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	f04f 0400 	mov.w	r4, #0
 8011504:	461a      	mov	r2, r3
 8011506:	4623      	mov	r3, r4
 8011508:	f7f7 fad6 	bl	8008ab8 <__aeabi_uldivmod>
 801150c:	4603      	mov	r3, r0
 801150e:	460c      	mov	r4, r1
 8011510:	60fb      	str	r3, [r7, #12]
 8011512:	e049      	b.n	80115a8 <HAL_RCC_GetSysClockFreq+0x178>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 80135b0:	4b2f      	ldr	r3, [pc, #188]	; (8013670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80135b2:	685b      	ldr	r3, [r3, #4]
 80135b4:	099b      	lsrs	r3, r3, #6
 80135b6:	f04f 0400 	mov.w	r4, #0
 80135ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80135be:	f04f 0200 	mov.w	r2, #0
 80135c2:	ea03 0501 	and.w	r5, r3, r1
 80135c6:	ea04 0602 	and.w	r6, r4, r2
 80135ca:	4629      	mov	r1, r5
 80135cc:	4632      	mov	r2, r6
 80135ce:	f04f 0300 	mov.w	r3, #0
 80135d2:	f04f 0400 	mov.w	r4, #0
 80135d6:	0154      	lsls	r4, r2, #5
 80135d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80135dc:	014b      	lsls	r3, r1, #5
 80135de:	4619      	mov	r1, r3
 80135e0:	4622      	mov	r2, r4
 80135e2:	1b49      	subs	r1, r1, r5
 80135e4:	eb62 0206 	sbc.w	r2, r2, r6
 80135e8:	f04f 0300 	mov.w	r3, #0
 80135ec:	f04f 0400 	mov.w	r4, #0
 80135f0:	0194      	lsls	r4, r2, #6
 80135f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80135f6:	018b      	lsls	r3, r1, #6
 80135f8:	1a5b      	subs	r3, r3, r1
 80135fa:	eb64 0402 	sbc.w	r4, r4, r2
 80135fe:	f04f 0100 	mov.w	r1, #0
 8013602:	f04f 0200 	mov.w	r2, #0
 8013606:	00e2      	lsls	r2, r4, #3
 8013608:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801360c:	00d9      	lsls	r1, r3, #3
 801360e:	460b      	mov	r3, r1
 8013610:	4614      	mov	r4, r2
 8013612:	195b      	adds	r3, r3, r5
 8013614:	eb44 0406 	adc.w	r4, r4, r6
 8013618:	f04f 0100 	mov.w	r1, #0
 801361c:	f04f 0200 	mov.w	r2, #0
 8013620:	02a2      	lsls	r2, r4, #10
 8013622:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8013626:	0299      	lsls	r1, r3, #10
 8013628:	460b      	mov	r3, r1
 801362a:	4614      	mov	r4, r2
 801362c:	4618      	mov	r0, r3
 801362e:	4621      	mov	r1, r4
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f04f 0400 	mov.w	r4, #0
 8013636:	461a      	mov	r2, r3
 8013638:	4623      	mov	r3, r4
 801363a:	f7f5 fa3d 	bl	8008ab8 <__aeabi_uldivmod>
 801363e:	4603      	mov	r3, r0
 8013640:	460c      	mov	r4, r1
 8013642:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013644:	4b0a      	ldr	r3, [pc, #40]	; (8013670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013646:	685b      	ldr	r3, [r3, #4]
 8013648:	0c1b      	lsrs	r3, r3, #16
 801364a:	f003 0303 	and.w	r3, r3, #3
 801364e:	3301      	adds	r3, #1
 8013650:	005b      	lsls	r3, r3, #1
 8013652:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8013654:	68fa      	ldr	r2, [r7, #12]
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	fbb2 f3f3 	udiv	r3, r2, r3
 801365c:	60bb      	str	r3, [r7, #8]
      break;
 801365e:	e002      	b.n	8013666 <HAL_RCC_GetSysClockFreq+0x19a>
=======
 8011514:	4b2f      	ldr	r3, [pc, #188]	; (80115d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	099b      	lsrs	r3, r3, #6
 801151a:	f04f 0400 	mov.w	r4, #0
 801151e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8011522:	f04f 0200 	mov.w	r2, #0
 8011526:	ea03 0501 	and.w	r5, r3, r1
 801152a:	ea04 0602 	and.w	r6, r4, r2
 801152e:	4629      	mov	r1, r5
 8011530:	4632      	mov	r2, r6
 8011532:	f04f 0300 	mov.w	r3, #0
 8011536:	f04f 0400 	mov.w	r4, #0
 801153a:	0154      	lsls	r4, r2, #5
 801153c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8011540:	014b      	lsls	r3, r1, #5
 8011542:	4619      	mov	r1, r3
 8011544:	4622      	mov	r2, r4
 8011546:	1b49      	subs	r1, r1, r5
 8011548:	eb62 0206 	sbc.w	r2, r2, r6
 801154c:	f04f 0300 	mov.w	r3, #0
 8011550:	f04f 0400 	mov.w	r4, #0
 8011554:	0194      	lsls	r4, r2, #6
 8011556:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801155a:	018b      	lsls	r3, r1, #6
 801155c:	1a5b      	subs	r3, r3, r1
 801155e:	eb64 0402 	sbc.w	r4, r4, r2
 8011562:	f04f 0100 	mov.w	r1, #0
 8011566:	f04f 0200 	mov.w	r2, #0
 801156a:	00e2      	lsls	r2, r4, #3
 801156c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8011570:	00d9      	lsls	r1, r3, #3
 8011572:	460b      	mov	r3, r1
 8011574:	4614      	mov	r4, r2
 8011576:	195b      	adds	r3, r3, r5
 8011578:	eb44 0406 	adc.w	r4, r4, r6
 801157c:	f04f 0100 	mov.w	r1, #0
 8011580:	f04f 0200 	mov.w	r2, #0
 8011584:	02a2      	lsls	r2, r4, #10
 8011586:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801158a:	0299      	lsls	r1, r3, #10
 801158c:	460b      	mov	r3, r1
 801158e:	4614      	mov	r4, r2
 8011590:	4618      	mov	r0, r3
 8011592:	4621      	mov	r1, r4
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f04f 0400 	mov.w	r4, #0
 801159a:	461a      	mov	r2, r3
 801159c:	4623      	mov	r3, r4
 801159e:	f7f7 fa8b 	bl	8008ab8 <__aeabi_uldivmod>
 80115a2:	4603      	mov	r3, r0
 80115a4:	460c      	mov	r4, r1
 80115a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80115a8:	4b0a      	ldr	r3, [pc, #40]	; (80115d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80115aa:	685b      	ldr	r3, [r3, #4]
 80115ac:	0c1b      	lsrs	r3, r3, #16
 80115ae:	f003 0303 	and.w	r3, r3, #3
 80115b2:	3301      	adds	r3, #1
 80115b4:	005b      	lsls	r3, r3, #1
 80115b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80115b8:	68fa      	ldr	r2, [r7, #12]
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80115c0:	60bb      	str	r3, [r7, #8]
      break;
 80115c2:	e002      	b.n	80115ca <HAL_RCC_GetSysClockFreq+0x19a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8013660:	4b04      	ldr	r3, [pc, #16]	; (8013674 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8013662:	60bb      	str	r3, [r7, #8]
      break;
 8013664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013666:	68bb      	ldr	r3, [r7, #8]
}
 8013668:	4618      	mov	r0, r3
 801366a:	3714      	adds	r7, #20
 801366c:	46bd      	mov	sp, r7
 801366e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013670:	40023800 	.word	0x40023800
 8013674:	00f42400 	.word	0x00f42400
 8013678:	007a1200 	.word	0x007a1200

0801367c <HAL_RCC_GetHCLKFreq>:
=======
 80115c4:	4b04      	ldr	r3, [pc, #16]	; (80115d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80115c6:	60bb      	str	r3, [r7, #8]
      break;
 80115c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80115ca:	68bb      	ldr	r3, [r7, #8]
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	3714      	adds	r7, #20
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115d4:	40023800 	.word	0x40023800
 80115d8:	00f42400 	.word	0x00f42400
 80115dc:	007a1200 	.word	0x007a1200

080115e0 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 801367c:	b480      	push	{r7}
 801367e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013680:	4b03      	ldr	r3, [pc, #12]	; (8013690 <HAL_RCC_GetHCLKFreq+0x14>)
 8013682:	681b      	ldr	r3, [r3, #0]
}
 8013684:	4618      	mov	r0, r3
 8013686:	46bd      	mov	sp, r7
 8013688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368c:	4770      	bx	lr
 801368e:	bf00      	nop
 8013690:	20000074 	.word	0x20000074

08013694 <HAL_RCC_GetPCLK1Freq>:
=======
 80115e0:	b480      	push	{r7}
 80115e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80115e4:	4b03      	ldr	r3, [pc, #12]	; (80115f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80115e6:	681b      	ldr	r3, [r3, #0]
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	46bd      	mov	sp, r7
 80115ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f0:	4770      	bx	lr
 80115f2:	bf00      	nop
 80115f4:	20000d00 	.word	0x20000d00

080115f8 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8013694:	b580      	push	{r7, lr}
 8013696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013698:	f7ff fff0 	bl	801367c <HAL_RCC_GetHCLKFreq>
 801369c:	4601      	mov	r1, r0
 801369e:	4b05      	ldr	r3, [pc, #20]	; (80136b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80136a0:	689b      	ldr	r3, [r3, #8]
 80136a2:	0a9b      	lsrs	r3, r3, #10
 80136a4:	f003 0307 	and.w	r3, r3, #7
 80136a8:	4a03      	ldr	r2, [pc, #12]	; (80136b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80136aa:	5cd3      	ldrb	r3, [r2, r3]
 80136ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80136b0:	4618      	mov	r0, r3
 80136b2:	bd80      	pop	{r7, pc}
 80136b4:	40023800 	.word	0x40023800
 80136b8:	08018b00 	.word	0x08018b00

080136bc <HAL_RCC_GetPCLK2Freq>:
=======
 80115f8:	b580      	push	{r7, lr}
 80115fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80115fc:	f7ff fff0 	bl	80115e0 <HAL_RCC_GetHCLKFreq>
 8011600:	4601      	mov	r1, r0
 8011602:	4b05      	ldr	r3, [pc, #20]	; (8011618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8011604:	689b      	ldr	r3, [r3, #8]
 8011606:	0a9b      	lsrs	r3, r3, #10
 8011608:	f003 0307 	and.w	r3, r3, #7
 801160c:	4a03      	ldr	r2, [pc, #12]	; (801161c <HAL_RCC_GetPCLK1Freq+0x24>)
 801160e:	5cd3      	ldrb	r3, [r2, r3]
 8011610:	fa21 f303 	lsr.w	r3, r1, r3
}
 8011614:	4618      	mov	r0, r3
 8011616:	bd80      	pop	{r7, pc}
 8011618:	40023800 	.word	0x40023800
 801161c:	08016a68 	.word	0x08016a68

08011620 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 80136bc:	b580      	push	{r7, lr}
 80136be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80136c0:	f7ff ffdc 	bl	801367c <HAL_RCC_GetHCLKFreq>
 80136c4:	4601      	mov	r1, r0
 80136c6:	4b05      	ldr	r3, [pc, #20]	; (80136dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80136c8:	689b      	ldr	r3, [r3, #8]
 80136ca:	0b5b      	lsrs	r3, r3, #13
 80136cc:	f003 0307 	and.w	r3, r3, #7
 80136d0:	4a03      	ldr	r2, [pc, #12]	; (80136e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80136d2:	5cd3      	ldrb	r3, [r2, r3]
 80136d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80136d8:	4618      	mov	r0, r3
 80136da:	bd80      	pop	{r7, pc}
 80136dc:	40023800 	.word	0x40023800
 80136e0:	08018b00 	.word	0x08018b00

080136e4 <HAL_SPI_Init>:
=======
 8011620:	b580      	push	{r7, lr}
 8011622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8011624:	f7ff ffdc 	bl	80115e0 <HAL_RCC_GetHCLKFreq>
 8011628:	4601      	mov	r1, r0
 801162a:	4b05      	ldr	r3, [pc, #20]	; (8011640 <HAL_RCC_GetPCLK2Freq+0x20>)
 801162c:	689b      	ldr	r3, [r3, #8]
 801162e:	0b5b      	lsrs	r3, r3, #13
 8011630:	f003 0307 	and.w	r3, r3, #7
 8011634:	4a03      	ldr	r2, [pc, #12]	; (8011644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011636:	5cd3      	ldrb	r3, [r2, r3]
 8011638:	fa21 f303 	lsr.w	r3, r1, r3
}
 801163c:	4618      	mov	r0, r3
 801163e:	bd80      	pop	{r7, pc}
 8011640:	40023800 	.word	0x40023800
 8011644:	08016a68 	.word	0x08016a68

08011648 <HAL_SPI_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b082      	sub	sp, #8
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d101      	bne.n	80136f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80136f2:	2301      	movs	r3, #1
 80136f4:	e056      	b.n	80137a4 <HAL_SPI_Init+0xc0>
=======
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d101      	bne.n	801165a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011656:	2301      	movs	r3, #1
 8011658:	e056      	b.n	8011708 <HAL_SPI_Init+0xc0>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	2200      	movs	r2, #0
 80136fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013702:	b2db      	uxtb	r3, r3
 8013704:	2b00      	cmp	r3, #0
 8013706:	d106      	bne.n	8013716 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2200      	movs	r2, #0
 801370c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	2200      	movs	r2, #0
 801165e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011666:	b2db      	uxtb	r3, r3
 8011668:	2b00      	cmp	r3, #0
 801166a:	d106      	bne.n	801167a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2200      	movs	r2, #0
 8011670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f7fc ff4b 	bl	80105ac <HAL_SPI_MspInit>
=======
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f7fc ff4b 	bl	800e510 <HAL_SPI_MspInit>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	2202      	movs	r2, #2
 801371a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	681a      	ldr	r2, [r3, #0]
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801372c:	601a      	str	r2, [r3, #0]
=======
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2202      	movs	r2, #2
 801167e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	681a      	ldr	r2, [r3, #0]
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011690:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
<<<<<<< HEAD
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	685a      	ldr	r2, [r3, #4]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	689b      	ldr	r3, [r3, #8]
 8013736:	431a      	orrs	r2, r3
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	68db      	ldr	r3, [r3, #12]
 801373c:	431a      	orrs	r2, r3
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	691b      	ldr	r3, [r3, #16]
 8013742:	431a      	orrs	r2, r3
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	695b      	ldr	r3, [r3, #20]
 8013748:	431a      	orrs	r2, r3
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	699b      	ldr	r3, [r3, #24]
 801374e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013752:	431a      	orrs	r2, r3
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	69db      	ldr	r3, [r3, #28]
 8013758:	431a      	orrs	r2, r3
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	6a1b      	ldr	r3, [r3, #32]
 801375e:	ea42 0103 	orr.w	r1, r2, r3
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	430a      	orrs	r2, r1
 801376c:	601a      	str	r2, [r3, #0]
=======
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	685a      	ldr	r2, [r3, #4]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	689b      	ldr	r3, [r3, #8]
 801169a:	431a      	orrs	r2, r3
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	68db      	ldr	r3, [r3, #12]
 80116a0:	431a      	orrs	r2, r3
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	691b      	ldr	r3, [r3, #16]
 80116a6:	431a      	orrs	r2, r3
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	695b      	ldr	r3, [r3, #20]
 80116ac:	431a      	orrs	r2, r3
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	699b      	ldr	r3, [r3, #24]
 80116b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80116b6:	431a      	orrs	r2, r3
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	69db      	ldr	r3, [r3, #28]
 80116bc:	431a      	orrs	r2, r3
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6a1b      	ldr	r3, [r3, #32]
 80116c2:	ea42 0103 	orr.w	r1, r2, r3
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	430a      	orrs	r2, r1
 80116d0:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
<<<<<<< HEAD
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	699b      	ldr	r3, [r3, #24]
 8013772:	0c1b      	lsrs	r3, r3, #16
 8013774:	f003 0104 	and.w	r1, r3, #4
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	430a      	orrs	r2, r1
 8013782:	605a      	str	r2, [r3, #4]
=======
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	699b      	ldr	r3, [r3, #24]
 80116d6:	0c1b      	lsrs	r3, r3, #16
 80116d8:	f003 0104 	and.w	r1, r3, #4
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	430a      	orrs	r2, r1
 80116e6:	605a      	str	r2, [r3, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	69da      	ldr	r2, [r3, #28]
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013792:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	2200      	movs	r2, #0
 8013798:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	2201      	movs	r2, #1
 801379e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80137a2:	2300      	movs	r3, #0
}
 80137a4:	4618      	mov	r0, r3
 80137a6:	3708      	adds	r7, #8
 80137a8:	46bd      	mov	sp, r7
 80137aa:	bd80      	pop	{r7, pc}

080137ac <HAL_SPI_Transmit>:
=======
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	69da      	ldr	r2, [r3, #28]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80116f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2200      	movs	r2, #0
 80116fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2201      	movs	r2, #1
 8011702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8011706:	2300      	movs	r3, #0
}
 8011708:	4618      	mov	r0, r3
 801170a:	3708      	adds	r7, #8
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}

08011710 <HAL_SPI_Transmit>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b088      	sub	sp, #32
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	60f8      	str	r0, [r7, #12]
 80137b4:	60b9      	str	r1, [r7, #8]
 80137b6:	603b      	str	r3, [r7, #0]
 80137b8:	4613      	mov	r3, r2
 80137ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80137bc:	2300      	movs	r3, #0
 80137be:	77fb      	strb	r3, [r7, #31]
=======
 8011710:	b580      	push	{r7, lr}
 8011712:	b088      	sub	sp, #32
 8011714:	af00      	add	r7, sp, #0
 8011716:	60f8      	str	r0, [r7, #12]
 8011718:	60b9      	str	r1, [r7, #8]
 801171a:	603b      	str	r3, [r7, #0]
 801171c:	4613      	mov	r3, r2
 801171e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011720:	2300      	movs	r3, #0
 8011722:	77fb      	strb	r3, [r7, #31]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80137c6:	2b01      	cmp	r3, #1
 80137c8:	d101      	bne.n	80137ce <HAL_SPI_Transmit+0x22>
 80137ca:	2302      	movs	r3, #2
 80137cc:	e11e      	b.n	8013a0c <HAL_SPI_Transmit+0x260>
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	2201      	movs	r2, #1
 80137d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80137d6:	f7fd fb27 	bl	8010e28 <HAL_GetTick>
 80137da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80137dc:	88fb      	ldrh	r3, [r7, #6]
 80137de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80137e6:	b2db      	uxtb	r3, r3
 80137e8:	2b01      	cmp	r3, #1
 80137ea:	d002      	beq.n	80137f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80137ec:	2302      	movs	r3, #2
 80137ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80137f0:	e103      	b.n	80139fa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d002      	beq.n	80137fe <HAL_SPI_Transmit+0x52>
 80137f8:	88fb      	ldrh	r3, [r7, #6]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d102      	bne.n	8013804 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80137fe:	2301      	movs	r3, #1
 8013800:	77fb      	strb	r3, [r7, #31]
    goto error;
 8013802:	e0fa      	b.n	80139fa <HAL_SPI_Transmit+0x24e>
=======
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801172a:	2b01      	cmp	r3, #1
 801172c:	d101      	bne.n	8011732 <HAL_SPI_Transmit+0x22>
 801172e:	2302      	movs	r3, #2
 8011730:	e11e      	b.n	8011970 <HAL_SPI_Transmit+0x260>
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	2201      	movs	r2, #1
 8011736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801173a:	f7fd fb27 	bl	800ed8c <HAL_GetTick>
 801173e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8011740:	88fb      	ldrh	r3, [r7, #6]
 8011742:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801174a:	b2db      	uxtb	r3, r3
 801174c:	2b01      	cmp	r3, #1
 801174e:	d002      	beq.n	8011756 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8011750:	2302      	movs	r3, #2
 8011752:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011754:	e103      	b.n	801195e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d002      	beq.n	8011762 <HAL_SPI_Transmit+0x52>
 801175c:	88fb      	ldrh	r3, [r7, #6]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d102      	bne.n	8011768 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8011762:	2301      	movs	r3, #1
 8011764:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011766:	e0fa      	b.n	801195e <HAL_SPI_Transmit+0x24e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
<<<<<<< HEAD
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	2203      	movs	r2, #3
 8013808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	2200      	movs	r2, #0
 8013810:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	68ba      	ldr	r2, [r7, #8]
 8013816:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	88fa      	ldrh	r2, [r7, #6]
 801381c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	88fa      	ldrh	r2, [r7, #6]
 8013822:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	2200      	movs	r2, #0
 8013828:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	2200      	movs	r2, #0
 801382e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	2200      	movs	r2, #0
 8013834:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	2200      	movs	r2, #0
 801383a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	2200      	movs	r2, #0
 8013840:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	689b      	ldr	r3, [r3, #8]
 8013846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801384a:	d107      	bne.n	801385c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	681a      	ldr	r2, [r3, #0]
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801385a:	601a      	str	r2, [r3, #0]
=======
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	2203      	movs	r2, #3
 801176c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	2200      	movs	r2, #0
 8011774:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	68ba      	ldr	r2, [r7, #8]
 801177a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	88fa      	ldrh	r2, [r7, #6]
 8011780:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	88fa      	ldrh	r2, [r7, #6]
 8011786:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	2200      	movs	r2, #0
 801178c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	2200      	movs	r2, #0
 8011792:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	2200      	movs	r2, #0
 8011798:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	2200      	movs	r2, #0
 801179e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2200      	movs	r2, #0
 80117a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	689b      	ldr	r3, [r3, #8]
 80117aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80117ae:	d107      	bne.n	80117c0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80117be:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013866:	2b40      	cmp	r3, #64	; 0x40
 8013868:	d007      	beq.n	801387a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	681a      	ldr	r2, [r3, #0]
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013878:	601a      	str	r2, [r3, #0]
=======
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117ca:	2b40      	cmp	r3, #64	; 0x40
 80117cc:	d007      	beq.n	80117de <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	681a      	ldr	r2, [r3, #0]
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80117dc:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< HEAD
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	68db      	ldr	r3, [r3, #12]
 801387e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013882:	d14b      	bne.n	801391c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	685b      	ldr	r3, [r3, #4]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d002      	beq.n	8013892 <HAL_SPI_Transmit+0xe6>
 801388c:	8afb      	ldrh	r3, [r7, #22]
 801388e:	2b01      	cmp	r3, #1
 8013890:	d13e      	bne.n	8013910 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013896:	881a      	ldrh	r2, [r3, #0]
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138a2:	1c9a      	adds	r2, r3, #2
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	3b01      	subs	r3, #1
 80138b0:	b29a      	uxth	r2, r3
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80138b6:	e02b      	b.n	8013910 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	689b      	ldr	r3, [r3, #8]
 80138be:	f003 0302 	and.w	r3, r3, #2
 80138c2:	2b02      	cmp	r3, #2
 80138c4:	d112      	bne.n	80138ec <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138ca:	881a      	ldrh	r2, [r3, #0]
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138d6:	1c9a      	adds	r2, r3, #2
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80138e0:	b29b      	uxth	r3, r3
 80138e2:	3b01      	subs	r3, #1
 80138e4:	b29a      	uxth	r2, r3
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80138ea:	e011      	b.n	8013910 <HAL_SPI_Transmit+0x164>
=======
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	68db      	ldr	r3, [r3, #12]
 80117e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80117e6:	d14b      	bne.n	8011880 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	685b      	ldr	r3, [r3, #4]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d002      	beq.n	80117f6 <HAL_SPI_Transmit+0xe6>
 80117f0:	8afb      	ldrh	r3, [r7, #22]
 80117f2:	2b01      	cmp	r3, #1
 80117f4:	d13e      	bne.n	8011874 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117fa:	881a      	ldrh	r2, [r3, #0]
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011806:	1c9a      	adds	r2, r3, #2
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011810:	b29b      	uxth	r3, r3
 8011812:	3b01      	subs	r3, #1
 8011814:	b29a      	uxth	r2, r3
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801181a:	e02b      	b.n	8011874 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	689b      	ldr	r3, [r3, #8]
 8011822:	f003 0302 	and.w	r3, r3, #2
 8011826:	2b02      	cmp	r3, #2
 8011828:	d112      	bne.n	8011850 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801182e:	881a      	ldrh	r2, [r3, #0]
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801183a:	1c9a      	adds	r2, r3, #2
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011844:	b29b      	uxth	r3, r3
 8011846:	3b01      	subs	r3, #1
 8011848:	b29a      	uxth	r2, r3
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	86da      	strh	r2, [r3, #54]	; 0x36
 801184e:	e011      	b.n	8011874 <HAL_SPI_Transmit+0x164>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 80138ec:	f7fd fa9c 	bl	8010e28 <HAL_GetTick>
 80138f0:	4602      	mov	r2, r0
 80138f2:	69bb      	ldr	r3, [r7, #24]
 80138f4:	1ad3      	subs	r3, r2, r3
 80138f6:	683a      	ldr	r2, [r7, #0]
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d803      	bhi.n	8013904 <HAL_SPI_Transmit+0x158>
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013902:	d102      	bne.n	801390a <HAL_SPI_Transmit+0x15e>
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d102      	bne.n	8013910 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 801390a:	2303      	movs	r3, #3
 801390c:	77fb      	strb	r3, [r7, #31]
          goto error;
 801390e:	e074      	b.n	80139fa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013914:	b29b      	uxth	r3, r3
 8013916:	2b00      	cmp	r3, #0
 8013918:	d1ce      	bne.n	80138b8 <HAL_SPI_Transmit+0x10c>
 801391a:	e04c      	b.n	80139b6 <HAL_SPI_Transmit+0x20a>
=======
 8011850:	f7fd fa9c 	bl	800ed8c <HAL_GetTick>
 8011854:	4602      	mov	r2, r0
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	1ad3      	subs	r3, r2, r3
 801185a:	683a      	ldr	r2, [r7, #0]
 801185c:	429a      	cmp	r2, r3
 801185e:	d803      	bhi.n	8011868 <HAL_SPI_Transmit+0x158>
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011866:	d102      	bne.n	801186e <HAL_SPI_Transmit+0x15e>
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d102      	bne.n	8011874 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 801186e:	2303      	movs	r3, #3
 8011870:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011872:	e074      	b.n	801195e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011878:	b29b      	uxth	r3, r3
 801187a:	2b00      	cmp	r3, #0
 801187c:	d1ce      	bne.n	801181c <HAL_SPI_Transmit+0x10c>
 801187e:	e04c      	b.n	801191a <HAL_SPI_Transmit+0x20a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	685b      	ldr	r3, [r3, #4]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d002      	beq.n	801392a <HAL_SPI_Transmit+0x17e>
 8013924:	8afb      	ldrh	r3, [r7, #22]
 8013926:	2b01      	cmp	r3, #1
 8013928:	d140      	bne.n	80139ac <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	330c      	adds	r3, #12
 8013934:	7812      	ldrb	r2, [r2, #0]
 8013936:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801393c:	1c5a      	adds	r2, r3, #1
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013946:	b29b      	uxth	r3, r3
 8013948:	3b01      	subs	r3, #1
 801394a:	b29a      	uxth	r2, r3
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8013950:	e02c      	b.n	80139ac <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	689b      	ldr	r3, [r3, #8]
 8013958:	f003 0302 	and.w	r3, r3, #2
 801395c:	2b02      	cmp	r3, #2
 801395e:	d113      	bne.n	8013988 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	330c      	adds	r3, #12
 801396a:	7812      	ldrb	r2, [r2, #0]
 801396c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013972:	1c5a      	adds	r2, r3, #1
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801397c:	b29b      	uxth	r3, r3
 801397e:	3b01      	subs	r3, #1
 8013980:	b29a      	uxth	r2, r3
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	86da      	strh	r2, [r3, #54]	; 0x36
 8013986:	e011      	b.n	80139ac <HAL_SPI_Transmit+0x200>
=======
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d002      	beq.n	801188e <HAL_SPI_Transmit+0x17e>
 8011888:	8afb      	ldrh	r3, [r7, #22]
 801188a:	2b01      	cmp	r3, #1
 801188c:	d140      	bne.n	8011910 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	330c      	adds	r3, #12
 8011898:	7812      	ldrb	r2, [r2, #0]
 801189a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118a0:	1c5a      	adds	r2, r3, #1
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80118aa:	b29b      	uxth	r3, r3
 80118ac:	3b01      	subs	r3, #1
 80118ae:	b29a      	uxth	r2, r3
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80118b4:	e02c      	b.n	8011910 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	689b      	ldr	r3, [r3, #8]
 80118bc:	f003 0302 	and.w	r3, r3, #2
 80118c0:	2b02      	cmp	r3, #2
 80118c2:	d113      	bne.n	80118ec <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	330c      	adds	r3, #12
 80118ce:	7812      	ldrb	r2, [r2, #0]
 80118d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118d6:	1c5a      	adds	r2, r3, #1
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	3b01      	subs	r3, #1
 80118e4:	b29a      	uxth	r2, r3
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80118ea:	e011      	b.n	8011910 <HAL_SPI_Transmit+0x200>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8013988:	f7fd fa4e 	bl	8010e28 <HAL_GetTick>
 801398c:	4602      	mov	r2, r0
 801398e:	69bb      	ldr	r3, [r7, #24]
 8013990:	1ad3      	subs	r3, r2, r3
 8013992:	683a      	ldr	r2, [r7, #0]
 8013994:	429a      	cmp	r2, r3
 8013996:	d803      	bhi.n	80139a0 <HAL_SPI_Transmit+0x1f4>
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801399e:	d102      	bne.n	80139a6 <HAL_SPI_Transmit+0x1fa>
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d102      	bne.n	80139ac <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80139a6:	2303      	movs	r3, #3
 80139a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80139aa:	e026      	b.n	80139fa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80139b0:	b29b      	uxth	r3, r3
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d1cd      	bne.n	8013952 <HAL_SPI_Transmit+0x1a6>
=======
 80118ec:	f7fd fa4e 	bl	800ed8c <HAL_GetTick>
 80118f0:	4602      	mov	r2, r0
 80118f2:	69bb      	ldr	r3, [r7, #24]
 80118f4:	1ad3      	subs	r3, r2, r3
 80118f6:	683a      	ldr	r2, [r7, #0]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d803      	bhi.n	8011904 <HAL_SPI_Transmit+0x1f4>
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011902:	d102      	bne.n	801190a <HAL_SPI_Transmit+0x1fa>
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d102      	bne.n	8011910 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 801190a:	2303      	movs	r3, #3
 801190c:	77fb      	strb	r3, [r7, #31]
          goto error;
 801190e:	e026      	b.n	801195e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011914:	b29b      	uxth	r3, r3
 8011916:	2b00      	cmp	r3, #0
 8011918:	d1cd      	bne.n	80118b6 <HAL_SPI_Transmit+0x1a6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 80139b6:	69ba      	ldr	r2, [r7, #24]
 80139b8:	6839      	ldr	r1, [r7, #0]
 80139ba:	68f8      	ldr	r0, [r7, #12]
 80139bc:	f000 fba4 	bl	8014108 <SPI_EndRxTxTransaction>
 80139c0:	4603      	mov	r3, r0
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d002      	beq.n	80139cc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	2220      	movs	r2, #32
 80139ca:	655a      	str	r2, [r3, #84]	; 0x54
=======
 801191a:	69ba      	ldr	r2, [r7, #24]
 801191c:	6839      	ldr	r1, [r7, #0]
 801191e:	68f8      	ldr	r0, [r7, #12]
 8011920:	f000 fba4 	bl	801206c <SPI_EndRxTxTransaction>
 8011924:	4603      	mov	r3, r0
 8011926:	2b00      	cmp	r3, #0
 8011928:	d002      	beq.n	8011930 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	2220      	movs	r2, #32
 801192e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	689b      	ldr	r3, [r3, #8]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d10a      	bne.n	80139ea <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80139d4:	2300      	movs	r3, #0
 80139d6:	613b      	str	r3, [r7, #16]
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	68db      	ldr	r3, [r3, #12]
 80139de:	613b      	str	r3, [r7, #16]
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	689b      	ldr	r3, [r3, #8]
 80139e6:	613b      	str	r3, [r7, #16]
 80139e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d002      	beq.n	80139f8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80139f2:	2301      	movs	r3, #1
 80139f4:	77fb      	strb	r3, [r7, #31]
 80139f6:	e000      	b.n	80139fa <HAL_SPI_Transmit+0x24e>
  }

error:
 80139f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	2201      	movs	r2, #1
 80139fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	2200      	movs	r2, #0
 8013a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013a0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	3720      	adds	r7, #32
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd80      	pop	{r7, pc}

08013a14 <HAL_SPI_Receive>:
=======
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	689b      	ldr	r3, [r3, #8]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d10a      	bne.n	801194e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011938:	2300      	movs	r3, #0
 801193a:	613b      	str	r3, [r7, #16]
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	68db      	ldr	r3, [r3, #12]
 8011942:	613b      	str	r3, [r7, #16]
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	689b      	ldr	r3, [r3, #8]
 801194a:	613b      	str	r3, [r7, #16]
 801194c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011952:	2b00      	cmp	r3, #0
 8011954:	d002      	beq.n	801195c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8011956:	2301      	movs	r3, #1
 8011958:	77fb      	strb	r3, [r7, #31]
 801195a:	e000      	b.n	801195e <HAL_SPI_Transmit+0x24e>
  }

error:
 801195c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	2201      	movs	r2, #1
 8011962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	2200      	movs	r2, #0
 801196a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801196e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011970:	4618      	mov	r0, r3
 8011972:	3720      	adds	r7, #32
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}

08011978 <HAL_SPI_Receive>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b088      	sub	sp, #32
 8013a18:	af02      	add	r7, sp, #8
 8013a1a:	60f8      	str	r0, [r7, #12]
 8013a1c:	60b9      	str	r1, [r7, #8]
 8013a1e:	603b      	str	r3, [r7, #0]
 8013a20:	4613      	mov	r3, r2
 8013a22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013a24:	2300      	movs	r3, #0
 8013a26:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	685b      	ldr	r3, [r3, #4]
 8013a2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013a30:	d112      	bne.n	8013a58 <HAL_SPI_Receive+0x44>
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	689b      	ldr	r3, [r3, #8]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d10e      	bne.n	8013a58 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	2204      	movs	r2, #4
 8013a3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8013a42:	88fa      	ldrh	r2, [r7, #6]
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	9300      	str	r3, [sp, #0]
 8013a48:	4613      	mov	r3, r2
 8013a4a:	68ba      	ldr	r2, [r7, #8]
 8013a4c:	68b9      	ldr	r1, [r7, #8]
 8013a4e:	68f8      	ldr	r0, [r7, #12]
 8013a50:	f000 f8e9 	bl	8013c26 <HAL_SPI_TransmitReceive>
 8013a54:	4603      	mov	r3, r0
 8013a56:	e0e2      	b.n	8013c1e <HAL_SPI_Receive+0x20a>
=======
 8011978:	b580      	push	{r7, lr}
 801197a:	b088      	sub	sp, #32
 801197c:	af02      	add	r7, sp, #8
 801197e:	60f8      	str	r0, [r7, #12]
 8011980:	60b9      	str	r1, [r7, #8]
 8011982:	603b      	str	r3, [r7, #0]
 8011984:	4613      	mov	r3, r2
 8011986:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011988:	2300      	movs	r3, #0
 801198a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011994:	d112      	bne.n	80119bc <HAL_SPI_Receive+0x44>
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	689b      	ldr	r3, [r3, #8]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d10e      	bne.n	80119bc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	2204      	movs	r2, #4
 80119a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80119a6:	88fa      	ldrh	r2, [r7, #6]
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	9300      	str	r3, [sp, #0]
 80119ac:	4613      	mov	r3, r2
 80119ae:	68ba      	ldr	r2, [r7, #8]
 80119b0:	68b9      	ldr	r1, [r7, #8]
 80119b2:	68f8      	ldr	r0, [r7, #12]
 80119b4:	f000 f8e9 	bl	8011b8a <HAL_SPI_TransmitReceive>
 80119b8:	4603      	mov	r3, r0
 80119ba:	e0e2      	b.n	8011b82 <HAL_SPI_Receive+0x20a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013a5e:	2b01      	cmp	r3, #1
 8013a60:	d101      	bne.n	8013a66 <HAL_SPI_Receive+0x52>
 8013a62:	2302      	movs	r3, #2
 8013a64:	e0db      	b.n	8013c1e <HAL_SPI_Receive+0x20a>
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	2201      	movs	r2, #1
 8013a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013a6e:	f7fd f9db 	bl	8010e28 <HAL_GetTick>
 8013a72:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a7a:	b2db      	uxtb	r3, r3
 8013a7c:	2b01      	cmp	r3, #1
 8013a7e:	d002      	beq.n	8013a86 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8013a80:	2302      	movs	r3, #2
 8013a82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013a84:	e0c2      	b.n	8013c0c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8013a86:	68bb      	ldr	r3, [r7, #8]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d002      	beq.n	8013a92 <HAL_SPI_Receive+0x7e>
 8013a8c:	88fb      	ldrh	r3, [r7, #6]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d102      	bne.n	8013a98 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8013a92:	2301      	movs	r3, #1
 8013a94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013a96:	e0b9      	b.n	8013c0c <HAL_SPI_Receive+0x1f8>
=======
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80119c2:	2b01      	cmp	r3, #1
 80119c4:	d101      	bne.n	80119ca <HAL_SPI_Receive+0x52>
 80119c6:	2302      	movs	r3, #2
 80119c8:	e0db      	b.n	8011b82 <HAL_SPI_Receive+0x20a>
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	2201      	movs	r2, #1
 80119ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80119d2:	f7fd f9db 	bl	800ed8c <HAL_GetTick>
 80119d6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80119de:	b2db      	uxtb	r3, r3
 80119e0:	2b01      	cmp	r3, #1
 80119e2:	d002      	beq.n	80119ea <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80119e4:	2302      	movs	r3, #2
 80119e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80119e8:	e0c2      	b.n	8011b70 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d002      	beq.n	80119f6 <HAL_SPI_Receive+0x7e>
 80119f0:	88fb      	ldrh	r3, [r7, #6]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d102      	bne.n	80119fc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80119f6:	2301      	movs	r3, #1
 80119f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80119fa:	e0b9      	b.n	8011b70 <HAL_SPI_Receive+0x1f8>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
<<<<<<< HEAD
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	2204      	movs	r2, #4
 8013a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	68ba      	ldr	r2, [r7, #8]
 8013aaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	88fa      	ldrh	r2, [r7, #6]
 8013ab0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	88fa      	ldrh	r2, [r7, #6]
 8013ab6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	2200      	movs	r2, #0
 8013abc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	2200      	movs	r2, #0
 8013ace:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	2204      	movs	r2, #4
 8011a00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	2200      	movs	r2, #0
 8011a08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	68ba      	ldr	r2, [r7, #8]
 8011a0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	88fa      	ldrh	r2, [r7, #6]
 8011a14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	88fa      	ldrh	r2, [r7, #6]
 8011a1a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	2200      	movs	r2, #0
 8011a26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	2200      	movs	r2, #0
 8011a32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	2200      	movs	r2, #0
 8011a38:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
<<<<<<< HEAD
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	689b      	ldr	r3, [r3, #8]
 8013ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013ade:	d107      	bne.n	8013af0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	681a      	ldr	r2, [r3, #0]
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013aee:	601a      	str	r2, [r3, #0]
=======
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	689b      	ldr	r3, [r3, #8]
 8011a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a42:	d107      	bne.n	8011a54 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	681a      	ldr	r2, [r3, #0]
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011a52:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013afa:	2b40      	cmp	r3, #64	; 0x40
 8013afc:	d007      	beq.n	8013b0e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	681a      	ldr	r2, [r3, #0]
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013b0c:	601a      	str	r2, [r3, #0]
=======
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a5e:	2b40      	cmp	r3, #64	; 0x40
 8011a60:	d007      	beq.n	8011a72 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	681a      	ldr	r2, [r3, #0]
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011a70:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
<<<<<<< HEAD
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	68db      	ldr	r3, [r3, #12]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d162      	bne.n	8013bdc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8013b16:	e02e      	b.n	8013b76 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	689b      	ldr	r3, [r3, #8]
 8013b1e:	f003 0301 	and.w	r3, r3, #1
 8013b22:	2b01      	cmp	r3, #1
 8013b24:	d115      	bne.n	8013b52 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	f103 020c 	add.w	r2, r3, #12
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b32:	7812      	ldrb	r2, [r2, #0]
 8013b34:	b2d2      	uxtb	r2, r2
 8013b36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b3c:	1c5a      	adds	r2, r3, #1
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b46:	b29b      	uxth	r3, r3
 8013b48:	3b01      	subs	r3, #1
 8013b4a:	b29a      	uxth	r2, r3
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013b50:	e011      	b.n	8013b76 <HAL_SPI_Receive+0x162>
=======
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	68db      	ldr	r3, [r3, #12]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d162      	bne.n	8011b40 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8011a7a:	e02e      	b.n	8011ada <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	689b      	ldr	r3, [r3, #8]
 8011a82:	f003 0301 	and.w	r3, r3, #1
 8011a86:	2b01      	cmp	r3, #1
 8011a88:	d115      	bne.n	8011ab6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	f103 020c 	add.w	r2, r3, #12
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a96:	7812      	ldrb	r2, [r2, #0]
 8011a98:	b2d2      	uxtb	r2, r2
 8011a9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011aa0:	1c5a      	adds	r2, r3, #1
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011aaa:	b29b      	uxth	r3, r3
 8011aac:	3b01      	subs	r3, #1
 8011aae:	b29a      	uxth	r2, r3
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011ab4:	e011      	b.n	8011ada <HAL_SPI_Receive+0x162>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8013b52:	f7fd f969 	bl	8010e28 <HAL_GetTick>
 8013b56:	4602      	mov	r2, r0
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	1ad3      	subs	r3, r2, r3
 8013b5c:	683a      	ldr	r2, [r7, #0]
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d803      	bhi.n	8013b6a <HAL_SPI_Receive+0x156>
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b68:	d102      	bne.n	8013b70 <HAL_SPI_Receive+0x15c>
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d102      	bne.n	8013b76 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8013b70:	2303      	movs	r3, #3
 8013b72:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013b74:	e04a      	b.n	8013c0c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b7a:	b29b      	uxth	r3, r3
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d1cb      	bne.n	8013b18 <HAL_SPI_Receive+0x104>
 8013b80:	e031      	b.n	8013be6 <HAL_SPI_Receive+0x1d2>
=======
 8011ab6:	f7fd f969 	bl	800ed8c <HAL_GetTick>
 8011aba:	4602      	mov	r2, r0
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	1ad3      	subs	r3, r2, r3
 8011ac0:	683a      	ldr	r2, [r7, #0]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d803      	bhi.n	8011ace <HAL_SPI_Receive+0x156>
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011acc:	d102      	bne.n	8011ad4 <HAL_SPI_Receive+0x15c>
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d102      	bne.n	8011ada <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8011ad4:	2303      	movs	r3, #3
 8011ad6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8011ad8:	e04a      	b.n	8011b70 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011ade:	b29b      	uxth	r3, r3
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d1cb      	bne.n	8011a7c <HAL_SPI_Receive+0x104>
 8011ae4:	e031      	b.n	8011b4a <HAL_SPI_Receive+0x1d2>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
<<<<<<< HEAD
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	689b      	ldr	r3, [r3, #8]
 8013b88:	f003 0301 	and.w	r3, r3, #1
 8013b8c:	2b01      	cmp	r3, #1
 8013b8e:	d113      	bne.n	8013bb8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	68da      	ldr	r2, [r3, #12]
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b9a:	b292      	uxth	r2, r2
 8013b9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ba2:	1c9a      	adds	r2, r3, #2
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013bac:	b29b      	uxth	r3, r3
 8013bae:	3b01      	subs	r3, #1
 8013bb0:	b29a      	uxth	r2, r3
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013bb6:	e011      	b.n	8013bdc <HAL_SPI_Receive+0x1c8>
=======
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	689b      	ldr	r3, [r3, #8]
 8011aec:	f003 0301 	and.w	r3, r3, #1
 8011af0:	2b01      	cmp	r3, #1
 8011af2:	d113      	bne.n	8011b1c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	68da      	ldr	r2, [r3, #12]
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011afe:	b292      	uxth	r2, r2
 8011b00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b06:	1c9a      	adds	r2, r3, #2
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011b10:	b29b      	uxth	r3, r3
 8011b12:	3b01      	subs	r3, #1
 8011b14:	b29a      	uxth	r2, r3
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011b1a:	e011      	b.n	8011b40 <HAL_SPI_Receive+0x1c8>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8013bb8:	f7fd f936 	bl	8010e28 <HAL_GetTick>
 8013bbc:	4602      	mov	r2, r0
 8013bbe:	693b      	ldr	r3, [r7, #16]
 8013bc0:	1ad3      	subs	r3, r2, r3
 8013bc2:	683a      	ldr	r2, [r7, #0]
 8013bc4:	429a      	cmp	r2, r3
 8013bc6:	d803      	bhi.n	8013bd0 <HAL_SPI_Receive+0x1bc>
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bce:	d102      	bne.n	8013bd6 <HAL_SPI_Receive+0x1c2>
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d102      	bne.n	8013bdc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8013bd6:	2303      	movs	r3, #3
 8013bd8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013bda:	e017      	b.n	8013c0c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013be0:	b29b      	uxth	r3, r3
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d1cd      	bne.n	8013b82 <HAL_SPI_Receive+0x16e>
=======
 8011b1c:	f7fd f936 	bl	800ed8c <HAL_GetTick>
 8011b20:	4602      	mov	r2, r0
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	1ad3      	subs	r3, r2, r3
 8011b26:	683a      	ldr	r2, [r7, #0]
 8011b28:	429a      	cmp	r2, r3
 8011b2a:	d803      	bhi.n	8011b34 <HAL_SPI_Receive+0x1bc>
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b32:	d102      	bne.n	8011b3a <HAL_SPI_Receive+0x1c2>
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d102      	bne.n	8011b40 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8011b3a:	2303      	movs	r3, #3
 8011b3c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8011b3e:	e017      	b.n	8011b70 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d1cd      	bne.n	8011ae6 <HAL_SPI_Receive+0x16e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8013be6:	693a      	ldr	r2, [r7, #16]
 8013be8:	6839      	ldr	r1, [r7, #0]
 8013bea:	68f8      	ldr	r0, [r7, #12]
 8013bec:	f000 fa27 	bl	801403e <SPI_EndRxTransaction>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d002      	beq.n	8013bfc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	2220      	movs	r2, #32
 8013bfa:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8011b4a:	693a      	ldr	r2, [r7, #16]
 8011b4c:	6839      	ldr	r1, [r7, #0]
 8011b4e:	68f8      	ldr	r0, [r7, #12]
 8011b50:	f000 fa27 	bl	8011fa2 <SPI_EndRxTransaction>
 8011b54:	4603      	mov	r3, r0
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d002      	beq.n	8011b60 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	2220      	movs	r2, #32
 8011b5e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
<<<<<<< HEAD
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d002      	beq.n	8013c0a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8013c04:	2301      	movs	r3, #1
 8013c06:	75fb      	strb	r3, [r7, #23]
 8013c08:	e000      	b.n	8013c0c <HAL_SPI_Receive+0x1f8>
  }

error :
 8013c0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	2201      	movs	r2, #1
 8013c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	2200      	movs	r2, #0
 8013c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c1e:	4618      	mov	r0, r3
 8013c20:	3718      	adds	r7, #24
 8013c22:	46bd      	mov	sp, r7
 8013c24:	bd80      	pop	{r7, pc}

08013c26 <HAL_SPI_TransmitReceive>:
=======
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d002      	beq.n	8011b6e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8011b68:	2301      	movs	r3, #1
 8011b6a:	75fb      	strb	r3, [r7, #23]
 8011b6c:	e000      	b.n	8011b70 <HAL_SPI_Receive+0x1f8>
  }

error :
 8011b6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	2201      	movs	r2, #1
 8011b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b82:	4618      	mov	r0, r3
 8011b84:	3718      	adds	r7, #24
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}

08011b8a <HAL_SPI_TransmitReceive>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
<<<<<<< HEAD
 8013c26:	b580      	push	{r7, lr}
 8013c28:	b08c      	sub	sp, #48	; 0x30
 8013c2a:	af00      	add	r7, sp, #0
 8013c2c:	60f8      	str	r0, [r7, #12]
 8013c2e:	60b9      	str	r1, [r7, #8]
 8013c30:	607a      	str	r2, [r7, #4]
 8013c32:	807b      	strh	r3, [r7, #2]
=======
 8011b8a:	b580      	push	{r7, lr}
 8011b8c:	b08c      	sub	sp, #48	; 0x30
 8011b8e:	af00      	add	r7, sp, #0
 8011b90:	60f8      	str	r0, [r7, #12]
 8011b92:	60b9      	str	r1, [r7, #8]
 8011b94:	607a      	str	r2, [r7, #4]
 8011b96:	807b      	strh	r3, [r7, #2]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
<<<<<<< HEAD
 8013c34:	2301      	movs	r3, #1
 8013c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013c38:	2300      	movs	r3, #0
 8013c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
=======
 8011b98:	2301      	movs	r3, #1
 8011b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013c44:	2b01      	cmp	r3, #1
 8013c46:	d101      	bne.n	8013c4c <HAL_SPI_TransmitReceive+0x26>
 8013c48:	2302      	movs	r3, #2
 8013c4a:	e18a      	b.n	8013f62 <HAL_SPI_TransmitReceive+0x33c>
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	2201      	movs	r2, #1
 8013c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013c54:	f7fd f8e8 	bl	8010e28 <HAL_GetTick>
 8013c58:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	685b      	ldr	r3, [r3, #4]
 8013c68:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8013c6a:	887b      	ldrh	r3, [r7, #2]
 8013c6c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013c6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013c72:	2b01      	cmp	r3, #1
 8013c74:	d00f      	beq.n	8013c96 <HAL_SPI_TransmitReceive+0x70>
 8013c76:	69fb      	ldr	r3, [r7, #28]
 8013c78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013c7c:	d107      	bne.n	8013c8e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	689b      	ldr	r3, [r3, #8]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d103      	bne.n	8013c8e <HAL_SPI_TransmitReceive+0x68>
 8013c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013c8a:	2b04      	cmp	r3, #4
 8013c8c:	d003      	beq.n	8013c96 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8013c8e:	2302      	movs	r3, #2
 8013c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013c94:	e15b      	b.n	8013f4e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013c96:	68bb      	ldr	r3, [r7, #8]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d005      	beq.n	8013ca8 <HAL_SPI_TransmitReceive+0x82>
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d002      	beq.n	8013ca8 <HAL_SPI_TransmitReceive+0x82>
 8013ca2:	887b      	ldrh	r3, [r7, #2]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d103      	bne.n	8013cb0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8013ca8:	2301      	movs	r3, #1
 8013caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013cae:	e14e      	b.n	8013f4e <HAL_SPI_TransmitReceive+0x328>
=======
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011ba8:	2b01      	cmp	r3, #1
 8011baa:	d101      	bne.n	8011bb0 <HAL_SPI_TransmitReceive+0x26>
 8011bac:	2302      	movs	r3, #2
 8011bae:	e18a      	b.n	8011ec6 <HAL_SPI_TransmitReceive+0x33c>
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	2201      	movs	r2, #1
 8011bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011bb8:	f7fd f8e8 	bl	800ed8c <HAL_GetTick>
 8011bbc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	685b      	ldr	r3, [r3, #4]
 8011bcc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8011bce:	887b      	ldrh	r3, [r7, #2]
 8011bd0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011bd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011bd6:	2b01      	cmp	r3, #1
 8011bd8:	d00f      	beq.n	8011bfa <HAL_SPI_TransmitReceive+0x70>
 8011bda:	69fb      	ldr	r3, [r7, #28]
 8011bdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011be0:	d107      	bne.n	8011bf2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	689b      	ldr	r3, [r3, #8]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d103      	bne.n	8011bf2 <HAL_SPI_TransmitReceive+0x68>
 8011bea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011bee:	2b04      	cmp	r3, #4
 8011bf0:	d003      	beq.n	8011bfa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8011bf2:	2302      	movs	r3, #2
 8011bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8011bf8:	e15b      	b.n	8011eb2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011bfa:	68bb      	ldr	r3, [r7, #8]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d005      	beq.n	8011c0c <HAL_SPI_TransmitReceive+0x82>
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d002      	beq.n	8011c0c <HAL_SPI_TransmitReceive+0x82>
 8011c06:	887b      	ldrh	r3, [r7, #2]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d103      	bne.n	8011c14 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8011c12:	e14e      	b.n	8011eb2 <HAL_SPI_TransmitReceive+0x328>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
<<<<<<< HEAD
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013cb6:	b2db      	uxtb	r3, r3
 8013cb8:	2b04      	cmp	r3, #4
 8013cba:	d003      	beq.n	8013cc4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	2205      	movs	r2, #5
 8013cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011c1a:	b2db      	uxtb	r3, r3
 8011c1c:	2b04      	cmp	r3, #4
 8011c1e:	d003      	beq.n	8011c28 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2205      	movs	r2, #5
 8011c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
<<<<<<< HEAD
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	687a      	ldr	r2, [r7, #4]
 8013cce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	887a      	ldrh	r2, [r7, #2]
 8013cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	887a      	ldrh	r2, [r7, #2]
 8013cda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	68ba      	ldr	r2, [r7, #8]
 8013ce0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	887a      	ldrh	r2, [r7, #2]
 8013ce6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	887a      	ldrh	r2, [r7, #2]
 8013cec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	687a      	ldr	r2, [r7, #4]
 8011c32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	887a      	ldrh	r2, [r7, #2]
 8011c38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	887a      	ldrh	r2, [r7, #2]
 8011c3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	68ba      	ldr	r2, [r7, #8]
 8011c44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	887a      	ldrh	r2, [r7, #2]
 8011c4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	887a      	ldrh	r2, [r7, #2]
 8011c50:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	2200      	movs	r2, #0
 8011c56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d04:	2b40      	cmp	r3, #64	; 0x40
 8013d06:	d007      	beq.n	8013d18 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	681a      	ldr	r2, [r3, #0]
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013d16:	601a      	str	r2, [r3, #0]
=======
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c68:	2b40      	cmp	r3, #64	; 0x40
 8011c6a:	d007      	beq.n	8011c7c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011c7a:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< HEAD
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	68db      	ldr	r3, [r3, #12]
 8013d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013d20:	d178      	bne.n	8013e14 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	685b      	ldr	r3, [r3, #4]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d002      	beq.n	8013d30 <HAL_SPI_TransmitReceive+0x10a>
 8013d2a:	8b7b      	ldrh	r3, [r7, #26]
 8013d2c:	2b01      	cmp	r3, #1
 8013d2e:	d166      	bne.n	8013dfe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d34:	881a      	ldrh	r2, [r3, #0]
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d40:	1c9a      	adds	r2, r3, #2
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013d4a:	b29b      	uxth	r3, r3
 8013d4c:	3b01      	subs	r3, #1
 8013d4e:	b29a      	uxth	r2, r3
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013d54:	e053      	b.n	8013dfe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	689b      	ldr	r3, [r3, #8]
 8013d5c:	f003 0302 	and.w	r3, r3, #2
 8013d60:	2b02      	cmp	r3, #2
 8013d62:	d11b      	bne.n	8013d9c <HAL_SPI_TransmitReceive+0x176>
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013d68:	b29b      	uxth	r3, r3
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d016      	beq.n	8013d9c <HAL_SPI_TransmitReceive+0x176>
 8013d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d70:	2b01      	cmp	r3, #1
 8013d72:	d113      	bne.n	8013d9c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d78:	881a      	ldrh	r2, [r3, #0]
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d84:	1c9a      	adds	r2, r3, #2
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013d8e:	b29b      	uxth	r3, r3
 8013d90:	3b01      	subs	r3, #1
 8013d92:	b29a      	uxth	r2, r3
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013d98:	2300      	movs	r3, #0
 8013d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	68db      	ldr	r3, [r3, #12]
 8011c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011c84:	d178      	bne.n	8011d78 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d002      	beq.n	8011c94 <HAL_SPI_TransmitReceive+0x10a>
 8011c8e:	8b7b      	ldrh	r3, [r7, #26]
 8011c90:	2b01      	cmp	r3, #1
 8011c92:	d166      	bne.n	8011d62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c98:	881a      	ldrh	r2, [r3, #0]
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ca4:	1c9a      	adds	r2, r3, #2
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011cae:	b29b      	uxth	r3, r3
 8011cb0:	3b01      	subs	r3, #1
 8011cb2:	b29a      	uxth	r2, r3
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011cb8:	e053      	b.n	8011d62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	689b      	ldr	r3, [r3, #8]
 8011cc0:	f003 0302 	and.w	r3, r3, #2
 8011cc4:	2b02      	cmp	r3, #2
 8011cc6:	d11b      	bne.n	8011d00 <HAL_SPI_TransmitReceive+0x176>
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d016      	beq.n	8011d00 <HAL_SPI_TransmitReceive+0x176>
 8011cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd4:	2b01      	cmp	r3, #1
 8011cd6:	d113      	bne.n	8011d00 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cdc:	881a      	ldrh	r2, [r3, #0]
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ce8:	1c9a      	adds	r2, r3, #2
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011cf2:	b29b      	uxth	r3, r3
 8011cf4:	3b01      	subs	r3, #1
 8011cf6:	b29a      	uxth	r2, r3
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	689b      	ldr	r3, [r3, #8]
 8013da2:	f003 0301 	and.w	r3, r3, #1
 8013da6:	2b01      	cmp	r3, #1
 8013da8:	d119      	bne.n	8013dde <HAL_SPI_TransmitReceive+0x1b8>
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013dae:	b29b      	uxth	r3, r3
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d014      	beq.n	8013dde <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	68da      	ldr	r2, [r3, #12]
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dbe:	b292      	uxth	r2, r2
 8013dc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dc6:	1c9a      	adds	r2, r3, #2
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013dd0:	b29b      	uxth	r3, r3
 8013dd2:	3b01      	subs	r3, #1
 8013dd4:	b29a      	uxth	r2, r3
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013dda:	2301      	movs	r3, #1
 8013ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013dde:	f7fd f823 	bl	8010e28 <HAL_GetTick>
 8013de2:	4602      	mov	r2, r0
 8013de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de6:	1ad3      	subs	r3, r2, r3
 8013de8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d807      	bhi.n	8013dfe <HAL_SPI_TransmitReceive+0x1d8>
 8013dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013df4:	d003      	beq.n	8013dfe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013df6:	2303      	movs	r3, #3
 8013df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013dfc:	e0a7      	b.n	8013f4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013e02:	b29b      	uxth	r3, r3
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d1a6      	bne.n	8013d56 <HAL_SPI_TransmitReceive+0x130>
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013e0c:	b29b      	uxth	r3, r3
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d1a1      	bne.n	8013d56 <HAL_SPI_TransmitReceive+0x130>
 8013e12:	e07c      	b.n	8013f0e <HAL_SPI_TransmitReceive+0x2e8>
=======
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	689b      	ldr	r3, [r3, #8]
 8011d06:	f003 0301 	and.w	r3, r3, #1
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	d119      	bne.n	8011d42 <HAL_SPI_TransmitReceive+0x1b8>
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011d12:	b29b      	uxth	r3, r3
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d014      	beq.n	8011d42 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	68da      	ldr	r2, [r3, #12]
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d22:	b292      	uxth	r2, r2
 8011d24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d2a:	1c9a      	adds	r2, r3, #2
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011d34:	b29b      	uxth	r3, r3
 8011d36:	3b01      	subs	r3, #1
 8011d38:	b29a      	uxth	r2, r3
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011d3e:	2301      	movs	r3, #1
 8011d40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011d42:	f7fd f823 	bl	800ed8c <HAL_GetTick>
 8011d46:	4602      	mov	r2, r0
 8011d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4a:	1ad3      	subs	r3, r2, r3
 8011d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d807      	bhi.n	8011d62 <HAL_SPI_TransmitReceive+0x1d8>
 8011d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d58:	d003      	beq.n	8011d62 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8011d5a:	2303      	movs	r3, #3
 8011d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011d60:	e0a7      	b.n	8011eb2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011d66:	b29b      	uxth	r3, r3
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d1a6      	bne.n	8011cba <HAL_SPI_TransmitReceive+0x130>
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d1a1      	bne.n	8011cba <HAL_SPI_TransmitReceive+0x130>
 8011d76:	e07c      	b.n	8011e72 <HAL_SPI_TransmitReceive+0x2e8>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	685b      	ldr	r3, [r3, #4]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d002      	beq.n	8013e22 <HAL_SPI_TransmitReceive+0x1fc>
 8013e1c:	8b7b      	ldrh	r3, [r7, #26]
 8013e1e:	2b01      	cmp	r3, #1
 8013e20:	d16b      	bne.n	8013efa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	330c      	adds	r3, #12
 8013e2c:	7812      	ldrb	r2, [r2, #0]
 8013e2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e34:	1c5a      	adds	r2, r3, #1
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013e3e:	b29b      	uxth	r3, r3
 8013e40:	3b01      	subs	r3, #1
 8013e42:	b29a      	uxth	r2, r3
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013e48:	e057      	b.n	8013efa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	689b      	ldr	r3, [r3, #8]
 8013e50:	f003 0302 	and.w	r3, r3, #2
 8013e54:	2b02      	cmp	r3, #2
 8013e56:	d11c      	bne.n	8013e92 <HAL_SPI_TransmitReceive+0x26c>
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013e5c:	b29b      	uxth	r3, r3
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d017      	beq.n	8013e92 <HAL_SPI_TransmitReceive+0x26c>
 8013e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e64:	2b01      	cmp	r3, #1
 8013e66:	d114      	bne.n	8013e92 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	330c      	adds	r3, #12
 8013e72:	7812      	ldrb	r2, [r2, #0]
 8013e74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e7a:	1c5a      	adds	r2, r3, #1
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013e84:	b29b      	uxth	r3, r3
 8013e86:	3b01      	subs	r3, #1
 8013e88:	b29a      	uxth	r2, r3
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013e8e:	2300      	movs	r3, #0
 8013e90:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	685b      	ldr	r3, [r3, #4]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d002      	beq.n	8011d86 <HAL_SPI_TransmitReceive+0x1fc>
 8011d80:	8b7b      	ldrh	r3, [r7, #26]
 8011d82:	2b01      	cmp	r3, #1
 8011d84:	d16b      	bne.n	8011e5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	330c      	adds	r3, #12
 8011d90:	7812      	ldrb	r2, [r2, #0]
 8011d92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d98:	1c5a      	adds	r2, r3, #1
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011da2:	b29b      	uxth	r3, r3
 8011da4:	3b01      	subs	r3, #1
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011dac:	e057      	b.n	8011e5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	689b      	ldr	r3, [r3, #8]
 8011db4:	f003 0302 	and.w	r3, r3, #2
 8011db8:	2b02      	cmp	r3, #2
 8011dba:	d11c      	bne.n	8011df6 <HAL_SPI_TransmitReceive+0x26c>
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d017      	beq.n	8011df6 <HAL_SPI_TransmitReceive+0x26c>
 8011dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc8:	2b01      	cmp	r3, #1
 8011dca:	d114      	bne.n	8011df6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	330c      	adds	r3, #12
 8011dd6:	7812      	ldrb	r2, [r2, #0]
 8011dd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dde:	1c5a      	adds	r2, r3, #1
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	3b01      	subs	r3, #1
 8011dec:	b29a      	uxth	r2, r3
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011df2:	2300      	movs	r3, #0
 8011df4:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	689b      	ldr	r3, [r3, #8]
 8013e98:	f003 0301 	and.w	r3, r3, #1
 8013e9c:	2b01      	cmp	r3, #1
 8013e9e:	d119      	bne.n	8013ed4 <HAL_SPI_TransmitReceive+0x2ae>
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013ea4:	b29b      	uxth	r3, r3
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d014      	beq.n	8013ed4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	68da      	ldr	r2, [r3, #12]
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013eb4:	b2d2      	uxtb	r2, r2
 8013eb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ebc:	1c5a      	adds	r2, r3, #1
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013ec6:	b29b      	uxth	r3, r3
 8013ec8:	3b01      	subs	r3, #1
 8013eca:	b29a      	uxth	r2, r3
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013ed4:	f7fc ffa8 	bl	8010e28 <HAL_GetTick>
 8013ed8:	4602      	mov	r2, r0
 8013eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013edc:	1ad3      	subs	r3, r2, r3
 8013ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ee0:	429a      	cmp	r2, r3
 8013ee2:	d803      	bhi.n	8013eec <HAL_SPI_TransmitReceive+0x2c6>
 8013ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013eea:	d102      	bne.n	8013ef2 <HAL_SPI_TransmitReceive+0x2cc>
 8013eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d103      	bne.n	8013efa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8013ef2:	2303      	movs	r3, #3
 8013ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013ef8:	e029      	b.n	8013f4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013efe:	b29b      	uxth	r3, r3
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d1a2      	bne.n	8013e4a <HAL_SPI_TransmitReceive+0x224>
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013f08:	b29b      	uxth	r3, r3
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d19d      	bne.n	8013e4a <HAL_SPI_TransmitReceive+0x224>
=======
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	689b      	ldr	r3, [r3, #8]
 8011dfc:	f003 0301 	and.w	r3, r3, #1
 8011e00:	2b01      	cmp	r3, #1
 8011e02:	d119      	bne.n	8011e38 <HAL_SPI_TransmitReceive+0x2ae>
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011e08:	b29b      	uxth	r3, r3
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d014      	beq.n	8011e38 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	68da      	ldr	r2, [r3, #12]
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e18:	b2d2      	uxtb	r2, r2
 8011e1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e20:	1c5a      	adds	r2, r3, #1
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	3b01      	subs	r3, #1
 8011e2e:	b29a      	uxth	r2, r3
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011e34:	2301      	movs	r3, #1
 8011e36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011e38:	f7fc ffa8 	bl	800ed8c <HAL_GetTick>
 8011e3c:	4602      	mov	r2, r0
 8011e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e40:	1ad3      	subs	r3, r2, r3
 8011e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d803      	bhi.n	8011e50 <HAL_SPI_TransmitReceive+0x2c6>
 8011e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e4e:	d102      	bne.n	8011e56 <HAL_SPI_TransmitReceive+0x2cc>
 8011e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d103      	bne.n	8011e5e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8011e56:	2303      	movs	r3, #3
 8011e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011e5c:	e029      	b.n	8011eb2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011e62:	b29b      	uxth	r3, r3
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d1a2      	bne.n	8011dae <HAL_SPI_TransmitReceive+0x224>
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011e6c:	b29b      	uxth	r3, r3
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d19d      	bne.n	8011dae <HAL_SPI_TransmitReceive+0x224>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8013f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013f12:	68f8      	ldr	r0, [r7, #12]
 8013f14:	f000 f8f8 	bl	8014108 <SPI_EndRxTxTransaction>
 8013f18:	4603      	mov	r3, r0
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d006      	beq.n	8013f2c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8013f1e:	2301      	movs	r3, #1
 8013f20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	2220      	movs	r2, #32
 8013f28:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013f2a:	e010      	b.n	8013f4e <HAL_SPI_TransmitReceive+0x328>
=======
 8011e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011e76:	68f8      	ldr	r0, [r7, #12]
 8011e78:	f000 f8f8 	bl	801206c <SPI_EndRxTxTransaction>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d006      	beq.n	8011e90 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8011e82:	2301      	movs	r3, #1
 8011e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	2220      	movs	r2, #32
 8011e8c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8011e8e:	e010      	b.n	8011eb2 <HAL_SPI_TransmitReceive+0x328>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	689b      	ldr	r3, [r3, #8]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d10b      	bne.n	8013f4c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013f34:	2300      	movs	r3, #0
 8013f36:	617b      	str	r3, [r7, #20]
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	68db      	ldr	r3, [r3, #12]
 8013f3e:	617b      	str	r3, [r7, #20]
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	689b      	ldr	r3, [r3, #8]
 8013f46:	617b      	str	r3, [r7, #20]
 8013f48:	697b      	ldr	r3, [r7, #20]
 8013f4a:	e000      	b.n	8013f4e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8013f4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	2201      	movs	r2, #1
 8013f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	2200      	movs	r2, #0
 8013f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013f5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8013f62:	4618      	mov	r0, r3
 8013f64:	3730      	adds	r7, #48	; 0x30
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}

08013f6a <SPI_WaitFlagStateUntilTimeout>:
=======
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	689b      	ldr	r3, [r3, #8]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d10b      	bne.n	8011eb0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011e98:	2300      	movs	r3, #0
 8011e9a:	617b      	str	r3, [r7, #20]
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	68db      	ldr	r3, [r3, #12]
 8011ea2:	617b      	str	r3, [r7, #20]
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	689b      	ldr	r3, [r3, #8]
 8011eaa:	617b      	str	r3, [r7, #20]
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	e000      	b.n	8011eb2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8011eb0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	2201      	movs	r2, #1
 8011eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3730      	adds	r7, #48	; 0x30
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}

08011ece <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8013f6a:	b580      	push	{r7, lr}
 8013f6c:	b084      	sub	sp, #16
 8013f6e:	af00      	add	r7, sp, #0
 8013f70:	60f8      	str	r0, [r7, #12]
 8013f72:	60b9      	str	r1, [r7, #8]
 8013f74:	603b      	str	r3, [r7, #0]
 8013f76:	4613      	mov	r3, r2
 8013f78:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013f7a:	e04c      	b.n	8014016 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f82:	d048      	beq.n	8014016 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8013f84:	f7fc ff50 	bl	8010e28 <HAL_GetTick>
 8013f88:	4602      	mov	r2, r0
 8013f8a:	69bb      	ldr	r3, [r7, #24]
 8013f8c:	1ad3      	subs	r3, r2, r3
 8013f8e:	683a      	ldr	r2, [r7, #0]
 8013f90:	429a      	cmp	r2, r3
 8013f92:	d902      	bls.n	8013f9a <SPI_WaitFlagStateUntilTimeout+0x30>
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d13d      	bne.n	8014016 <SPI_WaitFlagStateUntilTimeout+0xac>
=======
 8011ece:	b580      	push	{r7, lr}
 8011ed0:	b084      	sub	sp, #16
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	60f8      	str	r0, [r7, #12]
 8011ed6:	60b9      	str	r1, [r7, #8]
 8011ed8:	603b      	str	r3, [r7, #0]
 8011eda:	4613      	mov	r3, r2
 8011edc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011ede:	e04c      	b.n	8011f7a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ee6:	d048      	beq.n	8011f7a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8011ee8:	f7fc ff50 	bl	800ed8c <HAL_GetTick>
 8011eec:	4602      	mov	r2, r0
 8011eee:	69bb      	ldr	r3, [r7, #24]
 8011ef0:	1ad3      	subs	r3, r2, r3
 8011ef2:	683a      	ldr	r2, [r7, #0]
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	d902      	bls.n	8011efe <SPI_WaitFlagStateUntilTimeout+0x30>
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d13d      	bne.n	8011f7a <SPI_WaitFlagStateUntilTimeout+0xac>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< HEAD
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	685a      	ldr	r2, [r3, #4]
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013fa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	685b      	ldr	r3, [r3, #4]
 8013fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013fb2:	d111      	bne.n	8013fd8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	689b      	ldr	r3, [r3, #8]
 8013fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013fbc:	d004      	beq.n	8013fc8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	689b      	ldr	r3, [r3, #8]
 8013fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013fc6:	d107      	bne.n	8013fd8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	681a      	ldr	r2, [r3, #0]
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013fd6:	601a      	str	r2, [r3, #0]
=======
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	685a      	ldr	r2, [r3, #4]
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011f0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	685b      	ldr	r3, [r3, #4]
 8011f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011f16:	d111      	bne.n	8011f3c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	689b      	ldr	r3, [r3, #8]
 8011f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011f20:	d004      	beq.n	8011f2c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	689b      	ldr	r3, [r3, #8]
 8011f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011f2a:	d107      	bne.n	8011f3c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	681a      	ldr	r2, [r3, #0]
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011f3a:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< HEAD
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013fe0:	d10f      	bne.n	8014002 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	681a      	ldr	r2, [r3, #0]
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013ff0:	601a      	str	r2, [r3, #0]
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	681a      	ldr	r2, [r3, #0]
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014000:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	2201      	movs	r2, #1
 8014006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	2200      	movs	r2, #0
 801400e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8014012:	2303      	movs	r3, #3
 8014014:	e00f      	b.n	8014036 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	689a      	ldr	r2, [r3, #8]
 801401c:	68bb      	ldr	r3, [r7, #8]
 801401e:	4013      	ands	r3, r2
 8014020:	68ba      	ldr	r2, [r7, #8]
 8014022:	429a      	cmp	r2, r3
 8014024:	bf0c      	ite	eq
 8014026:	2301      	moveq	r3, #1
 8014028:	2300      	movne	r3, #0
 801402a:	b2db      	uxtb	r3, r3
 801402c:	461a      	mov	r2, r3
 801402e:	79fb      	ldrb	r3, [r7, #7]
 8014030:	429a      	cmp	r2, r3
 8014032:	d1a3      	bne.n	8013f7c <SPI_WaitFlagStateUntilTimeout+0x12>
=======
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011f44:	d10f      	bne.n	8011f66 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	681a      	ldr	r2, [r3, #0]
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011f54:	601a      	str	r2, [r3, #0]
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	681a      	ldr	r2, [r3, #0]
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011f64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	2201      	movs	r2, #1
 8011f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	2200      	movs	r2, #0
 8011f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8011f76:	2303      	movs	r3, #3
 8011f78:	e00f      	b.n	8011f9a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	689a      	ldr	r2, [r3, #8]
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	4013      	ands	r3, r2
 8011f84:	68ba      	ldr	r2, [r7, #8]
 8011f86:	429a      	cmp	r2, r3
 8011f88:	bf0c      	ite	eq
 8011f8a:	2301      	moveq	r3, #1
 8011f8c:	2300      	movne	r3, #0
 8011f8e:	b2db      	uxtb	r3, r3
 8011f90:	461a      	mov	r2, r3
 8011f92:	79fb      	ldrb	r3, [r7, #7]
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d1a3      	bne.n	8011ee0 <SPI_WaitFlagStateUntilTimeout+0x12>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8014034:	2300      	movs	r3, #0
}
 8014036:	4618      	mov	r0, r3
 8014038:	3710      	adds	r7, #16
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}

0801403e <SPI_EndRxTransaction>:
=======
 8011f98:	2300      	movs	r3, #0
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3710      	adds	r7, #16
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}

08011fa2 <SPI_EndRxTransaction>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 801403e:	b580      	push	{r7, lr}
 8014040:	b086      	sub	sp, #24
 8014042:	af02      	add	r7, sp, #8
 8014044:	60f8      	str	r0, [r7, #12]
 8014046:	60b9      	str	r1, [r7, #8]
 8014048:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	685b      	ldr	r3, [r3, #4]
 801404e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014052:	d111      	bne.n	8014078 <SPI_EndRxTransaction+0x3a>
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	689b      	ldr	r3, [r3, #8]
 8014058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801405c:	d004      	beq.n	8014068 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	689b      	ldr	r3, [r3, #8]
 8014062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014066:	d107      	bne.n	8014078 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	681a      	ldr	r2, [r3, #0]
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014076:	601a      	str	r2, [r3, #0]
=======
 8011fa2:	b580      	push	{r7, lr}
 8011fa4:	b086      	sub	sp, #24
 8011fa6:	af02      	add	r7, sp, #8
 8011fa8:	60f8      	str	r0, [r7, #12]
 8011faa:	60b9      	str	r1, [r7, #8]
 8011fac:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	685b      	ldr	r3, [r3, #4]
 8011fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011fb6:	d111      	bne.n	8011fdc <SPI_EndRxTransaction+0x3a>
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	689b      	ldr	r3, [r3, #8]
 8011fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011fc0:	d004      	beq.n	8011fcc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	689b      	ldr	r3, [r3, #8]
 8011fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011fca:	d107      	bne.n	8011fdc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	681a      	ldr	r2, [r3, #0]
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011fda:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	685b      	ldr	r3, [r3, #4]
 801407c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014080:	d12a      	bne.n	80140d8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	689b      	ldr	r3, [r3, #8]
 8014086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801408a:	d012      	beq.n	80140b2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	9300      	str	r3, [sp, #0]
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	2200      	movs	r2, #0
 8014094:	2180      	movs	r1, #128	; 0x80
 8014096:	68f8      	ldr	r0, [r7, #12]
 8014098:	f7ff ff67 	bl	8013f6a <SPI_WaitFlagStateUntilTimeout>
 801409c:	4603      	mov	r3, r0
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d02d      	beq.n	80140fe <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140a6:	f043 0220 	orr.w	r2, r3, #32
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80140ae:	2303      	movs	r3, #3
 80140b0:	e026      	b.n	8014100 <SPI_EndRxTransaction+0xc2>
=======
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	685b      	ldr	r3, [r3, #4]
 8011fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011fe4:	d12a      	bne.n	801203c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	689b      	ldr	r3, [r3, #8]
 8011fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011fee:	d012      	beq.n	8012016 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	9300      	str	r3, [sp, #0]
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	2180      	movs	r1, #128	; 0x80
 8011ffa:	68f8      	ldr	r0, [r7, #12]
 8011ffc:	f7ff ff67 	bl	8011ece <SPI_WaitFlagStateUntilTimeout>
 8012000:	4603      	mov	r3, r0
 8012002:	2b00      	cmp	r3, #0
 8012004:	d02d      	beq.n	8012062 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801200a:	f043 0220 	orr.w	r2, r3, #32
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8012012:	2303      	movs	r3, #3
 8012014:	e026      	b.n	8012064 <SPI_EndRxTransaction+0xc2>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	9300      	str	r3, [sp, #0]
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	2200      	movs	r2, #0
 80140ba:	2101      	movs	r1, #1
 80140bc:	68f8      	ldr	r0, [r7, #12]
 80140be:	f7ff ff54 	bl	8013f6a <SPI_WaitFlagStateUntilTimeout>
 80140c2:	4603      	mov	r3, r0
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d01a      	beq.n	80140fe <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140cc:	f043 0220 	orr.w	r2, r3, #32
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80140d4:	2303      	movs	r3, #3
 80140d6:	e013      	b.n	8014100 <SPI_EndRxTransaction+0xc2>
=======
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	9300      	str	r3, [sp, #0]
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	2200      	movs	r2, #0
 801201e:	2101      	movs	r1, #1
 8012020:	68f8      	ldr	r0, [r7, #12]
 8012022:	f7ff ff54 	bl	8011ece <SPI_WaitFlagStateUntilTimeout>
 8012026:	4603      	mov	r3, r0
 8012028:	2b00      	cmp	r3, #0
 801202a:	d01a      	beq.n	8012062 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012030:	f043 0220 	orr.w	r2, r3, #32
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8012038:	2303      	movs	r3, #3
 801203a:	e013      	b.n	8012064 <SPI_EndRxTransaction+0xc2>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	9300      	str	r3, [sp, #0]
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	2200      	movs	r2, #0
 80140e0:	2101      	movs	r1, #1
 80140e2:	68f8      	ldr	r0, [r7, #12]
 80140e4:	f7ff ff41 	bl	8013f6a <SPI_WaitFlagStateUntilTimeout>
 80140e8:	4603      	mov	r3, r0
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d007      	beq.n	80140fe <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140f2:	f043 0220 	orr.w	r2, r3, #32
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80140fa:	2303      	movs	r3, #3
 80140fc:	e000      	b.n	8014100 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80140fe:	2300      	movs	r3, #0
}
 8014100:	4618      	mov	r0, r3
 8014102:	3710      	adds	r7, #16
 8014104:	46bd      	mov	sp, r7
 8014106:	bd80      	pop	{r7, pc}

08014108 <SPI_EndRxTxTransaction>:
=======
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	9300      	str	r3, [sp, #0]
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	2200      	movs	r2, #0
 8012044:	2101      	movs	r1, #1
 8012046:	68f8      	ldr	r0, [r7, #12]
 8012048:	f7ff ff41 	bl	8011ece <SPI_WaitFlagStateUntilTimeout>
 801204c:	4603      	mov	r3, r0
 801204e:	2b00      	cmp	r3, #0
 8012050:	d007      	beq.n	8012062 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012056:	f043 0220 	orr.w	r2, r3, #32
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801205e:	2303      	movs	r3, #3
 8012060:	e000      	b.n	8012064 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8012062:	2300      	movs	r3, #0
}
 8012064:	4618      	mov	r0, r3
 8012066:	3710      	adds	r7, #16
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}

0801206c <SPI_EndRxTxTransaction>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8014108:	b580      	push	{r7, lr}
 801410a:	b088      	sub	sp, #32
 801410c:	af02      	add	r7, sp, #8
 801410e:	60f8      	str	r0, [r7, #12]
 8014110:	60b9      	str	r1, [r7, #8]
 8014112:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8014114:	4b1b      	ldr	r3, [pc, #108]	; (8014184 <SPI_EndRxTxTransaction+0x7c>)
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	4a1b      	ldr	r2, [pc, #108]	; (8014188 <SPI_EndRxTxTransaction+0x80>)
 801411a:	fba2 2303 	umull	r2, r3, r2, r3
 801411e:	0d5b      	lsrs	r3, r3, #21
 8014120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014124:	fb02 f303 	mul.w	r3, r2, r3
 8014128:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	685b      	ldr	r3, [r3, #4]
 801412e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014132:	d112      	bne.n	801415a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	9300      	str	r3, [sp, #0]
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	2200      	movs	r2, #0
 801413c:	2180      	movs	r1, #128	; 0x80
 801413e:	68f8      	ldr	r0, [r7, #12]
 8014140:	f7ff ff13 	bl	8013f6a <SPI_WaitFlagStateUntilTimeout>
 8014144:	4603      	mov	r3, r0
 8014146:	2b00      	cmp	r3, #0
 8014148:	d016      	beq.n	8014178 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801414e:	f043 0220 	orr.w	r2, r3, #32
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014156:	2303      	movs	r3, #3
 8014158:	e00f      	b.n	801417a <SPI_EndRxTxTransaction+0x72>
=======
 801206c:	b580      	push	{r7, lr}
 801206e:	b088      	sub	sp, #32
 8012070:	af02      	add	r7, sp, #8
 8012072:	60f8      	str	r0, [r7, #12]
 8012074:	60b9      	str	r1, [r7, #8]
 8012076:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8012078:	4b1b      	ldr	r3, [pc, #108]	; (80120e8 <SPI_EndRxTxTransaction+0x7c>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	4a1b      	ldr	r2, [pc, #108]	; (80120ec <SPI_EndRxTxTransaction+0x80>)
 801207e:	fba2 2303 	umull	r2, r3, r2, r3
 8012082:	0d5b      	lsrs	r3, r3, #21
 8012084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012088:	fb02 f303 	mul.w	r3, r2, r3
 801208c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	685b      	ldr	r3, [r3, #4]
 8012092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012096:	d112      	bne.n	80120be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	9300      	str	r3, [sp, #0]
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	2200      	movs	r2, #0
 80120a0:	2180      	movs	r1, #128	; 0x80
 80120a2:	68f8      	ldr	r0, [r7, #12]
 80120a4:	f7ff ff13 	bl	8011ece <SPI_WaitFlagStateUntilTimeout>
 80120a8:	4603      	mov	r3, r0
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d016      	beq.n	80120dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120b2:	f043 0220 	orr.w	r2, r3, #32
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80120ba:	2303      	movs	r3, #3
 80120bc:	e00f      	b.n	80120de <SPI_EndRxTxTransaction+0x72>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
<<<<<<< HEAD
 801415a:	697b      	ldr	r3, [r7, #20]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d00a      	beq.n	8014176 <SPI_EndRxTxTransaction+0x6e>
=======
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d00a      	beq.n	80120da <SPI_EndRxTxTransaction+0x6e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      {
        break;
      }
      count--;
<<<<<<< HEAD
 8014160:	697b      	ldr	r3, [r7, #20]
 8014162:	3b01      	subs	r3, #1
 8014164:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	689b      	ldr	r3, [r3, #8]
 801416c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014170:	2b80      	cmp	r3, #128	; 0x80
 8014172:	d0f2      	beq.n	801415a <SPI_EndRxTxTransaction+0x52>
 8014174:	e000      	b.n	8014178 <SPI_EndRxTxTransaction+0x70>
        break;
 8014176:	bf00      	nop
  }

  return HAL_OK;
 8014178:	2300      	movs	r3, #0
}
 801417a:	4618      	mov	r0, r3
 801417c:	3718      	adds	r7, #24
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}
 8014182:	bf00      	nop
 8014184:	20000074 	.word	0x20000074
 8014188:	165e9f81 	.word	0x165e9f81

0801418c <HAL_TIM_Base_Init>:
=======
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	3b01      	subs	r3, #1
 80120c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	689b      	ldr	r3, [r3, #8]
 80120d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80120d4:	2b80      	cmp	r3, #128	; 0x80
 80120d6:	d0f2      	beq.n	80120be <SPI_EndRxTxTransaction+0x52>
 80120d8:	e000      	b.n	80120dc <SPI_EndRxTxTransaction+0x70>
        break;
 80120da:	bf00      	nop
  }

  return HAL_OK;
 80120dc:	2300      	movs	r3, #0
}
 80120de:	4618      	mov	r0, r3
 80120e0:	3718      	adds	r7, #24
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	bf00      	nop
 80120e8:	20000d00 	.word	0x20000d00
 80120ec:	165e9f81 	.word	0x165e9f81

080120f0 <HAL_TIM_Base_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 801418c:	b580      	push	{r7, lr}
 801418e:	b082      	sub	sp, #8
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d101      	bne.n	801419e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801419a:	2301      	movs	r3, #1
 801419c:	e01d      	b.n	80141da <HAL_TIM_Base_Init+0x4e>
=======
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b082      	sub	sp, #8
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d101      	bne.n	8012102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80120fe:	2301      	movs	r3, #1
 8012100:	e01d      	b.n	801213e <HAL_TIM_Base_Init+0x4e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80141a4:	b2db      	uxtb	r3, r3
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d106      	bne.n	80141b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	2200      	movs	r2, #0
 80141ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012108:	b2db      	uxtb	r3, r3
 801210a:	2b00      	cmp	r3, #0
 801210c:	d106      	bne.n	801211c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2200      	movs	r2, #0
 8012112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 80141b2:	6878      	ldr	r0, [r7, #4]
 80141b4:	f7fc fa42 	bl	801063c <HAL_TIM_Base_MspInit>
=======
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f7fc fa42 	bl	800e5a0 <HAL_TIM_Base_MspInit>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	2202      	movs	r2, #2
 80141bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	681a      	ldr	r2, [r3, #0]
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	3304      	adds	r3, #4
 80141c8:	4619      	mov	r1, r3
 80141ca:	4610      	mov	r0, r2
 80141cc:	f000 fe50 	bl	8014e70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	2201      	movs	r2, #1
 80141d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80141d8:	2300      	movs	r3, #0
}
 80141da:	4618      	mov	r0, r3
 80141dc:	3708      	adds	r7, #8
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}

080141e2 <HAL_TIM_Base_Start_IT>:
=======
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2202      	movs	r2, #2
 8012120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681a      	ldr	r2, [r3, #0]
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	3304      	adds	r3, #4
 801212c:	4619      	mov	r1, r3
 801212e:	4610      	mov	r0, r2
 8012130:	f000 fe50 	bl	8012dd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2201      	movs	r2, #1
 8012138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801213c:	2300      	movs	r3, #0
}
 801213e:	4618      	mov	r0, r3
 8012140:	3708      	adds	r7, #8
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}

08012146 <HAL_TIM_Base_Start_IT>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80141e2:	b480      	push	{r7}
 80141e4:	b085      	sub	sp, #20
 80141e6:	af00      	add	r7, sp, #0
 80141e8:	6078      	str	r0, [r7, #4]
=======
 8012146:	b480      	push	{r7}
 8012148:	b085      	sub	sp, #20
 801214a:	af00      	add	r7, sp, #0
 801214c:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
<<<<<<< HEAD
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	68da      	ldr	r2, [r3, #12]
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	f042 0201 	orr.w	r2, r2, #1
 80141f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	689b      	ldr	r3, [r3, #8]
 8014200:	f003 0307 	and.w	r3, r3, #7
 8014204:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	2b06      	cmp	r3, #6
 801420a:	d007      	beq.n	801421c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	681a      	ldr	r2, [r3, #0]
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	f042 0201 	orr.w	r2, r2, #1
 801421a:	601a      	str	r2, [r3, #0]
=======
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	68da      	ldr	r2, [r3, #12]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	f042 0201 	orr.w	r2, r2, #1
 801215c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	689b      	ldr	r3, [r3, #8]
 8012164:	f003 0307 	and.w	r3, r3, #7
 8012168:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	2b06      	cmp	r3, #6
 801216e:	d007      	beq.n	8012180 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	f042 0201 	orr.w	r2, r2, #1
 801217e:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 801421c:	2300      	movs	r3, #0
}
 801421e:	4618      	mov	r0, r3
 8014220:	3714      	adds	r7, #20
 8014222:	46bd      	mov	sp, r7
 8014224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014228:	4770      	bx	lr

0801422a <HAL_TIM_Base_Stop_IT>:
=======
 8012180:	2300      	movs	r3, #0
}
 8012182:	4618      	mov	r0, r3
 8012184:	3714      	adds	r7, #20
 8012186:	46bd      	mov	sp, r7
 8012188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218c:	4770      	bx	lr

0801218e <HAL_TIM_Base_Stop_IT>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 801422a:	b480      	push	{r7}
 801422c:	b083      	sub	sp, #12
 801422e:	af00      	add	r7, sp, #0
 8014230:	6078      	str	r0, [r7, #4]
=======
 801218e:	b480      	push	{r7}
 8012190:	b083      	sub	sp, #12
 8012192:	af00      	add	r7, sp, #0
 8012194:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
<<<<<<< HEAD
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	68da      	ldr	r2, [r3, #12]
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	f022 0201 	bic.w	r2, r2, #1
 8014240:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	6a1a      	ldr	r2, [r3, #32]
 8014248:	f241 1311 	movw	r3, #4369	; 0x1111
 801424c:	4013      	ands	r3, r2
 801424e:	2b00      	cmp	r3, #0
 8014250:	d10f      	bne.n	8014272 <HAL_TIM_Base_Stop_IT+0x48>
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	6a1a      	ldr	r2, [r3, #32]
 8014258:	f240 4344 	movw	r3, #1092	; 0x444
 801425c:	4013      	ands	r3, r2
 801425e:	2b00      	cmp	r3, #0
 8014260:	d107      	bne.n	8014272 <HAL_TIM_Base_Stop_IT+0x48>
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	681a      	ldr	r2, [r3, #0]
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	f022 0201 	bic.w	r2, r2, #1
 8014270:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8014272:	2300      	movs	r3, #0
}
 8014274:	4618      	mov	r0, r3
 8014276:	370c      	adds	r7, #12
 8014278:	46bd      	mov	sp, r7
 801427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427e:	4770      	bx	lr

08014280 <HAL_TIM_OC_Init>:
=======
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	68da      	ldr	r2, [r3, #12]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	f022 0201 	bic.w	r2, r2, #1
 80121a4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	6a1a      	ldr	r2, [r3, #32]
 80121ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80121b0:	4013      	ands	r3, r2
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d10f      	bne.n	80121d6 <HAL_TIM_Base_Stop_IT+0x48>
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	6a1a      	ldr	r2, [r3, #32]
 80121bc:	f240 4344 	movw	r3, #1092	; 0x444
 80121c0:	4013      	ands	r3, r2
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d107      	bne.n	80121d6 <HAL_TIM_Base_Stop_IT+0x48>
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	681a      	ldr	r2, [r3, #0]
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	f022 0201 	bic.w	r2, r2, #1
 80121d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80121d6:	2300      	movs	r3, #0
}
 80121d8:	4618      	mov	r0, r3
 80121da:	370c      	adds	r7, #12
 80121dc:	46bd      	mov	sp, r7
 80121de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e2:	4770      	bx	lr

080121e4 <HAL_TIM_OC_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d101      	bne.n	8014292 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 801428e:	2301      	movs	r3, #1
 8014290:	e01d      	b.n	80142ce <HAL_TIM_OC_Init+0x4e>
=======
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b082      	sub	sp, #8
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d101      	bne.n	80121f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80121f2:	2301      	movs	r3, #1
 80121f4:	e01d      	b.n	8012232 <HAL_TIM_OC_Init+0x4e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014298:	b2db      	uxtb	r3, r3
 801429a:	2b00      	cmp	r3, #0
 801429c:	d106      	bne.n	80142ac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	2200      	movs	r2, #0
 80142a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80121fc:	b2db      	uxtb	r3, r3
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d106      	bne.n	8012210 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2200      	movs	r2, #0
 8012206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
<<<<<<< HEAD
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f000 f815 	bl	80142d6 <HAL_TIM_OC_MspInit>
=======
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f000 f815 	bl	801223a <HAL_TIM_OC_MspInit>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	2202      	movs	r2, #2
 80142b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	681a      	ldr	r2, [r3, #0]
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	3304      	adds	r3, #4
 80142bc:	4619      	mov	r1, r3
 80142be:	4610      	mov	r0, r2
 80142c0:	f000 fdd6 	bl	8014e70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	2201      	movs	r2, #1
 80142c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80142cc:	2300      	movs	r3, #0
}
 80142ce:	4618      	mov	r0, r3
 80142d0:	3708      	adds	r7, #8
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}

080142d6 <HAL_TIM_OC_MspInit>:
=======
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2202      	movs	r2, #2
 8012214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681a      	ldr	r2, [r3, #0]
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	3304      	adds	r3, #4
 8012220:	4619      	mov	r1, r3
 8012222:	4610      	mov	r0, r2
 8012224:	f000 fdd6 	bl	8012dd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2201      	movs	r2, #1
 801222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012230:	2300      	movs	r3, #0
}
 8012232:	4618      	mov	r0, r3
 8012234:	3708      	adds	r7, #8
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}

0801223a <HAL_TIM_OC_MspInit>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80142d6:	b480      	push	{r7}
 80142d8:	b083      	sub	sp, #12
 80142da:	af00      	add	r7, sp, #0
 80142dc:	6078      	str	r0, [r7, #4]
=======
 801223a:	b480      	push	{r7}
 801223c:	b083      	sub	sp, #12
 801223e:	af00      	add	r7, sp, #0
 8012240:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 80142de:	bf00      	nop
 80142e0:	370c      	adds	r7, #12
 80142e2:	46bd      	mov	sp, r7
 80142e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e8:	4770      	bx	lr
	...

080142ec <HAL_TIM_OC_Start_IT>:
=======
 8012242:	bf00      	nop
 8012244:	370c      	adds	r7, #12
 8012246:	46bd      	mov	sp, r7
 8012248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224c:	4770      	bx	lr
	...

08012250 <HAL_TIM_OC_Start_IT>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b084      	sub	sp, #16
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
 80142f4:	6039      	str	r1, [r7, #0]
=======
 8012250:	b580      	push	{r7, lr}
 8012252:	b084      	sub	sp, #16
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
 8012258:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
<<<<<<< HEAD
 80142f6:	683b      	ldr	r3, [r7, #0]
 80142f8:	2b0c      	cmp	r3, #12
 80142fa:	d841      	bhi.n	8014380 <HAL_TIM_OC_Start_IT+0x94>
 80142fc:	a201      	add	r2, pc, #4	; (adr r2, 8014304 <HAL_TIM_OC_Start_IT+0x18>)
 80142fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014302:	bf00      	nop
 8014304:	08014339 	.word	0x08014339
 8014308:	08014381 	.word	0x08014381
 801430c:	08014381 	.word	0x08014381
 8014310:	08014381 	.word	0x08014381
 8014314:	0801434b 	.word	0x0801434b
 8014318:	08014381 	.word	0x08014381
 801431c:	08014381 	.word	0x08014381
 8014320:	08014381 	.word	0x08014381
 8014324:	0801435d 	.word	0x0801435d
 8014328:	08014381 	.word	0x08014381
 801432c:	08014381 	.word	0x08014381
 8014330:	08014381 	.word	0x08014381
 8014334:	0801436f 	.word	0x0801436f
=======
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	2b0c      	cmp	r3, #12
 801225e:	d841      	bhi.n	80122e4 <HAL_TIM_OC_Start_IT+0x94>
 8012260:	a201      	add	r2, pc, #4	; (adr r2, 8012268 <HAL_TIM_OC_Start_IT+0x18>)
 8012262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012266:	bf00      	nop
 8012268:	0801229d 	.word	0x0801229d
 801226c:	080122e5 	.word	0x080122e5
 8012270:	080122e5 	.word	0x080122e5
 8012274:	080122e5 	.word	0x080122e5
 8012278:	080122af 	.word	0x080122af
 801227c:	080122e5 	.word	0x080122e5
 8012280:	080122e5 	.word	0x080122e5
 8012284:	080122e5 	.word	0x080122e5
 8012288:	080122c1 	.word	0x080122c1
 801228c:	080122e5 	.word	0x080122e5
 8012290:	080122e5 	.word	0x080122e5
 8012294:	080122e5 	.word	0x080122e5
 8012298:	080122d3 	.word	0x080122d3
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
<<<<<<< HEAD
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	68da      	ldr	r2, [r3, #12]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	f042 0202 	orr.w	r2, r2, #2
 8014346:	60da      	str	r2, [r3, #12]
      break;
 8014348:	e01b      	b.n	8014382 <HAL_TIM_OC_Start_IT+0x96>
=======
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	68da      	ldr	r2, [r3, #12]
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	f042 0202 	orr.w	r2, r2, #2
 80122aa:	60da      	str	r2, [r3, #12]
      break;
 80122ac:	e01b      	b.n	80122e6 <HAL_TIM_OC_Start_IT+0x96>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
<<<<<<< HEAD
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	68da      	ldr	r2, [r3, #12]
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	f042 0204 	orr.w	r2, r2, #4
 8014358:	60da      	str	r2, [r3, #12]
      break;
 801435a:	e012      	b.n	8014382 <HAL_TIM_OC_Start_IT+0x96>
=======
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	68da      	ldr	r2, [r3, #12]
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	f042 0204 	orr.w	r2, r2, #4
 80122bc:	60da      	str	r2, [r3, #12]
      break;
 80122be:	e012      	b.n	80122e6 <HAL_TIM_OC_Start_IT+0x96>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
<<<<<<< HEAD
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	68da      	ldr	r2, [r3, #12]
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	f042 0208 	orr.w	r2, r2, #8
 801436a:	60da      	str	r2, [r3, #12]
      break;
 801436c:	e009      	b.n	8014382 <HAL_TIM_OC_Start_IT+0x96>
=======
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	68da      	ldr	r2, [r3, #12]
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	f042 0208 	orr.w	r2, r2, #8
 80122ce:	60da      	str	r2, [r3, #12]
      break;
 80122d0:	e009      	b.n	80122e6 <HAL_TIM_OC_Start_IT+0x96>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
<<<<<<< HEAD
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	68da      	ldr	r2, [r3, #12]
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	f042 0210 	orr.w	r2, r2, #16
 801437c:	60da      	str	r2, [r3, #12]
      break;
 801437e:	e000      	b.n	8014382 <HAL_TIM_OC_Start_IT+0x96>
=======
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	68da      	ldr	r2, [r3, #12]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	f042 0210 	orr.w	r2, r2, #16
 80122e0:	60da      	str	r2, [r3, #12]
      break;
 80122e2:	e000      	b.n	80122e6 <HAL_TIM_OC_Start_IT+0x96>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    default:
      break;
<<<<<<< HEAD
 8014380:	bf00      	nop
=======
 80122e4:	bf00      	nop
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
<<<<<<< HEAD
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	2201      	movs	r2, #1
 8014388:	6839      	ldr	r1, [r7, #0]
 801438a:	4618      	mov	r0, r3
 801438c:	f001 f85a 	bl	8015444 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	4a15      	ldr	r2, [pc, #84]	; (80143ec <HAL_TIM_OC_Start_IT+0x100>)
 8014396:	4293      	cmp	r3, r2
 8014398:	d004      	beq.n	80143a4 <HAL_TIM_OC_Start_IT+0xb8>
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	4a14      	ldr	r2, [pc, #80]	; (80143f0 <HAL_TIM_OC_Start_IT+0x104>)
 80143a0:	4293      	cmp	r3, r2
 80143a2:	d101      	bne.n	80143a8 <HAL_TIM_OC_Start_IT+0xbc>
 80143a4:	2301      	movs	r3, #1
 80143a6:	e000      	b.n	80143aa <HAL_TIM_OC_Start_IT+0xbe>
 80143a8:	2300      	movs	r3, #0
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d007      	beq.n	80143be <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80143bc:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	2201      	movs	r2, #1
 80122ec:	6839      	ldr	r1, [r7, #0]
 80122ee:	4618      	mov	r0, r3
 80122f0:	f001 f85a 	bl	80133a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	4a15      	ldr	r2, [pc, #84]	; (8012350 <HAL_TIM_OC_Start_IT+0x100>)
 80122fa:	4293      	cmp	r3, r2
 80122fc:	d004      	beq.n	8012308 <HAL_TIM_OC_Start_IT+0xb8>
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	4a14      	ldr	r2, [pc, #80]	; (8012354 <HAL_TIM_OC_Start_IT+0x104>)
 8012304:	4293      	cmp	r3, r2
 8012306:	d101      	bne.n	801230c <HAL_TIM_OC_Start_IT+0xbc>
 8012308:	2301      	movs	r3, #1
 801230a:	e000      	b.n	801230e <HAL_TIM_OC_Start_IT+0xbe>
 801230c:	2300      	movs	r3, #0
 801230e:	2b00      	cmp	r3, #0
 8012310:	d007      	beq.n	8012322 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012320:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
<<<<<<< HEAD
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	689b      	ldr	r3, [r3, #8]
 80143c4:	f003 0307 	and.w	r3, r3, #7
 80143c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	2b06      	cmp	r3, #6
 80143ce:	d007      	beq.n	80143e0 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	681a      	ldr	r2, [r3, #0]
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	f042 0201 	orr.w	r2, r2, #1
 80143de:	601a      	str	r2, [r3, #0]
=======
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	689b      	ldr	r3, [r3, #8]
 8012328:	f003 0307 	and.w	r3, r3, #7
 801232c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	2b06      	cmp	r3, #6
 8012332:	d007      	beq.n	8012344 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	681a      	ldr	r2, [r3, #0]
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	f042 0201 	orr.w	r2, r2, #1
 8012342:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80143e0:	2300      	movs	r3, #0
}
 80143e2:	4618      	mov	r0, r3
 80143e4:	3710      	adds	r7, #16
 80143e6:	46bd      	mov	sp, r7
 80143e8:	bd80      	pop	{r7, pc}
 80143ea:	bf00      	nop
 80143ec:	40010000 	.word	0x40010000
 80143f0:	40010400 	.word	0x40010400

080143f4 <HAL_TIM_OC_Stop_IT>:
=======
 8012344:	2300      	movs	r3, #0
}
 8012346:	4618      	mov	r0, r3
 8012348:	3710      	adds	r7, #16
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}
 801234e:	bf00      	nop
 8012350:	40010000 	.word	0x40010000
 8012354:	40010400 	.word	0x40010400

08012358 <HAL_TIM_OC_Stop_IT>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b082      	sub	sp, #8
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
 80143fc:	6039      	str	r1, [r7, #0]
=======
 8012358:	b580      	push	{r7, lr}
 801235a:	b082      	sub	sp, #8
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
 8012360:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
<<<<<<< HEAD
 80143fe:	683b      	ldr	r3, [r7, #0]
 8014400:	2b0c      	cmp	r3, #12
 8014402:	d841      	bhi.n	8014488 <HAL_TIM_OC_Stop_IT+0x94>
 8014404:	a201      	add	r2, pc, #4	; (adr r2, 801440c <HAL_TIM_OC_Stop_IT+0x18>)
 8014406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801440a:	bf00      	nop
 801440c:	08014441 	.word	0x08014441
 8014410:	08014489 	.word	0x08014489
 8014414:	08014489 	.word	0x08014489
 8014418:	08014489 	.word	0x08014489
 801441c:	08014453 	.word	0x08014453
 8014420:	08014489 	.word	0x08014489
 8014424:	08014489 	.word	0x08014489
 8014428:	08014489 	.word	0x08014489
 801442c:	08014465 	.word	0x08014465
 8014430:	08014489 	.word	0x08014489
 8014434:	08014489 	.word	0x08014489
 8014438:	08014489 	.word	0x08014489
 801443c:	08014477 	.word	0x08014477
=======
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	2b0c      	cmp	r3, #12
 8012366:	d841      	bhi.n	80123ec <HAL_TIM_OC_Stop_IT+0x94>
 8012368:	a201      	add	r2, pc, #4	; (adr r2, 8012370 <HAL_TIM_OC_Stop_IT+0x18>)
 801236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801236e:	bf00      	nop
 8012370:	080123a5 	.word	0x080123a5
 8012374:	080123ed 	.word	0x080123ed
 8012378:	080123ed 	.word	0x080123ed
 801237c:	080123ed 	.word	0x080123ed
 8012380:	080123b7 	.word	0x080123b7
 8012384:	080123ed 	.word	0x080123ed
 8012388:	080123ed 	.word	0x080123ed
 801238c:	080123ed 	.word	0x080123ed
 8012390:	080123c9 	.word	0x080123c9
 8012394:	080123ed 	.word	0x080123ed
 8012398:	080123ed 	.word	0x080123ed
 801239c:	080123ed 	.word	0x080123ed
 80123a0:	080123db 	.word	0x080123db
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
<<<<<<< HEAD
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	68da      	ldr	r2, [r3, #12]
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	f022 0202 	bic.w	r2, r2, #2
 801444e:	60da      	str	r2, [r3, #12]
      break;
 8014450:	e01b      	b.n	801448a <HAL_TIM_OC_Stop_IT+0x96>
=======
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	68da      	ldr	r2, [r3, #12]
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	f022 0202 	bic.w	r2, r2, #2
 80123b2:	60da      	str	r2, [r3, #12]
      break;
 80123b4:	e01b      	b.n	80123ee <HAL_TIM_OC_Stop_IT+0x96>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
<<<<<<< HEAD
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	68da      	ldr	r2, [r3, #12]
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	f022 0204 	bic.w	r2, r2, #4
 8014460:	60da      	str	r2, [r3, #12]
      break;
 8014462:	e012      	b.n	801448a <HAL_TIM_OC_Stop_IT+0x96>
=======
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	68da      	ldr	r2, [r3, #12]
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	f022 0204 	bic.w	r2, r2, #4
 80123c4:	60da      	str	r2, [r3, #12]
      break;
 80123c6:	e012      	b.n	80123ee <HAL_TIM_OC_Stop_IT+0x96>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
<<<<<<< HEAD
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	68da      	ldr	r2, [r3, #12]
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	f022 0208 	bic.w	r2, r2, #8
 8014472:	60da      	str	r2, [r3, #12]
      break;
 8014474:	e009      	b.n	801448a <HAL_TIM_OC_Stop_IT+0x96>
=======
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	68da      	ldr	r2, [r3, #12]
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	f022 0208 	bic.w	r2, r2, #8
 80123d6:	60da      	str	r2, [r3, #12]
      break;
 80123d8:	e009      	b.n	80123ee <HAL_TIM_OC_Stop_IT+0x96>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
<<<<<<< HEAD
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	68da      	ldr	r2, [r3, #12]
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	f022 0210 	bic.w	r2, r2, #16
 8014484:	60da      	str	r2, [r3, #12]
      break;
 8014486:	e000      	b.n	801448a <HAL_TIM_OC_Stop_IT+0x96>
=======
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	68da      	ldr	r2, [r3, #12]
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	f022 0210 	bic.w	r2, r2, #16
 80123e8:	60da      	str	r2, [r3, #12]
      break;
 80123ea:	e000      	b.n	80123ee <HAL_TIM_OC_Stop_IT+0x96>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    default:
      break;
<<<<<<< HEAD
 8014488:	bf00      	nop
=======
 80123ec:	bf00      	nop
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
<<<<<<< HEAD
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	2200      	movs	r2, #0
 8014490:	6839      	ldr	r1, [r7, #0]
 8014492:	4618      	mov	r0, r3
 8014494:	f000 ffd6 	bl	8015444 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	4a20      	ldr	r2, [pc, #128]	; (8014520 <HAL_TIM_OC_Stop_IT+0x12c>)
 801449e:	4293      	cmp	r3, r2
 80144a0:	d004      	beq.n	80144ac <HAL_TIM_OC_Stop_IT+0xb8>
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	4a1f      	ldr	r2, [pc, #124]	; (8014524 <HAL_TIM_OC_Stop_IT+0x130>)
 80144a8:	4293      	cmp	r3, r2
 80144aa:	d101      	bne.n	80144b0 <HAL_TIM_OC_Stop_IT+0xbc>
 80144ac:	2301      	movs	r3, #1
 80144ae:	e000      	b.n	80144b2 <HAL_TIM_OC_Stop_IT+0xbe>
 80144b0:	2300      	movs	r3, #0
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d017      	beq.n	80144e6 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	6a1a      	ldr	r2, [r3, #32]
 80144bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80144c0:	4013      	ands	r3, r2
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d10f      	bne.n	80144e6 <HAL_TIM_OC_Stop_IT+0xf2>
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	6a1a      	ldr	r2, [r3, #32]
 80144cc:	f240 4344 	movw	r3, #1092	; 0x444
 80144d0:	4013      	ands	r3, r2
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d107      	bne.n	80144e6 <HAL_TIM_OC_Stop_IT+0xf2>
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80144e4:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	2200      	movs	r2, #0
 80123f4:	6839      	ldr	r1, [r7, #0]
 80123f6:	4618      	mov	r0, r3
 80123f8:	f000 ffd6 	bl	80133a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	4a20      	ldr	r2, [pc, #128]	; (8012484 <HAL_TIM_OC_Stop_IT+0x12c>)
 8012402:	4293      	cmp	r3, r2
 8012404:	d004      	beq.n	8012410 <HAL_TIM_OC_Stop_IT+0xb8>
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	4a1f      	ldr	r2, [pc, #124]	; (8012488 <HAL_TIM_OC_Stop_IT+0x130>)
 801240c:	4293      	cmp	r3, r2
 801240e:	d101      	bne.n	8012414 <HAL_TIM_OC_Stop_IT+0xbc>
 8012410:	2301      	movs	r3, #1
 8012412:	e000      	b.n	8012416 <HAL_TIM_OC_Stop_IT+0xbe>
 8012414:	2300      	movs	r3, #0
 8012416:	2b00      	cmp	r3, #0
 8012418:	d017      	beq.n	801244a <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	6a1a      	ldr	r2, [r3, #32]
 8012420:	f241 1311 	movw	r3, #4369	; 0x1111
 8012424:	4013      	ands	r3, r2
 8012426:	2b00      	cmp	r3, #0
 8012428:	d10f      	bne.n	801244a <HAL_TIM_OC_Stop_IT+0xf2>
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	6a1a      	ldr	r2, [r3, #32]
 8012430:	f240 4344 	movw	r3, #1092	; 0x444
 8012434:	4013      	ands	r3, r2
 8012436:	2b00      	cmp	r3, #0
 8012438:	d107      	bne.n	801244a <HAL_TIM_OC_Stop_IT+0xf2>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012448:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
<<<<<<< HEAD
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	6a1a      	ldr	r2, [r3, #32]
 80144ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80144f0:	4013      	ands	r3, r2
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d10f      	bne.n	8014516 <HAL_TIM_OC_Stop_IT+0x122>
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	6a1a      	ldr	r2, [r3, #32]
 80144fc:	f240 4344 	movw	r3, #1092	; 0x444
 8014500:	4013      	ands	r3, r2
 8014502:	2b00      	cmp	r3, #0
 8014504:	d107      	bne.n	8014516 <HAL_TIM_OC_Stop_IT+0x122>
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	681a      	ldr	r2, [r3, #0]
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	f022 0201 	bic.w	r2, r2, #1
 8014514:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8014516:	2300      	movs	r3, #0
}
 8014518:	4618      	mov	r0, r3
 801451a:	3708      	adds	r7, #8
 801451c:	46bd      	mov	sp, r7
 801451e:	bd80      	pop	{r7, pc}
 8014520:	40010000 	.word	0x40010000
 8014524:	40010400 	.word	0x40010400

08014528 <HAL_TIM_PWM_Init>:
=======
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	6a1a      	ldr	r2, [r3, #32]
 8012450:	f241 1311 	movw	r3, #4369	; 0x1111
 8012454:	4013      	ands	r3, r2
 8012456:	2b00      	cmp	r3, #0
 8012458:	d10f      	bne.n	801247a <HAL_TIM_OC_Stop_IT+0x122>
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	6a1a      	ldr	r2, [r3, #32]
 8012460:	f240 4344 	movw	r3, #1092	; 0x444
 8012464:	4013      	ands	r3, r2
 8012466:	2b00      	cmp	r3, #0
 8012468:	d107      	bne.n	801247a <HAL_TIM_OC_Stop_IT+0x122>
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	681a      	ldr	r2, [r3, #0]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	f022 0201 	bic.w	r2, r2, #1
 8012478:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801247a:	2300      	movs	r3, #0
}
 801247c:	4618      	mov	r0, r3
 801247e:	3708      	adds	r7, #8
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}
 8012484:	40010000 	.word	0x40010000
 8012488:	40010400 	.word	0x40010400

0801248c <HAL_TIM_PWM_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8014528:	b580      	push	{r7, lr}
 801452a:	b082      	sub	sp, #8
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d101      	bne.n	801453a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014536:	2301      	movs	r3, #1
 8014538:	e01d      	b.n	8014576 <HAL_TIM_PWM_Init+0x4e>
=======
 801248c:	b580      	push	{r7, lr}
 801248e:	b082      	sub	sp, #8
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d101      	bne.n	801249e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801249a:	2301      	movs	r3, #1
 801249c:	e01d      	b.n	80124da <HAL_TIM_PWM_Init+0x4e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014540:	b2db      	uxtb	r3, r3
 8014542:	2b00      	cmp	r3, #0
 8014544:	d106      	bne.n	8014554 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	2200      	movs	r2, #0
 801454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80124a4:	b2db      	uxtb	r3, r3
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d106      	bne.n	80124b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	2200      	movs	r2, #0
 80124ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 801454e:	6878      	ldr	r0, [r7, #4]
 8014550:	f000 f815 	bl	801457e <HAL_TIM_PWM_MspInit>
=======
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f000 f815 	bl	80124e2 <HAL_TIM_PWM_MspInit>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	2202      	movs	r2, #2
 8014558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681a      	ldr	r2, [r3, #0]
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	3304      	adds	r3, #4
 8014564:	4619      	mov	r1, r3
 8014566:	4610      	mov	r0, r2
 8014568:	f000 fc82 	bl	8014e70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2201      	movs	r2, #1
 8014570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014574:	2300      	movs	r3, #0
}
 8014576:	4618      	mov	r0, r3
 8014578:	3708      	adds	r7, #8
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}

0801457e <HAL_TIM_PWM_MspInit>:
=======
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2202      	movs	r2, #2
 80124bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681a      	ldr	r2, [r3, #0]
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	3304      	adds	r3, #4
 80124c8:	4619      	mov	r1, r3
 80124ca:	4610      	mov	r0, r2
 80124cc:	f000 fc82 	bl	8012dd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2201      	movs	r2, #1
 80124d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80124d8:	2300      	movs	r3, #0
}
 80124da:	4618      	mov	r0, r3
 80124dc:	3708      	adds	r7, #8
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}

080124e2 <HAL_TIM_PWM_MspInit>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 801457e:	b480      	push	{r7}
 8014580:	b083      	sub	sp, #12
 8014582:	af00      	add	r7, sp, #0
 8014584:	6078      	str	r0, [r7, #4]
=======
 80124e2:	b480      	push	{r7}
 80124e4:	b083      	sub	sp, #12
 80124e6:	af00      	add	r7, sp, #0
 80124e8:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8014586:	bf00      	nop
 8014588:	370c      	adds	r7, #12
 801458a:	46bd      	mov	sp, r7
 801458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014590:	4770      	bx	lr
	...

08014594 <HAL_TIM_PWM_Start>:
=======
 80124ea:	bf00      	nop
 80124ec:	370c      	adds	r7, #12
 80124ee:	46bd      	mov	sp, r7
 80124f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f4:	4770      	bx	lr
	...

080124f8 <HAL_TIM_PWM_Start>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8014594:	b580      	push	{r7, lr}
 8014596:	b084      	sub	sp, #16
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
 801459c:	6039      	str	r1, [r7, #0]
=======
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
 8012500:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
<<<<<<< HEAD
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	2201      	movs	r2, #1
 80145a4:	6839      	ldr	r1, [r7, #0]
 80145a6:	4618      	mov	r0, r3
 80145a8:	f000 ff4c 	bl	8015444 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	4a15      	ldr	r2, [pc, #84]	; (8014608 <HAL_TIM_PWM_Start+0x74>)
 80145b2:	4293      	cmp	r3, r2
 80145b4:	d004      	beq.n	80145c0 <HAL_TIM_PWM_Start+0x2c>
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	4a14      	ldr	r2, [pc, #80]	; (801460c <HAL_TIM_PWM_Start+0x78>)
 80145bc:	4293      	cmp	r3, r2
 80145be:	d101      	bne.n	80145c4 <HAL_TIM_PWM_Start+0x30>
 80145c0:	2301      	movs	r3, #1
 80145c2:	e000      	b.n	80145c6 <HAL_TIM_PWM_Start+0x32>
 80145c4:	2300      	movs	r3, #0
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d007      	beq.n	80145da <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80145d8:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	2201      	movs	r2, #1
 8012508:	6839      	ldr	r1, [r7, #0]
 801250a:	4618      	mov	r0, r3
 801250c:	f000 ff4c 	bl	80133a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4a15      	ldr	r2, [pc, #84]	; (801256c <HAL_TIM_PWM_Start+0x74>)
 8012516:	4293      	cmp	r3, r2
 8012518:	d004      	beq.n	8012524 <HAL_TIM_PWM_Start+0x2c>
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	4a14      	ldr	r2, [pc, #80]	; (8012570 <HAL_TIM_PWM_Start+0x78>)
 8012520:	4293      	cmp	r3, r2
 8012522:	d101      	bne.n	8012528 <HAL_TIM_PWM_Start+0x30>
 8012524:	2301      	movs	r3, #1
 8012526:	e000      	b.n	801252a <HAL_TIM_PWM_Start+0x32>
 8012528:	2300      	movs	r3, #0
 801252a:	2b00      	cmp	r3, #0
 801252c:	d007      	beq.n	801253e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801253c:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
<<<<<<< HEAD
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	689b      	ldr	r3, [r3, #8]
 80145e0:	f003 0307 	and.w	r3, r3, #7
 80145e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	2b06      	cmp	r3, #6
 80145ea:	d007      	beq.n	80145fc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	681a      	ldr	r2, [r3, #0]
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	f042 0201 	orr.w	r2, r2, #1
 80145fa:	601a      	str	r2, [r3, #0]
=======
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	689b      	ldr	r3, [r3, #8]
 8012544:	f003 0307 	and.w	r3, r3, #7
 8012548:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	2b06      	cmp	r3, #6
 801254e:	d007      	beq.n	8012560 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	681a      	ldr	r2, [r3, #0]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	f042 0201 	orr.w	r2, r2, #1
 801255e:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80145fc:	2300      	movs	r3, #0
}
 80145fe:	4618      	mov	r0, r3
 8014600:	3710      	adds	r7, #16
 8014602:	46bd      	mov	sp, r7
 8014604:	bd80      	pop	{r7, pc}
 8014606:	bf00      	nop
 8014608:	40010000 	.word	0x40010000
 801460c:	40010400 	.word	0x40010400

08014610 <HAL_TIM_PWM_Stop>:
=======
 8012560:	2300      	movs	r3, #0
}
 8012562:	4618      	mov	r0, r3
 8012564:	3710      	adds	r7, #16
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}
 801256a:	bf00      	nop
 801256c:	40010000 	.word	0x40010000
 8012570:	40010400 	.word	0x40010400

08012574 <HAL_TIM_PWM_Stop>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8014610:	b580      	push	{r7, lr}
 8014612:	b082      	sub	sp, #8
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
 8014618:	6039      	str	r1, [r7, #0]
=======
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
<<<<<<< HEAD
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	2200      	movs	r2, #0
 8014620:	6839      	ldr	r1, [r7, #0]
 8014622:	4618      	mov	r0, r3
 8014624:	f000 ff0e 	bl	8015444 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	4a22      	ldr	r2, [pc, #136]	; (80146b8 <HAL_TIM_PWM_Stop+0xa8>)
 801462e:	4293      	cmp	r3, r2
 8014630:	d004      	beq.n	801463c <HAL_TIM_PWM_Stop+0x2c>
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	4a21      	ldr	r2, [pc, #132]	; (80146bc <HAL_TIM_PWM_Stop+0xac>)
 8014638:	4293      	cmp	r3, r2
 801463a:	d101      	bne.n	8014640 <HAL_TIM_PWM_Stop+0x30>
 801463c:	2301      	movs	r3, #1
 801463e:	e000      	b.n	8014642 <HAL_TIM_PWM_Stop+0x32>
 8014640:	2300      	movs	r3, #0
 8014642:	2b00      	cmp	r3, #0
 8014644:	d017      	beq.n	8014676 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	6a1a      	ldr	r2, [r3, #32]
 801464c:	f241 1311 	movw	r3, #4369	; 0x1111
 8014650:	4013      	ands	r3, r2
 8014652:	2b00      	cmp	r3, #0
 8014654:	d10f      	bne.n	8014676 <HAL_TIM_PWM_Stop+0x66>
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	6a1a      	ldr	r2, [r3, #32]
 801465c:	f240 4344 	movw	r3, #1092	; 0x444
 8014660:	4013      	ands	r3, r2
 8014662:	2b00      	cmp	r3, #0
 8014664:	d107      	bne.n	8014676 <HAL_TIM_PWM_Stop+0x66>
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014674:	645a      	str	r2, [r3, #68]	; 0x44
=======
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2200      	movs	r2, #0
 8012584:	6839      	ldr	r1, [r7, #0]
 8012586:	4618      	mov	r0, r3
 8012588:	f000 ff0e 	bl	80133a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	4a22      	ldr	r2, [pc, #136]	; (801261c <HAL_TIM_PWM_Stop+0xa8>)
 8012592:	4293      	cmp	r3, r2
 8012594:	d004      	beq.n	80125a0 <HAL_TIM_PWM_Stop+0x2c>
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	4a21      	ldr	r2, [pc, #132]	; (8012620 <HAL_TIM_PWM_Stop+0xac>)
 801259c:	4293      	cmp	r3, r2
 801259e:	d101      	bne.n	80125a4 <HAL_TIM_PWM_Stop+0x30>
 80125a0:	2301      	movs	r3, #1
 80125a2:	e000      	b.n	80125a6 <HAL_TIM_PWM_Stop+0x32>
 80125a4:	2300      	movs	r3, #0
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d017      	beq.n	80125da <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	6a1a      	ldr	r2, [r3, #32]
 80125b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80125b4:	4013      	ands	r3, r2
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d10f      	bne.n	80125da <HAL_TIM_PWM_Stop+0x66>
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	6a1a      	ldr	r2, [r3, #32]
 80125c0:	f240 4344 	movw	r3, #1092	; 0x444
 80125c4:	4013      	ands	r3, r2
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d107      	bne.n	80125da <HAL_TIM_PWM_Stop+0x66>
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80125d8:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
<<<<<<< HEAD
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	6a1a      	ldr	r2, [r3, #32]
 801467c:	f241 1311 	movw	r3, #4369	; 0x1111
 8014680:	4013      	ands	r3, r2
 8014682:	2b00      	cmp	r3, #0
 8014684:	d10f      	bne.n	80146a6 <HAL_TIM_PWM_Stop+0x96>
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	6a1a      	ldr	r2, [r3, #32]
 801468c:	f240 4344 	movw	r3, #1092	; 0x444
 8014690:	4013      	ands	r3, r2
 8014692:	2b00      	cmp	r3, #0
 8014694:	d107      	bne.n	80146a6 <HAL_TIM_PWM_Stop+0x96>
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	681a      	ldr	r2, [r3, #0]
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	f022 0201 	bic.w	r2, r2, #1
 80146a4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2201      	movs	r2, #1
 80146aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80146ae:	2300      	movs	r3, #0
}
 80146b0:	4618      	mov	r0, r3
 80146b2:	3708      	adds	r7, #8
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}
 80146b8:	40010000 	.word	0x40010000
 80146bc:	40010400 	.word	0x40010400

080146c0 <HAL_TIM_Encoder_Init>:
=======
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	6a1a      	ldr	r2, [r3, #32]
 80125e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80125e4:	4013      	ands	r3, r2
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d10f      	bne.n	801260a <HAL_TIM_PWM_Stop+0x96>
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	6a1a      	ldr	r2, [r3, #32]
 80125f0:	f240 4344 	movw	r3, #1092	; 0x444
 80125f4:	4013      	ands	r3, r2
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d107      	bne.n	801260a <HAL_TIM_PWM_Stop+0x96>
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	681a      	ldr	r2, [r3, #0]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	f022 0201 	bic.w	r2, r2, #1
 8012608:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2201      	movs	r2, #1
 801260e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8012612:	2300      	movs	r3, #0
}
 8012614:	4618      	mov	r0, r3
 8012616:	3708      	adds	r7, #8
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}
 801261c:	40010000 	.word	0x40010000
 8012620:	40010400 	.word	0x40010400

08012624 <HAL_TIM_Encoder_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
<<<<<<< HEAD
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b086      	sub	sp, #24
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
 80146c8:	6039      	str	r1, [r7, #0]
=======
 8012624:	b580      	push	{r7, lr}
 8012626:	b086      	sub	sp, #24
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
 801262c:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
<<<<<<< HEAD
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d101      	bne.n	80146d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80146d0:	2301      	movs	r3, #1
 80146d2:	e083      	b.n	80147dc <HAL_TIM_Encoder_Init+0x11c>
=======
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d101      	bne.n	8012638 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8012634:	2301      	movs	r3, #1
 8012636:	e083      	b.n	8012740 <HAL_TIM_Encoder_Init+0x11c>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80146da:	b2db      	uxtb	r3, r3
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d106      	bne.n	80146ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2200      	movs	r2, #0
 80146e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801263e:	b2db      	uxtb	r3, r3
 8012640:	2b00      	cmp	r3, #0
 8012642:	d106      	bne.n	8012652 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2200      	movs	r2, #0
 8012648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
<<<<<<< HEAD
 80146e8:	6878      	ldr	r0, [r7, #4]
 80146ea:	f7fc f837 	bl	801075c <HAL_TIM_Encoder_MspInit>
=======
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f7fc f837 	bl	800e6c0 <HAL_TIM_Encoder_MspInit>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	2202      	movs	r2, #2
 80146f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	689b      	ldr	r3, [r3, #8]
 80146fc:	687a      	ldr	r2, [r7, #4]
 80146fe:	6812      	ldr	r2, [r2, #0]
 8014700:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014704:	f023 0307 	bic.w	r3, r3, #7
 8014708:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	681a      	ldr	r2, [r3, #0]
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	3304      	adds	r3, #4
 8014712:	4619      	mov	r1, r3
 8014714:	4610      	mov	r0, r2
 8014716:	f000 fbab 	bl	8014e70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	689b      	ldr	r3, [r3, #8]
 8014720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	699b      	ldr	r3, [r3, #24]
 8014728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	6a1b      	ldr	r3, [r3, #32]
 8014730:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	697a      	ldr	r2, [r7, #20]
 8014738:	4313      	orrs	r3, r2
 801473a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801473c:	693b      	ldr	r3, [r7, #16]
 801473e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014742:	f023 0303 	bic.w	r3, r3, #3
 8014746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	689a      	ldr	r2, [r3, #8]
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	699b      	ldr	r3, [r3, #24]
 8014750:	021b      	lsls	r3, r3, #8
 8014752:	4313      	orrs	r3, r2
 8014754:	693a      	ldr	r2, [r7, #16]
 8014756:	4313      	orrs	r3, r2
 8014758:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801475a:	693b      	ldr	r3, [r7, #16]
 801475c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8014760:	f023 030c 	bic.w	r3, r3, #12
 8014764:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8014766:	693b      	ldr	r3, [r7, #16]
 8014768:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801476c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014770:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	68da      	ldr	r2, [r3, #12]
 8014776:	683b      	ldr	r3, [r7, #0]
 8014778:	69db      	ldr	r3, [r3, #28]
 801477a:	021b      	lsls	r3, r3, #8
 801477c:	4313      	orrs	r3, r2
 801477e:	693a      	ldr	r2, [r7, #16]
 8014780:	4313      	orrs	r3, r2
 8014782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	691b      	ldr	r3, [r3, #16]
 8014788:	011a      	lsls	r2, r3, #4
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	6a1b      	ldr	r3, [r3, #32]
 801478e:	031b      	lsls	r3, r3, #12
 8014790:	4313      	orrs	r3, r2
 8014792:	693a      	ldr	r2, [r7, #16]
 8014794:	4313      	orrs	r3, r2
 8014796:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801479e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80147a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	685a      	ldr	r2, [r3, #4]
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	695b      	ldr	r3, [r3, #20]
 80147b0:	011b      	lsls	r3, r3, #4
 80147b2:	4313      	orrs	r3, r2
 80147b4:	68fa      	ldr	r2, [r7, #12]
 80147b6:	4313      	orrs	r3, r2
 80147b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	697a      	ldr	r2, [r7, #20]
 80147c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	693a      	ldr	r2, [r7, #16]
 80147c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	68fa      	ldr	r2, [r7, #12]
 80147d0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	2201      	movs	r2, #1
 80147d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80147da:	2300      	movs	r3, #0
}
 80147dc:	4618      	mov	r0, r3
 80147de:	3718      	adds	r7, #24
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bd80      	pop	{r7, pc}

080147e4 <HAL_TIM_Encoder_Start>:
=======
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	2202      	movs	r2, #2
 8012656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	689b      	ldr	r3, [r3, #8]
 8012660:	687a      	ldr	r2, [r7, #4]
 8012662:	6812      	ldr	r2, [r2, #0]
 8012664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012668:	f023 0307 	bic.w	r3, r3, #7
 801266c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681a      	ldr	r2, [r3, #0]
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	3304      	adds	r3, #4
 8012676:	4619      	mov	r1, r3
 8012678:	4610      	mov	r0, r2
 801267a:	f000 fbab 	bl	8012dd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	689b      	ldr	r3, [r3, #8]
 8012684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	699b      	ldr	r3, [r3, #24]
 801268c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	6a1b      	ldr	r3, [r3, #32]
 8012694:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	697a      	ldr	r2, [r7, #20]
 801269c:	4313      	orrs	r3, r2
 801269e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80126a0:	693b      	ldr	r3, [r7, #16]
 80126a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80126a6:	f023 0303 	bic.w	r3, r3, #3
 80126aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	689a      	ldr	r2, [r3, #8]
 80126b0:	683b      	ldr	r3, [r7, #0]
 80126b2:	699b      	ldr	r3, [r3, #24]
 80126b4:	021b      	lsls	r3, r3, #8
 80126b6:	4313      	orrs	r3, r2
 80126b8:	693a      	ldr	r2, [r7, #16]
 80126ba:	4313      	orrs	r3, r2
 80126bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80126c4:	f023 030c 	bic.w	r3, r3, #12
 80126c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80126ca:	693b      	ldr	r3, [r7, #16]
 80126cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80126d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80126d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	68da      	ldr	r2, [r3, #12]
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	69db      	ldr	r3, [r3, #28]
 80126de:	021b      	lsls	r3, r3, #8
 80126e0:	4313      	orrs	r3, r2
 80126e2:	693a      	ldr	r2, [r7, #16]
 80126e4:	4313      	orrs	r3, r2
 80126e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	691b      	ldr	r3, [r3, #16]
 80126ec:	011a      	lsls	r2, r3, #4
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	6a1b      	ldr	r3, [r3, #32]
 80126f2:	031b      	lsls	r3, r3, #12
 80126f4:	4313      	orrs	r3, r2
 80126f6:	693a      	ldr	r2, [r7, #16]
 80126f8:	4313      	orrs	r3, r2
 80126fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8012702:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801270a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	685a      	ldr	r2, [r3, #4]
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	695b      	ldr	r3, [r3, #20]
 8012714:	011b      	lsls	r3, r3, #4
 8012716:	4313      	orrs	r3, r2
 8012718:	68fa      	ldr	r2, [r7, #12]
 801271a:	4313      	orrs	r3, r2
 801271c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	697a      	ldr	r2, [r7, #20]
 8012724:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	693a      	ldr	r2, [r7, #16]
 801272c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	68fa      	ldr	r2, [r7, #12]
 8012734:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	2201      	movs	r2, #1
 801273a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801273e:	2300      	movs	r3, #0
}
 8012740:	4618      	mov	r0, r3
 8012742:	3718      	adds	r7, #24
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}

08012748 <HAL_TIM_Encoder_Start>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
 80147ec:	6039      	str	r1, [r7, #0]
=======
 8012748:	b580      	push	{r7, lr}
 801274a:	b082      	sub	sp, #8
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
<<<<<<< HEAD
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d002      	beq.n	80147fa <HAL_TIM_Encoder_Start+0x16>
 80147f4:	2b04      	cmp	r3, #4
 80147f6:	d008      	beq.n	801480a <HAL_TIM_Encoder_Start+0x26>
 80147f8:	e00f      	b.n	801481a <HAL_TIM_Encoder_Start+0x36>
=======
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d002      	beq.n	801275e <HAL_TIM_Encoder_Start+0x16>
 8012758:	2b04      	cmp	r3, #4
 801275a:	d008      	beq.n	801276e <HAL_TIM_Encoder_Start+0x26>
 801275c:	e00f      	b.n	801277e <HAL_TIM_Encoder_Start+0x36>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
<<<<<<< HEAD
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	2201      	movs	r2, #1
 8014800:	2100      	movs	r1, #0
 8014802:	4618      	mov	r0, r3
 8014804:	f000 fe1e 	bl	8015444 <TIM_CCxChannelCmd>
      break;
 8014808:	e016      	b.n	8014838 <HAL_TIM_Encoder_Start+0x54>
=======
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	2201      	movs	r2, #1
 8012764:	2100      	movs	r1, #0
 8012766:	4618      	mov	r0, r3
 8012768:	f000 fe1e 	bl	80133a8 <TIM_CCxChannelCmd>
      break;
 801276c:	e016      	b.n	801279c <HAL_TIM_Encoder_Start+0x54>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
<<<<<<< HEAD
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	2201      	movs	r2, #1
 8014810:	2104      	movs	r1, #4
 8014812:	4618      	mov	r0, r3
 8014814:	f000 fe16 	bl	8015444 <TIM_CCxChannelCmd>
      break;
 8014818:	e00e      	b.n	8014838 <HAL_TIM_Encoder_Start+0x54>
=======
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	2201      	movs	r2, #1
 8012774:	2104      	movs	r1, #4
 8012776:	4618      	mov	r0, r3
 8012778:	f000 fe16 	bl	80133a8 <TIM_CCxChannelCmd>
      break;
 801277c:	e00e      	b.n	801279c <HAL_TIM_Encoder_Start+0x54>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
<<<<<<< HEAD
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	2201      	movs	r2, #1
 8014820:	2100      	movs	r1, #0
 8014822:	4618      	mov	r0, r3
 8014824:	f000 fe0e 	bl	8015444 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	2201      	movs	r2, #1
 801482e:	2104      	movs	r1, #4
 8014830:	4618      	mov	r0, r3
 8014832:	f000 fe07 	bl	8015444 <TIM_CCxChannelCmd>
      break;
 8014836:	bf00      	nop
=======
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	2201      	movs	r2, #1
 8012784:	2100      	movs	r1, #0
 8012786:	4618      	mov	r0, r3
 8012788:	f000 fe0e 	bl	80133a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	2201      	movs	r2, #1
 8012792:	2104      	movs	r1, #4
 8012794:	4618      	mov	r0, r3
 8012796:	f000 fe07 	bl	80133a8 <TIM_CCxChannelCmd>
      break;
 801279a:	bf00      	nop
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	681a      	ldr	r2, [r3, #0]
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	f042 0201 	orr.w	r2, r2, #1
 8014846:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8014848:	2300      	movs	r3, #0
}
 801484a:	4618      	mov	r0, r3
 801484c:	3708      	adds	r7, #8
 801484e:	46bd      	mov	sp, r7
 8014850:	bd80      	pop	{r7, pc}

08014852 <HAL_TIM_IRQHandler>:
=======
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	681a      	ldr	r2, [r3, #0]
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	f042 0201 	orr.w	r2, r2, #1
 80127aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80127ac:	2300      	movs	r3, #0
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3708      	adds	r7, #8
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}

080127b6 <HAL_TIM_IRQHandler>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8014852:	b580      	push	{r7, lr}
 8014854:	b082      	sub	sp, #8
 8014856:	af00      	add	r7, sp, #0
 8014858:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	691b      	ldr	r3, [r3, #16]
 8014860:	f003 0302 	and.w	r3, r3, #2
 8014864:	2b02      	cmp	r3, #2
 8014866:	d122      	bne.n	80148ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	68db      	ldr	r3, [r3, #12]
 801486e:	f003 0302 	and.w	r3, r3, #2
 8014872:	2b02      	cmp	r3, #2
 8014874:	d11b      	bne.n	80148ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	f06f 0202 	mvn.w	r2, #2
 801487e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	2201      	movs	r2, #1
 8014884:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	699b      	ldr	r3, [r3, #24]
 801488c:	f003 0303 	and.w	r3, r3, #3
 8014890:	2b00      	cmp	r3, #0
 8014892:	d003      	beq.n	801489c <HAL_TIM_IRQHandler+0x4a>
=======
 80127b6:	b580      	push	{r7, lr}
 80127b8:	b082      	sub	sp, #8
 80127ba:	af00      	add	r7, sp, #0
 80127bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	691b      	ldr	r3, [r3, #16]
 80127c4:	f003 0302 	and.w	r3, r3, #2
 80127c8:	2b02      	cmp	r3, #2
 80127ca:	d122      	bne.n	8012812 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	68db      	ldr	r3, [r3, #12]
 80127d2:	f003 0302 	and.w	r3, r3, #2
 80127d6:	2b02      	cmp	r3, #2
 80127d8:	d11b      	bne.n	8012812 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	f06f 0202 	mvn.w	r2, #2
 80127e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2201      	movs	r2, #1
 80127e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	699b      	ldr	r3, [r3, #24]
 80127f0:	f003 0303 	and.w	r3, r3, #3
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d003      	beq.n	8012800 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	f000 facc 	bl	8014e32 <HAL_TIM_IC_CaptureCallback>
 801489a:	e005      	b.n	80148a8 <HAL_TIM_IRQHandler+0x56>
=======
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f000 facc 	bl	8012d96 <HAL_TIM_IC_CaptureCallback>
 80127fe:	e005      	b.n	801280c <HAL_TIM_IRQHandler+0x56>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 801489c:	6878      	ldr	r0, [r7, #4]
 801489e:	f000 fabe 	bl	8014e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f000 facf 	bl	8014e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	2200      	movs	r2, #0
 80148ac:	771a      	strb	r2, [r3, #28]
=======
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f000 fabe 	bl	8012d82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f000 facf 	bl	8012daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2200      	movs	r2, #0
 8012810:	771a      	strb	r2, [r3, #28]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	691b      	ldr	r3, [r3, #16]
 80148b4:	f003 0304 	and.w	r3, r3, #4
 80148b8:	2b04      	cmp	r3, #4
 80148ba:	d122      	bne.n	8014902 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	68db      	ldr	r3, [r3, #12]
 80148c2:	f003 0304 	and.w	r3, r3, #4
 80148c6:	2b04      	cmp	r3, #4
 80148c8:	d11b      	bne.n	8014902 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	f06f 0204 	mvn.w	r2, #4
 80148d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2202      	movs	r2, #2
 80148d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	699b      	ldr	r3, [r3, #24]
 80148e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d003      	beq.n	80148f0 <HAL_TIM_IRQHandler+0x9e>
=======
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	691b      	ldr	r3, [r3, #16]
 8012818:	f003 0304 	and.w	r3, r3, #4
 801281c:	2b04      	cmp	r3, #4
 801281e:	d122      	bne.n	8012866 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	68db      	ldr	r3, [r3, #12]
 8012826:	f003 0304 	and.w	r3, r3, #4
 801282a:	2b04      	cmp	r3, #4
 801282c:	d11b      	bne.n	8012866 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	f06f 0204 	mvn.w	r2, #4
 8012836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2202      	movs	r2, #2
 801283c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	699b      	ldr	r3, [r3, #24]
 8012844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012848:	2b00      	cmp	r3, #0
 801284a:	d003      	beq.n	8012854 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f000 faa2 	bl	8014e32 <HAL_TIM_IC_CaptureCallback>
 80148ee:	e005      	b.n	80148fc <HAL_TIM_IRQHandler+0xaa>
=======
 801284c:	6878      	ldr	r0, [r7, #4]
 801284e:	f000 faa2 	bl	8012d96 <HAL_TIM_IC_CaptureCallback>
 8012852:	e005      	b.n	8012860 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80148f0:	6878      	ldr	r0, [r7, #4]
 80148f2:	f000 fa94 	bl	8014e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80148f6:	6878      	ldr	r0, [r7, #4]
 80148f8:	f000 faa5 	bl	8014e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	2200      	movs	r2, #0
 8014900:	771a      	strb	r2, [r3, #28]
=======
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f000 fa94 	bl	8012d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801285a:	6878      	ldr	r0, [r7, #4]
 801285c:	f000 faa5 	bl	8012daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2200      	movs	r2, #0
 8012864:	771a      	strb	r2, [r3, #28]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	691b      	ldr	r3, [r3, #16]
 8014908:	f003 0308 	and.w	r3, r3, #8
 801490c:	2b08      	cmp	r3, #8
 801490e:	d122      	bne.n	8014956 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	68db      	ldr	r3, [r3, #12]
 8014916:	f003 0308 	and.w	r3, r3, #8
 801491a:	2b08      	cmp	r3, #8
 801491c:	d11b      	bne.n	8014956 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	f06f 0208 	mvn.w	r2, #8
 8014926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2204      	movs	r2, #4
 801492c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	69db      	ldr	r3, [r3, #28]
 8014934:	f003 0303 	and.w	r3, r3, #3
 8014938:	2b00      	cmp	r3, #0
 801493a:	d003      	beq.n	8014944 <HAL_TIM_IRQHandler+0xf2>
=======
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	691b      	ldr	r3, [r3, #16]
 801286c:	f003 0308 	and.w	r3, r3, #8
 8012870:	2b08      	cmp	r3, #8
 8012872:	d122      	bne.n	80128ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	68db      	ldr	r3, [r3, #12]
 801287a:	f003 0308 	and.w	r3, r3, #8
 801287e:	2b08      	cmp	r3, #8
 8012880:	d11b      	bne.n	80128ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	f06f 0208 	mvn.w	r2, #8
 801288a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2204      	movs	r2, #4
 8012890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	69db      	ldr	r3, [r3, #28]
 8012898:	f003 0303 	and.w	r3, r3, #3
 801289c:	2b00      	cmp	r3, #0
 801289e:	d003      	beq.n	80128a8 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 801493c:	6878      	ldr	r0, [r7, #4]
 801493e:	f000 fa78 	bl	8014e32 <HAL_TIM_IC_CaptureCallback>
 8014942:	e005      	b.n	8014950 <HAL_TIM_IRQHandler+0xfe>
=======
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	f000 fa78 	bl	8012d96 <HAL_TIM_IC_CaptureCallback>
 80128a6:	e005      	b.n	80128b4 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f000 fa6a 	bl	8014e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f000 fa7b 	bl	8014e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2200      	movs	r2, #0
 8014954:	771a      	strb	r2, [r3, #28]
=======
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f000 fa6a 	bl	8012d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80128ae:	6878      	ldr	r0, [r7, #4]
 80128b0:	f000 fa7b 	bl	8012daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2200      	movs	r2, #0
 80128b8:	771a      	strb	r2, [r3, #28]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	691b      	ldr	r3, [r3, #16]
 801495c:	f003 0310 	and.w	r3, r3, #16
 8014960:	2b10      	cmp	r3, #16
 8014962:	d122      	bne.n	80149aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	68db      	ldr	r3, [r3, #12]
 801496a:	f003 0310 	and.w	r3, r3, #16
 801496e:	2b10      	cmp	r3, #16
 8014970:	d11b      	bne.n	80149aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	f06f 0210 	mvn.w	r2, #16
 801497a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2208      	movs	r2, #8
 8014980:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	69db      	ldr	r3, [r3, #28]
 8014988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801498c:	2b00      	cmp	r3, #0
 801498e:	d003      	beq.n	8014998 <HAL_TIM_IRQHandler+0x146>
=======
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	691b      	ldr	r3, [r3, #16]
 80128c0:	f003 0310 	and.w	r3, r3, #16
 80128c4:	2b10      	cmp	r3, #16
 80128c6:	d122      	bne.n	801290e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	68db      	ldr	r3, [r3, #12]
 80128ce:	f003 0310 	and.w	r3, r3, #16
 80128d2:	2b10      	cmp	r3, #16
 80128d4:	d11b      	bne.n	801290e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f06f 0210 	mvn.w	r2, #16
 80128de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2208      	movs	r2, #8
 80128e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	69db      	ldr	r3, [r3, #28]
 80128ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d003      	beq.n	80128fc <HAL_TIM_IRQHandler+0x146>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8014990:	6878      	ldr	r0, [r7, #4]
 8014992:	f000 fa4e 	bl	8014e32 <HAL_TIM_IC_CaptureCallback>
 8014996:	e005      	b.n	80149a4 <HAL_TIM_IRQHandler+0x152>
=======
 80128f4:	6878      	ldr	r0, [r7, #4]
 80128f6:	f000 fa4e 	bl	8012d96 <HAL_TIM_IC_CaptureCallback>
 80128fa:	e005      	b.n	8012908 <HAL_TIM_IRQHandler+0x152>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8014998:	6878      	ldr	r0, [r7, #4]
 801499a:	f000 fa40 	bl	8014e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801499e:	6878      	ldr	r0, [r7, #4]
 80149a0:	f000 fa51 	bl	8014e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	2200      	movs	r2, #0
 80149a8:	771a      	strb	r2, [r3, #28]
=======
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f000 fa40 	bl	8012d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012902:	6878      	ldr	r0, [r7, #4]
 8012904:	f000 fa51 	bl	8012daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2200      	movs	r2, #0
 801290c:	771a      	strb	r2, [r3, #28]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	691b      	ldr	r3, [r3, #16]
 80149b0:	f003 0301 	and.w	r3, r3, #1
 80149b4:	2b01      	cmp	r3, #1
 80149b6:	d10e      	bne.n	80149d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	68db      	ldr	r3, [r3, #12]
 80149be:	f003 0301 	and.w	r3, r3, #1
 80149c2:	2b01      	cmp	r3, #1
 80149c4:	d107      	bne.n	80149d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	f06f 0201 	mvn.w	r2, #1
 80149ce:	611a      	str	r2, [r3, #16]
=======
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	691b      	ldr	r3, [r3, #16]
 8012914:	f003 0301 	and.w	r3, r3, #1
 8012918:	2b01      	cmp	r3, #1
 801291a:	d10e      	bne.n	801293a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	68db      	ldr	r3, [r3, #12]
 8012922:	f003 0301 	and.w	r3, r3, #1
 8012926:	2b01      	cmp	r3, #1
 8012928:	d107      	bne.n	801293a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	f06f 0201 	mvn.w	r2, #1
 8012932:	611a      	str	r2, [r3, #16]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f7fa f8f5 	bl	800ebc0 <HAL_TIM_PeriodElapsedCallback>
=======
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f7fa f8fb 	bl	800cb30 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	691b      	ldr	r3, [r3, #16]
 80149dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80149e0:	2b80      	cmp	r3, #128	; 0x80
 80149e2:	d10e      	bne.n	8014a02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	68db      	ldr	r3, [r3, #12]
 80149ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80149ee:	2b80      	cmp	r3, #128	; 0x80
 80149f0:	d107      	bne.n	8014a02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80149fa:	611a      	str	r2, [r3, #16]
=======
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	691b      	ldr	r3, [r3, #16]
 8012940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012944:	2b80      	cmp	r3, #128	; 0x80
 8012946:	d10e      	bne.n	8012966 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	68db      	ldr	r3, [r3, #12]
 801294e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012952:	2b80      	cmp	r3, #128	; 0x80
 8012954:	d107      	bne.n	8012966 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801295e:	611a      	str	r2, [r3, #16]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 80149fc:	6878      	ldr	r0, [r7, #4]
 80149fe:	f000 fee9 	bl	80157d4 <HAL_TIMEx_BreakCallback>
=======
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f000 fee9 	bl	8013738 <HAL_TIMEx_BreakCallback>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	691b      	ldr	r3, [r3, #16]
 8014a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a0c:	2b40      	cmp	r3, #64	; 0x40
 8014a0e:	d10e      	bne.n	8014a2e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	68db      	ldr	r3, [r3, #12]
 8014a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a1a:	2b40      	cmp	r3, #64	; 0x40
 8014a1c:	d107      	bne.n	8014a2e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014a26:	611a      	str	r2, [r3, #16]
=======
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	691b      	ldr	r3, [r3, #16]
 801296c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012970:	2b40      	cmp	r3, #64	; 0x40
 8012972:	d10e      	bne.n	8012992 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	68db      	ldr	r3, [r3, #12]
 801297a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801297e:	2b40      	cmp	r3, #64	; 0x40
 8012980:	d107      	bne.n	8012992 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801298a:	611a      	str	r2, [r3, #16]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f000 fa16 	bl	8014e5a <HAL_TIM_TriggerCallback>
=======
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f000 fa16 	bl	8012dbe <HAL_TIM_TriggerCallback>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	691b      	ldr	r3, [r3, #16]
 8014a34:	f003 0320 	and.w	r3, r3, #32
 8014a38:	2b20      	cmp	r3, #32
 8014a3a:	d10e      	bne.n	8014a5a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	68db      	ldr	r3, [r3, #12]
 8014a42:	f003 0320 	and.w	r3, r3, #32
 8014a46:	2b20      	cmp	r3, #32
 8014a48:	d107      	bne.n	8014a5a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	f06f 0220 	mvn.w	r2, #32
 8014a52:	611a      	str	r2, [r3, #16]
=======
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	691b      	ldr	r3, [r3, #16]
 8012998:	f003 0320 	and.w	r3, r3, #32
 801299c:	2b20      	cmp	r3, #32
 801299e:	d10e      	bne.n	80129be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	68db      	ldr	r3, [r3, #12]
 80129a6:	f003 0320 	and.w	r3, r3, #32
 80129aa:	2b20      	cmp	r3, #32
 80129ac:	d107      	bne.n	80129be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	f06f 0220 	mvn.w	r2, #32
 80129b6:	611a      	str	r2, [r3, #16]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8014a54:	6878      	ldr	r0, [r7, #4]
 8014a56:	f000 feb3 	bl	80157c0 <HAL_TIMEx_CommutCallback>
=======
 80129b8:	6878      	ldr	r0, [r7, #4]
 80129ba:	f000 feb3 	bl	8013724 <HAL_TIMEx_CommutCallback>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8014a5a:	bf00      	nop
 8014a5c:	3708      	adds	r7, #8
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}
	...

08014a64 <HAL_TIM_OC_ConfigChannel>:
=======
 80129be:	bf00      	nop
 80129c0:	3708      	adds	r7, #8
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
	...

080129c8 <HAL_TIM_OC_ConfigChannel>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
<<<<<<< HEAD
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b084      	sub	sp, #16
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	60f8      	str	r0, [r7, #12]
 8014a6c:	60b9      	str	r1, [r7, #8]
 8014a6e:	607a      	str	r2, [r7, #4]
=======
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b084      	sub	sp, #16
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	60f8      	str	r0, [r7, #12]
 80129d0:	60b9      	str	r1, [r7, #8]
 80129d2:	607a      	str	r2, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014a76:	2b01      	cmp	r3, #1
 8014a78:	d101      	bne.n	8014a7e <HAL_TIM_OC_ConfigChannel+0x1a>
 8014a7a:	2302      	movs	r3, #2
 8014a7c:	e04e      	b.n	8014b1c <HAL_TIM_OC_ConfigChannel+0xb8>
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	2201      	movs	r2, #1
 8014a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	2202      	movs	r2, #2
 8014a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	2b0c      	cmp	r3, #12
 8014a92:	d839      	bhi.n	8014b08 <HAL_TIM_OC_ConfigChannel+0xa4>
 8014a94:	a201      	add	r2, pc, #4	; (adr r2, 8014a9c <HAL_TIM_OC_ConfigChannel+0x38>)
 8014a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a9a:	bf00      	nop
 8014a9c:	08014ad1 	.word	0x08014ad1
 8014aa0:	08014b09 	.word	0x08014b09
 8014aa4:	08014b09 	.word	0x08014b09
 8014aa8:	08014b09 	.word	0x08014b09
 8014aac:	08014adf 	.word	0x08014adf
 8014ab0:	08014b09 	.word	0x08014b09
 8014ab4:	08014b09 	.word	0x08014b09
 8014ab8:	08014b09 	.word	0x08014b09
 8014abc:	08014aed 	.word	0x08014aed
 8014ac0:	08014b09 	.word	0x08014b09
 8014ac4:	08014b09 	.word	0x08014b09
 8014ac8:	08014b09 	.word	0x08014b09
 8014acc:	08014afb 	.word	0x08014afb
=======
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80129da:	2b01      	cmp	r3, #1
 80129dc:	d101      	bne.n	80129e2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80129de:	2302      	movs	r3, #2
 80129e0:	e04e      	b.n	8012a80 <HAL_TIM_OC_ConfigChannel+0xb8>
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	2201      	movs	r2, #1
 80129e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	2202      	movs	r2, #2
 80129ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2b0c      	cmp	r3, #12
 80129f6:	d839      	bhi.n	8012a6c <HAL_TIM_OC_ConfigChannel+0xa4>
 80129f8:	a201      	add	r2, pc, #4	; (adr r2, 8012a00 <HAL_TIM_OC_ConfigChannel+0x38>)
 80129fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129fe:	bf00      	nop
 8012a00:	08012a35 	.word	0x08012a35
 8012a04:	08012a6d 	.word	0x08012a6d
 8012a08:	08012a6d 	.word	0x08012a6d
 8012a0c:	08012a6d 	.word	0x08012a6d
 8012a10:	08012a43 	.word	0x08012a43
 8012a14:	08012a6d 	.word	0x08012a6d
 8012a18:	08012a6d 	.word	0x08012a6d
 8012a1c:	08012a6d 	.word	0x08012a6d
 8012a20:	08012a51 	.word	0x08012a51
 8012a24:	08012a6d 	.word	0x08012a6d
 8012a28:	08012a6d 	.word	0x08012a6d
 8012a2c:	08012a6d 	.word	0x08012a6d
 8012a30:	08012a5f 	.word	0x08012a5f
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	68b9      	ldr	r1, [r7, #8]
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f000 fa6a 	bl	8014fb0 <TIM_OC1_SetConfig>
      break;
 8014adc:	e015      	b.n	8014b0a <HAL_TIM_OC_ConfigChannel+0xa6>
=======
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	68b9      	ldr	r1, [r7, #8]
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f000 fa6a 	bl	8012f14 <TIM_OC1_SetConfig>
      break;
 8012a40:	e015      	b.n	8012a6e <HAL_TIM_OC_ConfigChannel+0xa6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	68b9      	ldr	r1, [r7, #8]
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f000 fad3 	bl	8015090 <TIM_OC2_SetConfig>
      break;
 8014aea:	e00e      	b.n	8014b0a <HAL_TIM_OC_ConfigChannel+0xa6>
=======
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	68b9      	ldr	r1, [r7, #8]
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f000 fad3 	bl	8012ff4 <TIM_OC2_SetConfig>
      break;
 8012a4e:	e00e      	b.n	8012a6e <HAL_TIM_OC_ConfigChannel+0xa6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	68b9      	ldr	r1, [r7, #8]
 8014af2:	4618      	mov	r0, r3
 8014af4:	f000 fb42 	bl	801517c <TIM_OC3_SetConfig>
      break;
 8014af8:	e007      	b.n	8014b0a <HAL_TIM_OC_ConfigChannel+0xa6>
=======
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	68b9      	ldr	r1, [r7, #8]
 8012a56:	4618      	mov	r0, r3
 8012a58:	f000 fb42 	bl	80130e0 <TIM_OC3_SetConfig>
      break;
 8012a5c:	e007      	b.n	8012a6e <HAL_TIM_OC_ConfigChannel+0xa6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	68b9      	ldr	r1, [r7, #8]
 8014b00:	4618      	mov	r0, r3
 8014b02:	f000 fbaf 	bl	8015264 <TIM_OC4_SetConfig>
      break;
 8014b06:	e000      	b.n	8014b0a <HAL_TIM_OC_ConfigChannel+0xa6>
=======
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	68b9      	ldr	r1, [r7, #8]
 8012a64:	4618      	mov	r0, r3
 8012a66:	f000 fbaf 	bl	80131c8 <TIM_OC4_SetConfig>
      break;
 8012a6a:	e000      	b.n	8012a6e <HAL_TIM_OC_ConfigChannel+0xa6>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    default:
      break;
<<<<<<< HEAD
 8014b08:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	2201      	movs	r2, #1
 8014b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	2200      	movs	r2, #0
 8014b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014b1a:	2300      	movs	r3, #0
}
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	3710      	adds	r7, #16
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}

08014b24 <HAL_TIM_PWM_ConfigChannel>:
=======
 8012a6c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	2201      	movs	r2, #1
 8012a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	2200      	movs	r2, #0
 8012a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012a7e:	2300      	movs	r3, #0
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	3710      	adds	r7, #16
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}

08012a88 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b084      	sub	sp, #16
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	60f8      	str	r0, [r7, #12]
 8014b2c:	60b9      	str	r1, [r7, #8]
 8014b2e:	607a      	str	r2, [r7, #4]
=======
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b084      	sub	sp, #16
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	607a      	str	r2, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014b36:	2b01      	cmp	r3, #1
 8014b38:	d101      	bne.n	8014b3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8014b3a:	2302      	movs	r3, #2
 8014b3c:	e0b4      	b.n	8014ca8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	2201      	movs	r2, #1
 8014b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	2202      	movs	r2, #2
 8014b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	2b0c      	cmp	r3, #12
 8014b52:	f200 809f 	bhi.w	8014c94 <HAL_TIM_PWM_ConfigChannel+0x170>
 8014b56:	a201      	add	r2, pc, #4	; (adr r2, 8014b5c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8014b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b5c:	08014b91 	.word	0x08014b91
 8014b60:	08014c95 	.word	0x08014c95
 8014b64:	08014c95 	.word	0x08014c95
 8014b68:	08014c95 	.word	0x08014c95
 8014b6c:	08014bd1 	.word	0x08014bd1
 8014b70:	08014c95 	.word	0x08014c95
 8014b74:	08014c95 	.word	0x08014c95
 8014b78:	08014c95 	.word	0x08014c95
 8014b7c:	08014c13 	.word	0x08014c13
 8014b80:	08014c95 	.word	0x08014c95
 8014b84:	08014c95 	.word	0x08014c95
 8014b88:	08014c95 	.word	0x08014c95
 8014b8c:	08014c53 	.word	0x08014c53
=======
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012a9a:	2b01      	cmp	r3, #1
 8012a9c:	d101      	bne.n	8012aa2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8012a9e:	2302      	movs	r3, #2
 8012aa0:	e0b4      	b.n	8012c0c <HAL_TIM_PWM_ConfigChannel+0x184>
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	2201      	movs	r2, #1
 8012aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	2202      	movs	r2, #2
 8012aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	2b0c      	cmp	r3, #12
 8012ab6:	f200 809f 	bhi.w	8012bf8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8012aba:	a201      	add	r2, pc, #4	; (adr r2, 8012ac0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8012abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ac0:	08012af5 	.word	0x08012af5
 8012ac4:	08012bf9 	.word	0x08012bf9
 8012ac8:	08012bf9 	.word	0x08012bf9
 8012acc:	08012bf9 	.word	0x08012bf9
 8012ad0:	08012b35 	.word	0x08012b35
 8012ad4:	08012bf9 	.word	0x08012bf9
 8012ad8:	08012bf9 	.word	0x08012bf9
 8012adc:	08012bf9 	.word	0x08012bf9
 8012ae0:	08012b77 	.word	0x08012b77
 8012ae4:	08012bf9 	.word	0x08012bf9
 8012ae8:	08012bf9 	.word	0x08012bf9
 8012aec:	08012bf9 	.word	0x08012bf9
 8012af0:	08012bb7 	.word	0x08012bb7
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	68b9      	ldr	r1, [r7, #8]
 8014b96:	4618      	mov	r0, r3
 8014b98:	f000 fa0a 	bl	8014fb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	699a      	ldr	r2, [r3, #24]
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	f042 0208 	orr.w	r2, r2, #8
 8014baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	699a      	ldr	r2, [r3, #24]
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	f022 0204 	bic.w	r2, r2, #4
 8014bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	6999      	ldr	r1, [r3, #24]
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	691a      	ldr	r2, [r3, #16]
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	430a      	orrs	r2, r1
 8014bcc:	619a      	str	r2, [r3, #24]
      break;
 8014bce:	e062      	b.n	8014c96 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	68b9      	ldr	r1, [r7, #8]
 8012afa:	4618      	mov	r0, r3
 8012afc:	f000 fa0a 	bl	8012f14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	699a      	ldr	r2, [r3, #24]
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	f042 0208 	orr.w	r2, r2, #8
 8012b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	699a      	ldr	r2, [r3, #24]
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	f022 0204 	bic.w	r2, r2, #4
 8012b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	6999      	ldr	r1, [r3, #24]
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	691a      	ldr	r2, [r3, #16]
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	430a      	orrs	r2, r1
 8012b30:	619a      	str	r2, [r3, #24]
      break;
 8012b32:	e062      	b.n	8012bfa <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	68b9      	ldr	r1, [r7, #8]
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f000 fa5a 	bl	8015090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	699a      	ldr	r2, [r3, #24]
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	699a      	ldr	r2, [r3, #24]
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	6999      	ldr	r1, [r3, #24]
 8014c02:	68bb      	ldr	r3, [r7, #8]
 8014c04:	691b      	ldr	r3, [r3, #16]
 8014c06:	021a      	lsls	r2, r3, #8
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	430a      	orrs	r2, r1
 8014c0e:	619a      	str	r2, [r3, #24]
      break;
 8014c10:	e041      	b.n	8014c96 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	68b9      	ldr	r1, [r7, #8]
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f000 fa5a 	bl	8012ff4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	699a      	ldr	r2, [r3, #24]
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	699a      	ldr	r2, [r3, #24]
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	6999      	ldr	r1, [r3, #24]
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	691b      	ldr	r3, [r3, #16]
 8012b6a:	021a      	lsls	r2, r3, #8
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	430a      	orrs	r2, r1
 8012b72:	619a      	str	r2, [r3, #24]
      break;
 8012b74:	e041      	b.n	8012bfa <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	68b9      	ldr	r1, [r7, #8]
 8014c18:	4618      	mov	r0, r3
 8014c1a:	f000 faaf 	bl	801517c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	69da      	ldr	r2, [r3, #28]
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	f042 0208 	orr.w	r2, r2, #8
 8014c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	69da      	ldr	r2, [r3, #28]
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	f022 0204 	bic.w	r2, r2, #4
 8014c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	69d9      	ldr	r1, [r3, #28]
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	691a      	ldr	r2, [r3, #16]
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	430a      	orrs	r2, r1
 8014c4e:	61da      	str	r2, [r3, #28]
      break;
 8014c50:	e021      	b.n	8014c96 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	68b9      	ldr	r1, [r7, #8]
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f000 faaf 	bl	80130e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	69da      	ldr	r2, [r3, #28]
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	f042 0208 	orr.w	r2, r2, #8
 8012b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	69da      	ldr	r2, [r3, #28]
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	f022 0204 	bic.w	r2, r2, #4
 8012ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	69d9      	ldr	r1, [r3, #28]
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	691a      	ldr	r2, [r3, #16]
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	430a      	orrs	r2, r1
 8012bb2:	61da      	str	r2, [r3, #28]
      break;
 8012bb4:	e021      	b.n	8012bfa <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	68b9      	ldr	r1, [r7, #8]
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f000 fb03 	bl	8015264 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	69da      	ldr	r2, [r3, #28]
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	69da      	ldr	r2, [r3, #28]
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	69d9      	ldr	r1, [r3, #28]
 8014c84:	68bb      	ldr	r3, [r7, #8]
 8014c86:	691b      	ldr	r3, [r3, #16]
 8014c88:	021a      	lsls	r2, r3, #8
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	430a      	orrs	r2, r1
 8014c90:	61da      	str	r2, [r3, #28]
      break;
 8014c92:	e000      	b.n	8014c96 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	68b9      	ldr	r1, [r7, #8]
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f000 fb03 	bl	80131c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	69da      	ldr	r2, [r3, #28]
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	69da      	ldr	r2, [r3, #28]
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	69d9      	ldr	r1, [r3, #28]
 8012be8:	68bb      	ldr	r3, [r7, #8]
 8012bea:	691b      	ldr	r3, [r3, #16]
 8012bec:	021a      	lsls	r2, r3, #8
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	430a      	orrs	r2, r1
 8012bf4:	61da      	str	r2, [r3, #28]
      break;
 8012bf6:	e000      	b.n	8012bfa <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    default:
      break;
<<<<<<< HEAD
 8014c94:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	2201      	movs	r2, #1
 8014c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014ca6:	2300      	movs	r3, #0
}
 8014ca8:	4618      	mov	r0, r3
 8014caa:	3710      	adds	r7, #16
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bd80      	pop	{r7, pc}

08014cb0 <HAL_TIM_ConfigClockSource>:
=======
 8012bf8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	2201      	movs	r2, #1
 8012bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	2200      	movs	r2, #0
 8012c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012c0a:	2300      	movs	r3, #0
}
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3710      	adds	r7, #16
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}

08012c14 <HAL_TIM_ConfigClockSource>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b084      	sub	sp, #16
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]
 8014cb8:	6039      	str	r1, [r7, #0]
=======
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b084      	sub	sp, #16
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
 8012c1c:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014cc0:	2b01      	cmp	r3, #1
 8014cc2:	d101      	bne.n	8014cc8 <HAL_TIM_ConfigClockSource+0x18>
 8014cc4:	2302      	movs	r3, #2
 8014cc6:	e0a6      	b.n	8014e16 <HAL_TIM_ConfigClockSource+0x166>
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	2201      	movs	r2, #1
 8014ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	2202      	movs	r2, #2
 8014cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012c24:	2b01      	cmp	r3, #1
 8012c26:	d101      	bne.n	8012c2c <HAL_TIM_ConfigClockSource+0x18>
 8012c28:	2302      	movs	r3, #2
 8012c2a:	e0a6      	b.n	8012d7a <HAL_TIM_ConfigClockSource+0x166>
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2201      	movs	r2, #1
 8012c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2202      	movs	r2, #2
 8012c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	689b      	ldr	r3, [r3, #8]
 8014cde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8014ce6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014cee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	68fa      	ldr	r2, [r7, #12]
 8014cf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	2b40      	cmp	r3, #64	; 0x40
 8014cfe:	d067      	beq.n	8014dd0 <HAL_TIM_ConfigClockSource+0x120>
 8014d00:	2b40      	cmp	r3, #64	; 0x40
 8014d02:	d80b      	bhi.n	8014d1c <HAL_TIM_ConfigClockSource+0x6c>
 8014d04:	2b10      	cmp	r3, #16
 8014d06:	d073      	beq.n	8014df0 <HAL_TIM_ConfigClockSource+0x140>
 8014d08:	2b10      	cmp	r3, #16
 8014d0a:	d802      	bhi.n	8014d12 <HAL_TIM_ConfigClockSource+0x62>
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d06f      	beq.n	8014df0 <HAL_TIM_ConfigClockSource+0x140>
=======
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	689b      	ldr	r3, [r3, #8]
 8012c42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8012c4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012c52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	68fa      	ldr	r2, [r7, #12]
 8012c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	2b40      	cmp	r3, #64	; 0x40
 8012c62:	d067      	beq.n	8012d34 <HAL_TIM_ConfigClockSource+0x120>
 8012c64:	2b40      	cmp	r3, #64	; 0x40
 8012c66:	d80b      	bhi.n	8012c80 <HAL_TIM_ConfigClockSource+0x6c>
 8012c68:	2b10      	cmp	r3, #16
 8012c6a:	d073      	beq.n	8012d54 <HAL_TIM_ConfigClockSource+0x140>
 8012c6c:	2b10      	cmp	r3, #16
 8012c6e:	d802      	bhi.n	8012c76 <HAL_TIM_ConfigClockSource+0x62>
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d06f      	beq.n	8012d54 <HAL_TIM_ConfigClockSource+0x140>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
<<<<<<< HEAD
 8014d10:	e078      	b.n	8014e04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8014d12:	2b20      	cmp	r3, #32
 8014d14:	d06c      	beq.n	8014df0 <HAL_TIM_ConfigClockSource+0x140>
 8014d16:	2b30      	cmp	r3, #48	; 0x30
 8014d18:	d06a      	beq.n	8014df0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8014d1a:	e073      	b.n	8014e04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8014d1c:	2b70      	cmp	r3, #112	; 0x70
 8014d1e:	d00d      	beq.n	8014d3c <HAL_TIM_ConfigClockSource+0x8c>
 8014d20:	2b70      	cmp	r3, #112	; 0x70
 8014d22:	d804      	bhi.n	8014d2e <HAL_TIM_ConfigClockSource+0x7e>
 8014d24:	2b50      	cmp	r3, #80	; 0x50
 8014d26:	d033      	beq.n	8014d90 <HAL_TIM_ConfigClockSource+0xe0>
 8014d28:	2b60      	cmp	r3, #96	; 0x60
 8014d2a:	d041      	beq.n	8014db0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8014d2c:	e06a      	b.n	8014e04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8014d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014d32:	d066      	beq.n	8014e02 <HAL_TIM_ConfigClockSource+0x152>
 8014d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014d38:	d017      	beq.n	8014d6a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8014d3a:	e063      	b.n	8014e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	6818      	ldr	r0, [r3, #0]
 8014d40:	683b      	ldr	r3, [r7, #0]
 8014d42:	6899      	ldr	r1, [r3, #8]
 8014d44:	683b      	ldr	r3, [r7, #0]
 8014d46:	685a      	ldr	r2, [r3, #4]
 8014d48:	683b      	ldr	r3, [r7, #0]
 8014d4a:	68db      	ldr	r3, [r3, #12]
 8014d4c:	f000 fb5a 	bl	8015404 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	689b      	ldr	r3, [r3, #8]
 8014d56:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8014d5e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	68fa      	ldr	r2, [r7, #12]
 8014d66:	609a      	str	r2, [r3, #8]
      break;
 8014d68:	e04c      	b.n	8014e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	6818      	ldr	r0, [r3, #0]
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	6899      	ldr	r1, [r3, #8]
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	685a      	ldr	r2, [r3, #4]
 8014d76:	683b      	ldr	r3, [r7, #0]
 8014d78:	68db      	ldr	r3, [r3, #12]
 8014d7a:	f000 fb43 	bl	8015404 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	689a      	ldr	r2, [r3, #8]
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014d8c:	609a      	str	r2, [r3, #8]
      break;
 8014d8e:	e039      	b.n	8014e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	6818      	ldr	r0, [r3, #0]
 8014d94:	683b      	ldr	r3, [r7, #0]
 8014d96:	6859      	ldr	r1, [r3, #4]
 8014d98:	683b      	ldr	r3, [r7, #0]
 8014d9a:	68db      	ldr	r3, [r3, #12]
 8014d9c:	461a      	mov	r2, r3
 8014d9e:	f000 fab7 	bl	8015310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	2150      	movs	r1, #80	; 0x50
 8014da8:	4618      	mov	r0, r3
 8014daa:	f000 fb10 	bl	80153ce <TIM_ITRx_SetConfig>
      break;
 8014dae:	e029      	b.n	8014e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	6818      	ldr	r0, [r3, #0]
 8014db4:	683b      	ldr	r3, [r7, #0]
 8014db6:	6859      	ldr	r1, [r3, #4]
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	68db      	ldr	r3, [r3, #12]
 8014dbc:	461a      	mov	r2, r3
 8014dbe:	f000 fad6 	bl	801536e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	2160      	movs	r1, #96	; 0x60
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f000 fb00 	bl	80153ce <TIM_ITRx_SetConfig>
      break;
 8014dce:	e019      	b.n	8014e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	6818      	ldr	r0, [r3, #0]
 8014dd4:	683b      	ldr	r3, [r7, #0]
 8014dd6:	6859      	ldr	r1, [r3, #4]
 8014dd8:	683b      	ldr	r3, [r7, #0]
 8014dda:	68db      	ldr	r3, [r3, #12]
 8014ddc:	461a      	mov	r2, r3
 8014dde:	f000 fa97 	bl	8015310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	2140      	movs	r1, #64	; 0x40
 8014de8:	4618      	mov	r0, r3
 8014dea:	f000 faf0 	bl	80153ce <TIM_ITRx_SetConfig>
      break;
 8014dee:	e009      	b.n	8014e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	681a      	ldr	r2, [r3, #0]
 8014df4:	683b      	ldr	r3, [r7, #0]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	4619      	mov	r1, r3
 8014dfa:	4610      	mov	r0, r2
 8014dfc:	f000 fae7 	bl	80153ce <TIM_ITRx_SetConfig>
      break;
 8014e00:	e000      	b.n	8014e04 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8014e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2201      	movs	r2, #1
 8014e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	2200      	movs	r2, #0
 8014e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014e14:	2300      	movs	r3, #0
}
 8014e16:	4618      	mov	r0, r3
 8014e18:	3710      	adds	r7, #16
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	bd80      	pop	{r7, pc}

08014e1e <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8012c74:	e078      	b.n	8012d68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8012c76:	2b20      	cmp	r3, #32
 8012c78:	d06c      	beq.n	8012d54 <HAL_TIM_ConfigClockSource+0x140>
 8012c7a:	2b30      	cmp	r3, #48	; 0x30
 8012c7c:	d06a      	beq.n	8012d54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8012c7e:	e073      	b.n	8012d68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8012c80:	2b70      	cmp	r3, #112	; 0x70
 8012c82:	d00d      	beq.n	8012ca0 <HAL_TIM_ConfigClockSource+0x8c>
 8012c84:	2b70      	cmp	r3, #112	; 0x70
 8012c86:	d804      	bhi.n	8012c92 <HAL_TIM_ConfigClockSource+0x7e>
 8012c88:	2b50      	cmp	r3, #80	; 0x50
 8012c8a:	d033      	beq.n	8012cf4 <HAL_TIM_ConfigClockSource+0xe0>
 8012c8c:	2b60      	cmp	r3, #96	; 0x60
 8012c8e:	d041      	beq.n	8012d14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8012c90:	e06a      	b.n	8012d68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8012c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012c96:	d066      	beq.n	8012d66 <HAL_TIM_ConfigClockSource+0x152>
 8012c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012c9c:	d017      	beq.n	8012cce <HAL_TIM_ConfigClockSource+0xba>
      break;
 8012c9e:	e063      	b.n	8012d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	6818      	ldr	r0, [r3, #0]
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	6899      	ldr	r1, [r3, #8]
 8012ca8:	683b      	ldr	r3, [r7, #0]
 8012caa:	685a      	ldr	r2, [r3, #4]
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	68db      	ldr	r3, [r3, #12]
 8012cb0:	f000 fb5a 	bl	8013368 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	689b      	ldr	r3, [r3, #8]
 8012cba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012cc2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	68fa      	ldr	r2, [r7, #12]
 8012cca:	609a      	str	r2, [r3, #8]
      break;
 8012ccc:	e04c      	b.n	8012d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	6818      	ldr	r0, [r3, #0]
 8012cd2:	683b      	ldr	r3, [r7, #0]
 8012cd4:	6899      	ldr	r1, [r3, #8]
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	685a      	ldr	r2, [r3, #4]
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	68db      	ldr	r3, [r3, #12]
 8012cde:	f000 fb43 	bl	8013368 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	689a      	ldr	r2, [r3, #8]
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012cf0:	609a      	str	r2, [r3, #8]
      break;
 8012cf2:	e039      	b.n	8012d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	6818      	ldr	r0, [r3, #0]
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	6859      	ldr	r1, [r3, #4]
 8012cfc:	683b      	ldr	r3, [r7, #0]
 8012cfe:	68db      	ldr	r3, [r3, #12]
 8012d00:	461a      	mov	r2, r3
 8012d02:	f000 fab7 	bl	8013274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	2150      	movs	r1, #80	; 0x50
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f000 fb10 	bl	8013332 <TIM_ITRx_SetConfig>
      break;
 8012d12:	e029      	b.n	8012d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6818      	ldr	r0, [r3, #0]
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	6859      	ldr	r1, [r3, #4]
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	68db      	ldr	r3, [r3, #12]
 8012d20:	461a      	mov	r2, r3
 8012d22:	f000 fad6 	bl	80132d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	2160      	movs	r1, #96	; 0x60
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f000 fb00 	bl	8013332 <TIM_ITRx_SetConfig>
      break;
 8012d32:	e019      	b.n	8012d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	6818      	ldr	r0, [r3, #0]
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	6859      	ldr	r1, [r3, #4]
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	68db      	ldr	r3, [r3, #12]
 8012d40:	461a      	mov	r2, r3
 8012d42:	f000 fa97 	bl	8013274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	2140      	movs	r1, #64	; 0x40
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f000 faf0 	bl	8013332 <TIM_ITRx_SetConfig>
      break;
 8012d52:	e009      	b.n	8012d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681a      	ldr	r2, [r3, #0]
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	4610      	mov	r0, r2
 8012d60:	f000 fae7 	bl	8013332 <TIM_ITRx_SetConfig>
      break;
 8012d64:	e000      	b.n	8012d68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8012d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2201      	movs	r2, #1
 8012d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2200      	movs	r2, #0
 8012d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012d78:	2300      	movs	r3, #0
}
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	3710      	adds	r7, #16
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}

08012d82 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8014e1e:	b480      	push	{r7}
 8014e20:	b083      	sub	sp, #12
 8014e22:	af00      	add	r7, sp, #0
 8014e24:	6078      	str	r0, [r7, #4]
=======
 8012d82:	b480      	push	{r7}
 8012d84:	b083      	sub	sp, #12
 8012d86:	af00      	add	r7, sp, #0
 8012d88:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8014e26:	bf00      	nop
 8014e28:	370c      	adds	r7, #12
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e30:	4770      	bx	lr

08014e32 <HAL_TIM_IC_CaptureCallback>:
=======
 8012d8a:	bf00      	nop
 8012d8c:	370c      	adds	r7, #12
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d94:	4770      	bx	lr

08012d96 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8014e32:	b480      	push	{r7}
 8014e34:	b083      	sub	sp, #12
 8014e36:	af00      	add	r7, sp, #0
 8014e38:	6078      	str	r0, [r7, #4]
=======
 8012d96:	b480      	push	{r7}
 8012d98:	b083      	sub	sp, #12
 8012d9a:	af00      	add	r7, sp, #0
 8012d9c:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8014e3a:	bf00      	nop
 8014e3c:	370c      	adds	r7, #12
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e44:	4770      	bx	lr

08014e46 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8012d9e:	bf00      	nop
 8012da0:	370c      	adds	r7, #12
 8012da2:	46bd      	mov	sp, r7
 8012da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da8:	4770      	bx	lr

08012daa <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8014e46:	b480      	push	{r7}
 8014e48:	b083      	sub	sp, #12
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	6078      	str	r0, [r7, #4]
=======
 8012daa:	b480      	push	{r7}
 8012dac:	b083      	sub	sp, #12
 8012dae:	af00      	add	r7, sp, #0
 8012db0:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8014e4e:	bf00      	nop
 8014e50:	370c      	adds	r7, #12
 8014e52:	46bd      	mov	sp, r7
 8014e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e58:	4770      	bx	lr

08014e5a <HAL_TIM_TriggerCallback>:
=======
 8012db2:	bf00      	nop
 8012db4:	370c      	adds	r7, #12
 8012db6:	46bd      	mov	sp, r7
 8012db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbc:	4770      	bx	lr

08012dbe <HAL_TIM_TriggerCallback>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8014e5a:	b480      	push	{r7}
 8014e5c:	b083      	sub	sp, #12
 8014e5e:	af00      	add	r7, sp, #0
 8014e60:	6078      	str	r0, [r7, #4]
=======
 8012dbe:	b480      	push	{r7}
 8012dc0:	b083      	sub	sp, #12
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8014e62:	bf00      	nop
 8014e64:	370c      	adds	r7, #12
 8014e66:	46bd      	mov	sp, r7
 8014e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6c:	4770      	bx	lr
	...

08014e70 <TIM_Base_SetConfig>:
=======
 8012dc6:	bf00      	nop
 8012dc8:	370c      	adds	r7, #12
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd0:	4770      	bx	lr
	...

08012dd4 <TIM_Base_SetConfig>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8014e70:	b480      	push	{r7}
 8014e72:	b085      	sub	sp, #20
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
 8014e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	4a40      	ldr	r2, [pc, #256]	; (8014f84 <TIM_Base_SetConfig+0x114>)
 8014e84:	4293      	cmp	r3, r2
 8014e86:	d013      	beq.n	8014eb0 <TIM_Base_SetConfig+0x40>
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014e8e:	d00f      	beq.n	8014eb0 <TIM_Base_SetConfig+0x40>
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	4a3d      	ldr	r2, [pc, #244]	; (8014f88 <TIM_Base_SetConfig+0x118>)
 8014e94:	4293      	cmp	r3, r2
 8014e96:	d00b      	beq.n	8014eb0 <TIM_Base_SetConfig+0x40>
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	4a3c      	ldr	r2, [pc, #240]	; (8014f8c <TIM_Base_SetConfig+0x11c>)
 8014e9c:	4293      	cmp	r3, r2
 8014e9e:	d007      	beq.n	8014eb0 <TIM_Base_SetConfig+0x40>
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	4a3b      	ldr	r2, [pc, #236]	; (8014f90 <TIM_Base_SetConfig+0x120>)
 8014ea4:	4293      	cmp	r3, r2
 8014ea6:	d003      	beq.n	8014eb0 <TIM_Base_SetConfig+0x40>
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	4a3a      	ldr	r2, [pc, #232]	; (8014f94 <TIM_Base_SetConfig+0x124>)
 8014eac:	4293      	cmp	r3, r2
 8014eae:	d108      	bne.n	8014ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	685b      	ldr	r3, [r3, #4]
 8014ebc:	68fa      	ldr	r2, [r7, #12]
 8014ebe:	4313      	orrs	r3, r2
 8014ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	4a2f      	ldr	r2, [pc, #188]	; (8014f84 <TIM_Base_SetConfig+0x114>)
 8014ec6:	4293      	cmp	r3, r2
 8014ec8:	d02b      	beq.n	8014f22 <TIM_Base_SetConfig+0xb2>
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014ed0:	d027      	beq.n	8014f22 <TIM_Base_SetConfig+0xb2>
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	4a2c      	ldr	r2, [pc, #176]	; (8014f88 <TIM_Base_SetConfig+0x118>)
 8014ed6:	4293      	cmp	r3, r2
 8014ed8:	d023      	beq.n	8014f22 <TIM_Base_SetConfig+0xb2>
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	4a2b      	ldr	r2, [pc, #172]	; (8014f8c <TIM_Base_SetConfig+0x11c>)
 8014ede:	4293      	cmp	r3, r2
 8014ee0:	d01f      	beq.n	8014f22 <TIM_Base_SetConfig+0xb2>
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	4a2a      	ldr	r2, [pc, #168]	; (8014f90 <TIM_Base_SetConfig+0x120>)
 8014ee6:	4293      	cmp	r3, r2
 8014ee8:	d01b      	beq.n	8014f22 <TIM_Base_SetConfig+0xb2>
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	4a29      	ldr	r2, [pc, #164]	; (8014f94 <TIM_Base_SetConfig+0x124>)
 8014eee:	4293      	cmp	r3, r2
 8014ef0:	d017      	beq.n	8014f22 <TIM_Base_SetConfig+0xb2>
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	4a28      	ldr	r2, [pc, #160]	; (8014f98 <TIM_Base_SetConfig+0x128>)
 8014ef6:	4293      	cmp	r3, r2
 8014ef8:	d013      	beq.n	8014f22 <TIM_Base_SetConfig+0xb2>
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	4a27      	ldr	r2, [pc, #156]	; (8014f9c <TIM_Base_SetConfig+0x12c>)
 8014efe:	4293      	cmp	r3, r2
 8014f00:	d00f      	beq.n	8014f22 <TIM_Base_SetConfig+0xb2>
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	4a26      	ldr	r2, [pc, #152]	; (8014fa0 <TIM_Base_SetConfig+0x130>)
 8014f06:	4293      	cmp	r3, r2
 8014f08:	d00b      	beq.n	8014f22 <TIM_Base_SetConfig+0xb2>
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	4a25      	ldr	r2, [pc, #148]	; (8014fa4 <TIM_Base_SetConfig+0x134>)
 8014f0e:	4293      	cmp	r3, r2
 8014f10:	d007      	beq.n	8014f22 <TIM_Base_SetConfig+0xb2>
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	4a24      	ldr	r2, [pc, #144]	; (8014fa8 <TIM_Base_SetConfig+0x138>)
 8014f16:	4293      	cmp	r3, r2
 8014f18:	d003      	beq.n	8014f22 <TIM_Base_SetConfig+0xb2>
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	4a23      	ldr	r2, [pc, #140]	; (8014fac <TIM_Base_SetConfig+0x13c>)
 8014f1e:	4293      	cmp	r3, r2
 8014f20:	d108      	bne.n	8014f34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	68db      	ldr	r3, [r3, #12]
 8014f2e:	68fa      	ldr	r2, [r7, #12]
 8014f30:	4313      	orrs	r3, r2
 8014f32:	60fb      	str	r3, [r7, #12]
=======
 8012dd4:	b480      	push	{r7}
 8012dd6:	b085      	sub	sp, #20
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
 8012ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	4a40      	ldr	r2, [pc, #256]	; (8012ee8 <TIM_Base_SetConfig+0x114>)
 8012de8:	4293      	cmp	r3, r2
 8012dea:	d013      	beq.n	8012e14 <TIM_Base_SetConfig+0x40>
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012df2:	d00f      	beq.n	8012e14 <TIM_Base_SetConfig+0x40>
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	4a3d      	ldr	r2, [pc, #244]	; (8012eec <TIM_Base_SetConfig+0x118>)
 8012df8:	4293      	cmp	r3, r2
 8012dfa:	d00b      	beq.n	8012e14 <TIM_Base_SetConfig+0x40>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	4a3c      	ldr	r2, [pc, #240]	; (8012ef0 <TIM_Base_SetConfig+0x11c>)
 8012e00:	4293      	cmp	r3, r2
 8012e02:	d007      	beq.n	8012e14 <TIM_Base_SetConfig+0x40>
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	4a3b      	ldr	r2, [pc, #236]	; (8012ef4 <TIM_Base_SetConfig+0x120>)
 8012e08:	4293      	cmp	r3, r2
 8012e0a:	d003      	beq.n	8012e14 <TIM_Base_SetConfig+0x40>
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	4a3a      	ldr	r2, [pc, #232]	; (8012ef8 <TIM_Base_SetConfig+0x124>)
 8012e10:	4293      	cmp	r3, r2
 8012e12:	d108      	bne.n	8012e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	685b      	ldr	r3, [r3, #4]
 8012e20:	68fa      	ldr	r2, [r7, #12]
 8012e22:	4313      	orrs	r3, r2
 8012e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	4a2f      	ldr	r2, [pc, #188]	; (8012ee8 <TIM_Base_SetConfig+0x114>)
 8012e2a:	4293      	cmp	r3, r2
 8012e2c:	d02b      	beq.n	8012e86 <TIM_Base_SetConfig+0xb2>
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012e34:	d027      	beq.n	8012e86 <TIM_Base_SetConfig+0xb2>
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	4a2c      	ldr	r2, [pc, #176]	; (8012eec <TIM_Base_SetConfig+0x118>)
 8012e3a:	4293      	cmp	r3, r2
 8012e3c:	d023      	beq.n	8012e86 <TIM_Base_SetConfig+0xb2>
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	4a2b      	ldr	r2, [pc, #172]	; (8012ef0 <TIM_Base_SetConfig+0x11c>)
 8012e42:	4293      	cmp	r3, r2
 8012e44:	d01f      	beq.n	8012e86 <TIM_Base_SetConfig+0xb2>
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	4a2a      	ldr	r2, [pc, #168]	; (8012ef4 <TIM_Base_SetConfig+0x120>)
 8012e4a:	4293      	cmp	r3, r2
 8012e4c:	d01b      	beq.n	8012e86 <TIM_Base_SetConfig+0xb2>
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	4a29      	ldr	r2, [pc, #164]	; (8012ef8 <TIM_Base_SetConfig+0x124>)
 8012e52:	4293      	cmp	r3, r2
 8012e54:	d017      	beq.n	8012e86 <TIM_Base_SetConfig+0xb2>
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	4a28      	ldr	r2, [pc, #160]	; (8012efc <TIM_Base_SetConfig+0x128>)
 8012e5a:	4293      	cmp	r3, r2
 8012e5c:	d013      	beq.n	8012e86 <TIM_Base_SetConfig+0xb2>
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	4a27      	ldr	r2, [pc, #156]	; (8012f00 <TIM_Base_SetConfig+0x12c>)
 8012e62:	4293      	cmp	r3, r2
 8012e64:	d00f      	beq.n	8012e86 <TIM_Base_SetConfig+0xb2>
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	4a26      	ldr	r2, [pc, #152]	; (8012f04 <TIM_Base_SetConfig+0x130>)
 8012e6a:	4293      	cmp	r3, r2
 8012e6c:	d00b      	beq.n	8012e86 <TIM_Base_SetConfig+0xb2>
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	4a25      	ldr	r2, [pc, #148]	; (8012f08 <TIM_Base_SetConfig+0x134>)
 8012e72:	4293      	cmp	r3, r2
 8012e74:	d007      	beq.n	8012e86 <TIM_Base_SetConfig+0xb2>
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	4a24      	ldr	r2, [pc, #144]	; (8012f0c <TIM_Base_SetConfig+0x138>)
 8012e7a:	4293      	cmp	r3, r2
 8012e7c:	d003      	beq.n	8012e86 <TIM_Base_SetConfig+0xb2>
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	4a23      	ldr	r2, [pc, #140]	; (8012f10 <TIM_Base_SetConfig+0x13c>)
 8012e82:	4293      	cmp	r3, r2
 8012e84:	d108      	bne.n	8012e98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	68db      	ldr	r3, [r3, #12]
 8012e92:	68fa      	ldr	r2, [r7, #12]
 8012e94:	4313      	orrs	r3, r2
 8012e96:	60fb      	str	r3, [r7, #12]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014f3a:	683b      	ldr	r3, [r7, #0]
 8014f3c:	695b      	ldr	r3, [r3, #20]
 8014f3e:	4313      	orrs	r3, r2
 8014f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	68fa      	ldr	r2, [r7, #12]
 8014f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014f48:	683b      	ldr	r3, [r7, #0]
 8014f4a:	689a      	ldr	r2, [r3, #8]
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	681a      	ldr	r2, [r3, #0]
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	4a0a      	ldr	r2, [pc, #40]	; (8014f84 <TIM_Base_SetConfig+0x114>)
 8014f5c:	4293      	cmp	r3, r2
 8014f5e:	d003      	beq.n	8014f68 <TIM_Base_SetConfig+0xf8>
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	4a0c      	ldr	r2, [pc, #48]	; (8014f94 <TIM_Base_SetConfig+0x124>)
 8014f64:	4293      	cmp	r3, r2
 8014f66:	d103      	bne.n	8014f70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	691a      	ldr	r2, [r3, #16]
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	695b      	ldr	r3, [r3, #20]
 8012ea2:	4313      	orrs	r3, r2
 8012ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	68fa      	ldr	r2, [r7, #12]
 8012eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	689a      	ldr	r2, [r3, #8]
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	681a      	ldr	r2, [r3, #0]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	4a0a      	ldr	r2, [pc, #40]	; (8012ee8 <TIM_Base_SetConfig+0x114>)
 8012ec0:	4293      	cmp	r3, r2
 8012ec2:	d003      	beq.n	8012ecc <TIM_Base_SetConfig+0xf8>
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	4a0c      	ldr	r2, [pc, #48]	; (8012ef8 <TIM_Base_SetConfig+0x124>)
 8012ec8:	4293      	cmp	r3, r2
 8012eca:	d103      	bne.n	8012ed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012ecc:	683b      	ldr	r3, [r7, #0]
 8012ece:	691a      	ldr	r2, [r3, #16]
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2201      	movs	r2, #1
 8014f74:	615a      	str	r2, [r3, #20]
}
 8014f76:	bf00      	nop
 8014f78:	3714      	adds	r7, #20
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f80:	4770      	bx	lr
 8014f82:	bf00      	nop
 8014f84:	40010000 	.word	0x40010000
 8014f88:	40000400 	.word	0x40000400
 8014f8c:	40000800 	.word	0x40000800
 8014f90:	40000c00 	.word	0x40000c00
 8014f94:	40010400 	.word	0x40010400
 8014f98:	40014000 	.word	0x40014000
 8014f9c:	40014400 	.word	0x40014400
 8014fa0:	40014800 	.word	0x40014800
 8014fa4:	40001800 	.word	0x40001800
 8014fa8:	40001c00 	.word	0x40001c00
 8014fac:	40002000 	.word	0x40002000

08014fb0 <TIM_OC1_SetConfig>:
=======
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2201      	movs	r2, #1
 8012ed8:	615a      	str	r2, [r3, #20]
}
 8012eda:	bf00      	nop
 8012edc:	3714      	adds	r7, #20
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee4:	4770      	bx	lr
 8012ee6:	bf00      	nop
 8012ee8:	40010000 	.word	0x40010000
 8012eec:	40000400 	.word	0x40000400
 8012ef0:	40000800 	.word	0x40000800
 8012ef4:	40000c00 	.word	0x40000c00
 8012ef8:	40010400 	.word	0x40010400
 8012efc:	40014000 	.word	0x40014000
 8012f00:	40014400 	.word	0x40014400
 8012f04:	40014800 	.word	0x40014800
 8012f08:	40001800 	.word	0x40001800
 8012f0c:	40001c00 	.word	0x40001c00
 8012f10:	40002000 	.word	0x40002000

08012f14 <TIM_OC1_SetConfig>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8014fb0:	b480      	push	{r7}
 8014fb2:	b087      	sub	sp, #28
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
 8014fb8:	6039      	str	r1, [r7, #0]
=======
 8012f14:	b480      	push	{r7}
 8012f16:	b087      	sub	sp, #28
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
 8012f1c:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	6a1b      	ldr	r3, [r3, #32]
 8014fbe:	f023 0201 	bic.w	r2, r3, #1
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	6a1b      	ldr	r3, [r3, #32]
 8014fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	685b      	ldr	r3, [r3, #4]
 8014fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	699b      	ldr	r3, [r3, #24]
 8014fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	f023 0303 	bic.w	r3, r3, #3
 8014fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014fe8:	683b      	ldr	r3, [r7, #0]
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	68fa      	ldr	r2, [r7, #12]
 8014fee:	4313      	orrs	r3, r2
 8014ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014ff2:	697b      	ldr	r3, [r7, #20]
 8014ff4:	f023 0302 	bic.w	r3, r3, #2
 8014ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	689b      	ldr	r3, [r3, #8]
 8014ffe:	697a      	ldr	r2, [r7, #20]
 8015000:	4313      	orrs	r3, r2
 8015002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	4a20      	ldr	r2, [pc, #128]	; (8015088 <TIM_OC1_SetConfig+0xd8>)
 8015008:	4293      	cmp	r3, r2
 801500a:	d003      	beq.n	8015014 <TIM_OC1_SetConfig+0x64>
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	4a1f      	ldr	r2, [pc, #124]	; (801508c <TIM_OC1_SetConfig+0xdc>)
 8015010:	4293      	cmp	r3, r2
 8015012:	d10c      	bne.n	801502e <TIM_OC1_SetConfig+0x7e>
=======
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6a1b      	ldr	r3, [r3, #32]
 8012f22:	f023 0201 	bic.w	r2, r3, #1
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	6a1b      	ldr	r3, [r3, #32]
 8012f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	699b      	ldr	r3, [r3, #24]
 8012f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	f023 0303 	bic.w	r3, r3, #3
 8012f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	68fa      	ldr	r2, [r7, #12]
 8012f52:	4313      	orrs	r3, r2
 8012f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	f023 0302 	bic.w	r3, r3, #2
 8012f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012f5e:	683b      	ldr	r3, [r7, #0]
 8012f60:	689b      	ldr	r3, [r3, #8]
 8012f62:	697a      	ldr	r2, [r7, #20]
 8012f64:	4313      	orrs	r3, r2
 8012f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	4a20      	ldr	r2, [pc, #128]	; (8012fec <TIM_OC1_SetConfig+0xd8>)
 8012f6c:	4293      	cmp	r3, r2
 8012f6e:	d003      	beq.n	8012f78 <TIM_OC1_SetConfig+0x64>
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	4a1f      	ldr	r2, [pc, #124]	; (8012ff0 <TIM_OC1_SetConfig+0xdc>)
 8012f74:	4293      	cmp	r3, r2
 8012f76:	d10c      	bne.n	8012f92 <TIM_OC1_SetConfig+0x7e>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8015014:	697b      	ldr	r3, [r7, #20]
 8015016:	f023 0308 	bic.w	r3, r3, #8
 801501a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801501c:	683b      	ldr	r3, [r7, #0]
 801501e:	68db      	ldr	r3, [r3, #12]
 8015020:	697a      	ldr	r2, [r7, #20]
 8015022:	4313      	orrs	r3, r2
 8015024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8015026:	697b      	ldr	r3, [r7, #20]
 8015028:	f023 0304 	bic.w	r3, r3, #4
 801502c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	4a15      	ldr	r2, [pc, #84]	; (8015088 <TIM_OC1_SetConfig+0xd8>)
 8015032:	4293      	cmp	r3, r2
 8015034:	d003      	beq.n	801503e <TIM_OC1_SetConfig+0x8e>
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	4a14      	ldr	r2, [pc, #80]	; (801508c <TIM_OC1_SetConfig+0xdc>)
 801503a:	4293      	cmp	r3, r2
 801503c:	d111      	bne.n	8015062 <TIM_OC1_SetConfig+0xb2>
=======
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	f023 0308 	bic.w	r3, r3, #8
 8012f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	68db      	ldr	r3, [r3, #12]
 8012f84:	697a      	ldr	r2, [r7, #20]
 8012f86:	4313      	orrs	r3, r2
 8012f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012f8a:	697b      	ldr	r3, [r7, #20]
 8012f8c:	f023 0304 	bic.w	r3, r3, #4
 8012f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	4a15      	ldr	r2, [pc, #84]	; (8012fec <TIM_OC1_SetConfig+0xd8>)
 8012f96:	4293      	cmp	r3, r2
 8012f98:	d003      	beq.n	8012fa2 <TIM_OC1_SetConfig+0x8e>
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	4a14      	ldr	r2, [pc, #80]	; (8012ff0 <TIM_OC1_SetConfig+0xdc>)
 8012f9e:	4293      	cmp	r3, r2
 8012fa0:	d111      	bne.n	8012fc6 <TIM_OC1_SetConfig+0xb2>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 801503e:	693b      	ldr	r3, [r7, #16]
 8015040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8015046:	693b      	ldr	r3, [r7, #16]
 8015048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801504c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	695b      	ldr	r3, [r3, #20]
 8015052:	693a      	ldr	r2, [r7, #16]
 8015054:	4313      	orrs	r3, r2
 8015056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8015058:	683b      	ldr	r3, [r7, #0]
 801505a:	699b      	ldr	r3, [r3, #24]
 801505c:	693a      	ldr	r2, [r7, #16]
 801505e:	4313      	orrs	r3, r2
 8015060:	613b      	str	r3, [r7, #16]
=======
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012faa:	693b      	ldr	r3, [r7, #16]
 8012fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	695b      	ldr	r3, [r3, #20]
 8012fb6:	693a      	ldr	r2, [r7, #16]
 8012fb8:	4313      	orrs	r3, r2
 8012fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	699b      	ldr	r3, [r3, #24]
 8012fc0:	693a      	ldr	r2, [r7, #16]
 8012fc2:	4313      	orrs	r3, r2
 8012fc4:	613b      	str	r3, [r7, #16]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	693a      	ldr	r2, [r7, #16]
 8015066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	68fa      	ldr	r2, [r7, #12]
 801506c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	685a      	ldr	r2, [r3, #4]
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	697a      	ldr	r2, [r7, #20]
 801507a:	621a      	str	r2, [r3, #32]
}
 801507c:	bf00      	nop
 801507e:	371c      	adds	r7, #28
 8015080:	46bd      	mov	sp, r7
 8015082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015086:	4770      	bx	lr
 8015088:	40010000 	.word	0x40010000
 801508c:	40010400 	.word	0x40010400

08015090 <TIM_OC2_SetConfig>:
=======
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	693a      	ldr	r2, [r7, #16]
 8012fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	68fa      	ldr	r2, [r7, #12]
 8012fd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	685a      	ldr	r2, [r3, #4]
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	697a      	ldr	r2, [r7, #20]
 8012fde:	621a      	str	r2, [r3, #32]
}
 8012fe0:	bf00      	nop
 8012fe2:	371c      	adds	r7, #28
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fea:	4770      	bx	lr
 8012fec:	40010000 	.word	0x40010000
 8012ff0:	40010400 	.word	0x40010400

08012ff4 <TIM_OC2_SetConfig>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8015090:	b480      	push	{r7}
 8015092:	b087      	sub	sp, #28
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
 8015098:	6039      	str	r1, [r7, #0]
=======
 8012ff4:	b480      	push	{r7}
 8012ff6:	b087      	sub	sp, #28
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
 8012ffc:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	6a1b      	ldr	r3, [r3, #32]
 801509e:	f023 0210 	bic.w	r2, r3, #16
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	6a1b      	ldr	r3, [r3, #32]
 80150aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	685b      	ldr	r3, [r3, #4]
 80150b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	699b      	ldr	r3, [r3, #24]
 80150b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80150be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80150c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	021b      	lsls	r3, r3, #8
 80150ce:	68fa      	ldr	r2, [r7, #12]
 80150d0:	4313      	orrs	r3, r2
 80150d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80150d4:	697b      	ldr	r3, [r7, #20]
 80150d6:	f023 0320 	bic.w	r3, r3, #32
 80150da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80150dc:	683b      	ldr	r3, [r7, #0]
 80150de:	689b      	ldr	r3, [r3, #8]
 80150e0:	011b      	lsls	r3, r3, #4
 80150e2:	697a      	ldr	r2, [r7, #20]
 80150e4:	4313      	orrs	r3, r2
 80150e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	4a22      	ldr	r2, [pc, #136]	; (8015174 <TIM_OC2_SetConfig+0xe4>)
 80150ec:	4293      	cmp	r3, r2
 80150ee:	d003      	beq.n	80150f8 <TIM_OC2_SetConfig+0x68>
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	4a21      	ldr	r2, [pc, #132]	; (8015178 <TIM_OC2_SetConfig+0xe8>)
 80150f4:	4293      	cmp	r3, r2
 80150f6:	d10d      	bne.n	8015114 <TIM_OC2_SetConfig+0x84>
=======
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	6a1b      	ldr	r3, [r3, #32]
 8013002:	f023 0210 	bic.w	r2, r3, #16
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	6a1b      	ldr	r3, [r3, #32]
 801300e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	685b      	ldr	r3, [r3, #4]
 8013014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	699b      	ldr	r3, [r3, #24]
 801301a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801302a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	021b      	lsls	r3, r3, #8
 8013032:	68fa      	ldr	r2, [r7, #12]
 8013034:	4313      	orrs	r3, r2
 8013036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013038:	697b      	ldr	r3, [r7, #20]
 801303a:	f023 0320 	bic.w	r3, r3, #32
 801303e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	689b      	ldr	r3, [r3, #8]
 8013044:	011b      	lsls	r3, r3, #4
 8013046:	697a      	ldr	r2, [r7, #20]
 8013048:	4313      	orrs	r3, r2
 801304a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	4a22      	ldr	r2, [pc, #136]	; (80130d8 <TIM_OC2_SetConfig+0xe4>)
 8013050:	4293      	cmp	r3, r2
 8013052:	d003      	beq.n	801305c <TIM_OC2_SetConfig+0x68>
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	4a21      	ldr	r2, [pc, #132]	; (80130dc <TIM_OC2_SetConfig+0xe8>)
 8013058:	4293      	cmp	r3, r2
 801305a:	d10d      	bne.n	8013078 <TIM_OC2_SetConfig+0x84>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 80150f8:	697b      	ldr	r3, [r7, #20]
 80150fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80150fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8015100:	683b      	ldr	r3, [r7, #0]
 8015102:	68db      	ldr	r3, [r3, #12]
 8015104:	011b      	lsls	r3, r3, #4
 8015106:	697a      	ldr	r2, [r7, #20]
 8015108:	4313      	orrs	r3, r2
 801510a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801510c:	697b      	ldr	r3, [r7, #20]
 801510e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015112:	617b      	str	r3, [r7, #20]
=======
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	68db      	ldr	r3, [r3, #12]
 8013068:	011b      	lsls	r3, r3, #4
 801306a:	697a      	ldr	r2, [r7, #20]
 801306c:	4313      	orrs	r3, r2
 801306e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013070:	697b      	ldr	r3, [r7, #20]
 8013072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013076:	617b      	str	r3, [r7, #20]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	4a17      	ldr	r2, [pc, #92]	; (8015174 <TIM_OC2_SetConfig+0xe4>)
 8015118:	4293      	cmp	r3, r2
 801511a:	d003      	beq.n	8015124 <TIM_OC2_SetConfig+0x94>
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	4a16      	ldr	r2, [pc, #88]	; (8015178 <TIM_OC2_SetConfig+0xe8>)
 8015120:	4293      	cmp	r3, r2
 8015122:	d113      	bne.n	801514c <TIM_OC2_SetConfig+0xbc>
=======
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	4a17      	ldr	r2, [pc, #92]	; (80130d8 <TIM_OC2_SetConfig+0xe4>)
 801307c:	4293      	cmp	r3, r2
 801307e:	d003      	beq.n	8013088 <TIM_OC2_SetConfig+0x94>
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	4a16      	ldr	r2, [pc, #88]	; (80130dc <TIM_OC2_SetConfig+0xe8>)
 8013084:	4293      	cmp	r3, r2
 8013086:	d113      	bne.n	80130b0 <TIM_OC2_SetConfig+0xbc>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801512a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015132:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8015134:	683b      	ldr	r3, [r7, #0]
 8015136:	695b      	ldr	r3, [r3, #20]
 8015138:	009b      	lsls	r3, r3, #2
 801513a:	693a      	ldr	r2, [r7, #16]
 801513c:	4313      	orrs	r3, r2
 801513e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8015140:	683b      	ldr	r3, [r7, #0]
 8015142:	699b      	ldr	r3, [r3, #24]
 8015144:	009b      	lsls	r3, r3, #2
 8015146:	693a      	ldr	r2, [r7, #16]
 8015148:	4313      	orrs	r3, r2
 801514a:	613b      	str	r3, [r7, #16]
=======
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801308e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013096:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	695b      	ldr	r3, [r3, #20]
 801309c:	009b      	lsls	r3, r3, #2
 801309e:	693a      	ldr	r2, [r7, #16]
 80130a0:	4313      	orrs	r3, r2
 80130a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	699b      	ldr	r3, [r3, #24]
 80130a8:	009b      	lsls	r3, r3, #2
 80130aa:	693a      	ldr	r2, [r7, #16]
 80130ac:	4313      	orrs	r3, r2
 80130ae:	613b      	str	r3, [r7, #16]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	693a      	ldr	r2, [r7, #16]
 8015150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	68fa      	ldr	r2, [r7, #12]
 8015156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8015158:	683b      	ldr	r3, [r7, #0]
 801515a:	685a      	ldr	r2, [r3, #4]
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	697a      	ldr	r2, [r7, #20]
 8015164:	621a      	str	r2, [r3, #32]
}
 8015166:	bf00      	nop
 8015168:	371c      	adds	r7, #28
 801516a:	46bd      	mov	sp, r7
 801516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015170:	4770      	bx	lr
 8015172:	bf00      	nop
 8015174:	40010000 	.word	0x40010000
 8015178:	40010400 	.word	0x40010400

0801517c <TIM_OC3_SetConfig>:
=======
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	693a      	ldr	r2, [r7, #16]
 80130b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	68fa      	ldr	r2, [r7, #12]
 80130ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80130bc:	683b      	ldr	r3, [r7, #0]
 80130be:	685a      	ldr	r2, [r3, #4]
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	697a      	ldr	r2, [r7, #20]
 80130c8:	621a      	str	r2, [r3, #32]
}
 80130ca:	bf00      	nop
 80130cc:	371c      	adds	r7, #28
 80130ce:	46bd      	mov	sp, r7
 80130d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d4:	4770      	bx	lr
 80130d6:	bf00      	nop
 80130d8:	40010000 	.word	0x40010000
 80130dc:	40010400 	.word	0x40010400

080130e0 <TIM_OC3_SetConfig>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 801517c:	b480      	push	{r7}
 801517e:	b087      	sub	sp, #28
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
 8015184:	6039      	str	r1, [r7, #0]
=======
 80130e0:	b480      	push	{r7}
 80130e2:	b087      	sub	sp, #28
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
 80130e8:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	6a1b      	ldr	r3, [r3, #32]
 801518a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	6a1b      	ldr	r3, [r3, #32]
 8015196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	685b      	ldr	r3, [r3, #4]
 801519c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	69db      	ldr	r3, [r3, #28]
 80151a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80151aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	f023 0303 	bic.w	r3, r3, #3
 80151b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	68fa      	ldr	r2, [r7, #12]
 80151ba:	4313      	orrs	r3, r2
 80151bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80151be:	697b      	ldr	r3, [r7, #20]
 80151c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80151c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80151c6:	683b      	ldr	r3, [r7, #0]
 80151c8:	689b      	ldr	r3, [r3, #8]
 80151ca:	021b      	lsls	r3, r3, #8
 80151cc:	697a      	ldr	r2, [r7, #20]
 80151ce:	4313      	orrs	r3, r2
 80151d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	4a21      	ldr	r2, [pc, #132]	; (801525c <TIM_OC3_SetConfig+0xe0>)
 80151d6:	4293      	cmp	r3, r2
 80151d8:	d003      	beq.n	80151e2 <TIM_OC3_SetConfig+0x66>
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	4a20      	ldr	r2, [pc, #128]	; (8015260 <TIM_OC3_SetConfig+0xe4>)
 80151de:	4293      	cmp	r3, r2
 80151e0:	d10d      	bne.n	80151fe <TIM_OC3_SetConfig+0x82>
=======
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6a1b      	ldr	r3, [r3, #32]
 80130ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	6a1b      	ldr	r3, [r3, #32]
 80130fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	685b      	ldr	r3, [r3, #4]
 8013100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	69db      	ldr	r3, [r3, #28]
 8013106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801310e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	f023 0303 	bic.w	r3, r3, #3
 8013116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	68fa      	ldr	r2, [r7, #12]
 801311e:	4313      	orrs	r3, r2
 8013120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013122:	697b      	ldr	r3, [r7, #20]
 8013124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	689b      	ldr	r3, [r3, #8]
 801312e:	021b      	lsls	r3, r3, #8
 8013130:	697a      	ldr	r2, [r7, #20]
 8013132:	4313      	orrs	r3, r2
 8013134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	4a21      	ldr	r2, [pc, #132]	; (80131c0 <TIM_OC3_SetConfig+0xe0>)
 801313a:	4293      	cmp	r3, r2
 801313c:	d003      	beq.n	8013146 <TIM_OC3_SetConfig+0x66>
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	4a20      	ldr	r2, [pc, #128]	; (80131c4 <TIM_OC3_SetConfig+0xe4>)
 8013142:	4293      	cmp	r3, r2
 8013144:	d10d      	bne.n	8013162 <TIM_OC3_SetConfig+0x82>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 80151e2:	697b      	ldr	r3, [r7, #20]
 80151e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80151e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80151ea:	683b      	ldr	r3, [r7, #0]
 80151ec:	68db      	ldr	r3, [r3, #12]
 80151ee:	021b      	lsls	r3, r3, #8
 80151f0:	697a      	ldr	r2, [r7, #20]
 80151f2:	4313      	orrs	r3, r2
 80151f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80151f6:	697b      	ldr	r3, [r7, #20]
 80151f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80151fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	4a16      	ldr	r2, [pc, #88]	; (801525c <TIM_OC3_SetConfig+0xe0>)
 8015202:	4293      	cmp	r3, r2
 8015204:	d003      	beq.n	801520e <TIM_OC3_SetConfig+0x92>
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	4a15      	ldr	r2, [pc, #84]	; (8015260 <TIM_OC3_SetConfig+0xe4>)
 801520a:	4293      	cmp	r3, r2
 801520c:	d113      	bne.n	8015236 <TIM_OC3_SetConfig+0xba>
=======
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801314c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	68db      	ldr	r3, [r3, #12]
 8013152:	021b      	lsls	r3, r3, #8
 8013154:	697a      	ldr	r2, [r7, #20]
 8013156:	4313      	orrs	r3, r2
 8013158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801315a:	697b      	ldr	r3, [r7, #20]
 801315c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	4a16      	ldr	r2, [pc, #88]	; (80131c0 <TIM_OC3_SetConfig+0xe0>)
 8013166:	4293      	cmp	r3, r2
 8013168:	d003      	beq.n	8013172 <TIM_OC3_SetConfig+0x92>
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	4a15      	ldr	r2, [pc, #84]	; (80131c4 <TIM_OC3_SetConfig+0xe4>)
 801316e:	4293      	cmp	r3, r2
 8013170:	d113      	bne.n	801319a <TIM_OC3_SetConfig+0xba>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 801520e:	693b      	ldr	r3, [r7, #16]
 8015210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8015216:	693b      	ldr	r3, [r7, #16]
 8015218:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801521c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801521e:	683b      	ldr	r3, [r7, #0]
 8015220:	695b      	ldr	r3, [r3, #20]
 8015222:	011b      	lsls	r3, r3, #4
 8015224:	693a      	ldr	r2, [r7, #16]
 8015226:	4313      	orrs	r3, r2
 8015228:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	699b      	ldr	r3, [r3, #24]
 801522e:	011b      	lsls	r3, r3, #4
 8015230:	693a      	ldr	r2, [r7, #16]
 8015232:	4313      	orrs	r3, r2
 8015234:	613b      	str	r3, [r7, #16]
=======
 8013172:	693b      	ldr	r3, [r7, #16]
 8013174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	695b      	ldr	r3, [r3, #20]
 8013186:	011b      	lsls	r3, r3, #4
 8013188:	693a      	ldr	r2, [r7, #16]
 801318a:	4313      	orrs	r3, r2
 801318c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	699b      	ldr	r3, [r3, #24]
 8013192:	011b      	lsls	r3, r3, #4
 8013194:	693a      	ldr	r2, [r7, #16]
 8013196:	4313      	orrs	r3, r2
 8013198:	613b      	str	r3, [r7, #16]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	693a      	ldr	r2, [r7, #16]
 801523a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	68fa      	ldr	r2, [r7, #12]
 8015240:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	685a      	ldr	r2, [r3, #4]
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	697a      	ldr	r2, [r7, #20]
 801524e:	621a      	str	r2, [r3, #32]
}
 8015250:	bf00      	nop
 8015252:	371c      	adds	r7, #28
 8015254:	46bd      	mov	sp, r7
 8015256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525a:	4770      	bx	lr
 801525c:	40010000 	.word	0x40010000
 8015260:	40010400 	.word	0x40010400

08015264 <TIM_OC4_SetConfig>:
=======
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	693a      	ldr	r2, [r7, #16]
 801319e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	68fa      	ldr	r2, [r7, #12]
 80131a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	685a      	ldr	r2, [r3, #4]
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	697a      	ldr	r2, [r7, #20]
 80131b2:	621a      	str	r2, [r3, #32]
}
 80131b4:	bf00      	nop
 80131b6:	371c      	adds	r7, #28
 80131b8:	46bd      	mov	sp, r7
 80131ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131be:	4770      	bx	lr
 80131c0:	40010000 	.word	0x40010000
 80131c4:	40010400 	.word	0x40010400

080131c8 <TIM_OC4_SetConfig>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8015264:	b480      	push	{r7}
 8015266:	b087      	sub	sp, #28
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
 801526c:	6039      	str	r1, [r7, #0]
=======
 80131c8:	b480      	push	{r7}
 80131ca:	b087      	sub	sp, #28
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
 80131d0:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	6a1b      	ldr	r3, [r3, #32]
 8015272:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	6a1b      	ldr	r3, [r3, #32]
 801527e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	685b      	ldr	r3, [r3, #4]
 8015284:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	69db      	ldr	r3, [r3, #28]
 801528a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801529a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	021b      	lsls	r3, r3, #8
 80152a2:	68fa      	ldr	r2, [r7, #12]
 80152a4:	4313      	orrs	r3, r2
 80152a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80152a8:	693b      	ldr	r3, [r7, #16]
 80152aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80152ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	689b      	ldr	r3, [r3, #8]
 80152b4:	031b      	lsls	r3, r3, #12
 80152b6:	693a      	ldr	r2, [r7, #16]
 80152b8:	4313      	orrs	r3, r2
 80152ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	4a12      	ldr	r2, [pc, #72]	; (8015308 <TIM_OC4_SetConfig+0xa4>)
 80152c0:	4293      	cmp	r3, r2
 80152c2:	d003      	beq.n	80152cc <TIM_OC4_SetConfig+0x68>
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	4a11      	ldr	r2, [pc, #68]	; (801530c <TIM_OC4_SetConfig+0xa8>)
 80152c8:	4293      	cmp	r3, r2
 80152ca:	d109      	bne.n	80152e0 <TIM_OC4_SetConfig+0x7c>
=======
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6a1b      	ldr	r3, [r3, #32]
 80131d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6a1b      	ldr	r3, [r3, #32]
 80131e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	685b      	ldr	r3, [r3, #4]
 80131e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	69db      	ldr	r3, [r3, #28]
 80131ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80131f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80131fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	021b      	lsls	r3, r3, #8
 8013206:	68fa      	ldr	r2, [r7, #12]
 8013208:	4313      	orrs	r3, r2
 801320a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	689b      	ldr	r3, [r3, #8]
 8013218:	031b      	lsls	r3, r3, #12
 801321a:	693a      	ldr	r2, [r7, #16]
 801321c:	4313      	orrs	r3, r2
 801321e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	4a12      	ldr	r2, [pc, #72]	; (801326c <TIM_OC4_SetConfig+0xa4>)
 8013224:	4293      	cmp	r3, r2
 8013226:	d003      	beq.n	8013230 <TIM_OC4_SetConfig+0x68>
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	4a11      	ldr	r2, [pc, #68]	; (8013270 <TIM_OC4_SetConfig+0xa8>)
 801322c:	4293      	cmp	r3, r2
 801322e:	d109      	bne.n	8013244 <TIM_OC4_SetConfig+0x7c>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 80152cc:	697b      	ldr	r3, [r7, #20]
 80152ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80152d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80152d4:	683b      	ldr	r3, [r7, #0]
 80152d6:	695b      	ldr	r3, [r3, #20]
 80152d8:	019b      	lsls	r3, r3, #6
 80152da:	697a      	ldr	r2, [r7, #20]
 80152dc:	4313      	orrs	r3, r2
 80152de:	617b      	str	r3, [r7, #20]
=======
 8013230:	697b      	ldr	r3, [r7, #20]
 8013232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013236:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	695b      	ldr	r3, [r3, #20]
 801323c:	019b      	lsls	r3, r3, #6
 801323e:	697a      	ldr	r2, [r7, #20]
 8013240:	4313      	orrs	r3, r2
 8013242:	617b      	str	r3, [r7, #20]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	697a      	ldr	r2, [r7, #20]
 80152e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	68fa      	ldr	r2, [r7, #12]
 80152ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	685a      	ldr	r2, [r3, #4]
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	693a      	ldr	r2, [r7, #16]
 80152f8:	621a      	str	r2, [r3, #32]
}
 80152fa:	bf00      	nop
 80152fc:	371c      	adds	r7, #28
 80152fe:	46bd      	mov	sp, r7
 8015300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015304:	4770      	bx	lr
 8015306:	bf00      	nop
 8015308:	40010000 	.word	0x40010000
 801530c:	40010400 	.word	0x40010400

08015310 <TIM_TI1_ConfigInputStage>:
=======
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	697a      	ldr	r2, [r7, #20]
 8013248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	68fa      	ldr	r2, [r7, #12]
 801324e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	685a      	ldr	r2, [r3, #4]
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	693a      	ldr	r2, [r7, #16]
 801325c:	621a      	str	r2, [r3, #32]
}
 801325e:	bf00      	nop
 8013260:	371c      	adds	r7, #28
 8013262:	46bd      	mov	sp, r7
 8013264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013268:	4770      	bx	lr
 801326a:	bf00      	nop
 801326c:	40010000 	.word	0x40010000
 8013270:	40010400 	.word	0x40010400

08013274 <TIM_TI1_ConfigInputStage>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8015310:	b480      	push	{r7}
 8015312:	b087      	sub	sp, #28
 8015314:	af00      	add	r7, sp, #0
 8015316:	60f8      	str	r0, [r7, #12]
 8015318:	60b9      	str	r1, [r7, #8]
 801531a:	607a      	str	r2, [r7, #4]
=======
 8013274:	b480      	push	{r7}
 8013276:	b087      	sub	sp, #28
 8013278:	af00      	add	r7, sp, #0
 801327a:	60f8      	str	r0, [r7, #12]
 801327c:	60b9      	str	r1, [r7, #8]
 801327e:	607a      	str	r2, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	6a1b      	ldr	r3, [r3, #32]
 8015320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	6a1b      	ldr	r3, [r3, #32]
 8015326:	f023 0201 	bic.w	r2, r3, #1
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	699b      	ldr	r3, [r3, #24]
 8015332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015334:	693b      	ldr	r3, [r7, #16]
 8015336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801533a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	011b      	lsls	r3, r3, #4
 8015340:	693a      	ldr	r2, [r7, #16]
 8015342:	4313      	orrs	r3, r2
 8015344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015346:	697b      	ldr	r3, [r7, #20]
 8015348:	f023 030a 	bic.w	r3, r3, #10
 801534c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801534e:	697a      	ldr	r2, [r7, #20]
 8015350:	68bb      	ldr	r3, [r7, #8]
 8015352:	4313      	orrs	r3, r2
 8015354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	693a      	ldr	r2, [r7, #16]
 801535a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	697a      	ldr	r2, [r7, #20]
 8015360:	621a      	str	r2, [r3, #32]
}
 8015362:	bf00      	nop
 8015364:	371c      	adds	r7, #28
 8015366:	46bd      	mov	sp, r7
 8015368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536c:	4770      	bx	lr

0801536e <TIM_TI2_ConfigInputStage>:
=======
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	6a1b      	ldr	r3, [r3, #32]
 8013284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	6a1b      	ldr	r3, [r3, #32]
 801328a:	f023 0201 	bic.w	r2, r3, #1
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	699b      	ldr	r3, [r3, #24]
 8013296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801329e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	011b      	lsls	r3, r3, #4
 80132a4:	693a      	ldr	r2, [r7, #16]
 80132a6:	4313      	orrs	r3, r2
 80132a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80132aa:	697b      	ldr	r3, [r7, #20]
 80132ac:	f023 030a 	bic.w	r3, r3, #10
 80132b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80132b2:	697a      	ldr	r2, [r7, #20]
 80132b4:	68bb      	ldr	r3, [r7, #8]
 80132b6:	4313      	orrs	r3, r2
 80132b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	693a      	ldr	r2, [r7, #16]
 80132be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	697a      	ldr	r2, [r7, #20]
 80132c4:	621a      	str	r2, [r3, #32]
}
 80132c6:	bf00      	nop
 80132c8:	371c      	adds	r7, #28
 80132ca:	46bd      	mov	sp, r7
 80132cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d0:	4770      	bx	lr

080132d2 <TIM_TI2_ConfigInputStage>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 801536e:	b480      	push	{r7}
 8015370:	b087      	sub	sp, #28
 8015372:	af00      	add	r7, sp, #0
 8015374:	60f8      	str	r0, [r7, #12]
 8015376:	60b9      	str	r1, [r7, #8]
 8015378:	607a      	str	r2, [r7, #4]
=======
 80132d2:	b480      	push	{r7}
 80132d4:	b087      	sub	sp, #28
 80132d6:	af00      	add	r7, sp, #0
 80132d8:	60f8      	str	r0, [r7, #12]
 80132da:	60b9      	str	r1, [r7, #8]
 80132dc:	607a      	str	r2, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	6a1b      	ldr	r3, [r3, #32]
 801537e:	f023 0210 	bic.w	r2, r3, #16
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	699b      	ldr	r3, [r3, #24]
 801538a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	6a1b      	ldr	r3, [r3, #32]
 8015390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015392:	697b      	ldr	r3, [r7, #20]
 8015394:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015398:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	031b      	lsls	r3, r3, #12
 801539e:	697a      	ldr	r2, [r7, #20]
 80153a0:	4313      	orrs	r3, r2
 80153a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80153a4:	693b      	ldr	r3, [r7, #16]
 80153a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80153aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	011b      	lsls	r3, r3, #4
 80153b0:	693a      	ldr	r2, [r7, #16]
 80153b2:	4313      	orrs	r3, r2
 80153b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	697a      	ldr	r2, [r7, #20]
 80153ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	693a      	ldr	r2, [r7, #16]
 80153c0:	621a      	str	r2, [r3, #32]
}
 80153c2:	bf00      	nop
 80153c4:	371c      	adds	r7, #28
 80153c6:	46bd      	mov	sp, r7
 80153c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153cc:	4770      	bx	lr

080153ce <TIM_ITRx_SetConfig>:
=======
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	6a1b      	ldr	r3, [r3, #32]
 80132e2:	f023 0210 	bic.w	r2, r3, #16
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	699b      	ldr	r3, [r3, #24]
 80132ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	6a1b      	ldr	r3, [r3, #32]
 80132f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80132f6:	697b      	ldr	r3, [r7, #20]
 80132f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80132fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	031b      	lsls	r3, r3, #12
 8013302:	697a      	ldr	r2, [r7, #20]
 8013304:	4313      	orrs	r3, r2
 8013306:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013308:	693b      	ldr	r3, [r7, #16]
 801330a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801330e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	011b      	lsls	r3, r3, #4
 8013314:	693a      	ldr	r2, [r7, #16]
 8013316:	4313      	orrs	r3, r2
 8013318:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	697a      	ldr	r2, [r7, #20]
 801331e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	693a      	ldr	r2, [r7, #16]
 8013324:	621a      	str	r2, [r3, #32]
}
 8013326:	bf00      	nop
 8013328:	371c      	adds	r7, #28
 801332a:	46bd      	mov	sp, r7
 801332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013330:	4770      	bx	lr

08013332 <TIM_ITRx_SetConfig>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 80153ce:	b480      	push	{r7}
 80153d0:	b085      	sub	sp, #20
 80153d2:	af00      	add	r7, sp, #0
 80153d4:	6078      	str	r0, [r7, #4]
 80153d6:	6039      	str	r1, [r7, #0]
=======
 8013332:	b480      	push	{r7}
 8013334:	b085      	sub	sp, #20
 8013336:	af00      	add	r7, sp, #0
 8013338:	6078      	str	r0, [r7, #4]
 801333a:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	689b      	ldr	r3, [r3, #8]
 80153dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80153e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80153e6:	683a      	ldr	r2, [r7, #0]
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	4313      	orrs	r3, r2
 80153ec:	f043 0307 	orr.w	r3, r3, #7
 80153f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	68fa      	ldr	r2, [r7, #12]
 80153f6:	609a      	str	r2, [r3, #8]
}
 80153f8:	bf00      	nop
 80153fa:	3714      	adds	r7, #20
 80153fc:	46bd      	mov	sp, r7
 80153fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015402:	4770      	bx	lr

08015404 <TIM_ETR_SetConfig>:
=======
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	689b      	ldr	r3, [r3, #8]
 8013340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801334a:	683a      	ldr	r2, [r7, #0]
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	4313      	orrs	r3, r2
 8013350:	f043 0307 	orr.w	r3, r3, #7
 8013354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	68fa      	ldr	r2, [r7, #12]
 801335a:	609a      	str	r2, [r3, #8]
}
 801335c:	bf00      	nop
 801335e:	3714      	adds	r7, #20
 8013360:	46bd      	mov	sp, r7
 8013362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013366:	4770      	bx	lr

08013368 <TIM_ETR_SetConfig>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8015404:	b480      	push	{r7}
 8015406:	b087      	sub	sp, #28
 8015408:	af00      	add	r7, sp, #0
 801540a:	60f8      	str	r0, [r7, #12]
 801540c:	60b9      	str	r1, [r7, #8]
 801540e:	607a      	str	r2, [r7, #4]
 8015410:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	689b      	ldr	r3, [r3, #8]
 8015416:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015418:	697b      	ldr	r3, [r7, #20]
 801541a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801541e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	021a      	lsls	r2, r3, #8
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	431a      	orrs	r2, r3
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	4313      	orrs	r3, r2
 801542c:	697a      	ldr	r2, [r7, #20]
 801542e:	4313      	orrs	r3, r2
 8015430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	697a      	ldr	r2, [r7, #20]
 8015436:	609a      	str	r2, [r3, #8]
}
 8015438:	bf00      	nop
 801543a:	371c      	adds	r7, #28
 801543c:	46bd      	mov	sp, r7
 801543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015442:	4770      	bx	lr

08015444 <TIM_CCxChannelCmd>:
=======
 8013368:	b480      	push	{r7}
 801336a:	b087      	sub	sp, #28
 801336c:	af00      	add	r7, sp, #0
 801336e:	60f8      	str	r0, [r7, #12]
 8013370:	60b9      	str	r1, [r7, #8]
 8013372:	607a      	str	r2, [r7, #4]
 8013374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	689b      	ldr	r3, [r3, #8]
 801337a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013384:	683b      	ldr	r3, [r7, #0]
 8013386:	021a      	lsls	r2, r3, #8
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	431a      	orrs	r2, r3
 801338c:	68bb      	ldr	r3, [r7, #8]
 801338e:	4313      	orrs	r3, r2
 8013390:	697a      	ldr	r2, [r7, #20]
 8013392:	4313      	orrs	r3, r2
 8013394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	697a      	ldr	r2, [r7, #20]
 801339a:	609a      	str	r2, [r3, #8]
}
 801339c:	bf00      	nop
 801339e:	371c      	adds	r7, #28
 80133a0:	46bd      	mov	sp, r7
 80133a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a6:	4770      	bx	lr

080133a8 <TIM_CCxChannelCmd>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8015444:	b480      	push	{r7}
 8015446:	b087      	sub	sp, #28
 8015448:	af00      	add	r7, sp, #0
 801544a:	60f8      	str	r0, [r7, #12]
 801544c:	60b9      	str	r1, [r7, #8]
 801544e:	607a      	str	r2, [r7, #4]
=======
 80133a8:	b480      	push	{r7}
 80133aa:	b087      	sub	sp, #28
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	60f8      	str	r0, [r7, #12]
 80133b0:	60b9      	str	r1, [r7, #8]
 80133b2:	607a      	str	r2, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 8015450:	68bb      	ldr	r3, [r7, #8]
 8015452:	f003 031f 	and.w	r3, r3, #31
 8015456:	2201      	movs	r2, #1
 8015458:	fa02 f303 	lsl.w	r3, r2, r3
 801545c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	6a1a      	ldr	r2, [r3, #32]
 8015462:	697b      	ldr	r3, [r7, #20]
 8015464:	43db      	mvns	r3, r3
 8015466:	401a      	ands	r2, r3
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	6a1a      	ldr	r2, [r3, #32]
 8015470:	68bb      	ldr	r3, [r7, #8]
 8015472:	f003 031f 	and.w	r3, r3, #31
 8015476:	6879      	ldr	r1, [r7, #4]
 8015478:	fa01 f303 	lsl.w	r3, r1, r3
 801547c:	431a      	orrs	r2, r3
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	621a      	str	r2, [r3, #32]
}
 8015482:	bf00      	nop
 8015484:	371c      	adds	r7, #28
 8015486:	46bd      	mov	sp, r7
 8015488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548c:	4770      	bx	lr

0801548e <HAL_TIMEx_OCN_Start_IT>:
=======
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	f003 031f 	and.w	r3, r3, #31
 80133ba:	2201      	movs	r2, #1
 80133bc:	fa02 f303 	lsl.w	r3, r2, r3
 80133c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	6a1a      	ldr	r2, [r3, #32]
 80133c6:	697b      	ldr	r3, [r7, #20]
 80133c8:	43db      	mvns	r3, r3
 80133ca:	401a      	ands	r2, r3
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	6a1a      	ldr	r2, [r3, #32]
 80133d4:	68bb      	ldr	r3, [r7, #8]
 80133d6:	f003 031f 	and.w	r3, r3, #31
 80133da:	6879      	ldr	r1, [r7, #4]
 80133dc:	fa01 f303 	lsl.w	r3, r1, r3
 80133e0:	431a      	orrs	r2, r3
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	621a      	str	r2, [r3, #32]
}
 80133e6:	bf00      	nop
 80133e8:	371c      	adds	r7, #28
 80133ea:	46bd      	mov	sp, r7
 80133ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f0:	4770      	bx	lr

080133f2 <HAL_TIMEx_OCN_Start_IT>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 801548e:	b580      	push	{r7, lr}
 8015490:	b084      	sub	sp, #16
 8015492:	af00      	add	r7, sp, #0
 8015494:	6078      	str	r0, [r7, #4]
 8015496:	6039      	str	r1, [r7, #0]
=======
 80133f2:	b580      	push	{r7, lr}
 80133f4:	b084      	sub	sp, #16
 80133f6:	af00      	add	r7, sp, #0
 80133f8:	6078      	str	r0, [r7, #4]
 80133fa:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
<<<<<<< HEAD
 8015498:	683b      	ldr	r3, [r7, #0]
 801549a:	2b04      	cmp	r3, #4
 801549c:	d00d      	beq.n	80154ba <HAL_TIMEx_OCN_Start_IT+0x2c>
 801549e:	2b08      	cmp	r3, #8
 80154a0:	d014      	beq.n	80154cc <HAL_TIMEx_OCN_Start_IT+0x3e>
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d000      	beq.n	80154a8 <HAL_TIMEx_OCN_Start_IT+0x1a>
=======
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	2b04      	cmp	r3, #4
 8013400:	d00d      	beq.n	801341e <HAL_TIMEx_OCN_Start_IT+0x2c>
 8013402:	2b08      	cmp	r3, #8
 8013404:	d014      	beq.n	8013430 <HAL_TIMEx_OCN_Start_IT+0x3e>
 8013406:	2b00      	cmp	r3, #0
 8013408:	d000      	beq.n	801340c <HAL_TIMEx_OCN_Start_IT+0x1a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      break;
    }


    default:
      break;
<<<<<<< HEAD
 80154a6:	e01a      	b.n	80154de <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	68da      	ldr	r2, [r3, #12]
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	f042 0202 	orr.w	r2, r2, #2
 80154b6:	60da      	str	r2, [r3, #12]
      break;
 80154b8:	e011      	b.n	80154de <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	68da      	ldr	r2, [r3, #12]
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	f042 0204 	orr.w	r2, r2, #4
 80154c8:	60da      	str	r2, [r3, #12]
      break;
 80154ca:	e008      	b.n	80154de <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	68da      	ldr	r2, [r3, #12]
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	f042 0208 	orr.w	r2, r2, #8
 80154da:	60da      	str	r2, [r3, #12]
      break;
 80154dc:	bf00      	nop
=======
 801340a:	e01a      	b.n	8013442 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	68da      	ldr	r2, [r3, #12]
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	f042 0202 	orr.w	r2, r2, #2
 801341a:	60da      	str	r2, [r3, #12]
      break;
 801341c:	e011      	b.n	8013442 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	68da      	ldr	r2, [r3, #12]
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	f042 0204 	orr.w	r2, r2, #4
 801342c:	60da      	str	r2, [r3, #12]
      break;
 801342e:	e008      	b.n	8013442 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	68da      	ldr	r2, [r3, #12]
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	f042 0208 	orr.w	r2, r2, #8
 801343e:	60da      	str	r2, [r3, #12]
      break;
 8013440:	bf00      	nop
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
<<<<<<< HEAD
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	68da      	ldr	r2, [r3, #12]
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80154ec:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	2204      	movs	r2, #4
 80154f4:	6839      	ldr	r1, [r7, #0]
 80154f6:	4618      	mov	r0, r3
 80154f8:	f000 f976 	bl	80157e8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801550a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	689b      	ldr	r3, [r3, #8]
 8015512:	f003 0307 	and.w	r3, r3, #7
 8015516:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	2b06      	cmp	r3, #6
 801551c:	d007      	beq.n	801552e <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	681a      	ldr	r2, [r3, #0]
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	f042 0201 	orr.w	r2, r2, #1
 801552c:	601a      	str	r2, [r3, #0]
=======
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	68da      	ldr	r2, [r3, #12]
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013450:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	2204      	movs	r2, #4
 8013458:	6839      	ldr	r1, [r7, #0]
 801345a:	4618      	mov	r0, r3
 801345c:	f000 f976 	bl	801374c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801346e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	689b      	ldr	r3, [r3, #8]
 8013476:	f003 0307 	and.w	r3, r3, #7
 801347a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	2b06      	cmp	r3, #6
 8013480:	d007      	beq.n	8013492 <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	681a      	ldr	r2, [r3, #0]
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	f042 0201 	orr.w	r2, r2, #1
 8013490:	601a      	str	r2, [r3, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 801552e:	2300      	movs	r3, #0
}
 8015530:	4618      	mov	r0, r3
 8015532:	3710      	adds	r7, #16
 8015534:	46bd      	mov	sp, r7
 8015536:	bd80      	pop	{r7, pc}

08015538 <HAL_TIMEx_OCN_Stop_IT>:
=======
 8013492:	2300      	movs	r3, #0
}
 8013494:	4618      	mov	r0, r3
 8013496:	3710      	adds	r7, #16
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}

0801349c <HAL_TIMEx_OCN_Stop_IT>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8015538:	b580      	push	{r7, lr}
 801553a:	b084      	sub	sp, #16
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
 8015540:	6039      	str	r1, [r7, #0]
=======
 801349c:	b580      	push	{r7, lr}
 801349e:	b084      	sub	sp, #16
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
 80134a4:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
<<<<<<< HEAD
 8015542:	683b      	ldr	r3, [r7, #0]
 8015544:	2b04      	cmp	r3, #4
 8015546:	d00d      	beq.n	8015564 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 8015548:	2b08      	cmp	r3, #8
 801554a:	d014      	beq.n	8015576 <HAL_TIMEx_OCN_Stop_IT+0x3e>
 801554c:	2b00      	cmp	r3, #0
 801554e:	d000      	beq.n	8015552 <HAL_TIMEx_OCN_Stop_IT+0x1a>
=======
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	2b04      	cmp	r3, #4
 80134aa:	d00d      	beq.n	80134c8 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 80134ac:	2b08      	cmp	r3, #8
 80134ae:	d014      	beq.n	80134da <HAL_TIMEx_OCN_Stop_IT+0x3e>
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d000      	beq.n	80134b6 <HAL_TIMEx_OCN_Stop_IT+0x1a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
<<<<<<< HEAD
 8015550:	e01a      	b.n	8015588 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	68da      	ldr	r2, [r3, #12]
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	f022 0202 	bic.w	r2, r2, #2
 8015560:	60da      	str	r2, [r3, #12]
      break;
 8015562:	e011      	b.n	8015588 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	68da      	ldr	r2, [r3, #12]
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	f022 0204 	bic.w	r2, r2, #4
 8015572:	60da      	str	r2, [r3, #12]
      break;
 8015574:	e008      	b.n	8015588 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	68da      	ldr	r2, [r3, #12]
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	f022 0208 	bic.w	r2, r2, #8
 8015584:	60da      	str	r2, [r3, #12]
      break;
 8015586:	bf00      	nop
=======
 80134b4:	e01a      	b.n	80134ec <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	68da      	ldr	r2, [r3, #12]
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	f022 0202 	bic.w	r2, r2, #2
 80134c4:	60da      	str	r2, [r3, #12]
      break;
 80134c6:	e011      	b.n	80134ec <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	68da      	ldr	r2, [r3, #12]
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	f022 0204 	bic.w	r2, r2, #4
 80134d6:	60da      	str	r2, [r3, #12]
      break;
 80134d8:	e008      	b.n	80134ec <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	68da      	ldr	r2, [r3, #12]
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	f022 0208 	bic.w	r2, r2, #8
 80134e8:	60da      	str	r2, [r3, #12]
      break;
 80134ea:	bf00      	nop
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
<<<<<<< HEAD
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	2200      	movs	r2, #0
 801558e:	6839      	ldr	r1, [r7, #0]
 8015590:	4618      	mov	r0, r3
 8015592:	f000 f929 	bl	80157e8 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	6a1b      	ldr	r3, [r3, #32]
 801559c:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 801559e:	68fa      	ldr	r2, [r7, #12]
 80155a0:	f240 4344 	movw	r3, #1092	; 0x444
 80155a4:	4013      	ands	r3, r2
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d107      	bne.n	80155ba <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	68da      	ldr	r2, [r3, #12]
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80155b8:	60da      	str	r2, [r3, #12]
=======
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	2200      	movs	r2, #0
 80134f2:	6839      	ldr	r1, [r7, #0]
 80134f4:	4618      	mov	r0, r3
 80134f6:	f000 f929 	bl	801374c <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	6a1b      	ldr	r3, [r3, #32]
 8013500:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8013502:	68fa      	ldr	r2, [r7, #12]
 8013504:	f240 4344 	movw	r3, #1092	; 0x444
 8013508:	4013      	ands	r3, r2
 801350a:	2b00      	cmp	r3, #0
 801350c:	d107      	bne.n	801351e <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	68da      	ldr	r2, [r3, #12]
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801351c:	60da      	str	r2, [r3, #12]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
<<<<<<< HEAD
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	6a1a      	ldr	r2, [r3, #32]
 80155c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80155c4:	4013      	ands	r3, r2
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d10f      	bne.n	80155ea <HAL_TIMEx_OCN_Stop_IT+0xb2>
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	6a1a      	ldr	r2, [r3, #32]
 80155d0:	f240 4344 	movw	r3, #1092	; 0x444
 80155d4:	4013      	ands	r3, r2
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d107      	bne.n	80155ea <HAL_TIMEx_OCN_Stop_IT+0xb2>
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80155e8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	6a1a      	ldr	r2, [r3, #32]
 80155f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80155f4:	4013      	ands	r3, r2
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d10f      	bne.n	801561a <HAL_TIMEx_OCN_Stop_IT+0xe2>
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	6a1a      	ldr	r2, [r3, #32]
 8015600:	f240 4344 	movw	r3, #1092	; 0x444
 8015604:	4013      	ands	r3, r2
 8015606:	2b00      	cmp	r3, #0
 8015608:	d107      	bne.n	801561a <HAL_TIMEx_OCN_Stop_IT+0xe2>
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	681a      	ldr	r2, [r3, #0]
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	f022 0201 	bic.w	r2, r2, #1
 8015618:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801561a:	2300      	movs	r3, #0
}
 801561c:	4618      	mov	r0, r3
 801561e:	3710      	adds	r7, #16
 8015620:	46bd      	mov	sp, r7
 8015622:	bd80      	pop	{r7, pc}

08015624 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	6a1a      	ldr	r2, [r3, #32]
 8013524:	f241 1311 	movw	r3, #4369	; 0x1111
 8013528:	4013      	ands	r3, r2
 801352a:	2b00      	cmp	r3, #0
 801352c:	d10f      	bne.n	801354e <HAL_TIMEx_OCN_Stop_IT+0xb2>
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	6a1a      	ldr	r2, [r3, #32]
 8013534:	f240 4344 	movw	r3, #1092	; 0x444
 8013538:	4013      	ands	r3, r2
 801353a:	2b00      	cmp	r3, #0
 801353c:	d107      	bne.n	801354e <HAL_TIMEx_OCN_Stop_IT+0xb2>
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801354c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	6a1a      	ldr	r2, [r3, #32]
 8013554:	f241 1311 	movw	r3, #4369	; 0x1111
 8013558:	4013      	ands	r3, r2
 801355a:	2b00      	cmp	r3, #0
 801355c:	d10f      	bne.n	801357e <HAL_TIMEx_OCN_Stop_IT+0xe2>
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	6a1a      	ldr	r2, [r3, #32]
 8013564:	f240 4344 	movw	r3, #1092	; 0x444
 8013568:	4013      	ands	r3, r2
 801356a:	2b00      	cmp	r3, #0
 801356c:	d107      	bne.n	801357e <HAL_TIMEx_OCN_Stop_IT+0xe2>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	681a      	ldr	r2, [r3, #0]
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	f022 0201 	bic.w	r2, r2, #1
 801357c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801357e:	2300      	movs	r3, #0
}
 8013580:	4618      	mov	r0, r3
 8013582:	3710      	adds	r7, #16
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}

08013588 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8015624:	b480      	push	{r7}
 8015626:	b085      	sub	sp, #20
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
 801562c:	6039      	str	r1, [r7, #0]
=======
 8013588:	b480      	push	{r7}
 801358a:	b085      	sub	sp, #20
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	6039      	str	r1, [r7, #0]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015634:	2b01      	cmp	r3, #1
 8015636:	d101      	bne.n	801563c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015638:	2302      	movs	r3, #2
 801563a:	e05a      	b.n	80156f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	2201      	movs	r2, #1
 8015640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	2202      	movs	r2, #2
 8015648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	685b      	ldr	r3, [r3, #4]
 8015652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	689b      	ldr	r3, [r3, #8]
 801565a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	68fa      	ldr	r2, [r7, #12]
 801566a:	4313      	orrs	r3, r2
 801566c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	68fa      	ldr	r2, [r7, #12]
 8015674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	4a21      	ldr	r2, [pc, #132]	; (8015700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801567c:	4293      	cmp	r3, r2
 801567e:	d022      	beq.n	80156c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015688:	d01d      	beq.n	80156c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	4a1d      	ldr	r2, [pc, #116]	; (8015704 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8015690:	4293      	cmp	r3, r2
 8015692:	d018      	beq.n	80156c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	4a1b      	ldr	r2, [pc, #108]	; (8015708 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801569a:	4293      	cmp	r3, r2
 801569c:	d013      	beq.n	80156c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	4a1a      	ldr	r2, [pc, #104]	; (801570c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80156a4:	4293      	cmp	r3, r2
 80156a6:	d00e      	beq.n	80156c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	4a18      	ldr	r2, [pc, #96]	; (8015710 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80156ae:	4293      	cmp	r3, r2
 80156b0:	d009      	beq.n	80156c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	4a17      	ldr	r2, [pc, #92]	; (8015714 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80156b8:	4293      	cmp	r3, r2
 80156ba:	d004      	beq.n	80156c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	4a15      	ldr	r2, [pc, #84]	; (8015718 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80156c2:	4293      	cmp	r3, r2
 80156c4:	d10c      	bne.n	80156e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80156c6:	68bb      	ldr	r3, [r7, #8]
 80156c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80156cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	685b      	ldr	r3, [r3, #4]
 80156d2:	68ba      	ldr	r2, [r7, #8]
 80156d4:	4313      	orrs	r3, r2
 80156d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	68ba      	ldr	r2, [r7, #8]
 80156de:	609a      	str	r2, [r3, #8]
=======
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013598:	2b01      	cmp	r3, #1
 801359a:	d101      	bne.n	80135a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801359c:	2302      	movs	r3, #2
 801359e:	e05a      	b.n	8013656 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	2201      	movs	r2, #1
 80135a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	2202      	movs	r2, #2
 80135ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	685b      	ldr	r3, [r3, #4]
 80135b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	689b      	ldr	r3, [r3, #8]
 80135be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80135c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	68fa      	ldr	r2, [r7, #12]
 80135ce:	4313      	orrs	r3, r2
 80135d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	68fa      	ldr	r2, [r7, #12]
 80135d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	4a21      	ldr	r2, [pc, #132]	; (8013664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80135e0:	4293      	cmp	r3, r2
 80135e2:	d022      	beq.n	801362a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80135ec:	d01d      	beq.n	801362a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	4a1d      	ldr	r2, [pc, #116]	; (8013668 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80135f4:	4293      	cmp	r3, r2
 80135f6:	d018      	beq.n	801362a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	4a1b      	ldr	r2, [pc, #108]	; (801366c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80135fe:	4293      	cmp	r3, r2
 8013600:	d013      	beq.n	801362a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	4a1a      	ldr	r2, [pc, #104]	; (8013670 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8013608:	4293      	cmp	r3, r2
 801360a:	d00e      	beq.n	801362a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	4a18      	ldr	r2, [pc, #96]	; (8013674 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8013612:	4293      	cmp	r3, r2
 8013614:	d009      	beq.n	801362a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	4a17      	ldr	r2, [pc, #92]	; (8013678 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801361c:	4293      	cmp	r3, r2
 801361e:	d004      	beq.n	801362a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	4a15      	ldr	r2, [pc, #84]	; (801367c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8013626:	4293      	cmp	r3, r2
 8013628:	d10c      	bne.n	8013644 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	685b      	ldr	r3, [r3, #4]
 8013636:	68ba      	ldr	r2, [r7, #8]
 8013638:	4313      	orrs	r3, r2
 801363a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	68ba      	ldr	r2, [r7, #8]
 8013642:	609a      	str	r2, [r3, #8]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	2201      	movs	r2, #1
 80156e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2200      	movs	r2, #0
 80156ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80156f0:	2300      	movs	r3, #0
}
 80156f2:	4618      	mov	r0, r3
 80156f4:	3714      	adds	r7, #20
 80156f6:	46bd      	mov	sp, r7
 80156f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156fc:	4770      	bx	lr
 80156fe:	bf00      	nop
 8015700:	40010000 	.word	0x40010000
 8015704:	40000400 	.word	0x40000400
 8015708:	40000800 	.word	0x40000800
 801570c:	40000c00 	.word	0x40000c00
 8015710:	40010400 	.word	0x40010400
 8015714:	40014000 	.word	0x40014000
 8015718:	40001800 	.word	0x40001800

0801571c <HAL_TIMEx_ConfigBreakDeadTime>:
=======
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2201      	movs	r2, #1
 8013648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2200      	movs	r2, #0
 8013650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013654:	2300      	movs	r3, #0
}
 8013656:	4618      	mov	r0, r3
 8013658:	3714      	adds	r7, #20
 801365a:	46bd      	mov	sp, r7
 801365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013660:	4770      	bx	lr
 8013662:	bf00      	nop
 8013664:	40010000 	.word	0x40010000
 8013668:	40000400 	.word	0x40000400
 801366c:	40000800 	.word	0x40000800
 8013670:	40000c00 	.word	0x40000c00
 8013674:	40010400 	.word	0x40010400
 8013678:	40014000 	.word	0x40014000
 801367c:	40001800 	.word	0x40001800

08013680 <HAL_TIMEx_ConfigBreakDeadTime>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
<<<<<<< HEAD
 801571c:	b480      	push	{r7}
 801571e:	b085      	sub	sp, #20
 8015720:	af00      	add	r7, sp, #0
 8015722:	6078      	str	r0, [r7, #4]
 8015724:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8015726:	2300      	movs	r3, #0
 8015728:	60fb      	str	r3, [r7, #12]
=======
 8013680:	b480      	push	{r7}
 8013682:	b085      	sub	sp, #20
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
 8013688:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801368a:	2300      	movs	r3, #0
 801368c:	60fb      	str	r3, [r7, #12]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015730:	2b01      	cmp	r3, #1
 8015732:	d101      	bne.n	8015738 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8015734:	2302      	movs	r3, #2
 8015736:	e03d      	b.n	80157b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2201      	movs	r2, #1
 801573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013694:	2b01      	cmp	r3, #1
 8013696:	d101      	bne.n	801369c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013698:	2302      	movs	r3, #2
 801369a:	e03d      	b.n	8013718 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2201      	movs	r2, #1
 80136a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
<<<<<<< HEAD
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8015746:	683b      	ldr	r3, [r7, #0]
 8015748:	68db      	ldr	r3, [r3, #12]
 801574a:	4313      	orrs	r3, r2
 801574c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	689b      	ldr	r3, [r3, #8]
 8015758:	4313      	orrs	r3, r2
 801575a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8015762:	683b      	ldr	r3, [r7, #0]
 8015764:	685b      	ldr	r3, [r3, #4]
 8015766:	4313      	orrs	r3, r2
 8015768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8015770:	683b      	ldr	r3, [r7, #0]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	4313      	orrs	r3, r2
 8015776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	691b      	ldr	r3, [r3, #16]
 8015782:	4313      	orrs	r3, r2
 8015784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801578c:	683b      	ldr	r3, [r7, #0]
 801578e:	695b      	ldr	r3, [r3, #20]
 8015790:	4313      	orrs	r3, r2
 8015792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	69db      	ldr	r3, [r3, #28]
 801579e:	4313      	orrs	r3, r2
 80157a0:	60fb      	str	r3, [r7, #12]
=======
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	68db      	ldr	r3, [r3, #12]
 80136ae:	4313      	orrs	r3, r2
 80136b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	689b      	ldr	r3, [r3, #8]
 80136bc:	4313      	orrs	r3, r2
 80136be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	685b      	ldr	r3, [r3, #4]
 80136ca:	4313      	orrs	r3, r2
 80136cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80136d4:	683b      	ldr	r3, [r7, #0]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	4313      	orrs	r3, r2
 80136da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	691b      	ldr	r3, [r3, #16]
 80136e6:	4313      	orrs	r3, r2
 80136e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	695b      	ldr	r3, [r3, #20]
 80136f4:	4313      	orrs	r3, r2
 80136f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	69db      	ldr	r3, [r3, #28]
 8013702:	4313      	orrs	r3, r2
 8013704:	60fb      	str	r3, [r7, #12]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
<<<<<<< HEAD
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	68fa      	ldr	r2, [r7, #12]
 80157a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	2200      	movs	r2, #0
 80157ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80157b2:	2300      	movs	r3, #0
}
 80157b4:	4618      	mov	r0, r3
 80157b6:	3714      	adds	r7, #20
 80157b8:	46bd      	mov	sp, r7
 80157ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157be:	4770      	bx	lr

080157c0 <HAL_TIMEx_CommutCallback>:
=======
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	68fa      	ldr	r2, [r7, #12]
 801370c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	2200      	movs	r2, #0
 8013712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013716:	2300      	movs	r3, #0
}
 8013718:	4618      	mov	r0, r3
 801371a:	3714      	adds	r7, #20
 801371c:	46bd      	mov	sp, r7
 801371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013722:	4770      	bx	lr

08013724 <HAL_TIMEx_CommutCallback>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80157c0:	b480      	push	{r7}
 80157c2:	b083      	sub	sp, #12
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
=======
 8013724:	b480      	push	{r7}
 8013726:	b083      	sub	sp, #12
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80157c8:	bf00      	nop
 80157ca:	370c      	adds	r7, #12
 80157cc:	46bd      	mov	sp, r7
 80157ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d2:	4770      	bx	lr

080157d4 <HAL_TIMEx_BreakCallback>:
=======
 801372c:	bf00      	nop
 801372e:	370c      	adds	r7, #12
 8013730:	46bd      	mov	sp, r7
 8013732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013736:	4770      	bx	lr

08013738 <HAL_TIMEx_BreakCallback>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80157d4:	b480      	push	{r7}
 80157d6:	b083      	sub	sp, #12
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
=======
 8013738:	b480      	push	{r7}
 801373a:	b083      	sub	sp, #12
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80157dc:	bf00      	nop
 80157de:	370c      	adds	r7, #12
 80157e0:	46bd      	mov	sp, r7
 80157e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e6:	4770      	bx	lr

080157e8 <TIM_CCxNChannelCmd>:
=======
 8013740:	bf00      	nop
 8013742:	370c      	adds	r7, #12
 8013744:	46bd      	mov	sp, r7
 8013746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374a:	4770      	bx	lr

0801374c <TIM_CCxNChannelCmd>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
<<<<<<< HEAD
 80157e8:	b480      	push	{r7}
 80157ea:	b087      	sub	sp, #28
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	60f8      	str	r0, [r7, #12]
 80157f0:	60b9      	str	r1, [r7, #8]
 80157f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	f003 031f 	and.w	r3, r3, #31
 80157fa:	2204      	movs	r2, #4
 80157fc:	fa02 f303 	lsl.w	r3, r2, r3
 8015800:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	6a1a      	ldr	r2, [r3, #32]
 8015806:	697b      	ldr	r3, [r7, #20]
 8015808:	43db      	mvns	r3, r3
 801580a:	401a      	ands	r2, r3
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	6a1a      	ldr	r2, [r3, #32]
 8015814:	68bb      	ldr	r3, [r7, #8]
 8015816:	f003 031f 	and.w	r3, r3, #31
 801581a:	6879      	ldr	r1, [r7, #4]
 801581c:	fa01 f303 	lsl.w	r3, r1, r3
 8015820:	431a      	orrs	r2, r3
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	621a      	str	r2, [r3, #32]
}
 8015826:	bf00      	nop
 8015828:	371c      	adds	r7, #28
 801582a:	46bd      	mov	sp, r7
 801582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015830:	4770      	bx	lr

08015832 <HAL_UART_Init>:
=======
 801374c:	b480      	push	{r7}
 801374e:	b087      	sub	sp, #28
 8013750:	af00      	add	r7, sp, #0
 8013752:	60f8      	str	r0, [r7, #12]
 8013754:	60b9      	str	r1, [r7, #8]
 8013756:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	f003 031f 	and.w	r3, r3, #31
 801375e:	2204      	movs	r2, #4
 8013760:	fa02 f303 	lsl.w	r3, r2, r3
 8013764:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	6a1a      	ldr	r2, [r3, #32]
 801376a:	697b      	ldr	r3, [r7, #20]
 801376c:	43db      	mvns	r3, r3
 801376e:	401a      	ands	r2, r3
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	6a1a      	ldr	r2, [r3, #32]
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	f003 031f 	and.w	r3, r3, #31
 801377e:	6879      	ldr	r1, [r7, #4]
 8013780:	fa01 f303 	lsl.w	r3, r1, r3
 8013784:	431a      	orrs	r2, r3
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	621a      	str	r2, [r3, #32]
}
 801378a:	bf00      	nop
 801378c:	371c      	adds	r7, #28
 801378e:	46bd      	mov	sp, r7
 8013790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013794:	4770      	bx	lr

08013796 <HAL_UART_Init>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8015832:	b580      	push	{r7, lr}
 8015834:	b082      	sub	sp, #8
 8015836:	af00      	add	r7, sp, #0
 8015838:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d101      	bne.n	8015844 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015840:	2301      	movs	r3, #1
 8015842:	e03f      	b.n	80158c4 <HAL_UART_Init+0x92>
=======
 8013796:	b580      	push	{r7, lr}
 8013798:	b082      	sub	sp, #8
 801379a:	af00      	add	r7, sp, #0
 801379c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d101      	bne.n	80137a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80137a4:	2301      	movs	r3, #1
 80137a6:	e03f      	b.n	8013828 <HAL_UART_Init+0x92>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801584a:	b2db      	uxtb	r3, r3
 801584c:	2b00      	cmp	r3, #0
 801584e:	d106      	bne.n	801585e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	2200      	movs	r2, #0
 8015854:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80137ae:	b2db      	uxtb	r3, r3
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d106      	bne.n	80137c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	2200      	movs	r2, #0
 80137b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8015858:	6878      	ldr	r0, [r7, #4]
 801585a:	f7fb f8b1 	bl	80109c0 <HAL_UART_MspInit>
=======
 80137bc:	6878      	ldr	r0, [r7, #4]
 80137be:	f7fb f8b1 	bl	800e924 <HAL_UART_MspInit>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	2224      	movs	r2, #36	; 0x24
 8015862:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	68da      	ldr	r2, [r3, #12]
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015874:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015876:	6878      	ldr	r0, [r7, #4]
 8015878:	f000 f90c 	bl	8015a94 <UART_SetConfig>
=======
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	2224      	movs	r2, #36	; 0x24
 80137c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	68da      	ldr	r2, [r3, #12]
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80137d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80137da:	6878      	ldr	r0, [r7, #4]
 80137dc:	f000 f90c 	bl	80139f8 <UART_SetConfig>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	691a      	ldr	r2, [r3, #16]
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801588a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	695a      	ldr	r2, [r3, #20]
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801589a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	68da      	ldr	r2, [r3, #12]
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80158aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	2200      	movs	r2, #0
 80158b0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	2220      	movs	r2, #32
 80158b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	2220      	movs	r2, #32
 80158be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80158c2:	2300      	movs	r3, #0
}
 80158c4:	4618      	mov	r0, r3
 80158c6:	3708      	adds	r7, #8
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}

080158cc <HAL_UART_Transmit>:
=======
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	691a      	ldr	r2, [r3, #16]
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80137ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	695a      	ldr	r2, [r3, #20]
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80137fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	68da      	ldr	r2, [r3, #12]
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801380e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	2200      	movs	r2, #0
 8013814:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	2220      	movs	r2, #32
 801381a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	2220      	movs	r2, #32
 8013822:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8013826:	2300      	movs	r3, #0
}
 8013828:	4618      	mov	r0, r3
 801382a:	3708      	adds	r7, #8
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}

08013830 <HAL_UART_Transmit>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b088      	sub	sp, #32
 80158d0:	af02      	add	r7, sp, #8
 80158d2:	60f8      	str	r0, [r7, #12]
 80158d4:	60b9      	str	r1, [r7, #8]
 80158d6:	603b      	str	r3, [r7, #0]
 80158d8:	4613      	mov	r3, r2
 80158da:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80158dc:	2300      	movs	r3, #0
 80158de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80158e6:	b2db      	uxtb	r3, r3
 80158e8:	2b20      	cmp	r3, #32
 80158ea:	f040 8083 	bne.w	80159f4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80158ee:	68bb      	ldr	r3, [r7, #8]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d002      	beq.n	80158fa <HAL_UART_Transmit+0x2e>
 80158f4:	88fb      	ldrh	r3, [r7, #6]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d101      	bne.n	80158fe <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80158fa:	2301      	movs	r3, #1
 80158fc:	e07b      	b.n	80159f6 <HAL_UART_Transmit+0x12a>
=======
 8013830:	b580      	push	{r7, lr}
 8013832:	b088      	sub	sp, #32
 8013834:	af02      	add	r7, sp, #8
 8013836:	60f8      	str	r0, [r7, #12]
 8013838:	60b9      	str	r1, [r7, #8]
 801383a:	603b      	str	r3, [r7, #0]
 801383c:	4613      	mov	r3, r2
 801383e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8013840:	2300      	movs	r3, #0
 8013842:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801384a:	b2db      	uxtb	r3, r3
 801384c:	2b20      	cmp	r3, #32
 801384e:	f040 8083 	bne.w	8013958 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d002      	beq.n	801385e <HAL_UART_Transmit+0x2e>
 8013858:	88fb      	ldrh	r3, [r7, #6]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d101      	bne.n	8013862 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801385e:	2301      	movs	r3, #1
 8013860:	e07b      	b.n	801395a <HAL_UART_Transmit+0x12a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015904:	2b01      	cmp	r3, #1
 8015906:	d101      	bne.n	801590c <HAL_UART_Transmit+0x40>
 8015908:	2302      	movs	r3, #2
 801590a:	e074      	b.n	80159f6 <HAL_UART_Transmit+0x12a>
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	2201      	movs	r2, #1
 8015910:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	2200      	movs	r2, #0
 8015918:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	2221      	movs	r2, #33	; 0x21
 801591e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8015922:	f7fb fa81 	bl	8010e28 <HAL_GetTick>
 8015926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	88fa      	ldrh	r2, [r7, #6]
 801592c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	88fa      	ldrh	r2, [r7, #6]
 8015932:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	2200      	movs	r2, #0
 8015938:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801593c:	e042      	b.n	80159c4 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015942:	b29b      	uxth	r3, r3
 8015944:	3b01      	subs	r3, #1
 8015946:	b29a      	uxth	r2, r3
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	689b      	ldr	r3, [r3, #8]
 8015950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015954:	d122      	bne.n	801599c <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015956:	683b      	ldr	r3, [r7, #0]
 8015958:	9300      	str	r3, [sp, #0]
 801595a:	697b      	ldr	r3, [r7, #20]
 801595c:	2200      	movs	r2, #0
 801595e:	2180      	movs	r1, #128	; 0x80
 8015960:	68f8      	ldr	r0, [r7, #12]
 8015962:	f000 f84c 	bl	80159fe <UART_WaitOnFlagUntilTimeout>
 8015966:	4603      	mov	r3, r0
 8015968:	2b00      	cmp	r3, #0
 801596a:	d001      	beq.n	8015970 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801596c:	2303      	movs	r3, #3
 801596e:	e042      	b.n	80159f6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8015970:	68bb      	ldr	r3, [r7, #8]
 8015972:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8015974:	693b      	ldr	r3, [r7, #16]
 8015976:	881b      	ldrh	r3, [r3, #0]
 8015978:	461a      	mov	r2, r3
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015982:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	691b      	ldr	r3, [r3, #16]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d103      	bne.n	8015994 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801598c:	68bb      	ldr	r3, [r7, #8]
 801598e:	3302      	adds	r3, #2
 8015990:	60bb      	str	r3, [r7, #8]
 8015992:	e017      	b.n	80159c4 <HAL_UART_Transmit+0xf8>
=======
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013868:	2b01      	cmp	r3, #1
 801386a:	d101      	bne.n	8013870 <HAL_UART_Transmit+0x40>
 801386c:	2302      	movs	r3, #2
 801386e:	e074      	b.n	801395a <HAL_UART_Transmit+0x12a>
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	2201      	movs	r2, #1
 8013874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	2200      	movs	r2, #0
 801387c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	2221      	movs	r2, #33	; 0x21
 8013882:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8013886:	f7fb fa81 	bl	800ed8c <HAL_GetTick>
 801388a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	88fa      	ldrh	r2, [r7, #6]
 8013890:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	88fa      	ldrh	r2, [r7, #6]
 8013896:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	2200      	movs	r2, #0
 801389c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80138a0:	e042      	b.n	8013928 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80138a6:	b29b      	uxth	r3, r3
 80138a8:	3b01      	subs	r3, #1
 80138aa:	b29a      	uxth	r2, r3
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	689b      	ldr	r3, [r3, #8]
 80138b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80138b8:	d122      	bne.n	8013900 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	9300      	str	r3, [sp, #0]
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	2200      	movs	r2, #0
 80138c2:	2180      	movs	r1, #128	; 0x80
 80138c4:	68f8      	ldr	r0, [r7, #12]
 80138c6:	f000 f84c 	bl	8013962 <UART_WaitOnFlagUntilTimeout>
 80138ca:	4603      	mov	r3, r0
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d001      	beq.n	80138d4 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80138d0:	2303      	movs	r3, #3
 80138d2:	e042      	b.n	801395a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80138d4:	68bb      	ldr	r3, [r7, #8]
 80138d6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80138d8:	693b      	ldr	r3, [r7, #16]
 80138da:	881b      	ldrh	r3, [r3, #0]
 80138dc:	461a      	mov	r2, r3
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80138e6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	691b      	ldr	r3, [r3, #16]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d103      	bne.n	80138f8 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	3302      	adds	r3, #2
 80138f4:	60bb      	str	r3, [r7, #8]
 80138f6:	e017      	b.n	8013928 <HAL_UART_Transmit+0xf8>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }
        else
        {
          pData += 1U;
<<<<<<< HEAD
 8015994:	68bb      	ldr	r3, [r7, #8]
 8015996:	3301      	adds	r3, #1
 8015998:	60bb      	str	r3, [r7, #8]
 801599a:	e013      	b.n	80159c4 <HAL_UART_Transmit+0xf8>
=======
 80138f8:	68bb      	ldr	r3, [r7, #8]
 80138fa:	3301      	adds	r3, #1
 80138fc:	60bb      	str	r3, [r7, #8]
 80138fe:	e013      	b.n	8013928 <HAL_UART_Transmit+0xf8>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 801599c:	683b      	ldr	r3, [r7, #0]
 801599e:	9300      	str	r3, [sp, #0]
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	2200      	movs	r2, #0
 80159a4:	2180      	movs	r1, #128	; 0x80
 80159a6:	68f8      	ldr	r0, [r7, #12]
 80159a8:	f000 f829 	bl	80159fe <UART_WaitOnFlagUntilTimeout>
 80159ac:	4603      	mov	r3, r0
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d001      	beq.n	80159b6 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80159b2:	2303      	movs	r3, #3
 80159b4:	e01f      	b.n	80159f6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80159b6:	68bb      	ldr	r3, [r7, #8]
 80159b8:	1c5a      	adds	r2, r3, #1
 80159ba:	60ba      	str	r2, [r7, #8]
 80159bc:	781a      	ldrb	r2, [r3, #0]
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80159c8:	b29b      	uxth	r3, r3
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d1b7      	bne.n	801593e <HAL_UART_Transmit+0x72>
=======
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	9300      	str	r3, [sp, #0]
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	2200      	movs	r2, #0
 8013908:	2180      	movs	r1, #128	; 0x80
 801390a:	68f8      	ldr	r0, [r7, #12]
 801390c:	f000 f829 	bl	8013962 <UART_WaitOnFlagUntilTimeout>
 8013910:	4603      	mov	r3, r0
 8013912:	2b00      	cmp	r3, #0
 8013914:	d001      	beq.n	801391a <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8013916:	2303      	movs	r3, #3
 8013918:	e01f      	b.n	801395a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	1c5a      	adds	r2, r3, #1
 801391e:	60ba      	str	r2, [r7, #8]
 8013920:	781a      	ldrb	r2, [r3, #0]
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801392c:	b29b      	uxth	r3, r3
 801392e:	2b00      	cmp	r3, #0
 8013930:	d1b7      	bne.n	80138a2 <HAL_UART_Transmit+0x72>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	9300      	str	r3, [sp, #0]
 80159d2:	697b      	ldr	r3, [r7, #20]
 80159d4:	2200      	movs	r2, #0
 80159d6:	2140      	movs	r1, #64	; 0x40
 80159d8:	68f8      	ldr	r0, [r7, #12]
 80159da:	f000 f810 	bl	80159fe <UART_WaitOnFlagUntilTimeout>
 80159de:	4603      	mov	r3, r0
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d001      	beq.n	80159e8 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80159e4:	2303      	movs	r3, #3
 80159e6:	e006      	b.n	80159f6 <HAL_UART_Transmit+0x12a>
=======
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	9300      	str	r3, [sp, #0]
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	2200      	movs	r2, #0
 801393a:	2140      	movs	r1, #64	; 0x40
 801393c:	68f8      	ldr	r0, [r7, #12]
 801393e:	f000 f810 	bl	8013962 <UART_WaitOnFlagUntilTimeout>
 8013942:	4603      	mov	r3, r0
 8013944:	2b00      	cmp	r3, #0
 8013946:	d001      	beq.n	801394c <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8013948:	2303      	movs	r3, #3
 801394a:	e006      	b.n	801395a <HAL_UART_Transmit+0x12a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	2220      	movs	r2, #32
 80159ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80159f0:	2300      	movs	r3, #0
 80159f2:	e000      	b.n	80159f6 <HAL_UART_Transmit+0x12a>
=======
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	2220      	movs	r2, #32
 8013950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8013954:	2300      	movs	r3, #0
 8013956:	e000      	b.n	801395a <HAL_UART_Transmit+0x12a>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80159f4:	2302      	movs	r3, #2
  }
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3718      	adds	r7, #24
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}

080159fe <UART_WaitOnFlagUntilTimeout>:
=======
 8013958:	2302      	movs	r3, #2
  }
}
 801395a:	4618      	mov	r0, r3
 801395c:	3718      	adds	r7, #24
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}

08013962 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 80159fe:	b580      	push	{r7, lr}
 8015a00:	b084      	sub	sp, #16
 8015a02:	af00      	add	r7, sp, #0
 8015a04:	60f8      	str	r0, [r7, #12]
 8015a06:	60b9      	str	r1, [r7, #8]
 8015a08:	603b      	str	r3, [r7, #0]
 8015a0a:	4613      	mov	r3, r2
 8015a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015a0e:	e02c      	b.n	8015a6a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015a10:	69bb      	ldr	r3, [r7, #24]
 8015a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a16:	d028      	beq.n	8015a6a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8015a18:	69bb      	ldr	r3, [r7, #24]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d007      	beq.n	8015a2e <UART_WaitOnFlagUntilTimeout+0x30>
 8015a1e:	f7fb fa03 	bl	8010e28 <HAL_GetTick>
 8015a22:	4602      	mov	r2, r0
 8015a24:	683b      	ldr	r3, [r7, #0]
 8015a26:	1ad3      	subs	r3, r2, r3
 8015a28:	69ba      	ldr	r2, [r7, #24]
 8015a2a:	429a      	cmp	r2, r3
 8015a2c:	d21d      	bcs.n	8015a6a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	68da      	ldr	r2, [r3, #12]
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8015a3c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	695a      	ldr	r2, [r3, #20]
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	f022 0201 	bic.w	r2, r2, #1
 8015a4c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	2220      	movs	r2, #32
 8015a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	2220      	movs	r2, #32
 8015a5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	2200      	movs	r2, #0
 8015a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8015a66:	2303      	movs	r3, #3
 8015a68:	e00f      	b.n	8015a8a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	681a      	ldr	r2, [r3, #0]
 8015a70:	68bb      	ldr	r3, [r7, #8]
 8015a72:	4013      	ands	r3, r2
 8015a74:	68ba      	ldr	r2, [r7, #8]
 8015a76:	429a      	cmp	r2, r3
 8015a78:	bf0c      	ite	eq
 8015a7a:	2301      	moveq	r3, #1
 8015a7c:	2300      	movne	r3, #0
 8015a7e:	b2db      	uxtb	r3, r3
 8015a80:	461a      	mov	r2, r3
 8015a82:	79fb      	ldrb	r3, [r7, #7]
 8015a84:	429a      	cmp	r2, r3
 8015a86:	d0c3      	beq.n	8015a10 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8013962:	b580      	push	{r7, lr}
 8013964:	b084      	sub	sp, #16
 8013966:	af00      	add	r7, sp, #0
 8013968:	60f8      	str	r0, [r7, #12]
 801396a:	60b9      	str	r1, [r7, #8]
 801396c:	603b      	str	r3, [r7, #0]
 801396e:	4613      	mov	r3, r2
 8013970:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013972:	e02c      	b.n	80139ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013974:	69bb      	ldr	r3, [r7, #24]
 8013976:	f1b3 3fff 	cmp.w	r3, #4294967295
 801397a:	d028      	beq.n	80139ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801397c:	69bb      	ldr	r3, [r7, #24]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d007      	beq.n	8013992 <UART_WaitOnFlagUntilTimeout+0x30>
 8013982:	f7fb fa03 	bl	800ed8c <HAL_GetTick>
 8013986:	4602      	mov	r2, r0
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	1ad3      	subs	r3, r2, r3
 801398c:	69ba      	ldr	r2, [r7, #24]
 801398e:	429a      	cmp	r2, r3
 8013990:	d21d      	bcs.n	80139ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	68da      	ldr	r2, [r3, #12]
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80139a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	695a      	ldr	r2, [r3, #20]
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	f022 0201 	bic.w	r2, r2, #1
 80139b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	2220      	movs	r2, #32
 80139b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	2220      	movs	r2, #32
 80139be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	2200      	movs	r2, #0
 80139c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80139ca:	2303      	movs	r3, #3
 80139cc:	e00f      	b.n	80139ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	681a      	ldr	r2, [r3, #0]
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	4013      	ands	r3, r2
 80139d8:	68ba      	ldr	r2, [r7, #8]
 80139da:	429a      	cmp	r2, r3
 80139dc:	bf0c      	ite	eq
 80139de:	2301      	moveq	r3, #1
 80139e0:	2300      	movne	r3, #0
 80139e2:	b2db      	uxtb	r3, r3
 80139e4:	461a      	mov	r2, r3
 80139e6:	79fb      	ldrb	r3, [r7, #7]
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d0c3      	beq.n	8013974 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8015a88:	2300      	movs	r3, #0
}
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	3710      	adds	r7, #16
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bd80      	pop	{r7, pc}
	...

08015a94 <UART_SetConfig>:
=======
 80139ec:	2300      	movs	r3, #0
}
 80139ee:	4618      	mov	r0, r3
 80139f0:	3710      	adds	r7, #16
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
	...

080139f8 <UART_SetConfig>:
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8015a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a98:	b085      	sub	sp, #20
 8015a9a:	af00      	add	r7, sp, #0
 8015a9c:	6078      	str	r0, [r7, #4]
=======
 80139f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139fc:	b085      	sub	sp, #20
 80139fe:	af00      	add	r7, sp, #0
 8013a00:	6078      	str	r0, [r7, #4]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	691b      	ldr	r3, [r3, #16]
 8015aa4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	68da      	ldr	r2, [r3, #12]
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	430a      	orrs	r2, r1
 8015ab2:	611a      	str	r2, [r3, #16]
=======
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	691b      	ldr	r3, [r3, #16]
 8013a08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	68da      	ldr	r2, [r3, #12]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	430a      	orrs	r2, r1
 8013a16:	611a      	str	r2, [r3, #16]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	689a      	ldr	r2, [r3, #8]
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	691b      	ldr	r3, [r3, #16]
 8015abc:	431a      	orrs	r2, r3
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	695b      	ldr	r3, [r3, #20]
 8015ac2:	431a      	orrs	r2, r3
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	69db      	ldr	r3, [r3, #28]
 8015ac8:	4313      	orrs	r3, r2
 8015aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	68db      	ldr	r3, [r3, #12]
 8015ad2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8015ad6:	f023 030c 	bic.w	r3, r3, #12
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	6812      	ldr	r2, [r2, #0]
 8015ade:	68f9      	ldr	r1, [r7, #12]
 8015ae0:	430b      	orrs	r3, r1
 8015ae2:	60d3      	str	r3, [r2, #12]
=======
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	689a      	ldr	r2, [r3, #8]
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	691b      	ldr	r3, [r3, #16]
 8013a20:	431a      	orrs	r2, r3
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	695b      	ldr	r3, [r3, #20]
 8013a26:	431a      	orrs	r2, r3
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	69db      	ldr	r3, [r3, #28]
 8013a2c:	4313      	orrs	r3, r2
 8013a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	68db      	ldr	r3, [r3, #12]
 8013a36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8013a3a:	f023 030c 	bic.w	r3, r3, #12
 8013a3e:	687a      	ldr	r2, [r7, #4]
 8013a40:	6812      	ldr	r2, [r2, #0]
 8013a42:	68f9      	ldr	r1, [r7, #12]
 8013a44:	430b      	orrs	r3, r1
 8013a46:	60d3      	str	r3, [r2, #12]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	695b      	ldr	r3, [r3, #20]
 8015aea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	699a      	ldr	r2, [r3, #24]
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	430a      	orrs	r2, r1
 8015af8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	69db      	ldr	r3, [r3, #28]
 8015afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015b02:	f040 818b 	bne.w	8015e1c <UART_SetConfig+0x388>
=======
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	695b      	ldr	r3, [r3, #20]
 8013a4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	699a      	ldr	r2, [r3, #24]
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	430a      	orrs	r2, r1
 8013a5c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	69db      	ldr	r3, [r3, #28]
 8013a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013a66:	f040 818b 	bne.w	8013d80 <UART_SetConfig+0x388>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	4ac1      	ldr	r2, [pc, #772]	; (8015e10 <UART_SetConfig+0x37c>)
 8015b0c:	4293      	cmp	r3, r2
 8015b0e:	d005      	beq.n	8015b1c <UART_SetConfig+0x88>
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	4abf      	ldr	r2, [pc, #764]	; (8015e14 <UART_SetConfig+0x380>)
 8015b16:	4293      	cmp	r3, r2
 8015b18:	f040 80bd 	bne.w	8015c96 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8015b1c:	f7fd fdce 	bl	80136bc <HAL_RCC_GetPCLK2Freq>
 8015b20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015b22:	68bb      	ldr	r3, [r7, #8]
 8015b24:	461d      	mov	r5, r3
 8015b26:	f04f 0600 	mov.w	r6, #0
 8015b2a:	46a8      	mov	r8, r5
 8015b2c:	46b1      	mov	r9, r6
 8015b2e:	eb18 0308 	adds.w	r3, r8, r8
 8015b32:	eb49 0409 	adc.w	r4, r9, r9
 8015b36:	4698      	mov	r8, r3
 8015b38:	46a1      	mov	r9, r4
 8015b3a:	eb18 0805 	adds.w	r8, r8, r5
 8015b3e:	eb49 0906 	adc.w	r9, r9, r6
 8015b42:	f04f 0100 	mov.w	r1, #0
 8015b46:	f04f 0200 	mov.w	r2, #0
 8015b4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015b4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015b52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015b56:	4688      	mov	r8, r1
 8015b58:	4691      	mov	r9, r2
 8015b5a:	eb18 0005 	adds.w	r0, r8, r5
 8015b5e:	eb49 0106 	adc.w	r1, r9, r6
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	685b      	ldr	r3, [r3, #4]
 8015b66:	461d      	mov	r5, r3
 8015b68:	f04f 0600 	mov.w	r6, #0
 8015b6c:	196b      	adds	r3, r5, r5
 8015b6e:	eb46 0406 	adc.w	r4, r6, r6
 8015b72:	461a      	mov	r2, r3
 8015b74:	4623      	mov	r3, r4
 8015b76:	f7f2 ff9f 	bl	8008ab8 <__aeabi_uldivmod>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	460c      	mov	r4, r1
 8015b7e:	461a      	mov	r2, r3
 8015b80:	4ba5      	ldr	r3, [pc, #660]	; (8015e18 <UART_SetConfig+0x384>)
 8015b82:	fba3 2302 	umull	r2, r3, r3, r2
 8015b86:	095b      	lsrs	r3, r3, #5
 8015b88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015b8c:	68bb      	ldr	r3, [r7, #8]
 8015b8e:	461d      	mov	r5, r3
 8015b90:	f04f 0600 	mov.w	r6, #0
 8015b94:	46a9      	mov	r9, r5
 8015b96:	46b2      	mov	sl, r6
 8015b98:	eb19 0309 	adds.w	r3, r9, r9
 8015b9c:	eb4a 040a 	adc.w	r4, sl, sl
 8015ba0:	4699      	mov	r9, r3
 8015ba2:	46a2      	mov	sl, r4
 8015ba4:	eb19 0905 	adds.w	r9, r9, r5
 8015ba8:	eb4a 0a06 	adc.w	sl, sl, r6
 8015bac:	f04f 0100 	mov.w	r1, #0
 8015bb0:	f04f 0200 	mov.w	r2, #0
 8015bb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015bb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015bbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015bc0:	4689      	mov	r9, r1
 8015bc2:	4692      	mov	sl, r2
 8015bc4:	eb19 0005 	adds.w	r0, r9, r5
 8015bc8:	eb4a 0106 	adc.w	r1, sl, r6
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	685b      	ldr	r3, [r3, #4]
 8015bd0:	461d      	mov	r5, r3
 8015bd2:	f04f 0600 	mov.w	r6, #0
 8015bd6:	196b      	adds	r3, r5, r5
 8015bd8:	eb46 0406 	adc.w	r4, r6, r6
 8015bdc:	461a      	mov	r2, r3
 8015bde:	4623      	mov	r3, r4
 8015be0:	f7f2 ff6a 	bl	8008ab8 <__aeabi_uldivmod>
 8015be4:	4603      	mov	r3, r0
 8015be6:	460c      	mov	r4, r1
 8015be8:	461a      	mov	r2, r3
 8015bea:	4b8b      	ldr	r3, [pc, #556]	; (8015e18 <UART_SetConfig+0x384>)
 8015bec:	fba3 1302 	umull	r1, r3, r3, r2
 8015bf0:	095b      	lsrs	r3, r3, #5
 8015bf2:	2164      	movs	r1, #100	; 0x64
 8015bf4:	fb01 f303 	mul.w	r3, r1, r3
 8015bf8:	1ad3      	subs	r3, r2, r3
 8015bfa:	00db      	lsls	r3, r3, #3
 8015bfc:	3332      	adds	r3, #50	; 0x32
 8015bfe:	4a86      	ldr	r2, [pc, #536]	; (8015e18 <UART_SetConfig+0x384>)
 8015c00:	fba2 2303 	umull	r2, r3, r2, r3
 8015c04:	095b      	lsrs	r3, r3, #5
 8015c06:	005b      	lsls	r3, r3, #1
 8015c08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015c0c:	4498      	add	r8, r3
 8015c0e:	68bb      	ldr	r3, [r7, #8]
 8015c10:	461d      	mov	r5, r3
 8015c12:	f04f 0600 	mov.w	r6, #0
 8015c16:	46a9      	mov	r9, r5
 8015c18:	46b2      	mov	sl, r6
 8015c1a:	eb19 0309 	adds.w	r3, r9, r9
 8015c1e:	eb4a 040a 	adc.w	r4, sl, sl
 8015c22:	4699      	mov	r9, r3
 8015c24:	46a2      	mov	sl, r4
 8015c26:	eb19 0905 	adds.w	r9, r9, r5
 8015c2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8015c2e:	f04f 0100 	mov.w	r1, #0
 8015c32:	f04f 0200 	mov.w	r2, #0
 8015c36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015c3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015c3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015c42:	4689      	mov	r9, r1
 8015c44:	4692      	mov	sl, r2
 8015c46:	eb19 0005 	adds.w	r0, r9, r5
 8015c4a:	eb4a 0106 	adc.w	r1, sl, r6
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	685b      	ldr	r3, [r3, #4]
 8015c52:	461d      	mov	r5, r3
 8015c54:	f04f 0600 	mov.w	r6, #0
 8015c58:	196b      	adds	r3, r5, r5
 8015c5a:	eb46 0406 	adc.w	r4, r6, r6
 8015c5e:	461a      	mov	r2, r3
 8015c60:	4623      	mov	r3, r4
 8015c62:	f7f2 ff29 	bl	8008ab8 <__aeabi_uldivmod>
 8015c66:	4603      	mov	r3, r0
 8015c68:	460c      	mov	r4, r1
 8015c6a:	461a      	mov	r2, r3
 8015c6c:	4b6a      	ldr	r3, [pc, #424]	; (8015e18 <UART_SetConfig+0x384>)
 8015c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8015c72:	095b      	lsrs	r3, r3, #5
 8015c74:	2164      	movs	r1, #100	; 0x64
 8015c76:	fb01 f303 	mul.w	r3, r1, r3
 8015c7a:	1ad3      	subs	r3, r2, r3
 8015c7c:	00db      	lsls	r3, r3, #3
 8015c7e:	3332      	adds	r3, #50	; 0x32
 8015c80:	4a65      	ldr	r2, [pc, #404]	; (8015e18 <UART_SetConfig+0x384>)
 8015c82:	fba2 2303 	umull	r2, r3, r2, r3
 8015c86:	095b      	lsrs	r3, r3, #5
 8015c88:	f003 0207 	and.w	r2, r3, #7
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	4442      	add	r2, r8
 8015c92:	609a      	str	r2, [r3, #8]
 8015c94:	e26f      	b.n	8016176 <UART_SetConfig+0x6e2>
=======
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	4ac1      	ldr	r2, [pc, #772]	; (8013d74 <UART_SetConfig+0x37c>)
 8013a70:	4293      	cmp	r3, r2
 8013a72:	d005      	beq.n	8013a80 <UART_SetConfig+0x88>
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	4abf      	ldr	r2, [pc, #764]	; (8013d78 <UART_SetConfig+0x380>)
 8013a7a:	4293      	cmp	r3, r2
 8013a7c:	f040 80bd 	bne.w	8013bfa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8013a80:	f7fd fdce 	bl	8011620 <HAL_RCC_GetPCLK2Freq>
 8013a84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013a86:	68bb      	ldr	r3, [r7, #8]
 8013a88:	461d      	mov	r5, r3
 8013a8a:	f04f 0600 	mov.w	r6, #0
 8013a8e:	46a8      	mov	r8, r5
 8013a90:	46b1      	mov	r9, r6
 8013a92:	eb18 0308 	adds.w	r3, r8, r8
 8013a96:	eb49 0409 	adc.w	r4, r9, r9
 8013a9a:	4698      	mov	r8, r3
 8013a9c:	46a1      	mov	r9, r4
 8013a9e:	eb18 0805 	adds.w	r8, r8, r5
 8013aa2:	eb49 0906 	adc.w	r9, r9, r6
 8013aa6:	f04f 0100 	mov.w	r1, #0
 8013aaa:	f04f 0200 	mov.w	r2, #0
 8013aae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013ab2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013ab6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013aba:	4688      	mov	r8, r1
 8013abc:	4691      	mov	r9, r2
 8013abe:	eb18 0005 	adds.w	r0, r8, r5
 8013ac2:	eb49 0106 	adc.w	r1, r9, r6
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	685b      	ldr	r3, [r3, #4]
 8013aca:	461d      	mov	r5, r3
 8013acc:	f04f 0600 	mov.w	r6, #0
 8013ad0:	196b      	adds	r3, r5, r5
 8013ad2:	eb46 0406 	adc.w	r4, r6, r6
 8013ad6:	461a      	mov	r2, r3
 8013ad8:	4623      	mov	r3, r4
 8013ada:	f7f4 ffed 	bl	8008ab8 <__aeabi_uldivmod>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	460c      	mov	r4, r1
 8013ae2:	461a      	mov	r2, r3
 8013ae4:	4ba5      	ldr	r3, [pc, #660]	; (8013d7c <UART_SetConfig+0x384>)
 8013ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8013aea:	095b      	lsrs	r3, r3, #5
 8013aec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013af0:	68bb      	ldr	r3, [r7, #8]
 8013af2:	461d      	mov	r5, r3
 8013af4:	f04f 0600 	mov.w	r6, #0
 8013af8:	46a9      	mov	r9, r5
 8013afa:	46b2      	mov	sl, r6
 8013afc:	eb19 0309 	adds.w	r3, r9, r9
 8013b00:	eb4a 040a 	adc.w	r4, sl, sl
 8013b04:	4699      	mov	r9, r3
 8013b06:	46a2      	mov	sl, r4
 8013b08:	eb19 0905 	adds.w	r9, r9, r5
 8013b0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8013b10:	f04f 0100 	mov.w	r1, #0
 8013b14:	f04f 0200 	mov.w	r2, #0
 8013b18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013b1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013b20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013b24:	4689      	mov	r9, r1
 8013b26:	4692      	mov	sl, r2
 8013b28:	eb19 0005 	adds.w	r0, r9, r5
 8013b2c:	eb4a 0106 	adc.w	r1, sl, r6
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	685b      	ldr	r3, [r3, #4]
 8013b34:	461d      	mov	r5, r3
 8013b36:	f04f 0600 	mov.w	r6, #0
 8013b3a:	196b      	adds	r3, r5, r5
 8013b3c:	eb46 0406 	adc.w	r4, r6, r6
 8013b40:	461a      	mov	r2, r3
 8013b42:	4623      	mov	r3, r4
 8013b44:	f7f4 ffb8 	bl	8008ab8 <__aeabi_uldivmod>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	460c      	mov	r4, r1
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	4b8b      	ldr	r3, [pc, #556]	; (8013d7c <UART_SetConfig+0x384>)
 8013b50:	fba3 1302 	umull	r1, r3, r3, r2
 8013b54:	095b      	lsrs	r3, r3, #5
 8013b56:	2164      	movs	r1, #100	; 0x64
 8013b58:	fb01 f303 	mul.w	r3, r1, r3
 8013b5c:	1ad3      	subs	r3, r2, r3
 8013b5e:	00db      	lsls	r3, r3, #3
 8013b60:	3332      	adds	r3, #50	; 0x32
 8013b62:	4a86      	ldr	r2, [pc, #536]	; (8013d7c <UART_SetConfig+0x384>)
 8013b64:	fba2 2303 	umull	r2, r3, r2, r3
 8013b68:	095b      	lsrs	r3, r3, #5
 8013b6a:	005b      	lsls	r3, r3, #1
 8013b6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013b70:	4498      	add	r8, r3
 8013b72:	68bb      	ldr	r3, [r7, #8]
 8013b74:	461d      	mov	r5, r3
 8013b76:	f04f 0600 	mov.w	r6, #0
 8013b7a:	46a9      	mov	r9, r5
 8013b7c:	46b2      	mov	sl, r6
 8013b7e:	eb19 0309 	adds.w	r3, r9, r9
 8013b82:	eb4a 040a 	adc.w	r4, sl, sl
 8013b86:	4699      	mov	r9, r3
 8013b88:	46a2      	mov	sl, r4
 8013b8a:	eb19 0905 	adds.w	r9, r9, r5
 8013b8e:	eb4a 0a06 	adc.w	sl, sl, r6
 8013b92:	f04f 0100 	mov.w	r1, #0
 8013b96:	f04f 0200 	mov.w	r2, #0
 8013b9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013b9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013ba2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013ba6:	4689      	mov	r9, r1
 8013ba8:	4692      	mov	sl, r2
 8013baa:	eb19 0005 	adds.w	r0, r9, r5
 8013bae:	eb4a 0106 	adc.w	r1, sl, r6
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	685b      	ldr	r3, [r3, #4]
 8013bb6:	461d      	mov	r5, r3
 8013bb8:	f04f 0600 	mov.w	r6, #0
 8013bbc:	196b      	adds	r3, r5, r5
 8013bbe:	eb46 0406 	adc.w	r4, r6, r6
 8013bc2:	461a      	mov	r2, r3
 8013bc4:	4623      	mov	r3, r4
 8013bc6:	f7f4 ff77 	bl	8008ab8 <__aeabi_uldivmod>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	460c      	mov	r4, r1
 8013bce:	461a      	mov	r2, r3
 8013bd0:	4b6a      	ldr	r3, [pc, #424]	; (8013d7c <UART_SetConfig+0x384>)
 8013bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8013bd6:	095b      	lsrs	r3, r3, #5
 8013bd8:	2164      	movs	r1, #100	; 0x64
 8013bda:	fb01 f303 	mul.w	r3, r1, r3
 8013bde:	1ad3      	subs	r3, r2, r3
 8013be0:	00db      	lsls	r3, r3, #3
 8013be2:	3332      	adds	r3, #50	; 0x32
 8013be4:	4a65      	ldr	r2, [pc, #404]	; (8013d7c <UART_SetConfig+0x384>)
 8013be6:	fba2 2303 	umull	r2, r3, r2, r3
 8013bea:	095b      	lsrs	r3, r3, #5
 8013bec:	f003 0207 	and.w	r2, r3, #7
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	4442      	add	r2, r8
 8013bf6:	609a      	str	r2, [r3, #8]
 8013bf8:	e26f      	b.n	80140da <UART_SetConfig+0x6e2>
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8015c96:	f7fd fcfd 	bl	8013694 <HAL_RCC_GetPCLK1Freq>
 8015c9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015c9c:	68bb      	ldr	r3, [r7, #8]
 8015c9e:	461d      	mov	r5, r3
 8015ca0:	f04f 0600 	mov.w	r6, #0
 8015ca4:	46a8      	mov	r8, r5
 8015ca6:	46b1      	mov	r9, r6
 8015ca8:	eb18 0308 	adds.w	r3, r8, r8
 8015cac:	eb49 0409 	adc.w	r4, r9, r9
 8015cb0:	4698      	mov	r8, r3
 8015cb2:	46a1      	mov	r9, r4
 8015cb4:	eb18 0805 	adds.w	r8, r8, r5
 8015cb8:	eb49 0906 	adc.w	r9, r9, r6
 8015cbc:	f04f 0100 	mov.w	r1, #0
 8015cc0:	f04f 0200 	mov.w	r2, #0
 8015cc4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015cc8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015ccc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015cd0:	4688      	mov	r8, r1
 8015cd2:	4691      	mov	r9, r2
 8015cd4:	eb18 0005 	adds.w	r0, r8, r5
 8015cd8:	eb49 0106 	adc.w	r1, r9, r6
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	685b      	ldr	r3, [r3, #4]
 8015ce0:	461d      	mov	r5, r3
 8015ce2:	f04f 0600 	mov.w	r6, #0
 8015ce6:	196b      	adds	r3, r5, r5
 8015ce8:	eb46 0406 	adc.w	r4, r6, r6
 8015cec:	461a      	mov	r2, r3
 8015cee:	4623      	mov	r3, r4
 8015cf0:	f7f2 fee2 	bl	8008ab8 <__aeabi_uldivmod>
 8015cf4:	4603      	mov	r3, r0
 8015cf6:	460c      	mov	r4, r1
 8015cf8:	461a      	mov	r2, r3
 8015cfa:	4b47      	ldr	r3, [pc, #284]	; (8015e18 <UART_SetConfig+0x384>)
 8015cfc:	fba3 2302 	umull	r2, r3, r3, r2
 8015d00:	095b      	lsrs	r3, r3, #5
 8015d02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015d06:	68bb      	ldr	r3, [r7, #8]
 8015d08:	461d      	mov	r5, r3
 8015d0a:	f04f 0600 	mov.w	r6, #0
 8015d0e:	46a9      	mov	r9, r5
 8015d10:	46b2      	mov	sl, r6
 8015d12:	eb19 0309 	adds.w	r3, r9, r9
 8015d16:	eb4a 040a 	adc.w	r4, sl, sl
 8015d1a:	4699      	mov	r9, r3
 8015d1c:	46a2      	mov	sl, r4
 8015d1e:	eb19 0905 	adds.w	r9, r9, r5
 8015d22:	eb4a 0a06 	adc.w	sl, sl, r6
 8015d26:	f04f 0100 	mov.w	r1, #0
 8015d2a:	f04f 0200 	mov.w	r2, #0
 8015d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015d32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015d36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015d3a:	4689      	mov	r9, r1
 8015d3c:	4692      	mov	sl, r2
 8015d3e:	eb19 0005 	adds.w	r0, r9, r5
 8015d42:	eb4a 0106 	adc.w	r1, sl, r6
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	685b      	ldr	r3, [r3, #4]
 8015d4a:	461d      	mov	r5, r3
 8015d4c:	f04f 0600 	mov.w	r6, #0
 8015d50:	196b      	adds	r3, r5, r5
 8015d52:	eb46 0406 	adc.w	r4, r6, r6
 8015d56:	461a      	mov	r2, r3
 8015d58:	4623      	mov	r3, r4
 8015d5a:	f7f2 fead 	bl	8008ab8 <__aeabi_uldivmod>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	460c      	mov	r4, r1
 8015d62:	461a      	mov	r2, r3
 8015d64:	4b2c      	ldr	r3, [pc, #176]	; (8015e18 <UART_SetConfig+0x384>)
 8015d66:	fba3 1302 	umull	r1, r3, r3, r2
 8015d6a:	095b      	lsrs	r3, r3, #5
 8015d6c:	2164      	movs	r1, #100	; 0x64
 8015d6e:	fb01 f303 	mul.w	r3, r1, r3
 8015d72:	1ad3      	subs	r3, r2, r3
 8015d74:	00db      	lsls	r3, r3, #3
 8015d76:	3332      	adds	r3, #50	; 0x32
 8015d78:	4a27      	ldr	r2, [pc, #156]	; (8015e18 <UART_SetConfig+0x384>)
 8015d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8015d7e:	095b      	lsrs	r3, r3, #5
 8015d80:	005b      	lsls	r3, r3, #1
 8015d82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015d86:	4498      	add	r8, r3
 8015d88:	68bb      	ldr	r3, [r7, #8]
 8015d8a:	461d      	mov	r5, r3
 8015d8c:	f04f 0600 	mov.w	r6, #0
 8015d90:	46a9      	mov	r9, r5
 8015d92:	46b2      	mov	sl, r6
 8015d94:	eb19 0309 	adds.w	r3, r9, r9
 8015d98:	eb4a 040a 	adc.w	r4, sl, sl
 8015d9c:	4699      	mov	r9, r3
 8015d9e:	46a2      	mov	sl, r4
 8015da0:	eb19 0905 	adds.w	r9, r9, r5
 8015da4:	eb4a 0a06 	adc.w	sl, sl, r6
 8015da8:	f04f 0100 	mov.w	r1, #0
 8015dac:	f04f 0200 	mov.w	r2, #0
 8015db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015db4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015db8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015dbc:	4689      	mov	r9, r1
 8015dbe:	4692      	mov	sl, r2
 8015dc0:	eb19 0005 	adds.w	r0, r9, r5
 8015dc4:	eb4a 0106 	adc.w	r1, sl, r6
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	685b      	ldr	r3, [r3, #4]
 8015dcc:	461d      	mov	r5, r3
 8015dce:	f04f 0600 	mov.w	r6, #0
 8015dd2:	196b      	adds	r3, r5, r5
 8015dd4:	eb46 0406 	adc.w	r4, r6, r6
 8015dd8:	461a      	mov	r2, r3
 8015dda:	4623      	mov	r3, r4
 8015ddc:	f7f2 fe6c 	bl	8008ab8 <__aeabi_uldivmod>
 8015de0:	4603      	mov	r3, r0
 8015de2:	460c      	mov	r4, r1
 8015de4:	461a      	mov	r2, r3
 8015de6:	4b0c      	ldr	r3, [pc, #48]	; (8015e18 <UART_SetConfig+0x384>)
 8015de8:	fba3 1302 	umull	r1, r3, r3, r2
 8015dec:	095b      	lsrs	r3, r3, #5
 8015dee:	2164      	movs	r1, #100	; 0x64
 8015df0:	fb01 f303 	mul.w	r3, r1, r3
 8015df4:	1ad3      	subs	r3, r2, r3
 8015df6:	00db      	lsls	r3, r3, #3
 8015df8:	3332      	adds	r3, #50	; 0x32
 8015dfa:	4a07      	ldr	r2, [pc, #28]	; (8015e18 <UART_SetConfig+0x384>)
 8015dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8015e00:	095b      	lsrs	r3, r3, #5
 8015e02:	f003 0207 	and.w	r2, r3, #7
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	4442      	add	r2, r8
 8015e0c:	609a      	str	r2, [r3, #8]
=======
 8013bfa:	f7fd fcfd 	bl	80115f8 <HAL_RCC_GetPCLK1Freq>
 8013bfe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013c00:	68bb      	ldr	r3, [r7, #8]
 8013c02:	461d      	mov	r5, r3
 8013c04:	f04f 0600 	mov.w	r6, #0
 8013c08:	46a8      	mov	r8, r5
 8013c0a:	46b1      	mov	r9, r6
 8013c0c:	eb18 0308 	adds.w	r3, r8, r8
 8013c10:	eb49 0409 	adc.w	r4, r9, r9
 8013c14:	4698      	mov	r8, r3
 8013c16:	46a1      	mov	r9, r4
 8013c18:	eb18 0805 	adds.w	r8, r8, r5
 8013c1c:	eb49 0906 	adc.w	r9, r9, r6
 8013c20:	f04f 0100 	mov.w	r1, #0
 8013c24:	f04f 0200 	mov.w	r2, #0
 8013c28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013c2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013c30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013c34:	4688      	mov	r8, r1
 8013c36:	4691      	mov	r9, r2
 8013c38:	eb18 0005 	adds.w	r0, r8, r5
 8013c3c:	eb49 0106 	adc.w	r1, r9, r6
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	685b      	ldr	r3, [r3, #4]
 8013c44:	461d      	mov	r5, r3
 8013c46:	f04f 0600 	mov.w	r6, #0
 8013c4a:	196b      	adds	r3, r5, r5
 8013c4c:	eb46 0406 	adc.w	r4, r6, r6
 8013c50:	461a      	mov	r2, r3
 8013c52:	4623      	mov	r3, r4
 8013c54:	f7f4 ff30 	bl	8008ab8 <__aeabi_uldivmod>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	460c      	mov	r4, r1
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	4b47      	ldr	r3, [pc, #284]	; (8013d7c <UART_SetConfig+0x384>)
 8013c60:	fba3 2302 	umull	r2, r3, r3, r2
 8013c64:	095b      	lsrs	r3, r3, #5
 8013c66:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	461d      	mov	r5, r3
 8013c6e:	f04f 0600 	mov.w	r6, #0
 8013c72:	46a9      	mov	r9, r5
 8013c74:	46b2      	mov	sl, r6
 8013c76:	eb19 0309 	adds.w	r3, r9, r9
 8013c7a:	eb4a 040a 	adc.w	r4, sl, sl
 8013c7e:	4699      	mov	r9, r3
 8013c80:	46a2      	mov	sl, r4
 8013c82:	eb19 0905 	adds.w	r9, r9, r5
 8013c86:	eb4a 0a06 	adc.w	sl, sl, r6
 8013c8a:	f04f 0100 	mov.w	r1, #0
 8013c8e:	f04f 0200 	mov.w	r2, #0
 8013c92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013c96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013c9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013c9e:	4689      	mov	r9, r1
 8013ca0:	4692      	mov	sl, r2
 8013ca2:	eb19 0005 	adds.w	r0, r9, r5
 8013ca6:	eb4a 0106 	adc.w	r1, sl, r6
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	685b      	ldr	r3, [r3, #4]
 8013cae:	461d      	mov	r5, r3
 8013cb0:	f04f 0600 	mov.w	r6, #0
 8013cb4:	196b      	adds	r3, r5, r5
 8013cb6:	eb46 0406 	adc.w	r4, r6, r6
 8013cba:	461a      	mov	r2, r3
 8013cbc:	4623      	mov	r3, r4
 8013cbe:	f7f4 fefb 	bl	8008ab8 <__aeabi_uldivmod>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	460c      	mov	r4, r1
 8013cc6:	461a      	mov	r2, r3
 8013cc8:	4b2c      	ldr	r3, [pc, #176]	; (8013d7c <UART_SetConfig+0x384>)
 8013cca:	fba3 1302 	umull	r1, r3, r3, r2
 8013cce:	095b      	lsrs	r3, r3, #5
 8013cd0:	2164      	movs	r1, #100	; 0x64
 8013cd2:	fb01 f303 	mul.w	r3, r1, r3
 8013cd6:	1ad3      	subs	r3, r2, r3
 8013cd8:	00db      	lsls	r3, r3, #3
 8013cda:	3332      	adds	r3, #50	; 0x32
 8013cdc:	4a27      	ldr	r2, [pc, #156]	; (8013d7c <UART_SetConfig+0x384>)
 8013cde:	fba2 2303 	umull	r2, r3, r2, r3
 8013ce2:	095b      	lsrs	r3, r3, #5
 8013ce4:	005b      	lsls	r3, r3, #1
 8013ce6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013cea:	4498      	add	r8, r3
 8013cec:	68bb      	ldr	r3, [r7, #8]
 8013cee:	461d      	mov	r5, r3
 8013cf0:	f04f 0600 	mov.w	r6, #0
 8013cf4:	46a9      	mov	r9, r5
 8013cf6:	46b2      	mov	sl, r6
 8013cf8:	eb19 0309 	adds.w	r3, r9, r9
 8013cfc:	eb4a 040a 	adc.w	r4, sl, sl
 8013d00:	4699      	mov	r9, r3
 8013d02:	46a2      	mov	sl, r4
 8013d04:	eb19 0905 	adds.w	r9, r9, r5
 8013d08:	eb4a 0a06 	adc.w	sl, sl, r6
 8013d0c:	f04f 0100 	mov.w	r1, #0
 8013d10:	f04f 0200 	mov.w	r2, #0
 8013d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013d18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013d1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013d20:	4689      	mov	r9, r1
 8013d22:	4692      	mov	sl, r2
 8013d24:	eb19 0005 	adds.w	r0, r9, r5
 8013d28:	eb4a 0106 	adc.w	r1, sl, r6
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	685b      	ldr	r3, [r3, #4]
 8013d30:	461d      	mov	r5, r3
 8013d32:	f04f 0600 	mov.w	r6, #0
 8013d36:	196b      	adds	r3, r5, r5
 8013d38:	eb46 0406 	adc.w	r4, r6, r6
 8013d3c:	461a      	mov	r2, r3
 8013d3e:	4623      	mov	r3, r4
 8013d40:	f7f4 feba 	bl	8008ab8 <__aeabi_uldivmod>
 8013d44:	4603      	mov	r3, r0
 8013d46:	460c      	mov	r4, r1
 8013d48:	461a      	mov	r2, r3
 8013d4a:	4b0c      	ldr	r3, [pc, #48]	; (8013d7c <UART_SetConfig+0x384>)
 8013d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8013d50:	095b      	lsrs	r3, r3, #5
 8013d52:	2164      	movs	r1, #100	; 0x64
 8013d54:	fb01 f303 	mul.w	r3, r1, r3
 8013d58:	1ad3      	subs	r3, r2, r3
 8013d5a:	00db      	lsls	r3, r3, #3
 8013d5c:	3332      	adds	r3, #50	; 0x32
 8013d5e:	4a07      	ldr	r2, [pc, #28]	; (8013d7c <UART_SetConfig+0x384>)
 8013d60:	fba2 2303 	umull	r2, r3, r2, r3
 8013d64:	095b      	lsrs	r3, r3, #5
 8013d66:	f003 0207 	and.w	r2, r3, #7
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	4442      	add	r2, r8
 8013d70:	609a      	str	r2, [r3, #8]
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
<<<<<<< HEAD
 8015e0e:	e1b2      	b.n	8016176 <UART_SetConfig+0x6e2>
 8015e10:	40011000 	.word	0x40011000
 8015e14:	40011400 	.word	0x40011400
 8015e18:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	4ad7      	ldr	r2, [pc, #860]	; (8016180 <UART_SetConfig+0x6ec>)
 8015e22:	4293      	cmp	r3, r2
 8015e24:	d005      	beq.n	8015e32 <UART_SetConfig+0x39e>
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	4ad6      	ldr	r2, [pc, #856]	; (8016184 <UART_SetConfig+0x6f0>)
 8015e2c:	4293      	cmp	r3, r2
 8015e2e:	f040 80d1 	bne.w	8015fd4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8015e32:	f7fd fc43 	bl	80136bc <HAL_RCC_GetPCLK2Freq>
 8015e36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015e38:	68bb      	ldr	r3, [r7, #8]
 8015e3a:	469a      	mov	sl, r3
 8015e3c:	f04f 0b00 	mov.w	fp, #0
 8015e40:	46d0      	mov	r8, sl
 8015e42:	46d9      	mov	r9, fp
 8015e44:	eb18 0308 	adds.w	r3, r8, r8
 8015e48:	eb49 0409 	adc.w	r4, r9, r9
 8015e4c:	4698      	mov	r8, r3
 8015e4e:	46a1      	mov	r9, r4
 8015e50:	eb18 080a 	adds.w	r8, r8, sl
 8015e54:	eb49 090b 	adc.w	r9, r9, fp
 8015e58:	f04f 0100 	mov.w	r1, #0
 8015e5c:	f04f 0200 	mov.w	r2, #0
 8015e60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015e64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015e68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015e6c:	4688      	mov	r8, r1
 8015e6e:	4691      	mov	r9, r2
 8015e70:	eb1a 0508 	adds.w	r5, sl, r8
 8015e74:	eb4b 0609 	adc.w	r6, fp, r9
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	685b      	ldr	r3, [r3, #4]
 8015e7c:	4619      	mov	r1, r3
 8015e7e:	f04f 0200 	mov.w	r2, #0
 8015e82:	f04f 0300 	mov.w	r3, #0
 8015e86:	f04f 0400 	mov.w	r4, #0
 8015e8a:	0094      	lsls	r4, r2, #2
 8015e8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015e90:	008b      	lsls	r3, r1, #2
 8015e92:	461a      	mov	r2, r3
 8015e94:	4623      	mov	r3, r4
 8015e96:	4628      	mov	r0, r5
 8015e98:	4631      	mov	r1, r6
 8015e9a:	f7f2 fe0d 	bl	8008ab8 <__aeabi_uldivmod>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	460c      	mov	r4, r1
 8015ea2:	461a      	mov	r2, r3
 8015ea4:	4bb8      	ldr	r3, [pc, #736]	; (8016188 <UART_SetConfig+0x6f4>)
 8015ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8015eaa:	095b      	lsrs	r3, r3, #5
 8015eac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015eb0:	68bb      	ldr	r3, [r7, #8]
 8015eb2:	469b      	mov	fp, r3
 8015eb4:	f04f 0c00 	mov.w	ip, #0
 8015eb8:	46d9      	mov	r9, fp
 8015eba:	46e2      	mov	sl, ip
 8015ebc:	eb19 0309 	adds.w	r3, r9, r9
 8015ec0:	eb4a 040a 	adc.w	r4, sl, sl
 8015ec4:	4699      	mov	r9, r3
 8015ec6:	46a2      	mov	sl, r4
 8015ec8:	eb19 090b 	adds.w	r9, r9, fp
 8015ecc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015ed0:	f04f 0100 	mov.w	r1, #0
 8015ed4:	f04f 0200 	mov.w	r2, #0
 8015ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015edc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015ee0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015ee4:	4689      	mov	r9, r1
 8015ee6:	4692      	mov	sl, r2
 8015ee8:	eb1b 0509 	adds.w	r5, fp, r9
 8015eec:	eb4c 060a 	adc.w	r6, ip, sl
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	685b      	ldr	r3, [r3, #4]
 8015ef4:	4619      	mov	r1, r3
 8015ef6:	f04f 0200 	mov.w	r2, #0
 8015efa:	f04f 0300 	mov.w	r3, #0
 8015efe:	f04f 0400 	mov.w	r4, #0
 8015f02:	0094      	lsls	r4, r2, #2
 8015f04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015f08:	008b      	lsls	r3, r1, #2
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	4623      	mov	r3, r4
 8015f0e:	4628      	mov	r0, r5
 8015f10:	4631      	mov	r1, r6
 8015f12:	f7f2 fdd1 	bl	8008ab8 <__aeabi_uldivmod>
 8015f16:	4603      	mov	r3, r0
 8015f18:	460c      	mov	r4, r1
 8015f1a:	461a      	mov	r2, r3
 8015f1c:	4b9a      	ldr	r3, [pc, #616]	; (8016188 <UART_SetConfig+0x6f4>)
 8015f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8015f22:	095b      	lsrs	r3, r3, #5
 8015f24:	2164      	movs	r1, #100	; 0x64
 8015f26:	fb01 f303 	mul.w	r3, r1, r3
 8015f2a:	1ad3      	subs	r3, r2, r3
 8015f2c:	011b      	lsls	r3, r3, #4
 8015f2e:	3332      	adds	r3, #50	; 0x32
 8015f30:	4a95      	ldr	r2, [pc, #596]	; (8016188 <UART_SetConfig+0x6f4>)
 8015f32:	fba2 2303 	umull	r2, r3, r2, r3
 8015f36:	095b      	lsrs	r3, r3, #5
 8015f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015f3c:	4498      	add	r8, r3
 8015f3e:	68bb      	ldr	r3, [r7, #8]
 8015f40:	469b      	mov	fp, r3
 8015f42:	f04f 0c00 	mov.w	ip, #0
 8015f46:	46d9      	mov	r9, fp
 8015f48:	46e2      	mov	sl, ip
 8015f4a:	eb19 0309 	adds.w	r3, r9, r9
 8015f4e:	eb4a 040a 	adc.w	r4, sl, sl
 8015f52:	4699      	mov	r9, r3
 8015f54:	46a2      	mov	sl, r4
 8015f56:	eb19 090b 	adds.w	r9, r9, fp
 8015f5a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015f5e:	f04f 0100 	mov.w	r1, #0
 8015f62:	f04f 0200 	mov.w	r2, #0
 8015f66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015f6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015f6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015f72:	4689      	mov	r9, r1
 8015f74:	4692      	mov	sl, r2
 8015f76:	eb1b 0509 	adds.w	r5, fp, r9
 8015f7a:	eb4c 060a 	adc.w	r6, ip, sl
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	685b      	ldr	r3, [r3, #4]
 8015f82:	4619      	mov	r1, r3
 8015f84:	f04f 0200 	mov.w	r2, #0
 8015f88:	f04f 0300 	mov.w	r3, #0
 8015f8c:	f04f 0400 	mov.w	r4, #0
 8015f90:	0094      	lsls	r4, r2, #2
 8015f92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015f96:	008b      	lsls	r3, r1, #2
 8015f98:	461a      	mov	r2, r3
 8015f9a:	4623      	mov	r3, r4
 8015f9c:	4628      	mov	r0, r5
 8015f9e:	4631      	mov	r1, r6
 8015fa0:	f7f2 fd8a 	bl	8008ab8 <__aeabi_uldivmod>
 8015fa4:	4603      	mov	r3, r0
 8015fa6:	460c      	mov	r4, r1
 8015fa8:	461a      	mov	r2, r3
 8015faa:	4b77      	ldr	r3, [pc, #476]	; (8016188 <UART_SetConfig+0x6f4>)
 8015fac:	fba3 1302 	umull	r1, r3, r3, r2
 8015fb0:	095b      	lsrs	r3, r3, #5
 8015fb2:	2164      	movs	r1, #100	; 0x64
 8015fb4:	fb01 f303 	mul.w	r3, r1, r3
 8015fb8:	1ad3      	subs	r3, r2, r3
 8015fba:	011b      	lsls	r3, r3, #4
 8015fbc:	3332      	adds	r3, #50	; 0x32
 8015fbe:	4a72      	ldr	r2, [pc, #456]	; (8016188 <UART_SetConfig+0x6f4>)
 8015fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8015fc4:	095b      	lsrs	r3, r3, #5
 8015fc6:	f003 020f 	and.w	r2, r3, #15
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	4442      	add	r2, r8
 8015fd0:	609a      	str	r2, [r3, #8]
 8015fd2:	e0d0      	b.n	8016176 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8015fd4:	f7fd fb5e 	bl	8013694 <HAL_RCC_GetPCLK1Freq>
 8015fd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015fda:	68bb      	ldr	r3, [r7, #8]
 8015fdc:	469a      	mov	sl, r3
 8015fde:	f04f 0b00 	mov.w	fp, #0
 8015fe2:	46d0      	mov	r8, sl
 8015fe4:	46d9      	mov	r9, fp
 8015fe6:	eb18 0308 	adds.w	r3, r8, r8
 8015fea:	eb49 0409 	adc.w	r4, r9, r9
 8015fee:	4698      	mov	r8, r3
 8015ff0:	46a1      	mov	r9, r4
 8015ff2:	eb18 080a 	adds.w	r8, r8, sl
 8015ff6:	eb49 090b 	adc.w	r9, r9, fp
 8015ffa:	f04f 0100 	mov.w	r1, #0
 8015ffe:	f04f 0200 	mov.w	r2, #0
 8016002:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8016006:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801600a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801600e:	4688      	mov	r8, r1
 8016010:	4691      	mov	r9, r2
 8016012:	eb1a 0508 	adds.w	r5, sl, r8
 8016016:	eb4b 0609 	adc.w	r6, fp, r9
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	685b      	ldr	r3, [r3, #4]
 801601e:	4619      	mov	r1, r3
 8016020:	f04f 0200 	mov.w	r2, #0
 8016024:	f04f 0300 	mov.w	r3, #0
 8016028:	f04f 0400 	mov.w	r4, #0
 801602c:	0094      	lsls	r4, r2, #2
 801602e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8016032:	008b      	lsls	r3, r1, #2
 8016034:	461a      	mov	r2, r3
 8016036:	4623      	mov	r3, r4
 8016038:	4628      	mov	r0, r5
 801603a:	4631      	mov	r1, r6
 801603c:	f7f2 fd3c 	bl	8008ab8 <__aeabi_uldivmod>
 8016040:	4603      	mov	r3, r0
 8016042:	460c      	mov	r4, r1
 8016044:	461a      	mov	r2, r3
 8016046:	4b50      	ldr	r3, [pc, #320]	; (8016188 <UART_SetConfig+0x6f4>)
 8016048:	fba3 2302 	umull	r2, r3, r3, r2
 801604c:	095b      	lsrs	r3, r3, #5
 801604e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	469b      	mov	fp, r3
 8016056:	f04f 0c00 	mov.w	ip, #0
 801605a:	46d9      	mov	r9, fp
 801605c:	46e2      	mov	sl, ip
 801605e:	eb19 0309 	adds.w	r3, r9, r9
 8016062:	eb4a 040a 	adc.w	r4, sl, sl
 8016066:	4699      	mov	r9, r3
 8016068:	46a2      	mov	sl, r4
 801606a:	eb19 090b 	adds.w	r9, r9, fp
 801606e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8016072:	f04f 0100 	mov.w	r1, #0
 8016076:	f04f 0200 	mov.w	r2, #0
 801607a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801607e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8016082:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8016086:	4689      	mov	r9, r1
 8016088:	4692      	mov	sl, r2
 801608a:	eb1b 0509 	adds.w	r5, fp, r9
 801608e:	eb4c 060a 	adc.w	r6, ip, sl
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	685b      	ldr	r3, [r3, #4]
 8016096:	4619      	mov	r1, r3
 8016098:	f04f 0200 	mov.w	r2, #0
 801609c:	f04f 0300 	mov.w	r3, #0
 80160a0:	f04f 0400 	mov.w	r4, #0
 80160a4:	0094      	lsls	r4, r2, #2
 80160a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80160aa:	008b      	lsls	r3, r1, #2
 80160ac:	461a      	mov	r2, r3
 80160ae:	4623      	mov	r3, r4
 80160b0:	4628      	mov	r0, r5
 80160b2:	4631      	mov	r1, r6
 80160b4:	f7f2 fd00 	bl	8008ab8 <__aeabi_uldivmod>
 80160b8:	4603      	mov	r3, r0
 80160ba:	460c      	mov	r4, r1
 80160bc:	461a      	mov	r2, r3
 80160be:	4b32      	ldr	r3, [pc, #200]	; (8016188 <UART_SetConfig+0x6f4>)
 80160c0:	fba3 1302 	umull	r1, r3, r3, r2
 80160c4:	095b      	lsrs	r3, r3, #5
 80160c6:	2164      	movs	r1, #100	; 0x64
 80160c8:	fb01 f303 	mul.w	r3, r1, r3
 80160cc:	1ad3      	subs	r3, r2, r3
 80160ce:	011b      	lsls	r3, r3, #4
 80160d0:	3332      	adds	r3, #50	; 0x32
 80160d2:	4a2d      	ldr	r2, [pc, #180]	; (8016188 <UART_SetConfig+0x6f4>)
 80160d4:	fba2 2303 	umull	r2, r3, r2, r3
 80160d8:	095b      	lsrs	r3, r3, #5
 80160da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80160de:	4498      	add	r8, r3
 80160e0:	68bb      	ldr	r3, [r7, #8]
 80160e2:	469b      	mov	fp, r3
 80160e4:	f04f 0c00 	mov.w	ip, #0
 80160e8:	46d9      	mov	r9, fp
 80160ea:	46e2      	mov	sl, ip
 80160ec:	eb19 0309 	adds.w	r3, r9, r9
 80160f0:	eb4a 040a 	adc.w	r4, sl, sl
 80160f4:	4699      	mov	r9, r3
 80160f6:	46a2      	mov	sl, r4
 80160f8:	eb19 090b 	adds.w	r9, r9, fp
 80160fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8016100:	f04f 0100 	mov.w	r1, #0
 8016104:	f04f 0200 	mov.w	r2, #0
 8016108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801610c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8016110:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8016114:	4689      	mov	r9, r1
 8016116:	4692      	mov	sl, r2
 8016118:	eb1b 0509 	adds.w	r5, fp, r9
 801611c:	eb4c 060a 	adc.w	r6, ip, sl
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	685b      	ldr	r3, [r3, #4]
 8016124:	4619      	mov	r1, r3
 8016126:	f04f 0200 	mov.w	r2, #0
 801612a:	f04f 0300 	mov.w	r3, #0
 801612e:	f04f 0400 	mov.w	r4, #0
 8016132:	0094      	lsls	r4, r2, #2
 8016134:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8016138:	008b      	lsls	r3, r1, #2
 801613a:	461a      	mov	r2, r3
 801613c:	4623      	mov	r3, r4
 801613e:	4628      	mov	r0, r5
 8016140:	4631      	mov	r1, r6
 8016142:	f7f2 fcb9 	bl	8008ab8 <__aeabi_uldivmod>
 8016146:	4603      	mov	r3, r0
 8016148:	460c      	mov	r4, r1
 801614a:	461a      	mov	r2, r3
 801614c:	4b0e      	ldr	r3, [pc, #56]	; (8016188 <UART_SetConfig+0x6f4>)
 801614e:	fba3 1302 	umull	r1, r3, r3, r2
 8016152:	095b      	lsrs	r3, r3, #5
 8016154:	2164      	movs	r1, #100	; 0x64
 8016156:	fb01 f303 	mul.w	r3, r1, r3
 801615a:	1ad3      	subs	r3, r2, r3
 801615c:	011b      	lsls	r3, r3, #4
 801615e:	3332      	adds	r3, #50	; 0x32
 8016160:	4a09      	ldr	r2, [pc, #36]	; (8016188 <UART_SetConfig+0x6f4>)
 8016162:	fba2 2303 	umull	r2, r3, r2, r3
 8016166:	095b      	lsrs	r3, r3, #5
 8016168:	f003 020f 	and.w	r2, r3, #15
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	4442      	add	r2, r8
 8016172:	609a      	str	r2, [r3, #8]
}
 8016174:	e7ff      	b.n	8016176 <UART_SetConfig+0x6e2>
 8016176:	bf00      	nop
 8016178:	3714      	adds	r7, #20
 801617a:	46bd      	mov	sp, r7
 801617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016180:	40011000 	.word	0x40011000
 8016184:	40011400 	.word	0x40011400
 8016188:	51eb851f 	.word	0x51eb851f

0801618c <round>:
 801618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801618e:	ec57 6b10 	vmov	r6, r7, d0
 8016192:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8016196:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 801619a:	2c13      	cmp	r4, #19
 801619c:	463b      	mov	r3, r7
 801619e:	463d      	mov	r5, r7
 80161a0:	dc17      	bgt.n	80161d2 <round+0x46>
 80161a2:	2c00      	cmp	r4, #0
 80161a4:	da09      	bge.n	80161ba <round+0x2e>
 80161a6:	3401      	adds	r4, #1
 80161a8:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80161ac:	d103      	bne.n	80161b6 <round+0x2a>
 80161ae:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80161b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80161b6:	2100      	movs	r1, #0
 80161b8:	e02c      	b.n	8016214 <round+0x88>
 80161ba:	4a18      	ldr	r2, [pc, #96]	; (801621c <round+0x90>)
 80161bc:	4122      	asrs	r2, r4
 80161be:	4217      	tst	r7, r2
 80161c0:	d100      	bne.n	80161c4 <round+0x38>
 80161c2:	b19e      	cbz	r6, 80161ec <round+0x60>
 80161c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80161c8:	4123      	asrs	r3, r4
 80161ca:	442b      	add	r3, r5
 80161cc:	ea23 0302 	bic.w	r3, r3, r2
 80161d0:	e7f1      	b.n	80161b6 <round+0x2a>
 80161d2:	2c33      	cmp	r4, #51	; 0x33
 80161d4:	dd0d      	ble.n	80161f2 <round+0x66>
 80161d6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80161da:	d107      	bne.n	80161ec <round+0x60>
 80161dc:	4630      	mov	r0, r6
 80161de:	4639      	mov	r1, r7
 80161e0:	ee10 2a10 	vmov	r2, s0
 80161e4:	f7f1 ff8a 	bl	80080fc <__adddf3>
 80161e8:	4606      	mov	r6, r0
 80161ea:	460f      	mov	r7, r1
 80161ec:	ec47 6b10 	vmov	d0, r6, r7
 80161f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161f2:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80161f6:	f04f 30ff 	mov.w	r0, #4294967295
 80161fa:	40d0      	lsrs	r0, r2
 80161fc:	4206      	tst	r6, r0
 80161fe:	d0f5      	beq.n	80161ec <round+0x60>
 8016200:	2201      	movs	r2, #1
 8016202:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8016206:	fa02 f404 	lsl.w	r4, r2, r4
 801620a:	1931      	adds	r1, r6, r4
 801620c:	bf28      	it	cs
 801620e:	189b      	addcs	r3, r3, r2
 8016210:	ea21 0100 	bic.w	r1, r1, r0
 8016214:	461f      	mov	r7, r3
 8016216:	460e      	mov	r6, r1
 8016218:	e7e8      	b.n	80161ec <round+0x60>
 801621a:	bf00      	nop
 801621c:	000fffff 	.word	0x000fffff

08016220 <__errno>:
 8016220:	4b01      	ldr	r3, [pc, #4]	; (8016228 <__errno+0x8>)
 8016222:	6818      	ldr	r0, [r3, #0]
 8016224:	4770      	bx	lr
 8016226:	bf00      	nop
 8016228:	20000080 	.word	0x20000080

0801622c <__libc_init_array>:
 801622c:	b570      	push	{r4, r5, r6, lr}
 801622e:	4e0d      	ldr	r6, [pc, #52]	; (8016264 <__libc_init_array+0x38>)
 8016230:	4c0d      	ldr	r4, [pc, #52]	; (8016268 <__libc_init_array+0x3c>)
 8016232:	1ba4      	subs	r4, r4, r6
 8016234:	10a4      	asrs	r4, r4, #2
 8016236:	2500      	movs	r5, #0
 8016238:	42a5      	cmp	r5, r4
 801623a:	d109      	bne.n	8016250 <__libc_init_array+0x24>
 801623c:	4e0b      	ldr	r6, [pc, #44]	; (801626c <__libc_init_array+0x40>)
 801623e:	4c0c      	ldr	r4, [pc, #48]	; (8016270 <__libc_init_array+0x44>)
 8016240:	f002 fbae 	bl	80189a0 <_init>
 8016244:	1ba4      	subs	r4, r4, r6
 8016246:	10a4      	asrs	r4, r4, #2
 8016248:	2500      	movs	r5, #0
 801624a:	42a5      	cmp	r5, r4
 801624c:	d105      	bne.n	801625a <__libc_init_array+0x2e>
 801624e:	bd70      	pop	{r4, r5, r6, pc}
 8016250:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016254:	4798      	blx	r3
 8016256:	3501      	adds	r5, #1
 8016258:	e7ee      	b.n	8016238 <__libc_init_array+0xc>
 801625a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801625e:	4798      	blx	r3
 8016260:	3501      	adds	r5, #1
 8016262:	e7f2      	b.n	801624a <__libc_init_array+0x1e>
 8016264:	08018dd8 	.word	0x08018dd8
 8016268:	08018dd8 	.word	0x08018dd8
 801626c:	08018dd8 	.word	0x08018dd8
 8016270:	08018ddc 	.word	0x08018ddc

08016274 <memcpy>:
 8016274:	b510      	push	{r4, lr}
 8016276:	1e43      	subs	r3, r0, #1
 8016278:	440a      	add	r2, r1
 801627a:	4291      	cmp	r1, r2
 801627c:	d100      	bne.n	8016280 <memcpy+0xc>
 801627e:	bd10      	pop	{r4, pc}
 8016280:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016284:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016288:	e7f7      	b.n	801627a <memcpy+0x6>

0801628a <memset>:
 801628a:	4402      	add	r2, r0
 801628c:	4603      	mov	r3, r0
 801628e:	4293      	cmp	r3, r2
 8016290:	d100      	bne.n	8016294 <memset+0xa>
 8016292:	4770      	bx	lr
 8016294:	f803 1b01 	strb.w	r1, [r3], #1
 8016298:	e7f9      	b.n	801628e <memset+0x4>

0801629a <__cvt>:
 801629a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801629e:	ec55 4b10 	vmov	r4, r5, d0
 80162a2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80162a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80162a8:	2d00      	cmp	r5, #0
 80162aa:	460e      	mov	r6, r1
 80162ac:	4691      	mov	r9, r2
 80162ae:	4619      	mov	r1, r3
 80162b0:	bfb8      	it	lt
 80162b2:	4622      	movlt	r2, r4
 80162b4:	462b      	mov	r3, r5
 80162b6:	f027 0720 	bic.w	r7, r7, #32
 80162ba:	bfbb      	ittet	lt
 80162bc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80162c0:	461d      	movlt	r5, r3
 80162c2:	2300      	movge	r3, #0
 80162c4:	232d      	movlt	r3, #45	; 0x2d
 80162c6:	bfb8      	it	lt
 80162c8:	4614      	movlt	r4, r2
 80162ca:	2f46      	cmp	r7, #70	; 0x46
 80162cc:	700b      	strb	r3, [r1, #0]
 80162ce:	d004      	beq.n	80162da <__cvt+0x40>
 80162d0:	2f45      	cmp	r7, #69	; 0x45
 80162d2:	d100      	bne.n	80162d6 <__cvt+0x3c>
 80162d4:	3601      	adds	r6, #1
 80162d6:	2102      	movs	r1, #2
 80162d8:	e000      	b.n	80162dc <__cvt+0x42>
 80162da:	2103      	movs	r1, #3
 80162dc:	ab03      	add	r3, sp, #12
 80162de:	9301      	str	r3, [sp, #4]
 80162e0:	ab02      	add	r3, sp, #8
 80162e2:	9300      	str	r3, [sp, #0]
 80162e4:	4632      	mov	r2, r6
 80162e6:	4653      	mov	r3, sl
 80162e8:	ec45 4b10 	vmov	d0, r4, r5
 80162ec:	f000 fdfc 	bl	8016ee8 <_dtoa_r>
 80162f0:	2f47      	cmp	r7, #71	; 0x47
 80162f2:	4680      	mov	r8, r0
 80162f4:	d102      	bne.n	80162fc <__cvt+0x62>
 80162f6:	f019 0f01 	tst.w	r9, #1
 80162fa:	d026      	beq.n	801634a <__cvt+0xb0>
 80162fc:	2f46      	cmp	r7, #70	; 0x46
 80162fe:	eb08 0906 	add.w	r9, r8, r6
 8016302:	d111      	bne.n	8016328 <__cvt+0x8e>
 8016304:	f898 3000 	ldrb.w	r3, [r8]
 8016308:	2b30      	cmp	r3, #48	; 0x30
 801630a:	d10a      	bne.n	8016322 <__cvt+0x88>
 801630c:	2200      	movs	r2, #0
 801630e:	2300      	movs	r3, #0
 8016310:	4620      	mov	r0, r4
 8016312:	4629      	mov	r1, r5
 8016314:	f7f2 fb10 	bl	8008938 <__aeabi_dcmpeq>
 8016318:	b918      	cbnz	r0, 8016322 <__cvt+0x88>
 801631a:	f1c6 0601 	rsb	r6, r6, #1
 801631e:	f8ca 6000 	str.w	r6, [sl]
 8016322:	f8da 3000 	ldr.w	r3, [sl]
 8016326:	4499      	add	r9, r3
 8016328:	2200      	movs	r2, #0
 801632a:	2300      	movs	r3, #0
 801632c:	4620      	mov	r0, r4
 801632e:	4629      	mov	r1, r5
 8016330:	f7f2 fb02 	bl	8008938 <__aeabi_dcmpeq>
 8016334:	b938      	cbnz	r0, 8016346 <__cvt+0xac>
 8016336:	2230      	movs	r2, #48	; 0x30
 8016338:	9b03      	ldr	r3, [sp, #12]
 801633a:	454b      	cmp	r3, r9
 801633c:	d205      	bcs.n	801634a <__cvt+0xb0>
 801633e:	1c59      	adds	r1, r3, #1
 8016340:	9103      	str	r1, [sp, #12]
 8016342:	701a      	strb	r2, [r3, #0]
 8016344:	e7f8      	b.n	8016338 <__cvt+0x9e>
 8016346:	f8cd 900c 	str.w	r9, [sp, #12]
 801634a:	9b03      	ldr	r3, [sp, #12]
 801634c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801634e:	eba3 0308 	sub.w	r3, r3, r8
 8016352:	4640      	mov	r0, r8
 8016354:	6013      	str	r3, [r2, #0]
 8016356:	b004      	add	sp, #16
 8016358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801635c <__exponent>:
 801635c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801635e:	2900      	cmp	r1, #0
 8016360:	4604      	mov	r4, r0
 8016362:	bfba      	itte	lt
 8016364:	4249      	neglt	r1, r1
 8016366:	232d      	movlt	r3, #45	; 0x2d
 8016368:	232b      	movge	r3, #43	; 0x2b
 801636a:	2909      	cmp	r1, #9
 801636c:	f804 2b02 	strb.w	r2, [r4], #2
 8016370:	7043      	strb	r3, [r0, #1]
 8016372:	dd20      	ble.n	80163b6 <__exponent+0x5a>
 8016374:	f10d 0307 	add.w	r3, sp, #7
 8016378:	461f      	mov	r7, r3
 801637a:	260a      	movs	r6, #10
 801637c:	fb91 f5f6 	sdiv	r5, r1, r6
 8016380:	fb06 1115 	mls	r1, r6, r5, r1
 8016384:	3130      	adds	r1, #48	; 0x30
 8016386:	2d09      	cmp	r5, #9
 8016388:	f803 1c01 	strb.w	r1, [r3, #-1]
 801638c:	f103 32ff 	add.w	r2, r3, #4294967295
 8016390:	4629      	mov	r1, r5
 8016392:	dc09      	bgt.n	80163a8 <__exponent+0x4c>
 8016394:	3130      	adds	r1, #48	; 0x30
 8016396:	3b02      	subs	r3, #2
 8016398:	f802 1c01 	strb.w	r1, [r2, #-1]
 801639c:	42bb      	cmp	r3, r7
 801639e:	4622      	mov	r2, r4
 80163a0:	d304      	bcc.n	80163ac <__exponent+0x50>
 80163a2:	1a10      	subs	r0, r2, r0
 80163a4:	b003      	add	sp, #12
 80163a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163a8:	4613      	mov	r3, r2
 80163aa:	e7e7      	b.n	801637c <__exponent+0x20>
 80163ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163b0:	f804 2b01 	strb.w	r2, [r4], #1
 80163b4:	e7f2      	b.n	801639c <__exponent+0x40>
 80163b6:	2330      	movs	r3, #48	; 0x30
 80163b8:	4419      	add	r1, r3
 80163ba:	7083      	strb	r3, [r0, #2]
 80163bc:	1d02      	adds	r2, r0, #4
 80163be:	70c1      	strb	r1, [r0, #3]
 80163c0:	e7ef      	b.n	80163a2 <__exponent+0x46>
	...

080163c4 <_printf_float>:
 80163c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163c8:	b08d      	sub	sp, #52	; 0x34
 80163ca:	460c      	mov	r4, r1
 80163cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80163d0:	4616      	mov	r6, r2
 80163d2:	461f      	mov	r7, r3
 80163d4:	4605      	mov	r5, r0
 80163d6:	f001 fcb9 	bl	8017d4c <_localeconv_r>
 80163da:	6803      	ldr	r3, [r0, #0]
 80163dc:	9304      	str	r3, [sp, #16]
 80163de:	4618      	mov	r0, r3
 80163e0:	f7f1 fe2e 	bl	8008040 <strlen>
 80163e4:	2300      	movs	r3, #0
 80163e6:	930a      	str	r3, [sp, #40]	; 0x28
 80163e8:	f8d8 3000 	ldr.w	r3, [r8]
 80163ec:	9005      	str	r0, [sp, #20]
 80163ee:	3307      	adds	r3, #7
 80163f0:	f023 0307 	bic.w	r3, r3, #7
 80163f4:	f103 0208 	add.w	r2, r3, #8
 80163f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80163fc:	f8d4 b000 	ldr.w	fp, [r4]
 8016400:	f8c8 2000 	str.w	r2, [r8]
 8016404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016408:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801640c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016410:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016414:	9307      	str	r3, [sp, #28]
 8016416:	f8cd 8018 	str.w	r8, [sp, #24]
 801641a:	f04f 32ff 	mov.w	r2, #4294967295
 801641e:	4ba7      	ldr	r3, [pc, #668]	; (80166bc <_printf_float+0x2f8>)
 8016420:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016424:	f7f2 faba 	bl	800899c <__aeabi_dcmpun>
 8016428:	bb70      	cbnz	r0, 8016488 <_printf_float+0xc4>
 801642a:	f04f 32ff 	mov.w	r2, #4294967295
 801642e:	4ba3      	ldr	r3, [pc, #652]	; (80166bc <_printf_float+0x2f8>)
 8016430:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016434:	f7f2 fa94 	bl	8008960 <__aeabi_dcmple>
 8016438:	bb30      	cbnz	r0, 8016488 <_printf_float+0xc4>
 801643a:	2200      	movs	r2, #0
 801643c:	2300      	movs	r3, #0
 801643e:	4640      	mov	r0, r8
 8016440:	4649      	mov	r1, r9
 8016442:	f7f2 fa83 	bl	800894c <__aeabi_dcmplt>
 8016446:	b110      	cbz	r0, 801644e <_printf_float+0x8a>
 8016448:	232d      	movs	r3, #45	; 0x2d
 801644a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801644e:	4a9c      	ldr	r2, [pc, #624]	; (80166c0 <_printf_float+0x2fc>)
 8016450:	4b9c      	ldr	r3, [pc, #624]	; (80166c4 <_printf_float+0x300>)
 8016452:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8016456:	bf8c      	ite	hi
 8016458:	4690      	movhi	r8, r2
 801645a:	4698      	movls	r8, r3
 801645c:	2303      	movs	r3, #3
 801645e:	f02b 0204 	bic.w	r2, fp, #4
 8016462:	6123      	str	r3, [r4, #16]
 8016464:	6022      	str	r2, [r4, #0]
 8016466:	f04f 0900 	mov.w	r9, #0
 801646a:	9700      	str	r7, [sp, #0]
 801646c:	4633      	mov	r3, r6
 801646e:	aa0b      	add	r2, sp, #44	; 0x2c
 8016470:	4621      	mov	r1, r4
 8016472:	4628      	mov	r0, r5
 8016474:	f000 f9e6 	bl	8016844 <_printf_common>
 8016478:	3001      	adds	r0, #1
 801647a:	f040 808d 	bne.w	8016598 <_printf_float+0x1d4>
 801647e:	f04f 30ff 	mov.w	r0, #4294967295
 8016482:	b00d      	add	sp, #52	; 0x34
 8016484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016488:	4642      	mov	r2, r8
 801648a:	464b      	mov	r3, r9
 801648c:	4640      	mov	r0, r8
 801648e:	4649      	mov	r1, r9
 8016490:	f7f2 fa84 	bl	800899c <__aeabi_dcmpun>
 8016494:	b110      	cbz	r0, 801649c <_printf_float+0xd8>
 8016496:	4a8c      	ldr	r2, [pc, #560]	; (80166c8 <_printf_float+0x304>)
 8016498:	4b8c      	ldr	r3, [pc, #560]	; (80166cc <_printf_float+0x308>)
 801649a:	e7da      	b.n	8016452 <_printf_float+0x8e>
 801649c:	6861      	ldr	r1, [r4, #4]
 801649e:	1c4b      	adds	r3, r1, #1
 80164a0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80164a4:	a80a      	add	r0, sp, #40	; 0x28
 80164a6:	d13e      	bne.n	8016526 <_printf_float+0x162>
 80164a8:	2306      	movs	r3, #6
 80164aa:	6063      	str	r3, [r4, #4]
 80164ac:	2300      	movs	r3, #0
 80164ae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80164b2:	ab09      	add	r3, sp, #36	; 0x24
 80164b4:	9300      	str	r3, [sp, #0]
 80164b6:	ec49 8b10 	vmov	d0, r8, r9
 80164ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80164be:	6022      	str	r2, [r4, #0]
 80164c0:	f8cd a004 	str.w	sl, [sp, #4]
 80164c4:	6861      	ldr	r1, [r4, #4]
 80164c6:	4628      	mov	r0, r5
 80164c8:	f7ff fee7 	bl	801629a <__cvt>
 80164cc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80164d0:	2b47      	cmp	r3, #71	; 0x47
 80164d2:	4680      	mov	r8, r0
 80164d4:	d109      	bne.n	80164ea <_printf_float+0x126>
 80164d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164d8:	1cd8      	adds	r0, r3, #3
 80164da:	db02      	blt.n	80164e2 <_printf_float+0x11e>
 80164dc:	6862      	ldr	r2, [r4, #4]
 80164de:	4293      	cmp	r3, r2
 80164e0:	dd47      	ble.n	8016572 <_printf_float+0x1ae>
 80164e2:	f1aa 0a02 	sub.w	sl, sl, #2
 80164e6:	fa5f fa8a 	uxtb.w	sl, sl
 80164ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80164ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80164f0:	d824      	bhi.n	801653c <_printf_float+0x178>
 80164f2:	3901      	subs	r1, #1
 80164f4:	4652      	mov	r2, sl
 80164f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80164fa:	9109      	str	r1, [sp, #36]	; 0x24
 80164fc:	f7ff ff2e 	bl	801635c <__exponent>
 8016500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016502:	1813      	adds	r3, r2, r0
 8016504:	2a01      	cmp	r2, #1
 8016506:	4681      	mov	r9, r0
 8016508:	6123      	str	r3, [r4, #16]
 801650a:	dc02      	bgt.n	8016512 <_printf_float+0x14e>
 801650c:	6822      	ldr	r2, [r4, #0]
 801650e:	07d1      	lsls	r1, r2, #31
 8016510:	d501      	bpl.n	8016516 <_printf_float+0x152>
 8016512:	3301      	adds	r3, #1
 8016514:	6123      	str	r3, [r4, #16]
 8016516:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801651a:	2b00      	cmp	r3, #0
 801651c:	d0a5      	beq.n	801646a <_printf_float+0xa6>
 801651e:	232d      	movs	r3, #45	; 0x2d
 8016520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016524:	e7a1      	b.n	801646a <_printf_float+0xa6>
 8016526:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801652a:	f000 8177 	beq.w	801681c <_printf_float+0x458>
 801652e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8016532:	d1bb      	bne.n	80164ac <_printf_float+0xe8>
 8016534:	2900      	cmp	r1, #0
 8016536:	d1b9      	bne.n	80164ac <_printf_float+0xe8>
 8016538:	2301      	movs	r3, #1
 801653a:	e7b6      	b.n	80164aa <_printf_float+0xe6>
 801653c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8016540:	d119      	bne.n	8016576 <_printf_float+0x1b2>
 8016542:	2900      	cmp	r1, #0
 8016544:	6863      	ldr	r3, [r4, #4]
 8016546:	dd0c      	ble.n	8016562 <_printf_float+0x19e>
 8016548:	6121      	str	r1, [r4, #16]
 801654a:	b913      	cbnz	r3, 8016552 <_printf_float+0x18e>
 801654c:	6822      	ldr	r2, [r4, #0]
 801654e:	07d2      	lsls	r2, r2, #31
 8016550:	d502      	bpl.n	8016558 <_printf_float+0x194>
 8016552:	3301      	adds	r3, #1
 8016554:	440b      	add	r3, r1
 8016556:	6123      	str	r3, [r4, #16]
 8016558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801655a:	65a3      	str	r3, [r4, #88]	; 0x58
 801655c:	f04f 0900 	mov.w	r9, #0
 8016560:	e7d9      	b.n	8016516 <_printf_float+0x152>
 8016562:	b913      	cbnz	r3, 801656a <_printf_float+0x1a6>
 8016564:	6822      	ldr	r2, [r4, #0]
 8016566:	07d0      	lsls	r0, r2, #31
 8016568:	d501      	bpl.n	801656e <_printf_float+0x1aa>
 801656a:	3302      	adds	r3, #2
 801656c:	e7f3      	b.n	8016556 <_printf_float+0x192>
 801656e:	2301      	movs	r3, #1
 8016570:	e7f1      	b.n	8016556 <_printf_float+0x192>
 8016572:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8016576:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801657a:	4293      	cmp	r3, r2
 801657c:	db05      	blt.n	801658a <_printf_float+0x1c6>
 801657e:	6822      	ldr	r2, [r4, #0]
 8016580:	6123      	str	r3, [r4, #16]
 8016582:	07d1      	lsls	r1, r2, #31
 8016584:	d5e8      	bpl.n	8016558 <_printf_float+0x194>
 8016586:	3301      	adds	r3, #1
 8016588:	e7e5      	b.n	8016556 <_printf_float+0x192>
 801658a:	2b00      	cmp	r3, #0
 801658c:	bfd4      	ite	le
 801658e:	f1c3 0302 	rsble	r3, r3, #2
 8016592:	2301      	movgt	r3, #1
 8016594:	4413      	add	r3, r2
 8016596:	e7de      	b.n	8016556 <_printf_float+0x192>
 8016598:	6823      	ldr	r3, [r4, #0]
 801659a:	055a      	lsls	r2, r3, #21
 801659c:	d407      	bmi.n	80165ae <_printf_float+0x1ea>
 801659e:	6923      	ldr	r3, [r4, #16]
 80165a0:	4642      	mov	r2, r8
 80165a2:	4631      	mov	r1, r6
 80165a4:	4628      	mov	r0, r5
 80165a6:	47b8      	blx	r7
 80165a8:	3001      	adds	r0, #1
 80165aa:	d12b      	bne.n	8016604 <_printf_float+0x240>
 80165ac:	e767      	b.n	801647e <_printf_float+0xba>
 80165ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80165b2:	f240 80dc 	bls.w	801676e <_printf_float+0x3aa>
 80165b6:	2200      	movs	r2, #0
 80165b8:	2300      	movs	r3, #0
 80165ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80165be:	f7f2 f9bb 	bl	8008938 <__aeabi_dcmpeq>
 80165c2:	2800      	cmp	r0, #0
 80165c4:	d033      	beq.n	801662e <_printf_float+0x26a>
 80165c6:	2301      	movs	r3, #1
 80165c8:	4a41      	ldr	r2, [pc, #260]	; (80166d0 <_printf_float+0x30c>)
 80165ca:	4631      	mov	r1, r6
 80165cc:	4628      	mov	r0, r5
 80165ce:	47b8      	blx	r7
 80165d0:	3001      	adds	r0, #1
 80165d2:	f43f af54 	beq.w	801647e <_printf_float+0xba>
 80165d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80165da:	429a      	cmp	r2, r3
 80165dc:	db02      	blt.n	80165e4 <_printf_float+0x220>
 80165de:	6823      	ldr	r3, [r4, #0]
 80165e0:	07d8      	lsls	r0, r3, #31
 80165e2:	d50f      	bpl.n	8016604 <_printf_float+0x240>
 80165e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80165e8:	4631      	mov	r1, r6
 80165ea:	4628      	mov	r0, r5
 80165ec:	47b8      	blx	r7
 80165ee:	3001      	adds	r0, #1
 80165f0:	f43f af45 	beq.w	801647e <_printf_float+0xba>
 80165f4:	f04f 0800 	mov.w	r8, #0
 80165f8:	f104 091a 	add.w	r9, r4, #26
 80165fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165fe:	3b01      	subs	r3, #1
 8016600:	4543      	cmp	r3, r8
 8016602:	dc09      	bgt.n	8016618 <_printf_float+0x254>
 8016604:	6823      	ldr	r3, [r4, #0]
 8016606:	079b      	lsls	r3, r3, #30
 8016608:	f100 8103 	bmi.w	8016812 <_printf_float+0x44e>
 801660c:	68e0      	ldr	r0, [r4, #12]
 801660e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016610:	4298      	cmp	r0, r3
 8016612:	bfb8      	it	lt
 8016614:	4618      	movlt	r0, r3
 8016616:	e734      	b.n	8016482 <_printf_float+0xbe>
 8016618:	2301      	movs	r3, #1
 801661a:	464a      	mov	r2, r9
 801661c:	4631      	mov	r1, r6
 801661e:	4628      	mov	r0, r5
 8016620:	47b8      	blx	r7
 8016622:	3001      	adds	r0, #1
 8016624:	f43f af2b 	beq.w	801647e <_printf_float+0xba>
 8016628:	f108 0801 	add.w	r8, r8, #1
 801662c:	e7e6      	b.n	80165fc <_printf_float+0x238>
 801662e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016630:	2b00      	cmp	r3, #0
 8016632:	dc2b      	bgt.n	801668c <_printf_float+0x2c8>
 8016634:	2301      	movs	r3, #1
 8016636:	4a26      	ldr	r2, [pc, #152]	; (80166d0 <_printf_float+0x30c>)
 8016638:	4631      	mov	r1, r6
 801663a:	4628      	mov	r0, r5
 801663c:	47b8      	blx	r7
 801663e:	3001      	adds	r0, #1
 8016640:	f43f af1d 	beq.w	801647e <_printf_float+0xba>
 8016644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016646:	b923      	cbnz	r3, 8016652 <_printf_float+0x28e>
 8016648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801664a:	b913      	cbnz	r3, 8016652 <_printf_float+0x28e>
 801664c:	6823      	ldr	r3, [r4, #0]
 801664e:	07d9      	lsls	r1, r3, #31
 8016650:	d5d8      	bpl.n	8016604 <_printf_float+0x240>
 8016652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016656:	4631      	mov	r1, r6
 8016658:	4628      	mov	r0, r5
 801665a:	47b8      	blx	r7
 801665c:	3001      	adds	r0, #1
 801665e:	f43f af0e 	beq.w	801647e <_printf_float+0xba>
 8016662:	f04f 0900 	mov.w	r9, #0
 8016666:	f104 0a1a 	add.w	sl, r4, #26
 801666a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801666c:	425b      	negs	r3, r3
 801666e:	454b      	cmp	r3, r9
 8016670:	dc01      	bgt.n	8016676 <_printf_float+0x2b2>
 8016672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016674:	e794      	b.n	80165a0 <_printf_float+0x1dc>
 8016676:	2301      	movs	r3, #1
 8016678:	4652      	mov	r2, sl
 801667a:	4631      	mov	r1, r6
 801667c:	4628      	mov	r0, r5
 801667e:	47b8      	blx	r7
 8016680:	3001      	adds	r0, #1
 8016682:	f43f aefc 	beq.w	801647e <_printf_float+0xba>
 8016686:	f109 0901 	add.w	r9, r9, #1
 801668a:	e7ee      	b.n	801666a <_printf_float+0x2a6>
 801668c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801668e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016690:	429a      	cmp	r2, r3
 8016692:	bfa8      	it	ge
 8016694:	461a      	movge	r2, r3
 8016696:	2a00      	cmp	r2, #0
 8016698:	4691      	mov	r9, r2
 801669a:	dd07      	ble.n	80166ac <_printf_float+0x2e8>
 801669c:	4613      	mov	r3, r2
 801669e:	4631      	mov	r1, r6
 80166a0:	4642      	mov	r2, r8
 80166a2:	4628      	mov	r0, r5
 80166a4:	47b8      	blx	r7
 80166a6:	3001      	adds	r0, #1
 80166a8:	f43f aee9 	beq.w	801647e <_printf_float+0xba>
 80166ac:	f104 031a 	add.w	r3, r4, #26
 80166b0:	f04f 0b00 	mov.w	fp, #0
 80166b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80166b8:	9306      	str	r3, [sp, #24]
 80166ba:	e015      	b.n	80166e8 <_printf_float+0x324>
 80166bc:	7fefffff 	.word	0x7fefffff
 80166c0:	08018b18 	.word	0x08018b18
 80166c4:	08018b14 	.word	0x08018b14
 80166c8:	08018b20 	.word	0x08018b20
 80166cc:	08018b1c 	.word	0x08018b1c
 80166d0:	08018b24 	.word	0x08018b24
 80166d4:	2301      	movs	r3, #1
 80166d6:	9a06      	ldr	r2, [sp, #24]
 80166d8:	4631      	mov	r1, r6
 80166da:	4628      	mov	r0, r5
 80166dc:	47b8      	blx	r7
 80166de:	3001      	adds	r0, #1
 80166e0:	f43f aecd 	beq.w	801647e <_printf_float+0xba>
 80166e4:	f10b 0b01 	add.w	fp, fp, #1
 80166e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80166ec:	ebaa 0309 	sub.w	r3, sl, r9
 80166f0:	455b      	cmp	r3, fp
 80166f2:	dcef      	bgt.n	80166d4 <_printf_float+0x310>
 80166f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80166f8:	429a      	cmp	r2, r3
 80166fa:	44d0      	add	r8, sl
 80166fc:	db15      	blt.n	801672a <_printf_float+0x366>
 80166fe:	6823      	ldr	r3, [r4, #0]
 8016700:	07da      	lsls	r2, r3, #31
 8016702:	d412      	bmi.n	801672a <_printf_float+0x366>
 8016704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016706:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016708:	eba3 020a 	sub.w	r2, r3, sl
 801670c:	eba3 0a01 	sub.w	sl, r3, r1
 8016710:	4592      	cmp	sl, r2
 8016712:	bfa8      	it	ge
 8016714:	4692      	movge	sl, r2
 8016716:	f1ba 0f00 	cmp.w	sl, #0
 801671a:	dc0e      	bgt.n	801673a <_printf_float+0x376>
 801671c:	f04f 0800 	mov.w	r8, #0
 8016720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016724:	f104 091a 	add.w	r9, r4, #26
 8016728:	e019      	b.n	801675e <_printf_float+0x39a>
 801672a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801672e:	4631      	mov	r1, r6
 8016730:	4628      	mov	r0, r5
 8016732:	47b8      	blx	r7
 8016734:	3001      	adds	r0, #1
 8016736:	d1e5      	bne.n	8016704 <_printf_float+0x340>
 8016738:	e6a1      	b.n	801647e <_printf_float+0xba>
 801673a:	4653      	mov	r3, sl
 801673c:	4642      	mov	r2, r8
 801673e:	4631      	mov	r1, r6
 8016740:	4628      	mov	r0, r5
 8016742:	47b8      	blx	r7
 8016744:	3001      	adds	r0, #1
 8016746:	d1e9      	bne.n	801671c <_printf_float+0x358>
 8016748:	e699      	b.n	801647e <_printf_float+0xba>
 801674a:	2301      	movs	r3, #1
 801674c:	464a      	mov	r2, r9
 801674e:	4631      	mov	r1, r6
 8016750:	4628      	mov	r0, r5
 8016752:	47b8      	blx	r7
 8016754:	3001      	adds	r0, #1
 8016756:	f43f ae92 	beq.w	801647e <_printf_float+0xba>
 801675a:	f108 0801 	add.w	r8, r8, #1
 801675e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016762:	1a9b      	subs	r3, r3, r2
 8016764:	eba3 030a 	sub.w	r3, r3, sl
 8016768:	4543      	cmp	r3, r8
 801676a:	dcee      	bgt.n	801674a <_printf_float+0x386>
 801676c:	e74a      	b.n	8016604 <_printf_float+0x240>
 801676e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016770:	2a01      	cmp	r2, #1
 8016772:	dc01      	bgt.n	8016778 <_printf_float+0x3b4>
 8016774:	07db      	lsls	r3, r3, #31
 8016776:	d53a      	bpl.n	80167ee <_printf_float+0x42a>
 8016778:	2301      	movs	r3, #1
 801677a:	4642      	mov	r2, r8
 801677c:	4631      	mov	r1, r6
 801677e:	4628      	mov	r0, r5
 8016780:	47b8      	blx	r7
 8016782:	3001      	adds	r0, #1
 8016784:	f43f ae7b 	beq.w	801647e <_printf_float+0xba>
 8016788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801678c:	4631      	mov	r1, r6
 801678e:	4628      	mov	r0, r5
 8016790:	47b8      	blx	r7
 8016792:	3001      	adds	r0, #1
 8016794:	f108 0801 	add.w	r8, r8, #1
 8016798:	f43f ae71 	beq.w	801647e <_printf_float+0xba>
 801679c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801679e:	2200      	movs	r2, #0
 80167a0:	f103 3aff 	add.w	sl, r3, #4294967295
 80167a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80167a8:	2300      	movs	r3, #0
 80167aa:	f7f2 f8c5 	bl	8008938 <__aeabi_dcmpeq>
 80167ae:	b9c8      	cbnz	r0, 80167e4 <_printf_float+0x420>
 80167b0:	4653      	mov	r3, sl
 80167b2:	4642      	mov	r2, r8
 80167b4:	4631      	mov	r1, r6
 80167b6:	4628      	mov	r0, r5
 80167b8:	47b8      	blx	r7
 80167ba:	3001      	adds	r0, #1
 80167bc:	d10e      	bne.n	80167dc <_printf_float+0x418>
 80167be:	e65e      	b.n	801647e <_printf_float+0xba>
 80167c0:	2301      	movs	r3, #1
 80167c2:	4652      	mov	r2, sl
 80167c4:	4631      	mov	r1, r6
 80167c6:	4628      	mov	r0, r5
 80167c8:	47b8      	blx	r7
 80167ca:	3001      	adds	r0, #1
 80167cc:	f43f ae57 	beq.w	801647e <_printf_float+0xba>
 80167d0:	f108 0801 	add.w	r8, r8, #1
 80167d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167d6:	3b01      	subs	r3, #1
 80167d8:	4543      	cmp	r3, r8
 80167da:	dcf1      	bgt.n	80167c0 <_printf_float+0x3fc>
 80167dc:	464b      	mov	r3, r9
 80167de:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80167e2:	e6de      	b.n	80165a2 <_printf_float+0x1de>
 80167e4:	f04f 0800 	mov.w	r8, #0
 80167e8:	f104 0a1a 	add.w	sl, r4, #26
 80167ec:	e7f2      	b.n	80167d4 <_printf_float+0x410>
 80167ee:	2301      	movs	r3, #1
 80167f0:	e7df      	b.n	80167b2 <_printf_float+0x3ee>
 80167f2:	2301      	movs	r3, #1
 80167f4:	464a      	mov	r2, r9
 80167f6:	4631      	mov	r1, r6
 80167f8:	4628      	mov	r0, r5
 80167fa:	47b8      	blx	r7
 80167fc:	3001      	adds	r0, #1
 80167fe:	f43f ae3e 	beq.w	801647e <_printf_float+0xba>
 8016802:	f108 0801 	add.w	r8, r8, #1
 8016806:	68e3      	ldr	r3, [r4, #12]
 8016808:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801680a:	1a9b      	subs	r3, r3, r2
 801680c:	4543      	cmp	r3, r8
 801680e:	dcf0      	bgt.n	80167f2 <_printf_float+0x42e>
 8016810:	e6fc      	b.n	801660c <_printf_float+0x248>
 8016812:	f04f 0800 	mov.w	r8, #0
 8016816:	f104 0919 	add.w	r9, r4, #25
 801681a:	e7f4      	b.n	8016806 <_printf_float+0x442>
 801681c:	2900      	cmp	r1, #0
 801681e:	f43f ae8b 	beq.w	8016538 <_printf_float+0x174>
 8016822:	2300      	movs	r3, #0
 8016824:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016828:	ab09      	add	r3, sp, #36	; 0x24
 801682a:	9300      	str	r3, [sp, #0]
 801682c:	ec49 8b10 	vmov	d0, r8, r9
 8016830:	6022      	str	r2, [r4, #0]
 8016832:	f8cd a004 	str.w	sl, [sp, #4]
 8016836:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801683a:	4628      	mov	r0, r5
 801683c:	f7ff fd2d 	bl	801629a <__cvt>
 8016840:	4680      	mov	r8, r0
 8016842:	e648      	b.n	80164d6 <_printf_float+0x112>

08016844 <_printf_common>:
 8016844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016848:	4691      	mov	r9, r2
 801684a:	461f      	mov	r7, r3
 801684c:	688a      	ldr	r2, [r1, #8]
 801684e:	690b      	ldr	r3, [r1, #16]
 8016850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016854:	4293      	cmp	r3, r2
 8016856:	bfb8      	it	lt
 8016858:	4613      	movlt	r3, r2
 801685a:	f8c9 3000 	str.w	r3, [r9]
 801685e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016862:	4606      	mov	r6, r0
 8016864:	460c      	mov	r4, r1
 8016866:	b112      	cbz	r2, 801686e <_printf_common+0x2a>
 8016868:	3301      	adds	r3, #1
 801686a:	f8c9 3000 	str.w	r3, [r9]
 801686e:	6823      	ldr	r3, [r4, #0]
 8016870:	0699      	lsls	r1, r3, #26
 8016872:	bf42      	ittt	mi
 8016874:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016878:	3302      	addmi	r3, #2
 801687a:	f8c9 3000 	strmi.w	r3, [r9]
 801687e:	6825      	ldr	r5, [r4, #0]
 8016880:	f015 0506 	ands.w	r5, r5, #6
 8016884:	d107      	bne.n	8016896 <_printf_common+0x52>
 8016886:	f104 0a19 	add.w	sl, r4, #25
 801688a:	68e3      	ldr	r3, [r4, #12]
 801688c:	f8d9 2000 	ldr.w	r2, [r9]
 8016890:	1a9b      	subs	r3, r3, r2
 8016892:	42ab      	cmp	r3, r5
 8016894:	dc28      	bgt.n	80168e8 <_printf_common+0xa4>
 8016896:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801689a:	6822      	ldr	r2, [r4, #0]
 801689c:	3300      	adds	r3, #0
 801689e:	bf18      	it	ne
 80168a0:	2301      	movne	r3, #1
 80168a2:	0692      	lsls	r2, r2, #26
 80168a4:	d42d      	bmi.n	8016902 <_printf_common+0xbe>
 80168a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80168aa:	4639      	mov	r1, r7
 80168ac:	4630      	mov	r0, r6
 80168ae:	47c0      	blx	r8
 80168b0:	3001      	adds	r0, #1
 80168b2:	d020      	beq.n	80168f6 <_printf_common+0xb2>
 80168b4:	6823      	ldr	r3, [r4, #0]
 80168b6:	68e5      	ldr	r5, [r4, #12]
 80168b8:	f8d9 2000 	ldr.w	r2, [r9]
 80168bc:	f003 0306 	and.w	r3, r3, #6
 80168c0:	2b04      	cmp	r3, #4
 80168c2:	bf08      	it	eq
 80168c4:	1aad      	subeq	r5, r5, r2
 80168c6:	68a3      	ldr	r3, [r4, #8]
 80168c8:	6922      	ldr	r2, [r4, #16]
 80168ca:	bf0c      	ite	eq
 80168cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80168d0:	2500      	movne	r5, #0
 80168d2:	4293      	cmp	r3, r2
 80168d4:	bfc4      	itt	gt
 80168d6:	1a9b      	subgt	r3, r3, r2
 80168d8:	18ed      	addgt	r5, r5, r3
 80168da:	f04f 0900 	mov.w	r9, #0
 80168de:	341a      	adds	r4, #26
 80168e0:	454d      	cmp	r5, r9
 80168e2:	d11a      	bne.n	801691a <_printf_common+0xd6>
 80168e4:	2000      	movs	r0, #0
 80168e6:	e008      	b.n	80168fa <_printf_common+0xb6>
 80168e8:	2301      	movs	r3, #1
 80168ea:	4652      	mov	r2, sl
 80168ec:	4639      	mov	r1, r7
 80168ee:	4630      	mov	r0, r6
 80168f0:	47c0      	blx	r8
 80168f2:	3001      	adds	r0, #1
 80168f4:	d103      	bne.n	80168fe <_printf_common+0xba>
 80168f6:	f04f 30ff 	mov.w	r0, #4294967295
 80168fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168fe:	3501      	adds	r5, #1
 8016900:	e7c3      	b.n	801688a <_printf_common+0x46>
 8016902:	18e1      	adds	r1, r4, r3
 8016904:	1c5a      	adds	r2, r3, #1
 8016906:	2030      	movs	r0, #48	; 0x30
 8016908:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801690c:	4422      	add	r2, r4
 801690e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016912:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016916:	3302      	adds	r3, #2
 8016918:	e7c5      	b.n	80168a6 <_printf_common+0x62>
 801691a:	2301      	movs	r3, #1
 801691c:	4622      	mov	r2, r4
 801691e:	4639      	mov	r1, r7
 8016920:	4630      	mov	r0, r6
 8016922:	47c0      	blx	r8
 8016924:	3001      	adds	r0, #1
 8016926:	d0e6      	beq.n	80168f6 <_printf_common+0xb2>
 8016928:	f109 0901 	add.w	r9, r9, #1
 801692c:	e7d8      	b.n	80168e0 <_printf_common+0x9c>
	...

08016930 <_printf_i>:
 8016930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016934:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016938:	460c      	mov	r4, r1
 801693a:	7e09      	ldrb	r1, [r1, #24]
 801693c:	b085      	sub	sp, #20
 801693e:	296e      	cmp	r1, #110	; 0x6e
 8016940:	4617      	mov	r7, r2
 8016942:	4606      	mov	r6, r0
 8016944:	4698      	mov	r8, r3
 8016946:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016948:	f000 80b3 	beq.w	8016ab2 <_printf_i+0x182>
 801694c:	d822      	bhi.n	8016994 <_printf_i+0x64>
 801694e:	2963      	cmp	r1, #99	; 0x63
 8016950:	d036      	beq.n	80169c0 <_printf_i+0x90>
 8016952:	d80a      	bhi.n	801696a <_printf_i+0x3a>
 8016954:	2900      	cmp	r1, #0
 8016956:	f000 80b9 	beq.w	8016acc <_printf_i+0x19c>
 801695a:	2958      	cmp	r1, #88	; 0x58
 801695c:	f000 8083 	beq.w	8016a66 <_printf_i+0x136>
 8016960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016964:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016968:	e032      	b.n	80169d0 <_printf_i+0xa0>
 801696a:	2964      	cmp	r1, #100	; 0x64
 801696c:	d001      	beq.n	8016972 <_printf_i+0x42>
 801696e:	2969      	cmp	r1, #105	; 0x69
 8016970:	d1f6      	bne.n	8016960 <_printf_i+0x30>
 8016972:	6820      	ldr	r0, [r4, #0]
 8016974:	6813      	ldr	r3, [r2, #0]
 8016976:	0605      	lsls	r5, r0, #24
 8016978:	f103 0104 	add.w	r1, r3, #4
 801697c:	d52a      	bpl.n	80169d4 <_printf_i+0xa4>
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	6011      	str	r1, [r2, #0]
 8016982:	2b00      	cmp	r3, #0
 8016984:	da03      	bge.n	801698e <_printf_i+0x5e>
 8016986:	222d      	movs	r2, #45	; 0x2d
 8016988:	425b      	negs	r3, r3
 801698a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801698e:	486f      	ldr	r0, [pc, #444]	; (8016b4c <_printf_i+0x21c>)
 8016990:	220a      	movs	r2, #10
 8016992:	e039      	b.n	8016a08 <_printf_i+0xd8>
 8016994:	2973      	cmp	r1, #115	; 0x73
 8016996:	f000 809d 	beq.w	8016ad4 <_printf_i+0x1a4>
 801699a:	d808      	bhi.n	80169ae <_printf_i+0x7e>
 801699c:	296f      	cmp	r1, #111	; 0x6f
 801699e:	d020      	beq.n	80169e2 <_printf_i+0xb2>
 80169a0:	2970      	cmp	r1, #112	; 0x70
 80169a2:	d1dd      	bne.n	8016960 <_printf_i+0x30>
 80169a4:	6823      	ldr	r3, [r4, #0]
 80169a6:	f043 0320 	orr.w	r3, r3, #32
 80169aa:	6023      	str	r3, [r4, #0]
 80169ac:	e003      	b.n	80169b6 <_printf_i+0x86>
 80169ae:	2975      	cmp	r1, #117	; 0x75
 80169b0:	d017      	beq.n	80169e2 <_printf_i+0xb2>
 80169b2:	2978      	cmp	r1, #120	; 0x78
 80169b4:	d1d4      	bne.n	8016960 <_printf_i+0x30>
 80169b6:	2378      	movs	r3, #120	; 0x78
 80169b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80169bc:	4864      	ldr	r0, [pc, #400]	; (8016b50 <_printf_i+0x220>)
 80169be:	e055      	b.n	8016a6c <_printf_i+0x13c>
 80169c0:	6813      	ldr	r3, [r2, #0]
 80169c2:	1d19      	adds	r1, r3, #4
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	6011      	str	r1, [r2, #0]
 80169c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80169cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80169d0:	2301      	movs	r3, #1
 80169d2:	e08c      	b.n	8016aee <_printf_i+0x1be>
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	6011      	str	r1, [r2, #0]
 80169d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80169dc:	bf18      	it	ne
 80169de:	b21b      	sxthne	r3, r3
 80169e0:	e7cf      	b.n	8016982 <_printf_i+0x52>
 80169e2:	6813      	ldr	r3, [r2, #0]
 80169e4:	6825      	ldr	r5, [r4, #0]
 80169e6:	1d18      	adds	r0, r3, #4
 80169e8:	6010      	str	r0, [r2, #0]
 80169ea:	0628      	lsls	r0, r5, #24
 80169ec:	d501      	bpl.n	80169f2 <_printf_i+0xc2>
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	e002      	b.n	80169f8 <_printf_i+0xc8>
 80169f2:	0668      	lsls	r0, r5, #25
 80169f4:	d5fb      	bpl.n	80169ee <_printf_i+0xbe>
 80169f6:	881b      	ldrh	r3, [r3, #0]
 80169f8:	4854      	ldr	r0, [pc, #336]	; (8016b4c <_printf_i+0x21c>)
 80169fa:	296f      	cmp	r1, #111	; 0x6f
 80169fc:	bf14      	ite	ne
 80169fe:	220a      	movne	r2, #10
 8016a00:	2208      	moveq	r2, #8
 8016a02:	2100      	movs	r1, #0
 8016a04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016a08:	6865      	ldr	r5, [r4, #4]
 8016a0a:	60a5      	str	r5, [r4, #8]
 8016a0c:	2d00      	cmp	r5, #0
 8016a0e:	f2c0 8095 	blt.w	8016b3c <_printf_i+0x20c>
 8016a12:	6821      	ldr	r1, [r4, #0]
 8016a14:	f021 0104 	bic.w	r1, r1, #4
 8016a18:	6021      	str	r1, [r4, #0]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d13d      	bne.n	8016a9a <_printf_i+0x16a>
 8016a1e:	2d00      	cmp	r5, #0
 8016a20:	f040 808e 	bne.w	8016b40 <_printf_i+0x210>
 8016a24:	4665      	mov	r5, ip
 8016a26:	2a08      	cmp	r2, #8
 8016a28:	d10b      	bne.n	8016a42 <_printf_i+0x112>
 8016a2a:	6823      	ldr	r3, [r4, #0]
 8016a2c:	07db      	lsls	r3, r3, #31
 8016a2e:	d508      	bpl.n	8016a42 <_printf_i+0x112>
 8016a30:	6923      	ldr	r3, [r4, #16]
 8016a32:	6862      	ldr	r2, [r4, #4]
 8016a34:	429a      	cmp	r2, r3
 8016a36:	bfde      	ittt	le
 8016a38:	2330      	movle	r3, #48	; 0x30
 8016a3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016a3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016a42:	ebac 0305 	sub.w	r3, ip, r5
 8016a46:	6123      	str	r3, [r4, #16]
 8016a48:	f8cd 8000 	str.w	r8, [sp]
 8016a4c:	463b      	mov	r3, r7
 8016a4e:	aa03      	add	r2, sp, #12
 8016a50:	4621      	mov	r1, r4
 8016a52:	4630      	mov	r0, r6
 8016a54:	f7ff fef6 	bl	8016844 <_printf_common>
 8016a58:	3001      	adds	r0, #1
 8016a5a:	d14d      	bne.n	8016af8 <_printf_i+0x1c8>
 8016a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8016a60:	b005      	add	sp, #20
 8016a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a66:	4839      	ldr	r0, [pc, #228]	; (8016b4c <_printf_i+0x21c>)
 8016a68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016a6c:	6813      	ldr	r3, [r2, #0]
 8016a6e:	6821      	ldr	r1, [r4, #0]
 8016a70:	1d1d      	adds	r5, r3, #4
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	6015      	str	r5, [r2, #0]
 8016a76:	060a      	lsls	r2, r1, #24
 8016a78:	d50b      	bpl.n	8016a92 <_printf_i+0x162>
 8016a7a:	07ca      	lsls	r2, r1, #31
 8016a7c:	bf44      	itt	mi
 8016a7e:	f041 0120 	orrmi.w	r1, r1, #32
 8016a82:	6021      	strmi	r1, [r4, #0]
 8016a84:	b91b      	cbnz	r3, 8016a8e <_printf_i+0x15e>
 8016a86:	6822      	ldr	r2, [r4, #0]
 8016a88:	f022 0220 	bic.w	r2, r2, #32
 8016a8c:	6022      	str	r2, [r4, #0]
 8016a8e:	2210      	movs	r2, #16
 8016a90:	e7b7      	b.n	8016a02 <_printf_i+0xd2>
 8016a92:	064d      	lsls	r5, r1, #25
 8016a94:	bf48      	it	mi
 8016a96:	b29b      	uxthmi	r3, r3
 8016a98:	e7ef      	b.n	8016a7a <_printf_i+0x14a>
 8016a9a:	4665      	mov	r5, ip
 8016a9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016aa0:	fb02 3311 	mls	r3, r2, r1, r3
 8016aa4:	5cc3      	ldrb	r3, [r0, r3]
 8016aa6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016aaa:	460b      	mov	r3, r1
 8016aac:	2900      	cmp	r1, #0
 8016aae:	d1f5      	bne.n	8016a9c <_printf_i+0x16c>
 8016ab0:	e7b9      	b.n	8016a26 <_printf_i+0xf6>
 8016ab2:	6813      	ldr	r3, [r2, #0]
 8016ab4:	6825      	ldr	r5, [r4, #0]
 8016ab6:	6961      	ldr	r1, [r4, #20]
 8016ab8:	1d18      	adds	r0, r3, #4
 8016aba:	6010      	str	r0, [r2, #0]
 8016abc:	0628      	lsls	r0, r5, #24
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	d501      	bpl.n	8016ac6 <_printf_i+0x196>
 8016ac2:	6019      	str	r1, [r3, #0]
 8016ac4:	e002      	b.n	8016acc <_printf_i+0x19c>
 8016ac6:	066a      	lsls	r2, r5, #25
 8016ac8:	d5fb      	bpl.n	8016ac2 <_printf_i+0x192>
 8016aca:	8019      	strh	r1, [r3, #0]
 8016acc:	2300      	movs	r3, #0
 8016ace:	6123      	str	r3, [r4, #16]
 8016ad0:	4665      	mov	r5, ip
 8016ad2:	e7b9      	b.n	8016a48 <_printf_i+0x118>
 8016ad4:	6813      	ldr	r3, [r2, #0]
 8016ad6:	1d19      	adds	r1, r3, #4
 8016ad8:	6011      	str	r1, [r2, #0]
 8016ada:	681d      	ldr	r5, [r3, #0]
 8016adc:	6862      	ldr	r2, [r4, #4]
 8016ade:	2100      	movs	r1, #0
 8016ae0:	4628      	mov	r0, r5
 8016ae2:	f7f1 fab5 	bl	8008050 <memchr>
 8016ae6:	b108      	cbz	r0, 8016aec <_printf_i+0x1bc>
 8016ae8:	1b40      	subs	r0, r0, r5
 8016aea:	6060      	str	r0, [r4, #4]
 8016aec:	6863      	ldr	r3, [r4, #4]
 8016aee:	6123      	str	r3, [r4, #16]
 8016af0:	2300      	movs	r3, #0
 8016af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016af6:	e7a7      	b.n	8016a48 <_printf_i+0x118>
 8016af8:	6923      	ldr	r3, [r4, #16]
 8016afa:	462a      	mov	r2, r5
 8016afc:	4639      	mov	r1, r7
 8016afe:	4630      	mov	r0, r6
 8016b00:	47c0      	blx	r8
 8016b02:	3001      	adds	r0, #1
 8016b04:	d0aa      	beq.n	8016a5c <_printf_i+0x12c>
 8016b06:	6823      	ldr	r3, [r4, #0]
 8016b08:	079b      	lsls	r3, r3, #30
 8016b0a:	d413      	bmi.n	8016b34 <_printf_i+0x204>
 8016b0c:	68e0      	ldr	r0, [r4, #12]
 8016b0e:	9b03      	ldr	r3, [sp, #12]
 8016b10:	4298      	cmp	r0, r3
 8016b12:	bfb8      	it	lt
 8016b14:	4618      	movlt	r0, r3
 8016b16:	e7a3      	b.n	8016a60 <_printf_i+0x130>
 8016b18:	2301      	movs	r3, #1
 8016b1a:	464a      	mov	r2, r9
 8016b1c:	4639      	mov	r1, r7
 8016b1e:	4630      	mov	r0, r6
 8016b20:	47c0      	blx	r8
 8016b22:	3001      	adds	r0, #1
 8016b24:	d09a      	beq.n	8016a5c <_printf_i+0x12c>
 8016b26:	3501      	adds	r5, #1
 8016b28:	68e3      	ldr	r3, [r4, #12]
 8016b2a:	9a03      	ldr	r2, [sp, #12]
 8016b2c:	1a9b      	subs	r3, r3, r2
 8016b2e:	42ab      	cmp	r3, r5
 8016b30:	dcf2      	bgt.n	8016b18 <_printf_i+0x1e8>
 8016b32:	e7eb      	b.n	8016b0c <_printf_i+0x1dc>
 8016b34:	2500      	movs	r5, #0
 8016b36:	f104 0919 	add.w	r9, r4, #25
 8016b3a:	e7f5      	b.n	8016b28 <_printf_i+0x1f8>
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d1ac      	bne.n	8016a9a <_printf_i+0x16a>
 8016b40:	7803      	ldrb	r3, [r0, #0]
 8016b42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016b46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016b4a:	e76c      	b.n	8016a26 <_printf_i+0xf6>
 8016b4c:	08018b26 	.word	0x08018b26
 8016b50:	08018b37 	.word	0x08018b37

08016b54 <iprintf>:
 8016b54:	b40f      	push	{r0, r1, r2, r3}
 8016b56:	4b0a      	ldr	r3, [pc, #40]	; (8016b80 <iprintf+0x2c>)
 8016b58:	b513      	push	{r0, r1, r4, lr}
 8016b5a:	681c      	ldr	r4, [r3, #0]
 8016b5c:	b124      	cbz	r4, 8016b68 <iprintf+0x14>
 8016b5e:	69a3      	ldr	r3, [r4, #24]
 8016b60:	b913      	cbnz	r3, 8016b68 <iprintf+0x14>
 8016b62:	4620      	mov	r0, r4
 8016b64:	f001 f868 	bl	8017c38 <__sinit>
 8016b68:	ab05      	add	r3, sp, #20
 8016b6a:	9a04      	ldr	r2, [sp, #16]
 8016b6c:	68a1      	ldr	r1, [r4, #8]
 8016b6e:	9301      	str	r3, [sp, #4]
 8016b70:	4620      	mov	r0, r4
 8016b72:	f001 fd21 	bl	80185b8 <_vfiprintf_r>
 8016b76:	b002      	add	sp, #8
 8016b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b7c:	b004      	add	sp, #16
 8016b7e:	4770      	bx	lr
 8016b80:	20000080 	.word	0x20000080

08016b84 <_puts_r>:
 8016b84:	b570      	push	{r4, r5, r6, lr}
 8016b86:	460e      	mov	r6, r1
 8016b88:	4605      	mov	r5, r0
 8016b8a:	b118      	cbz	r0, 8016b94 <_puts_r+0x10>
 8016b8c:	6983      	ldr	r3, [r0, #24]
 8016b8e:	b90b      	cbnz	r3, 8016b94 <_puts_r+0x10>
 8016b90:	f001 f852 	bl	8017c38 <__sinit>
 8016b94:	69ab      	ldr	r3, [r5, #24]
 8016b96:	68ac      	ldr	r4, [r5, #8]
 8016b98:	b913      	cbnz	r3, 8016ba0 <_puts_r+0x1c>
 8016b9a:	4628      	mov	r0, r5
 8016b9c:	f001 f84c 	bl	8017c38 <__sinit>
 8016ba0:	4b23      	ldr	r3, [pc, #140]	; (8016c30 <_puts_r+0xac>)
 8016ba2:	429c      	cmp	r4, r3
 8016ba4:	d117      	bne.n	8016bd6 <_puts_r+0x52>
 8016ba6:	686c      	ldr	r4, [r5, #4]
 8016ba8:	89a3      	ldrh	r3, [r4, #12]
 8016baa:	071b      	lsls	r3, r3, #28
 8016bac:	d51d      	bpl.n	8016bea <_puts_r+0x66>
 8016bae:	6923      	ldr	r3, [r4, #16]
 8016bb0:	b1db      	cbz	r3, 8016bea <_puts_r+0x66>
 8016bb2:	3e01      	subs	r6, #1
 8016bb4:	68a3      	ldr	r3, [r4, #8]
 8016bb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016bba:	3b01      	subs	r3, #1
 8016bbc:	60a3      	str	r3, [r4, #8]
 8016bbe:	b9e9      	cbnz	r1, 8016bfc <_puts_r+0x78>
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	da2e      	bge.n	8016c22 <_puts_r+0x9e>
 8016bc4:	4622      	mov	r2, r4
 8016bc6:	210a      	movs	r1, #10
 8016bc8:	4628      	mov	r0, r5
 8016bca:	f000 f83f 	bl	8016c4c <__swbuf_r>
 8016bce:	3001      	adds	r0, #1
 8016bd0:	d011      	beq.n	8016bf6 <_puts_r+0x72>
 8016bd2:	200a      	movs	r0, #10
 8016bd4:	e011      	b.n	8016bfa <_puts_r+0x76>
 8016bd6:	4b17      	ldr	r3, [pc, #92]	; (8016c34 <_puts_r+0xb0>)
 8016bd8:	429c      	cmp	r4, r3
 8016bda:	d101      	bne.n	8016be0 <_puts_r+0x5c>
 8016bdc:	68ac      	ldr	r4, [r5, #8]
 8016bde:	e7e3      	b.n	8016ba8 <_puts_r+0x24>
 8016be0:	4b15      	ldr	r3, [pc, #84]	; (8016c38 <_puts_r+0xb4>)
 8016be2:	429c      	cmp	r4, r3
 8016be4:	bf08      	it	eq
 8016be6:	68ec      	ldreq	r4, [r5, #12]
 8016be8:	e7de      	b.n	8016ba8 <_puts_r+0x24>
 8016bea:	4621      	mov	r1, r4
 8016bec:	4628      	mov	r0, r5
 8016bee:	f000 f87f 	bl	8016cf0 <__swsetup_r>
 8016bf2:	2800      	cmp	r0, #0
 8016bf4:	d0dd      	beq.n	8016bb2 <_puts_r+0x2e>
 8016bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8016bfa:	bd70      	pop	{r4, r5, r6, pc}
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	da04      	bge.n	8016c0a <_puts_r+0x86>
 8016c00:	69a2      	ldr	r2, [r4, #24]
 8016c02:	429a      	cmp	r2, r3
 8016c04:	dc06      	bgt.n	8016c14 <_puts_r+0x90>
 8016c06:	290a      	cmp	r1, #10
 8016c08:	d004      	beq.n	8016c14 <_puts_r+0x90>
 8016c0a:	6823      	ldr	r3, [r4, #0]
 8016c0c:	1c5a      	adds	r2, r3, #1
 8016c0e:	6022      	str	r2, [r4, #0]
 8016c10:	7019      	strb	r1, [r3, #0]
 8016c12:	e7cf      	b.n	8016bb4 <_puts_r+0x30>
 8016c14:	4622      	mov	r2, r4
 8016c16:	4628      	mov	r0, r5
 8016c18:	f000 f818 	bl	8016c4c <__swbuf_r>
 8016c1c:	3001      	adds	r0, #1
 8016c1e:	d1c9      	bne.n	8016bb4 <_puts_r+0x30>
 8016c20:	e7e9      	b.n	8016bf6 <_puts_r+0x72>
 8016c22:	6823      	ldr	r3, [r4, #0]
 8016c24:	200a      	movs	r0, #10
 8016c26:	1c5a      	adds	r2, r3, #1
 8016c28:	6022      	str	r2, [r4, #0]
 8016c2a:	7018      	strb	r0, [r3, #0]
 8016c2c:	e7e5      	b.n	8016bfa <_puts_r+0x76>
 8016c2e:	bf00      	nop
 8016c30:	08018b78 	.word	0x08018b78
 8016c34:	08018b98 	.word	0x08018b98
 8016c38:	08018b58 	.word	0x08018b58

08016c3c <puts>:
 8016c3c:	4b02      	ldr	r3, [pc, #8]	; (8016c48 <puts+0xc>)
 8016c3e:	4601      	mov	r1, r0
 8016c40:	6818      	ldr	r0, [r3, #0]
 8016c42:	f7ff bf9f 	b.w	8016b84 <_puts_r>
 8016c46:	bf00      	nop
 8016c48:	20000080 	.word	0x20000080

08016c4c <__swbuf_r>:
 8016c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c4e:	460e      	mov	r6, r1
 8016c50:	4614      	mov	r4, r2
 8016c52:	4605      	mov	r5, r0
 8016c54:	b118      	cbz	r0, 8016c5e <__swbuf_r+0x12>
 8016c56:	6983      	ldr	r3, [r0, #24]
 8016c58:	b90b      	cbnz	r3, 8016c5e <__swbuf_r+0x12>
 8016c5a:	f000 ffed 	bl	8017c38 <__sinit>
 8016c5e:	4b21      	ldr	r3, [pc, #132]	; (8016ce4 <__swbuf_r+0x98>)
 8016c60:	429c      	cmp	r4, r3
 8016c62:	d12a      	bne.n	8016cba <__swbuf_r+0x6e>
 8016c64:	686c      	ldr	r4, [r5, #4]
 8016c66:	69a3      	ldr	r3, [r4, #24]
 8016c68:	60a3      	str	r3, [r4, #8]
 8016c6a:	89a3      	ldrh	r3, [r4, #12]
 8016c6c:	071a      	lsls	r2, r3, #28
 8016c6e:	d52e      	bpl.n	8016cce <__swbuf_r+0x82>
 8016c70:	6923      	ldr	r3, [r4, #16]
 8016c72:	b363      	cbz	r3, 8016cce <__swbuf_r+0x82>
 8016c74:	6923      	ldr	r3, [r4, #16]
 8016c76:	6820      	ldr	r0, [r4, #0]
 8016c78:	1ac0      	subs	r0, r0, r3
 8016c7a:	6963      	ldr	r3, [r4, #20]
 8016c7c:	b2f6      	uxtb	r6, r6
 8016c7e:	4283      	cmp	r3, r0
 8016c80:	4637      	mov	r7, r6
 8016c82:	dc04      	bgt.n	8016c8e <__swbuf_r+0x42>
 8016c84:	4621      	mov	r1, r4
 8016c86:	4628      	mov	r0, r5
 8016c88:	f000 ff6c 	bl	8017b64 <_fflush_r>
 8016c8c:	bb28      	cbnz	r0, 8016cda <__swbuf_r+0x8e>
 8016c8e:	68a3      	ldr	r3, [r4, #8]
 8016c90:	3b01      	subs	r3, #1
 8016c92:	60a3      	str	r3, [r4, #8]
 8016c94:	6823      	ldr	r3, [r4, #0]
 8016c96:	1c5a      	adds	r2, r3, #1
 8016c98:	6022      	str	r2, [r4, #0]
 8016c9a:	701e      	strb	r6, [r3, #0]
 8016c9c:	6963      	ldr	r3, [r4, #20]
 8016c9e:	3001      	adds	r0, #1
 8016ca0:	4283      	cmp	r3, r0
 8016ca2:	d004      	beq.n	8016cae <__swbuf_r+0x62>
 8016ca4:	89a3      	ldrh	r3, [r4, #12]
 8016ca6:	07db      	lsls	r3, r3, #31
 8016ca8:	d519      	bpl.n	8016cde <__swbuf_r+0x92>
 8016caa:	2e0a      	cmp	r6, #10
 8016cac:	d117      	bne.n	8016cde <__swbuf_r+0x92>
 8016cae:	4621      	mov	r1, r4
 8016cb0:	4628      	mov	r0, r5
 8016cb2:	f000 ff57 	bl	8017b64 <_fflush_r>
 8016cb6:	b190      	cbz	r0, 8016cde <__swbuf_r+0x92>
 8016cb8:	e00f      	b.n	8016cda <__swbuf_r+0x8e>
 8016cba:	4b0b      	ldr	r3, [pc, #44]	; (8016ce8 <__swbuf_r+0x9c>)
 8016cbc:	429c      	cmp	r4, r3
 8016cbe:	d101      	bne.n	8016cc4 <__swbuf_r+0x78>
 8016cc0:	68ac      	ldr	r4, [r5, #8]
 8016cc2:	e7d0      	b.n	8016c66 <__swbuf_r+0x1a>
 8016cc4:	4b09      	ldr	r3, [pc, #36]	; (8016cec <__swbuf_r+0xa0>)
 8016cc6:	429c      	cmp	r4, r3
 8016cc8:	bf08      	it	eq
 8016cca:	68ec      	ldreq	r4, [r5, #12]
 8016ccc:	e7cb      	b.n	8016c66 <__swbuf_r+0x1a>
 8016cce:	4621      	mov	r1, r4
 8016cd0:	4628      	mov	r0, r5
 8016cd2:	f000 f80d 	bl	8016cf0 <__swsetup_r>
 8016cd6:	2800      	cmp	r0, #0
 8016cd8:	d0cc      	beq.n	8016c74 <__swbuf_r+0x28>
 8016cda:	f04f 37ff 	mov.w	r7, #4294967295
 8016cde:	4638      	mov	r0, r7
 8016ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ce2:	bf00      	nop
 8016ce4:	08018b78 	.word	0x08018b78
 8016ce8:	08018b98 	.word	0x08018b98
 8016cec:	08018b58 	.word	0x08018b58

08016cf0 <__swsetup_r>:
 8016cf0:	4b32      	ldr	r3, [pc, #200]	; (8016dbc <__swsetup_r+0xcc>)
 8016cf2:	b570      	push	{r4, r5, r6, lr}
 8016cf4:	681d      	ldr	r5, [r3, #0]
 8016cf6:	4606      	mov	r6, r0
 8016cf8:	460c      	mov	r4, r1
 8016cfa:	b125      	cbz	r5, 8016d06 <__swsetup_r+0x16>
 8016cfc:	69ab      	ldr	r3, [r5, #24]
 8016cfe:	b913      	cbnz	r3, 8016d06 <__swsetup_r+0x16>
 8016d00:	4628      	mov	r0, r5
 8016d02:	f000 ff99 	bl	8017c38 <__sinit>
 8016d06:	4b2e      	ldr	r3, [pc, #184]	; (8016dc0 <__swsetup_r+0xd0>)
 8016d08:	429c      	cmp	r4, r3
 8016d0a:	d10f      	bne.n	8016d2c <__swsetup_r+0x3c>
 8016d0c:	686c      	ldr	r4, [r5, #4]
 8016d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d12:	b29a      	uxth	r2, r3
 8016d14:	0715      	lsls	r5, r2, #28
 8016d16:	d42c      	bmi.n	8016d72 <__swsetup_r+0x82>
 8016d18:	06d0      	lsls	r0, r2, #27
 8016d1a:	d411      	bmi.n	8016d40 <__swsetup_r+0x50>
 8016d1c:	2209      	movs	r2, #9
 8016d1e:	6032      	str	r2, [r6, #0]
 8016d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d24:	81a3      	strh	r3, [r4, #12]
 8016d26:	f04f 30ff 	mov.w	r0, #4294967295
 8016d2a:	e03e      	b.n	8016daa <__swsetup_r+0xba>
 8016d2c:	4b25      	ldr	r3, [pc, #148]	; (8016dc4 <__swsetup_r+0xd4>)
 8016d2e:	429c      	cmp	r4, r3
 8016d30:	d101      	bne.n	8016d36 <__swsetup_r+0x46>
 8016d32:	68ac      	ldr	r4, [r5, #8]
 8016d34:	e7eb      	b.n	8016d0e <__swsetup_r+0x1e>
 8016d36:	4b24      	ldr	r3, [pc, #144]	; (8016dc8 <__swsetup_r+0xd8>)
 8016d38:	429c      	cmp	r4, r3
 8016d3a:	bf08      	it	eq
 8016d3c:	68ec      	ldreq	r4, [r5, #12]
 8016d3e:	e7e6      	b.n	8016d0e <__swsetup_r+0x1e>
 8016d40:	0751      	lsls	r1, r2, #29
 8016d42:	d512      	bpl.n	8016d6a <__swsetup_r+0x7a>
 8016d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016d46:	b141      	cbz	r1, 8016d5a <__swsetup_r+0x6a>
 8016d48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016d4c:	4299      	cmp	r1, r3
 8016d4e:	d002      	beq.n	8016d56 <__swsetup_r+0x66>
 8016d50:	4630      	mov	r0, r6
 8016d52:	f001 fb5f 	bl	8018414 <_free_r>
 8016d56:	2300      	movs	r3, #0
 8016d58:	6363      	str	r3, [r4, #52]	; 0x34
 8016d5a:	89a3      	ldrh	r3, [r4, #12]
 8016d5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016d60:	81a3      	strh	r3, [r4, #12]
 8016d62:	2300      	movs	r3, #0
 8016d64:	6063      	str	r3, [r4, #4]
 8016d66:	6923      	ldr	r3, [r4, #16]
 8016d68:	6023      	str	r3, [r4, #0]
 8016d6a:	89a3      	ldrh	r3, [r4, #12]
 8016d6c:	f043 0308 	orr.w	r3, r3, #8
 8016d70:	81a3      	strh	r3, [r4, #12]
 8016d72:	6923      	ldr	r3, [r4, #16]
 8016d74:	b94b      	cbnz	r3, 8016d8a <__swsetup_r+0x9a>
 8016d76:	89a3      	ldrh	r3, [r4, #12]
 8016d78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d80:	d003      	beq.n	8016d8a <__swsetup_r+0x9a>
 8016d82:	4621      	mov	r1, r4
 8016d84:	4630      	mov	r0, r6
 8016d86:	f001 f813 	bl	8017db0 <__smakebuf_r>
 8016d8a:	89a2      	ldrh	r2, [r4, #12]
 8016d8c:	f012 0301 	ands.w	r3, r2, #1
 8016d90:	d00c      	beq.n	8016dac <__swsetup_r+0xbc>
 8016d92:	2300      	movs	r3, #0
 8016d94:	60a3      	str	r3, [r4, #8]
 8016d96:	6963      	ldr	r3, [r4, #20]
 8016d98:	425b      	negs	r3, r3
 8016d9a:	61a3      	str	r3, [r4, #24]
 8016d9c:	6923      	ldr	r3, [r4, #16]
 8016d9e:	b953      	cbnz	r3, 8016db6 <__swsetup_r+0xc6>
 8016da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016da4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016da8:	d1ba      	bne.n	8016d20 <__swsetup_r+0x30>
 8016daa:	bd70      	pop	{r4, r5, r6, pc}
 8016dac:	0792      	lsls	r2, r2, #30
 8016dae:	bf58      	it	pl
 8016db0:	6963      	ldrpl	r3, [r4, #20]
 8016db2:	60a3      	str	r3, [r4, #8]
 8016db4:	e7f2      	b.n	8016d9c <__swsetup_r+0xac>
 8016db6:	2000      	movs	r0, #0
 8016db8:	e7f7      	b.n	8016daa <__swsetup_r+0xba>
 8016dba:	bf00      	nop
 8016dbc:	20000080 	.word	0x20000080
 8016dc0:	08018b78 	.word	0x08018b78
 8016dc4:	08018b98 	.word	0x08018b98
 8016dc8:	08018b58 	.word	0x08018b58

08016dcc <quorem>:
 8016dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dd0:	6903      	ldr	r3, [r0, #16]
 8016dd2:	690c      	ldr	r4, [r1, #16]
 8016dd4:	42a3      	cmp	r3, r4
 8016dd6:	4680      	mov	r8, r0
 8016dd8:	f2c0 8082 	blt.w	8016ee0 <quorem+0x114>
 8016ddc:	3c01      	subs	r4, #1
 8016dde:	f101 0714 	add.w	r7, r1, #20
 8016de2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016de6:	f100 0614 	add.w	r6, r0, #20
 8016dea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016dee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016df2:	eb06 030c 	add.w	r3, r6, ip
 8016df6:	3501      	adds	r5, #1
 8016df8:	eb07 090c 	add.w	r9, r7, ip
 8016dfc:	9301      	str	r3, [sp, #4]
 8016dfe:	fbb0 f5f5 	udiv	r5, r0, r5
 8016e02:	b395      	cbz	r5, 8016e6a <quorem+0x9e>
 8016e04:	f04f 0a00 	mov.w	sl, #0
 8016e08:	4638      	mov	r0, r7
 8016e0a:	46b6      	mov	lr, r6
 8016e0c:	46d3      	mov	fp, sl
 8016e0e:	f850 2b04 	ldr.w	r2, [r0], #4
 8016e12:	b293      	uxth	r3, r2
 8016e14:	fb05 a303 	mla	r3, r5, r3, sl
 8016e18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016e1c:	b29b      	uxth	r3, r3
 8016e1e:	ebab 0303 	sub.w	r3, fp, r3
 8016e22:	0c12      	lsrs	r2, r2, #16
 8016e24:	f8de b000 	ldr.w	fp, [lr]
 8016e28:	fb05 a202 	mla	r2, r5, r2, sl
 8016e2c:	fa13 f38b 	uxtah	r3, r3, fp
 8016e30:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016e34:	fa1f fb82 	uxth.w	fp, r2
 8016e38:	f8de 2000 	ldr.w	r2, [lr]
 8016e3c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016e40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016e44:	b29b      	uxth	r3, r3
 8016e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016e4a:	4581      	cmp	r9, r0
 8016e4c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016e50:	f84e 3b04 	str.w	r3, [lr], #4
 8016e54:	d2db      	bcs.n	8016e0e <quorem+0x42>
 8016e56:	f856 300c 	ldr.w	r3, [r6, ip]
 8016e5a:	b933      	cbnz	r3, 8016e6a <quorem+0x9e>
 8016e5c:	9b01      	ldr	r3, [sp, #4]
 8016e5e:	3b04      	subs	r3, #4
 8016e60:	429e      	cmp	r6, r3
 8016e62:	461a      	mov	r2, r3
 8016e64:	d330      	bcc.n	8016ec8 <quorem+0xfc>
 8016e66:	f8c8 4010 	str.w	r4, [r8, #16]
 8016e6a:	4640      	mov	r0, r8
 8016e6c:	f001 f9fe 	bl	801826c <__mcmp>
 8016e70:	2800      	cmp	r0, #0
 8016e72:	db25      	blt.n	8016ec0 <quorem+0xf4>
 8016e74:	3501      	adds	r5, #1
 8016e76:	4630      	mov	r0, r6
 8016e78:	f04f 0c00 	mov.w	ip, #0
 8016e7c:	f857 2b04 	ldr.w	r2, [r7], #4
 8016e80:	f8d0 e000 	ldr.w	lr, [r0]
 8016e84:	b293      	uxth	r3, r2
 8016e86:	ebac 0303 	sub.w	r3, ip, r3
 8016e8a:	0c12      	lsrs	r2, r2, #16
 8016e8c:	fa13 f38e 	uxtah	r3, r3, lr
 8016e90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016e94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016e98:	b29b      	uxth	r3, r3
 8016e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016e9e:	45b9      	cmp	r9, r7
 8016ea0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016ea4:	f840 3b04 	str.w	r3, [r0], #4
 8016ea8:	d2e8      	bcs.n	8016e7c <quorem+0xb0>
 8016eaa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016eae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016eb2:	b92a      	cbnz	r2, 8016ec0 <quorem+0xf4>
 8016eb4:	3b04      	subs	r3, #4
 8016eb6:	429e      	cmp	r6, r3
 8016eb8:	461a      	mov	r2, r3
 8016eba:	d30b      	bcc.n	8016ed4 <quorem+0x108>
 8016ebc:	f8c8 4010 	str.w	r4, [r8, #16]
 8016ec0:	4628      	mov	r0, r5
 8016ec2:	b003      	add	sp, #12
 8016ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ec8:	6812      	ldr	r2, [r2, #0]
 8016eca:	3b04      	subs	r3, #4
 8016ecc:	2a00      	cmp	r2, #0
 8016ece:	d1ca      	bne.n	8016e66 <quorem+0x9a>
 8016ed0:	3c01      	subs	r4, #1
 8016ed2:	e7c5      	b.n	8016e60 <quorem+0x94>
 8016ed4:	6812      	ldr	r2, [r2, #0]
 8016ed6:	3b04      	subs	r3, #4
 8016ed8:	2a00      	cmp	r2, #0
 8016eda:	d1ef      	bne.n	8016ebc <quorem+0xf0>
 8016edc:	3c01      	subs	r4, #1
 8016ede:	e7ea      	b.n	8016eb6 <quorem+0xea>
 8016ee0:	2000      	movs	r0, #0
 8016ee2:	e7ee      	b.n	8016ec2 <quorem+0xf6>
 8016ee4:	0000      	movs	r0, r0
	...

08016ee8 <_dtoa_r>:
 8016ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eec:	ec57 6b10 	vmov	r6, r7, d0
 8016ef0:	b097      	sub	sp, #92	; 0x5c
 8016ef2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016ef4:	9106      	str	r1, [sp, #24]
 8016ef6:	4604      	mov	r4, r0
 8016ef8:	920b      	str	r2, [sp, #44]	; 0x2c
 8016efa:	9312      	str	r3, [sp, #72]	; 0x48
 8016efc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016f00:	e9cd 6700 	strd	r6, r7, [sp]
 8016f04:	b93d      	cbnz	r5, 8016f16 <_dtoa_r+0x2e>
 8016f06:	2010      	movs	r0, #16
 8016f08:	f000 ff92 	bl	8017e30 <malloc>
 8016f0c:	6260      	str	r0, [r4, #36]	; 0x24
 8016f0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016f12:	6005      	str	r5, [r0, #0]
 8016f14:	60c5      	str	r5, [r0, #12]
 8016f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f18:	6819      	ldr	r1, [r3, #0]
 8016f1a:	b151      	cbz	r1, 8016f32 <_dtoa_r+0x4a>
 8016f1c:	685a      	ldr	r2, [r3, #4]
 8016f1e:	604a      	str	r2, [r1, #4]
 8016f20:	2301      	movs	r3, #1
 8016f22:	4093      	lsls	r3, r2
 8016f24:	608b      	str	r3, [r1, #8]
 8016f26:	4620      	mov	r0, r4
 8016f28:	f000 ffbe 	bl	8017ea8 <_Bfree>
 8016f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f2e:	2200      	movs	r2, #0
 8016f30:	601a      	str	r2, [r3, #0]
 8016f32:	1e3b      	subs	r3, r7, #0
 8016f34:	bfbb      	ittet	lt
 8016f36:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016f3a:	9301      	strlt	r3, [sp, #4]
 8016f3c:	2300      	movge	r3, #0
 8016f3e:	2201      	movlt	r2, #1
 8016f40:	bfac      	ite	ge
 8016f42:	f8c8 3000 	strge.w	r3, [r8]
 8016f46:	f8c8 2000 	strlt.w	r2, [r8]
 8016f4a:	4baf      	ldr	r3, [pc, #700]	; (8017208 <_dtoa_r+0x320>)
 8016f4c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016f50:	ea33 0308 	bics.w	r3, r3, r8
 8016f54:	d114      	bne.n	8016f80 <_dtoa_r+0x98>
 8016f56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016f58:	f242 730f 	movw	r3, #9999	; 0x270f
 8016f5c:	6013      	str	r3, [r2, #0]
 8016f5e:	9b00      	ldr	r3, [sp, #0]
 8016f60:	b923      	cbnz	r3, 8016f6c <_dtoa_r+0x84>
 8016f62:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016f66:	2800      	cmp	r0, #0
 8016f68:	f000 8542 	beq.w	80179f0 <_dtoa_r+0xb08>
 8016f6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f6e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801721c <_dtoa_r+0x334>
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	f000 8544 	beq.w	8017a00 <_dtoa_r+0xb18>
 8016f78:	f10b 0303 	add.w	r3, fp, #3
 8016f7c:	f000 bd3e 	b.w	80179fc <_dtoa_r+0xb14>
 8016f80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016f84:	2200      	movs	r2, #0
 8016f86:	2300      	movs	r3, #0
 8016f88:	4630      	mov	r0, r6
 8016f8a:	4639      	mov	r1, r7
 8016f8c:	f7f1 fcd4 	bl	8008938 <__aeabi_dcmpeq>
 8016f90:	4681      	mov	r9, r0
 8016f92:	b168      	cbz	r0, 8016fb0 <_dtoa_r+0xc8>
 8016f94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016f96:	2301      	movs	r3, #1
 8016f98:	6013      	str	r3, [r2, #0]
 8016f9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	f000 8524 	beq.w	80179ea <_dtoa_r+0xb02>
 8016fa2:	4b9a      	ldr	r3, [pc, #616]	; (801720c <_dtoa_r+0x324>)
 8016fa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016fa6:	f103 3bff 	add.w	fp, r3, #4294967295
 8016faa:	6013      	str	r3, [r2, #0]
 8016fac:	f000 bd28 	b.w	8017a00 <_dtoa_r+0xb18>
 8016fb0:	aa14      	add	r2, sp, #80	; 0x50
 8016fb2:	a915      	add	r1, sp, #84	; 0x54
 8016fb4:	ec47 6b10 	vmov	d0, r6, r7
 8016fb8:	4620      	mov	r0, r4
 8016fba:	f001 f9ce 	bl	801835a <__d2b>
 8016fbe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016fc2:	9004      	str	r0, [sp, #16]
 8016fc4:	2d00      	cmp	r5, #0
 8016fc6:	d07c      	beq.n	80170c2 <_dtoa_r+0x1da>
 8016fc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016fcc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016fd0:	46b2      	mov	sl, r6
 8016fd2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016fd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016fda:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016fde:	2200      	movs	r2, #0
 8016fe0:	4b8b      	ldr	r3, [pc, #556]	; (8017210 <_dtoa_r+0x328>)
 8016fe2:	4650      	mov	r0, sl
 8016fe4:	4659      	mov	r1, fp
 8016fe6:	f7f1 f887 	bl	80080f8 <__aeabi_dsub>
 8016fea:	a381      	add	r3, pc, #516	; (adr r3, 80171f0 <_dtoa_r+0x308>)
 8016fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ff0:	f7f1 fa3a 	bl	8008468 <__aeabi_dmul>
 8016ff4:	a380      	add	r3, pc, #512	; (adr r3, 80171f8 <_dtoa_r+0x310>)
 8016ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ffa:	f7f1 f87f 	bl	80080fc <__adddf3>
 8016ffe:	4606      	mov	r6, r0
 8017000:	4628      	mov	r0, r5
 8017002:	460f      	mov	r7, r1
 8017004:	f7f1 f9c6 	bl	8008394 <__aeabi_i2d>
 8017008:	a37d      	add	r3, pc, #500	; (adr r3, 8017200 <_dtoa_r+0x318>)
 801700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801700e:	f7f1 fa2b 	bl	8008468 <__aeabi_dmul>
 8017012:	4602      	mov	r2, r0
 8017014:	460b      	mov	r3, r1
 8017016:	4630      	mov	r0, r6
 8017018:	4639      	mov	r1, r7
 801701a:	f7f1 f86f 	bl	80080fc <__adddf3>
 801701e:	4606      	mov	r6, r0
 8017020:	460f      	mov	r7, r1
 8017022:	f7f1 fcd1 	bl	80089c8 <__aeabi_d2iz>
 8017026:	2200      	movs	r2, #0
 8017028:	4682      	mov	sl, r0
 801702a:	2300      	movs	r3, #0
 801702c:	4630      	mov	r0, r6
 801702e:	4639      	mov	r1, r7
 8017030:	f7f1 fc8c 	bl	800894c <__aeabi_dcmplt>
 8017034:	b148      	cbz	r0, 801704a <_dtoa_r+0x162>
 8017036:	4650      	mov	r0, sl
 8017038:	f7f1 f9ac 	bl	8008394 <__aeabi_i2d>
 801703c:	4632      	mov	r2, r6
 801703e:	463b      	mov	r3, r7
 8017040:	f7f1 fc7a 	bl	8008938 <__aeabi_dcmpeq>
 8017044:	b908      	cbnz	r0, 801704a <_dtoa_r+0x162>
 8017046:	f10a 3aff 	add.w	sl, sl, #4294967295
 801704a:	f1ba 0f16 	cmp.w	sl, #22
 801704e:	d859      	bhi.n	8017104 <_dtoa_r+0x21c>
 8017050:	4970      	ldr	r1, [pc, #448]	; (8017214 <_dtoa_r+0x32c>)
 8017052:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017056:	e9dd 2300 	ldrd	r2, r3, [sp]
 801705a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801705e:	f7f1 fc93 	bl	8008988 <__aeabi_dcmpgt>
 8017062:	2800      	cmp	r0, #0
 8017064:	d050      	beq.n	8017108 <_dtoa_r+0x220>
 8017066:	f10a 3aff 	add.w	sl, sl, #4294967295
 801706a:	2300      	movs	r3, #0
 801706c:	930f      	str	r3, [sp, #60]	; 0x3c
 801706e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017070:	1b5d      	subs	r5, r3, r5
 8017072:	f1b5 0801 	subs.w	r8, r5, #1
 8017076:	bf49      	itett	mi
 8017078:	f1c5 0301 	rsbmi	r3, r5, #1
 801707c:	2300      	movpl	r3, #0
 801707e:	9305      	strmi	r3, [sp, #20]
 8017080:	f04f 0800 	movmi.w	r8, #0
 8017084:	bf58      	it	pl
 8017086:	9305      	strpl	r3, [sp, #20]
 8017088:	f1ba 0f00 	cmp.w	sl, #0
 801708c:	db3e      	blt.n	801710c <_dtoa_r+0x224>
 801708e:	2300      	movs	r3, #0
 8017090:	44d0      	add	r8, sl
 8017092:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017096:	9307      	str	r3, [sp, #28]
 8017098:	9b06      	ldr	r3, [sp, #24]
 801709a:	2b09      	cmp	r3, #9
 801709c:	f200 8090 	bhi.w	80171c0 <_dtoa_r+0x2d8>
 80170a0:	2b05      	cmp	r3, #5
 80170a2:	bfc4      	itt	gt
 80170a4:	3b04      	subgt	r3, #4
 80170a6:	9306      	strgt	r3, [sp, #24]
 80170a8:	9b06      	ldr	r3, [sp, #24]
 80170aa:	f1a3 0302 	sub.w	r3, r3, #2
 80170ae:	bfcc      	ite	gt
 80170b0:	2500      	movgt	r5, #0
 80170b2:	2501      	movle	r5, #1
 80170b4:	2b03      	cmp	r3, #3
 80170b6:	f200 808f 	bhi.w	80171d8 <_dtoa_r+0x2f0>
 80170ba:	e8df f003 	tbb	[pc, r3]
 80170be:	7f7d      	.short	0x7f7d
 80170c0:	7131      	.short	0x7131
 80170c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80170c6:	441d      	add	r5, r3
 80170c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80170cc:	2820      	cmp	r0, #32
 80170ce:	dd13      	ble.n	80170f8 <_dtoa_r+0x210>
 80170d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80170d4:	9b00      	ldr	r3, [sp, #0]
 80170d6:	fa08 f800 	lsl.w	r8, r8, r0
 80170da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80170de:	fa23 f000 	lsr.w	r0, r3, r0
 80170e2:	ea48 0000 	orr.w	r0, r8, r0
 80170e6:	f7f1 f945 	bl	8008374 <__aeabi_ui2d>
 80170ea:	2301      	movs	r3, #1
 80170ec:	4682      	mov	sl, r0
 80170ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80170f2:	3d01      	subs	r5, #1
 80170f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80170f6:	e772      	b.n	8016fde <_dtoa_r+0xf6>
 80170f8:	9b00      	ldr	r3, [sp, #0]
 80170fa:	f1c0 0020 	rsb	r0, r0, #32
 80170fe:	fa03 f000 	lsl.w	r0, r3, r0
 8017102:	e7f0      	b.n	80170e6 <_dtoa_r+0x1fe>
 8017104:	2301      	movs	r3, #1
 8017106:	e7b1      	b.n	801706c <_dtoa_r+0x184>
 8017108:	900f      	str	r0, [sp, #60]	; 0x3c
 801710a:	e7b0      	b.n	801706e <_dtoa_r+0x186>
 801710c:	9b05      	ldr	r3, [sp, #20]
 801710e:	eba3 030a 	sub.w	r3, r3, sl
 8017112:	9305      	str	r3, [sp, #20]
 8017114:	f1ca 0300 	rsb	r3, sl, #0
 8017118:	9307      	str	r3, [sp, #28]
 801711a:	2300      	movs	r3, #0
 801711c:	930e      	str	r3, [sp, #56]	; 0x38
 801711e:	e7bb      	b.n	8017098 <_dtoa_r+0x1b0>
 8017120:	2301      	movs	r3, #1
 8017122:	930a      	str	r3, [sp, #40]	; 0x28
 8017124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017126:	2b00      	cmp	r3, #0
 8017128:	dd59      	ble.n	80171de <_dtoa_r+0x2f6>
 801712a:	9302      	str	r3, [sp, #8]
 801712c:	4699      	mov	r9, r3
 801712e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017130:	2200      	movs	r2, #0
 8017132:	6072      	str	r2, [r6, #4]
 8017134:	2204      	movs	r2, #4
 8017136:	f102 0014 	add.w	r0, r2, #20
 801713a:	4298      	cmp	r0, r3
 801713c:	6871      	ldr	r1, [r6, #4]
 801713e:	d953      	bls.n	80171e8 <_dtoa_r+0x300>
 8017140:	4620      	mov	r0, r4
 8017142:	f000 fe7d 	bl	8017e40 <_Balloc>
 8017146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017148:	6030      	str	r0, [r6, #0]
 801714a:	f1b9 0f0e 	cmp.w	r9, #14
 801714e:	f8d3 b000 	ldr.w	fp, [r3]
 8017152:	f200 80e6 	bhi.w	8017322 <_dtoa_r+0x43a>
 8017156:	2d00      	cmp	r5, #0
 8017158:	f000 80e3 	beq.w	8017322 <_dtoa_r+0x43a>
 801715c:	ed9d 7b00 	vldr	d7, [sp]
 8017160:	f1ba 0f00 	cmp.w	sl, #0
 8017164:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017168:	dd74      	ble.n	8017254 <_dtoa_r+0x36c>
 801716a:	4a2a      	ldr	r2, [pc, #168]	; (8017214 <_dtoa_r+0x32c>)
 801716c:	f00a 030f 	and.w	r3, sl, #15
 8017170:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017174:	ed93 7b00 	vldr	d7, [r3]
 8017178:	ea4f 162a 	mov.w	r6, sl, asr #4
 801717c:	06f0      	lsls	r0, r6, #27
 801717e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017182:	d565      	bpl.n	8017250 <_dtoa_r+0x368>
 8017184:	4b24      	ldr	r3, [pc, #144]	; (8017218 <_dtoa_r+0x330>)
 8017186:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801718a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801718e:	f7f1 fa95 	bl	80086bc <__aeabi_ddiv>
 8017192:	e9cd 0100 	strd	r0, r1, [sp]
 8017196:	f006 060f 	and.w	r6, r6, #15
 801719a:	2503      	movs	r5, #3
 801719c:	4f1e      	ldr	r7, [pc, #120]	; (8017218 <_dtoa_r+0x330>)
 801719e:	e04c      	b.n	801723a <_dtoa_r+0x352>
 80171a0:	2301      	movs	r3, #1
 80171a2:	930a      	str	r3, [sp, #40]	; 0x28
 80171a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171a6:	4453      	add	r3, sl
 80171a8:	f103 0901 	add.w	r9, r3, #1
 80171ac:	9302      	str	r3, [sp, #8]
 80171ae:	464b      	mov	r3, r9
 80171b0:	2b01      	cmp	r3, #1
 80171b2:	bfb8      	it	lt
 80171b4:	2301      	movlt	r3, #1
 80171b6:	e7ba      	b.n	801712e <_dtoa_r+0x246>
 80171b8:	2300      	movs	r3, #0
 80171ba:	e7b2      	b.n	8017122 <_dtoa_r+0x23a>
 80171bc:	2300      	movs	r3, #0
 80171be:	e7f0      	b.n	80171a2 <_dtoa_r+0x2ba>
 80171c0:	2501      	movs	r5, #1
 80171c2:	2300      	movs	r3, #0
 80171c4:	9306      	str	r3, [sp, #24]
 80171c6:	950a      	str	r5, [sp, #40]	; 0x28
 80171c8:	f04f 33ff 	mov.w	r3, #4294967295
 80171cc:	9302      	str	r3, [sp, #8]
 80171ce:	4699      	mov	r9, r3
 80171d0:	2200      	movs	r2, #0
 80171d2:	2312      	movs	r3, #18
 80171d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80171d6:	e7aa      	b.n	801712e <_dtoa_r+0x246>
 80171d8:	2301      	movs	r3, #1
 80171da:	930a      	str	r3, [sp, #40]	; 0x28
 80171dc:	e7f4      	b.n	80171c8 <_dtoa_r+0x2e0>
 80171de:	2301      	movs	r3, #1
 80171e0:	9302      	str	r3, [sp, #8]
 80171e2:	4699      	mov	r9, r3
 80171e4:	461a      	mov	r2, r3
 80171e6:	e7f5      	b.n	80171d4 <_dtoa_r+0x2ec>
 80171e8:	3101      	adds	r1, #1
 80171ea:	6071      	str	r1, [r6, #4]
 80171ec:	0052      	lsls	r2, r2, #1
 80171ee:	e7a2      	b.n	8017136 <_dtoa_r+0x24e>
 80171f0:	636f4361 	.word	0x636f4361
 80171f4:	3fd287a7 	.word	0x3fd287a7
 80171f8:	8b60c8b3 	.word	0x8b60c8b3
 80171fc:	3fc68a28 	.word	0x3fc68a28
 8017200:	509f79fb 	.word	0x509f79fb
 8017204:	3fd34413 	.word	0x3fd34413
 8017208:	7ff00000 	.word	0x7ff00000
 801720c:	08018b25 	.word	0x08018b25
 8017210:	3ff80000 	.word	0x3ff80000
 8017214:	08018be0 	.word	0x08018be0
 8017218:	08018bb8 	.word	0x08018bb8
 801721c:	08018b51 	.word	0x08018b51
 8017220:	07f1      	lsls	r1, r6, #31
 8017222:	d508      	bpl.n	8017236 <_dtoa_r+0x34e>
 8017224:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017228:	e9d7 2300 	ldrd	r2, r3, [r7]
 801722c:	f7f1 f91c 	bl	8008468 <__aeabi_dmul>
 8017230:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017234:	3501      	adds	r5, #1
 8017236:	1076      	asrs	r6, r6, #1
 8017238:	3708      	adds	r7, #8
 801723a:	2e00      	cmp	r6, #0
 801723c:	d1f0      	bne.n	8017220 <_dtoa_r+0x338>
 801723e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017242:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017246:	f7f1 fa39 	bl	80086bc <__aeabi_ddiv>
 801724a:	e9cd 0100 	strd	r0, r1, [sp]
 801724e:	e01a      	b.n	8017286 <_dtoa_r+0x39e>
 8017250:	2502      	movs	r5, #2
 8017252:	e7a3      	b.n	801719c <_dtoa_r+0x2b4>
 8017254:	f000 80a0 	beq.w	8017398 <_dtoa_r+0x4b0>
 8017258:	f1ca 0600 	rsb	r6, sl, #0
 801725c:	4b9f      	ldr	r3, [pc, #636]	; (80174dc <_dtoa_r+0x5f4>)
 801725e:	4fa0      	ldr	r7, [pc, #640]	; (80174e0 <_dtoa_r+0x5f8>)
 8017260:	f006 020f 	and.w	r2, r6, #15
 8017264:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801726c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017270:	f7f1 f8fa 	bl	8008468 <__aeabi_dmul>
 8017274:	e9cd 0100 	strd	r0, r1, [sp]
 8017278:	1136      	asrs	r6, r6, #4
 801727a:	2300      	movs	r3, #0
 801727c:	2502      	movs	r5, #2
 801727e:	2e00      	cmp	r6, #0
 8017280:	d17f      	bne.n	8017382 <_dtoa_r+0x49a>
 8017282:	2b00      	cmp	r3, #0
 8017284:	d1e1      	bne.n	801724a <_dtoa_r+0x362>
 8017286:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017288:	2b00      	cmp	r3, #0
 801728a:	f000 8087 	beq.w	801739c <_dtoa_r+0x4b4>
 801728e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017292:	2200      	movs	r2, #0
 8017294:	4b93      	ldr	r3, [pc, #588]	; (80174e4 <_dtoa_r+0x5fc>)
 8017296:	4630      	mov	r0, r6
 8017298:	4639      	mov	r1, r7
 801729a:	f7f1 fb57 	bl	800894c <__aeabi_dcmplt>
 801729e:	2800      	cmp	r0, #0
 80172a0:	d07c      	beq.n	801739c <_dtoa_r+0x4b4>
 80172a2:	f1b9 0f00 	cmp.w	r9, #0
 80172a6:	d079      	beq.n	801739c <_dtoa_r+0x4b4>
 80172a8:	9b02      	ldr	r3, [sp, #8]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	dd35      	ble.n	801731a <_dtoa_r+0x432>
 80172ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80172b2:	9308      	str	r3, [sp, #32]
 80172b4:	4639      	mov	r1, r7
 80172b6:	2200      	movs	r2, #0
 80172b8:	4b8b      	ldr	r3, [pc, #556]	; (80174e8 <_dtoa_r+0x600>)
 80172ba:	4630      	mov	r0, r6
 80172bc:	f7f1 f8d4 	bl	8008468 <__aeabi_dmul>
 80172c0:	e9cd 0100 	strd	r0, r1, [sp]
 80172c4:	9f02      	ldr	r7, [sp, #8]
 80172c6:	3501      	adds	r5, #1
 80172c8:	4628      	mov	r0, r5
 80172ca:	f7f1 f863 	bl	8008394 <__aeabi_i2d>
 80172ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80172d2:	f7f1 f8c9 	bl	8008468 <__aeabi_dmul>
 80172d6:	2200      	movs	r2, #0
 80172d8:	4b84      	ldr	r3, [pc, #528]	; (80174ec <_dtoa_r+0x604>)
 80172da:	f7f0 ff0f 	bl	80080fc <__adddf3>
 80172de:	4605      	mov	r5, r0
 80172e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80172e4:	2f00      	cmp	r7, #0
 80172e6:	d15d      	bne.n	80173a4 <_dtoa_r+0x4bc>
 80172e8:	2200      	movs	r2, #0
 80172ea:	4b81      	ldr	r3, [pc, #516]	; (80174f0 <_dtoa_r+0x608>)
 80172ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172f0:	f7f0 ff02 	bl	80080f8 <__aeabi_dsub>
 80172f4:	462a      	mov	r2, r5
 80172f6:	4633      	mov	r3, r6
 80172f8:	e9cd 0100 	strd	r0, r1, [sp]
 80172fc:	f7f1 fb44 	bl	8008988 <__aeabi_dcmpgt>
 8017300:	2800      	cmp	r0, #0
 8017302:	f040 8288 	bne.w	8017816 <_dtoa_r+0x92e>
 8017306:	462a      	mov	r2, r5
 8017308:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801730c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017310:	f7f1 fb1c 	bl	800894c <__aeabi_dcmplt>
 8017314:	2800      	cmp	r0, #0
 8017316:	f040 827c 	bne.w	8017812 <_dtoa_r+0x92a>
 801731a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801731e:	e9cd 2300 	strd	r2, r3, [sp]
 8017322:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017324:	2b00      	cmp	r3, #0
 8017326:	f2c0 8150 	blt.w	80175ca <_dtoa_r+0x6e2>
 801732a:	f1ba 0f0e 	cmp.w	sl, #14
 801732e:	f300 814c 	bgt.w	80175ca <_dtoa_r+0x6e2>
 8017332:	4b6a      	ldr	r3, [pc, #424]	; (80174dc <_dtoa_r+0x5f4>)
 8017334:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017338:	ed93 7b00 	vldr	d7, [r3]
 801733c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801733e:	2b00      	cmp	r3, #0
 8017340:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017344:	f280 80d8 	bge.w	80174f8 <_dtoa_r+0x610>
 8017348:	f1b9 0f00 	cmp.w	r9, #0
 801734c:	f300 80d4 	bgt.w	80174f8 <_dtoa_r+0x610>
 8017350:	f040 825e 	bne.w	8017810 <_dtoa_r+0x928>
 8017354:	2200      	movs	r2, #0
 8017356:	4b66      	ldr	r3, [pc, #408]	; (80174f0 <_dtoa_r+0x608>)
 8017358:	ec51 0b17 	vmov	r0, r1, d7
 801735c:	f7f1 f884 	bl	8008468 <__aeabi_dmul>
 8017360:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017364:	f7f1 fb06 	bl	8008974 <__aeabi_dcmpge>
 8017368:	464f      	mov	r7, r9
 801736a:	464e      	mov	r6, r9
 801736c:	2800      	cmp	r0, #0
 801736e:	f040 8234 	bne.w	80177da <_dtoa_r+0x8f2>
 8017372:	2331      	movs	r3, #49	; 0x31
 8017374:	f10b 0501 	add.w	r5, fp, #1
 8017378:	f88b 3000 	strb.w	r3, [fp]
 801737c:	f10a 0a01 	add.w	sl, sl, #1
 8017380:	e22f      	b.n	80177e2 <_dtoa_r+0x8fa>
 8017382:	07f2      	lsls	r2, r6, #31
 8017384:	d505      	bpl.n	8017392 <_dtoa_r+0x4aa>
 8017386:	e9d7 2300 	ldrd	r2, r3, [r7]
 801738a:	f7f1 f86d 	bl	8008468 <__aeabi_dmul>
 801738e:	3501      	adds	r5, #1
 8017390:	2301      	movs	r3, #1
 8017392:	1076      	asrs	r6, r6, #1
 8017394:	3708      	adds	r7, #8
 8017396:	e772      	b.n	801727e <_dtoa_r+0x396>
 8017398:	2502      	movs	r5, #2
 801739a:	e774      	b.n	8017286 <_dtoa_r+0x39e>
 801739c:	f8cd a020 	str.w	sl, [sp, #32]
 80173a0:	464f      	mov	r7, r9
 80173a2:	e791      	b.n	80172c8 <_dtoa_r+0x3e0>
 80173a4:	4b4d      	ldr	r3, [pc, #308]	; (80174dc <_dtoa_r+0x5f4>)
 80173a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80173aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80173ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d047      	beq.n	8017444 <_dtoa_r+0x55c>
 80173b4:	4602      	mov	r2, r0
 80173b6:	460b      	mov	r3, r1
 80173b8:	2000      	movs	r0, #0
 80173ba:	494e      	ldr	r1, [pc, #312]	; (80174f4 <_dtoa_r+0x60c>)
 80173bc:	f7f1 f97e 	bl	80086bc <__aeabi_ddiv>
 80173c0:	462a      	mov	r2, r5
 80173c2:	4633      	mov	r3, r6
 80173c4:	f7f0 fe98 	bl	80080f8 <__aeabi_dsub>
 80173c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80173cc:	465d      	mov	r5, fp
 80173ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173d2:	f7f1 faf9 	bl	80089c8 <__aeabi_d2iz>
 80173d6:	4606      	mov	r6, r0
 80173d8:	f7f0 ffdc 	bl	8008394 <__aeabi_i2d>
 80173dc:	4602      	mov	r2, r0
 80173de:	460b      	mov	r3, r1
 80173e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173e4:	f7f0 fe88 	bl	80080f8 <__aeabi_dsub>
 80173e8:	3630      	adds	r6, #48	; 0x30
 80173ea:	f805 6b01 	strb.w	r6, [r5], #1
 80173ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80173f2:	e9cd 0100 	strd	r0, r1, [sp]
 80173f6:	f7f1 faa9 	bl	800894c <__aeabi_dcmplt>
 80173fa:	2800      	cmp	r0, #0
 80173fc:	d163      	bne.n	80174c6 <_dtoa_r+0x5de>
 80173fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017402:	2000      	movs	r0, #0
 8017404:	4937      	ldr	r1, [pc, #220]	; (80174e4 <_dtoa_r+0x5fc>)
 8017406:	f7f0 fe77 	bl	80080f8 <__aeabi_dsub>
 801740a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801740e:	f7f1 fa9d 	bl	800894c <__aeabi_dcmplt>
 8017412:	2800      	cmp	r0, #0
 8017414:	f040 80b7 	bne.w	8017586 <_dtoa_r+0x69e>
 8017418:	eba5 030b 	sub.w	r3, r5, fp
 801741c:	429f      	cmp	r7, r3
 801741e:	f77f af7c 	ble.w	801731a <_dtoa_r+0x432>
 8017422:	2200      	movs	r2, #0
 8017424:	4b30      	ldr	r3, [pc, #192]	; (80174e8 <_dtoa_r+0x600>)
 8017426:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801742a:	f7f1 f81d 	bl	8008468 <__aeabi_dmul>
 801742e:	2200      	movs	r2, #0
 8017430:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017434:	4b2c      	ldr	r3, [pc, #176]	; (80174e8 <_dtoa_r+0x600>)
 8017436:	e9dd 0100 	ldrd	r0, r1, [sp]
 801743a:	f7f1 f815 	bl	8008468 <__aeabi_dmul>
 801743e:	e9cd 0100 	strd	r0, r1, [sp]
 8017442:	e7c4      	b.n	80173ce <_dtoa_r+0x4e6>
 8017444:	462a      	mov	r2, r5
 8017446:	4633      	mov	r3, r6
 8017448:	f7f1 f80e 	bl	8008468 <__aeabi_dmul>
 801744c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017450:	eb0b 0507 	add.w	r5, fp, r7
 8017454:	465e      	mov	r6, fp
 8017456:	e9dd 0100 	ldrd	r0, r1, [sp]
 801745a:	f7f1 fab5 	bl	80089c8 <__aeabi_d2iz>
 801745e:	4607      	mov	r7, r0
 8017460:	f7f0 ff98 	bl	8008394 <__aeabi_i2d>
 8017464:	3730      	adds	r7, #48	; 0x30
 8017466:	4602      	mov	r2, r0
 8017468:	460b      	mov	r3, r1
 801746a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801746e:	f7f0 fe43 	bl	80080f8 <__aeabi_dsub>
 8017472:	f806 7b01 	strb.w	r7, [r6], #1
 8017476:	42ae      	cmp	r6, r5
 8017478:	e9cd 0100 	strd	r0, r1, [sp]
 801747c:	f04f 0200 	mov.w	r2, #0
 8017480:	d126      	bne.n	80174d0 <_dtoa_r+0x5e8>
 8017482:	4b1c      	ldr	r3, [pc, #112]	; (80174f4 <_dtoa_r+0x60c>)
 8017484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017488:	f7f0 fe38 	bl	80080fc <__adddf3>
 801748c:	4602      	mov	r2, r0
 801748e:	460b      	mov	r3, r1
 8017490:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017494:	f7f1 fa78 	bl	8008988 <__aeabi_dcmpgt>
 8017498:	2800      	cmp	r0, #0
 801749a:	d174      	bne.n	8017586 <_dtoa_r+0x69e>
 801749c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80174a0:	2000      	movs	r0, #0
 80174a2:	4914      	ldr	r1, [pc, #80]	; (80174f4 <_dtoa_r+0x60c>)
 80174a4:	f7f0 fe28 	bl	80080f8 <__aeabi_dsub>
 80174a8:	4602      	mov	r2, r0
 80174aa:	460b      	mov	r3, r1
 80174ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80174b0:	f7f1 fa4c 	bl	800894c <__aeabi_dcmplt>
 80174b4:	2800      	cmp	r0, #0
 80174b6:	f43f af30 	beq.w	801731a <_dtoa_r+0x432>
 80174ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80174be:	2b30      	cmp	r3, #48	; 0x30
 80174c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80174c4:	d002      	beq.n	80174cc <_dtoa_r+0x5e4>
 80174c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80174ca:	e04a      	b.n	8017562 <_dtoa_r+0x67a>
 80174cc:	4615      	mov	r5, r2
 80174ce:	e7f4      	b.n	80174ba <_dtoa_r+0x5d2>
 80174d0:	4b05      	ldr	r3, [pc, #20]	; (80174e8 <_dtoa_r+0x600>)
 80174d2:	f7f0 ffc9 	bl	8008468 <__aeabi_dmul>
 80174d6:	e9cd 0100 	strd	r0, r1, [sp]
 80174da:	e7bc      	b.n	8017456 <_dtoa_r+0x56e>
 80174dc:	08018be0 	.word	0x08018be0
 80174e0:	08018bb8 	.word	0x08018bb8
 80174e4:	3ff00000 	.word	0x3ff00000
 80174e8:	40240000 	.word	0x40240000
 80174ec:	401c0000 	.word	0x401c0000
 80174f0:	40140000 	.word	0x40140000
 80174f4:	3fe00000 	.word	0x3fe00000
 80174f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80174fc:	465d      	mov	r5, fp
 80174fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017502:	4630      	mov	r0, r6
 8017504:	4639      	mov	r1, r7
 8017506:	f7f1 f8d9 	bl	80086bc <__aeabi_ddiv>
 801750a:	f7f1 fa5d 	bl	80089c8 <__aeabi_d2iz>
 801750e:	4680      	mov	r8, r0
 8017510:	f7f0 ff40 	bl	8008394 <__aeabi_i2d>
 8017514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017518:	f7f0 ffa6 	bl	8008468 <__aeabi_dmul>
 801751c:	4602      	mov	r2, r0
 801751e:	460b      	mov	r3, r1
 8017520:	4630      	mov	r0, r6
 8017522:	4639      	mov	r1, r7
 8017524:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017528:	f7f0 fde6 	bl	80080f8 <__aeabi_dsub>
 801752c:	f805 6b01 	strb.w	r6, [r5], #1
 8017530:	eba5 060b 	sub.w	r6, r5, fp
 8017534:	45b1      	cmp	r9, r6
 8017536:	4602      	mov	r2, r0
 8017538:	460b      	mov	r3, r1
 801753a:	d139      	bne.n	80175b0 <_dtoa_r+0x6c8>
 801753c:	f7f0 fdde 	bl	80080fc <__adddf3>
 8017540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017544:	4606      	mov	r6, r0
 8017546:	460f      	mov	r7, r1
 8017548:	f7f1 fa1e 	bl	8008988 <__aeabi_dcmpgt>
 801754c:	b9c8      	cbnz	r0, 8017582 <_dtoa_r+0x69a>
 801754e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017552:	4630      	mov	r0, r6
 8017554:	4639      	mov	r1, r7
 8017556:	f7f1 f9ef 	bl	8008938 <__aeabi_dcmpeq>
 801755a:	b110      	cbz	r0, 8017562 <_dtoa_r+0x67a>
 801755c:	f018 0f01 	tst.w	r8, #1
 8017560:	d10f      	bne.n	8017582 <_dtoa_r+0x69a>
 8017562:	9904      	ldr	r1, [sp, #16]
 8017564:	4620      	mov	r0, r4
 8017566:	f000 fc9f 	bl	8017ea8 <_Bfree>
 801756a:	2300      	movs	r3, #0
 801756c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801756e:	702b      	strb	r3, [r5, #0]
 8017570:	f10a 0301 	add.w	r3, sl, #1
 8017574:	6013      	str	r3, [r2, #0]
 8017576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017578:	2b00      	cmp	r3, #0
 801757a:	f000 8241 	beq.w	8017a00 <_dtoa_r+0xb18>
 801757e:	601d      	str	r5, [r3, #0]
 8017580:	e23e      	b.n	8017a00 <_dtoa_r+0xb18>
 8017582:	f8cd a020 	str.w	sl, [sp, #32]
 8017586:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801758a:	2a39      	cmp	r2, #57	; 0x39
 801758c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017590:	d108      	bne.n	80175a4 <_dtoa_r+0x6bc>
 8017592:	459b      	cmp	fp, r3
 8017594:	d10a      	bne.n	80175ac <_dtoa_r+0x6c4>
 8017596:	9b08      	ldr	r3, [sp, #32]
 8017598:	3301      	adds	r3, #1
 801759a:	9308      	str	r3, [sp, #32]
 801759c:	2330      	movs	r3, #48	; 0x30
 801759e:	f88b 3000 	strb.w	r3, [fp]
 80175a2:	465b      	mov	r3, fp
 80175a4:	781a      	ldrb	r2, [r3, #0]
 80175a6:	3201      	adds	r2, #1
 80175a8:	701a      	strb	r2, [r3, #0]
 80175aa:	e78c      	b.n	80174c6 <_dtoa_r+0x5de>
 80175ac:	461d      	mov	r5, r3
 80175ae:	e7ea      	b.n	8017586 <_dtoa_r+0x69e>
 80175b0:	2200      	movs	r2, #0
 80175b2:	4b9b      	ldr	r3, [pc, #620]	; (8017820 <_dtoa_r+0x938>)
 80175b4:	f7f0 ff58 	bl	8008468 <__aeabi_dmul>
 80175b8:	2200      	movs	r2, #0
 80175ba:	2300      	movs	r3, #0
 80175bc:	4606      	mov	r6, r0
 80175be:	460f      	mov	r7, r1
 80175c0:	f7f1 f9ba 	bl	8008938 <__aeabi_dcmpeq>
 80175c4:	2800      	cmp	r0, #0
 80175c6:	d09a      	beq.n	80174fe <_dtoa_r+0x616>
 80175c8:	e7cb      	b.n	8017562 <_dtoa_r+0x67a>
 80175ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80175cc:	2a00      	cmp	r2, #0
 80175ce:	f000 808b 	beq.w	80176e8 <_dtoa_r+0x800>
 80175d2:	9a06      	ldr	r2, [sp, #24]
 80175d4:	2a01      	cmp	r2, #1
 80175d6:	dc6e      	bgt.n	80176b6 <_dtoa_r+0x7ce>
 80175d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80175da:	2a00      	cmp	r2, #0
 80175dc:	d067      	beq.n	80176ae <_dtoa_r+0x7c6>
 80175de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80175e2:	9f07      	ldr	r7, [sp, #28]
 80175e4:	9d05      	ldr	r5, [sp, #20]
 80175e6:	9a05      	ldr	r2, [sp, #20]
 80175e8:	2101      	movs	r1, #1
 80175ea:	441a      	add	r2, r3
 80175ec:	4620      	mov	r0, r4
 80175ee:	9205      	str	r2, [sp, #20]
 80175f0:	4498      	add	r8, r3
 80175f2:	f000 fcf9 	bl	8017fe8 <__i2b>
 80175f6:	4606      	mov	r6, r0
 80175f8:	2d00      	cmp	r5, #0
 80175fa:	dd0c      	ble.n	8017616 <_dtoa_r+0x72e>
 80175fc:	f1b8 0f00 	cmp.w	r8, #0
 8017600:	dd09      	ble.n	8017616 <_dtoa_r+0x72e>
 8017602:	4545      	cmp	r5, r8
 8017604:	9a05      	ldr	r2, [sp, #20]
 8017606:	462b      	mov	r3, r5
 8017608:	bfa8      	it	ge
 801760a:	4643      	movge	r3, r8
 801760c:	1ad2      	subs	r2, r2, r3
 801760e:	9205      	str	r2, [sp, #20]
 8017610:	1aed      	subs	r5, r5, r3
 8017612:	eba8 0803 	sub.w	r8, r8, r3
 8017616:	9b07      	ldr	r3, [sp, #28]
 8017618:	b1eb      	cbz	r3, 8017656 <_dtoa_r+0x76e>
 801761a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801761c:	2b00      	cmp	r3, #0
 801761e:	d067      	beq.n	80176f0 <_dtoa_r+0x808>
 8017620:	b18f      	cbz	r7, 8017646 <_dtoa_r+0x75e>
 8017622:	4631      	mov	r1, r6
 8017624:	463a      	mov	r2, r7
 8017626:	4620      	mov	r0, r4
 8017628:	f000 fd7e 	bl	8018128 <__pow5mult>
 801762c:	9a04      	ldr	r2, [sp, #16]
 801762e:	4601      	mov	r1, r0
 8017630:	4606      	mov	r6, r0
 8017632:	4620      	mov	r0, r4
 8017634:	f000 fce1 	bl	8017ffa <__multiply>
 8017638:	9904      	ldr	r1, [sp, #16]
 801763a:	9008      	str	r0, [sp, #32]
 801763c:	4620      	mov	r0, r4
 801763e:	f000 fc33 	bl	8017ea8 <_Bfree>
 8017642:	9b08      	ldr	r3, [sp, #32]
 8017644:	9304      	str	r3, [sp, #16]
 8017646:	9b07      	ldr	r3, [sp, #28]
 8017648:	1bda      	subs	r2, r3, r7
 801764a:	d004      	beq.n	8017656 <_dtoa_r+0x76e>
 801764c:	9904      	ldr	r1, [sp, #16]
 801764e:	4620      	mov	r0, r4
 8017650:	f000 fd6a 	bl	8018128 <__pow5mult>
 8017654:	9004      	str	r0, [sp, #16]
 8017656:	2101      	movs	r1, #1
 8017658:	4620      	mov	r0, r4
 801765a:	f000 fcc5 	bl	8017fe8 <__i2b>
 801765e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017660:	4607      	mov	r7, r0
 8017662:	2b00      	cmp	r3, #0
 8017664:	f000 81d0 	beq.w	8017a08 <_dtoa_r+0xb20>
 8017668:	461a      	mov	r2, r3
 801766a:	4601      	mov	r1, r0
 801766c:	4620      	mov	r0, r4
 801766e:	f000 fd5b 	bl	8018128 <__pow5mult>
 8017672:	9b06      	ldr	r3, [sp, #24]
 8017674:	2b01      	cmp	r3, #1
 8017676:	4607      	mov	r7, r0
 8017678:	dc40      	bgt.n	80176fc <_dtoa_r+0x814>
 801767a:	9b00      	ldr	r3, [sp, #0]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d139      	bne.n	80176f4 <_dtoa_r+0x80c>
 8017680:	9b01      	ldr	r3, [sp, #4]
 8017682:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017686:	2b00      	cmp	r3, #0
 8017688:	d136      	bne.n	80176f8 <_dtoa_r+0x810>
 801768a:	9b01      	ldr	r3, [sp, #4]
 801768c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017690:	0d1b      	lsrs	r3, r3, #20
 8017692:	051b      	lsls	r3, r3, #20
 8017694:	b12b      	cbz	r3, 80176a2 <_dtoa_r+0x7ba>
 8017696:	9b05      	ldr	r3, [sp, #20]
 8017698:	3301      	adds	r3, #1
 801769a:	9305      	str	r3, [sp, #20]
 801769c:	f108 0801 	add.w	r8, r8, #1
 80176a0:	2301      	movs	r3, #1
 80176a2:	9307      	str	r3, [sp, #28]
 80176a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d12a      	bne.n	8017700 <_dtoa_r+0x818>
 80176aa:	2001      	movs	r0, #1
 80176ac:	e030      	b.n	8017710 <_dtoa_r+0x828>
 80176ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80176b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80176b4:	e795      	b.n	80175e2 <_dtoa_r+0x6fa>
 80176b6:	9b07      	ldr	r3, [sp, #28]
 80176b8:	f109 37ff 	add.w	r7, r9, #4294967295
 80176bc:	42bb      	cmp	r3, r7
 80176be:	bfbf      	itttt	lt
 80176c0:	9b07      	ldrlt	r3, [sp, #28]
 80176c2:	9707      	strlt	r7, [sp, #28]
 80176c4:	1afa      	sublt	r2, r7, r3
 80176c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80176c8:	bfbb      	ittet	lt
 80176ca:	189b      	addlt	r3, r3, r2
 80176cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80176ce:	1bdf      	subge	r7, r3, r7
 80176d0:	2700      	movlt	r7, #0
 80176d2:	f1b9 0f00 	cmp.w	r9, #0
 80176d6:	bfb5      	itete	lt
 80176d8:	9b05      	ldrlt	r3, [sp, #20]
 80176da:	9d05      	ldrge	r5, [sp, #20]
 80176dc:	eba3 0509 	sublt.w	r5, r3, r9
 80176e0:	464b      	movge	r3, r9
 80176e2:	bfb8      	it	lt
 80176e4:	2300      	movlt	r3, #0
 80176e6:	e77e      	b.n	80175e6 <_dtoa_r+0x6fe>
 80176e8:	9f07      	ldr	r7, [sp, #28]
 80176ea:	9d05      	ldr	r5, [sp, #20]
 80176ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80176ee:	e783      	b.n	80175f8 <_dtoa_r+0x710>
 80176f0:	9a07      	ldr	r2, [sp, #28]
 80176f2:	e7ab      	b.n	801764c <_dtoa_r+0x764>
 80176f4:	2300      	movs	r3, #0
 80176f6:	e7d4      	b.n	80176a2 <_dtoa_r+0x7ba>
 80176f8:	9b00      	ldr	r3, [sp, #0]
 80176fa:	e7d2      	b.n	80176a2 <_dtoa_r+0x7ba>
 80176fc:	2300      	movs	r3, #0
 80176fe:	9307      	str	r3, [sp, #28]
 8017700:	693b      	ldr	r3, [r7, #16]
 8017702:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017706:	6918      	ldr	r0, [r3, #16]
 8017708:	f000 fc20 	bl	8017f4c <__hi0bits>
 801770c:	f1c0 0020 	rsb	r0, r0, #32
 8017710:	4440      	add	r0, r8
 8017712:	f010 001f 	ands.w	r0, r0, #31
 8017716:	d047      	beq.n	80177a8 <_dtoa_r+0x8c0>
 8017718:	f1c0 0320 	rsb	r3, r0, #32
 801771c:	2b04      	cmp	r3, #4
 801771e:	dd3b      	ble.n	8017798 <_dtoa_r+0x8b0>
 8017720:	9b05      	ldr	r3, [sp, #20]
 8017722:	f1c0 001c 	rsb	r0, r0, #28
 8017726:	4403      	add	r3, r0
 8017728:	9305      	str	r3, [sp, #20]
 801772a:	4405      	add	r5, r0
 801772c:	4480      	add	r8, r0
 801772e:	9b05      	ldr	r3, [sp, #20]
 8017730:	2b00      	cmp	r3, #0
 8017732:	dd05      	ble.n	8017740 <_dtoa_r+0x858>
 8017734:	461a      	mov	r2, r3
 8017736:	9904      	ldr	r1, [sp, #16]
 8017738:	4620      	mov	r0, r4
 801773a:	f000 fd43 	bl	80181c4 <__lshift>
 801773e:	9004      	str	r0, [sp, #16]
 8017740:	f1b8 0f00 	cmp.w	r8, #0
 8017744:	dd05      	ble.n	8017752 <_dtoa_r+0x86a>
 8017746:	4639      	mov	r1, r7
 8017748:	4642      	mov	r2, r8
 801774a:	4620      	mov	r0, r4
 801774c:	f000 fd3a 	bl	80181c4 <__lshift>
 8017750:	4607      	mov	r7, r0
 8017752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017754:	b353      	cbz	r3, 80177ac <_dtoa_r+0x8c4>
 8017756:	4639      	mov	r1, r7
 8017758:	9804      	ldr	r0, [sp, #16]
 801775a:	f000 fd87 	bl	801826c <__mcmp>
 801775e:	2800      	cmp	r0, #0
 8017760:	da24      	bge.n	80177ac <_dtoa_r+0x8c4>
 8017762:	2300      	movs	r3, #0
 8017764:	220a      	movs	r2, #10
 8017766:	9904      	ldr	r1, [sp, #16]
 8017768:	4620      	mov	r0, r4
 801776a:	f000 fbb4 	bl	8017ed6 <__multadd>
 801776e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017770:	9004      	str	r0, [sp, #16]
 8017772:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017776:	2b00      	cmp	r3, #0
 8017778:	f000 814d 	beq.w	8017a16 <_dtoa_r+0xb2e>
 801777c:	2300      	movs	r3, #0
 801777e:	4631      	mov	r1, r6
 8017780:	220a      	movs	r2, #10
 8017782:	4620      	mov	r0, r4
 8017784:	f000 fba7 	bl	8017ed6 <__multadd>
 8017788:	9b02      	ldr	r3, [sp, #8]
 801778a:	2b00      	cmp	r3, #0
 801778c:	4606      	mov	r6, r0
 801778e:	dc4f      	bgt.n	8017830 <_dtoa_r+0x948>
 8017790:	9b06      	ldr	r3, [sp, #24]
 8017792:	2b02      	cmp	r3, #2
 8017794:	dd4c      	ble.n	8017830 <_dtoa_r+0x948>
 8017796:	e011      	b.n	80177bc <_dtoa_r+0x8d4>
 8017798:	d0c9      	beq.n	801772e <_dtoa_r+0x846>
 801779a:	9a05      	ldr	r2, [sp, #20]
 801779c:	331c      	adds	r3, #28
 801779e:	441a      	add	r2, r3
 80177a0:	9205      	str	r2, [sp, #20]
 80177a2:	441d      	add	r5, r3
 80177a4:	4498      	add	r8, r3
 80177a6:	e7c2      	b.n	801772e <_dtoa_r+0x846>
 80177a8:	4603      	mov	r3, r0
 80177aa:	e7f6      	b.n	801779a <_dtoa_r+0x8b2>
 80177ac:	f1b9 0f00 	cmp.w	r9, #0
 80177b0:	dc38      	bgt.n	8017824 <_dtoa_r+0x93c>
 80177b2:	9b06      	ldr	r3, [sp, #24]
 80177b4:	2b02      	cmp	r3, #2
 80177b6:	dd35      	ble.n	8017824 <_dtoa_r+0x93c>
 80177b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80177bc:	9b02      	ldr	r3, [sp, #8]
 80177be:	b963      	cbnz	r3, 80177da <_dtoa_r+0x8f2>
 80177c0:	4639      	mov	r1, r7
 80177c2:	2205      	movs	r2, #5
 80177c4:	4620      	mov	r0, r4
 80177c6:	f000 fb86 	bl	8017ed6 <__multadd>
 80177ca:	4601      	mov	r1, r0
 80177cc:	4607      	mov	r7, r0
 80177ce:	9804      	ldr	r0, [sp, #16]
 80177d0:	f000 fd4c 	bl	801826c <__mcmp>
 80177d4:	2800      	cmp	r0, #0
 80177d6:	f73f adcc 	bgt.w	8017372 <_dtoa_r+0x48a>
 80177da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177dc:	465d      	mov	r5, fp
 80177de:	ea6f 0a03 	mvn.w	sl, r3
 80177e2:	f04f 0900 	mov.w	r9, #0
 80177e6:	4639      	mov	r1, r7
 80177e8:	4620      	mov	r0, r4
 80177ea:	f000 fb5d 	bl	8017ea8 <_Bfree>
 80177ee:	2e00      	cmp	r6, #0
 80177f0:	f43f aeb7 	beq.w	8017562 <_dtoa_r+0x67a>
 80177f4:	f1b9 0f00 	cmp.w	r9, #0
 80177f8:	d005      	beq.n	8017806 <_dtoa_r+0x91e>
 80177fa:	45b1      	cmp	r9, r6
 80177fc:	d003      	beq.n	8017806 <_dtoa_r+0x91e>
 80177fe:	4649      	mov	r1, r9
 8017800:	4620      	mov	r0, r4
 8017802:	f000 fb51 	bl	8017ea8 <_Bfree>
 8017806:	4631      	mov	r1, r6
 8017808:	4620      	mov	r0, r4
 801780a:	f000 fb4d 	bl	8017ea8 <_Bfree>
 801780e:	e6a8      	b.n	8017562 <_dtoa_r+0x67a>
 8017810:	2700      	movs	r7, #0
 8017812:	463e      	mov	r6, r7
 8017814:	e7e1      	b.n	80177da <_dtoa_r+0x8f2>
 8017816:	f8dd a020 	ldr.w	sl, [sp, #32]
 801781a:	463e      	mov	r6, r7
 801781c:	e5a9      	b.n	8017372 <_dtoa_r+0x48a>
 801781e:	bf00      	nop
 8017820:	40240000 	.word	0x40240000
 8017824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017826:	f8cd 9008 	str.w	r9, [sp, #8]
 801782a:	2b00      	cmp	r3, #0
 801782c:	f000 80fa 	beq.w	8017a24 <_dtoa_r+0xb3c>
 8017830:	2d00      	cmp	r5, #0
 8017832:	dd05      	ble.n	8017840 <_dtoa_r+0x958>
 8017834:	4631      	mov	r1, r6
 8017836:	462a      	mov	r2, r5
 8017838:	4620      	mov	r0, r4
 801783a:	f000 fcc3 	bl	80181c4 <__lshift>
 801783e:	4606      	mov	r6, r0
 8017840:	9b07      	ldr	r3, [sp, #28]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d04c      	beq.n	80178e0 <_dtoa_r+0x9f8>
 8017846:	6871      	ldr	r1, [r6, #4]
 8017848:	4620      	mov	r0, r4
 801784a:	f000 faf9 	bl	8017e40 <_Balloc>
 801784e:	6932      	ldr	r2, [r6, #16]
 8017850:	3202      	adds	r2, #2
 8017852:	4605      	mov	r5, r0
 8017854:	0092      	lsls	r2, r2, #2
 8017856:	f106 010c 	add.w	r1, r6, #12
 801785a:	300c      	adds	r0, #12
 801785c:	f7fe fd0a 	bl	8016274 <memcpy>
 8017860:	2201      	movs	r2, #1
 8017862:	4629      	mov	r1, r5
 8017864:	4620      	mov	r0, r4
 8017866:	f000 fcad 	bl	80181c4 <__lshift>
 801786a:	9b00      	ldr	r3, [sp, #0]
 801786c:	f8cd b014 	str.w	fp, [sp, #20]
 8017870:	f003 0301 	and.w	r3, r3, #1
 8017874:	46b1      	mov	r9, r6
 8017876:	9307      	str	r3, [sp, #28]
 8017878:	4606      	mov	r6, r0
 801787a:	4639      	mov	r1, r7
 801787c:	9804      	ldr	r0, [sp, #16]
 801787e:	f7ff faa5 	bl	8016dcc <quorem>
 8017882:	4649      	mov	r1, r9
 8017884:	4605      	mov	r5, r0
 8017886:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801788a:	9804      	ldr	r0, [sp, #16]
 801788c:	f000 fcee 	bl	801826c <__mcmp>
 8017890:	4632      	mov	r2, r6
 8017892:	9000      	str	r0, [sp, #0]
 8017894:	4639      	mov	r1, r7
 8017896:	4620      	mov	r0, r4
 8017898:	f000 fd02 	bl	80182a0 <__mdiff>
 801789c:	68c3      	ldr	r3, [r0, #12]
 801789e:	4602      	mov	r2, r0
 80178a0:	bb03      	cbnz	r3, 80178e4 <_dtoa_r+0x9fc>
 80178a2:	4601      	mov	r1, r0
 80178a4:	9008      	str	r0, [sp, #32]
 80178a6:	9804      	ldr	r0, [sp, #16]
 80178a8:	f000 fce0 	bl	801826c <__mcmp>
 80178ac:	9a08      	ldr	r2, [sp, #32]
 80178ae:	4603      	mov	r3, r0
 80178b0:	4611      	mov	r1, r2
 80178b2:	4620      	mov	r0, r4
 80178b4:	9308      	str	r3, [sp, #32]
 80178b6:	f000 faf7 	bl	8017ea8 <_Bfree>
 80178ba:	9b08      	ldr	r3, [sp, #32]
 80178bc:	b9a3      	cbnz	r3, 80178e8 <_dtoa_r+0xa00>
 80178be:	9a06      	ldr	r2, [sp, #24]
 80178c0:	b992      	cbnz	r2, 80178e8 <_dtoa_r+0xa00>
 80178c2:	9a07      	ldr	r2, [sp, #28]
 80178c4:	b982      	cbnz	r2, 80178e8 <_dtoa_r+0xa00>
 80178c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80178ca:	d029      	beq.n	8017920 <_dtoa_r+0xa38>
 80178cc:	9b00      	ldr	r3, [sp, #0]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	dd01      	ble.n	80178d6 <_dtoa_r+0x9ee>
 80178d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80178d6:	9b05      	ldr	r3, [sp, #20]
 80178d8:	1c5d      	adds	r5, r3, #1
 80178da:	f883 8000 	strb.w	r8, [r3]
 80178de:	e782      	b.n	80177e6 <_dtoa_r+0x8fe>
 80178e0:	4630      	mov	r0, r6
 80178e2:	e7c2      	b.n	801786a <_dtoa_r+0x982>
 80178e4:	2301      	movs	r3, #1
 80178e6:	e7e3      	b.n	80178b0 <_dtoa_r+0x9c8>
 80178e8:	9a00      	ldr	r2, [sp, #0]
 80178ea:	2a00      	cmp	r2, #0
 80178ec:	db04      	blt.n	80178f8 <_dtoa_r+0xa10>
 80178ee:	d125      	bne.n	801793c <_dtoa_r+0xa54>
 80178f0:	9a06      	ldr	r2, [sp, #24]
 80178f2:	bb1a      	cbnz	r2, 801793c <_dtoa_r+0xa54>
 80178f4:	9a07      	ldr	r2, [sp, #28]
 80178f6:	bb0a      	cbnz	r2, 801793c <_dtoa_r+0xa54>
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	ddec      	ble.n	80178d6 <_dtoa_r+0x9ee>
 80178fc:	2201      	movs	r2, #1
 80178fe:	9904      	ldr	r1, [sp, #16]
 8017900:	4620      	mov	r0, r4
 8017902:	f000 fc5f 	bl	80181c4 <__lshift>
 8017906:	4639      	mov	r1, r7
 8017908:	9004      	str	r0, [sp, #16]
 801790a:	f000 fcaf 	bl	801826c <__mcmp>
 801790e:	2800      	cmp	r0, #0
 8017910:	dc03      	bgt.n	801791a <_dtoa_r+0xa32>
 8017912:	d1e0      	bne.n	80178d6 <_dtoa_r+0x9ee>
 8017914:	f018 0f01 	tst.w	r8, #1
 8017918:	d0dd      	beq.n	80178d6 <_dtoa_r+0x9ee>
 801791a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801791e:	d1d8      	bne.n	80178d2 <_dtoa_r+0x9ea>
 8017920:	9b05      	ldr	r3, [sp, #20]
 8017922:	9a05      	ldr	r2, [sp, #20]
 8017924:	1c5d      	adds	r5, r3, #1
 8017926:	2339      	movs	r3, #57	; 0x39
 8017928:	7013      	strb	r3, [r2, #0]
 801792a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801792e:	2b39      	cmp	r3, #57	; 0x39
 8017930:	f105 32ff 	add.w	r2, r5, #4294967295
 8017934:	d04f      	beq.n	80179d6 <_dtoa_r+0xaee>
 8017936:	3301      	adds	r3, #1
 8017938:	7013      	strb	r3, [r2, #0]
 801793a:	e754      	b.n	80177e6 <_dtoa_r+0x8fe>
 801793c:	9a05      	ldr	r2, [sp, #20]
 801793e:	2b00      	cmp	r3, #0
 8017940:	f102 0501 	add.w	r5, r2, #1
 8017944:	dd06      	ble.n	8017954 <_dtoa_r+0xa6c>
 8017946:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801794a:	d0e9      	beq.n	8017920 <_dtoa_r+0xa38>
 801794c:	f108 0801 	add.w	r8, r8, #1
 8017950:	9b05      	ldr	r3, [sp, #20]
 8017952:	e7c2      	b.n	80178da <_dtoa_r+0x9f2>
 8017954:	9a02      	ldr	r2, [sp, #8]
 8017956:	f805 8c01 	strb.w	r8, [r5, #-1]
 801795a:	eba5 030b 	sub.w	r3, r5, fp
 801795e:	4293      	cmp	r3, r2
 8017960:	d021      	beq.n	80179a6 <_dtoa_r+0xabe>
 8017962:	2300      	movs	r3, #0
 8017964:	220a      	movs	r2, #10
 8017966:	9904      	ldr	r1, [sp, #16]
 8017968:	4620      	mov	r0, r4
 801796a:	f000 fab4 	bl	8017ed6 <__multadd>
 801796e:	45b1      	cmp	r9, r6
 8017970:	9004      	str	r0, [sp, #16]
 8017972:	f04f 0300 	mov.w	r3, #0
 8017976:	f04f 020a 	mov.w	r2, #10
 801797a:	4649      	mov	r1, r9
 801797c:	4620      	mov	r0, r4
 801797e:	d105      	bne.n	801798c <_dtoa_r+0xaa4>
 8017980:	f000 faa9 	bl	8017ed6 <__multadd>
 8017984:	4681      	mov	r9, r0
 8017986:	4606      	mov	r6, r0
 8017988:	9505      	str	r5, [sp, #20]
 801798a:	e776      	b.n	801787a <_dtoa_r+0x992>
 801798c:	f000 faa3 	bl	8017ed6 <__multadd>
 8017990:	4631      	mov	r1, r6
 8017992:	4681      	mov	r9, r0
 8017994:	2300      	movs	r3, #0
 8017996:	220a      	movs	r2, #10
 8017998:	4620      	mov	r0, r4
 801799a:	f000 fa9c 	bl	8017ed6 <__multadd>
 801799e:	4606      	mov	r6, r0
 80179a0:	e7f2      	b.n	8017988 <_dtoa_r+0xaa0>
 80179a2:	f04f 0900 	mov.w	r9, #0
 80179a6:	2201      	movs	r2, #1
 80179a8:	9904      	ldr	r1, [sp, #16]
 80179aa:	4620      	mov	r0, r4
 80179ac:	f000 fc0a 	bl	80181c4 <__lshift>
 80179b0:	4639      	mov	r1, r7
 80179b2:	9004      	str	r0, [sp, #16]
 80179b4:	f000 fc5a 	bl	801826c <__mcmp>
 80179b8:	2800      	cmp	r0, #0
 80179ba:	dcb6      	bgt.n	801792a <_dtoa_r+0xa42>
 80179bc:	d102      	bne.n	80179c4 <_dtoa_r+0xadc>
 80179be:	f018 0f01 	tst.w	r8, #1
 80179c2:	d1b2      	bne.n	801792a <_dtoa_r+0xa42>
 80179c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80179c8:	2b30      	cmp	r3, #48	; 0x30
 80179ca:	f105 32ff 	add.w	r2, r5, #4294967295
 80179ce:	f47f af0a 	bne.w	80177e6 <_dtoa_r+0x8fe>
 80179d2:	4615      	mov	r5, r2
 80179d4:	e7f6      	b.n	80179c4 <_dtoa_r+0xadc>
 80179d6:	4593      	cmp	fp, r2
 80179d8:	d105      	bne.n	80179e6 <_dtoa_r+0xafe>
 80179da:	2331      	movs	r3, #49	; 0x31
 80179dc:	f10a 0a01 	add.w	sl, sl, #1
 80179e0:	f88b 3000 	strb.w	r3, [fp]
 80179e4:	e6ff      	b.n	80177e6 <_dtoa_r+0x8fe>
 80179e6:	4615      	mov	r5, r2
 80179e8:	e79f      	b.n	801792a <_dtoa_r+0xa42>
 80179ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017a50 <_dtoa_r+0xb68>
 80179ee:	e007      	b.n	8017a00 <_dtoa_r+0xb18>
 80179f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80179f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017a54 <_dtoa_r+0xb6c>
 80179f6:	b11b      	cbz	r3, 8017a00 <_dtoa_r+0xb18>
 80179f8:	f10b 0308 	add.w	r3, fp, #8
 80179fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80179fe:	6013      	str	r3, [r2, #0]
 8017a00:	4658      	mov	r0, fp
 8017a02:	b017      	add	sp, #92	; 0x5c
 8017a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a08:	9b06      	ldr	r3, [sp, #24]
 8017a0a:	2b01      	cmp	r3, #1
 8017a0c:	f77f ae35 	ble.w	801767a <_dtoa_r+0x792>
 8017a10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a12:	9307      	str	r3, [sp, #28]
 8017a14:	e649      	b.n	80176aa <_dtoa_r+0x7c2>
 8017a16:	9b02      	ldr	r3, [sp, #8]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	dc03      	bgt.n	8017a24 <_dtoa_r+0xb3c>
 8017a1c:	9b06      	ldr	r3, [sp, #24]
 8017a1e:	2b02      	cmp	r3, #2
 8017a20:	f73f aecc 	bgt.w	80177bc <_dtoa_r+0x8d4>
 8017a24:	465d      	mov	r5, fp
 8017a26:	4639      	mov	r1, r7
 8017a28:	9804      	ldr	r0, [sp, #16]
 8017a2a:	f7ff f9cf 	bl	8016dcc <quorem>
 8017a2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017a32:	f805 8b01 	strb.w	r8, [r5], #1
 8017a36:	9a02      	ldr	r2, [sp, #8]
 8017a38:	eba5 030b 	sub.w	r3, r5, fp
 8017a3c:	429a      	cmp	r2, r3
 8017a3e:	ddb0      	ble.n	80179a2 <_dtoa_r+0xaba>
 8017a40:	2300      	movs	r3, #0
 8017a42:	220a      	movs	r2, #10
 8017a44:	9904      	ldr	r1, [sp, #16]
 8017a46:	4620      	mov	r0, r4
 8017a48:	f000 fa45 	bl	8017ed6 <__multadd>
 8017a4c:	9004      	str	r0, [sp, #16]
 8017a4e:	e7ea      	b.n	8017a26 <_dtoa_r+0xb3e>
 8017a50:	08018b24 	.word	0x08018b24
 8017a54:	08018b48 	.word	0x08018b48

08017a58 <__sflush_r>:
 8017a58:	898a      	ldrh	r2, [r1, #12]
 8017a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a5e:	4605      	mov	r5, r0
 8017a60:	0710      	lsls	r0, r2, #28
 8017a62:	460c      	mov	r4, r1
 8017a64:	d458      	bmi.n	8017b18 <__sflush_r+0xc0>
 8017a66:	684b      	ldr	r3, [r1, #4]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	dc05      	bgt.n	8017a78 <__sflush_r+0x20>
 8017a6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	dc02      	bgt.n	8017a78 <__sflush_r+0x20>
 8017a72:	2000      	movs	r0, #0
 8017a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a7a:	2e00      	cmp	r6, #0
 8017a7c:	d0f9      	beq.n	8017a72 <__sflush_r+0x1a>
 8017a7e:	2300      	movs	r3, #0
 8017a80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017a84:	682f      	ldr	r7, [r5, #0]
 8017a86:	6a21      	ldr	r1, [r4, #32]
 8017a88:	602b      	str	r3, [r5, #0]
 8017a8a:	d032      	beq.n	8017af2 <__sflush_r+0x9a>
 8017a8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017a8e:	89a3      	ldrh	r3, [r4, #12]
 8017a90:	075a      	lsls	r2, r3, #29
 8017a92:	d505      	bpl.n	8017aa0 <__sflush_r+0x48>
 8017a94:	6863      	ldr	r3, [r4, #4]
 8017a96:	1ac0      	subs	r0, r0, r3
 8017a98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a9a:	b10b      	cbz	r3, 8017aa0 <__sflush_r+0x48>
 8017a9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017a9e:	1ac0      	subs	r0, r0, r3
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	4602      	mov	r2, r0
 8017aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017aa6:	6a21      	ldr	r1, [r4, #32]
 8017aa8:	4628      	mov	r0, r5
 8017aaa:	47b0      	blx	r6
 8017aac:	1c43      	adds	r3, r0, #1
 8017aae:	89a3      	ldrh	r3, [r4, #12]
 8017ab0:	d106      	bne.n	8017ac0 <__sflush_r+0x68>
 8017ab2:	6829      	ldr	r1, [r5, #0]
 8017ab4:	291d      	cmp	r1, #29
 8017ab6:	d848      	bhi.n	8017b4a <__sflush_r+0xf2>
 8017ab8:	4a29      	ldr	r2, [pc, #164]	; (8017b60 <__sflush_r+0x108>)
 8017aba:	40ca      	lsrs	r2, r1
 8017abc:	07d6      	lsls	r6, r2, #31
 8017abe:	d544      	bpl.n	8017b4a <__sflush_r+0xf2>
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	6062      	str	r2, [r4, #4]
 8017ac4:	04d9      	lsls	r1, r3, #19
 8017ac6:	6922      	ldr	r2, [r4, #16]
 8017ac8:	6022      	str	r2, [r4, #0]
 8017aca:	d504      	bpl.n	8017ad6 <__sflush_r+0x7e>
 8017acc:	1c42      	adds	r2, r0, #1
 8017ace:	d101      	bne.n	8017ad4 <__sflush_r+0x7c>
 8017ad0:	682b      	ldr	r3, [r5, #0]
 8017ad2:	b903      	cbnz	r3, 8017ad6 <__sflush_r+0x7e>
 8017ad4:	6560      	str	r0, [r4, #84]	; 0x54
 8017ad6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017ad8:	602f      	str	r7, [r5, #0]
 8017ada:	2900      	cmp	r1, #0
 8017adc:	d0c9      	beq.n	8017a72 <__sflush_r+0x1a>
 8017ade:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ae2:	4299      	cmp	r1, r3
 8017ae4:	d002      	beq.n	8017aec <__sflush_r+0x94>
 8017ae6:	4628      	mov	r0, r5
 8017ae8:	f000 fc94 	bl	8018414 <_free_r>
 8017aec:	2000      	movs	r0, #0
 8017aee:	6360      	str	r0, [r4, #52]	; 0x34
 8017af0:	e7c0      	b.n	8017a74 <__sflush_r+0x1c>
 8017af2:	2301      	movs	r3, #1
 8017af4:	4628      	mov	r0, r5
 8017af6:	47b0      	blx	r6
 8017af8:	1c41      	adds	r1, r0, #1
 8017afa:	d1c8      	bne.n	8017a8e <__sflush_r+0x36>
 8017afc:	682b      	ldr	r3, [r5, #0]
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d0c5      	beq.n	8017a8e <__sflush_r+0x36>
 8017b02:	2b1d      	cmp	r3, #29
 8017b04:	d001      	beq.n	8017b0a <__sflush_r+0xb2>
 8017b06:	2b16      	cmp	r3, #22
 8017b08:	d101      	bne.n	8017b0e <__sflush_r+0xb6>
 8017b0a:	602f      	str	r7, [r5, #0]
 8017b0c:	e7b1      	b.n	8017a72 <__sflush_r+0x1a>
 8017b0e:	89a3      	ldrh	r3, [r4, #12]
 8017b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b14:	81a3      	strh	r3, [r4, #12]
 8017b16:	e7ad      	b.n	8017a74 <__sflush_r+0x1c>
 8017b18:	690f      	ldr	r7, [r1, #16]
 8017b1a:	2f00      	cmp	r7, #0
 8017b1c:	d0a9      	beq.n	8017a72 <__sflush_r+0x1a>
 8017b1e:	0793      	lsls	r3, r2, #30
 8017b20:	680e      	ldr	r6, [r1, #0]
 8017b22:	bf08      	it	eq
 8017b24:	694b      	ldreq	r3, [r1, #20]
 8017b26:	600f      	str	r7, [r1, #0]
 8017b28:	bf18      	it	ne
 8017b2a:	2300      	movne	r3, #0
 8017b2c:	eba6 0807 	sub.w	r8, r6, r7
 8017b30:	608b      	str	r3, [r1, #8]
 8017b32:	f1b8 0f00 	cmp.w	r8, #0
 8017b36:	dd9c      	ble.n	8017a72 <__sflush_r+0x1a>
 8017b38:	4643      	mov	r3, r8
 8017b3a:	463a      	mov	r2, r7
 8017b3c:	6a21      	ldr	r1, [r4, #32]
 8017b3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017b40:	4628      	mov	r0, r5
 8017b42:	47b0      	blx	r6
 8017b44:	2800      	cmp	r0, #0
 8017b46:	dc06      	bgt.n	8017b56 <__sflush_r+0xfe>
 8017b48:	89a3      	ldrh	r3, [r4, #12]
 8017b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b4e:	81a3      	strh	r3, [r4, #12]
 8017b50:	f04f 30ff 	mov.w	r0, #4294967295
 8017b54:	e78e      	b.n	8017a74 <__sflush_r+0x1c>
 8017b56:	4407      	add	r7, r0
 8017b58:	eba8 0800 	sub.w	r8, r8, r0
 8017b5c:	e7e9      	b.n	8017b32 <__sflush_r+0xda>
 8017b5e:	bf00      	nop
 8017b60:	20400001 	.word	0x20400001

08017b64 <_fflush_r>:
 8017b64:	b538      	push	{r3, r4, r5, lr}
 8017b66:	690b      	ldr	r3, [r1, #16]
 8017b68:	4605      	mov	r5, r0
 8017b6a:	460c      	mov	r4, r1
 8017b6c:	b1db      	cbz	r3, 8017ba6 <_fflush_r+0x42>
 8017b6e:	b118      	cbz	r0, 8017b78 <_fflush_r+0x14>
 8017b70:	6983      	ldr	r3, [r0, #24]
 8017b72:	b90b      	cbnz	r3, 8017b78 <_fflush_r+0x14>
 8017b74:	f000 f860 	bl	8017c38 <__sinit>
 8017b78:	4b0c      	ldr	r3, [pc, #48]	; (8017bac <_fflush_r+0x48>)
 8017b7a:	429c      	cmp	r4, r3
 8017b7c:	d109      	bne.n	8017b92 <_fflush_r+0x2e>
 8017b7e:	686c      	ldr	r4, [r5, #4]
 8017b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b84:	b17b      	cbz	r3, 8017ba6 <_fflush_r+0x42>
 8017b86:	4621      	mov	r1, r4
 8017b88:	4628      	mov	r0, r5
 8017b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b8e:	f7ff bf63 	b.w	8017a58 <__sflush_r>
 8017b92:	4b07      	ldr	r3, [pc, #28]	; (8017bb0 <_fflush_r+0x4c>)
 8017b94:	429c      	cmp	r4, r3
 8017b96:	d101      	bne.n	8017b9c <_fflush_r+0x38>
 8017b98:	68ac      	ldr	r4, [r5, #8]
 8017b9a:	e7f1      	b.n	8017b80 <_fflush_r+0x1c>
 8017b9c:	4b05      	ldr	r3, [pc, #20]	; (8017bb4 <_fflush_r+0x50>)
 8017b9e:	429c      	cmp	r4, r3
 8017ba0:	bf08      	it	eq
 8017ba2:	68ec      	ldreq	r4, [r5, #12]
 8017ba4:	e7ec      	b.n	8017b80 <_fflush_r+0x1c>
 8017ba6:	2000      	movs	r0, #0
 8017ba8:	bd38      	pop	{r3, r4, r5, pc}
 8017baa:	bf00      	nop
 8017bac:	08018b78 	.word	0x08018b78
 8017bb0:	08018b98 	.word	0x08018b98
 8017bb4:	08018b58 	.word	0x08018b58

08017bb8 <std>:
 8017bb8:	2300      	movs	r3, #0
 8017bba:	b510      	push	{r4, lr}
 8017bbc:	4604      	mov	r4, r0
 8017bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8017bc2:	6083      	str	r3, [r0, #8]
 8017bc4:	8181      	strh	r1, [r0, #12]
 8017bc6:	6643      	str	r3, [r0, #100]	; 0x64
 8017bc8:	81c2      	strh	r2, [r0, #14]
 8017bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017bce:	6183      	str	r3, [r0, #24]
 8017bd0:	4619      	mov	r1, r3
 8017bd2:	2208      	movs	r2, #8
 8017bd4:	305c      	adds	r0, #92	; 0x5c
 8017bd6:	f7fe fb58 	bl	801628a <memset>
 8017bda:	4b05      	ldr	r3, [pc, #20]	; (8017bf0 <std+0x38>)
 8017bdc:	6263      	str	r3, [r4, #36]	; 0x24
 8017bde:	4b05      	ldr	r3, [pc, #20]	; (8017bf4 <std+0x3c>)
 8017be0:	62a3      	str	r3, [r4, #40]	; 0x28
 8017be2:	4b05      	ldr	r3, [pc, #20]	; (8017bf8 <std+0x40>)
 8017be4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017be6:	4b05      	ldr	r3, [pc, #20]	; (8017bfc <std+0x44>)
 8017be8:	6224      	str	r4, [r4, #32]
 8017bea:	6323      	str	r3, [r4, #48]	; 0x30
 8017bec:	bd10      	pop	{r4, pc}
 8017bee:	bf00      	nop
 8017bf0:	08018805 	.word	0x08018805
 8017bf4:	08018827 	.word	0x08018827
 8017bf8:	0801885f 	.word	0x0801885f
 8017bfc:	08018883 	.word	0x08018883

08017c00 <_cleanup_r>:
 8017c00:	4901      	ldr	r1, [pc, #4]	; (8017c08 <_cleanup_r+0x8>)
 8017c02:	f000 b885 	b.w	8017d10 <_fwalk_reent>
 8017c06:	bf00      	nop
 8017c08:	08017b65 	.word	0x08017b65

08017c0c <__sfmoreglue>:
 8017c0c:	b570      	push	{r4, r5, r6, lr}
 8017c0e:	1e4a      	subs	r2, r1, #1
 8017c10:	2568      	movs	r5, #104	; 0x68
 8017c12:	4355      	muls	r5, r2
 8017c14:	460e      	mov	r6, r1
 8017c16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017c1a:	f000 fc49 	bl	80184b0 <_malloc_r>
 8017c1e:	4604      	mov	r4, r0
 8017c20:	b140      	cbz	r0, 8017c34 <__sfmoreglue+0x28>
 8017c22:	2100      	movs	r1, #0
 8017c24:	e9c0 1600 	strd	r1, r6, [r0]
 8017c28:	300c      	adds	r0, #12
 8017c2a:	60a0      	str	r0, [r4, #8]
 8017c2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017c30:	f7fe fb2b 	bl	801628a <memset>
 8017c34:	4620      	mov	r0, r4
 8017c36:	bd70      	pop	{r4, r5, r6, pc}

08017c38 <__sinit>:
 8017c38:	6983      	ldr	r3, [r0, #24]
 8017c3a:	b510      	push	{r4, lr}
 8017c3c:	4604      	mov	r4, r0
 8017c3e:	bb33      	cbnz	r3, 8017c8e <__sinit+0x56>
 8017c40:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017c44:	6503      	str	r3, [r0, #80]	; 0x50
 8017c46:	4b12      	ldr	r3, [pc, #72]	; (8017c90 <__sinit+0x58>)
 8017c48:	4a12      	ldr	r2, [pc, #72]	; (8017c94 <__sinit+0x5c>)
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	6282      	str	r2, [r0, #40]	; 0x28
 8017c4e:	4298      	cmp	r0, r3
 8017c50:	bf04      	itt	eq
 8017c52:	2301      	moveq	r3, #1
 8017c54:	6183      	streq	r3, [r0, #24]
 8017c56:	f000 f81f 	bl	8017c98 <__sfp>
 8017c5a:	6060      	str	r0, [r4, #4]
 8017c5c:	4620      	mov	r0, r4
 8017c5e:	f000 f81b 	bl	8017c98 <__sfp>
 8017c62:	60a0      	str	r0, [r4, #8]
 8017c64:	4620      	mov	r0, r4
 8017c66:	f000 f817 	bl	8017c98 <__sfp>
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	60e0      	str	r0, [r4, #12]
 8017c6e:	2104      	movs	r1, #4
 8017c70:	6860      	ldr	r0, [r4, #4]
 8017c72:	f7ff ffa1 	bl	8017bb8 <std>
 8017c76:	2201      	movs	r2, #1
 8017c78:	2109      	movs	r1, #9
 8017c7a:	68a0      	ldr	r0, [r4, #8]
 8017c7c:	f7ff ff9c 	bl	8017bb8 <std>
 8017c80:	2202      	movs	r2, #2
 8017c82:	2112      	movs	r1, #18
 8017c84:	68e0      	ldr	r0, [r4, #12]
 8017c86:	f7ff ff97 	bl	8017bb8 <std>
 8017c8a:	2301      	movs	r3, #1
 8017c8c:	61a3      	str	r3, [r4, #24]
 8017c8e:	bd10      	pop	{r4, pc}
 8017c90:	08018b10 	.word	0x08018b10
 8017c94:	08017c01 	.word	0x08017c01

08017c98 <__sfp>:
 8017c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c9a:	4b1b      	ldr	r3, [pc, #108]	; (8017d08 <__sfp+0x70>)
 8017c9c:	681e      	ldr	r6, [r3, #0]
 8017c9e:	69b3      	ldr	r3, [r6, #24]
 8017ca0:	4607      	mov	r7, r0
 8017ca2:	b913      	cbnz	r3, 8017caa <__sfp+0x12>
 8017ca4:	4630      	mov	r0, r6
 8017ca6:	f7ff ffc7 	bl	8017c38 <__sinit>
 8017caa:	3648      	adds	r6, #72	; 0x48
 8017cac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017cb0:	3b01      	subs	r3, #1
 8017cb2:	d503      	bpl.n	8017cbc <__sfp+0x24>
 8017cb4:	6833      	ldr	r3, [r6, #0]
 8017cb6:	b133      	cbz	r3, 8017cc6 <__sfp+0x2e>
 8017cb8:	6836      	ldr	r6, [r6, #0]
 8017cba:	e7f7      	b.n	8017cac <__sfp+0x14>
 8017cbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017cc0:	b16d      	cbz	r5, 8017cde <__sfp+0x46>
 8017cc2:	3468      	adds	r4, #104	; 0x68
 8017cc4:	e7f4      	b.n	8017cb0 <__sfp+0x18>
 8017cc6:	2104      	movs	r1, #4
 8017cc8:	4638      	mov	r0, r7
 8017cca:	f7ff ff9f 	bl	8017c0c <__sfmoreglue>
 8017cce:	6030      	str	r0, [r6, #0]
 8017cd0:	2800      	cmp	r0, #0
 8017cd2:	d1f1      	bne.n	8017cb8 <__sfp+0x20>
 8017cd4:	230c      	movs	r3, #12
 8017cd6:	603b      	str	r3, [r7, #0]
 8017cd8:	4604      	mov	r4, r0
 8017cda:	4620      	mov	r0, r4
 8017cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cde:	4b0b      	ldr	r3, [pc, #44]	; (8017d0c <__sfp+0x74>)
 8017ce0:	6665      	str	r5, [r4, #100]	; 0x64
 8017ce2:	e9c4 5500 	strd	r5, r5, [r4]
 8017ce6:	60a5      	str	r5, [r4, #8]
 8017ce8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017cec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017cf0:	2208      	movs	r2, #8
 8017cf2:	4629      	mov	r1, r5
 8017cf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017cf8:	f7fe fac7 	bl	801628a <memset>
 8017cfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017d00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017d04:	e7e9      	b.n	8017cda <__sfp+0x42>
 8017d06:	bf00      	nop
 8017d08:	08018b10 	.word	0x08018b10
 8017d0c:	ffff0001 	.word	0xffff0001

08017d10 <_fwalk_reent>:
 8017d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d14:	4680      	mov	r8, r0
 8017d16:	4689      	mov	r9, r1
 8017d18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017d1c:	2600      	movs	r6, #0
 8017d1e:	b914      	cbnz	r4, 8017d26 <_fwalk_reent+0x16>
 8017d20:	4630      	mov	r0, r6
 8017d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d26:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017d2a:	3f01      	subs	r7, #1
 8017d2c:	d501      	bpl.n	8017d32 <_fwalk_reent+0x22>
 8017d2e:	6824      	ldr	r4, [r4, #0]
 8017d30:	e7f5      	b.n	8017d1e <_fwalk_reent+0xe>
 8017d32:	89ab      	ldrh	r3, [r5, #12]
 8017d34:	2b01      	cmp	r3, #1
 8017d36:	d907      	bls.n	8017d48 <_fwalk_reent+0x38>
 8017d38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017d3c:	3301      	adds	r3, #1
 8017d3e:	d003      	beq.n	8017d48 <_fwalk_reent+0x38>
 8017d40:	4629      	mov	r1, r5
 8017d42:	4640      	mov	r0, r8
 8017d44:	47c8      	blx	r9
 8017d46:	4306      	orrs	r6, r0
 8017d48:	3568      	adds	r5, #104	; 0x68
 8017d4a:	e7ee      	b.n	8017d2a <_fwalk_reent+0x1a>

08017d4c <_localeconv_r>:
 8017d4c:	4b04      	ldr	r3, [pc, #16]	; (8017d60 <_localeconv_r+0x14>)
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	6a18      	ldr	r0, [r3, #32]
 8017d52:	4b04      	ldr	r3, [pc, #16]	; (8017d64 <_localeconv_r+0x18>)
 8017d54:	2800      	cmp	r0, #0
 8017d56:	bf08      	it	eq
 8017d58:	4618      	moveq	r0, r3
 8017d5a:	30f0      	adds	r0, #240	; 0xf0
 8017d5c:	4770      	bx	lr
 8017d5e:	bf00      	nop
 8017d60:	20000080 	.word	0x20000080
 8017d64:	200000e4 	.word	0x200000e4

08017d68 <__swhatbuf_r>:
 8017d68:	b570      	push	{r4, r5, r6, lr}
 8017d6a:	460e      	mov	r6, r1
 8017d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d70:	2900      	cmp	r1, #0
 8017d72:	b096      	sub	sp, #88	; 0x58
 8017d74:	4614      	mov	r4, r2
 8017d76:	461d      	mov	r5, r3
 8017d78:	da07      	bge.n	8017d8a <__swhatbuf_r+0x22>
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	602b      	str	r3, [r5, #0]
 8017d7e:	89b3      	ldrh	r3, [r6, #12]
 8017d80:	061a      	lsls	r2, r3, #24
 8017d82:	d410      	bmi.n	8017da6 <__swhatbuf_r+0x3e>
 8017d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d88:	e00e      	b.n	8017da8 <__swhatbuf_r+0x40>
 8017d8a:	466a      	mov	r2, sp
 8017d8c:	f000 fda0 	bl	80188d0 <_fstat_r>
 8017d90:	2800      	cmp	r0, #0
 8017d92:	dbf2      	blt.n	8017d7a <__swhatbuf_r+0x12>
 8017d94:	9a01      	ldr	r2, [sp, #4]
 8017d96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017d9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017d9e:	425a      	negs	r2, r3
 8017da0:	415a      	adcs	r2, r3
 8017da2:	602a      	str	r2, [r5, #0]
 8017da4:	e7ee      	b.n	8017d84 <__swhatbuf_r+0x1c>
 8017da6:	2340      	movs	r3, #64	; 0x40
 8017da8:	2000      	movs	r0, #0
 8017daa:	6023      	str	r3, [r4, #0]
 8017dac:	b016      	add	sp, #88	; 0x58
 8017dae:	bd70      	pop	{r4, r5, r6, pc}

08017db0 <__smakebuf_r>:
 8017db0:	898b      	ldrh	r3, [r1, #12]
 8017db2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017db4:	079d      	lsls	r5, r3, #30
 8017db6:	4606      	mov	r6, r0
 8017db8:	460c      	mov	r4, r1
 8017dba:	d507      	bpl.n	8017dcc <__smakebuf_r+0x1c>
 8017dbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017dc0:	6023      	str	r3, [r4, #0]
 8017dc2:	6123      	str	r3, [r4, #16]
 8017dc4:	2301      	movs	r3, #1
 8017dc6:	6163      	str	r3, [r4, #20]
 8017dc8:	b002      	add	sp, #8
 8017dca:	bd70      	pop	{r4, r5, r6, pc}
 8017dcc:	ab01      	add	r3, sp, #4
 8017dce:	466a      	mov	r2, sp
 8017dd0:	f7ff ffca 	bl	8017d68 <__swhatbuf_r>
 8017dd4:	9900      	ldr	r1, [sp, #0]
 8017dd6:	4605      	mov	r5, r0
 8017dd8:	4630      	mov	r0, r6
 8017dda:	f000 fb69 	bl	80184b0 <_malloc_r>
 8017dde:	b948      	cbnz	r0, 8017df4 <__smakebuf_r+0x44>
 8017de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017de4:	059a      	lsls	r2, r3, #22
 8017de6:	d4ef      	bmi.n	8017dc8 <__smakebuf_r+0x18>
 8017de8:	f023 0303 	bic.w	r3, r3, #3
 8017dec:	f043 0302 	orr.w	r3, r3, #2
 8017df0:	81a3      	strh	r3, [r4, #12]
 8017df2:	e7e3      	b.n	8017dbc <__smakebuf_r+0xc>
 8017df4:	4b0d      	ldr	r3, [pc, #52]	; (8017e2c <__smakebuf_r+0x7c>)
 8017df6:	62b3      	str	r3, [r6, #40]	; 0x28
 8017df8:	89a3      	ldrh	r3, [r4, #12]
 8017dfa:	6020      	str	r0, [r4, #0]
 8017dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e00:	81a3      	strh	r3, [r4, #12]
 8017e02:	9b00      	ldr	r3, [sp, #0]
 8017e04:	6163      	str	r3, [r4, #20]
 8017e06:	9b01      	ldr	r3, [sp, #4]
 8017e08:	6120      	str	r0, [r4, #16]
 8017e0a:	b15b      	cbz	r3, 8017e24 <__smakebuf_r+0x74>
 8017e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017e10:	4630      	mov	r0, r6
 8017e12:	f000 fd6f 	bl	80188f4 <_isatty_r>
 8017e16:	b128      	cbz	r0, 8017e24 <__smakebuf_r+0x74>
 8017e18:	89a3      	ldrh	r3, [r4, #12]
 8017e1a:	f023 0303 	bic.w	r3, r3, #3
 8017e1e:	f043 0301 	orr.w	r3, r3, #1
 8017e22:	81a3      	strh	r3, [r4, #12]
 8017e24:	89a3      	ldrh	r3, [r4, #12]
 8017e26:	431d      	orrs	r5, r3
 8017e28:	81a5      	strh	r5, [r4, #12]
 8017e2a:	e7cd      	b.n	8017dc8 <__smakebuf_r+0x18>
 8017e2c:	08017c01 	.word	0x08017c01

08017e30 <malloc>:
 8017e30:	4b02      	ldr	r3, [pc, #8]	; (8017e3c <malloc+0xc>)
 8017e32:	4601      	mov	r1, r0
 8017e34:	6818      	ldr	r0, [r3, #0]
 8017e36:	f000 bb3b 	b.w	80184b0 <_malloc_r>
 8017e3a:	bf00      	nop
 8017e3c:	20000080 	.word	0x20000080

08017e40 <_Balloc>:
 8017e40:	b570      	push	{r4, r5, r6, lr}
 8017e42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017e44:	4604      	mov	r4, r0
 8017e46:	460e      	mov	r6, r1
 8017e48:	b93d      	cbnz	r5, 8017e5a <_Balloc+0x1a>
 8017e4a:	2010      	movs	r0, #16
 8017e4c:	f7ff fff0 	bl	8017e30 <malloc>
 8017e50:	6260      	str	r0, [r4, #36]	; 0x24
 8017e52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017e56:	6005      	str	r5, [r0, #0]
 8017e58:	60c5      	str	r5, [r0, #12]
 8017e5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017e5c:	68eb      	ldr	r3, [r5, #12]
 8017e5e:	b183      	cbz	r3, 8017e82 <_Balloc+0x42>
 8017e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e62:	68db      	ldr	r3, [r3, #12]
 8017e64:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017e68:	b9b8      	cbnz	r0, 8017e9a <_Balloc+0x5a>
 8017e6a:	2101      	movs	r1, #1
 8017e6c:	fa01 f506 	lsl.w	r5, r1, r6
 8017e70:	1d6a      	adds	r2, r5, #5
 8017e72:	0092      	lsls	r2, r2, #2
 8017e74:	4620      	mov	r0, r4
 8017e76:	f000 fabf 	bl	80183f8 <_calloc_r>
 8017e7a:	b160      	cbz	r0, 8017e96 <_Balloc+0x56>
 8017e7c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017e80:	e00e      	b.n	8017ea0 <_Balloc+0x60>
 8017e82:	2221      	movs	r2, #33	; 0x21
 8017e84:	2104      	movs	r1, #4
 8017e86:	4620      	mov	r0, r4
 8017e88:	f000 fab6 	bl	80183f8 <_calloc_r>
 8017e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e8e:	60e8      	str	r0, [r5, #12]
 8017e90:	68db      	ldr	r3, [r3, #12]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d1e4      	bne.n	8017e60 <_Balloc+0x20>
 8017e96:	2000      	movs	r0, #0
 8017e98:	bd70      	pop	{r4, r5, r6, pc}
 8017e9a:	6802      	ldr	r2, [r0, #0]
 8017e9c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017ea6:	e7f7      	b.n	8017e98 <_Balloc+0x58>

08017ea8 <_Bfree>:
 8017ea8:	b570      	push	{r4, r5, r6, lr}
 8017eaa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017eac:	4606      	mov	r6, r0
 8017eae:	460d      	mov	r5, r1
 8017eb0:	b93c      	cbnz	r4, 8017ec2 <_Bfree+0x1a>
 8017eb2:	2010      	movs	r0, #16
 8017eb4:	f7ff ffbc 	bl	8017e30 <malloc>
 8017eb8:	6270      	str	r0, [r6, #36]	; 0x24
 8017eba:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017ebe:	6004      	str	r4, [r0, #0]
 8017ec0:	60c4      	str	r4, [r0, #12]
 8017ec2:	b13d      	cbz	r5, 8017ed4 <_Bfree+0x2c>
 8017ec4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017ec6:	686a      	ldr	r2, [r5, #4]
 8017ec8:	68db      	ldr	r3, [r3, #12]
 8017eca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017ece:	6029      	str	r1, [r5, #0]
 8017ed0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017ed4:	bd70      	pop	{r4, r5, r6, pc}

08017ed6 <__multadd>:
 8017ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017eda:	690d      	ldr	r5, [r1, #16]
 8017edc:	461f      	mov	r7, r3
 8017ede:	4606      	mov	r6, r0
 8017ee0:	460c      	mov	r4, r1
 8017ee2:	f101 0c14 	add.w	ip, r1, #20
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	f8dc 0000 	ldr.w	r0, [ip]
 8017eec:	b281      	uxth	r1, r0
 8017eee:	fb02 7101 	mla	r1, r2, r1, r7
 8017ef2:	0c0f      	lsrs	r7, r1, #16
 8017ef4:	0c00      	lsrs	r0, r0, #16
 8017ef6:	fb02 7000 	mla	r0, r2, r0, r7
 8017efa:	b289      	uxth	r1, r1
 8017efc:	3301      	adds	r3, #1
 8017efe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8017f02:	429d      	cmp	r5, r3
 8017f04:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017f08:	f84c 1b04 	str.w	r1, [ip], #4
 8017f0c:	dcec      	bgt.n	8017ee8 <__multadd+0x12>
 8017f0e:	b1d7      	cbz	r7, 8017f46 <__multadd+0x70>
 8017f10:	68a3      	ldr	r3, [r4, #8]
 8017f12:	42ab      	cmp	r3, r5
 8017f14:	dc12      	bgt.n	8017f3c <__multadd+0x66>
 8017f16:	6861      	ldr	r1, [r4, #4]
 8017f18:	4630      	mov	r0, r6
 8017f1a:	3101      	adds	r1, #1
 8017f1c:	f7ff ff90 	bl	8017e40 <_Balloc>
 8017f20:	6922      	ldr	r2, [r4, #16]
 8017f22:	3202      	adds	r2, #2
 8017f24:	f104 010c 	add.w	r1, r4, #12
 8017f28:	4680      	mov	r8, r0
 8017f2a:	0092      	lsls	r2, r2, #2
 8017f2c:	300c      	adds	r0, #12
 8017f2e:	f7fe f9a1 	bl	8016274 <memcpy>
 8017f32:	4621      	mov	r1, r4
 8017f34:	4630      	mov	r0, r6
 8017f36:	f7ff ffb7 	bl	8017ea8 <_Bfree>
 8017f3a:	4644      	mov	r4, r8
 8017f3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017f40:	3501      	adds	r5, #1
 8017f42:	615f      	str	r7, [r3, #20]
 8017f44:	6125      	str	r5, [r4, #16]
 8017f46:	4620      	mov	r0, r4
 8017f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f4c <__hi0bits>:
 8017f4c:	0c02      	lsrs	r2, r0, #16
 8017f4e:	0412      	lsls	r2, r2, #16
 8017f50:	4603      	mov	r3, r0
 8017f52:	b9b2      	cbnz	r2, 8017f82 <__hi0bits+0x36>
 8017f54:	0403      	lsls	r3, r0, #16
 8017f56:	2010      	movs	r0, #16
 8017f58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017f5c:	bf04      	itt	eq
 8017f5e:	021b      	lsleq	r3, r3, #8
 8017f60:	3008      	addeq	r0, #8
 8017f62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017f66:	bf04      	itt	eq
 8017f68:	011b      	lsleq	r3, r3, #4
 8017f6a:	3004      	addeq	r0, #4
 8017f6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017f70:	bf04      	itt	eq
 8017f72:	009b      	lsleq	r3, r3, #2
 8017f74:	3002      	addeq	r0, #2
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	db06      	blt.n	8017f88 <__hi0bits+0x3c>
 8017f7a:	005b      	lsls	r3, r3, #1
 8017f7c:	d503      	bpl.n	8017f86 <__hi0bits+0x3a>
 8017f7e:	3001      	adds	r0, #1
 8017f80:	4770      	bx	lr
 8017f82:	2000      	movs	r0, #0
 8017f84:	e7e8      	b.n	8017f58 <__hi0bits+0xc>
 8017f86:	2020      	movs	r0, #32
 8017f88:	4770      	bx	lr

08017f8a <__lo0bits>:
 8017f8a:	6803      	ldr	r3, [r0, #0]
 8017f8c:	f013 0207 	ands.w	r2, r3, #7
 8017f90:	4601      	mov	r1, r0
 8017f92:	d00b      	beq.n	8017fac <__lo0bits+0x22>
 8017f94:	07da      	lsls	r2, r3, #31
 8017f96:	d423      	bmi.n	8017fe0 <__lo0bits+0x56>
 8017f98:	0798      	lsls	r0, r3, #30
 8017f9a:	bf49      	itett	mi
 8017f9c:	085b      	lsrmi	r3, r3, #1
 8017f9e:	089b      	lsrpl	r3, r3, #2
 8017fa0:	2001      	movmi	r0, #1
 8017fa2:	600b      	strmi	r3, [r1, #0]
 8017fa4:	bf5c      	itt	pl
 8017fa6:	600b      	strpl	r3, [r1, #0]
 8017fa8:	2002      	movpl	r0, #2
 8017faa:	4770      	bx	lr
 8017fac:	b298      	uxth	r0, r3
 8017fae:	b9a8      	cbnz	r0, 8017fdc <__lo0bits+0x52>
 8017fb0:	0c1b      	lsrs	r3, r3, #16
 8017fb2:	2010      	movs	r0, #16
 8017fb4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017fb8:	bf04      	itt	eq
 8017fba:	0a1b      	lsreq	r3, r3, #8
 8017fbc:	3008      	addeq	r0, #8
 8017fbe:	071a      	lsls	r2, r3, #28
 8017fc0:	bf04      	itt	eq
 8017fc2:	091b      	lsreq	r3, r3, #4
 8017fc4:	3004      	addeq	r0, #4
 8017fc6:	079a      	lsls	r2, r3, #30
 8017fc8:	bf04      	itt	eq
 8017fca:	089b      	lsreq	r3, r3, #2
 8017fcc:	3002      	addeq	r0, #2
 8017fce:	07da      	lsls	r2, r3, #31
 8017fd0:	d402      	bmi.n	8017fd8 <__lo0bits+0x4e>
 8017fd2:	085b      	lsrs	r3, r3, #1
 8017fd4:	d006      	beq.n	8017fe4 <__lo0bits+0x5a>
 8017fd6:	3001      	adds	r0, #1
 8017fd8:	600b      	str	r3, [r1, #0]
 8017fda:	4770      	bx	lr
 8017fdc:	4610      	mov	r0, r2
 8017fde:	e7e9      	b.n	8017fb4 <__lo0bits+0x2a>
 8017fe0:	2000      	movs	r0, #0
 8017fe2:	4770      	bx	lr
 8017fe4:	2020      	movs	r0, #32
 8017fe6:	4770      	bx	lr

08017fe8 <__i2b>:
 8017fe8:	b510      	push	{r4, lr}
 8017fea:	460c      	mov	r4, r1
 8017fec:	2101      	movs	r1, #1
 8017fee:	f7ff ff27 	bl	8017e40 <_Balloc>
 8017ff2:	2201      	movs	r2, #1
 8017ff4:	6144      	str	r4, [r0, #20]
 8017ff6:	6102      	str	r2, [r0, #16]
 8017ff8:	bd10      	pop	{r4, pc}

08017ffa <__multiply>:
 8017ffa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ffe:	4614      	mov	r4, r2
 8018000:	690a      	ldr	r2, [r1, #16]
 8018002:	6923      	ldr	r3, [r4, #16]
 8018004:	429a      	cmp	r2, r3
 8018006:	bfb8      	it	lt
 8018008:	460b      	movlt	r3, r1
 801800a:	4688      	mov	r8, r1
 801800c:	bfbc      	itt	lt
 801800e:	46a0      	movlt	r8, r4
 8018010:	461c      	movlt	r4, r3
 8018012:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018016:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801801a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801801e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018022:	eb07 0609 	add.w	r6, r7, r9
 8018026:	42b3      	cmp	r3, r6
 8018028:	bfb8      	it	lt
 801802a:	3101      	addlt	r1, #1
 801802c:	f7ff ff08 	bl	8017e40 <_Balloc>
 8018030:	f100 0514 	add.w	r5, r0, #20
 8018034:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018038:	462b      	mov	r3, r5
 801803a:	2200      	movs	r2, #0
 801803c:	4573      	cmp	r3, lr
 801803e:	d316      	bcc.n	801806e <__multiply+0x74>
 8018040:	f104 0214 	add.w	r2, r4, #20
 8018044:	f108 0114 	add.w	r1, r8, #20
 8018048:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801804c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018050:	9300      	str	r3, [sp, #0]
 8018052:	9b00      	ldr	r3, [sp, #0]
 8018054:	9201      	str	r2, [sp, #4]
 8018056:	4293      	cmp	r3, r2
 8018058:	d80c      	bhi.n	8018074 <__multiply+0x7a>
 801805a:	2e00      	cmp	r6, #0
 801805c:	dd03      	ble.n	8018066 <__multiply+0x6c>
 801805e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018062:	2b00      	cmp	r3, #0
 8018064:	d05d      	beq.n	8018122 <__multiply+0x128>
 8018066:	6106      	str	r6, [r0, #16]
 8018068:	b003      	add	sp, #12
 801806a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801806e:	f843 2b04 	str.w	r2, [r3], #4
 8018072:	e7e3      	b.n	801803c <__multiply+0x42>
 8018074:	f8b2 b000 	ldrh.w	fp, [r2]
 8018078:	f1bb 0f00 	cmp.w	fp, #0
 801807c:	d023      	beq.n	80180c6 <__multiply+0xcc>
 801807e:	4689      	mov	r9, r1
 8018080:	46ac      	mov	ip, r5
 8018082:	f04f 0800 	mov.w	r8, #0
 8018086:	f859 4b04 	ldr.w	r4, [r9], #4
 801808a:	f8dc a000 	ldr.w	sl, [ip]
 801808e:	b2a3      	uxth	r3, r4
 8018090:	fa1f fa8a 	uxth.w	sl, sl
 8018094:	fb0b a303 	mla	r3, fp, r3, sl
 8018098:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801809c:	f8dc 4000 	ldr.w	r4, [ip]
 80180a0:	4443      	add	r3, r8
 80180a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80180a6:	fb0b 840a 	mla	r4, fp, sl, r8
 80180aa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80180ae:	46e2      	mov	sl, ip
 80180b0:	b29b      	uxth	r3, r3
 80180b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80180b6:	454f      	cmp	r7, r9
 80180b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80180bc:	f84a 3b04 	str.w	r3, [sl], #4
 80180c0:	d82b      	bhi.n	801811a <__multiply+0x120>
 80180c2:	f8cc 8004 	str.w	r8, [ip, #4]
 80180c6:	9b01      	ldr	r3, [sp, #4]
 80180c8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80180cc:	3204      	adds	r2, #4
 80180ce:	f1ba 0f00 	cmp.w	sl, #0
 80180d2:	d020      	beq.n	8018116 <__multiply+0x11c>
 80180d4:	682b      	ldr	r3, [r5, #0]
 80180d6:	4689      	mov	r9, r1
 80180d8:	46a8      	mov	r8, r5
 80180da:	f04f 0b00 	mov.w	fp, #0
 80180de:	f8b9 c000 	ldrh.w	ip, [r9]
 80180e2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80180e6:	fb0a 440c 	mla	r4, sl, ip, r4
 80180ea:	445c      	add	r4, fp
 80180ec:	46c4      	mov	ip, r8
 80180ee:	b29b      	uxth	r3, r3
 80180f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80180f4:	f84c 3b04 	str.w	r3, [ip], #4
 80180f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80180fc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018100:	0c1b      	lsrs	r3, r3, #16
 8018102:	fb0a b303 	mla	r3, sl, r3, fp
 8018106:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801810a:	454f      	cmp	r7, r9
 801810c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018110:	d805      	bhi.n	801811e <__multiply+0x124>
 8018112:	f8c8 3004 	str.w	r3, [r8, #4]
 8018116:	3504      	adds	r5, #4
 8018118:	e79b      	b.n	8018052 <__multiply+0x58>
 801811a:	46d4      	mov	ip, sl
 801811c:	e7b3      	b.n	8018086 <__multiply+0x8c>
 801811e:	46e0      	mov	r8, ip
 8018120:	e7dd      	b.n	80180de <__multiply+0xe4>
 8018122:	3e01      	subs	r6, #1
 8018124:	e799      	b.n	801805a <__multiply+0x60>
	...

08018128 <__pow5mult>:
 8018128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801812c:	4615      	mov	r5, r2
 801812e:	f012 0203 	ands.w	r2, r2, #3
 8018132:	4606      	mov	r6, r0
 8018134:	460f      	mov	r7, r1
 8018136:	d007      	beq.n	8018148 <__pow5mult+0x20>
 8018138:	3a01      	subs	r2, #1
 801813a:	4c21      	ldr	r4, [pc, #132]	; (80181c0 <__pow5mult+0x98>)
 801813c:	2300      	movs	r3, #0
 801813e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018142:	f7ff fec8 	bl	8017ed6 <__multadd>
 8018146:	4607      	mov	r7, r0
 8018148:	10ad      	asrs	r5, r5, #2
 801814a:	d035      	beq.n	80181b8 <__pow5mult+0x90>
 801814c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801814e:	b93c      	cbnz	r4, 8018160 <__pow5mult+0x38>
 8018150:	2010      	movs	r0, #16
 8018152:	f7ff fe6d 	bl	8017e30 <malloc>
 8018156:	6270      	str	r0, [r6, #36]	; 0x24
 8018158:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801815c:	6004      	str	r4, [r0, #0]
 801815e:	60c4      	str	r4, [r0, #12]
 8018160:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018164:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018168:	b94c      	cbnz	r4, 801817e <__pow5mult+0x56>
 801816a:	f240 2171 	movw	r1, #625	; 0x271
 801816e:	4630      	mov	r0, r6
 8018170:	f7ff ff3a 	bl	8017fe8 <__i2b>
 8018174:	2300      	movs	r3, #0
 8018176:	f8c8 0008 	str.w	r0, [r8, #8]
 801817a:	4604      	mov	r4, r0
 801817c:	6003      	str	r3, [r0, #0]
 801817e:	f04f 0800 	mov.w	r8, #0
 8018182:	07eb      	lsls	r3, r5, #31
 8018184:	d50a      	bpl.n	801819c <__pow5mult+0x74>
 8018186:	4639      	mov	r1, r7
 8018188:	4622      	mov	r2, r4
 801818a:	4630      	mov	r0, r6
 801818c:	f7ff ff35 	bl	8017ffa <__multiply>
 8018190:	4639      	mov	r1, r7
 8018192:	4681      	mov	r9, r0
 8018194:	4630      	mov	r0, r6
 8018196:	f7ff fe87 	bl	8017ea8 <_Bfree>
 801819a:	464f      	mov	r7, r9
 801819c:	106d      	asrs	r5, r5, #1
 801819e:	d00b      	beq.n	80181b8 <__pow5mult+0x90>
 80181a0:	6820      	ldr	r0, [r4, #0]
 80181a2:	b938      	cbnz	r0, 80181b4 <__pow5mult+0x8c>
 80181a4:	4622      	mov	r2, r4
 80181a6:	4621      	mov	r1, r4
 80181a8:	4630      	mov	r0, r6
 80181aa:	f7ff ff26 	bl	8017ffa <__multiply>
 80181ae:	6020      	str	r0, [r4, #0]
 80181b0:	f8c0 8000 	str.w	r8, [r0]
 80181b4:	4604      	mov	r4, r0
 80181b6:	e7e4      	b.n	8018182 <__pow5mult+0x5a>
 80181b8:	4638      	mov	r0, r7
 80181ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181be:	bf00      	nop
 80181c0:	08018ca8 	.word	0x08018ca8

080181c4 <__lshift>:
 80181c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181c8:	460c      	mov	r4, r1
 80181ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80181ce:	6923      	ldr	r3, [r4, #16]
 80181d0:	6849      	ldr	r1, [r1, #4]
 80181d2:	eb0a 0903 	add.w	r9, sl, r3
 80181d6:	68a3      	ldr	r3, [r4, #8]
 80181d8:	4607      	mov	r7, r0
 80181da:	4616      	mov	r6, r2
 80181dc:	f109 0501 	add.w	r5, r9, #1
 80181e0:	42ab      	cmp	r3, r5
 80181e2:	db32      	blt.n	801824a <__lshift+0x86>
 80181e4:	4638      	mov	r0, r7
 80181e6:	f7ff fe2b 	bl	8017e40 <_Balloc>
 80181ea:	2300      	movs	r3, #0
 80181ec:	4680      	mov	r8, r0
 80181ee:	f100 0114 	add.w	r1, r0, #20
 80181f2:	461a      	mov	r2, r3
 80181f4:	4553      	cmp	r3, sl
 80181f6:	db2b      	blt.n	8018250 <__lshift+0x8c>
 80181f8:	6920      	ldr	r0, [r4, #16]
 80181fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80181fe:	f104 0314 	add.w	r3, r4, #20
 8018202:	f016 021f 	ands.w	r2, r6, #31
 8018206:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801820a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801820e:	d025      	beq.n	801825c <__lshift+0x98>
 8018210:	f1c2 0e20 	rsb	lr, r2, #32
 8018214:	2000      	movs	r0, #0
 8018216:	681e      	ldr	r6, [r3, #0]
 8018218:	468a      	mov	sl, r1
 801821a:	4096      	lsls	r6, r2
 801821c:	4330      	orrs	r0, r6
 801821e:	f84a 0b04 	str.w	r0, [sl], #4
 8018222:	f853 0b04 	ldr.w	r0, [r3], #4
 8018226:	459c      	cmp	ip, r3
 8018228:	fa20 f00e 	lsr.w	r0, r0, lr
 801822c:	d814      	bhi.n	8018258 <__lshift+0x94>
 801822e:	6048      	str	r0, [r1, #4]
 8018230:	b108      	cbz	r0, 8018236 <__lshift+0x72>
 8018232:	f109 0502 	add.w	r5, r9, #2
 8018236:	3d01      	subs	r5, #1
 8018238:	4638      	mov	r0, r7
 801823a:	f8c8 5010 	str.w	r5, [r8, #16]
 801823e:	4621      	mov	r1, r4
 8018240:	f7ff fe32 	bl	8017ea8 <_Bfree>
 8018244:	4640      	mov	r0, r8
 8018246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801824a:	3101      	adds	r1, #1
 801824c:	005b      	lsls	r3, r3, #1
 801824e:	e7c7      	b.n	80181e0 <__lshift+0x1c>
 8018250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018254:	3301      	adds	r3, #1
 8018256:	e7cd      	b.n	80181f4 <__lshift+0x30>
 8018258:	4651      	mov	r1, sl
 801825a:	e7dc      	b.n	8018216 <__lshift+0x52>
 801825c:	3904      	subs	r1, #4
 801825e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018262:	f841 2f04 	str.w	r2, [r1, #4]!
 8018266:	459c      	cmp	ip, r3
 8018268:	d8f9      	bhi.n	801825e <__lshift+0x9a>
 801826a:	e7e4      	b.n	8018236 <__lshift+0x72>

0801826c <__mcmp>:
 801826c:	6903      	ldr	r3, [r0, #16]
 801826e:	690a      	ldr	r2, [r1, #16]
 8018270:	1a9b      	subs	r3, r3, r2
 8018272:	b530      	push	{r4, r5, lr}
 8018274:	d10c      	bne.n	8018290 <__mcmp+0x24>
 8018276:	0092      	lsls	r2, r2, #2
 8018278:	3014      	adds	r0, #20
 801827a:	3114      	adds	r1, #20
 801827c:	1884      	adds	r4, r0, r2
 801827e:	4411      	add	r1, r2
 8018280:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018284:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018288:	4295      	cmp	r5, r2
 801828a:	d003      	beq.n	8018294 <__mcmp+0x28>
 801828c:	d305      	bcc.n	801829a <__mcmp+0x2e>
 801828e:	2301      	movs	r3, #1
 8018290:	4618      	mov	r0, r3
 8018292:	bd30      	pop	{r4, r5, pc}
 8018294:	42a0      	cmp	r0, r4
 8018296:	d3f3      	bcc.n	8018280 <__mcmp+0x14>
 8018298:	e7fa      	b.n	8018290 <__mcmp+0x24>
 801829a:	f04f 33ff 	mov.w	r3, #4294967295
 801829e:	e7f7      	b.n	8018290 <__mcmp+0x24>

080182a0 <__mdiff>:
 80182a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182a4:	460d      	mov	r5, r1
 80182a6:	4607      	mov	r7, r0
 80182a8:	4611      	mov	r1, r2
 80182aa:	4628      	mov	r0, r5
 80182ac:	4614      	mov	r4, r2
 80182ae:	f7ff ffdd 	bl	801826c <__mcmp>
 80182b2:	1e06      	subs	r6, r0, #0
 80182b4:	d108      	bne.n	80182c8 <__mdiff+0x28>
 80182b6:	4631      	mov	r1, r6
 80182b8:	4638      	mov	r0, r7
 80182ba:	f7ff fdc1 	bl	8017e40 <_Balloc>
 80182be:	2301      	movs	r3, #1
 80182c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80182c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182c8:	bfa4      	itt	ge
 80182ca:	4623      	movge	r3, r4
 80182cc:	462c      	movge	r4, r5
 80182ce:	4638      	mov	r0, r7
 80182d0:	6861      	ldr	r1, [r4, #4]
 80182d2:	bfa6      	itte	ge
 80182d4:	461d      	movge	r5, r3
 80182d6:	2600      	movge	r6, #0
 80182d8:	2601      	movlt	r6, #1
 80182da:	f7ff fdb1 	bl	8017e40 <_Balloc>
 80182de:	692b      	ldr	r3, [r5, #16]
 80182e0:	60c6      	str	r6, [r0, #12]
 80182e2:	6926      	ldr	r6, [r4, #16]
 80182e4:	f105 0914 	add.w	r9, r5, #20
 80182e8:	f104 0214 	add.w	r2, r4, #20
 80182ec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80182f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80182f4:	f100 0514 	add.w	r5, r0, #20
 80182f8:	f04f 0e00 	mov.w	lr, #0
 80182fc:	f852 ab04 	ldr.w	sl, [r2], #4
 8018300:	f859 4b04 	ldr.w	r4, [r9], #4
 8018304:	fa1e f18a 	uxtah	r1, lr, sl
 8018308:	b2a3      	uxth	r3, r4
 801830a:	1ac9      	subs	r1, r1, r3
 801830c:	0c23      	lsrs	r3, r4, #16
 801830e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018312:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018316:	b289      	uxth	r1, r1
 8018318:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801831c:	45c8      	cmp	r8, r9
 801831e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018322:	4694      	mov	ip, r2
 8018324:	f845 3b04 	str.w	r3, [r5], #4
 8018328:	d8e8      	bhi.n	80182fc <__mdiff+0x5c>
 801832a:	45bc      	cmp	ip, r7
 801832c:	d304      	bcc.n	8018338 <__mdiff+0x98>
 801832e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018332:	b183      	cbz	r3, 8018356 <__mdiff+0xb6>
 8018334:	6106      	str	r6, [r0, #16]
 8018336:	e7c5      	b.n	80182c4 <__mdiff+0x24>
 8018338:	f85c 1b04 	ldr.w	r1, [ip], #4
 801833c:	fa1e f381 	uxtah	r3, lr, r1
 8018340:	141a      	asrs	r2, r3, #16
 8018342:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018346:	b29b      	uxth	r3, r3
 8018348:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801834c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018350:	f845 3b04 	str.w	r3, [r5], #4
 8018354:	e7e9      	b.n	801832a <__mdiff+0x8a>
 8018356:	3e01      	subs	r6, #1
 8018358:	e7e9      	b.n	801832e <__mdiff+0x8e>

0801835a <__d2b>:
 801835a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801835e:	460e      	mov	r6, r1
 8018360:	2101      	movs	r1, #1
 8018362:	ec59 8b10 	vmov	r8, r9, d0
 8018366:	4615      	mov	r5, r2
 8018368:	f7ff fd6a 	bl	8017e40 <_Balloc>
 801836c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018370:	4607      	mov	r7, r0
 8018372:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018376:	bb34      	cbnz	r4, 80183c6 <__d2b+0x6c>
 8018378:	9301      	str	r3, [sp, #4]
 801837a:	f1b8 0300 	subs.w	r3, r8, #0
 801837e:	d027      	beq.n	80183d0 <__d2b+0x76>
 8018380:	a802      	add	r0, sp, #8
 8018382:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018386:	f7ff fe00 	bl	8017f8a <__lo0bits>
 801838a:	9900      	ldr	r1, [sp, #0]
 801838c:	b1f0      	cbz	r0, 80183cc <__d2b+0x72>
 801838e:	9a01      	ldr	r2, [sp, #4]
 8018390:	f1c0 0320 	rsb	r3, r0, #32
 8018394:	fa02 f303 	lsl.w	r3, r2, r3
 8018398:	430b      	orrs	r3, r1
 801839a:	40c2      	lsrs	r2, r0
 801839c:	617b      	str	r3, [r7, #20]
 801839e:	9201      	str	r2, [sp, #4]
 80183a0:	9b01      	ldr	r3, [sp, #4]
 80183a2:	61bb      	str	r3, [r7, #24]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	bf14      	ite	ne
 80183a8:	2102      	movne	r1, #2
 80183aa:	2101      	moveq	r1, #1
 80183ac:	6139      	str	r1, [r7, #16]
 80183ae:	b1c4      	cbz	r4, 80183e2 <__d2b+0x88>
 80183b0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80183b4:	4404      	add	r4, r0
 80183b6:	6034      	str	r4, [r6, #0]
 80183b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80183bc:	6028      	str	r0, [r5, #0]
 80183be:	4638      	mov	r0, r7
 80183c0:	b003      	add	sp, #12
 80183c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80183ca:	e7d5      	b.n	8018378 <__d2b+0x1e>
 80183cc:	6179      	str	r1, [r7, #20]
 80183ce:	e7e7      	b.n	80183a0 <__d2b+0x46>
 80183d0:	a801      	add	r0, sp, #4
 80183d2:	f7ff fdda 	bl	8017f8a <__lo0bits>
 80183d6:	9b01      	ldr	r3, [sp, #4]
 80183d8:	617b      	str	r3, [r7, #20]
 80183da:	2101      	movs	r1, #1
 80183dc:	6139      	str	r1, [r7, #16]
 80183de:	3020      	adds	r0, #32
 80183e0:	e7e5      	b.n	80183ae <__d2b+0x54>
 80183e2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80183e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80183ea:	6030      	str	r0, [r6, #0]
 80183ec:	6918      	ldr	r0, [r3, #16]
 80183ee:	f7ff fdad 	bl	8017f4c <__hi0bits>
 80183f2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80183f6:	e7e1      	b.n	80183bc <__d2b+0x62>

080183f8 <_calloc_r>:
 80183f8:	b538      	push	{r3, r4, r5, lr}
 80183fa:	fb02 f401 	mul.w	r4, r2, r1
 80183fe:	4621      	mov	r1, r4
 8018400:	f000 f856 	bl	80184b0 <_malloc_r>
 8018404:	4605      	mov	r5, r0
 8018406:	b118      	cbz	r0, 8018410 <_calloc_r+0x18>
 8018408:	4622      	mov	r2, r4
 801840a:	2100      	movs	r1, #0
 801840c:	f7fd ff3d 	bl	801628a <memset>
 8018410:	4628      	mov	r0, r5
 8018412:	bd38      	pop	{r3, r4, r5, pc}

08018414 <_free_r>:
 8018414:	b538      	push	{r3, r4, r5, lr}
 8018416:	4605      	mov	r5, r0
 8018418:	2900      	cmp	r1, #0
 801841a:	d045      	beq.n	80184a8 <_free_r+0x94>
 801841c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018420:	1f0c      	subs	r4, r1, #4
 8018422:	2b00      	cmp	r3, #0
 8018424:	bfb8      	it	lt
 8018426:	18e4      	addlt	r4, r4, r3
 8018428:	f000 fa98 	bl	801895c <__malloc_lock>
 801842c:	4a1f      	ldr	r2, [pc, #124]	; (80184ac <_free_r+0x98>)
 801842e:	6813      	ldr	r3, [r2, #0]
 8018430:	4610      	mov	r0, r2
 8018432:	b933      	cbnz	r3, 8018442 <_free_r+0x2e>
 8018434:	6063      	str	r3, [r4, #4]
 8018436:	6014      	str	r4, [r2, #0]
 8018438:	4628      	mov	r0, r5
 801843a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801843e:	f000 ba8e 	b.w	801895e <__malloc_unlock>
 8018442:	42a3      	cmp	r3, r4
 8018444:	d90c      	bls.n	8018460 <_free_r+0x4c>
 8018446:	6821      	ldr	r1, [r4, #0]
 8018448:	1862      	adds	r2, r4, r1
 801844a:	4293      	cmp	r3, r2
 801844c:	bf04      	itt	eq
 801844e:	681a      	ldreq	r2, [r3, #0]
 8018450:	685b      	ldreq	r3, [r3, #4]
 8018452:	6063      	str	r3, [r4, #4]
 8018454:	bf04      	itt	eq
 8018456:	1852      	addeq	r2, r2, r1
 8018458:	6022      	streq	r2, [r4, #0]
 801845a:	6004      	str	r4, [r0, #0]
 801845c:	e7ec      	b.n	8018438 <_free_r+0x24>
 801845e:	4613      	mov	r3, r2
 8018460:	685a      	ldr	r2, [r3, #4]
 8018462:	b10a      	cbz	r2, 8018468 <_free_r+0x54>
 8018464:	42a2      	cmp	r2, r4
 8018466:	d9fa      	bls.n	801845e <_free_r+0x4a>
 8018468:	6819      	ldr	r1, [r3, #0]
 801846a:	1858      	adds	r0, r3, r1
 801846c:	42a0      	cmp	r0, r4
 801846e:	d10b      	bne.n	8018488 <_free_r+0x74>
 8018470:	6820      	ldr	r0, [r4, #0]
 8018472:	4401      	add	r1, r0
 8018474:	1858      	adds	r0, r3, r1
 8018476:	4282      	cmp	r2, r0
 8018478:	6019      	str	r1, [r3, #0]
 801847a:	d1dd      	bne.n	8018438 <_free_r+0x24>
 801847c:	6810      	ldr	r0, [r2, #0]
 801847e:	6852      	ldr	r2, [r2, #4]
 8018480:	605a      	str	r2, [r3, #4]
 8018482:	4401      	add	r1, r0
 8018484:	6019      	str	r1, [r3, #0]
 8018486:	e7d7      	b.n	8018438 <_free_r+0x24>
 8018488:	d902      	bls.n	8018490 <_free_r+0x7c>
 801848a:	230c      	movs	r3, #12
 801848c:	602b      	str	r3, [r5, #0]
 801848e:	e7d3      	b.n	8018438 <_free_r+0x24>
 8018490:	6820      	ldr	r0, [r4, #0]
 8018492:	1821      	adds	r1, r4, r0
 8018494:	428a      	cmp	r2, r1
 8018496:	bf04      	itt	eq
 8018498:	6811      	ldreq	r1, [r2, #0]
 801849a:	6852      	ldreq	r2, [r2, #4]
 801849c:	6062      	str	r2, [r4, #4]
 801849e:	bf04      	itt	eq
 80184a0:	1809      	addeq	r1, r1, r0
 80184a2:	6021      	streq	r1, [r4, #0]
 80184a4:	605c      	str	r4, [r3, #4]
 80184a6:	e7c7      	b.n	8018438 <_free_r+0x24>
 80184a8:	bd38      	pop	{r3, r4, r5, pc}
 80184aa:	bf00      	nop
 80184ac:	2000e000 	.word	0x2000e000

080184b0 <_malloc_r>:
 80184b0:	b570      	push	{r4, r5, r6, lr}
 80184b2:	1ccd      	adds	r5, r1, #3
 80184b4:	f025 0503 	bic.w	r5, r5, #3
 80184b8:	3508      	adds	r5, #8
 80184ba:	2d0c      	cmp	r5, #12
 80184bc:	bf38      	it	cc
 80184be:	250c      	movcc	r5, #12
 80184c0:	2d00      	cmp	r5, #0
 80184c2:	4606      	mov	r6, r0
 80184c4:	db01      	blt.n	80184ca <_malloc_r+0x1a>
 80184c6:	42a9      	cmp	r1, r5
 80184c8:	d903      	bls.n	80184d2 <_malloc_r+0x22>
 80184ca:	230c      	movs	r3, #12
 80184cc:	6033      	str	r3, [r6, #0]
 80184ce:	2000      	movs	r0, #0
 80184d0:	bd70      	pop	{r4, r5, r6, pc}
 80184d2:	f000 fa43 	bl	801895c <__malloc_lock>
 80184d6:	4a21      	ldr	r2, [pc, #132]	; (801855c <_malloc_r+0xac>)
 80184d8:	6814      	ldr	r4, [r2, #0]
 80184da:	4621      	mov	r1, r4
 80184dc:	b991      	cbnz	r1, 8018504 <_malloc_r+0x54>
 80184de:	4c20      	ldr	r4, [pc, #128]	; (8018560 <_malloc_r+0xb0>)
 80184e0:	6823      	ldr	r3, [r4, #0]
 80184e2:	b91b      	cbnz	r3, 80184ec <_malloc_r+0x3c>
 80184e4:	4630      	mov	r0, r6
 80184e6:	f000 f97d 	bl	80187e4 <_sbrk_r>
 80184ea:	6020      	str	r0, [r4, #0]
 80184ec:	4629      	mov	r1, r5
 80184ee:	4630      	mov	r0, r6
 80184f0:	f000 f978 	bl	80187e4 <_sbrk_r>
 80184f4:	1c43      	adds	r3, r0, #1
 80184f6:	d124      	bne.n	8018542 <_malloc_r+0x92>
 80184f8:	230c      	movs	r3, #12
 80184fa:	6033      	str	r3, [r6, #0]
 80184fc:	4630      	mov	r0, r6
 80184fe:	f000 fa2e 	bl	801895e <__malloc_unlock>
 8018502:	e7e4      	b.n	80184ce <_malloc_r+0x1e>
 8018504:	680b      	ldr	r3, [r1, #0]
 8018506:	1b5b      	subs	r3, r3, r5
 8018508:	d418      	bmi.n	801853c <_malloc_r+0x8c>
 801850a:	2b0b      	cmp	r3, #11
 801850c:	d90f      	bls.n	801852e <_malloc_r+0x7e>
 801850e:	600b      	str	r3, [r1, #0]
 8018510:	50cd      	str	r5, [r1, r3]
 8018512:	18cc      	adds	r4, r1, r3
 8018514:	4630      	mov	r0, r6
 8018516:	f000 fa22 	bl	801895e <__malloc_unlock>
 801851a:	f104 000b 	add.w	r0, r4, #11
 801851e:	1d23      	adds	r3, r4, #4
 8018520:	f020 0007 	bic.w	r0, r0, #7
 8018524:	1ac3      	subs	r3, r0, r3
 8018526:	d0d3      	beq.n	80184d0 <_malloc_r+0x20>
 8018528:	425a      	negs	r2, r3
 801852a:	50e2      	str	r2, [r4, r3]
 801852c:	e7d0      	b.n	80184d0 <_malloc_r+0x20>
 801852e:	428c      	cmp	r4, r1
 8018530:	684b      	ldr	r3, [r1, #4]
 8018532:	bf16      	itet	ne
 8018534:	6063      	strne	r3, [r4, #4]
 8018536:	6013      	streq	r3, [r2, #0]
 8018538:	460c      	movne	r4, r1
 801853a:	e7eb      	b.n	8018514 <_malloc_r+0x64>
 801853c:	460c      	mov	r4, r1
 801853e:	6849      	ldr	r1, [r1, #4]
 8018540:	e7cc      	b.n	80184dc <_malloc_r+0x2c>
 8018542:	1cc4      	adds	r4, r0, #3
 8018544:	f024 0403 	bic.w	r4, r4, #3
 8018548:	42a0      	cmp	r0, r4
 801854a:	d005      	beq.n	8018558 <_malloc_r+0xa8>
 801854c:	1a21      	subs	r1, r4, r0
 801854e:	4630      	mov	r0, r6
 8018550:	f000 f948 	bl	80187e4 <_sbrk_r>
 8018554:	3001      	adds	r0, #1
 8018556:	d0cf      	beq.n	80184f8 <_malloc_r+0x48>
 8018558:	6025      	str	r5, [r4, #0]
 801855a:	e7db      	b.n	8018514 <_malloc_r+0x64>
 801855c:	2000e000 	.word	0x2000e000
 8018560:	2000e004 	.word	0x2000e004

08018564 <__sfputc_r>:
 8018564:	6893      	ldr	r3, [r2, #8]
 8018566:	3b01      	subs	r3, #1
 8018568:	2b00      	cmp	r3, #0
 801856a:	b410      	push	{r4}
 801856c:	6093      	str	r3, [r2, #8]
 801856e:	da08      	bge.n	8018582 <__sfputc_r+0x1e>
 8018570:	6994      	ldr	r4, [r2, #24]
 8018572:	42a3      	cmp	r3, r4
 8018574:	db01      	blt.n	801857a <__sfputc_r+0x16>
 8018576:	290a      	cmp	r1, #10
 8018578:	d103      	bne.n	8018582 <__sfputc_r+0x1e>
 801857a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801857e:	f7fe bb65 	b.w	8016c4c <__swbuf_r>
 8018582:	6813      	ldr	r3, [r2, #0]
 8018584:	1c58      	adds	r0, r3, #1
 8018586:	6010      	str	r0, [r2, #0]
 8018588:	7019      	strb	r1, [r3, #0]
 801858a:	4608      	mov	r0, r1
 801858c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018590:	4770      	bx	lr

08018592 <__sfputs_r>:
 8018592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018594:	4606      	mov	r6, r0
 8018596:	460f      	mov	r7, r1
 8018598:	4614      	mov	r4, r2
 801859a:	18d5      	adds	r5, r2, r3
 801859c:	42ac      	cmp	r4, r5
 801859e:	d101      	bne.n	80185a4 <__sfputs_r+0x12>
 80185a0:	2000      	movs	r0, #0
 80185a2:	e007      	b.n	80185b4 <__sfputs_r+0x22>
 80185a4:	463a      	mov	r2, r7
 80185a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185aa:	4630      	mov	r0, r6
 80185ac:	f7ff ffda 	bl	8018564 <__sfputc_r>
 80185b0:	1c43      	adds	r3, r0, #1
 80185b2:	d1f3      	bne.n	801859c <__sfputs_r+0xa>
 80185b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080185b8 <_vfiprintf_r>:
 80185b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185bc:	460c      	mov	r4, r1
 80185be:	b09d      	sub	sp, #116	; 0x74
 80185c0:	4617      	mov	r7, r2
 80185c2:	461d      	mov	r5, r3
 80185c4:	4606      	mov	r6, r0
 80185c6:	b118      	cbz	r0, 80185d0 <_vfiprintf_r+0x18>
 80185c8:	6983      	ldr	r3, [r0, #24]
 80185ca:	b90b      	cbnz	r3, 80185d0 <_vfiprintf_r+0x18>
 80185cc:	f7ff fb34 	bl	8017c38 <__sinit>
 80185d0:	4b7c      	ldr	r3, [pc, #496]	; (80187c4 <_vfiprintf_r+0x20c>)
 80185d2:	429c      	cmp	r4, r3
 80185d4:	d158      	bne.n	8018688 <_vfiprintf_r+0xd0>
 80185d6:	6874      	ldr	r4, [r6, #4]
 80185d8:	89a3      	ldrh	r3, [r4, #12]
 80185da:	0718      	lsls	r0, r3, #28
 80185dc:	d55e      	bpl.n	801869c <_vfiprintf_r+0xe4>
 80185de:	6923      	ldr	r3, [r4, #16]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d05b      	beq.n	801869c <_vfiprintf_r+0xe4>
 80185e4:	2300      	movs	r3, #0
 80185e6:	9309      	str	r3, [sp, #36]	; 0x24
 80185e8:	2320      	movs	r3, #32
 80185ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80185ee:	2330      	movs	r3, #48	; 0x30
 80185f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80185f4:	9503      	str	r5, [sp, #12]
 80185f6:	f04f 0b01 	mov.w	fp, #1
 80185fa:	46b8      	mov	r8, r7
 80185fc:	4645      	mov	r5, r8
 80185fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018602:	b10b      	cbz	r3, 8018608 <_vfiprintf_r+0x50>
 8018604:	2b25      	cmp	r3, #37	; 0x25
 8018606:	d154      	bne.n	80186b2 <_vfiprintf_r+0xfa>
 8018608:	ebb8 0a07 	subs.w	sl, r8, r7
 801860c:	d00b      	beq.n	8018626 <_vfiprintf_r+0x6e>
 801860e:	4653      	mov	r3, sl
 8018610:	463a      	mov	r2, r7
 8018612:	4621      	mov	r1, r4
 8018614:	4630      	mov	r0, r6
 8018616:	f7ff ffbc 	bl	8018592 <__sfputs_r>
 801861a:	3001      	adds	r0, #1
 801861c:	f000 80c2 	beq.w	80187a4 <_vfiprintf_r+0x1ec>
 8018620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018622:	4453      	add	r3, sl
 8018624:	9309      	str	r3, [sp, #36]	; 0x24
 8018626:	f898 3000 	ldrb.w	r3, [r8]
 801862a:	2b00      	cmp	r3, #0
 801862c:	f000 80ba 	beq.w	80187a4 <_vfiprintf_r+0x1ec>
 8018630:	2300      	movs	r3, #0
 8018632:	f04f 32ff 	mov.w	r2, #4294967295
 8018636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801863a:	9304      	str	r3, [sp, #16]
 801863c:	9307      	str	r3, [sp, #28]
 801863e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018642:	931a      	str	r3, [sp, #104]	; 0x68
 8018644:	46a8      	mov	r8, r5
 8018646:	2205      	movs	r2, #5
 8018648:	f818 1b01 	ldrb.w	r1, [r8], #1
 801864c:	485e      	ldr	r0, [pc, #376]	; (80187c8 <_vfiprintf_r+0x210>)
 801864e:	f7ef fcff 	bl	8008050 <memchr>
 8018652:	9b04      	ldr	r3, [sp, #16]
 8018654:	bb78      	cbnz	r0, 80186b6 <_vfiprintf_r+0xfe>
 8018656:	06d9      	lsls	r1, r3, #27
 8018658:	bf44      	itt	mi
 801865a:	2220      	movmi	r2, #32
 801865c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018660:	071a      	lsls	r2, r3, #28
 8018662:	bf44      	itt	mi
 8018664:	222b      	movmi	r2, #43	; 0x2b
 8018666:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801866a:	782a      	ldrb	r2, [r5, #0]
 801866c:	2a2a      	cmp	r2, #42	; 0x2a
 801866e:	d02a      	beq.n	80186c6 <_vfiprintf_r+0x10e>
 8018670:	9a07      	ldr	r2, [sp, #28]
 8018672:	46a8      	mov	r8, r5
 8018674:	2000      	movs	r0, #0
 8018676:	250a      	movs	r5, #10
 8018678:	4641      	mov	r1, r8
 801867a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801867e:	3b30      	subs	r3, #48	; 0x30
 8018680:	2b09      	cmp	r3, #9
 8018682:	d969      	bls.n	8018758 <_vfiprintf_r+0x1a0>
 8018684:	b360      	cbz	r0, 80186e0 <_vfiprintf_r+0x128>
 8018686:	e024      	b.n	80186d2 <_vfiprintf_r+0x11a>
 8018688:	4b50      	ldr	r3, [pc, #320]	; (80187cc <_vfiprintf_r+0x214>)
 801868a:	429c      	cmp	r4, r3
 801868c:	d101      	bne.n	8018692 <_vfiprintf_r+0xda>
 801868e:	68b4      	ldr	r4, [r6, #8]
 8018690:	e7a2      	b.n	80185d8 <_vfiprintf_r+0x20>
 8018692:	4b4f      	ldr	r3, [pc, #316]	; (80187d0 <_vfiprintf_r+0x218>)
 8018694:	429c      	cmp	r4, r3
 8018696:	bf08      	it	eq
 8018698:	68f4      	ldreq	r4, [r6, #12]
 801869a:	e79d      	b.n	80185d8 <_vfiprintf_r+0x20>
 801869c:	4621      	mov	r1, r4
 801869e:	4630      	mov	r0, r6
 80186a0:	f7fe fb26 	bl	8016cf0 <__swsetup_r>
 80186a4:	2800      	cmp	r0, #0
 80186a6:	d09d      	beq.n	80185e4 <_vfiprintf_r+0x2c>
 80186a8:	f04f 30ff 	mov.w	r0, #4294967295
 80186ac:	b01d      	add	sp, #116	; 0x74
 80186ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186b2:	46a8      	mov	r8, r5
 80186b4:	e7a2      	b.n	80185fc <_vfiprintf_r+0x44>
 80186b6:	4a44      	ldr	r2, [pc, #272]	; (80187c8 <_vfiprintf_r+0x210>)
 80186b8:	1a80      	subs	r0, r0, r2
 80186ba:	fa0b f000 	lsl.w	r0, fp, r0
 80186be:	4318      	orrs	r0, r3
 80186c0:	9004      	str	r0, [sp, #16]
 80186c2:	4645      	mov	r5, r8
 80186c4:	e7be      	b.n	8018644 <_vfiprintf_r+0x8c>
 80186c6:	9a03      	ldr	r2, [sp, #12]
 80186c8:	1d11      	adds	r1, r2, #4
 80186ca:	6812      	ldr	r2, [r2, #0]
 80186cc:	9103      	str	r1, [sp, #12]
 80186ce:	2a00      	cmp	r2, #0
 80186d0:	db01      	blt.n	80186d6 <_vfiprintf_r+0x11e>
 80186d2:	9207      	str	r2, [sp, #28]
 80186d4:	e004      	b.n	80186e0 <_vfiprintf_r+0x128>
 80186d6:	4252      	negs	r2, r2
 80186d8:	f043 0302 	orr.w	r3, r3, #2
 80186dc:	9207      	str	r2, [sp, #28]
 80186de:	9304      	str	r3, [sp, #16]
 80186e0:	f898 3000 	ldrb.w	r3, [r8]
 80186e4:	2b2e      	cmp	r3, #46	; 0x2e
 80186e6:	d10e      	bne.n	8018706 <_vfiprintf_r+0x14e>
 80186e8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80186ec:	2b2a      	cmp	r3, #42	; 0x2a
 80186ee:	d138      	bne.n	8018762 <_vfiprintf_r+0x1aa>
 80186f0:	9b03      	ldr	r3, [sp, #12]
 80186f2:	1d1a      	adds	r2, r3, #4
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	9203      	str	r2, [sp, #12]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	bfb8      	it	lt
 80186fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8018700:	f108 0802 	add.w	r8, r8, #2
 8018704:	9305      	str	r3, [sp, #20]
 8018706:	4d33      	ldr	r5, [pc, #204]	; (80187d4 <_vfiprintf_r+0x21c>)
 8018708:	f898 1000 	ldrb.w	r1, [r8]
 801870c:	2203      	movs	r2, #3
 801870e:	4628      	mov	r0, r5
 8018710:	f7ef fc9e 	bl	8008050 <memchr>
 8018714:	b140      	cbz	r0, 8018728 <_vfiprintf_r+0x170>
 8018716:	2340      	movs	r3, #64	; 0x40
 8018718:	1b40      	subs	r0, r0, r5
 801871a:	fa03 f000 	lsl.w	r0, r3, r0
 801871e:	9b04      	ldr	r3, [sp, #16]
 8018720:	4303      	orrs	r3, r0
 8018722:	f108 0801 	add.w	r8, r8, #1
 8018726:	9304      	str	r3, [sp, #16]
 8018728:	f898 1000 	ldrb.w	r1, [r8]
 801872c:	482a      	ldr	r0, [pc, #168]	; (80187d8 <_vfiprintf_r+0x220>)
 801872e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018732:	2206      	movs	r2, #6
 8018734:	f108 0701 	add.w	r7, r8, #1
 8018738:	f7ef fc8a 	bl	8008050 <memchr>
 801873c:	2800      	cmp	r0, #0
 801873e:	d037      	beq.n	80187b0 <_vfiprintf_r+0x1f8>
 8018740:	4b26      	ldr	r3, [pc, #152]	; (80187dc <_vfiprintf_r+0x224>)
 8018742:	bb1b      	cbnz	r3, 801878c <_vfiprintf_r+0x1d4>
 8018744:	9b03      	ldr	r3, [sp, #12]
 8018746:	3307      	adds	r3, #7
 8018748:	f023 0307 	bic.w	r3, r3, #7
 801874c:	3308      	adds	r3, #8
 801874e:	9303      	str	r3, [sp, #12]
 8018750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018752:	444b      	add	r3, r9
 8018754:	9309      	str	r3, [sp, #36]	; 0x24
 8018756:	e750      	b.n	80185fa <_vfiprintf_r+0x42>
 8018758:	fb05 3202 	mla	r2, r5, r2, r3
 801875c:	2001      	movs	r0, #1
 801875e:	4688      	mov	r8, r1
 8018760:	e78a      	b.n	8018678 <_vfiprintf_r+0xc0>
 8018762:	2300      	movs	r3, #0
 8018764:	f108 0801 	add.w	r8, r8, #1
 8018768:	9305      	str	r3, [sp, #20]
 801876a:	4619      	mov	r1, r3
 801876c:	250a      	movs	r5, #10
 801876e:	4640      	mov	r0, r8
 8018770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018774:	3a30      	subs	r2, #48	; 0x30
 8018776:	2a09      	cmp	r2, #9
 8018778:	d903      	bls.n	8018782 <_vfiprintf_r+0x1ca>
 801877a:	2b00      	cmp	r3, #0
 801877c:	d0c3      	beq.n	8018706 <_vfiprintf_r+0x14e>
 801877e:	9105      	str	r1, [sp, #20]
 8018780:	e7c1      	b.n	8018706 <_vfiprintf_r+0x14e>
 8018782:	fb05 2101 	mla	r1, r5, r1, r2
 8018786:	2301      	movs	r3, #1
 8018788:	4680      	mov	r8, r0
 801878a:	e7f0      	b.n	801876e <_vfiprintf_r+0x1b6>
 801878c:	ab03      	add	r3, sp, #12
 801878e:	9300      	str	r3, [sp, #0]
 8018790:	4622      	mov	r2, r4
 8018792:	4b13      	ldr	r3, [pc, #76]	; (80187e0 <_vfiprintf_r+0x228>)
 8018794:	a904      	add	r1, sp, #16
 8018796:	4630      	mov	r0, r6
 8018798:	f7fd fe14 	bl	80163c4 <_printf_float>
 801879c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80187a0:	4681      	mov	r9, r0
 80187a2:	d1d5      	bne.n	8018750 <_vfiprintf_r+0x198>
 80187a4:	89a3      	ldrh	r3, [r4, #12]
 80187a6:	065b      	lsls	r3, r3, #25
 80187a8:	f53f af7e 	bmi.w	80186a8 <_vfiprintf_r+0xf0>
 80187ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80187ae:	e77d      	b.n	80186ac <_vfiprintf_r+0xf4>
 80187b0:	ab03      	add	r3, sp, #12
 80187b2:	9300      	str	r3, [sp, #0]
 80187b4:	4622      	mov	r2, r4
 80187b6:	4b0a      	ldr	r3, [pc, #40]	; (80187e0 <_vfiprintf_r+0x228>)
 80187b8:	a904      	add	r1, sp, #16
 80187ba:	4630      	mov	r0, r6
 80187bc:	f7fe f8b8 	bl	8016930 <_printf_i>
 80187c0:	e7ec      	b.n	801879c <_vfiprintf_r+0x1e4>
 80187c2:	bf00      	nop
 80187c4:	08018b78 	.word	0x08018b78
 80187c8:	08018cb4 	.word	0x08018cb4
 80187cc:	08018b98 	.word	0x08018b98
 80187d0:	08018b58 	.word	0x08018b58
 80187d4:	08018cba 	.word	0x08018cba
 80187d8:	08018cbe 	.word	0x08018cbe
 80187dc:	080163c5 	.word	0x080163c5
 80187e0:	08018593 	.word	0x08018593

080187e4 <_sbrk_r>:
 80187e4:	b538      	push	{r3, r4, r5, lr}
 80187e6:	4c06      	ldr	r4, [pc, #24]	; (8018800 <_sbrk_r+0x1c>)
 80187e8:	2300      	movs	r3, #0
 80187ea:	4605      	mov	r5, r0
 80187ec:	4608      	mov	r0, r1
 80187ee:	6023      	str	r3, [r4, #0]
 80187f0:	f7f8 fa3e 	bl	8010c70 <_sbrk>
 80187f4:	1c43      	adds	r3, r0, #1
 80187f6:	d102      	bne.n	80187fe <_sbrk_r+0x1a>
 80187f8:	6823      	ldr	r3, [r4, #0]
 80187fa:	b103      	cbz	r3, 80187fe <_sbrk_r+0x1a>
 80187fc:	602b      	str	r3, [r5, #0]
 80187fe:	bd38      	pop	{r3, r4, r5, pc}
 8018800:	2001a7dc 	.word	0x2001a7dc

08018804 <__sread>:
 8018804:	b510      	push	{r4, lr}
 8018806:	460c      	mov	r4, r1
 8018808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801880c:	f000 f8a8 	bl	8018960 <_read_r>
 8018810:	2800      	cmp	r0, #0
 8018812:	bfab      	itete	ge
 8018814:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018816:	89a3      	ldrhlt	r3, [r4, #12]
 8018818:	181b      	addge	r3, r3, r0
 801881a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801881e:	bfac      	ite	ge
 8018820:	6563      	strge	r3, [r4, #84]	; 0x54
 8018822:	81a3      	strhlt	r3, [r4, #12]
 8018824:	bd10      	pop	{r4, pc}

08018826 <__swrite>:
 8018826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801882a:	461f      	mov	r7, r3
 801882c:	898b      	ldrh	r3, [r1, #12]
 801882e:	05db      	lsls	r3, r3, #23
 8018830:	4605      	mov	r5, r0
 8018832:	460c      	mov	r4, r1
 8018834:	4616      	mov	r6, r2
 8018836:	d505      	bpl.n	8018844 <__swrite+0x1e>
 8018838:	2302      	movs	r3, #2
 801883a:	2200      	movs	r2, #0
 801883c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018840:	f000 f868 	bl	8018914 <_lseek_r>
 8018844:	89a3      	ldrh	r3, [r4, #12]
 8018846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801884a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801884e:	81a3      	strh	r3, [r4, #12]
 8018850:	4632      	mov	r2, r6
 8018852:	463b      	mov	r3, r7
 8018854:	4628      	mov	r0, r5
 8018856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801885a:	f000 b817 	b.w	801888c <_write_r>

0801885e <__sseek>:
 801885e:	b510      	push	{r4, lr}
 8018860:	460c      	mov	r4, r1
 8018862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018866:	f000 f855 	bl	8018914 <_lseek_r>
 801886a:	1c43      	adds	r3, r0, #1
 801886c:	89a3      	ldrh	r3, [r4, #12]
 801886e:	bf15      	itete	ne
 8018870:	6560      	strne	r0, [r4, #84]	; 0x54
 8018872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801887a:	81a3      	strheq	r3, [r4, #12]
 801887c:	bf18      	it	ne
 801887e:	81a3      	strhne	r3, [r4, #12]
 8018880:	bd10      	pop	{r4, pc}

08018882 <__sclose>:
 8018882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018886:	f000 b813 	b.w	80188b0 <_close_r>
	...

0801888c <_write_r>:
 801888c:	b538      	push	{r3, r4, r5, lr}
 801888e:	4c07      	ldr	r4, [pc, #28]	; (80188ac <_write_r+0x20>)
 8018890:	4605      	mov	r5, r0
 8018892:	4608      	mov	r0, r1
 8018894:	4611      	mov	r1, r2
 8018896:	2200      	movs	r2, #0
 8018898:	6022      	str	r2, [r4, #0]
 801889a:	461a      	mov	r2, r3
 801889c:	f7f8 f997 	bl	8010bce <_write>
 80188a0:	1c43      	adds	r3, r0, #1
 80188a2:	d102      	bne.n	80188aa <_write_r+0x1e>
 80188a4:	6823      	ldr	r3, [r4, #0]
 80188a6:	b103      	cbz	r3, 80188aa <_write_r+0x1e>
 80188a8:	602b      	str	r3, [r5, #0]
 80188aa:	bd38      	pop	{r3, r4, r5, pc}
 80188ac:	2001a7dc 	.word	0x2001a7dc

080188b0 <_close_r>:
 80188b0:	b538      	push	{r3, r4, r5, lr}
 80188b2:	4c06      	ldr	r4, [pc, #24]	; (80188cc <_close_r+0x1c>)
 80188b4:	2300      	movs	r3, #0
 80188b6:	4605      	mov	r5, r0
 80188b8:	4608      	mov	r0, r1
 80188ba:	6023      	str	r3, [r4, #0]
 80188bc:	f7f8 f9a3 	bl	8010c06 <_close>
 80188c0:	1c43      	adds	r3, r0, #1
 80188c2:	d102      	bne.n	80188ca <_close_r+0x1a>
 80188c4:	6823      	ldr	r3, [r4, #0]
 80188c6:	b103      	cbz	r3, 80188ca <_close_r+0x1a>
 80188c8:	602b      	str	r3, [r5, #0]
 80188ca:	bd38      	pop	{r3, r4, r5, pc}
 80188cc:	2001a7dc 	.word	0x2001a7dc

080188d0 <_fstat_r>:
 80188d0:	b538      	push	{r3, r4, r5, lr}
 80188d2:	4c07      	ldr	r4, [pc, #28]	; (80188f0 <_fstat_r+0x20>)
 80188d4:	2300      	movs	r3, #0
 80188d6:	4605      	mov	r5, r0
 80188d8:	4608      	mov	r0, r1
 80188da:	4611      	mov	r1, r2
 80188dc:	6023      	str	r3, [r4, #0]
 80188de:	f7f8 f99e 	bl	8010c1e <_fstat>
 80188e2:	1c43      	adds	r3, r0, #1
 80188e4:	d102      	bne.n	80188ec <_fstat_r+0x1c>
 80188e6:	6823      	ldr	r3, [r4, #0]
 80188e8:	b103      	cbz	r3, 80188ec <_fstat_r+0x1c>
 80188ea:	602b      	str	r3, [r5, #0]
 80188ec:	bd38      	pop	{r3, r4, r5, pc}
 80188ee:	bf00      	nop
 80188f0:	2001a7dc 	.word	0x2001a7dc

080188f4 <_isatty_r>:
 80188f4:	b538      	push	{r3, r4, r5, lr}
 80188f6:	4c06      	ldr	r4, [pc, #24]	; (8018910 <_isatty_r+0x1c>)
 80188f8:	2300      	movs	r3, #0
 80188fa:	4605      	mov	r5, r0
 80188fc:	4608      	mov	r0, r1
 80188fe:	6023      	str	r3, [r4, #0]
 8018900:	f7f8 f99d 	bl	8010c3e <_isatty>
 8018904:	1c43      	adds	r3, r0, #1
 8018906:	d102      	bne.n	801890e <_isatty_r+0x1a>
 8018908:	6823      	ldr	r3, [r4, #0]
 801890a:	b103      	cbz	r3, 801890e <_isatty_r+0x1a>
 801890c:	602b      	str	r3, [r5, #0]
 801890e:	bd38      	pop	{r3, r4, r5, pc}
 8018910:	2001a7dc 	.word	0x2001a7dc

08018914 <_lseek_r>:
 8018914:	b538      	push	{r3, r4, r5, lr}
 8018916:	4c07      	ldr	r4, [pc, #28]	; (8018934 <_lseek_r+0x20>)
 8018918:	4605      	mov	r5, r0
 801891a:	4608      	mov	r0, r1
 801891c:	4611      	mov	r1, r2
 801891e:	2200      	movs	r2, #0
 8018920:	6022      	str	r2, [r4, #0]
 8018922:	461a      	mov	r2, r3
 8018924:	f7f8 f996 	bl	8010c54 <_lseek>
 8018928:	1c43      	adds	r3, r0, #1
 801892a:	d102      	bne.n	8018932 <_lseek_r+0x1e>
 801892c:	6823      	ldr	r3, [r4, #0]
 801892e:	b103      	cbz	r3, 8018932 <_lseek_r+0x1e>
 8018930:	602b      	str	r3, [r5, #0]
 8018932:	bd38      	pop	{r3, r4, r5, pc}
 8018934:	2001a7dc 	.word	0x2001a7dc

08018938 <__ascii_mbtowc>:
 8018938:	b082      	sub	sp, #8
 801893a:	b901      	cbnz	r1, 801893e <__ascii_mbtowc+0x6>
 801893c:	a901      	add	r1, sp, #4
 801893e:	b142      	cbz	r2, 8018952 <__ascii_mbtowc+0x1a>
 8018940:	b14b      	cbz	r3, 8018956 <__ascii_mbtowc+0x1e>
 8018942:	7813      	ldrb	r3, [r2, #0]
 8018944:	600b      	str	r3, [r1, #0]
 8018946:	7812      	ldrb	r2, [r2, #0]
 8018948:	1c10      	adds	r0, r2, #0
 801894a:	bf18      	it	ne
 801894c:	2001      	movne	r0, #1
 801894e:	b002      	add	sp, #8
 8018950:	4770      	bx	lr
 8018952:	4610      	mov	r0, r2
 8018954:	e7fb      	b.n	801894e <__ascii_mbtowc+0x16>
 8018956:	f06f 0001 	mvn.w	r0, #1
 801895a:	e7f8      	b.n	801894e <__ascii_mbtowc+0x16>

0801895c <__malloc_lock>:
 801895c:	4770      	bx	lr

0801895e <__malloc_unlock>:
 801895e:	4770      	bx	lr

08018960 <_read_r>:
 8018960:	b538      	push	{r3, r4, r5, lr}
 8018962:	4c07      	ldr	r4, [pc, #28]	; (8018980 <_read_r+0x20>)
 8018964:	4605      	mov	r5, r0
 8018966:	4608      	mov	r0, r1
 8018968:	4611      	mov	r1, r2
 801896a:	2200      	movs	r2, #0
 801896c:	6022      	str	r2, [r4, #0]
 801896e:	461a      	mov	r2, r3
 8018970:	f7f8 f910 	bl	8010b94 <_read>
 8018974:	1c43      	adds	r3, r0, #1
 8018976:	d102      	bne.n	801897e <_read_r+0x1e>
 8018978:	6823      	ldr	r3, [r4, #0]
 801897a:	b103      	cbz	r3, 801897e <_read_r+0x1e>
 801897c:	602b      	str	r3, [r5, #0]
 801897e:	bd38      	pop	{r3, r4, r5, pc}
 8018980:	2001a7dc 	.word	0x2001a7dc

08018984 <__ascii_wctomb>:
 8018984:	b149      	cbz	r1, 801899a <__ascii_wctomb+0x16>
 8018986:	2aff      	cmp	r2, #255	; 0xff
 8018988:	bf85      	ittet	hi
 801898a:	238a      	movhi	r3, #138	; 0x8a
 801898c:	6003      	strhi	r3, [r0, #0]
 801898e:	700a      	strbls	r2, [r1, #0]
 8018990:	f04f 30ff 	movhi.w	r0, #4294967295
 8018994:	bf98      	it	ls
 8018996:	2001      	movls	r0, #1
 8018998:	4770      	bx	lr
 801899a:	4608      	mov	r0, r1
 801899c:	4770      	bx	lr
	...

080189a0 <_init>:
 80189a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189a2:	bf00      	nop
 80189a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189a6:	bc08      	pop	{r3}
 80189a8:	469e      	mov	lr, r3
 80189aa:	4770      	bx	lr

080189ac <_fini>:
 80189ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189ae:	bf00      	nop
 80189b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189b2:	bc08      	pop	{r3}
 80189b4:	469e      	mov	lr, r3
 80189b6:	4770      	bx	lr
=======
 8013d72:	e1b2      	b.n	80140da <UART_SetConfig+0x6e2>
 8013d74:	40011000 	.word	0x40011000
 8013d78:	40011400 	.word	0x40011400
 8013d7c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	4ad7      	ldr	r2, [pc, #860]	; (80140e4 <UART_SetConfig+0x6ec>)
 8013d86:	4293      	cmp	r3, r2
 8013d88:	d005      	beq.n	8013d96 <UART_SetConfig+0x39e>
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	4ad6      	ldr	r2, [pc, #856]	; (80140e8 <UART_SetConfig+0x6f0>)
 8013d90:	4293      	cmp	r3, r2
 8013d92:	f040 80d1 	bne.w	8013f38 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8013d96:	f7fd fc43 	bl	8011620 <HAL_RCC_GetPCLK2Freq>
 8013d9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	469a      	mov	sl, r3
 8013da0:	f04f 0b00 	mov.w	fp, #0
 8013da4:	46d0      	mov	r8, sl
 8013da6:	46d9      	mov	r9, fp
 8013da8:	eb18 0308 	adds.w	r3, r8, r8
 8013dac:	eb49 0409 	adc.w	r4, r9, r9
 8013db0:	4698      	mov	r8, r3
 8013db2:	46a1      	mov	r9, r4
 8013db4:	eb18 080a 	adds.w	r8, r8, sl
 8013db8:	eb49 090b 	adc.w	r9, r9, fp
 8013dbc:	f04f 0100 	mov.w	r1, #0
 8013dc0:	f04f 0200 	mov.w	r2, #0
 8013dc4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013dc8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013dcc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013dd0:	4688      	mov	r8, r1
 8013dd2:	4691      	mov	r9, r2
 8013dd4:	eb1a 0508 	adds.w	r5, sl, r8
 8013dd8:	eb4b 0609 	adc.w	r6, fp, r9
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	685b      	ldr	r3, [r3, #4]
 8013de0:	4619      	mov	r1, r3
 8013de2:	f04f 0200 	mov.w	r2, #0
 8013de6:	f04f 0300 	mov.w	r3, #0
 8013dea:	f04f 0400 	mov.w	r4, #0
 8013dee:	0094      	lsls	r4, r2, #2
 8013df0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013df4:	008b      	lsls	r3, r1, #2
 8013df6:	461a      	mov	r2, r3
 8013df8:	4623      	mov	r3, r4
 8013dfa:	4628      	mov	r0, r5
 8013dfc:	4631      	mov	r1, r6
 8013dfe:	f7f4 fe5b 	bl	8008ab8 <__aeabi_uldivmod>
 8013e02:	4603      	mov	r3, r0
 8013e04:	460c      	mov	r4, r1
 8013e06:	461a      	mov	r2, r3
 8013e08:	4bb8      	ldr	r3, [pc, #736]	; (80140ec <UART_SetConfig+0x6f4>)
 8013e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8013e0e:	095b      	lsrs	r3, r3, #5
 8013e10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013e14:	68bb      	ldr	r3, [r7, #8]
 8013e16:	469b      	mov	fp, r3
 8013e18:	f04f 0c00 	mov.w	ip, #0
 8013e1c:	46d9      	mov	r9, fp
 8013e1e:	46e2      	mov	sl, ip
 8013e20:	eb19 0309 	adds.w	r3, r9, r9
 8013e24:	eb4a 040a 	adc.w	r4, sl, sl
 8013e28:	4699      	mov	r9, r3
 8013e2a:	46a2      	mov	sl, r4
 8013e2c:	eb19 090b 	adds.w	r9, r9, fp
 8013e30:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013e34:	f04f 0100 	mov.w	r1, #0
 8013e38:	f04f 0200 	mov.w	r2, #0
 8013e3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013e40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013e44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013e48:	4689      	mov	r9, r1
 8013e4a:	4692      	mov	sl, r2
 8013e4c:	eb1b 0509 	adds.w	r5, fp, r9
 8013e50:	eb4c 060a 	adc.w	r6, ip, sl
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	685b      	ldr	r3, [r3, #4]
 8013e58:	4619      	mov	r1, r3
 8013e5a:	f04f 0200 	mov.w	r2, #0
 8013e5e:	f04f 0300 	mov.w	r3, #0
 8013e62:	f04f 0400 	mov.w	r4, #0
 8013e66:	0094      	lsls	r4, r2, #2
 8013e68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013e6c:	008b      	lsls	r3, r1, #2
 8013e6e:	461a      	mov	r2, r3
 8013e70:	4623      	mov	r3, r4
 8013e72:	4628      	mov	r0, r5
 8013e74:	4631      	mov	r1, r6
 8013e76:	f7f4 fe1f 	bl	8008ab8 <__aeabi_uldivmod>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	460c      	mov	r4, r1
 8013e7e:	461a      	mov	r2, r3
 8013e80:	4b9a      	ldr	r3, [pc, #616]	; (80140ec <UART_SetConfig+0x6f4>)
 8013e82:	fba3 1302 	umull	r1, r3, r3, r2
 8013e86:	095b      	lsrs	r3, r3, #5
 8013e88:	2164      	movs	r1, #100	; 0x64
 8013e8a:	fb01 f303 	mul.w	r3, r1, r3
 8013e8e:	1ad3      	subs	r3, r2, r3
 8013e90:	011b      	lsls	r3, r3, #4
 8013e92:	3332      	adds	r3, #50	; 0x32
 8013e94:	4a95      	ldr	r2, [pc, #596]	; (80140ec <UART_SetConfig+0x6f4>)
 8013e96:	fba2 2303 	umull	r2, r3, r2, r3
 8013e9a:	095b      	lsrs	r3, r3, #5
 8013e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013ea0:	4498      	add	r8, r3
 8013ea2:	68bb      	ldr	r3, [r7, #8]
 8013ea4:	469b      	mov	fp, r3
 8013ea6:	f04f 0c00 	mov.w	ip, #0
 8013eaa:	46d9      	mov	r9, fp
 8013eac:	46e2      	mov	sl, ip
 8013eae:	eb19 0309 	adds.w	r3, r9, r9
 8013eb2:	eb4a 040a 	adc.w	r4, sl, sl
 8013eb6:	4699      	mov	r9, r3
 8013eb8:	46a2      	mov	sl, r4
 8013eba:	eb19 090b 	adds.w	r9, r9, fp
 8013ebe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013ec2:	f04f 0100 	mov.w	r1, #0
 8013ec6:	f04f 0200 	mov.w	r2, #0
 8013eca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013ece:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013ed2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013ed6:	4689      	mov	r9, r1
 8013ed8:	4692      	mov	sl, r2
 8013eda:	eb1b 0509 	adds.w	r5, fp, r9
 8013ede:	eb4c 060a 	adc.w	r6, ip, sl
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	685b      	ldr	r3, [r3, #4]
 8013ee6:	4619      	mov	r1, r3
 8013ee8:	f04f 0200 	mov.w	r2, #0
 8013eec:	f04f 0300 	mov.w	r3, #0
 8013ef0:	f04f 0400 	mov.w	r4, #0
 8013ef4:	0094      	lsls	r4, r2, #2
 8013ef6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013efa:	008b      	lsls	r3, r1, #2
 8013efc:	461a      	mov	r2, r3
 8013efe:	4623      	mov	r3, r4
 8013f00:	4628      	mov	r0, r5
 8013f02:	4631      	mov	r1, r6
 8013f04:	f7f4 fdd8 	bl	8008ab8 <__aeabi_uldivmod>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	460c      	mov	r4, r1
 8013f0c:	461a      	mov	r2, r3
 8013f0e:	4b77      	ldr	r3, [pc, #476]	; (80140ec <UART_SetConfig+0x6f4>)
 8013f10:	fba3 1302 	umull	r1, r3, r3, r2
 8013f14:	095b      	lsrs	r3, r3, #5
 8013f16:	2164      	movs	r1, #100	; 0x64
 8013f18:	fb01 f303 	mul.w	r3, r1, r3
 8013f1c:	1ad3      	subs	r3, r2, r3
 8013f1e:	011b      	lsls	r3, r3, #4
 8013f20:	3332      	adds	r3, #50	; 0x32
 8013f22:	4a72      	ldr	r2, [pc, #456]	; (80140ec <UART_SetConfig+0x6f4>)
 8013f24:	fba2 2303 	umull	r2, r3, r2, r3
 8013f28:	095b      	lsrs	r3, r3, #5
 8013f2a:	f003 020f 	and.w	r2, r3, #15
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	4442      	add	r2, r8
 8013f34:	609a      	str	r2, [r3, #8]
 8013f36:	e0d0      	b.n	80140da <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8013f38:	f7fd fb5e 	bl	80115f8 <HAL_RCC_GetPCLK1Freq>
 8013f3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	469a      	mov	sl, r3
 8013f42:	f04f 0b00 	mov.w	fp, #0
 8013f46:	46d0      	mov	r8, sl
 8013f48:	46d9      	mov	r9, fp
 8013f4a:	eb18 0308 	adds.w	r3, r8, r8
 8013f4e:	eb49 0409 	adc.w	r4, r9, r9
 8013f52:	4698      	mov	r8, r3
 8013f54:	46a1      	mov	r9, r4
 8013f56:	eb18 080a 	adds.w	r8, r8, sl
 8013f5a:	eb49 090b 	adc.w	r9, r9, fp
 8013f5e:	f04f 0100 	mov.w	r1, #0
 8013f62:	f04f 0200 	mov.w	r2, #0
 8013f66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013f6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013f6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013f72:	4688      	mov	r8, r1
 8013f74:	4691      	mov	r9, r2
 8013f76:	eb1a 0508 	adds.w	r5, sl, r8
 8013f7a:	eb4b 0609 	adc.w	r6, fp, r9
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	685b      	ldr	r3, [r3, #4]
 8013f82:	4619      	mov	r1, r3
 8013f84:	f04f 0200 	mov.w	r2, #0
 8013f88:	f04f 0300 	mov.w	r3, #0
 8013f8c:	f04f 0400 	mov.w	r4, #0
 8013f90:	0094      	lsls	r4, r2, #2
 8013f92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013f96:	008b      	lsls	r3, r1, #2
 8013f98:	461a      	mov	r2, r3
 8013f9a:	4623      	mov	r3, r4
 8013f9c:	4628      	mov	r0, r5
 8013f9e:	4631      	mov	r1, r6
 8013fa0:	f7f4 fd8a 	bl	8008ab8 <__aeabi_uldivmod>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	460c      	mov	r4, r1
 8013fa8:	461a      	mov	r2, r3
 8013faa:	4b50      	ldr	r3, [pc, #320]	; (80140ec <UART_SetConfig+0x6f4>)
 8013fac:	fba3 2302 	umull	r2, r3, r3, r2
 8013fb0:	095b      	lsrs	r3, r3, #5
 8013fb2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	469b      	mov	fp, r3
 8013fba:	f04f 0c00 	mov.w	ip, #0
 8013fbe:	46d9      	mov	r9, fp
 8013fc0:	46e2      	mov	sl, ip
 8013fc2:	eb19 0309 	adds.w	r3, r9, r9
 8013fc6:	eb4a 040a 	adc.w	r4, sl, sl
 8013fca:	4699      	mov	r9, r3
 8013fcc:	46a2      	mov	sl, r4
 8013fce:	eb19 090b 	adds.w	r9, r9, fp
 8013fd2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013fd6:	f04f 0100 	mov.w	r1, #0
 8013fda:	f04f 0200 	mov.w	r2, #0
 8013fde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013fe2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013fe6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013fea:	4689      	mov	r9, r1
 8013fec:	4692      	mov	sl, r2
 8013fee:	eb1b 0509 	adds.w	r5, fp, r9
 8013ff2:	eb4c 060a 	adc.w	r6, ip, sl
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	685b      	ldr	r3, [r3, #4]
 8013ffa:	4619      	mov	r1, r3
 8013ffc:	f04f 0200 	mov.w	r2, #0
 8014000:	f04f 0300 	mov.w	r3, #0
 8014004:	f04f 0400 	mov.w	r4, #0
 8014008:	0094      	lsls	r4, r2, #2
 801400a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801400e:	008b      	lsls	r3, r1, #2
 8014010:	461a      	mov	r2, r3
 8014012:	4623      	mov	r3, r4
 8014014:	4628      	mov	r0, r5
 8014016:	4631      	mov	r1, r6
 8014018:	f7f4 fd4e 	bl	8008ab8 <__aeabi_uldivmod>
 801401c:	4603      	mov	r3, r0
 801401e:	460c      	mov	r4, r1
 8014020:	461a      	mov	r2, r3
 8014022:	4b32      	ldr	r3, [pc, #200]	; (80140ec <UART_SetConfig+0x6f4>)
 8014024:	fba3 1302 	umull	r1, r3, r3, r2
 8014028:	095b      	lsrs	r3, r3, #5
 801402a:	2164      	movs	r1, #100	; 0x64
 801402c:	fb01 f303 	mul.w	r3, r1, r3
 8014030:	1ad3      	subs	r3, r2, r3
 8014032:	011b      	lsls	r3, r3, #4
 8014034:	3332      	adds	r3, #50	; 0x32
 8014036:	4a2d      	ldr	r2, [pc, #180]	; (80140ec <UART_SetConfig+0x6f4>)
 8014038:	fba2 2303 	umull	r2, r3, r2, r3
 801403c:	095b      	lsrs	r3, r3, #5
 801403e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014042:	4498      	add	r8, r3
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	469b      	mov	fp, r3
 8014048:	f04f 0c00 	mov.w	ip, #0
 801404c:	46d9      	mov	r9, fp
 801404e:	46e2      	mov	sl, ip
 8014050:	eb19 0309 	adds.w	r3, r9, r9
 8014054:	eb4a 040a 	adc.w	r4, sl, sl
 8014058:	4699      	mov	r9, r3
 801405a:	46a2      	mov	sl, r4
 801405c:	eb19 090b 	adds.w	r9, r9, fp
 8014060:	eb4a 0a0c 	adc.w	sl, sl, ip
 8014064:	f04f 0100 	mov.w	r1, #0
 8014068:	f04f 0200 	mov.w	r2, #0
 801406c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014070:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014074:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014078:	4689      	mov	r9, r1
 801407a:	4692      	mov	sl, r2
 801407c:	eb1b 0509 	adds.w	r5, fp, r9
 8014080:	eb4c 060a 	adc.w	r6, ip, sl
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	685b      	ldr	r3, [r3, #4]
 8014088:	4619      	mov	r1, r3
 801408a:	f04f 0200 	mov.w	r2, #0
 801408e:	f04f 0300 	mov.w	r3, #0
 8014092:	f04f 0400 	mov.w	r4, #0
 8014096:	0094      	lsls	r4, r2, #2
 8014098:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801409c:	008b      	lsls	r3, r1, #2
 801409e:	461a      	mov	r2, r3
 80140a0:	4623      	mov	r3, r4
 80140a2:	4628      	mov	r0, r5
 80140a4:	4631      	mov	r1, r6
 80140a6:	f7f4 fd07 	bl	8008ab8 <__aeabi_uldivmod>
 80140aa:	4603      	mov	r3, r0
 80140ac:	460c      	mov	r4, r1
 80140ae:	461a      	mov	r2, r3
 80140b0:	4b0e      	ldr	r3, [pc, #56]	; (80140ec <UART_SetConfig+0x6f4>)
 80140b2:	fba3 1302 	umull	r1, r3, r3, r2
 80140b6:	095b      	lsrs	r3, r3, #5
 80140b8:	2164      	movs	r1, #100	; 0x64
 80140ba:	fb01 f303 	mul.w	r3, r1, r3
 80140be:	1ad3      	subs	r3, r2, r3
 80140c0:	011b      	lsls	r3, r3, #4
 80140c2:	3332      	adds	r3, #50	; 0x32
 80140c4:	4a09      	ldr	r2, [pc, #36]	; (80140ec <UART_SetConfig+0x6f4>)
 80140c6:	fba2 2303 	umull	r2, r3, r2, r3
 80140ca:	095b      	lsrs	r3, r3, #5
 80140cc:	f003 020f 	and.w	r2, r3, #15
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	4442      	add	r2, r8
 80140d6:	609a      	str	r2, [r3, #8]
}
 80140d8:	e7ff      	b.n	80140da <UART_SetConfig+0x6e2>
 80140da:	bf00      	nop
 80140dc:	3714      	adds	r7, #20
 80140de:	46bd      	mov	sp, r7
 80140e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140e4:	40011000 	.word	0x40011000
 80140e8:	40011400 	.word	0x40011400
 80140ec:	51eb851f 	.word	0x51eb851f

080140f0 <round>:
 80140f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140f2:	ec57 6b10 	vmov	r6, r7, d0
 80140f6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80140fa:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80140fe:	2c13      	cmp	r4, #19
 8014100:	463b      	mov	r3, r7
 8014102:	463d      	mov	r5, r7
 8014104:	dc17      	bgt.n	8014136 <round+0x46>
 8014106:	2c00      	cmp	r4, #0
 8014108:	da09      	bge.n	801411e <round+0x2e>
 801410a:	3401      	adds	r4, #1
 801410c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8014110:	d103      	bne.n	801411a <round+0x2a>
 8014112:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8014116:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801411a:	2100      	movs	r1, #0
 801411c:	e02c      	b.n	8014178 <round+0x88>
 801411e:	4a18      	ldr	r2, [pc, #96]	; (8014180 <round+0x90>)
 8014120:	4122      	asrs	r2, r4
 8014122:	4217      	tst	r7, r2
 8014124:	d100      	bne.n	8014128 <round+0x38>
 8014126:	b19e      	cbz	r6, 8014150 <round+0x60>
 8014128:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801412c:	4123      	asrs	r3, r4
 801412e:	442b      	add	r3, r5
 8014130:	ea23 0302 	bic.w	r3, r3, r2
 8014134:	e7f1      	b.n	801411a <round+0x2a>
 8014136:	2c33      	cmp	r4, #51	; 0x33
 8014138:	dd0d      	ble.n	8014156 <round+0x66>
 801413a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801413e:	d107      	bne.n	8014150 <round+0x60>
 8014140:	4630      	mov	r0, r6
 8014142:	4639      	mov	r1, r7
 8014144:	ee10 2a10 	vmov	r2, s0
 8014148:	f7f3 ffd8 	bl	80080fc <__adddf3>
 801414c:	4606      	mov	r6, r0
 801414e:	460f      	mov	r7, r1
 8014150:	ec47 6b10 	vmov	d0, r6, r7
 8014154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014156:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801415a:	f04f 30ff 	mov.w	r0, #4294967295
 801415e:	40d0      	lsrs	r0, r2
 8014160:	4206      	tst	r6, r0
 8014162:	d0f5      	beq.n	8014150 <round+0x60>
 8014164:	2201      	movs	r2, #1
 8014166:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801416a:	fa02 f404 	lsl.w	r4, r2, r4
 801416e:	1931      	adds	r1, r6, r4
 8014170:	bf28      	it	cs
 8014172:	189b      	addcs	r3, r3, r2
 8014174:	ea21 0100 	bic.w	r1, r1, r0
 8014178:	461f      	mov	r7, r3
 801417a:	460e      	mov	r6, r1
 801417c:	e7e8      	b.n	8014150 <round+0x60>
 801417e:	bf00      	nop
 8014180:	000fffff 	.word	0x000fffff

08014184 <__errno>:
 8014184:	4b01      	ldr	r3, [pc, #4]	; (801418c <__errno+0x8>)
 8014186:	6818      	ldr	r0, [r3, #0]
 8014188:	4770      	bx	lr
 801418a:	bf00      	nop
 801418c:	20000d0c 	.word	0x20000d0c

08014190 <__libc_init_array>:
 8014190:	b570      	push	{r4, r5, r6, lr}
 8014192:	4e0d      	ldr	r6, [pc, #52]	; (80141c8 <__libc_init_array+0x38>)
 8014194:	4c0d      	ldr	r4, [pc, #52]	; (80141cc <__libc_init_array+0x3c>)
 8014196:	1ba4      	subs	r4, r4, r6
 8014198:	10a4      	asrs	r4, r4, #2
 801419a:	2500      	movs	r5, #0
 801419c:	42a5      	cmp	r5, r4
 801419e:	d109      	bne.n	80141b4 <__libc_init_array+0x24>
 80141a0:	4e0b      	ldr	r6, [pc, #44]	; (80141d0 <__libc_init_array+0x40>)
 80141a2:	4c0c      	ldr	r4, [pc, #48]	; (80141d4 <__libc_init_array+0x44>)
 80141a4:	f002 fbac 	bl	8016900 <_init>
 80141a8:	1ba4      	subs	r4, r4, r6
 80141aa:	10a4      	asrs	r4, r4, #2
 80141ac:	2500      	movs	r5, #0
 80141ae:	42a5      	cmp	r5, r4
 80141b0:	d105      	bne.n	80141be <__libc_init_array+0x2e>
 80141b2:	bd70      	pop	{r4, r5, r6, pc}
 80141b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80141b8:	4798      	blx	r3
 80141ba:	3501      	adds	r5, #1
 80141bc:	e7ee      	b.n	801419c <__libc_init_array+0xc>
 80141be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80141c2:	4798      	blx	r3
 80141c4:	3501      	adds	r5, #1
 80141c6:	e7f2      	b.n	80141ae <__libc_init_array+0x1e>
 80141c8:	08016d40 	.word	0x08016d40
 80141cc:	08016d40 	.word	0x08016d40
 80141d0:	08016d40 	.word	0x08016d40
 80141d4:	08016d44 	.word	0x08016d44

080141d8 <memcpy>:
 80141d8:	b510      	push	{r4, lr}
 80141da:	1e43      	subs	r3, r0, #1
 80141dc:	440a      	add	r2, r1
 80141de:	4291      	cmp	r1, r2
 80141e0:	d100      	bne.n	80141e4 <memcpy+0xc>
 80141e2:	bd10      	pop	{r4, pc}
 80141e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80141e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80141ec:	e7f7      	b.n	80141de <memcpy+0x6>

080141ee <memset>:
 80141ee:	4402      	add	r2, r0
 80141f0:	4603      	mov	r3, r0
 80141f2:	4293      	cmp	r3, r2
 80141f4:	d100      	bne.n	80141f8 <memset+0xa>
 80141f6:	4770      	bx	lr
 80141f8:	f803 1b01 	strb.w	r1, [r3], #1
 80141fc:	e7f9      	b.n	80141f2 <memset+0x4>

080141fe <__cvt>:
 80141fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014202:	ec55 4b10 	vmov	r4, r5, d0
 8014206:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014208:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801420c:	2d00      	cmp	r5, #0
 801420e:	460e      	mov	r6, r1
 8014210:	4691      	mov	r9, r2
 8014212:	4619      	mov	r1, r3
 8014214:	bfb8      	it	lt
 8014216:	4622      	movlt	r2, r4
 8014218:	462b      	mov	r3, r5
 801421a:	f027 0720 	bic.w	r7, r7, #32
 801421e:	bfbb      	ittet	lt
 8014220:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014224:	461d      	movlt	r5, r3
 8014226:	2300      	movge	r3, #0
 8014228:	232d      	movlt	r3, #45	; 0x2d
 801422a:	bfb8      	it	lt
 801422c:	4614      	movlt	r4, r2
 801422e:	2f46      	cmp	r7, #70	; 0x46
 8014230:	700b      	strb	r3, [r1, #0]
 8014232:	d004      	beq.n	801423e <__cvt+0x40>
 8014234:	2f45      	cmp	r7, #69	; 0x45
 8014236:	d100      	bne.n	801423a <__cvt+0x3c>
 8014238:	3601      	adds	r6, #1
 801423a:	2102      	movs	r1, #2
 801423c:	e000      	b.n	8014240 <__cvt+0x42>
 801423e:	2103      	movs	r1, #3
 8014240:	ab03      	add	r3, sp, #12
 8014242:	9301      	str	r3, [sp, #4]
 8014244:	ab02      	add	r3, sp, #8
 8014246:	9300      	str	r3, [sp, #0]
 8014248:	4632      	mov	r2, r6
 801424a:	4653      	mov	r3, sl
 801424c:	ec45 4b10 	vmov	d0, r4, r5
 8014250:	f000 fdfa 	bl	8014e48 <_dtoa_r>
 8014254:	2f47      	cmp	r7, #71	; 0x47
 8014256:	4680      	mov	r8, r0
 8014258:	d102      	bne.n	8014260 <__cvt+0x62>
 801425a:	f019 0f01 	tst.w	r9, #1
 801425e:	d026      	beq.n	80142ae <__cvt+0xb0>
 8014260:	2f46      	cmp	r7, #70	; 0x46
 8014262:	eb08 0906 	add.w	r9, r8, r6
 8014266:	d111      	bne.n	801428c <__cvt+0x8e>
 8014268:	f898 3000 	ldrb.w	r3, [r8]
 801426c:	2b30      	cmp	r3, #48	; 0x30
 801426e:	d10a      	bne.n	8014286 <__cvt+0x88>
 8014270:	2200      	movs	r2, #0
 8014272:	2300      	movs	r3, #0
 8014274:	4620      	mov	r0, r4
 8014276:	4629      	mov	r1, r5
 8014278:	f7f4 fb5e 	bl	8008938 <__aeabi_dcmpeq>
 801427c:	b918      	cbnz	r0, 8014286 <__cvt+0x88>
 801427e:	f1c6 0601 	rsb	r6, r6, #1
 8014282:	f8ca 6000 	str.w	r6, [sl]
 8014286:	f8da 3000 	ldr.w	r3, [sl]
 801428a:	4499      	add	r9, r3
 801428c:	2200      	movs	r2, #0
 801428e:	2300      	movs	r3, #0
 8014290:	4620      	mov	r0, r4
 8014292:	4629      	mov	r1, r5
 8014294:	f7f4 fb50 	bl	8008938 <__aeabi_dcmpeq>
 8014298:	b938      	cbnz	r0, 80142aa <__cvt+0xac>
 801429a:	2230      	movs	r2, #48	; 0x30
 801429c:	9b03      	ldr	r3, [sp, #12]
 801429e:	454b      	cmp	r3, r9
 80142a0:	d205      	bcs.n	80142ae <__cvt+0xb0>
 80142a2:	1c59      	adds	r1, r3, #1
 80142a4:	9103      	str	r1, [sp, #12]
 80142a6:	701a      	strb	r2, [r3, #0]
 80142a8:	e7f8      	b.n	801429c <__cvt+0x9e>
 80142aa:	f8cd 900c 	str.w	r9, [sp, #12]
 80142ae:	9b03      	ldr	r3, [sp, #12]
 80142b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80142b2:	eba3 0308 	sub.w	r3, r3, r8
 80142b6:	4640      	mov	r0, r8
 80142b8:	6013      	str	r3, [r2, #0]
 80142ba:	b004      	add	sp, #16
 80142bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080142c0 <__exponent>:
 80142c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80142c2:	2900      	cmp	r1, #0
 80142c4:	4604      	mov	r4, r0
 80142c6:	bfba      	itte	lt
 80142c8:	4249      	neglt	r1, r1
 80142ca:	232d      	movlt	r3, #45	; 0x2d
 80142cc:	232b      	movge	r3, #43	; 0x2b
 80142ce:	2909      	cmp	r1, #9
 80142d0:	f804 2b02 	strb.w	r2, [r4], #2
 80142d4:	7043      	strb	r3, [r0, #1]
 80142d6:	dd20      	ble.n	801431a <__exponent+0x5a>
 80142d8:	f10d 0307 	add.w	r3, sp, #7
 80142dc:	461f      	mov	r7, r3
 80142de:	260a      	movs	r6, #10
 80142e0:	fb91 f5f6 	sdiv	r5, r1, r6
 80142e4:	fb06 1115 	mls	r1, r6, r5, r1
 80142e8:	3130      	adds	r1, #48	; 0x30
 80142ea:	2d09      	cmp	r5, #9
 80142ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80142f0:	f103 32ff 	add.w	r2, r3, #4294967295
 80142f4:	4629      	mov	r1, r5
 80142f6:	dc09      	bgt.n	801430c <__exponent+0x4c>
 80142f8:	3130      	adds	r1, #48	; 0x30
 80142fa:	3b02      	subs	r3, #2
 80142fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014300:	42bb      	cmp	r3, r7
 8014302:	4622      	mov	r2, r4
 8014304:	d304      	bcc.n	8014310 <__exponent+0x50>
 8014306:	1a10      	subs	r0, r2, r0
 8014308:	b003      	add	sp, #12
 801430a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801430c:	4613      	mov	r3, r2
 801430e:	e7e7      	b.n	80142e0 <__exponent+0x20>
 8014310:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014314:	f804 2b01 	strb.w	r2, [r4], #1
 8014318:	e7f2      	b.n	8014300 <__exponent+0x40>
 801431a:	2330      	movs	r3, #48	; 0x30
 801431c:	4419      	add	r1, r3
 801431e:	7083      	strb	r3, [r0, #2]
 8014320:	1d02      	adds	r2, r0, #4
 8014322:	70c1      	strb	r1, [r0, #3]
 8014324:	e7ef      	b.n	8014306 <__exponent+0x46>
	...

08014328 <_printf_float>:
 8014328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801432c:	b08d      	sub	sp, #52	; 0x34
 801432e:	460c      	mov	r4, r1
 8014330:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014334:	4616      	mov	r6, r2
 8014336:	461f      	mov	r7, r3
 8014338:	4605      	mov	r5, r0
 801433a:	f001 fcb7 	bl	8015cac <_localeconv_r>
 801433e:	6803      	ldr	r3, [r0, #0]
 8014340:	9304      	str	r3, [sp, #16]
 8014342:	4618      	mov	r0, r3
 8014344:	f7f3 fe7c 	bl	8008040 <strlen>
 8014348:	2300      	movs	r3, #0
 801434a:	930a      	str	r3, [sp, #40]	; 0x28
 801434c:	f8d8 3000 	ldr.w	r3, [r8]
 8014350:	9005      	str	r0, [sp, #20]
 8014352:	3307      	adds	r3, #7
 8014354:	f023 0307 	bic.w	r3, r3, #7
 8014358:	f103 0208 	add.w	r2, r3, #8
 801435c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014360:	f8d4 b000 	ldr.w	fp, [r4]
 8014364:	f8c8 2000 	str.w	r2, [r8]
 8014368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801436c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014370:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014374:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014378:	9307      	str	r3, [sp, #28]
 801437a:	f8cd 8018 	str.w	r8, [sp, #24]
 801437e:	f04f 32ff 	mov.w	r2, #4294967295
 8014382:	4ba7      	ldr	r3, [pc, #668]	; (8014620 <_printf_float+0x2f8>)
 8014384:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014388:	f7f4 fb08 	bl	800899c <__aeabi_dcmpun>
 801438c:	bb70      	cbnz	r0, 80143ec <_printf_float+0xc4>
 801438e:	f04f 32ff 	mov.w	r2, #4294967295
 8014392:	4ba3      	ldr	r3, [pc, #652]	; (8014620 <_printf_float+0x2f8>)
 8014394:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014398:	f7f4 fae2 	bl	8008960 <__aeabi_dcmple>
 801439c:	bb30      	cbnz	r0, 80143ec <_printf_float+0xc4>
 801439e:	2200      	movs	r2, #0
 80143a0:	2300      	movs	r3, #0
 80143a2:	4640      	mov	r0, r8
 80143a4:	4649      	mov	r1, r9
 80143a6:	f7f4 fad1 	bl	800894c <__aeabi_dcmplt>
 80143aa:	b110      	cbz	r0, 80143b2 <_printf_float+0x8a>
 80143ac:	232d      	movs	r3, #45	; 0x2d
 80143ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80143b2:	4a9c      	ldr	r2, [pc, #624]	; (8014624 <_printf_float+0x2fc>)
 80143b4:	4b9c      	ldr	r3, [pc, #624]	; (8014628 <_printf_float+0x300>)
 80143b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80143ba:	bf8c      	ite	hi
 80143bc:	4690      	movhi	r8, r2
 80143be:	4698      	movls	r8, r3
 80143c0:	2303      	movs	r3, #3
 80143c2:	f02b 0204 	bic.w	r2, fp, #4
 80143c6:	6123      	str	r3, [r4, #16]
 80143c8:	6022      	str	r2, [r4, #0]
 80143ca:	f04f 0900 	mov.w	r9, #0
 80143ce:	9700      	str	r7, [sp, #0]
 80143d0:	4633      	mov	r3, r6
 80143d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80143d4:	4621      	mov	r1, r4
 80143d6:	4628      	mov	r0, r5
 80143d8:	f000 f9e6 	bl	80147a8 <_printf_common>
 80143dc:	3001      	adds	r0, #1
 80143de:	f040 808d 	bne.w	80144fc <_printf_float+0x1d4>
 80143e2:	f04f 30ff 	mov.w	r0, #4294967295
 80143e6:	b00d      	add	sp, #52	; 0x34
 80143e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ec:	4642      	mov	r2, r8
 80143ee:	464b      	mov	r3, r9
 80143f0:	4640      	mov	r0, r8
 80143f2:	4649      	mov	r1, r9
 80143f4:	f7f4 fad2 	bl	800899c <__aeabi_dcmpun>
 80143f8:	b110      	cbz	r0, 8014400 <_printf_float+0xd8>
 80143fa:	4a8c      	ldr	r2, [pc, #560]	; (801462c <_printf_float+0x304>)
 80143fc:	4b8c      	ldr	r3, [pc, #560]	; (8014630 <_printf_float+0x308>)
 80143fe:	e7da      	b.n	80143b6 <_printf_float+0x8e>
 8014400:	6861      	ldr	r1, [r4, #4]
 8014402:	1c4b      	adds	r3, r1, #1
 8014404:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014408:	a80a      	add	r0, sp, #40	; 0x28
 801440a:	d13e      	bne.n	801448a <_printf_float+0x162>
 801440c:	2306      	movs	r3, #6
 801440e:	6063      	str	r3, [r4, #4]
 8014410:	2300      	movs	r3, #0
 8014412:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014416:	ab09      	add	r3, sp, #36	; 0x24
 8014418:	9300      	str	r3, [sp, #0]
 801441a:	ec49 8b10 	vmov	d0, r8, r9
 801441e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014422:	6022      	str	r2, [r4, #0]
 8014424:	f8cd a004 	str.w	sl, [sp, #4]
 8014428:	6861      	ldr	r1, [r4, #4]
 801442a:	4628      	mov	r0, r5
 801442c:	f7ff fee7 	bl	80141fe <__cvt>
 8014430:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014434:	2b47      	cmp	r3, #71	; 0x47
 8014436:	4680      	mov	r8, r0
 8014438:	d109      	bne.n	801444e <_printf_float+0x126>
 801443a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801443c:	1cd8      	adds	r0, r3, #3
 801443e:	db02      	blt.n	8014446 <_printf_float+0x11e>
 8014440:	6862      	ldr	r2, [r4, #4]
 8014442:	4293      	cmp	r3, r2
 8014444:	dd47      	ble.n	80144d6 <_printf_float+0x1ae>
 8014446:	f1aa 0a02 	sub.w	sl, sl, #2
 801444a:	fa5f fa8a 	uxtb.w	sl, sl
 801444e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014452:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014454:	d824      	bhi.n	80144a0 <_printf_float+0x178>
 8014456:	3901      	subs	r1, #1
 8014458:	4652      	mov	r2, sl
 801445a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801445e:	9109      	str	r1, [sp, #36]	; 0x24
 8014460:	f7ff ff2e 	bl	80142c0 <__exponent>
 8014464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014466:	1813      	adds	r3, r2, r0
 8014468:	2a01      	cmp	r2, #1
 801446a:	4681      	mov	r9, r0
 801446c:	6123      	str	r3, [r4, #16]
 801446e:	dc02      	bgt.n	8014476 <_printf_float+0x14e>
 8014470:	6822      	ldr	r2, [r4, #0]
 8014472:	07d1      	lsls	r1, r2, #31
 8014474:	d501      	bpl.n	801447a <_printf_float+0x152>
 8014476:	3301      	adds	r3, #1
 8014478:	6123      	str	r3, [r4, #16]
 801447a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801447e:	2b00      	cmp	r3, #0
 8014480:	d0a5      	beq.n	80143ce <_printf_float+0xa6>
 8014482:	232d      	movs	r3, #45	; 0x2d
 8014484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014488:	e7a1      	b.n	80143ce <_printf_float+0xa6>
 801448a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801448e:	f000 8177 	beq.w	8014780 <_printf_float+0x458>
 8014492:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014496:	d1bb      	bne.n	8014410 <_printf_float+0xe8>
 8014498:	2900      	cmp	r1, #0
 801449a:	d1b9      	bne.n	8014410 <_printf_float+0xe8>
 801449c:	2301      	movs	r3, #1
 801449e:	e7b6      	b.n	801440e <_printf_float+0xe6>
 80144a0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80144a4:	d119      	bne.n	80144da <_printf_float+0x1b2>
 80144a6:	2900      	cmp	r1, #0
 80144a8:	6863      	ldr	r3, [r4, #4]
 80144aa:	dd0c      	ble.n	80144c6 <_printf_float+0x19e>
 80144ac:	6121      	str	r1, [r4, #16]
 80144ae:	b913      	cbnz	r3, 80144b6 <_printf_float+0x18e>
 80144b0:	6822      	ldr	r2, [r4, #0]
 80144b2:	07d2      	lsls	r2, r2, #31
 80144b4:	d502      	bpl.n	80144bc <_printf_float+0x194>
 80144b6:	3301      	adds	r3, #1
 80144b8:	440b      	add	r3, r1
 80144ba:	6123      	str	r3, [r4, #16]
 80144bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144be:	65a3      	str	r3, [r4, #88]	; 0x58
 80144c0:	f04f 0900 	mov.w	r9, #0
 80144c4:	e7d9      	b.n	801447a <_printf_float+0x152>
 80144c6:	b913      	cbnz	r3, 80144ce <_printf_float+0x1a6>
 80144c8:	6822      	ldr	r2, [r4, #0]
 80144ca:	07d0      	lsls	r0, r2, #31
 80144cc:	d501      	bpl.n	80144d2 <_printf_float+0x1aa>
 80144ce:	3302      	adds	r3, #2
 80144d0:	e7f3      	b.n	80144ba <_printf_float+0x192>
 80144d2:	2301      	movs	r3, #1
 80144d4:	e7f1      	b.n	80144ba <_printf_float+0x192>
 80144d6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80144da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80144de:	4293      	cmp	r3, r2
 80144e0:	db05      	blt.n	80144ee <_printf_float+0x1c6>
 80144e2:	6822      	ldr	r2, [r4, #0]
 80144e4:	6123      	str	r3, [r4, #16]
 80144e6:	07d1      	lsls	r1, r2, #31
 80144e8:	d5e8      	bpl.n	80144bc <_printf_float+0x194>
 80144ea:	3301      	adds	r3, #1
 80144ec:	e7e5      	b.n	80144ba <_printf_float+0x192>
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	bfd4      	ite	le
 80144f2:	f1c3 0302 	rsble	r3, r3, #2
 80144f6:	2301      	movgt	r3, #1
 80144f8:	4413      	add	r3, r2
 80144fa:	e7de      	b.n	80144ba <_printf_float+0x192>
 80144fc:	6823      	ldr	r3, [r4, #0]
 80144fe:	055a      	lsls	r2, r3, #21
 8014500:	d407      	bmi.n	8014512 <_printf_float+0x1ea>
 8014502:	6923      	ldr	r3, [r4, #16]
 8014504:	4642      	mov	r2, r8
 8014506:	4631      	mov	r1, r6
 8014508:	4628      	mov	r0, r5
 801450a:	47b8      	blx	r7
 801450c:	3001      	adds	r0, #1
 801450e:	d12b      	bne.n	8014568 <_printf_float+0x240>
 8014510:	e767      	b.n	80143e2 <_printf_float+0xba>
 8014512:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014516:	f240 80dc 	bls.w	80146d2 <_printf_float+0x3aa>
 801451a:	2200      	movs	r2, #0
 801451c:	2300      	movs	r3, #0
 801451e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014522:	f7f4 fa09 	bl	8008938 <__aeabi_dcmpeq>
 8014526:	2800      	cmp	r0, #0
 8014528:	d033      	beq.n	8014592 <_printf_float+0x26a>
 801452a:	2301      	movs	r3, #1
 801452c:	4a41      	ldr	r2, [pc, #260]	; (8014634 <_printf_float+0x30c>)
 801452e:	4631      	mov	r1, r6
 8014530:	4628      	mov	r0, r5
 8014532:	47b8      	blx	r7
 8014534:	3001      	adds	r0, #1
 8014536:	f43f af54 	beq.w	80143e2 <_printf_float+0xba>
 801453a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801453e:	429a      	cmp	r2, r3
 8014540:	db02      	blt.n	8014548 <_printf_float+0x220>
 8014542:	6823      	ldr	r3, [r4, #0]
 8014544:	07d8      	lsls	r0, r3, #31
 8014546:	d50f      	bpl.n	8014568 <_printf_float+0x240>
 8014548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801454c:	4631      	mov	r1, r6
 801454e:	4628      	mov	r0, r5
 8014550:	47b8      	blx	r7
 8014552:	3001      	adds	r0, #1
 8014554:	f43f af45 	beq.w	80143e2 <_printf_float+0xba>
 8014558:	f04f 0800 	mov.w	r8, #0
 801455c:	f104 091a 	add.w	r9, r4, #26
 8014560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014562:	3b01      	subs	r3, #1
 8014564:	4543      	cmp	r3, r8
 8014566:	dc09      	bgt.n	801457c <_printf_float+0x254>
 8014568:	6823      	ldr	r3, [r4, #0]
 801456a:	079b      	lsls	r3, r3, #30
 801456c:	f100 8103 	bmi.w	8014776 <_printf_float+0x44e>
 8014570:	68e0      	ldr	r0, [r4, #12]
 8014572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014574:	4298      	cmp	r0, r3
 8014576:	bfb8      	it	lt
 8014578:	4618      	movlt	r0, r3
 801457a:	e734      	b.n	80143e6 <_printf_float+0xbe>
 801457c:	2301      	movs	r3, #1
 801457e:	464a      	mov	r2, r9
 8014580:	4631      	mov	r1, r6
 8014582:	4628      	mov	r0, r5
 8014584:	47b8      	blx	r7
 8014586:	3001      	adds	r0, #1
 8014588:	f43f af2b 	beq.w	80143e2 <_printf_float+0xba>
 801458c:	f108 0801 	add.w	r8, r8, #1
 8014590:	e7e6      	b.n	8014560 <_printf_float+0x238>
 8014592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014594:	2b00      	cmp	r3, #0
 8014596:	dc2b      	bgt.n	80145f0 <_printf_float+0x2c8>
 8014598:	2301      	movs	r3, #1
 801459a:	4a26      	ldr	r2, [pc, #152]	; (8014634 <_printf_float+0x30c>)
 801459c:	4631      	mov	r1, r6
 801459e:	4628      	mov	r0, r5
 80145a0:	47b8      	blx	r7
 80145a2:	3001      	adds	r0, #1
 80145a4:	f43f af1d 	beq.w	80143e2 <_printf_float+0xba>
 80145a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145aa:	b923      	cbnz	r3, 80145b6 <_printf_float+0x28e>
 80145ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145ae:	b913      	cbnz	r3, 80145b6 <_printf_float+0x28e>
 80145b0:	6823      	ldr	r3, [r4, #0]
 80145b2:	07d9      	lsls	r1, r3, #31
 80145b4:	d5d8      	bpl.n	8014568 <_printf_float+0x240>
 80145b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80145ba:	4631      	mov	r1, r6
 80145bc:	4628      	mov	r0, r5
 80145be:	47b8      	blx	r7
 80145c0:	3001      	adds	r0, #1
 80145c2:	f43f af0e 	beq.w	80143e2 <_printf_float+0xba>
 80145c6:	f04f 0900 	mov.w	r9, #0
 80145ca:	f104 0a1a 	add.w	sl, r4, #26
 80145ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145d0:	425b      	negs	r3, r3
 80145d2:	454b      	cmp	r3, r9
 80145d4:	dc01      	bgt.n	80145da <_printf_float+0x2b2>
 80145d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145d8:	e794      	b.n	8014504 <_printf_float+0x1dc>
 80145da:	2301      	movs	r3, #1
 80145dc:	4652      	mov	r2, sl
 80145de:	4631      	mov	r1, r6
 80145e0:	4628      	mov	r0, r5
 80145e2:	47b8      	blx	r7
 80145e4:	3001      	adds	r0, #1
 80145e6:	f43f aefc 	beq.w	80143e2 <_printf_float+0xba>
 80145ea:	f109 0901 	add.w	r9, r9, #1
 80145ee:	e7ee      	b.n	80145ce <_printf_float+0x2a6>
 80145f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80145f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80145f4:	429a      	cmp	r2, r3
 80145f6:	bfa8      	it	ge
 80145f8:	461a      	movge	r2, r3
 80145fa:	2a00      	cmp	r2, #0
 80145fc:	4691      	mov	r9, r2
 80145fe:	dd07      	ble.n	8014610 <_printf_float+0x2e8>
 8014600:	4613      	mov	r3, r2
 8014602:	4631      	mov	r1, r6
 8014604:	4642      	mov	r2, r8
 8014606:	4628      	mov	r0, r5
 8014608:	47b8      	blx	r7
 801460a:	3001      	adds	r0, #1
 801460c:	f43f aee9 	beq.w	80143e2 <_printf_float+0xba>
 8014610:	f104 031a 	add.w	r3, r4, #26
 8014614:	f04f 0b00 	mov.w	fp, #0
 8014618:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801461c:	9306      	str	r3, [sp, #24]
 801461e:	e015      	b.n	801464c <_printf_float+0x324>
 8014620:	7fefffff 	.word	0x7fefffff
 8014624:	08016a80 	.word	0x08016a80
 8014628:	08016a7c 	.word	0x08016a7c
 801462c:	08016a88 	.word	0x08016a88
 8014630:	08016a84 	.word	0x08016a84
 8014634:	08016a8c 	.word	0x08016a8c
 8014638:	2301      	movs	r3, #1
 801463a:	9a06      	ldr	r2, [sp, #24]
 801463c:	4631      	mov	r1, r6
 801463e:	4628      	mov	r0, r5
 8014640:	47b8      	blx	r7
 8014642:	3001      	adds	r0, #1
 8014644:	f43f aecd 	beq.w	80143e2 <_printf_float+0xba>
 8014648:	f10b 0b01 	add.w	fp, fp, #1
 801464c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014650:	ebaa 0309 	sub.w	r3, sl, r9
 8014654:	455b      	cmp	r3, fp
 8014656:	dcef      	bgt.n	8014638 <_printf_float+0x310>
 8014658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801465c:	429a      	cmp	r2, r3
 801465e:	44d0      	add	r8, sl
 8014660:	db15      	blt.n	801468e <_printf_float+0x366>
 8014662:	6823      	ldr	r3, [r4, #0]
 8014664:	07da      	lsls	r2, r3, #31
 8014666:	d412      	bmi.n	801468e <_printf_float+0x366>
 8014668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801466a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801466c:	eba3 020a 	sub.w	r2, r3, sl
 8014670:	eba3 0a01 	sub.w	sl, r3, r1
 8014674:	4592      	cmp	sl, r2
 8014676:	bfa8      	it	ge
 8014678:	4692      	movge	sl, r2
 801467a:	f1ba 0f00 	cmp.w	sl, #0
 801467e:	dc0e      	bgt.n	801469e <_printf_float+0x376>
 8014680:	f04f 0800 	mov.w	r8, #0
 8014684:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014688:	f104 091a 	add.w	r9, r4, #26
 801468c:	e019      	b.n	80146c2 <_printf_float+0x39a>
 801468e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014692:	4631      	mov	r1, r6
 8014694:	4628      	mov	r0, r5
 8014696:	47b8      	blx	r7
 8014698:	3001      	adds	r0, #1
 801469a:	d1e5      	bne.n	8014668 <_printf_float+0x340>
 801469c:	e6a1      	b.n	80143e2 <_printf_float+0xba>
 801469e:	4653      	mov	r3, sl
 80146a0:	4642      	mov	r2, r8
 80146a2:	4631      	mov	r1, r6
 80146a4:	4628      	mov	r0, r5
 80146a6:	47b8      	blx	r7
 80146a8:	3001      	adds	r0, #1
 80146aa:	d1e9      	bne.n	8014680 <_printf_float+0x358>
 80146ac:	e699      	b.n	80143e2 <_printf_float+0xba>
 80146ae:	2301      	movs	r3, #1
 80146b0:	464a      	mov	r2, r9
 80146b2:	4631      	mov	r1, r6
 80146b4:	4628      	mov	r0, r5
 80146b6:	47b8      	blx	r7
 80146b8:	3001      	adds	r0, #1
 80146ba:	f43f ae92 	beq.w	80143e2 <_printf_float+0xba>
 80146be:	f108 0801 	add.w	r8, r8, #1
 80146c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80146c6:	1a9b      	subs	r3, r3, r2
 80146c8:	eba3 030a 	sub.w	r3, r3, sl
 80146cc:	4543      	cmp	r3, r8
 80146ce:	dcee      	bgt.n	80146ae <_printf_float+0x386>
 80146d0:	e74a      	b.n	8014568 <_printf_float+0x240>
 80146d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146d4:	2a01      	cmp	r2, #1
 80146d6:	dc01      	bgt.n	80146dc <_printf_float+0x3b4>
 80146d8:	07db      	lsls	r3, r3, #31
 80146da:	d53a      	bpl.n	8014752 <_printf_float+0x42a>
 80146dc:	2301      	movs	r3, #1
 80146de:	4642      	mov	r2, r8
 80146e0:	4631      	mov	r1, r6
 80146e2:	4628      	mov	r0, r5
 80146e4:	47b8      	blx	r7
 80146e6:	3001      	adds	r0, #1
 80146e8:	f43f ae7b 	beq.w	80143e2 <_printf_float+0xba>
 80146ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80146f0:	4631      	mov	r1, r6
 80146f2:	4628      	mov	r0, r5
 80146f4:	47b8      	blx	r7
 80146f6:	3001      	adds	r0, #1
 80146f8:	f108 0801 	add.w	r8, r8, #1
 80146fc:	f43f ae71 	beq.w	80143e2 <_printf_float+0xba>
 8014700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014702:	2200      	movs	r2, #0
 8014704:	f103 3aff 	add.w	sl, r3, #4294967295
 8014708:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801470c:	2300      	movs	r3, #0
 801470e:	f7f4 f913 	bl	8008938 <__aeabi_dcmpeq>
 8014712:	b9c8      	cbnz	r0, 8014748 <_printf_float+0x420>
 8014714:	4653      	mov	r3, sl
 8014716:	4642      	mov	r2, r8
 8014718:	4631      	mov	r1, r6
 801471a:	4628      	mov	r0, r5
 801471c:	47b8      	blx	r7
 801471e:	3001      	adds	r0, #1
 8014720:	d10e      	bne.n	8014740 <_printf_float+0x418>
 8014722:	e65e      	b.n	80143e2 <_printf_float+0xba>
 8014724:	2301      	movs	r3, #1
 8014726:	4652      	mov	r2, sl
 8014728:	4631      	mov	r1, r6
 801472a:	4628      	mov	r0, r5
 801472c:	47b8      	blx	r7
 801472e:	3001      	adds	r0, #1
 8014730:	f43f ae57 	beq.w	80143e2 <_printf_float+0xba>
 8014734:	f108 0801 	add.w	r8, r8, #1
 8014738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801473a:	3b01      	subs	r3, #1
 801473c:	4543      	cmp	r3, r8
 801473e:	dcf1      	bgt.n	8014724 <_printf_float+0x3fc>
 8014740:	464b      	mov	r3, r9
 8014742:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014746:	e6de      	b.n	8014506 <_printf_float+0x1de>
 8014748:	f04f 0800 	mov.w	r8, #0
 801474c:	f104 0a1a 	add.w	sl, r4, #26
 8014750:	e7f2      	b.n	8014738 <_printf_float+0x410>
 8014752:	2301      	movs	r3, #1
 8014754:	e7df      	b.n	8014716 <_printf_float+0x3ee>
 8014756:	2301      	movs	r3, #1
 8014758:	464a      	mov	r2, r9
 801475a:	4631      	mov	r1, r6
 801475c:	4628      	mov	r0, r5
 801475e:	47b8      	blx	r7
 8014760:	3001      	adds	r0, #1
 8014762:	f43f ae3e 	beq.w	80143e2 <_printf_float+0xba>
 8014766:	f108 0801 	add.w	r8, r8, #1
 801476a:	68e3      	ldr	r3, [r4, #12]
 801476c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801476e:	1a9b      	subs	r3, r3, r2
 8014770:	4543      	cmp	r3, r8
 8014772:	dcf0      	bgt.n	8014756 <_printf_float+0x42e>
 8014774:	e6fc      	b.n	8014570 <_printf_float+0x248>
 8014776:	f04f 0800 	mov.w	r8, #0
 801477a:	f104 0919 	add.w	r9, r4, #25
 801477e:	e7f4      	b.n	801476a <_printf_float+0x442>
 8014780:	2900      	cmp	r1, #0
 8014782:	f43f ae8b 	beq.w	801449c <_printf_float+0x174>
 8014786:	2300      	movs	r3, #0
 8014788:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801478c:	ab09      	add	r3, sp, #36	; 0x24
 801478e:	9300      	str	r3, [sp, #0]
 8014790:	ec49 8b10 	vmov	d0, r8, r9
 8014794:	6022      	str	r2, [r4, #0]
 8014796:	f8cd a004 	str.w	sl, [sp, #4]
 801479a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801479e:	4628      	mov	r0, r5
 80147a0:	f7ff fd2d 	bl	80141fe <__cvt>
 80147a4:	4680      	mov	r8, r0
 80147a6:	e648      	b.n	801443a <_printf_float+0x112>

080147a8 <_printf_common>:
 80147a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147ac:	4691      	mov	r9, r2
 80147ae:	461f      	mov	r7, r3
 80147b0:	688a      	ldr	r2, [r1, #8]
 80147b2:	690b      	ldr	r3, [r1, #16]
 80147b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80147b8:	4293      	cmp	r3, r2
 80147ba:	bfb8      	it	lt
 80147bc:	4613      	movlt	r3, r2
 80147be:	f8c9 3000 	str.w	r3, [r9]
 80147c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80147c6:	4606      	mov	r6, r0
 80147c8:	460c      	mov	r4, r1
 80147ca:	b112      	cbz	r2, 80147d2 <_printf_common+0x2a>
 80147cc:	3301      	adds	r3, #1
 80147ce:	f8c9 3000 	str.w	r3, [r9]
 80147d2:	6823      	ldr	r3, [r4, #0]
 80147d4:	0699      	lsls	r1, r3, #26
 80147d6:	bf42      	ittt	mi
 80147d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80147dc:	3302      	addmi	r3, #2
 80147de:	f8c9 3000 	strmi.w	r3, [r9]
 80147e2:	6825      	ldr	r5, [r4, #0]
 80147e4:	f015 0506 	ands.w	r5, r5, #6
 80147e8:	d107      	bne.n	80147fa <_printf_common+0x52>
 80147ea:	f104 0a19 	add.w	sl, r4, #25
 80147ee:	68e3      	ldr	r3, [r4, #12]
 80147f0:	f8d9 2000 	ldr.w	r2, [r9]
 80147f4:	1a9b      	subs	r3, r3, r2
 80147f6:	42ab      	cmp	r3, r5
 80147f8:	dc28      	bgt.n	801484c <_printf_common+0xa4>
 80147fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80147fe:	6822      	ldr	r2, [r4, #0]
 8014800:	3300      	adds	r3, #0
 8014802:	bf18      	it	ne
 8014804:	2301      	movne	r3, #1
 8014806:	0692      	lsls	r2, r2, #26
 8014808:	d42d      	bmi.n	8014866 <_printf_common+0xbe>
 801480a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801480e:	4639      	mov	r1, r7
 8014810:	4630      	mov	r0, r6
 8014812:	47c0      	blx	r8
 8014814:	3001      	adds	r0, #1
 8014816:	d020      	beq.n	801485a <_printf_common+0xb2>
 8014818:	6823      	ldr	r3, [r4, #0]
 801481a:	68e5      	ldr	r5, [r4, #12]
 801481c:	f8d9 2000 	ldr.w	r2, [r9]
 8014820:	f003 0306 	and.w	r3, r3, #6
 8014824:	2b04      	cmp	r3, #4
 8014826:	bf08      	it	eq
 8014828:	1aad      	subeq	r5, r5, r2
 801482a:	68a3      	ldr	r3, [r4, #8]
 801482c:	6922      	ldr	r2, [r4, #16]
 801482e:	bf0c      	ite	eq
 8014830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014834:	2500      	movne	r5, #0
 8014836:	4293      	cmp	r3, r2
 8014838:	bfc4      	itt	gt
 801483a:	1a9b      	subgt	r3, r3, r2
 801483c:	18ed      	addgt	r5, r5, r3
 801483e:	f04f 0900 	mov.w	r9, #0
 8014842:	341a      	adds	r4, #26
 8014844:	454d      	cmp	r5, r9
 8014846:	d11a      	bne.n	801487e <_printf_common+0xd6>
 8014848:	2000      	movs	r0, #0
 801484a:	e008      	b.n	801485e <_printf_common+0xb6>
 801484c:	2301      	movs	r3, #1
 801484e:	4652      	mov	r2, sl
 8014850:	4639      	mov	r1, r7
 8014852:	4630      	mov	r0, r6
 8014854:	47c0      	blx	r8
 8014856:	3001      	adds	r0, #1
 8014858:	d103      	bne.n	8014862 <_printf_common+0xba>
 801485a:	f04f 30ff 	mov.w	r0, #4294967295
 801485e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014862:	3501      	adds	r5, #1
 8014864:	e7c3      	b.n	80147ee <_printf_common+0x46>
 8014866:	18e1      	adds	r1, r4, r3
 8014868:	1c5a      	adds	r2, r3, #1
 801486a:	2030      	movs	r0, #48	; 0x30
 801486c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014870:	4422      	add	r2, r4
 8014872:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014876:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801487a:	3302      	adds	r3, #2
 801487c:	e7c5      	b.n	801480a <_printf_common+0x62>
 801487e:	2301      	movs	r3, #1
 8014880:	4622      	mov	r2, r4
 8014882:	4639      	mov	r1, r7
 8014884:	4630      	mov	r0, r6
 8014886:	47c0      	blx	r8
 8014888:	3001      	adds	r0, #1
 801488a:	d0e6      	beq.n	801485a <_printf_common+0xb2>
 801488c:	f109 0901 	add.w	r9, r9, #1
 8014890:	e7d8      	b.n	8014844 <_printf_common+0x9c>
	...

08014894 <_printf_i>:
 8014894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014898:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801489c:	460c      	mov	r4, r1
 801489e:	7e09      	ldrb	r1, [r1, #24]
 80148a0:	b085      	sub	sp, #20
 80148a2:	296e      	cmp	r1, #110	; 0x6e
 80148a4:	4617      	mov	r7, r2
 80148a6:	4606      	mov	r6, r0
 80148a8:	4698      	mov	r8, r3
 80148aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80148ac:	f000 80b3 	beq.w	8014a16 <_printf_i+0x182>
 80148b0:	d822      	bhi.n	80148f8 <_printf_i+0x64>
 80148b2:	2963      	cmp	r1, #99	; 0x63
 80148b4:	d036      	beq.n	8014924 <_printf_i+0x90>
 80148b6:	d80a      	bhi.n	80148ce <_printf_i+0x3a>
 80148b8:	2900      	cmp	r1, #0
 80148ba:	f000 80b9 	beq.w	8014a30 <_printf_i+0x19c>
 80148be:	2958      	cmp	r1, #88	; 0x58
 80148c0:	f000 8083 	beq.w	80149ca <_printf_i+0x136>
 80148c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80148c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80148cc:	e032      	b.n	8014934 <_printf_i+0xa0>
 80148ce:	2964      	cmp	r1, #100	; 0x64
 80148d0:	d001      	beq.n	80148d6 <_printf_i+0x42>
 80148d2:	2969      	cmp	r1, #105	; 0x69
 80148d4:	d1f6      	bne.n	80148c4 <_printf_i+0x30>
 80148d6:	6820      	ldr	r0, [r4, #0]
 80148d8:	6813      	ldr	r3, [r2, #0]
 80148da:	0605      	lsls	r5, r0, #24
 80148dc:	f103 0104 	add.w	r1, r3, #4
 80148e0:	d52a      	bpl.n	8014938 <_printf_i+0xa4>
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	6011      	str	r1, [r2, #0]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	da03      	bge.n	80148f2 <_printf_i+0x5e>
 80148ea:	222d      	movs	r2, #45	; 0x2d
 80148ec:	425b      	negs	r3, r3
 80148ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80148f2:	486f      	ldr	r0, [pc, #444]	; (8014ab0 <_printf_i+0x21c>)
 80148f4:	220a      	movs	r2, #10
 80148f6:	e039      	b.n	801496c <_printf_i+0xd8>
 80148f8:	2973      	cmp	r1, #115	; 0x73
 80148fa:	f000 809d 	beq.w	8014a38 <_printf_i+0x1a4>
 80148fe:	d808      	bhi.n	8014912 <_printf_i+0x7e>
 8014900:	296f      	cmp	r1, #111	; 0x6f
 8014902:	d020      	beq.n	8014946 <_printf_i+0xb2>
 8014904:	2970      	cmp	r1, #112	; 0x70
 8014906:	d1dd      	bne.n	80148c4 <_printf_i+0x30>
 8014908:	6823      	ldr	r3, [r4, #0]
 801490a:	f043 0320 	orr.w	r3, r3, #32
 801490e:	6023      	str	r3, [r4, #0]
 8014910:	e003      	b.n	801491a <_printf_i+0x86>
 8014912:	2975      	cmp	r1, #117	; 0x75
 8014914:	d017      	beq.n	8014946 <_printf_i+0xb2>
 8014916:	2978      	cmp	r1, #120	; 0x78
 8014918:	d1d4      	bne.n	80148c4 <_printf_i+0x30>
 801491a:	2378      	movs	r3, #120	; 0x78
 801491c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014920:	4864      	ldr	r0, [pc, #400]	; (8014ab4 <_printf_i+0x220>)
 8014922:	e055      	b.n	80149d0 <_printf_i+0x13c>
 8014924:	6813      	ldr	r3, [r2, #0]
 8014926:	1d19      	adds	r1, r3, #4
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	6011      	str	r1, [r2, #0]
 801492c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014934:	2301      	movs	r3, #1
 8014936:	e08c      	b.n	8014a52 <_printf_i+0x1be>
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	6011      	str	r1, [r2, #0]
 801493c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014940:	bf18      	it	ne
 8014942:	b21b      	sxthne	r3, r3
 8014944:	e7cf      	b.n	80148e6 <_printf_i+0x52>
 8014946:	6813      	ldr	r3, [r2, #0]
 8014948:	6825      	ldr	r5, [r4, #0]
 801494a:	1d18      	adds	r0, r3, #4
 801494c:	6010      	str	r0, [r2, #0]
 801494e:	0628      	lsls	r0, r5, #24
 8014950:	d501      	bpl.n	8014956 <_printf_i+0xc2>
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	e002      	b.n	801495c <_printf_i+0xc8>
 8014956:	0668      	lsls	r0, r5, #25
 8014958:	d5fb      	bpl.n	8014952 <_printf_i+0xbe>
 801495a:	881b      	ldrh	r3, [r3, #0]
 801495c:	4854      	ldr	r0, [pc, #336]	; (8014ab0 <_printf_i+0x21c>)
 801495e:	296f      	cmp	r1, #111	; 0x6f
 8014960:	bf14      	ite	ne
 8014962:	220a      	movne	r2, #10
 8014964:	2208      	moveq	r2, #8
 8014966:	2100      	movs	r1, #0
 8014968:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801496c:	6865      	ldr	r5, [r4, #4]
 801496e:	60a5      	str	r5, [r4, #8]
 8014970:	2d00      	cmp	r5, #0
 8014972:	f2c0 8095 	blt.w	8014aa0 <_printf_i+0x20c>
 8014976:	6821      	ldr	r1, [r4, #0]
 8014978:	f021 0104 	bic.w	r1, r1, #4
 801497c:	6021      	str	r1, [r4, #0]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d13d      	bne.n	80149fe <_printf_i+0x16a>
 8014982:	2d00      	cmp	r5, #0
 8014984:	f040 808e 	bne.w	8014aa4 <_printf_i+0x210>
 8014988:	4665      	mov	r5, ip
 801498a:	2a08      	cmp	r2, #8
 801498c:	d10b      	bne.n	80149a6 <_printf_i+0x112>
 801498e:	6823      	ldr	r3, [r4, #0]
 8014990:	07db      	lsls	r3, r3, #31
 8014992:	d508      	bpl.n	80149a6 <_printf_i+0x112>
 8014994:	6923      	ldr	r3, [r4, #16]
 8014996:	6862      	ldr	r2, [r4, #4]
 8014998:	429a      	cmp	r2, r3
 801499a:	bfde      	ittt	le
 801499c:	2330      	movle	r3, #48	; 0x30
 801499e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80149a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80149a6:	ebac 0305 	sub.w	r3, ip, r5
 80149aa:	6123      	str	r3, [r4, #16]
 80149ac:	f8cd 8000 	str.w	r8, [sp]
 80149b0:	463b      	mov	r3, r7
 80149b2:	aa03      	add	r2, sp, #12
 80149b4:	4621      	mov	r1, r4
 80149b6:	4630      	mov	r0, r6
 80149b8:	f7ff fef6 	bl	80147a8 <_printf_common>
 80149bc:	3001      	adds	r0, #1
 80149be:	d14d      	bne.n	8014a5c <_printf_i+0x1c8>
 80149c0:	f04f 30ff 	mov.w	r0, #4294967295
 80149c4:	b005      	add	sp, #20
 80149c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149ca:	4839      	ldr	r0, [pc, #228]	; (8014ab0 <_printf_i+0x21c>)
 80149cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80149d0:	6813      	ldr	r3, [r2, #0]
 80149d2:	6821      	ldr	r1, [r4, #0]
 80149d4:	1d1d      	adds	r5, r3, #4
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	6015      	str	r5, [r2, #0]
 80149da:	060a      	lsls	r2, r1, #24
 80149dc:	d50b      	bpl.n	80149f6 <_printf_i+0x162>
 80149de:	07ca      	lsls	r2, r1, #31
 80149e0:	bf44      	itt	mi
 80149e2:	f041 0120 	orrmi.w	r1, r1, #32
 80149e6:	6021      	strmi	r1, [r4, #0]
 80149e8:	b91b      	cbnz	r3, 80149f2 <_printf_i+0x15e>
 80149ea:	6822      	ldr	r2, [r4, #0]
 80149ec:	f022 0220 	bic.w	r2, r2, #32
 80149f0:	6022      	str	r2, [r4, #0]
 80149f2:	2210      	movs	r2, #16
 80149f4:	e7b7      	b.n	8014966 <_printf_i+0xd2>
 80149f6:	064d      	lsls	r5, r1, #25
 80149f8:	bf48      	it	mi
 80149fa:	b29b      	uxthmi	r3, r3
 80149fc:	e7ef      	b.n	80149de <_printf_i+0x14a>
 80149fe:	4665      	mov	r5, ip
 8014a00:	fbb3 f1f2 	udiv	r1, r3, r2
 8014a04:	fb02 3311 	mls	r3, r2, r1, r3
 8014a08:	5cc3      	ldrb	r3, [r0, r3]
 8014a0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014a0e:	460b      	mov	r3, r1
 8014a10:	2900      	cmp	r1, #0
 8014a12:	d1f5      	bne.n	8014a00 <_printf_i+0x16c>
 8014a14:	e7b9      	b.n	801498a <_printf_i+0xf6>
 8014a16:	6813      	ldr	r3, [r2, #0]
 8014a18:	6825      	ldr	r5, [r4, #0]
 8014a1a:	6961      	ldr	r1, [r4, #20]
 8014a1c:	1d18      	adds	r0, r3, #4
 8014a1e:	6010      	str	r0, [r2, #0]
 8014a20:	0628      	lsls	r0, r5, #24
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	d501      	bpl.n	8014a2a <_printf_i+0x196>
 8014a26:	6019      	str	r1, [r3, #0]
 8014a28:	e002      	b.n	8014a30 <_printf_i+0x19c>
 8014a2a:	066a      	lsls	r2, r5, #25
 8014a2c:	d5fb      	bpl.n	8014a26 <_printf_i+0x192>
 8014a2e:	8019      	strh	r1, [r3, #0]
 8014a30:	2300      	movs	r3, #0
 8014a32:	6123      	str	r3, [r4, #16]
 8014a34:	4665      	mov	r5, ip
 8014a36:	e7b9      	b.n	80149ac <_printf_i+0x118>
 8014a38:	6813      	ldr	r3, [r2, #0]
 8014a3a:	1d19      	adds	r1, r3, #4
 8014a3c:	6011      	str	r1, [r2, #0]
 8014a3e:	681d      	ldr	r5, [r3, #0]
 8014a40:	6862      	ldr	r2, [r4, #4]
 8014a42:	2100      	movs	r1, #0
 8014a44:	4628      	mov	r0, r5
 8014a46:	f7f3 fb03 	bl	8008050 <memchr>
 8014a4a:	b108      	cbz	r0, 8014a50 <_printf_i+0x1bc>
 8014a4c:	1b40      	subs	r0, r0, r5
 8014a4e:	6060      	str	r0, [r4, #4]
 8014a50:	6863      	ldr	r3, [r4, #4]
 8014a52:	6123      	str	r3, [r4, #16]
 8014a54:	2300      	movs	r3, #0
 8014a56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a5a:	e7a7      	b.n	80149ac <_printf_i+0x118>
 8014a5c:	6923      	ldr	r3, [r4, #16]
 8014a5e:	462a      	mov	r2, r5
 8014a60:	4639      	mov	r1, r7
 8014a62:	4630      	mov	r0, r6
 8014a64:	47c0      	blx	r8
 8014a66:	3001      	adds	r0, #1
 8014a68:	d0aa      	beq.n	80149c0 <_printf_i+0x12c>
 8014a6a:	6823      	ldr	r3, [r4, #0]
 8014a6c:	079b      	lsls	r3, r3, #30
 8014a6e:	d413      	bmi.n	8014a98 <_printf_i+0x204>
 8014a70:	68e0      	ldr	r0, [r4, #12]
 8014a72:	9b03      	ldr	r3, [sp, #12]
 8014a74:	4298      	cmp	r0, r3
 8014a76:	bfb8      	it	lt
 8014a78:	4618      	movlt	r0, r3
 8014a7a:	e7a3      	b.n	80149c4 <_printf_i+0x130>
 8014a7c:	2301      	movs	r3, #1
 8014a7e:	464a      	mov	r2, r9
 8014a80:	4639      	mov	r1, r7
 8014a82:	4630      	mov	r0, r6
 8014a84:	47c0      	blx	r8
 8014a86:	3001      	adds	r0, #1
 8014a88:	d09a      	beq.n	80149c0 <_printf_i+0x12c>
 8014a8a:	3501      	adds	r5, #1
 8014a8c:	68e3      	ldr	r3, [r4, #12]
 8014a8e:	9a03      	ldr	r2, [sp, #12]
 8014a90:	1a9b      	subs	r3, r3, r2
 8014a92:	42ab      	cmp	r3, r5
 8014a94:	dcf2      	bgt.n	8014a7c <_printf_i+0x1e8>
 8014a96:	e7eb      	b.n	8014a70 <_printf_i+0x1dc>
 8014a98:	2500      	movs	r5, #0
 8014a9a:	f104 0919 	add.w	r9, r4, #25
 8014a9e:	e7f5      	b.n	8014a8c <_printf_i+0x1f8>
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d1ac      	bne.n	80149fe <_printf_i+0x16a>
 8014aa4:	7803      	ldrb	r3, [r0, #0]
 8014aa6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014aaa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014aae:	e76c      	b.n	801498a <_printf_i+0xf6>
 8014ab0:	08016a8e 	.word	0x08016a8e
 8014ab4:	08016a9f 	.word	0x08016a9f

08014ab8 <iprintf>:
 8014ab8:	b40f      	push	{r0, r1, r2, r3}
 8014aba:	4b0a      	ldr	r3, [pc, #40]	; (8014ae4 <iprintf+0x2c>)
 8014abc:	b513      	push	{r0, r1, r4, lr}
 8014abe:	681c      	ldr	r4, [r3, #0]
 8014ac0:	b124      	cbz	r4, 8014acc <iprintf+0x14>
 8014ac2:	69a3      	ldr	r3, [r4, #24]
 8014ac4:	b913      	cbnz	r3, 8014acc <iprintf+0x14>
 8014ac6:	4620      	mov	r0, r4
 8014ac8:	f001 f866 	bl	8015b98 <__sinit>
 8014acc:	ab05      	add	r3, sp, #20
 8014ace:	9a04      	ldr	r2, [sp, #16]
 8014ad0:	68a1      	ldr	r1, [r4, #8]
 8014ad2:	9301      	str	r3, [sp, #4]
 8014ad4:	4620      	mov	r0, r4
 8014ad6:	f001 fd1f 	bl	8016518 <_vfiprintf_r>
 8014ada:	b002      	add	sp, #8
 8014adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ae0:	b004      	add	sp, #16
 8014ae2:	4770      	bx	lr
 8014ae4:	20000d0c 	.word	0x20000d0c

08014ae8 <_puts_r>:
 8014ae8:	b570      	push	{r4, r5, r6, lr}
 8014aea:	460e      	mov	r6, r1
 8014aec:	4605      	mov	r5, r0
 8014aee:	b118      	cbz	r0, 8014af8 <_puts_r+0x10>
 8014af0:	6983      	ldr	r3, [r0, #24]
 8014af2:	b90b      	cbnz	r3, 8014af8 <_puts_r+0x10>
 8014af4:	f001 f850 	bl	8015b98 <__sinit>
 8014af8:	69ab      	ldr	r3, [r5, #24]
 8014afa:	68ac      	ldr	r4, [r5, #8]
 8014afc:	b913      	cbnz	r3, 8014b04 <_puts_r+0x1c>
 8014afe:	4628      	mov	r0, r5
 8014b00:	f001 f84a 	bl	8015b98 <__sinit>
 8014b04:	4b23      	ldr	r3, [pc, #140]	; (8014b94 <_puts_r+0xac>)
 8014b06:	429c      	cmp	r4, r3
 8014b08:	d117      	bne.n	8014b3a <_puts_r+0x52>
 8014b0a:	686c      	ldr	r4, [r5, #4]
 8014b0c:	89a3      	ldrh	r3, [r4, #12]
 8014b0e:	071b      	lsls	r3, r3, #28
 8014b10:	d51d      	bpl.n	8014b4e <_puts_r+0x66>
 8014b12:	6923      	ldr	r3, [r4, #16]
 8014b14:	b1db      	cbz	r3, 8014b4e <_puts_r+0x66>
 8014b16:	3e01      	subs	r6, #1
 8014b18:	68a3      	ldr	r3, [r4, #8]
 8014b1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014b1e:	3b01      	subs	r3, #1
 8014b20:	60a3      	str	r3, [r4, #8]
 8014b22:	b9e9      	cbnz	r1, 8014b60 <_puts_r+0x78>
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	da2e      	bge.n	8014b86 <_puts_r+0x9e>
 8014b28:	4622      	mov	r2, r4
 8014b2a:	210a      	movs	r1, #10
 8014b2c:	4628      	mov	r0, r5
 8014b2e:	f000 f83f 	bl	8014bb0 <__swbuf_r>
 8014b32:	3001      	adds	r0, #1
 8014b34:	d011      	beq.n	8014b5a <_puts_r+0x72>
 8014b36:	200a      	movs	r0, #10
 8014b38:	e011      	b.n	8014b5e <_puts_r+0x76>
 8014b3a:	4b17      	ldr	r3, [pc, #92]	; (8014b98 <_puts_r+0xb0>)
 8014b3c:	429c      	cmp	r4, r3
 8014b3e:	d101      	bne.n	8014b44 <_puts_r+0x5c>
 8014b40:	68ac      	ldr	r4, [r5, #8]
 8014b42:	e7e3      	b.n	8014b0c <_puts_r+0x24>
 8014b44:	4b15      	ldr	r3, [pc, #84]	; (8014b9c <_puts_r+0xb4>)
 8014b46:	429c      	cmp	r4, r3
 8014b48:	bf08      	it	eq
 8014b4a:	68ec      	ldreq	r4, [r5, #12]
 8014b4c:	e7de      	b.n	8014b0c <_puts_r+0x24>
 8014b4e:	4621      	mov	r1, r4
 8014b50:	4628      	mov	r0, r5
 8014b52:	f000 f87f 	bl	8014c54 <__swsetup_r>
 8014b56:	2800      	cmp	r0, #0
 8014b58:	d0dd      	beq.n	8014b16 <_puts_r+0x2e>
 8014b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b5e:	bd70      	pop	{r4, r5, r6, pc}
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	da04      	bge.n	8014b6e <_puts_r+0x86>
 8014b64:	69a2      	ldr	r2, [r4, #24]
 8014b66:	429a      	cmp	r2, r3
 8014b68:	dc06      	bgt.n	8014b78 <_puts_r+0x90>
 8014b6a:	290a      	cmp	r1, #10
 8014b6c:	d004      	beq.n	8014b78 <_puts_r+0x90>
 8014b6e:	6823      	ldr	r3, [r4, #0]
 8014b70:	1c5a      	adds	r2, r3, #1
 8014b72:	6022      	str	r2, [r4, #0]
 8014b74:	7019      	strb	r1, [r3, #0]
 8014b76:	e7cf      	b.n	8014b18 <_puts_r+0x30>
 8014b78:	4622      	mov	r2, r4
 8014b7a:	4628      	mov	r0, r5
 8014b7c:	f000 f818 	bl	8014bb0 <__swbuf_r>
 8014b80:	3001      	adds	r0, #1
 8014b82:	d1c9      	bne.n	8014b18 <_puts_r+0x30>
 8014b84:	e7e9      	b.n	8014b5a <_puts_r+0x72>
 8014b86:	6823      	ldr	r3, [r4, #0]
 8014b88:	200a      	movs	r0, #10
 8014b8a:	1c5a      	adds	r2, r3, #1
 8014b8c:	6022      	str	r2, [r4, #0]
 8014b8e:	7018      	strb	r0, [r3, #0]
 8014b90:	e7e5      	b.n	8014b5e <_puts_r+0x76>
 8014b92:	bf00      	nop
 8014b94:	08016ae0 	.word	0x08016ae0
 8014b98:	08016b00 	.word	0x08016b00
 8014b9c:	08016ac0 	.word	0x08016ac0

08014ba0 <puts>:
 8014ba0:	4b02      	ldr	r3, [pc, #8]	; (8014bac <puts+0xc>)
 8014ba2:	4601      	mov	r1, r0
 8014ba4:	6818      	ldr	r0, [r3, #0]
 8014ba6:	f7ff bf9f 	b.w	8014ae8 <_puts_r>
 8014baa:	bf00      	nop
 8014bac:	20000d0c 	.word	0x20000d0c

08014bb0 <__swbuf_r>:
 8014bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bb2:	460e      	mov	r6, r1
 8014bb4:	4614      	mov	r4, r2
 8014bb6:	4605      	mov	r5, r0
 8014bb8:	b118      	cbz	r0, 8014bc2 <__swbuf_r+0x12>
 8014bba:	6983      	ldr	r3, [r0, #24]
 8014bbc:	b90b      	cbnz	r3, 8014bc2 <__swbuf_r+0x12>
 8014bbe:	f000 ffeb 	bl	8015b98 <__sinit>
 8014bc2:	4b21      	ldr	r3, [pc, #132]	; (8014c48 <__swbuf_r+0x98>)
 8014bc4:	429c      	cmp	r4, r3
 8014bc6:	d12a      	bne.n	8014c1e <__swbuf_r+0x6e>
 8014bc8:	686c      	ldr	r4, [r5, #4]
 8014bca:	69a3      	ldr	r3, [r4, #24]
 8014bcc:	60a3      	str	r3, [r4, #8]
 8014bce:	89a3      	ldrh	r3, [r4, #12]
 8014bd0:	071a      	lsls	r2, r3, #28
 8014bd2:	d52e      	bpl.n	8014c32 <__swbuf_r+0x82>
 8014bd4:	6923      	ldr	r3, [r4, #16]
 8014bd6:	b363      	cbz	r3, 8014c32 <__swbuf_r+0x82>
 8014bd8:	6923      	ldr	r3, [r4, #16]
 8014bda:	6820      	ldr	r0, [r4, #0]
 8014bdc:	1ac0      	subs	r0, r0, r3
 8014bde:	6963      	ldr	r3, [r4, #20]
 8014be0:	b2f6      	uxtb	r6, r6
 8014be2:	4283      	cmp	r3, r0
 8014be4:	4637      	mov	r7, r6
 8014be6:	dc04      	bgt.n	8014bf2 <__swbuf_r+0x42>
 8014be8:	4621      	mov	r1, r4
 8014bea:	4628      	mov	r0, r5
 8014bec:	f000 ff6a 	bl	8015ac4 <_fflush_r>
 8014bf0:	bb28      	cbnz	r0, 8014c3e <__swbuf_r+0x8e>
 8014bf2:	68a3      	ldr	r3, [r4, #8]
 8014bf4:	3b01      	subs	r3, #1
 8014bf6:	60a3      	str	r3, [r4, #8]
 8014bf8:	6823      	ldr	r3, [r4, #0]
 8014bfa:	1c5a      	adds	r2, r3, #1
 8014bfc:	6022      	str	r2, [r4, #0]
 8014bfe:	701e      	strb	r6, [r3, #0]
 8014c00:	6963      	ldr	r3, [r4, #20]
 8014c02:	3001      	adds	r0, #1
 8014c04:	4283      	cmp	r3, r0
 8014c06:	d004      	beq.n	8014c12 <__swbuf_r+0x62>
 8014c08:	89a3      	ldrh	r3, [r4, #12]
 8014c0a:	07db      	lsls	r3, r3, #31
 8014c0c:	d519      	bpl.n	8014c42 <__swbuf_r+0x92>
 8014c0e:	2e0a      	cmp	r6, #10
 8014c10:	d117      	bne.n	8014c42 <__swbuf_r+0x92>
 8014c12:	4621      	mov	r1, r4
 8014c14:	4628      	mov	r0, r5
 8014c16:	f000 ff55 	bl	8015ac4 <_fflush_r>
 8014c1a:	b190      	cbz	r0, 8014c42 <__swbuf_r+0x92>
 8014c1c:	e00f      	b.n	8014c3e <__swbuf_r+0x8e>
 8014c1e:	4b0b      	ldr	r3, [pc, #44]	; (8014c4c <__swbuf_r+0x9c>)
 8014c20:	429c      	cmp	r4, r3
 8014c22:	d101      	bne.n	8014c28 <__swbuf_r+0x78>
 8014c24:	68ac      	ldr	r4, [r5, #8]
 8014c26:	e7d0      	b.n	8014bca <__swbuf_r+0x1a>
 8014c28:	4b09      	ldr	r3, [pc, #36]	; (8014c50 <__swbuf_r+0xa0>)
 8014c2a:	429c      	cmp	r4, r3
 8014c2c:	bf08      	it	eq
 8014c2e:	68ec      	ldreq	r4, [r5, #12]
 8014c30:	e7cb      	b.n	8014bca <__swbuf_r+0x1a>
 8014c32:	4621      	mov	r1, r4
 8014c34:	4628      	mov	r0, r5
 8014c36:	f000 f80d 	bl	8014c54 <__swsetup_r>
 8014c3a:	2800      	cmp	r0, #0
 8014c3c:	d0cc      	beq.n	8014bd8 <__swbuf_r+0x28>
 8014c3e:	f04f 37ff 	mov.w	r7, #4294967295
 8014c42:	4638      	mov	r0, r7
 8014c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c46:	bf00      	nop
 8014c48:	08016ae0 	.word	0x08016ae0
 8014c4c:	08016b00 	.word	0x08016b00
 8014c50:	08016ac0 	.word	0x08016ac0

08014c54 <__swsetup_r>:
 8014c54:	4b32      	ldr	r3, [pc, #200]	; (8014d20 <__swsetup_r+0xcc>)
 8014c56:	b570      	push	{r4, r5, r6, lr}
 8014c58:	681d      	ldr	r5, [r3, #0]
 8014c5a:	4606      	mov	r6, r0
 8014c5c:	460c      	mov	r4, r1
 8014c5e:	b125      	cbz	r5, 8014c6a <__swsetup_r+0x16>
 8014c60:	69ab      	ldr	r3, [r5, #24]
 8014c62:	b913      	cbnz	r3, 8014c6a <__swsetup_r+0x16>
 8014c64:	4628      	mov	r0, r5
 8014c66:	f000 ff97 	bl	8015b98 <__sinit>
 8014c6a:	4b2e      	ldr	r3, [pc, #184]	; (8014d24 <__swsetup_r+0xd0>)
 8014c6c:	429c      	cmp	r4, r3
 8014c6e:	d10f      	bne.n	8014c90 <__swsetup_r+0x3c>
 8014c70:	686c      	ldr	r4, [r5, #4]
 8014c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c76:	b29a      	uxth	r2, r3
 8014c78:	0715      	lsls	r5, r2, #28
 8014c7a:	d42c      	bmi.n	8014cd6 <__swsetup_r+0x82>
 8014c7c:	06d0      	lsls	r0, r2, #27
 8014c7e:	d411      	bmi.n	8014ca4 <__swsetup_r+0x50>
 8014c80:	2209      	movs	r2, #9
 8014c82:	6032      	str	r2, [r6, #0]
 8014c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c88:	81a3      	strh	r3, [r4, #12]
 8014c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8014c8e:	e03e      	b.n	8014d0e <__swsetup_r+0xba>
 8014c90:	4b25      	ldr	r3, [pc, #148]	; (8014d28 <__swsetup_r+0xd4>)
 8014c92:	429c      	cmp	r4, r3
 8014c94:	d101      	bne.n	8014c9a <__swsetup_r+0x46>
 8014c96:	68ac      	ldr	r4, [r5, #8]
 8014c98:	e7eb      	b.n	8014c72 <__swsetup_r+0x1e>
 8014c9a:	4b24      	ldr	r3, [pc, #144]	; (8014d2c <__swsetup_r+0xd8>)
 8014c9c:	429c      	cmp	r4, r3
 8014c9e:	bf08      	it	eq
 8014ca0:	68ec      	ldreq	r4, [r5, #12]
 8014ca2:	e7e6      	b.n	8014c72 <__swsetup_r+0x1e>
 8014ca4:	0751      	lsls	r1, r2, #29
 8014ca6:	d512      	bpl.n	8014cce <__swsetup_r+0x7a>
 8014ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014caa:	b141      	cbz	r1, 8014cbe <__swsetup_r+0x6a>
 8014cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014cb0:	4299      	cmp	r1, r3
 8014cb2:	d002      	beq.n	8014cba <__swsetup_r+0x66>
 8014cb4:	4630      	mov	r0, r6
 8014cb6:	f001 fb5d 	bl	8016374 <_free_r>
 8014cba:	2300      	movs	r3, #0
 8014cbc:	6363      	str	r3, [r4, #52]	; 0x34
 8014cbe:	89a3      	ldrh	r3, [r4, #12]
 8014cc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014cc4:	81a3      	strh	r3, [r4, #12]
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	6063      	str	r3, [r4, #4]
 8014cca:	6923      	ldr	r3, [r4, #16]
 8014ccc:	6023      	str	r3, [r4, #0]
 8014cce:	89a3      	ldrh	r3, [r4, #12]
 8014cd0:	f043 0308 	orr.w	r3, r3, #8
 8014cd4:	81a3      	strh	r3, [r4, #12]
 8014cd6:	6923      	ldr	r3, [r4, #16]
 8014cd8:	b94b      	cbnz	r3, 8014cee <__swsetup_r+0x9a>
 8014cda:	89a3      	ldrh	r3, [r4, #12]
 8014cdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ce4:	d003      	beq.n	8014cee <__swsetup_r+0x9a>
 8014ce6:	4621      	mov	r1, r4
 8014ce8:	4630      	mov	r0, r6
 8014cea:	f001 f811 	bl	8015d10 <__smakebuf_r>
 8014cee:	89a2      	ldrh	r2, [r4, #12]
 8014cf0:	f012 0301 	ands.w	r3, r2, #1
 8014cf4:	d00c      	beq.n	8014d10 <__swsetup_r+0xbc>
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	60a3      	str	r3, [r4, #8]
 8014cfa:	6963      	ldr	r3, [r4, #20]
 8014cfc:	425b      	negs	r3, r3
 8014cfe:	61a3      	str	r3, [r4, #24]
 8014d00:	6923      	ldr	r3, [r4, #16]
 8014d02:	b953      	cbnz	r3, 8014d1a <__swsetup_r+0xc6>
 8014d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d08:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014d0c:	d1ba      	bne.n	8014c84 <__swsetup_r+0x30>
 8014d0e:	bd70      	pop	{r4, r5, r6, pc}
 8014d10:	0792      	lsls	r2, r2, #30
 8014d12:	bf58      	it	pl
 8014d14:	6963      	ldrpl	r3, [r4, #20]
 8014d16:	60a3      	str	r3, [r4, #8]
 8014d18:	e7f2      	b.n	8014d00 <__swsetup_r+0xac>
 8014d1a:	2000      	movs	r0, #0
 8014d1c:	e7f7      	b.n	8014d0e <__swsetup_r+0xba>
 8014d1e:	bf00      	nop
 8014d20:	20000d0c 	.word	0x20000d0c
 8014d24:	08016ae0 	.word	0x08016ae0
 8014d28:	08016b00 	.word	0x08016b00
 8014d2c:	08016ac0 	.word	0x08016ac0

08014d30 <quorem>:
 8014d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d34:	6903      	ldr	r3, [r0, #16]
 8014d36:	690c      	ldr	r4, [r1, #16]
 8014d38:	42a3      	cmp	r3, r4
 8014d3a:	4680      	mov	r8, r0
 8014d3c:	f2c0 8082 	blt.w	8014e44 <quorem+0x114>
 8014d40:	3c01      	subs	r4, #1
 8014d42:	f101 0714 	add.w	r7, r1, #20
 8014d46:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014d4a:	f100 0614 	add.w	r6, r0, #20
 8014d4e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014d52:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014d56:	eb06 030c 	add.w	r3, r6, ip
 8014d5a:	3501      	adds	r5, #1
 8014d5c:	eb07 090c 	add.w	r9, r7, ip
 8014d60:	9301      	str	r3, [sp, #4]
 8014d62:	fbb0 f5f5 	udiv	r5, r0, r5
 8014d66:	b395      	cbz	r5, 8014dce <quorem+0x9e>
 8014d68:	f04f 0a00 	mov.w	sl, #0
 8014d6c:	4638      	mov	r0, r7
 8014d6e:	46b6      	mov	lr, r6
 8014d70:	46d3      	mov	fp, sl
 8014d72:	f850 2b04 	ldr.w	r2, [r0], #4
 8014d76:	b293      	uxth	r3, r2
 8014d78:	fb05 a303 	mla	r3, r5, r3, sl
 8014d7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014d80:	b29b      	uxth	r3, r3
 8014d82:	ebab 0303 	sub.w	r3, fp, r3
 8014d86:	0c12      	lsrs	r2, r2, #16
 8014d88:	f8de b000 	ldr.w	fp, [lr]
 8014d8c:	fb05 a202 	mla	r2, r5, r2, sl
 8014d90:	fa13 f38b 	uxtah	r3, r3, fp
 8014d94:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014d98:	fa1f fb82 	uxth.w	fp, r2
 8014d9c:	f8de 2000 	ldr.w	r2, [lr]
 8014da0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014da4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014dae:	4581      	cmp	r9, r0
 8014db0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014db4:	f84e 3b04 	str.w	r3, [lr], #4
 8014db8:	d2db      	bcs.n	8014d72 <quorem+0x42>
 8014dba:	f856 300c 	ldr.w	r3, [r6, ip]
 8014dbe:	b933      	cbnz	r3, 8014dce <quorem+0x9e>
 8014dc0:	9b01      	ldr	r3, [sp, #4]
 8014dc2:	3b04      	subs	r3, #4
 8014dc4:	429e      	cmp	r6, r3
 8014dc6:	461a      	mov	r2, r3
 8014dc8:	d330      	bcc.n	8014e2c <quorem+0xfc>
 8014dca:	f8c8 4010 	str.w	r4, [r8, #16]
 8014dce:	4640      	mov	r0, r8
 8014dd0:	f001 f9fc 	bl	80161cc <__mcmp>
 8014dd4:	2800      	cmp	r0, #0
 8014dd6:	db25      	blt.n	8014e24 <quorem+0xf4>
 8014dd8:	3501      	adds	r5, #1
 8014dda:	4630      	mov	r0, r6
 8014ddc:	f04f 0c00 	mov.w	ip, #0
 8014de0:	f857 2b04 	ldr.w	r2, [r7], #4
 8014de4:	f8d0 e000 	ldr.w	lr, [r0]
 8014de8:	b293      	uxth	r3, r2
 8014dea:	ebac 0303 	sub.w	r3, ip, r3
 8014dee:	0c12      	lsrs	r2, r2, #16
 8014df0:	fa13 f38e 	uxtah	r3, r3, lr
 8014df4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014df8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014dfc:	b29b      	uxth	r3, r3
 8014dfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e02:	45b9      	cmp	r9, r7
 8014e04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014e08:	f840 3b04 	str.w	r3, [r0], #4
 8014e0c:	d2e8      	bcs.n	8014de0 <quorem+0xb0>
 8014e0e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014e12:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014e16:	b92a      	cbnz	r2, 8014e24 <quorem+0xf4>
 8014e18:	3b04      	subs	r3, #4
 8014e1a:	429e      	cmp	r6, r3
 8014e1c:	461a      	mov	r2, r3
 8014e1e:	d30b      	bcc.n	8014e38 <quorem+0x108>
 8014e20:	f8c8 4010 	str.w	r4, [r8, #16]
 8014e24:	4628      	mov	r0, r5
 8014e26:	b003      	add	sp, #12
 8014e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e2c:	6812      	ldr	r2, [r2, #0]
 8014e2e:	3b04      	subs	r3, #4
 8014e30:	2a00      	cmp	r2, #0
 8014e32:	d1ca      	bne.n	8014dca <quorem+0x9a>
 8014e34:	3c01      	subs	r4, #1
 8014e36:	e7c5      	b.n	8014dc4 <quorem+0x94>
 8014e38:	6812      	ldr	r2, [r2, #0]
 8014e3a:	3b04      	subs	r3, #4
 8014e3c:	2a00      	cmp	r2, #0
 8014e3e:	d1ef      	bne.n	8014e20 <quorem+0xf0>
 8014e40:	3c01      	subs	r4, #1
 8014e42:	e7ea      	b.n	8014e1a <quorem+0xea>
 8014e44:	2000      	movs	r0, #0
 8014e46:	e7ee      	b.n	8014e26 <quorem+0xf6>

08014e48 <_dtoa_r>:
 8014e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e4c:	ec57 6b10 	vmov	r6, r7, d0
 8014e50:	b097      	sub	sp, #92	; 0x5c
 8014e52:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014e54:	9106      	str	r1, [sp, #24]
 8014e56:	4604      	mov	r4, r0
 8014e58:	920b      	str	r2, [sp, #44]	; 0x2c
 8014e5a:	9312      	str	r3, [sp, #72]	; 0x48
 8014e5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014e60:	e9cd 6700 	strd	r6, r7, [sp]
 8014e64:	b93d      	cbnz	r5, 8014e76 <_dtoa_r+0x2e>
 8014e66:	2010      	movs	r0, #16
 8014e68:	f000 ff92 	bl	8015d90 <malloc>
 8014e6c:	6260      	str	r0, [r4, #36]	; 0x24
 8014e6e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014e72:	6005      	str	r5, [r0, #0]
 8014e74:	60c5      	str	r5, [r0, #12]
 8014e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e78:	6819      	ldr	r1, [r3, #0]
 8014e7a:	b151      	cbz	r1, 8014e92 <_dtoa_r+0x4a>
 8014e7c:	685a      	ldr	r2, [r3, #4]
 8014e7e:	604a      	str	r2, [r1, #4]
 8014e80:	2301      	movs	r3, #1
 8014e82:	4093      	lsls	r3, r2
 8014e84:	608b      	str	r3, [r1, #8]
 8014e86:	4620      	mov	r0, r4
 8014e88:	f000 ffbe 	bl	8015e08 <_Bfree>
 8014e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e8e:	2200      	movs	r2, #0
 8014e90:	601a      	str	r2, [r3, #0]
 8014e92:	1e3b      	subs	r3, r7, #0
 8014e94:	bfbb      	ittet	lt
 8014e96:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014e9a:	9301      	strlt	r3, [sp, #4]
 8014e9c:	2300      	movge	r3, #0
 8014e9e:	2201      	movlt	r2, #1
 8014ea0:	bfac      	ite	ge
 8014ea2:	f8c8 3000 	strge.w	r3, [r8]
 8014ea6:	f8c8 2000 	strlt.w	r2, [r8]
 8014eaa:	4baf      	ldr	r3, [pc, #700]	; (8015168 <_dtoa_r+0x320>)
 8014eac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014eb0:	ea33 0308 	bics.w	r3, r3, r8
 8014eb4:	d114      	bne.n	8014ee0 <_dtoa_r+0x98>
 8014eb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014eb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8014ebc:	6013      	str	r3, [r2, #0]
 8014ebe:	9b00      	ldr	r3, [sp, #0]
 8014ec0:	b923      	cbnz	r3, 8014ecc <_dtoa_r+0x84>
 8014ec2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014ec6:	2800      	cmp	r0, #0
 8014ec8:	f000 8542 	beq.w	8015950 <_dtoa_r+0xb08>
 8014ecc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ece:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801517c <_dtoa_r+0x334>
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	f000 8544 	beq.w	8015960 <_dtoa_r+0xb18>
 8014ed8:	f10b 0303 	add.w	r3, fp, #3
 8014edc:	f000 bd3e 	b.w	801595c <_dtoa_r+0xb14>
 8014ee0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	4630      	mov	r0, r6
 8014eea:	4639      	mov	r1, r7
 8014eec:	f7f3 fd24 	bl	8008938 <__aeabi_dcmpeq>
 8014ef0:	4681      	mov	r9, r0
 8014ef2:	b168      	cbz	r0, 8014f10 <_dtoa_r+0xc8>
 8014ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ef6:	2301      	movs	r3, #1
 8014ef8:	6013      	str	r3, [r2, #0]
 8014efa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	f000 8524 	beq.w	801594a <_dtoa_r+0xb02>
 8014f02:	4b9a      	ldr	r3, [pc, #616]	; (801516c <_dtoa_r+0x324>)
 8014f04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014f06:	f103 3bff 	add.w	fp, r3, #4294967295
 8014f0a:	6013      	str	r3, [r2, #0]
 8014f0c:	f000 bd28 	b.w	8015960 <_dtoa_r+0xb18>
 8014f10:	aa14      	add	r2, sp, #80	; 0x50
 8014f12:	a915      	add	r1, sp, #84	; 0x54
 8014f14:	ec47 6b10 	vmov	d0, r6, r7
 8014f18:	4620      	mov	r0, r4
 8014f1a:	f001 f9ce 	bl	80162ba <__d2b>
 8014f1e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014f22:	9004      	str	r0, [sp, #16]
 8014f24:	2d00      	cmp	r5, #0
 8014f26:	d07c      	beq.n	8015022 <_dtoa_r+0x1da>
 8014f28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014f2c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014f30:	46b2      	mov	sl, r6
 8014f32:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014f36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014f3a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014f3e:	2200      	movs	r2, #0
 8014f40:	4b8b      	ldr	r3, [pc, #556]	; (8015170 <_dtoa_r+0x328>)
 8014f42:	4650      	mov	r0, sl
 8014f44:	4659      	mov	r1, fp
 8014f46:	f7f3 f8d7 	bl	80080f8 <__aeabi_dsub>
 8014f4a:	a381      	add	r3, pc, #516	; (adr r3, 8015150 <_dtoa_r+0x308>)
 8014f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f50:	f7f3 fa8a 	bl	8008468 <__aeabi_dmul>
 8014f54:	a380      	add	r3, pc, #512	; (adr r3, 8015158 <_dtoa_r+0x310>)
 8014f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f5a:	f7f3 f8cf 	bl	80080fc <__adddf3>
 8014f5e:	4606      	mov	r6, r0
 8014f60:	4628      	mov	r0, r5
 8014f62:	460f      	mov	r7, r1
 8014f64:	f7f3 fa16 	bl	8008394 <__aeabi_i2d>
 8014f68:	a37d      	add	r3, pc, #500	; (adr r3, 8015160 <_dtoa_r+0x318>)
 8014f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f6e:	f7f3 fa7b 	bl	8008468 <__aeabi_dmul>
 8014f72:	4602      	mov	r2, r0
 8014f74:	460b      	mov	r3, r1
 8014f76:	4630      	mov	r0, r6
 8014f78:	4639      	mov	r1, r7
 8014f7a:	f7f3 f8bf 	bl	80080fc <__adddf3>
 8014f7e:	4606      	mov	r6, r0
 8014f80:	460f      	mov	r7, r1
 8014f82:	f7f3 fd21 	bl	80089c8 <__aeabi_d2iz>
 8014f86:	2200      	movs	r2, #0
 8014f88:	4682      	mov	sl, r0
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	4630      	mov	r0, r6
 8014f8e:	4639      	mov	r1, r7
 8014f90:	f7f3 fcdc 	bl	800894c <__aeabi_dcmplt>
 8014f94:	b148      	cbz	r0, 8014faa <_dtoa_r+0x162>
 8014f96:	4650      	mov	r0, sl
 8014f98:	f7f3 f9fc 	bl	8008394 <__aeabi_i2d>
 8014f9c:	4632      	mov	r2, r6
 8014f9e:	463b      	mov	r3, r7
 8014fa0:	f7f3 fcca 	bl	8008938 <__aeabi_dcmpeq>
 8014fa4:	b908      	cbnz	r0, 8014faa <_dtoa_r+0x162>
 8014fa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014faa:	f1ba 0f16 	cmp.w	sl, #22
 8014fae:	d859      	bhi.n	8015064 <_dtoa_r+0x21c>
 8014fb0:	4970      	ldr	r1, [pc, #448]	; (8015174 <_dtoa_r+0x32c>)
 8014fb2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014fb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014fba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014fbe:	f7f3 fce3 	bl	8008988 <__aeabi_dcmpgt>
 8014fc2:	2800      	cmp	r0, #0
 8014fc4:	d050      	beq.n	8015068 <_dtoa_r+0x220>
 8014fc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014fca:	2300      	movs	r3, #0
 8014fcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8014fce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014fd0:	1b5d      	subs	r5, r3, r5
 8014fd2:	f1b5 0801 	subs.w	r8, r5, #1
 8014fd6:	bf49      	itett	mi
 8014fd8:	f1c5 0301 	rsbmi	r3, r5, #1
 8014fdc:	2300      	movpl	r3, #0
 8014fde:	9305      	strmi	r3, [sp, #20]
 8014fe0:	f04f 0800 	movmi.w	r8, #0
 8014fe4:	bf58      	it	pl
 8014fe6:	9305      	strpl	r3, [sp, #20]
 8014fe8:	f1ba 0f00 	cmp.w	sl, #0
 8014fec:	db3e      	blt.n	801506c <_dtoa_r+0x224>
 8014fee:	2300      	movs	r3, #0
 8014ff0:	44d0      	add	r8, sl
 8014ff2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014ff6:	9307      	str	r3, [sp, #28]
 8014ff8:	9b06      	ldr	r3, [sp, #24]
 8014ffa:	2b09      	cmp	r3, #9
 8014ffc:	f200 8090 	bhi.w	8015120 <_dtoa_r+0x2d8>
 8015000:	2b05      	cmp	r3, #5
 8015002:	bfc4      	itt	gt
 8015004:	3b04      	subgt	r3, #4
 8015006:	9306      	strgt	r3, [sp, #24]
 8015008:	9b06      	ldr	r3, [sp, #24]
 801500a:	f1a3 0302 	sub.w	r3, r3, #2
 801500e:	bfcc      	ite	gt
 8015010:	2500      	movgt	r5, #0
 8015012:	2501      	movle	r5, #1
 8015014:	2b03      	cmp	r3, #3
 8015016:	f200 808f 	bhi.w	8015138 <_dtoa_r+0x2f0>
 801501a:	e8df f003 	tbb	[pc, r3]
 801501e:	7f7d      	.short	0x7f7d
 8015020:	7131      	.short	0x7131
 8015022:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8015026:	441d      	add	r5, r3
 8015028:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801502c:	2820      	cmp	r0, #32
 801502e:	dd13      	ble.n	8015058 <_dtoa_r+0x210>
 8015030:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8015034:	9b00      	ldr	r3, [sp, #0]
 8015036:	fa08 f800 	lsl.w	r8, r8, r0
 801503a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801503e:	fa23 f000 	lsr.w	r0, r3, r0
 8015042:	ea48 0000 	orr.w	r0, r8, r0
 8015046:	f7f3 f995 	bl	8008374 <__aeabi_ui2d>
 801504a:	2301      	movs	r3, #1
 801504c:	4682      	mov	sl, r0
 801504e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8015052:	3d01      	subs	r5, #1
 8015054:	9313      	str	r3, [sp, #76]	; 0x4c
 8015056:	e772      	b.n	8014f3e <_dtoa_r+0xf6>
 8015058:	9b00      	ldr	r3, [sp, #0]
 801505a:	f1c0 0020 	rsb	r0, r0, #32
 801505e:	fa03 f000 	lsl.w	r0, r3, r0
 8015062:	e7f0      	b.n	8015046 <_dtoa_r+0x1fe>
 8015064:	2301      	movs	r3, #1
 8015066:	e7b1      	b.n	8014fcc <_dtoa_r+0x184>
 8015068:	900f      	str	r0, [sp, #60]	; 0x3c
 801506a:	e7b0      	b.n	8014fce <_dtoa_r+0x186>
 801506c:	9b05      	ldr	r3, [sp, #20]
 801506e:	eba3 030a 	sub.w	r3, r3, sl
 8015072:	9305      	str	r3, [sp, #20]
 8015074:	f1ca 0300 	rsb	r3, sl, #0
 8015078:	9307      	str	r3, [sp, #28]
 801507a:	2300      	movs	r3, #0
 801507c:	930e      	str	r3, [sp, #56]	; 0x38
 801507e:	e7bb      	b.n	8014ff8 <_dtoa_r+0x1b0>
 8015080:	2301      	movs	r3, #1
 8015082:	930a      	str	r3, [sp, #40]	; 0x28
 8015084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015086:	2b00      	cmp	r3, #0
 8015088:	dd59      	ble.n	801513e <_dtoa_r+0x2f6>
 801508a:	9302      	str	r3, [sp, #8]
 801508c:	4699      	mov	r9, r3
 801508e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015090:	2200      	movs	r2, #0
 8015092:	6072      	str	r2, [r6, #4]
 8015094:	2204      	movs	r2, #4
 8015096:	f102 0014 	add.w	r0, r2, #20
 801509a:	4298      	cmp	r0, r3
 801509c:	6871      	ldr	r1, [r6, #4]
 801509e:	d953      	bls.n	8015148 <_dtoa_r+0x300>
 80150a0:	4620      	mov	r0, r4
 80150a2:	f000 fe7d 	bl	8015da0 <_Balloc>
 80150a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150a8:	6030      	str	r0, [r6, #0]
 80150aa:	f1b9 0f0e 	cmp.w	r9, #14
 80150ae:	f8d3 b000 	ldr.w	fp, [r3]
 80150b2:	f200 80e6 	bhi.w	8015282 <_dtoa_r+0x43a>
 80150b6:	2d00      	cmp	r5, #0
 80150b8:	f000 80e3 	beq.w	8015282 <_dtoa_r+0x43a>
 80150bc:	ed9d 7b00 	vldr	d7, [sp]
 80150c0:	f1ba 0f00 	cmp.w	sl, #0
 80150c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80150c8:	dd74      	ble.n	80151b4 <_dtoa_r+0x36c>
 80150ca:	4a2a      	ldr	r2, [pc, #168]	; (8015174 <_dtoa_r+0x32c>)
 80150cc:	f00a 030f 	and.w	r3, sl, #15
 80150d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80150d4:	ed93 7b00 	vldr	d7, [r3]
 80150d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80150dc:	06f0      	lsls	r0, r6, #27
 80150de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80150e2:	d565      	bpl.n	80151b0 <_dtoa_r+0x368>
 80150e4:	4b24      	ldr	r3, [pc, #144]	; (8015178 <_dtoa_r+0x330>)
 80150e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80150ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80150ee:	f7f3 fae5 	bl	80086bc <__aeabi_ddiv>
 80150f2:	e9cd 0100 	strd	r0, r1, [sp]
 80150f6:	f006 060f 	and.w	r6, r6, #15
 80150fa:	2503      	movs	r5, #3
 80150fc:	4f1e      	ldr	r7, [pc, #120]	; (8015178 <_dtoa_r+0x330>)
 80150fe:	e04c      	b.n	801519a <_dtoa_r+0x352>
 8015100:	2301      	movs	r3, #1
 8015102:	930a      	str	r3, [sp, #40]	; 0x28
 8015104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015106:	4453      	add	r3, sl
 8015108:	f103 0901 	add.w	r9, r3, #1
 801510c:	9302      	str	r3, [sp, #8]
 801510e:	464b      	mov	r3, r9
 8015110:	2b01      	cmp	r3, #1
 8015112:	bfb8      	it	lt
 8015114:	2301      	movlt	r3, #1
 8015116:	e7ba      	b.n	801508e <_dtoa_r+0x246>
 8015118:	2300      	movs	r3, #0
 801511a:	e7b2      	b.n	8015082 <_dtoa_r+0x23a>
 801511c:	2300      	movs	r3, #0
 801511e:	e7f0      	b.n	8015102 <_dtoa_r+0x2ba>
 8015120:	2501      	movs	r5, #1
 8015122:	2300      	movs	r3, #0
 8015124:	9306      	str	r3, [sp, #24]
 8015126:	950a      	str	r5, [sp, #40]	; 0x28
 8015128:	f04f 33ff 	mov.w	r3, #4294967295
 801512c:	9302      	str	r3, [sp, #8]
 801512e:	4699      	mov	r9, r3
 8015130:	2200      	movs	r2, #0
 8015132:	2312      	movs	r3, #18
 8015134:	920b      	str	r2, [sp, #44]	; 0x2c
 8015136:	e7aa      	b.n	801508e <_dtoa_r+0x246>
 8015138:	2301      	movs	r3, #1
 801513a:	930a      	str	r3, [sp, #40]	; 0x28
 801513c:	e7f4      	b.n	8015128 <_dtoa_r+0x2e0>
 801513e:	2301      	movs	r3, #1
 8015140:	9302      	str	r3, [sp, #8]
 8015142:	4699      	mov	r9, r3
 8015144:	461a      	mov	r2, r3
 8015146:	e7f5      	b.n	8015134 <_dtoa_r+0x2ec>
 8015148:	3101      	adds	r1, #1
 801514a:	6071      	str	r1, [r6, #4]
 801514c:	0052      	lsls	r2, r2, #1
 801514e:	e7a2      	b.n	8015096 <_dtoa_r+0x24e>
 8015150:	636f4361 	.word	0x636f4361
 8015154:	3fd287a7 	.word	0x3fd287a7
 8015158:	8b60c8b3 	.word	0x8b60c8b3
 801515c:	3fc68a28 	.word	0x3fc68a28
 8015160:	509f79fb 	.word	0x509f79fb
 8015164:	3fd34413 	.word	0x3fd34413
 8015168:	7ff00000 	.word	0x7ff00000
 801516c:	08016a8d 	.word	0x08016a8d
 8015170:	3ff80000 	.word	0x3ff80000
 8015174:	08016b48 	.word	0x08016b48
 8015178:	08016b20 	.word	0x08016b20
 801517c:	08016ab9 	.word	0x08016ab9
 8015180:	07f1      	lsls	r1, r6, #31
 8015182:	d508      	bpl.n	8015196 <_dtoa_r+0x34e>
 8015184:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015188:	e9d7 2300 	ldrd	r2, r3, [r7]
 801518c:	f7f3 f96c 	bl	8008468 <__aeabi_dmul>
 8015190:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015194:	3501      	adds	r5, #1
 8015196:	1076      	asrs	r6, r6, #1
 8015198:	3708      	adds	r7, #8
 801519a:	2e00      	cmp	r6, #0
 801519c:	d1f0      	bne.n	8015180 <_dtoa_r+0x338>
 801519e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80151a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151a6:	f7f3 fa89 	bl	80086bc <__aeabi_ddiv>
 80151aa:	e9cd 0100 	strd	r0, r1, [sp]
 80151ae:	e01a      	b.n	80151e6 <_dtoa_r+0x39e>
 80151b0:	2502      	movs	r5, #2
 80151b2:	e7a3      	b.n	80150fc <_dtoa_r+0x2b4>
 80151b4:	f000 80a0 	beq.w	80152f8 <_dtoa_r+0x4b0>
 80151b8:	f1ca 0600 	rsb	r6, sl, #0
 80151bc:	4b9f      	ldr	r3, [pc, #636]	; (801543c <_dtoa_r+0x5f4>)
 80151be:	4fa0      	ldr	r7, [pc, #640]	; (8015440 <_dtoa_r+0x5f8>)
 80151c0:	f006 020f 	and.w	r2, r6, #15
 80151c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80151c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80151d0:	f7f3 f94a 	bl	8008468 <__aeabi_dmul>
 80151d4:	e9cd 0100 	strd	r0, r1, [sp]
 80151d8:	1136      	asrs	r6, r6, #4
 80151da:	2300      	movs	r3, #0
 80151dc:	2502      	movs	r5, #2
 80151de:	2e00      	cmp	r6, #0
 80151e0:	d17f      	bne.n	80152e2 <_dtoa_r+0x49a>
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d1e1      	bne.n	80151aa <_dtoa_r+0x362>
 80151e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	f000 8087 	beq.w	80152fc <_dtoa_r+0x4b4>
 80151ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80151f2:	2200      	movs	r2, #0
 80151f4:	4b93      	ldr	r3, [pc, #588]	; (8015444 <_dtoa_r+0x5fc>)
 80151f6:	4630      	mov	r0, r6
 80151f8:	4639      	mov	r1, r7
 80151fa:	f7f3 fba7 	bl	800894c <__aeabi_dcmplt>
 80151fe:	2800      	cmp	r0, #0
 8015200:	d07c      	beq.n	80152fc <_dtoa_r+0x4b4>
 8015202:	f1b9 0f00 	cmp.w	r9, #0
 8015206:	d079      	beq.n	80152fc <_dtoa_r+0x4b4>
 8015208:	9b02      	ldr	r3, [sp, #8]
 801520a:	2b00      	cmp	r3, #0
 801520c:	dd35      	ble.n	801527a <_dtoa_r+0x432>
 801520e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015212:	9308      	str	r3, [sp, #32]
 8015214:	4639      	mov	r1, r7
 8015216:	2200      	movs	r2, #0
 8015218:	4b8b      	ldr	r3, [pc, #556]	; (8015448 <_dtoa_r+0x600>)
 801521a:	4630      	mov	r0, r6
 801521c:	f7f3 f924 	bl	8008468 <__aeabi_dmul>
 8015220:	e9cd 0100 	strd	r0, r1, [sp]
 8015224:	9f02      	ldr	r7, [sp, #8]
 8015226:	3501      	adds	r5, #1
 8015228:	4628      	mov	r0, r5
 801522a:	f7f3 f8b3 	bl	8008394 <__aeabi_i2d>
 801522e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015232:	f7f3 f919 	bl	8008468 <__aeabi_dmul>
 8015236:	2200      	movs	r2, #0
 8015238:	4b84      	ldr	r3, [pc, #528]	; (801544c <_dtoa_r+0x604>)
 801523a:	f7f2 ff5f 	bl	80080fc <__adddf3>
 801523e:	4605      	mov	r5, r0
 8015240:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015244:	2f00      	cmp	r7, #0
 8015246:	d15d      	bne.n	8015304 <_dtoa_r+0x4bc>
 8015248:	2200      	movs	r2, #0
 801524a:	4b81      	ldr	r3, [pc, #516]	; (8015450 <_dtoa_r+0x608>)
 801524c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015250:	f7f2 ff52 	bl	80080f8 <__aeabi_dsub>
 8015254:	462a      	mov	r2, r5
 8015256:	4633      	mov	r3, r6
 8015258:	e9cd 0100 	strd	r0, r1, [sp]
 801525c:	f7f3 fb94 	bl	8008988 <__aeabi_dcmpgt>
 8015260:	2800      	cmp	r0, #0
 8015262:	f040 8288 	bne.w	8015776 <_dtoa_r+0x92e>
 8015266:	462a      	mov	r2, r5
 8015268:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801526c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015270:	f7f3 fb6c 	bl	800894c <__aeabi_dcmplt>
 8015274:	2800      	cmp	r0, #0
 8015276:	f040 827c 	bne.w	8015772 <_dtoa_r+0x92a>
 801527a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801527e:	e9cd 2300 	strd	r2, r3, [sp]
 8015282:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015284:	2b00      	cmp	r3, #0
 8015286:	f2c0 8150 	blt.w	801552a <_dtoa_r+0x6e2>
 801528a:	f1ba 0f0e 	cmp.w	sl, #14
 801528e:	f300 814c 	bgt.w	801552a <_dtoa_r+0x6e2>
 8015292:	4b6a      	ldr	r3, [pc, #424]	; (801543c <_dtoa_r+0x5f4>)
 8015294:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015298:	ed93 7b00 	vldr	d7, [r3]
 801529c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801529e:	2b00      	cmp	r3, #0
 80152a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80152a4:	f280 80d8 	bge.w	8015458 <_dtoa_r+0x610>
 80152a8:	f1b9 0f00 	cmp.w	r9, #0
 80152ac:	f300 80d4 	bgt.w	8015458 <_dtoa_r+0x610>
 80152b0:	f040 825e 	bne.w	8015770 <_dtoa_r+0x928>
 80152b4:	2200      	movs	r2, #0
 80152b6:	4b66      	ldr	r3, [pc, #408]	; (8015450 <_dtoa_r+0x608>)
 80152b8:	ec51 0b17 	vmov	r0, r1, d7
 80152bc:	f7f3 f8d4 	bl	8008468 <__aeabi_dmul>
 80152c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80152c4:	f7f3 fb56 	bl	8008974 <__aeabi_dcmpge>
 80152c8:	464f      	mov	r7, r9
 80152ca:	464e      	mov	r6, r9
 80152cc:	2800      	cmp	r0, #0
 80152ce:	f040 8234 	bne.w	801573a <_dtoa_r+0x8f2>
 80152d2:	2331      	movs	r3, #49	; 0x31
 80152d4:	f10b 0501 	add.w	r5, fp, #1
 80152d8:	f88b 3000 	strb.w	r3, [fp]
 80152dc:	f10a 0a01 	add.w	sl, sl, #1
 80152e0:	e22f      	b.n	8015742 <_dtoa_r+0x8fa>
 80152e2:	07f2      	lsls	r2, r6, #31
 80152e4:	d505      	bpl.n	80152f2 <_dtoa_r+0x4aa>
 80152e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80152ea:	f7f3 f8bd 	bl	8008468 <__aeabi_dmul>
 80152ee:	3501      	adds	r5, #1
 80152f0:	2301      	movs	r3, #1
 80152f2:	1076      	asrs	r6, r6, #1
 80152f4:	3708      	adds	r7, #8
 80152f6:	e772      	b.n	80151de <_dtoa_r+0x396>
 80152f8:	2502      	movs	r5, #2
 80152fa:	e774      	b.n	80151e6 <_dtoa_r+0x39e>
 80152fc:	f8cd a020 	str.w	sl, [sp, #32]
 8015300:	464f      	mov	r7, r9
 8015302:	e791      	b.n	8015228 <_dtoa_r+0x3e0>
 8015304:	4b4d      	ldr	r3, [pc, #308]	; (801543c <_dtoa_r+0x5f4>)
 8015306:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801530a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801530e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015310:	2b00      	cmp	r3, #0
 8015312:	d047      	beq.n	80153a4 <_dtoa_r+0x55c>
 8015314:	4602      	mov	r2, r0
 8015316:	460b      	mov	r3, r1
 8015318:	2000      	movs	r0, #0
 801531a:	494e      	ldr	r1, [pc, #312]	; (8015454 <_dtoa_r+0x60c>)
 801531c:	f7f3 f9ce 	bl	80086bc <__aeabi_ddiv>
 8015320:	462a      	mov	r2, r5
 8015322:	4633      	mov	r3, r6
 8015324:	f7f2 fee8 	bl	80080f8 <__aeabi_dsub>
 8015328:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801532c:	465d      	mov	r5, fp
 801532e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015332:	f7f3 fb49 	bl	80089c8 <__aeabi_d2iz>
 8015336:	4606      	mov	r6, r0
 8015338:	f7f3 f82c 	bl	8008394 <__aeabi_i2d>
 801533c:	4602      	mov	r2, r0
 801533e:	460b      	mov	r3, r1
 8015340:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015344:	f7f2 fed8 	bl	80080f8 <__aeabi_dsub>
 8015348:	3630      	adds	r6, #48	; 0x30
 801534a:	f805 6b01 	strb.w	r6, [r5], #1
 801534e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015352:	e9cd 0100 	strd	r0, r1, [sp]
 8015356:	f7f3 faf9 	bl	800894c <__aeabi_dcmplt>
 801535a:	2800      	cmp	r0, #0
 801535c:	d163      	bne.n	8015426 <_dtoa_r+0x5de>
 801535e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015362:	2000      	movs	r0, #0
 8015364:	4937      	ldr	r1, [pc, #220]	; (8015444 <_dtoa_r+0x5fc>)
 8015366:	f7f2 fec7 	bl	80080f8 <__aeabi_dsub>
 801536a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801536e:	f7f3 faed 	bl	800894c <__aeabi_dcmplt>
 8015372:	2800      	cmp	r0, #0
 8015374:	f040 80b7 	bne.w	80154e6 <_dtoa_r+0x69e>
 8015378:	eba5 030b 	sub.w	r3, r5, fp
 801537c:	429f      	cmp	r7, r3
 801537e:	f77f af7c 	ble.w	801527a <_dtoa_r+0x432>
 8015382:	2200      	movs	r2, #0
 8015384:	4b30      	ldr	r3, [pc, #192]	; (8015448 <_dtoa_r+0x600>)
 8015386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801538a:	f7f3 f86d 	bl	8008468 <__aeabi_dmul>
 801538e:	2200      	movs	r2, #0
 8015390:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015394:	4b2c      	ldr	r3, [pc, #176]	; (8015448 <_dtoa_r+0x600>)
 8015396:	e9dd 0100 	ldrd	r0, r1, [sp]
 801539a:	f7f3 f865 	bl	8008468 <__aeabi_dmul>
 801539e:	e9cd 0100 	strd	r0, r1, [sp]
 80153a2:	e7c4      	b.n	801532e <_dtoa_r+0x4e6>
 80153a4:	462a      	mov	r2, r5
 80153a6:	4633      	mov	r3, r6
 80153a8:	f7f3 f85e 	bl	8008468 <__aeabi_dmul>
 80153ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80153b0:	eb0b 0507 	add.w	r5, fp, r7
 80153b4:	465e      	mov	r6, fp
 80153b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153ba:	f7f3 fb05 	bl	80089c8 <__aeabi_d2iz>
 80153be:	4607      	mov	r7, r0
 80153c0:	f7f2 ffe8 	bl	8008394 <__aeabi_i2d>
 80153c4:	3730      	adds	r7, #48	; 0x30
 80153c6:	4602      	mov	r2, r0
 80153c8:	460b      	mov	r3, r1
 80153ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153ce:	f7f2 fe93 	bl	80080f8 <__aeabi_dsub>
 80153d2:	f806 7b01 	strb.w	r7, [r6], #1
 80153d6:	42ae      	cmp	r6, r5
 80153d8:	e9cd 0100 	strd	r0, r1, [sp]
 80153dc:	f04f 0200 	mov.w	r2, #0
 80153e0:	d126      	bne.n	8015430 <_dtoa_r+0x5e8>
 80153e2:	4b1c      	ldr	r3, [pc, #112]	; (8015454 <_dtoa_r+0x60c>)
 80153e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80153e8:	f7f2 fe88 	bl	80080fc <__adddf3>
 80153ec:	4602      	mov	r2, r0
 80153ee:	460b      	mov	r3, r1
 80153f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153f4:	f7f3 fac8 	bl	8008988 <__aeabi_dcmpgt>
 80153f8:	2800      	cmp	r0, #0
 80153fa:	d174      	bne.n	80154e6 <_dtoa_r+0x69e>
 80153fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015400:	2000      	movs	r0, #0
 8015402:	4914      	ldr	r1, [pc, #80]	; (8015454 <_dtoa_r+0x60c>)
 8015404:	f7f2 fe78 	bl	80080f8 <__aeabi_dsub>
 8015408:	4602      	mov	r2, r0
 801540a:	460b      	mov	r3, r1
 801540c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015410:	f7f3 fa9c 	bl	800894c <__aeabi_dcmplt>
 8015414:	2800      	cmp	r0, #0
 8015416:	f43f af30 	beq.w	801527a <_dtoa_r+0x432>
 801541a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801541e:	2b30      	cmp	r3, #48	; 0x30
 8015420:	f105 32ff 	add.w	r2, r5, #4294967295
 8015424:	d002      	beq.n	801542c <_dtoa_r+0x5e4>
 8015426:	f8dd a020 	ldr.w	sl, [sp, #32]
 801542a:	e04a      	b.n	80154c2 <_dtoa_r+0x67a>
 801542c:	4615      	mov	r5, r2
 801542e:	e7f4      	b.n	801541a <_dtoa_r+0x5d2>
 8015430:	4b05      	ldr	r3, [pc, #20]	; (8015448 <_dtoa_r+0x600>)
 8015432:	f7f3 f819 	bl	8008468 <__aeabi_dmul>
 8015436:	e9cd 0100 	strd	r0, r1, [sp]
 801543a:	e7bc      	b.n	80153b6 <_dtoa_r+0x56e>
 801543c:	08016b48 	.word	0x08016b48
 8015440:	08016b20 	.word	0x08016b20
 8015444:	3ff00000 	.word	0x3ff00000
 8015448:	40240000 	.word	0x40240000
 801544c:	401c0000 	.word	0x401c0000
 8015450:	40140000 	.word	0x40140000
 8015454:	3fe00000 	.word	0x3fe00000
 8015458:	e9dd 6700 	ldrd	r6, r7, [sp]
 801545c:	465d      	mov	r5, fp
 801545e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015462:	4630      	mov	r0, r6
 8015464:	4639      	mov	r1, r7
 8015466:	f7f3 f929 	bl	80086bc <__aeabi_ddiv>
 801546a:	f7f3 faad 	bl	80089c8 <__aeabi_d2iz>
 801546e:	4680      	mov	r8, r0
 8015470:	f7f2 ff90 	bl	8008394 <__aeabi_i2d>
 8015474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015478:	f7f2 fff6 	bl	8008468 <__aeabi_dmul>
 801547c:	4602      	mov	r2, r0
 801547e:	460b      	mov	r3, r1
 8015480:	4630      	mov	r0, r6
 8015482:	4639      	mov	r1, r7
 8015484:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015488:	f7f2 fe36 	bl	80080f8 <__aeabi_dsub>
 801548c:	f805 6b01 	strb.w	r6, [r5], #1
 8015490:	eba5 060b 	sub.w	r6, r5, fp
 8015494:	45b1      	cmp	r9, r6
 8015496:	4602      	mov	r2, r0
 8015498:	460b      	mov	r3, r1
 801549a:	d139      	bne.n	8015510 <_dtoa_r+0x6c8>
 801549c:	f7f2 fe2e 	bl	80080fc <__adddf3>
 80154a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80154a4:	4606      	mov	r6, r0
 80154a6:	460f      	mov	r7, r1
 80154a8:	f7f3 fa6e 	bl	8008988 <__aeabi_dcmpgt>
 80154ac:	b9c8      	cbnz	r0, 80154e2 <_dtoa_r+0x69a>
 80154ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80154b2:	4630      	mov	r0, r6
 80154b4:	4639      	mov	r1, r7
 80154b6:	f7f3 fa3f 	bl	8008938 <__aeabi_dcmpeq>
 80154ba:	b110      	cbz	r0, 80154c2 <_dtoa_r+0x67a>
 80154bc:	f018 0f01 	tst.w	r8, #1
 80154c0:	d10f      	bne.n	80154e2 <_dtoa_r+0x69a>
 80154c2:	9904      	ldr	r1, [sp, #16]
 80154c4:	4620      	mov	r0, r4
 80154c6:	f000 fc9f 	bl	8015e08 <_Bfree>
 80154ca:	2300      	movs	r3, #0
 80154cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80154ce:	702b      	strb	r3, [r5, #0]
 80154d0:	f10a 0301 	add.w	r3, sl, #1
 80154d4:	6013      	str	r3, [r2, #0]
 80154d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80154d8:	2b00      	cmp	r3, #0
 80154da:	f000 8241 	beq.w	8015960 <_dtoa_r+0xb18>
 80154de:	601d      	str	r5, [r3, #0]
 80154e0:	e23e      	b.n	8015960 <_dtoa_r+0xb18>
 80154e2:	f8cd a020 	str.w	sl, [sp, #32]
 80154e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80154ea:	2a39      	cmp	r2, #57	; 0x39
 80154ec:	f105 33ff 	add.w	r3, r5, #4294967295
 80154f0:	d108      	bne.n	8015504 <_dtoa_r+0x6bc>
 80154f2:	459b      	cmp	fp, r3
 80154f4:	d10a      	bne.n	801550c <_dtoa_r+0x6c4>
 80154f6:	9b08      	ldr	r3, [sp, #32]
 80154f8:	3301      	adds	r3, #1
 80154fa:	9308      	str	r3, [sp, #32]
 80154fc:	2330      	movs	r3, #48	; 0x30
 80154fe:	f88b 3000 	strb.w	r3, [fp]
 8015502:	465b      	mov	r3, fp
 8015504:	781a      	ldrb	r2, [r3, #0]
 8015506:	3201      	adds	r2, #1
 8015508:	701a      	strb	r2, [r3, #0]
 801550a:	e78c      	b.n	8015426 <_dtoa_r+0x5de>
 801550c:	461d      	mov	r5, r3
 801550e:	e7ea      	b.n	80154e6 <_dtoa_r+0x69e>
 8015510:	2200      	movs	r2, #0
 8015512:	4b9b      	ldr	r3, [pc, #620]	; (8015780 <_dtoa_r+0x938>)
 8015514:	f7f2 ffa8 	bl	8008468 <__aeabi_dmul>
 8015518:	2200      	movs	r2, #0
 801551a:	2300      	movs	r3, #0
 801551c:	4606      	mov	r6, r0
 801551e:	460f      	mov	r7, r1
 8015520:	f7f3 fa0a 	bl	8008938 <__aeabi_dcmpeq>
 8015524:	2800      	cmp	r0, #0
 8015526:	d09a      	beq.n	801545e <_dtoa_r+0x616>
 8015528:	e7cb      	b.n	80154c2 <_dtoa_r+0x67a>
 801552a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801552c:	2a00      	cmp	r2, #0
 801552e:	f000 808b 	beq.w	8015648 <_dtoa_r+0x800>
 8015532:	9a06      	ldr	r2, [sp, #24]
 8015534:	2a01      	cmp	r2, #1
 8015536:	dc6e      	bgt.n	8015616 <_dtoa_r+0x7ce>
 8015538:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801553a:	2a00      	cmp	r2, #0
 801553c:	d067      	beq.n	801560e <_dtoa_r+0x7c6>
 801553e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015542:	9f07      	ldr	r7, [sp, #28]
 8015544:	9d05      	ldr	r5, [sp, #20]
 8015546:	9a05      	ldr	r2, [sp, #20]
 8015548:	2101      	movs	r1, #1
 801554a:	441a      	add	r2, r3
 801554c:	4620      	mov	r0, r4
 801554e:	9205      	str	r2, [sp, #20]
 8015550:	4498      	add	r8, r3
 8015552:	f000 fcf9 	bl	8015f48 <__i2b>
 8015556:	4606      	mov	r6, r0
 8015558:	2d00      	cmp	r5, #0
 801555a:	dd0c      	ble.n	8015576 <_dtoa_r+0x72e>
 801555c:	f1b8 0f00 	cmp.w	r8, #0
 8015560:	dd09      	ble.n	8015576 <_dtoa_r+0x72e>
 8015562:	4545      	cmp	r5, r8
 8015564:	9a05      	ldr	r2, [sp, #20]
 8015566:	462b      	mov	r3, r5
 8015568:	bfa8      	it	ge
 801556a:	4643      	movge	r3, r8
 801556c:	1ad2      	subs	r2, r2, r3
 801556e:	9205      	str	r2, [sp, #20]
 8015570:	1aed      	subs	r5, r5, r3
 8015572:	eba8 0803 	sub.w	r8, r8, r3
 8015576:	9b07      	ldr	r3, [sp, #28]
 8015578:	b1eb      	cbz	r3, 80155b6 <_dtoa_r+0x76e>
 801557a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801557c:	2b00      	cmp	r3, #0
 801557e:	d067      	beq.n	8015650 <_dtoa_r+0x808>
 8015580:	b18f      	cbz	r7, 80155a6 <_dtoa_r+0x75e>
 8015582:	4631      	mov	r1, r6
 8015584:	463a      	mov	r2, r7
 8015586:	4620      	mov	r0, r4
 8015588:	f000 fd7e 	bl	8016088 <__pow5mult>
 801558c:	9a04      	ldr	r2, [sp, #16]
 801558e:	4601      	mov	r1, r0
 8015590:	4606      	mov	r6, r0
 8015592:	4620      	mov	r0, r4
 8015594:	f000 fce1 	bl	8015f5a <__multiply>
 8015598:	9904      	ldr	r1, [sp, #16]
 801559a:	9008      	str	r0, [sp, #32]
 801559c:	4620      	mov	r0, r4
 801559e:	f000 fc33 	bl	8015e08 <_Bfree>
 80155a2:	9b08      	ldr	r3, [sp, #32]
 80155a4:	9304      	str	r3, [sp, #16]
 80155a6:	9b07      	ldr	r3, [sp, #28]
 80155a8:	1bda      	subs	r2, r3, r7
 80155aa:	d004      	beq.n	80155b6 <_dtoa_r+0x76e>
 80155ac:	9904      	ldr	r1, [sp, #16]
 80155ae:	4620      	mov	r0, r4
 80155b0:	f000 fd6a 	bl	8016088 <__pow5mult>
 80155b4:	9004      	str	r0, [sp, #16]
 80155b6:	2101      	movs	r1, #1
 80155b8:	4620      	mov	r0, r4
 80155ba:	f000 fcc5 	bl	8015f48 <__i2b>
 80155be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155c0:	4607      	mov	r7, r0
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	f000 81d0 	beq.w	8015968 <_dtoa_r+0xb20>
 80155c8:	461a      	mov	r2, r3
 80155ca:	4601      	mov	r1, r0
 80155cc:	4620      	mov	r0, r4
 80155ce:	f000 fd5b 	bl	8016088 <__pow5mult>
 80155d2:	9b06      	ldr	r3, [sp, #24]
 80155d4:	2b01      	cmp	r3, #1
 80155d6:	4607      	mov	r7, r0
 80155d8:	dc40      	bgt.n	801565c <_dtoa_r+0x814>
 80155da:	9b00      	ldr	r3, [sp, #0]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d139      	bne.n	8015654 <_dtoa_r+0x80c>
 80155e0:	9b01      	ldr	r3, [sp, #4]
 80155e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d136      	bne.n	8015658 <_dtoa_r+0x810>
 80155ea:	9b01      	ldr	r3, [sp, #4]
 80155ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80155f0:	0d1b      	lsrs	r3, r3, #20
 80155f2:	051b      	lsls	r3, r3, #20
 80155f4:	b12b      	cbz	r3, 8015602 <_dtoa_r+0x7ba>
 80155f6:	9b05      	ldr	r3, [sp, #20]
 80155f8:	3301      	adds	r3, #1
 80155fa:	9305      	str	r3, [sp, #20]
 80155fc:	f108 0801 	add.w	r8, r8, #1
 8015600:	2301      	movs	r3, #1
 8015602:	9307      	str	r3, [sp, #28]
 8015604:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015606:	2b00      	cmp	r3, #0
 8015608:	d12a      	bne.n	8015660 <_dtoa_r+0x818>
 801560a:	2001      	movs	r0, #1
 801560c:	e030      	b.n	8015670 <_dtoa_r+0x828>
 801560e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015610:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015614:	e795      	b.n	8015542 <_dtoa_r+0x6fa>
 8015616:	9b07      	ldr	r3, [sp, #28]
 8015618:	f109 37ff 	add.w	r7, r9, #4294967295
 801561c:	42bb      	cmp	r3, r7
 801561e:	bfbf      	itttt	lt
 8015620:	9b07      	ldrlt	r3, [sp, #28]
 8015622:	9707      	strlt	r7, [sp, #28]
 8015624:	1afa      	sublt	r2, r7, r3
 8015626:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015628:	bfbb      	ittet	lt
 801562a:	189b      	addlt	r3, r3, r2
 801562c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801562e:	1bdf      	subge	r7, r3, r7
 8015630:	2700      	movlt	r7, #0
 8015632:	f1b9 0f00 	cmp.w	r9, #0
 8015636:	bfb5      	itete	lt
 8015638:	9b05      	ldrlt	r3, [sp, #20]
 801563a:	9d05      	ldrge	r5, [sp, #20]
 801563c:	eba3 0509 	sublt.w	r5, r3, r9
 8015640:	464b      	movge	r3, r9
 8015642:	bfb8      	it	lt
 8015644:	2300      	movlt	r3, #0
 8015646:	e77e      	b.n	8015546 <_dtoa_r+0x6fe>
 8015648:	9f07      	ldr	r7, [sp, #28]
 801564a:	9d05      	ldr	r5, [sp, #20]
 801564c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801564e:	e783      	b.n	8015558 <_dtoa_r+0x710>
 8015650:	9a07      	ldr	r2, [sp, #28]
 8015652:	e7ab      	b.n	80155ac <_dtoa_r+0x764>
 8015654:	2300      	movs	r3, #0
 8015656:	e7d4      	b.n	8015602 <_dtoa_r+0x7ba>
 8015658:	9b00      	ldr	r3, [sp, #0]
 801565a:	e7d2      	b.n	8015602 <_dtoa_r+0x7ba>
 801565c:	2300      	movs	r3, #0
 801565e:	9307      	str	r3, [sp, #28]
 8015660:	693b      	ldr	r3, [r7, #16]
 8015662:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015666:	6918      	ldr	r0, [r3, #16]
 8015668:	f000 fc20 	bl	8015eac <__hi0bits>
 801566c:	f1c0 0020 	rsb	r0, r0, #32
 8015670:	4440      	add	r0, r8
 8015672:	f010 001f 	ands.w	r0, r0, #31
 8015676:	d047      	beq.n	8015708 <_dtoa_r+0x8c0>
 8015678:	f1c0 0320 	rsb	r3, r0, #32
 801567c:	2b04      	cmp	r3, #4
 801567e:	dd3b      	ble.n	80156f8 <_dtoa_r+0x8b0>
 8015680:	9b05      	ldr	r3, [sp, #20]
 8015682:	f1c0 001c 	rsb	r0, r0, #28
 8015686:	4403      	add	r3, r0
 8015688:	9305      	str	r3, [sp, #20]
 801568a:	4405      	add	r5, r0
 801568c:	4480      	add	r8, r0
 801568e:	9b05      	ldr	r3, [sp, #20]
 8015690:	2b00      	cmp	r3, #0
 8015692:	dd05      	ble.n	80156a0 <_dtoa_r+0x858>
 8015694:	461a      	mov	r2, r3
 8015696:	9904      	ldr	r1, [sp, #16]
 8015698:	4620      	mov	r0, r4
 801569a:	f000 fd43 	bl	8016124 <__lshift>
 801569e:	9004      	str	r0, [sp, #16]
 80156a0:	f1b8 0f00 	cmp.w	r8, #0
 80156a4:	dd05      	ble.n	80156b2 <_dtoa_r+0x86a>
 80156a6:	4639      	mov	r1, r7
 80156a8:	4642      	mov	r2, r8
 80156aa:	4620      	mov	r0, r4
 80156ac:	f000 fd3a 	bl	8016124 <__lshift>
 80156b0:	4607      	mov	r7, r0
 80156b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156b4:	b353      	cbz	r3, 801570c <_dtoa_r+0x8c4>
 80156b6:	4639      	mov	r1, r7
 80156b8:	9804      	ldr	r0, [sp, #16]
 80156ba:	f000 fd87 	bl	80161cc <__mcmp>
 80156be:	2800      	cmp	r0, #0
 80156c0:	da24      	bge.n	801570c <_dtoa_r+0x8c4>
 80156c2:	2300      	movs	r3, #0
 80156c4:	220a      	movs	r2, #10
 80156c6:	9904      	ldr	r1, [sp, #16]
 80156c8:	4620      	mov	r0, r4
 80156ca:	f000 fbb4 	bl	8015e36 <__multadd>
 80156ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156d0:	9004      	str	r0, [sp, #16]
 80156d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	f000 814d 	beq.w	8015976 <_dtoa_r+0xb2e>
 80156dc:	2300      	movs	r3, #0
 80156de:	4631      	mov	r1, r6
 80156e0:	220a      	movs	r2, #10
 80156e2:	4620      	mov	r0, r4
 80156e4:	f000 fba7 	bl	8015e36 <__multadd>
 80156e8:	9b02      	ldr	r3, [sp, #8]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	4606      	mov	r6, r0
 80156ee:	dc4f      	bgt.n	8015790 <_dtoa_r+0x948>
 80156f0:	9b06      	ldr	r3, [sp, #24]
 80156f2:	2b02      	cmp	r3, #2
 80156f4:	dd4c      	ble.n	8015790 <_dtoa_r+0x948>
 80156f6:	e011      	b.n	801571c <_dtoa_r+0x8d4>
 80156f8:	d0c9      	beq.n	801568e <_dtoa_r+0x846>
 80156fa:	9a05      	ldr	r2, [sp, #20]
 80156fc:	331c      	adds	r3, #28
 80156fe:	441a      	add	r2, r3
 8015700:	9205      	str	r2, [sp, #20]
 8015702:	441d      	add	r5, r3
 8015704:	4498      	add	r8, r3
 8015706:	e7c2      	b.n	801568e <_dtoa_r+0x846>
 8015708:	4603      	mov	r3, r0
 801570a:	e7f6      	b.n	80156fa <_dtoa_r+0x8b2>
 801570c:	f1b9 0f00 	cmp.w	r9, #0
 8015710:	dc38      	bgt.n	8015784 <_dtoa_r+0x93c>
 8015712:	9b06      	ldr	r3, [sp, #24]
 8015714:	2b02      	cmp	r3, #2
 8015716:	dd35      	ble.n	8015784 <_dtoa_r+0x93c>
 8015718:	f8cd 9008 	str.w	r9, [sp, #8]
 801571c:	9b02      	ldr	r3, [sp, #8]
 801571e:	b963      	cbnz	r3, 801573a <_dtoa_r+0x8f2>
 8015720:	4639      	mov	r1, r7
 8015722:	2205      	movs	r2, #5
 8015724:	4620      	mov	r0, r4
 8015726:	f000 fb86 	bl	8015e36 <__multadd>
 801572a:	4601      	mov	r1, r0
 801572c:	4607      	mov	r7, r0
 801572e:	9804      	ldr	r0, [sp, #16]
 8015730:	f000 fd4c 	bl	80161cc <__mcmp>
 8015734:	2800      	cmp	r0, #0
 8015736:	f73f adcc 	bgt.w	80152d2 <_dtoa_r+0x48a>
 801573a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801573c:	465d      	mov	r5, fp
 801573e:	ea6f 0a03 	mvn.w	sl, r3
 8015742:	f04f 0900 	mov.w	r9, #0
 8015746:	4639      	mov	r1, r7
 8015748:	4620      	mov	r0, r4
 801574a:	f000 fb5d 	bl	8015e08 <_Bfree>
 801574e:	2e00      	cmp	r6, #0
 8015750:	f43f aeb7 	beq.w	80154c2 <_dtoa_r+0x67a>
 8015754:	f1b9 0f00 	cmp.w	r9, #0
 8015758:	d005      	beq.n	8015766 <_dtoa_r+0x91e>
 801575a:	45b1      	cmp	r9, r6
 801575c:	d003      	beq.n	8015766 <_dtoa_r+0x91e>
 801575e:	4649      	mov	r1, r9
 8015760:	4620      	mov	r0, r4
 8015762:	f000 fb51 	bl	8015e08 <_Bfree>
 8015766:	4631      	mov	r1, r6
 8015768:	4620      	mov	r0, r4
 801576a:	f000 fb4d 	bl	8015e08 <_Bfree>
 801576e:	e6a8      	b.n	80154c2 <_dtoa_r+0x67a>
 8015770:	2700      	movs	r7, #0
 8015772:	463e      	mov	r6, r7
 8015774:	e7e1      	b.n	801573a <_dtoa_r+0x8f2>
 8015776:	f8dd a020 	ldr.w	sl, [sp, #32]
 801577a:	463e      	mov	r6, r7
 801577c:	e5a9      	b.n	80152d2 <_dtoa_r+0x48a>
 801577e:	bf00      	nop
 8015780:	40240000 	.word	0x40240000
 8015784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015786:	f8cd 9008 	str.w	r9, [sp, #8]
 801578a:	2b00      	cmp	r3, #0
 801578c:	f000 80fa 	beq.w	8015984 <_dtoa_r+0xb3c>
 8015790:	2d00      	cmp	r5, #0
 8015792:	dd05      	ble.n	80157a0 <_dtoa_r+0x958>
 8015794:	4631      	mov	r1, r6
 8015796:	462a      	mov	r2, r5
 8015798:	4620      	mov	r0, r4
 801579a:	f000 fcc3 	bl	8016124 <__lshift>
 801579e:	4606      	mov	r6, r0
 80157a0:	9b07      	ldr	r3, [sp, #28]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d04c      	beq.n	8015840 <_dtoa_r+0x9f8>
 80157a6:	6871      	ldr	r1, [r6, #4]
 80157a8:	4620      	mov	r0, r4
 80157aa:	f000 faf9 	bl	8015da0 <_Balloc>
 80157ae:	6932      	ldr	r2, [r6, #16]
 80157b0:	3202      	adds	r2, #2
 80157b2:	4605      	mov	r5, r0
 80157b4:	0092      	lsls	r2, r2, #2
 80157b6:	f106 010c 	add.w	r1, r6, #12
 80157ba:	300c      	adds	r0, #12
 80157bc:	f7fe fd0c 	bl	80141d8 <memcpy>
 80157c0:	2201      	movs	r2, #1
 80157c2:	4629      	mov	r1, r5
 80157c4:	4620      	mov	r0, r4
 80157c6:	f000 fcad 	bl	8016124 <__lshift>
 80157ca:	9b00      	ldr	r3, [sp, #0]
 80157cc:	f8cd b014 	str.w	fp, [sp, #20]
 80157d0:	f003 0301 	and.w	r3, r3, #1
 80157d4:	46b1      	mov	r9, r6
 80157d6:	9307      	str	r3, [sp, #28]
 80157d8:	4606      	mov	r6, r0
 80157da:	4639      	mov	r1, r7
 80157dc:	9804      	ldr	r0, [sp, #16]
 80157de:	f7ff faa7 	bl	8014d30 <quorem>
 80157e2:	4649      	mov	r1, r9
 80157e4:	4605      	mov	r5, r0
 80157e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80157ea:	9804      	ldr	r0, [sp, #16]
 80157ec:	f000 fcee 	bl	80161cc <__mcmp>
 80157f0:	4632      	mov	r2, r6
 80157f2:	9000      	str	r0, [sp, #0]
 80157f4:	4639      	mov	r1, r7
 80157f6:	4620      	mov	r0, r4
 80157f8:	f000 fd02 	bl	8016200 <__mdiff>
 80157fc:	68c3      	ldr	r3, [r0, #12]
 80157fe:	4602      	mov	r2, r0
 8015800:	bb03      	cbnz	r3, 8015844 <_dtoa_r+0x9fc>
 8015802:	4601      	mov	r1, r0
 8015804:	9008      	str	r0, [sp, #32]
 8015806:	9804      	ldr	r0, [sp, #16]
 8015808:	f000 fce0 	bl	80161cc <__mcmp>
 801580c:	9a08      	ldr	r2, [sp, #32]
 801580e:	4603      	mov	r3, r0
 8015810:	4611      	mov	r1, r2
 8015812:	4620      	mov	r0, r4
 8015814:	9308      	str	r3, [sp, #32]
 8015816:	f000 faf7 	bl	8015e08 <_Bfree>
 801581a:	9b08      	ldr	r3, [sp, #32]
 801581c:	b9a3      	cbnz	r3, 8015848 <_dtoa_r+0xa00>
 801581e:	9a06      	ldr	r2, [sp, #24]
 8015820:	b992      	cbnz	r2, 8015848 <_dtoa_r+0xa00>
 8015822:	9a07      	ldr	r2, [sp, #28]
 8015824:	b982      	cbnz	r2, 8015848 <_dtoa_r+0xa00>
 8015826:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801582a:	d029      	beq.n	8015880 <_dtoa_r+0xa38>
 801582c:	9b00      	ldr	r3, [sp, #0]
 801582e:	2b00      	cmp	r3, #0
 8015830:	dd01      	ble.n	8015836 <_dtoa_r+0x9ee>
 8015832:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015836:	9b05      	ldr	r3, [sp, #20]
 8015838:	1c5d      	adds	r5, r3, #1
 801583a:	f883 8000 	strb.w	r8, [r3]
 801583e:	e782      	b.n	8015746 <_dtoa_r+0x8fe>
 8015840:	4630      	mov	r0, r6
 8015842:	e7c2      	b.n	80157ca <_dtoa_r+0x982>
 8015844:	2301      	movs	r3, #1
 8015846:	e7e3      	b.n	8015810 <_dtoa_r+0x9c8>
 8015848:	9a00      	ldr	r2, [sp, #0]
 801584a:	2a00      	cmp	r2, #0
 801584c:	db04      	blt.n	8015858 <_dtoa_r+0xa10>
 801584e:	d125      	bne.n	801589c <_dtoa_r+0xa54>
 8015850:	9a06      	ldr	r2, [sp, #24]
 8015852:	bb1a      	cbnz	r2, 801589c <_dtoa_r+0xa54>
 8015854:	9a07      	ldr	r2, [sp, #28]
 8015856:	bb0a      	cbnz	r2, 801589c <_dtoa_r+0xa54>
 8015858:	2b00      	cmp	r3, #0
 801585a:	ddec      	ble.n	8015836 <_dtoa_r+0x9ee>
 801585c:	2201      	movs	r2, #1
 801585e:	9904      	ldr	r1, [sp, #16]
 8015860:	4620      	mov	r0, r4
 8015862:	f000 fc5f 	bl	8016124 <__lshift>
 8015866:	4639      	mov	r1, r7
 8015868:	9004      	str	r0, [sp, #16]
 801586a:	f000 fcaf 	bl	80161cc <__mcmp>
 801586e:	2800      	cmp	r0, #0
 8015870:	dc03      	bgt.n	801587a <_dtoa_r+0xa32>
 8015872:	d1e0      	bne.n	8015836 <_dtoa_r+0x9ee>
 8015874:	f018 0f01 	tst.w	r8, #1
 8015878:	d0dd      	beq.n	8015836 <_dtoa_r+0x9ee>
 801587a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801587e:	d1d8      	bne.n	8015832 <_dtoa_r+0x9ea>
 8015880:	9b05      	ldr	r3, [sp, #20]
 8015882:	9a05      	ldr	r2, [sp, #20]
 8015884:	1c5d      	adds	r5, r3, #1
 8015886:	2339      	movs	r3, #57	; 0x39
 8015888:	7013      	strb	r3, [r2, #0]
 801588a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801588e:	2b39      	cmp	r3, #57	; 0x39
 8015890:	f105 32ff 	add.w	r2, r5, #4294967295
 8015894:	d04f      	beq.n	8015936 <_dtoa_r+0xaee>
 8015896:	3301      	adds	r3, #1
 8015898:	7013      	strb	r3, [r2, #0]
 801589a:	e754      	b.n	8015746 <_dtoa_r+0x8fe>
 801589c:	9a05      	ldr	r2, [sp, #20]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	f102 0501 	add.w	r5, r2, #1
 80158a4:	dd06      	ble.n	80158b4 <_dtoa_r+0xa6c>
 80158a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80158aa:	d0e9      	beq.n	8015880 <_dtoa_r+0xa38>
 80158ac:	f108 0801 	add.w	r8, r8, #1
 80158b0:	9b05      	ldr	r3, [sp, #20]
 80158b2:	e7c2      	b.n	801583a <_dtoa_r+0x9f2>
 80158b4:	9a02      	ldr	r2, [sp, #8]
 80158b6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80158ba:	eba5 030b 	sub.w	r3, r5, fp
 80158be:	4293      	cmp	r3, r2
 80158c0:	d021      	beq.n	8015906 <_dtoa_r+0xabe>
 80158c2:	2300      	movs	r3, #0
 80158c4:	220a      	movs	r2, #10
 80158c6:	9904      	ldr	r1, [sp, #16]
 80158c8:	4620      	mov	r0, r4
 80158ca:	f000 fab4 	bl	8015e36 <__multadd>
 80158ce:	45b1      	cmp	r9, r6
 80158d0:	9004      	str	r0, [sp, #16]
 80158d2:	f04f 0300 	mov.w	r3, #0
 80158d6:	f04f 020a 	mov.w	r2, #10
 80158da:	4649      	mov	r1, r9
 80158dc:	4620      	mov	r0, r4
 80158de:	d105      	bne.n	80158ec <_dtoa_r+0xaa4>
 80158e0:	f000 faa9 	bl	8015e36 <__multadd>
 80158e4:	4681      	mov	r9, r0
 80158e6:	4606      	mov	r6, r0
 80158e8:	9505      	str	r5, [sp, #20]
 80158ea:	e776      	b.n	80157da <_dtoa_r+0x992>
 80158ec:	f000 faa3 	bl	8015e36 <__multadd>
 80158f0:	4631      	mov	r1, r6
 80158f2:	4681      	mov	r9, r0
 80158f4:	2300      	movs	r3, #0
 80158f6:	220a      	movs	r2, #10
 80158f8:	4620      	mov	r0, r4
 80158fa:	f000 fa9c 	bl	8015e36 <__multadd>
 80158fe:	4606      	mov	r6, r0
 8015900:	e7f2      	b.n	80158e8 <_dtoa_r+0xaa0>
 8015902:	f04f 0900 	mov.w	r9, #0
 8015906:	2201      	movs	r2, #1
 8015908:	9904      	ldr	r1, [sp, #16]
 801590a:	4620      	mov	r0, r4
 801590c:	f000 fc0a 	bl	8016124 <__lshift>
 8015910:	4639      	mov	r1, r7
 8015912:	9004      	str	r0, [sp, #16]
 8015914:	f000 fc5a 	bl	80161cc <__mcmp>
 8015918:	2800      	cmp	r0, #0
 801591a:	dcb6      	bgt.n	801588a <_dtoa_r+0xa42>
 801591c:	d102      	bne.n	8015924 <_dtoa_r+0xadc>
 801591e:	f018 0f01 	tst.w	r8, #1
 8015922:	d1b2      	bne.n	801588a <_dtoa_r+0xa42>
 8015924:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015928:	2b30      	cmp	r3, #48	; 0x30
 801592a:	f105 32ff 	add.w	r2, r5, #4294967295
 801592e:	f47f af0a 	bne.w	8015746 <_dtoa_r+0x8fe>
 8015932:	4615      	mov	r5, r2
 8015934:	e7f6      	b.n	8015924 <_dtoa_r+0xadc>
 8015936:	4593      	cmp	fp, r2
 8015938:	d105      	bne.n	8015946 <_dtoa_r+0xafe>
 801593a:	2331      	movs	r3, #49	; 0x31
 801593c:	f10a 0a01 	add.w	sl, sl, #1
 8015940:	f88b 3000 	strb.w	r3, [fp]
 8015944:	e6ff      	b.n	8015746 <_dtoa_r+0x8fe>
 8015946:	4615      	mov	r5, r2
 8015948:	e79f      	b.n	801588a <_dtoa_r+0xa42>
 801594a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80159b0 <_dtoa_r+0xb68>
 801594e:	e007      	b.n	8015960 <_dtoa_r+0xb18>
 8015950:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015952:	f8df b060 	ldr.w	fp, [pc, #96]	; 80159b4 <_dtoa_r+0xb6c>
 8015956:	b11b      	cbz	r3, 8015960 <_dtoa_r+0xb18>
 8015958:	f10b 0308 	add.w	r3, fp, #8
 801595c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801595e:	6013      	str	r3, [r2, #0]
 8015960:	4658      	mov	r0, fp
 8015962:	b017      	add	sp, #92	; 0x5c
 8015964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015968:	9b06      	ldr	r3, [sp, #24]
 801596a:	2b01      	cmp	r3, #1
 801596c:	f77f ae35 	ble.w	80155da <_dtoa_r+0x792>
 8015970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015972:	9307      	str	r3, [sp, #28]
 8015974:	e649      	b.n	801560a <_dtoa_r+0x7c2>
 8015976:	9b02      	ldr	r3, [sp, #8]
 8015978:	2b00      	cmp	r3, #0
 801597a:	dc03      	bgt.n	8015984 <_dtoa_r+0xb3c>
 801597c:	9b06      	ldr	r3, [sp, #24]
 801597e:	2b02      	cmp	r3, #2
 8015980:	f73f aecc 	bgt.w	801571c <_dtoa_r+0x8d4>
 8015984:	465d      	mov	r5, fp
 8015986:	4639      	mov	r1, r7
 8015988:	9804      	ldr	r0, [sp, #16]
 801598a:	f7ff f9d1 	bl	8014d30 <quorem>
 801598e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015992:	f805 8b01 	strb.w	r8, [r5], #1
 8015996:	9a02      	ldr	r2, [sp, #8]
 8015998:	eba5 030b 	sub.w	r3, r5, fp
 801599c:	429a      	cmp	r2, r3
 801599e:	ddb0      	ble.n	8015902 <_dtoa_r+0xaba>
 80159a0:	2300      	movs	r3, #0
 80159a2:	220a      	movs	r2, #10
 80159a4:	9904      	ldr	r1, [sp, #16]
 80159a6:	4620      	mov	r0, r4
 80159a8:	f000 fa45 	bl	8015e36 <__multadd>
 80159ac:	9004      	str	r0, [sp, #16]
 80159ae:	e7ea      	b.n	8015986 <_dtoa_r+0xb3e>
 80159b0:	08016a8c 	.word	0x08016a8c
 80159b4:	08016ab0 	.word	0x08016ab0

080159b8 <__sflush_r>:
 80159b8:	898a      	ldrh	r2, [r1, #12]
 80159ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159be:	4605      	mov	r5, r0
 80159c0:	0710      	lsls	r0, r2, #28
 80159c2:	460c      	mov	r4, r1
 80159c4:	d458      	bmi.n	8015a78 <__sflush_r+0xc0>
 80159c6:	684b      	ldr	r3, [r1, #4]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	dc05      	bgt.n	80159d8 <__sflush_r+0x20>
 80159cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	dc02      	bgt.n	80159d8 <__sflush_r+0x20>
 80159d2:	2000      	movs	r0, #0
 80159d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159da:	2e00      	cmp	r6, #0
 80159dc:	d0f9      	beq.n	80159d2 <__sflush_r+0x1a>
 80159de:	2300      	movs	r3, #0
 80159e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80159e4:	682f      	ldr	r7, [r5, #0]
 80159e6:	6a21      	ldr	r1, [r4, #32]
 80159e8:	602b      	str	r3, [r5, #0]
 80159ea:	d032      	beq.n	8015a52 <__sflush_r+0x9a>
 80159ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80159ee:	89a3      	ldrh	r3, [r4, #12]
 80159f0:	075a      	lsls	r2, r3, #29
 80159f2:	d505      	bpl.n	8015a00 <__sflush_r+0x48>
 80159f4:	6863      	ldr	r3, [r4, #4]
 80159f6:	1ac0      	subs	r0, r0, r3
 80159f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80159fa:	b10b      	cbz	r3, 8015a00 <__sflush_r+0x48>
 80159fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80159fe:	1ac0      	subs	r0, r0, r3
 8015a00:	2300      	movs	r3, #0
 8015a02:	4602      	mov	r2, r0
 8015a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015a06:	6a21      	ldr	r1, [r4, #32]
 8015a08:	4628      	mov	r0, r5
 8015a0a:	47b0      	blx	r6
 8015a0c:	1c43      	adds	r3, r0, #1
 8015a0e:	89a3      	ldrh	r3, [r4, #12]
 8015a10:	d106      	bne.n	8015a20 <__sflush_r+0x68>
 8015a12:	6829      	ldr	r1, [r5, #0]
 8015a14:	291d      	cmp	r1, #29
 8015a16:	d848      	bhi.n	8015aaa <__sflush_r+0xf2>
 8015a18:	4a29      	ldr	r2, [pc, #164]	; (8015ac0 <__sflush_r+0x108>)
 8015a1a:	40ca      	lsrs	r2, r1
 8015a1c:	07d6      	lsls	r6, r2, #31
 8015a1e:	d544      	bpl.n	8015aaa <__sflush_r+0xf2>
 8015a20:	2200      	movs	r2, #0
 8015a22:	6062      	str	r2, [r4, #4]
 8015a24:	04d9      	lsls	r1, r3, #19
 8015a26:	6922      	ldr	r2, [r4, #16]
 8015a28:	6022      	str	r2, [r4, #0]
 8015a2a:	d504      	bpl.n	8015a36 <__sflush_r+0x7e>
 8015a2c:	1c42      	adds	r2, r0, #1
 8015a2e:	d101      	bne.n	8015a34 <__sflush_r+0x7c>
 8015a30:	682b      	ldr	r3, [r5, #0]
 8015a32:	b903      	cbnz	r3, 8015a36 <__sflush_r+0x7e>
 8015a34:	6560      	str	r0, [r4, #84]	; 0x54
 8015a36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a38:	602f      	str	r7, [r5, #0]
 8015a3a:	2900      	cmp	r1, #0
 8015a3c:	d0c9      	beq.n	80159d2 <__sflush_r+0x1a>
 8015a3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a42:	4299      	cmp	r1, r3
 8015a44:	d002      	beq.n	8015a4c <__sflush_r+0x94>
 8015a46:	4628      	mov	r0, r5
 8015a48:	f000 fc94 	bl	8016374 <_free_r>
 8015a4c:	2000      	movs	r0, #0
 8015a4e:	6360      	str	r0, [r4, #52]	; 0x34
 8015a50:	e7c0      	b.n	80159d4 <__sflush_r+0x1c>
 8015a52:	2301      	movs	r3, #1
 8015a54:	4628      	mov	r0, r5
 8015a56:	47b0      	blx	r6
 8015a58:	1c41      	adds	r1, r0, #1
 8015a5a:	d1c8      	bne.n	80159ee <__sflush_r+0x36>
 8015a5c:	682b      	ldr	r3, [r5, #0]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d0c5      	beq.n	80159ee <__sflush_r+0x36>
 8015a62:	2b1d      	cmp	r3, #29
 8015a64:	d001      	beq.n	8015a6a <__sflush_r+0xb2>
 8015a66:	2b16      	cmp	r3, #22
 8015a68:	d101      	bne.n	8015a6e <__sflush_r+0xb6>
 8015a6a:	602f      	str	r7, [r5, #0]
 8015a6c:	e7b1      	b.n	80159d2 <__sflush_r+0x1a>
 8015a6e:	89a3      	ldrh	r3, [r4, #12]
 8015a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a74:	81a3      	strh	r3, [r4, #12]
 8015a76:	e7ad      	b.n	80159d4 <__sflush_r+0x1c>
 8015a78:	690f      	ldr	r7, [r1, #16]
 8015a7a:	2f00      	cmp	r7, #0
 8015a7c:	d0a9      	beq.n	80159d2 <__sflush_r+0x1a>
 8015a7e:	0793      	lsls	r3, r2, #30
 8015a80:	680e      	ldr	r6, [r1, #0]
 8015a82:	bf08      	it	eq
 8015a84:	694b      	ldreq	r3, [r1, #20]
 8015a86:	600f      	str	r7, [r1, #0]
 8015a88:	bf18      	it	ne
 8015a8a:	2300      	movne	r3, #0
 8015a8c:	eba6 0807 	sub.w	r8, r6, r7
 8015a90:	608b      	str	r3, [r1, #8]
 8015a92:	f1b8 0f00 	cmp.w	r8, #0
 8015a96:	dd9c      	ble.n	80159d2 <__sflush_r+0x1a>
 8015a98:	4643      	mov	r3, r8
 8015a9a:	463a      	mov	r2, r7
 8015a9c:	6a21      	ldr	r1, [r4, #32]
 8015a9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015aa0:	4628      	mov	r0, r5
 8015aa2:	47b0      	blx	r6
 8015aa4:	2800      	cmp	r0, #0
 8015aa6:	dc06      	bgt.n	8015ab6 <__sflush_r+0xfe>
 8015aa8:	89a3      	ldrh	r3, [r4, #12]
 8015aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015aae:	81a3      	strh	r3, [r4, #12]
 8015ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8015ab4:	e78e      	b.n	80159d4 <__sflush_r+0x1c>
 8015ab6:	4407      	add	r7, r0
 8015ab8:	eba8 0800 	sub.w	r8, r8, r0
 8015abc:	e7e9      	b.n	8015a92 <__sflush_r+0xda>
 8015abe:	bf00      	nop
 8015ac0:	20400001 	.word	0x20400001

08015ac4 <_fflush_r>:
 8015ac4:	b538      	push	{r3, r4, r5, lr}
 8015ac6:	690b      	ldr	r3, [r1, #16]
 8015ac8:	4605      	mov	r5, r0
 8015aca:	460c      	mov	r4, r1
 8015acc:	b1db      	cbz	r3, 8015b06 <_fflush_r+0x42>
 8015ace:	b118      	cbz	r0, 8015ad8 <_fflush_r+0x14>
 8015ad0:	6983      	ldr	r3, [r0, #24]
 8015ad2:	b90b      	cbnz	r3, 8015ad8 <_fflush_r+0x14>
 8015ad4:	f000 f860 	bl	8015b98 <__sinit>
 8015ad8:	4b0c      	ldr	r3, [pc, #48]	; (8015b0c <_fflush_r+0x48>)
 8015ada:	429c      	cmp	r4, r3
 8015adc:	d109      	bne.n	8015af2 <_fflush_r+0x2e>
 8015ade:	686c      	ldr	r4, [r5, #4]
 8015ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ae4:	b17b      	cbz	r3, 8015b06 <_fflush_r+0x42>
 8015ae6:	4621      	mov	r1, r4
 8015ae8:	4628      	mov	r0, r5
 8015aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015aee:	f7ff bf63 	b.w	80159b8 <__sflush_r>
 8015af2:	4b07      	ldr	r3, [pc, #28]	; (8015b10 <_fflush_r+0x4c>)
 8015af4:	429c      	cmp	r4, r3
 8015af6:	d101      	bne.n	8015afc <_fflush_r+0x38>
 8015af8:	68ac      	ldr	r4, [r5, #8]
 8015afa:	e7f1      	b.n	8015ae0 <_fflush_r+0x1c>
 8015afc:	4b05      	ldr	r3, [pc, #20]	; (8015b14 <_fflush_r+0x50>)
 8015afe:	429c      	cmp	r4, r3
 8015b00:	bf08      	it	eq
 8015b02:	68ec      	ldreq	r4, [r5, #12]
 8015b04:	e7ec      	b.n	8015ae0 <_fflush_r+0x1c>
 8015b06:	2000      	movs	r0, #0
 8015b08:	bd38      	pop	{r3, r4, r5, pc}
 8015b0a:	bf00      	nop
 8015b0c:	08016ae0 	.word	0x08016ae0
 8015b10:	08016b00 	.word	0x08016b00
 8015b14:	08016ac0 	.word	0x08016ac0

08015b18 <std>:
 8015b18:	2300      	movs	r3, #0
 8015b1a:	b510      	push	{r4, lr}
 8015b1c:	4604      	mov	r4, r0
 8015b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8015b22:	6083      	str	r3, [r0, #8]
 8015b24:	8181      	strh	r1, [r0, #12]
 8015b26:	6643      	str	r3, [r0, #100]	; 0x64
 8015b28:	81c2      	strh	r2, [r0, #14]
 8015b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015b2e:	6183      	str	r3, [r0, #24]
 8015b30:	4619      	mov	r1, r3
 8015b32:	2208      	movs	r2, #8
 8015b34:	305c      	adds	r0, #92	; 0x5c
 8015b36:	f7fe fb5a 	bl	80141ee <memset>
 8015b3a:	4b05      	ldr	r3, [pc, #20]	; (8015b50 <std+0x38>)
 8015b3c:	6263      	str	r3, [r4, #36]	; 0x24
 8015b3e:	4b05      	ldr	r3, [pc, #20]	; (8015b54 <std+0x3c>)
 8015b40:	62a3      	str	r3, [r4, #40]	; 0x28
 8015b42:	4b05      	ldr	r3, [pc, #20]	; (8015b58 <std+0x40>)
 8015b44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015b46:	4b05      	ldr	r3, [pc, #20]	; (8015b5c <std+0x44>)
 8015b48:	6224      	str	r4, [r4, #32]
 8015b4a:	6323      	str	r3, [r4, #48]	; 0x30
 8015b4c:	bd10      	pop	{r4, pc}
 8015b4e:	bf00      	nop
 8015b50:	08016765 	.word	0x08016765
 8015b54:	08016787 	.word	0x08016787
 8015b58:	080167bf 	.word	0x080167bf
 8015b5c:	080167e3 	.word	0x080167e3

08015b60 <_cleanup_r>:
 8015b60:	4901      	ldr	r1, [pc, #4]	; (8015b68 <_cleanup_r+0x8>)
 8015b62:	f000 b885 	b.w	8015c70 <_fwalk_reent>
 8015b66:	bf00      	nop
 8015b68:	08015ac5 	.word	0x08015ac5

08015b6c <__sfmoreglue>:
 8015b6c:	b570      	push	{r4, r5, r6, lr}
 8015b6e:	1e4a      	subs	r2, r1, #1
 8015b70:	2568      	movs	r5, #104	; 0x68
 8015b72:	4355      	muls	r5, r2
 8015b74:	460e      	mov	r6, r1
 8015b76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015b7a:	f000 fc49 	bl	8016410 <_malloc_r>
 8015b7e:	4604      	mov	r4, r0
 8015b80:	b140      	cbz	r0, 8015b94 <__sfmoreglue+0x28>
 8015b82:	2100      	movs	r1, #0
 8015b84:	e9c0 1600 	strd	r1, r6, [r0]
 8015b88:	300c      	adds	r0, #12
 8015b8a:	60a0      	str	r0, [r4, #8]
 8015b8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015b90:	f7fe fb2d 	bl	80141ee <memset>
 8015b94:	4620      	mov	r0, r4
 8015b96:	bd70      	pop	{r4, r5, r6, pc}

08015b98 <__sinit>:
 8015b98:	6983      	ldr	r3, [r0, #24]
 8015b9a:	b510      	push	{r4, lr}
 8015b9c:	4604      	mov	r4, r0
 8015b9e:	bb33      	cbnz	r3, 8015bee <__sinit+0x56>
 8015ba0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015ba4:	6503      	str	r3, [r0, #80]	; 0x50
 8015ba6:	4b12      	ldr	r3, [pc, #72]	; (8015bf0 <__sinit+0x58>)
 8015ba8:	4a12      	ldr	r2, [pc, #72]	; (8015bf4 <__sinit+0x5c>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	6282      	str	r2, [r0, #40]	; 0x28
 8015bae:	4298      	cmp	r0, r3
 8015bb0:	bf04      	itt	eq
 8015bb2:	2301      	moveq	r3, #1
 8015bb4:	6183      	streq	r3, [r0, #24]
 8015bb6:	f000 f81f 	bl	8015bf8 <__sfp>
 8015bba:	6060      	str	r0, [r4, #4]
 8015bbc:	4620      	mov	r0, r4
 8015bbe:	f000 f81b 	bl	8015bf8 <__sfp>
 8015bc2:	60a0      	str	r0, [r4, #8]
 8015bc4:	4620      	mov	r0, r4
 8015bc6:	f000 f817 	bl	8015bf8 <__sfp>
 8015bca:	2200      	movs	r2, #0
 8015bcc:	60e0      	str	r0, [r4, #12]
 8015bce:	2104      	movs	r1, #4
 8015bd0:	6860      	ldr	r0, [r4, #4]
 8015bd2:	f7ff ffa1 	bl	8015b18 <std>
 8015bd6:	2201      	movs	r2, #1
 8015bd8:	2109      	movs	r1, #9
 8015bda:	68a0      	ldr	r0, [r4, #8]
 8015bdc:	f7ff ff9c 	bl	8015b18 <std>
 8015be0:	2202      	movs	r2, #2
 8015be2:	2112      	movs	r1, #18
 8015be4:	68e0      	ldr	r0, [r4, #12]
 8015be6:	f7ff ff97 	bl	8015b18 <std>
 8015bea:	2301      	movs	r3, #1
 8015bec:	61a3      	str	r3, [r4, #24]
 8015bee:	bd10      	pop	{r4, pc}
 8015bf0:	08016a78 	.word	0x08016a78
 8015bf4:	08015b61 	.word	0x08015b61

08015bf8 <__sfp>:
 8015bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bfa:	4b1b      	ldr	r3, [pc, #108]	; (8015c68 <__sfp+0x70>)
 8015bfc:	681e      	ldr	r6, [r3, #0]
 8015bfe:	69b3      	ldr	r3, [r6, #24]
 8015c00:	4607      	mov	r7, r0
 8015c02:	b913      	cbnz	r3, 8015c0a <__sfp+0x12>
 8015c04:	4630      	mov	r0, r6
 8015c06:	f7ff ffc7 	bl	8015b98 <__sinit>
 8015c0a:	3648      	adds	r6, #72	; 0x48
 8015c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015c10:	3b01      	subs	r3, #1
 8015c12:	d503      	bpl.n	8015c1c <__sfp+0x24>
 8015c14:	6833      	ldr	r3, [r6, #0]
 8015c16:	b133      	cbz	r3, 8015c26 <__sfp+0x2e>
 8015c18:	6836      	ldr	r6, [r6, #0]
 8015c1a:	e7f7      	b.n	8015c0c <__sfp+0x14>
 8015c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015c20:	b16d      	cbz	r5, 8015c3e <__sfp+0x46>
 8015c22:	3468      	adds	r4, #104	; 0x68
 8015c24:	e7f4      	b.n	8015c10 <__sfp+0x18>
 8015c26:	2104      	movs	r1, #4
 8015c28:	4638      	mov	r0, r7
 8015c2a:	f7ff ff9f 	bl	8015b6c <__sfmoreglue>
 8015c2e:	6030      	str	r0, [r6, #0]
 8015c30:	2800      	cmp	r0, #0
 8015c32:	d1f1      	bne.n	8015c18 <__sfp+0x20>
 8015c34:	230c      	movs	r3, #12
 8015c36:	603b      	str	r3, [r7, #0]
 8015c38:	4604      	mov	r4, r0
 8015c3a:	4620      	mov	r0, r4
 8015c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c3e:	4b0b      	ldr	r3, [pc, #44]	; (8015c6c <__sfp+0x74>)
 8015c40:	6665      	str	r5, [r4, #100]	; 0x64
 8015c42:	e9c4 5500 	strd	r5, r5, [r4]
 8015c46:	60a5      	str	r5, [r4, #8]
 8015c48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015c4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015c50:	2208      	movs	r2, #8
 8015c52:	4629      	mov	r1, r5
 8015c54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015c58:	f7fe fac9 	bl	80141ee <memset>
 8015c5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015c60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015c64:	e7e9      	b.n	8015c3a <__sfp+0x42>
 8015c66:	bf00      	nop
 8015c68:	08016a78 	.word	0x08016a78
 8015c6c:	ffff0001 	.word	0xffff0001

08015c70 <_fwalk_reent>:
 8015c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c74:	4680      	mov	r8, r0
 8015c76:	4689      	mov	r9, r1
 8015c78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015c7c:	2600      	movs	r6, #0
 8015c7e:	b914      	cbnz	r4, 8015c86 <_fwalk_reent+0x16>
 8015c80:	4630      	mov	r0, r6
 8015c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015c8a:	3f01      	subs	r7, #1
 8015c8c:	d501      	bpl.n	8015c92 <_fwalk_reent+0x22>
 8015c8e:	6824      	ldr	r4, [r4, #0]
 8015c90:	e7f5      	b.n	8015c7e <_fwalk_reent+0xe>
 8015c92:	89ab      	ldrh	r3, [r5, #12]
 8015c94:	2b01      	cmp	r3, #1
 8015c96:	d907      	bls.n	8015ca8 <_fwalk_reent+0x38>
 8015c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015c9c:	3301      	adds	r3, #1
 8015c9e:	d003      	beq.n	8015ca8 <_fwalk_reent+0x38>
 8015ca0:	4629      	mov	r1, r5
 8015ca2:	4640      	mov	r0, r8
 8015ca4:	47c8      	blx	r9
 8015ca6:	4306      	orrs	r6, r0
 8015ca8:	3568      	adds	r5, #104	; 0x68
 8015caa:	e7ee      	b.n	8015c8a <_fwalk_reent+0x1a>

08015cac <_localeconv_r>:
 8015cac:	4b04      	ldr	r3, [pc, #16]	; (8015cc0 <_localeconv_r+0x14>)
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	6a18      	ldr	r0, [r3, #32]
 8015cb2:	4b04      	ldr	r3, [pc, #16]	; (8015cc4 <_localeconv_r+0x18>)
 8015cb4:	2800      	cmp	r0, #0
 8015cb6:	bf08      	it	eq
 8015cb8:	4618      	moveq	r0, r3
 8015cba:	30f0      	adds	r0, #240	; 0xf0
 8015cbc:	4770      	bx	lr
 8015cbe:	bf00      	nop
 8015cc0:	20000d0c 	.word	0x20000d0c
 8015cc4:	20000d70 	.word	0x20000d70

08015cc8 <__swhatbuf_r>:
 8015cc8:	b570      	push	{r4, r5, r6, lr}
 8015cca:	460e      	mov	r6, r1
 8015ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cd0:	2900      	cmp	r1, #0
 8015cd2:	b096      	sub	sp, #88	; 0x58
 8015cd4:	4614      	mov	r4, r2
 8015cd6:	461d      	mov	r5, r3
 8015cd8:	da07      	bge.n	8015cea <__swhatbuf_r+0x22>
 8015cda:	2300      	movs	r3, #0
 8015cdc:	602b      	str	r3, [r5, #0]
 8015cde:	89b3      	ldrh	r3, [r6, #12]
 8015ce0:	061a      	lsls	r2, r3, #24
 8015ce2:	d410      	bmi.n	8015d06 <__swhatbuf_r+0x3e>
 8015ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ce8:	e00e      	b.n	8015d08 <__swhatbuf_r+0x40>
 8015cea:	466a      	mov	r2, sp
 8015cec:	f000 fda0 	bl	8016830 <_fstat_r>
 8015cf0:	2800      	cmp	r0, #0
 8015cf2:	dbf2      	blt.n	8015cda <__swhatbuf_r+0x12>
 8015cf4:	9a01      	ldr	r2, [sp, #4]
 8015cf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015cfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015cfe:	425a      	negs	r2, r3
 8015d00:	415a      	adcs	r2, r3
 8015d02:	602a      	str	r2, [r5, #0]
 8015d04:	e7ee      	b.n	8015ce4 <__swhatbuf_r+0x1c>
 8015d06:	2340      	movs	r3, #64	; 0x40
 8015d08:	2000      	movs	r0, #0
 8015d0a:	6023      	str	r3, [r4, #0]
 8015d0c:	b016      	add	sp, #88	; 0x58
 8015d0e:	bd70      	pop	{r4, r5, r6, pc}

08015d10 <__smakebuf_r>:
 8015d10:	898b      	ldrh	r3, [r1, #12]
 8015d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015d14:	079d      	lsls	r5, r3, #30
 8015d16:	4606      	mov	r6, r0
 8015d18:	460c      	mov	r4, r1
 8015d1a:	d507      	bpl.n	8015d2c <__smakebuf_r+0x1c>
 8015d1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015d20:	6023      	str	r3, [r4, #0]
 8015d22:	6123      	str	r3, [r4, #16]
 8015d24:	2301      	movs	r3, #1
 8015d26:	6163      	str	r3, [r4, #20]
 8015d28:	b002      	add	sp, #8
 8015d2a:	bd70      	pop	{r4, r5, r6, pc}
 8015d2c:	ab01      	add	r3, sp, #4
 8015d2e:	466a      	mov	r2, sp
 8015d30:	f7ff ffca 	bl	8015cc8 <__swhatbuf_r>
 8015d34:	9900      	ldr	r1, [sp, #0]
 8015d36:	4605      	mov	r5, r0
 8015d38:	4630      	mov	r0, r6
 8015d3a:	f000 fb69 	bl	8016410 <_malloc_r>
 8015d3e:	b948      	cbnz	r0, 8015d54 <__smakebuf_r+0x44>
 8015d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d44:	059a      	lsls	r2, r3, #22
 8015d46:	d4ef      	bmi.n	8015d28 <__smakebuf_r+0x18>
 8015d48:	f023 0303 	bic.w	r3, r3, #3
 8015d4c:	f043 0302 	orr.w	r3, r3, #2
 8015d50:	81a3      	strh	r3, [r4, #12]
 8015d52:	e7e3      	b.n	8015d1c <__smakebuf_r+0xc>
 8015d54:	4b0d      	ldr	r3, [pc, #52]	; (8015d8c <__smakebuf_r+0x7c>)
 8015d56:	62b3      	str	r3, [r6, #40]	; 0x28
 8015d58:	89a3      	ldrh	r3, [r4, #12]
 8015d5a:	6020      	str	r0, [r4, #0]
 8015d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d60:	81a3      	strh	r3, [r4, #12]
 8015d62:	9b00      	ldr	r3, [sp, #0]
 8015d64:	6163      	str	r3, [r4, #20]
 8015d66:	9b01      	ldr	r3, [sp, #4]
 8015d68:	6120      	str	r0, [r4, #16]
 8015d6a:	b15b      	cbz	r3, 8015d84 <__smakebuf_r+0x74>
 8015d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d70:	4630      	mov	r0, r6
 8015d72:	f000 fd6f 	bl	8016854 <_isatty_r>
 8015d76:	b128      	cbz	r0, 8015d84 <__smakebuf_r+0x74>
 8015d78:	89a3      	ldrh	r3, [r4, #12]
 8015d7a:	f023 0303 	bic.w	r3, r3, #3
 8015d7e:	f043 0301 	orr.w	r3, r3, #1
 8015d82:	81a3      	strh	r3, [r4, #12]
 8015d84:	89a3      	ldrh	r3, [r4, #12]
 8015d86:	431d      	orrs	r5, r3
 8015d88:	81a5      	strh	r5, [r4, #12]
 8015d8a:	e7cd      	b.n	8015d28 <__smakebuf_r+0x18>
 8015d8c:	08015b61 	.word	0x08015b61

08015d90 <malloc>:
 8015d90:	4b02      	ldr	r3, [pc, #8]	; (8015d9c <malloc+0xc>)
 8015d92:	4601      	mov	r1, r0
 8015d94:	6818      	ldr	r0, [r3, #0]
 8015d96:	f000 bb3b 	b.w	8016410 <_malloc_r>
 8015d9a:	bf00      	nop
 8015d9c:	20000d0c 	.word	0x20000d0c

08015da0 <_Balloc>:
 8015da0:	b570      	push	{r4, r5, r6, lr}
 8015da2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015da4:	4604      	mov	r4, r0
 8015da6:	460e      	mov	r6, r1
 8015da8:	b93d      	cbnz	r5, 8015dba <_Balloc+0x1a>
 8015daa:	2010      	movs	r0, #16
 8015dac:	f7ff fff0 	bl	8015d90 <malloc>
 8015db0:	6260      	str	r0, [r4, #36]	; 0x24
 8015db2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015db6:	6005      	str	r5, [r0, #0]
 8015db8:	60c5      	str	r5, [r0, #12]
 8015dba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015dbc:	68eb      	ldr	r3, [r5, #12]
 8015dbe:	b183      	cbz	r3, 8015de2 <_Balloc+0x42>
 8015dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015dc2:	68db      	ldr	r3, [r3, #12]
 8015dc4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015dc8:	b9b8      	cbnz	r0, 8015dfa <_Balloc+0x5a>
 8015dca:	2101      	movs	r1, #1
 8015dcc:	fa01 f506 	lsl.w	r5, r1, r6
 8015dd0:	1d6a      	adds	r2, r5, #5
 8015dd2:	0092      	lsls	r2, r2, #2
 8015dd4:	4620      	mov	r0, r4
 8015dd6:	f000 fabf 	bl	8016358 <_calloc_r>
 8015dda:	b160      	cbz	r0, 8015df6 <_Balloc+0x56>
 8015ddc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8015de0:	e00e      	b.n	8015e00 <_Balloc+0x60>
 8015de2:	2221      	movs	r2, #33	; 0x21
 8015de4:	2104      	movs	r1, #4
 8015de6:	4620      	mov	r0, r4
 8015de8:	f000 fab6 	bl	8016358 <_calloc_r>
 8015dec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015dee:	60e8      	str	r0, [r5, #12]
 8015df0:	68db      	ldr	r3, [r3, #12]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d1e4      	bne.n	8015dc0 <_Balloc+0x20>
 8015df6:	2000      	movs	r0, #0
 8015df8:	bd70      	pop	{r4, r5, r6, pc}
 8015dfa:	6802      	ldr	r2, [r0, #0]
 8015dfc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015e00:	2300      	movs	r3, #0
 8015e02:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015e06:	e7f7      	b.n	8015df8 <_Balloc+0x58>

08015e08 <_Bfree>:
 8015e08:	b570      	push	{r4, r5, r6, lr}
 8015e0a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015e0c:	4606      	mov	r6, r0
 8015e0e:	460d      	mov	r5, r1
 8015e10:	b93c      	cbnz	r4, 8015e22 <_Bfree+0x1a>
 8015e12:	2010      	movs	r0, #16
 8015e14:	f7ff ffbc 	bl	8015d90 <malloc>
 8015e18:	6270      	str	r0, [r6, #36]	; 0x24
 8015e1a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015e1e:	6004      	str	r4, [r0, #0]
 8015e20:	60c4      	str	r4, [r0, #12]
 8015e22:	b13d      	cbz	r5, 8015e34 <_Bfree+0x2c>
 8015e24:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015e26:	686a      	ldr	r2, [r5, #4]
 8015e28:	68db      	ldr	r3, [r3, #12]
 8015e2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015e2e:	6029      	str	r1, [r5, #0]
 8015e30:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015e34:	bd70      	pop	{r4, r5, r6, pc}

08015e36 <__multadd>:
 8015e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e3a:	690d      	ldr	r5, [r1, #16]
 8015e3c:	461f      	mov	r7, r3
 8015e3e:	4606      	mov	r6, r0
 8015e40:	460c      	mov	r4, r1
 8015e42:	f101 0c14 	add.w	ip, r1, #20
 8015e46:	2300      	movs	r3, #0
 8015e48:	f8dc 0000 	ldr.w	r0, [ip]
 8015e4c:	b281      	uxth	r1, r0
 8015e4e:	fb02 7101 	mla	r1, r2, r1, r7
 8015e52:	0c0f      	lsrs	r7, r1, #16
 8015e54:	0c00      	lsrs	r0, r0, #16
 8015e56:	fb02 7000 	mla	r0, r2, r0, r7
 8015e5a:	b289      	uxth	r1, r1
 8015e5c:	3301      	adds	r3, #1
 8015e5e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015e62:	429d      	cmp	r5, r3
 8015e64:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015e68:	f84c 1b04 	str.w	r1, [ip], #4
 8015e6c:	dcec      	bgt.n	8015e48 <__multadd+0x12>
 8015e6e:	b1d7      	cbz	r7, 8015ea6 <__multadd+0x70>
 8015e70:	68a3      	ldr	r3, [r4, #8]
 8015e72:	42ab      	cmp	r3, r5
 8015e74:	dc12      	bgt.n	8015e9c <__multadd+0x66>
 8015e76:	6861      	ldr	r1, [r4, #4]
 8015e78:	4630      	mov	r0, r6
 8015e7a:	3101      	adds	r1, #1
 8015e7c:	f7ff ff90 	bl	8015da0 <_Balloc>
 8015e80:	6922      	ldr	r2, [r4, #16]
 8015e82:	3202      	adds	r2, #2
 8015e84:	f104 010c 	add.w	r1, r4, #12
 8015e88:	4680      	mov	r8, r0
 8015e8a:	0092      	lsls	r2, r2, #2
 8015e8c:	300c      	adds	r0, #12
 8015e8e:	f7fe f9a3 	bl	80141d8 <memcpy>
 8015e92:	4621      	mov	r1, r4
 8015e94:	4630      	mov	r0, r6
 8015e96:	f7ff ffb7 	bl	8015e08 <_Bfree>
 8015e9a:	4644      	mov	r4, r8
 8015e9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015ea0:	3501      	adds	r5, #1
 8015ea2:	615f      	str	r7, [r3, #20]
 8015ea4:	6125      	str	r5, [r4, #16]
 8015ea6:	4620      	mov	r0, r4
 8015ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015eac <__hi0bits>:
 8015eac:	0c02      	lsrs	r2, r0, #16
 8015eae:	0412      	lsls	r2, r2, #16
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	b9b2      	cbnz	r2, 8015ee2 <__hi0bits+0x36>
 8015eb4:	0403      	lsls	r3, r0, #16
 8015eb6:	2010      	movs	r0, #16
 8015eb8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015ebc:	bf04      	itt	eq
 8015ebe:	021b      	lsleq	r3, r3, #8
 8015ec0:	3008      	addeq	r0, #8
 8015ec2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015ec6:	bf04      	itt	eq
 8015ec8:	011b      	lsleq	r3, r3, #4
 8015eca:	3004      	addeq	r0, #4
 8015ecc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015ed0:	bf04      	itt	eq
 8015ed2:	009b      	lsleq	r3, r3, #2
 8015ed4:	3002      	addeq	r0, #2
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	db06      	blt.n	8015ee8 <__hi0bits+0x3c>
 8015eda:	005b      	lsls	r3, r3, #1
 8015edc:	d503      	bpl.n	8015ee6 <__hi0bits+0x3a>
 8015ede:	3001      	adds	r0, #1
 8015ee0:	4770      	bx	lr
 8015ee2:	2000      	movs	r0, #0
 8015ee4:	e7e8      	b.n	8015eb8 <__hi0bits+0xc>
 8015ee6:	2020      	movs	r0, #32
 8015ee8:	4770      	bx	lr

08015eea <__lo0bits>:
 8015eea:	6803      	ldr	r3, [r0, #0]
 8015eec:	f013 0207 	ands.w	r2, r3, #7
 8015ef0:	4601      	mov	r1, r0
 8015ef2:	d00b      	beq.n	8015f0c <__lo0bits+0x22>
 8015ef4:	07da      	lsls	r2, r3, #31
 8015ef6:	d423      	bmi.n	8015f40 <__lo0bits+0x56>
 8015ef8:	0798      	lsls	r0, r3, #30
 8015efa:	bf49      	itett	mi
 8015efc:	085b      	lsrmi	r3, r3, #1
 8015efe:	089b      	lsrpl	r3, r3, #2
 8015f00:	2001      	movmi	r0, #1
 8015f02:	600b      	strmi	r3, [r1, #0]
 8015f04:	bf5c      	itt	pl
 8015f06:	600b      	strpl	r3, [r1, #0]
 8015f08:	2002      	movpl	r0, #2
 8015f0a:	4770      	bx	lr
 8015f0c:	b298      	uxth	r0, r3
 8015f0e:	b9a8      	cbnz	r0, 8015f3c <__lo0bits+0x52>
 8015f10:	0c1b      	lsrs	r3, r3, #16
 8015f12:	2010      	movs	r0, #16
 8015f14:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015f18:	bf04      	itt	eq
 8015f1a:	0a1b      	lsreq	r3, r3, #8
 8015f1c:	3008      	addeq	r0, #8
 8015f1e:	071a      	lsls	r2, r3, #28
 8015f20:	bf04      	itt	eq
 8015f22:	091b      	lsreq	r3, r3, #4
 8015f24:	3004      	addeq	r0, #4
 8015f26:	079a      	lsls	r2, r3, #30
 8015f28:	bf04      	itt	eq
 8015f2a:	089b      	lsreq	r3, r3, #2
 8015f2c:	3002      	addeq	r0, #2
 8015f2e:	07da      	lsls	r2, r3, #31
 8015f30:	d402      	bmi.n	8015f38 <__lo0bits+0x4e>
 8015f32:	085b      	lsrs	r3, r3, #1
 8015f34:	d006      	beq.n	8015f44 <__lo0bits+0x5a>
 8015f36:	3001      	adds	r0, #1
 8015f38:	600b      	str	r3, [r1, #0]
 8015f3a:	4770      	bx	lr
 8015f3c:	4610      	mov	r0, r2
 8015f3e:	e7e9      	b.n	8015f14 <__lo0bits+0x2a>
 8015f40:	2000      	movs	r0, #0
 8015f42:	4770      	bx	lr
 8015f44:	2020      	movs	r0, #32
 8015f46:	4770      	bx	lr

08015f48 <__i2b>:
 8015f48:	b510      	push	{r4, lr}
 8015f4a:	460c      	mov	r4, r1
 8015f4c:	2101      	movs	r1, #1
 8015f4e:	f7ff ff27 	bl	8015da0 <_Balloc>
 8015f52:	2201      	movs	r2, #1
 8015f54:	6144      	str	r4, [r0, #20]
 8015f56:	6102      	str	r2, [r0, #16]
 8015f58:	bd10      	pop	{r4, pc}

08015f5a <__multiply>:
 8015f5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f5e:	4614      	mov	r4, r2
 8015f60:	690a      	ldr	r2, [r1, #16]
 8015f62:	6923      	ldr	r3, [r4, #16]
 8015f64:	429a      	cmp	r2, r3
 8015f66:	bfb8      	it	lt
 8015f68:	460b      	movlt	r3, r1
 8015f6a:	4688      	mov	r8, r1
 8015f6c:	bfbc      	itt	lt
 8015f6e:	46a0      	movlt	r8, r4
 8015f70:	461c      	movlt	r4, r3
 8015f72:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015f76:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015f7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015f7e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015f82:	eb07 0609 	add.w	r6, r7, r9
 8015f86:	42b3      	cmp	r3, r6
 8015f88:	bfb8      	it	lt
 8015f8a:	3101      	addlt	r1, #1
 8015f8c:	f7ff ff08 	bl	8015da0 <_Balloc>
 8015f90:	f100 0514 	add.w	r5, r0, #20
 8015f94:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015f98:	462b      	mov	r3, r5
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	4573      	cmp	r3, lr
 8015f9e:	d316      	bcc.n	8015fce <__multiply+0x74>
 8015fa0:	f104 0214 	add.w	r2, r4, #20
 8015fa4:	f108 0114 	add.w	r1, r8, #20
 8015fa8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015fac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015fb0:	9300      	str	r3, [sp, #0]
 8015fb2:	9b00      	ldr	r3, [sp, #0]
 8015fb4:	9201      	str	r2, [sp, #4]
 8015fb6:	4293      	cmp	r3, r2
 8015fb8:	d80c      	bhi.n	8015fd4 <__multiply+0x7a>
 8015fba:	2e00      	cmp	r6, #0
 8015fbc:	dd03      	ble.n	8015fc6 <__multiply+0x6c>
 8015fbe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d05d      	beq.n	8016082 <__multiply+0x128>
 8015fc6:	6106      	str	r6, [r0, #16]
 8015fc8:	b003      	add	sp, #12
 8015fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fce:	f843 2b04 	str.w	r2, [r3], #4
 8015fd2:	e7e3      	b.n	8015f9c <__multiply+0x42>
 8015fd4:	f8b2 b000 	ldrh.w	fp, [r2]
 8015fd8:	f1bb 0f00 	cmp.w	fp, #0
 8015fdc:	d023      	beq.n	8016026 <__multiply+0xcc>
 8015fde:	4689      	mov	r9, r1
 8015fe0:	46ac      	mov	ip, r5
 8015fe2:	f04f 0800 	mov.w	r8, #0
 8015fe6:	f859 4b04 	ldr.w	r4, [r9], #4
 8015fea:	f8dc a000 	ldr.w	sl, [ip]
 8015fee:	b2a3      	uxth	r3, r4
 8015ff0:	fa1f fa8a 	uxth.w	sl, sl
 8015ff4:	fb0b a303 	mla	r3, fp, r3, sl
 8015ff8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015ffc:	f8dc 4000 	ldr.w	r4, [ip]
 8016000:	4443      	add	r3, r8
 8016002:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016006:	fb0b 840a 	mla	r4, fp, sl, r8
 801600a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801600e:	46e2      	mov	sl, ip
 8016010:	b29b      	uxth	r3, r3
 8016012:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016016:	454f      	cmp	r7, r9
 8016018:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801601c:	f84a 3b04 	str.w	r3, [sl], #4
 8016020:	d82b      	bhi.n	801607a <__multiply+0x120>
 8016022:	f8cc 8004 	str.w	r8, [ip, #4]
 8016026:	9b01      	ldr	r3, [sp, #4]
 8016028:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801602c:	3204      	adds	r2, #4
 801602e:	f1ba 0f00 	cmp.w	sl, #0
 8016032:	d020      	beq.n	8016076 <__multiply+0x11c>
 8016034:	682b      	ldr	r3, [r5, #0]
 8016036:	4689      	mov	r9, r1
 8016038:	46a8      	mov	r8, r5
 801603a:	f04f 0b00 	mov.w	fp, #0
 801603e:	f8b9 c000 	ldrh.w	ip, [r9]
 8016042:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016046:	fb0a 440c 	mla	r4, sl, ip, r4
 801604a:	445c      	add	r4, fp
 801604c:	46c4      	mov	ip, r8
 801604e:	b29b      	uxth	r3, r3
 8016050:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016054:	f84c 3b04 	str.w	r3, [ip], #4
 8016058:	f859 3b04 	ldr.w	r3, [r9], #4
 801605c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016060:	0c1b      	lsrs	r3, r3, #16
 8016062:	fb0a b303 	mla	r3, sl, r3, fp
 8016066:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801606a:	454f      	cmp	r7, r9
 801606c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016070:	d805      	bhi.n	801607e <__multiply+0x124>
 8016072:	f8c8 3004 	str.w	r3, [r8, #4]
 8016076:	3504      	adds	r5, #4
 8016078:	e79b      	b.n	8015fb2 <__multiply+0x58>
 801607a:	46d4      	mov	ip, sl
 801607c:	e7b3      	b.n	8015fe6 <__multiply+0x8c>
 801607e:	46e0      	mov	r8, ip
 8016080:	e7dd      	b.n	801603e <__multiply+0xe4>
 8016082:	3e01      	subs	r6, #1
 8016084:	e799      	b.n	8015fba <__multiply+0x60>
	...

08016088 <__pow5mult>:
 8016088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801608c:	4615      	mov	r5, r2
 801608e:	f012 0203 	ands.w	r2, r2, #3
 8016092:	4606      	mov	r6, r0
 8016094:	460f      	mov	r7, r1
 8016096:	d007      	beq.n	80160a8 <__pow5mult+0x20>
 8016098:	3a01      	subs	r2, #1
 801609a:	4c21      	ldr	r4, [pc, #132]	; (8016120 <__pow5mult+0x98>)
 801609c:	2300      	movs	r3, #0
 801609e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80160a2:	f7ff fec8 	bl	8015e36 <__multadd>
 80160a6:	4607      	mov	r7, r0
 80160a8:	10ad      	asrs	r5, r5, #2
 80160aa:	d035      	beq.n	8016118 <__pow5mult+0x90>
 80160ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80160ae:	b93c      	cbnz	r4, 80160c0 <__pow5mult+0x38>
 80160b0:	2010      	movs	r0, #16
 80160b2:	f7ff fe6d 	bl	8015d90 <malloc>
 80160b6:	6270      	str	r0, [r6, #36]	; 0x24
 80160b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80160bc:	6004      	str	r4, [r0, #0]
 80160be:	60c4      	str	r4, [r0, #12]
 80160c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80160c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80160c8:	b94c      	cbnz	r4, 80160de <__pow5mult+0x56>
 80160ca:	f240 2171 	movw	r1, #625	; 0x271
 80160ce:	4630      	mov	r0, r6
 80160d0:	f7ff ff3a 	bl	8015f48 <__i2b>
 80160d4:	2300      	movs	r3, #0
 80160d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80160da:	4604      	mov	r4, r0
 80160dc:	6003      	str	r3, [r0, #0]
 80160de:	f04f 0800 	mov.w	r8, #0
 80160e2:	07eb      	lsls	r3, r5, #31
 80160e4:	d50a      	bpl.n	80160fc <__pow5mult+0x74>
 80160e6:	4639      	mov	r1, r7
 80160e8:	4622      	mov	r2, r4
 80160ea:	4630      	mov	r0, r6
 80160ec:	f7ff ff35 	bl	8015f5a <__multiply>
 80160f0:	4639      	mov	r1, r7
 80160f2:	4681      	mov	r9, r0
 80160f4:	4630      	mov	r0, r6
 80160f6:	f7ff fe87 	bl	8015e08 <_Bfree>
 80160fa:	464f      	mov	r7, r9
 80160fc:	106d      	asrs	r5, r5, #1
 80160fe:	d00b      	beq.n	8016118 <__pow5mult+0x90>
 8016100:	6820      	ldr	r0, [r4, #0]
 8016102:	b938      	cbnz	r0, 8016114 <__pow5mult+0x8c>
 8016104:	4622      	mov	r2, r4
 8016106:	4621      	mov	r1, r4
 8016108:	4630      	mov	r0, r6
 801610a:	f7ff ff26 	bl	8015f5a <__multiply>
 801610e:	6020      	str	r0, [r4, #0]
 8016110:	f8c0 8000 	str.w	r8, [r0]
 8016114:	4604      	mov	r4, r0
 8016116:	e7e4      	b.n	80160e2 <__pow5mult+0x5a>
 8016118:	4638      	mov	r0, r7
 801611a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801611e:	bf00      	nop
 8016120:	08016c10 	.word	0x08016c10

08016124 <__lshift>:
 8016124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016128:	460c      	mov	r4, r1
 801612a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801612e:	6923      	ldr	r3, [r4, #16]
 8016130:	6849      	ldr	r1, [r1, #4]
 8016132:	eb0a 0903 	add.w	r9, sl, r3
 8016136:	68a3      	ldr	r3, [r4, #8]
 8016138:	4607      	mov	r7, r0
 801613a:	4616      	mov	r6, r2
 801613c:	f109 0501 	add.w	r5, r9, #1
 8016140:	42ab      	cmp	r3, r5
 8016142:	db32      	blt.n	80161aa <__lshift+0x86>
 8016144:	4638      	mov	r0, r7
 8016146:	f7ff fe2b 	bl	8015da0 <_Balloc>
 801614a:	2300      	movs	r3, #0
 801614c:	4680      	mov	r8, r0
 801614e:	f100 0114 	add.w	r1, r0, #20
 8016152:	461a      	mov	r2, r3
 8016154:	4553      	cmp	r3, sl
 8016156:	db2b      	blt.n	80161b0 <__lshift+0x8c>
 8016158:	6920      	ldr	r0, [r4, #16]
 801615a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801615e:	f104 0314 	add.w	r3, r4, #20
 8016162:	f016 021f 	ands.w	r2, r6, #31
 8016166:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801616a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801616e:	d025      	beq.n	80161bc <__lshift+0x98>
 8016170:	f1c2 0e20 	rsb	lr, r2, #32
 8016174:	2000      	movs	r0, #0
 8016176:	681e      	ldr	r6, [r3, #0]
 8016178:	468a      	mov	sl, r1
 801617a:	4096      	lsls	r6, r2
 801617c:	4330      	orrs	r0, r6
 801617e:	f84a 0b04 	str.w	r0, [sl], #4
 8016182:	f853 0b04 	ldr.w	r0, [r3], #4
 8016186:	459c      	cmp	ip, r3
 8016188:	fa20 f00e 	lsr.w	r0, r0, lr
 801618c:	d814      	bhi.n	80161b8 <__lshift+0x94>
 801618e:	6048      	str	r0, [r1, #4]
 8016190:	b108      	cbz	r0, 8016196 <__lshift+0x72>
 8016192:	f109 0502 	add.w	r5, r9, #2
 8016196:	3d01      	subs	r5, #1
 8016198:	4638      	mov	r0, r7
 801619a:	f8c8 5010 	str.w	r5, [r8, #16]
 801619e:	4621      	mov	r1, r4
 80161a0:	f7ff fe32 	bl	8015e08 <_Bfree>
 80161a4:	4640      	mov	r0, r8
 80161a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161aa:	3101      	adds	r1, #1
 80161ac:	005b      	lsls	r3, r3, #1
 80161ae:	e7c7      	b.n	8016140 <__lshift+0x1c>
 80161b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80161b4:	3301      	adds	r3, #1
 80161b6:	e7cd      	b.n	8016154 <__lshift+0x30>
 80161b8:	4651      	mov	r1, sl
 80161ba:	e7dc      	b.n	8016176 <__lshift+0x52>
 80161bc:	3904      	subs	r1, #4
 80161be:	f853 2b04 	ldr.w	r2, [r3], #4
 80161c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80161c6:	459c      	cmp	ip, r3
 80161c8:	d8f9      	bhi.n	80161be <__lshift+0x9a>
 80161ca:	e7e4      	b.n	8016196 <__lshift+0x72>

080161cc <__mcmp>:
 80161cc:	6903      	ldr	r3, [r0, #16]
 80161ce:	690a      	ldr	r2, [r1, #16]
 80161d0:	1a9b      	subs	r3, r3, r2
 80161d2:	b530      	push	{r4, r5, lr}
 80161d4:	d10c      	bne.n	80161f0 <__mcmp+0x24>
 80161d6:	0092      	lsls	r2, r2, #2
 80161d8:	3014      	adds	r0, #20
 80161da:	3114      	adds	r1, #20
 80161dc:	1884      	adds	r4, r0, r2
 80161de:	4411      	add	r1, r2
 80161e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80161e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80161e8:	4295      	cmp	r5, r2
 80161ea:	d003      	beq.n	80161f4 <__mcmp+0x28>
 80161ec:	d305      	bcc.n	80161fa <__mcmp+0x2e>
 80161ee:	2301      	movs	r3, #1
 80161f0:	4618      	mov	r0, r3
 80161f2:	bd30      	pop	{r4, r5, pc}
 80161f4:	42a0      	cmp	r0, r4
 80161f6:	d3f3      	bcc.n	80161e0 <__mcmp+0x14>
 80161f8:	e7fa      	b.n	80161f0 <__mcmp+0x24>
 80161fa:	f04f 33ff 	mov.w	r3, #4294967295
 80161fe:	e7f7      	b.n	80161f0 <__mcmp+0x24>

08016200 <__mdiff>:
 8016200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016204:	460d      	mov	r5, r1
 8016206:	4607      	mov	r7, r0
 8016208:	4611      	mov	r1, r2
 801620a:	4628      	mov	r0, r5
 801620c:	4614      	mov	r4, r2
 801620e:	f7ff ffdd 	bl	80161cc <__mcmp>
 8016212:	1e06      	subs	r6, r0, #0
 8016214:	d108      	bne.n	8016228 <__mdiff+0x28>
 8016216:	4631      	mov	r1, r6
 8016218:	4638      	mov	r0, r7
 801621a:	f7ff fdc1 	bl	8015da0 <_Balloc>
 801621e:	2301      	movs	r3, #1
 8016220:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016228:	bfa4      	itt	ge
 801622a:	4623      	movge	r3, r4
 801622c:	462c      	movge	r4, r5
 801622e:	4638      	mov	r0, r7
 8016230:	6861      	ldr	r1, [r4, #4]
 8016232:	bfa6      	itte	ge
 8016234:	461d      	movge	r5, r3
 8016236:	2600      	movge	r6, #0
 8016238:	2601      	movlt	r6, #1
 801623a:	f7ff fdb1 	bl	8015da0 <_Balloc>
 801623e:	692b      	ldr	r3, [r5, #16]
 8016240:	60c6      	str	r6, [r0, #12]
 8016242:	6926      	ldr	r6, [r4, #16]
 8016244:	f105 0914 	add.w	r9, r5, #20
 8016248:	f104 0214 	add.w	r2, r4, #20
 801624c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016250:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016254:	f100 0514 	add.w	r5, r0, #20
 8016258:	f04f 0e00 	mov.w	lr, #0
 801625c:	f852 ab04 	ldr.w	sl, [r2], #4
 8016260:	f859 4b04 	ldr.w	r4, [r9], #4
 8016264:	fa1e f18a 	uxtah	r1, lr, sl
 8016268:	b2a3      	uxth	r3, r4
 801626a:	1ac9      	subs	r1, r1, r3
 801626c:	0c23      	lsrs	r3, r4, #16
 801626e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016272:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016276:	b289      	uxth	r1, r1
 8016278:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801627c:	45c8      	cmp	r8, r9
 801627e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016282:	4694      	mov	ip, r2
 8016284:	f845 3b04 	str.w	r3, [r5], #4
 8016288:	d8e8      	bhi.n	801625c <__mdiff+0x5c>
 801628a:	45bc      	cmp	ip, r7
 801628c:	d304      	bcc.n	8016298 <__mdiff+0x98>
 801628e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016292:	b183      	cbz	r3, 80162b6 <__mdiff+0xb6>
 8016294:	6106      	str	r6, [r0, #16]
 8016296:	e7c5      	b.n	8016224 <__mdiff+0x24>
 8016298:	f85c 1b04 	ldr.w	r1, [ip], #4
 801629c:	fa1e f381 	uxtah	r3, lr, r1
 80162a0:	141a      	asrs	r2, r3, #16
 80162a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80162a6:	b29b      	uxth	r3, r3
 80162a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80162ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80162b0:	f845 3b04 	str.w	r3, [r5], #4
 80162b4:	e7e9      	b.n	801628a <__mdiff+0x8a>
 80162b6:	3e01      	subs	r6, #1
 80162b8:	e7e9      	b.n	801628e <__mdiff+0x8e>

080162ba <__d2b>:
 80162ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80162be:	460e      	mov	r6, r1
 80162c0:	2101      	movs	r1, #1
 80162c2:	ec59 8b10 	vmov	r8, r9, d0
 80162c6:	4615      	mov	r5, r2
 80162c8:	f7ff fd6a 	bl	8015da0 <_Balloc>
 80162cc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80162d0:	4607      	mov	r7, r0
 80162d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80162d6:	bb34      	cbnz	r4, 8016326 <__d2b+0x6c>
 80162d8:	9301      	str	r3, [sp, #4]
 80162da:	f1b8 0300 	subs.w	r3, r8, #0
 80162de:	d027      	beq.n	8016330 <__d2b+0x76>
 80162e0:	a802      	add	r0, sp, #8
 80162e2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80162e6:	f7ff fe00 	bl	8015eea <__lo0bits>
 80162ea:	9900      	ldr	r1, [sp, #0]
 80162ec:	b1f0      	cbz	r0, 801632c <__d2b+0x72>
 80162ee:	9a01      	ldr	r2, [sp, #4]
 80162f0:	f1c0 0320 	rsb	r3, r0, #32
 80162f4:	fa02 f303 	lsl.w	r3, r2, r3
 80162f8:	430b      	orrs	r3, r1
 80162fa:	40c2      	lsrs	r2, r0
 80162fc:	617b      	str	r3, [r7, #20]
 80162fe:	9201      	str	r2, [sp, #4]
 8016300:	9b01      	ldr	r3, [sp, #4]
 8016302:	61bb      	str	r3, [r7, #24]
 8016304:	2b00      	cmp	r3, #0
 8016306:	bf14      	ite	ne
 8016308:	2102      	movne	r1, #2
 801630a:	2101      	moveq	r1, #1
 801630c:	6139      	str	r1, [r7, #16]
 801630e:	b1c4      	cbz	r4, 8016342 <__d2b+0x88>
 8016310:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016314:	4404      	add	r4, r0
 8016316:	6034      	str	r4, [r6, #0]
 8016318:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801631c:	6028      	str	r0, [r5, #0]
 801631e:	4638      	mov	r0, r7
 8016320:	b003      	add	sp, #12
 8016322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801632a:	e7d5      	b.n	80162d8 <__d2b+0x1e>
 801632c:	6179      	str	r1, [r7, #20]
 801632e:	e7e7      	b.n	8016300 <__d2b+0x46>
 8016330:	a801      	add	r0, sp, #4
 8016332:	f7ff fdda 	bl	8015eea <__lo0bits>
 8016336:	9b01      	ldr	r3, [sp, #4]
 8016338:	617b      	str	r3, [r7, #20]
 801633a:	2101      	movs	r1, #1
 801633c:	6139      	str	r1, [r7, #16]
 801633e:	3020      	adds	r0, #32
 8016340:	e7e5      	b.n	801630e <__d2b+0x54>
 8016342:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016346:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801634a:	6030      	str	r0, [r6, #0]
 801634c:	6918      	ldr	r0, [r3, #16]
 801634e:	f7ff fdad 	bl	8015eac <__hi0bits>
 8016352:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016356:	e7e1      	b.n	801631c <__d2b+0x62>

08016358 <_calloc_r>:
 8016358:	b538      	push	{r3, r4, r5, lr}
 801635a:	fb02 f401 	mul.w	r4, r2, r1
 801635e:	4621      	mov	r1, r4
 8016360:	f000 f856 	bl	8016410 <_malloc_r>
 8016364:	4605      	mov	r5, r0
 8016366:	b118      	cbz	r0, 8016370 <_calloc_r+0x18>
 8016368:	4622      	mov	r2, r4
 801636a:	2100      	movs	r1, #0
 801636c:	f7fd ff3f 	bl	80141ee <memset>
 8016370:	4628      	mov	r0, r5
 8016372:	bd38      	pop	{r3, r4, r5, pc}

08016374 <_free_r>:
 8016374:	b538      	push	{r3, r4, r5, lr}
 8016376:	4605      	mov	r5, r0
 8016378:	2900      	cmp	r1, #0
 801637a:	d045      	beq.n	8016408 <_free_r+0x94>
 801637c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016380:	1f0c      	subs	r4, r1, #4
 8016382:	2b00      	cmp	r3, #0
 8016384:	bfb8      	it	lt
 8016386:	18e4      	addlt	r4, r4, r3
 8016388:	f000 fa98 	bl	80168bc <__malloc_lock>
 801638c:	4a1f      	ldr	r2, [pc, #124]	; (801640c <_free_r+0x98>)
 801638e:	6813      	ldr	r3, [r2, #0]
 8016390:	4610      	mov	r0, r2
 8016392:	b933      	cbnz	r3, 80163a2 <_free_r+0x2e>
 8016394:	6063      	str	r3, [r4, #4]
 8016396:	6014      	str	r4, [r2, #0]
 8016398:	4628      	mov	r0, r5
 801639a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801639e:	f000 ba8e 	b.w	80168be <__malloc_unlock>
 80163a2:	42a3      	cmp	r3, r4
 80163a4:	d90c      	bls.n	80163c0 <_free_r+0x4c>
 80163a6:	6821      	ldr	r1, [r4, #0]
 80163a8:	1862      	adds	r2, r4, r1
 80163aa:	4293      	cmp	r3, r2
 80163ac:	bf04      	itt	eq
 80163ae:	681a      	ldreq	r2, [r3, #0]
 80163b0:	685b      	ldreq	r3, [r3, #4]
 80163b2:	6063      	str	r3, [r4, #4]
 80163b4:	bf04      	itt	eq
 80163b6:	1852      	addeq	r2, r2, r1
 80163b8:	6022      	streq	r2, [r4, #0]
 80163ba:	6004      	str	r4, [r0, #0]
 80163bc:	e7ec      	b.n	8016398 <_free_r+0x24>
 80163be:	4613      	mov	r3, r2
 80163c0:	685a      	ldr	r2, [r3, #4]
 80163c2:	b10a      	cbz	r2, 80163c8 <_free_r+0x54>
 80163c4:	42a2      	cmp	r2, r4
 80163c6:	d9fa      	bls.n	80163be <_free_r+0x4a>
 80163c8:	6819      	ldr	r1, [r3, #0]
 80163ca:	1858      	adds	r0, r3, r1
 80163cc:	42a0      	cmp	r0, r4
 80163ce:	d10b      	bne.n	80163e8 <_free_r+0x74>
 80163d0:	6820      	ldr	r0, [r4, #0]
 80163d2:	4401      	add	r1, r0
 80163d4:	1858      	adds	r0, r3, r1
 80163d6:	4282      	cmp	r2, r0
 80163d8:	6019      	str	r1, [r3, #0]
 80163da:	d1dd      	bne.n	8016398 <_free_r+0x24>
 80163dc:	6810      	ldr	r0, [r2, #0]
 80163de:	6852      	ldr	r2, [r2, #4]
 80163e0:	605a      	str	r2, [r3, #4]
 80163e2:	4401      	add	r1, r0
 80163e4:	6019      	str	r1, [r3, #0]
 80163e6:	e7d7      	b.n	8016398 <_free_r+0x24>
 80163e8:	d902      	bls.n	80163f0 <_free_r+0x7c>
 80163ea:	230c      	movs	r3, #12
 80163ec:	602b      	str	r3, [r5, #0]
 80163ee:	e7d3      	b.n	8016398 <_free_r+0x24>
 80163f0:	6820      	ldr	r0, [r4, #0]
 80163f2:	1821      	adds	r1, r4, r0
 80163f4:	428a      	cmp	r2, r1
 80163f6:	bf04      	itt	eq
 80163f8:	6811      	ldreq	r1, [r2, #0]
 80163fa:	6852      	ldreq	r2, [r2, #4]
 80163fc:	6062      	str	r2, [r4, #4]
 80163fe:	bf04      	itt	eq
 8016400:	1809      	addeq	r1, r1, r0
 8016402:	6021      	streq	r1, [r4, #0]
 8016404:	605c      	str	r4, [r3, #4]
 8016406:	e7c7      	b.n	8016398 <_free_r+0x24>
 8016408:	bd38      	pop	{r3, r4, r5, pc}
 801640a:	bf00      	nop
 801640c:	2000503c 	.word	0x2000503c

08016410 <_malloc_r>:
 8016410:	b570      	push	{r4, r5, r6, lr}
 8016412:	1ccd      	adds	r5, r1, #3
 8016414:	f025 0503 	bic.w	r5, r5, #3
 8016418:	3508      	adds	r5, #8
 801641a:	2d0c      	cmp	r5, #12
 801641c:	bf38      	it	cc
 801641e:	250c      	movcc	r5, #12
 8016420:	2d00      	cmp	r5, #0
 8016422:	4606      	mov	r6, r0
 8016424:	db01      	blt.n	801642a <_malloc_r+0x1a>
 8016426:	42a9      	cmp	r1, r5
 8016428:	d903      	bls.n	8016432 <_malloc_r+0x22>
 801642a:	230c      	movs	r3, #12
 801642c:	6033      	str	r3, [r6, #0]
 801642e:	2000      	movs	r0, #0
 8016430:	bd70      	pop	{r4, r5, r6, pc}
 8016432:	f000 fa43 	bl	80168bc <__malloc_lock>
 8016436:	4a21      	ldr	r2, [pc, #132]	; (80164bc <_malloc_r+0xac>)
 8016438:	6814      	ldr	r4, [r2, #0]
 801643a:	4621      	mov	r1, r4
 801643c:	b991      	cbnz	r1, 8016464 <_malloc_r+0x54>
 801643e:	4c20      	ldr	r4, [pc, #128]	; (80164c0 <_malloc_r+0xb0>)
 8016440:	6823      	ldr	r3, [r4, #0]
 8016442:	b91b      	cbnz	r3, 801644c <_malloc_r+0x3c>
 8016444:	4630      	mov	r0, r6
 8016446:	f000 f97d 	bl	8016744 <_sbrk_r>
 801644a:	6020      	str	r0, [r4, #0]
 801644c:	4629      	mov	r1, r5
 801644e:	4630      	mov	r0, r6
 8016450:	f000 f978 	bl	8016744 <_sbrk_r>
 8016454:	1c43      	adds	r3, r0, #1
 8016456:	d124      	bne.n	80164a2 <_malloc_r+0x92>
 8016458:	230c      	movs	r3, #12
 801645a:	6033      	str	r3, [r6, #0]
 801645c:	4630      	mov	r0, r6
 801645e:	f000 fa2e 	bl	80168be <__malloc_unlock>
 8016462:	e7e4      	b.n	801642e <_malloc_r+0x1e>
 8016464:	680b      	ldr	r3, [r1, #0]
 8016466:	1b5b      	subs	r3, r3, r5
 8016468:	d418      	bmi.n	801649c <_malloc_r+0x8c>
 801646a:	2b0b      	cmp	r3, #11
 801646c:	d90f      	bls.n	801648e <_malloc_r+0x7e>
 801646e:	600b      	str	r3, [r1, #0]
 8016470:	50cd      	str	r5, [r1, r3]
 8016472:	18cc      	adds	r4, r1, r3
 8016474:	4630      	mov	r0, r6
 8016476:	f000 fa22 	bl	80168be <__malloc_unlock>
 801647a:	f104 000b 	add.w	r0, r4, #11
 801647e:	1d23      	adds	r3, r4, #4
 8016480:	f020 0007 	bic.w	r0, r0, #7
 8016484:	1ac3      	subs	r3, r0, r3
 8016486:	d0d3      	beq.n	8016430 <_malloc_r+0x20>
 8016488:	425a      	negs	r2, r3
 801648a:	50e2      	str	r2, [r4, r3]
 801648c:	e7d0      	b.n	8016430 <_malloc_r+0x20>
 801648e:	428c      	cmp	r4, r1
 8016490:	684b      	ldr	r3, [r1, #4]
 8016492:	bf16      	itet	ne
 8016494:	6063      	strne	r3, [r4, #4]
 8016496:	6013      	streq	r3, [r2, #0]
 8016498:	460c      	movne	r4, r1
 801649a:	e7eb      	b.n	8016474 <_malloc_r+0x64>
 801649c:	460c      	mov	r4, r1
 801649e:	6849      	ldr	r1, [r1, #4]
 80164a0:	e7cc      	b.n	801643c <_malloc_r+0x2c>
 80164a2:	1cc4      	adds	r4, r0, #3
 80164a4:	f024 0403 	bic.w	r4, r4, #3
 80164a8:	42a0      	cmp	r0, r4
 80164aa:	d005      	beq.n	80164b8 <_malloc_r+0xa8>
 80164ac:	1a21      	subs	r1, r4, r0
 80164ae:	4630      	mov	r0, r6
 80164b0:	f000 f948 	bl	8016744 <_sbrk_r>
 80164b4:	3001      	adds	r0, #1
 80164b6:	d0cf      	beq.n	8016458 <_malloc_r+0x48>
 80164b8:	6025      	str	r5, [r4, #0]
 80164ba:	e7db      	b.n	8016474 <_malloc_r+0x64>
 80164bc:	2000503c 	.word	0x2000503c
 80164c0:	20005040 	.word	0x20005040

080164c4 <__sfputc_r>:
 80164c4:	6893      	ldr	r3, [r2, #8]
 80164c6:	3b01      	subs	r3, #1
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	b410      	push	{r4}
 80164cc:	6093      	str	r3, [r2, #8]
 80164ce:	da08      	bge.n	80164e2 <__sfputc_r+0x1e>
 80164d0:	6994      	ldr	r4, [r2, #24]
 80164d2:	42a3      	cmp	r3, r4
 80164d4:	db01      	blt.n	80164da <__sfputc_r+0x16>
 80164d6:	290a      	cmp	r1, #10
 80164d8:	d103      	bne.n	80164e2 <__sfputc_r+0x1e>
 80164da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80164de:	f7fe bb67 	b.w	8014bb0 <__swbuf_r>
 80164e2:	6813      	ldr	r3, [r2, #0]
 80164e4:	1c58      	adds	r0, r3, #1
 80164e6:	6010      	str	r0, [r2, #0]
 80164e8:	7019      	strb	r1, [r3, #0]
 80164ea:	4608      	mov	r0, r1
 80164ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80164f0:	4770      	bx	lr

080164f2 <__sfputs_r>:
 80164f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164f4:	4606      	mov	r6, r0
 80164f6:	460f      	mov	r7, r1
 80164f8:	4614      	mov	r4, r2
 80164fa:	18d5      	adds	r5, r2, r3
 80164fc:	42ac      	cmp	r4, r5
 80164fe:	d101      	bne.n	8016504 <__sfputs_r+0x12>
 8016500:	2000      	movs	r0, #0
 8016502:	e007      	b.n	8016514 <__sfputs_r+0x22>
 8016504:	463a      	mov	r2, r7
 8016506:	f814 1b01 	ldrb.w	r1, [r4], #1
 801650a:	4630      	mov	r0, r6
 801650c:	f7ff ffda 	bl	80164c4 <__sfputc_r>
 8016510:	1c43      	adds	r3, r0, #1
 8016512:	d1f3      	bne.n	80164fc <__sfputs_r+0xa>
 8016514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016518 <_vfiprintf_r>:
 8016518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801651c:	460c      	mov	r4, r1
 801651e:	b09d      	sub	sp, #116	; 0x74
 8016520:	4617      	mov	r7, r2
 8016522:	461d      	mov	r5, r3
 8016524:	4606      	mov	r6, r0
 8016526:	b118      	cbz	r0, 8016530 <_vfiprintf_r+0x18>
 8016528:	6983      	ldr	r3, [r0, #24]
 801652a:	b90b      	cbnz	r3, 8016530 <_vfiprintf_r+0x18>
 801652c:	f7ff fb34 	bl	8015b98 <__sinit>
 8016530:	4b7c      	ldr	r3, [pc, #496]	; (8016724 <_vfiprintf_r+0x20c>)
 8016532:	429c      	cmp	r4, r3
 8016534:	d158      	bne.n	80165e8 <_vfiprintf_r+0xd0>
 8016536:	6874      	ldr	r4, [r6, #4]
 8016538:	89a3      	ldrh	r3, [r4, #12]
 801653a:	0718      	lsls	r0, r3, #28
 801653c:	d55e      	bpl.n	80165fc <_vfiprintf_r+0xe4>
 801653e:	6923      	ldr	r3, [r4, #16]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d05b      	beq.n	80165fc <_vfiprintf_r+0xe4>
 8016544:	2300      	movs	r3, #0
 8016546:	9309      	str	r3, [sp, #36]	; 0x24
 8016548:	2320      	movs	r3, #32
 801654a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801654e:	2330      	movs	r3, #48	; 0x30
 8016550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016554:	9503      	str	r5, [sp, #12]
 8016556:	f04f 0b01 	mov.w	fp, #1
 801655a:	46b8      	mov	r8, r7
 801655c:	4645      	mov	r5, r8
 801655e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016562:	b10b      	cbz	r3, 8016568 <_vfiprintf_r+0x50>
 8016564:	2b25      	cmp	r3, #37	; 0x25
 8016566:	d154      	bne.n	8016612 <_vfiprintf_r+0xfa>
 8016568:	ebb8 0a07 	subs.w	sl, r8, r7
 801656c:	d00b      	beq.n	8016586 <_vfiprintf_r+0x6e>
 801656e:	4653      	mov	r3, sl
 8016570:	463a      	mov	r2, r7
 8016572:	4621      	mov	r1, r4
 8016574:	4630      	mov	r0, r6
 8016576:	f7ff ffbc 	bl	80164f2 <__sfputs_r>
 801657a:	3001      	adds	r0, #1
 801657c:	f000 80c2 	beq.w	8016704 <_vfiprintf_r+0x1ec>
 8016580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016582:	4453      	add	r3, sl
 8016584:	9309      	str	r3, [sp, #36]	; 0x24
 8016586:	f898 3000 	ldrb.w	r3, [r8]
 801658a:	2b00      	cmp	r3, #0
 801658c:	f000 80ba 	beq.w	8016704 <_vfiprintf_r+0x1ec>
 8016590:	2300      	movs	r3, #0
 8016592:	f04f 32ff 	mov.w	r2, #4294967295
 8016596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801659a:	9304      	str	r3, [sp, #16]
 801659c:	9307      	str	r3, [sp, #28]
 801659e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80165a2:	931a      	str	r3, [sp, #104]	; 0x68
 80165a4:	46a8      	mov	r8, r5
 80165a6:	2205      	movs	r2, #5
 80165a8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80165ac:	485e      	ldr	r0, [pc, #376]	; (8016728 <_vfiprintf_r+0x210>)
 80165ae:	f7f1 fd4f 	bl	8008050 <memchr>
 80165b2:	9b04      	ldr	r3, [sp, #16]
 80165b4:	bb78      	cbnz	r0, 8016616 <_vfiprintf_r+0xfe>
 80165b6:	06d9      	lsls	r1, r3, #27
 80165b8:	bf44      	itt	mi
 80165ba:	2220      	movmi	r2, #32
 80165bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80165c0:	071a      	lsls	r2, r3, #28
 80165c2:	bf44      	itt	mi
 80165c4:	222b      	movmi	r2, #43	; 0x2b
 80165c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80165ca:	782a      	ldrb	r2, [r5, #0]
 80165cc:	2a2a      	cmp	r2, #42	; 0x2a
 80165ce:	d02a      	beq.n	8016626 <_vfiprintf_r+0x10e>
 80165d0:	9a07      	ldr	r2, [sp, #28]
 80165d2:	46a8      	mov	r8, r5
 80165d4:	2000      	movs	r0, #0
 80165d6:	250a      	movs	r5, #10
 80165d8:	4641      	mov	r1, r8
 80165da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80165de:	3b30      	subs	r3, #48	; 0x30
 80165e0:	2b09      	cmp	r3, #9
 80165e2:	d969      	bls.n	80166b8 <_vfiprintf_r+0x1a0>
 80165e4:	b360      	cbz	r0, 8016640 <_vfiprintf_r+0x128>
 80165e6:	e024      	b.n	8016632 <_vfiprintf_r+0x11a>
 80165e8:	4b50      	ldr	r3, [pc, #320]	; (801672c <_vfiprintf_r+0x214>)
 80165ea:	429c      	cmp	r4, r3
 80165ec:	d101      	bne.n	80165f2 <_vfiprintf_r+0xda>
 80165ee:	68b4      	ldr	r4, [r6, #8]
 80165f0:	e7a2      	b.n	8016538 <_vfiprintf_r+0x20>
 80165f2:	4b4f      	ldr	r3, [pc, #316]	; (8016730 <_vfiprintf_r+0x218>)
 80165f4:	429c      	cmp	r4, r3
 80165f6:	bf08      	it	eq
 80165f8:	68f4      	ldreq	r4, [r6, #12]
 80165fa:	e79d      	b.n	8016538 <_vfiprintf_r+0x20>
 80165fc:	4621      	mov	r1, r4
 80165fe:	4630      	mov	r0, r6
 8016600:	f7fe fb28 	bl	8014c54 <__swsetup_r>
 8016604:	2800      	cmp	r0, #0
 8016606:	d09d      	beq.n	8016544 <_vfiprintf_r+0x2c>
 8016608:	f04f 30ff 	mov.w	r0, #4294967295
 801660c:	b01d      	add	sp, #116	; 0x74
 801660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016612:	46a8      	mov	r8, r5
 8016614:	e7a2      	b.n	801655c <_vfiprintf_r+0x44>
 8016616:	4a44      	ldr	r2, [pc, #272]	; (8016728 <_vfiprintf_r+0x210>)
 8016618:	1a80      	subs	r0, r0, r2
 801661a:	fa0b f000 	lsl.w	r0, fp, r0
 801661e:	4318      	orrs	r0, r3
 8016620:	9004      	str	r0, [sp, #16]
 8016622:	4645      	mov	r5, r8
 8016624:	e7be      	b.n	80165a4 <_vfiprintf_r+0x8c>
 8016626:	9a03      	ldr	r2, [sp, #12]
 8016628:	1d11      	adds	r1, r2, #4
 801662a:	6812      	ldr	r2, [r2, #0]
 801662c:	9103      	str	r1, [sp, #12]
 801662e:	2a00      	cmp	r2, #0
 8016630:	db01      	blt.n	8016636 <_vfiprintf_r+0x11e>
 8016632:	9207      	str	r2, [sp, #28]
 8016634:	e004      	b.n	8016640 <_vfiprintf_r+0x128>
 8016636:	4252      	negs	r2, r2
 8016638:	f043 0302 	orr.w	r3, r3, #2
 801663c:	9207      	str	r2, [sp, #28]
 801663e:	9304      	str	r3, [sp, #16]
 8016640:	f898 3000 	ldrb.w	r3, [r8]
 8016644:	2b2e      	cmp	r3, #46	; 0x2e
 8016646:	d10e      	bne.n	8016666 <_vfiprintf_r+0x14e>
 8016648:	f898 3001 	ldrb.w	r3, [r8, #1]
 801664c:	2b2a      	cmp	r3, #42	; 0x2a
 801664e:	d138      	bne.n	80166c2 <_vfiprintf_r+0x1aa>
 8016650:	9b03      	ldr	r3, [sp, #12]
 8016652:	1d1a      	adds	r2, r3, #4
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	9203      	str	r2, [sp, #12]
 8016658:	2b00      	cmp	r3, #0
 801665a:	bfb8      	it	lt
 801665c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016660:	f108 0802 	add.w	r8, r8, #2
 8016664:	9305      	str	r3, [sp, #20]
 8016666:	4d33      	ldr	r5, [pc, #204]	; (8016734 <_vfiprintf_r+0x21c>)
 8016668:	f898 1000 	ldrb.w	r1, [r8]
 801666c:	2203      	movs	r2, #3
 801666e:	4628      	mov	r0, r5
 8016670:	f7f1 fcee 	bl	8008050 <memchr>
 8016674:	b140      	cbz	r0, 8016688 <_vfiprintf_r+0x170>
 8016676:	2340      	movs	r3, #64	; 0x40
 8016678:	1b40      	subs	r0, r0, r5
 801667a:	fa03 f000 	lsl.w	r0, r3, r0
 801667e:	9b04      	ldr	r3, [sp, #16]
 8016680:	4303      	orrs	r3, r0
 8016682:	f108 0801 	add.w	r8, r8, #1
 8016686:	9304      	str	r3, [sp, #16]
 8016688:	f898 1000 	ldrb.w	r1, [r8]
 801668c:	482a      	ldr	r0, [pc, #168]	; (8016738 <_vfiprintf_r+0x220>)
 801668e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016692:	2206      	movs	r2, #6
 8016694:	f108 0701 	add.w	r7, r8, #1
 8016698:	f7f1 fcda 	bl	8008050 <memchr>
 801669c:	2800      	cmp	r0, #0
 801669e:	d037      	beq.n	8016710 <_vfiprintf_r+0x1f8>
 80166a0:	4b26      	ldr	r3, [pc, #152]	; (801673c <_vfiprintf_r+0x224>)
 80166a2:	bb1b      	cbnz	r3, 80166ec <_vfiprintf_r+0x1d4>
 80166a4:	9b03      	ldr	r3, [sp, #12]
 80166a6:	3307      	adds	r3, #7
 80166a8:	f023 0307 	bic.w	r3, r3, #7
 80166ac:	3308      	adds	r3, #8
 80166ae:	9303      	str	r3, [sp, #12]
 80166b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166b2:	444b      	add	r3, r9
 80166b4:	9309      	str	r3, [sp, #36]	; 0x24
 80166b6:	e750      	b.n	801655a <_vfiprintf_r+0x42>
 80166b8:	fb05 3202 	mla	r2, r5, r2, r3
 80166bc:	2001      	movs	r0, #1
 80166be:	4688      	mov	r8, r1
 80166c0:	e78a      	b.n	80165d8 <_vfiprintf_r+0xc0>
 80166c2:	2300      	movs	r3, #0
 80166c4:	f108 0801 	add.w	r8, r8, #1
 80166c8:	9305      	str	r3, [sp, #20]
 80166ca:	4619      	mov	r1, r3
 80166cc:	250a      	movs	r5, #10
 80166ce:	4640      	mov	r0, r8
 80166d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80166d4:	3a30      	subs	r2, #48	; 0x30
 80166d6:	2a09      	cmp	r2, #9
 80166d8:	d903      	bls.n	80166e2 <_vfiprintf_r+0x1ca>
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d0c3      	beq.n	8016666 <_vfiprintf_r+0x14e>
 80166de:	9105      	str	r1, [sp, #20]
 80166e0:	e7c1      	b.n	8016666 <_vfiprintf_r+0x14e>
 80166e2:	fb05 2101 	mla	r1, r5, r1, r2
 80166e6:	2301      	movs	r3, #1
 80166e8:	4680      	mov	r8, r0
 80166ea:	e7f0      	b.n	80166ce <_vfiprintf_r+0x1b6>
 80166ec:	ab03      	add	r3, sp, #12
 80166ee:	9300      	str	r3, [sp, #0]
 80166f0:	4622      	mov	r2, r4
 80166f2:	4b13      	ldr	r3, [pc, #76]	; (8016740 <_vfiprintf_r+0x228>)
 80166f4:	a904      	add	r1, sp, #16
 80166f6:	4630      	mov	r0, r6
 80166f8:	f7fd fe16 	bl	8014328 <_printf_float>
 80166fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016700:	4681      	mov	r9, r0
 8016702:	d1d5      	bne.n	80166b0 <_vfiprintf_r+0x198>
 8016704:	89a3      	ldrh	r3, [r4, #12]
 8016706:	065b      	lsls	r3, r3, #25
 8016708:	f53f af7e 	bmi.w	8016608 <_vfiprintf_r+0xf0>
 801670c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801670e:	e77d      	b.n	801660c <_vfiprintf_r+0xf4>
 8016710:	ab03      	add	r3, sp, #12
 8016712:	9300      	str	r3, [sp, #0]
 8016714:	4622      	mov	r2, r4
 8016716:	4b0a      	ldr	r3, [pc, #40]	; (8016740 <_vfiprintf_r+0x228>)
 8016718:	a904      	add	r1, sp, #16
 801671a:	4630      	mov	r0, r6
 801671c:	f7fe f8ba 	bl	8014894 <_printf_i>
 8016720:	e7ec      	b.n	80166fc <_vfiprintf_r+0x1e4>
 8016722:	bf00      	nop
 8016724:	08016ae0 	.word	0x08016ae0
 8016728:	08016c1c 	.word	0x08016c1c
 801672c:	08016b00 	.word	0x08016b00
 8016730:	08016ac0 	.word	0x08016ac0
 8016734:	08016c22 	.word	0x08016c22
 8016738:	08016c26 	.word	0x08016c26
 801673c:	08014329 	.word	0x08014329
 8016740:	080164f3 	.word	0x080164f3

08016744 <_sbrk_r>:
 8016744:	b538      	push	{r3, r4, r5, lr}
 8016746:	4c06      	ldr	r4, [pc, #24]	; (8016760 <_sbrk_r+0x1c>)
 8016748:	2300      	movs	r3, #0
 801674a:	4605      	mov	r5, r0
 801674c:	4608      	mov	r0, r1
 801674e:	6023      	str	r3, [r4, #0]
 8016750:	f7f8 fa40 	bl	800ebd4 <_sbrk>
 8016754:	1c43      	adds	r3, r0, #1
 8016756:	d102      	bne.n	801675e <_sbrk_r+0x1a>
 8016758:	6823      	ldr	r3, [r4, #0]
 801675a:	b103      	cbz	r3, 801675e <_sbrk_r+0x1a>
 801675c:	602b      	str	r3, [r5, #0]
 801675e:	bd38      	pop	{r3, r4, r5, pc}
 8016760:	20016664 	.word	0x20016664

08016764 <__sread>:
 8016764:	b510      	push	{r4, lr}
 8016766:	460c      	mov	r4, r1
 8016768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801676c:	f000 f8a8 	bl	80168c0 <_read_r>
 8016770:	2800      	cmp	r0, #0
 8016772:	bfab      	itete	ge
 8016774:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016776:	89a3      	ldrhlt	r3, [r4, #12]
 8016778:	181b      	addge	r3, r3, r0
 801677a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801677e:	bfac      	ite	ge
 8016780:	6563      	strge	r3, [r4, #84]	; 0x54
 8016782:	81a3      	strhlt	r3, [r4, #12]
 8016784:	bd10      	pop	{r4, pc}

08016786 <__swrite>:
 8016786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801678a:	461f      	mov	r7, r3
 801678c:	898b      	ldrh	r3, [r1, #12]
 801678e:	05db      	lsls	r3, r3, #23
 8016790:	4605      	mov	r5, r0
 8016792:	460c      	mov	r4, r1
 8016794:	4616      	mov	r6, r2
 8016796:	d505      	bpl.n	80167a4 <__swrite+0x1e>
 8016798:	2302      	movs	r3, #2
 801679a:	2200      	movs	r2, #0
 801679c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167a0:	f000 f868 	bl	8016874 <_lseek_r>
 80167a4:	89a3      	ldrh	r3, [r4, #12]
 80167a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80167aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80167ae:	81a3      	strh	r3, [r4, #12]
 80167b0:	4632      	mov	r2, r6
 80167b2:	463b      	mov	r3, r7
 80167b4:	4628      	mov	r0, r5
 80167b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167ba:	f000 b817 	b.w	80167ec <_write_r>

080167be <__sseek>:
 80167be:	b510      	push	{r4, lr}
 80167c0:	460c      	mov	r4, r1
 80167c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167c6:	f000 f855 	bl	8016874 <_lseek_r>
 80167ca:	1c43      	adds	r3, r0, #1
 80167cc:	89a3      	ldrh	r3, [r4, #12]
 80167ce:	bf15      	itete	ne
 80167d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80167d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80167d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80167da:	81a3      	strheq	r3, [r4, #12]
 80167dc:	bf18      	it	ne
 80167de:	81a3      	strhne	r3, [r4, #12]
 80167e0:	bd10      	pop	{r4, pc}

080167e2 <__sclose>:
 80167e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167e6:	f000 b813 	b.w	8016810 <_close_r>
	...

080167ec <_write_r>:
 80167ec:	b538      	push	{r3, r4, r5, lr}
 80167ee:	4c07      	ldr	r4, [pc, #28]	; (801680c <_write_r+0x20>)
 80167f0:	4605      	mov	r5, r0
 80167f2:	4608      	mov	r0, r1
 80167f4:	4611      	mov	r1, r2
 80167f6:	2200      	movs	r2, #0
 80167f8:	6022      	str	r2, [r4, #0]
 80167fa:	461a      	mov	r2, r3
 80167fc:	f7f8 f999 	bl	800eb32 <_write>
 8016800:	1c43      	adds	r3, r0, #1
 8016802:	d102      	bne.n	801680a <_write_r+0x1e>
 8016804:	6823      	ldr	r3, [r4, #0]
 8016806:	b103      	cbz	r3, 801680a <_write_r+0x1e>
 8016808:	602b      	str	r3, [r5, #0]
 801680a:	bd38      	pop	{r3, r4, r5, pc}
 801680c:	20016664 	.word	0x20016664

08016810 <_close_r>:
 8016810:	b538      	push	{r3, r4, r5, lr}
 8016812:	4c06      	ldr	r4, [pc, #24]	; (801682c <_close_r+0x1c>)
 8016814:	2300      	movs	r3, #0
 8016816:	4605      	mov	r5, r0
 8016818:	4608      	mov	r0, r1
 801681a:	6023      	str	r3, [r4, #0]
 801681c:	f7f8 f9a5 	bl	800eb6a <_close>
 8016820:	1c43      	adds	r3, r0, #1
 8016822:	d102      	bne.n	801682a <_close_r+0x1a>
 8016824:	6823      	ldr	r3, [r4, #0]
 8016826:	b103      	cbz	r3, 801682a <_close_r+0x1a>
 8016828:	602b      	str	r3, [r5, #0]
 801682a:	bd38      	pop	{r3, r4, r5, pc}
 801682c:	20016664 	.word	0x20016664

08016830 <_fstat_r>:
 8016830:	b538      	push	{r3, r4, r5, lr}
 8016832:	4c07      	ldr	r4, [pc, #28]	; (8016850 <_fstat_r+0x20>)
 8016834:	2300      	movs	r3, #0
 8016836:	4605      	mov	r5, r0
 8016838:	4608      	mov	r0, r1
 801683a:	4611      	mov	r1, r2
 801683c:	6023      	str	r3, [r4, #0]
 801683e:	f7f8 f9a0 	bl	800eb82 <_fstat>
 8016842:	1c43      	adds	r3, r0, #1
 8016844:	d102      	bne.n	801684c <_fstat_r+0x1c>
 8016846:	6823      	ldr	r3, [r4, #0]
 8016848:	b103      	cbz	r3, 801684c <_fstat_r+0x1c>
 801684a:	602b      	str	r3, [r5, #0]
 801684c:	bd38      	pop	{r3, r4, r5, pc}
 801684e:	bf00      	nop
 8016850:	20016664 	.word	0x20016664

08016854 <_isatty_r>:
 8016854:	b538      	push	{r3, r4, r5, lr}
 8016856:	4c06      	ldr	r4, [pc, #24]	; (8016870 <_isatty_r+0x1c>)
 8016858:	2300      	movs	r3, #0
 801685a:	4605      	mov	r5, r0
 801685c:	4608      	mov	r0, r1
 801685e:	6023      	str	r3, [r4, #0]
 8016860:	f7f8 f99f 	bl	800eba2 <_isatty>
 8016864:	1c43      	adds	r3, r0, #1
 8016866:	d102      	bne.n	801686e <_isatty_r+0x1a>
 8016868:	6823      	ldr	r3, [r4, #0]
 801686a:	b103      	cbz	r3, 801686e <_isatty_r+0x1a>
 801686c:	602b      	str	r3, [r5, #0]
 801686e:	bd38      	pop	{r3, r4, r5, pc}
 8016870:	20016664 	.word	0x20016664

08016874 <_lseek_r>:
 8016874:	b538      	push	{r3, r4, r5, lr}
 8016876:	4c07      	ldr	r4, [pc, #28]	; (8016894 <_lseek_r+0x20>)
 8016878:	4605      	mov	r5, r0
 801687a:	4608      	mov	r0, r1
 801687c:	4611      	mov	r1, r2
 801687e:	2200      	movs	r2, #0
 8016880:	6022      	str	r2, [r4, #0]
 8016882:	461a      	mov	r2, r3
 8016884:	f7f8 f998 	bl	800ebb8 <_lseek>
 8016888:	1c43      	adds	r3, r0, #1
 801688a:	d102      	bne.n	8016892 <_lseek_r+0x1e>
 801688c:	6823      	ldr	r3, [r4, #0]
 801688e:	b103      	cbz	r3, 8016892 <_lseek_r+0x1e>
 8016890:	602b      	str	r3, [r5, #0]
 8016892:	bd38      	pop	{r3, r4, r5, pc}
 8016894:	20016664 	.word	0x20016664

08016898 <__ascii_mbtowc>:
 8016898:	b082      	sub	sp, #8
 801689a:	b901      	cbnz	r1, 801689e <__ascii_mbtowc+0x6>
 801689c:	a901      	add	r1, sp, #4
 801689e:	b142      	cbz	r2, 80168b2 <__ascii_mbtowc+0x1a>
 80168a0:	b14b      	cbz	r3, 80168b6 <__ascii_mbtowc+0x1e>
 80168a2:	7813      	ldrb	r3, [r2, #0]
 80168a4:	600b      	str	r3, [r1, #0]
 80168a6:	7812      	ldrb	r2, [r2, #0]
 80168a8:	1c10      	adds	r0, r2, #0
 80168aa:	bf18      	it	ne
 80168ac:	2001      	movne	r0, #1
 80168ae:	b002      	add	sp, #8
 80168b0:	4770      	bx	lr
 80168b2:	4610      	mov	r0, r2
 80168b4:	e7fb      	b.n	80168ae <__ascii_mbtowc+0x16>
 80168b6:	f06f 0001 	mvn.w	r0, #1
 80168ba:	e7f8      	b.n	80168ae <__ascii_mbtowc+0x16>

080168bc <__malloc_lock>:
 80168bc:	4770      	bx	lr

080168be <__malloc_unlock>:
 80168be:	4770      	bx	lr

080168c0 <_read_r>:
 80168c0:	b538      	push	{r3, r4, r5, lr}
 80168c2:	4c07      	ldr	r4, [pc, #28]	; (80168e0 <_read_r+0x20>)
 80168c4:	4605      	mov	r5, r0
 80168c6:	4608      	mov	r0, r1
 80168c8:	4611      	mov	r1, r2
 80168ca:	2200      	movs	r2, #0
 80168cc:	6022      	str	r2, [r4, #0]
 80168ce:	461a      	mov	r2, r3
 80168d0:	f7f8 f912 	bl	800eaf8 <_read>
 80168d4:	1c43      	adds	r3, r0, #1
 80168d6:	d102      	bne.n	80168de <_read_r+0x1e>
 80168d8:	6823      	ldr	r3, [r4, #0]
 80168da:	b103      	cbz	r3, 80168de <_read_r+0x1e>
 80168dc:	602b      	str	r3, [r5, #0]
 80168de:	bd38      	pop	{r3, r4, r5, pc}
 80168e0:	20016664 	.word	0x20016664

080168e4 <__ascii_wctomb>:
 80168e4:	b149      	cbz	r1, 80168fa <__ascii_wctomb+0x16>
 80168e6:	2aff      	cmp	r2, #255	; 0xff
 80168e8:	bf85      	ittet	hi
 80168ea:	238a      	movhi	r3, #138	; 0x8a
 80168ec:	6003      	strhi	r3, [r0, #0]
 80168ee:	700a      	strbls	r2, [r1, #0]
 80168f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80168f4:	bf98      	it	ls
 80168f6:	2001      	movls	r0, #1
 80168f8:	4770      	bx	lr
 80168fa:	4608      	mov	r0, r1
 80168fc:	4770      	bx	lr
	...

08016900 <_init>:
 8016900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016902:	bf00      	nop
 8016904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016906:	bc08      	pop	{r3}
 8016908:	469e      	mov	lr, r3
 801690a:	4770      	bx	lr

0801690c <_fini>:
 801690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801690e:	bf00      	nop
 8016910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016912:	bc08      	pop	{r3}
 8016914:	469e      	mov	lr, r3
 8016916:	4770      	bx	lr
>>>>>>> 0d560d2228467b7baf186a79ece8709938b53fac
