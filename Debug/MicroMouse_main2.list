
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .text         0000ff40  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000460  08017f40  08017f40  00027f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080183a0  080183a0  0003025c  2**0
                  CONTENTS
  5 .ARM          00000008  080183a0  080183a0  000283a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080183a8  080183a8  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080183a8  080183a8  000283a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080183ac  080183ac  000283ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000025c  20000000  080183b0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00005028  20000260  0801860c  00030260  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005288  0801860c  00035288  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014923  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002ce2  00000000  00000000  00044baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000014c8  00000000  00000000  00047898  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001370  00000000  00000000  00048d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00021b3e  00000000  00000000  0004a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f549  00000000  00000000  0006bc0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c860f  00000000  00000000  0007b157  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00143766  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064d4  00000000  00000000  001437e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000260 	.word	0x20000260
 800801c:	00000000 	.word	0x00000000
 8008020:	08017f28 	.word	0x08017f28

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000264 	.word	0x20000264
 800803c:	08017f28 	.word	0x08017f28

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <Side_Wall_Control>:

float R_velocity, L_velocity;
float Target_R_velo, Target_L_velo;

//壁制御
void Side_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 8008db8:	b590      	push	{r4, r7, lr}
 8008dba:	b089      	sub	sp, #36	; 0x24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	ed87 0a05 	vstr	s0, [r7, #20]
 8008dc2:	edc7 0a04 	vstr	s1, [r7, #16]
 8008dc6:	ed87 1a03 	vstr	s2, [r7, #12]
 8008dca:	edc7 1a02 	vstr	s3, [r7, #8]
 8008dce:	ed87 2a01 	vstr	s4, [r7, #4]
 8008dd2:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 8008dd6:	f04f 0300 	mov.w	r3, #0
 8008dda:	61fb      	str	r3, [r7, #28]
 8008ddc:	f04f 0300 	mov.w	r3, #0
 8008de0:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 8008de2:	4b4b      	ldr	r3, [pc, #300]	; (8008f10 <Side_Wall_Control+0x158>)
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d107      	bne.n	8008dfa <Side_Wall_Control+0x42>
		ei =0;
 8008dea:	4b4a      	ldr	r3, [pc, #296]	; (8008f14 <Side_Wall_Control+0x15c>)
 8008dec:	f04f 0200 	mov.w	r2, #0
 8008df0:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8008df2:	4b49      	ldr	r3, [pc, #292]	; (8008f18 <Side_Wall_Control+0x160>)
 8008df4:	f04f 0200 	mov.w	r2, #0
 8008df8:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8008dfa:	4b45      	ldr	r3, [pc, #276]	; (8008f10 <Side_Wall_Control+0x158>)
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	701a      	strb	r2, [r3, #0]

	e =  40 + target - now;//r - l
 8008e00:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e04:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8008f1c <Side_Wall_Control+0x164>
 8008e08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e14:	edc7 7a07 	vstr	s15, [r7, #28]
	ei += e * T;
 8008e18:	ed97 7a07 	vldr	s14, [r7, #28]
 8008e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e24:	4b3b      	ldr	r3, [pc, #236]	; (8008f14 <Side_Wall_Control+0x15c>)
 8008e26:	edd3 7a00 	vldr	s15, [r3]
 8008e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e2e:	4b39      	ldr	r3, [pc, #228]	; (8008f14 <Side_Wall_Control+0x15c>)
 8008e30:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8008e34:	4b38      	ldr	r3, [pc, #224]	; (8008f18 <Side_Wall_Control+0x160>)
 8008e36:	edd3 7a00 	vldr	s15, [r3]
 8008e3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8008e3e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008e42:	ed97 7a03 	vldr	s14, [r7, #12]
 8008e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e4a:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 8008e4e:	4a32      	ldr	r2, [pc, #200]	; (8008f18 <Side_Wall_Control+0x160>)
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	6013      	str	r3, [r2, #0]

	R_wall =  (int16_t)round(KP*e + KI*ei + KD*ed);
 8008e54:	ed97 7a02 	vldr	s14, [r7, #8]
 8008e58:	edd7 7a07 	vldr	s15, [r7, #28]
 8008e5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e60:	4b2c      	ldr	r3, [pc, #176]	; (8008f14 <Side_Wall_Control+0x15c>)
 8008e62:	edd3 6a00 	vldr	s13, [r3]
 8008e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e72:	edd7 6a00 	vldr	s13, [r7]
 8008e76:	edd7 7a06 	vldr	s15, [r7, #24]
 8008e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e82:	ee17 0a90 	vmov	r0, s15
 8008e86:	f7ff fa97 	bl	80083b8 <__aeabi_f2d>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	ec44 3b10 	vmov	d0, r3, r4
 8008e92:	f00c fc41 	bl	8015718 <round>
 8008e96:	ec54 3b10 	vmov	r3, r4, d0
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	f7ff fd93 	bl	80089c8 <__aeabi_d2iz>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	b21a      	sxth	r2, r3
 8008ea6:	4b1e      	ldr	r3, [pc, #120]	; (8008f20 <Side_Wall_Control+0x168>)
 8008ea8:	801a      	strh	r2, [r3, #0]
	L_wall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8008eaa:	ed97 7a02 	vldr	s14, [r7, #8]
 8008eae:	edd7 7a07 	vldr	s15, [r7, #28]
 8008eb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008eb6:	4b17      	ldr	r3, [pc, #92]	; (8008f14 <Side_Wall_Control+0x15c>)
 8008eb8:	edd3 6a00 	vldr	s13, [r3]
 8008ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ec8:	edd7 6a00 	vldr	s13, [r7]
 8008ecc:	edd7 7a06 	vldr	s15, [r7, #24]
 8008ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ed8:	ee17 0a90 	vmov	r0, s15
 8008edc:	f7ff fa6c 	bl	80083b8 <__aeabi_f2d>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	ec44 3b10 	vmov	d0, r3, r4
 8008ee8:	f00c fc16 	bl	8015718 <round>
 8008eec:	ec54 3b10 	vmov	r3, r4, d0
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	f7ff fd68 	bl	80089c8 <__aeabi_d2iz>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	b21b      	sxth	r3, r3
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	425b      	negs	r3, r3
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	b21a      	sxth	r2, r3
 8008f04:	4b07      	ldr	r3, [pc, #28]	; (8008f24 <Side_Wall_Control+0x16c>)
 8008f06:	801a      	strh	r2, [r3, #0]

}
 8008f08:	bf00      	nop
 8008f0a:	3724      	adds	r7, #36	; 0x24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd90      	pop	{r4, r7, pc}
 8008f10:	2000027c 	.word	0x2000027c
 8008f14:	20000280 	.word	0x20000280
 8008f18:	20000284 	.word	0x20000284
 8008f1c:	42200000 	.word	0x42200000
 8008f20:	2000438a 	.word	0x2000438a
 8008f24:	2000439c 	.word	0x2000439c

08008f28 <Left_Wall_Control>:

void Left_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 8008f28:	b590      	push	{r4, r7, lr}
 8008f2a:	b089      	sub	sp, #36	; 0x24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	ed87 0a05 	vstr	s0, [r7, #20]
 8008f32:	edc7 0a04 	vstr	s1, [r7, #16]
 8008f36:	ed87 1a03 	vstr	s2, [r7, #12]
 8008f3a:	edc7 1a02 	vstr	s3, [r7, #8]
 8008f3e:	ed87 2a01 	vstr	s4, [r7, #4]
 8008f42:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 8008f46:	f04f 0300 	mov.w	r3, #0
 8008f4a:	61fb      	str	r3, [r7, #28]
 8008f4c:	f04f 0300 	mov.w	r3, #0
 8008f50:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 8008f52:	4b51      	ldr	r3, [pc, #324]	; (8009098 <Left_Wall_Control+0x170>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d107      	bne.n	8008f6a <Left_Wall_Control+0x42>
		ei =0;
 8008f5a:	4b50      	ldr	r3, [pc, #320]	; (800909c <Left_Wall_Control+0x174>)
 8008f5c:	f04f 0200 	mov.w	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8008f62:	4b4f      	ldr	r3, [pc, #316]	; (80090a0 <Left_Wall_Control+0x178>)
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8008f6a:	4b4b      	ldr	r3, [pc, #300]	; (8009098 <Left_Wall_Control+0x170>)
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	701a      	strb	r2, [r3, #0]
	e = 1.2*(target - now);
 8008f70:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f74:	edd7 7a04 	vldr	s15, [r7, #16]
 8008f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f7c:	ee17 0a90 	vmov	r0, s15
 8008f80:	f7ff fa1a 	bl	80083b8 <__aeabi_f2d>
 8008f84:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8008f88:	4b46      	ldr	r3, [pc, #280]	; (80090a4 <Left_Wall_Control+0x17c>)
 8008f8a:	f7ff fa6d 	bl	8008468 <__aeabi_dmul>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	460c      	mov	r4, r1
 8008f92:	4618      	mov	r0, r3
 8008f94:	4621      	mov	r1, r4
 8008f96:	f7ff fd3f 	bl	8008a18 <__aeabi_d2f>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	61fb      	str	r3, [r7, #28]
	ei += e * T;
 8008f9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008fa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8008fa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008faa:	4b3c      	ldr	r3, [pc, #240]	; (800909c <Left_Wall_Control+0x174>)
 8008fac:	edd3 7a00 	vldr	s15, [r3]
 8008fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fb4:	4b39      	ldr	r3, [pc, #228]	; (800909c <Left_Wall_Control+0x174>)
 8008fb6:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8008fba:	4b39      	ldr	r3, [pc, #228]	; (80090a0 <Left_Wall_Control+0x178>)
 8008fbc:	edd3 7a00 	vldr	s15, [r3]
 8008fc0:	ed97 7a07 	vldr	s14, [r7, #28]
 8008fc4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008fc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8008fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fd0:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 8008fd4:	4a32      	ldr	r2, [pc, #200]	; (80090a0 <Left_Wall_Control+0x178>)
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	6013      	str	r3, [r2, #0]
	L_leftwall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8008fda:	ed97 7a02 	vldr	s14, [r7, #8]
 8008fde:	edd7 7a07 	vldr	s15, [r7, #28]
 8008fe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fe6:	4b2d      	ldr	r3, [pc, #180]	; (800909c <Left_Wall_Control+0x174>)
 8008fe8:	edd3 6a00 	vldr	s13, [r3]
 8008fec:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ff8:	edd7 6a00 	vldr	s13, [r7]
 8008ffc:	edd7 7a06 	vldr	s15, [r7, #24]
 8009000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009008:	ee17 0a90 	vmov	r0, s15
 800900c:	f7ff f9d4 	bl	80083b8 <__aeabi_f2d>
 8009010:	4603      	mov	r3, r0
 8009012:	460c      	mov	r4, r1
 8009014:	ec44 3b10 	vmov	d0, r3, r4
 8009018:	f00c fb7e 	bl	8015718 <round>
 800901c:	ec54 3b10 	vmov	r3, r4, d0
 8009020:	4618      	mov	r0, r3
 8009022:	4621      	mov	r1, r4
 8009024:	f7ff fcd0 	bl	80089c8 <__aeabi_d2iz>
 8009028:	4603      	mov	r3, r0
 800902a:	b21b      	sxth	r3, r3
 800902c:	b29b      	uxth	r3, r3
 800902e:	425b      	negs	r3, r3
 8009030:	b29b      	uxth	r3, r3
 8009032:	b21a      	sxth	r2, r3
 8009034:	4b1c      	ldr	r3, [pc, #112]	; (80090a8 <Left_Wall_Control+0x180>)
 8009036:	801a      	strh	r2, [r3, #0]
	R_leftwall = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009038:	ed97 7a02 	vldr	s14, [r7, #8]
 800903c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009044:	4b15      	ldr	r3, [pc, #84]	; (800909c <Left_Wall_Control+0x174>)
 8009046:	edd3 6a00 	vldr	s13, [r3]
 800904a:	edd7 7a01 	vldr	s15, [r7, #4]
 800904e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009052:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009056:	edd7 6a00 	vldr	s13, [r7]
 800905a:	edd7 7a06 	vldr	s15, [r7, #24]
 800905e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009066:	ee17 0a90 	vmov	r0, s15
 800906a:	f7ff f9a5 	bl	80083b8 <__aeabi_f2d>
 800906e:	4603      	mov	r3, r0
 8009070:	460c      	mov	r4, r1
 8009072:	ec44 3b10 	vmov	d0, r3, r4
 8009076:	f00c fb4f 	bl	8015718 <round>
 800907a:	ec54 3b10 	vmov	r3, r4, d0
 800907e:	4618      	mov	r0, r3
 8009080:	4621      	mov	r1, r4
 8009082:	f7ff fca1 	bl	80089c8 <__aeabi_d2iz>
 8009086:	4603      	mov	r3, r0
 8009088:	b21a      	sxth	r2, r3
 800908a:	4b08      	ldr	r3, [pc, #32]	; (80090ac <Left_Wall_Control+0x184>)
 800908c:	801a      	strh	r2, [r3, #0]
}
 800908e:	bf00      	nop
 8009090:	3724      	adds	r7, #36	; 0x24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd90      	pop	{r4, r7, pc}
 8009096:	bf00      	nop
 8009098:	2000027c 	.word	0x2000027c
 800909c:	20000288 	.word	0x20000288
 80090a0:	2000028c 	.word	0x2000028c
 80090a4:	3ff33333 	.word	0x3ff33333
 80090a8:	20004386 	.word	0x20004386
 80090ac:	200043a8 	.word	0x200043a8

080090b0 <Right_Wall_Control>:

void Right_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 80090b0:	b590      	push	{r4, r7, lr}
 80090b2:	b089      	sub	sp, #36	; 0x24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	ed87 0a05 	vstr	s0, [r7, #20]
 80090ba:	edc7 0a04 	vstr	s1, [r7, #16]
 80090be:	ed87 1a03 	vstr	s2, [r7, #12]
 80090c2:	edc7 1a02 	vstr	s3, [r7, #8]
 80090c6:	ed87 2a01 	vstr	s4, [r7, #4]
 80090ca:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 80090ce:	f04f 0300 	mov.w	r3, #0
 80090d2:	61fb      	str	r3, [r7, #28]
 80090d4:	f04f 0300 	mov.w	r3, #0
 80090d8:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 80090da:	4b51      	ldr	r3, [pc, #324]	; (8009220 <Right_Wall_Control+0x170>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d107      	bne.n	80090f2 <Right_Wall_Control+0x42>
		ei =0;
 80090e2:	4b50      	ldr	r3, [pc, #320]	; (8009224 <Right_Wall_Control+0x174>)
 80090e4:	f04f 0200 	mov.w	r2, #0
 80090e8:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80090ea:	4b4f      	ldr	r3, [pc, #316]	; (8009228 <Right_Wall_Control+0x178>)
 80090ec:	f04f 0200 	mov.w	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80090f2:	4b4b      	ldr	r3, [pc, #300]	; (8009220 <Right_Wall_Control+0x170>)
 80090f4:	2201      	movs	r2, #1
 80090f6:	701a      	strb	r2, [r3, #0]
	e = 1.2*(target - now);
 80090f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80090fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8009100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009104:	ee17 0a90 	vmov	r0, s15
 8009108:	f7ff f956 	bl	80083b8 <__aeabi_f2d>
 800910c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8009110:	4b46      	ldr	r3, [pc, #280]	; (800922c <Right_Wall_Control+0x17c>)
 8009112:	f7ff f9a9 	bl	8008468 <__aeabi_dmul>
 8009116:	4603      	mov	r3, r0
 8009118:	460c      	mov	r4, r1
 800911a:	4618      	mov	r0, r3
 800911c:	4621      	mov	r1, r4
 800911e:	f7ff fc7b 	bl	8008a18 <__aeabi_d2f>
 8009122:	4603      	mov	r3, r0
 8009124:	61fb      	str	r3, [r7, #28]
	ei += e * T;
 8009126:	ed97 7a07 	vldr	s14, [r7, #28]
 800912a:	edd7 7a03 	vldr	s15, [r7, #12]
 800912e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009132:	4b3c      	ldr	r3, [pc, #240]	; (8009224 <Right_Wall_Control+0x174>)
 8009134:	edd3 7a00 	vldr	s15, [r3]
 8009138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800913c:	4b39      	ldr	r3, [pc, #228]	; (8009224 <Right_Wall_Control+0x174>)
 800913e:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8009142:	4b39      	ldr	r3, [pc, #228]	; (8009228 <Right_Wall_Control+0x178>)
 8009144:	edd3 7a00 	vldr	s15, [r3]
 8009148:	ed97 7a07 	vldr	s14, [r7, #28]
 800914c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009150:	ed97 7a03 	vldr	s14, [r7, #12]
 8009154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009158:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 800915c:	4a32      	ldr	r2, [pc, #200]	; (8009228 <Right_Wall_Control+0x178>)
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	6013      	str	r3, [r2, #0]
	L_rightwall = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009162:	ed97 7a02 	vldr	s14, [r7, #8]
 8009166:	edd7 7a07 	vldr	s15, [r7, #28]
 800916a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800916e:	4b2d      	ldr	r3, [pc, #180]	; (8009224 <Right_Wall_Control+0x174>)
 8009170:	edd3 6a00 	vldr	s13, [r3]
 8009174:	edd7 7a01 	vldr	s15, [r7, #4]
 8009178:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800917c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009180:	edd7 6a00 	vldr	s13, [r7]
 8009184:	edd7 7a06 	vldr	s15, [r7, #24]
 8009188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800918c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009190:	ee17 0a90 	vmov	r0, s15
 8009194:	f7ff f910 	bl	80083b8 <__aeabi_f2d>
 8009198:	4603      	mov	r3, r0
 800919a:	460c      	mov	r4, r1
 800919c:	ec44 3b10 	vmov	d0, r3, r4
 80091a0:	f00c faba 	bl	8015718 <round>
 80091a4:	ec54 3b10 	vmov	r3, r4, d0
 80091a8:	4618      	mov	r0, r3
 80091aa:	4621      	mov	r1, r4
 80091ac:	f7ff fc0c 	bl	80089c8 <__aeabi_d2iz>
 80091b0:	4603      	mov	r3, r0
 80091b2:	b21a      	sxth	r2, r3
 80091b4:	4b1e      	ldr	r3, [pc, #120]	; (8009230 <Right_Wall_Control+0x180>)
 80091b6:	801a      	strh	r2, [r3, #0]
	R_rightwall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 80091b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80091bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80091c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80091c4:	4b17      	ldr	r3, [pc, #92]	; (8009224 <Right_Wall_Control+0x174>)
 80091c6:	edd3 6a00 	vldr	s13, [r3]
 80091ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80091ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80091d6:	edd7 6a00 	vldr	s13, [r7]
 80091da:	edd7 7a06 	vldr	s15, [r7, #24]
 80091de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091e6:	ee17 0a90 	vmov	r0, s15
 80091ea:	f7ff f8e5 	bl	80083b8 <__aeabi_f2d>
 80091ee:	4603      	mov	r3, r0
 80091f0:	460c      	mov	r4, r1
 80091f2:	ec44 3b10 	vmov	d0, r3, r4
 80091f6:	f00c fa8f 	bl	8015718 <round>
 80091fa:	ec54 3b10 	vmov	r3, r4, d0
 80091fe:	4618      	mov	r0, r3
 8009200:	4621      	mov	r1, r4
 8009202:	f7ff fbe1 	bl	80089c8 <__aeabi_d2iz>
 8009206:	4603      	mov	r3, r0
 8009208:	b21b      	sxth	r3, r3
 800920a:	b29b      	uxth	r3, r3
 800920c:	425b      	negs	r3, r3
 800920e:	b29b      	uxth	r3, r3
 8009210:	b21a      	sxth	r2, r3
 8009212:	4b08      	ldr	r3, [pc, #32]	; (8009234 <Right_Wall_Control+0x184>)
 8009214:	801a      	strh	r2, [r3, #0]
}
 8009216:	bf00      	nop
 8009218:	3724      	adds	r7, #36	; 0x24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd90      	pop	{r4, r7, pc}
 800921e:	bf00      	nop
 8009220:	2000027c 	.word	0x2000027c
 8009224:	20000290 	.word	0x20000290
 8009228:	20000294 	.word	0x20000294
 800922c:	3ff33333 	.word	0x3ff33333
 8009230:	20004378 	.word	0x20004378
 8009234:	20004390 	.word	0x20004390

08009238 <Velocity_Control>:

//速度制御
void Velocity_Control(float target, float now, float T, float KP, float KI, float KD){ //TIM3,4
 8009238:	b590      	push	{r4, r7, lr}
 800923a:	b089      	sub	sp, #36	; 0x24
 800923c:	af00      	add	r7, sp, #0
 800923e:	ed87 0a05 	vstr	s0, [r7, #20]
 8009242:	edc7 0a04 	vstr	s1, [r7, #16]
 8009246:	ed87 1a03 	vstr	s2, [r7, #12]
 800924a:	edc7 1a02 	vstr	s3, [r7, #8]
 800924e:	ed87 2a01 	vstr	s4, [r7, #4]
 8009252:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 8009256:	f04f 0300 	mov.w	r3, #0
 800925a:	61fb      	str	r3, [r7, #28]
 800925c:	f04f 0300 	mov.w	r3, #0
 8009260:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 8009262:	4b47      	ldr	r3, [pc, #284]	; (8009380 <Velocity_Control+0x148>)
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d107      	bne.n	800927a <Velocity_Control+0x42>
		ei =0;
 800926a:	4b46      	ldr	r3, [pc, #280]	; (8009384 <Velocity_Control+0x14c>)
 800926c:	f04f 0200 	mov.w	r2, #0
 8009270:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8009272:	4b45      	ldr	r3, [pc, #276]	; (8009388 <Velocity_Control+0x150>)
 8009274:	f04f 0200 	mov.w	r2, #0
 8009278:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 800927a:	4b41      	ldr	r3, [pc, #260]	; (8009380 <Velocity_Control+0x148>)
 800927c:	2201      	movs	r2, #1
 800927e:	701a      	strb	r2, [r3, #0]
	e = target - now;
 8009280:	ed97 7a05 	vldr	s14, [r7, #20]
 8009284:	edd7 7a04 	vldr	s15, [r7, #16]
 8009288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800928c:	edc7 7a07 	vstr	s15, [r7, #28]
	ei += e * T;
 8009290:	ed97 7a07 	vldr	s14, [r7, #28]
 8009294:	edd7 7a03 	vldr	s15, [r7, #12]
 8009298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800929c:	4b39      	ldr	r3, [pc, #228]	; (8009384 <Velocity_Control+0x14c>)
 800929e:	edd3 7a00 	vldr	s15, [r3]
 80092a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092a6:	4b37      	ldr	r3, [pc, #220]	; (8009384 <Velocity_Control+0x14c>)
 80092a8:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 80092ac:	4b36      	ldr	r3, [pc, #216]	; (8009388 <Velocity_Control+0x150>)
 80092ae:	edd3 7a00 	vldr	s15, [r3]
 80092b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80092b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80092ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80092be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092c2:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 80092c6:	4a30      	ldr	r2, [pc, #192]	; (8009388 <Velocity_Control+0x150>)
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	6013      	str	r3, [r2, #0]

    //o PID制御して、PWMの出力に反映
	R_v_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 80092cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80092d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80092d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092d8:	4b2a      	ldr	r3, [pc, #168]	; (8009384 <Velocity_Control+0x14c>)
 80092da:	edd3 6a00 	vldr	s13, [r3]
 80092de:	edd7 7a01 	vldr	s15, [r7, #4]
 80092e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80092ea:	edd7 6a00 	vldr	s13, [r7]
 80092ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80092f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092fa:	ee17 0a90 	vmov	r0, s15
 80092fe:	f7ff f85b 	bl	80083b8 <__aeabi_f2d>
 8009302:	4603      	mov	r3, r0
 8009304:	460c      	mov	r4, r1
 8009306:	ec44 3b10 	vmov	d0, r3, r4
 800930a:	f00c fa05 	bl	8015718 <round>
 800930e:	ec54 3b10 	vmov	r3, r4, d0
 8009312:	4618      	mov	r0, r3
 8009314:	4621      	mov	r1, r4
 8009316:	f7ff fb57 	bl	80089c8 <__aeabi_d2iz>
 800931a:	4603      	mov	r3, r0
 800931c:	b21a      	sxth	r2, r3
 800931e:	4b1b      	ldr	r3, [pc, #108]	; (800938c <Velocity_Control+0x154>)
 8009320:	801a      	strh	r2, [r3, #0]
	L_v_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009322:	ed97 7a02 	vldr	s14, [r7, #8]
 8009326:	edd7 7a07 	vldr	s15, [r7, #28]
 800932a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800932e:	4b15      	ldr	r3, [pc, #84]	; (8009384 <Velocity_Control+0x14c>)
 8009330:	edd3 6a00 	vldr	s13, [r3]
 8009334:	edd7 7a01 	vldr	s15, [r7, #4]
 8009338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800933c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009340:	edd7 6a00 	vldr	s13, [r7]
 8009344:	edd7 7a06 	vldr	s15, [r7, #24]
 8009348:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800934c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009350:	ee17 0a90 	vmov	r0, s15
 8009354:	f7ff f830 	bl	80083b8 <__aeabi_f2d>
 8009358:	4603      	mov	r3, r0
 800935a:	460c      	mov	r4, r1
 800935c:	ec44 3b10 	vmov	d0, r3, r4
 8009360:	f00c f9da 	bl	8015718 <round>
 8009364:	ec54 3b10 	vmov	r3, r4, d0
 8009368:	4618      	mov	r0, r3
 800936a:	4621      	mov	r1, r4
 800936c:	f7ff fb2c 	bl	80089c8 <__aeabi_d2iz>
 8009370:	4603      	mov	r3, r0
 8009372:	b21a      	sxth	r2, r3
 8009374:	4b06      	ldr	r3, [pc, #24]	; (8009390 <Velocity_Control+0x158>)
 8009376:	801a      	strh	r2, [r3, #0]

	//o代入は個でよさそう
}
 8009378:	bf00      	nop
 800937a:	3724      	adds	r7, #36	; 0x24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd90      	pop	{r4, r7, pc}
 8009380:	2000027c 	.word	0x2000027c
 8009384:	20000298 	.word	0x20000298
 8009388:	2000029c 	.word	0x2000029c
 800938c:	2000438c 	.word	0x2000438c
 8009390:	20004384 	.word	0x20004384

08009394 <Right_Velo_Control>:

void Right_Velo_Control(float target, float now, float T, float KP, float KI, float KD){
 8009394:	b590      	push	{r4, r7, lr}
 8009396:	b089      	sub	sp, #36	; 0x24
 8009398:	af00      	add	r7, sp, #0
 800939a:	ed87 0a05 	vstr	s0, [r7, #20]
 800939e:	edc7 0a04 	vstr	s1, [r7, #16]
 80093a2:	ed87 1a03 	vstr	s2, [r7, #12]
 80093a6:	edc7 1a02 	vstr	s3, [r7, #8]
 80093aa:	ed87 2a01 	vstr	s4, [r7, #4]
 80093ae:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 80093b2:	f04f 0300 	mov.w	r3, #0
 80093b6:	61fb      	str	r3, [r7, #28]
 80093b8:	f04f 0300 	mov.w	r3, #0
 80093bc:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 80093be:	4b32      	ldr	r3, [pc, #200]	; (8009488 <Right_Velo_Control+0xf4>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d107      	bne.n	80093d6 <Right_Velo_Control+0x42>
		ei =0;
 80093c6:	4b31      	ldr	r3, [pc, #196]	; (800948c <Right_Velo_Control+0xf8>)
 80093c8:	f04f 0200 	mov.w	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80093ce:	4b30      	ldr	r3, [pc, #192]	; (8009490 <Right_Velo_Control+0xfc>)
 80093d0:	f04f 0200 	mov.w	r2, #0
 80093d4:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80093d6:	4b2c      	ldr	r3, [pc, #176]	; (8009488 <Right_Velo_Control+0xf4>)
 80093d8:	2201      	movs	r2, #1
 80093da:	701a      	strb	r2, [r3, #0]
	e = target - now;
 80093dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80093e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80093e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093e8:	edc7 7a07 	vstr	s15, [r7, #28]
	ei += e * T;
 80093ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80093f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80093f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093f8:	4b24      	ldr	r3, [pc, #144]	; (800948c <Right_Velo_Control+0xf8>)
 80093fa:	edd3 7a00 	vldr	s15, [r3]
 80093fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009402:	4b22      	ldr	r3, [pc, #136]	; (800948c <Right_Velo_Control+0xf8>)
 8009404:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 8009408:	4b21      	ldr	r3, [pc, #132]	; (8009490 <Right_Velo_Control+0xfc>)
 800940a:	edd3 7a00 	vldr	s15, [r3]
 800940e:	ed97 7a07 	vldr	s14, [r7, #28]
 8009412:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009416:	ed97 7a03 	vldr	s14, [r7, #12]
 800941a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800941e:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 8009422:	4a1b      	ldr	r2, [pc, #108]	; (8009490 <Right_Velo_Control+0xfc>)
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	6013      	str	r3, [r2, #0]

	R_velo_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009428:	ed97 7a02 	vldr	s14, [r7, #8]
 800942c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009434:	4b15      	ldr	r3, [pc, #84]	; (800948c <Right_Velo_Control+0xf8>)
 8009436:	edd3 6a00 	vldr	s13, [r3]
 800943a:	edd7 7a01 	vldr	s15, [r7, #4]
 800943e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009442:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009446:	edd7 6a00 	vldr	s13, [r7]
 800944a:	edd7 7a06 	vldr	s15, [r7, #24]
 800944e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009456:	ee17 0a90 	vmov	r0, s15
 800945a:	f7fe ffad 	bl	80083b8 <__aeabi_f2d>
 800945e:	4603      	mov	r3, r0
 8009460:	460c      	mov	r4, r1
 8009462:	ec44 3b10 	vmov	d0, r3, r4
 8009466:	f00c f957 	bl	8015718 <round>
 800946a:	ec54 3b10 	vmov	r3, r4, d0
 800946e:	4618      	mov	r0, r3
 8009470:	4621      	mov	r1, r4
 8009472:	f7ff faa9 	bl	80089c8 <__aeabi_d2iz>
 8009476:	4603      	mov	r3, r0
 8009478:	b21a      	sxth	r2, r3
 800947a:	4b06      	ldr	r3, [pc, #24]	; (8009494 <Right_Velo_Control+0x100>)
 800947c:	801a      	strh	r2, [r3, #0]
}
 800947e:	bf00      	nop
 8009480:	3724      	adds	r7, #36	; 0x24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd90      	pop	{r4, r7, pc}
 8009486:	bf00      	nop
 8009488:	2000027c 	.word	0x2000027c
 800948c:	200002a0 	.word	0x200002a0
 8009490:	200002a4 	.word	0x200002a4
 8009494:	2000437c 	.word	0x2000437c

08009498 <Left_Velo_Control>:

void Left_Velo_Control(float target, float now, float T, float KP, float KI, float KD){
 8009498:	b590      	push	{r4, r7, lr}
 800949a:	b089      	sub	sp, #36	; 0x24
 800949c:	af00      	add	r7, sp, #0
 800949e:	ed87 0a05 	vstr	s0, [r7, #20]
 80094a2:	edc7 0a04 	vstr	s1, [r7, #16]
 80094a6:	ed87 1a03 	vstr	s2, [r7, #12]
 80094aa:	edc7 1a02 	vstr	s3, [r7, #8]
 80094ae:	ed87 2a01 	vstr	s4, [r7, #4]
 80094b2:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 80094b6:	f04f 0300 	mov.w	r3, #0
 80094ba:	61fb      	str	r3, [r7, #28]
 80094bc:	f04f 0300 	mov.w	r3, #0
 80094c0:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 80094c2:	4b32      	ldr	r3, [pc, #200]	; (800958c <Left_Velo_Control+0xf4>)
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d107      	bne.n	80094da <Left_Velo_Control+0x42>
		ei =0;
 80094ca:	4b31      	ldr	r3, [pc, #196]	; (8009590 <Left_Velo_Control+0xf8>)
 80094cc:	f04f 0200 	mov.w	r2, #0
 80094d0:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80094d2:	4b30      	ldr	r3, [pc, #192]	; (8009594 <Left_Velo_Control+0xfc>)
 80094d4:	f04f 0200 	mov.w	r2, #0
 80094d8:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80094da:	4b2c      	ldr	r3, [pc, #176]	; (800958c <Left_Velo_Control+0xf4>)
 80094dc:	2201      	movs	r2, #1
 80094de:	701a      	strb	r2, [r3, #0]
	e = target - now;
 80094e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80094e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80094e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094ec:	edc7 7a07 	vstr	s15, [r7, #28]
	ei += e * T;
 80094f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80094f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80094f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80094fc:	4b24      	ldr	r3, [pc, #144]	; (8009590 <Left_Velo_Control+0xf8>)
 80094fe:	edd3 7a00 	vldr	s15, [r3]
 8009502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009506:	4b22      	ldr	r3, [pc, #136]	; (8009590 <Left_Velo_Control+0xf8>)
 8009508:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 800950c:	4b21      	ldr	r3, [pc, #132]	; (8009594 <Left_Velo_Control+0xfc>)
 800950e:	edd3 7a00 	vldr	s15, [r3]
 8009512:	ed97 7a07 	vldr	s14, [r7, #28]
 8009516:	ee77 6a67 	vsub.f32	s13, s14, s15
 800951a:	ed97 7a03 	vldr	s14, [r7, #12]
 800951e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009522:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 8009526:	4a1b      	ldr	r2, [pc, #108]	; (8009594 <Left_Velo_Control+0xfc>)
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	6013      	str	r3, [r2, #0]

	L_velo_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 800952c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009530:	edd7 7a07 	vldr	s15, [r7, #28]
 8009534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009538:	4b15      	ldr	r3, [pc, #84]	; (8009590 <Left_Velo_Control+0xf8>)
 800953a:	edd3 6a00 	vldr	s13, [r3]
 800953e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009546:	ee37 7a27 	vadd.f32	s14, s14, s15
 800954a:	edd7 6a00 	vldr	s13, [r7]
 800954e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800955a:	ee17 0a90 	vmov	r0, s15
 800955e:	f7fe ff2b 	bl	80083b8 <__aeabi_f2d>
 8009562:	4603      	mov	r3, r0
 8009564:	460c      	mov	r4, r1
 8009566:	ec44 3b10 	vmov	d0, r3, r4
 800956a:	f00c f8d5 	bl	8015718 <round>
 800956e:	ec54 3b10 	vmov	r3, r4, d0
 8009572:	4618      	mov	r0, r3
 8009574:	4621      	mov	r1, r4
 8009576:	f7ff fa27 	bl	80089c8 <__aeabi_d2iz>
 800957a:	4603      	mov	r3, r0
 800957c:	b21a      	sxth	r2, r3
 800957e:	4b06      	ldr	r3, [pc, #24]	; (8009598 <Left_Velo_Control+0x100>)
 8009580:	801a      	strh	r2, [r3, #0]
}
 8009582:	bf00      	nop
 8009584:	3724      	adds	r7, #36	; 0x24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd90      	pop	{r4, r7, pc}
 800958a:	bf00      	nop
 800958c:	2000027c 	.word	0x2000027c
 8009590:	200002a8 	.word	0x200002a8
 8009594:	200002ac 	.word	0x200002ac
 8009598:	2000439e 	.word	0x2000439e

0800959c <Enc_Velo_Control>:
	R_rotate = (int16_t)round(KP*e_R + KI*ei_R + KD*ed_R);
	L_rotate = (int16_t)round(KP*e_L + KI*ei_L + KD*ed_L);

}

void Enc_Velo_Control(float T, float KP, float KI, float KD){
 800959c:	b590      	push	{r4, r7, lr}
 800959e:	b087      	sub	sp, #28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80095a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80095aa:	ed87 1a01 	vstr	s2, [r7, #4]
 80095ae:	edc7 1a00 	vstr	s3, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 80095b2:	f04f 0300 	mov.w	r3, #0
 80095b6:	617b      	str	r3, [r7, #20]
 80095b8:	f04f 0300 	mov.w	r3, #0
 80095bc:	613b      	str	r3, [r7, #16]
	if(error_reset == 0){
 80095be:	4b4a      	ldr	r3, [pc, #296]	; (80096e8 <Enc_Velo_Control+0x14c>)
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d107      	bne.n	80095d6 <Enc_Velo_Control+0x3a>
		ei =0;
 80095c6:	4b49      	ldr	r3, [pc, #292]	; (80096ec <Enc_Velo_Control+0x150>)
 80095c8:	f04f 0200 	mov.w	r2, #0
 80095cc:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80095ce:	4b48      	ldr	r3, [pc, #288]	; (80096f0 <Enc_Velo_Control+0x154>)
 80095d0:	f04f 0200 	mov.w	r2, #0
 80095d4:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80095d6:	4b44      	ldr	r3, [pc, #272]	; (80096e8 <Enc_Velo_Control+0x14c>)
 80095d8:	2201      	movs	r2, #1
 80095da:	701a      	strb	r2, [r3, #0]
	e = L_velocity - R_velocity;
 80095dc:	4b45      	ldr	r3, [pc, #276]	; (80096f4 <Enc_Velo_Control+0x158>)
 80095de:	ed93 7a00 	vldr	s14, [r3]
 80095e2:	4b45      	ldr	r3, [pc, #276]	; (80096f8 <Enc_Velo_Control+0x15c>)
 80095e4:	edd3 7a00 	vldr	s15, [r3]
 80095e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095ec:	edc7 7a05 	vstr	s15, [r7, #20]
	ei += e * T;
 80095f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80095f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80095f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80095fc:	4b3b      	ldr	r3, [pc, #236]	; (80096ec <Enc_Velo_Control+0x150>)
 80095fe:	edd3 7a00 	vldr	s15, [r3]
 8009602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009606:	4b39      	ldr	r3, [pc, #228]	; (80096ec <Enc_Velo_Control+0x150>)
 8009608:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 800960c:	4b38      	ldr	r3, [pc, #224]	; (80096f0 <Enc_Velo_Control+0x154>)
 800960e:	edd3 7a00 	vldr	s15, [r3]
 8009612:	ed97 7a05 	vldr	s14, [r7, #20]
 8009616:	ee77 6a67 	vsub.f32	s13, s14, s15
 800961a:	ed97 7a03 	vldr	s14, [r7, #12]
 800961e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009622:	edc7 7a04 	vstr	s15, [r7, #16]
	e0 = e;
 8009626:	4a32      	ldr	r2, [pc, #200]	; (80096f0 <Enc_Velo_Control+0x154>)
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	6013      	str	r3, [r2, #0]

	R_env_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 800962c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009630:	edd7 7a05 	vldr	s15, [r7, #20]
 8009634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009638:	4b2c      	ldr	r3, [pc, #176]	; (80096ec <Enc_Velo_Control+0x150>)
 800963a:	edd3 6a00 	vldr	s13, [r3]
 800963e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800964a:	edd7 6a00 	vldr	s13, [r7]
 800964e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800965a:	ee17 0a90 	vmov	r0, s15
 800965e:	f7fe feab 	bl	80083b8 <__aeabi_f2d>
 8009662:	4603      	mov	r3, r0
 8009664:	460c      	mov	r4, r1
 8009666:	ec44 3b10 	vmov	d0, r3, r4
 800966a:	f00c f855 	bl	8015718 <round>
 800966e:	ec54 3b10 	vmov	r3, r4, d0
 8009672:	4618      	mov	r0, r3
 8009674:	4621      	mov	r1, r4
 8009676:	f7ff f9a7 	bl	80089c8 <__aeabi_d2iz>
 800967a:	4603      	mov	r3, r0
 800967c:	b21a      	sxth	r2, r3
 800967e:	4b1f      	ldr	r3, [pc, #124]	; (80096fc <Enc_Velo_Control+0x160>)
 8009680:	801a      	strh	r2, [r3, #0]
	L_env_control = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8009682:	ed97 7a02 	vldr	s14, [r7, #8]
 8009686:	edd7 7a05 	vldr	s15, [r7, #20]
 800968a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800968e:	4b17      	ldr	r3, [pc, #92]	; (80096ec <Enc_Velo_Control+0x150>)
 8009690:	edd3 6a00 	vldr	s13, [r3]
 8009694:	edd7 7a01 	vldr	s15, [r7, #4]
 8009698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800969c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80096a0:	edd7 6a00 	vldr	s13, [r7]
 80096a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80096a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096b0:	ee17 0a90 	vmov	r0, s15
 80096b4:	f7fe fe80 	bl	80083b8 <__aeabi_f2d>
 80096b8:	4603      	mov	r3, r0
 80096ba:	460c      	mov	r4, r1
 80096bc:	ec44 3b10 	vmov	d0, r3, r4
 80096c0:	f00c f82a 	bl	8015718 <round>
 80096c4:	ec54 3b10 	vmov	r3, r4, d0
 80096c8:	4618      	mov	r0, r3
 80096ca:	4621      	mov	r1, r4
 80096cc:	f7ff f97c 	bl	80089c8 <__aeabi_d2iz>
 80096d0:	4603      	mov	r3, r0
 80096d2:	b21b      	sxth	r3, r3
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	425b      	negs	r3, r3
 80096d8:	b29b      	uxth	r3, r3
 80096da:	b21a      	sxth	r2, r3
 80096dc:	4b08      	ldr	r3, [pc, #32]	; (8009700 <Enc_Velo_Control+0x164>)
 80096de:	801a      	strh	r2, [r3, #0]
}
 80096e0:	bf00      	nop
 80096e2:	371c      	adds	r7, #28
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd90      	pop	{r4, r7, pc}
 80096e8:	2000027c 	.word	0x2000027c
 80096ec:	200002b0 	.word	0x200002b0
 80096f0:	200002b4 	.word	0x200002b4
 80096f4:	20004398 	.word	0x20004398
 80096f8:	200043a4 	.word	0x200043a4
 80096fc:	20004388 	.word	0x20004388
 8009700:	2000437a 	.word	0x2000437a

08009704 <read_byte>:
#include "ICM_20648.h"

volatile int16_t	xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	4603      	mov	r3, r0
 800970c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800970e:	79fb      	ldrb	r3, [r7, #7]
 8009710:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009714:	b2db      	uxtb	r3, r3
 8009716:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8009718:	2200      	movs	r2, #0
 800971a:	2104      	movs	r1, #4
 800971c:	480d      	ldr	r0, [pc, #52]	; (8009754 <read_byte+0x50>)
 800971e:	f008 fe2b 	bl	8012378 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8009722:	f107 010f 	add.w	r1, r7, #15
 8009726:	2364      	movs	r3, #100	; 0x64
 8009728:	2201      	movs	r2, #1
 800972a:	480b      	ldr	r0, [pc, #44]	; (8009758 <read_byte+0x54>)
 800972c:	f009 fb04 	bl	8012d38 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 8009730:	f107 010e 	add.w	r1, r7, #14
 8009734:	2364      	movs	r3, #100	; 0x64
 8009736:	2201      	movs	r2, #1
 8009738:	4807      	ldr	r0, [pc, #28]	; (8009758 <read_byte+0x54>)
 800973a:	f009 fc31 	bl	8012fa0 <HAL_SPI_Receive>
	CS_SET;
 800973e:	2201      	movs	r2, #1
 8009740:	2104      	movs	r1, #4
 8009742:	4804      	ldr	r0, [pc, #16]	; (8009754 <read_byte+0x50>)
 8009744:	f008 fe18 	bl	8012378 <HAL_GPIO_WritePin>

	return val;
 8009748:	7bbb      	ldrb	r3, [r7, #14]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	40020c00 	.word	0x40020c00
 8009758:	20004524 	.word	0x20004524

0800975c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	460a      	mov	r2, r1
 8009766:	71fb      	strb	r3, [r7, #7]
 8009768:	4613      	mov	r3, r2
 800976a:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009772:	b2db      	uxtb	r3, r3
 8009774:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8009776:	2200      	movs	r2, #0
 8009778:	2104      	movs	r1, #4
 800977a:	480c      	ldr	r0, [pc, #48]	; (80097ac <write_byte+0x50>)
 800977c:	f008 fdfc 	bl	8012378 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8009780:	f107 010f 	add.w	r1, r7, #15
 8009784:	2364      	movs	r3, #100	; 0x64
 8009786:	2201      	movs	r2, #1
 8009788:	4809      	ldr	r0, [pc, #36]	; (80097b0 <write_byte+0x54>)
 800978a:	f009 fad5 	bl	8012d38 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800978e:	1db9      	adds	r1, r7, #6
 8009790:	2364      	movs	r3, #100	; 0x64
 8009792:	2201      	movs	r2, #1
 8009794:	4806      	ldr	r0, [pc, #24]	; (80097b0 <write_byte+0x54>)
 8009796:	f009 facf 	bl	8012d38 <HAL_SPI_Transmit>
	CS_SET;
 800979a:	2201      	movs	r2, #1
 800979c:	2104      	movs	r1, #4
 800979e:	4803      	ldr	r0, [pc, #12]	; (80097ac <write_byte+0x50>)
 80097a0:	f008 fdea 	bl	8012378 <HAL_GPIO_WritePin>
}
 80097a4:	bf00      	nop
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	40020c00 	.word	0x40020c00
 80097b0:	20004524 	.word	0x20004524

080097b4 <IMU_init>:

uint8_t IMU_init() {
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80097ba:	2000      	movs	r0, #0
 80097bc:	f7ff ffa2 	bl	8009704 <read_byte>
 80097c0:	4603      	mov	r3, r0
 80097c2:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 80097c4:	79bb      	ldrb	r3, [r7, #6]
 80097c6:	2be0      	cmp	r3, #224	; 0xe0
 80097c8:	d119      	bne.n	80097fe <IMU_init+0x4a>
		ret = 1;
 80097ca:	2301      	movs	r3, #1
 80097cc:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80097ce:	2101      	movs	r1, #1
 80097d0:	2006      	movs	r0, #6
 80097d2:	f7ff ffc3 	bl	800975c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80097d6:	2110      	movs	r1, #16
 80097d8:	2003      	movs	r0, #3
 80097da:	f7ff ffbf 	bl	800975c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80097de:	2120      	movs	r1, #32
 80097e0:	207f      	movs	r0, #127	; 0x7f
 80097e2:	f7ff ffbb 	bl	800975c <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 80097e6:	2117      	movs	r1, #23
 80097e8:	2001      	movs	r0, #1
 80097ea:	f7ff ffb7 	bl	800975c <write_byte>

		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//	レンジ±16g
 80097ee:	2106      	movs	r1, #6
 80097f0:	2014      	movs	r0, #20
 80097f2:	f7ff ffb3 	bl	800975c <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80097f6:	2100      	movs	r1, #0
 80097f8:	207f      	movs	r0, #127	; 0x7f
 80097fa:	f7ff ffaf 	bl	800975c <write_byte>
	}
	return ret;
 80097fe:	79fb      	ldrb	r3, [r7, #7]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <read_gyro_data>:

void read_gyro_data() {
 8009808:	b598      	push	{r3, r4, r7, lr}
 800980a:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 800980c:	2033      	movs	r0, #51	; 0x33
 800980e:	f7ff ff79 	bl	8009704 <read_byte>
 8009812:	4603      	mov	r3, r0
 8009814:	021b      	lsls	r3, r3, #8
 8009816:	b21c      	sxth	r4, r3
 8009818:	2034      	movs	r0, #52	; 0x34
 800981a:	f7ff ff73 	bl	8009704 <read_byte>
 800981e:	4603      	mov	r3, r0
 8009820:	b21b      	sxth	r3, r3
 8009822:	4323      	orrs	r3, r4
 8009824:	b21a      	sxth	r2, r3
 8009826:	4b11      	ldr	r3, [pc, #68]	; (800986c <read_gyro_data+0x64>)
 8009828:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 800982a:	2035      	movs	r0, #53	; 0x35
 800982c:	f7ff ff6a 	bl	8009704 <read_byte>
 8009830:	4603      	mov	r3, r0
 8009832:	021b      	lsls	r3, r3, #8
 8009834:	b21c      	sxth	r4, r3
 8009836:	2036      	movs	r0, #54	; 0x36
 8009838:	f7ff ff64 	bl	8009704 <read_byte>
 800983c:	4603      	mov	r3, r0
 800983e:	b21b      	sxth	r3, r3
 8009840:	4323      	orrs	r3, r4
 8009842:	b21a      	sxth	r2, r3
 8009844:	4b0a      	ldr	r3, [pc, #40]	; (8009870 <read_gyro_data+0x68>)
 8009846:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8009848:	2037      	movs	r0, #55	; 0x37
 800984a:	f7ff ff5b 	bl	8009704 <read_byte>
 800984e:	4603      	mov	r3, r0
 8009850:	021b      	lsls	r3, r3, #8
 8009852:	b21c      	sxth	r4, r3
 8009854:	2038      	movs	r0, #56	; 0x38
 8009856:	f7ff ff55 	bl	8009704 <read_byte>
 800985a:	4603      	mov	r3, r0
 800985c:	b21b      	sxth	r3, r3
 800985e:	4323      	orrs	r3, r4
 8009860:	b21a      	sxth	r2, r3
 8009862:	4b04      	ldr	r3, [pc, #16]	; (8009874 <read_gyro_data+0x6c>)
 8009864:	801a      	strh	r2, [r3, #0]
}
 8009866:	bf00      	nop
 8009868:	bd98      	pop	{r3, r4, r7, pc}
 800986a:	bf00      	nop
 800986c:	200043b2 	.word	0x200043b2
 8009870:	200043b0 	.word	0x200043b0
 8009874:	200043aa 	.word	0x200043aa

08009878 <read_accel_data>:

void read_accel_data() {
 8009878:	b598      	push	{r3, r4, r7, lr}
 800987a:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 800987c:	202d      	movs	r0, #45	; 0x2d
 800987e:	f7ff ff41 	bl	8009704 <read_byte>
 8009882:	4603      	mov	r3, r0
 8009884:	021b      	lsls	r3, r3, #8
 8009886:	b21c      	sxth	r4, r3
 8009888:	202e      	movs	r0, #46	; 0x2e
 800988a:	f7ff ff3b 	bl	8009704 <read_byte>
 800988e:	4603      	mov	r3, r0
 8009890:	b21b      	sxth	r3, r3
 8009892:	4323      	orrs	r3, r4
 8009894:	b21a      	sxth	r2, r3
 8009896:	4b11      	ldr	r3, [pc, #68]	; (80098dc <read_accel_data+0x64>)
 8009898:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 800989a:	202f      	movs	r0, #47	; 0x2f
 800989c:	f7ff ff32 	bl	8009704 <read_byte>
 80098a0:	4603      	mov	r3, r0
 80098a2:	021b      	lsls	r3, r3, #8
 80098a4:	b21c      	sxth	r4, r3
 80098a6:	2030      	movs	r0, #48	; 0x30
 80098a8:	f7ff ff2c 	bl	8009704 <read_byte>
 80098ac:	4603      	mov	r3, r0
 80098ae:	b21b      	sxth	r3, r3
 80098b0:	4323      	orrs	r3, r4
 80098b2:	b21a      	sxth	r2, r3
 80098b4:	4b0a      	ldr	r3, [pc, #40]	; (80098e0 <read_accel_data+0x68>)
 80098b6:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 80098b8:	2031      	movs	r0, #49	; 0x31
 80098ba:	f7ff ff23 	bl	8009704 <read_byte>
 80098be:	4603      	mov	r3, r0
 80098c0:	021b      	lsls	r3, r3, #8
 80098c2:	b21c      	sxth	r4, r3
 80098c4:	2032      	movs	r0, #50	; 0x32
 80098c6:	f7ff ff1d 	bl	8009704 <read_byte>
 80098ca:	4603      	mov	r3, r0
 80098cc:	b21b      	sxth	r3, r3
 80098ce:	4323      	orrs	r3, r4
 80098d0:	b21a      	sxth	r2, r3
 80098d2:	4b04      	ldr	r3, [pc, #16]	; (80098e4 <read_accel_data+0x6c>)
 80098d4:	801a      	strh	r2, [r3, #0]
}
 80098d6:	bf00      	nop
 80098d8:	bd98      	pop	{r3, r4, r7, pc}
 80098da:	bf00      	nop
 80098dc:	200043ae 	.word	0x200043ae
 80098e0:	200043b4 	.word	0x200043b4
 80098e4:	200043ac 	.word	0x200043ac

080098e8 <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 80098f0:	1d39      	adds	r1, r7, #4
 80098f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098f6:	2201      	movs	r2, #1
 80098f8:	4803      	ldr	r0, [pc, #12]	; (8009908 <__io_putchar+0x20>)
 80098fa:	f00b faad 	bl	8014e58 <HAL_UART_Transmit>
	return ch;
 80098fe:	687b      	ldr	r3, [r7, #4]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	200045cc 	.word	0x200045cc

0800990c <Motor_Count_Clear>:
	*R_counter = round(567 * R_Volt);
	*L_counter = round(567 * L_Volt);

}

void Motor_Count_Clear(){
 800990c:	b480      	push	{r7}
 800990e:	af00      	add	r7, sp, #0
	 L_motor = L_v_control =  L_wall = L_leftwall = L_rightwall = L_rotate = L_angular_velocity = L_env_control = L_velo_control = 0;
 8009910:	4b2d      	ldr	r3, [pc, #180]	; (80099c8 <Motor_Count_Clear+0xbc>)
 8009912:	2200      	movs	r2, #0
 8009914:	801a      	strh	r2, [r3, #0]
 8009916:	4b2c      	ldr	r3, [pc, #176]	; (80099c8 <Motor_Count_Clear+0xbc>)
 8009918:	f9b3 2000 	ldrsh.w	r2, [r3]
 800991c:	4b2b      	ldr	r3, [pc, #172]	; (80099cc <Motor_Count_Clear+0xc0>)
 800991e:	801a      	strh	r2, [r3, #0]
 8009920:	4b2a      	ldr	r3, [pc, #168]	; (80099cc <Motor_Count_Clear+0xc0>)
 8009922:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009926:	4b2a      	ldr	r3, [pc, #168]	; (80099d0 <Motor_Count_Clear+0xc4>)
 8009928:	801a      	strh	r2, [r3, #0]
 800992a:	4b29      	ldr	r3, [pc, #164]	; (80099d0 <Motor_Count_Clear+0xc4>)
 800992c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009930:	4b28      	ldr	r3, [pc, #160]	; (80099d4 <Motor_Count_Clear+0xc8>)
 8009932:	801a      	strh	r2, [r3, #0]
 8009934:	4b27      	ldr	r3, [pc, #156]	; (80099d4 <Motor_Count_Clear+0xc8>)
 8009936:	f9b3 2000 	ldrsh.w	r2, [r3]
 800993a:	4b27      	ldr	r3, [pc, #156]	; (80099d8 <Motor_Count_Clear+0xcc>)
 800993c:	801a      	strh	r2, [r3, #0]
 800993e:	4b26      	ldr	r3, [pc, #152]	; (80099d8 <Motor_Count_Clear+0xcc>)
 8009940:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009944:	4b25      	ldr	r3, [pc, #148]	; (80099dc <Motor_Count_Clear+0xd0>)
 8009946:	801a      	strh	r2, [r3, #0]
 8009948:	4b24      	ldr	r3, [pc, #144]	; (80099dc <Motor_Count_Clear+0xd0>)
 800994a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800994e:	4b24      	ldr	r3, [pc, #144]	; (80099e0 <Motor_Count_Clear+0xd4>)
 8009950:	801a      	strh	r2, [r3, #0]
 8009952:	4b23      	ldr	r3, [pc, #140]	; (80099e0 <Motor_Count_Clear+0xd4>)
 8009954:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009958:	4b22      	ldr	r3, [pc, #136]	; (80099e4 <Motor_Count_Clear+0xd8>)
 800995a:	801a      	strh	r2, [r3, #0]
 800995c:	4b21      	ldr	r3, [pc, #132]	; (80099e4 <Motor_Count_Clear+0xd8>)
 800995e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009962:	4b21      	ldr	r3, [pc, #132]	; (80099e8 <Motor_Count_Clear+0xdc>)
 8009964:	801a      	strh	r2, [r3, #0]
	 R_motor = R_v_control = R_wall = R_leftwall = R_rightwall = R_rotate = R_angular_velocity = R_env_control = R_velo_control = 0;
 8009966:	4b21      	ldr	r3, [pc, #132]	; (80099ec <Motor_Count_Clear+0xe0>)
 8009968:	2200      	movs	r2, #0
 800996a:	801a      	strh	r2, [r3, #0]
 800996c:	4b1f      	ldr	r3, [pc, #124]	; (80099ec <Motor_Count_Clear+0xe0>)
 800996e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009972:	4b1f      	ldr	r3, [pc, #124]	; (80099f0 <Motor_Count_Clear+0xe4>)
 8009974:	801a      	strh	r2, [r3, #0]
 8009976:	4b1e      	ldr	r3, [pc, #120]	; (80099f0 <Motor_Count_Clear+0xe4>)
 8009978:	f9b3 2000 	ldrsh.w	r2, [r3]
 800997c:	4b1d      	ldr	r3, [pc, #116]	; (80099f4 <Motor_Count_Clear+0xe8>)
 800997e:	801a      	strh	r2, [r3, #0]
 8009980:	4b1c      	ldr	r3, [pc, #112]	; (80099f4 <Motor_Count_Clear+0xe8>)
 8009982:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009986:	4b1c      	ldr	r3, [pc, #112]	; (80099f8 <Motor_Count_Clear+0xec>)
 8009988:	801a      	strh	r2, [r3, #0]
 800998a:	4b1b      	ldr	r3, [pc, #108]	; (80099f8 <Motor_Count_Clear+0xec>)
 800998c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009990:	4b1a      	ldr	r3, [pc, #104]	; (80099fc <Motor_Count_Clear+0xf0>)
 8009992:	801a      	strh	r2, [r3, #0]
 8009994:	4b19      	ldr	r3, [pc, #100]	; (80099fc <Motor_Count_Clear+0xf0>)
 8009996:	f9b3 2000 	ldrsh.w	r2, [r3]
 800999a:	4b19      	ldr	r3, [pc, #100]	; (8009a00 <Motor_Count_Clear+0xf4>)
 800999c:	801a      	strh	r2, [r3, #0]
 800999e:	4b18      	ldr	r3, [pc, #96]	; (8009a00 <Motor_Count_Clear+0xf4>)
 80099a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099a4:	4b17      	ldr	r3, [pc, #92]	; (8009a04 <Motor_Count_Clear+0xf8>)
 80099a6:	801a      	strh	r2, [r3, #0]
 80099a8:	4b16      	ldr	r3, [pc, #88]	; (8009a04 <Motor_Count_Clear+0xf8>)
 80099aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099ae:	4b16      	ldr	r3, [pc, #88]	; (8009a08 <Motor_Count_Clear+0xfc>)
 80099b0:	801a      	strh	r2, [r3, #0]
 80099b2:	4b15      	ldr	r3, [pc, #84]	; (8009a08 <Motor_Count_Clear+0xfc>)
 80099b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099b8:	4b14      	ldr	r3, [pc, #80]	; (8009a0c <Motor_Count_Clear+0x100>)
 80099ba:	801a      	strh	r2, [r3, #0]
}
 80099bc:	bf00      	nop
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	2000439e 	.word	0x2000439e
 80099cc:	2000437a 	.word	0x2000437a
 80099d0:	2000438e 	.word	0x2000438e
 80099d4:	20004394 	.word	0x20004394
 80099d8:	20004378 	.word	0x20004378
 80099dc:	20004386 	.word	0x20004386
 80099e0:	2000439c 	.word	0x2000439c
 80099e4:	20004384 	.word	0x20004384
 80099e8:	200051f4 	.word	0x200051f4
 80099ec:	2000437c 	.word	0x2000437c
 80099f0:	20004388 	.word	0x20004388
 80099f4:	20004392 	.word	0x20004392
 80099f8:	20004396 	.word	0x20004396
 80099fc:	20004390 	.word	0x20004390
 8009a00:	200043a8 	.word	0x200043a8
 8009a04:	2000438a 	.word	0x2000438a
 8009a08:	2000438c 	.word	0x2000438c
 8009a0c:	20004494 	.word	0x20004494

08009a10 <Tim_Count>:

void Tim_Count(){
 8009a10:	b598      	push	{r3, r4, r7, lr}
 8009a12:	af00      	add	r7, sp, #0


	if(mode.select%2 != 1){
 8009a14:	4b19      	ldr	r3, [pc, #100]	; (8009a7c <Tim_Count+0x6c>)
 8009a16:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	bfb8      	it	lt
 8009a22:	425b      	neglt	r3, r3
 8009a24:	b25b      	sxtb	r3, r3
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d025      	beq.n	8009a76 <Tim_Count+0x66>
		timer += 1;
 8009a2a:	4b15      	ldr	r3, [pc, #84]	; (8009a80 <Tim_Count+0x70>)
 8009a2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a30:	f04f 0200 	mov.w	r2, #0
 8009a34:	4b13      	ldr	r3, [pc, #76]	; (8009a84 <Tim_Count+0x74>)
 8009a36:	f7fe fb61 	bl	80080fc <__adddf3>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	4a10      	ldr	r2, [pc, #64]	; (8009a80 <Tim_Count+0x70>)
 8009a40:	e9c2 3400 	strd	r3, r4, [r2]
		if(timer == 1000){
 8009a44:	4b0e      	ldr	r3, [pc, #56]	; (8009a80 <Tim_Count+0x70>)
 8009a46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a4a:	f04f 0200 	mov.w	r2, #0
 8009a4e:	4b0e      	ldr	r3, [pc, #56]	; (8009a88 <Tim_Count+0x78>)
 8009a50:	f7fe ff72 	bl	8008938 <__aeabi_dcmpeq>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d100      	bne.n	8009a5c <Tim_Count+0x4c>
			self_timer ++;
		}
	}

}
 8009a5a:	e00c      	b.n	8009a76 <Tim_Count+0x66>
			self_timer ++;
 8009a5c:	4b0b      	ldr	r3, [pc, #44]	; (8009a8c <Tim_Count+0x7c>)
 8009a5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a62:	f04f 0200 	mov.w	r2, #0
 8009a66:	4b07      	ldr	r3, [pc, #28]	; (8009a84 <Tim_Count+0x74>)
 8009a68:	f7fe fb48 	bl	80080fc <__adddf3>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	460c      	mov	r4, r1
 8009a70:	4a06      	ldr	r2, [pc, #24]	; (8009a8c <Tim_Count+0x7c>)
 8009a72:	e9c2 3400 	strd	r3, r4, [r2]
}
 8009a76:	bf00      	nop
 8009a78:	bd98      	pop	{r3, r4, r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20000074 	.word	0x20000074
 8009a80:	200002e8 	.word	0x200002e8
 8009a84:	3ff00000 	.word	0x3ff00000
 8009a88:	408f4000 	.word	0x408f4000
 8009a8c:	200002e0 	.word	0x200002e0

08009a90 <map_init>:

void map_init(){
 8009a90:	b4b0      	push	{r4, r5, r7}
 8009a92:	af00      	add	r7, sp, #0
	static int i = 0, j=0;

	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009a94:	4b35      	ldr	r3, [pc, #212]	; (8009b6c <map_init+0xdc>)
 8009a96:	2200      	movs	r2, #0
 8009a98:	601a      	str	r2, [r3, #0]
 8009a9a:	e05e      	b.n	8009b5a <map_init+0xca>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009a9c:	4b34      	ldr	r3, [pc, #208]	; (8009b70 <map_init+0xe0>)
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	601a      	str	r2, [r3, #0]
 8009aa2:	e051      	b.n	8009b48 <map_init+0xb8>
			wall[i][j].north
			= wall[i][j].east
			= wall[i][j].south
			= wall[i][j].west = UNKNOWN;
 8009aa4:	4b31      	ldr	r3, [pc, #196]	; (8009b6c <map_init+0xdc>)
 8009aa6:	6819      	ldr	r1, [r3, #0]
 8009aa8:	4b31      	ldr	r3, [pc, #196]	; (8009b70 <map_init+0xe0>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	4c31      	ldr	r4, [pc, #196]	; (8009b74 <map_init+0xe4>)
 8009aae:	010b      	lsls	r3, r1, #4
 8009ab0:	1898      	adds	r0, r3, r2
 8009ab2:	f814 3010 	ldrb.w	r3, [r4, r0, lsl #1]
 8009ab6:	2502      	movs	r5, #2
 8009ab8:	f365 1387 	bfi	r3, r5, #6, #2
 8009abc:	f804 3010 	strb.w	r3, [r4, r0, lsl #1]
			= wall[i][j].south
 8009ac0:	4b2a      	ldr	r3, [pc, #168]	; (8009b6c <map_init+0xdc>)
 8009ac2:	681c      	ldr	r4, [r3, #0]
 8009ac4:	4b2a      	ldr	r3, [pc, #168]	; (8009b70 <map_init+0xe0>)
 8009ac6:	6818      	ldr	r0, [r3, #0]
			= wall[i][j].west = UNKNOWN;
 8009ac8:	4d2a      	ldr	r5, [pc, #168]	; (8009b74 <map_init+0xe4>)
 8009aca:	010b      	lsls	r3, r1, #4
 8009acc:	4413      	add	r3, r2
 8009ace:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 8009ad2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009ad6:	b2dd      	uxtb	r5, r3
 8009ad8:	4926      	ldr	r1, [pc, #152]	; (8009b74 <map_init+0xe4>)
 8009ada:	0123      	lsls	r3, r4, #4
 8009adc:	181a      	adds	r2, r3, r0
 8009ade:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 8009ae2:	f365 1305 	bfi	r3, r5, #4, #2
 8009ae6:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			= wall[i][j].east
 8009aea:	4b20      	ldr	r3, [pc, #128]	; (8009b6c <map_init+0xdc>)
 8009aec:	6819      	ldr	r1, [r3, #0]
 8009aee:	4b20      	ldr	r3, [pc, #128]	; (8009b70 <map_init+0xe0>)
 8009af0:	681a      	ldr	r2, [r3, #0]
			= wall[i][j].south
 8009af2:	4d20      	ldr	r5, [pc, #128]	; (8009b74 <map_init+0xe4>)
 8009af4:	0123      	lsls	r3, r4, #4
 8009af6:	4403      	add	r3, r0
 8009af8:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 8009afc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009b00:	b2dd      	uxtb	r5, r3
 8009b02:	4c1c      	ldr	r4, [pc, #112]	; (8009b74 <map_init+0xe4>)
 8009b04:	010b      	lsls	r3, r1, #4
 8009b06:	1898      	adds	r0, r3, r2
 8009b08:	f814 3010 	ldrb.w	r3, [r4, r0, lsl #1]
 8009b0c:	f365 0383 	bfi	r3, r5, #2, #2
 8009b10:	f804 3010 	strb.w	r3, [r4, r0, lsl #1]
			wall[i][j].north
 8009b14:	4b15      	ldr	r3, [pc, #84]	; (8009b6c <map_init+0xdc>)
 8009b16:	681c      	ldr	r4, [r3, #0]
 8009b18:	4b15      	ldr	r3, [pc, #84]	; (8009b70 <map_init+0xe0>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
			= wall[i][j].east
 8009b1c:	4815      	ldr	r0, [pc, #84]	; (8009b74 <map_init+0xe4>)
 8009b1e:	0109      	lsls	r1, r1, #4
 8009b20:	440a      	add	r2, r1
 8009b22:	f810 2012 	ldrb.w	r2, [r0, r2, lsl #1]
 8009b26:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8009b2a:	b2d0      	uxtb	r0, r2
 8009b2c:	4911      	ldr	r1, [pc, #68]	; (8009b74 <map_init+0xe4>)
 8009b2e:	0122      	lsls	r2, r4, #4
 8009b30:	441a      	add	r2, r3
 8009b32:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 8009b36:	f360 0301 	bfi	r3, r0, #0, #2
 8009b3a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009b3e:	4b0c      	ldr	r3, [pc, #48]	; (8009b70 <map_init+0xe0>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	3301      	adds	r3, #1
 8009b44:	4a0a      	ldr	r2, [pc, #40]	; (8009b70 <map_init+0xe0>)
 8009b46:	6013      	str	r3, [r2, #0]
 8009b48:	4b09      	ldr	r3, [pc, #36]	; (8009b70 <map_init+0xe0>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b0f      	cmp	r3, #15
 8009b4e:	dda9      	ble.n	8009aa4 <map_init+0x14>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009b50:	4b06      	ldr	r3, [pc, #24]	; (8009b6c <map_init+0xdc>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3301      	adds	r3, #1
 8009b56:	4a05      	ldr	r2, [pc, #20]	; (8009b6c <map_init+0xdc>)
 8009b58:	6013      	str	r3, [r2, #0]
 8009b5a:	4b04      	ldr	r3, [pc, #16]	; (8009b6c <map_init+0xdc>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b0f      	cmp	r3, #15
 8009b60:	dd9c      	ble.n	8009a9c <map_init+0xc>

		}

	}
}
 8009b62:	bf00      	nop
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bcb0      	pop	{r4, r5, r7}
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	20004318 	.word	0x20004318
 8009b70:	2000431c 	.word	0x2000431c
 8009b74:	20004fb4 	.word	0x20004fb4

08009b78 <mapcopy>:

void mapcopy(){
 8009b78:	b480      	push	{r7}
 8009b7a:	af00      	add	r7, sp, #0
		}

	}
#endif

	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009b7c:	4b4b      	ldr	r3, [pc, #300]	; (8009cac <mapcopy+0x134>)
 8009b7e:	220f      	movs	r2, #15
 8009b80:	601a      	str	r2, [r3, #0]
 8009b82:	e05d      	b.n	8009c40 <mapcopy+0xc8>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009b84:	4b4a      	ldr	r3, [pc, #296]	; (8009cb0 <mapcopy+0x138>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	e050      	b.n	8009c2e <mapcopy+0xb6>
			work_ram[k] = wall[i][j].north;
 8009b8c:	4b48      	ldr	r3, [pc, #288]	; (8009cb0 <mapcopy+0x138>)
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	4b46      	ldr	r3, [pc, #280]	; (8009cac <mapcopy+0x134>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4947      	ldr	r1, [pc, #284]	; (8009cb4 <mapcopy+0x13c>)
 8009b96:	0112      	lsls	r2, r2, #4
 8009b98:	4413      	add	r3, r2
 8009b9a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009b9e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	4b44      	ldr	r3, [pc, #272]	; (8009cb8 <mapcopy+0x140>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4611      	mov	r1, r2
 8009baa:	4a44      	ldr	r2, [pc, #272]	; (8009cbc <mapcopy+0x144>)
 8009bac:	54d1      	strb	r1, [r2, r3]
			work_ram[k+1] = wall[i][j].east;
 8009bae:	4b40      	ldr	r3, [pc, #256]	; (8009cb0 <mapcopy+0x138>)
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	4b3e      	ldr	r3, [pc, #248]	; (8009cac <mapcopy+0x134>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	493f      	ldr	r1, [pc, #252]	; (8009cb4 <mapcopy+0x13c>)
 8009bb8:	0112      	lsls	r2, r2, #4
 8009bba:	4413      	add	r3, r2
 8009bbc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009bc0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	4b3c      	ldr	r3, [pc, #240]	; (8009cb8 <mapcopy+0x140>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	4611      	mov	r1, r2
 8009bce:	4a3b      	ldr	r2, [pc, #236]	; (8009cbc <mapcopy+0x144>)
 8009bd0:	54d1      	strb	r1, [r2, r3]
			work_ram[k+2] = wall[i][j].south;
 8009bd2:	4b37      	ldr	r3, [pc, #220]	; (8009cb0 <mapcopy+0x138>)
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	4b35      	ldr	r3, [pc, #212]	; (8009cac <mapcopy+0x134>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4936      	ldr	r1, [pc, #216]	; (8009cb4 <mapcopy+0x13c>)
 8009bdc:	0112      	lsls	r2, r2, #4
 8009bde:	4413      	add	r3, r2
 8009be0:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009be4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	4b33      	ldr	r3, [pc, #204]	; (8009cb8 <mapcopy+0x140>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3302      	adds	r3, #2
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	4a32      	ldr	r2, [pc, #200]	; (8009cbc <mapcopy+0x144>)
 8009bf4:	54d1      	strb	r1, [r2, r3]
			work_ram[k+3] = wall[i][j].west;
 8009bf6:	4b2e      	ldr	r3, [pc, #184]	; (8009cb0 <mapcopy+0x138>)
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	4b2c      	ldr	r3, [pc, #176]	; (8009cac <mapcopy+0x134>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	492d      	ldr	r1, [pc, #180]	; (8009cb4 <mapcopy+0x13c>)
 8009c00:	0112      	lsls	r2, r2, #4
 8009c02:	4413      	add	r3, r2
 8009c04:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009c08:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	4b2a      	ldr	r3, [pc, #168]	; (8009cb8 <mapcopy+0x140>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3303      	adds	r3, #3
 8009c14:	4611      	mov	r1, r2
 8009c16:	4a29      	ldr	r2, [pc, #164]	; (8009cbc <mapcopy+0x144>)
 8009c18:	54d1      	strb	r1, [r2, r3]
			k+=4;
 8009c1a:	4b27      	ldr	r3, [pc, #156]	; (8009cb8 <mapcopy+0x140>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3304      	adds	r3, #4
 8009c20:	4a25      	ldr	r2, [pc, #148]	; (8009cb8 <mapcopy+0x140>)
 8009c22:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009c24:	4b22      	ldr	r3, [pc, #136]	; (8009cb0 <mapcopy+0x138>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	4a21      	ldr	r2, [pc, #132]	; (8009cb0 <mapcopy+0x138>)
 8009c2c:	6013      	str	r3, [r2, #0]
 8009c2e:	4b20      	ldr	r3, [pc, #128]	; (8009cb0 <mapcopy+0x138>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2b0f      	cmp	r3, #15
 8009c34:	ddaa      	ble.n	8009b8c <mapcopy+0x14>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009c36:	4b1d      	ldr	r3, [pc, #116]	; (8009cac <mapcopy+0x134>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	4a1b      	ldr	r2, [pc, #108]	; (8009cac <mapcopy+0x134>)
 8009c3e:	6013      	str	r3, [r2, #0]
 8009c40:	4b1a      	ldr	r3, [pc, #104]	; (8009cac <mapcopy+0x134>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	da9d      	bge.n	8009b84 <mapcopy+0xc>
		//要�?は4*NOS*NOS番目 - 1 まで�?ま�?
		//kは60まで行ったあと�?4*NOS*NOS になって値が�?�らず終わ�?

	}

	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009c48:	4b18      	ldr	r3, [pc, #96]	; (8009cac <mapcopy+0x134>)
 8009c4a:	220f      	movs	r2, #15
 8009c4c:	601a      	str	r2, [r3, #0]
 8009c4e:	e023      	b.n	8009c98 <mapcopy+0x120>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009c50:	4b17      	ldr	r3, [pc, #92]	; (8009cb0 <mapcopy+0x138>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	601a      	str	r2, [r3, #0]
 8009c56:	e016      	b.n	8009c86 <mapcopy+0x10e>
			work_ram[k] = walk_map[i][j];
 8009c58:	4b15      	ldr	r3, [pc, #84]	; (8009cb0 <mapcopy+0x138>)
 8009c5a:	6819      	ldr	r1, [r3, #0]
 8009c5c:	4b13      	ldr	r3, [pc, #76]	; (8009cac <mapcopy+0x134>)
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	4b15      	ldr	r3, [pc, #84]	; (8009cb8 <mapcopy+0x140>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4816      	ldr	r0, [pc, #88]	; (8009cc0 <mapcopy+0x148>)
 8009c66:	0109      	lsls	r1, r1, #4
 8009c68:	4401      	add	r1, r0
 8009c6a:	440a      	add	r2, r1
 8009c6c:	7811      	ldrb	r1, [r2, #0]
 8009c6e:	4a13      	ldr	r2, [pc, #76]	; (8009cbc <mapcopy+0x144>)
 8009c70:	54d1      	strb	r1, [r2, r3]
			k+=1;
 8009c72:	4b11      	ldr	r3, [pc, #68]	; (8009cb8 <mapcopy+0x140>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	3301      	adds	r3, #1
 8009c78:	4a0f      	ldr	r2, [pc, #60]	; (8009cb8 <mapcopy+0x140>)
 8009c7a:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009c7c:	4b0c      	ldr	r3, [pc, #48]	; (8009cb0 <mapcopy+0x138>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	3301      	adds	r3, #1
 8009c82:	4a0b      	ldr	r2, [pc, #44]	; (8009cb0 <mapcopy+0x138>)
 8009c84:	6013      	str	r3, [r2, #0]
 8009c86:	4b0a      	ldr	r3, [pc, #40]	; (8009cb0 <mapcopy+0x138>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b0f      	cmp	r3, #15
 8009c8c:	dde4      	ble.n	8009c58 <mapcopy+0xe0>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009c8e:	4b07      	ldr	r3, [pc, #28]	; (8009cac <mapcopy+0x134>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3b01      	subs	r3, #1
 8009c94:	4a05      	ldr	r2, [pc, #20]	; (8009cac <mapcopy+0x134>)
 8009c96:	6013      	str	r3, [r2, #0]
 8009c98:	4b04      	ldr	r3, [pc, #16]	; (8009cac <mapcopy+0x134>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	dad7      	bge.n	8009c50 <mapcopy+0xd8>
//	if(i <= 10){
//		work_ram[i][0] = wall[1][1].east;
//		i++;
//	}
//wall[4][4].south = 64? why
}
 8009ca0:	bf00      	nop
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	20004320 	.word	0x20004320
 8009cb0:	20004324 	.word	0x20004324
 8009cb4:	20004fb4 	.word	0x20004fb4
 8009cb8:	20004328 	.word	0x20004328
 8009cbc:	20000318 	.word	0x20000318
 8009cc0:	20004a58 	.word	0x20004a58

08009cc4 <mapprint>:

void mapprint(){
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	af00      	add	r7, sp, #0

	static int i = 0, j=0,k=0;
#if 1
	//迷路�?報
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009cc8:	4b3f      	ldr	r3, [pc, #252]	; (8009dc8 <mapprint+0x104>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	601a      	str	r2, [r3, #0]
 8009cce:	e041      	b.n	8009d54 <mapprint+0x90>
		for(j=0; j < NUMBER_OF_SQUARES * 4; j++){
 8009cd0:	4b3e      	ldr	r3, [pc, #248]	; (8009dcc <mapprint+0x108>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	601a      	str	r2, [r3, #0]
 8009cd6:	e031      	b.n	8009d3c <mapprint+0x78>
			printf("%u",work_ram[k]);
 8009cd8:	4b3d      	ldr	r3, [pc, #244]	; (8009dd0 <mapprint+0x10c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a3d      	ldr	r2, [pc, #244]	; (8009dd4 <mapprint+0x110>)
 8009cde:	5cd3      	ldrb	r3, [r2, r3]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	483d      	ldr	r0, [pc, #244]	; (8009dd8 <mapprint+0x114>)
 8009ce4:	f00c f9fc 	bl	80160e0 <iprintf>
			if((k+1)%(NUMBER_OF_SQUARES * 4) != 0){
 8009ce8:	4b39      	ldr	r3, [pc, #228]	; (8009dd0 <mapprint+0x10c>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	3301      	adds	r3, #1
 8009cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00e      	beq.n	8009d14 <mapprint+0x50>
			if((k+1) >= 4 && (k+1)%4 == 0)
 8009cf6:	4b36      	ldr	r3, [pc, #216]	; (8009dd0 <mapprint+0x10c>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	2b03      	cmp	r3, #3
 8009cfe:	dd09      	ble.n	8009d14 <mapprint+0x50>
 8009d00:	4b33      	ldr	r3, [pc, #204]	; (8009dd0 <mapprint+0x10c>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3301      	adds	r3, #1
 8009d06:	f003 0303 	and.w	r3, r3, #3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d102      	bne.n	8009d14 <mapprint+0x50>
				printf("  ");
 8009d0e:	4833      	ldr	r0, [pc, #204]	; (8009ddc <mapprint+0x118>)
 8009d10:	f00c f9e6 	bl	80160e0 <iprintf>
			}
			if((k+1)%(NUMBER_OF_SQUARES * 4) == 0){
 8009d14:	4b2e      	ldr	r3, [pc, #184]	; (8009dd0 <mapprint+0x10c>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d102      	bne.n	8009d28 <mapprint+0x64>
				printf("\r\n");
 8009d22:	482f      	ldr	r0, [pc, #188]	; (8009de0 <mapprint+0x11c>)
 8009d24:	f00c fa50 	bl	80161c8 <puts>
			}
			k++;
 8009d28:	4b29      	ldr	r3, [pc, #164]	; (8009dd0 <mapprint+0x10c>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	4a28      	ldr	r2, [pc, #160]	; (8009dd0 <mapprint+0x10c>)
 8009d30:	6013      	str	r3, [r2, #0]
		for(j=0; j < NUMBER_OF_SQUARES * 4; j++){
 8009d32:	4b26      	ldr	r3, [pc, #152]	; (8009dcc <mapprint+0x108>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3301      	adds	r3, #1
 8009d38:	4a24      	ldr	r2, [pc, #144]	; (8009dcc <mapprint+0x108>)
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	4b23      	ldr	r3, [pc, #140]	; (8009dcc <mapprint+0x108>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b3f      	cmp	r3, #63	; 0x3f
 8009d42:	ddc9      	ble.n	8009cd8 <mapprint+0x14>
		}
		printf("\r\n");
 8009d44:	4826      	ldr	r0, [pc, #152]	; (8009de0 <mapprint+0x11c>)
 8009d46:	f00c fa3f 	bl	80161c8 <puts>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009d4a:	4b1f      	ldr	r3, [pc, #124]	; (8009dc8 <mapprint+0x104>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	4a1d      	ldr	r2, [pc, #116]	; (8009dc8 <mapprint+0x104>)
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	4b1c      	ldr	r3, [pc, #112]	; (8009dc8 <mapprint+0x104>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b0f      	cmp	r3, #15
 8009d5a:	ddb9      	ble.n	8009cd0 <mapprint+0xc>
	}

	printf("\r\n");
 8009d5c:	4820      	ldr	r0, [pc, #128]	; (8009de0 <mapprint+0x11c>)
 8009d5e:	f00c fa33 	bl	80161c8 <puts>
	printf("\r\n");
 8009d62:	481f      	ldr	r0, [pc, #124]	; (8009de0 <mapprint+0x11c>)
 8009d64:	f00c fa30 	bl	80161c8 <puts>


	//歩数マッ�?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009d68:	4b17      	ldr	r3, [pc, #92]	; (8009dc8 <mapprint+0x104>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	e024      	b.n	8009dba <mapprint+0xf6>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009d70:	4b16      	ldr	r3, [pc, #88]	; (8009dcc <mapprint+0x108>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	601a      	str	r2, [r3, #0]
 8009d76:	e011      	b.n	8009d9c <mapprint+0xd8>
			printf("%u  ",work_ram[k]);
 8009d78:	4b15      	ldr	r3, [pc, #84]	; (8009dd0 <mapprint+0x10c>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a15      	ldr	r2, [pc, #84]	; (8009dd4 <mapprint+0x110>)
 8009d7e:	5cd3      	ldrb	r3, [r2, r3]
 8009d80:	4619      	mov	r1, r3
 8009d82:	4818      	ldr	r0, [pc, #96]	; (8009de4 <mapprint+0x120>)
 8009d84:	f00c f9ac 	bl	80160e0 <iprintf>
			k++;
 8009d88:	4b11      	ldr	r3, [pc, #68]	; (8009dd0 <mapprint+0x10c>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	4a10      	ldr	r2, [pc, #64]	; (8009dd0 <mapprint+0x10c>)
 8009d90:	6013      	str	r3, [r2, #0]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009d92:	4b0e      	ldr	r3, [pc, #56]	; (8009dcc <mapprint+0x108>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3301      	adds	r3, #1
 8009d98:	4a0c      	ldr	r2, [pc, #48]	; (8009dcc <mapprint+0x108>)
 8009d9a:	6013      	str	r3, [r2, #0]
 8009d9c:	4b0b      	ldr	r3, [pc, #44]	; (8009dcc <mapprint+0x108>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b0f      	cmp	r3, #15
 8009da2:	dde9      	ble.n	8009d78 <mapprint+0xb4>
		}
		printf("\r\n");
 8009da4:	480e      	ldr	r0, [pc, #56]	; (8009de0 <mapprint+0x11c>)
 8009da6:	f00c fa0f 	bl	80161c8 <puts>
		printf("\r\n");
 8009daa:	480d      	ldr	r0, [pc, #52]	; (8009de0 <mapprint+0x11c>)
 8009dac:	f00c fa0c 	bl	80161c8 <puts>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009db0:	4b05      	ldr	r3, [pc, #20]	; (8009dc8 <mapprint+0x104>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3301      	adds	r3, #1
 8009db6:	4a04      	ldr	r2, [pc, #16]	; (8009dc8 <mapprint+0x104>)
 8009db8:	6013      	str	r3, [r2, #0]
 8009dba:	4b03      	ldr	r3, [pc, #12]	; (8009dc8 <mapprint+0x104>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b0f      	cmp	r3, #15
 8009dc0:	ddd6      	ble.n	8009d70 <mapprint+0xac>
	}
#endif
//	for(int i=0; i <=10; i++)
//	printf("保存データ :: %d \r\n",work_ram[i][0]);

}
 8009dc2:	bf00      	nop
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	2000432c 	.word	0x2000432c
 8009dcc:	20004330 	.word	0x20004330
 8009dd0:	20004334 	.word	0x20004334
 8009dd4:	20000318 	.word	0x20000318
 8009dd8:	08017f40 	.word	0x08017f40
 8009ddc:	08017f44 	.word	0x08017f44
 8009de0:	08017f48 	.word	0x08017f48
 8009de4:	08017f4c 	.word	0x08017f4c

08009de8 <Flash_clear>:
// Flashのsectoe1を消去
bool Flash_clear()
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b088      	sub	sp, #32
 8009dec:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8009dee:	f007 fe8f 	bl	8011b10 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8009df2:	2300      	movs	r3, #0
 8009df4:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 8009df6:	2301      	movs	r3, #1
 8009df8:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 8009e02:	1d3a      	adds	r2, r7, #4
 8009e04:	f107 0308 	add.w	r3, r7, #8
 8009e08:	4611      	mov	r1, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f007 ffe0 	bl	8011dd0 <HAL_FLASHEx_Erase>
 8009e10:	4603      	mov	r3, r0
 8009e12:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 8009e14:	f007 fe9e 	bl	8011b54 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 8009e18:	7ffb      	ldrb	r3, [r7, #31]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d105      	bne.n	8009e2a <Flash_clear+0x42>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e24:	d101      	bne.n	8009e2a <Flash_clear+0x42>
 8009e26:	2301      	movs	r3, #1
 8009e28:	e000      	b.n	8009e2c <Flash_clear+0x44>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	b2db      	uxtb	r3, r3
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3720      	adds	r7, #32
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
	...

08009e3c <Flash_load>:

// Flashのsector1のてwork_ramに読み出
// work_ramの先アドレスを返す
uint8_t* Flash_load() //uint8_t*
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);//BACKUP_FLASH_SECTOR_SIZE
 8009e40:	4a05      	ldr	r2, [pc, #20]	; (8009e58 <Flash_load+0x1c>)
 8009e42:	4b06      	ldr	r3, [pc, #24]	; (8009e5c <Flash_load+0x20>)
 8009e44:	4610      	mov	r0, r2
 8009e46:	4619      	mov	r1, r3
 8009e48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	f00b fcd7 	bl	8015800 <memcpy>
    return work_ram;
 8009e52:	4b01      	ldr	r3, [pc, #4]	; (8009e58 <Flash_load+0x1c>)
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	20000318 	.word	0x20000318
 8009e5c:	08004000 	.word	0x08004000

08009e60 <Flash_store>:

// Flashのsector1を消去後�???��?��タを書き込
bool Flash_store()
{
 8009e60:	b590      	push	{r4, r7, lr}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return false;
 8009e66:	f7ff ffbf 	bl	8009de8 <Flash_clear>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	f083 0301 	eor.w	r3, r3, #1
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <Flash_store+0x1a>
 8009e76:	2300      	movs	r3, #0
 8009e78:	e02f      	b.n	8009eda <Flash_store+0x7a>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 8009e7a:	4b1a      	ldr	r3, [pc, #104]	; (8009ee4 <Flash_store+0x84>)
 8009e7c:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 8009e7e:	f007 fe47 	bl	8011b10 <HAL_FLASH_Unlock>

    // work_ramにある4バイトごとまとめて書き込
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 8009e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e86:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 8009e88:	2300      	movs	r3, #0
 8009e8a:	60bb      	str	r3, [r7, #8]
 8009e8c:	e017      	b.n	8009ebe <Flash_store+0x5e>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	4a15      	ldr	r2, [pc, #84]	; (8009ee8 <Flash_store+0x88>)
        result = HAL_FLASH_Program(
 8009e94:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 8009ea0:	f04f 0400 	mov.w	r4, #0
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	4623      	mov	r3, r4
 8009ea8:	2002      	movs	r0, #2
 8009eaa:	f007 fd29 	bl	8011900 <HAL_FLASH_Program>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d107      	bne.n	8009ec8 <Flash_store+0x68>
    for (size_t i=0; i<write_cnt; i++)
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	60bb      	str	r3, [r7, #8]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d3e3      	bcc.n	8009e8e <Flash_store+0x2e>
 8009ec6:	e000      	b.n	8009eca <Flash_store+0x6a>
        if (result != HAL_OK) break;
 8009ec8:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8009eca:	f007 fe43 	bl	8011b54 <HAL_FLASH_Lock>

    return result == HAL_OK;
 8009ece:	7bfb      	ldrb	r3, [r7, #15]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	bf0c      	ite	eq
 8009ed4:	2301      	moveq	r3, #1
 8009ed6:	2300      	movne	r3, #0
 8009ed8:	b2db      	uxtb	r3, r3
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd90      	pop	{r4, r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20000318 	.word	0x20000318
 8009ee8:	08004000 	.word	0x08004000

08009eec <Emitter_ON>:
        printf("\r\n");
        HAL_Delay(T3);
}


void Emitter_ON(){  // 赤外線エミッタに出力比�?トグルモードを相補で
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0
#if 1
  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	4804      	ldr	r0, [pc, #16]	; (8009f04 <Emitter_ON+0x18>)
 8009ef4:	f009 fcc0 	bl	8013878 <HAL_TIM_OC_Start_IT>
  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 8009ef8:	2100      	movs	r1, #0
 8009efa:	4802      	ldr	r0, [pc, #8]	; (8009f04 <Emitter_ON+0x18>)
 8009efc:	f00a fd8d 	bl	8014a1a <HAL_TIMEx_OCN_Start_IT>
#endif
}
 8009f00:	bf00      	nop
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	200043c0 	.word	0x200043c0

08009f08 <Emitter_OFF>:
void Emitter_OFF(){
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	af00      	add	r7, sp, #0
#if 1
  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	4804      	ldr	r0, [pc, #16]	; (8009f20 <Emitter_OFF+0x18>)
 8009f10:	f009 fd36 	bl	8013980 <HAL_TIM_OC_Stop_IT>
  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 8009f14:	2100      	movs	r1, #0
 8009f16:	4802      	ldr	r0, [pc, #8]	; (8009f20 <Emitter_OFF+0x18>)
 8009f18:	f00a fdd4 	bl	8014ac4 <HAL_TIMEx_OCN_Stop_IT>
#endif
}
 8009f1c:	bf00      	nop
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	200043c0 	.word	0x200043c0

08009f24 <ADC_Start>:
void ADC_Start(){  //AD値のDMA
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
#if 1
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog1, 3) != HAL_OK){
 8009f28:	2203      	movs	r2, #3
 8009f2a:	490a      	ldr	r1, [pc, #40]	; (8009f54 <ADC_Start+0x30>)
 8009f2c:	480a      	ldr	r0, [pc, #40]	; (8009f58 <ADC_Start+0x34>)
 8009f2e:	f006 fbf3 	bl	8010718 <HAL_ADC_Start_DMA>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <ADC_Start+0x18>
  		        Error_Handler();
 8009f38:	f005 fcc4 	bl	800f8c4 <Error_Handler>
  		    }

  if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog2, 2) != HAL_OK){
 8009f3c:	2202      	movs	r2, #2
 8009f3e:	4907      	ldr	r1, [pc, #28]	; (8009f5c <ADC_Start+0x38>)
 8009f40:	4807      	ldr	r0, [pc, #28]	; (8009f60 <ADC_Start+0x3c>)
 8009f42:	f006 fbe9 	bl	8010718 <HAL_ADC_Start_DMA>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <ADC_Start+0x2c>
  		    	Error_Handler();
 8009f4c:	f005 fcba 	bl	800f8c4 <Error_Handler>
 }
#endif
}
 8009f50:	bf00      	nop
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	20000300 	.word	0x20000300
 8009f58:	20004580 	.word	0x20004580
 8009f5c:	20000308 	.word	0x20000308
 8009f60:	20004444 	.word	0x20004444

08009f64 <ADC_Stop>:
void ADC_Stop(){
 8009f64:	b580      	push	{r7, lr}
 8009f66:	af00      	add	r7, sp, #0
#if 1
  if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK){
 8009f68:	4808      	ldr	r0, [pc, #32]	; (8009f8c <ADC_Stop+0x28>)
 8009f6a:	f006 fcc7 	bl	80108fc <HAL_ADC_Stop_DMA>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <ADC_Stop+0x14>
  		        Error_Handler();
 8009f74:	f005 fca6 	bl	800f8c4 <Error_Handler>
  		    }

  if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK){
 8009f78:	4805      	ldr	r0, [pc, #20]	; (8009f90 <ADC_Stop+0x2c>)
 8009f7a:	f006 fcbf 	bl	80108fc <HAL_ADC_Stop_DMA>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d001      	beq.n	8009f88 <ADC_Stop+0x24>
  		    	Error_Handler();
 8009f84:	f005 fc9e 	bl	800f8c4 <Error_Handler>
            }
#endif
}
 8009f88:	bf00      	nop
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	20004580 	.word	0x20004580
 8009f90:	20004444 	.word	0x20004444

08009f94 <Encoder_Start>:
void Encoder_Start(){  //TIM3_Left, TIM4_Right
 8009f94:	b580      	push	{r7, lr}
 8009f96:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8009f98:	213c      	movs	r1, #60	; 0x3c
 8009f9a:	4804      	ldr	r0, [pc, #16]	; (8009fac <Encoder_Start+0x18>)
 8009f9c:	f009 fee8 	bl	8013d70 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8009fa0:	213c      	movs	r1, #60	; 0x3c
 8009fa2:	4803      	ldr	r0, [pc, #12]	; (8009fb0 <Encoder_Start+0x1c>)
 8009fa4:	f009 fee4 	bl	8013d70 <HAL_TIM_Encoder_Start>
}
 8009fa8:	bf00      	nop
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	200044e0 	.word	0x200044e0
 8009fb0:	20004404 	.word	0x20004404

08009fb4 <Motor_PWM_Start>:
void Encoder_Stop(){

}
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK){
 8009fb8:	210c      	movs	r1, #12
 8009fba:	4809      	ldr	r0, [pc, #36]	; (8009fe0 <Motor_PWM_Start+0x2c>)
 8009fbc:	f009 fdb0 	bl	8013b20 <HAL_TIM_PWM_Start>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <Motor_PWM_Start+0x16>
	 	    	            Error_Handler();
 8009fc6:	f005 fc7d 	bl	800f8c4 <Error_Handler>
	 	    	        }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK){
 8009fca:	2104      	movs	r1, #4
 8009fcc:	4805      	ldr	r0, [pc, #20]	; (8009fe4 <Motor_PWM_Start+0x30>)
 8009fce:	f009 fda7 	bl	8013b20 <HAL_TIM_PWM_Start>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <Motor_PWM_Start+0x28>
	 	    	            Error_Handler();
 8009fd8:	f005 fc74 	bl	800f8c4 <Error_Handler>
	 	    	        }


#endif
}
 8009fdc:	bf00      	nop
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	200051b4 	.word	0x200051b4
 8009fe4:	2000449c 	.word	0x2000449c

08009fe8 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK){
 8009fec:	210c      	movs	r1, #12
 8009fee:	4809      	ldr	r0, [pc, #36]	; (800a014 <Motor_PWM_Stop+0x2c>)
 8009ff0:	f009 fdd4 	bl	8013b9c <HAL_TIM_PWM_Stop>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d001      	beq.n	8009ffe <Motor_PWM_Stop+0x16>
	 	    	            Error_Handler();
 8009ffa:	f005 fc63 	bl	800f8c4 <Error_Handler>
	 }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK){
 8009ffe:	2104      	movs	r1, #4
 800a000:	4805      	ldr	r0, [pc, #20]	; (800a018 <Motor_PWM_Stop+0x30>)
 800a002:	f009 fdcb 	bl	8013b9c <HAL_TIM_PWM_Stop>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <Motor_PWM_Stop+0x28>
	 	    	            Error_Handler();
 800a00c:	f005 fc5a 	bl	800f8c4 <Error_Handler>
	 }

#endif
}
 800a010:	bf00      	nop
 800a012:	bd80      	pop	{r7, pc}
 800a014:	200051b4 	.word	0x200051b4
 800a018:	2000449c 	.word	0x2000449c

0800a01c <Init>:
void PWM_Log(){
//左右のモータのカウント値を配列に格納


}
void Init() { // 諸
 800a01c:	b580      	push	{r7, lr}
 800a01e:	af00      	add	r7, sp, #0

	Emitter_ON();
 800a020:	f7ff ff64 	bl	8009eec <Emitter_ON>
	ADC_Start();
 800a024:	f7ff ff7e 	bl	8009f24 <ADC_Start>
	IMU_init();
 800a028:	f7ff fbc4 	bl	80097b4 <IMU_init>
	Motor_PWM_Start();
 800a02c:	f7ff ffc2 	bl	8009fb4 <Motor_PWM_Start>
	 if (HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1) != HAL_OK){
	 	  	  	          Error_Handler();
	 }

#endif
}
 800a030:	bf00      	nop
 800a032:	bd80      	pop	{r7, pc}
 800a034:	0000      	movs	r0, r0
	...

0800a038 <IMU_Get_Data>:
/*---- DEFINING FUNCTION ----*/



/*---- DEFINING FUNCTION ----*/
double IMU_Get_Data(){// IMUの値を取
 800a038:	b5b0      	push	{r4, r5, r7, lr}
 800a03a:	af00      	add	r7, sp, #0
	//int i = 0;
	static double  /*imu_pre_angle=0,*/ imu_accel=0, imu_pre_accel=0;

    read_gyro_data();
 800a03c:	f7ff fbe4 	bl	8009808 <read_gyro_data>
    read_accel_data();
 800a040:	f7ff fc1a 	bl	8009878 <read_accel_data>

    //atan2(za,xa);
	imu_accel =  ( ( (double)zg - offset/*2.0*/ )/16.4) * PI /180;
 800a044:	4b56      	ldr	r3, [pc, #344]	; (800a1a0 <IMU_Get_Data+0x168>)
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	b21b      	sxth	r3, r3
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fe f9a2 	bl	8008394 <__aeabi_i2d>
 800a050:	4b54      	ldr	r3, [pc, #336]	; (800a1a4 <IMU_Get_Data+0x16c>)
 800a052:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a056:	461a      	mov	r2, r3
 800a058:	4623      	mov	r3, r4
 800a05a:	f7fe f84d 	bl	80080f8 <__aeabi_dsub>
 800a05e:	4603      	mov	r3, r0
 800a060:	460c      	mov	r4, r1
 800a062:	4618      	mov	r0, r3
 800a064:	4621      	mov	r1, r4
 800a066:	a348      	add	r3, pc, #288	; (adr r3, 800a188 <IMU_Get_Data+0x150>)
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	f7fe fb26 	bl	80086bc <__aeabi_ddiv>
 800a070:	4603      	mov	r3, r0
 800a072:	460c      	mov	r4, r1
 800a074:	4618      	mov	r0, r3
 800a076:	4621      	mov	r1, r4
 800a078:	a345      	add	r3, pc, #276	; (adr r3, 800a190 <IMU_Get_Data+0x158>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	f7fe f9f3 	bl	8008468 <__aeabi_dmul>
 800a082:	4603      	mov	r3, r0
 800a084:	460c      	mov	r4, r1
 800a086:	4618      	mov	r0, r3
 800a088:	4621      	mov	r1, r4
 800a08a:	f04f 0200 	mov.w	r2, #0
 800a08e:	4b46      	ldr	r3, [pc, #280]	; (800a1a8 <IMU_Get_Data+0x170>)
 800a090:	f7fe fb14 	bl	80086bc <__aeabi_ddiv>
 800a094:	4603      	mov	r3, r0
 800a096:	460c      	mov	r4, r1
 800a098:	4a44      	ldr	r2, [pc, #272]	; (800a1ac <IMU_Get_Data+0x174>)
 800a09a:	e9c2 3400 	strd	r3, r4, [r2]
	imu_angle += (imu_pre_accel + imu_accel) * T1 / 2;
 800a09e:	4b44      	ldr	r3, [pc, #272]	; (800a1b0 <IMU_Get_Data+0x178>)
 800a0a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0a4:	4b41      	ldr	r3, [pc, #260]	; (800a1ac <IMU_Get_Data+0x174>)
 800a0a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	4623      	mov	r3, r4
 800a0ae:	f7fe f825 	bl	80080fc <__adddf3>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	460c      	mov	r4, r1
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	a337      	add	r3, pc, #220	; (adr r3, 800a198 <IMU_Get_Data+0x160>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	f7fe f9d2 	bl	8008468 <__aeabi_dmul>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	f04f 0200 	mov.w	r2, #0
 800a0d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0d4:	f7fe faf2 	bl	80086bc <__aeabi_ddiv>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	460c      	mov	r4, r1
 800a0dc:	4618      	mov	r0, r3
 800a0de:	4621      	mov	r1, r4
 800a0e0:	4b34      	ldr	r3, [pc, #208]	; (800a1b4 <IMU_Get_Data+0x17c>)
 800a0e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	4623      	mov	r3, r4
 800a0ea:	f7fe f807 	bl	80080fc <__adddf3>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	4a30      	ldr	r2, [pc, #192]	; (800a1b4 <IMU_Get_Data+0x17c>)
 800a0f4:	e9c2 3400 	strd	r3, r4, [r2]
	imu_angle -= drift_fix * PI /180;
 800a0f8:	4b2e      	ldr	r3, [pc, #184]	; (800a1b4 <IMU_Get_Data+0x17c>)
 800a0fa:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a0fe:	4b2e      	ldr	r3, [pc, #184]	; (800a1b8 <IMU_Get_Data+0x180>)
 800a100:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a104:	a322      	add	r3, pc, #136	; (adr r3, 800a190 <IMU_Get_Data+0x158>)
 800a106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10a:	f7fe f9ad 	bl	8008468 <__aeabi_dmul>
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	4610      	mov	r0, r2
 800a114:	4619      	mov	r1, r3
 800a116:	f04f 0200 	mov.w	r2, #0
 800a11a:	4b23      	ldr	r3, [pc, #140]	; (800a1a8 <IMU_Get_Data+0x170>)
 800a11c:	f7fe face 	bl	80086bc <__aeabi_ddiv>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	4620      	mov	r0, r4
 800a126:	4629      	mov	r1, r5
 800a128:	f7fd ffe6 	bl	80080f8 <__aeabi_dsub>
 800a12c:	4603      	mov	r3, r0
 800a12e:	460c      	mov	r4, r1
 800a130:	4a20      	ldr	r2, [pc, #128]	; (800a1b4 <IMU_Get_Data+0x17c>)
 800a132:	e9c2 3400 	strd	r3, r4, [r2]
	imu_pre_accel = imu_accel;
 800a136:	4b1d      	ldr	r3, [pc, #116]	; (800a1ac <IMU_Get_Data+0x174>)
 800a138:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a13c:	4a1c      	ldr	r2, [pc, #112]	; (800a1b0 <IMU_Get_Data+0x178>)
 800a13e:	e9c2 3400 	strd	r3, r4, [r2]
	//imu_pre_angle = imu_angle;

	//0.95 * imu_pre_angle + 0.05 * (imu_pre_accel + imu_accel) * T1 / 2;
	Body_angle = imu_angle * 180 / PI;
 800a142:	4b1c      	ldr	r3, [pc, #112]	; (800a1b4 <IMU_Get_Data+0x17c>)
 800a144:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a148:	f04f 0200 	mov.w	r2, #0
 800a14c:	4b16      	ldr	r3, [pc, #88]	; (800a1a8 <IMU_Get_Data+0x170>)
 800a14e:	f7fe f98b 	bl	8008468 <__aeabi_dmul>
 800a152:	4603      	mov	r3, r0
 800a154:	460c      	mov	r4, r1
 800a156:	4618      	mov	r0, r3
 800a158:	4621      	mov	r1, r4
 800a15a:	a30d      	add	r3, pc, #52	; (adr r3, 800a190 <IMU_Get_Data+0x158>)
 800a15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a160:	f7fe faac 	bl	80086bc <__aeabi_ddiv>
 800a164:	4603      	mov	r3, r0
 800a166:	460c      	mov	r4, r1
 800a168:	4a14      	ldr	r2, [pc, #80]	; (800a1bc <IMU_Get_Data+0x184>)
 800a16a:	e9c2 3400 	strd	r3, r4, [r2]

	  return imu_accel;
 800a16e:	4b0f      	ldr	r3, [pc, #60]	; (800a1ac <IMU_Get_Data+0x174>)
 800a170:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a174:	ec44 3b17 	vmov	d7, r3, r4
}
 800a178:	eeb0 0a47 	vmov.f32	s0, s14
 800a17c:	eef0 0a67 	vmov.f32	s1, s15
 800a180:	bdb0      	pop	{r4, r5, r7, pc}
 800a182:	bf00      	nop
 800a184:	f3af 8000 	nop.w
 800a188:	66666666 	.word	0x66666666
 800a18c:	40306666 	.word	0x40306666
 800a190:	54442d18 	.word	0x54442d18
 800a194:	400921fb 	.word	0x400921fb
 800a198:	d2f1a9fc 	.word	0xd2f1a9fc
 800a19c:	3f50624d 	.word	0x3f50624d
 800a1a0:	200043aa 	.word	0x200043aa
 800a1a4:	200002d8 	.word	0x200002d8
 800a1a8:	40668000 	.word	0x40668000
 800a1ac:	20004338 	.word	0x20004338
 800a1b0:	20004340 	.word	0x20004340
 800a1b4:	200002c8 	.word	0x200002c8
 800a1b8:	20000018 	.word	0x20000018
 800a1bc:	200002c0 	.word	0x200002c0

0800a1c0 <IMU_Control>:
void IMU_Control(double target, double now, double T, double KP, double KI, double KD){
 800a1c0:	b5b0      	push	{r4, r5, r7, lr}
 800a1c2:	b090      	sub	sp, #64	; 0x40
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 800a1ca:	ed87 1b08 	vstr	d1, [r7, #32]
 800a1ce:	ed87 2b06 	vstr	d2, [r7, #24]
 800a1d2:	ed87 3b04 	vstr	d3, [r7, #16]
 800a1d6:	ed87 4b02 	vstr	d4, [r7, #8]
 800a1da:	ed87 5b00 	vstr	d5, [r7]

	static double  ei=0, e0=0;
	double e=0,ed=0;
 800a1de:	f04f 0300 	mov.w	r3, #0
 800a1e2:	f04f 0400 	mov.w	r4, #0
 800a1e6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 800a1ea:	f04f 0300 	mov.w	r3, #0
 800a1ee:	f04f 0400 	mov.w	r4, #0
 800a1f2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	if(mode.imu == 0 || (Target_velocity == 0 && Target_Rad_velo == 0)){
 800a1f6:	4b71      	ldr	r3, [pc, #452]	; (800a3bc <IMU_Control+0x1fc>)
 800a1f8:	799b      	ldrb	r3, [r3, #6]
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00f      	beq.n	800a224 <IMU_Control+0x64>
 800a204:	4b6e      	ldr	r3, [pc, #440]	; (800a3c0 <IMU_Control+0x200>)
 800a206:	edd3 7a00 	vldr	s15, [r3]
 800a20a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a212:	d115      	bne.n	800a240 <IMU_Control+0x80>
 800a214:	4b6b      	ldr	r3, [pc, #428]	; (800a3c4 <IMU_Control+0x204>)
 800a216:	edd3 7a00 	vldr	s15, [r3]
 800a21a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a222:	d10d      	bne.n	800a240 <IMU_Control+0x80>

		ei = 0;
 800a224:	4a68      	ldr	r2, [pc, #416]	; (800a3c8 <IMU_Control+0x208>)
 800a226:	f04f 0300 	mov.w	r3, #0
 800a22a:	f04f 0400 	mov.w	r4, #0
 800a22e:	e9c2 3400 	strd	r3, r4, [r2]
		e0=0;
 800a232:	4a66      	ldr	r2, [pc, #408]	; (800a3cc <IMU_Control+0x20c>)
 800a234:	f04f 0300 	mov.w	r3, #0
 800a238:	f04f 0400 	mov.w	r4, #0
 800a23c:	e9c2 3400 	strd	r3, r4, [r2]
	}
	mode.imu = 1;
 800a240:	4a5e      	ldr	r2, [pc, #376]	; (800a3bc <IMU_Control+0x1fc>)
 800a242:	7993      	ldrb	r3, [r2, #6]
 800a244:	f043 0301 	orr.w	r3, r3, #1
 800a248:	7193      	strb	r3, [r2, #6]

	e = target - now;
 800a24a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a24e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a252:	f7fd ff51 	bl	80080f8 <__aeabi_dsub>
 800a256:	4603      	mov	r3, r0
 800a258:	460c      	mov	r4, r1
 800a25a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	ei += e * T;
 800a25e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a262:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a266:	f7fe f8ff 	bl	8008468 <__aeabi_dmul>
 800a26a:	4603      	mov	r3, r0
 800a26c:	460c      	mov	r4, r1
 800a26e:	4618      	mov	r0, r3
 800a270:	4621      	mov	r1, r4
 800a272:	4b55      	ldr	r3, [pc, #340]	; (800a3c8 <IMU_Control+0x208>)
 800a274:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a278:	461a      	mov	r2, r3
 800a27a:	4623      	mov	r3, r4
 800a27c:	f7fd ff3e 	bl	80080fc <__adddf3>
 800a280:	4603      	mov	r3, r0
 800a282:	460c      	mov	r4, r1
 800a284:	4a50      	ldr	r2, [pc, #320]	; (800a3c8 <IMU_Control+0x208>)
 800a286:	e9c2 3400 	strd	r3, r4, [r2]
	ed = (e- e0) / T;
 800a28a:	4b50      	ldr	r3, [pc, #320]	; (800a3cc <IMU_Control+0x20c>)
 800a28c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a290:	461a      	mov	r2, r3
 800a292:	4623      	mov	r3, r4
 800a294:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a298:	f7fd ff2e 	bl	80080f8 <__aeabi_dsub>
 800a29c:	4603      	mov	r3, r0
 800a29e:	460c      	mov	r4, r1
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2a8:	f7fe fa08 	bl	80086bc <__aeabi_ddiv>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	e0 = e;
 800a2b4:	4a45      	ldr	r2, [pc, #276]	; (800a3cc <IMU_Control+0x20c>)
 800a2b6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800a2ba:	e9c2 3400 	strd	r3, r4, [r2]

	L_angular_velocity = -(int16_t)round(KP*e + KI*ei + KD*ed);
 800a2be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a2c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a2c6:	f7fe f8cf 	bl	8008468 <__aeabi_dmul>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	460c      	mov	r4, r1
 800a2ce:	4625      	mov	r5, r4
 800a2d0:	461c      	mov	r4, r3
 800a2d2:	4b3d      	ldr	r3, [pc, #244]	; (800a3c8 <IMU_Control+0x208>)
 800a2d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a2d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a2dc:	f7fe f8c4 	bl	8008468 <__aeabi_dmul>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	f7fd ff08 	bl	80080fc <__adddf3>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	4625      	mov	r5, r4
 800a2f2:	461c      	mov	r4, r3
 800a2f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a2f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a2fc:	f7fe f8b4 	bl	8008468 <__aeabi_dmul>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4620      	mov	r0, r4
 800a306:	4629      	mov	r1, r5
 800a308:	f7fd fef8 	bl	80080fc <__adddf3>
 800a30c:	4603      	mov	r3, r0
 800a30e:	460c      	mov	r4, r1
 800a310:	ec44 3b17 	vmov	d7, r3, r4
 800a314:	eeb0 0a47 	vmov.f32	s0, s14
 800a318:	eef0 0a67 	vmov.f32	s1, s15
 800a31c:	f00b f9fc 	bl	8015718 <round>
 800a320:	ec54 3b10 	vmov	r3, r4, d0
 800a324:	4618      	mov	r0, r3
 800a326:	4621      	mov	r1, r4
 800a328:	f7fe fb4e 	bl	80089c8 <__aeabi_d2iz>
 800a32c:	4603      	mov	r3, r0
 800a32e:	b21b      	sxth	r3, r3
 800a330:	b29b      	uxth	r3, r3
 800a332:	425b      	negs	r3, r3
 800a334:	b29b      	uxth	r3, r3
 800a336:	b21a      	sxth	r2, r3
 800a338:	4b25      	ldr	r3, [pc, #148]	; (800a3d0 <IMU_Control+0x210>)
 800a33a:	801a      	strh	r2, [r3, #0]
	R_angular_velocity =  (int16_t)round(KP*e + KI*ei + KD*ed);
 800a33c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a340:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a344:	f7fe f890 	bl	8008468 <__aeabi_dmul>
 800a348:	4603      	mov	r3, r0
 800a34a:	460c      	mov	r4, r1
 800a34c:	4625      	mov	r5, r4
 800a34e:	461c      	mov	r4, r3
 800a350:	4b1d      	ldr	r3, [pc, #116]	; (800a3c8 <IMU_Control+0x208>)
 800a352:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a356:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a35a:	f7fe f885 	bl	8008468 <__aeabi_dmul>
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	4620      	mov	r0, r4
 800a364:	4629      	mov	r1, r5
 800a366:	f7fd fec9 	bl	80080fc <__adddf3>
 800a36a:	4603      	mov	r3, r0
 800a36c:	460c      	mov	r4, r1
 800a36e:	4625      	mov	r5, r4
 800a370:	461c      	mov	r4, r3
 800a372:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a376:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a37a:	f7fe f875 	bl	8008468 <__aeabi_dmul>
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	4620      	mov	r0, r4
 800a384:	4629      	mov	r1, r5
 800a386:	f7fd feb9 	bl	80080fc <__adddf3>
 800a38a:	4603      	mov	r3, r0
 800a38c:	460c      	mov	r4, r1
 800a38e:	ec44 3b17 	vmov	d7, r3, r4
 800a392:	eeb0 0a47 	vmov.f32	s0, s14
 800a396:	eef0 0a67 	vmov.f32	s1, s15
 800a39a:	f00b f9bd 	bl	8015718 <round>
 800a39e:	ec54 3b10 	vmov	r3, r4, d0
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	f7fe fb0f 	bl	80089c8 <__aeabi_d2iz>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	b21a      	sxth	r2, r3
 800a3ae:	4b09      	ldr	r3, [pc, #36]	; (800a3d4 <IMU_Control+0x214>)
 800a3b0:	801a      	strh	r2, [r3, #0]

	//b 車体度0は前回の速度制御
}
 800a3b2:	bf00      	nop
 800a3b4:	3740      	adds	r7, #64	; 0x40
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bdb0      	pop	{r4, r5, r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20000074 	.word	0x20000074
 800a3c0:	200002b8 	.word	0x200002b8
 800a3c4:	200002bc 	.word	0x200002bc
 800a3c8:	20004348 	.word	0x20004348
 800a3cc:	20004350 	.word	0x20004350
 800a3d0:	2000438e 	.word	0x2000438e
 800a3d4:	20004392 	.word	0x20004392

0800a3d8 <IMU_Calib>:
void IMU_Calib(){
 800a3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3da:	b089      	sub	sp, #36	; 0x24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	466b      	mov	r3, sp
 800a3e0:	461e      	mov	r6, r3

	HAL_Delay(1000);
 800a3e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a3e6:	f005 fff1 	bl	80103cc <HAL_Delay>

	int16_t num = 2000;
 800a3ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a3ee:	81fb      	strh	r3, [r7, #14]
	double zg_vals[num];
 800a3f0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	60bb      	str	r3, [r7, #8]
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	f04f 0200 	mov.w	r2, #0
 800a402:	f04f 0300 	mov.w	r3, #0
 800a406:	f04f 0400 	mov.w	r4, #0
 800a40a:	0194      	lsls	r4, r2, #6
 800a40c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a410:	018b      	lsls	r3, r1, #6
 800a412:	4603      	mov	r3, r0
 800a414:	4619      	mov	r1, r3
 800a416:	f04f 0200 	mov.w	r2, #0
 800a41a:	f04f 0300 	mov.w	r3, #0
 800a41e:	f04f 0400 	mov.w	r4, #0
 800a422:	0194      	lsls	r4, r2, #6
 800a424:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a428:	018b      	lsls	r3, r1, #6
 800a42a:	4603      	mov	r3, r0
 800a42c:	00db      	lsls	r3, r3, #3
 800a42e:	3307      	adds	r3, #7
 800a430:	3307      	adds	r3, #7
 800a432:	08db      	lsrs	r3, r3, #3
 800a434:	00db      	lsls	r3, r3, #3
 800a436:	ebad 0d03 	sub.w	sp, sp, r3
 800a43a:	466b      	mov	r3, sp
 800a43c:	3307      	adds	r3, #7
 800a43e:	08db      	lsrs	r3, r3, #3
 800a440:	00db      	lsls	r3, r3, #3
 800a442:	607b      	str	r3, [r7, #4]
	double sum;
	for(uint16_t i = 0; i < num; i++){
 800a444:	2300      	movs	r3, #0
 800a446:	83fb      	strh	r3, [r7, #30]
 800a448:	e023      	b.n	800a492 <IMU_Calib+0xba>
		zg_vals[i] = (double)zg;
 800a44a:	4b20      	ldr	r3, [pc, #128]	; (800a4cc <IMU_Calib+0xf4>)
 800a44c:	881b      	ldrh	r3, [r3, #0]
 800a44e:	b21b      	sxth	r3, r3
 800a450:	8bfd      	ldrh	r5, [r7, #30]
 800a452:	4618      	mov	r0, r3
 800a454:	f7fd ff9e 	bl	8008394 <__aeabi_i2d>
 800a458:	4603      	mov	r3, r0
 800a45a:	460c      	mov	r4, r1
 800a45c:	6879      	ldr	r1, [r7, #4]
 800a45e:	00ea      	lsls	r2, r5, #3
 800a460:	440a      	add	r2, r1
 800a462:	e9c2 3400 	strd	r3, r4, [r2]
		sum += zg_vals[i];
 800a466:	8bfb      	ldrh	r3, [r7, #30]
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	00db      	lsls	r3, r3, #3
 800a46c:	4413      	add	r3, r2
 800a46e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a472:	461a      	mov	r2, r3
 800a474:	4623      	mov	r3, r4
 800a476:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a47a:	f7fd fe3f 	bl	80080fc <__adddf3>
 800a47e:	4603      	mov	r3, r0
 800a480:	460c      	mov	r4, r1
 800a482:	e9c7 3404 	strd	r3, r4, [r7, #16]
		HAL_Delay(2);
 800a486:	2002      	movs	r0, #2
 800a488:	f005 ffa0 	bl	80103cc <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 800a48c:	8bfb      	ldrh	r3, [r7, #30]
 800a48e:	3301      	adds	r3, #1
 800a490:	83fb      	strh	r3, [r7, #30]
 800a492:	8bfa      	ldrh	r2, [r7, #30]
 800a494:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a498:	429a      	cmp	r2, r3
 800a49a:	dbd6      	blt.n	800a44a <IMU_Calib+0x72>
	}

	offset = sum / num;
 800a49c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7fd ff77 	bl	8008394 <__aeabi_i2d>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	460c      	mov	r4, r1
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	4623      	mov	r3, r4
 800a4ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a4b2:	f7fe f903 	bl	80086bc <__aeabi_ddiv>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	460c      	mov	r4, r1
 800a4ba:	4a05      	ldr	r2, [pc, #20]	; (800a4d0 <IMU_Calib+0xf8>)
 800a4bc:	e9c2 3400 	strd	r3, r4, [r2]
 800a4c0:	46b5      	mov	sp, r6
}
 800a4c2:	bf00      	nop
 800a4c4:	3724      	adds	r7, #36	; 0x24
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	200043aa 	.word	0x200043aa
 800a4d0:	200002d8 	.word	0x200002d8

0800a4d4 <LED_Change>:

void LED_Change(){
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	af00      	add	r7, sp, #0
	//Switch
	switch(mode.LED){
 800a4d8:	4b5a      	ldr	r3, [pc, #360]	; (800a644 <LED_Change+0x170>)
 800a4da:	f993 3000 	ldrsb.w	r3, [r3]
 800a4de:	2b07      	cmp	r3, #7
 800a4e0:	f200 80ac 	bhi.w	800a63c <LED_Change+0x168>
 800a4e4:	a201      	add	r2, pc, #4	; (adr r2, 800a4ec <LED_Change+0x18>)
 800a4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ea:	bf00      	nop
 800a4ec:	0800a50d 	.word	0x0800a50d
 800a4f0:	0800a533 	.word	0x0800a533
 800a4f4:	0800a559 	.word	0x0800a559
 800a4f8:	0800a57f 	.word	0x0800a57f
 800a4fc:	0800a5a5 	.word	0x0800a5a5
 800a500:	0800a5cb 	.word	0x0800a5cb
 800a504:	0800a5f1 	.word	0x0800a5f1
 800a508:	0800a617 	.word	0x0800a617
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a50c:	2200      	movs	r2, #0
 800a50e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a512:	484d      	ldr	r0, [pc, #308]	; (800a648 <LED_Change+0x174>)
 800a514:	f007 ff30 	bl	8012378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a518:	2200      	movs	r2, #0
 800a51a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a51e:	484a      	ldr	r0, [pc, #296]	; (800a648 <LED_Change+0x174>)
 800a520:	f007 ff2a 	bl	8012378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a524:	2200      	movs	r2, #0
 800a526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a52a:	4848      	ldr	r0, [pc, #288]	; (800a64c <LED_Change+0x178>)
 800a52c:	f007 ff24 	bl	8012378 <HAL_GPIO_WritePin>
		break;
 800a530:	e085      	b.n	800a63e <LED_Change+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a532:	2201      	movs	r2, #1
 800a534:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a538:	4843      	ldr	r0, [pc, #268]	; (800a648 <LED_Change+0x174>)
 800a53a:	f007 ff1d 	bl	8012378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a53e:	2200      	movs	r2, #0
 800a540:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a544:	4840      	ldr	r0, [pc, #256]	; (800a648 <LED_Change+0x174>)
 800a546:	f007 ff17 	bl	8012378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a54a:	2200      	movs	r2, #0
 800a54c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a550:	483e      	ldr	r0, [pc, #248]	; (800a64c <LED_Change+0x178>)
 800a552:	f007 ff11 	bl	8012378 <HAL_GPIO_WritePin>
		break;
 800a556:	e072      	b.n	800a63e <LED_Change+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a558:	2200      	movs	r2, #0
 800a55a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a55e:	483a      	ldr	r0, [pc, #232]	; (800a648 <LED_Change+0x174>)
 800a560:	f007 ff0a 	bl	8012378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a564:	2201      	movs	r2, #1
 800a566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a56a:	4837      	ldr	r0, [pc, #220]	; (800a648 <LED_Change+0x174>)
 800a56c:	f007 ff04 	bl	8012378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a570:	2200      	movs	r2, #0
 800a572:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a576:	4835      	ldr	r0, [pc, #212]	; (800a64c <LED_Change+0x178>)
 800a578:	f007 fefe 	bl	8012378 <HAL_GPIO_WritePin>

		break;
 800a57c:	e05f      	b.n	800a63e <LED_Change+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a57e:	2201      	movs	r2, #1
 800a580:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a584:	4830      	ldr	r0, [pc, #192]	; (800a648 <LED_Change+0x174>)
 800a586:	f007 fef7 	bl	8012378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a58a:	2201      	movs	r2, #1
 800a58c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a590:	482d      	ldr	r0, [pc, #180]	; (800a648 <LED_Change+0x174>)
 800a592:	f007 fef1 	bl	8012378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a596:	2200      	movs	r2, #0
 800a598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a59c:	482b      	ldr	r0, [pc, #172]	; (800a64c <LED_Change+0x178>)
 800a59e:	f007 feeb 	bl	8012378 <HAL_GPIO_WritePin>
		break;
 800a5a2:	e04c      	b.n	800a63e <LED_Change+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5aa:	4827      	ldr	r0, [pc, #156]	; (800a648 <LED_Change+0x174>)
 800a5ac:	f007 fee4 	bl	8012378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a5b6:	4824      	ldr	r0, [pc, #144]	; (800a648 <LED_Change+0x174>)
 800a5b8:	f007 fede 	bl	8012378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5c2:	4822      	ldr	r0, [pc, #136]	; (800a64c <LED_Change+0x178>)
 800a5c4:	f007 fed8 	bl	8012378 <HAL_GPIO_WritePin>
		break;
 800a5c8:	e039      	b.n	800a63e <LED_Change+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5d0:	481d      	ldr	r0, [pc, #116]	; (800a648 <LED_Change+0x174>)
 800a5d2:	f007 fed1 	bl	8012378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a5dc:	481a      	ldr	r0, [pc, #104]	; (800a648 <LED_Change+0x174>)
 800a5de:	f007 fecb 	bl	8012378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5e8:	4818      	ldr	r0, [pc, #96]	; (800a64c <LED_Change+0x178>)
 800a5ea:	f007 fec5 	bl	8012378 <HAL_GPIO_WritePin>
		break;
 800a5ee:	e026      	b.n	800a63e <LED_Change+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5f6:	4814      	ldr	r0, [pc, #80]	; (800a648 <LED_Change+0x174>)
 800a5f8:	f007 febe 	bl	8012378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a602:	4811      	ldr	r0, [pc, #68]	; (800a648 <LED_Change+0x174>)
 800a604:	f007 feb8 	bl	8012378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a608:	2201      	movs	r2, #1
 800a60a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a60e:	480f      	ldr	r0, [pc, #60]	; (800a64c <LED_Change+0x178>)
 800a610:	f007 feb2 	bl	8012378 <HAL_GPIO_WritePin>

		break;
 800a614:	e013      	b.n	800a63e <LED_Change+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a616:	2201      	movs	r2, #1
 800a618:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a61c:	480a      	ldr	r0, [pc, #40]	; (800a648 <LED_Change+0x174>)
 800a61e:	f007 feab 	bl	8012378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a622:	2201      	movs	r2, #1
 800a624:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a628:	4807      	ldr	r0, [pc, #28]	; (800a648 <LED_Change+0x174>)
 800a62a:	f007 fea5 	bl	8012378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a62e:	2201      	movs	r2, #1
 800a630:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a634:	4805      	ldr	r0, [pc, #20]	; (800a64c <LED_Change+0x178>)
 800a636:	f007 fe9f 	bl	8012378 <HAL_GPIO_WritePin>

		break;
 800a63a:	e000      	b.n	800a63e <LED_Change+0x16a>
	default: break;
 800a63c:	bf00      	nop

	}
}
 800a63e:	bf00      	nop
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20000074 	.word	0x20000074
 800a648:	40020800 	.word	0x40020800
 800a64c:	40020400 	.word	0x40020400

0800a650 <Motor_Switch>:
void Motor_Switch(int16_t L, int16_t R){
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	4603      	mov	r3, r0
 800a658:	460a      	mov	r2, r1
 800a65a:	80fb      	strh	r3, [r7, #6]
 800a65c:	4613      	mov	r3, r2
 800a65e:	80bb      	strh	r3, [r7, #4]
	if (L > 0 ){
 800a660:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a664:	2b00      	cmp	r3, #0
 800a666:	dd05      	ble.n	800a674 <Motor_Switch+0x24>
		//to -
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); //A2が左SET:1で正転
 800a668:	2201      	movs	r2, #1
 800a66a:	2104      	movs	r1, #4
 800a66c:	481a      	ldr	r0, [pc, #104]	; (800a6d8 <Motor_Switch+0x88>)
 800a66e:	f007 fe83 	bl	8012378 <HAL_GPIO_WritePin>
 800a672:	e00c      	b.n	800a68e <Motor_Switch+0x3e>

	}
	else  if (L < 0){
 800a674:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	da08      	bge.n	800a68e <Motor_Switch+0x3e>
		//to +
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800a67c:	2200      	movs	r2, #0
 800a67e:	2104      	movs	r1, #4
 800a680:	4815      	ldr	r0, [pc, #84]	; (800a6d8 <Motor_Switch+0x88>)
 800a682:	f007 fe79 	bl	8012378 <HAL_GPIO_WritePin>
		L = -L;
 800a686:	88fb      	ldrh	r3, [r7, #6]
 800a688:	425b      	negs	r3, r3
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	80fb      	strh	r3, [r7, #6]
	}
	if (R > 0){
 800a68e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	dd05      	ble.n	800a6a2 <Motor_Switch+0x52>
		//to -
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800a696:	2200      	movs	r2, #0
 800a698:	2101      	movs	r1, #1
 800a69a:	480f      	ldr	r0, [pc, #60]	; (800a6d8 <Motor_Switch+0x88>)
 800a69c:	f007 fe6c 	bl	8012378 <HAL_GPIO_WritePin>
 800a6a0:	e00c      	b.n	800a6bc <Motor_Switch+0x6c>

	}

	else if (R < 0){
 800a6a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	da08      	bge.n	800a6bc <Motor_Switch+0x6c>
	  	//to +
	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //A0が右,SET:1で正転
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	2101      	movs	r1, #1
 800a6ae:	480a      	ldr	r0, [pc, #40]	; (800a6d8 <Motor_Switch+0x88>)
 800a6b0:	f007 fe62 	bl	8012378 <HAL_GPIO_WritePin>
	  	R = -R;
 800a6b4:	88bb      	ldrh	r3, [r7, #4]
 800a6b6:	425b      	negs	r3, r3
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	80bb      	strh	r3, [r7, #4]
	}

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, L); //tim2ch4が左
 800a6bc:	4b07      	ldr	r3, [pc, #28]	; (800a6dc <Motor_Switch+0x8c>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a6c4:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, R); //tim5ch2が右
 800a6c6:	4b06      	ldr	r3, [pc, #24]	; (800a6e0 <Motor_Switch+0x90>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a6ce:	639a      	str	r2, [r3, #56]	; 0x38
}
 800a6d0:	bf00      	nop
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	40020000 	.word	0x40020000
 800a6dc:	200051b4 	.word	0x200051b4
 800a6e0:	2000449c 	.word	0x2000449c

0800a6e4 <ADC_Get_Data>:

void ADC_Get_Data(){
 800a6e4:	b480      	push	{r7}
 800a6e6:	af00      	add	r7, sp, #0

	static int count = 0;

	    sl_ad1_10 = analog1[0];
 800a6e8:	4b80      	ldr	r3, [pc, #512]	; (800a8ec <ADC_Get_Data+0x208>)
 800a6ea:	881b      	ldrh	r3, [r3, #0]
 800a6ec:	b21a      	sxth	r2, r3
 800a6ee:	4b80      	ldr	r3, [pc, #512]	; (800a8f0 <ADC_Get_Data+0x20c>)
 800a6f0:	801a      	strh	r2, [r3, #0]
		fr_ad1_14 = analog1[1];
 800a6f2:	4b7e      	ldr	r3, [pc, #504]	; (800a8ec <ADC_Get_Data+0x208>)
 800a6f4:	885b      	ldrh	r3, [r3, #2]
 800a6f6:	b21a      	sxth	r2, r3
 800a6f8:	4b7e      	ldr	r3, [pc, #504]	; (800a8f4 <ADC_Get_Data+0x210>)
 800a6fa:	801a      	strh	r2, [r3, #0]
		fl_ad2_11 = analog2[0];
 800a6fc:	4b7e      	ldr	r3, [pc, #504]	; (800a8f8 <ADC_Get_Data+0x214>)
 800a6fe:	881b      	ldrh	r3, [r3, #0]
 800a700:	b21a      	sxth	r2, r3
 800a702:	4b7e      	ldr	r3, [pc, #504]	; (800a8fc <ADC_Get_Data+0x218>)
 800a704:	801a      	strh	r2, [r3, #0]
		sr_ad2_15 = analog2[1];
 800a706:	4b7c      	ldr	r3, [pc, #496]	; (800a8f8 <ADC_Get_Data+0x214>)
 800a708:	885b      	ldrh	r3, [r3, #2]
 800a70a:	b21a      	sxth	r2, r3
 800a70c:	4b7c      	ldr	r3, [pc, #496]	; (800a900 <ADC_Get_Data+0x21c>)
 800a70e:	801a      	strh	r2, [r3, #0]

	    sl_error = abs(sl_path - sl_ad1_10);
 800a710:	4b7c      	ldr	r3, [pc, #496]	; (800a904 <ADC_Get_Data+0x220>)
 800a712:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a716:	461a      	mov	r2, r3
 800a718:	4b75      	ldr	r3, [pc, #468]	; (800a8f0 <ADC_Get_Data+0x20c>)
 800a71a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	2b00      	cmp	r3, #0
 800a722:	bfb8      	it	lt
 800a724:	425b      	neglt	r3, r3
 800a726:	b21a      	sxth	r2, r3
 800a728:	4b77      	ldr	r3, [pc, #476]	; (800a908 <ADC_Get_Data+0x224>)
 800a72a:	801a      	strh	r2, [r3, #0]
		fr_error = abs(fr_path - fr_ad1_14);
 800a72c:	4b77      	ldr	r3, [pc, #476]	; (800a90c <ADC_Get_Data+0x228>)
 800a72e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a732:	461a      	mov	r2, r3
 800a734:	4b6f      	ldr	r3, [pc, #444]	; (800a8f4 <ADC_Get_Data+0x210>)
 800a736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	bfb8      	it	lt
 800a740:	425b      	neglt	r3, r3
 800a742:	b21a      	sxth	r2, r3
 800a744:	4b72      	ldr	r3, [pc, #456]	; (800a910 <ADC_Get_Data+0x22c>)
 800a746:	801a      	strh	r2, [r3, #0]
	    fl_error = abs(fl_path - fl_ad2_11);
 800a748:	4b72      	ldr	r3, [pc, #456]	; (800a914 <ADC_Get_Data+0x230>)
 800a74a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a74e:	461a      	mov	r2, r3
 800a750:	4b6a      	ldr	r3, [pc, #424]	; (800a8fc <ADC_Get_Data+0x218>)
 800a752:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	2b00      	cmp	r3, #0
 800a75a:	bfb8      	it	lt
 800a75c:	425b      	neglt	r3, r3
 800a75e:	b21a      	sxth	r2, r3
 800a760:	4b6d      	ldr	r3, [pc, #436]	; (800a918 <ADC_Get_Data+0x234>)
 800a762:	801a      	strh	r2, [r3, #0]
	    sr_error = abs(sr_path - sr_ad2_15);
 800a764:	4b6d      	ldr	r3, [pc, #436]	; (800a91c <ADC_Get_Data+0x238>)
 800a766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a76a:	461a      	mov	r2, r3
 800a76c:	4b64      	ldr	r3, [pc, #400]	; (800a900 <ADC_Get_Data+0x21c>)
 800a76e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	2b00      	cmp	r3, #0
 800a776:	bfb8      	it	lt
 800a778:	425b      	neglt	r3, r3
 800a77a:	b21a      	sxth	r2, r3
 800a77c:	4b68      	ldr	r3, [pc, #416]	; (800a920 <ADC_Get_Data+0x23c>)
 800a77e:	801a      	strh	r2, [r3, #0]

	    sl_path = sl_ad1_10;
 800a780:	4b5b      	ldr	r3, [pc, #364]	; (800a8f0 <ADC_Get_Data+0x20c>)
 800a782:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a786:	4b5f      	ldr	r3, [pc, #380]	; (800a904 <ADC_Get_Data+0x220>)
 800a788:	801a      	strh	r2, [r3, #0]
	    fr_path = fr_ad1_14;
 800a78a:	4b5a      	ldr	r3, [pc, #360]	; (800a8f4 <ADC_Get_Data+0x210>)
 800a78c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a790:	4b5e      	ldr	r3, [pc, #376]	; (800a90c <ADC_Get_Data+0x228>)
 800a792:	801a      	strh	r2, [r3, #0]
	    fl_path = fl_ad2_11;
 800a794:	4b59      	ldr	r3, [pc, #356]	; (800a8fc <ADC_Get_Data+0x218>)
 800a796:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a79a:	4b5e      	ldr	r3, [pc, #376]	; (800a914 <ADC_Get_Data+0x230>)
 800a79c:	801a      	strh	r2, [r3, #0]
		sr_path = sr_ad2_15;
 800a79e:	4b58      	ldr	r3, [pc, #352]	; (800a900 <ADC_Get_Data+0x21c>)
 800a7a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a7a4:	4b5d      	ldr	r3, [pc, #372]	; (800a91c <ADC_Get_Data+0x238>)
 800a7a6:	801a      	strh	r2, [r3, #0]

		battery_V = analog1[2];
 800a7a8:	4b50      	ldr	r3, [pc, #320]	; (800a8ec <ADC_Get_Data+0x208>)
 800a7aa:	889b      	ldrh	r3, [r3, #4]
 800a7ac:	ee07 3a90 	vmov	s15, r3
 800a7b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b4:	4b5b      	ldr	r3, [pc, #364]	; (800a924 <ADC_Get_Data+0x240>)
 800a7b6:	edc3 7a00 	vstr	s15, [r3]
#if 1
		sl_integrate += sl_error;
 800a7ba:	4b5b      	ldr	r3, [pc, #364]	; (800a928 <ADC_Get_Data+0x244>)
 800a7bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	4b51      	ldr	r3, [pc, #324]	; (800a908 <ADC_Get_Data+0x224>)
 800a7c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	4413      	add	r3, r2
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	b21a      	sxth	r2, r3
 800a7d0:	4b55      	ldr	r3, [pc, #340]	; (800a928 <ADC_Get_Data+0x244>)
 800a7d2:	801a      	strh	r2, [r3, #0]
		fr_integrate += fr_error;
 800a7d4:	4b55      	ldr	r3, [pc, #340]	; (800a92c <ADC_Get_Data+0x248>)
 800a7d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	4b4c      	ldr	r3, [pc, #304]	; (800a910 <ADC_Get_Data+0x22c>)
 800a7de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	4413      	add	r3, r2
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	b21a      	sxth	r2, r3
 800a7ea:	4b50      	ldr	r3, [pc, #320]	; (800a92c <ADC_Get_Data+0x248>)
 800a7ec:	801a      	strh	r2, [r3, #0]
		fl_integrate += fl_error;
 800a7ee:	4b50      	ldr	r3, [pc, #320]	; (800a930 <ADC_Get_Data+0x24c>)
 800a7f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	4b48      	ldr	r3, [pc, #288]	; (800a918 <ADC_Get_Data+0x234>)
 800a7f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	4413      	add	r3, r2
 800a800:	b29b      	uxth	r3, r3
 800a802:	b21a      	sxth	r2, r3
 800a804:	4b4a      	ldr	r3, [pc, #296]	; (800a930 <ADC_Get_Data+0x24c>)
 800a806:	801a      	strh	r2, [r3, #0]
		sr_integrate += sr_error;
 800a808:	4b4a      	ldr	r3, [pc, #296]	; (800a934 <ADC_Get_Data+0x250>)
 800a80a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a80e:	b29a      	uxth	r2, r3
 800a810:	4b43      	ldr	r3, [pc, #268]	; (800a920 <ADC_Get_Data+0x23c>)
 800a812:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a816:	b29b      	uxth	r3, r3
 800a818:	4413      	add	r3, r2
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	b21a      	sxth	r2, r3
 800a81e:	4b45      	ldr	r3, [pc, #276]	; (800a934 <ADC_Get_Data+0x250>)
 800a820:	801a      	strh	r2, [r3, #0]

		count ++;
 800a822:	4b45      	ldr	r3, [pc, #276]	; (800a938 <ADC_Get_Data+0x254>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3301      	adds	r3, #1
 800a828:	4a43      	ldr	r2, [pc, #268]	; (800a938 <ADC_Get_Data+0x254>)
 800a82a:	6013      	str	r3, [r2, #0]
		if(count == 10){
 800a82c:	4b42      	ldr	r3, [pc, #264]	; (800a938 <ADC_Get_Data+0x254>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b0a      	cmp	r3, #10
 800a832:	d156      	bne.n	800a8e2 <ADC_Get_Data+0x1fe>
			sl_average = (float)sl_integrate / count;
 800a834:	4b3c      	ldr	r3, [pc, #240]	; (800a928 <ADC_Get_Data+0x244>)
 800a836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a83a:	ee07 3a90 	vmov	s15, r3
 800a83e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a842:	4b3d      	ldr	r3, [pc, #244]	; (800a938 <ADC_Get_Data+0x254>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	ee07 3a90 	vmov	s15, r3
 800a84a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a84e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a852:	4b3a      	ldr	r3, [pc, #232]	; (800a93c <ADC_Get_Data+0x258>)
 800a854:	edc3 7a00 	vstr	s15, [r3]
			fr_average = (float)fr_integrate / count;
 800a858:	4b34      	ldr	r3, [pc, #208]	; (800a92c <ADC_Get_Data+0x248>)
 800a85a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a85e:	ee07 3a90 	vmov	s15, r3
 800a862:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a866:	4b34      	ldr	r3, [pc, #208]	; (800a938 <ADC_Get_Data+0x254>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	ee07 3a90 	vmov	s15, r3
 800a86e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a876:	4b32      	ldr	r3, [pc, #200]	; (800a940 <ADC_Get_Data+0x25c>)
 800a878:	edc3 7a00 	vstr	s15, [r3]
			fl_average = (float)fl_integrate / count;
 800a87c:	4b2c      	ldr	r3, [pc, #176]	; (800a930 <ADC_Get_Data+0x24c>)
 800a87e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a882:	ee07 3a90 	vmov	s15, r3
 800a886:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a88a:	4b2b      	ldr	r3, [pc, #172]	; (800a938 <ADC_Get_Data+0x254>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	ee07 3a90 	vmov	s15, r3
 800a892:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a89a:	4b2a      	ldr	r3, [pc, #168]	; (800a944 <ADC_Get_Data+0x260>)
 800a89c:	edc3 7a00 	vstr	s15, [r3]
			sr_average = (float)sr_integrate / count;
 800a8a0:	4b24      	ldr	r3, [pc, #144]	; (800a934 <ADC_Get_Data+0x250>)
 800a8a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8a6:	ee07 3a90 	vmov	s15, r3
 800a8aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a8ae:	4b22      	ldr	r3, [pc, #136]	; (800a938 <ADC_Get_Data+0x254>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	ee07 3a90 	vmov	s15, r3
 800a8b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8be:	4b22      	ldr	r3, [pc, #136]	; (800a948 <ADC_Get_Data+0x264>)
 800a8c0:	edc3 7a00 	vstr	s15, [r3]


			sl_integrate = 0;
 800a8c4:	4b18      	ldr	r3, [pc, #96]	; (800a928 <ADC_Get_Data+0x244>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	801a      	strh	r2, [r3, #0]
			fr_integrate = 0;
 800a8ca:	4b18      	ldr	r3, [pc, #96]	; (800a92c <ADC_Get_Data+0x248>)
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	801a      	strh	r2, [r3, #0]
			fl_integrate = 0;
 800a8d0:	4b17      	ldr	r3, [pc, #92]	; (800a930 <ADC_Get_Data+0x24c>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	801a      	strh	r2, [r3, #0]
			sr_integrate = 0;
 800a8d6:	4b17      	ldr	r3, [pc, #92]	; (800a934 <ADC_Get_Data+0x250>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	801a      	strh	r2, [r3, #0]

			count = 0;
 800a8dc:	4b16      	ldr	r3, [pc, #88]	; (800a938 <ADC_Get_Data+0x254>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	601a      	str	r2, [r3, #0]
		}

#endif
}
 800a8e2:	bf00      	nop
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	20000300 	.word	0x20000300
 800a8f0:	2000448c 	.word	0x2000448c
 800a8f4:	20000028 	.word	0x20000028
 800a8f8:	20000308 	.word	0x20000308
 800a8fc:	2000030e 	.word	0x2000030e
 800a900:	200051f6 	.word	0x200051f6
 800a904:	20004490 	.word	0x20004490
 800a908:	2000448e 	.word	0x2000448e
 800a90c:	20000312 	.word	0x20000312
 800a910:	20000314 	.word	0x20000314
 800a914:	20000310 	.word	0x20000310
 800a918:	20000316 	.word	0x20000316
 800a91c:	200043b8 	.word	0x200043b8
 800a920:	200044dc 	.word	0x200044dc
 800a924:	2000525c 	.word	0x2000525c
 800a928:	20004496 	.word	0x20004496
 800a92c:	200045c8 	.word	0x200045c8
 800a930:	2000457c 	.word	0x2000457c
 800a934:	20004520 	.word	0x20004520
 800a938:	20004358 	.word	0x20004358
 800a93c:	20005258 	.word	0x20005258
 800a940:	20004fb0 	.word	0x20004fb0
 800a944:	200043bc 	.word	0x200043bc
 800a948:	20004498 	.word	0x20004498

0800a94c <Velocity_Get>:
float Velocity_Get(float EN, float T){ // TIM2,TIM5の割り込み周
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	ed87 0a01 	vstr	s0, [r7, #4]
 800a956:	edc7 0a00 	vstr	s1, [r7]

 float Circumference, TirePulse_of_Circumference, velocity;

    Circumference = TIRE_DEAMETER * PI; // 周
 800a95a:	4b0f      	ldr	r3, [pc, #60]	; (800a998 <Velocity_Get+0x4c>)
 800a95c:	617b      	str	r3, [r7, #20]
    TirePulse_of_Circumference = ENCODER_PULSE * REDUCATION_RATIO; // タイヤ周のパルス
 800a95e:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 800a962:	613b      	str	r3, [r7, #16]
    velocity = EN * (Circumference /TirePulse_of_Circumference)/ T; //a 1パルスで進距離 * パルス数/制御周
 800a964:	edd7 6a05 	vldr	s13, [r7, #20]
 800a968:	edd7 7a04 	vldr	s15, [r7, #16]
 800a96c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a970:	edd7 7a01 	vldr	s15, [r7, #4]
 800a974:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a978:	ed97 7a00 	vldr	s14, [r7]
 800a97c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a980:	edc7 7a03 	vstr	s15, [r7, #12]

    return velocity;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	ee07 3a90 	vmov	s15, r3

	 //TIM3 or 4 // 0.0012329102 = ( 20.2mm *) / (4096 * 4)
}
 800a98a:	eeb0 0a67 	vmov.f32	s0, s15
 800a98e:	371c      	adds	r7, #28
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr
 800a998:	42816f02 	.word	0x42816f02

0800a99c <Encoder_Reset>:


}


void Encoder_Reset(){
 800a99c:	b480      	push	{r7}
 800a99e:	af00      	add	r7, sp, #0
    TIM3 -> CNT = 30000 - 1;
 800a9a0:	4b06      	ldr	r3, [pc, #24]	; (800a9bc <Encoder_Reset+0x20>)
 800a9a2:	f247 522f 	movw	r2, #29999	; 0x752f
 800a9a6:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = 30000 - 1;
 800a9a8:	4b05      	ldr	r3, [pc, #20]	; (800a9c0 <Encoder_Reset+0x24>)
 800a9aa:	f247 522f 	movw	r2, #29999	; 0x752f
 800a9ae:	625a      	str	r2, [r3, #36]	; 0x24

}
 800a9b0:	bf00      	nop
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop
 800a9bc:	40000400 	.word	0x40000400
 800a9c0:	40000800 	.word	0x40000800

0800a9c4 <Encoder_Count>:
int16_t Encoder_Count(int16_t mode){
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	80fb      	strh	r3, [r7, #6]

	if(mode == 0){
 800a9ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d102      	bne.n	800a9dc <Encoder_Count+0x18>

		mode = 0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	80fb      	strh	r3, [r7, #6]
 800a9da:	e030      	b.n	800aa3e <Encoder_Count+0x7a>
	  }
	  else if(mode == 1){
 800a9dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d12c      	bne.n	800aa3e <Encoder_Count+0x7a>
	    EN3_L.integrate += EN3_L.count;
 800a9e4:	4b1a      	ldr	r3, [pc, #104]	; (800aa50 <Encoder_Count+0x8c>)
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	4b19      	ldr	r3, [pc, #100]	; (800aa50 <Encoder_Count+0x8c>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	4a18      	ldr	r2, [pc, #96]	; (800aa50 <Encoder_Count+0x8c>)
 800a9f0:	6053      	str	r3, [r2, #4]
	    EN4_R.integrate += EN4_R.count;
 800a9f2:	4b18      	ldr	r3, [pc, #96]	; (800aa54 <Encoder_Count+0x90>)
 800a9f4:	685a      	ldr	r2, [r3, #4]
 800a9f6:	4b17      	ldr	r3, [pc, #92]	; (800aa54 <Encoder_Count+0x90>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	4a15      	ldr	r2, [pc, #84]	; (800aa54 <Encoder_Count+0x90>)
 800a9fe:	6053      	str	r3, [r2, #4]
	    EN_Body.integrate = (float)(EN3_L.integrate + EN4_R.integrate)/2;
 800aa00:	4b13      	ldr	r3, [pc, #76]	; (800aa50 <Encoder_Count+0x8c>)
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	4b13      	ldr	r3, [pc, #76]	; (800aa54 <Encoder_Count+0x90>)
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	4413      	add	r3, r2
 800aa0a:	ee07 3a90 	vmov	s15, r3
 800aa0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa12:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800aa16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa1e:	ee17 2a90 	vmov	r2, s15
 800aa22:	4b0d      	ldr	r3, [pc, #52]	; (800aa58 <Encoder_Count+0x94>)
 800aa24:	605a      	str	r2, [r3, #4]
	    All_Pulse_cut += EN3_L.count + EN4_R.count;
 800aa26:	4b0a      	ldr	r3, [pc, #40]	; (800aa50 <Encoder_Count+0x8c>)
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	4b0a      	ldr	r3, [pc, #40]	; (800aa54 <Encoder_Count+0x90>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	441a      	add	r2, r3
 800aa30:	4b0a      	ldr	r3, [pc, #40]	; (800aa5c <Encoder_Count+0x98>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4413      	add	r3, r2
 800aa36:	4a09      	ldr	r2, [pc, #36]	; (800aa5c <Encoder_Count+0x98>)
 800aa38:	6013      	str	r3, [r2, #0]
	    mode =1;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	80fb      	strh	r3, [r7, #6]

	  }
	return mode;
 800aa3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	20000050 	.word	0x20000050
 800aa54:	2000005c 	.word	0x2000005c
 800aa58:	20000068 	.word	0x20000068
 800aa5c:	200002f8 	.word	0x200002f8

0800aa60 <wait>:
//o 走行用の関数
//Motion.cとMotion.hにまとめる
//時間待ち関数

void wait(double wait_second)
{
 800aa60:	b590      	push	{r4, r7, lr}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	ed87 0b00 	vstr	d0, [r7]
	//グローバル変数のtimerを使う
	//いらない制御を切って待つ。か、つけっぱなし。
	//つけっぱなしのパターン
	//待った先の時間 - 現在の時間
	//待ちたい時間
	double starting_point_of_time = elapsed_time;
 800aa6a:	4b0f      	ldr	r3, [pc, #60]	; (800aaa8 <wait+0x48>)
 800aa6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa70:	e9c7 3402 	strd	r3, r4, [r7, #8]
	while(starting_point_of_time + wait_second > elapsed_time)
 800aa74:	bf00      	nop
 800aa76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa7e:	f7fd fb3d 	bl	80080fc <__adddf3>
 800aa82:	4603      	mov	r3, r0
 800aa84:	460c      	mov	r4, r1
 800aa86:	4618      	mov	r0, r3
 800aa88:	4621      	mov	r1, r4
 800aa8a:	4b07      	ldr	r3, [pc, #28]	; (800aaa8 <wait+0x48>)
 800aa8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa90:	461a      	mov	r2, r3
 800aa92:	4623      	mov	r3, r4
 800aa94:	f7fd ff78 	bl	8008988 <__aeabi_dcmpgt>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1eb      	bne.n	800aa76 <wait+0x16>
	{

	}

	//いらない制御を切るパターン
}
 800aa9e:	bf00      	nop
 800aaa0:	3714      	adds	r7, #20
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd90      	pop	{r4, r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	200002f0 	.word	0x200002f0
 800aaac:	00000000 	.word	0x00000000

0800aab0 <Start_Accel>:


void Start_Accel(){
 800aab0:	b580      	push	{r7, lr}
 800aab2:	af00      	add	r7, sp, #0
	error_reset = 0;
 800aab4:	4b22      	ldr	r3, [pc, #136]	; (800ab40 <Start_Accel+0x90>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800aaba:	f7fe ff27 	bl	800990c <Motor_Count_Clear>
	//IMU_init();

    EN3_L.integrate = 0;
 800aabe:	4b21      	ldr	r3, [pc, #132]	; (800ab44 <Start_Accel+0x94>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800aac4:	4b20      	ldr	r3, [pc, #128]	; (800ab48 <Start_Accel+0x98>)
 800aac6:	2200      	movs	r2, #0
 800aac8:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800aaca:	4b20      	ldr	r3, [pc, #128]	; (800ab4c <Start_Accel+0x9c>)
 800aacc:	2200      	movs	r2, #0
 800aace:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800aad0:	4b1f      	ldr	r3, [pc, #124]	; (800ab50 <Start_Accel+0xa0>)
 800aad2:	2201      	movs	r2, #1
 800aad4:	70da      	strb	r2, [r3, #3]

	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < START_ACCEL_PULSE * 2){
 800aad6:	e005      	b.n	800aae4 <Start_Accel+0x34>
		mode.control = 4;
 800aad8:	4b1d      	ldr	r3, [pc, #116]	; (800ab50 <Start_Accel+0xa0>)
 800aada:	2204      	movs	r2, #4
 800aadc:	715a      	strb	r2, [r3, #5]
		mode.accel= 1;
 800aade:	4b1c      	ldr	r3, [pc, #112]	; (800ab50 <Start_Accel+0xa0>)
 800aae0:	2201      	movs	r2, #1
 800aae2:	705a      	strb	r2, [r3, #1]
	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < START_ACCEL_PULSE * 2){
 800aae4:	4b17      	ldr	r3, [pc, #92]	; (800ab44 <Start_Accel+0x94>)
 800aae6:	685a      	ldr	r2, [r3, #4]
 800aae8:	4b17      	ldr	r3, [pc, #92]	; (800ab48 <Start_Accel+0x98>)
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	4413      	add	r3, r2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	db0f      	blt.n	800ab12 <Start_Accel+0x62>
 800aaf2:	4b14      	ldr	r3, [pc, #80]	; (800ab44 <Start_Accel+0x94>)
 800aaf4:	685a      	ldr	r2, [r3, #4]
 800aaf6:	4b14      	ldr	r3, [pc, #80]	; (800ab48 <Start_Accel+0x98>)
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	4413      	add	r3, r2
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fd fc49 	bl	8008394 <__aeabi_i2d>
 800ab02:	a30d      	add	r3, pc, #52	; (adr r3, 800ab38 <Start_Accel+0x88>)
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	f7fd ff20 	bl	800894c <__aeabi_dcmplt>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1e2      	bne.n	800aad8 <Start_Accel+0x28>
	}
	mode.accel = 0;
 800ab12:	4b0f      	ldr	r3, [pc, #60]	; (800ab50 <Start_Accel+0xa0>)
 800ab14:	2200      	movs	r2, #0
 800ab16:	705a      	strb	r2, [r3, #1]
	Target_velocity = SEARCH_SPEED;
 800ab18:	4b0e      	ldr	r3, [pc, #56]	; (800ab54 <Start_Accel+0xa4>)
 800ab1a:	4a0f      	ldr	r2, [pc, #60]	; (800ab58 <Start_Accel+0xa8>)
 800ab1c:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800ab1e:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <Start_Accel+0x94>)
 800ab20:	2200      	movs	r2, #0
 800ab22:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ab24:	4b08      	ldr	r3, [pc, #32]	; (800ab48 <Start_Accel+0x98>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ab2a:	4b08      	ldr	r3, [pc, #32]	; (800ab4c <Start_Accel+0x9c>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	605a      	str	r2, [r3, #4]

}
 800ab30:	bf00      	nop
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	f3af 8000 	nop.w
 800ab38:	63ed7f78 	.word	0x63ed7f78
 800ab3c:	40ee8874 	.word	0x40ee8874
 800ab40:	2000027c 	.word	0x2000027c
 800ab44:	20000050 	.word	0x20000050
 800ab48:	2000005c 	.word	0x2000005c
 800ab4c:	20000068 	.word	0x20000068
 800ab50:	20000074 	.word	0x20000074
 800ab54:	200002b8 	.word	0x200002b8
 800ab58:	436b0000 	.word	0x436b0000
 800ab5c:	00000000 	.word	0x00000000

0800ab60 <Accelerate>:

void Accelerate(){
 800ab60:	b580      	push	{r7, lr}
 800ab62:	af00      	add	r7, sp, #0

	error_reset = 0;
 800ab64:	4b4a      	ldr	r3, [pc, #296]	; (800ac90 <Accelerate+0x130>)
 800ab66:	2200      	movs	r2, #0
 800ab68:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ab6a:	f7fe fecf 	bl	800990c <Motor_Count_Clear>
	//IMU_init();

	mode.control = 3;
 800ab6e:	4b49      	ldr	r3, [pc, #292]	; (800ac94 <Accelerate+0x134>)
 800ab70:	2203      	movs	r2, #3
 800ab72:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800ab74:	4b48      	ldr	r3, [pc, #288]	; (800ac98 <Accelerate+0x138>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ab7a:	4b48      	ldr	r3, [pc, #288]	; (800ac9c <Accelerate+0x13c>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ab80:	4b47      	ldr	r3, [pc, #284]	; (800aca0 <Accelerate+0x140>)
 800ab82:	2200      	movs	r2, #0
 800ab84:	605a      	str	r2, [r3, #4]
	mode.enc = 1;
 800ab86:	4b43      	ldr	r3, [pc, #268]	; (800ac94 <Accelerate+0x134>)
 800ab88:	2201      	movs	r2, #1
 800ab8a:	70da      	strb	r2, [r3, #3]

	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < ACCE_DECE_PULSE * 2){
 800ab8c:	e04d      	b.n	800ac2a <Accelerate+0xca>

		mode.accel = 2;
 800ab8e:	4b41      	ldr	r3, [pc, #260]	; (800ac94 <Accelerate+0x134>)
 800ab90:	2202      	movs	r2, #2
 800ab92:	705a      	strb	r2, [r3, #1]
#if 1
		if(WALL_JUDGE_PULSE * 2 < EN3_L.integrate + EN4_R.integrate){
 800ab94:	4b40      	ldr	r3, [pc, #256]	; (800ac98 <Accelerate+0x138>)
 800ab96:	685a      	ldr	r2, [r3, #4]
 800ab98:	4b40      	ldr	r3, [pc, #256]	; (800ac9c <Accelerate+0x13c>)
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fd fbf8 	bl	8008394 <__aeabi_i2d>
 800aba4:	a336      	add	r3, pc, #216	; (adr r3, 800ac80 <Accelerate+0x120>)
 800aba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abaa:	f7fd feed 	bl	8008988 <__aeabi_dcmpgt>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d037      	beq.n	800ac24 <Accelerate+0xc4>
			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800abb4:	4b3b      	ldr	r3, [pc, #236]	; (800aca4 <Accelerate+0x144>)
 800abb6:	edd3 7a00 	vldr	s15, [r3]
 800abba:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800aca8 <Accelerate+0x148>
 800abbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc6:	dd0d      	ble.n	800abe4 <Accelerate+0x84>
 800abc8:	4b38      	ldr	r3, [pc, #224]	; (800acac <Accelerate+0x14c>)
 800abca:	edd3 7a00 	vldr	s15, [r3]
 800abce:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800acb0 <Accelerate+0x150>
 800abd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abda:	dd03      	ble.n	800abe4 <Accelerate+0x84>
				  mode.control = 0;
 800abdc:	4b2d      	ldr	r3, [pc, #180]	; (800ac94 <Accelerate+0x134>)
 800abde:	2200      	movs	r2, #0
 800abe0:	715a      	strb	r2, [r3, #5]
 800abe2:	e022      	b.n	800ac2a <Accelerate+0xca>

				 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
		    }
			else if(fl_average > LEFT_WALL){
 800abe4:	4b31      	ldr	r3, [pc, #196]	; (800acac <Accelerate+0x14c>)
 800abe6:	edd3 7a00 	vldr	s15, [r3]
 800abea:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800acb0 <Accelerate+0x150>
 800abee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abf6:	dd03      	ble.n	800ac00 <Accelerate+0xa0>
				  mode.control = 1;
 800abf8:	4b26      	ldr	r3, [pc, #152]	; (800ac94 <Accelerate+0x134>)
 800abfa:	2201      	movs	r2, #1
 800abfc:	715a      	strb	r2, [r3, #5]
 800abfe:	e014      	b.n	800ac2a <Accelerate+0xca>
				 // Left_Wall_Control();
		    }
			else if(fr_average > RIGHT_WALL){
 800ac00:	4b28      	ldr	r3, [pc, #160]	; (800aca4 <Accelerate+0x144>)
 800ac02:	edd3 7a00 	vldr	s15, [r3]
 800ac06:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800aca8 <Accelerate+0x148>
 800ac0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac12:	dd03      	ble.n	800ac1c <Accelerate+0xbc>
				  mode.control = 2;
 800ac14:	4b1f      	ldr	r3, [pc, #124]	; (800ac94 <Accelerate+0x134>)
 800ac16:	2202      	movs	r2, #2
 800ac18:	715a      	strb	r2, [r3, #5]
 800ac1a:	e006      	b.n	800ac2a <Accelerate+0xca>
							 // Right_Wall_Control();
		    }
			else mode.control = 4;
 800ac1c:	4b1d      	ldr	r3, [pc, #116]	; (800ac94 <Accelerate+0x134>)
 800ac1e:	2204      	movs	r2, #4
 800ac20:	715a      	strb	r2, [r3, #5]
 800ac22:	e002      	b.n	800ac2a <Accelerate+0xca>
		}
		else mode.control = 4;
 800ac24:	4b1b      	ldr	r3, [pc, #108]	; (800ac94 <Accelerate+0x134>)
 800ac26:	2204      	movs	r2, #4
 800ac28:	715a      	strb	r2, [r3, #5]
	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < ACCE_DECE_PULSE * 2){
 800ac2a:	4b1b      	ldr	r3, [pc, #108]	; (800ac98 <Accelerate+0x138>)
 800ac2c:	685a      	ldr	r2, [r3, #4]
 800ac2e:	4b1b      	ldr	r3, [pc, #108]	; (800ac9c <Accelerate+0x13c>)
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	4413      	add	r3, r2
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	db0f      	blt.n	800ac58 <Accelerate+0xf8>
 800ac38:	4b17      	ldr	r3, [pc, #92]	; (800ac98 <Accelerate+0x138>)
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	4b17      	ldr	r3, [pc, #92]	; (800ac9c <Accelerate+0x13c>)
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	4413      	add	r3, r2
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fd fba6 	bl	8008394 <__aeabi_i2d>
 800ac48:	a30f      	add	r3, pc, #60	; (adr r3, 800ac88 <Accelerate+0x128>)
 800ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4e:	f7fd fe7d 	bl	800894c <__aeabi_dcmplt>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d19a      	bne.n	800ab8e <Accelerate+0x2e>
	}
#else
	mode.control = 3;
}
#endif
	mode.accel = 0;
 800ac58:	4b0e      	ldr	r3, [pc, #56]	; (800ac94 <Accelerate+0x134>)
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	705a      	strb	r2, [r3, #1]
	Target_velocity = SEARCH_SPEED;
 800ac5e:	4b15      	ldr	r3, [pc, #84]	; (800acb4 <Accelerate+0x154>)
 800ac60:	4a15      	ldr	r2, [pc, #84]	; (800acb8 <Accelerate+0x158>)
 800ac62:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800ac64:	4b0c      	ldr	r3, [pc, #48]	; (800ac98 <Accelerate+0x138>)
 800ac66:	2200      	movs	r2, #0
 800ac68:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ac6a:	4b0c      	ldr	r3, [pc, #48]	; (800ac9c <Accelerate+0x13c>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ac70:	4b0b      	ldr	r3, [pc, #44]	; (800aca0 <Accelerate+0x140>)
 800ac72:	2200      	movs	r2, #0
 800ac74:	605a      	str	r2, [r3, #4]

}
 800ac76:	bf00      	nop
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	f3af 8000 	nop.w
 800ac80:	f298ebe1 	.word	0xf298ebe1
 800ac84:	40d8b91c 	.word	0x40d8b91c
 800ac88:	a7233ab1 	.word	0xa7233ab1
 800ac8c:	40e64033 	.word	0x40e64033
 800ac90:	2000027c 	.word	0x2000027c
 800ac94:	20000074 	.word	0x20000074
 800ac98:	20000050 	.word	0x20000050
 800ac9c:	2000005c 	.word	0x2000005c
 800aca0:	20000068 	.word	0x20000068
 800aca4:	20004fb0 	.word	0x20004fb0
 800aca8:	42c80000 	.word	0x42c80000
 800acac:	200043bc 	.word	0x200043bc
 800acb0:	430c0000 	.word	0x430c0000
 800acb4:	200002b8 	.word	0x200002b8
 800acb8:	436b0000 	.word	0x436b0000
 800acbc:	00000000 	.word	0x00000000

0800acc0 <Decelerate>:
void Decelerate(){
 800acc0:	b580      	push	{r7, lr}
 800acc2:	af00      	add	r7, sp, #0


	//IMU_init();
	//mode.control = 4;

	mode.control = 3;
 800acc4:	4b4c      	ldr	r3, [pc, #304]	; (800adf8 <Decelerate+0x138>)
 800acc6:	2203      	movs	r2, #3
 800acc8:	715a      	strb	r2, [r3, #5]
	//printf("%d\r\n",EN3_L.integrate + EN4_R.integrate);
	while( (EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2) &&  ( (sl_average + sr_average )/2 < 1850)){
 800acca:	e055      	b.n	800ad78 <Decelerate+0xb8>
		mode.accel = 3;
 800accc:	4b4a      	ldr	r3, [pc, #296]	; (800adf8 <Decelerate+0x138>)
 800acce:	2203      	movs	r2, #3
 800acd0:	705a      	strb	r2, [r3, #1]
		printf("%d , %d\r\n",EN3_L.integrate , EN4_R.integrate);
 800acd2:	4b4a      	ldr	r3, [pc, #296]	; (800adfc <Decelerate+0x13c>)
 800acd4:	6859      	ldr	r1, [r3, #4]
 800acd6:	4b4a      	ldr	r3, [pc, #296]	; (800ae00 <Decelerate+0x140>)
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	461a      	mov	r2, r3
 800acdc:	4849      	ldr	r0, [pc, #292]	; (800ae04 <Decelerate+0x144>)
 800acde:	f00b f9ff 	bl	80160e0 <iprintf>
#if 1
		if(EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2 - (WALL_JUDGE_PULSE  * 2 *3/5) ){//ここの閾値の意味:減速する距離は半区画 -
 800ace2:	4b46      	ldr	r3, [pc, #280]	; (800adfc <Decelerate+0x13c>)
 800ace4:	685a      	ldr	r2, [r3, #4]
 800ace6:	4b46      	ldr	r3, [pc, #280]	; (800ae00 <Decelerate+0x140>)
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	4413      	add	r3, r2
 800acec:	4618      	mov	r0, r3
 800acee:	f7fd fb51 	bl	8008394 <__aeabi_i2d>
 800acf2:	a33d      	add	r3, pc, #244	; (adr r3, 800ade8 <Decelerate+0x128>)
 800acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf8:	f7fd fe28 	bl	800894c <__aeabi_dcmplt>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d037      	beq.n	800ad72 <Decelerate+0xb2>
		  if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800ad02:	4b41      	ldr	r3, [pc, #260]	; (800ae08 <Decelerate+0x148>)
 800ad04:	edd3 7a00 	vldr	s15, [r3]
 800ad08:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800ae0c <Decelerate+0x14c>
 800ad0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad14:	dd0d      	ble.n	800ad32 <Decelerate+0x72>
 800ad16:	4b3e      	ldr	r3, [pc, #248]	; (800ae10 <Decelerate+0x150>)
 800ad18:	edd3 7a00 	vldr	s15, [r3]
 800ad1c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800ae14 <Decelerate+0x154>
 800ad20:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad28:	dd03      	ble.n	800ad32 <Decelerate+0x72>
			  mode.control = 0;
 800ad2a:	4b33      	ldr	r3, [pc, #204]	; (800adf8 <Decelerate+0x138>)
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	715a      	strb	r2, [r3, #5]
 800ad30:	e022      	b.n	800ad78 <Decelerate+0xb8>

			 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
	      }
		  else if(fl_average > LEFT_WALL){
 800ad32:	4b37      	ldr	r3, [pc, #220]	; (800ae10 <Decelerate+0x150>)
 800ad34:	edd3 7a00 	vldr	s15, [r3]
 800ad38:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ae14 <Decelerate+0x154>
 800ad3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad44:	dd03      	ble.n	800ad4e <Decelerate+0x8e>
			  mode.control = 1;
 800ad46:	4b2c      	ldr	r3, [pc, #176]	; (800adf8 <Decelerate+0x138>)
 800ad48:	2201      	movs	r2, #1
 800ad4a:	715a      	strb	r2, [r3, #5]
 800ad4c:	e014      	b.n	800ad78 <Decelerate+0xb8>
			 // Left_Wall_Control();
	      }
		  else if(fr_average > RIGHT_WALL){
 800ad4e:	4b2e      	ldr	r3, [pc, #184]	; (800ae08 <Decelerate+0x148>)
 800ad50:	edd3 7a00 	vldr	s15, [r3]
 800ad54:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800ae0c <Decelerate+0x14c>
 800ad58:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad60:	dd03      	ble.n	800ad6a <Decelerate+0xaa>
			  mode.control = 2;
 800ad62:	4b25      	ldr	r3, [pc, #148]	; (800adf8 <Decelerate+0x138>)
 800ad64:	2202      	movs	r2, #2
 800ad66:	715a      	strb	r2, [r3, #5]
 800ad68:	e006      	b.n	800ad78 <Decelerate+0xb8>
						 // Right_Wall_Control();
	      }
		  else mode.control = 4;
 800ad6a:	4b23      	ldr	r3, [pc, #140]	; (800adf8 <Decelerate+0x138>)
 800ad6c:	2204      	movs	r2, #4
 800ad6e:	715a      	strb	r2, [r3, #5]
 800ad70:	e002      	b.n	800ad78 <Decelerate+0xb8>
		}
		else mode.control = 4;
 800ad72:	4b21      	ldr	r3, [pc, #132]	; (800adf8 <Decelerate+0x138>)
 800ad74:	2204      	movs	r2, #4
 800ad76:	715a      	strb	r2, [r3, #5]
	while( (EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2) &&  ( (sl_average + sr_average )/2 < 1850)){
 800ad78:	4b20      	ldr	r3, [pc, #128]	; (800adfc <Decelerate+0x13c>)
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	4b20      	ldr	r3, [pc, #128]	; (800ae00 <Decelerate+0x140>)
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	4413      	add	r3, r2
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fd fb06 	bl	8008394 <__aeabi_i2d>
 800ad88:	a319      	add	r3, pc, #100	; (adr r3, 800adf0 <Decelerate+0x130>)
 800ad8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8e:	f7fd fddd 	bl	800894c <__aeabi_dcmplt>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d012      	beq.n	800adbe <Decelerate+0xfe>
 800ad98:	4b1f      	ldr	r3, [pc, #124]	; (800ae18 <Decelerate+0x158>)
 800ad9a:	ed93 7a00 	vldr	s14, [r3]
 800ad9e:	4b1f      	ldr	r3, [pc, #124]	; (800ae1c <Decelerate+0x15c>)
 800ada0:	edd3 7a00 	vldr	s15, [r3]
 800ada4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ada8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800adac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800adb0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800ae20 <Decelerate+0x160>
 800adb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adbc:	d486      	bmi.n	800accc <Decelerate+0xc>
#else
	mode.control = 3;
}
#endif

	mode.accel = 0;
 800adbe:	4b0e      	ldr	r3, [pc, #56]	; (800adf8 <Decelerate+0x138>)
 800adc0:	2200      	movs	r2, #0
 800adc2:	705a      	strb	r2, [r3, #1]
	mode.control = 5;
 800adc4:	4b0c      	ldr	r3, [pc, #48]	; (800adf8 <Decelerate+0x138>)
 800adc6:	2205      	movs	r2, #5
 800adc8:	715a      	strb	r2, [r3, #5]
	Target_velocity = 0;
 800adca:	4b16      	ldr	r3, [pc, #88]	; (800ae24 <Decelerate+0x164>)
 800adcc:	f04f 0200 	mov.w	r2, #0
 800add0:	601a      	str	r2, [r3, #0]
	mode.enc = 0;
 800add2:	4b09      	ldr	r3, [pc, #36]	; (800adf8 <Decelerate+0x138>)
 800add4:	2200      	movs	r2, #0
 800add6:	70da      	strb	r2, [r3, #3]
	error_reset = 0;
 800add8:	4b13      	ldr	r3, [pc, #76]	; (800ae28 <Decelerate+0x168>)
 800adda:	2200      	movs	r2, #0
 800addc:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800adde:	f7fe fd95 	bl	800990c <Motor_Count_Clear>


	//printf("減�?????��?��??��?��???��?��??��?��した???��?��??��?��?\r\n");
}
 800ade2:	bf00      	nop
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	89844e41 	.word	0x89844e41
 800adec:	40ddaaef 	.word	0x40ddaaef
 800adf0:	a7233ab1 	.word	0xa7233ab1
 800adf4:	40e64033 	.word	0x40e64033
 800adf8:	20000074 	.word	0x20000074
 800adfc:	20000050 	.word	0x20000050
 800ae00:	2000005c 	.word	0x2000005c
 800ae04:	08017fdc 	.word	0x08017fdc
 800ae08:	20004fb0 	.word	0x20004fb0
 800ae0c:	42c80000 	.word	0x42c80000
 800ae10:	200043bc 	.word	0x200043bc
 800ae14:	430c0000 	.word	0x430c0000
 800ae18:	20005258 	.word	0x20005258
 800ae1c:	20004498 	.word	0x20004498
 800ae20:	44e74000 	.word	0x44e74000
 800ae24:	200002b8 	.word	0x200002b8
 800ae28:	2000027c 	.word	0x2000027c
 800ae2c:	00000000 	.word	0x00000000

0800ae30 <straight>:

			return Velocity;


}
void straight(){ //uint8_t block_num
 800ae30:	b5b0      	push	{r4, r5, r7, lr}
 800ae32:	af00      	add	r7, sp, #0
//    EN3_L.integrate = 0;
//    EN4_R.integrate = 0;
//	  EN_Body.integrate = 0;
//    mode.enc = 1;

  while(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 ){
 800ae34:	e07e      	b.n	800af34 <straight+0x104>
#if 1
	  if(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 *0.45 || Target_pulse * 2 - (WALL_JUDGE_PULSE * 12/5) < EN3_L.integrate + EN4_R.integrate){
 800ae36:	4b54      	ldr	r3, [pc, #336]	; (800af88 <straight+0x158>)
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	4b54      	ldr	r3, [pc, #336]	; (800af8c <straight+0x15c>)
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	4413      	add	r3, r2
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fd faa7 	bl	8008394 <__aeabi_i2d>
 800ae46:	4604      	mov	r4, r0
 800ae48:	460d      	mov	r5, r1
 800ae4a:	4b51      	ldr	r3, [pc, #324]	; (800af90 <straight+0x160>)
 800ae4c:	edd3 7a00 	vldr	s15, [r3]
 800ae50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ae54:	ee17 0a90 	vmov	r0, s15
 800ae58:	f7fd faae 	bl	80083b8 <__aeabi_f2d>
 800ae5c:	a346      	add	r3, pc, #280	; (adr r3, 800af78 <straight+0x148>)
 800ae5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae62:	f7fd fb01 	bl	8008468 <__aeabi_dmul>
 800ae66:	4602      	mov	r2, r0
 800ae68:	460b      	mov	r3, r1
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	f7fd fd6d 	bl	800894c <__aeabi_dcmplt>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d122      	bne.n	800aebe <straight+0x8e>
 800ae78:	4b45      	ldr	r3, [pc, #276]	; (800af90 <straight+0x160>)
 800ae7a:	edd3 7a00 	vldr	s15, [r3]
 800ae7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ae82:	ee17 0a90 	vmov	r0, s15
 800ae86:	f7fd fa97 	bl	80083b8 <__aeabi_f2d>
 800ae8a:	a33d      	add	r3, pc, #244	; (adr r3, 800af80 <straight+0x150>)
 800ae8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae90:	f7fd f932 	bl	80080f8 <__aeabi_dsub>
 800ae94:	4603      	mov	r3, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	4625      	mov	r5, r4
 800ae9a:	461c      	mov	r4, r3
 800ae9c:	4b3a      	ldr	r3, [pc, #232]	; (800af88 <straight+0x158>)
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	4b3a      	ldr	r3, [pc, #232]	; (800af8c <straight+0x15c>)
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	4413      	add	r3, r2
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fd fa74 	bl	8008394 <__aeabi_i2d>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	f7fd fd4a 	bl	800894c <__aeabi_dcmplt>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d037      	beq.n	800af2e <straight+0xfe>

			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800aebe:	4b35      	ldr	r3, [pc, #212]	; (800af94 <straight+0x164>)
 800aec0:	edd3 7a00 	vldr	s15, [r3]
 800aec4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800af98 <straight+0x168>
 800aec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed0:	dd0d      	ble.n	800aeee <straight+0xbe>
 800aed2:	4b32      	ldr	r3, [pc, #200]	; (800af9c <straight+0x16c>)
 800aed4:	edd3 7a00 	vldr	s15, [r3]
 800aed8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800afa0 <straight+0x170>
 800aedc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee4:	dd03      	ble.n	800aeee <straight+0xbe>
				  mode.control = 0;
 800aee6:	4b2f      	ldr	r3, [pc, #188]	; (800afa4 <straight+0x174>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	715a      	strb	r2, [r3, #5]
 800aeec:	e01e      	b.n	800af2c <straight+0xfc>

				 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
		    }
			else if(fl_average > LEFT_WALL){
 800aeee:	4b2b      	ldr	r3, [pc, #172]	; (800af9c <straight+0x16c>)
 800aef0:	edd3 7a00 	vldr	s15, [r3]
 800aef4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800afa0 <straight+0x170>
 800aef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af00:	dd03      	ble.n	800af0a <straight+0xda>
				  mode.control = 1;
 800af02:	4b28      	ldr	r3, [pc, #160]	; (800afa4 <straight+0x174>)
 800af04:	2201      	movs	r2, #1
 800af06:	715a      	strb	r2, [r3, #5]
 800af08:	e014      	b.n	800af34 <straight+0x104>
				 // Left_Wall_Control();
		    }
			else if(fr_average > RIGHT_WALL){
 800af0a:	4b22      	ldr	r3, [pc, #136]	; (800af94 <straight+0x164>)
 800af0c:	edd3 7a00 	vldr	s15, [r3]
 800af10:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800af98 <straight+0x168>
 800af14:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af1c:	dd03      	ble.n	800af26 <straight+0xf6>
				  mode.control = 2;
 800af1e:	4b21      	ldr	r3, [pc, #132]	; (800afa4 <straight+0x174>)
 800af20:	2202      	movs	r2, #2
 800af22:	715a      	strb	r2, [r3, #5]
 800af24:	e006      	b.n	800af34 <straight+0x104>
							 // Right_Wall_Control();
		    }
			else mode.control = 4;
 800af26:	4b1f      	ldr	r3, [pc, #124]	; (800afa4 <straight+0x174>)
 800af28:	2204      	movs	r2, #4
 800af2a:	715a      	strb	r2, [r3, #5]
			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800af2c:	e002      	b.n	800af34 <straight+0x104>
	  }
	  else
		  mode.control = 4;
 800af2e:	4b1d      	ldr	r3, [pc, #116]	; (800afa4 <straight+0x174>)
 800af30:	2204      	movs	r2, #4
 800af32:	715a      	strb	r2, [r3, #5]
  while(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 ){
 800af34:	4b14      	ldr	r3, [pc, #80]	; (800af88 <straight+0x158>)
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	4b14      	ldr	r3, [pc, #80]	; (800af8c <straight+0x15c>)
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	4413      	add	r3, r2
 800af3e:	ee07 3a90 	vmov	s15, r3
 800af42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800af46:	4b12      	ldr	r3, [pc, #72]	; (800af90 <straight+0x160>)
 800af48:	edd3 7a00 	vldr	s15, [r3]
 800af4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800af50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800af54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af58:	f53f af6d 	bmi.w	800ae36 <straight+0x6>
#else

		  mode.control = 3;
  }
#endif
      EN3_L.integrate = 0;
 800af5c:	4b0a      	ldr	r3, [pc, #40]	; (800af88 <straight+0x158>)
 800af5e:	2200      	movs	r2, #0
 800af60:	605a      	str	r2, [r3, #4]
      EN4_R.integrate = 0;
 800af62:	4b0a      	ldr	r3, [pc, #40]	; (800af8c <straight+0x15c>)
 800af64:	2200      	movs	r2, #0
 800af66:	605a      	str	r2, [r3, #4]
      EN_Body.integrate = 0;
 800af68:	4b0f      	ldr	r3, [pc, #60]	; (800afa8 <straight+0x178>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	605a      	str	r2, [r3, #4]
    }

    printf("3区画進んだ??��?��? : %d \r\n",check);

#endif
}
 800af6e:	bf00      	nop
 800af70:	bdb0      	pop	{r4, r5, r7, pc}
 800af72:	bf00      	nop
 800af74:	f3af 8000 	nop.w
 800af78:	cccccccd 	.word	0xcccccccd
 800af7c:	3fdccccc 	.word	0x3fdccccc
 800af80:	89844e42 	.word	0x89844e42
 800af84:	40ddaaef 	.word	0x40ddaaef
 800af88:	20000050 	.word	0x20000050
 800af8c:	2000005c 	.word	0x2000005c
 800af90:	20000000 	.word	0x20000000
 800af94:	20004fb0 	.word	0x20004fb0
 800af98:	42c80000 	.word	0x42c80000
 800af9c:	200043bc 	.word	0x200043bc
 800afa0:	430c0000 	.word	0x430c0000
 800afa4:	20000074 	.word	0x20000074
 800afa8:	20000068 	.word	0x20000068
 800afac:	00000000 	.word	0x00000000

0800afb0 <IMU_turn>:

			return Velocity;

}

void IMU_turn(int8_t target_angle, double target_angle_velo){
 800afb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800afb4:	ed2d 8b02 	vpush	{d8}
 800afb8:	b084      	sub	sp, #16
 800afba:	af00      	add	r7, sp, #0
 800afbc:	4603      	mov	r3, r0
 800afbe:	ed87 0b00 	vstr	d0, [r7]
 800afc2:	73fb      	strb	r3, [r7, #15]
	    Motor_PWM_Start();
 800afc4:	f7fe fff6 	bl	8009fb4 <Motor_PWM_Start>
	    if(target_angle < 0){
 800afc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	da37      	bge.n	800b040 <IMU_turn+0x90>
	     while(target_angle < Body_angle){
 800afd0:	e027      	b.n	800b022 <IMU_turn+0x72>

		   IMU_Control(target_angle_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800afd2:	4b47      	ldr	r3, [pc, #284]	; (800b0f0 <IMU_turn+0x140>)
 800afd4:	ed93 8b00 	vldr	d8, [r3]
 800afd8:	4b46      	ldr	r3, [pc, #280]	; (800b0f4 <IMU_turn+0x144>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4618      	mov	r0, r3
 800afde:	f7fd f9eb 	bl	80083b8 <__aeabi_f2d>
 800afe2:	4604      	mov	r4, r0
 800afe4:	460d      	mov	r5, r1
 800afe6:	4b43      	ldr	r3, [pc, #268]	; (800b0f4 <IMU_turn+0x144>)
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	4618      	mov	r0, r3
 800afec:	f7fd f9e4 	bl	80083b8 <__aeabi_f2d>
 800aff0:	4680      	mov	r8, r0
 800aff2:	4689      	mov	r9, r1
 800aff4:	4b3f      	ldr	r3, [pc, #252]	; (800b0f4 <IMU_turn+0x144>)
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fd f9dd 	bl	80083b8 <__aeabi_f2d>
 800affe:	4602      	mov	r2, r0
 800b000:	460b      	mov	r3, r1
 800b002:	ec43 2b15 	vmov	d5, r2, r3
 800b006:	ec49 8b14 	vmov	d4, r8, r9
 800b00a:	ec45 4b13 	vmov	d3, r4, r5
 800b00e:	ed9f 2b36 	vldr	d2, [pc, #216]	; 800b0e8 <IMU_turn+0x138>
 800b012:	eeb0 1a48 	vmov.f32	s2, s16
 800b016:	eef0 1a68 	vmov.f32	s3, s17
 800b01a:	ed97 0b00 	vldr	d0, [r7]
 800b01e:	f7ff f8cf 	bl	800a1c0 <IMU_Control>
	     while(target_angle < Body_angle){
 800b022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b026:	4618      	mov	r0, r3
 800b028:	f7fd f9b4 	bl	8008394 <__aeabi_i2d>
 800b02c:	4b32      	ldr	r3, [pc, #200]	; (800b0f8 <IMU_turn+0x148>)
 800b02e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b032:	461a      	mov	r2, r3
 800b034:	4623      	mov	r3, r4
 800b036:	f7fd fc89 	bl	800894c <__aeabi_dcmplt>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1c8      	bne.n	800afd2 <IMU_turn+0x22>
		//printf("ジャイロ : %f \r\n", Body_angle*180/ M_PI);
	     }
	    }
	    if(target_angle > 0){
 800b040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b044:	2b00      	cmp	r3, #0
 800b046:	dd37      	ble.n	800b0b8 <IMU_turn+0x108>
	     while(target_angle > Body_angle){
 800b048:	e027      	b.n	800b09a <IMU_turn+0xea>

	       IMU_Control(target_angle_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800b04a:	4b29      	ldr	r3, [pc, #164]	; (800b0f0 <IMU_turn+0x140>)
 800b04c:	ed93 8b00 	vldr	d8, [r3]
 800b050:	4b28      	ldr	r3, [pc, #160]	; (800b0f4 <IMU_turn+0x144>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4618      	mov	r0, r3
 800b056:	f7fd f9af 	bl	80083b8 <__aeabi_f2d>
 800b05a:	4604      	mov	r4, r0
 800b05c:	460d      	mov	r5, r1
 800b05e:	4b25      	ldr	r3, [pc, #148]	; (800b0f4 <IMU_turn+0x144>)
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	4618      	mov	r0, r3
 800b064:	f7fd f9a8 	bl	80083b8 <__aeabi_f2d>
 800b068:	4680      	mov	r8, r0
 800b06a:	4689      	mov	r9, r1
 800b06c:	4b21      	ldr	r3, [pc, #132]	; (800b0f4 <IMU_turn+0x144>)
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	4618      	mov	r0, r3
 800b072:	f7fd f9a1 	bl	80083b8 <__aeabi_f2d>
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	ec43 2b15 	vmov	d5, r2, r3
 800b07e:	ec49 8b14 	vmov	d4, r8, r9
 800b082:	ec45 4b13 	vmov	d3, r4, r5
 800b086:	ed9f 2b18 	vldr	d2, [pc, #96]	; 800b0e8 <IMU_turn+0x138>
 800b08a:	eeb0 1a48 	vmov.f32	s2, s16
 800b08e:	eef0 1a68 	vmov.f32	s3, s17
 800b092:	ed97 0b00 	vldr	d0, [r7]
 800b096:	f7ff f893 	bl	800a1c0 <IMU_Control>
	     while(target_angle > Body_angle){
 800b09a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7fd f978 	bl	8008394 <__aeabi_i2d>
 800b0a4:	4b14      	ldr	r3, [pc, #80]	; (800b0f8 <IMU_turn+0x148>)
 800b0a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	4623      	mov	r3, r4
 800b0ae:	f7fd fc6b 	bl	8008988 <__aeabi_dcmpgt>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1c8      	bne.n	800b04a <IMU_turn+0x9a>
	    			//printf("ジャイロ : %f \r\n", Body_angle*180/ M_PI);
	     }
	    }
	    mode.enc = 0;
 800b0b8:	4b10      	ldr	r3, [pc, #64]	; (800b0fc <IMU_turn+0x14c>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	70da      	strb	r2, [r3, #3]
	    imu_angle = 0;
 800b0be:	4a10      	ldr	r2, [pc, #64]	; (800b100 <IMU_turn+0x150>)
 800b0c0:	f04f 0300 	mov.w	r3, #0
 800b0c4:	f04f 0400 	mov.w	r4, #0
 800b0c8:	e9c2 3400 	strd	r3, r4, [r2]
	    Body_angle = 0;
 800b0cc:	4a0a      	ldr	r2, [pc, #40]	; (800b0f8 <IMU_turn+0x148>)
 800b0ce:	f04f 0300 	mov.w	r3, #0
 800b0d2:	f04f 0400 	mov.w	r4, #0
 800b0d6:	e9c2 3400 	strd	r3, r4, [r2]

	//Motor_PWM_Stop();

}
 800b0da:	bf00      	nop
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	ecbd 8b02 	vpop	{d8}
 800b0e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b0e8:	d2f1a9fc 	.word	0xd2f1a9fc
 800b0ec:	3f50624d 	.word	0x3f50624d
 800b0f0:	200002d0 	.word	0x200002d0
 800b0f4:	20000044 	.word	0x20000044
 800b0f8:	200002c0 	.word	0x200002c0
 800b0fc:	20000074 	.word	0x20000074
 800b100:	200002c8 	.word	0x200002c8

0800b104 <turn_right>:

void turn_right(){
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0

	//左右の車輪速度制御
	//or 角速度制御で旋回
	  uint8_t counter=0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	71fb      	strb	r3, [r7, #7]
	  //printf("turnはじめ\r\n");
	   while(counter < 1){
 800b10e:	e045      	b.n	800b19c <turn_right+0x98>

			Target_velocity = 0;
 800b110:	4b28      	ldr	r3, [pc, #160]	; (800b1b4 <turn_right+0xb0>)
 800b112:	f04f 0200 	mov.w	r2, #0
 800b116:	601a      	str	r2, [r3, #0]

			error_reset = 0;
 800b118:	4b27      	ldr	r3, [pc, #156]	; (800b1b8 <turn_right+0xb4>)
 800b11a:	2200      	movs	r2, #0
 800b11c:	701a      	strb	r2, [r3, #0]
			Motor_Count_Clear();
 800b11e:	f7fe fbf5 	bl	800990c <Motor_Count_Clear>
	    EN3_L.integrate = 0;
 800b122:	4b26      	ldr	r3, [pc, #152]	; (800b1bc <turn_right+0xb8>)
 800b124:	2200      	movs	r2, #0
 800b126:	605a      	str	r2, [r3, #4]
	    EN4_R.integrate = 0;
 800b128:	4b25      	ldr	r3, [pc, #148]	; (800b1c0 <turn_right+0xbc>)
 800b12a:	2200      	movs	r2, #0
 800b12c:	605a      	str	r2, [r3, #4]
		  EN_Body.integrate = 0;
 800b12e:	4b25      	ldr	r3, [pc, #148]	; (800b1c4 <turn_right+0xc0>)
 800b130:	2200      	movs	r2, #0
 800b132:	605a      	str	r2, [r3, #4]
		  mode.enc = 1;
 800b134:	4b24      	ldr	r3, [pc, #144]	; (800b1c8 <turn_right+0xc4>)
 800b136:	2201      	movs	r2, #1
 800b138:	70da      	strb	r2, [r3, #3]
		  //int pulse_check ;
		///while(EN3_L.integrate >= -Target_pul_quarter && EN4_R.integrate <= Target_pul_quarter){
	  while(EN3_L.integrate + (-1)*EN4_R.integrate <= Target_pul_quarter*2){
 800b13a:	e005      	b.n	800b148 <turn_right+0x44>

		  mode.control = 3;
 800b13c:	4b22      	ldr	r3, [pc, #136]	; (800b1c8 <turn_right+0xc4>)
 800b13e:	2203      	movs	r2, #3
 800b140:	715a      	strb	r2, [r3, #5]
		  Target_Rad_velo = -5;//Rotate(Target_Rad_velo, -5, Target_pul_quarter, EN3_L.integrate);
 800b142:	4b22      	ldr	r3, [pc, #136]	; (800b1cc <turn_right+0xc8>)
 800b144:	4a22      	ldr	r2, [pc, #136]	; (800b1d0 <turn_right+0xcc>)
 800b146:	601a      	str	r2, [r3, #0]
	  while(EN3_L.integrate + (-1)*EN4_R.integrate <= Target_pul_quarter*2){
 800b148:	4b1c      	ldr	r3, [pc, #112]	; (800b1bc <turn_right+0xb8>)
 800b14a:	685a      	ldr	r2, [r3, #4]
 800b14c:	4b1c      	ldr	r3, [pc, #112]	; (800b1c0 <turn_right+0xbc>)
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	1ad3      	subs	r3, r2, r3
 800b152:	ee07 3a90 	vmov	s15, r3
 800b156:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b15a:	4b1e      	ldr	r3, [pc, #120]	; (800b1d4 <turn_right+0xd0>)
 800b15c:	edd3 7a00 	vldr	s15, [r3]
 800b160:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b16c:	d9e6      	bls.n	800b13c <turn_right+0x38>
//		  Target_Rad_velo = -10;
		  //pulse_check = EN3_L.integrate + (-1)*EN4_R.integrate;
		  //printf("turn中 %d\r\n",pulse_check);
	    	}

	      mode.enc = 0;
 800b16e:	4b16      	ldr	r3, [pc, #88]	; (800b1c8 <turn_right+0xc4>)
 800b170:	2200      	movs	r2, #0
 800b172:	70da      	strb	r2, [r3, #3]
	      Target_Rad_velo = 0;
 800b174:	4b15      	ldr	r3, [pc, #84]	; (800b1cc <turn_right+0xc8>)
 800b176:	f04f 0200 	mov.w	r2, #0
 800b17a:	601a      	str	r2, [r3, #0]
//	      mode.control = 4;
//	      Target_Rad_velo = 0;
	      Target_velocity = 0;
 800b17c:	4b0d      	ldr	r3, [pc, #52]	; (800b1b4 <turn_right+0xb0>)
 800b17e:	f04f 0200 	mov.w	r2, #0
 800b182:	601a      	str	r2, [r3, #0]
//			  printf("turn中 %d, <= 目標パルス %f\r\n",pulse_check ,Target_pul_quarter*2);
//
//
//		  }
	      //Target_rotate =0;
	      EN3_L.integrate = 0;
 800b184:	4b0d      	ldr	r3, [pc, #52]	; (800b1bc <turn_right+0xb8>)
 800b186:	2200      	movs	r2, #0
 800b188:	605a      	str	r2, [r3, #4]
	      EN4_R.integrate = 0;
 800b18a:	4b0d      	ldr	r3, [pc, #52]	; (800b1c0 <turn_right+0xbc>)
 800b18c:	2200      	movs	r2, #0
 800b18e:	605a      	str	r2, [r3, #4]
	      EN_Body.integrate = 0;
 800b190:	4b0c      	ldr	r3, [pc, #48]	; (800b1c4 <turn_right+0xc0>)
 800b192:	2200      	movs	r2, #0
 800b194:	605a      	str	r2, [r3, #4]
	      counter++;
 800b196:	79fb      	ldrb	r3, [r7, #7]
 800b198:	3301      	adds	r3, #1
 800b19a:	71fb      	strb	r3, [r7, #7]
	   while(counter < 1){
 800b19c:	79fb      	ldrb	r3, [r7, #7]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d0b6      	beq.n	800b110 <turn_right+0xc>
	     }
		error_reset = 0;
 800b1a2:	4b05      	ldr	r3, [pc, #20]	; (800b1b8 <turn_right+0xb4>)
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	701a      	strb	r2, [r3, #0]
		Motor_Count_Clear();
 800b1a8:	f7fe fbb0 	bl	800990c <Motor_Count_Clear>




}
 800b1ac:	bf00      	nop
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	200002b8 	.word	0x200002b8
 800b1b8:	2000027c 	.word	0x2000027c
 800b1bc:	20000050 	.word	0x20000050
 800b1c0:	2000005c 	.word	0x2000005c
 800b1c4:	20000068 	.word	0x20000068
 800b1c8:	20000074 	.word	0x20000074
 800b1cc:	200002bc 	.word	0x200002bc
 800b1d0:	c0a00000 	.word	0xc0a00000
 800b1d4:	20000004 	.word	0x20000004

0800b1d8 <turn_left>:

void turn_left(){
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0

	  uint8_t counter=0;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	71fb      	strb	r3, [r7, #7]
	  //static int check = 0, check2 = 0;

    while(counter < 1){
 800b1e2:	e045      	b.n	800b270 <turn_left+0x98>

			Target_velocity = 0;
 800b1e4:	4b28      	ldr	r3, [pc, #160]	; (800b288 <turn_left+0xb0>)
 800b1e6:	f04f 0200 	mov.w	r2, #0
 800b1ea:	601a      	str	r2, [r3, #0]
			error_reset = 0;
 800b1ec:	4b27      	ldr	r3, [pc, #156]	; (800b28c <turn_left+0xb4>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	701a      	strb	r2, [r3, #0]
			Motor_Count_Clear();
 800b1f2:	f7fe fb8b 	bl	800990c <Motor_Count_Clear>
	      EN3_L.integrate = 0;
 800b1f6:	4b26      	ldr	r3, [pc, #152]	; (800b290 <turn_left+0xb8>)
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	605a      	str	r2, [r3, #4]
	      EN4_R.integrate = 0;
 800b1fc:	4b25      	ldr	r3, [pc, #148]	; (800b294 <turn_left+0xbc>)
 800b1fe:	2200      	movs	r2, #0
 800b200:	605a      	str	r2, [r3, #4]
		  EN_Body.integrate = 0;
 800b202:	4b25      	ldr	r3, [pc, #148]	; (800b298 <turn_left+0xc0>)
 800b204:	2200      	movs	r2, #0
 800b206:	605a      	str	r2, [r3, #4]
		  mode.enc = 1;
 800b208:	4b24      	ldr	r3, [pc, #144]	; (800b29c <turn_left+0xc4>)
 800b20a:	2201      	movs	r2, #1
 800b20c:	70da      	strb	r2, [r3, #3]
	while((-1)*EN3_L.integrate + EN4_R.integrate <= Target_pul_quarter * 2){
 800b20e:	e005      	b.n	800b21c <turn_left+0x44>

		  mode.control = 3;
 800b210:	4b22      	ldr	r3, [pc, #136]	; (800b29c <turn_left+0xc4>)
 800b212:	2203      	movs	r2, #3
 800b214:	715a      	strb	r2, [r3, #5]
		  Target_Rad_velo = 5;//Rotate(Target_Rad_velo, 5, Target_pul_quarter, EN4_R.integrate);
 800b216:	4b22      	ldr	r3, [pc, #136]	; (800b2a0 <turn_left+0xc8>)
 800b218:	4a22      	ldr	r2, [pc, #136]	; (800b2a4 <turn_left+0xcc>)
 800b21a:	601a      	str	r2, [r3, #0]
	while((-1)*EN3_L.integrate + EN4_R.integrate <= Target_pul_quarter * 2){
 800b21c:	4b1d      	ldr	r3, [pc, #116]	; (800b294 <turn_left+0xbc>)
 800b21e:	685a      	ldr	r2, [r3, #4]
 800b220:	4b1b      	ldr	r3, [pc, #108]	; (800b290 <turn_left+0xb8>)
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	ee07 3a90 	vmov	s15, r3
 800b22a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b22e:	4b1e      	ldr	r3, [pc, #120]	; (800b2a8 <turn_left+0xd0>)
 800b230:	edd3 7a00 	vldr	s15, [r3]
 800b234:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b240:	d9e6      	bls.n	800b210 <turn_left+0x38>
//	      check = EN3_L.integrate;
//	      check2 = EN4_R.integrate;
//		mode.control = 3;
//		Target_Rad_velo = 10;
	}
    mode.enc = 0;
 800b242:	4b16      	ldr	r3, [pc, #88]	; (800b29c <turn_left+0xc4>)
 800b244:	2200      	movs	r2, #0
 800b246:	70da      	strb	r2, [r3, #3]
    Target_Rad_velo = 0;
 800b248:	4b15      	ldr	r3, [pc, #84]	; (800b2a0 <turn_left+0xc8>)
 800b24a:	f04f 0200 	mov.w	r2, #0
 800b24e:	601a      	str	r2, [r3, #0]
//	mode.control = 4;
//	Target_Rad_velo = 0;
    Target_velocity = 0;
 800b250:	4b0d      	ldr	r3, [pc, #52]	; (800b288 <turn_left+0xb0>)
 800b252:	f04f 0200 	mov.w	r2, #0
 800b256:	601a      	str	r2, [r3, #0]
    //Target_rotate =0;
    EN3_L.integrate = 0;
 800b258:	4b0d      	ldr	r3, [pc, #52]	; (800b290 <turn_left+0xb8>)
 800b25a:	2200      	movs	r2, #0
 800b25c:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b25e:	4b0d      	ldr	r3, [pc, #52]	; (800b294 <turn_left+0xbc>)
 800b260:	2200      	movs	r2, #0
 800b262:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b264:	4b0c      	ldr	r3, [pc, #48]	; (800b298 <turn_left+0xc0>)
 800b266:	2200      	movs	r2, #0
 800b268:	605a      	str	r2, [r3, #4]
    counter++;
 800b26a:	79fb      	ldrb	r3, [r7, #7]
 800b26c:	3301      	adds	r3, #1
 800b26e:	71fb      	strb	r3, [r7, #7]
    while(counter < 1){
 800b270:	79fb      	ldrb	r3, [r7, #7]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d0b6      	beq.n	800b1e4 <turn_left+0xc>
   }
	error_reset = 0;
 800b276:	4b05      	ldr	r3, [pc, #20]	; (800b28c <turn_left+0xb4>)
 800b278:	2200      	movs	r2, #0
 800b27a:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800b27c:	f7fe fb46 	bl	800990c <Motor_Count_Clear>
//    printf("左に90°回転時左 : %d \r\n",check);
//    printf("左に90°回転時右 : %d \r\n",check2);
//    printf("\r\n");

}
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	200002b8 	.word	0x200002b8
 800b28c:	2000027c 	.word	0x2000027c
 800b290:	20000050 	.word	0x20000050
 800b294:	2000005c 	.word	0x2000005c
 800b298:	20000068 	.word	0x20000068
 800b29c:	20000074 	.word	0x20000074
 800b2a0:	200002bc 	.word	0x200002bc
 800b2a4:	40a00000 	.word	0x40a00000
 800b2a8:	20000004 	.word	0x20000004
 800b2ac:	00000000 	.word	0x00000000

0800b2b0 <slow_turn_R>:

void slow_turn_R(){
 800b2b0:	b598      	push	{r3, r4, r7, lr}
 800b2b2:	af00      	add	r7, sp, #0

		mode.control = 6;
 800b2b4:	4b50      	ldr	r3, [pc, #320]	; (800b3f8 <slow_turn_R+0x148>)
 800b2b6:	2206      	movs	r2, #6
 800b2b8:	715a      	strb	r2, [r3, #5]

		while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b2ba:	e002      	b.n	800b2c2 <slow_turn_R+0x12>
			mode.accel = 6;
 800b2bc:	4b4e      	ldr	r3, [pc, #312]	; (800b3f8 <slow_turn_R+0x148>)
 800b2be:	2206      	movs	r2, #6
 800b2c0:	705a      	strb	r2, [r3, #1]
		while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b2c2:	4b4e      	ldr	r3, [pc, #312]	; (800b3fc <slow_turn_R+0x14c>)
 800b2c4:	685a      	ldr	r2, [r3, #4]
 800b2c6:	4b4e      	ldr	r3, [pc, #312]	; (800b400 <slow_turn_R+0x150>)
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7fd f861 	bl	8008394 <__aeabi_i2d>
 800b2d2:	a33f      	add	r3, pc, #252	; (adr r3, 800b3d0 <slow_turn_R+0x120>)
 800b2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d8:	f7fd fb38 	bl	800894c <__aeabi_dcmplt>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1ec      	bne.n	800b2bc <slow_turn_R+0xc>

		}
		mode.accel = 0;
 800b2e2:	4b45      	ldr	r3, [pc, #276]	; (800b3f8 <slow_turn_R+0x148>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	705a      	strb	r2, [r3, #1]

		while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b2e8:	e021      	b.n	800b32e <slow_turn_R+0x7e>
			Target_velocity = CURVE_SPEED;
 800b2ea:	4b46      	ldr	r3, [pc, #280]	; (800b404 <slow_turn_R+0x154>)
 800b2ec:	4a46      	ldr	r2, [pc, #280]	; (800b408 <slow_turn_R+0x158>)
 800b2ee:	601a      	str	r2, [r3, #0]
			Target_L_velo = CURVE_SPEED  * (90+TREAD_WIDTH)/90;//130/90;//124.6/90;
 800b2f0:	4b46      	ldr	r3, [pc, #280]	; (800b40c <slow_turn_R+0x15c>)
 800b2f2:	4a47      	ldr	r2, [pc, #284]	; (800b410 <slow_turn_R+0x160>)
 800b2f4:	601a      	str	r2, [r3, #0]
			Target_R_velo = Target_L_velo * (90-TREAD_WIDTH) / (90+TREAD_WIDTH);//50/130;//55.4 / 124.6;
 800b2f6:	4b45      	ldr	r3, [pc, #276]	; (800b40c <slow_turn_R+0x15c>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fd f85c 	bl	80083b8 <__aeabi_f2d>
 800b300:	a335      	add	r3, pc, #212	; (adr r3, 800b3d8 <slow_turn_R+0x128>)
 800b302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b306:	f7fd f8af 	bl	8008468 <__aeabi_dmul>
 800b30a:	4603      	mov	r3, r0
 800b30c:	460c      	mov	r4, r1
 800b30e:	4618      	mov	r0, r3
 800b310:	4621      	mov	r1, r4
 800b312:	a333      	add	r3, pc, #204	; (adr r3, 800b3e0 <slow_turn_R+0x130>)
 800b314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b318:	f7fd f9d0 	bl	80086bc <__aeabi_ddiv>
 800b31c:	4603      	mov	r3, r0
 800b31e:	460c      	mov	r4, r1
 800b320:	4618      	mov	r0, r3
 800b322:	4621      	mov	r1, r4
 800b324:	f7fd fb78 	bl	8008a18 <__aeabi_d2f>
 800b328:	4602      	mov	r2, r0
 800b32a:	4b3a      	ldr	r3, [pc, #232]	; (800b414 <slow_turn_R+0x164>)
 800b32c:	601a      	str	r2, [r3, #0]
		while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b32e:	4b33      	ldr	r3, [pc, #204]	; (800b3fc <slow_turn_R+0x14c>)
 800b330:	685a      	ldr	r2, [r3, #4]
 800b332:	4b33      	ldr	r3, [pc, #204]	; (800b400 <slow_turn_R+0x150>)
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	4413      	add	r3, r2
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fd f82b 	bl	8008394 <__aeabi_i2d>
 800b33e:	a324      	add	r3, pc, #144	; (adr r3, 800b3d0 <slow_turn_R+0x120>)
 800b340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b344:	f7fd fb16 	bl	8008974 <__aeabi_dcmpge>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00f      	beq.n	800b36e <slow_turn_R+0xbe>
 800b34e:	4b2b      	ldr	r3, [pc, #172]	; (800b3fc <slow_turn_R+0x14c>)
 800b350:	685a      	ldr	r2, [r3, #4]
 800b352:	4b2b      	ldr	r3, [pc, #172]	; (800b400 <slow_turn_R+0x150>)
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	4413      	add	r3, r2
 800b358:	4618      	mov	r0, r3
 800b35a:	f7fd f81b 	bl	8008394 <__aeabi_i2d>
 800b35e:	a322      	add	r3, pc, #136	; (adr r3, 800b3e8 <slow_turn_R+0x138>)
 800b360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b364:	f7fd faf2 	bl	800894c <__aeabi_dcmplt>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1bd      	bne.n	800b2ea <slow_turn_R+0x3a>

		}
		while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b36e:	e002      	b.n	800b376 <slow_turn_R+0xc6>
			mode.accel = 7;
 800b370:	4b21      	ldr	r3, [pc, #132]	; (800b3f8 <slow_turn_R+0x148>)
 800b372:	2207      	movs	r2, #7
 800b374:	705a      	strb	r2, [r3, #1]
		while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b376:	4b21      	ldr	r3, [pc, #132]	; (800b3fc <slow_turn_R+0x14c>)
 800b378:	685a      	ldr	r2, [r3, #4]
 800b37a:	4b21      	ldr	r3, [pc, #132]	; (800b400 <slow_turn_R+0x150>)
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	4413      	add	r3, r2
 800b380:	4618      	mov	r0, r3
 800b382:	f7fd f807 	bl	8008394 <__aeabi_i2d>
 800b386:	a31a      	add	r3, pc, #104	; (adr r3, 800b3f0 <slow_turn_R+0x140>)
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	f7fd fade 	bl	800894c <__aeabi_dcmplt>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1ec      	bne.n	800b370 <slow_turn_R+0xc0>

		}
		mode.accel = 0;
 800b396:	4b18      	ldr	r3, [pc, #96]	; (800b3f8 <slow_turn_R+0x148>)
 800b398:	2200      	movs	r2, #0
 800b39a:	705a      	strb	r2, [r3, #1]
//		if(Body_angle < -90){
//			IMU_init();
//			break;
//		}

	mode.control = 4;
 800b39c:	4b16      	ldr	r3, [pc, #88]	; (800b3f8 <slow_turn_R+0x148>)
 800b39e:	2204      	movs	r2, #4
 800b3a0:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b3a2:	4b16      	ldr	r3, [pc, #88]	; (800b3fc <slow_turn_R+0x14c>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b3a8:	4b15      	ldr	r3, [pc, #84]	; (800b400 <slow_turn_R+0x150>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b3ae:	4b1a      	ldr	r3, [pc, #104]	; (800b418 <slow_turn_R+0x168>)
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b3b4:	4b15      	ldr	r3, [pc, #84]	; (800b40c <slow_turn_R+0x15c>)
 800b3b6:	f04f 0200 	mov.w	r2, #0
 800b3ba:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b3bc:	4b15      	ldr	r3, [pc, #84]	; (800b414 <slow_turn_R+0x164>)
 800b3be:	f04f 0200 	mov.w	r2, #0
 800b3c2:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b3c4:	4b0f      	ldr	r3, [pc, #60]	; (800b404 <slow_turn_R+0x154>)
 800b3c6:	4a15      	ldr	r2, [pc, #84]	; (800b41c <slow_turn_R+0x16c>)
 800b3c8:	601a      	str	r2, [r3, #0]
}
 800b3ca:	bf00      	nop
 800b3cc:	bd98      	pop	{r3, r4, r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	234f4839 	.word	0x234f4839
 800b3d4:	40b7f082 	.word	0x40b7f082
 800b3d8:	cccccccd 	.word	0xcccccccd
 800b3dc:	404acccc 	.word	0x404acccc
 800b3e0:	9999999a 	.word	0x9999999a
 800b3e4:	405f9999 	.word	0x405f9999
 800b3e8:	5fa0080d 	.word	0x5fa0080d
 800b3ec:	40eff582 	.word	0x40eff582
 800b3f0:	5204f88a 	.word	0x5204f88a
 800b3f4:	40f179c9 	.word	0x40f179c9
 800b3f8:	20000074 	.word	0x20000074
 800b3fc:	20000050 	.word	0x20000050
 800b400:	2000005c 	.word	0x2000005c
 800b404:	200002b8 	.word	0x200002b8
 800b408:	43340000 	.word	0x43340000
 800b40c:	200043a0 	.word	0x200043a0
 800b410:	437ccccd 	.word	0x437ccccd
 800b414:	20004380 	.word	0x20004380
 800b418:	20000068 	.word	0x20000068
 800b41c:	436b0000 	.word	0x436b0000

0800b420 <slow_turn_L>:

void slow_turn_L(){
 800b420:	b598      	push	{r3, r4, r7, lr}
 800b422:	af00      	add	r7, sp, #0
	//左右輪制御
	mode.control = 6;
 800b424:	4b50      	ldr	r3, [pc, #320]	; (800b568 <slow_turn_L+0x148>)
 800b426:	2206      	movs	r2, #6
 800b428:	715a      	strb	r2, [r3, #5]

	//等加速度加速減速
	while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b42a:	e002      	b.n	800b432 <slow_turn_L+0x12>
		mode.accel = 4;
 800b42c:	4b4e      	ldr	r3, [pc, #312]	; (800b568 <slow_turn_L+0x148>)
 800b42e:	2204      	movs	r2, #4
 800b430:	705a      	strb	r2, [r3, #1]
	while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b432:	4b4e      	ldr	r3, [pc, #312]	; (800b56c <slow_turn_L+0x14c>)
 800b434:	685a      	ldr	r2, [r3, #4]
 800b436:	4b4e      	ldr	r3, [pc, #312]	; (800b570 <slow_turn_L+0x150>)
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	4413      	add	r3, r2
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fc ffa9 	bl	8008394 <__aeabi_i2d>
 800b442:	a33f      	add	r3, pc, #252	; (adr r3, 800b540 <slow_turn_L+0x120>)
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	f7fd fa80 	bl	800894c <__aeabi_dcmplt>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1ec      	bne.n	800b42c <slow_turn_L+0xc>

	}
	//加速やめる
	mode.accel = 0;
 800b452:	4b45      	ldr	r3, [pc, #276]	; (800b568 <slow_turn_L+0x148>)
 800b454:	2200      	movs	r2, #0
 800b456:	705a      	strb	r2, [r3, #1]

	//等速カーブ
	while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b458:	e021      	b.n	800b49e <slow_turn_L+0x7e>
		Target_velocity = CURVE_SPEED;
 800b45a:	4b46      	ldr	r3, [pc, #280]	; (800b574 <slow_turn_L+0x154>)
 800b45c:	4a46      	ldr	r2, [pc, #280]	; (800b578 <slow_turn_L+0x158>)
 800b45e:	601a      	str	r2, [r3, #0]
		Target_R_velo = CURVE_SPEED   * (90+TREAD_WIDTH)/90;
 800b460:	4b46      	ldr	r3, [pc, #280]	; (800b57c <slow_turn_L+0x15c>)
 800b462:	4a47      	ldr	r2, [pc, #284]	; (800b580 <slow_turn_L+0x160>)
 800b464:	601a      	str	r2, [r3, #0]
		Target_L_velo = Target_R_velo * (90-TREAD_WIDTH) / (90+TREAD_WIDTH);
 800b466:	4b45      	ldr	r3, [pc, #276]	; (800b57c <slow_turn_L+0x15c>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fc ffa4 	bl	80083b8 <__aeabi_f2d>
 800b470:	a335      	add	r3, pc, #212	; (adr r3, 800b548 <slow_turn_L+0x128>)
 800b472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b476:	f7fc fff7 	bl	8008468 <__aeabi_dmul>
 800b47a:	4603      	mov	r3, r0
 800b47c:	460c      	mov	r4, r1
 800b47e:	4618      	mov	r0, r3
 800b480:	4621      	mov	r1, r4
 800b482:	a333      	add	r3, pc, #204	; (adr r3, 800b550 <slow_turn_L+0x130>)
 800b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b488:	f7fd f918 	bl	80086bc <__aeabi_ddiv>
 800b48c:	4603      	mov	r3, r0
 800b48e:	460c      	mov	r4, r1
 800b490:	4618      	mov	r0, r3
 800b492:	4621      	mov	r1, r4
 800b494:	f7fd fac0 	bl	8008a18 <__aeabi_d2f>
 800b498:	4602      	mov	r2, r0
 800b49a:	4b3a      	ldr	r3, [pc, #232]	; (800b584 <slow_turn_L+0x164>)
 800b49c:	601a      	str	r2, [r3, #0]
	while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b49e:	4b33      	ldr	r3, [pc, #204]	; (800b56c <slow_turn_L+0x14c>)
 800b4a0:	685a      	ldr	r2, [r3, #4]
 800b4a2:	4b33      	ldr	r3, [pc, #204]	; (800b570 <slow_turn_L+0x150>)
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7fc ff73 	bl	8008394 <__aeabi_i2d>
 800b4ae:	a324      	add	r3, pc, #144	; (adr r3, 800b540 <slow_turn_L+0x120>)
 800b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b4:	f7fd fa5e 	bl	8008974 <__aeabi_dcmpge>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00f      	beq.n	800b4de <slow_turn_L+0xbe>
 800b4be:	4b2b      	ldr	r3, [pc, #172]	; (800b56c <slow_turn_L+0x14c>)
 800b4c0:	685a      	ldr	r2, [r3, #4]
 800b4c2:	4b2b      	ldr	r3, [pc, #172]	; (800b570 <slow_turn_L+0x150>)
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7fc ff63 	bl	8008394 <__aeabi_i2d>
 800b4ce:	a322      	add	r3, pc, #136	; (adr r3, 800b558 <slow_turn_L+0x138>)
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f7fd fa3a 	bl	800894c <__aeabi_dcmplt>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1bd      	bne.n	800b45a <slow_turn_L+0x3a>
		//タイヤ幅が広くなってから比率を変えていなかったはず
	}
	//等加速度加速減速
	while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b4de:	e002      	b.n	800b4e6 <slow_turn_L+0xc6>
		mode.accel = 5;
 800b4e0:	4b21      	ldr	r3, [pc, #132]	; (800b568 <slow_turn_L+0x148>)
 800b4e2:	2205      	movs	r2, #5
 800b4e4:	705a      	strb	r2, [r3, #1]
	while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b4e6:	4b21      	ldr	r3, [pc, #132]	; (800b56c <slow_turn_L+0x14c>)
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	4b21      	ldr	r3, [pc, #132]	; (800b570 <slow_turn_L+0x150>)
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7fc ff4f 	bl	8008394 <__aeabi_i2d>
 800b4f6:	a31a      	add	r3, pc, #104	; (adr r3, 800b560 <slow_turn_L+0x140>)
 800b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fc:	f7fd fa26 	bl	800894c <__aeabi_dcmplt>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1ec      	bne.n	800b4e0 <slow_turn_L+0xc0>

	}
	//加減速やめる
	mode.accel = 0;
 800b506:	4b18      	ldr	r3, [pc, #96]	; (800b568 <slow_turn_L+0x148>)
 800b508:	2200      	movs	r2, #0
 800b50a:	705a      	strb	r2, [r3, #1]
//		if(Body_angle > 90){
//			IMU_init();
//			break;
//		}

	mode.control = 4;
 800b50c:	4b16      	ldr	r3, [pc, #88]	; (800b568 <slow_turn_L+0x148>)
 800b50e:	2204      	movs	r2, #4
 800b510:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b512:	4b16      	ldr	r3, [pc, #88]	; (800b56c <slow_turn_L+0x14c>)
 800b514:	2200      	movs	r2, #0
 800b516:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b518:	4b15      	ldr	r3, [pc, #84]	; (800b570 <slow_turn_L+0x150>)
 800b51a:	2200      	movs	r2, #0
 800b51c:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b51e:	4b1a      	ldr	r3, [pc, #104]	; (800b588 <slow_turn_L+0x168>)
 800b520:	2200      	movs	r2, #0
 800b522:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b524:	4b17      	ldr	r3, [pc, #92]	; (800b584 <slow_turn_L+0x164>)
 800b526:	f04f 0200 	mov.w	r2, #0
 800b52a:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b52c:	4b13      	ldr	r3, [pc, #76]	; (800b57c <slow_turn_L+0x15c>)
 800b52e:	f04f 0200 	mov.w	r2, #0
 800b532:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b534:	4b0f      	ldr	r3, [pc, #60]	; (800b574 <slow_turn_L+0x154>)
 800b536:	4a15      	ldr	r2, [pc, #84]	; (800b58c <slow_turn_L+0x16c>)
 800b538:	601a      	str	r2, [r3, #0]
}
 800b53a:	bf00      	nop
 800b53c:	bd98      	pop	{r3, r4, r7, pc}
 800b53e:	bf00      	nop
 800b540:	234f4839 	.word	0x234f4839
 800b544:	40b7f082 	.word	0x40b7f082
 800b548:	cccccccd 	.word	0xcccccccd
 800b54c:	404acccc 	.word	0x404acccc
 800b550:	9999999a 	.word	0x9999999a
 800b554:	405f9999 	.word	0x405f9999
 800b558:	5fa0080d 	.word	0x5fa0080d
 800b55c:	40eff582 	.word	0x40eff582
 800b560:	5204f88a 	.word	0x5204f88a
 800b564:	40f179c9 	.word	0x40f179c9
 800b568:	20000074 	.word	0x20000074
 800b56c:	20000050 	.word	0x20000050
 800b570:	2000005c 	.word	0x2000005c
 800b574:	200002b8 	.word	0x200002b8
 800b578:	43340000 	.word	0x43340000
 800b57c:	20004380 	.word	0x20004380
 800b580:	437ccccd 	.word	0x437ccccd
 800b584:	200043a0 	.word	0x200043a0
 800b588:	20000068 	.word	0x20000068
 800b58c:	436b0000 	.word	0x436b0000

0800b590 <shinchi_turn_R>:

void shinchi_turn_R(){
 800b590:	b580      	push	{r7, lr}
 800b592:	af00      	add	r7, sp, #0

	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2 ){
 800b594:	e070      	b.n	800b678 <shinchi_turn_R+0xe8>
		if(EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2){
 800b596:	4b54      	ldr	r3, [pc, #336]	; (800b6e8 <shinchi_turn_R+0x158>)
 800b598:	685a      	ldr	r2, [r3, #4]
 800b59a:	4b54      	ldr	r3, [pc, #336]	; (800b6ec <shinchi_turn_R+0x15c>)
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	4413      	add	r3, r2
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7fc fef7 	bl	8008394 <__aeabi_i2d>
 800b5a6:	a34a      	add	r3, pc, #296	; (adr r3, 800b6d0 <shinchi_turn_R+0x140>)
 800b5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ac:	f7fd f9ce 	bl	800894c <__aeabi_dcmplt>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d005      	beq.n	800b5c2 <shinchi_turn_R+0x32>
			mode.control = 4;
 800b5b6:	4b4e      	ldr	r3, [pc, #312]	; (800b6f0 <shinchi_turn_R+0x160>)
 800b5b8:	2204      	movs	r2, #4
 800b5ba:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b5bc:	4b4d      	ldr	r3, [pc, #308]	; (800b6f4 <shinchi_turn_R+0x164>)
 800b5be:	4a4e      	ldr	r2, [pc, #312]	; (800b6f8 <shinchi_turn_R+0x168>)
 800b5c0:	601a      	str	r2, [r3, #0]
		}
		if(DECE_CURVE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE){
 800b5c2:	4b49      	ldr	r3, [pc, #292]	; (800b6e8 <shinchi_turn_R+0x158>)
 800b5c4:	685a      	ldr	r2, [r3, #4]
 800b5c6:	4b49      	ldr	r3, [pc, #292]	; (800b6ec <shinchi_turn_R+0x15c>)
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7fc fee1 	bl	8008394 <__aeabi_i2d>
 800b5d2:	a33f      	add	r3, pc, #252	; (adr r3, 800b6d0 <shinchi_turn_R+0x140>)
 800b5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d8:	f7fd f9cc 	bl	8008974 <__aeabi_dcmpge>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d022      	beq.n	800b628 <shinchi_turn_R+0x98>
 800b5e2:	4b41      	ldr	r3, [pc, #260]	; (800b6e8 <shinchi_turn_R+0x158>)
 800b5e4:	685a      	ldr	r2, [r3, #4]
 800b5e6:	4b41      	ldr	r3, [pc, #260]	; (800b6ec <shinchi_turn_R+0x15c>)
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7fc fed1 	bl	8008394 <__aeabi_i2d>
 800b5f2:	a339      	add	r3, pc, #228	; (adr r3, 800b6d8 <shinchi_turn_R+0x148>)
 800b5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f8:	f7fd f9a8 	bl	800894c <__aeabi_dcmplt>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d012      	beq.n	800b628 <shinchi_turn_R+0x98>
		mode.control = 6;
 800b602:	4b3b      	ldr	r3, [pc, #236]	; (800b6f0 <shinchi_turn_R+0x160>)
 800b604:	2206      	movs	r2, #6
 800b606:	715a      	strb	r2, [r3, #5]
		//IMU_Control(Target_Rad_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
		Target_velocity = CURVE_SPEED;
 800b608:	4b3a      	ldr	r3, [pc, #232]	; (800b6f4 <shinchi_turn_R+0x164>)
 800b60a:	4a3b      	ldr	r2, [pc, #236]	; (800b6f8 <shinchi_turn_R+0x168>)
 800b60c:	601a      	str	r2, [r3, #0]
		Target_L_velo = CURVE_SPEED  * 2;
 800b60e:	4b3b      	ldr	r3, [pc, #236]	; (800b6fc <shinchi_turn_R+0x16c>)
 800b610:	4a3b      	ldr	r2, [pc, #236]	; (800b700 <shinchi_turn_R+0x170>)
 800b612:	601a      	str	r2, [r3, #0]
		Target_R_velo = Target_L_velo * 0;
 800b614:	4b39      	ldr	r3, [pc, #228]	; (800b6fc <shinchi_turn_R+0x16c>)
 800b616:	edd3 7a00 	vldr	s15, [r3]
 800b61a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800b704 <shinchi_turn_R+0x174>
 800b61e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b622:	4b39      	ldr	r3, [pc, #228]	; (800b708 <shinchi_turn_R+0x178>)
 800b624:	edc3 7a00 	vstr	s15, [r3]
		}
		if(DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 4 + SHINCHI_ROTATE_PULSE){
 800b628:	4b2f      	ldr	r3, [pc, #188]	; (800b6e8 <shinchi_turn_R+0x158>)
 800b62a:	685a      	ldr	r2, [r3, #4]
 800b62c:	4b2f      	ldr	r3, [pc, #188]	; (800b6ec <shinchi_turn_R+0x15c>)
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	4413      	add	r3, r2
 800b632:	4618      	mov	r0, r3
 800b634:	f7fc feae 	bl	8008394 <__aeabi_i2d>
 800b638:	a327      	add	r3, pc, #156	; (adr r3, 800b6d8 <shinchi_turn_R+0x148>)
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	f7fd f999 	bl	8008974 <__aeabi_dcmpge>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d100      	bne.n	800b64a <shinchi_turn_R+0xba>
 800b648:	e016      	b.n	800b678 <shinchi_turn_R+0xe8>
 800b64a:	4b27      	ldr	r3, [pc, #156]	; (800b6e8 <shinchi_turn_R+0x158>)
 800b64c:	685a      	ldr	r2, [r3, #4]
 800b64e:	4b27      	ldr	r3, [pc, #156]	; (800b6ec <shinchi_turn_R+0x15c>)
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	4413      	add	r3, r2
 800b654:	4618      	mov	r0, r3
 800b656:	f7fc fe9d 	bl	8008394 <__aeabi_i2d>
 800b65a:	a321      	add	r3, pc, #132	; (adr r3, 800b6e0 <shinchi_turn_R+0x150>)
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	f7fd f974 	bl	800894c <__aeabi_dcmplt>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d100      	bne.n	800b66c <shinchi_turn_R+0xdc>
 800b66a:	e005      	b.n	800b678 <shinchi_turn_R+0xe8>
			mode.control = 4;
 800b66c:	4b20      	ldr	r3, [pc, #128]	; (800b6f0 <shinchi_turn_R+0x160>)
 800b66e:	2204      	movs	r2, #4
 800b670:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b672:	4b20      	ldr	r3, [pc, #128]	; (800b6f4 <shinchi_turn_R+0x164>)
 800b674:	4a20      	ldr	r2, [pc, #128]	; (800b6f8 <shinchi_turn_R+0x168>)
 800b676:	601a      	str	r2, [r3, #0]
	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2 ){
 800b678:	4b1b      	ldr	r3, [pc, #108]	; (800b6e8 <shinchi_turn_R+0x158>)
 800b67a:	685a      	ldr	r2, [r3, #4]
 800b67c:	4b1b      	ldr	r3, [pc, #108]	; (800b6ec <shinchi_turn_R+0x15c>)
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	4413      	add	r3, r2
 800b682:	4618      	mov	r0, r3
 800b684:	f7fc fe86 	bl	8008394 <__aeabi_i2d>
 800b688:	a315      	add	r3, pc, #84	; (adr r3, 800b6e0 <shinchi_turn_R+0x150>)
 800b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68e:	f7fd f95d 	bl	800894c <__aeabi_dcmplt>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	f47f af7e 	bne.w	800b596 <shinchi_turn_R+0x6>
//			IMU_init();
//			break;
//		}

	}
	mode.control = 4;
 800b69a:	4b15      	ldr	r3, [pc, #84]	; (800b6f0 <shinchi_turn_R+0x160>)
 800b69c:	2204      	movs	r2, #4
 800b69e:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b6a0:	4b11      	ldr	r3, [pc, #68]	; (800b6e8 <shinchi_turn_R+0x158>)
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b6a6:	4b11      	ldr	r3, [pc, #68]	; (800b6ec <shinchi_turn_R+0x15c>)
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b6ac:	4b17      	ldr	r3, [pc, #92]	; (800b70c <shinchi_turn_R+0x17c>)
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b6b2:	4b12      	ldr	r3, [pc, #72]	; (800b6fc <shinchi_turn_R+0x16c>)
 800b6b4:	f04f 0200 	mov.w	r2, #0
 800b6b8:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b6ba:	4b13      	ldr	r3, [pc, #76]	; (800b708 <shinchi_turn_R+0x178>)
 800b6bc:	f04f 0200 	mov.w	r2, #0
 800b6c0:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b6c2:	4b0c      	ldr	r3, [pc, #48]	; (800b6f4 <shinchi_turn_R+0x164>)
 800b6c4:	4a12      	ldr	r2, [pc, #72]	; (800b710 <shinchi_turn_R+0x180>)
 800b6c6:	601a      	str	r2, [r3, #0]

}
 800b6c8:	bf00      	nop
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	f3af 8000 	nop.w
 800b6d0:	28eda8e5 	.word	0x28eda8e5
 800b6d4:	40da80cf 	.word	0x40da80cf
 800b6d8:	62c1649a 	.word	0x62c1649a
 800b6dc:	40eb6333 	.word	0x40eb6333
 800b6e0:	7b9c1c86 	.word	0x7b9c1c86
 800b6e4:	40f451cd 	.word	0x40f451cd
 800b6e8:	20000050 	.word	0x20000050
 800b6ec:	2000005c 	.word	0x2000005c
 800b6f0:	20000074 	.word	0x20000074
 800b6f4:	200002b8 	.word	0x200002b8
 800b6f8:	43340000 	.word	0x43340000
 800b6fc:	200043a0 	.word	0x200043a0
 800b700:	43b40000 	.word	0x43b40000
 800b704:	00000000 	.word	0x00000000
 800b708:	20004380 	.word	0x20004380
 800b70c:	20000068 	.word	0x20000068
 800b710:	436b0000 	.word	0x436b0000
 800b714:	00000000 	.word	0x00000000

0800b718 <shinchi_turn_L>:
void shinchi_turn_L(){
 800b718:	b580      	push	{r7, lr}
 800b71a:	af00      	add	r7, sp, #0

	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2){
 800b71c:	e070      	b.n	800b800 <shinchi_turn_L+0xe8>
		if(EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2){
 800b71e:	4b54      	ldr	r3, [pc, #336]	; (800b870 <shinchi_turn_L+0x158>)
 800b720:	685a      	ldr	r2, [r3, #4]
 800b722:	4b54      	ldr	r3, [pc, #336]	; (800b874 <shinchi_turn_L+0x15c>)
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	4413      	add	r3, r2
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fc fe33 	bl	8008394 <__aeabi_i2d>
 800b72e:	a34a      	add	r3, pc, #296	; (adr r3, 800b858 <shinchi_turn_L+0x140>)
 800b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b734:	f7fd f90a 	bl	800894c <__aeabi_dcmplt>
 800b738:	4603      	mov	r3, r0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d005      	beq.n	800b74a <shinchi_turn_L+0x32>
			mode.control = 4;
 800b73e:	4b4e      	ldr	r3, [pc, #312]	; (800b878 <shinchi_turn_L+0x160>)
 800b740:	2204      	movs	r2, #4
 800b742:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b744:	4b4d      	ldr	r3, [pc, #308]	; (800b87c <shinchi_turn_L+0x164>)
 800b746:	4a4e      	ldr	r2, [pc, #312]	; (800b880 <shinchi_turn_L+0x168>)
 800b748:	601a      	str	r2, [r3, #0]
		}
		if(DECE_CURVE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE){
 800b74a:	4b49      	ldr	r3, [pc, #292]	; (800b870 <shinchi_turn_L+0x158>)
 800b74c:	685a      	ldr	r2, [r3, #4]
 800b74e:	4b49      	ldr	r3, [pc, #292]	; (800b874 <shinchi_turn_L+0x15c>)
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	4413      	add	r3, r2
 800b754:	4618      	mov	r0, r3
 800b756:	f7fc fe1d 	bl	8008394 <__aeabi_i2d>
 800b75a:	a33f      	add	r3, pc, #252	; (adr r3, 800b858 <shinchi_turn_L+0x140>)
 800b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b760:	f7fd f908 	bl	8008974 <__aeabi_dcmpge>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d022      	beq.n	800b7b0 <shinchi_turn_L+0x98>
 800b76a:	4b41      	ldr	r3, [pc, #260]	; (800b870 <shinchi_turn_L+0x158>)
 800b76c:	685a      	ldr	r2, [r3, #4]
 800b76e:	4b41      	ldr	r3, [pc, #260]	; (800b874 <shinchi_turn_L+0x15c>)
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	4413      	add	r3, r2
 800b774:	4618      	mov	r0, r3
 800b776:	f7fc fe0d 	bl	8008394 <__aeabi_i2d>
 800b77a:	a339      	add	r3, pc, #228	; (adr r3, 800b860 <shinchi_turn_L+0x148>)
 800b77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b780:	f7fd f8e4 	bl	800894c <__aeabi_dcmplt>
 800b784:	4603      	mov	r3, r0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d012      	beq.n	800b7b0 <shinchi_turn_L+0x98>
		mode.control = 6;
 800b78a:	4b3b      	ldr	r3, [pc, #236]	; (800b878 <shinchi_turn_L+0x160>)
 800b78c:	2206      	movs	r2, #6
 800b78e:	715a      	strb	r2, [r3, #5]
		Target_velocity = CURVE_SPEED;
 800b790:	4b3a      	ldr	r3, [pc, #232]	; (800b87c <shinchi_turn_L+0x164>)
 800b792:	4a3b      	ldr	r2, [pc, #236]	; (800b880 <shinchi_turn_L+0x168>)
 800b794:	601a      	str	r2, [r3, #0]
		Target_R_velo = CURVE_SPEED  * 2;
 800b796:	4b3b      	ldr	r3, [pc, #236]	; (800b884 <shinchi_turn_L+0x16c>)
 800b798:	4a3b      	ldr	r2, [pc, #236]	; (800b888 <shinchi_turn_L+0x170>)
 800b79a:	601a      	str	r2, [r3, #0]
		Target_L_velo = Target_R_velo * 0;
 800b79c:	4b39      	ldr	r3, [pc, #228]	; (800b884 <shinchi_turn_L+0x16c>)
 800b79e:	edd3 7a00 	vldr	s15, [r3]
 800b7a2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800b88c <shinchi_turn_L+0x174>
 800b7a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7aa:	4b39      	ldr	r3, [pc, #228]	; (800b890 <shinchi_turn_L+0x178>)
 800b7ac:	edc3 7a00 	vstr	s15, [r3]
		}
		if(DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 4 + SHINCHI_ROTATE_PULSE){
 800b7b0:	4b2f      	ldr	r3, [pc, #188]	; (800b870 <shinchi_turn_L+0x158>)
 800b7b2:	685a      	ldr	r2, [r3, #4]
 800b7b4:	4b2f      	ldr	r3, [pc, #188]	; (800b874 <shinchi_turn_L+0x15c>)
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fc fdea 	bl	8008394 <__aeabi_i2d>
 800b7c0:	a327      	add	r3, pc, #156	; (adr r3, 800b860 <shinchi_turn_L+0x148>)
 800b7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c6:	f7fd f8d5 	bl	8008974 <__aeabi_dcmpge>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d100      	bne.n	800b7d2 <shinchi_turn_L+0xba>
 800b7d0:	e016      	b.n	800b800 <shinchi_turn_L+0xe8>
 800b7d2:	4b27      	ldr	r3, [pc, #156]	; (800b870 <shinchi_turn_L+0x158>)
 800b7d4:	685a      	ldr	r2, [r3, #4]
 800b7d6:	4b27      	ldr	r3, [pc, #156]	; (800b874 <shinchi_turn_L+0x15c>)
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	4413      	add	r3, r2
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fc fdd9 	bl	8008394 <__aeabi_i2d>
 800b7e2:	a321      	add	r3, pc, #132	; (adr r3, 800b868 <shinchi_turn_L+0x150>)
 800b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e8:	f7fd f8b0 	bl	800894c <__aeabi_dcmplt>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d100      	bne.n	800b7f4 <shinchi_turn_L+0xdc>
 800b7f2:	e005      	b.n	800b800 <shinchi_turn_L+0xe8>
			mode.control = 4;
 800b7f4:	4b20      	ldr	r3, [pc, #128]	; (800b878 <shinchi_turn_L+0x160>)
 800b7f6:	2204      	movs	r2, #4
 800b7f8:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b7fa:	4b20      	ldr	r3, [pc, #128]	; (800b87c <shinchi_turn_L+0x164>)
 800b7fc:	4a20      	ldr	r2, [pc, #128]	; (800b880 <shinchi_turn_L+0x168>)
 800b7fe:	601a      	str	r2, [r3, #0]
	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2){
 800b800:	4b1b      	ldr	r3, [pc, #108]	; (800b870 <shinchi_turn_L+0x158>)
 800b802:	685a      	ldr	r2, [r3, #4]
 800b804:	4b1b      	ldr	r3, [pc, #108]	; (800b874 <shinchi_turn_L+0x15c>)
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	4413      	add	r3, r2
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fc fdc2 	bl	8008394 <__aeabi_i2d>
 800b810:	a315      	add	r3, pc, #84	; (adr r3, 800b868 <shinchi_turn_L+0x150>)
 800b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b816:	f7fd f899 	bl	800894c <__aeabi_dcmplt>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f47f af7e 	bne.w	800b71e <shinchi_turn_L+0x6>
//		if(Body_angle > 90){
//			IMU_init();
//			break;
//		}
	}
	mode.control = 4;
 800b822:	4b15      	ldr	r3, [pc, #84]	; (800b878 <shinchi_turn_L+0x160>)
 800b824:	2204      	movs	r2, #4
 800b826:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b828:	4b11      	ldr	r3, [pc, #68]	; (800b870 <shinchi_turn_L+0x158>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b82e:	4b11      	ldr	r3, [pc, #68]	; (800b874 <shinchi_turn_L+0x15c>)
 800b830:	2200      	movs	r2, #0
 800b832:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b834:	4b17      	ldr	r3, [pc, #92]	; (800b894 <shinchi_turn_L+0x17c>)
 800b836:	2200      	movs	r2, #0
 800b838:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b83a:	4b15      	ldr	r3, [pc, #84]	; (800b890 <shinchi_turn_L+0x178>)
 800b83c:	f04f 0200 	mov.w	r2, #0
 800b840:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b842:	4b10      	ldr	r3, [pc, #64]	; (800b884 <shinchi_turn_L+0x16c>)
 800b844:	f04f 0200 	mov.w	r2, #0
 800b848:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b84a:	4b0c      	ldr	r3, [pc, #48]	; (800b87c <shinchi_turn_L+0x164>)
 800b84c:	4a12      	ldr	r2, [pc, #72]	; (800b898 <shinchi_turn_L+0x180>)
 800b84e:	601a      	str	r2, [r3, #0]
}
 800b850:	bf00      	nop
 800b852:	bd80      	pop	{r7, pc}
 800b854:	f3af 8000 	nop.w
 800b858:	28eda8e5 	.word	0x28eda8e5
 800b85c:	40da80cf 	.word	0x40da80cf
 800b860:	62c1649a 	.word	0x62c1649a
 800b864:	40eb6333 	.word	0x40eb6333
 800b868:	7b9c1c86 	.word	0x7b9c1c86
 800b86c:	40f451cd 	.word	0x40f451cd
 800b870:	20000050 	.word	0x20000050
 800b874:	2000005c 	.word	0x2000005c
 800b878:	20000074 	.word	0x20000074
 800b87c:	200002b8 	.word	0x200002b8
 800b880:	43340000 	.word	0x43340000
 800b884:	20004380 	.word	0x20004380
 800b888:	43b40000 	.word	0x43b40000
 800b88c:	00000000 	.word	0x00000000
 800b890:	200043a0 	.word	0x200043a0
 800b894:	20000068 	.word	0x20000068
 800b898:	436b0000 	.word	0x436b0000

0800b89c <rotate180>:
void rotate180(){
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
  uint8_t counter=0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	71fb      	strb	r3, [r7, #7]
  //static int check = 0, check2 = 0;

   while(counter < 1){
 800b8a6:	e054      	b.n	800b952 <rotate180+0xb6>

		Target_velocity = 0;
 800b8a8:	4b30      	ldr	r3, [pc, #192]	; (800b96c <rotate180+0xd0>)
 800b8aa:	f04f 0200 	mov.w	r2, #0
 800b8ae:	601a      	str	r2, [r3, #0]
		error_reset = 0;
 800b8b0:	4b2f      	ldr	r3, [pc, #188]	; (800b970 <rotate180+0xd4>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	701a      	strb	r2, [r3, #0]
		Motor_Count_Clear();
 800b8b6:	f7fe f829 	bl	800990c <Motor_Count_Clear>
    EN3_L.integrate = 0;
 800b8ba:	4b2e      	ldr	r3, [pc, #184]	; (800b974 <rotate180+0xd8>)
 800b8bc:	2200      	movs	r2, #0
 800b8be:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b8c0:	4b2d      	ldr	r3, [pc, #180]	; (800b978 <rotate180+0xdc>)
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	605a      	str	r2, [r3, #4]
	  EN_Body.integrate = 0;
 800b8c6:	4b2d      	ldr	r3, [pc, #180]	; (800b97c <rotate180+0xe0>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	605a      	str	r2, [r3, #4]
	  mode.enc = 1;
 800b8cc:	4b2c      	ldr	r3, [pc, #176]	; (800b980 <rotate180+0xe4>)
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	70da      	strb	r2, [r3, #3]
	///while(EN3_L.integrate >= -Target_pul_quarter && EN4_R.integrate <= Target_pul_quarter){
  while(EN3_L.integrate <= Target_pul_quarter*2 || EN4_R.integrate >= -Target_pul_quarter*2){
 800b8d2:	e005      	b.n	800b8e0 <rotate180+0x44>
	  mode.control = 3;
 800b8d4:	4b2a      	ldr	r3, [pc, #168]	; (800b980 <rotate180+0xe4>)
 800b8d6:	2203      	movs	r2, #3
 800b8d8:	715a      	strb	r2, [r3, #5]
	  Target_Rad_velo = -6;//Rotate(Target_Rad_velo, -5, Target_pul_quarter*2, EN3_L.integrate);
 800b8da:	4b2a      	ldr	r3, [pc, #168]	; (800b984 <rotate180+0xe8>)
 800b8dc:	4a2a      	ldr	r2, [pc, #168]	; (800b988 <rotate180+0xec>)
 800b8de:	601a      	str	r2, [r3, #0]
  while(EN3_L.integrate <= Target_pul_quarter*2 || EN4_R.integrate >= -Target_pul_quarter*2){
 800b8e0:	4b24      	ldr	r3, [pc, #144]	; (800b974 <rotate180+0xd8>)
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	ee07 3a90 	vmov	s15, r3
 800b8e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b8ec:	4b27      	ldr	r3, [pc, #156]	; (800b98c <rotate180+0xf0>)
 800b8ee:	edd3 7a00 	vldr	s15, [r3]
 800b8f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b8f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8fe:	d9e9      	bls.n	800b8d4 <rotate180+0x38>
 800b900:	4b1d      	ldr	r3, [pc, #116]	; (800b978 <rotate180+0xdc>)
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	ee07 3a90 	vmov	s15, r3
 800b908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b90c:	4b1f      	ldr	r3, [pc, #124]	; (800b98c <rotate180+0xf0>)
 800b90e:	edd3 7a00 	vldr	s15, [r3]
 800b912:	eef1 7a67 	vneg.f32	s15, s15
 800b916:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b91a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b922:	dad7      	bge.n	800b8d4 <rotate180+0x38>
	  //Rotate_Control(Target_rotate,T1, velocity.KP, velocity.KI, velocity.KD);

//    	check = EN3_L.integrate;
//    	check2 = EN4_R.integrate;
    	}
      mode.enc = 0;
 800b924:	4b16      	ldr	r3, [pc, #88]	; (800b980 <rotate180+0xe4>)
 800b926:	2200      	movs	r2, #0
 800b928:	70da      	strb	r2, [r3, #3]
      Target_velocity = 0;
 800b92a:	4b10      	ldr	r3, [pc, #64]	; (800b96c <rotate180+0xd0>)
 800b92c:	f04f 0200 	mov.w	r2, #0
 800b930:	601a      	str	r2, [r3, #0]
      Target_Rad_velo =0;
 800b932:	4b14      	ldr	r3, [pc, #80]	; (800b984 <rotate180+0xe8>)
 800b934:	f04f 0200 	mov.w	r2, #0
 800b938:	601a      	str	r2, [r3, #0]
      EN3_L.integrate = 0;
 800b93a:	4b0e      	ldr	r3, [pc, #56]	; (800b974 <rotate180+0xd8>)
 800b93c:	2200      	movs	r2, #0
 800b93e:	605a      	str	r2, [r3, #4]
      EN4_R.integrate = 0;
 800b940:	4b0d      	ldr	r3, [pc, #52]	; (800b978 <rotate180+0xdc>)
 800b942:	2200      	movs	r2, #0
 800b944:	605a      	str	r2, [r3, #4]
  	  EN_Body.integrate = 0;
 800b946:	4b0d      	ldr	r3, [pc, #52]	; (800b97c <rotate180+0xe0>)
 800b948:	2200      	movs	r2, #0
 800b94a:	605a      	str	r2, [r3, #4]

      counter++;
 800b94c:	79fb      	ldrb	r3, [r7, #7]
 800b94e:	3301      	adds	r3, #1
 800b950:	71fb      	strb	r3, [r7, #7]
   while(counter < 1){
 800b952:	79fb      	ldrb	r3, [r7, #7]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d0a7      	beq.n	800b8a8 <rotate180+0xc>
     }
	error_reset = 0;
 800b958:	4b05      	ldr	r3, [pc, #20]	; (800b970 <rotate180+0xd4>)
 800b95a:	2200      	movs	r2, #0
 800b95c:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800b95e:	f7fd ffd5 	bl	800990c <Motor_Count_Clear>
//    	    printf("180°回転時左 : %d \r\n",check);
//    	    printf("180°回転時右 : %d \r\n",check2);
//    	    printf("\r\n");

}
 800b962:	bf00      	nop
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	200002b8 	.word	0x200002b8
 800b970:	2000027c 	.word	0x2000027c
 800b974:	20000050 	.word	0x20000050
 800b978:	2000005c 	.word	0x2000005c
 800b97c:	20000068 	.word	0x20000068
 800b980:	20000074 	.word	0x20000074
 800b984:	200002bc 	.word	0x200002bc
 800b988:	c0c00000 	.word	0xc0c00000
 800b98c:	20000004 	.word	0x20000004

0800b990 <back_calib>:
	EN_Body.integrate = 0;
	error_reset = 0;
	Motor_Count_Clear();

}
void back_calib(){
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
	error_reset = 0;
 800b996:	4b2a      	ldr	r3, [pc, #168]	; (800ba40 <back_calib+0xb0>)
 800b998:	2200      	movs	r2, #0
 800b99a:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800b99c:	f7fd ffb6 	bl	800990c <Motor_Count_Clear>
    EN3_L.integrate = 0;
 800b9a0:	4b28      	ldr	r3, [pc, #160]	; (800ba44 <back_calib+0xb4>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b9a6:	4b28      	ldr	r3, [pc, #160]	; (800ba48 <back_calib+0xb8>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b9ac:	4b27      	ldr	r3, [pc, #156]	; (800ba4c <back_calib+0xbc>)
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800b9b2:	4b27      	ldr	r3, [pc, #156]	; (800ba50 <back_calib+0xc0>)
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	70da      	strb	r2, [r3, #3]
    //50mmバック

    while(EN3_L.integrate + EN4_R.integrate > -2 * (61.75-40) / MM_PER_PULSE){
 800b9b8:	e005      	b.n	800b9c6 <back_calib+0x36>
    	Target_velocity = -90;
 800b9ba:	4b26      	ldr	r3, [pc, #152]	; (800ba54 <back_calib+0xc4>)
 800b9bc:	4a26      	ldr	r2, [pc, #152]	; (800ba58 <back_calib+0xc8>)
 800b9be:	601a      	str	r2, [r3, #0]
    	mode.control = 4;
 800b9c0:	4b23      	ldr	r3, [pc, #140]	; (800ba50 <back_calib+0xc0>)
 800b9c2:	2204      	movs	r2, #4
 800b9c4:	715a      	strb	r2, [r3, #5]
    while(EN3_L.integrate + EN4_R.integrate > -2 * (61.75-40) / MM_PER_PULSE){
 800b9c6:	4b1f      	ldr	r3, [pc, #124]	; (800ba44 <back_calib+0xb4>)
 800b9c8:	685a      	ldr	r2, [r3, #4]
 800b9ca:	4b1f      	ldr	r3, [pc, #124]	; (800ba48 <back_calib+0xb8>)
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7fc fcdf 	bl	8008394 <__aeabi_i2d>
 800b9d6:	a318      	add	r3, pc, #96	; (adr r3, 800ba38 <back_calib+0xa8>)
 800b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9dc:	f7fc ffd4 	bl	8008988 <__aeabi_dcmpgt>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d1e9      	bne.n	800b9ba <back_calib+0x2a>
    }
    Target_velocity = 0;
 800b9e6:	4b1b      	ldr	r3, [pc, #108]	; (800ba54 <back_calib+0xc4>)
 800b9e8:	f04f 0200 	mov.w	r2, #0
 800b9ec:	601a      	str	r2, [r3, #0]
    mode.control = 5;
 800b9ee:	4b18      	ldr	r3, [pc, #96]	; (800ba50 <back_calib+0xc0>)
 800b9f0:	2205      	movs	r2, #5
 800b9f2:	715a      	strb	r2, [r3, #5]
    mode.enc = 0;
 800b9f4:	4b16      	ldr	r3, [pc, #88]	; (800ba50 <back_calib+0xc0>)
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	70da      	strb	r2, [r3, #3]
    EN3_L.integrate = 0;
 800b9fa:	4b12      	ldr	r3, [pc, #72]	; (800ba44 <back_calib+0xb4>)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ba00:	4b11      	ldr	r3, [pc, #68]	; (800ba48 <back_calib+0xb8>)
 800ba02:	2200      	movs	r2, #0
 800ba04:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ba06:	4b11      	ldr	r3, [pc, #68]	; (800ba4c <back_calib+0xbc>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	605a      	str	r2, [r3, #4]
	error_reset = 0;
 800ba0c:	4b0c      	ldr	r3, [pc, #48]	; (800ba40 <back_calib+0xb0>)
 800ba0e:	2200      	movs	r2, #0
 800ba10:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ba12:	f7fd ff7b 	bl	800990c <Motor_Count_Clear>
    for(int i=0;i < WAIT*4;i++);
 800ba16:	2300      	movs	r3, #0
 800ba18:	607b      	str	r3, [r7, #4]
 800ba1a:	e002      	b.n	800ba22 <back_calib+0x92>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	607b      	str	r3, [r7, #4]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	4a0d      	ldr	r2, [pc, #52]	; (800ba5c <back_calib+0xcc>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	ddf8      	ble.n	800ba1c <back_calib+0x8c>

}
 800ba2a:	bf00      	nop
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	f3af 8000 	nop.w
 800ba38:	107febef 	.word	0x107febef
 800ba3c:	c0d58254 	.word	0xc0d58254
 800ba40:	2000027c 	.word	0x2000027c
 800ba44:	20000050 	.word	0x20000050
 800ba48:	2000005c 	.word	0x2000005c
 800ba4c:	20000068 	.word	0x20000068
 800ba50:	20000074 	.word	0x20000074
 800ba54:	200002b8 	.word	0x200002b8
 800ba58:	c2b40000 	.word	0xc2b40000
 800ba5c:	0001d4bf 	.word	0x0001d4bf

0800ba60 <R_turn_select>:
	//経過時間計測オフ



}
void R_turn_select(){
 800ba60:	b580      	push	{r7, lr}
 800ba62:	af00      	add	r7, sp, #0
  switch(mode.turn){
 800ba64:	4b1e      	ldr	r3, [pc, #120]	; (800bae0 <R_turn_select+0x80>)
 800ba66:	7a5b      	ldrb	r3, [r3, #9]
 800ba68:	2b03      	cmp	r3, #3
 800ba6a:	d82d      	bhi.n	800bac8 <R_turn_select+0x68>
 800ba6c:	a201      	add	r2, pc, #4	; (adr r2, 800ba74 <R_turn_select+0x14>)
 800ba6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba72:	bf00      	nop
 800ba74:	0800ba85 	.word	0x0800ba85
 800ba78:	0800baa3 	.word	0x0800baa3
 800ba7c:	0800baa9 	.word	0x0800baa9
 800ba80:	0800baaf 	.word	0x0800baaf
  case 0:
	  Decelerate();
 800ba84:	f7ff f91c 	bl	800acc0 <Decelerate>
	  wait(0.3);
 800ba88:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800bad0 <R_turn_select+0x70>
 800ba8c:	f7fe ffe8 	bl	800aa60 <wait>
	  turn_right();
 800ba90:	f7ff fb38 	bl	800b104 <turn_right>
	  wait(0.3);
 800ba94:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bad0 <R_turn_select+0x70>
 800ba98:	f7fe ffe2 	bl	800aa60 <wait>
      Accelerate();
 800ba9c:	f7ff f860 	bl	800ab60 <Accelerate>
      break;
 800baa0:	e012      	b.n	800bac8 <R_turn_select+0x68>
  case 1:
	  slow_turn_R();
 800baa2:	f7ff fc05 	bl	800b2b0 <slow_turn_R>
	  break;
 800baa6:	e00f      	b.n	800bac8 <R_turn_select+0x68>
  case 2:
	  shinchi_turn_R();
 800baa8:	f7ff fd72 	bl	800b590 <shinchi_turn_R>
	  break;
 800baac:	e00c      	b.n	800bac8 <R_turn_select+0x68>
  case 3:
      Decelerate();
 800baae:	f7ff f907 	bl	800acc0 <Decelerate>
      IMU_turn(-90,-5);
 800bab2:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bad8 <R_turn_select+0x78>
 800bab6:	f06f 0059 	mvn.w	r0, #89	; 0x59
 800baba:	f7ff fa79 	bl	800afb0 <IMU_turn>
      IMU_init();
 800babe:	f7fd fe79 	bl	80097b4 <IMU_init>
      Accelerate();
 800bac2:	f7ff f84d 	bl	800ab60 <Accelerate>
      break;
 800bac6:	bf00      	nop
  }
}
 800bac8:	bf00      	nop
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	f3af 8000 	nop.w
 800bad0:	33333333 	.word	0x33333333
 800bad4:	3fd33333 	.word	0x3fd33333
 800bad8:	00000000 	.word	0x00000000
 800badc:	c0140000 	.word	0xc0140000
 800bae0:	20000074 	.word	0x20000074
 800bae4:	00000000 	.word	0x00000000

0800bae8 <L_turn_select>:
void L_turn_select(){
 800bae8:	b580      	push	{r7, lr}
 800baea:	af00      	add	r7, sp, #0
  switch(mode.turn){
 800baec:	4b1e      	ldr	r3, [pc, #120]	; (800bb68 <L_turn_select+0x80>)
 800baee:	7a5b      	ldrb	r3, [r3, #9]
 800baf0:	2b03      	cmp	r3, #3
 800baf2:	d82c      	bhi.n	800bb4e <L_turn_select+0x66>
 800baf4:	a201      	add	r2, pc, #4	; (adr r2, 800bafc <L_turn_select+0x14>)
 800baf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bafa:	bf00      	nop
 800bafc:	0800bb0d 	.word	0x0800bb0d
 800bb00:	0800bb2b 	.word	0x0800bb2b
 800bb04:	0800bb31 	.word	0x0800bb31
 800bb08:	0800bb37 	.word	0x0800bb37
  case 0:
	  //加減速超信地旋回
	  Decelerate();
 800bb0c:	f7ff f8d8 	bl	800acc0 <Decelerate>
	  wait(0.3);
 800bb10:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800bb58 <L_turn_select+0x70>
 800bb14:	f7fe ffa4 	bl	800aa60 <wait>
	  turn_left();
 800bb18:	f7ff fb5e 	bl	800b1d8 <turn_left>
	  wait(0.3);
 800bb1c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bb58 <L_turn_select+0x70>
 800bb20:	f7fe ff9e 	bl	800aa60 <wait>
      Accelerate();
 800bb24:	f7ff f81c 	bl	800ab60 <Accelerate>
      break;
 800bb28:	e011      	b.n	800bb4e <L_turn_select+0x66>
  case 1:
	  //緩旋回
	  slow_turn_L();
 800bb2a:	f7ff fc79 	bl	800b420 <slow_turn_L>
	  break;
 800bb2e:	e00e      	b.n	800bb4e <L_turn_select+0x66>
  case 2:
	  //片輪旋回
	  shinchi_turn_L();
 800bb30:	f7ff fdf2 	bl	800b718 <shinchi_turn_L>
	  break;
 800bb34:	e00b      	b.n	800bb4e <L_turn_select+0x66>
  case 3:
	  //IMUで等角速度超信地旋回
      Decelerate();
 800bb36:	f7ff f8c3 	bl	800acc0 <Decelerate>
      IMU_turn(90,5);
 800bb3a:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bb60 <L_turn_select+0x78>
 800bb3e:	205a      	movs	r0, #90	; 0x5a
 800bb40:	f7ff fa36 	bl	800afb0 <IMU_turn>
      IMU_init();
 800bb44:	f7fd fe36 	bl	80097b4 <IMU_init>
      Accelerate();
 800bb48:	f7ff f80a 	bl	800ab60 <Accelerate>
      break;
 800bb4c:	bf00      	nop
  }
}
 800bb4e:	bf00      	nop
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	f3af 8000 	nop.w
 800bb58:	33333333 	.word	0x33333333
 800bb5c:	3fd33333 	.word	0x3fd33333
 800bb60:	00000000 	.word	0x00000000
 800bb64:	40140000 	.word	0x40140000
 800bb68:	20000074 	.word	0x20000074

0800bb6c <Execution_Select>:
/*---- DEFINING FUNCTION ----*/

void Execution_Select(){
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	af00      	add	r7, sp, #0


	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 800bb70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bb74:	485b      	ldr	r0, [pc, #364]	; (800bce4 <Execution_Select+0x178>)
 800bb76:	f006 fbe7 	bl	8012348 <HAL_GPIO_ReadPin>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	f040 80a3 	bne.w	800bcc8 <Execution_Select+0x15c>
	    	printf("押した\r\n");
 800bb82:	4859      	ldr	r0, [pc, #356]	; (800bce8 <Execution_Select+0x17c>)
 800bb84:	f00a fb20 	bl	80161c8 <puts>
			Motor_PWM_Stop();
 800bb88:	f7fe fa2e 	bl	8009fe8 <Motor_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 800bb8c:	4857      	ldr	r0, [pc, #348]	; (800bcec <Execution_Select+0x180>)
 800bb8e:	f007 fe12 	bl	80137b6 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim8);
 800bb92:	4857      	ldr	r0, [pc, #348]	; (800bcf0 <Execution_Select+0x184>)
 800bb94:	f007 fe0f 	bl	80137b6 <HAL_TIM_Base_Stop_IT>
			Emitter_OFF();
 800bb98:	f7fe f9b6 	bl	8009f08 <Emitter_OFF>
			ADC_Stop();
 800bb9c:	f7fe f9e2 	bl	8009f64 <ADC_Stop>
	    	HAL_Delay(400);
 800bba0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800bba4:	f004 fc12 	bl	80103cc <HAL_Delay>

	    	mode.select += 1;
 800bba8:	4b52      	ldr	r3, [pc, #328]	; (800bcf4 <Execution_Select+0x188>)
 800bbaa:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	b25a      	sxtb	r2, r3
 800bbb6:	4b4f      	ldr	r3, [pc, #316]	; (800bcf4 <Execution_Select+0x188>)
 800bbb8:	711a      	strb	r2, [r3, #4]
	    	if(mode.select == 5)
 800bbba:	4b4e      	ldr	r3, [pc, #312]	; (800bcf4 <Execution_Select+0x188>)
 800bbbc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bbc0:	2b05      	cmp	r3, #5
 800bbc2:	f040 8081 	bne.w	800bcc8 <Execution_Select+0x15c>
	    		mode.select = 3;
 800bbc6:	4b4b      	ldr	r3, [pc, #300]	; (800bcf4 <Execution_Select+0x188>)
 800bbc8:	2203      	movs	r2, #3
 800bbca:	711a      	strb	r2, [r3, #4]

	    }

	   //printf("%d\r\n",mode.select);

	while(mode.select%2 == 1){
 800bbcc:	e07c      	b.n	800bcc8 <Execution_Select+0x15c>

	  	    EN3_L.count = TIM3 -> CNT;
 800bbce:	4b4a      	ldr	r3, [pc, #296]	; (800bcf8 <Execution_Select+0x18c>)
 800bbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	4b49      	ldr	r3, [pc, #292]	; (800bcfc <Execution_Select+0x190>)
 800bbd6:	601a      	str	r2, [r3, #0]
	  	   // EN3_L.count = -(EN3_L.count - (30000-1));
	  	    printf("%d\r\n",EN3_L.count);
 800bbd8:	4b48      	ldr	r3, [pc, #288]	; (800bcfc <Execution_Select+0x190>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4619      	mov	r1, r3
 800bbde:	4848      	ldr	r0, [pc, #288]	; (800bd00 <Execution_Select+0x194>)
 800bbe0:	f00a fa7e 	bl	80160e0 <iprintf>
	  	    //EN3_L.integrate += EN3_L.count;


	  if(30000 -1 + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= EN3_L.count ){
 800bbe4:	4b45      	ldr	r3, [pc, #276]	; (800bcfc <Execution_Select+0x190>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f249 522e 	movw	r2, #38190	; 0x952e
 800bbec:	4293      	cmp	r3, r2
 800bbee:	dd1e      	ble.n	800bc2e <Execution_Select+0xc2>
	  	  mode.LED += 1;
 800bbf0:	4b40      	ldr	r3, [pc, #256]	; (800bcf4 <Execution_Select+0x188>)
 800bbf2:	f993 3000 	ldrsb.w	r3, [r3]
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	b25a      	sxtb	r2, r3
 800bbfe:	4b3d      	ldr	r3, [pc, #244]	; (800bcf4 <Execution_Select+0x188>)
 800bc00:	701a      	strb	r2, [r3, #0]
	  	  if(mode.LED > 7)
 800bc02:	4b3c      	ldr	r3, [pc, #240]	; (800bcf4 <Execution_Select+0x188>)
 800bc04:	f993 3000 	ldrsb.w	r3, [r3]
 800bc08:	2b07      	cmp	r3, #7
 800bc0a:	dd02      	ble.n	800bc12 <Execution_Select+0xa6>
	  		  mode.LED = 0;
 800bc0c:	4b39      	ldr	r3, [pc, #228]	; (800bcf4 <Execution_Select+0x188>)
 800bc0e:	2200      	movs	r2, #0
 800bc10:	701a      	strb	r2, [r3, #0]
	  	  LED_Change();
 800bc12:	f7fe fc5f 	bl	800a4d4 <LED_Change>

	  	  Encoder_Reset();
 800bc16:	f7fe fec1 	bl	800a99c <Encoder_Reset>
	  	  //mode.execution = mode.LED;
	  	  mode.execution = mode.LED;
 800bc1a:	4b36      	ldr	r3, [pc, #216]	; (800bcf4 <Execution_Select+0x188>)
 800bc1c:	f993 2000 	ldrsb.w	r2, [r3]
 800bc20:	4b34      	ldr	r3, [pc, #208]	; (800bcf4 <Execution_Select+0x188>)
 800bc22:	709a      	strb	r2, [r3, #2]
	  	  HAL_Delay(500);
 800bc24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bc28:	f004 fbd0 	bl	80103cc <HAL_Delay>
 800bc2c:	e04c      	b.n	800bcc8 <Execution_Select+0x15c>

	  }
	  else if(30000 -1 - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= EN3_L.count){
 800bc2e:	4b33      	ldr	r3, [pc, #204]	; (800bcfc <Execution_Select+0x190>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f245 522f 	movw	r2, #21807	; 0x552f
 800bc36:	4293      	cmp	r3, r2
 800bc38:	dc1e      	bgt.n	800bc78 <Execution_Select+0x10c>
	  	  mode.LED -= 1;
 800bc3a:	4b2e      	ldr	r3, [pc, #184]	; (800bcf4 <Execution_Select+0x188>)
 800bc3c:	f993 3000 	ldrsb.w	r3, [r3]
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	3b01      	subs	r3, #1
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	b25a      	sxtb	r2, r3
 800bc48:	4b2a      	ldr	r3, [pc, #168]	; (800bcf4 <Execution_Select+0x188>)
 800bc4a:	701a      	strb	r2, [r3, #0]
	  	  if(mode.LED < 0)
 800bc4c:	4b29      	ldr	r3, [pc, #164]	; (800bcf4 <Execution_Select+0x188>)
 800bc4e:	f993 3000 	ldrsb.w	r3, [r3]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	da02      	bge.n	800bc5c <Execution_Select+0xf0>
	  	  		  mode.LED = 7;
 800bc56:	4b27      	ldr	r3, [pc, #156]	; (800bcf4 <Execution_Select+0x188>)
 800bc58:	2207      	movs	r2, #7
 800bc5a:	701a      	strb	r2, [r3, #0]
	  	  LED_Change();
 800bc5c:	f7fe fc3a 	bl	800a4d4 <LED_Change>

	  	  Encoder_Reset();
 800bc60:	f7fe fe9c 	bl	800a99c <Encoder_Reset>
	  	  //mode.execution = mode.LED;
	  	  mode.execution = mode.LED;
 800bc64:	4b23      	ldr	r3, [pc, #140]	; (800bcf4 <Execution_Select+0x188>)
 800bc66:	f993 2000 	ldrsb.w	r2, [r3]
 800bc6a:	4b22      	ldr	r3, [pc, #136]	; (800bcf4 <Execution_Select+0x188>)
 800bc6c:	709a      	strb	r2, [r3, #2]
	  	  HAL_Delay(500);
 800bc6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bc72:	f004 fbab 	bl	80103cc <HAL_Delay>
 800bc76:	e027      	b.n	800bcc8 <Execution_Select+0x15c>
	  }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 800bc78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bc7c:	4819      	ldr	r0, [pc, #100]	; (800bce4 <Execution_Select+0x178>)
 800bc7e:	f006 fb63 	bl	8012348 <HAL_GPIO_ReadPin>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d11f      	bne.n	800bcc8 <Execution_Select+0x15c>
		  printf("\r\n");
 800bc88:	481e      	ldr	r0, [pc, #120]	; (800bd04 <Execution_Select+0x198>)
 800bc8a:	f00a fa9d 	bl	80161c8 <puts>
		      HAL_Delay(500);
 800bc8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bc92:	f004 fb9b 	bl	80103cc <HAL_Delay>
	  		  Init(); // mycodeInit(); // mycode
 800bc96:	f7fe f9c1 	bl	800a01c <Init>
	  		  TIM3 -> CNT = 30000 - 1;
 800bc9a:	4b17      	ldr	r3, [pc, #92]	; (800bcf8 <Execution_Select+0x18c>)
 800bc9c:	f247 522f 	movw	r2, #29999	; 0x752f
 800bca0:	625a      	str	r2, [r3, #36]	; 0x24
	  		  TIM4 -> CNT = 30000 - 1;
 800bca2:	4b19      	ldr	r3, [pc, #100]	; (800bd08 <Execution_Select+0x19c>)
 800bca4:	f247 522f 	movw	r2, #29999	; 0x752f
 800bca8:	625a      	str	r2, [r3, #36]	; 0x24
	  		  HAL_TIM_Base_Start_IT(&htim8);
 800bcaa:	4811      	ldr	r0, [pc, #68]	; (800bcf0 <Execution_Select+0x184>)
 800bcac:	f007 fd5f 	bl	801376e <HAL_TIM_Base_Start_IT>
	  		  HAL_TIM_Base_Start_IT(&htim1);
 800bcb0:	480e      	ldr	r0, [pc, #56]	; (800bcec <Execution_Select+0x180>)
 800bcb2:	f007 fd5c 	bl	801376e <HAL_TIM_Base_Start_IT>
	  		  mode.select += 1;
 800bcb6:	4b0f      	ldr	r3, [pc, #60]	; (800bcf4 <Execution_Select+0x188>)
 800bcb8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	b25a      	sxtb	r2, r3
 800bcc4:	4b0b      	ldr	r3, [pc, #44]	; (800bcf4 <Execution_Select+0x188>)
 800bcc6:	711a      	strb	r2, [r3, #4]
	while(mode.select%2 == 1){
 800bcc8:	4b0a      	ldr	r3, [pc, #40]	; (800bcf4 <Execution_Select+0x188>)
 800bcca:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f003 0301 	and.w	r3, r3, #1
 800bcd4:	bfb8      	it	lt
 800bcd6:	425b      	neglt	r3, r3
 800bcd8:	b25b      	sxtb	r3, r3
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	f43f af77 	beq.w	800bbce <Execution_Select+0x62>
}

	}
  }
 800bce0:	bf00      	nop
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	40020400 	.word	0x40020400
 800bce8:	08017fe8 	.word	0x08017fe8
 800bcec:	20004b88 	.word	0x20004b88
 800bcf0:	200043c0 	.word	0x200043c0
 800bcf4:	20000074 	.word	0x20000074
 800bcf8:	40000400 	.word	0x40000400
 800bcfc:	20000050 	.word	0x20000050
 800bd00:	08017ff4 	.word	0x08017ff4
 800bd04:	08017f48 	.word	0x08017f48
 800bd08:	40000800 	.word	0x40000800

0800bd0c <Walk_Map_Update>:
void Gain_Change(){

}


void Walk_Map_Update(){
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
	//初期化大事すぎた。hosu
	int i = 0, j=0, flag=0, hosu=0;
 800bd12:	2300      	movs	r3, #0
 800bd14:	60fb      	str	r3, [r7, #12]
 800bd16:	2300      	movs	r3, #0
 800bd18:	60bb      	str	r3, [r7, #8]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	607b      	str	r3, [r7, #4]
 800bd1e:	2300      	movs	r3, #0
 800bd20:	603b      	str	r3, [r7, #0]

	//区画数に応じて"�?大歩数 + ゴールのマス�?-1"に初期�?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800bd22:	2300      	movs	r3, #0
 800bd24:	60fb      	str	r3, [r7, #12]
 800bd26:	e013      	b.n	800bd50 <Walk_Map_Update+0x44>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bd28:	2300      	movs	r3, #0
 800bd2a:	60bb      	str	r3, [r7, #8]
 800bd2c:	e00a      	b.n	800bd44 <Walk_Map_Update+0x38>
			walk_map[i][j] = NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1;
 800bd2e:	4a93      	ldr	r2, [pc, #588]	; (800bf7c <Walk_Map_Update+0x270>)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	011b      	lsls	r3, r3, #4
 800bd34:	441a      	add	r2, r3
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	4413      	add	r3, r2
 800bd3a:	22ff      	movs	r2, #255	; 0xff
 800bd3c:	701a      	strb	r2, [r3, #0]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	3301      	adds	r3, #1
 800bd42:	60bb      	str	r3, [r7, #8]
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	2b0f      	cmp	r3, #15
 800bd48:	ddf1      	ble.n	800bd2e <Walk_Map_Update+0x22>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	60fb      	str	r3, [r7, #12]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2b0f      	cmp	r3, #15
 800bd54:	dde8      	ble.n	800bd28 <Walk_Map_Update+0x1c>
		}
	}

	//ゴール区画�?0に初期�?
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800bd56:	2306      	movs	r3, #6
 800bd58:	60fb      	str	r3, [r7, #12]
 800bd5a:	e013      	b.n	800bd84 <Walk_Map_Update+0x78>
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800bd5c:	2309      	movs	r3, #9
 800bd5e:	60bb      	str	r3, [r7, #8]
 800bd60:	e00a      	b.n	800bd78 <Walk_Map_Update+0x6c>
			walk_map[i][j] = 0;
 800bd62:	4a86      	ldr	r2, [pc, #536]	; (800bf7c <Walk_Map_Update+0x270>)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	011b      	lsls	r3, r3, #4
 800bd68:	441a      	add	r2, r3
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	2200      	movs	r2, #0
 800bd70:	701a      	strb	r2, [r3, #0]
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	3301      	adds	r3, #1
 800bd76:	60bb      	str	r3, [r7, #8]
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	2b0a      	cmp	r3, #10
 800bd7c:	ddf1      	ble.n	800bd62 <Walk_Map_Update+0x56>
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	3301      	adds	r3, #1
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2b07      	cmp	r3, #7
 800bd88:	dde8      	ble.n	800bd5c <Walk_Map_Update+0x50>
		}
	}

	//壁が無�?として、�?�区画に歩数を割り当てる�??
	do{
		flag = 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	607b      	str	r3, [r7, #4]
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800bd8e:	2300      	movs	r3, #0
 800bd90:	60fb      	str	r3, [r7, #12]
 800bd92:	e0e2      	b.n	800bf5a <Walk_Map_Update+0x24e>

			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bd94:	2300      	movs	r3, #0
 800bd96:	60bb      	str	r3, [r7, #8]
 800bd98:	e0d8      	b.n	800bf4c <Walk_Map_Update+0x240>
				  //map�?"�?大歩数 + ゴールのマス�?-1"でなければ値を代入�?
				  //walk_map[i][j] != NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1 &&
				  if(walk_map[i][j] == hosu){
 800bd9a:	4a78      	ldr	r2, [pc, #480]	; (800bf7c <Walk_Map_Update+0x270>)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	011b      	lsls	r3, r3, #4
 800bda0:	441a      	add	r2, r3
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	4413      	add	r3, r2
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	461a      	mov	r2, r3
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	4293      	cmp	r3, r2
 800bdae:	f040 80ca 	bne.w	800bf46 <Walk_Map_Update+0x23a>

					  if(wall[i][j].north != WALL && walk_map[i][j+1] > walk_map[i][j] && j < NUMBER_OF_SQUARES - 1){
 800bdb2:	4973      	ldr	r1, [pc, #460]	; (800bf80 <Walk_Map_Update+0x274>)
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	011a      	lsls	r2, r3, #4
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	4413      	add	r3, r2
 800bdbc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bdc0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d025      	beq.n	800be16 <Walk_Map_Update+0x10a>
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	496b      	ldr	r1, [pc, #428]	; (800bf7c <Walk_Map_Update+0x270>)
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	0112      	lsls	r2, r2, #4
 800bdd4:	440a      	add	r2, r1
 800bdd6:	4413      	add	r3, r2
 800bdd8:	781a      	ldrb	r2, [r3, #0]
 800bdda:	4968      	ldr	r1, [pc, #416]	; (800bf7c <Walk_Map_Update+0x270>)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	011b      	lsls	r3, r3, #4
 800bde0:	4419      	add	r1, r3
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	440b      	add	r3, r1
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d914      	bls.n	800be16 <Walk_Map_Update+0x10a>
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	2b0e      	cmp	r3, #14
 800bdf0:	dc11      	bgt.n	800be16 <Walk_Map_Update+0x10a>
						  walk_map[i][j+1] = walk_map[i][j] + 1;
 800bdf2:	4a62      	ldr	r2, [pc, #392]	; (800bf7c <Walk_Map_Update+0x270>)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	011b      	lsls	r3, r3, #4
 800bdf8:	441a      	add	r2, r3
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	781a      	ldrb	r2, [r3, #0]
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	3301      	adds	r3, #1
 800be04:	3201      	adds	r2, #1
 800be06:	b2d0      	uxtb	r0, r2
 800be08:	495c      	ldr	r1, [pc, #368]	; (800bf7c <Walk_Map_Update+0x270>)
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	0112      	lsls	r2, r2, #4
 800be0e:	440a      	add	r2, r1
 800be10:	4413      	add	r3, r2
 800be12:	4602      	mov	r2, r0
 800be14:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].east != WALL && walk_map[i+1][j] > walk_map[i][j] && i < NUMBER_OF_SQUARES - 1){
 800be16:	495a      	ldr	r1, [pc, #360]	; (800bf80 <Walk_Map_Update+0x274>)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	011a      	lsls	r2, r3, #4
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	4413      	add	r3, r2
 800be20:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800be24:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d025      	beq.n	800be7a <Walk_Map_Update+0x16e>
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	3301      	adds	r3, #1
 800be32:	4a52      	ldr	r2, [pc, #328]	; (800bf7c <Walk_Map_Update+0x270>)
 800be34:	011b      	lsls	r3, r3, #4
 800be36:	441a      	add	r2, r3
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	4413      	add	r3, r2
 800be3c:	781a      	ldrb	r2, [r3, #0]
 800be3e:	494f      	ldr	r1, [pc, #316]	; (800bf7c <Walk_Map_Update+0x270>)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	011b      	lsls	r3, r3, #4
 800be44:	4419      	add	r1, r3
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	440b      	add	r3, r1
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d914      	bls.n	800be7a <Walk_Map_Update+0x16e>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2b0e      	cmp	r3, #14
 800be54:	dc11      	bgt.n	800be7a <Walk_Map_Update+0x16e>
						  walk_map[i+1][j] = walk_map[i][j] + 1;
 800be56:	4a49      	ldr	r2, [pc, #292]	; (800bf7c <Walk_Map_Update+0x270>)
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	011b      	lsls	r3, r3, #4
 800be5c:	441a      	add	r2, r3
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	4413      	add	r3, r2
 800be62:	781a      	ldrb	r2, [r3, #0]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	3301      	adds	r3, #1
 800be68:	3201      	adds	r2, #1
 800be6a:	b2d1      	uxtb	r1, r2
 800be6c:	4a43      	ldr	r2, [pc, #268]	; (800bf7c <Walk_Map_Update+0x270>)
 800be6e:	011b      	lsls	r3, r3, #4
 800be70:	441a      	add	r2, r3
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	4413      	add	r3, r2
 800be76:	460a      	mov	r2, r1
 800be78:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].south != WALL && walk_map[i][j-1] > walk_map[i][j] && j > 0){
 800be7a:	4941      	ldr	r1, [pc, #260]	; (800bf80 <Walk_Map_Update+0x274>)
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	011a      	lsls	r2, r3, #4
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	4413      	add	r3, r2
 800be84:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800be88:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d025      	beq.n	800bede <Walk_Map_Update+0x1d2>
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	3b01      	subs	r3, #1
 800be96:	4939      	ldr	r1, [pc, #228]	; (800bf7c <Walk_Map_Update+0x270>)
 800be98:	68fa      	ldr	r2, [r7, #12]
 800be9a:	0112      	lsls	r2, r2, #4
 800be9c:	440a      	add	r2, r1
 800be9e:	4413      	add	r3, r2
 800bea0:	781a      	ldrb	r2, [r3, #0]
 800bea2:	4936      	ldr	r1, [pc, #216]	; (800bf7c <Walk_Map_Update+0x270>)
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	011b      	lsls	r3, r3, #4
 800bea8:	4419      	add	r1, r3
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	440b      	add	r3, r1
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d914      	bls.n	800bede <Walk_Map_Update+0x1d2>
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	dd11      	ble.n	800bede <Walk_Map_Update+0x1d2>
						  walk_map[i][j-1] = walk_map[i][j] + 1;
 800beba:	4a30      	ldr	r2, [pc, #192]	; (800bf7c <Walk_Map_Update+0x270>)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	011b      	lsls	r3, r3, #4
 800bec0:	441a      	add	r2, r3
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	4413      	add	r3, r2
 800bec6:	781a      	ldrb	r2, [r3, #0]
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	3b01      	subs	r3, #1
 800becc:	3201      	adds	r2, #1
 800bece:	b2d0      	uxtb	r0, r2
 800bed0:	492a      	ldr	r1, [pc, #168]	; (800bf7c <Walk_Map_Update+0x270>)
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	0112      	lsls	r2, r2, #4
 800bed6:	440a      	add	r2, r1
 800bed8:	4413      	add	r3, r2
 800beda:	4602      	mov	r2, r0
 800bedc:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].west != WALL && walk_map[i-1][j] > walk_map[i][j] && i > 0){
 800bede:	4928      	ldr	r1, [pc, #160]	; (800bf80 <Walk_Map_Update+0x274>)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	011a      	lsls	r2, r3, #4
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	4413      	add	r3, r2
 800bee8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800beec:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d025      	beq.n	800bf42 <Walk_Map_Update+0x236>
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	3b01      	subs	r3, #1
 800befa:	4a20      	ldr	r2, [pc, #128]	; (800bf7c <Walk_Map_Update+0x270>)
 800befc:	011b      	lsls	r3, r3, #4
 800befe:	441a      	add	r2, r3
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	4413      	add	r3, r2
 800bf04:	781a      	ldrb	r2, [r3, #0]
 800bf06:	491d      	ldr	r1, [pc, #116]	; (800bf7c <Walk_Map_Update+0x270>)
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	011b      	lsls	r3, r3, #4
 800bf0c:	4419      	add	r1, r3
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	440b      	add	r3, r1
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d914      	bls.n	800bf42 <Walk_Map_Update+0x236>
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	dd11      	ble.n	800bf42 <Walk_Map_Update+0x236>
						  walk_map[i-1][j] = walk_map[i][j] + 1;
 800bf1e:	4a17      	ldr	r2, [pc, #92]	; (800bf7c <Walk_Map_Update+0x270>)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	011b      	lsls	r3, r3, #4
 800bf24:	441a      	add	r2, r3
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	4413      	add	r3, r2
 800bf2a:	781a      	ldrb	r2, [r3, #0]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	3201      	adds	r2, #1
 800bf32:	b2d1      	uxtb	r1, r2
 800bf34:	4a11      	ldr	r2, [pc, #68]	; (800bf7c <Walk_Map_Update+0x270>)
 800bf36:	011b      	lsls	r3, r3, #4
 800bf38:	441a      	add	r2, r3
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	460a      	mov	r2, r1
 800bf40:	701a      	strb	r2, [r3, #0]
					  }

					  flag = 1;
 800bf42:	2301      	movs	r3, #1
 800bf44:	607b      	str	r3, [r7, #4]
			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	60bb      	str	r3, [r7, #8]
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	2b0f      	cmp	r3, #15
 800bf50:	f77f af23 	ble.w	800bd9a <Walk_Map_Update+0x8e>
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	3301      	adds	r3, #1
 800bf58:	60fb      	str	r3, [r7, #12]
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b0f      	cmp	r3, #15
 800bf5e:	f77f af19 	ble.w	800bd94 <Walk_Map_Update+0x88>
			       }
			  }
		  }
		  //歩数と繰り返しの回数は等し�?
		  hosu++;
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	3301      	adds	r3, #1
 800bf66:	603b      	str	r3, [r7, #0]
	}while(flag);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	f47f af0d 	bne.w	800bd8a <Walk_Map_Update+0x7e>

}
 800bf70:	bf00      	nop
 800bf72:	3714      	adds	r7, #20
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr
 800bf7c:	20004a58 	.word	0x20004a58
 800bf80:	20004fb4 	.word	0x20004fb4

0800bf84 <Tire_Maintenance>:
//
//	}
}


void Tire_Maintenance(){
 800bf84:	b580      	push	{r7, lr}
 800bf86:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 800bf88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bf8c:	f004 fa1e 	bl	80103cc <HAL_Delay>
	Accelerate();
 800bf90:	f7fe fde6 	bl	800ab60 <Accelerate>
	straight();
 800bf94:	f7fe ff4c 	bl	800ae30 <straight>
	straight();
 800bf98:	f7fe ff4a 	bl	800ae30 <straight>
	Decelerate();
 800bf9c:	f7fe fe90 	bl	800acc0 <Decelerate>
	Motor_PWM_Stop();
 800bfa0:	f7fe f822 	bl	8009fe8 <Motor_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 800bfa4:	480a      	ldr	r0, [pc, #40]	; (800bfd0 <Tire_Maintenance+0x4c>)
 800bfa6:	f007 fc06 	bl	80137b6 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800bfaa:	480a      	ldr	r0, [pc, #40]	; (800bfd4 <Tire_Maintenance+0x50>)
 800bfac:	f007 fc03 	bl	80137b6 <HAL_TIM_Base_Stop_IT>
	while(1){
		printf("リセ�?トな�? : %d\r\n", All_Pulse_anytime);
 800bfb0:	4b09      	ldr	r3, [pc, #36]	; (800bfd8 <Tire_Maintenance+0x54>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	4809      	ldr	r0, [pc, #36]	; (800bfdc <Tire_Maintenance+0x58>)
 800bfb8:	f00a f892 	bl	80160e0 <iprintf>
		printf("リセ�?トあ�? : %d\r\n", All_Pulse_cut);
 800bfbc:	4b08      	ldr	r3, [pc, #32]	; (800bfe0 <Tire_Maintenance+0x5c>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	4808      	ldr	r0, [pc, #32]	; (800bfe4 <Tire_Maintenance+0x60>)
 800bfc4:	f00a f88c 	bl	80160e0 <iprintf>
		printf("\r\n");
 800bfc8:	4807      	ldr	r0, [pc, #28]	; (800bfe8 <Tire_Maintenance+0x64>)
 800bfca:	f00a f8fd 	bl	80161c8 <puts>
		printf("リセ�?トな�? : %d\r\n", All_Pulse_anytime);
 800bfce:	e7ef      	b.n	800bfb0 <Tire_Maintenance+0x2c>
 800bfd0:	20004b88 	.word	0x20004b88
 800bfd4:	200043c0 	.word	0x200043c0
 800bfd8:	200002fc 	.word	0x200002fc
 800bfdc:	08017ffc 	.word	0x08017ffc
 800bfe0:	200002f8 	.word	0x200002f8
 800bfe4:	08018018 	.word	0x08018018
 800bfe8:	08017f48 	.word	0x08017f48

0800bfec <wall_set>:
	}

}
void wall_set(){
 800bfec:	b490      	push	{r4, r7}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
	uint8_t wall_dir[4];
	  wall_dir[my_direction] = (sl_average + sr_average)/2 > FRONT_WALL  ?   WALL : NOWALL;
 800bff2:	4b8b      	ldr	r3, [pc, #556]	; (800c220 <wall_set+0x234>)
 800bff4:	ed93 7a00 	vldr	s14, [r3]
 800bff8:	4b8a      	ldr	r3, [pc, #552]	; (800c224 <wall_set+0x238>)
 800bffa:	edd3 7a00 	vldr	s15, [r3]
 800bffe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c002:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c006:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c00a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800c00e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c016:	bfcc      	ite	gt
 800c018:	2301      	movgt	r3, #1
 800c01a:	2300      	movle	r3, #0
 800c01c:	b2da      	uxtb	r2, r3
 800c01e:	4b82      	ldr	r3, [pc, #520]	; (800c228 <wall_set+0x23c>)
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	f107 0108 	add.w	r1, r7, #8
 800c026:	440b      	add	r3, r1
 800c028:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(my_direction + 1)%4] = fr_average > RIGHT_WALL  ?  WALL :  NOWALL;
 800c02c:	4b7f      	ldr	r3, [pc, #508]	; (800c22c <wall_set+0x240>)
 800c02e:	edd3 7a00 	vldr	s15, [r3]
 800c032:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800c230 <wall_set+0x244>
 800c036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c03e:	bfcc      	ite	gt
 800c040:	2301      	movgt	r3, #1
 800c042:	2300      	movle	r3, #0
 800c044:	b2d9      	uxtb	r1, r3
 800c046:	4b78      	ldr	r3, [pc, #480]	; (800c228 <wall_set+0x23c>)
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	3301      	adds	r3, #1
 800c04c:	425a      	negs	r2, r3
 800c04e:	f003 0303 	and.w	r3, r3, #3
 800c052:	f002 0203 	and.w	r2, r2, #3
 800c056:	bf58      	it	pl
 800c058:	4253      	negpl	r3, r2
 800c05a:	460a      	mov	r2, r1
 800c05c:	f107 0108 	add.w	r1, r7, #8
 800c060:	440b      	add	r3, r1
 800c062:	f803 2c04 	strb.w	r2, [r3, #-4]
		  wall_dir[(my_direction + 2)%4] = NOWALL;
 800c066:	4b70      	ldr	r3, [pc, #448]	; (800c228 <wall_set+0x23c>)
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	3302      	adds	r3, #2
 800c06c:	425a      	negs	r2, r3
 800c06e:	f003 0303 	and.w	r3, r3, #3
 800c072:	f002 0203 	and.w	r2, r2, #3
 800c076:	bf58      	it	pl
 800c078:	4253      	negpl	r3, r2
 800c07a:	f107 0208 	add.w	r2, r7, #8
 800c07e:	4413      	add	r3, r2
 800c080:	2200      	movs	r2, #0
 800c082:	f803 2c04 	strb.w	r2, [r3, #-4]
		  wall_dir[(my_direction + 3)%4] = fl_average > LEFT_WALL ?  WALL :  NOWALL;
 800c086:	4b6b      	ldr	r3, [pc, #428]	; (800c234 <wall_set+0x248>)
 800c088:	edd3 7a00 	vldr	s15, [r3]
 800c08c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800c238 <wall_set+0x24c>
 800c090:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c098:	bfcc      	ite	gt
 800c09a:	2301      	movgt	r3, #1
 800c09c:	2300      	movle	r3, #0
 800c09e:	b2d9      	uxtb	r1, r3
 800c0a0:	4b61      	ldr	r3, [pc, #388]	; (800c228 <wall_set+0x23c>)
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	3303      	adds	r3, #3
 800c0a6:	425a      	negs	r2, r3
 800c0a8:	f003 0303 	and.w	r3, r3, #3
 800c0ac:	f002 0203 	and.w	r2, r2, #3
 800c0b0:	bf58      	it	pl
 800c0b2:	4253      	negpl	r3, r2
 800c0b4:	460a      	mov	r2, r1
 800c0b6:	f107 0108 	add.w	r1, r7, #8
 800c0ba:	440b      	add	r3, r1
 800c0bc:	f803 2c04 	strb.w	r2, [r3, #-4]

	  wall[x][y].north = wall_dir[0];
 800c0c0:	7939      	ldrb	r1, [r7, #4]
 800c0c2:	4b5e      	ldr	r3, [pc, #376]	; (800c23c <wall_set+0x250>)
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	461c      	mov	r4, r3
 800c0c8:	4b5d      	ldr	r3, [pc, #372]	; (800c240 <wall_set+0x254>)
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	f003 0303 	and.w	r3, r3, #3
 800c0d4:	b2d8      	uxtb	r0, r3
 800c0d6:	495b      	ldr	r1, [pc, #364]	; (800c244 <wall_set+0x258>)
 800c0d8:	0123      	lsls	r3, r4, #4
 800c0da:	441a      	add	r2, r3
 800c0dc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c0e0:	f360 0301 	bfi	r3, r0, #0, #2
 800c0e4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].east = wall_dir[1];
 800c0e8:	7979      	ldrb	r1, [r7, #5]
 800c0ea:	4b54      	ldr	r3, [pc, #336]	; (800c23c <wall_set+0x250>)
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	461c      	mov	r4, r3
 800c0f0:	4b53      	ldr	r3, [pc, #332]	; (800c240 <wall_set+0x254>)
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	f003 0303 	and.w	r3, r3, #3
 800c0fc:	b2d8      	uxtb	r0, r3
 800c0fe:	4951      	ldr	r1, [pc, #324]	; (800c244 <wall_set+0x258>)
 800c100:	0123      	lsls	r3, r4, #4
 800c102:	441a      	add	r2, r3
 800c104:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c108:	f360 0383 	bfi	r3, r0, #2, #2
 800c10c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].south = wall_dir[2];
 800c110:	79b9      	ldrb	r1, [r7, #6]
 800c112:	4b4a      	ldr	r3, [pc, #296]	; (800c23c <wall_set+0x250>)
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	461c      	mov	r4, r3
 800c118:	4b49      	ldr	r3, [pc, #292]	; (800c240 <wall_set+0x254>)
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	461a      	mov	r2, r3
 800c11e:	460b      	mov	r3, r1
 800c120:	f003 0303 	and.w	r3, r3, #3
 800c124:	b2d8      	uxtb	r0, r3
 800c126:	4947      	ldr	r1, [pc, #284]	; (800c244 <wall_set+0x258>)
 800c128:	0123      	lsls	r3, r4, #4
 800c12a:	441a      	add	r2, r3
 800c12c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c130:	f360 1305 	bfi	r3, r0, #4, #2
 800c134:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].west = wall_dir[3];
 800c138:	79f9      	ldrb	r1, [r7, #7]
 800c13a:	4b40      	ldr	r3, [pc, #256]	; (800c23c <wall_set+0x250>)
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	461c      	mov	r4, r3
 800c140:	4b3f      	ldr	r3, [pc, #252]	; (800c240 <wall_set+0x254>)
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	461a      	mov	r2, r3
 800c146:	460b      	mov	r3, r1
 800c148:	f003 0303 	and.w	r3, r3, #3
 800c14c:	b2d8      	uxtb	r0, r3
 800c14e:	493d      	ldr	r1, [pc, #244]	; (800c244 <wall_set+0x258>)
 800c150:	0123      	lsls	r3, r4, #4
 800c152:	441a      	add	r2, r3
 800c154:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c158:	f360 1387 	bfi	r3, r0, #6, #2
 800c15c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  if(y < (NUMBER_OF_SQUARES-1) )wall[x][y+1].south = wall_dir[0];
 800c160:	4b37      	ldr	r3, [pc, #220]	; (800c240 <wall_set+0x254>)
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	2b0e      	cmp	r3, #14
 800c166:	d812      	bhi.n	800c18e <wall_set+0x1a2>
 800c168:	7939      	ldrb	r1, [r7, #4]
 800c16a:	4b34      	ldr	r3, [pc, #208]	; (800c23c <wall_set+0x250>)
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	461a      	mov	r2, r3
 800c170:	4b33      	ldr	r3, [pc, #204]	; (800c240 <wall_set+0x254>)
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	3301      	adds	r3, #1
 800c176:	f001 0103 	and.w	r1, r1, #3
 800c17a:	b2c8      	uxtb	r0, r1
 800c17c:	4931      	ldr	r1, [pc, #196]	; (800c244 <wall_set+0x258>)
 800c17e:	0112      	lsls	r2, r2, #4
 800c180:	441a      	add	r2, r3
 800c182:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c186:	f360 1305 	bfi	r3, r0, #4, #2
 800c18a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(x < (NUMBER_OF_SQUARES-1) )wall[x+1][y].west = wall_dir[1];
 800c18e:	4b2b      	ldr	r3, [pc, #172]	; (800c23c <wall_set+0x250>)
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	2b0e      	cmp	r3, #14
 800c194:	d811      	bhi.n	800c1ba <wall_set+0x1ce>
 800c196:	7979      	ldrb	r1, [r7, #5]
 800c198:	4b28      	ldr	r3, [pc, #160]	; (800c23c <wall_set+0x250>)
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	3301      	adds	r3, #1
 800c19e:	4a28      	ldr	r2, [pc, #160]	; (800c240 <wall_set+0x254>)
 800c1a0:	7812      	ldrb	r2, [r2, #0]
 800c1a2:	f001 0103 	and.w	r1, r1, #3
 800c1a6:	b2c8      	uxtb	r0, r1
 800c1a8:	4926      	ldr	r1, [pc, #152]	; (800c244 <wall_set+0x258>)
 800c1aa:	011b      	lsls	r3, r3, #4
 800c1ac:	441a      	add	r2, r3
 800c1ae:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c1b2:	f360 1387 	bfi	r3, r0, #6, #2
 800c1b6:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(y > 0 ) wall[x][y-1].north = wall_dir[2];
 800c1ba:	4b21      	ldr	r3, [pc, #132]	; (800c240 <wall_set+0x254>)
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d012      	beq.n	800c1e8 <wall_set+0x1fc>
 800c1c2:	79b9      	ldrb	r1, [r7, #6]
 800c1c4:	4b1d      	ldr	r3, [pc, #116]	; (800c23c <wall_set+0x250>)
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	4b1d      	ldr	r3, [pc, #116]	; (800c240 <wall_set+0x254>)
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	f001 0103 	and.w	r1, r1, #3
 800c1d4:	b2c8      	uxtb	r0, r1
 800c1d6:	491b      	ldr	r1, [pc, #108]	; (800c244 <wall_set+0x258>)
 800c1d8:	0112      	lsls	r2, r2, #4
 800c1da:	441a      	add	r2, r3
 800c1dc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c1e0:	f360 0301 	bfi	r3, r0, #0, #2
 800c1e4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(x > 0 ) wall[x-1][y].east = wall_dir[3];
 800c1e8:	4b14      	ldr	r3, [pc, #80]	; (800c23c <wall_set+0x250>)
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d011      	beq.n	800c214 <wall_set+0x228>
 800c1f0:	79f9      	ldrb	r1, [r7, #7]
 800c1f2:	4b12      	ldr	r3, [pc, #72]	; (800c23c <wall_set+0x250>)
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	4a11      	ldr	r2, [pc, #68]	; (800c240 <wall_set+0x254>)
 800c1fa:	7812      	ldrb	r2, [r2, #0]
 800c1fc:	f001 0103 	and.w	r1, r1, #3
 800c200:	b2c8      	uxtb	r0, r1
 800c202:	4910      	ldr	r1, [pc, #64]	; (800c244 <wall_set+0x258>)
 800c204:	011b      	lsls	r3, r3, #4
 800c206:	441a      	add	r2, r3
 800c208:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c20c:	f360 0383 	bfi	r3, r0, #2, #2
 800c210:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

}
 800c214:	bf00      	nop
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bc90      	pop	{r4, r7}
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	20005258 	.word	0x20005258
 800c224:	20004498 	.word	0x20004498
 800c228:	20004492 	.word	0x20004492
 800c22c:	20004fb0 	.word	0x20004fb0
 800c230:	42c80000 	.word	0x42c80000
 800c234:	200043bc 	.word	0x200043bc
 800c238:	430c0000 	.word	0x430c0000
 800c23c:	2000030c 	.word	0x2000030c
 800c240:	2000030d 	.word	0x2000030d
 800c244:	20004fb4 	.word	0x20004fb4

0800c248 <goal_area_search>:
    	}
#endif
}


void goal_area_search(){
 800c248:	b580      	push	{r7, lr}
 800c24a:	b0be      	sub	sp, #248	; 0xf8
 800c24c:	af00      	add	r7, sp, #0

	char orbit;

	//壁更新
	wall_set();
 800c24e:	f7ff fecd 	bl	800bfec <wall_set>

	//マップ更新
	Walk_Map_Update();
 800c252:	f7ff fd5b 	bl	800bd0c <Walk_Map_Update>


	switch(my_direction){
 800c256:	4bcc      	ldr	r3, [pc, #816]	; (800c588 <goal_area_search+0x340>)
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	2b03      	cmp	r3, #3
 800c25c:	f200 86f7 	bhi.w	800d04e <goal_area_search+0xe06>
 800c260:	a201      	add	r2, pc, #4	; (adr r2, 800c268 <goal_area_search+0x20>)
 800c262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c266:	bf00      	nop
 800c268:	0800c279 	.word	0x0800c279
 800c26c:	0800c62d 	.word	0x0800c62d
 800c270:	0800c9d7 	.word	0x0800c9d7
 800c274:	0800cd13 	.word	0x0800cd13
	case north:

		//現在の座標 == ゴールの下2マス
		//xが小さいほうなら、右回り
		//直進
		Accelerate();
 800c278:	f7fe fc72 	bl	800ab60 <Accelerate>
		Decelerate();
 800c27c:	f7fe fd20 	bl	800acc0 <Decelerate>
		y++;
 800c280:	4bc2      	ldr	r3, [pc, #776]	; (800c58c <goal_area_search+0x344>)
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	3301      	adds	r3, #1
 800c286:	b2da      	uxtb	r2, r3
 800c288:	4bc0      	ldr	r3, [pc, #768]	; (800c58c <goal_area_search+0x344>)
 800c28a:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800c28c:	f7ff feae 	bl	800bfec <wall_set>
		//待つ
		for(int i=0;i < WAIT*0.5;i++);
 800c290:	2300      	movs	r3, #0
 800c292:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c296:	e004      	b.n	800c2a2 <goal_area_search+0x5a>
 800c298:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c29c:	3301      	adds	r3, #1
 800c29e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c2a2:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800c2a6:	f7fc f875 	bl	8008394 <__aeabi_i2d>
 800c2aa:	a3b5      	add	r3, pc, #724	; (adr r3, 800c580 <goal_area_search+0x338>)
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	f7fc fb4c 	bl	800894c <__aeabi_dcmplt>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d1ee      	bne.n	800c298 <goal_area_search+0x50>

		if(x == X_GOAL_LESSER){
 800c2ba:	4bb5      	ldr	r3, [pc, #724]	; (800c590 <goal_area_search+0x348>)
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	2b06      	cmp	r3, #6
 800c2c0:	d103      	bne.n	800c2ca <goal_area_search+0x82>
			orbit = 'R';
 800c2c2:	2352      	movs	r3, #82	; 0x52
 800c2c4:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800c2c8:	e006      	b.n	800c2d8 <goal_area_search+0x90>
		}
		//xが大きい方なら、左回り
		else if(x == X_GOAL_LARGER){
 800c2ca:	4bb1      	ldr	r3, [pc, #708]	; (800c590 <goal_area_search+0x348>)
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	2b07      	cmp	r3, #7
 800c2d0:	d102      	bne.n	800c2d8 <goal_area_search+0x90>
			orbit = 'L';
 800c2d2:	234c      	movs	r3, #76	; 0x4c
 800c2d4:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}

		if(orbit == 'R'){
 800c2d8:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c2dc:	2b52      	cmp	r3, #82	; 0x52
 800c2de:	f040 80c9 	bne.w	800c474 <goal_area_search+0x22c>
			//右回り
			turn_right();
 800c2e2:	f7fe ff0f 	bl	800b104 <turn_right>
			my_direction = east;
 800c2e6:	4ba8      	ldr	r3, [pc, #672]	; (800c588 <goal_area_search+0x340>)
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c2f2:	e004      	b.n	800c2fe <goal_area_search+0xb6>
 800c2f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c2fe:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800c302:	f7fc f847 	bl	8008394 <__aeabi_i2d>
 800c306:	a39e      	add	r3, pc, #632	; (adr r3, 800c580 <goal_area_search+0x338>)
 800c308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30c:	f7fc fb1e 	bl	800894c <__aeabi_dcmplt>
 800c310:	4603      	mov	r3, r0
 800c312:	2b00      	cmp	r3, #0
 800c314:	d1ee      	bne.n	800c2f4 <goal_area_search+0xac>
			//直進
			Accelerate();
 800c316:	f7fe fc23 	bl	800ab60 <Accelerate>
			Decelerate();
 800c31a:	f7fe fcd1 	bl	800acc0 <Decelerate>
			x++;
 800c31e:	4b9c      	ldr	r3, [pc, #624]	; (800c590 <goal_area_search+0x348>)
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	3301      	adds	r3, #1
 800c324:	b2da      	uxtb	r2, r3
 800c326:	4b9a      	ldr	r3, [pc, #616]	; (800c590 <goal_area_search+0x348>)
 800c328:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c32a:	f7ff fe5f 	bl	800bfec <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c32e:	2300      	movs	r3, #0
 800c330:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c334:	e004      	b.n	800c340 <goal_area_search+0xf8>
 800c336:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c33a:	3301      	adds	r3, #1
 800c33c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c340:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800c344:	f7fc f826 	bl	8008394 <__aeabi_i2d>
 800c348:	a38d      	add	r3, pc, #564	; (adr r3, 800c580 <goal_area_search+0x338>)
 800c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34e:	f7fc fafd 	bl	800894c <__aeabi_dcmplt>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	d1ee      	bne.n	800c336 <goal_area_search+0xee>


			//右回り
			turn_right();
 800c358:	f7fe fed4 	bl	800b104 <turn_right>
			my_direction = south;
 800c35c:	4b8a      	ldr	r3, [pc, #552]	; (800c588 <goal_area_search+0x340>)
 800c35e:	2202      	movs	r2, #2
 800c360:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c362:	2300      	movs	r3, #0
 800c364:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c368:	e004      	b.n	800c374 <goal_area_search+0x12c>
 800c36a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c36e:	3301      	adds	r3, #1
 800c370:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c374:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800c378:	f7fc f80c 	bl	8008394 <__aeabi_i2d>
 800c37c:	a380      	add	r3, pc, #512	; (adr r3, 800c580 <goal_area_search+0x338>)
 800c37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c382:	f7fc fae3 	bl	800894c <__aeabi_dcmplt>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1ee      	bne.n	800c36a <goal_area_search+0x122>
			//直進
			Accelerate();
 800c38c:	f7fe fbe8 	bl	800ab60 <Accelerate>
			Decelerate();
 800c390:	f7fe fc96 	bl	800acc0 <Decelerate>
			y--;
 800c394:	4b7d      	ldr	r3, [pc, #500]	; (800c58c <goal_area_search+0x344>)
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	3b01      	subs	r3, #1
 800c39a:	b2da      	uxtb	r2, r3
 800c39c:	4b7b      	ldr	r3, [pc, #492]	; (800c58c <goal_area_search+0x344>)
 800c39e:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c3a0:	f7ff fe24 	bl	800bfec <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c3aa:	e004      	b.n	800c3b6 <goal_area_search+0x16e>
 800c3ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c3b6:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800c3ba:	f7fb ffeb 	bl	8008394 <__aeabi_i2d>
 800c3be:	a370      	add	r3, pc, #448	; (adr r3, 800c580 <goal_area_search+0x338>)
 800c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c4:	f7fc fac2 	bl	800894c <__aeabi_dcmplt>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1ee      	bne.n	800c3ac <goal_area_search+0x164>

			//右回転
			turn_right();
 800c3ce:	f7fe fe99 	bl	800b104 <turn_right>
			my_direction = west;
 800c3d2:	4b6d      	ldr	r3, [pc, #436]	; (800c588 <goal_area_search+0x340>)
 800c3d4:	2203      	movs	r2, #3
 800c3d6:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c3d8:	2300      	movs	r3, #0
 800c3da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c3de:	e004      	b.n	800c3ea <goal_area_search+0x1a2>
 800c3e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c3ea:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800c3ee:	f7fb ffd1 	bl	8008394 <__aeabi_i2d>
 800c3f2:	a363      	add	r3, pc, #396	; (adr r3, 800c580 <goal_area_search+0x338>)
 800c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f8:	f7fc faa8 	bl	800894c <__aeabi_dcmplt>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1ee      	bne.n	800c3e0 <goal_area_search+0x198>
			//直進
			Accelerate();
 800c402:	f7fe fbad 	bl	800ab60 <Accelerate>
			Decelerate();
 800c406:	f7fe fc5b 	bl	800acc0 <Decelerate>
			y--;
 800c40a:	4b60      	ldr	r3, [pc, #384]	; (800c58c <goal_area_search+0x344>)
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	3b01      	subs	r3, #1
 800c410:	b2da      	uxtb	r2, r3
 800c412:	4b5e      	ldr	r3, [pc, #376]	; (800c58c <goal_area_search+0x344>)
 800c414:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c416:	2300      	movs	r3, #0
 800c418:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c41c:	e004      	b.n	800c428 <goal_area_search+0x1e0>
 800c41e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c422:	3301      	adds	r3, #1
 800c424:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c428:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800c42c:	f7fb ffb2 	bl	8008394 <__aeabi_i2d>
 800c430:	a353      	add	r3, pc, #332	; (adr r3, 800c580 <goal_area_search+0x338>)
 800c432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c436:	f7fc fa89 	bl	800894c <__aeabi_dcmplt>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d1ee      	bne.n	800c41e <goal_area_search+0x1d6>
			//左回転
			turn_left();
 800c440:	f7fe feca 	bl	800b1d8 <turn_left>
			my_direction = south;
 800c444:	4b50      	ldr	r3, [pc, #320]	; (800c588 <goal_area_search+0x340>)
 800c446:	2202      	movs	r2, #2
 800c448:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c44a:	2300      	movs	r3, #0
 800c44c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c450:	e004      	b.n	800c45c <goal_area_search+0x214>
 800c452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c456:	3301      	adds	r3, #1
 800c458:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c45c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800c460:	f7fb ff98 	bl	8008394 <__aeabi_i2d>
 800c464:	a346      	add	r3, pc, #280	; (adr r3, 800c580 <goal_area_search+0x338>)
 800c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46a:	f7fc fa6f 	bl	800894c <__aeabi_dcmplt>
 800c46e:	4603      	mov	r3, r0
 800c470:	2b00      	cmp	r3, #0
 800c472:	d1ee      	bne.n	800c452 <goal_area_search+0x20a>
		}

		if(orbit == 'L'){
 800c474:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c478:	2b4c      	cmp	r3, #76	; 0x4c
 800c47a:	f040 85ea 	bne.w	800d052 <goal_area_search+0xe0a>
			//左回り
			turn_left();
 800c47e:	f7fe feab 	bl	800b1d8 <turn_left>
			my_direction = west;
 800c482:	4b41      	ldr	r3, [pc, #260]	; (800c588 <goal_area_search+0x340>)
 800c484:	2203      	movs	r2, #3
 800c486:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c488:	2300      	movs	r3, #0
 800c48a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c48e:	e004      	b.n	800c49a <goal_area_search+0x252>
 800c490:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c494:	3301      	adds	r3, #1
 800c496:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c49a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800c49e:	f7fb ff79 	bl	8008394 <__aeabi_i2d>
 800c4a2:	a337      	add	r3, pc, #220	; (adr r3, 800c580 <goal_area_search+0x338>)
 800c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a8:	f7fc fa50 	bl	800894c <__aeabi_dcmplt>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d1ee      	bne.n	800c490 <goal_area_search+0x248>
			//直進
			Accelerate();
 800c4b2:	f7fe fb55 	bl	800ab60 <Accelerate>
			Decelerate();
 800c4b6:	f7fe fc03 	bl	800acc0 <Decelerate>
			x--;
 800c4ba:	4b35      	ldr	r3, [pc, #212]	; (800c590 <goal_area_search+0x348>)
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	b2da      	uxtb	r2, r3
 800c4c2:	4b33      	ldr	r3, [pc, #204]	; (800c590 <goal_area_search+0x348>)
 800c4c4:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c4c6:	f7ff fd91 	bl	800bfec <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c4d0:	e004      	b.n	800c4dc <goal_area_search+0x294>
 800c4d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c4dc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800c4e0:	f7fb ff58 	bl	8008394 <__aeabi_i2d>
 800c4e4:	a326      	add	r3, pc, #152	; (adr r3, 800c580 <goal_area_search+0x338>)
 800c4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ea:	f7fc fa2f 	bl	800894c <__aeabi_dcmplt>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d1ee      	bne.n	800c4d2 <goal_area_search+0x28a>

			turn_left();
 800c4f4:	f7fe fe70 	bl	800b1d8 <turn_left>
			my_direction = south;
 800c4f8:	4b23      	ldr	r3, [pc, #140]	; (800c588 <goal_area_search+0x340>)
 800c4fa:	2202      	movs	r2, #2
 800c4fc:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c4fe:	2300      	movs	r3, #0
 800c500:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c504:	e004      	b.n	800c510 <goal_area_search+0x2c8>
 800c506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c50a:	3301      	adds	r3, #1
 800c50c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c510:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800c514:	f7fb ff3e 	bl	8008394 <__aeabi_i2d>
 800c518:	a319      	add	r3, pc, #100	; (adr r3, 800c580 <goal_area_search+0x338>)
 800c51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51e:	f7fc fa15 	bl	800894c <__aeabi_dcmplt>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1ee      	bne.n	800c506 <goal_area_search+0x2be>
			//直進
			Accelerate();
 800c528:	f7fe fb1a 	bl	800ab60 <Accelerate>
			Decelerate();
 800c52c:	f7fe fbc8 	bl	800acc0 <Decelerate>
			y--;
 800c530:	4b16      	ldr	r3, [pc, #88]	; (800c58c <goal_area_search+0x344>)
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	3b01      	subs	r3, #1
 800c536:	b2da      	uxtb	r2, r3
 800c538:	4b14      	ldr	r3, [pc, #80]	; (800c58c <goal_area_search+0x344>)
 800c53a:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c53c:	f7ff fd56 	bl	800bfec <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c540:	2300      	movs	r3, #0
 800c542:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c546:	e004      	b.n	800c552 <goal_area_search+0x30a>
 800c548:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c54c:	3301      	adds	r3, #1
 800c54e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c552:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800c556:	f7fb ff1d 	bl	8008394 <__aeabi_i2d>
 800c55a:	a309      	add	r3, pc, #36	; (adr r3, 800c580 <goal_area_search+0x338>)
 800c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c560:	f7fc f9f4 	bl	800894c <__aeabi_dcmplt>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1ee      	bne.n	800c548 <goal_area_search+0x300>

			//左回転
			turn_left();
 800c56a:	f7fe fe35 	bl	800b1d8 <turn_left>
			my_direction = east;
 800c56e:	4b06      	ldr	r3, [pc, #24]	; (800c588 <goal_area_search+0x340>)
 800c570:	2201      	movs	r2, #1
 800c572:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c574:	2300      	movs	r3, #0
 800c576:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c57a:	e010      	b.n	800c59e <goal_area_search+0x356>
 800c57c:	f3af 8000 	nop.w
 800c580:	00000000 	.word	0x00000000
 800c584:	40cd4c00 	.word	0x40cd4c00
 800c588:	20004492 	.word	0x20004492
 800c58c:	2000030d 	.word	0x2000030d
 800c590:	2000030c 	.word	0x2000030c
 800c594:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c598:	3301      	adds	r3, #1
 800c59a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c59e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800c5a2:	f7fb fef7 	bl	8008394 <__aeabi_i2d>
 800c5a6:	a3d6      	add	r3, pc, #856	; (adr r3, 800c900 <goal_area_search+0x6b8>)
 800c5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ac:	f7fc f9ce 	bl	800894c <__aeabi_dcmplt>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d1ee      	bne.n	800c594 <goal_area_search+0x34c>
			//直進
			Accelerate();
 800c5b6:	f7fe fad3 	bl	800ab60 <Accelerate>
			Decelerate();
 800c5ba:	f7fe fb81 	bl	800acc0 <Decelerate>
			x++;
 800c5be:	4bd2      	ldr	r3, [pc, #840]	; (800c908 <goal_area_search+0x6c0>)
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	b2da      	uxtb	r2, r3
 800c5c6:	4bd0      	ldr	r3, [pc, #832]	; (800c908 <goal_area_search+0x6c0>)
 800c5c8:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c5d0:	e004      	b.n	800c5dc <goal_area_search+0x394>
 800c5d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c5dc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800c5e0:	f7fb fed8 	bl	8008394 <__aeabi_i2d>
 800c5e4:	a3c6      	add	r3, pc, #792	; (adr r3, 800c900 <goal_area_search+0x6b8>)
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	f7fc f9af 	bl	800894c <__aeabi_dcmplt>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d1ee      	bne.n	800c5d2 <goal_area_search+0x38a>
			//右回転
			turn_right();
 800c5f4:	f7fe fd86 	bl	800b104 <turn_right>
			my_direction = north;
 800c5f8:	4bc4      	ldr	r3, [pc, #784]	; (800c90c <goal_area_search+0x6c4>)
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c5fe:	2300      	movs	r3, #0
 800c600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c604:	e004      	b.n	800c610 <goal_area_search+0x3c8>
 800c606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c60a:	3301      	adds	r3, #1
 800c60c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c610:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800c614:	f7fb febe 	bl	8008394 <__aeabi_i2d>
 800c618:	a3b9      	add	r3, pc, #740	; (adr r3, 800c900 <goal_area_search+0x6b8>)
 800c61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61e:	f7fc f995 	bl	800894c <__aeabi_dcmplt>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d1ee      	bne.n	800c606 <goal_area_search+0x3be>
		}

		break;
 800c628:	f000 bd13 	b.w	800d052 <goal_area_search+0xe0a>
	case east:
		//直進
		Accelerate();
 800c62c:	f7fe fa98 	bl	800ab60 <Accelerate>
		Decelerate();
 800c630:	f7fe fb46 	bl	800acc0 <Decelerate>
		x++;
 800c634:	4bb4      	ldr	r3, [pc, #720]	; (800c908 <goal_area_search+0x6c0>)
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	3301      	adds	r3, #1
 800c63a:	b2da      	uxtb	r2, r3
 800c63c:	4bb2      	ldr	r3, [pc, #712]	; (800c908 <goal_area_search+0x6c0>)
 800c63e:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800c640:	f7ff fcd4 	bl	800bfec <wall_set>
		//待つ
		for(int i=0;i < WAIT*0.5;i++);
 800c644:	2300      	movs	r3, #0
 800c646:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c64a:	e004      	b.n	800c656 <goal_area_search+0x40e>
 800c64c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c650:	3301      	adds	r3, #1
 800c652:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c656:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800c65a:	f7fb fe9b 	bl	8008394 <__aeabi_i2d>
 800c65e:	a3a8      	add	r3, pc, #672	; (adr r3, 800c900 <goal_area_search+0x6b8>)
 800c660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c664:	f7fc f972 	bl	800894c <__aeabi_dcmplt>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d1ee      	bne.n	800c64c <goal_area_search+0x404>

		//現在の座標 == ゴールの左2マス
		if(y == Y_GOAL_LESSER){
 800c66e:	4ba8      	ldr	r3, [pc, #672]	; (800c910 <goal_area_search+0x6c8>)
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	2b09      	cmp	r3, #9
 800c674:	d103      	bne.n	800c67e <goal_area_search+0x436>
			orbit = 'L';
 800c676:	234c      	movs	r3, #76	; 0x4c
 800c678:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800c67c:	e006      	b.n	800c68c <goal_area_search+0x444>
		}
		//yが大きい方なら、左回り
		else if(y == Y_GOAL_LARGER){
 800c67e:	4ba4      	ldr	r3, [pc, #656]	; (800c910 <goal_area_search+0x6c8>)
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	2b0a      	cmp	r3, #10
 800c684:	d102      	bne.n	800c68c <goal_area_search+0x444>
			orbit = 'R';
 800c686:	2352      	movs	r3, #82	; 0x52
 800c688:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800c68c:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c690:	2b52      	cmp	r3, #82	; 0x52
 800c692:	f040 80c9 	bne.w	800c828 <goal_area_search+0x5e0>
			//右回り
			turn_right();
 800c696:	f7fe fd35 	bl	800b104 <turn_right>
			my_direction = south;
 800c69a:	4b9c      	ldr	r3, [pc, #624]	; (800c90c <goal_area_search+0x6c4>)
 800c69c:	2202      	movs	r2, #2
 800c69e:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c6a6:	e004      	b.n	800c6b2 <goal_area_search+0x46a>
 800c6a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c6b2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800c6b6:	f7fb fe6d 	bl	8008394 <__aeabi_i2d>
 800c6ba:	a391      	add	r3, pc, #580	; (adr r3, 800c900 <goal_area_search+0x6b8>)
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	f7fc f944 	bl	800894c <__aeabi_dcmplt>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d1ee      	bne.n	800c6a8 <goal_area_search+0x460>
			//直進
			Accelerate();
 800c6ca:	f7fe fa49 	bl	800ab60 <Accelerate>
			Decelerate();
 800c6ce:	f7fe faf7 	bl	800acc0 <Decelerate>
			y--;
 800c6d2:	4b8f      	ldr	r3, [pc, #572]	; (800c910 <goal_area_search+0x6c8>)
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	4b8d      	ldr	r3, [pc, #564]	; (800c910 <goal_area_search+0x6c8>)
 800c6dc:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c6de:	f7ff fc85 	bl	800bfec <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c6e8:	e004      	b.n	800c6f4 <goal_area_search+0x4ac>
 800c6ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c6f4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800c6f8:	f7fb fe4c 	bl	8008394 <__aeabi_i2d>
 800c6fc:	a380      	add	r3, pc, #512	; (adr r3, 800c900 <goal_area_search+0x6b8>)
 800c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c702:	f7fc f923 	bl	800894c <__aeabi_dcmplt>
 800c706:	4603      	mov	r3, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d1ee      	bne.n	800c6ea <goal_area_search+0x4a2>

			//右回り
			turn_right();
 800c70c:	f7fe fcfa 	bl	800b104 <turn_right>
			my_direction = west;
 800c710:	4b7e      	ldr	r3, [pc, #504]	; (800c90c <goal_area_search+0x6c4>)
 800c712:	2203      	movs	r2, #3
 800c714:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c716:	2300      	movs	r3, #0
 800c718:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c71c:	e004      	b.n	800c728 <goal_area_search+0x4e0>
 800c71e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c722:	3301      	adds	r3, #1
 800c724:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c728:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800c72c:	f7fb fe32 	bl	8008394 <__aeabi_i2d>
 800c730:	a373      	add	r3, pc, #460	; (adr r3, 800c900 <goal_area_search+0x6b8>)
 800c732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c736:	f7fc f909 	bl	800894c <__aeabi_dcmplt>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1ee      	bne.n	800c71e <goal_area_search+0x4d6>
			//直進
			Accelerate();
 800c740:	f7fe fa0e 	bl	800ab60 <Accelerate>
			Decelerate();
 800c744:	f7fe fabc 	bl	800acc0 <Decelerate>
			x--;
 800c748:	4b6f      	ldr	r3, [pc, #444]	; (800c908 <goal_area_search+0x6c0>)
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	3b01      	subs	r3, #1
 800c74e:	b2da      	uxtb	r2, r3
 800c750:	4b6d      	ldr	r3, [pc, #436]	; (800c908 <goal_area_search+0x6c0>)
 800c752:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c754:	f7ff fc4a 	bl	800bfec <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c758:	2300      	movs	r3, #0
 800c75a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c75e:	e004      	b.n	800c76a <goal_area_search+0x522>
 800c760:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c764:	3301      	adds	r3, #1
 800c766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c76a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800c76e:	f7fb fe11 	bl	8008394 <__aeabi_i2d>
 800c772:	a363      	add	r3, pc, #396	; (adr r3, 800c900 <goal_area_search+0x6b8>)
 800c774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c778:	f7fc f8e8 	bl	800894c <__aeabi_dcmplt>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d1ee      	bne.n	800c760 <goal_area_search+0x518>

			//右回転
			turn_right();
 800c782:	f7fe fcbf 	bl	800b104 <turn_right>
			my_direction = north;
 800c786:	4b61      	ldr	r3, [pc, #388]	; (800c90c <goal_area_search+0x6c4>)
 800c788:	2200      	movs	r2, #0
 800c78a:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c78c:	2300      	movs	r3, #0
 800c78e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c792:	e004      	b.n	800c79e <goal_area_search+0x556>
 800c794:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c798:	3301      	adds	r3, #1
 800c79a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c79e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800c7a2:	f7fb fdf7 	bl	8008394 <__aeabi_i2d>
 800c7a6:	a356      	add	r3, pc, #344	; (adr r3, 800c900 <goal_area_search+0x6b8>)
 800c7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ac:	f7fc f8ce 	bl	800894c <__aeabi_dcmplt>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1ee      	bne.n	800c794 <goal_area_search+0x54c>
			//直進
			Accelerate();
 800c7b6:	f7fe f9d3 	bl	800ab60 <Accelerate>
			Decelerate();
 800c7ba:	f7fe fa81 	bl	800acc0 <Decelerate>
			y++;
 800c7be:	4b54      	ldr	r3, [pc, #336]	; (800c910 <goal_area_search+0x6c8>)
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	4b52      	ldr	r3, [pc, #328]	; (800c910 <goal_area_search+0x6c8>)
 800c7c8:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c7d0:	e004      	b.n	800c7dc <goal_area_search+0x594>
 800c7d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c7dc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800c7e0:	f7fb fdd8 	bl	8008394 <__aeabi_i2d>
 800c7e4:	a346      	add	r3, pc, #280	; (adr r3, 800c900 <goal_area_search+0x6b8>)
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	f7fc f8af 	bl	800894c <__aeabi_dcmplt>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d1ee      	bne.n	800c7d2 <goal_area_search+0x58a>
			//左回転
			turn_left();
 800c7f4:	f7fe fcf0 	bl	800b1d8 <turn_left>
			my_direction = west;
 800c7f8:	4b44      	ldr	r3, [pc, #272]	; (800c90c <goal_area_search+0x6c4>)
 800c7fa:	2203      	movs	r2, #3
 800c7fc:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c7fe:	2300      	movs	r3, #0
 800c800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c804:	e004      	b.n	800c810 <goal_area_search+0x5c8>
 800c806:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c80a:	3301      	adds	r3, #1
 800c80c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c810:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c814:	f7fb fdbe 	bl	8008394 <__aeabi_i2d>
 800c818:	a339      	add	r3, pc, #228	; (adr r3, 800c900 <goal_area_search+0x6b8>)
 800c81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81e:	f7fc f895 	bl	800894c <__aeabi_dcmplt>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d1ee      	bne.n	800c806 <goal_area_search+0x5be>
		}

		if(orbit == 'L'){
 800c828:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c82c:	2b4c      	cmp	r3, #76	; 0x4c
 800c82e:	f040 8412 	bne.w	800d056 <goal_area_search+0xe0e>
			//左回り
			turn_left();
 800c832:	f7fe fcd1 	bl	800b1d8 <turn_left>
			my_direction = north;
 800c836:	4b35      	ldr	r3, [pc, #212]	; (800c90c <goal_area_search+0x6c4>)
 800c838:	2200      	movs	r2, #0
 800c83a:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c83c:	2300      	movs	r3, #0
 800c83e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c842:	e004      	b.n	800c84e <goal_area_search+0x606>
 800c844:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c848:	3301      	adds	r3, #1
 800c84a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c84e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800c852:	f7fb fd9f 	bl	8008394 <__aeabi_i2d>
 800c856:	a32a      	add	r3, pc, #168	; (adr r3, 800c900 <goal_area_search+0x6b8>)
 800c858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85c:	f7fc f876 	bl	800894c <__aeabi_dcmplt>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d1ee      	bne.n	800c844 <goal_area_search+0x5fc>
			//直進
			Accelerate();
 800c866:	f7fe f97b 	bl	800ab60 <Accelerate>
			Decelerate();
 800c86a:	f7fe fa29 	bl	800acc0 <Decelerate>
			y++;
 800c86e:	4b28      	ldr	r3, [pc, #160]	; (800c910 <goal_area_search+0x6c8>)
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	3301      	adds	r3, #1
 800c874:	b2da      	uxtb	r2, r3
 800c876:	4b26      	ldr	r3, [pc, #152]	; (800c910 <goal_area_search+0x6c8>)
 800c878:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c87a:	f7ff fbb7 	bl	800bfec <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c87e:	2300      	movs	r3, #0
 800c880:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c884:	e004      	b.n	800c890 <goal_area_search+0x648>
 800c886:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c88a:	3301      	adds	r3, #1
 800c88c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c890:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c894:	f7fb fd7e 	bl	8008394 <__aeabi_i2d>
 800c898:	a319      	add	r3, pc, #100	; (adr r3, 800c900 <goal_area_search+0x6b8>)
 800c89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89e:	f7fc f855 	bl	800894c <__aeabi_dcmplt>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d1ee      	bne.n	800c886 <goal_area_search+0x63e>

			turn_left();
 800c8a8:	f7fe fc96 	bl	800b1d8 <turn_left>
			my_direction = west;
 800c8ac:	4b17      	ldr	r3, [pc, #92]	; (800c90c <goal_area_search+0x6c4>)
 800c8ae:	2203      	movs	r2, #3
 800c8b0:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c8b8:	e004      	b.n	800c8c4 <goal_area_search+0x67c>
 800c8ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c8be:	3301      	adds	r3, #1
 800c8c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c8c4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c8c8:	f7fb fd64 	bl	8008394 <__aeabi_i2d>
 800c8cc:	a30c      	add	r3, pc, #48	; (adr r3, 800c900 <goal_area_search+0x6b8>)
 800c8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d2:	f7fc f83b 	bl	800894c <__aeabi_dcmplt>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d1ee      	bne.n	800c8ba <goal_area_search+0x672>
			//直進
			Accelerate();
 800c8dc:	f7fe f940 	bl	800ab60 <Accelerate>
			Decelerate();
 800c8e0:	f7fe f9ee 	bl	800acc0 <Decelerate>
			x--;
 800c8e4:	4b08      	ldr	r3, [pc, #32]	; (800c908 <goal_area_search+0x6c0>)
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	b2da      	uxtb	r2, r3
 800c8ec:	4b06      	ldr	r3, [pc, #24]	; (800c908 <goal_area_search+0x6c0>)
 800c8ee:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c8f0:	f7ff fb7c 	bl	800bfec <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c8fa:	e010      	b.n	800c91e <goal_area_search+0x6d6>
 800c8fc:	f3af 8000 	nop.w
 800c900:	00000000 	.word	0x00000000
 800c904:	40cd4c00 	.word	0x40cd4c00
 800c908:	2000030c 	.word	0x2000030c
 800c90c:	20004492 	.word	0x20004492
 800c910:	2000030d 	.word	0x2000030d
 800c914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c918:	3301      	adds	r3, #1
 800c91a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c91e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800c922:	f7fb fd37 	bl	8008394 <__aeabi_i2d>
 800c926:	a3bc      	add	r3, pc, #752	; (adr r3, 800cc18 <goal_area_search+0x9d0>)
 800c928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92c:	f7fc f80e 	bl	800894c <__aeabi_dcmplt>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1ee      	bne.n	800c914 <goal_area_search+0x6cc>

			//左回転
			turn_left();
 800c936:	f7fe fc4f 	bl	800b1d8 <turn_left>
			my_direction = south;
 800c93a:	4bb9      	ldr	r3, [pc, #740]	; (800cc20 <goal_area_search+0x9d8>)
 800c93c:	2202      	movs	r2, #2
 800c93e:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c940:	2300      	movs	r3, #0
 800c942:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c946:	e004      	b.n	800c952 <goal_area_search+0x70a>
 800c948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c94c:	3301      	adds	r3, #1
 800c94e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c952:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800c956:	f7fb fd1d 	bl	8008394 <__aeabi_i2d>
 800c95a:	a3af      	add	r3, pc, #700	; (adr r3, 800cc18 <goal_area_search+0x9d0>)
 800c95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c960:	f7fb fff4 	bl	800894c <__aeabi_dcmplt>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d1ee      	bne.n	800c948 <goal_area_search+0x700>
			//直進
			Accelerate();
 800c96a:	f7fe f8f9 	bl	800ab60 <Accelerate>
			Decelerate();
 800c96e:	f7fe f9a7 	bl	800acc0 <Decelerate>
			y--;
 800c972:	4bac      	ldr	r3, [pc, #688]	; (800cc24 <goal_area_search+0x9dc>)
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	3b01      	subs	r3, #1
 800c978:	b2da      	uxtb	r2, r3
 800c97a:	4baa      	ldr	r3, [pc, #680]	; (800cc24 <goal_area_search+0x9dc>)
 800c97c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c97e:	2300      	movs	r3, #0
 800c980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c984:	e004      	b.n	800c990 <goal_area_search+0x748>
 800c986:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c98a:	3301      	adds	r3, #1
 800c98c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c990:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800c994:	f7fb fcfe 	bl	8008394 <__aeabi_i2d>
 800c998:	a39f      	add	r3, pc, #636	; (adr r3, 800cc18 <goal_area_search+0x9d0>)
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	f7fb ffd5 	bl	800894c <__aeabi_dcmplt>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1ee      	bne.n	800c986 <goal_area_search+0x73e>
			//右回転
			turn_right();
 800c9a8:	f7fe fbac 	bl	800b104 <turn_right>
			my_direction = west;
 800c9ac:	4b9c      	ldr	r3, [pc, #624]	; (800cc20 <goal_area_search+0x9d8>)
 800c9ae:	2203      	movs	r2, #3
 800c9b0:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c9b6:	e002      	b.n	800c9be <goal_area_search+0x776>
 800c9b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c9be:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800c9c0:	f7fb fce8 	bl	8008394 <__aeabi_i2d>
 800c9c4:	a394      	add	r3, pc, #592	; (adr r3, 800cc18 <goal_area_search+0x9d0>)
 800c9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ca:	f7fb ffbf 	bl	800894c <__aeabi_dcmplt>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d1f1      	bne.n	800c9b8 <goal_area_search+0x770>


		}
		break;
 800c9d4:	e33f      	b.n	800d056 <goal_area_search+0xe0e>
	case south:
		//直進
		Accelerate();
 800c9d6:	f7fe f8c3 	bl	800ab60 <Accelerate>
		Decelerate();
 800c9da:	f7fe f971 	bl	800acc0 <Decelerate>
		y--;
 800c9de:	4b91      	ldr	r3, [pc, #580]	; (800cc24 <goal_area_search+0x9dc>)
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	3b01      	subs	r3, #1
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	4b8f      	ldr	r3, [pc, #572]	; (800cc24 <goal_area_search+0x9dc>)
 800c9e8:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800c9ea:	f7ff faff 	bl	800bfec <wall_set>
		//待つ
		for(int i=0;i < WAIT*0.5;i++);
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c9f2:	e002      	b.n	800c9fa <goal_area_search+0x7b2>
 800c9f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c9fa:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800c9fc:	f7fb fcca 	bl	8008394 <__aeabi_i2d>
 800ca00:	a385      	add	r3, pc, #532	; (adr r3, 800cc18 <goal_area_search+0x9d0>)
 800ca02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca06:	f7fb ffa1 	bl	800894c <__aeabi_dcmplt>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1f1      	bne.n	800c9f4 <goal_area_search+0x7ac>

		//現在の座標 == ゴールの上2マス
		if(x == X_GOAL_LESSER){
 800ca10:	4b85      	ldr	r3, [pc, #532]	; (800cc28 <goal_area_search+0x9e0>)
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	2b06      	cmp	r3, #6
 800ca16:	d103      	bne.n	800ca20 <goal_area_search+0x7d8>
			orbit = 'L';
 800ca18:	234c      	movs	r3, #76	; 0x4c
 800ca1a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800ca1e:	e006      	b.n	800ca2e <goal_area_search+0x7e6>
		}
		//xが大きい方なら、左回り
		else if(x == X_GOAL_LARGER){
 800ca20:	4b81      	ldr	r3, [pc, #516]	; (800cc28 <goal_area_search+0x9e0>)
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	2b07      	cmp	r3, #7
 800ca26:	d102      	bne.n	800ca2e <goal_area_search+0x7e6>
			orbit = 'R';
 800ca28:	2352      	movs	r3, #82	; 0x52
 800ca2a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800ca2e:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800ca32:	2b52      	cmp	r3, #82	; 0x52
 800ca34:	f040 80ad 	bne.w	800cb92 <goal_area_search+0x94a>
			//右回り
			turn_right();
 800ca38:	f7fe fb64 	bl	800b104 <turn_right>
			my_direction = west;
 800ca3c:	4b78      	ldr	r3, [pc, #480]	; (800cc20 <goal_area_search+0x9d8>)
 800ca3e:	2203      	movs	r2, #3
 800ca40:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800ca42:	2300      	movs	r3, #0
 800ca44:	677b      	str	r3, [r7, #116]	; 0x74
 800ca46:	e002      	b.n	800ca4e <goal_area_search+0x806>
 800ca48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	677b      	str	r3, [r7, #116]	; 0x74
 800ca4e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ca50:	f7fb fca0 	bl	8008394 <__aeabi_i2d>
 800ca54:	a370      	add	r3, pc, #448	; (adr r3, 800cc18 <goal_area_search+0x9d0>)
 800ca56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5a:	f7fb ff77 	bl	800894c <__aeabi_dcmplt>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d1f1      	bne.n	800ca48 <goal_area_search+0x800>
			//直進
			Accelerate();
 800ca64:	f7fe f87c 	bl	800ab60 <Accelerate>
			Decelerate();
 800ca68:	f7fe f92a 	bl	800acc0 <Decelerate>
			x--;
 800ca6c:	4b6e      	ldr	r3, [pc, #440]	; (800cc28 <goal_area_search+0x9e0>)
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	3b01      	subs	r3, #1
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	4b6c      	ldr	r3, [pc, #432]	; (800cc28 <goal_area_search+0x9e0>)
 800ca76:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800ca78:	f7ff fab8 	bl	800bfec <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	673b      	str	r3, [r7, #112]	; 0x70
 800ca80:	e002      	b.n	800ca88 <goal_area_search+0x840>
 800ca82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca84:	3301      	adds	r3, #1
 800ca86:	673b      	str	r3, [r7, #112]	; 0x70
 800ca88:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ca8a:	f7fb fc83 	bl	8008394 <__aeabi_i2d>
 800ca8e:	a362      	add	r3, pc, #392	; (adr r3, 800cc18 <goal_area_search+0x9d0>)
 800ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca94:	f7fb ff5a 	bl	800894c <__aeabi_dcmplt>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d1f1      	bne.n	800ca82 <goal_area_search+0x83a>

			//右回り
			turn_right();
 800ca9e:	f7fe fb31 	bl	800b104 <turn_right>
			my_direction = north;
 800caa2:	4b5f      	ldr	r3, [pc, #380]	; (800cc20 <goal_area_search+0x9d8>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800caa8:	2300      	movs	r3, #0
 800caaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800caac:	e002      	b.n	800cab4 <goal_area_search+0x86c>
 800caae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cab0:	3301      	adds	r3, #1
 800cab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cab4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cab6:	f7fb fc6d 	bl	8008394 <__aeabi_i2d>
 800caba:	a357      	add	r3, pc, #348	; (adr r3, 800cc18 <goal_area_search+0x9d0>)
 800cabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac0:	f7fb ff44 	bl	800894c <__aeabi_dcmplt>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1f1      	bne.n	800caae <goal_area_search+0x866>
			//直進
			Accelerate();
 800caca:	f7fe f849 	bl	800ab60 <Accelerate>
			Decelerate();
 800cace:	f7fe f8f7 	bl	800acc0 <Decelerate>
			y++;
 800cad2:	4b54      	ldr	r3, [pc, #336]	; (800cc24 <goal_area_search+0x9dc>)
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	3301      	adds	r3, #1
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	4b52      	ldr	r3, [pc, #328]	; (800cc24 <goal_area_search+0x9dc>)
 800cadc:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cade:	f7ff fa85 	bl	800bfec <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cae2:	2300      	movs	r3, #0
 800cae4:	66bb      	str	r3, [r7, #104]	; 0x68
 800cae6:	e002      	b.n	800caee <goal_area_search+0x8a6>
 800cae8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800caea:	3301      	adds	r3, #1
 800caec:	66bb      	str	r3, [r7, #104]	; 0x68
 800caee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800caf0:	f7fb fc50 	bl	8008394 <__aeabi_i2d>
 800caf4:	a348      	add	r3, pc, #288	; (adr r3, 800cc18 <goal_area_search+0x9d0>)
 800caf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafa:	f7fb ff27 	bl	800894c <__aeabi_dcmplt>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1f1      	bne.n	800cae8 <goal_area_search+0x8a0>

			//右回転
			turn_right();
 800cb04:	f7fe fafe 	bl	800b104 <turn_right>
			my_direction = east;
 800cb08:	4b45      	ldr	r3, [pc, #276]	; (800cc20 <goal_area_search+0x9d8>)
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cb0e:	2300      	movs	r3, #0
 800cb10:	667b      	str	r3, [r7, #100]	; 0x64
 800cb12:	e002      	b.n	800cb1a <goal_area_search+0x8d2>
 800cb14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb16:	3301      	adds	r3, #1
 800cb18:	667b      	str	r3, [r7, #100]	; 0x64
 800cb1a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cb1c:	f7fb fc3a 	bl	8008394 <__aeabi_i2d>
 800cb20:	a33d      	add	r3, pc, #244	; (adr r3, 800cc18 <goal_area_search+0x9d0>)
 800cb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb26:	f7fb ff11 	bl	800894c <__aeabi_dcmplt>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1f1      	bne.n	800cb14 <goal_area_search+0x8cc>
			//直進
			Accelerate();
 800cb30:	f7fe f816 	bl	800ab60 <Accelerate>
			Decelerate();
 800cb34:	f7fe f8c4 	bl	800acc0 <Decelerate>
			x++;
 800cb38:	4b3b      	ldr	r3, [pc, #236]	; (800cc28 <goal_area_search+0x9e0>)
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	4b39      	ldr	r3, [pc, #228]	; (800cc28 <goal_area_search+0x9e0>)
 800cb42:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cb44:	2300      	movs	r3, #0
 800cb46:	663b      	str	r3, [r7, #96]	; 0x60
 800cb48:	e002      	b.n	800cb50 <goal_area_search+0x908>
 800cb4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	663b      	str	r3, [r7, #96]	; 0x60
 800cb50:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800cb52:	f7fb fc1f 	bl	8008394 <__aeabi_i2d>
 800cb56:	a330      	add	r3, pc, #192	; (adr r3, 800cc18 <goal_area_search+0x9d0>)
 800cb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5c:	f7fb fef6 	bl	800894c <__aeabi_dcmplt>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d1f1      	bne.n	800cb4a <goal_area_search+0x902>
			//左回転
			turn_left();
 800cb66:	f7fe fb37 	bl	800b1d8 <turn_left>
			my_direction = north;
 800cb6a:	4b2d      	ldr	r3, [pc, #180]	; (800cc20 <goal_area_search+0x9d8>)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cb70:	2300      	movs	r3, #0
 800cb72:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb74:	e002      	b.n	800cb7c <goal_area_search+0x934>
 800cb76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb78:	3301      	adds	r3, #1
 800cb7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb7c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cb7e:	f7fb fc09 	bl	8008394 <__aeabi_i2d>
 800cb82:	a325      	add	r3, pc, #148	; (adr r3, 800cc18 <goal_area_search+0x9d0>)
 800cb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb88:	f7fb fee0 	bl	800894c <__aeabi_dcmplt>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d1f1      	bne.n	800cb76 <goal_area_search+0x92e>
		}

		if(orbit == 'L'){
 800cb92:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cb96:	2b4c      	cmp	r3, #76	; 0x4c
 800cb98:	f040 825f 	bne.w	800d05a <goal_area_search+0xe12>
			//左回り
			turn_left();
 800cb9c:	f7fe fb1c 	bl	800b1d8 <turn_left>
			my_direction = east;
 800cba0:	4b1f      	ldr	r3, [pc, #124]	; (800cc20 <goal_area_search+0x9d8>)
 800cba2:	2201      	movs	r2, #1
 800cba4:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cba6:	2300      	movs	r3, #0
 800cba8:	65bb      	str	r3, [r7, #88]	; 0x58
 800cbaa:	e002      	b.n	800cbb2 <goal_area_search+0x96a>
 800cbac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cbae:	3301      	adds	r3, #1
 800cbb0:	65bb      	str	r3, [r7, #88]	; 0x58
 800cbb2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cbb4:	f7fb fbee 	bl	8008394 <__aeabi_i2d>
 800cbb8:	a317      	add	r3, pc, #92	; (adr r3, 800cc18 <goal_area_search+0x9d0>)
 800cbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbe:	f7fb fec5 	bl	800894c <__aeabi_dcmplt>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1f1      	bne.n	800cbac <goal_area_search+0x964>
			//直進
			Accelerate();
 800cbc8:	f7fd ffca 	bl	800ab60 <Accelerate>
			Decelerate();
 800cbcc:	f7fe f878 	bl	800acc0 <Decelerate>
			x++;
 800cbd0:	4b15      	ldr	r3, [pc, #84]	; (800cc28 <goal_area_search+0x9e0>)
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	b2da      	uxtb	r2, r3
 800cbd8:	4b13      	ldr	r3, [pc, #76]	; (800cc28 <goal_area_search+0x9e0>)
 800cbda:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cbdc:	f7ff fa06 	bl	800bfec <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	657b      	str	r3, [r7, #84]	; 0x54
 800cbe4:	e002      	b.n	800cbec <goal_area_search+0x9a4>
 800cbe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbe8:	3301      	adds	r3, #1
 800cbea:	657b      	str	r3, [r7, #84]	; 0x54
 800cbec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cbee:	f7fb fbd1 	bl	8008394 <__aeabi_i2d>
 800cbf2:	a309      	add	r3, pc, #36	; (adr r3, 800cc18 <goal_area_search+0x9d0>)
 800cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf8:	f7fb fea8 	bl	800894c <__aeabi_dcmplt>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d1f1      	bne.n	800cbe6 <goal_area_search+0x99e>

			turn_left();
 800cc02:	f7fe fae9 	bl	800b1d8 <turn_left>
			my_direction = north;
 800cc06:	4b06      	ldr	r3, [pc, #24]	; (800cc20 <goal_area_search+0x9d8>)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	653b      	str	r3, [r7, #80]	; 0x50
 800cc10:	e00f      	b.n	800cc32 <goal_area_search+0x9ea>
 800cc12:	bf00      	nop
 800cc14:	f3af 8000 	nop.w
 800cc18:	00000000 	.word	0x00000000
 800cc1c:	40cd4c00 	.word	0x40cd4c00
 800cc20:	20004492 	.word	0x20004492
 800cc24:	2000030d 	.word	0x2000030d
 800cc28:	2000030c 	.word	0x2000030c
 800cc2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc2e:	3301      	adds	r3, #1
 800cc30:	653b      	str	r3, [r7, #80]	; 0x50
 800cc32:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cc34:	f7fb fbae 	bl	8008394 <__aeabi_i2d>
 800cc38:	a3bb      	add	r3, pc, #748	; (adr r3, 800cf28 <goal_area_search+0xce0>)
 800cc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3e:	f7fb fe85 	bl	800894c <__aeabi_dcmplt>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1f1      	bne.n	800cc2c <goal_area_search+0x9e4>
			//直進
			Accelerate();
 800cc48:	f7fd ff8a 	bl	800ab60 <Accelerate>
			Decelerate();
 800cc4c:	f7fe f838 	bl	800acc0 <Decelerate>
			y++;
 800cc50:	4bb7      	ldr	r3, [pc, #732]	; (800cf30 <goal_area_search+0xce8>)
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	3301      	adds	r3, #1
 800cc56:	b2da      	uxtb	r2, r3
 800cc58:	4bb5      	ldr	r3, [pc, #724]	; (800cf30 <goal_area_search+0xce8>)
 800cc5a:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cc5c:	f7ff f9c6 	bl	800bfec <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cc60:	2300      	movs	r3, #0
 800cc62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc64:	e002      	b.n	800cc6c <goal_area_search+0xa24>
 800cc66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc68:	3301      	adds	r3, #1
 800cc6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc6c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cc6e:	f7fb fb91 	bl	8008394 <__aeabi_i2d>
 800cc72:	a3ad      	add	r3, pc, #692	; (adr r3, 800cf28 <goal_area_search+0xce0>)
 800cc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc78:	f7fb fe68 	bl	800894c <__aeabi_dcmplt>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d1f1      	bne.n	800cc66 <goal_area_search+0xa1e>

			//左回転
			turn_left();
 800cc82:	f7fe faa9 	bl	800b1d8 <turn_left>
			my_direction = west;
 800cc86:	4bab      	ldr	r3, [pc, #684]	; (800cf34 <goal_area_search+0xcec>)
 800cc88:	2203      	movs	r2, #3
 800cc8a:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc90:	e002      	b.n	800cc98 <goal_area_search+0xa50>
 800cc92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc94:	3301      	adds	r3, #1
 800cc96:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc98:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800cc9a:	f7fb fb7b 	bl	8008394 <__aeabi_i2d>
 800cc9e:	a3a2      	add	r3, pc, #648	; (adr r3, 800cf28 <goal_area_search+0xce0>)
 800cca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca4:	f7fb fe52 	bl	800894c <__aeabi_dcmplt>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d1f1      	bne.n	800cc92 <goal_area_search+0xa4a>
			//直進
			Accelerate();
 800ccae:	f7fd ff57 	bl	800ab60 <Accelerate>
			Decelerate();
 800ccb2:	f7fe f805 	bl	800acc0 <Decelerate>
			x--;
 800ccb6:	4ba0      	ldr	r3, [pc, #640]	; (800cf38 <goal_area_search+0xcf0>)
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	4b9e      	ldr	r3, [pc, #632]	; (800cf38 <goal_area_search+0xcf0>)
 800ccc0:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	647b      	str	r3, [r7, #68]	; 0x44
 800ccc6:	e002      	b.n	800ccce <goal_area_search+0xa86>
 800ccc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccca:	3301      	adds	r3, #1
 800cccc:	647b      	str	r3, [r7, #68]	; 0x44
 800ccce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ccd0:	f7fb fb60 	bl	8008394 <__aeabi_i2d>
 800ccd4:	a394      	add	r3, pc, #592	; (adr r3, 800cf28 <goal_area_search+0xce0>)
 800ccd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccda:	f7fb fe37 	bl	800894c <__aeabi_dcmplt>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d1f1      	bne.n	800ccc8 <goal_area_search+0xa80>
			//右回転
			turn_right();
 800cce4:	f7fe fa0e 	bl	800b104 <turn_right>
			my_direction = north;
 800cce8:	4b92      	ldr	r3, [pc, #584]	; (800cf34 <goal_area_search+0xcec>)
 800ccea:	2200      	movs	r2, #0
 800ccec:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ccee:	2300      	movs	r3, #0
 800ccf0:	643b      	str	r3, [r7, #64]	; 0x40
 800ccf2:	e002      	b.n	800ccfa <goal_area_search+0xab2>
 800ccf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	643b      	str	r3, [r7, #64]	; 0x40
 800ccfa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ccfc:	f7fb fb4a 	bl	8008394 <__aeabi_i2d>
 800cd00:	a389      	add	r3, pc, #548	; (adr r3, 800cf28 <goal_area_search+0xce0>)
 800cd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd06:	f7fb fe21 	bl	800894c <__aeabi_dcmplt>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d1f1      	bne.n	800ccf4 <goal_area_search+0xaac>
		}
		break;
 800cd10:	e1a3      	b.n	800d05a <goal_area_search+0xe12>
	case west:
		//直進
		Accelerate();
 800cd12:	f7fd ff25 	bl	800ab60 <Accelerate>
		Decelerate();
 800cd16:	f7fd ffd3 	bl	800acc0 <Decelerate>
		x--;
 800cd1a:	4b87      	ldr	r3, [pc, #540]	; (800cf38 <goal_area_search+0xcf0>)
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	b2da      	uxtb	r2, r3
 800cd22:	4b85      	ldr	r3, [pc, #532]	; (800cf38 <goal_area_search+0xcf0>)
 800cd24:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800cd26:	f7ff f961 	bl	800bfec <wall_set>
		//待つ
		for(int i=0;i < WAIT*0.5;i++);
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd2e:	e002      	b.n	800cd36 <goal_area_search+0xaee>
 800cd30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd32:	3301      	adds	r3, #1
 800cd34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cd38:	f7fb fb2c 	bl	8008394 <__aeabi_i2d>
 800cd3c:	a37a      	add	r3, pc, #488	; (adr r3, 800cf28 <goal_area_search+0xce0>)
 800cd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd42:	f7fb fe03 	bl	800894c <__aeabi_dcmplt>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d1f1      	bne.n	800cd30 <goal_area_search+0xae8>

		//現在の座標 == ゴールの右2マス
		if(y == Y_GOAL_LESSER){
 800cd4c:	4b78      	ldr	r3, [pc, #480]	; (800cf30 <goal_area_search+0xce8>)
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	2b09      	cmp	r3, #9
 800cd52:	d103      	bne.n	800cd5c <goal_area_search+0xb14>
			orbit = 'R';
 800cd54:	2352      	movs	r3, #82	; 0x52
 800cd56:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800cd5a:	e006      	b.n	800cd6a <goal_area_search+0xb22>
		}
		//xが大きい方なら、左回り
		else if(y == Y_GOAL_LARGER){
 800cd5c:	4b74      	ldr	r3, [pc, #464]	; (800cf30 <goal_area_search+0xce8>)
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	2b0a      	cmp	r3, #10
 800cd62:	d102      	bne.n	800cd6a <goal_area_search+0xb22>
			orbit = 'L';
 800cd64:	234c      	movs	r3, #76	; 0x4c
 800cd66:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800cd6a:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cd6e:	2b52      	cmp	r3, #82	; 0x52
 800cd70:	f040 80ad 	bne.w	800cece <goal_area_search+0xc86>
			//右回り
			turn_right();
 800cd74:	f7fe f9c6 	bl	800b104 <turn_right>
			my_direction = north;
 800cd78:	4b6e      	ldr	r3, [pc, #440]	; (800cf34 <goal_area_search+0xcec>)
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cd7e:	2300      	movs	r3, #0
 800cd80:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd82:	e002      	b.n	800cd8a <goal_area_search+0xb42>
 800cd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd86:	3301      	adds	r3, #1
 800cd88:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd8c:	f7fb fb02 	bl	8008394 <__aeabi_i2d>
 800cd90:	a365      	add	r3, pc, #404	; (adr r3, 800cf28 <goal_area_search+0xce0>)
 800cd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd96:	f7fb fdd9 	bl	800894c <__aeabi_dcmplt>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d1f1      	bne.n	800cd84 <goal_area_search+0xb3c>
			//直進
			Accelerate();
 800cda0:	f7fd fede 	bl	800ab60 <Accelerate>
			Decelerate();
 800cda4:	f7fd ff8c 	bl	800acc0 <Decelerate>
			y++;
 800cda8:	4b61      	ldr	r3, [pc, #388]	; (800cf30 <goal_area_search+0xce8>)
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	3301      	adds	r3, #1
 800cdae:	b2da      	uxtb	r2, r3
 800cdb0:	4b5f      	ldr	r3, [pc, #380]	; (800cf30 <goal_area_search+0xce8>)
 800cdb2:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cdb4:	f7ff f91a 	bl	800bfec <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cdb8:	2300      	movs	r3, #0
 800cdba:	637b      	str	r3, [r7, #52]	; 0x34
 800cdbc:	e002      	b.n	800cdc4 <goal_area_search+0xb7c>
 800cdbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	637b      	str	r3, [r7, #52]	; 0x34
 800cdc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cdc6:	f7fb fae5 	bl	8008394 <__aeabi_i2d>
 800cdca:	a357      	add	r3, pc, #348	; (adr r3, 800cf28 <goal_area_search+0xce0>)
 800cdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd0:	f7fb fdbc 	bl	800894c <__aeabi_dcmplt>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d1f1      	bne.n	800cdbe <goal_area_search+0xb76>

			//右回り
			turn_right();
 800cdda:	f7fe f993 	bl	800b104 <turn_right>
			my_direction = east;
 800cdde:	4b55      	ldr	r3, [pc, #340]	; (800cf34 <goal_area_search+0xcec>)
 800cde0:	2201      	movs	r2, #1
 800cde2:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cde4:	2300      	movs	r3, #0
 800cde6:	633b      	str	r3, [r7, #48]	; 0x30
 800cde8:	e002      	b.n	800cdf0 <goal_area_search+0xba8>
 800cdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdec:	3301      	adds	r3, #1
 800cdee:	633b      	str	r3, [r7, #48]	; 0x30
 800cdf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdf2:	f7fb facf 	bl	8008394 <__aeabi_i2d>
 800cdf6:	a34c      	add	r3, pc, #304	; (adr r3, 800cf28 <goal_area_search+0xce0>)
 800cdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfc:	f7fb fda6 	bl	800894c <__aeabi_dcmplt>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d1f1      	bne.n	800cdea <goal_area_search+0xba2>
			//直進
			Accelerate();
 800ce06:	f7fd feab 	bl	800ab60 <Accelerate>
			Decelerate();
 800ce0a:	f7fd ff59 	bl	800acc0 <Decelerate>
			x++;
 800ce0e:	4b4a      	ldr	r3, [pc, #296]	; (800cf38 <goal_area_search+0xcf0>)
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	3301      	adds	r3, #1
 800ce14:	b2da      	uxtb	r2, r3
 800ce16:	4b48      	ldr	r3, [pc, #288]	; (800cf38 <goal_area_search+0xcf0>)
 800ce18:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800ce1a:	f7ff f8e7 	bl	800bfec <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800ce1e:	2300      	movs	r3, #0
 800ce20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce22:	e002      	b.n	800ce2a <goal_area_search+0xbe2>
 800ce24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce26:	3301      	adds	r3, #1
 800ce28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce2c:	f7fb fab2 	bl	8008394 <__aeabi_i2d>
 800ce30:	a33d      	add	r3, pc, #244	; (adr r3, 800cf28 <goal_area_search+0xce0>)
 800ce32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce36:	f7fb fd89 	bl	800894c <__aeabi_dcmplt>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d1f1      	bne.n	800ce24 <goal_area_search+0xbdc>

			//右回転
			turn_right();
 800ce40:	f7fe f960 	bl	800b104 <turn_right>
			my_direction = south;
 800ce44:	4b3b      	ldr	r3, [pc, #236]	; (800cf34 <goal_area_search+0xcec>)
 800ce46:	2202      	movs	r2, #2
 800ce48:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce4e:	e002      	b.n	800ce56 <goal_area_search+0xc0e>
 800ce50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce52:	3301      	adds	r3, #1
 800ce54:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce58:	f7fb fa9c 	bl	8008394 <__aeabi_i2d>
 800ce5c:	a332      	add	r3, pc, #200	; (adr r3, 800cf28 <goal_area_search+0xce0>)
 800ce5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce62:	f7fb fd73 	bl	800894c <__aeabi_dcmplt>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d1f1      	bne.n	800ce50 <goal_area_search+0xc08>
			//直進
			Accelerate();
 800ce6c:	f7fd fe78 	bl	800ab60 <Accelerate>
			Decelerate();
 800ce70:	f7fd ff26 	bl	800acc0 <Decelerate>
			y--;
 800ce74:	4b2e      	ldr	r3, [pc, #184]	; (800cf30 <goal_area_search+0xce8>)
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	b2da      	uxtb	r2, r3
 800ce7c:	4b2c      	ldr	r3, [pc, #176]	; (800cf30 <goal_area_search+0xce8>)
 800ce7e:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ce80:	2300      	movs	r3, #0
 800ce82:	627b      	str	r3, [r7, #36]	; 0x24
 800ce84:	e002      	b.n	800ce8c <goal_area_search+0xc44>
 800ce86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce88:	3301      	adds	r3, #1
 800ce8a:	627b      	str	r3, [r7, #36]	; 0x24
 800ce8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce8e:	f7fb fa81 	bl	8008394 <__aeabi_i2d>
 800ce92:	a325      	add	r3, pc, #148	; (adr r3, 800cf28 <goal_area_search+0xce0>)
 800ce94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce98:	f7fb fd58 	bl	800894c <__aeabi_dcmplt>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1f1      	bne.n	800ce86 <goal_area_search+0xc3e>
			//左回転
			turn_left();
 800cea2:	f7fe f999 	bl	800b1d8 <turn_left>
			my_direction = east;
 800cea6:	4b23      	ldr	r3, [pc, #140]	; (800cf34 <goal_area_search+0xcec>)
 800cea8:	2201      	movs	r2, #1
 800ceaa:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ceac:	2300      	movs	r3, #0
 800ceae:	623b      	str	r3, [r7, #32]
 800ceb0:	e002      	b.n	800ceb8 <goal_area_search+0xc70>
 800ceb2:	6a3b      	ldr	r3, [r7, #32]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	623b      	str	r3, [r7, #32]
 800ceb8:	6a38      	ldr	r0, [r7, #32]
 800ceba:	f7fb fa6b 	bl	8008394 <__aeabi_i2d>
 800cebe:	a31a      	add	r3, pc, #104	; (adr r3, 800cf28 <goal_area_search+0xce0>)
 800cec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec4:	f7fb fd42 	bl	800894c <__aeabi_dcmplt>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d1f1      	bne.n	800ceb2 <goal_area_search+0xc6a>
		}

		if(orbit == 'L'){
 800cece:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800ced2:	2b4c      	cmp	r3, #76	; 0x4c
 800ced4:	f040 80c3 	bne.w	800d05e <goal_area_search+0xe16>
			//左回り
			turn_left();
 800ced8:	f7fe f97e 	bl	800b1d8 <turn_left>
			my_direction = south;
 800cedc:	4b15      	ldr	r3, [pc, #84]	; (800cf34 <goal_area_search+0xcec>)
 800cede:	2202      	movs	r2, #2
 800cee0:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cee2:	2300      	movs	r3, #0
 800cee4:	61fb      	str	r3, [r7, #28]
 800cee6:	e002      	b.n	800ceee <goal_area_search+0xca6>
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	3301      	adds	r3, #1
 800ceec:	61fb      	str	r3, [r7, #28]
 800ceee:	69f8      	ldr	r0, [r7, #28]
 800cef0:	f7fb fa50 	bl	8008394 <__aeabi_i2d>
 800cef4:	a30c      	add	r3, pc, #48	; (adr r3, 800cf28 <goal_area_search+0xce0>)
 800cef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cefa:	f7fb fd27 	bl	800894c <__aeabi_dcmplt>
 800cefe:	4603      	mov	r3, r0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d1f1      	bne.n	800cee8 <goal_area_search+0xca0>
			//直進
			Accelerate();
 800cf04:	f7fd fe2c 	bl	800ab60 <Accelerate>
			Decelerate();
 800cf08:	f7fd feda 	bl	800acc0 <Decelerate>
			y--;
 800cf0c:	4b08      	ldr	r3, [pc, #32]	; (800cf30 <goal_area_search+0xce8>)
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	3b01      	subs	r3, #1
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	4b06      	ldr	r3, [pc, #24]	; (800cf30 <goal_area_search+0xce8>)
 800cf16:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cf18:	f7ff f868 	bl	800bfec <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	61bb      	str	r3, [r7, #24]
 800cf20:	e00f      	b.n	800cf42 <goal_area_search+0xcfa>
 800cf22:	bf00      	nop
 800cf24:	f3af 8000 	nop.w
 800cf28:	00000000 	.word	0x00000000
 800cf2c:	40cd4c00 	.word	0x40cd4c00
 800cf30:	2000030d 	.word	0x2000030d
 800cf34:	20004492 	.word	0x20004492
 800cf38:	2000030c 	.word	0x2000030c
 800cf3c:	69bb      	ldr	r3, [r7, #24]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	61bb      	str	r3, [r7, #24]
 800cf42:	69b8      	ldr	r0, [r7, #24]
 800cf44:	f7fb fa26 	bl	8008394 <__aeabi_i2d>
 800cf48:	a349      	add	r3, pc, #292	; (adr r3, 800d070 <goal_area_search+0xe28>)
 800cf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4e:	f7fb fcfd 	bl	800894c <__aeabi_dcmplt>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d1f1      	bne.n	800cf3c <goal_area_search+0xcf4>

			turn_left();
 800cf58:	f7fe f93e 	bl	800b1d8 <turn_left>
			my_direction = east;
 800cf5c:	4b46      	ldr	r3, [pc, #280]	; (800d078 <goal_area_search+0xe30>)
 800cf5e:	2201      	movs	r2, #1
 800cf60:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cf62:	2300      	movs	r3, #0
 800cf64:	617b      	str	r3, [r7, #20]
 800cf66:	e002      	b.n	800cf6e <goal_area_search+0xd26>
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	617b      	str	r3, [r7, #20]
 800cf6e:	6978      	ldr	r0, [r7, #20]
 800cf70:	f7fb fa10 	bl	8008394 <__aeabi_i2d>
 800cf74:	a33e      	add	r3, pc, #248	; (adr r3, 800d070 <goal_area_search+0xe28>)
 800cf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7a:	f7fb fce7 	bl	800894c <__aeabi_dcmplt>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d1f1      	bne.n	800cf68 <goal_area_search+0xd20>
			//直進
			Accelerate();
 800cf84:	f7fd fdec 	bl	800ab60 <Accelerate>
			Decelerate();
 800cf88:	f7fd fe9a 	bl	800acc0 <Decelerate>
			x++;
 800cf8c:	4b3b      	ldr	r3, [pc, #236]	; (800d07c <goal_area_search+0xe34>)
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	3301      	adds	r3, #1
 800cf92:	b2da      	uxtb	r2, r3
 800cf94:	4b39      	ldr	r3, [pc, #228]	; (800d07c <goal_area_search+0xe34>)
 800cf96:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cf98:	f7ff f828 	bl	800bfec <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	613b      	str	r3, [r7, #16]
 800cfa0:	e002      	b.n	800cfa8 <goal_area_search+0xd60>
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	613b      	str	r3, [r7, #16]
 800cfa8:	6938      	ldr	r0, [r7, #16]
 800cfaa:	f7fb f9f3 	bl	8008394 <__aeabi_i2d>
 800cfae:	a330      	add	r3, pc, #192	; (adr r3, 800d070 <goal_area_search+0xe28>)
 800cfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb4:	f7fb fcca 	bl	800894c <__aeabi_dcmplt>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1f1      	bne.n	800cfa2 <goal_area_search+0xd5a>

			//左回転
			turn_left();
 800cfbe:	f7fe f90b 	bl	800b1d8 <turn_left>
			my_direction = north;
 800cfc2:	4b2d      	ldr	r3, [pc, #180]	; (800d078 <goal_area_search+0xe30>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cfc8:	2300      	movs	r3, #0
 800cfca:	60fb      	str	r3, [r7, #12]
 800cfcc:	e002      	b.n	800cfd4 <goal_area_search+0xd8c>
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	60fb      	str	r3, [r7, #12]
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f7fb f9dd 	bl	8008394 <__aeabi_i2d>
 800cfda:	a325      	add	r3, pc, #148	; (adr r3, 800d070 <goal_area_search+0xe28>)
 800cfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe0:	f7fb fcb4 	bl	800894c <__aeabi_dcmplt>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d1f1      	bne.n	800cfce <goal_area_search+0xd86>
			//直進
			Accelerate();
 800cfea:	f7fd fdb9 	bl	800ab60 <Accelerate>
			Decelerate();
 800cfee:	f7fd fe67 	bl	800acc0 <Decelerate>
			y++;
 800cff2:	4b23      	ldr	r3, [pc, #140]	; (800d080 <goal_area_search+0xe38>)
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	3301      	adds	r3, #1
 800cff8:	b2da      	uxtb	r2, r3
 800cffa:	4b21      	ldr	r3, [pc, #132]	; (800d080 <goal_area_search+0xe38>)
 800cffc:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cffe:	2300      	movs	r3, #0
 800d000:	60bb      	str	r3, [r7, #8]
 800d002:	e002      	b.n	800d00a <goal_area_search+0xdc2>
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	3301      	adds	r3, #1
 800d008:	60bb      	str	r3, [r7, #8]
 800d00a:	68b8      	ldr	r0, [r7, #8]
 800d00c:	f7fb f9c2 	bl	8008394 <__aeabi_i2d>
 800d010:	a317      	add	r3, pc, #92	; (adr r3, 800d070 <goal_area_search+0xe28>)
 800d012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d016:	f7fb fc99 	bl	800894c <__aeabi_dcmplt>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1f1      	bne.n	800d004 <goal_area_search+0xdbc>
			//右回転
			turn_right();
 800d020:	f7fe f870 	bl	800b104 <turn_right>
			my_direction = east;
 800d024:	4b14      	ldr	r3, [pc, #80]	; (800d078 <goal_area_search+0xe30>)
 800d026:	2201      	movs	r2, #1
 800d028:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d02a:	2300      	movs	r3, #0
 800d02c:	607b      	str	r3, [r7, #4]
 800d02e:	e002      	b.n	800d036 <goal_area_search+0xdee>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	3301      	adds	r3, #1
 800d034:	607b      	str	r3, [r7, #4]
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f7fb f9ac 	bl	8008394 <__aeabi_i2d>
 800d03c:	a30c      	add	r3, pc, #48	; (adr r3, 800d070 <goal_area_search+0xe28>)
 800d03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d042:	f7fb fc83 	bl	800894c <__aeabi_dcmplt>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1f1      	bne.n	800d030 <goal_area_search+0xde8>
		}
		break;
 800d04c:	e007      	b.n	800d05e <goal_area_search+0xe16>
	default :
		break;
 800d04e:	bf00      	nop
 800d050:	e006      	b.n	800d060 <goal_area_search+0xe18>
		break;
 800d052:	bf00      	nop
 800d054:	e004      	b.n	800d060 <goal_area_search+0xe18>
		break;
 800d056:	bf00      	nop
 800d058:	e002      	b.n	800d060 <goal_area_search+0xe18>
		break;
 800d05a:	bf00      	nop
 800d05c:	e000      	b.n	800d060 <goal_area_search+0xe18>
		break;
 800d05e:	bf00      	nop
	}

	//マップ更新
	Walk_Map_Update();
 800d060:	f7fe fe54 	bl	800bd0c <Walk_Map_Update>



	//向きが反転して、xもしくはyが変わる

}
 800d064:	bf00      	nop
 800d066:	37f8      	adds	r7, #248	; 0xf8
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	f3af 8000 	nop.w
 800d070:	00000000 	.word	0x00000000
 800d074:	40cd4c00 	.word	0x40cd4c00
 800d078:	20004492 	.word	0x20004492
 800d07c:	2000030c 	.word	0x2000030c
 800d080:	2000030d 	.word	0x2000030d
 800d084:	00000000 	.word	0x00000000

0800d088 <Adachi_judge>:

//足立法探索
void Adachi_judge(){
 800d088:	b598      	push	{r3, r4, r7, lr}
 800d08a:	af00      	add	r7, sp, #0

	/*------旋回モード選択-----*/
	mode.turn = 0;
 800d08c:	4baa      	ldr	r3, [pc, #680]	; (800d338 <Adachi_judge+0x2b0>)
 800d08e:	2200      	movs	r2, #0
 800d090:	725a      	strb	r2, [r3, #9]
	/*----------------------------*/


	//今�?�評価値よりも前の評価値が小さければ...
	//前左右
	  switch(my_direction){
 800d092:	4baa      	ldr	r3, [pc, #680]	; (800d33c <Adachi_judge+0x2b4>)
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	2b03      	cmp	r3, #3
 800d098:	f200 8364 	bhi.w	800d764 <Adachi_judge+0x6dc>
 800d09c:	a201      	add	r2, pc, #4	; (adr r2, 800d0a4 <Adachi_judge+0x1c>)
 800d09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a2:	bf00      	nop
 800d0a4:	0800d0b5 	.word	0x0800d0b5
 800d0a8:	0800d251 	.word	0x0800d251
 800d0ac:	0800d40d 	.word	0x0800d40d
 800d0b0:	0800d5c9 	.word	0x0800d5c9
	  case north:
		  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d0b4:	4ba2      	ldr	r3, [pc, #648]	; (800d340 <Adachi_judge+0x2b8>)
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	4ba2      	ldr	r3, [pc, #648]	; (800d344 <Adachi_judge+0x2bc>)
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	4619      	mov	r1, r3
 800d0c0:	4aa1      	ldr	r2, [pc, #644]	; (800d348 <Adachi_judge+0x2c0>)
 800d0c2:	0103      	lsls	r3, r0, #4
 800d0c4:	440b      	add	r3, r1
 800d0c6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d0ca:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d127      	bne.n	800d124 <Adachi_judge+0x9c>
 800d0d4:	4b9a      	ldr	r3, [pc, #616]	; (800d340 <Adachi_judge+0x2b8>)
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	461a      	mov	r2, r3
 800d0da:	4b9a      	ldr	r3, [pc, #616]	; (800d344 <Adachi_judge+0x2bc>)
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	3301      	adds	r3, #1
 800d0e0:	499a      	ldr	r1, [pc, #616]	; (800d34c <Adachi_judge+0x2c4>)
 800d0e2:	0112      	lsls	r2, r2, #4
 800d0e4:	440a      	add	r2, r1
 800d0e6:	4413      	add	r3, r2
 800d0e8:	781a      	ldrb	r2, [r3, #0]
 800d0ea:	4b95      	ldr	r3, [pc, #596]	; (800d340 <Adachi_judge+0x2b8>)
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	461c      	mov	r4, r3
 800d0f0:	4b94      	ldr	r3, [pc, #592]	; (800d344 <Adachi_judge+0x2bc>)
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	4995      	ldr	r1, [pc, #596]	; (800d34c <Adachi_judge+0x2c4>)
 800d0f8:	0123      	lsls	r3, r4, #4
 800d0fa:	440b      	add	r3, r1
 800d0fc:	4403      	add	r3, r0
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	429a      	cmp	r2, r3
 800d102:	d20f      	bcs.n	800d124 <Adachi_judge+0x9c>
 800d104:	4b8f      	ldr	r3, [pc, #572]	; (800d344 <Adachi_judge+0x2bc>)
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	2b0e      	cmp	r3, #14
 800d10a:	d80b      	bhi.n	800d124 <Adachi_judge+0x9c>
			  //前北
			  straight();
 800d10c:	f7fd fe90 	bl	800ae30 <straight>
			  my_direction = north;
 800d110:	4b8a      	ldr	r3, [pc, #552]	; (800d33c <Adachi_judge+0x2b4>)
 800d112:	2200      	movs	r2, #0
 800d114:	701a      	strb	r2, [r3, #0]
			  y++;
 800d116:	4b8b      	ldr	r3, [pc, #556]	; (800d344 <Adachi_judge+0x2bc>)
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	3301      	adds	r3, #1
 800d11c:	b2da      	uxtb	r2, r3
 800d11e:	4b89      	ldr	r3, [pc, #548]	; (800d344 <Adachi_judge+0x2bc>)
 800d120:	701a      	strb	r2, [r3, #0]
 800d122:	e094      	b.n	800d24e <Adachi_judge+0x1c6>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d124:	4b86      	ldr	r3, [pc, #536]	; (800d340 <Adachi_judge+0x2b8>)
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	4618      	mov	r0, r3
 800d12a:	4b86      	ldr	r3, [pc, #536]	; (800d344 <Adachi_judge+0x2bc>)
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	4619      	mov	r1, r3
 800d130:	4a85      	ldr	r2, [pc, #532]	; (800d348 <Adachi_judge+0x2c0>)
 800d132:	0103      	lsls	r3, r0, #4
 800d134:	440b      	add	r3, r1
 800d136:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d13a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	2b00      	cmp	r3, #0
 800d142:	d127      	bne.n	800d194 <Adachi_judge+0x10c>
 800d144:	4b7e      	ldr	r3, [pc, #504]	; (800d340 <Adachi_judge+0x2b8>)
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	3b01      	subs	r3, #1
 800d14a:	4a7e      	ldr	r2, [pc, #504]	; (800d344 <Adachi_judge+0x2bc>)
 800d14c:	7812      	ldrb	r2, [r2, #0]
 800d14e:	4611      	mov	r1, r2
 800d150:	4a7e      	ldr	r2, [pc, #504]	; (800d34c <Adachi_judge+0x2c4>)
 800d152:	011b      	lsls	r3, r3, #4
 800d154:	4413      	add	r3, r2
 800d156:	440b      	add	r3, r1
 800d158:	781a      	ldrb	r2, [r3, #0]
 800d15a:	4b79      	ldr	r3, [pc, #484]	; (800d340 <Adachi_judge+0x2b8>)
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	461c      	mov	r4, r3
 800d160:	4b78      	ldr	r3, [pc, #480]	; (800d344 <Adachi_judge+0x2bc>)
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	4618      	mov	r0, r3
 800d166:	4979      	ldr	r1, [pc, #484]	; (800d34c <Adachi_judge+0x2c4>)
 800d168:	0123      	lsls	r3, r4, #4
 800d16a:	440b      	add	r3, r1
 800d16c:	4403      	add	r3, r0
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	429a      	cmp	r2, r3
 800d172:	d20f      	bcs.n	800d194 <Adachi_judge+0x10c>
 800d174:	4b72      	ldr	r3, [pc, #456]	; (800d340 <Adachi_judge+0x2b8>)
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00b      	beq.n	800d194 <Adachi_judge+0x10c>
			  //左西
			  L_turn_select();
 800d17c:	f7fe fcb4 	bl	800bae8 <L_turn_select>
			  my_direction = west;
 800d180:	4b6e      	ldr	r3, [pc, #440]	; (800d33c <Adachi_judge+0x2b4>)
 800d182:	2203      	movs	r2, #3
 800d184:	701a      	strb	r2, [r3, #0]
		      x--;
 800d186:	4b6e      	ldr	r3, [pc, #440]	; (800d340 <Adachi_judge+0x2b8>)
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	3b01      	subs	r3, #1
 800d18c:	b2da      	uxtb	r2, r3
 800d18e:	4b6c      	ldr	r3, [pc, #432]	; (800d340 <Adachi_judge+0x2b8>)
 800d190:	701a      	strb	r2, [r3, #0]
 800d192:	e05c      	b.n	800d24e <Adachi_judge+0x1c6>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800d194:	4b6a      	ldr	r3, [pc, #424]	; (800d340 <Adachi_judge+0x2b8>)
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	4618      	mov	r0, r3
 800d19a:	4b6a      	ldr	r3, [pc, #424]	; (800d344 <Adachi_judge+0x2bc>)
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	4619      	mov	r1, r3
 800d1a0:	4a69      	ldr	r2, [pc, #420]	; (800d348 <Adachi_judge+0x2c0>)
 800d1a2:	0103      	lsls	r3, r0, #4
 800d1a4:	440b      	add	r3, r1
 800d1a6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d1aa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d127      	bne.n	800d204 <Adachi_judge+0x17c>
 800d1b4:	4b62      	ldr	r3, [pc, #392]	; (800d340 <Adachi_judge+0x2b8>)
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	4a62      	ldr	r2, [pc, #392]	; (800d344 <Adachi_judge+0x2bc>)
 800d1bc:	7812      	ldrb	r2, [r2, #0]
 800d1be:	4611      	mov	r1, r2
 800d1c0:	4a62      	ldr	r2, [pc, #392]	; (800d34c <Adachi_judge+0x2c4>)
 800d1c2:	011b      	lsls	r3, r3, #4
 800d1c4:	4413      	add	r3, r2
 800d1c6:	440b      	add	r3, r1
 800d1c8:	781a      	ldrb	r2, [r3, #0]
 800d1ca:	4b5d      	ldr	r3, [pc, #372]	; (800d340 <Adachi_judge+0x2b8>)
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	461c      	mov	r4, r3
 800d1d0:	4b5c      	ldr	r3, [pc, #368]	; (800d344 <Adachi_judge+0x2bc>)
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	495d      	ldr	r1, [pc, #372]	; (800d34c <Adachi_judge+0x2c4>)
 800d1d8:	0123      	lsls	r3, r4, #4
 800d1da:	440b      	add	r3, r1
 800d1dc:	4403      	add	r3, r0
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d20f      	bcs.n	800d204 <Adachi_judge+0x17c>
 800d1e4:	4b56      	ldr	r3, [pc, #344]	; (800d340 <Adachi_judge+0x2b8>)
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	2b0e      	cmp	r3, #14
 800d1ea:	d80b      	bhi.n	800d204 <Adachi_judge+0x17c>
			  //右東
			  R_turn_select();
 800d1ec:	f7fe fc38 	bl	800ba60 <R_turn_select>
	          my_direction = east;
 800d1f0:	4b52      	ldr	r3, [pc, #328]	; (800d33c <Adachi_judge+0x2b4>)
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	701a      	strb	r2, [r3, #0]
	          x++;
 800d1f6:	4b52      	ldr	r3, [pc, #328]	; (800d340 <Adachi_judge+0x2b8>)
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	b2da      	uxtb	r2, r3
 800d1fe:	4b50      	ldr	r3, [pc, #320]	; (800d340 <Adachi_judge+0x2b8>)
 800d200:	701a      	strb	r2, [r3, #0]
 800d202:	e024      	b.n	800d24e <Adachi_judge+0x1c6>
		  }
		  else {
			  //後南
	          Decelerate();
 800d204:	f7fd fd5c 	bl	800acc0 <Decelerate>
	          wait(0.3);
 800d208:	ed9f 0b49 	vldr	d0, [pc, #292]	; 800d330 <Adachi_judge+0x2a8>
 800d20c:	f7fd fc28 	bl	800aa60 <wait>

	          if(mode.execution == 1)
 800d210:	4b49      	ldr	r3, [pc, #292]	; (800d338 <Adachi_judge+0x2b0>)
 800d212:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d216:	2b01      	cmp	r3, #1
 800d218:	d101      	bne.n	800d21e <Adachi_judge+0x196>
	        	  Motor_PWM_Stop();
 800d21a:	f7fc fee5 	bl	8009fe8 <Motor_PWM_Stop>

	  	      rotate180();
 800d21e:	f7fe fb3d 	bl	800b89c <rotate180>
	  	      wait(0.3);;
 800d222:	ed9f 0b43 	vldr	d0, [pc, #268]	; 800d330 <Adachi_judge+0x2a8>
 800d226:	f7fd fc1b 	bl	800aa60 <wait>
	  	      back_calib();
 800d22a:	f7fe fbb1 	bl	800b990 <back_calib>
	  	      wait(0.3);
 800d22e:	ed9f 0b40 	vldr	d0, [pc, #256]	; 800d330 <Adachi_judge+0x2a8>
 800d232:	f7fd fc15 	bl	800aa60 <wait>
	       	  Start_Accel();
 800d236:	f7fd fc3b 	bl	800aab0 <Start_Accel>
	       	  my_direction = south;
 800d23a:	4b40      	ldr	r3, [pc, #256]	; (800d33c <Adachi_judge+0x2b4>)
 800d23c:	2202      	movs	r2, #2
 800d23e:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d240:	4b40      	ldr	r3, [pc, #256]	; (800d344 <Adachi_judge+0x2bc>)
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	3b01      	subs	r3, #1
 800d246:	b2da      	uxtb	r2, r3
 800d248:	4b3e      	ldr	r3, [pc, #248]	; (800d344 <Adachi_judge+0x2bc>)
 800d24a:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d24c:	e28b      	b.n	800d766 <Adachi_judge+0x6de>
 800d24e:	e28a      	b.n	800d766 <Adachi_judge+0x6de>

	  case east:

		  if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800d250:	4b3b      	ldr	r3, [pc, #236]	; (800d340 <Adachi_judge+0x2b8>)
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	4618      	mov	r0, r3
 800d256:	4b3b      	ldr	r3, [pc, #236]	; (800d344 <Adachi_judge+0x2bc>)
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	4619      	mov	r1, r3
 800d25c:	4a3a      	ldr	r2, [pc, #232]	; (800d348 <Adachi_judge+0x2c0>)
 800d25e:	0103      	lsls	r3, r0, #4
 800d260:	440b      	add	r3, r1
 800d262:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d266:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d127      	bne.n	800d2c0 <Adachi_judge+0x238>
 800d270:	4b33      	ldr	r3, [pc, #204]	; (800d340 <Adachi_judge+0x2b8>)
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	3301      	adds	r3, #1
 800d276:	4a33      	ldr	r2, [pc, #204]	; (800d344 <Adachi_judge+0x2bc>)
 800d278:	7812      	ldrb	r2, [r2, #0]
 800d27a:	4611      	mov	r1, r2
 800d27c:	4a33      	ldr	r2, [pc, #204]	; (800d34c <Adachi_judge+0x2c4>)
 800d27e:	011b      	lsls	r3, r3, #4
 800d280:	4413      	add	r3, r2
 800d282:	440b      	add	r3, r1
 800d284:	781a      	ldrb	r2, [r3, #0]
 800d286:	4b2e      	ldr	r3, [pc, #184]	; (800d340 <Adachi_judge+0x2b8>)
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	461c      	mov	r4, r3
 800d28c:	4b2d      	ldr	r3, [pc, #180]	; (800d344 <Adachi_judge+0x2bc>)
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	4618      	mov	r0, r3
 800d292:	492e      	ldr	r1, [pc, #184]	; (800d34c <Adachi_judge+0x2c4>)
 800d294:	0123      	lsls	r3, r4, #4
 800d296:	440b      	add	r3, r1
 800d298:	4403      	add	r3, r0
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d20f      	bcs.n	800d2c0 <Adachi_judge+0x238>
 800d2a0:	4b27      	ldr	r3, [pc, #156]	; (800d340 <Adachi_judge+0x2b8>)
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	2b0e      	cmp	r3, #14
 800d2a6:	d80b      	bhi.n	800d2c0 <Adachi_judge+0x238>
			  //前東
			  straight();
 800d2a8:	f7fd fdc2 	bl	800ae30 <straight>
	       	  my_direction = east;
 800d2ac:	4b23      	ldr	r3, [pc, #140]	; (800d33c <Adachi_judge+0x2b4>)
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d2b2:	4b23      	ldr	r3, [pc, #140]	; (800d340 <Adachi_judge+0x2b8>)
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	b2da      	uxtb	r2, r3
 800d2ba:	4b21      	ldr	r3, [pc, #132]	; (800d340 <Adachi_judge+0x2b8>)
 800d2bc:	701a      	strb	r2, [r3, #0]
 800d2be:	e0a4      	b.n	800d40a <Adachi_judge+0x382>
		  }
		  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d2c0:	4b1f      	ldr	r3, [pc, #124]	; (800d340 <Adachi_judge+0x2b8>)
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	4b1f      	ldr	r3, [pc, #124]	; (800d344 <Adachi_judge+0x2bc>)
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	4a1e      	ldr	r2, [pc, #120]	; (800d348 <Adachi_judge+0x2c0>)
 800d2ce:	0103      	lsls	r3, r0, #4
 800d2d0:	440b      	add	r3, r1
 800d2d2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d2d6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d137      	bne.n	800d350 <Adachi_judge+0x2c8>
 800d2e0:	4b17      	ldr	r3, [pc, #92]	; (800d340 <Adachi_judge+0x2b8>)
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	4b17      	ldr	r3, [pc, #92]	; (800d344 <Adachi_judge+0x2bc>)
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	4917      	ldr	r1, [pc, #92]	; (800d34c <Adachi_judge+0x2c4>)
 800d2ee:	0112      	lsls	r2, r2, #4
 800d2f0:	440a      	add	r2, r1
 800d2f2:	4413      	add	r3, r2
 800d2f4:	781a      	ldrb	r2, [r3, #0]
 800d2f6:	4b12      	ldr	r3, [pc, #72]	; (800d340 <Adachi_judge+0x2b8>)
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	461c      	mov	r4, r3
 800d2fc:	4b11      	ldr	r3, [pc, #68]	; (800d344 <Adachi_judge+0x2bc>)
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	4618      	mov	r0, r3
 800d302:	4912      	ldr	r1, [pc, #72]	; (800d34c <Adachi_judge+0x2c4>)
 800d304:	0123      	lsls	r3, r4, #4
 800d306:	440b      	add	r3, r1
 800d308:	4403      	add	r3, r0
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d21f      	bcs.n	800d350 <Adachi_judge+0x2c8>
 800d310:	4b0c      	ldr	r3, [pc, #48]	; (800d344 <Adachi_judge+0x2bc>)
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	2b0e      	cmp	r3, #14
 800d316:	d81b      	bhi.n	800d350 <Adachi_judge+0x2c8>
			  //左�?
			  L_turn_select();
 800d318:	f7fe fbe6 	bl	800bae8 <L_turn_select>
	       	  my_direction = north;
 800d31c:	4b07      	ldr	r3, [pc, #28]	; (800d33c <Adachi_judge+0x2b4>)
 800d31e:	2200      	movs	r2, #0
 800d320:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d322:	4b08      	ldr	r3, [pc, #32]	; (800d344 <Adachi_judge+0x2bc>)
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	3301      	adds	r3, #1
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	4b06      	ldr	r3, [pc, #24]	; (800d344 <Adachi_judge+0x2bc>)
 800d32c:	701a      	strb	r2, [r3, #0]
 800d32e:	e06c      	b.n	800d40a <Adachi_judge+0x382>
 800d330:	33333333 	.word	0x33333333
 800d334:	3fd33333 	.word	0x3fd33333
 800d338:	20000074 	.word	0x20000074
 800d33c:	20004492 	.word	0x20004492
 800d340:	2000030c 	.word	0x2000030c
 800d344:	2000030d 	.word	0x2000030d
 800d348:	20004fb4 	.word	0x20004fb4
 800d34c:	20004a58 	.word	0x20004a58
		  }
		  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d350:	4b97      	ldr	r3, [pc, #604]	; (800d5b0 <Adachi_judge+0x528>)
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	4618      	mov	r0, r3
 800d356:	4b97      	ldr	r3, [pc, #604]	; (800d5b4 <Adachi_judge+0x52c>)
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	4619      	mov	r1, r3
 800d35c:	4a96      	ldr	r2, [pc, #600]	; (800d5b8 <Adachi_judge+0x530>)
 800d35e:	0103      	lsls	r3, r0, #4
 800d360:	440b      	add	r3, r1
 800d362:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d366:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d127      	bne.n	800d3c0 <Adachi_judge+0x338>
 800d370:	4b8f      	ldr	r3, [pc, #572]	; (800d5b0 <Adachi_judge+0x528>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	461a      	mov	r2, r3
 800d376:	4b8f      	ldr	r3, [pc, #572]	; (800d5b4 <Adachi_judge+0x52c>)
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	3b01      	subs	r3, #1
 800d37c:	498f      	ldr	r1, [pc, #572]	; (800d5bc <Adachi_judge+0x534>)
 800d37e:	0112      	lsls	r2, r2, #4
 800d380:	440a      	add	r2, r1
 800d382:	4413      	add	r3, r2
 800d384:	781a      	ldrb	r2, [r3, #0]
 800d386:	4b8a      	ldr	r3, [pc, #552]	; (800d5b0 <Adachi_judge+0x528>)
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	461c      	mov	r4, r3
 800d38c:	4b89      	ldr	r3, [pc, #548]	; (800d5b4 <Adachi_judge+0x52c>)
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	4618      	mov	r0, r3
 800d392:	498a      	ldr	r1, [pc, #552]	; (800d5bc <Adachi_judge+0x534>)
 800d394:	0123      	lsls	r3, r4, #4
 800d396:	440b      	add	r3, r1
 800d398:	4403      	add	r3, r0
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d20f      	bcs.n	800d3c0 <Adachi_judge+0x338>
 800d3a0:	4b84      	ldr	r3, [pc, #528]	; (800d5b4 <Adachi_judge+0x52c>)
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d00b      	beq.n	800d3c0 <Adachi_judge+0x338>
			  //右�?
			  R_turn_select();
 800d3a8:	f7fe fb5a 	bl	800ba60 <R_turn_select>
	       	  my_direction = south;
 800d3ac:	4b84      	ldr	r3, [pc, #528]	; (800d5c0 <Adachi_judge+0x538>)
 800d3ae:	2202      	movs	r2, #2
 800d3b0:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d3b2:	4b80      	ldr	r3, [pc, #512]	; (800d5b4 <Adachi_judge+0x52c>)
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	b2da      	uxtb	r2, r3
 800d3ba:	4b7e      	ldr	r3, [pc, #504]	; (800d5b4 <Adachi_judge+0x52c>)
 800d3bc:	701a      	strb	r2, [r3, #0]
 800d3be:	e024      	b.n	800d40a <Adachi_judge+0x382>
		  }
		  else {
			  //後西
	          Decelerate();
 800d3c0:	f7fd fc7e 	bl	800acc0 <Decelerate>
	          wait(0.3);
 800d3c4:	ed9f 0b78 	vldr	d0, [pc, #480]	; 800d5a8 <Adachi_judge+0x520>
 800d3c8:	f7fd fb4a 	bl	800aa60 <wait>

	          if(mode.execution == 1)
 800d3cc:	4b7d      	ldr	r3, [pc, #500]	; (800d5c4 <Adachi_judge+0x53c>)
 800d3ce:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d101      	bne.n	800d3da <Adachi_judge+0x352>
	        	  Motor_PWM_Stop();
 800d3d6:	f7fc fe07 	bl	8009fe8 <Motor_PWM_Stop>

	  	      rotate180();
 800d3da:	f7fe fa5f 	bl	800b89c <rotate180>
	  	      wait(0.3);
 800d3de:	ed9f 0b72 	vldr	d0, [pc, #456]	; 800d5a8 <Adachi_judge+0x520>
 800d3e2:	f7fd fb3d 	bl	800aa60 <wait>
	  	      back_calib();
 800d3e6:	f7fe fad3 	bl	800b990 <back_calib>
	  	      wait(0.3);
 800d3ea:	ed9f 0b6f 	vldr	d0, [pc, #444]	; 800d5a8 <Adachi_judge+0x520>
 800d3ee:	f7fd fb37 	bl	800aa60 <wait>
	       	  Start_Accel();
 800d3f2:	f7fd fb5d 	bl	800aab0 <Start_Accel>

	       	  my_direction = west;
 800d3f6:	4b72      	ldr	r3, [pc, #456]	; (800d5c0 <Adachi_judge+0x538>)
 800d3f8:	2203      	movs	r2, #3
 800d3fa:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d3fc:	4b6c      	ldr	r3, [pc, #432]	; (800d5b0 <Adachi_judge+0x528>)
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	3b01      	subs	r3, #1
 800d402:	b2da      	uxtb	r2, r3
 800d404:	4b6a      	ldr	r3, [pc, #424]	; (800d5b0 <Adachi_judge+0x528>)
 800d406:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d408:	e1ad      	b.n	800d766 <Adachi_judge+0x6de>
 800d40a:	e1ac      	b.n	800d766 <Adachi_judge+0x6de>

	  case south:

		  if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d40c:	4b68      	ldr	r3, [pc, #416]	; (800d5b0 <Adachi_judge+0x528>)
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	4618      	mov	r0, r3
 800d412:	4b68      	ldr	r3, [pc, #416]	; (800d5b4 <Adachi_judge+0x52c>)
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	4619      	mov	r1, r3
 800d418:	4a67      	ldr	r2, [pc, #412]	; (800d5b8 <Adachi_judge+0x530>)
 800d41a:	0103      	lsls	r3, r0, #4
 800d41c:	440b      	add	r3, r1
 800d41e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d422:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d426:	b2db      	uxtb	r3, r3
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d127      	bne.n	800d47c <Adachi_judge+0x3f4>
 800d42c:	4b60      	ldr	r3, [pc, #384]	; (800d5b0 <Adachi_judge+0x528>)
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	461a      	mov	r2, r3
 800d432:	4b60      	ldr	r3, [pc, #384]	; (800d5b4 <Adachi_judge+0x52c>)
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	3b01      	subs	r3, #1
 800d438:	4960      	ldr	r1, [pc, #384]	; (800d5bc <Adachi_judge+0x534>)
 800d43a:	0112      	lsls	r2, r2, #4
 800d43c:	440a      	add	r2, r1
 800d43e:	4413      	add	r3, r2
 800d440:	781a      	ldrb	r2, [r3, #0]
 800d442:	4b5b      	ldr	r3, [pc, #364]	; (800d5b0 <Adachi_judge+0x528>)
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	461c      	mov	r4, r3
 800d448:	4b5a      	ldr	r3, [pc, #360]	; (800d5b4 <Adachi_judge+0x52c>)
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	4618      	mov	r0, r3
 800d44e:	495b      	ldr	r1, [pc, #364]	; (800d5bc <Adachi_judge+0x534>)
 800d450:	0123      	lsls	r3, r4, #4
 800d452:	440b      	add	r3, r1
 800d454:	4403      	add	r3, r0
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d20f      	bcs.n	800d47c <Adachi_judge+0x3f4>
 800d45c:	4b55      	ldr	r3, [pc, #340]	; (800d5b4 <Adachi_judge+0x52c>)
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00b      	beq.n	800d47c <Adachi_judge+0x3f4>
			  //前南
			  straight();
 800d464:	f7fd fce4 	bl	800ae30 <straight>
	       	  my_direction = south;
 800d468:	4b55      	ldr	r3, [pc, #340]	; (800d5c0 <Adachi_judge+0x538>)
 800d46a:	2202      	movs	r2, #2
 800d46c:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d46e:	4b51      	ldr	r3, [pc, #324]	; (800d5b4 <Adachi_judge+0x52c>)
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	3b01      	subs	r3, #1
 800d474:	b2da      	uxtb	r2, r3
 800d476:	4b4f      	ldr	r3, [pc, #316]	; (800d5b4 <Adachi_judge+0x52c>)
 800d478:	701a      	strb	r2, [r3, #0]
 800d47a:	e094      	b.n	800d5a6 <Adachi_judge+0x51e>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800d47c:	4b4c      	ldr	r3, [pc, #304]	; (800d5b0 <Adachi_judge+0x528>)
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	4618      	mov	r0, r3
 800d482:	4b4c      	ldr	r3, [pc, #304]	; (800d5b4 <Adachi_judge+0x52c>)
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	4619      	mov	r1, r3
 800d488:	4a4b      	ldr	r2, [pc, #300]	; (800d5b8 <Adachi_judge+0x530>)
 800d48a:	0103      	lsls	r3, r0, #4
 800d48c:	440b      	add	r3, r1
 800d48e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d492:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d496:	b2db      	uxtb	r3, r3
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d127      	bne.n	800d4ec <Adachi_judge+0x464>
 800d49c:	4b44      	ldr	r3, [pc, #272]	; (800d5b0 <Adachi_judge+0x528>)
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	4a44      	ldr	r2, [pc, #272]	; (800d5b4 <Adachi_judge+0x52c>)
 800d4a4:	7812      	ldrb	r2, [r2, #0]
 800d4a6:	4611      	mov	r1, r2
 800d4a8:	4a44      	ldr	r2, [pc, #272]	; (800d5bc <Adachi_judge+0x534>)
 800d4aa:	011b      	lsls	r3, r3, #4
 800d4ac:	4413      	add	r3, r2
 800d4ae:	440b      	add	r3, r1
 800d4b0:	781a      	ldrb	r2, [r3, #0]
 800d4b2:	4b3f      	ldr	r3, [pc, #252]	; (800d5b0 <Adachi_judge+0x528>)
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	461c      	mov	r4, r3
 800d4b8:	4b3e      	ldr	r3, [pc, #248]	; (800d5b4 <Adachi_judge+0x52c>)
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	4618      	mov	r0, r3
 800d4be:	493f      	ldr	r1, [pc, #252]	; (800d5bc <Adachi_judge+0x534>)
 800d4c0:	0123      	lsls	r3, r4, #4
 800d4c2:	440b      	add	r3, r1
 800d4c4:	4403      	add	r3, r0
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d20f      	bcs.n	800d4ec <Adachi_judge+0x464>
 800d4cc:	4b38      	ldr	r3, [pc, #224]	; (800d5b0 <Adachi_judge+0x528>)
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	2b0e      	cmp	r3, #14
 800d4d2:	d80b      	bhi.n	800d4ec <Adachi_judge+0x464>
			  //左東
			  L_turn_select();
 800d4d4:	f7fe fb08 	bl	800bae8 <L_turn_select>
	       	  my_direction = east;
 800d4d8:	4b39      	ldr	r3, [pc, #228]	; (800d5c0 <Adachi_judge+0x538>)
 800d4da:	2201      	movs	r2, #1
 800d4dc:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d4de:	4b34      	ldr	r3, [pc, #208]	; (800d5b0 <Adachi_judge+0x528>)
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	b2da      	uxtb	r2, r3
 800d4e6:	4b32      	ldr	r3, [pc, #200]	; (800d5b0 <Adachi_judge+0x528>)
 800d4e8:	701a      	strb	r2, [r3, #0]
 800d4ea:	e05c      	b.n	800d5a6 <Adachi_judge+0x51e>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d4ec:	4b30      	ldr	r3, [pc, #192]	; (800d5b0 <Adachi_judge+0x528>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	4b30      	ldr	r3, [pc, #192]	; (800d5b4 <Adachi_judge+0x52c>)
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	4a2f      	ldr	r2, [pc, #188]	; (800d5b8 <Adachi_judge+0x530>)
 800d4fa:	0103      	lsls	r3, r0, #4
 800d4fc:	440b      	add	r3, r1
 800d4fe:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d502:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d506:	b2db      	uxtb	r3, r3
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d127      	bne.n	800d55c <Adachi_judge+0x4d4>
 800d50c:	4b28      	ldr	r3, [pc, #160]	; (800d5b0 <Adachi_judge+0x528>)
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	3b01      	subs	r3, #1
 800d512:	4a28      	ldr	r2, [pc, #160]	; (800d5b4 <Adachi_judge+0x52c>)
 800d514:	7812      	ldrb	r2, [r2, #0]
 800d516:	4611      	mov	r1, r2
 800d518:	4a28      	ldr	r2, [pc, #160]	; (800d5bc <Adachi_judge+0x534>)
 800d51a:	011b      	lsls	r3, r3, #4
 800d51c:	4413      	add	r3, r2
 800d51e:	440b      	add	r3, r1
 800d520:	781a      	ldrb	r2, [r3, #0]
 800d522:	4b23      	ldr	r3, [pc, #140]	; (800d5b0 <Adachi_judge+0x528>)
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	461c      	mov	r4, r3
 800d528:	4b22      	ldr	r3, [pc, #136]	; (800d5b4 <Adachi_judge+0x52c>)
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	4618      	mov	r0, r3
 800d52e:	4923      	ldr	r1, [pc, #140]	; (800d5bc <Adachi_judge+0x534>)
 800d530:	0123      	lsls	r3, r4, #4
 800d532:	440b      	add	r3, r1
 800d534:	4403      	add	r3, r0
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d20f      	bcs.n	800d55c <Adachi_judge+0x4d4>
 800d53c:	4b1c      	ldr	r3, [pc, #112]	; (800d5b0 <Adachi_judge+0x528>)
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d00b      	beq.n	800d55c <Adachi_judge+0x4d4>
			  //右西
			  R_turn_select();
 800d544:	f7fe fa8c 	bl	800ba60 <R_turn_select>
	       	  my_direction = west;
 800d548:	4b1d      	ldr	r3, [pc, #116]	; (800d5c0 <Adachi_judge+0x538>)
 800d54a:	2203      	movs	r2, #3
 800d54c:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d54e:	4b18      	ldr	r3, [pc, #96]	; (800d5b0 <Adachi_judge+0x528>)
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	3b01      	subs	r3, #1
 800d554:	b2da      	uxtb	r2, r3
 800d556:	4b16      	ldr	r3, [pc, #88]	; (800d5b0 <Adachi_judge+0x528>)
 800d558:	701a      	strb	r2, [r3, #0]
 800d55a:	e024      	b.n	800d5a6 <Adachi_judge+0x51e>
		  }
		  else {
			  //後北
	          Decelerate();
 800d55c:	f7fd fbb0 	bl	800acc0 <Decelerate>
	          wait(0.3);;
 800d560:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800d5a8 <Adachi_judge+0x520>
 800d564:	f7fd fa7c 	bl	800aa60 <wait>

	          if(mode.execution == 1)
 800d568:	4b16      	ldr	r3, [pc, #88]	; (800d5c4 <Adachi_judge+0x53c>)
 800d56a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d56e:	2b01      	cmp	r3, #1
 800d570:	d101      	bne.n	800d576 <Adachi_judge+0x4ee>
	        	  Motor_PWM_Stop();
 800d572:	f7fc fd39 	bl	8009fe8 <Motor_PWM_Stop>

	  	      rotate180();
 800d576:	f7fe f991 	bl	800b89c <rotate180>
	  	      wait(0.3);;
 800d57a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800d5a8 <Adachi_judge+0x520>
 800d57e:	f7fd fa6f 	bl	800aa60 <wait>
	  	      back_calib();
 800d582:	f7fe fa05 	bl	800b990 <back_calib>
	  	      wait(0.3);
 800d586:	ed9f 0b08 	vldr	d0, [pc, #32]	; 800d5a8 <Adachi_judge+0x520>
 800d58a:	f7fd fa69 	bl	800aa60 <wait>
	       	  Start_Accel();
 800d58e:	f7fd fa8f 	bl	800aab0 <Start_Accel>

	       	  my_direction = north;
 800d592:	4b0b      	ldr	r3, [pc, #44]	; (800d5c0 <Adachi_judge+0x538>)
 800d594:	2200      	movs	r2, #0
 800d596:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d598:	4b06      	ldr	r3, [pc, #24]	; (800d5b4 <Adachi_judge+0x52c>)
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	3301      	adds	r3, #1
 800d59e:	b2da      	uxtb	r2, r3
 800d5a0:	4b04      	ldr	r3, [pc, #16]	; (800d5b4 <Adachi_judge+0x52c>)
 800d5a2:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d5a4:	e0df      	b.n	800d766 <Adachi_judge+0x6de>
 800d5a6:	e0de      	b.n	800d766 <Adachi_judge+0x6de>
 800d5a8:	33333333 	.word	0x33333333
 800d5ac:	3fd33333 	.word	0x3fd33333
 800d5b0:	2000030c 	.word	0x2000030c
 800d5b4:	2000030d 	.word	0x2000030d
 800d5b8:	20004fb4 	.word	0x20004fb4
 800d5bc:	20004a58 	.word	0x20004a58
 800d5c0:	20004492 	.word	0x20004492
 800d5c4:	20000074 	.word	0x20000074

	  case west:

		  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d5c8:	4b6b      	ldr	r3, [pc, #428]	; (800d778 <Adachi_judge+0x6f0>)
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	4b6b      	ldr	r3, [pc, #428]	; (800d77c <Adachi_judge+0x6f4>)
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	4a6a      	ldr	r2, [pc, #424]	; (800d780 <Adachi_judge+0x6f8>)
 800d5d6:	0103      	lsls	r3, r0, #4
 800d5d8:	440b      	add	r3, r1
 800d5da:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d5de:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d127      	bne.n	800d638 <Adachi_judge+0x5b0>
 800d5e8:	4b63      	ldr	r3, [pc, #396]	; (800d778 <Adachi_judge+0x6f0>)
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	3b01      	subs	r3, #1
 800d5ee:	4a63      	ldr	r2, [pc, #396]	; (800d77c <Adachi_judge+0x6f4>)
 800d5f0:	7812      	ldrb	r2, [r2, #0]
 800d5f2:	4611      	mov	r1, r2
 800d5f4:	4a63      	ldr	r2, [pc, #396]	; (800d784 <Adachi_judge+0x6fc>)
 800d5f6:	011b      	lsls	r3, r3, #4
 800d5f8:	4413      	add	r3, r2
 800d5fa:	440b      	add	r3, r1
 800d5fc:	781a      	ldrb	r2, [r3, #0]
 800d5fe:	4b5e      	ldr	r3, [pc, #376]	; (800d778 <Adachi_judge+0x6f0>)
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	461c      	mov	r4, r3
 800d604:	4b5d      	ldr	r3, [pc, #372]	; (800d77c <Adachi_judge+0x6f4>)
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	4618      	mov	r0, r3
 800d60a:	495e      	ldr	r1, [pc, #376]	; (800d784 <Adachi_judge+0x6fc>)
 800d60c:	0123      	lsls	r3, r4, #4
 800d60e:	440b      	add	r3, r1
 800d610:	4403      	add	r3, r0
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	429a      	cmp	r2, r3
 800d616:	d20f      	bcs.n	800d638 <Adachi_judge+0x5b0>
 800d618:	4b57      	ldr	r3, [pc, #348]	; (800d778 <Adachi_judge+0x6f0>)
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00b      	beq.n	800d638 <Adachi_judge+0x5b0>
			  //前西
			  straight();
 800d620:	f7fd fc06 	bl	800ae30 <straight>
	       	  my_direction = west;
 800d624:	4b58      	ldr	r3, [pc, #352]	; (800d788 <Adachi_judge+0x700>)
 800d626:	2203      	movs	r2, #3
 800d628:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d62a:	4b53      	ldr	r3, [pc, #332]	; (800d778 <Adachi_judge+0x6f0>)
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	3b01      	subs	r3, #1
 800d630:	b2da      	uxtb	r2, r3
 800d632:	4b51      	ldr	r3, [pc, #324]	; (800d778 <Adachi_judge+0x6f0>)
 800d634:	701a      	strb	r2, [r3, #0]
 800d636:	e094      	b.n	800d762 <Adachi_judge+0x6da>
		  }
		  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d638:	4b4f      	ldr	r3, [pc, #316]	; (800d778 <Adachi_judge+0x6f0>)
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	4618      	mov	r0, r3
 800d63e:	4b4f      	ldr	r3, [pc, #316]	; (800d77c <Adachi_judge+0x6f4>)
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	4619      	mov	r1, r3
 800d644:	4a4e      	ldr	r2, [pc, #312]	; (800d780 <Adachi_judge+0x6f8>)
 800d646:	0103      	lsls	r3, r0, #4
 800d648:	440b      	add	r3, r1
 800d64a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d64e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d652:	b2db      	uxtb	r3, r3
 800d654:	2b00      	cmp	r3, #0
 800d656:	d127      	bne.n	800d6a8 <Adachi_judge+0x620>
 800d658:	4b47      	ldr	r3, [pc, #284]	; (800d778 <Adachi_judge+0x6f0>)
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	461a      	mov	r2, r3
 800d65e:	4b47      	ldr	r3, [pc, #284]	; (800d77c <Adachi_judge+0x6f4>)
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	3b01      	subs	r3, #1
 800d664:	4947      	ldr	r1, [pc, #284]	; (800d784 <Adachi_judge+0x6fc>)
 800d666:	0112      	lsls	r2, r2, #4
 800d668:	440a      	add	r2, r1
 800d66a:	4413      	add	r3, r2
 800d66c:	781a      	ldrb	r2, [r3, #0]
 800d66e:	4b42      	ldr	r3, [pc, #264]	; (800d778 <Adachi_judge+0x6f0>)
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	461c      	mov	r4, r3
 800d674:	4b41      	ldr	r3, [pc, #260]	; (800d77c <Adachi_judge+0x6f4>)
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	4618      	mov	r0, r3
 800d67a:	4942      	ldr	r1, [pc, #264]	; (800d784 <Adachi_judge+0x6fc>)
 800d67c:	0123      	lsls	r3, r4, #4
 800d67e:	440b      	add	r3, r1
 800d680:	4403      	add	r3, r0
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	429a      	cmp	r2, r3
 800d686:	d20f      	bcs.n	800d6a8 <Adachi_judge+0x620>
 800d688:	4b3c      	ldr	r3, [pc, #240]	; (800d77c <Adachi_judge+0x6f4>)
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d00b      	beq.n	800d6a8 <Adachi_judge+0x620>
			  //左�?
			  L_turn_select();
 800d690:	f7fe fa2a 	bl	800bae8 <L_turn_select>
	       	  my_direction = south;
 800d694:	4b3c      	ldr	r3, [pc, #240]	; (800d788 <Adachi_judge+0x700>)
 800d696:	2202      	movs	r2, #2
 800d698:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d69a:	4b38      	ldr	r3, [pc, #224]	; (800d77c <Adachi_judge+0x6f4>)
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	b2da      	uxtb	r2, r3
 800d6a2:	4b36      	ldr	r3, [pc, #216]	; (800d77c <Adachi_judge+0x6f4>)
 800d6a4:	701a      	strb	r2, [r3, #0]
 800d6a6:	e05c      	b.n	800d762 <Adachi_judge+0x6da>
		  }
		  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d6a8:	4b33      	ldr	r3, [pc, #204]	; (800d778 <Adachi_judge+0x6f0>)
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	4b33      	ldr	r3, [pc, #204]	; (800d77c <Adachi_judge+0x6f4>)
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	4a32      	ldr	r2, [pc, #200]	; (800d780 <Adachi_judge+0x6f8>)
 800d6b6:	0103      	lsls	r3, r0, #4
 800d6b8:	440b      	add	r3, r1
 800d6ba:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d6be:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d127      	bne.n	800d718 <Adachi_judge+0x690>
 800d6c8:	4b2b      	ldr	r3, [pc, #172]	; (800d778 <Adachi_judge+0x6f0>)
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	4b2b      	ldr	r3, [pc, #172]	; (800d77c <Adachi_judge+0x6f4>)
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	492b      	ldr	r1, [pc, #172]	; (800d784 <Adachi_judge+0x6fc>)
 800d6d6:	0112      	lsls	r2, r2, #4
 800d6d8:	440a      	add	r2, r1
 800d6da:	4413      	add	r3, r2
 800d6dc:	781a      	ldrb	r2, [r3, #0]
 800d6de:	4b26      	ldr	r3, [pc, #152]	; (800d778 <Adachi_judge+0x6f0>)
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	461c      	mov	r4, r3
 800d6e4:	4b25      	ldr	r3, [pc, #148]	; (800d77c <Adachi_judge+0x6f4>)
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	4926      	ldr	r1, [pc, #152]	; (800d784 <Adachi_judge+0x6fc>)
 800d6ec:	0123      	lsls	r3, r4, #4
 800d6ee:	440b      	add	r3, r1
 800d6f0:	4403      	add	r3, r0
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d20f      	bcs.n	800d718 <Adachi_judge+0x690>
 800d6f8:	4b20      	ldr	r3, [pc, #128]	; (800d77c <Adachi_judge+0x6f4>)
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	2b0e      	cmp	r3, #14
 800d6fe:	d80b      	bhi.n	800d718 <Adachi_judge+0x690>
			  //右�?
			  R_turn_select();
 800d700:	f7fe f9ae 	bl	800ba60 <R_turn_select>
	       	  my_direction = north;
 800d704:	4b20      	ldr	r3, [pc, #128]	; (800d788 <Adachi_judge+0x700>)
 800d706:	2200      	movs	r2, #0
 800d708:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d70a:	4b1c      	ldr	r3, [pc, #112]	; (800d77c <Adachi_judge+0x6f4>)
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	3301      	adds	r3, #1
 800d710:	b2da      	uxtb	r2, r3
 800d712:	4b1a      	ldr	r3, [pc, #104]	; (800d77c <Adachi_judge+0x6f4>)
 800d714:	701a      	strb	r2, [r3, #0]
 800d716:	e024      	b.n	800d762 <Adachi_judge+0x6da>
		  }
		  else {
			  //後東
	          Decelerate();
 800d718:	f7fd fad2 	bl	800acc0 <Decelerate>
	          wait(0.3);;
 800d71c:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800d770 <Adachi_judge+0x6e8>
 800d720:	f7fd f99e 	bl	800aa60 <wait>

	          if(mode.execution == 1)
 800d724:	4b19      	ldr	r3, [pc, #100]	; (800d78c <Adachi_judge+0x704>)
 800d726:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d101      	bne.n	800d732 <Adachi_judge+0x6aa>
	        	  Motor_PWM_Stop();
 800d72e:	f7fc fc5b 	bl	8009fe8 <Motor_PWM_Stop>

	  	      rotate180();
 800d732:	f7fe f8b3 	bl	800b89c <rotate180>
	  	      wait(0.3);;
 800d736:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d770 <Adachi_judge+0x6e8>
 800d73a:	f7fd f991 	bl	800aa60 <wait>
	  	      back_calib();
 800d73e:	f7fe f927 	bl	800b990 <back_calib>
	  	      wait(0.3);
 800d742:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800d770 <Adachi_judge+0x6e8>
 800d746:	f7fd f98b 	bl	800aa60 <wait>
	       	  Start_Accel();
 800d74a:	f7fd f9b1 	bl	800aab0 <Start_Accel>

	       	  my_direction = east;
 800d74e:	4b0e      	ldr	r3, [pc, #56]	; (800d788 <Adachi_judge+0x700>)
 800d750:	2201      	movs	r2, #1
 800d752:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d754:	4b08      	ldr	r3, [pc, #32]	; (800d778 <Adachi_judge+0x6f0>)
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	3301      	adds	r3, #1
 800d75a:	b2da      	uxtb	r2, r3
 800d75c:	4b06      	ldr	r3, [pc, #24]	; (800d778 <Adachi_judge+0x6f0>)
 800d75e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d760:	e001      	b.n	800d766 <Adachi_judge+0x6de>
 800d762:	e000      	b.n	800d766 <Adachi_judge+0x6de>

	  default:
		  break;
 800d764:	bf00      	nop
	  }//swtich end
}
 800d766:	bf00      	nop
 800d768:	bd98      	pop	{r3, r4, r7, pc}
 800d76a:	bf00      	nop
 800d76c:	f3af 8000 	nop.w
 800d770:	33333333 	.word	0x33333333
 800d774:	3fd33333 	.word	0x3fd33333
 800d778:	2000030c 	.word	0x2000030c
 800d77c:	2000030d 	.word	0x2000030d
 800d780:	20004fb4 	.word	0x20004fb4
 800d784:	20004a58 	.word	0x20004a58
 800d788:	20004492 	.word	0x20004492
 800d78c:	20000074 	.word	0x20000074

0800d790 <Adachi_search>:

	  default:
		  break;
	  }//swtich end
}
void Adachi_search(){
 800d790:	b580      	push	{r7, lr}
 800d792:	af00      	add	r7, sp, #0
	//back_calib();
	/*ここは書籍から引用*/

	//マップ�?�初期�?
	map_init();
 800d794:	f7fc f97c 	bl	8009a90 <map_init>
	//座標�?�初期�?
	x = y = 0;
 800d798:	4b33      	ldr	r3, [pc, #204]	; (800d868 <Adachi_search+0xd8>)
 800d79a:	2200      	movs	r2, #0
 800d79c:	701a      	strb	r2, [r3, #0]
 800d79e:	4b32      	ldr	r3, [pc, #200]	; (800d868 <Adachi_search+0xd8>)
 800d7a0:	781a      	ldrb	r2, [r3, #0]
 800d7a2:	4b32      	ldr	r3, [pc, #200]	; (800d86c <Adachi_search+0xdc>)
 800d7a4:	701a      	strb	r2, [r3, #0]
	//方向�?�初期�?
	my_direction=north;
 800d7a6:	4b32      	ldr	r3, [pc, #200]	; (800d870 <Adachi_search+0xe0>)
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	701a      	strb	r2, [r3, #0]

	/*ここまで*/

	//壁情報の初期�?
	wall_set();
 800d7ac:	f7fe fc1e 	bl	800bfec <wall_set>

	//開始位置の後ろはWALL
	//左右はwall_set()でセ�?�?
	wall[x][y].south = WALL;
 800d7b0:	4b2e      	ldr	r3, [pc, #184]	; (800d86c <Adachi_search+0xdc>)
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	4b2c      	ldr	r3, [pc, #176]	; (800d868 <Adachi_search+0xd8>)
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	492d      	ldr	r1, [pc, #180]	; (800d874 <Adachi_search+0xe4>)
 800d7be:	0103      	lsls	r3, r0, #4
 800d7c0:	441a      	add	r2, r3
 800d7c2:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800d7c6:	2001      	movs	r0, #1
 800d7c8:	f360 1305 	bfi	r3, r0, #4, #2
 800d7cc:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	//歩数マップ�?�更新(ここでは初期�?)
	Walk_Map_Update();
 800d7d0:	f7fe fa9c 	bl	800bd0c <Walk_Map_Update>

	//�?初�?�直進
	Start_Accel();
 800d7d4:	f7fd f96c 	bl	800aab0 <Start_Accel>

	x = 0;
 800d7d8:	4b24      	ldr	r3, [pc, #144]	; (800d86c <Adachi_search+0xdc>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800d7de:	4b22      	ldr	r3, [pc, #136]	; (800d868 <Adachi_search+0xd8>)
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	b2da      	uxtb	r2, r3
 800d7e6:	4b20      	ldr	r3, [pc, #128]	; (800d868 <Adachi_search+0xd8>)
 800d7e8:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800d7ea:	e005      	b.n	800d7f8 <Adachi_search+0x68>
		//壁更新
		wall_set();
 800d7ec:	f7fe fbfe 	bl	800bfec <wall_set>

		//マップ更新
		Walk_Map_Update();
 800d7f0:	f7fe fa8c 	bl	800bd0c <Walk_Map_Update>

		//次の動きを判定し動く
		Adachi_judge();
 800d7f4:	f7ff fc48 	bl	800d088 <Adachi_judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800d7f8:	4b1c      	ldr	r3, [pc, #112]	; (800d86c <Adachi_search+0xdc>)
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	2b05      	cmp	r3, #5
 800d7fe:	d9f5      	bls.n	800d7ec <Adachi_search+0x5c>
 800d800:	4b1a      	ldr	r3, [pc, #104]	; (800d86c <Adachi_search+0xdc>)
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	2b07      	cmp	r3, #7
 800d806:	d8f1      	bhi.n	800d7ec <Adachi_search+0x5c>
 800d808:	4b17      	ldr	r3, [pc, #92]	; (800d868 <Adachi_search+0xd8>)
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	2b08      	cmp	r3, #8
 800d80e:	d9ed      	bls.n	800d7ec <Adachi_search+0x5c>
 800d810:	4b15      	ldr	r3, [pc, #84]	; (800d868 <Adachi_search+0xd8>)
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	2b0a      	cmp	r3, #10
 800d816:	d8e9      	bhi.n	800d7ec <Adachi_search+0x5c>
	}

	//after-gall#2
	      Decelerate();
 800d818:	f7fd fa52 	bl	800acc0 <Decelerate>
	      mode.LED = 7;
 800d81c:	4b16      	ldr	r3, [pc, #88]	; (800d878 <Adachi_search+0xe8>)
 800d81e:	2207      	movs	r2, #7
 800d820:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800d822:	f7fc fe57 	bl	800a4d4 <LED_Change>
	      HAL_Delay(1000);
 800d826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d82a:	f002 fdcf 	bl	80103cc <HAL_Delay>

//	      mapcopy();
//	      Flash_store();
	      mode.LED = 0;
 800d82e:	4b12      	ldr	r3, [pc, #72]	; (800d878 <Adachi_search+0xe8>)
 800d830:	2200      	movs	r2, #0
 800d832:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800d834:	f7fc fe4e 	bl	800a4d4 <LED_Change>
	      mapcopy();
 800d838:	f7fc f99e 	bl	8009b78 <mapcopy>
	      Flash_store();
 800d83c:	f7fc fb10 	bl	8009e60 <Flash_store>


	      //ゴールエリア巡回 2×2を想定
	      goal_area_search();
 800d840:	f7fe fd02 	bl	800c248 <goal_area_search>
	  	  Decelerate();
	      rotate180();
	      wait(0.3);
	      back_calib();
#endif
	      wait(0.3);
 800d844:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800d860 <Adachi_search+0xd0>
 800d848:	f7fd f90a 	bl	800aa60 <wait>
	      mapcopy();
 800d84c:	f7fc f994 	bl	8009b78 <mapcopy>
	      Flash_store();
 800d850:	f7fc fb06 	bl	8009e60 <Flash_store>
	      //mode.execution = 3;
	      while(1)
	      {

	    	  Motor_PWM_Stop();
 800d854:	f7fc fbc8 	bl	8009fe8 <Motor_PWM_Stop>
 800d858:	e7fc      	b.n	800d854 <Adachi_search+0xc4>
 800d85a:	bf00      	nop
 800d85c:	f3af 8000 	nop.w
 800d860:	33333333 	.word	0x33333333
 800d864:	3fd33333 	.word	0x3fd33333
 800d868:	2000030d 	.word	0x2000030d
 800d86c:	2000030c 	.word	0x2000030c
 800d870:	20004492 	.word	0x20004492
 800d874:	20004fb4 	.word	0x20004fb4
 800d878:	20000074 	.word	0x20000074

0800d87c <Map_Load>:
	      }
}
void Map_Load(){
 800d87c:	b580      	push	{r7, lr}
 800d87e:	af00      	add	r7, sp, #0
	//ROMの迷路�?ータをRAMに入れる
	Flash_load();
 800d880:	f7fc fadc 	bl	8009e3c <Flash_load>

	//work_ram[]の�?ータをwall[][]とwalk_map[][]に入れる
	static int i = 0, j=0,k=0;

	//壁情報
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800d884:	4b50      	ldr	r3, [pc, #320]	; (800d9c8 <Map_Load+0x14c>)
 800d886:	220f      	movs	r2, #15
 800d888:	601a      	str	r2, [r3, #0]
 800d88a:	e069      	b.n	800d960 <Map_Load+0xe4>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800d88c:	4b4f      	ldr	r3, [pc, #316]	; (800d9cc <Map_Load+0x150>)
 800d88e:	2200      	movs	r2, #0
 800d890:	601a      	str	r2, [r3, #0]
 800d892:	e05c      	b.n	800d94e <Map_Load+0xd2>
			wall[i][j].north = work_ram[k];
 800d894:	4b4e      	ldr	r3, [pc, #312]	; (800d9d0 <Map_Load+0x154>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a4e      	ldr	r2, [pc, #312]	; (800d9d4 <Map_Load+0x158>)
 800d89a:	5cd1      	ldrb	r1, [r2, r3]
 800d89c:	4b4b      	ldr	r3, [pc, #300]	; (800d9cc <Map_Load+0x150>)
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	4b49      	ldr	r3, [pc, #292]	; (800d9c8 <Map_Load+0x14c>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f001 0103 	and.w	r1, r1, #3
 800d8a8:	b2c8      	uxtb	r0, r1
 800d8aa:	494b      	ldr	r1, [pc, #300]	; (800d9d8 <Map_Load+0x15c>)
 800d8ac:	0112      	lsls	r2, r2, #4
 800d8ae:	441a      	add	r2, r3
 800d8b0:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800d8b4:	f360 0301 	bfi	r3, r0, #0, #2
 800d8b8:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].east = work_ram[k+1];
 800d8bc:	4b44      	ldr	r3, [pc, #272]	; (800d9d0 <Map_Load+0x154>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	4a44      	ldr	r2, [pc, #272]	; (800d9d4 <Map_Load+0x158>)
 800d8c4:	5cd1      	ldrb	r1, [r2, r3]
 800d8c6:	4b41      	ldr	r3, [pc, #260]	; (800d9cc <Map_Load+0x150>)
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	4b3f      	ldr	r3, [pc, #252]	; (800d9c8 <Map_Load+0x14c>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f001 0103 	and.w	r1, r1, #3
 800d8d2:	b2c8      	uxtb	r0, r1
 800d8d4:	4940      	ldr	r1, [pc, #256]	; (800d9d8 <Map_Load+0x15c>)
 800d8d6:	0112      	lsls	r2, r2, #4
 800d8d8:	441a      	add	r2, r3
 800d8da:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800d8de:	f360 0383 	bfi	r3, r0, #2, #2
 800d8e2:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].south = work_ram[k+2];
 800d8e6:	4b3a      	ldr	r3, [pc, #232]	; (800d9d0 <Map_Load+0x154>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	3302      	adds	r3, #2
 800d8ec:	4a39      	ldr	r2, [pc, #228]	; (800d9d4 <Map_Load+0x158>)
 800d8ee:	5cd1      	ldrb	r1, [r2, r3]
 800d8f0:	4b36      	ldr	r3, [pc, #216]	; (800d9cc <Map_Load+0x150>)
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	4b34      	ldr	r3, [pc, #208]	; (800d9c8 <Map_Load+0x14c>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f001 0103 	and.w	r1, r1, #3
 800d8fc:	b2c8      	uxtb	r0, r1
 800d8fe:	4936      	ldr	r1, [pc, #216]	; (800d9d8 <Map_Load+0x15c>)
 800d900:	0112      	lsls	r2, r2, #4
 800d902:	441a      	add	r2, r3
 800d904:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800d908:	f360 1305 	bfi	r3, r0, #4, #2
 800d90c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].west = work_ram[k+3];
 800d910:	4b2f      	ldr	r3, [pc, #188]	; (800d9d0 <Map_Load+0x154>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	3303      	adds	r3, #3
 800d916:	4a2f      	ldr	r2, [pc, #188]	; (800d9d4 <Map_Load+0x158>)
 800d918:	5cd1      	ldrb	r1, [r2, r3]
 800d91a:	4b2c      	ldr	r3, [pc, #176]	; (800d9cc <Map_Load+0x150>)
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	4b2a      	ldr	r3, [pc, #168]	; (800d9c8 <Map_Load+0x14c>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f001 0103 	and.w	r1, r1, #3
 800d926:	b2c8      	uxtb	r0, r1
 800d928:	492b      	ldr	r1, [pc, #172]	; (800d9d8 <Map_Load+0x15c>)
 800d92a:	0112      	lsls	r2, r2, #4
 800d92c:	441a      	add	r2, r3
 800d92e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800d932:	f360 1387 	bfi	r3, r0, #6, #2
 800d936:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			k+=4;
 800d93a:	4b25      	ldr	r3, [pc, #148]	; (800d9d0 <Map_Load+0x154>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	3304      	adds	r3, #4
 800d940:	4a23      	ldr	r2, [pc, #140]	; (800d9d0 <Map_Load+0x154>)
 800d942:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800d944:	4b21      	ldr	r3, [pc, #132]	; (800d9cc <Map_Load+0x150>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	3301      	adds	r3, #1
 800d94a:	4a20      	ldr	r2, [pc, #128]	; (800d9cc <Map_Load+0x150>)
 800d94c:	6013      	str	r3, [r2, #0]
 800d94e:	4b1f      	ldr	r3, [pc, #124]	; (800d9cc <Map_Load+0x150>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2b0f      	cmp	r3, #15
 800d954:	dd9e      	ble.n	800d894 <Map_Load+0x18>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800d956:	4b1c      	ldr	r3, [pc, #112]	; (800d9c8 <Map_Load+0x14c>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	3b01      	subs	r3, #1
 800d95c:	4a1a      	ldr	r2, [pc, #104]	; (800d9c8 <Map_Load+0x14c>)
 800d95e:	6013      	str	r3, [r2, #0]
 800d960:	4b19      	ldr	r3, [pc, #100]	; (800d9c8 <Map_Load+0x14c>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	da91      	bge.n	800d88c <Map_Load+0x10>
		//kは60まで行ったあと�?4*NOS*NOS になって値が�?�らず終わ�?

	}

	//歩数マッ�?
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800d968:	4b17      	ldr	r3, [pc, #92]	; (800d9c8 <Map_Load+0x14c>)
 800d96a:	220f      	movs	r2, #15
 800d96c:	601a      	str	r2, [r3, #0]
 800d96e:	e024      	b.n	800d9ba <Map_Load+0x13e>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800d970:	4b16      	ldr	r3, [pc, #88]	; (800d9cc <Map_Load+0x150>)
 800d972:	2200      	movs	r2, #0
 800d974:	601a      	str	r2, [r3, #0]
 800d976:	e017      	b.n	800d9a8 <Map_Load+0x12c>
			walk_map[i][j] = work_ram[k];
 800d978:	4b15      	ldr	r3, [pc, #84]	; (800d9d0 <Map_Load+0x154>)
 800d97a:	6819      	ldr	r1, [r3, #0]
 800d97c:	4b13      	ldr	r3, [pc, #76]	; (800d9cc <Map_Load+0x150>)
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	4b11      	ldr	r3, [pc, #68]	; (800d9c8 <Map_Load+0x14c>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4813      	ldr	r0, [pc, #76]	; (800d9d4 <Map_Load+0x158>)
 800d986:	5c40      	ldrb	r0, [r0, r1]
 800d988:	4914      	ldr	r1, [pc, #80]	; (800d9dc <Map_Load+0x160>)
 800d98a:	0112      	lsls	r2, r2, #4
 800d98c:	440a      	add	r2, r1
 800d98e:	4413      	add	r3, r2
 800d990:	4602      	mov	r2, r0
 800d992:	701a      	strb	r2, [r3, #0]
			k+=1;
 800d994:	4b0e      	ldr	r3, [pc, #56]	; (800d9d0 <Map_Load+0x154>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	3301      	adds	r3, #1
 800d99a:	4a0d      	ldr	r2, [pc, #52]	; (800d9d0 <Map_Load+0x154>)
 800d99c:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800d99e:	4b0b      	ldr	r3, [pc, #44]	; (800d9cc <Map_Load+0x150>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	4a09      	ldr	r2, [pc, #36]	; (800d9cc <Map_Load+0x150>)
 800d9a6:	6013      	str	r3, [r2, #0]
 800d9a8:	4b08      	ldr	r3, [pc, #32]	; (800d9cc <Map_Load+0x150>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2b0f      	cmp	r3, #15
 800d9ae:	dde3      	ble.n	800d978 <Map_Load+0xfc>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800d9b0:	4b05      	ldr	r3, [pc, #20]	; (800d9c8 <Map_Load+0x14c>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	4a04      	ldr	r2, [pc, #16]	; (800d9c8 <Map_Load+0x14c>)
 800d9b8:	6013      	str	r3, [r2, #0]
 800d9ba:	4b03      	ldr	r3, [pc, #12]	; (800d9c8 <Map_Load+0x14c>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	dad6      	bge.n	800d970 <Map_Load+0xf4>
		}
	}

}
 800d9c2:	bf00      	nop
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	2000435c 	.word	0x2000435c
 800d9cc:	20004360 	.word	0x20004360
 800d9d0:	20004364 	.word	0x20004364
 800d9d4:	20000318 	.word	0x20000318
 800d9d8:	20004fb4 	.word	0x20004fb4
 800d9dc:	20004a58 	.word	0x20004a58

0800d9e0 <Adachi_search2>:

	  default:
		  break;
	  }//swtich end
}
void Adachi_search2(){
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	af00      	add	r7, sp, #0
	//back_calib();
	/*ここは書籍から引用*/

	Map_Load();
 800d9e4:	f7ff ff4a 	bl	800d87c <Map_Load>

	//座標�?�初期�?
	x = y = 0;
 800d9e8:	4b33      	ldr	r3, [pc, #204]	; (800dab8 <Adachi_search2+0xd8>)
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	701a      	strb	r2, [r3, #0]
 800d9ee:	4b32      	ldr	r3, [pc, #200]	; (800dab8 <Adachi_search2+0xd8>)
 800d9f0:	781a      	ldrb	r2, [r3, #0]
 800d9f2:	4b32      	ldr	r3, [pc, #200]	; (800dabc <Adachi_search2+0xdc>)
 800d9f4:	701a      	strb	r2, [r3, #0]
	//方向�?�初期�?
	my_direction=north;
 800d9f6:	4b32      	ldr	r3, [pc, #200]	; (800dac0 <Adachi_search2+0xe0>)
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	701a      	strb	r2, [r3, #0]

	/*ここまで*/

	//壁情報の初期�?
	wall_set();
 800d9fc:	f7fe faf6 	bl	800bfec <wall_set>

	//開始位置の後ろはWALL
	//左右はwall_set()でセ�?�?
	wall[x][y].south = WALL;
 800da00:	4b2e      	ldr	r3, [pc, #184]	; (800dabc <Adachi_search2+0xdc>)
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	4618      	mov	r0, r3
 800da06:	4b2c      	ldr	r3, [pc, #176]	; (800dab8 <Adachi_search2+0xd8>)
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	461a      	mov	r2, r3
 800da0c:	492d      	ldr	r1, [pc, #180]	; (800dac4 <Adachi_search2+0xe4>)
 800da0e:	0103      	lsls	r3, r0, #4
 800da10:	441a      	add	r2, r3
 800da12:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800da16:	2001      	movs	r0, #1
 800da18:	f360 1305 	bfi	r3, r0, #4, #2
 800da1c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	//歩数マップ�?�更新(ここでは初期�?)
	Walk_Map_Update();
 800da20:	f7fe f974 	bl	800bd0c <Walk_Map_Update>

	//�?初�?�直進
	Start_Accel();
 800da24:	f7fd f844 	bl	800aab0 <Start_Accel>

	x = 0;
 800da28:	4b24      	ldr	r3, [pc, #144]	; (800dabc <Adachi_search2+0xdc>)
 800da2a:	2200      	movs	r2, #0
 800da2c:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800da2e:	4b22      	ldr	r3, [pc, #136]	; (800dab8 <Adachi_search2+0xd8>)
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	3301      	adds	r3, #1
 800da34:	b2da      	uxtb	r2, r3
 800da36:	4b20      	ldr	r3, [pc, #128]	; (800dab8 <Adachi_search2+0xd8>)
 800da38:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800da3a:	e005      	b.n	800da48 <Adachi_search2+0x68>
		//壁更新
		wall_set();
 800da3c:	f7fe fad6 	bl	800bfec <wall_set>

		//マップ更新
		Walk_Map_Update();
 800da40:	f7fe f964 	bl	800bd0c <Walk_Map_Update>

		//次の動きを判定し動く
		Adachi_judge();
 800da44:	f7ff fb20 	bl	800d088 <Adachi_judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800da48:	4b1c      	ldr	r3, [pc, #112]	; (800dabc <Adachi_search2+0xdc>)
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	2b05      	cmp	r3, #5
 800da4e:	d9f5      	bls.n	800da3c <Adachi_search2+0x5c>
 800da50:	4b1a      	ldr	r3, [pc, #104]	; (800dabc <Adachi_search2+0xdc>)
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	2b07      	cmp	r3, #7
 800da56:	d8f1      	bhi.n	800da3c <Adachi_search2+0x5c>
 800da58:	4b17      	ldr	r3, [pc, #92]	; (800dab8 <Adachi_search2+0xd8>)
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	2b08      	cmp	r3, #8
 800da5e:	d9ed      	bls.n	800da3c <Adachi_search2+0x5c>
 800da60:	4b15      	ldr	r3, [pc, #84]	; (800dab8 <Adachi_search2+0xd8>)
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b0a      	cmp	r3, #10
 800da66:	d8e9      	bhi.n	800da3c <Adachi_search2+0x5c>
	}

	//after-gall#2
	      Decelerate();
 800da68:	f7fd f92a 	bl	800acc0 <Decelerate>
	      mode.LED = 7;
 800da6c:	4b16      	ldr	r3, [pc, #88]	; (800dac8 <Adachi_search2+0xe8>)
 800da6e:	2207      	movs	r2, #7
 800da70:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800da72:	f7fc fd2f 	bl	800a4d4 <LED_Change>
	      HAL_Delay(1000);
 800da76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800da7a:	f002 fca7 	bl	80103cc <HAL_Delay>
//	      mapcopy();
//	      Flash_store();
	      mode.LED = 0;
 800da7e:	4b12      	ldr	r3, [pc, #72]	; (800dac8 <Adachi_search2+0xe8>)
 800da80:	2200      	movs	r2, #0
 800da82:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800da84:	f7fc fd26 	bl	800a4d4 <LED_Change>
	      mapcopy();
 800da88:	f7fc f876 	bl	8009b78 <mapcopy>
	      Flash_store();
 800da8c:	f7fc f9e8 	bl	8009e60 <Flash_store>

	      //ゴールエリア巡回 2×2を想定
	      goal_area_search();
 800da90:	f7fe fbda 	bl	800c248 <goal_area_search>
	  	  Decelerate();
	      rotate180();
	      wait(0.3);
	      back_calib();
#endif
	      wait(0.3);
 800da94:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800dab0 <Adachi_search2+0xd0>
 800da98:	f7fc ffe2 	bl	800aa60 <wait>
	      mapcopy();
 800da9c:	f7fc f86c 	bl	8009b78 <mapcopy>
	      Flash_store();
 800daa0:	f7fc f9de 	bl	8009e60 <Flash_store>
	      //mode.execution = 3;
	      Motor_PWM_Stop();
 800daa4:	f7fc faa0 	bl	8009fe8 <Motor_PWM_Stop>
}
 800daa8:	bf00      	nop
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	f3af 8000 	nop.w
 800dab0:	33333333 	.word	0x33333333
 800dab4:	3fd33333 	.word	0x3fd33333
 800dab8:	2000030d 	.word	0x2000030d
 800dabc:	2000030c 	.word	0x2000030c
 800dac0:	20004492 	.word	0x20004492
 800dac4:	20004fb4 	.word	0x20004fb4
 800dac8:	20000074 	.word	0x20000074
 800dacc:	00000000 	.word	0x00000000

0800dad0 <Shortest_Run_Judge>:


void Shortest_Run_Judge(){
 800dad0:	b598      	push	{r3, r4, r7, lr}
 800dad2:	af00      	add	r7, sp, #0
	/*------旋回モード選択-----*/
	mode.turn = 1;
 800dad4:	4ba8      	ldr	r3, [pc, #672]	; (800dd78 <Shortest_Run_Judge+0x2a8>)
 800dad6:	2201      	movs	r2, #1
 800dad8:	725a      	strb	r2, [r3, #9]
	// 2 : 片輪旋回                  //
	// 3 : IMUで超信地旋回       //
	/*----------------------------*/


	switch(my_direction){
 800dada:	4ba8      	ldr	r3, [pc, #672]	; (800dd7c <Shortest_Run_Judge+0x2ac>)
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	2b03      	cmp	r3, #3
 800dae0:	f200 834e 	bhi.w	800e180 <Shortest_Run_Judge+0x6b0>
 800dae4:	a201      	add	r2, pc, #4	; (adr r2, 800daec <Shortest_Run_Judge+0x1c>)
 800dae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daea:	bf00      	nop
 800daec:	0800dafd 	.word	0x0800dafd
 800daf0:	0800dc8d 	.word	0x0800dc8d
 800daf4:	0800de41 	.word	0x0800de41
 800daf8:	0800dff1 	.word	0x0800dff1
	  		  case north:
	  			  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800dafc:	4ba0      	ldr	r3, [pc, #640]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	4618      	mov	r0, r3
 800db02:	4ba0      	ldr	r3, [pc, #640]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	4619      	mov	r1, r3
 800db08:	4a9f      	ldr	r2, [pc, #636]	; (800dd88 <Shortest_Run_Judge+0x2b8>)
 800db0a:	0103      	lsls	r3, r0, #4
 800db0c:	440b      	add	r3, r1
 800db0e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800db12:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800db16:	b2db      	uxtb	r3, r3
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d127      	bne.n	800db6c <Shortest_Run_Judge+0x9c>
 800db1c:	4b98      	ldr	r3, [pc, #608]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	461a      	mov	r2, r3
 800db22:	4b98      	ldr	r3, [pc, #608]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	3301      	adds	r3, #1
 800db28:	4998      	ldr	r1, [pc, #608]	; (800dd8c <Shortest_Run_Judge+0x2bc>)
 800db2a:	0112      	lsls	r2, r2, #4
 800db2c:	440a      	add	r2, r1
 800db2e:	4413      	add	r3, r2
 800db30:	781a      	ldrb	r2, [r3, #0]
 800db32:	4b93      	ldr	r3, [pc, #588]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	461c      	mov	r4, r3
 800db38:	4b92      	ldr	r3, [pc, #584]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800db3a:	781b      	ldrb	r3, [r3, #0]
 800db3c:	4618      	mov	r0, r3
 800db3e:	4993      	ldr	r1, [pc, #588]	; (800dd8c <Shortest_Run_Judge+0x2bc>)
 800db40:	0123      	lsls	r3, r4, #4
 800db42:	440b      	add	r3, r1
 800db44:	4403      	add	r3, r0
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d20f      	bcs.n	800db6c <Shortest_Run_Judge+0x9c>
 800db4c:	4b8d      	ldr	r3, [pc, #564]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	2b0e      	cmp	r3, #14
 800db52:	d80b      	bhi.n	800db6c <Shortest_Run_Judge+0x9c>
	  				  //前北
	  				  straight();
 800db54:	f7fd f96c 	bl	800ae30 <straight>
	  				  my_direction = north;
 800db58:	4b88      	ldr	r3, [pc, #544]	; (800dd7c <Shortest_Run_Judge+0x2ac>)
 800db5a:	2200      	movs	r2, #0
 800db5c:	701a      	strb	r2, [r3, #0]
	  				  y++;
 800db5e:	4b89      	ldr	r3, [pc, #548]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	3301      	adds	r3, #1
 800db64:	b2da      	uxtb	r2, r3
 800db66:	4b87      	ldr	r3, [pc, #540]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800db68:	701a      	strb	r2, [r3, #0]
 800db6a:	e08e      	b.n	800dc8a <Shortest_Run_Judge+0x1ba>
	  			  }
	  			  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800db6c:	4b84      	ldr	r3, [pc, #528]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	4618      	mov	r0, r3
 800db72:	4b84      	ldr	r3, [pc, #528]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	4619      	mov	r1, r3
 800db78:	4a83      	ldr	r2, [pc, #524]	; (800dd88 <Shortest_Run_Judge+0x2b8>)
 800db7a:	0103      	lsls	r3, r0, #4
 800db7c:	440b      	add	r3, r1
 800db7e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800db82:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800db86:	b2db      	uxtb	r3, r3
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d127      	bne.n	800dbdc <Shortest_Run_Judge+0x10c>
 800db8c:	4b7c      	ldr	r3, [pc, #496]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	3b01      	subs	r3, #1
 800db92:	4a7c      	ldr	r2, [pc, #496]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800db94:	7812      	ldrb	r2, [r2, #0]
 800db96:	4611      	mov	r1, r2
 800db98:	4a7c      	ldr	r2, [pc, #496]	; (800dd8c <Shortest_Run_Judge+0x2bc>)
 800db9a:	011b      	lsls	r3, r3, #4
 800db9c:	4413      	add	r3, r2
 800db9e:	440b      	add	r3, r1
 800dba0:	781a      	ldrb	r2, [r3, #0]
 800dba2:	4b77      	ldr	r3, [pc, #476]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	461c      	mov	r4, r3
 800dba8:	4b76      	ldr	r3, [pc, #472]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	4618      	mov	r0, r3
 800dbae:	4977      	ldr	r1, [pc, #476]	; (800dd8c <Shortest_Run_Judge+0x2bc>)
 800dbb0:	0123      	lsls	r3, r4, #4
 800dbb2:	440b      	add	r3, r1
 800dbb4:	4403      	add	r3, r0
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d20f      	bcs.n	800dbdc <Shortest_Run_Judge+0x10c>
 800dbbc:	4b70      	ldr	r3, [pc, #448]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d00b      	beq.n	800dbdc <Shortest_Run_Judge+0x10c>
	  				  //左西
	  				  L_turn_select();
 800dbc4:	f7fd ff90 	bl	800bae8 <L_turn_select>
	  				  my_direction = west;
 800dbc8:	4b6c      	ldr	r3, [pc, #432]	; (800dd7c <Shortest_Run_Judge+0x2ac>)
 800dbca:	2203      	movs	r2, #3
 800dbcc:	701a      	strb	r2, [r3, #0]
	  			      x--;
 800dbce:	4b6c      	ldr	r3, [pc, #432]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	3b01      	subs	r3, #1
 800dbd4:	b2da      	uxtb	r2, r3
 800dbd6:	4b6a      	ldr	r3, [pc, #424]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dbd8:	701a      	strb	r2, [r3, #0]
 800dbda:	e056      	b.n	800dc8a <Shortest_Run_Judge+0x1ba>
	  			  }
	  			  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800dbdc:	4b68      	ldr	r3, [pc, #416]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	4b68      	ldr	r3, [pc, #416]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	4a67      	ldr	r2, [pc, #412]	; (800dd88 <Shortest_Run_Judge+0x2b8>)
 800dbea:	0103      	lsls	r3, r0, #4
 800dbec:	440b      	add	r3, r1
 800dbee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dbf2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d127      	bne.n	800dc4c <Shortest_Run_Judge+0x17c>
 800dbfc:	4b60      	ldr	r3, [pc, #384]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	3301      	adds	r3, #1
 800dc02:	4a60      	ldr	r2, [pc, #384]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800dc04:	7812      	ldrb	r2, [r2, #0]
 800dc06:	4611      	mov	r1, r2
 800dc08:	4a60      	ldr	r2, [pc, #384]	; (800dd8c <Shortest_Run_Judge+0x2bc>)
 800dc0a:	011b      	lsls	r3, r3, #4
 800dc0c:	4413      	add	r3, r2
 800dc0e:	440b      	add	r3, r1
 800dc10:	781a      	ldrb	r2, [r3, #0]
 800dc12:	4b5b      	ldr	r3, [pc, #364]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	461c      	mov	r4, r3
 800dc18:	4b5a      	ldr	r3, [pc, #360]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	495b      	ldr	r1, [pc, #364]	; (800dd8c <Shortest_Run_Judge+0x2bc>)
 800dc20:	0123      	lsls	r3, r4, #4
 800dc22:	440b      	add	r3, r1
 800dc24:	4403      	add	r3, r0
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d20f      	bcs.n	800dc4c <Shortest_Run_Judge+0x17c>
 800dc2c:	4b54      	ldr	r3, [pc, #336]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	2b0e      	cmp	r3, #14
 800dc32:	d80b      	bhi.n	800dc4c <Shortest_Run_Judge+0x17c>
	  				  //右東
	  				  R_turn_select();
 800dc34:	f7fd ff14 	bl	800ba60 <R_turn_select>
	  		          my_direction = east;
 800dc38:	4b50      	ldr	r3, [pc, #320]	; (800dd7c <Shortest_Run_Judge+0x2ac>)
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	701a      	strb	r2, [r3, #0]
	  		          x++;
 800dc3e:	4b50      	ldr	r3, [pc, #320]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	3301      	adds	r3, #1
 800dc44:	b2da      	uxtb	r2, r3
 800dc46:	4b4e      	ldr	r3, [pc, #312]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dc48:	701a      	strb	r2, [r3, #0]
 800dc4a:	e01e      	b.n	800dc8a <Shortest_Run_Judge+0x1ba>
	  			  }

	  			  else {
	  				  //後南
	  		          Decelerate();
 800dc4c:	f7fd f838 	bl	800acc0 <Decelerate>
	  		          wait(0.3);;
 800dc50:	ed9f 0b47 	vldr	d0, [pc, #284]	; 800dd70 <Shortest_Run_Judge+0x2a0>
 800dc54:	f7fc ff04 	bl	800aa60 <wait>

	  		          if(mode.execution == 1)
 800dc58:	4b47      	ldr	r3, [pc, #284]	; (800dd78 <Shortest_Run_Judge+0x2a8>)
 800dc5a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d101      	bne.n	800dc66 <Shortest_Run_Judge+0x196>
	  		        	  Motor_PWM_Stop();
 800dc62:	f7fc f9c1 	bl	8009fe8 <Motor_PWM_Stop>

	  		  	      rotate180();
 800dc66:	f7fd fe19 	bl	800b89c <rotate180>
	  		  	      wait(0.3);;
 800dc6a:	ed9f 0b41 	vldr	d0, [pc, #260]	; 800dd70 <Shortest_Run_Judge+0x2a0>
 800dc6e:	f7fc fef7 	bl	800aa60 <wait>
	  		       	  Accelerate();
 800dc72:	f7fc ff75 	bl	800ab60 <Accelerate>
	  		       	  my_direction = south;
 800dc76:	4b41      	ldr	r3, [pc, #260]	; (800dd7c <Shortest_Run_Judge+0x2ac>)
 800dc78:	2202      	movs	r2, #2
 800dc7a:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800dc7c:	4b41      	ldr	r3, [pc, #260]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	3b01      	subs	r3, #1
 800dc82:	b2da      	uxtb	r2, r3
 800dc84:	4b3f      	ldr	r3, [pc, #252]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800dc86:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800dc88:	e27b      	b.n	800e182 <Shortest_Run_Judge+0x6b2>
 800dc8a:	e27a      	b.n	800e182 <Shortest_Run_Judge+0x6b2>

	  		  case east:

	  			  if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800dc8c:	4b3c      	ldr	r3, [pc, #240]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	4618      	mov	r0, r3
 800dc92:	4b3c      	ldr	r3, [pc, #240]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	4619      	mov	r1, r3
 800dc98:	4a3b      	ldr	r2, [pc, #236]	; (800dd88 <Shortest_Run_Judge+0x2b8>)
 800dc9a:	0103      	lsls	r3, r0, #4
 800dc9c:	440b      	add	r3, r1
 800dc9e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dca2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d127      	bne.n	800dcfc <Shortest_Run_Judge+0x22c>
 800dcac:	4b34      	ldr	r3, [pc, #208]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	4a34      	ldr	r2, [pc, #208]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800dcb4:	7812      	ldrb	r2, [r2, #0]
 800dcb6:	4611      	mov	r1, r2
 800dcb8:	4a34      	ldr	r2, [pc, #208]	; (800dd8c <Shortest_Run_Judge+0x2bc>)
 800dcba:	011b      	lsls	r3, r3, #4
 800dcbc:	4413      	add	r3, r2
 800dcbe:	440b      	add	r3, r1
 800dcc0:	781a      	ldrb	r2, [r3, #0]
 800dcc2:	4b2f      	ldr	r3, [pc, #188]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	461c      	mov	r4, r3
 800dcc8:	4b2e      	ldr	r3, [pc, #184]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	4618      	mov	r0, r3
 800dcce:	492f      	ldr	r1, [pc, #188]	; (800dd8c <Shortest_Run_Judge+0x2bc>)
 800dcd0:	0123      	lsls	r3, r4, #4
 800dcd2:	440b      	add	r3, r1
 800dcd4:	4403      	add	r3, r0
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d20f      	bcs.n	800dcfc <Shortest_Run_Judge+0x22c>
 800dcdc:	4b28      	ldr	r3, [pc, #160]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	2b0e      	cmp	r3, #14
 800dce2:	d80b      	bhi.n	800dcfc <Shortest_Run_Judge+0x22c>
	  				  //前東
	  				  straight();
 800dce4:	f7fd f8a4 	bl	800ae30 <straight>
	  		       	  my_direction = east;
 800dce8:	4b24      	ldr	r3, [pc, #144]	; (800dd7c <Shortest_Run_Judge+0x2ac>)
 800dcea:	2201      	movs	r2, #1
 800dcec:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800dcee:	4b24      	ldr	r3, [pc, #144]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	b2da      	uxtb	r2, r3
 800dcf6:	4b22      	ldr	r3, [pc, #136]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dcf8:	701a      	strb	r2, [r3, #0]
 800dcfa:	e0a0      	b.n	800de3e <Shortest_Run_Judge+0x36e>
	  			  }
	  			  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800dcfc:	4b20      	ldr	r3, [pc, #128]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	4618      	mov	r0, r3
 800dd02:	4b20      	ldr	r3, [pc, #128]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	4619      	mov	r1, r3
 800dd08:	4a1f      	ldr	r2, [pc, #124]	; (800dd88 <Shortest_Run_Judge+0x2b8>)
 800dd0a:	0103      	lsls	r3, r0, #4
 800dd0c:	440b      	add	r3, r1
 800dd0e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dd12:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d139      	bne.n	800dd90 <Shortest_Run_Judge+0x2c0>
 800dd1c:	4b18      	ldr	r3, [pc, #96]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	461a      	mov	r2, r3
 800dd22:	4b18      	ldr	r3, [pc, #96]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	3301      	adds	r3, #1
 800dd28:	4918      	ldr	r1, [pc, #96]	; (800dd8c <Shortest_Run_Judge+0x2bc>)
 800dd2a:	0112      	lsls	r2, r2, #4
 800dd2c:	440a      	add	r2, r1
 800dd2e:	4413      	add	r3, r2
 800dd30:	781a      	ldrb	r2, [r3, #0]
 800dd32:	4b13      	ldr	r3, [pc, #76]	; (800dd80 <Shortest_Run_Judge+0x2b0>)
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	461c      	mov	r4, r3
 800dd38:	4b12      	ldr	r3, [pc, #72]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	4913      	ldr	r1, [pc, #76]	; (800dd8c <Shortest_Run_Judge+0x2bc>)
 800dd40:	0123      	lsls	r3, r4, #4
 800dd42:	440b      	add	r3, r1
 800dd44:	4403      	add	r3, r0
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d221      	bcs.n	800dd90 <Shortest_Run_Judge+0x2c0>
 800dd4c:	4b0d      	ldr	r3, [pc, #52]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	2b0e      	cmp	r3, #14
 800dd52:	d81d      	bhi.n	800dd90 <Shortest_Run_Judge+0x2c0>
	  				  //左�?
	  				  L_turn_select();
 800dd54:	f7fd fec8 	bl	800bae8 <L_turn_select>
	  		       	  my_direction = north;
 800dd58:	4b08      	ldr	r3, [pc, #32]	; (800dd7c <Shortest_Run_Judge+0x2ac>)
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800dd5e:	4b09      	ldr	r3, [pc, #36]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	3301      	adds	r3, #1
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	4b07      	ldr	r3, [pc, #28]	; (800dd84 <Shortest_Run_Judge+0x2b4>)
 800dd68:	701a      	strb	r2, [r3, #0]
 800dd6a:	e068      	b.n	800de3e <Shortest_Run_Judge+0x36e>
 800dd6c:	f3af 8000 	nop.w
 800dd70:	33333333 	.word	0x33333333
 800dd74:	3fd33333 	.word	0x3fd33333
 800dd78:	20000074 	.word	0x20000074
 800dd7c:	20004492 	.word	0x20004492
 800dd80:	2000030c 	.word	0x2000030c
 800dd84:	2000030d 	.word	0x2000030d
 800dd88:	20004fb4 	.word	0x20004fb4
 800dd8c:	20004a58 	.word	0x20004a58
	  			  }
	  			  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800dd90:	4b91      	ldr	r3, [pc, #580]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	4618      	mov	r0, r3
 800dd96:	4b91      	ldr	r3, [pc, #580]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	4a90      	ldr	r2, [pc, #576]	; (800dfe0 <Shortest_Run_Judge+0x510>)
 800dd9e:	0103      	lsls	r3, r0, #4
 800dda0:	440b      	add	r3, r1
 800dda2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dda6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d127      	bne.n	800de00 <Shortest_Run_Judge+0x330>
 800ddb0:	4b89      	ldr	r3, [pc, #548]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	4b89      	ldr	r3, [pc, #548]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	4989      	ldr	r1, [pc, #548]	; (800dfe4 <Shortest_Run_Judge+0x514>)
 800ddbe:	0112      	lsls	r2, r2, #4
 800ddc0:	440a      	add	r2, r1
 800ddc2:	4413      	add	r3, r2
 800ddc4:	781a      	ldrb	r2, [r3, #0]
 800ddc6:	4b84      	ldr	r3, [pc, #528]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	461c      	mov	r4, r3
 800ddcc:	4b83      	ldr	r3, [pc, #524]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	4984      	ldr	r1, [pc, #528]	; (800dfe4 <Shortest_Run_Judge+0x514>)
 800ddd4:	0123      	lsls	r3, r4, #4
 800ddd6:	440b      	add	r3, r1
 800ddd8:	4403      	add	r3, r0
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d20f      	bcs.n	800de00 <Shortest_Run_Judge+0x330>
 800dde0:	4b7e      	ldr	r3, [pc, #504]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d00b      	beq.n	800de00 <Shortest_Run_Judge+0x330>
	  				  //右�?
	  				  R_turn_select();
 800dde8:	f7fd fe3a 	bl	800ba60 <R_turn_select>
	  		       	  my_direction = south;
 800ddec:	4b7e      	ldr	r3, [pc, #504]	; (800dfe8 <Shortest_Run_Judge+0x518>)
 800ddee:	2202      	movs	r2, #2
 800ddf0:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800ddf2:	4b7a      	ldr	r3, [pc, #488]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	3b01      	subs	r3, #1
 800ddf8:	b2da      	uxtb	r2, r3
 800ddfa:	4b78      	ldr	r3, [pc, #480]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800ddfc:	701a      	strb	r2, [r3, #0]
 800ddfe:	e01e      	b.n	800de3e <Shortest_Run_Judge+0x36e>
	  			  }
	  			  else {
	  				  //後西
	  		          Decelerate();
 800de00:	f7fc ff5e 	bl	800acc0 <Decelerate>
	  		          wait(0.3);;
 800de04:	ed9f 0b72 	vldr	d0, [pc, #456]	; 800dfd0 <Shortest_Run_Judge+0x500>
 800de08:	f7fc fe2a 	bl	800aa60 <wait>

	  		          if(mode.execution == 1)
 800de0c:	4b77      	ldr	r3, [pc, #476]	; (800dfec <Shortest_Run_Judge+0x51c>)
 800de0e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800de12:	2b01      	cmp	r3, #1
 800de14:	d101      	bne.n	800de1a <Shortest_Run_Judge+0x34a>
	  		        	  Motor_PWM_Stop();
 800de16:	f7fc f8e7 	bl	8009fe8 <Motor_PWM_Stop>

	  		  	      rotate180();
 800de1a:	f7fd fd3f 	bl	800b89c <rotate180>
	  		  	      wait(0.3);;
 800de1e:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 800dfd0 <Shortest_Run_Judge+0x500>
 800de22:	f7fc fe1d 	bl	800aa60 <wait>
	  		       	  Accelerate();
 800de26:	f7fc fe9b 	bl	800ab60 <Accelerate>

	  		       	  my_direction = west;
 800de2a:	4b6f      	ldr	r3, [pc, #444]	; (800dfe8 <Shortest_Run_Judge+0x518>)
 800de2c:	2203      	movs	r2, #3
 800de2e:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800de30:	4b69      	ldr	r3, [pc, #420]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	3b01      	subs	r3, #1
 800de36:	b2da      	uxtb	r2, r3
 800de38:	4b67      	ldr	r3, [pc, #412]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800de3a:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800de3c:	e1a1      	b.n	800e182 <Shortest_Run_Judge+0x6b2>
 800de3e:	e1a0      	b.n	800e182 <Shortest_Run_Judge+0x6b2>

	  		  case south:

	  			  if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800de40:	4b65      	ldr	r3, [pc, #404]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	4618      	mov	r0, r3
 800de46:	4b65      	ldr	r3, [pc, #404]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	4619      	mov	r1, r3
 800de4c:	4a64      	ldr	r2, [pc, #400]	; (800dfe0 <Shortest_Run_Judge+0x510>)
 800de4e:	0103      	lsls	r3, r0, #4
 800de50:	440b      	add	r3, r1
 800de52:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800de56:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d127      	bne.n	800deb0 <Shortest_Run_Judge+0x3e0>
 800de60:	4b5d      	ldr	r3, [pc, #372]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	461a      	mov	r2, r3
 800de66:	4b5d      	ldr	r3, [pc, #372]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	3b01      	subs	r3, #1
 800de6c:	495d      	ldr	r1, [pc, #372]	; (800dfe4 <Shortest_Run_Judge+0x514>)
 800de6e:	0112      	lsls	r2, r2, #4
 800de70:	440a      	add	r2, r1
 800de72:	4413      	add	r3, r2
 800de74:	781a      	ldrb	r2, [r3, #0]
 800de76:	4b58      	ldr	r3, [pc, #352]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	461c      	mov	r4, r3
 800de7c:	4b57      	ldr	r3, [pc, #348]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	4618      	mov	r0, r3
 800de82:	4958      	ldr	r1, [pc, #352]	; (800dfe4 <Shortest_Run_Judge+0x514>)
 800de84:	0123      	lsls	r3, r4, #4
 800de86:	440b      	add	r3, r1
 800de88:	4403      	add	r3, r0
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d20f      	bcs.n	800deb0 <Shortest_Run_Judge+0x3e0>
 800de90:	4b52      	ldr	r3, [pc, #328]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d00b      	beq.n	800deb0 <Shortest_Run_Judge+0x3e0>
	  				  //前南
	  				  straight();
 800de98:	f7fc ffca 	bl	800ae30 <straight>
	  		       	  my_direction = south;
 800de9c:	4b52      	ldr	r3, [pc, #328]	; (800dfe8 <Shortest_Run_Judge+0x518>)
 800de9e:	2202      	movs	r2, #2
 800dea0:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800dea2:	4b4e      	ldr	r3, [pc, #312]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	3b01      	subs	r3, #1
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	4b4c      	ldr	r3, [pc, #304]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800deac:	701a      	strb	r2, [r3, #0]
 800deae:	e08e      	b.n	800dfce <Shortest_Run_Judge+0x4fe>
	  			  }
	  			  else if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800deb0:	4b49      	ldr	r3, [pc, #292]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	4618      	mov	r0, r3
 800deb6:	4b49      	ldr	r3, [pc, #292]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	4619      	mov	r1, r3
 800debc:	4a48      	ldr	r2, [pc, #288]	; (800dfe0 <Shortest_Run_Judge+0x510>)
 800debe:	0103      	lsls	r3, r0, #4
 800dec0:	440b      	add	r3, r1
 800dec2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dec6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800deca:	b2db      	uxtb	r3, r3
 800decc:	2b00      	cmp	r3, #0
 800dece:	d127      	bne.n	800df20 <Shortest_Run_Judge+0x450>
 800ded0:	4b41      	ldr	r3, [pc, #260]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	3301      	adds	r3, #1
 800ded6:	4a41      	ldr	r2, [pc, #260]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800ded8:	7812      	ldrb	r2, [r2, #0]
 800deda:	4611      	mov	r1, r2
 800dedc:	4a41      	ldr	r2, [pc, #260]	; (800dfe4 <Shortest_Run_Judge+0x514>)
 800dede:	011b      	lsls	r3, r3, #4
 800dee0:	4413      	add	r3, r2
 800dee2:	440b      	add	r3, r1
 800dee4:	781a      	ldrb	r2, [r3, #0]
 800dee6:	4b3c      	ldr	r3, [pc, #240]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	461c      	mov	r4, r3
 800deec:	4b3b      	ldr	r3, [pc, #236]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	4618      	mov	r0, r3
 800def2:	493c      	ldr	r1, [pc, #240]	; (800dfe4 <Shortest_Run_Judge+0x514>)
 800def4:	0123      	lsls	r3, r4, #4
 800def6:	440b      	add	r3, r1
 800def8:	4403      	add	r3, r0
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	429a      	cmp	r2, r3
 800defe:	d20f      	bcs.n	800df20 <Shortest_Run_Judge+0x450>
 800df00:	4b35      	ldr	r3, [pc, #212]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	2b0e      	cmp	r3, #14
 800df06:	d80b      	bhi.n	800df20 <Shortest_Run_Judge+0x450>
	  				  //左東
	  				  L_turn_select();
 800df08:	f7fd fdee 	bl	800bae8 <L_turn_select>
	  		       	  my_direction = east;
 800df0c:	4b36      	ldr	r3, [pc, #216]	; (800dfe8 <Shortest_Run_Judge+0x518>)
 800df0e:	2201      	movs	r2, #1
 800df10:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800df12:	4b31      	ldr	r3, [pc, #196]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	3301      	adds	r3, #1
 800df18:	b2da      	uxtb	r2, r3
 800df1a:	4b2f      	ldr	r3, [pc, #188]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800df1c:	701a      	strb	r2, [r3, #0]
 800df1e:	e056      	b.n	800dfce <Shortest_Run_Judge+0x4fe>
	  			  }
	  			  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800df20:	4b2d      	ldr	r3, [pc, #180]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	4618      	mov	r0, r3
 800df26:	4b2d      	ldr	r3, [pc, #180]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	4619      	mov	r1, r3
 800df2c:	4a2c      	ldr	r2, [pc, #176]	; (800dfe0 <Shortest_Run_Judge+0x510>)
 800df2e:	0103      	lsls	r3, r0, #4
 800df30:	440b      	add	r3, r1
 800df32:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800df36:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d127      	bne.n	800df90 <Shortest_Run_Judge+0x4c0>
 800df40:	4b25      	ldr	r3, [pc, #148]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	3b01      	subs	r3, #1
 800df46:	4a25      	ldr	r2, [pc, #148]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800df48:	7812      	ldrb	r2, [r2, #0]
 800df4a:	4611      	mov	r1, r2
 800df4c:	4a25      	ldr	r2, [pc, #148]	; (800dfe4 <Shortest_Run_Judge+0x514>)
 800df4e:	011b      	lsls	r3, r3, #4
 800df50:	4413      	add	r3, r2
 800df52:	440b      	add	r3, r1
 800df54:	781a      	ldrb	r2, [r3, #0]
 800df56:	4b20      	ldr	r3, [pc, #128]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	461c      	mov	r4, r3
 800df5c:	4b1f      	ldr	r3, [pc, #124]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	4618      	mov	r0, r3
 800df62:	4920      	ldr	r1, [pc, #128]	; (800dfe4 <Shortest_Run_Judge+0x514>)
 800df64:	0123      	lsls	r3, r4, #4
 800df66:	440b      	add	r3, r1
 800df68:	4403      	add	r3, r0
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d20f      	bcs.n	800df90 <Shortest_Run_Judge+0x4c0>
 800df70:	4b19      	ldr	r3, [pc, #100]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d00b      	beq.n	800df90 <Shortest_Run_Judge+0x4c0>
	  				  //右西
	  				  R_turn_select();
 800df78:	f7fd fd72 	bl	800ba60 <R_turn_select>
	  		       	  my_direction = west;
 800df7c:	4b1a      	ldr	r3, [pc, #104]	; (800dfe8 <Shortest_Run_Judge+0x518>)
 800df7e:	2203      	movs	r2, #3
 800df80:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800df82:	4b15      	ldr	r3, [pc, #84]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	3b01      	subs	r3, #1
 800df88:	b2da      	uxtb	r2, r3
 800df8a:	4b13      	ldr	r3, [pc, #76]	; (800dfd8 <Shortest_Run_Judge+0x508>)
 800df8c:	701a      	strb	r2, [r3, #0]
 800df8e:	e01e      	b.n	800dfce <Shortest_Run_Judge+0x4fe>
	  			  }
	  			  else {
	  				  //後北
	  		          Decelerate();
 800df90:	f7fc fe96 	bl	800acc0 <Decelerate>
	  		          wait(0.3);;
 800df94:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800dfd0 <Shortest_Run_Judge+0x500>
 800df98:	f7fc fd62 	bl	800aa60 <wait>

	  		          if(mode.execution == 1)
 800df9c:	4b13      	ldr	r3, [pc, #76]	; (800dfec <Shortest_Run_Judge+0x51c>)
 800df9e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d101      	bne.n	800dfaa <Shortest_Run_Judge+0x4da>
	  		        	  Motor_PWM_Stop();
 800dfa6:	f7fc f81f 	bl	8009fe8 <Motor_PWM_Stop>

	  		  	      rotate180();
 800dfaa:	f7fd fc77 	bl	800b89c <rotate180>
	  		  	      wait(0.3);;
 800dfae:	ed9f 0b08 	vldr	d0, [pc, #32]	; 800dfd0 <Shortest_Run_Judge+0x500>
 800dfb2:	f7fc fd55 	bl	800aa60 <wait>
	  		       	  Accelerate();
 800dfb6:	f7fc fdd3 	bl	800ab60 <Accelerate>

	  		       	  my_direction = north;
 800dfba:	4b0b      	ldr	r3, [pc, #44]	; (800dfe8 <Shortest_Run_Judge+0x518>)
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800dfc0:	4b06      	ldr	r3, [pc, #24]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	b2da      	uxtb	r2, r3
 800dfc8:	4b04      	ldr	r3, [pc, #16]	; (800dfdc <Shortest_Run_Judge+0x50c>)
 800dfca:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800dfcc:	e0d9      	b.n	800e182 <Shortest_Run_Judge+0x6b2>
 800dfce:	e0d8      	b.n	800e182 <Shortest_Run_Judge+0x6b2>
 800dfd0:	33333333 	.word	0x33333333
 800dfd4:	3fd33333 	.word	0x3fd33333
 800dfd8:	2000030c 	.word	0x2000030c
 800dfdc:	2000030d 	.word	0x2000030d
 800dfe0:	20004fb4 	.word	0x20004fb4
 800dfe4:	20004a58 	.word	0x20004a58
 800dfe8:	20004492 	.word	0x20004492
 800dfec:	20000074 	.word	0x20000074

	  		  case west:

	  			  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800dff0:	4b67      	ldr	r3, [pc, #412]	; (800e190 <Shortest_Run_Judge+0x6c0>)
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	4618      	mov	r0, r3
 800dff6:	4b67      	ldr	r3, [pc, #412]	; (800e194 <Shortest_Run_Judge+0x6c4>)
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	4619      	mov	r1, r3
 800dffc:	4a66      	ldr	r2, [pc, #408]	; (800e198 <Shortest_Run_Judge+0x6c8>)
 800dffe:	0103      	lsls	r3, r0, #4
 800e000:	440b      	add	r3, r1
 800e002:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e006:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e00a:	b2db      	uxtb	r3, r3
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d127      	bne.n	800e060 <Shortest_Run_Judge+0x590>
 800e010:	4b5f      	ldr	r3, [pc, #380]	; (800e190 <Shortest_Run_Judge+0x6c0>)
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	3b01      	subs	r3, #1
 800e016:	4a5f      	ldr	r2, [pc, #380]	; (800e194 <Shortest_Run_Judge+0x6c4>)
 800e018:	7812      	ldrb	r2, [r2, #0]
 800e01a:	4611      	mov	r1, r2
 800e01c:	4a5f      	ldr	r2, [pc, #380]	; (800e19c <Shortest_Run_Judge+0x6cc>)
 800e01e:	011b      	lsls	r3, r3, #4
 800e020:	4413      	add	r3, r2
 800e022:	440b      	add	r3, r1
 800e024:	781a      	ldrb	r2, [r3, #0]
 800e026:	4b5a      	ldr	r3, [pc, #360]	; (800e190 <Shortest_Run_Judge+0x6c0>)
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	461c      	mov	r4, r3
 800e02c:	4b59      	ldr	r3, [pc, #356]	; (800e194 <Shortest_Run_Judge+0x6c4>)
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	4618      	mov	r0, r3
 800e032:	495a      	ldr	r1, [pc, #360]	; (800e19c <Shortest_Run_Judge+0x6cc>)
 800e034:	0123      	lsls	r3, r4, #4
 800e036:	440b      	add	r3, r1
 800e038:	4403      	add	r3, r0
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d20f      	bcs.n	800e060 <Shortest_Run_Judge+0x590>
 800e040:	4b53      	ldr	r3, [pc, #332]	; (800e190 <Shortest_Run_Judge+0x6c0>)
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d00b      	beq.n	800e060 <Shortest_Run_Judge+0x590>
	  				  //前西
	  				  straight();
 800e048:	f7fc fef2 	bl	800ae30 <straight>
	  		       	  my_direction = west;
 800e04c:	4b54      	ldr	r3, [pc, #336]	; (800e1a0 <Shortest_Run_Judge+0x6d0>)
 800e04e:	2203      	movs	r2, #3
 800e050:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800e052:	4b4f      	ldr	r3, [pc, #316]	; (800e190 <Shortest_Run_Judge+0x6c0>)
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	3b01      	subs	r3, #1
 800e058:	b2da      	uxtb	r2, r3
 800e05a:	4b4d      	ldr	r3, [pc, #308]	; (800e190 <Shortest_Run_Judge+0x6c0>)
 800e05c:	701a      	strb	r2, [r3, #0]
 800e05e:	e08e      	b.n	800e17e <Shortest_Run_Judge+0x6ae>
	  			  }
	  			  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e060:	4b4b      	ldr	r3, [pc, #300]	; (800e190 <Shortest_Run_Judge+0x6c0>)
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	4618      	mov	r0, r3
 800e066:	4b4b      	ldr	r3, [pc, #300]	; (800e194 <Shortest_Run_Judge+0x6c4>)
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	4619      	mov	r1, r3
 800e06c:	4a4a      	ldr	r2, [pc, #296]	; (800e198 <Shortest_Run_Judge+0x6c8>)
 800e06e:	0103      	lsls	r3, r0, #4
 800e070:	440b      	add	r3, r1
 800e072:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e076:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d127      	bne.n	800e0d0 <Shortest_Run_Judge+0x600>
 800e080:	4b43      	ldr	r3, [pc, #268]	; (800e190 <Shortest_Run_Judge+0x6c0>)
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	461a      	mov	r2, r3
 800e086:	4b43      	ldr	r3, [pc, #268]	; (800e194 <Shortest_Run_Judge+0x6c4>)
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	3b01      	subs	r3, #1
 800e08c:	4943      	ldr	r1, [pc, #268]	; (800e19c <Shortest_Run_Judge+0x6cc>)
 800e08e:	0112      	lsls	r2, r2, #4
 800e090:	440a      	add	r2, r1
 800e092:	4413      	add	r3, r2
 800e094:	781a      	ldrb	r2, [r3, #0]
 800e096:	4b3e      	ldr	r3, [pc, #248]	; (800e190 <Shortest_Run_Judge+0x6c0>)
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	461c      	mov	r4, r3
 800e09c:	4b3d      	ldr	r3, [pc, #244]	; (800e194 <Shortest_Run_Judge+0x6c4>)
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	493e      	ldr	r1, [pc, #248]	; (800e19c <Shortest_Run_Judge+0x6cc>)
 800e0a4:	0123      	lsls	r3, r4, #4
 800e0a6:	440b      	add	r3, r1
 800e0a8:	4403      	add	r3, r0
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d20f      	bcs.n	800e0d0 <Shortest_Run_Judge+0x600>
 800e0b0:	4b38      	ldr	r3, [pc, #224]	; (800e194 <Shortest_Run_Judge+0x6c4>)
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d00b      	beq.n	800e0d0 <Shortest_Run_Judge+0x600>
	  				  //左�?
	  				  L_turn_select();
 800e0b8:	f7fd fd16 	bl	800bae8 <L_turn_select>
	  		       	  my_direction = south;
 800e0bc:	4b38      	ldr	r3, [pc, #224]	; (800e1a0 <Shortest_Run_Judge+0x6d0>)
 800e0be:	2202      	movs	r2, #2
 800e0c0:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800e0c2:	4b34      	ldr	r3, [pc, #208]	; (800e194 <Shortest_Run_Judge+0x6c4>)
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	3b01      	subs	r3, #1
 800e0c8:	b2da      	uxtb	r2, r3
 800e0ca:	4b32      	ldr	r3, [pc, #200]	; (800e194 <Shortest_Run_Judge+0x6c4>)
 800e0cc:	701a      	strb	r2, [r3, #0]
 800e0ce:	e056      	b.n	800e17e <Shortest_Run_Judge+0x6ae>
	  			  }
	  			  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800e0d0:	4b2f      	ldr	r3, [pc, #188]	; (800e190 <Shortest_Run_Judge+0x6c0>)
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	4b2f      	ldr	r3, [pc, #188]	; (800e194 <Shortest_Run_Judge+0x6c4>)
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	4619      	mov	r1, r3
 800e0dc:	4a2e      	ldr	r2, [pc, #184]	; (800e198 <Shortest_Run_Judge+0x6c8>)
 800e0de:	0103      	lsls	r3, r0, #4
 800e0e0:	440b      	add	r3, r1
 800e0e2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e0e6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d127      	bne.n	800e140 <Shortest_Run_Judge+0x670>
 800e0f0:	4b27      	ldr	r3, [pc, #156]	; (800e190 <Shortest_Run_Judge+0x6c0>)
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	4b27      	ldr	r3, [pc, #156]	; (800e194 <Shortest_Run_Judge+0x6c4>)
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	4927      	ldr	r1, [pc, #156]	; (800e19c <Shortest_Run_Judge+0x6cc>)
 800e0fe:	0112      	lsls	r2, r2, #4
 800e100:	440a      	add	r2, r1
 800e102:	4413      	add	r3, r2
 800e104:	781a      	ldrb	r2, [r3, #0]
 800e106:	4b22      	ldr	r3, [pc, #136]	; (800e190 <Shortest_Run_Judge+0x6c0>)
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	461c      	mov	r4, r3
 800e10c:	4b21      	ldr	r3, [pc, #132]	; (800e194 <Shortest_Run_Judge+0x6c4>)
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	4618      	mov	r0, r3
 800e112:	4922      	ldr	r1, [pc, #136]	; (800e19c <Shortest_Run_Judge+0x6cc>)
 800e114:	0123      	lsls	r3, r4, #4
 800e116:	440b      	add	r3, r1
 800e118:	4403      	add	r3, r0
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d20f      	bcs.n	800e140 <Shortest_Run_Judge+0x670>
 800e120:	4b1c      	ldr	r3, [pc, #112]	; (800e194 <Shortest_Run_Judge+0x6c4>)
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	2b0e      	cmp	r3, #14
 800e126:	d80b      	bhi.n	800e140 <Shortest_Run_Judge+0x670>
	  				  //右�?
	  				  R_turn_select();
 800e128:	f7fd fc9a 	bl	800ba60 <R_turn_select>
	  		       	  my_direction = north;
 800e12c:	4b1c      	ldr	r3, [pc, #112]	; (800e1a0 <Shortest_Run_Judge+0x6d0>)
 800e12e:	2200      	movs	r2, #0
 800e130:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800e132:	4b18      	ldr	r3, [pc, #96]	; (800e194 <Shortest_Run_Judge+0x6c4>)
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	3301      	adds	r3, #1
 800e138:	b2da      	uxtb	r2, r3
 800e13a:	4b16      	ldr	r3, [pc, #88]	; (800e194 <Shortest_Run_Judge+0x6c4>)
 800e13c:	701a      	strb	r2, [r3, #0]
 800e13e:	e01e      	b.n	800e17e <Shortest_Run_Judge+0x6ae>
	  			  }
	  			  else {
	  				  //後東
	  		          Decelerate();
 800e140:	f7fc fdbe 	bl	800acc0 <Decelerate>
	  		          wait(0.3);;
 800e144:	ed9f 0b10 	vldr	d0, [pc, #64]	; 800e188 <Shortest_Run_Judge+0x6b8>
 800e148:	f7fc fc8a 	bl	800aa60 <wait>

	  		          if(mode.execution == 1)
 800e14c:	4b15      	ldr	r3, [pc, #84]	; (800e1a4 <Shortest_Run_Judge+0x6d4>)
 800e14e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e152:	2b01      	cmp	r3, #1
 800e154:	d101      	bne.n	800e15a <Shortest_Run_Judge+0x68a>
	  		        	  Motor_PWM_Stop();
 800e156:	f7fb ff47 	bl	8009fe8 <Motor_PWM_Stop>

	  		  	      rotate180();
 800e15a:	f7fd fb9f 	bl	800b89c <rotate180>
	  		  	      wait(0.3);;
 800e15e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 800e188 <Shortest_Run_Judge+0x6b8>
 800e162:	f7fc fc7d 	bl	800aa60 <wait>
	  		       	  Accelerate();
 800e166:	f7fc fcfb 	bl	800ab60 <Accelerate>

	  		       	  my_direction = east;
 800e16a:	4b0d      	ldr	r3, [pc, #52]	; (800e1a0 <Shortest_Run_Judge+0x6d0>)
 800e16c:	2201      	movs	r2, #1
 800e16e:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800e170:	4b07      	ldr	r3, [pc, #28]	; (800e190 <Shortest_Run_Judge+0x6c0>)
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	3301      	adds	r3, #1
 800e176:	b2da      	uxtb	r2, r3
 800e178:	4b05      	ldr	r3, [pc, #20]	; (800e190 <Shortest_Run_Judge+0x6c0>)
 800e17a:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800e17c:	e001      	b.n	800e182 <Shortest_Run_Judge+0x6b2>
 800e17e:	e000      	b.n	800e182 <Shortest_Run_Judge+0x6b2>

	  		  default:
	  			  break;
 800e180:	bf00      	nop
	  		  }//swtich end
}
 800e182:	bf00      	nop
 800e184:	bd98      	pop	{r3, r4, r7, pc}
 800e186:	bf00      	nop
 800e188:	33333333 	.word	0x33333333
 800e18c:	3fd33333 	.word	0x3fd33333
 800e190:	2000030c 	.word	0x2000030c
 800e194:	2000030d 	.word	0x2000030d
 800e198:	20004fb4 	.word	0x20004fb4
 800e19c:	20004a58 	.word	0x20004a58
 800e1a0:	20004492 	.word	0x20004492
 800e1a4:	20000074 	.word	0x20000074

0800e1a8 <Shortest_Run>:
void Shortest_Run(){
 800e1a8:	b598      	push	{r3, r4, r7, lr}
 800e1aa:	af00      	add	r7, sp, #0

	//ROMの迷路�?ータをRAMに入れる
	Map_Load();
 800e1ac:	f7ff fb66 	bl	800d87c <Map_Load>

	//座標�?�初期�?
	x = y = 0;
 800e1b0:	4b35      	ldr	r3, [pc, #212]	; (800e288 <Shortest_Run+0xe0>)
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	701a      	strb	r2, [r3, #0]
 800e1b6:	4b34      	ldr	r3, [pc, #208]	; (800e288 <Shortest_Run+0xe0>)
 800e1b8:	781a      	ldrb	r2, [r3, #0]
 800e1ba:	4b34      	ldr	r3, [pc, #208]	; (800e28c <Shortest_Run+0xe4>)
 800e1bc:	701a      	strb	r2, [r3, #0]
	//方向�?�初期�?
	my_direction=north;
 800e1be:	4b34      	ldr	r3, [pc, #208]	; (800e290 <Shortest_Run+0xe8>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	701a      	strb	r2, [r3, #0]

	//�?初�?�直進
	Start_Accel();
 800e1c4:	f7fc fc74 	bl	800aab0 <Start_Accel>

	x = 0;
 800e1c8:	4b30      	ldr	r3, [pc, #192]	; (800e28c <Shortest_Run+0xe4>)
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800e1ce:	4b2e      	ldr	r3, [pc, #184]	; (800e288 <Shortest_Run+0xe0>)
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	b2da      	uxtb	r2, r3
 800e1d6:	4b2c      	ldr	r3, [pc, #176]	; (800e288 <Shortest_Run+0xe0>)
 800e1d8:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800e1da:	e001      	b.n	800e1e0 <Shortest_Run+0x38>
		Shortest_Run_Judge();
 800e1dc:	f7ff fc78 	bl	800dad0 <Shortest_Run_Judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800e1e0:	4b2a      	ldr	r3, [pc, #168]	; (800e28c <Shortest_Run+0xe4>)
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	2b05      	cmp	r3, #5
 800e1e6:	d9f9      	bls.n	800e1dc <Shortest_Run+0x34>
 800e1e8:	4b28      	ldr	r3, [pc, #160]	; (800e28c <Shortest_Run+0xe4>)
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	2b07      	cmp	r3, #7
 800e1ee:	d8f5      	bhi.n	800e1dc <Shortest_Run+0x34>
 800e1f0:	4b25      	ldr	r3, [pc, #148]	; (800e288 <Shortest_Run+0xe0>)
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	2b08      	cmp	r3, #8
 800e1f6:	d9f1      	bls.n	800e1dc <Shortest_Run+0x34>
 800e1f8:	4b23      	ldr	r3, [pc, #140]	; (800e288 <Shortest_Run+0xe0>)
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	2b0a      	cmp	r3, #10
 800e1fe:	d8ed      	bhi.n	800e1dc <Shortest_Run+0x34>

	}
	goal_time[0] = timer*T1;
 800e200:	4b24      	ldr	r3, [pc, #144]	; (800e294 <Shortest_Run+0xec>)
 800e202:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e206:	a31e      	add	r3, pc, #120	; (adr r3, 800e280 <Shortest_Run+0xd8>)
 800e208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20c:	f7fa f92c 	bl	8008468 <__aeabi_dmul>
 800e210:	4603      	mov	r3, r0
 800e212:	460c      	mov	r4, r1
 800e214:	4a20      	ldr	r2, [pc, #128]	; (800e298 <Shortest_Run+0xf0>)
 800e216:	e9c2 3400 	strd	r3, r4, [r2]
	goal_time[1] = self_timer;
 800e21a:	4b20      	ldr	r3, [pc, #128]	; (800e29c <Shortest_Run+0xf4>)
 800e21c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e220:	4a1d      	ldr	r2, [pc, #116]	; (800e298 <Shortest_Run+0xf0>)
 800e222:	e9c2 3402 	strd	r3, r4, [r2, #8]
	      Decelerate();
 800e226:	f7fc fd4b 	bl	800acc0 <Decelerate>
	      //wall_set();
	      Motor_PWM_Stop();
 800e22a:	f7fb fedd 	bl	8009fe8 <Motor_PWM_Stop>
	      mode.LED = 7;
 800e22e:	4b1c      	ldr	r3, [pc, #112]	; (800e2a0 <Shortest_Run+0xf8>)
 800e230:	2207      	movs	r2, #7
 800e232:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800e234:	f7fc f94e 	bl	800a4d4 <LED_Change>
	      HAL_Delay(1000);
 800e238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e23c:	f002 f8c6 	bl	80103cc <HAL_Delay>
	      mapcopy();
 800e240:	f7fb fc9a 	bl	8009b78 <mapcopy>
	      Flash_store();
 800e244:	f7fb fe0c 	bl	8009e60 <Flash_store>
	      mode.LED = 0;
 800e248:	4b15      	ldr	r3, [pc, #84]	; (800e2a0 <Shortest_Run+0xf8>)
 800e24a:	2200      	movs	r2, #0
 800e24c:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800e24e:	f7fc f941 	bl	800a4d4 <LED_Change>
	      while(1){
	    	  printf("小数のほう : %lf \r\n",goal_time[0]);
 800e252:	4b11      	ldr	r3, [pc, #68]	; (800e298 <Shortest_Run+0xf0>)
 800e254:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e258:	461a      	mov	r2, r3
 800e25a:	4623      	mov	r3, r4
 800e25c:	4811      	ldr	r0, [pc, #68]	; (800e2a4 <Shortest_Run+0xfc>)
 800e25e:	f007 ff3f 	bl	80160e0 <iprintf>
	    	  printf("整数のほう : %lf \r\n",goal_time[1]);
 800e262:	4b0d      	ldr	r3, [pc, #52]	; (800e298 <Shortest_Run+0xf0>)
 800e264:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800e268:	461a      	mov	r2, r3
 800e26a:	4623      	mov	r3, r4
 800e26c:	480e      	ldr	r0, [pc, #56]	; (800e2a8 <Shortest_Run+0x100>)
 800e26e:	f007 ff37 	bl	80160e0 <iprintf>
	    	  printf("\r\n");
 800e272:	480e      	ldr	r0, [pc, #56]	; (800e2ac <Shortest_Run+0x104>)
 800e274:	f007 ffa8 	bl	80161c8 <puts>
	    	  printf("小数のほう : %lf \r\n",goal_time[0]);
 800e278:	e7eb      	b.n	800e252 <Shortest_Run+0xaa>
 800e27a:	bf00      	nop
 800e27c:	f3af 8000 	nop.w
 800e280:	d2f1a9fc 	.word	0xd2f1a9fc
 800e284:	3f50624d 	.word	0x3f50624d
 800e288:	2000030d 	.word	0x2000030d
 800e28c:	2000030c 	.word	0x2000030c
 800e290:	20004492 	.word	0x20004492
 800e294:	200002e8 	.word	0x200002e8
 800e298:	20004b60 	.word	0x20004b60
 800e29c:	200002e0 	.word	0x200002e0
 800e2a0:	20000074 	.word	0x20000074
 800e2a4:	0801804c 	.word	0x0801804c
 800e2a8:	08018068 	.word	0x08018068
 800e2ac:	08017f48 	.word	0x08017f48

0800e2b0 <HAL_ADC_ConvCpltCallback>:
	      }
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* Adchandle) {
 800e2b0:	b480      	push	{r7}
 800e2b2:	b083      	sub	sp, #12
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]

}
 800e2b8:	bf00      	nop
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr
 800e2c4:	0000      	movs	r0, r0
	...

0800e2c8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  // 割り込み0.05ms 20kHz
{
 800e2c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e2cc:	ed2d 8b02 	vpush	{d8}
 800e2d0:	b082      	sub	sp, #8
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
	//static double angular_velo=CURVE_SPEED*2/90;
	//static int k=0;
	static int k=0;
  if(htim == &htim1){
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	4ac7      	ldr	r2, [pc, #796]	; (800e5f8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	f040 84e0 	bne.w	800eca0 <HAL_TIM_PeriodElapsedCallback+0x9d8>
	  elapsed_time += T1;
 800e2e0:	4bc6      	ldr	r3, [pc, #792]	; (800e5fc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800e2e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e2e6:	a3c0      	add	r3, pc, #768	; (adr r3, 800e5e8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800e2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ec:	f7f9 ff06 	bl	80080fc <__adddf3>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	460c      	mov	r4, r1
 800e2f4:	4ac1      	ldr	r2, [pc, #772]	; (800e5fc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800e2f6:	e9c2 3400 	strd	r3, r4, [r2]
	  switch(mode.interrupt){
 800e2fa:	4bc1      	ldr	r3, [pc, #772]	; (800e600 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800e2fc:	7a1b      	ldrb	r3, [r3, #8]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d004      	beq.n	800e30c <HAL_TIM_PeriodElapsedCallback+0x44>
 800e302:	2b01      	cmp	r3, #1
 800e304:	f000 83eb 	beq.w	800eade <HAL_TIM_PeriodElapsedCallback+0x816>
			}
			//モータ出力更新
			Motor_Switch(L_motor,R_motor);
			break;
		default:
			break;
 800e308:	f000 bccb 	b.w	800eca2 <HAL_TIM_PeriodElapsedCallback+0x9da>
      	EN3_L.count = TIM3 -> CNT;
 800e30c:	4bbd      	ldr	r3, [pc, #756]	; (800e604 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800e30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e310:	461a      	mov	r2, r3
 800e312:	4bbd      	ldr	r3, [pc, #756]	; (800e608 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800e314:	601a      	str	r2, [r3, #0]
	    EN4_R.count = TIM4 -> CNT;
 800e316:	4bbd      	ldr	r3, [pc, #756]	; (800e60c <HAL_TIM_PeriodElapsedCallback+0x344>)
 800e318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e31a:	461a      	mov	r2, r3
 800e31c:	4bbc      	ldr	r3, [pc, #752]	; (800e610 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800e31e:	601a      	str	r2, [r3, #0]
	    EN3_L.count = -(EN3_L.count - (30000-1));
 800e320:	4bb9      	ldr	r3, [pc, #740]	; (800e608 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800e328:	332f      	adds	r3, #47	; 0x2f
 800e32a:	4ab7      	ldr	r2, [pc, #732]	; (800e608 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800e32c:	6013      	str	r3, [r2, #0]
	    EN4_R.count = -(EN4_R.count - (30000-1));
 800e32e:	4bb8      	ldr	r3, [pc, #736]	; (800e610 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800e336:	332f      	adds	r3, #47	; 0x2f
 800e338:	4ab5      	ldr	r2, [pc, #724]	; (800e610 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800e33a:	6013      	str	r3, [r2, #0]
	    mode.enc = Encoder_Count(mode.enc);
 800e33c:	4bb0      	ldr	r3, [pc, #704]	; (800e600 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800e33e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800e342:	b21b      	sxth	r3, r3
 800e344:	4618      	mov	r0, r3
 800e346:	f7fc fb3d 	bl	800a9c4 <Encoder_Count>
 800e34a:	4603      	mov	r3, r0
 800e34c:	b25a      	sxtb	r2, r3
 800e34e:	4bac      	ldr	r3, [pc, #688]	; (800e600 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800e350:	70da      	strb	r2, [r3, #3]
	    All_Pulse_anytime += EN4_R.count + EN3_L.count;
 800e352:	4baf      	ldr	r3, [pc, #700]	; (800e610 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	4bac      	ldr	r3, [pc, #688]	; (800e608 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	441a      	add	r2, r3
 800e35c:	4bad      	ldr	r3, [pc, #692]	; (800e614 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4413      	add	r3, r2
 800e362:	4aac      	ldr	r2, [pc, #688]	; (800e614 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800e364:	6013      	str	r3, [r2, #0]
	    Encoder_Reset();
 800e366:	f7fc fb19 	bl	800a99c <Encoder_Reset>
	    L_velocity = Velocity_Get( (float)EN3_L.count , T1 );
 800e36a:	4ba7      	ldr	r3, [pc, #668]	; (800e608 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	ee07 3a90 	vmov	s15, r3
 800e372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e376:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800e618 <HAL_TIM_PeriodElapsedCallback+0x350>
 800e37a:	eeb0 0a67 	vmov.f32	s0, s15
 800e37e:	f7fc fae5 	bl	800a94c <Velocity_Get>
 800e382:	eef0 7a40 	vmov.f32	s15, s0
 800e386:	4ba5      	ldr	r3, [pc, #660]	; (800e61c <HAL_TIM_PeriodElapsedCallback+0x354>)
 800e388:	edc3 7a00 	vstr	s15, [r3]
		R_velocity = Velocity_Get( (float)EN4_R.count , T1 );
 800e38c:	4ba0      	ldr	r3, [pc, #640]	; (800e610 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	ee07 3a90 	vmov	s15, r3
 800e394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e398:	eddf 0a9f 	vldr	s1, [pc, #636]	; 800e618 <HAL_TIM_PeriodElapsedCallback+0x350>
 800e39c:	eeb0 0a67 	vmov.f32	s0, s15
 800e3a0:	f7fc fad4 	bl	800a94c <Velocity_Get>
 800e3a4:	eef0 7a40 	vmov.f32	s15, s0
 800e3a8:	4b9d      	ldr	r3, [pc, #628]	; (800e620 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800e3aa:	edc3 7a00 	vstr	s15, [r3]
	    Body_velocity = (L_velocity + R_velocity) / 2; // (進んだパルス * パルスあたりに
 800e3ae:	4b9b      	ldr	r3, [pc, #620]	; (800e61c <HAL_TIM_PeriodElapsedCallback+0x354>)
 800e3b0:	ed93 7a00 	vldr	s14, [r3]
 800e3b4:	4b9a      	ldr	r3, [pc, #616]	; (800e620 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800e3b6:	edd3 7a00 	vldr	s15, [r3]
 800e3ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e3be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e3c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e3c6:	4b97      	ldr	r3, [pc, #604]	; (800e624 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800e3c8:	edc3 7a00 	vstr	s15, [r3]
	    imu_data = IMU_Get_Data();
 800e3cc:	f7fb fe34 	bl	800a038 <IMU_Get_Data>
 800e3d0:	eeb0 7a40 	vmov.f32	s14, s0
 800e3d4:	eef0 7a60 	vmov.f32	s15, s1
 800e3d8:	4b93      	ldr	r3, [pc, #588]	; (800e628 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800e3da:	ed83 7b00 	vstr	d7, [r3]
	    switch(mode.control){
 800e3de:	4b88      	ldr	r3, [pc, #544]	; (800e600 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800e3e0:	795b      	ldrb	r3, [r3, #5]
 800e3e2:	2b06      	cmp	r3, #6
 800e3e4:	f200 81af 	bhi.w	800e746 <HAL_TIM_PeriodElapsedCallback+0x47e>
 800e3e8:	a201      	add	r2, pc, #4	; (adr r2, 800e3f0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800e3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ee:	bf00      	nop
 800e3f0:	0800e40d 	.word	0x0800e40d
 800e3f4:	0800e48b 	.word	0x0800e48b
 800e3f8:	0800e509 	.word	0x0800e509
 800e3fc:	0800e587 	.word	0x0800e587
 800e400:	0800e64d 	.word	0x0800e64d
 800e404:	0800e6c5 	.word	0x0800e6c5
 800e408:	0800e6d1 	.word	0x0800e6d1
	    	   Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
 800e40c:	4b87      	ldr	r3, [pc, #540]	; (800e62c <HAL_TIM_PeriodElapsedCallback+0x364>)
 800e40e:	edd3 7a00 	vldr	s15, [r3]
 800e412:	4b87      	ldr	r3, [pc, #540]	; (800e630 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800e414:	ed93 7a00 	vldr	s14, [r3]
 800e418:	4b86      	ldr	r3, [pc, #536]	; (800e634 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800e41a:	edd3 6a00 	vldr	s13, [r3]
 800e41e:	4b85      	ldr	r3, [pc, #532]	; (800e634 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800e420:	ed93 6a01 	vldr	s12, [r3, #4]
 800e424:	4b83      	ldr	r3, [pc, #524]	; (800e634 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800e426:	edd3 5a02 	vldr	s11, [r3, #8]
 800e42a:	eef0 2a65 	vmov.f32	s5, s11
 800e42e:	eeb0 2a46 	vmov.f32	s4, s12
 800e432:	eef0 1a66 	vmov.f32	s3, s13
 800e436:	ed9f 1a80 	vldr	s2, [pc, #512]	; 800e638 <HAL_TIM_PeriodElapsedCallback+0x370>
 800e43a:	eef0 0a47 	vmov.f32	s1, s14
 800e43e:	eeb0 0a67 	vmov.f32	s0, s15
 800e442:	f7fa fcb9 	bl	8008db8 <Side_Wall_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, 0 );
 800e446:	4b78      	ldr	r3, [pc, #480]	; (800e628 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800e448:	ed93 8b00 	vldr	d8, [r3]
 800e44c:	4b7b      	ldr	r3, [pc, #492]	; (800e63c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4618      	mov	r0, r3
 800e452:	f7f9 ffb1 	bl	80083b8 <__aeabi_f2d>
 800e456:	4604      	mov	r4, r0
 800e458:	460d      	mov	r5, r1
 800e45a:	4b78      	ldr	r3, [pc, #480]	; (800e63c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	4618      	mov	r0, r3
 800e460:	f7f9 ffaa 	bl	80083b8 <__aeabi_f2d>
 800e464:	4602      	mov	r2, r0
 800e466:	460b      	mov	r3, r1
 800e468:	ed9f 5b61 	vldr	d5, [pc, #388]	; 800e5f0 <HAL_TIM_PeriodElapsedCallback+0x328>
 800e46c:	ec43 2b14 	vmov	d4, r2, r3
 800e470:	ec45 4b13 	vmov	d3, r4, r5
 800e474:	ed9f 2b5c 	vldr	d2, [pc, #368]	; 800e5e8 <HAL_TIM_PeriodElapsedCallback+0x320>
 800e478:	eeb0 1a48 	vmov.f32	s2, s16
 800e47c:	eef0 1a68 	vmov.f32	s3, s17
 800e480:	ed9f 0b5b 	vldr	d0, [pc, #364]	; 800e5f0 <HAL_TIM_PeriodElapsedCallback+0x328>
 800e484:	f7fb fe9c 	bl	800a1c0 <IMU_Control>
	    	   break;
 800e488:	e15e      	b.n	800e748 <HAL_TIM_PeriodElapsedCallback+0x480>
	    	   Left_Wall_Control(distance_wall_left, fl_average,T8, Wall.KP, Wall.KI, Wall.KD);
 800e48a:	4b6d      	ldr	r3, [pc, #436]	; (800e640 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800e48c:	edd3 7a00 	vldr	s15, [r3]
 800e490:	4b67      	ldr	r3, [pc, #412]	; (800e630 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800e492:	ed93 7a00 	vldr	s14, [r3]
 800e496:	4b67      	ldr	r3, [pc, #412]	; (800e634 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800e498:	edd3 6a00 	vldr	s13, [r3]
 800e49c:	4b65      	ldr	r3, [pc, #404]	; (800e634 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800e49e:	ed93 6a01 	vldr	s12, [r3, #4]
 800e4a2:	4b64      	ldr	r3, [pc, #400]	; (800e634 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800e4a4:	edd3 5a02 	vldr	s11, [r3, #8]
 800e4a8:	eef0 2a65 	vmov.f32	s5, s11
 800e4ac:	eeb0 2a46 	vmov.f32	s4, s12
 800e4b0:	eef0 1a66 	vmov.f32	s3, s13
 800e4b4:	ed9f 1a60 	vldr	s2, [pc, #384]	; 800e638 <HAL_TIM_PeriodElapsedCallback+0x370>
 800e4b8:	eef0 0a47 	vmov.f32	s1, s14
 800e4bc:	eeb0 0a67 	vmov.f32	s0, s15
 800e4c0:	f7fa fd32 	bl	8008f28 <Left_Wall_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, 0 );
 800e4c4:	4b58      	ldr	r3, [pc, #352]	; (800e628 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800e4c6:	ed93 8b00 	vldr	d8, [r3]
 800e4ca:	4b5c      	ldr	r3, [pc, #368]	; (800e63c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7f9 ff72 	bl	80083b8 <__aeabi_f2d>
 800e4d4:	4604      	mov	r4, r0
 800e4d6:	460d      	mov	r5, r1
 800e4d8:	4b58      	ldr	r3, [pc, #352]	; (800e63c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7f9 ff6b 	bl	80083b8 <__aeabi_f2d>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	ed9f 5b42 	vldr	d5, [pc, #264]	; 800e5f0 <HAL_TIM_PeriodElapsedCallback+0x328>
 800e4ea:	ec43 2b14 	vmov	d4, r2, r3
 800e4ee:	ec45 4b13 	vmov	d3, r4, r5
 800e4f2:	ed9f 2b3d 	vldr	d2, [pc, #244]	; 800e5e8 <HAL_TIM_PeriodElapsedCallback+0x320>
 800e4f6:	eeb0 1a48 	vmov.f32	s2, s16
 800e4fa:	eef0 1a68 	vmov.f32	s3, s17
 800e4fe:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 800e5f0 <HAL_TIM_PeriodElapsedCallback+0x328>
 800e502:	f7fb fe5d 	bl	800a1c0 <IMU_Control>
	    	   break;
 800e506:	e11f      	b.n	800e748 <HAL_TIM_PeriodElapsedCallback+0x480>
	    	   Right_Wall_Control(distance_wall_right, fr_average,T8, Wall.KP, Wall.KI, Wall.KD);
 800e508:	4b4e      	ldr	r3, [pc, #312]	; (800e644 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800e50a:	edd3 7a00 	vldr	s15, [r3]
 800e50e:	4b47      	ldr	r3, [pc, #284]	; (800e62c <HAL_TIM_PeriodElapsedCallback+0x364>)
 800e510:	ed93 7a00 	vldr	s14, [r3]
 800e514:	4b47      	ldr	r3, [pc, #284]	; (800e634 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800e516:	edd3 6a00 	vldr	s13, [r3]
 800e51a:	4b46      	ldr	r3, [pc, #280]	; (800e634 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800e51c:	ed93 6a01 	vldr	s12, [r3, #4]
 800e520:	4b44      	ldr	r3, [pc, #272]	; (800e634 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800e522:	edd3 5a02 	vldr	s11, [r3, #8]
 800e526:	eef0 2a65 	vmov.f32	s5, s11
 800e52a:	eeb0 2a46 	vmov.f32	s4, s12
 800e52e:	eef0 1a66 	vmov.f32	s3, s13
 800e532:	ed9f 1a41 	vldr	s2, [pc, #260]	; 800e638 <HAL_TIM_PeriodElapsedCallback+0x370>
 800e536:	eef0 0a47 	vmov.f32	s1, s14
 800e53a:	eeb0 0a67 	vmov.f32	s0, s15
 800e53e:	f7fa fdb7 	bl	80090b0 <Right_Wall_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, 0 );
 800e542:	4b39      	ldr	r3, [pc, #228]	; (800e628 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800e544:	ed93 8b00 	vldr	d8, [r3]
 800e548:	4b3c      	ldr	r3, [pc, #240]	; (800e63c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7f9 ff33 	bl	80083b8 <__aeabi_f2d>
 800e552:	4604      	mov	r4, r0
 800e554:	460d      	mov	r5, r1
 800e556:	4b39      	ldr	r3, [pc, #228]	; (800e63c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7f9 ff2c 	bl	80083b8 <__aeabi_f2d>
 800e560:	4602      	mov	r2, r0
 800e562:	460b      	mov	r3, r1
 800e564:	ed9f 5b22 	vldr	d5, [pc, #136]	; 800e5f0 <HAL_TIM_PeriodElapsedCallback+0x328>
 800e568:	ec43 2b14 	vmov	d4, r2, r3
 800e56c:	ec45 4b13 	vmov	d3, r4, r5
 800e570:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 800e5e8 <HAL_TIM_PeriodElapsedCallback+0x320>
 800e574:	eeb0 1a48 	vmov.f32	s2, s16
 800e578:	eef0 1a68 	vmov.f32	s3, s17
 800e57c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e5f0 <HAL_TIM_PeriodElapsedCallback+0x328>
 800e580:	f7fb fe1e 	bl	800a1c0 <IMU_Control>
	    	   break;
 800e584:	e0e0      	b.n	800e748 <HAL_TIM_PeriodElapsedCallback+0x480>
	    	   IMU_Control(Target_Rad_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800e586:	4b30      	ldr	r3, [pc, #192]	; (800e648 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7f9 ff14 	bl	80083b8 <__aeabi_f2d>
 800e590:	4604      	mov	r4, r0
 800e592:	460d      	mov	r5, r1
 800e594:	4b24      	ldr	r3, [pc, #144]	; (800e628 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800e596:	ed93 8b00 	vldr	d8, [r3]
 800e59a:	4b28      	ldr	r3, [pc, #160]	; (800e63c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f7f9 ff0a 	bl	80083b8 <__aeabi_f2d>
 800e5a4:	4680      	mov	r8, r0
 800e5a6:	4689      	mov	r9, r1
 800e5a8:	4b24      	ldr	r3, [pc, #144]	; (800e63c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7f9 ff03 	bl	80083b8 <__aeabi_f2d>
 800e5b2:	4682      	mov	sl, r0
 800e5b4:	468b      	mov	fp, r1
 800e5b6:	4b21      	ldr	r3, [pc, #132]	; (800e63c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800e5b8:	689b      	ldr	r3, [r3, #8]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7f9 fefc 	bl	80083b8 <__aeabi_f2d>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	ec43 2b15 	vmov	d5, r2, r3
 800e5c8:	ec4b ab14 	vmov	d4, sl, fp
 800e5cc:	ec49 8b13 	vmov	d3, r8, r9
 800e5d0:	ed9f 2b05 	vldr	d2, [pc, #20]	; 800e5e8 <HAL_TIM_PeriodElapsedCallback+0x320>
 800e5d4:	eeb0 1a48 	vmov.f32	s2, s16
 800e5d8:	eef0 1a68 	vmov.f32	s3, s17
 800e5dc:	ec45 4b10 	vmov	d0, r4, r5
 800e5e0:	f7fb fdee 	bl	800a1c0 <IMU_Control>
	    	   break;
 800e5e4:	e0b0      	b.n	800e748 <HAL_TIM_PeriodElapsedCallback+0x480>
 800e5e6:	bf00      	nop
 800e5e8:	d2f1a9fc 	.word	0xd2f1a9fc
 800e5ec:	3f50624d 	.word	0x3f50624d
	...
 800e5f8:	20004b88 	.word	0x20004b88
 800e5fc:	200002f0 	.word	0x200002f0
 800e600:	20000074 	.word	0x20000074
 800e604:	40000400 	.word	0x40000400
 800e608:	20000050 	.word	0x20000050
 800e60c:	40000800 	.word	0x40000800
 800e610:	2000005c 	.word	0x2000005c
 800e614:	200002fc 	.word	0x200002fc
 800e618:	3a83126f 	.word	0x3a83126f
 800e61c:	20004398 	.word	0x20004398
 800e620:	200043a4 	.word	0x200043a4
 800e624:	20004400 	.word	0x20004400
 800e628:	200002d0 	.word	0x200002d0
 800e62c:	20004fb0 	.word	0x20004fb0
 800e630:	200043bc 	.word	0x200043bc
 800e634:	2000002c 	.word	0x2000002c
 800e638:	3851b717 	.word	0x3851b717
 800e63c:	20000044 	.word	0x20000044
 800e640:	20000024 	.word	0x20000024
 800e644:	20000020 	.word	0x20000020
 800e648:	200002bc 	.word	0x200002bc
	    	   Enc_Velo_Control(T1, velocity.KP, velocity.KI, velocity.KD);
 800e64c:	4bac      	ldr	r3, [pc, #688]	; (800e900 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800e64e:	edd3 7a00 	vldr	s15, [r3]
 800e652:	4bab      	ldr	r3, [pc, #684]	; (800e900 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800e654:	ed93 7a01 	vldr	s14, [r3, #4]
 800e658:	4ba9      	ldr	r3, [pc, #676]	; (800e900 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800e65a:	edd3 6a02 	vldr	s13, [r3, #8]
 800e65e:	eef0 1a66 	vmov.f32	s3, s13
 800e662:	eeb0 1a47 	vmov.f32	s2, s14
 800e666:	eef0 0a67 	vmov.f32	s1, s15
 800e66a:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 800e904 <HAL_TIM_PeriodElapsedCallback+0x63c>
 800e66e:	f7fa ff95 	bl	800959c <Enc_Velo_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800e672:	4ba5      	ldr	r3, [pc, #660]	; (800e908 <HAL_TIM_PeriodElapsedCallback+0x640>)
 800e674:	ed93 8b00 	vldr	d8, [r3]
 800e678:	4ba4      	ldr	r3, [pc, #656]	; (800e90c <HAL_TIM_PeriodElapsedCallback+0x644>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7f9 fe9b 	bl	80083b8 <__aeabi_f2d>
 800e682:	4604      	mov	r4, r0
 800e684:	460d      	mov	r5, r1
 800e686:	4ba1      	ldr	r3, [pc, #644]	; (800e90c <HAL_TIM_PeriodElapsedCallback+0x644>)
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7f9 fe94 	bl	80083b8 <__aeabi_f2d>
 800e690:	4680      	mov	r8, r0
 800e692:	4689      	mov	r9, r1
 800e694:	4b9d      	ldr	r3, [pc, #628]	; (800e90c <HAL_TIM_PeriodElapsedCallback+0x644>)
 800e696:	689b      	ldr	r3, [r3, #8]
 800e698:	4618      	mov	r0, r3
 800e69a:	f7f9 fe8d 	bl	80083b8 <__aeabi_f2d>
 800e69e:	4602      	mov	r2, r0
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	ec43 2b15 	vmov	d5, r2, r3
 800e6a6:	ec49 8b14 	vmov	d4, r8, r9
 800e6aa:	ec45 4b13 	vmov	d3, r4, r5
 800e6ae:	ed9f 2b8e 	vldr	d2, [pc, #568]	; 800e8e8 <HAL_TIM_PeriodElapsedCallback+0x620>
 800e6b2:	eeb0 1a48 	vmov.f32	s2, s16
 800e6b6:	eef0 1a68 	vmov.f32	s3, s17
 800e6ba:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 800e8f0 <HAL_TIM_PeriodElapsedCallback+0x628>
 800e6be:	f7fb fd7f 	bl	800a1c0 <IMU_Control>
	    	   break;
 800e6c2:	e041      	b.n	800e748 <HAL_TIM_PeriodElapsedCallback+0x480>
	    	   mode.imu = 0;
 800e6c4:	4a92      	ldr	r2, [pc, #584]	; (800e910 <HAL_TIM_PeriodElapsedCallback+0x648>)
 800e6c6:	7993      	ldrb	r3, [r2, #6]
 800e6c8:	f36f 0300 	bfc	r3, #0, #1
 800e6cc:	7193      	strb	r3, [r2, #6]
	    	   break;
 800e6ce:	e03b      	b.n	800e748 <HAL_TIM_PeriodElapsedCallback+0x480>
	    	   Right_Velo_Control(Target_R_velo, R_velocity,T1, velocity.KP, velocity.KI, velocity.KD);
 800e6d0:	4b90      	ldr	r3, [pc, #576]	; (800e914 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800e6d2:	edd3 7a00 	vldr	s15, [r3]
 800e6d6:	4b90      	ldr	r3, [pc, #576]	; (800e918 <HAL_TIM_PeriodElapsedCallback+0x650>)
 800e6d8:	ed93 7a00 	vldr	s14, [r3]
 800e6dc:	4b88      	ldr	r3, [pc, #544]	; (800e900 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800e6de:	edd3 6a00 	vldr	s13, [r3]
 800e6e2:	4b87      	ldr	r3, [pc, #540]	; (800e900 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800e6e4:	ed93 6a01 	vldr	s12, [r3, #4]
 800e6e8:	4b85      	ldr	r3, [pc, #532]	; (800e900 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800e6ea:	edd3 5a02 	vldr	s11, [r3, #8]
 800e6ee:	eef0 2a65 	vmov.f32	s5, s11
 800e6f2:	eeb0 2a46 	vmov.f32	s4, s12
 800e6f6:	eef0 1a66 	vmov.f32	s3, s13
 800e6fa:	ed9f 1a82 	vldr	s2, [pc, #520]	; 800e904 <HAL_TIM_PeriodElapsedCallback+0x63c>
 800e6fe:	eef0 0a47 	vmov.f32	s1, s14
 800e702:	eeb0 0a67 	vmov.f32	s0, s15
 800e706:	f7fa fe45 	bl	8009394 <Right_Velo_Control>
	    	   Left_Velo_Control(Target_L_velo, L_velocity,T1, velocity.KP, velocity.KI, velocity.KD);
 800e70a:	4b84      	ldr	r3, [pc, #528]	; (800e91c <HAL_TIM_PeriodElapsedCallback+0x654>)
 800e70c:	edd3 7a00 	vldr	s15, [r3]
 800e710:	4b83      	ldr	r3, [pc, #524]	; (800e920 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800e712:	ed93 7a00 	vldr	s14, [r3]
 800e716:	4b7a      	ldr	r3, [pc, #488]	; (800e900 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800e718:	edd3 6a00 	vldr	s13, [r3]
 800e71c:	4b78      	ldr	r3, [pc, #480]	; (800e900 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800e71e:	ed93 6a01 	vldr	s12, [r3, #4]
 800e722:	4b77      	ldr	r3, [pc, #476]	; (800e900 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800e724:	edd3 5a02 	vldr	s11, [r3, #8]
 800e728:	eef0 2a65 	vmov.f32	s5, s11
 800e72c:	eeb0 2a46 	vmov.f32	s4, s12
 800e730:	eef0 1a66 	vmov.f32	s3, s13
 800e734:	ed9f 1a73 	vldr	s2, [pc, #460]	; 800e904 <HAL_TIM_PeriodElapsedCallback+0x63c>
 800e738:	eef0 0a47 	vmov.f32	s1, s14
 800e73c:	eeb0 0a67 	vmov.f32	s0, s15
 800e740:	f7fa feaa 	bl	8009498 <Left_Velo_Control>
	    	   break;
 800e744:	e000      	b.n	800e748 <HAL_TIM_PeriodElapsedCallback+0x480>
	    	   break;
 800e746:	bf00      	nop
	    if( mode.accel == 1 ){
 800e748:	4b71      	ldr	r3, [pc, #452]	; (800e910 <HAL_TIM_PeriodElapsedCallback+0x648>)
 800e74a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d116      	bne.n	800e780 <HAL_TIM_PeriodElapsedCallback+0x4b8>
		  if(Target_velocity < SEARCH_SPEED){
 800e752:	4b74      	ldr	r3, [pc, #464]	; (800e924 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800e754:	edd3 7a00 	vldr	s15, [r3]
 800e758:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800e928 <HAL_TIM_PeriodElapsedCallback+0x660>
 800e75c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e764:	f140 810d 	bpl.w	800e982 <HAL_TIM_PeriodElapsedCallback+0x6ba>
			Target_velocity += a_start;
 800e768:	4b6e      	ldr	r3, [pc, #440]	; (800e924 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800e76a:	ed93 7a00 	vldr	s14, [r3]
 800e76e:	4b6f      	ldr	r3, [pc, #444]	; (800e92c <HAL_TIM_PeriodElapsedCallback+0x664>)
 800e770:	edd3 7a00 	vldr	s15, [r3]
 800e774:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e778:	4b6a      	ldr	r3, [pc, #424]	; (800e924 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800e77a:	edc3 7a00 	vstr	s15, [r3]
 800e77e:	e100      	b.n	800e982 <HAL_TIM_PeriodElapsedCallback+0x6ba>
	    else if( mode.accel == 2 ){
 800e780:	4b63      	ldr	r3, [pc, #396]	; (800e910 <HAL_TIM_PeriodElapsedCallback+0x648>)
 800e782:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800e786:	2b02      	cmp	r3, #2
 800e788:	d116      	bne.n	800e7b8 <HAL_TIM_PeriodElapsedCallback+0x4f0>
		  if(Target_velocity < SEARCH_SPEED){
 800e78a:	4b66      	ldr	r3, [pc, #408]	; (800e924 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800e78c:	edd3 7a00 	vldr	s15, [r3]
 800e790:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800e928 <HAL_TIM_PeriodElapsedCallback+0x660>
 800e794:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e79c:	f140 80f1 	bpl.w	800e982 <HAL_TIM_PeriodElapsedCallback+0x6ba>
			Target_velocity += a;
 800e7a0:	4b60      	ldr	r3, [pc, #384]	; (800e924 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800e7a2:	ed93 7a00 	vldr	s14, [r3]
 800e7a6:	4b62      	ldr	r3, [pc, #392]	; (800e930 <HAL_TIM_PeriodElapsedCallback+0x668>)
 800e7a8:	edd3 7a00 	vldr	s15, [r3]
 800e7ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e7b0:	4b5c      	ldr	r3, [pc, #368]	; (800e924 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800e7b2:	edc3 7a00 	vstr	s15, [r3]
 800e7b6:	e0e4      	b.n	800e982 <HAL_TIM_PeriodElapsedCallback+0x6ba>
	    else if( mode.accel == 3 ){
 800e7b8:	4b55      	ldr	r3, [pc, #340]	; (800e910 <HAL_TIM_PeriodElapsedCallback+0x648>)
 800e7ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800e7be:	2b03      	cmp	r3, #3
 800e7c0:	d116      	bne.n	800e7f0 <HAL_TIM_PeriodElapsedCallback+0x528>
		  if(Target_velocity > 2){
 800e7c2:	4b58      	ldr	r3, [pc, #352]	; (800e924 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800e7c4:	edd3 7a00 	vldr	s15, [r3]
 800e7c8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e7cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7d4:	f340 80d5 	ble.w	800e982 <HAL_TIM_PeriodElapsedCallback+0x6ba>
			Target_velocity -= a;
 800e7d8:	4b52      	ldr	r3, [pc, #328]	; (800e924 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800e7da:	ed93 7a00 	vldr	s14, [r3]
 800e7de:	4b54      	ldr	r3, [pc, #336]	; (800e930 <HAL_TIM_PeriodElapsedCallback+0x668>)
 800e7e0:	edd3 7a00 	vldr	s15, [r3]
 800e7e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e7e8:	4b4e      	ldr	r3, [pc, #312]	; (800e924 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800e7ea:	edc3 7a00 	vstr	s15, [r3]
 800e7ee:	e0c8      	b.n	800e982 <HAL_TIM_PeriodElapsedCallback+0x6ba>
	    else if( mode.accel == 4 ){ //左に旋回�?�?
 800e7f0:	4b47      	ldr	r3, [pc, #284]	; (800e910 <HAL_TIM_PeriodElapsedCallback+0x648>)
 800e7f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800e7f6:	2b04      	cmp	r3, #4
 800e7f8:	d124      	bne.n	800e844 <HAL_TIM_PeriodElapsedCallback+0x57c>
	      if(Target_R_velo < SEARCH_SPEED * 124.6/90){
 800e7fa:	4b46      	ldr	r3, [pc, #280]	; (800e914 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7f9 fdda 	bl	80083b8 <__aeabi_f2d>
 800e804:	a33c      	add	r3, pc, #240	; (adr r3, 800e8f8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800e806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80a:	f7fa f89f 	bl	800894c <__aeabi_dcmplt>
 800e80e:	4603      	mov	r3, r0
 800e810:	2b00      	cmp	r3, #0
 800e812:	f000 80b6 	beq.w	800e982 <HAL_TIM_PeriodElapsedCallback+0x6ba>
	    	Target_R_velo += a_curve;
 800e816:	4b3f      	ldr	r3, [pc, #252]	; (800e914 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800e818:	ed93 7a00 	vldr	s14, [r3]
 800e81c:	4b45      	ldr	r3, [pc, #276]	; (800e934 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800e81e:	edd3 7a00 	vldr	s15, [r3]
 800e822:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e826:	4b3b      	ldr	r3, [pc, #236]	; (800e914 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800e828:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo -= a_curve;
 800e82c:	4b3b      	ldr	r3, [pc, #236]	; (800e91c <HAL_TIM_PeriodElapsedCallback+0x654>)
 800e82e:	ed93 7a00 	vldr	s14, [r3]
 800e832:	4b40      	ldr	r3, [pc, #256]	; (800e934 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800e834:	edd3 7a00 	vldr	s15, [r3]
 800e838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e83c:	4b37      	ldr	r3, [pc, #220]	; (800e91c <HAL_TIM_PeriodElapsedCallback+0x654>)
 800e83e:	edc3 7a00 	vstr	s15, [r3]
 800e842:	e09e      	b.n	800e982 <HAL_TIM_PeriodElapsedCallback+0x6ba>
	    else if( mode.accel == 5 ){//左に旋回減�??
 800e844:	4b32      	ldr	r3, [pc, #200]	; (800e910 <HAL_TIM_PeriodElapsedCallback+0x648>)
 800e846:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800e84a:	2b05      	cmp	r3, #5
 800e84c:	d121      	bne.n	800e892 <HAL_TIM_PeriodElapsedCallback+0x5ca>
		      if(Target_R_velo > SEARCH_SPEED){
 800e84e:	4b31      	ldr	r3, [pc, #196]	; (800e914 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800e850:	edd3 7a00 	vldr	s15, [r3]
 800e854:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800e928 <HAL_TIM_PeriodElapsedCallback+0x660>
 800e858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e860:	f340 808f 	ble.w	800e982 <HAL_TIM_PeriodElapsedCallback+0x6ba>
		    	Target_R_velo -= a_curve;
 800e864:	4b2b      	ldr	r3, [pc, #172]	; (800e914 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800e866:	ed93 7a00 	vldr	s14, [r3]
 800e86a:	4b32      	ldr	r3, [pc, #200]	; (800e934 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800e86c:	edd3 7a00 	vldr	s15, [r3]
 800e870:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e874:	4b27      	ldr	r3, [pc, #156]	; (800e914 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800e876:	edc3 7a00 	vstr	s15, [r3]
		    	Target_L_velo += a_curve;
 800e87a:	4b28      	ldr	r3, [pc, #160]	; (800e91c <HAL_TIM_PeriodElapsedCallback+0x654>)
 800e87c:	ed93 7a00 	vldr	s14, [r3]
 800e880:	4b2c      	ldr	r3, [pc, #176]	; (800e934 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800e882:	edd3 7a00 	vldr	s15, [r3]
 800e886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e88a:	4b24      	ldr	r3, [pc, #144]	; (800e91c <HAL_TIM_PeriodElapsedCallback+0x654>)
 800e88c:	edc3 7a00 	vstr	s15, [r3]
 800e890:	e077      	b.n	800e982 <HAL_TIM_PeriodElapsedCallback+0x6ba>
	    else if( mode.accel == 6 ){//右に旋回�?�?
 800e892:	4b1f      	ldr	r3, [pc, #124]	; (800e910 <HAL_TIM_PeriodElapsedCallback+0x648>)
 800e894:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800e898:	2b06      	cmp	r3, #6
 800e89a:	d14d      	bne.n	800e938 <HAL_TIM_PeriodElapsedCallback+0x670>
	      if(Target_L_velo < SEARCH_SPEED * 124.6/90){
 800e89c:	4b1f      	ldr	r3, [pc, #124]	; (800e91c <HAL_TIM_PeriodElapsedCallback+0x654>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7f9 fd89 	bl	80083b8 <__aeabi_f2d>
 800e8a6:	a314      	add	r3, pc, #80	; (adr r3, 800e8f8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800e8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ac:	f7fa f84e 	bl	800894c <__aeabi_dcmplt>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d065      	beq.n	800e982 <HAL_TIM_PeriodElapsedCallback+0x6ba>
	    	Target_R_velo -= a_curve;
 800e8b6:	4b17      	ldr	r3, [pc, #92]	; (800e914 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800e8b8:	ed93 7a00 	vldr	s14, [r3]
 800e8bc:	4b1d      	ldr	r3, [pc, #116]	; (800e934 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800e8be:	edd3 7a00 	vldr	s15, [r3]
 800e8c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e8c6:	4b13      	ldr	r3, [pc, #76]	; (800e914 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800e8c8:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo += a_curve;
 800e8cc:	4b13      	ldr	r3, [pc, #76]	; (800e91c <HAL_TIM_PeriodElapsedCallback+0x654>)
 800e8ce:	ed93 7a00 	vldr	s14, [r3]
 800e8d2:	4b18      	ldr	r3, [pc, #96]	; (800e934 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800e8d4:	edd3 7a00 	vldr	s15, [r3]
 800e8d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e8dc:	4b0f      	ldr	r3, [pc, #60]	; (800e91c <HAL_TIM_PeriodElapsedCallback+0x654>)
 800e8de:	edc3 7a00 	vstr	s15, [r3]
 800e8e2:	e04e      	b.n	800e982 <HAL_TIM_PeriodElapsedCallback+0x6ba>
 800e8e4:	f3af 8000 	nop.w
 800e8e8:	d2f1a9fc 	.word	0xd2f1a9fc
 800e8ec:	3f50624d 	.word	0x3f50624d
	...
 800e8f8:	d82d82d8 	.word	0xd82d82d8
 800e8fc:	40745582 	.word	0x40745582
 800e900:	20000038 	.word	0x20000038
 800e904:	3a83126f 	.word	0x3a83126f
 800e908:	200002d0 	.word	0x200002d0
 800e90c:	20000044 	.word	0x20000044
 800e910:	20000074 	.word	0x20000074
 800e914:	20004380 	.word	0x20004380
 800e918:	200043a4 	.word	0x200043a4
 800e91c:	200043a0 	.word	0x200043a0
 800e920:	20004398 	.word	0x20004398
 800e924:	200002b8 	.word	0x200002b8
 800e928:	436b0000 	.word	0x436b0000
 800e92c:	20000008 	.word	0x20000008
 800e930:	2000000c 	.word	0x2000000c
 800e934:	20000010 	.word	0x20000010
	    else if( mode.accel == 7 ){//右に旋回減�??
 800e938:	4bb1      	ldr	r3, [pc, #708]	; (800ec00 <HAL_TIM_PeriodElapsedCallback+0x938>)
 800e93a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800e93e:	2b07      	cmp	r3, #7
 800e940:	d11f      	bne.n	800e982 <HAL_TIM_PeriodElapsedCallback+0x6ba>
	      if(Target_L_velo > SEARCH_SPEED){
 800e942:	4bb0      	ldr	r3, [pc, #704]	; (800ec04 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 800e944:	edd3 7a00 	vldr	s15, [r3]
 800e948:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800ec08 <HAL_TIM_PeriodElapsedCallback+0x940>
 800e94c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e954:	dd15      	ble.n	800e982 <HAL_TIM_PeriodElapsedCallback+0x6ba>
	    	Target_R_velo += a_curve;
 800e956:	4bad      	ldr	r3, [pc, #692]	; (800ec0c <HAL_TIM_PeriodElapsedCallback+0x944>)
 800e958:	ed93 7a00 	vldr	s14, [r3]
 800e95c:	4bac      	ldr	r3, [pc, #688]	; (800ec10 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800e95e:	edd3 7a00 	vldr	s15, [r3]
 800e962:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e966:	4ba9      	ldr	r3, [pc, #676]	; (800ec0c <HAL_TIM_PeriodElapsedCallback+0x944>)
 800e968:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo -= a_curve;
 800e96c:	4ba5      	ldr	r3, [pc, #660]	; (800ec04 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 800e96e:	ed93 7a00 	vldr	s14, [r3]
 800e972:	4ba7      	ldr	r3, [pc, #668]	; (800ec10 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800e974:	edd3 7a00 	vldr	s15, [r3]
 800e978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e97c:	4ba1      	ldr	r3, [pc, #644]	; (800ec04 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 800e97e:	edc3 7a00 	vstr	s15, [r3]
	    Velocity_Control(Target_velocity, Body_velocity, T1,velocity.KP ,velocity.KI, velocity.KD);
 800e982:	4ba4      	ldr	r3, [pc, #656]	; (800ec14 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800e984:	edd3 7a00 	vldr	s15, [r3]
 800e988:	4ba3      	ldr	r3, [pc, #652]	; (800ec18 <HAL_TIM_PeriodElapsedCallback+0x950>)
 800e98a:	ed93 7a00 	vldr	s14, [r3]
 800e98e:	4ba3      	ldr	r3, [pc, #652]	; (800ec1c <HAL_TIM_PeriodElapsedCallback+0x954>)
 800e990:	edd3 6a00 	vldr	s13, [r3]
 800e994:	4ba1      	ldr	r3, [pc, #644]	; (800ec1c <HAL_TIM_PeriodElapsedCallback+0x954>)
 800e996:	ed93 6a01 	vldr	s12, [r3, #4]
 800e99a:	4ba0      	ldr	r3, [pc, #640]	; (800ec1c <HAL_TIM_PeriodElapsedCallback+0x954>)
 800e99c:	edd3 5a02 	vldr	s11, [r3, #8]
 800e9a0:	eef0 2a65 	vmov.f32	s5, s11
 800e9a4:	eeb0 2a46 	vmov.f32	s4, s12
 800e9a8:	eef0 1a66 	vmov.f32	s3, s13
 800e9ac:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 800ec20 <HAL_TIM_PeriodElapsedCallback+0x958>
 800e9b0:	eef0 0a47 	vmov.f32	s1, s14
 800e9b4:	eeb0 0a67 	vmov.f32	s0, s15
 800e9b8:	f7fa fc3e 	bl	8009238 <Velocity_Control>
		L_motor = L_v_control + L_wall + L_leftwall + L_rightwall + L_rotate + L_angular_velocity + L_env_control + L_velo_control;
 800e9bc:	4b99      	ldr	r3, [pc, #612]	; (800ec24 <HAL_TIM_PeriodElapsedCallback+0x95c>)
 800e9be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9c2:	b29a      	uxth	r2, r3
 800e9c4:	4b98      	ldr	r3, [pc, #608]	; (800ec28 <HAL_TIM_PeriodElapsedCallback+0x960>)
 800e9c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	4413      	add	r3, r2
 800e9ce:	b29a      	uxth	r2, r3
 800e9d0:	4b96      	ldr	r3, [pc, #600]	; (800ec2c <HAL_TIM_PeriodElapsedCallback+0x964>)
 800e9d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	4413      	add	r3, r2
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	4b94      	ldr	r3, [pc, #592]	; (800ec30 <HAL_TIM_PeriodElapsedCallback+0x968>)
 800e9de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	4413      	add	r3, r2
 800e9e6:	b29a      	uxth	r2, r3
 800e9e8:	4b92      	ldr	r3, [pc, #584]	; (800ec34 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 800e9ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	4413      	add	r3, r2
 800e9f2:	b29a      	uxth	r2, r3
 800e9f4:	4b90      	ldr	r3, [pc, #576]	; (800ec38 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800e9f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	4413      	add	r3, r2
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	4b8e      	ldr	r3, [pc, #568]	; (800ec3c <HAL_TIM_PeriodElapsedCallback+0x974>)
 800ea02:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	4413      	add	r3, r2
 800ea0a:	b29a      	uxth	r2, r3
 800ea0c:	4b8c      	ldr	r3, [pc, #560]	; (800ec40 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800ea0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	4413      	add	r3, r2
 800ea16:	b29b      	uxth	r3, r3
 800ea18:	b21a      	sxth	r2, r3
 800ea1a:	4b8a      	ldr	r3, [pc, #552]	; (800ec44 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800ea1c:	801a      	strh	r2, [r3, #0]
		R_motor = R_v_control + R_wall + R_leftwall + R_rightwall + R_rotate + R_angular_velocity + R_env_control + R_velo_control;
 800ea1e:	4b8a      	ldr	r3, [pc, #552]	; (800ec48 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800ea20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea24:	b29a      	uxth	r2, r3
 800ea26:	4b89      	ldr	r3, [pc, #548]	; (800ec4c <HAL_TIM_PeriodElapsedCallback+0x984>)
 800ea28:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	4413      	add	r3, r2
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	4b87      	ldr	r3, [pc, #540]	; (800ec50 <HAL_TIM_PeriodElapsedCallback+0x988>)
 800ea34:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	4413      	add	r3, r2
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	4b85      	ldr	r3, [pc, #532]	; (800ec54 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 800ea40:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea44:	b29b      	uxth	r3, r3
 800ea46:	4413      	add	r3, r2
 800ea48:	b29a      	uxth	r2, r3
 800ea4a:	4b83      	ldr	r3, [pc, #524]	; (800ec58 <HAL_TIM_PeriodElapsedCallback+0x990>)
 800ea4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	4413      	add	r3, r2
 800ea54:	b29a      	uxth	r2, r3
 800ea56:	4b81      	ldr	r3, [pc, #516]	; (800ec5c <HAL_TIM_PeriodElapsedCallback+0x994>)
 800ea58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	4413      	add	r3, r2
 800ea60:	b29a      	uxth	r2, r3
 800ea62:	4b7f      	ldr	r3, [pc, #508]	; (800ec60 <HAL_TIM_PeriodElapsedCallback+0x998>)
 800ea64:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	4413      	add	r3, r2
 800ea6c:	b29a      	uxth	r2, r3
 800ea6e:	4b7d      	ldr	r3, [pc, #500]	; (800ec64 <HAL_TIM_PeriodElapsedCallback+0x99c>)
 800ea70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea74:	b29b      	uxth	r3, r3
 800ea76:	4413      	add	r3, r2
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	b21a      	sxth	r2, r3
 800ea7c:	4b7a      	ldr	r3, [pc, #488]	; (800ec68 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 800ea7e:	801a      	strh	r2, [r3, #0]
		if(timer <= 2000){
 800ea80:	4b7a      	ldr	r3, [pc, #488]	; (800ec6c <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 800ea82:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ea86:	f04f 0200 	mov.w	r2, #0
 800ea8a:	4b79      	ldr	r3, [pc, #484]	; (800ec70 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 800ea8c:	f7f9 ff68 	bl	8008960 <__aeabi_dcmple>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d018      	beq.n	800eac8 <HAL_TIM_PeriodElapsedCallback+0x800>
			if((int)timer % 5== 0){
 800ea96:	4b75      	ldr	r3, [pc, #468]	; (800ec6c <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 800ea98:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	4621      	mov	r1, r4
 800eaa0:	f7f9 ff92 	bl	80089c8 <__aeabi_d2iz>
 800eaa4:	4601      	mov	r1, r0
 800eaa6:	4b73      	ldr	r3, [pc, #460]	; (800ec74 <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 800eaa8:	fb83 2301 	smull	r2, r3, r3, r1
 800eaac:	105a      	asrs	r2, r3, #1
 800eaae:	17cb      	asrs	r3, r1, #31
 800eab0:	1ad2      	subs	r2, r2, r3
 800eab2:	4613      	mov	r3, r2
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	4413      	add	r3, r2
 800eab8:	1aca      	subs	r2, r1, r3
 800eaba:	2a00      	cmp	r2, #0
 800eabc:	d104      	bne.n	800eac8 <HAL_TIM_PeriodElapsedCallback+0x800>
		     k++;
 800eabe:	4b6e      	ldr	r3, [pc, #440]	; (800ec78 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	3301      	adds	r3, #1
 800eac4:	4a6c      	ldr	r2, [pc, #432]	; (800ec78 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 800eac6:	6013      	str	r3, [r2, #0]
		Motor_Switch(L_motor,R_motor);
 800eac8:	4b5e      	ldr	r3, [pc, #376]	; (800ec44 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800eaca:	f9b3 2000 	ldrsh.w	r2, [r3]
 800eace:	4b66      	ldr	r3, [pc, #408]	; (800ec68 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 800ead0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ead4:	4619      	mov	r1, r3
 800ead6:	4610      	mov	r0, r2
 800ead8:	f7fb fdba 	bl	800a650 <Motor_Switch>
		break;
 800eadc:	e0e1      	b.n	800eca2 <HAL_TIM_PeriodElapsedCallback+0x9da>
			Tim_Count();
 800eade:	f7fa ff97 	bl	8009a10 <Tim_Count>
	      	EN3_L.count = TIM3 -> CNT;
 800eae2:	4b66      	ldr	r3, [pc, #408]	; (800ec7c <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800eae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae6:	461a      	mov	r2, r3
 800eae8:	4b65      	ldr	r3, [pc, #404]	; (800ec80 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800eaea:	601a      	str	r2, [r3, #0]
		    EN4_R.count = TIM4 -> CNT;
 800eaec:	4b65      	ldr	r3, [pc, #404]	; (800ec84 <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 800eaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	4b65      	ldr	r3, [pc, #404]	; (800ec88 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 800eaf4:	601a      	str	r2, [r3, #0]
		    EN3_L.count = -(EN3_L.count - (30000-1));
 800eaf6:	4b62      	ldr	r3, [pc, #392]	; (800ec80 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800eafe:	332f      	adds	r3, #47	; 0x2f
 800eb00:	4a5f      	ldr	r2, [pc, #380]	; (800ec80 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800eb02:	6013      	str	r3, [r2, #0]
		    EN4_R.count = -(EN4_R.count - (30000-1));
 800eb04:	4b60      	ldr	r3, [pc, #384]	; (800ec88 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800eb0c:	332f      	adds	r3, #47	; 0x2f
 800eb0e:	4a5e      	ldr	r2, [pc, #376]	; (800ec88 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 800eb10:	6013      	str	r3, [r2, #0]
		    mode.enc = Encoder_Count(mode.enc);
 800eb12:	4b3b      	ldr	r3, [pc, #236]	; (800ec00 <HAL_TIM_PeriodElapsedCallback+0x938>)
 800eb14:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800eb18:	b21b      	sxth	r3, r3
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fb ff52 	bl	800a9c4 <Encoder_Count>
 800eb20:	4603      	mov	r3, r0
 800eb22:	b25a      	sxtb	r2, r3
 800eb24:	4b36      	ldr	r3, [pc, #216]	; (800ec00 <HAL_TIM_PeriodElapsedCallback+0x938>)
 800eb26:	70da      	strb	r2, [r3, #3]
		    All_Pulse_anytime += EN4_R.count + EN3_L.count;
 800eb28:	4b57      	ldr	r3, [pc, #348]	; (800ec88 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	4b54      	ldr	r3, [pc, #336]	; (800ec80 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	441a      	add	r2, r3
 800eb32:	4b56      	ldr	r3, [pc, #344]	; (800ec8c <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	4413      	add	r3, r2
 800eb38:	4a54      	ldr	r2, [pc, #336]	; (800ec8c <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 800eb3a:	6013      	str	r3, [r2, #0]
		    Encoder_Reset();
 800eb3c:	f7fb ff2e 	bl	800a99c <Encoder_Reset>
		    L_velocity = Velocity_Get( (float)EN3_L.count , T1 );
 800eb40:	4b4f      	ldr	r3, [pc, #316]	; (800ec80 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	ee07 3a90 	vmov	s15, r3
 800eb48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb4c:	eddf 0a34 	vldr	s1, [pc, #208]	; 800ec20 <HAL_TIM_PeriodElapsedCallback+0x958>
 800eb50:	eeb0 0a67 	vmov.f32	s0, s15
 800eb54:	f7fb fefa 	bl	800a94c <Velocity_Get>
 800eb58:	eef0 7a40 	vmov.f32	s15, s0
 800eb5c:	4b4c      	ldr	r3, [pc, #304]	; (800ec90 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 800eb5e:	edc3 7a00 	vstr	s15, [r3]
			R_velocity = Velocity_Get( (float)EN4_R.count , T1 );
 800eb62:	4b49      	ldr	r3, [pc, #292]	; (800ec88 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	ee07 3a90 	vmov	s15, r3
 800eb6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb6e:	eddf 0a2c 	vldr	s1, [pc, #176]	; 800ec20 <HAL_TIM_PeriodElapsedCallback+0x958>
 800eb72:	eeb0 0a67 	vmov.f32	s0, s15
 800eb76:	f7fb fee9 	bl	800a94c <Velocity_Get>
 800eb7a:	eef0 7a40 	vmov.f32	s15, s0
 800eb7e:	4b45      	ldr	r3, [pc, #276]	; (800ec94 <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 800eb80:	edc3 7a00 	vstr	s15, [r3]
			imu_data = IMU_Get_Data();
 800eb84:	f7fb fa58 	bl	800a038 <IMU_Get_Data>
 800eb88:	eeb0 7a40 	vmov.f32	s14, s0
 800eb8c:	eef0 7a60 	vmov.f32	s15, s1
 800eb90:	4b41      	ldr	r3, [pc, #260]	; (800ec98 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 800eb92:	ed83 7b00 	vstr	d7, [r3]
			if(timer <= 48000){
 800eb96:	4b35      	ldr	r3, [pc, #212]	; (800ec6c <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 800eb98:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb9c:	a316      	add	r3, pc, #88	; (adr r3, 800ebf8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 800eb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba2:	f7f9 fedd 	bl	8008960 <__aeabi_dcmple>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d01a      	beq.n	800ebe2 <HAL_TIM_PeriodElapsedCallback+0x91a>
				if((int)timer % 60 == 0){
 800ebac:	4b2f      	ldr	r3, [pc, #188]	; (800ec6c <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 800ebae:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	4621      	mov	r1, r4
 800ebb6:	f7f9 ff07 	bl	80089c8 <__aeabi_d2iz>
 800ebba:	4601      	mov	r1, r0
 800ebbc:	4b37      	ldr	r3, [pc, #220]	; (800ec9c <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 800ebbe:	fb83 2301 	smull	r2, r3, r3, r1
 800ebc2:	440b      	add	r3, r1
 800ebc4:	115a      	asrs	r2, r3, #5
 800ebc6:	17cb      	asrs	r3, r1, #31
 800ebc8:	1ad2      	subs	r2, r2, r3
 800ebca:	4613      	mov	r3, r2
 800ebcc:	011b      	lsls	r3, r3, #4
 800ebce:	1a9b      	subs	r3, r3, r2
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	1aca      	subs	r2, r1, r3
 800ebd4:	2a00      	cmp	r2, #0
 800ebd6:	d104      	bne.n	800ebe2 <HAL_TIM_PeriodElapsedCallback+0x91a>
			     k++;
 800ebd8:	4b27      	ldr	r3, [pc, #156]	; (800ec78 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	4a26      	ldr	r2, [pc, #152]	; (800ec78 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 800ebe0:	6013      	str	r3, [r2, #0]
			Motor_Switch(L_motor,R_motor);
 800ebe2:	4b18      	ldr	r3, [pc, #96]	; (800ec44 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800ebe4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ebe8:	4b1f      	ldr	r3, [pc, #124]	; (800ec68 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 800ebea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ebee:	4619      	mov	r1, r3
 800ebf0:	4610      	mov	r0, r2
 800ebf2:	f7fb fd2d 	bl	800a650 <Motor_Switch>
			break;
 800ebf6:	e054      	b.n	800eca2 <HAL_TIM_PeriodElapsedCallback+0x9da>
 800ebf8:	00000000 	.word	0x00000000
 800ebfc:	40e77000 	.word	0x40e77000
 800ec00:	20000074 	.word	0x20000074
 800ec04:	200043a0 	.word	0x200043a0
 800ec08:	436b0000 	.word	0x436b0000
 800ec0c:	20004380 	.word	0x20004380
 800ec10:	20000010 	.word	0x20000010
 800ec14:	200002b8 	.word	0x200002b8
 800ec18:	20004400 	.word	0x20004400
 800ec1c:	20000038 	.word	0x20000038
 800ec20:	3a83126f 	.word	0x3a83126f
 800ec24:	20004384 	.word	0x20004384
 800ec28:	2000439c 	.word	0x2000439c
 800ec2c:	20004386 	.word	0x20004386
 800ec30:	20004378 	.word	0x20004378
 800ec34:	20004394 	.word	0x20004394
 800ec38:	2000438e 	.word	0x2000438e
 800ec3c:	2000437a 	.word	0x2000437a
 800ec40:	2000439e 	.word	0x2000439e
 800ec44:	200051f4 	.word	0x200051f4
 800ec48:	2000438c 	.word	0x2000438c
 800ec4c:	2000438a 	.word	0x2000438a
 800ec50:	200043a8 	.word	0x200043a8
 800ec54:	20004390 	.word	0x20004390
 800ec58:	20004396 	.word	0x20004396
 800ec5c:	20004392 	.word	0x20004392
 800ec60:	20004388 	.word	0x20004388
 800ec64:	2000437c 	.word	0x2000437c
 800ec68:	20004494 	.word	0x20004494
 800ec6c:	200002e8 	.word	0x200002e8
 800ec70:	409f4000 	.word	0x409f4000
 800ec74:	66666667 	.word	0x66666667
 800ec78:	20004368 	.word	0x20004368
 800ec7c:	40000400 	.word	0x40000400
 800ec80:	20000050 	.word	0x20000050
 800ec84:	40000800 	.word	0x40000800
 800ec88:	2000005c 	.word	0x2000005c
 800ec8c:	200002fc 	.word	0x200002fc
 800ec90:	20004398 	.word	0x20004398
 800ec94:	200043a4 	.word	0x200043a4
 800ec98:	200002d0 	.word	0x200002d0
 800ec9c:	88888889 	.word	0x88888889
	  }

  }
 800eca0:	bf00      	nop

  if(htim == &htim8){
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4a05      	ldr	r2, [pc, #20]	; (800ecbc <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d101      	bne.n	800ecae <HAL_TIM_PeriodElapsedCallback+0x9e6>


	  ADC_Get_Data();
 800ecaa:	f7fb fd1b 	bl	800a6e4 <ADC_Get_Data>


  }
}
 800ecae:	bf00      	nop
 800ecb0:	3708      	adds	r7, #8
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	ecbd 8b02 	vpop	{d8}
 800ecb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ecbc:	200043c0 	.word	0x200043c0

0800ecc0 <Exe_num0>:


/*---- DEFINING FUNCTION ----*/

//実行時に切り替えるモード
void Exe_num0(){
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	af00      	add	r7, sp, #0
//	mode.control = 0;
//	Target_velocity=SEARCH_SPEED;
//
//	Target_Rad_velo=0;

	Adachi_search();
 800ecc4:	f7fe fd64 	bl	800d790 <Adachi_search>

}
 800ecc8:	bf00      	nop
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <Exe_num1>:
void Exe_num1(){
 800eccc:	b580      	push	{r7, lr}
 800ecce:	af00      	add	r7, sp, #0
	Adachi_search2();
 800ecd0:	f7fe fe86 	bl	800d9e0 <Adachi_search2>

}
 800ecd4:	bf00      	nop
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <Exe_num2>:
void Exe_num2(){
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	af00      	add	r7, sp, #0
//        	  if(timer == 10)
//        		  printf("小数のほう : %lf \r\n",timer);
//        	  if(self_timer == 10000)
//        		  printf("整数のほう : %lf \r\n",self_timer/1000);

	Shortest_Run();
 800ecdc:	f7ff fa64 	bl	800e1a8 <Shortest_Run>
        	  //start_calib();

}
 800ece0:	bf00      	nop
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <Exe_num3>:
void Exe_num3(){
 800ece4:	b580      	push	{r7, lr}
 800ece6:	af00      	add	r7, sp, #0
	  //printf("helloあいうえお\r\n");


        	  Flash_load();
 800ece8:	f7fb f8a8 	bl	8009e3c <Flash_load>
          	  HAL_Delay(2000);
 800ecec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ecf0:	f001 fb6c 	bl	80103cc <HAL_Delay>

          	  mapprint();
 800ecf4:	f7fa ffe6 	bl	8009cc4 <mapprint>
          	  while(1);
 800ecf8:	e7fe      	b.n	800ecf8 <Exe_num3+0x14>

0800ecfa <Exe_num4>:
			  //printf("%d\r\n",zg);
//        		  printf("%f\r\n",Body_angle);
//        		  HAL_Delay(1);

}
void Exe_num4(){
 800ecfa:	b580      	push	{r7, lr}
 800ecfc:	af00      	add	r7, sp, #0
	Tire_Maintenance();
 800ecfe:	f7fd f941 	bl	800bf84 <Tire_Maintenance>
//       	  mode.enc = 1;
//        	  printf("左 : %d \r\n",EN3_L.integrate);
//        	  printf("右 : %d \r\n",EN4_R.integrate);
//        	  printf("\r\n");

}
 800ed02:	bf00      	nop
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <Exe_num5>:
void Exe_num5(){
 800ed06:	b580      	push	{r7, lr}
 800ed08:	af00      	add	r7, sp, #0
		  //printf("%f\r\n",identify[k]);

		 // printf("%f\t %f\r\n",identify[k],identify[k+5000]);
		 // printf("%f\r\n",identify[k]);

		  turn_right();
 800ed0a:	f7fc f9fb 	bl	800b104 <turn_right>
		  while(1);
 800ed0e:	e7fe      	b.n	800ed0e <Exe_num5+0x8>

0800ed10 <Exe_num6>:
    printf("\r\n");
#endif

#endif
}
void Exe_num6(){
 800ed10:	b598      	push	{r3, r4, r7, lr}
 800ed12:	af00      	add	r7, sp, #0
//        	  Target_Rad_velo= 0;

        	  //Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);

#if 1
	      printf("左 : %f\r\n",fl_average);
 800ed14:	4b18      	ldr	r3, [pc, #96]	; (800ed78 <Exe_num6+0x68>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7f9 fb4d 	bl	80083b8 <__aeabi_f2d>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	460c      	mov	r4, r1
 800ed22:	461a      	mov	r2, r3
 800ed24:	4623      	mov	r3, r4
 800ed26:	4815      	ldr	r0, [pc, #84]	; (800ed7c <Exe_num6+0x6c>)
 800ed28:	f007 f9da 	bl	80160e0 <iprintf>
	      printf("右 : %f\r\n",fr_average);
 800ed2c:	4b14      	ldr	r3, [pc, #80]	; (800ed80 <Exe_num6+0x70>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7f9 fb41 	bl	80083b8 <__aeabi_f2d>
 800ed36:	4603      	mov	r3, r0
 800ed38:	460c      	mov	r4, r1
 800ed3a:	461a      	mov	r2, r3
 800ed3c:	4623      	mov	r3, r4
 800ed3e:	4811      	ldr	r0, [pc, #68]	; (800ed84 <Exe_num6+0x74>)
 800ed40:	f007 f9ce 	bl	80160e0 <iprintf>
	      printf("前左 : %f\r\n",sl_average);
 800ed44:	4b10      	ldr	r3, [pc, #64]	; (800ed88 <Exe_num6+0x78>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7f9 fb35 	bl	80083b8 <__aeabi_f2d>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	460c      	mov	r4, r1
 800ed52:	461a      	mov	r2, r3
 800ed54:	4623      	mov	r3, r4
 800ed56:	480d      	ldr	r0, [pc, #52]	; (800ed8c <Exe_num6+0x7c>)
 800ed58:	f007 f9c2 	bl	80160e0 <iprintf>
	      printf("前右 : %f\r\n",sr_average);
 800ed5c:	4b0c      	ldr	r3, [pc, #48]	; (800ed90 <Exe_num6+0x80>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7f9 fb29 	bl	80083b8 <__aeabi_f2d>
 800ed66:	4603      	mov	r3, r0
 800ed68:	460c      	mov	r4, r1
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	4623      	mov	r3, r4
 800ed6e:	4809      	ldr	r0, [pc, #36]	; (800ed94 <Exe_num6+0x84>)
 800ed70:	f007 f9b6 	bl	80160e0 <iprintf>

#endif


//		Velocity_Control(Target_velocity, Body_velocity, T1,velocity.KP ,velocity.KI*, velocity.KD);
}
 800ed74:	bf00      	nop
 800ed76:	bd98      	pop	{r3, r4, r7, pc}
 800ed78:	200043bc 	.word	0x200043bc
 800ed7c:	08018084 	.word	0x08018084
 800ed80:	20004fb0 	.word	0x20004fb0
 800ed84:	08018090 	.word	0x08018090
 800ed88:	20005258 	.word	0x20005258
 800ed8c:	0801809c 	.word	0x0801809c
 800ed90:	20004498 	.word	0x20004498
 800ed94:	080180ac 	.word	0x080180ac

0800ed98 <Exe_num7>:
void Exe_num7(){
 800ed98:	b480      	push	{r7}
 800ed9a:	af00      	add	r7, sp, #0
	  //mode.control = 5;
	 // mode.control = 3; //1 Left_wall
	Target_velocity = 0;
 800ed9c:	4b05      	ldr	r3, [pc, #20]	; (800edb4 <Exe_num7+0x1c>)
 800ed9e:	f04f 0200 	mov.w	r2, #0
 800eda2:	601a      	str	r2, [r3, #0]
	mode.control = 0;
 800eda4:	4b04      	ldr	r3, [pc, #16]	; (800edb8 <Exe_num7+0x20>)
 800eda6:	2200      	movs	r2, #0
 800eda8:	715a      	strb	r2, [r3, #5]
//        		      printf("右 : %f\r\n",fr_average);
//        		  }
		  mode.control = 2;
		  Target_velocity = test_velo_7;
#endif
}
 800edaa:	bf00      	nop
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr
 800edb4:	200002b8 	.word	0x200002b8
 800edb8:	20000074 	.word	0x20000074

0800edbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800edc0:	f001 fa92 	bl	80102e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800edc4:	f000 f876 	bl	800eeb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800edc8:	f000 fcc0 	bl	800f74c <MX_GPIO_Init>
  MX_DMA_Init();
 800edcc:	f000 fc96 	bl	800f6fc <MX_DMA_Init>
  MX_ADC1_Init();
 800edd0:	f000 f8da 	bl	800ef88 <MX_ADC1_Init>
  MX_ADC2_Init();
 800edd4:	f000 f946 	bl	800f064 <MX_ADC2_Init>
  MX_TIM3_Init();
 800edd8:	f000 faa0 	bl	800f31c <MX_TIM3_Init>
  MX_TIM2_Init();
 800eddc:	f000 fa28 	bl	800f230 <MX_TIM2_Init>
  MX_SPI3_Init();
 800ede0:	f000 f9a0 	bl	800f124 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800ede4:	f000 fc60 	bl	800f6a8 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800ede8:	f000 fb40 	bl	800f46c <MX_TIM5_Init>
  MX_TIM4_Init();
 800edec:	f000 faea 	bl	800f3c4 <MX_TIM4_Init>
  MX_TIM8_Init();
 800edf0:	f000 fbb2 	bl	800f558 <MX_TIM8_Init>
  MX_TIM1_Init();
 800edf4:	f000 f9cc 	bl	800f190 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Encoder_Start();
 800edf8:	f7fb f8cc 	bl	8009f94 <Encoder_Start>
  Encoder_Reset();
 800edfc:	f7fb fdce 	bl	800a99c <Encoder_Reset>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); //LED
 800ee00:	2201      	movs	r2, #1
 800ee02:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ee06:	4825      	ldr	r0, [pc, #148]	; (800ee9c <main+0xe0>)
 800ee08:	f003 fab6 	bl	8012378 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800ee0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ee10:	f001 fadc 	bl	80103cc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET); //LED
 800ee14:	2200      	movs	r2, #0
 800ee16:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ee1a:	4820      	ldr	r0, [pc, #128]	; (800ee9c <main+0xe0>)
 800ee1c:	f003 faac 	bl	8012378 <HAL_GPIO_WritePin>

  while (1)
  {
	  Execution_Select();
 800ee20:	f7fc fea4 	bl	800bb6c <Execution_Select>

//      printf("EN3_L.integrate : %d \r\n", EN3_L.integrate);
//      printf("EN4_R.integrate : %d \r\n", EN4_R.integrate);
//      printf("EN_Body.integrate : %d \r\n", EN_Body.integrate);
	  //誤差補正のオフセット値決定
	  IMU_Calib();
 800ee24:	f7fb fad8 	bl	800a3d8 <IMU_Calib>
	  distance_wall_right=fr_average;
 800ee28:	4b1d      	ldr	r3, [pc, #116]	; (800eea0 <main+0xe4>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a1d      	ldr	r2, [pc, #116]	; (800eea4 <main+0xe8>)
 800ee2e:	6013      	str	r3, [r2, #0]
	  distance_wall_left=fl_average;
 800ee30:	4b1d      	ldr	r3, [pc, #116]	; (800eea8 <main+0xec>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a1d      	ldr	r2, [pc, #116]	; (800eeac <main+0xf0>)
 800ee36:	6013      	str	r3, [r2, #0]

	  while(1){


switch(mode.execution){
 800ee38:	4b1d      	ldr	r3, [pc, #116]	; (800eeb0 <main+0xf4>)
 800ee3a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800ee3e:	2b07      	cmp	r3, #7
 800ee40:	d82a      	bhi.n	800ee98 <main+0xdc>
 800ee42:	a201      	add	r2, pc, #4	; (adr r2, 800ee48 <main+0x8c>)
 800ee44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee48:	0800ee69 	.word	0x0800ee69
 800ee4c:	0800ee6f 	.word	0x0800ee6f
 800ee50:	0800ee75 	.word	0x0800ee75
 800ee54:	0800ee7b 	.word	0x0800ee7b
 800ee58:	0800ee81 	.word	0x0800ee81
 800ee5c:	0800ee87 	.word	0x0800ee87
 800ee60:	0800ee8d 	.word	0x0800ee8d
 800ee64:	0800ee93 	.word	0x0800ee93
          case 0:
        	  Exe_num0();
 800ee68:	f7ff ff2a 	bl	800ecc0 <Exe_num0>
        	  break;
 800ee6c:	e015      	b.n	800ee9a <main+0xde>
	  /*------------------------------------------*/
          case 1:
        	  Exe_num1();
 800ee6e:	f7ff ff2d 	bl	800eccc <Exe_num1>
              break;
 800ee72:	e012      	b.n	800ee9a <main+0xde>
	  /*------------------------------------------*/
          case 2:
        	  Exe_num2();
 800ee74:	f7ff ff30 	bl	800ecd8 <Exe_num2>
	          break;
 800ee78:	e00f      	b.n	800ee9a <main+0xde>
	  /*------------------------------------------*/
          case 3:
        	  Exe_num3();
 800ee7a:	f7ff ff33 	bl	800ece4 <Exe_num3>
              break;
 800ee7e:	e00c      	b.n	800ee9a <main+0xde>
	  /*------------------------------------------*/
          case 4:
        	  Exe_num4();
 800ee80:	f7ff ff3b 	bl	800ecfa <Exe_num4>
        	  break;
 800ee84:	e009      	b.n	800ee9a <main+0xde>
	  /*------------------------------------------*/
          case 5:
        	  Exe_num5();
 800ee86:	f7ff ff3e 	bl	800ed06 <Exe_num5>
	          break;
 800ee8a:	e006      	b.n	800ee9a <main+0xde>
	  /*------------------------------------------*/
          case 6:
        	  Exe_num6();
 800ee8c:	f7ff ff40 	bl	800ed10 <Exe_num6>
		    break;
 800ee90:	e003      	b.n	800ee9a <main+0xde>
	  /*------------------------------------------*/
          case 7:
        	  Exe_num7();
 800ee92:	f7ff ff81 	bl	800ed98 <Exe_num7>
	  	      break;
 800ee96:	e000      	b.n	800ee9a <main+0xde>
          default:
        	  break;
 800ee98:	bf00      	nop
switch(mode.execution){
 800ee9a:	e7cd      	b.n	800ee38 <main+0x7c>
 800ee9c:	40020800 	.word	0x40020800
 800eea0:	20004fb0 	.word	0x20004fb0
 800eea4:	20000020 	.word	0x20000020
 800eea8:	200043bc 	.word	0x200043bc
 800eeac:	20000024 	.word	0x20000024
 800eeb0:	20000074 	.word	0x20000074

0800eeb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b094      	sub	sp, #80	; 0x50
 800eeb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800eeba:	f107 0320 	add.w	r3, r7, #32
 800eebe:	2230      	movs	r2, #48	; 0x30
 800eec0:	2100      	movs	r1, #0
 800eec2:	4618      	mov	r0, r3
 800eec4:	f006 fca7 	bl	8015816 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800eec8:	f107 030c 	add.w	r3, r7, #12
 800eecc:	2200      	movs	r2, #0
 800eece:	601a      	str	r2, [r3, #0]
 800eed0:	605a      	str	r2, [r3, #4]
 800eed2:	609a      	str	r2, [r3, #8]
 800eed4:	60da      	str	r2, [r3, #12]
 800eed6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800eed8:	2300      	movs	r3, #0
 800eeda:	60bb      	str	r3, [r7, #8]
 800eedc:	4b28      	ldr	r3, [pc, #160]	; (800ef80 <SystemClock_Config+0xcc>)
 800eede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eee0:	4a27      	ldr	r2, [pc, #156]	; (800ef80 <SystemClock_Config+0xcc>)
 800eee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eee6:	6413      	str	r3, [r2, #64]	; 0x40
 800eee8:	4b25      	ldr	r3, [pc, #148]	; (800ef80 <SystemClock_Config+0xcc>)
 800eeea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eef0:	60bb      	str	r3, [r7, #8]
 800eef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800eef4:	2300      	movs	r3, #0
 800eef6:	607b      	str	r3, [r7, #4]
 800eef8:	4b22      	ldr	r3, [pc, #136]	; (800ef84 <SystemClock_Config+0xd0>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	4a21      	ldr	r2, [pc, #132]	; (800ef84 <SystemClock_Config+0xd0>)
 800eefe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ef02:	6013      	str	r3, [r2, #0]
 800ef04:	4b1f      	ldr	r3, [pc, #124]	; (800ef84 <SystemClock_Config+0xd0>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef0c:	607b      	str	r3, [r7, #4]
 800ef0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ef10:	2301      	movs	r3, #1
 800ef12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ef14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ef18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ef1a:	2302      	movs	r3, #2
 800ef1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ef1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ef22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800ef24:	2304      	movs	r3, #4
 800ef26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800ef28:	23a8      	movs	r3, #168	; 0xa8
 800ef2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ef2c:	2302      	movs	r3, #2
 800ef2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800ef30:	2304      	movs	r3, #4
 800ef32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ef34:	f107 0320 	add.w	r3, r7, #32
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f003 fa37 	bl	80123ac <HAL_RCC_OscConfig>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d001      	beq.n	800ef48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800ef44:	f000 fcbe 	bl	800f8c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ef48:	230f      	movs	r3, #15
 800ef4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ef4c:	2302      	movs	r3, #2
 800ef4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ef50:	2300      	movs	r3, #0
 800ef52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800ef54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ef58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800ef5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800ef60:	f107 030c 	add.w	r3, r7, #12
 800ef64:	2105      	movs	r1, #5
 800ef66:	4618      	mov	r0, r3
 800ef68:	f003 fc90 	bl	801288c <HAL_RCC_ClockConfig>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d001      	beq.n	800ef76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800ef72:	f000 fca7 	bl	800f8c4 <Error_Handler>
  }
}
 800ef76:	bf00      	nop
 800ef78:	3750      	adds	r7, #80	; 0x50
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	bf00      	nop
 800ef80:	40023800 	.word	0x40023800
 800ef84:	40007000 	.word	0x40007000

0800ef88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ef8e:	463b      	mov	r3, r7
 800ef90:	2200      	movs	r2, #0
 800ef92:	601a      	str	r2, [r3, #0]
 800ef94:	605a      	str	r2, [r3, #4]
 800ef96:	609a      	str	r2, [r3, #8]
 800ef98:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800ef9a:	4b2f      	ldr	r3, [pc, #188]	; (800f058 <MX_ADC1_Init+0xd0>)
 800ef9c:	4a2f      	ldr	r2, [pc, #188]	; (800f05c <MX_ADC1_Init+0xd4>)
 800ef9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800efa0:	4b2d      	ldr	r3, [pc, #180]	; (800f058 <MX_ADC1_Init+0xd0>)
 800efa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800efa6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800efa8:	4b2b      	ldr	r3, [pc, #172]	; (800f058 <MX_ADC1_Init+0xd0>)
 800efaa:	2200      	movs	r2, #0
 800efac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800efae:	4b2a      	ldr	r3, [pc, #168]	; (800f058 <MX_ADC1_Init+0xd0>)
 800efb0:	2201      	movs	r2, #1
 800efb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800efb4:	4b28      	ldr	r3, [pc, #160]	; (800f058 <MX_ADC1_Init+0xd0>)
 800efb6:	2201      	movs	r2, #1
 800efb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800efba:	4b27      	ldr	r3, [pc, #156]	; (800f058 <MX_ADC1_Init+0xd0>)
 800efbc:	2200      	movs	r2, #0
 800efbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800efc2:	4b25      	ldr	r3, [pc, #148]	; (800f058 <MX_ADC1_Init+0xd0>)
 800efc4:	2200      	movs	r2, #0
 800efc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800efc8:	4b23      	ldr	r3, [pc, #140]	; (800f058 <MX_ADC1_Init+0xd0>)
 800efca:	4a25      	ldr	r2, [pc, #148]	; (800f060 <MX_ADC1_Init+0xd8>)
 800efcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800efce:	4b22      	ldr	r3, [pc, #136]	; (800f058 <MX_ADC1_Init+0xd0>)
 800efd0:	2200      	movs	r2, #0
 800efd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800efd4:	4b20      	ldr	r3, [pc, #128]	; (800f058 <MX_ADC1_Init+0xd0>)
 800efd6:	2203      	movs	r2, #3
 800efd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800efda:	4b1f      	ldr	r3, [pc, #124]	; (800f058 <MX_ADC1_Init+0xd0>)
 800efdc:	2201      	movs	r2, #1
 800efde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800efe2:	4b1d      	ldr	r3, [pc, #116]	; (800f058 <MX_ADC1_Init+0xd0>)
 800efe4:	2201      	movs	r2, #1
 800efe6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800efe8:	481b      	ldr	r0, [pc, #108]	; (800f058 <MX_ADC1_Init+0xd0>)
 800efea:	f001 fa11 	bl	8010410 <HAL_ADC_Init>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d001      	beq.n	800eff8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800eff4:	f000 fc66 	bl	800f8c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800eff8:	230a      	movs	r3, #10
 800effa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800effc:	2301      	movs	r3, #1
 800effe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800f000:	2303      	movs	r3, #3
 800f002:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f004:	463b      	mov	r3, r7
 800f006:	4619      	mov	r1, r3
 800f008:	4813      	ldr	r0, [pc, #76]	; (800f058 <MX_ADC1_Init+0xd0>)
 800f00a:	f001 fcdf 	bl	80109cc <HAL_ADC_ConfigChannel>
 800f00e:	4603      	mov	r3, r0
 800f010:	2b00      	cmp	r3, #0
 800f012:	d001      	beq.n	800f018 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800f014:	f000 fc56 	bl	800f8c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800f018:	230e      	movs	r3, #14
 800f01a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800f01c:	2302      	movs	r3, #2
 800f01e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f020:	463b      	mov	r3, r7
 800f022:	4619      	mov	r1, r3
 800f024:	480c      	ldr	r0, [pc, #48]	; (800f058 <MX_ADC1_Init+0xd0>)
 800f026:	f001 fcd1 	bl	80109cc <HAL_ADC_ConfigChannel>
 800f02a:	4603      	mov	r3, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d001      	beq.n	800f034 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800f030:	f000 fc48 	bl	800f8c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800f034:	2309      	movs	r3, #9
 800f036:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800f038:	2303      	movs	r3, #3
 800f03a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f03c:	463b      	mov	r3, r7
 800f03e:	4619      	mov	r1, r3
 800f040:	4805      	ldr	r0, [pc, #20]	; (800f058 <MX_ADC1_Init+0xd0>)
 800f042:	f001 fcc3 	bl	80109cc <HAL_ADC_ConfigChannel>
 800f046:	4603      	mov	r3, r0
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d001      	beq.n	800f050 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800f04c:	f000 fc3a 	bl	800f8c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800f050:	bf00      	nop
 800f052:	3710      	adds	r7, #16
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}
 800f058:	20004580 	.word	0x20004580
 800f05c:	40012000 	.word	0x40012000
 800f060:	0f000001 	.word	0x0f000001

0800f064 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b084      	sub	sp, #16
 800f068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800f06a:	463b      	mov	r3, r7
 800f06c:	2200      	movs	r2, #0
 800f06e:	601a      	str	r2, [r3, #0]
 800f070:	605a      	str	r2, [r3, #4]
 800f072:	609a      	str	r2, [r3, #8]
 800f074:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800f076:	4b28      	ldr	r3, [pc, #160]	; (800f118 <MX_ADC2_Init+0xb4>)
 800f078:	4a28      	ldr	r2, [pc, #160]	; (800f11c <MX_ADC2_Init+0xb8>)
 800f07a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f07c:	4b26      	ldr	r3, [pc, #152]	; (800f118 <MX_ADC2_Init+0xb4>)
 800f07e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f082:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800f084:	4b24      	ldr	r3, [pc, #144]	; (800f118 <MX_ADC2_Init+0xb4>)
 800f086:	2200      	movs	r2, #0
 800f088:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800f08a:	4b23      	ldr	r3, [pc, #140]	; (800f118 <MX_ADC2_Init+0xb4>)
 800f08c:	2201      	movs	r2, #1
 800f08e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800f090:	4b21      	ldr	r3, [pc, #132]	; (800f118 <MX_ADC2_Init+0xb4>)
 800f092:	2201      	movs	r2, #1
 800f094:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800f096:	4b20      	ldr	r3, [pc, #128]	; (800f118 <MX_ADC2_Init+0xb4>)
 800f098:	2200      	movs	r2, #0
 800f09a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f09e:	4b1e      	ldr	r3, [pc, #120]	; (800f118 <MX_ADC2_Init+0xb4>)
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f0a4:	4b1c      	ldr	r3, [pc, #112]	; (800f118 <MX_ADC2_Init+0xb4>)
 800f0a6:	4a1e      	ldr	r2, [pc, #120]	; (800f120 <MX_ADC2_Init+0xbc>)
 800f0a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f0aa:	4b1b      	ldr	r3, [pc, #108]	; (800f118 <MX_ADC2_Init+0xb4>)
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800f0b0:	4b19      	ldr	r3, [pc, #100]	; (800f118 <MX_ADC2_Init+0xb4>)
 800f0b2:	2202      	movs	r2, #2
 800f0b4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800f0b6:	4b18      	ldr	r3, [pc, #96]	; (800f118 <MX_ADC2_Init+0xb4>)
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f0be:	4b16      	ldr	r3, [pc, #88]	; (800f118 <MX_ADC2_Init+0xb4>)
 800f0c0:	2201      	movs	r2, #1
 800f0c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800f0c4:	4814      	ldr	r0, [pc, #80]	; (800f118 <MX_ADC2_Init+0xb4>)
 800f0c6:	f001 f9a3 	bl	8010410 <HAL_ADC_Init>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d001      	beq.n	800f0d4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800f0d0:	f000 fbf8 	bl	800f8c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800f0d4:	230b      	movs	r3, #11
 800f0d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f0d8:	2301      	movs	r3, #1
 800f0da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800f0dc:	2303      	movs	r3, #3
 800f0de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f0e0:	463b      	mov	r3, r7
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	480c      	ldr	r0, [pc, #48]	; (800f118 <MX_ADC2_Init+0xb4>)
 800f0e6:	f001 fc71 	bl	80109cc <HAL_ADC_ConfigChannel>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d001      	beq.n	800f0f4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800f0f0:	f000 fbe8 	bl	800f8c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800f0f4:	230f      	movs	r3, #15
 800f0f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800f0f8:	2302      	movs	r3, #2
 800f0fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f0fc:	463b      	mov	r3, r7
 800f0fe:	4619      	mov	r1, r3
 800f100:	4805      	ldr	r0, [pc, #20]	; (800f118 <MX_ADC2_Init+0xb4>)
 800f102:	f001 fc63 	bl	80109cc <HAL_ADC_ConfigChannel>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d001      	beq.n	800f110 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800f10c:	f000 fbda 	bl	800f8c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800f110:	bf00      	nop
 800f112:	3710      	adds	r7, #16
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}
 800f118:	20004444 	.word	0x20004444
 800f11c:	40012100 	.word	0x40012100
 800f120:	0f000001 	.word	0x0f000001

0800f124 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800f128:	4b17      	ldr	r3, [pc, #92]	; (800f188 <MX_SPI3_Init+0x64>)
 800f12a:	4a18      	ldr	r2, [pc, #96]	; (800f18c <MX_SPI3_Init+0x68>)
 800f12c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800f12e:	4b16      	ldr	r3, [pc, #88]	; (800f188 <MX_SPI3_Init+0x64>)
 800f130:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f134:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800f136:	4b14      	ldr	r3, [pc, #80]	; (800f188 <MX_SPI3_Init+0x64>)
 800f138:	2200      	movs	r2, #0
 800f13a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800f13c:	4b12      	ldr	r3, [pc, #72]	; (800f188 <MX_SPI3_Init+0x64>)
 800f13e:	2200      	movs	r2, #0
 800f140:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800f142:	4b11      	ldr	r3, [pc, #68]	; (800f188 <MX_SPI3_Init+0x64>)
 800f144:	2202      	movs	r2, #2
 800f146:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800f148:	4b0f      	ldr	r3, [pc, #60]	; (800f188 <MX_SPI3_Init+0x64>)
 800f14a:	2201      	movs	r2, #1
 800f14c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800f14e:	4b0e      	ldr	r3, [pc, #56]	; (800f188 <MX_SPI3_Init+0x64>)
 800f150:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f154:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800f156:	4b0c      	ldr	r3, [pc, #48]	; (800f188 <MX_SPI3_Init+0x64>)
 800f158:	2228      	movs	r2, #40	; 0x28
 800f15a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f15c:	4b0a      	ldr	r3, [pc, #40]	; (800f188 <MX_SPI3_Init+0x64>)
 800f15e:	2200      	movs	r2, #0
 800f160:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800f162:	4b09      	ldr	r3, [pc, #36]	; (800f188 <MX_SPI3_Init+0x64>)
 800f164:	2200      	movs	r2, #0
 800f166:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f168:	4b07      	ldr	r3, [pc, #28]	; (800f188 <MX_SPI3_Init+0x64>)
 800f16a:	2200      	movs	r2, #0
 800f16c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800f16e:	4b06      	ldr	r3, [pc, #24]	; (800f188 <MX_SPI3_Init+0x64>)
 800f170:	220a      	movs	r2, #10
 800f172:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800f174:	4804      	ldr	r0, [pc, #16]	; (800f188 <MX_SPI3_Init+0x64>)
 800f176:	f003 fd7b 	bl	8012c70 <HAL_SPI_Init>
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d001      	beq.n	800f184 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800f180:	f000 fba0 	bl	800f8c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800f184:	bf00      	nop
 800f186:	bd80      	pop	{r7, pc}
 800f188:	20004524 	.word	0x20004524
 800f18c:	40003c00 	.word	0x40003c00

0800f190 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b086      	sub	sp, #24
 800f194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f196:	f107 0308 	add.w	r3, r7, #8
 800f19a:	2200      	movs	r2, #0
 800f19c:	601a      	str	r2, [r3, #0]
 800f19e:	605a      	str	r2, [r3, #4]
 800f1a0:	609a      	str	r2, [r3, #8]
 800f1a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f1a4:	463b      	mov	r3, r7
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	601a      	str	r2, [r3, #0]
 800f1aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800f1ac:	4b1e      	ldr	r3, [pc, #120]	; (800f228 <MX_TIM1_Init+0x98>)
 800f1ae:	4a1f      	ldr	r2, [pc, #124]	; (800f22c <MX_TIM1_Init+0x9c>)
 800f1b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800f1b2:	4b1d      	ldr	r3, [pc, #116]	; (800f228 <MX_TIM1_Init+0x98>)
 800f1b4:	22a7      	movs	r2, #167	; 0xa7
 800f1b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f1b8:	4b1b      	ldr	r3, [pc, #108]	; (800f228 <MX_TIM1_Init+0x98>)
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800f1be:	4b1a      	ldr	r3, [pc, #104]	; (800f228 <MX_TIM1_Init+0x98>)
 800f1c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f1c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f1c6:	4b18      	ldr	r3, [pc, #96]	; (800f228 <MX_TIM1_Init+0x98>)
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800f1cc:	4b16      	ldr	r3, [pc, #88]	; (800f228 <MX_TIM1_Init+0x98>)
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f1d2:	4b15      	ldr	r3, [pc, #84]	; (800f228 <MX_TIM1_Init+0x98>)
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800f1d8:	4813      	ldr	r0, [pc, #76]	; (800f228 <MX_TIM1_Init+0x98>)
 800f1da:	f004 fa9d 	bl	8013718 <HAL_TIM_Base_Init>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d001      	beq.n	800f1e8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800f1e4:	f000 fb6e 	bl	800f8c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f1e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f1ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800f1ee:	f107 0308 	add.w	r3, r7, #8
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	480c      	ldr	r0, [pc, #48]	; (800f228 <MX_TIM1_Init+0x98>)
 800f1f6:	f005 f821 	bl	801423c <HAL_TIM_ConfigClockSource>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d001      	beq.n	800f204 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800f200:	f000 fb60 	bl	800f8c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f204:	2300      	movs	r3, #0
 800f206:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f208:	2300      	movs	r3, #0
 800f20a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800f20c:	463b      	mov	r3, r7
 800f20e:	4619      	mov	r1, r3
 800f210:	4805      	ldr	r0, [pc, #20]	; (800f228 <MX_TIM1_Init+0x98>)
 800f212:	f005 fccd 	bl	8014bb0 <HAL_TIMEx_MasterConfigSynchronization>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d001      	beq.n	800f220 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800f21c:	f000 fb52 	bl	800f8c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800f220:	bf00      	nop
 800f222:	3718      	adds	r7, #24
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}
 800f228:	20004b88 	.word	0x20004b88
 800f22c:	40010000 	.word	0x40010000

0800f230 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b08e      	sub	sp, #56	; 0x38
 800f234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f23a:	2200      	movs	r2, #0
 800f23c:	601a      	str	r2, [r3, #0]
 800f23e:	605a      	str	r2, [r3, #4]
 800f240:	609a      	str	r2, [r3, #8]
 800f242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f244:	f107 0320 	add.w	r3, r7, #32
 800f248:	2200      	movs	r2, #0
 800f24a:	601a      	str	r2, [r3, #0]
 800f24c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f24e:	1d3b      	adds	r3, r7, #4
 800f250:	2200      	movs	r2, #0
 800f252:	601a      	str	r2, [r3, #0]
 800f254:	605a      	str	r2, [r3, #4]
 800f256:	609a      	str	r2, [r3, #8]
 800f258:	60da      	str	r2, [r3, #12]
 800f25a:	611a      	str	r2, [r3, #16]
 800f25c:	615a      	str	r2, [r3, #20]
 800f25e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800f260:	4b2d      	ldr	r3, [pc, #180]	; (800f318 <MX_TIM2_Init+0xe8>)
 800f262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f266:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800f268:	4b2b      	ldr	r3, [pc, #172]	; (800f318 <MX_TIM2_Init+0xe8>)
 800f26a:	2200      	movs	r2, #0
 800f26c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f26e:	4b2a      	ldr	r3, [pc, #168]	; (800f318 <MX_TIM2_Init+0xe8>)
 800f270:	2200      	movs	r2, #0
 800f272:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800f274:	4b28      	ldr	r3, [pc, #160]	; (800f318 <MX_TIM2_Init+0xe8>)
 800f276:	f241 0267 	movw	r2, #4199	; 0x1067
 800f27a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f27c:	4b26      	ldr	r3, [pc, #152]	; (800f318 <MX_TIM2_Init+0xe8>)
 800f27e:	2200      	movs	r2, #0
 800f280:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f282:	4b25      	ldr	r3, [pc, #148]	; (800f318 <MX_TIM2_Init+0xe8>)
 800f284:	2200      	movs	r2, #0
 800f286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800f288:	4823      	ldr	r0, [pc, #140]	; (800f318 <MX_TIM2_Init+0xe8>)
 800f28a:	f004 fa45 	bl	8013718 <HAL_TIM_Base_Init>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d001      	beq.n	800f298 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800f294:	f000 fb16 	bl	800f8c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f29c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800f29e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	481c      	ldr	r0, [pc, #112]	; (800f318 <MX_TIM2_Init+0xe8>)
 800f2a6:	f004 ffc9 	bl	801423c <HAL_TIM_ConfigClockSource>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d001      	beq.n	800f2b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800f2b0:	f000 fb08 	bl	800f8c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800f2b4:	4818      	ldr	r0, [pc, #96]	; (800f318 <MX_TIM2_Init+0xe8>)
 800f2b6:	f004 fbfd 	bl	8013ab4 <HAL_TIM_PWM_Init>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d001      	beq.n	800f2c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800f2c0:	f000 fb00 	bl	800f8c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800f2cc:	f107 0320 	add.w	r3, r7, #32
 800f2d0:	4619      	mov	r1, r3
 800f2d2:	4811      	ldr	r0, [pc, #68]	; (800f318 <MX_TIM2_Init+0xe8>)
 800f2d4:	f005 fc6c 	bl	8014bb0 <HAL_TIMEx_MasterConfigSynchronization>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d001      	beq.n	800f2e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800f2de:	f000 faf1 	bl	800f8c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f2e2:	2360      	movs	r3, #96	; 0x60
 800f2e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f2f2:	1d3b      	adds	r3, r7, #4
 800f2f4:	220c      	movs	r2, #12
 800f2f6:	4619      	mov	r1, r3
 800f2f8:	4807      	ldr	r0, [pc, #28]	; (800f318 <MX_TIM2_Init+0xe8>)
 800f2fa:	f004 fed9 	bl	80140b0 <HAL_TIM_PWM_ConfigChannel>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d001      	beq.n	800f308 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800f304:	f000 fade 	bl	800f8c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800f308:	4803      	ldr	r0, [pc, #12]	; (800f318 <MX_TIM2_Init+0xe8>)
 800f30a:	f000 fd7b 	bl	800fe04 <HAL_TIM_MspPostInit>

}
 800f30e:	bf00      	nop
 800f310:	3738      	adds	r7, #56	; 0x38
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
 800f316:	bf00      	nop
 800f318:	200051b4 	.word	0x200051b4

0800f31c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b08c      	sub	sp, #48	; 0x30
 800f320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800f322:	f107 030c 	add.w	r3, r7, #12
 800f326:	2224      	movs	r2, #36	; 0x24
 800f328:	2100      	movs	r1, #0
 800f32a:	4618      	mov	r0, r3
 800f32c:	f006 fa73 	bl	8015816 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f330:	1d3b      	adds	r3, r7, #4
 800f332:	2200      	movs	r2, #0
 800f334:	601a      	str	r2, [r3, #0]
 800f336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800f338:	4b20      	ldr	r3, [pc, #128]	; (800f3bc <MX_TIM3_Init+0xa0>)
 800f33a:	4a21      	ldr	r2, [pc, #132]	; (800f3c0 <MX_TIM3_Init+0xa4>)
 800f33c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800f33e:	4b1f      	ldr	r3, [pc, #124]	; (800f3bc <MX_TIM3_Init+0xa0>)
 800f340:	2200      	movs	r2, #0
 800f342:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f344:	4b1d      	ldr	r3, [pc, #116]	; (800f3bc <MX_TIM3_Init+0xa0>)
 800f346:	2200      	movs	r2, #0
 800f348:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800f34a:	4b1c      	ldr	r3, [pc, #112]	; (800f3bc <MX_TIM3_Init+0xa0>)
 800f34c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800f350:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f352:	4b1a      	ldr	r3, [pc, #104]	; (800f3bc <MX_TIM3_Init+0xa0>)
 800f354:	2200      	movs	r2, #0
 800f356:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f358:	4b18      	ldr	r3, [pc, #96]	; (800f3bc <MX_TIM3_Init+0xa0>)
 800f35a:	2200      	movs	r2, #0
 800f35c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800f35e:	2301      	movs	r3, #1
 800f360:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800f362:	2300      	movs	r3, #0
 800f364:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800f366:	2301      	movs	r3, #1
 800f368:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800f36a:	2300      	movs	r3, #0
 800f36c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800f36e:	2300      	movs	r3, #0
 800f370:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800f372:	2300      	movs	r3, #0
 800f374:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800f376:	2301      	movs	r3, #1
 800f378:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800f37a:	2300      	movs	r3, #0
 800f37c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800f37e:	2300      	movs	r3, #0
 800f380:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800f382:	f107 030c 	add.w	r3, r7, #12
 800f386:	4619      	mov	r1, r3
 800f388:	480c      	ldr	r0, [pc, #48]	; (800f3bc <MX_TIM3_Init+0xa0>)
 800f38a:	f004 fc5f 	bl	8013c4c <HAL_TIM_Encoder_Init>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	d001      	beq.n	800f398 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800f394:	f000 fa96 	bl	800f8c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f398:	2300      	movs	r3, #0
 800f39a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f39c:	2300      	movs	r3, #0
 800f39e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800f3a0:	1d3b      	adds	r3, r7, #4
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	4805      	ldr	r0, [pc, #20]	; (800f3bc <MX_TIM3_Init+0xa0>)
 800f3a6:	f005 fc03 	bl	8014bb0 <HAL_TIMEx_MasterConfigSynchronization>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d001      	beq.n	800f3b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800f3b0:	f000 fa88 	bl	800f8c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800f3b4:	bf00      	nop
 800f3b6:	3730      	adds	r7, #48	; 0x30
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	200044e0 	.word	0x200044e0
 800f3c0:	40000400 	.word	0x40000400

0800f3c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b08c      	sub	sp, #48	; 0x30
 800f3c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800f3ca:	f107 030c 	add.w	r3, r7, #12
 800f3ce:	2224      	movs	r2, #36	; 0x24
 800f3d0:	2100      	movs	r1, #0
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f006 fa1f 	bl	8015816 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f3d8:	1d3b      	adds	r3, r7, #4
 800f3da:	2200      	movs	r2, #0
 800f3dc:	601a      	str	r2, [r3, #0]
 800f3de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800f3e0:	4b20      	ldr	r3, [pc, #128]	; (800f464 <MX_TIM4_Init+0xa0>)
 800f3e2:	4a21      	ldr	r2, [pc, #132]	; (800f468 <MX_TIM4_Init+0xa4>)
 800f3e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800f3e6:	4b1f      	ldr	r3, [pc, #124]	; (800f464 <MX_TIM4_Init+0xa0>)
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f3ec:	4b1d      	ldr	r3, [pc, #116]	; (800f464 <MX_TIM4_Init+0xa0>)
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800f3f2:	4b1c      	ldr	r3, [pc, #112]	; (800f464 <MX_TIM4_Init+0xa0>)
 800f3f4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800f3f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f3fa:	4b1a      	ldr	r3, [pc, #104]	; (800f464 <MX_TIM4_Init+0xa0>)
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f400:	4b18      	ldr	r3, [pc, #96]	; (800f464 <MX_TIM4_Init+0xa0>)
 800f402:	2200      	movs	r2, #0
 800f404:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800f406:	2301      	movs	r3, #1
 800f408:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800f40a:	2300      	movs	r3, #0
 800f40c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800f40e:	2301      	movs	r3, #1
 800f410:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800f412:	2300      	movs	r3, #0
 800f414:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800f416:	2300      	movs	r3, #0
 800f418:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800f41a:	2300      	movs	r3, #0
 800f41c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800f41e:	2301      	movs	r3, #1
 800f420:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800f422:	2300      	movs	r3, #0
 800f424:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800f426:	2300      	movs	r3, #0
 800f428:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800f42a:	f107 030c 	add.w	r3, r7, #12
 800f42e:	4619      	mov	r1, r3
 800f430:	480c      	ldr	r0, [pc, #48]	; (800f464 <MX_TIM4_Init+0xa0>)
 800f432:	f004 fc0b 	bl	8013c4c <HAL_TIM_Encoder_Init>
 800f436:	4603      	mov	r3, r0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d001      	beq.n	800f440 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800f43c:	f000 fa42 	bl	800f8c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f440:	2300      	movs	r3, #0
 800f442:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f444:	2300      	movs	r3, #0
 800f446:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800f448:	1d3b      	adds	r3, r7, #4
 800f44a:	4619      	mov	r1, r3
 800f44c:	4805      	ldr	r0, [pc, #20]	; (800f464 <MX_TIM4_Init+0xa0>)
 800f44e:	f005 fbaf 	bl	8014bb0 <HAL_TIMEx_MasterConfigSynchronization>
 800f452:	4603      	mov	r3, r0
 800f454:	2b00      	cmp	r3, #0
 800f456:	d001      	beq.n	800f45c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800f458:	f000 fa34 	bl	800f8c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800f45c:	bf00      	nop
 800f45e:	3730      	adds	r7, #48	; 0x30
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	20004404 	.word	0x20004404
 800f468:	40000800 	.word	0x40000800

0800f46c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b08e      	sub	sp, #56	; 0x38
 800f470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f476:	2200      	movs	r2, #0
 800f478:	601a      	str	r2, [r3, #0]
 800f47a:	605a      	str	r2, [r3, #4]
 800f47c:	609a      	str	r2, [r3, #8]
 800f47e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f480:	f107 0320 	add.w	r3, r7, #32
 800f484:	2200      	movs	r2, #0
 800f486:	601a      	str	r2, [r3, #0]
 800f488:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f48a:	1d3b      	adds	r3, r7, #4
 800f48c:	2200      	movs	r2, #0
 800f48e:	601a      	str	r2, [r3, #0]
 800f490:	605a      	str	r2, [r3, #4]
 800f492:	609a      	str	r2, [r3, #8]
 800f494:	60da      	str	r2, [r3, #12]
 800f496:	611a      	str	r2, [r3, #16]
 800f498:	615a      	str	r2, [r3, #20]
 800f49a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800f49c:	4b2c      	ldr	r3, [pc, #176]	; (800f550 <MX_TIM5_Init+0xe4>)
 800f49e:	4a2d      	ldr	r2, [pc, #180]	; (800f554 <MX_TIM5_Init+0xe8>)
 800f4a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800f4a2:	4b2b      	ldr	r3, [pc, #172]	; (800f550 <MX_TIM5_Init+0xe4>)
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f4a8:	4b29      	ldr	r3, [pc, #164]	; (800f550 <MX_TIM5_Init+0xe4>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800f4ae:	4b28      	ldr	r3, [pc, #160]	; (800f550 <MX_TIM5_Init+0xe4>)
 800f4b0:	f241 0267 	movw	r2, #4199	; 0x1067
 800f4b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f4b6:	4b26      	ldr	r3, [pc, #152]	; (800f550 <MX_TIM5_Init+0xe4>)
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f4bc:	4b24      	ldr	r3, [pc, #144]	; (800f550 <MX_TIM5_Init+0xe4>)
 800f4be:	2200      	movs	r2, #0
 800f4c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800f4c2:	4823      	ldr	r0, [pc, #140]	; (800f550 <MX_TIM5_Init+0xe4>)
 800f4c4:	f004 f928 	bl	8013718 <HAL_TIM_Base_Init>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d001      	beq.n	800f4d2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800f4ce:	f000 f9f9 	bl	800f8c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f4d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f4d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800f4d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4dc:	4619      	mov	r1, r3
 800f4de:	481c      	ldr	r0, [pc, #112]	; (800f550 <MX_TIM5_Init+0xe4>)
 800f4e0:	f004 feac 	bl	801423c <HAL_TIM_ConfigClockSource>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d001      	beq.n	800f4ee <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800f4ea:	f000 f9eb 	bl	800f8c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800f4ee:	4818      	ldr	r0, [pc, #96]	; (800f550 <MX_TIM5_Init+0xe4>)
 800f4f0:	f004 fae0 	bl	8013ab4 <HAL_TIM_PWM_Init>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d001      	beq.n	800f4fe <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800f4fa:	f000 f9e3 	bl	800f8c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f4fe:	2300      	movs	r3, #0
 800f500:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f502:	2300      	movs	r3, #0
 800f504:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800f506:	f107 0320 	add.w	r3, r7, #32
 800f50a:	4619      	mov	r1, r3
 800f50c:	4810      	ldr	r0, [pc, #64]	; (800f550 <MX_TIM5_Init+0xe4>)
 800f50e:	f005 fb4f 	bl	8014bb0 <HAL_TIMEx_MasterConfigSynchronization>
 800f512:	4603      	mov	r3, r0
 800f514:	2b00      	cmp	r3, #0
 800f516:	d001      	beq.n	800f51c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800f518:	f000 f9d4 	bl	800f8c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f51c:	2360      	movs	r3, #96	; 0x60
 800f51e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f520:	2300      	movs	r3, #0
 800f522:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f524:	2300      	movs	r3, #0
 800f526:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f528:	2300      	movs	r3, #0
 800f52a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f52c:	1d3b      	adds	r3, r7, #4
 800f52e:	2204      	movs	r2, #4
 800f530:	4619      	mov	r1, r3
 800f532:	4807      	ldr	r0, [pc, #28]	; (800f550 <MX_TIM5_Init+0xe4>)
 800f534:	f004 fdbc 	bl	80140b0 <HAL_TIM_PWM_ConfigChannel>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d001      	beq.n	800f542 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800f53e:	f000 f9c1 	bl	800f8c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800f542:	4803      	ldr	r0, [pc, #12]	; (800f550 <MX_TIM5_Init+0xe4>)
 800f544:	f000 fc5e 	bl	800fe04 <HAL_TIM_MspPostInit>

}
 800f548:	bf00      	nop
 800f54a:	3738      	adds	r7, #56	; 0x38
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}
 800f550:	2000449c 	.word	0x2000449c
 800f554:	40000c00 	.word	0x40000c00

0800f558 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b096      	sub	sp, #88	; 0x58
 800f55c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f55e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f562:	2200      	movs	r2, #0
 800f564:	601a      	str	r2, [r3, #0]
 800f566:	605a      	str	r2, [r3, #4]
 800f568:	609a      	str	r2, [r3, #8]
 800f56a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f56c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f570:	2200      	movs	r2, #0
 800f572:	601a      	str	r2, [r3, #0]
 800f574:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f57a:	2200      	movs	r2, #0
 800f57c:	601a      	str	r2, [r3, #0]
 800f57e:	605a      	str	r2, [r3, #4]
 800f580:	609a      	str	r2, [r3, #8]
 800f582:	60da      	str	r2, [r3, #12]
 800f584:	611a      	str	r2, [r3, #16]
 800f586:	615a      	str	r2, [r3, #20]
 800f588:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f58a:	1d3b      	adds	r3, r7, #4
 800f58c:	2220      	movs	r2, #32
 800f58e:	2100      	movs	r1, #0
 800f590:	4618      	mov	r0, r3
 800f592:	f006 f940 	bl	8015816 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800f596:	4b42      	ldr	r3, [pc, #264]	; (800f6a0 <MX_TIM8_Init+0x148>)
 800f598:	4a42      	ldr	r2, [pc, #264]	; (800f6a4 <MX_TIM8_Init+0x14c>)
 800f59a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800f59c:	4b40      	ldr	r3, [pc, #256]	; (800f6a0 <MX_TIM8_Init+0x148>)
 800f59e:	22a7      	movs	r2, #167	; 0xa7
 800f5a0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f5a2:	4b3f      	ldr	r3, [pc, #252]	; (800f6a0 <MX_TIM8_Init+0x148>)
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800f5a8:	4b3d      	ldr	r3, [pc, #244]	; (800f6a0 <MX_TIM8_Init+0x148>)
 800f5aa:	2231      	movs	r2, #49	; 0x31
 800f5ac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f5ae:	4b3c      	ldr	r3, [pc, #240]	; (800f6a0 <MX_TIM8_Init+0x148>)
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800f5b4:	4b3a      	ldr	r3, [pc, #232]	; (800f6a0 <MX_TIM8_Init+0x148>)
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800f5ba:	4b39      	ldr	r3, [pc, #228]	; (800f6a0 <MX_TIM8_Init+0x148>)
 800f5bc:	2280      	movs	r2, #128	; 0x80
 800f5be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800f5c0:	4837      	ldr	r0, [pc, #220]	; (800f6a0 <MX_TIM8_Init+0x148>)
 800f5c2:	f004 f8a9 	bl	8013718 <HAL_TIM_Base_Init>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d001      	beq.n	800f5d0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800f5cc:	f000 f97a 	bl	800f8c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f5d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f5d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800f5d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f5da:	4619      	mov	r1, r3
 800f5dc:	4830      	ldr	r0, [pc, #192]	; (800f6a0 <MX_TIM8_Init+0x148>)
 800f5de:	f004 fe2d 	bl	801423c <HAL_TIM_ConfigClockSource>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d001      	beq.n	800f5ec <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800f5e8:	f000 f96c 	bl	800f8c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800f5ec:	482c      	ldr	r0, [pc, #176]	; (800f6a0 <MX_TIM8_Init+0x148>)
 800f5ee:	f004 f90d 	bl	801380c <HAL_TIM_OC_Init>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d001      	beq.n	800f5fc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800f5f8:	f000 f964 	bl	800f8c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f600:	2300      	movs	r3, #0
 800f602:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800f604:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f608:	4619      	mov	r1, r3
 800f60a:	4825      	ldr	r0, [pc, #148]	; (800f6a0 <MX_TIM8_Init+0x148>)
 800f60c:	f005 fad0 	bl	8014bb0 <HAL_TIMEx_MasterConfigSynchronization>
 800f610:	4603      	mov	r3, r0
 800f612:	2b00      	cmp	r3, #0
 800f614:	d001      	beq.n	800f61a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800f616:	f000 f955 	bl	800f8c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800f61a:	2330      	movs	r3, #48	; 0x30
 800f61c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800f61e:	2318      	movs	r3, #24
 800f620:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f622:	2300      	movs	r3, #0
 800f624:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f626:	2300      	movs	r3, #0
 800f628:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f62a:	2300      	movs	r3, #0
 800f62c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f62e:	2300      	movs	r3, #0
 800f630:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f632:	2300      	movs	r3, #0
 800f634:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f63a:	2200      	movs	r2, #0
 800f63c:	4619      	mov	r1, r3
 800f63e:	4818      	ldr	r0, [pc, #96]	; (800f6a0 <MX_TIM8_Init+0x148>)
 800f640:	f004 fcd6 	bl	8013ff0 <HAL_TIM_OC_ConfigChannel>
 800f644:	4603      	mov	r3, r0
 800f646:	2b00      	cmp	r3, #0
 800f648:	d001      	beq.n	800f64e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800f64a:	f000 f93b 	bl	800f8c4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800f64e:	4b14      	ldr	r3, [pc, #80]	; (800f6a0 <MX_TIM8_Init+0x148>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	699a      	ldr	r2, [r3, #24]
 800f654:	4b12      	ldr	r3, [pc, #72]	; (800f6a0 <MX_TIM8_Init+0x148>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f042 0208 	orr.w	r2, r2, #8
 800f65c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f65e:	2300      	movs	r3, #0
 800f660:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f662:	2300      	movs	r3, #0
 800f664:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f666:	2300      	movs	r3, #0
 800f668:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f66a:	2300      	movs	r3, #0
 800f66c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f66e:	2300      	movs	r3, #0
 800f670:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f676:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f678:	2300      	movs	r3, #0
 800f67a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800f67c:	1d3b      	adds	r3, r7, #4
 800f67e:	4619      	mov	r1, r3
 800f680:	4807      	ldr	r0, [pc, #28]	; (800f6a0 <MX_TIM8_Init+0x148>)
 800f682:	f005 fb11 	bl	8014ca8 <HAL_TIMEx_ConfigBreakDeadTime>
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d001      	beq.n	800f690 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800f68c:	f000 f91a 	bl	800f8c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800f690:	4803      	ldr	r0, [pc, #12]	; (800f6a0 <MX_TIM8_Init+0x148>)
 800f692:	f000 fbb7 	bl	800fe04 <HAL_TIM_MspPostInit>

}
 800f696:	bf00      	nop
 800f698:	3758      	adds	r7, #88	; 0x58
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	200043c0 	.word	0x200043c0
 800f6a4:	40010400 	.word	0x40010400

0800f6a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800f6ac:	4b11      	ldr	r3, [pc, #68]	; (800f6f4 <MX_USART1_UART_Init+0x4c>)
 800f6ae:	4a12      	ldr	r2, [pc, #72]	; (800f6f8 <MX_USART1_UART_Init+0x50>)
 800f6b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800f6b2:	4b10      	ldr	r3, [pc, #64]	; (800f6f4 <MX_USART1_UART_Init+0x4c>)
 800f6b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800f6b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800f6ba:	4b0e      	ldr	r3, [pc, #56]	; (800f6f4 <MX_USART1_UART_Init+0x4c>)
 800f6bc:	2200      	movs	r2, #0
 800f6be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800f6c0:	4b0c      	ldr	r3, [pc, #48]	; (800f6f4 <MX_USART1_UART_Init+0x4c>)
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800f6c6:	4b0b      	ldr	r3, [pc, #44]	; (800f6f4 <MX_USART1_UART_Init+0x4c>)
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800f6cc:	4b09      	ldr	r3, [pc, #36]	; (800f6f4 <MX_USART1_UART_Init+0x4c>)
 800f6ce:	220c      	movs	r2, #12
 800f6d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f6d2:	4b08      	ldr	r3, [pc, #32]	; (800f6f4 <MX_USART1_UART_Init+0x4c>)
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800f6d8:	4b06      	ldr	r3, [pc, #24]	; (800f6f4 <MX_USART1_UART_Init+0x4c>)
 800f6da:	2200      	movs	r2, #0
 800f6dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800f6de:	4805      	ldr	r0, [pc, #20]	; (800f6f4 <MX_USART1_UART_Init+0x4c>)
 800f6e0:	f005 fb6d 	bl	8014dbe <HAL_UART_Init>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d001      	beq.n	800f6ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800f6ea:	f000 f8eb 	bl	800f8c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800f6ee:	bf00      	nop
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	200045cc 	.word	0x200045cc
 800f6f8:	40011000 	.word	0x40011000

0800f6fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800f702:	2300      	movs	r3, #0
 800f704:	607b      	str	r3, [r7, #4]
 800f706:	4b10      	ldr	r3, [pc, #64]	; (800f748 <MX_DMA_Init+0x4c>)
 800f708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f70a:	4a0f      	ldr	r2, [pc, #60]	; (800f748 <MX_DMA_Init+0x4c>)
 800f70c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f710:	6313      	str	r3, [r2, #48]	; 0x30
 800f712:	4b0d      	ldr	r3, [pc, #52]	; (800f748 <MX_DMA_Init+0x4c>)
 800f714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f71a:	607b      	str	r3, [r7, #4]
 800f71c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800f71e:	2200      	movs	r2, #0
 800f720:	2100      	movs	r1, #0
 800f722:	2038      	movs	r0, #56	; 0x38
 800f724:	f001 fcd7 	bl	80110d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800f728:	2038      	movs	r0, #56	; 0x38
 800f72a:	f001 fcf0 	bl	801110e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800f72e:	2200      	movs	r2, #0
 800f730:	2100      	movs	r1, #0
 800f732:	203a      	movs	r0, #58	; 0x3a
 800f734:	f001 fccf 	bl	80110d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800f738:	203a      	movs	r0, #58	; 0x3a
 800f73a:	f001 fce8 	bl	801110e <HAL_NVIC_EnableIRQ>

}
 800f73e:	bf00      	nop
 800f740:	3708      	adds	r7, #8
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}
 800f746:	bf00      	nop
 800f748:	40023800 	.word	0x40023800

0800f74c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b08a      	sub	sp, #40	; 0x28
 800f750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f752:	f107 0314 	add.w	r3, r7, #20
 800f756:	2200      	movs	r2, #0
 800f758:	601a      	str	r2, [r3, #0]
 800f75a:	605a      	str	r2, [r3, #4]
 800f75c:	609a      	str	r2, [r3, #8]
 800f75e:	60da      	str	r2, [r3, #12]
 800f760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f762:	2300      	movs	r3, #0
 800f764:	613b      	str	r3, [r7, #16]
 800f766:	4b52      	ldr	r3, [pc, #328]	; (800f8b0 <MX_GPIO_Init+0x164>)
 800f768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f76a:	4a51      	ldr	r2, [pc, #324]	; (800f8b0 <MX_GPIO_Init+0x164>)
 800f76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f770:	6313      	str	r3, [r2, #48]	; 0x30
 800f772:	4b4f      	ldr	r3, [pc, #316]	; (800f8b0 <MX_GPIO_Init+0x164>)
 800f774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f77a:	613b      	str	r3, [r7, #16]
 800f77c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f77e:	2300      	movs	r3, #0
 800f780:	60fb      	str	r3, [r7, #12]
 800f782:	4b4b      	ldr	r3, [pc, #300]	; (800f8b0 <MX_GPIO_Init+0x164>)
 800f784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f786:	4a4a      	ldr	r2, [pc, #296]	; (800f8b0 <MX_GPIO_Init+0x164>)
 800f788:	f043 0304 	orr.w	r3, r3, #4
 800f78c:	6313      	str	r3, [r2, #48]	; 0x30
 800f78e:	4b48      	ldr	r3, [pc, #288]	; (800f8b0 <MX_GPIO_Init+0x164>)
 800f790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f792:	f003 0304 	and.w	r3, r3, #4
 800f796:	60fb      	str	r3, [r7, #12]
 800f798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f79a:	2300      	movs	r3, #0
 800f79c:	60bb      	str	r3, [r7, #8]
 800f79e:	4b44      	ldr	r3, [pc, #272]	; (800f8b0 <MX_GPIO_Init+0x164>)
 800f7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7a2:	4a43      	ldr	r2, [pc, #268]	; (800f8b0 <MX_GPIO_Init+0x164>)
 800f7a4:	f043 0301 	orr.w	r3, r3, #1
 800f7a8:	6313      	str	r3, [r2, #48]	; 0x30
 800f7aa:	4b41      	ldr	r3, [pc, #260]	; (800f8b0 <MX_GPIO_Init+0x164>)
 800f7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7ae:	f003 0301 	and.w	r3, r3, #1
 800f7b2:	60bb      	str	r3, [r7, #8]
 800f7b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	607b      	str	r3, [r7, #4]
 800f7ba:	4b3d      	ldr	r3, [pc, #244]	; (800f8b0 <MX_GPIO_Init+0x164>)
 800f7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7be:	4a3c      	ldr	r2, [pc, #240]	; (800f8b0 <MX_GPIO_Init+0x164>)
 800f7c0:	f043 0302 	orr.w	r3, r3, #2
 800f7c4:	6313      	str	r3, [r2, #48]	; 0x30
 800f7c6:	4b3a      	ldr	r3, [pc, #232]	; (800f8b0 <MX_GPIO_Init+0x164>)
 800f7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7ca:	f003 0302 	and.w	r3, r3, #2
 800f7ce:	607b      	str	r3, [r7, #4]
 800f7d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	603b      	str	r3, [r7, #0]
 800f7d6:	4b36      	ldr	r3, [pc, #216]	; (800f8b0 <MX_GPIO_Init+0x164>)
 800f7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7da:	4a35      	ldr	r2, [pc, #212]	; (800f8b0 <MX_GPIO_Init+0x164>)
 800f7dc:	f043 0308 	orr.w	r3, r3, #8
 800f7e0:	6313      	str	r3, [r2, #48]	; 0x30
 800f7e2:	4b33      	ldr	r3, [pc, #204]	; (800f8b0 <MX_GPIO_Init+0x164>)
 800f7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7e6:	f003 0308 	and.w	r3, r3, #8
 800f7ea:	603b      	str	r3, [r7, #0]
 800f7ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f44f 7141 	mov.w	r1, #772	; 0x304
 800f7f4:	482f      	ldr	r0, [pc, #188]	; (800f8b4 <MX_GPIO_Init+0x168>)
 800f7f6:	f002 fdbf 	bl	8012378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	2105      	movs	r1, #5
 800f7fe:	482e      	ldr	r0, [pc, #184]	; (800f8b8 <MX_GPIO_Init+0x16c>)
 800f800:	f002 fdba 	bl	8012378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800f804:	2200      	movs	r2, #0
 800f806:	2104      	movs	r1, #4
 800f808:	482c      	ldr	r0, [pc, #176]	; (800f8bc <MX_GPIO_Init+0x170>)
 800f80a:	f002 fdb5 	bl	8012378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f80e:	2200      	movs	r2, #0
 800f810:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f814:	482a      	ldr	r0, [pc, #168]	; (800f8c0 <MX_GPIO_Init+0x174>)
 800f816:	f002 fdaf 	bl	8012378 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800f81a:	f44f 7341 	mov.w	r3, #772	; 0x304
 800f81e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f820:	2301      	movs	r3, #1
 800f822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f824:	2300      	movs	r3, #0
 800f826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f828:	2300      	movs	r3, #0
 800f82a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f82c:	f107 0314 	add.w	r3, r7, #20
 800f830:	4619      	mov	r1, r3
 800f832:	4820      	ldr	r0, [pc, #128]	; (800f8b4 <MX_GPIO_Init+0x168>)
 800f834:	f002 fbee 	bl	8012014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800f838:	2305      	movs	r3, #5
 800f83a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f83c:	2301      	movs	r3, #1
 800f83e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f840:	2300      	movs	r3, #0
 800f842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f844:	2300      	movs	r3, #0
 800f846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f848:	f107 0314 	add.w	r3, r7, #20
 800f84c:	4619      	mov	r1, r3
 800f84e:	481a      	ldr	r0, [pc, #104]	; (800f8b8 <MX_GPIO_Init+0x16c>)
 800f850:	f002 fbe0 	bl	8012014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800f854:	f241 0304 	movw	r3, #4100	; 0x1004
 800f858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f85a:	2300      	movs	r3, #0
 800f85c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f85e:	2300      	movs	r3, #0
 800f860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f862:	f107 0314 	add.w	r3, r7, #20
 800f866:	4619      	mov	r1, r3
 800f868:	4815      	ldr	r0, [pc, #84]	; (800f8c0 <MX_GPIO_Init+0x174>)
 800f86a:	f002 fbd3 	bl	8012014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800f86e:	2304      	movs	r3, #4
 800f870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f872:	2301      	movs	r3, #1
 800f874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f876:	2300      	movs	r3, #0
 800f878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f87a:	2300      	movs	r3, #0
 800f87c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f87e:	f107 0314 	add.w	r3, r7, #20
 800f882:	4619      	mov	r1, r3
 800f884:	480d      	ldr	r0, [pc, #52]	; (800f8bc <MX_GPIO_Init+0x170>)
 800f886:	f002 fbc5 	bl	8012014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f88a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f88e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f890:	2301      	movs	r3, #1
 800f892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f894:	2300      	movs	r3, #0
 800f896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f898:	2300      	movs	r3, #0
 800f89a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f89c:	f107 0314 	add.w	r3, r7, #20
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	4807      	ldr	r0, [pc, #28]	; (800f8c0 <MX_GPIO_Init+0x174>)
 800f8a4:	f002 fbb6 	bl	8012014 <HAL_GPIO_Init>

}
 800f8a8:	bf00      	nop
 800f8aa:	3728      	adds	r7, #40	; 0x28
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}
 800f8b0:	40023800 	.word	0x40023800
 800f8b4:	40020800 	.word	0x40020800
 800f8b8:	40020000 	.word	0x40020000
 800f8bc:	40020c00 	.word	0x40020c00
 800f8c0:	40020400 	.word	0x40020400

0800f8c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800f8c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800f8ca:	e7fe      	b.n	800f8ca <Error_Handler+0x6>

0800f8cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	607b      	str	r3, [r7, #4]
 800f8d6:	4b13      	ldr	r3, [pc, #76]	; (800f924 <HAL_MspInit+0x58>)
 800f8d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8da:	4a12      	ldr	r2, [pc, #72]	; (800f924 <HAL_MspInit+0x58>)
 800f8dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f8e0:	6453      	str	r3, [r2, #68]	; 0x44
 800f8e2:	4b10      	ldr	r3, [pc, #64]	; (800f924 <HAL_MspInit+0x58>)
 800f8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f8ea:	607b      	str	r3, [r7, #4]
 800f8ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	603b      	str	r3, [r7, #0]
 800f8f2:	4b0c      	ldr	r3, [pc, #48]	; (800f924 <HAL_MspInit+0x58>)
 800f8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8f6:	4a0b      	ldr	r2, [pc, #44]	; (800f924 <HAL_MspInit+0x58>)
 800f8f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8fc:	6413      	str	r3, [r2, #64]	; 0x40
 800f8fe:	4b09      	ldr	r3, [pc, #36]	; (800f924 <HAL_MspInit+0x58>)
 800f900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f906:	603b      	str	r3, [r7, #0]
 800f908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800f90a:	2200      	movs	r2, #0
 800f90c:	2100      	movs	r1, #0
 800f90e:	2004      	movs	r0, #4
 800f910:	f001 fbe1 	bl	80110d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800f914:	2004      	movs	r0, #4
 800f916:	f001 fbfa 	bl	801110e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f91a:	bf00      	nop
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	40023800 	.word	0x40023800

0800f928 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b08c      	sub	sp, #48	; 0x30
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f930:	f107 031c 	add.w	r3, r7, #28
 800f934:	2200      	movs	r2, #0
 800f936:	601a      	str	r2, [r3, #0]
 800f938:	605a      	str	r2, [r3, #4]
 800f93a:	609a      	str	r2, [r3, #8]
 800f93c:	60da      	str	r2, [r3, #12]
 800f93e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	4a73      	ldr	r2, [pc, #460]	; (800fb14 <HAL_ADC_MspInit+0x1ec>)
 800f946:	4293      	cmp	r3, r2
 800f948:	d17a      	bne.n	800fa40 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f94a:	2300      	movs	r3, #0
 800f94c:	61bb      	str	r3, [r7, #24]
 800f94e:	4b72      	ldr	r3, [pc, #456]	; (800fb18 <HAL_ADC_MspInit+0x1f0>)
 800f950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f952:	4a71      	ldr	r2, [pc, #452]	; (800fb18 <HAL_ADC_MspInit+0x1f0>)
 800f954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f958:	6453      	str	r3, [r2, #68]	; 0x44
 800f95a:	4b6f      	ldr	r3, [pc, #444]	; (800fb18 <HAL_ADC_MspInit+0x1f0>)
 800f95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f95e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f962:	61bb      	str	r3, [r7, #24]
 800f964:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f966:	2300      	movs	r3, #0
 800f968:	617b      	str	r3, [r7, #20]
 800f96a:	4b6b      	ldr	r3, [pc, #428]	; (800fb18 <HAL_ADC_MspInit+0x1f0>)
 800f96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f96e:	4a6a      	ldr	r2, [pc, #424]	; (800fb18 <HAL_ADC_MspInit+0x1f0>)
 800f970:	f043 0304 	orr.w	r3, r3, #4
 800f974:	6313      	str	r3, [r2, #48]	; 0x30
 800f976:	4b68      	ldr	r3, [pc, #416]	; (800fb18 <HAL_ADC_MspInit+0x1f0>)
 800f978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f97a:	f003 0304 	and.w	r3, r3, #4
 800f97e:	617b      	str	r3, [r7, #20]
 800f980:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f982:	2300      	movs	r3, #0
 800f984:	613b      	str	r3, [r7, #16]
 800f986:	4b64      	ldr	r3, [pc, #400]	; (800fb18 <HAL_ADC_MspInit+0x1f0>)
 800f988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f98a:	4a63      	ldr	r2, [pc, #396]	; (800fb18 <HAL_ADC_MspInit+0x1f0>)
 800f98c:	f043 0302 	orr.w	r3, r3, #2
 800f990:	6313      	str	r3, [r2, #48]	; 0x30
 800f992:	4b61      	ldr	r3, [pc, #388]	; (800fb18 <HAL_ADC_MspInit+0x1f0>)
 800f994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f996:	f003 0302 	and.w	r3, r3, #2
 800f99a:	613b      	str	r3, [r7, #16]
 800f99c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800f99e:	2311      	movs	r3, #17
 800f9a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f9a2:	2303      	movs	r3, #3
 800f9a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f9aa:	f107 031c 	add.w	r3, r7, #28
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	485a      	ldr	r0, [pc, #360]	; (800fb1c <HAL_ADC_MspInit+0x1f4>)
 800f9b2:	f002 fb2f 	bl	8012014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800f9b6:	2302      	movs	r3, #2
 800f9b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f9ba:	2303      	movs	r3, #3
 800f9bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f9c2:	f107 031c 	add.w	r3, r7, #28
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	4855      	ldr	r0, [pc, #340]	; (800fb20 <HAL_ADC_MspInit+0x1f8>)
 800f9ca:	f002 fb23 	bl	8012014 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800f9ce:	4b55      	ldr	r3, [pc, #340]	; (800fb24 <HAL_ADC_MspInit+0x1fc>)
 800f9d0:	4a55      	ldr	r2, [pc, #340]	; (800fb28 <HAL_ADC_MspInit+0x200>)
 800f9d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800f9d4:	4b53      	ldr	r3, [pc, #332]	; (800fb24 <HAL_ADC_MspInit+0x1fc>)
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f9da:	4b52      	ldr	r3, [pc, #328]	; (800fb24 <HAL_ADC_MspInit+0x1fc>)
 800f9dc:	2200      	movs	r2, #0
 800f9de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f9e0:	4b50      	ldr	r3, [pc, #320]	; (800fb24 <HAL_ADC_MspInit+0x1fc>)
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800f9e6:	4b4f      	ldr	r3, [pc, #316]	; (800fb24 <HAL_ADC_MspInit+0x1fc>)
 800f9e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f9ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f9ee:	4b4d      	ldr	r3, [pc, #308]	; (800fb24 <HAL_ADC_MspInit+0x1fc>)
 800f9f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f9f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f9f6:	4b4b      	ldr	r3, [pc, #300]	; (800fb24 <HAL_ADC_MspInit+0x1fc>)
 800f9f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f9fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800f9fe:	4b49      	ldr	r3, [pc, #292]	; (800fb24 <HAL_ADC_MspInit+0x1fc>)
 800fa00:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fa04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800fa06:	4b47      	ldr	r3, [pc, #284]	; (800fb24 <HAL_ADC_MspInit+0x1fc>)
 800fa08:	2200      	movs	r2, #0
 800fa0a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fa0c:	4b45      	ldr	r3, [pc, #276]	; (800fb24 <HAL_ADC_MspInit+0x1fc>)
 800fa0e:	2200      	movs	r2, #0
 800fa10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800fa12:	4844      	ldr	r0, [pc, #272]	; (800fb24 <HAL_ADC_MspInit+0x1fc>)
 800fa14:	f001 fb96 	bl	8011144 <HAL_DMA_Init>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d001      	beq.n	800fa22 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800fa1e:	f7ff ff51 	bl	800f8c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4a3f      	ldr	r2, [pc, #252]	; (800fb24 <HAL_ADC_MspInit+0x1fc>)
 800fa26:	639a      	str	r2, [r3, #56]	; 0x38
 800fa28:	4a3e      	ldr	r2, [pc, #248]	; (800fb24 <HAL_ADC_MspInit+0x1fc>)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800fa2e:	2200      	movs	r2, #0
 800fa30:	2100      	movs	r1, #0
 800fa32:	2012      	movs	r0, #18
 800fa34:	f001 fb4f 	bl	80110d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800fa38:	2012      	movs	r0, #18
 800fa3a:	f001 fb68 	bl	801110e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800fa3e:	e065      	b.n	800fb0c <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4a39      	ldr	r2, [pc, #228]	; (800fb2c <HAL_ADC_MspInit+0x204>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d160      	bne.n	800fb0c <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	60fb      	str	r3, [r7, #12]
 800fa4e:	4b32      	ldr	r3, [pc, #200]	; (800fb18 <HAL_ADC_MspInit+0x1f0>)
 800fa50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa52:	4a31      	ldr	r2, [pc, #196]	; (800fb18 <HAL_ADC_MspInit+0x1f0>)
 800fa54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fa58:	6453      	str	r3, [r2, #68]	; 0x44
 800fa5a:	4b2f      	ldr	r3, [pc, #188]	; (800fb18 <HAL_ADC_MspInit+0x1f0>)
 800fa5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fa62:	60fb      	str	r3, [r7, #12]
 800fa64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fa66:	2300      	movs	r3, #0
 800fa68:	60bb      	str	r3, [r7, #8]
 800fa6a:	4b2b      	ldr	r3, [pc, #172]	; (800fb18 <HAL_ADC_MspInit+0x1f0>)
 800fa6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa6e:	4a2a      	ldr	r2, [pc, #168]	; (800fb18 <HAL_ADC_MspInit+0x1f0>)
 800fa70:	f043 0304 	orr.w	r3, r3, #4
 800fa74:	6313      	str	r3, [r2, #48]	; 0x30
 800fa76:	4b28      	ldr	r3, [pc, #160]	; (800fb18 <HAL_ADC_MspInit+0x1f0>)
 800fa78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa7a:	f003 0304 	and.w	r3, r3, #4
 800fa7e:	60bb      	str	r3, [r7, #8]
 800fa80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800fa82:	2322      	movs	r3, #34	; 0x22
 800fa84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fa86:	2303      	movs	r3, #3
 800fa88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fa8e:	f107 031c 	add.w	r3, r7, #28
 800fa92:	4619      	mov	r1, r3
 800fa94:	4821      	ldr	r0, [pc, #132]	; (800fb1c <HAL_ADC_MspInit+0x1f4>)
 800fa96:	f002 fabd 	bl	8012014 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800fa9a:	4b25      	ldr	r3, [pc, #148]	; (800fb30 <HAL_ADC_MspInit+0x208>)
 800fa9c:	4a25      	ldr	r2, [pc, #148]	; (800fb34 <HAL_ADC_MspInit+0x20c>)
 800fa9e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800faa0:	4b23      	ldr	r3, [pc, #140]	; (800fb30 <HAL_ADC_MspInit+0x208>)
 800faa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800faa6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800faa8:	4b21      	ldr	r3, [pc, #132]	; (800fb30 <HAL_ADC_MspInit+0x208>)
 800faaa:	2200      	movs	r2, #0
 800faac:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800faae:	4b20      	ldr	r3, [pc, #128]	; (800fb30 <HAL_ADC_MspInit+0x208>)
 800fab0:	2200      	movs	r2, #0
 800fab2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800fab4:	4b1e      	ldr	r3, [pc, #120]	; (800fb30 <HAL_ADC_MspInit+0x208>)
 800fab6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800faba:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800fabc:	4b1c      	ldr	r3, [pc, #112]	; (800fb30 <HAL_ADC_MspInit+0x208>)
 800fabe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fac2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800fac4:	4b1a      	ldr	r3, [pc, #104]	; (800fb30 <HAL_ADC_MspInit+0x208>)
 800fac6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800faca:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800facc:	4b18      	ldr	r3, [pc, #96]	; (800fb30 <HAL_ADC_MspInit+0x208>)
 800face:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fad2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800fad4:	4b16      	ldr	r3, [pc, #88]	; (800fb30 <HAL_ADC_MspInit+0x208>)
 800fad6:	2200      	movs	r2, #0
 800fad8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fada:	4b15      	ldr	r3, [pc, #84]	; (800fb30 <HAL_ADC_MspInit+0x208>)
 800fadc:	2200      	movs	r2, #0
 800fade:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800fae0:	4813      	ldr	r0, [pc, #76]	; (800fb30 <HAL_ADC_MspInit+0x208>)
 800fae2:	f001 fb2f 	bl	8011144 <HAL_DMA_Init>
 800fae6:	4603      	mov	r3, r0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d001      	beq.n	800faf0 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 800faec:	f7ff feea 	bl	800f8c4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	4a0f      	ldr	r2, [pc, #60]	; (800fb30 <HAL_ADC_MspInit+0x208>)
 800faf4:	639a      	str	r2, [r3, #56]	; 0x38
 800faf6:	4a0e      	ldr	r2, [pc, #56]	; (800fb30 <HAL_ADC_MspInit+0x208>)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800fafc:	2200      	movs	r2, #0
 800fafe:	2100      	movs	r1, #0
 800fb00:	2012      	movs	r0, #18
 800fb02:	f001 fae8 	bl	80110d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800fb06:	2012      	movs	r0, #18
 800fb08:	f001 fb01 	bl	801110e <HAL_NVIC_EnableIRQ>
}
 800fb0c:	bf00      	nop
 800fb0e:	3730      	adds	r7, #48	; 0x30
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	40012000 	.word	0x40012000
 800fb18:	40023800 	.word	0x40023800
 800fb1c:	40020800 	.word	0x40020800
 800fb20:	40020400 	.word	0x40020400
 800fb24:	200049f8 	.word	0x200049f8
 800fb28:	40026410 	.word	0x40026410
 800fb2c:	40012100 	.word	0x40012100
 800fb30:	200051f8 	.word	0x200051f8
 800fb34:	40026440 	.word	0x40026440

0800fb38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b08a      	sub	sp, #40	; 0x28
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fb40:	f107 0314 	add.w	r3, r7, #20
 800fb44:	2200      	movs	r2, #0
 800fb46:	601a      	str	r2, [r3, #0]
 800fb48:	605a      	str	r2, [r3, #4]
 800fb4a:	609a      	str	r2, [r3, #8]
 800fb4c:	60da      	str	r2, [r3, #12]
 800fb4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	4a19      	ldr	r2, [pc, #100]	; (800fbbc <HAL_SPI_MspInit+0x84>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d12c      	bne.n	800fbb4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	613b      	str	r3, [r7, #16]
 800fb5e:	4b18      	ldr	r3, [pc, #96]	; (800fbc0 <HAL_SPI_MspInit+0x88>)
 800fb60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb62:	4a17      	ldr	r2, [pc, #92]	; (800fbc0 <HAL_SPI_MspInit+0x88>)
 800fb64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb68:	6413      	str	r3, [r2, #64]	; 0x40
 800fb6a:	4b15      	ldr	r3, [pc, #84]	; (800fbc0 <HAL_SPI_MspInit+0x88>)
 800fb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fb72:	613b      	str	r3, [r7, #16]
 800fb74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fb76:	2300      	movs	r3, #0
 800fb78:	60fb      	str	r3, [r7, #12]
 800fb7a:	4b11      	ldr	r3, [pc, #68]	; (800fbc0 <HAL_SPI_MspInit+0x88>)
 800fb7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb7e:	4a10      	ldr	r2, [pc, #64]	; (800fbc0 <HAL_SPI_MspInit+0x88>)
 800fb80:	f043 0304 	orr.w	r3, r3, #4
 800fb84:	6313      	str	r3, [r2, #48]	; 0x30
 800fb86:	4b0e      	ldr	r3, [pc, #56]	; (800fbc0 <HAL_SPI_MspInit+0x88>)
 800fb88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb8a:	f003 0304 	and.w	r3, r3, #4
 800fb8e:	60fb      	str	r3, [r7, #12]
 800fb90:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800fb92:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800fb96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb98:	2302      	movs	r3, #2
 800fb9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fba0:	2303      	movs	r3, #3
 800fba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800fba4:	2306      	movs	r3, #6
 800fba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fba8:	f107 0314 	add.w	r3, r7, #20
 800fbac:	4619      	mov	r1, r3
 800fbae:	4805      	ldr	r0, [pc, #20]	; (800fbc4 <HAL_SPI_MspInit+0x8c>)
 800fbb0:	f002 fa30 	bl	8012014 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800fbb4:	bf00      	nop
 800fbb6:	3728      	adds	r7, #40	; 0x28
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	40003c00 	.word	0x40003c00
 800fbc0:	40023800 	.word	0x40023800
 800fbc4:	40020800 	.word	0x40020800

0800fbc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b086      	sub	sp, #24
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4a40      	ldr	r2, [pc, #256]	; (800fcd8 <HAL_TIM_Base_MspInit+0x110>)
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d116      	bne.n	800fc08 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800fbda:	2300      	movs	r3, #0
 800fbdc:	617b      	str	r3, [r7, #20]
 800fbde:	4b3f      	ldr	r3, [pc, #252]	; (800fcdc <HAL_TIM_Base_MspInit+0x114>)
 800fbe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbe2:	4a3e      	ldr	r2, [pc, #248]	; (800fcdc <HAL_TIM_Base_MspInit+0x114>)
 800fbe4:	f043 0301 	orr.w	r3, r3, #1
 800fbe8:	6453      	str	r3, [r2, #68]	; 0x44
 800fbea:	4b3c      	ldr	r3, [pc, #240]	; (800fcdc <HAL_TIM_Base_MspInit+0x114>)
 800fbec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbee:	f003 0301 	and.w	r3, r3, #1
 800fbf2:	617b      	str	r3, [r7, #20]
 800fbf4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	2101      	movs	r1, #1
 800fbfa:	2019      	movs	r0, #25
 800fbfc:	f001 fa6b 	bl	80110d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800fc00:	2019      	movs	r0, #25
 800fc02:	f001 fa84 	bl	801110e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800fc06:	e062      	b.n	800fcce <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc10:	d116      	bne.n	800fc40 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800fc12:	2300      	movs	r3, #0
 800fc14:	613b      	str	r3, [r7, #16]
 800fc16:	4b31      	ldr	r3, [pc, #196]	; (800fcdc <HAL_TIM_Base_MspInit+0x114>)
 800fc18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc1a:	4a30      	ldr	r2, [pc, #192]	; (800fcdc <HAL_TIM_Base_MspInit+0x114>)
 800fc1c:	f043 0301 	orr.w	r3, r3, #1
 800fc20:	6413      	str	r3, [r2, #64]	; 0x40
 800fc22:	4b2e      	ldr	r3, [pc, #184]	; (800fcdc <HAL_TIM_Base_MspInit+0x114>)
 800fc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc26:	f003 0301 	and.w	r3, r3, #1
 800fc2a:	613b      	str	r3, [r7, #16]
 800fc2c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800fc2e:	2200      	movs	r2, #0
 800fc30:	2100      	movs	r1, #0
 800fc32:	201c      	movs	r0, #28
 800fc34:	f001 fa4f 	bl	80110d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800fc38:	201c      	movs	r0, #28
 800fc3a:	f001 fa68 	bl	801110e <HAL_NVIC_EnableIRQ>
}
 800fc3e:	e046      	b.n	800fcce <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	4a26      	ldr	r2, [pc, #152]	; (800fce0 <HAL_TIM_Base_MspInit+0x118>)
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d116      	bne.n	800fc78 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	60fb      	str	r3, [r7, #12]
 800fc4e:	4b23      	ldr	r3, [pc, #140]	; (800fcdc <HAL_TIM_Base_MspInit+0x114>)
 800fc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc52:	4a22      	ldr	r2, [pc, #136]	; (800fcdc <HAL_TIM_Base_MspInit+0x114>)
 800fc54:	f043 0308 	orr.w	r3, r3, #8
 800fc58:	6413      	str	r3, [r2, #64]	; 0x40
 800fc5a:	4b20      	ldr	r3, [pc, #128]	; (800fcdc <HAL_TIM_Base_MspInit+0x114>)
 800fc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc5e:	f003 0308 	and.w	r3, r3, #8
 800fc62:	60fb      	str	r3, [r7, #12]
 800fc64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800fc66:	2200      	movs	r2, #0
 800fc68:	2100      	movs	r1, #0
 800fc6a:	2032      	movs	r0, #50	; 0x32
 800fc6c:	f001 fa33 	bl	80110d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800fc70:	2032      	movs	r0, #50	; 0x32
 800fc72:	f001 fa4c 	bl	801110e <HAL_NVIC_EnableIRQ>
}
 800fc76:	e02a      	b.n	800fcce <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	4a19      	ldr	r2, [pc, #100]	; (800fce4 <HAL_TIM_Base_MspInit+0x11c>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d125      	bne.n	800fcce <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800fc82:	2300      	movs	r3, #0
 800fc84:	60bb      	str	r3, [r7, #8]
 800fc86:	4b15      	ldr	r3, [pc, #84]	; (800fcdc <HAL_TIM_Base_MspInit+0x114>)
 800fc88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc8a:	4a14      	ldr	r2, [pc, #80]	; (800fcdc <HAL_TIM_Base_MspInit+0x114>)
 800fc8c:	f043 0302 	orr.w	r3, r3, #2
 800fc90:	6453      	str	r3, [r2, #68]	; 0x44
 800fc92:	4b12      	ldr	r3, [pc, #72]	; (800fcdc <HAL_TIM_Base_MspInit+0x114>)
 800fc94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc96:	f003 0302 	and.w	r3, r3, #2
 800fc9a:	60bb      	str	r3, [r7, #8]
 800fc9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 800fc9e:	2200      	movs	r2, #0
 800fca0:	2102      	movs	r1, #2
 800fca2:	202c      	movs	r0, #44	; 0x2c
 800fca4:	f001 fa17 	bl	80110d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800fca8:	202c      	movs	r0, #44	; 0x2c
 800fcaa:	f001 fa30 	bl	801110e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800fcae:	2200      	movs	r2, #0
 800fcb0:	2100      	movs	r1, #0
 800fcb2:	202d      	movs	r0, #45	; 0x2d
 800fcb4:	f001 fa0f 	bl	80110d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800fcb8:	202d      	movs	r0, #45	; 0x2d
 800fcba:	f001 fa28 	bl	801110e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	2100      	movs	r1, #0
 800fcc2:	202e      	movs	r0, #46	; 0x2e
 800fcc4:	f001 fa07 	bl	80110d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800fcc8:	202e      	movs	r0, #46	; 0x2e
 800fcca:	f001 fa20 	bl	801110e <HAL_NVIC_EnableIRQ>
}
 800fcce:	bf00      	nop
 800fcd0:	3718      	adds	r7, #24
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	40010000 	.word	0x40010000
 800fcdc:	40023800 	.word	0x40023800
 800fce0:	40000c00 	.word	0x40000c00
 800fce4:	40010400 	.word	0x40010400

0800fce8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b08c      	sub	sp, #48	; 0x30
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fcf0:	f107 031c 	add.w	r3, r7, #28
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	601a      	str	r2, [r3, #0]
 800fcf8:	605a      	str	r2, [r3, #4]
 800fcfa:	609a      	str	r2, [r3, #8]
 800fcfc:	60da      	str	r2, [r3, #12]
 800fcfe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	4a3a      	ldr	r2, [pc, #232]	; (800fdf0 <HAL_TIM_Encoder_MspInit+0x108>)
 800fd06:	4293      	cmp	r3, r2
 800fd08:	d134      	bne.n	800fd74 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	61bb      	str	r3, [r7, #24]
 800fd0e:	4b39      	ldr	r3, [pc, #228]	; (800fdf4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800fd10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd12:	4a38      	ldr	r2, [pc, #224]	; (800fdf4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800fd14:	f043 0302 	orr.w	r3, r3, #2
 800fd18:	6413      	str	r3, [r2, #64]	; 0x40
 800fd1a:	4b36      	ldr	r3, [pc, #216]	; (800fdf4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800fd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd1e:	f003 0302 	and.w	r3, r3, #2
 800fd22:	61bb      	str	r3, [r7, #24]
 800fd24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fd26:	2300      	movs	r3, #0
 800fd28:	617b      	str	r3, [r7, #20]
 800fd2a:	4b32      	ldr	r3, [pc, #200]	; (800fdf4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800fd2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd2e:	4a31      	ldr	r2, [pc, #196]	; (800fdf4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800fd30:	f043 0301 	orr.w	r3, r3, #1
 800fd34:	6313      	str	r3, [r2, #48]	; 0x30
 800fd36:	4b2f      	ldr	r3, [pc, #188]	; (800fdf4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800fd38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd3a:	f003 0301 	and.w	r3, r3, #1
 800fd3e:	617b      	str	r3, [r7, #20]
 800fd40:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800fd42:	23c0      	movs	r3, #192	; 0xc0
 800fd44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fd46:	2302      	movs	r3, #2
 800fd48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800fd52:	2302      	movs	r3, #2
 800fd54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fd56:	f107 031c 	add.w	r3, r7, #28
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	4826      	ldr	r0, [pc, #152]	; (800fdf8 <HAL_TIM_Encoder_MspInit+0x110>)
 800fd5e:	f002 f959 	bl	8012014 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800fd62:	2200      	movs	r2, #0
 800fd64:	2100      	movs	r1, #0
 800fd66:	201d      	movs	r0, #29
 800fd68:	f001 f9b5 	bl	80110d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800fd6c:	201d      	movs	r0, #29
 800fd6e:	f001 f9ce 	bl	801110e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800fd72:	e038      	b.n	800fde6 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	4a20      	ldr	r2, [pc, #128]	; (800fdfc <HAL_TIM_Encoder_MspInit+0x114>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d133      	bne.n	800fde6 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800fd7e:	2300      	movs	r3, #0
 800fd80:	613b      	str	r3, [r7, #16]
 800fd82:	4b1c      	ldr	r3, [pc, #112]	; (800fdf4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800fd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd86:	4a1b      	ldr	r2, [pc, #108]	; (800fdf4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800fd88:	f043 0304 	orr.w	r3, r3, #4
 800fd8c:	6413      	str	r3, [r2, #64]	; 0x40
 800fd8e:	4b19      	ldr	r3, [pc, #100]	; (800fdf4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800fd90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd92:	f003 0304 	and.w	r3, r3, #4
 800fd96:	613b      	str	r3, [r7, #16]
 800fd98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	60fb      	str	r3, [r7, #12]
 800fd9e:	4b15      	ldr	r3, [pc, #84]	; (800fdf4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800fda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fda2:	4a14      	ldr	r2, [pc, #80]	; (800fdf4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800fda4:	f043 0302 	orr.w	r3, r3, #2
 800fda8:	6313      	str	r3, [r2, #48]	; 0x30
 800fdaa:	4b12      	ldr	r3, [pc, #72]	; (800fdf4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800fdac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdae:	f003 0302 	and.w	r3, r3, #2
 800fdb2:	60fb      	str	r3, [r7, #12]
 800fdb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800fdb6:	23c0      	movs	r3, #192	; 0xc0
 800fdb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fdba:	2302      	movs	r3, #2
 800fdbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800fdc6:	2302      	movs	r3, #2
 800fdc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fdca:	f107 031c 	add.w	r3, r7, #28
 800fdce:	4619      	mov	r1, r3
 800fdd0:	480b      	ldr	r0, [pc, #44]	; (800fe00 <HAL_TIM_Encoder_MspInit+0x118>)
 800fdd2:	f002 f91f 	bl	8012014 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	2100      	movs	r1, #0
 800fdda:	201e      	movs	r0, #30
 800fddc:	f001 f97b 	bl	80110d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800fde0:	201e      	movs	r0, #30
 800fde2:	f001 f994 	bl	801110e <HAL_NVIC_EnableIRQ>
}
 800fde6:	bf00      	nop
 800fde8:	3730      	adds	r7, #48	; 0x30
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	40000400 	.word	0x40000400
 800fdf4:	40023800 	.word	0x40023800
 800fdf8:	40020000 	.word	0x40020000
 800fdfc:	40000800 	.word	0x40000800
 800fe00:	40020400 	.word	0x40020400

0800fe04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b08c      	sub	sp, #48	; 0x30
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe0c:	f107 031c 	add.w	r3, r7, #28
 800fe10:	2200      	movs	r2, #0
 800fe12:	601a      	str	r2, [r3, #0]
 800fe14:	605a      	str	r2, [r3, #4]
 800fe16:	609a      	str	r2, [r3, #8]
 800fe18:	60da      	str	r2, [r3, #12]
 800fe1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe24:	d11e      	bne.n	800fe64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe26:	2300      	movs	r3, #0
 800fe28:	61bb      	str	r3, [r7, #24]
 800fe2a:	4b43      	ldr	r3, [pc, #268]	; (800ff38 <HAL_TIM_MspPostInit+0x134>)
 800fe2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe2e:	4a42      	ldr	r2, [pc, #264]	; (800ff38 <HAL_TIM_MspPostInit+0x134>)
 800fe30:	f043 0301 	orr.w	r3, r3, #1
 800fe34:	6313      	str	r3, [r2, #48]	; 0x30
 800fe36:	4b40      	ldr	r3, [pc, #256]	; (800ff38 <HAL_TIM_MspPostInit+0x134>)
 800fe38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe3a:	f003 0301 	and.w	r3, r3, #1
 800fe3e:	61bb      	str	r3, [r7, #24]
 800fe40:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800fe42:	2308      	movs	r3, #8
 800fe44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe46:	2302      	movs	r3, #2
 800fe48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe4e:	2303      	movs	r3, #3
 800fe50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800fe52:	2301      	movs	r3, #1
 800fe54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe56:	f107 031c 	add.w	r3, r7, #28
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	4837      	ldr	r0, [pc, #220]	; (800ff3c <HAL_TIM_MspPostInit+0x138>)
 800fe5e:	f002 f8d9 	bl	8012014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800fe62:	e064      	b.n	800ff2e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	4a35      	ldr	r2, [pc, #212]	; (800ff40 <HAL_TIM_MspPostInit+0x13c>)
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	d11e      	bne.n	800feac <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe6e:	2300      	movs	r3, #0
 800fe70:	617b      	str	r3, [r7, #20]
 800fe72:	4b31      	ldr	r3, [pc, #196]	; (800ff38 <HAL_TIM_MspPostInit+0x134>)
 800fe74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe76:	4a30      	ldr	r2, [pc, #192]	; (800ff38 <HAL_TIM_MspPostInit+0x134>)
 800fe78:	f043 0301 	orr.w	r3, r3, #1
 800fe7c:	6313      	str	r3, [r2, #48]	; 0x30
 800fe7e:	4b2e      	ldr	r3, [pc, #184]	; (800ff38 <HAL_TIM_MspPostInit+0x134>)
 800fe80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe82:	f003 0301 	and.w	r3, r3, #1
 800fe86:	617b      	str	r3, [r7, #20]
 800fe88:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800fe8a:	2302      	movs	r3, #2
 800fe8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe8e:	2302      	movs	r3, #2
 800fe90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe92:	2300      	movs	r3, #0
 800fe94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe96:	2300      	movs	r3, #0
 800fe98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800fe9a:	2302      	movs	r3, #2
 800fe9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe9e:	f107 031c 	add.w	r3, r7, #28
 800fea2:	4619      	mov	r1, r3
 800fea4:	4825      	ldr	r0, [pc, #148]	; (800ff3c <HAL_TIM_MspPostInit+0x138>)
 800fea6:	f002 f8b5 	bl	8012014 <HAL_GPIO_Init>
}
 800feaa:	e040      	b.n	800ff2e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4a24      	ldr	r2, [pc, #144]	; (800ff44 <HAL_TIM_MspPostInit+0x140>)
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d13b      	bne.n	800ff2e <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800feb6:	2300      	movs	r3, #0
 800feb8:	613b      	str	r3, [r7, #16]
 800feba:	4b1f      	ldr	r3, [pc, #124]	; (800ff38 <HAL_TIM_MspPostInit+0x134>)
 800febc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800febe:	4a1e      	ldr	r2, [pc, #120]	; (800ff38 <HAL_TIM_MspPostInit+0x134>)
 800fec0:	f043 0301 	orr.w	r3, r3, #1
 800fec4:	6313      	str	r3, [r2, #48]	; 0x30
 800fec6:	4b1c      	ldr	r3, [pc, #112]	; (800ff38 <HAL_TIM_MspPostInit+0x134>)
 800fec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feca:	f003 0301 	and.w	r3, r3, #1
 800fece:	613b      	str	r3, [r7, #16]
 800fed0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fed2:	2300      	movs	r3, #0
 800fed4:	60fb      	str	r3, [r7, #12]
 800fed6:	4b18      	ldr	r3, [pc, #96]	; (800ff38 <HAL_TIM_MspPostInit+0x134>)
 800fed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feda:	4a17      	ldr	r2, [pc, #92]	; (800ff38 <HAL_TIM_MspPostInit+0x134>)
 800fedc:	f043 0304 	orr.w	r3, r3, #4
 800fee0:	6313      	str	r3, [r2, #48]	; 0x30
 800fee2:	4b15      	ldr	r3, [pc, #84]	; (800ff38 <HAL_TIM_MspPostInit+0x134>)
 800fee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fee6:	f003 0304 	and.w	r3, r3, #4
 800feea:	60fb      	str	r3, [r7, #12]
 800feec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800feee:	2320      	movs	r3, #32
 800fef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fef2:	2302      	movs	r3, #2
 800fef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fef6:	2300      	movs	r3, #0
 800fef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fefa:	2300      	movs	r3, #0
 800fefc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800fefe:	2303      	movs	r3, #3
 800ff00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ff02:	f107 031c 	add.w	r3, r7, #28
 800ff06:	4619      	mov	r1, r3
 800ff08:	480c      	ldr	r0, [pc, #48]	; (800ff3c <HAL_TIM_MspPostInit+0x138>)
 800ff0a:	f002 f883 	bl	8012014 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ff0e:	2340      	movs	r3, #64	; 0x40
 800ff10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ff12:	2302      	movs	r3, #2
 800ff14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff16:	2300      	movs	r3, #0
 800ff18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800ff1e:	2303      	movs	r3, #3
 800ff20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ff22:	f107 031c 	add.w	r3, r7, #28
 800ff26:	4619      	mov	r1, r3
 800ff28:	4807      	ldr	r0, [pc, #28]	; (800ff48 <HAL_TIM_MspPostInit+0x144>)
 800ff2a:	f002 f873 	bl	8012014 <HAL_GPIO_Init>
}
 800ff2e:	bf00      	nop
 800ff30:	3730      	adds	r7, #48	; 0x30
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	bf00      	nop
 800ff38:	40023800 	.word	0x40023800
 800ff3c:	40020000 	.word	0x40020000
 800ff40:	40000c00 	.word	0x40000c00
 800ff44:	40010400 	.word	0x40010400
 800ff48:	40020800 	.word	0x40020800

0800ff4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b08a      	sub	sp, #40	; 0x28
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ff54:	f107 0314 	add.w	r3, r7, #20
 800ff58:	2200      	movs	r2, #0
 800ff5a:	601a      	str	r2, [r3, #0]
 800ff5c:	605a      	str	r2, [r3, #4]
 800ff5e:	609a      	str	r2, [r3, #8]
 800ff60:	60da      	str	r2, [r3, #12]
 800ff62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	4a19      	ldr	r2, [pc, #100]	; (800ffd0 <HAL_UART_MspInit+0x84>)
 800ff6a:	4293      	cmp	r3, r2
 800ff6c:	d12c      	bne.n	800ffc8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ff6e:	2300      	movs	r3, #0
 800ff70:	613b      	str	r3, [r7, #16]
 800ff72:	4b18      	ldr	r3, [pc, #96]	; (800ffd4 <HAL_UART_MspInit+0x88>)
 800ff74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff76:	4a17      	ldr	r2, [pc, #92]	; (800ffd4 <HAL_UART_MspInit+0x88>)
 800ff78:	f043 0310 	orr.w	r3, r3, #16
 800ff7c:	6453      	str	r3, [r2, #68]	; 0x44
 800ff7e:	4b15      	ldr	r3, [pc, #84]	; (800ffd4 <HAL_UART_MspInit+0x88>)
 800ff80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff82:	f003 0310 	and.w	r3, r3, #16
 800ff86:	613b      	str	r3, [r7, #16]
 800ff88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	60fb      	str	r3, [r7, #12]
 800ff8e:	4b11      	ldr	r3, [pc, #68]	; (800ffd4 <HAL_UART_MspInit+0x88>)
 800ff90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff92:	4a10      	ldr	r2, [pc, #64]	; (800ffd4 <HAL_UART_MspInit+0x88>)
 800ff94:	f043 0301 	orr.w	r3, r3, #1
 800ff98:	6313      	str	r3, [r2, #48]	; 0x30
 800ff9a:	4b0e      	ldr	r3, [pc, #56]	; (800ffd4 <HAL_UART_MspInit+0x88>)
 800ff9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff9e:	f003 0301 	and.w	r3, r3, #1
 800ffa2:	60fb      	str	r3, [r7, #12]
 800ffa4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ffa6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ffaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ffac:	2302      	movs	r3, #2
 800ffae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ffb4:	2303      	movs	r3, #3
 800ffb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ffb8:	2307      	movs	r3, #7
 800ffba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ffbc:	f107 0314 	add.w	r3, r7, #20
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	4805      	ldr	r0, [pc, #20]	; (800ffd8 <HAL_UART_MspInit+0x8c>)
 800ffc4:	f002 f826 	bl	8012014 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800ffc8:	bf00      	nop
 800ffca:	3728      	adds	r7, #40	; 0x28
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	40011000 	.word	0x40011000
 800ffd4:	40023800 	.word	0x40023800
 800ffd8:	40020000 	.word	0x40020000

0800ffdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ffdc:	b480      	push	{r7}
 800ffde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ffe0:	e7fe      	b.n	800ffe0 <NMI_Handler+0x4>

0800ffe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ffe2:	b480      	push	{r7}
 800ffe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ffe6:	e7fe      	b.n	800ffe6 <HardFault_Handler+0x4>

0800ffe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ffec:	e7fe      	b.n	800ffec <MemManage_Handler+0x4>

0800ffee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ffee:	b480      	push	{r7}
 800fff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800fff2:	e7fe      	b.n	800fff2 <BusFault_Handler+0x4>

0800fff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800fff4:	b480      	push	{r7}
 800fff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800fff8:	e7fe      	b.n	800fff8 <UsageFault_Handler+0x4>

0800fffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800fffa:	b480      	push	{r7}
 800fffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800fffe:	bf00      	nop
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	4770      	bx	lr

08010008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010008:	b480      	push	{r7}
 801000a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801000c:	bf00      	nop
 801000e:	46bd      	mov	sp, r7
 8010010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010014:	4770      	bx	lr

08010016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010016:	b480      	push	{r7}
 8010018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801001a:	bf00      	nop
 801001c:	46bd      	mov	sp, r7
 801001e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010022:	4770      	bx	lr

08010024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010028:	f000 f9b0 	bl	801038c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801002c:	bf00      	nop
 801002e:	bd80      	pop	{r7, pc}

08010030 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8010034:	f001 fcb8 	bl	80119a8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8010038:	bf00      	nop
 801003a:	bd80      	pop	{r7, pc}

0801003c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8010040:	4803      	ldr	r0, [pc, #12]	; (8010050 <ADC_IRQHandler+0x14>)
 8010042:	f000 fa28 	bl	8010496 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8010046:	4803      	ldr	r0, [pc, #12]	; (8010054 <ADC_IRQHandler+0x18>)
 8010048:	f000 fa25 	bl	8010496 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 801004c:	bf00      	nop
 801004e:	bd80      	pop	{r7, pc}
 8010050:	20004580 	.word	0x20004580
 8010054:	20004444 	.word	0x20004444

08010058 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 801005c:	4802      	ldr	r0, [pc, #8]	; (8010068 <TIM1_UP_TIM10_IRQHandler+0x10>)
 801005e:	f003 febe 	bl	8013dde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8010062:	bf00      	nop
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	20004b88 	.word	0x20004b88

0801006c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8010070:	4802      	ldr	r0, [pc, #8]	; (801007c <TIM2_IRQHandler+0x10>)
 8010072:	f003 feb4 	bl	8013dde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8010076:	bf00      	nop
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	200051b4 	.word	0x200051b4

08010080 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8010084:	4802      	ldr	r0, [pc, #8]	; (8010090 <TIM3_IRQHandler+0x10>)
 8010086:	f003 feaa 	bl	8013dde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 801008a:	bf00      	nop
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop
 8010090:	200044e0 	.word	0x200044e0

08010094 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8010098:	4802      	ldr	r0, [pc, #8]	; (80100a4 <TIM4_IRQHandler+0x10>)
 801009a:	f003 fea0 	bl	8013dde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 801009e:	bf00      	nop
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop
 80100a4:	20004404 	.word	0x20004404

080100a8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80100ac:	4802      	ldr	r0, [pc, #8]	; (80100b8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80100ae:	f003 fe96 	bl	8013dde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80100b2:	bf00      	nop
 80100b4:	bd80      	pop	{r7, pc}
 80100b6:	bf00      	nop
 80100b8:	200043c0 	.word	0x200043c0

080100bc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80100c0:	4802      	ldr	r0, [pc, #8]	; (80100cc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80100c2:	f003 fe8c 	bl	8013dde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80100c6:	bf00      	nop
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	200043c0 	.word	0x200043c0

080100d0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80100d4:	4802      	ldr	r0, [pc, #8]	; (80100e0 <TIM8_CC_IRQHandler+0x10>)
 80100d6:	f003 fe82 	bl	8013dde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80100da:	bf00      	nop
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	200043c0 	.word	0x200043c0

080100e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80100e8:	4802      	ldr	r0, [pc, #8]	; (80100f4 <TIM5_IRQHandler+0x10>)
 80100ea:	f003 fe78 	bl	8013dde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80100ee:	bf00      	nop
 80100f0:	bd80      	pop	{r7, pc}
 80100f2:	bf00      	nop
 80100f4:	2000449c 	.word	0x2000449c

080100f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80100fc:	4802      	ldr	r0, [pc, #8]	; (8010108 <DMA2_Stream0_IRQHandler+0x10>)
 80100fe:	f001 f997 	bl	8011430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8010102:	bf00      	nop
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	200049f8 	.word	0x200049f8

0801010c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8010110:	4802      	ldr	r0, [pc, #8]	; (801011c <DMA2_Stream2_IRQHandler+0x10>)
 8010112:	f001 f98d 	bl	8011430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8010116:	bf00      	nop
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop
 801011c:	200051f8 	.word	0x200051f8

08010120 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b086      	sub	sp, #24
 8010124:	af00      	add	r7, sp, #0
 8010126:	60f8      	str	r0, [r7, #12]
 8010128:	60b9      	str	r1, [r7, #8]
 801012a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801012c:	2300      	movs	r3, #0
 801012e:	617b      	str	r3, [r7, #20]
 8010130:	e00a      	b.n	8010148 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010132:	f3af 8000 	nop.w
 8010136:	4601      	mov	r1, r0
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	1c5a      	adds	r2, r3, #1
 801013c:	60ba      	str	r2, [r7, #8]
 801013e:	b2ca      	uxtb	r2, r1
 8010140:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	3301      	adds	r3, #1
 8010146:	617b      	str	r3, [r7, #20]
 8010148:	697a      	ldr	r2, [r7, #20]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	429a      	cmp	r2, r3
 801014e:	dbf0      	blt.n	8010132 <_read+0x12>
	}

return len;
 8010150:	687b      	ldr	r3, [r7, #4]
}
 8010152:	4618      	mov	r0, r3
 8010154:	3718      	adds	r7, #24
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}

0801015a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801015a:	b580      	push	{r7, lr}
 801015c:	b086      	sub	sp, #24
 801015e:	af00      	add	r7, sp, #0
 8010160:	60f8      	str	r0, [r7, #12]
 8010162:	60b9      	str	r1, [r7, #8]
 8010164:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010166:	2300      	movs	r3, #0
 8010168:	617b      	str	r3, [r7, #20]
 801016a:	e009      	b.n	8010180 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	1c5a      	adds	r2, r3, #1
 8010170:	60ba      	str	r2, [r7, #8]
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	4618      	mov	r0, r3
 8010176:	f7f9 fbb7 	bl	80098e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	3301      	adds	r3, #1
 801017e:	617b      	str	r3, [r7, #20]
 8010180:	697a      	ldr	r2, [r7, #20]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	429a      	cmp	r2, r3
 8010186:	dbf1      	blt.n	801016c <_write+0x12>
	}
	return len;
 8010188:	687b      	ldr	r3, [r7, #4]
}
 801018a:	4618      	mov	r0, r3
 801018c:	3718      	adds	r7, #24
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <_close>:

int _close(int file)
{
 8010192:	b480      	push	{r7}
 8010194:	b083      	sub	sp, #12
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
	return -1;
 801019a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801019e:	4618      	mov	r0, r3
 80101a0:	370c      	adds	r7, #12
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr

080101aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80101aa:	b480      	push	{r7}
 80101ac:	b083      	sub	sp, #12
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
 80101b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80101ba:	605a      	str	r2, [r3, #4]
	return 0;
 80101bc:	2300      	movs	r3, #0
}
 80101be:	4618      	mov	r0, r3
 80101c0:	370c      	adds	r7, #12
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr

080101ca <_isatty>:

int _isatty(int file)
{
 80101ca:	b480      	push	{r7}
 80101cc:	b083      	sub	sp, #12
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
	return 1;
 80101d2:	2301      	movs	r3, #1
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	370c      	adds	r7, #12
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr

080101e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b085      	sub	sp, #20
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	60f8      	str	r0, [r7, #12]
 80101e8:	60b9      	str	r1, [r7, #8]
 80101ea:	607a      	str	r2, [r7, #4]
	return 0;
 80101ec:	2300      	movs	r3, #0
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3714      	adds	r7, #20
 80101f2:	46bd      	mov	sp, r7
 80101f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f8:	4770      	bx	lr
	...

080101fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b086      	sub	sp, #24
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010204:	4a14      	ldr	r2, [pc, #80]	; (8010258 <_sbrk+0x5c>)
 8010206:	4b15      	ldr	r3, [pc, #84]	; (801025c <_sbrk+0x60>)
 8010208:	1ad3      	subs	r3, r2, r3
 801020a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010210:	4b13      	ldr	r3, [pc, #76]	; (8010260 <_sbrk+0x64>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d102      	bne.n	801021e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010218:	4b11      	ldr	r3, [pc, #68]	; (8010260 <_sbrk+0x64>)
 801021a:	4a12      	ldr	r2, [pc, #72]	; (8010264 <_sbrk+0x68>)
 801021c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801021e:	4b10      	ldr	r3, [pc, #64]	; (8010260 <_sbrk+0x64>)
 8010220:	681a      	ldr	r2, [r3, #0]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	4413      	add	r3, r2
 8010226:	693a      	ldr	r2, [r7, #16]
 8010228:	429a      	cmp	r2, r3
 801022a:	d207      	bcs.n	801023c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801022c:	f005 fabe 	bl	80157ac <__errno>
 8010230:	4602      	mov	r2, r0
 8010232:	230c      	movs	r3, #12
 8010234:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8010236:	f04f 33ff 	mov.w	r3, #4294967295
 801023a:	e009      	b.n	8010250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801023c:	4b08      	ldr	r3, [pc, #32]	; (8010260 <_sbrk+0x64>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010242:	4b07      	ldr	r3, [pc, #28]	; (8010260 <_sbrk+0x64>)
 8010244:	681a      	ldr	r2, [r3, #0]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	4413      	add	r3, r2
 801024a:	4a05      	ldr	r2, [pc, #20]	; (8010260 <_sbrk+0x64>)
 801024c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801024e:	68fb      	ldr	r3, [r7, #12]
}
 8010250:	4618      	mov	r0, r3
 8010252:	3718      	adds	r7, #24
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}
 8010258:	20020000 	.word	0x20020000
 801025c:	00000400 	.word	0x00000400
 8010260:	2000436c 	.word	0x2000436c
 8010264:	20005288 	.word	0x20005288

08010268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010268:	b480      	push	{r7}
 801026a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801026c:	4b08      	ldr	r3, [pc, #32]	; (8010290 <SystemInit+0x28>)
 801026e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010272:	4a07      	ldr	r2, [pc, #28]	; (8010290 <SystemInit+0x28>)
 8010274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801027c:	4b04      	ldr	r3, [pc, #16]	; (8010290 <SystemInit+0x28>)
 801027e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010282:	609a      	str	r2, [r3, #8]
#endif
}
 8010284:	bf00      	nop
 8010286:	46bd      	mov	sp, r7
 8010288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028c:	4770      	bx	lr
 801028e:	bf00      	nop
 8010290:	e000ed00 	.word	0xe000ed00

08010294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80102cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010298:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801029a:	e003      	b.n	80102a4 <LoopCopyDataInit>

0801029c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801029c:	4b0c      	ldr	r3, [pc, #48]	; (80102d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801029e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80102a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80102a2:	3104      	adds	r1, #4

080102a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80102a4:	480b      	ldr	r0, [pc, #44]	; (80102d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80102a6:	4b0c      	ldr	r3, [pc, #48]	; (80102d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80102a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80102aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80102ac:	d3f6      	bcc.n	801029c <CopyDataInit>
  ldr  r2, =_sbss
 80102ae:	4a0b      	ldr	r2, [pc, #44]	; (80102dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80102b0:	e002      	b.n	80102b8 <LoopFillZerobss>

080102b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80102b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80102b4:	f842 3b04 	str.w	r3, [r2], #4

080102b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80102b8:	4b09      	ldr	r3, [pc, #36]	; (80102e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80102ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80102bc:	d3f9      	bcc.n	80102b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80102be:	f7ff ffd3 	bl	8010268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80102c2:	f005 fa79 	bl	80157b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80102c6:	f7fe fd79 	bl	800edbc <main>
  bx  lr    
 80102ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80102cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80102d0:	080183b0 	.word	0x080183b0
  ldr  r0, =_sdata
 80102d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80102d8:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 80102dc:	20000260 	.word	0x20000260
  ldr  r3, = _ebss
 80102e0:	20005288 	.word	0x20005288

080102e4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80102e4:	e7fe      	b.n	80102e4 <CAN1_RX0_IRQHandler>
	...

080102e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80102ec:	4b0e      	ldr	r3, [pc, #56]	; (8010328 <HAL_Init+0x40>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	4a0d      	ldr	r2, [pc, #52]	; (8010328 <HAL_Init+0x40>)
 80102f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80102f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80102f8:	4b0b      	ldr	r3, [pc, #44]	; (8010328 <HAL_Init+0x40>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	4a0a      	ldr	r2, [pc, #40]	; (8010328 <HAL_Init+0x40>)
 80102fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010304:	4b08      	ldr	r3, [pc, #32]	; (8010328 <HAL_Init+0x40>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	4a07      	ldr	r2, [pc, #28]	; (8010328 <HAL_Init+0x40>)
 801030a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801030e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010310:	2003      	movs	r0, #3
 8010312:	f000 fed5 	bl	80110c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010316:	2000      	movs	r0, #0
 8010318:	f000 f808 	bl	801032c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801031c:	f7ff fad6 	bl	800f8cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010320:	2300      	movs	r3, #0
}
 8010322:	4618      	mov	r0, r3
 8010324:	bd80      	pop	{r7, pc}
 8010326:	bf00      	nop
 8010328:	40023c00 	.word	0x40023c00

0801032c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010334:	4b12      	ldr	r3, [pc, #72]	; (8010380 <HAL_InitTick+0x54>)
 8010336:	681a      	ldr	r2, [r3, #0]
 8010338:	4b12      	ldr	r3, [pc, #72]	; (8010384 <HAL_InitTick+0x58>)
 801033a:	781b      	ldrb	r3, [r3, #0]
 801033c:	4619      	mov	r1, r3
 801033e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010342:	fbb3 f3f1 	udiv	r3, r3, r1
 8010346:	fbb2 f3f3 	udiv	r3, r2, r3
 801034a:	4618      	mov	r0, r3
 801034c:	f000 feed 	bl	801112a <HAL_SYSTICK_Config>
 8010350:	4603      	mov	r3, r0
 8010352:	2b00      	cmp	r3, #0
 8010354:	d001      	beq.n	801035a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010356:	2301      	movs	r3, #1
 8010358:	e00e      	b.n	8010378 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2b0f      	cmp	r3, #15
 801035e:	d80a      	bhi.n	8010376 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010360:	2200      	movs	r2, #0
 8010362:	6879      	ldr	r1, [r7, #4]
 8010364:	f04f 30ff 	mov.w	r0, #4294967295
 8010368:	f000 feb5 	bl	80110d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801036c:	4a06      	ldr	r2, [pc, #24]	; (8010388 <HAL_InitTick+0x5c>)
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010372:	2300      	movs	r3, #0
 8010374:	e000      	b.n	8010378 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010376:	2301      	movs	r3, #1
}
 8010378:	4618      	mov	r0, r3
 801037a:	3708      	adds	r7, #8
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}
 8010380:	20000080 	.word	0x20000080
 8010384:	20000088 	.word	0x20000088
 8010388:	20000084 	.word	0x20000084

0801038c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801038c:	b480      	push	{r7}
 801038e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010390:	4b06      	ldr	r3, [pc, #24]	; (80103ac <HAL_IncTick+0x20>)
 8010392:	781b      	ldrb	r3, [r3, #0]
 8010394:	461a      	mov	r2, r3
 8010396:	4b06      	ldr	r3, [pc, #24]	; (80103b0 <HAL_IncTick+0x24>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	4413      	add	r3, r2
 801039c:	4a04      	ldr	r2, [pc, #16]	; (80103b0 <HAL_IncTick+0x24>)
 801039e:	6013      	str	r3, [r2, #0]
}
 80103a0:	bf00      	nop
 80103a2:	46bd      	mov	sp, r7
 80103a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a8:	4770      	bx	lr
 80103aa:	bf00      	nop
 80103ac:	20000088 	.word	0x20000088
 80103b0:	20005260 	.word	0x20005260

080103b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80103b4:	b480      	push	{r7}
 80103b6:	af00      	add	r7, sp, #0
  return uwTick;
 80103b8:	4b03      	ldr	r3, [pc, #12]	; (80103c8 <HAL_GetTick+0x14>)
 80103ba:	681b      	ldr	r3, [r3, #0]
}
 80103bc:	4618      	mov	r0, r3
 80103be:	46bd      	mov	sp, r7
 80103c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c4:	4770      	bx	lr
 80103c6:	bf00      	nop
 80103c8:	20005260 	.word	0x20005260

080103cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b084      	sub	sp, #16
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80103d4:	f7ff ffee 	bl	80103b4 <HAL_GetTick>
 80103d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103e4:	d005      	beq.n	80103f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80103e6:	4b09      	ldr	r3, [pc, #36]	; (801040c <HAL_Delay+0x40>)
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	461a      	mov	r2, r3
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	4413      	add	r3, r2
 80103f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80103f2:	bf00      	nop
 80103f4:	f7ff ffde 	bl	80103b4 <HAL_GetTick>
 80103f8:	4602      	mov	r2, r0
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	1ad3      	subs	r3, r2, r3
 80103fe:	68fa      	ldr	r2, [r7, #12]
 8010400:	429a      	cmp	r2, r3
 8010402:	d8f7      	bhi.n	80103f4 <HAL_Delay+0x28>
  {
  }
}
 8010404:	bf00      	nop
 8010406:	3710      	adds	r7, #16
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}
 801040c:	20000088 	.word	0x20000088

08010410 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b084      	sub	sp, #16
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010418:	2300      	movs	r3, #0
 801041a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d101      	bne.n	8010426 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8010422:	2301      	movs	r3, #1
 8010424:	e033      	b.n	801048e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801042a:	2b00      	cmp	r3, #0
 801042c:	d109      	bne.n	8010442 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f7ff fa7a 	bl	800f928 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2200      	movs	r2, #0
 8010438:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2200      	movs	r2, #0
 801043e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010446:	f003 0310 	and.w	r3, r3, #16
 801044a:	2b00      	cmp	r3, #0
 801044c:	d118      	bne.n	8010480 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010452:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010456:	f023 0302 	bic.w	r3, r3, #2
 801045a:	f043 0202 	orr.w	r2, r3, #2
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f000 fbd4 	bl	8010c10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2200      	movs	r2, #0
 801046c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010472:	f023 0303 	bic.w	r3, r3, #3
 8010476:	f043 0201 	orr.w	r2, r3, #1
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	641a      	str	r2, [r3, #64]	; 0x40
 801047e:	e001      	b.n	8010484 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8010480:	2301      	movs	r3, #1
 8010482:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2200      	movs	r2, #0
 8010488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801048c:	7bfb      	ldrb	r3, [r7, #15]
}
 801048e:	4618      	mov	r0, r3
 8010490:	3710      	adds	r7, #16
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}

08010496 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8010496:	b580      	push	{r7, lr}
 8010498:	b084      	sub	sp, #16
 801049a:	af00      	add	r7, sp, #0
 801049c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 801049e:	2300      	movs	r3, #0
 80104a0:	60fb      	str	r3, [r7, #12]
 80104a2:	2300      	movs	r3, #0
 80104a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	f003 0302 	and.w	r3, r3, #2
 80104b0:	2b02      	cmp	r3, #2
 80104b2:	bf0c      	ite	eq
 80104b4:	2301      	moveq	r3, #1
 80104b6:	2300      	movne	r3, #0
 80104b8:	b2db      	uxtb	r3, r3
 80104ba:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	685b      	ldr	r3, [r3, #4]
 80104c2:	f003 0320 	and.w	r3, r3, #32
 80104c6:	2b20      	cmp	r3, #32
 80104c8:	bf0c      	ite	eq
 80104ca:	2301      	moveq	r3, #1
 80104cc:	2300      	movne	r3, #0
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d049      	beq.n	801056c <HAL_ADC_IRQHandler+0xd6>
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d046      	beq.n	801056c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104e2:	f003 0310 	and.w	r3, r3, #16
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d105      	bne.n	80104f6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	689b      	ldr	r3, [r3, #8]
 80104fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010500:	2b00      	cmp	r3, #0
 8010502:	d12b      	bne.n	801055c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010508:	2b00      	cmp	r3, #0
 801050a:	d127      	bne.n	801055c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010512:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010516:	2b00      	cmp	r3, #0
 8010518:	d006      	beq.n	8010528 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	689b      	ldr	r3, [r3, #8]
 8010520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010524:	2b00      	cmp	r3, #0
 8010526:	d119      	bne.n	801055c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	685a      	ldr	r2, [r3, #4]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	f022 0220 	bic.w	r2, r2, #32
 8010536:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801053c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801054c:	2b00      	cmp	r3, #0
 801054e:	d105      	bne.n	801055c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010554:	f043 0201 	orr.w	r2, r3, #1
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f7fd fea7 	bl	800e2b0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	f06f 0212 	mvn.w	r2, #18
 801056a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	f003 0304 	and.w	r3, r3, #4
 8010576:	2b04      	cmp	r3, #4
 8010578:	bf0c      	ite	eq
 801057a:	2301      	moveq	r3, #1
 801057c:	2300      	movne	r3, #0
 801057e:	b2db      	uxtb	r3, r3
 8010580:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	685b      	ldr	r3, [r3, #4]
 8010588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801058c:	2b80      	cmp	r3, #128	; 0x80
 801058e:	bf0c      	ite	eq
 8010590:	2301      	moveq	r3, #1
 8010592:	2300      	movne	r3, #0
 8010594:	b2db      	uxtb	r3, r3
 8010596:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d057      	beq.n	801064e <HAL_ADC_IRQHandler+0x1b8>
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d054      	beq.n	801064e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105a8:	f003 0310 	and.w	r3, r3, #16
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d105      	bne.n	80105bc <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	689b      	ldr	r3, [r3, #8]
 80105c2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d139      	bne.n	801063e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d006      	beq.n	80105e6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	689b      	ldr	r3, [r3, #8]
 80105de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d12b      	bne.n	801063e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d124      	bne.n	801063e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	689b      	ldr	r3, [r3, #8]
 80105fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d11d      	bne.n	801063e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8010606:	2b00      	cmp	r3, #0
 8010608:	d119      	bne.n	801063e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	685a      	ldr	r2, [r3, #4]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010618:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801061e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801062a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801062e:	2b00      	cmp	r3, #0
 8010630:	d105      	bne.n	801063e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010636:	f043 0201 	orr.w	r2, r3, #1
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f000 fc64 	bl	8010f0c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	f06f 020c 	mvn.w	r2, #12
 801064c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f003 0301 	and.w	r3, r3, #1
 8010658:	2b01      	cmp	r3, #1
 801065a:	bf0c      	ite	eq
 801065c:	2301      	moveq	r3, #1
 801065e:	2300      	movne	r3, #0
 8010660:	b2db      	uxtb	r3, r3
 8010662:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	685b      	ldr	r3, [r3, #4]
 801066a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801066e:	2b40      	cmp	r3, #64	; 0x40
 8010670:	bf0c      	ite	eq
 8010672:	2301      	moveq	r3, #1
 8010674:	2300      	movne	r3, #0
 8010676:	b2db      	uxtb	r3, r3
 8010678:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d017      	beq.n	80106b0 <HAL_ADC_IRQHandler+0x21a>
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d014      	beq.n	80106b0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	f003 0301 	and.w	r3, r3, #1
 8010690:	2b01      	cmp	r3, #1
 8010692:	d10d      	bne.n	80106b0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010698:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f000 f97f 	bl	80109a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	f06f 0201 	mvn.w	r2, #1
 80106ae:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	f003 0320 	and.w	r3, r3, #32
 80106ba:	2b20      	cmp	r3, #32
 80106bc:	bf0c      	ite	eq
 80106be:	2301      	moveq	r3, #1
 80106c0:	2300      	movne	r3, #0
 80106c2:	b2db      	uxtb	r3, r3
 80106c4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	685b      	ldr	r3, [r3, #4]
 80106cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80106d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80106d4:	bf0c      	ite	eq
 80106d6:	2301      	moveq	r3, #1
 80106d8:	2300      	movne	r3, #0
 80106da:	b2db      	uxtb	r3, r3
 80106dc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d015      	beq.n	8010710 <HAL_ADC_IRQHandler+0x27a>
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d012      	beq.n	8010710 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106ee:	f043 0202 	orr.w	r2, r3, #2
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	f06f 0220 	mvn.w	r2, #32
 80106fe:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f000 f959 	bl	80109b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	f06f 0220 	mvn.w	r2, #32
 801070e:	601a      	str	r2, [r3, #0]
  }
}
 8010710:	bf00      	nop
 8010712:	3710      	adds	r7, #16
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b086      	sub	sp, #24
 801071c:	af00      	add	r7, sp, #0
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	60b9      	str	r1, [r7, #8]
 8010722:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8010724:	2300      	movs	r3, #0
 8010726:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801072e:	2b01      	cmp	r3, #1
 8010730:	d101      	bne.n	8010736 <HAL_ADC_Start_DMA+0x1e>
 8010732:	2302      	movs	r3, #2
 8010734:	e0cc      	b.n	80108d0 <HAL_ADC_Start_DMA+0x1b8>
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2201      	movs	r2, #1
 801073a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	689b      	ldr	r3, [r3, #8]
 8010744:	f003 0301 	and.w	r3, r3, #1
 8010748:	2b01      	cmp	r3, #1
 801074a:	d018      	beq.n	801077e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	689a      	ldr	r2, [r3, #8]
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	f042 0201 	orr.w	r2, r2, #1
 801075a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 801075c:	4b5e      	ldr	r3, [pc, #376]	; (80108d8 <HAL_ADC_Start_DMA+0x1c0>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	4a5e      	ldr	r2, [pc, #376]	; (80108dc <HAL_ADC_Start_DMA+0x1c4>)
 8010762:	fba2 2303 	umull	r2, r3, r2, r3
 8010766:	0c9a      	lsrs	r2, r3, #18
 8010768:	4613      	mov	r3, r2
 801076a:	005b      	lsls	r3, r3, #1
 801076c:	4413      	add	r3, r2
 801076e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8010770:	e002      	b.n	8010778 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	3b01      	subs	r3, #1
 8010776:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d1f9      	bne.n	8010772 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	689b      	ldr	r3, [r3, #8]
 8010784:	f003 0301 	and.w	r3, r3, #1
 8010788:	2b01      	cmp	r3, #1
 801078a:	f040 80a0 	bne.w	80108ce <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010792:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8010796:	f023 0301 	bic.w	r3, r3, #1
 801079a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d007      	beq.n	80107c0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80107b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80107c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80107cc:	d106      	bne.n	80107dc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107d2:	f023 0206 	bic.w	r2, r3, #6
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	645a      	str	r2, [r3, #68]	; 0x44
 80107da:	e002      	b.n	80107e2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	2200      	movs	r2, #0
 80107e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	2200      	movs	r2, #0
 80107e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80107ea:	4b3d      	ldr	r3, [pc, #244]	; (80108e0 <HAL_ADC_Start_DMA+0x1c8>)
 80107ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107f2:	4a3c      	ldr	r2, [pc, #240]	; (80108e4 <HAL_ADC_Start_DMA+0x1cc>)
 80107f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107fa:	4a3b      	ldr	r2, [pc, #236]	; (80108e8 <HAL_ADC_Start_DMA+0x1d0>)
 80107fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010802:	4a3a      	ldr	r2, [pc, #232]	; (80108ec <HAL_ADC_Start_DMA+0x1d4>)
 8010804:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801080e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	685a      	ldr	r2, [r3, #4]
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801081e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	689a      	ldr	r2, [r3, #8]
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801082e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	334c      	adds	r3, #76	; 0x4c
 801083a:	4619      	mov	r1, r3
 801083c:	68ba      	ldr	r2, [r7, #8]
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f000 fd2e 	bl	80112a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	685b      	ldr	r3, [r3, #4]
 8010848:	f003 031f 	and.w	r3, r3, #31
 801084c:	2b00      	cmp	r3, #0
 801084e:	d12a      	bne.n	80108a6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4a26      	ldr	r2, [pc, #152]	; (80108f0 <HAL_ADC_Start_DMA+0x1d8>)
 8010856:	4293      	cmp	r3, r2
 8010858:	d015      	beq.n	8010886 <HAL_ADC_Start_DMA+0x16e>
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	4a25      	ldr	r2, [pc, #148]	; (80108f4 <HAL_ADC_Start_DMA+0x1dc>)
 8010860:	4293      	cmp	r3, r2
 8010862:	d105      	bne.n	8010870 <HAL_ADC_Start_DMA+0x158>
 8010864:	4b1e      	ldr	r3, [pc, #120]	; (80108e0 <HAL_ADC_Start_DMA+0x1c8>)
 8010866:	685b      	ldr	r3, [r3, #4]
 8010868:	f003 031f 	and.w	r3, r3, #31
 801086c:	2b00      	cmp	r3, #0
 801086e:	d00a      	beq.n	8010886 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	4a20      	ldr	r2, [pc, #128]	; (80108f8 <HAL_ADC_Start_DMA+0x1e0>)
 8010876:	4293      	cmp	r3, r2
 8010878:	d129      	bne.n	80108ce <HAL_ADC_Start_DMA+0x1b6>
 801087a:	4b19      	ldr	r3, [pc, #100]	; (80108e0 <HAL_ADC_Start_DMA+0x1c8>)
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	f003 031f 	and.w	r3, r3, #31
 8010882:	2b0f      	cmp	r3, #15
 8010884:	d823      	bhi.n	80108ce <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	689b      	ldr	r3, [r3, #8]
 801088c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010890:	2b00      	cmp	r3, #0
 8010892:	d11c      	bne.n	80108ce <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	689a      	ldr	r2, [r3, #8]
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80108a2:	609a      	str	r2, [r3, #8]
 80108a4:	e013      	b.n	80108ce <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	4a11      	ldr	r2, [pc, #68]	; (80108f0 <HAL_ADC_Start_DMA+0x1d8>)
 80108ac:	4293      	cmp	r3, r2
 80108ae:	d10e      	bne.n	80108ce <HAL_ADC_Start_DMA+0x1b6>
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	689b      	ldr	r3, [r3, #8]
 80108b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d107      	bne.n	80108ce <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	689a      	ldr	r2, [r3, #8]
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80108cc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80108ce:	2300      	movs	r3, #0
}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3718      	adds	r7, #24
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}
 80108d8:	20000080 	.word	0x20000080
 80108dc:	431bde83 	.word	0x431bde83
 80108e0:	40012300 	.word	0x40012300
 80108e4:	08010e09 	.word	0x08010e09
 80108e8:	08010ec3 	.word	0x08010ec3
 80108ec:	08010edf 	.word	0x08010edf
 80108f0:	40012000 	.word	0x40012000
 80108f4:	40012100 	.word	0x40012100
 80108f8:	40012200 	.word	0x40012200

080108fc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010904:	2300      	movs	r3, #0
 8010906:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801090e:	2b01      	cmp	r3, #1
 8010910:	d101      	bne.n	8010916 <HAL_ADC_Stop_DMA+0x1a>
 8010912:	2302      	movs	r3, #2
 8010914:	e038      	b.n	8010988 <HAL_ADC_Stop_DMA+0x8c>
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2201      	movs	r2, #1
 801091a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	689a      	ldr	r2, [r3, #8]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f022 0201 	bic.w	r2, r2, #1
 801092c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	689b      	ldr	r3, [r3, #8]
 8010934:	f003 0301 	and.w	r3, r3, #1
 8010938:	2b00      	cmp	r3, #0
 801093a:	d120      	bne.n	801097e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	689a      	ldr	r2, [r3, #8]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801094a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010950:	4618      	mov	r0, r3
 8010952:	f000 fcfd 	bl	8011350 <HAL_DMA_Abort>
 8010956:	4603      	mov	r3, r0
 8010958:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	685a      	ldr	r2, [r3, #4]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8010968:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801096e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010972:	f023 0301 	bic.w	r3, r3, #1
 8010976:	f043 0201 	orr.w	r2, r3, #1
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2200      	movs	r2, #0
 8010982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8010986:	7bfb      	ldrb	r3, [r7, #15]
}
 8010988:	4618      	mov	r0, r3
 801098a:	3710      	adds	r7, #16
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}

08010990 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8010990:	b480      	push	{r7}
 8010992:	b083      	sub	sp, #12
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8010998:	bf00      	nop
 801099a:	370c      	adds	r7, #12
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr

080109a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80109a4:	b480      	push	{r7}
 80109a6:	b083      	sub	sp, #12
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80109ac:	bf00      	nop
 80109ae:	370c      	adds	r7, #12
 80109b0:	46bd      	mov	sp, r7
 80109b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b6:	4770      	bx	lr

080109b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b083      	sub	sp, #12
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80109c0:	bf00      	nop
 80109c2:	370c      	adds	r7, #12
 80109c4:	46bd      	mov	sp, r7
 80109c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ca:	4770      	bx	lr

080109cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80109cc:	b480      	push	{r7}
 80109ce:	b085      	sub	sp, #20
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80109d6:	2300      	movs	r3, #0
 80109d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d101      	bne.n	80109e8 <HAL_ADC_ConfigChannel+0x1c>
 80109e4:	2302      	movs	r3, #2
 80109e6:	e105      	b.n	8010bf4 <HAL_ADC_ConfigChannel+0x228>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2201      	movs	r2, #1
 80109ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	2b09      	cmp	r3, #9
 80109f6:	d925      	bls.n	8010a44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	68d9      	ldr	r1, [r3, #12]
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	461a      	mov	r2, r3
 8010a06:	4613      	mov	r3, r2
 8010a08:	005b      	lsls	r3, r3, #1
 8010a0a:	4413      	add	r3, r2
 8010a0c:	3b1e      	subs	r3, #30
 8010a0e:	2207      	movs	r2, #7
 8010a10:	fa02 f303 	lsl.w	r3, r2, r3
 8010a14:	43da      	mvns	r2, r3
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	400a      	ands	r2, r1
 8010a1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	68d9      	ldr	r1, [r3, #12]
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	689a      	ldr	r2, [r3, #8]
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	b29b      	uxth	r3, r3
 8010a2e:	4618      	mov	r0, r3
 8010a30:	4603      	mov	r3, r0
 8010a32:	005b      	lsls	r3, r3, #1
 8010a34:	4403      	add	r3, r0
 8010a36:	3b1e      	subs	r3, #30
 8010a38:	409a      	lsls	r2, r3
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	430a      	orrs	r2, r1
 8010a40:	60da      	str	r2, [r3, #12]
 8010a42:	e022      	b.n	8010a8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	6919      	ldr	r1, [r3, #16]
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	461a      	mov	r2, r3
 8010a52:	4613      	mov	r3, r2
 8010a54:	005b      	lsls	r3, r3, #1
 8010a56:	4413      	add	r3, r2
 8010a58:	2207      	movs	r2, #7
 8010a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a5e:	43da      	mvns	r2, r3
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	400a      	ands	r2, r1
 8010a66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	6919      	ldr	r1, [r3, #16]
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	689a      	ldr	r2, [r3, #8]
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	b29b      	uxth	r3, r3
 8010a78:	4618      	mov	r0, r3
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	005b      	lsls	r3, r3, #1
 8010a7e:	4403      	add	r3, r0
 8010a80:	409a      	lsls	r2, r3
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	430a      	orrs	r2, r1
 8010a88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	685b      	ldr	r3, [r3, #4]
 8010a8e:	2b06      	cmp	r3, #6
 8010a90:	d824      	bhi.n	8010adc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	685a      	ldr	r2, [r3, #4]
 8010a9c:	4613      	mov	r3, r2
 8010a9e:	009b      	lsls	r3, r3, #2
 8010aa0:	4413      	add	r3, r2
 8010aa2:	3b05      	subs	r3, #5
 8010aa4:	221f      	movs	r2, #31
 8010aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8010aaa:	43da      	mvns	r2, r3
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	400a      	ands	r2, r1
 8010ab2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	b29b      	uxth	r3, r3
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	685a      	ldr	r2, [r3, #4]
 8010ac6:	4613      	mov	r3, r2
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	4413      	add	r3, r2
 8010acc:	3b05      	subs	r3, #5
 8010ace:	fa00 f203 	lsl.w	r2, r0, r3
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	430a      	orrs	r2, r1
 8010ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8010ada:	e04c      	b.n	8010b76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	2b0c      	cmp	r3, #12
 8010ae2:	d824      	bhi.n	8010b2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	685a      	ldr	r2, [r3, #4]
 8010aee:	4613      	mov	r3, r2
 8010af0:	009b      	lsls	r3, r3, #2
 8010af2:	4413      	add	r3, r2
 8010af4:	3b23      	subs	r3, #35	; 0x23
 8010af6:	221f      	movs	r2, #31
 8010af8:	fa02 f303 	lsl.w	r3, r2, r3
 8010afc:	43da      	mvns	r2, r3
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	400a      	ands	r2, r1
 8010b04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	4618      	mov	r0, r3
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	685a      	ldr	r2, [r3, #4]
 8010b18:	4613      	mov	r3, r2
 8010b1a:	009b      	lsls	r3, r3, #2
 8010b1c:	4413      	add	r3, r2
 8010b1e:	3b23      	subs	r3, #35	; 0x23
 8010b20:	fa00 f203 	lsl.w	r2, r0, r3
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	430a      	orrs	r2, r1
 8010b2a:	631a      	str	r2, [r3, #48]	; 0x30
 8010b2c:	e023      	b.n	8010b76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	685a      	ldr	r2, [r3, #4]
 8010b38:	4613      	mov	r3, r2
 8010b3a:	009b      	lsls	r3, r3, #2
 8010b3c:	4413      	add	r3, r2
 8010b3e:	3b41      	subs	r3, #65	; 0x41
 8010b40:	221f      	movs	r2, #31
 8010b42:	fa02 f303 	lsl.w	r3, r2, r3
 8010b46:	43da      	mvns	r2, r3
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	400a      	ands	r2, r1
 8010b4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	685a      	ldr	r2, [r3, #4]
 8010b62:	4613      	mov	r3, r2
 8010b64:	009b      	lsls	r3, r3, #2
 8010b66:	4413      	add	r3, r2
 8010b68:	3b41      	subs	r3, #65	; 0x41
 8010b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	430a      	orrs	r2, r1
 8010b74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010b76:	4b22      	ldr	r3, [pc, #136]	; (8010c00 <HAL_ADC_ConfigChannel+0x234>)
 8010b78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	4a21      	ldr	r2, [pc, #132]	; (8010c04 <HAL_ADC_ConfigChannel+0x238>)
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d109      	bne.n	8010b98 <HAL_ADC_ConfigChannel+0x1cc>
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	2b12      	cmp	r3, #18
 8010b8a:	d105      	bne.n	8010b98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	4a19      	ldr	r2, [pc, #100]	; (8010c04 <HAL_ADC_ConfigChannel+0x238>)
 8010b9e:	4293      	cmp	r3, r2
 8010ba0:	d123      	bne.n	8010bea <HAL_ADC_ConfigChannel+0x21e>
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	2b10      	cmp	r3, #16
 8010ba8:	d003      	beq.n	8010bb2 <HAL_ADC_ConfigChannel+0x1e6>
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	2b11      	cmp	r3, #17
 8010bb0:	d11b      	bne.n	8010bea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	2b10      	cmp	r3, #16
 8010bc4:	d111      	bne.n	8010bea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8010bc6:	4b10      	ldr	r3, [pc, #64]	; (8010c08 <HAL_ADC_ConfigChannel+0x23c>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	4a10      	ldr	r2, [pc, #64]	; (8010c0c <HAL_ADC_ConfigChannel+0x240>)
 8010bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8010bd0:	0c9a      	lsrs	r2, r3, #18
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	009b      	lsls	r3, r3, #2
 8010bd6:	4413      	add	r3, r2
 8010bd8:	005b      	lsls	r3, r3, #1
 8010bda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8010bdc:	e002      	b.n	8010be4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	3b01      	subs	r3, #1
 8010be2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d1f9      	bne.n	8010bde <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2200      	movs	r2, #0
 8010bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8010bf2:	2300      	movs	r3, #0
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3714      	adds	r7, #20
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfe:	4770      	bx	lr
 8010c00:	40012300 	.word	0x40012300
 8010c04:	40012000 	.word	0x40012000
 8010c08:	20000080 	.word	0x20000080
 8010c0c:	431bde83 	.word	0x431bde83

08010c10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010c10:	b480      	push	{r7}
 8010c12:	b085      	sub	sp, #20
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010c18:	4b79      	ldr	r3, [pc, #484]	; (8010e00 <ADC_Init+0x1f0>)
 8010c1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	685b      	ldr	r3, [r3, #4]
 8010c20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	685a      	ldr	r2, [r3, #4]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	431a      	orrs	r2, r3
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	685a      	ldr	r2, [r3, #4]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010c44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	6859      	ldr	r1, [r3, #4]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	691b      	ldr	r3, [r3, #16]
 8010c50:	021a      	lsls	r2, r3, #8
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	430a      	orrs	r2, r1
 8010c58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	685a      	ldr	r2, [r3, #4]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8010c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	6859      	ldr	r1, [r3, #4]
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	689a      	ldr	r2, [r3, #8]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	430a      	orrs	r2, r1
 8010c7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	689a      	ldr	r2, [r3, #8]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	6899      	ldr	r1, [r3, #8]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	68da      	ldr	r2, [r3, #12]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	430a      	orrs	r2, r1
 8010c9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ca2:	4a58      	ldr	r2, [pc, #352]	; (8010e04 <ADC_Init+0x1f4>)
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d022      	beq.n	8010cee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	689a      	ldr	r2, [r3, #8]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010cb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	6899      	ldr	r1, [r3, #8]
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	430a      	orrs	r2, r1
 8010cc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	689a      	ldr	r2, [r3, #8]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010cd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	6899      	ldr	r1, [r3, #8]
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	430a      	orrs	r2, r1
 8010cea:	609a      	str	r2, [r3, #8]
 8010cec:	e00f      	b.n	8010d0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	689a      	ldr	r2, [r3, #8]
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010cfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	689a      	ldr	r2, [r3, #8]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010d0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	689a      	ldr	r2, [r3, #8]
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	f022 0202 	bic.w	r2, r2, #2
 8010d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	6899      	ldr	r1, [r3, #8]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	7e1b      	ldrb	r3, [r3, #24]
 8010d28:	005a      	lsls	r2, r3, #1
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	430a      	orrs	r2, r1
 8010d30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d01b      	beq.n	8010d74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	685a      	ldr	r2, [r3, #4]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010d4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	685a      	ldr	r2, [r3, #4]
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8010d5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	6859      	ldr	r1, [r3, #4]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d66:	3b01      	subs	r3, #1
 8010d68:	035a      	lsls	r2, r3, #13
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	430a      	orrs	r2, r1
 8010d70:	605a      	str	r2, [r3, #4]
 8010d72:	e007      	b.n	8010d84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	685a      	ldr	r2, [r3, #4]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010d82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8010d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	69db      	ldr	r3, [r3, #28]
 8010d9e:	3b01      	subs	r3, #1
 8010da0:	051a      	lsls	r2, r3, #20
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	430a      	orrs	r2, r1
 8010da8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	689a      	ldr	r2, [r3, #8]
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010db8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	6899      	ldr	r1, [r3, #8]
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010dc6:	025a      	lsls	r2, r3, #9
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	430a      	orrs	r2, r1
 8010dce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	689a      	ldr	r2, [r3, #8]
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010dde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	6899      	ldr	r1, [r3, #8]
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	695b      	ldr	r3, [r3, #20]
 8010dea:	029a      	lsls	r2, r3, #10
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	430a      	orrs	r2, r1
 8010df2:	609a      	str	r2, [r3, #8]
}
 8010df4:	bf00      	nop
 8010df6:	3714      	adds	r7, #20
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfe:	4770      	bx	lr
 8010e00:	40012300 	.word	0x40012300
 8010e04:	0f000001 	.word	0x0f000001

08010e08 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e14:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d13c      	bne.n	8010e9c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	689b      	ldr	r3, [r3, #8]
 8010e34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d12b      	bne.n	8010e94 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d127      	bne.n	8010e94 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d006      	beq.n	8010e60 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	689b      	ldr	r3, [r3, #8]
 8010e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d119      	bne.n	8010e94 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	685a      	ldr	r2, [r3, #4]
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	f022 0220 	bic.w	r2, r2, #32
 8010e6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d105      	bne.n	8010e94 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e8c:	f043 0201 	orr.w	r2, r3, #1
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8010e94:	68f8      	ldr	r0, [r7, #12]
 8010e96:	f7fd fa0b 	bl	800e2b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8010e9a:	e00e      	b.n	8010eba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ea0:	f003 0310 	and.w	r3, r3, #16
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d003      	beq.n	8010eb0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8010ea8:	68f8      	ldr	r0, [r7, #12]
 8010eaa:	f7ff fd85 	bl	80109b8 <HAL_ADC_ErrorCallback>
}
 8010eae:	e004      	b.n	8010eba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	4798      	blx	r3
}
 8010eba:	bf00      	nop
 8010ebc:	3710      	adds	r7, #16
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}

08010ec2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8010ec2:	b580      	push	{r7, lr}
 8010ec4:	b084      	sub	sp, #16
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ece:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8010ed0:	68f8      	ldr	r0, [r7, #12]
 8010ed2:	f7ff fd5d 	bl	8010990 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010ed6:	bf00      	nop
 8010ed8:	3710      	adds	r7, #16
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}

08010ede <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8010ede:	b580      	push	{r7, lr}
 8010ee0:	b084      	sub	sp, #16
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2240      	movs	r2, #64	; 0x40
 8010ef0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ef6:	f043 0204 	orr.w	r2, r3, #4
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8010efe:	68f8      	ldr	r0, [r7, #12]
 8010f00:	f7ff fd5a 	bl	80109b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010f04:	bf00      	nop
 8010f06:	3710      	adds	r7, #16
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}

08010f0c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b083      	sub	sp, #12
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8010f14:	bf00      	nop
 8010f16:	370c      	adds	r7, #12
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1e:	4770      	bx	lr

08010f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010f20:	b480      	push	{r7}
 8010f22:	b085      	sub	sp, #20
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f003 0307 	and.w	r3, r3, #7
 8010f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010f30:	4b0c      	ldr	r3, [pc, #48]	; (8010f64 <__NVIC_SetPriorityGrouping+0x44>)
 8010f32:	68db      	ldr	r3, [r3, #12]
 8010f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010f36:	68ba      	ldr	r2, [r7, #8]
 8010f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010f3c:	4013      	ands	r3, r2
 8010f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010f52:	4a04      	ldr	r2, [pc, #16]	; (8010f64 <__NVIC_SetPriorityGrouping+0x44>)
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	60d3      	str	r3, [r2, #12]
}
 8010f58:	bf00      	nop
 8010f5a:	3714      	adds	r7, #20
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f62:	4770      	bx	lr
 8010f64:	e000ed00 	.word	0xe000ed00

08010f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010f68:	b480      	push	{r7}
 8010f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010f6c:	4b04      	ldr	r3, [pc, #16]	; (8010f80 <__NVIC_GetPriorityGrouping+0x18>)
 8010f6e:	68db      	ldr	r3, [r3, #12]
 8010f70:	0a1b      	lsrs	r3, r3, #8
 8010f72:	f003 0307 	and.w	r3, r3, #7
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7e:	4770      	bx	lr
 8010f80:	e000ed00 	.word	0xe000ed00

08010f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b083      	sub	sp, #12
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	db0b      	blt.n	8010fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010f96:	79fb      	ldrb	r3, [r7, #7]
 8010f98:	f003 021f 	and.w	r2, r3, #31
 8010f9c:	4907      	ldr	r1, [pc, #28]	; (8010fbc <__NVIC_EnableIRQ+0x38>)
 8010f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fa2:	095b      	lsrs	r3, r3, #5
 8010fa4:	2001      	movs	r0, #1
 8010fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8010faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8010fae:	bf00      	nop
 8010fb0:	370c      	adds	r7, #12
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb8:	4770      	bx	lr
 8010fba:	bf00      	nop
 8010fbc:	e000e100 	.word	0xe000e100

08010fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b083      	sub	sp, #12
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	6039      	str	r1, [r7, #0]
 8010fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	db0a      	blt.n	8010fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	b2da      	uxtb	r2, r3
 8010fd8:	490c      	ldr	r1, [pc, #48]	; (801100c <__NVIC_SetPriority+0x4c>)
 8010fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010fde:	0112      	lsls	r2, r2, #4
 8010fe0:	b2d2      	uxtb	r2, r2
 8010fe2:	440b      	add	r3, r1
 8010fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010fe8:	e00a      	b.n	8011000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	b2da      	uxtb	r2, r3
 8010fee:	4908      	ldr	r1, [pc, #32]	; (8011010 <__NVIC_SetPriority+0x50>)
 8010ff0:	79fb      	ldrb	r3, [r7, #7]
 8010ff2:	f003 030f 	and.w	r3, r3, #15
 8010ff6:	3b04      	subs	r3, #4
 8010ff8:	0112      	lsls	r2, r2, #4
 8010ffa:	b2d2      	uxtb	r2, r2
 8010ffc:	440b      	add	r3, r1
 8010ffe:	761a      	strb	r2, [r3, #24]
}
 8011000:	bf00      	nop
 8011002:	370c      	adds	r7, #12
 8011004:	46bd      	mov	sp, r7
 8011006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100a:	4770      	bx	lr
 801100c:	e000e100 	.word	0xe000e100
 8011010:	e000ed00 	.word	0xe000ed00

08011014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011014:	b480      	push	{r7}
 8011016:	b089      	sub	sp, #36	; 0x24
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	f003 0307 	and.w	r3, r3, #7
 8011026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	f1c3 0307 	rsb	r3, r3, #7
 801102e:	2b04      	cmp	r3, #4
 8011030:	bf28      	it	cs
 8011032:	2304      	movcs	r3, #4
 8011034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011036:	69fb      	ldr	r3, [r7, #28]
 8011038:	3304      	adds	r3, #4
 801103a:	2b06      	cmp	r3, #6
 801103c:	d902      	bls.n	8011044 <NVIC_EncodePriority+0x30>
 801103e:	69fb      	ldr	r3, [r7, #28]
 8011040:	3b03      	subs	r3, #3
 8011042:	e000      	b.n	8011046 <NVIC_EncodePriority+0x32>
 8011044:	2300      	movs	r3, #0
 8011046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011048:	f04f 32ff 	mov.w	r2, #4294967295
 801104c:	69bb      	ldr	r3, [r7, #24]
 801104e:	fa02 f303 	lsl.w	r3, r2, r3
 8011052:	43da      	mvns	r2, r3
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	401a      	ands	r2, r3
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801105c:	f04f 31ff 	mov.w	r1, #4294967295
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	fa01 f303 	lsl.w	r3, r1, r3
 8011066:	43d9      	mvns	r1, r3
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801106c:	4313      	orrs	r3, r2
         );
}
 801106e:	4618      	mov	r0, r3
 8011070:	3724      	adds	r7, #36	; 0x24
 8011072:	46bd      	mov	sp, r7
 8011074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011078:	4770      	bx	lr
	...

0801107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b082      	sub	sp, #8
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	3b01      	subs	r3, #1
 8011088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801108c:	d301      	bcc.n	8011092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801108e:	2301      	movs	r3, #1
 8011090:	e00f      	b.n	80110b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011092:	4a0a      	ldr	r2, [pc, #40]	; (80110bc <SysTick_Config+0x40>)
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	3b01      	subs	r3, #1
 8011098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801109a:	210f      	movs	r1, #15
 801109c:	f04f 30ff 	mov.w	r0, #4294967295
 80110a0:	f7ff ff8e 	bl	8010fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80110a4:	4b05      	ldr	r3, [pc, #20]	; (80110bc <SysTick_Config+0x40>)
 80110a6:	2200      	movs	r2, #0
 80110a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80110aa:	4b04      	ldr	r3, [pc, #16]	; (80110bc <SysTick_Config+0x40>)
 80110ac:	2207      	movs	r2, #7
 80110ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80110b0:	2300      	movs	r3, #0
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3708      	adds	r7, #8
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}
 80110ba:	bf00      	nop
 80110bc:	e000e010 	.word	0xe000e010

080110c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	f7ff ff29 	bl	8010f20 <__NVIC_SetPriorityGrouping>
}
 80110ce:	bf00      	nop
 80110d0:	3708      	adds	r7, #8
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}

080110d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80110d6:	b580      	push	{r7, lr}
 80110d8:	b086      	sub	sp, #24
 80110da:	af00      	add	r7, sp, #0
 80110dc:	4603      	mov	r3, r0
 80110de:	60b9      	str	r1, [r7, #8]
 80110e0:	607a      	str	r2, [r7, #4]
 80110e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80110e4:	2300      	movs	r3, #0
 80110e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80110e8:	f7ff ff3e 	bl	8010f68 <__NVIC_GetPriorityGrouping>
 80110ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80110ee:	687a      	ldr	r2, [r7, #4]
 80110f0:	68b9      	ldr	r1, [r7, #8]
 80110f2:	6978      	ldr	r0, [r7, #20]
 80110f4:	f7ff ff8e 	bl	8011014 <NVIC_EncodePriority>
 80110f8:	4602      	mov	r2, r0
 80110fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110fe:	4611      	mov	r1, r2
 8011100:	4618      	mov	r0, r3
 8011102:	f7ff ff5d 	bl	8010fc0 <__NVIC_SetPriority>
}
 8011106:	bf00      	nop
 8011108:	3718      	adds	r7, #24
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}

0801110e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801110e:	b580      	push	{r7, lr}
 8011110:	b082      	sub	sp, #8
 8011112:	af00      	add	r7, sp, #0
 8011114:	4603      	mov	r3, r0
 8011116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801111c:	4618      	mov	r0, r3
 801111e:	f7ff ff31 	bl	8010f84 <__NVIC_EnableIRQ>
}
 8011122:	bf00      	nop
 8011124:	3708      	adds	r7, #8
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}

0801112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801112a:	b580      	push	{r7, lr}
 801112c:	b082      	sub	sp, #8
 801112e:	af00      	add	r7, sp, #0
 8011130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f7ff ffa2 	bl	801107c <SysTick_Config>
 8011138:	4603      	mov	r3, r0
}
 801113a:	4618      	mov	r0, r3
 801113c:	3708      	adds	r7, #8
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}
	...

08011144 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b086      	sub	sp, #24
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801114c:	2300      	movs	r3, #0
 801114e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8011150:	f7ff f930 	bl	80103b4 <HAL_GetTick>
 8011154:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d101      	bne.n	8011160 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801115c:	2301      	movs	r3, #1
 801115e:	e099      	b.n	8011294 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2200      	movs	r2, #0
 8011164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2202      	movs	r2, #2
 801116c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	681a      	ldr	r2, [r3, #0]
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f022 0201 	bic.w	r2, r2, #1
 801117e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011180:	e00f      	b.n	80111a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011182:	f7ff f917 	bl	80103b4 <HAL_GetTick>
 8011186:	4602      	mov	r2, r0
 8011188:	693b      	ldr	r3, [r7, #16]
 801118a:	1ad3      	subs	r3, r2, r3
 801118c:	2b05      	cmp	r3, #5
 801118e:	d908      	bls.n	80111a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2220      	movs	r2, #32
 8011194:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2203      	movs	r2, #3
 801119a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801119e:	2303      	movs	r3, #3
 80111a0:	e078      	b.n	8011294 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	f003 0301 	and.w	r3, r3, #1
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d1e8      	bne.n	8011182 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80111b8:	697a      	ldr	r2, [r7, #20]
 80111ba:	4b38      	ldr	r3, [pc, #224]	; (801129c <HAL_DMA_Init+0x158>)
 80111bc:	4013      	ands	r3, r2
 80111be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	685a      	ldr	r2, [r3, #4]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	689b      	ldr	r3, [r3, #8]
 80111c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80111ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	691b      	ldr	r3, [r3, #16]
 80111d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80111da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	699b      	ldr	r3, [r3, #24]
 80111e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80111e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	6a1b      	ldr	r3, [r3, #32]
 80111ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80111ee:	697a      	ldr	r2, [r7, #20]
 80111f0:	4313      	orrs	r3, r2
 80111f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111f8:	2b04      	cmp	r3, #4
 80111fa:	d107      	bne.n	801120c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011204:	4313      	orrs	r3, r2
 8011206:	697a      	ldr	r2, [r7, #20]
 8011208:	4313      	orrs	r3, r2
 801120a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	697a      	ldr	r2, [r7, #20]
 8011212:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	695b      	ldr	r3, [r3, #20]
 801121a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	f023 0307 	bic.w	r3, r3, #7
 8011222:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011228:	697a      	ldr	r2, [r7, #20]
 801122a:	4313      	orrs	r3, r2
 801122c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011232:	2b04      	cmp	r3, #4
 8011234:	d117      	bne.n	8011266 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801123a:	697a      	ldr	r2, [r7, #20]
 801123c:	4313      	orrs	r3, r2
 801123e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011244:	2b00      	cmp	r3, #0
 8011246:	d00e      	beq.n	8011266 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 fadf 	bl	801180c <DMA_CheckFifoParam>
 801124e:	4603      	mov	r3, r0
 8011250:	2b00      	cmp	r3, #0
 8011252:	d008      	beq.n	8011266 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2240      	movs	r2, #64	; 0x40
 8011258:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	2201      	movs	r2, #1
 801125e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8011262:	2301      	movs	r3, #1
 8011264:	e016      	b.n	8011294 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	697a      	ldr	r2, [r7, #20]
 801126c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f000 fa96 	bl	80117a0 <DMA_CalcBaseAndBitshift>
 8011274:	4603      	mov	r3, r0
 8011276:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801127c:	223f      	movs	r2, #63	; 0x3f
 801127e:	409a      	lsls	r2, r3
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2200      	movs	r2, #0
 8011288:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2201      	movs	r2, #1
 801128e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8011292:	2300      	movs	r3, #0
}
 8011294:	4618      	mov	r0, r3
 8011296:	3718      	adds	r7, #24
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}
 801129c:	f010803f 	.word	0xf010803f

080112a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b086      	sub	sp, #24
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	60f8      	str	r0, [r7, #12]
 80112a8:	60b9      	str	r1, [r7, #8]
 80112aa:	607a      	str	r2, [r7, #4]
 80112ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80112ae:	2300      	movs	r3, #0
 80112b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80112be:	2b01      	cmp	r3, #1
 80112c0:	d101      	bne.n	80112c6 <HAL_DMA_Start_IT+0x26>
 80112c2:	2302      	movs	r3, #2
 80112c4:	e040      	b.n	8011348 <HAL_DMA_Start_IT+0xa8>
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	2201      	movs	r2, #1
 80112ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80112d4:	b2db      	uxtb	r3, r3
 80112d6:	2b01      	cmp	r3, #1
 80112d8:	d12f      	bne.n	801133a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2202      	movs	r2, #2
 80112de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	2200      	movs	r2, #0
 80112e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	687a      	ldr	r2, [r7, #4]
 80112ec:	68b9      	ldr	r1, [r7, #8]
 80112ee:	68f8      	ldr	r0, [r7, #12]
 80112f0:	f000 fa28 	bl	8011744 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112f8:	223f      	movs	r2, #63	; 0x3f
 80112fa:	409a      	lsls	r2, r3
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	681a      	ldr	r2, [r3, #0]
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	f042 0216 	orr.w	r2, r2, #22
 801130e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011314:	2b00      	cmp	r3, #0
 8011316:	d007      	beq.n	8011328 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	681a      	ldr	r2, [r3, #0]
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	f042 0208 	orr.w	r2, r2, #8
 8011326:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	f042 0201 	orr.w	r2, r2, #1
 8011336:	601a      	str	r2, [r3, #0]
 8011338:	e005      	b.n	8011346 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	2200      	movs	r2, #0
 801133e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8011342:	2302      	movs	r3, #2
 8011344:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8011346:	7dfb      	ldrb	r3, [r7, #23]
}
 8011348:	4618      	mov	r0, r3
 801134a:	3718      	adds	r7, #24
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}

08011350 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b084      	sub	sp, #16
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801135c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801135e:	f7ff f829 	bl	80103b4 <HAL_GetTick>
 8011362:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801136a:	b2db      	uxtb	r3, r3
 801136c:	2b02      	cmp	r3, #2
 801136e:	d008      	beq.n	8011382 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2280      	movs	r2, #128	; 0x80
 8011374:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2200      	movs	r2, #0
 801137a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801137e:	2301      	movs	r3, #1
 8011380:	e052      	b.n	8011428 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	681a      	ldr	r2, [r3, #0]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	f022 0216 	bic.w	r2, r2, #22
 8011390:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	695a      	ldr	r2, [r3, #20]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80113a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d103      	bne.n	80113b2 <HAL_DMA_Abort+0x62>
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d007      	beq.n	80113c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	681a      	ldr	r2, [r3, #0]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f022 0208 	bic.w	r2, r2, #8
 80113c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	681a      	ldr	r2, [r3, #0]
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f022 0201 	bic.w	r2, r2, #1
 80113d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80113d2:	e013      	b.n	80113fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80113d4:	f7fe ffee 	bl	80103b4 <HAL_GetTick>
 80113d8:	4602      	mov	r2, r0
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	1ad3      	subs	r3, r2, r3
 80113de:	2b05      	cmp	r3, #5
 80113e0:	d90c      	bls.n	80113fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2220      	movs	r2, #32
 80113e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2200      	movs	r2, #0
 80113ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2203      	movs	r2, #3
 80113f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80113f8:	2303      	movs	r3, #3
 80113fa:	e015      	b.n	8011428 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	f003 0301 	and.w	r3, r3, #1
 8011406:	2b00      	cmp	r3, #0
 8011408:	d1e4      	bne.n	80113d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801140e:	223f      	movs	r2, #63	; 0x3f
 8011410:	409a      	lsls	r2, r3
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2200      	movs	r2, #0
 801141a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2201      	movs	r2, #1
 8011422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8011426:	2300      	movs	r3, #0
}
 8011428:	4618      	mov	r0, r3
 801142a:	3710      	adds	r7, #16
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b086      	sub	sp, #24
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8011438:	2300      	movs	r3, #0
 801143a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801143c:	4b92      	ldr	r3, [pc, #584]	; (8011688 <HAL_DMA_IRQHandler+0x258>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	4a92      	ldr	r2, [pc, #584]	; (801168c <HAL_DMA_IRQHandler+0x25c>)
 8011442:	fba2 2303 	umull	r2, r3, r2, r3
 8011446:	0a9b      	lsrs	r3, r3, #10
 8011448:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801144e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801145a:	2208      	movs	r2, #8
 801145c:	409a      	lsls	r2, r3
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	4013      	ands	r3, r2
 8011462:	2b00      	cmp	r3, #0
 8011464:	d01a      	beq.n	801149c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	f003 0304 	and.w	r3, r3, #4
 8011470:	2b00      	cmp	r3, #0
 8011472:	d013      	beq.n	801149c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f022 0204 	bic.w	r2, r2, #4
 8011482:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011488:	2208      	movs	r2, #8
 801148a:	409a      	lsls	r2, r3
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011494:	f043 0201 	orr.w	r2, r3, #1
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80114a0:	2201      	movs	r2, #1
 80114a2:	409a      	lsls	r2, r3
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	4013      	ands	r3, r2
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d012      	beq.n	80114d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	695b      	ldr	r3, [r3, #20]
 80114b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d00b      	beq.n	80114d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80114be:	2201      	movs	r2, #1
 80114c0:	409a      	lsls	r2, r3
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114ca:	f043 0202 	orr.w	r2, r3, #2
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80114d6:	2204      	movs	r2, #4
 80114d8:	409a      	lsls	r2, r3
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	4013      	ands	r3, r2
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d012      	beq.n	8011508 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	f003 0302 	and.w	r3, r3, #2
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d00b      	beq.n	8011508 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80114f4:	2204      	movs	r2, #4
 80114f6:	409a      	lsls	r2, r3
 80114f8:	693b      	ldr	r3, [r7, #16]
 80114fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011500:	f043 0204 	orr.w	r2, r3, #4
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801150c:	2210      	movs	r2, #16
 801150e:	409a      	lsls	r2, r3
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	4013      	ands	r3, r2
 8011514:	2b00      	cmp	r3, #0
 8011516:	d043      	beq.n	80115a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	f003 0308 	and.w	r3, r3, #8
 8011522:	2b00      	cmp	r3, #0
 8011524:	d03c      	beq.n	80115a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801152a:	2210      	movs	r2, #16
 801152c:	409a      	lsls	r2, r3
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801153c:	2b00      	cmp	r3, #0
 801153e:	d018      	beq.n	8011572 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801154a:	2b00      	cmp	r3, #0
 801154c:	d108      	bne.n	8011560 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011552:	2b00      	cmp	r3, #0
 8011554:	d024      	beq.n	80115a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	4798      	blx	r3
 801155e:	e01f      	b.n	80115a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011564:	2b00      	cmp	r3, #0
 8011566:	d01b      	beq.n	80115a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801156c:	6878      	ldr	r0, [r7, #4]
 801156e:	4798      	blx	r3
 8011570:	e016      	b.n	80115a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801157c:	2b00      	cmp	r3, #0
 801157e:	d107      	bne.n	8011590 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	681a      	ldr	r2, [r3, #0]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f022 0208 	bic.w	r2, r2, #8
 801158e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011594:	2b00      	cmp	r3, #0
 8011596:	d003      	beq.n	80115a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80115a4:	2220      	movs	r2, #32
 80115a6:	409a      	lsls	r2, r3
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	4013      	ands	r3, r2
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	f000 808e 	beq.w	80116ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	f003 0310 	and.w	r3, r3, #16
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f000 8086 	beq.w	80116ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80115c6:	2220      	movs	r2, #32
 80115c8:	409a      	lsls	r2, r3
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80115d4:	b2db      	uxtb	r3, r3
 80115d6:	2b05      	cmp	r3, #5
 80115d8:	d136      	bne.n	8011648 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	f022 0216 	bic.w	r2, r2, #22
 80115e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	695a      	ldr	r2, [r3, #20]
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80115f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d103      	bne.n	801160a <HAL_DMA_IRQHandler+0x1da>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011606:	2b00      	cmp	r3, #0
 8011608:	d007      	beq.n	801161a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	f022 0208 	bic.w	r2, r2, #8
 8011618:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801161e:	223f      	movs	r2, #63	; 0x3f
 8011620:	409a      	lsls	r2, r3
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	2200      	movs	r2, #0
 801162a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2201      	movs	r2, #1
 8011632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801163a:	2b00      	cmp	r3, #0
 801163c:	d07d      	beq.n	801173a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	4798      	blx	r3
        }
        return;
 8011646:	e078      	b.n	801173a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011652:	2b00      	cmp	r3, #0
 8011654:	d01c      	beq.n	8011690 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011660:	2b00      	cmp	r3, #0
 8011662:	d108      	bne.n	8011676 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011668:	2b00      	cmp	r3, #0
 801166a:	d030      	beq.n	80116ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	4798      	blx	r3
 8011674:	e02b      	b.n	80116ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801167a:	2b00      	cmp	r3, #0
 801167c:	d027      	beq.n	80116ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	4798      	blx	r3
 8011686:	e022      	b.n	80116ce <HAL_DMA_IRQHandler+0x29e>
 8011688:	20000080 	.word	0x20000080
 801168c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801169a:	2b00      	cmp	r3, #0
 801169c:	d10f      	bne.n	80116be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	681a      	ldr	r2, [r3, #0]
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	f022 0210 	bic.w	r2, r2, #16
 80116ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	2200      	movs	r2, #0
 80116b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2201      	movs	r2, #1
 80116ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d003      	beq.n	80116ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d032      	beq.n	801173c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116da:	f003 0301 	and.w	r3, r3, #1
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d022      	beq.n	8011728 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2205      	movs	r2, #5
 80116e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	681a      	ldr	r2, [r3, #0]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	f022 0201 	bic.w	r2, r2, #1
 80116f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	3301      	adds	r3, #1
 80116fe:	60bb      	str	r3, [r7, #8]
 8011700:	697a      	ldr	r2, [r7, #20]
 8011702:	429a      	cmp	r2, r3
 8011704:	d307      	bcc.n	8011716 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	f003 0301 	and.w	r3, r3, #1
 8011710:	2b00      	cmp	r3, #0
 8011712:	d1f2      	bne.n	80116fa <HAL_DMA_IRQHandler+0x2ca>
 8011714:	e000      	b.n	8011718 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8011716:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2200      	movs	r2, #0
 801171c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2201      	movs	r2, #1
 8011724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801172c:	2b00      	cmp	r3, #0
 801172e:	d005      	beq.n	801173c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	4798      	blx	r3
 8011738:	e000      	b.n	801173c <HAL_DMA_IRQHandler+0x30c>
        return;
 801173a:	bf00      	nop
    }
  }
}
 801173c:	3718      	adds	r7, #24
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}
 8011742:	bf00      	nop

08011744 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011744:	b480      	push	{r7}
 8011746:	b085      	sub	sp, #20
 8011748:	af00      	add	r7, sp, #0
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	60b9      	str	r1, [r7, #8]
 801174e:	607a      	str	r2, [r7, #4]
 8011750:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	681a      	ldr	r2, [r3, #0]
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011760:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	683a      	ldr	r2, [r7, #0]
 8011768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	689b      	ldr	r3, [r3, #8]
 801176e:	2b40      	cmp	r3, #64	; 0x40
 8011770:	d108      	bne.n	8011784 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	68ba      	ldr	r2, [r7, #8]
 8011780:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8011782:	e007      	b.n	8011794 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	68ba      	ldr	r2, [r7, #8]
 801178a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	687a      	ldr	r2, [r7, #4]
 8011792:	60da      	str	r2, [r3, #12]
}
 8011794:	bf00      	nop
 8011796:	3714      	adds	r7, #20
 8011798:	46bd      	mov	sp, r7
 801179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179e:	4770      	bx	lr

080117a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80117a0:	b480      	push	{r7}
 80117a2:	b085      	sub	sp, #20
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	b2db      	uxtb	r3, r3
 80117ae:	3b10      	subs	r3, #16
 80117b0:	4a14      	ldr	r2, [pc, #80]	; (8011804 <DMA_CalcBaseAndBitshift+0x64>)
 80117b2:	fba2 2303 	umull	r2, r3, r2, r3
 80117b6:	091b      	lsrs	r3, r3, #4
 80117b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80117ba:	4a13      	ldr	r2, [pc, #76]	; (8011808 <DMA_CalcBaseAndBitshift+0x68>)
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	4413      	add	r3, r2
 80117c0:	781b      	ldrb	r3, [r3, #0]
 80117c2:	461a      	mov	r2, r3
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	2b03      	cmp	r3, #3
 80117cc:	d909      	bls.n	80117e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80117d6:	f023 0303 	bic.w	r3, r3, #3
 80117da:	1d1a      	adds	r2, r3, #4
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	659a      	str	r2, [r3, #88]	; 0x58
 80117e0:	e007      	b.n	80117f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80117ea:	f023 0303 	bic.w	r3, r3, #3
 80117ee:	687a      	ldr	r2, [r7, #4]
 80117f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	3714      	adds	r7, #20
 80117fa:	46bd      	mov	sp, r7
 80117fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011800:	4770      	bx	lr
 8011802:	bf00      	nop
 8011804:	aaaaaaab 	.word	0xaaaaaaab
 8011808:	080180d4 	.word	0x080180d4

0801180c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801180c:	b480      	push	{r7}
 801180e:	b085      	sub	sp, #20
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011814:	2300      	movs	r3, #0
 8011816:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801181c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	699b      	ldr	r3, [r3, #24]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d11f      	bne.n	8011866 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	2b03      	cmp	r3, #3
 801182a:	d855      	bhi.n	80118d8 <DMA_CheckFifoParam+0xcc>
 801182c:	a201      	add	r2, pc, #4	; (adr r2, 8011834 <DMA_CheckFifoParam+0x28>)
 801182e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011832:	bf00      	nop
 8011834:	08011845 	.word	0x08011845
 8011838:	08011857 	.word	0x08011857
 801183c:	08011845 	.word	0x08011845
 8011840:	080118d9 	.word	0x080118d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801184c:	2b00      	cmp	r3, #0
 801184e:	d045      	beq.n	80118dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8011850:	2301      	movs	r3, #1
 8011852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011854:	e042      	b.n	80118dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801185a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801185e:	d13f      	bne.n	80118e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8011860:	2301      	movs	r3, #1
 8011862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011864:	e03c      	b.n	80118e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	699b      	ldr	r3, [r3, #24]
 801186a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801186e:	d121      	bne.n	80118b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	2b03      	cmp	r3, #3
 8011874:	d836      	bhi.n	80118e4 <DMA_CheckFifoParam+0xd8>
 8011876:	a201      	add	r2, pc, #4	; (adr r2, 801187c <DMA_CheckFifoParam+0x70>)
 8011878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801187c:	0801188d 	.word	0x0801188d
 8011880:	08011893 	.word	0x08011893
 8011884:	0801188d 	.word	0x0801188d
 8011888:	080118a5 	.word	0x080118a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801188c:	2301      	movs	r3, #1
 801188e:	73fb      	strb	r3, [r7, #15]
      break;
 8011890:	e02f      	b.n	80118f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801189a:	2b00      	cmp	r3, #0
 801189c:	d024      	beq.n	80118e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 801189e:	2301      	movs	r3, #1
 80118a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80118a2:	e021      	b.n	80118e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80118ac:	d11e      	bne.n	80118ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80118ae:	2301      	movs	r3, #1
 80118b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80118b2:	e01b      	b.n	80118ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80118b4:	68bb      	ldr	r3, [r7, #8]
 80118b6:	2b02      	cmp	r3, #2
 80118b8:	d902      	bls.n	80118c0 <DMA_CheckFifoParam+0xb4>
 80118ba:	2b03      	cmp	r3, #3
 80118bc:	d003      	beq.n	80118c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80118be:	e018      	b.n	80118f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80118c0:	2301      	movs	r3, #1
 80118c2:	73fb      	strb	r3, [r7, #15]
      break;
 80118c4:	e015      	b.n	80118f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d00e      	beq.n	80118f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80118d2:	2301      	movs	r3, #1
 80118d4:	73fb      	strb	r3, [r7, #15]
      break;
 80118d6:	e00b      	b.n	80118f0 <DMA_CheckFifoParam+0xe4>
      break;
 80118d8:	bf00      	nop
 80118da:	e00a      	b.n	80118f2 <DMA_CheckFifoParam+0xe6>
      break;
 80118dc:	bf00      	nop
 80118de:	e008      	b.n	80118f2 <DMA_CheckFifoParam+0xe6>
      break;
 80118e0:	bf00      	nop
 80118e2:	e006      	b.n	80118f2 <DMA_CheckFifoParam+0xe6>
      break;
 80118e4:	bf00      	nop
 80118e6:	e004      	b.n	80118f2 <DMA_CheckFifoParam+0xe6>
      break;
 80118e8:	bf00      	nop
 80118ea:	e002      	b.n	80118f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80118ec:	bf00      	nop
 80118ee:	e000      	b.n	80118f2 <DMA_CheckFifoParam+0xe6>
      break;
 80118f0:	bf00      	nop
    }
  } 
  
  return status; 
 80118f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3714      	adds	r7, #20
 80118f8:	46bd      	mov	sp, r7
 80118fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fe:	4770      	bx	lr

08011900 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b086      	sub	sp, #24
 8011904:	af00      	add	r7, sp, #0
 8011906:	60f8      	str	r0, [r7, #12]
 8011908:	60b9      	str	r1, [r7, #8]
 801190a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 801190e:	2301      	movs	r3, #1
 8011910:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8011912:	4b23      	ldr	r3, [pc, #140]	; (80119a0 <HAL_FLASH_Program+0xa0>)
 8011914:	7e1b      	ldrb	r3, [r3, #24]
 8011916:	2b01      	cmp	r3, #1
 8011918:	d101      	bne.n	801191e <HAL_FLASH_Program+0x1e>
 801191a:	2302      	movs	r3, #2
 801191c:	e03b      	b.n	8011996 <HAL_FLASH_Program+0x96>
 801191e:	4b20      	ldr	r3, [pc, #128]	; (80119a0 <HAL_FLASH_Program+0xa0>)
 8011920:	2201      	movs	r2, #1
 8011922:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011924:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011928:	f000 f924 	bl	8011b74 <FLASH_WaitForLastOperation>
 801192c:	4603      	mov	r3, r0
 801192e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8011930:	7dfb      	ldrb	r3, [r7, #23]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d12b      	bne.n	801198e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d105      	bne.n	8011948 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 801193c:	783b      	ldrb	r3, [r7, #0]
 801193e:	4619      	mov	r1, r3
 8011940:	68b8      	ldr	r0, [r7, #8]
 8011942:	f000 f9cd 	bl	8011ce0 <FLASH_Program_Byte>
 8011946:	e016      	b.n	8011976 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	2b01      	cmp	r3, #1
 801194c:	d105      	bne.n	801195a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 801194e:	883b      	ldrh	r3, [r7, #0]
 8011950:	4619      	mov	r1, r3
 8011952:	68b8      	ldr	r0, [r7, #8]
 8011954:	f000 f9a0 	bl	8011c98 <FLASH_Program_HalfWord>
 8011958:	e00d      	b.n	8011976 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	2b02      	cmp	r3, #2
 801195e:	d105      	bne.n	801196c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	4619      	mov	r1, r3
 8011964:	68b8      	ldr	r0, [r7, #8]
 8011966:	f000 f975 	bl	8011c54 <FLASH_Program_Word>
 801196a:	e004      	b.n	8011976 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 801196c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011970:	68b8      	ldr	r0, [r7, #8]
 8011972:	f000 f93f 	bl	8011bf4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011976:	f24c 3050 	movw	r0, #50000	; 0xc350
 801197a:	f000 f8fb 	bl	8011b74 <FLASH_WaitForLastOperation>
 801197e:	4603      	mov	r3, r0
 8011980:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8011982:	4b08      	ldr	r3, [pc, #32]	; (80119a4 <HAL_FLASH_Program+0xa4>)
 8011984:	691b      	ldr	r3, [r3, #16]
 8011986:	4a07      	ldr	r2, [pc, #28]	; (80119a4 <HAL_FLASH_Program+0xa4>)
 8011988:	f023 0301 	bic.w	r3, r3, #1
 801198c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801198e:	4b04      	ldr	r3, [pc, #16]	; (80119a0 <HAL_FLASH_Program+0xa0>)
 8011990:	2200      	movs	r2, #0
 8011992:	761a      	strb	r2, [r3, #24]
  
  return status;
 8011994:	7dfb      	ldrb	r3, [r7, #23]
}
 8011996:	4618      	mov	r0, r3
 8011998:	3718      	adds	r7, #24
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}
 801199e:	bf00      	nop
 80119a0:	20005264 	.word	0x20005264
 80119a4:	40023c00 	.word	0x40023c00

080119a8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b082      	sub	sp, #8
 80119ac:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80119ae:	2300      	movs	r3, #0
 80119b0:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80119b2:	4b4b      	ldr	r3, [pc, #300]	; (8011ae0 <HAL_FLASH_IRQHandler+0x138>)
 80119b4:	68db      	ldr	r3, [r3, #12]
 80119b6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d020      	beq.n	8011a00 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80119be:	4b49      	ldr	r3, [pc, #292]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	2b01      	cmp	r3, #1
 80119c6:	d107      	bne.n	80119d8 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 80119c8:	4b46      	ldr	r3, [pc, #280]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 80119ca:	68db      	ldr	r3, [r3, #12]
 80119cc:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 80119ce:	4b45      	ldr	r3, [pc, #276]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 80119d0:	f04f 32ff 	mov.w	r2, #4294967295
 80119d4:	60da      	str	r2, [r3, #12]
 80119d6:	e00b      	b.n	80119f0 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80119d8:	4b42      	ldr	r3, [pc, #264]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	b2db      	uxtb	r3, r3
 80119de:	2b02      	cmp	r3, #2
 80119e0:	d103      	bne.n	80119ea <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 80119e2:	4b40      	ldr	r3, [pc, #256]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 80119e4:	691b      	ldr	r3, [r3, #16]
 80119e6:	607b      	str	r3, [r7, #4]
 80119e8:	e002      	b.n	80119f0 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 80119ea:	4b3e      	ldr	r3, [pc, #248]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 80119ec:	695b      	ldr	r3, [r3, #20]
 80119ee:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 80119f0:	f000 f998 	bl	8011d24 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f000 f881 	bl	8011afc <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80119fa:	4b3a      	ldr	r3, [pc, #232]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 80119fc:	2200      	movs	r2, #0
 80119fe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8011a00:	4b37      	ldr	r3, [pc, #220]	; (8011ae0 <HAL_FLASH_IRQHandler+0x138>)
 8011a02:	68db      	ldr	r3, [r3, #12]
 8011a04:	f003 0301 	and.w	r3, r3, #1
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d04a      	beq.n	8011aa2 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011a0c:	4b34      	ldr	r3, [pc, #208]	; (8011ae0 <HAL_FLASH_IRQHandler+0x138>)
 8011a0e:	2201      	movs	r2, #1
 8011a10:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8011a12:	4b34      	ldr	r3, [pc, #208]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	b2db      	uxtb	r3, r3
 8011a18:	2b01      	cmp	r3, #1
 8011a1a:	d12d      	bne.n	8011a78 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8011a1c:	4b31      	ldr	r3, [pc, #196]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	3b01      	subs	r3, #1
 8011a22:	4a30      	ldr	r2, [pc, #192]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011a24:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8011a26:	4b2f      	ldr	r3, [pc, #188]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011a28:	685b      	ldr	r3, [r3, #4]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d015      	beq.n	8011a5a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8011a2e:	4b2d      	ldr	r3, [pc, #180]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011a30:	68db      	ldr	r3, [r3, #12]
 8011a32:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8011a34:	6878      	ldr	r0, [r7, #4]
 8011a36:	f000 f857 	bl	8011ae8 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8011a3a:	4b2a      	ldr	r3, [pc, #168]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011a3c:	68db      	ldr	r3, [r3, #12]
 8011a3e:	3301      	adds	r3, #1
 8011a40:	4a28      	ldr	r2, [pc, #160]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011a42:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8011a44:	4b27      	ldr	r3, [pc, #156]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011a46:	68db      	ldr	r3, [r3, #12]
 8011a48:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8011a4a:	4b26      	ldr	r3, [pc, #152]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011a4c:	7a1b      	ldrb	r3, [r3, #8]
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	4619      	mov	r1, r3
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f000 fa50 	bl	8011ef8 <FLASH_Erase_Sector>
 8011a58:	e023      	b.n	8011aa2 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8011a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8011a5e:	607b      	str	r3, [r7, #4]
 8011a60:	4a20      	ldr	r2, [pc, #128]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8011a66:	4b1f      	ldr	r3, [pc, #124]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011a68:	2200      	movs	r2, #0
 8011a6a:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8011a6c:	f000 fa8c 	bl	8011f88 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f000 f839 	bl	8011ae8 <HAL_FLASH_EndOfOperationCallback>
 8011a76:	e014      	b.n	8011aa2 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8011a78:	4b1a      	ldr	r3, [pc, #104]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011a7a:	781b      	ldrb	r3, [r3, #0]
 8011a7c:	b2db      	uxtb	r3, r3
 8011a7e:	2b02      	cmp	r3, #2
 8011a80:	d107      	bne.n	8011a92 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8011a82:	f000 fa81 	bl	8011f88 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8011a86:	4b17      	ldr	r3, [pc, #92]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011a88:	691b      	ldr	r3, [r3, #16]
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f000 f82c 	bl	8011ae8 <HAL_FLASH_EndOfOperationCallback>
 8011a90:	e004      	b.n	8011a9c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8011a92:	4b14      	ldr	r3, [pc, #80]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011a94:	695b      	ldr	r3, [r3, #20]
 8011a96:	4618      	mov	r0, r3
 8011a98:	f000 f826 	bl	8011ae8 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8011a9c:	4b11      	ldr	r3, [pc, #68]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8011aa2:	4b10      	ldr	r3, [pc, #64]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011aa4:	781b      	ldrb	r3, [r3, #0]
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d114      	bne.n	8011ad6 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8011aac:	4b0c      	ldr	r3, [pc, #48]	; (8011ae0 <HAL_FLASH_IRQHandler+0x138>)
 8011aae:	691b      	ldr	r3, [r3, #16]
 8011ab0:	4a0b      	ldr	r2, [pc, #44]	; (8011ae0 <HAL_FLASH_IRQHandler+0x138>)
 8011ab2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8011ab6:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8011ab8:	4b09      	ldr	r3, [pc, #36]	; (8011ae0 <HAL_FLASH_IRQHandler+0x138>)
 8011aba:	691b      	ldr	r3, [r3, #16]
 8011abc:	4a08      	ldr	r2, [pc, #32]	; (8011ae0 <HAL_FLASH_IRQHandler+0x138>)
 8011abe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011ac2:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8011ac4:	4b06      	ldr	r3, [pc, #24]	; (8011ae0 <HAL_FLASH_IRQHandler+0x138>)
 8011ac6:	691b      	ldr	r3, [r3, #16]
 8011ac8:	4a05      	ldr	r2, [pc, #20]	; (8011ae0 <HAL_FLASH_IRQHandler+0x138>)
 8011aca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8011ace:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8011ad0:	4b04      	ldr	r3, [pc, #16]	; (8011ae4 <HAL_FLASH_IRQHandler+0x13c>)
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	761a      	strb	r2, [r3, #24]
  }
}
 8011ad6:	bf00      	nop
 8011ad8:	3708      	adds	r7, #8
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	40023c00 	.word	0x40023c00
 8011ae4:	20005264 	.word	0x20005264

08011ae8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b083      	sub	sp, #12
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8011af0:	bf00      	nop
 8011af2:	370c      	adds	r7, #12
 8011af4:	46bd      	mov	sp, r7
 8011af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afa:	4770      	bx	lr

08011afc <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8011afc:	b480      	push	{r7}
 8011afe:	b083      	sub	sp, #12
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8011b04:	bf00      	nop
 8011b06:	370c      	adds	r7, #12
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0e:	4770      	bx	lr

08011b10 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8011b10:	b480      	push	{r7}
 8011b12:	b083      	sub	sp, #12
 8011b14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8011b16:	2300      	movs	r3, #0
 8011b18:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011b1a:	4b0b      	ldr	r3, [pc, #44]	; (8011b48 <HAL_FLASH_Unlock+0x38>)
 8011b1c:	691b      	ldr	r3, [r3, #16]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	da0b      	bge.n	8011b3a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011b22:	4b09      	ldr	r3, [pc, #36]	; (8011b48 <HAL_FLASH_Unlock+0x38>)
 8011b24:	4a09      	ldr	r2, [pc, #36]	; (8011b4c <HAL_FLASH_Unlock+0x3c>)
 8011b26:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011b28:	4b07      	ldr	r3, [pc, #28]	; (8011b48 <HAL_FLASH_Unlock+0x38>)
 8011b2a:	4a09      	ldr	r2, [pc, #36]	; (8011b50 <HAL_FLASH_Unlock+0x40>)
 8011b2c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011b2e:	4b06      	ldr	r3, [pc, #24]	; (8011b48 <HAL_FLASH_Unlock+0x38>)
 8011b30:	691b      	ldr	r3, [r3, #16]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	da01      	bge.n	8011b3a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8011b36:	2301      	movs	r3, #1
 8011b38:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8011b3a:	79fb      	ldrb	r3, [r7, #7]
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	370c      	adds	r7, #12
 8011b40:	46bd      	mov	sp, r7
 8011b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b46:	4770      	bx	lr
 8011b48:	40023c00 	.word	0x40023c00
 8011b4c:	45670123 	.word	0x45670123
 8011b50:	cdef89ab 	.word	0xcdef89ab

08011b54 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8011b54:	b480      	push	{r7}
 8011b56:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8011b58:	4b05      	ldr	r3, [pc, #20]	; (8011b70 <HAL_FLASH_Lock+0x1c>)
 8011b5a:	691b      	ldr	r3, [r3, #16]
 8011b5c:	4a04      	ldr	r2, [pc, #16]	; (8011b70 <HAL_FLASH_Lock+0x1c>)
 8011b5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011b62:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8011b64:	2300      	movs	r3, #0
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6e:	4770      	bx	lr
 8011b70:	40023c00 	.word	0x40023c00

08011b74 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b084      	sub	sp, #16
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011b80:	4b1a      	ldr	r3, [pc, #104]	; (8011bec <FLASH_WaitForLastOperation+0x78>)
 8011b82:	2200      	movs	r2, #0
 8011b84:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8011b86:	f7fe fc15 	bl	80103b4 <HAL_GetTick>
 8011b8a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011b8c:	e010      	b.n	8011bb0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b94:	d00c      	beq.n	8011bb0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d007      	beq.n	8011bac <FLASH_WaitForLastOperation+0x38>
 8011b9c:	f7fe fc0a 	bl	80103b4 <HAL_GetTick>
 8011ba0:	4602      	mov	r2, r0
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	1ad3      	subs	r3, r2, r3
 8011ba6:	687a      	ldr	r2, [r7, #4]
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d201      	bcs.n	8011bb0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8011bac:	2303      	movs	r3, #3
 8011bae:	e019      	b.n	8011be4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011bb0:	4b0f      	ldr	r3, [pc, #60]	; (8011bf0 <FLASH_WaitForLastOperation+0x7c>)
 8011bb2:	68db      	ldr	r3, [r3, #12]
 8011bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d1e8      	bne.n	8011b8e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8011bbc:	4b0c      	ldr	r3, [pc, #48]	; (8011bf0 <FLASH_WaitForLastOperation+0x7c>)
 8011bbe:	68db      	ldr	r3, [r3, #12]
 8011bc0:	f003 0301 	and.w	r3, r3, #1
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d002      	beq.n	8011bce <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011bc8:	4b09      	ldr	r3, [pc, #36]	; (8011bf0 <FLASH_WaitForLastOperation+0x7c>)
 8011bca:	2201      	movs	r2, #1
 8011bcc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8011bce:	4b08      	ldr	r3, [pc, #32]	; (8011bf0 <FLASH_WaitForLastOperation+0x7c>)
 8011bd0:	68db      	ldr	r3, [r3, #12]
 8011bd2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d003      	beq.n	8011be2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8011bda:	f000 f8a3 	bl	8011d24 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011bde:	2301      	movs	r3, #1
 8011be0:	e000      	b.n	8011be4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8011be2:	2300      	movs	r3, #0
  
}  
 8011be4:	4618      	mov	r0, r3
 8011be6:	3710      	adds	r7, #16
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}
 8011bec:	20005264 	.word	0x20005264
 8011bf0:	40023c00 	.word	0x40023c00

08011bf4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8011bf4:	b490      	push	{r4, r7}
 8011bf6:	b084      	sub	sp, #16
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011c00:	4b13      	ldr	r3, [pc, #76]	; (8011c50 <FLASH_Program_DoubleWord+0x5c>)
 8011c02:	691b      	ldr	r3, [r3, #16]
 8011c04:	4a12      	ldr	r2, [pc, #72]	; (8011c50 <FLASH_Program_DoubleWord+0x5c>)
 8011c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011c0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8011c0c:	4b10      	ldr	r3, [pc, #64]	; (8011c50 <FLASH_Program_DoubleWord+0x5c>)
 8011c0e:	691b      	ldr	r3, [r3, #16]
 8011c10:	4a0f      	ldr	r2, [pc, #60]	; (8011c50 <FLASH_Program_DoubleWord+0x5c>)
 8011c12:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011c16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011c18:	4b0d      	ldr	r3, [pc, #52]	; (8011c50 <FLASH_Program_DoubleWord+0x5c>)
 8011c1a:	691b      	ldr	r3, [r3, #16]
 8011c1c:	4a0c      	ldr	r2, [pc, #48]	; (8011c50 <FLASH_Program_DoubleWord+0x5c>)
 8011c1e:	f043 0301 	orr.w	r3, r3, #1
 8011c22:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	683a      	ldr	r2, [r7, #0]
 8011c28:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8011c2a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8011c2e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8011c32:	f04f 0300 	mov.w	r3, #0
 8011c36:	f04f 0400 	mov.w	r4, #0
 8011c3a:	0013      	movs	r3, r2
 8011c3c:	2400      	movs	r4, #0
 8011c3e:	68fa      	ldr	r2, [r7, #12]
 8011c40:	3204      	adds	r2, #4
 8011c42:	6013      	str	r3, [r2, #0]
}
 8011c44:	bf00      	nop
 8011c46:	3710      	adds	r7, #16
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bc90      	pop	{r4, r7}
 8011c4c:	4770      	bx	lr
 8011c4e:	bf00      	nop
 8011c50:	40023c00 	.word	0x40023c00

08011c54 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8011c54:	b480      	push	{r7}
 8011c56:	b083      	sub	sp, #12
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011c5e:	4b0d      	ldr	r3, [pc, #52]	; (8011c94 <FLASH_Program_Word+0x40>)
 8011c60:	691b      	ldr	r3, [r3, #16]
 8011c62:	4a0c      	ldr	r2, [pc, #48]	; (8011c94 <FLASH_Program_Word+0x40>)
 8011c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011c68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8011c6a:	4b0a      	ldr	r3, [pc, #40]	; (8011c94 <FLASH_Program_Word+0x40>)
 8011c6c:	691b      	ldr	r3, [r3, #16]
 8011c6e:	4a09      	ldr	r2, [pc, #36]	; (8011c94 <FLASH_Program_Word+0x40>)
 8011c70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011c74:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011c76:	4b07      	ldr	r3, [pc, #28]	; (8011c94 <FLASH_Program_Word+0x40>)
 8011c78:	691b      	ldr	r3, [r3, #16]
 8011c7a:	4a06      	ldr	r2, [pc, #24]	; (8011c94 <FLASH_Program_Word+0x40>)
 8011c7c:	f043 0301 	orr.w	r3, r3, #1
 8011c80:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	683a      	ldr	r2, [r7, #0]
 8011c86:	601a      	str	r2, [r3, #0]
}
 8011c88:	bf00      	nop
 8011c8a:	370c      	adds	r7, #12
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c92:	4770      	bx	lr
 8011c94:	40023c00 	.word	0x40023c00

08011c98 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011ca4:	4b0d      	ldr	r3, [pc, #52]	; (8011cdc <FLASH_Program_HalfWord+0x44>)
 8011ca6:	691b      	ldr	r3, [r3, #16]
 8011ca8:	4a0c      	ldr	r2, [pc, #48]	; (8011cdc <FLASH_Program_HalfWord+0x44>)
 8011caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011cae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8011cb0:	4b0a      	ldr	r3, [pc, #40]	; (8011cdc <FLASH_Program_HalfWord+0x44>)
 8011cb2:	691b      	ldr	r3, [r3, #16]
 8011cb4:	4a09      	ldr	r2, [pc, #36]	; (8011cdc <FLASH_Program_HalfWord+0x44>)
 8011cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011cba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011cbc:	4b07      	ldr	r3, [pc, #28]	; (8011cdc <FLASH_Program_HalfWord+0x44>)
 8011cbe:	691b      	ldr	r3, [r3, #16]
 8011cc0:	4a06      	ldr	r2, [pc, #24]	; (8011cdc <FLASH_Program_HalfWord+0x44>)
 8011cc2:	f043 0301 	orr.w	r3, r3, #1
 8011cc6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	887a      	ldrh	r2, [r7, #2]
 8011ccc:	801a      	strh	r2, [r3, #0]
}
 8011cce:	bf00      	nop
 8011cd0:	370c      	adds	r7, #12
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd8:	4770      	bx	lr
 8011cda:	bf00      	nop
 8011cdc:	40023c00 	.word	0x40023c00

08011ce0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b083      	sub	sp, #12
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	460b      	mov	r3, r1
 8011cea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011cec:	4b0c      	ldr	r3, [pc, #48]	; (8011d20 <FLASH_Program_Byte+0x40>)
 8011cee:	691b      	ldr	r3, [r3, #16]
 8011cf0:	4a0b      	ldr	r2, [pc, #44]	; (8011d20 <FLASH_Program_Byte+0x40>)
 8011cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011cf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8011cf8:	4b09      	ldr	r3, [pc, #36]	; (8011d20 <FLASH_Program_Byte+0x40>)
 8011cfa:	4a09      	ldr	r2, [pc, #36]	; (8011d20 <FLASH_Program_Byte+0x40>)
 8011cfc:	691b      	ldr	r3, [r3, #16]
 8011cfe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011d00:	4b07      	ldr	r3, [pc, #28]	; (8011d20 <FLASH_Program_Byte+0x40>)
 8011d02:	691b      	ldr	r3, [r3, #16]
 8011d04:	4a06      	ldr	r2, [pc, #24]	; (8011d20 <FLASH_Program_Byte+0x40>)
 8011d06:	f043 0301 	orr.w	r3, r3, #1
 8011d0a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	78fa      	ldrb	r2, [r7, #3]
 8011d10:	701a      	strb	r2, [r3, #0]
}
 8011d12:	bf00      	nop
 8011d14:	370c      	adds	r7, #12
 8011d16:	46bd      	mov	sp, r7
 8011d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1c:	4770      	bx	lr
 8011d1e:	bf00      	nop
 8011d20:	40023c00 	.word	0x40023c00

08011d24 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8011d24:	b480      	push	{r7}
 8011d26:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8011d28:	4b27      	ldr	r3, [pc, #156]	; (8011dc8 <FLASH_SetErrorCode+0xa4>)
 8011d2a:	68db      	ldr	r3, [r3, #12]
 8011d2c:	f003 0310 	and.w	r3, r3, #16
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d008      	beq.n	8011d46 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011d34:	4b25      	ldr	r3, [pc, #148]	; (8011dcc <FLASH_SetErrorCode+0xa8>)
 8011d36:	69db      	ldr	r3, [r3, #28]
 8011d38:	f043 0310 	orr.w	r3, r3, #16
 8011d3c:	4a23      	ldr	r2, [pc, #140]	; (8011dcc <FLASH_SetErrorCode+0xa8>)
 8011d3e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8011d40:	4b21      	ldr	r3, [pc, #132]	; (8011dc8 <FLASH_SetErrorCode+0xa4>)
 8011d42:	2210      	movs	r2, #16
 8011d44:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8011d46:	4b20      	ldr	r3, [pc, #128]	; (8011dc8 <FLASH_SetErrorCode+0xa4>)
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	f003 0320 	and.w	r3, r3, #32
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d008      	beq.n	8011d64 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8011d52:	4b1e      	ldr	r3, [pc, #120]	; (8011dcc <FLASH_SetErrorCode+0xa8>)
 8011d54:	69db      	ldr	r3, [r3, #28]
 8011d56:	f043 0308 	orr.w	r3, r3, #8
 8011d5a:	4a1c      	ldr	r2, [pc, #112]	; (8011dcc <FLASH_SetErrorCode+0xa8>)
 8011d5c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8011d5e:	4b1a      	ldr	r3, [pc, #104]	; (8011dc8 <FLASH_SetErrorCode+0xa4>)
 8011d60:	2220      	movs	r2, #32
 8011d62:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8011d64:	4b18      	ldr	r3, [pc, #96]	; (8011dc8 <FLASH_SetErrorCode+0xa4>)
 8011d66:	68db      	ldr	r3, [r3, #12]
 8011d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d008      	beq.n	8011d82 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8011d70:	4b16      	ldr	r3, [pc, #88]	; (8011dcc <FLASH_SetErrorCode+0xa8>)
 8011d72:	69db      	ldr	r3, [r3, #28]
 8011d74:	f043 0304 	orr.w	r3, r3, #4
 8011d78:	4a14      	ldr	r2, [pc, #80]	; (8011dcc <FLASH_SetErrorCode+0xa8>)
 8011d7a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8011d7c:	4b12      	ldr	r3, [pc, #72]	; (8011dc8 <FLASH_SetErrorCode+0xa4>)
 8011d7e:	2240      	movs	r2, #64	; 0x40
 8011d80:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8011d82:	4b11      	ldr	r3, [pc, #68]	; (8011dc8 <FLASH_SetErrorCode+0xa4>)
 8011d84:	68db      	ldr	r3, [r3, #12]
 8011d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d008      	beq.n	8011da0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8011d8e:	4b0f      	ldr	r3, [pc, #60]	; (8011dcc <FLASH_SetErrorCode+0xa8>)
 8011d90:	69db      	ldr	r3, [r3, #28]
 8011d92:	f043 0302 	orr.w	r3, r3, #2
 8011d96:	4a0d      	ldr	r2, [pc, #52]	; (8011dcc <FLASH_SetErrorCode+0xa8>)
 8011d98:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8011d9a:	4b0b      	ldr	r3, [pc, #44]	; (8011dc8 <FLASH_SetErrorCode+0xa4>)
 8011d9c:	2280      	movs	r2, #128	; 0x80
 8011d9e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8011da0:	4b09      	ldr	r3, [pc, #36]	; (8011dc8 <FLASH_SetErrorCode+0xa4>)
 8011da2:	68db      	ldr	r3, [r3, #12]
 8011da4:	f003 0302 	and.w	r3, r3, #2
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d008      	beq.n	8011dbe <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8011dac:	4b07      	ldr	r3, [pc, #28]	; (8011dcc <FLASH_SetErrorCode+0xa8>)
 8011dae:	69db      	ldr	r3, [r3, #28]
 8011db0:	f043 0320 	orr.w	r3, r3, #32
 8011db4:	4a05      	ldr	r2, [pc, #20]	; (8011dcc <FLASH_SetErrorCode+0xa8>)
 8011db6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8011db8:	4b03      	ldr	r3, [pc, #12]	; (8011dc8 <FLASH_SetErrorCode+0xa4>)
 8011dba:	2202      	movs	r2, #2
 8011dbc:	60da      	str	r2, [r3, #12]
  }
}
 8011dbe:	bf00      	nop
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc6:	4770      	bx	lr
 8011dc8:	40023c00 	.word	0x40023c00
 8011dcc:	20005264 	.word	0x20005264

08011dd0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b084      	sub	sp, #16
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011dda:	2301      	movs	r3, #1
 8011ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8011dde:	2300      	movs	r3, #0
 8011de0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8011de2:	4b31      	ldr	r3, [pc, #196]	; (8011ea8 <HAL_FLASHEx_Erase+0xd8>)
 8011de4:	7e1b      	ldrb	r3, [r3, #24]
 8011de6:	2b01      	cmp	r3, #1
 8011de8:	d101      	bne.n	8011dee <HAL_FLASHEx_Erase+0x1e>
 8011dea:	2302      	movs	r3, #2
 8011dec:	e058      	b.n	8011ea0 <HAL_FLASHEx_Erase+0xd0>
 8011dee:	4b2e      	ldr	r3, [pc, #184]	; (8011ea8 <HAL_FLASHEx_Erase+0xd8>)
 8011df0:	2201      	movs	r2, #1
 8011df2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011df4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011df8:	f7ff febc 	bl	8011b74 <FLASH_WaitForLastOperation>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8011e00:	7bfb      	ldrb	r3, [r7, #15]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d148      	bne.n	8011e98 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	f04f 32ff 	mov.w	r2, #4294967295
 8011e0c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	2b01      	cmp	r3, #1
 8011e14:	d115      	bne.n	8011e42 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	691b      	ldr	r3, [r3, #16]
 8011e1a:	b2da      	uxtb	r2, r3
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	4619      	mov	r1, r3
 8011e22:	4610      	mov	r0, r2
 8011e24:	f000 f844 	bl	8011eb0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011e28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011e2c:	f7ff fea2 	bl	8011b74 <FLASH_WaitForLastOperation>
 8011e30:	4603      	mov	r3, r0
 8011e32:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8011e34:	4b1d      	ldr	r3, [pc, #116]	; (8011eac <HAL_FLASHEx_Erase+0xdc>)
 8011e36:	691b      	ldr	r3, [r3, #16]
 8011e38:	4a1c      	ldr	r2, [pc, #112]	; (8011eac <HAL_FLASHEx_Erase+0xdc>)
 8011e3a:	f023 0304 	bic.w	r3, r3, #4
 8011e3e:	6113      	str	r3, [r2, #16]
 8011e40:	e028      	b.n	8011e94 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	689b      	ldr	r3, [r3, #8]
 8011e46:	60bb      	str	r3, [r7, #8]
 8011e48:	e01c      	b.n	8011e84 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	691b      	ldr	r3, [r3, #16]
 8011e4e:	b2db      	uxtb	r3, r3
 8011e50:	4619      	mov	r1, r3
 8011e52:	68b8      	ldr	r0, [r7, #8]
 8011e54:	f000 f850 	bl	8011ef8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011e58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011e5c:	f7ff fe8a 	bl	8011b74 <FLASH_WaitForLastOperation>
 8011e60:	4603      	mov	r3, r0
 8011e62:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8011e64:	4b11      	ldr	r3, [pc, #68]	; (8011eac <HAL_FLASHEx_Erase+0xdc>)
 8011e66:	691b      	ldr	r3, [r3, #16]
 8011e68:	4a10      	ldr	r2, [pc, #64]	; (8011eac <HAL_FLASHEx_Erase+0xdc>)
 8011e6a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8011e6e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8011e70:	7bfb      	ldrb	r3, [r7, #15]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d003      	beq.n	8011e7e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	68ba      	ldr	r2, [r7, #8]
 8011e7a:	601a      	str	r2, [r3, #0]
          break;
 8011e7c:	e00a      	b.n	8011e94 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	3301      	adds	r3, #1
 8011e82:	60bb      	str	r3, [r7, #8]
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	68da      	ldr	r2, [r3, #12]
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	689b      	ldr	r3, [r3, #8]
 8011e8c:	4413      	add	r3, r2
 8011e8e:	68ba      	ldr	r2, [r7, #8]
 8011e90:	429a      	cmp	r2, r3
 8011e92:	d3da      	bcc.n	8011e4a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8011e94:	f000 f878 	bl	8011f88 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8011e98:	4b03      	ldr	r3, [pc, #12]	; (8011ea8 <HAL_FLASHEx_Erase+0xd8>)
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	761a      	strb	r2, [r3, #24]

  return status;
 8011e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	3710      	adds	r7, #16
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}
 8011ea8:	20005264 	.word	0x20005264
 8011eac:	40023c00 	.word	0x40023c00

08011eb0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8011eb0:	b480      	push	{r7}
 8011eb2:	b083      	sub	sp, #12
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	6039      	str	r1, [r7, #0]
 8011eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011ebc:	4b0d      	ldr	r3, [pc, #52]	; (8011ef4 <FLASH_MassErase+0x44>)
 8011ebe:	691b      	ldr	r3, [r3, #16]
 8011ec0:	4a0c      	ldr	r2, [pc, #48]	; (8011ef4 <FLASH_MassErase+0x44>)
 8011ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011ec6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8011ec8:	4b0a      	ldr	r3, [pc, #40]	; (8011ef4 <FLASH_MassErase+0x44>)
 8011eca:	691b      	ldr	r3, [r3, #16]
 8011ecc:	4a09      	ldr	r2, [pc, #36]	; (8011ef4 <FLASH_MassErase+0x44>)
 8011ece:	f043 0304 	orr.w	r3, r3, #4
 8011ed2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8011ed4:	4b07      	ldr	r3, [pc, #28]	; (8011ef4 <FLASH_MassErase+0x44>)
 8011ed6:	691a      	ldr	r2, [r3, #16]
 8011ed8:	79fb      	ldrb	r3, [r7, #7]
 8011eda:	021b      	lsls	r3, r3, #8
 8011edc:	4313      	orrs	r3, r2
 8011ede:	4a05      	ldr	r2, [pc, #20]	; (8011ef4 <FLASH_MassErase+0x44>)
 8011ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011ee4:	6113      	str	r3, [r2, #16]
}
 8011ee6:	bf00      	nop
 8011ee8:	370c      	adds	r7, #12
 8011eea:	46bd      	mov	sp, r7
 8011eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef0:	4770      	bx	lr
 8011ef2:	bf00      	nop
 8011ef4:	40023c00 	.word	0x40023c00

08011ef8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b085      	sub	sp, #20
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	460b      	mov	r3, r1
 8011f02:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8011f04:	2300      	movs	r3, #0
 8011f06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8011f08:	78fb      	ldrb	r3, [r7, #3]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d102      	bne.n	8011f14 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	60fb      	str	r3, [r7, #12]
 8011f12:	e010      	b.n	8011f36 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8011f14:	78fb      	ldrb	r3, [r7, #3]
 8011f16:	2b01      	cmp	r3, #1
 8011f18:	d103      	bne.n	8011f22 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8011f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f1e:	60fb      	str	r3, [r7, #12]
 8011f20:	e009      	b.n	8011f36 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8011f22:	78fb      	ldrb	r3, [r7, #3]
 8011f24:	2b02      	cmp	r3, #2
 8011f26:	d103      	bne.n	8011f30 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8011f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011f2c:	60fb      	str	r3, [r7, #12]
 8011f2e:	e002      	b.n	8011f36 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8011f30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011f34:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011f36:	4b13      	ldr	r3, [pc, #76]	; (8011f84 <FLASH_Erase_Sector+0x8c>)
 8011f38:	691b      	ldr	r3, [r3, #16]
 8011f3a:	4a12      	ldr	r2, [pc, #72]	; (8011f84 <FLASH_Erase_Sector+0x8c>)
 8011f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011f40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8011f42:	4b10      	ldr	r3, [pc, #64]	; (8011f84 <FLASH_Erase_Sector+0x8c>)
 8011f44:	691a      	ldr	r2, [r3, #16]
 8011f46:	490f      	ldr	r1, [pc, #60]	; (8011f84 <FLASH_Erase_Sector+0x8c>)
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	4313      	orrs	r3, r2
 8011f4c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8011f4e:	4b0d      	ldr	r3, [pc, #52]	; (8011f84 <FLASH_Erase_Sector+0x8c>)
 8011f50:	691b      	ldr	r3, [r3, #16]
 8011f52:	4a0c      	ldr	r2, [pc, #48]	; (8011f84 <FLASH_Erase_Sector+0x8c>)
 8011f54:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011f58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8011f5a:	4b0a      	ldr	r3, [pc, #40]	; (8011f84 <FLASH_Erase_Sector+0x8c>)
 8011f5c:	691a      	ldr	r2, [r3, #16]
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	00db      	lsls	r3, r3, #3
 8011f62:	4313      	orrs	r3, r2
 8011f64:	4a07      	ldr	r2, [pc, #28]	; (8011f84 <FLASH_Erase_Sector+0x8c>)
 8011f66:	f043 0302 	orr.w	r3, r3, #2
 8011f6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8011f6c:	4b05      	ldr	r3, [pc, #20]	; (8011f84 <FLASH_Erase_Sector+0x8c>)
 8011f6e:	691b      	ldr	r3, [r3, #16]
 8011f70:	4a04      	ldr	r2, [pc, #16]	; (8011f84 <FLASH_Erase_Sector+0x8c>)
 8011f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011f76:	6113      	str	r3, [r2, #16]
}
 8011f78:	bf00      	nop
 8011f7a:	3714      	adds	r7, #20
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr
 8011f84:	40023c00 	.word	0x40023c00

08011f88 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8011f88:	b480      	push	{r7}
 8011f8a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8011f8c:	4b20      	ldr	r3, [pc, #128]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d017      	beq.n	8011fc8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8011f98:	4b1d      	ldr	r3, [pc, #116]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	4a1c      	ldr	r2, [pc, #112]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011f9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011fa2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8011fa4:	4b1a      	ldr	r3, [pc, #104]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	4a19      	ldr	r2, [pc, #100]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011faa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011fae:	6013      	str	r3, [r2, #0]
 8011fb0:	4b17      	ldr	r3, [pc, #92]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	4a16      	ldr	r2, [pc, #88]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011fb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011fba:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011fbc:	4b14      	ldr	r3, [pc, #80]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	4a13      	ldr	r2, [pc, #76]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011fc6:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8011fc8:	4b11      	ldr	r3, [pc, #68]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d017      	beq.n	8012004 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8011fd4:	4b0e      	ldr	r3, [pc, #56]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	4a0d      	ldr	r2, [pc, #52]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011fda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011fde:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8011fe0:	4b0b      	ldr	r3, [pc, #44]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	4a0a      	ldr	r2, [pc, #40]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011fe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011fea:	6013      	str	r3, [r2, #0]
 8011fec:	4b08      	ldr	r3, [pc, #32]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	4a07      	ldr	r2, [pc, #28]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ff6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8011ff8:	4b05      	ldr	r3, [pc, #20]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	4a04      	ldr	r2, [pc, #16]	; (8012010 <FLASH_FlushCaches+0x88>)
 8011ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012002:	6013      	str	r3, [r2, #0]
  }
}
 8012004:	bf00      	nop
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr
 801200e:	bf00      	nop
 8012010:	40023c00 	.word	0x40023c00

08012014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012014:	b480      	push	{r7}
 8012016:	b089      	sub	sp, #36	; 0x24
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
 801201c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801201e:	2300      	movs	r3, #0
 8012020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012022:	2300      	movs	r3, #0
 8012024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012026:	2300      	movs	r3, #0
 8012028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801202a:	2300      	movs	r3, #0
 801202c:	61fb      	str	r3, [r7, #28]
 801202e:	e16b      	b.n	8012308 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012030:	2201      	movs	r2, #1
 8012032:	69fb      	ldr	r3, [r7, #28]
 8012034:	fa02 f303 	lsl.w	r3, r2, r3
 8012038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	697a      	ldr	r2, [r7, #20]
 8012040:	4013      	ands	r3, r2
 8012042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012044:	693a      	ldr	r2, [r7, #16]
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	429a      	cmp	r2, r3
 801204a:	f040 815a 	bne.w	8012302 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	2b01      	cmp	r3, #1
 8012054:	d00b      	beq.n	801206e <HAL_GPIO_Init+0x5a>
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	2b02      	cmp	r3, #2
 801205c:	d007      	beq.n	801206e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012062:	2b11      	cmp	r3, #17
 8012064:	d003      	beq.n	801206e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	2b12      	cmp	r3, #18
 801206c:	d130      	bne.n	80120d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	689b      	ldr	r3, [r3, #8]
 8012072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012074:	69fb      	ldr	r3, [r7, #28]
 8012076:	005b      	lsls	r3, r3, #1
 8012078:	2203      	movs	r2, #3
 801207a:	fa02 f303 	lsl.w	r3, r2, r3
 801207e:	43db      	mvns	r3, r3
 8012080:	69ba      	ldr	r2, [r7, #24]
 8012082:	4013      	ands	r3, r2
 8012084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	68da      	ldr	r2, [r3, #12]
 801208a:	69fb      	ldr	r3, [r7, #28]
 801208c:	005b      	lsls	r3, r3, #1
 801208e:	fa02 f303 	lsl.w	r3, r2, r3
 8012092:	69ba      	ldr	r2, [r7, #24]
 8012094:	4313      	orrs	r3, r2
 8012096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	69ba      	ldr	r2, [r7, #24]
 801209c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	685b      	ldr	r3, [r3, #4]
 80120a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80120a4:	2201      	movs	r2, #1
 80120a6:	69fb      	ldr	r3, [r7, #28]
 80120a8:	fa02 f303 	lsl.w	r3, r2, r3
 80120ac:	43db      	mvns	r3, r3
 80120ae:	69ba      	ldr	r2, [r7, #24]
 80120b0:	4013      	ands	r3, r2
 80120b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	685b      	ldr	r3, [r3, #4]
 80120b8:	091b      	lsrs	r3, r3, #4
 80120ba:	f003 0201 	and.w	r2, r3, #1
 80120be:	69fb      	ldr	r3, [r7, #28]
 80120c0:	fa02 f303 	lsl.w	r3, r2, r3
 80120c4:	69ba      	ldr	r2, [r7, #24]
 80120c6:	4313      	orrs	r3, r2
 80120c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	69ba      	ldr	r2, [r7, #24]
 80120ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	68db      	ldr	r3, [r3, #12]
 80120d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80120d6:	69fb      	ldr	r3, [r7, #28]
 80120d8:	005b      	lsls	r3, r3, #1
 80120da:	2203      	movs	r2, #3
 80120dc:	fa02 f303 	lsl.w	r3, r2, r3
 80120e0:	43db      	mvns	r3, r3
 80120e2:	69ba      	ldr	r2, [r7, #24]
 80120e4:	4013      	ands	r3, r2
 80120e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	689a      	ldr	r2, [r3, #8]
 80120ec:	69fb      	ldr	r3, [r7, #28]
 80120ee:	005b      	lsls	r3, r3, #1
 80120f0:	fa02 f303 	lsl.w	r3, r2, r3
 80120f4:	69ba      	ldr	r2, [r7, #24]
 80120f6:	4313      	orrs	r3, r2
 80120f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	69ba      	ldr	r2, [r7, #24]
 80120fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012100:	683b      	ldr	r3, [r7, #0]
 8012102:	685b      	ldr	r3, [r3, #4]
 8012104:	2b02      	cmp	r3, #2
 8012106:	d003      	beq.n	8012110 <HAL_GPIO_Init+0xfc>
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	2b12      	cmp	r3, #18
 801210e:	d123      	bne.n	8012158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012110:	69fb      	ldr	r3, [r7, #28]
 8012112:	08da      	lsrs	r2, r3, #3
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	3208      	adds	r2, #8
 8012118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801211c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801211e:	69fb      	ldr	r3, [r7, #28]
 8012120:	f003 0307 	and.w	r3, r3, #7
 8012124:	009b      	lsls	r3, r3, #2
 8012126:	220f      	movs	r2, #15
 8012128:	fa02 f303 	lsl.w	r3, r2, r3
 801212c:	43db      	mvns	r3, r3
 801212e:	69ba      	ldr	r2, [r7, #24]
 8012130:	4013      	ands	r3, r2
 8012132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	691a      	ldr	r2, [r3, #16]
 8012138:	69fb      	ldr	r3, [r7, #28]
 801213a:	f003 0307 	and.w	r3, r3, #7
 801213e:	009b      	lsls	r3, r3, #2
 8012140:	fa02 f303 	lsl.w	r3, r2, r3
 8012144:	69ba      	ldr	r2, [r7, #24]
 8012146:	4313      	orrs	r3, r2
 8012148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801214a:	69fb      	ldr	r3, [r7, #28]
 801214c:	08da      	lsrs	r2, r3, #3
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	3208      	adds	r2, #8
 8012152:	69b9      	ldr	r1, [r7, #24]
 8012154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801215e:	69fb      	ldr	r3, [r7, #28]
 8012160:	005b      	lsls	r3, r3, #1
 8012162:	2203      	movs	r2, #3
 8012164:	fa02 f303 	lsl.w	r3, r2, r3
 8012168:	43db      	mvns	r3, r3
 801216a:	69ba      	ldr	r2, [r7, #24]
 801216c:	4013      	ands	r3, r2
 801216e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	f003 0203 	and.w	r2, r3, #3
 8012178:	69fb      	ldr	r3, [r7, #28]
 801217a:	005b      	lsls	r3, r3, #1
 801217c:	fa02 f303 	lsl.w	r3, r2, r3
 8012180:	69ba      	ldr	r2, [r7, #24]
 8012182:	4313      	orrs	r3, r2
 8012184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	69ba      	ldr	r2, [r7, #24]
 801218a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012194:	2b00      	cmp	r3, #0
 8012196:	f000 80b4 	beq.w	8012302 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801219a:	2300      	movs	r3, #0
 801219c:	60fb      	str	r3, [r7, #12]
 801219e:	4b5f      	ldr	r3, [pc, #380]	; (801231c <HAL_GPIO_Init+0x308>)
 80121a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121a2:	4a5e      	ldr	r2, [pc, #376]	; (801231c <HAL_GPIO_Init+0x308>)
 80121a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80121a8:	6453      	str	r3, [r2, #68]	; 0x44
 80121aa:	4b5c      	ldr	r3, [pc, #368]	; (801231c <HAL_GPIO_Init+0x308>)
 80121ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80121b2:	60fb      	str	r3, [r7, #12]
 80121b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80121b6:	4a5a      	ldr	r2, [pc, #360]	; (8012320 <HAL_GPIO_Init+0x30c>)
 80121b8:	69fb      	ldr	r3, [r7, #28]
 80121ba:	089b      	lsrs	r3, r3, #2
 80121bc:	3302      	adds	r3, #2
 80121be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80121c4:	69fb      	ldr	r3, [r7, #28]
 80121c6:	f003 0303 	and.w	r3, r3, #3
 80121ca:	009b      	lsls	r3, r3, #2
 80121cc:	220f      	movs	r2, #15
 80121ce:	fa02 f303 	lsl.w	r3, r2, r3
 80121d2:	43db      	mvns	r3, r3
 80121d4:	69ba      	ldr	r2, [r7, #24]
 80121d6:	4013      	ands	r3, r2
 80121d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	4a51      	ldr	r2, [pc, #324]	; (8012324 <HAL_GPIO_Init+0x310>)
 80121de:	4293      	cmp	r3, r2
 80121e0:	d02b      	beq.n	801223a <HAL_GPIO_Init+0x226>
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	4a50      	ldr	r2, [pc, #320]	; (8012328 <HAL_GPIO_Init+0x314>)
 80121e6:	4293      	cmp	r3, r2
 80121e8:	d025      	beq.n	8012236 <HAL_GPIO_Init+0x222>
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	4a4f      	ldr	r2, [pc, #316]	; (801232c <HAL_GPIO_Init+0x318>)
 80121ee:	4293      	cmp	r3, r2
 80121f0:	d01f      	beq.n	8012232 <HAL_GPIO_Init+0x21e>
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	4a4e      	ldr	r2, [pc, #312]	; (8012330 <HAL_GPIO_Init+0x31c>)
 80121f6:	4293      	cmp	r3, r2
 80121f8:	d019      	beq.n	801222e <HAL_GPIO_Init+0x21a>
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	4a4d      	ldr	r2, [pc, #308]	; (8012334 <HAL_GPIO_Init+0x320>)
 80121fe:	4293      	cmp	r3, r2
 8012200:	d013      	beq.n	801222a <HAL_GPIO_Init+0x216>
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	4a4c      	ldr	r2, [pc, #304]	; (8012338 <HAL_GPIO_Init+0x324>)
 8012206:	4293      	cmp	r3, r2
 8012208:	d00d      	beq.n	8012226 <HAL_GPIO_Init+0x212>
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	4a4b      	ldr	r2, [pc, #300]	; (801233c <HAL_GPIO_Init+0x328>)
 801220e:	4293      	cmp	r3, r2
 8012210:	d007      	beq.n	8012222 <HAL_GPIO_Init+0x20e>
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	4a4a      	ldr	r2, [pc, #296]	; (8012340 <HAL_GPIO_Init+0x32c>)
 8012216:	4293      	cmp	r3, r2
 8012218:	d101      	bne.n	801221e <HAL_GPIO_Init+0x20a>
 801221a:	2307      	movs	r3, #7
 801221c:	e00e      	b.n	801223c <HAL_GPIO_Init+0x228>
 801221e:	2308      	movs	r3, #8
 8012220:	e00c      	b.n	801223c <HAL_GPIO_Init+0x228>
 8012222:	2306      	movs	r3, #6
 8012224:	e00a      	b.n	801223c <HAL_GPIO_Init+0x228>
 8012226:	2305      	movs	r3, #5
 8012228:	e008      	b.n	801223c <HAL_GPIO_Init+0x228>
 801222a:	2304      	movs	r3, #4
 801222c:	e006      	b.n	801223c <HAL_GPIO_Init+0x228>
 801222e:	2303      	movs	r3, #3
 8012230:	e004      	b.n	801223c <HAL_GPIO_Init+0x228>
 8012232:	2302      	movs	r3, #2
 8012234:	e002      	b.n	801223c <HAL_GPIO_Init+0x228>
 8012236:	2301      	movs	r3, #1
 8012238:	e000      	b.n	801223c <HAL_GPIO_Init+0x228>
 801223a:	2300      	movs	r3, #0
 801223c:	69fa      	ldr	r2, [r7, #28]
 801223e:	f002 0203 	and.w	r2, r2, #3
 8012242:	0092      	lsls	r2, r2, #2
 8012244:	4093      	lsls	r3, r2
 8012246:	69ba      	ldr	r2, [r7, #24]
 8012248:	4313      	orrs	r3, r2
 801224a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801224c:	4934      	ldr	r1, [pc, #208]	; (8012320 <HAL_GPIO_Init+0x30c>)
 801224e:	69fb      	ldr	r3, [r7, #28]
 8012250:	089b      	lsrs	r3, r3, #2
 8012252:	3302      	adds	r3, #2
 8012254:	69ba      	ldr	r2, [r7, #24]
 8012256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801225a:	4b3a      	ldr	r3, [pc, #232]	; (8012344 <HAL_GPIO_Init+0x330>)
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012260:	693b      	ldr	r3, [r7, #16]
 8012262:	43db      	mvns	r3, r3
 8012264:	69ba      	ldr	r2, [r7, #24]
 8012266:	4013      	ands	r3, r2
 8012268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	685b      	ldr	r3, [r3, #4]
 801226e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012272:	2b00      	cmp	r3, #0
 8012274:	d003      	beq.n	801227e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012276:	69ba      	ldr	r2, [r7, #24]
 8012278:	693b      	ldr	r3, [r7, #16]
 801227a:	4313      	orrs	r3, r2
 801227c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801227e:	4a31      	ldr	r2, [pc, #196]	; (8012344 <HAL_GPIO_Init+0x330>)
 8012280:	69bb      	ldr	r3, [r7, #24]
 8012282:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012284:	4b2f      	ldr	r3, [pc, #188]	; (8012344 <HAL_GPIO_Init+0x330>)
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801228a:	693b      	ldr	r3, [r7, #16]
 801228c:	43db      	mvns	r3, r3
 801228e:	69ba      	ldr	r2, [r7, #24]
 8012290:	4013      	ands	r3, r2
 8012292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801229c:	2b00      	cmp	r3, #0
 801229e:	d003      	beq.n	80122a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80122a0:	69ba      	ldr	r2, [r7, #24]
 80122a2:	693b      	ldr	r3, [r7, #16]
 80122a4:	4313      	orrs	r3, r2
 80122a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80122a8:	4a26      	ldr	r2, [pc, #152]	; (8012344 <HAL_GPIO_Init+0x330>)
 80122aa:	69bb      	ldr	r3, [r7, #24]
 80122ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80122ae:	4b25      	ldr	r3, [pc, #148]	; (8012344 <HAL_GPIO_Init+0x330>)
 80122b0:	689b      	ldr	r3, [r3, #8]
 80122b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80122b4:	693b      	ldr	r3, [r7, #16]
 80122b6:	43db      	mvns	r3, r3
 80122b8:	69ba      	ldr	r2, [r7, #24]
 80122ba:	4013      	ands	r3, r2
 80122bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	685b      	ldr	r3, [r3, #4]
 80122c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d003      	beq.n	80122d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80122ca:	69ba      	ldr	r2, [r7, #24]
 80122cc:	693b      	ldr	r3, [r7, #16]
 80122ce:	4313      	orrs	r3, r2
 80122d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80122d2:	4a1c      	ldr	r2, [pc, #112]	; (8012344 <HAL_GPIO_Init+0x330>)
 80122d4:	69bb      	ldr	r3, [r7, #24]
 80122d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80122d8:	4b1a      	ldr	r3, [pc, #104]	; (8012344 <HAL_GPIO_Init+0x330>)
 80122da:	68db      	ldr	r3, [r3, #12]
 80122dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80122de:	693b      	ldr	r3, [r7, #16]
 80122e0:	43db      	mvns	r3, r3
 80122e2:	69ba      	ldr	r2, [r7, #24]
 80122e4:	4013      	ands	r3, r2
 80122e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	685b      	ldr	r3, [r3, #4]
 80122ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d003      	beq.n	80122fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80122f4:	69ba      	ldr	r2, [r7, #24]
 80122f6:	693b      	ldr	r3, [r7, #16]
 80122f8:	4313      	orrs	r3, r2
 80122fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80122fc:	4a11      	ldr	r2, [pc, #68]	; (8012344 <HAL_GPIO_Init+0x330>)
 80122fe:	69bb      	ldr	r3, [r7, #24]
 8012300:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012302:	69fb      	ldr	r3, [r7, #28]
 8012304:	3301      	adds	r3, #1
 8012306:	61fb      	str	r3, [r7, #28]
 8012308:	69fb      	ldr	r3, [r7, #28]
 801230a:	2b0f      	cmp	r3, #15
 801230c:	f67f ae90 	bls.w	8012030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8012310:	bf00      	nop
 8012312:	3724      	adds	r7, #36	; 0x24
 8012314:	46bd      	mov	sp, r7
 8012316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231a:	4770      	bx	lr
 801231c:	40023800 	.word	0x40023800
 8012320:	40013800 	.word	0x40013800
 8012324:	40020000 	.word	0x40020000
 8012328:	40020400 	.word	0x40020400
 801232c:	40020800 	.word	0x40020800
 8012330:	40020c00 	.word	0x40020c00
 8012334:	40021000 	.word	0x40021000
 8012338:	40021400 	.word	0x40021400
 801233c:	40021800 	.word	0x40021800
 8012340:	40021c00 	.word	0x40021c00
 8012344:	40013c00 	.word	0x40013c00

08012348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012348:	b480      	push	{r7}
 801234a:	b085      	sub	sp, #20
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
 8012350:	460b      	mov	r3, r1
 8012352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	691a      	ldr	r2, [r3, #16]
 8012358:	887b      	ldrh	r3, [r7, #2]
 801235a:	4013      	ands	r3, r2
 801235c:	2b00      	cmp	r3, #0
 801235e:	d002      	beq.n	8012366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012360:	2301      	movs	r3, #1
 8012362:	73fb      	strb	r3, [r7, #15]
 8012364:	e001      	b.n	801236a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8012366:	2300      	movs	r3, #0
 8012368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801236a:	7bfb      	ldrb	r3, [r7, #15]
}
 801236c:	4618      	mov	r0, r3
 801236e:	3714      	adds	r7, #20
 8012370:	46bd      	mov	sp, r7
 8012372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012376:	4770      	bx	lr

08012378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012378:	b480      	push	{r7}
 801237a:	b083      	sub	sp, #12
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	460b      	mov	r3, r1
 8012382:	807b      	strh	r3, [r7, #2]
 8012384:	4613      	mov	r3, r2
 8012386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012388:	787b      	ldrb	r3, [r7, #1]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d003      	beq.n	8012396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801238e:	887a      	ldrh	r2, [r7, #2]
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012394:	e003      	b.n	801239e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012396:	887b      	ldrh	r3, [r7, #2]
 8012398:	041a      	lsls	r2, r3, #16
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	619a      	str	r2, [r3, #24]
}
 801239e:	bf00      	nop
 80123a0:	370c      	adds	r7, #12
 80123a2:	46bd      	mov	sp, r7
 80123a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a8:	4770      	bx	lr
	...

080123ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b086      	sub	sp, #24
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d101      	bne.n	80123be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80123ba:	2301      	movs	r3, #1
 80123bc:	e25b      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	f003 0301 	and.w	r3, r3, #1
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d075      	beq.n	80124b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80123ca:	4ba3      	ldr	r3, [pc, #652]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 80123cc:	689b      	ldr	r3, [r3, #8]
 80123ce:	f003 030c 	and.w	r3, r3, #12
 80123d2:	2b04      	cmp	r3, #4
 80123d4:	d00c      	beq.n	80123f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80123d6:	4ba0      	ldr	r3, [pc, #640]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 80123d8:	689b      	ldr	r3, [r3, #8]
 80123da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80123de:	2b08      	cmp	r3, #8
 80123e0:	d112      	bne.n	8012408 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80123e2:	4b9d      	ldr	r3, [pc, #628]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 80123e4:	685b      	ldr	r3, [r3, #4]
 80123e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80123ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80123ee:	d10b      	bne.n	8012408 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80123f0:	4b99      	ldr	r3, [pc, #612]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d05b      	beq.n	80124b4 <HAL_RCC_OscConfig+0x108>
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	685b      	ldr	r3, [r3, #4]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d157      	bne.n	80124b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012404:	2301      	movs	r3, #1
 8012406:	e236      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	685b      	ldr	r3, [r3, #4]
 801240c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012410:	d106      	bne.n	8012420 <HAL_RCC_OscConfig+0x74>
 8012412:	4b91      	ldr	r3, [pc, #580]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	4a90      	ldr	r2, [pc, #576]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 8012418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801241c:	6013      	str	r3, [r2, #0]
 801241e:	e01d      	b.n	801245c <HAL_RCC_OscConfig+0xb0>
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	685b      	ldr	r3, [r3, #4]
 8012424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012428:	d10c      	bne.n	8012444 <HAL_RCC_OscConfig+0x98>
 801242a:	4b8b      	ldr	r3, [pc, #556]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	4a8a      	ldr	r2, [pc, #552]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 8012430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012434:	6013      	str	r3, [r2, #0]
 8012436:	4b88      	ldr	r3, [pc, #544]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	4a87      	ldr	r2, [pc, #540]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 801243c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012440:	6013      	str	r3, [r2, #0]
 8012442:	e00b      	b.n	801245c <HAL_RCC_OscConfig+0xb0>
 8012444:	4b84      	ldr	r3, [pc, #528]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	4a83      	ldr	r2, [pc, #524]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 801244a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801244e:	6013      	str	r3, [r2, #0]
 8012450:	4b81      	ldr	r3, [pc, #516]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	4a80      	ldr	r2, [pc, #512]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 8012456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801245a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	685b      	ldr	r3, [r3, #4]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d013      	beq.n	801248c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012464:	f7fd ffa6 	bl	80103b4 <HAL_GetTick>
 8012468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801246a:	e008      	b.n	801247e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801246c:	f7fd ffa2 	bl	80103b4 <HAL_GetTick>
 8012470:	4602      	mov	r2, r0
 8012472:	693b      	ldr	r3, [r7, #16]
 8012474:	1ad3      	subs	r3, r2, r3
 8012476:	2b64      	cmp	r3, #100	; 0x64
 8012478:	d901      	bls.n	801247e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801247a:	2303      	movs	r3, #3
 801247c:	e1fb      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801247e:	4b76      	ldr	r3, [pc, #472]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012486:	2b00      	cmp	r3, #0
 8012488:	d0f0      	beq.n	801246c <HAL_RCC_OscConfig+0xc0>
 801248a:	e014      	b.n	80124b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801248c:	f7fd ff92 	bl	80103b4 <HAL_GetTick>
 8012490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012492:	e008      	b.n	80124a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012494:	f7fd ff8e 	bl	80103b4 <HAL_GetTick>
 8012498:	4602      	mov	r2, r0
 801249a:	693b      	ldr	r3, [r7, #16]
 801249c:	1ad3      	subs	r3, r2, r3
 801249e:	2b64      	cmp	r3, #100	; 0x64
 80124a0:	d901      	bls.n	80124a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80124a2:	2303      	movs	r3, #3
 80124a4:	e1e7      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80124a6:	4b6c      	ldr	r3, [pc, #432]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d1f0      	bne.n	8012494 <HAL_RCC_OscConfig+0xe8>
 80124b2:	e000      	b.n	80124b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80124b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	f003 0302 	and.w	r3, r3, #2
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d063      	beq.n	801258a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80124c2:	4b65      	ldr	r3, [pc, #404]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 80124c4:	689b      	ldr	r3, [r3, #8]
 80124c6:	f003 030c 	and.w	r3, r3, #12
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d00b      	beq.n	80124e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80124ce:	4b62      	ldr	r3, [pc, #392]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 80124d0:	689b      	ldr	r3, [r3, #8]
 80124d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80124d6:	2b08      	cmp	r3, #8
 80124d8:	d11c      	bne.n	8012514 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80124da:	4b5f      	ldr	r3, [pc, #380]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 80124dc:	685b      	ldr	r3, [r3, #4]
 80124de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d116      	bne.n	8012514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80124e6:	4b5c      	ldr	r3, [pc, #368]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	f003 0302 	and.w	r3, r3, #2
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d005      	beq.n	80124fe <HAL_RCC_OscConfig+0x152>
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	68db      	ldr	r3, [r3, #12]
 80124f6:	2b01      	cmp	r3, #1
 80124f8:	d001      	beq.n	80124fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80124fa:	2301      	movs	r3, #1
 80124fc:	e1bb      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80124fe:	4b56      	ldr	r3, [pc, #344]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	691b      	ldr	r3, [r3, #16]
 801250a:	00db      	lsls	r3, r3, #3
 801250c:	4952      	ldr	r1, [pc, #328]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 801250e:	4313      	orrs	r3, r2
 8012510:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012512:	e03a      	b.n	801258a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	68db      	ldr	r3, [r3, #12]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d020      	beq.n	801255e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801251c:	4b4f      	ldr	r3, [pc, #316]	; (801265c <HAL_RCC_OscConfig+0x2b0>)
 801251e:	2201      	movs	r2, #1
 8012520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012522:	f7fd ff47 	bl	80103b4 <HAL_GetTick>
 8012526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012528:	e008      	b.n	801253c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801252a:	f7fd ff43 	bl	80103b4 <HAL_GetTick>
 801252e:	4602      	mov	r2, r0
 8012530:	693b      	ldr	r3, [r7, #16]
 8012532:	1ad3      	subs	r3, r2, r3
 8012534:	2b02      	cmp	r3, #2
 8012536:	d901      	bls.n	801253c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012538:	2303      	movs	r3, #3
 801253a:	e19c      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801253c:	4b46      	ldr	r3, [pc, #280]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	f003 0302 	and.w	r3, r3, #2
 8012544:	2b00      	cmp	r3, #0
 8012546:	d0f0      	beq.n	801252a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012548:	4b43      	ldr	r3, [pc, #268]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	691b      	ldr	r3, [r3, #16]
 8012554:	00db      	lsls	r3, r3, #3
 8012556:	4940      	ldr	r1, [pc, #256]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 8012558:	4313      	orrs	r3, r2
 801255a:	600b      	str	r3, [r1, #0]
 801255c:	e015      	b.n	801258a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801255e:	4b3f      	ldr	r3, [pc, #252]	; (801265c <HAL_RCC_OscConfig+0x2b0>)
 8012560:	2200      	movs	r2, #0
 8012562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012564:	f7fd ff26 	bl	80103b4 <HAL_GetTick>
 8012568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801256a:	e008      	b.n	801257e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801256c:	f7fd ff22 	bl	80103b4 <HAL_GetTick>
 8012570:	4602      	mov	r2, r0
 8012572:	693b      	ldr	r3, [r7, #16]
 8012574:	1ad3      	subs	r3, r2, r3
 8012576:	2b02      	cmp	r3, #2
 8012578:	d901      	bls.n	801257e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801257a:	2303      	movs	r3, #3
 801257c:	e17b      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801257e:	4b36      	ldr	r3, [pc, #216]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	f003 0302 	and.w	r3, r3, #2
 8012586:	2b00      	cmp	r3, #0
 8012588:	d1f0      	bne.n	801256c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	f003 0308 	and.w	r3, r3, #8
 8012592:	2b00      	cmp	r3, #0
 8012594:	d030      	beq.n	80125f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	695b      	ldr	r3, [r3, #20]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d016      	beq.n	80125cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801259e:	4b30      	ldr	r3, [pc, #192]	; (8012660 <HAL_RCC_OscConfig+0x2b4>)
 80125a0:	2201      	movs	r2, #1
 80125a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80125a4:	f7fd ff06 	bl	80103b4 <HAL_GetTick>
 80125a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80125aa:	e008      	b.n	80125be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80125ac:	f7fd ff02 	bl	80103b4 <HAL_GetTick>
 80125b0:	4602      	mov	r2, r0
 80125b2:	693b      	ldr	r3, [r7, #16]
 80125b4:	1ad3      	subs	r3, r2, r3
 80125b6:	2b02      	cmp	r3, #2
 80125b8:	d901      	bls.n	80125be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80125ba:	2303      	movs	r3, #3
 80125bc:	e15b      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80125be:	4b26      	ldr	r3, [pc, #152]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 80125c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125c2:	f003 0302 	and.w	r3, r3, #2
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d0f0      	beq.n	80125ac <HAL_RCC_OscConfig+0x200>
 80125ca:	e015      	b.n	80125f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80125cc:	4b24      	ldr	r3, [pc, #144]	; (8012660 <HAL_RCC_OscConfig+0x2b4>)
 80125ce:	2200      	movs	r2, #0
 80125d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80125d2:	f7fd feef 	bl	80103b4 <HAL_GetTick>
 80125d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80125d8:	e008      	b.n	80125ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80125da:	f7fd feeb 	bl	80103b4 <HAL_GetTick>
 80125de:	4602      	mov	r2, r0
 80125e0:	693b      	ldr	r3, [r7, #16]
 80125e2:	1ad3      	subs	r3, r2, r3
 80125e4:	2b02      	cmp	r3, #2
 80125e6:	d901      	bls.n	80125ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80125e8:	2303      	movs	r3, #3
 80125ea:	e144      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80125ec:	4b1a      	ldr	r3, [pc, #104]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 80125ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125f0:	f003 0302 	and.w	r3, r3, #2
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d1f0      	bne.n	80125da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	f003 0304 	and.w	r3, r3, #4
 8012600:	2b00      	cmp	r3, #0
 8012602:	f000 80a0 	beq.w	8012746 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012606:	2300      	movs	r3, #0
 8012608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801260a:	4b13      	ldr	r3, [pc, #76]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 801260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012612:	2b00      	cmp	r3, #0
 8012614:	d10f      	bne.n	8012636 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012616:	2300      	movs	r3, #0
 8012618:	60bb      	str	r3, [r7, #8]
 801261a:	4b0f      	ldr	r3, [pc, #60]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 801261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801261e:	4a0e      	ldr	r2, [pc, #56]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 8012620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012624:	6413      	str	r3, [r2, #64]	; 0x40
 8012626:	4b0c      	ldr	r3, [pc, #48]	; (8012658 <HAL_RCC_OscConfig+0x2ac>)
 8012628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801262e:	60bb      	str	r3, [r7, #8]
 8012630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012632:	2301      	movs	r3, #1
 8012634:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012636:	4b0b      	ldr	r3, [pc, #44]	; (8012664 <HAL_RCC_OscConfig+0x2b8>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801263e:	2b00      	cmp	r3, #0
 8012640:	d121      	bne.n	8012686 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012642:	4b08      	ldr	r3, [pc, #32]	; (8012664 <HAL_RCC_OscConfig+0x2b8>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	4a07      	ldr	r2, [pc, #28]	; (8012664 <HAL_RCC_OscConfig+0x2b8>)
 8012648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801264c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801264e:	f7fd feb1 	bl	80103b4 <HAL_GetTick>
 8012652:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012654:	e011      	b.n	801267a <HAL_RCC_OscConfig+0x2ce>
 8012656:	bf00      	nop
 8012658:	40023800 	.word	0x40023800
 801265c:	42470000 	.word	0x42470000
 8012660:	42470e80 	.word	0x42470e80
 8012664:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012668:	f7fd fea4 	bl	80103b4 <HAL_GetTick>
 801266c:	4602      	mov	r2, r0
 801266e:	693b      	ldr	r3, [r7, #16]
 8012670:	1ad3      	subs	r3, r2, r3
 8012672:	2b02      	cmp	r3, #2
 8012674:	d901      	bls.n	801267a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8012676:	2303      	movs	r3, #3
 8012678:	e0fd      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801267a:	4b81      	ldr	r3, [pc, #516]	; (8012880 <HAL_RCC_OscConfig+0x4d4>)
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012682:	2b00      	cmp	r3, #0
 8012684:	d0f0      	beq.n	8012668 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	689b      	ldr	r3, [r3, #8]
 801268a:	2b01      	cmp	r3, #1
 801268c:	d106      	bne.n	801269c <HAL_RCC_OscConfig+0x2f0>
 801268e:	4b7d      	ldr	r3, [pc, #500]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 8012690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012692:	4a7c      	ldr	r2, [pc, #496]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 8012694:	f043 0301 	orr.w	r3, r3, #1
 8012698:	6713      	str	r3, [r2, #112]	; 0x70
 801269a:	e01c      	b.n	80126d6 <HAL_RCC_OscConfig+0x32a>
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	689b      	ldr	r3, [r3, #8]
 80126a0:	2b05      	cmp	r3, #5
 80126a2:	d10c      	bne.n	80126be <HAL_RCC_OscConfig+0x312>
 80126a4:	4b77      	ldr	r3, [pc, #476]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 80126a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126a8:	4a76      	ldr	r2, [pc, #472]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 80126aa:	f043 0304 	orr.w	r3, r3, #4
 80126ae:	6713      	str	r3, [r2, #112]	; 0x70
 80126b0:	4b74      	ldr	r3, [pc, #464]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 80126b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126b4:	4a73      	ldr	r2, [pc, #460]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 80126b6:	f043 0301 	orr.w	r3, r3, #1
 80126ba:	6713      	str	r3, [r2, #112]	; 0x70
 80126bc:	e00b      	b.n	80126d6 <HAL_RCC_OscConfig+0x32a>
 80126be:	4b71      	ldr	r3, [pc, #452]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 80126c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126c2:	4a70      	ldr	r2, [pc, #448]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 80126c4:	f023 0301 	bic.w	r3, r3, #1
 80126c8:	6713      	str	r3, [r2, #112]	; 0x70
 80126ca:	4b6e      	ldr	r3, [pc, #440]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 80126cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126ce:	4a6d      	ldr	r2, [pc, #436]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 80126d0:	f023 0304 	bic.w	r3, r3, #4
 80126d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	689b      	ldr	r3, [r3, #8]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d015      	beq.n	801270a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80126de:	f7fd fe69 	bl	80103b4 <HAL_GetTick>
 80126e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80126e4:	e00a      	b.n	80126fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80126e6:	f7fd fe65 	bl	80103b4 <HAL_GetTick>
 80126ea:	4602      	mov	r2, r0
 80126ec:	693b      	ldr	r3, [r7, #16]
 80126ee:	1ad3      	subs	r3, r2, r3
 80126f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80126f4:	4293      	cmp	r3, r2
 80126f6:	d901      	bls.n	80126fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80126f8:	2303      	movs	r3, #3
 80126fa:	e0bc      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80126fc:	4b61      	ldr	r3, [pc, #388]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 80126fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012700:	f003 0302 	and.w	r3, r3, #2
 8012704:	2b00      	cmp	r3, #0
 8012706:	d0ee      	beq.n	80126e6 <HAL_RCC_OscConfig+0x33a>
 8012708:	e014      	b.n	8012734 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801270a:	f7fd fe53 	bl	80103b4 <HAL_GetTick>
 801270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012710:	e00a      	b.n	8012728 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012712:	f7fd fe4f 	bl	80103b4 <HAL_GetTick>
 8012716:	4602      	mov	r2, r0
 8012718:	693b      	ldr	r3, [r7, #16]
 801271a:	1ad3      	subs	r3, r2, r3
 801271c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012720:	4293      	cmp	r3, r2
 8012722:	d901      	bls.n	8012728 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012724:	2303      	movs	r3, #3
 8012726:	e0a6      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012728:	4b56      	ldr	r3, [pc, #344]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 801272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801272c:	f003 0302 	and.w	r3, r3, #2
 8012730:	2b00      	cmp	r3, #0
 8012732:	d1ee      	bne.n	8012712 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012734:	7dfb      	ldrb	r3, [r7, #23]
 8012736:	2b01      	cmp	r3, #1
 8012738:	d105      	bne.n	8012746 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801273a:	4b52      	ldr	r3, [pc, #328]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 801273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801273e:	4a51      	ldr	r2, [pc, #324]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 8012740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012744:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	699b      	ldr	r3, [r3, #24]
 801274a:	2b00      	cmp	r3, #0
 801274c:	f000 8092 	beq.w	8012874 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012750:	4b4c      	ldr	r3, [pc, #304]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 8012752:	689b      	ldr	r3, [r3, #8]
 8012754:	f003 030c 	and.w	r3, r3, #12
 8012758:	2b08      	cmp	r3, #8
 801275a:	d05c      	beq.n	8012816 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	699b      	ldr	r3, [r3, #24]
 8012760:	2b02      	cmp	r3, #2
 8012762:	d141      	bne.n	80127e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012764:	4b48      	ldr	r3, [pc, #288]	; (8012888 <HAL_RCC_OscConfig+0x4dc>)
 8012766:	2200      	movs	r2, #0
 8012768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801276a:	f7fd fe23 	bl	80103b4 <HAL_GetTick>
 801276e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012770:	e008      	b.n	8012784 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012772:	f7fd fe1f 	bl	80103b4 <HAL_GetTick>
 8012776:	4602      	mov	r2, r0
 8012778:	693b      	ldr	r3, [r7, #16]
 801277a:	1ad3      	subs	r3, r2, r3
 801277c:	2b02      	cmp	r3, #2
 801277e:	d901      	bls.n	8012784 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8012780:	2303      	movs	r3, #3
 8012782:	e078      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012784:	4b3f      	ldr	r3, [pc, #252]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801278c:	2b00      	cmp	r3, #0
 801278e:	d1f0      	bne.n	8012772 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	69da      	ldr	r2, [r3, #28]
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	6a1b      	ldr	r3, [r3, #32]
 8012798:	431a      	orrs	r2, r3
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801279e:	019b      	lsls	r3, r3, #6
 80127a0:	431a      	orrs	r2, r3
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127a6:	085b      	lsrs	r3, r3, #1
 80127a8:	3b01      	subs	r3, #1
 80127aa:	041b      	lsls	r3, r3, #16
 80127ac:	431a      	orrs	r2, r3
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127b2:	061b      	lsls	r3, r3, #24
 80127b4:	4933      	ldr	r1, [pc, #204]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 80127b6:	4313      	orrs	r3, r2
 80127b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80127ba:	4b33      	ldr	r3, [pc, #204]	; (8012888 <HAL_RCC_OscConfig+0x4dc>)
 80127bc:	2201      	movs	r2, #1
 80127be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80127c0:	f7fd fdf8 	bl	80103b4 <HAL_GetTick>
 80127c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80127c6:	e008      	b.n	80127da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80127c8:	f7fd fdf4 	bl	80103b4 <HAL_GetTick>
 80127cc:	4602      	mov	r2, r0
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	1ad3      	subs	r3, r2, r3
 80127d2:	2b02      	cmp	r3, #2
 80127d4:	d901      	bls.n	80127da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80127d6:	2303      	movs	r3, #3
 80127d8:	e04d      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80127da:	4b2a      	ldr	r3, [pc, #168]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d0f0      	beq.n	80127c8 <HAL_RCC_OscConfig+0x41c>
 80127e6:	e045      	b.n	8012874 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80127e8:	4b27      	ldr	r3, [pc, #156]	; (8012888 <HAL_RCC_OscConfig+0x4dc>)
 80127ea:	2200      	movs	r2, #0
 80127ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80127ee:	f7fd fde1 	bl	80103b4 <HAL_GetTick>
 80127f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80127f4:	e008      	b.n	8012808 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80127f6:	f7fd fddd 	bl	80103b4 <HAL_GetTick>
 80127fa:	4602      	mov	r2, r0
 80127fc:	693b      	ldr	r3, [r7, #16]
 80127fe:	1ad3      	subs	r3, r2, r3
 8012800:	2b02      	cmp	r3, #2
 8012802:	d901      	bls.n	8012808 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8012804:	2303      	movs	r3, #3
 8012806:	e036      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012808:	4b1e      	ldr	r3, [pc, #120]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012810:	2b00      	cmp	r3, #0
 8012812:	d1f0      	bne.n	80127f6 <HAL_RCC_OscConfig+0x44a>
 8012814:	e02e      	b.n	8012874 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	699b      	ldr	r3, [r3, #24]
 801281a:	2b01      	cmp	r3, #1
 801281c:	d101      	bne.n	8012822 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801281e:	2301      	movs	r3, #1
 8012820:	e029      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012822:	4b18      	ldr	r3, [pc, #96]	; (8012884 <HAL_RCC_OscConfig+0x4d8>)
 8012824:	685b      	ldr	r3, [r3, #4]
 8012826:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	69db      	ldr	r3, [r3, #28]
 8012832:	429a      	cmp	r2, r3
 8012834:	d11c      	bne.n	8012870 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012840:	429a      	cmp	r2, r3
 8012842:	d115      	bne.n	8012870 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8012844:	68fa      	ldr	r2, [r7, #12]
 8012846:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801284a:	4013      	ands	r3, r2
 801284c:	687a      	ldr	r2, [r7, #4]
 801284e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8012850:	4293      	cmp	r3, r2
 8012852:	d10d      	bne.n	8012870 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801285e:	429a      	cmp	r2, r3
 8012860:	d106      	bne.n	8012870 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801286c:	429a      	cmp	r2, r3
 801286e:	d001      	beq.n	8012874 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8012870:	2301      	movs	r3, #1
 8012872:	e000      	b.n	8012876 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8012874:	2300      	movs	r3, #0
}
 8012876:	4618      	mov	r0, r3
 8012878:	3718      	adds	r7, #24
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}
 801287e:	bf00      	nop
 8012880:	40007000 	.word	0x40007000
 8012884:	40023800 	.word	0x40023800
 8012888:	42470060 	.word	0x42470060

0801288c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b084      	sub	sp, #16
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
 8012894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d101      	bne.n	80128a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801289c:	2301      	movs	r3, #1
 801289e:	e0cc      	b.n	8012a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80128a0:	4b68      	ldr	r3, [pc, #416]	; (8012a44 <HAL_RCC_ClockConfig+0x1b8>)
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	f003 030f 	and.w	r3, r3, #15
 80128a8:	683a      	ldr	r2, [r7, #0]
 80128aa:	429a      	cmp	r2, r3
 80128ac:	d90c      	bls.n	80128c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80128ae:	4b65      	ldr	r3, [pc, #404]	; (8012a44 <HAL_RCC_ClockConfig+0x1b8>)
 80128b0:	683a      	ldr	r2, [r7, #0]
 80128b2:	b2d2      	uxtb	r2, r2
 80128b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80128b6:	4b63      	ldr	r3, [pc, #396]	; (8012a44 <HAL_RCC_ClockConfig+0x1b8>)
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	f003 030f 	and.w	r3, r3, #15
 80128be:	683a      	ldr	r2, [r7, #0]
 80128c0:	429a      	cmp	r2, r3
 80128c2:	d001      	beq.n	80128c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80128c4:	2301      	movs	r3, #1
 80128c6:	e0b8      	b.n	8012a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	f003 0302 	and.w	r3, r3, #2
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d020      	beq.n	8012916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	f003 0304 	and.w	r3, r3, #4
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d005      	beq.n	80128ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80128e0:	4b59      	ldr	r3, [pc, #356]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 80128e2:	689b      	ldr	r3, [r3, #8]
 80128e4:	4a58      	ldr	r2, [pc, #352]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 80128e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80128ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	f003 0308 	and.w	r3, r3, #8
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d005      	beq.n	8012904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80128f8:	4b53      	ldr	r3, [pc, #332]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 80128fa:	689b      	ldr	r3, [r3, #8]
 80128fc:	4a52      	ldr	r2, [pc, #328]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 80128fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012904:	4b50      	ldr	r3, [pc, #320]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 8012906:	689b      	ldr	r3, [r3, #8]
 8012908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	689b      	ldr	r3, [r3, #8]
 8012910:	494d      	ldr	r1, [pc, #308]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 8012912:	4313      	orrs	r3, r2
 8012914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	f003 0301 	and.w	r3, r3, #1
 801291e:	2b00      	cmp	r3, #0
 8012920:	d044      	beq.n	80129ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	685b      	ldr	r3, [r3, #4]
 8012926:	2b01      	cmp	r3, #1
 8012928:	d107      	bne.n	801293a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801292a:	4b47      	ldr	r3, [pc, #284]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012932:	2b00      	cmp	r3, #0
 8012934:	d119      	bne.n	801296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012936:	2301      	movs	r3, #1
 8012938:	e07f      	b.n	8012a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	685b      	ldr	r3, [r3, #4]
 801293e:	2b02      	cmp	r3, #2
 8012940:	d003      	beq.n	801294a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012946:	2b03      	cmp	r3, #3
 8012948:	d107      	bne.n	801295a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801294a:	4b3f      	ldr	r3, [pc, #252]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012952:	2b00      	cmp	r3, #0
 8012954:	d109      	bne.n	801296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012956:	2301      	movs	r3, #1
 8012958:	e06f      	b.n	8012a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801295a:	4b3b      	ldr	r3, [pc, #236]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	f003 0302 	and.w	r3, r3, #2
 8012962:	2b00      	cmp	r3, #0
 8012964:	d101      	bne.n	801296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012966:	2301      	movs	r3, #1
 8012968:	e067      	b.n	8012a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801296a:	4b37      	ldr	r3, [pc, #220]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 801296c:	689b      	ldr	r3, [r3, #8]
 801296e:	f023 0203 	bic.w	r2, r3, #3
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	685b      	ldr	r3, [r3, #4]
 8012976:	4934      	ldr	r1, [pc, #208]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 8012978:	4313      	orrs	r3, r2
 801297a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801297c:	f7fd fd1a 	bl	80103b4 <HAL_GetTick>
 8012980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012982:	e00a      	b.n	801299a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012984:	f7fd fd16 	bl	80103b4 <HAL_GetTick>
 8012988:	4602      	mov	r2, r0
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	1ad3      	subs	r3, r2, r3
 801298e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012992:	4293      	cmp	r3, r2
 8012994:	d901      	bls.n	801299a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012996:	2303      	movs	r3, #3
 8012998:	e04f      	b.n	8012a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801299a:	4b2b      	ldr	r3, [pc, #172]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 801299c:	689b      	ldr	r3, [r3, #8]
 801299e:	f003 020c 	and.w	r2, r3, #12
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	685b      	ldr	r3, [r3, #4]
 80129a6:	009b      	lsls	r3, r3, #2
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d1eb      	bne.n	8012984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80129ac:	4b25      	ldr	r3, [pc, #148]	; (8012a44 <HAL_RCC_ClockConfig+0x1b8>)
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	f003 030f 	and.w	r3, r3, #15
 80129b4:	683a      	ldr	r2, [r7, #0]
 80129b6:	429a      	cmp	r2, r3
 80129b8:	d20c      	bcs.n	80129d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80129ba:	4b22      	ldr	r3, [pc, #136]	; (8012a44 <HAL_RCC_ClockConfig+0x1b8>)
 80129bc:	683a      	ldr	r2, [r7, #0]
 80129be:	b2d2      	uxtb	r2, r2
 80129c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80129c2:	4b20      	ldr	r3, [pc, #128]	; (8012a44 <HAL_RCC_ClockConfig+0x1b8>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	f003 030f 	and.w	r3, r3, #15
 80129ca:	683a      	ldr	r2, [r7, #0]
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d001      	beq.n	80129d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80129d0:	2301      	movs	r3, #1
 80129d2:	e032      	b.n	8012a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	f003 0304 	and.w	r3, r3, #4
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d008      	beq.n	80129f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80129e0:	4b19      	ldr	r3, [pc, #100]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 80129e2:	689b      	ldr	r3, [r3, #8]
 80129e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	68db      	ldr	r3, [r3, #12]
 80129ec:	4916      	ldr	r1, [pc, #88]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 80129ee:	4313      	orrs	r3, r2
 80129f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	f003 0308 	and.w	r3, r3, #8
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d009      	beq.n	8012a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80129fe:	4b12      	ldr	r3, [pc, #72]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 8012a00:	689b      	ldr	r3, [r3, #8]
 8012a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	691b      	ldr	r3, [r3, #16]
 8012a0a:	00db      	lsls	r3, r3, #3
 8012a0c:	490e      	ldr	r1, [pc, #56]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 8012a0e:	4313      	orrs	r3, r2
 8012a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012a12:	f000 f821 	bl	8012a58 <HAL_RCC_GetSysClockFreq>
 8012a16:	4601      	mov	r1, r0
 8012a18:	4b0b      	ldr	r3, [pc, #44]	; (8012a48 <HAL_RCC_ClockConfig+0x1bc>)
 8012a1a:	689b      	ldr	r3, [r3, #8]
 8012a1c:	091b      	lsrs	r3, r3, #4
 8012a1e:	f003 030f 	and.w	r3, r3, #15
 8012a22:	4a0a      	ldr	r2, [pc, #40]	; (8012a4c <HAL_RCC_ClockConfig+0x1c0>)
 8012a24:	5cd3      	ldrb	r3, [r2, r3]
 8012a26:	fa21 f303 	lsr.w	r3, r1, r3
 8012a2a:	4a09      	ldr	r2, [pc, #36]	; (8012a50 <HAL_RCC_ClockConfig+0x1c4>)
 8012a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8012a2e:	4b09      	ldr	r3, [pc, #36]	; (8012a54 <HAL_RCC_ClockConfig+0x1c8>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	4618      	mov	r0, r3
 8012a34:	f7fd fc7a 	bl	801032c <HAL_InitTick>

  return HAL_OK;
 8012a38:	2300      	movs	r3, #0
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3710      	adds	r7, #16
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}
 8012a42:	bf00      	nop
 8012a44:	40023c00 	.word	0x40023c00
 8012a48:	40023800 	.word	0x40023800
 8012a4c:	080180bc 	.word	0x080180bc
 8012a50:	20000080 	.word	0x20000080
 8012a54:	20000084 	.word	0x20000084

08012a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a5a:	b085      	sub	sp, #20
 8012a5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	607b      	str	r3, [r7, #4]
 8012a62:	2300      	movs	r3, #0
 8012a64:	60fb      	str	r3, [r7, #12]
 8012a66:	2300      	movs	r3, #0
 8012a68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012a6e:	4b63      	ldr	r3, [pc, #396]	; (8012bfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012a70:	689b      	ldr	r3, [r3, #8]
 8012a72:	f003 030c 	and.w	r3, r3, #12
 8012a76:	2b04      	cmp	r3, #4
 8012a78:	d007      	beq.n	8012a8a <HAL_RCC_GetSysClockFreq+0x32>
 8012a7a:	2b08      	cmp	r3, #8
 8012a7c:	d008      	beq.n	8012a90 <HAL_RCC_GetSysClockFreq+0x38>
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	f040 80b4 	bne.w	8012bec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012a84:	4b5e      	ldr	r3, [pc, #376]	; (8012c00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8012a86:	60bb      	str	r3, [r7, #8]
       break;
 8012a88:	e0b3      	b.n	8012bf2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8012a8a:	4b5e      	ldr	r3, [pc, #376]	; (8012c04 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8012a8c:	60bb      	str	r3, [r7, #8]
      break;
 8012a8e:	e0b0      	b.n	8012bf2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012a90:	4b5a      	ldr	r3, [pc, #360]	; (8012bfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012a92:	685b      	ldr	r3, [r3, #4]
 8012a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012a9a:	4b58      	ldr	r3, [pc, #352]	; (8012bfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012a9c:	685b      	ldr	r3, [r3, #4]
 8012a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d04a      	beq.n	8012b3c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012aa6:	4b55      	ldr	r3, [pc, #340]	; (8012bfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012aa8:	685b      	ldr	r3, [r3, #4]
 8012aaa:	099b      	lsrs	r3, r3, #6
 8012aac:	f04f 0400 	mov.w	r4, #0
 8012ab0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8012ab4:	f04f 0200 	mov.w	r2, #0
 8012ab8:	ea03 0501 	and.w	r5, r3, r1
 8012abc:	ea04 0602 	and.w	r6, r4, r2
 8012ac0:	4629      	mov	r1, r5
 8012ac2:	4632      	mov	r2, r6
 8012ac4:	f04f 0300 	mov.w	r3, #0
 8012ac8:	f04f 0400 	mov.w	r4, #0
 8012acc:	0154      	lsls	r4, r2, #5
 8012ace:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8012ad2:	014b      	lsls	r3, r1, #5
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	4622      	mov	r2, r4
 8012ad8:	1b49      	subs	r1, r1, r5
 8012ada:	eb62 0206 	sbc.w	r2, r2, r6
 8012ade:	f04f 0300 	mov.w	r3, #0
 8012ae2:	f04f 0400 	mov.w	r4, #0
 8012ae6:	0194      	lsls	r4, r2, #6
 8012ae8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8012aec:	018b      	lsls	r3, r1, #6
 8012aee:	1a5b      	subs	r3, r3, r1
 8012af0:	eb64 0402 	sbc.w	r4, r4, r2
 8012af4:	f04f 0100 	mov.w	r1, #0
 8012af8:	f04f 0200 	mov.w	r2, #0
 8012afc:	00e2      	lsls	r2, r4, #3
 8012afe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8012b02:	00d9      	lsls	r1, r3, #3
 8012b04:	460b      	mov	r3, r1
 8012b06:	4614      	mov	r4, r2
 8012b08:	195b      	adds	r3, r3, r5
 8012b0a:	eb44 0406 	adc.w	r4, r4, r6
 8012b0e:	f04f 0100 	mov.w	r1, #0
 8012b12:	f04f 0200 	mov.w	r2, #0
 8012b16:	0262      	lsls	r2, r4, #9
 8012b18:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8012b1c:	0259      	lsls	r1, r3, #9
 8012b1e:	460b      	mov	r3, r1
 8012b20:	4614      	mov	r4, r2
 8012b22:	4618      	mov	r0, r3
 8012b24:	4621      	mov	r1, r4
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	f04f 0400 	mov.w	r4, #0
 8012b2c:	461a      	mov	r2, r3
 8012b2e:	4623      	mov	r3, r4
 8012b30:	f7f5 ffc2 	bl	8008ab8 <__aeabi_uldivmod>
 8012b34:	4603      	mov	r3, r0
 8012b36:	460c      	mov	r4, r1
 8012b38:	60fb      	str	r3, [r7, #12]
 8012b3a:	e049      	b.n	8012bd0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012b3c:	4b2f      	ldr	r3, [pc, #188]	; (8012bfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	099b      	lsrs	r3, r3, #6
 8012b42:	f04f 0400 	mov.w	r4, #0
 8012b46:	f240 11ff 	movw	r1, #511	; 0x1ff
 8012b4a:	f04f 0200 	mov.w	r2, #0
 8012b4e:	ea03 0501 	and.w	r5, r3, r1
 8012b52:	ea04 0602 	and.w	r6, r4, r2
 8012b56:	4629      	mov	r1, r5
 8012b58:	4632      	mov	r2, r6
 8012b5a:	f04f 0300 	mov.w	r3, #0
 8012b5e:	f04f 0400 	mov.w	r4, #0
 8012b62:	0154      	lsls	r4, r2, #5
 8012b64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8012b68:	014b      	lsls	r3, r1, #5
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	4622      	mov	r2, r4
 8012b6e:	1b49      	subs	r1, r1, r5
 8012b70:	eb62 0206 	sbc.w	r2, r2, r6
 8012b74:	f04f 0300 	mov.w	r3, #0
 8012b78:	f04f 0400 	mov.w	r4, #0
 8012b7c:	0194      	lsls	r4, r2, #6
 8012b7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8012b82:	018b      	lsls	r3, r1, #6
 8012b84:	1a5b      	subs	r3, r3, r1
 8012b86:	eb64 0402 	sbc.w	r4, r4, r2
 8012b8a:	f04f 0100 	mov.w	r1, #0
 8012b8e:	f04f 0200 	mov.w	r2, #0
 8012b92:	00e2      	lsls	r2, r4, #3
 8012b94:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8012b98:	00d9      	lsls	r1, r3, #3
 8012b9a:	460b      	mov	r3, r1
 8012b9c:	4614      	mov	r4, r2
 8012b9e:	195b      	adds	r3, r3, r5
 8012ba0:	eb44 0406 	adc.w	r4, r4, r6
 8012ba4:	f04f 0100 	mov.w	r1, #0
 8012ba8:	f04f 0200 	mov.w	r2, #0
 8012bac:	02a2      	lsls	r2, r4, #10
 8012bae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8012bb2:	0299      	lsls	r1, r3, #10
 8012bb4:	460b      	mov	r3, r1
 8012bb6:	4614      	mov	r4, r2
 8012bb8:	4618      	mov	r0, r3
 8012bba:	4621      	mov	r1, r4
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f04f 0400 	mov.w	r4, #0
 8012bc2:	461a      	mov	r2, r3
 8012bc4:	4623      	mov	r3, r4
 8012bc6:	f7f5 ff77 	bl	8008ab8 <__aeabi_uldivmod>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	460c      	mov	r4, r1
 8012bce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012bd0:	4b0a      	ldr	r3, [pc, #40]	; (8012bfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012bd2:	685b      	ldr	r3, [r3, #4]
 8012bd4:	0c1b      	lsrs	r3, r3, #16
 8012bd6:	f003 0303 	and.w	r3, r3, #3
 8012bda:	3301      	adds	r3, #1
 8012bdc:	005b      	lsls	r3, r3, #1
 8012bde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8012be0:	68fa      	ldr	r2, [r7, #12]
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8012be8:	60bb      	str	r3, [r7, #8]
      break;
 8012bea:	e002      	b.n	8012bf2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012bec:	4b04      	ldr	r3, [pc, #16]	; (8012c00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8012bee:	60bb      	str	r3, [r7, #8]
      break;
 8012bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012bf2:	68bb      	ldr	r3, [r7, #8]
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3714      	adds	r7, #20
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bfc:	40023800 	.word	0x40023800
 8012c00:	00f42400 	.word	0x00f42400
 8012c04:	007a1200 	.word	0x007a1200

08012c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012c08:	b480      	push	{r7}
 8012c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012c0c:	4b03      	ldr	r3, [pc, #12]	; (8012c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	46bd      	mov	sp, r7
 8012c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c18:	4770      	bx	lr
 8012c1a:	bf00      	nop
 8012c1c:	20000080 	.word	0x20000080

08012c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8012c24:	f7ff fff0 	bl	8012c08 <HAL_RCC_GetHCLKFreq>
 8012c28:	4601      	mov	r1, r0
 8012c2a:	4b05      	ldr	r3, [pc, #20]	; (8012c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8012c2c:	689b      	ldr	r3, [r3, #8]
 8012c2e:	0a9b      	lsrs	r3, r3, #10
 8012c30:	f003 0307 	and.w	r3, r3, #7
 8012c34:	4a03      	ldr	r2, [pc, #12]	; (8012c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012c36:	5cd3      	ldrb	r3, [r2, r3]
 8012c38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	40023800 	.word	0x40023800
 8012c44:	080180cc 	.word	0x080180cc

08012c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8012c4c:	f7ff ffdc 	bl	8012c08 <HAL_RCC_GetHCLKFreq>
 8012c50:	4601      	mov	r1, r0
 8012c52:	4b05      	ldr	r3, [pc, #20]	; (8012c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8012c54:	689b      	ldr	r3, [r3, #8]
 8012c56:	0b5b      	lsrs	r3, r3, #13
 8012c58:	f003 0307 	and.w	r3, r3, #7
 8012c5c:	4a03      	ldr	r2, [pc, #12]	; (8012c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8012c5e:	5cd3      	ldrb	r3, [r2, r3]
 8012c60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	bd80      	pop	{r7, pc}
 8012c68:	40023800 	.word	0x40023800
 8012c6c:	080180cc 	.word	0x080180cc

08012c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b082      	sub	sp, #8
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d101      	bne.n	8012c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012c7e:	2301      	movs	r3, #1
 8012c80:	e056      	b.n	8012d30 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	2200      	movs	r2, #0
 8012c86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012c8e:	b2db      	uxtb	r3, r3
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d106      	bne.n	8012ca2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2200      	movs	r2, #0
 8012c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f7fc ff4b 	bl	800fb38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2202      	movs	r2, #2
 8012ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	681a      	ldr	r2, [r3, #0]
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012cb8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	685a      	ldr	r2, [r3, #4]
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	689b      	ldr	r3, [r3, #8]
 8012cc2:	431a      	orrs	r2, r3
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	68db      	ldr	r3, [r3, #12]
 8012cc8:	431a      	orrs	r2, r3
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	691b      	ldr	r3, [r3, #16]
 8012cce:	431a      	orrs	r2, r3
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	695b      	ldr	r3, [r3, #20]
 8012cd4:	431a      	orrs	r2, r3
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	699b      	ldr	r3, [r3, #24]
 8012cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012cde:	431a      	orrs	r2, r3
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	69db      	ldr	r3, [r3, #28]
 8012ce4:	431a      	orrs	r2, r3
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	6a1b      	ldr	r3, [r3, #32]
 8012cea:	ea42 0103 	orr.w	r1, r2, r3
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	430a      	orrs	r2, r1
 8012cf8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	699b      	ldr	r3, [r3, #24]
 8012cfe:	0c1b      	lsrs	r3, r3, #16
 8012d00:	f003 0104 	and.w	r1, r3, #4
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	430a      	orrs	r2, r1
 8012d0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	69da      	ldr	r2, [r3, #28]
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012d1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2200      	movs	r2, #0
 8012d24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2201      	movs	r2, #1
 8012d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8012d2e:	2300      	movs	r3, #0
}
 8012d30:	4618      	mov	r0, r3
 8012d32:	3708      	adds	r7, #8
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd80      	pop	{r7, pc}

08012d38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b088      	sub	sp, #32
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	60f8      	str	r0, [r7, #12]
 8012d40:	60b9      	str	r1, [r7, #8]
 8012d42:	603b      	str	r3, [r7, #0]
 8012d44:	4613      	mov	r3, r2
 8012d46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012d48:	2300      	movs	r3, #0
 8012d4a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012d52:	2b01      	cmp	r3, #1
 8012d54:	d101      	bne.n	8012d5a <HAL_SPI_Transmit+0x22>
 8012d56:	2302      	movs	r3, #2
 8012d58:	e11e      	b.n	8012f98 <HAL_SPI_Transmit+0x260>
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	2201      	movs	r2, #1
 8012d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012d62:	f7fd fb27 	bl	80103b4 <HAL_GetTick>
 8012d66:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8012d68:	88fb      	ldrh	r3, [r7, #6]
 8012d6a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	2b01      	cmp	r3, #1
 8012d76:	d002      	beq.n	8012d7e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8012d78:	2302      	movs	r3, #2
 8012d7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012d7c:	e103      	b.n	8012f86 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012d7e:	68bb      	ldr	r3, [r7, #8]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d002      	beq.n	8012d8a <HAL_SPI_Transmit+0x52>
 8012d84:	88fb      	ldrh	r3, [r7, #6]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d102      	bne.n	8012d90 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012d8e:	e0fa      	b.n	8012f86 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	2203      	movs	r2, #3
 8012d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	68ba      	ldr	r2, [r7, #8]
 8012da2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	88fa      	ldrh	r2, [r7, #6]
 8012da8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	88fa      	ldrh	r2, [r7, #6]
 8012dae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	2200      	movs	r2, #0
 8012db4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	2200      	movs	r2, #0
 8012dba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	2200      	movs	r2, #0
 8012dcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	689b      	ldr	r3, [r3, #8]
 8012dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012dd6:	d107      	bne.n	8012de8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	681a      	ldr	r2, [r3, #0]
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012de6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012df2:	2b40      	cmp	r3, #64	; 0x40
 8012df4:	d007      	beq.n	8012e06 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	681a      	ldr	r2, [r3, #0]
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012e04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	68db      	ldr	r3, [r3, #12]
 8012e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012e0e:	d14b      	bne.n	8012ea8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	685b      	ldr	r3, [r3, #4]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d002      	beq.n	8012e1e <HAL_SPI_Transmit+0xe6>
 8012e18:	8afb      	ldrh	r3, [r7, #22]
 8012e1a:	2b01      	cmp	r3, #1
 8012e1c:	d13e      	bne.n	8012e9c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e22:	881a      	ldrh	r2, [r3, #0]
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e2e:	1c9a      	adds	r2, r3, #2
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012e38:	b29b      	uxth	r3, r3
 8012e3a:	3b01      	subs	r3, #1
 8012e3c:	b29a      	uxth	r2, r3
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8012e42:	e02b      	b.n	8012e9c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	689b      	ldr	r3, [r3, #8]
 8012e4a:	f003 0302 	and.w	r3, r3, #2
 8012e4e:	2b02      	cmp	r3, #2
 8012e50:	d112      	bne.n	8012e78 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e56:	881a      	ldrh	r2, [r3, #0]
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e62:	1c9a      	adds	r2, r3, #2
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012e6c:	b29b      	uxth	r3, r3
 8012e6e:	3b01      	subs	r3, #1
 8012e70:	b29a      	uxth	r2, r3
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	86da      	strh	r2, [r3, #54]	; 0x36
 8012e76:	e011      	b.n	8012e9c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012e78:	f7fd fa9c 	bl	80103b4 <HAL_GetTick>
 8012e7c:	4602      	mov	r2, r0
 8012e7e:	69bb      	ldr	r3, [r7, #24]
 8012e80:	1ad3      	subs	r3, r2, r3
 8012e82:	683a      	ldr	r2, [r7, #0]
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d803      	bhi.n	8012e90 <HAL_SPI_Transmit+0x158>
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e8e:	d102      	bne.n	8012e96 <HAL_SPI_Transmit+0x15e>
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d102      	bne.n	8012e9c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8012e96:	2303      	movs	r3, #3
 8012e98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012e9a:	e074      	b.n	8012f86 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012ea0:	b29b      	uxth	r3, r3
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d1ce      	bne.n	8012e44 <HAL_SPI_Transmit+0x10c>
 8012ea6:	e04c      	b.n	8012f42 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d002      	beq.n	8012eb6 <HAL_SPI_Transmit+0x17e>
 8012eb0:	8afb      	ldrh	r3, [r7, #22]
 8012eb2:	2b01      	cmp	r3, #1
 8012eb4:	d140      	bne.n	8012f38 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	330c      	adds	r3, #12
 8012ec0:	7812      	ldrb	r2, [r2, #0]
 8012ec2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ec8:	1c5a      	adds	r2, r3, #1
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012ed2:	b29b      	uxth	r3, r3
 8012ed4:	3b01      	subs	r3, #1
 8012ed6:	b29a      	uxth	r2, r3
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8012edc:	e02c      	b.n	8012f38 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	689b      	ldr	r3, [r3, #8]
 8012ee4:	f003 0302 	and.w	r3, r3, #2
 8012ee8:	2b02      	cmp	r3, #2
 8012eea:	d113      	bne.n	8012f14 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	330c      	adds	r3, #12
 8012ef6:	7812      	ldrb	r2, [r2, #0]
 8012ef8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012efe:	1c5a      	adds	r2, r3, #1
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012f08:	b29b      	uxth	r3, r3
 8012f0a:	3b01      	subs	r3, #1
 8012f0c:	b29a      	uxth	r2, r3
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	86da      	strh	r2, [r3, #54]	; 0x36
 8012f12:	e011      	b.n	8012f38 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012f14:	f7fd fa4e 	bl	80103b4 <HAL_GetTick>
 8012f18:	4602      	mov	r2, r0
 8012f1a:	69bb      	ldr	r3, [r7, #24]
 8012f1c:	1ad3      	subs	r3, r2, r3
 8012f1e:	683a      	ldr	r2, [r7, #0]
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d803      	bhi.n	8012f2c <HAL_SPI_Transmit+0x1f4>
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f2a:	d102      	bne.n	8012f32 <HAL_SPI_Transmit+0x1fa>
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d102      	bne.n	8012f38 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8012f32:	2303      	movs	r3, #3
 8012f34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012f36:	e026      	b.n	8012f86 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012f3c:	b29b      	uxth	r3, r3
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d1cd      	bne.n	8012ede <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012f42:	69ba      	ldr	r2, [r7, #24]
 8012f44:	6839      	ldr	r1, [r7, #0]
 8012f46:	68f8      	ldr	r0, [r7, #12]
 8012f48:	f000 fba4 	bl	8013694 <SPI_EndRxTxTransaction>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d002      	beq.n	8012f58 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	2220      	movs	r2, #32
 8012f56:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	689b      	ldr	r3, [r3, #8]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d10a      	bne.n	8012f76 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012f60:	2300      	movs	r3, #0
 8012f62:	613b      	str	r3, [r7, #16]
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	68db      	ldr	r3, [r3, #12]
 8012f6a:	613b      	str	r3, [r7, #16]
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	689b      	ldr	r3, [r3, #8]
 8012f72:	613b      	str	r3, [r7, #16]
 8012f74:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d002      	beq.n	8012f84 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8012f7e:	2301      	movs	r3, #1
 8012f80:	77fb      	strb	r3, [r7, #31]
 8012f82:	e000      	b.n	8012f86 <HAL_SPI_Transmit+0x24e>
  }

error:
 8012f84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	2201      	movs	r2, #1
 8012f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	2200      	movs	r2, #0
 8012f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012f96:	7ffb      	ldrb	r3, [r7, #31]
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	3720      	adds	r7, #32
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}

08012fa0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b088      	sub	sp, #32
 8012fa4:	af02      	add	r7, sp, #8
 8012fa6:	60f8      	str	r0, [r7, #12]
 8012fa8:	60b9      	str	r1, [r7, #8]
 8012faa:	603b      	str	r3, [r7, #0]
 8012fac:	4613      	mov	r3, r2
 8012fae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012fbc:	d112      	bne.n	8012fe4 <HAL_SPI_Receive+0x44>
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	689b      	ldr	r3, [r3, #8]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d10e      	bne.n	8012fe4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	2204      	movs	r2, #4
 8012fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012fce:	88fa      	ldrh	r2, [r7, #6]
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	9300      	str	r3, [sp, #0]
 8012fd4:	4613      	mov	r3, r2
 8012fd6:	68ba      	ldr	r2, [r7, #8]
 8012fd8:	68b9      	ldr	r1, [r7, #8]
 8012fda:	68f8      	ldr	r0, [r7, #12]
 8012fdc:	f000 f8e9 	bl	80131b2 <HAL_SPI_TransmitReceive>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	e0e2      	b.n	80131aa <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012fea:	2b01      	cmp	r3, #1
 8012fec:	d101      	bne.n	8012ff2 <HAL_SPI_Receive+0x52>
 8012fee:	2302      	movs	r3, #2
 8012ff0:	e0db      	b.n	80131aa <HAL_SPI_Receive+0x20a>
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	2201      	movs	r2, #1
 8012ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012ffa:	f7fd f9db 	bl	80103b4 <HAL_GetTick>
 8012ffe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013006:	b2db      	uxtb	r3, r3
 8013008:	2b01      	cmp	r3, #1
 801300a:	d002      	beq.n	8013012 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801300c:	2302      	movs	r3, #2
 801300e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013010:	e0c2      	b.n	8013198 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d002      	beq.n	801301e <HAL_SPI_Receive+0x7e>
 8013018:	88fb      	ldrh	r3, [r7, #6]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d102      	bne.n	8013024 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801301e:	2301      	movs	r3, #1
 8013020:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013022:	e0b9      	b.n	8013198 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	2204      	movs	r2, #4
 8013028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	2200      	movs	r2, #0
 8013030:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	68ba      	ldr	r2, [r7, #8]
 8013036:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	88fa      	ldrh	r2, [r7, #6]
 801303c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	88fa      	ldrh	r2, [r7, #6]
 8013042:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	2200      	movs	r2, #0
 8013048:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	2200      	movs	r2, #0
 801304e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	2200      	movs	r2, #0
 8013054:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	2200      	movs	r2, #0
 801305a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	2200      	movs	r2, #0
 8013060:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	689b      	ldr	r3, [r3, #8]
 8013066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801306a:	d107      	bne.n	801307c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	681a      	ldr	r2, [r3, #0]
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801307a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013086:	2b40      	cmp	r3, #64	; 0x40
 8013088:	d007      	beq.n	801309a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	681a      	ldr	r2, [r3, #0]
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013098:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	68db      	ldr	r3, [r3, #12]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d162      	bne.n	8013168 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80130a2:	e02e      	b.n	8013102 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	689b      	ldr	r3, [r3, #8]
 80130aa:	f003 0301 	and.w	r3, r3, #1
 80130ae:	2b01      	cmp	r3, #1
 80130b0:	d115      	bne.n	80130de <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	f103 020c 	add.w	r2, r3, #12
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130be:	7812      	ldrb	r2, [r2, #0]
 80130c0:	b2d2      	uxtb	r2, r2
 80130c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130c8:	1c5a      	adds	r2, r3, #1
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80130d2:	b29b      	uxth	r3, r3
 80130d4:	3b01      	subs	r3, #1
 80130d6:	b29a      	uxth	r2, r3
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80130dc:	e011      	b.n	8013102 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80130de:	f7fd f969 	bl	80103b4 <HAL_GetTick>
 80130e2:	4602      	mov	r2, r0
 80130e4:	693b      	ldr	r3, [r7, #16]
 80130e6:	1ad3      	subs	r3, r2, r3
 80130e8:	683a      	ldr	r2, [r7, #0]
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d803      	bhi.n	80130f6 <HAL_SPI_Receive+0x156>
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130f4:	d102      	bne.n	80130fc <HAL_SPI_Receive+0x15c>
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d102      	bne.n	8013102 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80130fc:	2303      	movs	r3, #3
 80130fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013100:	e04a      	b.n	8013198 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013106:	b29b      	uxth	r3, r3
 8013108:	2b00      	cmp	r3, #0
 801310a:	d1cb      	bne.n	80130a4 <HAL_SPI_Receive+0x104>
 801310c:	e031      	b.n	8013172 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	689b      	ldr	r3, [r3, #8]
 8013114:	f003 0301 	and.w	r3, r3, #1
 8013118:	2b01      	cmp	r3, #1
 801311a:	d113      	bne.n	8013144 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	68da      	ldr	r2, [r3, #12]
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013126:	b292      	uxth	r2, r2
 8013128:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801312e:	1c9a      	adds	r2, r3, #2
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013138:	b29b      	uxth	r3, r3
 801313a:	3b01      	subs	r3, #1
 801313c:	b29a      	uxth	r2, r3
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013142:	e011      	b.n	8013168 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013144:	f7fd f936 	bl	80103b4 <HAL_GetTick>
 8013148:	4602      	mov	r2, r0
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	1ad3      	subs	r3, r2, r3
 801314e:	683a      	ldr	r2, [r7, #0]
 8013150:	429a      	cmp	r2, r3
 8013152:	d803      	bhi.n	801315c <HAL_SPI_Receive+0x1bc>
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	f1b3 3fff 	cmp.w	r3, #4294967295
 801315a:	d102      	bne.n	8013162 <HAL_SPI_Receive+0x1c2>
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d102      	bne.n	8013168 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8013162:	2303      	movs	r3, #3
 8013164:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013166:	e017      	b.n	8013198 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801316c:	b29b      	uxth	r3, r3
 801316e:	2b00      	cmp	r3, #0
 8013170:	d1cd      	bne.n	801310e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013172:	693a      	ldr	r2, [r7, #16]
 8013174:	6839      	ldr	r1, [r7, #0]
 8013176:	68f8      	ldr	r0, [r7, #12]
 8013178:	f000 fa27 	bl	80135ca <SPI_EndRxTransaction>
 801317c:	4603      	mov	r3, r0
 801317e:	2b00      	cmp	r3, #0
 8013180:	d002      	beq.n	8013188 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2220      	movs	r2, #32
 8013186:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801318c:	2b00      	cmp	r3, #0
 801318e:	d002      	beq.n	8013196 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8013190:	2301      	movs	r3, #1
 8013192:	75fb      	strb	r3, [r7, #23]
 8013194:	e000      	b.n	8013198 <HAL_SPI_Receive+0x1f8>
  }

error :
 8013196:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	2201      	movs	r2, #1
 801319c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	2200      	movs	r2, #0
 80131a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80131a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3718      	adds	r7, #24
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}

080131b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80131b2:	b580      	push	{r7, lr}
 80131b4:	b08c      	sub	sp, #48	; 0x30
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	60f8      	str	r0, [r7, #12]
 80131ba:	60b9      	str	r1, [r7, #8]
 80131bc:	607a      	str	r2, [r7, #4]
 80131be:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80131c0:	2301      	movs	r3, #1
 80131c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80131c4:	2300      	movs	r3, #0
 80131c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80131d0:	2b01      	cmp	r3, #1
 80131d2:	d101      	bne.n	80131d8 <HAL_SPI_TransmitReceive+0x26>
 80131d4:	2302      	movs	r3, #2
 80131d6:	e18a      	b.n	80134ee <HAL_SPI_TransmitReceive+0x33c>
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	2201      	movs	r2, #1
 80131dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80131e0:	f7fd f8e8 	bl	80103b4 <HAL_GetTick>
 80131e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80131ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	685b      	ldr	r3, [r3, #4]
 80131f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80131f6:	887b      	ldrh	r3, [r7, #2]
 80131f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80131fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80131fe:	2b01      	cmp	r3, #1
 8013200:	d00f      	beq.n	8013222 <HAL_SPI_TransmitReceive+0x70>
 8013202:	69fb      	ldr	r3, [r7, #28]
 8013204:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013208:	d107      	bne.n	801321a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	689b      	ldr	r3, [r3, #8]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d103      	bne.n	801321a <HAL_SPI_TransmitReceive+0x68>
 8013212:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013216:	2b04      	cmp	r3, #4
 8013218:	d003      	beq.n	8013222 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801321a:	2302      	movs	r3, #2
 801321c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013220:	e15b      	b.n	80134da <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d005      	beq.n	8013234 <HAL_SPI_TransmitReceive+0x82>
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d002      	beq.n	8013234 <HAL_SPI_TransmitReceive+0x82>
 801322e:	887b      	ldrh	r3, [r7, #2]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d103      	bne.n	801323c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8013234:	2301      	movs	r3, #1
 8013236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801323a:	e14e      	b.n	80134da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013242:	b2db      	uxtb	r3, r3
 8013244:	2b04      	cmp	r3, #4
 8013246:	d003      	beq.n	8013250 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	2205      	movs	r2, #5
 801324c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	2200      	movs	r2, #0
 8013254:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	687a      	ldr	r2, [r7, #4]
 801325a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	887a      	ldrh	r2, [r7, #2]
 8013260:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	887a      	ldrh	r2, [r7, #2]
 8013266:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	68ba      	ldr	r2, [r7, #8]
 801326c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	887a      	ldrh	r2, [r7, #2]
 8013272:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	887a      	ldrh	r2, [r7, #2]
 8013278:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	2200      	movs	r2, #0
 801327e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	2200      	movs	r2, #0
 8013284:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013290:	2b40      	cmp	r3, #64	; 0x40
 8013292:	d007      	beq.n	80132a4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	681a      	ldr	r2, [r3, #0]
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80132a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	68db      	ldr	r3, [r3, #12]
 80132a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80132ac:	d178      	bne.n	80133a0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	685b      	ldr	r3, [r3, #4]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d002      	beq.n	80132bc <HAL_SPI_TransmitReceive+0x10a>
 80132b6:	8b7b      	ldrh	r3, [r7, #26]
 80132b8:	2b01      	cmp	r3, #1
 80132ba:	d166      	bne.n	801338a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132c0:	881a      	ldrh	r2, [r3, #0]
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132cc:	1c9a      	adds	r2, r3, #2
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80132d6:	b29b      	uxth	r3, r3
 80132d8:	3b01      	subs	r3, #1
 80132da:	b29a      	uxth	r2, r3
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80132e0:	e053      	b.n	801338a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	689b      	ldr	r3, [r3, #8]
 80132e8:	f003 0302 	and.w	r3, r3, #2
 80132ec:	2b02      	cmp	r3, #2
 80132ee:	d11b      	bne.n	8013328 <HAL_SPI_TransmitReceive+0x176>
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80132f4:	b29b      	uxth	r3, r3
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d016      	beq.n	8013328 <HAL_SPI_TransmitReceive+0x176>
 80132fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132fc:	2b01      	cmp	r3, #1
 80132fe:	d113      	bne.n	8013328 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013304:	881a      	ldrh	r2, [r3, #0]
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013310:	1c9a      	adds	r2, r3, #2
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801331a:	b29b      	uxth	r3, r3
 801331c:	3b01      	subs	r3, #1
 801331e:	b29a      	uxth	r2, r3
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013324:	2300      	movs	r3, #0
 8013326:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	689b      	ldr	r3, [r3, #8]
 801332e:	f003 0301 	and.w	r3, r3, #1
 8013332:	2b01      	cmp	r3, #1
 8013334:	d119      	bne.n	801336a <HAL_SPI_TransmitReceive+0x1b8>
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801333a:	b29b      	uxth	r3, r3
 801333c:	2b00      	cmp	r3, #0
 801333e:	d014      	beq.n	801336a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	68da      	ldr	r2, [r3, #12]
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801334a:	b292      	uxth	r2, r2
 801334c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013352:	1c9a      	adds	r2, r3, #2
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801335c:	b29b      	uxth	r3, r3
 801335e:	3b01      	subs	r3, #1
 8013360:	b29a      	uxth	r2, r3
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013366:	2301      	movs	r3, #1
 8013368:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801336a:	f7fd f823 	bl	80103b4 <HAL_GetTick>
 801336e:	4602      	mov	r2, r0
 8013370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013372:	1ad3      	subs	r3, r2, r3
 8013374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013376:	429a      	cmp	r2, r3
 8013378:	d807      	bhi.n	801338a <HAL_SPI_TransmitReceive+0x1d8>
 801337a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013380:	d003      	beq.n	801338a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013382:	2303      	movs	r3, #3
 8013384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013388:	e0a7      	b.n	80134da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801338e:	b29b      	uxth	r3, r3
 8013390:	2b00      	cmp	r3, #0
 8013392:	d1a6      	bne.n	80132e2 <HAL_SPI_TransmitReceive+0x130>
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013398:	b29b      	uxth	r3, r3
 801339a:	2b00      	cmp	r3, #0
 801339c:	d1a1      	bne.n	80132e2 <HAL_SPI_TransmitReceive+0x130>
 801339e:	e07c      	b.n	801349a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	685b      	ldr	r3, [r3, #4]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d002      	beq.n	80133ae <HAL_SPI_TransmitReceive+0x1fc>
 80133a8:	8b7b      	ldrh	r3, [r7, #26]
 80133aa:	2b01      	cmp	r3, #1
 80133ac:	d16b      	bne.n	8013486 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	330c      	adds	r3, #12
 80133b8:	7812      	ldrb	r2, [r2, #0]
 80133ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133c0:	1c5a      	adds	r2, r3, #1
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80133ca:	b29b      	uxth	r3, r3
 80133cc:	3b01      	subs	r3, #1
 80133ce:	b29a      	uxth	r2, r3
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80133d4:	e057      	b.n	8013486 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	689b      	ldr	r3, [r3, #8]
 80133dc:	f003 0302 	and.w	r3, r3, #2
 80133e0:	2b02      	cmp	r3, #2
 80133e2:	d11c      	bne.n	801341e <HAL_SPI_TransmitReceive+0x26c>
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80133e8:	b29b      	uxth	r3, r3
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d017      	beq.n	801341e <HAL_SPI_TransmitReceive+0x26c>
 80133ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133f0:	2b01      	cmp	r3, #1
 80133f2:	d114      	bne.n	801341e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	330c      	adds	r3, #12
 80133fe:	7812      	ldrb	r2, [r2, #0]
 8013400:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013406:	1c5a      	adds	r2, r3, #1
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013410:	b29b      	uxth	r3, r3
 8013412:	3b01      	subs	r3, #1
 8013414:	b29a      	uxth	r2, r3
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801341a:	2300      	movs	r3, #0
 801341c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	689b      	ldr	r3, [r3, #8]
 8013424:	f003 0301 	and.w	r3, r3, #1
 8013428:	2b01      	cmp	r3, #1
 801342a:	d119      	bne.n	8013460 <HAL_SPI_TransmitReceive+0x2ae>
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013430:	b29b      	uxth	r3, r3
 8013432:	2b00      	cmp	r3, #0
 8013434:	d014      	beq.n	8013460 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	68da      	ldr	r2, [r3, #12]
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013440:	b2d2      	uxtb	r2, r2
 8013442:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013448:	1c5a      	adds	r2, r3, #1
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013452:	b29b      	uxth	r3, r3
 8013454:	3b01      	subs	r3, #1
 8013456:	b29a      	uxth	r2, r3
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801345c:	2301      	movs	r3, #1
 801345e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013460:	f7fc ffa8 	bl	80103b4 <HAL_GetTick>
 8013464:	4602      	mov	r2, r0
 8013466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013468:	1ad3      	subs	r3, r2, r3
 801346a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801346c:	429a      	cmp	r2, r3
 801346e:	d803      	bhi.n	8013478 <HAL_SPI_TransmitReceive+0x2c6>
 8013470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013476:	d102      	bne.n	801347e <HAL_SPI_TransmitReceive+0x2cc>
 8013478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801347a:	2b00      	cmp	r3, #0
 801347c:	d103      	bne.n	8013486 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801347e:	2303      	movs	r3, #3
 8013480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013484:	e029      	b.n	80134da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801348a:	b29b      	uxth	r3, r3
 801348c:	2b00      	cmp	r3, #0
 801348e:	d1a2      	bne.n	80133d6 <HAL_SPI_TransmitReceive+0x224>
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013494:	b29b      	uxth	r3, r3
 8013496:	2b00      	cmp	r3, #0
 8013498:	d19d      	bne.n	80133d6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801349a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801349c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801349e:	68f8      	ldr	r0, [r7, #12]
 80134a0:	f000 f8f8 	bl	8013694 <SPI_EndRxTxTransaction>
 80134a4:	4603      	mov	r3, r0
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d006      	beq.n	80134b8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80134aa:	2301      	movs	r3, #1
 80134ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	2220      	movs	r2, #32
 80134b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80134b6:	e010      	b.n	80134da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	689b      	ldr	r3, [r3, #8]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d10b      	bne.n	80134d8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80134c0:	2300      	movs	r3, #0
 80134c2:	617b      	str	r3, [r7, #20]
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	68db      	ldr	r3, [r3, #12]
 80134ca:	617b      	str	r3, [r7, #20]
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	689b      	ldr	r3, [r3, #8]
 80134d2:	617b      	str	r3, [r7, #20]
 80134d4:	697b      	ldr	r3, [r7, #20]
 80134d6:	e000      	b.n	80134da <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80134d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	2201      	movs	r2, #1
 80134de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	2200      	movs	r2, #0
 80134e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80134ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3730      	adds	r7, #48	; 0x30
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}

080134f6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80134f6:	b580      	push	{r7, lr}
 80134f8:	b084      	sub	sp, #16
 80134fa:	af00      	add	r7, sp, #0
 80134fc:	60f8      	str	r0, [r7, #12]
 80134fe:	60b9      	str	r1, [r7, #8]
 8013500:	603b      	str	r3, [r7, #0]
 8013502:	4613      	mov	r3, r2
 8013504:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013506:	e04c      	b.n	80135a2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801350e:	d048      	beq.n	80135a2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8013510:	f7fc ff50 	bl	80103b4 <HAL_GetTick>
 8013514:	4602      	mov	r2, r0
 8013516:	69bb      	ldr	r3, [r7, #24]
 8013518:	1ad3      	subs	r3, r2, r3
 801351a:	683a      	ldr	r2, [r7, #0]
 801351c:	429a      	cmp	r2, r3
 801351e:	d902      	bls.n	8013526 <SPI_WaitFlagStateUntilTimeout+0x30>
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d13d      	bne.n	80135a2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	685a      	ldr	r2, [r3, #4]
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013534:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	685b      	ldr	r3, [r3, #4]
 801353a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801353e:	d111      	bne.n	8013564 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	689b      	ldr	r3, [r3, #8]
 8013544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013548:	d004      	beq.n	8013554 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	689b      	ldr	r3, [r3, #8]
 801354e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013552:	d107      	bne.n	8013564 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	681a      	ldr	r2, [r3, #0]
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013562:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801356c:	d10f      	bne.n	801358e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	681a      	ldr	r2, [r3, #0]
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801357c:	601a      	str	r2, [r3, #0]
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	681a      	ldr	r2, [r3, #0]
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801358c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	2201      	movs	r2, #1
 8013592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	2200      	movs	r2, #0
 801359a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801359e:	2303      	movs	r3, #3
 80135a0:	e00f      	b.n	80135c2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	689a      	ldr	r2, [r3, #8]
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	4013      	ands	r3, r2
 80135ac:	68ba      	ldr	r2, [r7, #8]
 80135ae:	429a      	cmp	r2, r3
 80135b0:	bf0c      	ite	eq
 80135b2:	2301      	moveq	r3, #1
 80135b4:	2300      	movne	r3, #0
 80135b6:	b2db      	uxtb	r3, r3
 80135b8:	461a      	mov	r2, r3
 80135ba:	79fb      	ldrb	r3, [r7, #7]
 80135bc:	429a      	cmp	r2, r3
 80135be:	d1a3      	bne.n	8013508 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80135c0:	2300      	movs	r3, #0
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3710      	adds	r7, #16
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}

080135ca <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80135ca:	b580      	push	{r7, lr}
 80135cc:	b086      	sub	sp, #24
 80135ce:	af02      	add	r7, sp, #8
 80135d0:	60f8      	str	r0, [r7, #12]
 80135d2:	60b9      	str	r1, [r7, #8]
 80135d4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	685b      	ldr	r3, [r3, #4]
 80135da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80135de:	d111      	bne.n	8013604 <SPI_EndRxTransaction+0x3a>
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	689b      	ldr	r3, [r3, #8]
 80135e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80135e8:	d004      	beq.n	80135f4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	689b      	ldr	r3, [r3, #8]
 80135ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80135f2:	d107      	bne.n	8013604 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	681a      	ldr	r2, [r3, #0]
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013602:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	685b      	ldr	r3, [r3, #4]
 8013608:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801360c:	d12a      	bne.n	8013664 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	689b      	ldr	r3, [r3, #8]
 8013612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013616:	d012      	beq.n	801363e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	9300      	str	r3, [sp, #0]
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	2200      	movs	r2, #0
 8013620:	2180      	movs	r1, #128	; 0x80
 8013622:	68f8      	ldr	r0, [r7, #12]
 8013624:	f7ff ff67 	bl	80134f6 <SPI_WaitFlagStateUntilTimeout>
 8013628:	4603      	mov	r3, r0
 801362a:	2b00      	cmp	r3, #0
 801362c:	d02d      	beq.n	801368a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013632:	f043 0220 	orr.w	r2, r3, #32
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801363a:	2303      	movs	r3, #3
 801363c:	e026      	b.n	801368c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	9300      	str	r3, [sp, #0]
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	2200      	movs	r2, #0
 8013646:	2101      	movs	r1, #1
 8013648:	68f8      	ldr	r0, [r7, #12]
 801364a:	f7ff ff54 	bl	80134f6 <SPI_WaitFlagStateUntilTimeout>
 801364e:	4603      	mov	r3, r0
 8013650:	2b00      	cmp	r3, #0
 8013652:	d01a      	beq.n	801368a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013658:	f043 0220 	orr.w	r2, r3, #32
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013660:	2303      	movs	r3, #3
 8013662:	e013      	b.n	801368c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	9300      	str	r3, [sp, #0]
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	2200      	movs	r2, #0
 801366c:	2101      	movs	r1, #1
 801366e:	68f8      	ldr	r0, [r7, #12]
 8013670:	f7ff ff41 	bl	80134f6 <SPI_WaitFlagStateUntilTimeout>
 8013674:	4603      	mov	r3, r0
 8013676:	2b00      	cmp	r3, #0
 8013678:	d007      	beq.n	801368a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801367e:	f043 0220 	orr.w	r2, r3, #32
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013686:	2303      	movs	r3, #3
 8013688:	e000      	b.n	801368c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801368a:	2300      	movs	r3, #0
}
 801368c:	4618      	mov	r0, r3
 801368e:	3710      	adds	r7, #16
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}

08013694 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b088      	sub	sp, #32
 8013698:	af02      	add	r7, sp, #8
 801369a:	60f8      	str	r0, [r7, #12]
 801369c:	60b9      	str	r1, [r7, #8]
 801369e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80136a0:	4b1b      	ldr	r3, [pc, #108]	; (8013710 <SPI_EndRxTxTransaction+0x7c>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	4a1b      	ldr	r2, [pc, #108]	; (8013714 <SPI_EndRxTxTransaction+0x80>)
 80136a6:	fba2 2303 	umull	r2, r3, r2, r3
 80136aa:	0d5b      	lsrs	r3, r3, #21
 80136ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80136b0:	fb02 f303 	mul.w	r3, r2, r3
 80136b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	685b      	ldr	r3, [r3, #4]
 80136ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80136be:	d112      	bne.n	80136e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	9300      	str	r3, [sp, #0]
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	2200      	movs	r2, #0
 80136c8:	2180      	movs	r1, #128	; 0x80
 80136ca:	68f8      	ldr	r0, [r7, #12]
 80136cc:	f7ff ff13 	bl	80134f6 <SPI_WaitFlagStateUntilTimeout>
 80136d0:	4603      	mov	r3, r0
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d016      	beq.n	8013704 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136da:	f043 0220 	orr.w	r2, r3, #32
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80136e2:	2303      	movs	r3, #3
 80136e4:	e00f      	b.n	8013706 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80136e6:	697b      	ldr	r3, [r7, #20]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d00a      	beq.n	8013702 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80136ec:	697b      	ldr	r3, [r7, #20]
 80136ee:	3b01      	subs	r3, #1
 80136f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	689b      	ldr	r3, [r3, #8]
 80136f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80136fc:	2b80      	cmp	r3, #128	; 0x80
 80136fe:	d0f2      	beq.n	80136e6 <SPI_EndRxTxTransaction+0x52>
 8013700:	e000      	b.n	8013704 <SPI_EndRxTxTransaction+0x70>
        break;
 8013702:	bf00      	nop
  }

  return HAL_OK;
 8013704:	2300      	movs	r3, #0
}
 8013706:	4618      	mov	r0, r3
 8013708:	3718      	adds	r7, #24
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}
 801370e:	bf00      	nop
 8013710:	20000080 	.word	0x20000080
 8013714:	165e9f81 	.word	0x165e9f81

08013718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b082      	sub	sp, #8
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d101      	bne.n	801372a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013726:	2301      	movs	r3, #1
 8013728:	e01d      	b.n	8013766 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013730:	b2db      	uxtb	r3, r3
 8013732:	2b00      	cmp	r3, #0
 8013734:	d106      	bne.n	8013744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	2200      	movs	r2, #0
 801373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801373e:	6878      	ldr	r0, [r7, #4]
 8013740:	f7fc fa42 	bl	800fbc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2202      	movs	r2, #2
 8013748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	681a      	ldr	r2, [r3, #0]
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	3304      	adds	r3, #4
 8013754:	4619      	mov	r1, r3
 8013756:	4610      	mov	r0, r2
 8013758:	f000 fe50 	bl	80143fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	2201      	movs	r2, #1
 8013760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013764:	2300      	movs	r3, #0
}
 8013766:	4618      	mov	r0, r3
 8013768:	3708      	adds	r7, #8
 801376a:	46bd      	mov	sp, r7
 801376c:	bd80      	pop	{r7, pc}

0801376e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801376e:	b480      	push	{r7}
 8013770:	b085      	sub	sp, #20
 8013772:	af00      	add	r7, sp, #0
 8013774:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	68da      	ldr	r2, [r3, #12]
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	f042 0201 	orr.w	r2, r2, #1
 8013784:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	689b      	ldr	r3, [r3, #8]
 801378c:	f003 0307 	and.w	r3, r3, #7
 8013790:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	2b06      	cmp	r3, #6
 8013796:	d007      	beq.n	80137a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	681a      	ldr	r2, [r3, #0]
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	f042 0201 	orr.w	r2, r2, #1
 80137a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80137a8:	2300      	movs	r3, #0
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	3714      	adds	r7, #20
 80137ae:	46bd      	mov	sp, r7
 80137b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b4:	4770      	bx	lr

080137b6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80137b6:	b480      	push	{r7}
 80137b8:	b083      	sub	sp, #12
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	68da      	ldr	r2, [r3, #12]
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	f022 0201 	bic.w	r2, r2, #1
 80137cc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	6a1a      	ldr	r2, [r3, #32]
 80137d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80137d8:	4013      	ands	r3, r2
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d10f      	bne.n	80137fe <HAL_TIM_Base_Stop_IT+0x48>
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	6a1a      	ldr	r2, [r3, #32]
 80137e4:	f240 4344 	movw	r3, #1092	; 0x444
 80137e8:	4013      	ands	r3, r2
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d107      	bne.n	80137fe <HAL_TIM_Base_Stop_IT+0x48>
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	681a      	ldr	r2, [r3, #0]
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	f022 0201 	bic.w	r2, r2, #1
 80137fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80137fe:	2300      	movs	r3, #0
}
 8013800:	4618      	mov	r0, r3
 8013802:	370c      	adds	r7, #12
 8013804:	46bd      	mov	sp, r7
 8013806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380a:	4770      	bx	lr

0801380c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b082      	sub	sp, #8
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d101      	bne.n	801381e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 801381a:	2301      	movs	r3, #1
 801381c:	e01d      	b.n	801385a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013824:	b2db      	uxtb	r3, r3
 8013826:	2b00      	cmp	r3, #0
 8013828:	d106      	bne.n	8013838 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2200      	movs	r2, #0
 801382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f000 f815 	bl	8013862 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	2202      	movs	r2, #2
 801383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	681a      	ldr	r2, [r3, #0]
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	3304      	adds	r3, #4
 8013848:	4619      	mov	r1, r3
 801384a:	4610      	mov	r0, r2
 801384c:	f000 fdd6 	bl	80143fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	2201      	movs	r2, #1
 8013854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013858:	2300      	movs	r3, #0
}
 801385a:	4618      	mov	r0, r3
 801385c:	3708      	adds	r7, #8
 801385e:	46bd      	mov	sp, r7
 8013860:	bd80      	pop	{r7, pc}

08013862 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8013862:	b480      	push	{r7}
 8013864:	b083      	sub	sp, #12
 8013866:	af00      	add	r7, sp, #0
 8013868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 801386a:	bf00      	nop
 801386c:	370c      	adds	r7, #12
 801386e:	46bd      	mov	sp, r7
 8013870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013874:	4770      	bx	lr
	...

08013878 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b084      	sub	sp, #16
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8013882:	683b      	ldr	r3, [r7, #0]
 8013884:	2b0c      	cmp	r3, #12
 8013886:	d841      	bhi.n	801390c <HAL_TIM_OC_Start_IT+0x94>
 8013888:	a201      	add	r2, pc, #4	; (adr r2, 8013890 <HAL_TIM_OC_Start_IT+0x18>)
 801388a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801388e:	bf00      	nop
 8013890:	080138c5 	.word	0x080138c5
 8013894:	0801390d 	.word	0x0801390d
 8013898:	0801390d 	.word	0x0801390d
 801389c:	0801390d 	.word	0x0801390d
 80138a0:	080138d7 	.word	0x080138d7
 80138a4:	0801390d 	.word	0x0801390d
 80138a8:	0801390d 	.word	0x0801390d
 80138ac:	0801390d 	.word	0x0801390d
 80138b0:	080138e9 	.word	0x080138e9
 80138b4:	0801390d 	.word	0x0801390d
 80138b8:	0801390d 	.word	0x0801390d
 80138bc:	0801390d 	.word	0x0801390d
 80138c0:	080138fb 	.word	0x080138fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	68da      	ldr	r2, [r3, #12]
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	f042 0202 	orr.w	r2, r2, #2
 80138d2:	60da      	str	r2, [r3, #12]
      break;
 80138d4:	e01b      	b.n	801390e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	68da      	ldr	r2, [r3, #12]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	f042 0204 	orr.w	r2, r2, #4
 80138e4:	60da      	str	r2, [r3, #12]
      break;
 80138e6:	e012      	b.n	801390e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	68da      	ldr	r2, [r3, #12]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	f042 0208 	orr.w	r2, r2, #8
 80138f6:	60da      	str	r2, [r3, #12]
      break;
 80138f8:	e009      	b.n	801390e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	68da      	ldr	r2, [r3, #12]
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	f042 0210 	orr.w	r2, r2, #16
 8013908:	60da      	str	r2, [r3, #12]
      break;
 801390a:	e000      	b.n	801390e <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 801390c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	2201      	movs	r2, #1
 8013914:	6839      	ldr	r1, [r7, #0]
 8013916:	4618      	mov	r0, r3
 8013918:	f001 f85a 	bl	80149d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	4a15      	ldr	r2, [pc, #84]	; (8013978 <HAL_TIM_OC_Start_IT+0x100>)
 8013922:	4293      	cmp	r3, r2
 8013924:	d004      	beq.n	8013930 <HAL_TIM_OC_Start_IT+0xb8>
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	4a14      	ldr	r2, [pc, #80]	; (801397c <HAL_TIM_OC_Start_IT+0x104>)
 801392c:	4293      	cmp	r3, r2
 801392e:	d101      	bne.n	8013934 <HAL_TIM_OC_Start_IT+0xbc>
 8013930:	2301      	movs	r3, #1
 8013932:	e000      	b.n	8013936 <HAL_TIM_OC_Start_IT+0xbe>
 8013934:	2300      	movs	r3, #0
 8013936:	2b00      	cmp	r3, #0
 8013938:	d007      	beq.n	801394a <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013948:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	689b      	ldr	r3, [r3, #8]
 8013950:	f003 0307 	and.w	r3, r3, #7
 8013954:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	2b06      	cmp	r3, #6
 801395a:	d007      	beq.n	801396c <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	681a      	ldr	r2, [r3, #0]
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	f042 0201 	orr.w	r2, r2, #1
 801396a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801396c:	2300      	movs	r3, #0
}
 801396e:	4618      	mov	r0, r3
 8013970:	3710      	adds	r7, #16
 8013972:	46bd      	mov	sp, r7
 8013974:	bd80      	pop	{r7, pc}
 8013976:	bf00      	nop
 8013978:	40010000 	.word	0x40010000
 801397c:	40010400 	.word	0x40010400

08013980 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b082      	sub	sp, #8
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801398a:	683b      	ldr	r3, [r7, #0]
 801398c:	2b0c      	cmp	r3, #12
 801398e:	d841      	bhi.n	8013a14 <HAL_TIM_OC_Stop_IT+0x94>
 8013990:	a201      	add	r2, pc, #4	; (adr r2, 8013998 <HAL_TIM_OC_Stop_IT+0x18>)
 8013992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013996:	bf00      	nop
 8013998:	080139cd 	.word	0x080139cd
 801399c:	08013a15 	.word	0x08013a15
 80139a0:	08013a15 	.word	0x08013a15
 80139a4:	08013a15 	.word	0x08013a15
 80139a8:	080139df 	.word	0x080139df
 80139ac:	08013a15 	.word	0x08013a15
 80139b0:	08013a15 	.word	0x08013a15
 80139b4:	08013a15 	.word	0x08013a15
 80139b8:	080139f1 	.word	0x080139f1
 80139bc:	08013a15 	.word	0x08013a15
 80139c0:	08013a15 	.word	0x08013a15
 80139c4:	08013a15 	.word	0x08013a15
 80139c8:	08013a03 	.word	0x08013a03
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	68da      	ldr	r2, [r3, #12]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	f022 0202 	bic.w	r2, r2, #2
 80139da:	60da      	str	r2, [r3, #12]
      break;
 80139dc:	e01b      	b.n	8013a16 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	68da      	ldr	r2, [r3, #12]
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	f022 0204 	bic.w	r2, r2, #4
 80139ec:	60da      	str	r2, [r3, #12]
      break;
 80139ee:	e012      	b.n	8013a16 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	68da      	ldr	r2, [r3, #12]
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	f022 0208 	bic.w	r2, r2, #8
 80139fe:	60da      	str	r2, [r3, #12]
      break;
 8013a00:	e009      	b.n	8013a16 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	68da      	ldr	r2, [r3, #12]
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	f022 0210 	bic.w	r2, r2, #16
 8013a10:	60da      	str	r2, [r3, #12]
      break;
 8013a12:	e000      	b.n	8013a16 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8013a14:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	6839      	ldr	r1, [r7, #0]
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f000 ffd6 	bl	80149d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	4a20      	ldr	r2, [pc, #128]	; (8013aac <HAL_TIM_OC_Stop_IT+0x12c>)
 8013a2a:	4293      	cmp	r3, r2
 8013a2c:	d004      	beq.n	8013a38 <HAL_TIM_OC_Stop_IT+0xb8>
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	4a1f      	ldr	r2, [pc, #124]	; (8013ab0 <HAL_TIM_OC_Stop_IT+0x130>)
 8013a34:	4293      	cmp	r3, r2
 8013a36:	d101      	bne.n	8013a3c <HAL_TIM_OC_Stop_IT+0xbc>
 8013a38:	2301      	movs	r3, #1
 8013a3a:	e000      	b.n	8013a3e <HAL_TIM_OC_Stop_IT+0xbe>
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d017      	beq.n	8013a72 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	6a1a      	ldr	r2, [r3, #32]
 8013a48:	f241 1311 	movw	r3, #4369	; 0x1111
 8013a4c:	4013      	ands	r3, r2
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d10f      	bne.n	8013a72 <HAL_TIM_OC_Stop_IT+0xf2>
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	6a1a      	ldr	r2, [r3, #32]
 8013a58:	f240 4344 	movw	r3, #1092	; 0x444
 8013a5c:	4013      	ands	r3, r2
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d107      	bne.n	8013a72 <HAL_TIM_OC_Stop_IT+0xf2>
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013a70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	6a1a      	ldr	r2, [r3, #32]
 8013a78:	f241 1311 	movw	r3, #4369	; 0x1111
 8013a7c:	4013      	ands	r3, r2
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d10f      	bne.n	8013aa2 <HAL_TIM_OC_Stop_IT+0x122>
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	6a1a      	ldr	r2, [r3, #32]
 8013a88:	f240 4344 	movw	r3, #1092	; 0x444
 8013a8c:	4013      	ands	r3, r2
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d107      	bne.n	8013aa2 <HAL_TIM_OC_Stop_IT+0x122>
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	681a      	ldr	r2, [r3, #0]
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	f022 0201 	bic.w	r2, r2, #1
 8013aa0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013aa2:	2300      	movs	r3, #0
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3708      	adds	r7, #8
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}
 8013aac:	40010000 	.word	0x40010000
 8013ab0:	40010400 	.word	0x40010400

08013ab4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b082      	sub	sp, #8
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d101      	bne.n	8013ac6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013ac2:	2301      	movs	r3, #1
 8013ac4:	e01d      	b.n	8013b02 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013acc:	b2db      	uxtb	r3, r3
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d106      	bne.n	8013ae0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f000 f815 	bl	8013b0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	2202      	movs	r2, #2
 8013ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	681a      	ldr	r2, [r3, #0]
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	3304      	adds	r3, #4
 8013af0:	4619      	mov	r1, r3
 8013af2:	4610      	mov	r0, r2
 8013af4:	f000 fc82 	bl	80143fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2201      	movs	r2, #1
 8013afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013b00:	2300      	movs	r3, #0
}
 8013b02:	4618      	mov	r0, r3
 8013b04:	3708      	adds	r7, #8
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}

08013b0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8013b0a:	b480      	push	{r7}
 8013b0c:	b083      	sub	sp, #12
 8013b0e:	af00      	add	r7, sp, #0
 8013b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8013b12:	bf00      	nop
 8013b14:	370c      	adds	r7, #12
 8013b16:	46bd      	mov	sp, r7
 8013b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1c:	4770      	bx	lr
	...

08013b20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b084      	sub	sp, #16
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
 8013b28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	2201      	movs	r2, #1
 8013b30:	6839      	ldr	r1, [r7, #0]
 8013b32:	4618      	mov	r0, r3
 8013b34:	f000 ff4c 	bl	80149d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	4a15      	ldr	r2, [pc, #84]	; (8013b94 <HAL_TIM_PWM_Start+0x74>)
 8013b3e:	4293      	cmp	r3, r2
 8013b40:	d004      	beq.n	8013b4c <HAL_TIM_PWM_Start+0x2c>
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	4a14      	ldr	r2, [pc, #80]	; (8013b98 <HAL_TIM_PWM_Start+0x78>)
 8013b48:	4293      	cmp	r3, r2
 8013b4a:	d101      	bne.n	8013b50 <HAL_TIM_PWM_Start+0x30>
 8013b4c:	2301      	movs	r3, #1
 8013b4e:	e000      	b.n	8013b52 <HAL_TIM_PWM_Start+0x32>
 8013b50:	2300      	movs	r3, #0
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d007      	beq.n	8013b66 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013b64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	689b      	ldr	r3, [r3, #8]
 8013b6c:	f003 0307 	and.w	r3, r3, #7
 8013b70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	2b06      	cmp	r3, #6
 8013b76:	d007      	beq.n	8013b88 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	681a      	ldr	r2, [r3, #0]
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	f042 0201 	orr.w	r2, r2, #1
 8013b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013b88:	2300      	movs	r3, #0
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3710      	adds	r7, #16
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}
 8013b92:	bf00      	nop
 8013b94:	40010000 	.word	0x40010000
 8013b98:	40010400 	.word	0x40010400

08013b9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b082      	sub	sp, #8
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
 8013ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	2200      	movs	r2, #0
 8013bac:	6839      	ldr	r1, [r7, #0]
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f000 ff0e 	bl	80149d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	4a22      	ldr	r2, [pc, #136]	; (8013c44 <HAL_TIM_PWM_Stop+0xa8>)
 8013bba:	4293      	cmp	r3, r2
 8013bbc:	d004      	beq.n	8013bc8 <HAL_TIM_PWM_Stop+0x2c>
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	4a21      	ldr	r2, [pc, #132]	; (8013c48 <HAL_TIM_PWM_Stop+0xac>)
 8013bc4:	4293      	cmp	r3, r2
 8013bc6:	d101      	bne.n	8013bcc <HAL_TIM_PWM_Stop+0x30>
 8013bc8:	2301      	movs	r3, #1
 8013bca:	e000      	b.n	8013bce <HAL_TIM_PWM_Stop+0x32>
 8013bcc:	2300      	movs	r3, #0
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d017      	beq.n	8013c02 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	6a1a      	ldr	r2, [r3, #32]
 8013bd8:	f241 1311 	movw	r3, #4369	; 0x1111
 8013bdc:	4013      	ands	r3, r2
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d10f      	bne.n	8013c02 <HAL_TIM_PWM_Stop+0x66>
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	6a1a      	ldr	r2, [r3, #32]
 8013be8:	f240 4344 	movw	r3, #1092	; 0x444
 8013bec:	4013      	ands	r3, r2
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d107      	bne.n	8013c02 <HAL_TIM_PWM_Stop+0x66>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013c00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	6a1a      	ldr	r2, [r3, #32]
 8013c08:	f241 1311 	movw	r3, #4369	; 0x1111
 8013c0c:	4013      	ands	r3, r2
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d10f      	bne.n	8013c32 <HAL_TIM_PWM_Stop+0x96>
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	6a1a      	ldr	r2, [r3, #32]
 8013c18:	f240 4344 	movw	r3, #1092	; 0x444
 8013c1c:	4013      	ands	r3, r2
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d107      	bne.n	8013c32 <HAL_TIM_PWM_Stop+0x96>
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	681a      	ldr	r2, [r3, #0]
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	f022 0201 	bic.w	r2, r2, #1
 8013c30:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	2201      	movs	r2, #1
 8013c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8013c3a:	2300      	movs	r3, #0
}
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	3708      	adds	r7, #8
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}
 8013c44:	40010000 	.word	0x40010000
 8013c48:	40010400 	.word	0x40010400

08013c4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b086      	sub	sp, #24
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
 8013c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d101      	bne.n	8013c60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8013c5c:	2301      	movs	r3, #1
 8013c5e:	e083      	b.n	8013d68 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013c66:	b2db      	uxtb	r3, r3
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d106      	bne.n	8013c7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2200      	movs	r2, #0
 8013c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f7fc f837 	bl	800fce8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	2202      	movs	r2, #2
 8013c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	689b      	ldr	r3, [r3, #8]
 8013c88:	687a      	ldr	r2, [r7, #4]
 8013c8a:	6812      	ldr	r2, [r2, #0]
 8013c8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013c90:	f023 0307 	bic.w	r3, r3, #7
 8013c94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681a      	ldr	r2, [r3, #0]
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	3304      	adds	r3, #4
 8013c9e:	4619      	mov	r1, r3
 8013ca0:	4610      	mov	r0, r2
 8013ca2:	f000 fbab 	bl	80143fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	689b      	ldr	r3, [r3, #8]
 8013cac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	699b      	ldr	r3, [r3, #24]
 8013cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	6a1b      	ldr	r3, [r3, #32]
 8013cbc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8013cbe:	683b      	ldr	r3, [r7, #0]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	697a      	ldr	r2, [r7, #20]
 8013cc4:	4313      	orrs	r3, r2
 8013cc6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8013cc8:	693b      	ldr	r3, [r7, #16]
 8013cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013cce:	f023 0303 	bic.w	r3, r3, #3
 8013cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8013cd4:	683b      	ldr	r3, [r7, #0]
 8013cd6:	689a      	ldr	r2, [r3, #8]
 8013cd8:	683b      	ldr	r3, [r7, #0]
 8013cda:	699b      	ldr	r3, [r3, #24]
 8013cdc:	021b      	lsls	r3, r3, #8
 8013cde:	4313      	orrs	r3, r2
 8013ce0:	693a      	ldr	r2, [r7, #16]
 8013ce2:	4313      	orrs	r3, r2
 8013ce4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8013ce6:	693b      	ldr	r3, [r7, #16]
 8013ce8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8013cec:	f023 030c 	bic.w	r3, r3, #12
 8013cf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013cf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013cfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8013cfe:	683b      	ldr	r3, [r7, #0]
 8013d00:	68da      	ldr	r2, [r3, #12]
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	69db      	ldr	r3, [r3, #28]
 8013d06:	021b      	lsls	r3, r3, #8
 8013d08:	4313      	orrs	r3, r2
 8013d0a:	693a      	ldr	r2, [r7, #16]
 8013d0c:	4313      	orrs	r3, r2
 8013d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8013d10:	683b      	ldr	r3, [r7, #0]
 8013d12:	691b      	ldr	r3, [r3, #16]
 8013d14:	011a      	lsls	r2, r3, #4
 8013d16:	683b      	ldr	r3, [r7, #0]
 8013d18:	6a1b      	ldr	r3, [r3, #32]
 8013d1a:	031b      	lsls	r3, r3, #12
 8013d1c:	4313      	orrs	r3, r2
 8013d1e:	693a      	ldr	r2, [r7, #16]
 8013d20:	4313      	orrs	r3, r2
 8013d22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8013d2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8013d32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8013d34:	683b      	ldr	r3, [r7, #0]
 8013d36:	685a      	ldr	r2, [r3, #4]
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	695b      	ldr	r3, [r3, #20]
 8013d3c:	011b      	lsls	r3, r3, #4
 8013d3e:	4313      	orrs	r3, r2
 8013d40:	68fa      	ldr	r2, [r7, #12]
 8013d42:	4313      	orrs	r3, r2
 8013d44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	697a      	ldr	r2, [r7, #20]
 8013d4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	693a      	ldr	r2, [r7, #16]
 8013d54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	68fa      	ldr	r2, [r7, #12]
 8013d5c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	2201      	movs	r2, #1
 8013d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013d66:	2300      	movs	r3, #0
}
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3718      	adds	r7, #24
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}

08013d70 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b082      	sub	sp, #8
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
 8013d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8013d7a:	683b      	ldr	r3, [r7, #0]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d002      	beq.n	8013d86 <HAL_TIM_Encoder_Start+0x16>
 8013d80:	2b04      	cmp	r3, #4
 8013d82:	d008      	beq.n	8013d96 <HAL_TIM_Encoder_Start+0x26>
 8013d84:	e00f      	b.n	8013da6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	2201      	movs	r2, #1
 8013d8c:	2100      	movs	r1, #0
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f000 fe1e 	bl	80149d0 <TIM_CCxChannelCmd>
      break;
 8013d94:	e016      	b.n	8013dc4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	2201      	movs	r2, #1
 8013d9c:	2104      	movs	r1, #4
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f000 fe16 	bl	80149d0 <TIM_CCxChannelCmd>
      break;
 8013da4:	e00e      	b.n	8013dc4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	2201      	movs	r2, #1
 8013dac:	2100      	movs	r1, #0
 8013dae:	4618      	mov	r0, r3
 8013db0:	f000 fe0e 	bl	80149d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	2201      	movs	r2, #1
 8013dba:	2104      	movs	r1, #4
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f000 fe07 	bl	80149d0 <TIM_CCxChannelCmd>
      break;
 8013dc2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	681a      	ldr	r2, [r3, #0]
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	f042 0201 	orr.w	r2, r2, #1
 8013dd2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013dd4:	2300      	movs	r3, #0
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3708      	adds	r7, #8
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}

08013dde <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013dde:	b580      	push	{r7, lr}
 8013de0:	b082      	sub	sp, #8
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	691b      	ldr	r3, [r3, #16]
 8013dec:	f003 0302 	and.w	r3, r3, #2
 8013df0:	2b02      	cmp	r3, #2
 8013df2:	d122      	bne.n	8013e3a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	68db      	ldr	r3, [r3, #12]
 8013dfa:	f003 0302 	and.w	r3, r3, #2
 8013dfe:	2b02      	cmp	r3, #2
 8013e00:	d11b      	bne.n	8013e3a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	f06f 0202 	mvn.w	r2, #2
 8013e0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	2201      	movs	r2, #1
 8013e10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	699b      	ldr	r3, [r3, #24]
 8013e18:	f003 0303 	and.w	r3, r3, #3
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d003      	beq.n	8013e28 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f000 facc 	bl	80143be <HAL_TIM_IC_CaptureCallback>
 8013e26:	e005      	b.n	8013e34 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013e28:	6878      	ldr	r0, [r7, #4]
 8013e2a:	f000 fabe 	bl	80143aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013e2e:	6878      	ldr	r0, [r7, #4]
 8013e30:	f000 facf 	bl	80143d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	2200      	movs	r2, #0
 8013e38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	691b      	ldr	r3, [r3, #16]
 8013e40:	f003 0304 	and.w	r3, r3, #4
 8013e44:	2b04      	cmp	r3, #4
 8013e46:	d122      	bne.n	8013e8e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	68db      	ldr	r3, [r3, #12]
 8013e4e:	f003 0304 	and.w	r3, r3, #4
 8013e52:	2b04      	cmp	r3, #4
 8013e54:	d11b      	bne.n	8013e8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	f06f 0204 	mvn.w	r2, #4
 8013e5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	2202      	movs	r2, #2
 8013e64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	699b      	ldr	r3, [r3, #24]
 8013e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d003      	beq.n	8013e7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f000 faa2 	bl	80143be <HAL_TIM_IC_CaptureCallback>
 8013e7a:	e005      	b.n	8013e88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f000 fa94 	bl	80143aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	f000 faa5 	bl	80143d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	691b      	ldr	r3, [r3, #16]
 8013e94:	f003 0308 	and.w	r3, r3, #8
 8013e98:	2b08      	cmp	r3, #8
 8013e9a:	d122      	bne.n	8013ee2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	68db      	ldr	r3, [r3, #12]
 8013ea2:	f003 0308 	and.w	r3, r3, #8
 8013ea6:	2b08      	cmp	r3, #8
 8013ea8:	d11b      	bne.n	8013ee2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	f06f 0208 	mvn.w	r2, #8
 8013eb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2204      	movs	r2, #4
 8013eb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	69db      	ldr	r3, [r3, #28]
 8013ec0:	f003 0303 	and.w	r3, r3, #3
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d003      	beq.n	8013ed0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013ec8:	6878      	ldr	r0, [r7, #4]
 8013eca:	f000 fa78 	bl	80143be <HAL_TIM_IC_CaptureCallback>
 8013ece:	e005      	b.n	8013edc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	f000 fa6a 	bl	80143aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	f000 fa7b 	bl	80143d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	2200      	movs	r2, #0
 8013ee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	691b      	ldr	r3, [r3, #16]
 8013ee8:	f003 0310 	and.w	r3, r3, #16
 8013eec:	2b10      	cmp	r3, #16
 8013eee:	d122      	bne.n	8013f36 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	68db      	ldr	r3, [r3, #12]
 8013ef6:	f003 0310 	and.w	r3, r3, #16
 8013efa:	2b10      	cmp	r3, #16
 8013efc:	d11b      	bne.n	8013f36 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	f06f 0210 	mvn.w	r2, #16
 8013f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	2208      	movs	r2, #8
 8013f0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	69db      	ldr	r3, [r3, #28]
 8013f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d003      	beq.n	8013f24 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	f000 fa4e 	bl	80143be <HAL_TIM_IC_CaptureCallback>
 8013f22:	e005      	b.n	8013f30 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013f24:	6878      	ldr	r0, [r7, #4]
 8013f26:	f000 fa40 	bl	80143aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013f2a:	6878      	ldr	r0, [r7, #4]
 8013f2c:	f000 fa51 	bl	80143d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2200      	movs	r2, #0
 8013f34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	691b      	ldr	r3, [r3, #16]
 8013f3c:	f003 0301 	and.w	r3, r3, #1
 8013f40:	2b01      	cmp	r3, #1
 8013f42:	d10e      	bne.n	8013f62 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	68db      	ldr	r3, [r3, #12]
 8013f4a:	f003 0301 	and.w	r3, r3, #1
 8013f4e:	2b01      	cmp	r3, #1
 8013f50:	d107      	bne.n	8013f62 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	f06f 0201 	mvn.w	r2, #1
 8013f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	f7fa f9b3 	bl	800e2c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	691b      	ldr	r3, [r3, #16]
 8013f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f6c:	2b80      	cmp	r3, #128	; 0x80
 8013f6e:	d10e      	bne.n	8013f8e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	68db      	ldr	r3, [r3, #12]
 8013f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f7a:	2b80      	cmp	r3, #128	; 0x80
 8013f7c:	d107      	bne.n	8013f8e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8013f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f000 fee9 	bl	8014d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	691b      	ldr	r3, [r3, #16]
 8013f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f98:	2b40      	cmp	r3, #64	; 0x40
 8013f9a:	d10e      	bne.n	8013fba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	68db      	ldr	r3, [r3, #12]
 8013fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013fa6:	2b40      	cmp	r3, #64	; 0x40
 8013fa8:	d107      	bne.n	8013fba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f000 fa16 	bl	80143e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	691b      	ldr	r3, [r3, #16]
 8013fc0:	f003 0320 	and.w	r3, r3, #32
 8013fc4:	2b20      	cmp	r3, #32
 8013fc6:	d10e      	bne.n	8013fe6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	68db      	ldr	r3, [r3, #12]
 8013fce:	f003 0320 	and.w	r3, r3, #32
 8013fd2:	2b20      	cmp	r3, #32
 8013fd4:	d107      	bne.n	8013fe6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	f06f 0220 	mvn.w	r2, #32
 8013fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013fe0:	6878      	ldr	r0, [r7, #4]
 8013fe2:	f000 feb3 	bl	8014d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013fe6:	bf00      	nop
 8013fe8:	3708      	adds	r7, #8
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}
	...

08013ff0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b084      	sub	sp, #16
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	60f8      	str	r0, [r7, #12]
 8013ff8:	60b9      	str	r1, [r7, #8]
 8013ffa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014002:	2b01      	cmp	r3, #1
 8014004:	d101      	bne.n	801400a <HAL_TIM_OC_ConfigChannel+0x1a>
 8014006:	2302      	movs	r3, #2
 8014008:	e04e      	b.n	80140a8 <HAL_TIM_OC_ConfigChannel+0xb8>
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	2201      	movs	r2, #1
 801400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	2202      	movs	r2, #2
 8014016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	2b0c      	cmp	r3, #12
 801401e:	d839      	bhi.n	8014094 <HAL_TIM_OC_ConfigChannel+0xa4>
 8014020:	a201      	add	r2, pc, #4	; (adr r2, 8014028 <HAL_TIM_OC_ConfigChannel+0x38>)
 8014022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014026:	bf00      	nop
 8014028:	0801405d 	.word	0x0801405d
 801402c:	08014095 	.word	0x08014095
 8014030:	08014095 	.word	0x08014095
 8014034:	08014095 	.word	0x08014095
 8014038:	0801406b 	.word	0x0801406b
 801403c:	08014095 	.word	0x08014095
 8014040:	08014095 	.word	0x08014095
 8014044:	08014095 	.word	0x08014095
 8014048:	08014079 	.word	0x08014079
 801404c:	08014095 	.word	0x08014095
 8014050:	08014095 	.word	0x08014095
 8014054:	08014095 	.word	0x08014095
 8014058:	08014087 	.word	0x08014087
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	68b9      	ldr	r1, [r7, #8]
 8014062:	4618      	mov	r0, r3
 8014064:	f000 fa6a 	bl	801453c <TIM_OC1_SetConfig>
      break;
 8014068:	e015      	b.n	8014096 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	68b9      	ldr	r1, [r7, #8]
 8014070:	4618      	mov	r0, r3
 8014072:	f000 fad3 	bl	801461c <TIM_OC2_SetConfig>
      break;
 8014076:	e00e      	b.n	8014096 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	68b9      	ldr	r1, [r7, #8]
 801407e:	4618      	mov	r0, r3
 8014080:	f000 fb42 	bl	8014708 <TIM_OC3_SetConfig>
      break;
 8014084:	e007      	b.n	8014096 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	68b9      	ldr	r1, [r7, #8]
 801408c:	4618      	mov	r0, r3
 801408e:	f000 fbaf 	bl	80147f0 <TIM_OC4_SetConfig>
      break;
 8014092:	e000      	b.n	8014096 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8014094:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	2201      	movs	r2, #1
 801409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	2200      	movs	r2, #0
 80140a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80140a6:	2300      	movs	r3, #0
}
 80140a8:	4618      	mov	r0, r3
 80140aa:	3710      	adds	r7, #16
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}

080140b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b084      	sub	sp, #16
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	60f8      	str	r0, [r7, #12]
 80140b8:	60b9      	str	r1, [r7, #8]
 80140ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80140c2:	2b01      	cmp	r3, #1
 80140c4:	d101      	bne.n	80140ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80140c6:	2302      	movs	r3, #2
 80140c8:	e0b4      	b.n	8014234 <HAL_TIM_PWM_ConfigChannel+0x184>
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	2201      	movs	r2, #1
 80140ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	2202      	movs	r2, #2
 80140d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	2b0c      	cmp	r3, #12
 80140de:	f200 809f 	bhi.w	8014220 <HAL_TIM_PWM_ConfigChannel+0x170>
 80140e2:	a201      	add	r2, pc, #4	; (adr r2, 80140e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80140e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140e8:	0801411d 	.word	0x0801411d
 80140ec:	08014221 	.word	0x08014221
 80140f0:	08014221 	.word	0x08014221
 80140f4:	08014221 	.word	0x08014221
 80140f8:	0801415d 	.word	0x0801415d
 80140fc:	08014221 	.word	0x08014221
 8014100:	08014221 	.word	0x08014221
 8014104:	08014221 	.word	0x08014221
 8014108:	0801419f 	.word	0x0801419f
 801410c:	08014221 	.word	0x08014221
 8014110:	08014221 	.word	0x08014221
 8014114:	08014221 	.word	0x08014221
 8014118:	080141df 	.word	0x080141df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	68b9      	ldr	r1, [r7, #8]
 8014122:	4618      	mov	r0, r3
 8014124:	f000 fa0a 	bl	801453c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	699a      	ldr	r2, [r3, #24]
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	f042 0208 	orr.w	r2, r2, #8
 8014136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	699a      	ldr	r2, [r3, #24]
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	f022 0204 	bic.w	r2, r2, #4
 8014146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	6999      	ldr	r1, [r3, #24]
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	691a      	ldr	r2, [r3, #16]
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	430a      	orrs	r2, r1
 8014158:	619a      	str	r2, [r3, #24]
      break;
 801415a:	e062      	b.n	8014222 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	68b9      	ldr	r1, [r7, #8]
 8014162:	4618      	mov	r0, r3
 8014164:	f000 fa5a 	bl	801461c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	699a      	ldr	r2, [r3, #24]
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	699a      	ldr	r2, [r3, #24]
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	6999      	ldr	r1, [r3, #24]
 801418e:	68bb      	ldr	r3, [r7, #8]
 8014190:	691b      	ldr	r3, [r3, #16]
 8014192:	021a      	lsls	r2, r3, #8
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	430a      	orrs	r2, r1
 801419a:	619a      	str	r2, [r3, #24]
      break;
 801419c:	e041      	b.n	8014222 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	68b9      	ldr	r1, [r7, #8]
 80141a4:	4618      	mov	r0, r3
 80141a6:	f000 faaf 	bl	8014708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	69da      	ldr	r2, [r3, #28]
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	f042 0208 	orr.w	r2, r2, #8
 80141b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	69da      	ldr	r2, [r3, #28]
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	f022 0204 	bic.w	r2, r2, #4
 80141c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	69d9      	ldr	r1, [r3, #28]
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	691a      	ldr	r2, [r3, #16]
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	430a      	orrs	r2, r1
 80141da:	61da      	str	r2, [r3, #28]
      break;
 80141dc:	e021      	b.n	8014222 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	68b9      	ldr	r1, [r7, #8]
 80141e4:	4618      	mov	r0, r3
 80141e6:	f000 fb03 	bl	80147f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	69da      	ldr	r2, [r3, #28]
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80141f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	69da      	ldr	r2, [r3, #28]
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	69d9      	ldr	r1, [r3, #28]
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	691b      	ldr	r3, [r3, #16]
 8014214:	021a      	lsls	r2, r3, #8
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	430a      	orrs	r2, r1
 801421c:	61da      	str	r2, [r3, #28]
      break;
 801421e:	e000      	b.n	8014222 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8014220:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	2201      	movs	r2, #1
 8014226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	2200      	movs	r2, #0
 801422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014232:	2300      	movs	r3, #0
}
 8014234:	4618      	mov	r0, r3
 8014236:	3710      	adds	r7, #16
 8014238:	46bd      	mov	sp, r7
 801423a:	bd80      	pop	{r7, pc}

0801423c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b084      	sub	sp, #16
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
 8014244:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801424c:	2b01      	cmp	r3, #1
 801424e:	d101      	bne.n	8014254 <HAL_TIM_ConfigClockSource+0x18>
 8014250:	2302      	movs	r3, #2
 8014252:	e0a6      	b.n	80143a2 <HAL_TIM_ConfigClockSource+0x166>
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2201      	movs	r2, #1
 8014258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2202      	movs	r2, #2
 8014260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	689b      	ldr	r3, [r3, #8]
 801426a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8014272:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801427a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	68fa      	ldr	r2, [r7, #12]
 8014282:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014284:	683b      	ldr	r3, [r7, #0]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	2b40      	cmp	r3, #64	; 0x40
 801428a:	d067      	beq.n	801435c <HAL_TIM_ConfigClockSource+0x120>
 801428c:	2b40      	cmp	r3, #64	; 0x40
 801428e:	d80b      	bhi.n	80142a8 <HAL_TIM_ConfigClockSource+0x6c>
 8014290:	2b10      	cmp	r3, #16
 8014292:	d073      	beq.n	801437c <HAL_TIM_ConfigClockSource+0x140>
 8014294:	2b10      	cmp	r3, #16
 8014296:	d802      	bhi.n	801429e <HAL_TIM_ConfigClockSource+0x62>
 8014298:	2b00      	cmp	r3, #0
 801429a:	d06f      	beq.n	801437c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801429c:	e078      	b.n	8014390 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801429e:	2b20      	cmp	r3, #32
 80142a0:	d06c      	beq.n	801437c <HAL_TIM_ConfigClockSource+0x140>
 80142a2:	2b30      	cmp	r3, #48	; 0x30
 80142a4:	d06a      	beq.n	801437c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80142a6:	e073      	b.n	8014390 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80142a8:	2b70      	cmp	r3, #112	; 0x70
 80142aa:	d00d      	beq.n	80142c8 <HAL_TIM_ConfigClockSource+0x8c>
 80142ac:	2b70      	cmp	r3, #112	; 0x70
 80142ae:	d804      	bhi.n	80142ba <HAL_TIM_ConfigClockSource+0x7e>
 80142b0:	2b50      	cmp	r3, #80	; 0x50
 80142b2:	d033      	beq.n	801431c <HAL_TIM_ConfigClockSource+0xe0>
 80142b4:	2b60      	cmp	r3, #96	; 0x60
 80142b6:	d041      	beq.n	801433c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80142b8:	e06a      	b.n	8014390 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80142ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80142be:	d066      	beq.n	801438e <HAL_TIM_ConfigClockSource+0x152>
 80142c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80142c4:	d017      	beq.n	80142f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80142c6:	e063      	b.n	8014390 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6818      	ldr	r0, [r3, #0]
 80142cc:	683b      	ldr	r3, [r7, #0]
 80142ce:	6899      	ldr	r1, [r3, #8]
 80142d0:	683b      	ldr	r3, [r7, #0]
 80142d2:	685a      	ldr	r2, [r3, #4]
 80142d4:	683b      	ldr	r3, [r7, #0]
 80142d6:	68db      	ldr	r3, [r3, #12]
 80142d8:	f000 fb5a 	bl	8014990 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	689b      	ldr	r3, [r3, #8]
 80142e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80142ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	68fa      	ldr	r2, [r7, #12]
 80142f2:	609a      	str	r2, [r3, #8]
      break;
 80142f4:	e04c      	b.n	8014390 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	6818      	ldr	r0, [r3, #0]
 80142fa:	683b      	ldr	r3, [r7, #0]
 80142fc:	6899      	ldr	r1, [r3, #8]
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	685a      	ldr	r2, [r3, #4]
 8014302:	683b      	ldr	r3, [r7, #0]
 8014304:	68db      	ldr	r3, [r3, #12]
 8014306:	f000 fb43 	bl	8014990 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	689a      	ldr	r2, [r3, #8]
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014318:	609a      	str	r2, [r3, #8]
      break;
 801431a:	e039      	b.n	8014390 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	6818      	ldr	r0, [r3, #0]
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	6859      	ldr	r1, [r3, #4]
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	68db      	ldr	r3, [r3, #12]
 8014328:	461a      	mov	r2, r3
 801432a:	f000 fab7 	bl	801489c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	2150      	movs	r1, #80	; 0x50
 8014334:	4618      	mov	r0, r3
 8014336:	f000 fb10 	bl	801495a <TIM_ITRx_SetConfig>
      break;
 801433a:	e029      	b.n	8014390 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	6818      	ldr	r0, [r3, #0]
 8014340:	683b      	ldr	r3, [r7, #0]
 8014342:	6859      	ldr	r1, [r3, #4]
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	68db      	ldr	r3, [r3, #12]
 8014348:	461a      	mov	r2, r3
 801434a:	f000 fad6 	bl	80148fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	2160      	movs	r1, #96	; 0x60
 8014354:	4618      	mov	r0, r3
 8014356:	f000 fb00 	bl	801495a <TIM_ITRx_SetConfig>
      break;
 801435a:	e019      	b.n	8014390 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	6818      	ldr	r0, [r3, #0]
 8014360:	683b      	ldr	r3, [r7, #0]
 8014362:	6859      	ldr	r1, [r3, #4]
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	68db      	ldr	r3, [r3, #12]
 8014368:	461a      	mov	r2, r3
 801436a:	f000 fa97 	bl	801489c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	2140      	movs	r1, #64	; 0x40
 8014374:	4618      	mov	r0, r3
 8014376:	f000 faf0 	bl	801495a <TIM_ITRx_SetConfig>
      break;
 801437a:	e009      	b.n	8014390 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681a      	ldr	r2, [r3, #0]
 8014380:	683b      	ldr	r3, [r7, #0]
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	4619      	mov	r1, r3
 8014386:	4610      	mov	r0, r2
 8014388:	f000 fae7 	bl	801495a <TIM_ITRx_SetConfig>
      break;
 801438c:	e000      	b.n	8014390 <HAL_TIM_ConfigClockSource+0x154>
      break;
 801438e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2201      	movs	r2, #1
 8014394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2200      	movs	r2, #0
 801439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80143a0:	2300      	movs	r3, #0
}
 80143a2:	4618      	mov	r0, r3
 80143a4:	3710      	adds	r7, #16
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}

080143aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80143aa:	b480      	push	{r7}
 80143ac:	b083      	sub	sp, #12
 80143ae:	af00      	add	r7, sp, #0
 80143b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80143b2:	bf00      	nop
 80143b4:	370c      	adds	r7, #12
 80143b6:	46bd      	mov	sp, r7
 80143b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143bc:	4770      	bx	lr

080143be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80143be:	b480      	push	{r7}
 80143c0:	b083      	sub	sp, #12
 80143c2:	af00      	add	r7, sp, #0
 80143c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80143c6:	bf00      	nop
 80143c8:	370c      	adds	r7, #12
 80143ca:	46bd      	mov	sp, r7
 80143cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d0:	4770      	bx	lr

080143d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80143d2:	b480      	push	{r7}
 80143d4:	b083      	sub	sp, #12
 80143d6:	af00      	add	r7, sp, #0
 80143d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80143da:	bf00      	nop
 80143dc:	370c      	adds	r7, #12
 80143de:	46bd      	mov	sp, r7
 80143e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e4:	4770      	bx	lr

080143e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80143e6:	b480      	push	{r7}
 80143e8:	b083      	sub	sp, #12
 80143ea:	af00      	add	r7, sp, #0
 80143ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80143ee:	bf00      	nop
 80143f0:	370c      	adds	r7, #12
 80143f2:	46bd      	mov	sp, r7
 80143f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f8:	4770      	bx	lr
	...

080143fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80143fc:	b480      	push	{r7}
 80143fe:	b085      	sub	sp, #20
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
 8014404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	4a40      	ldr	r2, [pc, #256]	; (8014510 <TIM_Base_SetConfig+0x114>)
 8014410:	4293      	cmp	r3, r2
 8014412:	d013      	beq.n	801443c <TIM_Base_SetConfig+0x40>
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801441a:	d00f      	beq.n	801443c <TIM_Base_SetConfig+0x40>
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	4a3d      	ldr	r2, [pc, #244]	; (8014514 <TIM_Base_SetConfig+0x118>)
 8014420:	4293      	cmp	r3, r2
 8014422:	d00b      	beq.n	801443c <TIM_Base_SetConfig+0x40>
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	4a3c      	ldr	r2, [pc, #240]	; (8014518 <TIM_Base_SetConfig+0x11c>)
 8014428:	4293      	cmp	r3, r2
 801442a:	d007      	beq.n	801443c <TIM_Base_SetConfig+0x40>
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	4a3b      	ldr	r2, [pc, #236]	; (801451c <TIM_Base_SetConfig+0x120>)
 8014430:	4293      	cmp	r3, r2
 8014432:	d003      	beq.n	801443c <TIM_Base_SetConfig+0x40>
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	4a3a      	ldr	r2, [pc, #232]	; (8014520 <TIM_Base_SetConfig+0x124>)
 8014438:	4293      	cmp	r3, r2
 801443a:	d108      	bne.n	801444e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014444:	683b      	ldr	r3, [r7, #0]
 8014446:	685b      	ldr	r3, [r3, #4]
 8014448:	68fa      	ldr	r2, [r7, #12]
 801444a:	4313      	orrs	r3, r2
 801444c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	4a2f      	ldr	r2, [pc, #188]	; (8014510 <TIM_Base_SetConfig+0x114>)
 8014452:	4293      	cmp	r3, r2
 8014454:	d02b      	beq.n	80144ae <TIM_Base_SetConfig+0xb2>
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801445c:	d027      	beq.n	80144ae <TIM_Base_SetConfig+0xb2>
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	4a2c      	ldr	r2, [pc, #176]	; (8014514 <TIM_Base_SetConfig+0x118>)
 8014462:	4293      	cmp	r3, r2
 8014464:	d023      	beq.n	80144ae <TIM_Base_SetConfig+0xb2>
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	4a2b      	ldr	r2, [pc, #172]	; (8014518 <TIM_Base_SetConfig+0x11c>)
 801446a:	4293      	cmp	r3, r2
 801446c:	d01f      	beq.n	80144ae <TIM_Base_SetConfig+0xb2>
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	4a2a      	ldr	r2, [pc, #168]	; (801451c <TIM_Base_SetConfig+0x120>)
 8014472:	4293      	cmp	r3, r2
 8014474:	d01b      	beq.n	80144ae <TIM_Base_SetConfig+0xb2>
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	4a29      	ldr	r2, [pc, #164]	; (8014520 <TIM_Base_SetConfig+0x124>)
 801447a:	4293      	cmp	r3, r2
 801447c:	d017      	beq.n	80144ae <TIM_Base_SetConfig+0xb2>
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	4a28      	ldr	r2, [pc, #160]	; (8014524 <TIM_Base_SetConfig+0x128>)
 8014482:	4293      	cmp	r3, r2
 8014484:	d013      	beq.n	80144ae <TIM_Base_SetConfig+0xb2>
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	4a27      	ldr	r2, [pc, #156]	; (8014528 <TIM_Base_SetConfig+0x12c>)
 801448a:	4293      	cmp	r3, r2
 801448c:	d00f      	beq.n	80144ae <TIM_Base_SetConfig+0xb2>
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	4a26      	ldr	r2, [pc, #152]	; (801452c <TIM_Base_SetConfig+0x130>)
 8014492:	4293      	cmp	r3, r2
 8014494:	d00b      	beq.n	80144ae <TIM_Base_SetConfig+0xb2>
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	4a25      	ldr	r2, [pc, #148]	; (8014530 <TIM_Base_SetConfig+0x134>)
 801449a:	4293      	cmp	r3, r2
 801449c:	d007      	beq.n	80144ae <TIM_Base_SetConfig+0xb2>
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	4a24      	ldr	r2, [pc, #144]	; (8014534 <TIM_Base_SetConfig+0x138>)
 80144a2:	4293      	cmp	r3, r2
 80144a4:	d003      	beq.n	80144ae <TIM_Base_SetConfig+0xb2>
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	4a23      	ldr	r2, [pc, #140]	; (8014538 <TIM_Base_SetConfig+0x13c>)
 80144aa:	4293      	cmp	r3, r2
 80144ac:	d108      	bne.n	80144c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80144b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	68db      	ldr	r3, [r3, #12]
 80144ba:	68fa      	ldr	r2, [r7, #12]
 80144bc:	4313      	orrs	r3, r2
 80144be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	695b      	ldr	r3, [r3, #20]
 80144ca:	4313      	orrs	r3, r2
 80144cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	68fa      	ldr	r2, [r7, #12]
 80144d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80144d4:	683b      	ldr	r3, [r7, #0]
 80144d6:	689a      	ldr	r2, [r3, #8]
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80144dc:	683b      	ldr	r3, [r7, #0]
 80144de:	681a      	ldr	r2, [r3, #0]
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	4a0a      	ldr	r2, [pc, #40]	; (8014510 <TIM_Base_SetConfig+0x114>)
 80144e8:	4293      	cmp	r3, r2
 80144ea:	d003      	beq.n	80144f4 <TIM_Base_SetConfig+0xf8>
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	4a0c      	ldr	r2, [pc, #48]	; (8014520 <TIM_Base_SetConfig+0x124>)
 80144f0:	4293      	cmp	r3, r2
 80144f2:	d103      	bne.n	80144fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80144f4:	683b      	ldr	r3, [r7, #0]
 80144f6:	691a      	ldr	r2, [r3, #16]
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	2201      	movs	r2, #1
 8014500:	615a      	str	r2, [r3, #20]
}
 8014502:	bf00      	nop
 8014504:	3714      	adds	r7, #20
 8014506:	46bd      	mov	sp, r7
 8014508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450c:	4770      	bx	lr
 801450e:	bf00      	nop
 8014510:	40010000 	.word	0x40010000
 8014514:	40000400 	.word	0x40000400
 8014518:	40000800 	.word	0x40000800
 801451c:	40000c00 	.word	0x40000c00
 8014520:	40010400 	.word	0x40010400
 8014524:	40014000 	.word	0x40014000
 8014528:	40014400 	.word	0x40014400
 801452c:	40014800 	.word	0x40014800
 8014530:	40001800 	.word	0x40001800
 8014534:	40001c00 	.word	0x40001c00
 8014538:	40002000 	.word	0x40002000

0801453c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801453c:	b480      	push	{r7}
 801453e:	b087      	sub	sp, #28
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
 8014544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	6a1b      	ldr	r3, [r3, #32]
 801454a:	f023 0201 	bic.w	r2, r3, #1
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	6a1b      	ldr	r3, [r3, #32]
 8014556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	699b      	ldr	r3, [r3, #24]
 8014562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801456a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	f023 0303 	bic.w	r3, r3, #3
 8014572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	68fa      	ldr	r2, [r7, #12]
 801457a:	4313      	orrs	r3, r2
 801457c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	f023 0302 	bic.w	r3, r3, #2
 8014584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014586:	683b      	ldr	r3, [r7, #0]
 8014588:	689b      	ldr	r3, [r3, #8]
 801458a:	697a      	ldr	r2, [r7, #20]
 801458c:	4313      	orrs	r3, r2
 801458e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	4a20      	ldr	r2, [pc, #128]	; (8014614 <TIM_OC1_SetConfig+0xd8>)
 8014594:	4293      	cmp	r3, r2
 8014596:	d003      	beq.n	80145a0 <TIM_OC1_SetConfig+0x64>
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	4a1f      	ldr	r2, [pc, #124]	; (8014618 <TIM_OC1_SetConfig+0xdc>)
 801459c:	4293      	cmp	r3, r2
 801459e:	d10c      	bne.n	80145ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80145a0:	697b      	ldr	r3, [r7, #20]
 80145a2:	f023 0308 	bic.w	r3, r3, #8
 80145a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	68db      	ldr	r3, [r3, #12]
 80145ac:	697a      	ldr	r2, [r7, #20]
 80145ae:	4313      	orrs	r3, r2
 80145b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80145b2:	697b      	ldr	r3, [r7, #20]
 80145b4:	f023 0304 	bic.w	r3, r3, #4
 80145b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	4a15      	ldr	r2, [pc, #84]	; (8014614 <TIM_OC1_SetConfig+0xd8>)
 80145be:	4293      	cmp	r3, r2
 80145c0:	d003      	beq.n	80145ca <TIM_OC1_SetConfig+0x8e>
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	4a14      	ldr	r2, [pc, #80]	; (8014618 <TIM_OC1_SetConfig+0xdc>)
 80145c6:	4293      	cmp	r3, r2
 80145c8:	d111      	bne.n	80145ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80145ca:	693b      	ldr	r3, [r7, #16]
 80145cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80145d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80145d2:	693b      	ldr	r3, [r7, #16]
 80145d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80145d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80145da:	683b      	ldr	r3, [r7, #0]
 80145dc:	695b      	ldr	r3, [r3, #20]
 80145de:	693a      	ldr	r2, [r7, #16]
 80145e0:	4313      	orrs	r3, r2
 80145e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80145e4:	683b      	ldr	r3, [r7, #0]
 80145e6:	699b      	ldr	r3, [r3, #24]
 80145e8:	693a      	ldr	r2, [r7, #16]
 80145ea:	4313      	orrs	r3, r2
 80145ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	693a      	ldr	r2, [r7, #16]
 80145f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	68fa      	ldr	r2, [r7, #12]
 80145f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80145fa:	683b      	ldr	r3, [r7, #0]
 80145fc:	685a      	ldr	r2, [r3, #4]
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	697a      	ldr	r2, [r7, #20]
 8014606:	621a      	str	r2, [r3, #32]
}
 8014608:	bf00      	nop
 801460a:	371c      	adds	r7, #28
 801460c:	46bd      	mov	sp, r7
 801460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014612:	4770      	bx	lr
 8014614:	40010000 	.word	0x40010000
 8014618:	40010400 	.word	0x40010400

0801461c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801461c:	b480      	push	{r7}
 801461e:	b087      	sub	sp, #28
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
 8014624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	6a1b      	ldr	r3, [r3, #32]
 801462a:	f023 0210 	bic.w	r2, r3, #16
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	6a1b      	ldr	r3, [r3, #32]
 8014636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	685b      	ldr	r3, [r3, #4]
 801463c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	699b      	ldr	r3, [r3, #24]
 8014642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801464a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	021b      	lsls	r3, r3, #8
 801465a:	68fa      	ldr	r2, [r7, #12]
 801465c:	4313      	orrs	r3, r2
 801465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014660:	697b      	ldr	r3, [r7, #20]
 8014662:	f023 0320 	bic.w	r3, r3, #32
 8014666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	689b      	ldr	r3, [r3, #8]
 801466c:	011b      	lsls	r3, r3, #4
 801466e:	697a      	ldr	r2, [r7, #20]
 8014670:	4313      	orrs	r3, r2
 8014672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	4a22      	ldr	r2, [pc, #136]	; (8014700 <TIM_OC2_SetConfig+0xe4>)
 8014678:	4293      	cmp	r3, r2
 801467a:	d003      	beq.n	8014684 <TIM_OC2_SetConfig+0x68>
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	4a21      	ldr	r2, [pc, #132]	; (8014704 <TIM_OC2_SetConfig+0xe8>)
 8014680:	4293      	cmp	r3, r2
 8014682:	d10d      	bne.n	80146a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014684:	697b      	ldr	r3, [r7, #20]
 8014686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801468a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	68db      	ldr	r3, [r3, #12]
 8014690:	011b      	lsls	r3, r3, #4
 8014692:	697a      	ldr	r2, [r7, #20]
 8014694:	4313      	orrs	r3, r2
 8014696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014698:	697b      	ldr	r3, [r7, #20]
 801469a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801469e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	4a17      	ldr	r2, [pc, #92]	; (8014700 <TIM_OC2_SetConfig+0xe4>)
 80146a4:	4293      	cmp	r3, r2
 80146a6:	d003      	beq.n	80146b0 <TIM_OC2_SetConfig+0x94>
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	4a16      	ldr	r2, [pc, #88]	; (8014704 <TIM_OC2_SetConfig+0xe8>)
 80146ac:	4293      	cmp	r3, r2
 80146ae:	d113      	bne.n	80146d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80146b0:	693b      	ldr	r3, [r7, #16]
 80146b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80146b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80146b8:	693b      	ldr	r3, [r7, #16]
 80146ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80146be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80146c0:	683b      	ldr	r3, [r7, #0]
 80146c2:	695b      	ldr	r3, [r3, #20]
 80146c4:	009b      	lsls	r3, r3, #2
 80146c6:	693a      	ldr	r2, [r7, #16]
 80146c8:	4313      	orrs	r3, r2
 80146ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	699b      	ldr	r3, [r3, #24]
 80146d0:	009b      	lsls	r3, r3, #2
 80146d2:	693a      	ldr	r2, [r7, #16]
 80146d4:	4313      	orrs	r3, r2
 80146d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	693a      	ldr	r2, [r7, #16]
 80146dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	68fa      	ldr	r2, [r7, #12]
 80146e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80146e4:	683b      	ldr	r3, [r7, #0]
 80146e6:	685a      	ldr	r2, [r3, #4]
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	697a      	ldr	r2, [r7, #20]
 80146f0:	621a      	str	r2, [r3, #32]
}
 80146f2:	bf00      	nop
 80146f4:	371c      	adds	r7, #28
 80146f6:	46bd      	mov	sp, r7
 80146f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fc:	4770      	bx	lr
 80146fe:	bf00      	nop
 8014700:	40010000 	.word	0x40010000
 8014704:	40010400 	.word	0x40010400

08014708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014708:	b480      	push	{r7}
 801470a:	b087      	sub	sp, #28
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
 8014710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	6a1b      	ldr	r3, [r3, #32]
 8014716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	6a1b      	ldr	r3, [r3, #32]
 8014722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	685b      	ldr	r3, [r3, #4]
 8014728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	69db      	ldr	r3, [r3, #28]
 801472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	f023 0303 	bic.w	r3, r3, #3
 801473e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	68fa      	ldr	r2, [r7, #12]
 8014746:	4313      	orrs	r3, r2
 8014748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801474a:	697b      	ldr	r3, [r7, #20]
 801474c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	689b      	ldr	r3, [r3, #8]
 8014756:	021b      	lsls	r3, r3, #8
 8014758:	697a      	ldr	r2, [r7, #20]
 801475a:	4313      	orrs	r3, r2
 801475c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	4a21      	ldr	r2, [pc, #132]	; (80147e8 <TIM_OC3_SetConfig+0xe0>)
 8014762:	4293      	cmp	r3, r2
 8014764:	d003      	beq.n	801476e <TIM_OC3_SetConfig+0x66>
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	4a20      	ldr	r2, [pc, #128]	; (80147ec <TIM_OC3_SetConfig+0xe4>)
 801476a:	4293      	cmp	r3, r2
 801476c:	d10d      	bne.n	801478a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801476e:	697b      	ldr	r3, [r7, #20]
 8014770:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014776:	683b      	ldr	r3, [r7, #0]
 8014778:	68db      	ldr	r3, [r3, #12]
 801477a:	021b      	lsls	r3, r3, #8
 801477c:	697a      	ldr	r2, [r7, #20]
 801477e:	4313      	orrs	r3, r2
 8014780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014782:	697b      	ldr	r3, [r7, #20]
 8014784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	4a16      	ldr	r2, [pc, #88]	; (80147e8 <TIM_OC3_SetConfig+0xe0>)
 801478e:	4293      	cmp	r3, r2
 8014790:	d003      	beq.n	801479a <TIM_OC3_SetConfig+0x92>
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	4a15      	ldr	r2, [pc, #84]	; (80147ec <TIM_OC3_SetConfig+0xe4>)
 8014796:	4293      	cmp	r3, r2
 8014798:	d113      	bne.n	80147c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801479a:	693b      	ldr	r3, [r7, #16]
 801479c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80147a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80147a2:	693b      	ldr	r3, [r7, #16]
 80147a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80147a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	695b      	ldr	r3, [r3, #20]
 80147ae:	011b      	lsls	r3, r3, #4
 80147b0:	693a      	ldr	r2, [r7, #16]
 80147b2:	4313      	orrs	r3, r2
 80147b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	699b      	ldr	r3, [r3, #24]
 80147ba:	011b      	lsls	r3, r3, #4
 80147bc:	693a      	ldr	r2, [r7, #16]
 80147be:	4313      	orrs	r3, r2
 80147c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	693a      	ldr	r2, [r7, #16]
 80147c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	68fa      	ldr	r2, [r7, #12]
 80147cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80147ce:	683b      	ldr	r3, [r7, #0]
 80147d0:	685a      	ldr	r2, [r3, #4]
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	697a      	ldr	r2, [r7, #20]
 80147da:	621a      	str	r2, [r3, #32]
}
 80147dc:	bf00      	nop
 80147de:	371c      	adds	r7, #28
 80147e0:	46bd      	mov	sp, r7
 80147e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e6:	4770      	bx	lr
 80147e8:	40010000 	.word	0x40010000
 80147ec:	40010400 	.word	0x40010400

080147f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80147f0:	b480      	push	{r7}
 80147f2:	b087      	sub	sp, #28
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
 80147f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	6a1b      	ldr	r3, [r3, #32]
 80147fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	6a1b      	ldr	r3, [r3, #32]
 801480a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	685b      	ldr	r3, [r3, #4]
 8014810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	69db      	ldr	r3, [r3, #28]
 8014816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801481e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014828:	683b      	ldr	r3, [r7, #0]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	021b      	lsls	r3, r3, #8
 801482e:	68fa      	ldr	r2, [r7, #12]
 8014830:	4313      	orrs	r3, r2
 8014832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014834:	693b      	ldr	r3, [r7, #16]
 8014836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801483a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	689b      	ldr	r3, [r3, #8]
 8014840:	031b      	lsls	r3, r3, #12
 8014842:	693a      	ldr	r2, [r7, #16]
 8014844:	4313      	orrs	r3, r2
 8014846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	4a12      	ldr	r2, [pc, #72]	; (8014894 <TIM_OC4_SetConfig+0xa4>)
 801484c:	4293      	cmp	r3, r2
 801484e:	d003      	beq.n	8014858 <TIM_OC4_SetConfig+0x68>
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	4a11      	ldr	r2, [pc, #68]	; (8014898 <TIM_OC4_SetConfig+0xa8>)
 8014854:	4293      	cmp	r3, r2
 8014856:	d109      	bne.n	801486c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801485e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	695b      	ldr	r3, [r3, #20]
 8014864:	019b      	lsls	r3, r3, #6
 8014866:	697a      	ldr	r2, [r7, #20]
 8014868:	4313      	orrs	r3, r2
 801486a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	697a      	ldr	r2, [r7, #20]
 8014870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	68fa      	ldr	r2, [r7, #12]
 8014876:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014878:	683b      	ldr	r3, [r7, #0]
 801487a:	685a      	ldr	r2, [r3, #4]
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	693a      	ldr	r2, [r7, #16]
 8014884:	621a      	str	r2, [r3, #32]
}
 8014886:	bf00      	nop
 8014888:	371c      	adds	r7, #28
 801488a:	46bd      	mov	sp, r7
 801488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014890:	4770      	bx	lr
 8014892:	bf00      	nop
 8014894:	40010000 	.word	0x40010000
 8014898:	40010400 	.word	0x40010400

0801489c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801489c:	b480      	push	{r7}
 801489e:	b087      	sub	sp, #28
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	60f8      	str	r0, [r7, #12]
 80148a4:	60b9      	str	r1, [r7, #8]
 80148a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	6a1b      	ldr	r3, [r3, #32]
 80148ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	6a1b      	ldr	r3, [r3, #32]
 80148b2:	f023 0201 	bic.w	r2, r3, #1
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	699b      	ldr	r3, [r3, #24]
 80148be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80148c0:	693b      	ldr	r3, [r7, #16]
 80148c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80148c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	011b      	lsls	r3, r3, #4
 80148cc:	693a      	ldr	r2, [r7, #16]
 80148ce:	4313      	orrs	r3, r2
 80148d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80148d2:	697b      	ldr	r3, [r7, #20]
 80148d4:	f023 030a 	bic.w	r3, r3, #10
 80148d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80148da:	697a      	ldr	r2, [r7, #20]
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	4313      	orrs	r3, r2
 80148e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	693a      	ldr	r2, [r7, #16]
 80148e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	697a      	ldr	r2, [r7, #20]
 80148ec:	621a      	str	r2, [r3, #32]
}
 80148ee:	bf00      	nop
 80148f0:	371c      	adds	r7, #28
 80148f2:	46bd      	mov	sp, r7
 80148f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f8:	4770      	bx	lr

080148fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80148fa:	b480      	push	{r7}
 80148fc:	b087      	sub	sp, #28
 80148fe:	af00      	add	r7, sp, #0
 8014900:	60f8      	str	r0, [r7, #12]
 8014902:	60b9      	str	r1, [r7, #8]
 8014904:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	6a1b      	ldr	r3, [r3, #32]
 801490a:	f023 0210 	bic.w	r2, r3, #16
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	699b      	ldr	r3, [r3, #24]
 8014916:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	6a1b      	ldr	r3, [r3, #32]
 801491c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801491e:	697b      	ldr	r3, [r7, #20]
 8014920:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014924:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	031b      	lsls	r3, r3, #12
 801492a:	697a      	ldr	r2, [r7, #20]
 801492c:	4313      	orrs	r3, r2
 801492e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014930:	693b      	ldr	r3, [r7, #16]
 8014932:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014936:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014938:	68bb      	ldr	r3, [r7, #8]
 801493a:	011b      	lsls	r3, r3, #4
 801493c:	693a      	ldr	r2, [r7, #16]
 801493e:	4313      	orrs	r3, r2
 8014940:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	697a      	ldr	r2, [r7, #20]
 8014946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	693a      	ldr	r2, [r7, #16]
 801494c:	621a      	str	r2, [r3, #32]
}
 801494e:	bf00      	nop
 8014950:	371c      	adds	r7, #28
 8014952:	46bd      	mov	sp, r7
 8014954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014958:	4770      	bx	lr

0801495a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801495a:	b480      	push	{r7}
 801495c:	b085      	sub	sp, #20
 801495e:	af00      	add	r7, sp, #0
 8014960:	6078      	str	r0, [r7, #4]
 8014962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	689b      	ldr	r3, [r3, #8]
 8014968:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014972:	683a      	ldr	r2, [r7, #0]
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	4313      	orrs	r3, r2
 8014978:	f043 0307 	orr.w	r3, r3, #7
 801497c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	68fa      	ldr	r2, [r7, #12]
 8014982:	609a      	str	r2, [r3, #8]
}
 8014984:	bf00      	nop
 8014986:	3714      	adds	r7, #20
 8014988:	46bd      	mov	sp, r7
 801498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498e:	4770      	bx	lr

08014990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014990:	b480      	push	{r7}
 8014992:	b087      	sub	sp, #28
 8014994:	af00      	add	r7, sp, #0
 8014996:	60f8      	str	r0, [r7, #12]
 8014998:	60b9      	str	r1, [r7, #8]
 801499a:	607a      	str	r2, [r7, #4]
 801499c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	689b      	ldr	r3, [r3, #8]
 80149a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80149a4:	697b      	ldr	r3, [r7, #20]
 80149a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80149aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80149ac:	683b      	ldr	r3, [r7, #0]
 80149ae:	021a      	lsls	r2, r3, #8
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	431a      	orrs	r2, r3
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	4313      	orrs	r3, r2
 80149b8:	697a      	ldr	r2, [r7, #20]
 80149ba:	4313      	orrs	r3, r2
 80149bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	697a      	ldr	r2, [r7, #20]
 80149c2:	609a      	str	r2, [r3, #8]
}
 80149c4:	bf00      	nop
 80149c6:	371c      	adds	r7, #28
 80149c8:	46bd      	mov	sp, r7
 80149ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ce:	4770      	bx	lr

080149d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80149d0:	b480      	push	{r7}
 80149d2:	b087      	sub	sp, #28
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	60f8      	str	r0, [r7, #12]
 80149d8:	60b9      	str	r1, [r7, #8]
 80149da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80149dc:	68bb      	ldr	r3, [r7, #8]
 80149de:	f003 031f 	and.w	r3, r3, #31
 80149e2:	2201      	movs	r2, #1
 80149e4:	fa02 f303 	lsl.w	r3, r2, r3
 80149e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	6a1a      	ldr	r2, [r3, #32]
 80149ee:	697b      	ldr	r3, [r7, #20]
 80149f0:	43db      	mvns	r3, r3
 80149f2:	401a      	ands	r2, r3
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	6a1a      	ldr	r2, [r3, #32]
 80149fc:	68bb      	ldr	r3, [r7, #8]
 80149fe:	f003 031f 	and.w	r3, r3, #31
 8014a02:	6879      	ldr	r1, [r7, #4]
 8014a04:	fa01 f303 	lsl.w	r3, r1, r3
 8014a08:	431a      	orrs	r2, r3
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	621a      	str	r2, [r3, #32]
}
 8014a0e:	bf00      	nop
 8014a10:	371c      	adds	r7, #28
 8014a12:	46bd      	mov	sp, r7
 8014a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a18:	4770      	bx	lr

08014a1a <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014a1a:	b580      	push	{r7, lr}
 8014a1c:	b084      	sub	sp, #16
 8014a1e:	af00      	add	r7, sp, #0
 8014a20:	6078      	str	r0, [r7, #4]
 8014a22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	2b04      	cmp	r3, #4
 8014a28:	d00d      	beq.n	8014a46 <HAL_TIMEx_OCN_Start_IT+0x2c>
 8014a2a:	2b08      	cmp	r3, #8
 8014a2c:	d014      	beq.n	8014a58 <HAL_TIMEx_OCN_Start_IT+0x3e>
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d000      	beq.n	8014a34 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8014a32:	e01a      	b.n	8014a6a <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	68da      	ldr	r2, [r3, #12]
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	f042 0202 	orr.w	r2, r2, #2
 8014a42:	60da      	str	r2, [r3, #12]
      break;
 8014a44:	e011      	b.n	8014a6a <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	68da      	ldr	r2, [r3, #12]
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	f042 0204 	orr.w	r2, r2, #4
 8014a54:	60da      	str	r2, [r3, #12]
      break;
 8014a56:	e008      	b.n	8014a6a <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	68da      	ldr	r2, [r3, #12]
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	f042 0208 	orr.w	r2, r2, #8
 8014a66:	60da      	str	r2, [r3, #12]
      break;
 8014a68:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	68da      	ldr	r2, [r3, #12]
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014a78:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	2204      	movs	r2, #4
 8014a80:	6839      	ldr	r1, [r7, #0]
 8014a82:	4618      	mov	r0, r3
 8014a84:	f000 f976 	bl	8014d74 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014a96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	689b      	ldr	r3, [r3, #8]
 8014a9e:	f003 0307 	and.w	r3, r3, #7
 8014aa2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	2b06      	cmp	r3, #6
 8014aa8:	d007      	beq.n	8014aba <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	681a      	ldr	r2, [r3, #0]
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	f042 0201 	orr.w	r2, r2, #1
 8014ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014aba:	2300      	movs	r3, #0
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	3710      	adds	r7, #16
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}

08014ac4 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b084      	sub	sp, #16
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	2b04      	cmp	r3, #4
 8014ad2:	d00d      	beq.n	8014af0 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 8014ad4:	2b08      	cmp	r3, #8
 8014ad6:	d014      	beq.n	8014b02 <HAL_TIMEx_OCN_Stop_IT+0x3e>
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d000      	beq.n	8014ade <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8014adc:	e01a      	b.n	8014b14 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	68da      	ldr	r2, [r3, #12]
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	f022 0202 	bic.w	r2, r2, #2
 8014aec:	60da      	str	r2, [r3, #12]
      break;
 8014aee:	e011      	b.n	8014b14 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	68da      	ldr	r2, [r3, #12]
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	f022 0204 	bic.w	r2, r2, #4
 8014afe:	60da      	str	r2, [r3, #12]
      break;
 8014b00:	e008      	b.n	8014b14 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	68da      	ldr	r2, [r3, #12]
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	f022 0208 	bic.w	r2, r2, #8
 8014b10:	60da      	str	r2, [r3, #12]
      break;
 8014b12:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	2200      	movs	r2, #0
 8014b1a:	6839      	ldr	r1, [r7, #0]
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f000 f929 	bl	8014d74 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	6a1b      	ldr	r3, [r3, #32]
 8014b28:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8014b2a:	68fa      	ldr	r2, [r7, #12]
 8014b2c:	f240 4344 	movw	r3, #1092	; 0x444
 8014b30:	4013      	ands	r3, r2
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d107      	bne.n	8014b46 <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	68da      	ldr	r2, [r3, #12]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014b44:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	6a1a      	ldr	r2, [r3, #32]
 8014b4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8014b50:	4013      	ands	r3, r2
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d10f      	bne.n	8014b76 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	6a1a      	ldr	r2, [r3, #32]
 8014b5c:	f240 4344 	movw	r3, #1092	; 0x444
 8014b60:	4013      	ands	r3, r2
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d107      	bne.n	8014b76 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014b74:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	6a1a      	ldr	r2, [r3, #32]
 8014b7c:	f241 1311 	movw	r3, #4369	; 0x1111
 8014b80:	4013      	ands	r3, r2
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d10f      	bne.n	8014ba6 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	6a1a      	ldr	r2, [r3, #32]
 8014b8c:	f240 4344 	movw	r3, #1092	; 0x444
 8014b90:	4013      	ands	r3, r2
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d107      	bne.n	8014ba6 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	681a      	ldr	r2, [r3, #0]
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	f022 0201 	bic.w	r2, r2, #1
 8014ba4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8014ba6:	2300      	movs	r3, #0
}
 8014ba8:	4618      	mov	r0, r3
 8014baa:	3710      	adds	r7, #16
 8014bac:	46bd      	mov	sp, r7
 8014bae:	bd80      	pop	{r7, pc}

08014bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014bb0:	b480      	push	{r7}
 8014bb2:	b085      	sub	sp, #20
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
 8014bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014bc0:	2b01      	cmp	r3, #1
 8014bc2:	d101      	bne.n	8014bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014bc4:	2302      	movs	r3, #2
 8014bc6:	e05a      	b.n	8014c7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2201      	movs	r2, #1
 8014bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	2202      	movs	r2, #2
 8014bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	685b      	ldr	r3, [r3, #4]
 8014bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	689b      	ldr	r3, [r3, #8]
 8014be6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014bee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014bf0:	683b      	ldr	r3, [r7, #0]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	68fa      	ldr	r2, [r7, #12]
 8014bf6:	4313      	orrs	r3, r2
 8014bf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	68fa      	ldr	r2, [r7, #12]
 8014c00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	4a21      	ldr	r2, [pc, #132]	; (8014c8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8014c08:	4293      	cmp	r3, r2
 8014c0a:	d022      	beq.n	8014c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014c14:	d01d      	beq.n	8014c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	4a1d      	ldr	r2, [pc, #116]	; (8014c90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8014c1c:	4293      	cmp	r3, r2
 8014c1e:	d018      	beq.n	8014c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	4a1b      	ldr	r2, [pc, #108]	; (8014c94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8014c26:	4293      	cmp	r3, r2
 8014c28:	d013      	beq.n	8014c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	4a1a      	ldr	r2, [pc, #104]	; (8014c98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8014c30:	4293      	cmp	r3, r2
 8014c32:	d00e      	beq.n	8014c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	4a18      	ldr	r2, [pc, #96]	; (8014c9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8014c3a:	4293      	cmp	r3, r2
 8014c3c:	d009      	beq.n	8014c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	4a17      	ldr	r2, [pc, #92]	; (8014ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8014c44:	4293      	cmp	r3, r2
 8014c46:	d004      	beq.n	8014c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	4a15      	ldr	r2, [pc, #84]	; (8014ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8014c4e:	4293      	cmp	r3, r2
 8014c50:	d10c      	bne.n	8014c6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014c52:	68bb      	ldr	r3, [r7, #8]
 8014c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014c58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014c5a:	683b      	ldr	r3, [r7, #0]
 8014c5c:	685b      	ldr	r3, [r3, #4]
 8014c5e:	68ba      	ldr	r2, [r7, #8]
 8014c60:	4313      	orrs	r3, r2
 8014c62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	68ba      	ldr	r2, [r7, #8]
 8014c6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	2201      	movs	r2, #1
 8014c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	2200      	movs	r2, #0
 8014c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014c7c:	2300      	movs	r3, #0
}
 8014c7e:	4618      	mov	r0, r3
 8014c80:	3714      	adds	r7, #20
 8014c82:	46bd      	mov	sp, r7
 8014c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c88:	4770      	bx	lr
 8014c8a:	bf00      	nop
 8014c8c:	40010000 	.word	0x40010000
 8014c90:	40000400 	.word	0x40000400
 8014c94:	40000800 	.word	0x40000800
 8014c98:	40000c00 	.word	0x40000c00
 8014c9c:	40010400 	.word	0x40010400
 8014ca0:	40014000 	.word	0x40014000
 8014ca4:	40001800 	.word	0x40001800

08014ca8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8014ca8:	b480      	push	{r7}
 8014caa:	b085      	sub	sp, #20
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
 8014cb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014cbc:	2b01      	cmp	r3, #1
 8014cbe:	d101      	bne.n	8014cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8014cc0:	2302      	movs	r3, #2
 8014cc2:	e03d      	b.n	8014d40 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2201      	movs	r2, #1
 8014cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8014cd2:	683b      	ldr	r3, [r7, #0]
 8014cd4:	68db      	ldr	r3, [r3, #12]
 8014cd6:	4313      	orrs	r3, r2
 8014cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	689b      	ldr	r3, [r3, #8]
 8014ce4:	4313      	orrs	r3, r2
 8014ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	685b      	ldr	r3, [r3, #4]
 8014cf2:	4313      	orrs	r3, r2
 8014cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8014cfc:	683b      	ldr	r3, [r7, #0]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	4313      	orrs	r3, r2
 8014d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014d0a:	683b      	ldr	r3, [r7, #0]
 8014d0c:	691b      	ldr	r3, [r3, #16]
 8014d0e:	4313      	orrs	r3, r2
 8014d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8014d18:	683b      	ldr	r3, [r7, #0]
 8014d1a:	695b      	ldr	r3, [r3, #20]
 8014d1c:	4313      	orrs	r3, r2
 8014d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	69db      	ldr	r3, [r3, #28]
 8014d2a:	4313      	orrs	r3, r2
 8014d2c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	68fa      	ldr	r2, [r7, #12]
 8014d34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	2200      	movs	r2, #0
 8014d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014d3e:	2300      	movs	r3, #0
}
 8014d40:	4618      	mov	r0, r3
 8014d42:	3714      	adds	r7, #20
 8014d44:	46bd      	mov	sp, r7
 8014d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4a:	4770      	bx	lr

08014d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014d4c:	b480      	push	{r7}
 8014d4e:	b083      	sub	sp, #12
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014d54:	bf00      	nop
 8014d56:	370c      	adds	r7, #12
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5e:	4770      	bx	lr

08014d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014d60:	b480      	push	{r7}
 8014d62:	b083      	sub	sp, #12
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014d68:	bf00      	nop
 8014d6a:	370c      	adds	r7, #12
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d72:	4770      	bx	lr

08014d74 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8014d74:	b480      	push	{r7}
 8014d76:	b087      	sub	sp, #28
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	60f8      	str	r0, [r7, #12]
 8014d7c:	60b9      	str	r1, [r7, #8]
 8014d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014d80:	68bb      	ldr	r3, [r7, #8]
 8014d82:	f003 031f 	and.w	r3, r3, #31
 8014d86:	2204      	movs	r2, #4
 8014d88:	fa02 f303 	lsl.w	r3, r2, r3
 8014d8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	6a1a      	ldr	r2, [r3, #32]
 8014d92:	697b      	ldr	r3, [r7, #20]
 8014d94:	43db      	mvns	r3, r3
 8014d96:	401a      	ands	r2, r3
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	6a1a      	ldr	r2, [r3, #32]
 8014da0:	68bb      	ldr	r3, [r7, #8]
 8014da2:	f003 031f 	and.w	r3, r3, #31
 8014da6:	6879      	ldr	r1, [r7, #4]
 8014da8:	fa01 f303 	lsl.w	r3, r1, r3
 8014dac:	431a      	orrs	r2, r3
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	621a      	str	r2, [r3, #32]
}
 8014db2:	bf00      	nop
 8014db4:	371c      	adds	r7, #28
 8014db6:	46bd      	mov	sp, r7
 8014db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dbc:	4770      	bx	lr

08014dbe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014dbe:	b580      	push	{r7, lr}
 8014dc0:	b082      	sub	sp, #8
 8014dc2:	af00      	add	r7, sp, #0
 8014dc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d101      	bne.n	8014dd0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014dcc:	2301      	movs	r3, #1
 8014dce:	e03f      	b.n	8014e50 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014dd6:	b2db      	uxtb	r3, r3
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d106      	bne.n	8014dea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	2200      	movs	r2, #0
 8014de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014de4:	6878      	ldr	r0, [r7, #4]
 8014de6:	f7fb f8b1 	bl	800ff4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	2224      	movs	r2, #36	; 0x24
 8014dee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	68da      	ldr	r2, [r3, #12]
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014e00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014e02:	6878      	ldr	r0, [r7, #4]
 8014e04:	f000 f90c 	bl	8015020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	691a      	ldr	r2, [r3, #16]
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014e16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	695a      	ldr	r2, [r3, #20]
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014e26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	68da      	ldr	r2, [r3, #12]
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014e36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	2220      	movs	r2, #32
 8014e42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	2220      	movs	r2, #32
 8014e4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8014e4e:	2300      	movs	r3, #0
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3708      	adds	r7, #8
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}

08014e58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b088      	sub	sp, #32
 8014e5c:	af02      	add	r7, sp, #8
 8014e5e:	60f8      	str	r0, [r7, #12]
 8014e60:	60b9      	str	r1, [r7, #8]
 8014e62:	603b      	str	r3, [r7, #0]
 8014e64:	4613      	mov	r3, r2
 8014e66:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8014e68:	2300      	movs	r3, #0
 8014e6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014e72:	b2db      	uxtb	r3, r3
 8014e74:	2b20      	cmp	r3, #32
 8014e76:	f040 8083 	bne.w	8014f80 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8014e7a:	68bb      	ldr	r3, [r7, #8]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d002      	beq.n	8014e86 <HAL_UART_Transmit+0x2e>
 8014e80:	88fb      	ldrh	r3, [r7, #6]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d101      	bne.n	8014e8a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8014e86:	2301      	movs	r3, #1
 8014e88:	e07b      	b.n	8014f82 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014e90:	2b01      	cmp	r3, #1
 8014e92:	d101      	bne.n	8014e98 <HAL_UART_Transmit+0x40>
 8014e94:	2302      	movs	r3, #2
 8014e96:	e074      	b.n	8014f82 <HAL_UART_Transmit+0x12a>
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	2201      	movs	r2, #1
 8014e9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	2221      	movs	r2, #33	; 0x21
 8014eaa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8014eae:	f7fb fa81 	bl	80103b4 <HAL_GetTick>
 8014eb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	88fa      	ldrh	r2, [r7, #6]
 8014eb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	88fa      	ldrh	r2, [r7, #6]
 8014ebe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8014ec8:	e042      	b.n	8014f50 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014ece:	b29b      	uxth	r3, r3
 8014ed0:	3b01      	subs	r3, #1
 8014ed2:	b29a      	uxth	r2, r3
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	689b      	ldr	r3, [r3, #8]
 8014edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014ee0:	d122      	bne.n	8014f28 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	9300      	str	r3, [sp, #0]
 8014ee6:	697b      	ldr	r3, [r7, #20]
 8014ee8:	2200      	movs	r2, #0
 8014eea:	2180      	movs	r1, #128	; 0x80
 8014eec:	68f8      	ldr	r0, [r7, #12]
 8014eee:	f000 f84c 	bl	8014f8a <UART_WaitOnFlagUntilTimeout>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d001      	beq.n	8014efc <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8014ef8:	2303      	movs	r3, #3
 8014efa:	e042      	b.n	8014f82 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8014efc:	68bb      	ldr	r3, [r7, #8]
 8014efe:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8014f00:	693b      	ldr	r3, [r7, #16]
 8014f02:	881b      	ldrh	r3, [r3, #0]
 8014f04:	461a      	mov	r2, r3
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014f0e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	691b      	ldr	r3, [r3, #16]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d103      	bne.n	8014f20 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8014f18:	68bb      	ldr	r3, [r7, #8]
 8014f1a:	3302      	adds	r3, #2
 8014f1c:	60bb      	str	r3, [r7, #8]
 8014f1e:	e017      	b.n	8014f50 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	3301      	adds	r3, #1
 8014f24:	60bb      	str	r3, [r7, #8]
 8014f26:	e013      	b.n	8014f50 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014f28:	683b      	ldr	r3, [r7, #0]
 8014f2a:	9300      	str	r3, [sp, #0]
 8014f2c:	697b      	ldr	r3, [r7, #20]
 8014f2e:	2200      	movs	r2, #0
 8014f30:	2180      	movs	r1, #128	; 0x80
 8014f32:	68f8      	ldr	r0, [r7, #12]
 8014f34:	f000 f829 	bl	8014f8a <UART_WaitOnFlagUntilTimeout>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d001      	beq.n	8014f42 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8014f3e:	2303      	movs	r3, #3
 8014f40:	e01f      	b.n	8014f82 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8014f42:	68bb      	ldr	r3, [r7, #8]
 8014f44:	1c5a      	adds	r2, r3, #1
 8014f46:	60ba      	str	r2, [r7, #8]
 8014f48:	781a      	ldrb	r2, [r3, #0]
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014f54:	b29b      	uxth	r3, r3
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d1b7      	bne.n	8014eca <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014f5a:	683b      	ldr	r3, [r7, #0]
 8014f5c:	9300      	str	r3, [sp, #0]
 8014f5e:	697b      	ldr	r3, [r7, #20]
 8014f60:	2200      	movs	r2, #0
 8014f62:	2140      	movs	r1, #64	; 0x40
 8014f64:	68f8      	ldr	r0, [r7, #12]
 8014f66:	f000 f810 	bl	8014f8a <UART_WaitOnFlagUntilTimeout>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d001      	beq.n	8014f74 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8014f70:	2303      	movs	r3, #3
 8014f72:	e006      	b.n	8014f82 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	2220      	movs	r2, #32
 8014f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	e000      	b.n	8014f82 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8014f80:	2302      	movs	r3, #2
  }
}
 8014f82:	4618      	mov	r0, r3
 8014f84:	3718      	adds	r7, #24
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bd80      	pop	{r7, pc}

08014f8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8014f8a:	b580      	push	{r7, lr}
 8014f8c:	b084      	sub	sp, #16
 8014f8e:	af00      	add	r7, sp, #0
 8014f90:	60f8      	str	r0, [r7, #12]
 8014f92:	60b9      	str	r1, [r7, #8]
 8014f94:	603b      	str	r3, [r7, #0]
 8014f96:	4613      	mov	r3, r2
 8014f98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014f9a:	e02c      	b.n	8014ff6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014f9c:	69bb      	ldr	r3, [r7, #24]
 8014f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fa2:	d028      	beq.n	8014ff6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8014fa4:	69bb      	ldr	r3, [r7, #24]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d007      	beq.n	8014fba <UART_WaitOnFlagUntilTimeout+0x30>
 8014faa:	f7fb fa03 	bl	80103b4 <HAL_GetTick>
 8014fae:	4602      	mov	r2, r0
 8014fb0:	683b      	ldr	r3, [r7, #0]
 8014fb2:	1ad3      	subs	r3, r2, r3
 8014fb4:	69ba      	ldr	r2, [r7, #24]
 8014fb6:	429a      	cmp	r2, r3
 8014fb8:	d21d      	bcs.n	8014ff6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	68da      	ldr	r2, [r3, #12]
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8014fc8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	695a      	ldr	r2, [r3, #20]
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	f022 0201 	bic.w	r2, r2, #1
 8014fd8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	2220      	movs	r2, #32
 8014fde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	2220      	movs	r2, #32
 8014fe6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	2200      	movs	r2, #0
 8014fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8014ff2:	2303      	movs	r3, #3
 8014ff4:	e00f      	b.n	8015016 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	681a      	ldr	r2, [r3, #0]
 8014ffc:	68bb      	ldr	r3, [r7, #8]
 8014ffe:	4013      	ands	r3, r2
 8015000:	68ba      	ldr	r2, [r7, #8]
 8015002:	429a      	cmp	r2, r3
 8015004:	bf0c      	ite	eq
 8015006:	2301      	moveq	r3, #1
 8015008:	2300      	movne	r3, #0
 801500a:	b2db      	uxtb	r3, r3
 801500c:	461a      	mov	r2, r3
 801500e:	79fb      	ldrb	r3, [r7, #7]
 8015010:	429a      	cmp	r2, r3
 8015012:	d0c3      	beq.n	8014f9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8015014:	2300      	movs	r3, #0
}
 8015016:	4618      	mov	r0, r3
 8015018:	3710      	adds	r7, #16
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}
	...

08015020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015024:	b085      	sub	sp, #20
 8015026:	af00      	add	r7, sp, #0
 8015028:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	691b      	ldr	r3, [r3, #16]
 8015030:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	68da      	ldr	r2, [r3, #12]
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	430a      	orrs	r2, r1
 801503e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	689a      	ldr	r2, [r3, #8]
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	691b      	ldr	r3, [r3, #16]
 8015048:	431a      	orrs	r2, r3
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	695b      	ldr	r3, [r3, #20]
 801504e:	431a      	orrs	r2, r3
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	69db      	ldr	r3, [r3, #28]
 8015054:	4313      	orrs	r3, r2
 8015056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	68db      	ldr	r3, [r3, #12]
 801505e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8015062:	f023 030c 	bic.w	r3, r3, #12
 8015066:	687a      	ldr	r2, [r7, #4]
 8015068:	6812      	ldr	r2, [r2, #0]
 801506a:	68f9      	ldr	r1, [r7, #12]
 801506c:	430b      	orrs	r3, r1
 801506e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	695b      	ldr	r3, [r3, #20]
 8015076:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	699a      	ldr	r2, [r3, #24]
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	430a      	orrs	r2, r1
 8015084:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	69db      	ldr	r3, [r3, #28]
 801508a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801508e:	f040 818b 	bne.w	80153a8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	4ac1      	ldr	r2, [pc, #772]	; (801539c <UART_SetConfig+0x37c>)
 8015098:	4293      	cmp	r3, r2
 801509a:	d005      	beq.n	80150a8 <UART_SetConfig+0x88>
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	4abf      	ldr	r2, [pc, #764]	; (80153a0 <UART_SetConfig+0x380>)
 80150a2:	4293      	cmp	r3, r2
 80150a4:	f040 80bd 	bne.w	8015222 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80150a8:	f7fd fdce 	bl	8012c48 <HAL_RCC_GetPCLK2Freq>
 80150ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80150ae:	68bb      	ldr	r3, [r7, #8]
 80150b0:	461d      	mov	r5, r3
 80150b2:	f04f 0600 	mov.w	r6, #0
 80150b6:	46a8      	mov	r8, r5
 80150b8:	46b1      	mov	r9, r6
 80150ba:	eb18 0308 	adds.w	r3, r8, r8
 80150be:	eb49 0409 	adc.w	r4, r9, r9
 80150c2:	4698      	mov	r8, r3
 80150c4:	46a1      	mov	r9, r4
 80150c6:	eb18 0805 	adds.w	r8, r8, r5
 80150ca:	eb49 0906 	adc.w	r9, r9, r6
 80150ce:	f04f 0100 	mov.w	r1, #0
 80150d2:	f04f 0200 	mov.w	r2, #0
 80150d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80150da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80150de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80150e2:	4688      	mov	r8, r1
 80150e4:	4691      	mov	r9, r2
 80150e6:	eb18 0005 	adds.w	r0, r8, r5
 80150ea:	eb49 0106 	adc.w	r1, r9, r6
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	685b      	ldr	r3, [r3, #4]
 80150f2:	461d      	mov	r5, r3
 80150f4:	f04f 0600 	mov.w	r6, #0
 80150f8:	196b      	adds	r3, r5, r5
 80150fa:	eb46 0406 	adc.w	r4, r6, r6
 80150fe:	461a      	mov	r2, r3
 8015100:	4623      	mov	r3, r4
 8015102:	f7f3 fcd9 	bl	8008ab8 <__aeabi_uldivmod>
 8015106:	4603      	mov	r3, r0
 8015108:	460c      	mov	r4, r1
 801510a:	461a      	mov	r2, r3
 801510c:	4ba5      	ldr	r3, [pc, #660]	; (80153a4 <UART_SetConfig+0x384>)
 801510e:	fba3 2302 	umull	r2, r3, r3, r2
 8015112:	095b      	lsrs	r3, r3, #5
 8015114:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015118:	68bb      	ldr	r3, [r7, #8]
 801511a:	461d      	mov	r5, r3
 801511c:	f04f 0600 	mov.w	r6, #0
 8015120:	46a9      	mov	r9, r5
 8015122:	46b2      	mov	sl, r6
 8015124:	eb19 0309 	adds.w	r3, r9, r9
 8015128:	eb4a 040a 	adc.w	r4, sl, sl
 801512c:	4699      	mov	r9, r3
 801512e:	46a2      	mov	sl, r4
 8015130:	eb19 0905 	adds.w	r9, r9, r5
 8015134:	eb4a 0a06 	adc.w	sl, sl, r6
 8015138:	f04f 0100 	mov.w	r1, #0
 801513c:	f04f 0200 	mov.w	r2, #0
 8015140:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015144:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015148:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801514c:	4689      	mov	r9, r1
 801514e:	4692      	mov	sl, r2
 8015150:	eb19 0005 	adds.w	r0, r9, r5
 8015154:	eb4a 0106 	adc.w	r1, sl, r6
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	685b      	ldr	r3, [r3, #4]
 801515c:	461d      	mov	r5, r3
 801515e:	f04f 0600 	mov.w	r6, #0
 8015162:	196b      	adds	r3, r5, r5
 8015164:	eb46 0406 	adc.w	r4, r6, r6
 8015168:	461a      	mov	r2, r3
 801516a:	4623      	mov	r3, r4
 801516c:	f7f3 fca4 	bl	8008ab8 <__aeabi_uldivmod>
 8015170:	4603      	mov	r3, r0
 8015172:	460c      	mov	r4, r1
 8015174:	461a      	mov	r2, r3
 8015176:	4b8b      	ldr	r3, [pc, #556]	; (80153a4 <UART_SetConfig+0x384>)
 8015178:	fba3 1302 	umull	r1, r3, r3, r2
 801517c:	095b      	lsrs	r3, r3, #5
 801517e:	2164      	movs	r1, #100	; 0x64
 8015180:	fb01 f303 	mul.w	r3, r1, r3
 8015184:	1ad3      	subs	r3, r2, r3
 8015186:	00db      	lsls	r3, r3, #3
 8015188:	3332      	adds	r3, #50	; 0x32
 801518a:	4a86      	ldr	r2, [pc, #536]	; (80153a4 <UART_SetConfig+0x384>)
 801518c:	fba2 2303 	umull	r2, r3, r2, r3
 8015190:	095b      	lsrs	r3, r3, #5
 8015192:	005b      	lsls	r3, r3, #1
 8015194:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015198:	4498      	add	r8, r3
 801519a:	68bb      	ldr	r3, [r7, #8]
 801519c:	461d      	mov	r5, r3
 801519e:	f04f 0600 	mov.w	r6, #0
 80151a2:	46a9      	mov	r9, r5
 80151a4:	46b2      	mov	sl, r6
 80151a6:	eb19 0309 	adds.w	r3, r9, r9
 80151aa:	eb4a 040a 	adc.w	r4, sl, sl
 80151ae:	4699      	mov	r9, r3
 80151b0:	46a2      	mov	sl, r4
 80151b2:	eb19 0905 	adds.w	r9, r9, r5
 80151b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80151ba:	f04f 0100 	mov.w	r1, #0
 80151be:	f04f 0200 	mov.w	r2, #0
 80151c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80151c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80151ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80151ce:	4689      	mov	r9, r1
 80151d0:	4692      	mov	sl, r2
 80151d2:	eb19 0005 	adds.w	r0, r9, r5
 80151d6:	eb4a 0106 	adc.w	r1, sl, r6
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	685b      	ldr	r3, [r3, #4]
 80151de:	461d      	mov	r5, r3
 80151e0:	f04f 0600 	mov.w	r6, #0
 80151e4:	196b      	adds	r3, r5, r5
 80151e6:	eb46 0406 	adc.w	r4, r6, r6
 80151ea:	461a      	mov	r2, r3
 80151ec:	4623      	mov	r3, r4
 80151ee:	f7f3 fc63 	bl	8008ab8 <__aeabi_uldivmod>
 80151f2:	4603      	mov	r3, r0
 80151f4:	460c      	mov	r4, r1
 80151f6:	461a      	mov	r2, r3
 80151f8:	4b6a      	ldr	r3, [pc, #424]	; (80153a4 <UART_SetConfig+0x384>)
 80151fa:	fba3 1302 	umull	r1, r3, r3, r2
 80151fe:	095b      	lsrs	r3, r3, #5
 8015200:	2164      	movs	r1, #100	; 0x64
 8015202:	fb01 f303 	mul.w	r3, r1, r3
 8015206:	1ad3      	subs	r3, r2, r3
 8015208:	00db      	lsls	r3, r3, #3
 801520a:	3332      	adds	r3, #50	; 0x32
 801520c:	4a65      	ldr	r2, [pc, #404]	; (80153a4 <UART_SetConfig+0x384>)
 801520e:	fba2 2303 	umull	r2, r3, r2, r3
 8015212:	095b      	lsrs	r3, r3, #5
 8015214:	f003 0207 	and.w	r2, r3, #7
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	4442      	add	r2, r8
 801521e:	609a      	str	r2, [r3, #8]
 8015220:	e26f      	b.n	8015702 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8015222:	f7fd fcfd 	bl	8012c20 <HAL_RCC_GetPCLK1Freq>
 8015226:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	461d      	mov	r5, r3
 801522c:	f04f 0600 	mov.w	r6, #0
 8015230:	46a8      	mov	r8, r5
 8015232:	46b1      	mov	r9, r6
 8015234:	eb18 0308 	adds.w	r3, r8, r8
 8015238:	eb49 0409 	adc.w	r4, r9, r9
 801523c:	4698      	mov	r8, r3
 801523e:	46a1      	mov	r9, r4
 8015240:	eb18 0805 	adds.w	r8, r8, r5
 8015244:	eb49 0906 	adc.w	r9, r9, r6
 8015248:	f04f 0100 	mov.w	r1, #0
 801524c:	f04f 0200 	mov.w	r2, #0
 8015250:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015254:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015258:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801525c:	4688      	mov	r8, r1
 801525e:	4691      	mov	r9, r2
 8015260:	eb18 0005 	adds.w	r0, r8, r5
 8015264:	eb49 0106 	adc.w	r1, r9, r6
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	685b      	ldr	r3, [r3, #4]
 801526c:	461d      	mov	r5, r3
 801526e:	f04f 0600 	mov.w	r6, #0
 8015272:	196b      	adds	r3, r5, r5
 8015274:	eb46 0406 	adc.w	r4, r6, r6
 8015278:	461a      	mov	r2, r3
 801527a:	4623      	mov	r3, r4
 801527c:	f7f3 fc1c 	bl	8008ab8 <__aeabi_uldivmod>
 8015280:	4603      	mov	r3, r0
 8015282:	460c      	mov	r4, r1
 8015284:	461a      	mov	r2, r3
 8015286:	4b47      	ldr	r3, [pc, #284]	; (80153a4 <UART_SetConfig+0x384>)
 8015288:	fba3 2302 	umull	r2, r3, r3, r2
 801528c:	095b      	lsrs	r3, r3, #5
 801528e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015292:	68bb      	ldr	r3, [r7, #8]
 8015294:	461d      	mov	r5, r3
 8015296:	f04f 0600 	mov.w	r6, #0
 801529a:	46a9      	mov	r9, r5
 801529c:	46b2      	mov	sl, r6
 801529e:	eb19 0309 	adds.w	r3, r9, r9
 80152a2:	eb4a 040a 	adc.w	r4, sl, sl
 80152a6:	4699      	mov	r9, r3
 80152a8:	46a2      	mov	sl, r4
 80152aa:	eb19 0905 	adds.w	r9, r9, r5
 80152ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80152b2:	f04f 0100 	mov.w	r1, #0
 80152b6:	f04f 0200 	mov.w	r2, #0
 80152ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80152be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80152c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80152c6:	4689      	mov	r9, r1
 80152c8:	4692      	mov	sl, r2
 80152ca:	eb19 0005 	adds.w	r0, r9, r5
 80152ce:	eb4a 0106 	adc.w	r1, sl, r6
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	685b      	ldr	r3, [r3, #4]
 80152d6:	461d      	mov	r5, r3
 80152d8:	f04f 0600 	mov.w	r6, #0
 80152dc:	196b      	adds	r3, r5, r5
 80152de:	eb46 0406 	adc.w	r4, r6, r6
 80152e2:	461a      	mov	r2, r3
 80152e4:	4623      	mov	r3, r4
 80152e6:	f7f3 fbe7 	bl	8008ab8 <__aeabi_uldivmod>
 80152ea:	4603      	mov	r3, r0
 80152ec:	460c      	mov	r4, r1
 80152ee:	461a      	mov	r2, r3
 80152f0:	4b2c      	ldr	r3, [pc, #176]	; (80153a4 <UART_SetConfig+0x384>)
 80152f2:	fba3 1302 	umull	r1, r3, r3, r2
 80152f6:	095b      	lsrs	r3, r3, #5
 80152f8:	2164      	movs	r1, #100	; 0x64
 80152fa:	fb01 f303 	mul.w	r3, r1, r3
 80152fe:	1ad3      	subs	r3, r2, r3
 8015300:	00db      	lsls	r3, r3, #3
 8015302:	3332      	adds	r3, #50	; 0x32
 8015304:	4a27      	ldr	r2, [pc, #156]	; (80153a4 <UART_SetConfig+0x384>)
 8015306:	fba2 2303 	umull	r2, r3, r2, r3
 801530a:	095b      	lsrs	r3, r3, #5
 801530c:	005b      	lsls	r3, r3, #1
 801530e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015312:	4498      	add	r8, r3
 8015314:	68bb      	ldr	r3, [r7, #8]
 8015316:	461d      	mov	r5, r3
 8015318:	f04f 0600 	mov.w	r6, #0
 801531c:	46a9      	mov	r9, r5
 801531e:	46b2      	mov	sl, r6
 8015320:	eb19 0309 	adds.w	r3, r9, r9
 8015324:	eb4a 040a 	adc.w	r4, sl, sl
 8015328:	4699      	mov	r9, r3
 801532a:	46a2      	mov	sl, r4
 801532c:	eb19 0905 	adds.w	r9, r9, r5
 8015330:	eb4a 0a06 	adc.w	sl, sl, r6
 8015334:	f04f 0100 	mov.w	r1, #0
 8015338:	f04f 0200 	mov.w	r2, #0
 801533c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015340:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015344:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015348:	4689      	mov	r9, r1
 801534a:	4692      	mov	sl, r2
 801534c:	eb19 0005 	adds.w	r0, r9, r5
 8015350:	eb4a 0106 	adc.w	r1, sl, r6
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	685b      	ldr	r3, [r3, #4]
 8015358:	461d      	mov	r5, r3
 801535a:	f04f 0600 	mov.w	r6, #0
 801535e:	196b      	adds	r3, r5, r5
 8015360:	eb46 0406 	adc.w	r4, r6, r6
 8015364:	461a      	mov	r2, r3
 8015366:	4623      	mov	r3, r4
 8015368:	f7f3 fba6 	bl	8008ab8 <__aeabi_uldivmod>
 801536c:	4603      	mov	r3, r0
 801536e:	460c      	mov	r4, r1
 8015370:	461a      	mov	r2, r3
 8015372:	4b0c      	ldr	r3, [pc, #48]	; (80153a4 <UART_SetConfig+0x384>)
 8015374:	fba3 1302 	umull	r1, r3, r3, r2
 8015378:	095b      	lsrs	r3, r3, #5
 801537a:	2164      	movs	r1, #100	; 0x64
 801537c:	fb01 f303 	mul.w	r3, r1, r3
 8015380:	1ad3      	subs	r3, r2, r3
 8015382:	00db      	lsls	r3, r3, #3
 8015384:	3332      	adds	r3, #50	; 0x32
 8015386:	4a07      	ldr	r2, [pc, #28]	; (80153a4 <UART_SetConfig+0x384>)
 8015388:	fba2 2303 	umull	r2, r3, r2, r3
 801538c:	095b      	lsrs	r3, r3, #5
 801538e:	f003 0207 	and.w	r2, r3, #7
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	4442      	add	r2, r8
 8015398:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801539a:	e1b2      	b.n	8015702 <UART_SetConfig+0x6e2>
 801539c:	40011000 	.word	0x40011000
 80153a0:	40011400 	.word	0x40011400
 80153a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	4ad7      	ldr	r2, [pc, #860]	; (801570c <UART_SetConfig+0x6ec>)
 80153ae:	4293      	cmp	r3, r2
 80153b0:	d005      	beq.n	80153be <UART_SetConfig+0x39e>
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	4ad6      	ldr	r2, [pc, #856]	; (8015710 <UART_SetConfig+0x6f0>)
 80153b8:	4293      	cmp	r3, r2
 80153ba:	f040 80d1 	bne.w	8015560 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80153be:	f7fd fc43 	bl	8012c48 <HAL_RCC_GetPCLK2Freq>
 80153c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80153c4:	68bb      	ldr	r3, [r7, #8]
 80153c6:	469a      	mov	sl, r3
 80153c8:	f04f 0b00 	mov.w	fp, #0
 80153cc:	46d0      	mov	r8, sl
 80153ce:	46d9      	mov	r9, fp
 80153d0:	eb18 0308 	adds.w	r3, r8, r8
 80153d4:	eb49 0409 	adc.w	r4, r9, r9
 80153d8:	4698      	mov	r8, r3
 80153da:	46a1      	mov	r9, r4
 80153dc:	eb18 080a 	adds.w	r8, r8, sl
 80153e0:	eb49 090b 	adc.w	r9, r9, fp
 80153e4:	f04f 0100 	mov.w	r1, #0
 80153e8:	f04f 0200 	mov.w	r2, #0
 80153ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80153f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80153f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80153f8:	4688      	mov	r8, r1
 80153fa:	4691      	mov	r9, r2
 80153fc:	eb1a 0508 	adds.w	r5, sl, r8
 8015400:	eb4b 0609 	adc.w	r6, fp, r9
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	685b      	ldr	r3, [r3, #4]
 8015408:	4619      	mov	r1, r3
 801540a:	f04f 0200 	mov.w	r2, #0
 801540e:	f04f 0300 	mov.w	r3, #0
 8015412:	f04f 0400 	mov.w	r4, #0
 8015416:	0094      	lsls	r4, r2, #2
 8015418:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801541c:	008b      	lsls	r3, r1, #2
 801541e:	461a      	mov	r2, r3
 8015420:	4623      	mov	r3, r4
 8015422:	4628      	mov	r0, r5
 8015424:	4631      	mov	r1, r6
 8015426:	f7f3 fb47 	bl	8008ab8 <__aeabi_uldivmod>
 801542a:	4603      	mov	r3, r0
 801542c:	460c      	mov	r4, r1
 801542e:	461a      	mov	r2, r3
 8015430:	4bb8      	ldr	r3, [pc, #736]	; (8015714 <UART_SetConfig+0x6f4>)
 8015432:	fba3 2302 	umull	r2, r3, r3, r2
 8015436:	095b      	lsrs	r3, r3, #5
 8015438:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801543c:	68bb      	ldr	r3, [r7, #8]
 801543e:	469b      	mov	fp, r3
 8015440:	f04f 0c00 	mov.w	ip, #0
 8015444:	46d9      	mov	r9, fp
 8015446:	46e2      	mov	sl, ip
 8015448:	eb19 0309 	adds.w	r3, r9, r9
 801544c:	eb4a 040a 	adc.w	r4, sl, sl
 8015450:	4699      	mov	r9, r3
 8015452:	46a2      	mov	sl, r4
 8015454:	eb19 090b 	adds.w	r9, r9, fp
 8015458:	eb4a 0a0c 	adc.w	sl, sl, ip
 801545c:	f04f 0100 	mov.w	r1, #0
 8015460:	f04f 0200 	mov.w	r2, #0
 8015464:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015468:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801546c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015470:	4689      	mov	r9, r1
 8015472:	4692      	mov	sl, r2
 8015474:	eb1b 0509 	adds.w	r5, fp, r9
 8015478:	eb4c 060a 	adc.w	r6, ip, sl
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	685b      	ldr	r3, [r3, #4]
 8015480:	4619      	mov	r1, r3
 8015482:	f04f 0200 	mov.w	r2, #0
 8015486:	f04f 0300 	mov.w	r3, #0
 801548a:	f04f 0400 	mov.w	r4, #0
 801548e:	0094      	lsls	r4, r2, #2
 8015490:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015494:	008b      	lsls	r3, r1, #2
 8015496:	461a      	mov	r2, r3
 8015498:	4623      	mov	r3, r4
 801549a:	4628      	mov	r0, r5
 801549c:	4631      	mov	r1, r6
 801549e:	f7f3 fb0b 	bl	8008ab8 <__aeabi_uldivmod>
 80154a2:	4603      	mov	r3, r0
 80154a4:	460c      	mov	r4, r1
 80154a6:	461a      	mov	r2, r3
 80154a8:	4b9a      	ldr	r3, [pc, #616]	; (8015714 <UART_SetConfig+0x6f4>)
 80154aa:	fba3 1302 	umull	r1, r3, r3, r2
 80154ae:	095b      	lsrs	r3, r3, #5
 80154b0:	2164      	movs	r1, #100	; 0x64
 80154b2:	fb01 f303 	mul.w	r3, r1, r3
 80154b6:	1ad3      	subs	r3, r2, r3
 80154b8:	011b      	lsls	r3, r3, #4
 80154ba:	3332      	adds	r3, #50	; 0x32
 80154bc:	4a95      	ldr	r2, [pc, #596]	; (8015714 <UART_SetConfig+0x6f4>)
 80154be:	fba2 2303 	umull	r2, r3, r2, r3
 80154c2:	095b      	lsrs	r3, r3, #5
 80154c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80154c8:	4498      	add	r8, r3
 80154ca:	68bb      	ldr	r3, [r7, #8]
 80154cc:	469b      	mov	fp, r3
 80154ce:	f04f 0c00 	mov.w	ip, #0
 80154d2:	46d9      	mov	r9, fp
 80154d4:	46e2      	mov	sl, ip
 80154d6:	eb19 0309 	adds.w	r3, r9, r9
 80154da:	eb4a 040a 	adc.w	r4, sl, sl
 80154de:	4699      	mov	r9, r3
 80154e0:	46a2      	mov	sl, r4
 80154e2:	eb19 090b 	adds.w	r9, r9, fp
 80154e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80154ea:	f04f 0100 	mov.w	r1, #0
 80154ee:	f04f 0200 	mov.w	r2, #0
 80154f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80154f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80154fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80154fe:	4689      	mov	r9, r1
 8015500:	4692      	mov	sl, r2
 8015502:	eb1b 0509 	adds.w	r5, fp, r9
 8015506:	eb4c 060a 	adc.w	r6, ip, sl
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	685b      	ldr	r3, [r3, #4]
 801550e:	4619      	mov	r1, r3
 8015510:	f04f 0200 	mov.w	r2, #0
 8015514:	f04f 0300 	mov.w	r3, #0
 8015518:	f04f 0400 	mov.w	r4, #0
 801551c:	0094      	lsls	r4, r2, #2
 801551e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015522:	008b      	lsls	r3, r1, #2
 8015524:	461a      	mov	r2, r3
 8015526:	4623      	mov	r3, r4
 8015528:	4628      	mov	r0, r5
 801552a:	4631      	mov	r1, r6
 801552c:	f7f3 fac4 	bl	8008ab8 <__aeabi_uldivmod>
 8015530:	4603      	mov	r3, r0
 8015532:	460c      	mov	r4, r1
 8015534:	461a      	mov	r2, r3
 8015536:	4b77      	ldr	r3, [pc, #476]	; (8015714 <UART_SetConfig+0x6f4>)
 8015538:	fba3 1302 	umull	r1, r3, r3, r2
 801553c:	095b      	lsrs	r3, r3, #5
 801553e:	2164      	movs	r1, #100	; 0x64
 8015540:	fb01 f303 	mul.w	r3, r1, r3
 8015544:	1ad3      	subs	r3, r2, r3
 8015546:	011b      	lsls	r3, r3, #4
 8015548:	3332      	adds	r3, #50	; 0x32
 801554a:	4a72      	ldr	r2, [pc, #456]	; (8015714 <UART_SetConfig+0x6f4>)
 801554c:	fba2 2303 	umull	r2, r3, r2, r3
 8015550:	095b      	lsrs	r3, r3, #5
 8015552:	f003 020f 	and.w	r2, r3, #15
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	4442      	add	r2, r8
 801555c:	609a      	str	r2, [r3, #8]
 801555e:	e0d0      	b.n	8015702 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8015560:	f7fd fb5e 	bl	8012c20 <HAL_RCC_GetPCLK1Freq>
 8015564:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015566:	68bb      	ldr	r3, [r7, #8]
 8015568:	469a      	mov	sl, r3
 801556a:	f04f 0b00 	mov.w	fp, #0
 801556e:	46d0      	mov	r8, sl
 8015570:	46d9      	mov	r9, fp
 8015572:	eb18 0308 	adds.w	r3, r8, r8
 8015576:	eb49 0409 	adc.w	r4, r9, r9
 801557a:	4698      	mov	r8, r3
 801557c:	46a1      	mov	r9, r4
 801557e:	eb18 080a 	adds.w	r8, r8, sl
 8015582:	eb49 090b 	adc.w	r9, r9, fp
 8015586:	f04f 0100 	mov.w	r1, #0
 801558a:	f04f 0200 	mov.w	r2, #0
 801558e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015592:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015596:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801559a:	4688      	mov	r8, r1
 801559c:	4691      	mov	r9, r2
 801559e:	eb1a 0508 	adds.w	r5, sl, r8
 80155a2:	eb4b 0609 	adc.w	r6, fp, r9
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	685b      	ldr	r3, [r3, #4]
 80155aa:	4619      	mov	r1, r3
 80155ac:	f04f 0200 	mov.w	r2, #0
 80155b0:	f04f 0300 	mov.w	r3, #0
 80155b4:	f04f 0400 	mov.w	r4, #0
 80155b8:	0094      	lsls	r4, r2, #2
 80155ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80155be:	008b      	lsls	r3, r1, #2
 80155c0:	461a      	mov	r2, r3
 80155c2:	4623      	mov	r3, r4
 80155c4:	4628      	mov	r0, r5
 80155c6:	4631      	mov	r1, r6
 80155c8:	f7f3 fa76 	bl	8008ab8 <__aeabi_uldivmod>
 80155cc:	4603      	mov	r3, r0
 80155ce:	460c      	mov	r4, r1
 80155d0:	461a      	mov	r2, r3
 80155d2:	4b50      	ldr	r3, [pc, #320]	; (8015714 <UART_SetConfig+0x6f4>)
 80155d4:	fba3 2302 	umull	r2, r3, r3, r2
 80155d8:	095b      	lsrs	r3, r3, #5
 80155da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80155de:	68bb      	ldr	r3, [r7, #8]
 80155e0:	469b      	mov	fp, r3
 80155e2:	f04f 0c00 	mov.w	ip, #0
 80155e6:	46d9      	mov	r9, fp
 80155e8:	46e2      	mov	sl, ip
 80155ea:	eb19 0309 	adds.w	r3, r9, r9
 80155ee:	eb4a 040a 	adc.w	r4, sl, sl
 80155f2:	4699      	mov	r9, r3
 80155f4:	46a2      	mov	sl, r4
 80155f6:	eb19 090b 	adds.w	r9, r9, fp
 80155fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80155fe:	f04f 0100 	mov.w	r1, #0
 8015602:	f04f 0200 	mov.w	r2, #0
 8015606:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801560a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801560e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015612:	4689      	mov	r9, r1
 8015614:	4692      	mov	sl, r2
 8015616:	eb1b 0509 	adds.w	r5, fp, r9
 801561a:	eb4c 060a 	adc.w	r6, ip, sl
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	685b      	ldr	r3, [r3, #4]
 8015622:	4619      	mov	r1, r3
 8015624:	f04f 0200 	mov.w	r2, #0
 8015628:	f04f 0300 	mov.w	r3, #0
 801562c:	f04f 0400 	mov.w	r4, #0
 8015630:	0094      	lsls	r4, r2, #2
 8015632:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015636:	008b      	lsls	r3, r1, #2
 8015638:	461a      	mov	r2, r3
 801563a:	4623      	mov	r3, r4
 801563c:	4628      	mov	r0, r5
 801563e:	4631      	mov	r1, r6
 8015640:	f7f3 fa3a 	bl	8008ab8 <__aeabi_uldivmod>
 8015644:	4603      	mov	r3, r0
 8015646:	460c      	mov	r4, r1
 8015648:	461a      	mov	r2, r3
 801564a:	4b32      	ldr	r3, [pc, #200]	; (8015714 <UART_SetConfig+0x6f4>)
 801564c:	fba3 1302 	umull	r1, r3, r3, r2
 8015650:	095b      	lsrs	r3, r3, #5
 8015652:	2164      	movs	r1, #100	; 0x64
 8015654:	fb01 f303 	mul.w	r3, r1, r3
 8015658:	1ad3      	subs	r3, r2, r3
 801565a:	011b      	lsls	r3, r3, #4
 801565c:	3332      	adds	r3, #50	; 0x32
 801565e:	4a2d      	ldr	r2, [pc, #180]	; (8015714 <UART_SetConfig+0x6f4>)
 8015660:	fba2 2303 	umull	r2, r3, r2, r3
 8015664:	095b      	lsrs	r3, r3, #5
 8015666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801566a:	4498      	add	r8, r3
 801566c:	68bb      	ldr	r3, [r7, #8]
 801566e:	469b      	mov	fp, r3
 8015670:	f04f 0c00 	mov.w	ip, #0
 8015674:	46d9      	mov	r9, fp
 8015676:	46e2      	mov	sl, ip
 8015678:	eb19 0309 	adds.w	r3, r9, r9
 801567c:	eb4a 040a 	adc.w	r4, sl, sl
 8015680:	4699      	mov	r9, r3
 8015682:	46a2      	mov	sl, r4
 8015684:	eb19 090b 	adds.w	r9, r9, fp
 8015688:	eb4a 0a0c 	adc.w	sl, sl, ip
 801568c:	f04f 0100 	mov.w	r1, #0
 8015690:	f04f 0200 	mov.w	r2, #0
 8015694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015698:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801569c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80156a0:	4689      	mov	r9, r1
 80156a2:	4692      	mov	sl, r2
 80156a4:	eb1b 0509 	adds.w	r5, fp, r9
 80156a8:	eb4c 060a 	adc.w	r6, ip, sl
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	685b      	ldr	r3, [r3, #4]
 80156b0:	4619      	mov	r1, r3
 80156b2:	f04f 0200 	mov.w	r2, #0
 80156b6:	f04f 0300 	mov.w	r3, #0
 80156ba:	f04f 0400 	mov.w	r4, #0
 80156be:	0094      	lsls	r4, r2, #2
 80156c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80156c4:	008b      	lsls	r3, r1, #2
 80156c6:	461a      	mov	r2, r3
 80156c8:	4623      	mov	r3, r4
 80156ca:	4628      	mov	r0, r5
 80156cc:	4631      	mov	r1, r6
 80156ce:	f7f3 f9f3 	bl	8008ab8 <__aeabi_uldivmod>
 80156d2:	4603      	mov	r3, r0
 80156d4:	460c      	mov	r4, r1
 80156d6:	461a      	mov	r2, r3
 80156d8:	4b0e      	ldr	r3, [pc, #56]	; (8015714 <UART_SetConfig+0x6f4>)
 80156da:	fba3 1302 	umull	r1, r3, r3, r2
 80156de:	095b      	lsrs	r3, r3, #5
 80156e0:	2164      	movs	r1, #100	; 0x64
 80156e2:	fb01 f303 	mul.w	r3, r1, r3
 80156e6:	1ad3      	subs	r3, r2, r3
 80156e8:	011b      	lsls	r3, r3, #4
 80156ea:	3332      	adds	r3, #50	; 0x32
 80156ec:	4a09      	ldr	r2, [pc, #36]	; (8015714 <UART_SetConfig+0x6f4>)
 80156ee:	fba2 2303 	umull	r2, r3, r2, r3
 80156f2:	095b      	lsrs	r3, r3, #5
 80156f4:	f003 020f 	and.w	r2, r3, #15
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	4442      	add	r2, r8
 80156fe:	609a      	str	r2, [r3, #8]
}
 8015700:	e7ff      	b.n	8015702 <UART_SetConfig+0x6e2>
 8015702:	bf00      	nop
 8015704:	3714      	adds	r7, #20
 8015706:	46bd      	mov	sp, r7
 8015708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801570c:	40011000 	.word	0x40011000
 8015710:	40011400 	.word	0x40011400
 8015714:	51eb851f 	.word	0x51eb851f

08015718 <round>:
 8015718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801571a:	ec57 6b10 	vmov	r6, r7, d0
 801571e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8015722:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8015726:	2c13      	cmp	r4, #19
 8015728:	463b      	mov	r3, r7
 801572a:	463d      	mov	r5, r7
 801572c:	dc17      	bgt.n	801575e <round+0x46>
 801572e:	2c00      	cmp	r4, #0
 8015730:	da09      	bge.n	8015746 <round+0x2e>
 8015732:	3401      	adds	r4, #1
 8015734:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8015738:	d103      	bne.n	8015742 <round+0x2a>
 801573a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801573e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015742:	2100      	movs	r1, #0
 8015744:	e02c      	b.n	80157a0 <round+0x88>
 8015746:	4a18      	ldr	r2, [pc, #96]	; (80157a8 <round+0x90>)
 8015748:	4122      	asrs	r2, r4
 801574a:	4217      	tst	r7, r2
 801574c:	d100      	bne.n	8015750 <round+0x38>
 801574e:	b19e      	cbz	r6, 8015778 <round+0x60>
 8015750:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015754:	4123      	asrs	r3, r4
 8015756:	442b      	add	r3, r5
 8015758:	ea23 0302 	bic.w	r3, r3, r2
 801575c:	e7f1      	b.n	8015742 <round+0x2a>
 801575e:	2c33      	cmp	r4, #51	; 0x33
 8015760:	dd0d      	ble.n	801577e <round+0x66>
 8015762:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8015766:	d107      	bne.n	8015778 <round+0x60>
 8015768:	4630      	mov	r0, r6
 801576a:	4639      	mov	r1, r7
 801576c:	ee10 2a10 	vmov	r2, s0
 8015770:	f7f2 fcc4 	bl	80080fc <__adddf3>
 8015774:	4606      	mov	r6, r0
 8015776:	460f      	mov	r7, r1
 8015778:	ec47 6b10 	vmov	d0, r6, r7
 801577c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801577e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8015782:	f04f 30ff 	mov.w	r0, #4294967295
 8015786:	40d0      	lsrs	r0, r2
 8015788:	4206      	tst	r6, r0
 801578a:	d0f5      	beq.n	8015778 <round+0x60>
 801578c:	2201      	movs	r2, #1
 801578e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8015792:	fa02 f404 	lsl.w	r4, r2, r4
 8015796:	1931      	adds	r1, r6, r4
 8015798:	bf28      	it	cs
 801579a:	189b      	addcs	r3, r3, r2
 801579c:	ea21 0100 	bic.w	r1, r1, r0
 80157a0:	461f      	mov	r7, r3
 80157a2:	460e      	mov	r6, r1
 80157a4:	e7e8      	b.n	8015778 <round+0x60>
 80157a6:	bf00      	nop
 80157a8:	000fffff 	.word	0x000fffff

080157ac <__errno>:
 80157ac:	4b01      	ldr	r3, [pc, #4]	; (80157b4 <__errno+0x8>)
 80157ae:	6818      	ldr	r0, [r3, #0]
 80157b0:	4770      	bx	lr
 80157b2:	bf00      	nop
 80157b4:	2000008c 	.word	0x2000008c

080157b8 <__libc_init_array>:
 80157b8:	b570      	push	{r4, r5, r6, lr}
 80157ba:	4e0d      	ldr	r6, [pc, #52]	; (80157f0 <__libc_init_array+0x38>)
 80157bc:	4c0d      	ldr	r4, [pc, #52]	; (80157f4 <__libc_init_array+0x3c>)
 80157be:	1ba4      	subs	r4, r4, r6
 80157c0:	10a4      	asrs	r4, r4, #2
 80157c2:	2500      	movs	r5, #0
 80157c4:	42a5      	cmp	r5, r4
 80157c6:	d109      	bne.n	80157dc <__libc_init_array+0x24>
 80157c8:	4e0b      	ldr	r6, [pc, #44]	; (80157f8 <__libc_init_array+0x40>)
 80157ca:	4c0c      	ldr	r4, [pc, #48]	; (80157fc <__libc_init_array+0x44>)
 80157cc:	f002 fbac 	bl	8017f28 <_init>
 80157d0:	1ba4      	subs	r4, r4, r6
 80157d2:	10a4      	asrs	r4, r4, #2
 80157d4:	2500      	movs	r5, #0
 80157d6:	42a5      	cmp	r5, r4
 80157d8:	d105      	bne.n	80157e6 <__libc_init_array+0x2e>
 80157da:	bd70      	pop	{r4, r5, r6, pc}
 80157dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80157e0:	4798      	blx	r3
 80157e2:	3501      	adds	r5, #1
 80157e4:	e7ee      	b.n	80157c4 <__libc_init_array+0xc>
 80157e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80157ea:	4798      	blx	r3
 80157ec:	3501      	adds	r5, #1
 80157ee:	e7f2      	b.n	80157d6 <__libc_init_array+0x1e>
 80157f0:	080183a8 	.word	0x080183a8
 80157f4:	080183a8 	.word	0x080183a8
 80157f8:	080183a8 	.word	0x080183a8
 80157fc:	080183ac 	.word	0x080183ac

08015800 <memcpy>:
 8015800:	b510      	push	{r4, lr}
 8015802:	1e43      	subs	r3, r0, #1
 8015804:	440a      	add	r2, r1
 8015806:	4291      	cmp	r1, r2
 8015808:	d100      	bne.n	801580c <memcpy+0xc>
 801580a:	bd10      	pop	{r4, pc}
 801580c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015810:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015814:	e7f7      	b.n	8015806 <memcpy+0x6>

08015816 <memset>:
 8015816:	4402      	add	r2, r0
 8015818:	4603      	mov	r3, r0
 801581a:	4293      	cmp	r3, r2
 801581c:	d100      	bne.n	8015820 <memset+0xa>
 801581e:	4770      	bx	lr
 8015820:	f803 1b01 	strb.w	r1, [r3], #1
 8015824:	e7f9      	b.n	801581a <memset+0x4>

08015826 <__cvt>:
 8015826:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801582a:	ec55 4b10 	vmov	r4, r5, d0
 801582e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015830:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015834:	2d00      	cmp	r5, #0
 8015836:	460e      	mov	r6, r1
 8015838:	4691      	mov	r9, r2
 801583a:	4619      	mov	r1, r3
 801583c:	bfb8      	it	lt
 801583e:	4622      	movlt	r2, r4
 8015840:	462b      	mov	r3, r5
 8015842:	f027 0720 	bic.w	r7, r7, #32
 8015846:	bfbb      	ittet	lt
 8015848:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801584c:	461d      	movlt	r5, r3
 801584e:	2300      	movge	r3, #0
 8015850:	232d      	movlt	r3, #45	; 0x2d
 8015852:	bfb8      	it	lt
 8015854:	4614      	movlt	r4, r2
 8015856:	2f46      	cmp	r7, #70	; 0x46
 8015858:	700b      	strb	r3, [r1, #0]
 801585a:	d004      	beq.n	8015866 <__cvt+0x40>
 801585c:	2f45      	cmp	r7, #69	; 0x45
 801585e:	d100      	bne.n	8015862 <__cvt+0x3c>
 8015860:	3601      	adds	r6, #1
 8015862:	2102      	movs	r1, #2
 8015864:	e000      	b.n	8015868 <__cvt+0x42>
 8015866:	2103      	movs	r1, #3
 8015868:	ab03      	add	r3, sp, #12
 801586a:	9301      	str	r3, [sp, #4]
 801586c:	ab02      	add	r3, sp, #8
 801586e:	9300      	str	r3, [sp, #0]
 8015870:	4632      	mov	r2, r6
 8015872:	4653      	mov	r3, sl
 8015874:	ec45 4b10 	vmov	d0, r4, r5
 8015878:	f000 fdfa 	bl	8016470 <_dtoa_r>
 801587c:	2f47      	cmp	r7, #71	; 0x47
 801587e:	4680      	mov	r8, r0
 8015880:	d102      	bne.n	8015888 <__cvt+0x62>
 8015882:	f019 0f01 	tst.w	r9, #1
 8015886:	d026      	beq.n	80158d6 <__cvt+0xb0>
 8015888:	2f46      	cmp	r7, #70	; 0x46
 801588a:	eb08 0906 	add.w	r9, r8, r6
 801588e:	d111      	bne.n	80158b4 <__cvt+0x8e>
 8015890:	f898 3000 	ldrb.w	r3, [r8]
 8015894:	2b30      	cmp	r3, #48	; 0x30
 8015896:	d10a      	bne.n	80158ae <__cvt+0x88>
 8015898:	2200      	movs	r2, #0
 801589a:	2300      	movs	r3, #0
 801589c:	4620      	mov	r0, r4
 801589e:	4629      	mov	r1, r5
 80158a0:	f7f3 f84a 	bl	8008938 <__aeabi_dcmpeq>
 80158a4:	b918      	cbnz	r0, 80158ae <__cvt+0x88>
 80158a6:	f1c6 0601 	rsb	r6, r6, #1
 80158aa:	f8ca 6000 	str.w	r6, [sl]
 80158ae:	f8da 3000 	ldr.w	r3, [sl]
 80158b2:	4499      	add	r9, r3
 80158b4:	2200      	movs	r2, #0
 80158b6:	2300      	movs	r3, #0
 80158b8:	4620      	mov	r0, r4
 80158ba:	4629      	mov	r1, r5
 80158bc:	f7f3 f83c 	bl	8008938 <__aeabi_dcmpeq>
 80158c0:	b938      	cbnz	r0, 80158d2 <__cvt+0xac>
 80158c2:	2230      	movs	r2, #48	; 0x30
 80158c4:	9b03      	ldr	r3, [sp, #12]
 80158c6:	454b      	cmp	r3, r9
 80158c8:	d205      	bcs.n	80158d6 <__cvt+0xb0>
 80158ca:	1c59      	adds	r1, r3, #1
 80158cc:	9103      	str	r1, [sp, #12]
 80158ce:	701a      	strb	r2, [r3, #0]
 80158d0:	e7f8      	b.n	80158c4 <__cvt+0x9e>
 80158d2:	f8cd 900c 	str.w	r9, [sp, #12]
 80158d6:	9b03      	ldr	r3, [sp, #12]
 80158d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80158da:	eba3 0308 	sub.w	r3, r3, r8
 80158de:	4640      	mov	r0, r8
 80158e0:	6013      	str	r3, [r2, #0]
 80158e2:	b004      	add	sp, #16
 80158e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080158e8 <__exponent>:
 80158e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80158ea:	2900      	cmp	r1, #0
 80158ec:	4604      	mov	r4, r0
 80158ee:	bfba      	itte	lt
 80158f0:	4249      	neglt	r1, r1
 80158f2:	232d      	movlt	r3, #45	; 0x2d
 80158f4:	232b      	movge	r3, #43	; 0x2b
 80158f6:	2909      	cmp	r1, #9
 80158f8:	f804 2b02 	strb.w	r2, [r4], #2
 80158fc:	7043      	strb	r3, [r0, #1]
 80158fe:	dd20      	ble.n	8015942 <__exponent+0x5a>
 8015900:	f10d 0307 	add.w	r3, sp, #7
 8015904:	461f      	mov	r7, r3
 8015906:	260a      	movs	r6, #10
 8015908:	fb91 f5f6 	sdiv	r5, r1, r6
 801590c:	fb06 1115 	mls	r1, r6, r5, r1
 8015910:	3130      	adds	r1, #48	; 0x30
 8015912:	2d09      	cmp	r5, #9
 8015914:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015918:	f103 32ff 	add.w	r2, r3, #4294967295
 801591c:	4629      	mov	r1, r5
 801591e:	dc09      	bgt.n	8015934 <__exponent+0x4c>
 8015920:	3130      	adds	r1, #48	; 0x30
 8015922:	3b02      	subs	r3, #2
 8015924:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015928:	42bb      	cmp	r3, r7
 801592a:	4622      	mov	r2, r4
 801592c:	d304      	bcc.n	8015938 <__exponent+0x50>
 801592e:	1a10      	subs	r0, r2, r0
 8015930:	b003      	add	sp, #12
 8015932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015934:	4613      	mov	r3, r2
 8015936:	e7e7      	b.n	8015908 <__exponent+0x20>
 8015938:	f813 2b01 	ldrb.w	r2, [r3], #1
 801593c:	f804 2b01 	strb.w	r2, [r4], #1
 8015940:	e7f2      	b.n	8015928 <__exponent+0x40>
 8015942:	2330      	movs	r3, #48	; 0x30
 8015944:	4419      	add	r1, r3
 8015946:	7083      	strb	r3, [r0, #2]
 8015948:	1d02      	adds	r2, r0, #4
 801594a:	70c1      	strb	r1, [r0, #3]
 801594c:	e7ef      	b.n	801592e <__exponent+0x46>
	...

08015950 <_printf_float>:
 8015950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015954:	b08d      	sub	sp, #52	; 0x34
 8015956:	460c      	mov	r4, r1
 8015958:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801595c:	4616      	mov	r6, r2
 801595e:	461f      	mov	r7, r3
 8015960:	4605      	mov	r5, r0
 8015962:	f001 fcb7 	bl	80172d4 <_localeconv_r>
 8015966:	6803      	ldr	r3, [r0, #0]
 8015968:	9304      	str	r3, [sp, #16]
 801596a:	4618      	mov	r0, r3
 801596c:	f7f2 fb68 	bl	8008040 <strlen>
 8015970:	2300      	movs	r3, #0
 8015972:	930a      	str	r3, [sp, #40]	; 0x28
 8015974:	f8d8 3000 	ldr.w	r3, [r8]
 8015978:	9005      	str	r0, [sp, #20]
 801597a:	3307      	adds	r3, #7
 801597c:	f023 0307 	bic.w	r3, r3, #7
 8015980:	f103 0208 	add.w	r2, r3, #8
 8015984:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015988:	f8d4 b000 	ldr.w	fp, [r4]
 801598c:	f8c8 2000 	str.w	r2, [r8]
 8015990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015994:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015998:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801599c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80159a0:	9307      	str	r3, [sp, #28]
 80159a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80159a6:	f04f 32ff 	mov.w	r2, #4294967295
 80159aa:	4ba7      	ldr	r3, [pc, #668]	; (8015c48 <_printf_float+0x2f8>)
 80159ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80159b0:	f7f2 fff4 	bl	800899c <__aeabi_dcmpun>
 80159b4:	bb70      	cbnz	r0, 8015a14 <_printf_float+0xc4>
 80159b6:	f04f 32ff 	mov.w	r2, #4294967295
 80159ba:	4ba3      	ldr	r3, [pc, #652]	; (8015c48 <_printf_float+0x2f8>)
 80159bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80159c0:	f7f2 ffce 	bl	8008960 <__aeabi_dcmple>
 80159c4:	bb30      	cbnz	r0, 8015a14 <_printf_float+0xc4>
 80159c6:	2200      	movs	r2, #0
 80159c8:	2300      	movs	r3, #0
 80159ca:	4640      	mov	r0, r8
 80159cc:	4649      	mov	r1, r9
 80159ce:	f7f2 ffbd 	bl	800894c <__aeabi_dcmplt>
 80159d2:	b110      	cbz	r0, 80159da <_printf_float+0x8a>
 80159d4:	232d      	movs	r3, #45	; 0x2d
 80159d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80159da:	4a9c      	ldr	r2, [pc, #624]	; (8015c4c <_printf_float+0x2fc>)
 80159dc:	4b9c      	ldr	r3, [pc, #624]	; (8015c50 <_printf_float+0x300>)
 80159de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80159e2:	bf8c      	ite	hi
 80159e4:	4690      	movhi	r8, r2
 80159e6:	4698      	movls	r8, r3
 80159e8:	2303      	movs	r3, #3
 80159ea:	f02b 0204 	bic.w	r2, fp, #4
 80159ee:	6123      	str	r3, [r4, #16]
 80159f0:	6022      	str	r2, [r4, #0]
 80159f2:	f04f 0900 	mov.w	r9, #0
 80159f6:	9700      	str	r7, [sp, #0]
 80159f8:	4633      	mov	r3, r6
 80159fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80159fc:	4621      	mov	r1, r4
 80159fe:	4628      	mov	r0, r5
 8015a00:	f000 f9e6 	bl	8015dd0 <_printf_common>
 8015a04:	3001      	adds	r0, #1
 8015a06:	f040 808d 	bne.w	8015b24 <_printf_float+0x1d4>
 8015a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8015a0e:	b00d      	add	sp, #52	; 0x34
 8015a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a14:	4642      	mov	r2, r8
 8015a16:	464b      	mov	r3, r9
 8015a18:	4640      	mov	r0, r8
 8015a1a:	4649      	mov	r1, r9
 8015a1c:	f7f2 ffbe 	bl	800899c <__aeabi_dcmpun>
 8015a20:	b110      	cbz	r0, 8015a28 <_printf_float+0xd8>
 8015a22:	4a8c      	ldr	r2, [pc, #560]	; (8015c54 <_printf_float+0x304>)
 8015a24:	4b8c      	ldr	r3, [pc, #560]	; (8015c58 <_printf_float+0x308>)
 8015a26:	e7da      	b.n	80159de <_printf_float+0x8e>
 8015a28:	6861      	ldr	r1, [r4, #4]
 8015a2a:	1c4b      	adds	r3, r1, #1
 8015a2c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015a30:	a80a      	add	r0, sp, #40	; 0x28
 8015a32:	d13e      	bne.n	8015ab2 <_printf_float+0x162>
 8015a34:	2306      	movs	r3, #6
 8015a36:	6063      	str	r3, [r4, #4]
 8015a38:	2300      	movs	r3, #0
 8015a3a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015a3e:	ab09      	add	r3, sp, #36	; 0x24
 8015a40:	9300      	str	r3, [sp, #0]
 8015a42:	ec49 8b10 	vmov	d0, r8, r9
 8015a46:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015a4a:	6022      	str	r2, [r4, #0]
 8015a4c:	f8cd a004 	str.w	sl, [sp, #4]
 8015a50:	6861      	ldr	r1, [r4, #4]
 8015a52:	4628      	mov	r0, r5
 8015a54:	f7ff fee7 	bl	8015826 <__cvt>
 8015a58:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015a5c:	2b47      	cmp	r3, #71	; 0x47
 8015a5e:	4680      	mov	r8, r0
 8015a60:	d109      	bne.n	8015a76 <_printf_float+0x126>
 8015a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a64:	1cd8      	adds	r0, r3, #3
 8015a66:	db02      	blt.n	8015a6e <_printf_float+0x11e>
 8015a68:	6862      	ldr	r2, [r4, #4]
 8015a6a:	4293      	cmp	r3, r2
 8015a6c:	dd47      	ble.n	8015afe <_printf_float+0x1ae>
 8015a6e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015a72:	fa5f fa8a 	uxtb.w	sl, sl
 8015a76:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015a7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a7c:	d824      	bhi.n	8015ac8 <_printf_float+0x178>
 8015a7e:	3901      	subs	r1, #1
 8015a80:	4652      	mov	r2, sl
 8015a82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015a86:	9109      	str	r1, [sp, #36]	; 0x24
 8015a88:	f7ff ff2e 	bl	80158e8 <__exponent>
 8015a8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a8e:	1813      	adds	r3, r2, r0
 8015a90:	2a01      	cmp	r2, #1
 8015a92:	4681      	mov	r9, r0
 8015a94:	6123      	str	r3, [r4, #16]
 8015a96:	dc02      	bgt.n	8015a9e <_printf_float+0x14e>
 8015a98:	6822      	ldr	r2, [r4, #0]
 8015a9a:	07d1      	lsls	r1, r2, #31
 8015a9c:	d501      	bpl.n	8015aa2 <_printf_float+0x152>
 8015a9e:	3301      	adds	r3, #1
 8015aa0:	6123      	str	r3, [r4, #16]
 8015aa2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d0a5      	beq.n	80159f6 <_printf_float+0xa6>
 8015aaa:	232d      	movs	r3, #45	; 0x2d
 8015aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ab0:	e7a1      	b.n	80159f6 <_printf_float+0xa6>
 8015ab2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015ab6:	f000 8177 	beq.w	8015da8 <_printf_float+0x458>
 8015aba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015abe:	d1bb      	bne.n	8015a38 <_printf_float+0xe8>
 8015ac0:	2900      	cmp	r1, #0
 8015ac2:	d1b9      	bne.n	8015a38 <_printf_float+0xe8>
 8015ac4:	2301      	movs	r3, #1
 8015ac6:	e7b6      	b.n	8015a36 <_printf_float+0xe6>
 8015ac8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015acc:	d119      	bne.n	8015b02 <_printf_float+0x1b2>
 8015ace:	2900      	cmp	r1, #0
 8015ad0:	6863      	ldr	r3, [r4, #4]
 8015ad2:	dd0c      	ble.n	8015aee <_printf_float+0x19e>
 8015ad4:	6121      	str	r1, [r4, #16]
 8015ad6:	b913      	cbnz	r3, 8015ade <_printf_float+0x18e>
 8015ad8:	6822      	ldr	r2, [r4, #0]
 8015ada:	07d2      	lsls	r2, r2, #31
 8015adc:	d502      	bpl.n	8015ae4 <_printf_float+0x194>
 8015ade:	3301      	adds	r3, #1
 8015ae0:	440b      	add	r3, r1
 8015ae2:	6123      	str	r3, [r4, #16]
 8015ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ae6:	65a3      	str	r3, [r4, #88]	; 0x58
 8015ae8:	f04f 0900 	mov.w	r9, #0
 8015aec:	e7d9      	b.n	8015aa2 <_printf_float+0x152>
 8015aee:	b913      	cbnz	r3, 8015af6 <_printf_float+0x1a6>
 8015af0:	6822      	ldr	r2, [r4, #0]
 8015af2:	07d0      	lsls	r0, r2, #31
 8015af4:	d501      	bpl.n	8015afa <_printf_float+0x1aa>
 8015af6:	3302      	adds	r3, #2
 8015af8:	e7f3      	b.n	8015ae2 <_printf_float+0x192>
 8015afa:	2301      	movs	r3, #1
 8015afc:	e7f1      	b.n	8015ae2 <_printf_float+0x192>
 8015afe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015b02:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015b06:	4293      	cmp	r3, r2
 8015b08:	db05      	blt.n	8015b16 <_printf_float+0x1c6>
 8015b0a:	6822      	ldr	r2, [r4, #0]
 8015b0c:	6123      	str	r3, [r4, #16]
 8015b0e:	07d1      	lsls	r1, r2, #31
 8015b10:	d5e8      	bpl.n	8015ae4 <_printf_float+0x194>
 8015b12:	3301      	adds	r3, #1
 8015b14:	e7e5      	b.n	8015ae2 <_printf_float+0x192>
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	bfd4      	ite	le
 8015b1a:	f1c3 0302 	rsble	r3, r3, #2
 8015b1e:	2301      	movgt	r3, #1
 8015b20:	4413      	add	r3, r2
 8015b22:	e7de      	b.n	8015ae2 <_printf_float+0x192>
 8015b24:	6823      	ldr	r3, [r4, #0]
 8015b26:	055a      	lsls	r2, r3, #21
 8015b28:	d407      	bmi.n	8015b3a <_printf_float+0x1ea>
 8015b2a:	6923      	ldr	r3, [r4, #16]
 8015b2c:	4642      	mov	r2, r8
 8015b2e:	4631      	mov	r1, r6
 8015b30:	4628      	mov	r0, r5
 8015b32:	47b8      	blx	r7
 8015b34:	3001      	adds	r0, #1
 8015b36:	d12b      	bne.n	8015b90 <_printf_float+0x240>
 8015b38:	e767      	b.n	8015a0a <_printf_float+0xba>
 8015b3a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015b3e:	f240 80dc 	bls.w	8015cfa <_printf_float+0x3aa>
 8015b42:	2200      	movs	r2, #0
 8015b44:	2300      	movs	r3, #0
 8015b46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015b4a:	f7f2 fef5 	bl	8008938 <__aeabi_dcmpeq>
 8015b4e:	2800      	cmp	r0, #0
 8015b50:	d033      	beq.n	8015bba <_printf_float+0x26a>
 8015b52:	2301      	movs	r3, #1
 8015b54:	4a41      	ldr	r2, [pc, #260]	; (8015c5c <_printf_float+0x30c>)
 8015b56:	4631      	mov	r1, r6
 8015b58:	4628      	mov	r0, r5
 8015b5a:	47b8      	blx	r7
 8015b5c:	3001      	adds	r0, #1
 8015b5e:	f43f af54 	beq.w	8015a0a <_printf_float+0xba>
 8015b62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015b66:	429a      	cmp	r2, r3
 8015b68:	db02      	blt.n	8015b70 <_printf_float+0x220>
 8015b6a:	6823      	ldr	r3, [r4, #0]
 8015b6c:	07d8      	lsls	r0, r3, #31
 8015b6e:	d50f      	bpl.n	8015b90 <_printf_float+0x240>
 8015b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015b74:	4631      	mov	r1, r6
 8015b76:	4628      	mov	r0, r5
 8015b78:	47b8      	blx	r7
 8015b7a:	3001      	adds	r0, #1
 8015b7c:	f43f af45 	beq.w	8015a0a <_printf_float+0xba>
 8015b80:	f04f 0800 	mov.w	r8, #0
 8015b84:	f104 091a 	add.w	r9, r4, #26
 8015b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b8a:	3b01      	subs	r3, #1
 8015b8c:	4543      	cmp	r3, r8
 8015b8e:	dc09      	bgt.n	8015ba4 <_printf_float+0x254>
 8015b90:	6823      	ldr	r3, [r4, #0]
 8015b92:	079b      	lsls	r3, r3, #30
 8015b94:	f100 8103 	bmi.w	8015d9e <_printf_float+0x44e>
 8015b98:	68e0      	ldr	r0, [r4, #12]
 8015b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b9c:	4298      	cmp	r0, r3
 8015b9e:	bfb8      	it	lt
 8015ba0:	4618      	movlt	r0, r3
 8015ba2:	e734      	b.n	8015a0e <_printf_float+0xbe>
 8015ba4:	2301      	movs	r3, #1
 8015ba6:	464a      	mov	r2, r9
 8015ba8:	4631      	mov	r1, r6
 8015baa:	4628      	mov	r0, r5
 8015bac:	47b8      	blx	r7
 8015bae:	3001      	adds	r0, #1
 8015bb0:	f43f af2b 	beq.w	8015a0a <_printf_float+0xba>
 8015bb4:	f108 0801 	add.w	r8, r8, #1
 8015bb8:	e7e6      	b.n	8015b88 <_printf_float+0x238>
 8015bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	dc2b      	bgt.n	8015c18 <_printf_float+0x2c8>
 8015bc0:	2301      	movs	r3, #1
 8015bc2:	4a26      	ldr	r2, [pc, #152]	; (8015c5c <_printf_float+0x30c>)
 8015bc4:	4631      	mov	r1, r6
 8015bc6:	4628      	mov	r0, r5
 8015bc8:	47b8      	blx	r7
 8015bca:	3001      	adds	r0, #1
 8015bcc:	f43f af1d 	beq.w	8015a0a <_printf_float+0xba>
 8015bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bd2:	b923      	cbnz	r3, 8015bde <_printf_float+0x28e>
 8015bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bd6:	b913      	cbnz	r3, 8015bde <_printf_float+0x28e>
 8015bd8:	6823      	ldr	r3, [r4, #0]
 8015bda:	07d9      	lsls	r1, r3, #31
 8015bdc:	d5d8      	bpl.n	8015b90 <_printf_float+0x240>
 8015bde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015be2:	4631      	mov	r1, r6
 8015be4:	4628      	mov	r0, r5
 8015be6:	47b8      	blx	r7
 8015be8:	3001      	adds	r0, #1
 8015bea:	f43f af0e 	beq.w	8015a0a <_printf_float+0xba>
 8015bee:	f04f 0900 	mov.w	r9, #0
 8015bf2:	f104 0a1a 	add.w	sl, r4, #26
 8015bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bf8:	425b      	negs	r3, r3
 8015bfa:	454b      	cmp	r3, r9
 8015bfc:	dc01      	bgt.n	8015c02 <_printf_float+0x2b2>
 8015bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c00:	e794      	b.n	8015b2c <_printf_float+0x1dc>
 8015c02:	2301      	movs	r3, #1
 8015c04:	4652      	mov	r2, sl
 8015c06:	4631      	mov	r1, r6
 8015c08:	4628      	mov	r0, r5
 8015c0a:	47b8      	blx	r7
 8015c0c:	3001      	adds	r0, #1
 8015c0e:	f43f aefc 	beq.w	8015a0a <_printf_float+0xba>
 8015c12:	f109 0901 	add.w	r9, r9, #1
 8015c16:	e7ee      	b.n	8015bf6 <_printf_float+0x2a6>
 8015c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015c1c:	429a      	cmp	r2, r3
 8015c1e:	bfa8      	it	ge
 8015c20:	461a      	movge	r2, r3
 8015c22:	2a00      	cmp	r2, #0
 8015c24:	4691      	mov	r9, r2
 8015c26:	dd07      	ble.n	8015c38 <_printf_float+0x2e8>
 8015c28:	4613      	mov	r3, r2
 8015c2a:	4631      	mov	r1, r6
 8015c2c:	4642      	mov	r2, r8
 8015c2e:	4628      	mov	r0, r5
 8015c30:	47b8      	blx	r7
 8015c32:	3001      	adds	r0, #1
 8015c34:	f43f aee9 	beq.w	8015a0a <_printf_float+0xba>
 8015c38:	f104 031a 	add.w	r3, r4, #26
 8015c3c:	f04f 0b00 	mov.w	fp, #0
 8015c40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015c44:	9306      	str	r3, [sp, #24]
 8015c46:	e015      	b.n	8015c74 <_printf_float+0x324>
 8015c48:	7fefffff 	.word	0x7fefffff
 8015c4c:	080180e4 	.word	0x080180e4
 8015c50:	080180e0 	.word	0x080180e0
 8015c54:	080180ec 	.word	0x080180ec
 8015c58:	080180e8 	.word	0x080180e8
 8015c5c:	080180f0 	.word	0x080180f0
 8015c60:	2301      	movs	r3, #1
 8015c62:	9a06      	ldr	r2, [sp, #24]
 8015c64:	4631      	mov	r1, r6
 8015c66:	4628      	mov	r0, r5
 8015c68:	47b8      	blx	r7
 8015c6a:	3001      	adds	r0, #1
 8015c6c:	f43f aecd 	beq.w	8015a0a <_printf_float+0xba>
 8015c70:	f10b 0b01 	add.w	fp, fp, #1
 8015c74:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015c78:	ebaa 0309 	sub.w	r3, sl, r9
 8015c7c:	455b      	cmp	r3, fp
 8015c7e:	dcef      	bgt.n	8015c60 <_printf_float+0x310>
 8015c80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015c84:	429a      	cmp	r2, r3
 8015c86:	44d0      	add	r8, sl
 8015c88:	db15      	blt.n	8015cb6 <_printf_float+0x366>
 8015c8a:	6823      	ldr	r3, [r4, #0]
 8015c8c:	07da      	lsls	r2, r3, #31
 8015c8e:	d412      	bmi.n	8015cb6 <_printf_float+0x366>
 8015c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c94:	eba3 020a 	sub.w	r2, r3, sl
 8015c98:	eba3 0a01 	sub.w	sl, r3, r1
 8015c9c:	4592      	cmp	sl, r2
 8015c9e:	bfa8      	it	ge
 8015ca0:	4692      	movge	sl, r2
 8015ca2:	f1ba 0f00 	cmp.w	sl, #0
 8015ca6:	dc0e      	bgt.n	8015cc6 <_printf_float+0x376>
 8015ca8:	f04f 0800 	mov.w	r8, #0
 8015cac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015cb0:	f104 091a 	add.w	r9, r4, #26
 8015cb4:	e019      	b.n	8015cea <_printf_float+0x39a>
 8015cb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015cba:	4631      	mov	r1, r6
 8015cbc:	4628      	mov	r0, r5
 8015cbe:	47b8      	blx	r7
 8015cc0:	3001      	adds	r0, #1
 8015cc2:	d1e5      	bne.n	8015c90 <_printf_float+0x340>
 8015cc4:	e6a1      	b.n	8015a0a <_printf_float+0xba>
 8015cc6:	4653      	mov	r3, sl
 8015cc8:	4642      	mov	r2, r8
 8015cca:	4631      	mov	r1, r6
 8015ccc:	4628      	mov	r0, r5
 8015cce:	47b8      	blx	r7
 8015cd0:	3001      	adds	r0, #1
 8015cd2:	d1e9      	bne.n	8015ca8 <_printf_float+0x358>
 8015cd4:	e699      	b.n	8015a0a <_printf_float+0xba>
 8015cd6:	2301      	movs	r3, #1
 8015cd8:	464a      	mov	r2, r9
 8015cda:	4631      	mov	r1, r6
 8015cdc:	4628      	mov	r0, r5
 8015cde:	47b8      	blx	r7
 8015ce0:	3001      	adds	r0, #1
 8015ce2:	f43f ae92 	beq.w	8015a0a <_printf_float+0xba>
 8015ce6:	f108 0801 	add.w	r8, r8, #1
 8015cea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015cee:	1a9b      	subs	r3, r3, r2
 8015cf0:	eba3 030a 	sub.w	r3, r3, sl
 8015cf4:	4543      	cmp	r3, r8
 8015cf6:	dcee      	bgt.n	8015cd6 <_printf_float+0x386>
 8015cf8:	e74a      	b.n	8015b90 <_printf_float+0x240>
 8015cfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015cfc:	2a01      	cmp	r2, #1
 8015cfe:	dc01      	bgt.n	8015d04 <_printf_float+0x3b4>
 8015d00:	07db      	lsls	r3, r3, #31
 8015d02:	d53a      	bpl.n	8015d7a <_printf_float+0x42a>
 8015d04:	2301      	movs	r3, #1
 8015d06:	4642      	mov	r2, r8
 8015d08:	4631      	mov	r1, r6
 8015d0a:	4628      	mov	r0, r5
 8015d0c:	47b8      	blx	r7
 8015d0e:	3001      	adds	r0, #1
 8015d10:	f43f ae7b 	beq.w	8015a0a <_printf_float+0xba>
 8015d14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d18:	4631      	mov	r1, r6
 8015d1a:	4628      	mov	r0, r5
 8015d1c:	47b8      	blx	r7
 8015d1e:	3001      	adds	r0, #1
 8015d20:	f108 0801 	add.w	r8, r8, #1
 8015d24:	f43f ae71 	beq.w	8015a0a <_printf_float+0xba>
 8015d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	f103 3aff 	add.w	sl, r3, #4294967295
 8015d30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015d34:	2300      	movs	r3, #0
 8015d36:	f7f2 fdff 	bl	8008938 <__aeabi_dcmpeq>
 8015d3a:	b9c8      	cbnz	r0, 8015d70 <_printf_float+0x420>
 8015d3c:	4653      	mov	r3, sl
 8015d3e:	4642      	mov	r2, r8
 8015d40:	4631      	mov	r1, r6
 8015d42:	4628      	mov	r0, r5
 8015d44:	47b8      	blx	r7
 8015d46:	3001      	adds	r0, #1
 8015d48:	d10e      	bne.n	8015d68 <_printf_float+0x418>
 8015d4a:	e65e      	b.n	8015a0a <_printf_float+0xba>
 8015d4c:	2301      	movs	r3, #1
 8015d4e:	4652      	mov	r2, sl
 8015d50:	4631      	mov	r1, r6
 8015d52:	4628      	mov	r0, r5
 8015d54:	47b8      	blx	r7
 8015d56:	3001      	adds	r0, #1
 8015d58:	f43f ae57 	beq.w	8015a0a <_printf_float+0xba>
 8015d5c:	f108 0801 	add.w	r8, r8, #1
 8015d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d62:	3b01      	subs	r3, #1
 8015d64:	4543      	cmp	r3, r8
 8015d66:	dcf1      	bgt.n	8015d4c <_printf_float+0x3fc>
 8015d68:	464b      	mov	r3, r9
 8015d6a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015d6e:	e6de      	b.n	8015b2e <_printf_float+0x1de>
 8015d70:	f04f 0800 	mov.w	r8, #0
 8015d74:	f104 0a1a 	add.w	sl, r4, #26
 8015d78:	e7f2      	b.n	8015d60 <_printf_float+0x410>
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	e7df      	b.n	8015d3e <_printf_float+0x3ee>
 8015d7e:	2301      	movs	r3, #1
 8015d80:	464a      	mov	r2, r9
 8015d82:	4631      	mov	r1, r6
 8015d84:	4628      	mov	r0, r5
 8015d86:	47b8      	blx	r7
 8015d88:	3001      	adds	r0, #1
 8015d8a:	f43f ae3e 	beq.w	8015a0a <_printf_float+0xba>
 8015d8e:	f108 0801 	add.w	r8, r8, #1
 8015d92:	68e3      	ldr	r3, [r4, #12]
 8015d94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d96:	1a9b      	subs	r3, r3, r2
 8015d98:	4543      	cmp	r3, r8
 8015d9a:	dcf0      	bgt.n	8015d7e <_printf_float+0x42e>
 8015d9c:	e6fc      	b.n	8015b98 <_printf_float+0x248>
 8015d9e:	f04f 0800 	mov.w	r8, #0
 8015da2:	f104 0919 	add.w	r9, r4, #25
 8015da6:	e7f4      	b.n	8015d92 <_printf_float+0x442>
 8015da8:	2900      	cmp	r1, #0
 8015daa:	f43f ae8b 	beq.w	8015ac4 <_printf_float+0x174>
 8015dae:	2300      	movs	r3, #0
 8015db0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015db4:	ab09      	add	r3, sp, #36	; 0x24
 8015db6:	9300      	str	r3, [sp, #0]
 8015db8:	ec49 8b10 	vmov	d0, r8, r9
 8015dbc:	6022      	str	r2, [r4, #0]
 8015dbe:	f8cd a004 	str.w	sl, [sp, #4]
 8015dc2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015dc6:	4628      	mov	r0, r5
 8015dc8:	f7ff fd2d 	bl	8015826 <__cvt>
 8015dcc:	4680      	mov	r8, r0
 8015dce:	e648      	b.n	8015a62 <_printf_float+0x112>

08015dd0 <_printf_common>:
 8015dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015dd4:	4691      	mov	r9, r2
 8015dd6:	461f      	mov	r7, r3
 8015dd8:	688a      	ldr	r2, [r1, #8]
 8015dda:	690b      	ldr	r3, [r1, #16]
 8015ddc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015de0:	4293      	cmp	r3, r2
 8015de2:	bfb8      	it	lt
 8015de4:	4613      	movlt	r3, r2
 8015de6:	f8c9 3000 	str.w	r3, [r9]
 8015dea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015dee:	4606      	mov	r6, r0
 8015df0:	460c      	mov	r4, r1
 8015df2:	b112      	cbz	r2, 8015dfa <_printf_common+0x2a>
 8015df4:	3301      	adds	r3, #1
 8015df6:	f8c9 3000 	str.w	r3, [r9]
 8015dfa:	6823      	ldr	r3, [r4, #0]
 8015dfc:	0699      	lsls	r1, r3, #26
 8015dfe:	bf42      	ittt	mi
 8015e00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015e04:	3302      	addmi	r3, #2
 8015e06:	f8c9 3000 	strmi.w	r3, [r9]
 8015e0a:	6825      	ldr	r5, [r4, #0]
 8015e0c:	f015 0506 	ands.w	r5, r5, #6
 8015e10:	d107      	bne.n	8015e22 <_printf_common+0x52>
 8015e12:	f104 0a19 	add.w	sl, r4, #25
 8015e16:	68e3      	ldr	r3, [r4, #12]
 8015e18:	f8d9 2000 	ldr.w	r2, [r9]
 8015e1c:	1a9b      	subs	r3, r3, r2
 8015e1e:	42ab      	cmp	r3, r5
 8015e20:	dc28      	bgt.n	8015e74 <_printf_common+0xa4>
 8015e22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015e26:	6822      	ldr	r2, [r4, #0]
 8015e28:	3300      	adds	r3, #0
 8015e2a:	bf18      	it	ne
 8015e2c:	2301      	movne	r3, #1
 8015e2e:	0692      	lsls	r2, r2, #26
 8015e30:	d42d      	bmi.n	8015e8e <_printf_common+0xbe>
 8015e32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015e36:	4639      	mov	r1, r7
 8015e38:	4630      	mov	r0, r6
 8015e3a:	47c0      	blx	r8
 8015e3c:	3001      	adds	r0, #1
 8015e3e:	d020      	beq.n	8015e82 <_printf_common+0xb2>
 8015e40:	6823      	ldr	r3, [r4, #0]
 8015e42:	68e5      	ldr	r5, [r4, #12]
 8015e44:	f8d9 2000 	ldr.w	r2, [r9]
 8015e48:	f003 0306 	and.w	r3, r3, #6
 8015e4c:	2b04      	cmp	r3, #4
 8015e4e:	bf08      	it	eq
 8015e50:	1aad      	subeq	r5, r5, r2
 8015e52:	68a3      	ldr	r3, [r4, #8]
 8015e54:	6922      	ldr	r2, [r4, #16]
 8015e56:	bf0c      	ite	eq
 8015e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e5c:	2500      	movne	r5, #0
 8015e5e:	4293      	cmp	r3, r2
 8015e60:	bfc4      	itt	gt
 8015e62:	1a9b      	subgt	r3, r3, r2
 8015e64:	18ed      	addgt	r5, r5, r3
 8015e66:	f04f 0900 	mov.w	r9, #0
 8015e6a:	341a      	adds	r4, #26
 8015e6c:	454d      	cmp	r5, r9
 8015e6e:	d11a      	bne.n	8015ea6 <_printf_common+0xd6>
 8015e70:	2000      	movs	r0, #0
 8015e72:	e008      	b.n	8015e86 <_printf_common+0xb6>
 8015e74:	2301      	movs	r3, #1
 8015e76:	4652      	mov	r2, sl
 8015e78:	4639      	mov	r1, r7
 8015e7a:	4630      	mov	r0, r6
 8015e7c:	47c0      	blx	r8
 8015e7e:	3001      	adds	r0, #1
 8015e80:	d103      	bne.n	8015e8a <_printf_common+0xba>
 8015e82:	f04f 30ff 	mov.w	r0, #4294967295
 8015e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e8a:	3501      	adds	r5, #1
 8015e8c:	e7c3      	b.n	8015e16 <_printf_common+0x46>
 8015e8e:	18e1      	adds	r1, r4, r3
 8015e90:	1c5a      	adds	r2, r3, #1
 8015e92:	2030      	movs	r0, #48	; 0x30
 8015e94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015e98:	4422      	add	r2, r4
 8015e9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015e9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015ea2:	3302      	adds	r3, #2
 8015ea4:	e7c5      	b.n	8015e32 <_printf_common+0x62>
 8015ea6:	2301      	movs	r3, #1
 8015ea8:	4622      	mov	r2, r4
 8015eaa:	4639      	mov	r1, r7
 8015eac:	4630      	mov	r0, r6
 8015eae:	47c0      	blx	r8
 8015eb0:	3001      	adds	r0, #1
 8015eb2:	d0e6      	beq.n	8015e82 <_printf_common+0xb2>
 8015eb4:	f109 0901 	add.w	r9, r9, #1
 8015eb8:	e7d8      	b.n	8015e6c <_printf_common+0x9c>
	...

08015ebc <_printf_i>:
 8015ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ec0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015ec4:	460c      	mov	r4, r1
 8015ec6:	7e09      	ldrb	r1, [r1, #24]
 8015ec8:	b085      	sub	sp, #20
 8015eca:	296e      	cmp	r1, #110	; 0x6e
 8015ecc:	4617      	mov	r7, r2
 8015ece:	4606      	mov	r6, r0
 8015ed0:	4698      	mov	r8, r3
 8015ed2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015ed4:	f000 80b3 	beq.w	801603e <_printf_i+0x182>
 8015ed8:	d822      	bhi.n	8015f20 <_printf_i+0x64>
 8015eda:	2963      	cmp	r1, #99	; 0x63
 8015edc:	d036      	beq.n	8015f4c <_printf_i+0x90>
 8015ede:	d80a      	bhi.n	8015ef6 <_printf_i+0x3a>
 8015ee0:	2900      	cmp	r1, #0
 8015ee2:	f000 80b9 	beq.w	8016058 <_printf_i+0x19c>
 8015ee6:	2958      	cmp	r1, #88	; 0x58
 8015ee8:	f000 8083 	beq.w	8015ff2 <_printf_i+0x136>
 8015eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ef0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015ef4:	e032      	b.n	8015f5c <_printf_i+0xa0>
 8015ef6:	2964      	cmp	r1, #100	; 0x64
 8015ef8:	d001      	beq.n	8015efe <_printf_i+0x42>
 8015efa:	2969      	cmp	r1, #105	; 0x69
 8015efc:	d1f6      	bne.n	8015eec <_printf_i+0x30>
 8015efe:	6820      	ldr	r0, [r4, #0]
 8015f00:	6813      	ldr	r3, [r2, #0]
 8015f02:	0605      	lsls	r5, r0, #24
 8015f04:	f103 0104 	add.w	r1, r3, #4
 8015f08:	d52a      	bpl.n	8015f60 <_printf_i+0xa4>
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	6011      	str	r1, [r2, #0]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	da03      	bge.n	8015f1a <_printf_i+0x5e>
 8015f12:	222d      	movs	r2, #45	; 0x2d
 8015f14:	425b      	negs	r3, r3
 8015f16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015f1a:	486f      	ldr	r0, [pc, #444]	; (80160d8 <_printf_i+0x21c>)
 8015f1c:	220a      	movs	r2, #10
 8015f1e:	e039      	b.n	8015f94 <_printf_i+0xd8>
 8015f20:	2973      	cmp	r1, #115	; 0x73
 8015f22:	f000 809d 	beq.w	8016060 <_printf_i+0x1a4>
 8015f26:	d808      	bhi.n	8015f3a <_printf_i+0x7e>
 8015f28:	296f      	cmp	r1, #111	; 0x6f
 8015f2a:	d020      	beq.n	8015f6e <_printf_i+0xb2>
 8015f2c:	2970      	cmp	r1, #112	; 0x70
 8015f2e:	d1dd      	bne.n	8015eec <_printf_i+0x30>
 8015f30:	6823      	ldr	r3, [r4, #0]
 8015f32:	f043 0320 	orr.w	r3, r3, #32
 8015f36:	6023      	str	r3, [r4, #0]
 8015f38:	e003      	b.n	8015f42 <_printf_i+0x86>
 8015f3a:	2975      	cmp	r1, #117	; 0x75
 8015f3c:	d017      	beq.n	8015f6e <_printf_i+0xb2>
 8015f3e:	2978      	cmp	r1, #120	; 0x78
 8015f40:	d1d4      	bne.n	8015eec <_printf_i+0x30>
 8015f42:	2378      	movs	r3, #120	; 0x78
 8015f44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015f48:	4864      	ldr	r0, [pc, #400]	; (80160dc <_printf_i+0x220>)
 8015f4a:	e055      	b.n	8015ff8 <_printf_i+0x13c>
 8015f4c:	6813      	ldr	r3, [r2, #0]
 8015f4e:	1d19      	adds	r1, r3, #4
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	6011      	str	r1, [r2, #0]
 8015f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015f5c:	2301      	movs	r3, #1
 8015f5e:	e08c      	b.n	801607a <_printf_i+0x1be>
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	6011      	str	r1, [r2, #0]
 8015f64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015f68:	bf18      	it	ne
 8015f6a:	b21b      	sxthne	r3, r3
 8015f6c:	e7cf      	b.n	8015f0e <_printf_i+0x52>
 8015f6e:	6813      	ldr	r3, [r2, #0]
 8015f70:	6825      	ldr	r5, [r4, #0]
 8015f72:	1d18      	adds	r0, r3, #4
 8015f74:	6010      	str	r0, [r2, #0]
 8015f76:	0628      	lsls	r0, r5, #24
 8015f78:	d501      	bpl.n	8015f7e <_printf_i+0xc2>
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	e002      	b.n	8015f84 <_printf_i+0xc8>
 8015f7e:	0668      	lsls	r0, r5, #25
 8015f80:	d5fb      	bpl.n	8015f7a <_printf_i+0xbe>
 8015f82:	881b      	ldrh	r3, [r3, #0]
 8015f84:	4854      	ldr	r0, [pc, #336]	; (80160d8 <_printf_i+0x21c>)
 8015f86:	296f      	cmp	r1, #111	; 0x6f
 8015f88:	bf14      	ite	ne
 8015f8a:	220a      	movne	r2, #10
 8015f8c:	2208      	moveq	r2, #8
 8015f8e:	2100      	movs	r1, #0
 8015f90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015f94:	6865      	ldr	r5, [r4, #4]
 8015f96:	60a5      	str	r5, [r4, #8]
 8015f98:	2d00      	cmp	r5, #0
 8015f9a:	f2c0 8095 	blt.w	80160c8 <_printf_i+0x20c>
 8015f9e:	6821      	ldr	r1, [r4, #0]
 8015fa0:	f021 0104 	bic.w	r1, r1, #4
 8015fa4:	6021      	str	r1, [r4, #0]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d13d      	bne.n	8016026 <_printf_i+0x16a>
 8015faa:	2d00      	cmp	r5, #0
 8015fac:	f040 808e 	bne.w	80160cc <_printf_i+0x210>
 8015fb0:	4665      	mov	r5, ip
 8015fb2:	2a08      	cmp	r2, #8
 8015fb4:	d10b      	bne.n	8015fce <_printf_i+0x112>
 8015fb6:	6823      	ldr	r3, [r4, #0]
 8015fb8:	07db      	lsls	r3, r3, #31
 8015fba:	d508      	bpl.n	8015fce <_printf_i+0x112>
 8015fbc:	6923      	ldr	r3, [r4, #16]
 8015fbe:	6862      	ldr	r2, [r4, #4]
 8015fc0:	429a      	cmp	r2, r3
 8015fc2:	bfde      	ittt	le
 8015fc4:	2330      	movle	r3, #48	; 0x30
 8015fc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015fca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015fce:	ebac 0305 	sub.w	r3, ip, r5
 8015fd2:	6123      	str	r3, [r4, #16]
 8015fd4:	f8cd 8000 	str.w	r8, [sp]
 8015fd8:	463b      	mov	r3, r7
 8015fda:	aa03      	add	r2, sp, #12
 8015fdc:	4621      	mov	r1, r4
 8015fde:	4630      	mov	r0, r6
 8015fe0:	f7ff fef6 	bl	8015dd0 <_printf_common>
 8015fe4:	3001      	adds	r0, #1
 8015fe6:	d14d      	bne.n	8016084 <_printf_i+0x1c8>
 8015fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8015fec:	b005      	add	sp, #20
 8015fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ff2:	4839      	ldr	r0, [pc, #228]	; (80160d8 <_printf_i+0x21c>)
 8015ff4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015ff8:	6813      	ldr	r3, [r2, #0]
 8015ffa:	6821      	ldr	r1, [r4, #0]
 8015ffc:	1d1d      	adds	r5, r3, #4
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	6015      	str	r5, [r2, #0]
 8016002:	060a      	lsls	r2, r1, #24
 8016004:	d50b      	bpl.n	801601e <_printf_i+0x162>
 8016006:	07ca      	lsls	r2, r1, #31
 8016008:	bf44      	itt	mi
 801600a:	f041 0120 	orrmi.w	r1, r1, #32
 801600e:	6021      	strmi	r1, [r4, #0]
 8016010:	b91b      	cbnz	r3, 801601a <_printf_i+0x15e>
 8016012:	6822      	ldr	r2, [r4, #0]
 8016014:	f022 0220 	bic.w	r2, r2, #32
 8016018:	6022      	str	r2, [r4, #0]
 801601a:	2210      	movs	r2, #16
 801601c:	e7b7      	b.n	8015f8e <_printf_i+0xd2>
 801601e:	064d      	lsls	r5, r1, #25
 8016020:	bf48      	it	mi
 8016022:	b29b      	uxthmi	r3, r3
 8016024:	e7ef      	b.n	8016006 <_printf_i+0x14a>
 8016026:	4665      	mov	r5, ip
 8016028:	fbb3 f1f2 	udiv	r1, r3, r2
 801602c:	fb02 3311 	mls	r3, r2, r1, r3
 8016030:	5cc3      	ldrb	r3, [r0, r3]
 8016032:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016036:	460b      	mov	r3, r1
 8016038:	2900      	cmp	r1, #0
 801603a:	d1f5      	bne.n	8016028 <_printf_i+0x16c>
 801603c:	e7b9      	b.n	8015fb2 <_printf_i+0xf6>
 801603e:	6813      	ldr	r3, [r2, #0]
 8016040:	6825      	ldr	r5, [r4, #0]
 8016042:	6961      	ldr	r1, [r4, #20]
 8016044:	1d18      	adds	r0, r3, #4
 8016046:	6010      	str	r0, [r2, #0]
 8016048:	0628      	lsls	r0, r5, #24
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	d501      	bpl.n	8016052 <_printf_i+0x196>
 801604e:	6019      	str	r1, [r3, #0]
 8016050:	e002      	b.n	8016058 <_printf_i+0x19c>
 8016052:	066a      	lsls	r2, r5, #25
 8016054:	d5fb      	bpl.n	801604e <_printf_i+0x192>
 8016056:	8019      	strh	r1, [r3, #0]
 8016058:	2300      	movs	r3, #0
 801605a:	6123      	str	r3, [r4, #16]
 801605c:	4665      	mov	r5, ip
 801605e:	e7b9      	b.n	8015fd4 <_printf_i+0x118>
 8016060:	6813      	ldr	r3, [r2, #0]
 8016062:	1d19      	adds	r1, r3, #4
 8016064:	6011      	str	r1, [r2, #0]
 8016066:	681d      	ldr	r5, [r3, #0]
 8016068:	6862      	ldr	r2, [r4, #4]
 801606a:	2100      	movs	r1, #0
 801606c:	4628      	mov	r0, r5
 801606e:	f7f1 ffef 	bl	8008050 <memchr>
 8016072:	b108      	cbz	r0, 8016078 <_printf_i+0x1bc>
 8016074:	1b40      	subs	r0, r0, r5
 8016076:	6060      	str	r0, [r4, #4]
 8016078:	6863      	ldr	r3, [r4, #4]
 801607a:	6123      	str	r3, [r4, #16]
 801607c:	2300      	movs	r3, #0
 801607e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016082:	e7a7      	b.n	8015fd4 <_printf_i+0x118>
 8016084:	6923      	ldr	r3, [r4, #16]
 8016086:	462a      	mov	r2, r5
 8016088:	4639      	mov	r1, r7
 801608a:	4630      	mov	r0, r6
 801608c:	47c0      	blx	r8
 801608e:	3001      	adds	r0, #1
 8016090:	d0aa      	beq.n	8015fe8 <_printf_i+0x12c>
 8016092:	6823      	ldr	r3, [r4, #0]
 8016094:	079b      	lsls	r3, r3, #30
 8016096:	d413      	bmi.n	80160c0 <_printf_i+0x204>
 8016098:	68e0      	ldr	r0, [r4, #12]
 801609a:	9b03      	ldr	r3, [sp, #12]
 801609c:	4298      	cmp	r0, r3
 801609e:	bfb8      	it	lt
 80160a0:	4618      	movlt	r0, r3
 80160a2:	e7a3      	b.n	8015fec <_printf_i+0x130>
 80160a4:	2301      	movs	r3, #1
 80160a6:	464a      	mov	r2, r9
 80160a8:	4639      	mov	r1, r7
 80160aa:	4630      	mov	r0, r6
 80160ac:	47c0      	blx	r8
 80160ae:	3001      	adds	r0, #1
 80160b0:	d09a      	beq.n	8015fe8 <_printf_i+0x12c>
 80160b2:	3501      	adds	r5, #1
 80160b4:	68e3      	ldr	r3, [r4, #12]
 80160b6:	9a03      	ldr	r2, [sp, #12]
 80160b8:	1a9b      	subs	r3, r3, r2
 80160ba:	42ab      	cmp	r3, r5
 80160bc:	dcf2      	bgt.n	80160a4 <_printf_i+0x1e8>
 80160be:	e7eb      	b.n	8016098 <_printf_i+0x1dc>
 80160c0:	2500      	movs	r5, #0
 80160c2:	f104 0919 	add.w	r9, r4, #25
 80160c6:	e7f5      	b.n	80160b4 <_printf_i+0x1f8>
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d1ac      	bne.n	8016026 <_printf_i+0x16a>
 80160cc:	7803      	ldrb	r3, [r0, #0]
 80160ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80160d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80160d6:	e76c      	b.n	8015fb2 <_printf_i+0xf6>
 80160d8:	080180f2 	.word	0x080180f2
 80160dc:	08018103 	.word	0x08018103

080160e0 <iprintf>:
 80160e0:	b40f      	push	{r0, r1, r2, r3}
 80160e2:	4b0a      	ldr	r3, [pc, #40]	; (801610c <iprintf+0x2c>)
 80160e4:	b513      	push	{r0, r1, r4, lr}
 80160e6:	681c      	ldr	r4, [r3, #0]
 80160e8:	b124      	cbz	r4, 80160f4 <iprintf+0x14>
 80160ea:	69a3      	ldr	r3, [r4, #24]
 80160ec:	b913      	cbnz	r3, 80160f4 <iprintf+0x14>
 80160ee:	4620      	mov	r0, r4
 80160f0:	f001 f866 	bl	80171c0 <__sinit>
 80160f4:	ab05      	add	r3, sp, #20
 80160f6:	9a04      	ldr	r2, [sp, #16]
 80160f8:	68a1      	ldr	r1, [r4, #8]
 80160fa:	9301      	str	r3, [sp, #4]
 80160fc:	4620      	mov	r0, r4
 80160fe:	f001 fd1f 	bl	8017b40 <_vfiprintf_r>
 8016102:	b002      	add	sp, #8
 8016104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016108:	b004      	add	sp, #16
 801610a:	4770      	bx	lr
 801610c:	2000008c 	.word	0x2000008c

08016110 <_puts_r>:
 8016110:	b570      	push	{r4, r5, r6, lr}
 8016112:	460e      	mov	r6, r1
 8016114:	4605      	mov	r5, r0
 8016116:	b118      	cbz	r0, 8016120 <_puts_r+0x10>
 8016118:	6983      	ldr	r3, [r0, #24]
 801611a:	b90b      	cbnz	r3, 8016120 <_puts_r+0x10>
 801611c:	f001 f850 	bl	80171c0 <__sinit>
 8016120:	69ab      	ldr	r3, [r5, #24]
 8016122:	68ac      	ldr	r4, [r5, #8]
 8016124:	b913      	cbnz	r3, 801612c <_puts_r+0x1c>
 8016126:	4628      	mov	r0, r5
 8016128:	f001 f84a 	bl	80171c0 <__sinit>
 801612c:	4b23      	ldr	r3, [pc, #140]	; (80161bc <_puts_r+0xac>)
 801612e:	429c      	cmp	r4, r3
 8016130:	d117      	bne.n	8016162 <_puts_r+0x52>
 8016132:	686c      	ldr	r4, [r5, #4]
 8016134:	89a3      	ldrh	r3, [r4, #12]
 8016136:	071b      	lsls	r3, r3, #28
 8016138:	d51d      	bpl.n	8016176 <_puts_r+0x66>
 801613a:	6923      	ldr	r3, [r4, #16]
 801613c:	b1db      	cbz	r3, 8016176 <_puts_r+0x66>
 801613e:	3e01      	subs	r6, #1
 8016140:	68a3      	ldr	r3, [r4, #8]
 8016142:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016146:	3b01      	subs	r3, #1
 8016148:	60a3      	str	r3, [r4, #8]
 801614a:	b9e9      	cbnz	r1, 8016188 <_puts_r+0x78>
 801614c:	2b00      	cmp	r3, #0
 801614e:	da2e      	bge.n	80161ae <_puts_r+0x9e>
 8016150:	4622      	mov	r2, r4
 8016152:	210a      	movs	r1, #10
 8016154:	4628      	mov	r0, r5
 8016156:	f000 f83f 	bl	80161d8 <__swbuf_r>
 801615a:	3001      	adds	r0, #1
 801615c:	d011      	beq.n	8016182 <_puts_r+0x72>
 801615e:	200a      	movs	r0, #10
 8016160:	e011      	b.n	8016186 <_puts_r+0x76>
 8016162:	4b17      	ldr	r3, [pc, #92]	; (80161c0 <_puts_r+0xb0>)
 8016164:	429c      	cmp	r4, r3
 8016166:	d101      	bne.n	801616c <_puts_r+0x5c>
 8016168:	68ac      	ldr	r4, [r5, #8]
 801616a:	e7e3      	b.n	8016134 <_puts_r+0x24>
 801616c:	4b15      	ldr	r3, [pc, #84]	; (80161c4 <_puts_r+0xb4>)
 801616e:	429c      	cmp	r4, r3
 8016170:	bf08      	it	eq
 8016172:	68ec      	ldreq	r4, [r5, #12]
 8016174:	e7de      	b.n	8016134 <_puts_r+0x24>
 8016176:	4621      	mov	r1, r4
 8016178:	4628      	mov	r0, r5
 801617a:	f000 f87f 	bl	801627c <__swsetup_r>
 801617e:	2800      	cmp	r0, #0
 8016180:	d0dd      	beq.n	801613e <_puts_r+0x2e>
 8016182:	f04f 30ff 	mov.w	r0, #4294967295
 8016186:	bd70      	pop	{r4, r5, r6, pc}
 8016188:	2b00      	cmp	r3, #0
 801618a:	da04      	bge.n	8016196 <_puts_r+0x86>
 801618c:	69a2      	ldr	r2, [r4, #24]
 801618e:	429a      	cmp	r2, r3
 8016190:	dc06      	bgt.n	80161a0 <_puts_r+0x90>
 8016192:	290a      	cmp	r1, #10
 8016194:	d004      	beq.n	80161a0 <_puts_r+0x90>
 8016196:	6823      	ldr	r3, [r4, #0]
 8016198:	1c5a      	adds	r2, r3, #1
 801619a:	6022      	str	r2, [r4, #0]
 801619c:	7019      	strb	r1, [r3, #0]
 801619e:	e7cf      	b.n	8016140 <_puts_r+0x30>
 80161a0:	4622      	mov	r2, r4
 80161a2:	4628      	mov	r0, r5
 80161a4:	f000 f818 	bl	80161d8 <__swbuf_r>
 80161a8:	3001      	adds	r0, #1
 80161aa:	d1c9      	bne.n	8016140 <_puts_r+0x30>
 80161ac:	e7e9      	b.n	8016182 <_puts_r+0x72>
 80161ae:	6823      	ldr	r3, [r4, #0]
 80161b0:	200a      	movs	r0, #10
 80161b2:	1c5a      	adds	r2, r3, #1
 80161b4:	6022      	str	r2, [r4, #0]
 80161b6:	7018      	strb	r0, [r3, #0]
 80161b8:	e7e5      	b.n	8016186 <_puts_r+0x76>
 80161ba:	bf00      	nop
 80161bc:	08018144 	.word	0x08018144
 80161c0:	08018164 	.word	0x08018164
 80161c4:	08018124 	.word	0x08018124

080161c8 <puts>:
 80161c8:	4b02      	ldr	r3, [pc, #8]	; (80161d4 <puts+0xc>)
 80161ca:	4601      	mov	r1, r0
 80161cc:	6818      	ldr	r0, [r3, #0]
 80161ce:	f7ff bf9f 	b.w	8016110 <_puts_r>
 80161d2:	bf00      	nop
 80161d4:	2000008c 	.word	0x2000008c

080161d8 <__swbuf_r>:
 80161d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161da:	460e      	mov	r6, r1
 80161dc:	4614      	mov	r4, r2
 80161de:	4605      	mov	r5, r0
 80161e0:	b118      	cbz	r0, 80161ea <__swbuf_r+0x12>
 80161e2:	6983      	ldr	r3, [r0, #24]
 80161e4:	b90b      	cbnz	r3, 80161ea <__swbuf_r+0x12>
 80161e6:	f000 ffeb 	bl	80171c0 <__sinit>
 80161ea:	4b21      	ldr	r3, [pc, #132]	; (8016270 <__swbuf_r+0x98>)
 80161ec:	429c      	cmp	r4, r3
 80161ee:	d12a      	bne.n	8016246 <__swbuf_r+0x6e>
 80161f0:	686c      	ldr	r4, [r5, #4]
 80161f2:	69a3      	ldr	r3, [r4, #24]
 80161f4:	60a3      	str	r3, [r4, #8]
 80161f6:	89a3      	ldrh	r3, [r4, #12]
 80161f8:	071a      	lsls	r2, r3, #28
 80161fa:	d52e      	bpl.n	801625a <__swbuf_r+0x82>
 80161fc:	6923      	ldr	r3, [r4, #16]
 80161fe:	b363      	cbz	r3, 801625a <__swbuf_r+0x82>
 8016200:	6923      	ldr	r3, [r4, #16]
 8016202:	6820      	ldr	r0, [r4, #0]
 8016204:	1ac0      	subs	r0, r0, r3
 8016206:	6963      	ldr	r3, [r4, #20]
 8016208:	b2f6      	uxtb	r6, r6
 801620a:	4283      	cmp	r3, r0
 801620c:	4637      	mov	r7, r6
 801620e:	dc04      	bgt.n	801621a <__swbuf_r+0x42>
 8016210:	4621      	mov	r1, r4
 8016212:	4628      	mov	r0, r5
 8016214:	f000 ff6a 	bl	80170ec <_fflush_r>
 8016218:	bb28      	cbnz	r0, 8016266 <__swbuf_r+0x8e>
 801621a:	68a3      	ldr	r3, [r4, #8]
 801621c:	3b01      	subs	r3, #1
 801621e:	60a3      	str	r3, [r4, #8]
 8016220:	6823      	ldr	r3, [r4, #0]
 8016222:	1c5a      	adds	r2, r3, #1
 8016224:	6022      	str	r2, [r4, #0]
 8016226:	701e      	strb	r6, [r3, #0]
 8016228:	6963      	ldr	r3, [r4, #20]
 801622a:	3001      	adds	r0, #1
 801622c:	4283      	cmp	r3, r0
 801622e:	d004      	beq.n	801623a <__swbuf_r+0x62>
 8016230:	89a3      	ldrh	r3, [r4, #12]
 8016232:	07db      	lsls	r3, r3, #31
 8016234:	d519      	bpl.n	801626a <__swbuf_r+0x92>
 8016236:	2e0a      	cmp	r6, #10
 8016238:	d117      	bne.n	801626a <__swbuf_r+0x92>
 801623a:	4621      	mov	r1, r4
 801623c:	4628      	mov	r0, r5
 801623e:	f000 ff55 	bl	80170ec <_fflush_r>
 8016242:	b190      	cbz	r0, 801626a <__swbuf_r+0x92>
 8016244:	e00f      	b.n	8016266 <__swbuf_r+0x8e>
 8016246:	4b0b      	ldr	r3, [pc, #44]	; (8016274 <__swbuf_r+0x9c>)
 8016248:	429c      	cmp	r4, r3
 801624a:	d101      	bne.n	8016250 <__swbuf_r+0x78>
 801624c:	68ac      	ldr	r4, [r5, #8]
 801624e:	e7d0      	b.n	80161f2 <__swbuf_r+0x1a>
 8016250:	4b09      	ldr	r3, [pc, #36]	; (8016278 <__swbuf_r+0xa0>)
 8016252:	429c      	cmp	r4, r3
 8016254:	bf08      	it	eq
 8016256:	68ec      	ldreq	r4, [r5, #12]
 8016258:	e7cb      	b.n	80161f2 <__swbuf_r+0x1a>
 801625a:	4621      	mov	r1, r4
 801625c:	4628      	mov	r0, r5
 801625e:	f000 f80d 	bl	801627c <__swsetup_r>
 8016262:	2800      	cmp	r0, #0
 8016264:	d0cc      	beq.n	8016200 <__swbuf_r+0x28>
 8016266:	f04f 37ff 	mov.w	r7, #4294967295
 801626a:	4638      	mov	r0, r7
 801626c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801626e:	bf00      	nop
 8016270:	08018144 	.word	0x08018144
 8016274:	08018164 	.word	0x08018164
 8016278:	08018124 	.word	0x08018124

0801627c <__swsetup_r>:
 801627c:	4b32      	ldr	r3, [pc, #200]	; (8016348 <__swsetup_r+0xcc>)
 801627e:	b570      	push	{r4, r5, r6, lr}
 8016280:	681d      	ldr	r5, [r3, #0]
 8016282:	4606      	mov	r6, r0
 8016284:	460c      	mov	r4, r1
 8016286:	b125      	cbz	r5, 8016292 <__swsetup_r+0x16>
 8016288:	69ab      	ldr	r3, [r5, #24]
 801628a:	b913      	cbnz	r3, 8016292 <__swsetup_r+0x16>
 801628c:	4628      	mov	r0, r5
 801628e:	f000 ff97 	bl	80171c0 <__sinit>
 8016292:	4b2e      	ldr	r3, [pc, #184]	; (801634c <__swsetup_r+0xd0>)
 8016294:	429c      	cmp	r4, r3
 8016296:	d10f      	bne.n	80162b8 <__swsetup_r+0x3c>
 8016298:	686c      	ldr	r4, [r5, #4]
 801629a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801629e:	b29a      	uxth	r2, r3
 80162a0:	0715      	lsls	r5, r2, #28
 80162a2:	d42c      	bmi.n	80162fe <__swsetup_r+0x82>
 80162a4:	06d0      	lsls	r0, r2, #27
 80162a6:	d411      	bmi.n	80162cc <__swsetup_r+0x50>
 80162a8:	2209      	movs	r2, #9
 80162aa:	6032      	str	r2, [r6, #0]
 80162ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162b0:	81a3      	strh	r3, [r4, #12]
 80162b2:	f04f 30ff 	mov.w	r0, #4294967295
 80162b6:	e03e      	b.n	8016336 <__swsetup_r+0xba>
 80162b8:	4b25      	ldr	r3, [pc, #148]	; (8016350 <__swsetup_r+0xd4>)
 80162ba:	429c      	cmp	r4, r3
 80162bc:	d101      	bne.n	80162c2 <__swsetup_r+0x46>
 80162be:	68ac      	ldr	r4, [r5, #8]
 80162c0:	e7eb      	b.n	801629a <__swsetup_r+0x1e>
 80162c2:	4b24      	ldr	r3, [pc, #144]	; (8016354 <__swsetup_r+0xd8>)
 80162c4:	429c      	cmp	r4, r3
 80162c6:	bf08      	it	eq
 80162c8:	68ec      	ldreq	r4, [r5, #12]
 80162ca:	e7e6      	b.n	801629a <__swsetup_r+0x1e>
 80162cc:	0751      	lsls	r1, r2, #29
 80162ce:	d512      	bpl.n	80162f6 <__swsetup_r+0x7a>
 80162d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80162d2:	b141      	cbz	r1, 80162e6 <__swsetup_r+0x6a>
 80162d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80162d8:	4299      	cmp	r1, r3
 80162da:	d002      	beq.n	80162e2 <__swsetup_r+0x66>
 80162dc:	4630      	mov	r0, r6
 80162de:	f001 fb5d 	bl	801799c <_free_r>
 80162e2:	2300      	movs	r3, #0
 80162e4:	6363      	str	r3, [r4, #52]	; 0x34
 80162e6:	89a3      	ldrh	r3, [r4, #12]
 80162e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80162ec:	81a3      	strh	r3, [r4, #12]
 80162ee:	2300      	movs	r3, #0
 80162f0:	6063      	str	r3, [r4, #4]
 80162f2:	6923      	ldr	r3, [r4, #16]
 80162f4:	6023      	str	r3, [r4, #0]
 80162f6:	89a3      	ldrh	r3, [r4, #12]
 80162f8:	f043 0308 	orr.w	r3, r3, #8
 80162fc:	81a3      	strh	r3, [r4, #12]
 80162fe:	6923      	ldr	r3, [r4, #16]
 8016300:	b94b      	cbnz	r3, 8016316 <__swsetup_r+0x9a>
 8016302:	89a3      	ldrh	r3, [r4, #12]
 8016304:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801630c:	d003      	beq.n	8016316 <__swsetup_r+0x9a>
 801630e:	4621      	mov	r1, r4
 8016310:	4630      	mov	r0, r6
 8016312:	f001 f811 	bl	8017338 <__smakebuf_r>
 8016316:	89a2      	ldrh	r2, [r4, #12]
 8016318:	f012 0301 	ands.w	r3, r2, #1
 801631c:	d00c      	beq.n	8016338 <__swsetup_r+0xbc>
 801631e:	2300      	movs	r3, #0
 8016320:	60a3      	str	r3, [r4, #8]
 8016322:	6963      	ldr	r3, [r4, #20]
 8016324:	425b      	negs	r3, r3
 8016326:	61a3      	str	r3, [r4, #24]
 8016328:	6923      	ldr	r3, [r4, #16]
 801632a:	b953      	cbnz	r3, 8016342 <__swsetup_r+0xc6>
 801632c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016330:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016334:	d1ba      	bne.n	80162ac <__swsetup_r+0x30>
 8016336:	bd70      	pop	{r4, r5, r6, pc}
 8016338:	0792      	lsls	r2, r2, #30
 801633a:	bf58      	it	pl
 801633c:	6963      	ldrpl	r3, [r4, #20]
 801633e:	60a3      	str	r3, [r4, #8]
 8016340:	e7f2      	b.n	8016328 <__swsetup_r+0xac>
 8016342:	2000      	movs	r0, #0
 8016344:	e7f7      	b.n	8016336 <__swsetup_r+0xba>
 8016346:	bf00      	nop
 8016348:	2000008c 	.word	0x2000008c
 801634c:	08018144 	.word	0x08018144
 8016350:	08018164 	.word	0x08018164
 8016354:	08018124 	.word	0x08018124

08016358 <quorem>:
 8016358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801635c:	6903      	ldr	r3, [r0, #16]
 801635e:	690c      	ldr	r4, [r1, #16]
 8016360:	42a3      	cmp	r3, r4
 8016362:	4680      	mov	r8, r0
 8016364:	f2c0 8082 	blt.w	801646c <quorem+0x114>
 8016368:	3c01      	subs	r4, #1
 801636a:	f101 0714 	add.w	r7, r1, #20
 801636e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016372:	f100 0614 	add.w	r6, r0, #20
 8016376:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801637a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801637e:	eb06 030c 	add.w	r3, r6, ip
 8016382:	3501      	adds	r5, #1
 8016384:	eb07 090c 	add.w	r9, r7, ip
 8016388:	9301      	str	r3, [sp, #4]
 801638a:	fbb0 f5f5 	udiv	r5, r0, r5
 801638e:	b395      	cbz	r5, 80163f6 <quorem+0x9e>
 8016390:	f04f 0a00 	mov.w	sl, #0
 8016394:	4638      	mov	r0, r7
 8016396:	46b6      	mov	lr, r6
 8016398:	46d3      	mov	fp, sl
 801639a:	f850 2b04 	ldr.w	r2, [r0], #4
 801639e:	b293      	uxth	r3, r2
 80163a0:	fb05 a303 	mla	r3, r5, r3, sl
 80163a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80163a8:	b29b      	uxth	r3, r3
 80163aa:	ebab 0303 	sub.w	r3, fp, r3
 80163ae:	0c12      	lsrs	r2, r2, #16
 80163b0:	f8de b000 	ldr.w	fp, [lr]
 80163b4:	fb05 a202 	mla	r2, r5, r2, sl
 80163b8:	fa13 f38b 	uxtah	r3, r3, fp
 80163bc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80163c0:	fa1f fb82 	uxth.w	fp, r2
 80163c4:	f8de 2000 	ldr.w	r2, [lr]
 80163c8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80163cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80163d0:	b29b      	uxth	r3, r3
 80163d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80163d6:	4581      	cmp	r9, r0
 80163d8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80163dc:	f84e 3b04 	str.w	r3, [lr], #4
 80163e0:	d2db      	bcs.n	801639a <quorem+0x42>
 80163e2:	f856 300c 	ldr.w	r3, [r6, ip]
 80163e6:	b933      	cbnz	r3, 80163f6 <quorem+0x9e>
 80163e8:	9b01      	ldr	r3, [sp, #4]
 80163ea:	3b04      	subs	r3, #4
 80163ec:	429e      	cmp	r6, r3
 80163ee:	461a      	mov	r2, r3
 80163f0:	d330      	bcc.n	8016454 <quorem+0xfc>
 80163f2:	f8c8 4010 	str.w	r4, [r8, #16]
 80163f6:	4640      	mov	r0, r8
 80163f8:	f001 f9fc 	bl	80177f4 <__mcmp>
 80163fc:	2800      	cmp	r0, #0
 80163fe:	db25      	blt.n	801644c <quorem+0xf4>
 8016400:	3501      	adds	r5, #1
 8016402:	4630      	mov	r0, r6
 8016404:	f04f 0c00 	mov.w	ip, #0
 8016408:	f857 2b04 	ldr.w	r2, [r7], #4
 801640c:	f8d0 e000 	ldr.w	lr, [r0]
 8016410:	b293      	uxth	r3, r2
 8016412:	ebac 0303 	sub.w	r3, ip, r3
 8016416:	0c12      	lsrs	r2, r2, #16
 8016418:	fa13 f38e 	uxtah	r3, r3, lr
 801641c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016420:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016424:	b29b      	uxth	r3, r3
 8016426:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801642a:	45b9      	cmp	r9, r7
 801642c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016430:	f840 3b04 	str.w	r3, [r0], #4
 8016434:	d2e8      	bcs.n	8016408 <quorem+0xb0>
 8016436:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801643a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801643e:	b92a      	cbnz	r2, 801644c <quorem+0xf4>
 8016440:	3b04      	subs	r3, #4
 8016442:	429e      	cmp	r6, r3
 8016444:	461a      	mov	r2, r3
 8016446:	d30b      	bcc.n	8016460 <quorem+0x108>
 8016448:	f8c8 4010 	str.w	r4, [r8, #16]
 801644c:	4628      	mov	r0, r5
 801644e:	b003      	add	sp, #12
 8016450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016454:	6812      	ldr	r2, [r2, #0]
 8016456:	3b04      	subs	r3, #4
 8016458:	2a00      	cmp	r2, #0
 801645a:	d1ca      	bne.n	80163f2 <quorem+0x9a>
 801645c:	3c01      	subs	r4, #1
 801645e:	e7c5      	b.n	80163ec <quorem+0x94>
 8016460:	6812      	ldr	r2, [r2, #0]
 8016462:	3b04      	subs	r3, #4
 8016464:	2a00      	cmp	r2, #0
 8016466:	d1ef      	bne.n	8016448 <quorem+0xf0>
 8016468:	3c01      	subs	r4, #1
 801646a:	e7ea      	b.n	8016442 <quorem+0xea>
 801646c:	2000      	movs	r0, #0
 801646e:	e7ee      	b.n	801644e <quorem+0xf6>

08016470 <_dtoa_r>:
 8016470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016474:	ec57 6b10 	vmov	r6, r7, d0
 8016478:	b097      	sub	sp, #92	; 0x5c
 801647a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801647c:	9106      	str	r1, [sp, #24]
 801647e:	4604      	mov	r4, r0
 8016480:	920b      	str	r2, [sp, #44]	; 0x2c
 8016482:	9312      	str	r3, [sp, #72]	; 0x48
 8016484:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016488:	e9cd 6700 	strd	r6, r7, [sp]
 801648c:	b93d      	cbnz	r5, 801649e <_dtoa_r+0x2e>
 801648e:	2010      	movs	r0, #16
 8016490:	f000 ff92 	bl	80173b8 <malloc>
 8016494:	6260      	str	r0, [r4, #36]	; 0x24
 8016496:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801649a:	6005      	str	r5, [r0, #0]
 801649c:	60c5      	str	r5, [r0, #12]
 801649e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80164a0:	6819      	ldr	r1, [r3, #0]
 80164a2:	b151      	cbz	r1, 80164ba <_dtoa_r+0x4a>
 80164a4:	685a      	ldr	r2, [r3, #4]
 80164a6:	604a      	str	r2, [r1, #4]
 80164a8:	2301      	movs	r3, #1
 80164aa:	4093      	lsls	r3, r2
 80164ac:	608b      	str	r3, [r1, #8]
 80164ae:	4620      	mov	r0, r4
 80164b0:	f000 ffbe 	bl	8017430 <_Bfree>
 80164b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80164b6:	2200      	movs	r2, #0
 80164b8:	601a      	str	r2, [r3, #0]
 80164ba:	1e3b      	subs	r3, r7, #0
 80164bc:	bfbb      	ittet	lt
 80164be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80164c2:	9301      	strlt	r3, [sp, #4]
 80164c4:	2300      	movge	r3, #0
 80164c6:	2201      	movlt	r2, #1
 80164c8:	bfac      	ite	ge
 80164ca:	f8c8 3000 	strge.w	r3, [r8]
 80164ce:	f8c8 2000 	strlt.w	r2, [r8]
 80164d2:	4baf      	ldr	r3, [pc, #700]	; (8016790 <_dtoa_r+0x320>)
 80164d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80164d8:	ea33 0308 	bics.w	r3, r3, r8
 80164dc:	d114      	bne.n	8016508 <_dtoa_r+0x98>
 80164de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80164e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80164e4:	6013      	str	r3, [r2, #0]
 80164e6:	9b00      	ldr	r3, [sp, #0]
 80164e8:	b923      	cbnz	r3, 80164f4 <_dtoa_r+0x84>
 80164ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80164ee:	2800      	cmp	r0, #0
 80164f0:	f000 8542 	beq.w	8016f78 <_dtoa_r+0xb08>
 80164f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80164f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80167a4 <_dtoa_r+0x334>
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	f000 8544 	beq.w	8016f88 <_dtoa_r+0xb18>
 8016500:	f10b 0303 	add.w	r3, fp, #3
 8016504:	f000 bd3e 	b.w	8016f84 <_dtoa_r+0xb14>
 8016508:	e9dd 6700 	ldrd	r6, r7, [sp]
 801650c:	2200      	movs	r2, #0
 801650e:	2300      	movs	r3, #0
 8016510:	4630      	mov	r0, r6
 8016512:	4639      	mov	r1, r7
 8016514:	f7f2 fa10 	bl	8008938 <__aeabi_dcmpeq>
 8016518:	4681      	mov	r9, r0
 801651a:	b168      	cbz	r0, 8016538 <_dtoa_r+0xc8>
 801651c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801651e:	2301      	movs	r3, #1
 8016520:	6013      	str	r3, [r2, #0]
 8016522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016524:	2b00      	cmp	r3, #0
 8016526:	f000 8524 	beq.w	8016f72 <_dtoa_r+0xb02>
 801652a:	4b9a      	ldr	r3, [pc, #616]	; (8016794 <_dtoa_r+0x324>)
 801652c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801652e:	f103 3bff 	add.w	fp, r3, #4294967295
 8016532:	6013      	str	r3, [r2, #0]
 8016534:	f000 bd28 	b.w	8016f88 <_dtoa_r+0xb18>
 8016538:	aa14      	add	r2, sp, #80	; 0x50
 801653a:	a915      	add	r1, sp, #84	; 0x54
 801653c:	ec47 6b10 	vmov	d0, r6, r7
 8016540:	4620      	mov	r0, r4
 8016542:	f001 f9ce 	bl	80178e2 <__d2b>
 8016546:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801654a:	9004      	str	r0, [sp, #16]
 801654c:	2d00      	cmp	r5, #0
 801654e:	d07c      	beq.n	801664a <_dtoa_r+0x1da>
 8016550:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016554:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016558:	46b2      	mov	sl, r6
 801655a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801655e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016562:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016566:	2200      	movs	r2, #0
 8016568:	4b8b      	ldr	r3, [pc, #556]	; (8016798 <_dtoa_r+0x328>)
 801656a:	4650      	mov	r0, sl
 801656c:	4659      	mov	r1, fp
 801656e:	f7f1 fdc3 	bl	80080f8 <__aeabi_dsub>
 8016572:	a381      	add	r3, pc, #516	; (adr r3, 8016778 <_dtoa_r+0x308>)
 8016574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016578:	f7f1 ff76 	bl	8008468 <__aeabi_dmul>
 801657c:	a380      	add	r3, pc, #512	; (adr r3, 8016780 <_dtoa_r+0x310>)
 801657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016582:	f7f1 fdbb 	bl	80080fc <__adddf3>
 8016586:	4606      	mov	r6, r0
 8016588:	4628      	mov	r0, r5
 801658a:	460f      	mov	r7, r1
 801658c:	f7f1 ff02 	bl	8008394 <__aeabi_i2d>
 8016590:	a37d      	add	r3, pc, #500	; (adr r3, 8016788 <_dtoa_r+0x318>)
 8016592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016596:	f7f1 ff67 	bl	8008468 <__aeabi_dmul>
 801659a:	4602      	mov	r2, r0
 801659c:	460b      	mov	r3, r1
 801659e:	4630      	mov	r0, r6
 80165a0:	4639      	mov	r1, r7
 80165a2:	f7f1 fdab 	bl	80080fc <__adddf3>
 80165a6:	4606      	mov	r6, r0
 80165a8:	460f      	mov	r7, r1
 80165aa:	f7f2 fa0d 	bl	80089c8 <__aeabi_d2iz>
 80165ae:	2200      	movs	r2, #0
 80165b0:	4682      	mov	sl, r0
 80165b2:	2300      	movs	r3, #0
 80165b4:	4630      	mov	r0, r6
 80165b6:	4639      	mov	r1, r7
 80165b8:	f7f2 f9c8 	bl	800894c <__aeabi_dcmplt>
 80165bc:	b148      	cbz	r0, 80165d2 <_dtoa_r+0x162>
 80165be:	4650      	mov	r0, sl
 80165c0:	f7f1 fee8 	bl	8008394 <__aeabi_i2d>
 80165c4:	4632      	mov	r2, r6
 80165c6:	463b      	mov	r3, r7
 80165c8:	f7f2 f9b6 	bl	8008938 <__aeabi_dcmpeq>
 80165cc:	b908      	cbnz	r0, 80165d2 <_dtoa_r+0x162>
 80165ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80165d2:	f1ba 0f16 	cmp.w	sl, #22
 80165d6:	d859      	bhi.n	801668c <_dtoa_r+0x21c>
 80165d8:	4970      	ldr	r1, [pc, #448]	; (801679c <_dtoa_r+0x32c>)
 80165da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80165de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80165e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165e6:	f7f2 f9cf 	bl	8008988 <__aeabi_dcmpgt>
 80165ea:	2800      	cmp	r0, #0
 80165ec:	d050      	beq.n	8016690 <_dtoa_r+0x220>
 80165ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80165f2:	2300      	movs	r3, #0
 80165f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80165f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80165f8:	1b5d      	subs	r5, r3, r5
 80165fa:	f1b5 0801 	subs.w	r8, r5, #1
 80165fe:	bf49      	itett	mi
 8016600:	f1c5 0301 	rsbmi	r3, r5, #1
 8016604:	2300      	movpl	r3, #0
 8016606:	9305      	strmi	r3, [sp, #20]
 8016608:	f04f 0800 	movmi.w	r8, #0
 801660c:	bf58      	it	pl
 801660e:	9305      	strpl	r3, [sp, #20]
 8016610:	f1ba 0f00 	cmp.w	sl, #0
 8016614:	db3e      	blt.n	8016694 <_dtoa_r+0x224>
 8016616:	2300      	movs	r3, #0
 8016618:	44d0      	add	r8, sl
 801661a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801661e:	9307      	str	r3, [sp, #28]
 8016620:	9b06      	ldr	r3, [sp, #24]
 8016622:	2b09      	cmp	r3, #9
 8016624:	f200 8090 	bhi.w	8016748 <_dtoa_r+0x2d8>
 8016628:	2b05      	cmp	r3, #5
 801662a:	bfc4      	itt	gt
 801662c:	3b04      	subgt	r3, #4
 801662e:	9306      	strgt	r3, [sp, #24]
 8016630:	9b06      	ldr	r3, [sp, #24]
 8016632:	f1a3 0302 	sub.w	r3, r3, #2
 8016636:	bfcc      	ite	gt
 8016638:	2500      	movgt	r5, #0
 801663a:	2501      	movle	r5, #1
 801663c:	2b03      	cmp	r3, #3
 801663e:	f200 808f 	bhi.w	8016760 <_dtoa_r+0x2f0>
 8016642:	e8df f003 	tbb	[pc, r3]
 8016646:	7f7d      	.short	0x7f7d
 8016648:	7131      	.short	0x7131
 801664a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801664e:	441d      	add	r5, r3
 8016650:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016654:	2820      	cmp	r0, #32
 8016656:	dd13      	ble.n	8016680 <_dtoa_r+0x210>
 8016658:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801665c:	9b00      	ldr	r3, [sp, #0]
 801665e:	fa08 f800 	lsl.w	r8, r8, r0
 8016662:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016666:	fa23 f000 	lsr.w	r0, r3, r0
 801666a:	ea48 0000 	orr.w	r0, r8, r0
 801666e:	f7f1 fe81 	bl	8008374 <__aeabi_ui2d>
 8016672:	2301      	movs	r3, #1
 8016674:	4682      	mov	sl, r0
 8016676:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801667a:	3d01      	subs	r5, #1
 801667c:	9313      	str	r3, [sp, #76]	; 0x4c
 801667e:	e772      	b.n	8016566 <_dtoa_r+0xf6>
 8016680:	9b00      	ldr	r3, [sp, #0]
 8016682:	f1c0 0020 	rsb	r0, r0, #32
 8016686:	fa03 f000 	lsl.w	r0, r3, r0
 801668a:	e7f0      	b.n	801666e <_dtoa_r+0x1fe>
 801668c:	2301      	movs	r3, #1
 801668e:	e7b1      	b.n	80165f4 <_dtoa_r+0x184>
 8016690:	900f      	str	r0, [sp, #60]	; 0x3c
 8016692:	e7b0      	b.n	80165f6 <_dtoa_r+0x186>
 8016694:	9b05      	ldr	r3, [sp, #20]
 8016696:	eba3 030a 	sub.w	r3, r3, sl
 801669a:	9305      	str	r3, [sp, #20]
 801669c:	f1ca 0300 	rsb	r3, sl, #0
 80166a0:	9307      	str	r3, [sp, #28]
 80166a2:	2300      	movs	r3, #0
 80166a4:	930e      	str	r3, [sp, #56]	; 0x38
 80166a6:	e7bb      	b.n	8016620 <_dtoa_r+0x1b0>
 80166a8:	2301      	movs	r3, #1
 80166aa:	930a      	str	r3, [sp, #40]	; 0x28
 80166ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	dd59      	ble.n	8016766 <_dtoa_r+0x2f6>
 80166b2:	9302      	str	r3, [sp, #8]
 80166b4:	4699      	mov	r9, r3
 80166b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80166b8:	2200      	movs	r2, #0
 80166ba:	6072      	str	r2, [r6, #4]
 80166bc:	2204      	movs	r2, #4
 80166be:	f102 0014 	add.w	r0, r2, #20
 80166c2:	4298      	cmp	r0, r3
 80166c4:	6871      	ldr	r1, [r6, #4]
 80166c6:	d953      	bls.n	8016770 <_dtoa_r+0x300>
 80166c8:	4620      	mov	r0, r4
 80166ca:	f000 fe7d 	bl	80173c8 <_Balloc>
 80166ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166d0:	6030      	str	r0, [r6, #0]
 80166d2:	f1b9 0f0e 	cmp.w	r9, #14
 80166d6:	f8d3 b000 	ldr.w	fp, [r3]
 80166da:	f200 80e6 	bhi.w	80168aa <_dtoa_r+0x43a>
 80166de:	2d00      	cmp	r5, #0
 80166e0:	f000 80e3 	beq.w	80168aa <_dtoa_r+0x43a>
 80166e4:	ed9d 7b00 	vldr	d7, [sp]
 80166e8:	f1ba 0f00 	cmp.w	sl, #0
 80166ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80166f0:	dd74      	ble.n	80167dc <_dtoa_r+0x36c>
 80166f2:	4a2a      	ldr	r2, [pc, #168]	; (801679c <_dtoa_r+0x32c>)
 80166f4:	f00a 030f 	and.w	r3, sl, #15
 80166f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80166fc:	ed93 7b00 	vldr	d7, [r3]
 8016700:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016704:	06f0      	lsls	r0, r6, #27
 8016706:	ed8d 7b08 	vstr	d7, [sp, #32]
 801670a:	d565      	bpl.n	80167d8 <_dtoa_r+0x368>
 801670c:	4b24      	ldr	r3, [pc, #144]	; (80167a0 <_dtoa_r+0x330>)
 801670e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016712:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016716:	f7f1 ffd1 	bl	80086bc <__aeabi_ddiv>
 801671a:	e9cd 0100 	strd	r0, r1, [sp]
 801671e:	f006 060f 	and.w	r6, r6, #15
 8016722:	2503      	movs	r5, #3
 8016724:	4f1e      	ldr	r7, [pc, #120]	; (80167a0 <_dtoa_r+0x330>)
 8016726:	e04c      	b.n	80167c2 <_dtoa_r+0x352>
 8016728:	2301      	movs	r3, #1
 801672a:	930a      	str	r3, [sp, #40]	; 0x28
 801672c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801672e:	4453      	add	r3, sl
 8016730:	f103 0901 	add.w	r9, r3, #1
 8016734:	9302      	str	r3, [sp, #8]
 8016736:	464b      	mov	r3, r9
 8016738:	2b01      	cmp	r3, #1
 801673a:	bfb8      	it	lt
 801673c:	2301      	movlt	r3, #1
 801673e:	e7ba      	b.n	80166b6 <_dtoa_r+0x246>
 8016740:	2300      	movs	r3, #0
 8016742:	e7b2      	b.n	80166aa <_dtoa_r+0x23a>
 8016744:	2300      	movs	r3, #0
 8016746:	e7f0      	b.n	801672a <_dtoa_r+0x2ba>
 8016748:	2501      	movs	r5, #1
 801674a:	2300      	movs	r3, #0
 801674c:	9306      	str	r3, [sp, #24]
 801674e:	950a      	str	r5, [sp, #40]	; 0x28
 8016750:	f04f 33ff 	mov.w	r3, #4294967295
 8016754:	9302      	str	r3, [sp, #8]
 8016756:	4699      	mov	r9, r3
 8016758:	2200      	movs	r2, #0
 801675a:	2312      	movs	r3, #18
 801675c:	920b      	str	r2, [sp, #44]	; 0x2c
 801675e:	e7aa      	b.n	80166b6 <_dtoa_r+0x246>
 8016760:	2301      	movs	r3, #1
 8016762:	930a      	str	r3, [sp, #40]	; 0x28
 8016764:	e7f4      	b.n	8016750 <_dtoa_r+0x2e0>
 8016766:	2301      	movs	r3, #1
 8016768:	9302      	str	r3, [sp, #8]
 801676a:	4699      	mov	r9, r3
 801676c:	461a      	mov	r2, r3
 801676e:	e7f5      	b.n	801675c <_dtoa_r+0x2ec>
 8016770:	3101      	adds	r1, #1
 8016772:	6071      	str	r1, [r6, #4]
 8016774:	0052      	lsls	r2, r2, #1
 8016776:	e7a2      	b.n	80166be <_dtoa_r+0x24e>
 8016778:	636f4361 	.word	0x636f4361
 801677c:	3fd287a7 	.word	0x3fd287a7
 8016780:	8b60c8b3 	.word	0x8b60c8b3
 8016784:	3fc68a28 	.word	0x3fc68a28
 8016788:	509f79fb 	.word	0x509f79fb
 801678c:	3fd34413 	.word	0x3fd34413
 8016790:	7ff00000 	.word	0x7ff00000
 8016794:	080180f1 	.word	0x080180f1
 8016798:	3ff80000 	.word	0x3ff80000
 801679c:	080181b0 	.word	0x080181b0
 80167a0:	08018188 	.word	0x08018188
 80167a4:	0801811d 	.word	0x0801811d
 80167a8:	07f1      	lsls	r1, r6, #31
 80167aa:	d508      	bpl.n	80167be <_dtoa_r+0x34e>
 80167ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80167b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80167b4:	f7f1 fe58 	bl	8008468 <__aeabi_dmul>
 80167b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80167bc:	3501      	adds	r5, #1
 80167be:	1076      	asrs	r6, r6, #1
 80167c0:	3708      	adds	r7, #8
 80167c2:	2e00      	cmp	r6, #0
 80167c4:	d1f0      	bne.n	80167a8 <_dtoa_r+0x338>
 80167c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80167ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167ce:	f7f1 ff75 	bl	80086bc <__aeabi_ddiv>
 80167d2:	e9cd 0100 	strd	r0, r1, [sp]
 80167d6:	e01a      	b.n	801680e <_dtoa_r+0x39e>
 80167d8:	2502      	movs	r5, #2
 80167da:	e7a3      	b.n	8016724 <_dtoa_r+0x2b4>
 80167dc:	f000 80a0 	beq.w	8016920 <_dtoa_r+0x4b0>
 80167e0:	f1ca 0600 	rsb	r6, sl, #0
 80167e4:	4b9f      	ldr	r3, [pc, #636]	; (8016a64 <_dtoa_r+0x5f4>)
 80167e6:	4fa0      	ldr	r7, [pc, #640]	; (8016a68 <_dtoa_r+0x5f8>)
 80167e8:	f006 020f 	and.w	r2, r6, #15
 80167ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80167f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80167f8:	f7f1 fe36 	bl	8008468 <__aeabi_dmul>
 80167fc:	e9cd 0100 	strd	r0, r1, [sp]
 8016800:	1136      	asrs	r6, r6, #4
 8016802:	2300      	movs	r3, #0
 8016804:	2502      	movs	r5, #2
 8016806:	2e00      	cmp	r6, #0
 8016808:	d17f      	bne.n	801690a <_dtoa_r+0x49a>
 801680a:	2b00      	cmp	r3, #0
 801680c:	d1e1      	bne.n	80167d2 <_dtoa_r+0x362>
 801680e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016810:	2b00      	cmp	r3, #0
 8016812:	f000 8087 	beq.w	8016924 <_dtoa_r+0x4b4>
 8016816:	e9dd 6700 	ldrd	r6, r7, [sp]
 801681a:	2200      	movs	r2, #0
 801681c:	4b93      	ldr	r3, [pc, #588]	; (8016a6c <_dtoa_r+0x5fc>)
 801681e:	4630      	mov	r0, r6
 8016820:	4639      	mov	r1, r7
 8016822:	f7f2 f893 	bl	800894c <__aeabi_dcmplt>
 8016826:	2800      	cmp	r0, #0
 8016828:	d07c      	beq.n	8016924 <_dtoa_r+0x4b4>
 801682a:	f1b9 0f00 	cmp.w	r9, #0
 801682e:	d079      	beq.n	8016924 <_dtoa_r+0x4b4>
 8016830:	9b02      	ldr	r3, [sp, #8]
 8016832:	2b00      	cmp	r3, #0
 8016834:	dd35      	ble.n	80168a2 <_dtoa_r+0x432>
 8016836:	f10a 33ff 	add.w	r3, sl, #4294967295
 801683a:	9308      	str	r3, [sp, #32]
 801683c:	4639      	mov	r1, r7
 801683e:	2200      	movs	r2, #0
 8016840:	4b8b      	ldr	r3, [pc, #556]	; (8016a70 <_dtoa_r+0x600>)
 8016842:	4630      	mov	r0, r6
 8016844:	f7f1 fe10 	bl	8008468 <__aeabi_dmul>
 8016848:	e9cd 0100 	strd	r0, r1, [sp]
 801684c:	9f02      	ldr	r7, [sp, #8]
 801684e:	3501      	adds	r5, #1
 8016850:	4628      	mov	r0, r5
 8016852:	f7f1 fd9f 	bl	8008394 <__aeabi_i2d>
 8016856:	e9dd 2300 	ldrd	r2, r3, [sp]
 801685a:	f7f1 fe05 	bl	8008468 <__aeabi_dmul>
 801685e:	2200      	movs	r2, #0
 8016860:	4b84      	ldr	r3, [pc, #528]	; (8016a74 <_dtoa_r+0x604>)
 8016862:	f7f1 fc4b 	bl	80080fc <__adddf3>
 8016866:	4605      	mov	r5, r0
 8016868:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801686c:	2f00      	cmp	r7, #0
 801686e:	d15d      	bne.n	801692c <_dtoa_r+0x4bc>
 8016870:	2200      	movs	r2, #0
 8016872:	4b81      	ldr	r3, [pc, #516]	; (8016a78 <_dtoa_r+0x608>)
 8016874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016878:	f7f1 fc3e 	bl	80080f8 <__aeabi_dsub>
 801687c:	462a      	mov	r2, r5
 801687e:	4633      	mov	r3, r6
 8016880:	e9cd 0100 	strd	r0, r1, [sp]
 8016884:	f7f2 f880 	bl	8008988 <__aeabi_dcmpgt>
 8016888:	2800      	cmp	r0, #0
 801688a:	f040 8288 	bne.w	8016d9e <_dtoa_r+0x92e>
 801688e:	462a      	mov	r2, r5
 8016890:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016894:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016898:	f7f2 f858 	bl	800894c <__aeabi_dcmplt>
 801689c:	2800      	cmp	r0, #0
 801689e:	f040 827c 	bne.w	8016d9a <_dtoa_r+0x92a>
 80168a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80168a6:	e9cd 2300 	strd	r2, r3, [sp]
 80168aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	f2c0 8150 	blt.w	8016b52 <_dtoa_r+0x6e2>
 80168b2:	f1ba 0f0e 	cmp.w	sl, #14
 80168b6:	f300 814c 	bgt.w	8016b52 <_dtoa_r+0x6e2>
 80168ba:	4b6a      	ldr	r3, [pc, #424]	; (8016a64 <_dtoa_r+0x5f4>)
 80168bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80168c0:	ed93 7b00 	vldr	d7, [r3]
 80168c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80168cc:	f280 80d8 	bge.w	8016a80 <_dtoa_r+0x610>
 80168d0:	f1b9 0f00 	cmp.w	r9, #0
 80168d4:	f300 80d4 	bgt.w	8016a80 <_dtoa_r+0x610>
 80168d8:	f040 825e 	bne.w	8016d98 <_dtoa_r+0x928>
 80168dc:	2200      	movs	r2, #0
 80168de:	4b66      	ldr	r3, [pc, #408]	; (8016a78 <_dtoa_r+0x608>)
 80168e0:	ec51 0b17 	vmov	r0, r1, d7
 80168e4:	f7f1 fdc0 	bl	8008468 <__aeabi_dmul>
 80168e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80168ec:	f7f2 f842 	bl	8008974 <__aeabi_dcmpge>
 80168f0:	464f      	mov	r7, r9
 80168f2:	464e      	mov	r6, r9
 80168f4:	2800      	cmp	r0, #0
 80168f6:	f040 8234 	bne.w	8016d62 <_dtoa_r+0x8f2>
 80168fa:	2331      	movs	r3, #49	; 0x31
 80168fc:	f10b 0501 	add.w	r5, fp, #1
 8016900:	f88b 3000 	strb.w	r3, [fp]
 8016904:	f10a 0a01 	add.w	sl, sl, #1
 8016908:	e22f      	b.n	8016d6a <_dtoa_r+0x8fa>
 801690a:	07f2      	lsls	r2, r6, #31
 801690c:	d505      	bpl.n	801691a <_dtoa_r+0x4aa>
 801690e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016912:	f7f1 fda9 	bl	8008468 <__aeabi_dmul>
 8016916:	3501      	adds	r5, #1
 8016918:	2301      	movs	r3, #1
 801691a:	1076      	asrs	r6, r6, #1
 801691c:	3708      	adds	r7, #8
 801691e:	e772      	b.n	8016806 <_dtoa_r+0x396>
 8016920:	2502      	movs	r5, #2
 8016922:	e774      	b.n	801680e <_dtoa_r+0x39e>
 8016924:	f8cd a020 	str.w	sl, [sp, #32]
 8016928:	464f      	mov	r7, r9
 801692a:	e791      	b.n	8016850 <_dtoa_r+0x3e0>
 801692c:	4b4d      	ldr	r3, [pc, #308]	; (8016a64 <_dtoa_r+0x5f4>)
 801692e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016932:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016938:	2b00      	cmp	r3, #0
 801693a:	d047      	beq.n	80169cc <_dtoa_r+0x55c>
 801693c:	4602      	mov	r2, r0
 801693e:	460b      	mov	r3, r1
 8016940:	2000      	movs	r0, #0
 8016942:	494e      	ldr	r1, [pc, #312]	; (8016a7c <_dtoa_r+0x60c>)
 8016944:	f7f1 feba 	bl	80086bc <__aeabi_ddiv>
 8016948:	462a      	mov	r2, r5
 801694a:	4633      	mov	r3, r6
 801694c:	f7f1 fbd4 	bl	80080f8 <__aeabi_dsub>
 8016950:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016954:	465d      	mov	r5, fp
 8016956:	e9dd 0100 	ldrd	r0, r1, [sp]
 801695a:	f7f2 f835 	bl	80089c8 <__aeabi_d2iz>
 801695e:	4606      	mov	r6, r0
 8016960:	f7f1 fd18 	bl	8008394 <__aeabi_i2d>
 8016964:	4602      	mov	r2, r0
 8016966:	460b      	mov	r3, r1
 8016968:	e9dd 0100 	ldrd	r0, r1, [sp]
 801696c:	f7f1 fbc4 	bl	80080f8 <__aeabi_dsub>
 8016970:	3630      	adds	r6, #48	; 0x30
 8016972:	f805 6b01 	strb.w	r6, [r5], #1
 8016976:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801697a:	e9cd 0100 	strd	r0, r1, [sp]
 801697e:	f7f1 ffe5 	bl	800894c <__aeabi_dcmplt>
 8016982:	2800      	cmp	r0, #0
 8016984:	d163      	bne.n	8016a4e <_dtoa_r+0x5de>
 8016986:	e9dd 2300 	ldrd	r2, r3, [sp]
 801698a:	2000      	movs	r0, #0
 801698c:	4937      	ldr	r1, [pc, #220]	; (8016a6c <_dtoa_r+0x5fc>)
 801698e:	f7f1 fbb3 	bl	80080f8 <__aeabi_dsub>
 8016992:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016996:	f7f1 ffd9 	bl	800894c <__aeabi_dcmplt>
 801699a:	2800      	cmp	r0, #0
 801699c:	f040 80b7 	bne.w	8016b0e <_dtoa_r+0x69e>
 80169a0:	eba5 030b 	sub.w	r3, r5, fp
 80169a4:	429f      	cmp	r7, r3
 80169a6:	f77f af7c 	ble.w	80168a2 <_dtoa_r+0x432>
 80169aa:	2200      	movs	r2, #0
 80169ac:	4b30      	ldr	r3, [pc, #192]	; (8016a70 <_dtoa_r+0x600>)
 80169ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80169b2:	f7f1 fd59 	bl	8008468 <__aeabi_dmul>
 80169b6:	2200      	movs	r2, #0
 80169b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80169bc:	4b2c      	ldr	r3, [pc, #176]	; (8016a70 <_dtoa_r+0x600>)
 80169be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169c2:	f7f1 fd51 	bl	8008468 <__aeabi_dmul>
 80169c6:	e9cd 0100 	strd	r0, r1, [sp]
 80169ca:	e7c4      	b.n	8016956 <_dtoa_r+0x4e6>
 80169cc:	462a      	mov	r2, r5
 80169ce:	4633      	mov	r3, r6
 80169d0:	f7f1 fd4a 	bl	8008468 <__aeabi_dmul>
 80169d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80169d8:	eb0b 0507 	add.w	r5, fp, r7
 80169dc:	465e      	mov	r6, fp
 80169de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169e2:	f7f1 fff1 	bl	80089c8 <__aeabi_d2iz>
 80169e6:	4607      	mov	r7, r0
 80169e8:	f7f1 fcd4 	bl	8008394 <__aeabi_i2d>
 80169ec:	3730      	adds	r7, #48	; 0x30
 80169ee:	4602      	mov	r2, r0
 80169f0:	460b      	mov	r3, r1
 80169f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169f6:	f7f1 fb7f 	bl	80080f8 <__aeabi_dsub>
 80169fa:	f806 7b01 	strb.w	r7, [r6], #1
 80169fe:	42ae      	cmp	r6, r5
 8016a00:	e9cd 0100 	strd	r0, r1, [sp]
 8016a04:	f04f 0200 	mov.w	r2, #0
 8016a08:	d126      	bne.n	8016a58 <_dtoa_r+0x5e8>
 8016a0a:	4b1c      	ldr	r3, [pc, #112]	; (8016a7c <_dtoa_r+0x60c>)
 8016a0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016a10:	f7f1 fb74 	bl	80080fc <__adddf3>
 8016a14:	4602      	mov	r2, r0
 8016a16:	460b      	mov	r3, r1
 8016a18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a1c:	f7f1 ffb4 	bl	8008988 <__aeabi_dcmpgt>
 8016a20:	2800      	cmp	r0, #0
 8016a22:	d174      	bne.n	8016b0e <_dtoa_r+0x69e>
 8016a24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016a28:	2000      	movs	r0, #0
 8016a2a:	4914      	ldr	r1, [pc, #80]	; (8016a7c <_dtoa_r+0x60c>)
 8016a2c:	f7f1 fb64 	bl	80080f8 <__aeabi_dsub>
 8016a30:	4602      	mov	r2, r0
 8016a32:	460b      	mov	r3, r1
 8016a34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a38:	f7f1 ff88 	bl	800894c <__aeabi_dcmplt>
 8016a3c:	2800      	cmp	r0, #0
 8016a3e:	f43f af30 	beq.w	80168a2 <_dtoa_r+0x432>
 8016a42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016a46:	2b30      	cmp	r3, #48	; 0x30
 8016a48:	f105 32ff 	add.w	r2, r5, #4294967295
 8016a4c:	d002      	beq.n	8016a54 <_dtoa_r+0x5e4>
 8016a4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016a52:	e04a      	b.n	8016aea <_dtoa_r+0x67a>
 8016a54:	4615      	mov	r5, r2
 8016a56:	e7f4      	b.n	8016a42 <_dtoa_r+0x5d2>
 8016a58:	4b05      	ldr	r3, [pc, #20]	; (8016a70 <_dtoa_r+0x600>)
 8016a5a:	f7f1 fd05 	bl	8008468 <__aeabi_dmul>
 8016a5e:	e9cd 0100 	strd	r0, r1, [sp]
 8016a62:	e7bc      	b.n	80169de <_dtoa_r+0x56e>
 8016a64:	080181b0 	.word	0x080181b0
 8016a68:	08018188 	.word	0x08018188
 8016a6c:	3ff00000 	.word	0x3ff00000
 8016a70:	40240000 	.word	0x40240000
 8016a74:	401c0000 	.word	0x401c0000
 8016a78:	40140000 	.word	0x40140000
 8016a7c:	3fe00000 	.word	0x3fe00000
 8016a80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016a84:	465d      	mov	r5, fp
 8016a86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a8a:	4630      	mov	r0, r6
 8016a8c:	4639      	mov	r1, r7
 8016a8e:	f7f1 fe15 	bl	80086bc <__aeabi_ddiv>
 8016a92:	f7f1 ff99 	bl	80089c8 <__aeabi_d2iz>
 8016a96:	4680      	mov	r8, r0
 8016a98:	f7f1 fc7c 	bl	8008394 <__aeabi_i2d>
 8016a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016aa0:	f7f1 fce2 	bl	8008468 <__aeabi_dmul>
 8016aa4:	4602      	mov	r2, r0
 8016aa6:	460b      	mov	r3, r1
 8016aa8:	4630      	mov	r0, r6
 8016aaa:	4639      	mov	r1, r7
 8016aac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016ab0:	f7f1 fb22 	bl	80080f8 <__aeabi_dsub>
 8016ab4:	f805 6b01 	strb.w	r6, [r5], #1
 8016ab8:	eba5 060b 	sub.w	r6, r5, fp
 8016abc:	45b1      	cmp	r9, r6
 8016abe:	4602      	mov	r2, r0
 8016ac0:	460b      	mov	r3, r1
 8016ac2:	d139      	bne.n	8016b38 <_dtoa_r+0x6c8>
 8016ac4:	f7f1 fb1a 	bl	80080fc <__adddf3>
 8016ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016acc:	4606      	mov	r6, r0
 8016ace:	460f      	mov	r7, r1
 8016ad0:	f7f1 ff5a 	bl	8008988 <__aeabi_dcmpgt>
 8016ad4:	b9c8      	cbnz	r0, 8016b0a <_dtoa_r+0x69a>
 8016ad6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016ada:	4630      	mov	r0, r6
 8016adc:	4639      	mov	r1, r7
 8016ade:	f7f1 ff2b 	bl	8008938 <__aeabi_dcmpeq>
 8016ae2:	b110      	cbz	r0, 8016aea <_dtoa_r+0x67a>
 8016ae4:	f018 0f01 	tst.w	r8, #1
 8016ae8:	d10f      	bne.n	8016b0a <_dtoa_r+0x69a>
 8016aea:	9904      	ldr	r1, [sp, #16]
 8016aec:	4620      	mov	r0, r4
 8016aee:	f000 fc9f 	bl	8017430 <_Bfree>
 8016af2:	2300      	movs	r3, #0
 8016af4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016af6:	702b      	strb	r3, [r5, #0]
 8016af8:	f10a 0301 	add.w	r3, sl, #1
 8016afc:	6013      	str	r3, [r2, #0]
 8016afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	f000 8241 	beq.w	8016f88 <_dtoa_r+0xb18>
 8016b06:	601d      	str	r5, [r3, #0]
 8016b08:	e23e      	b.n	8016f88 <_dtoa_r+0xb18>
 8016b0a:	f8cd a020 	str.w	sl, [sp, #32]
 8016b0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016b12:	2a39      	cmp	r2, #57	; 0x39
 8016b14:	f105 33ff 	add.w	r3, r5, #4294967295
 8016b18:	d108      	bne.n	8016b2c <_dtoa_r+0x6bc>
 8016b1a:	459b      	cmp	fp, r3
 8016b1c:	d10a      	bne.n	8016b34 <_dtoa_r+0x6c4>
 8016b1e:	9b08      	ldr	r3, [sp, #32]
 8016b20:	3301      	adds	r3, #1
 8016b22:	9308      	str	r3, [sp, #32]
 8016b24:	2330      	movs	r3, #48	; 0x30
 8016b26:	f88b 3000 	strb.w	r3, [fp]
 8016b2a:	465b      	mov	r3, fp
 8016b2c:	781a      	ldrb	r2, [r3, #0]
 8016b2e:	3201      	adds	r2, #1
 8016b30:	701a      	strb	r2, [r3, #0]
 8016b32:	e78c      	b.n	8016a4e <_dtoa_r+0x5de>
 8016b34:	461d      	mov	r5, r3
 8016b36:	e7ea      	b.n	8016b0e <_dtoa_r+0x69e>
 8016b38:	2200      	movs	r2, #0
 8016b3a:	4b9b      	ldr	r3, [pc, #620]	; (8016da8 <_dtoa_r+0x938>)
 8016b3c:	f7f1 fc94 	bl	8008468 <__aeabi_dmul>
 8016b40:	2200      	movs	r2, #0
 8016b42:	2300      	movs	r3, #0
 8016b44:	4606      	mov	r6, r0
 8016b46:	460f      	mov	r7, r1
 8016b48:	f7f1 fef6 	bl	8008938 <__aeabi_dcmpeq>
 8016b4c:	2800      	cmp	r0, #0
 8016b4e:	d09a      	beq.n	8016a86 <_dtoa_r+0x616>
 8016b50:	e7cb      	b.n	8016aea <_dtoa_r+0x67a>
 8016b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b54:	2a00      	cmp	r2, #0
 8016b56:	f000 808b 	beq.w	8016c70 <_dtoa_r+0x800>
 8016b5a:	9a06      	ldr	r2, [sp, #24]
 8016b5c:	2a01      	cmp	r2, #1
 8016b5e:	dc6e      	bgt.n	8016c3e <_dtoa_r+0x7ce>
 8016b60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016b62:	2a00      	cmp	r2, #0
 8016b64:	d067      	beq.n	8016c36 <_dtoa_r+0x7c6>
 8016b66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016b6a:	9f07      	ldr	r7, [sp, #28]
 8016b6c:	9d05      	ldr	r5, [sp, #20]
 8016b6e:	9a05      	ldr	r2, [sp, #20]
 8016b70:	2101      	movs	r1, #1
 8016b72:	441a      	add	r2, r3
 8016b74:	4620      	mov	r0, r4
 8016b76:	9205      	str	r2, [sp, #20]
 8016b78:	4498      	add	r8, r3
 8016b7a:	f000 fcf9 	bl	8017570 <__i2b>
 8016b7e:	4606      	mov	r6, r0
 8016b80:	2d00      	cmp	r5, #0
 8016b82:	dd0c      	ble.n	8016b9e <_dtoa_r+0x72e>
 8016b84:	f1b8 0f00 	cmp.w	r8, #0
 8016b88:	dd09      	ble.n	8016b9e <_dtoa_r+0x72e>
 8016b8a:	4545      	cmp	r5, r8
 8016b8c:	9a05      	ldr	r2, [sp, #20]
 8016b8e:	462b      	mov	r3, r5
 8016b90:	bfa8      	it	ge
 8016b92:	4643      	movge	r3, r8
 8016b94:	1ad2      	subs	r2, r2, r3
 8016b96:	9205      	str	r2, [sp, #20]
 8016b98:	1aed      	subs	r5, r5, r3
 8016b9a:	eba8 0803 	sub.w	r8, r8, r3
 8016b9e:	9b07      	ldr	r3, [sp, #28]
 8016ba0:	b1eb      	cbz	r3, 8016bde <_dtoa_r+0x76e>
 8016ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d067      	beq.n	8016c78 <_dtoa_r+0x808>
 8016ba8:	b18f      	cbz	r7, 8016bce <_dtoa_r+0x75e>
 8016baa:	4631      	mov	r1, r6
 8016bac:	463a      	mov	r2, r7
 8016bae:	4620      	mov	r0, r4
 8016bb0:	f000 fd7e 	bl	80176b0 <__pow5mult>
 8016bb4:	9a04      	ldr	r2, [sp, #16]
 8016bb6:	4601      	mov	r1, r0
 8016bb8:	4606      	mov	r6, r0
 8016bba:	4620      	mov	r0, r4
 8016bbc:	f000 fce1 	bl	8017582 <__multiply>
 8016bc0:	9904      	ldr	r1, [sp, #16]
 8016bc2:	9008      	str	r0, [sp, #32]
 8016bc4:	4620      	mov	r0, r4
 8016bc6:	f000 fc33 	bl	8017430 <_Bfree>
 8016bca:	9b08      	ldr	r3, [sp, #32]
 8016bcc:	9304      	str	r3, [sp, #16]
 8016bce:	9b07      	ldr	r3, [sp, #28]
 8016bd0:	1bda      	subs	r2, r3, r7
 8016bd2:	d004      	beq.n	8016bde <_dtoa_r+0x76e>
 8016bd4:	9904      	ldr	r1, [sp, #16]
 8016bd6:	4620      	mov	r0, r4
 8016bd8:	f000 fd6a 	bl	80176b0 <__pow5mult>
 8016bdc:	9004      	str	r0, [sp, #16]
 8016bde:	2101      	movs	r1, #1
 8016be0:	4620      	mov	r0, r4
 8016be2:	f000 fcc5 	bl	8017570 <__i2b>
 8016be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016be8:	4607      	mov	r7, r0
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	f000 81d0 	beq.w	8016f90 <_dtoa_r+0xb20>
 8016bf0:	461a      	mov	r2, r3
 8016bf2:	4601      	mov	r1, r0
 8016bf4:	4620      	mov	r0, r4
 8016bf6:	f000 fd5b 	bl	80176b0 <__pow5mult>
 8016bfa:	9b06      	ldr	r3, [sp, #24]
 8016bfc:	2b01      	cmp	r3, #1
 8016bfe:	4607      	mov	r7, r0
 8016c00:	dc40      	bgt.n	8016c84 <_dtoa_r+0x814>
 8016c02:	9b00      	ldr	r3, [sp, #0]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d139      	bne.n	8016c7c <_dtoa_r+0x80c>
 8016c08:	9b01      	ldr	r3, [sp, #4]
 8016c0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d136      	bne.n	8016c80 <_dtoa_r+0x810>
 8016c12:	9b01      	ldr	r3, [sp, #4]
 8016c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016c18:	0d1b      	lsrs	r3, r3, #20
 8016c1a:	051b      	lsls	r3, r3, #20
 8016c1c:	b12b      	cbz	r3, 8016c2a <_dtoa_r+0x7ba>
 8016c1e:	9b05      	ldr	r3, [sp, #20]
 8016c20:	3301      	adds	r3, #1
 8016c22:	9305      	str	r3, [sp, #20]
 8016c24:	f108 0801 	add.w	r8, r8, #1
 8016c28:	2301      	movs	r3, #1
 8016c2a:	9307      	str	r3, [sp, #28]
 8016c2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d12a      	bne.n	8016c88 <_dtoa_r+0x818>
 8016c32:	2001      	movs	r0, #1
 8016c34:	e030      	b.n	8016c98 <_dtoa_r+0x828>
 8016c36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016c38:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016c3c:	e795      	b.n	8016b6a <_dtoa_r+0x6fa>
 8016c3e:	9b07      	ldr	r3, [sp, #28]
 8016c40:	f109 37ff 	add.w	r7, r9, #4294967295
 8016c44:	42bb      	cmp	r3, r7
 8016c46:	bfbf      	itttt	lt
 8016c48:	9b07      	ldrlt	r3, [sp, #28]
 8016c4a:	9707      	strlt	r7, [sp, #28]
 8016c4c:	1afa      	sublt	r2, r7, r3
 8016c4e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016c50:	bfbb      	ittet	lt
 8016c52:	189b      	addlt	r3, r3, r2
 8016c54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016c56:	1bdf      	subge	r7, r3, r7
 8016c58:	2700      	movlt	r7, #0
 8016c5a:	f1b9 0f00 	cmp.w	r9, #0
 8016c5e:	bfb5      	itete	lt
 8016c60:	9b05      	ldrlt	r3, [sp, #20]
 8016c62:	9d05      	ldrge	r5, [sp, #20]
 8016c64:	eba3 0509 	sublt.w	r5, r3, r9
 8016c68:	464b      	movge	r3, r9
 8016c6a:	bfb8      	it	lt
 8016c6c:	2300      	movlt	r3, #0
 8016c6e:	e77e      	b.n	8016b6e <_dtoa_r+0x6fe>
 8016c70:	9f07      	ldr	r7, [sp, #28]
 8016c72:	9d05      	ldr	r5, [sp, #20]
 8016c74:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016c76:	e783      	b.n	8016b80 <_dtoa_r+0x710>
 8016c78:	9a07      	ldr	r2, [sp, #28]
 8016c7a:	e7ab      	b.n	8016bd4 <_dtoa_r+0x764>
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	e7d4      	b.n	8016c2a <_dtoa_r+0x7ba>
 8016c80:	9b00      	ldr	r3, [sp, #0]
 8016c82:	e7d2      	b.n	8016c2a <_dtoa_r+0x7ba>
 8016c84:	2300      	movs	r3, #0
 8016c86:	9307      	str	r3, [sp, #28]
 8016c88:	693b      	ldr	r3, [r7, #16]
 8016c8a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016c8e:	6918      	ldr	r0, [r3, #16]
 8016c90:	f000 fc20 	bl	80174d4 <__hi0bits>
 8016c94:	f1c0 0020 	rsb	r0, r0, #32
 8016c98:	4440      	add	r0, r8
 8016c9a:	f010 001f 	ands.w	r0, r0, #31
 8016c9e:	d047      	beq.n	8016d30 <_dtoa_r+0x8c0>
 8016ca0:	f1c0 0320 	rsb	r3, r0, #32
 8016ca4:	2b04      	cmp	r3, #4
 8016ca6:	dd3b      	ble.n	8016d20 <_dtoa_r+0x8b0>
 8016ca8:	9b05      	ldr	r3, [sp, #20]
 8016caa:	f1c0 001c 	rsb	r0, r0, #28
 8016cae:	4403      	add	r3, r0
 8016cb0:	9305      	str	r3, [sp, #20]
 8016cb2:	4405      	add	r5, r0
 8016cb4:	4480      	add	r8, r0
 8016cb6:	9b05      	ldr	r3, [sp, #20]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	dd05      	ble.n	8016cc8 <_dtoa_r+0x858>
 8016cbc:	461a      	mov	r2, r3
 8016cbe:	9904      	ldr	r1, [sp, #16]
 8016cc0:	4620      	mov	r0, r4
 8016cc2:	f000 fd43 	bl	801774c <__lshift>
 8016cc6:	9004      	str	r0, [sp, #16]
 8016cc8:	f1b8 0f00 	cmp.w	r8, #0
 8016ccc:	dd05      	ble.n	8016cda <_dtoa_r+0x86a>
 8016cce:	4639      	mov	r1, r7
 8016cd0:	4642      	mov	r2, r8
 8016cd2:	4620      	mov	r0, r4
 8016cd4:	f000 fd3a 	bl	801774c <__lshift>
 8016cd8:	4607      	mov	r7, r0
 8016cda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016cdc:	b353      	cbz	r3, 8016d34 <_dtoa_r+0x8c4>
 8016cde:	4639      	mov	r1, r7
 8016ce0:	9804      	ldr	r0, [sp, #16]
 8016ce2:	f000 fd87 	bl	80177f4 <__mcmp>
 8016ce6:	2800      	cmp	r0, #0
 8016ce8:	da24      	bge.n	8016d34 <_dtoa_r+0x8c4>
 8016cea:	2300      	movs	r3, #0
 8016cec:	220a      	movs	r2, #10
 8016cee:	9904      	ldr	r1, [sp, #16]
 8016cf0:	4620      	mov	r0, r4
 8016cf2:	f000 fbb4 	bl	801745e <__multadd>
 8016cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cf8:	9004      	str	r0, [sp, #16]
 8016cfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	f000 814d 	beq.w	8016f9e <_dtoa_r+0xb2e>
 8016d04:	2300      	movs	r3, #0
 8016d06:	4631      	mov	r1, r6
 8016d08:	220a      	movs	r2, #10
 8016d0a:	4620      	mov	r0, r4
 8016d0c:	f000 fba7 	bl	801745e <__multadd>
 8016d10:	9b02      	ldr	r3, [sp, #8]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	4606      	mov	r6, r0
 8016d16:	dc4f      	bgt.n	8016db8 <_dtoa_r+0x948>
 8016d18:	9b06      	ldr	r3, [sp, #24]
 8016d1a:	2b02      	cmp	r3, #2
 8016d1c:	dd4c      	ble.n	8016db8 <_dtoa_r+0x948>
 8016d1e:	e011      	b.n	8016d44 <_dtoa_r+0x8d4>
 8016d20:	d0c9      	beq.n	8016cb6 <_dtoa_r+0x846>
 8016d22:	9a05      	ldr	r2, [sp, #20]
 8016d24:	331c      	adds	r3, #28
 8016d26:	441a      	add	r2, r3
 8016d28:	9205      	str	r2, [sp, #20]
 8016d2a:	441d      	add	r5, r3
 8016d2c:	4498      	add	r8, r3
 8016d2e:	e7c2      	b.n	8016cb6 <_dtoa_r+0x846>
 8016d30:	4603      	mov	r3, r0
 8016d32:	e7f6      	b.n	8016d22 <_dtoa_r+0x8b2>
 8016d34:	f1b9 0f00 	cmp.w	r9, #0
 8016d38:	dc38      	bgt.n	8016dac <_dtoa_r+0x93c>
 8016d3a:	9b06      	ldr	r3, [sp, #24]
 8016d3c:	2b02      	cmp	r3, #2
 8016d3e:	dd35      	ble.n	8016dac <_dtoa_r+0x93c>
 8016d40:	f8cd 9008 	str.w	r9, [sp, #8]
 8016d44:	9b02      	ldr	r3, [sp, #8]
 8016d46:	b963      	cbnz	r3, 8016d62 <_dtoa_r+0x8f2>
 8016d48:	4639      	mov	r1, r7
 8016d4a:	2205      	movs	r2, #5
 8016d4c:	4620      	mov	r0, r4
 8016d4e:	f000 fb86 	bl	801745e <__multadd>
 8016d52:	4601      	mov	r1, r0
 8016d54:	4607      	mov	r7, r0
 8016d56:	9804      	ldr	r0, [sp, #16]
 8016d58:	f000 fd4c 	bl	80177f4 <__mcmp>
 8016d5c:	2800      	cmp	r0, #0
 8016d5e:	f73f adcc 	bgt.w	80168fa <_dtoa_r+0x48a>
 8016d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d64:	465d      	mov	r5, fp
 8016d66:	ea6f 0a03 	mvn.w	sl, r3
 8016d6a:	f04f 0900 	mov.w	r9, #0
 8016d6e:	4639      	mov	r1, r7
 8016d70:	4620      	mov	r0, r4
 8016d72:	f000 fb5d 	bl	8017430 <_Bfree>
 8016d76:	2e00      	cmp	r6, #0
 8016d78:	f43f aeb7 	beq.w	8016aea <_dtoa_r+0x67a>
 8016d7c:	f1b9 0f00 	cmp.w	r9, #0
 8016d80:	d005      	beq.n	8016d8e <_dtoa_r+0x91e>
 8016d82:	45b1      	cmp	r9, r6
 8016d84:	d003      	beq.n	8016d8e <_dtoa_r+0x91e>
 8016d86:	4649      	mov	r1, r9
 8016d88:	4620      	mov	r0, r4
 8016d8a:	f000 fb51 	bl	8017430 <_Bfree>
 8016d8e:	4631      	mov	r1, r6
 8016d90:	4620      	mov	r0, r4
 8016d92:	f000 fb4d 	bl	8017430 <_Bfree>
 8016d96:	e6a8      	b.n	8016aea <_dtoa_r+0x67a>
 8016d98:	2700      	movs	r7, #0
 8016d9a:	463e      	mov	r6, r7
 8016d9c:	e7e1      	b.n	8016d62 <_dtoa_r+0x8f2>
 8016d9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016da2:	463e      	mov	r6, r7
 8016da4:	e5a9      	b.n	80168fa <_dtoa_r+0x48a>
 8016da6:	bf00      	nop
 8016da8:	40240000 	.word	0x40240000
 8016dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016dae:	f8cd 9008 	str.w	r9, [sp, #8]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	f000 80fa 	beq.w	8016fac <_dtoa_r+0xb3c>
 8016db8:	2d00      	cmp	r5, #0
 8016dba:	dd05      	ble.n	8016dc8 <_dtoa_r+0x958>
 8016dbc:	4631      	mov	r1, r6
 8016dbe:	462a      	mov	r2, r5
 8016dc0:	4620      	mov	r0, r4
 8016dc2:	f000 fcc3 	bl	801774c <__lshift>
 8016dc6:	4606      	mov	r6, r0
 8016dc8:	9b07      	ldr	r3, [sp, #28]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d04c      	beq.n	8016e68 <_dtoa_r+0x9f8>
 8016dce:	6871      	ldr	r1, [r6, #4]
 8016dd0:	4620      	mov	r0, r4
 8016dd2:	f000 faf9 	bl	80173c8 <_Balloc>
 8016dd6:	6932      	ldr	r2, [r6, #16]
 8016dd8:	3202      	adds	r2, #2
 8016dda:	4605      	mov	r5, r0
 8016ddc:	0092      	lsls	r2, r2, #2
 8016dde:	f106 010c 	add.w	r1, r6, #12
 8016de2:	300c      	adds	r0, #12
 8016de4:	f7fe fd0c 	bl	8015800 <memcpy>
 8016de8:	2201      	movs	r2, #1
 8016dea:	4629      	mov	r1, r5
 8016dec:	4620      	mov	r0, r4
 8016dee:	f000 fcad 	bl	801774c <__lshift>
 8016df2:	9b00      	ldr	r3, [sp, #0]
 8016df4:	f8cd b014 	str.w	fp, [sp, #20]
 8016df8:	f003 0301 	and.w	r3, r3, #1
 8016dfc:	46b1      	mov	r9, r6
 8016dfe:	9307      	str	r3, [sp, #28]
 8016e00:	4606      	mov	r6, r0
 8016e02:	4639      	mov	r1, r7
 8016e04:	9804      	ldr	r0, [sp, #16]
 8016e06:	f7ff faa7 	bl	8016358 <quorem>
 8016e0a:	4649      	mov	r1, r9
 8016e0c:	4605      	mov	r5, r0
 8016e0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016e12:	9804      	ldr	r0, [sp, #16]
 8016e14:	f000 fcee 	bl	80177f4 <__mcmp>
 8016e18:	4632      	mov	r2, r6
 8016e1a:	9000      	str	r0, [sp, #0]
 8016e1c:	4639      	mov	r1, r7
 8016e1e:	4620      	mov	r0, r4
 8016e20:	f000 fd02 	bl	8017828 <__mdiff>
 8016e24:	68c3      	ldr	r3, [r0, #12]
 8016e26:	4602      	mov	r2, r0
 8016e28:	bb03      	cbnz	r3, 8016e6c <_dtoa_r+0x9fc>
 8016e2a:	4601      	mov	r1, r0
 8016e2c:	9008      	str	r0, [sp, #32]
 8016e2e:	9804      	ldr	r0, [sp, #16]
 8016e30:	f000 fce0 	bl	80177f4 <__mcmp>
 8016e34:	9a08      	ldr	r2, [sp, #32]
 8016e36:	4603      	mov	r3, r0
 8016e38:	4611      	mov	r1, r2
 8016e3a:	4620      	mov	r0, r4
 8016e3c:	9308      	str	r3, [sp, #32]
 8016e3e:	f000 faf7 	bl	8017430 <_Bfree>
 8016e42:	9b08      	ldr	r3, [sp, #32]
 8016e44:	b9a3      	cbnz	r3, 8016e70 <_dtoa_r+0xa00>
 8016e46:	9a06      	ldr	r2, [sp, #24]
 8016e48:	b992      	cbnz	r2, 8016e70 <_dtoa_r+0xa00>
 8016e4a:	9a07      	ldr	r2, [sp, #28]
 8016e4c:	b982      	cbnz	r2, 8016e70 <_dtoa_r+0xa00>
 8016e4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016e52:	d029      	beq.n	8016ea8 <_dtoa_r+0xa38>
 8016e54:	9b00      	ldr	r3, [sp, #0]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	dd01      	ble.n	8016e5e <_dtoa_r+0x9ee>
 8016e5a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016e5e:	9b05      	ldr	r3, [sp, #20]
 8016e60:	1c5d      	adds	r5, r3, #1
 8016e62:	f883 8000 	strb.w	r8, [r3]
 8016e66:	e782      	b.n	8016d6e <_dtoa_r+0x8fe>
 8016e68:	4630      	mov	r0, r6
 8016e6a:	e7c2      	b.n	8016df2 <_dtoa_r+0x982>
 8016e6c:	2301      	movs	r3, #1
 8016e6e:	e7e3      	b.n	8016e38 <_dtoa_r+0x9c8>
 8016e70:	9a00      	ldr	r2, [sp, #0]
 8016e72:	2a00      	cmp	r2, #0
 8016e74:	db04      	blt.n	8016e80 <_dtoa_r+0xa10>
 8016e76:	d125      	bne.n	8016ec4 <_dtoa_r+0xa54>
 8016e78:	9a06      	ldr	r2, [sp, #24]
 8016e7a:	bb1a      	cbnz	r2, 8016ec4 <_dtoa_r+0xa54>
 8016e7c:	9a07      	ldr	r2, [sp, #28]
 8016e7e:	bb0a      	cbnz	r2, 8016ec4 <_dtoa_r+0xa54>
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	ddec      	ble.n	8016e5e <_dtoa_r+0x9ee>
 8016e84:	2201      	movs	r2, #1
 8016e86:	9904      	ldr	r1, [sp, #16]
 8016e88:	4620      	mov	r0, r4
 8016e8a:	f000 fc5f 	bl	801774c <__lshift>
 8016e8e:	4639      	mov	r1, r7
 8016e90:	9004      	str	r0, [sp, #16]
 8016e92:	f000 fcaf 	bl	80177f4 <__mcmp>
 8016e96:	2800      	cmp	r0, #0
 8016e98:	dc03      	bgt.n	8016ea2 <_dtoa_r+0xa32>
 8016e9a:	d1e0      	bne.n	8016e5e <_dtoa_r+0x9ee>
 8016e9c:	f018 0f01 	tst.w	r8, #1
 8016ea0:	d0dd      	beq.n	8016e5e <_dtoa_r+0x9ee>
 8016ea2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016ea6:	d1d8      	bne.n	8016e5a <_dtoa_r+0x9ea>
 8016ea8:	9b05      	ldr	r3, [sp, #20]
 8016eaa:	9a05      	ldr	r2, [sp, #20]
 8016eac:	1c5d      	adds	r5, r3, #1
 8016eae:	2339      	movs	r3, #57	; 0x39
 8016eb0:	7013      	strb	r3, [r2, #0]
 8016eb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016eb6:	2b39      	cmp	r3, #57	; 0x39
 8016eb8:	f105 32ff 	add.w	r2, r5, #4294967295
 8016ebc:	d04f      	beq.n	8016f5e <_dtoa_r+0xaee>
 8016ebe:	3301      	adds	r3, #1
 8016ec0:	7013      	strb	r3, [r2, #0]
 8016ec2:	e754      	b.n	8016d6e <_dtoa_r+0x8fe>
 8016ec4:	9a05      	ldr	r2, [sp, #20]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	f102 0501 	add.w	r5, r2, #1
 8016ecc:	dd06      	ble.n	8016edc <_dtoa_r+0xa6c>
 8016ece:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016ed2:	d0e9      	beq.n	8016ea8 <_dtoa_r+0xa38>
 8016ed4:	f108 0801 	add.w	r8, r8, #1
 8016ed8:	9b05      	ldr	r3, [sp, #20]
 8016eda:	e7c2      	b.n	8016e62 <_dtoa_r+0x9f2>
 8016edc:	9a02      	ldr	r2, [sp, #8]
 8016ede:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016ee2:	eba5 030b 	sub.w	r3, r5, fp
 8016ee6:	4293      	cmp	r3, r2
 8016ee8:	d021      	beq.n	8016f2e <_dtoa_r+0xabe>
 8016eea:	2300      	movs	r3, #0
 8016eec:	220a      	movs	r2, #10
 8016eee:	9904      	ldr	r1, [sp, #16]
 8016ef0:	4620      	mov	r0, r4
 8016ef2:	f000 fab4 	bl	801745e <__multadd>
 8016ef6:	45b1      	cmp	r9, r6
 8016ef8:	9004      	str	r0, [sp, #16]
 8016efa:	f04f 0300 	mov.w	r3, #0
 8016efe:	f04f 020a 	mov.w	r2, #10
 8016f02:	4649      	mov	r1, r9
 8016f04:	4620      	mov	r0, r4
 8016f06:	d105      	bne.n	8016f14 <_dtoa_r+0xaa4>
 8016f08:	f000 faa9 	bl	801745e <__multadd>
 8016f0c:	4681      	mov	r9, r0
 8016f0e:	4606      	mov	r6, r0
 8016f10:	9505      	str	r5, [sp, #20]
 8016f12:	e776      	b.n	8016e02 <_dtoa_r+0x992>
 8016f14:	f000 faa3 	bl	801745e <__multadd>
 8016f18:	4631      	mov	r1, r6
 8016f1a:	4681      	mov	r9, r0
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	220a      	movs	r2, #10
 8016f20:	4620      	mov	r0, r4
 8016f22:	f000 fa9c 	bl	801745e <__multadd>
 8016f26:	4606      	mov	r6, r0
 8016f28:	e7f2      	b.n	8016f10 <_dtoa_r+0xaa0>
 8016f2a:	f04f 0900 	mov.w	r9, #0
 8016f2e:	2201      	movs	r2, #1
 8016f30:	9904      	ldr	r1, [sp, #16]
 8016f32:	4620      	mov	r0, r4
 8016f34:	f000 fc0a 	bl	801774c <__lshift>
 8016f38:	4639      	mov	r1, r7
 8016f3a:	9004      	str	r0, [sp, #16]
 8016f3c:	f000 fc5a 	bl	80177f4 <__mcmp>
 8016f40:	2800      	cmp	r0, #0
 8016f42:	dcb6      	bgt.n	8016eb2 <_dtoa_r+0xa42>
 8016f44:	d102      	bne.n	8016f4c <_dtoa_r+0xadc>
 8016f46:	f018 0f01 	tst.w	r8, #1
 8016f4a:	d1b2      	bne.n	8016eb2 <_dtoa_r+0xa42>
 8016f4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016f50:	2b30      	cmp	r3, #48	; 0x30
 8016f52:	f105 32ff 	add.w	r2, r5, #4294967295
 8016f56:	f47f af0a 	bne.w	8016d6e <_dtoa_r+0x8fe>
 8016f5a:	4615      	mov	r5, r2
 8016f5c:	e7f6      	b.n	8016f4c <_dtoa_r+0xadc>
 8016f5e:	4593      	cmp	fp, r2
 8016f60:	d105      	bne.n	8016f6e <_dtoa_r+0xafe>
 8016f62:	2331      	movs	r3, #49	; 0x31
 8016f64:	f10a 0a01 	add.w	sl, sl, #1
 8016f68:	f88b 3000 	strb.w	r3, [fp]
 8016f6c:	e6ff      	b.n	8016d6e <_dtoa_r+0x8fe>
 8016f6e:	4615      	mov	r5, r2
 8016f70:	e79f      	b.n	8016eb2 <_dtoa_r+0xa42>
 8016f72:	f8df b064 	ldr.w	fp, [pc, #100]	; 8016fd8 <_dtoa_r+0xb68>
 8016f76:	e007      	b.n	8016f88 <_dtoa_r+0xb18>
 8016f78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f7a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8016fdc <_dtoa_r+0xb6c>
 8016f7e:	b11b      	cbz	r3, 8016f88 <_dtoa_r+0xb18>
 8016f80:	f10b 0308 	add.w	r3, fp, #8
 8016f84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016f86:	6013      	str	r3, [r2, #0]
 8016f88:	4658      	mov	r0, fp
 8016f8a:	b017      	add	sp, #92	; 0x5c
 8016f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f90:	9b06      	ldr	r3, [sp, #24]
 8016f92:	2b01      	cmp	r3, #1
 8016f94:	f77f ae35 	ble.w	8016c02 <_dtoa_r+0x792>
 8016f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f9a:	9307      	str	r3, [sp, #28]
 8016f9c:	e649      	b.n	8016c32 <_dtoa_r+0x7c2>
 8016f9e:	9b02      	ldr	r3, [sp, #8]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	dc03      	bgt.n	8016fac <_dtoa_r+0xb3c>
 8016fa4:	9b06      	ldr	r3, [sp, #24]
 8016fa6:	2b02      	cmp	r3, #2
 8016fa8:	f73f aecc 	bgt.w	8016d44 <_dtoa_r+0x8d4>
 8016fac:	465d      	mov	r5, fp
 8016fae:	4639      	mov	r1, r7
 8016fb0:	9804      	ldr	r0, [sp, #16]
 8016fb2:	f7ff f9d1 	bl	8016358 <quorem>
 8016fb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016fba:	f805 8b01 	strb.w	r8, [r5], #1
 8016fbe:	9a02      	ldr	r2, [sp, #8]
 8016fc0:	eba5 030b 	sub.w	r3, r5, fp
 8016fc4:	429a      	cmp	r2, r3
 8016fc6:	ddb0      	ble.n	8016f2a <_dtoa_r+0xaba>
 8016fc8:	2300      	movs	r3, #0
 8016fca:	220a      	movs	r2, #10
 8016fcc:	9904      	ldr	r1, [sp, #16]
 8016fce:	4620      	mov	r0, r4
 8016fd0:	f000 fa45 	bl	801745e <__multadd>
 8016fd4:	9004      	str	r0, [sp, #16]
 8016fd6:	e7ea      	b.n	8016fae <_dtoa_r+0xb3e>
 8016fd8:	080180f0 	.word	0x080180f0
 8016fdc:	08018114 	.word	0x08018114

08016fe0 <__sflush_r>:
 8016fe0:	898a      	ldrh	r2, [r1, #12]
 8016fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fe6:	4605      	mov	r5, r0
 8016fe8:	0710      	lsls	r0, r2, #28
 8016fea:	460c      	mov	r4, r1
 8016fec:	d458      	bmi.n	80170a0 <__sflush_r+0xc0>
 8016fee:	684b      	ldr	r3, [r1, #4]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	dc05      	bgt.n	8017000 <__sflush_r+0x20>
 8016ff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	dc02      	bgt.n	8017000 <__sflush_r+0x20>
 8016ffa:	2000      	movs	r0, #0
 8016ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017002:	2e00      	cmp	r6, #0
 8017004:	d0f9      	beq.n	8016ffa <__sflush_r+0x1a>
 8017006:	2300      	movs	r3, #0
 8017008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801700c:	682f      	ldr	r7, [r5, #0]
 801700e:	6a21      	ldr	r1, [r4, #32]
 8017010:	602b      	str	r3, [r5, #0]
 8017012:	d032      	beq.n	801707a <__sflush_r+0x9a>
 8017014:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017016:	89a3      	ldrh	r3, [r4, #12]
 8017018:	075a      	lsls	r2, r3, #29
 801701a:	d505      	bpl.n	8017028 <__sflush_r+0x48>
 801701c:	6863      	ldr	r3, [r4, #4]
 801701e:	1ac0      	subs	r0, r0, r3
 8017020:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017022:	b10b      	cbz	r3, 8017028 <__sflush_r+0x48>
 8017024:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017026:	1ac0      	subs	r0, r0, r3
 8017028:	2300      	movs	r3, #0
 801702a:	4602      	mov	r2, r0
 801702c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801702e:	6a21      	ldr	r1, [r4, #32]
 8017030:	4628      	mov	r0, r5
 8017032:	47b0      	blx	r6
 8017034:	1c43      	adds	r3, r0, #1
 8017036:	89a3      	ldrh	r3, [r4, #12]
 8017038:	d106      	bne.n	8017048 <__sflush_r+0x68>
 801703a:	6829      	ldr	r1, [r5, #0]
 801703c:	291d      	cmp	r1, #29
 801703e:	d848      	bhi.n	80170d2 <__sflush_r+0xf2>
 8017040:	4a29      	ldr	r2, [pc, #164]	; (80170e8 <__sflush_r+0x108>)
 8017042:	40ca      	lsrs	r2, r1
 8017044:	07d6      	lsls	r6, r2, #31
 8017046:	d544      	bpl.n	80170d2 <__sflush_r+0xf2>
 8017048:	2200      	movs	r2, #0
 801704a:	6062      	str	r2, [r4, #4]
 801704c:	04d9      	lsls	r1, r3, #19
 801704e:	6922      	ldr	r2, [r4, #16]
 8017050:	6022      	str	r2, [r4, #0]
 8017052:	d504      	bpl.n	801705e <__sflush_r+0x7e>
 8017054:	1c42      	adds	r2, r0, #1
 8017056:	d101      	bne.n	801705c <__sflush_r+0x7c>
 8017058:	682b      	ldr	r3, [r5, #0]
 801705a:	b903      	cbnz	r3, 801705e <__sflush_r+0x7e>
 801705c:	6560      	str	r0, [r4, #84]	; 0x54
 801705e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017060:	602f      	str	r7, [r5, #0]
 8017062:	2900      	cmp	r1, #0
 8017064:	d0c9      	beq.n	8016ffa <__sflush_r+0x1a>
 8017066:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801706a:	4299      	cmp	r1, r3
 801706c:	d002      	beq.n	8017074 <__sflush_r+0x94>
 801706e:	4628      	mov	r0, r5
 8017070:	f000 fc94 	bl	801799c <_free_r>
 8017074:	2000      	movs	r0, #0
 8017076:	6360      	str	r0, [r4, #52]	; 0x34
 8017078:	e7c0      	b.n	8016ffc <__sflush_r+0x1c>
 801707a:	2301      	movs	r3, #1
 801707c:	4628      	mov	r0, r5
 801707e:	47b0      	blx	r6
 8017080:	1c41      	adds	r1, r0, #1
 8017082:	d1c8      	bne.n	8017016 <__sflush_r+0x36>
 8017084:	682b      	ldr	r3, [r5, #0]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d0c5      	beq.n	8017016 <__sflush_r+0x36>
 801708a:	2b1d      	cmp	r3, #29
 801708c:	d001      	beq.n	8017092 <__sflush_r+0xb2>
 801708e:	2b16      	cmp	r3, #22
 8017090:	d101      	bne.n	8017096 <__sflush_r+0xb6>
 8017092:	602f      	str	r7, [r5, #0]
 8017094:	e7b1      	b.n	8016ffa <__sflush_r+0x1a>
 8017096:	89a3      	ldrh	r3, [r4, #12]
 8017098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801709c:	81a3      	strh	r3, [r4, #12]
 801709e:	e7ad      	b.n	8016ffc <__sflush_r+0x1c>
 80170a0:	690f      	ldr	r7, [r1, #16]
 80170a2:	2f00      	cmp	r7, #0
 80170a4:	d0a9      	beq.n	8016ffa <__sflush_r+0x1a>
 80170a6:	0793      	lsls	r3, r2, #30
 80170a8:	680e      	ldr	r6, [r1, #0]
 80170aa:	bf08      	it	eq
 80170ac:	694b      	ldreq	r3, [r1, #20]
 80170ae:	600f      	str	r7, [r1, #0]
 80170b0:	bf18      	it	ne
 80170b2:	2300      	movne	r3, #0
 80170b4:	eba6 0807 	sub.w	r8, r6, r7
 80170b8:	608b      	str	r3, [r1, #8]
 80170ba:	f1b8 0f00 	cmp.w	r8, #0
 80170be:	dd9c      	ble.n	8016ffa <__sflush_r+0x1a>
 80170c0:	4643      	mov	r3, r8
 80170c2:	463a      	mov	r2, r7
 80170c4:	6a21      	ldr	r1, [r4, #32]
 80170c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80170c8:	4628      	mov	r0, r5
 80170ca:	47b0      	blx	r6
 80170cc:	2800      	cmp	r0, #0
 80170ce:	dc06      	bgt.n	80170de <__sflush_r+0xfe>
 80170d0:	89a3      	ldrh	r3, [r4, #12]
 80170d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170d6:	81a3      	strh	r3, [r4, #12]
 80170d8:	f04f 30ff 	mov.w	r0, #4294967295
 80170dc:	e78e      	b.n	8016ffc <__sflush_r+0x1c>
 80170de:	4407      	add	r7, r0
 80170e0:	eba8 0800 	sub.w	r8, r8, r0
 80170e4:	e7e9      	b.n	80170ba <__sflush_r+0xda>
 80170e6:	bf00      	nop
 80170e8:	20400001 	.word	0x20400001

080170ec <_fflush_r>:
 80170ec:	b538      	push	{r3, r4, r5, lr}
 80170ee:	690b      	ldr	r3, [r1, #16]
 80170f0:	4605      	mov	r5, r0
 80170f2:	460c      	mov	r4, r1
 80170f4:	b1db      	cbz	r3, 801712e <_fflush_r+0x42>
 80170f6:	b118      	cbz	r0, 8017100 <_fflush_r+0x14>
 80170f8:	6983      	ldr	r3, [r0, #24]
 80170fa:	b90b      	cbnz	r3, 8017100 <_fflush_r+0x14>
 80170fc:	f000 f860 	bl	80171c0 <__sinit>
 8017100:	4b0c      	ldr	r3, [pc, #48]	; (8017134 <_fflush_r+0x48>)
 8017102:	429c      	cmp	r4, r3
 8017104:	d109      	bne.n	801711a <_fflush_r+0x2e>
 8017106:	686c      	ldr	r4, [r5, #4]
 8017108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801710c:	b17b      	cbz	r3, 801712e <_fflush_r+0x42>
 801710e:	4621      	mov	r1, r4
 8017110:	4628      	mov	r0, r5
 8017112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017116:	f7ff bf63 	b.w	8016fe0 <__sflush_r>
 801711a:	4b07      	ldr	r3, [pc, #28]	; (8017138 <_fflush_r+0x4c>)
 801711c:	429c      	cmp	r4, r3
 801711e:	d101      	bne.n	8017124 <_fflush_r+0x38>
 8017120:	68ac      	ldr	r4, [r5, #8]
 8017122:	e7f1      	b.n	8017108 <_fflush_r+0x1c>
 8017124:	4b05      	ldr	r3, [pc, #20]	; (801713c <_fflush_r+0x50>)
 8017126:	429c      	cmp	r4, r3
 8017128:	bf08      	it	eq
 801712a:	68ec      	ldreq	r4, [r5, #12]
 801712c:	e7ec      	b.n	8017108 <_fflush_r+0x1c>
 801712e:	2000      	movs	r0, #0
 8017130:	bd38      	pop	{r3, r4, r5, pc}
 8017132:	bf00      	nop
 8017134:	08018144 	.word	0x08018144
 8017138:	08018164 	.word	0x08018164
 801713c:	08018124 	.word	0x08018124

08017140 <std>:
 8017140:	2300      	movs	r3, #0
 8017142:	b510      	push	{r4, lr}
 8017144:	4604      	mov	r4, r0
 8017146:	e9c0 3300 	strd	r3, r3, [r0]
 801714a:	6083      	str	r3, [r0, #8]
 801714c:	8181      	strh	r1, [r0, #12]
 801714e:	6643      	str	r3, [r0, #100]	; 0x64
 8017150:	81c2      	strh	r2, [r0, #14]
 8017152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017156:	6183      	str	r3, [r0, #24]
 8017158:	4619      	mov	r1, r3
 801715a:	2208      	movs	r2, #8
 801715c:	305c      	adds	r0, #92	; 0x5c
 801715e:	f7fe fb5a 	bl	8015816 <memset>
 8017162:	4b05      	ldr	r3, [pc, #20]	; (8017178 <std+0x38>)
 8017164:	6263      	str	r3, [r4, #36]	; 0x24
 8017166:	4b05      	ldr	r3, [pc, #20]	; (801717c <std+0x3c>)
 8017168:	62a3      	str	r3, [r4, #40]	; 0x28
 801716a:	4b05      	ldr	r3, [pc, #20]	; (8017180 <std+0x40>)
 801716c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801716e:	4b05      	ldr	r3, [pc, #20]	; (8017184 <std+0x44>)
 8017170:	6224      	str	r4, [r4, #32]
 8017172:	6323      	str	r3, [r4, #48]	; 0x30
 8017174:	bd10      	pop	{r4, pc}
 8017176:	bf00      	nop
 8017178:	08017d8d 	.word	0x08017d8d
 801717c:	08017daf 	.word	0x08017daf
 8017180:	08017de7 	.word	0x08017de7
 8017184:	08017e0b 	.word	0x08017e0b

08017188 <_cleanup_r>:
 8017188:	4901      	ldr	r1, [pc, #4]	; (8017190 <_cleanup_r+0x8>)
 801718a:	f000 b885 	b.w	8017298 <_fwalk_reent>
 801718e:	bf00      	nop
 8017190:	080170ed 	.word	0x080170ed

08017194 <__sfmoreglue>:
 8017194:	b570      	push	{r4, r5, r6, lr}
 8017196:	1e4a      	subs	r2, r1, #1
 8017198:	2568      	movs	r5, #104	; 0x68
 801719a:	4355      	muls	r5, r2
 801719c:	460e      	mov	r6, r1
 801719e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80171a2:	f000 fc49 	bl	8017a38 <_malloc_r>
 80171a6:	4604      	mov	r4, r0
 80171a8:	b140      	cbz	r0, 80171bc <__sfmoreglue+0x28>
 80171aa:	2100      	movs	r1, #0
 80171ac:	e9c0 1600 	strd	r1, r6, [r0]
 80171b0:	300c      	adds	r0, #12
 80171b2:	60a0      	str	r0, [r4, #8]
 80171b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80171b8:	f7fe fb2d 	bl	8015816 <memset>
 80171bc:	4620      	mov	r0, r4
 80171be:	bd70      	pop	{r4, r5, r6, pc}

080171c0 <__sinit>:
 80171c0:	6983      	ldr	r3, [r0, #24]
 80171c2:	b510      	push	{r4, lr}
 80171c4:	4604      	mov	r4, r0
 80171c6:	bb33      	cbnz	r3, 8017216 <__sinit+0x56>
 80171c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80171cc:	6503      	str	r3, [r0, #80]	; 0x50
 80171ce:	4b12      	ldr	r3, [pc, #72]	; (8017218 <__sinit+0x58>)
 80171d0:	4a12      	ldr	r2, [pc, #72]	; (801721c <__sinit+0x5c>)
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	6282      	str	r2, [r0, #40]	; 0x28
 80171d6:	4298      	cmp	r0, r3
 80171d8:	bf04      	itt	eq
 80171da:	2301      	moveq	r3, #1
 80171dc:	6183      	streq	r3, [r0, #24]
 80171de:	f000 f81f 	bl	8017220 <__sfp>
 80171e2:	6060      	str	r0, [r4, #4]
 80171e4:	4620      	mov	r0, r4
 80171e6:	f000 f81b 	bl	8017220 <__sfp>
 80171ea:	60a0      	str	r0, [r4, #8]
 80171ec:	4620      	mov	r0, r4
 80171ee:	f000 f817 	bl	8017220 <__sfp>
 80171f2:	2200      	movs	r2, #0
 80171f4:	60e0      	str	r0, [r4, #12]
 80171f6:	2104      	movs	r1, #4
 80171f8:	6860      	ldr	r0, [r4, #4]
 80171fa:	f7ff ffa1 	bl	8017140 <std>
 80171fe:	2201      	movs	r2, #1
 8017200:	2109      	movs	r1, #9
 8017202:	68a0      	ldr	r0, [r4, #8]
 8017204:	f7ff ff9c 	bl	8017140 <std>
 8017208:	2202      	movs	r2, #2
 801720a:	2112      	movs	r1, #18
 801720c:	68e0      	ldr	r0, [r4, #12]
 801720e:	f7ff ff97 	bl	8017140 <std>
 8017212:	2301      	movs	r3, #1
 8017214:	61a3      	str	r3, [r4, #24]
 8017216:	bd10      	pop	{r4, pc}
 8017218:	080180dc 	.word	0x080180dc
 801721c:	08017189 	.word	0x08017189

08017220 <__sfp>:
 8017220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017222:	4b1b      	ldr	r3, [pc, #108]	; (8017290 <__sfp+0x70>)
 8017224:	681e      	ldr	r6, [r3, #0]
 8017226:	69b3      	ldr	r3, [r6, #24]
 8017228:	4607      	mov	r7, r0
 801722a:	b913      	cbnz	r3, 8017232 <__sfp+0x12>
 801722c:	4630      	mov	r0, r6
 801722e:	f7ff ffc7 	bl	80171c0 <__sinit>
 8017232:	3648      	adds	r6, #72	; 0x48
 8017234:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017238:	3b01      	subs	r3, #1
 801723a:	d503      	bpl.n	8017244 <__sfp+0x24>
 801723c:	6833      	ldr	r3, [r6, #0]
 801723e:	b133      	cbz	r3, 801724e <__sfp+0x2e>
 8017240:	6836      	ldr	r6, [r6, #0]
 8017242:	e7f7      	b.n	8017234 <__sfp+0x14>
 8017244:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017248:	b16d      	cbz	r5, 8017266 <__sfp+0x46>
 801724a:	3468      	adds	r4, #104	; 0x68
 801724c:	e7f4      	b.n	8017238 <__sfp+0x18>
 801724e:	2104      	movs	r1, #4
 8017250:	4638      	mov	r0, r7
 8017252:	f7ff ff9f 	bl	8017194 <__sfmoreglue>
 8017256:	6030      	str	r0, [r6, #0]
 8017258:	2800      	cmp	r0, #0
 801725a:	d1f1      	bne.n	8017240 <__sfp+0x20>
 801725c:	230c      	movs	r3, #12
 801725e:	603b      	str	r3, [r7, #0]
 8017260:	4604      	mov	r4, r0
 8017262:	4620      	mov	r0, r4
 8017264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017266:	4b0b      	ldr	r3, [pc, #44]	; (8017294 <__sfp+0x74>)
 8017268:	6665      	str	r5, [r4, #100]	; 0x64
 801726a:	e9c4 5500 	strd	r5, r5, [r4]
 801726e:	60a5      	str	r5, [r4, #8]
 8017270:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017274:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017278:	2208      	movs	r2, #8
 801727a:	4629      	mov	r1, r5
 801727c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017280:	f7fe fac9 	bl	8015816 <memset>
 8017284:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017288:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801728c:	e7e9      	b.n	8017262 <__sfp+0x42>
 801728e:	bf00      	nop
 8017290:	080180dc 	.word	0x080180dc
 8017294:	ffff0001 	.word	0xffff0001

08017298 <_fwalk_reent>:
 8017298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801729c:	4680      	mov	r8, r0
 801729e:	4689      	mov	r9, r1
 80172a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80172a4:	2600      	movs	r6, #0
 80172a6:	b914      	cbnz	r4, 80172ae <_fwalk_reent+0x16>
 80172a8:	4630      	mov	r0, r6
 80172aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80172b2:	3f01      	subs	r7, #1
 80172b4:	d501      	bpl.n	80172ba <_fwalk_reent+0x22>
 80172b6:	6824      	ldr	r4, [r4, #0]
 80172b8:	e7f5      	b.n	80172a6 <_fwalk_reent+0xe>
 80172ba:	89ab      	ldrh	r3, [r5, #12]
 80172bc:	2b01      	cmp	r3, #1
 80172be:	d907      	bls.n	80172d0 <_fwalk_reent+0x38>
 80172c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80172c4:	3301      	adds	r3, #1
 80172c6:	d003      	beq.n	80172d0 <_fwalk_reent+0x38>
 80172c8:	4629      	mov	r1, r5
 80172ca:	4640      	mov	r0, r8
 80172cc:	47c8      	blx	r9
 80172ce:	4306      	orrs	r6, r0
 80172d0:	3568      	adds	r5, #104	; 0x68
 80172d2:	e7ee      	b.n	80172b2 <_fwalk_reent+0x1a>

080172d4 <_localeconv_r>:
 80172d4:	4b04      	ldr	r3, [pc, #16]	; (80172e8 <_localeconv_r+0x14>)
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	6a18      	ldr	r0, [r3, #32]
 80172da:	4b04      	ldr	r3, [pc, #16]	; (80172ec <_localeconv_r+0x18>)
 80172dc:	2800      	cmp	r0, #0
 80172de:	bf08      	it	eq
 80172e0:	4618      	moveq	r0, r3
 80172e2:	30f0      	adds	r0, #240	; 0xf0
 80172e4:	4770      	bx	lr
 80172e6:	bf00      	nop
 80172e8:	2000008c 	.word	0x2000008c
 80172ec:	200000f0 	.word	0x200000f0

080172f0 <__swhatbuf_r>:
 80172f0:	b570      	push	{r4, r5, r6, lr}
 80172f2:	460e      	mov	r6, r1
 80172f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172f8:	2900      	cmp	r1, #0
 80172fa:	b096      	sub	sp, #88	; 0x58
 80172fc:	4614      	mov	r4, r2
 80172fe:	461d      	mov	r5, r3
 8017300:	da07      	bge.n	8017312 <__swhatbuf_r+0x22>
 8017302:	2300      	movs	r3, #0
 8017304:	602b      	str	r3, [r5, #0]
 8017306:	89b3      	ldrh	r3, [r6, #12]
 8017308:	061a      	lsls	r2, r3, #24
 801730a:	d410      	bmi.n	801732e <__swhatbuf_r+0x3e>
 801730c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017310:	e00e      	b.n	8017330 <__swhatbuf_r+0x40>
 8017312:	466a      	mov	r2, sp
 8017314:	f000 fda0 	bl	8017e58 <_fstat_r>
 8017318:	2800      	cmp	r0, #0
 801731a:	dbf2      	blt.n	8017302 <__swhatbuf_r+0x12>
 801731c:	9a01      	ldr	r2, [sp, #4]
 801731e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017322:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017326:	425a      	negs	r2, r3
 8017328:	415a      	adcs	r2, r3
 801732a:	602a      	str	r2, [r5, #0]
 801732c:	e7ee      	b.n	801730c <__swhatbuf_r+0x1c>
 801732e:	2340      	movs	r3, #64	; 0x40
 8017330:	2000      	movs	r0, #0
 8017332:	6023      	str	r3, [r4, #0]
 8017334:	b016      	add	sp, #88	; 0x58
 8017336:	bd70      	pop	{r4, r5, r6, pc}

08017338 <__smakebuf_r>:
 8017338:	898b      	ldrh	r3, [r1, #12]
 801733a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801733c:	079d      	lsls	r5, r3, #30
 801733e:	4606      	mov	r6, r0
 8017340:	460c      	mov	r4, r1
 8017342:	d507      	bpl.n	8017354 <__smakebuf_r+0x1c>
 8017344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017348:	6023      	str	r3, [r4, #0]
 801734a:	6123      	str	r3, [r4, #16]
 801734c:	2301      	movs	r3, #1
 801734e:	6163      	str	r3, [r4, #20]
 8017350:	b002      	add	sp, #8
 8017352:	bd70      	pop	{r4, r5, r6, pc}
 8017354:	ab01      	add	r3, sp, #4
 8017356:	466a      	mov	r2, sp
 8017358:	f7ff ffca 	bl	80172f0 <__swhatbuf_r>
 801735c:	9900      	ldr	r1, [sp, #0]
 801735e:	4605      	mov	r5, r0
 8017360:	4630      	mov	r0, r6
 8017362:	f000 fb69 	bl	8017a38 <_malloc_r>
 8017366:	b948      	cbnz	r0, 801737c <__smakebuf_r+0x44>
 8017368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801736c:	059a      	lsls	r2, r3, #22
 801736e:	d4ef      	bmi.n	8017350 <__smakebuf_r+0x18>
 8017370:	f023 0303 	bic.w	r3, r3, #3
 8017374:	f043 0302 	orr.w	r3, r3, #2
 8017378:	81a3      	strh	r3, [r4, #12]
 801737a:	e7e3      	b.n	8017344 <__smakebuf_r+0xc>
 801737c:	4b0d      	ldr	r3, [pc, #52]	; (80173b4 <__smakebuf_r+0x7c>)
 801737e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017380:	89a3      	ldrh	r3, [r4, #12]
 8017382:	6020      	str	r0, [r4, #0]
 8017384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017388:	81a3      	strh	r3, [r4, #12]
 801738a:	9b00      	ldr	r3, [sp, #0]
 801738c:	6163      	str	r3, [r4, #20]
 801738e:	9b01      	ldr	r3, [sp, #4]
 8017390:	6120      	str	r0, [r4, #16]
 8017392:	b15b      	cbz	r3, 80173ac <__smakebuf_r+0x74>
 8017394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017398:	4630      	mov	r0, r6
 801739a:	f000 fd6f 	bl	8017e7c <_isatty_r>
 801739e:	b128      	cbz	r0, 80173ac <__smakebuf_r+0x74>
 80173a0:	89a3      	ldrh	r3, [r4, #12]
 80173a2:	f023 0303 	bic.w	r3, r3, #3
 80173a6:	f043 0301 	orr.w	r3, r3, #1
 80173aa:	81a3      	strh	r3, [r4, #12]
 80173ac:	89a3      	ldrh	r3, [r4, #12]
 80173ae:	431d      	orrs	r5, r3
 80173b0:	81a5      	strh	r5, [r4, #12]
 80173b2:	e7cd      	b.n	8017350 <__smakebuf_r+0x18>
 80173b4:	08017189 	.word	0x08017189

080173b8 <malloc>:
 80173b8:	4b02      	ldr	r3, [pc, #8]	; (80173c4 <malloc+0xc>)
 80173ba:	4601      	mov	r1, r0
 80173bc:	6818      	ldr	r0, [r3, #0]
 80173be:	f000 bb3b 	b.w	8017a38 <_malloc_r>
 80173c2:	bf00      	nop
 80173c4:	2000008c 	.word	0x2000008c

080173c8 <_Balloc>:
 80173c8:	b570      	push	{r4, r5, r6, lr}
 80173ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80173cc:	4604      	mov	r4, r0
 80173ce:	460e      	mov	r6, r1
 80173d0:	b93d      	cbnz	r5, 80173e2 <_Balloc+0x1a>
 80173d2:	2010      	movs	r0, #16
 80173d4:	f7ff fff0 	bl	80173b8 <malloc>
 80173d8:	6260      	str	r0, [r4, #36]	; 0x24
 80173da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80173de:	6005      	str	r5, [r0, #0]
 80173e0:	60c5      	str	r5, [r0, #12]
 80173e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80173e4:	68eb      	ldr	r3, [r5, #12]
 80173e6:	b183      	cbz	r3, 801740a <_Balloc+0x42>
 80173e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80173ea:	68db      	ldr	r3, [r3, #12]
 80173ec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80173f0:	b9b8      	cbnz	r0, 8017422 <_Balloc+0x5a>
 80173f2:	2101      	movs	r1, #1
 80173f4:	fa01 f506 	lsl.w	r5, r1, r6
 80173f8:	1d6a      	adds	r2, r5, #5
 80173fa:	0092      	lsls	r2, r2, #2
 80173fc:	4620      	mov	r0, r4
 80173fe:	f000 fabf 	bl	8017980 <_calloc_r>
 8017402:	b160      	cbz	r0, 801741e <_Balloc+0x56>
 8017404:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017408:	e00e      	b.n	8017428 <_Balloc+0x60>
 801740a:	2221      	movs	r2, #33	; 0x21
 801740c:	2104      	movs	r1, #4
 801740e:	4620      	mov	r0, r4
 8017410:	f000 fab6 	bl	8017980 <_calloc_r>
 8017414:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017416:	60e8      	str	r0, [r5, #12]
 8017418:	68db      	ldr	r3, [r3, #12]
 801741a:	2b00      	cmp	r3, #0
 801741c:	d1e4      	bne.n	80173e8 <_Balloc+0x20>
 801741e:	2000      	movs	r0, #0
 8017420:	bd70      	pop	{r4, r5, r6, pc}
 8017422:	6802      	ldr	r2, [r0, #0]
 8017424:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017428:	2300      	movs	r3, #0
 801742a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801742e:	e7f7      	b.n	8017420 <_Balloc+0x58>

08017430 <_Bfree>:
 8017430:	b570      	push	{r4, r5, r6, lr}
 8017432:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017434:	4606      	mov	r6, r0
 8017436:	460d      	mov	r5, r1
 8017438:	b93c      	cbnz	r4, 801744a <_Bfree+0x1a>
 801743a:	2010      	movs	r0, #16
 801743c:	f7ff ffbc 	bl	80173b8 <malloc>
 8017440:	6270      	str	r0, [r6, #36]	; 0x24
 8017442:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017446:	6004      	str	r4, [r0, #0]
 8017448:	60c4      	str	r4, [r0, #12]
 801744a:	b13d      	cbz	r5, 801745c <_Bfree+0x2c>
 801744c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801744e:	686a      	ldr	r2, [r5, #4]
 8017450:	68db      	ldr	r3, [r3, #12]
 8017452:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017456:	6029      	str	r1, [r5, #0]
 8017458:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801745c:	bd70      	pop	{r4, r5, r6, pc}

0801745e <__multadd>:
 801745e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017462:	690d      	ldr	r5, [r1, #16]
 8017464:	461f      	mov	r7, r3
 8017466:	4606      	mov	r6, r0
 8017468:	460c      	mov	r4, r1
 801746a:	f101 0c14 	add.w	ip, r1, #20
 801746e:	2300      	movs	r3, #0
 8017470:	f8dc 0000 	ldr.w	r0, [ip]
 8017474:	b281      	uxth	r1, r0
 8017476:	fb02 7101 	mla	r1, r2, r1, r7
 801747a:	0c0f      	lsrs	r7, r1, #16
 801747c:	0c00      	lsrs	r0, r0, #16
 801747e:	fb02 7000 	mla	r0, r2, r0, r7
 8017482:	b289      	uxth	r1, r1
 8017484:	3301      	adds	r3, #1
 8017486:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801748a:	429d      	cmp	r5, r3
 801748c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017490:	f84c 1b04 	str.w	r1, [ip], #4
 8017494:	dcec      	bgt.n	8017470 <__multadd+0x12>
 8017496:	b1d7      	cbz	r7, 80174ce <__multadd+0x70>
 8017498:	68a3      	ldr	r3, [r4, #8]
 801749a:	42ab      	cmp	r3, r5
 801749c:	dc12      	bgt.n	80174c4 <__multadd+0x66>
 801749e:	6861      	ldr	r1, [r4, #4]
 80174a0:	4630      	mov	r0, r6
 80174a2:	3101      	adds	r1, #1
 80174a4:	f7ff ff90 	bl	80173c8 <_Balloc>
 80174a8:	6922      	ldr	r2, [r4, #16]
 80174aa:	3202      	adds	r2, #2
 80174ac:	f104 010c 	add.w	r1, r4, #12
 80174b0:	4680      	mov	r8, r0
 80174b2:	0092      	lsls	r2, r2, #2
 80174b4:	300c      	adds	r0, #12
 80174b6:	f7fe f9a3 	bl	8015800 <memcpy>
 80174ba:	4621      	mov	r1, r4
 80174bc:	4630      	mov	r0, r6
 80174be:	f7ff ffb7 	bl	8017430 <_Bfree>
 80174c2:	4644      	mov	r4, r8
 80174c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80174c8:	3501      	adds	r5, #1
 80174ca:	615f      	str	r7, [r3, #20]
 80174cc:	6125      	str	r5, [r4, #16]
 80174ce:	4620      	mov	r0, r4
 80174d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080174d4 <__hi0bits>:
 80174d4:	0c02      	lsrs	r2, r0, #16
 80174d6:	0412      	lsls	r2, r2, #16
 80174d8:	4603      	mov	r3, r0
 80174da:	b9b2      	cbnz	r2, 801750a <__hi0bits+0x36>
 80174dc:	0403      	lsls	r3, r0, #16
 80174de:	2010      	movs	r0, #16
 80174e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80174e4:	bf04      	itt	eq
 80174e6:	021b      	lsleq	r3, r3, #8
 80174e8:	3008      	addeq	r0, #8
 80174ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80174ee:	bf04      	itt	eq
 80174f0:	011b      	lsleq	r3, r3, #4
 80174f2:	3004      	addeq	r0, #4
 80174f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80174f8:	bf04      	itt	eq
 80174fa:	009b      	lsleq	r3, r3, #2
 80174fc:	3002      	addeq	r0, #2
 80174fe:	2b00      	cmp	r3, #0
 8017500:	db06      	blt.n	8017510 <__hi0bits+0x3c>
 8017502:	005b      	lsls	r3, r3, #1
 8017504:	d503      	bpl.n	801750e <__hi0bits+0x3a>
 8017506:	3001      	adds	r0, #1
 8017508:	4770      	bx	lr
 801750a:	2000      	movs	r0, #0
 801750c:	e7e8      	b.n	80174e0 <__hi0bits+0xc>
 801750e:	2020      	movs	r0, #32
 8017510:	4770      	bx	lr

08017512 <__lo0bits>:
 8017512:	6803      	ldr	r3, [r0, #0]
 8017514:	f013 0207 	ands.w	r2, r3, #7
 8017518:	4601      	mov	r1, r0
 801751a:	d00b      	beq.n	8017534 <__lo0bits+0x22>
 801751c:	07da      	lsls	r2, r3, #31
 801751e:	d423      	bmi.n	8017568 <__lo0bits+0x56>
 8017520:	0798      	lsls	r0, r3, #30
 8017522:	bf49      	itett	mi
 8017524:	085b      	lsrmi	r3, r3, #1
 8017526:	089b      	lsrpl	r3, r3, #2
 8017528:	2001      	movmi	r0, #1
 801752a:	600b      	strmi	r3, [r1, #0]
 801752c:	bf5c      	itt	pl
 801752e:	600b      	strpl	r3, [r1, #0]
 8017530:	2002      	movpl	r0, #2
 8017532:	4770      	bx	lr
 8017534:	b298      	uxth	r0, r3
 8017536:	b9a8      	cbnz	r0, 8017564 <__lo0bits+0x52>
 8017538:	0c1b      	lsrs	r3, r3, #16
 801753a:	2010      	movs	r0, #16
 801753c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017540:	bf04      	itt	eq
 8017542:	0a1b      	lsreq	r3, r3, #8
 8017544:	3008      	addeq	r0, #8
 8017546:	071a      	lsls	r2, r3, #28
 8017548:	bf04      	itt	eq
 801754a:	091b      	lsreq	r3, r3, #4
 801754c:	3004      	addeq	r0, #4
 801754e:	079a      	lsls	r2, r3, #30
 8017550:	bf04      	itt	eq
 8017552:	089b      	lsreq	r3, r3, #2
 8017554:	3002      	addeq	r0, #2
 8017556:	07da      	lsls	r2, r3, #31
 8017558:	d402      	bmi.n	8017560 <__lo0bits+0x4e>
 801755a:	085b      	lsrs	r3, r3, #1
 801755c:	d006      	beq.n	801756c <__lo0bits+0x5a>
 801755e:	3001      	adds	r0, #1
 8017560:	600b      	str	r3, [r1, #0]
 8017562:	4770      	bx	lr
 8017564:	4610      	mov	r0, r2
 8017566:	e7e9      	b.n	801753c <__lo0bits+0x2a>
 8017568:	2000      	movs	r0, #0
 801756a:	4770      	bx	lr
 801756c:	2020      	movs	r0, #32
 801756e:	4770      	bx	lr

08017570 <__i2b>:
 8017570:	b510      	push	{r4, lr}
 8017572:	460c      	mov	r4, r1
 8017574:	2101      	movs	r1, #1
 8017576:	f7ff ff27 	bl	80173c8 <_Balloc>
 801757a:	2201      	movs	r2, #1
 801757c:	6144      	str	r4, [r0, #20]
 801757e:	6102      	str	r2, [r0, #16]
 8017580:	bd10      	pop	{r4, pc}

08017582 <__multiply>:
 8017582:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017586:	4614      	mov	r4, r2
 8017588:	690a      	ldr	r2, [r1, #16]
 801758a:	6923      	ldr	r3, [r4, #16]
 801758c:	429a      	cmp	r2, r3
 801758e:	bfb8      	it	lt
 8017590:	460b      	movlt	r3, r1
 8017592:	4688      	mov	r8, r1
 8017594:	bfbc      	itt	lt
 8017596:	46a0      	movlt	r8, r4
 8017598:	461c      	movlt	r4, r3
 801759a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801759e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80175a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80175a6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80175aa:	eb07 0609 	add.w	r6, r7, r9
 80175ae:	42b3      	cmp	r3, r6
 80175b0:	bfb8      	it	lt
 80175b2:	3101      	addlt	r1, #1
 80175b4:	f7ff ff08 	bl	80173c8 <_Balloc>
 80175b8:	f100 0514 	add.w	r5, r0, #20
 80175bc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80175c0:	462b      	mov	r3, r5
 80175c2:	2200      	movs	r2, #0
 80175c4:	4573      	cmp	r3, lr
 80175c6:	d316      	bcc.n	80175f6 <__multiply+0x74>
 80175c8:	f104 0214 	add.w	r2, r4, #20
 80175cc:	f108 0114 	add.w	r1, r8, #20
 80175d0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80175d4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80175d8:	9300      	str	r3, [sp, #0]
 80175da:	9b00      	ldr	r3, [sp, #0]
 80175dc:	9201      	str	r2, [sp, #4]
 80175de:	4293      	cmp	r3, r2
 80175e0:	d80c      	bhi.n	80175fc <__multiply+0x7a>
 80175e2:	2e00      	cmp	r6, #0
 80175e4:	dd03      	ble.n	80175ee <__multiply+0x6c>
 80175e6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d05d      	beq.n	80176aa <__multiply+0x128>
 80175ee:	6106      	str	r6, [r0, #16]
 80175f0:	b003      	add	sp, #12
 80175f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175f6:	f843 2b04 	str.w	r2, [r3], #4
 80175fa:	e7e3      	b.n	80175c4 <__multiply+0x42>
 80175fc:	f8b2 b000 	ldrh.w	fp, [r2]
 8017600:	f1bb 0f00 	cmp.w	fp, #0
 8017604:	d023      	beq.n	801764e <__multiply+0xcc>
 8017606:	4689      	mov	r9, r1
 8017608:	46ac      	mov	ip, r5
 801760a:	f04f 0800 	mov.w	r8, #0
 801760e:	f859 4b04 	ldr.w	r4, [r9], #4
 8017612:	f8dc a000 	ldr.w	sl, [ip]
 8017616:	b2a3      	uxth	r3, r4
 8017618:	fa1f fa8a 	uxth.w	sl, sl
 801761c:	fb0b a303 	mla	r3, fp, r3, sl
 8017620:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017624:	f8dc 4000 	ldr.w	r4, [ip]
 8017628:	4443      	add	r3, r8
 801762a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801762e:	fb0b 840a 	mla	r4, fp, sl, r8
 8017632:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017636:	46e2      	mov	sl, ip
 8017638:	b29b      	uxth	r3, r3
 801763a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801763e:	454f      	cmp	r7, r9
 8017640:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017644:	f84a 3b04 	str.w	r3, [sl], #4
 8017648:	d82b      	bhi.n	80176a2 <__multiply+0x120>
 801764a:	f8cc 8004 	str.w	r8, [ip, #4]
 801764e:	9b01      	ldr	r3, [sp, #4]
 8017650:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017654:	3204      	adds	r2, #4
 8017656:	f1ba 0f00 	cmp.w	sl, #0
 801765a:	d020      	beq.n	801769e <__multiply+0x11c>
 801765c:	682b      	ldr	r3, [r5, #0]
 801765e:	4689      	mov	r9, r1
 8017660:	46a8      	mov	r8, r5
 8017662:	f04f 0b00 	mov.w	fp, #0
 8017666:	f8b9 c000 	ldrh.w	ip, [r9]
 801766a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801766e:	fb0a 440c 	mla	r4, sl, ip, r4
 8017672:	445c      	add	r4, fp
 8017674:	46c4      	mov	ip, r8
 8017676:	b29b      	uxth	r3, r3
 8017678:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801767c:	f84c 3b04 	str.w	r3, [ip], #4
 8017680:	f859 3b04 	ldr.w	r3, [r9], #4
 8017684:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017688:	0c1b      	lsrs	r3, r3, #16
 801768a:	fb0a b303 	mla	r3, sl, r3, fp
 801768e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017692:	454f      	cmp	r7, r9
 8017694:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017698:	d805      	bhi.n	80176a6 <__multiply+0x124>
 801769a:	f8c8 3004 	str.w	r3, [r8, #4]
 801769e:	3504      	adds	r5, #4
 80176a0:	e79b      	b.n	80175da <__multiply+0x58>
 80176a2:	46d4      	mov	ip, sl
 80176a4:	e7b3      	b.n	801760e <__multiply+0x8c>
 80176a6:	46e0      	mov	r8, ip
 80176a8:	e7dd      	b.n	8017666 <__multiply+0xe4>
 80176aa:	3e01      	subs	r6, #1
 80176ac:	e799      	b.n	80175e2 <__multiply+0x60>
	...

080176b0 <__pow5mult>:
 80176b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176b4:	4615      	mov	r5, r2
 80176b6:	f012 0203 	ands.w	r2, r2, #3
 80176ba:	4606      	mov	r6, r0
 80176bc:	460f      	mov	r7, r1
 80176be:	d007      	beq.n	80176d0 <__pow5mult+0x20>
 80176c0:	3a01      	subs	r2, #1
 80176c2:	4c21      	ldr	r4, [pc, #132]	; (8017748 <__pow5mult+0x98>)
 80176c4:	2300      	movs	r3, #0
 80176c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80176ca:	f7ff fec8 	bl	801745e <__multadd>
 80176ce:	4607      	mov	r7, r0
 80176d0:	10ad      	asrs	r5, r5, #2
 80176d2:	d035      	beq.n	8017740 <__pow5mult+0x90>
 80176d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80176d6:	b93c      	cbnz	r4, 80176e8 <__pow5mult+0x38>
 80176d8:	2010      	movs	r0, #16
 80176da:	f7ff fe6d 	bl	80173b8 <malloc>
 80176de:	6270      	str	r0, [r6, #36]	; 0x24
 80176e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80176e4:	6004      	str	r4, [r0, #0]
 80176e6:	60c4      	str	r4, [r0, #12]
 80176e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80176ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80176f0:	b94c      	cbnz	r4, 8017706 <__pow5mult+0x56>
 80176f2:	f240 2171 	movw	r1, #625	; 0x271
 80176f6:	4630      	mov	r0, r6
 80176f8:	f7ff ff3a 	bl	8017570 <__i2b>
 80176fc:	2300      	movs	r3, #0
 80176fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8017702:	4604      	mov	r4, r0
 8017704:	6003      	str	r3, [r0, #0]
 8017706:	f04f 0800 	mov.w	r8, #0
 801770a:	07eb      	lsls	r3, r5, #31
 801770c:	d50a      	bpl.n	8017724 <__pow5mult+0x74>
 801770e:	4639      	mov	r1, r7
 8017710:	4622      	mov	r2, r4
 8017712:	4630      	mov	r0, r6
 8017714:	f7ff ff35 	bl	8017582 <__multiply>
 8017718:	4639      	mov	r1, r7
 801771a:	4681      	mov	r9, r0
 801771c:	4630      	mov	r0, r6
 801771e:	f7ff fe87 	bl	8017430 <_Bfree>
 8017722:	464f      	mov	r7, r9
 8017724:	106d      	asrs	r5, r5, #1
 8017726:	d00b      	beq.n	8017740 <__pow5mult+0x90>
 8017728:	6820      	ldr	r0, [r4, #0]
 801772a:	b938      	cbnz	r0, 801773c <__pow5mult+0x8c>
 801772c:	4622      	mov	r2, r4
 801772e:	4621      	mov	r1, r4
 8017730:	4630      	mov	r0, r6
 8017732:	f7ff ff26 	bl	8017582 <__multiply>
 8017736:	6020      	str	r0, [r4, #0]
 8017738:	f8c0 8000 	str.w	r8, [r0]
 801773c:	4604      	mov	r4, r0
 801773e:	e7e4      	b.n	801770a <__pow5mult+0x5a>
 8017740:	4638      	mov	r0, r7
 8017742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017746:	bf00      	nop
 8017748:	08018278 	.word	0x08018278

0801774c <__lshift>:
 801774c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017750:	460c      	mov	r4, r1
 8017752:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017756:	6923      	ldr	r3, [r4, #16]
 8017758:	6849      	ldr	r1, [r1, #4]
 801775a:	eb0a 0903 	add.w	r9, sl, r3
 801775e:	68a3      	ldr	r3, [r4, #8]
 8017760:	4607      	mov	r7, r0
 8017762:	4616      	mov	r6, r2
 8017764:	f109 0501 	add.w	r5, r9, #1
 8017768:	42ab      	cmp	r3, r5
 801776a:	db32      	blt.n	80177d2 <__lshift+0x86>
 801776c:	4638      	mov	r0, r7
 801776e:	f7ff fe2b 	bl	80173c8 <_Balloc>
 8017772:	2300      	movs	r3, #0
 8017774:	4680      	mov	r8, r0
 8017776:	f100 0114 	add.w	r1, r0, #20
 801777a:	461a      	mov	r2, r3
 801777c:	4553      	cmp	r3, sl
 801777e:	db2b      	blt.n	80177d8 <__lshift+0x8c>
 8017780:	6920      	ldr	r0, [r4, #16]
 8017782:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017786:	f104 0314 	add.w	r3, r4, #20
 801778a:	f016 021f 	ands.w	r2, r6, #31
 801778e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017792:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017796:	d025      	beq.n	80177e4 <__lshift+0x98>
 8017798:	f1c2 0e20 	rsb	lr, r2, #32
 801779c:	2000      	movs	r0, #0
 801779e:	681e      	ldr	r6, [r3, #0]
 80177a0:	468a      	mov	sl, r1
 80177a2:	4096      	lsls	r6, r2
 80177a4:	4330      	orrs	r0, r6
 80177a6:	f84a 0b04 	str.w	r0, [sl], #4
 80177aa:	f853 0b04 	ldr.w	r0, [r3], #4
 80177ae:	459c      	cmp	ip, r3
 80177b0:	fa20 f00e 	lsr.w	r0, r0, lr
 80177b4:	d814      	bhi.n	80177e0 <__lshift+0x94>
 80177b6:	6048      	str	r0, [r1, #4]
 80177b8:	b108      	cbz	r0, 80177be <__lshift+0x72>
 80177ba:	f109 0502 	add.w	r5, r9, #2
 80177be:	3d01      	subs	r5, #1
 80177c0:	4638      	mov	r0, r7
 80177c2:	f8c8 5010 	str.w	r5, [r8, #16]
 80177c6:	4621      	mov	r1, r4
 80177c8:	f7ff fe32 	bl	8017430 <_Bfree>
 80177cc:	4640      	mov	r0, r8
 80177ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177d2:	3101      	adds	r1, #1
 80177d4:	005b      	lsls	r3, r3, #1
 80177d6:	e7c7      	b.n	8017768 <__lshift+0x1c>
 80177d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80177dc:	3301      	adds	r3, #1
 80177de:	e7cd      	b.n	801777c <__lshift+0x30>
 80177e0:	4651      	mov	r1, sl
 80177e2:	e7dc      	b.n	801779e <__lshift+0x52>
 80177e4:	3904      	subs	r1, #4
 80177e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80177ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80177ee:	459c      	cmp	ip, r3
 80177f0:	d8f9      	bhi.n	80177e6 <__lshift+0x9a>
 80177f2:	e7e4      	b.n	80177be <__lshift+0x72>

080177f4 <__mcmp>:
 80177f4:	6903      	ldr	r3, [r0, #16]
 80177f6:	690a      	ldr	r2, [r1, #16]
 80177f8:	1a9b      	subs	r3, r3, r2
 80177fa:	b530      	push	{r4, r5, lr}
 80177fc:	d10c      	bne.n	8017818 <__mcmp+0x24>
 80177fe:	0092      	lsls	r2, r2, #2
 8017800:	3014      	adds	r0, #20
 8017802:	3114      	adds	r1, #20
 8017804:	1884      	adds	r4, r0, r2
 8017806:	4411      	add	r1, r2
 8017808:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801780c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017810:	4295      	cmp	r5, r2
 8017812:	d003      	beq.n	801781c <__mcmp+0x28>
 8017814:	d305      	bcc.n	8017822 <__mcmp+0x2e>
 8017816:	2301      	movs	r3, #1
 8017818:	4618      	mov	r0, r3
 801781a:	bd30      	pop	{r4, r5, pc}
 801781c:	42a0      	cmp	r0, r4
 801781e:	d3f3      	bcc.n	8017808 <__mcmp+0x14>
 8017820:	e7fa      	b.n	8017818 <__mcmp+0x24>
 8017822:	f04f 33ff 	mov.w	r3, #4294967295
 8017826:	e7f7      	b.n	8017818 <__mcmp+0x24>

08017828 <__mdiff>:
 8017828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801782c:	460d      	mov	r5, r1
 801782e:	4607      	mov	r7, r0
 8017830:	4611      	mov	r1, r2
 8017832:	4628      	mov	r0, r5
 8017834:	4614      	mov	r4, r2
 8017836:	f7ff ffdd 	bl	80177f4 <__mcmp>
 801783a:	1e06      	subs	r6, r0, #0
 801783c:	d108      	bne.n	8017850 <__mdiff+0x28>
 801783e:	4631      	mov	r1, r6
 8017840:	4638      	mov	r0, r7
 8017842:	f7ff fdc1 	bl	80173c8 <_Balloc>
 8017846:	2301      	movs	r3, #1
 8017848:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801784c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017850:	bfa4      	itt	ge
 8017852:	4623      	movge	r3, r4
 8017854:	462c      	movge	r4, r5
 8017856:	4638      	mov	r0, r7
 8017858:	6861      	ldr	r1, [r4, #4]
 801785a:	bfa6      	itte	ge
 801785c:	461d      	movge	r5, r3
 801785e:	2600      	movge	r6, #0
 8017860:	2601      	movlt	r6, #1
 8017862:	f7ff fdb1 	bl	80173c8 <_Balloc>
 8017866:	692b      	ldr	r3, [r5, #16]
 8017868:	60c6      	str	r6, [r0, #12]
 801786a:	6926      	ldr	r6, [r4, #16]
 801786c:	f105 0914 	add.w	r9, r5, #20
 8017870:	f104 0214 	add.w	r2, r4, #20
 8017874:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017878:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801787c:	f100 0514 	add.w	r5, r0, #20
 8017880:	f04f 0e00 	mov.w	lr, #0
 8017884:	f852 ab04 	ldr.w	sl, [r2], #4
 8017888:	f859 4b04 	ldr.w	r4, [r9], #4
 801788c:	fa1e f18a 	uxtah	r1, lr, sl
 8017890:	b2a3      	uxth	r3, r4
 8017892:	1ac9      	subs	r1, r1, r3
 8017894:	0c23      	lsrs	r3, r4, #16
 8017896:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801789a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801789e:	b289      	uxth	r1, r1
 80178a0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80178a4:	45c8      	cmp	r8, r9
 80178a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80178aa:	4694      	mov	ip, r2
 80178ac:	f845 3b04 	str.w	r3, [r5], #4
 80178b0:	d8e8      	bhi.n	8017884 <__mdiff+0x5c>
 80178b2:	45bc      	cmp	ip, r7
 80178b4:	d304      	bcc.n	80178c0 <__mdiff+0x98>
 80178b6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80178ba:	b183      	cbz	r3, 80178de <__mdiff+0xb6>
 80178bc:	6106      	str	r6, [r0, #16]
 80178be:	e7c5      	b.n	801784c <__mdiff+0x24>
 80178c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80178c4:	fa1e f381 	uxtah	r3, lr, r1
 80178c8:	141a      	asrs	r2, r3, #16
 80178ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80178ce:	b29b      	uxth	r3, r3
 80178d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80178d4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80178d8:	f845 3b04 	str.w	r3, [r5], #4
 80178dc:	e7e9      	b.n	80178b2 <__mdiff+0x8a>
 80178de:	3e01      	subs	r6, #1
 80178e0:	e7e9      	b.n	80178b6 <__mdiff+0x8e>

080178e2 <__d2b>:
 80178e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80178e6:	460e      	mov	r6, r1
 80178e8:	2101      	movs	r1, #1
 80178ea:	ec59 8b10 	vmov	r8, r9, d0
 80178ee:	4615      	mov	r5, r2
 80178f0:	f7ff fd6a 	bl	80173c8 <_Balloc>
 80178f4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80178f8:	4607      	mov	r7, r0
 80178fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80178fe:	bb34      	cbnz	r4, 801794e <__d2b+0x6c>
 8017900:	9301      	str	r3, [sp, #4]
 8017902:	f1b8 0300 	subs.w	r3, r8, #0
 8017906:	d027      	beq.n	8017958 <__d2b+0x76>
 8017908:	a802      	add	r0, sp, #8
 801790a:	f840 3d08 	str.w	r3, [r0, #-8]!
 801790e:	f7ff fe00 	bl	8017512 <__lo0bits>
 8017912:	9900      	ldr	r1, [sp, #0]
 8017914:	b1f0      	cbz	r0, 8017954 <__d2b+0x72>
 8017916:	9a01      	ldr	r2, [sp, #4]
 8017918:	f1c0 0320 	rsb	r3, r0, #32
 801791c:	fa02 f303 	lsl.w	r3, r2, r3
 8017920:	430b      	orrs	r3, r1
 8017922:	40c2      	lsrs	r2, r0
 8017924:	617b      	str	r3, [r7, #20]
 8017926:	9201      	str	r2, [sp, #4]
 8017928:	9b01      	ldr	r3, [sp, #4]
 801792a:	61bb      	str	r3, [r7, #24]
 801792c:	2b00      	cmp	r3, #0
 801792e:	bf14      	ite	ne
 8017930:	2102      	movne	r1, #2
 8017932:	2101      	moveq	r1, #1
 8017934:	6139      	str	r1, [r7, #16]
 8017936:	b1c4      	cbz	r4, 801796a <__d2b+0x88>
 8017938:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801793c:	4404      	add	r4, r0
 801793e:	6034      	str	r4, [r6, #0]
 8017940:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017944:	6028      	str	r0, [r5, #0]
 8017946:	4638      	mov	r0, r7
 8017948:	b003      	add	sp, #12
 801794a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801794e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017952:	e7d5      	b.n	8017900 <__d2b+0x1e>
 8017954:	6179      	str	r1, [r7, #20]
 8017956:	e7e7      	b.n	8017928 <__d2b+0x46>
 8017958:	a801      	add	r0, sp, #4
 801795a:	f7ff fdda 	bl	8017512 <__lo0bits>
 801795e:	9b01      	ldr	r3, [sp, #4]
 8017960:	617b      	str	r3, [r7, #20]
 8017962:	2101      	movs	r1, #1
 8017964:	6139      	str	r1, [r7, #16]
 8017966:	3020      	adds	r0, #32
 8017968:	e7e5      	b.n	8017936 <__d2b+0x54>
 801796a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801796e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017972:	6030      	str	r0, [r6, #0]
 8017974:	6918      	ldr	r0, [r3, #16]
 8017976:	f7ff fdad 	bl	80174d4 <__hi0bits>
 801797a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801797e:	e7e1      	b.n	8017944 <__d2b+0x62>

08017980 <_calloc_r>:
 8017980:	b538      	push	{r3, r4, r5, lr}
 8017982:	fb02 f401 	mul.w	r4, r2, r1
 8017986:	4621      	mov	r1, r4
 8017988:	f000 f856 	bl	8017a38 <_malloc_r>
 801798c:	4605      	mov	r5, r0
 801798e:	b118      	cbz	r0, 8017998 <_calloc_r+0x18>
 8017990:	4622      	mov	r2, r4
 8017992:	2100      	movs	r1, #0
 8017994:	f7fd ff3f 	bl	8015816 <memset>
 8017998:	4628      	mov	r0, r5
 801799a:	bd38      	pop	{r3, r4, r5, pc}

0801799c <_free_r>:
 801799c:	b538      	push	{r3, r4, r5, lr}
 801799e:	4605      	mov	r5, r0
 80179a0:	2900      	cmp	r1, #0
 80179a2:	d045      	beq.n	8017a30 <_free_r+0x94>
 80179a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179a8:	1f0c      	subs	r4, r1, #4
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	bfb8      	it	lt
 80179ae:	18e4      	addlt	r4, r4, r3
 80179b0:	f000 fa98 	bl	8017ee4 <__malloc_lock>
 80179b4:	4a1f      	ldr	r2, [pc, #124]	; (8017a34 <_free_r+0x98>)
 80179b6:	6813      	ldr	r3, [r2, #0]
 80179b8:	4610      	mov	r0, r2
 80179ba:	b933      	cbnz	r3, 80179ca <_free_r+0x2e>
 80179bc:	6063      	str	r3, [r4, #4]
 80179be:	6014      	str	r4, [r2, #0]
 80179c0:	4628      	mov	r0, r5
 80179c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179c6:	f000 ba8e 	b.w	8017ee6 <__malloc_unlock>
 80179ca:	42a3      	cmp	r3, r4
 80179cc:	d90c      	bls.n	80179e8 <_free_r+0x4c>
 80179ce:	6821      	ldr	r1, [r4, #0]
 80179d0:	1862      	adds	r2, r4, r1
 80179d2:	4293      	cmp	r3, r2
 80179d4:	bf04      	itt	eq
 80179d6:	681a      	ldreq	r2, [r3, #0]
 80179d8:	685b      	ldreq	r3, [r3, #4]
 80179da:	6063      	str	r3, [r4, #4]
 80179dc:	bf04      	itt	eq
 80179de:	1852      	addeq	r2, r2, r1
 80179e0:	6022      	streq	r2, [r4, #0]
 80179e2:	6004      	str	r4, [r0, #0]
 80179e4:	e7ec      	b.n	80179c0 <_free_r+0x24>
 80179e6:	4613      	mov	r3, r2
 80179e8:	685a      	ldr	r2, [r3, #4]
 80179ea:	b10a      	cbz	r2, 80179f0 <_free_r+0x54>
 80179ec:	42a2      	cmp	r2, r4
 80179ee:	d9fa      	bls.n	80179e6 <_free_r+0x4a>
 80179f0:	6819      	ldr	r1, [r3, #0]
 80179f2:	1858      	adds	r0, r3, r1
 80179f4:	42a0      	cmp	r0, r4
 80179f6:	d10b      	bne.n	8017a10 <_free_r+0x74>
 80179f8:	6820      	ldr	r0, [r4, #0]
 80179fa:	4401      	add	r1, r0
 80179fc:	1858      	adds	r0, r3, r1
 80179fe:	4282      	cmp	r2, r0
 8017a00:	6019      	str	r1, [r3, #0]
 8017a02:	d1dd      	bne.n	80179c0 <_free_r+0x24>
 8017a04:	6810      	ldr	r0, [r2, #0]
 8017a06:	6852      	ldr	r2, [r2, #4]
 8017a08:	605a      	str	r2, [r3, #4]
 8017a0a:	4401      	add	r1, r0
 8017a0c:	6019      	str	r1, [r3, #0]
 8017a0e:	e7d7      	b.n	80179c0 <_free_r+0x24>
 8017a10:	d902      	bls.n	8017a18 <_free_r+0x7c>
 8017a12:	230c      	movs	r3, #12
 8017a14:	602b      	str	r3, [r5, #0]
 8017a16:	e7d3      	b.n	80179c0 <_free_r+0x24>
 8017a18:	6820      	ldr	r0, [r4, #0]
 8017a1a:	1821      	adds	r1, r4, r0
 8017a1c:	428a      	cmp	r2, r1
 8017a1e:	bf04      	itt	eq
 8017a20:	6811      	ldreq	r1, [r2, #0]
 8017a22:	6852      	ldreq	r2, [r2, #4]
 8017a24:	6062      	str	r2, [r4, #4]
 8017a26:	bf04      	itt	eq
 8017a28:	1809      	addeq	r1, r1, r0
 8017a2a:	6021      	streq	r1, [r4, #0]
 8017a2c:	605c      	str	r4, [r3, #4]
 8017a2e:	e7c7      	b.n	80179c0 <_free_r+0x24>
 8017a30:	bd38      	pop	{r3, r4, r5, pc}
 8017a32:	bf00      	nop
 8017a34:	20004370 	.word	0x20004370

08017a38 <_malloc_r>:
 8017a38:	b570      	push	{r4, r5, r6, lr}
 8017a3a:	1ccd      	adds	r5, r1, #3
 8017a3c:	f025 0503 	bic.w	r5, r5, #3
 8017a40:	3508      	adds	r5, #8
 8017a42:	2d0c      	cmp	r5, #12
 8017a44:	bf38      	it	cc
 8017a46:	250c      	movcc	r5, #12
 8017a48:	2d00      	cmp	r5, #0
 8017a4a:	4606      	mov	r6, r0
 8017a4c:	db01      	blt.n	8017a52 <_malloc_r+0x1a>
 8017a4e:	42a9      	cmp	r1, r5
 8017a50:	d903      	bls.n	8017a5a <_malloc_r+0x22>
 8017a52:	230c      	movs	r3, #12
 8017a54:	6033      	str	r3, [r6, #0]
 8017a56:	2000      	movs	r0, #0
 8017a58:	bd70      	pop	{r4, r5, r6, pc}
 8017a5a:	f000 fa43 	bl	8017ee4 <__malloc_lock>
 8017a5e:	4a21      	ldr	r2, [pc, #132]	; (8017ae4 <_malloc_r+0xac>)
 8017a60:	6814      	ldr	r4, [r2, #0]
 8017a62:	4621      	mov	r1, r4
 8017a64:	b991      	cbnz	r1, 8017a8c <_malloc_r+0x54>
 8017a66:	4c20      	ldr	r4, [pc, #128]	; (8017ae8 <_malloc_r+0xb0>)
 8017a68:	6823      	ldr	r3, [r4, #0]
 8017a6a:	b91b      	cbnz	r3, 8017a74 <_malloc_r+0x3c>
 8017a6c:	4630      	mov	r0, r6
 8017a6e:	f000 f97d 	bl	8017d6c <_sbrk_r>
 8017a72:	6020      	str	r0, [r4, #0]
 8017a74:	4629      	mov	r1, r5
 8017a76:	4630      	mov	r0, r6
 8017a78:	f000 f978 	bl	8017d6c <_sbrk_r>
 8017a7c:	1c43      	adds	r3, r0, #1
 8017a7e:	d124      	bne.n	8017aca <_malloc_r+0x92>
 8017a80:	230c      	movs	r3, #12
 8017a82:	6033      	str	r3, [r6, #0]
 8017a84:	4630      	mov	r0, r6
 8017a86:	f000 fa2e 	bl	8017ee6 <__malloc_unlock>
 8017a8a:	e7e4      	b.n	8017a56 <_malloc_r+0x1e>
 8017a8c:	680b      	ldr	r3, [r1, #0]
 8017a8e:	1b5b      	subs	r3, r3, r5
 8017a90:	d418      	bmi.n	8017ac4 <_malloc_r+0x8c>
 8017a92:	2b0b      	cmp	r3, #11
 8017a94:	d90f      	bls.n	8017ab6 <_malloc_r+0x7e>
 8017a96:	600b      	str	r3, [r1, #0]
 8017a98:	50cd      	str	r5, [r1, r3]
 8017a9a:	18cc      	adds	r4, r1, r3
 8017a9c:	4630      	mov	r0, r6
 8017a9e:	f000 fa22 	bl	8017ee6 <__malloc_unlock>
 8017aa2:	f104 000b 	add.w	r0, r4, #11
 8017aa6:	1d23      	adds	r3, r4, #4
 8017aa8:	f020 0007 	bic.w	r0, r0, #7
 8017aac:	1ac3      	subs	r3, r0, r3
 8017aae:	d0d3      	beq.n	8017a58 <_malloc_r+0x20>
 8017ab0:	425a      	negs	r2, r3
 8017ab2:	50e2      	str	r2, [r4, r3]
 8017ab4:	e7d0      	b.n	8017a58 <_malloc_r+0x20>
 8017ab6:	428c      	cmp	r4, r1
 8017ab8:	684b      	ldr	r3, [r1, #4]
 8017aba:	bf16      	itet	ne
 8017abc:	6063      	strne	r3, [r4, #4]
 8017abe:	6013      	streq	r3, [r2, #0]
 8017ac0:	460c      	movne	r4, r1
 8017ac2:	e7eb      	b.n	8017a9c <_malloc_r+0x64>
 8017ac4:	460c      	mov	r4, r1
 8017ac6:	6849      	ldr	r1, [r1, #4]
 8017ac8:	e7cc      	b.n	8017a64 <_malloc_r+0x2c>
 8017aca:	1cc4      	adds	r4, r0, #3
 8017acc:	f024 0403 	bic.w	r4, r4, #3
 8017ad0:	42a0      	cmp	r0, r4
 8017ad2:	d005      	beq.n	8017ae0 <_malloc_r+0xa8>
 8017ad4:	1a21      	subs	r1, r4, r0
 8017ad6:	4630      	mov	r0, r6
 8017ad8:	f000 f948 	bl	8017d6c <_sbrk_r>
 8017adc:	3001      	adds	r0, #1
 8017ade:	d0cf      	beq.n	8017a80 <_malloc_r+0x48>
 8017ae0:	6025      	str	r5, [r4, #0]
 8017ae2:	e7db      	b.n	8017a9c <_malloc_r+0x64>
 8017ae4:	20004370 	.word	0x20004370
 8017ae8:	20004374 	.word	0x20004374

08017aec <__sfputc_r>:
 8017aec:	6893      	ldr	r3, [r2, #8]
 8017aee:	3b01      	subs	r3, #1
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	b410      	push	{r4}
 8017af4:	6093      	str	r3, [r2, #8]
 8017af6:	da08      	bge.n	8017b0a <__sfputc_r+0x1e>
 8017af8:	6994      	ldr	r4, [r2, #24]
 8017afa:	42a3      	cmp	r3, r4
 8017afc:	db01      	blt.n	8017b02 <__sfputc_r+0x16>
 8017afe:	290a      	cmp	r1, #10
 8017b00:	d103      	bne.n	8017b0a <__sfputc_r+0x1e>
 8017b02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b06:	f7fe bb67 	b.w	80161d8 <__swbuf_r>
 8017b0a:	6813      	ldr	r3, [r2, #0]
 8017b0c:	1c58      	adds	r0, r3, #1
 8017b0e:	6010      	str	r0, [r2, #0]
 8017b10:	7019      	strb	r1, [r3, #0]
 8017b12:	4608      	mov	r0, r1
 8017b14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b18:	4770      	bx	lr

08017b1a <__sfputs_r>:
 8017b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b1c:	4606      	mov	r6, r0
 8017b1e:	460f      	mov	r7, r1
 8017b20:	4614      	mov	r4, r2
 8017b22:	18d5      	adds	r5, r2, r3
 8017b24:	42ac      	cmp	r4, r5
 8017b26:	d101      	bne.n	8017b2c <__sfputs_r+0x12>
 8017b28:	2000      	movs	r0, #0
 8017b2a:	e007      	b.n	8017b3c <__sfputs_r+0x22>
 8017b2c:	463a      	mov	r2, r7
 8017b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b32:	4630      	mov	r0, r6
 8017b34:	f7ff ffda 	bl	8017aec <__sfputc_r>
 8017b38:	1c43      	adds	r3, r0, #1
 8017b3a:	d1f3      	bne.n	8017b24 <__sfputs_r+0xa>
 8017b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017b40 <_vfiprintf_r>:
 8017b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b44:	460c      	mov	r4, r1
 8017b46:	b09d      	sub	sp, #116	; 0x74
 8017b48:	4617      	mov	r7, r2
 8017b4a:	461d      	mov	r5, r3
 8017b4c:	4606      	mov	r6, r0
 8017b4e:	b118      	cbz	r0, 8017b58 <_vfiprintf_r+0x18>
 8017b50:	6983      	ldr	r3, [r0, #24]
 8017b52:	b90b      	cbnz	r3, 8017b58 <_vfiprintf_r+0x18>
 8017b54:	f7ff fb34 	bl	80171c0 <__sinit>
 8017b58:	4b7c      	ldr	r3, [pc, #496]	; (8017d4c <_vfiprintf_r+0x20c>)
 8017b5a:	429c      	cmp	r4, r3
 8017b5c:	d158      	bne.n	8017c10 <_vfiprintf_r+0xd0>
 8017b5e:	6874      	ldr	r4, [r6, #4]
 8017b60:	89a3      	ldrh	r3, [r4, #12]
 8017b62:	0718      	lsls	r0, r3, #28
 8017b64:	d55e      	bpl.n	8017c24 <_vfiprintf_r+0xe4>
 8017b66:	6923      	ldr	r3, [r4, #16]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d05b      	beq.n	8017c24 <_vfiprintf_r+0xe4>
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8017b70:	2320      	movs	r3, #32
 8017b72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017b76:	2330      	movs	r3, #48	; 0x30
 8017b78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017b7c:	9503      	str	r5, [sp, #12]
 8017b7e:	f04f 0b01 	mov.w	fp, #1
 8017b82:	46b8      	mov	r8, r7
 8017b84:	4645      	mov	r5, r8
 8017b86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017b8a:	b10b      	cbz	r3, 8017b90 <_vfiprintf_r+0x50>
 8017b8c:	2b25      	cmp	r3, #37	; 0x25
 8017b8e:	d154      	bne.n	8017c3a <_vfiprintf_r+0xfa>
 8017b90:	ebb8 0a07 	subs.w	sl, r8, r7
 8017b94:	d00b      	beq.n	8017bae <_vfiprintf_r+0x6e>
 8017b96:	4653      	mov	r3, sl
 8017b98:	463a      	mov	r2, r7
 8017b9a:	4621      	mov	r1, r4
 8017b9c:	4630      	mov	r0, r6
 8017b9e:	f7ff ffbc 	bl	8017b1a <__sfputs_r>
 8017ba2:	3001      	adds	r0, #1
 8017ba4:	f000 80c2 	beq.w	8017d2c <_vfiprintf_r+0x1ec>
 8017ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017baa:	4453      	add	r3, sl
 8017bac:	9309      	str	r3, [sp, #36]	; 0x24
 8017bae:	f898 3000 	ldrb.w	r3, [r8]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	f000 80ba 	beq.w	8017d2c <_vfiprintf_r+0x1ec>
 8017bb8:	2300      	movs	r3, #0
 8017bba:	f04f 32ff 	mov.w	r2, #4294967295
 8017bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017bc2:	9304      	str	r3, [sp, #16]
 8017bc4:	9307      	str	r3, [sp, #28]
 8017bc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017bca:	931a      	str	r3, [sp, #104]	; 0x68
 8017bcc:	46a8      	mov	r8, r5
 8017bce:	2205      	movs	r2, #5
 8017bd0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017bd4:	485e      	ldr	r0, [pc, #376]	; (8017d50 <_vfiprintf_r+0x210>)
 8017bd6:	f7f0 fa3b 	bl	8008050 <memchr>
 8017bda:	9b04      	ldr	r3, [sp, #16]
 8017bdc:	bb78      	cbnz	r0, 8017c3e <_vfiprintf_r+0xfe>
 8017bde:	06d9      	lsls	r1, r3, #27
 8017be0:	bf44      	itt	mi
 8017be2:	2220      	movmi	r2, #32
 8017be4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017be8:	071a      	lsls	r2, r3, #28
 8017bea:	bf44      	itt	mi
 8017bec:	222b      	movmi	r2, #43	; 0x2b
 8017bee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017bf2:	782a      	ldrb	r2, [r5, #0]
 8017bf4:	2a2a      	cmp	r2, #42	; 0x2a
 8017bf6:	d02a      	beq.n	8017c4e <_vfiprintf_r+0x10e>
 8017bf8:	9a07      	ldr	r2, [sp, #28]
 8017bfa:	46a8      	mov	r8, r5
 8017bfc:	2000      	movs	r0, #0
 8017bfe:	250a      	movs	r5, #10
 8017c00:	4641      	mov	r1, r8
 8017c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c06:	3b30      	subs	r3, #48	; 0x30
 8017c08:	2b09      	cmp	r3, #9
 8017c0a:	d969      	bls.n	8017ce0 <_vfiprintf_r+0x1a0>
 8017c0c:	b360      	cbz	r0, 8017c68 <_vfiprintf_r+0x128>
 8017c0e:	e024      	b.n	8017c5a <_vfiprintf_r+0x11a>
 8017c10:	4b50      	ldr	r3, [pc, #320]	; (8017d54 <_vfiprintf_r+0x214>)
 8017c12:	429c      	cmp	r4, r3
 8017c14:	d101      	bne.n	8017c1a <_vfiprintf_r+0xda>
 8017c16:	68b4      	ldr	r4, [r6, #8]
 8017c18:	e7a2      	b.n	8017b60 <_vfiprintf_r+0x20>
 8017c1a:	4b4f      	ldr	r3, [pc, #316]	; (8017d58 <_vfiprintf_r+0x218>)
 8017c1c:	429c      	cmp	r4, r3
 8017c1e:	bf08      	it	eq
 8017c20:	68f4      	ldreq	r4, [r6, #12]
 8017c22:	e79d      	b.n	8017b60 <_vfiprintf_r+0x20>
 8017c24:	4621      	mov	r1, r4
 8017c26:	4630      	mov	r0, r6
 8017c28:	f7fe fb28 	bl	801627c <__swsetup_r>
 8017c2c:	2800      	cmp	r0, #0
 8017c2e:	d09d      	beq.n	8017b6c <_vfiprintf_r+0x2c>
 8017c30:	f04f 30ff 	mov.w	r0, #4294967295
 8017c34:	b01d      	add	sp, #116	; 0x74
 8017c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c3a:	46a8      	mov	r8, r5
 8017c3c:	e7a2      	b.n	8017b84 <_vfiprintf_r+0x44>
 8017c3e:	4a44      	ldr	r2, [pc, #272]	; (8017d50 <_vfiprintf_r+0x210>)
 8017c40:	1a80      	subs	r0, r0, r2
 8017c42:	fa0b f000 	lsl.w	r0, fp, r0
 8017c46:	4318      	orrs	r0, r3
 8017c48:	9004      	str	r0, [sp, #16]
 8017c4a:	4645      	mov	r5, r8
 8017c4c:	e7be      	b.n	8017bcc <_vfiprintf_r+0x8c>
 8017c4e:	9a03      	ldr	r2, [sp, #12]
 8017c50:	1d11      	adds	r1, r2, #4
 8017c52:	6812      	ldr	r2, [r2, #0]
 8017c54:	9103      	str	r1, [sp, #12]
 8017c56:	2a00      	cmp	r2, #0
 8017c58:	db01      	blt.n	8017c5e <_vfiprintf_r+0x11e>
 8017c5a:	9207      	str	r2, [sp, #28]
 8017c5c:	e004      	b.n	8017c68 <_vfiprintf_r+0x128>
 8017c5e:	4252      	negs	r2, r2
 8017c60:	f043 0302 	orr.w	r3, r3, #2
 8017c64:	9207      	str	r2, [sp, #28]
 8017c66:	9304      	str	r3, [sp, #16]
 8017c68:	f898 3000 	ldrb.w	r3, [r8]
 8017c6c:	2b2e      	cmp	r3, #46	; 0x2e
 8017c6e:	d10e      	bne.n	8017c8e <_vfiprintf_r+0x14e>
 8017c70:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017c74:	2b2a      	cmp	r3, #42	; 0x2a
 8017c76:	d138      	bne.n	8017cea <_vfiprintf_r+0x1aa>
 8017c78:	9b03      	ldr	r3, [sp, #12]
 8017c7a:	1d1a      	adds	r2, r3, #4
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	9203      	str	r2, [sp, #12]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	bfb8      	it	lt
 8017c84:	f04f 33ff 	movlt.w	r3, #4294967295
 8017c88:	f108 0802 	add.w	r8, r8, #2
 8017c8c:	9305      	str	r3, [sp, #20]
 8017c8e:	4d33      	ldr	r5, [pc, #204]	; (8017d5c <_vfiprintf_r+0x21c>)
 8017c90:	f898 1000 	ldrb.w	r1, [r8]
 8017c94:	2203      	movs	r2, #3
 8017c96:	4628      	mov	r0, r5
 8017c98:	f7f0 f9da 	bl	8008050 <memchr>
 8017c9c:	b140      	cbz	r0, 8017cb0 <_vfiprintf_r+0x170>
 8017c9e:	2340      	movs	r3, #64	; 0x40
 8017ca0:	1b40      	subs	r0, r0, r5
 8017ca2:	fa03 f000 	lsl.w	r0, r3, r0
 8017ca6:	9b04      	ldr	r3, [sp, #16]
 8017ca8:	4303      	orrs	r3, r0
 8017caa:	f108 0801 	add.w	r8, r8, #1
 8017cae:	9304      	str	r3, [sp, #16]
 8017cb0:	f898 1000 	ldrb.w	r1, [r8]
 8017cb4:	482a      	ldr	r0, [pc, #168]	; (8017d60 <_vfiprintf_r+0x220>)
 8017cb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017cba:	2206      	movs	r2, #6
 8017cbc:	f108 0701 	add.w	r7, r8, #1
 8017cc0:	f7f0 f9c6 	bl	8008050 <memchr>
 8017cc4:	2800      	cmp	r0, #0
 8017cc6:	d037      	beq.n	8017d38 <_vfiprintf_r+0x1f8>
 8017cc8:	4b26      	ldr	r3, [pc, #152]	; (8017d64 <_vfiprintf_r+0x224>)
 8017cca:	bb1b      	cbnz	r3, 8017d14 <_vfiprintf_r+0x1d4>
 8017ccc:	9b03      	ldr	r3, [sp, #12]
 8017cce:	3307      	adds	r3, #7
 8017cd0:	f023 0307 	bic.w	r3, r3, #7
 8017cd4:	3308      	adds	r3, #8
 8017cd6:	9303      	str	r3, [sp, #12]
 8017cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cda:	444b      	add	r3, r9
 8017cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8017cde:	e750      	b.n	8017b82 <_vfiprintf_r+0x42>
 8017ce0:	fb05 3202 	mla	r2, r5, r2, r3
 8017ce4:	2001      	movs	r0, #1
 8017ce6:	4688      	mov	r8, r1
 8017ce8:	e78a      	b.n	8017c00 <_vfiprintf_r+0xc0>
 8017cea:	2300      	movs	r3, #0
 8017cec:	f108 0801 	add.w	r8, r8, #1
 8017cf0:	9305      	str	r3, [sp, #20]
 8017cf2:	4619      	mov	r1, r3
 8017cf4:	250a      	movs	r5, #10
 8017cf6:	4640      	mov	r0, r8
 8017cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017cfc:	3a30      	subs	r2, #48	; 0x30
 8017cfe:	2a09      	cmp	r2, #9
 8017d00:	d903      	bls.n	8017d0a <_vfiprintf_r+0x1ca>
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d0c3      	beq.n	8017c8e <_vfiprintf_r+0x14e>
 8017d06:	9105      	str	r1, [sp, #20]
 8017d08:	e7c1      	b.n	8017c8e <_vfiprintf_r+0x14e>
 8017d0a:	fb05 2101 	mla	r1, r5, r1, r2
 8017d0e:	2301      	movs	r3, #1
 8017d10:	4680      	mov	r8, r0
 8017d12:	e7f0      	b.n	8017cf6 <_vfiprintf_r+0x1b6>
 8017d14:	ab03      	add	r3, sp, #12
 8017d16:	9300      	str	r3, [sp, #0]
 8017d18:	4622      	mov	r2, r4
 8017d1a:	4b13      	ldr	r3, [pc, #76]	; (8017d68 <_vfiprintf_r+0x228>)
 8017d1c:	a904      	add	r1, sp, #16
 8017d1e:	4630      	mov	r0, r6
 8017d20:	f7fd fe16 	bl	8015950 <_printf_float>
 8017d24:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017d28:	4681      	mov	r9, r0
 8017d2a:	d1d5      	bne.n	8017cd8 <_vfiprintf_r+0x198>
 8017d2c:	89a3      	ldrh	r3, [r4, #12]
 8017d2e:	065b      	lsls	r3, r3, #25
 8017d30:	f53f af7e 	bmi.w	8017c30 <_vfiprintf_r+0xf0>
 8017d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d36:	e77d      	b.n	8017c34 <_vfiprintf_r+0xf4>
 8017d38:	ab03      	add	r3, sp, #12
 8017d3a:	9300      	str	r3, [sp, #0]
 8017d3c:	4622      	mov	r2, r4
 8017d3e:	4b0a      	ldr	r3, [pc, #40]	; (8017d68 <_vfiprintf_r+0x228>)
 8017d40:	a904      	add	r1, sp, #16
 8017d42:	4630      	mov	r0, r6
 8017d44:	f7fe f8ba 	bl	8015ebc <_printf_i>
 8017d48:	e7ec      	b.n	8017d24 <_vfiprintf_r+0x1e4>
 8017d4a:	bf00      	nop
 8017d4c:	08018144 	.word	0x08018144
 8017d50:	08018284 	.word	0x08018284
 8017d54:	08018164 	.word	0x08018164
 8017d58:	08018124 	.word	0x08018124
 8017d5c:	0801828a 	.word	0x0801828a
 8017d60:	0801828e 	.word	0x0801828e
 8017d64:	08015951 	.word	0x08015951
 8017d68:	08017b1b 	.word	0x08017b1b

08017d6c <_sbrk_r>:
 8017d6c:	b538      	push	{r3, r4, r5, lr}
 8017d6e:	4c06      	ldr	r4, [pc, #24]	; (8017d88 <_sbrk_r+0x1c>)
 8017d70:	2300      	movs	r3, #0
 8017d72:	4605      	mov	r5, r0
 8017d74:	4608      	mov	r0, r1
 8017d76:	6023      	str	r3, [r4, #0]
 8017d78:	f7f8 fa40 	bl	80101fc <_sbrk>
 8017d7c:	1c43      	adds	r3, r0, #1
 8017d7e:	d102      	bne.n	8017d86 <_sbrk_r+0x1a>
 8017d80:	6823      	ldr	r3, [r4, #0]
 8017d82:	b103      	cbz	r3, 8017d86 <_sbrk_r+0x1a>
 8017d84:	602b      	str	r3, [r5, #0]
 8017d86:	bd38      	pop	{r3, r4, r5, pc}
 8017d88:	20005284 	.word	0x20005284

08017d8c <__sread>:
 8017d8c:	b510      	push	{r4, lr}
 8017d8e:	460c      	mov	r4, r1
 8017d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d94:	f000 f8a8 	bl	8017ee8 <_read_r>
 8017d98:	2800      	cmp	r0, #0
 8017d9a:	bfab      	itete	ge
 8017d9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8017da0:	181b      	addge	r3, r3, r0
 8017da2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017da6:	bfac      	ite	ge
 8017da8:	6563      	strge	r3, [r4, #84]	; 0x54
 8017daa:	81a3      	strhlt	r3, [r4, #12]
 8017dac:	bd10      	pop	{r4, pc}

08017dae <__swrite>:
 8017dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017db2:	461f      	mov	r7, r3
 8017db4:	898b      	ldrh	r3, [r1, #12]
 8017db6:	05db      	lsls	r3, r3, #23
 8017db8:	4605      	mov	r5, r0
 8017dba:	460c      	mov	r4, r1
 8017dbc:	4616      	mov	r6, r2
 8017dbe:	d505      	bpl.n	8017dcc <__swrite+0x1e>
 8017dc0:	2302      	movs	r3, #2
 8017dc2:	2200      	movs	r2, #0
 8017dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017dc8:	f000 f868 	bl	8017e9c <_lseek_r>
 8017dcc:	89a3      	ldrh	r3, [r4, #12]
 8017dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017dd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017dd6:	81a3      	strh	r3, [r4, #12]
 8017dd8:	4632      	mov	r2, r6
 8017dda:	463b      	mov	r3, r7
 8017ddc:	4628      	mov	r0, r5
 8017dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017de2:	f000 b817 	b.w	8017e14 <_write_r>

08017de6 <__sseek>:
 8017de6:	b510      	push	{r4, lr}
 8017de8:	460c      	mov	r4, r1
 8017dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017dee:	f000 f855 	bl	8017e9c <_lseek_r>
 8017df2:	1c43      	adds	r3, r0, #1
 8017df4:	89a3      	ldrh	r3, [r4, #12]
 8017df6:	bf15      	itete	ne
 8017df8:	6560      	strne	r0, [r4, #84]	; 0x54
 8017dfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017dfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017e02:	81a3      	strheq	r3, [r4, #12]
 8017e04:	bf18      	it	ne
 8017e06:	81a3      	strhne	r3, [r4, #12]
 8017e08:	bd10      	pop	{r4, pc}

08017e0a <__sclose>:
 8017e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e0e:	f000 b813 	b.w	8017e38 <_close_r>
	...

08017e14 <_write_r>:
 8017e14:	b538      	push	{r3, r4, r5, lr}
 8017e16:	4c07      	ldr	r4, [pc, #28]	; (8017e34 <_write_r+0x20>)
 8017e18:	4605      	mov	r5, r0
 8017e1a:	4608      	mov	r0, r1
 8017e1c:	4611      	mov	r1, r2
 8017e1e:	2200      	movs	r2, #0
 8017e20:	6022      	str	r2, [r4, #0]
 8017e22:	461a      	mov	r2, r3
 8017e24:	f7f8 f999 	bl	801015a <_write>
 8017e28:	1c43      	adds	r3, r0, #1
 8017e2a:	d102      	bne.n	8017e32 <_write_r+0x1e>
 8017e2c:	6823      	ldr	r3, [r4, #0]
 8017e2e:	b103      	cbz	r3, 8017e32 <_write_r+0x1e>
 8017e30:	602b      	str	r3, [r5, #0]
 8017e32:	bd38      	pop	{r3, r4, r5, pc}
 8017e34:	20005284 	.word	0x20005284

08017e38 <_close_r>:
 8017e38:	b538      	push	{r3, r4, r5, lr}
 8017e3a:	4c06      	ldr	r4, [pc, #24]	; (8017e54 <_close_r+0x1c>)
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	4605      	mov	r5, r0
 8017e40:	4608      	mov	r0, r1
 8017e42:	6023      	str	r3, [r4, #0]
 8017e44:	f7f8 f9a5 	bl	8010192 <_close>
 8017e48:	1c43      	adds	r3, r0, #1
 8017e4a:	d102      	bne.n	8017e52 <_close_r+0x1a>
 8017e4c:	6823      	ldr	r3, [r4, #0]
 8017e4e:	b103      	cbz	r3, 8017e52 <_close_r+0x1a>
 8017e50:	602b      	str	r3, [r5, #0]
 8017e52:	bd38      	pop	{r3, r4, r5, pc}
 8017e54:	20005284 	.word	0x20005284

08017e58 <_fstat_r>:
 8017e58:	b538      	push	{r3, r4, r5, lr}
 8017e5a:	4c07      	ldr	r4, [pc, #28]	; (8017e78 <_fstat_r+0x20>)
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	4605      	mov	r5, r0
 8017e60:	4608      	mov	r0, r1
 8017e62:	4611      	mov	r1, r2
 8017e64:	6023      	str	r3, [r4, #0]
 8017e66:	f7f8 f9a0 	bl	80101aa <_fstat>
 8017e6a:	1c43      	adds	r3, r0, #1
 8017e6c:	d102      	bne.n	8017e74 <_fstat_r+0x1c>
 8017e6e:	6823      	ldr	r3, [r4, #0]
 8017e70:	b103      	cbz	r3, 8017e74 <_fstat_r+0x1c>
 8017e72:	602b      	str	r3, [r5, #0]
 8017e74:	bd38      	pop	{r3, r4, r5, pc}
 8017e76:	bf00      	nop
 8017e78:	20005284 	.word	0x20005284

08017e7c <_isatty_r>:
 8017e7c:	b538      	push	{r3, r4, r5, lr}
 8017e7e:	4c06      	ldr	r4, [pc, #24]	; (8017e98 <_isatty_r+0x1c>)
 8017e80:	2300      	movs	r3, #0
 8017e82:	4605      	mov	r5, r0
 8017e84:	4608      	mov	r0, r1
 8017e86:	6023      	str	r3, [r4, #0]
 8017e88:	f7f8 f99f 	bl	80101ca <_isatty>
 8017e8c:	1c43      	adds	r3, r0, #1
 8017e8e:	d102      	bne.n	8017e96 <_isatty_r+0x1a>
 8017e90:	6823      	ldr	r3, [r4, #0]
 8017e92:	b103      	cbz	r3, 8017e96 <_isatty_r+0x1a>
 8017e94:	602b      	str	r3, [r5, #0]
 8017e96:	bd38      	pop	{r3, r4, r5, pc}
 8017e98:	20005284 	.word	0x20005284

08017e9c <_lseek_r>:
 8017e9c:	b538      	push	{r3, r4, r5, lr}
 8017e9e:	4c07      	ldr	r4, [pc, #28]	; (8017ebc <_lseek_r+0x20>)
 8017ea0:	4605      	mov	r5, r0
 8017ea2:	4608      	mov	r0, r1
 8017ea4:	4611      	mov	r1, r2
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	6022      	str	r2, [r4, #0]
 8017eaa:	461a      	mov	r2, r3
 8017eac:	f7f8 f998 	bl	80101e0 <_lseek>
 8017eb0:	1c43      	adds	r3, r0, #1
 8017eb2:	d102      	bne.n	8017eba <_lseek_r+0x1e>
 8017eb4:	6823      	ldr	r3, [r4, #0]
 8017eb6:	b103      	cbz	r3, 8017eba <_lseek_r+0x1e>
 8017eb8:	602b      	str	r3, [r5, #0]
 8017eba:	bd38      	pop	{r3, r4, r5, pc}
 8017ebc:	20005284 	.word	0x20005284

08017ec0 <__ascii_mbtowc>:
 8017ec0:	b082      	sub	sp, #8
 8017ec2:	b901      	cbnz	r1, 8017ec6 <__ascii_mbtowc+0x6>
 8017ec4:	a901      	add	r1, sp, #4
 8017ec6:	b142      	cbz	r2, 8017eda <__ascii_mbtowc+0x1a>
 8017ec8:	b14b      	cbz	r3, 8017ede <__ascii_mbtowc+0x1e>
 8017eca:	7813      	ldrb	r3, [r2, #0]
 8017ecc:	600b      	str	r3, [r1, #0]
 8017ece:	7812      	ldrb	r2, [r2, #0]
 8017ed0:	1c10      	adds	r0, r2, #0
 8017ed2:	bf18      	it	ne
 8017ed4:	2001      	movne	r0, #1
 8017ed6:	b002      	add	sp, #8
 8017ed8:	4770      	bx	lr
 8017eda:	4610      	mov	r0, r2
 8017edc:	e7fb      	b.n	8017ed6 <__ascii_mbtowc+0x16>
 8017ede:	f06f 0001 	mvn.w	r0, #1
 8017ee2:	e7f8      	b.n	8017ed6 <__ascii_mbtowc+0x16>

08017ee4 <__malloc_lock>:
 8017ee4:	4770      	bx	lr

08017ee6 <__malloc_unlock>:
 8017ee6:	4770      	bx	lr

08017ee8 <_read_r>:
 8017ee8:	b538      	push	{r3, r4, r5, lr}
 8017eea:	4c07      	ldr	r4, [pc, #28]	; (8017f08 <_read_r+0x20>)
 8017eec:	4605      	mov	r5, r0
 8017eee:	4608      	mov	r0, r1
 8017ef0:	4611      	mov	r1, r2
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	6022      	str	r2, [r4, #0]
 8017ef6:	461a      	mov	r2, r3
 8017ef8:	f7f8 f912 	bl	8010120 <_read>
 8017efc:	1c43      	adds	r3, r0, #1
 8017efe:	d102      	bne.n	8017f06 <_read_r+0x1e>
 8017f00:	6823      	ldr	r3, [r4, #0]
 8017f02:	b103      	cbz	r3, 8017f06 <_read_r+0x1e>
 8017f04:	602b      	str	r3, [r5, #0]
 8017f06:	bd38      	pop	{r3, r4, r5, pc}
 8017f08:	20005284 	.word	0x20005284

08017f0c <__ascii_wctomb>:
 8017f0c:	b149      	cbz	r1, 8017f22 <__ascii_wctomb+0x16>
 8017f0e:	2aff      	cmp	r2, #255	; 0xff
 8017f10:	bf85      	ittet	hi
 8017f12:	238a      	movhi	r3, #138	; 0x8a
 8017f14:	6003      	strhi	r3, [r0, #0]
 8017f16:	700a      	strbls	r2, [r1, #0]
 8017f18:	f04f 30ff 	movhi.w	r0, #4294967295
 8017f1c:	bf98      	it	ls
 8017f1e:	2001      	movls	r0, #1
 8017f20:	4770      	bx	lr
 8017f22:	4608      	mov	r0, r1
 8017f24:	4770      	bx	lr
	...

08017f28 <_init>:
 8017f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f2a:	bf00      	nop
 8017f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f2e:	bc08      	pop	{r3}
 8017f30:	469e      	mov	lr, r3
 8017f32:	4770      	bx	lr

08017f34 <_fini>:
 8017f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f36:	bf00      	nop
 8017f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f3a:	bc08      	pop	{r3}
 8017f3c:	469e      	mov	lr, r3
 8017f3e:	4770      	bx	lr
