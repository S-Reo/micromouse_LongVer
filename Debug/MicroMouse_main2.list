
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 00080000  08080000  08080000  00040000  2**0
                  ALLOC
  3 .text         00010420  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000488  08018420  08018420  00028420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  080188a8  080188a8  00030250  2**0
                  CONTENTS
  6 .ARM          00000008  080188a8  080188a8  000288a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  080188b0  080188b0  00030250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  080188b0  080188b0  000288b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  080188b4  080188b4  000288b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000250  20000000  080188b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00018e24  20000250  08018b08  00030250  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20019074  08018b08  00039074  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015767  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00002ef7  00000000  00000000  000459e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001558  00000000  00000000  000488e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013f0  00000000  00000000  00049e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00021e3a  00000000  00000000  0004b228  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0000ff7b  00000000  00000000  0006d062  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c883b  00000000  00000000  0007cfdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00145818  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000066f0  00000000  00000000  00145894  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000250 	.word	0x20000250
 800801c:	00000000 	.word	0x00000000
 8008020:	08018408 	.word	0x08018408

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000254 	.word	0x20000254
 800803c:	08018408 	.word	0x08018408

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <Side_Wall_Control>:

float R_velocity, L_velocity;
float Target_R_velo, Target_L_velo;

//壁制御
void Side_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 8008db8:	b590      	push	{r4, r7, lr}
 8008dba:	b089      	sub	sp, #36	; 0x24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	ed87 0a05 	vstr	s0, [r7, #20]
 8008dc2:	edc7 0a04 	vstr	s1, [r7, #16]
 8008dc6:	ed87 1a03 	vstr	s2, [r7, #12]
 8008dca:	edc7 1a02 	vstr	s3, [r7, #8]
 8008dce:	ed87 2a01 	vstr	s4, [r7, #4]
 8008dd2:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 8008dd6:	f04f 0300 	mov.w	r3, #0
 8008dda:	61fb      	str	r3, [r7, #28]
 8008ddc:	f04f 0300 	mov.w	r3, #0
 8008de0:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 8008de2:	4b4b      	ldr	r3, [pc, #300]	; (8008f10 <Side_Wall_Control+0x158>)
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d107      	bne.n	8008dfa <Side_Wall_Control+0x42>
		ei =0;
 8008dea:	4b4a      	ldr	r3, [pc, #296]	; (8008f14 <Side_Wall_Control+0x15c>)
 8008dec:	f04f 0200 	mov.w	r2, #0
 8008df0:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8008df2:	4b49      	ldr	r3, [pc, #292]	; (8008f18 <Side_Wall_Control+0x160>)
 8008df4:	f04f 0200 	mov.w	r2, #0
 8008df8:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8008dfa:	4b45      	ldr	r3, [pc, #276]	; (8008f10 <Side_Wall_Control+0x158>)
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	701a      	strb	r2, [r3, #0]

	e =  40 + target - now;//r - l
 8008e00:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e04:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8008f1c <Side_Wall_Control+0x164>
 8008e08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e14:	edc7 7a07 	vstr	s15, [r7, #28]
	ei += e * T;
 8008e18:	ed97 7a07 	vldr	s14, [r7, #28]
 8008e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e24:	4b3b      	ldr	r3, [pc, #236]	; (8008f14 <Side_Wall_Control+0x15c>)
 8008e26:	edd3 7a00 	vldr	s15, [r3]
 8008e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e2e:	4b39      	ldr	r3, [pc, #228]	; (8008f14 <Side_Wall_Control+0x15c>)
 8008e30:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8008e34:	4b38      	ldr	r3, [pc, #224]	; (8008f18 <Side_Wall_Control+0x160>)
 8008e36:	edd3 7a00 	vldr	s15, [r3]
 8008e3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8008e3e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008e42:	ed97 7a03 	vldr	s14, [r7, #12]
 8008e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e4a:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 8008e4e:	4a32      	ldr	r2, [pc, #200]	; (8008f18 <Side_Wall_Control+0x160>)
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	6013      	str	r3, [r2, #0]

	R_wall =  (int16_t)round(KP*e + KI*ei + KD*ed);
 8008e54:	ed97 7a02 	vldr	s14, [r7, #8]
 8008e58:	edd7 7a07 	vldr	s15, [r7, #28]
 8008e5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e60:	4b2c      	ldr	r3, [pc, #176]	; (8008f14 <Side_Wall_Control+0x15c>)
 8008e62:	edd3 6a00 	vldr	s13, [r3]
 8008e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e72:	edd7 6a00 	vldr	s13, [r7]
 8008e76:	edd7 7a06 	vldr	s15, [r7, #24]
 8008e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e82:	ee17 0a90 	vmov	r0, s15
 8008e86:	f7ff fa97 	bl	80083b8 <__aeabi_f2d>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	ec44 3b10 	vmov	d0, r3, r4
 8008e92:	f00c feb1 	bl	8015bf8 <round>
 8008e96:	ec54 3b10 	vmov	r3, r4, d0
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	f7ff fd93 	bl	80089c8 <__aeabi_d2iz>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	b21a      	sxth	r2, r3
 8008ea6:	4b1e      	ldr	r3, [pc, #120]	; (8008f20 <Side_Wall_Control+0x168>)
 8008ea8:	801a      	strh	r2, [r3, #0]
	L_wall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8008eaa:	ed97 7a02 	vldr	s14, [r7, #8]
 8008eae:	edd7 7a07 	vldr	s15, [r7, #28]
 8008eb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008eb6:	4b17      	ldr	r3, [pc, #92]	; (8008f14 <Side_Wall_Control+0x15c>)
 8008eb8:	edd3 6a00 	vldr	s13, [r3]
 8008ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ec8:	edd7 6a00 	vldr	s13, [r7]
 8008ecc:	edd7 7a06 	vldr	s15, [r7, #24]
 8008ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ed8:	ee17 0a90 	vmov	r0, s15
 8008edc:	f7ff fa6c 	bl	80083b8 <__aeabi_f2d>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	ec44 3b10 	vmov	d0, r3, r4
 8008ee8:	f00c fe86 	bl	8015bf8 <round>
 8008eec:	ec54 3b10 	vmov	r3, r4, d0
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	f7ff fd68 	bl	80089c8 <__aeabi_d2iz>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	b21b      	sxth	r3, r3
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	425b      	negs	r3, r3
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	b21a      	sxth	r2, r3
 8008f04:	4b07      	ldr	r3, [pc, #28]	; (8008f24 <Side_Wall_Control+0x16c>)
 8008f06:	801a      	strh	r2, [r3, #0]

}
 8008f08:	bf00      	nop
 8008f0a:	3724      	adds	r7, #36	; 0x24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd90      	pop	{r4, r7, pc}
 8008f10:	2000026c 	.word	0x2000026c
 8008f14:	20000270 	.word	0x20000270
 8008f18:	20000274 	.word	0x20000274
 8008f1c:	42200000 	.word	0x42200000
 8008f20:	2001837e 	.word	0x2001837e
 8008f24:	20018390 	.word	0x20018390

08008f28 <Left_Wall_Control>:

void Left_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 8008f28:	b590      	push	{r4, r7, lr}
 8008f2a:	b089      	sub	sp, #36	; 0x24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	ed87 0a05 	vstr	s0, [r7, #20]
 8008f32:	edc7 0a04 	vstr	s1, [r7, #16]
 8008f36:	ed87 1a03 	vstr	s2, [r7, #12]
 8008f3a:	edc7 1a02 	vstr	s3, [r7, #8]
 8008f3e:	ed87 2a01 	vstr	s4, [r7, #4]
 8008f42:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 8008f46:	f04f 0300 	mov.w	r3, #0
 8008f4a:	61fb      	str	r3, [r7, #28]
 8008f4c:	f04f 0300 	mov.w	r3, #0
 8008f50:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 8008f52:	4b51      	ldr	r3, [pc, #324]	; (8009098 <Left_Wall_Control+0x170>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d107      	bne.n	8008f6a <Left_Wall_Control+0x42>
		ei =0;
 8008f5a:	4b50      	ldr	r3, [pc, #320]	; (800909c <Left_Wall_Control+0x174>)
 8008f5c:	f04f 0200 	mov.w	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8008f62:	4b4f      	ldr	r3, [pc, #316]	; (80090a0 <Left_Wall_Control+0x178>)
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8008f6a:	4b4b      	ldr	r3, [pc, #300]	; (8009098 <Left_Wall_Control+0x170>)
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	701a      	strb	r2, [r3, #0]
	e = 1.2*(target - now);
 8008f70:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f74:	edd7 7a04 	vldr	s15, [r7, #16]
 8008f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f7c:	ee17 0a90 	vmov	r0, s15
 8008f80:	f7ff fa1a 	bl	80083b8 <__aeabi_f2d>
 8008f84:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8008f88:	4b46      	ldr	r3, [pc, #280]	; (80090a4 <Left_Wall_Control+0x17c>)
 8008f8a:	f7ff fa6d 	bl	8008468 <__aeabi_dmul>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	460c      	mov	r4, r1
 8008f92:	4618      	mov	r0, r3
 8008f94:	4621      	mov	r1, r4
 8008f96:	f7ff fd3f 	bl	8008a18 <__aeabi_d2f>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	61fb      	str	r3, [r7, #28]
	ei += e * T;
 8008f9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008fa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8008fa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008faa:	4b3c      	ldr	r3, [pc, #240]	; (800909c <Left_Wall_Control+0x174>)
 8008fac:	edd3 7a00 	vldr	s15, [r3]
 8008fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fb4:	4b39      	ldr	r3, [pc, #228]	; (800909c <Left_Wall_Control+0x174>)
 8008fb6:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8008fba:	4b39      	ldr	r3, [pc, #228]	; (80090a0 <Left_Wall_Control+0x178>)
 8008fbc:	edd3 7a00 	vldr	s15, [r3]
 8008fc0:	ed97 7a07 	vldr	s14, [r7, #28]
 8008fc4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008fc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8008fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fd0:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 8008fd4:	4a32      	ldr	r2, [pc, #200]	; (80090a0 <Left_Wall_Control+0x178>)
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	6013      	str	r3, [r2, #0]
	L_leftwall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8008fda:	ed97 7a02 	vldr	s14, [r7, #8]
 8008fde:	edd7 7a07 	vldr	s15, [r7, #28]
 8008fe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fe6:	4b2d      	ldr	r3, [pc, #180]	; (800909c <Left_Wall_Control+0x174>)
 8008fe8:	edd3 6a00 	vldr	s13, [r3]
 8008fec:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ff8:	edd7 6a00 	vldr	s13, [r7]
 8008ffc:	edd7 7a06 	vldr	s15, [r7, #24]
 8009000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009008:	ee17 0a90 	vmov	r0, s15
 800900c:	f7ff f9d4 	bl	80083b8 <__aeabi_f2d>
 8009010:	4603      	mov	r3, r0
 8009012:	460c      	mov	r4, r1
 8009014:	ec44 3b10 	vmov	d0, r3, r4
 8009018:	f00c fdee 	bl	8015bf8 <round>
 800901c:	ec54 3b10 	vmov	r3, r4, d0
 8009020:	4618      	mov	r0, r3
 8009022:	4621      	mov	r1, r4
 8009024:	f7ff fcd0 	bl	80089c8 <__aeabi_d2iz>
 8009028:	4603      	mov	r3, r0
 800902a:	b21b      	sxth	r3, r3
 800902c:	b29b      	uxth	r3, r3
 800902e:	425b      	negs	r3, r3
 8009030:	b29b      	uxth	r3, r3
 8009032:	b21a      	sxth	r2, r3
 8009034:	4b1c      	ldr	r3, [pc, #112]	; (80090a8 <Left_Wall_Control+0x180>)
 8009036:	801a      	strh	r2, [r3, #0]
	R_leftwall = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009038:	ed97 7a02 	vldr	s14, [r7, #8]
 800903c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009044:	4b15      	ldr	r3, [pc, #84]	; (800909c <Left_Wall_Control+0x174>)
 8009046:	edd3 6a00 	vldr	s13, [r3]
 800904a:	edd7 7a01 	vldr	s15, [r7, #4]
 800904e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009052:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009056:	edd7 6a00 	vldr	s13, [r7]
 800905a:	edd7 7a06 	vldr	s15, [r7, #24]
 800905e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009066:	ee17 0a90 	vmov	r0, s15
 800906a:	f7ff f9a5 	bl	80083b8 <__aeabi_f2d>
 800906e:	4603      	mov	r3, r0
 8009070:	460c      	mov	r4, r1
 8009072:	ec44 3b10 	vmov	d0, r3, r4
 8009076:	f00c fdbf 	bl	8015bf8 <round>
 800907a:	ec54 3b10 	vmov	r3, r4, d0
 800907e:	4618      	mov	r0, r3
 8009080:	4621      	mov	r1, r4
 8009082:	f7ff fca1 	bl	80089c8 <__aeabi_d2iz>
 8009086:	4603      	mov	r3, r0
 8009088:	b21a      	sxth	r2, r3
 800908a:	4b08      	ldr	r3, [pc, #32]	; (80090ac <Left_Wall_Control+0x184>)
 800908c:	801a      	strh	r2, [r3, #0]
}
 800908e:	bf00      	nop
 8009090:	3724      	adds	r7, #36	; 0x24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd90      	pop	{r4, r7, pc}
 8009096:	bf00      	nop
 8009098:	2000026c 	.word	0x2000026c
 800909c:	20000278 	.word	0x20000278
 80090a0:	2000027c 	.word	0x2000027c
 80090a4:	3ff33333 	.word	0x3ff33333
 80090a8:	2001837a 	.word	0x2001837a
 80090ac:	2001839c 	.word	0x2001839c

080090b0 <Right_Wall_Control>:

void Right_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 80090b0:	b590      	push	{r4, r7, lr}
 80090b2:	b089      	sub	sp, #36	; 0x24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	ed87 0a05 	vstr	s0, [r7, #20]
 80090ba:	edc7 0a04 	vstr	s1, [r7, #16]
 80090be:	ed87 1a03 	vstr	s2, [r7, #12]
 80090c2:	edc7 1a02 	vstr	s3, [r7, #8]
 80090c6:	ed87 2a01 	vstr	s4, [r7, #4]
 80090ca:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 80090ce:	f04f 0300 	mov.w	r3, #0
 80090d2:	61fb      	str	r3, [r7, #28]
 80090d4:	f04f 0300 	mov.w	r3, #0
 80090d8:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 80090da:	4b51      	ldr	r3, [pc, #324]	; (8009220 <Right_Wall_Control+0x170>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d107      	bne.n	80090f2 <Right_Wall_Control+0x42>
		ei =0;
 80090e2:	4b50      	ldr	r3, [pc, #320]	; (8009224 <Right_Wall_Control+0x174>)
 80090e4:	f04f 0200 	mov.w	r2, #0
 80090e8:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80090ea:	4b4f      	ldr	r3, [pc, #316]	; (8009228 <Right_Wall_Control+0x178>)
 80090ec:	f04f 0200 	mov.w	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80090f2:	4b4b      	ldr	r3, [pc, #300]	; (8009220 <Right_Wall_Control+0x170>)
 80090f4:	2201      	movs	r2, #1
 80090f6:	701a      	strb	r2, [r3, #0]
	e = 1.2*(target - now);
 80090f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80090fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8009100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009104:	ee17 0a90 	vmov	r0, s15
 8009108:	f7ff f956 	bl	80083b8 <__aeabi_f2d>
 800910c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8009110:	4b46      	ldr	r3, [pc, #280]	; (800922c <Right_Wall_Control+0x17c>)
 8009112:	f7ff f9a9 	bl	8008468 <__aeabi_dmul>
 8009116:	4603      	mov	r3, r0
 8009118:	460c      	mov	r4, r1
 800911a:	4618      	mov	r0, r3
 800911c:	4621      	mov	r1, r4
 800911e:	f7ff fc7b 	bl	8008a18 <__aeabi_d2f>
 8009122:	4603      	mov	r3, r0
 8009124:	61fb      	str	r3, [r7, #28]
	ei += e * T;
 8009126:	ed97 7a07 	vldr	s14, [r7, #28]
 800912a:	edd7 7a03 	vldr	s15, [r7, #12]
 800912e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009132:	4b3c      	ldr	r3, [pc, #240]	; (8009224 <Right_Wall_Control+0x174>)
 8009134:	edd3 7a00 	vldr	s15, [r3]
 8009138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800913c:	4b39      	ldr	r3, [pc, #228]	; (8009224 <Right_Wall_Control+0x174>)
 800913e:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8009142:	4b39      	ldr	r3, [pc, #228]	; (8009228 <Right_Wall_Control+0x178>)
 8009144:	edd3 7a00 	vldr	s15, [r3]
 8009148:	ed97 7a07 	vldr	s14, [r7, #28]
 800914c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009150:	ed97 7a03 	vldr	s14, [r7, #12]
 8009154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009158:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 800915c:	4a32      	ldr	r2, [pc, #200]	; (8009228 <Right_Wall_Control+0x178>)
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	6013      	str	r3, [r2, #0]
	L_rightwall = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009162:	ed97 7a02 	vldr	s14, [r7, #8]
 8009166:	edd7 7a07 	vldr	s15, [r7, #28]
 800916a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800916e:	4b2d      	ldr	r3, [pc, #180]	; (8009224 <Right_Wall_Control+0x174>)
 8009170:	edd3 6a00 	vldr	s13, [r3]
 8009174:	edd7 7a01 	vldr	s15, [r7, #4]
 8009178:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800917c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009180:	edd7 6a00 	vldr	s13, [r7]
 8009184:	edd7 7a06 	vldr	s15, [r7, #24]
 8009188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800918c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009190:	ee17 0a90 	vmov	r0, s15
 8009194:	f7ff f910 	bl	80083b8 <__aeabi_f2d>
 8009198:	4603      	mov	r3, r0
 800919a:	460c      	mov	r4, r1
 800919c:	ec44 3b10 	vmov	d0, r3, r4
 80091a0:	f00c fd2a 	bl	8015bf8 <round>
 80091a4:	ec54 3b10 	vmov	r3, r4, d0
 80091a8:	4618      	mov	r0, r3
 80091aa:	4621      	mov	r1, r4
 80091ac:	f7ff fc0c 	bl	80089c8 <__aeabi_d2iz>
 80091b0:	4603      	mov	r3, r0
 80091b2:	b21a      	sxth	r2, r3
 80091b4:	4b1e      	ldr	r3, [pc, #120]	; (8009230 <Right_Wall_Control+0x180>)
 80091b6:	801a      	strh	r2, [r3, #0]
	R_rightwall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 80091b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80091bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80091c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80091c4:	4b17      	ldr	r3, [pc, #92]	; (8009224 <Right_Wall_Control+0x174>)
 80091c6:	edd3 6a00 	vldr	s13, [r3]
 80091ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80091ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80091d6:	edd7 6a00 	vldr	s13, [r7]
 80091da:	edd7 7a06 	vldr	s15, [r7, #24]
 80091de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091e6:	ee17 0a90 	vmov	r0, s15
 80091ea:	f7ff f8e5 	bl	80083b8 <__aeabi_f2d>
 80091ee:	4603      	mov	r3, r0
 80091f0:	460c      	mov	r4, r1
 80091f2:	ec44 3b10 	vmov	d0, r3, r4
 80091f6:	f00c fcff 	bl	8015bf8 <round>
 80091fa:	ec54 3b10 	vmov	r3, r4, d0
 80091fe:	4618      	mov	r0, r3
 8009200:	4621      	mov	r1, r4
 8009202:	f7ff fbe1 	bl	80089c8 <__aeabi_d2iz>
 8009206:	4603      	mov	r3, r0
 8009208:	b21b      	sxth	r3, r3
 800920a:	b29b      	uxth	r3, r3
 800920c:	425b      	negs	r3, r3
 800920e:	b29b      	uxth	r3, r3
 8009210:	b21a      	sxth	r2, r3
 8009212:	4b08      	ldr	r3, [pc, #32]	; (8009234 <Right_Wall_Control+0x184>)
 8009214:	801a      	strh	r2, [r3, #0]
}
 8009216:	bf00      	nop
 8009218:	3724      	adds	r7, #36	; 0x24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd90      	pop	{r4, r7, pc}
 800921e:	bf00      	nop
 8009220:	2000026c 	.word	0x2000026c
 8009224:	20000280 	.word	0x20000280
 8009228:	20000284 	.word	0x20000284
 800922c:	3ff33333 	.word	0x3ff33333
 8009230:	2001836c 	.word	0x2001836c
 8009234:	20018384 	.word	0x20018384

08009238 <Velocity_Control>:

//速度制御
void Velocity_Control(float target, float now, float T, float KP, float KI, float KD){ //TIM3,4
 8009238:	b590      	push	{r4, r7, lr}
 800923a:	b089      	sub	sp, #36	; 0x24
 800923c:	af00      	add	r7, sp, #0
 800923e:	ed87 0a05 	vstr	s0, [r7, #20]
 8009242:	edc7 0a04 	vstr	s1, [r7, #16]
 8009246:	ed87 1a03 	vstr	s2, [r7, #12]
 800924a:	edc7 1a02 	vstr	s3, [r7, #8]
 800924e:	ed87 2a01 	vstr	s4, [r7, #4]
 8009252:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 8009256:	f04f 0300 	mov.w	r3, #0
 800925a:	61fb      	str	r3, [r7, #28]
 800925c:	f04f 0300 	mov.w	r3, #0
 8009260:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 8009262:	4b47      	ldr	r3, [pc, #284]	; (8009380 <Velocity_Control+0x148>)
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d107      	bne.n	800927a <Velocity_Control+0x42>
		ei =0;
 800926a:	4b46      	ldr	r3, [pc, #280]	; (8009384 <Velocity_Control+0x14c>)
 800926c:	f04f 0200 	mov.w	r2, #0
 8009270:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8009272:	4b45      	ldr	r3, [pc, #276]	; (8009388 <Velocity_Control+0x150>)
 8009274:	f04f 0200 	mov.w	r2, #0
 8009278:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 800927a:	4b41      	ldr	r3, [pc, #260]	; (8009380 <Velocity_Control+0x148>)
 800927c:	2201      	movs	r2, #1
 800927e:	701a      	strb	r2, [r3, #0]
	e = target - now;
 8009280:	ed97 7a05 	vldr	s14, [r7, #20]
 8009284:	edd7 7a04 	vldr	s15, [r7, #16]
 8009288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800928c:	edc7 7a07 	vstr	s15, [r7, #28]
	ei += e * T;
 8009290:	ed97 7a07 	vldr	s14, [r7, #28]
 8009294:	edd7 7a03 	vldr	s15, [r7, #12]
 8009298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800929c:	4b39      	ldr	r3, [pc, #228]	; (8009384 <Velocity_Control+0x14c>)
 800929e:	edd3 7a00 	vldr	s15, [r3]
 80092a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092a6:	4b37      	ldr	r3, [pc, #220]	; (8009384 <Velocity_Control+0x14c>)
 80092a8:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 80092ac:	4b36      	ldr	r3, [pc, #216]	; (8009388 <Velocity_Control+0x150>)
 80092ae:	edd3 7a00 	vldr	s15, [r3]
 80092b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80092b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80092ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80092be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092c2:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 80092c6:	4a30      	ldr	r2, [pc, #192]	; (8009388 <Velocity_Control+0x150>)
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	6013      	str	r3, [r2, #0]

    //o PID制御して、PWMの出力に反映
	R_v_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 80092cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80092d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80092d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092d8:	4b2a      	ldr	r3, [pc, #168]	; (8009384 <Velocity_Control+0x14c>)
 80092da:	edd3 6a00 	vldr	s13, [r3]
 80092de:	edd7 7a01 	vldr	s15, [r7, #4]
 80092e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80092ea:	edd7 6a00 	vldr	s13, [r7]
 80092ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80092f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092fa:	ee17 0a90 	vmov	r0, s15
 80092fe:	f7ff f85b 	bl	80083b8 <__aeabi_f2d>
 8009302:	4603      	mov	r3, r0
 8009304:	460c      	mov	r4, r1
 8009306:	ec44 3b10 	vmov	d0, r3, r4
 800930a:	f00c fc75 	bl	8015bf8 <round>
 800930e:	ec54 3b10 	vmov	r3, r4, d0
 8009312:	4618      	mov	r0, r3
 8009314:	4621      	mov	r1, r4
 8009316:	f7ff fb57 	bl	80089c8 <__aeabi_d2iz>
 800931a:	4603      	mov	r3, r0
 800931c:	b21a      	sxth	r2, r3
 800931e:	4b1b      	ldr	r3, [pc, #108]	; (800938c <Velocity_Control+0x154>)
 8009320:	801a      	strh	r2, [r3, #0]
	L_v_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009322:	ed97 7a02 	vldr	s14, [r7, #8]
 8009326:	edd7 7a07 	vldr	s15, [r7, #28]
 800932a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800932e:	4b15      	ldr	r3, [pc, #84]	; (8009384 <Velocity_Control+0x14c>)
 8009330:	edd3 6a00 	vldr	s13, [r3]
 8009334:	edd7 7a01 	vldr	s15, [r7, #4]
 8009338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800933c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009340:	edd7 6a00 	vldr	s13, [r7]
 8009344:	edd7 7a06 	vldr	s15, [r7, #24]
 8009348:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800934c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009350:	ee17 0a90 	vmov	r0, s15
 8009354:	f7ff f830 	bl	80083b8 <__aeabi_f2d>
 8009358:	4603      	mov	r3, r0
 800935a:	460c      	mov	r4, r1
 800935c:	ec44 3b10 	vmov	d0, r3, r4
 8009360:	f00c fc4a 	bl	8015bf8 <round>
 8009364:	ec54 3b10 	vmov	r3, r4, d0
 8009368:	4618      	mov	r0, r3
 800936a:	4621      	mov	r1, r4
 800936c:	f7ff fb2c 	bl	80089c8 <__aeabi_d2iz>
 8009370:	4603      	mov	r3, r0
 8009372:	b21a      	sxth	r2, r3
 8009374:	4b06      	ldr	r3, [pc, #24]	; (8009390 <Velocity_Control+0x158>)
 8009376:	801a      	strh	r2, [r3, #0]

	//o代入は個でよさそう
}
 8009378:	bf00      	nop
 800937a:	3724      	adds	r7, #36	; 0x24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd90      	pop	{r4, r7, pc}
 8009380:	2000026c 	.word	0x2000026c
 8009384:	20000288 	.word	0x20000288
 8009388:	2000028c 	.word	0x2000028c
 800938c:	20018380 	.word	0x20018380
 8009390:	20018378 	.word	0x20018378

08009394 <Right_Velo_Control>:

void Right_Velo_Control(float target, float now, float T, float KP, float KI, float KD){
 8009394:	b590      	push	{r4, r7, lr}
 8009396:	b089      	sub	sp, #36	; 0x24
 8009398:	af00      	add	r7, sp, #0
 800939a:	ed87 0a05 	vstr	s0, [r7, #20]
 800939e:	edc7 0a04 	vstr	s1, [r7, #16]
 80093a2:	ed87 1a03 	vstr	s2, [r7, #12]
 80093a6:	edc7 1a02 	vstr	s3, [r7, #8]
 80093aa:	ed87 2a01 	vstr	s4, [r7, #4]
 80093ae:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 80093b2:	f04f 0300 	mov.w	r3, #0
 80093b6:	61fb      	str	r3, [r7, #28]
 80093b8:	f04f 0300 	mov.w	r3, #0
 80093bc:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 80093be:	4b32      	ldr	r3, [pc, #200]	; (8009488 <Right_Velo_Control+0xf4>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d107      	bne.n	80093d6 <Right_Velo_Control+0x42>
		ei =0;
 80093c6:	4b31      	ldr	r3, [pc, #196]	; (800948c <Right_Velo_Control+0xf8>)
 80093c8:	f04f 0200 	mov.w	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80093ce:	4b30      	ldr	r3, [pc, #192]	; (8009490 <Right_Velo_Control+0xfc>)
 80093d0:	f04f 0200 	mov.w	r2, #0
 80093d4:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80093d6:	4b2c      	ldr	r3, [pc, #176]	; (8009488 <Right_Velo_Control+0xf4>)
 80093d8:	2201      	movs	r2, #1
 80093da:	701a      	strb	r2, [r3, #0]
	e = target - now;
 80093dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80093e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80093e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093e8:	edc7 7a07 	vstr	s15, [r7, #28]
	ei += e * T;
 80093ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80093f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80093f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093f8:	4b24      	ldr	r3, [pc, #144]	; (800948c <Right_Velo_Control+0xf8>)
 80093fa:	edd3 7a00 	vldr	s15, [r3]
 80093fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009402:	4b22      	ldr	r3, [pc, #136]	; (800948c <Right_Velo_Control+0xf8>)
 8009404:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 8009408:	4b21      	ldr	r3, [pc, #132]	; (8009490 <Right_Velo_Control+0xfc>)
 800940a:	edd3 7a00 	vldr	s15, [r3]
 800940e:	ed97 7a07 	vldr	s14, [r7, #28]
 8009412:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009416:	ed97 7a03 	vldr	s14, [r7, #12]
 800941a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800941e:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 8009422:	4a1b      	ldr	r2, [pc, #108]	; (8009490 <Right_Velo_Control+0xfc>)
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	6013      	str	r3, [r2, #0]

	R_velo_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009428:	ed97 7a02 	vldr	s14, [r7, #8]
 800942c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009434:	4b15      	ldr	r3, [pc, #84]	; (800948c <Right_Velo_Control+0xf8>)
 8009436:	edd3 6a00 	vldr	s13, [r3]
 800943a:	edd7 7a01 	vldr	s15, [r7, #4]
 800943e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009442:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009446:	edd7 6a00 	vldr	s13, [r7]
 800944a:	edd7 7a06 	vldr	s15, [r7, #24]
 800944e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009456:	ee17 0a90 	vmov	r0, s15
 800945a:	f7fe ffad 	bl	80083b8 <__aeabi_f2d>
 800945e:	4603      	mov	r3, r0
 8009460:	460c      	mov	r4, r1
 8009462:	ec44 3b10 	vmov	d0, r3, r4
 8009466:	f00c fbc7 	bl	8015bf8 <round>
 800946a:	ec54 3b10 	vmov	r3, r4, d0
 800946e:	4618      	mov	r0, r3
 8009470:	4621      	mov	r1, r4
 8009472:	f7ff faa9 	bl	80089c8 <__aeabi_d2iz>
 8009476:	4603      	mov	r3, r0
 8009478:	b21a      	sxth	r2, r3
 800947a:	4b06      	ldr	r3, [pc, #24]	; (8009494 <Right_Velo_Control+0x100>)
 800947c:	801a      	strh	r2, [r3, #0]
}
 800947e:	bf00      	nop
 8009480:	3724      	adds	r7, #36	; 0x24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd90      	pop	{r4, r7, pc}
 8009486:	bf00      	nop
 8009488:	2000026c 	.word	0x2000026c
 800948c:	20000290 	.word	0x20000290
 8009490:	20000294 	.word	0x20000294
 8009494:	20018370 	.word	0x20018370

08009498 <Left_Velo_Control>:

void Left_Velo_Control(float target, float now, float T, float KP, float KI, float KD){
 8009498:	b590      	push	{r4, r7, lr}
 800949a:	b089      	sub	sp, #36	; 0x24
 800949c:	af00      	add	r7, sp, #0
 800949e:	ed87 0a05 	vstr	s0, [r7, #20]
 80094a2:	edc7 0a04 	vstr	s1, [r7, #16]
 80094a6:	ed87 1a03 	vstr	s2, [r7, #12]
 80094aa:	edc7 1a02 	vstr	s3, [r7, #8]
 80094ae:	ed87 2a01 	vstr	s4, [r7, #4]
 80094b2:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 80094b6:	f04f 0300 	mov.w	r3, #0
 80094ba:	61fb      	str	r3, [r7, #28]
 80094bc:	f04f 0300 	mov.w	r3, #0
 80094c0:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 80094c2:	4b32      	ldr	r3, [pc, #200]	; (800958c <Left_Velo_Control+0xf4>)
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d107      	bne.n	80094da <Left_Velo_Control+0x42>
		ei =0;
 80094ca:	4b31      	ldr	r3, [pc, #196]	; (8009590 <Left_Velo_Control+0xf8>)
 80094cc:	f04f 0200 	mov.w	r2, #0
 80094d0:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80094d2:	4b30      	ldr	r3, [pc, #192]	; (8009594 <Left_Velo_Control+0xfc>)
 80094d4:	f04f 0200 	mov.w	r2, #0
 80094d8:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80094da:	4b2c      	ldr	r3, [pc, #176]	; (800958c <Left_Velo_Control+0xf4>)
 80094dc:	2201      	movs	r2, #1
 80094de:	701a      	strb	r2, [r3, #0]
	e = target - now;
 80094e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80094e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80094e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094ec:	edc7 7a07 	vstr	s15, [r7, #28]
	ei += e * T;
 80094f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80094f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80094f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80094fc:	4b24      	ldr	r3, [pc, #144]	; (8009590 <Left_Velo_Control+0xf8>)
 80094fe:	edd3 7a00 	vldr	s15, [r3]
 8009502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009506:	4b22      	ldr	r3, [pc, #136]	; (8009590 <Left_Velo_Control+0xf8>)
 8009508:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 800950c:	4b21      	ldr	r3, [pc, #132]	; (8009594 <Left_Velo_Control+0xfc>)
 800950e:	edd3 7a00 	vldr	s15, [r3]
 8009512:	ed97 7a07 	vldr	s14, [r7, #28]
 8009516:	ee77 6a67 	vsub.f32	s13, s14, s15
 800951a:	ed97 7a03 	vldr	s14, [r7, #12]
 800951e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009522:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 8009526:	4a1b      	ldr	r2, [pc, #108]	; (8009594 <Left_Velo_Control+0xfc>)
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	6013      	str	r3, [r2, #0]

	L_velo_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 800952c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009530:	edd7 7a07 	vldr	s15, [r7, #28]
 8009534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009538:	4b15      	ldr	r3, [pc, #84]	; (8009590 <Left_Velo_Control+0xf8>)
 800953a:	edd3 6a00 	vldr	s13, [r3]
 800953e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009546:	ee37 7a27 	vadd.f32	s14, s14, s15
 800954a:	edd7 6a00 	vldr	s13, [r7]
 800954e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800955a:	ee17 0a90 	vmov	r0, s15
 800955e:	f7fe ff2b 	bl	80083b8 <__aeabi_f2d>
 8009562:	4603      	mov	r3, r0
 8009564:	460c      	mov	r4, r1
 8009566:	ec44 3b10 	vmov	d0, r3, r4
 800956a:	f00c fb45 	bl	8015bf8 <round>
 800956e:	ec54 3b10 	vmov	r3, r4, d0
 8009572:	4618      	mov	r0, r3
 8009574:	4621      	mov	r1, r4
 8009576:	f7ff fa27 	bl	80089c8 <__aeabi_d2iz>
 800957a:	4603      	mov	r3, r0
 800957c:	b21a      	sxth	r2, r3
 800957e:	4b06      	ldr	r3, [pc, #24]	; (8009598 <Left_Velo_Control+0x100>)
 8009580:	801a      	strh	r2, [r3, #0]
}
 8009582:	bf00      	nop
 8009584:	3724      	adds	r7, #36	; 0x24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd90      	pop	{r4, r7, pc}
 800958a:	bf00      	nop
 800958c:	2000026c 	.word	0x2000026c
 8009590:	20000298 	.word	0x20000298
 8009594:	2000029c 	.word	0x2000029c
 8009598:	20018392 	.word	0x20018392

0800959c <Enc_Velo_Control>:
	R_rotate = (int16_t)round(KP*e_R + KI*ei_R + KD*ed_R);
	L_rotate = (int16_t)round(KP*e_L + KI*ei_L + KD*ed_L);

}

void Enc_Velo_Control(float T, float KP, float KI, float KD){
 800959c:	b590      	push	{r4, r7, lr}
 800959e:	b087      	sub	sp, #28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80095a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80095aa:	ed87 1a01 	vstr	s2, [r7, #4]
 80095ae:	edc7 1a00 	vstr	s3, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 80095b2:	f04f 0300 	mov.w	r3, #0
 80095b6:	617b      	str	r3, [r7, #20]
 80095b8:	f04f 0300 	mov.w	r3, #0
 80095bc:	613b      	str	r3, [r7, #16]
	if(error_reset == 0){
 80095be:	4b4a      	ldr	r3, [pc, #296]	; (80096e8 <Enc_Velo_Control+0x14c>)
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d107      	bne.n	80095d6 <Enc_Velo_Control+0x3a>
		ei =0;
 80095c6:	4b49      	ldr	r3, [pc, #292]	; (80096ec <Enc_Velo_Control+0x150>)
 80095c8:	f04f 0200 	mov.w	r2, #0
 80095cc:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80095ce:	4b48      	ldr	r3, [pc, #288]	; (80096f0 <Enc_Velo_Control+0x154>)
 80095d0:	f04f 0200 	mov.w	r2, #0
 80095d4:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80095d6:	4b44      	ldr	r3, [pc, #272]	; (80096e8 <Enc_Velo_Control+0x14c>)
 80095d8:	2201      	movs	r2, #1
 80095da:	701a      	strb	r2, [r3, #0]
	e = L_velocity - R_velocity;
 80095dc:	4b45      	ldr	r3, [pc, #276]	; (80096f4 <Enc_Velo_Control+0x158>)
 80095de:	ed93 7a00 	vldr	s14, [r3]
 80095e2:	4b45      	ldr	r3, [pc, #276]	; (80096f8 <Enc_Velo_Control+0x15c>)
 80095e4:	edd3 7a00 	vldr	s15, [r3]
 80095e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095ec:	edc7 7a05 	vstr	s15, [r7, #20]
	ei += e * T;
 80095f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80095f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80095f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80095fc:	4b3b      	ldr	r3, [pc, #236]	; (80096ec <Enc_Velo_Control+0x150>)
 80095fe:	edd3 7a00 	vldr	s15, [r3]
 8009602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009606:	4b39      	ldr	r3, [pc, #228]	; (80096ec <Enc_Velo_Control+0x150>)
 8009608:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 800960c:	4b38      	ldr	r3, [pc, #224]	; (80096f0 <Enc_Velo_Control+0x154>)
 800960e:	edd3 7a00 	vldr	s15, [r3]
 8009612:	ed97 7a05 	vldr	s14, [r7, #20]
 8009616:	ee77 6a67 	vsub.f32	s13, s14, s15
 800961a:	ed97 7a03 	vldr	s14, [r7, #12]
 800961e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009622:	edc7 7a04 	vstr	s15, [r7, #16]
	e0 = e;
 8009626:	4a32      	ldr	r2, [pc, #200]	; (80096f0 <Enc_Velo_Control+0x154>)
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	6013      	str	r3, [r2, #0]

	R_env_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 800962c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009630:	edd7 7a05 	vldr	s15, [r7, #20]
 8009634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009638:	4b2c      	ldr	r3, [pc, #176]	; (80096ec <Enc_Velo_Control+0x150>)
 800963a:	edd3 6a00 	vldr	s13, [r3]
 800963e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800964a:	edd7 6a00 	vldr	s13, [r7]
 800964e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800965a:	ee17 0a90 	vmov	r0, s15
 800965e:	f7fe feab 	bl	80083b8 <__aeabi_f2d>
 8009662:	4603      	mov	r3, r0
 8009664:	460c      	mov	r4, r1
 8009666:	ec44 3b10 	vmov	d0, r3, r4
 800966a:	f00c fac5 	bl	8015bf8 <round>
 800966e:	ec54 3b10 	vmov	r3, r4, d0
 8009672:	4618      	mov	r0, r3
 8009674:	4621      	mov	r1, r4
 8009676:	f7ff f9a7 	bl	80089c8 <__aeabi_d2iz>
 800967a:	4603      	mov	r3, r0
 800967c:	b21a      	sxth	r2, r3
 800967e:	4b1f      	ldr	r3, [pc, #124]	; (80096fc <Enc_Velo_Control+0x160>)
 8009680:	801a      	strh	r2, [r3, #0]
	L_env_control = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8009682:	ed97 7a02 	vldr	s14, [r7, #8]
 8009686:	edd7 7a05 	vldr	s15, [r7, #20]
 800968a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800968e:	4b17      	ldr	r3, [pc, #92]	; (80096ec <Enc_Velo_Control+0x150>)
 8009690:	edd3 6a00 	vldr	s13, [r3]
 8009694:	edd7 7a01 	vldr	s15, [r7, #4]
 8009698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800969c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80096a0:	edd7 6a00 	vldr	s13, [r7]
 80096a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80096a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096b0:	ee17 0a90 	vmov	r0, s15
 80096b4:	f7fe fe80 	bl	80083b8 <__aeabi_f2d>
 80096b8:	4603      	mov	r3, r0
 80096ba:	460c      	mov	r4, r1
 80096bc:	ec44 3b10 	vmov	d0, r3, r4
 80096c0:	f00c fa9a 	bl	8015bf8 <round>
 80096c4:	ec54 3b10 	vmov	r3, r4, d0
 80096c8:	4618      	mov	r0, r3
 80096ca:	4621      	mov	r1, r4
 80096cc:	f7ff f97c 	bl	80089c8 <__aeabi_d2iz>
 80096d0:	4603      	mov	r3, r0
 80096d2:	b21b      	sxth	r3, r3
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	425b      	negs	r3, r3
 80096d8:	b29b      	uxth	r3, r3
 80096da:	b21a      	sxth	r2, r3
 80096dc:	4b08      	ldr	r3, [pc, #32]	; (8009700 <Enc_Velo_Control+0x164>)
 80096de:	801a      	strh	r2, [r3, #0]
}
 80096e0:	bf00      	nop
 80096e2:	371c      	adds	r7, #28
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd90      	pop	{r4, r7, pc}
 80096e8:	2000026c 	.word	0x2000026c
 80096ec:	200002a0 	.word	0x200002a0
 80096f0:	200002a4 	.word	0x200002a4
 80096f4:	2001838c 	.word	0x2001838c
 80096f8:	20018398 	.word	0x20018398
 80096fc:	2001837c 	.word	0x2001837c
 8009700:	2001836e 	.word	0x2001836e

08009704 <FLASH_Unlock>:
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;



inline static void FLASH_Unlock(void)
{
 8009704:	b480      	push	{r7}
 8009706:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 8009708:	4b05      	ldr	r3, [pc, #20]	; (8009720 <FLASH_Unlock+0x1c>)
 800970a:	4a06      	ldr	r2, [pc, #24]	; (8009724 <FLASH_Unlock+0x20>)
 800970c:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800970e:	4b04      	ldr	r3, [pc, #16]	; (8009720 <FLASH_Unlock+0x1c>)
 8009710:	4a05      	ldr	r2, [pc, #20]	; (8009728 <FLASH_Unlock+0x24>)
 8009712:	605a      	str	r2, [r3, #4]
}
 8009714:	bf00      	nop
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	40023c00 	.word	0x40023c00
 8009724:	45670123 	.word	0x45670123
 8009728:	cdef89ab 	.word	0xcdef89ab

0800972c <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800972c:	b480      	push	{r7}
 800972e:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8009730:	4b05      	ldr	r3, [pc, #20]	; (8009748 <FLASH_Lock+0x1c>)
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	4a04      	ldr	r2, [pc, #16]	; (8009748 <FLASH_Lock+0x1c>)
 8009736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800973a:	6113      	str	r3, [r2, #16]

}
 800973c:	bf00      	nop
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	40023c00 	.word	0x40023c00

0800974c <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800974c:	b480      	push	{r7}
 800974e:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 8009750:	bf00      	nop
 8009752:	4b05      	ldr	r3, [pc, #20]	; (8009768 <FLASH_WaitBusy+0x1c>)
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1f9      	bne.n	8009752 <FLASH_WaitBusy+0x6>
}
 800975e:	bf00      	nop
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	40023c00 	.word	0x40023c00

0800976c <FLASH_Erease8>:

void FLASH_Erease8(void)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	af00      	add	r7, sp, #0
	FLASH_Unlock();
 8009770:	f7ff ffc8 	bl	8009704 <FLASH_Unlock>

	FLASH_WaitBusy();
 8009774:	f7ff ffea 	bl	800974c <FLASH_WaitBusy>

	FLASH->CR |= FLASH_CR_SER;//SER Bitset
 8009778:	4b0b      	ldr	r3, [pc, #44]	; (80097a8 <FLASH_Erease8+0x3c>)
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	4a0a      	ldr	r2, [pc, #40]	; (80097a8 <FLASH_Erease8+0x3c>)
 800977e:	f043 0302 	orr.w	r3, r3, #2
 8009782:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_SECTOR8 & FLASH_CR_SNB_Msk;//セクタ選択
 8009784:	4b08      	ldr	r3, [pc, #32]	; (80097a8 <FLASH_Erease8+0x3c>)
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	4a07      	ldr	r2, [pc, #28]	; (80097a8 <FLASH_Erease8+0x3c>)
 800978a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800978e:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_STRT;//STRT Bitset
 8009790:	4b05      	ldr	r3, [pc, #20]	; (80097a8 <FLASH_Erease8+0x3c>)
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	4a04      	ldr	r2, [pc, #16]	; (80097a8 <FLASH_Erease8+0x3c>)
 8009796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800979a:	6113      	str	r3, [r2, #16]

	FLASH_WaitBusy();
 800979c:	f7ff ffd6 	bl	800974c <FLASH_WaitBusy>

	FLASH_Lock();
 80097a0:	f7ff ffc4 	bl	800972c <FLASH_Lock>
}
 80097a4:	bf00      	nop
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	40023c00 	.word	0x40023c00

080097ac <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 80097b8:	f7ff ffa4 	bl	8009704 <FLASH_Unlock>

	FLASH_WaitBusy();
 80097bc:	f7ff ffc6 	bl	800974c <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 80097c0:	4b0e      	ldr	r3, [pc, #56]	; (80097fc <FLASH_Write_Word_F+0x50>)
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	4a0d      	ldr	r2, [pc, #52]	; (80097fc <FLASH_Write_Word_F+0x50>)
 80097c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097ca:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 80097cc:	4b0b      	ldr	r3, [pc, #44]	; (80097fc <FLASH_Write_Word_F+0x50>)
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	4a0a      	ldr	r2, [pc, #40]	; (80097fc <FLASH_Write_Word_F+0x50>)
 80097d2:	f043 0301 	orr.w	r3, r3, #1
 80097d6:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 80097de:	f7ff ffb5 	bl	800974c <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 80097e2:	4b06      	ldr	r3, [pc, #24]	; (80097fc <FLASH_Write_Word_F+0x50>)
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	4a05      	ldr	r2, [pc, #20]	; (80097fc <FLASH_Write_Word_F+0x50>)
 80097e8:	f023 0301 	bic.w	r3, r3, #1
 80097ec:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 80097ee:	f7ff ff9d 	bl	800972c <FLASH_Lock>
}
 80097f2:	bf00      	nop
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	40023c00 	.word	0x40023c00

08009800 <FLASH_ReadData>:

	FLASH_Lock();
}*/

void FLASH_ReadData(uint32_t address, uint32_t* data, uint32_t size)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
  memcpy(data, (uint32_t*)address, size);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	4619      	mov	r1, r3
 8009812:	68b8      	ldr	r0, [r7, #8]
 8009814:	f00c fa64 	bl	8015ce0 <memcpy>
  //memcpy(コピー先のメモリブロック、コピー元のメモリブロック、コピーバイト数)
}
 8009818:	bf00      	nop
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <read_byte>:
#include "ICM_20648.h"

volatile int16_t	xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800982a:	79fb      	ldrb	r3, [r7, #7]
 800982c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009830:	b2db      	uxtb	r3, r3
 8009832:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8009834:	2200      	movs	r2, #0
 8009836:	2104      	movs	r1, #4
 8009838:	480d      	ldr	r0, [pc, #52]	; (8009870 <read_byte+0x50>)
 800983a:	f009 f80d 	bl	8012858 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800983e:	f107 010f 	add.w	r1, r7, #15
 8009842:	2364      	movs	r3, #100	; 0x64
 8009844:	2201      	movs	r2, #1
 8009846:	480b      	ldr	r0, [pc, #44]	; (8009874 <read_byte+0x54>)
 8009848:	f009 fce6 	bl	8013218 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800984c:	f107 010e 	add.w	r1, r7, #14
 8009850:	2364      	movs	r3, #100	; 0x64
 8009852:	2201      	movs	r2, #1
 8009854:	4807      	ldr	r0, [pc, #28]	; (8009874 <read_byte+0x54>)
 8009856:	f009 fe13 	bl	8013480 <HAL_SPI_Receive>
	CS_SET;
 800985a:	2201      	movs	r2, #1
 800985c:	2104      	movs	r1, #4
 800985e:	4804      	ldr	r0, [pc, #16]	; (8009870 <read_byte+0x50>)
 8009860:	f008 fffa 	bl	8012858 <HAL_GPIO_WritePin>

	return val;
 8009864:	7bbb      	ldrb	r3, [r7, #14]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	40020c00 	.word	0x40020c00
 8009874:	2001851c 	.word	0x2001851c

08009878 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	4603      	mov	r3, r0
 8009880:	460a      	mov	r2, r1
 8009882:	71fb      	strb	r3, [r7, #7]
 8009884:	4613      	mov	r3, r2
 8009886:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8009888:	79fb      	ldrb	r3, [r7, #7]
 800988a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800988e:	b2db      	uxtb	r3, r3
 8009890:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8009892:	2200      	movs	r2, #0
 8009894:	2104      	movs	r1, #4
 8009896:	480c      	ldr	r0, [pc, #48]	; (80098c8 <write_byte+0x50>)
 8009898:	f008 ffde 	bl	8012858 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800989c:	f107 010f 	add.w	r1, r7, #15
 80098a0:	2364      	movs	r3, #100	; 0x64
 80098a2:	2201      	movs	r2, #1
 80098a4:	4809      	ldr	r0, [pc, #36]	; (80098cc <write_byte+0x54>)
 80098a6:	f009 fcb7 	bl	8013218 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 80098aa:	1db9      	adds	r1, r7, #6
 80098ac:	2364      	movs	r3, #100	; 0x64
 80098ae:	2201      	movs	r2, #1
 80098b0:	4806      	ldr	r0, [pc, #24]	; (80098cc <write_byte+0x54>)
 80098b2:	f009 fcb1 	bl	8013218 <HAL_SPI_Transmit>
	CS_SET;
 80098b6:	2201      	movs	r2, #1
 80098b8:	2104      	movs	r1, #4
 80098ba:	4803      	ldr	r0, [pc, #12]	; (80098c8 <write_byte+0x50>)
 80098bc:	f008 ffcc 	bl	8012858 <HAL_GPIO_WritePin>
}
 80098c0:	bf00      	nop
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	40020c00 	.word	0x40020c00
 80098cc:	2001851c 	.word	0x2001851c

080098d0 <IMU_init>:

uint8_t IMU_init() {
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80098d6:	2000      	movs	r0, #0
 80098d8:	f7ff ffa2 	bl	8009820 <read_byte>
 80098dc:	4603      	mov	r3, r0
 80098de:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 80098e0:	79bb      	ldrb	r3, [r7, #6]
 80098e2:	2be0      	cmp	r3, #224	; 0xe0
 80098e4:	d119      	bne.n	800991a <IMU_init+0x4a>
		ret = 1;
 80098e6:	2301      	movs	r3, #1
 80098e8:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80098ea:	2101      	movs	r1, #1
 80098ec:	2006      	movs	r0, #6
 80098ee:	f7ff ffc3 	bl	8009878 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80098f2:	2110      	movs	r1, #16
 80098f4:	2003      	movs	r0, #3
 80098f6:	f7ff ffbf 	bl	8009878 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80098fa:	2120      	movs	r1, #32
 80098fc:	207f      	movs	r0, #127	; 0x7f
 80098fe:	f7ff ffbb 	bl	8009878 <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 8009902:	2117      	movs	r1, #23
 8009904:	2001      	movs	r0, #1
 8009906:	f7ff ffb7 	bl	8009878 <write_byte>

		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//	レンジ±16g
 800990a:	2106      	movs	r1, #6
 800990c:	2014      	movs	r0, #20
 800990e:	f7ff ffb3 	bl	8009878 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8009912:	2100      	movs	r1, #0
 8009914:	207f      	movs	r0, #127	; 0x7f
 8009916:	f7ff ffaf 	bl	8009878 <write_byte>
	}
	return ret;
 800991a:	79fb      	ldrb	r3, [r7, #7]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <read_gyro_data>:

void read_gyro_data() {
 8009924:	b598      	push	{r3, r4, r7, lr}
 8009926:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8009928:	2033      	movs	r0, #51	; 0x33
 800992a:	f7ff ff79 	bl	8009820 <read_byte>
 800992e:	4603      	mov	r3, r0
 8009930:	021b      	lsls	r3, r3, #8
 8009932:	b21c      	sxth	r4, r3
 8009934:	2034      	movs	r0, #52	; 0x34
 8009936:	f7ff ff73 	bl	8009820 <read_byte>
 800993a:	4603      	mov	r3, r0
 800993c:	b21b      	sxth	r3, r3
 800993e:	4323      	orrs	r3, r4
 8009940:	b21a      	sxth	r2, r3
 8009942:	4b11      	ldr	r3, [pc, #68]	; (8009988 <read_gyro_data+0x64>)
 8009944:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8009946:	2035      	movs	r0, #53	; 0x35
 8009948:	f7ff ff6a 	bl	8009820 <read_byte>
 800994c:	4603      	mov	r3, r0
 800994e:	021b      	lsls	r3, r3, #8
 8009950:	b21c      	sxth	r4, r3
 8009952:	2036      	movs	r0, #54	; 0x36
 8009954:	f7ff ff64 	bl	8009820 <read_byte>
 8009958:	4603      	mov	r3, r0
 800995a:	b21b      	sxth	r3, r3
 800995c:	4323      	orrs	r3, r4
 800995e:	b21a      	sxth	r2, r3
 8009960:	4b0a      	ldr	r3, [pc, #40]	; (800998c <read_gyro_data+0x68>)
 8009962:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8009964:	2037      	movs	r0, #55	; 0x37
 8009966:	f7ff ff5b 	bl	8009820 <read_byte>
 800996a:	4603      	mov	r3, r0
 800996c:	021b      	lsls	r3, r3, #8
 800996e:	b21c      	sxth	r4, r3
 8009970:	2038      	movs	r0, #56	; 0x38
 8009972:	f7ff ff55 	bl	8009820 <read_byte>
 8009976:	4603      	mov	r3, r0
 8009978:	b21b      	sxth	r3, r3
 800997a:	4323      	orrs	r3, r4
 800997c:	b21a      	sxth	r2, r3
 800997e:	4b04      	ldr	r3, [pc, #16]	; (8009990 <read_gyro_data+0x6c>)
 8009980:	801a      	strh	r2, [r3, #0]
}
 8009982:	bf00      	nop
 8009984:	bd98      	pop	{r3, r4, r7, pc}
 8009986:	bf00      	nop
 8009988:	200183a6 	.word	0x200183a6
 800998c:	200183a4 	.word	0x200183a4
 8009990:	2001839e 	.word	0x2001839e

08009994 <read_accel_data>:

void read_accel_data() {
 8009994:	b598      	push	{r3, r4, r7, lr}
 8009996:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8009998:	202d      	movs	r0, #45	; 0x2d
 800999a:	f7ff ff41 	bl	8009820 <read_byte>
 800999e:	4603      	mov	r3, r0
 80099a0:	021b      	lsls	r3, r3, #8
 80099a2:	b21c      	sxth	r4, r3
 80099a4:	202e      	movs	r0, #46	; 0x2e
 80099a6:	f7ff ff3b 	bl	8009820 <read_byte>
 80099aa:	4603      	mov	r3, r0
 80099ac:	b21b      	sxth	r3, r3
 80099ae:	4323      	orrs	r3, r4
 80099b0:	b21a      	sxth	r2, r3
 80099b2:	4b11      	ldr	r3, [pc, #68]	; (80099f8 <read_accel_data+0x64>)
 80099b4:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 80099b6:	202f      	movs	r0, #47	; 0x2f
 80099b8:	f7ff ff32 	bl	8009820 <read_byte>
 80099bc:	4603      	mov	r3, r0
 80099be:	021b      	lsls	r3, r3, #8
 80099c0:	b21c      	sxth	r4, r3
 80099c2:	2030      	movs	r0, #48	; 0x30
 80099c4:	f7ff ff2c 	bl	8009820 <read_byte>
 80099c8:	4603      	mov	r3, r0
 80099ca:	b21b      	sxth	r3, r3
 80099cc:	4323      	orrs	r3, r4
 80099ce:	b21a      	sxth	r2, r3
 80099d0:	4b0a      	ldr	r3, [pc, #40]	; (80099fc <read_accel_data+0x68>)
 80099d2:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 80099d4:	2031      	movs	r0, #49	; 0x31
 80099d6:	f7ff ff23 	bl	8009820 <read_byte>
 80099da:	4603      	mov	r3, r0
 80099dc:	021b      	lsls	r3, r3, #8
 80099de:	b21c      	sxth	r4, r3
 80099e0:	2032      	movs	r0, #50	; 0x32
 80099e2:	f7ff ff1d 	bl	8009820 <read_byte>
 80099e6:	4603      	mov	r3, r0
 80099e8:	b21b      	sxth	r3, r3
 80099ea:	4323      	orrs	r3, r4
 80099ec:	b21a      	sxth	r2, r3
 80099ee:	4b04      	ldr	r3, [pc, #16]	; (8009a00 <read_accel_data+0x6c>)
 80099f0:	801a      	strh	r2, [r3, #0]
}
 80099f2:	bf00      	nop
 80099f4:	bd98      	pop	{r3, r4, r7, pc}
 80099f6:	bf00      	nop
 80099f8:	200183a2 	.word	0x200183a2
 80099fc:	200183a8 	.word	0x200183a8
 8009a00:	200183a0 	.word	0x200183a0

08009a04 <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8009a0c:	1d39      	adds	r1, r7, #4
 8009a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a12:	2201      	movs	r2, #1
 8009a14:	4803      	ldr	r0, [pc, #12]	; (8009a24 <__io_putchar+0x20>)
 8009a16:	f00b fc8f 	bl	8015338 <HAL_UART_Transmit>
	return ch;
 8009a1a:	687b      	ldr	r3, [r7, #4]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	200185c8 	.word	0x200185c8

08009a28 <Motor_Count_Clear>:
	*R_counter = round(567 * R_Volt);
	*L_counter = round(567 * L_Volt);

}

void Motor_Count_Clear(){
 8009a28:	b480      	push	{r7}
 8009a2a:	af00      	add	r7, sp, #0
	 L_motor = L_v_control =  L_wall = L_leftwall = L_rightwall = L_rotate = L_angular_velocity = L_env_control = L_velo_control = 0;
 8009a2c:	4b2d      	ldr	r3, [pc, #180]	; (8009ae4 <Motor_Count_Clear+0xbc>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	801a      	strh	r2, [r3, #0]
 8009a32:	4b2c      	ldr	r3, [pc, #176]	; (8009ae4 <Motor_Count_Clear+0xbc>)
 8009a34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a38:	4b2b      	ldr	r3, [pc, #172]	; (8009ae8 <Motor_Count_Clear+0xc0>)
 8009a3a:	801a      	strh	r2, [r3, #0]
 8009a3c:	4b2a      	ldr	r3, [pc, #168]	; (8009ae8 <Motor_Count_Clear+0xc0>)
 8009a3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a42:	4b2a      	ldr	r3, [pc, #168]	; (8009aec <Motor_Count_Clear+0xc4>)
 8009a44:	801a      	strh	r2, [r3, #0]
 8009a46:	4b29      	ldr	r3, [pc, #164]	; (8009aec <Motor_Count_Clear+0xc4>)
 8009a48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a4c:	4b28      	ldr	r3, [pc, #160]	; (8009af0 <Motor_Count_Clear+0xc8>)
 8009a4e:	801a      	strh	r2, [r3, #0]
 8009a50:	4b27      	ldr	r3, [pc, #156]	; (8009af0 <Motor_Count_Clear+0xc8>)
 8009a52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a56:	4b27      	ldr	r3, [pc, #156]	; (8009af4 <Motor_Count_Clear+0xcc>)
 8009a58:	801a      	strh	r2, [r3, #0]
 8009a5a:	4b26      	ldr	r3, [pc, #152]	; (8009af4 <Motor_Count_Clear+0xcc>)
 8009a5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a60:	4b25      	ldr	r3, [pc, #148]	; (8009af8 <Motor_Count_Clear+0xd0>)
 8009a62:	801a      	strh	r2, [r3, #0]
 8009a64:	4b24      	ldr	r3, [pc, #144]	; (8009af8 <Motor_Count_Clear+0xd0>)
 8009a66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a6a:	4b24      	ldr	r3, [pc, #144]	; (8009afc <Motor_Count_Clear+0xd4>)
 8009a6c:	801a      	strh	r2, [r3, #0]
 8009a6e:	4b23      	ldr	r3, [pc, #140]	; (8009afc <Motor_Count_Clear+0xd4>)
 8009a70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a74:	4b22      	ldr	r3, [pc, #136]	; (8009b00 <Motor_Count_Clear+0xd8>)
 8009a76:	801a      	strh	r2, [r3, #0]
 8009a78:	4b21      	ldr	r3, [pc, #132]	; (8009b00 <Motor_Count_Clear+0xd8>)
 8009a7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a7e:	4b21      	ldr	r3, [pc, #132]	; (8009b04 <Motor_Count_Clear+0xdc>)
 8009a80:	801a      	strh	r2, [r3, #0]
	 R_motor = R_v_control = R_wall = R_leftwall = R_rightwall = R_rotate = R_angular_velocity = R_env_control = R_velo_control = 0;
 8009a82:	4b21      	ldr	r3, [pc, #132]	; (8009b08 <Motor_Count_Clear+0xe0>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	801a      	strh	r2, [r3, #0]
 8009a88:	4b1f      	ldr	r3, [pc, #124]	; (8009b08 <Motor_Count_Clear+0xe0>)
 8009a8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a8e:	4b1f      	ldr	r3, [pc, #124]	; (8009b0c <Motor_Count_Clear+0xe4>)
 8009a90:	801a      	strh	r2, [r3, #0]
 8009a92:	4b1e      	ldr	r3, [pc, #120]	; (8009b0c <Motor_Count_Clear+0xe4>)
 8009a94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a98:	4b1d      	ldr	r3, [pc, #116]	; (8009b10 <Motor_Count_Clear+0xe8>)
 8009a9a:	801a      	strh	r2, [r3, #0]
 8009a9c:	4b1c      	ldr	r3, [pc, #112]	; (8009b10 <Motor_Count_Clear+0xe8>)
 8009a9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009aa2:	4b1c      	ldr	r3, [pc, #112]	; (8009b14 <Motor_Count_Clear+0xec>)
 8009aa4:	801a      	strh	r2, [r3, #0]
 8009aa6:	4b1b      	ldr	r3, [pc, #108]	; (8009b14 <Motor_Count_Clear+0xec>)
 8009aa8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009aac:	4b1a      	ldr	r3, [pc, #104]	; (8009b18 <Motor_Count_Clear+0xf0>)
 8009aae:	801a      	strh	r2, [r3, #0]
 8009ab0:	4b19      	ldr	r3, [pc, #100]	; (8009b18 <Motor_Count_Clear+0xf0>)
 8009ab2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009ab6:	4b19      	ldr	r3, [pc, #100]	; (8009b1c <Motor_Count_Clear+0xf4>)
 8009ab8:	801a      	strh	r2, [r3, #0]
 8009aba:	4b18      	ldr	r3, [pc, #96]	; (8009b1c <Motor_Count_Clear+0xf4>)
 8009abc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009ac0:	4b17      	ldr	r3, [pc, #92]	; (8009b20 <Motor_Count_Clear+0xf8>)
 8009ac2:	801a      	strh	r2, [r3, #0]
 8009ac4:	4b16      	ldr	r3, [pc, #88]	; (8009b20 <Motor_Count_Clear+0xf8>)
 8009ac6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009aca:	4b16      	ldr	r3, [pc, #88]	; (8009b24 <Motor_Count_Clear+0xfc>)
 8009acc:	801a      	strh	r2, [r3, #0]
 8009ace:	4b15      	ldr	r3, [pc, #84]	; (8009b24 <Motor_Count_Clear+0xfc>)
 8009ad0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009ad4:	4b14      	ldr	r3, [pc, #80]	; (8009b28 <Motor_Count_Clear+0x100>)
 8009ad6:	801a      	strh	r2, [r3, #0]
}
 8009ad8:	bf00      	nop
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	20018392 	.word	0x20018392
 8009ae8:	2001836e 	.word	0x2001836e
 8009aec:	20018382 	.word	0x20018382
 8009af0:	20018388 	.word	0x20018388
 8009af4:	2001836c 	.word	0x2001836c
 8009af8:	2001837a 	.word	0x2001837a
 8009afc:	20018390 	.word	0x20018390
 8009b00:	20018378 	.word	0x20018378
 8009b04:	20018fe0 	.word	0x20018fe0
 8009b08:	20018370 	.word	0x20018370
 8009b0c:	2001837c 	.word	0x2001837c
 8009b10:	20018386 	.word	0x20018386
 8009b14:	2001838a 	.word	0x2001838a
 8009b18:	20018384 	.word	0x20018384
 8009b1c:	2001839c 	.word	0x2001839c
 8009b20:	2001837e 	.word	0x2001837e
 8009b24:	20018380 	.word	0x20018380
 8009b28:	2001848c 	.word	0x2001848c

08009b2c <Tim_Count>:

void Tim_Count(){
 8009b2c:	b598      	push	{r3, r4, r7, lr}
 8009b2e:	af00      	add	r7, sp, #0


	if(mode.select%2 != 1){
 8009b30:	4b19      	ldr	r3, [pc, #100]	; (8009b98 <Tim_Count+0x6c>)
 8009b32:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f003 0301 	and.w	r3, r3, #1
 8009b3c:	bfb8      	it	lt
 8009b3e:	425b      	neglt	r3, r3
 8009b40:	b25b      	sxtb	r3, r3
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d025      	beq.n	8009b92 <Tim_Count+0x66>
		timer += 1;
 8009b46:	4b15      	ldr	r3, [pc, #84]	; (8009b9c <Tim_Count+0x70>)
 8009b48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b4c:	f04f 0200 	mov.w	r2, #0
 8009b50:	4b13      	ldr	r3, [pc, #76]	; (8009ba0 <Tim_Count+0x74>)
 8009b52:	f7fe fad3 	bl	80080fc <__adddf3>
 8009b56:	4603      	mov	r3, r0
 8009b58:	460c      	mov	r4, r1
 8009b5a:	4a10      	ldr	r2, [pc, #64]	; (8009b9c <Tim_Count+0x70>)
 8009b5c:	e9c2 3400 	strd	r3, r4, [r2]
		if(timer == 1000){
 8009b60:	4b0e      	ldr	r3, [pc, #56]	; (8009b9c <Tim_Count+0x70>)
 8009b62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b66:	f04f 0200 	mov.w	r2, #0
 8009b6a:	4b0e      	ldr	r3, [pc, #56]	; (8009ba4 <Tim_Count+0x78>)
 8009b6c:	f7fe fee4 	bl	8008938 <__aeabi_dcmpeq>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d100      	bne.n	8009b78 <Tim_Count+0x4c>
			self_timer ++;
		}
	}

}
 8009b76:	e00c      	b.n	8009b92 <Tim_Count+0x66>
			self_timer ++;
 8009b78:	4b0b      	ldr	r3, [pc, #44]	; (8009ba8 <Tim_Count+0x7c>)
 8009b7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b7e:	f04f 0200 	mov.w	r2, #0
 8009b82:	4b07      	ldr	r3, [pc, #28]	; (8009ba0 <Tim_Count+0x74>)
 8009b84:	f7fe faba 	bl	80080fc <__adddf3>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	4a06      	ldr	r2, [pc, #24]	; (8009ba8 <Tim_Count+0x7c>)
 8009b8e:	e9c2 3400 	strd	r3, r4, [r2]
}
 8009b92:	bf00      	nop
 8009b94:	bd98      	pop	{r3, r4, r7, pc}
 8009b96:	bf00      	nop
 8009b98:	20000068 	.word	0x20000068
 8009b9c:	200142d8 	.word	0x200142d8
 8009ba0:	3ff00000 	.word	0x3ff00000
 8009ba4:	408f4000 	.word	0x408f4000
 8009ba8:	200142d0 	.word	0x200142d0

08009bac <map_init>:

void map_init(){
 8009bac:	b4b0      	push	{r4, r5, r7}
 8009bae:	af00      	add	r7, sp, #0
	static int i = 0, j=0;

	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009bb0:	4b3c      	ldr	r3, [pc, #240]	; (8009ca4 <map_init+0xf8>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	601a      	str	r2, [r3, #0]
 8009bb6:	e06c      	b.n	8009c92 <map_init+0xe6>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009bb8:	4b3b      	ldr	r3, [pc, #236]	; (8009ca8 <map_init+0xfc>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	601a      	str	r2, [r3, #0]
 8009bbe:	e05f      	b.n	8009c80 <map_init+0xd4>
			wall[i][j].north
			= wall[i][j].east
			= wall[i][j].south
			= wall[i][j].west = UNKNOWN;
 8009bc0:	4b38      	ldr	r3, [pc, #224]	; (8009ca4 <map_init+0xf8>)
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	4b38      	ldr	r3, [pc, #224]	; (8009ca8 <map_init+0xfc>)
 8009bc6:	6818      	ldr	r0, [r3, #0]
 8009bc8:	4c38      	ldr	r4, [pc, #224]	; (8009cac <map_init+0x100>)
 8009bca:	4613      	mov	r3, r2
 8009bcc:	00db      	lsls	r3, r3, #3
 8009bce:	4413      	add	r3, r2
 8009bd0:	1819      	adds	r1, r3, r0
 8009bd2:	f814 3011 	ldrb.w	r3, [r4, r1, lsl #1]
 8009bd6:	2502      	movs	r5, #2
 8009bd8:	f365 1387 	bfi	r3, r5, #6, #2
 8009bdc:	f804 3011 	strb.w	r3, [r4, r1, lsl #1]
			= wall[i][j].south
 8009be0:	4b30      	ldr	r3, [pc, #192]	; (8009ca4 <map_init+0xf8>)
 8009be2:	6819      	ldr	r1, [r3, #0]
 8009be4:	4b30      	ldr	r3, [pc, #192]	; (8009ca8 <map_init+0xfc>)
 8009be6:	681c      	ldr	r4, [r3, #0]
			= wall[i][j].west = UNKNOWN;
 8009be8:	4d30      	ldr	r5, [pc, #192]	; (8009cac <map_init+0x100>)
 8009bea:	4613      	mov	r3, r2
 8009bec:	00db      	lsls	r3, r3, #3
 8009bee:	4413      	add	r3, r2
 8009bf0:	4403      	add	r3, r0
 8009bf2:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 8009bf6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009bfa:	b2dd      	uxtb	r5, r3
 8009bfc:	482b      	ldr	r0, [pc, #172]	; (8009cac <map_init+0x100>)
 8009bfe:	460b      	mov	r3, r1
 8009c00:	00db      	lsls	r3, r3, #3
 8009c02:	440b      	add	r3, r1
 8009c04:	191a      	adds	r2, r3, r4
 8009c06:	f810 3012 	ldrb.w	r3, [r0, r2, lsl #1]
 8009c0a:	f365 1305 	bfi	r3, r5, #4, #2
 8009c0e:	f800 3012 	strb.w	r3, [r0, r2, lsl #1]
			= wall[i][j].east
 8009c12:	4b24      	ldr	r3, [pc, #144]	; (8009ca4 <map_init+0xf8>)
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	4b24      	ldr	r3, [pc, #144]	; (8009ca8 <map_init+0xfc>)
 8009c18:	6818      	ldr	r0, [r3, #0]
			= wall[i][j].south
 8009c1a:	4d24      	ldr	r5, [pc, #144]	; (8009cac <map_init+0x100>)
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	440b      	add	r3, r1
 8009c22:	4423      	add	r3, r4
 8009c24:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 8009c28:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009c2c:	b2dd      	uxtb	r5, r3
 8009c2e:	4c1f      	ldr	r4, [pc, #124]	; (8009cac <map_init+0x100>)
 8009c30:	4613      	mov	r3, r2
 8009c32:	00db      	lsls	r3, r3, #3
 8009c34:	4413      	add	r3, r2
 8009c36:	1819      	adds	r1, r3, r0
 8009c38:	f814 3011 	ldrb.w	r3, [r4, r1, lsl #1]
 8009c3c:	f365 0383 	bfi	r3, r5, #2, #2
 8009c40:	f804 3011 	strb.w	r3, [r4, r1, lsl #1]
			wall[i][j].north
 8009c44:	4b17      	ldr	r3, [pc, #92]	; (8009ca4 <map_init+0xf8>)
 8009c46:	681c      	ldr	r4, [r3, #0]
 8009c48:	4b17      	ldr	r3, [pc, #92]	; (8009ca8 <map_init+0xfc>)
 8009c4a:	681d      	ldr	r5, [r3, #0]
			= wall[i][j].east
 8009c4c:	4917      	ldr	r1, [pc, #92]	; (8009cac <map_init+0x100>)
 8009c4e:	4613      	mov	r3, r2
 8009c50:	00db      	lsls	r3, r3, #3
 8009c52:	4413      	add	r3, r2
 8009c54:	4403      	add	r3, r0
 8009c56:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009c5a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009c5e:	b2d8      	uxtb	r0, r3
 8009c60:	4912      	ldr	r1, [pc, #72]	; (8009cac <map_init+0x100>)
 8009c62:	4623      	mov	r3, r4
 8009c64:	00db      	lsls	r3, r3, #3
 8009c66:	4423      	add	r3, r4
 8009c68:	195a      	adds	r2, r3, r5
 8009c6a:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 8009c6e:	f360 0301 	bfi	r3, r0, #0, #2
 8009c72:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009c76:	4b0c      	ldr	r3, [pc, #48]	; (8009ca8 <map_init+0xfc>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	4a0a      	ldr	r2, [pc, #40]	; (8009ca8 <map_init+0xfc>)
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	4b09      	ldr	r3, [pc, #36]	; (8009ca8 <map_init+0xfc>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b08      	cmp	r3, #8
 8009c86:	dd9b      	ble.n	8009bc0 <map_init+0x14>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009c88:	4b06      	ldr	r3, [pc, #24]	; (8009ca4 <map_init+0xf8>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	4a05      	ldr	r2, [pc, #20]	; (8009ca4 <map_init+0xf8>)
 8009c90:	6013      	str	r3, [r2, #0]
 8009c92:	4b04      	ldr	r3, [pc, #16]	; (8009ca4 <map_init+0xf8>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b08      	cmp	r3, #8
 8009c98:	dd8e      	ble.n	8009bb8 <map_init+0xc>

		}

	}
}
 8009c9a:	bf00      	nop
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bcb0      	pop	{r4, r5, r7}
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	20018308 	.word	0x20018308
 8009ca8:	2001830c 	.word	0x2001830c
 8009cac:	20018efc 	.word	0x20018efc

08009cb0 <mapcopy>:

void mapcopy(){
 8009cb0:	b490      	push	{r4, r7}
 8009cb2:	af00      	add	r7, sp, #0
		}

	}
#endif

	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009cb4:	4b4f      	ldr	r3, [pc, #316]	; (8009df4 <mapcopy+0x144>)
 8009cb6:	2208      	movs	r2, #8
 8009cb8:	601a      	str	r2, [r3, #0]
 8009cba:	e065      	b.n	8009d88 <mapcopy+0xd8>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009cbc:	4b4e      	ldr	r3, [pc, #312]	; (8009df8 <mapcopy+0x148>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]
 8009cc2:	e058      	b.n	8009d76 <mapcopy+0xc6>
			work_ram[k] = wall[i][j].north;
 8009cc4:	4b4c      	ldr	r3, [pc, #304]	; (8009df8 <mapcopy+0x148>)
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	4b4a      	ldr	r3, [pc, #296]	; (8009df4 <mapcopy+0x144>)
 8009cca:	6819      	ldr	r1, [r3, #0]
 8009ccc:	484b      	ldr	r0, [pc, #300]	; (8009dfc <mapcopy+0x14c>)
 8009cce:	4613      	mov	r3, r2
 8009cd0:	00db      	lsls	r3, r3, #3
 8009cd2:	4413      	add	r3, r2
 8009cd4:	440b      	add	r3, r1
 8009cd6:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8009cda:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	4b47      	ldr	r3, [pc, #284]	; (8009e00 <mapcopy+0x150>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	4a47      	ldr	r2, [pc, #284]	; (8009e04 <mapcopy+0x154>)
 8009ce8:	54d1      	strb	r1, [r2, r3]
			work_ram[k+1] = wall[i][j].east;
 8009cea:	4b43      	ldr	r3, [pc, #268]	; (8009df8 <mapcopy+0x148>)
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	4b41      	ldr	r3, [pc, #260]	; (8009df4 <mapcopy+0x144>)
 8009cf0:	6819      	ldr	r1, [r3, #0]
 8009cf2:	4842      	ldr	r0, [pc, #264]	; (8009dfc <mapcopy+0x14c>)
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	00db      	lsls	r3, r3, #3
 8009cf8:	4413      	add	r3, r2
 8009cfa:	440b      	add	r3, r1
 8009cfc:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8009d00:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	4b3e      	ldr	r3, [pc, #248]	; (8009e00 <mapcopy+0x150>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	4a3d      	ldr	r2, [pc, #244]	; (8009e04 <mapcopy+0x154>)
 8009d10:	54d1      	strb	r1, [r2, r3]
			work_ram[k+2] = wall[i][j].south;
 8009d12:	4b39      	ldr	r3, [pc, #228]	; (8009df8 <mapcopy+0x148>)
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	4b37      	ldr	r3, [pc, #220]	; (8009df4 <mapcopy+0x144>)
 8009d18:	6819      	ldr	r1, [r3, #0]
 8009d1a:	4838      	ldr	r0, [pc, #224]	; (8009dfc <mapcopy+0x14c>)
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	00db      	lsls	r3, r3, #3
 8009d20:	4413      	add	r3, r2
 8009d22:	440b      	add	r3, r1
 8009d24:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8009d28:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	4b34      	ldr	r3, [pc, #208]	; (8009e00 <mapcopy+0x150>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3302      	adds	r3, #2
 8009d34:	4611      	mov	r1, r2
 8009d36:	4a33      	ldr	r2, [pc, #204]	; (8009e04 <mapcopy+0x154>)
 8009d38:	54d1      	strb	r1, [r2, r3]
			work_ram[k+3] = wall[i][j].west;
 8009d3a:	4b2f      	ldr	r3, [pc, #188]	; (8009df8 <mapcopy+0x148>)
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	4b2d      	ldr	r3, [pc, #180]	; (8009df4 <mapcopy+0x144>)
 8009d40:	6819      	ldr	r1, [r3, #0]
 8009d42:	482e      	ldr	r0, [pc, #184]	; (8009dfc <mapcopy+0x14c>)
 8009d44:	4613      	mov	r3, r2
 8009d46:	00db      	lsls	r3, r3, #3
 8009d48:	4413      	add	r3, r2
 8009d4a:	440b      	add	r3, r1
 8009d4c:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8009d50:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	4b2a      	ldr	r3, [pc, #168]	; (8009e00 <mapcopy+0x150>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3303      	adds	r3, #3
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	4a29      	ldr	r2, [pc, #164]	; (8009e04 <mapcopy+0x154>)
 8009d60:	54d1      	strb	r1, [r2, r3]
			k+=4;
 8009d62:	4b27      	ldr	r3, [pc, #156]	; (8009e00 <mapcopy+0x150>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3304      	adds	r3, #4
 8009d68:	4a25      	ldr	r2, [pc, #148]	; (8009e00 <mapcopy+0x150>)
 8009d6a:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009d6c:	4b22      	ldr	r3, [pc, #136]	; (8009df8 <mapcopy+0x148>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	3301      	adds	r3, #1
 8009d72:	4a21      	ldr	r2, [pc, #132]	; (8009df8 <mapcopy+0x148>)
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	4b20      	ldr	r3, [pc, #128]	; (8009df8 <mapcopy+0x148>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b08      	cmp	r3, #8
 8009d7c:	dda2      	ble.n	8009cc4 <mapcopy+0x14>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009d7e:	4b1d      	ldr	r3, [pc, #116]	; (8009df4 <mapcopy+0x144>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	3b01      	subs	r3, #1
 8009d84:	4a1b      	ldr	r2, [pc, #108]	; (8009df4 <mapcopy+0x144>)
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	4b1a      	ldr	r3, [pc, #104]	; (8009df4 <mapcopy+0x144>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	da95      	bge.n	8009cbc <mapcopy+0xc>
		//�?��?は4*NOS*NOS番目 - 1 まで?��?ま?��?
		//kは60まで行ったあと?��?4*NOS*NOS になって値が�??��らず終わ?��?

	}

	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009d90:	4b18      	ldr	r3, [pc, #96]	; (8009df4 <mapcopy+0x144>)
 8009d92:	2208      	movs	r2, #8
 8009d94:	601a      	str	r2, [r3, #0]
 8009d96:	e025      	b.n	8009de4 <mapcopy+0x134>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009d98:	4b17      	ldr	r3, [pc, #92]	; (8009df8 <mapcopy+0x148>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	e018      	b.n	8009dd2 <mapcopy+0x122>
			work_ram[k] = walk_map[i][j];
 8009da0:	4b15      	ldr	r3, [pc, #84]	; (8009df8 <mapcopy+0x148>)
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	4b13      	ldr	r3, [pc, #76]	; (8009df4 <mapcopy+0x144>)
 8009da6:	6818      	ldr	r0, [r3, #0]
 8009da8:	4b15      	ldr	r3, [pc, #84]	; (8009e00 <mapcopy+0x150>)
 8009daa:	6819      	ldr	r1, [r3, #0]
 8009dac:	4c16      	ldr	r4, [pc, #88]	; (8009e08 <mapcopy+0x158>)
 8009dae:	4613      	mov	r3, r2
 8009db0:	00db      	lsls	r3, r3, #3
 8009db2:	4413      	add	r3, r2
 8009db4:	4423      	add	r3, r4
 8009db6:	4403      	add	r3, r0
 8009db8:	781a      	ldrb	r2, [r3, #0]
 8009dba:	4b12      	ldr	r3, [pc, #72]	; (8009e04 <mapcopy+0x154>)
 8009dbc:	545a      	strb	r2, [r3, r1]
			k+=1;
 8009dbe:	4b10      	ldr	r3, [pc, #64]	; (8009e00 <mapcopy+0x150>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	4a0e      	ldr	r2, [pc, #56]	; (8009e00 <mapcopy+0x150>)
 8009dc6:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009dc8:	4b0b      	ldr	r3, [pc, #44]	; (8009df8 <mapcopy+0x148>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	4a0a      	ldr	r2, [pc, #40]	; (8009df8 <mapcopy+0x148>)
 8009dd0:	6013      	str	r3, [r2, #0]
 8009dd2:	4b09      	ldr	r3, [pc, #36]	; (8009df8 <mapcopy+0x148>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b08      	cmp	r3, #8
 8009dd8:	dde2      	ble.n	8009da0 <mapcopy+0xf0>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009dda:	4b06      	ldr	r3, [pc, #24]	; (8009df4 <mapcopy+0x144>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	4a04      	ldr	r2, [pc, #16]	; (8009df4 <mapcopy+0x144>)
 8009de2:	6013      	str	r3, [r2, #0]
 8009de4:	4b03      	ldr	r3, [pc, #12]	; (8009df4 <mapcopy+0x144>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	dad5      	bge.n	8009d98 <mapcopy+0xe8>
//	if(i <= 10){
//		work_ram[i][0] = wall[1][1].east;
//		i++;
//	}
//wall[4][4].south = 64? why
}
 8009dec:	bf00      	nop
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bc90      	pop	{r4, r7}
 8009df2:	4770      	bx	lr
 8009df4:	20018310 	.word	0x20018310
 8009df8:	20018314 	.word	0x20018314
 8009dfc:	20018efc 	.word	0x20018efc
 8009e00:	20018318 	.word	0x20018318
 8009e04:	20014308 	.word	0x20014308
 8009e08:	20018a54 	.word	0x20018a54

08009e0c <mapprint>:

void mapprint(){
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	af00      	add	r7, sp, #0

	static int i = 0, j=0,k=0;
#if 1
	//迷路?��?報
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009e10:	4b48      	ldr	r3, [pc, #288]	; (8009f34 <mapprint+0x128>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	e053      	b.n	8009ec0 <mapprint+0xb4>
		for(j=0; j < NUMBER_OF_SQUARES * 4; j++){
 8009e18:	4b47      	ldr	r3, [pc, #284]	; (8009f38 <mapprint+0x12c>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	e043      	b.n	8009ea8 <mapprint+0x9c>
			printf("%u",work_ram[k]);
 8009e20:	4b46      	ldr	r3, [pc, #280]	; (8009f3c <mapprint+0x130>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a46      	ldr	r2, [pc, #280]	; (8009f40 <mapprint+0x134>)
 8009e26:	5cd3      	ldrb	r3, [r2, r3]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4846      	ldr	r0, [pc, #280]	; (8009f44 <mapprint+0x138>)
 8009e2c:	f00c fbc8 	bl	80165c0 <iprintf>
			if((k+1)%(NUMBER_OF_SQUARES * 4) != 0){
 8009e30:	4b42      	ldr	r3, [pc, #264]	; (8009f3c <mapprint+0x130>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	1c59      	adds	r1, r3, #1
 8009e36:	4b44      	ldr	r3, [pc, #272]	; (8009f48 <mapprint+0x13c>)
 8009e38:	fb83 2301 	smull	r2, r3, r3, r1
 8009e3c:	10da      	asrs	r2, r3, #3
 8009e3e:	17cb      	asrs	r3, r1, #31
 8009e40:	1ad2      	subs	r2, r2, r3
 8009e42:	4613      	mov	r3, r2
 8009e44:	00db      	lsls	r3, r3, #3
 8009e46:	4413      	add	r3, r2
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	1aca      	subs	r2, r1, r3
 8009e4c:	2a00      	cmp	r2, #0
 8009e4e:	d00e      	beq.n	8009e6e <mapprint+0x62>
			if((k+1) >= 4 && (k+1)%4 == 0)
 8009e50:	4b3a      	ldr	r3, [pc, #232]	; (8009f3c <mapprint+0x130>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3301      	adds	r3, #1
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	dd09      	ble.n	8009e6e <mapprint+0x62>
 8009e5a:	4b38      	ldr	r3, [pc, #224]	; (8009f3c <mapprint+0x130>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	f003 0303 	and.w	r3, r3, #3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d102      	bne.n	8009e6e <mapprint+0x62>
				printf("  ");
 8009e68:	4838      	ldr	r0, [pc, #224]	; (8009f4c <mapprint+0x140>)
 8009e6a:	f00c fba9 	bl	80165c0 <iprintf>
			}
			if((k+1)%(NUMBER_OF_SQUARES * 4) == 0){
 8009e6e:	4b33      	ldr	r3, [pc, #204]	; (8009f3c <mapprint+0x130>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	1c59      	adds	r1, r3, #1
 8009e74:	4b34      	ldr	r3, [pc, #208]	; (8009f48 <mapprint+0x13c>)
 8009e76:	fb83 2301 	smull	r2, r3, r3, r1
 8009e7a:	10da      	asrs	r2, r3, #3
 8009e7c:	17cb      	asrs	r3, r1, #31
 8009e7e:	1ad2      	subs	r2, r2, r3
 8009e80:	4613      	mov	r3, r2
 8009e82:	00db      	lsls	r3, r3, #3
 8009e84:	4413      	add	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	1aca      	subs	r2, r1, r3
 8009e8a:	2a00      	cmp	r2, #0
 8009e8c:	d102      	bne.n	8009e94 <mapprint+0x88>
				printf("\r\n");
 8009e8e:	4830      	ldr	r0, [pc, #192]	; (8009f50 <mapprint+0x144>)
 8009e90:	f00c fc0a 	bl	80166a8 <puts>
			}
			k++;
 8009e94:	4b29      	ldr	r3, [pc, #164]	; (8009f3c <mapprint+0x130>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	4a28      	ldr	r2, [pc, #160]	; (8009f3c <mapprint+0x130>)
 8009e9c:	6013      	str	r3, [r2, #0]
		for(j=0; j < NUMBER_OF_SQUARES * 4; j++){
 8009e9e:	4b26      	ldr	r3, [pc, #152]	; (8009f38 <mapprint+0x12c>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	4a24      	ldr	r2, [pc, #144]	; (8009f38 <mapprint+0x12c>)
 8009ea6:	6013      	str	r3, [r2, #0]
 8009ea8:	4b23      	ldr	r3, [pc, #140]	; (8009f38 <mapprint+0x12c>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b23      	cmp	r3, #35	; 0x23
 8009eae:	ddb7      	ble.n	8009e20 <mapprint+0x14>
		}
		printf("\r\n");
 8009eb0:	4827      	ldr	r0, [pc, #156]	; (8009f50 <mapprint+0x144>)
 8009eb2:	f00c fbf9 	bl	80166a8 <puts>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009eb6:	4b1f      	ldr	r3, [pc, #124]	; (8009f34 <mapprint+0x128>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	4a1d      	ldr	r2, [pc, #116]	; (8009f34 <mapprint+0x128>)
 8009ebe:	6013      	str	r3, [r2, #0]
 8009ec0:	4b1c      	ldr	r3, [pc, #112]	; (8009f34 <mapprint+0x128>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b08      	cmp	r3, #8
 8009ec6:	dda7      	ble.n	8009e18 <mapprint+0xc>
	}

	printf("\r\n");
 8009ec8:	4821      	ldr	r0, [pc, #132]	; (8009f50 <mapprint+0x144>)
 8009eca:	f00c fbed 	bl	80166a8 <puts>
	printf("\r\n");
 8009ece:	4820      	ldr	r0, [pc, #128]	; (8009f50 <mapprint+0x144>)
 8009ed0:	f00c fbea 	bl	80166a8 <puts>


	//歩数マッ?��?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009ed4:	4b17      	ldr	r3, [pc, #92]	; (8009f34 <mapprint+0x128>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	601a      	str	r2, [r3, #0]
 8009eda:	e024      	b.n	8009f26 <mapprint+0x11a>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009edc:	4b16      	ldr	r3, [pc, #88]	; (8009f38 <mapprint+0x12c>)
 8009ede:	2200      	movs	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]
 8009ee2:	e011      	b.n	8009f08 <mapprint+0xfc>
			printf("%u  ",work_ram[k]);
 8009ee4:	4b15      	ldr	r3, [pc, #84]	; (8009f3c <mapprint+0x130>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a15      	ldr	r2, [pc, #84]	; (8009f40 <mapprint+0x134>)
 8009eea:	5cd3      	ldrb	r3, [r2, r3]
 8009eec:	4619      	mov	r1, r3
 8009eee:	4819      	ldr	r0, [pc, #100]	; (8009f54 <mapprint+0x148>)
 8009ef0:	f00c fb66 	bl	80165c0 <iprintf>
			k++;
 8009ef4:	4b11      	ldr	r3, [pc, #68]	; (8009f3c <mapprint+0x130>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	4a10      	ldr	r2, [pc, #64]	; (8009f3c <mapprint+0x130>)
 8009efc:	6013      	str	r3, [r2, #0]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009efe:	4b0e      	ldr	r3, [pc, #56]	; (8009f38 <mapprint+0x12c>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3301      	adds	r3, #1
 8009f04:	4a0c      	ldr	r2, [pc, #48]	; (8009f38 <mapprint+0x12c>)
 8009f06:	6013      	str	r3, [r2, #0]
 8009f08:	4b0b      	ldr	r3, [pc, #44]	; (8009f38 <mapprint+0x12c>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b08      	cmp	r3, #8
 8009f0e:	dde9      	ble.n	8009ee4 <mapprint+0xd8>
		}
		printf("\r\n");
 8009f10:	480f      	ldr	r0, [pc, #60]	; (8009f50 <mapprint+0x144>)
 8009f12:	f00c fbc9 	bl	80166a8 <puts>
		printf("\r\n");
 8009f16:	480e      	ldr	r0, [pc, #56]	; (8009f50 <mapprint+0x144>)
 8009f18:	f00c fbc6 	bl	80166a8 <puts>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009f1c:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <mapprint+0x128>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	3301      	adds	r3, #1
 8009f22:	4a04      	ldr	r2, [pc, #16]	; (8009f34 <mapprint+0x128>)
 8009f24:	6013      	str	r3, [r2, #0]
 8009f26:	4b03      	ldr	r3, [pc, #12]	; (8009f34 <mapprint+0x128>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b08      	cmp	r3, #8
 8009f2c:	ddd6      	ble.n	8009edc <mapprint+0xd0>
	}
#endif
//	for(int i=0; i <=10; i++)
//	printf("保存データ :: %d \r\n",work_ram[i][0]);

}
 8009f2e:	bf00      	nop
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	2001831c 	.word	0x2001831c
 8009f38:	20018320 	.word	0x20018320
 8009f3c:	20018324 	.word	0x20018324
 8009f40:	20014308 	.word	0x20014308
 8009f44:	08018420 	.word	0x08018420
 8009f48:	38e38e39 	.word	0x38e38e39
 8009f4c:	08018424 	.word	0x08018424
 8009f50:	08018428 	.word	0x08018428
 8009f54:	0801842c 	.word	0x0801842c

08009f58 <Flash_clear>:
// Flashのsectoe1を消去
bool Flash_clear()
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b088      	sub	sp, #32
 8009f5c:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8009f5e:	f008 f847 	bl	8011ff0 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8009f62:	2300      	movs	r3, #0
 8009f64:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 8009f66:	2301      	movs	r3, #1
 8009f68:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと???��?��??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 8009f72:	1d3a      	adds	r2, r7, #4
 8009f74:	f107 0308 	add.w	r3, r7, #8
 8009f78:	4611      	mov	r1, r2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f008 f998 	bl	80122b0 <HAL_FLASHEx_Erase>
 8009f80:	4603      	mov	r3, r0
 8009f82:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 8009f84:	f008 f856 	bl	8012034 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 8009f88:	7ffb      	ldrb	r3, [r7, #31]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d105      	bne.n	8009f9a <Flash_clear+0x42>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f94:	d101      	bne.n	8009f9a <Flash_clear+0x42>
 8009f96:	2301      	movs	r3, #1
 8009f98:	e000      	b.n	8009f9c <Flash_clear+0x44>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	f003 0301 	and.w	r3, r3, #1
 8009fa0:	b2db      	uxtb	r3, r3
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3720      	adds	r7, #32
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
	...

08009fac <Flash_load>:

// Flashのsector1のてwork_ramに読み出
// work_ramの先アドレスを返す
uint8_t* Flash_load() //uint8_t*
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);//BACKUP_FLASH_SECTOR_SIZE
 8009fb0:	4a05      	ldr	r2, [pc, #20]	; (8009fc8 <Flash_load+0x1c>)
 8009fb2:	4b06      	ldr	r3, [pc, #24]	; (8009fcc <Flash_load+0x20>)
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	f00b fe8f 	bl	8015ce0 <memcpy>
    return work_ram;
 8009fc2:	4b01      	ldr	r3, [pc, #4]	; (8009fc8 <Flash_load+0x1c>)
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	20014308 	.word	0x20014308
 8009fcc:	08004000 	.word	0x08004000

08009fd0 <Flash_store>:

// Flashのsector1を消去後�????��?��??��?��タを書き込
bool Flash_store()
{
 8009fd0:	b590      	push	{r4, r7, lr}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return false;
 8009fd6:	f7ff ffbf 	bl	8009f58 <Flash_clear>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	f083 0301 	eor.w	r3, r3, #1
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d001      	beq.n	8009fea <Flash_store+0x1a>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	e02f      	b.n	800a04a <Flash_store+0x7a>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 8009fea:	4b1a      	ldr	r3, [pc, #104]	; (800a054 <Flash_store+0x84>)
 8009fec:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 8009fee:	f007 ffff 	bl	8011ff0 <HAL_FLASH_Unlock>

    // work_ramにある4バイトごとまとめて書き込
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 8009ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ff6:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	60bb      	str	r3, [r7, #8]
 8009ffc:	e017      	b.n	800a02e <Flash_store+0x5e>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4a15      	ldr	r2, [pc, #84]	; (800a058 <Flash_store+0x88>)
        result = HAL_FLASH_Program(
 800a004:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	4413      	add	r3, r2
 800a00e:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 800a010:	f04f 0400 	mov.w	r4, #0
 800a014:	461a      	mov	r2, r3
 800a016:	4623      	mov	r3, r4
 800a018:	2002      	movs	r0, #2
 800a01a:	f007 fee1 	bl	8011de0 <HAL_FLASH_Program>
 800a01e:	4603      	mov	r3, r0
 800a020:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 800a022:	7bfb      	ldrb	r3, [r7, #15]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d107      	bne.n	800a038 <Flash_store+0x68>
    for (size_t i=0; i<write_cnt; i++)
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	3301      	adds	r3, #1
 800a02c:	60bb      	str	r3, [r7, #8]
 800a02e:	68ba      	ldr	r2, [r7, #8]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d3e3      	bcc.n	8009ffe <Flash_store+0x2e>
 800a036:	e000      	b.n	800a03a <Flash_store+0x6a>
        if (result != HAL_OK) break;
 800a038:	bf00      	nop
    }

    HAL_FLASH_Lock();
 800a03a:	f007 fffb 	bl	8012034 <HAL_FLASH_Lock>

    return result == HAL_OK;
 800a03e:	7bfb      	ldrb	r3, [r7, #15]
 800a040:	2b00      	cmp	r3, #0
 800a042:	bf0c      	ite	eq
 800a044:	2301      	moveq	r3, #1
 800a046:	2300      	movne	r3, #0
 800a048:	b2db      	uxtb	r3, r3
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd90      	pop	{r4, r7, pc}
 800a052:	bf00      	nop
 800a054:	20014308 	.word	0x20014308
 800a058:	08004000 	.word	0x08004000

0800a05c <Emitter_ON>:
        printf("\r\n");
        HAL_Delay(T3);
}


void Emitter_ON(){  // 赤外線エミッタに出力比�?トグルモードを相補で
 800a05c:	b580      	push	{r7, lr}
 800a05e:	af00      	add	r7, sp, #0
#if 1
  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800a060:	2100      	movs	r1, #0
 800a062:	4804      	ldr	r0, [pc, #16]	; (800a074 <Emitter_ON+0x18>)
 800a064:	f009 fe78 	bl	8013d58 <HAL_TIM_OC_Start_IT>
  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800a068:	2100      	movs	r1, #0
 800a06a:	4802      	ldr	r0, [pc, #8]	; (800a074 <Emitter_ON+0x18>)
 800a06c:	f00a ff45 	bl	8014efa <HAL_TIMEx_OCN_Start_IT>
#endif
}
 800a070:	bf00      	nop
 800a072:	bd80      	pop	{r7, pc}
 800a074:	200183b8 	.word	0x200183b8

0800a078 <Emitter_OFF>:
void Emitter_OFF(){
 800a078:	b580      	push	{r7, lr}
 800a07a:	af00      	add	r7, sp, #0
#if 1
  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800a07c:	2100      	movs	r1, #0
 800a07e:	4804      	ldr	r0, [pc, #16]	; (800a090 <Emitter_OFF+0x18>)
 800a080:	f009 feee 	bl	8013e60 <HAL_TIM_OC_Stop_IT>
  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800a084:	2100      	movs	r1, #0
 800a086:	4802      	ldr	r0, [pc, #8]	; (800a090 <Emitter_OFF+0x18>)
 800a088:	f00a ff8c 	bl	8014fa4 <HAL_TIMEx_OCN_Stop_IT>
#endif
}
 800a08c:	bf00      	nop
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	200183b8 	.word	0x200183b8

0800a094 <ADC_Start>:
void ADC_Start(){  //AD値のDMA
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0
#if 1
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog1, 3) != HAL_OK){
 800a098:	2203      	movs	r2, #3
 800a09a:	490a      	ldr	r1, [pc, #40]	; (800a0c4 <ADC_Start+0x30>)
 800a09c:	480a      	ldr	r0, [pc, #40]	; (800a0c8 <ADC_Start+0x34>)
 800a09e:	f006 fdab 	bl	8010bf8 <HAL_ADC_Start_DMA>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <ADC_Start+0x18>
  		        Error_Handler();
 800a0a8:	f005 fe7c 	bl	800fda4 <Error_Handler>
  		    }

  if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog2, 2) != HAL_OK){
 800a0ac:	2202      	movs	r2, #2
 800a0ae:	4907      	ldr	r1, [pc, #28]	; (800a0cc <ADC_Start+0x38>)
 800a0b0:	4807      	ldr	r0, [pc, #28]	; (800a0d0 <ADC_Start+0x3c>)
 800a0b2:	f006 fda1 	bl	8010bf8 <HAL_ADC_Start_DMA>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d001      	beq.n	800a0c0 <ADC_Start+0x2c>
  		    	Error_Handler();
 800a0bc:	f005 fe72 	bl	800fda4 <Error_Handler>
 }
#endif
}
 800a0c0:	bf00      	nop
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	200142f0 	.word	0x200142f0
 800a0c8:	2001857c 	.word	0x2001857c
 800a0cc:	200142f8 	.word	0x200142f8
 800a0d0:	2001843c 	.word	0x2001843c

0800a0d4 <ADC_Stop>:
void ADC_Stop(){
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	af00      	add	r7, sp, #0
#if 1
  if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK){
 800a0d8:	4808      	ldr	r0, [pc, #32]	; (800a0fc <ADC_Stop+0x28>)
 800a0da:	f006 fe7f 	bl	8010ddc <HAL_ADC_Stop_DMA>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <ADC_Stop+0x14>
  		        Error_Handler();
 800a0e4:	f005 fe5e 	bl	800fda4 <Error_Handler>
  		    }

  if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK){
 800a0e8:	4805      	ldr	r0, [pc, #20]	; (800a100 <ADC_Stop+0x2c>)
 800a0ea:	f006 fe77 	bl	8010ddc <HAL_ADC_Stop_DMA>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <ADC_Stop+0x24>
  		    	Error_Handler();
 800a0f4:	f005 fe56 	bl	800fda4 <Error_Handler>
            }
#endif
}
 800a0f8:	bf00      	nop
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	2001857c 	.word	0x2001857c
 800a100:	2001843c 	.word	0x2001843c

0800a104 <Encoder_Start>:
void Encoder_Start(){  //TIM3_Left, TIM4_Right
 800a104:	b580      	push	{r7, lr}
 800a106:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800a108:	213c      	movs	r1, #60	; 0x3c
 800a10a:	4804      	ldr	r0, [pc, #16]	; (800a11c <Encoder_Start+0x18>)
 800a10c:	f00a f8a0 	bl	8014250 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800a110:	213c      	movs	r1, #60	; 0x3c
 800a112:	4803      	ldr	r0, [pc, #12]	; (800a120 <Encoder_Start+0x1c>)
 800a114:	f00a f89c 	bl	8014250 <HAL_TIM_Encoder_Start>
}
 800a118:	bf00      	nop
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	200184d8 	.word	0x200184d8
 800a120:	200183fc 	.word	0x200183fc

0800a124 <Motor_PWM_Start>:
void Encoder_Stop(){

}
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800a124:	b580      	push	{r7, lr}
 800a126:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK){
 800a128:	210c      	movs	r1, #12
 800a12a:	4809      	ldr	r0, [pc, #36]	; (800a150 <Motor_PWM_Start+0x2c>)
 800a12c:	f009 ff68 	bl	8014000 <HAL_TIM_PWM_Start>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <Motor_PWM_Start+0x16>
	 	    	            Error_Handler();
 800a136:	f005 fe35 	bl	800fda4 <Error_Handler>
	 	    	        }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK){
 800a13a:	2104      	movs	r1, #4
 800a13c:	4805      	ldr	r0, [pc, #20]	; (800a154 <Motor_PWM_Start+0x30>)
 800a13e:	f009 ff5f 	bl	8014000 <HAL_TIM_PWM_Start>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d001      	beq.n	800a14c <Motor_PWM_Start+0x28>
	 	    	            Error_Handler();
 800a148:	f005 fe2c 	bl	800fda4 <Error_Handler>
	 	    	        }


#endif
}
 800a14c:	bf00      	nop
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20018fa0 	.word	0x20018fa0
 800a154:	20018494 	.word	0x20018494

0800a158 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800a158:	b580      	push	{r7, lr}
 800a15a:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK){
 800a15c:	210c      	movs	r1, #12
 800a15e:	4809      	ldr	r0, [pc, #36]	; (800a184 <Motor_PWM_Stop+0x2c>)
 800a160:	f009 ff8c 	bl	801407c <HAL_TIM_PWM_Stop>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <Motor_PWM_Stop+0x16>
	 	    	            Error_Handler();
 800a16a:	f005 fe1b 	bl	800fda4 <Error_Handler>
	 }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK){
 800a16e:	2104      	movs	r1, #4
 800a170:	4805      	ldr	r0, [pc, #20]	; (800a188 <Motor_PWM_Stop+0x30>)
 800a172:	f009 ff83 	bl	801407c <HAL_TIM_PWM_Stop>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <Motor_PWM_Stop+0x28>
	 	    	            Error_Handler();
 800a17c:	f005 fe12 	bl	800fda4 <Error_Handler>
	 }

#endif
}
 800a180:	bf00      	nop
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20018fa0 	.word	0x20018fa0
 800a188:	20018494 	.word	0x20018494

0800a18c <Init>:
void PWM_Log(){
//左右のモータのカウント�?�を�?��?�に格�?


}
void Init() { // 諸
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0

	Emitter_ON();
 800a190:	f7ff ff64 	bl	800a05c <Emitter_ON>
	ADC_Start();
 800a194:	f7ff ff7e 	bl	800a094 <ADC_Start>
	IMU_init();
 800a198:	f7ff fb9a 	bl	80098d0 <IMU_init>
	Motor_PWM_Start();
 800a19c:	f7ff ffc2 	bl	800a124 <Motor_PWM_Start>
	 if (HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1) != HAL_OK){
	 	  	  	          Error_Handler();
	 }

#endif
}
 800a1a0:	bf00      	nop
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <lowpass_filter>:



/*---- DEFINING FUNCTION ----*/
double lowpass_filter(float x, float x0, float r)
{
 800a1a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a1a8:	b084      	sub	sp, #16
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	ed87 0a03 	vstr	s0, [r7, #12]
 800a1b0:	edc7 0a02 	vstr	s1, [r7, #8]
 800a1b4:	ed87 1a01 	vstr	s2, [r7, #4]
	return ((r)*(x) + (1.0 - (r))* (x0));
 800a1b8:	ed97 7a01 	vldr	s14, [r7, #4]
 800a1bc:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c4:	ee17 0a90 	vmov	r0, s15
 800a1c8:	f7fe f8f6 	bl	80083b8 <__aeabi_f2d>
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	460d      	mov	r5, r1
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f7fe f8f1 	bl	80083b8 <__aeabi_f2d>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	f04f 0000 	mov.w	r0, #0
 800a1de:	4911      	ldr	r1, [pc, #68]	; (800a224 <lowpass_filter+0x80>)
 800a1e0:	f7fd ff8a 	bl	80080f8 <__aeabi_dsub>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	4690      	mov	r8, r2
 800a1ea:	4699      	mov	r9, r3
 800a1ec:	68b8      	ldr	r0, [r7, #8]
 800a1ee:	f7fe f8e3 	bl	80083b8 <__aeabi_f2d>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4640      	mov	r0, r8
 800a1f8:	4649      	mov	r1, r9
 800a1fa:	f7fe f935 	bl	8008468 <__aeabi_dmul>
 800a1fe:	4602      	mov	r2, r0
 800a200:	460b      	mov	r3, r1
 800a202:	4620      	mov	r0, r4
 800a204:	4629      	mov	r1, r5
 800a206:	f7fd ff79 	bl	80080fc <__adddf3>
 800a20a:	4603      	mov	r3, r0
 800a20c:	460c      	mov	r4, r1
 800a20e:	ec44 3b17 	vmov	d7, r3, r4
}
 800a212:	eeb0 0a47 	vmov.f32	s0, s14
 800a216:	eef0 0a67 	vmov.f32	s1, s15
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a222:	bf00      	nop
 800a224:	3ff00000 	.word	0x3ff00000

0800a228 <IMU_Get_Data>:
double IMU_Get_Data(){// IMUの値を取
 800a228:	b5b0      	push	{r4, r5, r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
	double  /*imu_pre_angle=0,*/ imu_accel=0; //imu_pre_accel=0;
 800a22e:	f04f 0300 	mov.w	r3, #0
 800a232:	f04f 0400 	mov.w	r4, #0
 800a236:	e9c7 3400 	strd	r3, r4, [r7]
	static double LPF=0, lastLPF=0;
    read_gyro_data();
 800a23a:	f7ff fb73 	bl	8009924 <read_gyro_data>
    read_accel_data();
 800a23e:	f7ff fba9 	bl	8009994 <read_accel_data>

    //atan2(za,xa);
    imu_accel =  ( ( (double)zg - offset )/16.4) * PI /180;//rad/s or rad/0.001s
 800a242:	4b49      	ldr	r3, [pc, #292]	; (800a368 <IMU_Get_Data+0x140>)
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	b21b      	sxth	r3, r3
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fe f8a3 	bl	8008394 <__aeabi_i2d>
 800a24e:	4b47      	ldr	r3, [pc, #284]	; (800a36c <IMU_Get_Data+0x144>)
 800a250:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a254:	461a      	mov	r2, r3
 800a256:	4623      	mov	r3, r4
 800a258:	f7fd ff4e 	bl	80080f8 <__aeabi_dsub>
 800a25c:	4603      	mov	r3, r0
 800a25e:	460c      	mov	r4, r1
 800a260:	4618      	mov	r0, r3
 800a262:	4621      	mov	r1, r4
 800a264:	a33a      	add	r3, pc, #232	; (adr r3, 800a350 <IMU_Get_Data+0x128>)
 800a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26a:	f7fe fa27 	bl	80086bc <__aeabi_ddiv>
 800a26e:	4603      	mov	r3, r0
 800a270:	460c      	mov	r4, r1
 800a272:	4618      	mov	r0, r3
 800a274:	4621      	mov	r1, r4
 800a276:	a338      	add	r3, pc, #224	; (adr r3, 800a358 <IMU_Get_Data+0x130>)
 800a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27c:	f7fe f8f4 	bl	8008468 <__aeabi_dmul>
 800a280:	4603      	mov	r3, r0
 800a282:	460c      	mov	r4, r1
 800a284:	4618      	mov	r0, r3
 800a286:	4621      	mov	r1, r4
 800a288:	f04f 0200 	mov.w	r2, #0
 800a28c:	4b38      	ldr	r3, [pc, #224]	; (800a370 <IMU_Get_Data+0x148>)
 800a28e:	f7fe fa15 	bl	80086bc <__aeabi_ddiv>
 800a292:	4603      	mov	r3, r0
 800a294:	460c      	mov	r4, r1
 800a296:	e9c7 3400 	strd	r3, r4, [r7]
    LPF = lowpass_filter(imu_accel, lastLPF,0.01);
 800a29a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a29e:	f7fe fbbb 	bl	8008a18 <__aeabi_d2f>
 800a2a2:	4605      	mov	r5, r0
 800a2a4:	4b33      	ldr	r3, [pc, #204]	; (800a374 <IMU_Get_Data+0x14c>)
 800a2a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	f7fe fbb3 	bl	8008a18 <__aeabi_d2f>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800a378 <IMU_Get_Data+0x150>
 800a2b8:	ee00 3a90 	vmov	s1, r3
 800a2bc:	ee00 5a10 	vmov	s0, r5
 800a2c0:	f7ff ff70 	bl	800a1a4 <lowpass_filter>
 800a2c4:	eeb0 7a40 	vmov.f32	s14, s0
 800a2c8:	eef0 7a60 	vmov.f32	s15, s1
 800a2cc:	4b2b      	ldr	r3, [pc, #172]	; (800a37c <IMU_Get_Data+0x154>)
 800a2ce:	ed83 7b00 	vstr	d7, [r3]
    imu_angle += T1*LPF;
 800a2d2:	4b2a      	ldr	r3, [pc, #168]	; (800a37c <IMU_Get_Data+0x154>)
 800a2d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a2d8:	a321      	add	r3, pc, #132	; (adr r3, 800a360 <IMU_Get_Data+0x138>)
 800a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2de:	f7fe f8c3 	bl	8008468 <__aeabi_dmul>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	460c      	mov	r4, r1
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	4b25      	ldr	r3, [pc, #148]	; (800a380 <IMU_Get_Data+0x158>)
 800a2ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	4623      	mov	r3, r4
 800a2f4:	f7fd ff02 	bl	80080fc <__adddf3>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	460c      	mov	r4, r1
 800a2fc:	4a20      	ldr	r2, [pc, #128]	; (800a380 <IMU_Get_Data+0x158>)
 800a2fe:	e9c2 3400 	strd	r3, r4, [r2]
    lastLPF = LPF;
 800a302:	4b1e      	ldr	r3, [pc, #120]	; (800a37c <IMU_Get_Data+0x154>)
 800a304:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a308:	4a1a      	ldr	r2, [pc, #104]	; (800a374 <IMU_Get_Data+0x14c>)
 800a30a:	e9c2 3400 	strd	r3, r4, [r2]
	//imu_pre_accel = imu_accel;
	//imu_pre_angle = imu_angle;

	//0.95 * imu_pre_angle + 0.05 * (imu_pre_accel + imu_accel) * T1 / 2;
	Body_angle = imu_angle * 180 / PI;
 800a30e:	4b1c      	ldr	r3, [pc, #112]	; (800a380 <IMU_Get_Data+0x158>)
 800a310:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a314:	f04f 0200 	mov.w	r2, #0
 800a318:	4b15      	ldr	r3, [pc, #84]	; (800a370 <IMU_Get_Data+0x148>)
 800a31a:	f7fe f8a5 	bl	8008468 <__aeabi_dmul>
 800a31e:	4603      	mov	r3, r0
 800a320:	460c      	mov	r4, r1
 800a322:	4618      	mov	r0, r3
 800a324:	4621      	mov	r1, r4
 800a326:	a30c      	add	r3, pc, #48	; (adr r3, 800a358 <IMU_Get_Data+0x130>)
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	f7fe f9c6 	bl	80086bc <__aeabi_ddiv>
 800a330:	4603      	mov	r3, r0
 800a332:	460c      	mov	r4, r1
 800a334:	4a13      	ldr	r2, [pc, #76]	; (800a384 <IMU_Get_Data+0x15c>)
 800a336:	e9c2 3400 	strd	r3, r4, [r2]

	  return imu_accel;
 800a33a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a33e:	ec44 3b17 	vmov	d7, r3, r4
}
 800a342:	eeb0 0a47 	vmov.f32	s0, s14
 800a346:	eef0 0a67 	vmov.f32	s1, s15
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bdb0      	pop	{r4, r5, r7, pc}
 800a350:	66666666 	.word	0x66666666
 800a354:	40306666 	.word	0x40306666
 800a358:	54442d18 	.word	0x54442d18
 800a35c:	400921fb 	.word	0x400921fb
 800a360:	d2f1a9fc 	.word	0xd2f1a9fc
 800a364:	3f50624d 	.word	0x3f50624d
 800a368:	2001839e 	.word	0x2001839e
 800a36c:	200142c8 	.word	0x200142c8
 800a370:	40668000 	.word	0x40668000
 800a374:	20018328 	.word	0x20018328
 800a378:	3c23d70a 	.word	0x3c23d70a
 800a37c:	20018330 	.word	0x20018330
 800a380:	200142b8 	.word	0x200142b8
 800a384:	200142b0 	.word	0x200142b0

0800a388 <IMU_Control>:
void IMU_Control(double target, double now, double T, double KP, double KI, double KD){
 800a388:	b5b0      	push	{r4, r5, r7, lr}
 800a38a:	b090      	sub	sp, #64	; 0x40
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 800a392:	ed87 1b08 	vstr	d1, [r7, #32]
 800a396:	ed87 2b06 	vstr	d2, [r7, #24]
 800a39a:	ed87 3b04 	vstr	d3, [r7, #16]
 800a39e:	ed87 4b02 	vstr	d4, [r7, #8]
 800a3a2:	ed87 5b00 	vstr	d5, [r7]

	static double  ei=0, e0=0;
	double e=0,ed=0;
 800a3a6:	f04f 0300 	mov.w	r3, #0
 800a3aa:	f04f 0400 	mov.w	r4, #0
 800a3ae:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 800a3b2:	f04f 0300 	mov.w	r3, #0
 800a3b6:	f04f 0400 	mov.w	r4, #0
 800a3ba:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	if(mode.imu == 0 || (Target_velocity == 0 && Target_Rad_velo == 0)){
 800a3be:	4b71      	ldr	r3, [pc, #452]	; (800a584 <IMU_Control+0x1fc>)
 800a3c0:	799b      	ldrb	r3, [r3, #6]
 800a3c2:	f003 0301 	and.w	r3, r3, #1
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00f      	beq.n	800a3ec <IMU_Control+0x64>
 800a3cc:	4b6e      	ldr	r3, [pc, #440]	; (800a588 <IMU_Control+0x200>)
 800a3ce:	edd3 7a00 	vldr	s15, [r3]
 800a3d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3da:	d115      	bne.n	800a408 <IMU_Control+0x80>
 800a3dc:	4b6b      	ldr	r3, [pc, #428]	; (800a58c <IMU_Control+0x204>)
 800a3de:	edd3 7a00 	vldr	s15, [r3]
 800a3e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ea:	d10d      	bne.n	800a408 <IMU_Control+0x80>

		ei = 0;
 800a3ec:	4a68      	ldr	r2, [pc, #416]	; (800a590 <IMU_Control+0x208>)
 800a3ee:	f04f 0300 	mov.w	r3, #0
 800a3f2:	f04f 0400 	mov.w	r4, #0
 800a3f6:	e9c2 3400 	strd	r3, r4, [r2]
		e0=0;
 800a3fa:	4a66      	ldr	r2, [pc, #408]	; (800a594 <IMU_Control+0x20c>)
 800a3fc:	f04f 0300 	mov.w	r3, #0
 800a400:	f04f 0400 	mov.w	r4, #0
 800a404:	e9c2 3400 	strd	r3, r4, [r2]
	}
	mode.imu = 1;
 800a408:	4a5e      	ldr	r2, [pc, #376]	; (800a584 <IMU_Control+0x1fc>)
 800a40a:	7993      	ldrb	r3, [r2, #6]
 800a40c:	f043 0301 	orr.w	r3, r3, #1
 800a410:	7193      	strb	r3, [r2, #6]

	e = target - now;
 800a412:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a416:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a41a:	f7fd fe6d 	bl	80080f8 <__aeabi_dsub>
 800a41e:	4603      	mov	r3, r0
 800a420:	460c      	mov	r4, r1
 800a422:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	ei += e * T;
 800a426:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a42a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a42e:	f7fe f81b 	bl	8008468 <__aeabi_dmul>
 800a432:	4603      	mov	r3, r0
 800a434:	460c      	mov	r4, r1
 800a436:	4618      	mov	r0, r3
 800a438:	4621      	mov	r1, r4
 800a43a:	4b55      	ldr	r3, [pc, #340]	; (800a590 <IMU_Control+0x208>)
 800a43c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a440:	461a      	mov	r2, r3
 800a442:	4623      	mov	r3, r4
 800a444:	f7fd fe5a 	bl	80080fc <__adddf3>
 800a448:	4603      	mov	r3, r0
 800a44a:	460c      	mov	r4, r1
 800a44c:	4a50      	ldr	r2, [pc, #320]	; (800a590 <IMU_Control+0x208>)
 800a44e:	e9c2 3400 	strd	r3, r4, [r2]
	ed = (e- e0) / T;
 800a452:	4b50      	ldr	r3, [pc, #320]	; (800a594 <IMU_Control+0x20c>)
 800a454:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a458:	461a      	mov	r2, r3
 800a45a:	4623      	mov	r3, r4
 800a45c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a460:	f7fd fe4a 	bl	80080f8 <__aeabi_dsub>
 800a464:	4603      	mov	r3, r0
 800a466:	460c      	mov	r4, r1
 800a468:	4618      	mov	r0, r3
 800a46a:	4621      	mov	r1, r4
 800a46c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a470:	f7fe f924 	bl	80086bc <__aeabi_ddiv>
 800a474:	4603      	mov	r3, r0
 800a476:	460c      	mov	r4, r1
 800a478:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	e0 = e;
 800a47c:	4a45      	ldr	r2, [pc, #276]	; (800a594 <IMU_Control+0x20c>)
 800a47e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800a482:	e9c2 3400 	strd	r3, r4, [r2]

	L_angular_velocity = -(int16_t)round(KP*e + KI*ei + KD*ed);
 800a486:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a48a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a48e:	f7fd ffeb 	bl	8008468 <__aeabi_dmul>
 800a492:	4603      	mov	r3, r0
 800a494:	460c      	mov	r4, r1
 800a496:	4625      	mov	r5, r4
 800a498:	461c      	mov	r4, r3
 800a49a:	4b3d      	ldr	r3, [pc, #244]	; (800a590 <IMU_Control+0x208>)
 800a49c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a4a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a4a4:	f7fd ffe0 	bl	8008468 <__aeabi_dmul>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	f7fd fe24 	bl	80080fc <__adddf3>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	4625      	mov	r5, r4
 800a4ba:	461c      	mov	r4, r3
 800a4bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a4c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4c4:	f7fd ffd0 	bl	8008468 <__aeabi_dmul>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	f7fd fe14 	bl	80080fc <__adddf3>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	ec44 3b17 	vmov	d7, r3, r4
 800a4dc:	eeb0 0a47 	vmov.f32	s0, s14
 800a4e0:	eef0 0a67 	vmov.f32	s1, s15
 800a4e4:	f00b fb88 	bl	8015bf8 <round>
 800a4e8:	ec54 3b10 	vmov	r3, r4, d0
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	f7fe fa6a 	bl	80089c8 <__aeabi_d2iz>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	b21b      	sxth	r3, r3
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	425b      	negs	r3, r3
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	b21a      	sxth	r2, r3
 800a500:	4b25      	ldr	r3, [pc, #148]	; (800a598 <IMU_Control+0x210>)
 800a502:	801a      	strh	r2, [r3, #0]
	R_angular_velocity =  (int16_t)round(KP*e + KI*ei + KD*ed);
 800a504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a508:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a50c:	f7fd ffac 	bl	8008468 <__aeabi_dmul>
 800a510:	4603      	mov	r3, r0
 800a512:	460c      	mov	r4, r1
 800a514:	4625      	mov	r5, r4
 800a516:	461c      	mov	r4, r3
 800a518:	4b1d      	ldr	r3, [pc, #116]	; (800a590 <IMU_Control+0x208>)
 800a51a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a51e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a522:	f7fd ffa1 	bl	8008468 <__aeabi_dmul>
 800a526:	4602      	mov	r2, r0
 800a528:	460b      	mov	r3, r1
 800a52a:	4620      	mov	r0, r4
 800a52c:	4629      	mov	r1, r5
 800a52e:	f7fd fde5 	bl	80080fc <__adddf3>
 800a532:	4603      	mov	r3, r0
 800a534:	460c      	mov	r4, r1
 800a536:	4625      	mov	r5, r4
 800a538:	461c      	mov	r4, r3
 800a53a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a53e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a542:	f7fd ff91 	bl	8008468 <__aeabi_dmul>
 800a546:	4602      	mov	r2, r0
 800a548:	460b      	mov	r3, r1
 800a54a:	4620      	mov	r0, r4
 800a54c:	4629      	mov	r1, r5
 800a54e:	f7fd fdd5 	bl	80080fc <__adddf3>
 800a552:	4603      	mov	r3, r0
 800a554:	460c      	mov	r4, r1
 800a556:	ec44 3b17 	vmov	d7, r3, r4
 800a55a:	eeb0 0a47 	vmov.f32	s0, s14
 800a55e:	eef0 0a67 	vmov.f32	s1, s15
 800a562:	f00b fb49 	bl	8015bf8 <round>
 800a566:	ec54 3b10 	vmov	r3, r4, d0
 800a56a:	4618      	mov	r0, r3
 800a56c:	4621      	mov	r1, r4
 800a56e:	f7fe fa2b 	bl	80089c8 <__aeabi_d2iz>
 800a572:	4603      	mov	r3, r0
 800a574:	b21a      	sxth	r2, r3
 800a576:	4b09      	ldr	r3, [pc, #36]	; (800a59c <IMU_Control+0x214>)
 800a578:	801a      	strh	r2, [r3, #0]

	//b 車体度0は前回の速度制御
}
 800a57a:	bf00      	nop
 800a57c:	3740      	adds	r7, #64	; 0x40
 800a57e:	46bd      	mov	sp, r7
 800a580:	bdb0      	pop	{r4, r5, r7, pc}
 800a582:	bf00      	nop
 800a584:	20000068 	.word	0x20000068
 800a588:	200142a8 	.word	0x200142a8
 800a58c:	200142ac 	.word	0x200142ac
 800a590:	20018338 	.word	0x20018338
 800a594:	20018340 	.word	0x20018340
 800a598:	20018382 	.word	0x20018382
 800a59c:	20018386 	.word	0x20018386

0800a5a0 <IMU_Calib>:
void IMU_Calib(){
 800a5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5a2:	b089      	sub	sp, #36	; 0x24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	466b      	mov	r3, sp
 800a5a8:	461e      	mov	r6, r3

	HAL_Delay(1000);
 800a5aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a5ae:	f006 f97d 	bl	80108ac <HAL_Delay>

	int16_t num = 2000;
 800a5b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a5b6:	81fb      	strh	r3, [r7, #14]
	double zg_vals[num];
 800a5b8:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800a5bc:	4603      	mov	r3, r0
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	60bb      	str	r3, [r7, #8]
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	f04f 0200 	mov.w	r2, #0
 800a5ca:	f04f 0300 	mov.w	r3, #0
 800a5ce:	f04f 0400 	mov.w	r4, #0
 800a5d2:	0194      	lsls	r4, r2, #6
 800a5d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a5d8:	018b      	lsls	r3, r1, #6
 800a5da:	4603      	mov	r3, r0
 800a5dc:	4619      	mov	r1, r3
 800a5de:	f04f 0200 	mov.w	r2, #0
 800a5e2:	f04f 0300 	mov.w	r3, #0
 800a5e6:	f04f 0400 	mov.w	r4, #0
 800a5ea:	0194      	lsls	r4, r2, #6
 800a5ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a5f0:	018b      	lsls	r3, r1, #6
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	00db      	lsls	r3, r3, #3
 800a5f6:	3307      	adds	r3, #7
 800a5f8:	3307      	adds	r3, #7
 800a5fa:	08db      	lsrs	r3, r3, #3
 800a5fc:	00db      	lsls	r3, r3, #3
 800a5fe:	ebad 0d03 	sub.w	sp, sp, r3
 800a602:	466b      	mov	r3, sp
 800a604:	3307      	adds	r3, #7
 800a606:	08db      	lsrs	r3, r3, #3
 800a608:	00db      	lsls	r3, r3, #3
 800a60a:	607b      	str	r3, [r7, #4]
	double sum;
	for(uint16_t i = 0; i < num; i++){
 800a60c:	2300      	movs	r3, #0
 800a60e:	83fb      	strh	r3, [r7, #30]
 800a610:	e023      	b.n	800a65a <IMU_Calib+0xba>
		zg_vals[i] = (double)zg;
 800a612:	4b20      	ldr	r3, [pc, #128]	; (800a694 <IMU_Calib+0xf4>)
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	b21b      	sxth	r3, r3
 800a618:	8bfd      	ldrh	r5, [r7, #30]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fd feba 	bl	8008394 <__aeabi_i2d>
 800a620:	4603      	mov	r3, r0
 800a622:	460c      	mov	r4, r1
 800a624:	6879      	ldr	r1, [r7, #4]
 800a626:	00ea      	lsls	r2, r5, #3
 800a628:	440a      	add	r2, r1
 800a62a:	e9c2 3400 	strd	r3, r4, [r2]
		sum += zg_vals[i];
 800a62e:	8bfb      	ldrh	r3, [r7, #30]
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	00db      	lsls	r3, r3, #3
 800a634:	4413      	add	r3, r2
 800a636:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a63a:	461a      	mov	r2, r3
 800a63c:	4623      	mov	r3, r4
 800a63e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a642:	f7fd fd5b 	bl	80080fc <__adddf3>
 800a646:	4603      	mov	r3, r0
 800a648:	460c      	mov	r4, r1
 800a64a:	e9c7 3404 	strd	r3, r4, [r7, #16]
		HAL_Delay(2);
 800a64e:	2002      	movs	r0, #2
 800a650:	f006 f92c 	bl	80108ac <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 800a654:	8bfb      	ldrh	r3, [r7, #30]
 800a656:	3301      	adds	r3, #1
 800a658:	83fb      	strh	r3, [r7, #30]
 800a65a:	8bfa      	ldrh	r2, [r7, #30]
 800a65c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a660:	429a      	cmp	r2, r3
 800a662:	dbd6      	blt.n	800a612 <IMU_Calib+0x72>
	}

	offset = sum / num;
 800a664:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fd fe93 	bl	8008394 <__aeabi_i2d>
 800a66e:	4603      	mov	r3, r0
 800a670:	460c      	mov	r4, r1
 800a672:	461a      	mov	r2, r3
 800a674:	4623      	mov	r3, r4
 800a676:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a67a:	f7fe f81f 	bl	80086bc <__aeabi_ddiv>
 800a67e:	4603      	mov	r3, r0
 800a680:	460c      	mov	r4, r1
 800a682:	4a05      	ldr	r2, [pc, #20]	; (800a698 <IMU_Calib+0xf8>)
 800a684:	e9c2 3400 	strd	r3, r4, [r2]
 800a688:	46b5      	mov	sp, r6
}
 800a68a:	bf00      	nop
 800a68c:	3724      	adds	r7, #36	; 0x24
 800a68e:	46bd      	mov	sp, r7
 800a690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a692:	bf00      	nop
 800a694:	2001839e 	.word	0x2001839e
 800a698:	200142c8 	.word	0x200142c8

0800a69c <LED_Change>:

void LED_Change(){
 800a69c:	b580      	push	{r7, lr}
 800a69e:	af00      	add	r7, sp, #0
	//Switch
	switch(mode.LED){
 800a6a0:	4b5a      	ldr	r3, [pc, #360]	; (800a80c <LED_Change+0x170>)
 800a6a2:	f993 3000 	ldrsb.w	r3, [r3]
 800a6a6:	2b07      	cmp	r3, #7
 800a6a8:	f200 80ac 	bhi.w	800a804 <LED_Change+0x168>
 800a6ac:	a201      	add	r2, pc, #4	; (adr r2, 800a6b4 <LED_Change+0x18>)
 800a6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b2:	bf00      	nop
 800a6b4:	0800a6d5 	.word	0x0800a6d5
 800a6b8:	0800a6fb 	.word	0x0800a6fb
 800a6bc:	0800a721 	.word	0x0800a721
 800a6c0:	0800a747 	.word	0x0800a747
 800a6c4:	0800a76d 	.word	0x0800a76d
 800a6c8:	0800a793 	.word	0x0800a793
 800a6cc:	0800a7b9 	.word	0x0800a7b9
 800a6d0:	0800a7df 	.word	0x0800a7df
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6da:	484d      	ldr	r0, [pc, #308]	; (800a810 <LED_Change+0x174>)
 800a6dc:	f008 f8bc 	bl	8012858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6e6:	484a      	ldr	r0, [pc, #296]	; (800a810 <LED_Change+0x174>)
 800a6e8:	f008 f8b6 	bl	8012858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6f2:	4848      	ldr	r0, [pc, #288]	; (800a814 <LED_Change+0x178>)
 800a6f4:	f008 f8b0 	bl	8012858 <HAL_GPIO_WritePin>
		break;
 800a6f8:	e085      	b.n	800a806 <LED_Change+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a700:	4843      	ldr	r0, [pc, #268]	; (800a810 <LED_Change+0x174>)
 800a702:	f008 f8a9 	bl	8012858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a706:	2200      	movs	r2, #0
 800a708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a70c:	4840      	ldr	r0, [pc, #256]	; (800a810 <LED_Change+0x174>)
 800a70e:	f008 f8a3 	bl	8012858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a712:	2200      	movs	r2, #0
 800a714:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a718:	483e      	ldr	r0, [pc, #248]	; (800a814 <LED_Change+0x178>)
 800a71a:	f008 f89d 	bl	8012858 <HAL_GPIO_WritePin>
		break;
 800a71e:	e072      	b.n	800a806 <LED_Change+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a720:	2200      	movs	r2, #0
 800a722:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a726:	483a      	ldr	r0, [pc, #232]	; (800a810 <LED_Change+0x174>)
 800a728:	f008 f896 	bl	8012858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a72c:	2201      	movs	r2, #1
 800a72e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a732:	4837      	ldr	r0, [pc, #220]	; (800a810 <LED_Change+0x174>)
 800a734:	f008 f890 	bl	8012858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a738:	2200      	movs	r2, #0
 800a73a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a73e:	4835      	ldr	r0, [pc, #212]	; (800a814 <LED_Change+0x178>)
 800a740:	f008 f88a 	bl	8012858 <HAL_GPIO_WritePin>

		break;
 800a744:	e05f      	b.n	800a806 <LED_Change+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a746:	2201      	movs	r2, #1
 800a748:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a74c:	4830      	ldr	r0, [pc, #192]	; (800a810 <LED_Change+0x174>)
 800a74e:	f008 f883 	bl	8012858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a752:	2201      	movs	r2, #1
 800a754:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a758:	482d      	ldr	r0, [pc, #180]	; (800a810 <LED_Change+0x174>)
 800a75a:	f008 f87d 	bl	8012858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a75e:	2200      	movs	r2, #0
 800a760:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a764:	482b      	ldr	r0, [pc, #172]	; (800a814 <LED_Change+0x178>)
 800a766:	f008 f877 	bl	8012858 <HAL_GPIO_WritePin>
		break;
 800a76a:	e04c      	b.n	800a806 <LED_Change+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a76c:	2200      	movs	r2, #0
 800a76e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a772:	4827      	ldr	r0, [pc, #156]	; (800a810 <LED_Change+0x174>)
 800a774:	f008 f870 	bl	8012858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a778:	2200      	movs	r2, #0
 800a77a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a77e:	4824      	ldr	r0, [pc, #144]	; (800a810 <LED_Change+0x174>)
 800a780:	f008 f86a 	bl	8012858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a784:	2201      	movs	r2, #1
 800a786:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a78a:	4822      	ldr	r0, [pc, #136]	; (800a814 <LED_Change+0x178>)
 800a78c:	f008 f864 	bl	8012858 <HAL_GPIO_WritePin>
		break;
 800a790:	e039      	b.n	800a806 <LED_Change+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a792:	2201      	movs	r2, #1
 800a794:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a798:	481d      	ldr	r0, [pc, #116]	; (800a810 <LED_Change+0x174>)
 800a79a:	f008 f85d 	bl	8012858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7a4:	481a      	ldr	r0, [pc, #104]	; (800a810 <LED_Change+0x174>)
 800a7a6:	f008 f857 	bl	8012858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a7b0:	4818      	ldr	r0, [pc, #96]	; (800a814 <LED_Change+0x178>)
 800a7b2:	f008 f851 	bl	8012858 <HAL_GPIO_WritePin>
		break;
 800a7b6:	e026      	b.n	800a806 <LED_Change+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a7be:	4814      	ldr	r0, [pc, #80]	; (800a810 <LED_Change+0x174>)
 800a7c0:	f008 f84a 	bl	8012858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7ca:	4811      	ldr	r0, [pc, #68]	; (800a810 <LED_Change+0x174>)
 800a7cc:	f008 f844 	bl	8012858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a7d6:	480f      	ldr	r0, [pc, #60]	; (800a814 <LED_Change+0x178>)
 800a7d8:	f008 f83e 	bl	8012858 <HAL_GPIO_WritePin>

		break;
 800a7dc:	e013      	b.n	800a806 <LED_Change+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a7e4:	480a      	ldr	r0, [pc, #40]	; (800a810 <LED_Change+0x174>)
 800a7e6:	f008 f837 	bl	8012858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7f0:	4807      	ldr	r0, [pc, #28]	; (800a810 <LED_Change+0x174>)
 800a7f2:	f008 f831 	bl	8012858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a7fc:	4805      	ldr	r0, [pc, #20]	; (800a814 <LED_Change+0x178>)
 800a7fe:	f008 f82b 	bl	8012858 <HAL_GPIO_WritePin>

		break;
 800a802:	e000      	b.n	800a806 <LED_Change+0x16a>
	default: break;
 800a804:	bf00      	nop

	}
}
 800a806:	bf00      	nop
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	20000068 	.word	0x20000068
 800a810:	40020800 	.word	0x40020800
 800a814:	40020400 	.word	0x40020400

0800a818 <Motor_Switch>:
void Motor_Switch(int16_t L, int16_t R){
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	4603      	mov	r3, r0
 800a820:	460a      	mov	r2, r1
 800a822:	80fb      	strh	r3, [r7, #6]
 800a824:	4613      	mov	r3, r2
 800a826:	80bb      	strh	r3, [r7, #4]
	if (L > 0 ){
 800a828:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	dd05      	ble.n	800a83c <Motor_Switch+0x24>
		//to -
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); //A2が左SET:1で正転
 800a830:	2201      	movs	r2, #1
 800a832:	2104      	movs	r1, #4
 800a834:	481a      	ldr	r0, [pc, #104]	; (800a8a0 <Motor_Switch+0x88>)
 800a836:	f008 f80f 	bl	8012858 <HAL_GPIO_WritePin>
 800a83a:	e00c      	b.n	800a856 <Motor_Switch+0x3e>

	}
	else  if (L < 0){
 800a83c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a840:	2b00      	cmp	r3, #0
 800a842:	da08      	bge.n	800a856 <Motor_Switch+0x3e>
		//to +
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800a844:	2200      	movs	r2, #0
 800a846:	2104      	movs	r1, #4
 800a848:	4815      	ldr	r0, [pc, #84]	; (800a8a0 <Motor_Switch+0x88>)
 800a84a:	f008 f805 	bl	8012858 <HAL_GPIO_WritePin>
		L = -L;
 800a84e:	88fb      	ldrh	r3, [r7, #6]
 800a850:	425b      	negs	r3, r3
 800a852:	b29b      	uxth	r3, r3
 800a854:	80fb      	strh	r3, [r7, #6]
	}
	if (R > 0){
 800a856:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	dd05      	ble.n	800a86a <Motor_Switch+0x52>
		//to -
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800a85e:	2200      	movs	r2, #0
 800a860:	2101      	movs	r1, #1
 800a862:	480f      	ldr	r0, [pc, #60]	; (800a8a0 <Motor_Switch+0x88>)
 800a864:	f007 fff8 	bl	8012858 <HAL_GPIO_WritePin>
 800a868:	e00c      	b.n	800a884 <Motor_Switch+0x6c>

	}

	else if (R < 0){
 800a86a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	da08      	bge.n	800a884 <Motor_Switch+0x6c>
	  	//to +
	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //A0が右,SET:1で正転
 800a872:	2201      	movs	r2, #1
 800a874:	2101      	movs	r1, #1
 800a876:	480a      	ldr	r0, [pc, #40]	; (800a8a0 <Motor_Switch+0x88>)
 800a878:	f007 ffee 	bl	8012858 <HAL_GPIO_WritePin>
	  	R = -R;
 800a87c:	88bb      	ldrh	r3, [r7, #4]
 800a87e:	425b      	negs	r3, r3
 800a880:	b29b      	uxth	r3, r3
 800a882:	80bb      	strh	r3, [r7, #4]
	}

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, L); //tim2ch4が左
 800a884:	4b07      	ldr	r3, [pc, #28]	; (800a8a4 <Motor_Switch+0x8c>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a88c:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, R); //tim5ch2が右
 800a88e:	4b06      	ldr	r3, [pc, #24]	; (800a8a8 <Motor_Switch+0x90>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a896:	639a      	str	r2, [r3, #56]	; 0x38
}
 800a898:	bf00      	nop
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	40020000 	.word	0x40020000
 800a8a4:	20018fa0 	.word	0x20018fa0
 800a8a8:	20018494 	.word	0x20018494

0800a8ac <ADC_Get_Data>:

void ADC_Get_Data(){
 800a8ac:	b480      	push	{r7}
 800a8ae:	af00      	add	r7, sp, #0

	static int count = 0;

	    sl_ad1_10 = analog1[0];
 800a8b0:	4b80      	ldr	r3, [pc, #512]	; (800aab4 <ADC_Get_Data+0x208>)
 800a8b2:	881b      	ldrh	r3, [r3, #0]
 800a8b4:	b21a      	sxth	r2, r3
 800a8b6:	4b80      	ldr	r3, [pc, #512]	; (800aab8 <ADC_Get_Data+0x20c>)
 800a8b8:	801a      	strh	r2, [r3, #0]
		fr_ad1_14 = analog1[1];
 800a8ba:	4b7e      	ldr	r3, [pc, #504]	; (800aab4 <ADC_Get_Data+0x208>)
 800a8bc:	885b      	ldrh	r3, [r3, #2]
 800a8be:	b21a      	sxth	r2, r3
 800a8c0:	4b7e      	ldr	r3, [pc, #504]	; (800aabc <ADC_Get_Data+0x210>)
 800a8c2:	801a      	strh	r2, [r3, #0]
		fl_ad2_11 = analog2[0];
 800a8c4:	4b7e      	ldr	r3, [pc, #504]	; (800aac0 <ADC_Get_Data+0x214>)
 800a8c6:	881b      	ldrh	r3, [r3, #0]
 800a8c8:	b21a      	sxth	r2, r3
 800a8ca:	4b7e      	ldr	r3, [pc, #504]	; (800aac4 <ADC_Get_Data+0x218>)
 800a8cc:	801a      	strh	r2, [r3, #0]
		sr_ad2_15 = analog2[1];
 800a8ce:	4b7c      	ldr	r3, [pc, #496]	; (800aac0 <ADC_Get_Data+0x214>)
 800a8d0:	885b      	ldrh	r3, [r3, #2]
 800a8d2:	b21a      	sxth	r2, r3
 800a8d4:	4b7c      	ldr	r3, [pc, #496]	; (800aac8 <ADC_Get_Data+0x21c>)
 800a8d6:	801a      	strh	r2, [r3, #0]

	    sl_error = abs(sl_path - sl_ad1_10);
 800a8d8:	4b7c      	ldr	r3, [pc, #496]	; (800aacc <ADC_Get_Data+0x220>)
 800a8da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8de:	461a      	mov	r2, r3
 800a8e0:	4b75      	ldr	r3, [pc, #468]	; (800aab8 <ADC_Get_Data+0x20c>)
 800a8e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	bfb8      	it	lt
 800a8ec:	425b      	neglt	r3, r3
 800a8ee:	b21a      	sxth	r2, r3
 800a8f0:	4b77      	ldr	r3, [pc, #476]	; (800aad0 <ADC_Get_Data+0x224>)
 800a8f2:	801a      	strh	r2, [r3, #0]
		fr_error = abs(fr_path - fr_ad1_14);
 800a8f4:	4b77      	ldr	r3, [pc, #476]	; (800aad4 <ADC_Get_Data+0x228>)
 800a8f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	4b6f      	ldr	r3, [pc, #444]	; (800aabc <ADC_Get_Data+0x210>)
 800a8fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	2b00      	cmp	r3, #0
 800a906:	bfb8      	it	lt
 800a908:	425b      	neglt	r3, r3
 800a90a:	b21a      	sxth	r2, r3
 800a90c:	4b72      	ldr	r3, [pc, #456]	; (800aad8 <ADC_Get_Data+0x22c>)
 800a90e:	801a      	strh	r2, [r3, #0]
	    fl_error = abs(fl_path - fl_ad2_11);
 800a910:	4b72      	ldr	r3, [pc, #456]	; (800aadc <ADC_Get_Data+0x230>)
 800a912:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a916:	461a      	mov	r2, r3
 800a918:	4b6a      	ldr	r3, [pc, #424]	; (800aac4 <ADC_Get_Data+0x218>)
 800a91a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	2b00      	cmp	r3, #0
 800a922:	bfb8      	it	lt
 800a924:	425b      	neglt	r3, r3
 800a926:	b21a      	sxth	r2, r3
 800a928:	4b6d      	ldr	r3, [pc, #436]	; (800aae0 <ADC_Get_Data+0x234>)
 800a92a:	801a      	strh	r2, [r3, #0]
	    sr_error = abs(sr_path - sr_ad2_15);
 800a92c:	4b6d      	ldr	r3, [pc, #436]	; (800aae4 <ADC_Get_Data+0x238>)
 800a92e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a932:	461a      	mov	r2, r3
 800a934:	4b64      	ldr	r3, [pc, #400]	; (800aac8 <ADC_Get_Data+0x21c>)
 800a936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	bfb8      	it	lt
 800a940:	425b      	neglt	r3, r3
 800a942:	b21a      	sxth	r2, r3
 800a944:	4b68      	ldr	r3, [pc, #416]	; (800aae8 <ADC_Get_Data+0x23c>)
 800a946:	801a      	strh	r2, [r3, #0]

	    sl_path = sl_ad1_10;
 800a948:	4b5b      	ldr	r3, [pc, #364]	; (800aab8 <ADC_Get_Data+0x20c>)
 800a94a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a94e:	4b5f      	ldr	r3, [pc, #380]	; (800aacc <ADC_Get_Data+0x220>)
 800a950:	801a      	strh	r2, [r3, #0]
	    fr_path = fr_ad1_14;
 800a952:	4b5a      	ldr	r3, [pc, #360]	; (800aabc <ADC_Get_Data+0x210>)
 800a954:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a958:	4b5e      	ldr	r3, [pc, #376]	; (800aad4 <ADC_Get_Data+0x228>)
 800a95a:	801a      	strh	r2, [r3, #0]
	    fl_path = fl_ad2_11;
 800a95c:	4b59      	ldr	r3, [pc, #356]	; (800aac4 <ADC_Get_Data+0x218>)
 800a95e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a962:	4b5e      	ldr	r3, [pc, #376]	; (800aadc <ADC_Get_Data+0x230>)
 800a964:	801a      	strh	r2, [r3, #0]
		sr_path = sr_ad2_15;
 800a966:	4b58      	ldr	r3, [pc, #352]	; (800aac8 <ADC_Get_Data+0x21c>)
 800a968:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a96c:	4b5d      	ldr	r3, [pc, #372]	; (800aae4 <ADC_Get_Data+0x238>)
 800a96e:	801a      	strh	r2, [r3, #0]

		battery_V = analog1[2];
 800a970:	4b50      	ldr	r3, [pc, #320]	; (800aab4 <ADC_Get_Data+0x208>)
 800a972:	889b      	ldrh	r3, [r3, #4]
 800a974:	ee07 3a90 	vmov	s15, r3
 800a978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a97c:	4b5b      	ldr	r3, [pc, #364]	; (800aaec <ADC_Get_Data+0x240>)
 800a97e:	edc3 7a00 	vstr	s15, [r3]
#if 1
		sl_integrate += sl_error;
 800a982:	4b5b      	ldr	r3, [pc, #364]	; (800aaf0 <ADC_Get_Data+0x244>)
 800a984:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a988:	b29a      	uxth	r2, r3
 800a98a:	4b51      	ldr	r3, [pc, #324]	; (800aad0 <ADC_Get_Data+0x224>)
 800a98c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a990:	b29b      	uxth	r3, r3
 800a992:	4413      	add	r3, r2
 800a994:	b29b      	uxth	r3, r3
 800a996:	b21a      	sxth	r2, r3
 800a998:	4b55      	ldr	r3, [pc, #340]	; (800aaf0 <ADC_Get_Data+0x244>)
 800a99a:	801a      	strh	r2, [r3, #0]
		fr_integrate += fr_error;
 800a99c:	4b55      	ldr	r3, [pc, #340]	; (800aaf4 <ADC_Get_Data+0x248>)
 800a99e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	4b4c      	ldr	r3, [pc, #304]	; (800aad8 <ADC_Get_Data+0x22c>)
 800a9a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	4413      	add	r3, r2
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	b21a      	sxth	r2, r3
 800a9b2:	4b50      	ldr	r3, [pc, #320]	; (800aaf4 <ADC_Get_Data+0x248>)
 800a9b4:	801a      	strh	r2, [r3, #0]
		fl_integrate += fl_error;
 800a9b6:	4b50      	ldr	r3, [pc, #320]	; (800aaf8 <ADC_Get_Data+0x24c>)
 800a9b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	4b48      	ldr	r3, [pc, #288]	; (800aae0 <ADC_Get_Data+0x234>)
 800a9c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	4413      	add	r3, r2
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	b21a      	sxth	r2, r3
 800a9cc:	4b4a      	ldr	r3, [pc, #296]	; (800aaf8 <ADC_Get_Data+0x24c>)
 800a9ce:	801a      	strh	r2, [r3, #0]
		sr_integrate += sr_error;
 800a9d0:	4b4a      	ldr	r3, [pc, #296]	; (800aafc <ADC_Get_Data+0x250>)
 800a9d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	4b43      	ldr	r3, [pc, #268]	; (800aae8 <ADC_Get_Data+0x23c>)
 800a9da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	4413      	add	r3, r2
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	b21a      	sxth	r2, r3
 800a9e6:	4b45      	ldr	r3, [pc, #276]	; (800aafc <ADC_Get_Data+0x250>)
 800a9e8:	801a      	strh	r2, [r3, #0]

		count ++;
 800a9ea:	4b45      	ldr	r3, [pc, #276]	; (800ab00 <ADC_Get_Data+0x254>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	4a43      	ldr	r2, [pc, #268]	; (800ab00 <ADC_Get_Data+0x254>)
 800a9f2:	6013      	str	r3, [r2, #0]
		if(count == 10){
 800a9f4:	4b42      	ldr	r3, [pc, #264]	; (800ab00 <ADC_Get_Data+0x254>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b0a      	cmp	r3, #10
 800a9fa:	d156      	bne.n	800aaaa <ADC_Get_Data+0x1fe>
			sl_average = (float)sl_integrate / count;
 800a9fc:	4b3c      	ldr	r3, [pc, #240]	; (800aaf0 <ADC_Get_Data+0x244>)
 800a9fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa02:	ee07 3a90 	vmov	s15, r3
 800aa06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aa0a:	4b3d      	ldr	r3, [pc, #244]	; (800ab00 <ADC_Get_Data+0x254>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	ee07 3a90 	vmov	s15, r3
 800aa12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa1a:	4b3a      	ldr	r3, [pc, #232]	; (800ab04 <ADC_Get_Data+0x258>)
 800aa1c:	edc3 7a00 	vstr	s15, [r3]
			fr_average = (float)fr_integrate / count;
 800aa20:	4b34      	ldr	r3, [pc, #208]	; (800aaf4 <ADC_Get_Data+0x248>)
 800aa22:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa26:	ee07 3a90 	vmov	s15, r3
 800aa2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aa2e:	4b34      	ldr	r3, [pc, #208]	; (800ab00 <ADC_Get_Data+0x254>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	ee07 3a90 	vmov	s15, r3
 800aa36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa3e:	4b32      	ldr	r3, [pc, #200]	; (800ab08 <ADC_Get_Data+0x25c>)
 800aa40:	edc3 7a00 	vstr	s15, [r3]
			fl_average = (float)fl_integrate / count;
 800aa44:	4b2c      	ldr	r3, [pc, #176]	; (800aaf8 <ADC_Get_Data+0x24c>)
 800aa46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aa52:	4b2b      	ldr	r3, [pc, #172]	; (800ab00 <ADC_Get_Data+0x254>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	ee07 3a90 	vmov	s15, r3
 800aa5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa62:	4b2a      	ldr	r3, [pc, #168]	; (800ab0c <ADC_Get_Data+0x260>)
 800aa64:	edc3 7a00 	vstr	s15, [r3]
			sr_average = (float)sr_integrate / count;
 800aa68:	4b24      	ldr	r3, [pc, #144]	; (800aafc <ADC_Get_Data+0x250>)
 800aa6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa6e:	ee07 3a90 	vmov	s15, r3
 800aa72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aa76:	4b22      	ldr	r3, [pc, #136]	; (800ab00 <ADC_Get_Data+0x254>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	ee07 3a90 	vmov	s15, r3
 800aa7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa86:	4b22      	ldr	r3, [pc, #136]	; (800ab10 <ADC_Get_Data+0x264>)
 800aa88:	edc3 7a00 	vstr	s15, [r3]


			sl_integrate = 0;
 800aa8c:	4b18      	ldr	r3, [pc, #96]	; (800aaf0 <ADC_Get_Data+0x244>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	801a      	strh	r2, [r3, #0]
			fr_integrate = 0;
 800aa92:	4b18      	ldr	r3, [pc, #96]	; (800aaf4 <ADC_Get_Data+0x248>)
 800aa94:	2200      	movs	r2, #0
 800aa96:	801a      	strh	r2, [r3, #0]
			fl_integrate = 0;
 800aa98:	4b17      	ldr	r3, [pc, #92]	; (800aaf8 <ADC_Get_Data+0x24c>)
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	801a      	strh	r2, [r3, #0]
			sr_integrate = 0;
 800aa9e:	4b17      	ldr	r3, [pc, #92]	; (800aafc <ADC_Get_Data+0x250>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	801a      	strh	r2, [r3, #0]

			count = 0;
 800aaa4:	4b16      	ldr	r3, [pc, #88]	; (800ab00 <ADC_Get_Data+0x254>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	601a      	str	r2, [r3, #0]
		}

#endif
}
 800aaaa:	bf00      	nop
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	200142f0 	.word	0x200142f0
 800aab8:	20018484 	.word	0x20018484
 800aabc:	2000001c 	.word	0x2000001c
 800aac0:	200142f8 	.word	0x200142f8
 800aac4:	200142fe 	.word	0x200142fe
 800aac8:	20018fe2 	.word	0x20018fe2
 800aacc:	20018488 	.word	0x20018488
 800aad0:	20018486 	.word	0x20018486
 800aad4:	20014302 	.word	0x20014302
 800aad8:	20014304 	.word	0x20014304
 800aadc:	20014300 	.word	0x20014300
 800aae0:	20014306 	.word	0x20014306
 800aae4:	200183b0 	.word	0x200183b0
 800aae8:	200184d4 	.word	0x200184d4
 800aaec:	20019048 	.word	0x20019048
 800aaf0:	2001848e 	.word	0x2001848e
 800aaf4:	200185c4 	.word	0x200185c4
 800aaf8:	20018574 	.word	0x20018574
 800aafc:	20018518 	.word	0x20018518
 800ab00:	20018348 	.word	0x20018348
 800ab04:	20019044 	.word	0x20019044
 800ab08:	20018ef8 	.word	0x20018ef8
 800ab0c:	200183b4 	.word	0x200183b4
 800ab10:	20018490 	.word	0x20018490

0800ab14 <Velocity_Get>:
float Velocity_Get(float EN, float T){ // TIM2,TIM5の割り込み周
 800ab14:	b480      	push	{r7}
 800ab16:	b087      	sub	sp, #28
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	ed87 0a01 	vstr	s0, [r7, #4]
 800ab1e:	edc7 0a00 	vstr	s1, [r7]

 float Circumference, TirePulse_of_Circumference, velocity;

    Circumference = TIRE_DEAMETER * PI; // 周
 800ab22:	4b0f      	ldr	r3, [pc, #60]	; (800ab60 <Velocity_Get+0x4c>)
 800ab24:	617b      	str	r3, [r7, #20]
    TirePulse_of_Circumference = ENCODER_PULSE * REDUCATION_RATIO; // タイヤ周のパルス
 800ab26:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 800ab2a:	613b      	str	r3, [r7, #16]
    velocity = EN * (Circumference /TirePulse_of_Circumference)/ T; //a 1パルスで進距離 * パルス数/制御周
 800ab2c:	edd7 6a05 	vldr	s13, [r7, #20]
 800ab30:	edd7 7a04 	vldr	s15, [r7, #16]
 800ab34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab38:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab3c:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ab40:	ed97 7a00 	vldr	s14, [r7]
 800ab44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab48:	edc7 7a03 	vstr	s15, [r7, #12]

    return velocity;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	ee07 3a90 	vmov	s15, r3

	 //TIM3 or 4 // 0.0012329102 = ( 20.2mm *) / (4096 * 4)
}
 800ab52:	eeb0 0a67 	vmov.f32	s0, s15
 800ab56:	371c      	adds	r7, #28
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	42816f02 	.word	0x42816f02

0800ab64 <Encoder_Reset>:


}


void Encoder_Reset(){
 800ab64:	b480      	push	{r7}
 800ab66:	af00      	add	r7, sp, #0
    TIM3 -> CNT = 30000 - 1;
 800ab68:	4b06      	ldr	r3, [pc, #24]	; (800ab84 <Encoder_Reset+0x20>)
 800ab6a:	f247 522f 	movw	r2, #29999	; 0x752f
 800ab6e:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = 30000 - 1;
 800ab70:	4b05      	ldr	r3, [pc, #20]	; (800ab88 <Encoder_Reset+0x24>)
 800ab72:	f247 522f 	movw	r2, #29999	; 0x752f
 800ab76:	625a      	str	r2, [r3, #36]	; 0x24

}
 800ab78:	bf00      	nop
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	40000400 	.word	0x40000400
 800ab88:	40000800 	.word	0x40000800

0800ab8c <Encoder_Count>:
int16_t Encoder_Count(int16_t mode){
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	80fb      	strh	r3, [r7, #6]

	if(mode == 0){
 800ab96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d102      	bne.n	800aba4 <Encoder_Count+0x18>

		mode = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	80fb      	strh	r3, [r7, #6]
 800aba2:	e030      	b.n	800ac06 <Encoder_Count+0x7a>
	  }
	  else if(mode == 1){
 800aba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d12c      	bne.n	800ac06 <Encoder_Count+0x7a>
	    EN3_L.integrate += EN3_L.count;
 800abac:	4b1a      	ldr	r3, [pc, #104]	; (800ac18 <Encoder_Count+0x8c>)
 800abae:	685a      	ldr	r2, [r3, #4]
 800abb0:	4b19      	ldr	r3, [pc, #100]	; (800ac18 <Encoder_Count+0x8c>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4413      	add	r3, r2
 800abb6:	4a18      	ldr	r2, [pc, #96]	; (800ac18 <Encoder_Count+0x8c>)
 800abb8:	6053      	str	r3, [r2, #4]
	    EN4_R.integrate += EN4_R.count;
 800abba:	4b18      	ldr	r3, [pc, #96]	; (800ac1c <Encoder_Count+0x90>)
 800abbc:	685a      	ldr	r2, [r3, #4]
 800abbe:	4b17      	ldr	r3, [pc, #92]	; (800ac1c <Encoder_Count+0x90>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4413      	add	r3, r2
 800abc4:	4a15      	ldr	r2, [pc, #84]	; (800ac1c <Encoder_Count+0x90>)
 800abc6:	6053      	str	r3, [r2, #4]
	    EN_Body.integrate = (float)(EN3_L.integrate + EN4_R.integrate)/2;
 800abc8:	4b13      	ldr	r3, [pc, #76]	; (800ac18 <Encoder_Count+0x8c>)
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	4b13      	ldr	r3, [pc, #76]	; (800ac1c <Encoder_Count+0x90>)
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	4413      	add	r3, r2
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800abda:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800abde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800abe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abe6:	ee17 2a90 	vmov	r2, s15
 800abea:	4b0d      	ldr	r3, [pc, #52]	; (800ac20 <Encoder_Count+0x94>)
 800abec:	605a      	str	r2, [r3, #4]
	    All_Pulse_cut += EN3_L.count + EN4_R.count;
 800abee:	4b0a      	ldr	r3, [pc, #40]	; (800ac18 <Encoder_Count+0x8c>)
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	4b0a      	ldr	r3, [pc, #40]	; (800ac1c <Encoder_Count+0x90>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	441a      	add	r2, r3
 800abf8:	4b0a      	ldr	r3, [pc, #40]	; (800ac24 <Encoder_Count+0x98>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4413      	add	r3, r2
 800abfe:	4a09      	ldr	r2, [pc, #36]	; (800ac24 <Encoder_Count+0x98>)
 800ac00:	6013      	str	r3, [r2, #0]
	    mode =1;
 800ac02:	2301      	movs	r3, #1
 800ac04:	80fb      	strh	r3, [r7, #6]

	  }
	return mode;
 800ac06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	370c      	adds	r7, #12
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	20000044 	.word	0x20000044
 800ac1c:	20000050 	.word	0x20000050
 800ac20:	2000005c 	.word	0x2000005c
 800ac24:	200142e8 	.word	0x200142e8

0800ac28 <wait>:
//o 走行用の関数
//Motion.cとMotion.hにまとめる
//時間�?ち関数

void wait(double wait_second)
{
 800ac28:	b590      	push	{r4, r7, lr}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	ed87 0b00 	vstr	d0, [r7]
	//グローバル変数のtimerを使�?
	//�?らな�?制御を�??って�?つ。か、つけっぱなし�??
	//つけっぱなし�?�パターン
	//�?った�?��?�時間 - 現在の時間
	//�?ちたい時間
	double starting_point_of_time = elapsed_time;
 800ac32:	4b0f      	ldr	r3, [pc, #60]	; (800ac70 <wait+0x48>)
 800ac34:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac38:	e9c7 3402 	strd	r3, r4, [r7, #8]
	while(starting_point_of_time + wait_second > elapsed_time)
 800ac3c:	bf00      	nop
 800ac3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac46:	f7fd fa59 	bl	80080fc <__adddf3>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	4618      	mov	r0, r3
 800ac50:	4621      	mov	r1, r4
 800ac52:	4b07      	ldr	r3, [pc, #28]	; (800ac70 <wait+0x48>)
 800ac54:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac58:	461a      	mov	r2, r3
 800ac5a:	4623      	mov	r3, r4
 800ac5c:	f7fd fe94 	bl	8008988 <__aeabi_dcmpgt>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d1eb      	bne.n	800ac3e <wait+0x16>
	{

	}

	//�?らな�?制御を�??るパターン
}
 800ac66:	bf00      	nop
 800ac68:	3714      	adds	r7, #20
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd90      	pop	{r4, r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	200142e0 	.word	0x200142e0
 800ac74:	00000000 	.word	0x00000000

0800ac78 <Start_Accel>:


void Start_Accel(){
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	af00      	add	r7, sp, #0
	error_reset = 0;
 800ac7c:	4b22      	ldr	r3, [pc, #136]	; (800ad08 <Start_Accel+0x90>)
 800ac7e:	2200      	movs	r2, #0
 800ac80:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ac82:	f7fe fed1 	bl	8009a28 <Motor_Count_Clear>
	//IMU_init();

    EN3_L.integrate = 0;
 800ac86:	4b21      	ldr	r3, [pc, #132]	; (800ad0c <Start_Accel+0x94>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ac8c:	4b20      	ldr	r3, [pc, #128]	; (800ad10 <Start_Accel+0x98>)
 800ac8e:	2200      	movs	r2, #0
 800ac90:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ac92:	4b20      	ldr	r3, [pc, #128]	; (800ad14 <Start_Accel+0x9c>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800ac98:	4b1f      	ldr	r3, [pc, #124]	; (800ad18 <Start_Accel+0xa0>)
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	70da      	strb	r2, [r3, #3]

	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < START_ACCEL_PULSE * 2){
 800ac9e:	e005      	b.n	800acac <Start_Accel+0x34>
		mode.control = 4;
 800aca0:	4b1d      	ldr	r3, [pc, #116]	; (800ad18 <Start_Accel+0xa0>)
 800aca2:	2204      	movs	r2, #4
 800aca4:	715a      	strb	r2, [r3, #5]
		mode.accel= 1;
 800aca6:	4b1c      	ldr	r3, [pc, #112]	; (800ad18 <Start_Accel+0xa0>)
 800aca8:	2201      	movs	r2, #1
 800acaa:	705a      	strb	r2, [r3, #1]
	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < START_ACCEL_PULSE * 2){
 800acac:	4b17      	ldr	r3, [pc, #92]	; (800ad0c <Start_Accel+0x94>)
 800acae:	685a      	ldr	r2, [r3, #4]
 800acb0:	4b17      	ldr	r3, [pc, #92]	; (800ad10 <Start_Accel+0x98>)
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	4413      	add	r3, r2
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	db0f      	blt.n	800acda <Start_Accel+0x62>
 800acba:	4b14      	ldr	r3, [pc, #80]	; (800ad0c <Start_Accel+0x94>)
 800acbc:	685a      	ldr	r2, [r3, #4]
 800acbe:	4b14      	ldr	r3, [pc, #80]	; (800ad10 <Start_Accel+0x98>)
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	4413      	add	r3, r2
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7fd fb65 	bl	8008394 <__aeabi_i2d>
 800acca:	a30d      	add	r3, pc, #52	; (adr r3, 800ad00 <Start_Accel+0x88>)
 800accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd0:	f7fd fe3c 	bl	800894c <__aeabi_dcmplt>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1e2      	bne.n	800aca0 <Start_Accel+0x28>
	}
	mode.accel = 0;
 800acda:	4b0f      	ldr	r3, [pc, #60]	; (800ad18 <Start_Accel+0xa0>)
 800acdc:	2200      	movs	r2, #0
 800acde:	705a      	strb	r2, [r3, #1]
	Target_velocity = SEARCH_SPEED;
 800ace0:	4b0e      	ldr	r3, [pc, #56]	; (800ad1c <Start_Accel+0xa4>)
 800ace2:	4a0f      	ldr	r2, [pc, #60]	; (800ad20 <Start_Accel+0xa8>)
 800ace4:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800ace6:	4b09      	ldr	r3, [pc, #36]	; (800ad0c <Start_Accel+0x94>)
 800ace8:	2200      	movs	r2, #0
 800acea:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800acec:	4b08      	ldr	r3, [pc, #32]	; (800ad10 <Start_Accel+0x98>)
 800acee:	2200      	movs	r2, #0
 800acf0:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800acf2:	4b08      	ldr	r3, [pc, #32]	; (800ad14 <Start_Accel+0x9c>)
 800acf4:	2200      	movs	r2, #0
 800acf6:	605a      	str	r2, [r3, #4]

}
 800acf8:	bf00      	nop
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	f3af 8000 	nop.w
 800ad00:	63ed7f78 	.word	0x63ed7f78
 800ad04:	40ee8874 	.word	0x40ee8874
 800ad08:	2000026c 	.word	0x2000026c
 800ad0c:	20000044 	.word	0x20000044
 800ad10:	20000050 	.word	0x20000050
 800ad14:	2000005c 	.word	0x2000005c
 800ad18:	20000068 	.word	0x20000068
 800ad1c:	200142a8 	.word	0x200142a8
 800ad20:	43960000 	.word	0x43960000
 800ad24:	00000000 	.word	0x00000000

0800ad28 <Accelerate>:

void Accelerate(){
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	af00      	add	r7, sp, #0

	error_reset = 0;
 800ad2c:	4b4a      	ldr	r3, [pc, #296]	; (800ae58 <Accelerate+0x130>)
 800ad2e:	2200      	movs	r2, #0
 800ad30:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ad32:	f7fe fe79 	bl	8009a28 <Motor_Count_Clear>
	//IMU_init();

	mode.control = 3;
 800ad36:	4b49      	ldr	r3, [pc, #292]	; (800ae5c <Accelerate+0x134>)
 800ad38:	2203      	movs	r2, #3
 800ad3a:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800ad3c:	4b48      	ldr	r3, [pc, #288]	; (800ae60 <Accelerate+0x138>)
 800ad3e:	2200      	movs	r2, #0
 800ad40:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ad42:	4b48      	ldr	r3, [pc, #288]	; (800ae64 <Accelerate+0x13c>)
 800ad44:	2200      	movs	r2, #0
 800ad46:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ad48:	4b47      	ldr	r3, [pc, #284]	; (800ae68 <Accelerate+0x140>)
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	605a      	str	r2, [r3, #4]
	mode.enc = 1;
 800ad4e:	4b43      	ldr	r3, [pc, #268]	; (800ae5c <Accelerate+0x134>)
 800ad50:	2201      	movs	r2, #1
 800ad52:	70da      	strb	r2, [r3, #3]

	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < ACCE_DECE_PULSE * 2){
 800ad54:	e04d      	b.n	800adf2 <Accelerate+0xca>

		mode.accel = 2;
 800ad56:	4b41      	ldr	r3, [pc, #260]	; (800ae5c <Accelerate+0x134>)
 800ad58:	2202      	movs	r2, #2
 800ad5a:	705a      	strb	r2, [r3, #1]
#if 1
		if(WALL_JUDGE_PULSE * 2 < EN3_L.integrate + EN4_R.integrate){
 800ad5c:	4b40      	ldr	r3, [pc, #256]	; (800ae60 <Accelerate+0x138>)
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	4b40      	ldr	r3, [pc, #256]	; (800ae64 <Accelerate+0x13c>)
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	4413      	add	r3, r2
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fd fb14 	bl	8008394 <__aeabi_i2d>
 800ad6c:	a336      	add	r3, pc, #216	; (adr r3, 800ae48 <Accelerate+0x120>)
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	f7fd fe09 	bl	8008988 <__aeabi_dcmpgt>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d037      	beq.n	800adec <Accelerate+0xc4>
			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800ad7c:	4b3b      	ldr	r3, [pc, #236]	; (800ae6c <Accelerate+0x144>)
 800ad7e:	edd3 7a00 	vldr	s15, [r3]
 800ad82:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800ae70 <Accelerate+0x148>
 800ad86:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad8e:	dd0d      	ble.n	800adac <Accelerate+0x84>
 800ad90:	4b38      	ldr	r3, [pc, #224]	; (800ae74 <Accelerate+0x14c>)
 800ad92:	edd3 7a00 	vldr	s15, [r3]
 800ad96:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ae78 <Accelerate+0x150>
 800ad9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ada2:	dd03      	ble.n	800adac <Accelerate+0x84>
				  mode.control = 0;
 800ada4:	4b2d      	ldr	r3, [pc, #180]	; (800ae5c <Accelerate+0x134>)
 800ada6:	2200      	movs	r2, #0
 800ada8:	715a      	strb	r2, [r3, #5]
 800adaa:	e022      	b.n	800adf2 <Accelerate+0xca>

				 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
		    }
			else if(fl_average > LEFT_WALL){
 800adac:	4b31      	ldr	r3, [pc, #196]	; (800ae74 <Accelerate+0x14c>)
 800adae:	edd3 7a00 	vldr	s15, [r3]
 800adb2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ae78 <Accelerate+0x150>
 800adb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adbe:	dd03      	ble.n	800adc8 <Accelerate+0xa0>
				  mode.control = 1;
 800adc0:	4b26      	ldr	r3, [pc, #152]	; (800ae5c <Accelerate+0x134>)
 800adc2:	2201      	movs	r2, #1
 800adc4:	715a      	strb	r2, [r3, #5]
 800adc6:	e014      	b.n	800adf2 <Accelerate+0xca>
				 // Left_Wall_Control();
		    }
			else if(fr_average > RIGHT_WALL){
 800adc8:	4b28      	ldr	r3, [pc, #160]	; (800ae6c <Accelerate+0x144>)
 800adca:	edd3 7a00 	vldr	s15, [r3]
 800adce:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800ae70 <Accelerate+0x148>
 800add2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800add6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adda:	dd03      	ble.n	800ade4 <Accelerate+0xbc>
				  mode.control = 2;
 800addc:	4b1f      	ldr	r3, [pc, #124]	; (800ae5c <Accelerate+0x134>)
 800adde:	2202      	movs	r2, #2
 800ade0:	715a      	strb	r2, [r3, #5]
 800ade2:	e006      	b.n	800adf2 <Accelerate+0xca>
							 // Right_Wall_Control();
		    }
			else mode.control = 4;
 800ade4:	4b1d      	ldr	r3, [pc, #116]	; (800ae5c <Accelerate+0x134>)
 800ade6:	2204      	movs	r2, #4
 800ade8:	715a      	strb	r2, [r3, #5]
 800adea:	e002      	b.n	800adf2 <Accelerate+0xca>
		}
		else mode.control = 4;
 800adec:	4b1b      	ldr	r3, [pc, #108]	; (800ae5c <Accelerate+0x134>)
 800adee:	2204      	movs	r2, #4
 800adf0:	715a      	strb	r2, [r3, #5]
	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < ACCE_DECE_PULSE * 2){
 800adf2:	4b1b      	ldr	r3, [pc, #108]	; (800ae60 <Accelerate+0x138>)
 800adf4:	685a      	ldr	r2, [r3, #4]
 800adf6:	4b1b      	ldr	r3, [pc, #108]	; (800ae64 <Accelerate+0x13c>)
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	4413      	add	r3, r2
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	db0f      	blt.n	800ae20 <Accelerate+0xf8>
 800ae00:	4b17      	ldr	r3, [pc, #92]	; (800ae60 <Accelerate+0x138>)
 800ae02:	685a      	ldr	r2, [r3, #4]
 800ae04:	4b17      	ldr	r3, [pc, #92]	; (800ae64 <Accelerate+0x13c>)
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	4413      	add	r3, r2
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fd fac2 	bl	8008394 <__aeabi_i2d>
 800ae10:	a30f      	add	r3, pc, #60	; (adr r3, 800ae50 <Accelerate+0x128>)
 800ae12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae16:	f7fd fd99 	bl	800894c <__aeabi_dcmplt>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d19a      	bne.n	800ad56 <Accelerate+0x2e>
	}
#else
	mode.control = 3;
}
#endif
	mode.accel = 0;
 800ae20:	4b0e      	ldr	r3, [pc, #56]	; (800ae5c <Accelerate+0x134>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	705a      	strb	r2, [r3, #1]
	Target_velocity = SEARCH_SPEED;
 800ae26:	4b15      	ldr	r3, [pc, #84]	; (800ae7c <Accelerate+0x154>)
 800ae28:	4a15      	ldr	r2, [pc, #84]	; (800ae80 <Accelerate+0x158>)
 800ae2a:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800ae2c:	4b0c      	ldr	r3, [pc, #48]	; (800ae60 <Accelerate+0x138>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ae32:	4b0c      	ldr	r3, [pc, #48]	; (800ae64 <Accelerate+0x13c>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ae38:	4b0b      	ldr	r3, [pc, #44]	; (800ae68 <Accelerate+0x140>)
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	605a      	str	r2, [r3, #4]

}
 800ae3e:	bf00      	nop
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	f3af 8000 	nop.w
 800ae48:	f298ebe1 	.word	0xf298ebe1
 800ae4c:	40d8b91c 	.word	0x40d8b91c
 800ae50:	a7233ab1 	.word	0xa7233ab1
 800ae54:	40e64033 	.word	0x40e64033
 800ae58:	2000026c 	.word	0x2000026c
 800ae5c:	20000068 	.word	0x20000068
 800ae60:	20000044 	.word	0x20000044
 800ae64:	20000050 	.word	0x20000050
 800ae68:	2000005c 	.word	0x2000005c
 800ae6c:	20018ef8 	.word	0x20018ef8
 800ae70:	42c80000 	.word	0x42c80000
 800ae74:	200183b4 	.word	0x200183b4
 800ae78:	430c0000 	.word	0x430c0000
 800ae7c:	200142a8 	.word	0x200142a8
 800ae80:	43960000 	.word	0x43960000
 800ae84:	00000000 	.word	0x00000000

0800ae88 <Decelerate>:
void Decelerate(){
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	af00      	add	r7, sp, #0


	//IMU_init();
	//mode.control = 4;

	mode.control = 3;
 800ae8c:	4b4c      	ldr	r3, [pc, #304]	; (800afc0 <Decelerate+0x138>)
 800ae8e:	2203      	movs	r2, #3
 800ae90:	715a      	strb	r2, [r3, #5]
	//printf("%d\r\n",EN3_L.integrate + EN4_R.integrate);
	while( (EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2) &&  ( (sl_average + sr_average )/2 < 1900)){
 800ae92:	e055      	b.n	800af40 <Decelerate+0xb8>
		mode.accel = 3;
 800ae94:	4b4a      	ldr	r3, [pc, #296]	; (800afc0 <Decelerate+0x138>)
 800ae96:	2203      	movs	r2, #3
 800ae98:	705a      	strb	r2, [r3, #1]
		printf("%d , %d\r\n",EN3_L.integrate , EN4_R.integrate);
 800ae9a:	4b4a      	ldr	r3, [pc, #296]	; (800afc4 <Decelerate+0x13c>)
 800ae9c:	6859      	ldr	r1, [r3, #4]
 800ae9e:	4b4a      	ldr	r3, [pc, #296]	; (800afc8 <Decelerate+0x140>)
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	461a      	mov	r2, r3
 800aea4:	4849      	ldr	r0, [pc, #292]	; (800afcc <Decelerate+0x144>)
 800aea6:	f00b fb8b 	bl	80165c0 <iprintf>
#if 1
		if(EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2 - (WALL_JUDGE_PULSE  * 2 *3/5) ){//ここの閾値の意味:減�?�する距離は半区画 -
 800aeaa:	4b46      	ldr	r3, [pc, #280]	; (800afc4 <Decelerate+0x13c>)
 800aeac:	685a      	ldr	r2, [r3, #4]
 800aeae:	4b46      	ldr	r3, [pc, #280]	; (800afc8 <Decelerate+0x140>)
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fd fa6d 	bl	8008394 <__aeabi_i2d>
 800aeba:	a33d      	add	r3, pc, #244	; (adr r3, 800afb0 <Decelerate+0x128>)
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	f7fd fd44 	bl	800894c <__aeabi_dcmplt>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d037      	beq.n	800af3a <Decelerate+0xb2>
		  if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800aeca:	4b41      	ldr	r3, [pc, #260]	; (800afd0 <Decelerate+0x148>)
 800aecc:	edd3 7a00 	vldr	s15, [r3]
 800aed0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800afd4 <Decelerate+0x14c>
 800aed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aedc:	dd0d      	ble.n	800aefa <Decelerate+0x72>
 800aede:	4b3e      	ldr	r3, [pc, #248]	; (800afd8 <Decelerate+0x150>)
 800aee0:	edd3 7a00 	vldr	s15, [r3]
 800aee4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800afdc <Decelerate+0x154>
 800aee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aeec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef0:	dd03      	ble.n	800aefa <Decelerate+0x72>
			  mode.control = 0;
 800aef2:	4b33      	ldr	r3, [pc, #204]	; (800afc0 <Decelerate+0x138>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	715a      	strb	r2, [r3, #5]
 800aef8:	e022      	b.n	800af40 <Decelerate+0xb8>

			 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
	      }
		  else if(fl_average > LEFT_WALL){
 800aefa:	4b37      	ldr	r3, [pc, #220]	; (800afd8 <Decelerate+0x150>)
 800aefc:	edd3 7a00 	vldr	s15, [r3]
 800af00:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800afdc <Decelerate+0x154>
 800af04:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af0c:	dd03      	ble.n	800af16 <Decelerate+0x8e>
			  mode.control = 1;
 800af0e:	4b2c      	ldr	r3, [pc, #176]	; (800afc0 <Decelerate+0x138>)
 800af10:	2201      	movs	r2, #1
 800af12:	715a      	strb	r2, [r3, #5]
 800af14:	e014      	b.n	800af40 <Decelerate+0xb8>
			 // Left_Wall_Control();
	      }
		  else if(fr_average > RIGHT_WALL){
 800af16:	4b2e      	ldr	r3, [pc, #184]	; (800afd0 <Decelerate+0x148>)
 800af18:	edd3 7a00 	vldr	s15, [r3]
 800af1c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800afd4 <Decelerate+0x14c>
 800af20:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af28:	dd03      	ble.n	800af32 <Decelerate+0xaa>
			  mode.control = 2;
 800af2a:	4b25      	ldr	r3, [pc, #148]	; (800afc0 <Decelerate+0x138>)
 800af2c:	2202      	movs	r2, #2
 800af2e:	715a      	strb	r2, [r3, #5]
 800af30:	e006      	b.n	800af40 <Decelerate+0xb8>
						 // Right_Wall_Control();
	      }
		  else mode.control = 4;
 800af32:	4b23      	ldr	r3, [pc, #140]	; (800afc0 <Decelerate+0x138>)
 800af34:	2204      	movs	r2, #4
 800af36:	715a      	strb	r2, [r3, #5]
 800af38:	e002      	b.n	800af40 <Decelerate+0xb8>
		}
		else mode.control = 4;
 800af3a:	4b21      	ldr	r3, [pc, #132]	; (800afc0 <Decelerate+0x138>)
 800af3c:	2204      	movs	r2, #4
 800af3e:	715a      	strb	r2, [r3, #5]
	while( (EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2) &&  ( (sl_average + sr_average )/2 < 1900)){
 800af40:	4b20      	ldr	r3, [pc, #128]	; (800afc4 <Decelerate+0x13c>)
 800af42:	685a      	ldr	r2, [r3, #4]
 800af44:	4b20      	ldr	r3, [pc, #128]	; (800afc8 <Decelerate+0x140>)
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	4413      	add	r3, r2
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fd fa22 	bl	8008394 <__aeabi_i2d>
 800af50:	a319      	add	r3, pc, #100	; (adr r3, 800afb8 <Decelerate+0x130>)
 800af52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af56:	f7fd fcf9 	bl	800894c <__aeabi_dcmplt>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d012      	beq.n	800af86 <Decelerate+0xfe>
 800af60:	4b1f      	ldr	r3, [pc, #124]	; (800afe0 <Decelerate+0x158>)
 800af62:	ed93 7a00 	vldr	s14, [r3]
 800af66:	4b1f      	ldr	r3, [pc, #124]	; (800afe4 <Decelerate+0x15c>)
 800af68:	edd3 7a00 	vldr	s15, [r3]
 800af6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af70:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800af74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800af78:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800afe8 <Decelerate+0x160>
 800af7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af84:	d486      	bmi.n	800ae94 <Decelerate+0xc>
#else
	mode.control = 3;
}
#endif

	mode.accel = 0;
 800af86:	4b0e      	ldr	r3, [pc, #56]	; (800afc0 <Decelerate+0x138>)
 800af88:	2200      	movs	r2, #0
 800af8a:	705a      	strb	r2, [r3, #1]
	mode.control = 5;
 800af8c:	4b0c      	ldr	r3, [pc, #48]	; (800afc0 <Decelerate+0x138>)
 800af8e:	2205      	movs	r2, #5
 800af90:	715a      	strb	r2, [r3, #5]
	Target_velocity = 0;
 800af92:	4b16      	ldr	r3, [pc, #88]	; (800afec <Decelerate+0x164>)
 800af94:	f04f 0200 	mov.w	r2, #0
 800af98:	601a      	str	r2, [r3, #0]
	mode.enc = 0;
 800af9a:	4b09      	ldr	r3, [pc, #36]	; (800afc0 <Decelerate+0x138>)
 800af9c:	2200      	movs	r2, #0
 800af9e:	70da      	strb	r2, [r3, #3]
	error_reset = 0;
 800afa0:	4b13      	ldr	r3, [pc, #76]	; (800aff0 <Decelerate+0x168>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800afa6:	f7fe fd3f 	bl	8009a28 <Motor_Count_Clear>


	//printf("減�??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��した????��?��??��?��???��?��??��?��?\r\n");
}
 800afaa:	bf00      	nop
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	89844e41 	.word	0x89844e41
 800afb4:	40ddaaef 	.word	0x40ddaaef
 800afb8:	a7233ab1 	.word	0xa7233ab1
 800afbc:	40e64033 	.word	0x40e64033
 800afc0:	20000068 	.word	0x20000068
 800afc4:	20000044 	.word	0x20000044
 800afc8:	20000050 	.word	0x20000050
 800afcc:	080184bc 	.word	0x080184bc
 800afd0:	20018ef8 	.word	0x20018ef8
 800afd4:	42c80000 	.word	0x42c80000
 800afd8:	200183b4 	.word	0x200183b4
 800afdc:	430c0000 	.word	0x430c0000
 800afe0:	20019044 	.word	0x20019044
 800afe4:	20018490 	.word	0x20018490
 800afe8:	44ed8000 	.word	0x44ed8000
 800afec:	200142a8 	.word	0x200142a8
 800aff0:	2000026c 	.word	0x2000026c
 800aff4:	00000000 	.word	0x00000000

0800aff8 <straight>:

			return Velocity;


}
void straight(){ //uint8_t block_num
 800aff8:	b5b0      	push	{r4, r5, r7, lr}
 800affa:	af00      	add	r7, sp, #0
//    EN3_L.integrate = 0;
//    EN4_R.integrate = 0;
//	  EN_Body.integrate = 0;
//    mode.enc = 1;

  while(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 ){
 800affc:	e07e      	b.n	800b0fc <straight+0x104>
#if 1
	  if(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 *0.45 || Target_pulse * 2 - (WALL_JUDGE_PULSE * 12/5) < EN3_L.integrate + EN4_R.integrate){
 800affe:	4b54      	ldr	r3, [pc, #336]	; (800b150 <straight+0x158>)
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	4b54      	ldr	r3, [pc, #336]	; (800b154 <straight+0x15c>)
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	4413      	add	r3, r2
 800b008:	4618      	mov	r0, r3
 800b00a:	f7fd f9c3 	bl	8008394 <__aeabi_i2d>
 800b00e:	4604      	mov	r4, r0
 800b010:	460d      	mov	r5, r1
 800b012:	4b51      	ldr	r3, [pc, #324]	; (800b158 <straight+0x160>)
 800b014:	edd3 7a00 	vldr	s15, [r3]
 800b018:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b01c:	ee17 0a90 	vmov	r0, s15
 800b020:	f7fd f9ca 	bl	80083b8 <__aeabi_f2d>
 800b024:	a346      	add	r3, pc, #280	; (adr r3, 800b140 <straight+0x148>)
 800b026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02a:	f7fd fa1d 	bl	8008468 <__aeabi_dmul>
 800b02e:	4602      	mov	r2, r0
 800b030:	460b      	mov	r3, r1
 800b032:	4620      	mov	r0, r4
 800b034:	4629      	mov	r1, r5
 800b036:	f7fd fc89 	bl	800894c <__aeabi_dcmplt>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d122      	bne.n	800b086 <straight+0x8e>
 800b040:	4b45      	ldr	r3, [pc, #276]	; (800b158 <straight+0x160>)
 800b042:	edd3 7a00 	vldr	s15, [r3]
 800b046:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b04a:	ee17 0a90 	vmov	r0, s15
 800b04e:	f7fd f9b3 	bl	80083b8 <__aeabi_f2d>
 800b052:	a33d      	add	r3, pc, #244	; (adr r3, 800b148 <straight+0x150>)
 800b054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b058:	f7fd f84e 	bl	80080f8 <__aeabi_dsub>
 800b05c:	4603      	mov	r3, r0
 800b05e:	460c      	mov	r4, r1
 800b060:	4625      	mov	r5, r4
 800b062:	461c      	mov	r4, r3
 800b064:	4b3a      	ldr	r3, [pc, #232]	; (800b150 <straight+0x158>)
 800b066:	685a      	ldr	r2, [r3, #4]
 800b068:	4b3a      	ldr	r3, [pc, #232]	; (800b154 <straight+0x15c>)
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	4413      	add	r3, r2
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fd f990 	bl	8008394 <__aeabi_i2d>
 800b074:	4602      	mov	r2, r0
 800b076:	460b      	mov	r3, r1
 800b078:	4620      	mov	r0, r4
 800b07a:	4629      	mov	r1, r5
 800b07c:	f7fd fc66 	bl	800894c <__aeabi_dcmplt>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d037      	beq.n	800b0f6 <straight+0xfe>

			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800b086:	4b35      	ldr	r3, [pc, #212]	; (800b15c <straight+0x164>)
 800b088:	edd3 7a00 	vldr	s15, [r3]
 800b08c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b160 <straight+0x168>
 800b090:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b098:	dd0d      	ble.n	800b0b6 <straight+0xbe>
 800b09a:	4b32      	ldr	r3, [pc, #200]	; (800b164 <straight+0x16c>)
 800b09c:	edd3 7a00 	vldr	s15, [r3]
 800b0a0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b168 <straight+0x170>
 800b0a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ac:	dd03      	ble.n	800b0b6 <straight+0xbe>
				  mode.control = 0;
 800b0ae:	4b2f      	ldr	r3, [pc, #188]	; (800b16c <straight+0x174>)
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	715a      	strb	r2, [r3, #5]
 800b0b4:	e01e      	b.n	800b0f4 <straight+0xfc>

				 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
		    }
			else if(fl_average > LEFT_WALL){
 800b0b6:	4b2b      	ldr	r3, [pc, #172]	; (800b164 <straight+0x16c>)
 800b0b8:	edd3 7a00 	vldr	s15, [r3]
 800b0bc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800b168 <straight+0x170>
 800b0c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c8:	dd03      	ble.n	800b0d2 <straight+0xda>
				  mode.control = 1;
 800b0ca:	4b28      	ldr	r3, [pc, #160]	; (800b16c <straight+0x174>)
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	715a      	strb	r2, [r3, #5]
 800b0d0:	e014      	b.n	800b0fc <straight+0x104>
				 // Left_Wall_Control();
		    }
			else if(fr_average > RIGHT_WALL){
 800b0d2:	4b22      	ldr	r3, [pc, #136]	; (800b15c <straight+0x164>)
 800b0d4:	edd3 7a00 	vldr	s15, [r3]
 800b0d8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800b160 <straight+0x168>
 800b0dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e4:	dd03      	ble.n	800b0ee <straight+0xf6>
				  mode.control = 2;
 800b0e6:	4b21      	ldr	r3, [pc, #132]	; (800b16c <straight+0x174>)
 800b0e8:	2202      	movs	r2, #2
 800b0ea:	715a      	strb	r2, [r3, #5]
 800b0ec:	e006      	b.n	800b0fc <straight+0x104>
							 // Right_Wall_Control();
		    }
			else mode.control = 4;
 800b0ee:	4b1f      	ldr	r3, [pc, #124]	; (800b16c <straight+0x174>)
 800b0f0:	2204      	movs	r2, #4
 800b0f2:	715a      	strb	r2, [r3, #5]
			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800b0f4:	e002      	b.n	800b0fc <straight+0x104>
	  }
	  else
		  mode.control = 4;
 800b0f6:	4b1d      	ldr	r3, [pc, #116]	; (800b16c <straight+0x174>)
 800b0f8:	2204      	movs	r2, #4
 800b0fa:	715a      	strb	r2, [r3, #5]
  while(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 ){
 800b0fc:	4b14      	ldr	r3, [pc, #80]	; (800b150 <straight+0x158>)
 800b0fe:	685a      	ldr	r2, [r3, #4]
 800b100:	4b14      	ldr	r3, [pc, #80]	; (800b154 <straight+0x15c>)
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	4413      	add	r3, r2
 800b106:	ee07 3a90 	vmov	s15, r3
 800b10a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b10e:	4b12      	ldr	r3, [pc, #72]	; (800b158 <straight+0x160>)
 800b110:	edd3 7a00 	vldr	s15, [r3]
 800b114:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b118:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b120:	f53f af6d 	bmi.w	800affe <straight+0x6>
#else

		  mode.control = 3;
  }
#endif
      EN3_L.integrate = 0;
 800b124:	4b0a      	ldr	r3, [pc, #40]	; (800b150 <straight+0x158>)
 800b126:	2200      	movs	r2, #0
 800b128:	605a      	str	r2, [r3, #4]
      EN4_R.integrate = 0;
 800b12a:	4b0a      	ldr	r3, [pc, #40]	; (800b154 <straight+0x15c>)
 800b12c:	2200      	movs	r2, #0
 800b12e:	605a      	str	r2, [r3, #4]
      EN_Body.integrate = 0;
 800b130:	4b0f      	ldr	r3, [pc, #60]	; (800b170 <straight+0x178>)
 800b132:	2200      	movs	r2, #0
 800b134:	605a      	str	r2, [r3, #4]
    }

    printf("3区画進んだ???��?��??��?��? : %d \r\n",check);

#endif
}
 800b136:	bf00      	nop
 800b138:	bdb0      	pop	{r4, r5, r7, pc}
 800b13a:	bf00      	nop
 800b13c:	f3af 8000 	nop.w
 800b140:	cccccccd 	.word	0xcccccccd
 800b144:	3fdccccc 	.word	0x3fdccccc
 800b148:	89844e42 	.word	0x89844e42
 800b14c:	40ddaaef 	.word	0x40ddaaef
 800b150:	20000044 	.word	0x20000044
 800b154:	20000050 	.word	0x20000050
 800b158:	20000000 	.word	0x20000000
 800b15c:	20018ef8 	.word	0x20018ef8
 800b160:	42c80000 	.word	0x42c80000
 800b164:	200183b4 	.word	0x200183b4
 800b168:	430c0000 	.word	0x430c0000
 800b16c:	20000068 	.word	0x20000068
 800b170:	2000005c 	.word	0x2000005c
 800b174:	00000000 	.word	0x00000000

0800b178 <IMU_turn>:

			return Velocity;

}

void IMU_turn(int8_t target_angle, double target_angle_velo){
 800b178:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b17c:	ed2d 8b02 	vpush	{d8}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	4603      	mov	r3, r0
 800b186:	ed87 0b00 	vstr	d0, [r7]
 800b18a:	73fb      	strb	r3, [r7, #15]
	    Motor_PWM_Start();
 800b18c:	f7fe ffca 	bl	800a124 <Motor_PWM_Start>
	    if(target_angle < 0){
 800b190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b194:	2b00      	cmp	r3, #0
 800b196:	da37      	bge.n	800b208 <IMU_turn+0x90>
	     while(target_angle < Body_angle){
 800b198:	e027      	b.n	800b1ea <IMU_turn+0x72>

		   IMU_Control(target_angle_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800b19a:	4b47      	ldr	r3, [pc, #284]	; (800b2b8 <IMU_turn+0x140>)
 800b19c:	ed93 8b00 	vldr	d8, [r3]
 800b1a0:	4b46      	ldr	r3, [pc, #280]	; (800b2bc <IMU_turn+0x144>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7fd f907 	bl	80083b8 <__aeabi_f2d>
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	460d      	mov	r5, r1
 800b1ae:	4b43      	ldr	r3, [pc, #268]	; (800b2bc <IMU_turn+0x144>)
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fd f900 	bl	80083b8 <__aeabi_f2d>
 800b1b8:	4680      	mov	r8, r0
 800b1ba:	4689      	mov	r9, r1
 800b1bc:	4b3f      	ldr	r3, [pc, #252]	; (800b2bc <IMU_turn+0x144>)
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fd f8f9 	bl	80083b8 <__aeabi_f2d>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	ec43 2b15 	vmov	d5, r2, r3
 800b1ce:	ec49 8b14 	vmov	d4, r8, r9
 800b1d2:	ec45 4b13 	vmov	d3, r4, r5
 800b1d6:	ed9f 2b36 	vldr	d2, [pc, #216]	; 800b2b0 <IMU_turn+0x138>
 800b1da:	eeb0 1a48 	vmov.f32	s2, s16
 800b1de:	eef0 1a68 	vmov.f32	s3, s17
 800b1e2:	ed97 0b00 	vldr	d0, [r7]
 800b1e6:	f7ff f8cf 	bl	800a388 <IMU_Control>
	     while(target_angle < Body_angle){
 800b1ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fd f8d0 	bl	8008394 <__aeabi_i2d>
 800b1f4:	4b32      	ldr	r3, [pc, #200]	; (800b2c0 <IMU_turn+0x148>)
 800b1f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	4623      	mov	r3, r4
 800b1fe:	f7fd fba5 	bl	800894c <__aeabi_dcmplt>
 800b202:	4603      	mov	r3, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d1c8      	bne.n	800b19a <IMU_turn+0x22>
		//printf("ジャイロ : %f \r\n", Body_angle*180/ M_PI);
	     }
	    }
	    if(target_angle > 0){
 800b208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	dd37      	ble.n	800b280 <IMU_turn+0x108>
	     while(target_angle > Body_angle){
 800b210:	e027      	b.n	800b262 <IMU_turn+0xea>

	       IMU_Control(target_angle_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800b212:	4b29      	ldr	r3, [pc, #164]	; (800b2b8 <IMU_turn+0x140>)
 800b214:	ed93 8b00 	vldr	d8, [r3]
 800b218:	4b28      	ldr	r3, [pc, #160]	; (800b2bc <IMU_turn+0x144>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7fd f8cb 	bl	80083b8 <__aeabi_f2d>
 800b222:	4604      	mov	r4, r0
 800b224:	460d      	mov	r5, r1
 800b226:	4b25      	ldr	r3, [pc, #148]	; (800b2bc <IMU_turn+0x144>)
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fd f8c4 	bl	80083b8 <__aeabi_f2d>
 800b230:	4680      	mov	r8, r0
 800b232:	4689      	mov	r9, r1
 800b234:	4b21      	ldr	r3, [pc, #132]	; (800b2bc <IMU_turn+0x144>)
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	4618      	mov	r0, r3
 800b23a:	f7fd f8bd 	bl	80083b8 <__aeabi_f2d>
 800b23e:	4602      	mov	r2, r0
 800b240:	460b      	mov	r3, r1
 800b242:	ec43 2b15 	vmov	d5, r2, r3
 800b246:	ec49 8b14 	vmov	d4, r8, r9
 800b24a:	ec45 4b13 	vmov	d3, r4, r5
 800b24e:	ed9f 2b18 	vldr	d2, [pc, #96]	; 800b2b0 <IMU_turn+0x138>
 800b252:	eeb0 1a48 	vmov.f32	s2, s16
 800b256:	eef0 1a68 	vmov.f32	s3, s17
 800b25a:	ed97 0b00 	vldr	d0, [r7]
 800b25e:	f7ff f893 	bl	800a388 <IMU_Control>
	     while(target_angle > Body_angle){
 800b262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b266:	4618      	mov	r0, r3
 800b268:	f7fd f894 	bl	8008394 <__aeabi_i2d>
 800b26c:	4b14      	ldr	r3, [pc, #80]	; (800b2c0 <IMU_turn+0x148>)
 800b26e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b272:	461a      	mov	r2, r3
 800b274:	4623      	mov	r3, r4
 800b276:	f7fd fb87 	bl	8008988 <__aeabi_dcmpgt>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d1c8      	bne.n	800b212 <IMU_turn+0x9a>
	    			//printf("ジャイロ : %f \r\n", Body_angle*180/ M_PI);
	     }
	    }
	    mode.enc = 0;
 800b280:	4b10      	ldr	r3, [pc, #64]	; (800b2c4 <IMU_turn+0x14c>)
 800b282:	2200      	movs	r2, #0
 800b284:	70da      	strb	r2, [r3, #3]
	    imu_angle = 0;
 800b286:	4a10      	ldr	r2, [pc, #64]	; (800b2c8 <IMU_turn+0x150>)
 800b288:	f04f 0300 	mov.w	r3, #0
 800b28c:	f04f 0400 	mov.w	r4, #0
 800b290:	e9c2 3400 	strd	r3, r4, [r2]
	    Body_angle = 0;
 800b294:	4a0a      	ldr	r2, [pc, #40]	; (800b2c0 <IMU_turn+0x148>)
 800b296:	f04f 0300 	mov.w	r3, #0
 800b29a:	f04f 0400 	mov.w	r4, #0
 800b29e:	e9c2 3400 	strd	r3, r4, [r2]

	//Motor_PWM_Stop();

}
 800b2a2:	bf00      	nop
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	ecbd 8b02 	vpop	{d8}
 800b2ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b2b0:	d2f1a9fc 	.word	0xd2f1a9fc
 800b2b4:	3f50624d 	.word	0x3f50624d
 800b2b8:	200142c0 	.word	0x200142c0
 800b2bc:	20000038 	.word	0x20000038
 800b2c0:	200142b0 	.word	0x200142b0
 800b2c4:	20000068 	.word	0x20000068
 800b2c8:	200142b8 	.word	0x200142b8

0800b2cc <turn_right>:

void turn_right(){
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0

	//左右の車輪速度制御
	//or 角�?�度制御で旋回
	  uint8_t counter=0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	71fb      	strb	r3, [r7, #7]
	  //printf("turnはじめ\r\n");
	   while(counter < 1){
 800b2d6:	e045      	b.n	800b364 <turn_right+0x98>

			Target_velocity = 0;
 800b2d8:	4b28      	ldr	r3, [pc, #160]	; (800b37c <turn_right+0xb0>)
 800b2da:	f04f 0200 	mov.w	r2, #0
 800b2de:	601a      	str	r2, [r3, #0]

			error_reset = 0;
 800b2e0:	4b27      	ldr	r3, [pc, #156]	; (800b380 <turn_right+0xb4>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	701a      	strb	r2, [r3, #0]
			Motor_Count_Clear();
 800b2e6:	f7fe fb9f 	bl	8009a28 <Motor_Count_Clear>
	    EN3_L.integrate = 0;
 800b2ea:	4b26      	ldr	r3, [pc, #152]	; (800b384 <turn_right+0xb8>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	605a      	str	r2, [r3, #4]
	    EN4_R.integrate = 0;
 800b2f0:	4b25      	ldr	r3, [pc, #148]	; (800b388 <turn_right+0xbc>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	605a      	str	r2, [r3, #4]
		  EN_Body.integrate = 0;
 800b2f6:	4b25      	ldr	r3, [pc, #148]	; (800b38c <turn_right+0xc0>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	605a      	str	r2, [r3, #4]
		  mode.enc = 1;
 800b2fc:	4b24      	ldr	r3, [pc, #144]	; (800b390 <turn_right+0xc4>)
 800b2fe:	2201      	movs	r2, #1
 800b300:	70da      	strb	r2, [r3, #3]
		  //int pulse_check ;
		///while(EN3_L.integrate >= -Target_pul_quarter && EN4_R.integrate <= Target_pul_quarter){
	  while(EN3_L.integrate + (-1)*EN4_R.integrate <= Target_pul_quarter*2){
 800b302:	e005      	b.n	800b310 <turn_right+0x44>

		  mode.control = 3;
 800b304:	4b22      	ldr	r3, [pc, #136]	; (800b390 <turn_right+0xc4>)
 800b306:	2203      	movs	r2, #3
 800b308:	715a      	strb	r2, [r3, #5]
		  Target_Rad_velo = -5;//Rotate(Target_Rad_velo, -5, Target_pul_quarter, EN3_L.integrate);
 800b30a:	4b22      	ldr	r3, [pc, #136]	; (800b394 <turn_right+0xc8>)
 800b30c:	4a22      	ldr	r2, [pc, #136]	; (800b398 <turn_right+0xcc>)
 800b30e:	601a      	str	r2, [r3, #0]
	  while(EN3_L.integrate + (-1)*EN4_R.integrate <= Target_pul_quarter*2){
 800b310:	4b1c      	ldr	r3, [pc, #112]	; (800b384 <turn_right+0xb8>)
 800b312:	685a      	ldr	r2, [r3, #4]
 800b314:	4b1c      	ldr	r3, [pc, #112]	; (800b388 <turn_right+0xbc>)
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	ee07 3a90 	vmov	s15, r3
 800b31e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b322:	4b1e      	ldr	r3, [pc, #120]	; (800b39c <turn_right+0xd0>)
 800b324:	edd3 7a00 	vldr	s15, [r3]
 800b328:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b32c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b334:	d9e6      	bls.n	800b304 <turn_right+0x38>
//		  Target_Rad_velo = -10;
		  //pulse_check = EN3_L.integrate + (-1)*EN4_R.integrate;
		  //printf("turn中 %d\r\n",pulse_check);
	    	}

	      mode.enc = 0;
 800b336:	4b16      	ldr	r3, [pc, #88]	; (800b390 <turn_right+0xc4>)
 800b338:	2200      	movs	r2, #0
 800b33a:	70da      	strb	r2, [r3, #3]
	      Target_Rad_velo = 0;
 800b33c:	4b15      	ldr	r3, [pc, #84]	; (800b394 <turn_right+0xc8>)
 800b33e:	f04f 0200 	mov.w	r2, #0
 800b342:	601a      	str	r2, [r3, #0]
//	      mode.control = 4;
//	      Target_Rad_velo = 0;
	      Target_velocity = 0;
 800b344:	4b0d      	ldr	r3, [pc, #52]	; (800b37c <turn_right+0xb0>)
 800b346:	f04f 0200 	mov.w	r2, #0
 800b34a:	601a      	str	r2, [r3, #0]
//			  printf("turn中 %d, <= 目標パルス %f\r\n",pulse_check ,Target_pul_quarter*2);
//
//
//		  }
	      //Target_rotate =0;
	      EN3_L.integrate = 0;
 800b34c:	4b0d      	ldr	r3, [pc, #52]	; (800b384 <turn_right+0xb8>)
 800b34e:	2200      	movs	r2, #0
 800b350:	605a      	str	r2, [r3, #4]
	      EN4_R.integrate = 0;
 800b352:	4b0d      	ldr	r3, [pc, #52]	; (800b388 <turn_right+0xbc>)
 800b354:	2200      	movs	r2, #0
 800b356:	605a      	str	r2, [r3, #4]
	      EN_Body.integrate = 0;
 800b358:	4b0c      	ldr	r3, [pc, #48]	; (800b38c <turn_right+0xc0>)
 800b35a:	2200      	movs	r2, #0
 800b35c:	605a      	str	r2, [r3, #4]
	      counter++;
 800b35e:	79fb      	ldrb	r3, [r7, #7]
 800b360:	3301      	adds	r3, #1
 800b362:	71fb      	strb	r3, [r7, #7]
	   while(counter < 1){
 800b364:	79fb      	ldrb	r3, [r7, #7]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d0b6      	beq.n	800b2d8 <turn_right+0xc>
	     }
		error_reset = 0;
 800b36a:	4b05      	ldr	r3, [pc, #20]	; (800b380 <turn_right+0xb4>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	701a      	strb	r2, [r3, #0]
		Motor_Count_Clear();
 800b370:	f7fe fb5a 	bl	8009a28 <Motor_Count_Clear>




}
 800b374:	bf00      	nop
 800b376:	3708      	adds	r7, #8
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	200142a8 	.word	0x200142a8
 800b380:	2000026c 	.word	0x2000026c
 800b384:	20000044 	.word	0x20000044
 800b388:	20000050 	.word	0x20000050
 800b38c:	2000005c 	.word	0x2000005c
 800b390:	20000068 	.word	0x20000068
 800b394:	200142ac 	.word	0x200142ac
 800b398:	c0a00000 	.word	0xc0a00000
 800b39c:	20000004 	.word	0x20000004

0800b3a0 <turn_left>:

void turn_left(){
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0

	  uint8_t counter=0;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	71fb      	strb	r3, [r7, #7]
	  //static int check = 0, check2 = 0;

    while(counter < 1){
 800b3aa:	e045      	b.n	800b438 <turn_left+0x98>

			Target_velocity = 0;
 800b3ac:	4b28      	ldr	r3, [pc, #160]	; (800b450 <turn_left+0xb0>)
 800b3ae:	f04f 0200 	mov.w	r2, #0
 800b3b2:	601a      	str	r2, [r3, #0]
			error_reset = 0;
 800b3b4:	4b27      	ldr	r3, [pc, #156]	; (800b454 <turn_left+0xb4>)
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	701a      	strb	r2, [r3, #0]
			Motor_Count_Clear();
 800b3ba:	f7fe fb35 	bl	8009a28 <Motor_Count_Clear>
	      EN3_L.integrate = 0;
 800b3be:	4b26      	ldr	r3, [pc, #152]	; (800b458 <turn_left+0xb8>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	605a      	str	r2, [r3, #4]
	      EN4_R.integrate = 0;
 800b3c4:	4b25      	ldr	r3, [pc, #148]	; (800b45c <turn_left+0xbc>)
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	605a      	str	r2, [r3, #4]
		  EN_Body.integrate = 0;
 800b3ca:	4b25      	ldr	r3, [pc, #148]	; (800b460 <turn_left+0xc0>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	605a      	str	r2, [r3, #4]
		  mode.enc = 1;
 800b3d0:	4b24      	ldr	r3, [pc, #144]	; (800b464 <turn_left+0xc4>)
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	70da      	strb	r2, [r3, #3]
	while((-1)*EN3_L.integrate + EN4_R.integrate <= Target_pul_quarter * 2){
 800b3d6:	e005      	b.n	800b3e4 <turn_left+0x44>

		  mode.control = 3;
 800b3d8:	4b22      	ldr	r3, [pc, #136]	; (800b464 <turn_left+0xc4>)
 800b3da:	2203      	movs	r2, #3
 800b3dc:	715a      	strb	r2, [r3, #5]
		  Target_Rad_velo = 5;//Rotate(Target_Rad_velo, 5, Target_pul_quarter, EN4_R.integrate);
 800b3de:	4b22      	ldr	r3, [pc, #136]	; (800b468 <turn_left+0xc8>)
 800b3e0:	4a22      	ldr	r2, [pc, #136]	; (800b46c <turn_left+0xcc>)
 800b3e2:	601a      	str	r2, [r3, #0]
	while((-1)*EN3_L.integrate + EN4_R.integrate <= Target_pul_quarter * 2){
 800b3e4:	4b1d      	ldr	r3, [pc, #116]	; (800b45c <turn_left+0xbc>)
 800b3e6:	685a      	ldr	r2, [r3, #4]
 800b3e8:	4b1b      	ldr	r3, [pc, #108]	; (800b458 <turn_left+0xb8>)
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	ee07 3a90 	vmov	s15, r3
 800b3f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b3f6:	4b1e      	ldr	r3, [pc, #120]	; (800b470 <turn_left+0xd0>)
 800b3f8:	edd3 7a00 	vldr	s15, [r3]
 800b3fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b400:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b408:	d9e6      	bls.n	800b3d8 <turn_left+0x38>
//	      check = EN3_L.integrate;
//	      check2 = EN4_R.integrate;
//		mode.control = 3;
//		Target_Rad_velo = 10;
	}
    mode.enc = 0;
 800b40a:	4b16      	ldr	r3, [pc, #88]	; (800b464 <turn_left+0xc4>)
 800b40c:	2200      	movs	r2, #0
 800b40e:	70da      	strb	r2, [r3, #3]
    Target_Rad_velo = 0;
 800b410:	4b15      	ldr	r3, [pc, #84]	; (800b468 <turn_left+0xc8>)
 800b412:	f04f 0200 	mov.w	r2, #0
 800b416:	601a      	str	r2, [r3, #0]
//	mode.control = 4;
//	Target_Rad_velo = 0;
    Target_velocity = 0;
 800b418:	4b0d      	ldr	r3, [pc, #52]	; (800b450 <turn_left+0xb0>)
 800b41a:	f04f 0200 	mov.w	r2, #0
 800b41e:	601a      	str	r2, [r3, #0]
    //Target_rotate =0;
    EN3_L.integrate = 0;
 800b420:	4b0d      	ldr	r3, [pc, #52]	; (800b458 <turn_left+0xb8>)
 800b422:	2200      	movs	r2, #0
 800b424:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b426:	4b0d      	ldr	r3, [pc, #52]	; (800b45c <turn_left+0xbc>)
 800b428:	2200      	movs	r2, #0
 800b42a:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b42c:	4b0c      	ldr	r3, [pc, #48]	; (800b460 <turn_left+0xc0>)
 800b42e:	2200      	movs	r2, #0
 800b430:	605a      	str	r2, [r3, #4]
    counter++;
 800b432:	79fb      	ldrb	r3, [r7, #7]
 800b434:	3301      	adds	r3, #1
 800b436:	71fb      	strb	r3, [r7, #7]
    while(counter < 1){
 800b438:	79fb      	ldrb	r3, [r7, #7]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d0b6      	beq.n	800b3ac <turn_left+0xc>
   }
	error_reset = 0;
 800b43e:	4b05      	ldr	r3, [pc, #20]	; (800b454 <turn_left+0xb4>)
 800b440:	2200      	movs	r2, #0
 800b442:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800b444:	f7fe faf0 	bl	8009a28 <Motor_Count_Clear>
//    printf("左に90°回転時左 : %d \r\n",check);
//    printf("左に90°回転時右 : %d \r\n",check2);
//    printf("\r\n");

}
 800b448:	bf00      	nop
 800b44a:	3708      	adds	r7, #8
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	200142a8 	.word	0x200142a8
 800b454:	2000026c 	.word	0x2000026c
 800b458:	20000044 	.word	0x20000044
 800b45c:	20000050 	.word	0x20000050
 800b460:	2000005c 	.word	0x2000005c
 800b464:	20000068 	.word	0x20000068
 800b468:	200142ac 	.word	0x200142ac
 800b46c:	40a00000 	.word	0x40a00000
 800b470:	20000004 	.word	0x20000004
 800b474:	00000000 	.word	0x00000000

0800b478 <slow_turn_R>:

void slow_turn_R(){
 800b478:	b598      	push	{r3, r4, r7, lr}
 800b47a:	af00      	add	r7, sp, #0

		mode.control = 6;
 800b47c:	4b50      	ldr	r3, [pc, #320]	; (800b5c0 <slow_turn_R+0x148>)
 800b47e:	2206      	movs	r2, #6
 800b480:	715a      	strb	r2, [r3, #5]

		while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b482:	e002      	b.n	800b48a <slow_turn_R+0x12>
			mode.accel = 6;
 800b484:	4b4e      	ldr	r3, [pc, #312]	; (800b5c0 <slow_turn_R+0x148>)
 800b486:	2206      	movs	r2, #6
 800b488:	705a      	strb	r2, [r3, #1]
		while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b48a:	4b4e      	ldr	r3, [pc, #312]	; (800b5c4 <slow_turn_R+0x14c>)
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	4b4e      	ldr	r3, [pc, #312]	; (800b5c8 <slow_turn_R+0x150>)
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	4413      	add	r3, r2
 800b494:	4618      	mov	r0, r3
 800b496:	f7fc ff7d 	bl	8008394 <__aeabi_i2d>
 800b49a:	a33f      	add	r3, pc, #252	; (adr r3, 800b598 <slow_turn_R+0x120>)
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	f7fd fa54 	bl	800894c <__aeabi_dcmplt>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1ec      	bne.n	800b484 <slow_turn_R+0xc>

		}
		mode.accel = 0;
 800b4aa:	4b45      	ldr	r3, [pc, #276]	; (800b5c0 <slow_turn_R+0x148>)
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	705a      	strb	r2, [r3, #1]

		while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b4b0:	e021      	b.n	800b4f6 <slow_turn_R+0x7e>
			Target_velocity = CURVE_SPEED;
 800b4b2:	4b46      	ldr	r3, [pc, #280]	; (800b5cc <slow_turn_R+0x154>)
 800b4b4:	4a46      	ldr	r2, [pc, #280]	; (800b5d0 <slow_turn_R+0x158>)
 800b4b6:	601a      	str	r2, [r3, #0]
			Target_L_velo = CURVE_SPEED  * (90+TREAD_WIDTH)/90;//130/90;//124.6/90;
 800b4b8:	4b46      	ldr	r3, [pc, #280]	; (800b5d4 <slow_turn_R+0x15c>)
 800b4ba:	4a47      	ldr	r2, [pc, #284]	; (800b5d8 <slow_turn_R+0x160>)
 800b4bc:	601a      	str	r2, [r3, #0]
			Target_R_velo = Target_L_velo * (90-TREAD_WIDTH) / (90+TREAD_WIDTH);//50/130;//55.4 / 124.6;
 800b4be:	4b45      	ldr	r3, [pc, #276]	; (800b5d4 <slow_turn_R+0x15c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7fc ff78 	bl	80083b8 <__aeabi_f2d>
 800b4c8:	a335      	add	r3, pc, #212	; (adr r3, 800b5a0 <slow_turn_R+0x128>)
 800b4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ce:	f7fc ffcb 	bl	8008468 <__aeabi_dmul>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	460c      	mov	r4, r1
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	4621      	mov	r1, r4
 800b4da:	a333      	add	r3, pc, #204	; (adr r3, 800b5a8 <slow_turn_R+0x130>)
 800b4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e0:	f7fd f8ec 	bl	80086bc <__aeabi_ddiv>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	4621      	mov	r1, r4
 800b4ec:	f7fd fa94 	bl	8008a18 <__aeabi_d2f>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	4b3a      	ldr	r3, [pc, #232]	; (800b5dc <slow_turn_R+0x164>)
 800b4f4:	601a      	str	r2, [r3, #0]
		while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b4f6:	4b33      	ldr	r3, [pc, #204]	; (800b5c4 <slow_turn_R+0x14c>)
 800b4f8:	685a      	ldr	r2, [r3, #4]
 800b4fa:	4b33      	ldr	r3, [pc, #204]	; (800b5c8 <slow_turn_R+0x150>)
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	4413      	add	r3, r2
 800b500:	4618      	mov	r0, r3
 800b502:	f7fc ff47 	bl	8008394 <__aeabi_i2d>
 800b506:	a324      	add	r3, pc, #144	; (adr r3, 800b598 <slow_turn_R+0x120>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	f7fd fa32 	bl	8008974 <__aeabi_dcmpge>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00f      	beq.n	800b536 <slow_turn_R+0xbe>
 800b516:	4b2b      	ldr	r3, [pc, #172]	; (800b5c4 <slow_turn_R+0x14c>)
 800b518:	685a      	ldr	r2, [r3, #4]
 800b51a:	4b2b      	ldr	r3, [pc, #172]	; (800b5c8 <slow_turn_R+0x150>)
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	4413      	add	r3, r2
 800b520:	4618      	mov	r0, r3
 800b522:	f7fc ff37 	bl	8008394 <__aeabi_i2d>
 800b526:	a322      	add	r3, pc, #136	; (adr r3, 800b5b0 <slow_turn_R+0x138>)
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f7fd fa0e 	bl	800894c <__aeabi_dcmplt>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1bd      	bne.n	800b4b2 <slow_turn_R+0x3a>

		}
		while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b536:	e002      	b.n	800b53e <slow_turn_R+0xc6>
			mode.accel = 7;
 800b538:	4b21      	ldr	r3, [pc, #132]	; (800b5c0 <slow_turn_R+0x148>)
 800b53a:	2207      	movs	r2, #7
 800b53c:	705a      	strb	r2, [r3, #1]
		while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b53e:	4b21      	ldr	r3, [pc, #132]	; (800b5c4 <slow_turn_R+0x14c>)
 800b540:	685a      	ldr	r2, [r3, #4]
 800b542:	4b21      	ldr	r3, [pc, #132]	; (800b5c8 <slow_turn_R+0x150>)
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	4413      	add	r3, r2
 800b548:	4618      	mov	r0, r3
 800b54a:	f7fc ff23 	bl	8008394 <__aeabi_i2d>
 800b54e:	a31a      	add	r3, pc, #104	; (adr r3, 800b5b8 <slow_turn_R+0x140>)
 800b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b554:	f7fd f9fa 	bl	800894c <__aeabi_dcmplt>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1ec      	bne.n	800b538 <slow_turn_R+0xc0>

		}
		mode.accel = 0;
 800b55e:	4b18      	ldr	r3, [pc, #96]	; (800b5c0 <slow_turn_R+0x148>)
 800b560:	2200      	movs	r2, #0
 800b562:	705a      	strb	r2, [r3, #1]
//		if(Body_angle < -90){
//			IMU_init();
//			break;
//		}

	mode.control = 4;
 800b564:	4b16      	ldr	r3, [pc, #88]	; (800b5c0 <slow_turn_R+0x148>)
 800b566:	2204      	movs	r2, #4
 800b568:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b56a:	4b16      	ldr	r3, [pc, #88]	; (800b5c4 <slow_turn_R+0x14c>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b570:	4b15      	ldr	r3, [pc, #84]	; (800b5c8 <slow_turn_R+0x150>)
 800b572:	2200      	movs	r2, #0
 800b574:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b576:	4b1a      	ldr	r3, [pc, #104]	; (800b5e0 <slow_turn_R+0x168>)
 800b578:	2200      	movs	r2, #0
 800b57a:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b57c:	4b15      	ldr	r3, [pc, #84]	; (800b5d4 <slow_turn_R+0x15c>)
 800b57e:	f04f 0200 	mov.w	r2, #0
 800b582:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b584:	4b15      	ldr	r3, [pc, #84]	; (800b5dc <slow_turn_R+0x164>)
 800b586:	f04f 0200 	mov.w	r2, #0
 800b58a:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b58c:	4b0f      	ldr	r3, [pc, #60]	; (800b5cc <slow_turn_R+0x154>)
 800b58e:	4a15      	ldr	r2, [pc, #84]	; (800b5e4 <slow_turn_R+0x16c>)
 800b590:	601a      	str	r2, [r3, #0]
}
 800b592:	bf00      	nop
 800b594:	bd98      	pop	{r3, r4, r7, pc}
 800b596:	bf00      	nop
 800b598:	234f4839 	.word	0x234f4839
 800b59c:	40b7f082 	.word	0x40b7f082
 800b5a0:	cccccccd 	.word	0xcccccccd
 800b5a4:	404bcccc 	.word	0x404bcccc
 800b5a8:	9999999a 	.word	0x9999999a
 800b5ac:	405f1999 	.word	0x405f1999
 800b5b0:	5fa0080d 	.word	0x5fa0080d
 800b5b4:	40eff582 	.word	0x40eff582
 800b5b8:	5204f88a 	.word	0x5204f88a
 800b5bc:	40f179c9 	.word	0x40f179c9
 800b5c0:	20000068 	.word	0x20000068
 800b5c4:	20000044 	.word	0x20000044
 800b5c8:	20000050 	.word	0x20000050
 800b5cc:	200142a8 	.word	0x200142a8
 800b5d0:	43340000 	.word	0x43340000
 800b5d4:	20018394 	.word	0x20018394
 800b5d8:	4378cccd 	.word	0x4378cccd
 800b5dc:	20018374 	.word	0x20018374
 800b5e0:	2000005c 	.word	0x2000005c
 800b5e4:	43960000 	.word	0x43960000

0800b5e8 <slow_turn_L>:

void slow_turn_L(){
 800b5e8:	b598      	push	{r3, r4, r7, lr}
 800b5ea:	af00      	add	r7, sp, #0
	//左右輪制御
	mode.control = 6;
 800b5ec:	4b50      	ldr	r3, [pc, #320]	; (800b730 <slow_turn_L+0x148>)
 800b5ee:	2206      	movs	r2, #6
 800b5f0:	715a      	strb	r2, [r3, #5]

	//等加速度�?速減�??
	while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b5f2:	e002      	b.n	800b5fa <slow_turn_L+0x12>
		mode.accel = 4;
 800b5f4:	4b4e      	ldr	r3, [pc, #312]	; (800b730 <slow_turn_L+0x148>)
 800b5f6:	2204      	movs	r2, #4
 800b5f8:	705a      	strb	r2, [r3, #1]
	while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b5fa:	4b4e      	ldr	r3, [pc, #312]	; (800b734 <slow_turn_L+0x14c>)
 800b5fc:	685a      	ldr	r2, [r3, #4]
 800b5fe:	4b4e      	ldr	r3, [pc, #312]	; (800b738 <slow_turn_L+0x150>)
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	4413      	add	r3, r2
 800b604:	4618      	mov	r0, r3
 800b606:	f7fc fec5 	bl	8008394 <__aeabi_i2d>
 800b60a:	a33f      	add	r3, pc, #252	; (adr r3, 800b708 <slow_turn_L+0x120>)
 800b60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b610:	f7fd f99c 	bl	800894c <__aeabi_dcmplt>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1ec      	bne.n	800b5f4 <slow_turn_L+0xc>

	}
	//�?速やめる
	mode.accel = 0;
 800b61a:	4b45      	ldr	r3, [pc, #276]	; (800b730 <slow_turn_L+0x148>)
 800b61c:	2200      	movs	r2, #0
 800b61e:	705a      	strb	r2, [r3, #1]

	//等�?�カー�?
	while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b620:	e021      	b.n	800b666 <slow_turn_L+0x7e>
		Target_velocity = CURVE_SPEED;
 800b622:	4b46      	ldr	r3, [pc, #280]	; (800b73c <slow_turn_L+0x154>)
 800b624:	4a46      	ldr	r2, [pc, #280]	; (800b740 <slow_turn_L+0x158>)
 800b626:	601a      	str	r2, [r3, #0]
		Target_R_velo = CURVE_SPEED   * (90+TREAD_WIDTH)/90;
 800b628:	4b46      	ldr	r3, [pc, #280]	; (800b744 <slow_turn_L+0x15c>)
 800b62a:	4a47      	ldr	r2, [pc, #284]	; (800b748 <slow_turn_L+0x160>)
 800b62c:	601a      	str	r2, [r3, #0]
		Target_L_velo = Target_R_velo * (90-TREAD_WIDTH) / (90+TREAD_WIDTH);
 800b62e:	4b45      	ldr	r3, [pc, #276]	; (800b744 <slow_turn_L+0x15c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4618      	mov	r0, r3
 800b634:	f7fc fec0 	bl	80083b8 <__aeabi_f2d>
 800b638:	a335      	add	r3, pc, #212	; (adr r3, 800b710 <slow_turn_L+0x128>)
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	f7fc ff13 	bl	8008468 <__aeabi_dmul>
 800b642:	4603      	mov	r3, r0
 800b644:	460c      	mov	r4, r1
 800b646:	4618      	mov	r0, r3
 800b648:	4621      	mov	r1, r4
 800b64a:	a333      	add	r3, pc, #204	; (adr r3, 800b718 <slow_turn_L+0x130>)
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	f7fd f834 	bl	80086bc <__aeabi_ddiv>
 800b654:	4603      	mov	r3, r0
 800b656:	460c      	mov	r4, r1
 800b658:	4618      	mov	r0, r3
 800b65a:	4621      	mov	r1, r4
 800b65c:	f7fd f9dc 	bl	8008a18 <__aeabi_d2f>
 800b660:	4602      	mov	r2, r0
 800b662:	4b3a      	ldr	r3, [pc, #232]	; (800b74c <slow_turn_L+0x164>)
 800b664:	601a      	str	r2, [r3, #0]
	while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b666:	4b33      	ldr	r3, [pc, #204]	; (800b734 <slow_turn_L+0x14c>)
 800b668:	685a      	ldr	r2, [r3, #4]
 800b66a:	4b33      	ldr	r3, [pc, #204]	; (800b738 <slow_turn_L+0x150>)
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	4413      	add	r3, r2
 800b670:	4618      	mov	r0, r3
 800b672:	f7fc fe8f 	bl	8008394 <__aeabi_i2d>
 800b676:	a324      	add	r3, pc, #144	; (adr r3, 800b708 <slow_turn_L+0x120>)
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	f7fd f97a 	bl	8008974 <__aeabi_dcmpge>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00f      	beq.n	800b6a6 <slow_turn_L+0xbe>
 800b686:	4b2b      	ldr	r3, [pc, #172]	; (800b734 <slow_turn_L+0x14c>)
 800b688:	685a      	ldr	r2, [r3, #4]
 800b68a:	4b2b      	ldr	r3, [pc, #172]	; (800b738 <slow_turn_L+0x150>)
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	4413      	add	r3, r2
 800b690:	4618      	mov	r0, r3
 800b692:	f7fc fe7f 	bl	8008394 <__aeabi_i2d>
 800b696:	a322      	add	r3, pc, #136	; (adr r3, 800b720 <slow_turn_L+0x138>)
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	f7fd f956 	bl	800894c <__aeabi_dcmplt>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1bd      	bne.n	800b622 <slow_turn_L+0x3a>
		//タイヤ�?が�?くなってから比率を変えて�?なかった�?��?
	}
	//等加速度�?速減�??
	while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b6a6:	e002      	b.n	800b6ae <slow_turn_L+0xc6>
		mode.accel = 5;
 800b6a8:	4b21      	ldr	r3, [pc, #132]	; (800b730 <slow_turn_L+0x148>)
 800b6aa:	2205      	movs	r2, #5
 800b6ac:	705a      	strb	r2, [r3, #1]
	while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b6ae:	4b21      	ldr	r3, [pc, #132]	; (800b734 <slow_turn_L+0x14c>)
 800b6b0:	685a      	ldr	r2, [r3, #4]
 800b6b2:	4b21      	ldr	r3, [pc, #132]	; (800b738 <slow_turn_L+0x150>)
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fc fe6b 	bl	8008394 <__aeabi_i2d>
 800b6be:	a31a      	add	r3, pc, #104	; (adr r3, 800b728 <slow_turn_L+0x140>)
 800b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c4:	f7fd f942 	bl	800894c <__aeabi_dcmplt>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1ec      	bne.n	800b6a8 <slow_turn_L+0xc0>

	}
	//�?減�?�やめる
	mode.accel = 0;
 800b6ce:	4b18      	ldr	r3, [pc, #96]	; (800b730 <slow_turn_L+0x148>)
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	705a      	strb	r2, [r3, #1]
//		if(Body_angle > 90){
//			IMU_init();
//			break;
//		}

	mode.control = 4;
 800b6d4:	4b16      	ldr	r3, [pc, #88]	; (800b730 <slow_turn_L+0x148>)
 800b6d6:	2204      	movs	r2, #4
 800b6d8:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b6da:	4b16      	ldr	r3, [pc, #88]	; (800b734 <slow_turn_L+0x14c>)
 800b6dc:	2200      	movs	r2, #0
 800b6de:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b6e0:	4b15      	ldr	r3, [pc, #84]	; (800b738 <slow_turn_L+0x150>)
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b6e6:	4b1a      	ldr	r3, [pc, #104]	; (800b750 <slow_turn_L+0x168>)
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b6ec:	4b17      	ldr	r3, [pc, #92]	; (800b74c <slow_turn_L+0x164>)
 800b6ee:	f04f 0200 	mov.w	r2, #0
 800b6f2:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b6f4:	4b13      	ldr	r3, [pc, #76]	; (800b744 <slow_turn_L+0x15c>)
 800b6f6:	f04f 0200 	mov.w	r2, #0
 800b6fa:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b6fc:	4b0f      	ldr	r3, [pc, #60]	; (800b73c <slow_turn_L+0x154>)
 800b6fe:	4a15      	ldr	r2, [pc, #84]	; (800b754 <slow_turn_L+0x16c>)
 800b700:	601a      	str	r2, [r3, #0]
}
 800b702:	bf00      	nop
 800b704:	bd98      	pop	{r3, r4, r7, pc}
 800b706:	bf00      	nop
 800b708:	234f4839 	.word	0x234f4839
 800b70c:	40b7f082 	.word	0x40b7f082
 800b710:	cccccccd 	.word	0xcccccccd
 800b714:	404bcccc 	.word	0x404bcccc
 800b718:	9999999a 	.word	0x9999999a
 800b71c:	405f1999 	.word	0x405f1999
 800b720:	5fa0080d 	.word	0x5fa0080d
 800b724:	40eff582 	.word	0x40eff582
 800b728:	5204f88a 	.word	0x5204f88a
 800b72c:	40f179c9 	.word	0x40f179c9
 800b730:	20000068 	.word	0x20000068
 800b734:	20000044 	.word	0x20000044
 800b738:	20000050 	.word	0x20000050
 800b73c:	200142a8 	.word	0x200142a8
 800b740:	43340000 	.word	0x43340000
 800b744:	20018374 	.word	0x20018374
 800b748:	4378cccd 	.word	0x4378cccd
 800b74c:	20018394 	.word	0x20018394
 800b750:	2000005c 	.word	0x2000005c
 800b754:	43960000 	.word	0x43960000

0800b758 <shinchi_turn_R>:

void shinchi_turn_R(){
 800b758:	b580      	push	{r7, lr}
 800b75a:	af00      	add	r7, sp, #0

	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2 ){
 800b75c:	e070      	b.n	800b840 <shinchi_turn_R+0xe8>
		if(EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2){
 800b75e:	4b54      	ldr	r3, [pc, #336]	; (800b8b0 <shinchi_turn_R+0x158>)
 800b760:	685a      	ldr	r2, [r3, #4]
 800b762:	4b54      	ldr	r3, [pc, #336]	; (800b8b4 <shinchi_turn_R+0x15c>)
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	4413      	add	r3, r2
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fc fe13 	bl	8008394 <__aeabi_i2d>
 800b76e:	a34a      	add	r3, pc, #296	; (adr r3, 800b898 <shinchi_turn_R+0x140>)
 800b770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b774:	f7fd f8ea 	bl	800894c <__aeabi_dcmplt>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d005      	beq.n	800b78a <shinchi_turn_R+0x32>
			mode.control = 4;
 800b77e:	4b4e      	ldr	r3, [pc, #312]	; (800b8b8 <shinchi_turn_R+0x160>)
 800b780:	2204      	movs	r2, #4
 800b782:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b784:	4b4d      	ldr	r3, [pc, #308]	; (800b8bc <shinchi_turn_R+0x164>)
 800b786:	4a4e      	ldr	r2, [pc, #312]	; (800b8c0 <shinchi_turn_R+0x168>)
 800b788:	601a      	str	r2, [r3, #0]
		}
		if(DECE_CURVE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE){
 800b78a:	4b49      	ldr	r3, [pc, #292]	; (800b8b0 <shinchi_turn_R+0x158>)
 800b78c:	685a      	ldr	r2, [r3, #4]
 800b78e:	4b49      	ldr	r3, [pc, #292]	; (800b8b4 <shinchi_turn_R+0x15c>)
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	4413      	add	r3, r2
 800b794:	4618      	mov	r0, r3
 800b796:	f7fc fdfd 	bl	8008394 <__aeabi_i2d>
 800b79a:	a33f      	add	r3, pc, #252	; (adr r3, 800b898 <shinchi_turn_R+0x140>)
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	f7fd f8e8 	bl	8008974 <__aeabi_dcmpge>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d022      	beq.n	800b7f0 <shinchi_turn_R+0x98>
 800b7aa:	4b41      	ldr	r3, [pc, #260]	; (800b8b0 <shinchi_turn_R+0x158>)
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	4b41      	ldr	r3, [pc, #260]	; (800b8b4 <shinchi_turn_R+0x15c>)
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7fc fded 	bl	8008394 <__aeabi_i2d>
 800b7ba:	a339      	add	r3, pc, #228	; (adr r3, 800b8a0 <shinchi_turn_R+0x148>)
 800b7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c0:	f7fd f8c4 	bl	800894c <__aeabi_dcmplt>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d012      	beq.n	800b7f0 <shinchi_turn_R+0x98>
		mode.control = 6;
 800b7ca:	4b3b      	ldr	r3, [pc, #236]	; (800b8b8 <shinchi_turn_R+0x160>)
 800b7cc:	2206      	movs	r2, #6
 800b7ce:	715a      	strb	r2, [r3, #5]
		//IMU_Control(Target_Rad_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
		Target_velocity = CURVE_SPEED;
 800b7d0:	4b3a      	ldr	r3, [pc, #232]	; (800b8bc <shinchi_turn_R+0x164>)
 800b7d2:	4a3b      	ldr	r2, [pc, #236]	; (800b8c0 <shinchi_turn_R+0x168>)
 800b7d4:	601a      	str	r2, [r3, #0]
		Target_L_velo = CURVE_SPEED  * 2;
 800b7d6:	4b3b      	ldr	r3, [pc, #236]	; (800b8c4 <shinchi_turn_R+0x16c>)
 800b7d8:	4a3b      	ldr	r2, [pc, #236]	; (800b8c8 <shinchi_turn_R+0x170>)
 800b7da:	601a      	str	r2, [r3, #0]
		Target_R_velo = Target_L_velo * 0;
 800b7dc:	4b39      	ldr	r3, [pc, #228]	; (800b8c4 <shinchi_turn_R+0x16c>)
 800b7de:	edd3 7a00 	vldr	s15, [r3]
 800b7e2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800b8cc <shinchi_turn_R+0x174>
 800b7e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7ea:	4b39      	ldr	r3, [pc, #228]	; (800b8d0 <shinchi_turn_R+0x178>)
 800b7ec:	edc3 7a00 	vstr	s15, [r3]
		}
		if(DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 4 + SHINCHI_ROTATE_PULSE){
 800b7f0:	4b2f      	ldr	r3, [pc, #188]	; (800b8b0 <shinchi_turn_R+0x158>)
 800b7f2:	685a      	ldr	r2, [r3, #4]
 800b7f4:	4b2f      	ldr	r3, [pc, #188]	; (800b8b4 <shinchi_turn_R+0x15c>)
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fc fdca 	bl	8008394 <__aeabi_i2d>
 800b800:	a327      	add	r3, pc, #156	; (adr r3, 800b8a0 <shinchi_turn_R+0x148>)
 800b802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b806:	f7fd f8b5 	bl	8008974 <__aeabi_dcmpge>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d100      	bne.n	800b812 <shinchi_turn_R+0xba>
 800b810:	e016      	b.n	800b840 <shinchi_turn_R+0xe8>
 800b812:	4b27      	ldr	r3, [pc, #156]	; (800b8b0 <shinchi_turn_R+0x158>)
 800b814:	685a      	ldr	r2, [r3, #4]
 800b816:	4b27      	ldr	r3, [pc, #156]	; (800b8b4 <shinchi_turn_R+0x15c>)
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	4413      	add	r3, r2
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7fc fdb9 	bl	8008394 <__aeabi_i2d>
 800b822:	a321      	add	r3, pc, #132	; (adr r3, 800b8a8 <shinchi_turn_R+0x150>)
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	f7fd f890 	bl	800894c <__aeabi_dcmplt>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d100      	bne.n	800b834 <shinchi_turn_R+0xdc>
 800b832:	e005      	b.n	800b840 <shinchi_turn_R+0xe8>
			mode.control = 4;
 800b834:	4b20      	ldr	r3, [pc, #128]	; (800b8b8 <shinchi_turn_R+0x160>)
 800b836:	2204      	movs	r2, #4
 800b838:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b83a:	4b20      	ldr	r3, [pc, #128]	; (800b8bc <shinchi_turn_R+0x164>)
 800b83c:	4a20      	ldr	r2, [pc, #128]	; (800b8c0 <shinchi_turn_R+0x168>)
 800b83e:	601a      	str	r2, [r3, #0]
	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2 ){
 800b840:	4b1b      	ldr	r3, [pc, #108]	; (800b8b0 <shinchi_turn_R+0x158>)
 800b842:	685a      	ldr	r2, [r3, #4]
 800b844:	4b1b      	ldr	r3, [pc, #108]	; (800b8b4 <shinchi_turn_R+0x15c>)
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	4413      	add	r3, r2
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fc fda2 	bl	8008394 <__aeabi_i2d>
 800b850:	a315      	add	r3, pc, #84	; (adr r3, 800b8a8 <shinchi_turn_R+0x150>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	f7fd f879 	bl	800894c <__aeabi_dcmplt>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f47f af7e 	bne.w	800b75e <shinchi_turn_R+0x6>
//			IMU_init();
//			break;
//		}

	}
	mode.control = 4;
 800b862:	4b15      	ldr	r3, [pc, #84]	; (800b8b8 <shinchi_turn_R+0x160>)
 800b864:	2204      	movs	r2, #4
 800b866:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b868:	4b11      	ldr	r3, [pc, #68]	; (800b8b0 <shinchi_turn_R+0x158>)
 800b86a:	2200      	movs	r2, #0
 800b86c:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b86e:	4b11      	ldr	r3, [pc, #68]	; (800b8b4 <shinchi_turn_R+0x15c>)
 800b870:	2200      	movs	r2, #0
 800b872:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b874:	4b17      	ldr	r3, [pc, #92]	; (800b8d4 <shinchi_turn_R+0x17c>)
 800b876:	2200      	movs	r2, #0
 800b878:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b87a:	4b12      	ldr	r3, [pc, #72]	; (800b8c4 <shinchi_turn_R+0x16c>)
 800b87c:	f04f 0200 	mov.w	r2, #0
 800b880:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b882:	4b13      	ldr	r3, [pc, #76]	; (800b8d0 <shinchi_turn_R+0x178>)
 800b884:	f04f 0200 	mov.w	r2, #0
 800b888:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b88a:	4b0c      	ldr	r3, [pc, #48]	; (800b8bc <shinchi_turn_R+0x164>)
 800b88c:	4a12      	ldr	r2, [pc, #72]	; (800b8d8 <shinchi_turn_R+0x180>)
 800b88e:	601a      	str	r2, [r3, #0]

}
 800b890:	bf00      	nop
 800b892:	bd80      	pop	{r7, pc}
 800b894:	f3af 8000 	nop.w
 800b898:	471cbc92 	.word	0x471cbc92
 800b89c:	40db7df9 	.word	0x40db7df9
 800b8a0:	b277ffd6 	.word	0xb277ffd6
 800b8a4:	40eb1af2 	.word	0x40eb1af2
 800b8a8:	ab032f10 	.word	0xab032f10
 800b8ac:	40f46cf7 	.word	0x40f46cf7
 800b8b0:	20000044 	.word	0x20000044
 800b8b4:	20000050 	.word	0x20000050
 800b8b8:	20000068 	.word	0x20000068
 800b8bc:	200142a8 	.word	0x200142a8
 800b8c0:	43340000 	.word	0x43340000
 800b8c4:	20018394 	.word	0x20018394
 800b8c8:	43b40000 	.word	0x43b40000
 800b8cc:	00000000 	.word	0x00000000
 800b8d0:	20018374 	.word	0x20018374
 800b8d4:	2000005c 	.word	0x2000005c
 800b8d8:	43960000 	.word	0x43960000
 800b8dc:	00000000 	.word	0x00000000

0800b8e0 <shinchi_turn_L>:
void shinchi_turn_L(){
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	af00      	add	r7, sp, #0

	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2){
 800b8e4:	e070      	b.n	800b9c8 <shinchi_turn_L+0xe8>
		if(EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2){
 800b8e6:	4b54      	ldr	r3, [pc, #336]	; (800ba38 <shinchi_turn_L+0x158>)
 800b8e8:	685a      	ldr	r2, [r3, #4]
 800b8ea:	4b54      	ldr	r3, [pc, #336]	; (800ba3c <shinchi_turn_L+0x15c>)
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7fc fd4f 	bl	8008394 <__aeabi_i2d>
 800b8f6:	a34a      	add	r3, pc, #296	; (adr r3, 800ba20 <shinchi_turn_L+0x140>)
 800b8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fc:	f7fd f826 	bl	800894c <__aeabi_dcmplt>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d005      	beq.n	800b912 <shinchi_turn_L+0x32>
			mode.control = 4;
 800b906:	4b4e      	ldr	r3, [pc, #312]	; (800ba40 <shinchi_turn_L+0x160>)
 800b908:	2204      	movs	r2, #4
 800b90a:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b90c:	4b4d      	ldr	r3, [pc, #308]	; (800ba44 <shinchi_turn_L+0x164>)
 800b90e:	4a4e      	ldr	r2, [pc, #312]	; (800ba48 <shinchi_turn_L+0x168>)
 800b910:	601a      	str	r2, [r3, #0]
		}
		if(DECE_CURVE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE){
 800b912:	4b49      	ldr	r3, [pc, #292]	; (800ba38 <shinchi_turn_L+0x158>)
 800b914:	685a      	ldr	r2, [r3, #4]
 800b916:	4b49      	ldr	r3, [pc, #292]	; (800ba3c <shinchi_turn_L+0x15c>)
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	4413      	add	r3, r2
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fc fd39 	bl	8008394 <__aeabi_i2d>
 800b922:	a33f      	add	r3, pc, #252	; (adr r3, 800ba20 <shinchi_turn_L+0x140>)
 800b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b928:	f7fd f824 	bl	8008974 <__aeabi_dcmpge>
 800b92c:	4603      	mov	r3, r0
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d022      	beq.n	800b978 <shinchi_turn_L+0x98>
 800b932:	4b41      	ldr	r3, [pc, #260]	; (800ba38 <shinchi_turn_L+0x158>)
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	4b41      	ldr	r3, [pc, #260]	; (800ba3c <shinchi_turn_L+0x15c>)
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	4413      	add	r3, r2
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7fc fd29 	bl	8008394 <__aeabi_i2d>
 800b942:	a339      	add	r3, pc, #228	; (adr r3, 800ba28 <shinchi_turn_L+0x148>)
 800b944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b948:	f7fd f800 	bl	800894c <__aeabi_dcmplt>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d012      	beq.n	800b978 <shinchi_turn_L+0x98>
		mode.control = 6;
 800b952:	4b3b      	ldr	r3, [pc, #236]	; (800ba40 <shinchi_turn_L+0x160>)
 800b954:	2206      	movs	r2, #6
 800b956:	715a      	strb	r2, [r3, #5]
		Target_velocity = CURVE_SPEED;
 800b958:	4b3a      	ldr	r3, [pc, #232]	; (800ba44 <shinchi_turn_L+0x164>)
 800b95a:	4a3b      	ldr	r2, [pc, #236]	; (800ba48 <shinchi_turn_L+0x168>)
 800b95c:	601a      	str	r2, [r3, #0]
		Target_R_velo = CURVE_SPEED  * 2;
 800b95e:	4b3b      	ldr	r3, [pc, #236]	; (800ba4c <shinchi_turn_L+0x16c>)
 800b960:	4a3b      	ldr	r2, [pc, #236]	; (800ba50 <shinchi_turn_L+0x170>)
 800b962:	601a      	str	r2, [r3, #0]
		Target_L_velo = Target_R_velo * 0;
 800b964:	4b39      	ldr	r3, [pc, #228]	; (800ba4c <shinchi_turn_L+0x16c>)
 800b966:	edd3 7a00 	vldr	s15, [r3]
 800b96a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800ba54 <shinchi_turn_L+0x174>
 800b96e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b972:	4b39      	ldr	r3, [pc, #228]	; (800ba58 <shinchi_turn_L+0x178>)
 800b974:	edc3 7a00 	vstr	s15, [r3]
		}
		if(DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 4 + SHINCHI_ROTATE_PULSE){
 800b978:	4b2f      	ldr	r3, [pc, #188]	; (800ba38 <shinchi_turn_L+0x158>)
 800b97a:	685a      	ldr	r2, [r3, #4]
 800b97c:	4b2f      	ldr	r3, [pc, #188]	; (800ba3c <shinchi_turn_L+0x15c>)
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	4413      	add	r3, r2
 800b982:	4618      	mov	r0, r3
 800b984:	f7fc fd06 	bl	8008394 <__aeabi_i2d>
 800b988:	a327      	add	r3, pc, #156	; (adr r3, 800ba28 <shinchi_turn_L+0x148>)
 800b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98e:	f7fc fff1 	bl	8008974 <__aeabi_dcmpge>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d100      	bne.n	800b99a <shinchi_turn_L+0xba>
 800b998:	e016      	b.n	800b9c8 <shinchi_turn_L+0xe8>
 800b99a:	4b27      	ldr	r3, [pc, #156]	; (800ba38 <shinchi_turn_L+0x158>)
 800b99c:	685a      	ldr	r2, [r3, #4]
 800b99e:	4b27      	ldr	r3, [pc, #156]	; (800ba3c <shinchi_turn_L+0x15c>)
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7fc fcf5 	bl	8008394 <__aeabi_i2d>
 800b9aa:	a321      	add	r3, pc, #132	; (adr r3, 800ba30 <shinchi_turn_L+0x150>)
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	f7fc ffcc 	bl	800894c <__aeabi_dcmplt>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d100      	bne.n	800b9bc <shinchi_turn_L+0xdc>
 800b9ba:	e005      	b.n	800b9c8 <shinchi_turn_L+0xe8>
			mode.control = 4;
 800b9bc:	4b20      	ldr	r3, [pc, #128]	; (800ba40 <shinchi_turn_L+0x160>)
 800b9be:	2204      	movs	r2, #4
 800b9c0:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b9c2:	4b20      	ldr	r3, [pc, #128]	; (800ba44 <shinchi_turn_L+0x164>)
 800b9c4:	4a20      	ldr	r2, [pc, #128]	; (800ba48 <shinchi_turn_L+0x168>)
 800b9c6:	601a      	str	r2, [r3, #0]
	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2){
 800b9c8:	4b1b      	ldr	r3, [pc, #108]	; (800ba38 <shinchi_turn_L+0x158>)
 800b9ca:	685a      	ldr	r2, [r3, #4]
 800b9cc:	4b1b      	ldr	r3, [pc, #108]	; (800ba3c <shinchi_turn_L+0x15c>)
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fc fcde 	bl	8008394 <__aeabi_i2d>
 800b9d8:	a315      	add	r3, pc, #84	; (adr r3, 800ba30 <shinchi_turn_L+0x150>)
 800b9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9de:	f7fc ffb5 	bl	800894c <__aeabi_dcmplt>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f47f af7e 	bne.w	800b8e6 <shinchi_turn_L+0x6>
//		if(Body_angle > 90){
//			IMU_init();
//			break;
//		}
	}
	mode.control = 4;
 800b9ea:	4b15      	ldr	r3, [pc, #84]	; (800ba40 <shinchi_turn_L+0x160>)
 800b9ec:	2204      	movs	r2, #4
 800b9ee:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b9f0:	4b11      	ldr	r3, [pc, #68]	; (800ba38 <shinchi_turn_L+0x158>)
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b9f6:	4b11      	ldr	r3, [pc, #68]	; (800ba3c <shinchi_turn_L+0x15c>)
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b9fc:	4b17      	ldr	r3, [pc, #92]	; (800ba5c <shinchi_turn_L+0x17c>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800ba02:	4b15      	ldr	r3, [pc, #84]	; (800ba58 <shinchi_turn_L+0x178>)
 800ba04:	f04f 0200 	mov.w	r2, #0
 800ba08:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800ba0a:	4b10      	ldr	r3, [pc, #64]	; (800ba4c <shinchi_turn_L+0x16c>)
 800ba0c:	f04f 0200 	mov.w	r2, #0
 800ba10:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800ba12:	4b0c      	ldr	r3, [pc, #48]	; (800ba44 <shinchi_turn_L+0x164>)
 800ba14:	4a12      	ldr	r2, [pc, #72]	; (800ba60 <shinchi_turn_L+0x180>)
 800ba16:	601a      	str	r2, [r3, #0]
}
 800ba18:	bf00      	nop
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	f3af 8000 	nop.w
 800ba20:	471cbc92 	.word	0x471cbc92
 800ba24:	40db7df9 	.word	0x40db7df9
 800ba28:	b277ffd6 	.word	0xb277ffd6
 800ba2c:	40eb1af2 	.word	0x40eb1af2
 800ba30:	ab032f10 	.word	0xab032f10
 800ba34:	40f46cf7 	.word	0x40f46cf7
 800ba38:	20000044 	.word	0x20000044
 800ba3c:	20000050 	.word	0x20000050
 800ba40:	20000068 	.word	0x20000068
 800ba44:	200142a8 	.word	0x200142a8
 800ba48:	43340000 	.word	0x43340000
 800ba4c:	20018374 	.word	0x20018374
 800ba50:	43b40000 	.word	0x43b40000
 800ba54:	00000000 	.word	0x00000000
 800ba58:	20018394 	.word	0x20018394
 800ba5c:	2000005c 	.word	0x2000005c
 800ba60:	43960000 	.word	0x43960000

0800ba64 <rotate180>:
void rotate180(){
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
  uint8_t counter=0;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	71fb      	strb	r3, [r7, #7]
  //static int check = 0, check2 = 0;

   while(counter < 1){
 800ba6e:	e054      	b.n	800bb1a <rotate180+0xb6>

		Target_velocity = 0;
 800ba70:	4b30      	ldr	r3, [pc, #192]	; (800bb34 <rotate180+0xd0>)
 800ba72:	f04f 0200 	mov.w	r2, #0
 800ba76:	601a      	str	r2, [r3, #0]
		error_reset = 0;
 800ba78:	4b2f      	ldr	r3, [pc, #188]	; (800bb38 <rotate180+0xd4>)
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	701a      	strb	r2, [r3, #0]
		Motor_Count_Clear();
 800ba7e:	f7fd ffd3 	bl	8009a28 <Motor_Count_Clear>
    EN3_L.integrate = 0;
 800ba82:	4b2e      	ldr	r3, [pc, #184]	; (800bb3c <rotate180+0xd8>)
 800ba84:	2200      	movs	r2, #0
 800ba86:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ba88:	4b2d      	ldr	r3, [pc, #180]	; (800bb40 <rotate180+0xdc>)
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	605a      	str	r2, [r3, #4]
	  EN_Body.integrate = 0;
 800ba8e:	4b2d      	ldr	r3, [pc, #180]	; (800bb44 <rotate180+0xe0>)
 800ba90:	2200      	movs	r2, #0
 800ba92:	605a      	str	r2, [r3, #4]
	  mode.enc = 1;
 800ba94:	4b2c      	ldr	r3, [pc, #176]	; (800bb48 <rotate180+0xe4>)
 800ba96:	2201      	movs	r2, #1
 800ba98:	70da      	strb	r2, [r3, #3]
	///while(EN3_L.integrate >= -Target_pul_quarter && EN4_R.integrate <= Target_pul_quarter){
  while(EN3_L.integrate <= Target_pul_quarter*2 || EN4_R.integrate >= -Target_pul_quarter*2){
 800ba9a:	e005      	b.n	800baa8 <rotate180+0x44>
	  mode.control = 3;
 800ba9c:	4b2a      	ldr	r3, [pc, #168]	; (800bb48 <rotate180+0xe4>)
 800ba9e:	2203      	movs	r2, #3
 800baa0:	715a      	strb	r2, [r3, #5]
	  Target_Rad_velo = -6;//Rotate(Target_Rad_velo, -5, Target_pul_quarter*2, EN3_L.integrate);
 800baa2:	4b2a      	ldr	r3, [pc, #168]	; (800bb4c <rotate180+0xe8>)
 800baa4:	4a2a      	ldr	r2, [pc, #168]	; (800bb50 <rotate180+0xec>)
 800baa6:	601a      	str	r2, [r3, #0]
  while(EN3_L.integrate <= Target_pul_quarter*2 || EN4_R.integrate >= -Target_pul_quarter*2){
 800baa8:	4b24      	ldr	r3, [pc, #144]	; (800bb3c <rotate180+0xd8>)
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	ee07 3a90 	vmov	s15, r3
 800bab0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bab4:	4b27      	ldr	r3, [pc, #156]	; (800bb54 <rotate180+0xf0>)
 800bab6:	edd3 7a00 	vldr	s15, [r3]
 800baba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800babe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac6:	d9e9      	bls.n	800ba9c <rotate180+0x38>
 800bac8:	4b1d      	ldr	r3, [pc, #116]	; (800bb40 <rotate180+0xdc>)
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	ee07 3a90 	vmov	s15, r3
 800bad0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bad4:	4b1f      	ldr	r3, [pc, #124]	; (800bb54 <rotate180+0xf0>)
 800bad6:	edd3 7a00 	vldr	s15, [r3]
 800bada:	eef1 7a67 	vneg.f32	s15, s15
 800bade:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bae2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baea:	dad7      	bge.n	800ba9c <rotate180+0x38>
	  //Rotate_Control(Target_rotate,T1, velocity.KP, velocity.KI, velocity.KD);

//    	check = EN3_L.integrate;
//    	check2 = EN4_R.integrate;
    	}
      mode.enc = 0;
 800baec:	4b16      	ldr	r3, [pc, #88]	; (800bb48 <rotate180+0xe4>)
 800baee:	2200      	movs	r2, #0
 800baf0:	70da      	strb	r2, [r3, #3]
      Target_velocity = 0;
 800baf2:	4b10      	ldr	r3, [pc, #64]	; (800bb34 <rotate180+0xd0>)
 800baf4:	f04f 0200 	mov.w	r2, #0
 800baf8:	601a      	str	r2, [r3, #0]
      Target_Rad_velo =0;
 800bafa:	4b14      	ldr	r3, [pc, #80]	; (800bb4c <rotate180+0xe8>)
 800bafc:	f04f 0200 	mov.w	r2, #0
 800bb00:	601a      	str	r2, [r3, #0]
      EN3_L.integrate = 0;
 800bb02:	4b0e      	ldr	r3, [pc, #56]	; (800bb3c <rotate180+0xd8>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	605a      	str	r2, [r3, #4]
      EN4_R.integrate = 0;
 800bb08:	4b0d      	ldr	r3, [pc, #52]	; (800bb40 <rotate180+0xdc>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	605a      	str	r2, [r3, #4]
  	  EN_Body.integrate = 0;
 800bb0e:	4b0d      	ldr	r3, [pc, #52]	; (800bb44 <rotate180+0xe0>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	605a      	str	r2, [r3, #4]

      counter++;
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	3301      	adds	r3, #1
 800bb18:	71fb      	strb	r3, [r7, #7]
   while(counter < 1){
 800bb1a:	79fb      	ldrb	r3, [r7, #7]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d0a7      	beq.n	800ba70 <rotate180+0xc>
     }
	error_reset = 0;
 800bb20:	4b05      	ldr	r3, [pc, #20]	; (800bb38 <rotate180+0xd4>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800bb26:	f7fd ff7f 	bl	8009a28 <Motor_Count_Clear>
//    	    printf("180°回転時左 : %d \r\n",check);
//    	    printf("180°回転時右 : %d \r\n",check2);
//    	    printf("\r\n");

}
 800bb2a:	bf00      	nop
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	200142a8 	.word	0x200142a8
 800bb38:	2000026c 	.word	0x2000026c
 800bb3c:	20000044 	.word	0x20000044
 800bb40:	20000050 	.word	0x20000050
 800bb44:	2000005c 	.word	0x2000005c
 800bb48:	20000068 	.word	0x20000068
 800bb4c:	200142ac 	.word	0x200142ac
 800bb50:	c0c00000 	.word	0xc0c00000
 800bb54:	20000004 	.word	0x20000004

0800bb58 <back_calib>:
	EN_Body.integrate = 0;
	error_reset = 0;
	Motor_Count_Clear();

}
void back_calib(){
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
	error_reset = 0;
 800bb5e:	4b2a      	ldr	r3, [pc, #168]	; (800bc08 <back_calib+0xb0>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800bb64:	f7fd ff60 	bl	8009a28 <Motor_Count_Clear>
    EN3_L.integrate = 0;
 800bb68:	4b28      	ldr	r3, [pc, #160]	; (800bc0c <back_calib+0xb4>)
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800bb6e:	4b28      	ldr	r3, [pc, #160]	; (800bc10 <back_calib+0xb8>)
 800bb70:	2200      	movs	r2, #0
 800bb72:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800bb74:	4b27      	ldr	r3, [pc, #156]	; (800bc14 <back_calib+0xbc>)
 800bb76:	2200      	movs	r2, #0
 800bb78:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800bb7a:	4b27      	ldr	r3, [pc, #156]	; (800bc18 <back_calib+0xc0>)
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	70da      	strb	r2, [r3, #3]
    //50mmバック

    while(EN3_L.integrate + EN4_R.integrate > -2 * (61.75-40) / MM_PER_PULSE){
 800bb80:	e005      	b.n	800bb8e <back_calib+0x36>
    	Target_velocity = -90;
 800bb82:	4b26      	ldr	r3, [pc, #152]	; (800bc1c <back_calib+0xc4>)
 800bb84:	4a26      	ldr	r2, [pc, #152]	; (800bc20 <back_calib+0xc8>)
 800bb86:	601a      	str	r2, [r3, #0]
    	mode.control = 4;
 800bb88:	4b23      	ldr	r3, [pc, #140]	; (800bc18 <back_calib+0xc0>)
 800bb8a:	2204      	movs	r2, #4
 800bb8c:	715a      	strb	r2, [r3, #5]
    while(EN3_L.integrate + EN4_R.integrate > -2 * (61.75-40) / MM_PER_PULSE){
 800bb8e:	4b1f      	ldr	r3, [pc, #124]	; (800bc0c <back_calib+0xb4>)
 800bb90:	685a      	ldr	r2, [r3, #4]
 800bb92:	4b1f      	ldr	r3, [pc, #124]	; (800bc10 <back_calib+0xb8>)
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	4413      	add	r3, r2
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7fc fbfb 	bl	8008394 <__aeabi_i2d>
 800bb9e:	a318      	add	r3, pc, #96	; (adr r3, 800bc00 <back_calib+0xa8>)
 800bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba4:	f7fc fef0 	bl	8008988 <__aeabi_dcmpgt>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d1e9      	bne.n	800bb82 <back_calib+0x2a>
    }
    Target_velocity = 0;
 800bbae:	4b1b      	ldr	r3, [pc, #108]	; (800bc1c <back_calib+0xc4>)
 800bbb0:	f04f 0200 	mov.w	r2, #0
 800bbb4:	601a      	str	r2, [r3, #0]
    mode.control = 5;
 800bbb6:	4b18      	ldr	r3, [pc, #96]	; (800bc18 <back_calib+0xc0>)
 800bbb8:	2205      	movs	r2, #5
 800bbba:	715a      	strb	r2, [r3, #5]
    mode.enc = 0;
 800bbbc:	4b16      	ldr	r3, [pc, #88]	; (800bc18 <back_calib+0xc0>)
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	70da      	strb	r2, [r3, #3]
    EN3_L.integrate = 0;
 800bbc2:	4b12      	ldr	r3, [pc, #72]	; (800bc0c <back_calib+0xb4>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800bbc8:	4b11      	ldr	r3, [pc, #68]	; (800bc10 <back_calib+0xb8>)
 800bbca:	2200      	movs	r2, #0
 800bbcc:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800bbce:	4b11      	ldr	r3, [pc, #68]	; (800bc14 <back_calib+0xbc>)
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	605a      	str	r2, [r3, #4]
	error_reset = 0;
 800bbd4:	4b0c      	ldr	r3, [pc, #48]	; (800bc08 <back_calib+0xb0>)
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800bbda:	f7fd ff25 	bl	8009a28 <Motor_Count_Clear>
    for(int i=0;i < WAIT*4;i++);
 800bbde:	2300      	movs	r3, #0
 800bbe0:	607b      	str	r3, [r7, #4]
 800bbe2:	e002      	b.n	800bbea <back_calib+0x92>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	607b      	str	r3, [r7, #4]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4a0d      	ldr	r2, [pc, #52]	; (800bc24 <back_calib+0xcc>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	ddf8      	ble.n	800bbe4 <back_calib+0x8c>

}
 800bbf2:	bf00      	nop
 800bbf4:	3708      	adds	r7, #8
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	f3af 8000 	nop.w
 800bc00:	107febef 	.word	0x107febef
 800bc04:	c0d58254 	.word	0xc0d58254
 800bc08:	2000026c 	.word	0x2000026c
 800bc0c:	20000044 	.word	0x20000044
 800bc10:	20000050 	.word	0x20000050
 800bc14:	2000005c 	.word	0x2000005c
 800bc18:	20000068 	.word	0x20000068
 800bc1c:	200142a8 	.word	0x200142a8
 800bc20:	c2b40000 	.word	0xc2b40000
 800bc24:	0001d4bf 	.word	0x0001d4bf

0800bc28 <R_turn_select>:
	//経過時間計測オ�?



}
void R_turn_select(){
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	af00      	add	r7, sp, #0
  switch(mode.turn){
 800bc2c:	4b1e      	ldr	r3, [pc, #120]	; (800bca8 <R_turn_select+0x80>)
 800bc2e:	7a5b      	ldrb	r3, [r3, #9]
 800bc30:	2b03      	cmp	r3, #3
 800bc32:	d82d      	bhi.n	800bc90 <R_turn_select+0x68>
 800bc34:	a201      	add	r2, pc, #4	; (adr r2, 800bc3c <R_turn_select+0x14>)
 800bc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3a:	bf00      	nop
 800bc3c:	0800bc4d 	.word	0x0800bc4d
 800bc40:	0800bc6b 	.word	0x0800bc6b
 800bc44:	0800bc71 	.word	0x0800bc71
 800bc48:	0800bc77 	.word	0x0800bc77
  case 0:
	  Decelerate();
 800bc4c:	f7ff f91c 	bl	800ae88 <Decelerate>
	  wait(0.3);
 800bc50:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800bc98 <R_turn_select+0x70>
 800bc54:	f7fe ffe8 	bl	800ac28 <wait>
	  turn_right();
 800bc58:	f7ff fb38 	bl	800b2cc <turn_right>
	  wait(0.3);
 800bc5c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bc98 <R_turn_select+0x70>
 800bc60:	f7fe ffe2 	bl	800ac28 <wait>
      Accelerate();
 800bc64:	f7ff f860 	bl	800ad28 <Accelerate>
      break;
 800bc68:	e012      	b.n	800bc90 <R_turn_select+0x68>
  case 1:
	  slow_turn_R();
 800bc6a:	f7ff fc05 	bl	800b478 <slow_turn_R>
	  break;
 800bc6e:	e00f      	b.n	800bc90 <R_turn_select+0x68>
  case 2:
	  shinchi_turn_R();
 800bc70:	f7ff fd72 	bl	800b758 <shinchi_turn_R>
	  break;
 800bc74:	e00c      	b.n	800bc90 <R_turn_select+0x68>
  case 3:
      Decelerate();
 800bc76:	f7ff f907 	bl	800ae88 <Decelerate>
      IMU_turn(-90,-5);
 800bc7a:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bca0 <R_turn_select+0x78>
 800bc7e:	f06f 0059 	mvn.w	r0, #89	; 0x59
 800bc82:	f7ff fa79 	bl	800b178 <IMU_turn>
      IMU_init();
 800bc86:	f7fd fe23 	bl	80098d0 <IMU_init>
      Accelerate();
 800bc8a:	f7ff f84d 	bl	800ad28 <Accelerate>
      break;
 800bc8e:	bf00      	nop
  }
}
 800bc90:	bf00      	nop
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	f3af 8000 	nop.w
 800bc98:	33333333 	.word	0x33333333
 800bc9c:	3fd33333 	.word	0x3fd33333
 800bca0:	00000000 	.word	0x00000000
 800bca4:	c0140000 	.word	0xc0140000
 800bca8:	20000068 	.word	0x20000068
 800bcac:	00000000 	.word	0x00000000

0800bcb0 <L_turn_select>:
void L_turn_select(){
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	af00      	add	r7, sp, #0
  switch(mode.turn){
 800bcb4:	4b1e      	ldr	r3, [pc, #120]	; (800bd30 <L_turn_select+0x80>)
 800bcb6:	7a5b      	ldrb	r3, [r3, #9]
 800bcb8:	2b03      	cmp	r3, #3
 800bcba:	d82c      	bhi.n	800bd16 <L_turn_select+0x66>
 800bcbc:	a201      	add	r2, pc, #4	; (adr r2, 800bcc4 <L_turn_select+0x14>)
 800bcbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc2:	bf00      	nop
 800bcc4:	0800bcd5 	.word	0x0800bcd5
 800bcc8:	0800bcf3 	.word	0x0800bcf3
 800bccc:	0800bcf9 	.word	0x0800bcf9
 800bcd0:	0800bcff 	.word	0x0800bcff
  case 0:
	  //�?減�?��?信地旋回
	  Decelerate();
 800bcd4:	f7ff f8d8 	bl	800ae88 <Decelerate>
	  wait(0.3);
 800bcd8:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800bd20 <L_turn_select+0x70>
 800bcdc:	f7fe ffa4 	bl	800ac28 <wait>
	  turn_left();
 800bce0:	f7ff fb5e 	bl	800b3a0 <turn_left>
	  wait(0.3);
 800bce4:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bd20 <L_turn_select+0x70>
 800bce8:	f7fe ff9e 	bl	800ac28 <wait>
      Accelerate();
 800bcec:	f7ff f81c 	bl	800ad28 <Accelerate>
      break;
 800bcf0:	e011      	b.n	800bd16 <L_turn_select+0x66>
  case 1:
	  //緩旋回
	  slow_turn_L();
 800bcf2:	f7ff fc79 	bl	800b5e8 <slow_turn_L>
	  break;
 800bcf6:	e00e      	b.n	800bd16 <L_turn_select+0x66>
  case 2:
	  //�?輪旋回
	  shinchi_turn_L();
 800bcf8:	f7ff fdf2 	bl	800b8e0 <shinchi_turn_L>
	  break;
 800bcfc:	e00b      	b.n	800bd16 <L_turn_select+0x66>
  case 3:
	  //IMUで等角�?�度�?信地旋回
      Decelerate();
 800bcfe:	f7ff f8c3 	bl	800ae88 <Decelerate>
      IMU_turn(90,5);
 800bd02:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bd28 <L_turn_select+0x78>
 800bd06:	205a      	movs	r0, #90	; 0x5a
 800bd08:	f7ff fa36 	bl	800b178 <IMU_turn>
      IMU_init();
 800bd0c:	f7fd fde0 	bl	80098d0 <IMU_init>
      Accelerate();
 800bd10:	f7ff f80a 	bl	800ad28 <Accelerate>
      break;
 800bd14:	bf00      	nop
  }
}
 800bd16:	bf00      	nop
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	f3af 8000 	nop.w
 800bd20:	33333333 	.word	0x33333333
 800bd24:	3fd33333 	.word	0x3fd33333
 800bd28:	00000000 	.word	0x00000000
 800bd2c:	40140000 	.word	0x40140000
 800bd30:	20000068 	.word	0x20000068

0800bd34 <Execution_Select>:
/*---- DEFINING FUNCTION ----*/

void Execution_Select(){
 800bd34:	b580      	push	{r7, lr}
 800bd36:	af00      	add	r7, sp, #0


	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 800bd38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bd3c:	485b      	ldr	r0, [pc, #364]	; (800beac <Execution_Select+0x178>)
 800bd3e:	f006 fd73 	bl	8012828 <HAL_GPIO_ReadPin>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	f040 80a3 	bne.w	800be90 <Execution_Select+0x15c>
	    	printf("押した\r\n");
 800bd4a:	4859      	ldr	r0, [pc, #356]	; (800beb0 <Execution_Select+0x17c>)
 800bd4c:	f00a fcac 	bl	80166a8 <puts>
			Motor_PWM_Stop();
 800bd50:	f7fe fa02 	bl	800a158 <Motor_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 800bd54:	4857      	ldr	r0, [pc, #348]	; (800beb4 <Execution_Select+0x180>)
 800bd56:	f007 ff9e 	bl	8013c96 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim8);
 800bd5a:	4857      	ldr	r0, [pc, #348]	; (800beb8 <Execution_Select+0x184>)
 800bd5c:	f007 ff9b 	bl	8013c96 <HAL_TIM_Base_Stop_IT>
			Emitter_OFF();
 800bd60:	f7fe f98a 	bl	800a078 <Emitter_OFF>
			ADC_Stop();
 800bd64:	f7fe f9b6 	bl	800a0d4 <ADC_Stop>
	    	HAL_Delay(400);
 800bd68:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800bd6c:	f004 fd9e 	bl	80108ac <HAL_Delay>

	    	mode.select += 1;
 800bd70:	4b52      	ldr	r3, [pc, #328]	; (800bebc <Execution_Select+0x188>)
 800bd72:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	3301      	adds	r3, #1
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	b25a      	sxtb	r2, r3
 800bd7e:	4b4f      	ldr	r3, [pc, #316]	; (800bebc <Execution_Select+0x188>)
 800bd80:	711a      	strb	r2, [r3, #4]
	    	if(mode.select == 5)
 800bd82:	4b4e      	ldr	r3, [pc, #312]	; (800bebc <Execution_Select+0x188>)
 800bd84:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bd88:	2b05      	cmp	r3, #5
 800bd8a:	f040 8081 	bne.w	800be90 <Execution_Select+0x15c>
	    		mode.select = 3;
 800bd8e:	4b4b      	ldr	r3, [pc, #300]	; (800bebc <Execution_Select+0x188>)
 800bd90:	2203      	movs	r2, #3
 800bd92:	711a      	strb	r2, [r3, #4]

	    }

	   //printf("%d\r\n",mode.select);

	while(mode.select%2 == 1){
 800bd94:	e07c      	b.n	800be90 <Execution_Select+0x15c>

	  	    EN3_L.count = TIM3 -> CNT;
 800bd96:	4b4a      	ldr	r3, [pc, #296]	; (800bec0 <Execution_Select+0x18c>)
 800bd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	4b49      	ldr	r3, [pc, #292]	; (800bec4 <Execution_Select+0x190>)
 800bd9e:	601a      	str	r2, [r3, #0]
	  	   // EN3_L.count = -(EN3_L.count - (30000-1));
	  	    printf("%d\r\n",EN3_L.count);
 800bda0:	4b48      	ldr	r3, [pc, #288]	; (800bec4 <Execution_Select+0x190>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4619      	mov	r1, r3
 800bda6:	4848      	ldr	r0, [pc, #288]	; (800bec8 <Execution_Select+0x194>)
 800bda8:	f00a fc0a 	bl	80165c0 <iprintf>
	  	    //EN3_L.integrate += EN3_L.count;


	  if(30000 -1 + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= EN3_L.count ){
 800bdac:	4b45      	ldr	r3, [pc, #276]	; (800bec4 <Execution_Select+0x190>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f249 522e 	movw	r2, #38190	; 0x952e
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	dd1e      	ble.n	800bdf6 <Execution_Select+0xc2>
	  	  mode.LED += 1;
 800bdb8:	4b40      	ldr	r3, [pc, #256]	; (800bebc <Execution_Select+0x188>)
 800bdba:	f993 3000 	ldrsb.w	r3, [r3]
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	b25a      	sxtb	r2, r3
 800bdc6:	4b3d      	ldr	r3, [pc, #244]	; (800bebc <Execution_Select+0x188>)
 800bdc8:	701a      	strb	r2, [r3, #0]
	  	  if(mode.LED > 7)
 800bdca:	4b3c      	ldr	r3, [pc, #240]	; (800bebc <Execution_Select+0x188>)
 800bdcc:	f993 3000 	ldrsb.w	r3, [r3]
 800bdd0:	2b07      	cmp	r3, #7
 800bdd2:	dd02      	ble.n	800bdda <Execution_Select+0xa6>
	  		  mode.LED = 0;
 800bdd4:	4b39      	ldr	r3, [pc, #228]	; (800bebc <Execution_Select+0x188>)
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	701a      	strb	r2, [r3, #0]
	  	  LED_Change();
 800bdda:	f7fe fc5f 	bl	800a69c <LED_Change>

	  	  Encoder_Reset();
 800bdde:	f7fe fec1 	bl	800ab64 <Encoder_Reset>
	  	  //mode.execution = mode.LED;
	  	  mode.execution = mode.LED;
 800bde2:	4b36      	ldr	r3, [pc, #216]	; (800bebc <Execution_Select+0x188>)
 800bde4:	f993 2000 	ldrsb.w	r2, [r3]
 800bde8:	4b34      	ldr	r3, [pc, #208]	; (800bebc <Execution_Select+0x188>)
 800bdea:	709a      	strb	r2, [r3, #2]
	  	  HAL_Delay(500);
 800bdec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bdf0:	f004 fd5c 	bl	80108ac <HAL_Delay>
 800bdf4:	e04c      	b.n	800be90 <Execution_Select+0x15c>

	  }
	  else if(30000 -1 - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= EN3_L.count){
 800bdf6:	4b33      	ldr	r3, [pc, #204]	; (800bec4 <Execution_Select+0x190>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f245 522f 	movw	r2, #21807	; 0x552f
 800bdfe:	4293      	cmp	r3, r2
 800be00:	dc1e      	bgt.n	800be40 <Execution_Select+0x10c>
	  	  mode.LED -= 1;
 800be02:	4b2e      	ldr	r3, [pc, #184]	; (800bebc <Execution_Select+0x188>)
 800be04:	f993 3000 	ldrsb.w	r3, [r3]
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	3b01      	subs	r3, #1
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	b25a      	sxtb	r2, r3
 800be10:	4b2a      	ldr	r3, [pc, #168]	; (800bebc <Execution_Select+0x188>)
 800be12:	701a      	strb	r2, [r3, #0]
	  	  if(mode.LED < 0)
 800be14:	4b29      	ldr	r3, [pc, #164]	; (800bebc <Execution_Select+0x188>)
 800be16:	f993 3000 	ldrsb.w	r3, [r3]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	da02      	bge.n	800be24 <Execution_Select+0xf0>
	  	  		  mode.LED = 7;
 800be1e:	4b27      	ldr	r3, [pc, #156]	; (800bebc <Execution_Select+0x188>)
 800be20:	2207      	movs	r2, #7
 800be22:	701a      	strb	r2, [r3, #0]
	  	  LED_Change();
 800be24:	f7fe fc3a 	bl	800a69c <LED_Change>

	  	  Encoder_Reset();
 800be28:	f7fe fe9c 	bl	800ab64 <Encoder_Reset>
	  	  //mode.execution = mode.LED;
	  	  mode.execution = mode.LED;
 800be2c:	4b23      	ldr	r3, [pc, #140]	; (800bebc <Execution_Select+0x188>)
 800be2e:	f993 2000 	ldrsb.w	r2, [r3]
 800be32:	4b22      	ldr	r3, [pc, #136]	; (800bebc <Execution_Select+0x188>)
 800be34:	709a      	strb	r2, [r3, #2]
	  	  HAL_Delay(500);
 800be36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800be3a:	f004 fd37 	bl	80108ac <HAL_Delay>
 800be3e:	e027      	b.n	800be90 <Execution_Select+0x15c>
	  }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 800be40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800be44:	4819      	ldr	r0, [pc, #100]	; (800beac <Execution_Select+0x178>)
 800be46:	f006 fcef 	bl	8012828 <HAL_GPIO_ReadPin>
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d11f      	bne.n	800be90 <Execution_Select+0x15c>
		  printf("\r\n");
 800be50:	481e      	ldr	r0, [pc, #120]	; (800becc <Execution_Select+0x198>)
 800be52:	f00a fc29 	bl	80166a8 <puts>
		      HAL_Delay(500);
 800be56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800be5a:	f004 fd27 	bl	80108ac <HAL_Delay>
	  		  Init(); // mycodeInit(); // mycode
 800be5e:	f7fe f995 	bl	800a18c <Init>
	  		  TIM3 -> CNT = 30000 - 1;
 800be62:	4b17      	ldr	r3, [pc, #92]	; (800bec0 <Execution_Select+0x18c>)
 800be64:	f247 522f 	movw	r2, #29999	; 0x752f
 800be68:	625a      	str	r2, [r3, #36]	; 0x24
	  		  TIM4 -> CNT = 30000 - 1;
 800be6a:	4b19      	ldr	r3, [pc, #100]	; (800bed0 <Execution_Select+0x19c>)
 800be6c:	f247 522f 	movw	r2, #29999	; 0x752f
 800be70:	625a      	str	r2, [r3, #36]	; 0x24
	  		  HAL_TIM_Base_Start_IT(&htim8);
 800be72:	4811      	ldr	r0, [pc, #68]	; (800beb8 <Execution_Select+0x184>)
 800be74:	f007 feeb 	bl	8013c4e <HAL_TIM_Base_Start_IT>
	  		  HAL_TIM_Base_Start_IT(&htim1);
 800be78:	480e      	ldr	r0, [pc, #56]	; (800beb4 <Execution_Select+0x180>)
 800be7a:	f007 fee8 	bl	8013c4e <HAL_TIM_Base_Start_IT>
	  		  mode.select += 1;
 800be7e:	4b0f      	ldr	r3, [pc, #60]	; (800bebc <Execution_Select+0x188>)
 800be80:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800be84:	b2db      	uxtb	r3, r3
 800be86:	3301      	adds	r3, #1
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	b25a      	sxtb	r2, r3
 800be8c:	4b0b      	ldr	r3, [pc, #44]	; (800bebc <Execution_Select+0x188>)
 800be8e:	711a      	strb	r2, [r3, #4]
	while(mode.select%2 == 1){
 800be90:	4b0a      	ldr	r3, [pc, #40]	; (800bebc <Execution_Select+0x188>)
 800be92:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	f003 0301 	and.w	r3, r3, #1
 800be9c:	bfb8      	it	lt
 800be9e:	425b      	neglt	r3, r3
 800bea0:	b25b      	sxtb	r3, r3
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	f43f af77 	beq.w	800bd96 <Execution_Select+0x62>
}

	}
  }
 800bea8:	bf00      	nop
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	40020400 	.word	0x40020400
 800beb0:	080184c8 	.word	0x080184c8
 800beb4:	20018ad0 	.word	0x20018ad0
 800beb8:	200183b8 	.word	0x200183b8
 800bebc:	20000068 	.word	0x20000068
 800bec0:	40000400 	.word	0x40000400
 800bec4:	20000044 	.word	0x20000044
 800bec8:	080184d4 	.word	0x080184d4
 800becc:	08018428 	.word	0x08018428
 800bed0:	40000800 	.word	0x40000800

0800bed4 <Walk_Map_Update>:
//書き込み先�?�スタートアドレスを定義
//500Kbyte欲しいので�?128Kbyte�?4本. 8~11
//セクターの削除(�?初に�?回呼び出�?)
//セクターに書き込�?(割り込み中で実行する�?�で処�?を軽くする努�?(物�?�?に無�?かもしれな�?))

void Walk_Map_Update(){
 800bed4:	b490      	push	{r4, r7}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
	//初期化大事すぎた。hosu
	int i = 0, j=0, flag=0, hosu=0;
 800beda:	2300      	movs	r3, #0
 800bedc:	60fb      	str	r3, [r7, #12]
 800bede:	2300      	movs	r3, #0
 800bee0:	60bb      	str	r3, [r7, #8]
 800bee2:	2300      	movs	r3, #0
 800bee4:	607b      	str	r3, [r7, #4]
 800bee6:	2300      	movs	r3, #0
 800bee8:	603b      	str	r3, [r7, #0]

	//区画数に応じて"?��?大歩数 + ゴールのマス?��?-1"に初期?��?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800beea:	2300      	movs	r3, #0
 800beec:	60fb      	str	r3, [r7, #12]
 800beee:	e015      	b.n	800bf1c <Walk_Map_Update+0x48>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bef0:	2300      	movs	r3, #0
 800bef2:	60bb      	str	r3, [r7, #8]
 800bef4:	e00c      	b.n	800bf10 <Walk_Map_Update+0x3c>
			walk_map[i][j] = NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1;
 800bef6:	49aa      	ldr	r1, [pc, #680]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	4613      	mov	r3, r2
 800befc:	00db      	lsls	r3, r3, #3
 800befe:	4413      	add	r3, r2
 800bf00:	18ca      	adds	r2, r1, r3
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	4413      	add	r3, r2
 800bf06:	2250      	movs	r2, #80	; 0x50
 800bf08:	701a      	strb	r2, [r3, #0]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	60bb      	str	r3, [r7, #8]
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	2b08      	cmp	r3, #8
 800bf14:	ddef      	ble.n	800bef6 <Walk_Map_Update+0x22>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	60fb      	str	r3, [r7, #12]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2b08      	cmp	r3, #8
 800bf20:	dde6      	ble.n	800bef0 <Walk_Map_Update+0x1c>
		}
	}

	//ゴール区画?��?0に初期?��?
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800bf22:	2307      	movs	r3, #7
 800bf24:	60fb      	str	r3, [r7, #12]
 800bf26:	e015      	b.n	800bf54 <Walk_Map_Update+0x80>
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800bf28:	2307      	movs	r3, #7
 800bf2a:	60bb      	str	r3, [r7, #8]
 800bf2c:	e00c      	b.n	800bf48 <Walk_Map_Update+0x74>
			walk_map[i][j] = 0;
 800bf2e:	499c      	ldr	r1, [pc, #624]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	4613      	mov	r3, r2
 800bf34:	00db      	lsls	r3, r3, #3
 800bf36:	4413      	add	r3, r2
 800bf38:	18ca      	adds	r2, r1, r3
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	2200      	movs	r2, #0
 800bf40:	701a      	strb	r2, [r3, #0]
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	3301      	adds	r3, #1
 800bf46:	60bb      	str	r3, [r7, #8]
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	2b07      	cmp	r3, #7
 800bf4c:	ddef      	ble.n	800bf2e <Walk_Map_Update+0x5a>
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	3301      	adds	r3, #1
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b07      	cmp	r3, #7
 800bf58:	dde6      	ble.n	800bf28 <Walk_Map_Update+0x54>
		}
	}

	//壁が無?��?として�?��??��区画に歩数を割り当てる�??
	do{
		flag = 0;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	607b      	str	r3, [r7, #4]
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800bf5e:	2300      	movs	r3, #0
 800bf60:	60fb      	str	r3, [r7, #12]
 800bf62:	e10c      	b.n	800c17e <Walk_Map_Update+0x2aa>

			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bf64:	2300      	movs	r3, #0
 800bf66:	60bb      	str	r3, [r7, #8]
 800bf68:	e102      	b.n	800c170 <Walk_Map_Update+0x29c>
				  //map?��?"?��?大歩数 + ゴールのマス?��?-1"でなければ値を代入?��?
				  //walk_map[i][j] != NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1 &&
				  if(walk_map[i][j] == hosu){
 800bf6a:	498d      	ldr	r1, [pc, #564]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	00db      	lsls	r3, r3, #3
 800bf72:	4413      	add	r3, r2
 800bf74:	18ca      	adds	r2, r1, r3
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	4413      	add	r3, r2
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	4293      	cmp	r3, r2
 800bf82:	f040 80f2 	bne.w	800c16a <Walk_Map_Update+0x296>

					  if(wall[i][j].north != WALL && walk_map[i][j+1] > walk_map[i][j] && j < NUMBER_OF_SQUARES - 1){
 800bf86:	4987      	ldr	r1, [pc, #540]	; (800c1a4 <Walk_Map_Update+0x2d0>)
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	00db      	lsls	r3, r3, #3
 800bf8e:	4413      	add	r3, r2
 800bf90:	68ba      	ldr	r2, [r7, #8]
 800bf92:	4413      	add	r3, r2
 800bf94:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bf98:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d02d      	beq.n	800bffe <Walk_Map_Update+0x12a>
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	1c59      	adds	r1, r3, #1
 800bfa6:	487e      	ldr	r0, [pc, #504]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	00db      	lsls	r3, r3, #3
 800bfae:	4413      	add	r3, r2
 800bfb0:	4403      	add	r3, r0
 800bfb2:	440b      	add	r3, r1
 800bfb4:	7819      	ldrb	r1, [r3, #0]
 800bfb6:	487a      	ldr	r0, [pc, #488]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	4613      	mov	r3, r2
 800bfbc:	00db      	lsls	r3, r3, #3
 800bfbe:	4413      	add	r3, r2
 800bfc0:	18c2      	adds	r2, r0, r3
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	4299      	cmp	r1, r3
 800bfca:	d918      	bls.n	800bffe <Walk_Map_Update+0x12a>
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	2b07      	cmp	r3, #7
 800bfd0:	dc15      	bgt.n	800bffe <Walk_Map_Update+0x12a>
						  walk_map[i][j+1] = walk_map[i][j] + 1;
 800bfd2:	4973      	ldr	r1, [pc, #460]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	00db      	lsls	r3, r3, #3
 800bfda:	4413      	add	r3, r2
 800bfdc:	18ca      	adds	r2, r1, r3
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	68ba      	ldr	r2, [r7, #8]
 800bfe6:	1c51      	adds	r1, r2, #1
 800bfe8:	3301      	adds	r3, #1
 800bfea:	b2dc      	uxtb	r4, r3
 800bfec:	486c      	ldr	r0, [pc, #432]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	4613      	mov	r3, r2
 800bff2:	00db      	lsls	r3, r3, #3
 800bff4:	4413      	add	r3, r2
 800bff6:	4403      	add	r3, r0
 800bff8:	440b      	add	r3, r1
 800bffa:	4622      	mov	r2, r4
 800bffc:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].east != WALL && walk_map[i+1][j] > walk_map[i][j] && i < NUMBER_OF_SQUARES - 1){
 800bffe:	4969      	ldr	r1, [pc, #420]	; (800c1a4 <Walk_Map_Update+0x2d0>)
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	4613      	mov	r3, r2
 800c004:	00db      	lsls	r3, r3, #3
 800c006:	4413      	add	r3, r2
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	4413      	add	r3, r2
 800c00c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c010:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c014:	b2db      	uxtb	r3, r3
 800c016:	2b01      	cmp	r3, #1
 800c018:	d02d      	beq.n	800c076 <Walk_Map_Update+0x1a2>
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	1c5a      	adds	r2, r3, #1
 800c01e:	4960      	ldr	r1, [pc, #384]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800c020:	4613      	mov	r3, r2
 800c022:	00db      	lsls	r3, r3, #3
 800c024:	4413      	add	r3, r2
 800c026:	18ca      	adds	r2, r1, r3
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	4413      	add	r3, r2
 800c02c:	7819      	ldrb	r1, [r3, #0]
 800c02e:	485c      	ldr	r0, [pc, #368]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800c030:	68fa      	ldr	r2, [r7, #12]
 800c032:	4613      	mov	r3, r2
 800c034:	00db      	lsls	r3, r3, #3
 800c036:	4413      	add	r3, r2
 800c038:	18c2      	adds	r2, r0, r3
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	4413      	add	r3, r2
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	4299      	cmp	r1, r3
 800c042:	d918      	bls.n	800c076 <Walk_Map_Update+0x1a2>
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2b07      	cmp	r3, #7
 800c048:	dc15      	bgt.n	800c076 <Walk_Map_Update+0x1a2>
						  walk_map[i+1][j] = walk_map[i][j] + 1;
 800c04a:	4955      	ldr	r1, [pc, #340]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	4613      	mov	r3, r2
 800c050:	00db      	lsls	r3, r3, #3
 800c052:	4413      	add	r3, r2
 800c054:	18ca      	adds	r2, r1, r3
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	4413      	add	r3, r2
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	68fa      	ldr	r2, [r7, #12]
 800c05e:	3201      	adds	r2, #1
 800c060:	3301      	adds	r3, #1
 800c062:	b2d8      	uxtb	r0, r3
 800c064:	494e      	ldr	r1, [pc, #312]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800c066:	4613      	mov	r3, r2
 800c068:	00db      	lsls	r3, r3, #3
 800c06a:	4413      	add	r3, r2
 800c06c:	18ca      	adds	r2, r1, r3
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	4413      	add	r3, r2
 800c072:	4602      	mov	r2, r0
 800c074:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].south != WALL && walk_map[i][j-1] > walk_map[i][j] && j > 0){
 800c076:	494b      	ldr	r1, [pc, #300]	; (800c1a4 <Walk_Map_Update+0x2d0>)
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	4613      	mov	r3, r2
 800c07c:	00db      	lsls	r3, r3, #3
 800c07e:	4413      	add	r3, r2
 800c080:	68ba      	ldr	r2, [r7, #8]
 800c082:	4413      	add	r3, r2
 800c084:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c088:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d02d      	beq.n	800c0ee <Walk_Map_Update+0x21a>
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	1e59      	subs	r1, r3, #1
 800c096:	4842      	ldr	r0, [pc, #264]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	4613      	mov	r3, r2
 800c09c:	00db      	lsls	r3, r3, #3
 800c09e:	4413      	add	r3, r2
 800c0a0:	4403      	add	r3, r0
 800c0a2:	440b      	add	r3, r1
 800c0a4:	7819      	ldrb	r1, [r3, #0]
 800c0a6:	483e      	ldr	r0, [pc, #248]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	00db      	lsls	r3, r3, #3
 800c0ae:	4413      	add	r3, r2
 800c0b0:	18c2      	adds	r2, r0, r3
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	4413      	add	r3, r2
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	4299      	cmp	r1, r3
 800c0ba:	d918      	bls.n	800c0ee <Walk_Map_Update+0x21a>
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	dd15      	ble.n	800c0ee <Walk_Map_Update+0x21a>
						  walk_map[i][j-1] = walk_map[i][j] + 1;
 800c0c2:	4937      	ldr	r1, [pc, #220]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	00db      	lsls	r3, r3, #3
 800c0ca:	4413      	add	r3, r2
 800c0cc:	18ca      	adds	r2, r1, r3
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	68ba      	ldr	r2, [r7, #8]
 800c0d6:	1e51      	subs	r1, r2, #1
 800c0d8:	3301      	adds	r3, #1
 800c0da:	b2dc      	uxtb	r4, r3
 800c0dc:	4830      	ldr	r0, [pc, #192]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	00db      	lsls	r3, r3, #3
 800c0e4:	4413      	add	r3, r2
 800c0e6:	4403      	add	r3, r0
 800c0e8:	440b      	add	r3, r1
 800c0ea:	4622      	mov	r2, r4
 800c0ec:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].west != WALL && walk_map[i-1][j] > walk_map[i][j] && i > 0){
 800c0ee:	492d      	ldr	r1, [pc, #180]	; (800c1a4 <Walk_Map_Update+0x2d0>)
 800c0f0:	68fa      	ldr	r2, [r7, #12]
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	00db      	lsls	r3, r3, #3
 800c0f6:	4413      	add	r3, r2
 800c0f8:	68ba      	ldr	r2, [r7, #8]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c100:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c104:	b2db      	uxtb	r3, r3
 800c106:	2b01      	cmp	r3, #1
 800c108:	d02d      	beq.n	800c166 <Walk_Map_Update+0x292>
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	1e5a      	subs	r2, r3, #1
 800c10e:	4924      	ldr	r1, [pc, #144]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800c110:	4613      	mov	r3, r2
 800c112:	00db      	lsls	r3, r3, #3
 800c114:	4413      	add	r3, r2
 800c116:	18ca      	adds	r2, r1, r3
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	4413      	add	r3, r2
 800c11c:	7819      	ldrb	r1, [r3, #0]
 800c11e:	4820      	ldr	r0, [pc, #128]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	4613      	mov	r3, r2
 800c124:	00db      	lsls	r3, r3, #3
 800c126:	4413      	add	r3, r2
 800c128:	18c2      	adds	r2, r0, r3
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	4413      	add	r3, r2
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	4299      	cmp	r1, r3
 800c132:	d918      	bls.n	800c166 <Walk_Map_Update+0x292>
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	dd15      	ble.n	800c166 <Walk_Map_Update+0x292>
						  walk_map[i-1][j] = walk_map[i][j] + 1;
 800c13a:	4919      	ldr	r1, [pc, #100]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	4613      	mov	r3, r2
 800c140:	00db      	lsls	r3, r3, #3
 800c142:	4413      	add	r3, r2
 800c144:	18ca      	adds	r2, r1, r3
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	4413      	add	r3, r2
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	68fa      	ldr	r2, [r7, #12]
 800c14e:	3a01      	subs	r2, #1
 800c150:	3301      	adds	r3, #1
 800c152:	b2d8      	uxtb	r0, r3
 800c154:	4912      	ldr	r1, [pc, #72]	; (800c1a0 <Walk_Map_Update+0x2cc>)
 800c156:	4613      	mov	r3, r2
 800c158:	00db      	lsls	r3, r3, #3
 800c15a:	4413      	add	r3, r2
 800c15c:	18ca      	adds	r2, r1, r3
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	4413      	add	r3, r2
 800c162:	4602      	mov	r2, r0
 800c164:	701a      	strb	r2, [r3, #0]
					  }

					  flag = 1;
 800c166:	2301      	movs	r3, #1
 800c168:	607b      	str	r3, [r7, #4]
			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	3301      	adds	r3, #1
 800c16e:	60bb      	str	r3, [r7, #8]
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	2b08      	cmp	r3, #8
 800c174:	f77f aef9 	ble.w	800bf6a <Walk_Map_Update+0x96>
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	3301      	adds	r3, #1
 800c17c:	60fb      	str	r3, [r7, #12]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2b08      	cmp	r3, #8
 800c182:	f77f aeef 	ble.w	800bf64 <Walk_Map_Update+0x90>
			       }
			  }
		  }
		  //歩数と繰り返しの回数は等し?��?
		  hosu++;
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	3301      	adds	r3, #1
 800c18a:	603b      	str	r3, [r7, #0]
	}while(flag);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	f47f aee3 	bne.w	800bf5a <Walk_Map_Update+0x86>

}
 800c194:	bf00      	nop
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bc90      	pop	{r4, r7}
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	20018a54 	.word	0x20018a54
 800c1a4:	20018efc 	.word	0x20018efc

0800c1a8 <Tire_Maintenance>:
//
//	}
}


void Tire_Maintenance(){
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 800c1ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c1b0:	f004 fb7c 	bl	80108ac <HAL_Delay>
	Accelerate();
 800c1b4:	f7fe fdb8 	bl	800ad28 <Accelerate>
	straight();
 800c1b8:	f7fe ff1e 	bl	800aff8 <straight>
	straight();
 800c1bc:	f7fe ff1c 	bl	800aff8 <straight>
	Decelerate();
 800c1c0:	f7fe fe62 	bl	800ae88 <Decelerate>
	Motor_PWM_Stop();
 800c1c4:	f7fd ffc8 	bl	800a158 <Motor_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 800c1c8:	480a      	ldr	r0, [pc, #40]	; (800c1f4 <Tire_Maintenance+0x4c>)
 800c1ca:	f007 fd64 	bl	8013c96 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800c1ce:	480a      	ldr	r0, [pc, #40]	; (800c1f8 <Tire_Maintenance+0x50>)
 800c1d0:	f007 fd61 	bl	8013c96 <HAL_TIM_Base_Stop_IT>
	while(1){
		printf("リセ?��?トな?��? : %d\r\n", All_Pulse_anytime);
 800c1d4:	4b09      	ldr	r3, [pc, #36]	; (800c1fc <Tire_Maintenance+0x54>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4619      	mov	r1, r3
 800c1da:	4809      	ldr	r0, [pc, #36]	; (800c200 <Tire_Maintenance+0x58>)
 800c1dc:	f00a f9f0 	bl	80165c0 <iprintf>
		printf("リセ?��?トあ?��? : %d\r\n", All_Pulse_cut);
 800c1e0:	4b08      	ldr	r3, [pc, #32]	; (800c204 <Tire_Maintenance+0x5c>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	4808      	ldr	r0, [pc, #32]	; (800c208 <Tire_Maintenance+0x60>)
 800c1e8:	f00a f9ea 	bl	80165c0 <iprintf>
		printf("\r\n");
 800c1ec:	4807      	ldr	r0, [pc, #28]	; (800c20c <Tire_Maintenance+0x64>)
 800c1ee:	f00a fa5b 	bl	80166a8 <puts>
		printf("リセ?��?トな?��? : %d\r\n", All_Pulse_anytime);
 800c1f2:	e7ef      	b.n	800c1d4 <Tire_Maintenance+0x2c>
 800c1f4:	20018ad0 	.word	0x20018ad0
 800c1f8:	200183b8 	.word	0x200183b8
 800c1fc:	200142ec 	.word	0x200142ec
 800c200:	080184dc 	.word	0x080184dc
 800c204:	200142e8 	.word	0x200142e8
 800c208:	08018500 	.word	0x08018500
 800c20c:	08018428 	.word	0x08018428

0800c210 <wall_set>:
	}

}
void wall_set(){
 800c210:	b490      	push	{r4, r7}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
	uint8_t wall_dir[4];
	  wall_dir[my_direction] = (sl_average + sr_average)/2 > FRONT_WALL  ?   WALL : NOWALL;
 800c216:	4b96      	ldr	r3, [pc, #600]	; (800c470 <wall_set+0x260>)
 800c218:	ed93 7a00 	vldr	s14, [r3]
 800c21c:	4b95      	ldr	r3, [pc, #596]	; (800c474 <wall_set+0x264>)
 800c21e:	edd3 7a00 	vldr	s15, [r3]
 800c222:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c226:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c22a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c22e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800c232:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c23a:	bfcc      	ite	gt
 800c23c:	2301      	movgt	r3, #1
 800c23e:	2300      	movle	r3, #0
 800c240:	b2da      	uxtb	r2, r3
 800c242:	4b8d      	ldr	r3, [pc, #564]	; (800c478 <wall_set+0x268>)
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	f107 0108 	add.w	r1, r7, #8
 800c24a:	440b      	add	r3, r1
 800c24c:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(my_direction + 1)%4] = fr_average > RIGHT_WALL  ?  WALL :  NOWALL;
 800c250:	4b8a      	ldr	r3, [pc, #552]	; (800c47c <wall_set+0x26c>)
 800c252:	edd3 7a00 	vldr	s15, [r3]
 800c256:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800c480 <wall_set+0x270>
 800c25a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c262:	bfcc      	ite	gt
 800c264:	2301      	movgt	r3, #1
 800c266:	2300      	movle	r3, #0
 800c268:	b2d9      	uxtb	r1, r3
 800c26a:	4b83      	ldr	r3, [pc, #524]	; (800c478 <wall_set+0x268>)
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	3301      	adds	r3, #1
 800c270:	425a      	negs	r2, r3
 800c272:	f003 0303 	and.w	r3, r3, #3
 800c276:	f002 0203 	and.w	r2, r2, #3
 800c27a:	bf58      	it	pl
 800c27c:	4253      	negpl	r3, r2
 800c27e:	460a      	mov	r2, r1
 800c280:	f107 0108 	add.w	r1, r7, #8
 800c284:	440b      	add	r3, r1
 800c286:	f803 2c04 	strb.w	r2, [r3, #-4]
		  wall_dir[(my_direction + 2)%4] = NOWALL;
 800c28a:	4b7b      	ldr	r3, [pc, #492]	; (800c478 <wall_set+0x268>)
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	3302      	adds	r3, #2
 800c290:	425a      	negs	r2, r3
 800c292:	f003 0303 	and.w	r3, r3, #3
 800c296:	f002 0203 	and.w	r2, r2, #3
 800c29a:	bf58      	it	pl
 800c29c:	4253      	negpl	r3, r2
 800c29e:	f107 0208 	add.w	r2, r7, #8
 800c2a2:	4413      	add	r3, r2
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	f803 2c04 	strb.w	r2, [r3, #-4]
		  wall_dir[(my_direction + 3)%4] = fl_average > LEFT_WALL ?  WALL :  NOWALL;
 800c2aa:	4b76      	ldr	r3, [pc, #472]	; (800c484 <wall_set+0x274>)
 800c2ac:	edd3 7a00 	vldr	s15, [r3]
 800c2b0:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800c488 <wall_set+0x278>
 800c2b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2bc:	bfcc      	ite	gt
 800c2be:	2301      	movgt	r3, #1
 800c2c0:	2300      	movle	r3, #0
 800c2c2:	b2d9      	uxtb	r1, r3
 800c2c4:	4b6c      	ldr	r3, [pc, #432]	; (800c478 <wall_set+0x268>)
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	3303      	adds	r3, #3
 800c2ca:	425a      	negs	r2, r3
 800c2cc:	f003 0303 	and.w	r3, r3, #3
 800c2d0:	f002 0203 	and.w	r2, r2, #3
 800c2d4:	bf58      	it	pl
 800c2d6:	4253      	negpl	r3, r2
 800c2d8:	460a      	mov	r2, r1
 800c2da:	f107 0108 	add.w	r1, r7, #8
 800c2de:	440b      	add	r3, r1
 800c2e0:	f803 2c04 	strb.w	r2, [r3, #-4]

	  wall[x][y].north = wall_dir[0];
 800c2e4:	7939      	ldrb	r1, [r7, #4]
 800c2e6:	4b69      	ldr	r3, [pc, #420]	; (800c48c <wall_set+0x27c>)
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	4b68      	ldr	r3, [pc, #416]	; (800c490 <wall_set+0x280>)
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	461c      	mov	r4, r3
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	f003 0303 	and.w	r3, r3, #3
 800c2f8:	b2d8      	uxtb	r0, r3
 800c2fa:	4966      	ldr	r1, [pc, #408]	; (800c494 <wall_set+0x284>)
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	00db      	lsls	r3, r3, #3
 800c300:	4413      	add	r3, r2
 800c302:	191a      	adds	r2, r3, r4
 800c304:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c308:	f360 0301 	bfi	r3, r0, #0, #2
 800c30c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].east = wall_dir[1];
 800c310:	7979      	ldrb	r1, [r7, #5]
 800c312:	4b5e      	ldr	r3, [pc, #376]	; (800c48c <wall_set+0x27c>)
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	461a      	mov	r2, r3
 800c318:	4b5d      	ldr	r3, [pc, #372]	; (800c490 <wall_set+0x280>)
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	461c      	mov	r4, r3
 800c31e:	460b      	mov	r3, r1
 800c320:	f003 0303 	and.w	r3, r3, #3
 800c324:	b2d8      	uxtb	r0, r3
 800c326:	495b      	ldr	r1, [pc, #364]	; (800c494 <wall_set+0x284>)
 800c328:	4613      	mov	r3, r2
 800c32a:	00db      	lsls	r3, r3, #3
 800c32c:	4413      	add	r3, r2
 800c32e:	191a      	adds	r2, r3, r4
 800c330:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c334:	f360 0383 	bfi	r3, r0, #2, #2
 800c338:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].south = wall_dir[2];
 800c33c:	79b9      	ldrb	r1, [r7, #6]
 800c33e:	4b53      	ldr	r3, [pc, #332]	; (800c48c <wall_set+0x27c>)
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	461a      	mov	r2, r3
 800c344:	4b52      	ldr	r3, [pc, #328]	; (800c490 <wall_set+0x280>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	461c      	mov	r4, r3
 800c34a:	460b      	mov	r3, r1
 800c34c:	f003 0303 	and.w	r3, r3, #3
 800c350:	b2d8      	uxtb	r0, r3
 800c352:	4950      	ldr	r1, [pc, #320]	; (800c494 <wall_set+0x284>)
 800c354:	4613      	mov	r3, r2
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	4413      	add	r3, r2
 800c35a:	191a      	adds	r2, r3, r4
 800c35c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c360:	f360 1305 	bfi	r3, r0, #4, #2
 800c364:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].west = wall_dir[3];
 800c368:	79f9      	ldrb	r1, [r7, #7]
 800c36a:	4b48      	ldr	r3, [pc, #288]	; (800c48c <wall_set+0x27c>)
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	461a      	mov	r2, r3
 800c370:	4b47      	ldr	r3, [pc, #284]	; (800c490 <wall_set+0x280>)
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	461c      	mov	r4, r3
 800c376:	460b      	mov	r3, r1
 800c378:	f003 0303 	and.w	r3, r3, #3
 800c37c:	b2d8      	uxtb	r0, r3
 800c37e:	4945      	ldr	r1, [pc, #276]	; (800c494 <wall_set+0x284>)
 800c380:	4613      	mov	r3, r2
 800c382:	00db      	lsls	r3, r3, #3
 800c384:	4413      	add	r3, r2
 800c386:	191a      	adds	r2, r3, r4
 800c388:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c38c:	f360 1387 	bfi	r3, r0, #6, #2
 800c390:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  if(y < (NUMBER_OF_SQUARES-1) )wall[x][y+1].south = wall_dir[0];
 800c394:	4b3e      	ldr	r3, [pc, #248]	; (800c490 <wall_set+0x280>)
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	2b07      	cmp	r3, #7
 800c39a:	d815      	bhi.n	800c3c8 <wall_set+0x1b8>
 800c39c:	7939      	ldrb	r1, [r7, #4]
 800c39e:	4b3b      	ldr	r3, [pc, #236]	; (800c48c <wall_set+0x27c>)
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	461c      	mov	r4, r3
 800c3a4:	4b3a      	ldr	r3, [pc, #232]	; (800c490 <wall_set+0x280>)
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	1c5a      	adds	r2, r3, #1
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	f003 0303 	and.w	r3, r3, #3
 800c3b0:	b2d8      	uxtb	r0, r3
 800c3b2:	4938      	ldr	r1, [pc, #224]	; (800c494 <wall_set+0x284>)
 800c3b4:	4623      	mov	r3, r4
 800c3b6:	00db      	lsls	r3, r3, #3
 800c3b8:	4423      	add	r3, r4
 800c3ba:	441a      	add	r2, r3
 800c3bc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c3c0:	f360 1305 	bfi	r3, r0, #4, #2
 800c3c4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(x < (NUMBER_OF_SQUARES-1) )wall[x+1][y].west = wall_dir[1];
 800c3c8:	4b30      	ldr	r3, [pc, #192]	; (800c48c <wall_set+0x27c>)
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	2b07      	cmp	r3, #7
 800c3ce:	d815      	bhi.n	800c3fc <wall_set+0x1ec>
 800c3d0:	7979      	ldrb	r1, [r7, #5]
 800c3d2:	4b2e      	ldr	r3, [pc, #184]	; (800c48c <wall_set+0x27c>)
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	1c5a      	adds	r2, r3, #1
 800c3d8:	4b2d      	ldr	r3, [pc, #180]	; (800c490 <wall_set+0x280>)
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	461c      	mov	r4, r3
 800c3de:	460b      	mov	r3, r1
 800c3e0:	f003 0303 	and.w	r3, r3, #3
 800c3e4:	b2d8      	uxtb	r0, r3
 800c3e6:	492b      	ldr	r1, [pc, #172]	; (800c494 <wall_set+0x284>)
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	00db      	lsls	r3, r3, #3
 800c3ec:	4413      	add	r3, r2
 800c3ee:	191a      	adds	r2, r3, r4
 800c3f0:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c3f4:	f360 1387 	bfi	r3, r0, #6, #2
 800c3f8:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(y > 0 ) wall[x][y-1].north = wall_dir[2];
 800c3fc:	4b24      	ldr	r3, [pc, #144]	; (800c490 <wall_set+0x280>)
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d015      	beq.n	800c430 <wall_set+0x220>
 800c404:	79b9      	ldrb	r1, [r7, #6]
 800c406:	4b21      	ldr	r3, [pc, #132]	; (800c48c <wall_set+0x27c>)
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	461c      	mov	r4, r3
 800c40c:	4b20      	ldr	r3, [pc, #128]	; (800c490 <wall_set+0x280>)
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	1e5a      	subs	r2, r3, #1
 800c412:	460b      	mov	r3, r1
 800c414:	f003 0303 	and.w	r3, r3, #3
 800c418:	b2d8      	uxtb	r0, r3
 800c41a:	491e      	ldr	r1, [pc, #120]	; (800c494 <wall_set+0x284>)
 800c41c:	4623      	mov	r3, r4
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	4423      	add	r3, r4
 800c422:	441a      	add	r2, r3
 800c424:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c428:	f360 0301 	bfi	r3, r0, #0, #2
 800c42c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(x > 0 ) wall[x-1][y].east = wall_dir[3];
 800c430:	4b16      	ldr	r3, [pc, #88]	; (800c48c <wall_set+0x27c>)
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d015      	beq.n	800c464 <wall_set+0x254>
 800c438:	79f9      	ldrb	r1, [r7, #7]
 800c43a:	4b14      	ldr	r3, [pc, #80]	; (800c48c <wall_set+0x27c>)
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	1e5a      	subs	r2, r3, #1
 800c440:	4b13      	ldr	r3, [pc, #76]	; (800c490 <wall_set+0x280>)
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	461c      	mov	r4, r3
 800c446:	460b      	mov	r3, r1
 800c448:	f003 0303 	and.w	r3, r3, #3
 800c44c:	b2d8      	uxtb	r0, r3
 800c44e:	4911      	ldr	r1, [pc, #68]	; (800c494 <wall_set+0x284>)
 800c450:	4613      	mov	r3, r2
 800c452:	00db      	lsls	r3, r3, #3
 800c454:	4413      	add	r3, r2
 800c456:	191a      	adds	r2, r3, r4
 800c458:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c45c:	f360 0383 	bfi	r3, r0, #2, #2
 800c460:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

}
 800c464:	bf00      	nop
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bc90      	pop	{r4, r7}
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	20019044 	.word	0x20019044
 800c474:	20018490 	.word	0x20018490
 800c478:	2001848a 	.word	0x2001848a
 800c47c:	20018ef8 	.word	0x20018ef8
 800c480:	42c80000 	.word	0x42c80000
 800c484:	200183b4 	.word	0x200183b4
 800c488:	430c0000 	.word	0x430c0000
 800c48c:	200142fc 	.word	0x200142fc
 800c490:	200142fd 	.word	0x200142fd
 800c494:	20018efc 	.word	0x20018efc

0800c498 <goal_area_search>:
    	}
#endif
}


void goal_area_search(){
 800c498:	b580      	push	{r7, lr}
 800c49a:	b0be      	sub	sp, #248	; 0xf8
 800c49c:	af00      	add	r7, sp, #0

	char orbit;

	//壁更新
	wall_set();
 800c49e:	f7ff feb7 	bl	800c210 <wall_set>

	//マップ更新
	Walk_Map_Update();
 800c4a2:	f7ff fd17 	bl	800bed4 <Walk_Map_Update>


	switch(my_direction){
 800c4a6:	4bcc      	ldr	r3, [pc, #816]	; (800c7d8 <goal_area_search+0x340>)
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	2b03      	cmp	r3, #3
 800c4ac:	f200 86f7 	bhi.w	800d29e <goal_area_search+0xe06>
 800c4b0:	a201      	add	r2, pc, #4	; (adr r2, 800c4b8 <goal_area_search+0x20>)
 800c4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b6:	bf00      	nop
 800c4b8:	0800c4c9 	.word	0x0800c4c9
 800c4bc:	0800c87d 	.word	0x0800c87d
 800c4c0:	0800cc27 	.word	0x0800cc27
 800c4c4:	0800cf63 	.word	0x0800cf63
	case north:

		//現在の座�? == ゴールの�?2マス
		//xが小さ�?ほ�?なら�?�右回り
		//直進
		Accelerate();
 800c4c8:	f7fe fc2e 	bl	800ad28 <Accelerate>
		Decelerate();
 800c4cc:	f7fe fcdc 	bl	800ae88 <Decelerate>
		y++;
 800c4d0:	4bc2      	ldr	r3, [pc, #776]	; (800c7dc <goal_area_search+0x344>)
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	b2da      	uxtb	r2, r3
 800c4d8:	4bc0      	ldr	r3, [pc, #768]	; (800c7dc <goal_area_search+0x344>)
 800c4da:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800c4dc:	f7ff fe98 	bl	800c210 <wall_set>
		//�?つ
		for(int i=0;i < WAIT*0.5;i++);
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c4e6:	e004      	b.n	800c4f2 <goal_area_search+0x5a>
 800c4e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c4f2:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800c4f6:	f7fb ff4d 	bl	8008394 <__aeabi_i2d>
 800c4fa:	a3b5      	add	r3, pc, #724	; (adr r3, 800c7d0 <goal_area_search+0x338>)
 800c4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c500:	f7fc fa24 	bl	800894c <__aeabi_dcmplt>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d1ee      	bne.n	800c4e8 <goal_area_search+0x50>

		if(x == X_GOAL_LESSER){
 800c50a:	4bb5      	ldr	r3, [pc, #724]	; (800c7e0 <goal_area_search+0x348>)
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	2b07      	cmp	r3, #7
 800c510:	d103      	bne.n	800c51a <goal_area_search+0x82>
			orbit = 'R';
 800c512:	2352      	movs	r3, #82	; 0x52
 800c514:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800c518:	e006      	b.n	800c528 <goal_area_search+0x90>
		}
		//xが大きい方なら�?�左回り
		else if(x == X_GOAL_LARGER){
 800c51a:	4bb1      	ldr	r3, [pc, #708]	; (800c7e0 <goal_area_search+0x348>)
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	2b07      	cmp	r3, #7
 800c520:	d102      	bne.n	800c528 <goal_area_search+0x90>
			orbit = 'L';
 800c522:	234c      	movs	r3, #76	; 0x4c
 800c524:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}

		if(orbit == 'R'){
 800c528:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c52c:	2b52      	cmp	r3, #82	; 0x52
 800c52e:	f040 80c9 	bne.w	800c6c4 <goal_area_search+0x22c>
			//右回り
			turn_right();
 800c532:	f7fe fecb 	bl	800b2cc <turn_right>
			my_direction = east;
 800c536:	4ba8      	ldr	r3, [pc, #672]	; (800c7d8 <goal_area_search+0x340>)
 800c538:	2201      	movs	r2, #1
 800c53a:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c53c:	2300      	movs	r3, #0
 800c53e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c542:	e004      	b.n	800c54e <goal_area_search+0xb6>
 800c544:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c548:	3301      	adds	r3, #1
 800c54a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c54e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800c552:	f7fb ff1f 	bl	8008394 <__aeabi_i2d>
 800c556:	a39e      	add	r3, pc, #632	; (adr r3, 800c7d0 <goal_area_search+0x338>)
 800c558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55c:	f7fc f9f6 	bl	800894c <__aeabi_dcmplt>
 800c560:	4603      	mov	r3, r0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1ee      	bne.n	800c544 <goal_area_search+0xac>
			//直進
			Accelerate();
 800c566:	f7fe fbdf 	bl	800ad28 <Accelerate>
			Decelerate();
 800c56a:	f7fe fc8d 	bl	800ae88 <Decelerate>
			x++;
 800c56e:	4b9c      	ldr	r3, [pc, #624]	; (800c7e0 <goal_area_search+0x348>)
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	3301      	adds	r3, #1
 800c574:	b2da      	uxtb	r2, r3
 800c576:	4b9a      	ldr	r3, [pc, #616]	; (800c7e0 <goal_area_search+0x348>)
 800c578:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c57a:	f7ff fe49 	bl	800c210 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c57e:	2300      	movs	r3, #0
 800c580:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c584:	e004      	b.n	800c590 <goal_area_search+0xf8>
 800c586:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c58a:	3301      	adds	r3, #1
 800c58c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c590:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800c594:	f7fb fefe 	bl	8008394 <__aeabi_i2d>
 800c598:	a38d      	add	r3, pc, #564	; (adr r3, 800c7d0 <goal_area_search+0x338>)
 800c59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59e:	f7fc f9d5 	bl	800894c <__aeabi_dcmplt>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d1ee      	bne.n	800c586 <goal_area_search+0xee>


			//右回り
			turn_right();
 800c5a8:	f7fe fe90 	bl	800b2cc <turn_right>
			my_direction = south;
 800c5ac:	4b8a      	ldr	r3, [pc, #552]	; (800c7d8 <goal_area_search+0x340>)
 800c5ae:	2202      	movs	r2, #2
 800c5b0:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c5b8:	e004      	b.n	800c5c4 <goal_area_search+0x12c>
 800c5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5be:	3301      	adds	r3, #1
 800c5c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c5c4:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800c5c8:	f7fb fee4 	bl	8008394 <__aeabi_i2d>
 800c5cc:	a380      	add	r3, pc, #512	; (adr r3, 800c7d0 <goal_area_search+0x338>)
 800c5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d2:	f7fc f9bb 	bl	800894c <__aeabi_dcmplt>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1ee      	bne.n	800c5ba <goal_area_search+0x122>
			//直進
			Accelerate();
 800c5dc:	f7fe fba4 	bl	800ad28 <Accelerate>
			Decelerate();
 800c5e0:	f7fe fc52 	bl	800ae88 <Decelerate>
			y--;
 800c5e4:	4b7d      	ldr	r3, [pc, #500]	; (800c7dc <goal_area_search+0x344>)
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	b2da      	uxtb	r2, r3
 800c5ec:	4b7b      	ldr	r3, [pc, #492]	; (800c7dc <goal_area_search+0x344>)
 800c5ee:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c5f0:	f7ff fe0e 	bl	800c210 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c5fa:	e004      	b.n	800c606 <goal_area_search+0x16e>
 800c5fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c600:	3301      	adds	r3, #1
 800c602:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c606:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800c60a:	f7fb fec3 	bl	8008394 <__aeabi_i2d>
 800c60e:	a370      	add	r3, pc, #448	; (adr r3, 800c7d0 <goal_area_search+0x338>)
 800c610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c614:	f7fc f99a 	bl	800894c <__aeabi_dcmplt>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1ee      	bne.n	800c5fc <goal_area_search+0x164>

			//右回転
			turn_right();
 800c61e:	f7fe fe55 	bl	800b2cc <turn_right>
			my_direction = west;
 800c622:	4b6d      	ldr	r3, [pc, #436]	; (800c7d8 <goal_area_search+0x340>)
 800c624:	2203      	movs	r2, #3
 800c626:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c628:	2300      	movs	r3, #0
 800c62a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c62e:	e004      	b.n	800c63a <goal_area_search+0x1a2>
 800c630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c634:	3301      	adds	r3, #1
 800c636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c63a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800c63e:	f7fb fea9 	bl	8008394 <__aeabi_i2d>
 800c642:	a363      	add	r3, pc, #396	; (adr r3, 800c7d0 <goal_area_search+0x338>)
 800c644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c648:	f7fc f980 	bl	800894c <__aeabi_dcmplt>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d1ee      	bne.n	800c630 <goal_area_search+0x198>
			//直進
			Accelerate();
 800c652:	f7fe fb69 	bl	800ad28 <Accelerate>
			Decelerate();
 800c656:	f7fe fc17 	bl	800ae88 <Decelerate>
			y--;
 800c65a:	4b60      	ldr	r3, [pc, #384]	; (800c7dc <goal_area_search+0x344>)
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	3b01      	subs	r3, #1
 800c660:	b2da      	uxtb	r2, r3
 800c662:	4b5e      	ldr	r3, [pc, #376]	; (800c7dc <goal_area_search+0x344>)
 800c664:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c666:	2300      	movs	r3, #0
 800c668:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c66c:	e004      	b.n	800c678 <goal_area_search+0x1e0>
 800c66e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c672:	3301      	adds	r3, #1
 800c674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c678:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800c67c:	f7fb fe8a 	bl	8008394 <__aeabi_i2d>
 800c680:	a353      	add	r3, pc, #332	; (adr r3, 800c7d0 <goal_area_search+0x338>)
 800c682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c686:	f7fc f961 	bl	800894c <__aeabi_dcmplt>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d1ee      	bne.n	800c66e <goal_area_search+0x1d6>
			//左回転
			turn_left();
 800c690:	f7fe fe86 	bl	800b3a0 <turn_left>
			my_direction = south;
 800c694:	4b50      	ldr	r3, [pc, #320]	; (800c7d8 <goal_area_search+0x340>)
 800c696:	2202      	movs	r2, #2
 800c698:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c69a:	2300      	movs	r3, #0
 800c69c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c6a0:	e004      	b.n	800c6ac <goal_area_search+0x214>
 800c6a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c6ac:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800c6b0:	f7fb fe70 	bl	8008394 <__aeabi_i2d>
 800c6b4:	a346      	add	r3, pc, #280	; (adr r3, 800c7d0 <goal_area_search+0x338>)
 800c6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ba:	f7fc f947 	bl	800894c <__aeabi_dcmplt>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1ee      	bne.n	800c6a2 <goal_area_search+0x20a>
		}

		if(orbit == 'L'){
 800c6c4:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c6c8:	2b4c      	cmp	r3, #76	; 0x4c
 800c6ca:	f040 85ea 	bne.w	800d2a2 <goal_area_search+0xe0a>
			//左回り
			turn_left();
 800c6ce:	f7fe fe67 	bl	800b3a0 <turn_left>
			my_direction = west;
 800c6d2:	4b41      	ldr	r3, [pc, #260]	; (800c7d8 <goal_area_search+0x340>)
 800c6d4:	2203      	movs	r2, #3
 800c6d6:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c6d8:	2300      	movs	r3, #0
 800c6da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c6de:	e004      	b.n	800c6ea <goal_area_search+0x252>
 800c6e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c6ea:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800c6ee:	f7fb fe51 	bl	8008394 <__aeabi_i2d>
 800c6f2:	a337      	add	r3, pc, #220	; (adr r3, 800c7d0 <goal_area_search+0x338>)
 800c6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f8:	f7fc f928 	bl	800894c <__aeabi_dcmplt>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1ee      	bne.n	800c6e0 <goal_area_search+0x248>
			//直進
			Accelerate();
 800c702:	f7fe fb11 	bl	800ad28 <Accelerate>
			Decelerate();
 800c706:	f7fe fbbf 	bl	800ae88 <Decelerate>
			x--;
 800c70a:	4b35      	ldr	r3, [pc, #212]	; (800c7e0 <goal_area_search+0x348>)
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	3b01      	subs	r3, #1
 800c710:	b2da      	uxtb	r2, r3
 800c712:	4b33      	ldr	r3, [pc, #204]	; (800c7e0 <goal_area_search+0x348>)
 800c714:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c716:	f7ff fd7b 	bl	800c210 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c71a:	2300      	movs	r3, #0
 800c71c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c720:	e004      	b.n	800c72c <goal_area_search+0x294>
 800c722:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c726:	3301      	adds	r3, #1
 800c728:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c72c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800c730:	f7fb fe30 	bl	8008394 <__aeabi_i2d>
 800c734:	a326      	add	r3, pc, #152	; (adr r3, 800c7d0 <goal_area_search+0x338>)
 800c736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73a:	f7fc f907 	bl	800894c <__aeabi_dcmplt>
 800c73e:	4603      	mov	r3, r0
 800c740:	2b00      	cmp	r3, #0
 800c742:	d1ee      	bne.n	800c722 <goal_area_search+0x28a>

			turn_left();
 800c744:	f7fe fe2c 	bl	800b3a0 <turn_left>
			my_direction = south;
 800c748:	4b23      	ldr	r3, [pc, #140]	; (800c7d8 <goal_area_search+0x340>)
 800c74a:	2202      	movs	r2, #2
 800c74c:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c74e:	2300      	movs	r3, #0
 800c750:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c754:	e004      	b.n	800c760 <goal_area_search+0x2c8>
 800c756:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c75a:	3301      	adds	r3, #1
 800c75c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c760:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800c764:	f7fb fe16 	bl	8008394 <__aeabi_i2d>
 800c768:	a319      	add	r3, pc, #100	; (adr r3, 800c7d0 <goal_area_search+0x338>)
 800c76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76e:	f7fc f8ed 	bl	800894c <__aeabi_dcmplt>
 800c772:	4603      	mov	r3, r0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d1ee      	bne.n	800c756 <goal_area_search+0x2be>
			//直進
			Accelerate();
 800c778:	f7fe fad6 	bl	800ad28 <Accelerate>
			Decelerate();
 800c77c:	f7fe fb84 	bl	800ae88 <Decelerate>
			y--;
 800c780:	4b16      	ldr	r3, [pc, #88]	; (800c7dc <goal_area_search+0x344>)
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	3b01      	subs	r3, #1
 800c786:	b2da      	uxtb	r2, r3
 800c788:	4b14      	ldr	r3, [pc, #80]	; (800c7dc <goal_area_search+0x344>)
 800c78a:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c78c:	f7ff fd40 	bl	800c210 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c790:	2300      	movs	r3, #0
 800c792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c796:	e004      	b.n	800c7a2 <goal_area_search+0x30a>
 800c798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c79c:	3301      	adds	r3, #1
 800c79e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c7a2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800c7a6:	f7fb fdf5 	bl	8008394 <__aeabi_i2d>
 800c7aa:	a309      	add	r3, pc, #36	; (adr r3, 800c7d0 <goal_area_search+0x338>)
 800c7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b0:	f7fc f8cc 	bl	800894c <__aeabi_dcmplt>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d1ee      	bne.n	800c798 <goal_area_search+0x300>

			//左回転
			turn_left();
 800c7ba:	f7fe fdf1 	bl	800b3a0 <turn_left>
			my_direction = east;
 800c7be:	4b06      	ldr	r3, [pc, #24]	; (800c7d8 <goal_area_search+0x340>)
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c7ca:	e010      	b.n	800c7ee <goal_area_search+0x356>
 800c7cc:	f3af 8000 	nop.w
 800c7d0:	00000000 	.word	0x00000000
 800c7d4:	40cd4c00 	.word	0x40cd4c00
 800c7d8:	2001848a 	.word	0x2001848a
 800c7dc:	200142fd 	.word	0x200142fd
 800c7e0:	200142fc 	.word	0x200142fc
 800c7e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c7ee:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800c7f2:	f7fb fdcf 	bl	8008394 <__aeabi_i2d>
 800c7f6:	a3d6      	add	r3, pc, #856	; (adr r3, 800cb50 <goal_area_search+0x6b8>)
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	f7fc f8a6 	bl	800894c <__aeabi_dcmplt>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1ee      	bne.n	800c7e4 <goal_area_search+0x34c>
			//直進
			Accelerate();
 800c806:	f7fe fa8f 	bl	800ad28 <Accelerate>
			Decelerate();
 800c80a:	f7fe fb3d 	bl	800ae88 <Decelerate>
			x++;
 800c80e:	4bd2      	ldr	r3, [pc, #840]	; (800cb58 <goal_area_search+0x6c0>)
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	3301      	adds	r3, #1
 800c814:	b2da      	uxtb	r2, r3
 800c816:	4bd0      	ldr	r3, [pc, #832]	; (800cb58 <goal_area_search+0x6c0>)
 800c818:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c81a:	2300      	movs	r3, #0
 800c81c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c820:	e004      	b.n	800c82c <goal_area_search+0x394>
 800c822:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c826:	3301      	adds	r3, #1
 800c828:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c82c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800c830:	f7fb fdb0 	bl	8008394 <__aeabi_i2d>
 800c834:	a3c6      	add	r3, pc, #792	; (adr r3, 800cb50 <goal_area_search+0x6b8>)
 800c836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83a:	f7fc f887 	bl	800894c <__aeabi_dcmplt>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d1ee      	bne.n	800c822 <goal_area_search+0x38a>
			//右回転
			turn_right();
 800c844:	f7fe fd42 	bl	800b2cc <turn_right>
			my_direction = north;
 800c848:	4bc4      	ldr	r3, [pc, #784]	; (800cb5c <goal_area_search+0x6c4>)
 800c84a:	2200      	movs	r2, #0
 800c84c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c84e:	2300      	movs	r3, #0
 800c850:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c854:	e004      	b.n	800c860 <goal_area_search+0x3c8>
 800c856:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c85a:	3301      	adds	r3, #1
 800c85c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c860:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800c864:	f7fb fd96 	bl	8008394 <__aeabi_i2d>
 800c868:	a3b9      	add	r3, pc, #740	; (adr r3, 800cb50 <goal_area_search+0x6b8>)
 800c86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86e:	f7fc f86d 	bl	800894c <__aeabi_dcmplt>
 800c872:	4603      	mov	r3, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d1ee      	bne.n	800c856 <goal_area_search+0x3be>
		}

		break;
 800c878:	f000 bd13 	b.w	800d2a2 <goal_area_search+0xe0a>
	case east:
		//直進
		Accelerate();
 800c87c:	f7fe fa54 	bl	800ad28 <Accelerate>
		Decelerate();
 800c880:	f7fe fb02 	bl	800ae88 <Decelerate>
		x++;
 800c884:	4bb4      	ldr	r3, [pc, #720]	; (800cb58 <goal_area_search+0x6c0>)
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	3301      	adds	r3, #1
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	4bb2      	ldr	r3, [pc, #712]	; (800cb58 <goal_area_search+0x6c0>)
 800c88e:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800c890:	f7ff fcbe 	bl	800c210 <wall_set>
		//�?つ
		for(int i=0;i < WAIT*0.5;i++);
 800c894:	2300      	movs	r3, #0
 800c896:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c89a:	e004      	b.n	800c8a6 <goal_area_search+0x40e>
 800c89c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c8a6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800c8aa:	f7fb fd73 	bl	8008394 <__aeabi_i2d>
 800c8ae:	a3a8      	add	r3, pc, #672	; (adr r3, 800cb50 <goal_area_search+0x6b8>)
 800c8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b4:	f7fc f84a 	bl	800894c <__aeabi_dcmplt>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d1ee      	bne.n	800c89c <goal_area_search+0x404>

		//現在の座�? == ゴールの左2マス
		if(y == Y_GOAL_LESSER){
 800c8be:	4ba8      	ldr	r3, [pc, #672]	; (800cb60 <goal_area_search+0x6c8>)
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	2b07      	cmp	r3, #7
 800c8c4:	d103      	bne.n	800c8ce <goal_area_search+0x436>
			orbit = 'L';
 800c8c6:	234c      	movs	r3, #76	; 0x4c
 800c8c8:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800c8cc:	e006      	b.n	800c8dc <goal_area_search+0x444>
		}
		//yが大きい方なら�?�左回り
		else if(y == Y_GOAL_LARGER){
 800c8ce:	4ba4      	ldr	r3, [pc, #656]	; (800cb60 <goal_area_search+0x6c8>)
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	2b07      	cmp	r3, #7
 800c8d4:	d102      	bne.n	800c8dc <goal_area_search+0x444>
			orbit = 'R';
 800c8d6:	2352      	movs	r3, #82	; 0x52
 800c8d8:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800c8dc:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c8e0:	2b52      	cmp	r3, #82	; 0x52
 800c8e2:	f040 80c9 	bne.w	800ca78 <goal_area_search+0x5e0>
			//右回り
			turn_right();
 800c8e6:	f7fe fcf1 	bl	800b2cc <turn_right>
			my_direction = south;
 800c8ea:	4b9c      	ldr	r3, [pc, #624]	; (800cb5c <goal_area_search+0x6c4>)
 800c8ec:	2202      	movs	r2, #2
 800c8ee:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c8f6:	e004      	b.n	800c902 <goal_area_search+0x46a>
 800c8f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c902:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800c906:	f7fb fd45 	bl	8008394 <__aeabi_i2d>
 800c90a:	a391      	add	r3, pc, #580	; (adr r3, 800cb50 <goal_area_search+0x6b8>)
 800c90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c910:	f7fc f81c 	bl	800894c <__aeabi_dcmplt>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1ee      	bne.n	800c8f8 <goal_area_search+0x460>
			//直進
			Accelerate();
 800c91a:	f7fe fa05 	bl	800ad28 <Accelerate>
			Decelerate();
 800c91e:	f7fe fab3 	bl	800ae88 <Decelerate>
			y--;
 800c922:	4b8f      	ldr	r3, [pc, #572]	; (800cb60 <goal_area_search+0x6c8>)
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	3b01      	subs	r3, #1
 800c928:	b2da      	uxtb	r2, r3
 800c92a:	4b8d      	ldr	r3, [pc, #564]	; (800cb60 <goal_area_search+0x6c8>)
 800c92c:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c92e:	f7ff fc6f 	bl	800c210 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c932:	2300      	movs	r3, #0
 800c934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c938:	e004      	b.n	800c944 <goal_area_search+0x4ac>
 800c93a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c93e:	3301      	adds	r3, #1
 800c940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c944:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800c948:	f7fb fd24 	bl	8008394 <__aeabi_i2d>
 800c94c:	a380      	add	r3, pc, #512	; (adr r3, 800cb50 <goal_area_search+0x6b8>)
 800c94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c952:	f7fb fffb 	bl	800894c <__aeabi_dcmplt>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d1ee      	bne.n	800c93a <goal_area_search+0x4a2>

			//右回り
			turn_right();
 800c95c:	f7fe fcb6 	bl	800b2cc <turn_right>
			my_direction = west;
 800c960:	4b7e      	ldr	r3, [pc, #504]	; (800cb5c <goal_area_search+0x6c4>)
 800c962:	2203      	movs	r2, #3
 800c964:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c966:	2300      	movs	r3, #0
 800c968:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c96c:	e004      	b.n	800c978 <goal_area_search+0x4e0>
 800c96e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c972:	3301      	adds	r3, #1
 800c974:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c978:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800c97c:	f7fb fd0a 	bl	8008394 <__aeabi_i2d>
 800c980:	a373      	add	r3, pc, #460	; (adr r3, 800cb50 <goal_area_search+0x6b8>)
 800c982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c986:	f7fb ffe1 	bl	800894c <__aeabi_dcmplt>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1ee      	bne.n	800c96e <goal_area_search+0x4d6>
			//直進
			Accelerate();
 800c990:	f7fe f9ca 	bl	800ad28 <Accelerate>
			Decelerate();
 800c994:	f7fe fa78 	bl	800ae88 <Decelerate>
			x--;
 800c998:	4b6f      	ldr	r3, [pc, #444]	; (800cb58 <goal_area_search+0x6c0>)
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	3b01      	subs	r3, #1
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	4b6d      	ldr	r3, [pc, #436]	; (800cb58 <goal_area_search+0x6c0>)
 800c9a2:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c9a4:	f7ff fc34 	bl	800c210 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c9ae:	e004      	b.n	800c9ba <goal_area_search+0x522>
 800c9b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c9ba:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800c9be:	f7fb fce9 	bl	8008394 <__aeabi_i2d>
 800c9c2:	a363      	add	r3, pc, #396	; (adr r3, 800cb50 <goal_area_search+0x6b8>)
 800c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c8:	f7fb ffc0 	bl	800894c <__aeabi_dcmplt>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d1ee      	bne.n	800c9b0 <goal_area_search+0x518>

			//右回転
			turn_right();
 800c9d2:	f7fe fc7b 	bl	800b2cc <turn_right>
			my_direction = north;
 800c9d6:	4b61      	ldr	r3, [pc, #388]	; (800cb5c <goal_area_search+0x6c4>)
 800c9d8:	2200      	movs	r2, #0
 800c9da:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c9dc:	2300      	movs	r3, #0
 800c9de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c9e2:	e004      	b.n	800c9ee <goal_area_search+0x556>
 800c9e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c9ee:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800c9f2:	f7fb fccf 	bl	8008394 <__aeabi_i2d>
 800c9f6:	a356      	add	r3, pc, #344	; (adr r3, 800cb50 <goal_area_search+0x6b8>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	f7fb ffa6 	bl	800894c <__aeabi_dcmplt>
 800ca00:	4603      	mov	r3, r0
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1ee      	bne.n	800c9e4 <goal_area_search+0x54c>
			//直進
			Accelerate();
 800ca06:	f7fe f98f 	bl	800ad28 <Accelerate>
			Decelerate();
 800ca0a:	f7fe fa3d 	bl	800ae88 <Decelerate>
			y++;
 800ca0e:	4b54      	ldr	r3, [pc, #336]	; (800cb60 <goal_area_search+0x6c8>)
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	3301      	adds	r3, #1
 800ca14:	b2da      	uxtb	r2, r3
 800ca16:	4b52      	ldr	r3, [pc, #328]	; (800cb60 <goal_area_search+0x6c8>)
 800ca18:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ca20:	e004      	b.n	800ca2c <goal_area_search+0x594>
 800ca22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ca26:	3301      	adds	r3, #1
 800ca28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ca2c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800ca30:	f7fb fcb0 	bl	8008394 <__aeabi_i2d>
 800ca34:	a346      	add	r3, pc, #280	; (adr r3, 800cb50 <goal_area_search+0x6b8>)
 800ca36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3a:	f7fb ff87 	bl	800894c <__aeabi_dcmplt>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1ee      	bne.n	800ca22 <goal_area_search+0x58a>
			//左回転
			turn_left();
 800ca44:	f7fe fcac 	bl	800b3a0 <turn_left>
			my_direction = west;
 800ca48:	4b44      	ldr	r3, [pc, #272]	; (800cb5c <goal_area_search+0x6c4>)
 800ca4a:	2203      	movs	r2, #3
 800ca4c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ca4e:	2300      	movs	r3, #0
 800ca50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca54:	e004      	b.n	800ca60 <goal_area_search+0x5c8>
 800ca56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca60:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ca64:	f7fb fc96 	bl	8008394 <__aeabi_i2d>
 800ca68:	a339      	add	r3, pc, #228	; (adr r3, 800cb50 <goal_area_search+0x6b8>)
 800ca6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6e:	f7fb ff6d 	bl	800894c <__aeabi_dcmplt>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d1ee      	bne.n	800ca56 <goal_area_search+0x5be>
		}

		if(orbit == 'L'){
 800ca78:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800ca7c:	2b4c      	cmp	r3, #76	; 0x4c
 800ca7e:	f040 8412 	bne.w	800d2a6 <goal_area_search+0xe0e>
			//左回り
			turn_left();
 800ca82:	f7fe fc8d 	bl	800b3a0 <turn_left>
			my_direction = north;
 800ca86:	4b35      	ldr	r3, [pc, #212]	; (800cb5c <goal_area_search+0x6c4>)
 800ca88:	2200      	movs	r2, #0
 800ca8a:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ca92:	e004      	b.n	800ca9e <goal_area_search+0x606>
 800ca94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca98:	3301      	adds	r3, #1
 800ca9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ca9e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800caa2:	f7fb fc77 	bl	8008394 <__aeabi_i2d>
 800caa6:	a32a      	add	r3, pc, #168	; (adr r3, 800cb50 <goal_area_search+0x6b8>)
 800caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caac:	f7fb ff4e 	bl	800894c <__aeabi_dcmplt>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1ee      	bne.n	800ca94 <goal_area_search+0x5fc>
			//直進
			Accelerate();
 800cab6:	f7fe f937 	bl	800ad28 <Accelerate>
			Decelerate();
 800caba:	f7fe f9e5 	bl	800ae88 <Decelerate>
			y++;
 800cabe:	4b28      	ldr	r3, [pc, #160]	; (800cb60 <goal_area_search+0x6c8>)
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	3301      	adds	r3, #1
 800cac4:	b2da      	uxtb	r2, r3
 800cac6:	4b26      	ldr	r3, [pc, #152]	; (800cb60 <goal_area_search+0x6c8>)
 800cac8:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800caca:	f7ff fba1 	bl	800c210 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cace:	2300      	movs	r3, #0
 800cad0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cad4:	e004      	b.n	800cae0 <goal_area_search+0x648>
 800cad6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cada:	3301      	adds	r3, #1
 800cadc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cae0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800cae4:	f7fb fc56 	bl	8008394 <__aeabi_i2d>
 800cae8:	a319      	add	r3, pc, #100	; (adr r3, 800cb50 <goal_area_search+0x6b8>)
 800caea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caee:	f7fb ff2d 	bl	800894c <__aeabi_dcmplt>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1ee      	bne.n	800cad6 <goal_area_search+0x63e>

			turn_left();
 800caf8:	f7fe fc52 	bl	800b3a0 <turn_left>
			my_direction = west;
 800cafc:	4b17      	ldr	r3, [pc, #92]	; (800cb5c <goal_area_search+0x6c4>)
 800cafe:	2203      	movs	r2, #3
 800cb00:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cb02:	2300      	movs	r3, #0
 800cb04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cb08:	e004      	b.n	800cb14 <goal_area_search+0x67c>
 800cb0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb0e:	3301      	adds	r3, #1
 800cb10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cb14:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800cb18:	f7fb fc3c 	bl	8008394 <__aeabi_i2d>
 800cb1c:	a30c      	add	r3, pc, #48	; (adr r3, 800cb50 <goal_area_search+0x6b8>)
 800cb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb22:	f7fb ff13 	bl	800894c <__aeabi_dcmplt>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d1ee      	bne.n	800cb0a <goal_area_search+0x672>
			//直進
			Accelerate();
 800cb2c:	f7fe f8fc 	bl	800ad28 <Accelerate>
			Decelerate();
 800cb30:	f7fe f9aa 	bl	800ae88 <Decelerate>
			x--;
 800cb34:	4b08      	ldr	r3, [pc, #32]	; (800cb58 <goal_area_search+0x6c0>)
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	3b01      	subs	r3, #1
 800cb3a:	b2da      	uxtb	r2, r3
 800cb3c:	4b06      	ldr	r3, [pc, #24]	; (800cb58 <goal_area_search+0x6c0>)
 800cb3e:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cb40:	f7ff fb66 	bl	800c210 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cb44:	2300      	movs	r3, #0
 800cb46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb4a:	e010      	b.n	800cb6e <goal_area_search+0x6d6>
 800cb4c:	f3af 8000 	nop.w
 800cb50:	00000000 	.word	0x00000000
 800cb54:	40cd4c00 	.word	0x40cd4c00
 800cb58:	200142fc 	.word	0x200142fc
 800cb5c:	2001848a 	.word	0x2001848a
 800cb60:	200142fd 	.word	0x200142fd
 800cb64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb68:	3301      	adds	r3, #1
 800cb6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb6e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800cb72:	f7fb fc0f 	bl	8008394 <__aeabi_i2d>
 800cb76:	a3bc      	add	r3, pc, #752	; (adr r3, 800ce68 <goal_area_search+0x9d0>)
 800cb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7c:	f7fb fee6 	bl	800894c <__aeabi_dcmplt>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d1ee      	bne.n	800cb64 <goal_area_search+0x6cc>

			//左回転
			turn_left();
 800cb86:	f7fe fc0b 	bl	800b3a0 <turn_left>
			my_direction = south;
 800cb8a:	4bb9      	ldr	r3, [pc, #740]	; (800ce70 <goal_area_search+0x9d8>)
 800cb8c:	2202      	movs	r2, #2
 800cb8e:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cb90:	2300      	movs	r3, #0
 800cb92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb96:	e004      	b.n	800cba2 <goal_area_search+0x70a>
 800cb98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cba2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800cba6:	f7fb fbf5 	bl	8008394 <__aeabi_i2d>
 800cbaa:	a3af      	add	r3, pc, #700	; (adr r3, 800ce68 <goal_area_search+0x9d0>)
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	f7fb fecc 	bl	800894c <__aeabi_dcmplt>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d1ee      	bne.n	800cb98 <goal_area_search+0x700>
			//直進
			Accelerate();
 800cbba:	f7fe f8b5 	bl	800ad28 <Accelerate>
			Decelerate();
 800cbbe:	f7fe f963 	bl	800ae88 <Decelerate>
			y--;
 800cbc2:	4bac      	ldr	r3, [pc, #688]	; (800ce74 <goal_area_search+0x9dc>)
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	3b01      	subs	r3, #1
 800cbc8:	b2da      	uxtb	r2, r3
 800cbca:	4baa      	ldr	r3, [pc, #680]	; (800ce74 <goal_area_search+0x9dc>)
 800cbcc:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cbce:	2300      	movs	r3, #0
 800cbd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cbd4:	e004      	b.n	800cbe0 <goal_area_search+0x748>
 800cbd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cbda:	3301      	adds	r3, #1
 800cbdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cbe0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800cbe4:	f7fb fbd6 	bl	8008394 <__aeabi_i2d>
 800cbe8:	a39f      	add	r3, pc, #636	; (adr r3, 800ce68 <goal_area_search+0x9d0>)
 800cbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbee:	f7fb fead 	bl	800894c <__aeabi_dcmplt>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d1ee      	bne.n	800cbd6 <goal_area_search+0x73e>
			//右回転
			turn_right();
 800cbf8:	f7fe fb68 	bl	800b2cc <turn_right>
			my_direction = west;
 800cbfc:	4b9c      	ldr	r3, [pc, #624]	; (800ce70 <goal_area_search+0x9d8>)
 800cbfe:	2203      	movs	r2, #3
 800cc00:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cc02:	2300      	movs	r3, #0
 800cc04:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cc06:	e002      	b.n	800cc0e <goal_area_search+0x776>
 800cc08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cc0e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cc10:	f7fb fbc0 	bl	8008394 <__aeabi_i2d>
 800cc14:	a394      	add	r3, pc, #592	; (adr r3, 800ce68 <goal_area_search+0x9d0>)
 800cc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1a:	f7fb fe97 	bl	800894c <__aeabi_dcmplt>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d1f1      	bne.n	800cc08 <goal_area_search+0x770>


		}
		break;
 800cc24:	e33f      	b.n	800d2a6 <goal_area_search+0xe0e>
	case south:
		//直進
		Accelerate();
 800cc26:	f7fe f87f 	bl	800ad28 <Accelerate>
		Decelerate();
 800cc2a:	f7fe f92d 	bl	800ae88 <Decelerate>
		y--;
 800cc2e:	4b91      	ldr	r3, [pc, #580]	; (800ce74 <goal_area_search+0x9dc>)
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	3b01      	subs	r3, #1
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	4b8f      	ldr	r3, [pc, #572]	; (800ce74 <goal_area_search+0x9dc>)
 800cc38:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800cc3a:	f7ff fae9 	bl	800c210 <wall_set>
		//�?つ
		for(int i=0;i < WAIT*0.5;i++);
 800cc3e:	2300      	movs	r3, #0
 800cc40:	67bb      	str	r3, [r7, #120]	; 0x78
 800cc42:	e002      	b.n	800cc4a <goal_area_search+0x7b2>
 800cc44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc46:	3301      	adds	r3, #1
 800cc48:	67bb      	str	r3, [r7, #120]	; 0x78
 800cc4a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800cc4c:	f7fb fba2 	bl	8008394 <__aeabi_i2d>
 800cc50:	a385      	add	r3, pc, #532	; (adr r3, 800ce68 <goal_area_search+0x9d0>)
 800cc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc56:	f7fb fe79 	bl	800894c <__aeabi_dcmplt>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d1f1      	bne.n	800cc44 <goal_area_search+0x7ac>

		//現在の座�? == ゴールの�?2マス
		if(x == X_GOAL_LESSER){
 800cc60:	4b85      	ldr	r3, [pc, #532]	; (800ce78 <goal_area_search+0x9e0>)
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	2b07      	cmp	r3, #7
 800cc66:	d103      	bne.n	800cc70 <goal_area_search+0x7d8>
			orbit = 'L';
 800cc68:	234c      	movs	r3, #76	; 0x4c
 800cc6a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800cc6e:	e006      	b.n	800cc7e <goal_area_search+0x7e6>
		}
		//xが大きい方なら�?�左回り
		else if(x == X_GOAL_LARGER){
 800cc70:	4b81      	ldr	r3, [pc, #516]	; (800ce78 <goal_area_search+0x9e0>)
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	2b07      	cmp	r3, #7
 800cc76:	d102      	bne.n	800cc7e <goal_area_search+0x7e6>
			orbit = 'R';
 800cc78:	2352      	movs	r3, #82	; 0x52
 800cc7a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800cc7e:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cc82:	2b52      	cmp	r3, #82	; 0x52
 800cc84:	f040 80ad 	bne.w	800cde2 <goal_area_search+0x94a>
			//右回り
			turn_right();
 800cc88:	f7fe fb20 	bl	800b2cc <turn_right>
			my_direction = west;
 800cc8c:	4b78      	ldr	r3, [pc, #480]	; (800ce70 <goal_area_search+0x9d8>)
 800cc8e:	2203      	movs	r2, #3
 800cc90:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cc92:	2300      	movs	r3, #0
 800cc94:	677b      	str	r3, [r7, #116]	; 0x74
 800cc96:	e002      	b.n	800cc9e <goal_area_search+0x806>
 800cc98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	677b      	str	r3, [r7, #116]	; 0x74
 800cc9e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800cca0:	f7fb fb78 	bl	8008394 <__aeabi_i2d>
 800cca4:	a370      	add	r3, pc, #448	; (adr r3, 800ce68 <goal_area_search+0x9d0>)
 800cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccaa:	f7fb fe4f 	bl	800894c <__aeabi_dcmplt>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d1f1      	bne.n	800cc98 <goal_area_search+0x800>
			//直進
			Accelerate();
 800ccb4:	f7fe f838 	bl	800ad28 <Accelerate>
			Decelerate();
 800ccb8:	f7fe f8e6 	bl	800ae88 <Decelerate>
			x--;
 800ccbc:	4b6e      	ldr	r3, [pc, #440]	; (800ce78 <goal_area_search+0x9e0>)
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	b2da      	uxtb	r2, r3
 800ccc4:	4b6c      	ldr	r3, [pc, #432]	; (800ce78 <goal_area_search+0x9e0>)
 800ccc6:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800ccc8:	f7ff faa2 	bl	800c210 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cccc:	2300      	movs	r3, #0
 800ccce:	673b      	str	r3, [r7, #112]	; 0x70
 800ccd0:	e002      	b.n	800ccd8 <goal_area_search+0x840>
 800ccd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	673b      	str	r3, [r7, #112]	; 0x70
 800ccd8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ccda:	f7fb fb5b 	bl	8008394 <__aeabi_i2d>
 800ccde:	a362      	add	r3, pc, #392	; (adr r3, 800ce68 <goal_area_search+0x9d0>)
 800cce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce4:	f7fb fe32 	bl	800894c <__aeabi_dcmplt>
 800cce8:	4603      	mov	r3, r0
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d1f1      	bne.n	800ccd2 <goal_area_search+0x83a>

			//右回り
			turn_right();
 800ccee:	f7fe faed 	bl	800b2cc <turn_right>
			my_direction = north;
 800ccf2:	4b5f      	ldr	r3, [pc, #380]	; (800ce70 <goal_area_search+0x9d8>)
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ccfc:	e002      	b.n	800cd04 <goal_area_search+0x86c>
 800ccfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd00:	3301      	adds	r3, #1
 800cd02:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cd04:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cd06:	f7fb fb45 	bl	8008394 <__aeabi_i2d>
 800cd0a:	a357      	add	r3, pc, #348	; (adr r3, 800ce68 <goal_area_search+0x9d0>)
 800cd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd10:	f7fb fe1c 	bl	800894c <__aeabi_dcmplt>
 800cd14:	4603      	mov	r3, r0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1f1      	bne.n	800ccfe <goal_area_search+0x866>
			//直進
			Accelerate();
 800cd1a:	f7fe f805 	bl	800ad28 <Accelerate>
			Decelerate();
 800cd1e:	f7fe f8b3 	bl	800ae88 <Decelerate>
			y++;
 800cd22:	4b54      	ldr	r3, [pc, #336]	; (800ce74 <goal_area_search+0x9dc>)
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	3301      	adds	r3, #1
 800cd28:	b2da      	uxtb	r2, r3
 800cd2a:	4b52      	ldr	r3, [pc, #328]	; (800ce74 <goal_area_search+0x9dc>)
 800cd2c:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cd2e:	f7ff fa6f 	bl	800c210 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cd32:	2300      	movs	r3, #0
 800cd34:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd36:	e002      	b.n	800cd3e <goal_area_search+0x8a6>
 800cd38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd3e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800cd40:	f7fb fb28 	bl	8008394 <__aeabi_i2d>
 800cd44:	a348      	add	r3, pc, #288	; (adr r3, 800ce68 <goal_area_search+0x9d0>)
 800cd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4a:	f7fb fdff 	bl	800894c <__aeabi_dcmplt>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d1f1      	bne.n	800cd38 <goal_area_search+0x8a0>

			//右回転
			turn_right();
 800cd54:	f7fe faba 	bl	800b2cc <turn_right>
			my_direction = east;
 800cd58:	4b45      	ldr	r3, [pc, #276]	; (800ce70 <goal_area_search+0x9d8>)
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cd5e:	2300      	movs	r3, #0
 800cd60:	667b      	str	r3, [r7, #100]	; 0x64
 800cd62:	e002      	b.n	800cd6a <goal_area_search+0x8d2>
 800cd64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd66:	3301      	adds	r3, #1
 800cd68:	667b      	str	r3, [r7, #100]	; 0x64
 800cd6a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cd6c:	f7fb fb12 	bl	8008394 <__aeabi_i2d>
 800cd70:	a33d      	add	r3, pc, #244	; (adr r3, 800ce68 <goal_area_search+0x9d0>)
 800cd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd76:	f7fb fde9 	bl	800894c <__aeabi_dcmplt>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d1f1      	bne.n	800cd64 <goal_area_search+0x8cc>
			//直進
			Accelerate();
 800cd80:	f7fd ffd2 	bl	800ad28 <Accelerate>
			Decelerate();
 800cd84:	f7fe f880 	bl	800ae88 <Decelerate>
			x++;
 800cd88:	4b3b      	ldr	r3, [pc, #236]	; (800ce78 <goal_area_search+0x9e0>)
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	b2da      	uxtb	r2, r3
 800cd90:	4b39      	ldr	r3, [pc, #228]	; (800ce78 <goal_area_search+0x9e0>)
 800cd92:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cd94:	2300      	movs	r3, #0
 800cd96:	663b      	str	r3, [r7, #96]	; 0x60
 800cd98:	e002      	b.n	800cda0 <goal_area_search+0x908>
 800cd9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	663b      	str	r3, [r7, #96]	; 0x60
 800cda0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800cda2:	f7fb faf7 	bl	8008394 <__aeabi_i2d>
 800cda6:	a330      	add	r3, pc, #192	; (adr r3, 800ce68 <goal_area_search+0x9d0>)
 800cda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdac:	f7fb fdce 	bl	800894c <__aeabi_dcmplt>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d1f1      	bne.n	800cd9a <goal_area_search+0x902>
			//左回転
			turn_left();
 800cdb6:	f7fe faf3 	bl	800b3a0 <turn_left>
			my_direction = north;
 800cdba:	4b2d      	ldr	r3, [pc, #180]	; (800ce70 <goal_area_search+0x9d8>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cdc4:	e002      	b.n	800cdcc <goal_area_search+0x934>
 800cdc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cdc8:	3301      	adds	r3, #1
 800cdca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cdcc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cdce:	f7fb fae1 	bl	8008394 <__aeabi_i2d>
 800cdd2:	a325      	add	r3, pc, #148	; (adr r3, 800ce68 <goal_area_search+0x9d0>)
 800cdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd8:	f7fb fdb8 	bl	800894c <__aeabi_dcmplt>
 800cddc:	4603      	mov	r3, r0
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d1f1      	bne.n	800cdc6 <goal_area_search+0x92e>
		}

		if(orbit == 'L'){
 800cde2:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cde6:	2b4c      	cmp	r3, #76	; 0x4c
 800cde8:	f040 825f 	bne.w	800d2aa <goal_area_search+0xe12>
			//左回り
			turn_left();
 800cdec:	f7fe fad8 	bl	800b3a0 <turn_left>
			my_direction = east;
 800cdf0:	4b1f      	ldr	r3, [pc, #124]	; (800ce70 <goal_area_search+0x9d8>)
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	65bb      	str	r3, [r7, #88]	; 0x58
 800cdfa:	e002      	b.n	800ce02 <goal_area_search+0x96a>
 800cdfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdfe:	3301      	adds	r3, #1
 800ce00:	65bb      	str	r3, [r7, #88]	; 0x58
 800ce02:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ce04:	f7fb fac6 	bl	8008394 <__aeabi_i2d>
 800ce08:	a317      	add	r3, pc, #92	; (adr r3, 800ce68 <goal_area_search+0x9d0>)
 800ce0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0e:	f7fb fd9d 	bl	800894c <__aeabi_dcmplt>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d1f1      	bne.n	800cdfc <goal_area_search+0x964>
			//直進
			Accelerate();
 800ce18:	f7fd ff86 	bl	800ad28 <Accelerate>
			Decelerate();
 800ce1c:	f7fe f834 	bl	800ae88 <Decelerate>
			x++;
 800ce20:	4b15      	ldr	r3, [pc, #84]	; (800ce78 <goal_area_search+0x9e0>)
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	3301      	adds	r3, #1
 800ce26:	b2da      	uxtb	r2, r3
 800ce28:	4b13      	ldr	r3, [pc, #76]	; (800ce78 <goal_area_search+0x9e0>)
 800ce2a:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800ce2c:	f7ff f9f0 	bl	800c210 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800ce30:	2300      	movs	r3, #0
 800ce32:	657b      	str	r3, [r7, #84]	; 0x54
 800ce34:	e002      	b.n	800ce3c <goal_area_search+0x9a4>
 800ce36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce38:	3301      	adds	r3, #1
 800ce3a:	657b      	str	r3, [r7, #84]	; 0x54
 800ce3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ce3e:	f7fb faa9 	bl	8008394 <__aeabi_i2d>
 800ce42:	a309      	add	r3, pc, #36	; (adr r3, 800ce68 <goal_area_search+0x9d0>)
 800ce44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce48:	f7fb fd80 	bl	800894c <__aeabi_dcmplt>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d1f1      	bne.n	800ce36 <goal_area_search+0x99e>

			turn_left();
 800ce52:	f7fe faa5 	bl	800b3a0 <turn_left>
			my_direction = north;
 800ce56:	4b06      	ldr	r3, [pc, #24]	; (800ce70 <goal_area_search+0x9d8>)
 800ce58:	2200      	movs	r2, #0
 800ce5a:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	653b      	str	r3, [r7, #80]	; 0x50
 800ce60:	e00f      	b.n	800ce82 <goal_area_search+0x9ea>
 800ce62:	bf00      	nop
 800ce64:	f3af 8000 	nop.w
 800ce68:	00000000 	.word	0x00000000
 800ce6c:	40cd4c00 	.word	0x40cd4c00
 800ce70:	2001848a 	.word	0x2001848a
 800ce74:	200142fd 	.word	0x200142fd
 800ce78:	200142fc 	.word	0x200142fc
 800ce7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce7e:	3301      	adds	r3, #1
 800ce80:	653b      	str	r3, [r7, #80]	; 0x50
 800ce82:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ce84:	f7fb fa86 	bl	8008394 <__aeabi_i2d>
 800ce88:	a3bb      	add	r3, pc, #748	; (adr r3, 800d178 <goal_area_search+0xce0>)
 800ce8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8e:	f7fb fd5d 	bl	800894c <__aeabi_dcmplt>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d1f1      	bne.n	800ce7c <goal_area_search+0x9e4>
			//直進
			Accelerate();
 800ce98:	f7fd ff46 	bl	800ad28 <Accelerate>
			Decelerate();
 800ce9c:	f7fd fff4 	bl	800ae88 <Decelerate>
			y++;
 800cea0:	4bb7      	ldr	r3, [pc, #732]	; (800d180 <goal_area_search+0xce8>)
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	3301      	adds	r3, #1
 800cea6:	b2da      	uxtb	r2, r3
 800cea8:	4bb5      	ldr	r3, [pc, #724]	; (800d180 <goal_area_search+0xce8>)
 800ceaa:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800ceac:	f7ff f9b0 	bl	800c210 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ceb4:	e002      	b.n	800cebc <goal_area_search+0xa24>
 800ceb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceb8:	3301      	adds	r3, #1
 800ceba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cebc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cebe:	f7fb fa69 	bl	8008394 <__aeabi_i2d>
 800cec2:	a3ad      	add	r3, pc, #692	; (adr r3, 800d178 <goal_area_search+0xce0>)
 800cec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec8:	f7fb fd40 	bl	800894c <__aeabi_dcmplt>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d1f1      	bne.n	800ceb6 <goal_area_search+0xa1e>

			//左回転
			turn_left();
 800ced2:	f7fe fa65 	bl	800b3a0 <turn_left>
			my_direction = west;
 800ced6:	4bab      	ldr	r3, [pc, #684]	; (800d184 <goal_area_search+0xcec>)
 800ced8:	2203      	movs	r2, #3
 800ceda:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cedc:	2300      	movs	r3, #0
 800cede:	64bb      	str	r3, [r7, #72]	; 0x48
 800cee0:	e002      	b.n	800cee8 <goal_area_search+0xa50>
 800cee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cee4:	3301      	adds	r3, #1
 800cee6:	64bb      	str	r3, [r7, #72]	; 0x48
 800cee8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ceea:	f7fb fa53 	bl	8008394 <__aeabi_i2d>
 800ceee:	a3a2      	add	r3, pc, #648	; (adr r3, 800d178 <goal_area_search+0xce0>)
 800cef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef4:	f7fb fd2a 	bl	800894c <__aeabi_dcmplt>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d1f1      	bne.n	800cee2 <goal_area_search+0xa4a>
			//直進
			Accelerate();
 800cefe:	f7fd ff13 	bl	800ad28 <Accelerate>
			Decelerate();
 800cf02:	f7fd ffc1 	bl	800ae88 <Decelerate>
			x--;
 800cf06:	4ba0      	ldr	r3, [pc, #640]	; (800d188 <goal_area_search+0xcf0>)
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	3b01      	subs	r3, #1
 800cf0c:	b2da      	uxtb	r2, r3
 800cf0e:	4b9e      	ldr	r3, [pc, #632]	; (800d188 <goal_area_search+0xcf0>)
 800cf10:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cf12:	2300      	movs	r3, #0
 800cf14:	647b      	str	r3, [r7, #68]	; 0x44
 800cf16:	e002      	b.n	800cf1e <goal_area_search+0xa86>
 800cf18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	647b      	str	r3, [r7, #68]	; 0x44
 800cf1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cf20:	f7fb fa38 	bl	8008394 <__aeabi_i2d>
 800cf24:	a394      	add	r3, pc, #592	; (adr r3, 800d178 <goal_area_search+0xce0>)
 800cf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2a:	f7fb fd0f 	bl	800894c <__aeabi_dcmplt>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d1f1      	bne.n	800cf18 <goal_area_search+0xa80>
			//右回転
			turn_right();
 800cf34:	f7fe f9ca 	bl	800b2cc <turn_right>
			my_direction = north;
 800cf38:	4b92      	ldr	r3, [pc, #584]	; (800d184 <goal_area_search+0xcec>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cf3e:	2300      	movs	r3, #0
 800cf40:	643b      	str	r3, [r7, #64]	; 0x40
 800cf42:	e002      	b.n	800cf4a <goal_area_search+0xab2>
 800cf44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf46:	3301      	adds	r3, #1
 800cf48:	643b      	str	r3, [r7, #64]	; 0x40
 800cf4a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cf4c:	f7fb fa22 	bl	8008394 <__aeabi_i2d>
 800cf50:	a389      	add	r3, pc, #548	; (adr r3, 800d178 <goal_area_search+0xce0>)
 800cf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf56:	f7fb fcf9 	bl	800894c <__aeabi_dcmplt>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d1f1      	bne.n	800cf44 <goal_area_search+0xaac>
		}
		break;
 800cf60:	e1a3      	b.n	800d2aa <goal_area_search+0xe12>
	case west:
		//直進
		Accelerate();
 800cf62:	f7fd fee1 	bl	800ad28 <Accelerate>
		Decelerate();
 800cf66:	f7fd ff8f 	bl	800ae88 <Decelerate>
		x--;
 800cf6a:	4b87      	ldr	r3, [pc, #540]	; (800d188 <goal_area_search+0xcf0>)
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	b2da      	uxtb	r2, r3
 800cf72:	4b85      	ldr	r3, [pc, #532]	; (800d188 <goal_area_search+0xcf0>)
 800cf74:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800cf76:	f7ff f94b 	bl	800c210 <wall_set>
		//�?つ
		for(int i=0;i < WAIT*0.5;i++);
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf7e:	e002      	b.n	800cf86 <goal_area_search+0xaee>
 800cf80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf82:	3301      	adds	r3, #1
 800cf84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cf88:	f7fb fa04 	bl	8008394 <__aeabi_i2d>
 800cf8c:	a37a      	add	r3, pc, #488	; (adr r3, 800d178 <goal_area_search+0xce0>)
 800cf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf92:	f7fb fcdb 	bl	800894c <__aeabi_dcmplt>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d1f1      	bne.n	800cf80 <goal_area_search+0xae8>

		//現在の座�? == ゴールの右2マス
		if(y == Y_GOAL_LESSER){
 800cf9c:	4b78      	ldr	r3, [pc, #480]	; (800d180 <goal_area_search+0xce8>)
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	2b07      	cmp	r3, #7
 800cfa2:	d103      	bne.n	800cfac <goal_area_search+0xb14>
			orbit = 'R';
 800cfa4:	2352      	movs	r3, #82	; 0x52
 800cfa6:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800cfaa:	e006      	b.n	800cfba <goal_area_search+0xb22>
		}
		//xが大きい方なら�?�左回り
		else if(y == Y_GOAL_LARGER){
 800cfac:	4b74      	ldr	r3, [pc, #464]	; (800d180 <goal_area_search+0xce8>)
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	2b07      	cmp	r3, #7
 800cfb2:	d102      	bne.n	800cfba <goal_area_search+0xb22>
			orbit = 'L';
 800cfb4:	234c      	movs	r3, #76	; 0x4c
 800cfb6:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800cfba:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cfbe:	2b52      	cmp	r3, #82	; 0x52
 800cfc0:	f040 80ad 	bne.w	800d11e <goal_area_search+0xc86>
			//右回り
			turn_right();
 800cfc4:	f7fe f982 	bl	800b2cc <turn_right>
			my_direction = north;
 800cfc8:	4b6e      	ldr	r3, [pc, #440]	; (800d184 <goal_area_search+0xcec>)
 800cfca:	2200      	movs	r2, #0
 800cfcc:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800cfce:	2300      	movs	r3, #0
 800cfd0:	63bb      	str	r3, [r7, #56]	; 0x38
 800cfd2:	e002      	b.n	800cfda <goal_area_search+0xb42>
 800cfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	63bb      	str	r3, [r7, #56]	; 0x38
 800cfda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cfdc:	f7fb f9da 	bl	8008394 <__aeabi_i2d>
 800cfe0:	a365      	add	r3, pc, #404	; (adr r3, 800d178 <goal_area_search+0xce0>)
 800cfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe6:	f7fb fcb1 	bl	800894c <__aeabi_dcmplt>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1f1      	bne.n	800cfd4 <goal_area_search+0xb3c>
			//直進
			Accelerate();
 800cff0:	f7fd fe9a 	bl	800ad28 <Accelerate>
			Decelerate();
 800cff4:	f7fd ff48 	bl	800ae88 <Decelerate>
			y++;
 800cff8:	4b61      	ldr	r3, [pc, #388]	; (800d180 <goal_area_search+0xce8>)
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	3301      	adds	r3, #1
 800cffe:	b2da      	uxtb	r2, r3
 800d000:	4b5f      	ldr	r3, [pc, #380]	; (800d180 <goal_area_search+0xce8>)
 800d002:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800d004:	f7ff f904 	bl	800c210 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d008:	2300      	movs	r3, #0
 800d00a:	637b      	str	r3, [r7, #52]	; 0x34
 800d00c:	e002      	b.n	800d014 <goal_area_search+0xb7c>
 800d00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d010:	3301      	adds	r3, #1
 800d012:	637b      	str	r3, [r7, #52]	; 0x34
 800d014:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d016:	f7fb f9bd 	bl	8008394 <__aeabi_i2d>
 800d01a:	a357      	add	r3, pc, #348	; (adr r3, 800d178 <goal_area_search+0xce0>)
 800d01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d020:	f7fb fc94 	bl	800894c <__aeabi_dcmplt>
 800d024:	4603      	mov	r3, r0
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1f1      	bne.n	800d00e <goal_area_search+0xb76>

			//右回り
			turn_right();
 800d02a:	f7fe f94f 	bl	800b2cc <turn_right>
			my_direction = east;
 800d02e:	4b55      	ldr	r3, [pc, #340]	; (800d184 <goal_area_search+0xcec>)
 800d030:	2201      	movs	r2, #1
 800d032:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d034:	2300      	movs	r3, #0
 800d036:	633b      	str	r3, [r7, #48]	; 0x30
 800d038:	e002      	b.n	800d040 <goal_area_search+0xba8>
 800d03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03c:	3301      	adds	r3, #1
 800d03e:	633b      	str	r3, [r7, #48]	; 0x30
 800d040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d042:	f7fb f9a7 	bl	8008394 <__aeabi_i2d>
 800d046:	a34c      	add	r3, pc, #304	; (adr r3, 800d178 <goal_area_search+0xce0>)
 800d048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04c:	f7fb fc7e 	bl	800894c <__aeabi_dcmplt>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d1f1      	bne.n	800d03a <goal_area_search+0xba2>
			//直進
			Accelerate();
 800d056:	f7fd fe67 	bl	800ad28 <Accelerate>
			Decelerate();
 800d05a:	f7fd ff15 	bl	800ae88 <Decelerate>
			x++;
 800d05e:	4b4a      	ldr	r3, [pc, #296]	; (800d188 <goal_area_search+0xcf0>)
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	3301      	adds	r3, #1
 800d064:	b2da      	uxtb	r2, r3
 800d066:	4b48      	ldr	r3, [pc, #288]	; (800d188 <goal_area_search+0xcf0>)
 800d068:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800d06a:	f7ff f8d1 	bl	800c210 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d06e:	2300      	movs	r3, #0
 800d070:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d072:	e002      	b.n	800d07a <goal_area_search+0xbe2>
 800d074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d076:	3301      	adds	r3, #1
 800d078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d07a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d07c:	f7fb f98a 	bl	8008394 <__aeabi_i2d>
 800d080:	a33d      	add	r3, pc, #244	; (adr r3, 800d178 <goal_area_search+0xce0>)
 800d082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d086:	f7fb fc61 	bl	800894c <__aeabi_dcmplt>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d1f1      	bne.n	800d074 <goal_area_search+0xbdc>

			//右回転
			turn_right();
 800d090:	f7fe f91c 	bl	800b2cc <turn_right>
			my_direction = south;
 800d094:	4b3b      	ldr	r3, [pc, #236]	; (800d184 <goal_area_search+0xcec>)
 800d096:	2202      	movs	r2, #2
 800d098:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d09a:	2300      	movs	r3, #0
 800d09c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d09e:	e002      	b.n	800d0a6 <goal_area_search+0xc0e>
 800d0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0a8:	f7fb f974 	bl	8008394 <__aeabi_i2d>
 800d0ac:	a332      	add	r3, pc, #200	; (adr r3, 800d178 <goal_area_search+0xce0>)
 800d0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b2:	f7fb fc4b 	bl	800894c <__aeabi_dcmplt>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d1f1      	bne.n	800d0a0 <goal_area_search+0xc08>
			//直進
			Accelerate();
 800d0bc:	f7fd fe34 	bl	800ad28 <Accelerate>
			Decelerate();
 800d0c0:	f7fd fee2 	bl	800ae88 <Decelerate>
			y--;
 800d0c4:	4b2e      	ldr	r3, [pc, #184]	; (800d180 <goal_area_search+0xce8>)
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	3b01      	subs	r3, #1
 800d0ca:	b2da      	uxtb	r2, r3
 800d0cc:	4b2c      	ldr	r3, [pc, #176]	; (800d180 <goal_area_search+0xce8>)
 800d0ce:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d0d4:	e002      	b.n	800d0dc <goal_area_search+0xc44>
 800d0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d8:	3301      	adds	r3, #1
 800d0da:	627b      	str	r3, [r7, #36]	; 0x24
 800d0dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d0de:	f7fb f959 	bl	8008394 <__aeabi_i2d>
 800d0e2:	a325      	add	r3, pc, #148	; (adr r3, 800d178 <goal_area_search+0xce0>)
 800d0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e8:	f7fb fc30 	bl	800894c <__aeabi_dcmplt>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1f1      	bne.n	800d0d6 <goal_area_search+0xc3e>
			//左回転
			turn_left();
 800d0f2:	f7fe f955 	bl	800b3a0 <turn_left>
			my_direction = east;
 800d0f6:	4b23      	ldr	r3, [pc, #140]	; (800d184 <goal_area_search+0xcec>)
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	623b      	str	r3, [r7, #32]
 800d100:	e002      	b.n	800d108 <goal_area_search+0xc70>
 800d102:	6a3b      	ldr	r3, [r7, #32]
 800d104:	3301      	adds	r3, #1
 800d106:	623b      	str	r3, [r7, #32]
 800d108:	6a38      	ldr	r0, [r7, #32]
 800d10a:	f7fb f943 	bl	8008394 <__aeabi_i2d>
 800d10e:	a31a      	add	r3, pc, #104	; (adr r3, 800d178 <goal_area_search+0xce0>)
 800d110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d114:	f7fb fc1a 	bl	800894c <__aeabi_dcmplt>
 800d118:	4603      	mov	r3, r0
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d1f1      	bne.n	800d102 <goal_area_search+0xc6a>
		}

		if(orbit == 'L'){
 800d11e:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800d122:	2b4c      	cmp	r3, #76	; 0x4c
 800d124:	f040 80c3 	bne.w	800d2ae <goal_area_search+0xe16>
			//左回り
			turn_left();
 800d128:	f7fe f93a 	bl	800b3a0 <turn_left>
			my_direction = south;
 800d12c:	4b15      	ldr	r3, [pc, #84]	; (800d184 <goal_area_search+0xcec>)
 800d12e:	2202      	movs	r2, #2
 800d130:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d132:	2300      	movs	r3, #0
 800d134:	61fb      	str	r3, [r7, #28]
 800d136:	e002      	b.n	800d13e <goal_area_search+0xca6>
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	3301      	adds	r3, #1
 800d13c:	61fb      	str	r3, [r7, #28]
 800d13e:	69f8      	ldr	r0, [r7, #28]
 800d140:	f7fb f928 	bl	8008394 <__aeabi_i2d>
 800d144:	a30c      	add	r3, pc, #48	; (adr r3, 800d178 <goal_area_search+0xce0>)
 800d146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14a:	f7fb fbff 	bl	800894c <__aeabi_dcmplt>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d1f1      	bne.n	800d138 <goal_area_search+0xca0>
			//直進
			Accelerate();
 800d154:	f7fd fde8 	bl	800ad28 <Accelerate>
			Decelerate();
 800d158:	f7fd fe96 	bl	800ae88 <Decelerate>
			y--;
 800d15c:	4b08      	ldr	r3, [pc, #32]	; (800d180 <goal_area_search+0xce8>)
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	3b01      	subs	r3, #1
 800d162:	b2da      	uxtb	r2, r3
 800d164:	4b06      	ldr	r3, [pc, #24]	; (800d180 <goal_area_search+0xce8>)
 800d166:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800d168:	f7ff f852 	bl	800c210 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d16c:	2300      	movs	r3, #0
 800d16e:	61bb      	str	r3, [r7, #24]
 800d170:	e00f      	b.n	800d192 <goal_area_search+0xcfa>
 800d172:	bf00      	nop
 800d174:	f3af 8000 	nop.w
 800d178:	00000000 	.word	0x00000000
 800d17c:	40cd4c00 	.word	0x40cd4c00
 800d180:	200142fd 	.word	0x200142fd
 800d184:	2001848a 	.word	0x2001848a
 800d188:	200142fc 	.word	0x200142fc
 800d18c:	69bb      	ldr	r3, [r7, #24]
 800d18e:	3301      	adds	r3, #1
 800d190:	61bb      	str	r3, [r7, #24]
 800d192:	69b8      	ldr	r0, [r7, #24]
 800d194:	f7fb f8fe 	bl	8008394 <__aeabi_i2d>
 800d198:	a349      	add	r3, pc, #292	; (adr r3, 800d2c0 <goal_area_search+0xe28>)
 800d19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19e:	f7fb fbd5 	bl	800894c <__aeabi_dcmplt>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d1f1      	bne.n	800d18c <goal_area_search+0xcf4>

			turn_left();
 800d1a8:	f7fe f8fa 	bl	800b3a0 <turn_left>
			my_direction = east;
 800d1ac:	4b46      	ldr	r3, [pc, #280]	; (800d2c8 <goal_area_search+0xe30>)
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	701a      	strb	r2, [r3, #0]
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	617b      	str	r3, [r7, #20]
 800d1b6:	e002      	b.n	800d1be <goal_area_search+0xd26>
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	617b      	str	r3, [r7, #20]
 800d1be:	6978      	ldr	r0, [r7, #20]
 800d1c0:	f7fb f8e8 	bl	8008394 <__aeabi_i2d>
 800d1c4:	a33e      	add	r3, pc, #248	; (adr r3, 800d2c0 <goal_area_search+0xe28>)
 800d1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ca:	f7fb fbbf 	bl	800894c <__aeabi_dcmplt>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d1f1      	bne.n	800d1b8 <goal_area_search+0xd20>
			//直進
			Accelerate();
 800d1d4:	f7fd fda8 	bl	800ad28 <Accelerate>
			Decelerate();
 800d1d8:	f7fd fe56 	bl	800ae88 <Decelerate>
			x++;
 800d1dc:	4b3b      	ldr	r3, [pc, #236]	; (800d2cc <goal_area_search+0xe34>)
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	b2da      	uxtb	r2, r3
 800d1e4:	4b39      	ldr	r3, [pc, #228]	; (800d2cc <goal_area_search+0xe34>)
 800d1e6:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800d1e8:	f7ff f812 	bl	800c210 <wall_set>
			//�?つ
			for(int i=0;i < WAIT*0.5;i++);
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	613b      	str	r3, [r7, #16]
 800d1f0:	e002      	b.n	800d1f8 <goal_area_search+0xd60>
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	613b      	str	r3, [r7, #16]
 800d1f8:	6938      	ldr	r0, [r7, #16]
 800d1fa:	f7fb f8cb 	bl	8008394 <__aeabi_i2d>
 800d1fe:	a330      	add	r3, pc, #192	; (adr r3, 800d2c0 <goal_area_search+0xe28>)
 800d200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d204:	f7fb fba2 	bl	800894c <__aeabi_dcmplt>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d1f1      	bne.n	800d1f2 <goal_area_search+0xd5a>

			//左回転
			turn_left();
 800d20e:	f7fe f8c7 	bl	800b3a0 <turn_left>
			my_direction = north;
 800d212:	4b2d      	ldr	r3, [pc, #180]	; (800d2c8 <goal_area_search+0xe30>)
 800d214:	2200      	movs	r2, #0
 800d216:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d218:	2300      	movs	r3, #0
 800d21a:	60fb      	str	r3, [r7, #12]
 800d21c:	e002      	b.n	800d224 <goal_area_search+0xd8c>
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3301      	adds	r3, #1
 800d222:	60fb      	str	r3, [r7, #12]
 800d224:	68f8      	ldr	r0, [r7, #12]
 800d226:	f7fb f8b5 	bl	8008394 <__aeabi_i2d>
 800d22a:	a325      	add	r3, pc, #148	; (adr r3, 800d2c0 <goal_area_search+0xe28>)
 800d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d230:	f7fb fb8c 	bl	800894c <__aeabi_dcmplt>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d1f1      	bne.n	800d21e <goal_area_search+0xd86>
			//直進
			Accelerate();
 800d23a:	f7fd fd75 	bl	800ad28 <Accelerate>
			Decelerate();
 800d23e:	f7fd fe23 	bl	800ae88 <Decelerate>
			y++;
 800d242:	4b23      	ldr	r3, [pc, #140]	; (800d2d0 <goal_area_search+0xe38>)
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	3301      	adds	r3, #1
 800d248:	b2da      	uxtb	r2, r3
 800d24a:	4b21      	ldr	r3, [pc, #132]	; (800d2d0 <goal_area_search+0xe38>)
 800d24c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d24e:	2300      	movs	r3, #0
 800d250:	60bb      	str	r3, [r7, #8]
 800d252:	e002      	b.n	800d25a <goal_area_search+0xdc2>
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	3301      	adds	r3, #1
 800d258:	60bb      	str	r3, [r7, #8]
 800d25a:	68b8      	ldr	r0, [r7, #8]
 800d25c:	f7fb f89a 	bl	8008394 <__aeabi_i2d>
 800d260:	a317      	add	r3, pc, #92	; (adr r3, 800d2c0 <goal_area_search+0xe28>)
 800d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d266:	f7fb fb71 	bl	800894c <__aeabi_dcmplt>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d1f1      	bne.n	800d254 <goal_area_search+0xdbc>
			//右回転
			turn_right();
 800d270:	f7fe f82c 	bl	800b2cc <turn_right>
			my_direction = east;
 800d274:	4b14      	ldr	r3, [pc, #80]	; (800d2c8 <goal_area_search+0xe30>)
 800d276:	2201      	movs	r2, #1
 800d278:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d27a:	2300      	movs	r3, #0
 800d27c:	607b      	str	r3, [r7, #4]
 800d27e:	e002      	b.n	800d286 <goal_area_search+0xdee>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	3301      	adds	r3, #1
 800d284:	607b      	str	r3, [r7, #4]
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7fb f884 	bl	8008394 <__aeabi_i2d>
 800d28c:	a30c      	add	r3, pc, #48	; (adr r3, 800d2c0 <goal_area_search+0xe28>)
 800d28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d292:	f7fb fb5b 	bl	800894c <__aeabi_dcmplt>
 800d296:	4603      	mov	r3, r0
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d1f1      	bne.n	800d280 <goal_area_search+0xde8>
		}
		break;
 800d29c:	e007      	b.n	800d2ae <goal_area_search+0xe16>
	default :
		break;
 800d29e:	bf00      	nop
 800d2a0:	e006      	b.n	800d2b0 <goal_area_search+0xe18>
		break;
 800d2a2:	bf00      	nop
 800d2a4:	e004      	b.n	800d2b0 <goal_area_search+0xe18>
		break;
 800d2a6:	bf00      	nop
 800d2a8:	e002      	b.n	800d2b0 <goal_area_search+0xe18>
		break;
 800d2aa:	bf00      	nop
 800d2ac:	e000      	b.n	800d2b0 <goal_area_search+0xe18>
		break;
 800d2ae:	bf00      	nop
	}

	//マップ更新
	Walk_Map_Update();
 800d2b0:	f7fe fe10 	bl	800bed4 <Walk_Map_Update>



	//向きが反転して、xもしく�?�yが変わ�?

}
 800d2b4:	bf00      	nop
 800d2b6:	37f8      	adds	r7, #248	; 0xf8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	f3af 8000 	nop.w
 800d2c0:	00000000 	.word	0x00000000
 800d2c4:	40cd4c00 	.word	0x40cd4c00
 800d2c8:	2001848a 	.word	0x2001848a
 800d2cc:	200142fc 	.word	0x200142fc
 800d2d0:	200142fd 	.word	0x200142fd
 800d2d4:	00000000 	.word	0x00000000

0800d2d8 <Adachi_judge>:

//足立法探索
void Adachi_judge(){
 800d2d8:	b598      	push	{r3, r4, r7, lr}
 800d2da:	af00      	add	r7, sp, #0

	/*------旋回モード選�?-----*/
	mode.turn = 0;
 800d2dc:	4b9a      	ldr	r3, [pc, #616]	; (800d548 <Adachi_judge+0x270>)
 800d2de:	2200      	movs	r2, #0
 800d2e0:	725a      	strb	r2, [r3, #9]
	/*----------------------------*/


	//今�??��評価値よりも前の評価値が小さければ...
	//前左右
	  switch(my_direction){
 800d2e2:	4b9a      	ldr	r3, [pc, #616]	; (800d54c <Adachi_judge+0x274>)
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	2b03      	cmp	r3, #3
 800d2e8:	f200 83ac 	bhi.w	800da44 <Adachi_judge+0x76c>
 800d2ec:	a201      	add	r2, pc, #4	; (adr r2, 800d2f4 <Adachi_judge+0x1c>)
 800d2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f2:	bf00      	nop
 800d2f4:	0800d305 	.word	0x0800d305
 800d2f8:	0800d4c5 	.word	0x0800d4c5
 800d2fc:	0800d6a5 	.word	0x0800d6a5
 800d300:	0800d885 	.word	0x0800d885
	  case north:
		  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d304:	4b92      	ldr	r3, [pc, #584]	; (800d550 <Adachi_judge+0x278>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	4619      	mov	r1, r3
 800d30a:	4b92      	ldr	r3, [pc, #584]	; (800d554 <Adachi_judge+0x27c>)
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	4618      	mov	r0, r3
 800d310:	4a91      	ldr	r2, [pc, #580]	; (800d558 <Adachi_judge+0x280>)
 800d312:	460b      	mov	r3, r1
 800d314:	00db      	lsls	r3, r3, #3
 800d316:	440b      	add	r3, r1
 800d318:	4403      	add	r3, r0
 800d31a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d31e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d322:	b2db      	uxtb	r3, r3
 800d324:	2b00      	cmp	r3, #0
 800d326:	d12b      	bne.n	800d380 <Adachi_judge+0xa8>
 800d328:	4b89      	ldr	r3, [pc, #548]	; (800d550 <Adachi_judge+0x278>)
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	4618      	mov	r0, r3
 800d32e:	4b89      	ldr	r3, [pc, #548]	; (800d554 <Adachi_judge+0x27c>)
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	1c5a      	adds	r2, r3, #1
 800d334:	4989      	ldr	r1, [pc, #548]	; (800d55c <Adachi_judge+0x284>)
 800d336:	4603      	mov	r3, r0
 800d338:	00db      	lsls	r3, r3, #3
 800d33a:	4403      	add	r3, r0
 800d33c:	440b      	add	r3, r1
 800d33e:	4413      	add	r3, r2
 800d340:	781a      	ldrb	r2, [r3, #0]
 800d342:	4b83      	ldr	r3, [pc, #524]	; (800d550 <Adachi_judge+0x278>)
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	4618      	mov	r0, r3
 800d348:	4b82      	ldr	r3, [pc, #520]	; (800d554 <Adachi_judge+0x27c>)
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	461c      	mov	r4, r3
 800d34e:	4983      	ldr	r1, [pc, #524]	; (800d55c <Adachi_judge+0x284>)
 800d350:	4603      	mov	r3, r0
 800d352:	00db      	lsls	r3, r3, #3
 800d354:	4403      	add	r3, r0
 800d356:	440b      	add	r3, r1
 800d358:	4423      	add	r3, r4
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d20f      	bcs.n	800d380 <Adachi_judge+0xa8>
 800d360:	4b7c      	ldr	r3, [pc, #496]	; (800d554 <Adachi_judge+0x27c>)
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	2b07      	cmp	r3, #7
 800d366:	d80b      	bhi.n	800d380 <Adachi_judge+0xa8>
			  //前北
			  straight();
 800d368:	f7fd fe46 	bl	800aff8 <straight>
			  my_direction = north;
 800d36c:	4b77      	ldr	r3, [pc, #476]	; (800d54c <Adachi_judge+0x274>)
 800d36e:	2200      	movs	r2, #0
 800d370:	701a      	strb	r2, [r3, #0]
			  y++;
 800d372:	4b78      	ldr	r3, [pc, #480]	; (800d554 <Adachi_judge+0x27c>)
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	3301      	adds	r3, #1
 800d378:	b2da      	uxtb	r2, r3
 800d37a:	4b76      	ldr	r3, [pc, #472]	; (800d554 <Adachi_judge+0x27c>)
 800d37c:	701a      	strb	r2, [r3, #0]
 800d37e:	e0a0      	b.n	800d4c2 <Adachi_judge+0x1ea>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d380:	4b73      	ldr	r3, [pc, #460]	; (800d550 <Adachi_judge+0x278>)
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	4619      	mov	r1, r3
 800d386:	4b73      	ldr	r3, [pc, #460]	; (800d554 <Adachi_judge+0x27c>)
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	4618      	mov	r0, r3
 800d38c:	4a72      	ldr	r2, [pc, #456]	; (800d558 <Adachi_judge+0x280>)
 800d38e:	460b      	mov	r3, r1
 800d390:	00db      	lsls	r3, r3, #3
 800d392:	440b      	add	r3, r1
 800d394:	4403      	add	r3, r0
 800d396:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d39a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d12b      	bne.n	800d3fc <Adachi_judge+0x124>
 800d3a4:	4b6a      	ldr	r3, [pc, #424]	; (800d550 <Adachi_judge+0x278>)
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	1e5a      	subs	r2, r3, #1
 800d3aa:	4b6a      	ldr	r3, [pc, #424]	; (800d554 <Adachi_judge+0x27c>)
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	496a      	ldr	r1, [pc, #424]	; (800d55c <Adachi_judge+0x284>)
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	00db      	lsls	r3, r3, #3
 800d3b6:	4413      	add	r3, r2
 800d3b8:	440b      	add	r3, r1
 800d3ba:	4403      	add	r3, r0
 800d3bc:	781a      	ldrb	r2, [r3, #0]
 800d3be:	4b64      	ldr	r3, [pc, #400]	; (800d550 <Adachi_judge+0x278>)
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	4b63      	ldr	r3, [pc, #396]	; (800d554 <Adachi_judge+0x27c>)
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	461c      	mov	r4, r3
 800d3ca:	4964      	ldr	r1, [pc, #400]	; (800d55c <Adachi_judge+0x284>)
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	00db      	lsls	r3, r3, #3
 800d3d0:	4403      	add	r3, r0
 800d3d2:	440b      	add	r3, r1
 800d3d4:	4423      	add	r3, r4
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d20f      	bcs.n	800d3fc <Adachi_judge+0x124>
 800d3dc:	4b5c      	ldr	r3, [pc, #368]	; (800d550 <Adachi_judge+0x278>)
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00b      	beq.n	800d3fc <Adachi_judge+0x124>
			  //左西
			  L_turn_select();
 800d3e4:	f7fe fc64 	bl	800bcb0 <L_turn_select>
			  my_direction = west;
 800d3e8:	4b58      	ldr	r3, [pc, #352]	; (800d54c <Adachi_judge+0x274>)
 800d3ea:	2203      	movs	r2, #3
 800d3ec:	701a      	strb	r2, [r3, #0]
		      x--;
 800d3ee:	4b58      	ldr	r3, [pc, #352]	; (800d550 <Adachi_judge+0x278>)
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	3b01      	subs	r3, #1
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	4b56      	ldr	r3, [pc, #344]	; (800d550 <Adachi_judge+0x278>)
 800d3f8:	701a      	strb	r2, [r3, #0]
 800d3fa:	e062      	b.n	800d4c2 <Adachi_judge+0x1ea>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800d3fc:	4b54      	ldr	r3, [pc, #336]	; (800d550 <Adachi_judge+0x278>)
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	4619      	mov	r1, r3
 800d402:	4b54      	ldr	r3, [pc, #336]	; (800d554 <Adachi_judge+0x27c>)
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	4618      	mov	r0, r3
 800d408:	4a53      	ldr	r2, [pc, #332]	; (800d558 <Adachi_judge+0x280>)
 800d40a:	460b      	mov	r3, r1
 800d40c:	00db      	lsls	r3, r3, #3
 800d40e:	440b      	add	r3, r1
 800d410:	4403      	add	r3, r0
 800d412:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d416:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d12b      	bne.n	800d478 <Adachi_judge+0x1a0>
 800d420:	4b4b      	ldr	r3, [pc, #300]	; (800d550 <Adachi_judge+0x278>)
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	1c5a      	adds	r2, r3, #1
 800d426:	4b4b      	ldr	r3, [pc, #300]	; (800d554 <Adachi_judge+0x27c>)
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	4618      	mov	r0, r3
 800d42c:	494b      	ldr	r1, [pc, #300]	; (800d55c <Adachi_judge+0x284>)
 800d42e:	4613      	mov	r3, r2
 800d430:	00db      	lsls	r3, r3, #3
 800d432:	4413      	add	r3, r2
 800d434:	440b      	add	r3, r1
 800d436:	4403      	add	r3, r0
 800d438:	781a      	ldrb	r2, [r3, #0]
 800d43a:	4b45      	ldr	r3, [pc, #276]	; (800d550 <Adachi_judge+0x278>)
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	4618      	mov	r0, r3
 800d440:	4b44      	ldr	r3, [pc, #272]	; (800d554 <Adachi_judge+0x27c>)
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	461c      	mov	r4, r3
 800d446:	4945      	ldr	r1, [pc, #276]	; (800d55c <Adachi_judge+0x284>)
 800d448:	4603      	mov	r3, r0
 800d44a:	00db      	lsls	r3, r3, #3
 800d44c:	4403      	add	r3, r0
 800d44e:	440b      	add	r3, r1
 800d450:	4423      	add	r3, r4
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	429a      	cmp	r2, r3
 800d456:	d20f      	bcs.n	800d478 <Adachi_judge+0x1a0>
 800d458:	4b3d      	ldr	r3, [pc, #244]	; (800d550 <Adachi_judge+0x278>)
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	2b07      	cmp	r3, #7
 800d45e:	d80b      	bhi.n	800d478 <Adachi_judge+0x1a0>
			  //右東
			  R_turn_select();
 800d460:	f7fe fbe2 	bl	800bc28 <R_turn_select>
	          my_direction = east;
 800d464:	4b39      	ldr	r3, [pc, #228]	; (800d54c <Adachi_judge+0x274>)
 800d466:	2201      	movs	r2, #1
 800d468:	701a      	strb	r2, [r3, #0]
	          x++;
 800d46a:	4b39      	ldr	r3, [pc, #228]	; (800d550 <Adachi_judge+0x278>)
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	3301      	adds	r3, #1
 800d470:	b2da      	uxtb	r2, r3
 800d472:	4b37      	ldr	r3, [pc, #220]	; (800d550 <Adachi_judge+0x278>)
 800d474:	701a      	strb	r2, [r3, #0]
 800d476:	e024      	b.n	800d4c2 <Adachi_judge+0x1ea>
		  }
		  else {
			  //後南
	          Decelerate();
 800d478:	f7fd fd06 	bl	800ae88 <Decelerate>
	          wait(0.3);
 800d47c:	ed9f 0b30 	vldr	d0, [pc, #192]	; 800d540 <Adachi_judge+0x268>
 800d480:	f7fd fbd2 	bl	800ac28 <wait>

	          if(mode.execution == 1)
 800d484:	4b30      	ldr	r3, [pc, #192]	; (800d548 <Adachi_judge+0x270>)
 800d486:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d101      	bne.n	800d492 <Adachi_judge+0x1ba>
	        	  Motor_PWM_Stop();
 800d48e:	f7fc fe63 	bl	800a158 <Motor_PWM_Stop>

	  	      rotate180();
 800d492:	f7fe fae7 	bl	800ba64 <rotate180>
	  	      wait(0.3);;
 800d496:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 800d540 <Adachi_judge+0x268>
 800d49a:	f7fd fbc5 	bl	800ac28 <wait>
	  	      back_calib();
 800d49e:	f7fe fb5b 	bl	800bb58 <back_calib>
	  	      wait(0.3);
 800d4a2:	ed9f 0b27 	vldr	d0, [pc, #156]	; 800d540 <Adachi_judge+0x268>
 800d4a6:	f7fd fbbf 	bl	800ac28 <wait>
	       	  Start_Accel();
 800d4aa:	f7fd fbe5 	bl	800ac78 <Start_Accel>
	       	  my_direction = south;
 800d4ae:	4b27      	ldr	r3, [pc, #156]	; (800d54c <Adachi_judge+0x274>)
 800d4b0:	2202      	movs	r2, #2
 800d4b2:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d4b4:	4b27      	ldr	r3, [pc, #156]	; (800d554 <Adachi_judge+0x27c>)
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	b2da      	uxtb	r2, r3
 800d4bc:	4b25      	ldr	r3, [pc, #148]	; (800d554 <Adachi_judge+0x27c>)
 800d4be:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d4c0:	e2c1      	b.n	800da46 <Adachi_judge+0x76e>
 800d4c2:	e2c0      	b.n	800da46 <Adachi_judge+0x76e>

	  case east:

		  if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800d4c4:	4b22      	ldr	r3, [pc, #136]	; (800d550 <Adachi_judge+0x278>)
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	4b22      	ldr	r3, [pc, #136]	; (800d554 <Adachi_judge+0x27c>)
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	4a21      	ldr	r2, [pc, #132]	; (800d558 <Adachi_judge+0x280>)
 800d4d2:	460b      	mov	r3, r1
 800d4d4:	00db      	lsls	r3, r3, #3
 800d4d6:	440b      	add	r3, r1
 800d4d8:	4403      	add	r3, r0
 800d4da:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d4de:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d13b      	bne.n	800d560 <Adachi_judge+0x288>
 800d4e8:	4b19      	ldr	r3, [pc, #100]	; (800d550 <Adachi_judge+0x278>)
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	1c5a      	adds	r2, r3, #1
 800d4ee:	4b19      	ldr	r3, [pc, #100]	; (800d554 <Adachi_judge+0x27c>)
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	4919      	ldr	r1, [pc, #100]	; (800d55c <Adachi_judge+0x284>)
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	00db      	lsls	r3, r3, #3
 800d4fa:	4413      	add	r3, r2
 800d4fc:	440b      	add	r3, r1
 800d4fe:	4403      	add	r3, r0
 800d500:	781a      	ldrb	r2, [r3, #0]
 800d502:	4b13      	ldr	r3, [pc, #76]	; (800d550 <Adachi_judge+0x278>)
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	4618      	mov	r0, r3
 800d508:	4b12      	ldr	r3, [pc, #72]	; (800d554 <Adachi_judge+0x27c>)
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	461c      	mov	r4, r3
 800d50e:	4913      	ldr	r1, [pc, #76]	; (800d55c <Adachi_judge+0x284>)
 800d510:	4603      	mov	r3, r0
 800d512:	00db      	lsls	r3, r3, #3
 800d514:	4403      	add	r3, r0
 800d516:	440b      	add	r3, r1
 800d518:	4423      	add	r3, r4
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d21f      	bcs.n	800d560 <Adachi_judge+0x288>
 800d520:	4b0b      	ldr	r3, [pc, #44]	; (800d550 <Adachi_judge+0x278>)
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	2b07      	cmp	r3, #7
 800d526:	d81b      	bhi.n	800d560 <Adachi_judge+0x288>
			  //前東
			  straight();
 800d528:	f7fd fd66 	bl	800aff8 <straight>
	       	  my_direction = east;
 800d52c:	4b07      	ldr	r3, [pc, #28]	; (800d54c <Adachi_judge+0x274>)
 800d52e:	2201      	movs	r2, #1
 800d530:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d532:	4b07      	ldr	r3, [pc, #28]	; (800d550 <Adachi_judge+0x278>)
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	3301      	adds	r3, #1
 800d538:	b2da      	uxtb	r2, r3
 800d53a:	4b05      	ldr	r3, [pc, #20]	; (800d550 <Adachi_judge+0x278>)
 800d53c:	701a      	strb	r2, [r3, #0]
 800d53e:	e0b0      	b.n	800d6a2 <Adachi_judge+0x3ca>
 800d540:	33333333 	.word	0x33333333
 800d544:	3fd33333 	.word	0x3fd33333
 800d548:	20000068 	.word	0x20000068
 800d54c:	2001848a 	.word	0x2001848a
 800d550:	200142fc 	.word	0x200142fc
 800d554:	200142fd 	.word	0x200142fd
 800d558:	20018efc 	.word	0x20018efc
 800d55c:	20018a54 	.word	0x20018a54
		  }
		  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d560:	4baf      	ldr	r3, [pc, #700]	; (800d820 <Adachi_judge+0x548>)
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	4619      	mov	r1, r3
 800d566:	4baf      	ldr	r3, [pc, #700]	; (800d824 <Adachi_judge+0x54c>)
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	4618      	mov	r0, r3
 800d56c:	4aae      	ldr	r2, [pc, #696]	; (800d828 <Adachi_judge+0x550>)
 800d56e:	460b      	mov	r3, r1
 800d570:	00db      	lsls	r3, r3, #3
 800d572:	440b      	add	r3, r1
 800d574:	4403      	add	r3, r0
 800d576:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d57a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	2b00      	cmp	r3, #0
 800d582:	d12b      	bne.n	800d5dc <Adachi_judge+0x304>
 800d584:	4ba6      	ldr	r3, [pc, #664]	; (800d820 <Adachi_judge+0x548>)
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	4618      	mov	r0, r3
 800d58a:	4ba6      	ldr	r3, [pc, #664]	; (800d824 <Adachi_judge+0x54c>)
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	1c5a      	adds	r2, r3, #1
 800d590:	49a6      	ldr	r1, [pc, #664]	; (800d82c <Adachi_judge+0x554>)
 800d592:	4603      	mov	r3, r0
 800d594:	00db      	lsls	r3, r3, #3
 800d596:	4403      	add	r3, r0
 800d598:	440b      	add	r3, r1
 800d59a:	4413      	add	r3, r2
 800d59c:	781a      	ldrb	r2, [r3, #0]
 800d59e:	4ba0      	ldr	r3, [pc, #640]	; (800d820 <Adachi_judge+0x548>)
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	4b9f      	ldr	r3, [pc, #636]	; (800d824 <Adachi_judge+0x54c>)
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	461c      	mov	r4, r3
 800d5aa:	49a0      	ldr	r1, [pc, #640]	; (800d82c <Adachi_judge+0x554>)
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	00db      	lsls	r3, r3, #3
 800d5b0:	4403      	add	r3, r0
 800d5b2:	440b      	add	r3, r1
 800d5b4:	4423      	add	r3, r4
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d20f      	bcs.n	800d5dc <Adachi_judge+0x304>
 800d5bc:	4b99      	ldr	r3, [pc, #612]	; (800d824 <Adachi_judge+0x54c>)
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	2b07      	cmp	r3, #7
 800d5c2:	d80b      	bhi.n	800d5dc <Adachi_judge+0x304>
			  //左?��?
			  L_turn_select();
 800d5c4:	f7fe fb74 	bl	800bcb0 <L_turn_select>
	       	  my_direction = north;
 800d5c8:	4b99      	ldr	r3, [pc, #612]	; (800d830 <Adachi_judge+0x558>)
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d5ce:	4b95      	ldr	r3, [pc, #596]	; (800d824 <Adachi_judge+0x54c>)
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	b2da      	uxtb	r2, r3
 800d5d6:	4b93      	ldr	r3, [pc, #588]	; (800d824 <Adachi_judge+0x54c>)
 800d5d8:	701a      	strb	r2, [r3, #0]
 800d5da:	e062      	b.n	800d6a2 <Adachi_judge+0x3ca>
		  }
		  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d5dc:	4b90      	ldr	r3, [pc, #576]	; (800d820 <Adachi_judge+0x548>)
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	4b90      	ldr	r3, [pc, #576]	; (800d824 <Adachi_judge+0x54c>)
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	4a8f      	ldr	r2, [pc, #572]	; (800d828 <Adachi_judge+0x550>)
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	00db      	lsls	r3, r3, #3
 800d5ee:	440b      	add	r3, r1
 800d5f0:	4403      	add	r3, r0
 800d5f2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d5f6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d5fa:	b2db      	uxtb	r3, r3
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d12b      	bne.n	800d658 <Adachi_judge+0x380>
 800d600:	4b87      	ldr	r3, [pc, #540]	; (800d820 <Adachi_judge+0x548>)
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	4618      	mov	r0, r3
 800d606:	4b87      	ldr	r3, [pc, #540]	; (800d824 <Adachi_judge+0x54c>)
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	1e5a      	subs	r2, r3, #1
 800d60c:	4987      	ldr	r1, [pc, #540]	; (800d82c <Adachi_judge+0x554>)
 800d60e:	4603      	mov	r3, r0
 800d610:	00db      	lsls	r3, r3, #3
 800d612:	4403      	add	r3, r0
 800d614:	440b      	add	r3, r1
 800d616:	4413      	add	r3, r2
 800d618:	781a      	ldrb	r2, [r3, #0]
 800d61a:	4b81      	ldr	r3, [pc, #516]	; (800d820 <Adachi_judge+0x548>)
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	4618      	mov	r0, r3
 800d620:	4b80      	ldr	r3, [pc, #512]	; (800d824 <Adachi_judge+0x54c>)
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	461c      	mov	r4, r3
 800d626:	4981      	ldr	r1, [pc, #516]	; (800d82c <Adachi_judge+0x554>)
 800d628:	4603      	mov	r3, r0
 800d62a:	00db      	lsls	r3, r3, #3
 800d62c:	4403      	add	r3, r0
 800d62e:	440b      	add	r3, r1
 800d630:	4423      	add	r3, r4
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	429a      	cmp	r2, r3
 800d636:	d20f      	bcs.n	800d658 <Adachi_judge+0x380>
 800d638:	4b7a      	ldr	r3, [pc, #488]	; (800d824 <Adachi_judge+0x54c>)
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d00b      	beq.n	800d658 <Adachi_judge+0x380>
			  //右?��?
			  R_turn_select();
 800d640:	f7fe faf2 	bl	800bc28 <R_turn_select>
	       	  my_direction = south;
 800d644:	4b7a      	ldr	r3, [pc, #488]	; (800d830 <Adachi_judge+0x558>)
 800d646:	2202      	movs	r2, #2
 800d648:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d64a:	4b76      	ldr	r3, [pc, #472]	; (800d824 <Adachi_judge+0x54c>)
 800d64c:	781b      	ldrb	r3, [r3, #0]
 800d64e:	3b01      	subs	r3, #1
 800d650:	b2da      	uxtb	r2, r3
 800d652:	4b74      	ldr	r3, [pc, #464]	; (800d824 <Adachi_judge+0x54c>)
 800d654:	701a      	strb	r2, [r3, #0]
 800d656:	e024      	b.n	800d6a2 <Adachi_judge+0x3ca>
		  }
		  else {
			  //後西
	          Decelerate();
 800d658:	f7fd fc16 	bl	800ae88 <Decelerate>
	          wait(0.3);
 800d65c:	ed9f 0b6e 	vldr	d0, [pc, #440]	; 800d818 <Adachi_judge+0x540>
 800d660:	f7fd fae2 	bl	800ac28 <wait>

	          if(mode.execution == 1)
 800d664:	4b73      	ldr	r3, [pc, #460]	; (800d834 <Adachi_judge+0x55c>)
 800d666:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d101      	bne.n	800d672 <Adachi_judge+0x39a>
	        	  Motor_PWM_Stop();
 800d66e:	f7fc fd73 	bl	800a158 <Motor_PWM_Stop>

	  	      rotate180();
 800d672:	f7fe f9f7 	bl	800ba64 <rotate180>
	  	      wait(0.3);
 800d676:	ed9f 0b68 	vldr	d0, [pc, #416]	; 800d818 <Adachi_judge+0x540>
 800d67a:	f7fd fad5 	bl	800ac28 <wait>
	  	      back_calib();
 800d67e:	f7fe fa6b 	bl	800bb58 <back_calib>
	  	      wait(0.3);
 800d682:	ed9f 0b65 	vldr	d0, [pc, #404]	; 800d818 <Adachi_judge+0x540>
 800d686:	f7fd facf 	bl	800ac28 <wait>
	       	  Start_Accel();
 800d68a:	f7fd faf5 	bl	800ac78 <Start_Accel>

	       	  my_direction = west;
 800d68e:	4b68      	ldr	r3, [pc, #416]	; (800d830 <Adachi_judge+0x558>)
 800d690:	2203      	movs	r2, #3
 800d692:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d694:	4b62      	ldr	r3, [pc, #392]	; (800d820 <Adachi_judge+0x548>)
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	3b01      	subs	r3, #1
 800d69a:	b2da      	uxtb	r2, r3
 800d69c:	4b60      	ldr	r3, [pc, #384]	; (800d820 <Adachi_judge+0x548>)
 800d69e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d6a0:	e1d1      	b.n	800da46 <Adachi_judge+0x76e>
 800d6a2:	e1d0      	b.n	800da46 <Adachi_judge+0x76e>

	  case south:

		  if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d6a4:	4b5e      	ldr	r3, [pc, #376]	; (800d820 <Adachi_judge+0x548>)
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	4b5e      	ldr	r3, [pc, #376]	; (800d824 <Adachi_judge+0x54c>)
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	4a5d      	ldr	r2, [pc, #372]	; (800d828 <Adachi_judge+0x550>)
 800d6b2:	460b      	mov	r3, r1
 800d6b4:	00db      	lsls	r3, r3, #3
 800d6b6:	440b      	add	r3, r1
 800d6b8:	4403      	add	r3, r0
 800d6ba:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d6be:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d12b      	bne.n	800d720 <Adachi_judge+0x448>
 800d6c8:	4b55      	ldr	r3, [pc, #340]	; (800d820 <Adachi_judge+0x548>)
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	4b55      	ldr	r3, [pc, #340]	; (800d824 <Adachi_judge+0x54c>)
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	1e5a      	subs	r2, r3, #1
 800d6d4:	4955      	ldr	r1, [pc, #340]	; (800d82c <Adachi_judge+0x554>)
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	00db      	lsls	r3, r3, #3
 800d6da:	4403      	add	r3, r0
 800d6dc:	440b      	add	r3, r1
 800d6de:	4413      	add	r3, r2
 800d6e0:	781a      	ldrb	r2, [r3, #0]
 800d6e2:	4b4f      	ldr	r3, [pc, #316]	; (800d820 <Adachi_judge+0x548>)
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	4b4e      	ldr	r3, [pc, #312]	; (800d824 <Adachi_judge+0x54c>)
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	461c      	mov	r4, r3
 800d6ee:	494f      	ldr	r1, [pc, #316]	; (800d82c <Adachi_judge+0x554>)
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	00db      	lsls	r3, r3, #3
 800d6f4:	4403      	add	r3, r0
 800d6f6:	440b      	add	r3, r1
 800d6f8:	4423      	add	r3, r4
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d20f      	bcs.n	800d720 <Adachi_judge+0x448>
 800d700:	4b48      	ldr	r3, [pc, #288]	; (800d824 <Adachi_judge+0x54c>)
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d00b      	beq.n	800d720 <Adachi_judge+0x448>
			  //前南
			  straight();
 800d708:	f7fd fc76 	bl	800aff8 <straight>
	       	  my_direction = south;
 800d70c:	4b48      	ldr	r3, [pc, #288]	; (800d830 <Adachi_judge+0x558>)
 800d70e:	2202      	movs	r2, #2
 800d710:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d712:	4b44      	ldr	r3, [pc, #272]	; (800d824 <Adachi_judge+0x54c>)
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	3b01      	subs	r3, #1
 800d718:	b2da      	uxtb	r2, r3
 800d71a:	4b42      	ldr	r3, [pc, #264]	; (800d824 <Adachi_judge+0x54c>)
 800d71c:	701a      	strb	r2, [r3, #0]
 800d71e:	e0b0      	b.n	800d882 <Adachi_judge+0x5aa>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800d720:	4b3f      	ldr	r3, [pc, #252]	; (800d820 <Adachi_judge+0x548>)
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	4619      	mov	r1, r3
 800d726:	4b3f      	ldr	r3, [pc, #252]	; (800d824 <Adachi_judge+0x54c>)
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	4618      	mov	r0, r3
 800d72c:	4a3e      	ldr	r2, [pc, #248]	; (800d828 <Adachi_judge+0x550>)
 800d72e:	460b      	mov	r3, r1
 800d730:	00db      	lsls	r3, r3, #3
 800d732:	440b      	add	r3, r1
 800d734:	4403      	add	r3, r0
 800d736:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d73a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	2b00      	cmp	r3, #0
 800d742:	d12b      	bne.n	800d79c <Adachi_judge+0x4c4>
 800d744:	4b36      	ldr	r3, [pc, #216]	; (800d820 <Adachi_judge+0x548>)
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	1c5a      	adds	r2, r3, #1
 800d74a:	4b36      	ldr	r3, [pc, #216]	; (800d824 <Adachi_judge+0x54c>)
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	4618      	mov	r0, r3
 800d750:	4936      	ldr	r1, [pc, #216]	; (800d82c <Adachi_judge+0x554>)
 800d752:	4613      	mov	r3, r2
 800d754:	00db      	lsls	r3, r3, #3
 800d756:	4413      	add	r3, r2
 800d758:	440b      	add	r3, r1
 800d75a:	4403      	add	r3, r0
 800d75c:	781a      	ldrb	r2, [r3, #0]
 800d75e:	4b30      	ldr	r3, [pc, #192]	; (800d820 <Adachi_judge+0x548>)
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	4618      	mov	r0, r3
 800d764:	4b2f      	ldr	r3, [pc, #188]	; (800d824 <Adachi_judge+0x54c>)
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	461c      	mov	r4, r3
 800d76a:	4930      	ldr	r1, [pc, #192]	; (800d82c <Adachi_judge+0x554>)
 800d76c:	4603      	mov	r3, r0
 800d76e:	00db      	lsls	r3, r3, #3
 800d770:	4403      	add	r3, r0
 800d772:	440b      	add	r3, r1
 800d774:	4423      	add	r3, r4
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d20f      	bcs.n	800d79c <Adachi_judge+0x4c4>
 800d77c:	4b28      	ldr	r3, [pc, #160]	; (800d820 <Adachi_judge+0x548>)
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	2b07      	cmp	r3, #7
 800d782:	d80b      	bhi.n	800d79c <Adachi_judge+0x4c4>
			  //左東
			  L_turn_select();
 800d784:	f7fe fa94 	bl	800bcb0 <L_turn_select>
	       	  my_direction = east;
 800d788:	4b29      	ldr	r3, [pc, #164]	; (800d830 <Adachi_judge+0x558>)
 800d78a:	2201      	movs	r2, #1
 800d78c:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d78e:	4b24      	ldr	r3, [pc, #144]	; (800d820 <Adachi_judge+0x548>)
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	3301      	adds	r3, #1
 800d794:	b2da      	uxtb	r2, r3
 800d796:	4b22      	ldr	r3, [pc, #136]	; (800d820 <Adachi_judge+0x548>)
 800d798:	701a      	strb	r2, [r3, #0]
 800d79a:	e072      	b.n	800d882 <Adachi_judge+0x5aa>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d79c:	4b20      	ldr	r3, [pc, #128]	; (800d820 <Adachi_judge+0x548>)
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	4b20      	ldr	r3, [pc, #128]	; (800d824 <Adachi_judge+0x54c>)
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	4a1f      	ldr	r2, [pc, #124]	; (800d828 <Adachi_judge+0x550>)
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	00db      	lsls	r3, r3, #3
 800d7ae:	440b      	add	r3, r1
 800d7b0:	4403      	add	r3, r0
 800d7b2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d7b6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d7ba:	b2db      	uxtb	r3, r3
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d13b      	bne.n	800d838 <Adachi_judge+0x560>
 800d7c0:	4b17      	ldr	r3, [pc, #92]	; (800d820 <Adachi_judge+0x548>)
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	1e5a      	subs	r2, r3, #1
 800d7c6:	4b17      	ldr	r3, [pc, #92]	; (800d824 <Adachi_judge+0x54c>)
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	4917      	ldr	r1, [pc, #92]	; (800d82c <Adachi_judge+0x554>)
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	00db      	lsls	r3, r3, #3
 800d7d2:	4413      	add	r3, r2
 800d7d4:	440b      	add	r3, r1
 800d7d6:	4403      	add	r3, r0
 800d7d8:	781a      	ldrb	r2, [r3, #0]
 800d7da:	4b11      	ldr	r3, [pc, #68]	; (800d820 <Adachi_judge+0x548>)
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	4b10      	ldr	r3, [pc, #64]	; (800d824 <Adachi_judge+0x54c>)
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	461c      	mov	r4, r3
 800d7e6:	4911      	ldr	r1, [pc, #68]	; (800d82c <Adachi_judge+0x554>)
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	00db      	lsls	r3, r3, #3
 800d7ec:	4403      	add	r3, r0
 800d7ee:	440b      	add	r3, r1
 800d7f0:	4423      	add	r3, r4
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d21f      	bcs.n	800d838 <Adachi_judge+0x560>
 800d7f8:	4b09      	ldr	r3, [pc, #36]	; (800d820 <Adachi_judge+0x548>)
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d01b      	beq.n	800d838 <Adachi_judge+0x560>
			  //右西
			  R_turn_select();
 800d800:	f7fe fa12 	bl	800bc28 <R_turn_select>
	       	  my_direction = west;
 800d804:	4b0a      	ldr	r3, [pc, #40]	; (800d830 <Adachi_judge+0x558>)
 800d806:	2203      	movs	r2, #3
 800d808:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d80a:	4b05      	ldr	r3, [pc, #20]	; (800d820 <Adachi_judge+0x548>)
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	3b01      	subs	r3, #1
 800d810:	b2da      	uxtb	r2, r3
 800d812:	4b03      	ldr	r3, [pc, #12]	; (800d820 <Adachi_judge+0x548>)
 800d814:	701a      	strb	r2, [r3, #0]
 800d816:	e034      	b.n	800d882 <Adachi_judge+0x5aa>
 800d818:	33333333 	.word	0x33333333
 800d81c:	3fd33333 	.word	0x3fd33333
 800d820:	200142fc 	.word	0x200142fc
 800d824:	200142fd 	.word	0x200142fd
 800d828:	20018efc 	.word	0x20018efc
 800d82c:	20018a54 	.word	0x20018a54
 800d830:	2001848a 	.word	0x2001848a
 800d834:	20000068 	.word	0x20000068
		  }
		  else {
			  //後北
	          Decelerate();
 800d838:	f7fd fb26 	bl	800ae88 <Decelerate>
	          wait(0.3);;
 800d83c:	ed9f 0b84 	vldr	d0, [pc, #528]	; 800da50 <Adachi_judge+0x778>
 800d840:	f7fd f9f2 	bl	800ac28 <wait>

	          if(mode.execution == 1)
 800d844:	4b84      	ldr	r3, [pc, #528]	; (800da58 <Adachi_judge+0x780>)
 800d846:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d101      	bne.n	800d852 <Adachi_judge+0x57a>
	        	  Motor_PWM_Stop();
 800d84e:	f7fc fc83 	bl	800a158 <Motor_PWM_Stop>

	  	      rotate180();
 800d852:	f7fe f907 	bl	800ba64 <rotate180>
	  	      wait(0.3);;
 800d856:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 800da50 <Adachi_judge+0x778>
 800d85a:	f7fd f9e5 	bl	800ac28 <wait>
	  	      back_calib();
 800d85e:	f7fe f97b 	bl	800bb58 <back_calib>
	  	      wait(0.3);
 800d862:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 800da50 <Adachi_judge+0x778>
 800d866:	f7fd f9df 	bl	800ac28 <wait>
	       	  Start_Accel();
 800d86a:	f7fd fa05 	bl	800ac78 <Start_Accel>

	       	  my_direction = north;
 800d86e:	4b7b      	ldr	r3, [pc, #492]	; (800da5c <Adachi_judge+0x784>)
 800d870:	2200      	movs	r2, #0
 800d872:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d874:	4b7a      	ldr	r3, [pc, #488]	; (800da60 <Adachi_judge+0x788>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	3301      	adds	r3, #1
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	4b78      	ldr	r3, [pc, #480]	; (800da60 <Adachi_judge+0x788>)
 800d87e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d880:	e0e1      	b.n	800da46 <Adachi_judge+0x76e>
 800d882:	e0e0      	b.n	800da46 <Adachi_judge+0x76e>

	  case west:

		  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d884:	4b77      	ldr	r3, [pc, #476]	; (800da64 <Adachi_judge+0x78c>)
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	4619      	mov	r1, r3
 800d88a:	4b75      	ldr	r3, [pc, #468]	; (800da60 <Adachi_judge+0x788>)
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	4618      	mov	r0, r3
 800d890:	4a75      	ldr	r2, [pc, #468]	; (800da68 <Adachi_judge+0x790>)
 800d892:	460b      	mov	r3, r1
 800d894:	00db      	lsls	r3, r3, #3
 800d896:	440b      	add	r3, r1
 800d898:	4403      	add	r3, r0
 800d89a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d89e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d12b      	bne.n	800d900 <Adachi_judge+0x628>
 800d8a8:	4b6e      	ldr	r3, [pc, #440]	; (800da64 <Adachi_judge+0x78c>)
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	1e5a      	subs	r2, r3, #1
 800d8ae:	4b6c      	ldr	r3, [pc, #432]	; (800da60 <Adachi_judge+0x788>)
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	496d      	ldr	r1, [pc, #436]	; (800da6c <Adachi_judge+0x794>)
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	00db      	lsls	r3, r3, #3
 800d8ba:	4413      	add	r3, r2
 800d8bc:	440b      	add	r3, r1
 800d8be:	4403      	add	r3, r0
 800d8c0:	781a      	ldrb	r2, [r3, #0]
 800d8c2:	4b68      	ldr	r3, [pc, #416]	; (800da64 <Adachi_judge+0x78c>)
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	4b65      	ldr	r3, [pc, #404]	; (800da60 <Adachi_judge+0x788>)
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	461c      	mov	r4, r3
 800d8ce:	4967      	ldr	r1, [pc, #412]	; (800da6c <Adachi_judge+0x794>)
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	00db      	lsls	r3, r3, #3
 800d8d4:	4403      	add	r3, r0
 800d8d6:	440b      	add	r3, r1
 800d8d8:	4423      	add	r3, r4
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d20f      	bcs.n	800d900 <Adachi_judge+0x628>
 800d8e0:	4b60      	ldr	r3, [pc, #384]	; (800da64 <Adachi_judge+0x78c>)
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d00b      	beq.n	800d900 <Adachi_judge+0x628>
			  //前西
			  straight();
 800d8e8:	f7fd fb86 	bl	800aff8 <straight>
	       	  my_direction = west;
 800d8ec:	4b5b      	ldr	r3, [pc, #364]	; (800da5c <Adachi_judge+0x784>)
 800d8ee:	2203      	movs	r2, #3
 800d8f0:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d8f2:	4b5c      	ldr	r3, [pc, #368]	; (800da64 <Adachi_judge+0x78c>)
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	3b01      	subs	r3, #1
 800d8f8:	b2da      	uxtb	r2, r3
 800d8fa:	4b5a      	ldr	r3, [pc, #360]	; (800da64 <Adachi_judge+0x78c>)
 800d8fc:	701a      	strb	r2, [r3, #0]
 800d8fe:	e0a0      	b.n	800da42 <Adachi_judge+0x76a>
		  }
		  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d900:	4b58      	ldr	r3, [pc, #352]	; (800da64 <Adachi_judge+0x78c>)
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	4619      	mov	r1, r3
 800d906:	4b56      	ldr	r3, [pc, #344]	; (800da60 <Adachi_judge+0x788>)
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	4618      	mov	r0, r3
 800d90c:	4a56      	ldr	r2, [pc, #344]	; (800da68 <Adachi_judge+0x790>)
 800d90e:	460b      	mov	r3, r1
 800d910:	00db      	lsls	r3, r3, #3
 800d912:	440b      	add	r3, r1
 800d914:	4403      	add	r3, r0
 800d916:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d91a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	2b00      	cmp	r3, #0
 800d922:	d12b      	bne.n	800d97c <Adachi_judge+0x6a4>
 800d924:	4b4f      	ldr	r3, [pc, #316]	; (800da64 <Adachi_judge+0x78c>)
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	4618      	mov	r0, r3
 800d92a:	4b4d      	ldr	r3, [pc, #308]	; (800da60 <Adachi_judge+0x788>)
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	1e5a      	subs	r2, r3, #1
 800d930:	494e      	ldr	r1, [pc, #312]	; (800da6c <Adachi_judge+0x794>)
 800d932:	4603      	mov	r3, r0
 800d934:	00db      	lsls	r3, r3, #3
 800d936:	4403      	add	r3, r0
 800d938:	440b      	add	r3, r1
 800d93a:	4413      	add	r3, r2
 800d93c:	781a      	ldrb	r2, [r3, #0]
 800d93e:	4b49      	ldr	r3, [pc, #292]	; (800da64 <Adachi_judge+0x78c>)
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	4618      	mov	r0, r3
 800d944:	4b46      	ldr	r3, [pc, #280]	; (800da60 <Adachi_judge+0x788>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	461c      	mov	r4, r3
 800d94a:	4948      	ldr	r1, [pc, #288]	; (800da6c <Adachi_judge+0x794>)
 800d94c:	4603      	mov	r3, r0
 800d94e:	00db      	lsls	r3, r3, #3
 800d950:	4403      	add	r3, r0
 800d952:	440b      	add	r3, r1
 800d954:	4423      	add	r3, r4
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d20f      	bcs.n	800d97c <Adachi_judge+0x6a4>
 800d95c:	4b40      	ldr	r3, [pc, #256]	; (800da60 <Adachi_judge+0x788>)
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00b      	beq.n	800d97c <Adachi_judge+0x6a4>
			  //左?��?
			  L_turn_select();
 800d964:	f7fe f9a4 	bl	800bcb0 <L_turn_select>
	       	  my_direction = south;
 800d968:	4b3c      	ldr	r3, [pc, #240]	; (800da5c <Adachi_judge+0x784>)
 800d96a:	2202      	movs	r2, #2
 800d96c:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d96e:	4b3c      	ldr	r3, [pc, #240]	; (800da60 <Adachi_judge+0x788>)
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	3b01      	subs	r3, #1
 800d974:	b2da      	uxtb	r2, r3
 800d976:	4b3a      	ldr	r3, [pc, #232]	; (800da60 <Adachi_judge+0x788>)
 800d978:	701a      	strb	r2, [r3, #0]
 800d97a:	e062      	b.n	800da42 <Adachi_judge+0x76a>
		  }
		  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d97c:	4b39      	ldr	r3, [pc, #228]	; (800da64 <Adachi_judge+0x78c>)
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	4619      	mov	r1, r3
 800d982:	4b37      	ldr	r3, [pc, #220]	; (800da60 <Adachi_judge+0x788>)
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	4618      	mov	r0, r3
 800d988:	4a37      	ldr	r2, [pc, #220]	; (800da68 <Adachi_judge+0x790>)
 800d98a:	460b      	mov	r3, r1
 800d98c:	00db      	lsls	r3, r3, #3
 800d98e:	440b      	add	r3, r1
 800d990:	4403      	add	r3, r0
 800d992:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d996:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d12b      	bne.n	800d9f8 <Adachi_judge+0x720>
 800d9a0:	4b30      	ldr	r3, [pc, #192]	; (800da64 <Adachi_judge+0x78c>)
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	4b2e      	ldr	r3, [pc, #184]	; (800da60 <Adachi_judge+0x788>)
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	1c5a      	adds	r2, r3, #1
 800d9ac:	492f      	ldr	r1, [pc, #188]	; (800da6c <Adachi_judge+0x794>)
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	00db      	lsls	r3, r3, #3
 800d9b2:	4403      	add	r3, r0
 800d9b4:	440b      	add	r3, r1
 800d9b6:	4413      	add	r3, r2
 800d9b8:	781a      	ldrb	r2, [r3, #0]
 800d9ba:	4b2a      	ldr	r3, [pc, #168]	; (800da64 <Adachi_judge+0x78c>)
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	4b27      	ldr	r3, [pc, #156]	; (800da60 <Adachi_judge+0x788>)
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	461c      	mov	r4, r3
 800d9c6:	4929      	ldr	r1, [pc, #164]	; (800da6c <Adachi_judge+0x794>)
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	00db      	lsls	r3, r3, #3
 800d9cc:	4403      	add	r3, r0
 800d9ce:	440b      	add	r3, r1
 800d9d0:	4423      	add	r3, r4
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d20f      	bcs.n	800d9f8 <Adachi_judge+0x720>
 800d9d8:	4b21      	ldr	r3, [pc, #132]	; (800da60 <Adachi_judge+0x788>)
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	2b07      	cmp	r3, #7
 800d9de:	d80b      	bhi.n	800d9f8 <Adachi_judge+0x720>
			  //右?��?
			  R_turn_select();
 800d9e0:	f7fe f922 	bl	800bc28 <R_turn_select>
	       	  my_direction = north;
 800d9e4:	4b1d      	ldr	r3, [pc, #116]	; (800da5c <Adachi_judge+0x784>)
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d9ea:	4b1d      	ldr	r3, [pc, #116]	; (800da60 <Adachi_judge+0x788>)
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	b2da      	uxtb	r2, r3
 800d9f2:	4b1b      	ldr	r3, [pc, #108]	; (800da60 <Adachi_judge+0x788>)
 800d9f4:	701a      	strb	r2, [r3, #0]
 800d9f6:	e024      	b.n	800da42 <Adachi_judge+0x76a>
		  }
		  else {
			  //後東
	          Decelerate();
 800d9f8:	f7fd fa46 	bl	800ae88 <Decelerate>
	          wait(0.3);;
 800d9fc:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800da50 <Adachi_judge+0x778>
 800da00:	f7fd f912 	bl	800ac28 <wait>

	          if(mode.execution == 1)
 800da04:	4b14      	ldr	r3, [pc, #80]	; (800da58 <Adachi_judge+0x780>)
 800da06:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d101      	bne.n	800da12 <Adachi_judge+0x73a>
	        	  Motor_PWM_Stop();
 800da0e:	f7fc fba3 	bl	800a158 <Motor_PWM_Stop>

	  	      rotate180();
 800da12:	f7fe f827 	bl	800ba64 <rotate180>
	  	      wait(0.3);;
 800da16:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800da50 <Adachi_judge+0x778>
 800da1a:	f7fd f905 	bl	800ac28 <wait>
	  	      back_calib();
 800da1e:	f7fe f89b 	bl	800bb58 <back_calib>
	  	      wait(0.3);
 800da22:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800da50 <Adachi_judge+0x778>
 800da26:	f7fd f8ff 	bl	800ac28 <wait>
	       	  Start_Accel();
 800da2a:	f7fd f925 	bl	800ac78 <Start_Accel>

	       	  my_direction = east;
 800da2e:	4b0b      	ldr	r3, [pc, #44]	; (800da5c <Adachi_judge+0x784>)
 800da30:	2201      	movs	r2, #1
 800da32:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800da34:	4b0b      	ldr	r3, [pc, #44]	; (800da64 <Adachi_judge+0x78c>)
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	3301      	adds	r3, #1
 800da3a:	b2da      	uxtb	r2, r3
 800da3c:	4b09      	ldr	r3, [pc, #36]	; (800da64 <Adachi_judge+0x78c>)
 800da3e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800da40:	e001      	b.n	800da46 <Adachi_judge+0x76e>
 800da42:	e000      	b.n	800da46 <Adachi_judge+0x76e>

	  default:
		  break;
 800da44:	bf00      	nop
	  }//swtich end
}
 800da46:	bf00      	nop
 800da48:	bd98      	pop	{r3, r4, r7, pc}
 800da4a:	bf00      	nop
 800da4c:	f3af 8000 	nop.w
 800da50:	33333333 	.word	0x33333333
 800da54:	3fd33333 	.word	0x3fd33333
 800da58:	20000068 	.word	0x20000068
 800da5c:	2001848a 	.word	0x2001848a
 800da60:	200142fd 	.word	0x200142fd
 800da64:	200142fc 	.word	0x200142fc
 800da68:	20018efc 	.word	0x20018efc
 800da6c:	20018a54 	.word	0x20018a54

0800da70 <Adachi_search>:

	  default:
		  break;
	  }//swtich end
}
void Adachi_search(){
 800da70:	b580      	push	{r7, lr}
 800da72:	af00      	add	r7, sp, #0
	//back_calib();
	/*ここは書籍から引用*/

	//マップ�??��初期?��?
	map_init();
 800da74:	f7fc f89a 	bl	8009bac <map_init>
	//座標�??��初期?��?
	x = y = 0;
 800da78:	4b33      	ldr	r3, [pc, #204]	; (800db48 <Adachi_search+0xd8>)
 800da7a:	2200      	movs	r2, #0
 800da7c:	701a      	strb	r2, [r3, #0]
 800da7e:	4b32      	ldr	r3, [pc, #200]	; (800db48 <Adachi_search+0xd8>)
 800da80:	781a      	ldrb	r2, [r3, #0]
 800da82:	4b32      	ldr	r3, [pc, #200]	; (800db4c <Adachi_search+0xdc>)
 800da84:	701a      	strb	r2, [r3, #0]
	//方向�??��初期?��?
	my_direction=north;
 800da86:	4b32      	ldr	r3, [pc, #200]	; (800db50 <Adachi_search+0xe0>)
 800da88:	2200      	movs	r2, #0
 800da8a:	701a      	strb	r2, [r3, #0]

	/*ここまで*/

	//壁情報の初期?��?
	wall_set();
 800da8c:	f7fe fbc0 	bl	800c210 <wall_set>

	//開始位置の後ろはWALL
	//左右はwall_set()でセ?��??��?
	wall[x][y].south = WALL;
 800da90:	4b2e      	ldr	r3, [pc, #184]	; (800db4c <Adachi_search+0xdc>)
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	461a      	mov	r2, r3
 800da96:	4b2c      	ldr	r3, [pc, #176]	; (800db48 <Adachi_search+0xd8>)
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	4618      	mov	r0, r3
 800da9c:	492d      	ldr	r1, [pc, #180]	; (800db54 <Adachi_search+0xe4>)
 800da9e:	4613      	mov	r3, r2
 800daa0:	00db      	lsls	r3, r3, #3
 800daa2:	4413      	add	r3, r2
 800daa4:	181a      	adds	r2, r3, r0
 800daa6:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800daaa:	2001      	movs	r0, #1
 800daac:	f360 1305 	bfi	r3, r0, #4, #2
 800dab0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	//歩数マップ�??��更新(ここでは初期?��?)
	Walk_Map_Update();
 800dab4:	f7fe fa0e 	bl	800bed4 <Walk_Map_Update>

	//?��?初�??��直進
	Start_Accel();
 800dab8:	f7fd f8de 	bl	800ac78 <Start_Accel>

	x = 0;
 800dabc:	4b23      	ldr	r3, [pc, #140]	; (800db4c <Adachi_search+0xdc>)
 800dabe:	2200      	movs	r2, #0
 800dac0:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800dac2:	4b21      	ldr	r3, [pc, #132]	; (800db48 <Adachi_search+0xd8>)
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	3301      	adds	r3, #1
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	4b1f      	ldr	r3, [pc, #124]	; (800db48 <Adachi_search+0xd8>)
 800dacc:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800dace:	e005      	b.n	800dadc <Adachi_search+0x6c>
		//壁更新
		wall_set();
 800dad0:	f7fe fb9e 	bl	800c210 <wall_set>

		//マップ更新
		Walk_Map_Update();
 800dad4:	f7fe f9fe 	bl	800bed4 <Walk_Map_Update>

		//次の動きを判定し動く
		Adachi_judge();
 800dad8:	f7ff fbfe 	bl	800d2d8 <Adachi_judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800dadc:	4b1b      	ldr	r3, [pc, #108]	; (800db4c <Adachi_search+0xdc>)
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	2b06      	cmp	r3, #6
 800dae2:	d9f5      	bls.n	800dad0 <Adachi_search+0x60>
 800dae4:	4b19      	ldr	r3, [pc, #100]	; (800db4c <Adachi_search+0xdc>)
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	2b07      	cmp	r3, #7
 800daea:	d8f1      	bhi.n	800dad0 <Adachi_search+0x60>
 800daec:	4b16      	ldr	r3, [pc, #88]	; (800db48 <Adachi_search+0xd8>)
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	2b06      	cmp	r3, #6
 800daf2:	d9ed      	bls.n	800dad0 <Adachi_search+0x60>
 800daf4:	4b14      	ldr	r3, [pc, #80]	; (800db48 <Adachi_search+0xd8>)
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	2b07      	cmp	r3, #7
 800dafa:	d8e9      	bhi.n	800dad0 <Adachi_search+0x60>

	}

	//after-gall#2
	      Decelerate();
 800dafc:	f7fd f9c4 	bl	800ae88 <Decelerate>
	      mode.LED = 7;
 800db00:	4b15      	ldr	r3, [pc, #84]	; (800db58 <Adachi_search+0xe8>)
 800db02:	2207      	movs	r2, #7
 800db04:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800db06:	f7fc fdc9 	bl	800a69c <LED_Change>
	      HAL_Delay(1000);
 800db0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800db0e:	f002 fecd 	bl	80108ac <HAL_Delay>

//	      mapcopy();
//	      Flash_store();
	      mode.LED = 0;
 800db12:	4b11      	ldr	r3, [pc, #68]	; (800db58 <Adachi_search+0xe8>)
 800db14:	2200      	movs	r2, #0
 800db16:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800db18:	f7fc fdc0 	bl	800a69c <LED_Change>
	      mapcopy();
 800db1c:	f7fc f8c8 	bl	8009cb0 <mapcopy>
	      Flash_store();
 800db20:	f7fc fa56 	bl	8009fd0 <Flash_store>


	      //ゴールエリア巡�? 2�?2を想�?
	      goal_area_search();
 800db24:	f7fe fcb8 	bl	800c498 <goal_area_search>
	  	  Decelerate();
	      rotate180();
	      wait(0.3);
	      back_calib();
#endif
	      wait(0.3);
 800db28:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800db40 <Adachi_search+0xd0>
 800db2c:	f7fd f87c 	bl	800ac28 <wait>
	      mapcopy();
 800db30:	f7fc f8be 	bl	8009cb0 <mapcopy>
	      Flash_store();
 800db34:	f7fc fa4c 	bl	8009fd0 <Flash_store>
	      //mode.execution = 3;
	      while(1)
	      {

	    	  Motor_PWM_Stop();
 800db38:	f7fc fb0e 	bl	800a158 <Motor_PWM_Stop>
 800db3c:	e7fc      	b.n	800db38 <Adachi_search+0xc8>
 800db3e:	bf00      	nop
 800db40:	33333333 	.word	0x33333333
 800db44:	3fd33333 	.word	0x3fd33333
 800db48:	200142fd 	.word	0x200142fd
 800db4c:	200142fc 	.word	0x200142fc
 800db50:	2001848a 	.word	0x2001848a
 800db54:	20018efc 	.word	0x20018efc
 800db58:	20000068 	.word	0x20000068

0800db5c <Map_Load>:
	      }
}
void Map_Load(){
 800db5c:	b598      	push	{r3, r4, r7, lr}
 800db5e:	af00      	add	r7, sp, #0
	//ROMの迷路?��?ータをRAMに入れる
	Flash_load();
 800db60:	f7fc fa24 	bl	8009fac <Flash_load>

	//work_ram[]の?��?ータをwall[][]とwalk_map[][]に入れる
	static int i = 0, j=0,k=0;

	//壁情報
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800db64:	4b57      	ldr	r3, [pc, #348]	; (800dcc4 <Map_Load+0x168>)
 800db66:	2208      	movs	r2, #8
 800db68:	601a      	str	r2, [r3, #0]
 800db6a:	e075      	b.n	800dc58 <Map_Load+0xfc>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800db6c:	4b56      	ldr	r3, [pc, #344]	; (800dcc8 <Map_Load+0x16c>)
 800db6e:	2200      	movs	r2, #0
 800db70:	601a      	str	r2, [r3, #0]
 800db72:	e068      	b.n	800dc46 <Map_Load+0xea>
			wall[i][j].north = work_ram[k];
 800db74:	4b55      	ldr	r3, [pc, #340]	; (800dccc <Map_Load+0x170>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a55      	ldr	r2, [pc, #340]	; (800dcd0 <Map_Load+0x174>)
 800db7a:	5cd1      	ldrb	r1, [r2, r3]
 800db7c:	4b52      	ldr	r3, [pc, #328]	; (800dcc8 <Map_Load+0x16c>)
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	4b50      	ldr	r3, [pc, #320]	; (800dcc4 <Map_Load+0x168>)
 800db82:	681c      	ldr	r4, [r3, #0]
 800db84:	460b      	mov	r3, r1
 800db86:	f003 0303 	and.w	r3, r3, #3
 800db8a:	b2d8      	uxtb	r0, r3
 800db8c:	4951      	ldr	r1, [pc, #324]	; (800dcd4 <Map_Load+0x178>)
 800db8e:	4613      	mov	r3, r2
 800db90:	00db      	lsls	r3, r3, #3
 800db92:	4413      	add	r3, r2
 800db94:	191a      	adds	r2, r3, r4
 800db96:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800db9a:	f360 0301 	bfi	r3, r0, #0, #2
 800db9e:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].east = work_ram[k+1];
 800dba2:	4b4a      	ldr	r3, [pc, #296]	; (800dccc <Map_Load+0x170>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	3301      	adds	r3, #1
 800dba8:	4a49      	ldr	r2, [pc, #292]	; (800dcd0 <Map_Load+0x174>)
 800dbaa:	5cd1      	ldrb	r1, [r2, r3]
 800dbac:	4b46      	ldr	r3, [pc, #280]	; (800dcc8 <Map_Load+0x16c>)
 800dbae:	681a      	ldr	r2, [r3, #0]
 800dbb0:	4b44      	ldr	r3, [pc, #272]	; (800dcc4 <Map_Load+0x168>)
 800dbb2:	681c      	ldr	r4, [r3, #0]
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	f003 0303 	and.w	r3, r3, #3
 800dbba:	b2d8      	uxtb	r0, r3
 800dbbc:	4945      	ldr	r1, [pc, #276]	; (800dcd4 <Map_Load+0x178>)
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	00db      	lsls	r3, r3, #3
 800dbc2:	4413      	add	r3, r2
 800dbc4:	191a      	adds	r2, r3, r4
 800dbc6:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800dbca:	f360 0383 	bfi	r3, r0, #2, #2
 800dbce:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].south = work_ram[k+2];
 800dbd2:	4b3e      	ldr	r3, [pc, #248]	; (800dccc <Map_Load+0x170>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	3302      	adds	r3, #2
 800dbd8:	4a3d      	ldr	r2, [pc, #244]	; (800dcd0 <Map_Load+0x174>)
 800dbda:	5cd1      	ldrb	r1, [r2, r3]
 800dbdc:	4b3a      	ldr	r3, [pc, #232]	; (800dcc8 <Map_Load+0x16c>)
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	4b38      	ldr	r3, [pc, #224]	; (800dcc4 <Map_Load+0x168>)
 800dbe2:	681c      	ldr	r4, [r3, #0]
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	f003 0303 	and.w	r3, r3, #3
 800dbea:	b2d8      	uxtb	r0, r3
 800dbec:	4939      	ldr	r1, [pc, #228]	; (800dcd4 <Map_Load+0x178>)
 800dbee:	4613      	mov	r3, r2
 800dbf0:	00db      	lsls	r3, r3, #3
 800dbf2:	4413      	add	r3, r2
 800dbf4:	191a      	adds	r2, r3, r4
 800dbf6:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800dbfa:	f360 1305 	bfi	r3, r0, #4, #2
 800dbfe:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].west = work_ram[k+3];
 800dc02:	4b32      	ldr	r3, [pc, #200]	; (800dccc <Map_Load+0x170>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	3303      	adds	r3, #3
 800dc08:	4a31      	ldr	r2, [pc, #196]	; (800dcd0 <Map_Load+0x174>)
 800dc0a:	5cd1      	ldrb	r1, [r2, r3]
 800dc0c:	4b2e      	ldr	r3, [pc, #184]	; (800dcc8 <Map_Load+0x16c>)
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	4b2c      	ldr	r3, [pc, #176]	; (800dcc4 <Map_Load+0x168>)
 800dc12:	681c      	ldr	r4, [r3, #0]
 800dc14:	460b      	mov	r3, r1
 800dc16:	f003 0303 	and.w	r3, r3, #3
 800dc1a:	b2d8      	uxtb	r0, r3
 800dc1c:	492d      	ldr	r1, [pc, #180]	; (800dcd4 <Map_Load+0x178>)
 800dc1e:	4613      	mov	r3, r2
 800dc20:	00db      	lsls	r3, r3, #3
 800dc22:	4413      	add	r3, r2
 800dc24:	191a      	adds	r2, r3, r4
 800dc26:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800dc2a:	f360 1387 	bfi	r3, r0, #6, #2
 800dc2e:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			k+=4;
 800dc32:	4b26      	ldr	r3, [pc, #152]	; (800dccc <Map_Load+0x170>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	3304      	adds	r3, #4
 800dc38:	4a24      	ldr	r2, [pc, #144]	; (800dccc <Map_Load+0x170>)
 800dc3a:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800dc3c:	4b22      	ldr	r3, [pc, #136]	; (800dcc8 <Map_Load+0x16c>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	3301      	adds	r3, #1
 800dc42:	4a21      	ldr	r2, [pc, #132]	; (800dcc8 <Map_Load+0x16c>)
 800dc44:	6013      	str	r3, [r2, #0]
 800dc46:	4b20      	ldr	r3, [pc, #128]	; (800dcc8 <Map_Load+0x16c>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2b08      	cmp	r3, #8
 800dc4c:	dd92      	ble.n	800db74 <Map_Load+0x18>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800dc4e:	4b1d      	ldr	r3, [pc, #116]	; (800dcc4 <Map_Load+0x168>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	3b01      	subs	r3, #1
 800dc54:	4a1b      	ldr	r2, [pc, #108]	; (800dcc4 <Map_Load+0x168>)
 800dc56:	6013      	str	r3, [r2, #0]
 800dc58:	4b1a      	ldr	r3, [pc, #104]	; (800dcc4 <Map_Load+0x168>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	da85      	bge.n	800db6c <Map_Load+0x10>
		//kは60まで行ったあと?��?4*NOS*NOS になって値が�??��らず終わ?��?

	}

	//歩数マッ?��?
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800dc60:	4b18      	ldr	r3, [pc, #96]	; (800dcc4 <Map_Load+0x168>)
 800dc62:	2208      	movs	r2, #8
 800dc64:	601a      	str	r2, [r3, #0]
 800dc66:	e026      	b.n	800dcb6 <Map_Load+0x15a>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800dc68:	4b17      	ldr	r3, [pc, #92]	; (800dcc8 <Map_Load+0x16c>)
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	601a      	str	r2, [r3, #0]
 800dc6e:	e019      	b.n	800dca4 <Map_Load+0x148>
			walk_map[i][j] = work_ram[k];
 800dc70:	4b16      	ldr	r3, [pc, #88]	; (800dccc <Map_Load+0x170>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4a14      	ldr	r2, [pc, #80]	; (800dcc8 <Map_Load+0x16c>)
 800dc76:	6812      	ldr	r2, [r2, #0]
 800dc78:	4912      	ldr	r1, [pc, #72]	; (800dcc4 <Map_Load+0x168>)
 800dc7a:	6809      	ldr	r1, [r1, #0]
 800dc7c:	4814      	ldr	r0, [pc, #80]	; (800dcd0 <Map_Load+0x174>)
 800dc7e:	5cc4      	ldrb	r4, [r0, r3]
 800dc80:	4815      	ldr	r0, [pc, #84]	; (800dcd8 <Map_Load+0x17c>)
 800dc82:	4613      	mov	r3, r2
 800dc84:	00db      	lsls	r3, r3, #3
 800dc86:	4413      	add	r3, r2
 800dc88:	4403      	add	r3, r0
 800dc8a:	440b      	add	r3, r1
 800dc8c:	4622      	mov	r2, r4
 800dc8e:	701a      	strb	r2, [r3, #0]
			k+=1;
 800dc90:	4b0e      	ldr	r3, [pc, #56]	; (800dccc <Map_Load+0x170>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	3301      	adds	r3, #1
 800dc96:	4a0d      	ldr	r2, [pc, #52]	; (800dccc <Map_Load+0x170>)
 800dc98:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800dc9a:	4b0b      	ldr	r3, [pc, #44]	; (800dcc8 <Map_Load+0x16c>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	4a09      	ldr	r2, [pc, #36]	; (800dcc8 <Map_Load+0x16c>)
 800dca2:	6013      	str	r3, [r2, #0]
 800dca4:	4b08      	ldr	r3, [pc, #32]	; (800dcc8 <Map_Load+0x16c>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2b08      	cmp	r3, #8
 800dcaa:	dde1      	ble.n	800dc70 <Map_Load+0x114>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800dcac:	4b05      	ldr	r3, [pc, #20]	; (800dcc4 <Map_Load+0x168>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	4a04      	ldr	r2, [pc, #16]	; (800dcc4 <Map_Load+0x168>)
 800dcb4:	6013      	str	r3, [r2, #0]
 800dcb6:	4b03      	ldr	r3, [pc, #12]	; (800dcc4 <Map_Load+0x168>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	dad4      	bge.n	800dc68 <Map_Load+0x10c>
		}
	}

}
 800dcbe:	bf00      	nop
 800dcc0:	bd98      	pop	{r3, r4, r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	2001834c 	.word	0x2001834c
 800dcc8:	20018350 	.word	0x20018350
 800dccc:	20018354 	.word	0x20018354
 800dcd0:	20014308 	.word	0x20014308
 800dcd4:	20018efc 	.word	0x20018efc
 800dcd8:	20018a54 	.word	0x20018a54
 800dcdc:	00000000 	.word	0x00000000

0800dce0 <Adachi_search2>:

	  default:
		  break;
	  }//swtich end
}
void Adachi_search2(){
 800dce0:	b580      	push	{r7, lr}
 800dce2:	af00      	add	r7, sp, #0
	//back_calib();
	/*ここは書籍から引用*/

	Map_Load();
 800dce4:	f7ff ff3a 	bl	800db5c <Map_Load>

	//座標�??��初期?��?
	x = y = 0;
 800dce8:	4b33      	ldr	r3, [pc, #204]	; (800ddb8 <Adachi_search2+0xd8>)
 800dcea:	2200      	movs	r2, #0
 800dcec:	701a      	strb	r2, [r3, #0]
 800dcee:	4b32      	ldr	r3, [pc, #200]	; (800ddb8 <Adachi_search2+0xd8>)
 800dcf0:	781a      	ldrb	r2, [r3, #0]
 800dcf2:	4b32      	ldr	r3, [pc, #200]	; (800ddbc <Adachi_search2+0xdc>)
 800dcf4:	701a      	strb	r2, [r3, #0]
	//方向�??��初期?��?
	my_direction=north;
 800dcf6:	4b32      	ldr	r3, [pc, #200]	; (800ddc0 <Adachi_search2+0xe0>)
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	701a      	strb	r2, [r3, #0]

	/*ここまで*/

	//壁情報の初期?��?
	wall_set();
 800dcfc:	f7fe fa88 	bl	800c210 <wall_set>

	//開始位置の後ろはWALL
	//左右はwall_set()でセ?��??��?
	wall[x][y].south = WALL;
 800dd00:	4b2e      	ldr	r3, [pc, #184]	; (800ddbc <Adachi_search2+0xdc>)
 800dd02:	781b      	ldrb	r3, [r3, #0]
 800dd04:	461a      	mov	r2, r3
 800dd06:	4b2c      	ldr	r3, [pc, #176]	; (800ddb8 <Adachi_search2+0xd8>)
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	492d      	ldr	r1, [pc, #180]	; (800ddc4 <Adachi_search2+0xe4>)
 800dd0e:	4613      	mov	r3, r2
 800dd10:	00db      	lsls	r3, r3, #3
 800dd12:	4413      	add	r3, r2
 800dd14:	181a      	adds	r2, r3, r0
 800dd16:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800dd1a:	2001      	movs	r0, #1
 800dd1c:	f360 1305 	bfi	r3, r0, #4, #2
 800dd20:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	//歩数マップ�??��更新(ここでは初期?��?)
	Walk_Map_Update();
 800dd24:	f7fe f8d6 	bl	800bed4 <Walk_Map_Update>

	//?��?初�??��直進
	Start_Accel();
 800dd28:	f7fc ffa6 	bl	800ac78 <Start_Accel>

	x = 0;
 800dd2c:	4b23      	ldr	r3, [pc, #140]	; (800ddbc <Adachi_search2+0xdc>)
 800dd2e:	2200      	movs	r2, #0
 800dd30:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800dd32:	4b21      	ldr	r3, [pc, #132]	; (800ddb8 <Adachi_search2+0xd8>)
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	3301      	adds	r3, #1
 800dd38:	b2da      	uxtb	r2, r3
 800dd3a:	4b1f      	ldr	r3, [pc, #124]	; (800ddb8 <Adachi_search2+0xd8>)
 800dd3c:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800dd3e:	e005      	b.n	800dd4c <Adachi_search2+0x6c>
		//壁更新
		wall_set();
 800dd40:	f7fe fa66 	bl	800c210 <wall_set>

		//マップ更新
		Walk_Map_Update();
 800dd44:	f7fe f8c6 	bl	800bed4 <Walk_Map_Update>

		//次の動きを判定し動く
		Adachi_judge();
 800dd48:	f7ff fac6 	bl	800d2d8 <Adachi_judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800dd4c:	4b1b      	ldr	r3, [pc, #108]	; (800ddbc <Adachi_search2+0xdc>)
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	2b06      	cmp	r3, #6
 800dd52:	d9f5      	bls.n	800dd40 <Adachi_search2+0x60>
 800dd54:	4b19      	ldr	r3, [pc, #100]	; (800ddbc <Adachi_search2+0xdc>)
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	2b07      	cmp	r3, #7
 800dd5a:	d8f1      	bhi.n	800dd40 <Adachi_search2+0x60>
 800dd5c:	4b16      	ldr	r3, [pc, #88]	; (800ddb8 <Adachi_search2+0xd8>)
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	2b06      	cmp	r3, #6
 800dd62:	d9ed      	bls.n	800dd40 <Adachi_search2+0x60>
 800dd64:	4b14      	ldr	r3, [pc, #80]	; (800ddb8 <Adachi_search2+0xd8>)
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	2b07      	cmp	r3, #7
 800dd6a:	d8e9      	bhi.n	800dd40 <Adachi_search2+0x60>
	}

	//after-gall#2
	      Decelerate();
 800dd6c:	f7fd f88c 	bl	800ae88 <Decelerate>
	      mode.LED = 7;
 800dd70:	4b15      	ldr	r3, [pc, #84]	; (800ddc8 <Adachi_search2+0xe8>)
 800dd72:	2207      	movs	r2, #7
 800dd74:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800dd76:	f7fc fc91 	bl	800a69c <LED_Change>
	      HAL_Delay(1000);
 800dd7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800dd7e:	f002 fd95 	bl	80108ac <HAL_Delay>
//	      mapcopy();
//	      Flash_store();
	      mode.LED = 0;
 800dd82:	4b11      	ldr	r3, [pc, #68]	; (800ddc8 <Adachi_search2+0xe8>)
 800dd84:	2200      	movs	r2, #0
 800dd86:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800dd88:	f7fc fc88 	bl	800a69c <LED_Change>
	      mapcopy();
 800dd8c:	f7fb ff90 	bl	8009cb0 <mapcopy>
	      Flash_store();
 800dd90:	f7fc f91e 	bl	8009fd0 <Flash_store>

	      //ゴールエリア巡�? 2�?2を想�?
	      goal_area_search();
 800dd94:	f7fe fb80 	bl	800c498 <goal_area_search>
	  	  Decelerate();
	      rotate180();
	      wait(0.3);
	      back_calib();
#endif
	      wait(0.3);
 800dd98:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800ddb0 <Adachi_search2+0xd0>
 800dd9c:	f7fc ff44 	bl	800ac28 <wait>
	      mapcopy();
 800dda0:	f7fb ff86 	bl	8009cb0 <mapcopy>
	      Flash_store();
 800dda4:	f7fc f914 	bl	8009fd0 <Flash_store>
	      //mode.execution = 3;
	      Motor_PWM_Stop();
 800dda8:	f7fc f9d6 	bl	800a158 <Motor_PWM_Stop>
}
 800ddac:	bf00      	nop
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	33333333 	.word	0x33333333
 800ddb4:	3fd33333 	.word	0x3fd33333
 800ddb8:	200142fd 	.word	0x200142fd
 800ddbc:	200142fc 	.word	0x200142fc
 800ddc0:	2001848a 	.word	0x2001848a
 800ddc4:	20018efc 	.word	0x20018efc
 800ddc8:	20000068 	.word	0x20000068
 800ddcc:	00000000 	.word	0x00000000

0800ddd0 <Shortest_Run_Judge>:


void Shortest_Run_Judge(){
 800ddd0:	b598      	push	{r3, r4, r7, lr}
 800ddd2:	af00      	add	r7, sp, #0
	/*------旋回モード選�?-----*/
	mode.turn = 1;
 800ddd4:	4b98      	ldr	r3, [pc, #608]	; (800e038 <Shortest_Run_Judge+0x268>)
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	725a      	strb	r2, [r3, #9]
	// 2 : �?輪旋回                  //
	// 3 : IMUで�?信地旋回       //
	/*----------------------------*/


	switch(my_direction){
 800ddda:	4b98      	ldr	r3, [pc, #608]	; (800e03c <Shortest_Run_Judge+0x26c>)
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	2b03      	cmp	r3, #3
 800dde0:	f200 8398 	bhi.w	800e514 <Shortest_Run_Judge+0x744>
 800dde4:	a201      	add	r2, pc, #4	; (adr r2, 800ddec <Shortest_Run_Judge+0x1c>)
 800dde6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddea:	bf00      	nop
 800ddec:	0800ddfd 	.word	0x0800ddfd
 800ddf0:	0800dfb1 	.word	0x0800dfb1
 800ddf4:	0800e189 	.word	0x0800e189
 800ddf8:	0800e361 	.word	0x0800e361
	  		  case north:
	  			  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800ddfc:	4b90      	ldr	r3, [pc, #576]	; (800e040 <Shortest_Run_Judge+0x270>)
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	4619      	mov	r1, r3
 800de02:	4b90      	ldr	r3, [pc, #576]	; (800e044 <Shortest_Run_Judge+0x274>)
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	4618      	mov	r0, r3
 800de08:	4a8f      	ldr	r2, [pc, #572]	; (800e048 <Shortest_Run_Judge+0x278>)
 800de0a:	460b      	mov	r3, r1
 800de0c:	00db      	lsls	r3, r3, #3
 800de0e:	440b      	add	r3, r1
 800de10:	4403      	add	r3, r0
 800de12:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800de16:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d12b      	bne.n	800de78 <Shortest_Run_Judge+0xa8>
 800de20:	4b87      	ldr	r3, [pc, #540]	; (800e040 <Shortest_Run_Judge+0x270>)
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	4618      	mov	r0, r3
 800de26:	4b87      	ldr	r3, [pc, #540]	; (800e044 <Shortest_Run_Judge+0x274>)
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	1c5a      	adds	r2, r3, #1
 800de2c:	4987      	ldr	r1, [pc, #540]	; (800e04c <Shortest_Run_Judge+0x27c>)
 800de2e:	4603      	mov	r3, r0
 800de30:	00db      	lsls	r3, r3, #3
 800de32:	4403      	add	r3, r0
 800de34:	440b      	add	r3, r1
 800de36:	4413      	add	r3, r2
 800de38:	781a      	ldrb	r2, [r3, #0]
 800de3a:	4b81      	ldr	r3, [pc, #516]	; (800e040 <Shortest_Run_Judge+0x270>)
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	4618      	mov	r0, r3
 800de40:	4b80      	ldr	r3, [pc, #512]	; (800e044 <Shortest_Run_Judge+0x274>)
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	461c      	mov	r4, r3
 800de46:	4981      	ldr	r1, [pc, #516]	; (800e04c <Shortest_Run_Judge+0x27c>)
 800de48:	4603      	mov	r3, r0
 800de4a:	00db      	lsls	r3, r3, #3
 800de4c:	4403      	add	r3, r0
 800de4e:	440b      	add	r3, r1
 800de50:	4423      	add	r3, r4
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	429a      	cmp	r2, r3
 800de56:	d20f      	bcs.n	800de78 <Shortest_Run_Judge+0xa8>
 800de58:	4b7a      	ldr	r3, [pc, #488]	; (800e044 <Shortest_Run_Judge+0x274>)
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	2b07      	cmp	r3, #7
 800de5e:	d80b      	bhi.n	800de78 <Shortest_Run_Judge+0xa8>
	  				  //前北
	  				  straight();
 800de60:	f7fd f8ca 	bl	800aff8 <straight>
	  				  my_direction = north;
 800de64:	4b75      	ldr	r3, [pc, #468]	; (800e03c <Shortest_Run_Judge+0x26c>)
 800de66:	2200      	movs	r2, #0
 800de68:	701a      	strb	r2, [r3, #0]
	  				  y++;
 800de6a:	4b76      	ldr	r3, [pc, #472]	; (800e044 <Shortest_Run_Judge+0x274>)
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	3301      	adds	r3, #1
 800de70:	b2da      	uxtb	r2, r3
 800de72:	4b74      	ldr	r3, [pc, #464]	; (800e044 <Shortest_Run_Judge+0x274>)
 800de74:	701a      	strb	r2, [r3, #0]
 800de76:	e09a      	b.n	800dfae <Shortest_Run_Judge+0x1de>
	  			  }
	  			  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800de78:	4b71      	ldr	r3, [pc, #452]	; (800e040 <Shortest_Run_Judge+0x270>)
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	4619      	mov	r1, r3
 800de7e:	4b71      	ldr	r3, [pc, #452]	; (800e044 <Shortest_Run_Judge+0x274>)
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	4618      	mov	r0, r3
 800de84:	4a70      	ldr	r2, [pc, #448]	; (800e048 <Shortest_Run_Judge+0x278>)
 800de86:	460b      	mov	r3, r1
 800de88:	00db      	lsls	r3, r3, #3
 800de8a:	440b      	add	r3, r1
 800de8c:	4403      	add	r3, r0
 800de8e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800de92:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800de96:	b2db      	uxtb	r3, r3
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d12b      	bne.n	800def4 <Shortest_Run_Judge+0x124>
 800de9c:	4b68      	ldr	r3, [pc, #416]	; (800e040 <Shortest_Run_Judge+0x270>)
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	1e5a      	subs	r2, r3, #1
 800dea2:	4b68      	ldr	r3, [pc, #416]	; (800e044 <Shortest_Run_Judge+0x274>)
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	4618      	mov	r0, r3
 800dea8:	4968      	ldr	r1, [pc, #416]	; (800e04c <Shortest_Run_Judge+0x27c>)
 800deaa:	4613      	mov	r3, r2
 800deac:	00db      	lsls	r3, r3, #3
 800deae:	4413      	add	r3, r2
 800deb0:	440b      	add	r3, r1
 800deb2:	4403      	add	r3, r0
 800deb4:	781a      	ldrb	r2, [r3, #0]
 800deb6:	4b62      	ldr	r3, [pc, #392]	; (800e040 <Shortest_Run_Judge+0x270>)
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	4618      	mov	r0, r3
 800debc:	4b61      	ldr	r3, [pc, #388]	; (800e044 <Shortest_Run_Judge+0x274>)
 800debe:	781b      	ldrb	r3, [r3, #0]
 800dec0:	461c      	mov	r4, r3
 800dec2:	4962      	ldr	r1, [pc, #392]	; (800e04c <Shortest_Run_Judge+0x27c>)
 800dec4:	4603      	mov	r3, r0
 800dec6:	00db      	lsls	r3, r3, #3
 800dec8:	4403      	add	r3, r0
 800deca:	440b      	add	r3, r1
 800decc:	4423      	add	r3, r4
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d20f      	bcs.n	800def4 <Shortest_Run_Judge+0x124>
 800ded4:	4b5a      	ldr	r3, [pc, #360]	; (800e040 <Shortest_Run_Judge+0x270>)
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d00b      	beq.n	800def4 <Shortest_Run_Judge+0x124>
	  				  //左西
	  				  L_turn_select();
 800dedc:	f7fd fee8 	bl	800bcb0 <L_turn_select>
	  				  my_direction = west;
 800dee0:	4b56      	ldr	r3, [pc, #344]	; (800e03c <Shortest_Run_Judge+0x26c>)
 800dee2:	2203      	movs	r2, #3
 800dee4:	701a      	strb	r2, [r3, #0]
	  			      x--;
 800dee6:	4b56      	ldr	r3, [pc, #344]	; (800e040 <Shortest_Run_Judge+0x270>)
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	3b01      	subs	r3, #1
 800deec:	b2da      	uxtb	r2, r3
 800deee:	4b54      	ldr	r3, [pc, #336]	; (800e040 <Shortest_Run_Judge+0x270>)
 800def0:	701a      	strb	r2, [r3, #0]
 800def2:	e05c      	b.n	800dfae <Shortest_Run_Judge+0x1de>
	  			  }
	  			  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800def4:	4b52      	ldr	r3, [pc, #328]	; (800e040 <Shortest_Run_Judge+0x270>)
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	4619      	mov	r1, r3
 800defa:	4b52      	ldr	r3, [pc, #328]	; (800e044 <Shortest_Run_Judge+0x274>)
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	4618      	mov	r0, r3
 800df00:	4a51      	ldr	r2, [pc, #324]	; (800e048 <Shortest_Run_Judge+0x278>)
 800df02:	460b      	mov	r3, r1
 800df04:	00db      	lsls	r3, r3, #3
 800df06:	440b      	add	r3, r1
 800df08:	4403      	add	r3, r0
 800df0a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800df0e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800df12:	b2db      	uxtb	r3, r3
 800df14:	2b00      	cmp	r3, #0
 800df16:	d12b      	bne.n	800df70 <Shortest_Run_Judge+0x1a0>
 800df18:	4b49      	ldr	r3, [pc, #292]	; (800e040 <Shortest_Run_Judge+0x270>)
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	1c5a      	adds	r2, r3, #1
 800df1e:	4b49      	ldr	r3, [pc, #292]	; (800e044 <Shortest_Run_Judge+0x274>)
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	4618      	mov	r0, r3
 800df24:	4949      	ldr	r1, [pc, #292]	; (800e04c <Shortest_Run_Judge+0x27c>)
 800df26:	4613      	mov	r3, r2
 800df28:	00db      	lsls	r3, r3, #3
 800df2a:	4413      	add	r3, r2
 800df2c:	440b      	add	r3, r1
 800df2e:	4403      	add	r3, r0
 800df30:	781a      	ldrb	r2, [r3, #0]
 800df32:	4b43      	ldr	r3, [pc, #268]	; (800e040 <Shortest_Run_Judge+0x270>)
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	4618      	mov	r0, r3
 800df38:	4b42      	ldr	r3, [pc, #264]	; (800e044 <Shortest_Run_Judge+0x274>)
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	461c      	mov	r4, r3
 800df3e:	4943      	ldr	r1, [pc, #268]	; (800e04c <Shortest_Run_Judge+0x27c>)
 800df40:	4603      	mov	r3, r0
 800df42:	00db      	lsls	r3, r3, #3
 800df44:	4403      	add	r3, r0
 800df46:	440b      	add	r3, r1
 800df48:	4423      	add	r3, r4
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d20f      	bcs.n	800df70 <Shortest_Run_Judge+0x1a0>
 800df50:	4b3b      	ldr	r3, [pc, #236]	; (800e040 <Shortest_Run_Judge+0x270>)
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	2b07      	cmp	r3, #7
 800df56:	d80b      	bhi.n	800df70 <Shortest_Run_Judge+0x1a0>
	  				  //右東
	  				  R_turn_select();
 800df58:	f7fd fe66 	bl	800bc28 <R_turn_select>
	  		          my_direction = east;
 800df5c:	4b37      	ldr	r3, [pc, #220]	; (800e03c <Shortest_Run_Judge+0x26c>)
 800df5e:	2201      	movs	r2, #1
 800df60:	701a      	strb	r2, [r3, #0]
	  		          x++;
 800df62:	4b37      	ldr	r3, [pc, #220]	; (800e040 <Shortest_Run_Judge+0x270>)
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	3301      	adds	r3, #1
 800df68:	b2da      	uxtb	r2, r3
 800df6a:	4b35      	ldr	r3, [pc, #212]	; (800e040 <Shortest_Run_Judge+0x270>)
 800df6c:	701a      	strb	r2, [r3, #0]
 800df6e:	e01e      	b.n	800dfae <Shortest_Run_Judge+0x1de>
	  			  }

	  			  else {
	  				  //後南
	  		          Decelerate();
 800df70:	f7fc ff8a 	bl	800ae88 <Decelerate>
	  		          wait(0.3);;
 800df74:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 800e030 <Shortest_Run_Judge+0x260>
 800df78:	f7fc fe56 	bl	800ac28 <wait>

	  		          if(mode.execution == 1)
 800df7c:	4b2e      	ldr	r3, [pc, #184]	; (800e038 <Shortest_Run_Judge+0x268>)
 800df7e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800df82:	2b01      	cmp	r3, #1
 800df84:	d101      	bne.n	800df8a <Shortest_Run_Judge+0x1ba>
	  		        	  Motor_PWM_Stop();
 800df86:	f7fc f8e7 	bl	800a158 <Motor_PWM_Stop>

	  		  	      rotate180();
 800df8a:	f7fd fd6b 	bl	800ba64 <rotate180>
	  		  	      wait(0.3);;
 800df8e:	ed9f 0b28 	vldr	d0, [pc, #160]	; 800e030 <Shortest_Run_Judge+0x260>
 800df92:	f7fc fe49 	bl	800ac28 <wait>
	  		       	  Accelerate();
 800df96:	f7fc fec7 	bl	800ad28 <Accelerate>
	  		       	  my_direction = south;
 800df9a:	4b28      	ldr	r3, [pc, #160]	; (800e03c <Shortest_Run_Judge+0x26c>)
 800df9c:	2202      	movs	r2, #2
 800df9e:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800dfa0:	4b28      	ldr	r3, [pc, #160]	; (800e044 <Shortest_Run_Judge+0x274>)
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	b2da      	uxtb	r2, r3
 800dfa8:	4b26      	ldr	r3, [pc, #152]	; (800e044 <Shortest_Run_Judge+0x274>)
 800dfaa:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800dfac:	e2b3      	b.n	800e516 <Shortest_Run_Judge+0x746>
 800dfae:	e2b2      	b.n	800e516 <Shortest_Run_Judge+0x746>

	  		  case east:

	  			  if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800dfb0:	4b23      	ldr	r3, [pc, #140]	; (800e040 <Shortest_Run_Judge+0x270>)
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	4b23      	ldr	r3, [pc, #140]	; (800e044 <Shortest_Run_Judge+0x274>)
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	4618      	mov	r0, r3
 800dfbc:	4a22      	ldr	r2, [pc, #136]	; (800e048 <Shortest_Run_Judge+0x278>)
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	00db      	lsls	r3, r3, #3
 800dfc2:	440b      	add	r3, r1
 800dfc4:	4403      	add	r3, r0
 800dfc6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dfca:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d13d      	bne.n	800e050 <Shortest_Run_Judge+0x280>
 800dfd4:	4b1a      	ldr	r3, [pc, #104]	; (800e040 <Shortest_Run_Judge+0x270>)
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	1c5a      	adds	r2, r3, #1
 800dfda:	4b1a      	ldr	r3, [pc, #104]	; (800e044 <Shortest_Run_Judge+0x274>)
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	4618      	mov	r0, r3
 800dfe0:	491a      	ldr	r1, [pc, #104]	; (800e04c <Shortest_Run_Judge+0x27c>)
 800dfe2:	4613      	mov	r3, r2
 800dfe4:	00db      	lsls	r3, r3, #3
 800dfe6:	4413      	add	r3, r2
 800dfe8:	440b      	add	r3, r1
 800dfea:	4403      	add	r3, r0
 800dfec:	781a      	ldrb	r2, [r3, #0]
 800dfee:	4b14      	ldr	r3, [pc, #80]	; (800e040 <Shortest_Run_Judge+0x270>)
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	4618      	mov	r0, r3
 800dff4:	4b13      	ldr	r3, [pc, #76]	; (800e044 <Shortest_Run_Judge+0x274>)
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	461c      	mov	r4, r3
 800dffa:	4914      	ldr	r1, [pc, #80]	; (800e04c <Shortest_Run_Judge+0x27c>)
 800dffc:	4603      	mov	r3, r0
 800dffe:	00db      	lsls	r3, r3, #3
 800e000:	4403      	add	r3, r0
 800e002:	440b      	add	r3, r1
 800e004:	4423      	add	r3, r4
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d221      	bcs.n	800e050 <Shortest_Run_Judge+0x280>
 800e00c:	4b0c      	ldr	r3, [pc, #48]	; (800e040 <Shortest_Run_Judge+0x270>)
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	2b07      	cmp	r3, #7
 800e012:	d81d      	bhi.n	800e050 <Shortest_Run_Judge+0x280>
	  				  //前東
	  				  straight();
 800e014:	f7fc fff0 	bl	800aff8 <straight>
	  		       	  my_direction = east;
 800e018:	4b08      	ldr	r3, [pc, #32]	; (800e03c <Shortest_Run_Judge+0x26c>)
 800e01a:	2201      	movs	r2, #1
 800e01c:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800e01e:	4b08      	ldr	r3, [pc, #32]	; (800e040 <Shortest_Run_Judge+0x270>)
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	3301      	adds	r3, #1
 800e024:	b2da      	uxtb	r2, r3
 800e026:	4b06      	ldr	r3, [pc, #24]	; (800e040 <Shortest_Run_Judge+0x270>)
 800e028:	701a      	strb	r2, [r3, #0]
 800e02a:	e0ac      	b.n	800e186 <Shortest_Run_Judge+0x3b6>
 800e02c:	f3af 8000 	nop.w
 800e030:	33333333 	.word	0x33333333
 800e034:	3fd33333 	.word	0x3fd33333
 800e038:	20000068 	.word	0x20000068
 800e03c:	2001848a 	.word	0x2001848a
 800e040:	200142fc 	.word	0x200142fc
 800e044:	200142fd 	.word	0x200142fd
 800e048:	20018efc 	.word	0x20018efc
 800e04c:	20018a54 	.word	0x20018a54
	  			  }
	  			  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800e050:	4bad      	ldr	r3, [pc, #692]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	4619      	mov	r1, r3
 800e056:	4bad      	ldr	r3, [pc, #692]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	4618      	mov	r0, r3
 800e05c:	4aac      	ldr	r2, [pc, #688]	; (800e310 <Shortest_Run_Judge+0x540>)
 800e05e:	460b      	mov	r3, r1
 800e060:	00db      	lsls	r3, r3, #3
 800e062:	440b      	add	r3, r1
 800e064:	4403      	add	r3, r0
 800e066:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e06a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	2b00      	cmp	r3, #0
 800e072:	d12b      	bne.n	800e0cc <Shortest_Run_Judge+0x2fc>
 800e074:	4ba4      	ldr	r3, [pc, #656]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	4618      	mov	r0, r3
 800e07a:	4ba4      	ldr	r3, [pc, #656]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	1c5a      	adds	r2, r3, #1
 800e080:	49a4      	ldr	r1, [pc, #656]	; (800e314 <Shortest_Run_Judge+0x544>)
 800e082:	4603      	mov	r3, r0
 800e084:	00db      	lsls	r3, r3, #3
 800e086:	4403      	add	r3, r0
 800e088:	440b      	add	r3, r1
 800e08a:	4413      	add	r3, r2
 800e08c:	781a      	ldrb	r2, [r3, #0]
 800e08e:	4b9e      	ldr	r3, [pc, #632]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	4618      	mov	r0, r3
 800e094:	4b9d      	ldr	r3, [pc, #628]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	461c      	mov	r4, r3
 800e09a:	499e      	ldr	r1, [pc, #632]	; (800e314 <Shortest_Run_Judge+0x544>)
 800e09c:	4603      	mov	r3, r0
 800e09e:	00db      	lsls	r3, r3, #3
 800e0a0:	4403      	add	r3, r0
 800e0a2:	440b      	add	r3, r1
 800e0a4:	4423      	add	r3, r4
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d20f      	bcs.n	800e0cc <Shortest_Run_Judge+0x2fc>
 800e0ac:	4b97      	ldr	r3, [pc, #604]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	2b07      	cmp	r3, #7
 800e0b2:	d80b      	bhi.n	800e0cc <Shortest_Run_Judge+0x2fc>
	  				  //左?��?
	  				  L_turn_select();
 800e0b4:	f7fd fdfc 	bl	800bcb0 <L_turn_select>
	  		       	  my_direction = north;
 800e0b8:	4b97      	ldr	r3, [pc, #604]	; (800e318 <Shortest_Run_Judge+0x548>)
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800e0be:	4b93      	ldr	r3, [pc, #588]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	b2da      	uxtb	r2, r3
 800e0c6:	4b91      	ldr	r3, [pc, #580]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e0c8:	701a      	strb	r2, [r3, #0]
 800e0ca:	e05c      	b.n	800e186 <Shortest_Run_Judge+0x3b6>
	  			  }
	  			  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e0cc:	4b8e      	ldr	r3, [pc, #568]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	4b8e      	ldr	r3, [pc, #568]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	4a8d      	ldr	r2, [pc, #564]	; (800e310 <Shortest_Run_Judge+0x540>)
 800e0da:	460b      	mov	r3, r1
 800e0dc:	00db      	lsls	r3, r3, #3
 800e0de:	440b      	add	r3, r1
 800e0e0:	4403      	add	r3, r0
 800e0e2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e0e6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d12b      	bne.n	800e148 <Shortest_Run_Judge+0x378>
 800e0f0:	4b85      	ldr	r3, [pc, #532]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	4b85      	ldr	r3, [pc, #532]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	1e5a      	subs	r2, r3, #1
 800e0fc:	4985      	ldr	r1, [pc, #532]	; (800e314 <Shortest_Run_Judge+0x544>)
 800e0fe:	4603      	mov	r3, r0
 800e100:	00db      	lsls	r3, r3, #3
 800e102:	4403      	add	r3, r0
 800e104:	440b      	add	r3, r1
 800e106:	4413      	add	r3, r2
 800e108:	781a      	ldrb	r2, [r3, #0]
 800e10a:	4b7f      	ldr	r3, [pc, #508]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	4618      	mov	r0, r3
 800e110:	4b7e      	ldr	r3, [pc, #504]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	461c      	mov	r4, r3
 800e116:	497f      	ldr	r1, [pc, #508]	; (800e314 <Shortest_Run_Judge+0x544>)
 800e118:	4603      	mov	r3, r0
 800e11a:	00db      	lsls	r3, r3, #3
 800e11c:	4403      	add	r3, r0
 800e11e:	440b      	add	r3, r1
 800e120:	4423      	add	r3, r4
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	429a      	cmp	r2, r3
 800e126:	d20f      	bcs.n	800e148 <Shortest_Run_Judge+0x378>
 800e128:	4b78      	ldr	r3, [pc, #480]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d00b      	beq.n	800e148 <Shortest_Run_Judge+0x378>
	  				  //右?��?
	  				  R_turn_select();
 800e130:	f7fd fd7a 	bl	800bc28 <R_turn_select>
	  		       	  my_direction = south;
 800e134:	4b78      	ldr	r3, [pc, #480]	; (800e318 <Shortest_Run_Judge+0x548>)
 800e136:	2202      	movs	r2, #2
 800e138:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800e13a:	4b74      	ldr	r3, [pc, #464]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	3b01      	subs	r3, #1
 800e140:	b2da      	uxtb	r2, r3
 800e142:	4b72      	ldr	r3, [pc, #456]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e144:	701a      	strb	r2, [r3, #0]
 800e146:	e01e      	b.n	800e186 <Shortest_Run_Judge+0x3b6>
	  			  }
	  			  else {
	  				  //後西
	  		          Decelerate();
 800e148:	f7fc fe9e 	bl	800ae88 <Decelerate>
	  		          wait(0.3);;
 800e14c:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 800e300 <Shortest_Run_Judge+0x530>
 800e150:	f7fc fd6a 	bl	800ac28 <wait>

	  		          if(mode.execution == 1)
 800e154:	4b71      	ldr	r3, [pc, #452]	; (800e31c <Shortest_Run_Judge+0x54c>)
 800e156:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d101      	bne.n	800e162 <Shortest_Run_Judge+0x392>
	  		        	  Motor_PWM_Stop();
 800e15e:	f7fb fffb 	bl	800a158 <Motor_PWM_Stop>

	  		  	      rotate180();
 800e162:	f7fd fc7f 	bl	800ba64 <rotate180>
	  		  	      wait(0.3);;
 800e166:	ed9f 0b66 	vldr	d0, [pc, #408]	; 800e300 <Shortest_Run_Judge+0x530>
 800e16a:	f7fc fd5d 	bl	800ac28 <wait>
	  		       	  Accelerate();
 800e16e:	f7fc fddb 	bl	800ad28 <Accelerate>

	  		       	  my_direction = west;
 800e172:	4b69      	ldr	r3, [pc, #420]	; (800e318 <Shortest_Run_Judge+0x548>)
 800e174:	2203      	movs	r2, #3
 800e176:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800e178:	4b63      	ldr	r3, [pc, #396]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	3b01      	subs	r3, #1
 800e17e:	b2da      	uxtb	r2, r3
 800e180:	4b61      	ldr	r3, [pc, #388]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e182:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800e184:	e1c7      	b.n	800e516 <Shortest_Run_Judge+0x746>
 800e186:	e1c6      	b.n	800e516 <Shortest_Run_Judge+0x746>

	  		  case south:

	  			  if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e188:	4b5f      	ldr	r3, [pc, #380]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	4619      	mov	r1, r3
 800e18e:	4b5f      	ldr	r3, [pc, #380]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	4618      	mov	r0, r3
 800e194:	4a5e      	ldr	r2, [pc, #376]	; (800e310 <Shortest_Run_Judge+0x540>)
 800e196:	460b      	mov	r3, r1
 800e198:	00db      	lsls	r3, r3, #3
 800e19a:	440b      	add	r3, r1
 800e19c:	4403      	add	r3, r0
 800e19e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e1a2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d12b      	bne.n	800e204 <Shortest_Run_Judge+0x434>
 800e1ac:	4b56      	ldr	r3, [pc, #344]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	4b56      	ldr	r3, [pc, #344]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	1e5a      	subs	r2, r3, #1
 800e1b8:	4956      	ldr	r1, [pc, #344]	; (800e314 <Shortest_Run_Judge+0x544>)
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	00db      	lsls	r3, r3, #3
 800e1be:	4403      	add	r3, r0
 800e1c0:	440b      	add	r3, r1
 800e1c2:	4413      	add	r3, r2
 800e1c4:	781a      	ldrb	r2, [r3, #0]
 800e1c6:	4b50      	ldr	r3, [pc, #320]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	4b4f      	ldr	r3, [pc, #316]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	461c      	mov	r4, r3
 800e1d2:	4950      	ldr	r1, [pc, #320]	; (800e314 <Shortest_Run_Judge+0x544>)
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	00db      	lsls	r3, r3, #3
 800e1d8:	4403      	add	r3, r0
 800e1da:	440b      	add	r3, r1
 800e1dc:	4423      	add	r3, r4
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d20f      	bcs.n	800e204 <Shortest_Run_Judge+0x434>
 800e1e4:	4b49      	ldr	r3, [pc, #292]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d00b      	beq.n	800e204 <Shortest_Run_Judge+0x434>
	  				  //前南
	  				  straight();
 800e1ec:	f7fc ff04 	bl	800aff8 <straight>
	  		       	  my_direction = south;
 800e1f0:	4b49      	ldr	r3, [pc, #292]	; (800e318 <Shortest_Run_Judge+0x548>)
 800e1f2:	2202      	movs	r2, #2
 800e1f4:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800e1f6:	4b45      	ldr	r3, [pc, #276]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	b2da      	uxtb	r2, r3
 800e1fe:	4b43      	ldr	r3, [pc, #268]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e200:	701a      	strb	r2, [r3, #0]
 800e202:	e0ac      	b.n	800e35e <Shortest_Run_Judge+0x58e>
	  			  }
	  			  else if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800e204:	4b40      	ldr	r3, [pc, #256]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	4619      	mov	r1, r3
 800e20a:	4b40      	ldr	r3, [pc, #256]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	4618      	mov	r0, r3
 800e210:	4a3f      	ldr	r2, [pc, #252]	; (800e310 <Shortest_Run_Judge+0x540>)
 800e212:	460b      	mov	r3, r1
 800e214:	00db      	lsls	r3, r3, #3
 800e216:	440b      	add	r3, r1
 800e218:	4403      	add	r3, r0
 800e21a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e21e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e222:	b2db      	uxtb	r3, r3
 800e224:	2b00      	cmp	r3, #0
 800e226:	d12b      	bne.n	800e280 <Shortest_Run_Judge+0x4b0>
 800e228:	4b37      	ldr	r3, [pc, #220]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	1c5a      	adds	r2, r3, #1
 800e22e:	4b37      	ldr	r3, [pc, #220]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	4618      	mov	r0, r3
 800e234:	4937      	ldr	r1, [pc, #220]	; (800e314 <Shortest_Run_Judge+0x544>)
 800e236:	4613      	mov	r3, r2
 800e238:	00db      	lsls	r3, r3, #3
 800e23a:	4413      	add	r3, r2
 800e23c:	440b      	add	r3, r1
 800e23e:	4403      	add	r3, r0
 800e240:	781a      	ldrb	r2, [r3, #0]
 800e242:	4b31      	ldr	r3, [pc, #196]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	4618      	mov	r0, r3
 800e248:	4b30      	ldr	r3, [pc, #192]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	461c      	mov	r4, r3
 800e24e:	4931      	ldr	r1, [pc, #196]	; (800e314 <Shortest_Run_Judge+0x544>)
 800e250:	4603      	mov	r3, r0
 800e252:	00db      	lsls	r3, r3, #3
 800e254:	4403      	add	r3, r0
 800e256:	440b      	add	r3, r1
 800e258:	4423      	add	r3, r4
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d20f      	bcs.n	800e280 <Shortest_Run_Judge+0x4b0>
 800e260:	4b29      	ldr	r3, [pc, #164]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	2b07      	cmp	r3, #7
 800e266:	d80b      	bhi.n	800e280 <Shortest_Run_Judge+0x4b0>
	  				  //左東
	  				  L_turn_select();
 800e268:	f7fd fd22 	bl	800bcb0 <L_turn_select>
	  		       	  my_direction = east;
 800e26c:	4b2a      	ldr	r3, [pc, #168]	; (800e318 <Shortest_Run_Judge+0x548>)
 800e26e:	2201      	movs	r2, #1
 800e270:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800e272:	4b25      	ldr	r3, [pc, #148]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	3301      	adds	r3, #1
 800e278:	b2da      	uxtb	r2, r3
 800e27a:	4b23      	ldr	r3, [pc, #140]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e27c:	701a      	strb	r2, [r3, #0]
 800e27e:	e06e      	b.n	800e35e <Shortest_Run_Judge+0x58e>
	  			  }
	  			  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e280:	4b21      	ldr	r3, [pc, #132]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e282:	781b      	ldrb	r3, [r3, #0]
 800e284:	4619      	mov	r1, r3
 800e286:	4b21      	ldr	r3, [pc, #132]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	4618      	mov	r0, r3
 800e28c:	4a20      	ldr	r2, [pc, #128]	; (800e310 <Shortest_Run_Judge+0x540>)
 800e28e:	460b      	mov	r3, r1
 800e290:	00db      	lsls	r3, r3, #3
 800e292:	440b      	add	r3, r1
 800e294:	4403      	add	r3, r0
 800e296:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e29a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d13d      	bne.n	800e320 <Shortest_Run_Judge+0x550>
 800e2a4:	4b18      	ldr	r3, [pc, #96]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	1e5a      	subs	r2, r3, #1
 800e2aa:	4b18      	ldr	r3, [pc, #96]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	4918      	ldr	r1, [pc, #96]	; (800e314 <Shortest_Run_Judge+0x544>)
 800e2b2:	4613      	mov	r3, r2
 800e2b4:	00db      	lsls	r3, r3, #3
 800e2b6:	4413      	add	r3, r2
 800e2b8:	440b      	add	r3, r1
 800e2ba:	4403      	add	r3, r0
 800e2bc:	781a      	ldrb	r2, [r3, #0]
 800e2be:	4b12      	ldr	r3, [pc, #72]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	4b11      	ldr	r3, [pc, #68]	; (800e30c <Shortest_Run_Judge+0x53c>)
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	461c      	mov	r4, r3
 800e2ca:	4912      	ldr	r1, [pc, #72]	; (800e314 <Shortest_Run_Judge+0x544>)
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	00db      	lsls	r3, r3, #3
 800e2d0:	4403      	add	r3, r0
 800e2d2:	440b      	add	r3, r1
 800e2d4:	4423      	add	r3, r4
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d221      	bcs.n	800e320 <Shortest_Run_Judge+0x550>
 800e2dc:	4b0a      	ldr	r3, [pc, #40]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d01d      	beq.n	800e320 <Shortest_Run_Judge+0x550>
	  				  //右西
	  				  R_turn_select();
 800e2e4:	f7fd fca0 	bl	800bc28 <R_turn_select>
	  		       	  my_direction = west;
 800e2e8:	4b0b      	ldr	r3, [pc, #44]	; (800e318 <Shortest_Run_Judge+0x548>)
 800e2ea:	2203      	movs	r2, #3
 800e2ec:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800e2ee:	4b06      	ldr	r3, [pc, #24]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	3b01      	subs	r3, #1
 800e2f4:	b2da      	uxtb	r2, r3
 800e2f6:	4b04      	ldr	r3, [pc, #16]	; (800e308 <Shortest_Run_Judge+0x538>)
 800e2f8:	701a      	strb	r2, [r3, #0]
 800e2fa:	e030      	b.n	800e35e <Shortest_Run_Judge+0x58e>
 800e2fc:	f3af 8000 	nop.w
 800e300:	33333333 	.word	0x33333333
 800e304:	3fd33333 	.word	0x3fd33333
 800e308:	200142fc 	.word	0x200142fc
 800e30c:	200142fd 	.word	0x200142fd
 800e310:	20018efc 	.word	0x20018efc
 800e314:	20018a54 	.word	0x20018a54
 800e318:	2001848a 	.word	0x2001848a
 800e31c:	20000068 	.word	0x20000068
	  			  }
	  			  else {
	  				  //後北
	  		          Decelerate();
 800e320:	f7fc fdb2 	bl	800ae88 <Decelerate>
	  		          wait(0.3);;
 800e324:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 800e520 <Shortest_Run_Judge+0x750>
 800e328:	f7fc fc7e 	bl	800ac28 <wait>

	  		          if(mode.execution == 1)
 800e32c:	4b7e      	ldr	r3, [pc, #504]	; (800e528 <Shortest_Run_Judge+0x758>)
 800e32e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e332:	2b01      	cmp	r3, #1
 800e334:	d101      	bne.n	800e33a <Shortest_Run_Judge+0x56a>
	  		        	  Motor_PWM_Stop();
 800e336:	f7fb ff0f 	bl	800a158 <Motor_PWM_Stop>

	  		  	      rotate180();
 800e33a:	f7fd fb93 	bl	800ba64 <rotate180>
	  		  	      wait(0.3);;
 800e33e:	ed9f 0b78 	vldr	d0, [pc, #480]	; 800e520 <Shortest_Run_Judge+0x750>
 800e342:	f7fc fc71 	bl	800ac28 <wait>
	  		       	  Accelerate();
 800e346:	f7fc fcef 	bl	800ad28 <Accelerate>

	  		       	  my_direction = north;
 800e34a:	4b78      	ldr	r3, [pc, #480]	; (800e52c <Shortest_Run_Judge+0x75c>)
 800e34c:	2200      	movs	r2, #0
 800e34e:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800e350:	4b77      	ldr	r3, [pc, #476]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	3301      	adds	r3, #1
 800e356:	b2da      	uxtb	r2, r3
 800e358:	4b75      	ldr	r3, [pc, #468]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e35a:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800e35c:	e0db      	b.n	800e516 <Shortest_Run_Judge+0x746>
 800e35e:	e0da      	b.n	800e516 <Shortest_Run_Judge+0x746>

	  		  case west:

	  			  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e360:	4b74      	ldr	r3, [pc, #464]	; (800e534 <Shortest_Run_Judge+0x764>)
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	4619      	mov	r1, r3
 800e366:	4b72      	ldr	r3, [pc, #456]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	4618      	mov	r0, r3
 800e36c:	4a72      	ldr	r2, [pc, #456]	; (800e538 <Shortest_Run_Judge+0x768>)
 800e36e:	460b      	mov	r3, r1
 800e370:	00db      	lsls	r3, r3, #3
 800e372:	440b      	add	r3, r1
 800e374:	4403      	add	r3, r0
 800e376:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e37a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	2b00      	cmp	r3, #0
 800e382:	d12b      	bne.n	800e3dc <Shortest_Run_Judge+0x60c>
 800e384:	4b6b      	ldr	r3, [pc, #428]	; (800e534 <Shortest_Run_Judge+0x764>)
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	1e5a      	subs	r2, r3, #1
 800e38a:	4b69      	ldr	r3, [pc, #420]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	4618      	mov	r0, r3
 800e390:	496a      	ldr	r1, [pc, #424]	; (800e53c <Shortest_Run_Judge+0x76c>)
 800e392:	4613      	mov	r3, r2
 800e394:	00db      	lsls	r3, r3, #3
 800e396:	4413      	add	r3, r2
 800e398:	440b      	add	r3, r1
 800e39a:	4403      	add	r3, r0
 800e39c:	781a      	ldrb	r2, [r3, #0]
 800e39e:	4b65      	ldr	r3, [pc, #404]	; (800e534 <Shortest_Run_Judge+0x764>)
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	4b62      	ldr	r3, [pc, #392]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	461c      	mov	r4, r3
 800e3aa:	4964      	ldr	r1, [pc, #400]	; (800e53c <Shortest_Run_Judge+0x76c>)
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	00db      	lsls	r3, r3, #3
 800e3b0:	4403      	add	r3, r0
 800e3b2:	440b      	add	r3, r1
 800e3b4:	4423      	add	r3, r4
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d20f      	bcs.n	800e3dc <Shortest_Run_Judge+0x60c>
 800e3bc:	4b5d      	ldr	r3, [pc, #372]	; (800e534 <Shortest_Run_Judge+0x764>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d00b      	beq.n	800e3dc <Shortest_Run_Judge+0x60c>
	  				  //前西
	  				  straight();
 800e3c4:	f7fc fe18 	bl	800aff8 <straight>
	  		       	  my_direction = west;
 800e3c8:	4b58      	ldr	r3, [pc, #352]	; (800e52c <Shortest_Run_Judge+0x75c>)
 800e3ca:	2203      	movs	r2, #3
 800e3cc:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800e3ce:	4b59      	ldr	r3, [pc, #356]	; (800e534 <Shortest_Run_Judge+0x764>)
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	3b01      	subs	r3, #1
 800e3d4:	b2da      	uxtb	r2, r3
 800e3d6:	4b57      	ldr	r3, [pc, #348]	; (800e534 <Shortest_Run_Judge+0x764>)
 800e3d8:	701a      	strb	r2, [r3, #0]
 800e3da:	e09a      	b.n	800e512 <Shortest_Run_Judge+0x742>
	  			  }
	  			  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e3dc:	4b55      	ldr	r3, [pc, #340]	; (800e534 <Shortest_Run_Judge+0x764>)
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	4b53      	ldr	r3, [pc, #332]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	4a53      	ldr	r2, [pc, #332]	; (800e538 <Shortest_Run_Judge+0x768>)
 800e3ea:	460b      	mov	r3, r1
 800e3ec:	00db      	lsls	r3, r3, #3
 800e3ee:	440b      	add	r3, r1
 800e3f0:	4403      	add	r3, r0
 800e3f2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e3f6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d12b      	bne.n	800e458 <Shortest_Run_Judge+0x688>
 800e400:	4b4c      	ldr	r3, [pc, #304]	; (800e534 <Shortest_Run_Judge+0x764>)
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	4618      	mov	r0, r3
 800e406:	4b4a      	ldr	r3, [pc, #296]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	1e5a      	subs	r2, r3, #1
 800e40c:	494b      	ldr	r1, [pc, #300]	; (800e53c <Shortest_Run_Judge+0x76c>)
 800e40e:	4603      	mov	r3, r0
 800e410:	00db      	lsls	r3, r3, #3
 800e412:	4403      	add	r3, r0
 800e414:	440b      	add	r3, r1
 800e416:	4413      	add	r3, r2
 800e418:	781a      	ldrb	r2, [r3, #0]
 800e41a:	4b46      	ldr	r3, [pc, #280]	; (800e534 <Shortest_Run_Judge+0x764>)
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	4618      	mov	r0, r3
 800e420:	4b43      	ldr	r3, [pc, #268]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	461c      	mov	r4, r3
 800e426:	4945      	ldr	r1, [pc, #276]	; (800e53c <Shortest_Run_Judge+0x76c>)
 800e428:	4603      	mov	r3, r0
 800e42a:	00db      	lsls	r3, r3, #3
 800e42c:	4403      	add	r3, r0
 800e42e:	440b      	add	r3, r1
 800e430:	4423      	add	r3, r4
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	429a      	cmp	r2, r3
 800e436:	d20f      	bcs.n	800e458 <Shortest_Run_Judge+0x688>
 800e438:	4b3d      	ldr	r3, [pc, #244]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e43a:	781b      	ldrb	r3, [r3, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00b      	beq.n	800e458 <Shortest_Run_Judge+0x688>
	  				  //左?��?
	  				  L_turn_select();
 800e440:	f7fd fc36 	bl	800bcb0 <L_turn_select>
	  		       	  my_direction = south;
 800e444:	4b39      	ldr	r3, [pc, #228]	; (800e52c <Shortest_Run_Judge+0x75c>)
 800e446:	2202      	movs	r2, #2
 800e448:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800e44a:	4b39      	ldr	r3, [pc, #228]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	3b01      	subs	r3, #1
 800e450:	b2da      	uxtb	r2, r3
 800e452:	4b37      	ldr	r3, [pc, #220]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e454:	701a      	strb	r2, [r3, #0]
 800e456:	e05c      	b.n	800e512 <Shortest_Run_Judge+0x742>
	  			  }
	  			  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800e458:	4b36      	ldr	r3, [pc, #216]	; (800e534 <Shortest_Run_Judge+0x764>)
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	4619      	mov	r1, r3
 800e45e:	4b34      	ldr	r3, [pc, #208]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	4618      	mov	r0, r3
 800e464:	4a34      	ldr	r2, [pc, #208]	; (800e538 <Shortest_Run_Judge+0x768>)
 800e466:	460b      	mov	r3, r1
 800e468:	00db      	lsls	r3, r3, #3
 800e46a:	440b      	add	r3, r1
 800e46c:	4403      	add	r3, r0
 800e46e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e472:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e476:	b2db      	uxtb	r3, r3
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d12b      	bne.n	800e4d4 <Shortest_Run_Judge+0x704>
 800e47c:	4b2d      	ldr	r3, [pc, #180]	; (800e534 <Shortest_Run_Judge+0x764>)
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	4618      	mov	r0, r3
 800e482:	4b2b      	ldr	r3, [pc, #172]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	1c5a      	adds	r2, r3, #1
 800e488:	492c      	ldr	r1, [pc, #176]	; (800e53c <Shortest_Run_Judge+0x76c>)
 800e48a:	4603      	mov	r3, r0
 800e48c:	00db      	lsls	r3, r3, #3
 800e48e:	4403      	add	r3, r0
 800e490:	440b      	add	r3, r1
 800e492:	4413      	add	r3, r2
 800e494:	781a      	ldrb	r2, [r3, #0]
 800e496:	4b27      	ldr	r3, [pc, #156]	; (800e534 <Shortest_Run_Judge+0x764>)
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	4618      	mov	r0, r3
 800e49c:	4b24      	ldr	r3, [pc, #144]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	461c      	mov	r4, r3
 800e4a2:	4926      	ldr	r1, [pc, #152]	; (800e53c <Shortest_Run_Judge+0x76c>)
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	00db      	lsls	r3, r3, #3
 800e4a8:	4403      	add	r3, r0
 800e4aa:	440b      	add	r3, r1
 800e4ac:	4423      	add	r3, r4
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d20f      	bcs.n	800e4d4 <Shortest_Run_Judge+0x704>
 800e4b4:	4b1e      	ldr	r3, [pc, #120]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	2b07      	cmp	r3, #7
 800e4ba:	d80b      	bhi.n	800e4d4 <Shortest_Run_Judge+0x704>
	  				  //右?��?
	  				  R_turn_select();
 800e4bc:	f7fd fbb4 	bl	800bc28 <R_turn_select>
	  		       	  my_direction = north;
 800e4c0:	4b1a      	ldr	r3, [pc, #104]	; (800e52c <Shortest_Run_Judge+0x75c>)
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800e4c6:	4b1a      	ldr	r3, [pc, #104]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	b2da      	uxtb	r2, r3
 800e4ce:	4b18      	ldr	r3, [pc, #96]	; (800e530 <Shortest_Run_Judge+0x760>)
 800e4d0:	701a      	strb	r2, [r3, #0]
 800e4d2:	e01e      	b.n	800e512 <Shortest_Run_Judge+0x742>
	  			  }
	  			  else {
	  				  //後東
	  		          Decelerate();
 800e4d4:	f7fc fcd8 	bl	800ae88 <Decelerate>
	  		          wait(0.3);;
 800e4d8:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800e520 <Shortest_Run_Judge+0x750>
 800e4dc:	f7fc fba4 	bl	800ac28 <wait>

	  		          if(mode.execution == 1)
 800e4e0:	4b11      	ldr	r3, [pc, #68]	; (800e528 <Shortest_Run_Judge+0x758>)
 800e4e2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d101      	bne.n	800e4ee <Shortest_Run_Judge+0x71e>
	  		        	  Motor_PWM_Stop();
 800e4ea:	f7fb fe35 	bl	800a158 <Motor_PWM_Stop>

	  		  	      rotate180();
 800e4ee:	f7fd fab9 	bl	800ba64 <rotate180>
	  		  	      wait(0.3);;
 800e4f2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800e520 <Shortest_Run_Judge+0x750>
 800e4f6:	f7fc fb97 	bl	800ac28 <wait>
	  		       	  Accelerate();
 800e4fa:	f7fc fc15 	bl	800ad28 <Accelerate>

	  		       	  my_direction = east;
 800e4fe:	4b0b      	ldr	r3, [pc, #44]	; (800e52c <Shortest_Run_Judge+0x75c>)
 800e500:	2201      	movs	r2, #1
 800e502:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800e504:	4b0b      	ldr	r3, [pc, #44]	; (800e534 <Shortest_Run_Judge+0x764>)
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	3301      	adds	r3, #1
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	4b09      	ldr	r3, [pc, #36]	; (800e534 <Shortest_Run_Judge+0x764>)
 800e50e:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800e510:	e001      	b.n	800e516 <Shortest_Run_Judge+0x746>
 800e512:	e000      	b.n	800e516 <Shortest_Run_Judge+0x746>

	  		  default:
	  			  break;
 800e514:	bf00      	nop
	  		  }//swtich end
}
 800e516:	bf00      	nop
 800e518:	bd98      	pop	{r3, r4, r7, pc}
 800e51a:	bf00      	nop
 800e51c:	f3af 8000 	nop.w
 800e520:	33333333 	.word	0x33333333
 800e524:	3fd33333 	.word	0x3fd33333
 800e528:	20000068 	.word	0x20000068
 800e52c:	2001848a 	.word	0x2001848a
 800e530:	200142fd 	.word	0x200142fd
 800e534:	200142fc 	.word	0x200142fc
 800e538:	20018efc 	.word	0x20018efc
 800e53c:	20018a54 	.word	0x20018a54

0800e540 <Shortest_Run>:
void Shortest_Run(){
 800e540:	b598      	push	{r3, r4, r7, lr}
 800e542:	af00      	add	r7, sp, #0

	//ROMの迷路?��?ータをRAMに入れる
	Map_Load();
 800e544:	f7ff fb0a 	bl	800db5c <Map_Load>

	//座標�??��初期?��?
	x = y = 0;
 800e548:	4b35      	ldr	r3, [pc, #212]	; (800e620 <Shortest_Run+0xe0>)
 800e54a:	2200      	movs	r2, #0
 800e54c:	701a      	strb	r2, [r3, #0]
 800e54e:	4b34      	ldr	r3, [pc, #208]	; (800e620 <Shortest_Run+0xe0>)
 800e550:	781a      	ldrb	r2, [r3, #0]
 800e552:	4b34      	ldr	r3, [pc, #208]	; (800e624 <Shortest_Run+0xe4>)
 800e554:	701a      	strb	r2, [r3, #0]
	//方向�??��初期?��?
	my_direction=north;
 800e556:	4b34      	ldr	r3, [pc, #208]	; (800e628 <Shortest_Run+0xe8>)
 800e558:	2200      	movs	r2, #0
 800e55a:	701a      	strb	r2, [r3, #0]

	//?��?初�??��直進
	Start_Accel();
 800e55c:	f7fc fb8c 	bl	800ac78 <Start_Accel>

	x = 0;
 800e560:	4b30      	ldr	r3, [pc, #192]	; (800e624 <Shortest_Run+0xe4>)
 800e562:	2200      	movs	r2, #0
 800e564:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800e566:	4b2e      	ldr	r3, [pc, #184]	; (800e620 <Shortest_Run+0xe0>)
 800e568:	781b      	ldrb	r3, [r3, #0]
 800e56a:	3301      	adds	r3, #1
 800e56c:	b2da      	uxtb	r2, r3
 800e56e:	4b2c      	ldr	r3, [pc, #176]	; (800e620 <Shortest_Run+0xe0>)
 800e570:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800e572:	e001      	b.n	800e578 <Shortest_Run+0x38>
		Shortest_Run_Judge();
 800e574:	f7ff fc2c 	bl	800ddd0 <Shortest_Run_Judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800e578:	4b2a      	ldr	r3, [pc, #168]	; (800e624 <Shortest_Run+0xe4>)
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	2b06      	cmp	r3, #6
 800e57e:	d9f9      	bls.n	800e574 <Shortest_Run+0x34>
 800e580:	4b28      	ldr	r3, [pc, #160]	; (800e624 <Shortest_Run+0xe4>)
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	2b07      	cmp	r3, #7
 800e586:	d8f5      	bhi.n	800e574 <Shortest_Run+0x34>
 800e588:	4b25      	ldr	r3, [pc, #148]	; (800e620 <Shortest_Run+0xe0>)
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	2b06      	cmp	r3, #6
 800e58e:	d9f1      	bls.n	800e574 <Shortest_Run+0x34>
 800e590:	4b23      	ldr	r3, [pc, #140]	; (800e620 <Shortest_Run+0xe0>)
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	2b07      	cmp	r3, #7
 800e596:	d8ed      	bhi.n	800e574 <Shortest_Run+0x34>

	}
	goal_time[0] = timer*T1;
 800e598:	4b24      	ldr	r3, [pc, #144]	; (800e62c <Shortest_Run+0xec>)
 800e59a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e59e:	a31e      	add	r3, pc, #120	; (adr r3, 800e618 <Shortest_Run+0xd8>)
 800e5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a4:	f7f9 ff60 	bl	8008468 <__aeabi_dmul>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	460c      	mov	r4, r1
 800e5ac:	4a20      	ldr	r2, [pc, #128]	; (800e630 <Shortest_Run+0xf0>)
 800e5ae:	e9c2 3400 	strd	r3, r4, [r2]
	goal_time[1] = self_timer;
 800e5b2:	4b20      	ldr	r3, [pc, #128]	; (800e634 <Shortest_Run+0xf4>)
 800e5b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e5b8:	4a1d      	ldr	r2, [pc, #116]	; (800e630 <Shortest_Run+0xf0>)
 800e5ba:	e9c2 3402 	strd	r3, r4, [r2, #8]
	      Decelerate();
 800e5be:	f7fc fc63 	bl	800ae88 <Decelerate>
	      //wall_set();
	      Motor_PWM_Stop();
 800e5c2:	f7fb fdc9 	bl	800a158 <Motor_PWM_Stop>
	      mode.LED = 7;
 800e5c6:	4b1c      	ldr	r3, [pc, #112]	; (800e638 <Shortest_Run+0xf8>)
 800e5c8:	2207      	movs	r2, #7
 800e5ca:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800e5cc:	f7fc f866 	bl	800a69c <LED_Change>
	      HAL_Delay(1000);
 800e5d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e5d4:	f002 f96a 	bl	80108ac <HAL_Delay>
	      mapcopy();
 800e5d8:	f7fb fb6a 	bl	8009cb0 <mapcopy>
	      Flash_store();
 800e5dc:	f7fb fcf8 	bl	8009fd0 <Flash_store>
	      mode.LED = 0;
 800e5e0:	4b15      	ldr	r3, [pc, #84]	; (800e638 <Shortest_Run+0xf8>)
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800e5e6:	f7fc f859 	bl	800a69c <LED_Change>
	      while(1){
	    	  printf("小数のほ�? : %lf \r\n",goal_time[0]);
 800e5ea:	4b11      	ldr	r3, [pc, #68]	; (800e630 <Shortest_Run+0xf0>)
 800e5ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	4623      	mov	r3, r4
 800e5f4:	4811      	ldr	r0, [pc, #68]	; (800e63c <Shortest_Run+0xfc>)
 800e5f6:	f007 ffe3 	bl	80165c0 <iprintf>
	    	  printf("整数のほ�? : %lf \r\n",goal_time[1]);
 800e5fa:	4b0d      	ldr	r3, [pc, #52]	; (800e630 <Shortest_Run+0xf0>)
 800e5fc:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800e600:	461a      	mov	r2, r3
 800e602:	4623      	mov	r3, r4
 800e604:	480e      	ldr	r0, [pc, #56]	; (800e640 <Shortest_Run+0x100>)
 800e606:	f007 ffdb 	bl	80165c0 <iprintf>
	    	  printf("\r\n");
 800e60a:	480e      	ldr	r0, [pc, #56]	; (800e644 <Shortest_Run+0x104>)
 800e60c:	f008 f84c 	bl	80166a8 <puts>
	    	  printf("小数のほ�? : %lf \r\n",goal_time[0]);
 800e610:	e7eb      	b.n	800e5ea <Shortest_Run+0xaa>
 800e612:	bf00      	nop
 800e614:	f3af 8000 	nop.w
 800e618:	d2f1a9fc 	.word	0xd2f1a9fc
 800e61c:	3f50624d 	.word	0x3f50624d
 800e620:	200142fd 	.word	0x200142fd
 800e624:	200142fc 	.word	0x200142fc
 800e628:	2001848a 	.word	0x2001848a
 800e62c:	200142d8 	.word	0x200142d8
 800e630:	20018aa8 	.word	0x20018aa8
 800e634:	200142d0 	.word	0x200142d0
 800e638:	20000068 	.word	0x20000068
 800e63c:	0801853c 	.word	0x0801853c
 800e640:	08018558 	.word	0x08018558
 800e644:	08018428 	.word	0x08018428

0800e648 <HAL_ADC_ConvCpltCallback>:
	      }
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* Adchandle) {
 800e648:	b480      	push	{r7}
 800e64a:	b083      	sub	sp, #12
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]

}
 800e650:	bf00      	nop
 800e652:	370c      	adds	r7, #12
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr
 800e65c:	0000      	movs	r0, r0
	...

0800e660 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  // 割り込み0.05ms 20kHz
{
 800e660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e664:	ed2d 8b02 	vpush	{d8}
 800e668:	b082      	sub	sp, #8
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
	//static double angular_velo=CURVE_SPEED*2/90;
	//static int k=0;
	static int k=0, log_counter=0;
  if(htim == &htim1){
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4aa5      	ldr	r2, [pc, #660]	; (800e908 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800e672:	4293      	cmp	r3, r2
 800e674:	f040 8507 	bne.w	800f086 <HAL_TIM_PeriodElapsedCallback+0xa26>
	  elapsed_time += T1;
 800e678:	4ba4      	ldr	r3, [pc, #656]	; (800e90c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800e67a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e67e:	a39e      	add	r3, pc, #632	; (adr r3, 800e8f8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800e680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e684:	f7f9 fd3a 	bl	80080fc <__adddf3>
 800e688:	4603      	mov	r3, r0
 800e68a:	460c      	mov	r4, r1
 800e68c:	4a9f      	ldr	r2, [pc, #636]	; (800e90c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800e68e:	e9c2 3400 	strd	r3, r4, [r2]
	  switch(mode.interrupt){
 800e692:	4b9f      	ldr	r3, [pc, #636]	; (800e910 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800e694:	7a1b      	ldrb	r3, [r3, #8]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d004      	beq.n	800e6a4 <HAL_TIM_PeriodElapsedCallback+0x44>
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	f000 8466 	beq.w	800ef6c <HAL_TIM_PeriodElapsedCallback+0x90c>
			}
			//モータ出力更新
			Motor_Switch(L_motor,R_motor);
			break;
		default:
			break;
 800e6a0:	f000 bcf2 	b.w	800f088 <HAL_TIM_PeriodElapsedCallback+0xa28>
      	EN3_L.count = TIM3 -> CNT;
 800e6a4:	4b9b      	ldr	r3, [pc, #620]	; (800e914 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800e6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	4b9b      	ldr	r3, [pc, #620]	; (800e918 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800e6ac:	601a      	str	r2, [r3, #0]
	    EN4_R.count = TIM4 -> CNT;
 800e6ae:	4b9b      	ldr	r3, [pc, #620]	; (800e91c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800e6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	4b9a      	ldr	r3, [pc, #616]	; (800e920 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800e6b6:	601a      	str	r2, [r3, #0]
	    EN3_L.count = -(EN3_L.count - (30000-1));
 800e6b8:	4b97      	ldr	r3, [pc, #604]	; (800e918 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800e6c0:	332f      	adds	r3, #47	; 0x2f
 800e6c2:	4a95      	ldr	r2, [pc, #596]	; (800e918 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800e6c4:	6013      	str	r3, [r2, #0]
	    EN4_R.count = -(EN4_R.count - (30000-1));
 800e6c6:	4b96      	ldr	r3, [pc, #600]	; (800e920 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800e6ce:	332f      	adds	r3, #47	; 0x2f
 800e6d0:	4a93      	ldr	r2, [pc, #588]	; (800e920 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800e6d2:	6013      	str	r3, [r2, #0]
	    mode.enc = Encoder_Count(mode.enc);
 800e6d4:	4b8e      	ldr	r3, [pc, #568]	; (800e910 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800e6d6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800e6da:	b21b      	sxth	r3, r3
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f7fc fa55 	bl	800ab8c <Encoder_Count>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	b25a      	sxtb	r2, r3
 800e6e6:	4b8a      	ldr	r3, [pc, #552]	; (800e910 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800e6e8:	70da      	strb	r2, [r3, #3]
	    All_Pulse_anytime += EN4_R.count + EN3_L.count;
 800e6ea:	4b8d      	ldr	r3, [pc, #564]	; (800e920 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	4b8a      	ldr	r3, [pc, #552]	; (800e918 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	441a      	add	r2, r3
 800e6f4:	4b8b      	ldr	r3, [pc, #556]	; (800e924 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	4a8a      	ldr	r2, [pc, #552]	; (800e924 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800e6fc:	6013      	str	r3, [r2, #0]
	    Encoder_Reset();
 800e6fe:	f7fc fa31 	bl	800ab64 <Encoder_Reset>
	    L_velocity = Velocity_Get( (float)EN3_L.count , T1 );
 800e702:	4b85      	ldr	r3, [pc, #532]	; (800e918 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	ee07 3a90 	vmov	s15, r3
 800e70a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e70e:	eddf 0a86 	vldr	s1, [pc, #536]	; 800e928 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 800e712:	eeb0 0a67 	vmov.f32	s0, s15
 800e716:	f7fc f9fd 	bl	800ab14 <Velocity_Get>
 800e71a:	eef0 7a40 	vmov.f32	s15, s0
 800e71e:	4b83      	ldr	r3, [pc, #524]	; (800e92c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800e720:	edc3 7a00 	vstr	s15, [r3]
		R_velocity = Velocity_Get( (float)EN4_R.count , T1 );
 800e724:	4b7e      	ldr	r3, [pc, #504]	; (800e920 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	ee07 3a90 	vmov	s15, r3
 800e72c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e730:	eddf 0a7d 	vldr	s1, [pc, #500]	; 800e928 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 800e734:	eeb0 0a67 	vmov.f32	s0, s15
 800e738:	f7fc f9ec 	bl	800ab14 <Velocity_Get>
 800e73c:	eef0 7a40 	vmov.f32	s15, s0
 800e740:	4b7b      	ldr	r3, [pc, #492]	; (800e930 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800e742:	edc3 7a00 	vstr	s15, [r3]
	    Body_velocity = (L_velocity + R_velocity) / 2; // (進んだパルス * パルスあたりに
 800e746:	4b79      	ldr	r3, [pc, #484]	; (800e92c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800e748:	ed93 7a00 	vldr	s14, [r3]
 800e74c:	4b78      	ldr	r3, [pc, #480]	; (800e930 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800e74e:	edd3 7a00 	vldr	s15, [r3]
 800e752:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e756:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e75a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e75e:	4b75      	ldr	r3, [pc, #468]	; (800e934 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800e760:	edc3 7a00 	vstr	s15, [r3]
	    imu_data = IMU_Get_Data();
 800e764:	f7fb fd60 	bl	800a228 <IMU_Get_Data>
 800e768:	eeb0 7a40 	vmov.f32	s14, s0
 800e76c:	eef0 7a60 	vmov.f32	s15, s1
 800e770:	4b71      	ldr	r3, [pc, #452]	; (800e938 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800e772:	ed83 7b00 	vstr	d7, [r3]
	    if( ((log_counter%10) == 0) && (log_counter < 1000*120) )
 800e776:	4b71      	ldr	r3, [pc, #452]	; (800e93c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800e778:	6819      	ldr	r1, [r3, #0]
 800e77a:	4b71      	ldr	r3, [pc, #452]	; (800e940 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800e77c:	fb83 2301 	smull	r2, r3, r3, r1
 800e780:	109a      	asrs	r2, r3, #2
 800e782:	17cb      	asrs	r3, r1, #31
 800e784:	1ad2      	subs	r2, r2, r3
 800e786:	4613      	mov	r3, r2
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	4413      	add	r3, r2
 800e78c:	005b      	lsls	r3, r3, #1
 800e78e:	1aca      	subs	r2, r1, r3
 800e790:	2a00      	cmp	r2, #0
 800e792:	d118      	bne.n	800e7c6 <HAL_TIM_PeriodElapsedCallback+0x166>
 800e794:	4b69      	ldr	r3, [pc, #420]	; (800e93c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4a6a      	ldr	r2, [pc, #424]	; (800e944 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800e79a:	4293      	cmp	r3, r2
 800e79c:	dc13      	bgt.n	800e7c6 <HAL_TIM_PeriodElapsedCallback+0x166>
	    	FLASH_Write_Word_F(run_log_address, (float)imu_data);
 800e79e:	4b6a      	ldr	r3, [pc, #424]	; (800e948 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800e7a0:	681d      	ldr	r5, [r3, #0]
 800e7a2:	4b65      	ldr	r3, [pc, #404]	; (800e938 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800e7a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	4621      	mov	r1, r4
 800e7ac:	f7fa f934 	bl	8008a18 <__aeabi_d2f>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	ee00 3a10 	vmov	s0, r3
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	f7fa fff8 	bl	80097ac <FLASH_Write_Word_F>
	    	run_log_address+= 0x04;
 800e7bc:	4b62      	ldr	r3, [pc, #392]	; (800e948 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	3304      	adds	r3, #4
 800e7c2:	4a61      	ldr	r2, [pc, #388]	; (800e948 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800e7c4:	6013      	str	r3, [r2, #0]
	    log_counter++;
 800e7c6:	4b5d      	ldr	r3, [pc, #372]	; (800e93c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	4a5b      	ldr	r2, [pc, #364]	; (800e93c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800e7ce:	6013      	str	r3, [r2, #0]
	    switch(mode.control){
 800e7d0:	4b4f      	ldr	r3, [pc, #316]	; (800e910 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800e7d2:	795b      	ldrb	r3, [r3, #5]
 800e7d4:	2b06      	cmp	r3, #6
 800e7d6:	f200 81b1 	bhi.w	800eb3c <HAL_TIM_PeriodElapsedCallback+0x4dc>
 800e7da:	a201      	add	r2, pc, #4	; (adr r2, 800e7e0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800e7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e0:	0800e7fd 	.word	0x0800e7fd
 800e7e4:	0800e87b 	.word	0x0800e87b
 800e7e8:	0800e965 	.word	0x0800e965
 800e7ec:	0800e9e3 	.word	0x0800e9e3
 800e7f0:	0800ea43 	.word	0x0800ea43
 800e7f4:	0800eabb 	.word	0x0800eabb
 800e7f8:	0800eac7 	.word	0x0800eac7
	    	   Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
 800e7fc:	4b53      	ldr	r3, [pc, #332]	; (800e94c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800e7fe:	edd3 7a00 	vldr	s15, [r3]
 800e802:	4b53      	ldr	r3, [pc, #332]	; (800e950 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800e804:	ed93 7a00 	vldr	s14, [r3]
 800e808:	4b52      	ldr	r3, [pc, #328]	; (800e954 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800e80a:	edd3 6a00 	vldr	s13, [r3]
 800e80e:	4b51      	ldr	r3, [pc, #324]	; (800e954 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800e810:	ed93 6a01 	vldr	s12, [r3, #4]
 800e814:	4b4f      	ldr	r3, [pc, #316]	; (800e954 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800e816:	edd3 5a02 	vldr	s11, [r3, #8]
 800e81a:	eef0 2a65 	vmov.f32	s5, s11
 800e81e:	eeb0 2a46 	vmov.f32	s4, s12
 800e822:	eef0 1a66 	vmov.f32	s3, s13
 800e826:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 800e958 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 800e82a:	eef0 0a47 	vmov.f32	s1, s14
 800e82e:	eeb0 0a67 	vmov.f32	s0, s15
 800e832:	f7fa fac1 	bl	8008db8 <Side_Wall_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, 0 );
 800e836:	4b40      	ldr	r3, [pc, #256]	; (800e938 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800e838:	ed93 8b00 	vldr	d8, [r3]
 800e83c:	4b47      	ldr	r3, [pc, #284]	; (800e95c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4618      	mov	r0, r3
 800e842:	f7f9 fdb9 	bl	80083b8 <__aeabi_f2d>
 800e846:	4604      	mov	r4, r0
 800e848:	460d      	mov	r5, r1
 800e84a:	4b44      	ldr	r3, [pc, #272]	; (800e95c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	4618      	mov	r0, r3
 800e850:	f7f9 fdb2 	bl	80083b8 <__aeabi_f2d>
 800e854:	4602      	mov	r2, r0
 800e856:	460b      	mov	r3, r1
 800e858:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800e900 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 800e85c:	ec43 2b14 	vmov	d4, r2, r3
 800e860:	ec45 4b13 	vmov	d3, r4, r5
 800e864:	ed9f 2b24 	vldr	d2, [pc, #144]	; 800e8f8 <HAL_TIM_PeriodElapsedCallback+0x298>
 800e868:	eeb0 1a48 	vmov.f32	s2, s16
 800e86c:	eef0 1a68 	vmov.f32	s3, s17
 800e870:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800e900 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 800e874:	f7fb fd88 	bl	800a388 <IMU_Control>
	    	   break;
 800e878:	e161      	b.n	800eb3e <HAL_TIM_PeriodElapsedCallback+0x4de>
	    	   Left_Wall_Control(distance_wall_left, fl_average,T8, Wall.KP, Wall.KI, Wall.KD);
 800e87a:	4b39      	ldr	r3, [pc, #228]	; (800e960 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800e87c:	edd3 7a00 	vldr	s15, [r3]
 800e880:	4b33      	ldr	r3, [pc, #204]	; (800e950 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800e882:	ed93 7a00 	vldr	s14, [r3]
 800e886:	4b33      	ldr	r3, [pc, #204]	; (800e954 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800e888:	edd3 6a00 	vldr	s13, [r3]
 800e88c:	4b31      	ldr	r3, [pc, #196]	; (800e954 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800e88e:	ed93 6a01 	vldr	s12, [r3, #4]
 800e892:	4b30      	ldr	r3, [pc, #192]	; (800e954 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800e894:	edd3 5a02 	vldr	s11, [r3, #8]
 800e898:	eef0 2a65 	vmov.f32	s5, s11
 800e89c:	eeb0 2a46 	vmov.f32	s4, s12
 800e8a0:	eef0 1a66 	vmov.f32	s3, s13
 800e8a4:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 800e958 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 800e8a8:	eef0 0a47 	vmov.f32	s1, s14
 800e8ac:	eeb0 0a67 	vmov.f32	s0, s15
 800e8b0:	f7fa fb3a 	bl	8008f28 <Left_Wall_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, 0 );
 800e8b4:	4b20      	ldr	r3, [pc, #128]	; (800e938 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800e8b6:	ed93 8b00 	vldr	d8, [r3]
 800e8ba:	4b28      	ldr	r3, [pc, #160]	; (800e95c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7f9 fd7a 	bl	80083b8 <__aeabi_f2d>
 800e8c4:	4604      	mov	r4, r0
 800e8c6:	460d      	mov	r5, r1
 800e8c8:	4b24      	ldr	r3, [pc, #144]	; (800e95c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7f9 fd73 	bl	80083b8 <__aeabi_f2d>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 800e900 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 800e8da:	ec43 2b14 	vmov	d4, r2, r3
 800e8de:	ec45 4b13 	vmov	d3, r4, r5
 800e8e2:	ed9f 2b05 	vldr	d2, [pc, #20]	; 800e8f8 <HAL_TIM_PeriodElapsedCallback+0x298>
 800e8e6:	eeb0 1a48 	vmov.f32	s2, s16
 800e8ea:	eef0 1a68 	vmov.f32	s3, s17
 800e8ee:	ed9f 0b04 	vldr	d0, [pc, #16]	; 800e900 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 800e8f2:	f7fb fd49 	bl	800a388 <IMU_Control>
	    	   break;
 800e8f6:	e122      	b.n	800eb3e <HAL_TIM_PeriodElapsedCallback+0x4de>
 800e8f8:	d2f1a9fc 	.word	0xd2f1a9fc
 800e8fc:	3f50624d 	.word	0x3f50624d
	...
 800e908:	20018ad0 	.word	0x20018ad0
 800e90c:	200142e0 	.word	0x200142e0
 800e910:	20000068 	.word	0x20000068
 800e914:	40000400 	.word	0x40000400
 800e918:	20000044 	.word	0x20000044
 800e91c:	40000800 	.word	0x40000800
 800e920:	20000050 	.word	0x20000050
 800e924:	200142ec 	.word	0x200142ec
 800e928:	3a83126f 	.word	0x3a83126f
 800e92c:	2001838c 	.word	0x2001838c
 800e930:	20018398 	.word	0x20018398
 800e934:	200183f8 	.word	0x200183f8
 800e938:	200142c0 	.word	0x200142c0
 800e93c:	20018358 	.word	0x20018358
 800e940:	66666667 	.word	0x66666667
 800e944:	0001d4bf 	.word	0x0001d4bf
 800e948:	20018578 	.word	0x20018578
 800e94c:	20018ef8 	.word	0x20018ef8
 800e950:	200183b4 	.word	0x200183b4
 800e954:	20000020 	.word	0x20000020
 800e958:	3851b717 	.word	0x3851b717
 800e95c:	20000038 	.word	0x20000038
 800e960:	20000018 	.word	0x20000018
	    	   Right_Wall_Control(distance_wall_right, fr_average,T8, Wall.KP, Wall.KI, Wall.KD);
 800e964:	4bbc      	ldr	r3, [pc, #752]	; (800ec58 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800e966:	edd3 7a00 	vldr	s15, [r3]
 800e96a:	4bbc      	ldr	r3, [pc, #752]	; (800ec5c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800e96c:	ed93 7a00 	vldr	s14, [r3]
 800e970:	4bbb      	ldr	r3, [pc, #748]	; (800ec60 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800e972:	edd3 6a00 	vldr	s13, [r3]
 800e976:	4bba      	ldr	r3, [pc, #744]	; (800ec60 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800e978:	ed93 6a01 	vldr	s12, [r3, #4]
 800e97c:	4bb8      	ldr	r3, [pc, #736]	; (800ec60 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800e97e:	edd3 5a02 	vldr	s11, [r3, #8]
 800e982:	eef0 2a65 	vmov.f32	s5, s11
 800e986:	eeb0 2a46 	vmov.f32	s4, s12
 800e98a:	eef0 1a66 	vmov.f32	s3, s13
 800e98e:	ed9f 1ab5 	vldr	s2, [pc, #724]	; 800ec64 <HAL_TIM_PeriodElapsedCallback+0x604>
 800e992:	eef0 0a47 	vmov.f32	s1, s14
 800e996:	eeb0 0a67 	vmov.f32	s0, s15
 800e99a:	f7fa fb89 	bl	80090b0 <Right_Wall_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, 0 );
 800e99e:	4bb2      	ldr	r3, [pc, #712]	; (800ec68 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800e9a0:	ed93 8b00 	vldr	d8, [r3]
 800e9a4:	4bb1      	ldr	r3, [pc, #708]	; (800ec6c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7f9 fd05 	bl	80083b8 <__aeabi_f2d>
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	460d      	mov	r5, r1
 800e9b2:	4bae      	ldr	r3, [pc, #696]	; (800ec6c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7f9 fcfe 	bl	80083b8 <__aeabi_f2d>
 800e9bc:	4602      	mov	r2, r0
 800e9be:	460b      	mov	r3, r1
 800e9c0:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 800ec40 <HAL_TIM_PeriodElapsedCallback+0x5e0>
 800e9c4:	ec43 2b14 	vmov	d4, r2, r3
 800e9c8:	ec45 4b13 	vmov	d3, r4, r5
 800e9cc:	ed9f 2b9e 	vldr	d2, [pc, #632]	; 800ec48 <HAL_TIM_PeriodElapsedCallback+0x5e8>
 800e9d0:	eeb0 1a48 	vmov.f32	s2, s16
 800e9d4:	eef0 1a68 	vmov.f32	s3, s17
 800e9d8:	ed9f 0b99 	vldr	d0, [pc, #612]	; 800ec40 <HAL_TIM_PeriodElapsedCallback+0x5e0>
 800e9dc:	f7fb fcd4 	bl	800a388 <IMU_Control>
	    	   break;
 800e9e0:	e0ad      	b.n	800eb3e <HAL_TIM_PeriodElapsedCallback+0x4de>
	    	   IMU_Control(Target_Rad_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800e9e2:	4ba3      	ldr	r3, [pc, #652]	; (800ec70 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7f9 fce6 	bl	80083b8 <__aeabi_f2d>
 800e9ec:	4604      	mov	r4, r0
 800e9ee:	460d      	mov	r5, r1
 800e9f0:	4b9d      	ldr	r3, [pc, #628]	; (800ec68 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800e9f2:	ed93 8b00 	vldr	d8, [r3]
 800e9f6:	4b9d      	ldr	r3, [pc, #628]	; (800ec6c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7f9 fcdc 	bl	80083b8 <__aeabi_f2d>
 800ea00:	4680      	mov	r8, r0
 800ea02:	4689      	mov	r9, r1
 800ea04:	4b99      	ldr	r3, [pc, #612]	; (800ec6c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7f9 fcd5 	bl	80083b8 <__aeabi_f2d>
 800ea0e:	4682      	mov	sl, r0
 800ea10:	468b      	mov	fp, r1
 800ea12:	4b96      	ldr	r3, [pc, #600]	; (800ec6c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800ea14:	689b      	ldr	r3, [r3, #8]
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7f9 fcce 	bl	80083b8 <__aeabi_f2d>
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	460b      	mov	r3, r1
 800ea20:	ec43 2b15 	vmov	d5, r2, r3
 800ea24:	ec4b ab14 	vmov	d4, sl, fp
 800ea28:	ec49 8b13 	vmov	d3, r8, r9
 800ea2c:	ed9f 2b86 	vldr	d2, [pc, #536]	; 800ec48 <HAL_TIM_PeriodElapsedCallback+0x5e8>
 800ea30:	eeb0 1a48 	vmov.f32	s2, s16
 800ea34:	eef0 1a68 	vmov.f32	s3, s17
 800ea38:	ec45 4b10 	vmov	d0, r4, r5
 800ea3c:	f7fb fca4 	bl	800a388 <IMU_Control>
	    	   break;
 800ea40:	e07d      	b.n	800eb3e <HAL_TIM_PeriodElapsedCallback+0x4de>
	    	   Enc_Velo_Control(T1, velocity.KP, velocity.KI, velocity.KD);
 800ea42:	4b8c      	ldr	r3, [pc, #560]	; (800ec74 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800ea44:	edd3 7a00 	vldr	s15, [r3]
 800ea48:	4b8a      	ldr	r3, [pc, #552]	; (800ec74 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800ea4a:	ed93 7a01 	vldr	s14, [r3, #4]
 800ea4e:	4b89      	ldr	r3, [pc, #548]	; (800ec74 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800ea50:	edd3 6a02 	vldr	s13, [r3, #8]
 800ea54:	eef0 1a66 	vmov.f32	s3, s13
 800ea58:	eeb0 1a47 	vmov.f32	s2, s14
 800ea5c:	eef0 0a67 	vmov.f32	s1, s15
 800ea60:	ed9f 0a85 	vldr	s0, [pc, #532]	; 800ec78 <HAL_TIM_PeriodElapsedCallback+0x618>
 800ea64:	f7fa fd9a 	bl	800959c <Enc_Velo_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800ea68:	4b7f      	ldr	r3, [pc, #508]	; (800ec68 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800ea6a:	ed93 8b00 	vldr	d8, [r3]
 800ea6e:	4b7f      	ldr	r3, [pc, #508]	; (800ec6c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7f9 fca0 	bl	80083b8 <__aeabi_f2d>
 800ea78:	4604      	mov	r4, r0
 800ea7a:	460d      	mov	r5, r1
 800ea7c:	4b7b      	ldr	r3, [pc, #492]	; (800ec6c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7f9 fc99 	bl	80083b8 <__aeabi_f2d>
 800ea86:	4680      	mov	r8, r0
 800ea88:	4689      	mov	r9, r1
 800ea8a:	4b78      	ldr	r3, [pc, #480]	; (800ec6c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800ea8c:	689b      	ldr	r3, [r3, #8]
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7f9 fc92 	bl	80083b8 <__aeabi_f2d>
 800ea94:	4602      	mov	r2, r0
 800ea96:	460b      	mov	r3, r1
 800ea98:	ec43 2b15 	vmov	d5, r2, r3
 800ea9c:	ec49 8b14 	vmov	d4, r8, r9
 800eaa0:	ec45 4b13 	vmov	d3, r4, r5
 800eaa4:	ed9f 2b68 	vldr	d2, [pc, #416]	; 800ec48 <HAL_TIM_PeriodElapsedCallback+0x5e8>
 800eaa8:	eeb0 1a48 	vmov.f32	s2, s16
 800eaac:	eef0 1a68 	vmov.f32	s3, s17
 800eab0:	ed9f 0b63 	vldr	d0, [pc, #396]	; 800ec40 <HAL_TIM_PeriodElapsedCallback+0x5e0>
 800eab4:	f7fb fc68 	bl	800a388 <IMU_Control>
	    	   break;
 800eab8:	e041      	b.n	800eb3e <HAL_TIM_PeriodElapsedCallback+0x4de>
	    	   mode.imu = 0;
 800eaba:	4a70      	ldr	r2, [pc, #448]	; (800ec7c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800eabc:	7993      	ldrb	r3, [r2, #6]
 800eabe:	f36f 0300 	bfc	r3, #0, #1
 800eac2:	7193      	strb	r3, [r2, #6]
	    	   break;
 800eac4:	e03b      	b.n	800eb3e <HAL_TIM_PeriodElapsedCallback+0x4de>
	    	   Right_Velo_Control(Target_R_velo, R_velocity,T1, velocity.KP, velocity.KI, velocity.KD);
 800eac6:	4b6e      	ldr	r3, [pc, #440]	; (800ec80 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800eac8:	edd3 7a00 	vldr	s15, [r3]
 800eacc:	4b6d      	ldr	r3, [pc, #436]	; (800ec84 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800eace:	ed93 7a00 	vldr	s14, [r3]
 800ead2:	4b68      	ldr	r3, [pc, #416]	; (800ec74 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800ead4:	edd3 6a00 	vldr	s13, [r3]
 800ead8:	4b66      	ldr	r3, [pc, #408]	; (800ec74 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800eada:	ed93 6a01 	vldr	s12, [r3, #4]
 800eade:	4b65      	ldr	r3, [pc, #404]	; (800ec74 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800eae0:	edd3 5a02 	vldr	s11, [r3, #8]
 800eae4:	eef0 2a65 	vmov.f32	s5, s11
 800eae8:	eeb0 2a46 	vmov.f32	s4, s12
 800eaec:	eef0 1a66 	vmov.f32	s3, s13
 800eaf0:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800ec78 <HAL_TIM_PeriodElapsedCallback+0x618>
 800eaf4:	eef0 0a47 	vmov.f32	s1, s14
 800eaf8:	eeb0 0a67 	vmov.f32	s0, s15
 800eafc:	f7fa fc4a 	bl	8009394 <Right_Velo_Control>
	    	   Left_Velo_Control(Target_L_velo, L_velocity,T1, velocity.KP, velocity.KI, velocity.KD);
 800eb00:	4b61      	ldr	r3, [pc, #388]	; (800ec88 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800eb02:	edd3 7a00 	vldr	s15, [r3]
 800eb06:	4b61      	ldr	r3, [pc, #388]	; (800ec8c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800eb08:	ed93 7a00 	vldr	s14, [r3]
 800eb0c:	4b59      	ldr	r3, [pc, #356]	; (800ec74 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800eb0e:	edd3 6a00 	vldr	s13, [r3]
 800eb12:	4b58      	ldr	r3, [pc, #352]	; (800ec74 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800eb14:	ed93 6a01 	vldr	s12, [r3, #4]
 800eb18:	4b56      	ldr	r3, [pc, #344]	; (800ec74 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800eb1a:	edd3 5a02 	vldr	s11, [r3, #8]
 800eb1e:	eef0 2a65 	vmov.f32	s5, s11
 800eb22:	eeb0 2a46 	vmov.f32	s4, s12
 800eb26:	eef0 1a66 	vmov.f32	s3, s13
 800eb2a:	ed9f 1a53 	vldr	s2, [pc, #332]	; 800ec78 <HAL_TIM_PeriodElapsedCallback+0x618>
 800eb2e:	eef0 0a47 	vmov.f32	s1, s14
 800eb32:	eeb0 0a67 	vmov.f32	s0, s15
 800eb36:	f7fa fcaf 	bl	8009498 <Left_Velo_Control>
	    	   break;
 800eb3a:	e000      	b.n	800eb3e <HAL_TIM_PeriodElapsedCallback+0x4de>
	    	   break;
 800eb3c:	bf00      	nop
	    if( mode.accel == 1 ){
 800eb3e:	4b4f      	ldr	r3, [pc, #316]	; (800ec7c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800eb40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d116      	bne.n	800eb76 <HAL_TIM_PeriodElapsedCallback+0x516>
		  if(Target_velocity < SEARCH_SPEED){
 800eb48:	4b51      	ldr	r3, [pc, #324]	; (800ec90 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800eb4a:	edd3 7a00 	vldr	s15, [r3]
 800eb4e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800ec94 <HAL_TIM_PeriodElapsedCallback+0x634>
 800eb52:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb5a:	f140 8117 	bpl.w	800ed8c <HAL_TIM_PeriodElapsedCallback+0x72c>
			Target_velocity += a_start;
 800eb5e:	4b4c      	ldr	r3, [pc, #304]	; (800ec90 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800eb60:	ed93 7a00 	vldr	s14, [r3]
 800eb64:	4b4c      	ldr	r3, [pc, #304]	; (800ec98 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800eb66:	edd3 7a00 	vldr	s15, [r3]
 800eb6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb6e:	4b48      	ldr	r3, [pc, #288]	; (800ec90 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800eb70:	edc3 7a00 	vstr	s15, [r3]
 800eb74:	e10a      	b.n	800ed8c <HAL_TIM_PeriodElapsedCallback+0x72c>
	    else if( mode.accel == 2 ){
 800eb76:	4b41      	ldr	r3, [pc, #260]	; (800ec7c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800eb78:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800eb7c:	2b02      	cmp	r3, #2
 800eb7e:	d116      	bne.n	800ebae <HAL_TIM_PeriodElapsedCallback+0x54e>
		  if(Target_velocity < SEARCH_SPEED){
 800eb80:	4b43      	ldr	r3, [pc, #268]	; (800ec90 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800eb82:	edd3 7a00 	vldr	s15, [r3]
 800eb86:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800ec94 <HAL_TIM_PeriodElapsedCallback+0x634>
 800eb8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb92:	f140 80fb 	bpl.w	800ed8c <HAL_TIM_PeriodElapsedCallback+0x72c>
			Target_velocity += a;
 800eb96:	4b3e      	ldr	r3, [pc, #248]	; (800ec90 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800eb98:	ed93 7a00 	vldr	s14, [r3]
 800eb9c:	4b3f      	ldr	r3, [pc, #252]	; (800ec9c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800eb9e:	edd3 7a00 	vldr	s15, [r3]
 800eba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eba6:	4b3a      	ldr	r3, [pc, #232]	; (800ec90 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800eba8:	edc3 7a00 	vstr	s15, [r3]
 800ebac:	e0ee      	b.n	800ed8c <HAL_TIM_PeriodElapsedCallback+0x72c>
	    else if( mode.accel == 3 ){
 800ebae:	4b33      	ldr	r3, [pc, #204]	; (800ec7c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800ebb0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ebb4:	2b03      	cmp	r3, #3
 800ebb6:	d116      	bne.n	800ebe6 <HAL_TIM_PeriodElapsedCallback+0x586>
		  if(Target_velocity > 5){
 800ebb8:	4b35      	ldr	r3, [pc, #212]	; (800ec90 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800ebba:	edd3 7a00 	vldr	s15, [r3]
 800ebbe:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800ebc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ebc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebca:	f340 80df 	ble.w	800ed8c <HAL_TIM_PeriodElapsedCallback+0x72c>
			Target_velocity -= a;
 800ebce:	4b30      	ldr	r3, [pc, #192]	; (800ec90 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800ebd0:	ed93 7a00 	vldr	s14, [r3]
 800ebd4:	4b31      	ldr	r3, [pc, #196]	; (800ec9c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800ebd6:	edd3 7a00 	vldr	s15, [r3]
 800ebda:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebde:	4b2c      	ldr	r3, [pc, #176]	; (800ec90 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800ebe0:	edc3 7a00 	vstr	s15, [r3]
 800ebe4:	e0d2      	b.n	800ed8c <HAL_TIM_PeriodElapsedCallback+0x72c>
	    else if( mode.accel == 4 ){ //左に旋回?��??��?
 800ebe6:	4b25      	ldr	r3, [pc, #148]	; (800ec7c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800ebe8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ebec:	2b04      	cmp	r3, #4
 800ebee:	d159      	bne.n	800eca4 <HAL_TIM_PeriodElapsedCallback+0x644>
	      if(Target_R_velo < SEARCH_SPEED * 124.6/90){
 800ebf0:	4b23      	ldr	r3, [pc, #140]	; (800ec80 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7f9 fbdf 	bl	80083b8 <__aeabi_f2d>
 800ebfa:	a315      	add	r3, pc, #84	; (adr r3, 800ec50 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800ebfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec00:	f7f9 fea4 	bl	800894c <__aeabi_dcmplt>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	f000 80c0 	beq.w	800ed8c <HAL_TIM_PeriodElapsedCallback+0x72c>
	    	Target_R_velo += a_curve;
 800ec0c:	4b1c      	ldr	r3, [pc, #112]	; (800ec80 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800ec0e:	ed93 7a00 	vldr	s14, [r3]
 800ec12:	4b23      	ldr	r3, [pc, #140]	; (800eca0 <HAL_TIM_PeriodElapsedCallback+0x640>)
 800ec14:	edd3 7a00 	vldr	s15, [r3]
 800ec18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec1c:	4b18      	ldr	r3, [pc, #96]	; (800ec80 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800ec1e:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo -= a_curve;
 800ec22:	4b19      	ldr	r3, [pc, #100]	; (800ec88 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800ec24:	ed93 7a00 	vldr	s14, [r3]
 800ec28:	4b1d      	ldr	r3, [pc, #116]	; (800eca0 <HAL_TIM_PeriodElapsedCallback+0x640>)
 800ec2a:	edd3 7a00 	vldr	s15, [r3]
 800ec2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec32:	4b15      	ldr	r3, [pc, #84]	; (800ec88 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800ec34:	edc3 7a00 	vstr	s15, [r3]
 800ec38:	e0a8      	b.n	800ed8c <HAL_TIM_PeriodElapsedCallback+0x72c>
 800ec3a:	bf00      	nop
 800ec3c:	f3af 8000 	nop.w
	...
 800ec48:	d2f1a9fc 	.word	0xd2f1a9fc
 800ec4c:	3f50624d 	.word	0x3f50624d
 800ec50:	55555555 	.word	0x55555555
 800ec54:	4079f555 	.word	0x4079f555
 800ec58:	20000014 	.word	0x20000014
 800ec5c:	20018ef8 	.word	0x20018ef8
 800ec60:	20000020 	.word	0x20000020
 800ec64:	3851b717 	.word	0x3851b717
 800ec68:	200142c0 	.word	0x200142c0
 800ec6c:	20000038 	.word	0x20000038
 800ec70:	200142ac 	.word	0x200142ac
 800ec74:	2000002c 	.word	0x2000002c
 800ec78:	3a83126f 	.word	0x3a83126f
 800ec7c:	20000068 	.word	0x20000068
 800ec80:	20018374 	.word	0x20018374
 800ec84:	20018398 	.word	0x20018398
 800ec88:	20018394 	.word	0x20018394
 800ec8c:	2001838c 	.word	0x2001838c
 800ec90:	200142a8 	.word	0x200142a8
 800ec94:	43960000 	.word	0x43960000
 800ec98:	20000008 	.word	0x20000008
 800ec9c:	2000000c 	.word	0x2000000c
 800eca0:	20000010 	.word	0x20000010
	    else if( mode.accel == 5 ){//左に旋回減�??
 800eca4:	4b92      	ldr	r3, [pc, #584]	; (800eef0 <HAL_TIM_PeriodElapsedCallback+0x890>)
 800eca6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ecaa:	2b05      	cmp	r3, #5
 800ecac:	d120      	bne.n	800ecf0 <HAL_TIM_PeriodElapsedCallback+0x690>
		      if(Target_R_velo > SEARCH_SPEED){
 800ecae:	4b91      	ldr	r3, [pc, #580]	; (800eef4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 800ecb0:	edd3 7a00 	vldr	s15, [r3]
 800ecb4:	ed9f 7a90 	vldr	s14, [pc, #576]	; 800eef8 <HAL_TIM_PeriodElapsedCallback+0x898>
 800ecb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ecbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc0:	dd64      	ble.n	800ed8c <HAL_TIM_PeriodElapsedCallback+0x72c>
		    	Target_R_velo -= a_curve;
 800ecc2:	4b8c      	ldr	r3, [pc, #560]	; (800eef4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 800ecc4:	ed93 7a00 	vldr	s14, [r3]
 800ecc8:	4b8c      	ldr	r3, [pc, #560]	; (800eefc <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800ecca:	edd3 7a00 	vldr	s15, [r3]
 800ecce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ecd2:	4b88      	ldr	r3, [pc, #544]	; (800eef4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 800ecd4:	edc3 7a00 	vstr	s15, [r3]
		    	Target_L_velo += a_curve;
 800ecd8:	4b89      	ldr	r3, [pc, #548]	; (800ef00 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 800ecda:	ed93 7a00 	vldr	s14, [r3]
 800ecde:	4b87      	ldr	r3, [pc, #540]	; (800eefc <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800ece0:	edd3 7a00 	vldr	s15, [r3]
 800ece4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ece8:	4b85      	ldr	r3, [pc, #532]	; (800ef00 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 800ecea:	edc3 7a00 	vstr	s15, [r3]
 800ecee:	e04d      	b.n	800ed8c <HAL_TIM_PeriodElapsedCallback+0x72c>
	    else if( mode.accel == 6 ){//右に旋回?��??��?
 800ecf0:	4b7f      	ldr	r3, [pc, #508]	; (800eef0 <HAL_TIM_PeriodElapsedCallback+0x890>)
 800ecf2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ecf6:	2b06      	cmp	r3, #6
 800ecf8:	d123      	bne.n	800ed42 <HAL_TIM_PeriodElapsedCallback+0x6e2>
	      if(Target_L_velo < SEARCH_SPEED * 124.6/90){
 800ecfa:	4b81      	ldr	r3, [pc, #516]	; (800ef00 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7f9 fb5a 	bl	80083b8 <__aeabi_f2d>
 800ed04:	a378      	add	r3, pc, #480	; (adr r3, 800eee8 <HAL_TIM_PeriodElapsedCallback+0x888>)
 800ed06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0a:	f7f9 fe1f 	bl	800894c <__aeabi_dcmplt>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d03b      	beq.n	800ed8c <HAL_TIM_PeriodElapsedCallback+0x72c>
	    	Target_R_velo -= a_curve;
 800ed14:	4b77      	ldr	r3, [pc, #476]	; (800eef4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 800ed16:	ed93 7a00 	vldr	s14, [r3]
 800ed1a:	4b78      	ldr	r3, [pc, #480]	; (800eefc <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800ed1c:	edd3 7a00 	vldr	s15, [r3]
 800ed20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed24:	4b73      	ldr	r3, [pc, #460]	; (800eef4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 800ed26:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo += a_curve;
 800ed2a:	4b75      	ldr	r3, [pc, #468]	; (800ef00 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 800ed2c:	ed93 7a00 	vldr	s14, [r3]
 800ed30:	4b72      	ldr	r3, [pc, #456]	; (800eefc <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800ed32:	edd3 7a00 	vldr	s15, [r3]
 800ed36:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed3a:	4b71      	ldr	r3, [pc, #452]	; (800ef00 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 800ed3c:	edc3 7a00 	vstr	s15, [r3]
 800ed40:	e024      	b.n	800ed8c <HAL_TIM_PeriodElapsedCallback+0x72c>
	    else if( mode.accel == 7 ){//右に旋回減�??
 800ed42:	4b6b      	ldr	r3, [pc, #428]	; (800eef0 <HAL_TIM_PeriodElapsedCallback+0x890>)
 800ed44:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ed48:	2b07      	cmp	r3, #7
 800ed4a:	d11f      	bne.n	800ed8c <HAL_TIM_PeriodElapsedCallback+0x72c>
	      if(Target_L_velo > SEARCH_SPEED){
 800ed4c:	4b6c      	ldr	r3, [pc, #432]	; (800ef00 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 800ed4e:	edd3 7a00 	vldr	s15, [r3]
 800ed52:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800eef8 <HAL_TIM_PeriodElapsedCallback+0x898>
 800ed56:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ed5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed5e:	dd15      	ble.n	800ed8c <HAL_TIM_PeriodElapsedCallback+0x72c>
	    	Target_R_velo += a_curve;
 800ed60:	4b64      	ldr	r3, [pc, #400]	; (800eef4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 800ed62:	ed93 7a00 	vldr	s14, [r3]
 800ed66:	4b65      	ldr	r3, [pc, #404]	; (800eefc <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800ed68:	edd3 7a00 	vldr	s15, [r3]
 800ed6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed70:	4b60      	ldr	r3, [pc, #384]	; (800eef4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 800ed72:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo -= a_curve;
 800ed76:	4b62      	ldr	r3, [pc, #392]	; (800ef00 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 800ed78:	ed93 7a00 	vldr	s14, [r3]
 800ed7c:	4b5f      	ldr	r3, [pc, #380]	; (800eefc <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800ed7e:	edd3 7a00 	vldr	s15, [r3]
 800ed82:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed86:	4b5e      	ldr	r3, [pc, #376]	; (800ef00 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 800ed88:	edc3 7a00 	vstr	s15, [r3]
	    Velocity_Control(Target_velocity, Body_velocity, T1,velocity.KP ,velocity.KI, velocity.KD);
 800ed8c:	4b5d      	ldr	r3, [pc, #372]	; (800ef04 <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 800ed8e:	edd3 7a00 	vldr	s15, [r3]
 800ed92:	4b5d      	ldr	r3, [pc, #372]	; (800ef08 <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 800ed94:	ed93 7a00 	vldr	s14, [r3]
 800ed98:	4b5c      	ldr	r3, [pc, #368]	; (800ef0c <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 800ed9a:	edd3 6a00 	vldr	s13, [r3]
 800ed9e:	4b5b      	ldr	r3, [pc, #364]	; (800ef0c <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 800eda0:	ed93 6a01 	vldr	s12, [r3, #4]
 800eda4:	4b59      	ldr	r3, [pc, #356]	; (800ef0c <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 800eda6:	edd3 5a02 	vldr	s11, [r3, #8]
 800edaa:	eef0 2a65 	vmov.f32	s5, s11
 800edae:	eeb0 2a46 	vmov.f32	s4, s12
 800edb2:	eef0 1a66 	vmov.f32	s3, s13
 800edb6:	ed9f 1a56 	vldr	s2, [pc, #344]	; 800ef10 <HAL_TIM_PeriodElapsedCallback+0x8b0>
 800edba:	eef0 0a47 	vmov.f32	s1, s14
 800edbe:	eeb0 0a67 	vmov.f32	s0, s15
 800edc2:	f7fa fa39 	bl	8009238 <Velocity_Control>
		L_motor = L_v_control + L_wall + L_leftwall + L_rightwall + L_rotate + L_angular_velocity + L_env_control + L_velo_control;
 800edc6:	4b53      	ldr	r3, [pc, #332]	; (800ef14 <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 800edc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800edcc:	b29a      	uxth	r2, r3
 800edce:	4b52      	ldr	r3, [pc, #328]	; (800ef18 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 800edd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800edd4:	b29b      	uxth	r3, r3
 800edd6:	4413      	add	r3, r2
 800edd8:	b29a      	uxth	r2, r3
 800edda:	4b50      	ldr	r3, [pc, #320]	; (800ef1c <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 800eddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ede0:	b29b      	uxth	r3, r3
 800ede2:	4413      	add	r3, r2
 800ede4:	b29a      	uxth	r2, r3
 800ede6:	4b4e      	ldr	r3, [pc, #312]	; (800ef20 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800ede8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800edec:	b29b      	uxth	r3, r3
 800edee:	4413      	add	r3, r2
 800edf0:	b29a      	uxth	r2, r3
 800edf2:	4b4c      	ldr	r3, [pc, #304]	; (800ef24 <HAL_TIM_PeriodElapsedCallback+0x8c4>)
 800edf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800edf8:	b29b      	uxth	r3, r3
 800edfa:	4413      	add	r3, r2
 800edfc:	b29a      	uxth	r2, r3
 800edfe:	4b4a      	ldr	r3, [pc, #296]	; (800ef28 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 800ee00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	4413      	add	r3, r2
 800ee08:	b29a      	uxth	r2, r3
 800ee0a:	4b48      	ldr	r3, [pc, #288]	; (800ef2c <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 800ee0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	4413      	add	r3, r2
 800ee14:	b29a      	uxth	r2, r3
 800ee16:	4b46      	ldr	r3, [pc, #280]	; (800ef30 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 800ee18:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	4413      	add	r3, r2
 800ee20:	b29b      	uxth	r3, r3
 800ee22:	b21a      	sxth	r2, r3
 800ee24:	4b43      	ldr	r3, [pc, #268]	; (800ef34 <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 800ee26:	801a      	strh	r2, [r3, #0]
		R_motor = R_v_control + R_wall + R_leftwall + R_rightwall + R_rotate + R_angular_velocity + R_env_control + R_velo_control;
 800ee28:	4b43      	ldr	r3, [pc, #268]	; (800ef38 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 800ee2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee2e:	b29a      	uxth	r2, r3
 800ee30:	4b42      	ldr	r3, [pc, #264]	; (800ef3c <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800ee32:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	4413      	add	r3, r2
 800ee3a:	b29a      	uxth	r2, r3
 800ee3c:	4b40      	ldr	r3, [pc, #256]	; (800ef40 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800ee3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee42:	b29b      	uxth	r3, r3
 800ee44:	4413      	add	r3, r2
 800ee46:	b29a      	uxth	r2, r3
 800ee48:	4b3e      	ldr	r3, [pc, #248]	; (800ef44 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800ee4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	4413      	add	r3, r2
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	4b3c      	ldr	r3, [pc, #240]	; (800ef48 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800ee56:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	4413      	add	r3, r2
 800ee5e:	b29a      	uxth	r2, r3
 800ee60:	4b3a      	ldr	r3, [pc, #232]	; (800ef4c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800ee62:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	4413      	add	r3, r2
 800ee6a:	b29a      	uxth	r2, r3
 800ee6c:	4b38      	ldr	r3, [pc, #224]	; (800ef50 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800ee6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee72:	b29b      	uxth	r3, r3
 800ee74:	4413      	add	r3, r2
 800ee76:	b29a      	uxth	r2, r3
 800ee78:	4b36      	ldr	r3, [pc, #216]	; (800ef54 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800ee7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	4413      	add	r3, r2
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	b21a      	sxth	r2, r3
 800ee86:	4b34      	ldr	r3, [pc, #208]	; (800ef58 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800ee88:	801a      	strh	r2, [r3, #0]
		if(timer <= 2000){
 800ee8a:	4b34      	ldr	r3, [pc, #208]	; (800ef5c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ee8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee90:	f04f 0200 	mov.w	r2, #0
 800ee94:	4b32      	ldr	r3, [pc, #200]	; (800ef60 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800ee96:	f7f9 fd63 	bl	8008960 <__aeabi_dcmple>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d018      	beq.n	800eed2 <HAL_TIM_PeriodElapsedCallback+0x872>
			if((int)timer % 5== 0){
 800eea0:	4b2e      	ldr	r3, [pc, #184]	; (800ef5c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800eea2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eea6:	4618      	mov	r0, r3
 800eea8:	4621      	mov	r1, r4
 800eeaa:	f7f9 fd8d 	bl	80089c8 <__aeabi_d2iz>
 800eeae:	4601      	mov	r1, r0
 800eeb0:	4b2c      	ldr	r3, [pc, #176]	; (800ef64 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800eeb2:	fb83 2301 	smull	r2, r3, r3, r1
 800eeb6:	105a      	asrs	r2, r3, #1
 800eeb8:	17cb      	asrs	r3, r1, #31
 800eeba:	1ad2      	subs	r2, r2, r3
 800eebc:	4613      	mov	r3, r2
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	4413      	add	r3, r2
 800eec2:	1aca      	subs	r2, r1, r3
 800eec4:	2a00      	cmp	r2, #0
 800eec6:	d104      	bne.n	800eed2 <HAL_TIM_PeriodElapsedCallback+0x872>
		     k++;
 800eec8:	4b27      	ldr	r3, [pc, #156]	; (800ef68 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	3301      	adds	r3, #1
 800eece:	4a26      	ldr	r2, [pc, #152]	; (800ef68 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800eed0:	6013      	str	r3, [r2, #0]
		Motor_Switch(L_motor,R_motor);
 800eed2:	4b18      	ldr	r3, [pc, #96]	; (800ef34 <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 800eed4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800eed8:	4b1f      	ldr	r3, [pc, #124]	; (800ef58 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800eeda:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eede:	4619      	mov	r1, r3
 800eee0:	4610      	mov	r0, r2
 800eee2:	f7fb fc99 	bl	800a818 <Motor_Switch>
		break;
 800eee6:	e0cf      	b.n	800f088 <HAL_TIM_PeriodElapsedCallback+0xa28>
 800eee8:	55555555 	.word	0x55555555
 800eeec:	4079f555 	.word	0x4079f555
 800eef0:	20000068 	.word	0x20000068
 800eef4:	20018374 	.word	0x20018374
 800eef8:	43960000 	.word	0x43960000
 800eefc:	20000010 	.word	0x20000010
 800ef00:	20018394 	.word	0x20018394
 800ef04:	200142a8 	.word	0x200142a8
 800ef08:	200183f8 	.word	0x200183f8
 800ef0c:	2000002c 	.word	0x2000002c
 800ef10:	3a83126f 	.word	0x3a83126f
 800ef14:	20018378 	.word	0x20018378
 800ef18:	20018390 	.word	0x20018390
 800ef1c:	2001837a 	.word	0x2001837a
 800ef20:	2001836c 	.word	0x2001836c
 800ef24:	20018388 	.word	0x20018388
 800ef28:	20018382 	.word	0x20018382
 800ef2c:	2001836e 	.word	0x2001836e
 800ef30:	20018392 	.word	0x20018392
 800ef34:	20018fe0 	.word	0x20018fe0
 800ef38:	20018380 	.word	0x20018380
 800ef3c:	2001837e 	.word	0x2001837e
 800ef40:	2001839c 	.word	0x2001839c
 800ef44:	20018384 	.word	0x20018384
 800ef48:	2001838a 	.word	0x2001838a
 800ef4c:	20018386 	.word	0x20018386
 800ef50:	2001837c 	.word	0x2001837c
 800ef54:	20018370 	.word	0x20018370
 800ef58:	2001848c 	.word	0x2001848c
 800ef5c:	200142d8 	.word	0x200142d8
 800ef60:	409f4000 	.word	0x409f4000
 800ef64:	66666667 	.word	0x66666667
 800ef68:	2001835c 	.word	0x2001835c
			Tim_Count();
 800ef6c:	f7fa fdde 	bl	8009b2c <Tim_Count>
	      	EN3_L.count = TIM3 -> CNT;
 800ef70:	4b4f      	ldr	r3, [pc, #316]	; (800f0b0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 800ef72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef74:	461a      	mov	r2, r3
 800ef76:	4b4f      	ldr	r3, [pc, #316]	; (800f0b4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800ef78:	601a      	str	r2, [r3, #0]
		    EN4_R.count = TIM4 -> CNT;
 800ef7a:	4b4f      	ldr	r3, [pc, #316]	; (800f0b8 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 800ef7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef7e:	461a      	mov	r2, r3
 800ef80:	4b4e      	ldr	r3, [pc, #312]	; (800f0bc <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 800ef82:	601a      	str	r2, [r3, #0]
		    EN3_L.count = -(EN3_L.count - (30000-1));
 800ef84:	4b4b      	ldr	r3, [pc, #300]	; (800f0b4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800ef8c:	332f      	adds	r3, #47	; 0x2f
 800ef8e:	4a49      	ldr	r2, [pc, #292]	; (800f0b4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800ef90:	6013      	str	r3, [r2, #0]
		    EN4_R.count = -(EN4_R.count - (30000-1));
 800ef92:	4b4a      	ldr	r3, [pc, #296]	; (800f0bc <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800ef9a:	332f      	adds	r3, #47	; 0x2f
 800ef9c:	4a47      	ldr	r2, [pc, #284]	; (800f0bc <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 800ef9e:	6013      	str	r3, [r2, #0]
		    mode.enc = Encoder_Count(mode.enc);
 800efa0:	4b47      	ldr	r3, [pc, #284]	; (800f0c0 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 800efa2:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800efa6:	b21b      	sxth	r3, r3
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7fb fdef 	bl	800ab8c <Encoder_Count>
 800efae:	4603      	mov	r3, r0
 800efb0:	b25a      	sxtb	r2, r3
 800efb2:	4b43      	ldr	r3, [pc, #268]	; (800f0c0 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 800efb4:	70da      	strb	r2, [r3, #3]
		    All_Pulse_anytime += EN4_R.count + EN3_L.count;
 800efb6:	4b41      	ldr	r3, [pc, #260]	; (800f0bc <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	4b3e      	ldr	r3, [pc, #248]	; (800f0b4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	441a      	add	r2, r3
 800efc0:	4b40      	ldr	r3, [pc, #256]	; (800f0c4 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4413      	add	r3, r2
 800efc6:	4a3f      	ldr	r2, [pc, #252]	; (800f0c4 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 800efc8:	6013      	str	r3, [r2, #0]
		    Encoder_Reset();
 800efca:	f7fb fdcb 	bl	800ab64 <Encoder_Reset>
		    L_velocity = Velocity_Get( (float)EN3_L.count , T1 );
 800efce:	4b39      	ldr	r3, [pc, #228]	; (800f0b4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	ee07 3a90 	vmov	s15, r3
 800efd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efda:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800f0c8 <HAL_TIM_PeriodElapsedCallback+0xa68>
 800efde:	eeb0 0a67 	vmov.f32	s0, s15
 800efe2:	f7fb fd97 	bl	800ab14 <Velocity_Get>
 800efe6:	eef0 7a40 	vmov.f32	s15, s0
 800efea:	4b38      	ldr	r3, [pc, #224]	; (800f0cc <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 800efec:	edc3 7a00 	vstr	s15, [r3]
			R_velocity = Velocity_Get( (float)EN4_R.count , T1 );
 800eff0:	4b32      	ldr	r3, [pc, #200]	; (800f0bc <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	ee07 3a90 	vmov	s15, r3
 800eff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800effc:	eddf 0a32 	vldr	s1, [pc, #200]	; 800f0c8 <HAL_TIM_PeriodElapsedCallback+0xa68>
 800f000:	eeb0 0a67 	vmov.f32	s0, s15
 800f004:	f7fb fd86 	bl	800ab14 <Velocity_Get>
 800f008:	eef0 7a40 	vmov.f32	s15, s0
 800f00c:	4b30      	ldr	r3, [pc, #192]	; (800f0d0 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 800f00e:	edc3 7a00 	vstr	s15, [r3]
			imu_data = IMU_Get_Data();
 800f012:	f7fb f909 	bl	800a228 <IMU_Get_Data>
 800f016:	eeb0 7a40 	vmov.f32	s14, s0
 800f01a:	eef0 7a60 	vmov.f32	s15, s1
 800f01e:	4b2d      	ldr	r3, [pc, #180]	; (800f0d4 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 800f020:	ed83 7b00 	vstr	d7, [r3]
			if(timer <= 48000){
 800f024:	4b2c      	ldr	r3, [pc, #176]	; (800f0d8 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 800f026:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f02a:	a31f      	add	r3, pc, #124	; (adr r3, 800f0a8 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 800f02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f030:	f7f9 fc96 	bl	8008960 <__aeabi_dcmple>
 800f034:	4603      	mov	r3, r0
 800f036:	2b00      	cmp	r3, #0
 800f038:	d01a      	beq.n	800f070 <HAL_TIM_PeriodElapsedCallback+0xa10>
				if((int)timer % 60 == 0){
 800f03a:	4b27      	ldr	r3, [pc, #156]	; (800f0d8 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 800f03c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f040:	4618      	mov	r0, r3
 800f042:	4621      	mov	r1, r4
 800f044:	f7f9 fcc0 	bl	80089c8 <__aeabi_d2iz>
 800f048:	4601      	mov	r1, r0
 800f04a:	4b24      	ldr	r3, [pc, #144]	; (800f0dc <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 800f04c:	fb83 2301 	smull	r2, r3, r3, r1
 800f050:	440b      	add	r3, r1
 800f052:	115a      	asrs	r2, r3, #5
 800f054:	17cb      	asrs	r3, r1, #31
 800f056:	1ad2      	subs	r2, r2, r3
 800f058:	4613      	mov	r3, r2
 800f05a:	011b      	lsls	r3, r3, #4
 800f05c:	1a9b      	subs	r3, r3, r2
 800f05e:	009b      	lsls	r3, r3, #2
 800f060:	1aca      	subs	r2, r1, r3
 800f062:	2a00      	cmp	r2, #0
 800f064:	d104      	bne.n	800f070 <HAL_TIM_PeriodElapsedCallback+0xa10>
			     k++;
 800f066:	4b1e      	ldr	r3, [pc, #120]	; (800f0e0 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	3301      	adds	r3, #1
 800f06c:	4a1c      	ldr	r2, [pc, #112]	; (800f0e0 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 800f06e:	6013      	str	r3, [r2, #0]
			Motor_Switch(L_motor,R_motor);
 800f070:	4b1c      	ldr	r3, [pc, #112]	; (800f0e4 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 800f072:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f076:	4b1c      	ldr	r3, [pc, #112]	; (800f0e8 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 800f078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f07c:	4619      	mov	r1, r3
 800f07e:	4610      	mov	r0, r2
 800f080:	f7fb fbca 	bl	800a818 <Motor_Switch>
			break;
 800f084:	e000      	b.n	800f088 <HAL_TIM_PeriodElapsedCallback+0xa28>
	  }

  }
 800f086:	bf00      	nop

  if(htim == &htim8){
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	4a18      	ldr	r2, [pc, #96]	; (800f0ec <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d101      	bne.n	800f094 <HAL_TIM_PeriodElapsedCallback+0xa34>


	  ADC_Get_Data();
 800f090:	f7fb fc0c 	bl	800a8ac <ADC_Get_Data>


  }
}
 800f094:	bf00      	nop
 800f096:	3708      	adds	r7, #8
 800f098:	46bd      	mov	sp, r7
 800f09a:	ecbd 8b02 	vpop	{d8}
 800f09e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f0a2:	bf00      	nop
 800f0a4:	f3af 8000 	nop.w
 800f0a8:	00000000 	.word	0x00000000
 800f0ac:	40e77000 	.word	0x40e77000
 800f0b0:	40000400 	.word	0x40000400
 800f0b4:	20000044 	.word	0x20000044
 800f0b8:	40000800 	.word	0x40000800
 800f0bc:	20000050 	.word	0x20000050
 800f0c0:	20000068 	.word	0x20000068
 800f0c4:	200142ec 	.word	0x200142ec
 800f0c8:	3a83126f 	.word	0x3a83126f
 800f0cc:	2001838c 	.word	0x2001838c
 800f0d0:	20018398 	.word	0x20018398
 800f0d4:	200142c0 	.word	0x200142c0
 800f0d8:	200142d8 	.word	0x200142d8
 800f0dc:	88888889 	.word	0x88888889
 800f0e0:	2001835c 	.word	0x2001835c
 800f0e4:	20018fe0 	.word	0x20018fe0
 800f0e8:	2001848c 	.word	0x2001848c
 800f0ec:	200183b8 	.word	0x200183b8

0800f0f0 <Exe_num0>:


/*---- DEFINING FUNCTION ----*/

//実行時に�?り替えるモー�?
void Exe_num0(){
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	af00      	add	r7, sp, #0
//	mode.control = 0;
//	Target_velocity=SEARCH_SPEED;
//
//	Target_Rad_velo=0;

	Adachi_search();
 800f0f4:	f7fe fcbc 	bl	800da70 <Adachi_search>

}
 800f0f8:	bf00      	nop
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <Exe_num1>:
void Exe_num1(){
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	af00      	add	r7, sp, #0
	Adachi_search2();
 800f100:	f7fe fdee 	bl	800dce0 <Adachi_search2>

}
 800f104:	bf00      	nop
 800f106:	bd80      	pop	{r7, pc}

0800f108 <Exe_num2>:
void Exe_num2(){
 800f108:	b580      	push	{r7, lr}
 800f10a:	af00      	add	r7, sp, #0
//        	  if(timer == 10)
//        		  printf("小数のほ�? : %lf \r\n",timer);
//        	  if(self_timer == 10000)
//        		  printf("整数のほ�? : %lf \r\n",self_timer/1000);

	Shortest_Run();
 800f10c:	f7ff fa18 	bl	800e540 <Shortest_Run>
        	  //start_calib();

}
 800f110:	bf00      	nop
 800f112:	bd80      	pop	{r7, pc}

0800f114 <Exe_num3>:
void Exe_num3(){
 800f114:	b580      	push	{r7, lr}
 800f116:	af00      	add	r7, sp, #0
	  //printf("helloあい�?えお\r\n");


        	  Flash_load();
 800f118:	f7fa ff48 	bl	8009fac <Flash_load>
          	  HAL_Delay(2000);
 800f11c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f120:	f001 fbc4 	bl	80108ac <HAL_Delay>

          	  mapprint();
 800f124:	f7fa fe72 	bl	8009e0c <mapprint>
          	  while(1);
 800f128:	e7fe      	b.n	800f128 <Exe_num3+0x14>

0800f12a <Exe_num4>:
			  //printf("%d\r\n",zg);
//        		  printf("%f\r\n",Body_angle);
//        		  HAL_Delay(1);

}
void Exe_num4(){
 800f12a:	b580      	push	{r7, lr}
 800f12c:	af00      	add	r7, sp, #0
	Tire_Maintenance();
 800f12e:	f7fd f83b 	bl	800c1a8 <Tire_Maintenance>
//       	  mode.enc = 1;
//        	  printf("左 : %d \r\n",EN3_L.integrate);
//        	  printf("右 : %d \r\n",EN4_R.integrate);
//        	  printf("\r\n");

}
 800f132:	bf00      	nop
 800f134:	bd80      	pop	{r7, pc}
	...

0800f138 <Exe_num5>:
void Exe_num5(){
 800f138:	b598      	push	{r3, r4, r7, lr}
 800f13a:	af00      	add	r7, sp, #0
	  }
#else
	  //mode.control = 0; //0 side_wall
	  //Target_velocity = test_velo_5;
#if 1
    printf("左 : %f\r\n",fl_average);
 800f13c:	4b1a      	ldr	r3, [pc, #104]	; (800f1a8 <Exe_num5+0x70>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	4618      	mov	r0, r3
 800f142:	f7f9 f939 	bl	80083b8 <__aeabi_f2d>
 800f146:	4603      	mov	r3, r0
 800f148:	460c      	mov	r4, r1
 800f14a:	461a      	mov	r2, r3
 800f14c:	4623      	mov	r3, r4
 800f14e:	4817      	ldr	r0, [pc, #92]	; (800f1ac <Exe_num5+0x74>)
 800f150:	f007 fa36 	bl	80165c0 <iprintf>
    printf("右 : %f\r\n",fr_average);
 800f154:	4b16      	ldr	r3, [pc, #88]	; (800f1b0 <Exe_num5+0x78>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4618      	mov	r0, r3
 800f15a:	f7f9 f92d 	bl	80083b8 <__aeabi_f2d>
 800f15e:	4603      	mov	r3, r0
 800f160:	460c      	mov	r4, r1
 800f162:	461a      	mov	r2, r3
 800f164:	4623      	mov	r3, r4
 800f166:	4813      	ldr	r0, [pc, #76]	; (800f1b4 <Exe_num5+0x7c>)
 800f168:	f007 fa2a 	bl	80165c0 <iprintf>
    printf("前左 : %f\r\n",sl_average);
 800f16c:	4b12      	ldr	r3, [pc, #72]	; (800f1b8 <Exe_num5+0x80>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	4618      	mov	r0, r3
 800f172:	f7f9 f921 	bl	80083b8 <__aeabi_f2d>
 800f176:	4603      	mov	r3, r0
 800f178:	460c      	mov	r4, r1
 800f17a:	461a      	mov	r2, r3
 800f17c:	4623      	mov	r3, r4
 800f17e:	480f      	ldr	r0, [pc, #60]	; (800f1bc <Exe_num5+0x84>)
 800f180:	f007 fa1e 	bl	80165c0 <iprintf>
    printf("前右 : %f\r\n",sr_average);
 800f184:	4b0e      	ldr	r3, [pc, #56]	; (800f1c0 <Exe_num5+0x88>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4618      	mov	r0, r3
 800f18a:	f7f9 f915 	bl	80083b8 <__aeabi_f2d>
 800f18e:	4603      	mov	r3, r0
 800f190:	460c      	mov	r4, r1
 800f192:	461a      	mov	r2, r3
 800f194:	4623      	mov	r3, r4
 800f196:	480b      	ldr	r0, [pc, #44]	; (800f1c4 <Exe_num5+0x8c>)
 800f198:	f007 fa12 	bl	80165c0 <iprintf>
    printf("\r\n");
 800f19c:	480a      	ldr	r0, [pc, #40]	; (800f1c8 <Exe_num5+0x90>)
 800f19e:	f007 fa83 	bl	80166a8 <puts>
#endif

#endif
}
 800f1a2:	bf00      	nop
 800f1a4:	bd98      	pop	{r3, r4, r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	200183b4 	.word	0x200183b4
 800f1ac:	08018574 	.word	0x08018574
 800f1b0:	20018ef8 	.word	0x20018ef8
 800f1b4:	08018580 	.word	0x08018580
 800f1b8:	20019044 	.word	0x20019044
 800f1bc:	0801858c 	.word	0x0801858c
 800f1c0:	20018490 	.word	0x20018490
 800f1c4:	0801859c 	.word	0x0801859c
 800f1c8:	08018428 	.word	0x08018428

0800f1cc <Exe_num6>:
void Exe_num6(){
 800f1cc:	b480      	push	{r7}
 800f1ce:	af00      	add	r7, sp, #0

	Target_velocity = 90;
 800f1d0:	4b0e      	ldr	r3, [pc, #56]	; (800f20c <Exe_num6+0x40>)
 800f1d2:	4a0f      	ldr	r2, [pc, #60]	; (800f210 <Exe_num6+0x44>)
 800f1d4:	601a      	str	r2, [r3, #0]
	mode.control = 3;
 800f1d6:	4b0f      	ldr	r3, [pc, #60]	; (800f214 <Exe_num6+0x48>)
 800f1d8:	2203      	movs	r2, #3
 800f1da:	715a      	strb	r2, [r3, #5]

	while(All_Pulse_anytime < Target_pulse*20);
 800f1dc:	bf00      	nop
 800f1de:	4b0e      	ldr	r3, [pc, #56]	; (800f218 <Exe_num6+0x4c>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	ee07 3a90 	vmov	s15, r3
 800f1e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f1ea:	4b0c      	ldr	r3, [pc, #48]	; (800f21c <Exe_num6+0x50>)
 800f1ec:	edd3 7a00 	vldr	s15, [r3]
 800f1f0:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800f1f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f1f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f200:	d4ed      	bmi.n	800f1de <Exe_num6+0x12>

	Target_velocity = 0;
 800f202:	4b02      	ldr	r3, [pc, #8]	; (800f20c <Exe_num6+0x40>)
 800f204:	f04f 0200 	mov.w	r2, #0
 800f208:	601a      	str	r2, [r3, #0]
	while(1);
 800f20a:	e7fe      	b.n	800f20a <Exe_num6+0x3e>
 800f20c:	200142a8 	.word	0x200142a8
 800f210:	42b40000 	.word	0x42b40000
 800f214:	20000068 	.word	0x20000068
 800f218:	200142ec 	.word	0x200142ec
 800f21c:	20000000 	.word	0x20000000

0800f220 <Exe_num7>:
#endif


//		Velocity_Control(Target_velocity, Body_velocity, T1,velocity.KP ,velocity.KI*, velocity.KD);
}
void Exe_num7(){
 800f220:	b590      	push	{r4, r7, lr}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
	  //mode.control = 5;
	 // mode.control = 3; //1 Left_wall
	FLASH_ReadData(start_adress_sector8, (uint32_t *)data_log, 1024*20);
 800f226:	4b15      	ldr	r3, [pc, #84]	; (800f27c <Exe_num7+0x5c>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800f22e:	4914      	ldr	r1, [pc, #80]	; (800f280 <Exe_num7+0x60>)
 800f230:	4618      	mov	r0, r3
 800f232:	f7fa fae5 	bl	8009800 <FLASH_ReadData>

	HAL_Delay(1000);
 800f236:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f23a:	f001 fb37 	bl	80108ac <HAL_Delay>

	for(int i = 0; i < 1024*20; i++)
 800f23e:	2300      	movs	r3, #0
 800f240:	607b      	str	r3, [r7, #4]
 800f242:	e012      	b.n	800f26a <Exe_num7+0x4a>
		printf("%d, %f\r\n",i , data_log[i]);
 800f244:	4a0e      	ldr	r2, [pc, #56]	; (800f280 <Exe_num7+0x60>)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	009b      	lsls	r3, r3, #2
 800f24a:	4413      	add	r3, r2
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	4618      	mov	r0, r3
 800f250:	f7f9 f8b2 	bl	80083b8 <__aeabi_f2d>
 800f254:	4603      	mov	r3, r0
 800f256:	460c      	mov	r4, r1
 800f258:	461a      	mov	r2, r3
 800f25a:	4623      	mov	r3, r4
 800f25c:	6879      	ldr	r1, [r7, #4]
 800f25e:	4809      	ldr	r0, [pc, #36]	; (800f284 <Exe_num7+0x64>)
 800f260:	f007 f9ae 	bl	80165c0 <iprintf>
	for(int i = 0; i < 1024*20; i++)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	3301      	adds	r3, #1
 800f268:	607b      	str	r3, [r7, #4]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800f270:	dbe8      	blt.n	800f244 <Exe_num7+0x24>
	printf("終了\r\n");
 800f272:	4805      	ldr	r0, [pc, #20]	; (800f288 <Exe_num7+0x68>)
 800f274:	f007 fa18 	bl	80166a8 <puts>
	while(1)
 800f278:	e7fe      	b.n	800f278 <Exe_num7+0x58>
 800f27a:	bf00      	nop
 800f27c:	080185c0 	.word	0x080185c0
 800f280:	200002a8 	.word	0x200002a8
 800f284:	080185ac 	.word	0x080185ac
 800f288:	080185b8 	.word	0x080185b8

0800f28c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800f290:	f001 fa9a 	bl	80107c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800f294:	f000 f870 	bl	800f378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800f298:	f000 fcba 	bl	800fc10 <MX_GPIO_Init>
  MX_DMA_Init();
 800f29c:	f000 fc90 	bl	800fbc0 <MX_DMA_Init>
  MX_ADC1_Init();
 800f2a0:	f000 f8d4 	bl	800f44c <MX_ADC1_Init>
  MX_ADC2_Init();
 800f2a4:	f000 f940 	bl	800f528 <MX_ADC2_Init>
  MX_TIM3_Init();
 800f2a8:	f000 fa9a 	bl	800f7e0 <MX_TIM3_Init>
  MX_TIM2_Init();
 800f2ac:	f000 fa22 	bl	800f6f4 <MX_TIM2_Init>
  MX_SPI3_Init();
 800f2b0:	f000 f99a 	bl	800f5e8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800f2b4:	f000 fc5a 	bl	800fb6c <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800f2b8:	f000 fb3a 	bl	800f930 <MX_TIM5_Init>
  MX_TIM4_Init();
 800f2bc:	f000 fae4 	bl	800f888 <MX_TIM4_Init>
  MX_TIM8_Init();
 800f2c0:	f000 fbac 	bl	800fa1c <MX_TIM8_Init>
  MX_TIM1_Init();
 800f2c4:	f000 f9c6 	bl	800f654 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  FLASH_Erease8();
 800f2c8:	f7fa fa50 	bl	800976c <FLASH_Erease8>
  run_log_address = start_adress_sector8;
 800f2cc:	4b26      	ldr	r3, [pc, #152]	; (800f368 <main+0xdc>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4a26      	ldr	r2, [pc, #152]	; (800f36c <main+0xe0>)
 800f2d2:	6013      	str	r3, [r2, #0]

  Encoder_Start();
 800f2d4:	f7fa ff16 	bl	800a104 <Encoder_Start>
  Encoder_Reset();
 800f2d8:	f7fb fc44 	bl	800ab64 <Encoder_Reset>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); //LED
 800f2dc:	2201      	movs	r2, #1
 800f2de:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f2e2:	4823      	ldr	r0, [pc, #140]	; (800f370 <main+0xe4>)
 800f2e4:	f003 fab8 	bl	8012858 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800f2e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f2ec:	f001 fade 	bl	80108ac <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET); //LED
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f2f6:	481e      	ldr	r0, [pc, #120]	; (800f370 <main+0xe4>)
 800f2f8:	f003 faae 	bl	8012858 <HAL_GPIO_WritePin>

  while (1)
  {
	  Execution_Select();
 800f2fc:	f7fc fd1a 	bl	800bd34 <Execution_Select>

//      printf("EN3_L.integrate : %d \r\n", EN3_L.integrate);
//      printf("EN4_R.integrate : %d \r\n", EN4_R.integrate);
//      printf("EN_Body.integrate : %d \r\n", EN_Body.integrate);
	  //誤差補正のオフセ�?ト�?�決�?
	  IMU_Calib();
 800f300:	f7fb f94e 	bl	800a5a0 <IMU_Calib>

	  while(1){


switch(mode.execution){
 800f304:	4b1b      	ldr	r3, [pc, #108]	; (800f374 <main+0xe8>)
 800f306:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f30a:	2b07      	cmp	r3, #7
 800f30c:	d82a      	bhi.n	800f364 <main+0xd8>
 800f30e:	a201      	add	r2, pc, #4	; (adr r2, 800f314 <main+0x88>)
 800f310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f314:	0800f335 	.word	0x0800f335
 800f318:	0800f33b 	.word	0x0800f33b
 800f31c:	0800f341 	.word	0x0800f341
 800f320:	0800f347 	.word	0x0800f347
 800f324:	0800f34d 	.word	0x0800f34d
 800f328:	0800f353 	.word	0x0800f353
 800f32c:	0800f359 	.word	0x0800f359
 800f330:	0800f35f 	.word	0x0800f35f
          case 0:
        	  Exe_num0();
 800f334:	f7ff fedc 	bl	800f0f0 <Exe_num0>
        	  break;
 800f338:	e015      	b.n	800f366 <main+0xda>
	  /*------------------------------------------*/
          case 1:
        	  Exe_num1();
 800f33a:	f7ff fedf 	bl	800f0fc <Exe_num1>
              break;
 800f33e:	e012      	b.n	800f366 <main+0xda>
	  /*------------------------------------------*/
          case 2:
        	  Exe_num2();
 800f340:	f7ff fee2 	bl	800f108 <Exe_num2>
	          break;
 800f344:	e00f      	b.n	800f366 <main+0xda>
	  /*------------------------------------------*/
          case 3:
        	  Exe_num3();
 800f346:	f7ff fee5 	bl	800f114 <Exe_num3>
              break;
 800f34a:	e00c      	b.n	800f366 <main+0xda>
	  /*------------------------------------------*/
          case 4:
        	  Exe_num4();
 800f34c:	f7ff feed 	bl	800f12a <Exe_num4>
        	  break;
 800f350:	e009      	b.n	800f366 <main+0xda>
	  /*------------------------------------------*/
          case 5:
        	  Exe_num5();
 800f352:	f7ff fef1 	bl	800f138 <Exe_num5>
	          break;
 800f356:	e006      	b.n	800f366 <main+0xda>
	  /*------------------------------------------*/
          case 6:
        	  Exe_num6();
 800f358:	f7ff ff38 	bl	800f1cc <Exe_num6>
		    break;
 800f35c:	e003      	b.n	800f366 <main+0xda>
	  /*------------------------------------------*/
          case 7:
        	  Exe_num7();
 800f35e:	f7ff ff5f 	bl	800f220 <Exe_num7>
	  	      break;
 800f362:	e000      	b.n	800f366 <main+0xda>
          default:
        	  break;
 800f364:	bf00      	nop
switch(mode.execution){
 800f366:	e7cd      	b.n	800f304 <main+0x78>
 800f368:	080185c0 	.word	0x080185c0
 800f36c:	20018578 	.word	0x20018578
 800f370:	40020800 	.word	0x40020800
 800f374:	20000068 	.word	0x20000068

0800f378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b094      	sub	sp, #80	; 0x50
 800f37c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f37e:	f107 0320 	add.w	r3, r7, #32
 800f382:	2230      	movs	r2, #48	; 0x30
 800f384:	2100      	movs	r1, #0
 800f386:	4618      	mov	r0, r3
 800f388:	f006 fcb5 	bl	8015cf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f38c:	f107 030c 	add.w	r3, r7, #12
 800f390:	2200      	movs	r2, #0
 800f392:	601a      	str	r2, [r3, #0]
 800f394:	605a      	str	r2, [r3, #4]
 800f396:	609a      	str	r2, [r3, #8]
 800f398:	60da      	str	r2, [r3, #12]
 800f39a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800f39c:	2300      	movs	r3, #0
 800f39e:	60bb      	str	r3, [r7, #8]
 800f3a0:	4b28      	ldr	r3, [pc, #160]	; (800f444 <SystemClock_Config+0xcc>)
 800f3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a4:	4a27      	ldr	r2, [pc, #156]	; (800f444 <SystemClock_Config+0xcc>)
 800f3a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f3aa:	6413      	str	r3, [r2, #64]	; 0x40
 800f3ac:	4b25      	ldr	r3, [pc, #148]	; (800f444 <SystemClock_Config+0xcc>)
 800f3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f3b4:	60bb      	str	r3, [r7, #8]
 800f3b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	607b      	str	r3, [r7, #4]
 800f3bc:	4b22      	ldr	r3, [pc, #136]	; (800f448 <SystemClock_Config+0xd0>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4a21      	ldr	r2, [pc, #132]	; (800f448 <SystemClock_Config+0xd0>)
 800f3c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f3c6:	6013      	str	r3, [r2, #0]
 800f3c8:	4b1f      	ldr	r3, [pc, #124]	; (800f448 <SystemClock_Config+0xd0>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f3d0:	607b      	str	r3, [r7, #4]
 800f3d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f3d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f3dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f3de:	2302      	movs	r3, #2
 800f3e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f3e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800f3e8:	2304      	movs	r3, #4
 800f3ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800f3ec:	23a8      	movs	r3, #168	; 0xa8
 800f3ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f3f0:	2302      	movs	r3, #2
 800f3f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800f3f4:	2304      	movs	r3, #4
 800f3f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f3f8:	f107 0320 	add.w	r3, r7, #32
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f003 fa45 	bl	801288c <HAL_RCC_OscConfig>
 800f402:	4603      	mov	r3, r0
 800f404:	2b00      	cmp	r3, #0
 800f406:	d001      	beq.n	800f40c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800f408:	f000 fccc 	bl	800fda4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f40c:	230f      	movs	r3, #15
 800f40e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f410:	2302      	movs	r3, #2
 800f412:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f414:	2300      	movs	r3, #0
 800f416:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f418:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f41c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f41e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f422:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800f424:	f107 030c 	add.w	r3, r7, #12
 800f428:	2105      	movs	r1, #5
 800f42a:	4618      	mov	r0, r3
 800f42c:	f003 fc9e 	bl	8012d6c <HAL_RCC_ClockConfig>
 800f430:	4603      	mov	r3, r0
 800f432:	2b00      	cmp	r3, #0
 800f434:	d001      	beq.n	800f43a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800f436:	f000 fcb5 	bl	800fda4 <Error_Handler>
  }
}
 800f43a:	bf00      	nop
 800f43c:	3750      	adds	r7, #80	; 0x50
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}
 800f442:	bf00      	nop
 800f444:	40023800 	.word	0x40023800
 800f448:	40007000 	.word	0x40007000

0800f44c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b084      	sub	sp, #16
 800f450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800f452:	463b      	mov	r3, r7
 800f454:	2200      	movs	r2, #0
 800f456:	601a      	str	r2, [r3, #0]
 800f458:	605a      	str	r2, [r3, #4]
 800f45a:	609a      	str	r2, [r3, #8]
 800f45c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800f45e:	4b2f      	ldr	r3, [pc, #188]	; (800f51c <MX_ADC1_Init+0xd0>)
 800f460:	4a2f      	ldr	r2, [pc, #188]	; (800f520 <MX_ADC1_Init+0xd4>)
 800f462:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f464:	4b2d      	ldr	r3, [pc, #180]	; (800f51c <MX_ADC1_Init+0xd0>)
 800f466:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f46a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800f46c:	4b2b      	ldr	r3, [pc, #172]	; (800f51c <MX_ADC1_Init+0xd0>)
 800f46e:	2200      	movs	r2, #0
 800f470:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800f472:	4b2a      	ldr	r3, [pc, #168]	; (800f51c <MX_ADC1_Init+0xd0>)
 800f474:	2201      	movs	r2, #1
 800f476:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800f478:	4b28      	ldr	r3, [pc, #160]	; (800f51c <MX_ADC1_Init+0xd0>)
 800f47a:	2201      	movs	r2, #1
 800f47c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800f47e:	4b27      	ldr	r3, [pc, #156]	; (800f51c <MX_ADC1_Init+0xd0>)
 800f480:	2200      	movs	r2, #0
 800f482:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f486:	4b25      	ldr	r3, [pc, #148]	; (800f51c <MX_ADC1_Init+0xd0>)
 800f488:	2200      	movs	r2, #0
 800f48a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f48c:	4b23      	ldr	r3, [pc, #140]	; (800f51c <MX_ADC1_Init+0xd0>)
 800f48e:	4a25      	ldr	r2, [pc, #148]	; (800f524 <MX_ADC1_Init+0xd8>)
 800f490:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f492:	4b22      	ldr	r3, [pc, #136]	; (800f51c <MX_ADC1_Init+0xd0>)
 800f494:	2200      	movs	r2, #0
 800f496:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800f498:	4b20      	ldr	r3, [pc, #128]	; (800f51c <MX_ADC1_Init+0xd0>)
 800f49a:	2203      	movs	r2, #3
 800f49c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800f49e:	4b1f      	ldr	r3, [pc, #124]	; (800f51c <MX_ADC1_Init+0xd0>)
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f4a6:	4b1d      	ldr	r3, [pc, #116]	; (800f51c <MX_ADC1_Init+0xd0>)
 800f4a8:	2201      	movs	r2, #1
 800f4aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800f4ac:	481b      	ldr	r0, [pc, #108]	; (800f51c <MX_ADC1_Init+0xd0>)
 800f4ae:	f001 fa1f 	bl	80108f0 <HAL_ADC_Init>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d001      	beq.n	800f4bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800f4b8:	f000 fc74 	bl	800fda4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800f4bc:	230a      	movs	r3, #10
 800f4be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800f4c4:	2303      	movs	r3, #3
 800f4c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f4c8:	463b      	mov	r3, r7
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	4813      	ldr	r0, [pc, #76]	; (800f51c <MX_ADC1_Init+0xd0>)
 800f4ce:	f001 fced 	bl	8010eac <HAL_ADC_ConfigChannel>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d001      	beq.n	800f4dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800f4d8:	f000 fc64 	bl	800fda4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800f4dc:	230e      	movs	r3, #14
 800f4de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800f4e0:	2302      	movs	r3, #2
 800f4e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f4e4:	463b      	mov	r3, r7
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	480c      	ldr	r0, [pc, #48]	; (800f51c <MX_ADC1_Init+0xd0>)
 800f4ea:	f001 fcdf 	bl	8010eac <HAL_ADC_ConfigChannel>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d001      	beq.n	800f4f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800f4f4:	f000 fc56 	bl	800fda4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800f4f8:	2309      	movs	r3, #9
 800f4fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800f4fc:	2303      	movs	r3, #3
 800f4fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f500:	463b      	mov	r3, r7
 800f502:	4619      	mov	r1, r3
 800f504:	4805      	ldr	r0, [pc, #20]	; (800f51c <MX_ADC1_Init+0xd0>)
 800f506:	f001 fcd1 	bl	8010eac <HAL_ADC_ConfigChannel>
 800f50a:	4603      	mov	r3, r0
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d001      	beq.n	800f514 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800f510:	f000 fc48 	bl	800fda4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800f514:	bf00      	nop
 800f516:	3710      	adds	r7, #16
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	2001857c 	.word	0x2001857c
 800f520:	40012000 	.word	0x40012000
 800f524:	0f000001 	.word	0x0f000001

0800f528 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800f52e:	463b      	mov	r3, r7
 800f530:	2200      	movs	r2, #0
 800f532:	601a      	str	r2, [r3, #0]
 800f534:	605a      	str	r2, [r3, #4]
 800f536:	609a      	str	r2, [r3, #8]
 800f538:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800f53a:	4b28      	ldr	r3, [pc, #160]	; (800f5dc <MX_ADC2_Init+0xb4>)
 800f53c:	4a28      	ldr	r2, [pc, #160]	; (800f5e0 <MX_ADC2_Init+0xb8>)
 800f53e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f540:	4b26      	ldr	r3, [pc, #152]	; (800f5dc <MX_ADC2_Init+0xb4>)
 800f542:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f546:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800f548:	4b24      	ldr	r3, [pc, #144]	; (800f5dc <MX_ADC2_Init+0xb4>)
 800f54a:	2200      	movs	r2, #0
 800f54c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800f54e:	4b23      	ldr	r3, [pc, #140]	; (800f5dc <MX_ADC2_Init+0xb4>)
 800f550:	2201      	movs	r2, #1
 800f552:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800f554:	4b21      	ldr	r3, [pc, #132]	; (800f5dc <MX_ADC2_Init+0xb4>)
 800f556:	2201      	movs	r2, #1
 800f558:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800f55a:	4b20      	ldr	r3, [pc, #128]	; (800f5dc <MX_ADC2_Init+0xb4>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f562:	4b1e      	ldr	r3, [pc, #120]	; (800f5dc <MX_ADC2_Init+0xb4>)
 800f564:	2200      	movs	r2, #0
 800f566:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f568:	4b1c      	ldr	r3, [pc, #112]	; (800f5dc <MX_ADC2_Init+0xb4>)
 800f56a:	4a1e      	ldr	r2, [pc, #120]	; (800f5e4 <MX_ADC2_Init+0xbc>)
 800f56c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f56e:	4b1b      	ldr	r3, [pc, #108]	; (800f5dc <MX_ADC2_Init+0xb4>)
 800f570:	2200      	movs	r2, #0
 800f572:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800f574:	4b19      	ldr	r3, [pc, #100]	; (800f5dc <MX_ADC2_Init+0xb4>)
 800f576:	2202      	movs	r2, #2
 800f578:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800f57a:	4b18      	ldr	r3, [pc, #96]	; (800f5dc <MX_ADC2_Init+0xb4>)
 800f57c:	2201      	movs	r2, #1
 800f57e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f582:	4b16      	ldr	r3, [pc, #88]	; (800f5dc <MX_ADC2_Init+0xb4>)
 800f584:	2201      	movs	r2, #1
 800f586:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800f588:	4814      	ldr	r0, [pc, #80]	; (800f5dc <MX_ADC2_Init+0xb4>)
 800f58a:	f001 f9b1 	bl	80108f0 <HAL_ADC_Init>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	d001      	beq.n	800f598 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800f594:	f000 fc06 	bl	800fda4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800f598:	230b      	movs	r3, #11
 800f59a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f59c:	2301      	movs	r3, #1
 800f59e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800f5a0:	2303      	movs	r3, #3
 800f5a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f5a4:	463b      	mov	r3, r7
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	480c      	ldr	r0, [pc, #48]	; (800f5dc <MX_ADC2_Init+0xb4>)
 800f5aa:	f001 fc7f 	bl	8010eac <HAL_ADC_ConfigChannel>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d001      	beq.n	800f5b8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800f5b4:	f000 fbf6 	bl	800fda4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800f5b8:	230f      	movs	r3, #15
 800f5ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800f5bc:	2302      	movs	r3, #2
 800f5be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f5c0:	463b      	mov	r3, r7
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	4805      	ldr	r0, [pc, #20]	; (800f5dc <MX_ADC2_Init+0xb4>)
 800f5c6:	f001 fc71 	bl	8010eac <HAL_ADC_ConfigChannel>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d001      	beq.n	800f5d4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800f5d0:	f000 fbe8 	bl	800fda4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800f5d4:	bf00      	nop
 800f5d6:	3710      	adds	r7, #16
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}
 800f5dc:	2001843c 	.word	0x2001843c
 800f5e0:	40012100 	.word	0x40012100
 800f5e4:	0f000001 	.word	0x0f000001

0800f5e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800f5ec:	4b17      	ldr	r3, [pc, #92]	; (800f64c <MX_SPI3_Init+0x64>)
 800f5ee:	4a18      	ldr	r2, [pc, #96]	; (800f650 <MX_SPI3_Init+0x68>)
 800f5f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800f5f2:	4b16      	ldr	r3, [pc, #88]	; (800f64c <MX_SPI3_Init+0x64>)
 800f5f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f5f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800f5fa:	4b14      	ldr	r3, [pc, #80]	; (800f64c <MX_SPI3_Init+0x64>)
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800f600:	4b12      	ldr	r3, [pc, #72]	; (800f64c <MX_SPI3_Init+0x64>)
 800f602:	2200      	movs	r2, #0
 800f604:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800f606:	4b11      	ldr	r3, [pc, #68]	; (800f64c <MX_SPI3_Init+0x64>)
 800f608:	2202      	movs	r2, #2
 800f60a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800f60c:	4b0f      	ldr	r3, [pc, #60]	; (800f64c <MX_SPI3_Init+0x64>)
 800f60e:	2201      	movs	r2, #1
 800f610:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800f612:	4b0e      	ldr	r3, [pc, #56]	; (800f64c <MX_SPI3_Init+0x64>)
 800f614:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f618:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800f61a:	4b0c      	ldr	r3, [pc, #48]	; (800f64c <MX_SPI3_Init+0x64>)
 800f61c:	2228      	movs	r2, #40	; 0x28
 800f61e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f620:	4b0a      	ldr	r3, [pc, #40]	; (800f64c <MX_SPI3_Init+0x64>)
 800f622:	2200      	movs	r2, #0
 800f624:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800f626:	4b09      	ldr	r3, [pc, #36]	; (800f64c <MX_SPI3_Init+0x64>)
 800f628:	2200      	movs	r2, #0
 800f62a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f62c:	4b07      	ldr	r3, [pc, #28]	; (800f64c <MX_SPI3_Init+0x64>)
 800f62e:	2200      	movs	r2, #0
 800f630:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800f632:	4b06      	ldr	r3, [pc, #24]	; (800f64c <MX_SPI3_Init+0x64>)
 800f634:	220a      	movs	r2, #10
 800f636:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800f638:	4804      	ldr	r0, [pc, #16]	; (800f64c <MX_SPI3_Init+0x64>)
 800f63a:	f003 fd89 	bl	8013150 <HAL_SPI_Init>
 800f63e:	4603      	mov	r3, r0
 800f640:	2b00      	cmp	r3, #0
 800f642:	d001      	beq.n	800f648 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800f644:	f000 fbae 	bl	800fda4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800f648:	bf00      	nop
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	2001851c 	.word	0x2001851c
 800f650:	40003c00 	.word	0x40003c00

0800f654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b086      	sub	sp, #24
 800f658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f65a:	f107 0308 	add.w	r3, r7, #8
 800f65e:	2200      	movs	r2, #0
 800f660:	601a      	str	r2, [r3, #0]
 800f662:	605a      	str	r2, [r3, #4]
 800f664:	609a      	str	r2, [r3, #8]
 800f666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f668:	463b      	mov	r3, r7
 800f66a:	2200      	movs	r2, #0
 800f66c:	601a      	str	r2, [r3, #0]
 800f66e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800f670:	4b1e      	ldr	r3, [pc, #120]	; (800f6ec <MX_TIM1_Init+0x98>)
 800f672:	4a1f      	ldr	r2, [pc, #124]	; (800f6f0 <MX_TIM1_Init+0x9c>)
 800f674:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800f676:	4b1d      	ldr	r3, [pc, #116]	; (800f6ec <MX_TIM1_Init+0x98>)
 800f678:	22a7      	movs	r2, #167	; 0xa7
 800f67a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f67c:	4b1b      	ldr	r3, [pc, #108]	; (800f6ec <MX_TIM1_Init+0x98>)
 800f67e:	2200      	movs	r2, #0
 800f680:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800f682:	4b1a      	ldr	r3, [pc, #104]	; (800f6ec <MX_TIM1_Init+0x98>)
 800f684:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f688:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f68a:	4b18      	ldr	r3, [pc, #96]	; (800f6ec <MX_TIM1_Init+0x98>)
 800f68c:	2200      	movs	r2, #0
 800f68e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800f690:	4b16      	ldr	r3, [pc, #88]	; (800f6ec <MX_TIM1_Init+0x98>)
 800f692:	2200      	movs	r2, #0
 800f694:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f696:	4b15      	ldr	r3, [pc, #84]	; (800f6ec <MX_TIM1_Init+0x98>)
 800f698:	2200      	movs	r2, #0
 800f69a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800f69c:	4813      	ldr	r0, [pc, #76]	; (800f6ec <MX_TIM1_Init+0x98>)
 800f69e:	f004 faab 	bl	8013bf8 <HAL_TIM_Base_Init>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d001      	beq.n	800f6ac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800f6a8:	f000 fb7c 	bl	800fda4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f6ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f6b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800f6b2:	f107 0308 	add.w	r3, r7, #8
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	480c      	ldr	r0, [pc, #48]	; (800f6ec <MX_TIM1_Init+0x98>)
 800f6ba:	f005 f82f 	bl	801471c <HAL_TIM_ConfigClockSource>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d001      	beq.n	800f6c8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800f6c4:	f000 fb6e 	bl	800fda4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800f6d0:	463b      	mov	r3, r7
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	4805      	ldr	r0, [pc, #20]	; (800f6ec <MX_TIM1_Init+0x98>)
 800f6d6:	f005 fcdb 	bl	8015090 <HAL_TIMEx_MasterConfigSynchronization>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d001      	beq.n	800f6e4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800f6e0:	f000 fb60 	bl	800fda4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800f6e4:	bf00      	nop
 800f6e6:	3718      	adds	r7, #24
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	20018ad0 	.word	0x20018ad0
 800f6f0:	40010000 	.word	0x40010000

0800f6f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b08e      	sub	sp, #56	; 0x38
 800f6f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f6fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f6fe:	2200      	movs	r2, #0
 800f700:	601a      	str	r2, [r3, #0]
 800f702:	605a      	str	r2, [r3, #4]
 800f704:	609a      	str	r2, [r3, #8]
 800f706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f708:	f107 0320 	add.w	r3, r7, #32
 800f70c:	2200      	movs	r2, #0
 800f70e:	601a      	str	r2, [r3, #0]
 800f710:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f712:	1d3b      	adds	r3, r7, #4
 800f714:	2200      	movs	r2, #0
 800f716:	601a      	str	r2, [r3, #0]
 800f718:	605a      	str	r2, [r3, #4]
 800f71a:	609a      	str	r2, [r3, #8]
 800f71c:	60da      	str	r2, [r3, #12]
 800f71e:	611a      	str	r2, [r3, #16]
 800f720:	615a      	str	r2, [r3, #20]
 800f722:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800f724:	4b2d      	ldr	r3, [pc, #180]	; (800f7dc <MX_TIM2_Init+0xe8>)
 800f726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f72a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800f72c:	4b2b      	ldr	r3, [pc, #172]	; (800f7dc <MX_TIM2_Init+0xe8>)
 800f72e:	2200      	movs	r2, #0
 800f730:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f732:	4b2a      	ldr	r3, [pc, #168]	; (800f7dc <MX_TIM2_Init+0xe8>)
 800f734:	2200      	movs	r2, #0
 800f736:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800f738:	4b28      	ldr	r3, [pc, #160]	; (800f7dc <MX_TIM2_Init+0xe8>)
 800f73a:	f241 0267 	movw	r2, #4199	; 0x1067
 800f73e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f740:	4b26      	ldr	r3, [pc, #152]	; (800f7dc <MX_TIM2_Init+0xe8>)
 800f742:	2200      	movs	r2, #0
 800f744:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f746:	4b25      	ldr	r3, [pc, #148]	; (800f7dc <MX_TIM2_Init+0xe8>)
 800f748:	2200      	movs	r2, #0
 800f74a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800f74c:	4823      	ldr	r0, [pc, #140]	; (800f7dc <MX_TIM2_Init+0xe8>)
 800f74e:	f004 fa53 	bl	8013bf8 <HAL_TIM_Base_Init>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d001      	beq.n	800f75c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800f758:	f000 fb24 	bl	800fda4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f75c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f760:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800f762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f766:	4619      	mov	r1, r3
 800f768:	481c      	ldr	r0, [pc, #112]	; (800f7dc <MX_TIM2_Init+0xe8>)
 800f76a:	f004 ffd7 	bl	801471c <HAL_TIM_ConfigClockSource>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	d001      	beq.n	800f778 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800f774:	f000 fb16 	bl	800fda4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800f778:	4818      	ldr	r0, [pc, #96]	; (800f7dc <MX_TIM2_Init+0xe8>)
 800f77a:	f004 fc0b 	bl	8013f94 <HAL_TIM_PWM_Init>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b00      	cmp	r3, #0
 800f782:	d001      	beq.n	800f788 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800f784:	f000 fb0e 	bl	800fda4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f788:	2300      	movs	r3, #0
 800f78a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f78c:	2300      	movs	r3, #0
 800f78e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800f790:	f107 0320 	add.w	r3, r7, #32
 800f794:	4619      	mov	r1, r3
 800f796:	4811      	ldr	r0, [pc, #68]	; (800f7dc <MX_TIM2_Init+0xe8>)
 800f798:	f005 fc7a 	bl	8015090 <HAL_TIMEx_MasterConfigSynchronization>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d001      	beq.n	800f7a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800f7a2:	f000 faff 	bl	800fda4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f7a6:	2360      	movs	r3, #96	; 0x60
 800f7a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f7b6:	1d3b      	adds	r3, r7, #4
 800f7b8:	220c      	movs	r2, #12
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	4807      	ldr	r0, [pc, #28]	; (800f7dc <MX_TIM2_Init+0xe8>)
 800f7be:	f004 fee7 	bl	8014590 <HAL_TIM_PWM_ConfigChannel>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d001      	beq.n	800f7cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800f7c8:	f000 faec 	bl	800fda4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800f7cc:	4803      	ldr	r0, [pc, #12]	; (800f7dc <MX_TIM2_Init+0xe8>)
 800f7ce:	f000 fd89 	bl	80102e4 <HAL_TIM_MspPostInit>

}
 800f7d2:	bf00      	nop
 800f7d4:	3738      	adds	r7, #56	; 0x38
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
 800f7da:	bf00      	nop
 800f7dc:	20018fa0 	.word	0x20018fa0

0800f7e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b08c      	sub	sp, #48	; 0x30
 800f7e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800f7e6:	f107 030c 	add.w	r3, r7, #12
 800f7ea:	2224      	movs	r2, #36	; 0x24
 800f7ec:	2100      	movs	r1, #0
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f006 fa81 	bl	8015cf6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f7f4:	1d3b      	adds	r3, r7, #4
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	601a      	str	r2, [r3, #0]
 800f7fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800f7fc:	4b20      	ldr	r3, [pc, #128]	; (800f880 <MX_TIM3_Init+0xa0>)
 800f7fe:	4a21      	ldr	r2, [pc, #132]	; (800f884 <MX_TIM3_Init+0xa4>)
 800f800:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800f802:	4b1f      	ldr	r3, [pc, #124]	; (800f880 <MX_TIM3_Init+0xa0>)
 800f804:	2200      	movs	r2, #0
 800f806:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f808:	4b1d      	ldr	r3, [pc, #116]	; (800f880 <MX_TIM3_Init+0xa0>)
 800f80a:	2200      	movs	r2, #0
 800f80c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800f80e:	4b1c      	ldr	r3, [pc, #112]	; (800f880 <MX_TIM3_Init+0xa0>)
 800f810:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800f814:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f816:	4b1a      	ldr	r3, [pc, #104]	; (800f880 <MX_TIM3_Init+0xa0>)
 800f818:	2200      	movs	r2, #0
 800f81a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f81c:	4b18      	ldr	r3, [pc, #96]	; (800f880 <MX_TIM3_Init+0xa0>)
 800f81e:	2200      	movs	r2, #0
 800f820:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800f822:	2301      	movs	r3, #1
 800f824:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800f826:	2300      	movs	r3, #0
 800f828:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800f82a:	2301      	movs	r3, #1
 800f82c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800f82e:	2300      	movs	r3, #0
 800f830:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800f832:	2300      	movs	r3, #0
 800f834:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800f836:	2300      	movs	r3, #0
 800f838:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800f83a:	2301      	movs	r3, #1
 800f83c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800f83e:	2300      	movs	r3, #0
 800f840:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800f842:	2300      	movs	r3, #0
 800f844:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800f846:	f107 030c 	add.w	r3, r7, #12
 800f84a:	4619      	mov	r1, r3
 800f84c:	480c      	ldr	r0, [pc, #48]	; (800f880 <MX_TIM3_Init+0xa0>)
 800f84e:	f004 fc6d 	bl	801412c <HAL_TIM_Encoder_Init>
 800f852:	4603      	mov	r3, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	d001      	beq.n	800f85c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800f858:	f000 faa4 	bl	800fda4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f85c:	2300      	movs	r3, #0
 800f85e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f860:	2300      	movs	r3, #0
 800f862:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800f864:	1d3b      	adds	r3, r7, #4
 800f866:	4619      	mov	r1, r3
 800f868:	4805      	ldr	r0, [pc, #20]	; (800f880 <MX_TIM3_Init+0xa0>)
 800f86a:	f005 fc11 	bl	8015090 <HAL_TIMEx_MasterConfigSynchronization>
 800f86e:	4603      	mov	r3, r0
 800f870:	2b00      	cmp	r3, #0
 800f872:	d001      	beq.n	800f878 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800f874:	f000 fa96 	bl	800fda4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800f878:	bf00      	nop
 800f87a:	3730      	adds	r7, #48	; 0x30
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}
 800f880:	200184d8 	.word	0x200184d8
 800f884:	40000400 	.word	0x40000400

0800f888 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b08c      	sub	sp, #48	; 0x30
 800f88c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800f88e:	f107 030c 	add.w	r3, r7, #12
 800f892:	2224      	movs	r2, #36	; 0x24
 800f894:	2100      	movs	r1, #0
 800f896:	4618      	mov	r0, r3
 800f898:	f006 fa2d 	bl	8015cf6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f89c:	1d3b      	adds	r3, r7, #4
 800f89e:	2200      	movs	r2, #0
 800f8a0:	601a      	str	r2, [r3, #0]
 800f8a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800f8a4:	4b20      	ldr	r3, [pc, #128]	; (800f928 <MX_TIM4_Init+0xa0>)
 800f8a6:	4a21      	ldr	r2, [pc, #132]	; (800f92c <MX_TIM4_Init+0xa4>)
 800f8a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800f8aa:	4b1f      	ldr	r3, [pc, #124]	; (800f928 <MX_TIM4_Init+0xa0>)
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f8b0:	4b1d      	ldr	r3, [pc, #116]	; (800f928 <MX_TIM4_Init+0xa0>)
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800f8b6:	4b1c      	ldr	r3, [pc, #112]	; (800f928 <MX_TIM4_Init+0xa0>)
 800f8b8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800f8bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f8be:	4b1a      	ldr	r3, [pc, #104]	; (800f928 <MX_TIM4_Init+0xa0>)
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f8c4:	4b18      	ldr	r3, [pc, #96]	; (800f928 <MX_TIM4_Init+0xa0>)
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800f8ee:	f107 030c 	add.w	r3, r7, #12
 800f8f2:	4619      	mov	r1, r3
 800f8f4:	480c      	ldr	r0, [pc, #48]	; (800f928 <MX_TIM4_Init+0xa0>)
 800f8f6:	f004 fc19 	bl	801412c <HAL_TIM_Encoder_Init>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d001      	beq.n	800f904 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800f900:	f000 fa50 	bl	800fda4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f904:	2300      	movs	r3, #0
 800f906:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f908:	2300      	movs	r3, #0
 800f90a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800f90c:	1d3b      	adds	r3, r7, #4
 800f90e:	4619      	mov	r1, r3
 800f910:	4805      	ldr	r0, [pc, #20]	; (800f928 <MX_TIM4_Init+0xa0>)
 800f912:	f005 fbbd 	bl	8015090 <HAL_TIMEx_MasterConfigSynchronization>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d001      	beq.n	800f920 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800f91c:	f000 fa42 	bl	800fda4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800f920:	bf00      	nop
 800f922:	3730      	adds	r7, #48	; 0x30
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	200183fc 	.word	0x200183fc
 800f92c:	40000800 	.word	0x40000800

0800f930 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b08e      	sub	sp, #56	; 0x38
 800f934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f936:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f93a:	2200      	movs	r2, #0
 800f93c:	601a      	str	r2, [r3, #0]
 800f93e:	605a      	str	r2, [r3, #4]
 800f940:	609a      	str	r2, [r3, #8]
 800f942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f944:	f107 0320 	add.w	r3, r7, #32
 800f948:	2200      	movs	r2, #0
 800f94a:	601a      	str	r2, [r3, #0]
 800f94c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f94e:	1d3b      	adds	r3, r7, #4
 800f950:	2200      	movs	r2, #0
 800f952:	601a      	str	r2, [r3, #0]
 800f954:	605a      	str	r2, [r3, #4]
 800f956:	609a      	str	r2, [r3, #8]
 800f958:	60da      	str	r2, [r3, #12]
 800f95a:	611a      	str	r2, [r3, #16]
 800f95c:	615a      	str	r2, [r3, #20]
 800f95e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800f960:	4b2c      	ldr	r3, [pc, #176]	; (800fa14 <MX_TIM5_Init+0xe4>)
 800f962:	4a2d      	ldr	r2, [pc, #180]	; (800fa18 <MX_TIM5_Init+0xe8>)
 800f964:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800f966:	4b2b      	ldr	r3, [pc, #172]	; (800fa14 <MX_TIM5_Init+0xe4>)
 800f968:	2200      	movs	r2, #0
 800f96a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f96c:	4b29      	ldr	r3, [pc, #164]	; (800fa14 <MX_TIM5_Init+0xe4>)
 800f96e:	2200      	movs	r2, #0
 800f970:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800f972:	4b28      	ldr	r3, [pc, #160]	; (800fa14 <MX_TIM5_Init+0xe4>)
 800f974:	f241 0267 	movw	r2, #4199	; 0x1067
 800f978:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f97a:	4b26      	ldr	r3, [pc, #152]	; (800fa14 <MX_TIM5_Init+0xe4>)
 800f97c:	2200      	movs	r2, #0
 800f97e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f980:	4b24      	ldr	r3, [pc, #144]	; (800fa14 <MX_TIM5_Init+0xe4>)
 800f982:	2200      	movs	r2, #0
 800f984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800f986:	4823      	ldr	r0, [pc, #140]	; (800fa14 <MX_TIM5_Init+0xe4>)
 800f988:	f004 f936 	bl	8013bf8 <HAL_TIM_Base_Init>
 800f98c:	4603      	mov	r3, r0
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d001      	beq.n	800f996 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800f992:	f000 fa07 	bl	800fda4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f99a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800f99c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	481c      	ldr	r0, [pc, #112]	; (800fa14 <MX_TIM5_Init+0xe4>)
 800f9a4:	f004 feba 	bl	801471c <HAL_TIM_ConfigClockSource>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d001      	beq.n	800f9b2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800f9ae:	f000 f9f9 	bl	800fda4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800f9b2:	4818      	ldr	r0, [pc, #96]	; (800fa14 <MX_TIM5_Init+0xe4>)
 800f9b4:	f004 faee 	bl	8013f94 <HAL_TIM_PWM_Init>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d001      	beq.n	800f9c2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800f9be:	f000 f9f1 	bl	800fda4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800f9ca:	f107 0320 	add.w	r3, r7, #32
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	4810      	ldr	r0, [pc, #64]	; (800fa14 <MX_TIM5_Init+0xe4>)
 800f9d2:	f005 fb5d 	bl	8015090 <HAL_TIMEx_MasterConfigSynchronization>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d001      	beq.n	800f9e0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800f9dc:	f000 f9e2 	bl	800fda4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f9e0:	2360      	movs	r3, #96	; 0x60
 800f9e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f9f0:	1d3b      	adds	r3, r7, #4
 800f9f2:	2204      	movs	r2, #4
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	4807      	ldr	r0, [pc, #28]	; (800fa14 <MX_TIM5_Init+0xe4>)
 800f9f8:	f004 fdca 	bl	8014590 <HAL_TIM_PWM_ConfigChannel>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d001      	beq.n	800fa06 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800fa02:	f000 f9cf 	bl	800fda4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800fa06:	4803      	ldr	r0, [pc, #12]	; (800fa14 <MX_TIM5_Init+0xe4>)
 800fa08:	f000 fc6c 	bl	80102e4 <HAL_TIM_MspPostInit>

}
 800fa0c:	bf00      	nop
 800fa0e:	3738      	adds	r7, #56	; 0x38
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	20018494 	.word	0x20018494
 800fa18:	40000c00 	.word	0x40000c00

0800fa1c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b096      	sub	sp, #88	; 0x58
 800fa20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fa22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fa26:	2200      	movs	r2, #0
 800fa28:	601a      	str	r2, [r3, #0]
 800fa2a:	605a      	str	r2, [r3, #4]
 800fa2c:	609a      	str	r2, [r3, #8]
 800fa2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fa30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fa34:	2200      	movs	r2, #0
 800fa36:	601a      	str	r2, [r3, #0]
 800fa38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fa3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa3e:	2200      	movs	r2, #0
 800fa40:	601a      	str	r2, [r3, #0]
 800fa42:	605a      	str	r2, [r3, #4]
 800fa44:	609a      	str	r2, [r3, #8]
 800fa46:	60da      	str	r2, [r3, #12]
 800fa48:	611a      	str	r2, [r3, #16]
 800fa4a:	615a      	str	r2, [r3, #20]
 800fa4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800fa4e:	1d3b      	adds	r3, r7, #4
 800fa50:	2220      	movs	r2, #32
 800fa52:	2100      	movs	r1, #0
 800fa54:	4618      	mov	r0, r3
 800fa56:	f006 f94e 	bl	8015cf6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800fa5a:	4b42      	ldr	r3, [pc, #264]	; (800fb64 <MX_TIM8_Init+0x148>)
 800fa5c:	4a42      	ldr	r2, [pc, #264]	; (800fb68 <MX_TIM8_Init+0x14c>)
 800fa5e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800fa60:	4b40      	ldr	r3, [pc, #256]	; (800fb64 <MX_TIM8_Init+0x148>)
 800fa62:	22a7      	movs	r2, #167	; 0xa7
 800fa64:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fa66:	4b3f      	ldr	r3, [pc, #252]	; (800fb64 <MX_TIM8_Init+0x148>)
 800fa68:	2200      	movs	r2, #0
 800fa6a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800fa6c:	4b3d      	ldr	r3, [pc, #244]	; (800fb64 <MX_TIM8_Init+0x148>)
 800fa6e:	2231      	movs	r2, #49	; 0x31
 800fa70:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fa72:	4b3c      	ldr	r3, [pc, #240]	; (800fb64 <MX_TIM8_Init+0x148>)
 800fa74:	2200      	movs	r2, #0
 800fa76:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800fa78:	4b3a      	ldr	r3, [pc, #232]	; (800fb64 <MX_TIM8_Init+0x148>)
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800fa7e:	4b39      	ldr	r3, [pc, #228]	; (800fb64 <MX_TIM8_Init+0x148>)
 800fa80:	2280      	movs	r2, #128	; 0x80
 800fa82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800fa84:	4837      	ldr	r0, [pc, #220]	; (800fb64 <MX_TIM8_Init+0x148>)
 800fa86:	f004 f8b7 	bl	8013bf8 <HAL_TIM_Base_Init>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d001      	beq.n	800fa94 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800fa90:	f000 f988 	bl	800fda4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fa94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa98:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800fa9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fa9e:	4619      	mov	r1, r3
 800faa0:	4830      	ldr	r0, [pc, #192]	; (800fb64 <MX_TIM8_Init+0x148>)
 800faa2:	f004 fe3b 	bl	801471c <HAL_TIM_ConfigClockSource>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d001      	beq.n	800fab0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800faac:	f000 f97a 	bl	800fda4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800fab0:	482c      	ldr	r0, [pc, #176]	; (800fb64 <MX_TIM8_Init+0x148>)
 800fab2:	f004 f91b 	bl	8013cec <HAL_TIM_OC_Init>
 800fab6:	4603      	mov	r3, r0
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d001      	beq.n	800fac0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800fabc:	f000 f972 	bl	800fda4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fac0:	2300      	movs	r3, #0
 800fac2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fac4:	2300      	movs	r3, #0
 800fac6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800fac8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800facc:	4619      	mov	r1, r3
 800face:	4825      	ldr	r0, [pc, #148]	; (800fb64 <MX_TIM8_Init+0x148>)
 800fad0:	f005 fade 	bl	8015090 <HAL_TIMEx_MasterConfigSynchronization>
 800fad4:	4603      	mov	r3, r0
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d001      	beq.n	800fade <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800fada:	f000 f963 	bl	800fda4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800fade:	2330      	movs	r3, #48	; 0x30
 800fae0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800fae2:	2318      	movs	r3, #24
 800fae4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fae6:	2300      	movs	r3, #0
 800fae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800faea:	2300      	movs	r3, #0
 800faec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800faee:	2300      	movs	r3, #0
 800faf0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800faf2:	2300      	movs	r3, #0
 800faf4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800faf6:	2300      	movs	r3, #0
 800faf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fafa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fafe:	2200      	movs	r2, #0
 800fb00:	4619      	mov	r1, r3
 800fb02:	4818      	ldr	r0, [pc, #96]	; (800fb64 <MX_TIM8_Init+0x148>)
 800fb04:	f004 fce4 	bl	80144d0 <HAL_TIM_OC_ConfigChannel>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d001      	beq.n	800fb12 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800fb0e:	f000 f949 	bl	800fda4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800fb12:	4b14      	ldr	r3, [pc, #80]	; (800fb64 <MX_TIM8_Init+0x148>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	699a      	ldr	r2, [r3, #24]
 800fb18:	4b12      	ldr	r3, [pc, #72]	; (800fb64 <MX_TIM8_Init+0x148>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f042 0208 	orr.w	r2, r2, #8
 800fb20:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800fb22:	2300      	movs	r3, #0
 800fb24:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800fb26:	2300      	movs	r3, #0
 800fb28:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800fb32:	2300      	movs	r3, #0
 800fb34:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800fb36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fb3a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800fb40:	1d3b      	adds	r3, r7, #4
 800fb42:	4619      	mov	r1, r3
 800fb44:	4807      	ldr	r0, [pc, #28]	; (800fb64 <MX_TIM8_Init+0x148>)
 800fb46:	f005 fb1f 	bl	8015188 <HAL_TIMEx_ConfigBreakDeadTime>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d001      	beq.n	800fb54 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800fb50:	f000 f928 	bl	800fda4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800fb54:	4803      	ldr	r0, [pc, #12]	; (800fb64 <MX_TIM8_Init+0x148>)
 800fb56:	f000 fbc5 	bl	80102e4 <HAL_TIM_MspPostInit>

}
 800fb5a:	bf00      	nop
 800fb5c:	3758      	adds	r7, #88	; 0x58
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}
 800fb62:	bf00      	nop
 800fb64:	200183b8 	.word	0x200183b8
 800fb68:	40010400 	.word	0x40010400

0800fb6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800fb70:	4b11      	ldr	r3, [pc, #68]	; (800fbb8 <MX_USART1_UART_Init+0x4c>)
 800fb72:	4a12      	ldr	r2, [pc, #72]	; (800fbbc <MX_USART1_UART_Init+0x50>)
 800fb74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800fb76:	4b10      	ldr	r3, [pc, #64]	; (800fbb8 <MX_USART1_UART_Init+0x4c>)
 800fb78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800fb7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800fb7e:	4b0e      	ldr	r3, [pc, #56]	; (800fbb8 <MX_USART1_UART_Init+0x4c>)
 800fb80:	2200      	movs	r2, #0
 800fb82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800fb84:	4b0c      	ldr	r3, [pc, #48]	; (800fbb8 <MX_USART1_UART_Init+0x4c>)
 800fb86:	2200      	movs	r2, #0
 800fb88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800fb8a:	4b0b      	ldr	r3, [pc, #44]	; (800fbb8 <MX_USART1_UART_Init+0x4c>)
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800fb90:	4b09      	ldr	r3, [pc, #36]	; (800fbb8 <MX_USART1_UART_Init+0x4c>)
 800fb92:	220c      	movs	r2, #12
 800fb94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fb96:	4b08      	ldr	r3, [pc, #32]	; (800fbb8 <MX_USART1_UART_Init+0x4c>)
 800fb98:	2200      	movs	r2, #0
 800fb9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800fb9c:	4b06      	ldr	r3, [pc, #24]	; (800fbb8 <MX_USART1_UART_Init+0x4c>)
 800fb9e:	2200      	movs	r2, #0
 800fba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800fba2:	4805      	ldr	r0, [pc, #20]	; (800fbb8 <MX_USART1_UART_Init+0x4c>)
 800fba4:	f005 fb7b 	bl	801529e <HAL_UART_Init>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d001      	beq.n	800fbb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800fbae:	f000 f8f9 	bl	800fda4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800fbb2:	bf00      	nop
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	200185c8 	.word	0x200185c8
 800fbbc:	40011000 	.word	0x40011000

0800fbc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b082      	sub	sp, #8
 800fbc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	607b      	str	r3, [r7, #4]
 800fbca:	4b10      	ldr	r3, [pc, #64]	; (800fc0c <MX_DMA_Init+0x4c>)
 800fbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbce:	4a0f      	ldr	r2, [pc, #60]	; (800fc0c <MX_DMA_Init+0x4c>)
 800fbd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fbd4:	6313      	str	r3, [r2, #48]	; 0x30
 800fbd6:	4b0d      	ldr	r3, [pc, #52]	; (800fc0c <MX_DMA_Init+0x4c>)
 800fbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fbde:	607b      	str	r3, [r7, #4]
 800fbe0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	2100      	movs	r1, #0
 800fbe6:	2038      	movs	r0, #56	; 0x38
 800fbe8:	f001 fce5 	bl	80115b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800fbec:	2038      	movs	r0, #56	; 0x38
 800fbee:	f001 fcfe 	bl	80115ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	2100      	movs	r1, #0
 800fbf6:	203a      	movs	r0, #58	; 0x3a
 800fbf8:	f001 fcdd 	bl	80115b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800fbfc:	203a      	movs	r0, #58	; 0x3a
 800fbfe:	f001 fcf6 	bl	80115ee <HAL_NVIC_EnableIRQ>

}
 800fc02:	bf00      	nop
 800fc04:	3708      	adds	r7, #8
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	40023800 	.word	0x40023800

0800fc10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b08a      	sub	sp, #40	; 0x28
 800fc14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc16:	f107 0314 	add.w	r3, r7, #20
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	601a      	str	r2, [r3, #0]
 800fc1e:	605a      	str	r2, [r3, #4]
 800fc20:	609a      	str	r2, [r3, #8]
 800fc22:	60da      	str	r2, [r3, #12]
 800fc24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800fc26:	2300      	movs	r3, #0
 800fc28:	613b      	str	r3, [r7, #16]
 800fc2a:	4b59      	ldr	r3, [pc, #356]	; (800fd90 <MX_GPIO_Init+0x180>)
 800fc2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc2e:	4a58      	ldr	r2, [pc, #352]	; (800fd90 <MX_GPIO_Init+0x180>)
 800fc30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc34:	6313      	str	r3, [r2, #48]	; 0x30
 800fc36:	4b56      	ldr	r3, [pc, #344]	; (800fd90 <MX_GPIO_Init+0x180>)
 800fc38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc3e:	613b      	str	r3, [r7, #16]
 800fc40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800fc42:	2300      	movs	r3, #0
 800fc44:	60fb      	str	r3, [r7, #12]
 800fc46:	4b52      	ldr	r3, [pc, #328]	; (800fd90 <MX_GPIO_Init+0x180>)
 800fc48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc4a:	4a51      	ldr	r2, [pc, #324]	; (800fd90 <MX_GPIO_Init+0x180>)
 800fc4c:	f043 0304 	orr.w	r3, r3, #4
 800fc50:	6313      	str	r3, [r2, #48]	; 0x30
 800fc52:	4b4f      	ldr	r3, [pc, #316]	; (800fd90 <MX_GPIO_Init+0x180>)
 800fc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc56:	f003 0304 	and.w	r3, r3, #4
 800fc5a:	60fb      	str	r3, [r7, #12]
 800fc5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fc5e:	2300      	movs	r3, #0
 800fc60:	60bb      	str	r3, [r7, #8]
 800fc62:	4b4b      	ldr	r3, [pc, #300]	; (800fd90 <MX_GPIO_Init+0x180>)
 800fc64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc66:	4a4a      	ldr	r2, [pc, #296]	; (800fd90 <MX_GPIO_Init+0x180>)
 800fc68:	f043 0301 	orr.w	r3, r3, #1
 800fc6c:	6313      	str	r3, [r2, #48]	; 0x30
 800fc6e:	4b48      	ldr	r3, [pc, #288]	; (800fd90 <MX_GPIO_Init+0x180>)
 800fc70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc72:	f003 0301 	and.w	r3, r3, #1
 800fc76:	60bb      	str	r3, [r7, #8]
 800fc78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	607b      	str	r3, [r7, #4]
 800fc7e:	4b44      	ldr	r3, [pc, #272]	; (800fd90 <MX_GPIO_Init+0x180>)
 800fc80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc82:	4a43      	ldr	r2, [pc, #268]	; (800fd90 <MX_GPIO_Init+0x180>)
 800fc84:	f043 0302 	orr.w	r3, r3, #2
 800fc88:	6313      	str	r3, [r2, #48]	; 0x30
 800fc8a:	4b41      	ldr	r3, [pc, #260]	; (800fd90 <MX_GPIO_Init+0x180>)
 800fc8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc8e:	f003 0302 	and.w	r3, r3, #2
 800fc92:	607b      	str	r3, [r7, #4]
 800fc94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800fc96:	2300      	movs	r3, #0
 800fc98:	603b      	str	r3, [r7, #0]
 800fc9a:	4b3d      	ldr	r3, [pc, #244]	; (800fd90 <MX_GPIO_Init+0x180>)
 800fc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc9e:	4a3c      	ldr	r2, [pc, #240]	; (800fd90 <MX_GPIO_Init+0x180>)
 800fca0:	f043 0308 	orr.w	r3, r3, #8
 800fca4:	6313      	str	r3, [r2, #48]	; 0x30
 800fca6:	4b3a      	ldr	r3, [pc, #232]	; (800fd90 <MX_GPIO_Init+0x180>)
 800fca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcaa:	f003 0308 	and.w	r3, r3, #8
 800fcae:	603b      	str	r3, [r7, #0]
 800fcb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	f44f 7141 	mov.w	r1, #772	; 0x304
 800fcb8:	4836      	ldr	r0, [pc, #216]	; (800fd94 <MX_GPIO_Init+0x184>)
 800fcba:	f002 fdcd 	bl	8012858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	2105      	movs	r1, #5
 800fcc2:	4835      	ldr	r0, [pc, #212]	; (800fd98 <MX_GPIO_Init+0x188>)
 800fcc4:	f002 fdc8 	bl	8012858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800fcc8:	2200      	movs	r2, #0
 800fcca:	2104      	movs	r1, #4
 800fccc:	4833      	ldr	r0, [pc, #204]	; (800fd9c <MX_GPIO_Init+0x18c>)
 800fcce:	f002 fdc3 	bl	8012858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fcd8:	4831      	ldr	r0, [pc, #196]	; (800fda0 <MX_GPIO_Init+0x190>)
 800fcda:	f002 fdbd 	bl	8012858 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800fcde:	f44f 7341 	mov.w	r3, #772	; 0x304
 800fce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fce4:	2301      	movs	r3, #1
 800fce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fce8:	2300      	movs	r3, #0
 800fcea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fcec:	2300      	movs	r3, #0
 800fcee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fcf0:	f107 0314 	add.w	r3, r7, #20
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	4827      	ldr	r0, [pc, #156]	; (800fd94 <MX_GPIO_Init+0x184>)
 800fcf8:	f002 fbfc 	bl	80124f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800fcfc:	2305      	movs	r3, #5
 800fcfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fd00:	2301      	movs	r3, #1
 800fd02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd04:	2300      	movs	r3, #0
 800fd06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fd0c:	f107 0314 	add.w	r3, r7, #20
 800fd10:	4619      	mov	r1, r3
 800fd12:	4821      	ldr	r0, [pc, #132]	; (800fd98 <MX_GPIO_Init+0x188>)
 800fd14:	f002 fbee 	bl	80124f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800fd18:	f241 0304 	movw	r3, #4100	; 0x1004
 800fd1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd22:	2300      	movs	r3, #0
 800fd24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fd26:	f107 0314 	add.w	r3, r7, #20
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	481c      	ldr	r0, [pc, #112]	; (800fda0 <MX_GPIO_Init+0x190>)
 800fd2e:	f002 fbe1 	bl	80124f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800fd32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fd36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fd40:	f107 0314 	add.w	r3, r7, #20
 800fd44:	4619      	mov	r1, r3
 800fd46:	4814      	ldr	r0, [pc, #80]	; (800fd98 <MX_GPIO_Init+0x188>)
 800fd48:	f002 fbd4 	bl	80124f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800fd4c:	2304      	movs	r3, #4
 800fd4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fd50:	2301      	movs	r3, #1
 800fd52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd54:	2300      	movs	r3, #0
 800fd56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd58:	2300      	movs	r3, #0
 800fd5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800fd5c:	f107 0314 	add.w	r3, r7, #20
 800fd60:	4619      	mov	r1, r3
 800fd62:	480e      	ldr	r0, [pc, #56]	; (800fd9c <MX_GPIO_Init+0x18c>)
 800fd64:	f002 fbc6 	bl	80124f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800fd68:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fd6e:	2301      	movs	r3, #1
 800fd70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd72:	2300      	movs	r3, #0
 800fd74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd76:	2300      	movs	r3, #0
 800fd78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fd7a:	f107 0314 	add.w	r3, r7, #20
 800fd7e:	4619      	mov	r1, r3
 800fd80:	4807      	ldr	r0, [pc, #28]	; (800fda0 <MX_GPIO_Init+0x190>)
 800fd82:	f002 fbb7 	bl	80124f4 <HAL_GPIO_Init>

}
 800fd86:	bf00      	nop
 800fd88:	3728      	adds	r7, #40	; 0x28
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	40023800 	.word	0x40023800
 800fd94:	40020800 	.word	0x40020800
 800fd98:	40020000 	.word	0x40020000
 800fd9c:	40020c00 	.word	0x40020c00
 800fda0:	40020400 	.word	0x40020400

0800fda4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800fda4:	b480      	push	{r7}
 800fda6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800fda8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800fdaa:	e7fe      	b.n	800fdaa <Error_Handler+0x6>

0800fdac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	607b      	str	r3, [r7, #4]
 800fdb6:	4b13      	ldr	r3, [pc, #76]	; (800fe04 <HAL_MspInit+0x58>)
 800fdb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdba:	4a12      	ldr	r2, [pc, #72]	; (800fe04 <HAL_MspInit+0x58>)
 800fdbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fdc0:	6453      	str	r3, [r2, #68]	; 0x44
 800fdc2:	4b10      	ldr	r3, [pc, #64]	; (800fe04 <HAL_MspInit+0x58>)
 800fdc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fdca:	607b      	str	r3, [r7, #4]
 800fdcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800fdce:	2300      	movs	r3, #0
 800fdd0:	603b      	str	r3, [r7, #0]
 800fdd2:	4b0c      	ldr	r3, [pc, #48]	; (800fe04 <HAL_MspInit+0x58>)
 800fdd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdd6:	4a0b      	ldr	r2, [pc, #44]	; (800fe04 <HAL_MspInit+0x58>)
 800fdd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fddc:	6413      	str	r3, [r2, #64]	; 0x40
 800fdde:	4b09      	ldr	r3, [pc, #36]	; (800fe04 <HAL_MspInit+0x58>)
 800fde0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fde2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fde6:	603b      	str	r3, [r7, #0]
 800fde8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800fdea:	2200      	movs	r2, #0
 800fdec:	2100      	movs	r1, #0
 800fdee:	2004      	movs	r0, #4
 800fdf0:	f001 fbe1 	bl	80115b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800fdf4:	2004      	movs	r0, #4
 800fdf6:	f001 fbfa 	bl	80115ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800fdfa:	bf00      	nop
 800fdfc:	3708      	adds	r7, #8
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	40023800 	.word	0x40023800

0800fe08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b08c      	sub	sp, #48	; 0x30
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe10:	f107 031c 	add.w	r3, r7, #28
 800fe14:	2200      	movs	r2, #0
 800fe16:	601a      	str	r2, [r3, #0]
 800fe18:	605a      	str	r2, [r3, #4]
 800fe1a:	609a      	str	r2, [r3, #8]
 800fe1c:	60da      	str	r2, [r3, #12]
 800fe1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	4a73      	ldr	r2, [pc, #460]	; (800fff4 <HAL_ADC_MspInit+0x1ec>)
 800fe26:	4293      	cmp	r3, r2
 800fe28:	d17a      	bne.n	800ff20 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	61bb      	str	r3, [r7, #24]
 800fe2e:	4b72      	ldr	r3, [pc, #456]	; (800fff8 <HAL_ADC_MspInit+0x1f0>)
 800fe30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe32:	4a71      	ldr	r2, [pc, #452]	; (800fff8 <HAL_ADC_MspInit+0x1f0>)
 800fe34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fe38:	6453      	str	r3, [r2, #68]	; 0x44
 800fe3a:	4b6f      	ldr	r3, [pc, #444]	; (800fff8 <HAL_ADC_MspInit+0x1f0>)
 800fe3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe42:	61bb      	str	r3, [r7, #24]
 800fe44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fe46:	2300      	movs	r3, #0
 800fe48:	617b      	str	r3, [r7, #20]
 800fe4a:	4b6b      	ldr	r3, [pc, #428]	; (800fff8 <HAL_ADC_MspInit+0x1f0>)
 800fe4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe4e:	4a6a      	ldr	r2, [pc, #424]	; (800fff8 <HAL_ADC_MspInit+0x1f0>)
 800fe50:	f043 0304 	orr.w	r3, r3, #4
 800fe54:	6313      	str	r3, [r2, #48]	; 0x30
 800fe56:	4b68      	ldr	r3, [pc, #416]	; (800fff8 <HAL_ADC_MspInit+0x1f0>)
 800fe58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe5a:	f003 0304 	and.w	r3, r3, #4
 800fe5e:	617b      	str	r3, [r7, #20]
 800fe60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fe62:	2300      	movs	r3, #0
 800fe64:	613b      	str	r3, [r7, #16]
 800fe66:	4b64      	ldr	r3, [pc, #400]	; (800fff8 <HAL_ADC_MspInit+0x1f0>)
 800fe68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe6a:	4a63      	ldr	r2, [pc, #396]	; (800fff8 <HAL_ADC_MspInit+0x1f0>)
 800fe6c:	f043 0302 	orr.w	r3, r3, #2
 800fe70:	6313      	str	r3, [r2, #48]	; 0x30
 800fe72:	4b61      	ldr	r3, [pc, #388]	; (800fff8 <HAL_ADC_MspInit+0x1f0>)
 800fe74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe76:	f003 0302 	and.w	r3, r3, #2
 800fe7a:	613b      	str	r3, [r7, #16]
 800fe7c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800fe7e:	2311      	movs	r3, #17
 800fe80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fe82:	2303      	movs	r3, #3
 800fe84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe86:	2300      	movs	r3, #0
 800fe88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fe8a:	f107 031c 	add.w	r3, r7, #28
 800fe8e:	4619      	mov	r1, r3
 800fe90:	485a      	ldr	r0, [pc, #360]	; (800fffc <HAL_ADC_MspInit+0x1f4>)
 800fe92:	f002 fb2f 	bl	80124f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800fe96:	2302      	movs	r3, #2
 800fe98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fe9a:	2303      	movs	r3, #3
 800fe9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fea2:	f107 031c 	add.w	r3, r7, #28
 800fea6:	4619      	mov	r1, r3
 800fea8:	4855      	ldr	r0, [pc, #340]	; (8010000 <HAL_ADC_MspInit+0x1f8>)
 800feaa:	f002 fb23 	bl	80124f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800feae:	4b55      	ldr	r3, [pc, #340]	; (8010004 <HAL_ADC_MspInit+0x1fc>)
 800feb0:	4a55      	ldr	r2, [pc, #340]	; (8010008 <HAL_ADC_MspInit+0x200>)
 800feb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800feb4:	4b53      	ldr	r3, [pc, #332]	; (8010004 <HAL_ADC_MspInit+0x1fc>)
 800feb6:	2200      	movs	r2, #0
 800feb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800feba:	4b52      	ldr	r3, [pc, #328]	; (8010004 <HAL_ADC_MspInit+0x1fc>)
 800febc:	2200      	movs	r2, #0
 800febe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800fec0:	4b50      	ldr	r3, [pc, #320]	; (8010004 <HAL_ADC_MspInit+0x1fc>)
 800fec2:	2200      	movs	r2, #0
 800fec4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800fec6:	4b4f      	ldr	r3, [pc, #316]	; (8010004 <HAL_ADC_MspInit+0x1fc>)
 800fec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fecc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800fece:	4b4d      	ldr	r3, [pc, #308]	; (8010004 <HAL_ADC_MspInit+0x1fc>)
 800fed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fed4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800fed6:	4b4b      	ldr	r3, [pc, #300]	; (8010004 <HAL_ADC_MspInit+0x1fc>)
 800fed8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fedc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800fede:	4b49      	ldr	r3, [pc, #292]	; (8010004 <HAL_ADC_MspInit+0x1fc>)
 800fee0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fee4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800fee6:	4b47      	ldr	r3, [pc, #284]	; (8010004 <HAL_ADC_MspInit+0x1fc>)
 800fee8:	2200      	movs	r2, #0
 800feea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800feec:	4b45      	ldr	r3, [pc, #276]	; (8010004 <HAL_ADC_MspInit+0x1fc>)
 800feee:	2200      	movs	r2, #0
 800fef0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800fef2:	4844      	ldr	r0, [pc, #272]	; (8010004 <HAL_ADC_MspInit+0x1fc>)
 800fef4:	f001 fb96 	bl	8011624 <HAL_DMA_Init>
 800fef8:	4603      	mov	r3, r0
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d001      	beq.n	800ff02 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800fefe:	f7ff ff51 	bl	800fda4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	4a3f      	ldr	r2, [pc, #252]	; (8010004 <HAL_ADC_MspInit+0x1fc>)
 800ff06:	639a      	str	r2, [r3, #56]	; 0x38
 800ff08:	4a3e      	ldr	r2, [pc, #248]	; (8010004 <HAL_ADC_MspInit+0x1fc>)
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800ff0e:	2200      	movs	r2, #0
 800ff10:	2100      	movs	r1, #0
 800ff12:	2012      	movs	r0, #18
 800ff14:	f001 fb4f 	bl	80115b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800ff18:	2012      	movs	r0, #18
 800ff1a:	f001 fb68 	bl	80115ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800ff1e:	e065      	b.n	800ffec <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	4a39      	ldr	r2, [pc, #228]	; (801000c <HAL_ADC_MspInit+0x204>)
 800ff26:	4293      	cmp	r3, r2
 800ff28:	d160      	bne.n	800ffec <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	60fb      	str	r3, [r7, #12]
 800ff2e:	4b32      	ldr	r3, [pc, #200]	; (800fff8 <HAL_ADC_MspInit+0x1f0>)
 800ff30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff32:	4a31      	ldr	r2, [pc, #196]	; (800fff8 <HAL_ADC_MspInit+0x1f0>)
 800ff34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ff38:	6453      	str	r3, [r2, #68]	; 0x44
 800ff3a:	4b2f      	ldr	r3, [pc, #188]	; (800fff8 <HAL_ADC_MspInit+0x1f0>)
 800ff3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ff42:	60fb      	str	r3, [r7, #12]
 800ff44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ff46:	2300      	movs	r3, #0
 800ff48:	60bb      	str	r3, [r7, #8]
 800ff4a:	4b2b      	ldr	r3, [pc, #172]	; (800fff8 <HAL_ADC_MspInit+0x1f0>)
 800ff4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff4e:	4a2a      	ldr	r2, [pc, #168]	; (800fff8 <HAL_ADC_MspInit+0x1f0>)
 800ff50:	f043 0304 	orr.w	r3, r3, #4
 800ff54:	6313      	str	r3, [r2, #48]	; 0x30
 800ff56:	4b28      	ldr	r3, [pc, #160]	; (800fff8 <HAL_ADC_MspInit+0x1f0>)
 800ff58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff5a:	f003 0304 	and.w	r3, r3, #4
 800ff5e:	60bb      	str	r3, [r7, #8]
 800ff60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800ff62:	2322      	movs	r3, #34	; 0x22
 800ff64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ff66:	2303      	movs	r3, #3
 800ff68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ff6e:	f107 031c 	add.w	r3, r7, #28
 800ff72:	4619      	mov	r1, r3
 800ff74:	4821      	ldr	r0, [pc, #132]	; (800fffc <HAL_ADC_MspInit+0x1f4>)
 800ff76:	f002 fabd 	bl	80124f4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800ff7a:	4b25      	ldr	r3, [pc, #148]	; (8010010 <HAL_ADC_MspInit+0x208>)
 800ff7c:	4a25      	ldr	r2, [pc, #148]	; (8010014 <HAL_ADC_MspInit+0x20c>)
 800ff7e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800ff80:	4b23      	ldr	r3, [pc, #140]	; (8010010 <HAL_ADC_MspInit+0x208>)
 800ff82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ff86:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ff88:	4b21      	ldr	r3, [pc, #132]	; (8010010 <HAL_ADC_MspInit+0x208>)
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ff8e:	4b20      	ldr	r3, [pc, #128]	; (8010010 <HAL_ADC_MspInit+0x208>)
 800ff90:	2200      	movs	r2, #0
 800ff92:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800ff94:	4b1e      	ldr	r3, [pc, #120]	; (8010010 <HAL_ADC_MspInit+0x208>)
 800ff96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ff9a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ff9c:	4b1c      	ldr	r3, [pc, #112]	; (8010010 <HAL_ADC_MspInit+0x208>)
 800ff9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ffa2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ffa4:	4b1a      	ldr	r3, [pc, #104]	; (8010010 <HAL_ADC_MspInit+0x208>)
 800ffa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ffaa:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800ffac:	4b18      	ldr	r3, [pc, #96]	; (8010010 <HAL_ADC_MspInit+0x208>)
 800ffae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ffb2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800ffb4:	4b16      	ldr	r3, [pc, #88]	; (8010010 <HAL_ADC_MspInit+0x208>)
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ffba:	4b15      	ldr	r3, [pc, #84]	; (8010010 <HAL_ADC_MspInit+0x208>)
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800ffc0:	4813      	ldr	r0, [pc, #76]	; (8010010 <HAL_ADC_MspInit+0x208>)
 800ffc2:	f001 fb2f 	bl	8011624 <HAL_DMA_Init>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d001      	beq.n	800ffd0 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 800ffcc:	f7ff feea 	bl	800fda4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	4a0f      	ldr	r2, [pc, #60]	; (8010010 <HAL_ADC_MspInit+0x208>)
 800ffd4:	639a      	str	r2, [r3, #56]	; 0x38
 800ffd6:	4a0e      	ldr	r2, [pc, #56]	; (8010010 <HAL_ADC_MspInit+0x208>)
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800ffdc:	2200      	movs	r2, #0
 800ffde:	2100      	movs	r1, #0
 800ffe0:	2012      	movs	r0, #18
 800ffe2:	f001 fae8 	bl	80115b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800ffe6:	2012      	movs	r0, #18
 800ffe8:	f001 fb01 	bl	80115ee <HAL_NVIC_EnableIRQ>
}
 800ffec:	bf00      	nop
 800ffee:	3730      	adds	r7, #48	; 0x30
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	40012000 	.word	0x40012000
 800fff8:	40023800 	.word	0x40023800
 800fffc:	40020800 	.word	0x40020800
 8010000:	40020400 	.word	0x40020400
 8010004:	200189f4 	.word	0x200189f4
 8010008:	40026410 	.word	0x40026410
 801000c:	40012100 	.word	0x40012100
 8010010:	20018fe4 	.word	0x20018fe4
 8010014:	40026440 	.word	0x40026440

08010018 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b08a      	sub	sp, #40	; 0x28
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010020:	f107 0314 	add.w	r3, r7, #20
 8010024:	2200      	movs	r2, #0
 8010026:	601a      	str	r2, [r3, #0]
 8010028:	605a      	str	r2, [r3, #4]
 801002a:	609a      	str	r2, [r3, #8]
 801002c:	60da      	str	r2, [r3, #12]
 801002e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	4a19      	ldr	r2, [pc, #100]	; (801009c <HAL_SPI_MspInit+0x84>)
 8010036:	4293      	cmp	r3, r2
 8010038:	d12c      	bne.n	8010094 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 801003a:	2300      	movs	r3, #0
 801003c:	613b      	str	r3, [r7, #16]
 801003e:	4b18      	ldr	r3, [pc, #96]	; (80100a0 <HAL_SPI_MspInit+0x88>)
 8010040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010042:	4a17      	ldr	r2, [pc, #92]	; (80100a0 <HAL_SPI_MspInit+0x88>)
 8010044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010048:	6413      	str	r3, [r2, #64]	; 0x40
 801004a:	4b15      	ldr	r3, [pc, #84]	; (80100a0 <HAL_SPI_MspInit+0x88>)
 801004c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801004e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010052:	613b      	str	r3, [r7, #16]
 8010054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010056:	2300      	movs	r3, #0
 8010058:	60fb      	str	r3, [r7, #12]
 801005a:	4b11      	ldr	r3, [pc, #68]	; (80100a0 <HAL_SPI_MspInit+0x88>)
 801005c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801005e:	4a10      	ldr	r2, [pc, #64]	; (80100a0 <HAL_SPI_MspInit+0x88>)
 8010060:	f043 0304 	orr.w	r3, r3, #4
 8010064:	6313      	str	r3, [r2, #48]	; 0x30
 8010066:	4b0e      	ldr	r3, [pc, #56]	; (80100a0 <HAL_SPI_MspInit+0x88>)
 8010068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801006a:	f003 0304 	and.w	r3, r3, #4
 801006e:	60fb      	str	r3, [r7, #12]
 8010070:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8010072:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010078:	2302      	movs	r3, #2
 801007a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801007c:	2300      	movs	r3, #0
 801007e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010080:	2303      	movs	r3, #3
 8010082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010084:	2306      	movs	r3, #6
 8010086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010088:	f107 0314 	add.w	r3, r7, #20
 801008c:	4619      	mov	r1, r3
 801008e:	4805      	ldr	r0, [pc, #20]	; (80100a4 <HAL_SPI_MspInit+0x8c>)
 8010090:	f002 fa30 	bl	80124f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8010094:	bf00      	nop
 8010096:	3728      	adds	r7, #40	; 0x28
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	40003c00 	.word	0x40003c00
 80100a0:	40023800 	.word	0x40023800
 80100a4:	40020800 	.word	0x40020800

080100a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b086      	sub	sp, #24
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	4a40      	ldr	r2, [pc, #256]	; (80101b8 <HAL_TIM_Base_MspInit+0x110>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d116      	bne.n	80100e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80100ba:	2300      	movs	r3, #0
 80100bc:	617b      	str	r3, [r7, #20]
 80100be:	4b3f      	ldr	r3, [pc, #252]	; (80101bc <HAL_TIM_Base_MspInit+0x114>)
 80100c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100c2:	4a3e      	ldr	r2, [pc, #248]	; (80101bc <HAL_TIM_Base_MspInit+0x114>)
 80100c4:	f043 0301 	orr.w	r3, r3, #1
 80100c8:	6453      	str	r3, [r2, #68]	; 0x44
 80100ca:	4b3c      	ldr	r3, [pc, #240]	; (80101bc <HAL_TIM_Base_MspInit+0x114>)
 80100cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100ce:	f003 0301 	and.w	r3, r3, #1
 80100d2:	617b      	str	r3, [r7, #20]
 80100d4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80100d6:	2200      	movs	r2, #0
 80100d8:	2101      	movs	r1, #1
 80100da:	2019      	movs	r0, #25
 80100dc:	f001 fa6b 	bl	80115b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80100e0:	2019      	movs	r0, #25
 80100e2:	f001 fa84 	bl	80115ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80100e6:	e062      	b.n	80101ae <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100f0:	d116      	bne.n	8010120 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80100f2:	2300      	movs	r3, #0
 80100f4:	613b      	str	r3, [r7, #16]
 80100f6:	4b31      	ldr	r3, [pc, #196]	; (80101bc <HAL_TIM_Base_MspInit+0x114>)
 80100f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100fa:	4a30      	ldr	r2, [pc, #192]	; (80101bc <HAL_TIM_Base_MspInit+0x114>)
 80100fc:	f043 0301 	orr.w	r3, r3, #1
 8010100:	6413      	str	r3, [r2, #64]	; 0x40
 8010102:	4b2e      	ldr	r3, [pc, #184]	; (80101bc <HAL_TIM_Base_MspInit+0x114>)
 8010104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010106:	f003 0301 	and.w	r3, r3, #1
 801010a:	613b      	str	r3, [r7, #16]
 801010c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801010e:	2200      	movs	r2, #0
 8010110:	2100      	movs	r1, #0
 8010112:	201c      	movs	r0, #28
 8010114:	f001 fa4f 	bl	80115b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8010118:	201c      	movs	r0, #28
 801011a:	f001 fa68 	bl	80115ee <HAL_NVIC_EnableIRQ>
}
 801011e:	e046      	b.n	80101ae <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	4a26      	ldr	r2, [pc, #152]	; (80101c0 <HAL_TIM_Base_MspInit+0x118>)
 8010126:	4293      	cmp	r3, r2
 8010128:	d116      	bne.n	8010158 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801012a:	2300      	movs	r3, #0
 801012c:	60fb      	str	r3, [r7, #12]
 801012e:	4b23      	ldr	r3, [pc, #140]	; (80101bc <HAL_TIM_Base_MspInit+0x114>)
 8010130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010132:	4a22      	ldr	r2, [pc, #136]	; (80101bc <HAL_TIM_Base_MspInit+0x114>)
 8010134:	f043 0308 	orr.w	r3, r3, #8
 8010138:	6413      	str	r3, [r2, #64]	; 0x40
 801013a:	4b20      	ldr	r3, [pc, #128]	; (80101bc <HAL_TIM_Base_MspInit+0x114>)
 801013c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801013e:	f003 0308 	and.w	r3, r3, #8
 8010142:	60fb      	str	r3, [r7, #12]
 8010144:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8010146:	2200      	movs	r2, #0
 8010148:	2100      	movs	r1, #0
 801014a:	2032      	movs	r0, #50	; 0x32
 801014c:	f001 fa33 	bl	80115b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8010150:	2032      	movs	r0, #50	; 0x32
 8010152:	f001 fa4c 	bl	80115ee <HAL_NVIC_EnableIRQ>
}
 8010156:	e02a      	b.n	80101ae <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	4a19      	ldr	r2, [pc, #100]	; (80101c4 <HAL_TIM_Base_MspInit+0x11c>)
 801015e:	4293      	cmp	r3, r2
 8010160:	d125      	bne.n	80101ae <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8010162:	2300      	movs	r3, #0
 8010164:	60bb      	str	r3, [r7, #8]
 8010166:	4b15      	ldr	r3, [pc, #84]	; (80101bc <HAL_TIM_Base_MspInit+0x114>)
 8010168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801016a:	4a14      	ldr	r2, [pc, #80]	; (80101bc <HAL_TIM_Base_MspInit+0x114>)
 801016c:	f043 0302 	orr.w	r3, r3, #2
 8010170:	6453      	str	r3, [r2, #68]	; 0x44
 8010172:	4b12      	ldr	r3, [pc, #72]	; (80101bc <HAL_TIM_Base_MspInit+0x114>)
 8010174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010176:	f003 0302 	and.w	r3, r3, #2
 801017a:	60bb      	str	r3, [r7, #8]
 801017c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 801017e:	2200      	movs	r2, #0
 8010180:	2102      	movs	r1, #2
 8010182:	202c      	movs	r0, #44	; 0x2c
 8010184:	f001 fa17 	bl	80115b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8010188:	202c      	movs	r0, #44	; 0x2c
 801018a:	f001 fa30 	bl	80115ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 801018e:	2200      	movs	r2, #0
 8010190:	2100      	movs	r1, #0
 8010192:	202d      	movs	r0, #45	; 0x2d
 8010194:	f001 fa0f 	bl	80115b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8010198:	202d      	movs	r0, #45	; 0x2d
 801019a:	f001 fa28 	bl	80115ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 801019e:	2200      	movs	r2, #0
 80101a0:	2100      	movs	r1, #0
 80101a2:	202e      	movs	r0, #46	; 0x2e
 80101a4:	f001 fa07 	bl	80115b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80101a8:	202e      	movs	r0, #46	; 0x2e
 80101aa:	f001 fa20 	bl	80115ee <HAL_NVIC_EnableIRQ>
}
 80101ae:	bf00      	nop
 80101b0:	3718      	adds	r7, #24
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}
 80101b6:	bf00      	nop
 80101b8:	40010000 	.word	0x40010000
 80101bc:	40023800 	.word	0x40023800
 80101c0:	40000c00 	.word	0x40000c00
 80101c4:	40010400 	.word	0x40010400

080101c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b08c      	sub	sp, #48	; 0x30
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80101d0:	f107 031c 	add.w	r3, r7, #28
 80101d4:	2200      	movs	r2, #0
 80101d6:	601a      	str	r2, [r3, #0]
 80101d8:	605a      	str	r2, [r3, #4]
 80101da:	609a      	str	r2, [r3, #8]
 80101dc:	60da      	str	r2, [r3, #12]
 80101de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	4a3a      	ldr	r2, [pc, #232]	; (80102d0 <HAL_TIM_Encoder_MspInit+0x108>)
 80101e6:	4293      	cmp	r3, r2
 80101e8:	d134      	bne.n	8010254 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80101ea:	2300      	movs	r3, #0
 80101ec:	61bb      	str	r3, [r7, #24]
 80101ee:	4b39      	ldr	r3, [pc, #228]	; (80102d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80101f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101f2:	4a38      	ldr	r2, [pc, #224]	; (80102d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80101f4:	f043 0302 	orr.w	r3, r3, #2
 80101f8:	6413      	str	r3, [r2, #64]	; 0x40
 80101fa:	4b36      	ldr	r3, [pc, #216]	; (80102d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80101fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101fe:	f003 0302 	and.w	r3, r3, #2
 8010202:	61bb      	str	r3, [r7, #24]
 8010204:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010206:	2300      	movs	r3, #0
 8010208:	617b      	str	r3, [r7, #20]
 801020a:	4b32      	ldr	r3, [pc, #200]	; (80102d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 801020c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801020e:	4a31      	ldr	r2, [pc, #196]	; (80102d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010210:	f043 0301 	orr.w	r3, r3, #1
 8010214:	6313      	str	r3, [r2, #48]	; 0x30
 8010216:	4b2f      	ldr	r3, [pc, #188]	; (80102d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801021a:	f003 0301 	and.w	r3, r3, #1
 801021e:	617b      	str	r3, [r7, #20]
 8010220:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010222:	23c0      	movs	r3, #192	; 0xc0
 8010224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010226:	2302      	movs	r3, #2
 8010228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801022a:	2300      	movs	r3, #0
 801022c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801022e:	2300      	movs	r3, #0
 8010230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8010232:	2302      	movs	r3, #2
 8010234:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010236:	f107 031c 	add.w	r3, r7, #28
 801023a:	4619      	mov	r1, r3
 801023c:	4826      	ldr	r0, [pc, #152]	; (80102d8 <HAL_TIM_Encoder_MspInit+0x110>)
 801023e:	f002 f959 	bl	80124f4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8010242:	2200      	movs	r2, #0
 8010244:	2100      	movs	r1, #0
 8010246:	201d      	movs	r0, #29
 8010248:	f001 f9b5 	bl	80115b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 801024c:	201d      	movs	r0, #29
 801024e:	f001 f9ce 	bl	80115ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8010252:	e038      	b.n	80102c6 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	4a20      	ldr	r2, [pc, #128]	; (80102dc <HAL_TIM_Encoder_MspInit+0x114>)
 801025a:	4293      	cmp	r3, r2
 801025c:	d133      	bne.n	80102c6 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 801025e:	2300      	movs	r3, #0
 8010260:	613b      	str	r3, [r7, #16]
 8010262:	4b1c      	ldr	r3, [pc, #112]	; (80102d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010266:	4a1b      	ldr	r2, [pc, #108]	; (80102d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010268:	f043 0304 	orr.w	r3, r3, #4
 801026c:	6413      	str	r3, [r2, #64]	; 0x40
 801026e:	4b19      	ldr	r3, [pc, #100]	; (80102d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010272:	f003 0304 	and.w	r3, r3, #4
 8010276:	613b      	str	r3, [r7, #16]
 8010278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801027a:	2300      	movs	r3, #0
 801027c:	60fb      	str	r3, [r7, #12]
 801027e:	4b15      	ldr	r3, [pc, #84]	; (80102d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010282:	4a14      	ldr	r2, [pc, #80]	; (80102d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010284:	f043 0302 	orr.w	r3, r3, #2
 8010288:	6313      	str	r3, [r2, #48]	; 0x30
 801028a:	4b12      	ldr	r3, [pc, #72]	; (80102d4 <HAL_TIM_Encoder_MspInit+0x10c>)
 801028c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801028e:	f003 0302 	and.w	r3, r3, #2
 8010292:	60fb      	str	r3, [r7, #12]
 8010294:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010296:	23c0      	movs	r3, #192	; 0xc0
 8010298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801029a:	2302      	movs	r3, #2
 801029c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801029e:	2300      	movs	r3, #0
 80102a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80102a2:	2300      	movs	r3, #0
 80102a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80102a6:	2302      	movs	r3, #2
 80102a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80102aa:	f107 031c 	add.w	r3, r7, #28
 80102ae:	4619      	mov	r1, r3
 80102b0:	480b      	ldr	r0, [pc, #44]	; (80102e0 <HAL_TIM_Encoder_MspInit+0x118>)
 80102b2:	f002 f91f 	bl	80124f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80102b6:	2200      	movs	r2, #0
 80102b8:	2100      	movs	r1, #0
 80102ba:	201e      	movs	r0, #30
 80102bc:	f001 f97b 	bl	80115b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80102c0:	201e      	movs	r0, #30
 80102c2:	f001 f994 	bl	80115ee <HAL_NVIC_EnableIRQ>
}
 80102c6:	bf00      	nop
 80102c8:	3730      	adds	r7, #48	; 0x30
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
 80102ce:	bf00      	nop
 80102d0:	40000400 	.word	0x40000400
 80102d4:	40023800 	.word	0x40023800
 80102d8:	40020000 	.word	0x40020000
 80102dc:	40000800 	.word	0x40000800
 80102e0:	40020400 	.word	0x40020400

080102e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b08c      	sub	sp, #48	; 0x30
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102ec:	f107 031c 	add.w	r3, r7, #28
 80102f0:	2200      	movs	r2, #0
 80102f2:	601a      	str	r2, [r3, #0]
 80102f4:	605a      	str	r2, [r3, #4]
 80102f6:	609a      	str	r2, [r3, #8]
 80102f8:	60da      	str	r2, [r3, #12]
 80102fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010304:	d11e      	bne.n	8010344 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010306:	2300      	movs	r3, #0
 8010308:	61bb      	str	r3, [r7, #24]
 801030a:	4b43      	ldr	r3, [pc, #268]	; (8010418 <HAL_TIM_MspPostInit+0x134>)
 801030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801030e:	4a42      	ldr	r2, [pc, #264]	; (8010418 <HAL_TIM_MspPostInit+0x134>)
 8010310:	f043 0301 	orr.w	r3, r3, #1
 8010314:	6313      	str	r3, [r2, #48]	; 0x30
 8010316:	4b40      	ldr	r3, [pc, #256]	; (8010418 <HAL_TIM_MspPostInit+0x134>)
 8010318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801031a:	f003 0301 	and.w	r3, r3, #1
 801031e:	61bb      	str	r3, [r7, #24]
 8010320:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8010322:	2308      	movs	r3, #8
 8010324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010326:	2302      	movs	r3, #2
 8010328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801032a:	2300      	movs	r3, #0
 801032c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801032e:	2303      	movs	r3, #3
 8010330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8010332:	2301      	movs	r3, #1
 8010334:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010336:	f107 031c 	add.w	r3, r7, #28
 801033a:	4619      	mov	r1, r3
 801033c:	4837      	ldr	r0, [pc, #220]	; (801041c <HAL_TIM_MspPostInit+0x138>)
 801033e:	f002 f8d9 	bl	80124f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8010342:	e064      	b.n	801040e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	4a35      	ldr	r2, [pc, #212]	; (8010420 <HAL_TIM_MspPostInit+0x13c>)
 801034a:	4293      	cmp	r3, r2
 801034c:	d11e      	bne.n	801038c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801034e:	2300      	movs	r3, #0
 8010350:	617b      	str	r3, [r7, #20]
 8010352:	4b31      	ldr	r3, [pc, #196]	; (8010418 <HAL_TIM_MspPostInit+0x134>)
 8010354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010356:	4a30      	ldr	r2, [pc, #192]	; (8010418 <HAL_TIM_MspPostInit+0x134>)
 8010358:	f043 0301 	orr.w	r3, r3, #1
 801035c:	6313      	str	r3, [r2, #48]	; 0x30
 801035e:	4b2e      	ldr	r3, [pc, #184]	; (8010418 <HAL_TIM_MspPostInit+0x134>)
 8010360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010362:	f003 0301 	and.w	r3, r3, #1
 8010366:	617b      	str	r3, [r7, #20]
 8010368:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801036a:	2302      	movs	r3, #2
 801036c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801036e:	2302      	movs	r3, #2
 8010370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010372:	2300      	movs	r3, #0
 8010374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010376:	2300      	movs	r3, #0
 8010378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 801037a:	2302      	movs	r3, #2
 801037c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801037e:	f107 031c 	add.w	r3, r7, #28
 8010382:	4619      	mov	r1, r3
 8010384:	4825      	ldr	r0, [pc, #148]	; (801041c <HAL_TIM_MspPostInit+0x138>)
 8010386:	f002 f8b5 	bl	80124f4 <HAL_GPIO_Init>
}
 801038a:	e040      	b.n	801040e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	4a24      	ldr	r2, [pc, #144]	; (8010424 <HAL_TIM_MspPostInit+0x140>)
 8010392:	4293      	cmp	r3, r2
 8010394:	d13b      	bne.n	801040e <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010396:	2300      	movs	r3, #0
 8010398:	613b      	str	r3, [r7, #16]
 801039a:	4b1f      	ldr	r3, [pc, #124]	; (8010418 <HAL_TIM_MspPostInit+0x134>)
 801039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801039e:	4a1e      	ldr	r2, [pc, #120]	; (8010418 <HAL_TIM_MspPostInit+0x134>)
 80103a0:	f043 0301 	orr.w	r3, r3, #1
 80103a4:	6313      	str	r3, [r2, #48]	; 0x30
 80103a6:	4b1c      	ldr	r3, [pc, #112]	; (8010418 <HAL_TIM_MspPostInit+0x134>)
 80103a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103aa:	f003 0301 	and.w	r3, r3, #1
 80103ae:	613b      	str	r3, [r7, #16]
 80103b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80103b2:	2300      	movs	r3, #0
 80103b4:	60fb      	str	r3, [r7, #12]
 80103b6:	4b18      	ldr	r3, [pc, #96]	; (8010418 <HAL_TIM_MspPostInit+0x134>)
 80103b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103ba:	4a17      	ldr	r2, [pc, #92]	; (8010418 <HAL_TIM_MspPostInit+0x134>)
 80103bc:	f043 0304 	orr.w	r3, r3, #4
 80103c0:	6313      	str	r3, [r2, #48]	; 0x30
 80103c2:	4b15      	ldr	r3, [pc, #84]	; (8010418 <HAL_TIM_MspPostInit+0x134>)
 80103c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103c6:	f003 0304 	and.w	r3, r3, #4
 80103ca:	60fb      	str	r3, [r7, #12]
 80103cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80103ce:	2320      	movs	r3, #32
 80103d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103d2:	2302      	movs	r3, #2
 80103d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103d6:	2300      	movs	r3, #0
 80103d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103da:	2300      	movs	r3, #0
 80103dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80103de:	2303      	movs	r3, #3
 80103e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103e2:	f107 031c 	add.w	r3, r7, #28
 80103e6:	4619      	mov	r1, r3
 80103e8:	480c      	ldr	r0, [pc, #48]	; (801041c <HAL_TIM_MspPostInit+0x138>)
 80103ea:	f002 f883 	bl	80124f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80103ee:	2340      	movs	r3, #64	; 0x40
 80103f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103f2:	2302      	movs	r3, #2
 80103f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103f6:	2300      	movs	r3, #0
 80103f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103fa:	2300      	movs	r3, #0
 80103fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80103fe:	2303      	movs	r3, #3
 8010400:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010402:	f107 031c 	add.w	r3, r7, #28
 8010406:	4619      	mov	r1, r3
 8010408:	4807      	ldr	r0, [pc, #28]	; (8010428 <HAL_TIM_MspPostInit+0x144>)
 801040a:	f002 f873 	bl	80124f4 <HAL_GPIO_Init>
}
 801040e:	bf00      	nop
 8010410:	3730      	adds	r7, #48	; 0x30
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	40023800 	.word	0x40023800
 801041c:	40020000 	.word	0x40020000
 8010420:	40000c00 	.word	0x40000c00
 8010424:	40010400 	.word	0x40010400
 8010428:	40020800 	.word	0x40020800

0801042c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b08a      	sub	sp, #40	; 0x28
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010434:	f107 0314 	add.w	r3, r7, #20
 8010438:	2200      	movs	r2, #0
 801043a:	601a      	str	r2, [r3, #0]
 801043c:	605a      	str	r2, [r3, #4]
 801043e:	609a      	str	r2, [r3, #8]
 8010440:	60da      	str	r2, [r3, #12]
 8010442:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	4a19      	ldr	r2, [pc, #100]	; (80104b0 <HAL_UART_MspInit+0x84>)
 801044a:	4293      	cmp	r3, r2
 801044c:	d12c      	bne.n	80104a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801044e:	2300      	movs	r3, #0
 8010450:	613b      	str	r3, [r7, #16]
 8010452:	4b18      	ldr	r3, [pc, #96]	; (80104b4 <HAL_UART_MspInit+0x88>)
 8010454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010456:	4a17      	ldr	r2, [pc, #92]	; (80104b4 <HAL_UART_MspInit+0x88>)
 8010458:	f043 0310 	orr.w	r3, r3, #16
 801045c:	6453      	str	r3, [r2, #68]	; 0x44
 801045e:	4b15      	ldr	r3, [pc, #84]	; (80104b4 <HAL_UART_MspInit+0x88>)
 8010460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010462:	f003 0310 	and.w	r3, r3, #16
 8010466:	613b      	str	r3, [r7, #16]
 8010468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801046a:	2300      	movs	r3, #0
 801046c:	60fb      	str	r3, [r7, #12]
 801046e:	4b11      	ldr	r3, [pc, #68]	; (80104b4 <HAL_UART_MspInit+0x88>)
 8010470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010472:	4a10      	ldr	r2, [pc, #64]	; (80104b4 <HAL_UART_MspInit+0x88>)
 8010474:	f043 0301 	orr.w	r3, r3, #1
 8010478:	6313      	str	r3, [r2, #48]	; 0x30
 801047a:	4b0e      	ldr	r3, [pc, #56]	; (80104b4 <HAL_UART_MspInit+0x88>)
 801047c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801047e:	f003 0301 	and.w	r3, r3, #1
 8010482:	60fb      	str	r3, [r7, #12]
 8010484:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8010486:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801048a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801048c:	2302      	movs	r3, #2
 801048e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010490:	2300      	movs	r3, #0
 8010492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010494:	2303      	movs	r3, #3
 8010496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8010498:	2307      	movs	r3, #7
 801049a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801049c:	f107 0314 	add.w	r3, r7, #20
 80104a0:	4619      	mov	r1, r3
 80104a2:	4805      	ldr	r0, [pc, #20]	; (80104b8 <HAL_UART_MspInit+0x8c>)
 80104a4:	f002 f826 	bl	80124f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80104a8:	bf00      	nop
 80104aa:	3728      	adds	r7, #40	; 0x28
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}
 80104b0:	40011000 	.word	0x40011000
 80104b4:	40023800 	.word	0x40023800
 80104b8:	40020000 	.word	0x40020000

080104bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80104bc:	b480      	push	{r7}
 80104be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80104c0:	e7fe      	b.n	80104c0 <NMI_Handler+0x4>

080104c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80104c2:	b480      	push	{r7}
 80104c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80104c6:	e7fe      	b.n	80104c6 <HardFault_Handler+0x4>

080104c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80104c8:	b480      	push	{r7}
 80104ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80104cc:	e7fe      	b.n	80104cc <MemManage_Handler+0x4>

080104ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80104ce:	b480      	push	{r7}
 80104d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80104d2:	e7fe      	b.n	80104d2 <BusFault_Handler+0x4>

080104d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80104d4:	b480      	push	{r7}
 80104d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80104d8:	e7fe      	b.n	80104d8 <UsageFault_Handler+0x4>

080104da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80104da:	b480      	push	{r7}
 80104dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80104de:	bf00      	nop
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80104e8:	b480      	push	{r7}
 80104ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80104ec:	bf00      	nop
 80104ee:	46bd      	mov	sp, r7
 80104f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f4:	4770      	bx	lr

080104f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80104f6:	b480      	push	{r7}
 80104f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80104fa:	bf00      	nop
 80104fc:	46bd      	mov	sp, r7
 80104fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010502:	4770      	bx	lr

08010504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010508:	f000 f9b0 	bl	801086c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801050c:	bf00      	nop
 801050e:	bd80      	pop	{r7, pc}

08010510 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8010514:	f001 fcb8 	bl	8011e88 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8010518:	bf00      	nop
 801051a:	bd80      	pop	{r7, pc}

0801051c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8010520:	4803      	ldr	r0, [pc, #12]	; (8010530 <ADC_IRQHandler+0x14>)
 8010522:	f000 fa28 	bl	8010976 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8010526:	4803      	ldr	r0, [pc, #12]	; (8010534 <ADC_IRQHandler+0x18>)
 8010528:	f000 fa25 	bl	8010976 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 801052c:	bf00      	nop
 801052e:	bd80      	pop	{r7, pc}
 8010530:	2001857c 	.word	0x2001857c
 8010534:	2001843c 	.word	0x2001843c

08010538 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 801053c:	4802      	ldr	r0, [pc, #8]	; (8010548 <TIM1_UP_TIM10_IRQHandler+0x10>)
 801053e:	f003 febe 	bl	80142be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8010542:	bf00      	nop
 8010544:	bd80      	pop	{r7, pc}
 8010546:	bf00      	nop
 8010548:	20018ad0 	.word	0x20018ad0

0801054c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8010550:	4802      	ldr	r0, [pc, #8]	; (801055c <TIM2_IRQHandler+0x10>)
 8010552:	f003 feb4 	bl	80142be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8010556:	bf00      	nop
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop
 801055c:	20018fa0 	.word	0x20018fa0

08010560 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8010564:	4802      	ldr	r0, [pc, #8]	; (8010570 <TIM3_IRQHandler+0x10>)
 8010566:	f003 feaa 	bl	80142be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 801056a:	bf00      	nop
 801056c:	bd80      	pop	{r7, pc}
 801056e:	bf00      	nop
 8010570:	200184d8 	.word	0x200184d8

08010574 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8010578:	4802      	ldr	r0, [pc, #8]	; (8010584 <TIM4_IRQHandler+0x10>)
 801057a:	f003 fea0 	bl	80142be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 801057e:	bf00      	nop
 8010580:	bd80      	pop	{r7, pc}
 8010582:	bf00      	nop
 8010584:	200183fc 	.word	0x200183fc

08010588 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 801058c:	4802      	ldr	r0, [pc, #8]	; (8010598 <TIM8_UP_TIM13_IRQHandler+0x10>)
 801058e:	f003 fe96 	bl	80142be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8010592:	bf00      	nop
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop
 8010598:	200183b8 	.word	0x200183b8

0801059c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80105a0:	4802      	ldr	r0, [pc, #8]	; (80105ac <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80105a2:	f003 fe8c 	bl	80142be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80105a6:	bf00      	nop
 80105a8:	bd80      	pop	{r7, pc}
 80105aa:	bf00      	nop
 80105ac:	200183b8 	.word	0x200183b8

080105b0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80105b4:	4802      	ldr	r0, [pc, #8]	; (80105c0 <TIM8_CC_IRQHandler+0x10>)
 80105b6:	f003 fe82 	bl	80142be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80105ba:	bf00      	nop
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	bf00      	nop
 80105c0:	200183b8 	.word	0x200183b8

080105c4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80105c8:	4802      	ldr	r0, [pc, #8]	; (80105d4 <TIM5_IRQHandler+0x10>)
 80105ca:	f003 fe78 	bl	80142be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80105ce:	bf00      	nop
 80105d0:	bd80      	pop	{r7, pc}
 80105d2:	bf00      	nop
 80105d4:	20018494 	.word	0x20018494

080105d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80105dc:	4802      	ldr	r0, [pc, #8]	; (80105e8 <DMA2_Stream0_IRQHandler+0x10>)
 80105de:	f001 f997 	bl	8011910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80105e2:	bf00      	nop
 80105e4:	bd80      	pop	{r7, pc}
 80105e6:	bf00      	nop
 80105e8:	200189f4 	.word	0x200189f4

080105ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80105f0:	4802      	ldr	r0, [pc, #8]	; (80105fc <DMA2_Stream2_IRQHandler+0x10>)
 80105f2:	f001 f98d 	bl	8011910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80105f6:	bf00      	nop
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop
 80105fc:	20018fe4 	.word	0x20018fe4

08010600 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b086      	sub	sp, #24
 8010604:	af00      	add	r7, sp, #0
 8010606:	60f8      	str	r0, [r7, #12]
 8010608:	60b9      	str	r1, [r7, #8]
 801060a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801060c:	2300      	movs	r3, #0
 801060e:	617b      	str	r3, [r7, #20]
 8010610:	e00a      	b.n	8010628 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010612:	f3af 8000 	nop.w
 8010616:	4601      	mov	r1, r0
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	1c5a      	adds	r2, r3, #1
 801061c:	60ba      	str	r2, [r7, #8]
 801061e:	b2ca      	uxtb	r2, r1
 8010620:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	3301      	adds	r3, #1
 8010626:	617b      	str	r3, [r7, #20]
 8010628:	697a      	ldr	r2, [r7, #20]
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	429a      	cmp	r2, r3
 801062e:	dbf0      	blt.n	8010612 <_read+0x12>
	}

return len;
 8010630:	687b      	ldr	r3, [r7, #4]
}
 8010632:	4618      	mov	r0, r3
 8010634:	3718      	adds	r7, #24
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801063a:	b580      	push	{r7, lr}
 801063c:	b086      	sub	sp, #24
 801063e:	af00      	add	r7, sp, #0
 8010640:	60f8      	str	r0, [r7, #12]
 8010642:	60b9      	str	r1, [r7, #8]
 8010644:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010646:	2300      	movs	r3, #0
 8010648:	617b      	str	r3, [r7, #20]
 801064a:	e009      	b.n	8010660 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	1c5a      	adds	r2, r3, #1
 8010650:	60ba      	str	r2, [r7, #8]
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	4618      	mov	r0, r3
 8010656:	f7f9 f9d5 	bl	8009a04 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	3301      	adds	r3, #1
 801065e:	617b      	str	r3, [r7, #20]
 8010660:	697a      	ldr	r2, [r7, #20]
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	429a      	cmp	r2, r3
 8010666:	dbf1      	blt.n	801064c <_write+0x12>
	}
	return len;
 8010668:	687b      	ldr	r3, [r7, #4]
}
 801066a:	4618      	mov	r0, r3
 801066c:	3718      	adds	r7, #24
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}

08010672 <_close>:

int _close(int file)
{
 8010672:	b480      	push	{r7}
 8010674:	b083      	sub	sp, #12
 8010676:	af00      	add	r7, sp, #0
 8010678:	6078      	str	r0, [r7, #4]
	return -1;
 801067a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801067e:	4618      	mov	r0, r3
 8010680:	370c      	adds	r7, #12
 8010682:	46bd      	mov	sp, r7
 8010684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010688:	4770      	bx	lr

0801068a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801068a:	b480      	push	{r7}
 801068c:	b083      	sub	sp, #12
 801068e:	af00      	add	r7, sp, #0
 8010690:	6078      	str	r0, [r7, #4]
 8010692:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801069a:	605a      	str	r2, [r3, #4]
	return 0;
 801069c:	2300      	movs	r3, #0
}
 801069e:	4618      	mov	r0, r3
 80106a0:	370c      	adds	r7, #12
 80106a2:	46bd      	mov	sp, r7
 80106a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a8:	4770      	bx	lr

080106aa <_isatty>:

int _isatty(int file)
{
 80106aa:	b480      	push	{r7}
 80106ac:	b083      	sub	sp, #12
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	6078      	str	r0, [r7, #4]
	return 1;
 80106b2:	2301      	movs	r3, #1
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	370c      	adds	r7, #12
 80106b8:	46bd      	mov	sp, r7
 80106ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106be:	4770      	bx	lr

080106c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80106c0:	b480      	push	{r7}
 80106c2:	b085      	sub	sp, #20
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	60f8      	str	r0, [r7, #12]
 80106c8:	60b9      	str	r1, [r7, #8]
 80106ca:	607a      	str	r2, [r7, #4]
	return 0;
 80106cc:	2300      	movs	r3, #0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3714      	adds	r7, #20
 80106d2:	46bd      	mov	sp, r7
 80106d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d8:	4770      	bx	lr
	...

080106dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b086      	sub	sp, #24
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80106e4:	4a14      	ldr	r2, [pc, #80]	; (8010738 <_sbrk+0x5c>)
 80106e6:	4b15      	ldr	r3, [pc, #84]	; (801073c <_sbrk+0x60>)
 80106e8:	1ad3      	subs	r3, r2, r3
 80106ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80106f0:	4b13      	ldr	r3, [pc, #76]	; (8010740 <_sbrk+0x64>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d102      	bne.n	80106fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80106f8:	4b11      	ldr	r3, [pc, #68]	; (8010740 <_sbrk+0x64>)
 80106fa:	4a12      	ldr	r2, [pc, #72]	; (8010744 <_sbrk+0x68>)
 80106fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80106fe:	4b10      	ldr	r3, [pc, #64]	; (8010740 <_sbrk+0x64>)
 8010700:	681a      	ldr	r2, [r3, #0]
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	4413      	add	r3, r2
 8010706:	693a      	ldr	r2, [r7, #16]
 8010708:	429a      	cmp	r2, r3
 801070a:	d207      	bcs.n	801071c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801070c:	f005 fabe 	bl	8015c8c <__errno>
 8010710:	4602      	mov	r2, r0
 8010712:	230c      	movs	r3, #12
 8010714:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8010716:	f04f 33ff 	mov.w	r3, #4294967295
 801071a:	e009      	b.n	8010730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801071c:	4b08      	ldr	r3, [pc, #32]	; (8010740 <_sbrk+0x64>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010722:	4b07      	ldr	r3, [pc, #28]	; (8010740 <_sbrk+0x64>)
 8010724:	681a      	ldr	r2, [r3, #0]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	4413      	add	r3, r2
 801072a:	4a05      	ldr	r2, [pc, #20]	; (8010740 <_sbrk+0x64>)
 801072c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801072e:	68fb      	ldr	r3, [r7, #12]
}
 8010730:	4618      	mov	r0, r3
 8010732:	3718      	adds	r7, #24
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	20020000 	.word	0x20020000
 801073c:	00000400 	.word	0x00000400
 8010740:	20018360 	.word	0x20018360
 8010744:	20019078 	.word	0x20019078

08010748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010748:	b480      	push	{r7}
 801074a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801074c:	4b08      	ldr	r3, [pc, #32]	; (8010770 <SystemInit+0x28>)
 801074e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010752:	4a07      	ldr	r2, [pc, #28]	; (8010770 <SystemInit+0x28>)
 8010754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801075c:	4b04      	ldr	r3, [pc, #16]	; (8010770 <SystemInit+0x28>)
 801075e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010762:	609a      	str	r2, [r3, #8]
#endif
}
 8010764:	bf00      	nop
 8010766:	46bd      	mov	sp, r7
 8010768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076c:	4770      	bx	lr
 801076e:	bf00      	nop
 8010770:	e000ed00 	.word	0xe000ed00

08010774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80107ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010778:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801077a:	e003      	b.n	8010784 <LoopCopyDataInit>

0801077c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801077c:	4b0c      	ldr	r3, [pc, #48]	; (80107b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801077e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010780:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010782:	3104      	adds	r1, #4

08010784 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010784:	480b      	ldr	r0, [pc, #44]	; (80107b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010786:	4b0c      	ldr	r3, [pc, #48]	; (80107b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010788:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801078a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801078c:	d3f6      	bcc.n	801077c <CopyDataInit>
  ldr  r2, =_sbss
 801078e:	4a0b      	ldr	r2, [pc, #44]	; (80107bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010790:	e002      	b.n	8010798 <LoopFillZerobss>

08010792 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010792:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010794:	f842 3b04 	str.w	r3, [r2], #4

08010798 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010798:	4b09      	ldr	r3, [pc, #36]	; (80107c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801079a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801079c:	d3f9      	bcc.n	8010792 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801079e:	f7ff ffd3 	bl	8010748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80107a2:	f005 fa79 	bl	8015c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80107a6:	f7fe fd71 	bl	800f28c <main>
  bx  lr    
 80107aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80107ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80107b0:	080188b8 	.word	0x080188b8
  ldr  r0, =_sdata
 80107b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80107b8:	20000250 	.word	0x20000250
  ldr  r2, =_sbss
 80107bc:	20000250 	.word	0x20000250
  ldr  r3, = _ebss
 80107c0:	20019074 	.word	0x20019074

080107c4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80107c4:	e7fe      	b.n	80107c4 <CAN1_RX0_IRQHandler>
	...

080107c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80107cc:	4b0e      	ldr	r3, [pc, #56]	; (8010808 <HAL_Init+0x40>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	4a0d      	ldr	r2, [pc, #52]	; (8010808 <HAL_Init+0x40>)
 80107d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80107d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80107d8:	4b0b      	ldr	r3, [pc, #44]	; (8010808 <HAL_Init+0x40>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	4a0a      	ldr	r2, [pc, #40]	; (8010808 <HAL_Init+0x40>)
 80107de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80107e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80107e4:	4b08      	ldr	r3, [pc, #32]	; (8010808 <HAL_Init+0x40>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	4a07      	ldr	r2, [pc, #28]	; (8010808 <HAL_Init+0x40>)
 80107ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80107ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80107f0:	2003      	movs	r0, #3
 80107f2:	f000 fed5 	bl	80115a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80107f6:	2000      	movs	r0, #0
 80107f8:	f000 f808 	bl	801080c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80107fc:	f7ff fad6 	bl	800fdac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010800:	2300      	movs	r3, #0
}
 8010802:	4618      	mov	r0, r3
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop
 8010808:	40023c00 	.word	0x40023c00

0801080c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b082      	sub	sp, #8
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010814:	4b12      	ldr	r3, [pc, #72]	; (8010860 <HAL_InitTick+0x54>)
 8010816:	681a      	ldr	r2, [r3, #0]
 8010818:	4b12      	ldr	r3, [pc, #72]	; (8010864 <HAL_InitTick+0x58>)
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	4619      	mov	r1, r3
 801081e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010822:	fbb3 f3f1 	udiv	r3, r3, r1
 8010826:	fbb2 f3f3 	udiv	r3, r2, r3
 801082a:	4618      	mov	r0, r3
 801082c:	f000 feed 	bl	801160a <HAL_SYSTICK_Config>
 8010830:	4603      	mov	r3, r0
 8010832:	2b00      	cmp	r3, #0
 8010834:	d001      	beq.n	801083a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010836:	2301      	movs	r3, #1
 8010838:	e00e      	b.n	8010858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2b0f      	cmp	r3, #15
 801083e:	d80a      	bhi.n	8010856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010840:	2200      	movs	r2, #0
 8010842:	6879      	ldr	r1, [r7, #4]
 8010844:	f04f 30ff 	mov.w	r0, #4294967295
 8010848:	f000 feb5 	bl	80115b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801084c:	4a06      	ldr	r2, [pc, #24]	; (8010868 <HAL_InitTick+0x5c>)
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010852:	2300      	movs	r3, #0
 8010854:	e000      	b.n	8010858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010856:	2301      	movs	r3, #1
}
 8010858:	4618      	mov	r0, r3
 801085a:	3708      	adds	r7, #8
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}
 8010860:	20000074 	.word	0x20000074
 8010864:	2000007c 	.word	0x2000007c
 8010868:	20000078 	.word	0x20000078

0801086c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801086c:	b480      	push	{r7}
 801086e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010870:	4b06      	ldr	r3, [pc, #24]	; (801088c <HAL_IncTick+0x20>)
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	461a      	mov	r2, r3
 8010876:	4b06      	ldr	r3, [pc, #24]	; (8010890 <HAL_IncTick+0x24>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	4413      	add	r3, r2
 801087c:	4a04      	ldr	r2, [pc, #16]	; (8010890 <HAL_IncTick+0x24>)
 801087e:	6013      	str	r3, [r2, #0]
}
 8010880:	bf00      	nop
 8010882:	46bd      	mov	sp, r7
 8010884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010888:	4770      	bx	lr
 801088a:	bf00      	nop
 801088c:	2000007c 	.word	0x2000007c
 8010890:	2001904c 	.word	0x2001904c

08010894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010894:	b480      	push	{r7}
 8010896:	af00      	add	r7, sp, #0
  return uwTick;
 8010898:	4b03      	ldr	r3, [pc, #12]	; (80108a8 <HAL_GetTick+0x14>)
 801089a:	681b      	ldr	r3, [r3, #0]
}
 801089c:	4618      	mov	r0, r3
 801089e:	46bd      	mov	sp, r7
 80108a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a4:	4770      	bx	lr
 80108a6:	bf00      	nop
 80108a8:	2001904c 	.word	0x2001904c

080108ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b084      	sub	sp, #16
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80108b4:	f7ff ffee 	bl	8010894 <HAL_GetTick>
 80108b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108c4:	d005      	beq.n	80108d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80108c6:	4b09      	ldr	r3, [pc, #36]	; (80108ec <HAL_Delay+0x40>)
 80108c8:	781b      	ldrb	r3, [r3, #0]
 80108ca:	461a      	mov	r2, r3
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	4413      	add	r3, r2
 80108d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80108d2:	bf00      	nop
 80108d4:	f7ff ffde 	bl	8010894 <HAL_GetTick>
 80108d8:	4602      	mov	r2, r0
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	1ad3      	subs	r3, r2, r3
 80108de:	68fa      	ldr	r2, [r7, #12]
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d8f7      	bhi.n	80108d4 <HAL_Delay+0x28>
  {
  }
}
 80108e4:	bf00      	nop
 80108e6:	3710      	adds	r7, #16
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}
 80108ec:	2000007c 	.word	0x2000007c

080108f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b084      	sub	sp, #16
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80108f8:	2300      	movs	r3, #0
 80108fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d101      	bne.n	8010906 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8010902:	2301      	movs	r3, #1
 8010904:	e033      	b.n	801096e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801090a:	2b00      	cmp	r3, #0
 801090c:	d109      	bne.n	8010922 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f7ff fa7a 	bl	800fe08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2200      	movs	r2, #0
 8010918:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2200      	movs	r2, #0
 801091e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010926:	f003 0310 	and.w	r3, r3, #16
 801092a:	2b00      	cmp	r3, #0
 801092c:	d118      	bne.n	8010960 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010932:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010936:	f023 0302 	bic.w	r3, r3, #2
 801093a:	f043 0202 	orr.w	r2, r3, #2
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f000 fbd4 	bl	80110f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2200      	movs	r2, #0
 801094c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010952:	f023 0303 	bic.w	r3, r3, #3
 8010956:	f043 0201 	orr.w	r2, r3, #1
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	641a      	str	r2, [r3, #64]	; 0x40
 801095e:	e001      	b.n	8010964 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8010960:	2301      	movs	r3, #1
 8010962:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2200      	movs	r2, #0
 8010968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801096c:	7bfb      	ldrb	r3, [r7, #15]
}
 801096e:	4618      	mov	r0, r3
 8010970:	3710      	adds	r7, #16
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}

08010976 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8010976:	b580      	push	{r7, lr}
 8010978:	b084      	sub	sp, #16
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 801097e:	2300      	movs	r3, #0
 8010980:	60fb      	str	r3, [r7, #12]
 8010982:	2300      	movs	r3, #0
 8010984:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	f003 0302 	and.w	r3, r3, #2
 8010990:	2b02      	cmp	r3, #2
 8010992:	bf0c      	ite	eq
 8010994:	2301      	moveq	r3, #1
 8010996:	2300      	movne	r3, #0
 8010998:	b2db      	uxtb	r3, r3
 801099a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	685b      	ldr	r3, [r3, #4]
 80109a2:	f003 0320 	and.w	r3, r3, #32
 80109a6:	2b20      	cmp	r3, #32
 80109a8:	bf0c      	ite	eq
 80109aa:	2301      	moveq	r3, #1
 80109ac:	2300      	movne	r3, #0
 80109ae:	b2db      	uxtb	r3, r3
 80109b0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d049      	beq.n	8010a4c <HAL_ADC_IRQHandler+0xd6>
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d046      	beq.n	8010a4c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109c2:	f003 0310 	and.w	r3, r3, #16
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d105      	bne.n	80109d6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	689b      	ldr	r3, [r3, #8]
 80109dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d12b      	bne.n	8010a3c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d127      	bne.n	8010a3c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d006      	beq.n	8010a08 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	689b      	ldr	r3, [r3, #8]
 8010a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d119      	bne.n	8010a3c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	685a      	ldr	r2, [r3, #4]
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f022 0220 	bic.w	r2, r2, #32
 8010a16:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d105      	bne.n	8010a3c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a34:	f043 0201 	orr.w	r2, r3, #1
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f7fd fe03 	bl	800e648 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	f06f 0212 	mvn.w	r2, #18
 8010a4a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	f003 0304 	and.w	r3, r3, #4
 8010a56:	2b04      	cmp	r3, #4
 8010a58:	bf0c      	ite	eq
 8010a5a:	2301      	moveq	r3, #1
 8010a5c:	2300      	movne	r3, #0
 8010a5e:	b2db      	uxtb	r3, r3
 8010a60:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	685b      	ldr	r3, [r3, #4]
 8010a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a6c:	2b80      	cmp	r3, #128	; 0x80
 8010a6e:	bf0c      	ite	eq
 8010a70:	2301      	moveq	r3, #1
 8010a72:	2300      	movne	r3, #0
 8010a74:	b2db      	uxtb	r3, r3
 8010a76:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d057      	beq.n	8010b2e <HAL_ADC_IRQHandler+0x1b8>
 8010a7e:	68bb      	ldr	r3, [r7, #8]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d054      	beq.n	8010b2e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a88:	f003 0310 	and.w	r3, r3, #16
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d105      	bne.n	8010a9c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a94:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	689b      	ldr	r3, [r3, #8]
 8010aa2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d139      	bne.n	8010b1e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ab0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d006      	beq.n	8010ac6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	689b      	ldr	r3, [r3, #8]
 8010abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d12b      	bne.n	8010b1e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	685b      	ldr	r3, [r3, #4]
 8010acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d124      	bne.n	8010b1e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	689b      	ldr	r3, [r3, #8]
 8010ada:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d11d      	bne.n	8010b1e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d119      	bne.n	8010b1e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	685a      	ldr	r2, [r3, #4]
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010af8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d105      	bne.n	8010b1e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b16:	f043 0201 	orr.w	r2, r3, #1
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	f000 fc64 	bl	80113ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f06f 020c 	mvn.w	r2, #12
 8010b2c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	f003 0301 	and.w	r3, r3, #1
 8010b38:	2b01      	cmp	r3, #1
 8010b3a:	bf0c      	ite	eq
 8010b3c:	2301      	moveq	r3, #1
 8010b3e:	2300      	movne	r3, #0
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	685b      	ldr	r3, [r3, #4]
 8010b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b4e:	2b40      	cmp	r3, #64	; 0x40
 8010b50:	bf0c      	ite	eq
 8010b52:	2301      	moveq	r3, #1
 8010b54:	2300      	movne	r3, #0
 8010b56:	b2db      	uxtb	r3, r3
 8010b58:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d017      	beq.n	8010b90 <HAL_ADC_IRQHandler+0x21a>
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d014      	beq.n	8010b90 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f003 0301 	and.w	r3, r3, #1
 8010b70:	2b01      	cmp	r3, #1
 8010b72:	d10d      	bne.n	8010b90 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f000 f97f 	bl	8010e84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	f06f 0201 	mvn.w	r2, #1
 8010b8e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	f003 0320 	and.w	r3, r3, #32
 8010b9a:	2b20      	cmp	r3, #32
 8010b9c:	bf0c      	ite	eq
 8010b9e:	2301      	moveq	r3, #1
 8010ba0:	2300      	movne	r3, #0
 8010ba2:	b2db      	uxtb	r3, r3
 8010ba4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	685b      	ldr	r3, [r3, #4]
 8010bac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010bb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010bb4:	bf0c      	ite	eq
 8010bb6:	2301      	moveq	r3, #1
 8010bb8:	2300      	movne	r3, #0
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d015      	beq.n	8010bf0 <HAL_ADC_IRQHandler+0x27a>
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d012      	beq.n	8010bf0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bce:	f043 0202 	orr.w	r2, r3, #2
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f06f 0220 	mvn.w	r2, #32
 8010bde:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f000 f959 	bl	8010e98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	f06f 0220 	mvn.w	r2, #32
 8010bee:	601a      	str	r2, [r3, #0]
  }
}
 8010bf0:	bf00      	nop
 8010bf2:	3710      	adds	r7, #16
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}

08010bf8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b086      	sub	sp, #24
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	60f8      	str	r0, [r7, #12]
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8010c04:	2300      	movs	r3, #0
 8010c06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010c0e:	2b01      	cmp	r3, #1
 8010c10:	d101      	bne.n	8010c16 <HAL_ADC_Start_DMA+0x1e>
 8010c12:	2302      	movs	r3, #2
 8010c14:	e0cc      	b.n	8010db0 <HAL_ADC_Start_DMA+0x1b8>
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	2201      	movs	r2, #1
 8010c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	689b      	ldr	r3, [r3, #8]
 8010c24:	f003 0301 	and.w	r3, r3, #1
 8010c28:	2b01      	cmp	r3, #1
 8010c2a:	d018      	beq.n	8010c5e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	689a      	ldr	r2, [r3, #8]
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f042 0201 	orr.w	r2, r2, #1
 8010c3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8010c3c:	4b5e      	ldr	r3, [pc, #376]	; (8010db8 <HAL_ADC_Start_DMA+0x1c0>)
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	4a5e      	ldr	r2, [pc, #376]	; (8010dbc <HAL_ADC_Start_DMA+0x1c4>)
 8010c42:	fba2 2303 	umull	r2, r3, r2, r3
 8010c46:	0c9a      	lsrs	r2, r3, #18
 8010c48:	4613      	mov	r3, r2
 8010c4a:	005b      	lsls	r3, r3, #1
 8010c4c:	4413      	add	r3, r2
 8010c4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8010c50:	e002      	b.n	8010c58 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	3b01      	subs	r3, #1
 8010c56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d1f9      	bne.n	8010c52 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	689b      	ldr	r3, [r3, #8]
 8010c64:	f003 0301 	and.w	r3, r3, #1
 8010c68:	2b01      	cmp	r3, #1
 8010c6a:	f040 80a0 	bne.w	8010dae <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c72:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8010c76:	f023 0301 	bic.w	r3, r3, #1
 8010c7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d007      	beq.n	8010ca0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010c98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010cac:	d106      	bne.n	8010cbc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cb2:	f023 0206 	bic.w	r2, r3, #6
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	645a      	str	r2, [r3, #68]	; 0x44
 8010cba:	e002      	b.n	8010cc2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010cca:	4b3d      	ldr	r3, [pc, #244]	; (8010dc0 <HAL_ADC_Start_DMA+0x1c8>)
 8010ccc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cd2:	4a3c      	ldr	r2, [pc, #240]	; (8010dc4 <HAL_ADC_Start_DMA+0x1cc>)
 8010cd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cda:	4a3b      	ldr	r2, [pc, #236]	; (8010dc8 <HAL_ADC_Start_DMA+0x1d0>)
 8010cdc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ce2:	4a3a      	ldr	r2, [pc, #232]	; (8010dcc <HAL_ADC_Start_DMA+0x1d4>)
 8010ce4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8010cee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	685a      	ldr	r2, [r3, #4]
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8010cfe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	689a      	ldr	r2, [r3, #8]
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010d0e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	334c      	adds	r3, #76	; 0x4c
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	68ba      	ldr	r2, [r7, #8]
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f000 fd2e 	bl	8011780 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	685b      	ldr	r3, [r3, #4]
 8010d28:	f003 031f 	and.w	r3, r3, #31
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d12a      	bne.n	8010d86 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	4a26      	ldr	r2, [pc, #152]	; (8010dd0 <HAL_ADC_Start_DMA+0x1d8>)
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d015      	beq.n	8010d66 <HAL_ADC_Start_DMA+0x16e>
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	4a25      	ldr	r2, [pc, #148]	; (8010dd4 <HAL_ADC_Start_DMA+0x1dc>)
 8010d40:	4293      	cmp	r3, r2
 8010d42:	d105      	bne.n	8010d50 <HAL_ADC_Start_DMA+0x158>
 8010d44:	4b1e      	ldr	r3, [pc, #120]	; (8010dc0 <HAL_ADC_Start_DMA+0x1c8>)
 8010d46:	685b      	ldr	r3, [r3, #4]
 8010d48:	f003 031f 	and.w	r3, r3, #31
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d00a      	beq.n	8010d66 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	4a20      	ldr	r2, [pc, #128]	; (8010dd8 <HAL_ADC_Start_DMA+0x1e0>)
 8010d56:	4293      	cmp	r3, r2
 8010d58:	d129      	bne.n	8010dae <HAL_ADC_Start_DMA+0x1b6>
 8010d5a:	4b19      	ldr	r3, [pc, #100]	; (8010dc0 <HAL_ADC_Start_DMA+0x1c8>)
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	f003 031f 	and.w	r3, r3, #31
 8010d62:	2b0f      	cmp	r3, #15
 8010d64:	d823      	bhi.n	8010dae <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	689b      	ldr	r3, [r3, #8]
 8010d6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d11c      	bne.n	8010dae <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	689a      	ldr	r2, [r3, #8]
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8010d82:	609a      	str	r2, [r3, #8]
 8010d84:	e013      	b.n	8010dae <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	4a11      	ldr	r2, [pc, #68]	; (8010dd0 <HAL_ADC_Start_DMA+0x1d8>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d10e      	bne.n	8010dae <HAL_ADC_Start_DMA+0x1b6>
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	689b      	ldr	r3, [r3, #8]
 8010d96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d107      	bne.n	8010dae <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	689a      	ldr	r2, [r3, #8]
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8010dac:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8010dae:	2300      	movs	r3, #0
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3718      	adds	r7, #24
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	20000074 	.word	0x20000074
 8010dbc:	431bde83 	.word	0x431bde83
 8010dc0:	40012300 	.word	0x40012300
 8010dc4:	080112e9 	.word	0x080112e9
 8010dc8:	080113a3 	.word	0x080113a3
 8010dcc:	080113bf 	.word	0x080113bf
 8010dd0:	40012000 	.word	0x40012000
 8010dd4:	40012100 	.word	0x40012100
 8010dd8:	40012200 	.word	0x40012200

08010ddc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b084      	sub	sp, #16
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010de4:	2300      	movs	r3, #0
 8010de6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010dee:	2b01      	cmp	r3, #1
 8010df0:	d101      	bne.n	8010df6 <HAL_ADC_Stop_DMA+0x1a>
 8010df2:	2302      	movs	r3, #2
 8010df4:	e038      	b.n	8010e68 <HAL_ADC_Stop_DMA+0x8c>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2201      	movs	r2, #1
 8010dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	689a      	ldr	r2, [r3, #8]
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	f022 0201 	bic.w	r2, r2, #1
 8010e0c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	689b      	ldr	r3, [r3, #8]
 8010e14:	f003 0301 	and.w	r3, r3, #1
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d120      	bne.n	8010e5e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	689a      	ldr	r2, [r3, #8]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010e2a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e30:	4618      	mov	r0, r3
 8010e32:	f000 fcfd 	bl	8011830 <HAL_DMA_Abort>
 8010e36:	4603      	mov	r3, r0
 8010e38:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	685a      	ldr	r2, [r3, #4]
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8010e48:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010e52:	f023 0301 	bic.w	r3, r3, #1
 8010e56:	f043 0201 	orr.w	r2, r3, #1
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2200      	movs	r2, #0
 8010e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8010e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3710      	adds	r7, #16
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}

08010e70 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8010e70:	b480      	push	{r7}
 8010e72:	b083      	sub	sp, #12
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8010e78:	bf00      	nop
 8010e7a:	370c      	adds	r7, #12
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8010e84:	b480      	push	{r7}
 8010e86:	b083      	sub	sp, #12
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8010e8c:	bf00      	nop
 8010e8e:	370c      	adds	r7, #12
 8010e90:	46bd      	mov	sp, r7
 8010e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e96:	4770      	bx	lr

08010e98 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8010e98:	b480      	push	{r7}
 8010e9a:	b083      	sub	sp, #12
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8010ea0:	bf00      	nop
 8010ea2:	370c      	adds	r7, #12
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eaa:	4770      	bx	lr

08010eac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8010eac:	b480      	push	{r7}
 8010eae:	b085      	sub	sp, #20
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
 8010eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010ec0:	2b01      	cmp	r3, #1
 8010ec2:	d101      	bne.n	8010ec8 <HAL_ADC_ConfigChannel+0x1c>
 8010ec4:	2302      	movs	r3, #2
 8010ec6:	e105      	b.n	80110d4 <HAL_ADC_ConfigChannel+0x228>
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2201      	movs	r2, #1
 8010ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	2b09      	cmp	r3, #9
 8010ed6:	d925      	bls.n	8010f24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	68d9      	ldr	r1, [r3, #12]
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	b29b      	uxth	r3, r3
 8010ee4:	461a      	mov	r2, r3
 8010ee6:	4613      	mov	r3, r2
 8010ee8:	005b      	lsls	r3, r3, #1
 8010eea:	4413      	add	r3, r2
 8010eec:	3b1e      	subs	r3, #30
 8010eee:	2207      	movs	r2, #7
 8010ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8010ef4:	43da      	mvns	r2, r3
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	400a      	ands	r2, r1
 8010efc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	68d9      	ldr	r1, [r3, #12]
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	689a      	ldr	r2, [r3, #8]
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	4618      	mov	r0, r3
 8010f10:	4603      	mov	r3, r0
 8010f12:	005b      	lsls	r3, r3, #1
 8010f14:	4403      	add	r3, r0
 8010f16:	3b1e      	subs	r3, #30
 8010f18:	409a      	lsls	r2, r3
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	430a      	orrs	r2, r1
 8010f20:	60da      	str	r2, [r3, #12]
 8010f22:	e022      	b.n	8010f6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	6919      	ldr	r1, [r3, #16]
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	461a      	mov	r2, r3
 8010f32:	4613      	mov	r3, r2
 8010f34:	005b      	lsls	r3, r3, #1
 8010f36:	4413      	add	r3, r2
 8010f38:	2207      	movs	r2, #7
 8010f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8010f3e:	43da      	mvns	r2, r3
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	400a      	ands	r2, r1
 8010f46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	6919      	ldr	r1, [r3, #16]
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	689a      	ldr	r2, [r3, #8]
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	4618      	mov	r0, r3
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	005b      	lsls	r3, r3, #1
 8010f5e:	4403      	add	r3, r0
 8010f60:	409a      	lsls	r2, r3
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	430a      	orrs	r2, r1
 8010f68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	2b06      	cmp	r3, #6
 8010f70:	d824      	bhi.n	8010fbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	685a      	ldr	r2, [r3, #4]
 8010f7c:	4613      	mov	r3, r2
 8010f7e:	009b      	lsls	r3, r3, #2
 8010f80:	4413      	add	r3, r2
 8010f82:	3b05      	subs	r3, #5
 8010f84:	221f      	movs	r2, #31
 8010f86:	fa02 f303 	lsl.w	r3, r2, r3
 8010f8a:	43da      	mvns	r2, r3
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	400a      	ands	r2, r1
 8010f92:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	b29b      	uxth	r3, r3
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	685a      	ldr	r2, [r3, #4]
 8010fa6:	4613      	mov	r3, r2
 8010fa8:	009b      	lsls	r3, r3, #2
 8010faa:	4413      	add	r3, r2
 8010fac:	3b05      	subs	r3, #5
 8010fae:	fa00 f203 	lsl.w	r2, r0, r3
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	430a      	orrs	r2, r1
 8010fb8:	635a      	str	r2, [r3, #52]	; 0x34
 8010fba:	e04c      	b.n	8011056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	2b0c      	cmp	r3, #12
 8010fc2:	d824      	bhi.n	801100e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	685a      	ldr	r2, [r3, #4]
 8010fce:	4613      	mov	r3, r2
 8010fd0:	009b      	lsls	r3, r3, #2
 8010fd2:	4413      	add	r3, r2
 8010fd4:	3b23      	subs	r3, #35	; 0x23
 8010fd6:	221f      	movs	r2, #31
 8010fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8010fdc:	43da      	mvns	r2, r3
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	400a      	ands	r2, r1
 8010fe4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	685a      	ldr	r2, [r3, #4]
 8010ff8:	4613      	mov	r3, r2
 8010ffa:	009b      	lsls	r3, r3, #2
 8010ffc:	4413      	add	r3, r2
 8010ffe:	3b23      	subs	r3, #35	; 0x23
 8011000:	fa00 f203 	lsl.w	r2, r0, r3
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	430a      	orrs	r2, r1
 801100a:	631a      	str	r2, [r3, #48]	; 0x30
 801100c:	e023      	b.n	8011056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	685a      	ldr	r2, [r3, #4]
 8011018:	4613      	mov	r3, r2
 801101a:	009b      	lsls	r3, r3, #2
 801101c:	4413      	add	r3, r2
 801101e:	3b41      	subs	r3, #65	; 0x41
 8011020:	221f      	movs	r2, #31
 8011022:	fa02 f303 	lsl.w	r3, r2, r3
 8011026:	43da      	mvns	r2, r3
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	400a      	ands	r2, r1
 801102e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	b29b      	uxth	r3, r3
 801103c:	4618      	mov	r0, r3
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	685a      	ldr	r2, [r3, #4]
 8011042:	4613      	mov	r3, r2
 8011044:	009b      	lsls	r3, r3, #2
 8011046:	4413      	add	r3, r2
 8011048:	3b41      	subs	r3, #65	; 0x41
 801104a:	fa00 f203 	lsl.w	r2, r0, r3
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	430a      	orrs	r2, r1
 8011054:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011056:	4b22      	ldr	r3, [pc, #136]	; (80110e0 <HAL_ADC_ConfigChannel+0x234>)
 8011058:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	4a21      	ldr	r2, [pc, #132]	; (80110e4 <HAL_ADC_ConfigChannel+0x238>)
 8011060:	4293      	cmp	r3, r2
 8011062:	d109      	bne.n	8011078 <HAL_ADC_ConfigChannel+0x1cc>
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	2b12      	cmp	r3, #18
 801106a:	d105      	bne.n	8011078 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	685b      	ldr	r3, [r3, #4]
 8011070:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	4a19      	ldr	r2, [pc, #100]	; (80110e4 <HAL_ADC_ConfigChannel+0x238>)
 801107e:	4293      	cmp	r3, r2
 8011080:	d123      	bne.n	80110ca <HAL_ADC_ConfigChannel+0x21e>
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	2b10      	cmp	r3, #16
 8011088:	d003      	beq.n	8011092 <HAL_ADC_ConfigChannel+0x1e6>
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	2b11      	cmp	r3, #17
 8011090:	d11b      	bne.n	80110ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	2b10      	cmp	r3, #16
 80110a4:	d111      	bne.n	80110ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80110a6:	4b10      	ldr	r3, [pc, #64]	; (80110e8 <HAL_ADC_ConfigChannel+0x23c>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	4a10      	ldr	r2, [pc, #64]	; (80110ec <HAL_ADC_ConfigChannel+0x240>)
 80110ac:	fba2 2303 	umull	r2, r3, r2, r3
 80110b0:	0c9a      	lsrs	r2, r3, #18
 80110b2:	4613      	mov	r3, r2
 80110b4:	009b      	lsls	r3, r3, #2
 80110b6:	4413      	add	r3, r2
 80110b8:	005b      	lsls	r3, r3, #1
 80110ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80110bc:	e002      	b.n	80110c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	3b01      	subs	r3, #1
 80110c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d1f9      	bne.n	80110be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2200      	movs	r2, #0
 80110ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80110d2:	2300      	movs	r3, #0
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	3714      	adds	r7, #20
 80110d8:	46bd      	mov	sp, r7
 80110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110de:	4770      	bx	lr
 80110e0:	40012300 	.word	0x40012300
 80110e4:	40012000 	.word	0x40012000
 80110e8:	20000074 	.word	0x20000074
 80110ec:	431bde83 	.word	0x431bde83

080110f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80110f0:	b480      	push	{r7}
 80110f2:	b085      	sub	sp, #20
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80110f8:	4b79      	ldr	r3, [pc, #484]	; (80112e0 <ADC_Init+0x1f0>)
 80110fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	685b      	ldr	r3, [r3, #4]
 8011100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	685a      	ldr	r2, [r3, #4]
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	431a      	orrs	r2, r3
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	685a      	ldr	r2, [r3, #4]
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011124:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	6859      	ldr	r1, [r3, #4]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	691b      	ldr	r3, [r3, #16]
 8011130:	021a      	lsls	r2, r3, #8
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	430a      	orrs	r2, r1
 8011138:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	685a      	ldr	r2, [r3, #4]
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8011148:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	6859      	ldr	r1, [r3, #4]
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	689a      	ldr	r2, [r3, #8]
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	430a      	orrs	r2, r1
 801115a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	689a      	ldr	r2, [r3, #8]
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801116a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	6899      	ldr	r1, [r3, #8]
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	68da      	ldr	r2, [r3, #12]
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	430a      	orrs	r2, r1
 801117c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011182:	4a58      	ldr	r2, [pc, #352]	; (80112e4 <ADC_Init+0x1f4>)
 8011184:	4293      	cmp	r3, r2
 8011186:	d022      	beq.n	80111ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	689a      	ldr	r2, [r3, #8]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011196:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	6899      	ldr	r1, [r3, #8]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	430a      	orrs	r2, r1
 80111a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	689a      	ldr	r2, [r3, #8]
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80111b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	6899      	ldr	r1, [r3, #8]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	430a      	orrs	r2, r1
 80111ca:	609a      	str	r2, [r3, #8]
 80111cc:	e00f      	b.n	80111ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	689a      	ldr	r2, [r3, #8]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80111dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	689a      	ldr	r2, [r3, #8]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80111ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	689a      	ldr	r2, [r3, #8]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f022 0202 	bic.w	r2, r2, #2
 80111fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	6899      	ldr	r1, [r3, #8]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	7e1b      	ldrb	r3, [r3, #24]
 8011208:	005a      	lsls	r2, r3, #1
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	430a      	orrs	r2, r1
 8011210:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d01b      	beq.n	8011254 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	685a      	ldr	r2, [r3, #4]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801122a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	685a      	ldr	r2, [r3, #4]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801123a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	6859      	ldr	r1, [r3, #4]
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011246:	3b01      	subs	r3, #1
 8011248:	035a      	lsls	r2, r3, #13
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	430a      	orrs	r2, r1
 8011250:	605a      	str	r2, [r3, #4]
 8011252:	e007      	b.n	8011264 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	685a      	ldr	r2, [r3, #4]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011262:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8011272:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	69db      	ldr	r3, [r3, #28]
 801127e:	3b01      	subs	r3, #1
 8011280:	051a      	lsls	r2, r3, #20
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	430a      	orrs	r2, r1
 8011288:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	689a      	ldr	r2, [r3, #8]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8011298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	6899      	ldr	r1, [r3, #8]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112a6:	025a      	lsls	r2, r3, #9
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	430a      	orrs	r2, r1
 80112ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	689a      	ldr	r2, [r3, #8]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80112be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	6899      	ldr	r1, [r3, #8]
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	695b      	ldr	r3, [r3, #20]
 80112ca:	029a      	lsls	r2, r3, #10
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	430a      	orrs	r2, r1
 80112d2:	609a      	str	r2, [r3, #8]
}
 80112d4:	bf00      	nop
 80112d6:	3714      	adds	r7, #20
 80112d8:	46bd      	mov	sp, r7
 80112da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112de:	4770      	bx	lr
 80112e0:	40012300 	.word	0x40012300
 80112e4:	0f000001 	.word	0x0f000001

080112e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b084      	sub	sp, #16
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d13c      	bne.n	801137c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011306:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	689b      	ldr	r3, [r3, #8]
 8011314:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011318:	2b00      	cmp	r3, #0
 801131a:	d12b      	bne.n	8011374 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8011320:	2b00      	cmp	r3, #0
 8011322:	d127      	bne.n	8011374 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801132a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801132e:	2b00      	cmp	r3, #0
 8011330:	d006      	beq.n	8011340 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	689b      	ldr	r3, [r3, #8]
 8011338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801133c:	2b00      	cmp	r3, #0
 801133e:	d119      	bne.n	8011374 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	685a      	ldr	r2, [r3, #4]
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f022 0220 	bic.w	r2, r2, #32
 801134e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011354:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011364:	2b00      	cmp	r3, #0
 8011366:	d105      	bne.n	8011374 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801136c:	f043 0201 	orr.w	r2, r3, #1
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8011374:	68f8      	ldr	r0, [r7, #12]
 8011376:	f7fd f967 	bl	800e648 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801137a:	e00e      	b.n	801139a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011380:	f003 0310 	and.w	r3, r3, #16
 8011384:	2b00      	cmp	r3, #0
 8011386:	d003      	beq.n	8011390 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8011388:	68f8      	ldr	r0, [r7, #12]
 801138a:	f7ff fd85 	bl	8010e98 <HAL_ADC_ErrorCallback>
}
 801138e:	e004      	b.n	801139a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	4798      	blx	r3
}
 801139a:	bf00      	nop
 801139c:	3710      	adds	r7, #16
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}

080113a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80113a2:	b580      	push	{r7, lr}
 80113a4:	b084      	sub	sp, #16
 80113a6:	af00      	add	r7, sp, #0
 80113a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113ae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80113b0:	68f8      	ldr	r0, [r7, #12]
 80113b2:	f7ff fd5d 	bl	8010e70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80113b6:	bf00      	nop
 80113b8:	3710      	adds	r7, #16
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}

080113be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80113be:	b580      	push	{r7, lr}
 80113c0:	b084      	sub	sp, #16
 80113c2:	af00      	add	r7, sp, #0
 80113c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113ca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	2240      	movs	r2, #64	; 0x40
 80113d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113d6:	f043 0204 	orr.w	r2, r3, #4
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80113de:	68f8      	ldr	r0, [r7, #12]
 80113e0:	f7ff fd5a 	bl	8010e98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80113e4:	bf00      	nop
 80113e6:	3710      	adds	r7, #16
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}

080113ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80113ec:	b480      	push	{r7}
 80113ee:	b083      	sub	sp, #12
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80113f4:	bf00      	nop
 80113f6:	370c      	adds	r7, #12
 80113f8:	46bd      	mov	sp, r7
 80113fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fe:	4770      	bx	lr

08011400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011400:	b480      	push	{r7}
 8011402:	b085      	sub	sp, #20
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f003 0307 	and.w	r3, r3, #7
 801140e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011410:	4b0c      	ldr	r3, [pc, #48]	; (8011444 <__NVIC_SetPriorityGrouping+0x44>)
 8011412:	68db      	ldr	r3, [r3, #12]
 8011414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011416:	68ba      	ldr	r2, [r7, #8]
 8011418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801141c:	4013      	ands	r3, r2
 801141e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801142c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011432:	4a04      	ldr	r2, [pc, #16]	; (8011444 <__NVIC_SetPriorityGrouping+0x44>)
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	60d3      	str	r3, [r2, #12]
}
 8011438:	bf00      	nop
 801143a:	3714      	adds	r7, #20
 801143c:	46bd      	mov	sp, r7
 801143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011442:	4770      	bx	lr
 8011444:	e000ed00 	.word	0xe000ed00

08011448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011448:	b480      	push	{r7}
 801144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801144c:	4b04      	ldr	r3, [pc, #16]	; (8011460 <__NVIC_GetPriorityGrouping+0x18>)
 801144e:	68db      	ldr	r3, [r3, #12]
 8011450:	0a1b      	lsrs	r3, r3, #8
 8011452:	f003 0307 	and.w	r3, r3, #7
}
 8011456:	4618      	mov	r0, r3
 8011458:	46bd      	mov	sp, r7
 801145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145e:	4770      	bx	lr
 8011460:	e000ed00 	.word	0xe000ed00

08011464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011464:	b480      	push	{r7}
 8011466:	b083      	sub	sp, #12
 8011468:	af00      	add	r7, sp, #0
 801146a:	4603      	mov	r3, r0
 801146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011472:	2b00      	cmp	r3, #0
 8011474:	db0b      	blt.n	801148e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011476:	79fb      	ldrb	r3, [r7, #7]
 8011478:	f003 021f 	and.w	r2, r3, #31
 801147c:	4907      	ldr	r1, [pc, #28]	; (801149c <__NVIC_EnableIRQ+0x38>)
 801147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011482:	095b      	lsrs	r3, r3, #5
 8011484:	2001      	movs	r0, #1
 8011486:	fa00 f202 	lsl.w	r2, r0, r2
 801148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801148e:	bf00      	nop
 8011490:	370c      	adds	r7, #12
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr
 801149a:	bf00      	nop
 801149c:	e000e100 	.word	0xe000e100

080114a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	4603      	mov	r3, r0
 80114a8:	6039      	str	r1, [r7, #0]
 80114aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80114ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	db0a      	blt.n	80114ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	b2da      	uxtb	r2, r3
 80114b8:	490c      	ldr	r1, [pc, #48]	; (80114ec <__NVIC_SetPriority+0x4c>)
 80114ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114be:	0112      	lsls	r2, r2, #4
 80114c0:	b2d2      	uxtb	r2, r2
 80114c2:	440b      	add	r3, r1
 80114c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80114c8:	e00a      	b.n	80114e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	b2da      	uxtb	r2, r3
 80114ce:	4908      	ldr	r1, [pc, #32]	; (80114f0 <__NVIC_SetPriority+0x50>)
 80114d0:	79fb      	ldrb	r3, [r7, #7]
 80114d2:	f003 030f 	and.w	r3, r3, #15
 80114d6:	3b04      	subs	r3, #4
 80114d8:	0112      	lsls	r2, r2, #4
 80114da:	b2d2      	uxtb	r2, r2
 80114dc:	440b      	add	r3, r1
 80114de:	761a      	strb	r2, [r3, #24]
}
 80114e0:	bf00      	nop
 80114e2:	370c      	adds	r7, #12
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr
 80114ec:	e000e100 	.word	0xe000e100
 80114f0:	e000ed00 	.word	0xe000ed00

080114f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80114f4:	b480      	push	{r7}
 80114f6:	b089      	sub	sp, #36	; 0x24
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	60b9      	str	r1, [r7, #8]
 80114fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	f003 0307 	and.w	r3, r3, #7
 8011506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011508:	69fb      	ldr	r3, [r7, #28]
 801150a:	f1c3 0307 	rsb	r3, r3, #7
 801150e:	2b04      	cmp	r3, #4
 8011510:	bf28      	it	cs
 8011512:	2304      	movcs	r3, #4
 8011514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011516:	69fb      	ldr	r3, [r7, #28]
 8011518:	3304      	adds	r3, #4
 801151a:	2b06      	cmp	r3, #6
 801151c:	d902      	bls.n	8011524 <NVIC_EncodePriority+0x30>
 801151e:	69fb      	ldr	r3, [r7, #28]
 8011520:	3b03      	subs	r3, #3
 8011522:	e000      	b.n	8011526 <NVIC_EncodePriority+0x32>
 8011524:	2300      	movs	r3, #0
 8011526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011528:	f04f 32ff 	mov.w	r2, #4294967295
 801152c:	69bb      	ldr	r3, [r7, #24]
 801152e:	fa02 f303 	lsl.w	r3, r2, r3
 8011532:	43da      	mvns	r2, r3
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	401a      	ands	r2, r3
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801153c:	f04f 31ff 	mov.w	r1, #4294967295
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	fa01 f303 	lsl.w	r3, r1, r3
 8011546:	43d9      	mvns	r1, r3
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801154c:	4313      	orrs	r3, r2
         );
}
 801154e:	4618      	mov	r0, r3
 8011550:	3724      	adds	r7, #36	; 0x24
 8011552:	46bd      	mov	sp, r7
 8011554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011558:	4770      	bx	lr
	...

0801155c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	3b01      	subs	r3, #1
 8011568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801156c:	d301      	bcc.n	8011572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801156e:	2301      	movs	r3, #1
 8011570:	e00f      	b.n	8011592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011572:	4a0a      	ldr	r2, [pc, #40]	; (801159c <SysTick_Config+0x40>)
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	3b01      	subs	r3, #1
 8011578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801157a:	210f      	movs	r1, #15
 801157c:	f04f 30ff 	mov.w	r0, #4294967295
 8011580:	f7ff ff8e 	bl	80114a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011584:	4b05      	ldr	r3, [pc, #20]	; (801159c <SysTick_Config+0x40>)
 8011586:	2200      	movs	r2, #0
 8011588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801158a:	4b04      	ldr	r3, [pc, #16]	; (801159c <SysTick_Config+0x40>)
 801158c:	2207      	movs	r2, #7
 801158e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011590:	2300      	movs	r3, #0
}
 8011592:	4618      	mov	r0, r3
 8011594:	3708      	adds	r7, #8
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}
 801159a:	bf00      	nop
 801159c:	e000e010 	.word	0xe000e010

080115a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b082      	sub	sp, #8
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f7ff ff29 	bl	8011400 <__NVIC_SetPriorityGrouping>
}
 80115ae:	bf00      	nop
 80115b0:	3708      	adds	r7, #8
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}

080115b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80115b6:	b580      	push	{r7, lr}
 80115b8:	b086      	sub	sp, #24
 80115ba:	af00      	add	r7, sp, #0
 80115bc:	4603      	mov	r3, r0
 80115be:	60b9      	str	r1, [r7, #8]
 80115c0:	607a      	str	r2, [r7, #4]
 80115c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80115c4:	2300      	movs	r3, #0
 80115c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80115c8:	f7ff ff3e 	bl	8011448 <__NVIC_GetPriorityGrouping>
 80115cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80115ce:	687a      	ldr	r2, [r7, #4]
 80115d0:	68b9      	ldr	r1, [r7, #8]
 80115d2:	6978      	ldr	r0, [r7, #20]
 80115d4:	f7ff ff8e 	bl	80114f4 <NVIC_EncodePriority>
 80115d8:	4602      	mov	r2, r0
 80115da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115de:	4611      	mov	r1, r2
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7ff ff5d 	bl	80114a0 <__NVIC_SetPriority>
}
 80115e6:	bf00      	nop
 80115e8:	3718      	adds	r7, #24
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}

080115ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80115ee:	b580      	push	{r7, lr}
 80115f0:	b082      	sub	sp, #8
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	4603      	mov	r3, r0
 80115f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80115f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7ff ff31 	bl	8011464 <__NVIC_EnableIRQ>
}
 8011602:	bf00      	nop
 8011604:	3708      	adds	r7, #8
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}

0801160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801160a:	b580      	push	{r7, lr}
 801160c:	b082      	sub	sp, #8
 801160e:	af00      	add	r7, sp, #0
 8011610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f7ff ffa2 	bl	801155c <SysTick_Config>
 8011618:	4603      	mov	r3, r0
}
 801161a:	4618      	mov	r0, r3
 801161c:	3708      	adds	r7, #8
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}
	...

08011624 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b086      	sub	sp, #24
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801162c:	2300      	movs	r3, #0
 801162e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8011630:	f7ff f930 	bl	8010894 <HAL_GetTick>
 8011634:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d101      	bne.n	8011640 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801163c:	2301      	movs	r3, #1
 801163e:	e099      	b.n	8011774 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2200      	movs	r2, #0
 8011644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2202      	movs	r2, #2
 801164c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	681a      	ldr	r2, [r3, #0]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	f022 0201 	bic.w	r2, r2, #1
 801165e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011660:	e00f      	b.n	8011682 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011662:	f7ff f917 	bl	8010894 <HAL_GetTick>
 8011666:	4602      	mov	r2, r0
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	1ad3      	subs	r3, r2, r3
 801166c:	2b05      	cmp	r3, #5
 801166e:	d908      	bls.n	8011682 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2220      	movs	r2, #32
 8011674:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2203      	movs	r2, #3
 801167a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801167e:	2303      	movs	r3, #3
 8011680:	e078      	b.n	8011774 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	f003 0301 	and.w	r3, r3, #1
 801168c:	2b00      	cmp	r3, #0
 801168e:	d1e8      	bne.n	8011662 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011698:	697a      	ldr	r2, [r7, #20]
 801169a:	4b38      	ldr	r3, [pc, #224]	; (801177c <HAL_DMA_Init+0x158>)
 801169c:	4013      	ands	r3, r2
 801169e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	685a      	ldr	r2, [r3, #4]
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	689b      	ldr	r3, [r3, #8]
 80116a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80116ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	691b      	ldr	r3, [r3, #16]
 80116b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80116ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	699b      	ldr	r3, [r3, #24]
 80116c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80116c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6a1b      	ldr	r3, [r3, #32]
 80116cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80116ce:	697a      	ldr	r2, [r7, #20]
 80116d0:	4313      	orrs	r3, r2
 80116d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116d8:	2b04      	cmp	r3, #4
 80116da:	d107      	bne.n	80116ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116e4:	4313      	orrs	r3, r2
 80116e6:	697a      	ldr	r2, [r7, #20]
 80116e8:	4313      	orrs	r3, r2
 80116ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	697a      	ldr	r2, [r7, #20]
 80116f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	695b      	ldr	r3, [r3, #20]
 80116fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	f023 0307 	bic.w	r3, r3, #7
 8011702:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011708:	697a      	ldr	r2, [r7, #20]
 801170a:	4313      	orrs	r3, r2
 801170c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011712:	2b04      	cmp	r3, #4
 8011714:	d117      	bne.n	8011746 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801171a:	697a      	ldr	r2, [r7, #20]
 801171c:	4313      	orrs	r3, r2
 801171e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011724:	2b00      	cmp	r3, #0
 8011726:	d00e      	beq.n	8011746 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f000 fadf 	bl	8011cec <DMA_CheckFifoParam>
 801172e:	4603      	mov	r3, r0
 8011730:	2b00      	cmp	r3, #0
 8011732:	d008      	beq.n	8011746 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2240      	movs	r2, #64	; 0x40
 8011738:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2201      	movs	r2, #1
 801173e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8011742:	2301      	movs	r3, #1
 8011744:	e016      	b.n	8011774 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	697a      	ldr	r2, [r7, #20]
 801174c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f000 fa96 	bl	8011c80 <DMA_CalcBaseAndBitshift>
 8011754:	4603      	mov	r3, r0
 8011756:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801175c:	223f      	movs	r2, #63	; 0x3f
 801175e:	409a      	lsls	r2, r3
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2200      	movs	r2, #0
 8011768:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	2201      	movs	r2, #1
 801176e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8011772:	2300      	movs	r3, #0
}
 8011774:	4618      	mov	r0, r3
 8011776:	3718      	adds	r7, #24
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}
 801177c:	f010803f 	.word	0xf010803f

08011780 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b086      	sub	sp, #24
 8011784:	af00      	add	r7, sp, #0
 8011786:	60f8      	str	r0, [r7, #12]
 8011788:	60b9      	str	r1, [r7, #8]
 801178a:	607a      	str	r2, [r7, #4]
 801178c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801178e:	2300      	movs	r3, #0
 8011790:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011796:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801179e:	2b01      	cmp	r3, #1
 80117a0:	d101      	bne.n	80117a6 <HAL_DMA_Start_IT+0x26>
 80117a2:	2302      	movs	r3, #2
 80117a4:	e040      	b.n	8011828 <HAL_DMA_Start_IT+0xa8>
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	2201      	movs	r2, #1
 80117aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80117b4:	b2db      	uxtb	r3, r3
 80117b6:	2b01      	cmp	r3, #1
 80117b8:	d12f      	bne.n	801181a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2202      	movs	r2, #2
 80117be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	2200      	movs	r2, #0
 80117c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	68b9      	ldr	r1, [r7, #8]
 80117ce:	68f8      	ldr	r0, [r7, #12]
 80117d0:	f000 fa28 	bl	8011c24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80117d8:	223f      	movs	r2, #63	; 0x3f
 80117da:	409a      	lsls	r2, r3
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	681a      	ldr	r2, [r3, #0]
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	f042 0216 	orr.w	r2, r2, #22
 80117ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d007      	beq.n	8011808 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	681a      	ldr	r2, [r3, #0]
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	f042 0208 	orr.w	r2, r2, #8
 8011806:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	681a      	ldr	r2, [r3, #0]
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f042 0201 	orr.w	r2, r2, #1
 8011816:	601a      	str	r2, [r3, #0]
 8011818:	e005      	b.n	8011826 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	2200      	movs	r2, #0
 801181e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8011822:	2302      	movs	r3, #2
 8011824:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8011826:	7dfb      	ldrb	r3, [r7, #23]
}
 8011828:	4618      	mov	r0, r3
 801182a:	3718      	adds	r7, #24
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}

08011830 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b084      	sub	sp, #16
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801183c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801183e:	f7ff f829 	bl	8010894 <HAL_GetTick>
 8011842:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801184a:	b2db      	uxtb	r3, r3
 801184c:	2b02      	cmp	r3, #2
 801184e:	d008      	beq.n	8011862 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2280      	movs	r2, #128	; 0x80
 8011854:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2200      	movs	r2, #0
 801185a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801185e:	2301      	movs	r3, #1
 8011860:	e052      	b.n	8011908 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	681a      	ldr	r2, [r3, #0]
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	f022 0216 	bic.w	r2, r2, #22
 8011870:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	695a      	ldr	r2, [r3, #20]
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011880:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011886:	2b00      	cmp	r3, #0
 8011888:	d103      	bne.n	8011892 <HAL_DMA_Abort+0x62>
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801188e:	2b00      	cmp	r3, #0
 8011890:	d007      	beq.n	80118a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	681a      	ldr	r2, [r3, #0]
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	f022 0208 	bic.w	r2, r2, #8
 80118a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	681a      	ldr	r2, [r3, #0]
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	f022 0201 	bic.w	r2, r2, #1
 80118b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80118b2:	e013      	b.n	80118dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80118b4:	f7fe ffee 	bl	8010894 <HAL_GetTick>
 80118b8:	4602      	mov	r2, r0
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	1ad3      	subs	r3, r2, r3
 80118be:	2b05      	cmp	r3, #5
 80118c0:	d90c      	bls.n	80118dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2220      	movs	r2, #32
 80118c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2200      	movs	r2, #0
 80118cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2203      	movs	r2, #3
 80118d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80118d8:	2303      	movs	r3, #3
 80118da:	e015      	b.n	8011908 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	f003 0301 	and.w	r3, r3, #1
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d1e4      	bne.n	80118b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80118ee:	223f      	movs	r2, #63	; 0x3f
 80118f0:	409a      	lsls	r2, r3
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2200      	movs	r2, #0
 80118fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2201      	movs	r2, #1
 8011902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8011906:	2300      	movs	r3, #0
}
 8011908:	4618      	mov	r0, r3
 801190a:	3710      	adds	r7, #16
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}

08011910 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b086      	sub	sp, #24
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8011918:	2300      	movs	r3, #0
 801191a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801191c:	4b92      	ldr	r3, [pc, #584]	; (8011b68 <HAL_DMA_IRQHandler+0x258>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	4a92      	ldr	r2, [pc, #584]	; (8011b6c <HAL_DMA_IRQHandler+0x25c>)
 8011922:	fba2 2303 	umull	r2, r3, r2, r3
 8011926:	0a9b      	lsrs	r3, r3, #10
 8011928:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801192e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801193a:	2208      	movs	r2, #8
 801193c:	409a      	lsls	r2, r3
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	4013      	ands	r3, r2
 8011942:	2b00      	cmp	r3, #0
 8011944:	d01a      	beq.n	801197c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	f003 0304 	and.w	r3, r3, #4
 8011950:	2b00      	cmp	r3, #0
 8011952:	d013      	beq.n	801197c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	681a      	ldr	r2, [r3, #0]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	f022 0204 	bic.w	r2, r2, #4
 8011962:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011968:	2208      	movs	r2, #8
 801196a:	409a      	lsls	r2, r3
 801196c:	693b      	ldr	r3, [r7, #16]
 801196e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011974:	f043 0201 	orr.w	r2, r3, #1
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011980:	2201      	movs	r2, #1
 8011982:	409a      	lsls	r2, r3
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	4013      	ands	r3, r2
 8011988:	2b00      	cmp	r3, #0
 801198a:	d012      	beq.n	80119b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	695b      	ldr	r3, [r3, #20]
 8011992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011996:	2b00      	cmp	r3, #0
 8011998:	d00b      	beq.n	80119b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801199e:	2201      	movs	r2, #1
 80119a0:	409a      	lsls	r2, r3
 80119a2:	693b      	ldr	r3, [r7, #16]
 80119a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119aa:	f043 0202 	orr.w	r2, r3, #2
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119b6:	2204      	movs	r2, #4
 80119b8:	409a      	lsls	r2, r3
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	4013      	ands	r3, r2
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d012      	beq.n	80119e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	f003 0302 	and.w	r3, r3, #2
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d00b      	beq.n	80119e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119d4:	2204      	movs	r2, #4
 80119d6:	409a      	lsls	r2, r3
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119e0:	f043 0204 	orr.w	r2, r3, #4
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119ec:	2210      	movs	r2, #16
 80119ee:	409a      	lsls	r2, r3
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	4013      	ands	r3, r2
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d043      	beq.n	8011a80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	f003 0308 	and.w	r3, r3, #8
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d03c      	beq.n	8011a80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a0a:	2210      	movs	r2, #16
 8011a0c:	409a      	lsls	r2, r3
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d018      	beq.n	8011a52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d108      	bne.n	8011a40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d024      	beq.n	8011a80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a3a:	6878      	ldr	r0, [r7, #4]
 8011a3c:	4798      	blx	r3
 8011a3e:	e01f      	b.n	8011a80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d01b      	beq.n	8011a80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	4798      	blx	r3
 8011a50:	e016      	b.n	8011a80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d107      	bne.n	8011a70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	681a      	ldr	r2, [r3, #0]
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	f022 0208 	bic.w	r2, r2, #8
 8011a6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d003      	beq.n	8011a80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a84:	2220      	movs	r2, #32
 8011a86:	409a      	lsls	r2, r3
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	4013      	ands	r3, r2
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	f000 808e 	beq.w	8011bae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	f003 0310 	and.w	r3, r3, #16
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	f000 8086 	beq.w	8011bae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011aa6:	2220      	movs	r2, #32
 8011aa8:	409a      	lsls	r2, r3
 8011aaa:	693b      	ldr	r3, [r7, #16]
 8011aac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	2b05      	cmp	r3, #5
 8011ab8:	d136      	bne.n	8011b28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	681a      	ldr	r2, [r3, #0]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	f022 0216 	bic.w	r2, r2, #22
 8011ac8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	695a      	ldr	r2, [r3, #20]
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011ad8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d103      	bne.n	8011aea <HAL_DMA_IRQHandler+0x1da>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d007      	beq.n	8011afa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	681a      	ldr	r2, [r3, #0]
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	f022 0208 	bic.w	r2, r2, #8
 8011af8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011afe:	223f      	movs	r2, #63	; 0x3f
 8011b00:	409a      	lsls	r2, r3
 8011b02:	693b      	ldr	r3, [r7, #16]
 8011b04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2200      	movs	r2, #0
 8011b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2201      	movs	r2, #1
 8011b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d07d      	beq.n	8011c1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	4798      	blx	r3
        }
        return;
 8011b26:	e078      	b.n	8011c1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d01c      	beq.n	8011b70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d108      	bne.n	8011b56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d030      	beq.n	8011bae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	4798      	blx	r3
 8011b54:	e02b      	b.n	8011bae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d027      	beq.n	8011bae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	4798      	blx	r3
 8011b66:	e022      	b.n	8011bae <HAL_DMA_IRQHandler+0x29e>
 8011b68:	20000074 	.word	0x20000074
 8011b6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d10f      	bne.n	8011b9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	681a      	ldr	r2, [r3, #0]
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	f022 0210 	bic.w	r2, r2, #16
 8011b8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2200      	movs	r2, #0
 8011b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2201      	movs	r2, #1
 8011b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d003      	beq.n	8011bae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d032      	beq.n	8011c1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bba:	f003 0301 	and.w	r3, r3, #1
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d022      	beq.n	8011c08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2205      	movs	r2, #5
 8011bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	681a      	ldr	r2, [r3, #0]
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	f022 0201 	bic.w	r2, r2, #1
 8011bd8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	3301      	adds	r3, #1
 8011bde:	60bb      	str	r3, [r7, #8]
 8011be0:	697a      	ldr	r2, [r7, #20]
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d307      	bcc.n	8011bf6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	f003 0301 	and.w	r3, r3, #1
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d1f2      	bne.n	8011bda <HAL_DMA_IRQHandler+0x2ca>
 8011bf4:	e000      	b.n	8011bf8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8011bf6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2201      	movs	r2, #1
 8011c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d005      	beq.n	8011c1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	4798      	blx	r3
 8011c18:	e000      	b.n	8011c1c <HAL_DMA_IRQHandler+0x30c>
        return;
 8011c1a:	bf00      	nop
    }
  }
}
 8011c1c:	3718      	adds	r7, #24
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}
 8011c22:	bf00      	nop

08011c24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011c24:	b480      	push	{r7}
 8011c26:	b085      	sub	sp, #20
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	60f8      	str	r0, [r7, #12]
 8011c2c:	60b9      	str	r1, [r7, #8]
 8011c2e:	607a      	str	r2, [r7, #4]
 8011c30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	681a      	ldr	r2, [r3, #0]
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011c40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	683a      	ldr	r2, [r7, #0]
 8011c48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	689b      	ldr	r3, [r3, #8]
 8011c4e:	2b40      	cmp	r3, #64	; 0x40
 8011c50:	d108      	bne.n	8011c64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	687a      	ldr	r2, [r7, #4]
 8011c58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	68ba      	ldr	r2, [r7, #8]
 8011c60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8011c62:	e007      	b.n	8011c74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	68ba      	ldr	r2, [r7, #8]
 8011c6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	687a      	ldr	r2, [r7, #4]
 8011c72:	60da      	str	r2, [r3, #12]
}
 8011c74:	bf00      	nop
 8011c76:	3714      	adds	r7, #20
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7e:	4770      	bx	lr

08011c80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8011c80:	b480      	push	{r7}
 8011c82:	b085      	sub	sp, #20
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	b2db      	uxtb	r3, r3
 8011c8e:	3b10      	subs	r3, #16
 8011c90:	4a14      	ldr	r2, [pc, #80]	; (8011ce4 <DMA_CalcBaseAndBitshift+0x64>)
 8011c92:	fba2 2303 	umull	r2, r3, r2, r3
 8011c96:	091b      	lsrs	r3, r3, #4
 8011c98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8011c9a:	4a13      	ldr	r2, [pc, #76]	; (8011ce8 <DMA_CalcBaseAndBitshift+0x68>)
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	4413      	add	r3, r2
 8011ca0:	781b      	ldrb	r3, [r3, #0]
 8011ca2:	461a      	mov	r2, r3
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	2b03      	cmp	r3, #3
 8011cac:	d909      	bls.n	8011cc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8011cb6:	f023 0303 	bic.w	r3, r3, #3
 8011cba:	1d1a      	adds	r2, r3, #4
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	659a      	str	r2, [r3, #88]	; 0x58
 8011cc0:	e007      	b.n	8011cd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8011cca:	f023 0303 	bic.w	r3, r3, #3
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	3714      	adds	r7, #20
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce0:	4770      	bx	lr
 8011ce2:	bf00      	nop
 8011ce4:	aaaaaaab 	.word	0xaaaaaaab
 8011ce8:	080185dc 	.word	0x080185dc

08011cec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8011cec:	b480      	push	{r7}
 8011cee:	b085      	sub	sp, #20
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	699b      	ldr	r3, [r3, #24]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d11f      	bne.n	8011d46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	2b03      	cmp	r3, #3
 8011d0a:	d855      	bhi.n	8011db8 <DMA_CheckFifoParam+0xcc>
 8011d0c:	a201      	add	r2, pc, #4	; (adr r2, 8011d14 <DMA_CheckFifoParam+0x28>)
 8011d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d12:	bf00      	nop
 8011d14:	08011d25 	.word	0x08011d25
 8011d18:	08011d37 	.word	0x08011d37
 8011d1c:	08011d25 	.word	0x08011d25
 8011d20:	08011db9 	.word	0x08011db9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d045      	beq.n	8011dbc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8011d30:	2301      	movs	r3, #1
 8011d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011d34:	e042      	b.n	8011dbc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011d3e:	d13f      	bne.n	8011dc0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8011d40:	2301      	movs	r3, #1
 8011d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011d44:	e03c      	b.n	8011dc0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	699b      	ldr	r3, [r3, #24]
 8011d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011d4e:	d121      	bne.n	8011d94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	2b03      	cmp	r3, #3
 8011d54:	d836      	bhi.n	8011dc4 <DMA_CheckFifoParam+0xd8>
 8011d56:	a201      	add	r2, pc, #4	; (adr r2, 8011d5c <DMA_CheckFifoParam+0x70>)
 8011d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d5c:	08011d6d 	.word	0x08011d6d
 8011d60:	08011d73 	.word	0x08011d73
 8011d64:	08011d6d 	.word	0x08011d6d
 8011d68:	08011d85 	.word	0x08011d85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8011d70:	e02f      	b.n	8011dd2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d024      	beq.n	8011dc8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8011d7e:	2301      	movs	r3, #1
 8011d80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011d82:	e021      	b.n	8011dc8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011d8c:	d11e      	bne.n	8011dcc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8011d8e:	2301      	movs	r3, #1
 8011d90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8011d92:	e01b      	b.n	8011dcc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	2b02      	cmp	r3, #2
 8011d98:	d902      	bls.n	8011da0 <DMA_CheckFifoParam+0xb4>
 8011d9a:	2b03      	cmp	r3, #3
 8011d9c:	d003      	beq.n	8011da6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8011d9e:	e018      	b.n	8011dd2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8011da0:	2301      	movs	r3, #1
 8011da2:	73fb      	strb	r3, [r7, #15]
      break;
 8011da4:	e015      	b.n	8011dd2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d00e      	beq.n	8011dd0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8011db2:	2301      	movs	r3, #1
 8011db4:	73fb      	strb	r3, [r7, #15]
      break;
 8011db6:	e00b      	b.n	8011dd0 <DMA_CheckFifoParam+0xe4>
      break;
 8011db8:	bf00      	nop
 8011dba:	e00a      	b.n	8011dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8011dbc:	bf00      	nop
 8011dbe:	e008      	b.n	8011dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8011dc0:	bf00      	nop
 8011dc2:	e006      	b.n	8011dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8011dc4:	bf00      	nop
 8011dc6:	e004      	b.n	8011dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8011dc8:	bf00      	nop
 8011dca:	e002      	b.n	8011dd2 <DMA_CheckFifoParam+0xe6>
      break;   
 8011dcc:	bf00      	nop
 8011dce:	e000      	b.n	8011dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8011dd0:	bf00      	nop
    }
  } 
  
  return status; 
 8011dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3714      	adds	r7, #20
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dde:	4770      	bx	lr

08011de0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b086      	sub	sp, #24
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	60f8      	str	r0, [r7, #12]
 8011de8:	60b9      	str	r1, [r7, #8]
 8011dea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011dee:	2301      	movs	r3, #1
 8011df0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8011df2:	4b23      	ldr	r3, [pc, #140]	; (8011e80 <HAL_FLASH_Program+0xa0>)
 8011df4:	7e1b      	ldrb	r3, [r3, #24]
 8011df6:	2b01      	cmp	r3, #1
 8011df8:	d101      	bne.n	8011dfe <HAL_FLASH_Program+0x1e>
 8011dfa:	2302      	movs	r3, #2
 8011dfc:	e03b      	b.n	8011e76 <HAL_FLASH_Program+0x96>
 8011dfe:	4b20      	ldr	r3, [pc, #128]	; (8011e80 <HAL_FLASH_Program+0xa0>)
 8011e00:	2201      	movs	r2, #1
 8011e02:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011e04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011e08:	f000 f924 	bl	8012054 <FLASH_WaitForLastOperation>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8011e10:	7dfb      	ldrb	r3, [r7, #23]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d12b      	bne.n	8011e6e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d105      	bne.n	8011e28 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8011e1c:	783b      	ldrb	r3, [r7, #0]
 8011e1e:	4619      	mov	r1, r3
 8011e20:	68b8      	ldr	r0, [r7, #8]
 8011e22:	f000 f9cd 	bl	80121c0 <FLASH_Program_Byte>
 8011e26:	e016      	b.n	8011e56 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	2b01      	cmp	r3, #1
 8011e2c:	d105      	bne.n	8011e3a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8011e2e:	883b      	ldrh	r3, [r7, #0]
 8011e30:	4619      	mov	r1, r3
 8011e32:	68b8      	ldr	r0, [r7, #8]
 8011e34:	f000 f9a0 	bl	8012178 <FLASH_Program_HalfWord>
 8011e38:	e00d      	b.n	8011e56 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	2b02      	cmp	r3, #2
 8011e3e:	d105      	bne.n	8011e4c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	4619      	mov	r1, r3
 8011e44:	68b8      	ldr	r0, [r7, #8]
 8011e46:	f000 f975 	bl	8012134 <FLASH_Program_Word>
 8011e4a:	e004      	b.n	8011e56 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8011e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e50:	68b8      	ldr	r0, [r7, #8]
 8011e52:	f000 f93f 	bl	80120d4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011e56:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011e5a:	f000 f8fb 	bl	8012054 <FLASH_WaitForLastOperation>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8011e62:	4b08      	ldr	r3, [pc, #32]	; (8011e84 <HAL_FLASH_Program+0xa4>)
 8011e64:	691b      	ldr	r3, [r3, #16]
 8011e66:	4a07      	ldr	r2, [pc, #28]	; (8011e84 <HAL_FLASH_Program+0xa4>)
 8011e68:	f023 0301 	bic.w	r3, r3, #1
 8011e6c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8011e6e:	4b04      	ldr	r3, [pc, #16]	; (8011e80 <HAL_FLASH_Program+0xa0>)
 8011e70:	2200      	movs	r2, #0
 8011e72:	761a      	strb	r2, [r3, #24]
  
  return status;
 8011e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e76:	4618      	mov	r0, r3
 8011e78:	3718      	adds	r7, #24
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}
 8011e7e:	bf00      	nop
 8011e80:	20019050 	.word	0x20019050
 8011e84:	40023c00 	.word	0x40023c00

08011e88 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b082      	sub	sp, #8
 8011e8c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8011e92:	4b4b      	ldr	r3, [pc, #300]	; (8011fc0 <HAL_FLASH_IRQHandler+0x138>)
 8011e94:	68db      	ldr	r3, [r3, #12]
 8011e96:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d020      	beq.n	8011ee0 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8011e9e:	4b49      	ldr	r3, [pc, #292]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	b2db      	uxtb	r3, r3
 8011ea4:	2b01      	cmp	r3, #1
 8011ea6:	d107      	bne.n	8011eb8 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8011ea8:	4b46      	ldr	r3, [pc, #280]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011eaa:	68db      	ldr	r3, [r3, #12]
 8011eac:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8011eae:	4b45      	ldr	r3, [pc, #276]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8011eb4:	60da      	str	r2, [r3, #12]
 8011eb6:	e00b      	b.n	8011ed0 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8011eb8:	4b42      	ldr	r3, [pc, #264]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011eba:	781b      	ldrb	r3, [r3, #0]
 8011ebc:	b2db      	uxtb	r3, r3
 8011ebe:	2b02      	cmp	r3, #2
 8011ec0:	d103      	bne.n	8011eca <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8011ec2:	4b40      	ldr	r3, [pc, #256]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011ec4:	691b      	ldr	r3, [r3, #16]
 8011ec6:	607b      	str	r3, [r7, #4]
 8011ec8:	e002      	b.n	8011ed0 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8011eca:	4b3e      	ldr	r3, [pc, #248]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011ecc:	695b      	ldr	r3, [r3, #20]
 8011ece:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8011ed0:	f000 f998 	bl	8012204 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f000 f881 	bl	8011fdc <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8011eda:	4b3a      	ldr	r3, [pc, #232]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011edc:	2200      	movs	r2, #0
 8011ede:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8011ee0:	4b37      	ldr	r3, [pc, #220]	; (8011fc0 <HAL_FLASH_IRQHandler+0x138>)
 8011ee2:	68db      	ldr	r3, [r3, #12]
 8011ee4:	f003 0301 	and.w	r3, r3, #1
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d04a      	beq.n	8011f82 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011eec:	4b34      	ldr	r3, [pc, #208]	; (8011fc0 <HAL_FLASH_IRQHandler+0x138>)
 8011eee:	2201      	movs	r2, #1
 8011ef0:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8011ef2:	4b34      	ldr	r3, [pc, #208]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	b2db      	uxtb	r3, r3
 8011ef8:	2b01      	cmp	r3, #1
 8011efa:	d12d      	bne.n	8011f58 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8011efc:	4b31      	ldr	r3, [pc, #196]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011efe:	685b      	ldr	r3, [r3, #4]
 8011f00:	3b01      	subs	r3, #1
 8011f02:	4a30      	ldr	r2, [pc, #192]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011f04:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8011f06:	4b2f      	ldr	r3, [pc, #188]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011f08:	685b      	ldr	r3, [r3, #4]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d015      	beq.n	8011f3a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8011f0e:	4b2d      	ldr	r3, [pc, #180]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011f10:	68db      	ldr	r3, [r3, #12]
 8011f12:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f000 f857 	bl	8011fc8 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8011f1a:	4b2a      	ldr	r3, [pc, #168]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011f1c:	68db      	ldr	r3, [r3, #12]
 8011f1e:	3301      	adds	r3, #1
 8011f20:	4a28      	ldr	r2, [pc, #160]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011f22:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8011f24:	4b27      	ldr	r3, [pc, #156]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011f26:	68db      	ldr	r3, [r3, #12]
 8011f28:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8011f2a:	4b26      	ldr	r3, [pc, #152]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011f2c:	7a1b      	ldrb	r3, [r3, #8]
 8011f2e:	b2db      	uxtb	r3, r3
 8011f30:	4619      	mov	r1, r3
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f000 fa50 	bl	80123d8 <FLASH_Erase_Sector>
 8011f38:	e023      	b.n	8011f82 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8011f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f3e:	607b      	str	r3, [r7, #4]
 8011f40:	4a20      	ldr	r2, [pc, #128]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8011f46:	4b1f      	ldr	r3, [pc, #124]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011f48:	2200      	movs	r2, #0
 8011f4a:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8011f4c:	f000 fa8c 	bl	8012468 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f000 f839 	bl	8011fc8 <HAL_FLASH_EndOfOperationCallback>
 8011f56:	e014      	b.n	8011f82 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8011f58:	4b1a      	ldr	r3, [pc, #104]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	b2db      	uxtb	r3, r3
 8011f5e:	2b02      	cmp	r3, #2
 8011f60:	d107      	bne.n	8011f72 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8011f62:	f000 fa81 	bl	8012468 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8011f66:	4b17      	ldr	r3, [pc, #92]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011f68:	691b      	ldr	r3, [r3, #16]
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f000 f82c 	bl	8011fc8 <HAL_FLASH_EndOfOperationCallback>
 8011f70:	e004      	b.n	8011f7c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8011f72:	4b14      	ldr	r3, [pc, #80]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011f74:	695b      	ldr	r3, [r3, #20]
 8011f76:	4618      	mov	r0, r3
 8011f78:	f000 f826 	bl	8011fc8 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8011f7c:	4b11      	ldr	r3, [pc, #68]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011f7e:	2200      	movs	r2, #0
 8011f80:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8011f82:	4b10      	ldr	r3, [pc, #64]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	b2db      	uxtb	r3, r3
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d114      	bne.n	8011fb6 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8011f8c:	4b0c      	ldr	r3, [pc, #48]	; (8011fc0 <HAL_FLASH_IRQHandler+0x138>)
 8011f8e:	691b      	ldr	r3, [r3, #16]
 8011f90:	4a0b      	ldr	r2, [pc, #44]	; (8011fc0 <HAL_FLASH_IRQHandler+0x138>)
 8011f92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8011f96:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8011f98:	4b09      	ldr	r3, [pc, #36]	; (8011fc0 <HAL_FLASH_IRQHandler+0x138>)
 8011f9a:	691b      	ldr	r3, [r3, #16]
 8011f9c:	4a08      	ldr	r2, [pc, #32]	; (8011fc0 <HAL_FLASH_IRQHandler+0x138>)
 8011f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011fa2:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8011fa4:	4b06      	ldr	r3, [pc, #24]	; (8011fc0 <HAL_FLASH_IRQHandler+0x138>)
 8011fa6:	691b      	ldr	r3, [r3, #16]
 8011fa8:	4a05      	ldr	r2, [pc, #20]	; (8011fc0 <HAL_FLASH_IRQHandler+0x138>)
 8011faa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8011fae:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8011fb0:	4b04      	ldr	r3, [pc, #16]	; (8011fc4 <HAL_FLASH_IRQHandler+0x13c>)
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	761a      	strb	r2, [r3, #24]
  }
}
 8011fb6:	bf00      	nop
 8011fb8:	3708      	adds	r7, #8
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}
 8011fbe:	bf00      	nop
 8011fc0:	40023c00 	.word	0x40023c00
 8011fc4:	20019050 	.word	0x20019050

08011fc8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8011fd0:	bf00      	nop
 8011fd2:	370c      	adds	r7, #12
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fda:	4770      	bx	lr

08011fdc <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8011fdc:	b480      	push	{r7}
 8011fde:	b083      	sub	sp, #12
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8011fe4:	bf00      	nop
 8011fe6:	370c      	adds	r7, #12
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fee:	4770      	bx	lr

08011ff0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	b083      	sub	sp, #12
 8011ff4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011ffa:	4b0b      	ldr	r3, [pc, #44]	; (8012028 <HAL_FLASH_Unlock+0x38>)
 8011ffc:	691b      	ldr	r3, [r3, #16]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	da0b      	bge.n	801201a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8012002:	4b09      	ldr	r3, [pc, #36]	; (8012028 <HAL_FLASH_Unlock+0x38>)
 8012004:	4a09      	ldr	r2, [pc, #36]	; (801202c <HAL_FLASH_Unlock+0x3c>)
 8012006:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8012008:	4b07      	ldr	r3, [pc, #28]	; (8012028 <HAL_FLASH_Unlock+0x38>)
 801200a:	4a09      	ldr	r2, [pc, #36]	; (8012030 <HAL_FLASH_Unlock+0x40>)
 801200c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801200e:	4b06      	ldr	r3, [pc, #24]	; (8012028 <HAL_FLASH_Unlock+0x38>)
 8012010:	691b      	ldr	r3, [r3, #16]
 8012012:	2b00      	cmp	r3, #0
 8012014:	da01      	bge.n	801201a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8012016:	2301      	movs	r3, #1
 8012018:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801201a:	79fb      	ldrb	r3, [r7, #7]
}
 801201c:	4618      	mov	r0, r3
 801201e:	370c      	adds	r7, #12
 8012020:	46bd      	mov	sp, r7
 8012022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012026:	4770      	bx	lr
 8012028:	40023c00 	.word	0x40023c00
 801202c:	45670123 	.word	0x45670123
 8012030:	cdef89ab 	.word	0xcdef89ab

08012034 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8012034:	b480      	push	{r7}
 8012036:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8012038:	4b05      	ldr	r3, [pc, #20]	; (8012050 <HAL_FLASH_Lock+0x1c>)
 801203a:	691b      	ldr	r3, [r3, #16]
 801203c:	4a04      	ldr	r2, [pc, #16]	; (8012050 <HAL_FLASH_Lock+0x1c>)
 801203e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012042:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8012044:	2300      	movs	r3, #0
}
 8012046:	4618      	mov	r0, r3
 8012048:	46bd      	mov	sp, r7
 801204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204e:	4770      	bx	lr
 8012050:	40023c00 	.word	0x40023c00

08012054 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8012054:	b580      	push	{r7, lr}
 8012056:	b084      	sub	sp, #16
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801205c:	2300      	movs	r3, #0
 801205e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012060:	4b1a      	ldr	r3, [pc, #104]	; (80120cc <FLASH_WaitForLastOperation+0x78>)
 8012062:	2200      	movs	r2, #0
 8012064:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8012066:	f7fe fc15 	bl	8010894 <HAL_GetTick>
 801206a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801206c:	e010      	b.n	8012090 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012074:	d00c      	beq.n	8012090 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d007      	beq.n	801208c <FLASH_WaitForLastOperation+0x38>
 801207c:	f7fe fc0a 	bl	8010894 <HAL_GetTick>
 8012080:	4602      	mov	r2, r0
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	1ad3      	subs	r3, r2, r3
 8012086:	687a      	ldr	r2, [r7, #4]
 8012088:	429a      	cmp	r2, r3
 801208a:	d201      	bcs.n	8012090 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 801208c:	2303      	movs	r3, #3
 801208e:	e019      	b.n	80120c4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8012090:	4b0f      	ldr	r3, [pc, #60]	; (80120d0 <FLASH_WaitForLastOperation+0x7c>)
 8012092:	68db      	ldr	r3, [r3, #12]
 8012094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012098:	2b00      	cmp	r3, #0
 801209a:	d1e8      	bne.n	801206e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 801209c:	4b0c      	ldr	r3, [pc, #48]	; (80120d0 <FLASH_WaitForLastOperation+0x7c>)
 801209e:	68db      	ldr	r3, [r3, #12]
 80120a0:	f003 0301 	and.w	r3, r3, #1
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d002      	beq.n	80120ae <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80120a8:	4b09      	ldr	r3, [pc, #36]	; (80120d0 <FLASH_WaitForLastOperation+0x7c>)
 80120aa:	2201      	movs	r2, #1
 80120ac:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80120ae:	4b08      	ldr	r3, [pc, #32]	; (80120d0 <FLASH_WaitForLastOperation+0x7c>)
 80120b0:	68db      	ldr	r3, [r3, #12]
 80120b2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d003      	beq.n	80120c2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80120ba:	f000 f8a3 	bl	8012204 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80120be:	2301      	movs	r3, #1
 80120c0:	e000      	b.n	80120c4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80120c2:	2300      	movs	r3, #0
  
}  
 80120c4:	4618      	mov	r0, r3
 80120c6:	3710      	adds	r7, #16
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}
 80120cc:	20019050 	.word	0x20019050
 80120d0:	40023c00 	.word	0x40023c00

080120d4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80120d4:	b490      	push	{r4, r7}
 80120d6:	b084      	sub	sp, #16
 80120d8:	af00      	add	r7, sp, #0
 80120da:	60f8      	str	r0, [r7, #12]
 80120dc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80120e0:	4b13      	ldr	r3, [pc, #76]	; (8012130 <FLASH_Program_DoubleWord+0x5c>)
 80120e2:	691b      	ldr	r3, [r3, #16]
 80120e4:	4a12      	ldr	r2, [pc, #72]	; (8012130 <FLASH_Program_DoubleWord+0x5c>)
 80120e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80120ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80120ec:	4b10      	ldr	r3, [pc, #64]	; (8012130 <FLASH_Program_DoubleWord+0x5c>)
 80120ee:	691b      	ldr	r3, [r3, #16]
 80120f0:	4a0f      	ldr	r2, [pc, #60]	; (8012130 <FLASH_Program_DoubleWord+0x5c>)
 80120f2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80120f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80120f8:	4b0d      	ldr	r3, [pc, #52]	; (8012130 <FLASH_Program_DoubleWord+0x5c>)
 80120fa:	691b      	ldr	r3, [r3, #16]
 80120fc:	4a0c      	ldr	r2, [pc, #48]	; (8012130 <FLASH_Program_DoubleWord+0x5c>)
 80120fe:	f043 0301 	orr.w	r3, r3, #1
 8012102:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	683a      	ldr	r2, [r7, #0]
 8012108:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 801210a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 801210e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8012112:	f04f 0300 	mov.w	r3, #0
 8012116:	f04f 0400 	mov.w	r4, #0
 801211a:	0013      	movs	r3, r2
 801211c:	2400      	movs	r4, #0
 801211e:	68fa      	ldr	r2, [r7, #12]
 8012120:	3204      	adds	r2, #4
 8012122:	6013      	str	r3, [r2, #0]
}
 8012124:	bf00      	nop
 8012126:	3710      	adds	r7, #16
 8012128:	46bd      	mov	sp, r7
 801212a:	bc90      	pop	{r4, r7}
 801212c:	4770      	bx	lr
 801212e:	bf00      	nop
 8012130:	40023c00 	.word	0x40023c00

08012134 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8012134:	b480      	push	{r7}
 8012136:	b083      	sub	sp, #12
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
 801213c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801213e:	4b0d      	ldr	r3, [pc, #52]	; (8012174 <FLASH_Program_Word+0x40>)
 8012140:	691b      	ldr	r3, [r3, #16]
 8012142:	4a0c      	ldr	r2, [pc, #48]	; (8012174 <FLASH_Program_Word+0x40>)
 8012144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012148:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 801214a:	4b0a      	ldr	r3, [pc, #40]	; (8012174 <FLASH_Program_Word+0x40>)
 801214c:	691b      	ldr	r3, [r3, #16]
 801214e:	4a09      	ldr	r2, [pc, #36]	; (8012174 <FLASH_Program_Word+0x40>)
 8012150:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012154:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012156:	4b07      	ldr	r3, [pc, #28]	; (8012174 <FLASH_Program_Word+0x40>)
 8012158:	691b      	ldr	r3, [r3, #16]
 801215a:	4a06      	ldr	r2, [pc, #24]	; (8012174 <FLASH_Program_Word+0x40>)
 801215c:	f043 0301 	orr.w	r3, r3, #1
 8012160:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	683a      	ldr	r2, [r7, #0]
 8012166:	601a      	str	r2, [r3, #0]
}
 8012168:	bf00      	nop
 801216a:	370c      	adds	r7, #12
 801216c:	46bd      	mov	sp, r7
 801216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012172:	4770      	bx	lr
 8012174:	40023c00 	.word	0x40023c00

08012178 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8012178:	b480      	push	{r7}
 801217a:	b083      	sub	sp, #12
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	460b      	mov	r3, r1
 8012182:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012184:	4b0d      	ldr	r3, [pc, #52]	; (80121bc <FLASH_Program_HalfWord+0x44>)
 8012186:	691b      	ldr	r3, [r3, #16]
 8012188:	4a0c      	ldr	r2, [pc, #48]	; (80121bc <FLASH_Program_HalfWord+0x44>)
 801218a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801218e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8012190:	4b0a      	ldr	r3, [pc, #40]	; (80121bc <FLASH_Program_HalfWord+0x44>)
 8012192:	691b      	ldr	r3, [r3, #16]
 8012194:	4a09      	ldr	r2, [pc, #36]	; (80121bc <FLASH_Program_HalfWord+0x44>)
 8012196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801219a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801219c:	4b07      	ldr	r3, [pc, #28]	; (80121bc <FLASH_Program_HalfWord+0x44>)
 801219e:	691b      	ldr	r3, [r3, #16]
 80121a0:	4a06      	ldr	r2, [pc, #24]	; (80121bc <FLASH_Program_HalfWord+0x44>)
 80121a2:	f043 0301 	orr.w	r3, r3, #1
 80121a6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	887a      	ldrh	r2, [r7, #2]
 80121ac:	801a      	strh	r2, [r3, #0]
}
 80121ae:	bf00      	nop
 80121b0:	370c      	adds	r7, #12
 80121b2:	46bd      	mov	sp, r7
 80121b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b8:	4770      	bx	lr
 80121ba:	bf00      	nop
 80121bc:	40023c00 	.word	0x40023c00

080121c0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80121c0:	b480      	push	{r7}
 80121c2:	b083      	sub	sp, #12
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	460b      	mov	r3, r1
 80121ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80121cc:	4b0c      	ldr	r3, [pc, #48]	; (8012200 <FLASH_Program_Byte+0x40>)
 80121ce:	691b      	ldr	r3, [r3, #16]
 80121d0:	4a0b      	ldr	r2, [pc, #44]	; (8012200 <FLASH_Program_Byte+0x40>)
 80121d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80121d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80121d8:	4b09      	ldr	r3, [pc, #36]	; (8012200 <FLASH_Program_Byte+0x40>)
 80121da:	4a09      	ldr	r2, [pc, #36]	; (8012200 <FLASH_Program_Byte+0x40>)
 80121dc:	691b      	ldr	r3, [r3, #16]
 80121de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80121e0:	4b07      	ldr	r3, [pc, #28]	; (8012200 <FLASH_Program_Byte+0x40>)
 80121e2:	691b      	ldr	r3, [r3, #16]
 80121e4:	4a06      	ldr	r2, [pc, #24]	; (8012200 <FLASH_Program_Byte+0x40>)
 80121e6:	f043 0301 	orr.w	r3, r3, #1
 80121ea:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	78fa      	ldrb	r2, [r7, #3]
 80121f0:	701a      	strb	r2, [r3, #0]
}
 80121f2:	bf00      	nop
 80121f4:	370c      	adds	r7, #12
 80121f6:	46bd      	mov	sp, r7
 80121f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fc:	4770      	bx	lr
 80121fe:	bf00      	nop
 8012200:	40023c00 	.word	0x40023c00

08012204 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8012204:	b480      	push	{r7}
 8012206:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8012208:	4b27      	ldr	r3, [pc, #156]	; (80122a8 <FLASH_SetErrorCode+0xa4>)
 801220a:	68db      	ldr	r3, [r3, #12]
 801220c:	f003 0310 	and.w	r3, r3, #16
 8012210:	2b00      	cmp	r3, #0
 8012212:	d008      	beq.n	8012226 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8012214:	4b25      	ldr	r3, [pc, #148]	; (80122ac <FLASH_SetErrorCode+0xa8>)
 8012216:	69db      	ldr	r3, [r3, #28]
 8012218:	f043 0310 	orr.w	r3, r3, #16
 801221c:	4a23      	ldr	r2, [pc, #140]	; (80122ac <FLASH_SetErrorCode+0xa8>)
 801221e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8012220:	4b21      	ldr	r3, [pc, #132]	; (80122a8 <FLASH_SetErrorCode+0xa4>)
 8012222:	2210      	movs	r2, #16
 8012224:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8012226:	4b20      	ldr	r3, [pc, #128]	; (80122a8 <FLASH_SetErrorCode+0xa4>)
 8012228:	68db      	ldr	r3, [r3, #12]
 801222a:	f003 0320 	and.w	r3, r3, #32
 801222e:	2b00      	cmp	r3, #0
 8012230:	d008      	beq.n	8012244 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8012232:	4b1e      	ldr	r3, [pc, #120]	; (80122ac <FLASH_SetErrorCode+0xa8>)
 8012234:	69db      	ldr	r3, [r3, #28]
 8012236:	f043 0308 	orr.w	r3, r3, #8
 801223a:	4a1c      	ldr	r2, [pc, #112]	; (80122ac <FLASH_SetErrorCode+0xa8>)
 801223c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801223e:	4b1a      	ldr	r3, [pc, #104]	; (80122a8 <FLASH_SetErrorCode+0xa4>)
 8012240:	2220      	movs	r2, #32
 8012242:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8012244:	4b18      	ldr	r3, [pc, #96]	; (80122a8 <FLASH_SetErrorCode+0xa4>)
 8012246:	68db      	ldr	r3, [r3, #12]
 8012248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801224c:	2b00      	cmp	r3, #0
 801224e:	d008      	beq.n	8012262 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8012250:	4b16      	ldr	r3, [pc, #88]	; (80122ac <FLASH_SetErrorCode+0xa8>)
 8012252:	69db      	ldr	r3, [r3, #28]
 8012254:	f043 0304 	orr.w	r3, r3, #4
 8012258:	4a14      	ldr	r2, [pc, #80]	; (80122ac <FLASH_SetErrorCode+0xa8>)
 801225a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 801225c:	4b12      	ldr	r3, [pc, #72]	; (80122a8 <FLASH_SetErrorCode+0xa4>)
 801225e:	2240      	movs	r2, #64	; 0x40
 8012260:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8012262:	4b11      	ldr	r3, [pc, #68]	; (80122a8 <FLASH_SetErrorCode+0xa4>)
 8012264:	68db      	ldr	r3, [r3, #12]
 8012266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801226a:	2b00      	cmp	r3, #0
 801226c:	d008      	beq.n	8012280 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801226e:	4b0f      	ldr	r3, [pc, #60]	; (80122ac <FLASH_SetErrorCode+0xa8>)
 8012270:	69db      	ldr	r3, [r3, #28]
 8012272:	f043 0302 	orr.w	r3, r3, #2
 8012276:	4a0d      	ldr	r2, [pc, #52]	; (80122ac <FLASH_SetErrorCode+0xa8>)
 8012278:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801227a:	4b0b      	ldr	r3, [pc, #44]	; (80122a8 <FLASH_SetErrorCode+0xa4>)
 801227c:	2280      	movs	r2, #128	; 0x80
 801227e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8012280:	4b09      	ldr	r3, [pc, #36]	; (80122a8 <FLASH_SetErrorCode+0xa4>)
 8012282:	68db      	ldr	r3, [r3, #12]
 8012284:	f003 0302 	and.w	r3, r3, #2
 8012288:	2b00      	cmp	r3, #0
 801228a:	d008      	beq.n	801229e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 801228c:	4b07      	ldr	r3, [pc, #28]	; (80122ac <FLASH_SetErrorCode+0xa8>)
 801228e:	69db      	ldr	r3, [r3, #28]
 8012290:	f043 0320 	orr.w	r3, r3, #32
 8012294:	4a05      	ldr	r2, [pc, #20]	; (80122ac <FLASH_SetErrorCode+0xa8>)
 8012296:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8012298:	4b03      	ldr	r3, [pc, #12]	; (80122a8 <FLASH_SetErrorCode+0xa4>)
 801229a:	2202      	movs	r2, #2
 801229c:	60da      	str	r2, [r3, #12]
  }
}
 801229e:	bf00      	nop
 80122a0:	46bd      	mov	sp, r7
 80122a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a6:	4770      	bx	lr
 80122a8:	40023c00 	.word	0x40023c00
 80122ac:	20019050 	.word	0x20019050

080122b0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b084      	sub	sp, #16
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
 80122b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80122ba:	2301      	movs	r3, #1
 80122bc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80122be:	2300      	movs	r3, #0
 80122c0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80122c2:	4b31      	ldr	r3, [pc, #196]	; (8012388 <HAL_FLASHEx_Erase+0xd8>)
 80122c4:	7e1b      	ldrb	r3, [r3, #24]
 80122c6:	2b01      	cmp	r3, #1
 80122c8:	d101      	bne.n	80122ce <HAL_FLASHEx_Erase+0x1e>
 80122ca:	2302      	movs	r3, #2
 80122cc:	e058      	b.n	8012380 <HAL_FLASHEx_Erase+0xd0>
 80122ce:	4b2e      	ldr	r3, [pc, #184]	; (8012388 <HAL_FLASHEx_Erase+0xd8>)
 80122d0:	2201      	movs	r2, #1
 80122d2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80122d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80122d8:	f7ff febc 	bl	8012054 <FLASH_WaitForLastOperation>
 80122dc:	4603      	mov	r3, r0
 80122de:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80122e0:	7bfb      	ldrb	r3, [r7, #15]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d148      	bne.n	8012378 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	f04f 32ff 	mov.w	r2, #4294967295
 80122ec:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	2b01      	cmp	r3, #1
 80122f4:	d115      	bne.n	8012322 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	691b      	ldr	r3, [r3, #16]
 80122fa:	b2da      	uxtb	r2, r3
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	4619      	mov	r1, r3
 8012302:	4610      	mov	r0, r2
 8012304:	f000 f844 	bl	8012390 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012308:	f24c 3050 	movw	r0, #50000	; 0xc350
 801230c:	f7ff fea2 	bl	8012054 <FLASH_WaitForLastOperation>
 8012310:	4603      	mov	r3, r0
 8012312:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8012314:	4b1d      	ldr	r3, [pc, #116]	; (801238c <HAL_FLASHEx_Erase+0xdc>)
 8012316:	691b      	ldr	r3, [r3, #16]
 8012318:	4a1c      	ldr	r2, [pc, #112]	; (801238c <HAL_FLASHEx_Erase+0xdc>)
 801231a:	f023 0304 	bic.w	r3, r3, #4
 801231e:	6113      	str	r3, [r2, #16]
 8012320:	e028      	b.n	8012374 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	689b      	ldr	r3, [r3, #8]
 8012326:	60bb      	str	r3, [r7, #8]
 8012328:	e01c      	b.n	8012364 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	691b      	ldr	r3, [r3, #16]
 801232e:	b2db      	uxtb	r3, r3
 8012330:	4619      	mov	r1, r3
 8012332:	68b8      	ldr	r0, [r7, #8]
 8012334:	f000 f850 	bl	80123d8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012338:	f24c 3050 	movw	r0, #50000	; 0xc350
 801233c:	f7ff fe8a 	bl	8012054 <FLASH_WaitForLastOperation>
 8012340:	4603      	mov	r3, r0
 8012342:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8012344:	4b11      	ldr	r3, [pc, #68]	; (801238c <HAL_FLASHEx_Erase+0xdc>)
 8012346:	691b      	ldr	r3, [r3, #16]
 8012348:	4a10      	ldr	r2, [pc, #64]	; (801238c <HAL_FLASHEx_Erase+0xdc>)
 801234a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801234e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8012350:	7bfb      	ldrb	r3, [r7, #15]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d003      	beq.n	801235e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	68ba      	ldr	r2, [r7, #8]
 801235a:	601a      	str	r2, [r3, #0]
          break;
 801235c:	e00a      	b.n	8012374 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801235e:	68bb      	ldr	r3, [r7, #8]
 8012360:	3301      	adds	r3, #1
 8012362:	60bb      	str	r3, [r7, #8]
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	68da      	ldr	r2, [r3, #12]
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	689b      	ldr	r3, [r3, #8]
 801236c:	4413      	add	r3, r2
 801236e:	68ba      	ldr	r2, [r7, #8]
 8012370:	429a      	cmp	r2, r3
 8012372:	d3da      	bcc.n	801232a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8012374:	f000 f878 	bl	8012468 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012378:	4b03      	ldr	r3, [pc, #12]	; (8012388 <HAL_FLASHEx_Erase+0xd8>)
 801237a:	2200      	movs	r2, #0
 801237c:	761a      	strb	r2, [r3, #24]

  return status;
 801237e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012380:	4618      	mov	r0, r3
 8012382:	3710      	adds	r7, #16
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}
 8012388:	20019050 	.word	0x20019050
 801238c:	40023c00 	.word	0x40023c00

08012390 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8012390:	b480      	push	{r7}
 8012392:	b083      	sub	sp, #12
 8012394:	af00      	add	r7, sp, #0
 8012396:	4603      	mov	r3, r0
 8012398:	6039      	str	r1, [r7, #0]
 801239a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801239c:	4b0d      	ldr	r3, [pc, #52]	; (80123d4 <FLASH_MassErase+0x44>)
 801239e:	691b      	ldr	r3, [r3, #16]
 80123a0:	4a0c      	ldr	r2, [pc, #48]	; (80123d4 <FLASH_MassErase+0x44>)
 80123a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80123a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80123a8:	4b0a      	ldr	r3, [pc, #40]	; (80123d4 <FLASH_MassErase+0x44>)
 80123aa:	691b      	ldr	r3, [r3, #16]
 80123ac:	4a09      	ldr	r2, [pc, #36]	; (80123d4 <FLASH_MassErase+0x44>)
 80123ae:	f043 0304 	orr.w	r3, r3, #4
 80123b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80123b4:	4b07      	ldr	r3, [pc, #28]	; (80123d4 <FLASH_MassErase+0x44>)
 80123b6:	691a      	ldr	r2, [r3, #16]
 80123b8:	79fb      	ldrb	r3, [r7, #7]
 80123ba:	021b      	lsls	r3, r3, #8
 80123bc:	4313      	orrs	r3, r2
 80123be:	4a05      	ldr	r2, [pc, #20]	; (80123d4 <FLASH_MassErase+0x44>)
 80123c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80123c4:	6113      	str	r3, [r2, #16]
}
 80123c6:	bf00      	nop
 80123c8:	370c      	adds	r7, #12
 80123ca:	46bd      	mov	sp, r7
 80123cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d0:	4770      	bx	lr
 80123d2:	bf00      	nop
 80123d4:	40023c00 	.word	0x40023c00

080123d8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80123d8:	b480      	push	{r7}
 80123da:	b085      	sub	sp, #20
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	460b      	mov	r3, r1
 80123e2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80123e4:	2300      	movs	r3, #0
 80123e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80123e8:	78fb      	ldrb	r3, [r7, #3]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d102      	bne.n	80123f4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80123ee:	2300      	movs	r3, #0
 80123f0:	60fb      	str	r3, [r7, #12]
 80123f2:	e010      	b.n	8012416 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80123f4:	78fb      	ldrb	r3, [r7, #3]
 80123f6:	2b01      	cmp	r3, #1
 80123f8:	d103      	bne.n	8012402 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80123fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123fe:	60fb      	str	r3, [r7, #12]
 8012400:	e009      	b.n	8012416 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8012402:	78fb      	ldrb	r3, [r7, #3]
 8012404:	2b02      	cmp	r3, #2
 8012406:	d103      	bne.n	8012410 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8012408:	f44f 7300 	mov.w	r3, #512	; 0x200
 801240c:	60fb      	str	r3, [r7, #12]
 801240e:	e002      	b.n	8012416 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8012410:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012414:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012416:	4b13      	ldr	r3, [pc, #76]	; (8012464 <FLASH_Erase_Sector+0x8c>)
 8012418:	691b      	ldr	r3, [r3, #16]
 801241a:	4a12      	ldr	r2, [pc, #72]	; (8012464 <FLASH_Erase_Sector+0x8c>)
 801241c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012420:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8012422:	4b10      	ldr	r3, [pc, #64]	; (8012464 <FLASH_Erase_Sector+0x8c>)
 8012424:	691a      	ldr	r2, [r3, #16]
 8012426:	490f      	ldr	r1, [pc, #60]	; (8012464 <FLASH_Erase_Sector+0x8c>)
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	4313      	orrs	r3, r2
 801242c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801242e:	4b0d      	ldr	r3, [pc, #52]	; (8012464 <FLASH_Erase_Sector+0x8c>)
 8012430:	691b      	ldr	r3, [r3, #16]
 8012432:	4a0c      	ldr	r2, [pc, #48]	; (8012464 <FLASH_Erase_Sector+0x8c>)
 8012434:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8012438:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801243a:	4b0a      	ldr	r3, [pc, #40]	; (8012464 <FLASH_Erase_Sector+0x8c>)
 801243c:	691a      	ldr	r2, [r3, #16]
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	00db      	lsls	r3, r3, #3
 8012442:	4313      	orrs	r3, r2
 8012444:	4a07      	ldr	r2, [pc, #28]	; (8012464 <FLASH_Erase_Sector+0x8c>)
 8012446:	f043 0302 	orr.w	r3, r3, #2
 801244a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 801244c:	4b05      	ldr	r3, [pc, #20]	; (8012464 <FLASH_Erase_Sector+0x8c>)
 801244e:	691b      	ldr	r3, [r3, #16]
 8012450:	4a04      	ldr	r2, [pc, #16]	; (8012464 <FLASH_Erase_Sector+0x8c>)
 8012452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012456:	6113      	str	r3, [r2, #16]
}
 8012458:	bf00      	nop
 801245a:	3714      	adds	r7, #20
 801245c:	46bd      	mov	sp, r7
 801245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012462:	4770      	bx	lr
 8012464:	40023c00 	.word	0x40023c00

08012468 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8012468:	b480      	push	{r7}
 801246a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 801246c:	4b20      	ldr	r3, [pc, #128]	; (80124f0 <FLASH_FlushCaches+0x88>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012474:	2b00      	cmp	r3, #0
 8012476:	d017      	beq.n	80124a8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8012478:	4b1d      	ldr	r3, [pc, #116]	; (80124f0 <FLASH_FlushCaches+0x88>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	4a1c      	ldr	r2, [pc, #112]	; (80124f0 <FLASH_FlushCaches+0x88>)
 801247e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012482:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8012484:	4b1a      	ldr	r3, [pc, #104]	; (80124f0 <FLASH_FlushCaches+0x88>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	4a19      	ldr	r2, [pc, #100]	; (80124f0 <FLASH_FlushCaches+0x88>)
 801248a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801248e:	6013      	str	r3, [r2, #0]
 8012490:	4b17      	ldr	r3, [pc, #92]	; (80124f0 <FLASH_FlushCaches+0x88>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	4a16      	ldr	r2, [pc, #88]	; (80124f0 <FLASH_FlushCaches+0x88>)
 8012496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801249a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801249c:	4b14      	ldr	r3, [pc, #80]	; (80124f0 <FLASH_FlushCaches+0x88>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	4a13      	ldr	r2, [pc, #76]	; (80124f0 <FLASH_FlushCaches+0x88>)
 80124a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80124a6:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80124a8:	4b11      	ldr	r3, [pc, #68]	; (80124f0 <FLASH_FlushCaches+0x88>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d017      	beq.n	80124e4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80124b4:	4b0e      	ldr	r3, [pc, #56]	; (80124f0 <FLASH_FlushCaches+0x88>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	4a0d      	ldr	r2, [pc, #52]	; (80124f0 <FLASH_FlushCaches+0x88>)
 80124ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80124be:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80124c0:	4b0b      	ldr	r3, [pc, #44]	; (80124f0 <FLASH_FlushCaches+0x88>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	4a0a      	ldr	r2, [pc, #40]	; (80124f0 <FLASH_FlushCaches+0x88>)
 80124c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80124ca:	6013      	str	r3, [r2, #0]
 80124cc:	4b08      	ldr	r3, [pc, #32]	; (80124f0 <FLASH_FlushCaches+0x88>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	4a07      	ldr	r2, [pc, #28]	; (80124f0 <FLASH_FlushCaches+0x88>)
 80124d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80124d6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80124d8:	4b05      	ldr	r3, [pc, #20]	; (80124f0 <FLASH_FlushCaches+0x88>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	4a04      	ldr	r2, [pc, #16]	; (80124f0 <FLASH_FlushCaches+0x88>)
 80124de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80124e2:	6013      	str	r3, [r2, #0]
  }
}
 80124e4:	bf00      	nop
 80124e6:	46bd      	mov	sp, r7
 80124e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ec:	4770      	bx	lr
 80124ee:	bf00      	nop
 80124f0:	40023c00 	.word	0x40023c00

080124f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80124f4:	b480      	push	{r7}
 80124f6:	b089      	sub	sp, #36	; 0x24
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80124fe:	2300      	movs	r3, #0
 8012500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012502:	2300      	movs	r3, #0
 8012504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012506:	2300      	movs	r3, #0
 8012508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801250a:	2300      	movs	r3, #0
 801250c:	61fb      	str	r3, [r7, #28]
 801250e:	e16b      	b.n	80127e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012510:	2201      	movs	r2, #1
 8012512:	69fb      	ldr	r3, [r7, #28]
 8012514:	fa02 f303 	lsl.w	r3, r2, r3
 8012518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	697a      	ldr	r2, [r7, #20]
 8012520:	4013      	ands	r3, r2
 8012522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012524:	693a      	ldr	r2, [r7, #16]
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	429a      	cmp	r2, r3
 801252a:	f040 815a 	bne.w	80127e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	685b      	ldr	r3, [r3, #4]
 8012532:	2b01      	cmp	r3, #1
 8012534:	d00b      	beq.n	801254e <HAL_GPIO_Init+0x5a>
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	2b02      	cmp	r3, #2
 801253c:	d007      	beq.n	801254e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012542:	2b11      	cmp	r3, #17
 8012544:	d003      	beq.n	801254e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	685b      	ldr	r3, [r3, #4]
 801254a:	2b12      	cmp	r3, #18
 801254c:	d130      	bne.n	80125b0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	689b      	ldr	r3, [r3, #8]
 8012552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012554:	69fb      	ldr	r3, [r7, #28]
 8012556:	005b      	lsls	r3, r3, #1
 8012558:	2203      	movs	r2, #3
 801255a:	fa02 f303 	lsl.w	r3, r2, r3
 801255e:	43db      	mvns	r3, r3
 8012560:	69ba      	ldr	r2, [r7, #24]
 8012562:	4013      	ands	r3, r2
 8012564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	68da      	ldr	r2, [r3, #12]
 801256a:	69fb      	ldr	r3, [r7, #28]
 801256c:	005b      	lsls	r3, r3, #1
 801256e:	fa02 f303 	lsl.w	r3, r2, r3
 8012572:	69ba      	ldr	r2, [r7, #24]
 8012574:	4313      	orrs	r3, r2
 8012576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	69ba      	ldr	r2, [r7, #24]
 801257c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	685b      	ldr	r3, [r3, #4]
 8012582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012584:	2201      	movs	r2, #1
 8012586:	69fb      	ldr	r3, [r7, #28]
 8012588:	fa02 f303 	lsl.w	r3, r2, r3
 801258c:	43db      	mvns	r3, r3
 801258e:	69ba      	ldr	r2, [r7, #24]
 8012590:	4013      	ands	r3, r2
 8012592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8012594:	683b      	ldr	r3, [r7, #0]
 8012596:	685b      	ldr	r3, [r3, #4]
 8012598:	091b      	lsrs	r3, r3, #4
 801259a:	f003 0201 	and.w	r2, r3, #1
 801259e:	69fb      	ldr	r3, [r7, #28]
 80125a0:	fa02 f303 	lsl.w	r3, r2, r3
 80125a4:	69ba      	ldr	r2, [r7, #24]
 80125a6:	4313      	orrs	r3, r2
 80125a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	69ba      	ldr	r2, [r7, #24]
 80125ae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	68db      	ldr	r3, [r3, #12]
 80125b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80125b6:	69fb      	ldr	r3, [r7, #28]
 80125b8:	005b      	lsls	r3, r3, #1
 80125ba:	2203      	movs	r2, #3
 80125bc:	fa02 f303 	lsl.w	r3, r2, r3
 80125c0:	43db      	mvns	r3, r3
 80125c2:	69ba      	ldr	r2, [r7, #24]
 80125c4:	4013      	ands	r3, r2
 80125c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	689a      	ldr	r2, [r3, #8]
 80125cc:	69fb      	ldr	r3, [r7, #28]
 80125ce:	005b      	lsls	r3, r3, #1
 80125d0:	fa02 f303 	lsl.w	r3, r2, r3
 80125d4:	69ba      	ldr	r2, [r7, #24]
 80125d6:	4313      	orrs	r3, r2
 80125d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	69ba      	ldr	r2, [r7, #24]
 80125de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	685b      	ldr	r3, [r3, #4]
 80125e4:	2b02      	cmp	r3, #2
 80125e6:	d003      	beq.n	80125f0 <HAL_GPIO_Init+0xfc>
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	685b      	ldr	r3, [r3, #4]
 80125ec:	2b12      	cmp	r3, #18
 80125ee:	d123      	bne.n	8012638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	08da      	lsrs	r2, r3, #3
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	3208      	adds	r2, #8
 80125f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80125fe:	69fb      	ldr	r3, [r7, #28]
 8012600:	f003 0307 	and.w	r3, r3, #7
 8012604:	009b      	lsls	r3, r3, #2
 8012606:	220f      	movs	r2, #15
 8012608:	fa02 f303 	lsl.w	r3, r2, r3
 801260c:	43db      	mvns	r3, r3
 801260e:	69ba      	ldr	r2, [r7, #24]
 8012610:	4013      	ands	r3, r2
 8012612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	691a      	ldr	r2, [r3, #16]
 8012618:	69fb      	ldr	r3, [r7, #28]
 801261a:	f003 0307 	and.w	r3, r3, #7
 801261e:	009b      	lsls	r3, r3, #2
 8012620:	fa02 f303 	lsl.w	r3, r2, r3
 8012624:	69ba      	ldr	r2, [r7, #24]
 8012626:	4313      	orrs	r3, r2
 8012628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801262a:	69fb      	ldr	r3, [r7, #28]
 801262c:	08da      	lsrs	r2, r3, #3
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	3208      	adds	r2, #8
 8012632:	69b9      	ldr	r1, [r7, #24]
 8012634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	005b      	lsls	r3, r3, #1
 8012642:	2203      	movs	r2, #3
 8012644:	fa02 f303 	lsl.w	r3, r2, r3
 8012648:	43db      	mvns	r3, r3
 801264a:	69ba      	ldr	r2, [r7, #24]
 801264c:	4013      	ands	r3, r2
 801264e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	f003 0203 	and.w	r2, r3, #3
 8012658:	69fb      	ldr	r3, [r7, #28]
 801265a:	005b      	lsls	r3, r3, #1
 801265c:	fa02 f303 	lsl.w	r3, r2, r3
 8012660:	69ba      	ldr	r2, [r7, #24]
 8012662:	4313      	orrs	r3, r2
 8012664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	69ba      	ldr	r2, [r7, #24]
 801266a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012674:	2b00      	cmp	r3, #0
 8012676:	f000 80b4 	beq.w	80127e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801267a:	2300      	movs	r3, #0
 801267c:	60fb      	str	r3, [r7, #12]
 801267e:	4b5f      	ldr	r3, [pc, #380]	; (80127fc <HAL_GPIO_Init+0x308>)
 8012680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012682:	4a5e      	ldr	r2, [pc, #376]	; (80127fc <HAL_GPIO_Init+0x308>)
 8012684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012688:	6453      	str	r3, [r2, #68]	; 0x44
 801268a:	4b5c      	ldr	r3, [pc, #368]	; (80127fc <HAL_GPIO_Init+0x308>)
 801268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801268e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012692:	60fb      	str	r3, [r7, #12]
 8012694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012696:	4a5a      	ldr	r2, [pc, #360]	; (8012800 <HAL_GPIO_Init+0x30c>)
 8012698:	69fb      	ldr	r3, [r7, #28]
 801269a:	089b      	lsrs	r3, r3, #2
 801269c:	3302      	adds	r3, #2
 801269e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	f003 0303 	and.w	r3, r3, #3
 80126aa:	009b      	lsls	r3, r3, #2
 80126ac:	220f      	movs	r2, #15
 80126ae:	fa02 f303 	lsl.w	r3, r2, r3
 80126b2:	43db      	mvns	r3, r3
 80126b4:	69ba      	ldr	r2, [r7, #24]
 80126b6:	4013      	ands	r3, r2
 80126b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	4a51      	ldr	r2, [pc, #324]	; (8012804 <HAL_GPIO_Init+0x310>)
 80126be:	4293      	cmp	r3, r2
 80126c0:	d02b      	beq.n	801271a <HAL_GPIO_Init+0x226>
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	4a50      	ldr	r2, [pc, #320]	; (8012808 <HAL_GPIO_Init+0x314>)
 80126c6:	4293      	cmp	r3, r2
 80126c8:	d025      	beq.n	8012716 <HAL_GPIO_Init+0x222>
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	4a4f      	ldr	r2, [pc, #316]	; (801280c <HAL_GPIO_Init+0x318>)
 80126ce:	4293      	cmp	r3, r2
 80126d0:	d01f      	beq.n	8012712 <HAL_GPIO_Init+0x21e>
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	4a4e      	ldr	r2, [pc, #312]	; (8012810 <HAL_GPIO_Init+0x31c>)
 80126d6:	4293      	cmp	r3, r2
 80126d8:	d019      	beq.n	801270e <HAL_GPIO_Init+0x21a>
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	4a4d      	ldr	r2, [pc, #308]	; (8012814 <HAL_GPIO_Init+0x320>)
 80126de:	4293      	cmp	r3, r2
 80126e0:	d013      	beq.n	801270a <HAL_GPIO_Init+0x216>
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	4a4c      	ldr	r2, [pc, #304]	; (8012818 <HAL_GPIO_Init+0x324>)
 80126e6:	4293      	cmp	r3, r2
 80126e8:	d00d      	beq.n	8012706 <HAL_GPIO_Init+0x212>
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	4a4b      	ldr	r2, [pc, #300]	; (801281c <HAL_GPIO_Init+0x328>)
 80126ee:	4293      	cmp	r3, r2
 80126f0:	d007      	beq.n	8012702 <HAL_GPIO_Init+0x20e>
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	4a4a      	ldr	r2, [pc, #296]	; (8012820 <HAL_GPIO_Init+0x32c>)
 80126f6:	4293      	cmp	r3, r2
 80126f8:	d101      	bne.n	80126fe <HAL_GPIO_Init+0x20a>
 80126fa:	2307      	movs	r3, #7
 80126fc:	e00e      	b.n	801271c <HAL_GPIO_Init+0x228>
 80126fe:	2308      	movs	r3, #8
 8012700:	e00c      	b.n	801271c <HAL_GPIO_Init+0x228>
 8012702:	2306      	movs	r3, #6
 8012704:	e00a      	b.n	801271c <HAL_GPIO_Init+0x228>
 8012706:	2305      	movs	r3, #5
 8012708:	e008      	b.n	801271c <HAL_GPIO_Init+0x228>
 801270a:	2304      	movs	r3, #4
 801270c:	e006      	b.n	801271c <HAL_GPIO_Init+0x228>
 801270e:	2303      	movs	r3, #3
 8012710:	e004      	b.n	801271c <HAL_GPIO_Init+0x228>
 8012712:	2302      	movs	r3, #2
 8012714:	e002      	b.n	801271c <HAL_GPIO_Init+0x228>
 8012716:	2301      	movs	r3, #1
 8012718:	e000      	b.n	801271c <HAL_GPIO_Init+0x228>
 801271a:	2300      	movs	r3, #0
 801271c:	69fa      	ldr	r2, [r7, #28]
 801271e:	f002 0203 	and.w	r2, r2, #3
 8012722:	0092      	lsls	r2, r2, #2
 8012724:	4093      	lsls	r3, r2
 8012726:	69ba      	ldr	r2, [r7, #24]
 8012728:	4313      	orrs	r3, r2
 801272a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801272c:	4934      	ldr	r1, [pc, #208]	; (8012800 <HAL_GPIO_Init+0x30c>)
 801272e:	69fb      	ldr	r3, [r7, #28]
 8012730:	089b      	lsrs	r3, r3, #2
 8012732:	3302      	adds	r3, #2
 8012734:	69ba      	ldr	r2, [r7, #24]
 8012736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801273a:	4b3a      	ldr	r3, [pc, #232]	; (8012824 <HAL_GPIO_Init+0x330>)
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012740:	693b      	ldr	r3, [r7, #16]
 8012742:	43db      	mvns	r3, r3
 8012744:	69ba      	ldr	r2, [r7, #24]
 8012746:	4013      	ands	r3, r2
 8012748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	685b      	ldr	r3, [r3, #4]
 801274e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012752:	2b00      	cmp	r3, #0
 8012754:	d003      	beq.n	801275e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012756:	69ba      	ldr	r2, [r7, #24]
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	4313      	orrs	r3, r2
 801275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801275e:	4a31      	ldr	r2, [pc, #196]	; (8012824 <HAL_GPIO_Init+0x330>)
 8012760:	69bb      	ldr	r3, [r7, #24]
 8012762:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012764:	4b2f      	ldr	r3, [pc, #188]	; (8012824 <HAL_GPIO_Init+0x330>)
 8012766:	685b      	ldr	r3, [r3, #4]
 8012768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	43db      	mvns	r3, r3
 801276e:	69ba      	ldr	r2, [r7, #24]
 8012770:	4013      	ands	r3, r2
 8012772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	685b      	ldr	r3, [r3, #4]
 8012778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801277c:	2b00      	cmp	r3, #0
 801277e:	d003      	beq.n	8012788 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8012780:	69ba      	ldr	r2, [r7, #24]
 8012782:	693b      	ldr	r3, [r7, #16]
 8012784:	4313      	orrs	r3, r2
 8012786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012788:	4a26      	ldr	r2, [pc, #152]	; (8012824 <HAL_GPIO_Init+0x330>)
 801278a:	69bb      	ldr	r3, [r7, #24]
 801278c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801278e:	4b25      	ldr	r3, [pc, #148]	; (8012824 <HAL_GPIO_Init+0x330>)
 8012790:	689b      	ldr	r3, [r3, #8]
 8012792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012794:	693b      	ldr	r3, [r7, #16]
 8012796:	43db      	mvns	r3, r3
 8012798:	69ba      	ldr	r2, [r7, #24]
 801279a:	4013      	ands	r3, r2
 801279c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	685b      	ldr	r3, [r3, #4]
 80127a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d003      	beq.n	80127b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80127aa:	69ba      	ldr	r2, [r7, #24]
 80127ac:	693b      	ldr	r3, [r7, #16]
 80127ae:	4313      	orrs	r3, r2
 80127b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80127b2:	4a1c      	ldr	r2, [pc, #112]	; (8012824 <HAL_GPIO_Init+0x330>)
 80127b4:	69bb      	ldr	r3, [r7, #24]
 80127b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80127b8:	4b1a      	ldr	r3, [pc, #104]	; (8012824 <HAL_GPIO_Init+0x330>)
 80127ba:	68db      	ldr	r3, [r3, #12]
 80127bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80127be:	693b      	ldr	r3, [r7, #16]
 80127c0:	43db      	mvns	r3, r3
 80127c2:	69ba      	ldr	r2, [r7, #24]
 80127c4:	4013      	ands	r3, r2
 80127c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	685b      	ldr	r3, [r3, #4]
 80127cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d003      	beq.n	80127dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80127d4:	69ba      	ldr	r2, [r7, #24]
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	4313      	orrs	r3, r2
 80127da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80127dc:	4a11      	ldr	r2, [pc, #68]	; (8012824 <HAL_GPIO_Init+0x330>)
 80127de:	69bb      	ldr	r3, [r7, #24]
 80127e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80127e2:	69fb      	ldr	r3, [r7, #28]
 80127e4:	3301      	adds	r3, #1
 80127e6:	61fb      	str	r3, [r7, #28]
 80127e8:	69fb      	ldr	r3, [r7, #28]
 80127ea:	2b0f      	cmp	r3, #15
 80127ec:	f67f ae90 	bls.w	8012510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80127f0:	bf00      	nop
 80127f2:	3724      	adds	r7, #36	; 0x24
 80127f4:	46bd      	mov	sp, r7
 80127f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fa:	4770      	bx	lr
 80127fc:	40023800 	.word	0x40023800
 8012800:	40013800 	.word	0x40013800
 8012804:	40020000 	.word	0x40020000
 8012808:	40020400 	.word	0x40020400
 801280c:	40020800 	.word	0x40020800
 8012810:	40020c00 	.word	0x40020c00
 8012814:	40021000 	.word	0x40021000
 8012818:	40021400 	.word	0x40021400
 801281c:	40021800 	.word	0x40021800
 8012820:	40021c00 	.word	0x40021c00
 8012824:	40013c00 	.word	0x40013c00

08012828 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012828:	b480      	push	{r7}
 801282a:	b085      	sub	sp, #20
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
 8012830:	460b      	mov	r3, r1
 8012832:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	691a      	ldr	r2, [r3, #16]
 8012838:	887b      	ldrh	r3, [r7, #2]
 801283a:	4013      	ands	r3, r2
 801283c:	2b00      	cmp	r3, #0
 801283e:	d002      	beq.n	8012846 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012840:	2301      	movs	r3, #1
 8012842:	73fb      	strb	r3, [r7, #15]
 8012844:	e001      	b.n	801284a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8012846:	2300      	movs	r3, #0
 8012848:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801284a:	7bfb      	ldrb	r3, [r7, #15]
}
 801284c:	4618      	mov	r0, r3
 801284e:	3714      	adds	r7, #20
 8012850:	46bd      	mov	sp, r7
 8012852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012856:	4770      	bx	lr

08012858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012858:	b480      	push	{r7}
 801285a:	b083      	sub	sp, #12
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
 8012860:	460b      	mov	r3, r1
 8012862:	807b      	strh	r3, [r7, #2]
 8012864:	4613      	mov	r3, r2
 8012866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012868:	787b      	ldrb	r3, [r7, #1]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d003      	beq.n	8012876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801286e:	887a      	ldrh	r2, [r7, #2]
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012874:	e003      	b.n	801287e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012876:	887b      	ldrh	r3, [r7, #2]
 8012878:	041a      	lsls	r2, r3, #16
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	619a      	str	r2, [r3, #24]
}
 801287e:	bf00      	nop
 8012880:	370c      	adds	r7, #12
 8012882:	46bd      	mov	sp, r7
 8012884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012888:	4770      	bx	lr
	...

0801288c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b086      	sub	sp, #24
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d101      	bne.n	801289e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801289a:	2301      	movs	r3, #1
 801289c:	e25b      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	f003 0301 	and.w	r3, r3, #1
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d075      	beq.n	8012996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80128aa:	4ba3      	ldr	r3, [pc, #652]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 80128ac:	689b      	ldr	r3, [r3, #8]
 80128ae:	f003 030c 	and.w	r3, r3, #12
 80128b2:	2b04      	cmp	r3, #4
 80128b4:	d00c      	beq.n	80128d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80128b6:	4ba0      	ldr	r3, [pc, #640]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 80128b8:	689b      	ldr	r3, [r3, #8]
 80128ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80128be:	2b08      	cmp	r3, #8
 80128c0:	d112      	bne.n	80128e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80128c2:	4b9d      	ldr	r3, [pc, #628]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 80128c4:	685b      	ldr	r3, [r3, #4]
 80128c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80128ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80128ce:	d10b      	bne.n	80128e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80128d0:	4b99      	ldr	r3, [pc, #612]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d05b      	beq.n	8012994 <HAL_RCC_OscConfig+0x108>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	685b      	ldr	r3, [r3, #4]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d157      	bne.n	8012994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80128e4:	2301      	movs	r3, #1
 80128e6:	e236      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	685b      	ldr	r3, [r3, #4]
 80128ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80128f0:	d106      	bne.n	8012900 <HAL_RCC_OscConfig+0x74>
 80128f2:	4b91      	ldr	r3, [pc, #580]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	4a90      	ldr	r2, [pc, #576]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 80128f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80128fc:	6013      	str	r3, [r2, #0]
 80128fe:	e01d      	b.n	801293c <HAL_RCC_OscConfig+0xb0>
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	685b      	ldr	r3, [r3, #4]
 8012904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012908:	d10c      	bne.n	8012924 <HAL_RCC_OscConfig+0x98>
 801290a:	4b8b      	ldr	r3, [pc, #556]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	4a8a      	ldr	r2, [pc, #552]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012914:	6013      	str	r3, [r2, #0]
 8012916:	4b88      	ldr	r3, [pc, #544]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	4a87      	ldr	r2, [pc, #540]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 801291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012920:	6013      	str	r3, [r2, #0]
 8012922:	e00b      	b.n	801293c <HAL_RCC_OscConfig+0xb0>
 8012924:	4b84      	ldr	r3, [pc, #528]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	4a83      	ldr	r2, [pc, #524]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 801292a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801292e:	6013      	str	r3, [r2, #0]
 8012930:	4b81      	ldr	r3, [pc, #516]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	4a80      	ldr	r2, [pc, #512]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801293a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	685b      	ldr	r3, [r3, #4]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d013      	beq.n	801296c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012944:	f7fd ffa6 	bl	8010894 <HAL_GetTick>
 8012948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801294a:	e008      	b.n	801295e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801294c:	f7fd ffa2 	bl	8010894 <HAL_GetTick>
 8012950:	4602      	mov	r2, r0
 8012952:	693b      	ldr	r3, [r7, #16]
 8012954:	1ad3      	subs	r3, r2, r3
 8012956:	2b64      	cmp	r3, #100	; 0x64
 8012958:	d901      	bls.n	801295e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801295a:	2303      	movs	r3, #3
 801295c:	e1fb      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801295e:	4b76      	ldr	r3, [pc, #472]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012966:	2b00      	cmp	r3, #0
 8012968:	d0f0      	beq.n	801294c <HAL_RCC_OscConfig+0xc0>
 801296a:	e014      	b.n	8012996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801296c:	f7fd ff92 	bl	8010894 <HAL_GetTick>
 8012970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012972:	e008      	b.n	8012986 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012974:	f7fd ff8e 	bl	8010894 <HAL_GetTick>
 8012978:	4602      	mov	r2, r0
 801297a:	693b      	ldr	r3, [r7, #16]
 801297c:	1ad3      	subs	r3, r2, r3
 801297e:	2b64      	cmp	r3, #100	; 0x64
 8012980:	d901      	bls.n	8012986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012982:	2303      	movs	r3, #3
 8012984:	e1e7      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012986:	4b6c      	ldr	r3, [pc, #432]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801298e:	2b00      	cmp	r3, #0
 8012990:	d1f0      	bne.n	8012974 <HAL_RCC_OscConfig+0xe8>
 8012992:	e000      	b.n	8012996 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	f003 0302 	and.w	r3, r3, #2
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d063      	beq.n	8012a6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80129a2:	4b65      	ldr	r3, [pc, #404]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 80129a4:	689b      	ldr	r3, [r3, #8]
 80129a6:	f003 030c 	and.w	r3, r3, #12
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d00b      	beq.n	80129c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80129ae:	4b62      	ldr	r3, [pc, #392]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 80129b0:	689b      	ldr	r3, [r3, #8]
 80129b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80129b6:	2b08      	cmp	r3, #8
 80129b8:	d11c      	bne.n	80129f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80129ba:	4b5f      	ldr	r3, [pc, #380]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 80129bc:	685b      	ldr	r3, [r3, #4]
 80129be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d116      	bne.n	80129f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80129c6:	4b5c      	ldr	r3, [pc, #368]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	f003 0302 	and.w	r3, r3, #2
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d005      	beq.n	80129de <HAL_RCC_OscConfig+0x152>
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	68db      	ldr	r3, [r3, #12]
 80129d6:	2b01      	cmp	r3, #1
 80129d8:	d001      	beq.n	80129de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80129da:	2301      	movs	r3, #1
 80129dc:	e1bb      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80129de:	4b56      	ldr	r3, [pc, #344]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	691b      	ldr	r3, [r3, #16]
 80129ea:	00db      	lsls	r3, r3, #3
 80129ec:	4952      	ldr	r1, [pc, #328]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 80129ee:	4313      	orrs	r3, r2
 80129f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80129f2:	e03a      	b.n	8012a6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	68db      	ldr	r3, [r3, #12]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d020      	beq.n	8012a3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80129fc:	4b4f      	ldr	r3, [pc, #316]	; (8012b3c <HAL_RCC_OscConfig+0x2b0>)
 80129fe:	2201      	movs	r2, #1
 8012a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012a02:	f7fd ff47 	bl	8010894 <HAL_GetTick>
 8012a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012a08:	e008      	b.n	8012a1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012a0a:	f7fd ff43 	bl	8010894 <HAL_GetTick>
 8012a0e:	4602      	mov	r2, r0
 8012a10:	693b      	ldr	r3, [r7, #16]
 8012a12:	1ad3      	subs	r3, r2, r3
 8012a14:	2b02      	cmp	r3, #2
 8012a16:	d901      	bls.n	8012a1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012a18:	2303      	movs	r3, #3
 8012a1a:	e19c      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012a1c:	4b46      	ldr	r3, [pc, #280]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	f003 0302 	and.w	r3, r3, #2
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d0f0      	beq.n	8012a0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012a28:	4b43      	ldr	r3, [pc, #268]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	691b      	ldr	r3, [r3, #16]
 8012a34:	00db      	lsls	r3, r3, #3
 8012a36:	4940      	ldr	r1, [pc, #256]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012a38:	4313      	orrs	r3, r2
 8012a3a:	600b      	str	r3, [r1, #0]
 8012a3c:	e015      	b.n	8012a6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012a3e:	4b3f      	ldr	r3, [pc, #252]	; (8012b3c <HAL_RCC_OscConfig+0x2b0>)
 8012a40:	2200      	movs	r2, #0
 8012a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012a44:	f7fd ff26 	bl	8010894 <HAL_GetTick>
 8012a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012a4a:	e008      	b.n	8012a5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012a4c:	f7fd ff22 	bl	8010894 <HAL_GetTick>
 8012a50:	4602      	mov	r2, r0
 8012a52:	693b      	ldr	r3, [r7, #16]
 8012a54:	1ad3      	subs	r3, r2, r3
 8012a56:	2b02      	cmp	r3, #2
 8012a58:	d901      	bls.n	8012a5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012a5a:	2303      	movs	r3, #3
 8012a5c:	e17b      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012a5e:	4b36      	ldr	r3, [pc, #216]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	f003 0302 	and.w	r3, r3, #2
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d1f0      	bne.n	8012a4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	f003 0308 	and.w	r3, r3, #8
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d030      	beq.n	8012ad8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	695b      	ldr	r3, [r3, #20]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d016      	beq.n	8012aac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012a7e:	4b30      	ldr	r3, [pc, #192]	; (8012b40 <HAL_RCC_OscConfig+0x2b4>)
 8012a80:	2201      	movs	r2, #1
 8012a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012a84:	f7fd ff06 	bl	8010894 <HAL_GetTick>
 8012a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012a8a:	e008      	b.n	8012a9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012a8c:	f7fd ff02 	bl	8010894 <HAL_GetTick>
 8012a90:	4602      	mov	r2, r0
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	1ad3      	subs	r3, r2, r3
 8012a96:	2b02      	cmp	r3, #2
 8012a98:	d901      	bls.n	8012a9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012a9a:	2303      	movs	r3, #3
 8012a9c:	e15b      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012a9e:	4b26      	ldr	r3, [pc, #152]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012aa2:	f003 0302 	and.w	r3, r3, #2
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d0f0      	beq.n	8012a8c <HAL_RCC_OscConfig+0x200>
 8012aaa:	e015      	b.n	8012ad8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012aac:	4b24      	ldr	r3, [pc, #144]	; (8012b40 <HAL_RCC_OscConfig+0x2b4>)
 8012aae:	2200      	movs	r2, #0
 8012ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012ab2:	f7fd feef 	bl	8010894 <HAL_GetTick>
 8012ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012ab8:	e008      	b.n	8012acc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012aba:	f7fd feeb 	bl	8010894 <HAL_GetTick>
 8012abe:	4602      	mov	r2, r0
 8012ac0:	693b      	ldr	r3, [r7, #16]
 8012ac2:	1ad3      	subs	r3, r2, r3
 8012ac4:	2b02      	cmp	r3, #2
 8012ac6:	d901      	bls.n	8012acc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8012ac8:	2303      	movs	r3, #3
 8012aca:	e144      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012acc:	4b1a      	ldr	r3, [pc, #104]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ad0:	f003 0302 	and.w	r3, r3, #2
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d1f0      	bne.n	8012aba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	f003 0304 	and.w	r3, r3, #4
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	f000 80a0 	beq.w	8012c26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012aea:	4b13      	ldr	r3, [pc, #76]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d10f      	bne.n	8012b16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012af6:	2300      	movs	r3, #0
 8012af8:	60bb      	str	r3, [r7, #8]
 8012afa:	4b0f      	ldr	r3, [pc, #60]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012afe:	4a0e      	ldr	r2, [pc, #56]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012b04:	6413      	str	r3, [r2, #64]	; 0x40
 8012b06:	4b0c      	ldr	r3, [pc, #48]	; (8012b38 <HAL_RCC_OscConfig+0x2ac>)
 8012b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012b0e:	60bb      	str	r3, [r7, #8]
 8012b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012b12:	2301      	movs	r3, #1
 8012b14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012b16:	4b0b      	ldr	r3, [pc, #44]	; (8012b44 <HAL_RCC_OscConfig+0x2b8>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d121      	bne.n	8012b66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012b22:	4b08      	ldr	r3, [pc, #32]	; (8012b44 <HAL_RCC_OscConfig+0x2b8>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	4a07      	ldr	r2, [pc, #28]	; (8012b44 <HAL_RCC_OscConfig+0x2b8>)
 8012b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012b2e:	f7fd feb1 	bl	8010894 <HAL_GetTick>
 8012b32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012b34:	e011      	b.n	8012b5a <HAL_RCC_OscConfig+0x2ce>
 8012b36:	bf00      	nop
 8012b38:	40023800 	.word	0x40023800
 8012b3c:	42470000 	.word	0x42470000
 8012b40:	42470e80 	.word	0x42470e80
 8012b44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012b48:	f7fd fea4 	bl	8010894 <HAL_GetTick>
 8012b4c:	4602      	mov	r2, r0
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	1ad3      	subs	r3, r2, r3
 8012b52:	2b02      	cmp	r3, #2
 8012b54:	d901      	bls.n	8012b5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8012b56:	2303      	movs	r3, #3
 8012b58:	e0fd      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012b5a:	4b81      	ldr	r3, [pc, #516]	; (8012d60 <HAL_RCC_OscConfig+0x4d4>)
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d0f0      	beq.n	8012b48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	689b      	ldr	r3, [r3, #8]
 8012b6a:	2b01      	cmp	r3, #1
 8012b6c:	d106      	bne.n	8012b7c <HAL_RCC_OscConfig+0x2f0>
 8012b6e:	4b7d      	ldr	r3, [pc, #500]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b72:	4a7c      	ldr	r2, [pc, #496]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012b74:	f043 0301 	orr.w	r3, r3, #1
 8012b78:	6713      	str	r3, [r2, #112]	; 0x70
 8012b7a:	e01c      	b.n	8012bb6 <HAL_RCC_OscConfig+0x32a>
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	689b      	ldr	r3, [r3, #8]
 8012b80:	2b05      	cmp	r3, #5
 8012b82:	d10c      	bne.n	8012b9e <HAL_RCC_OscConfig+0x312>
 8012b84:	4b77      	ldr	r3, [pc, #476]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b88:	4a76      	ldr	r2, [pc, #472]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012b8a:	f043 0304 	orr.w	r3, r3, #4
 8012b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8012b90:	4b74      	ldr	r3, [pc, #464]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b94:	4a73      	ldr	r2, [pc, #460]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012b96:	f043 0301 	orr.w	r3, r3, #1
 8012b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8012b9c:	e00b      	b.n	8012bb6 <HAL_RCC_OscConfig+0x32a>
 8012b9e:	4b71      	ldr	r3, [pc, #452]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ba2:	4a70      	ldr	r2, [pc, #448]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012ba4:	f023 0301 	bic.w	r3, r3, #1
 8012ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8012baa:	4b6e      	ldr	r3, [pc, #440]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bae:	4a6d      	ldr	r2, [pc, #436]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012bb0:	f023 0304 	bic.w	r3, r3, #4
 8012bb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	689b      	ldr	r3, [r3, #8]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d015      	beq.n	8012bea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012bbe:	f7fd fe69 	bl	8010894 <HAL_GetTick>
 8012bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012bc4:	e00a      	b.n	8012bdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012bc6:	f7fd fe65 	bl	8010894 <HAL_GetTick>
 8012bca:	4602      	mov	r2, r0
 8012bcc:	693b      	ldr	r3, [r7, #16]
 8012bce:	1ad3      	subs	r3, r2, r3
 8012bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8012bd4:	4293      	cmp	r3, r2
 8012bd6:	d901      	bls.n	8012bdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8012bd8:	2303      	movs	r3, #3
 8012bda:	e0bc      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012bdc:	4b61      	ldr	r3, [pc, #388]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012be0:	f003 0302 	and.w	r3, r3, #2
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d0ee      	beq.n	8012bc6 <HAL_RCC_OscConfig+0x33a>
 8012be8:	e014      	b.n	8012c14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012bea:	f7fd fe53 	bl	8010894 <HAL_GetTick>
 8012bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012bf0:	e00a      	b.n	8012c08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012bf2:	f7fd fe4f 	bl	8010894 <HAL_GetTick>
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	693b      	ldr	r3, [r7, #16]
 8012bfa:	1ad3      	subs	r3, r2, r3
 8012bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c00:	4293      	cmp	r3, r2
 8012c02:	d901      	bls.n	8012c08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012c04:	2303      	movs	r3, #3
 8012c06:	e0a6      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012c08:	4b56      	ldr	r3, [pc, #344]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c0c:	f003 0302 	and.w	r3, r3, #2
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d1ee      	bne.n	8012bf2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012c14:	7dfb      	ldrb	r3, [r7, #23]
 8012c16:	2b01      	cmp	r3, #1
 8012c18:	d105      	bne.n	8012c26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012c1a:	4b52      	ldr	r3, [pc, #328]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c1e:	4a51      	ldr	r2, [pc, #324]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012c24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	699b      	ldr	r3, [r3, #24]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	f000 8092 	beq.w	8012d54 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012c30:	4b4c      	ldr	r3, [pc, #304]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012c32:	689b      	ldr	r3, [r3, #8]
 8012c34:	f003 030c 	and.w	r3, r3, #12
 8012c38:	2b08      	cmp	r3, #8
 8012c3a:	d05c      	beq.n	8012cf6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	699b      	ldr	r3, [r3, #24]
 8012c40:	2b02      	cmp	r3, #2
 8012c42:	d141      	bne.n	8012cc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012c44:	4b48      	ldr	r3, [pc, #288]	; (8012d68 <HAL_RCC_OscConfig+0x4dc>)
 8012c46:	2200      	movs	r2, #0
 8012c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012c4a:	f7fd fe23 	bl	8010894 <HAL_GetTick>
 8012c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012c50:	e008      	b.n	8012c64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012c52:	f7fd fe1f 	bl	8010894 <HAL_GetTick>
 8012c56:	4602      	mov	r2, r0
 8012c58:	693b      	ldr	r3, [r7, #16]
 8012c5a:	1ad3      	subs	r3, r2, r3
 8012c5c:	2b02      	cmp	r3, #2
 8012c5e:	d901      	bls.n	8012c64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8012c60:	2303      	movs	r3, #3
 8012c62:	e078      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012c64:	4b3f      	ldr	r3, [pc, #252]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d1f0      	bne.n	8012c52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	69da      	ldr	r2, [r3, #28]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	6a1b      	ldr	r3, [r3, #32]
 8012c78:	431a      	orrs	r2, r3
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c7e:	019b      	lsls	r3, r3, #6
 8012c80:	431a      	orrs	r2, r3
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c86:	085b      	lsrs	r3, r3, #1
 8012c88:	3b01      	subs	r3, #1
 8012c8a:	041b      	lsls	r3, r3, #16
 8012c8c:	431a      	orrs	r2, r3
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c92:	061b      	lsls	r3, r3, #24
 8012c94:	4933      	ldr	r1, [pc, #204]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012c96:	4313      	orrs	r3, r2
 8012c98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012c9a:	4b33      	ldr	r3, [pc, #204]	; (8012d68 <HAL_RCC_OscConfig+0x4dc>)
 8012c9c:	2201      	movs	r2, #1
 8012c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012ca0:	f7fd fdf8 	bl	8010894 <HAL_GetTick>
 8012ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012ca6:	e008      	b.n	8012cba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012ca8:	f7fd fdf4 	bl	8010894 <HAL_GetTick>
 8012cac:	4602      	mov	r2, r0
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	1ad3      	subs	r3, r2, r3
 8012cb2:	2b02      	cmp	r3, #2
 8012cb4:	d901      	bls.n	8012cba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8012cb6:	2303      	movs	r3, #3
 8012cb8:	e04d      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012cba:	4b2a      	ldr	r3, [pc, #168]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d0f0      	beq.n	8012ca8 <HAL_RCC_OscConfig+0x41c>
 8012cc6:	e045      	b.n	8012d54 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012cc8:	4b27      	ldr	r3, [pc, #156]	; (8012d68 <HAL_RCC_OscConfig+0x4dc>)
 8012cca:	2200      	movs	r2, #0
 8012ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012cce:	f7fd fde1 	bl	8010894 <HAL_GetTick>
 8012cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012cd4:	e008      	b.n	8012ce8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012cd6:	f7fd fddd 	bl	8010894 <HAL_GetTick>
 8012cda:	4602      	mov	r2, r0
 8012cdc:	693b      	ldr	r3, [r7, #16]
 8012cde:	1ad3      	subs	r3, r2, r3
 8012ce0:	2b02      	cmp	r3, #2
 8012ce2:	d901      	bls.n	8012ce8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8012ce4:	2303      	movs	r3, #3
 8012ce6:	e036      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012ce8:	4b1e      	ldr	r3, [pc, #120]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d1f0      	bne.n	8012cd6 <HAL_RCC_OscConfig+0x44a>
 8012cf4:	e02e      	b.n	8012d54 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	699b      	ldr	r3, [r3, #24]
 8012cfa:	2b01      	cmp	r3, #1
 8012cfc:	d101      	bne.n	8012d02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8012cfe:	2301      	movs	r3, #1
 8012d00:	e029      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012d02:	4b18      	ldr	r3, [pc, #96]	; (8012d64 <HAL_RCC_OscConfig+0x4d8>)
 8012d04:	685b      	ldr	r3, [r3, #4]
 8012d06:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	69db      	ldr	r3, [r3, #28]
 8012d12:	429a      	cmp	r2, r3
 8012d14:	d11c      	bne.n	8012d50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012d20:	429a      	cmp	r2, r3
 8012d22:	d115      	bne.n	8012d50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8012d24:	68fa      	ldr	r2, [r7, #12]
 8012d26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012d2a:	4013      	ands	r3, r2
 8012d2c:	687a      	ldr	r2, [r7, #4]
 8012d2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8012d30:	4293      	cmp	r3, r2
 8012d32:	d10d      	bne.n	8012d50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d106      	bne.n	8012d50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d001      	beq.n	8012d54 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8012d50:	2301      	movs	r3, #1
 8012d52:	e000      	b.n	8012d56 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8012d54:	2300      	movs	r3, #0
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	3718      	adds	r7, #24
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}
 8012d5e:	bf00      	nop
 8012d60:	40007000 	.word	0x40007000
 8012d64:	40023800 	.word	0x40023800
 8012d68:	42470060 	.word	0x42470060

08012d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b084      	sub	sp, #16
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
 8012d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d101      	bne.n	8012d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	e0cc      	b.n	8012f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012d80:	4b68      	ldr	r3, [pc, #416]	; (8012f24 <HAL_RCC_ClockConfig+0x1b8>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	f003 030f 	and.w	r3, r3, #15
 8012d88:	683a      	ldr	r2, [r7, #0]
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	d90c      	bls.n	8012da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012d8e:	4b65      	ldr	r3, [pc, #404]	; (8012f24 <HAL_RCC_ClockConfig+0x1b8>)
 8012d90:	683a      	ldr	r2, [r7, #0]
 8012d92:	b2d2      	uxtb	r2, r2
 8012d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012d96:	4b63      	ldr	r3, [pc, #396]	; (8012f24 <HAL_RCC_ClockConfig+0x1b8>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	f003 030f 	and.w	r3, r3, #15
 8012d9e:	683a      	ldr	r2, [r7, #0]
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d001      	beq.n	8012da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012da4:	2301      	movs	r3, #1
 8012da6:	e0b8      	b.n	8012f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	f003 0302 	and.w	r3, r3, #2
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d020      	beq.n	8012df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	f003 0304 	and.w	r3, r3, #4
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d005      	beq.n	8012dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012dc0:	4b59      	ldr	r3, [pc, #356]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012dc2:	689b      	ldr	r3, [r3, #8]
 8012dc4:	4a58      	ldr	r2, [pc, #352]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012dc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8012dca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	f003 0308 	and.w	r3, r3, #8
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d005      	beq.n	8012de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012dd8:	4b53      	ldr	r3, [pc, #332]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012dda:	689b      	ldr	r3, [r3, #8]
 8012ddc:	4a52      	ldr	r2, [pc, #328]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012dde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012de4:	4b50      	ldr	r3, [pc, #320]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012de6:	689b      	ldr	r3, [r3, #8]
 8012de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	689b      	ldr	r3, [r3, #8]
 8012df0:	494d      	ldr	r1, [pc, #308]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012df2:	4313      	orrs	r3, r2
 8012df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	f003 0301 	and.w	r3, r3, #1
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d044      	beq.n	8012e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	685b      	ldr	r3, [r3, #4]
 8012e06:	2b01      	cmp	r3, #1
 8012e08:	d107      	bne.n	8012e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012e0a:	4b47      	ldr	r3, [pc, #284]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d119      	bne.n	8012e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012e16:	2301      	movs	r3, #1
 8012e18:	e07f      	b.n	8012f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	685b      	ldr	r3, [r3, #4]
 8012e1e:	2b02      	cmp	r3, #2
 8012e20:	d003      	beq.n	8012e2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012e26:	2b03      	cmp	r3, #3
 8012e28:	d107      	bne.n	8012e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012e2a:	4b3f      	ldr	r3, [pc, #252]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d109      	bne.n	8012e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012e36:	2301      	movs	r3, #1
 8012e38:	e06f      	b.n	8012f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012e3a:	4b3b      	ldr	r3, [pc, #236]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	f003 0302 	and.w	r3, r3, #2
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d101      	bne.n	8012e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012e46:	2301      	movs	r3, #1
 8012e48:	e067      	b.n	8012f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012e4a:	4b37      	ldr	r3, [pc, #220]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012e4c:	689b      	ldr	r3, [r3, #8]
 8012e4e:	f023 0203 	bic.w	r2, r3, #3
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	4934      	ldr	r1, [pc, #208]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012e58:	4313      	orrs	r3, r2
 8012e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012e5c:	f7fd fd1a 	bl	8010894 <HAL_GetTick>
 8012e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012e62:	e00a      	b.n	8012e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012e64:	f7fd fd16 	bl	8010894 <HAL_GetTick>
 8012e68:	4602      	mov	r2, r0
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	1ad3      	subs	r3, r2, r3
 8012e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e72:	4293      	cmp	r3, r2
 8012e74:	d901      	bls.n	8012e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012e76:	2303      	movs	r3, #3
 8012e78:	e04f      	b.n	8012f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012e7a:	4b2b      	ldr	r3, [pc, #172]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012e7c:	689b      	ldr	r3, [r3, #8]
 8012e7e:	f003 020c 	and.w	r2, r3, #12
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	685b      	ldr	r3, [r3, #4]
 8012e86:	009b      	lsls	r3, r3, #2
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d1eb      	bne.n	8012e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012e8c:	4b25      	ldr	r3, [pc, #148]	; (8012f24 <HAL_RCC_ClockConfig+0x1b8>)
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	f003 030f 	and.w	r3, r3, #15
 8012e94:	683a      	ldr	r2, [r7, #0]
 8012e96:	429a      	cmp	r2, r3
 8012e98:	d20c      	bcs.n	8012eb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012e9a:	4b22      	ldr	r3, [pc, #136]	; (8012f24 <HAL_RCC_ClockConfig+0x1b8>)
 8012e9c:	683a      	ldr	r2, [r7, #0]
 8012e9e:	b2d2      	uxtb	r2, r2
 8012ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012ea2:	4b20      	ldr	r3, [pc, #128]	; (8012f24 <HAL_RCC_ClockConfig+0x1b8>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	f003 030f 	and.w	r3, r3, #15
 8012eaa:	683a      	ldr	r2, [r7, #0]
 8012eac:	429a      	cmp	r2, r3
 8012eae:	d001      	beq.n	8012eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	e032      	b.n	8012f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	f003 0304 	and.w	r3, r3, #4
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d008      	beq.n	8012ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012ec0:	4b19      	ldr	r3, [pc, #100]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012ec2:	689b      	ldr	r3, [r3, #8]
 8012ec4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	68db      	ldr	r3, [r3, #12]
 8012ecc:	4916      	ldr	r1, [pc, #88]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012ece:	4313      	orrs	r3, r2
 8012ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	f003 0308 	and.w	r3, r3, #8
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d009      	beq.n	8012ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012ede:	4b12      	ldr	r3, [pc, #72]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012ee0:	689b      	ldr	r3, [r3, #8]
 8012ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	691b      	ldr	r3, [r3, #16]
 8012eea:	00db      	lsls	r3, r3, #3
 8012eec:	490e      	ldr	r1, [pc, #56]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012eee:	4313      	orrs	r3, r2
 8012ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012ef2:	f000 f821 	bl	8012f38 <HAL_RCC_GetSysClockFreq>
 8012ef6:	4601      	mov	r1, r0
 8012ef8:	4b0b      	ldr	r3, [pc, #44]	; (8012f28 <HAL_RCC_ClockConfig+0x1bc>)
 8012efa:	689b      	ldr	r3, [r3, #8]
 8012efc:	091b      	lsrs	r3, r3, #4
 8012efe:	f003 030f 	and.w	r3, r3, #15
 8012f02:	4a0a      	ldr	r2, [pc, #40]	; (8012f2c <HAL_RCC_ClockConfig+0x1c0>)
 8012f04:	5cd3      	ldrb	r3, [r2, r3]
 8012f06:	fa21 f303 	lsr.w	r3, r1, r3
 8012f0a:	4a09      	ldr	r2, [pc, #36]	; (8012f30 <HAL_RCC_ClockConfig+0x1c4>)
 8012f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8012f0e:	4b09      	ldr	r3, [pc, #36]	; (8012f34 <HAL_RCC_ClockConfig+0x1c8>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	4618      	mov	r0, r3
 8012f14:	f7fd fc7a 	bl	801080c <HAL_InitTick>

  return HAL_OK;
 8012f18:	2300      	movs	r3, #0
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3710      	adds	r7, #16
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}
 8012f22:	bf00      	nop
 8012f24:	40023c00 	.word	0x40023c00
 8012f28:	40023800 	.word	0x40023800
 8012f2c:	080185c4 	.word	0x080185c4
 8012f30:	20000074 	.word	0x20000074
 8012f34:	20000078 	.word	0x20000078

08012f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f3a:	b085      	sub	sp, #20
 8012f3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012f3e:	2300      	movs	r3, #0
 8012f40:	607b      	str	r3, [r7, #4]
 8012f42:	2300      	movs	r3, #0
 8012f44:	60fb      	str	r3, [r7, #12]
 8012f46:	2300      	movs	r3, #0
 8012f48:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012f4e:	4b63      	ldr	r3, [pc, #396]	; (80130dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012f50:	689b      	ldr	r3, [r3, #8]
 8012f52:	f003 030c 	and.w	r3, r3, #12
 8012f56:	2b04      	cmp	r3, #4
 8012f58:	d007      	beq.n	8012f6a <HAL_RCC_GetSysClockFreq+0x32>
 8012f5a:	2b08      	cmp	r3, #8
 8012f5c:	d008      	beq.n	8012f70 <HAL_RCC_GetSysClockFreq+0x38>
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	f040 80b4 	bne.w	80130cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012f64:	4b5e      	ldr	r3, [pc, #376]	; (80130e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8012f66:	60bb      	str	r3, [r7, #8]
       break;
 8012f68:	e0b3      	b.n	80130d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8012f6a:	4b5e      	ldr	r3, [pc, #376]	; (80130e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8012f6c:	60bb      	str	r3, [r7, #8]
      break;
 8012f6e:	e0b0      	b.n	80130d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012f70:	4b5a      	ldr	r3, [pc, #360]	; (80130dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012f72:	685b      	ldr	r3, [r3, #4]
 8012f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012f7a:	4b58      	ldr	r3, [pc, #352]	; (80130dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012f7c:	685b      	ldr	r3, [r3, #4]
 8012f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d04a      	beq.n	801301c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012f86:	4b55      	ldr	r3, [pc, #340]	; (80130dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012f88:	685b      	ldr	r3, [r3, #4]
 8012f8a:	099b      	lsrs	r3, r3, #6
 8012f8c:	f04f 0400 	mov.w	r4, #0
 8012f90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8012f94:	f04f 0200 	mov.w	r2, #0
 8012f98:	ea03 0501 	and.w	r5, r3, r1
 8012f9c:	ea04 0602 	and.w	r6, r4, r2
 8012fa0:	4629      	mov	r1, r5
 8012fa2:	4632      	mov	r2, r6
 8012fa4:	f04f 0300 	mov.w	r3, #0
 8012fa8:	f04f 0400 	mov.w	r4, #0
 8012fac:	0154      	lsls	r4, r2, #5
 8012fae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8012fb2:	014b      	lsls	r3, r1, #5
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	4622      	mov	r2, r4
 8012fb8:	1b49      	subs	r1, r1, r5
 8012fba:	eb62 0206 	sbc.w	r2, r2, r6
 8012fbe:	f04f 0300 	mov.w	r3, #0
 8012fc2:	f04f 0400 	mov.w	r4, #0
 8012fc6:	0194      	lsls	r4, r2, #6
 8012fc8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8012fcc:	018b      	lsls	r3, r1, #6
 8012fce:	1a5b      	subs	r3, r3, r1
 8012fd0:	eb64 0402 	sbc.w	r4, r4, r2
 8012fd4:	f04f 0100 	mov.w	r1, #0
 8012fd8:	f04f 0200 	mov.w	r2, #0
 8012fdc:	00e2      	lsls	r2, r4, #3
 8012fde:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8012fe2:	00d9      	lsls	r1, r3, #3
 8012fe4:	460b      	mov	r3, r1
 8012fe6:	4614      	mov	r4, r2
 8012fe8:	195b      	adds	r3, r3, r5
 8012fea:	eb44 0406 	adc.w	r4, r4, r6
 8012fee:	f04f 0100 	mov.w	r1, #0
 8012ff2:	f04f 0200 	mov.w	r2, #0
 8012ff6:	0262      	lsls	r2, r4, #9
 8012ff8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8012ffc:	0259      	lsls	r1, r3, #9
 8012ffe:	460b      	mov	r3, r1
 8013000:	4614      	mov	r4, r2
 8013002:	4618      	mov	r0, r3
 8013004:	4621      	mov	r1, r4
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	f04f 0400 	mov.w	r4, #0
 801300c:	461a      	mov	r2, r3
 801300e:	4623      	mov	r3, r4
 8013010:	f7f5 fd52 	bl	8008ab8 <__aeabi_uldivmod>
 8013014:	4603      	mov	r3, r0
 8013016:	460c      	mov	r4, r1
 8013018:	60fb      	str	r3, [r7, #12]
 801301a:	e049      	b.n	80130b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801301c:	4b2f      	ldr	r3, [pc, #188]	; (80130dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 801301e:	685b      	ldr	r3, [r3, #4]
 8013020:	099b      	lsrs	r3, r3, #6
 8013022:	f04f 0400 	mov.w	r4, #0
 8013026:	f240 11ff 	movw	r1, #511	; 0x1ff
 801302a:	f04f 0200 	mov.w	r2, #0
 801302e:	ea03 0501 	and.w	r5, r3, r1
 8013032:	ea04 0602 	and.w	r6, r4, r2
 8013036:	4629      	mov	r1, r5
 8013038:	4632      	mov	r2, r6
 801303a:	f04f 0300 	mov.w	r3, #0
 801303e:	f04f 0400 	mov.w	r4, #0
 8013042:	0154      	lsls	r4, r2, #5
 8013044:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013048:	014b      	lsls	r3, r1, #5
 801304a:	4619      	mov	r1, r3
 801304c:	4622      	mov	r2, r4
 801304e:	1b49      	subs	r1, r1, r5
 8013050:	eb62 0206 	sbc.w	r2, r2, r6
 8013054:	f04f 0300 	mov.w	r3, #0
 8013058:	f04f 0400 	mov.w	r4, #0
 801305c:	0194      	lsls	r4, r2, #6
 801305e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8013062:	018b      	lsls	r3, r1, #6
 8013064:	1a5b      	subs	r3, r3, r1
 8013066:	eb64 0402 	sbc.w	r4, r4, r2
 801306a:	f04f 0100 	mov.w	r1, #0
 801306e:	f04f 0200 	mov.w	r2, #0
 8013072:	00e2      	lsls	r2, r4, #3
 8013074:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8013078:	00d9      	lsls	r1, r3, #3
 801307a:	460b      	mov	r3, r1
 801307c:	4614      	mov	r4, r2
 801307e:	195b      	adds	r3, r3, r5
 8013080:	eb44 0406 	adc.w	r4, r4, r6
 8013084:	f04f 0100 	mov.w	r1, #0
 8013088:	f04f 0200 	mov.w	r2, #0
 801308c:	02a2      	lsls	r2, r4, #10
 801308e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8013092:	0299      	lsls	r1, r3, #10
 8013094:	460b      	mov	r3, r1
 8013096:	4614      	mov	r4, r2
 8013098:	4618      	mov	r0, r3
 801309a:	4621      	mov	r1, r4
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	f04f 0400 	mov.w	r4, #0
 80130a2:	461a      	mov	r2, r3
 80130a4:	4623      	mov	r3, r4
 80130a6:	f7f5 fd07 	bl	8008ab8 <__aeabi_uldivmod>
 80130aa:	4603      	mov	r3, r0
 80130ac:	460c      	mov	r4, r1
 80130ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80130b0:	4b0a      	ldr	r3, [pc, #40]	; (80130dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80130b2:	685b      	ldr	r3, [r3, #4]
 80130b4:	0c1b      	lsrs	r3, r3, #16
 80130b6:	f003 0303 	and.w	r3, r3, #3
 80130ba:	3301      	adds	r3, #1
 80130bc:	005b      	lsls	r3, r3, #1
 80130be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80130c0:	68fa      	ldr	r2, [r7, #12]
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80130c8:	60bb      	str	r3, [r7, #8]
      break;
 80130ca:	e002      	b.n	80130d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80130cc:	4b04      	ldr	r3, [pc, #16]	; (80130e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80130ce:	60bb      	str	r3, [r7, #8]
      break;
 80130d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80130d2:	68bb      	ldr	r3, [r7, #8]
}
 80130d4:	4618      	mov	r0, r3
 80130d6:	3714      	adds	r7, #20
 80130d8:	46bd      	mov	sp, r7
 80130da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130dc:	40023800 	.word	0x40023800
 80130e0:	00f42400 	.word	0x00f42400
 80130e4:	007a1200 	.word	0x007a1200

080130e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80130e8:	b480      	push	{r7}
 80130ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80130ec:	4b03      	ldr	r3, [pc, #12]	; (80130fc <HAL_RCC_GetHCLKFreq+0x14>)
 80130ee:	681b      	ldr	r3, [r3, #0]
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	46bd      	mov	sp, r7
 80130f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop
 80130fc:	20000074 	.word	0x20000074

08013100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013104:	f7ff fff0 	bl	80130e8 <HAL_RCC_GetHCLKFreq>
 8013108:	4601      	mov	r1, r0
 801310a:	4b05      	ldr	r3, [pc, #20]	; (8013120 <HAL_RCC_GetPCLK1Freq+0x20>)
 801310c:	689b      	ldr	r3, [r3, #8]
 801310e:	0a9b      	lsrs	r3, r3, #10
 8013110:	f003 0307 	and.w	r3, r3, #7
 8013114:	4a03      	ldr	r2, [pc, #12]	; (8013124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013116:	5cd3      	ldrb	r3, [r2, r3]
 8013118:	fa21 f303 	lsr.w	r3, r1, r3
}
 801311c:	4618      	mov	r0, r3
 801311e:	bd80      	pop	{r7, pc}
 8013120:	40023800 	.word	0x40023800
 8013124:	080185d4 	.word	0x080185d4

08013128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801312c:	f7ff ffdc 	bl	80130e8 <HAL_RCC_GetHCLKFreq>
 8013130:	4601      	mov	r1, r0
 8013132:	4b05      	ldr	r3, [pc, #20]	; (8013148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8013134:	689b      	ldr	r3, [r3, #8]
 8013136:	0b5b      	lsrs	r3, r3, #13
 8013138:	f003 0307 	and.w	r3, r3, #7
 801313c:	4a03      	ldr	r2, [pc, #12]	; (801314c <HAL_RCC_GetPCLK2Freq+0x24>)
 801313e:	5cd3      	ldrb	r3, [r2, r3]
 8013140:	fa21 f303 	lsr.w	r3, r1, r3
}
 8013144:	4618      	mov	r0, r3
 8013146:	bd80      	pop	{r7, pc}
 8013148:	40023800 	.word	0x40023800
 801314c:	080185d4 	.word	0x080185d4

08013150 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b082      	sub	sp, #8
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d101      	bne.n	8013162 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801315e:	2301      	movs	r3, #1
 8013160:	e056      	b.n	8013210 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	2200      	movs	r2, #0
 8013166:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801316e:	b2db      	uxtb	r3, r3
 8013170:	2b00      	cmp	r3, #0
 8013172:	d106      	bne.n	8013182 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2200      	movs	r2, #0
 8013178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801317c:	6878      	ldr	r0, [r7, #4]
 801317e:	f7fc ff4b 	bl	8010018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	2202      	movs	r2, #2
 8013186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	681a      	ldr	r2, [r3, #0]
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013198:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	685a      	ldr	r2, [r3, #4]
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	689b      	ldr	r3, [r3, #8]
 80131a2:	431a      	orrs	r2, r3
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	68db      	ldr	r3, [r3, #12]
 80131a8:	431a      	orrs	r2, r3
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	691b      	ldr	r3, [r3, #16]
 80131ae:	431a      	orrs	r2, r3
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	695b      	ldr	r3, [r3, #20]
 80131b4:	431a      	orrs	r2, r3
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	699b      	ldr	r3, [r3, #24]
 80131ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80131be:	431a      	orrs	r2, r3
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	69db      	ldr	r3, [r3, #28]
 80131c4:	431a      	orrs	r2, r3
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	6a1b      	ldr	r3, [r3, #32]
 80131ca:	ea42 0103 	orr.w	r1, r2, r3
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	430a      	orrs	r2, r1
 80131d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	699b      	ldr	r3, [r3, #24]
 80131de:	0c1b      	lsrs	r3, r3, #16
 80131e0:	f003 0104 	and.w	r1, r3, #4
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	430a      	orrs	r2, r1
 80131ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	69da      	ldr	r2, [r3, #28]
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80131fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	2200      	movs	r2, #0
 8013204:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	2201      	movs	r2, #1
 801320a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801320e:	2300      	movs	r3, #0
}
 8013210:	4618      	mov	r0, r3
 8013212:	3708      	adds	r7, #8
 8013214:	46bd      	mov	sp, r7
 8013216:	bd80      	pop	{r7, pc}

08013218 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b088      	sub	sp, #32
 801321c:	af00      	add	r7, sp, #0
 801321e:	60f8      	str	r0, [r7, #12]
 8013220:	60b9      	str	r1, [r7, #8]
 8013222:	603b      	str	r3, [r7, #0]
 8013224:	4613      	mov	r3, r2
 8013226:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013228:	2300      	movs	r3, #0
 801322a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013232:	2b01      	cmp	r3, #1
 8013234:	d101      	bne.n	801323a <HAL_SPI_Transmit+0x22>
 8013236:	2302      	movs	r3, #2
 8013238:	e11e      	b.n	8013478 <HAL_SPI_Transmit+0x260>
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	2201      	movs	r2, #1
 801323e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013242:	f7fd fb27 	bl	8010894 <HAL_GetTick>
 8013246:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8013248:	88fb      	ldrh	r3, [r7, #6]
 801324a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013252:	b2db      	uxtb	r3, r3
 8013254:	2b01      	cmp	r3, #1
 8013256:	d002      	beq.n	801325e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8013258:	2302      	movs	r3, #2
 801325a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801325c:	e103      	b.n	8013466 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d002      	beq.n	801326a <HAL_SPI_Transmit+0x52>
 8013264:	88fb      	ldrh	r3, [r7, #6]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d102      	bne.n	8013270 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801326a:	2301      	movs	r3, #1
 801326c:	77fb      	strb	r3, [r7, #31]
    goto error;
 801326e:	e0fa      	b.n	8013466 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	2203      	movs	r2, #3
 8013274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	2200      	movs	r2, #0
 801327c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	68ba      	ldr	r2, [r7, #8]
 8013282:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	88fa      	ldrh	r2, [r7, #6]
 8013288:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	88fa      	ldrh	r2, [r7, #6]
 801328e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	2200      	movs	r2, #0
 8013294:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	2200      	movs	r2, #0
 801329a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	2200      	movs	r2, #0
 80132a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	2200      	movs	r2, #0
 80132a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	2200      	movs	r2, #0
 80132ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	689b      	ldr	r3, [r3, #8]
 80132b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80132b6:	d107      	bne.n	80132c8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	681a      	ldr	r2, [r3, #0]
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80132c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132d2:	2b40      	cmp	r3, #64	; 0x40
 80132d4:	d007      	beq.n	80132e6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	681a      	ldr	r2, [r3, #0]
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80132e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	68db      	ldr	r3, [r3, #12]
 80132ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80132ee:	d14b      	bne.n	8013388 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	685b      	ldr	r3, [r3, #4]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d002      	beq.n	80132fe <HAL_SPI_Transmit+0xe6>
 80132f8:	8afb      	ldrh	r3, [r7, #22]
 80132fa:	2b01      	cmp	r3, #1
 80132fc:	d13e      	bne.n	801337c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013302:	881a      	ldrh	r2, [r3, #0]
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801330e:	1c9a      	adds	r2, r3, #2
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013318:	b29b      	uxth	r3, r3
 801331a:	3b01      	subs	r3, #1
 801331c:	b29a      	uxth	r2, r3
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013322:	e02b      	b.n	801337c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	689b      	ldr	r3, [r3, #8]
 801332a:	f003 0302 	and.w	r3, r3, #2
 801332e:	2b02      	cmp	r3, #2
 8013330:	d112      	bne.n	8013358 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013336:	881a      	ldrh	r2, [r3, #0]
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013342:	1c9a      	adds	r2, r3, #2
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801334c:	b29b      	uxth	r3, r3
 801334e:	3b01      	subs	r3, #1
 8013350:	b29a      	uxth	r2, r3
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	86da      	strh	r2, [r3, #54]	; 0x36
 8013356:	e011      	b.n	801337c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013358:	f7fd fa9c 	bl	8010894 <HAL_GetTick>
 801335c:	4602      	mov	r2, r0
 801335e:	69bb      	ldr	r3, [r7, #24]
 8013360:	1ad3      	subs	r3, r2, r3
 8013362:	683a      	ldr	r2, [r7, #0]
 8013364:	429a      	cmp	r2, r3
 8013366:	d803      	bhi.n	8013370 <HAL_SPI_Transmit+0x158>
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801336e:	d102      	bne.n	8013376 <HAL_SPI_Transmit+0x15e>
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d102      	bne.n	801337c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8013376:	2303      	movs	r3, #3
 8013378:	77fb      	strb	r3, [r7, #31]
          goto error;
 801337a:	e074      	b.n	8013466 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013380:	b29b      	uxth	r3, r3
 8013382:	2b00      	cmp	r3, #0
 8013384:	d1ce      	bne.n	8013324 <HAL_SPI_Transmit+0x10c>
 8013386:	e04c      	b.n	8013422 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	685b      	ldr	r3, [r3, #4]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d002      	beq.n	8013396 <HAL_SPI_Transmit+0x17e>
 8013390:	8afb      	ldrh	r3, [r7, #22]
 8013392:	2b01      	cmp	r3, #1
 8013394:	d140      	bne.n	8013418 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	330c      	adds	r3, #12
 80133a0:	7812      	ldrb	r2, [r2, #0]
 80133a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133a8:	1c5a      	adds	r2, r3, #1
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80133b2:	b29b      	uxth	r3, r3
 80133b4:	3b01      	subs	r3, #1
 80133b6:	b29a      	uxth	r2, r3
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80133bc:	e02c      	b.n	8013418 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	689b      	ldr	r3, [r3, #8]
 80133c4:	f003 0302 	and.w	r3, r3, #2
 80133c8:	2b02      	cmp	r3, #2
 80133ca:	d113      	bne.n	80133f4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	330c      	adds	r3, #12
 80133d6:	7812      	ldrb	r2, [r2, #0]
 80133d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133de:	1c5a      	adds	r2, r3, #1
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80133e8:	b29b      	uxth	r3, r3
 80133ea:	3b01      	subs	r3, #1
 80133ec:	b29a      	uxth	r2, r3
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80133f2:	e011      	b.n	8013418 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80133f4:	f7fd fa4e 	bl	8010894 <HAL_GetTick>
 80133f8:	4602      	mov	r2, r0
 80133fa:	69bb      	ldr	r3, [r7, #24]
 80133fc:	1ad3      	subs	r3, r2, r3
 80133fe:	683a      	ldr	r2, [r7, #0]
 8013400:	429a      	cmp	r2, r3
 8013402:	d803      	bhi.n	801340c <HAL_SPI_Transmit+0x1f4>
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	f1b3 3fff 	cmp.w	r3, #4294967295
 801340a:	d102      	bne.n	8013412 <HAL_SPI_Transmit+0x1fa>
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d102      	bne.n	8013418 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8013412:	2303      	movs	r3, #3
 8013414:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013416:	e026      	b.n	8013466 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801341c:	b29b      	uxth	r3, r3
 801341e:	2b00      	cmp	r3, #0
 8013420:	d1cd      	bne.n	80133be <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013422:	69ba      	ldr	r2, [r7, #24]
 8013424:	6839      	ldr	r1, [r7, #0]
 8013426:	68f8      	ldr	r0, [r7, #12]
 8013428:	f000 fba4 	bl	8013b74 <SPI_EndRxTxTransaction>
 801342c:	4603      	mov	r3, r0
 801342e:	2b00      	cmp	r3, #0
 8013430:	d002      	beq.n	8013438 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	2220      	movs	r2, #32
 8013436:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	689b      	ldr	r3, [r3, #8]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d10a      	bne.n	8013456 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013440:	2300      	movs	r3, #0
 8013442:	613b      	str	r3, [r7, #16]
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	68db      	ldr	r3, [r3, #12]
 801344a:	613b      	str	r3, [r7, #16]
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	689b      	ldr	r3, [r3, #8]
 8013452:	613b      	str	r3, [r7, #16]
 8013454:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801345a:	2b00      	cmp	r3, #0
 801345c:	d002      	beq.n	8013464 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 801345e:	2301      	movs	r3, #1
 8013460:	77fb      	strb	r3, [r7, #31]
 8013462:	e000      	b.n	8013466 <HAL_SPI_Transmit+0x24e>
  }

error:
 8013464:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2201      	movs	r2, #1
 801346a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	2200      	movs	r2, #0
 8013472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013476:	7ffb      	ldrb	r3, [r7, #31]
}
 8013478:	4618      	mov	r0, r3
 801347a:	3720      	adds	r7, #32
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}

08013480 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b088      	sub	sp, #32
 8013484:	af02      	add	r7, sp, #8
 8013486:	60f8      	str	r0, [r7, #12]
 8013488:	60b9      	str	r1, [r7, #8]
 801348a:	603b      	str	r3, [r7, #0]
 801348c:	4613      	mov	r3, r2
 801348e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013490:	2300      	movs	r3, #0
 8013492:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	685b      	ldr	r3, [r3, #4]
 8013498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801349c:	d112      	bne.n	80134c4 <HAL_SPI_Receive+0x44>
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	689b      	ldr	r3, [r3, #8]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d10e      	bne.n	80134c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	2204      	movs	r2, #4
 80134aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80134ae:	88fa      	ldrh	r2, [r7, #6]
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	9300      	str	r3, [sp, #0]
 80134b4:	4613      	mov	r3, r2
 80134b6:	68ba      	ldr	r2, [r7, #8]
 80134b8:	68b9      	ldr	r1, [r7, #8]
 80134ba:	68f8      	ldr	r0, [r7, #12]
 80134bc:	f000 f8e9 	bl	8013692 <HAL_SPI_TransmitReceive>
 80134c0:	4603      	mov	r3, r0
 80134c2:	e0e2      	b.n	801368a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80134ca:	2b01      	cmp	r3, #1
 80134cc:	d101      	bne.n	80134d2 <HAL_SPI_Receive+0x52>
 80134ce:	2302      	movs	r3, #2
 80134d0:	e0db      	b.n	801368a <HAL_SPI_Receive+0x20a>
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	2201      	movs	r2, #1
 80134d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80134da:	f7fd f9db 	bl	8010894 <HAL_GetTick>
 80134de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80134e6:	b2db      	uxtb	r3, r3
 80134e8:	2b01      	cmp	r3, #1
 80134ea:	d002      	beq.n	80134f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80134ec:	2302      	movs	r3, #2
 80134ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80134f0:	e0c2      	b.n	8013678 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d002      	beq.n	80134fe <HAL_SPI_Receive+0x7e>
 80134f8:	88fb      	ldrh	r3, [r7, #6]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d102      	bne.n	8013504 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80134fe:	2301      	movs	r3, #1
 8013500:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013502:	e0b9      	b.n	8013678 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	2204      	movs	r2, #4
 8013508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	2200      	movs	r2, #0
 8013510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	68ba      	ldr	r2, [r7, #8]
 8013516:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	88fa      	ldrh	r2, [r7, #6]
 801351c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	88fa      	ldrh	r2, [r7, #6]
 8013522:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	2200      	movs	r2, #0
 8013528:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	2200      	movs	r2, #0
 801352e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	2200      	movs	r2, #0
 8013534:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	2200      	movs	r2, #0
 801353a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	2200      	movs	r2, #0
 8013540:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	689b      	ldr	r3, [r3, #8]
 8013546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801354a:	d107      	bne.n	801355c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	681a      	ldr	r2, [r3, #0]
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801355a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013566:	2b40      	cmp	r3, #64	; 0x40
 8013568:	d007      	beq.n	801357a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	681a      	ldr	r2, [r3, #0]
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013578:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	68db      	ldr	r3, [r3, #12]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d162      	bne.n	8013648 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8013582:	e02e      	b.n	80135e2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	689b      	ldr	r3, [r3, #8]
 801358a:	f003 0301 	and.w	r3, r3, #1
 801358e:	2b01      	cmp	r3, #1
 8013590:	d115      	bne.n	80135be <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	f103 020c 	add.w	r2, r3, #12
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801359e:	7812      	ldrb	r2, [r2, #0]
 80135a0:	b2d2      	uxtb	r2, r2
 80135a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135a8:	1c5a      	adds	r2, r3, #1
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	3b01      	subs	r3, #1
 80135b6:	b29a      	uxth	r2, r3
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80135bc:	e011      	b.n	80135e2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80135be:	f7fd f969 	bl	8010894 <HAL_GetTick>
 80135c2:	4602      	mov	r2, r0
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	1ad3      	subs	r3, r2, r3
 80135c8:	683a      	ldr	r2, [r7, #0]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	d803      	bhi.n	80135d6 <HAL_SPI_Receive+0x156>
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135d4:	d102      	bne.n	80135dc <HAL_SPI_Receive+0x15c>
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d102      	bne.n	80135e2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80135dc:	2303      	movs	r3, #3
 80135de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80135e0:	e04a      	b.n	8013678 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80135e6:	b29b      	uxth	r3, r3
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d1cb      	bne.n	8013584 <HAL_SPI_Receive+0x104>
 80135ec:	e031      	b.n	8013652 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	689b      	ldr	r3, [r3, #8]
 80135f4:	f003 0301 	and.w	r3, r3, #1
 80135f8:	2b01      	cmp	r3, #1
 80135fa:	d113      	bne.n	8013624 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	68da      	ldr	r2, [r3, #12]
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013606:	b292      	uxth	r2, r2
 8013608:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801360e:	1c9a      	adds	r2, r3, #2
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013618:	b29b      	uxth	r3, r3
 801361a:	3b01      	subs	r3, #1
 801361c:	b29a      	uxth	r2, r3
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013622:	e011      	b.n	8013648 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013624:	f7fd f936 	bl	8010894 <HAL_GetTick>
 8013628:	4602      	mov	r2, r0
 801362a:	693b      	ldr	r3, [r7, #16]
 801362c:	1ad3      	subs	r3, r2, r3
 801362e:	683a      	ldr	r2, [r7, #0]
 8013630:	429a      	cmp	r2, r3
 8013632:	d803      	bhi.n	801363c <HAL_SPI_Receive+0x1bc>
 8013634:	683b      	ldr	r3, [r7, #0]
 8013636:	f1b3 3fff 	cmp.w	r3, #4294967295
 801363a:	d102      	bne.n	8013642 <HAL_SPI_Receive+0x1c2>
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d102      	bne.n	8013648 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8013642:	2303      	movs	r3, #3
 8013644:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013646:	e017      	b.n	8013678 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801364c:	b29b      	uxth	r3, r3
 801364e:	2b00      	cmp	r3, #0
 8013650:	d1cd      	bne.n	80135ee <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013652:	693a      	ldr	r2, [r7, #16]
 8013654:	6839      	ldr	r1, [r7, #0]
 8013656:	68f8      	ldr	r0, [r7, #12]
 8013658:	f000 fa27 	bl	8013aaa <SPI_EndRxTransaction>
 801365c:	4603      	mov	r3, r0
 801365e:	2b00      	cmp	r3, #0
 8013660:	d002      	beq.n	8013668 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	2220      	movs	r2, #32
 8013666:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801366c:	2b00      	cmp	r3, #0
 801366e:	d002      	beq.n	8013676 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8013670:	2301      	movs	r3, #1
 8013672:	75fb      	strb	r3, [r7, #23]
 8013674:	e000      	b.n	8013678 <HAL_SPI_Receive+0x1f8>
  }

error :
 8013676:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	2201      	movs	r2, #1
 801367c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	2200      	movs	r2, #0
 8013684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013688:	7dfb      	ldrb	r3, [r7, #23]
}
 801368a:	4618      	mov	r0, r3
 801368c:	3718      	adds	r7, #24
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}

08013692 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013692:	b580      	push	{r7, lr}
 8013694:	b08c      	sub	sp, #48	; 0x30
 8013696:	af00      	add	r7, sp, #0
 8013698:	60f8      	str	r0, [r7, #12]
 801369a:	60b9      	str	r1, [r7, #8]
 801369c:	607a      	str	r2, [r7, #4]
 801369e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80136a0:	2301      	movs	r3, #1
 80136a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80136a4:	2300      	movs	r3, #0
 80136a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80136b0:	2b01      	cmp	r3, #1
 80136b2:	d101      	bne.n	80136b8 <HAL_SPI_TransmitReceive+0x26>
 80136b4:	2302      	movs	r3, #2
 80136b6:	e18a      	b.n	80139ce <HAL_SPI_TransmitReceive+0x33c>
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	2201      	movs	r2, #1
 80136bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80136c0:	f7fd f8e8 	bl	8010894 <HAL_GetTick>
 80136c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80136cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	685b      	ldr	r3, [r3, #4]
 80136d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80136d6:	887b      	ldrh	r3, [r7, #2]
 80136d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80136da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80136de:	2b01      	cmp	r3, #1
 80136e0:	d00f      	beq.n	8013702 <HAL_SPI_TransmitReceive+0x70>
 80136e2:	69fb      	ldr	r3, [r7, #28]
 80136e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80136e8:	d107      	bne.n	80136fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	689b      	ldr	r3, [r3, #8]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d103      	bne.n	80136fa <HAL_SPI_TransmitReceive+0x68>
 80136f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80136f6:	2b04      	cmp	r3, #4
 80136f8:	d003      	beq.n	8013702 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80136fa:	2302      	movs	r3, #2
 80136fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013700:	e15b      	b.n	80139ba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d005      	beq.n	8013714 <HAL_SPI_TransmitReceive+0x82>
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d002      	beq.n	8013714 <HAL_SPI_TransmitReceive+0x82>
 801370e:	887b      	ldrh	r3, [r7, #2]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d103      	bne.n	801371c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8013714:	2301      	movs	r3, #1
 8013716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801371a:	e14e      	b.n	80139ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013722:	b2db      	uxtb	r3, r3
 8013724:	2b04      	cmp	r3, #4
 8013726:	d003      	beq.n	8013730 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	2205      	movs	r2, #5
 801372c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	2200      	movs	r2, #0
 8013734:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	687a      	ldr	r2, [r7, #4]
 801373a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	887a      	ldrh	r2, [r7, #2]
 8013740:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	887a      	ldrh	r2, [r7, #2]
 8013746:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	68ba      	ldr	r2, [r7, #8]
 801374c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	887a      	ldrh	r2, [r7, #2]
 8013752:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	887a      	ldrh	r2, [r7, #2]
 8013758:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	2200      	movs	r2, #0
 801375e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	2200      	movs	r2, #0
 8013764:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013770:	2b40      	cmp	r3, #64	; 0x40
 8013772:	d007      	beq.n	8013784 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	681a      	ldr	r2, [r3, #0]
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013782:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	68db      	ldr	r3, [r3, #12]
 8013788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801378c:	d178      	bne.n	8013880 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	685b      	ldr	r3, [r3, #4]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d002      	beq.n	801379c <HAL_SPI_TransmitReceive+0x10a>
 8013796:	8b7b      	ldrh	r3, [r7, #26]
 8013798:	2b01      	cmp	r3, #1
 801379a:	d166      	bne.n	801386a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137a0:	881a      	ldrh	r2, [r3, #0]
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137ac:	1c9a      	adds	r2, r3, #2
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	3b01      	subs	r3, #1
 80137ba:	b29a      	uxth	r2, r3
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80137c0:	e053      	b.n	801386a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	689b      	ldr	r3, [r3, #8]
 80137c8:	f003 0302 	and.w	r3, r3, #2
 80137cc:	2b02      	cmp	r3, #2
 80137ce:	d11b      	bne.n	8013808 <HAL_SPI_TransmitReceive+0x176>
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80137d4:	b29b      	uxth	r3, r3
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d016      	beq.n	8013808 <HAL_SPI_TransmitReceive+0x176>
 80137da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137dc:	2b01      	cmp	r3, #1
 80137de:	d113      	bne.n	8013808 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137e4:	881a      	ldrh	r2, [r3, #0]
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137f0:	1c9a      	adds	r2, r3, #2
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80137fa:	b29b      	uxth	r3, r3
 80137fc:	3b01      	subs	r3, #1
 80137fe:	b29a      	uxth	r2, r3
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013804:	2300      	movs	r3, #0
 8013806:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	689b      	ldr	r3, [r3, #8]
 801380e:	f003 0301 	and.w	r3, r3, #1
 8013812:	2b01      	cmp	r3, #1
 8013814:	d119      	bne.n	801384a <HAL_SPI_TransmitReceive+0x1b8>
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801381a:	b29b      	uxth	r3, r3
 801381c:	2b00      	cmp	r3, #0
 801381e:	d014      	beq.n	801384a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	68da      	ldr	r2, [r3, #12]
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801382a:	b292      	uxth	r2, r2
 801382c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013832:	1c9a      	adds	r2, r3, #2
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801383c:	b29b      	uxth	r3, r3
 801383e:	3b01      	subs	r3, #1
 8013840:	b29a      	uxth	r2, r3
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013846:	2301      	movs	r3, #1
 8013848:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801384a:	f7fd f823 	bl	8010894 <HAL_GetTick>
 801384e:	4602      	mov	r2, r0
 8013850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013852:	1ad3      	subs	r3, r2, r3
 8013854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013856:	429a      	cmp	r2, r3
 8013858:	d807      	bhi.n	801386a <HAL_SPI_TransmitReceive+0x1d8>
 801385a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013860:	d003      	beq.n	801386a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013862:	2303      	movs	r3, #3
 8013864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013868:	e0a7      	b.n	80139ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801386e:	b29b      	uxth	r3, r3
 8013870:	2b00      	cmp	r3, #0
 8013872:	d1a6      	bne.n	80137c2 <HAL_SPI_TransmitReceive+0x130>
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013878:	b29b      	uxth	r3, r3
 801387a:	2b00      	cmp	r3, #0
 801387c:	d1a1      	bne.n	80137c2 <HAL_SPI_TransmitReceive+0x130>
 801387e:	e07c      	b.n	801397a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	685b      	ldr	r3, [r3, #4]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d002      	beq.n	801388e <HAL_SPI_TransmitReceive+0x1fc>
 8013888:	8b7b      	ldrh	r3, [r7, #26]
 801388a:	2b01      	cmp	r3, #1
 801388c:	d16b      	bne.n	8013966 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	330c      	adds	r3, #12
 8013898:	7812      	ldrb	r2, [r2, #0]
 801389a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138a0:	1c5a      	adds	r2, r3, #1
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	3b01      	subs	r3, #1
 80138ae:	b29a      	uxth	r2, r3
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80138b4:	e057      	b.n	8013966 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	689b      	ldr	r3, [r3, #8]
 80138bc:	f003 0302 	and.w	r3, r3, #2
 80138c0:	2b02      	cmp	r3, #2
 80138c2:	d11c      	bne.n	80138fe <HAL_SPI_TransmitReceive+0x26c>
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d017      	beq.n	80138fe <HAL_SPI_TransmitReceive+0x26c>
 80138ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138d0:	2b01      	cmp	r3, #1
 80138d2:	d114      	bne.n	80138fe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	330c      	adds	r3, #12
 80138de:	7812      	ldrb	r2, [r2, #0]
 80138e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138e6:	1c5a      	adds	r2, r3, #1
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80138f0:	b29b      	uxth	r3, r3
 80138f2:	3b01      	subs	r3, #1
 80138f4:	b29a      	uxth	r2, r3
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80138fa:	2300      	movs	r3, #0
 80138fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	689b      	ldr	r3, [r3, #8]
 8013904:	f003 0301 	and.w	r3, r3, #1
 8013908:	2b01      	cmp	r3, #1
 801390a:	d119      	bne.n	8013940 <HAL_SPI_TransmitReceive+0x2ae>
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013910:	b29b      	uxth	r3, r3
 8013912:	2b00      	cmp	r3, #0
 8013914:	d014      	beq.n	8013940 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	68da      	ldr	r2, [r3, #12]
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013920:	b2d2      	uxtb	r2, r2
 8013922:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013928:	1c5a      	adds	r2, r3, #1
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013932:	b29b      	uxth	r3, r3
 8013934:	3b01      	subs	r3, #1
 8013936:	b29a      	uxth	r2, r3
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801393c:	2301      	movs	r3, #1
 801393e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013940:	f7fc ffa8 	bl	8010894 <HAL_GetTick>
 8013944:	4602      	mov	r2, r0
 8013946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013948:	1ad3      	subs	r3, r2, r3
 801394a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801394c:	429a      	cmp	r2, r3
 801394e:	d803      	bhi.n	8013958 <HAL_SPI_TransmitReceive+0x2c6>
 8013950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013956:	d102      	bne.n	801395e <HAL_SPI_TransmitReceive+0x2cc>
 8013958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801395a:	2b00      	cmp	r3, #0
 801395c:	d103      	bne.n	8013966 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801395e:	2303      	movs	r3, #3
 8013960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013964:	e029      	b.n	80139ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801396a:	b29b      	uxth	r3, r3
 801396c:	2b00      	cmp	r3, #0
 801396e:	d1a2      	bne.n	80138b6 <HAL_SPI_TransmitReceive+0x224>
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013974:	b29b      	uxth	r3, r3
 8013976:	2b00      	cmp	r3, #0
 8013978:	d19d      	bne.n	80138b6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801397a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801397c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801397e:	68f8      	ldr	r0, [r7, #12]
 8013980:	f000 f8f8 	bl	8013b74 <SPI_EndRxTxTransaction>
 8013984:	4603      	mov	r3, r0
 8013986:	2b00      	cmp	r3, #0
 8013988:	d006      	beq.n	8013998 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801398a:	2301      	movs	r3, #1
 801398c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	2220      	movs	r2, #32
 8013994:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013996:	e010      	b.n	80139ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	689b      	ldr	r3, [r3, #8]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d10b      	bne.n	80139b8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80139a0:	2300      	movs	r3, #0
 80139a2:	617b      	str	r3, [r7, #20]
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	68db      	ldr	r3, [r3, #12]
 80139aa:	617b      	str	r3, [r7, #20]
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	689b      	ldr	r3, [r3, #8]
 80139b2:	617b      	str	r3, [r7, #20]
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	e000      	b.n	80139ba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80139b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	2201      	movs	r2, #1
 80139be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	2200      	movs	r2, #0
 80139c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80139ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80139ce:	4618      	mov	r0, r3
 80139d0:	3730      	adds	r7, #48	; 0x30
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd80      	pop	{r7, pc}

080139d6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80139d6:	b580      	push	{r7, lr}
 80139d8:	b084      	sub	sp, #16
 80139da:	af00      	add	r7, sp, #0
 80139dc:	60f8      	str	r0, [r7, #12]
 80139de:	60b9      	str	r1, [r7, #8]
 80139e0:	603b      	str	r3, [r7, #0]
 80139e2:	4613      	mov	r3, r2
 80139e4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80139e6:	e04c      	b.n	8013a82 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80139e8:	683b      	ldr	r3, [r7, #0]
 80139ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139ee:	d048      	beq.n	8013a82 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80139f0:	f7fc ff50 	bl	8010894 <HAL_GetTick>
 80139f4:	4602      	mov	r2, r0
 80139f6:	69bb      	ldr	r3, [r7, #24]
 80139f8:	1ad3      	subs	r3, r2, r3
 80139fa:	683a      	ldr	r2, [r7, #0]
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d902      	bls.n	8013a06 <SPI_WaitFlagStateUntilTimeout+0x30>
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d13d      	bne.n	8013a82 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	685a      	ldr	r2, [r3, #4]
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013a14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	685b      	ldr	r3, [r3, #4]
 8013a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013a1e:	d111      	bne.n	8013a44 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	689b      	ldr	r3, [r3, #8]
 8013a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013a28:	d004      	beq.n	8013a34 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	689b      	ldr	r3, [r3, #8]
 8013a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013a32:	d107      	bne.n	8013a44 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	681a      	ldr	r2, [r3, #0]
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013a42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013a4c:	d10f      	bne.n	8013a6e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	681a      	ldr	r2, [r3, #0]
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013a5c:	601a      	str	r2, [r3, #0]
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	681a      	ldr	r2, [r3, #0]
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013a6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	2201      	movs	r2, #1
 8013a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8013a7e:	2303      	movs	r3, #3
 8013a80:	e00f      	b.n	8013aa2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	689a      	ldr	r2, [r3, #8]
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	4013      	ands	r3, r2
 8013a8c:	68ba      	ldr	r2, [r7, #8]
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	bf0c      	ite	eq
 8013a92:	2301      	moveq	r3, #1
 8013a94:	2300      	movne	r3, #0
 8013a96:	b2db      	uxtb	r3, r3
 8013a98:	461a      	mov	r2, r3
 8013a9a:	79fb      	ldrb	r3, [r7, #7]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d1a3      	bne.n	80139e8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8013aa0:	2300      	movs	r3, #0
}
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	3710      	adds	r7, #16
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bd80      	pop	{r7, pc}

08013aaa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8013aaa:	b580      	push	{r7, lr}
 8013aac:	b086      	sub	sp, #24
 8013aae:	af02      	add	r7, sp, #8
 8013ab0:	60f8      	str	r0, [r7, #12]
 8013ab2:	60b9      	str	r1, [r7, #8]
 8013ab4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013abe:	d111      	bne.n	8013ae4 <SPI_EndRxTransaction+0x3a>
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	689b      	ldr	r3, [r3, #8]
 8013ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013ac8:	d004      	beq.n	8013ad4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	689b      	ldr	r3, [r3, #8]
 8013ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013ad2:	d107      	bne.n	8013ae4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	681a      	ldr	r2, [r3, #0]
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013ae2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	685b      	ldr	r3, [r3, #4]
 8013ae8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013aec:	d12a      	bne.n	8013b44 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	689b      	ldr	r3, [r3, #8]
 8013af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013af6:	d012      	beq.n	8013b1e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	9300      	str	r3, [sp, #0]
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	2200      	movs	r2, #0
 8013b00:	2180      	movs	r1, #128	; 0x80
 8013b02:	68f8      	ldr	r0, [r7, #12]
 8013b04:	f7ff ff67 	bl	80139d6 <SPI_WaitFlagStateUntilTimeout>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d02d      	beq.n	8013b6a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b12:	f043 0220 	orr.w	r2, r3, #32
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013b1a:	2303      	movs	r3, #3
 8013b1c:	e026      	b.n	8013b6c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	9300      	str	r3, [sp, #0]
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	2200      	movs	r2, #0
 8013b26:	2101      	movs	r1, #1
 8013b28:	68f8      	ldr	r0, [r7, #12]
 8013b2a:	f7ff ff54 	bl	80139d6 <SPI_WaitFlagStateUntilTimeout>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d01a      	beq.n	8013b6a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b38:	f043 0220 	orr.w	r2, r3, #32
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013b40:	2303      	movs	r3, #3
 8013b42:	e013      	b.n	8013b6c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	9300      	str	r3, [sp, #0]
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	2101      	movs	r1, #1
 8013b4e:	68f8      	ldr	r0, [r7, #12]
 8013b50:	f7ff ff41 	bl	80139d6 <SPI_WaitFlagStateUntilTimeout>
 8013b54:	4603      	mov	r3, r0
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d007      	beq.n	8013b6a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b5e:	f043 0220 	orr.w	r2, r3, #32
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013b66:	2303      	movs	r3, #3
 8013b68:	e000      	b.n	8013b6c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8013b6a:	2300      	movs	r3, #0
}
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	3710      	adds	r7, #16
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}

08013b74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b088      	sub	sp, #32
 8013b78:	af02      	add	r7, sp, #8
 8013b7a:	60f8      	str	r0, [r7, #12]
 8013b7c:	60b9      	str	r1, [r7, #8]
 8013b7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8013b80:	4b1b      	ldr	r3, [pc, #108]	; (8013bf0 <SPI_EndRxTxTransaction+0x7c>)
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	4a1b      	ldr	r2, [pc, #108]	; (8013bf4 <SPI_EndRxTxTransaction+0x80>)
 8013b86:	fba2 2303 	umull	r2, r3, r2, r3
 8013b8a:	0d5b      	lsrs	r3, r3, #21
 8013b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013b90:	fb02 f303 	mul.w	r3, r2, r3
 8013b94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	685b      	ldr	r3, [r3, #4]
 8013b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013b9e:	d112      	bne.n	8013bc6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	9300      	str	r3, [sp, #0]
 8013ba4:	68bb      	ldr	r3, [r7, #8]
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	2180      	movs	r1, #128	; 0x80
 8013baa:	68f8      	ldr	r0, [r7, #12]
 8013bac:	f7ff ff13 	bl	80139d6 <SPI_WaitFlagStateUntilTimeout>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d016      	beq.n	8013be4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013bba:	f043 0220 	orr.w	r2, r3, #32
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013bc2:	2303      	movs	r3, #3
 8013bc4:	e00f      	b.n	8013be6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8013bc6:	697b      	ldr	r3, [r7, #20]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d00a      	beq.n	8013be2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8013bcc:	697b      	ldr	r3, [r7, #20]
 8013bce:	3b01      	subs	r3, #1
 8013bd0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	689b      	ldr	r3, [r3, #8]
 8013bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013bdc:	2b80      	cmp	r3, #128	; 0x80
 8013bde:	d0f2      	beq.n	8013bc6 <SPI_EndRxTxTransaction+0x52>
 8013be0:	e000      	b.n	8013be4 <SPI_EndRxTxTransaction+0x70>
        break;
 8013be2:	bf00      	nop
  }

  return HAL_OK;
 8013be4:	2300      	movs	r3, #0
}
 8013be6:	4618      	mov	r0, r3
 8013be8:	3718      	adds	r7, #24
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bd80      	pop	{r7, pc}
 8013bee:	bf00      	nop
 8013bf0:	20000074 	.word	0x20000074
 8013bf4:	165e9f81 	.word	0x165e9f81

08013bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b082      	sub	sp, #8
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d101      	bne.n	8013c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013c06:	2301      	movs	r3, #1
 8013c08:	e01d      	b.n	8013c46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013c10:	b2db      	uxtb	r3, r3
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d106      	bne.n	8013c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	2200      	movs	r2, #0
 8013c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	f7fc fa42 	bl	80100a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2202      	movs	r2, #2
 8013c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	681a      	ldr	r2, [r3, #0]
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	3304      	adds	r3, #4
 8013c34:	4619      	mov	r1, r3
 8013c36:	4610      	mov	r0, r2
 8013c38:	f000 fe50 	bl	80148dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	2201      	movs	r2, #1
 8013c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013c44:	2300      	movs	r3, #0
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	3708      	adds	r7, #8
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}

08013c4e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013c4e:	b480      	push	{r7}
 8013c50:	b085      	sub	sp, #20
 8013c52:	af00      	add	r7, sp, #0
 8013c54:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	68da      	ldr	r2, [r3, #12]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	f042 0201 	orr.w	r2, r2, #1
 8013c64:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	689b      	ldr	r3, [r3, #8]
 8013c6c:	f003 0307 	and.w	r3, r3, #7
 8013c70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	2b06      	cmp	r3, #6
 8013c76:	d007      	beq.n	8013c88 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	681a      	ldr	r2, [r3, #0]
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	f042 0201 	orr.w	r2, r2, #1
 8013c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013c88:	2300      	movs	r3, #0
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3714      	adds	r7, #20
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c94:	4770      	bx	lr

08013c96 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8013c96:	b480      	push	{r7}
 8013c98:	b083      	sub	sp, #12
 8013c9a:	af00      	add	r7, sp, #0
 8013c9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	68da      	ldr	r2, [r3, #12]
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	f022 0201 	bic.w	r2, r2, #1
 8013cac:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	6a1a      	ldr	r2, [r3, #32]
 8013cb4:	f241 1311 	movw	r3, #4369	; 0x1111
 8013cb8:	4013      	ands	r3, r2
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d10f      	bne.n	8013cde <HAL_TIM_Base_Stop_IT+0x48>
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	6a1a      	ldr	r2, [r3, #32]
 8013cc4:	f240 4344 	movw	r3, #1092	; 0x444
 8013cc8:	4013      	ands	r3, r2
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d107      	bne.n	8013cde <HAL_TIM_Base_Stop_IT+0x48>
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	681a      	ldr	r2, [r3, #0]
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	f022 0201 	bic.w	r2, r2, #1
 8013cdc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013cde:	2300      	movs	r3, #0
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	370c      	adds	r7, #12
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cea:	4770      	bx	lr

08013cec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b082      	sub	sp, #8
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d101      	bne.n	8013cfe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	e01d      	b.n	8013d3a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013d04:	b2db      	uxtb	r3, r3
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d106      	bne.n	8013d18 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f000 f815 	bl	8013d42 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	2202      	movs	r2, #2
 8013d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	681a      	ldr	r2, [r3, #0]
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	3304      	adds	r3, #4
 8013d28:	4619      	mov	r1, r3
 8013d2a:	4610      	mov	r0, r2
 8013d2c:	f000 fdd6 	bl	80148dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2201      	movs	r2, #1
 8013d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013d38:	2300      	movs	r3, #0
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3708      	adds	r7, #8
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}

08013d42 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8013d42:	b480      	push	{r7}
 8013d44:	b083      	sub	sp, #12
 8013d46:	af00      	add	r7, sp, #0
 8013d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8013d4a:	bf00      	nop
 8013d4c:	370c      	adds	r7, #12
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d54:	4770      	bx	lr
	...

08013d58 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b084      	sub	sp, #16
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
 8013d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	2b0c      	cmp	r3, #12
 8013d66:	d841      	bhi.n	8013dec <HAL_TIM_OC_Start_IT+0x94>
 8013d68:	a201      	add	r2, pc, #4	; (adr r2, 8013d70 <HAL_TIM_OC_Start_IT+0x18>)
 8013d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d6e:	bf00      	nop
 8013d70:	08013da5 	.word	0x08013da5
 8013d74:	08013ded 	.word	0x08013ded
 8013d78:	08013ded 	.word	0x08013ded
 8013d7c:	08013ded 	.word	0x08013ded
 8013d80:	08013db7 	.word	0x08013db7
 8013d84:	08013ded 	.word	0x08013ded
 8013d88:	08013ded 	.word	0x08013ded
 8013d8c:	08013ded 	.word	0x08013ded
 8013d90:	08013dc9 	.word	0x08013dc9
 8013d94:	08013ded 	.word	0x08013ded
 8013d98:	08013ded 	.word	0x08013ded
 8013d9c:	08013ded 	.word	0x08013ded
 8013da0:	08013ddb 	.word	0x08013ddb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	68da      	ldr	r2, [r3, #12]
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	f042 0202 	orr.w	r2, r2, #2
 8013db2:	60da      	str	r2, [r3, #12]
      break;
 8013db4:	e01b      	b.n	8013dee <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	68da      	ldr	r2, [r3, #12]
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	f042 0204 	orr.w	r2, r2, #4
 8013dc4:	60da      	str	r2, [r3, #12]
      break;
 8013dc6:	e012      	b.n	8013dee <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	68da      	ldr	r2, [r3, #12]
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	f042 0208 	orr.w	r2, r2, #8
 8013dd6:	60da      	str	r2, [r3, #12]
      break;
 8013dd8:	e009      	b.n	8013dee <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	68da      	ldr	r2, [r3, #12]
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	f042 0210 	orr.w	r2, r2, #16
 8013de8:	60da      	str	r2, [r3, #12]
      break;
 8013dea:	e000      	b.n	8013dee <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8013dec:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	2201      	movs	r2, #1
 8013df4:	6839      	ldr	r1, [r7, #0]
 8013df6:	4618      	mov	r0, r3
 8013df8:	f001 f85a 	bl	8014eb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	4a15      	ldr	r2, [pc, #84]	; (8013e58 <HAL_TIM_OC_Start_IT+0x100>)
 8013e02:	4293      	cmp	r3, r2
 8013e04:	d004      	beq.n	8013e10 <HAL_TIM_OC_Start_IT+0xb8>
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	4a14      	ldr	r2, [pc, #80]	; (8013e5c <HAL_TIM_OC_Start_IT+0x104>)
 8013e0c:	4293      	cmp	r3, r2
 8013e0e:	d101      	bne.n	8013e14 <HAL_TIM_OC_Start_IT+0xbc>
 8013e10:	2301      	movs	r3, #1
 8013e12:	e000      	b.n	8013e16 <HAL_TIM_OC_Start_IT+0xbe>
 8013e14:	2300      	movs	r3, #0
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d007      	beq.n	8013e2a <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013e28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	689b      	ldr	r3, [r3, #8]
 8013e30:	f003 0307 	and.w	r3, r3, #7
 8013e34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	2b06      	cmp	r3, #6
 8013e3a:	d007      	beq.n	8013e4c <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	681a      	ldr	r2, [r3, #0]
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	f042 0201 	orr.w	r2, r2, #1
 8013e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013e4c:	2300      	movs	r3, #0
}
 8013e4e:	4618      	mov	r0, r3
 8013e50:	3710      	adds	r7, #16
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}
 8013e56:	bf00      	nop
 8013e58:	40010000 	.word	0x40010000
 8013e5c:	40010400 	.word	0x40010400

08013e60 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b082      	sub	sp, #8
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
 8013e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8013e6a:	683b      	ldr	r3, [r7, #0]
 8013e6c:	2b0c      	cmp	r3, #12
 8013e6e:	d841      	bhi.n	8013ef4 <HAL_TIM_OC_Stop_IT+0x94>
 8013e70:	a201      	add	r2, pc, #4	; (adr r2, 8013e78 <HAL_TIM_OC_Stop_IT+0x18>)
 8013e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e76:	bf00      	nop
 8013e78:	08013ead 	.word	0x08013ead
 8013e7c:	08013ef5 	.word	0x08013ef5
 8013e80:	08013ef5 	.word	0x08013ef5
 8013e84:	08013ef5 	.word	0x08013ef5
 8013e88:	08013ebf 	.word	0x08013ebf
 8013e8c:	08013ef5 	.word	0x08013ef5
 8013e90:	08013ef5 	.word	0x08013ef5
 8013e94:	08013ef5 	.word	0x08013ef5
 8013e98:	08013ed1 	.word	0x08013ed1
 8013e9c:	08013ef5 	.word	0x08013ef5
 8013ea0:	08013ef5 	.word	0x08013ef5
 8013ea4:	08013ef5 	.word	0x08013ef5
 8013ea8:	08013ee3 	.word	0x08013ee3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	68da      	ldr	r2, [r3, #12]
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	f022 0202 	bic.w	r2, r2, #2
 8013eba:	60da      	str	r2, [r3, #12]
      break;
 8013ebc:	e01b      	b.n	8013ef6 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	68da      	ldr	r2, [r3, #12]
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	f022 0204 	bic.w	r2, r2, #4
 8013ecc:	60da      	str	r2, [r3, #12]
      break;
 8013ece:	e012      	b.n	8013ef6 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	68da      	ldr	r2, [r3, #12]
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	f022 0208 	bic.w	r2, r2, #8
 8013ede:	60da      	str	r2, [r3, #12]
      break;
 8013ee0:	e009      	b.n	8013ef6 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	68da      	ldr	r2, [r3, #12]
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	f022 0210 	bic.w	r2, r2, #16
 8013ef0:	60da      	str	r2, [r3, #12]
      break;
 8013ef2:	e000      	b.n	8013ef6 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8013ef4:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	2200      	movs	r2, #0
 8013efc:	6839      	ldr	r1, [r7, #0]
 8013efe:	4618      	mov	r0, r3
 8013f00:	f000 ffd6 	bl	8014eb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	4a20      	ldr	r2, [pc, #128]	; (8013f8c <HAL_TIM_OC_Stop_IT+0x12c>)
 8013f0a:	4293      	cmp	r3, r2
 8013f0c:	d004      	beq.n	8013f18 <HAL_TIM_OC_Stop_IT+0xb8>
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	4a1f      	ldr	r2, [pc, #124]	; (8013f90 <HAL_TIM_OC_Stop_IT+0x130>)
 8013f14:	4293      	cmp	r3, r2
 8013f16:	d101      	bne.n	8013f1c <HAL_TIM_OC_Stop_IT+0xbc>
 8013f18:	2301      	movs	r3, #1
 8013f1a:	e000      	b.n	8013f1e <HAL_TIM_OC_Stop_IT+0xbe>
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d017      	beq.n	8013f52 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	6a1a      	ldr	r2, [r3, #32]
 8013f28:	f241 1311 	movw	r3, #4369	; 0x1111
 8013f2c:	4013      	ands	r3, r2
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d10f      	bne.n	8013f52 <HAL_TIM_OC_Stop_IT+0xf2>
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	6a1a      	ldr	r2, [r3, #32]
 8013f38:	f240 4344 	movw	r3, #1092	; 0x444
 8013f3c:	4013      	ands	r3, r2
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d107      	bne.n	8013f52 <HAL_TIM_OC_Stop_IT+0xf2>
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013f50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	6a1a      	ldr	r2, [r3, #32]
 8013f58:	f241 1311 	movw	r3, #4369	; 0x1111
 8013f5c:	4013      	ands	r3, r2
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d10f      	bne.n	8013f82 <HAL_TIM_OC_Stop_IT+0x122>
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	6a1a      	ldr	r2, [r3, #32]
 8013f68:	f240 4344 	movw	r3, #1092	; 0x444
 8013f6c:	4013      	ands	r3, r2
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d107      	bne.n	8013f82 <HAL_TIM_OC_Stop_IT+0x122>
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	681a      	ldr	r2, [r3, #0]
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	f022 0201 	bic.w	r2, r2, #1
 8013f80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013f82:	2300      	movs	r3, #0
}
 8013f84:	4618      	mov	r0, r3
 8013f86:	3708      	adds	r7, #8
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}
 8013f8c:	40010000 	.word	0x40010000
 8013f90:	40010400 	.word	0x40010400

08013f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b082      	sub	sp, #8
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d101      	bne.n	8013fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013fa2:	2301      	movs	r3, #1
 8013fa4:	e01d      	b.n	8013fe2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013fac:	b2db      	uxtb	r3, r3
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d106      	bne.n	8013fc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f000 f815 	bl	8013fea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	2202      	movs	r2, #2
 8013fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681a      	ldr	r2, [r3, #0]
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	3304      	adds	r3, #4
 8013fd0:	4619      	mov	r1, r3
 8013fd2:	4610      	mov	r0, r2
 8013fd4:	f000 fc82 	bl	80148dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	2201      	movs	r2, #1
 8013fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013fe0:	2300      	movs	r3, #0
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	3708      	adds	r7, #8
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}

08013fea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8013fea:	b480      	push	{r7}
 8013fec:	b083      	sub	sp, #12
 8013fee:	af00      	add	r7, sp, #0
 8013ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8013ff2:	bf00      	nop
 8013ff4:	370c      	adds	r7, #12
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffc:	4770      	bx	lr
	...

08014000 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b084      	sub	sp, #16
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
 8014008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	2201      	movs	r2, #1
 8014010:	6839      	ldr	r1, [r7, #0]
 8014012:	4618      	mov	r0, r3
 8014014:	f000 ff4c 	bl	8014eb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	4a15      	ldr	r2, [pc, #84]	; (8014074 <HAL_TIM_PWM_Start+0x74>)
 801401e:	4293      	cmp	r3, r2
 8014020:	d004      	beq.n	801402c <HAL_TIM_PWM_Start+0x2c>
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	4a14      	ldr	r2, [pc, #80]	; (8014078 <HAL_TIM_PWM_Start+0x78>)
 8014028:	4293      	cmp	r3, r2
 801402a:	d101      	bne.n	8014030 <HAL_TIM_PWM_Start+0x30>
 801402c:	2301      	movs	r3, #1
 801402e:	e000      	b.n	8014032 <HAL_TIM_PWM_Start+0x32>
 8014030:	2300      	movs	r3, #0
 8014032:	2b00      	cmp	r3, #0
 8014034:	d007      	beq.n	8014046 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014044:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	689b      	ldr	r3, [r3, #8]
 801404c:	f003 0307 	and.w	r3, r3, #7
 8014050:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	2b06      	cmp	r3, #6
 8014056:	d007      	beq.n	8014068 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	681a      	ldr	r2, [r3, #0]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	f042 0201 	orr.w	r2, r2, #1
 8014066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014068:	2300      	movs	r3, #0
}
 801406a:	4618      	mov	r0, r3
 801406c:	3710      	adds	r7, #16
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}
 8014072:	bf00      	nop
 8014074:	40010000 	.word	0x40010000
 8014078:	40010400 	.word	0x40010400

0801407c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b082      	sub	sp, #8
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	2200      	movs	r2, #0
 801408c:	6839      	ldr	r1, [r7, #0]
 801408e:	4618      	mov	r0, r3
 8014090:	f000 ff0e 	bl	8014eb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	4a22      	ldr	r2, [pc, #136]	; (8014124 <HAL_TIM_PWM_Stop+0xa8>)
 801409a:	4293      	cmp	r3, r2
 801409c:	d004      	beq.n	80140a8 <HAL_TIM_PWM_Stop+0x2c>
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	4a21      	ldr	r2, [pc, #132]	; (8014128 <HAL_TIM_PWM_Stop+0xac>)
 80140a4:	4293      	cmp	r3, r2
 80140a6:	d101      	bne.n	80140ac <HAL_TIM_PWM_Stop+0x30>
 80140a8:	2301      	movs	r3, #1
 80140aa:	e000      	b.n	80140ae <HAL_TIM_PWM_Stop+0x32>
 80140ac:	2300      	movs	r3, #0
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d017      	beq.n	80140e2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	6a1a      	ldr	r2, [r3, #32]
 80140b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80140bc:	4013      	ands	r3, r2
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d10f      	bne.n	80140e2 <HAL_TIM_PWM_Stop+0x66>
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	6a1a      	ldr	r2, [r3, #32]
 80140c8:	f240 4344 	movw	r3, #1092	; 0x444
 80140cc:	4013      	ands	r3, r2
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d107      	bne.n	80140e2 <HAL_TIM_PWM_Stop+0x66>
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80140e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	6a1a      	ldr	r2, [r3, #32]
 80140e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80140ec:	4013      	ands	r3, r2
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d10f      	bne.n	8014112 <HAL_TIM_PWM_Stop+0x96>
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	6a1a      	ldr	r2, [r3, #32]
 80140f8:	f240 4344 	movw	r3, #1092	; 0x444
 80140fc:	4013      	ands	r3, r2
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d107      	bne.n	8014112 <HAL_TIM_PWM_Stop+0x96>
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	681a      	ldr	r2, [r3, #0]
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	f022 0201 	bic.w	r2, r2, #1
 8014110:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	2201      	movs	r2, #1
 8014116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801411a:	2300      	movs	r3, #0
}
 801411c:	4618      	mov	r0, r3
 801411e:	3708      	adds	r7, #8
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}
 8014124:	40010000 	.word	0x40010000
 8014128:	40010400 	.word	0x40010400

0801412c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b086      	sub	sp, #24
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
 8014134:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d101      	bne.n	8014140 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 801413c:	2301      	movs	r3, #1
 801413e:	e083      	b.n	8014248 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014146:	b2db      	uxtb	r3, r3
 8014148:	2b00      	cmp	r3, #0
 801414a:	d106      	bne.n	801415a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	2200      	movs	r2, #0
 8014150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	f7fc f837 	bl	80101c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	2202      	movs	r2, #2
 801415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	689b      	ldr	r3, [r3, #8]
 8014168:	687a      	ldr	r2, [r7, #4]
 801416a:	6812      	ldr	r2, [r2, #0]
 801416c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014170:	f023 0307 	bic.w	r3, r3, #7
 8014174:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	681a      	ldr	r2, [r3, #0]
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	3304      	adds	r3, #4
 801417e:	4619      	mov	r1, r3
 8014180:	4610      	mov	r0, r2
 8014182:	f000 fbab 	bl	80148dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	689b      	ldr	r3, [r3, #8]
 801418c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	699b      	ldr	r3, [r3, #24]
 8014194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	6a1b      	ldr	r3, [r3, #32]
 801419c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	697a      	ldr	r2, [r7, #20]
 80141a4:	4313      	orrs	r3, r2
 80141a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80141a8:	693b      	ldr	r3, [r7, #16]
 80141aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80141ae:	f023 0303 	bic.w	r3, r3, #3
 80141b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80141b4:	683b      	ldr	r3, [r7, #0]
 80141b6:	689a      	ldr	r2, [r3, #8]
 80141b8:	683b      	ldr	r3, [r7, #0]
 80141ba:	699b      	ldr	r3, [r3, #24]
 80141bc:	021b      	lsls	r3, r3, #8
 80141be:	4313      	orrs	r3, r2
 80141c0:	693a      	ldr	r2, [r7, #16]
 80141c2:	4313      	orrs	r3, r2
 80141c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80141c6:	693b      	ldr	r3, [r7, #16]
 80141c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80141cc:	f023 030c 	bic.w	r3, r3, #12
 80141d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80141d2:	693b      	ldr	r3, [r7, #16]
 80141d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80141d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80141dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	68da      	ldr	r2, [r3, #12]
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	69db      	ldr	r3, [r3, #28]
 80141e6:	021b      	lsls	r3, r3, #8
 80141e8:	4313      	orrs	r3, r2
 80141ea:	693a      	ldr	r2, [r7, #16]
 80141ec:	4313      	orrs	r3, r2
 80141ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	691b      	ldr	r3, [r3, #16]
 80141f4:	011a      	lsls	r2, r3, #4
 80141f6:	683b      	ldr	r3, [r7, #0]
 80141f8:	6a1b      	ldr	r3, [r3, #32]
 80141fa:	031b      	lsls	r3, r3, #12
 80141fc:	4313      	orrs	r3, r2
 80141fe:	693a      	ldr	r2, [r7, #16]
 8014200:	4313      	orrs	r3, r2
 8014202:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801420a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8014212:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8014214:	683b      	ldr	r3, [r7, #0]
 8014216:	685a      	ldr	r2, [r3, #4]
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	695b      	ldr	r3, [r3, #20]
 801421c:	011b      	lsls	r3, r3, #4
 801421e:	4313      	orrs	r3, r2
 8014220:	68fa      	ldr	r2, [r7, #12]
 8014222:	4313      	orrs	r3, r2
 8014224:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	697a      	ldr	r2, [r7, #20]
 801422c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	693a      	ldr	r2, [r7, #16]
 8014234:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	68fa      	ldr	r2, [r7, #12]
 801423c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	2201      	movs	r2, #1
 8014242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014246:	2300      	movs	r3, #0
}
 8014248:	4618      	mov	r0, r3
 801424a:	3718      	adds	r7, #24
 801424c:	46bd      	mov	sp, r7
 801424e:	bd80      	pop	{r7, pc}

08014250 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
 8014258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 801425a:	683b      	ldr	r3, [r7, #0]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d002      	beq.n	8014266 <HAL_TIM_Encoder_Start+0x16>
 8014260:	2b04      	cmp	r3, #4
 8014262:	d008      	beq.n	8014276 <HAL_TIM_Encoder_Start+0x26>
 8014264:	e00f      	b.n	8014286 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	2201      	movs	r2, #1
 801426c:	2100      	movs	r1, #0
 801426e:	4618      	mov	r0, r3
 8014270:	f000 fe1e 	bl	8014eb0 <TIM_CCxChannelCmd>
      break;
 8014274:	e016      	b.n	80142a4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	2201      	movs	r2, #1
 801427c:	2104      	movs	r1, #4
 801427e:	4618      	mov	r0, r3
 8014280:	f000 fe16 	bl	8014eb0 <TIM_CCxChannelCmd>
      break;
 8014284:	e00e      	b.n	80142a4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	2201      	movs	r2, #1
 801428c:	2100      	movs	r1, #0
 801428e:	4618      	mov	r0, r3
 8014290:	f000 fe0e 	bl	8014eb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	2201      	movs	r2, #1
 801429a:	2104      	movs	r1, #4
 801429c:	4618      	mov	r0, r3
 801429e:	f000 fe07 	bl	8014eb0 <TIM_CCxChannelCmd>
      break;
 80142a2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	681a      	ldr	r2, [r3, #0]
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	f042 0201 	orr.w	r2, r2, #1
 80142b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80142b4:	2300      	movs	r3, #0
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	3708      	adds	r7, #8
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}

080142be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80142be:	b580      	push	{r7, lr}
 80142c0:	b082      	sub	sp, #8
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	691b      	ldr	r3, [r3, #16]
 80142cc:	f003 0302 	and.w	r3, r3, #2
 80142d0:	2b02      	cmp	r3, #2
 80142d2:	d122      	bne.n	801431a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	68db      	ldr	r3, [r3, #12]
 80142da:	f003 0302 	and.w	r3, r3, #2
 80142de:	2b02      	cmp	r3, #2
 80142e0:	d11b      	bne.n	801431a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	f06f 0202 	mvn.w	r2, #2
 80142ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2201      	movs	r2, #1
 80142f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	699b      	ldr	r3, [r3, #24]
 80142f8:	f003 0303 	and.w	r3, r3, #3
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d003      	beq.n	8014308 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014300:	6878      	ldr	r0, [r7, #4]
 8014302:	f000 facc 	bl	801489e <HAL_TIM_IC_CaptureCallback>
 8014306:	e005      	b.n	8014314 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	f000 fabe 	bl	801488a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	f000 facf 	bl	80148b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	2200      	movs	r2, #0
 8014318:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	691b      	ldr	r3, [r3, #16]
 8014320:	f003 0304 	and.w	r3, r3, #4
 8014324:	2b04      	cmp	r3, #4
 8014326:	d122      	bne.n	801436e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	68db      	ldr	r3, [r3, #12]
 801432e:	f003 0304 	and.w	r3, r3, #4
 8014332:	2b04      	cmp	r3, #4
 8014334:	d11b      	bne.n	801436e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	f06f 0204 	mvn.w	r2, #4
 801433e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2202      	movs	r2, #2
 8014344:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	699b      	ldr	r3, [r3, #24]
 801434c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014350:	2b00      	cmp	r3, #0
 8014352:	d003      	beq.n	801435c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f000 faa2 	bl	801489e <HAL_TIM_IC_CaptureCallback>
 801435a:	e005      	b.n	8014368 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f000 fa94 	bl	801488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014362:	6878      	ldr	r0, [r7, #4]
 8014364:	f000 faa5 	bl	80148b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2200      	movs	r2, #0
 801436c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	691b      	ldr	r3, [r3, #16]
 8014374:	f003 0308 	and.w	r3, r3, #8
 8014378:	2b08      	cmp	r3, #8
 801437a:	d122      	bne.n	80143c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	68db      	ldr	r3, [r3, #12]
 8014382:	f003 0308 	and.w	r3, r3, #8
 8014386:	2b08      	cmp	r3, #8
 8014388:	d11b      	bne.n	80143c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	f06f 0208 	mvn.w	r2, #8
 8014392:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2204      	movs	r2, #4
 8014398:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	69db      	ldr	r3, [r3, #28]
 80143a0:	f003 0303 	and.w	r3, r3, #3
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d003      	beq.n	80143b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f000 fa78 	bl	801489e <HAL_TIM_IC_CaptureCallback>
 80143ae:	e005      	b.n	80143bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f000 fa6a 	bl	801488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80143b6:	6878      	ldr	r0, [r7, #4]
 80143b8:	f000 fa7b 	bl	80148b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	2200      	movs	r2, #0
 80143c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	691b      	ldr	r3, [r3, #16]
 80143c8:	f003 0310 	and.w	r3, r3, #16
 80143cc:	2b10      	cmp	r3, #16
 80143ce:	d122      	bne.n	8014416 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	68db      	ldr	r3, [r3, #12]
 80143d6:	f003 0310 	and.w	r3, r3, #16
 80143da:	2b10      	cmp	r3, #16
 80143dc:	d11b      	bne.n	8014416 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	f06f 0210 	mvn.w	r2, #16
 80143e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2208      	movs	r2, #8
 80143ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	69db      	ldr	r3, [r3, #28]
 80143f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d003      	beq.n	8014404 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f000 fa4e 	bl	801489e <HAL_TIM_IC_CaptureCallback>
 8014402:	e005      	b.n	8014410 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f000 fa40 	bl	801488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	f000 fa51 	bl	80148b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	2200      	movs	r2, #0
 8014414:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	691b      	ldr	r3, [r3, #16]
 801441c:	f003 0301 	and.w	r3, r3, #1
 8014420:	2b01      	cmp	r3, #1
 8014422:	d10e      	bne.n	8014442 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	68db      	ldr	r3, [r3, #12]
 801442a:	f003 0301 	and.w	r3, r3, #1
 801442e:	2b01      	cmp	r3, #1
 8014430:	d107      	bne.n	8014442 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	f06f 0201 	mvn.w	r2, #1
 801443a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f7fa f90f 	bl	800e660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	691b      	ldr	r3, [r3, #16]
 8014448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801444c:	2b80      	cmp	r3, #128	; 0x80
 801444e:	d10e      	bne.n	801446e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	68db      	ldr	r3, [r3, #12]
 8014456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801445a:	2b80      	cmp	r3, #128	; 0x80
 801445c:	d107      	bne.n	801446e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014468:	6878      	ldr	r0, [r7, #4]
 801446a:	f000 fee9 	bl	8015240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	691b      	ldr	r3, [r3, #16]
 8014474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014478:	2b40      	cmp	r3, #64	; 0x40
 801447a:	d10e      	bne.n	801449a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	68db      	ldr	r3, [r3, #12]
 8014482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014486:	2b40      	cmp	r3, #64	; 0x40
 8014488:	d107      	bne.n	801449a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014494:	6878      	ldr	r0, [r7, #4]
 8014496:	f000 fa16 	bl	80148c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	691b      	ldr	r3, [r3, #16]
 80144a0:	f003 0320 	and.w	r3, r3, #32
 80144a4:	2b20      	cmp	r3, #32
 80144a6:	d10e      	bne.n	80144c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	68db      	ldr	r3, [r3, #12]
 80144ae:	f003 0320 	and.w	r3, r3, #32
 80144b2:	2b20      	cmp	r3, #32
 80144b4:	d107      	bne.n	80144c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	f06f 0220 	mvn.w	r2, #32
 80144be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f000 feb3 	bl	801522c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80144c6:	bf00      	nop
 80144c8:	3708      	adds	r7, #8
 80144ca:	46bd      	mov	sp, r7
 80144cc:	bd80      	pop	{r7, pc}
	...

080144d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b084      	sub	sp, #16
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	60f8      	str	r0, [r7, #12]
 80144d8:	60b9      	str	r1, [r7, #8]
 80144da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80144e2:	2b01      	cmp	r3, #1
 80144e4:	d101      	bne.n	80144ea <HAL_TIM_OC_ConfigChannel+0x1a>
 80144e6:	2302      	movs	r3, #2
 80144e8:	e04e      	b.n	8014588 <HAL_TIM_OC_ConfigChannel+0xb8>
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	2201      	movs	r2, #1
 80144ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	2202      	movs	r2, #2
 80144f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	2b0c      	cmp	r3, #12
 80144fe:	d839      	bhi.n	8014574 <HAL_TIM_OC_ConfigChannel+0xa4>
 8014500:	a201      	add	r2, pc, #4	; (adr r2, 8014508 <HAL_TIM_OC_ConfigChannel+0x38>)
 8014502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014506:	bf00      	nop
 8014508:	0801453d 	.word	0x0801453d
 801450c:	08014575 	.word	0x08014575
 8014510:	08014575 	.word	0x08014575
 8014514:	08014575 	.word	0x08014575
 8014518:	0801454b 	.word	0x0801454b
 801451c:	08014575 	.word	0x08014575
 8014520:	08014575 	.word	0x08014575
 8014524:	08014575 	.word	0x08014575
 8014528:	08014559 	.word	0x08014559
 801452c:	08014575 	.word	0x08014575
 8014530:	08014575 	.word	0x08014575
 8014534:	08014575 	.word	0x08014575
 8014538:	08014567 	.word	0x08014567
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	68b9      	ldr	r1, [r7, #8]
 8014542:	4618      	mov	r0, r3
 8014544:	f000 fa6a 	bl	8014a1c <TIM_OC1_SetConfig>
      break;
 8014548:	e015      	b.n	8014576 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	68b9      	ldr	r1, [r7, #8]
 8014550:	4618      	mov	r0, r3
 8014552:	f000 fad3 	bl	8014afc <TIM_OC2_SetConfig>
      break;
 8014556:	e00e      	b.n	8014576 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	68b9      	ldr	r1, [r7, #8]
 801455e:	4618      	mov	r0, r3
 8014560:	f000 fb42 	bl	8014be8 <TIM_OC3_SetConfig>
      break;
 8014564:	e007      	b.n	8014576 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	68b9      	ldr	r1, [r7, #8]
 801456c:	4618      	mov	r0, r3
 801456e:	f000 fbaf 	bl	8014cd0 <TIM_OC4_SetConfig>
      break;
 8014572:	e000      	b.n	8014576 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8014574:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	2201      	movs	r2, #1
 801457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	2200      	movs	r2, #0
 8014582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014586:	2300      	movs	r3, #0
}
 8014588:	4618      	mov	r0, r3
 801458a:	3710      	adds	r7, #16
 801458c:	46bd      	mov	sp, r7
 801458e:	bd80      	pop	{r7, pc}

08014590 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b084      	sub	sp, #16
 8014594:	af00      	add	r7, sp, #0
 8014596:	60f8      	str	r0, [r7, #12]
 8014598:	60b9      	str	r1, [r7, #8]
 801459a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80145a2:	2b01      	cmp	r3, #1
 80145a4:	d101      	bne.n	80145aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80145a6:	2302      	movs	r3, #2
 80145a8:	e0b4      	b.n	8014714 <HAL_TIM_PWM_ConfigChannel+0x184>
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	2201      	movs	r2, #1
 80145ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	2202      	movs	r2, #2
 80145b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	2b0c      	cmp	r3, #12
 80145be:	f200 809f 	bhi.w	8014700 <HAL_TIM_PWM_ConfigChannel+0x170>
 80145c2:	a201      	add	r2, pc, #4	; (adr r2, 80145c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80145c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145c8:	080145fd 	.word	0x080145fd
 80145cc:	08014701 	.word	0x08014701
 80145d0:	08014701 	.word	0x08014701
 80145d4:	08014701 	.word	0x08014701
 80145d8:	0801463d 	.word	0x0801463d
 80145dc:	08014701 	.word	0x08014701
 80145e0:	08014701 	.word	0x08014701
 80145e4:	08014701 	.word	0x08014701
 80145e8:	0801467f 	.word	0x0801467f
 80145ec:	08014701 	.word	0x08014701
 80145f0:	08014701 	.word	0x08014701
 80145f4:	08014701 	.word	0x08014701
 80145f8:	080146bf 	.word	0x080146bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	68b9      	ldr	r1, [r7, #8]
 8014602:	4618      	mov	r0, r3
 8014604:	f000 fa0a 	bl	8014a1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	699a      	ldr	r2, [r3, #24]
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	f042 0208 	orr.w	r2, r2, #8
 8014616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	699a      	ldr	r2, [r3, #24]
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	f022 0204 	bic.w	r2, r2, #4
 8014626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	6999      	ldr	r1, [r3, #24]
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	691a      	ldr	r2, [r3, #16]
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	430a      	orrs	r2, r1
 8014638:	619a      	str	r2, [r3, #24]
      break;
 801463a:	e062      	b.n	8014702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	68b9      	ldr	r1, [r7, #8]
 8014642:	4618      	mov	r0, r3
 8014644:	f000 fa5a 	bl	8014afc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	699a      	ldr	r2, [r3, #24]
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	699a      	ldr	r2, [r3, #24]
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	6999      	ldr	r1, [r3, #24]
 801466e:	68bb      	ldr	r3, [r7, #8]
 8014670:	691b      	ldr	r3, [r3, #16]
 8014672:	021a      	lsls	r2, r3, #8
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	430a      	orrs	r2, r1
 801467a:	619a      	str	r2, [r3, #24]
      break;
 801467c:	e041      	b.n	8014702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	68b9      	ldr	r1, [r7, #8]
 8014684:	4618      	mov	r0, r3
 8014686:	f000 faaf 	bl	8014be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	69da      	ldr	r2, [r3, #28]
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	f042 0208 	orr.w	r2, r2, #8
 8014698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	69da      	ldr	r2, [r3, #28]
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	f022 0204 	bic.w	r2, r2, #4
 80146a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	69d9      	ldr	r1, [r3, #28]
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	691a      	ldr	r2, [r3, #16]
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	430a      	orrs	r2, r1
 80146ba:	61da      	str	r2, [r3, #28]
      break;
 80146bc:	e021      	b.n	8014702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	68b9      	ldr	r1, [r7, #8]
 80146c4:	4618      	mov	r0, r3
 80146c6:	f000 fb03 	bl	8014cd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	69da      	ldr	r2, [r3, #28]
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80146d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	69da      	ldr	r2, [r3, #28]
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80146e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	69d9      	ldr	r1, [r3, #28]
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	691b      	ldr	r3, [r3, #16]
 80146f4:	021a      	lsls	r2, r3, #8
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	430a      	orrs	r2, r1
 80146fc:	61da      	str	r2, [r3, #28]
      break;
 80146fe:	e000      	b.n	8014702 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8014700:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	2201      	movs	r2, #1
 8014706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	2200      	movs	r2, #0
 801470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014712:	2300      	movs	r3, #0
}
 8014714:	4618      	mov	r0, r3
 8014716:	3710      	adds	r7, #16
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}

0801471c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b084      	sub	sp, #16
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
 8014724:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801472c:	2b01      	cmp	r3, #1
 801472e:	d101      	bne.n	8014734 <HAL_TIM_ConfigClockSource+0x18>
 8014730:	2302      	movs	r3, #2
 8014732:	e0a6      	b.n	8014882 <HAL_TIM_ConfigClockSource+0x166>
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	2201      	movs	r2, #1
 8014738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	2202      	movs	r2, #2
 8014740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	689b      	ldr	r3, [r3, #8]
 801474a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8014752:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801475a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	68fa      	ldr	r2, [r7, #12]
 8014762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	2b40      	cmp	r3, #64	; 0x40
 801476a:	d067      	beq.n	801483c <HAL_TIM_ConfigClockSource+0x120>
 801476c:	2b40      	cmp	r3, #64	; 0x40
 801476e:	d80b      	bhi.n	8014788 <HAL_TIM_ConfigClockSource+0x6c>
 8014770:	2b10      	cmp	r3, #16
 8014772:	d073      	beq.n	801485c <HAL_TIM_ConfigClockSource+0x140>
 8014774:	2b10      	cmp	r3, #16
 8014776:	d802      	bhi.n	801477e <HAL_TIM_ConfigClockSource+0x62>
 8014778:	2b00      	cmp	r3, #0
 801477a:	d06f      	beq.n	801485c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801477c:	e078      	b.n	8014870 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801477e:	2b20      	cmp	r3, #32
 8014780:	d06c      	beq.n	801485c <HAL_TIM_ConfigClockSource+0x140>
 8014782:	2b30      	cmp	r3, #48	; 0x30
 8014784:	d06a      	beq.n	801485c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8014786:	e073      	b.n	8014870 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8014788:	2b70      	cmp	r3, #112	; 0x70
 801478a:	d00d      	beq.n	80147a8 <HAL_TIM_ConfigClockSource+0x8c>
 801478c:	2b70      	cmp	r3, #112	; 0x70
 801478e:	d804      	bhi.n	801479a <HAL_TIM_ConfigClockSource+0x7e>
 8014790:	2b50      	cmp	r3, #80	; 0x50
 8014792:	d033      	beq.n	80147fc <HAL_TIM_ConfigClockSource+0xe0>
 8014794:	2b60      	cmp	r3, #96	; 0x60
 8014796:	d041      	beq.n	801481c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8014798:	e06a      	b.n	8014870 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801479a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801479e:	d066      	beq.n	801486e <HAL_TIM_ConfigClockSource+0x152>
 80147a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80147a4:	d017      	beq.n	80147d6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80147a6:	e063      	b.n	8014870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	6818      	ldr	r0, [r3, #0]
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	6899      	ldr	r1, [r3, #8]
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	685a      	ldr	r2, [r3, #4]
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	68db      	ldr	r3, [r3, #12]
 80147b8:	f000 fb5a 	bl	8014e70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	689b      	ldr	r3, [r3, #8]
 80147c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80147ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	68fa      	ldr	r2, [r7, #12]
 80147d2:	609a      	str	r2, [r3, #8]
      break;
 80147d4:	e04c      	b.n	8014870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	6818      	ldr	r0, [r3, #0]
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	6899      	ldr	r1, [r3, #8]
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	685a      	ldr	r2, [r3, #4]
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	68db      	ldr	r3, [r3, #12]
 80147e6:	f000 fb43 	bl	8014e70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	689a      	ldr	r2, [r3, #8]
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80147f8:	609a      	str	r2, [r3, #8]
      break;
 80147fa:	e039      	b.n	8014870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	6818      	ldr	r0, [r3, #0]
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	6859      	ldr	r1, [r3, #4]
 8014804:	683b      	ldr	r3, [r7, #0]
 8014806:	68db      	ldr	r3, [r3, #12]
 8014808:	461a      	mov	r2, r3
 801480a:	f000 fab7 	bl	8014d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	2150      	movs	r1, #80	; 0x50
 8014814:	4618      	mov	r0, r3
 8014816:	f000 fb10 	bl	8014e3a <TIM_ITRx_SetConfig>
      break;
 801481a:	e029      	b.n	8014870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	6818      	ldr	r0, [r3, #0]
 8014820:	683b      	ldr	r3, [r7, #0]
 8014822:	6859      	ldr	r1, [r3, #4]
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	68db      	ldr	r3, [r3, #12]
 8014828:	461a      	mov	r2, r3
 801482a:	f000 fad6 	bl	8014dda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	2160      	movs	r1, #96	; 0x60
 8014834:	4618      	mov	r0, r3
 8014836:	f000 fb00 	bl	8014e3a <TIM_ITRx_SetConfig>
      break;
 801483a:	e019      	b.n	8014870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	6818      	ldr	r0, [r3, #0]
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	6859      	ldr	r1, [r3, #4]
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	68db      	ldr	r3, [r3, #12]
 8014848:	461a      	mov	r2, r3
 801484a:	f000 fa97 	bl	8014d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	2140      	movs	r1, #64	; 0x40
 8014854:	4618      	mov	r0, r3
 8014856:	f000 faf0 	bl	8014e3a <TIM_ITRx_SetConfig>
      break;
 801485a:	e009      	b.n	8014870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	681a      	ldr	r2, [r3, #0]
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	4619      	mov	r1, r3
 8014866:	4610      	mov	r0, r2
 8014868:	f000 fae7 	bl	8014e3a <TIM_ITRx_SetConfig>
      break;
 801486c:	e000      	b.n	8014870 <HAL_TIM_ConfigClockSource+0x154>
      break;
 801486e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	2201      	movs	r2, #1
 8014874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	2200      	movs	r2, #0
 801487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014880:	2300      	movs	r3, #0
}
 8014882:	4618      	mov	r0, r3
 8014884:	3710      	adds	r7, #16
 8014886:	46bd      	mov	sp, r7
 8014888:	bd80      	pop	{r7, pc}

0801488a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801488a:	b480      	push	{r7}
 801488c:	b083      	sub	sp, #12
 801488e:	af00      	add	r7, sp, #0
 8014890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014892:	bf00      	nop
 8014894:	370c      	adds	r7, #12
 8014896:	46bd      	mov	sp, r7
 8014898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489c:	4770      	bx	lr

0801489e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801489e:	b480      	push	{r7}
 80148a0:	b083      	sub	sp, #12
 80148a2:	af00      	add	r7, sp, #0
 80148a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80148a6:	bf00      	nop
 80148a8:	370c      	adds	r7, #12
 80148aa:	46bd      	mov	sp, r7
 80148ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b0:	4770      	bx	lr

080148b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80148b2:	b480      	push	{r7}
 80148b4:	b083      	sub	sp, #12
 80148b6:	af00      	add	r7, sp, #0
 80148b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80148ba:	bf00      	nop
 80148bc:	370c      	adds	r7, #12
 80148be:	46bd      	mov	sp, r7
 80148c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c4:	4770      	bx	lr

080148c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80148c6:	b480      	push	{r7}
 80148c8:	b083      	sub	sp, #12
 80148ca:	af00      	add	r7, sp, #0
 80148cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80148ce:	bf00      	nop
 80148d0:	370c      	adds	r7, #12
 80148d2:	46bd      	mov	sp, r7
 80148d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d8:	4770      	bx	lr
	...

080148dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80148dc:	b480      	push	{r7}
 80148de:	b085      	sub	sp, #20
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
 80148e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	4a40      	ldr	r2, [pc, #256]	; (80149f0 <TIM_Base_SetConfig+0x114>)
 80148f0:	4293      	cmp	r3, r2
 80148f2:	d013      	beq.n	801491c <TIM_Base_SetConfig+0x40>
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80148fa:	d00f      	beq.n	801491c <TIM_Base_SetConfig+0x40>
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	4a3d      	ldr	r2, [pc, #244]	; (80149f4 <TIM_Base_SetConfig+0x118>)
 8014900:	4293      	cmp	r3, r2
 8014902:	d00b      	beq.n	801491c <TIM_Base_SetConfig+0x40>
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	4a3c      	ldr	r2, [pc, #240]	; (80149f8 <TIM_Base_SetConfig+0x11c>)
 8014908:	4293      	cmp	r3, r2
 801490a:	d007      	beq.n	801491c <TIM_Base_SetConfig+0x40>
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	4a3b      	ldr	r2, [pc, #236]	; (80149fc <TIM_Base_SetConfig+0x120>)
 8014910:	4293      	cmp	r3, r2
 8014912:	d003      	beq.n	801491c <TIM_Base_SetConfig+0x40>
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	4a3a      	ldr	r2, [pc, #232]	; (8014a00 <TIM_Base_SetConfig+0x124>)
 8014918:	4293      	cmp	r3, r2
 801491a:	d108      	bne.n	801492e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014924:	683b      	ldr	r3, [r7, #0]
 8014926:	685b      	ldr	r3, [r3, #4]
 8014928:	68fa      	ldr	r2, [r7, #12]
 801492a:	4313      	orrs	r3, r2
 801492c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	4a2f      	ldr	r2, [pc, #188]	; (80149f0 <TIM_Base_SetConfig+0x114>)
 8014932:	4293      	cmp	r3, r2
 8014934:	d02b      	beq.n	801498e <TIM_Base_SetConfig+0xb2>
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801493c:	d027      	beq.n	801498e <TIM_Base_SetConfig+0xb2>
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	4a2c      	ldr	r2, [pc, #176]	; (80149f4 <TIM_Base_SetConfig+0x118>)
 8014942:	4293      	cmp	r3, r2
 8014944:	d023      	beq.n	801498e <TIM_Base_SetConfig+0xb2>
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	4a2b      	ldr	r2, [pc, #172]	; (80149f8 <TIM_Base_SetConfig+0x11c>)
 801494a:	4293      	cmp	r3, r2
 801494c:	d01f      	beq.n	801498e <TIM_Base_SetConfig+0xb2>
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	4a2a      	ldr	r2, [pc, #168]	; (80149fc <TIM_Base_SetConfig+0x120>)
 8014952:	4293      	cmp	r3, r2
 8014954:	d01b      	beq.n	801498e <TIM_Base_SetConfig+0xb2>
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	4a29      	ldr	r2, [pc, #164]	; (8014a00 <TIM_Base_SetConfig+0x124>)
 801495a:	4293      	cmp	r3, r2
 801495c:	d017      	beq.n	801498e <TIM_Base_SetConfig+0xb2>
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	4a28      	ldr	r2, [pc, #160]	; (8014a04 <TIM_Base_SetConfig+0x128>)
 8014962:	4293      	cmp	r3, r2
 8014964:	d013      	beq.n	801498e <TIM_Base_SetConfig+0xb2>
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	4a27      	ldr	r2, [pc, #156]	; (8014a08 <TIM_Base_SetConfig+0x12c>)
 801496a:	4293      	cmp	r3, r2
 801496c:	d00f      	beq.n	801498e <TIM_Base_SetConfig+0xb2>
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	4a26      	ldr	r2, [pc, #152]	; (8014a0c <TIM_Base_SetConfig+0x130>)
 8014972:	4293      	cmp	r3, r2
 8014974:	d00b      	beq.n	801498e <TIM_Base_SetConfig+0xb2>
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	4a25      	ldr	r2, [pc, #148]	; (8014a10 <TIM_Base_SetConfig+0x134>)
 801497a:	4293      	cmp	r3, r2
 801497c:	d007      	beq.n	801498e <TIM_Base_SetConfig+0xb2>
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	4a24      	ldr	r2, [pc, #144]	; (8014a14 <TIM_Base_SetConfig+0x138>)
 8014982:	4293      	cmp	r3, r2
 8014984:	d003      	beq.n	801498e <TIM_Base_SetConfig+0xb2>
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	4a23      	ldr	r2, [pc, #140]	; (8014a18 <TIM_Base_SetConfig+0x13c>)
 801498a:	4293      	cmp	r3, r2
 801498c:	d108      	bne.n	80149a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014996:	683b      	ldr	r3, [r7, #0]
 8014998:	68db      	ldr	r3, [r3, #12]
 801499a:	68fa      	ldr	r2, [r7, #12]
 801499c:	4313      	orrs	r3, r2
 801499e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80149a6:	683b      	ldr	r3, [r7, #0]
 80149a8:	695b      	ldr	r3, [r3, #20]
 80149aa:	4313      	orrs	r3, r2
 80149ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	68fa      	ldr	r2, [r7, #12]
 80149b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80149b4:	683b      	ldr	r3, [r7, #0]
 80149b6:	689a      	ldr	r2, [r3, #8]
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	681a      	ldr	r2, [r3, #0]
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	4a0a      	ldr	r2, [pc, #40]	; (80149f0 <TIM_Base_SetConfig+0x114>)
 80149c8:	4293      	cmp	r3, r2
 80149ca:	d003      	beq.n	80149d4 <TIM_Base_SetConfig+0xf8>
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	4a0c      	ldr	r2, [pc, #48]	; (8014a00 <TIM_Base_SetConfig+0x124>)
 80149d0:	4293      	cmp	r3, r2
 80149d2:	d103      	bne.n	80149dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80149d4:	683b      	ldr	r3, [r7, #0]
 80149d6:	691a      	ldr	r2, [r3, #16]
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	2201      	movs	r2, #1
 80149e0:	615a      	str	r2, [r3, #20]
}
 80149e2:	bf00      	nop
 80149e4:	3714      	adds	r7, #20
 80149e6:	46bd      	mov	sp, r7
 80149e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ec:	4770      	bx	lr
 80149ee:	bf00      	nop
 80149f0:	40010000 	.word	0x40010000
 80149f4:	40000400 	.word	0x40000400
 80149f8:	40000800 	.word	0x40000800
 80149fc:	40000c00 	.word	0x40000c00
 8014a00:	40010400 	.word	0x40010400
 8014a04:	40014000 	.word	0x40014000
 8014a08:	40014400 	.word	0x40014400
 8014a0c:	40014800 	.word	0x40014800
 8014a10:	40001800 	.word	0x40001800
 8014a14:	40001c00 	.word	0x40001c00
 8014a18:	40002000 	.word	0x40002000

08014a1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014a1c:	b480      	push	{r7}
 8014a1e:	b087      	sub	sp, #28
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
 8014a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	6a1b      	ldr	r3, [r3, #32]
 8014a2a:	f023 0201 	bic.w	r2, r3, #1
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	6a1b      	ldr	r3, [r3, #32]
 8014a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	685b      	ldr	r3, [r3, #4]
 8014a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	699b      	ldr	r3, [r3, #24]
 8014a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	f023 0303 	bic.w	r3, r3, #3
 8014a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014a54:	683b      	ldr	r3, [r7, #0]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	68fa      	ldr	r2, [r7, #12]
 8014a5a:	4313      	orrs	r3, r2
 8014a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014a5e:	697b      	ldr	r3, [r7, #20]
 8014a60:	f023 0302 	bic.w	r3, r3, #2
 8014a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014a66:	683b      	ldr	r3, [r7, #0]
 8014a68:	689b      	ldr	r3, [r3, #8]
 8014a6a:	697a      	ldr	r2, [r7, #20]
 8014a6c:	4313      	orrs	r3, r2
 8014a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	4a20      	ldr	r2, [pc, #128]	; (8014af4 <TIM_OC1_SetConfig+0xd8>)
 8014a74:	4293      	cmp	r3, r2
 8014a76:	d003      	beq.n	8014a80 <TIM_OC1_SetConfig+0x64>
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	4a1f      	ldr	r2, [pc, #124]	; (8014af8 <TIM_OC1_SetConfig+0xdc>)
 8014a7c:	4293      	cmp	r3, r2
 8014a7e:	d10c      	bne.n	8014a9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014a80:	697b      	ldr	r3, [r7, #20]
 8014a82:	f023 0308 	bic.w	r3, r3, #8
 8014a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014a88:	683b      	ldr	r3, [r7, #0]
 8014a8a:	68db      	ldr	r3, [r3, #12]
 8014a8c:	697a      	ldr	r2, [r7, #20]
 8014a8e:	4313      	orrs	r3, r2
 8014a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014a92:	697b      	ldr	r3, [r7, #20]
 8014a94:	f023 0304 	bic.w	r3, r3, #4
 8014a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	4a15      	ldr	r2, [pc, #84]	; (8014af4 <TIM_OC1_SetConfig+0xd8>)
 8014a9e:	4293      	cmp	r3, r2
 8014aa0:	d003      	beq.n	8014aaa <TIM_OC1_SetConfig+0x8e>
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	4a14      	ldr	r2, [pc, #80]	; (8014af8 <TIM_OC1_SetConfig+0xdc>)
 8014aa6:	4293      	cmp	r3, r2
 8014aa8:	d111      	bne.n	8014ace <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014aaa:	693b      	ldr	r3, [r7, #16]
 8014aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014ab2:	693b      	ldr	r3, [r7, #16]
 8014ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014aba:	683b      	ldr	r3, [r7, #0]
 8014abc:	695b      	ldr	r3, [r3, #20]
 8014abe:	693a      	ldr	r2, [r7, #16]
 8014ac0:	4313      	orrs	r3, r2
 8014ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	699b      	ldr	r3, [r3, #24]
 8014ac8:	693a      	ldr	r2, [r7, #16]
 8014aca:	4313      	orrs	r3, r2
 8014acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	693a      	ldr	r2, [r7, #16]
 8014ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	68fa      	ldr	r2, [r7, #12]
 8014ad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014ada:	683b      	ldr	r3, [r7, #0]
 8014adc:	685a      	ldr	r2, [r3, #4]
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	697a      	ldr	r2, [r7, #20]
 8014ae6:	621a      	str	r2, [r3, #32]
}
 8014ae8:	bf00      	nop
 8014aea:	371c      	adds	r7, #28
 8014aec:	46bd      	mov	sp, r7
 8014aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af2:	4770      	bx	lr
 8014af4:	40010000 	.word	0x40010000
 8014af8:	40010400 	.word	0x40010400

08014afc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014afc:	b480      	push	{r7}
 8014afe:	b087      	sub	sp, #28
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
 8014b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	6a1b      	ldr	r3, [r3, #32]
 8014b0a:	f023 0210 	bic.w	r2, r3, #16
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	6a1b      	ldr	r3, [r3, #32]
 8014b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	685b      	ldr	r3, [r3, #4]
 8014b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	699b      	ldr	r3, [r3, #24]
 8014b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	021b      	lsls	r3, r3, #8
 8014b3a:	68fa      	ldr	r2, [r7, #12]
 8014b3c:	4313      	orrs	r3, r2
 8014b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014b40:	697b      	ldr	r3, [r7, #20]
 8014b42:	f023 0320 	bic.w	r3, r3, #32
 8014b46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	689b      	ldr	r3, [r3, #8]
 8014b4c:	011b      	lsls	r3, r3, #4
 8014b4e:	697a      	ldr	r2, [r7, #20]
 8014b50:	4313      	orrs	r3, r2
 8014b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	4a22      	ldr	r2, [pc, #136]	; (8014be0 <TIM_OC2_SetConfig+0xe4>)
 8014b58:	4293      	cmp	r3, r2
 8014b5a:	d003      	beq.n	8014b64 <TIM_OC2_SetConfig+0x68>
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	4a21      	ldr	r2, [pc, #132]	; (8014be4 <TIM_OC2_SetConfig+0xe8>)
 8014b60:	4293      	cmp	r3, r2
 8014b62:	d10d      	bne.n	8014b80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014b64:	697b      	ldr	r3, [r7, #20]
 8014b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	68db      	ldr	r3, [r3, #12]
 8014b70:	011b      	lsls	r3, r3, #4
 8014b72:	697a      	ldr	r2, [r7, #20]
 8014b74:	4313      	orrs	r3, r2
 8014b76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014b7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	4a17      	ldr	r2, [pc, #92]	; (8014be0 <TIM_OC2_SetConfig+0xe4>)
 8014b84:	4293      	cmp	r3, r2
 8014b86:	d003      	beq.n	8014b90 <TIM_OC2_SetConfig+0x94>
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	4a16      	ldr	r2, [pc, #88]	; (8014be4 <TIM_OC2_SetConfig+0xe8>)
 8014b8c:	4293      	cmp	r3, r2
 8014b8e:	d113      	bne.n	8014bb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014b90:	693b      	ldr	r3, [r7, #16]
 8014b92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014b96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014b98:	693b      	ldr	r3, [r7, #16]
 8014b9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014ba0:	683b      	ldr	r3, [r7, #0]
 8014ba2:	695b      	ldr	r3, [r3, #20]
 8014ba4:	009b      	lsls	r3, r3, #2
 8014ba6:	693a      	ldr	r2, [r7, #16]
 8014ba8:	4313      	orrs	r3, r2
 8014baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014bac:	683b      	ldr	r3, [r7, #0]
 8014bae:	699b      	ldr	r3, [r3, #24]
 8014bb0:	009b      	lsls	r3, r3, #2
 8014bb2:	693a      	ldr	r2, [r7, #16]
 8014bb4:	4313      	orrs	r3, r2
 8014bb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	693a      	ldr	r2, [r7, #16]
 8014bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	68fa      	ldr	r2, [r7, #12]
 8014bc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014bc4:	683b      	ldr	r3, [r7, #0]
 8014bc6:	685a      	ldr	r2, [r3, #4]
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	697a      	ldr	r2, [r7, #20]
 8014bd0:	621a      	str	r2, [r3, #32]
}
 8014bd2:	bf00      	nop
 8014bd4:	371c      	adds	r7, #28
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bdc:	4770      	bx	lr
 8014bde:	bf00      	nop
 8014be0:	40010000 	.word	0x40010000
 8014be4:	40010400 	.word	0x40010400

08014be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014be8:	b480      	push	{r7}
 8014bea:	b087      	sub	sp, #28
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	6a1b      	ldr	r3, [r3, #32]
 8014bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	6a1b      	ldr	r3, [r3, #32]
 8014c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	685b      	ldr	r3, [r3, #4]
 8014c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	69db      	ldr	r3, [r3, #28]
 8014c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	f023 0303 	bic.w	r3, r3, #3
 8014c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	68fa      	ldr	r2, [r7, #12]
 8014c26:	4313      	orrs	r3, r2
 8014c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014c2a:	697b      	ldr	r3, [r7, #20]
 8014c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	689b      	ldr	r3, [r3, #8]
 8014c36:	021b      	lsls	r3, r3, #8
 8014c38:	697a      	ldr	r2, [r7, #20]
 8014c3a:	4313      	orrs	r3, r2
 8014c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	4a21      	ldr	r2, [pc, #132]	; (8014cc8 <TIM_OC3_SetConfig+0xe0>)
 8014c42:	4293      	cmp	r3, r2
 8014c44:	d003      	beq.n	8014c4e <TIM_OC3_SetConfig+0x66>
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	4a20      	ldr	r2, [pc, #128]	; (8014ccc <TIM_OC3_SetConfig+0xe4>)
 8014c4a:	4293      	cmp	r3, r2
 8014c4c:	d10d      	bne.n	8014c6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014c4e:	697b      	ldr	r3, [r7, #20]
 8014c50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014c54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	68db      	ldr	r3, [r3, #12]
 8014c5a:	021b      	lsls	r3, r3, #8
 8014c5c:	697a      	ldr	r2, [r7, #20]
 8014c5e:	4313      	orrs	r3, r2
 8014c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014c62:	697b      	ldr	r3, [r7, #20]
 8014c64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	4a16      	ldr	r2, [pc, #88]	; (8014cc8 <TIM_OC3_SetConfig+0xe0>)
 8014c6e:	4293      	cmp	r3, r2
 8014c70:	d003      	beq.n	8014c7a <TIM_OC3_SetConfig+0x92>
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	4a15      	ldr	r2, [pc, #84]	; (8014ccc <TIM_OC3_SetConfig+0xe4>)
 8014c76:	4293      	cmp	r3, r2
 8014c78:	d113      	bne.n	8014ca2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014c7a:	693b      	ldr	r3, [r7, #16]
 8014c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014c82:	693b      	ldr	r3, [r7, #16]
 8014c84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014c8a:	683b      	ldr	r3, [r7, #0]
 8014c8c:	695b      	ldr	r3, [r3, #20]
 8014c8e:	011b      	lsls	r3, r3, #4
 8014c90:	693a      	ldr	r2, [r7, #16]
 8014c92:	4313      	orrs	r3, r2
 8014c94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014c96:	683b      	ldr	r3, [r7, #0]
 8014c98:	699b      	ldr	r3, [r3, #24]
 8014c9a:	011b      	lsls	r3, r3, #4
 8014c9c:	693a      	ldr	r2, [r7, #16]
 8014c9e:	4313      	orrs	r3, r2
 8014ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	693a      	ldr	r2, [r7, #16]
 8014ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	68fa      	ldr	r2, [r7, #12]
 8014cac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014cae:	683b      	ldr	r3, [r7, #0]
 8014cb0:	685a      	ldr	r2, [r3, #4]
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	697a      	ldr	r2, [r7, #20]
 8014cba:	621a      	str	r2, [r3, #32]
}
 8014cbc:	bf00      	nop
 8014cbe:	371c      	adds	r7, #28
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc6:	4770      	bx	lr
 8014cc8:	40010000 	.word	0x40010000
 8014ccc:	40010400 	.word	0x40010400

08014cd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014cd0:	b480      	push	{r7}
 8014cd2:	b087      	sub	sp, #28
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
 8014cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	6a1b      	ldr	r3, [r3, #32]
 8014cde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	6a1b      	ldr	r3, [r3, #32]
 8014cea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	685b      	ldr	r3, [r3, #4]
 8014cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	69db      	ldr	r3, [r3, #28]
 8014cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014d08:	683b      	ldr	r3, [r7, #0]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	021b      	lsls	r3, r3, #8
 8014d0e:	68fa      	ldr	r2, [r7, #12]
 8014d10:	4313      	orrs	r3, r2
 8014d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014d14:	693b      	ldr	r3, [r7, #16]
 8014d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014d1c:	683b      	ldr	r3, [r7, #0]
 8014d1e:	689b      	ldr	r3, [r3, #8]
 8014d20:	031b      	lsls	r3, r3, #12
 8014d22:	693a      	ldr	r2, [r7, #16]
 8014d24:	4313      	orrs	r3, r2
 8014d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	4a12      	ldr	r2, [pc, #72]	; (8014d74 <TIM_OC4_SetConfig+0xa4>)
 8014d2c:	4293      	cmp	r3, r2
 8014d2e:	d003      	beq.n	8014d38 <TIM_OC4_SetConfig+0x68>
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	4a11      	ldr	r2, [pc, #68]	; (8014d78 <TIM_OC4_SetConfig+0xa8>)
 8014d34:	4293      	cmp	r3, r2
 8014d36:	d109      	bne.n	8014d4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014d3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014d40:	683b      	ldr	r3, [r7, #0]
 8014d42:	695b      	ldr	r3, [r3, #20]
 8014d44:	019b      	lsls	r3, r3, #6
 8014d46:	697a      	ldr	r2, [r7, #20]
 8014d48:	4313      	orrs	r3, r2
 8014d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	697a      	ldr	r2, [r7, #20]
 8014d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	68fa      	ldr	r2, [r7, #12]
 8014d56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014d58:	683b      	ldr	r3, [r7, #0]
 8014d5a:	685a      	ldr	r2, [r3, #4]
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	693a      	ldr	r2, [r7, #16]
 8014d64:	621a      	str	r2, [r3, #32]
}
 8014d66:	bf00      	nop
 8014d68:	371c      	adds	r7, #28
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d70:	4770      	bx	lr
 8014d72:	bf00      	nop
 8014d74:	40010000 	.word	0x40010000
 8014d78:	40010400 	.word	0x40010400

08014d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014d7c:	b480      	push	{r7}
 8014d7e:	b087      	sub	sp, #28
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	60f8      	str	r0, [r7, #12]
 8014d84:	60b9      	str	r1, [r7, #8]
 8014d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	6a1b      	ldr	r3, [r3, #32]
 8014d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	6a1b      	ldr	r3, [r3, #32]
 8014d92:	f023 0201 	bic.w	r2, r3, #1
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	699b      	ldr	r3, [r3, #24]
 8014d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014da0:	693b      	ldr	r3, [r7, #16]
 8014da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	011b      	lsls	r3, r3, #4
 8014dac:	693a      	ldr	r2, [r7, #16]
 8014dae:	4313      	orrs	r3, r2
 8014db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014db2:	697b      	ldr	r3, [r7, #20]
 8014db4:	f023 030a 	bic.w	r3, r3, #10
 8014db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014dba:	697a      	ldr	r2, [r7, #20]
 8014dbc:	68bb      	ldr	r3, [r7, #8]
 8014dbe:	4313      	orrs	r3, r2
 8014dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	693a      	ldr	r2, [r7, #16]
 8014dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	697a      	ldr	r2, [r7, #20]
 8014dcc:	621a      	str	r2, [r3, #32]
}
 8014dce:	bf00      	nop
 8014dd0:	371c      	adds	r7, #28
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd8:	4770      	bx	lr

08014dda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014dda:	b480      	push	{r7}
 8014ddc:	b087      	sub	sp, #28
 8014dde:	af00      	add	r7, sp, #0
 8014de0:	60f8      	str	r0, [r7, #12]
 8014de2:	60b9      	str	r1, [r7, #8]
 8014de4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	6a1b      	ldr	r3, [r3, #32]
 8014dea:	f023 0210 	bic.w	r2, r3, #16
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	699b      	ldr	r3, [r3, #24]
 8014df6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	6a1b      	ldr	r3, [r3, #32]
 8014dfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014dfe:	697b      	ldr	r3, [r7, #20]
 8014e00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014e04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	031b      	lsls	r3, r3, #12
 8014e0a:	697a      	ldr	r2, [r7, #20]
 8014e0c:	4313      	orrs	r3, r2
 8014e0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014e16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	011b      	lsls	r3, r3, #4
 8014e1c:	693a      	ldr	r2, [r7, #16]
 8014e1e:	4313      	orrs	r3, r2
 8014e20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	697a      	ldr	r2, [r7, #20]
 8014e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	693a      	ldr	r2, [r7, #16]
 8014e2c:	621a      	str	r2, [r3, #32]
}
 8014e2e:	bf00      	nop
 8014e30:	371c      	adds	r7, #28
 8014e32:	46bd      	mov	sp, r7
 8014e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e38:	4770      	bx	lr

08014e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014e3a:	b480      	push	{r7}
 8014e3c:	b085      	sub	sp, #20
 8014e3e:	af00      	add	r7, sp, #0
 8014e40:	6078      	str	r0, [r7, #4]
 8014e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	689b      	ldr	r3, [r3, #8]
 8014e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014e52:	683a      	ldr	r2, [r7, #0]
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	4313      	orrs	r3, r2
 8014e58:	f043 0307 	orr.w	r3, r3, #7
 8014e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	68fa      	ldr	r2, [r7, #12]
 8014e62:	609a      	str	r2, [r3, #8]
}
 8014e64:	bf00      	nop
 8014e66:	3714      	adds	r7, #20
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6e:	4770      	bx	lr

08014e70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014e70:	b480      	push	{r7}
 8014e72:	b087      	sub	sp, #28
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	60f8      	str	r0, [r7, #12]
 8014e78:	60b9      	str	r1, [r7, #8]
 8014e7a:	607a      	str	r2, [r7, #4]
 8014e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	689b      	ldr	r3, [r3, #8]
 8014e82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014e8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	021a      	lsls	r2, r3, #8
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	431a      	orrs	r2, r3
 8014e94:	68bb      	ldr	r3, [r7, #8]
 8014e96:	4313      	orrs	r3, r2
 8014e98:	697a      	ldr	r2, [r7, #20]
 8014e9a:	4313      	orrs	r3, r2
 8014e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	697a      	ldr	r2, [r7, #20]
 8014ea2:	609a      	str	r2, [r3, #8]
}
 8014ea4:	bf00      	nop
 8014ea6:	371c      	adds	r7, #28
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eae:	4770      	bx	lr

08014eb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014eb0:	b480      	push	{r7}
 8014eb2:	b087      	sub	sp, #28
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	60f8      	str	r0, [r7, #12]
 8014eb8:	60b9      	str	r1, [r7, #8]
 8014eba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014ebc:	68bb      	ldr	r3, [r7, #8]
 8014ebe:	f003 031f 	and.w	r3, r3, #31
 8014ec2:	2201      	movs	r2, #1
 8014ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8014ec8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	6a1a      	ldr	r2, [r3, #32]
 8014ece:	697b      	ldr	r3, [r7, #20]
 8014ed0:	43db      	mvns	r3, r3
 8014ed2:	401a      	ands	r2, r3
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	6a1a      	ldr	r2, [r3, #32]
 8014edc:	68bb      	ldr	r3, [r7, #8]
 8014ede:	f003 031f 	and.w	r3, r3, #31
 8014ee2:	6879      	ldr	r1, [r7, #4]
 8014ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8014ee8:	431a      	orrs	r2, r3
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	621a      	str	r2, [r3, #32]
}
 8014eee:	bf00      	nop
 8014ef0:	371c      	adds	r7, #28
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef8:	4770      	bx	lr

08014efa <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014efa:	b580      	push	{r7, lr}
 8014efc:	b084      	sub	sp, #16
 8014efe:	af00      	add	r7, sp, #0
 8014f00:	6078      	str	r0, [r7, #4]
 8014f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	2b04      	cmp	r3, #4
 8014f08:	d00d      	beq.n	8014f26 <HAL_TIMEx_OCN_Start_IT+0x2c>
 8014f0a:	2b08      	cmp	r3, #8
 8014f0c:	d014      	beq.n	8014f38 <HAL_TIMEx_OCN_Start_IT+0x3e>
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d000      	beq.n	8014f14 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8014f12:	e01a      	b.n	8014f4a <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	68da      	ldr	r2, [r3, #12]
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	f042 0202 	orr.w	r2, r2, #2
 8014f22:	60da      	str	r2, [r3, #12]
      break;
 8014f24:	e011      	b.n	8014f4a <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	68da      	ldr	r2, [r3, #12]
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	f042 0204 	orr.w	r2, r2, #4
 8014f34:	60da      	str	r2, [r3, #12]
      break;
 8014f36:	e008      	b.n	8014f4a <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	68da      	ldr	r2, [r3, #12]
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	f042 0208 	orr.w	r2, r2, #8
 8014f46:	60da      	str	r2, [r3, #12]
      break;
 8014f48:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	68da      	ldr	r2, [r3, #12]
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014f58:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	2204      	movs	r2, #4
 8014f60:	6839      	ldr	r1, [r7, #0]
 8014f62:	4618      	mov	r0, r3
 8014f64:	f000 f976 	bl	8015254 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014f76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	689b      	ldr	r3, [r3, #8]
 8014f7e:	f003 0307 	and.w	r3, r3, #7
 8014f82:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	2b06      	cmp	r3, #6
 8014f88:	d007      	beq.n	8014f9a <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	681a      	ldr	r2, [r3, #0]
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	f042 0201 	orr.w	r2, r2, #1
 8014f98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014f9a:	2300      	movs	r3, #0
}
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	3710      	adds	r7, #16
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	bd80      	pop	{r7, pc}

08014fa4 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b084      	sub	sp, #16
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
 8014fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8014fae:	683b      	ldr	r3, [r7, #0]
 8014fb0:	2b04      	cmp	r3, #4
 8014fb2:	d00d      	beq.n	8014fd0 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 8014fb4:	2b08      	cmp	r3, #8
 8014fb6:	d014      	beq.n	8014fe2 <HAL_TIMEx_OCN_Stop_IT+0x3e>
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d000      	beq.n	8014fbe <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8014fbc:	e01a      	b.n	8014ff4 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	68da      	ldr	r2, [r3, #12]
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	f022 0202 	bic.w	r2, r2, #2
 8014fcc:	60da      	str	r2, [r3, #12]
      break;
 8014fce:	e011      	b.n	8014ff4 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	68da      	ldr	r2, [r3, #12]
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	f022 0204 	bic.w	r2, r2, #4
 8014fde:	60da      	str	r2, [r3, #12]
      break;
 8014fe0:	e008      	b.n	8014ff4 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	68da      	ldr	r2, [r3, #12]
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	f022 0208 	bic.w	r2, r2, #8
 8014ff0:	60da      	str	r2, [r3, #12]
      break;
 8014ff2:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	6839      	ldr	r1, [r7, #0]
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f000 f929 	bl	8015254 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	6a1b      	ldr	r3, [r3, #32]
 8015008:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 801500a:	68fa      	ldr	r2, [r7, #12]
 801500c:	f240 4344 	movw	r3, #1092	; 0x444
 8015010:	4013      	ands	r3, r2
 8015012:	2b00      	cmp	r3, #0
 8015014:	d107      	bne.n	8015026 <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	68da      	ldr	r2, [r3, #12]
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015024:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	6a1a      	ldr	r2, [r3, #32]
 801502c:	f241 1311 	movw	r3, #4369	; 0x1111
 8015030:	4013      	ands	r3, r2
 8015032:	2b00      	cmp	r3, #0
 8015034:	d10f      	bne.n	8015056 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	6a1a      	ldr	r2, [r3, #32]
 801503c:	f240 4344 	movw	r3, #1092	; 0x444
 8015040:	4013      	ands	r3, r2
 8015042:	2b00      	cmp	r3, #0
 8015044:	d107      	bne.n	8015056 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015054:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	6a1a      	ldr	r2, [r3, #32]
 801505c:	f241 1311 	movw	r3, #4369	; 0x1111
 8015060:	4013      	ands	r3, r2
 8015062:	2b00      	cmp	r3, #0
 8015064:	d10f      	bne.n	8015086 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	6a1a      	ldr	r2, [r3, #32]
 801506c:	f240 4344 	movw	r3, #1092	; 0x444
 8015070:	4013      	ands	r3, r2
 8015072:	2b00      	cmp	r3, #0
 8015074:	d107      	bne.n	8015086 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	681a      	ldr	r2, [r3, #0]
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	f022 0201 	bic.w	r2, r2, #1
 8015084:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015086:	2300      	movs	r3, #0
}
 8015088:	4618      	mov	r0, r3
 801508a:	3710      	adds	r7, #16
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}

08015090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015090:	b480      	push	{r7}
 8015092:	b085      	sub	sp, #20
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
 8015098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80150a0:	2b01      	cmp	r3, #1
 80150a2:	d101      	bne.n	80150a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80150a4:	2302      	movs	r3, #2
 80150a6:	e05a      	b.n	801515e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2201      	movs	r2, #1
 80150ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	2202      	movs	r2, #2
 80150b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	685b      	ldr	r3, [r3, #4]
 80150be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	689b      	ldr	r3, [r3, #8]
 80150c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80150ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80150d0:	683b      	ldr	r3, [r7, #0]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	68fa      	ldr	r2, [r7, #12]
 80150d6:	4313      	orrs	r3, r2
 80150d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	68fa      	ldr	r2, [r7, #12]
 80150e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	4a21      	ldr	r2, [pc, #132]	; (801516c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80150e8:	4293      	cmp	r3, r2
 80150ea:	d022      	beq.n	8015132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80150f4:	d01d      	beq.n	8015132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	4a1d      	ldr	r2, [pc, #116]	; (8015170 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80150fc:	4293      	cmp	r3, r2
 80150fe:	d018      	beq.n	8015132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	4a1b      	ldr	r2, [pc, #108]	; (8015174 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8015106:	4293      	cmp	r3, r2
 8015108:	d013      	beq.n	8015132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	4a1a      	ldr	r2, [pc, #104]	; (8015178 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8015110:	4293      	cmp	r3, r2
 8015112:	d00e      	beq.n	8015132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	4a18      	ldr	r2, [pc, #96]	; (801517c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801511a:	4293      	cmp	r3, r2
 801511c:	d009      	beq.n	8015132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	4a17      	ldr	r2, [pc, #92]	; (8015180 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8015124:	4293      	cmp	r3, r2
 8015126:	d004      	beq.n	8015132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	4a15      	ldr	r2, [pc, #84]	; (8015184 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801512e:	4293      	cmp	r3, r2
 8015130:	d10c      	bne.n	801514c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015132:	68bb      	ldr	r3, [r7, #8]
 8015134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801513a:	683b      	ldr	r3, [r7, #0]
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	68ba      	ldr	r2, [r7, #8]
 8015140:	4313      	orrs	r3, r2
 8015142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	68ba      	ldr	r2, [r7, #8]
 801514a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	2201      	movs	r2, #1
 8015150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2200      	movs	r2, #0
 8015158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801515c:	2300      	movs	r3, #0
}
 801515e:	4618      	mov	r0, r3
 8015160:	3714      	adds	r7, #20
 8015162:	46bd      	mov	sp, r7
 8015164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015168:	4770      	bx	lr
 801516a:	bf00      	nop
 801516c:	40010000 	.word	0x40010000
 8015170:	40000400 	.word	0x40000400
 8015174:	40000800 	.word	0x40000800
 8015178:	40000c00 	.word	0x40000c00
 801517c:	40010400 	.word	0x40010400
 8015180:	40014000 	.word	0x40014000
 8015184:	40001800 	.word	0x40001800

08015188 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8015188:	b480      	push	{r7}
 801518a:	b085      	sub	sp, #20
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
 8015190:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8015192:	2300      	movs	r3, #0
 8015194:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801519c:	2b01      	cmp	r3, #1
 801519e:	d101      	bne.n	80151a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80151a0:	2302      	movs	r3, #2
 80151a2:	e03d      	b.n	8015220 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	2201      	movs	r2, #1
 80151a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80151b2:	683b      	ldr	r3, [r7, #0]
 80151b4:	68db      	ldr	r3, [r3, #12]
 80151b6:	4313      	orrs	r3, r2
 80151b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	689b      	ldr	r3, [r3, #8]
 80151c4:	4313      	orrs	r3, r2
 80151c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80151ce:	683b      	ldr	r3, [r7, #0]
 80151d0:	685b      	ldr	r3, [r3, #4]
 80151d2:	4313      	orrs	r3, r2
 80151d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80151dc:	683b      	ldr	r3, [r7, #0]
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	4313      	orrs	r3, r2
 80151e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80151ea:	683b      	ldr	r3, [r7, #0]
 80151ec:	691b      	ldr	r3, [r3, #16]
 80151ee:	4313      	orrs	r3, r2
 80151f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80151f8:	683b      	ldr	r3, [r7, #0]
 80151fa:	695b      	ldr	r3, [r3, #20]
 80151fc:	4313      	orrs	r3, r2
 80151fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8015206:	683b      	ldr	r3, [r7, #0]
 8015208:	69db      	ldr	r3, [r3, #28]
 801520a:	4313      	orrs	r3, r2
 801520c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	68fa      	ldr	r2, [r7, #12]
 8015214:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	2200      	movs	r2, #0
 801521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801521e:	2300      	movs	r3, #0
}
 8015220:	4618      	mov	r0, r3
 8015222:	3714      	adds	r7, #20
 8015224:	46bd      	mov	sp, r7
 8015226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522a:	4770      	bx	lr

0801522c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801522c:	b480      	push	{r7}
 801522e:	b083      	sub	sp, #12
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015234:	bf00      	nop
 8015236:	370c      	adds	r7, #12
 8015238:	46bd      	mov	sp, r7
 801523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523e:	4770      	bx	lr

08015240 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015240:	b480      	push	{r7}
 8015242:	b083      	sub	sp, #12
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015248:	bf00      	nop
 801524a:	370c      	adds	r7, #12
 801524c:	46bd      	mov	sp, r7
 801524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015252:	4770      	bx	lr

08015254 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8015254:	b480      	push	{r7}
 8015256:	b087      	sub	sp, #28
 8015258:	af00      	add	r7, sp, #0
 801525a:	60f8      	str	r0, [r7, #12]
 801525c:	60b9      	str	r1, [r7, #8]
 801525e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015260:	68bb      	ldr	r3, [r7, #8]
 8015262:	f003 031f 	and.w	r3, r3, #31
 8015266:	2204      	movs	r2, #4
 8015268:	fa02 f303 	lsl.w	r3, r2, r3
 801526c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	6a1a      	ldr	r2, [r3, #32]
 8015272:	697b      	ldr	r3, [r7, #20]
 8015274:	43db      	mvns	r3, r3
 8015276:	401a      	ands	r2, r3
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	6a1a      	ldr	r2, [r3, #32]
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	f003 031f 	and.w	r3, r3, #31
 8015286:	6879      	ldr	r1, [r7, #4]
 8015288:	fa01 f303 	lsl.w	r3, r1, r3
 801528c:	431a      	orrs	r2, r3
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	621a      	str	r2, [r3, #32]
}
 8015292:	bf00      	nop
 8015294:	371c      	adds	r7, #28
 8015296:	46bd      	mov	sp, r7
 8015298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529c:	4770      	bx	lr

0801529e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801529e:	b580      	push	{r7, lr}
 80152a0:	b082      	sub	sp, #8
 80152a2:	af00      	add	r7, sp, #0
 80152a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d101      	bne.n	80152b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80152ac:	2301      	movs	r3, #1
 80152ae:	e03f      	b.n	8015330 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80152b6:	b2db      	uxtb	r3, r3
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d106      	bne.n	80152ca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	2200      	movs	r2, #0
 80152c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80152c4:	6878      	ldr	r0, [r7, #4]
 80152c6:	f7fb f8b1 	bl	801042c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	2224      	movs	r2, #36	; 0x24
 80152ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	68da      	ldr	r2, [r3, #12]
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80152e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80152e2:	6878      	ldr	r0, [r7, #4]
 80152e4:	f000 f90c 	bl	8015500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	691a      	ldr	r2, [r3, #16]
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80152f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	695a      	ldr	r2, [r3, #20]
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015306:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	68da      	ldr	r2, [r3, #12]
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015316:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	2200      	movs	r2, #0
 801531c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	2220      	movs	r2, #32
 8015322:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	2220      	movs	r2, #32
 801532a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801532e:	2300      	movs	r3, #0
}
 8015330:	4618      	mov	r0, r3
 8015332:	3708      	adds	r7, #8
 8015334:	46bd      	mov	sp, r7
 8015336:	bd80      	pop	{r7, pc}

08015338 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b088      	sub	sp, #32
 801533c:	af02      	add	r7, sp, #8
 801533e:	60f8      	str	r0, [r7, #12]
 8015340:	60b9      	str	r1, [r7, #8]
 8015342:	603b      	str	r3, [r7, #0]
 8015344:	4613      	mov	r3, r2
 8015346:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8015348:	2300      	movs	r3, #0
 801534a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015352:	b2db      	uxtb	r3, r3
 8015354:	2b20      	cmp	r3, #32
 8015356:	f040 8083 	bne.w	8015460 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 801535a:	68bb      	ldr	r3, [r7, #8]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d002      	beq.n	8015366 <HAL_UART_Transmit+0x2e>
 8015360:	88fb      	ldrh	r3, [r7, #6]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d101      	bne.n	801536a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8015366:	2301      	movs	r3, #1
 8015368:	e07b      	b.n	8015462 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015370:	2b01      	cmp	r3, #1
 8015372:	d101      	bne.n	8015378 <HAL_UART_Transmit+0x40>
 8015374:	2302      	movs	r3, #2
 8015376:	e074      	b.n	8015462 <HAL_UART_Transmit+0x12a>
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	2201      	movs	r2, #1
 801537c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	2200      	movs	r2, #0
 8015384:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	2221      	movs	r2, #33	; 0x21
 801538a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 801538e:	f7fb fa81 	bl	8010894 <HAL_GetTick>
 8015392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	88fa      	ldrh	r2, [r7, #6]
 8015398:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	88fa      	ldrh	r2, [r7, #6]
 801539e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	2200      	movs	r2, #0
 80153a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80153a8:	e042      	b.n	8015430 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80153ae:	b29b      	uxth	r3, r3
 80153b0:	3b01      	subs	r3, #1
 80153b2:	b29a      	uxth	r2, r3
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	689b      	ldr	r3, [r3, #8]
 80153bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80153c0:	d122      	bne.n	8015408 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80153c2:	683b      	ldr	r3, [r7, #0]
 80153c4:	9300      	str	r3, [sp, #0]
 80153c6:	697b      	ldr	r3, [r7, #20]
 80153c8:	2200      	movs	r2, #0
 80153ca:	2180      	movs	r1, #128	; 0x80
 80153cc:	68f8      	ldr	r0, [r7, #12]
 80153ce:	f000 f84c 	bl	801546a <UART_WaitOnFlagUntilTimeout>
 80153d2:	4603      	mov	r3, r0
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d001      	beq.n	80153dc <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80153d8:	2303      	movs	r3, #3
 80153da:	e042      	b.n	8015462 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80153dc:	68bb      	ldr	r3, [r7, #8]
 80153de:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80153e0:	693b      	ldr	r3, [r7, #16]
 80153e2:	881b      	ldrh	r3, [r3, #0]
 80153e4:	461a      	mov	r2, r3
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80153ee:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	691b      	ldr	r3, [r3, #16]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d103      	bne.n	8015400 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	3302      	adds	r3, #2
 80153fc:	60bb      	str	r3, [r7, #8]
 80153fe:	e017      	b.n	8015430 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8015400:	68bb      	ldr	r3, [r7, #8]
 8015402:	3301      	adds	r3, #1
 8015404:	60bb      	str	r3, [r7, #8]
 8015406:	e013      	b.n	8015430 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	9300      	str	r3, [sp, #0]
 801540c:	697b      	ldr	r3, [r7, #20]
 801540e:	2200      	movs	r2, #0
 8015410:	2180      	movs	r1, #128	; 0x80
 8015412:	68f8      	ldr	r0, [r7, #12]
 8015414:	f000 f829 	bl	801546a <UART_WaitOnFlagUntilTimeout>
 8015418:	4603      	mov	r3, r0
 801541a:	2b00      	cmp	r3, #0
 801541c:	d001      	beq.n	8015422 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 801541e:	2303      	movs	r3, #3
 8015420:	e01f      	b.n	8015462 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	1c5a      	adds	r2, r3, #1
 8015426:	60ba      	str	r2, [r7, #8]
 8015428:	781a      	ldrb	r2, [r3, #0]
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015434:	b29b      	uxth	r3, r3
 8015436:	2b00      	cmp	r3, #0
 8015438:	d1b7      	bne.n	80153aa <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801543a:	683b      	ldr	r3, [r7, #0]
 801543c:	9300      	str	r3, [sp, #0]
 801543e:	697b      	ldr	r3, [r7, #20]
 8015440:	2200      	movs	r2, #0
 8015442:	2140      	movs	r1, #64	; 0x40
 8015444:	68f8      	ldr	r0, [r7, #12]
 8015446:	f000 f810 	bl	801546a <UART_WaitOnFlagUntilTimeout>
 801544a:	4603      	mov	r3, r0
 801544c:	2b00      	cmp	r3, #0
 801544e:	d001      	beq.n	8015454 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8015450:	2303      	movs	r3, #3
 8015452:	e006      	b.n	8015462 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	2220      	movs	r2, #32
 8015458:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 801545c:	2300      	movs	r3, #0
 801545e:	e000      	b.n	8015462 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8015460:	2302      	movs	r3, #2
  }
}
 8015462:	4618      	mov	r0, r3
 8015464:	3718      	adds	r7, #24
 8015466:	46bd      	mov	sp, r7
 8015468:	bd80      	pop	{r7, pc}

0801546a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 801546a:	b580      	push	{r7, lr}
 801546c:	b084      	sub	sp, #16
 801546e:	af00      	add	r7, sp, #0
 8015470:	60f8      	str	r0, [r7, #12]
 8015472:	60b9      	str	r1, [r7, #8]
 8015474:	603b      	str	r3, [r7, #0]
 8015476:	4613      	mov	r3, r2
 8015478:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801547a:	e02c      	b.n	80154d6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801547c:	69bb      	ldr	r3, [r7, #24]
 801547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015482:	d028      	beq.n	80154d6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8015484:	69bb      	ldr	r3, [r7, #24]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d007      	beq.n	801549a <UART_WaitOnFlagUntilTimeout+0x30>
 801548a:	f7fb fa03 	bl	8010894 <HAL_GetTick>
 801548e:	4602      	mov	r2, r0
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	1ad3      	subs	r3, r2, r3
 8015494:	69ba      	ldr	r2, [r7, #24]
 8015496:	429a      	cmp	r2, r3
 8015498:	d21d      	bcs.n	80154d6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	68da      	ldr	r2, [r3, #12]
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80154a8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	695a      	ldr	r2, [r3, #20]
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	f022 0201 	bic.w	r2, r2, #1
 80154b8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	2220      	movs	r2, #32
 80154be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	2220      	movs	r2, #32
 80154c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	2200      	movs	r2, #0
 80154ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80154d2:	2303      	movs	r3, #3
 80154d4:	e00f      	b.n	80154f6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	681a      	ldr	r2, [r3, #0]
 80154dc:	68bb      	ldr	r3, [r7, #8]
 80154de:	4013      	ands	r3, r2
 80154e0:	68ba      	ldr	r2, [r7, #8]
 80154e2:	429a      	cmp	r2, r3
 80154e4:	bf0c      	ite	eq
 80154e6:	2301      	moveq	r3, #1
 80154e8:	2300      	movne	r3, #0
 80154ea:	b2db      	uxtb	r3, r3
 80154ec:	461a      	mov	r2, r3
 80154ee:	79fb      	ldrb	r3, [r7, #7]
 80154f0:	429a      	cmp	r2, r3
 80154f2:	d0c3      	beq.n	801547c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80154f4:	2300      	movs	r3, #0
}
 80154f6:	4618      	mov	r0, r3
 80154f8:	3710      	adds	r7, #16
 80154fa:	46bd      	mov	sp, r7
 80154fc:	bd80      	pop	{r7, pc}
	...

08015500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015504:	b085      	sub	sp, #20
 8015506:	af00      	add	r7, sp, #0
 8015508:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	691b      	ldr	r3, [r3, #16]
 8015510:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	68da      	ldr	r2, [r3, #12]
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	430a      	orrs	r2, r1
 801551e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	689a      	ldr	r2, [r3, #8]
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	691b      	ldr	r3, [r3, #16]
 8015528:	431a      	orrs	r2, r3
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	695b      	ldr	r3, [r3, #20]
 801552e:	431a      	orrs	r2, r3
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	69db      	ldr	r3, [r3, #28]
 8015534:	4313      	orrs	r3, r2
 8015536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	68db      	ldr	r3, [r3, #12]
 801553e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8015542:	f023 030c 	bic.w	r3, r3, #12
 8015546:	687a      	ldr	r2, [r7, #4]
 8015548:	6812      	ldr	r2, [r2, #0]
 801554a:	68f9      	ldr	r1, [r7, #12]
 801554c:	430b      	orrs	r3, r1
 801554e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	695b      	ldr	r3, [r3, #20]
 8015556:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	699a      	ldr	r2, [r3, #24]
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	430a      	orrs	r2, r1
 8015564:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	69db      	ldr	r3, [r3, #28]
 801556a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801556e:	f040 818b 	bne.w	8015888 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	4ac1      	ldr	r2, [pc, #772]	; (801587c <UART_SetConfig+0x37c>)
 8015578:	4293      	cmp	r3, r2
 801557a:	d005      	beq.n	8015588 <UART_SetConfig+0x88>
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	4abf      	ldr	r2, [pc, #764]	; (8015880 <UART_SetConfig+0x380>)
 8015582:	4293      	cmp	r3, r2
 8015584:	f040 80bd 	bne.w	8015702 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8015588:	f7fd fdce 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 801558c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801558e:	68bb      	ldr	r3, [r7, #8]
 8015590:	461d      	mov	r5, r3
 8015592:	f04f 0600 	mov.w	r6, #0
 8015596:	46a8      	mov	r8, r5
 8015598:	46b1      	mov	r9, r6
 801559a:	eb18 0308 	adds.w	r3, r8, r8
 801559e:	eb49 0409 	adc.w	r4, r9, r9
 80155a2:	4698      	mov	r8, r3
 80155a4:	46a1      	mov	r9, r4
 80155a6:	eb18 0805 	adds.w	r8, r8, r5
 80155aa:	eb49 0906 	adc.w	r9, r9, r6
 80155ae:	f04f 0100 	mov.w	r1, #0
 80155b2:	f04f 0200 	mov.w	r2, #0
 80155b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80155ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80155be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80155c2:	4688      	mov	r8, r1
 80155c4:	4691      	mov	r9, r2
 80155c6:	eb18 0005 	adds.w	r0, r8, r5
 80155ca:	eb49 0106 	adc.w	r1, r9, r6
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	685b      	ldr	r3, [r3, #4]
 80155d2:	461d      	mov	r5, r3
 80155d4:	f04f 0600 	mov.w	r6, #0
 80155d8:	196b      	adds	r3, r5, r5
 80155da:	eb46 0406 	adc.w	r4, r6, r6
 80155de:	461a      	mov	r2, r3
 80155e0:	4623      	mov	r3, r4
 80155e2:	f7f3 fa69 	bl	8008ab8 <__aeabi_uldivmod>
 80155e6:	4603      	mov	r3, r0
 80155e8:	460c      	mov	r4, r1
 80155ea:	461a      	mov	r2, r3
 80155ec:	4ba5      	ldr	r3, [pc, #660]	; (8015884 <UART_SetConfig+0x384>)
 80155ee:	fba3 2302 	umull	r2, r3, r3, r2
 80155f2:	095b      	lsrs	r3, r3, #5
 80155f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	461d      	mov	r5, r3
 80155fc:	f04f 0600 	mov.w	r6, #0
 8015600:	46a9      	mov	r9, r5
 8015602:	46b2      	mov	sl, r6
 8015604:	eb19 0309 	adds.w	r3, r9, r9
 8015608:	eb4a 040a 	adc.w	r4, sl, sl
 801560c:	4699      	mov	r9, r3
 801560e:	46a2      	mov	sl, r4
 8015610:	eb19 0905 	adds.w	r9, r9, r5
 8015614:	eb4a 0a06 	adc.w	sl, sl, r6
 8015618:	f04f 0100 	mov.w	r1, #0
 801561c:	f04f 0200 	mov.w	r2, #0
 8015620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015624:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015628:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801562c:	4689      	mov	r9, r1
 801562e:	4692      	mov	sl, r2
 8015630:	eb19 0005 	adds.w	r0, r9, r5
 8015634:	eb4a 0106 	adc.w	r1, sl, r6
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	685b      	ldr	r3, [r3, #4]
 801563c:	461d      	mov	r5, r3
 801563e:	f04f 0600 	mov.w	r6, #0
 8015642:	196b      	adds	r3, r5, r5
 8015644:	eb46 0406 	adc.w	r4, r6, r6
 8015648:	461a      	mov	r2, r3
 801564a:	4623      	mov	r3, r4
 801564c:	f7f3 fa34 	bl	8008ab8 <__aeabi_uldivmod>
 8015650:	4603      	mov	r3, r0
 8015652:	460c      	mov	r4, r1
 8015654:	461a      	mov	r2, r3
 8015656:	4b8b      	ldr	r3, [pc, #556]	; (8015884 <UART_SetConfig+0x384>)
 8015658:	fba3 1302 	umull	r1, r3, r3, r2
 801565c:	095b      	lsrs	r3, r3, #5
 801565e:	2164      	movs	r1, #100	; 0x64
 8015660:	fb01 f303 	mul.w	r3, r1, r3
 8015664:	1ad3      	subs	r3, r2, r3
 8015666:	00db      	lsls	r3, r3, #3
 8015668:	3332      	adds	r3, #50	; 0x32
 801566a:	4a86      	ldr	r2, [pc, #536]	; (8015884 <UART_SetConfig+0x384>)
 801566c:	fba2 2303 	umull	r2, r3, r2, r3
 8015670:	095b      	lsrs	r3, r3, #5
 8015672:	005b      	lsls	r3, r3, #1
 8015674:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015678:	4498      	add	r8, r3
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	461d      	mov	r5, r3
 801567e:	f04f 0600 	mov.w	r6, #0
 8015682:	46a9      	mov	r9, r5
 8015684:	46b2      	mov	sl, r6
 8015686:	eb19 0309 	adds.w	r3, r9, r9
 801568a:	eb4a 040a 	adc.w	r4, sl, sl
 801568e:	4699      	mov	r9, r3
 8015690:	46a2      	mov	sl, r4
 8015692:	eb19 0905 	adds.w	r9, r9, r5
 8015696:	eb4a 0a06 	adc.w	sl, sl, r6
 801569a:	f04f 0100 	mov.w	r1, #0
 801569e:	f04f 0200 	mov.w	r2, #0
 80156a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80156a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80156aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80156ae:	4689      	mov	r9, r1
 80156b0:	4692      	mov	sl, r2
 80156b2:	eb19 0005 	adds.w	r0, r9, r5
 80156b6:	eb4a 0106 	adc.w	r1, sl, r6
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	685b      	ldr	r3, [r3, #4]
 80156be:	461d      	mov	r5, r3
 80156c0:	f04f 0600 	mov.w	r6, #0
 80156c4:	196b      	adds	r3, r5, r5
 80156c6:	eb46 0406 	adc.w	r4, r6, r6
 80156ca:	461a      	mov	r2, r3
 80156cc:	4623      	mov	r3, r4
 80156ce:	f7f3 f9f3 	bl	8008ab8 <__aeabi_uldivmod>
 80156d2:	4603      	mov	r3, r0
 80156d4:	460c      	mov	r4, r1
 80156d6:	461a      	mov	r2, r3
 80156d8:	4b6a      	ldr	r3, [pc, #424]	; (8015884 <UART_SetConfig+0x384>)
 80156da:	fba3 1302 	umull	r1, r3, r3, r2
 80156de:	095b      	lsrs	r3, r3, #5
 80156e0:	2164      	movs	r1, #100	; 0x64
 80156e2:	fb01 f303 	mul.w	r3, r1, r3
 80156e6:	1ad3      	subs	r3, r2, r3
 80156e8:	00db      	lsls	r3, r3, #3
 80156ea:	3332      	adds	r3, #50	; 0x32
 80156ec:	4a65      	ldr	r2, [pc, #404]	; (8015884 <UART_SetConfig+0x384>)
 80156ee:	fba2 2303 	umull	r2, r3, r2, r3
 80156f2:	095b      	lsrs	r3, r3, #5
 80156f4:	f003 0207 	and.w	r2, r3, #7
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	4442      	add	r2, r8
 80156fe:	609a      	str	r2, [r3, #8]
 8015700:	e26f      	b.n	8015be2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8015702:	f7fd fcfd 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 8015706:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	461d      	mov	r5, r3
 801570c:	f04f 0600 	mov.w	r6, #0
 8015710:	46a8      	mov	r8, r5
 8015712:	46b1      	mov	r9, r6
 8015714:	eb18 0308 	adds.w	r3, r8, r8
 8015718:	eb49 0409 	adc.w	r4, r9, r9
 801571c:	4698      	mov	r8, r3
 801571e:	46a1      	mov	r9, r4
 8015720:	eb18 0805 	adds.w	r8, r8, r5
 8015724:	eb49 0906 	adc.w	r9, r9, r6
 8015728:	f04f 0100 	mov.w	r1, #0
 801572c:	f04f 0200 	mov.w	r2, #0
 8015730:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015734:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015738:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801573c:	4688      	mov	r8, r1
 801573e:	4691      	mov	r9, r2
 8015740:	eb18 0005 	adds.w	r0, r8, r5
 8015744:	eb49 0106 	adc.w	r1, r9, r6
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	685b      	ldr	r3, [r3, #4]
 801574c:	461d      	mov	r5, r3
 801574e:	f04f 0600 	mov.w	r6, #0
 8015752:	196b      	adds	r3, r5, r5
 8015754:	eb46 0406 	adc.w	r4, r6, r6
 8015758:	461a      	mov	r2, r3
 801575a:	4623      	mov	r3, r4
 801575c:	f7f3 f9ac 	bl	8008ab8 <__aeabi_uldivmod>
 8015760:	4603      	mov	r3, r0
 8015762:	460c      	mov	r4, r1
 8015764:	461a      	mov	r2, r3
 8015766:	4b47      	ldr	r3, [pc, #284]	; (8015884 <UART_SetConfig+0x384>)
 8015768:	fba3 2302 	umull	r2, r3, r3, r2
 801576c:	095b      	lsrs	r3, r3, #5
 801576e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015772:	68bb      	ldr	r3, [r7, #8]
 8015774:	461d      	mov	r5, r3
 8015776:	f04f 0600 	mov.w	r6, #0
 801577a:	46a9      	mov	r9, r5
 801577c:	46b2      	mov	sl, r6
 801577e:	eb19 0309 	adds.w	r3, r9, r9
 8015782:	eb4a 040a 	adc.w	r4, sl, sl
 8015786:	4699      	mov	r9, r3
 8015788:	46a2      	mov	sl, r4
 801578a:	eb19 0905 	adds.w	r9, r9, r5
 801578e:	eb4a 0a06 	adc.w	sl, sl, r6
 8015792:	f04f 0100 	mov.w	r1, #0
 8015796:	f04f 0200 	mov.w	r2, #0
 801579a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801579e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80157a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80157a6:	4689      	mov	r9, r1
 80157a8:	4692      	mov	sl, r2
 80157aa:	eb19 0005 	adds.w	r0, r9, r5
 80157ae:	eb4a 0106 	adc.w	r1, sl, r6
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	685b      	ldr	r3, [r3, #4]
 80157b6:	461d      	mov	r5, r3
 80157b8:	f04f 0600 	mov.w	r6, #0
 80157bc:	196b      	adds	r3, r5, r5
 80157be:	eb46 0406 	adc.w	r4, r6, r6
 80157c2:	461a      	mov	r2, r3
 80157c4:	4623      	mov	r3, r4
 80157c6:	f7f3 f977 	bl	8008ab8 <__aeabi_uldivmod>
 80157ca:	4603      	mov	r3, r0
 80157cc:	460c      	mov	r4, r1
 80157ce:	461a      	mov	r2, r3
 80157d0:	4b2c      	ldr	r3, [pc, #176]	; (8015884 <UART_SetConfig+0x384>)
 80157d2:	fba3 1302 	umull	r1, r3, r3, r2
 80157d6:	095b      	lsrs	r3, r3, #5
 80157d8:	2164      	movs	r1, #100	; 0x64
 80157da:	fb01 f303 	mul.w	r3, r1, r3
 80157de:	1ad3      	subs	r3, r2, r3
 80157e0:	00db      	lsls	r3, r3, #3
 80157e2:	3332      	adds	r3, #50	; 0x32
 80157e4:	4a27      	ldr	r2, [pc, #156]	; (8015884 <UART_SetConfig+0x384>)
 80157e6:	fba2 2303 	umull	r2, r3, r2, r3
 80157ea:	095b      	lsrs	r3, r3, #5
 80157ec:	005b      	lsls	r3, r3, #1
 80157ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80157f2:	4498      	add	r8, r3
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	461d      	mov	r5, r3
 80157f8:	f04f 0600 	mov.w	r6, #0
 80157fc:	46a9      	mov	r9, r5
 80157fe:	46b2      	mov	sl, r6
 8015800:	eb19 0309 	adds.w	r3, r9, r9
 8015804:	eb4a 040a 	adc.w	r4, sl, sl
 8015808:	4699      	mov	r9, r3
 801580a:	46a2      	mov	sl, r4
 801580c:	eb19 0905 	adds.w	r9, r9, r5
 8015810:	eb4a 0a06 	adc.w	sl, sl, r6
 8015814:	f04f 0100 	mov.w	r1, #0
 8015818:	f04f 0200 	mov.w	r2, #0
 801581c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015820:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015824:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015828:	4689      	mov	r9, r1
 801582a:	4692      	mov	sl, r2
 801582c:	eb19 0005 	adds.w	r0, r9, r5
 8015830:	eb4a 0106 	adc.w	r1, sl, r6
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	685b      	ldr	r3, [r3, #4]
 8015838:	461d      	mov	r5, r3
 801583a:	f04f 0600 	mov.w	r6, #0
 801583e:	196b      	adds	r3, r5, r5
 8015840:	eb46 0406 	adc.w	r4, r6, r6
 8015844:	461a      	mov	r2, r3
 8015846:	4623      	mov	r3, r4
 8015848:	f7f3 f936 	bl	8008ab8 <__aeabi_uldivmod>
 801584c:	4603      	mov	r3, r0
 801584e:	460c      	mov	r4, r1
 8015850:	461a      	mov	r2, r3
 8015852:	4b0c      	ldr	r3, [pc, #48]	; (8015884 <UART_SetConfig+0x384>)
 8015854:	fba3 1302 	umull	r1, r3, r3, r2
 8015858:	095b      	lsrs	r3, r3, #5
 801585a:	2164      	movs	r1, #100	; 0x64
 801585c:	fb01 f303 	mul.w	r3, r1, r3
 8015860:	1ad3      	subs	r3, r2, r3
 8015862:	00db      	lsls	r3, r3, #3
 8015864:	3332      	adds	r3, #50	; 0x32
 8015866:	4a07      	ldr	r2, [pc, #28]	; (8015884 <UART_SetConfig+0x384>)
 8015868:	fba2 2303 	umull	r2, r3, r2, r3
 801586c:	095b      	lsrs	r3, r3, #5
 801586e:	f003 0207 	and.w	r2, r3, #7
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	4442      	add	r2, r8
 8015878:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801587a:	e1b2      	b.n	8015be2 <UART_SetConfig+0x6e2>
 801587c:	40011000 	.word	0x40011000
 8015880:	40011400 	.word	0x40011400
 8015884:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	4ad7      	ldr	r2, [pc, #860]	; (8015bec <UART_SetConfig+0x6ec>)
 801588e:	4293      	cmp	r3, r2
 8015890:	d005      	beq.n	801589e <UART_SetConfig+0x39e>
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	4ad6      	ldr	r2, [pc, #856]	; (8015bf0 <UART_SetConfig+0x6f0>)
 8015898:	4293      	cmp	r3, r2
 801589a:	f040 80d1 	bne.w	8015a40 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801589e:	f7fd fc43 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 80158a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80158a4:	68bb      	ldr	r3, [r7, #8]
 80158a6:	469a      	mov	sl, r3
 80158a8:	f04f 0b00 	mov.w	fp, #0
 80158ac:	46d0      	mov	r8, sl
 80158ae:	46d9      	mov	r9, fp
 80158b0:	eb18 0308 	adds.w	r3, r8, r8
 80158b4:	eb49 0409 	adc.w	r4, r9, r9
 80158b8:	4698      	mov	r8, r3
 80158ba:	46a1      	mov	r9, r4
 80158bc:	eb18 080a 	adds.w	r8, r8, sl
 80158c0:	eb49 090b 	adc.w	r9, r9, fp
 80158c4:	f04f 0100 	mov.w	r1, #0
 80158c8:	f04f 0200 	mov.w	r2, #0
 80158cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80158d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80158d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80158d8:	4688      	mov	r8, r1
 80158da:	4691      	mov	r9, r2
 80158dc:	eb1a 0508 	adds.w	r5, sl, r8
 80158e0:	eb4b 0609 	adc.w	r6, fp, r9
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	685b      	ldr	r3, [r3, #4]
 80158e8:	4619      	mov	r1, r3
 80158ea:	f04f 0200 	mov.w	r2, #0
 80158ee:	f04f 0300 	mov.w	r3, #0
 80158f2:	f04f 0400 	mov.w	r4, #0
 80158f6:	0094      	lsls	r4, r2, #2
 80158f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80158fc:	008b      	lsls	r3, r1, #2
 80158fe:	461a      	mov	r2, r3
 8015900:	4623      	mov	r3, r4
 8015902:	4628      	mov	r0, r5
 8015904:	4631      	mov	r1, r6
 8015906:	f7f3 f8d7 	bl	8008ab8 <__aeabi_uldivmod>
 801590a:	4603      	mov	r3, r0
 801590c:	460c      	mov	r4, r1
 801590e:	461a      	mov	r2, r3
 8015910:	4bb8      	ldr	r3, [pc, #736]	; (8015bf4 <UART_SetConfig+0x6f4>)
 8015912:	fba3 2302 	umull	r2, r3, r3, r2
 8015916:	095b      	lsrs	r3, r3, #5
 8015918:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801591c:	68bb      	ldr	r3, [r7, #8]
 801591e:	469b      	mov	fp, r3
 8015920:	f04f 0c00 	mov.w	ip, #0
 8015924:	46d9      	mov	r9, fp
 8015926:	46e2      	mov	sl, ip
 8015928:	eb19 0309 	adds.w	r3, r9, r9
 801592c:	eb4a 040a 	adc.w	r4, sl, sl
 8015930:	4699      	mov	r9, r3
 8015932:	46a2      	mov	sl, r4
 8015934:	eb19 090b 	adds.w	r9, r9, fp
 8015938:	eb4a 0a0c 	adc.w	sl, sl, ip
 801593c:	f04f 0100 	mov.w	r1, #0
 8015940:	f04f 0200 	mov.w	r2, #0
 8015944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015948:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801594c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015950:	4689      	mov	r9, r1
 8015952:	4692      	mov	sl, r2
 8015954:	eb1b 0509 	adds.w	r5, fp, r9
 8015958:	eb4c 060a 	adc.w	r6, ip, sl
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	685b      	ldr	r3, [r3, #4]
 8015960:	4619      	mov	r1, r3
 8015962:	f04f 0200 	mov.w	r2, #0
 8015966:	f04f 0300 	mov.w	r3, #0
 801596a:	f04f 0400 	mov.w	r4, #0
 801596e:	0094      	lsls	r4, r2, #2
 8015970:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015974:	008b      	lsls	r3, r1, #2
 8015976:	461a      	mov	r2, r3
 8015978:	4623      	mov	r3, r4
 801597a:	4628      	mov	r0, r5
 801597c:	4631      	mov	r1, r6
 801597e:	f7f3 f89b 	bl	8008ab8 <__aeabi_uldivmod>
 8015982:	4603      	mov	r3, r0
 8015984:	460c      	mov	r4, r1
 8015986:	461a      	mov	r2, r3
 8015988:	4b9a      	ldr	r3, [pc, #616]	; (8015bf4 <UART_SetConfig+0x6f4>)
 801598a:	fba3 1302 	umull	r1, r3, r3, r2
 801598e:	095b      	lsrs	r3, r3, #5
 8015990:	2164      	movs	r1, #100	; 0x64
 8015992:	fb01 f303 	mul.w	r3, r1, r3
 8015996:	1ad3      	subs	r3, r2, r3
 8015998:	011b      	lsls	r3, r3, #4
 801599a:	3332      	adds	r3, #50	; 0x32
 801599c:	4a95      	ldr	r2, [pc, #596]	; (8015bf4 <UART_SetConfig+0x6f4>)
 801599e:	fba2 2303 	umull	r2, r3, r2, r3
 80159a2:	095b      	lsrs	r3, r3, #5
 80159a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80159a8:	4498      	add	r8, r3
 80159aa:	68bb      	ldr	r3, [r7, #8]
 80159ac:	469b      	mov	fp, r3
 80159ae:	f04f 0c00 	mov.w	ip, #0
 80159b2:	46d9      	mov	r9, fp
 80159b4:	46e2      	mov	sl, ip
 80159b6:	eb19 0309 	adds.w	r3, r9, r9
 80159ba:	eb4a 040a 	adc.w	r4, sl, sl
 80159be:	4699      	mov	r9, r3
 80159c0:	46a2      	mov	sl, r4
 80159c2:	eb19 090b 	adds.w	r9, r9, fp
 80159c6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80159ca:	f04f 0100 	mov.w	r1, #0
 80159ce:	f04f 0200 	mov.w	r2, #0
 80159d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80159d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80159da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80159de:	4689      	mov	r9, r1
 80159e0:	4692      	mov	sl, r2
 80159e2:	eb1b 0509 	adds.w	r5, fp, r9
 80159e6:	eb4c 060a 	adc.w	r6, ip, sl
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	685b      	ldr	r3, [r3, #4]
 80159ee:	4619      	mov	r1, r3
 80159f0:	f04f 0200 	mov.w	r2, #0
 80159f4:	f04f 0300 	mov.w	r3, #0
 80159f8:	f04f 0400 	mov.w	r4, #0
 80159fc:	0094      	lsls	r4, r2, #2
 80159fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015a02:	008b      	lsls	r3, r1, #2
 8015a04:	461a      	mov	r2, r3
 8015a06:	4623      	mov	r3, r4
 8015a08:	4628      	mov	r0, r5
 8015a0a:	4631      	mov	r1, r6
 8015a0c:	f7f3 f854 	bl	8008ab8 <__aeabi_uldivmod>
 8015a10:	4603      	mov	r3, r0
 8015a12:	460c      	mov	r4, r1
 8015a14:	461a      	mov	r2, r3
 8015a16:	4b77      	ldr	r3, [pc, #476]	; (8015bf4 <UART_SetConfig+0x6f4>)
 8015a18:	fba3 1302 	umull	r1, r3, r3, r2
 8015a1c:	095b      	lsrs	r3, r3, #5
 8015a1e:	2164      	movs	r1, #100	; 0x64
 8015a20:	fb01 f303 	mul.w	r3, r1, r3
 8015a24:	1ad3      	subs	r3, r2, r3
 8015a26:	011b      	lsls	r3, r3, #4
 8015a28:	3332      	adds	r3, #50	; 0x32
 8015a2a:	4a72      	ldr	r2, [pc, #456]	; (8015bf4 <UART_SetConfig+0x6f4>)
 8015a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8015a30:	095b      	lsrs	r3, r3, #5
 8015a32:	f003 020f 	and.w	r2, r3, #15
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	4442      	add	r2, r8
 8015a3c:	609a      	str	r2, [r3, #8]
 8015a3e:	e0d0      	b.n	8015be2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8015a40:	f7fd fb5e 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 8015a44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015a46:	68bb      	ldr	r3, [r7, #8]
 8015a48:	469a      	mov	sl, r3
 8015a4a:	f04f 0b00 	mov.w	fp, #0
 8015a4e:	46d0      	mov	r8, sl
 8015a50:	46d9      	mov	r9, fp
 8015a52:	eb18 0308 	adds.w	r3, r8, r8
 8015a56:	eb49 0409 	adc.w	r4, r9, r9
 8015a5a:	4698      	mov	r8, r3
 8015a5c:	46a1      	mov	r9, r4
 8015a5e:	eb18 080a 	adds.w	r8, r8, sl
 8015a62:	eb49 090b 	adc.w	r9, r9, fp
 8015a66:	f04f 0100 	mov.w	r1, #0
 8015a6a:	f04f 0200 	mov.w	r2, #0
 8015a6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015a72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015a76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015a7a:	4688      	mov	r8, r1
 8015a7c:	4691      	mov	r9, r2
 8015a7e:	eb1a 0508 	adds.w	r5, sl, r8
 8015a82:	eb4b 0609 	adc.w	r6, fp, r9
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	685b      	ldr	r3, [r3, #4]
 8015a8a:	4619      	mov	r1, r3
 8015a8c:	f04f 0200 	mov.w	r2, #0
 8015a90:	f04f 0300 	mov.w	r3, #0
 8015a94:	f04f 0400 	mov.w	r4, #0
 8015a98:	0094      	lsls	r4, r2, #2
 8015a9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015a9e:	008b      	lsls	r3, r1, #2
 8015aa0:	461a      	mov	r2, r3
 8015aa2:	4623      	mov	r3, r4
 8015aa4:	4628      	mov	r0, r5
 8015aa6:	4631      	mov	r1, r6
 8015aa8:	f7f3 f806 	bl	8008ab8 <__aeabi_uldivmod>
 8015aac:	4603      	mov	r3, r0
 8015aae:	460c      	mov	r4, r1
 8015ab0:	461a      	mov	r2, r3
 8015ab2:	4b50      	ldr	r3, [pc, #320]	; (8015bf4 <UART_SetConfig+0x6f4>)
 8015ab4:	fba3 2302 	umull	r2, r3, r3, r2
 8015ab8:	095b      	lsrs	r3, r3, #5
 8015aba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015abe:	68bb      	ldr	r3, [r7, #8]
 8015ac0:	469b      	mov	fp, r3
 8015ac2:	f04f 0c00 	mov.w	ip, #0
 8015ac6:	46d9      	mov	r9, fp
 8015ac8:	46e2      	mov	sl, ip
 8015aca:	eb19 0309 	adds.w	r3, r9, r9
 8015ace:	eb4a 040a 	adc.w	r4, sl, sl
 8015ad2:	4699      	mov	r9, r3
 8015ad4:	46a2      	mov	sl, r4
 8015ad6:	eb19 090b 	adds.w	r9, r9, fp
 8015ada:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015ade:	f04f 0100 	mov.w	r1, #0
 8015ae2:	f04f 0200 	mov.w	r2, #0
 8015ae6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015aea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015aee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015af2:	4689      	mov	r9, r1
 8015af4:	4692      	mov	sl, r2
 8015af6:	eb1b 0509 	adds.w	r5, fp, r9
 8015afa:	eb4c 060a 	adc.w	r6, ip, sl
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	685b      	ldr	r3, [r3, #4]
 8015b02:	4619      	mov	r1, r3
 8015b04:	f04f 0200 	mov.w	r2, #0
 8015b08:	f04f 0300 	mov.w	r3, #0
 8015b0c:	f04f 0400 	mov.w	r4, #0
 8015b10:	0094      	lsls	r4, r2, #2
 8015b12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015b16:	008b      	lsls	r3, r1, #2
 8015b18:	461a      	mov	r2, r3
 8015b1a:	4623      	mov	r3, r4
 8015b1c:	4628      	mov	r0, r5
 8015b1e:	4631      	mov	r1, r6
 8015b20:	f7f2 ffca 	bl	8008ab8 <__aeabi_uldivmod>
 8015b24:	4603      	mov	r3, r0
 8015b26:	460c      	mov	r4, r1
 8015b28:	461a      	mov	r2, r3
 8015b2a:	4b32      	ldr	r3, [pc, #200]	; (8015bf4 <UART_SetConfig+0x6f4>)
 8015b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8015b30:	095b      	lsrs	r3, r3, #5
 8015b32:	2164      	movs	r1, #100	; 0x64
 8015b34:	fb01 f303 	mul.w	r3, r1, r3
 8015b38:	1ad3      	subs	r3, r2, r3
 8015b3a:	011b      	lsls	r3, r3, #4
 8015b3c:	3332      	adds	r3, #50	; 0x32
 8015b3e:	4a2d      	ldr	r2, [pc, #180]	; (8015bf4 <UART_SetConfig+0x6f4>)
 8015b40:	fba2 2303 	umull	r2, r3, r2, r3
 8015b44:	095b      	lsrs	r3, r3, #5
 8015b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b4a:	4498      	add	r8, r3
 8015b4c:	68bb      	ldr	r3, [r7, #8]
 8015b4e:	469b      	mov	fp, r3
 8015b50:	f04f 0c00 	mov.w	ip, #0
 8015b54:	46d9      	mov	r9, fp
 8015b56:	46e2      	mov	sl, ip
 8015b58:	eb19 0309 	adds.w	r3, r9, r9
 8015b5c:	eb4a 040a 	adc.w	r4, sl, sl
 8015b60:	4699      	mov	r9, r3
 8015b62:	46a2      	mov	sl, r4
 8015b64:	eb19 090b 	adds.w	r9, r9, fp
 8015b68:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015b6c:	f04f 0100 	mov.w	r1, #0
 8015b70:	f04f 0200 	mov.w	r2, #0
 8015b74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015b78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015b7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015b80:	4689      	mov	r9, r1
 8015b82:	4692      	mov	sl, r2
 8015b84:	eb1b 0509 	adds.w	r5, fp, r9
 8015b88:	eb4c 060a 	adc.w	r6, ip, sl
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	685b      	ldr	r3, [r3, #4]
 8015b90:	4619      	mov	r1, r3
 8015b92:	f04f 0200 	mov.w	r2, #0
 8015b96:	f04f 0300 	mov.w	r3, #0
 8015b9a:	f04f 0400 	mov.w	r4, #0
 8015b9e:	0094      	lsls	r4, r2, #2
 8015ba0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015ba4:	008b      	lsls	r3, r1, #2
 8015ba6:	461a      	mov	r2, r3
 8015ba8:	4623      	mov	r3, r4
 8015baa:	4628      	mov	r0, r5
 8015bac:	4631      	mov	r1, r6
 8015bae:	f7f2 ff83 	bl	8008ab8 <__aeabi_uldivmod>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	460c      	mov	r4, r1
 8015bb6:	461a      	mov	r2, r3
 8015bb8:	4b0e      	ldr	r3, [pc, #56]	; (8015bf4 <UART_SetConfig+0x6f4>)
 8015bba:	fba3 1302 	umull	r1, r3, r3, r2
 8015bbe:	095b      	lsrs	r3, r3, #5
 8015bc0:	2164      	movs	r1, #100	; 0x64
 8015bc2:	fb01 f303 	mul.w	r3, r1, r3
 8015bc6:	1ad3      	subs	r3, r2, r3
 8015bc8:	011b      	lsls	r3, r3, #4
 8015bca:	3332      	adds	r3, #50	; 0x32
 8015bcc:	4a09      	ldr	r2, [pc, #36]	; (8015bf4 <UART_SetConfig+0x6f4>)
 8015bce:	fba2 2303 	umull	r2, r3, r2, r3
 8015bd2:	095b      	lsrs	r3, r3, #5
 8015bd4:	f003 020f 	and.w	r2, r3, #15
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	4442      	add	r2, r8
 8015bde:	609a      	str	r2, [r3, #8]
}
 8015be0:	e7ff      	b.n	8015be2 <UART_SetConfig+0x6e2>
 8015be2:	bf00      	nop
 8015be4:	3714      	adds	r7, #20
 8015be6:	46bd      	mov	sp, r7
 8015be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bec:	40011000 	.word	0x40011000
 8015bf0:	40011400 	.word	0x40011400
 8015bf4:	51eb851f 	.word	0x51eb851f

08015bf8 <round>:
 8015bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bfa:	ec57 6b10 	vmov	r6, r7, d0
 8015bfe:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8015c02:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8015c06:	2c13      	cmp	r4, #19
 8015c08:	463b      	mov	r3, r7
 8015c0a:	463d      	mov	r5, r7
 8015c0c:	dc17      	bgt.n	8015c3e <round+0x46>
 8015c0e:	2c00      	cmp	r4, #0
 8015c10:	da09      	bge.n	8015c26 <round+0x2e>
 8015c12:	3401      	adds	r4, #1
 8015c14:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8015c18:	d103      	bne.n	8015c22 <round+0x2a>
 8015c1a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8015c1e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015c22:	2100      	movs	r1, #0
 8015c24:	e02c      	b.n	8015c80 <round+0x88>
 8015c26:	4a18      	ldr	r2, [pc, #96]	; (8015c88 <round+0x90>)
 8015c28:	4122      	asrs	r2, r4
 8015c2a:	4217      	tst	r7, r2
 8015c2c:	d100      	bne.n	8015c30 <round+0x38>
 8015c2e:	b19e      	cbz	r6, 8015c58 <round+0x60>
 8015c30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015c34:	4123      	asrs	r3, r4
 8015c36:	442b      	add	r3, r5
 8015c38:	ea23 0302 	bic.w	r3, r3, r2
 8015c3c:	e7f1      	b.n	8015c22 <round+0x2a>
 8015c3e:	2c33      	cmp	r4, #51	; 0x33
 8015c40:	dd0d      	ble.n	8015c5e <round+0x66>
 8015c42:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8015c46:	d107      	bne.n	8015c58 <round+0x60>
 8015c48:	4630      	mov	r0, r6
 8015c4a:	4639      	mov	r1, r7
 8015c4c:	ee10 2a10 	vmov	r2, s0
 8015c50:	f7f2 fa54 	bl	80080fc <__adddf3>
 8015c54:	4606      	mov	r6, r0
 8015c56:	460f      	mov	r7, r1
 8015c58:	ec47 6b10 	vmov	d0, r6, r7
 8015c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c5e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8015c62:	f04f 30ff 	mov.w	r0, #4294967295
 8015c66:	40d0      	lsrs	r0, r2
 8015c68:	4206      	tst	r6, r0
 8015c6a:	d0f5      	beq.n	8015c58 <round+0x60>
 8015c6c:	2201      	movs	r2, #1
 8015c6e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8015c72:	fa02 f404 	lsl.w	r4, r2, r4
 8015c76:	1931      	adds	r1, r6, r4
 8015c78:	bf28      	it	cs
 8015c7a:	189b      	addcs	r3, r3, r2
 8015c7c:	ea21 0100 	bic.w	r1, r1, r0
 8015c80:	461f      	mov	r7, r3
 8015c82:	460e      	mov	r6, r1
 8015c84:	e7e8      	b.n	8015c58 <round+0x60>
 8015c86:	bf00      	nop
 8015c88:	000fffff 	.word	0x000fffff

08015c8c <__errno>:
 8015c8c:	4b01      	ldr	r3, [pc, #4]	; (8015c94 <__errno+0x8>)
 8015c8e:	6818      	ldr	r0, [r3, #0]
 8015c90:	4770      	bx	lr
 8015c92:	bf00      	nop
 8015c94:	20000080 	.word	0x20000080

08015c98 <__libc_init_array>:
 8015c98:	b570      	push	{r4, r5, r6, lr}
 8015c9a:	4e0d      	ldr	r6, [pc, #52]	; (8015cd0 <__libc_init_array+0x38>)
 8015c9c:	4c0d      	ldr	r4, [pc, #52]	; (8015cd4 <__libc_init_array+0x3c>)
 8015c9e:	1ba4      	subs	r4, r4, r6
 8015ca0:	10a4      	asrs	r4, r4, #2
 8015ca2:	2500      	movs	r5, #0
 8015ca4:	42a5      	cmp	r5, r4
 8015ca6:	d109      	bne.n	8015cbc <__libc_init_array+0x24>
 8015ca8:	4e0b      	ldr	r6, [pc, #44]	; (8015cd8 <__libc_init_array+0x40>)
 8015caa:	4c0c      	ldr	r4, [pc, #48]	; (8015cdc <__libc_init_array+0x44>)
 8015cac:	f002 fbac 	bl	8018408 <_init>
 8015cb0:	1ba4      	subs	r4, r4, r6
 8015cb2:	10a4      	asrs	r4, r4, #2
 8015cb4:	2500      	movs	r5, #0
 8015cb6:	42a5      	cmp	r5, r4
 8015cb8:	d105      	bne.n	8015cc6 <__libc_init_array+0x2e>
 8015cba:	bd70      	pop	{r4, r5, r6, pc}
 8015cbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015cc0:	4798      	blx	r3
 8015cc2:	3501      	adds	r5, #1
 8015cc4:	e7ee      	b.n	8015ca4 <__libc_init_array+0xc>
 8015cc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015cca:	4798      	blx	r3
 8015ccc:	3501      	adds	r5, #1
 8015cce:	e7f2      	b.n	8015cb6 <__libc_init_array+0x1e>
 8015cd0:	080188b0 	.word	0x080188b0
 8015cd4:	080188b0 	.word	0x080188b0
 8015cd8:	080188b0 	.word	0x080188b0
 8015cdc:	080188b4 	.word	0x080188b4

08015ce0 <memcpy>:
 8015ce0:	b510      	push	{r4, lr}
 8015ce2:	1e43      	subs	r3, r0, #1
 8015ce4:	440a      	add	r2, r1
 8015ce6:	4291      	cmp	r1, r2
 8015ce8:	d100      	bne.n	8015cec <memcpy+0xc>
 8015cea:	bd10      	pop	{r4, pc}
 8015cec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015cf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015cf4:	e7f7      	b.n	8015ce6 <memcpy+0x6>

08015cf6 <memset>:
 8015cf6:	4402      	add	r2, r0
 8015cf8:	4603      	mov	r3, r0
 8015cfa:	4293      	cmp	r3, r2
 8015cfc:	d100      	bne.n	8015d00 <memset+0xa>
 8015cfe:	4770      	bx	lr
 8015d00:	f803 1b01 	strb.w	r1, [r3], #1
 8015d04:	e7f9      	b.n	8015cfa <memset+0x4>

08015d06 <__cvt>:
 8015d06:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015d0a:	ec55 4b10 	vmov	r4, r5, d0
 8015d0e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015d10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015d14:	2d00      	cmp	r5, #0
 8015d16:	460e      	mov	r6, r1
 8015d18:	4691      	mov	r9, r2
 8015d1a:	4619      	mov	r1, r3
 8015d1c:	bfb8      	it	lt
 8015d1e:	4622      	movlt	r2, r4
 8015d20:	462b      	mov	r3, r5
 8015d22:	f027 0720 	bic.w	r7, r7, #32
 8015d26:	bfbb      	ittet	lt
 8015d28:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015d2c:	461d      	movlt	r5, r3
 8015d2e:	2300      	movge	r3, #0
 8015d30:	232d      	movlt	r3, #45	; 0x2d
 8015d32:	bfb8      	it	lt
 8015d34:	4614      	movlt	r4, r2
 8015d36:	2f46      	cmp	r7, #70	; 0x46
 8015d38:	700b      	strb	r3, [r1, #0]
 8015d3a:	d004      	beq.n	8015d46 <__cvt+0x40>
 8015d3c:	2f45      	cmp	r7, #69	; 0x45
 8015d3e:	d100      	bne.n	8015d42 <__cvt+0x3c>
 8015d40:	3601      	adds	r6, #1
 8015d42:	2102      	movs	r1, #2
 8015d44:	e000      	b.n	8015d48 <__cvt+0x42>
 8015d46:	2103      	movs	r1, #3
 8015d48:	ab03      	add	r3, sp, #12
 8015d4a:	9301      	str	r3, [sp, #4]
 8015d4c:	ab02      	add	r3, sp, #8
 8015d4e:	9300      	str	r3, [sp, #0]
 8015d50:	4632      	mov	r2, r6
 8015d52:	4653      	mov	r3, sl
 8015d54:	ec45 4b10 	vmov	d0, r4, r5
 8015d58:	f000 fdfa 	bl	8016950 <_dtoa_r>
 8015d5c:	2f47      	cmp	r7, #71	; 0x47
 8015d5e:	4680      	mov	r8, r0
 8015d60:	d102      	bne.n	8015d68 <__cvt+0x62>
 8015d62:	f019 0f01 	tst.w	r9, #1
 8015d66:	d026      	beq.n	8015db6 <__cvt+0xb0>
 8015d68:	2f46      	cmp	r7, #70	; 0x46
 8015d6a:	eb08 0906 	add.w	r9, r8, r6
 8015d6e:	d111      	bne.n	8015d94 <__cvt+0x8e>
 8015d70:	f898 3000 	ldrb.w	r3, [r8]
 8015d74:	2b30      	cmp	r3, #48	; 0x30
 8015d76:	d10a      	bne.n	8015d8e <__cvt+0x88>
 8015d78:	2200      	movs	r2, #0
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	4620      	mov	r0, r4
 8015d7e:	4629      	mov	r1, r5
 8015d80:	f7f2 fdda 	bl	8008938 <__aeabi_dcmpeq>
 8015d84:	b918      	cbnz	r0, 8015d8e <__cvt+0x88>
 8015d86:	f1c6 0601 	rsb	r6, r6, #1
 8015d8a:	f8ca 6000 	str.w	r6, [sl]
 8015d8e:	f8da 3000 	ldr.w	r3, [sl]
 8015d92:	4499      	add	r9, r3
 8015d94:	2200      	movs	r2, #0
 8015d96:	2300      	movs	r3, #0
 8015d98:	4620      	mov	r0, r4
 8015d9a:	4629      	mov	r1, r5
 8015d9c:	f7f2 fdcc 	bl	8008938 <__aeabi_dcmpeq>
 8015da0:	b938      	cbnz	r0, 8015db2 <__cvt+0xac>
 8015da2:	2230      	movs	r2, #48	; 0x30
 8015da4:	9b03      	ldr	r3, [sp, #12]
 8015da6:	454b      	cmp	r3, r9
 8015da8:	d205      	bcs.n	8015db6 <__cvt+0xb0>
 8015daa:	1c59      	adds	r1, r3, #1
 8015dac:	9103      	str	r1, [sp, #12]
 8015dae:	701a      	strb	r2, [r3, #0]
 8015db0:	e7f8      	b.n	8015da4 <__cvt+0x9e>
 8015db2:	f8cd 900c 	str.w	r9, [sp, #12]
 8015db6:	9b03      	ldr	r3, [sp, #12]
 8015db8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015dba:	eba3 0308 	sub.w	r3, r3, r8
 8015dbe:	4640      	mov	r0, r8
 8015dc0:	6013      	str	r3, [r2, #0]
 8015dc2:	b004      	add	sp, #16
 8015dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015dc8 <__exponent>:
 8015dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015dca:	2900      	cmp	r1, #0
 8015dcc:	4604      	mov	r4, r0
 8015dce:	bfba      	itte	lt
 8015dd0:	4249      	neglt	r1, r1
 8015dd2:	232d      	movlt	r3, #45	; 0x2d
 8015dd4:	232b      	movge	r3, #43	; 0x2b
 8015dd6:	2909      	cmp	r1, #9
 8015dd8:	f804 2b02 	strb.w	r2, [r4], #2
 8015ddc:	7043      	strb	r3, [r0, #1]
 8015dde:	dd20      	ble.n	8015e22 <__exponent+0x5a>
 8015de0:	f10d 0307 	add.w	r3, sp, #7
 8015de4:	461f      	mov	r7, r3
 8015de6:	260a      	movs	r6, #10
 8015de8:	fb91 f5f6 	sdiv	r5, r1, r6
 8015dec:	fb06 1115 	mls	r1, r6, r5, r1
 8015df0:	3130      	adds	r1, #48	; 0x30
 8015df2:	2d09      	cmp	r5, #9
 8015df4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015df8:	f103 32ff 	add.w	r2, r3, #4294967295
 8015dfc:	4629      	mov	r1, r5
 8015dfe:	dc09      	bgt.n	8015e14 <__exponent+0x4c>
 8015e00:	3130      	adds	r1, #48	; 0x30
 8015e02:	3b02      	subs	r3, #2
 8015e04:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015e08:	42bb      	cmp	r3, r7
 8015e0a:	4622      	mov	r2, r4
 8015e0c:	d304      	bcc.n	8015e18 <__exponent+0x50>
 8015e0e:	1a10      	subs	r0, r2, r0
 8015e10:	b003      	add	sp, #12
 8015e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e14:	4613      	mov	r3, r2
 8015e16:	e7e7      	b.n	8015de8 <__exponent+0x20>
 8015e18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e1c:	f804 2b01 	strb.w	r2, [r4], #1
 8015e20:	e7f2      	b.n	8015e08 <__exponent+0x40>
 8015e22:	2330      	movs	r3, #48	; 0x30
 8015e24:	4419      	add	r1, r3
 8015e26:	7083      	strb	r3, [r0, #2]
 8015e28:	1d02      	adds	r2, r0, #4
 8015e2a:	70c1      	strb	r1, [r0, #3]
 8015e2c:	e7ef      	b.n	8015e0e <__exponent+0x46>
	...

08015e30 <_printf_float>:
 8015e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e34:	b08d      	sub	sp, #52	; 0x34
 8015e36:	460c      	mov	r4, r1
 8015e38:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015e3c:	4616      	mov	r6, r2
 8015e3e:	461f      	mov	r7, r3
 8015e40:	4605      	mov	r5, r0
 8015e42:	f001 fcb7 	bl	80177b4 <_localeconv_r>
 8015e46:	6803      	ldr	r3, [r0, #0]
 8015e48:	9304      	str	r3, [sp, #16]
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	f7f2 f8f8 	bl	8008040 <strlen>
 8015e50:	2300      	movs	r3, #0
 8015e52:	930a      	str	r3, [sp, #40]	; 0x28
 8015e54:	f8d8 3000 	ldr.w	r3, [r8]
 8015e58:	9005      	str	r0, [sp, #20]
 8015e5a:	3307      	adds	r3, #7
 8015e5c:	f023 0307 	bic.w	r3, r3, #7
 8015e60:	f103 0208 	add.w	r2, r3, #8
 8015e64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015e68:	f8d4 b000 	ldr.w	fp, [r4]
 8015e6c:	f8c8 2000 	str.w	r2, [r8]
 8015e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e74:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015e78:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015e7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015e80:	9307      	str	r3, [sp, #28]
 8015e82:	f8cd 8018 	str.w	r8, [sp, #24]
 8015e86:	f04f 32ff 	mov.w	r2, #4294967295
 8015e8a:	4ba7      	ldr	r3, [pc, #668]	; (8016128 <_printf_float+0x2f8>)
 8015e8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015e90:	f7f2 fd84 	bl	800899c <__aeabi_dcmpun>
 8015e94:	bb70      	cbnz	r0, 8015ef4 <_printf_float+0xc4>
 8015e96:	f04f 32ff 	mov.w	r2, #4294967295
 8015e9a:	4ba3      	ldr	r3, [pc, #652]	; (8016128 <_printf_float+0x2f8>)
 8015e9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015ea0:	f7f2 fd5e 	bl	8008960 <__aeabi_dcmple>
 8015ea4:	bb30      	cbnz	r0, 8015ef4 <_printf_float+0xc4>
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	4640      	mov	r0, r8
 8015eac:	4649      	mov	r1, r9
 8015eae:	f7f2 fd4d 	bl	800894c <__aeabi_dcmplt>
 8015eb2:	b110      	cbz	r0, 8015eba <_printf_float+0x8a>
 8015eb4:	232d      	movs	r3, #45	; 0x2d
 8015eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015eba:	4a9c      	ldr	r2, [pc, #624]	; (801612c <_printf_float+0x2fc>)
 8015ebc:	4b9c      	ldr	r3, [pc, #624]	; (8016130 <_printf_float+0x300>)
 8015ebe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015ec2:	bf8c      	ite	hi
 8015ec4:	4690      	movhi	r8, r2
 8015ec6:	4698      	movls	r8, r3
 8015ec8:	2303      	movs	r3, #3
 8015eca:	f02b 0204 	bic.w	r2, fp, #4
 8015ece:	6123      	str	r3, [r4, #16]
 8015ed0:	6022      	str	r2, [r4, #0]
 8015ed2:	f04f 0900 	mov.w	r9, #0
 8015ed6:	9700      	str	r7, [sp, #0]
 8015ed8:	4633      	mov	r3, r6
 8015eda:	aa0b      	add	r2, sp, #44	; 0x2c
 8015edc:	4621      	mov	r1, r4
 8015ede:	4628      	mov	r0, r5
 8015ee0:	f000 f9e6 	bl	80162b0 <_printf_common>
 8015ee4:	3001      	adds	r0, #1
 8015ee6:	f040 808d 	bne.w	8016004 <_printf_float+0x1d4>
 8015eea:	f04f 30ff 	mov.w	r0, #4294967295
 8015eee:	b00d      	add	sp, #52	; 0x34
 8015ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ef4:	4642      	mov	r2, r8
 8015ef6:	464b      	mov	r3, r9
 8015ef8:	4640      	mov	r0, r8
 8015efa:	4649      	mov	r1, r9
 8015efc:	f7f2 fd4e 	bl	800899c <__aeabi_dcmpun>
 8015f00:	b110      	cbz	r0, 8015f08 <_printf_float+0xd8>
 8015f02:	4a8c      	ldr	r2, [pc, #560]	; (8016134 <_printf_float+0x304>)
 8015f04:	4b8c      	ldr	r3, [pc, #560]	; (8016138 <_printf_float+0x308>)
 8015f06:	e7da      	b.n	8015ebe <_printf_float+0x8e>
 8015f08:	6861      	ldr	r1, [r4, #4]
 8015f0a:	1c4b      	adds	r3, r1, #1
 8015f0c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015f10:	a80a      	add	r0, sp, #40	; 0x28
 8015f12:	d13e      	bne.n	8015f92 <_printf_float+0x162>
 8015f14:	2306      	movs	r3, #6
 8015f16:	6063      	str	r3, [r4, #4]
 8015f18:	2300      	movs	r3, #0
 8015f1a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015f1e:	ab09      	add	r3, sp, #36	; 0x24
 8015f20:	9300      	str	r3, [sp, #0]
 8015f22:	ec49 8b10 	vmov	d0, r8, r9
 8015f26:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015f2a:	6022      	str	r2, [r4, #0]
 8015f2c:	f8cd a004 	str.w	sl, [sp, #4]
 8015f30:	6861      	ldr	r1, [r4, #4]
 8015f32:	4628      	mov	r0, r5
 8015f34:	f7ff fee7 	bl	8015d06 <__cvt>
 8015f38:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015f3c:	2b47      	cmp	r3, #71	; 0x47
 8015f3e:	4680      	mov	r8, r0
 8015f40:	d109      	bne.n	8015f56 <_printf_float+0x126>
 8015f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f44:	1cd8      	adds	r0, r3, #3
 8015f46:	db02      	blt.n	8015f4e <_printf_float+0x11e>
 8015f48:	6862      	ldr	r2, [r4, #4]
 8015f4a:	4293      	cmp	r3, r2
 8015f4c:	dd47      	ble.n	8015fde <_printf_float+0x1ae>
 8015f4e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015f52:	fa5f fa8a 	uxtb.w	sl, sl
 8015f56:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015f5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015f5c:	d824      	bhi.n	8015fa8 <_printf_float+0x178>
 8015f5e:	3901      	subs	r1, #1
 8015f60:	4652      	mov	r2, sl
 8015f62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015f66:	9109      	str	r1, [sp, #36]	; 0x24
 8015f68:	f7ff ff2e 	bl	8015dc8 <__exponent>
 8015f6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015f6e:	1813      	adds	r3, r2, r0
 8015f70:	2a01      	cmp	r2, #1
 8015f72:	4681      	mov	r9, r0
 8015f74:	6123      	str	r3, [r4, #16]
 8015f76:	dc02      	bgt.n	8015f7e <_printf_float+0x14e>
 8015f78:	6822      	ldr	r2, [r4, #0]
 8015f7a:	07d1      	lsls	r1, r2, #31
 8015f7c:	d501      	bpl.n	8015f82 <_printf_float+0x152>
 8015f7e:	3301      	adds	r3, #1
 8015f80:	6123      	str	r3, [r4, #16]
 8015f82:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d0a5      	beq.n	8015ed6 <_printf_float+0xa6>
 8015f8a:	232d      	movs	r3, #45	; 0x2d
 8015f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f90:	e7a1      	b.n	8015ed6 <_printf_float+0xa6>
 8015f92:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015f96:	f000 8177 	beq.w	8016288 <_printf_float+0x458>
 8015f9a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015f9e:	d1bb      	bne.n	8015f18 <_printf_float+0xe8>
 8015fa0:	2900      	cmp	r1, #0
 8015fa2:	d1b9      	bne.n	8015f18 <_printf_float+0xe8>
 8015fa4:	2301      	movs	r3, #1
 8015fa6:	e7b6      	b.n	8015f16 <_printf_float+0xe6>
 8015fa8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015fac:	d119      	bne.n	8015fe2 <_printf_float+0x1b2>
 8015fae:	2900      	cmp	r1, #0
 8015fb0:	6863      	ldr	r3, [r4, #4]
 8015fb2:	dd0c      	ble.n	8015fce <_printf_float+0x19e>
 8015fb4:	6121      	str	r1, [r4, #16]
 8015fb6:	b913      	cbnz	r3, 8015fbe <_printf_float+0x18e>
 8015fb8:	6822      	ldr	r2, [r4, #0]
 8015fba:	07d2      	lsls	r2, r2, #31
 8015fbc:	d502      	bpl.n	8015fc4 <_printf_float+0x194>
 8015fbe:	3301      	adds	r3, #1
 8015fc0:	440b      	add	r3, r1
 8015fc2:	6123      	str	r3, [r4, #16]
 8015fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fc6:	65a3      	str	r3, [r4, #88]	; 0x58
 8015fc8:	f04f 0900 	mov.w	r9, #0
 8015fcc:	e7d9      	b.n	8015f82 <_printf_float+0x152>
 8015fce:	b913      	cbnz	r3, 8015fd6 <_printf_float+0x1a6>
 8015fd0:	6822      	ldr	r2, [r4, #0]
 8015fd2:	07d0      	lsls	r0, r2, #31
 8015fd4:	d501      	bpl.n	8015fda <_printf_float+0x1aa>
 8015fd6:	3302      	adds	r3, #2
 8015fd8:	e7f3      	b.n	8015fc2 <_printf_float+0x192>
 8015fda:	2301      	movs	r3, #1
 8015fdc:	e7f1      	b.n	8015fc2 <_printf_float+0x192>
 8015fde:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015fe2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015fe6:	4293      	cmp	r3, r2
 8015fe8:	db05      	blt.n	8015ff6 <_printf_float+0x1c6>
 8015fea:	6822      	ldr	r2, [r4, #0]
 8015fec:	6123      	str	r3, [r4, #16]
 8015fee:	07d1      	lsls	r1, r2, #31
 8015ff0:	d5e8      	bpl.n	8015fc4 <_printf_float+0x194>
 8015ff2:	3301      	adds	r3, #1
 8015ff4:	e7e5      	b.n	8015fc2 <_printf_float+0x192>
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	bfd4      	ite	le
 8015ffa:	f1c3 0302 	rsble	r3, r3, #2
 8015ffe:	2301      	movgt	r3, #1
 8016000:	4413      	add	r3, r2
 8016002:	e7de      	b.n	8015fc2 <_printf_float+0x192>
 8016004:	6823      	ldr	r3, [r4, #0]
 8016006:	055a      	lsls	r2, r3, #21
 8016008:	d407      	bmi.n	801601a <_printf_float+0x1ea>
 801600a:	6923      	ldr	r3, [r4, #16]
 801600c:	4642      	mov	r2, r8
 801600e:	4631      	mov	r1, r6
 8016010:	4628      	mov	r0, r5
 8016012:	47b8      	blx	r7
 8016014:	3001      	adds	r0, #1
 8016016:	d12b      	bne.n	8016070 <_printf_float+0x240>
 8016018:	e767      	b.n	8015eea <_printf_float+0xba>
 801601a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801601e:	f240 80dc 	bls.w	80161da <_printf_float+0x3aa>
 8016022:	2200      	movs	r2, #0
 8016024:	2300      	movs	r3, #0
 8016026:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801602a:	f7f2 fc85 	bl	8008938 <__aeabi_dcmpeq>
 801602e:	2800      	cmp	r0, #0
 8016030:	d033      	beq.n	801609a <_printf_float+0x26a>
 8016032:	2301      	movs	r3, #1
 8016034:	4a41      	ldr	r2, [pc, #260]	; (801613c <_printf_float+0x30c>)
 8016036:	4631      	mov	r1, r6
 8016038:	4628      	mov	r0, r5
 801603a:	47b8      	blx	r7
 801603c:	3001      	adds	r0, #1
 801603e:	f43f af54 	beq.w	8015eea <_printf_float+0xba>
 8016042:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016046:	429a      	cmp	r2, r3
 8016048:	db02      	blt.n	8016050 <_printf_float+0x220>
 801604a:	6823      	ldr	r3, [r4, #0]
 801604c:	07d8      	lsls	r0, r3, #31
 801604e:	d50f      	bpl.n	8016070 <_printf_float+0x240>
 8016050:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016054:	4631      	mov	r1, r6
 8016056:	4628      	mov	r0, r5
 8016058:	47b8      	blx	r7
 801605a:	3001      	adds	r0, #1
 801605c:	f43f af45 	beq.w	8015eea <_printf_float+0xba>
 8016060:	f04f 0800 	mov.w	r8, #0
 8016064:	f104 091a 	add.w	r9, r4, #26
 8016068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801606a:	3b01      	subs	r3, #1
 801606c:	4543      	cmp	r3, r8
 801606e:	dc09      	bgt.n	8016084 <_printf_float+0x254>
 8016070:	6823      	ldr	r3, [r4, #0]
 8016072:	079b      	lsls	r3, r3, #30
 8016074:	f100 8103 	bmi.w	801627e <_printf_float+0x44e>
 8016078:	68e0      	ldr	r0, [r4, #12]
 801607a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801607c:	4298      	cmp	r0, r3
 801607e:	bfb8      	it	lt
 8016080:	4618      	movlt	r0, r3
 8016082:	e734      	b.n	8015eee <_printf_float+0xbe>
 8016084:	2301      	movs	r3, #1
 8016086:	464a      	mov	r2, r9
 8016088:	4631      	mov	r1, r6
 801608a:	4628      	mov	r0, r5
 801608c:	47b8      	blx	r7
 801608e:	3001      	adds	r0, #1
 8016090:	f43f af2b 	beq.w	8015eea <_printf_float+0xba>
 8016094:	f108 0801 	add.w	r8, r8, #1
 8016098:	e7e6      	b.n	8016068 <_printf_float+0x238>
 801609a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801609c:	2b00      	cmp	r3, #0
 801609e:	dc2b      	bgt.n	80160f8 <_printf_float+0x2c8>
 80160a0:	2301      	movs	r3, #1
 80160a2:	4a26      	ldr	r2, [pc, #152]	; (801613c <_printf_float+0x30c>)
 80160a4:	4631      	mov	r1, r6
 80160a6:	4628      	mov	r0, r5
 80160a8:	47b8      	blx	r7
 80160aa:	3001      	adds	r0, #1
 80160ac:	f43f af1d 	beq.w	8015eea <_printf_float+0xba>
 80160b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160b2:	b923      	cbnz	r3, 80160be <_printf_float+0x28e>
 80160b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160b6:	b913      	cbnz	r3, 80160be <_printf_float+0x28e>
 80160b8:	6823      	ldr	r3, [r4, #0]
 80160ba:	07d9      	lsls	r1, r3, #31
 80160bc:	d5d8      	bpl.n	8016070 <_printf_float+0x240>
 80160be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80160c2:	4631      	mov	r1, r6
 80160c4:	4628      	mov	r0, r5
 80160c6:	47b8      	blx	r7
 80160c8:	3001      	adds	r0, #1
 80160ca:	f43f af0e 	beq.w	8015eea <_printf_float+0xba>
 80160ce:	f04f 0900 	mov.w	r9, #0
 80160d2:	f104 0a1a 	add.w	sl, r4, #26
 80160d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160d8:	425b      	negs	r3, r3
 80160da:	454b      	cmp	r3, r9
 80160dc:	dc01      	bgt.n	80160e2 <_printf_float+0x2b2>
 80160de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160e0:	e794      	b.n	801600c <_printf_float+0x1dc>
 80160e2:	2301      	movs	r3, #1
 80160e4:	4652      	mov	r2, sl
 80160e6:	4631      	mov	r1, r6
 80160e8:	4628      	mov	r0, r5
 80160ea:	47b8      	blx	r7
 80160ec:	3001      	adds	r0, #1
 80160ee:	f43f aefc 	beq.w	8015eea <_printf_float+0xba>
 80160f2:	f109 0901 	add.w	r9, r9, #1
 80160f6:	e7ee      	b.n	80160d6 <_printf_float+0x2a6>
 80160f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80160fc:	429a      	cmp	r2, r3
 80160fe:	bfa8      	it	ge
 8016100:	461a      	movge	r2, r3
 8016102:	2a00      	cmp	r2, #0
 8016104:	4691      	mov	r9, r2
 8016106:	dd07      	ble.n	8016118 <_printf_float+0x2e8>
 8016108:	4613      	mov	r3, r2
 801610a:	4631      	mov	r1, r6
 801610c:	4642      	mov	r2, r8
 801610e:	4628      	mov	r0, r5
 8016110:	47b8      	blx	r7
 8016112:	3001      	adds	r0, #1
 8016114:	f43f aee9 	beq.w	8015eea <_printf_float+0xba>
 8016118:	f104 031a 	add.w	r3, r4, #26
 801611c:	f04f 0b00 	mov.w	fp, #0
 8016120:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016124:	9306      	str	r3, [sp, #24]
 8016126:	e015      	b.n	8016154 <_printf_float+0x324>
 8016128:	7fefffff 	.word	0x7fefffff
 801612c:	080185ec 	.word	0x080185ec
 8016130:	080185e8 	.word	0x080185e8
 8016134:	080185f4 	.word	0x080185f4
 8016138:	080185f0 	.word	0x080185f0
 801613c:	080185f8 	.word	0x080185f8
 8016140:	2301      	movs	r3, #1
 8016142:	9a06      	ldr	r2, [sp, #24]
 8016144:	4631      	mov	r1, r6
 8016146:	4628      	mov	r0, r5
 8016148:	47b8      	blx	r7
 801614a:	3001      	adds	r0, #1
 801614c:	f43f aecd 	beq.w	8015eea <_printf_float+0xba>
 8016150:	f10b 0b01 	add.w	fp, fp, #1
 8016154:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016158:	ebaa 0309 	sub.w	r3, sl, r9
 801615c:	455b      	cmp	r3, fp
 801615e:	dcef      	bgt.n	8016140 <_printf_float+0x310>
 8016160:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016164:	429a      	cmp	r2, r3
 8016166:	44d0      	add	r8, sl
 8016168:	db15      	blt.n	8016196 <_printf_float+0x366>
 801616a:	6823      	ldr	r3, [r4, #0]
 801616c:	07da      	lsls	r2, r3, #31
 801616e:	d412      	bmi.n	8016196 <_printf_float+0x366>
 8016170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016172:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016174:	eba3 020a 	sub.w	r2, r3, sl
 8016178:	eba3 0a01 	sub.w	sl, r3, r1
 801617c:	4592      	cmp	sl, r2
 801617e:	bfa8      	it	ge
 8016180:	4692      	movge	sl, r2
 8016182:	f1ba 0f00 	cmp.w	sl, #0
 8016186:	dc0e      	bgt.n	80161a6 <_printf_float+0x376>
 8016188:	f04f 0800 	mov.w	r8, #0
 801618c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016190:	f104 091a 	add.w	r9, r4, #26
 8016194:	e019      	b.n	80161ca <_printf_float+0x39a>
 8016196:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801619a:	4631      	mov	r1, r6
 801619c:	4628      	mov	r0, r5
 801619e:	47b8      	blx	r7
 80161a0:	3001      	adds	r0, #1
 80161a2:	d1e5      	bne.n	8016170 <_printf_float+0x340>
 80161a4:	e6a1      	b.n	8015eea <_printf_float+0xba>
 80161a6:	4653      	mov	r3, sl
 80161a8:	4642      	mov	r2, r8
 80161aa:	4631      	mov	r1, r6
 80161ac:	4628      	mov	r0, r5
 80161ae:	47b8      	blx	r7
 80161b0:	3001      	adds	r0, #1
 80161b2:	d1e9      	bne.n	8016188 <_printf_float+0x358>
 80161b4:	e699      	b.n	8015eea <_printf_float+0xba>
 80161b6:	2301      	movs	r3, #1
 80161b8:	464a      	mov	r2, r9
 80161ba:	4631      	mov	r1, r6
 80161bc:	4628      	mov	r0, r5
 80161be:	47b8      	blx	r7
 80161c0:	3001      	adds	r0, #1
 80161c2:	f43f ae92 	beq.w	8015eea <_printf_float+0xba>
 80161c6:	f108 0801 	add.w	r8, r8, #1
 80161ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80161ce:	1a9b      	subs	r3, r3, r2
 80161d0:	eba3 030a 	sub.w	r3, r3, sl
 80161d4:	4543      	cmp	r3, r8
 80161d6:	dcee      	bgt.n	80161b6 <_printf_float+0x386>
 80161d8:	e74a      	b.n	8016070 <_printf_float+0x240>
 80161da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161dc:	2a01      	cmp	r2, #1
 80161de:	dc01      	bgt.n	80161e4 <_printf_float+0x3b4>
 80161e0:	07db      	lsls	r3, r3, #31
 80161e2:	d53a      	bpl.n	801625a <_printf_float+0x42a>
 80161e4:	2301      	movs	r3, #1
 80161e6:	4642      	mov	r2, r8
 80161e8:	4631      	mov	r1, r6
 80161ea:	4628      	mov	r0, r5
 80161ec:	47b8      	blx	r7
 80161ee:	3001      	adds	r0, #1
 80161f0:	f43f ae7b 	beq.w	8015eea <_printf_float+0xba>
 80161f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80161f8:	4631      	mov	r1, r6
 80161fa:	4628      	mov	r0, r5
 80161fc:	47b8      	blx	r7
 80161fe:	3001      	adds	r0, #1
 8016200:	f108 0801 	add.w	r8, r8, #1
 8016204:	f43f ae71 	beq.w	8015eea <_printf_float+0xba>
 8016208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801620a:	2200      	movs	r2, #0
 801620c:	f103 3aff 	add.w	sl, r3, #4294967295
 8016210:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016214:	2300      	movs	r3, #0
 8016216:	f7f2 fb8f 	bl	8008938 <__aeabi_dcmpeq>
 801621a:	b9c8      	cbnz	r0, 8016250 <_printf_float+0x420>
 801621c:	4653      	mov	r3, sl
 801621e:	4642      	mov	r2, r8
 8016220:	4631      	mov	r1, r6
 8016222:	4628      	mov	r0, r5
 8016224:	47b8      	blx	r7
 8016226:	3001      	adds	r0, #1
 8016228:	d10e      	bne.n	8016248 <_printf_float+0x418>
 801622a:	e65e      	b.n	8015eea <_printf_float+0xba>
 801622c:	2301      	movs	r3, #1
 801622e:	4652      	mov	r2, sl
 8016230:	4631      	mov	r1, r6
 8016232:	4628      	mov	r0, r5
 8016234:	47b8      	blx	r7
 8016236:	3001      	adds	r0, #1
 8016238:	f43f ae57 	beq.w	8015eea <_printf_float+0xba>
 801623c:	f108 0801 	add.w	r8, r8, #1
 8016240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016242:	3b01      	subs	r3, #1
 8016244:	4543      	cmp	r3, r8
 8016246:	dcf1      	bgt.n	801622c <_printf_float+0x3fc>
 8016248:	464b      	mov	r3, r9
 801624a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801624e:	e6de      	b.n	801600e <_printf_float+0x1de>
 8016250:	f04f 0800 	mov.w	r8, #0
 8016254:	f104 0a1a 	add.w	sl, r4, #26
 8016258:	e7f2      	b.n	8016240 <_printf_float+0x410>
 801625a:	2301      	movs	r3, #1
 801625c:	e7df      	b.n	801621e <_printf_float+0x3ee>
 801625e:	2301      	movs	r3, #1
 8016260:	464a      	mov	r2, r9
 8016262:	4631      	mov	r1, r6
 8016264:	4628      	mov	r0, r5
 8016266:	47b8      	blx	r7
 8016268:	3001      	adds	r0, #1
 801626a:	f43f ae3e 	beq.w	8015eea <_printf_float+0xba>
 801626e:	f108 0801 	add.w	r8, r8, #1
 8016272:	68e3      	ldr	r3, [r4, #12]
 8016274:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016276:	1a9b      	subs	r3, r3, r2
 8016278:	4543      	cmp	r3, r8
 801627a:	dcf0      	bgt.n	801625e <_printf_float+0x42e>
 801627c:	e6fc      	b.n	8016078 <_printf_float+0x248>
 801627e:	f04f 0800 	mov.w	r8, #0
 8016282:	f104 0919 	add.w	r9, r4, #25
 8016286:	e7f4      	b.n	8016272 <_printf_float+0x442>
 8016288:	2900      	cmp	r1, #0
 801628a:	f43f ae8b 	beq.w	8015fa4 <_printf_float+0x174>
 801628e:	2300      	movs	r3, #0
 8016290:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016294:	ab09      	add	r3, sp, #36	; 0x24
 8016296:	9300      	str	r3, [sp, #0]
 8016298:	ec49 8b10 	vmov	d0, r8, r9
 801629c:	6022      	str	r2, [r4, #0]
 801629e:	f8cd a004 	str.w	sl, [sp, #4]
 80162a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80162a6:	4628      	mov	r0, r5
 80162a8:	f7ff fd2d 	bl	8015d06 <__cvt>
 80162ac:	4680      	mov	r8, r0
 80162ae:	e648      	b.n	8015f42 <_printf_float+0x112>

080162b0 <_printf_common>:
 80162b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162b4:	4691      	mov	r9, r2
 80162b6:	461f      	mov	r7, r3
 80162b8:	688a      	ldr	r2, [r1, #8]
 80162ba:	690b      	ldr	r3, [r1, #16]
 80162bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80162c0:	4293      	cmp	r3, r2
 80162c2:	bfb8      	it	lt
 80162c4:	4613      	movlt	r3, r2
 80162c6:	f8c9 3000 	str.w	r3, [r9]
 80162ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80162ce:	4606      	mov	r6, r0
 80162d0:	460c      	mov	r4, r1
 80162d2:	b112      	cbz	r2, 80162da <_printf_common+0x2a>
 80162d4:	3301      	adds	r3, #1
 80162d6:	f8c9 3000 	str.w	r3, [r9]
 80162da:	6823      	ldr	r3, [r4, #0]
 80162dc:	0699      	lsls	r1, r3, #26
 80162de:	bf42      	ittt	mi
 80162e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80162e4:	3302      	addmi	r3, #2
 80162e6:	f8c9 3000 	strmi.w	r3, [r9]
 80162ea:	6825      	ldr	r5, [r4, #0]
 80162ec:	f015 0506 	ands.w	r5, r5, #6
 80162f0:	d107      	bne.n	8016302 <_printf_common+0x52>
 80162f2:	f104 0a19 	add.w	sl, r4, #25
 80162f6:	68e3      	ldr	r3, [r4, #12]
 80162f8:	f8d9 2000 	ldr.w	r2, [r9]
 80162fc:	1a9b      	subs	r3, r3, r2
 80162fe:	42ab      	cmp	r3, r5
 8016300:	dc28      	bgt.n	8016354 <_printf_common+0xa4>
 8016302:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016306:	6822      	ldr	r2, [r4, #0]
 8016308:	3300      	adds	r3, #0
 801630a:	bf18      	it	ne
 801630c:	2301      	movne	r3, #1
 801630e:	0692      	lsls	r2, r2, #26
 8016310:	d42d      	bmi.n	801636e <_printf_common+0xbe>
 8016312:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016316:	4639      	mov	r1, r7
 8016318:	4630      	mov	r0, r6
 801631a:	47c0      	blx	r8
 801631c:	3001      	adds	r0, #1
 801631e:	d020      	beq.n	8016362 <_printf_common+0xb2>
 8016320:	6823      	ldr	r3, [r4, #0]
 8016322:	68e5      	ldr	r5, [r4, #12]
 8016324:	f8d9 2000 	ldr.w	r2, [r9]
 8016328:	f003 0306 	and.w	r3, r3, #6
 801632c:	2b04      	cmp	r3, #4
 801632e:	bf08      	it	eq
 8016330:	1aad      	subeq	r5, r5, r2
 8016332:	68a3      	ldr	r3, [r4, #8]
 8016334:	6922      	ldr	r2, [r4, #16]
 8016336:	bf0c      	ite	eq
 8016338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801633c:	2500      	movne	r5, #0
 801633e:	4293      	cmp	r3, r2
 8016340:	bfc4      	itt	gt
 8016342:	1a9b      	subgt	r3, r3, r2
 8016344:	18ed      	addgt	r5, r5, r3
 8016346:	f04f 0900 	mov.w	r9, #0
 801634a:	341a      	adds	r4, #26
 801634c:	454d      	cmp	r5, r9
 801634e:	d11a      	bne.n	8016386 <_printf_common+0xd6>
 8016350:	2000      	movs	r0, #0
 8016352:	e008      	b.n	8016366 <_printf_common+0xb6>
 8016354:	2301      	movs	r3, #1
 8016356:	4652      	mov	r2, sl
 8016358:	4639      	mov	r1, r7
 801635a:	4630      	mov	r0, r6
 801635c:	47c0      	blx	r8
 801635e:	3001      	adds	r0, #1
 8016360:	d103      	bne.n	801636a <_printf_common+0xba>
 8016362:	f04f 30ff 	mov.w	r0, #4294967295
 8016366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801636a:	3501      	adds	r5, #1
 801636c:	e7c3      	b.n	80162f6 <_printf_common+0x46>
 801636e:	18e1      	adds	r1, r4, r3
 8016370:	1c5a      	adds	r2, r3, #1
 8016372:	2030      	movs	r0, #48	; 0x30
 8016374:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016378:	4422      	add	r2, r4
 801637a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801637e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016382:	3302      	adds	r3, #2
 8016384:	e7c5      	b.n	8016312 <_printf_common+0x62>
 8016386:	2301      	movs	r3, #1
 8016388:	4622      	mov	r2, r4
 801638a:	4639      	mov	r1, r7
 801638c:	4630      	mov	r0, r6
 801638e:	47c0      	blx	r8
 8016390:	3001      	adds	r0, #1
 8016392:	d0e6      	beq.n	8016362 <_printf_common+0xb2>
 8016394:	f109 0901 	add.w	r9, r9, #1
 8016398:	e7d8      	b.n	801634c <_printf_common+0x9c>
	...

0801639c <_printf_i>:
 801639c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80163a4:	460c      	mov	r4, r1
 80163a6:	7e09      	ldrb	r1, [r1, #24]
 80163a8:	b085      	sub	sp, #20
 80163aa:	296e      	cmp	r1, #110	; 0x6e
 80163ac:	4617      	mov	r7, r2
 80163ae:	4606      	mov	r6, r0
 80163b0:	4698      	mov	r8, r3
 80163b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80163b4:	f000 80b3 	beq.w	801651e <_printf_i+0x182>
 80163b8:	d822      	bhi.n	8016400 <_printf_i+0x64>
 80163ba:	2963      	cmp	r1, #99	; 0x63
 80163bc:	d036      	beq.n	801642c <_printf_i+0x90>
 80163be:	d80a      	bhi.n	80163d6 <_printf_i+0x3a>
 80163c0:	2900      	cmp	r1, #0
 80163c2:	f000 80b9 	beq.w	8016538 <_printf_i+0x19c>
 80163c6:	2958      	cmp	r1, #88	; 0x58
 80163c8:	f000 8083 	beq.w	80164d2 <_printf_i+0x136>
 80163cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80163d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80163d4:	e032      	b.n	801643c <_printf_i+0xa0>
 80163d6:	2964      	cmp	r1, #100	; 0x64
 80163d8:	d001      	beq.n	80163de <_printf_i+0x42>
 80163da:	2969      	cmp	r1, #105	; 0x69
 80163dc:	d1f6      	bne.n	80163cc <_printf_i+0x30>
 80163de:	6820      	ldr	r0, [r4, #0]
 80163e0:	6813      	ldr	r3, [r2, #0]
 80163e2:	0605      	lsls	r5, r0, #24
 80163e4:	f103 0104 	add.w	r1, r3, #4
 80163e8:	d52a      	bpl.n	8016440 <_printf_i+0xa4>
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	6011      	str	r1, [r2, #0]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	da03      	bge.n	80163fa <_printf_i+0x5e>
 80163f2:	222d      	movs	r2, #45	; 0x2d
 80163f4:	425b      	negs	r3, r3
 80163f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80163fa:	486f      	ldr	r0, [pc, #444]	; (80165b8 <_printf_i+0x21c>)
 80163fc:	220a      	movs	r2, #10
 80163fe:	e039      	b.n	8016474 <_printf_i+0xd8>
 8016400:	2973      	cmp	r1, #115	; 0x73
 8016402:	f000 809d 	beq.w	8016540 <_printf_i+0x1a4>
 8016406:	d808      	bhi.n	801641a <_printf_i+0x7e>
 8016408:	296f      	cmp	r1, #111	; 0x6f
 801640a:	d020      	beq.n	801644e <_printf_i+0xb2>
 801640c:	2970      	cmp	r1, #112	; 0x70
 801640e:	d1dd      	bne.n	80163cc <_printf_i+0x30>
 8016410:	6823      	ldr	r3, [r4, #0]
 8016412:	f043 0320 	orr.w	r3, r3, #32
 8016416:	6023      	str	r3, [r4, #0]
 8016418:	e003      	b.n	8016422 <_printf_i+0x86>
 801641a:	2975      	cmp	r1, #117	; 0x75
 801641c:	d017      	beq.n	801644e <_printf_i+0xb2>
 801641e:	2978      	cmp	r1, #120	; 0x78
 8016420:	d1d4      	bne.n	80163cc <_printf_i+0x30>
 8016422:	2378      	movs	r3, #120	; 0x78
 8016424:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016428:	4864      	ldr	r0, [pc, #400]	; (80165bc <_printf_i+0x220>)
 801642a:	e055      	b.n	80164d8 <_printf_i+0x13c>
 801642c:	6813      	ldr	r3, [r2, #0]
 801642e:	1d19      	adds	r1, r3, #4
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	6011      	str	r1, [r2, #0]
 8016434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801643c:	2301      	movs	r3, #1
 801643e:	e08c      	b.n	801655a <_printf_i+0x1be>
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	6011      	str	r1, [r2, #0]
 8016444:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016448:	bf18      	it	ne
 801644a:	b21b      	sxthne	r3, r3
 801644c:	e7cf      	b.n	80163ee <_printf_i+0x52>
 801644e:	6813      	ldr	r3, [r2, #0]
 8016450:	6825      	ldr	r5, [r4, #0]
 8016452:	1d18      	adds	r0, r3, #4
 8016454:	6010      	str	r0, [r2, #0]
 8016456:	0628      	lsls	r0, r5, #24
 8016458:	d501      	bpl.n	801645e <_printf_i+0xc2>
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	e002      	b.n	8016464 <_printf_i+0xc8>
 801645e:	0668      	lsls	r0, r5, #25
 8016460:	d5fb      	bpl.n	801645a <_printf_i+0xbe>
 8016462:	881b      	ldrh	r3, [r3, #0]
 8016464:	4854      	ldr	r0, [pc, #336]	; (80165b8 <_printf_i+0x21c>)
 8016466:	296f      	cmp	r1, #111	; 0x6f
 8016468:	bf14      	ite	ne
 801646a:	220a      	movne	r2, #10
 801646c:	2208      	moveq	r2, #8
 801646e:	2100      	movs	r1, #0
 8016470:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016474:	6865      	ldr	r5, [r4, #4]
 8016476:	60a5      	str	r5, [r4, #8]
 8016478:	2d00      	cmp	r5, #0
 801647a:	f2c0 8095 	blt.w	80165a8 <_printf_i+0x20c>
 801647e:	6821      	ldr	r1, [r4, #0]
 8016480:	f021 0104 	bic.w	r1, r1, #4
 8016484:	6021      	str	r1, [r4, #0]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d13d      	bne.n	8016506 <_printf_i+0x16a>
 801648a:	2d00      	cmp	r5, #0
 801648c:	f040 808e 	bne.w	80165ac <_printf_i+0x210>
 8016490:	4665      	mov	r5, ip
 8016492:	2a08      	cmp	r2, #8
 8016494:	d10b      	bne.n	80164ae <_printf_i+0x112>
 8016496:	6823      	ldr	r3, [r4, #0]
 8016498:	07db      	lsls	r3, r3, #31
 801649a:	d508      	bpl.n	80164ae <_printf_i+0x112>
 801649c:	6923      	ldr	r3, [r4, #16]
 801649e:	6862      	ldr	r2, [r4, #4]
 80164a0:	429a      	cmp	r2, r3
 80164a2:	bfde      	ittt	le
 80164a4:	2330      	movle	r3, #48	; 0x30
 80164a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80164aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80164ae:	ebac 0305 	sub.w	r3, ip, r5
 80164b2:	6123      	str	r3, [r4, #16]
 80164b4:	f8cd 8000 	str.w	r8, [sp]
 80164b8:	463b      	mov	r3, r7
 80164ba:	aa03      	add	r2, sp, #12
 80164bc:	4621      	mov	r1, r4
 80164be:	4630      	mov	r0, r6
 80164c0:	f7ff fef6 	bl	80162b0 <_printf_common>
 80164c4:	3001      	adds	r0, #1
 80164c6:	d14d      	bne.n	8016564 <_printf_i+0x1c8>
 80164c8:	f04f 30ff 	mov.w	r0, #4294967295
 80164cc:	b005      	add	sp, #20
 80164ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164d2:	4839      	ldr	r0, [pc, #228]	; (80165b8 <_printf_i+0x21c>)
 80164d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80164d8:	6813      	ldr	r3, [r2, #0]
 80164da:	6821      	ldr	r1, [r4, #0]
 80164dc:	1d1d      	adds	r5, r3, #4
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	6015      	str	r5, [r2, #0]
 80164e2:	060a      	lsls	r2, r1, #24
 80164e4:	d50b      	bpl.n	80164fe <_printf_i+0x162>
 80164e6:	07ca      	lsls	r2, r1, #31
 80164e8:	bf44      	itt	mi
 80164ea:	f041 0120 	orrmi.w	r1, r1, #32
 80164ee:	6021      	strmi	r1, [r4, #0]
 80164f0:	b91b      	cbnz	r3, 80164fa <_printf_i+0x15e>
 80164f2:	6822      	ldr	r2, [r4, #0]
 80164f4:	f022 0220 	bic.w	r2, r2, #32
 80164f8:	6022      	str	r2, [r4, #0]
 80164fa:	2210      	movs	r2, #16
 80164fc:	e7b7      	b.n	801646e <_printf_i+0xd2>
 80164fe:	064d      	lsls	r5, r1, #25
 8016500:	bf48      	it	mi
 8016502:	b29b      	uxthmi	r3, r3
 8016504:	e7ef      	b.n	80164e6 <_printf_i+0x14a>
 8016506:	4665      	mov	r5, ip
 8016508:	fbb3 f1f2 	udiv	r1, r3, r2
 801650c:	fb02 3311 	mls	r3, r2, r1, r3
 8016510:	5cc3      	ldrb	r3, [r0, r3]
 8016512:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016516:	460b      	mov	r3, r1
 8016518:	2900      	cmp	r1, #0
 801651a:	d1f5      	bne.n	8016508 <_printf_i+0x16c>
 801651c:	e7b9      	b.n	8016492 <_printf_i+0xf6>
 801651e:	6813      	ldr	r3, [r2, #0]
 8016520:	6825      	ldr	r5, [r4, #0]
 8016522:	6961      	ldr	r1, [r4, #20]
 8016524:	1d18      	adds	r0, r3, #4
 8016526:	6010      	str	r0, [r2, #0]
 8016528:	0628      	lsls	r0, r5, #24
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	d501      	bpl.n	8016532 <_printf_i+0x196>
 801652e:	6019      	str	r1, [r3, #0]
 8016530:	e002      	b.n	8016538 <_printf_i+0x19c>
 8016532:	066a      	lsls	r2, r5, #25
 8016534:	d5fb      	bpl.n	801652e <_printf_i+0x192>
 8016536:	8019      	strh	r1, [r3, #0]
 8016538:	2300      	movs	r3, #0
 801653a:	6123      	str	r3, [r4, #16]
 801653c:	4665      	mov	r5, ip
 801653e:	e7b9      	b.n	80164b4 <_printf_i+0x118>
 8016540:	6813      	ldr	r3, [r2, #0]
 8016542:	1d19      	adds	r1, r3, #4
 8016544:	6011      	str	r1, [r2, #0]
 8016546:	681d      	ldr	r5, [r3, #0]
 8016548:	6862      	ldr	r2, [r4, #4]
 801654a:	2100      	movs	r1, #0
 801654c:	4628      	mov	r0, r5
 801654e:	f7f1 fd7f 	bl	8008050 <memchr>
 8016552:	b108      	cbz	r0, 8016558 <_printf_i+0x1bc>
 8016554:	1b40      	subs	r0, r0, r5
 8016556:	6060      	str	r0, [r4, #4]
 8016558:	6863      	ldr	r3, [r4, #4]
 801655a:	6123      	str	r3, [r4, #16]
 801655c:	2300      	movs	r3, #0
 801655e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016562:	e7a7      	b.n	80164b4 <_printf_i+0x118>
 8016564:	6923      	ldr	r3, [r4, #16]
 8016566:	462a      	mov	r2, r5
 8016568:	4639      	mov	r1, r7
 801656a:	4630      	mov	r0, r6
 801656c:	47c0      	blx	r8
 801656e:	3001      	adds	r0, #1
 8016570:	d0aa      	beq.n	80164c8 <_printf_i+0x12c>
 8016572:	6823      	ldr	r3, [r4, #0]
 8016574:	079b      	lsls	r3, r3, #30
 8016576:	d413      	bmi.n	80165a0 <_printf_i+0x204>
 8016578:	68e0      	ldr	r0, [r4, #12]
 801657a:	9b03      	ldr	r3, [sp, #12]
 801657c:	4298      	cmp	r0, r3
 801657e:	bfb8      	it	lt
 8016580:	4618      	movlt	r0, r3
 8016582:	e7a3      	b.n	80164cc <_printf_i+0x130>
 8016584:	2301      	movs	r3, #1
 8016586:	464a      	mov	r2, r9
 8016588:	4639      	mov	r1, r7
 801658a:	4630      	mov	r0, r6
 801658c:	47c0      	blx	r8
 801658e:	3001      	adds	r0, #1
 8016590:	d09a      	beq.n	80164c8 <_printf_i+0x12c>
 8016592:	3501      	adds	r5, #1
 8016594:	68e3      	ldr	r3, [r4, #12]
 8016596:	9a03      	ldr	r2, [sp, #12]
 8016598:	1a9b      	subs	r3, r3, r2
 801659a:	42ab      	cmp	r3, r5
 801659c:	dcf2      	bgt.n	8016584 <_printf_i+0x1e8>
 801659e:	e7eb      	b.n	8016578 <_printf_i+0x1dc>
 80165a0:	2500      	movs	r5, #0
 80165a2:	f104 0919 	add.w	r9, r4, #25
 80165a6:	e7f5      	b.n	8016594 <_printf_i+0x1f8>
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d1ac      	bne.n	8016506 <_printf_i+0x16a>
 80165ac:	7803      	ldrb	r3, [r0, #0]
 80165ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80165b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80165b6:	e76c      	b.n	8016492 <_printf_i+0xf6>
 80165b8:	080185fa 	.word	0x080185fa
 80165bc:	0801860b 	.word	0x0801860b

080165c0 <iprintf>:
 80165c0:	b40f      	push	{r0, r1, r2, r3}
 80165c2:	4b0a      	ldr	r3, [pc, #40]	; (80165ec <iprintf+0x2c>)
 80165c4:	b513      	push	{r0, r1, r4, lr}
 80165c6:	681c      	ldr	r4, [r3, #0]
 80165c8:	b124      	cbz	r4, 80165d4 <iprintf+0x14>
 80165ca:	69a3      	ldr	r3, [r4, #24]
 80165cc:	b913      	cbnz	r3, 80165d4 <iprintf+0x14>
 80165ce:	4620      	mov	r0, r4
 80165d0:	f001 f866 	bl	80176a0 <__sinit>
 80165d4:	ab05      	add	r3, sp, #20
 80165d6:	9a04      	ldr	r2, [sp, #16]
 80165d8:	68a1      	ldr	r1, [r4, #8]
 80165da:	9301      	str	r3, [sp, #4]
 80165dc:	4620      	mov	r0, r4
 80165de:	f001 fd1f 	bl	8018020 <_vfiprintf_r>
 80165e2:	b002      	add	sp, #8
 80165e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165e8:	b004      	add	sp, #16
 80165ea:	4770      	bx	lr
 80165ec:	20000080 	.word	0x20000080

080165f0 <_puts_r>:
 80165f0:	b570      	push	{r4, r5, r6, lr}
 80165f2:	460e      	mov	r6, r1
 80165f4:	4605      	mov	r5, r0
 80165f6:	b118      	cbz	r0, 8016600 <_puts_r+0x10>
 80165f8:	6983      	ldr	r3, [r0, #24]
 80165fa:	b90b      	cbnz	r3, 8016600 <_puts_r+0x10>
 80165fc:	f001 f850 	bl	80176a0 <__sinit>
 8016600:	69ab      	ldr	r3, [r5, #24]
 8016602:	68ac      	ldr	r4, [r5, #8]
 8016604:	b913      	cbnz	r3, 801660c <_puts_r+0x1c>
 8016606:	4628      	mov	r0, r5
 8016608:	f001 f84a 	bl	80176a0 <__sinit>
 801660c:	4b23      	ldr	r3, [pc, #140]	; (801669c <_puts_r+0xac>)
 801660e:	429c      	cmp	r4, r3
 8016610:	d117      	bne.n	8016642 <_puts_r+0x52>
 8016612:	686c      	ldr	r4, [r5, #4]
 8016614:	89a3      	ldrh	r3, [r4, #12]
 8016616:	071b      	lsls	r3, r3, #28
 8016618:	d51d      	bpl.n	8016656 <_puts_r+0x66>
 801661a:	6923      	ldr	r3, [r4, #16]
 801661c:	b1db      	cbz	r3, 8016656 <_puts_r+0x66>
 801661e:	3e01      	subs	r6, #1
 8016620:	68a3      	ldr	r3, [r4, #8]
 8016622:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016626:	3b01      	subs	r3, #1
 8016628:	60a3      	str	r3, [r4, #8]
 801662a:	b9e9      	cbnz	r1, 8016668 <_puts_r+0x78>
 801662c:	2b00      	cmp	r3, #0
 801662e:	da2e      	bge.n	801668e <_puts_r+0x9e>
 8016630:	4622      	mov	r2, r4
 8016632:	210a      	movs	r1, #10
 8016634:	4628      	mov	r0, r5
 8016636:	f000 f83f 	bl	80166b8 <__swbuf_r>
 801663a:	3001      	adds	r0, #1
 801663c:	d011      	beq.n	8016662 <_puts_r+0x72>
 801663e:	200a      	movs	r0, #10
 8016640:	e011      	b.n	8016666 <_puts_r+0x76>
 8016642:	4b17      	ldr	r3, [pc, #92]	; (80166a0 <_puts_r+0xb0>)
 8016644:	429c      	cmp	r4, r3
 8016646:	d101      	bne.n	801664c <_puts_r+0x5c>
 8016648:	68ac      	ldr	r4, [r5, #8]
 801664a:	e7e3      	b.n	8016614 <_puts_r+0x24>
 801664c:	4b15      	ldr	r3, [pc, #84]	; (80166a4 <_puts_r+0xb4>)
 801664e:	429c      	cmp	r4, r3
 8016650:	bf08      	it	eq
 8016652:	68ec      	ldreq	r4, [r5, #12]
 8016654:	e7de      	b.n	8016614 <_puts_r+0x24>
 8016656:	4621      	mov	r1, r4
 8016658:	4628      	mov	r0, r5
 801665a:	f000 f87f 	bl	801675c <__swsetup_r>
 801665e:	2800      	cmp	r0, #0
 8016660:	d0dd      	beq.n	801661e <_puts_r+0x2e>
 8016662:	f04f 30ff 	mov.w	r0, #4294967295
 8016666:	bd70      	pop	{r4, r5, r6, pc}
 8016668:	2b00      	cmp	r3, #0
 801666a:	da04      	bge.n	8016676 <_puts_r+0x86>
 801666c:	69a2      	ldr	r2, [r4, #24]
 801666e:	429a      	cmp	r2, r3
 8016670:	dc06      	bgt.n	8016680 <_puts_r+0x90>
 8016672:	290a      	cmp	r1, #10
 8016674:	d004      	beq.n	8016680 <_puts_r+0x90>
 8016676:	6823      	ldr	r3, [r4, #0]
 8016678:	1c5a      	adds	r2, r3, #1
 801667a:	6022      	str	r2, [r4, #0]
 801667c:	7019      	strb	r1, [r3, #0]
 801667e:	e7cf      	b.n	8016620 <_puts_r+0x30>
 8016680:	4622      	mov	r2, r4
 8016682:	4628      	mov	r0, r5
 8016684:	f000 f818 	bl	80166b8 <__swbuf_r>
 8016688:	3001      	adds	r0, #1
 801668a:	d1c9      	bne.n	8016620 <_puts_r+0x30>
 801668c:	e7e9      	b.n	8016662 <_puts_r+0x72>
 801668e:	6823      	ldr	r3, [r4, #0]
 8016690:	200a      	movs	r0, #10
 8016692:	1c5a      	adds	r2, r3, #1
 8016694:	6022      	str	r2, [r4, #0]
 8016696:	7018      	strb	r0, [r3, #0]
 8016698:	e7e5      	b.n	8016666 <_puts_r+0x76>
 801669a:	bf00      	nop
 801669c:	0801864c 	.word	0x0801864c
 80166a0:	0801866c 	.word	0x0801866c
 80166a4:	0801862c 	.word	0x0801862c

080166a8 <puts>:
 80166a8:	4b02      	ldr	r3, [pc, #8]	; (80166b4 <puts+0xc>)
 80166aa:	4601      	mov	r1, r0
 80166ac:	6818      	ldr	r0, [r3, #0]
 80166ae:	f7ff bf9f 	b.w	80165f0 <_puts_r>
 80166b2:	bf00      	nop
 80166b4:	20000080 	.word	0x20000080

080166b8 <__swbuf_r>:
 80166b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166ba:	460e      	mov	r6, r1
 80166bc:	4614      	mov	r4, r2
 80166be:	4605      	mov	r5, r0
 80166c0:	b118      	cbz	r0, 80166ca <__swbuf_r+0x12>
 80166c2:	6983      	ldr	r3, [r0, #24]
 80166c4:	b90b      	cbnz	r3, 80166ca <__swbuf_r+0x12>
 80166c6:	f000 ffeb 	bl	80176a0 <__sinit>
 80166ca:	4b21      	ldr	r3, [pc, #132]	; (8016750 <__swbuf_r+0x98>)
 80166cc:	429c      	cmp	r4, r3
 80166ce:	d12a      	bne.n	8016726 <__swbuf_r+0x6e>
 80166d0:	686c      	ldr	r4, [r5, #4]
 80166d2:	69a3      	ldr	r3, [r4, #24]
 80166d4:	60a3      	str	r3, [r4, #8]
 80166d6:	89a3      	ldrh	r3, [r4, #12]
 80166d8:	071a      	lsls	r2, r3, #28
 80166da:	d52e      	bpl.n	801673a <__swbuf_r+0x82>
 80166dc:	6923      	ldr	r3, [r4, #16]
 80166de:	b363      	cbz	r3, 801673a <__swbuf_r+0x82>
 80166e0:	6923      	ldr	r3, [r4, #16]
 80166e2:	6820      	ldr	r0, [r4, #0]
 80166e4:	1ac0      	subs	r0, r0, r3
 80166e6:	6963      	ldr	r3, [r4, #20]
 80166e8:	b2f6      	uxtb	r6, r6
 80166ea:	4283      	cmp	r3, r0
 80166ec:	4637      	mov	r7, r6
 80166ee:	dc04      	bgt.n	80166fa <__swbuf_r+0x42>
 80166f0:	4621      	mov	r1, r4
 80166f2:	4628      	mov	r0, r5
 80166f4:	f000 ff6a 	bl	80175cc <_fflush_r>
 80166f8:	bb28      	cbnz	r0, 8016746 <__swbuf_r+0x8e>
 80166fa:	68a3      	ldr	r3, [r4, #8]
 80166fc:	3b01      	subs	r3, #1
 80166fe:	60a3      	str	r3, [r4, #8]
 8016700:	6823      	ldr	r3, [r4, #0]
 8016702:	1c5a      	adds	r2, r3, #1
 8016704:	6022      	str	r2, [r4, #0]
 8016706:	701e      	strb	r6, [r3, #0]
 8016708:	6963      	ldr	r3, [r4, #20]
 801670a:	3001      	adds	r0, #1
 801670c:	4283      	cmp	r3, r0
 801670e:	d004      	beq.n	801671a <__swbuf_r+0x62>
 8016710:	89a3      	ldrh	r3, [r4, #12]
 8016712:	07db      	lsls	r3, r3, #31
 8016714:	d519      	bpl.n	801674a <__swbuf_r+0x92>
 8016716:	2e0a      	cmp	r6, #10
 8016718:	d117      	bne.n	801674a <__swbuf_r+0x92>
 801671a:	4621      	mov	r1, r4
 801671c:	4628      	mov	r0, r5
 801671e:	f000 ff55 	bl	80175cc <_fflush_r>
 8016722:	b190      	cbz	r0, 801674a <__swbuf_r+0x92>
 8016724:	e00f      	b.n	8016746 <__swbuf_r+0x8e>
 8016726:	4b0b      	ldr	r3, [pc, #44]	; (8016754 <__swbuf_r+0x9c>)
 8016728:	429c      	cmp	r4, r3
 801672a:	d101      	bne.n	8016730 <__swbuf_r+0x78>
 801672c:	68ac      	ldr	r4, [r5, #8]
 801672e:	e7d0      	b.n	80166d2 <__swbuf_r+0x1a>
 8016730:	4b09      	ldr	r3, [pc, #36]	; (8016758 <__swbuf_r+0xa0>)
 8016732:	429c      	cmp	r4, r3
 8016734:	bf08      	it	eq
 8016736:	68ec      	ldreq	r4, [r5, #12]
 8016738:	e7cb      	b.n	80166d2 <__swbuf_r+0x1a>
 801673a:	4621      	mov	r1, r4
 801673c:	4628      	mov	r0, r5
 801673e:	f000 f80d 	bl	801675c <__swsetup_r>
 8016742:	2800      	cmp	r0, #0
 8016744:	d0cc      	beq.n	80166e0 <__swbuf_r+0x28>
 8016746:	f04f 37ff 	mov.w	r7, #4294967295
 801674a:	4638      	mov	r0, r7
 801674c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801674e:	bf00      	nop
 8016750:	0801864c 	.word	0x0801864c
 8016754:	0801866c 	.word	0x0801866c
 8016758:	0801862c 	.word	0x0801862c

0801675c <__swsetup_r>:
 801675c:	4b32      	ldr	r3, [pc, #200]	; (8016828 <__swsetup_r+0xcc>)
 801675e:	b570      	push	{r4, r5, r6, lr}
 8016760:	681d      	ldr	r5, [r3, #0]
 8016762:	4606      	mov	r6, r0
 8016764:	460c      	mov	r4, r1
 8016766:	b125      	cbz	r5, 8016772 <__swsetup_r+0x16>
 8016768:	69ab      	ldr	r3, [r5, #24]
 801676a:	b913      	cbnz	r3, 8016772 <__swsetup_r+0x16>
 801676c:	4628      	mov	r0, r5
 801676e:	f000 ff97 	bl	80176a0 <__sinit>
 8016772:	4b2e      	ldr	r3, [pc, #184]	; (801682c <__swsetup_r+0xd0>)
 8016774:	429c      	cmp	r4, r3
 8016776:	d10f      	bne.n	8016798 <__swsetup_r+0x3c>
 8016778:	686c      	ldr	r4, [r5, #4]
 801677a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801677e:	b29a      	uxth	r2, r3
 8016780:	0715      	lsls	r5, r2, #28
 8016782:	d42c      	bmi.n	80167de <__swsetup_r+0x82>
 8016784:	06d0      	lsls	r0, r2, #27
 8016786:	d411      	bmi.n	80167ac <__swsetup_r+0x50>
 8016788:	2209      	movs	r2, #9
 801678a:	6032      	str	r2, [r6, #0]
 801678c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016790:	81a3      	strh	r3, [r4, #12]
 8016792:	f04f 30ff 	mov.w	r0, #4294967295
 8016796:	e03e      	b.n	8016816 <__swsetup_r+0xba>
 8016798:	4b25      	ldr	r3, [pc, #148]	; (8016830 <__swsetup_r+0xd4>)
 801679a:	429c      	cmp	r4, r3
 801679c:	d101      	bne.n	80167a2 <__swsetup_r+0x46>
 801679e:	68ac      	ldr	r4, [r5, #8]
 80167a0:	e7eb      	b.n	801677a <__swsetup_r+0x1e>
 80167a2:	4b24      	ldr	r3, [pc, #144]	; (8016834 <__swsetup_r+0xd8>)
 80167a4:	429c      	cmp	r4, r3
 80167a6:	bf08      	it	eq
 80167a8:	68ec      	ldreq	r4, [r5, #12]
 80167aa:	e7e6      	b.n	801677a <__swsetup_r+0x1e>
 80167ac:	0751      	lsls	r1, r2, #29
 80167ae:	d512      	bpl.n	80167d6 <__swsetup_r+0x7a>
 80167b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167b2:	b141      	cbz	r1, 80167c6 <__swsetup_r+0x6a>
 80167b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80167b8:	4299      	cmp	r1, r3
 80167ba:	d002      	beq.n	80167c2 <__swsetup_r+0x66>
 80167bc:	4630      	mov	r0, r6
 80167be:	f001 fb5d 	bl	8017e7c <_free_r>
 80167c2:	2300      	movs	r3, #0
 80167c4:	6363      	str	r3, [r4, #52]	; 0x34
 80167c6:	89a3      	ldrh	r3, [r4, #12]
 80167c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80167cc:	81a3      	strh	r3, [r4, #12]
 80167ce:	2300      	movs	r3, #0
 80167d0:	6063      	str	r3, [r4, #4]
 80167d2:	6923      	ldr	r3, [r4, #16]
 80167d4:	6023      	str	r3, [r4, #0]
 80167d6:	89a3      	ldrh	r3, [r4, #12]
 80167d8:	f043 0308 	orr.w	r3, r3, #8
 80167dc:	81a3      	strh	r3, [r4, #12]
 80167de:	6923      	ldr	r3, [r4, #16]
 80167e0:	b94b      	cbnz	r3, 80167f6 <__swsetup_r+0x9a>
 80167e2:	89a3      	ldrh	r3, [r4, #12]
 80167e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80167e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80167ec:	d003      	beq.n	80167f6 <__swsetup_r+0x9a>
 80167ee:	4621      	mov	r1, r4
 80167f0:	4630      	mov	r0, r6
 80167f2:	f001 f811 	bl	8017818 <__smakebuf_r>
 80167f6:	89a2      	ldrh	r2, [r4, #12]
 80167f8:	f012 0301 	ands.w	r3, r2, #1
 80167fc:	d00c      	beq.n	8016818 <__swsetup_r+0xbc>
 80167fe:	2300      	movs	r3, #0
 8016800:	60a3      	str	r3, [r4, #8]
 8016802:	6963      	ldr	r3, [r4, #20]
 8016804:	425b      	negs	r3, r3
 8016806:	61a3      	str	r3, [r4, #24]
 8016808:	6923      	ldr	r3, [r4, #16]
 801680a:	b953      	cbnz	r3, 8016822 <__swsetup_r+0xc6>
 801680c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016810:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016814:	d1ba      	bne.n	801678c <__swsetup_r+0x30>
 8016816:	bd70      	pop	{r4, r5, r6, pc}
 8016818:	0792      	lsls	r2, r2, #30
 801681a:	bf58      	it	pl
 801681c:	6963      	ldrpl	r3, [r4, #20]
 801681e:	60a3      	str	r3, [r4, #8]
 8016820:	e7f2      	b.n	8016808 <__swsetup_r+0xac>
 8016822:	2000      	movs	r0, #0
 8016824:	e7f7      	b.n	8016816 <__swsetup_r+0xba>
 8016826:	bf00      	nop
 8016828:	20000080 	.word	0x20000080
 801682c:	0801864c 	.word	0x0801864c
 8016830:	0801866c 	.word	0x0801866c
 8016834:	0801862c 	.word	0x0801862c

08016838 <quorem>:
 8016838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801683c:	6903      	ldr	r3, [r0, #16]
 801683e:	690c      	ldr	r4, [r1, #16]
 8016840:	42a3      	cmp	r3, r4
 8016842:	4680      	mov	r8, r0
 8016844:	f2c0 8082 	blt.w	801694c <quorem+0x114>
 8016848:	3c01      	subs	r4, #1
 801684a:	f101 0714 	add.w	r7, r1, #20
 801684e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016852:	f100 0614 	add.w	r6, r0, #20
 8016856:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801685a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801685e:	eb06 030c 	add.w	r3, r6, ip
 8016862:	3501      	adds	r5, #1
 8016864:	eb07 090c 	add.w	r9, r7, ip
 8016868:	9301      	str	r3, [sp, #4]
 801686a:	fbb0 f5f5 	udiv	r5, r0, r5
 801686e:	b395      	cbz	r5, 80168d6 <quorem+0x9e>
 8016870:	f04f 0a00 	mov.w	sl, #0
 8016874:	4638      	mov	r0, r7
 8016876:	46b6      	mov	lr, r6
 8016878:	46d3      	mov	fp, sl
 801687a:	f850 2b04 	ldr.w	r2, [r0], #4
 801687e:	b293      	uxth	r3, r2
 8016880:	fb05 a303 	mla	r3, r5, r3, sl
 8016884:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016888:	b29b      	uxth	r3, r3
 801688a:	ebab 0303 	sub.w	r3, fp, r3
 801688e:	0c12      	lsrs	r2, r2, #16
 8016890:	f8de b000 	ldr.w	fp, [lr]
 8016894:	fb05 a202 	mla	r2, r5, r2, sl
 8016898:	fa13 f38b 	uxtah	r3, r3, fp
 801689c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80168a0:	fa1f fb82 	uxth.w	fp, r2
 80168a4:	f8de 2000 	ldr.w	r2, [lr]
 80168a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80168ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80168b0:	b29b      	uxth	r3, r3
 80168b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80168b6:	4581      	cmp	r9, r0
 80168b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80168bc:	f84e 3b04 	str.w	r3, [lr], #4
 80168c0:	d2db      	bcs.n	801687a <quorem+0x42>
 80168c2:	f856 300c 	ldr.w	r3, [r6, ip]
 80168c6:	b933      	cbnz	r3, 80168d6 <quorem+0x9e>
 80168c8:	9b01      	ldr	r3, [sp, #4]
 80168ca:	3b04      	subs	r3, #4
 80168cc:	429e      	cmp	r6, r3
 80168ce:	461a      	mov	r2, r3
 80168d0:	d330      	bcc.n	8016934 <quorem+0xfc>
 80168d2:	f8c8 4010 	str.w	r4, [r8, #16]
 80168d6:	4640      	mov	r0, r8
 80168d8:	f001 f9fc 	bl	8017cd4 <__mcmp>
 80168dc:	2800      	cmp	r0, #0
 80168de:	db25      	blt.n	801692c <quorem+0xf4>
 80168e0:	3501      	adds	r5, #1
 80168e2:	4630      	mov	r0, r6
 80168e4:	f04f 0c00 	mov.w	ip, #0
 80168e8:	f857 2b04 	ldr.w	r2, [r7], #4
 80168ec:	f8d0 e000 	ldr.w	lr, [r0]
 80168f0:	b293      	uxth	r3, r2
 80168f2:	ebac 0303 	sub.w	r3, ip, r3
 80168f6:	0c12      	lsrs	r2, r2, #16
 80168f8:	fa13 f38e 	uxtah	r3, r3, lr
 80168fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016900:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016904:	b29b      	uxth	r3, r3
 8016906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801690a:	45b9      	cmp	r9, r7
 801690c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016910:	f840 3b04 	str.w	r3, [r0], #4
 8016914:	d2e8      	bcs.n	80168e8 <quorem+0xb0>
 8016916:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801691a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801691e:	b92a      	cbnz	r2, 801692c <quorem+0xf4>
 8016920:	3b04      	subs	r3, #4
 8016922:	429e      	cmp	r6, r3
 8016924:	461a      	mov	r2, r3
 8016926:	d30b      	bcc.n	8016940 <quorem+0x108>
 8016928:	f8c8 4010 	str.w	r4, [r8, #16]
 801692c:	4628      	mov	r0, r5
 801692e:	b003      	add	sp, #12
 8016930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016934:	6812      	ldr	r2, [r2, #0]
 8016936:	3b04      	subs	r3, #4
 8016938:	2a00      	cmp	r2, #0
 801693a:	d1ca      	bne.n	80168d2 <quorem+0x9a>
 801693c:	3c01      	subs	r4, #1
 801693e:	e7c5      	b.n	80168cc <quorem+0x94>
 8016940:	6812      	ldr	r2, [r2, #0]
 8016942:	3b04      	subs	r3, #4
 8016944:	2a00      	cmp	r2, #0
 8016946:	d1ef      	bne.n	8016928 <quorem+0xf0>
 8016948:	3c01      	subs	r4, #1
 801694a:	e7ea      	b.n	8016922 <quorem+0xea>
 801694c:	2000      	movs	r0, #0
 801694e:	e7ee      	b.n	801692e <quorem+0xf6>

08016950 <_dtoa_r>:
 8016950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016954:	ec57 6b10 	vmov	r6, r7, d0
 8016958:	b097      	sub	sp, #92	; 0x5c
 801695a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801695c:	9106      	str	r1, [sp, #24]
 801695e:	4604      	mov	r4, r0
 8016960:	920b      	str	r2, [sp, #44]	; 0x2c
 8016962:	9312      	str	r3, [sp, #72]	; 0x48
 8016964:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016968:	e9cd 6700 	strd	r6, r7, [sp]
 801696c:	b93d      	cbnz	r5, 801697e <_dtoa_r+0x2e>
 801696e:	2010      	movs	r0, #16
 8016970:	f000 ff92 	bl	8017898 <malloc>
 8016974:	6260      	str	r0, [r4, #36]	; 0x24
 8016976:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801697a:	6005      	str	r5, [r0, #0]
 801697c:	60c5      	str	r5, [r0, #12]
 801697e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016980:	6819      	ldr	r1, [r3, #0]
 8016982:	b151      	cbz	r1, 801699a <_dtoa_r+0x4a>
 8016984:	685a      	ldr	r2, [r3, #4]
 8016986:	604a      	str	r2, [r1, #4]
 8016988:	2301      	movs	r3, #1
 801698a:	4093      	lsls	r3, r2
 801698c:	608b      	str	r3, [r1, #8]
 801698e:	4620      	mov	r0, r4
 8016990:	f000 ffbe 	bl	8017910 <_Bfree>
 8016994:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016996:	2200      	movs	r2, #0
 8016998:	601a      	str	r2, [r3, #0]
 801699a:	1e3b      	subs	r3, r7, #0
 801699c:	bfbb      	ittet	lt
 801699e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80169a2:	9301      	strlt	r3, [sp, #4]
 80169a4:	2300      	movge	r3, #0
 80169a6:	2201      	movlt	r2, #1
 80169a8:	bfac      	ite	ge
 80169aa:	f8c8 3000 	strge.w	r3, [r8]
 80169ae:	f8c8 2000 	strlt.w	r2, [r8]
 80169b2:	4baf      	ldr	r3, [pc, #700]	; (8016c70 <_dtoa_r+0x320>)
 80169b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80169b8:	ea33 0308 	bics.w	r3, r3, r8
 80169bc:	d114      	bne.n	80169e8 <_dtoa_r+0x98>
 80169be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80169c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80169c4:	6013      	str	r3, [r2, #0]
 80169c6:	9b00      	ldr	r3, [sp, #0]
 80169c8:	b923      	cbnz	r3, 80169d4 <_dtoa_r+0x84>
 80169ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80169ce:	2800      	cmp	r0, #0
 80169d0:	f000 8542 	beq.w	8017458 <_dtoa_r+0xb08>
 80169d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80169d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8016c84 <_dtoa_r+0x334>
 80169da:	2b00      	cmp	r3, #0
 80169dc:	f000 8544 	beq.w	8017468 <_dtoa_r+0xb18>
 80169e0:	f10b 0303 	add.w	r3, fp, #3
 80169e4:	f000 bd3e 	b.w	8017464 <_dtoa_r+0xb14>
 80169e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80169ec:	2200      	movs	r2, #0
 80169ee:	2300      	movs	r3, #0
 80169f0:	4630      	mov	r0, r6
 80169f2:	4639      	mov	r1, r7
 80169f4:	f7f1 ffa0 	bl	8008938 <__aeabi_dcmpeq>
 80169f8:	4681      	mov	r9, r0
 80169fa:	b168      	cbz	r0, 8016a18 <_dtoa_r+0xc8>
 80169fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80169fe:	2301      	movs	r3, #1
 8016a00:	6013      	str	r3, [r2, #0]
 8016a02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	f000 8524 	beq.w	8017452 <_dtoa_r+0xb02>
 8016a0a:	4b9a      	ldr	r3, [pc, #616]	; (8016c74 <_dtoa_r+0x324>)
 8016a0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016a0e:	f103 3bff 	add.w	fp, r3, #4294967295
 8016a12:	6013      	str	r3, [r2, #0]
 8016a14:	f000 bd28 	b.w	8017468 <_dtoa_r+0xb18>
 8016a18:	aa14      	add	r2, sp, #80	; 0x50
 8016a1a:	a915      	add	r1, sp, #84	; 0x54
 8016a1c:	ec47 6b10 	vmov	d0, r6, r7
 8016a20:	4620      	mov	r0, r4
 8016a22:	f001 f9ce 	bl	8017dc2 <__d2b>
 8016a26:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016a2a:	9004      	str	r0, [sp, #16]
 8016a2c:	2d00      	cmp	r5, #0
 8016a2e:	d07c      	beq.n	8016b2a <_dtoa_r+0x1da>
 8016a30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016a34:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016a38:	46b2      	mov	sl, r6
 8016a3a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016a3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016a42:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016a46:	2200      	movs	r2, #0
 8016a48:	4b8b      	ldr	r3, [pc, #556]	; (8016c78 <_dtoa_r+0x328>)
 8016a4a:	4650      	mov	r0, sl
 8016a4c:	4659      	mov	r1, fp
 8016a4e:	f7f1 fb53 	bl	80080f8 <__aeabi_dsub>
 8016a52:	a381      	add	r3, pc, #516	; (adr r3, 8016c58 <_dtoa_r+0x308>)
 8016a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a58:	f7f1 fd06 	bl	8008468 <__aeabi_dmul>
 8016a5c:	a380      	add	r3, pc, #512	; (adr r3, 8016c60 <_dtoa_r+0x310>)
 8016a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a62:	f7f1 fb4b 	bl	80080fc <__adddf3>
 8016a66:	4606      	mov	r6, r0
 8016a68:	4628      	mov	r0, r5
 8016a6a:	460f      	mov	r7, r1
 8016a6c:	f7f1 fc92 	bl	8008394 <__aeabi_i2d>
 8016a70:	a37d      	add	r3, pc, #500	; (adr r3, 8016c68 <_dtoa_r+0x318>)
 8016a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a76:	f7f1 fcf7 	bl	8008468 <__aeabi_dmul>
 8016a7a:	4602      	mov	r2, r0
 8016a7c:	460b      	mov	r3, r1
 8016a7e:	4630      	mov	r0, r6
 8016a80:	4639      	mov	r1, r7
 8016a82:	f7f1 fb3b 	bl	80080fc <__adddf3>
 8016a86:	4606      	mov	r6, r0
 8016a88:	460f      	mov	r7, r1
 8016a8a:	f7f1 ff9d 	bl	80089c8 <__aeabi_d2iz>
 8016a8e:	2200      	movs	r2, #0
 8016a90:	4682      	mov	sl, r0
 8016a92:	2300      	movs	r3, #0
 8016a94:	4630      	mov	r0, r6
 8016a96:	4639      	mov	r1, r7
 8016a98:	f7f1 ff58 	bl	800894c <__aeabi_dcmplt>
 8016a9c:	b148      	cbz	r0, 8016ab2 <_dtoa_r+0x162>
 8016a9e:	4650      	mov	r0, sl
 8016aa0:	f7f1 fc78 	bl	8008394 <__aeabi_i2d>
 8016aa4:	4632      	mov	r2, r6
 8016aa6:	463b      	mov	r3, r7
 8016aa8:	f7f1 ff46 	bl	8008938 <__aeabi_dcmpeq>
 8016aac:	b908      	cbnz	r0, 8016ab2 <_dtoa_r+0x162>
 8016aae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016ab2:	f1ba 0f16 	cmp.w	sl, #22
 8016ab6:	d859      	bhi.n	8016b6c <_dtoa_r+0x21c>
 8016ab8:	4970      	ldr	r1, [pc, #448]	; (8016c7c <_dtoa_r+0x32c>)
 8016aba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016abe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ac6:	f7f1 ff5f 	bl	8008988 <__aeabi_dcmpgt>
 8016aca:	2800      	cmp	r0, #0
 8016acc:	d050      	beq.n	8016b70 <_dtoa_r+0x220>
 8016ace:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	930f      	str	r3, [sp, #60]	; 0x3c
 8016ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016ad8:	1b5d      	subs	r5, r3, r5
 8016ada:	f1b5 0801 	subs.w	r8, r5, #1
 8016ade:	bf49      	itett	mi
 8016ae0:	f1c5 0301 	rsbmi	r3, r5, #1
 8016ae4:	2300      	movpl	r3, #0
 8016ae6:	9305      	strmi	r3, [sp, #20]
 8016ae8:	f04f 0800 	movmi.w	r8, #0
 8016aec:	bf58      	it	pl
 8016aee:	9305      	strpl	r3, [sp, #20]
 8016af0:	f1ba 0f00 	cmp.w	sl, #0
 8016af4:	db3e      	blt.n	8016b74 <_dtoa_r+0x224>
 8016af6:	2300      	movs	r3, #0
 8016af8:	44d0      	add	r8, sl
 8016afa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016afe:	9307      	str	r3, [sp, #28]
 8016b00:	9b06      	ldr	r3, [sp, #24]
 8016b02:	2b09      	cmp	r3, #9
 8016b04:	f200 8090 	bhi.w	8016c28 <_dtoa_r+0x2d8>
 8016b08:	2b05      	cmp	r3, #5
 8016b0a:	bfc4      	itt	gt
 8016b0c:	3b04      	subgt	r3, #4
 8016b0e:	9306      	strgt	r3, [sp, #24]
 8016b10:	9b06      	ldr	r3, [sp, #24]
 8016b12:	f1a3 0302 	sub.w	r3, r3, #2
 8016b16:	bfcc      	ite	gt
 8016b18:	2500      	movgt	r5, #0
 8016b1a:	2501      	movle	r5, #1
 8016b1c:	2b03      	cmp	r3, #3
 8016b1e:	f200 808f 	bhi.w	8016c40 <_dtoa_r+0x2f0>
 8016b22:	e8df f003 	tbb	[pc, r3]
 8016b26:	7f7d      	.short	0x7f7d
 8016b28:	7131      	.short	0x7131
 8016b2a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016b2e:	441d      	add	r5, r3
 8016b30:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016b34:	2820      	cmp	r0, #32
 8016b36:	dd13      	ble.n	8016b60 <_dtoa_r+0x210>
 8016b38:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016b3c:	9b00      	ldr	r3, [sp, #0]
 8016b3e:	fa08 f800 	lsl.w	r8, r8, r0
 8016b42:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016b46:	fa23 f000 	lsr.w	r0, r3, r0
 8016b4a:	ea48 0000 	orr.w	r0, r8, r0
 8016b4e:	f7f1 fc11 	bl	8008374 <__aeabi_ui2d>
 8016b52:	2301      	movs	r3, #1
 8016b54:	4682      	mov	sl, r0
 8016b56:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016b5a:	3d01      	subs	r5, #1
 8016b5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8016b5e:	e772      	b.n	8016a46 <_dtoa_r+0xf6>
 8016b60:	9b00      	ldr	r3, [sp, #0]
 8016b62:	f1c0 0020 	rsb	r0, r0, #32
 8016b66:	fa03 f000 	lsl.w	r0, r3, r0
 8016b6a:	e7f0      	b.n	8016b4e <_dtoa_r+0x1fe>
 8016b6c:	2301      	movs	r3, #1
 8016b6e:	e7b1      	b.n	8016ad4 <_dtoa_r+0x184>
 8016b70:	900f      	str	r0, [sp, #60]	; 0x3c
 8016b72:	e7b0      	b.n	8016ad6 <_dtoa_r+0x186>
 8016b74:	9b05      	ldr	r3, [sp, #20]
 8016b76:	eba3 030a 	sub.w	r3, r3, sl
 8016b7a:	9305      	str	r3, [sp, #20]
 8016b7c:	f1ca 0300 	rsb	r3, sl, #0
 8016b80:	9307      	str	r3, [sp, #28]
 8016b82:	2300      	movs	r3, #0
 8016b84:	930e      	str	r3, [sp, #56]	; 0x38
 8016b86:	e7bb      	b.n	8016b00 <_dtoa_r+0x1b0>
 8016b88:	2301      	movs	r3, #1
 8016b8a:	930a      	str	r3, [sp, #40]	; 0x28
 8016b8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	dd59      	ble.n	8016c46 <_dtoa_r+0x2f6>
 8016b92:	9302      	str	r3, [sp, #8]
 8016b94:	4699      	mov	r9, r3
 8016b96:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016b98:	2200      	movs	r2, #0
 8016b9a:	6072      	str	r2, [r6, #4]
 8016b9c:	2204      	movs	r2, #4
 8016b9e:	f102 0014 	add.w	r0, r2, #20
 8016ba2:	4298      	cmp	r0, r3
 8016ba4:	6871      	ldr	r1, [r6, #4]
 8016ba6:	d953      	bls.n	8016c50 <_dtoa_r+0x300>
 8016ba8:	4620      	mov	r0, r4
 8016baa:	f000 fe7d 	bl	80178a8 <_Balloc>
 8016bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016bb0:	6030      	str	r0, [r6, #0]
 8016bb2:	f1b9 0f0e 	cmp.w	r9, #14
 8016bb6:	f8d3 b000 	ldr.w	fp, [r3]
 8016bba:	f200 80e6 	bhi.w	8016d8a <_dtoa_r+0x43a>
 8016bbe:	2d00      	cmp	r5, #0
 8016bc0:	f000 80e3 	beq.w	8016d8a <_dtoa_r+0x43a>
 8016bc4:	ed9d 7b00 	vldr	d7, [sp]
 8016bc8:	f1ba 0f00 	cmp.w	sl, #0
 8016bcc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016bd0:	dd74      	ble.n	8016cbc <_dtoa_r+0x36c>
 8016bd2:	4a2a      	ldr	r2, [pc, #168]	; (8016c7c <_dtoa_r+0x32c>)
 8016bd4:	f00a 030f 	and.w	r3, sl, #15
 8016bd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016bdc:	ed93 7b00 	vldr	d7, [r3]
 8016be0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016be4:	06f0      	lsls	r0, r6, #27
 8016be6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016bea:	d565      	bpl.n	8016cb8 <_dtoa_r+0x368>
 8016bec:	4b24      	ldr	r3, [pc, #144]	; (8016c80 <_dtoa_r+0x330>)
 8016bee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016bf2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016bf6:	f7f1 fd61 	bl	80086bc <__aeabi_ddiv>
 8016bfa:	e9cd 0100 	strd	r0, r1, [sp]
 8016bfe:	f006 060f 	and.w	r6, r6, #15
 8016c02:	2503      	movs	r5, #3
 8016c04:	4f1e      	ldr	r7, [pc, #120]	; (8016c80 <_dtoa_r+0x330>)
 8016c06:	e04c      	b.n	8016ca2 <_dtoa_r+0x352>
 8016c08:	2301      	movs	r3, #1
 8016c0a:	930a      	str	r3, [sp, #40]	; 0x28
 8016c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c0e:	4453      	add	r3, sl
 8016c10:	f103 0901 	add.w	r9, r3, #1
 8016c14:	9302      	str	r3, [sp, #8]
 8016c16:	464b      	mov	r3, r9
 8016c18:	2b01      	cmp	r3, #1
 8016c1a:	bfb8      	it	lt
 8016c1c:	2301      	movlt	r3, #1
 8016c1e:	e7ba      	b.n	8016b96 <_dtoa_r+0x246>
 8016c20:	2300      	movs	r3, #0
 8016c22:	e7b2      	b.n	8016b8a <_dtoa_r+0x23a>
 8016c24:	2300      	movs	r3, #0
 8016c26:	e7f0      	b.n	8016c0a <_dtoa_r+0x2ba>
 8016c28:	2501      	movs	r5, #1
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	9306      	str	r3, [sp, #24]
 8016c2e:	950a      	str	r5, [sp, #40]	; 0x28
 8016c30:	f04f 33ff 	mov.w	r3, #4294967295
 8016c34:	9302      	str	r3, [sp, #8]
 8016c36:	4699      	mov	r9, r3
 8016c38:	2200      	movs	r2, #0
 8016c3a:	2312      	movs	r3, #18
 8016c3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8016c3e:	e7aa      	b.n	8016b96 <_dtoa_r+0x246>
 8016c40:	2301      	movs	r3, #1
 8016c42:	930a      	str	r3, [sp, #40]	; 0x28
 8016c44:	e7f4      	b.n	8016c30 <_dtoa_r+0x2e0>
 8016c46:	2301      	movs	r3, #1
 8016c48:	9302      	str	r3, [sp, #8]
 8016c4a:	4699      	mov	r9, r3
 8016c4c:	461a      	mov	r2, r3
 8016c4e:	e7f5      	b.n	8016c3c <_dtoa_r+0x2ec>
 8016c50:	3101      	adds	r1, #1
 8016c52:	6071      	str	r1, [r6, #4]
 8016c54:	0052      	lsls	r2, r2, #1
 8016c56:	e7a2      	b.n	8016b9e <_dtoa_r+0x24e>
 8016c58:	636f4361 	.word	0x636f4361
 8016c5c:	3fd287a7 	.word	0x3fd287a7
 8016c60:	8b60c8b3 	.word	0x8b60c8b3
 8016c64:	3fc68a28 	.word	0x3fc68a28
 8016c68:	509f79fb 	.word	0x509f79fb
 8016c6c:	3fd34413 	.word	0x3fd34413
 8016c70:	7ff00000 	.word	0x7ff00000
 8016c74:	080185f9 	.word	0x080185f9
 8016c78:	3ff80000 	.word	0x3ff80000
 8016c7c:	080186b8 	.word	0x080186b8
 8016c80:	08018690 	.word	0x08018690
 8016c84:	08018625 	.word	0x08018625
 8016c88:	07f1      	lsls	r1, r6, #31
 8016c8a:	d508      	bpl.n	8016c9e <_dtoa_r+0x34e>
 8016c8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016c94:	f7f1 fbe8 	bl	8008468 <__aeabi_dmul>
 8016c98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016c9c:	3501      	adds	r5, #1
 8016c9e:	1076      	asrs	r6, r6, #1
 8016ca0:	3708      	adds	r7, #8
 8016ca2:	2e00      	cmp	r6, #0
 8016ca4:	d1f0      	bne.n	8016c88 <_dtoa_r+0x338>
 8016ca6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016caa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016cae:	f7f1 fd05 	bl	80086bc <__aeabi_ddiv>
 8016cb2:	e9cd 0100 	strd	r0, r1, [sp]
 8016cb6:	e01a      	b.n	8016cee <_dtoa_r+0x39e>
 8016cb8:	2502      	movs	r5, #2
 8016cba:	e7a3      	b.n	8016c04 <_dtoa_r+0x2b4>
 8016cbc:	f000 80a0 	beq.w	8016e00 <_dtoa_r+0x4b0>
 8016cc0:	f1ca 0600 	rsb	r6, sl, #0
 8016cc4:	4b9f      	ldr	r3, [pc, #636]	; (8016f44 <_dtoa_r+0x5f4>)
 8016cc6:	4fa0      	ldr	r7, [pc, #640]	; (8016f48 <_dtoa_r+0x5f8>)
 8016cc8:	f006 020f 	and.w	r2, r6, #15
 8016ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016cd8:	f7f1 fbc6 	bl	8008468 <__aeabi_dmul>
 8016cdc:	e9cd 0100 	strd	r0, r1, [sp]
 8016ce0:	1136      	asrs	r6, r6, #4
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	2502      	movs	r5, #2
 8016ce6:	2e00      	cmp	r6, #0
 8016ce8:	d17f      	bne.n	8016dea <_dtoa_r+0x49a>
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d1e1      	bne.n	8016cb2 <_dtoa_r+0x362>
 8016cee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	f000 8087 	beq.w	8016e04 <_dtoa_r+0x4b4>
 8016cf6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	4b93      	ldr	r3, [pc, #588]	; (8016f4c <_dtoa_r+0x5fc>)
 8016cfe:	4630      	mov	r0, r6
 8016d00:	4639      	mov	r1, r7
 8016d02:	f7f1 fe23 	bl	800894c <__aeabi_dcmplt>
 8016d06:	2800      	cmp	r0, #0
 8016d08:	d07c      	beq.n	8016e04 <_dtoa_r+0x4b4>
 8016d0a:	f1b9 0f00 	cmp.w	r9, #0
 8016d0e:	d079      	beq.n	8016e04 <_dtoa_r+0x4b4>
 8016d10:	9b02      	ldr	r3, [sp, #8]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	dd35      	ble.n	8016d82 <_dtoa_r+0x432>
 8016d16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016d1a:	9308      	str	r3, [sp, #32]
 8016d1c:	4639      	mov	r1, r7
 8016d1e:	2200      	movs	r2, #0
 8016d20:	4b8b      	ldr	r3, [pc, #556]	; (8016f50 <_dtoa_r+0x600>)
 8016d22:	4630      	mov	r0, r6
 8016d24:	f7f1 fba0 	bl	8008468 <__aeabi_dmul>
 8016d28:	e9cd 0100 	strd	r0, r1, [sp]
 8016d2c:	9f02      	ldr	r7, [sp, #8]
 8016d2e:	3501      	adds	r5, #1
 8016d30:	4628      	mov	r0, r5
 8016d32:	f7f1 fb2f 	bl	8008394 <__aeabi_i2d>
 8016d36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016d3a:	f7f1 fb95 	bl	8008468 <__aeabi_dmul>
 8016d3e:	2200      	movs	r2, #0
 8016d40:	4b84      	ldr	r3, [pc, #528]	; (8016f54 <_dtoa_r+0x604>)
 8016d42:	f7f1 f9db 	bl	80080fc <__adddf3>
 8016d46:	4605      	mov	r5, r0
 8016d48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8016d4c:	2f00      	cmp	r7, #0
 8016d4e:	d15d      	bne.n	8016e0c <_dtoa_r+0x4bc>
 8016d50:	2200      	movs	r2, #0
 8016d52:	4b81      	ldr	r3, [pc, #516]	; (8016f58 <_dtoa_r+0x608>)
 8016d54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016d58:	f7f1 f9ce 	bl	80080f8 <__aeabi_dsub>
 8016d5c:	462a      	mov	r2, r5
 8016d5e:	4633      	mov	r3, r6
 8016d60:	e9cd 0100 	strd	r0, r1, [sp]
 8016d64:	f7f1 fe10 	bl	8008988 <__aeabi_dcmpgt>
 8016d68:	2800      	cmp	r0, #0
 8016d6a:	f040 8288 	bne.w	801727e <_dtoa_r+0x92e>
 8016d6e:	462a      	mov	r2, r5
 8016d70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016d74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016d78:	f7f1 fde8 	bl	800894c <__aeabi_dcmplt>
 8016d7c:	2800      	cmp	r0, #0
 8016d7e:	f040 827c 	bne.w	801727a <_dtoa_r+0x92a>
 8016d82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016d86:	e9cd 2300 	strd	r2, r3, [sp]
 8016d8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	f2c0 8150 	blt.w	8017032 <_dtoa_r+0x6e2>
 8016d92:	f1ba 0f0e 	cmp.w	sl, #14
 8016d96:	f300 814c 	bgt.w	8017032 <_dtoa_r+0x6e2>
 8016d9a:	4b6a      	ldr	r3, [pc, #424]	; (8016f44 <_dtoa_r+0x5f4>)
 8016d9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016da0:	ed93 7b00 	vldr	d7, [r3]
 8016da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016dac:	f280 80d8 	bge.w	8016f60 <_dtoa_r+0x610>
 8016db0:	f1b9 0f00 	cmp.w	r9, #0
 8016db4:	f300 80d4 	bgt.w	8016f60 <_dtoa_r+0x610>
 8016db8:	f040 825e 	bne.w	8017278 <_dtoa_r+0x928>
 8016dbc:	2200      	movs	r2, #0
 8016dbe:	4b66      	ldr	r3, [pc, #408]	; (8016f58 <_dtoa_r+0x608>)
 8016dc0:	ec51 0b17 	vmov	r0, r1, d7
 8016dc4:	f7f1 fb50 	bl	8008468 <__aeabi_dmul>
 8016dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016dcc:	f7f1 fdd2 	bl	8008974 <__aeabi_dcmpge>
 8016dd0:	464f      	mov	r7, r9
 8016dd2:	464e      	mov	r6, r9
 8016dd4:	2800      	cmp	r0, #0
 8016dd6:	f040 8234 	bne.w	8017242 <_dtoa_r+0x8f2>
 8016dda:	2331      	movs	r3, #49	; 0x31
 8016ddc:	f10b 0501 	add.w	r5, fp, #1
 8016de0:	f88b 3000 	strb.w	r3, [fp]
 8016de4:	f10a 0a01 	add.w	sl, sl, #1
 8016de8:	e22f      	b.n	801724a <_dtoa_r+0x8fa>
 8016dea:	07f2      	lsls	r2, r6, #31
 8016dec:	d505      	bpl.n	8016dfa <_dtoa_r+0x4aa>
 8016dee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016df2:	f7f1 fb39 	bl	8008468 <__aeabi_dmul>
 8016df6:	3501      	adds	r5, #1
 8016df8:	2301      	movs	r3, #1
 8016dfa:	1076      	asrs	r6, r6, #1
 8016dfc:	3708      	adds	r7, #8
 8016dfe:	e772      	b.n	8016ce6 <_dtoa_r+0x396>
 8016e00:	2502      	movs	r5, #2
 8016e02:	e774      	b.n	8016cee <_dtoa_r+0x39e>
 8016e04:	f8cd a020 	str.w	sl, [sp, #32]
 8016e08:	464f      	mov	r7, r9
 8016e0a:	e791      	b.n	8016d30 <_dtoa_r+0x3e0>
 8016e0c:	4b4d      	ldr	r3, [pc, #308]	; (8016f44 <_dtoa_r+0x5f4>)
 8016e0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016e12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d047      	beq.n	8016eac <_dtoa_r+0x55c>
 8016e1c:	4602      	mov	r2, r0
 8016e1e:	460b      	mov	r3, r1
 8016e20:	2000      	movs	r0, #0
 8016e22:	494e      	ldr	r1, [pc, #312]	; (8016f5c <_dtoa_r+0x60c>)
 8016e24:	f7f1 fc4a 	bl	80086bc <__aeabi_ddiv>
 8016e28:	462a      	mov	r2, r5
 8016e2a:	4633      	mov	r3, r6
 8016e2c:	f7f1 f964 	bl	80080f8 <__aeabi_dsub>
 8016e30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016e34:	465d      	mov	r5, fp
 8016e36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016e3a:	f7f1 fdc5 	bl	80089c8 <__aeabi_d2iz>
 8016e3e:	4606      	mov	r6, r0
 8016e40:	f7f1 faa8 	bl	8008394 <__aeabi_i2d>
 8016e44:	4602      	mov	r2, r0
 8016e46:	460b      	mov	r3, r1
 8016e48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016e4c:	f7f1 f954 	bl	80080f8 <__aeabi_dsub>
 8016e50:	3630      	adds	r6, #48	; 0x30
 8016e52:	f805 6b01 	strb.w	r6, [r5], #1
 8016e56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016e5a:	e9cd 0100 	strd	r0, r1, [sp]
 8016e5e:	f7f1 fd75 	bl	800894c <__aeabi_dcmplt>
 8016e62:	2800      	cmp	r0, #0
 8016e64:	d163      	bne.n	8016f2e <_dtoa_r+0x5de>
 8016e66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e6a:	2000      	movs	r0, #0
 8016e6c:	4937      	ldr	r1, [pc, #220]	; (8016f4c <_dtoa_r+0x5fc>)
 8016e6e:	f7f1 f943 	bl	80080f8 <__aeabi_dsub>
 8016e72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016e76:	f7f1 fd69 	bl	800894c <__aeabi_dcmplt>
 8016e7a:	2800      	cmp	r0, #0
 8016e7c:	f040 80b7 	bne.w	8016fee <_dtoa_r+0x69e>
 8016e80:	eba5 030b 	sub.w	r3, r5, fp
 8016e84:	429f      	cmp	r7, r3
 8016e86:	f77f af7c 	ble.w	8016d82 <_dtoa_r+0x432>
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	4b30      	ldr	r3, [pc, #192]	; (8016f50 <_dtoa_r+0x600>)
 8016e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016e92:	f7f1 fae9 	bl	8008468 <__aeabi_dmul>
 8016e96:	2200      	movs	r2, #0
 8016e98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016e9c:	4b2c      	ldr	r3, [pc, #176]	; (8016f50 <_dtoa_r+0x600>)
 8016e9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ea2:	f7f1 fae1 	bl	8008468 <__aeabi_dmul>
 8016ea6:	e9cd 0100 	strd	r0, r1, [sp]
 8016eaa:	e7c4      	b.n	8016e36 <_dtoa_r+0x4e6>
 8016eac:	462a      	mov	r2, r5
 8016eae:	4633      	mov	r3, r6
 8016eb0:	f7f1 fada 	bl	8008468 <__aeabi_dmul>
 8016eb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016eb8:	eb0b 0507 	add.w	r5, fp, r7
 8016ebc:	465e      	mov	r6, fp
 8016ebe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ec2:	f7f1 fd81 	bl	80089c8 <__aeabi_d2iz>
 8016ec6:	4607      	mov	r7, r0
 8016ec8:	f7f1 fa64 	bl	8008394 <__aeabi_i2d>
 8016ecc:	3730      	adds	r7, #48	; 0x30
 8016ece:	4602      	mov	r2, r0
 8016ed0:	460b      	mov	r3, r1
 8016ed2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ed6:	f7f1 f90f 	bl	80080f8 <__aeabi_dsub>
 8016eda:	f806 7b01 	strb.w	r7, [r6], #1
 8016ede:	42ae      	cmp	r6, r5
 8016ee0:	e9cd 0100 	strd	r0, r1, [sp]
 8016ee4:	f04f 0200 	mov.w	r2, #0
 8016ee8:	d126      	bne.n	8016f38 <_dtoa_r+0x5e8>
 8016eea:	4b1c      	ldr	r3, [pc, #112]	; (8016f5c <_dtoa_r+0x60c>)
 8016eec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016ef0:	f7f1 f904 	bl	80080fc <__adddf3>
 8016ef4:	4602      	mov	r2, r0
 8016ef6:	460b      	mov	r3, r1
 8016ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016efc:	f7f1 fd44 	bl	8008988 <__aeabi_dcmpgt>
 8016f00:	2800      	cmp	r0, #0
 8016f02:	d174      	bne.n	8016fee <_dtoa_r+0x69e>
 8016f04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016f08:	2000      	movs	r0, #0
 8016f0a:	4914      	ldr	r1, [pc, #80]	; (8016f5c <_dtoa_r+0x60c>)
 8016f0c:	f7f1 f8f4 	bl	80080f8 <__aeabi_dsub>
 8016f10:	4602      	mov	r2, r0
 8016f12:	460b      	mov	r3, r1
 8016f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f18:	f7f1 fd18 	bl	800894c <__aeabi_dcmplt>
 8016f1c:	2800      	cmp	r0, #0
 8016f1e:	f43f af30 	beq.w	8016d82 <_dtoa_r+0x432>
 8016f22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016f26:	2b30      	cmp	r3, #48	; 0x30
 8016f28:	f105 32ff 	add.w	r2, r5, #4294967295
 8016f2c:	d002      	beq.n	8016f34 <_dtoa_r+0x5e4>
 8016f2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016f32:	e04a      	b.n	8016fca <_dtoa_r+0x67a>
 8016f34:	4615      	mov	r5, r2
 8016f36:	e7f4      	b.n	8016f22 <_dtoa_r+0x5d2>
 8016f38:	4b05      	ldr	r3, [pc, #20]	; (8016f50 <_dtoa_r+0x600>)
 8016f3a:	f7f1 fa95 	bl	8008468 <__aeabi_dmul>
 8016f3e:	e9cd 0100 	strd	r0, r1, [sp]
 8016f42:	e7bc      	b.n	8016ebe <_dtoa_r+0x56e>
 8016f44:	080186b8 	.word	0x080186b8
 8016f48:	08018690 	.word	0x08018690
 8016f4c:	3ff00000 	.word	0x3ff00000
 8016f50:	40240000 	.word	0x40240000
 8016f54:	401c0000 	.word	0x401c0000
 8016f58:	40140000 	.word	0x40140000
 8016f5c:	3fe00000 	.word	0x3fe00000
 8016f60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016f64:	465d      	mov	r5, fp
 8016f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016f6a:	4630      	mov	r0, r6
 8016f6c:	4639      	mov	r1, r7
 8016f6e:	f7f1 fba5 	bl	80086bc <__aeabi_ddiv>
 8016f72:	f7f1 fd29 	bl	80089c8 <__aeabi_d2iz>
 8016f76:	4680      	mov	r8, r0
 8016f78:	f7f1 fa0c 	bl	8008394 <__aeabi_i2d>
 8016f7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016f80:	f7f1 fa72 	bl	8008468 <__aeabi_dmul>
 8016f84:	4602      	mov	r2, r0
 8016f86:	460b      	mov	r3, r1
 8016f88:	4630      	mov	r0, r6
 8016f8a:	4639      	mov	r1, r7
 8016f8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016f90:	f7f1 f8b2 	bl	80080f8 <__aeabi_dsub>
 8016f94:	f805 6b01 	strb.w	r6, [r5], #1
 8016f98:	eba5 060b 	sub.w	r6, r5, fp
 8016f9c:	45b1      	cmp	r9, r6
 8016f9e:	4602      	mov	r2, r0
 8016fa0:	460b      	mov	r3, r1
 8016fa2:	d139      	bne.n	8017018 <_dtoa_r+0x6c8>
 8016fa4:	f7f1 f8aa 	bl	80080fc <__adddf3>
 8016fa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016fac:	4606      	mov	r6, r0
 8016fae:	460f      	mov	r7, r1
 8016fb0:	f7f1 fcea 	bl	8008988 <__aeabi_dcmpgt>
 8016fb4:	b9c8      	cbnz	r0, 8016fea <_dtoa_r+0x69a>
 8016fb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016fba:	4630      	mov	r0, r6
 8016fbc:	4639      	mov	r1, r7
 8016fbe:	f7f1 fcbb 	bl	8008938 <__aeabi_dcmpeq>
 8016fc2:	b110      	cbz	r0, 8016fca <_dtoa_r+0x67a>
 8016fc4:	f018 0f01 	tst.w	r8, #1
 8016fc8:	d10f      	bne.n	8016fea <_dtoa_r+0x69a>
 8016fca:	9904      	ldr	r1, [sp, #16]
 8016fcc:	4620      	mov	r0, r4
 8016fce:	f000 fc9f 	bl	8017910 <_Bfree>
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016fd6:	702b      	strb	r3, [r5, #0]
 8016fd8:	f10a 0301 	add.w	r3, sl, #1
 8016fdc:	6013      	str	r3, [r2, #0]
 8016fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	f000 8241 	beq.w	8017468 <_dtoa_r+0xb18>
 8016fe6:	601d      	str	r5, [r3, #0]
 8016fe8:	e23e      	b.n	8017468 <_dtoa_r+0xb18>
 8016fea:	f8cd a020 	str.w	sl, [sp, #32]
 8016fee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016ff2:	2a39      	cmp	r2, #57	; 0x39
 8016ff4:	f105 33ff 	add.w	r3, r5, #4294967295
 8016ff8:	d108      	bne.n	801700c <_dtoa_r+0x6bc>
 8016ffa:	459b      	cmp	fp, r3
 8016ffc:	d10a      	bne.n	8017014 <_dtoa_r+0x6c4>
 8016ffe:	9b08      	ldr	r3, [sp, #32]
 8017000:	3301      	adds	r3, #1
 8017002:	9308      	str	r3, [sp, #32]
 8017004:	2330      	movs	r3, #48	; 0x30
 8017006:	f88b 3000 	strb.w	r3, [fp]
 801700a:	465b      	mov	r3, fp
 801700c:	781a      	ldrb	r2, [r3, #0]
 801700e:	3201      	adds	r2, #1
 8017010:	701a      	strb	r2, [r3, #0]
 8017012:	e78c      	b.n	8016f2e <_dtoa_r+0x5de>
 8017014:	461d      	mov	r5, r3
 8017016:	e7ea      	b.n	8016fee <_dtoa_r+0x69e>
 8017018:	2200      	movs	r2, #0
 801701a:	4b9b      	ldr	r3, [pc, #620]	; (8017288 <_dtoa_r+0x938>)
 801701c:	f7f1 fa24 	bl	8008468 <__aeabi_dmul>
 8017020:	2200      	movs	r2, #0
 8017022:	2300      	movs	r3, #0
 8017024:	4606      	mov	r6, r0
 8017026:	460f      	mov	r7, r1
 8017028:	f7f1 fc86 	bl	8008938 <__aeabi_dcmpeq>
 801702c:	2800      	cmp	r0, #0
 801702e:	d09a      	beq.n	8016f66 <_dtoa_r+0x616>
 8017030:	e7cb      	b.n	8016fca <_dtoa_r+0x67a>
 8017032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017034:	2a00      	cmp	r2, #0
 8017036:	f000 808b 	beq.w	8017150 <_dtoa_r+0x800>
 801703a:	9a06      	ldr	r2, [sp, #24]
 801703c:	2a01      	cmp	r2, #1
 801703e:	dc6e      	bgt.n	801711e <_dtoa_r+0x7ce>
 8017040:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017042:	2a00      	cmp	r2, #0
 8017044:	d067      	beq.n	8017116 <_dtoa_r+0x7c6>
 8017046:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801704a:	9f07      	ldr	r7, [sp, #28]
 801704c:	9d05      	ldr	r5, [sp, #20]
 801704e:	9a05      	ldr	r2, [sp, #20]
 8017050:	2101      	movs	r1, #1
 8017052:	441a      	add	r2, r3
 8017054:	4620      	mov	r0, r4
 8017056:	9205      	str	r2, [sp, #20]
 8017058:	4498      	add	r8, r3
 801705a:	f000 fcf9 	bl	8017a50 <__i2b>
 801705e:	4606      	mov	r6, r0
 8017060:	2d00      	cmp	r5, #0
 8017062:	dd0c      	ble.n	801707e <_dtoa_r+0x72e>
 8017064:	f1b8 0f00 	cmp.w	r8, #0
 8017068:	dd09      	ble.n	801707e <_dtoa_r+0x72e>
 801706a:	4545      	cmp	r5, r8
 801706c:	9a05      	ldr	r2, [sp, #20]
 801706e:	462b      	mov	r3, r5
 8017070:	bfa8      	it	ge
 8017072:	4643      	movge	r3, r8
 8017074:	1ad2      	subs	r2, r2, r3
 8017076:	9205      	str	r2, [sp, #20]
 8017078:	1aed      	subs	r5, r5, r3
 801707a:	eba8 0803 	sub.w	r8, r8, r3
 801707e:	9b07      	ldr	r3, [sp, #28]
 8017080:	b1eb      	cbz	r3, 80170be <_dtoa_r+0x76e>
 8017082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017084:	2b00      	cmp	r3, #0
 8017086:	d067      	beq.n	8017158 <_dtoa_r+0x808>
 8017088:	b18f      	cbz	r7, 80170ae <_dtoa_r+0x75e>
 801708a:	4631      	mov	r1, r6
 801708c:	463a      	mov	r2, r7
 801708e:	4620      	mov	r0, r4
 8017090:	f000 fd7e 	bl	8017b90 <__pow5mult>
 8017094:	9a04      	ldr	r2, [sp, #16]
 8017096:	4601      	mov	r1, r0
 8017098:	4606      	mov	r6, r0
 801709a:	4620      	mov	r0, r4
 801709c:	f000 fce1 	bl	8017a62 <__multiply>
 80170a0:	9904      	ldr	r1, [sp, #16]
 80170a2:	9008      	str	r0, [sp, #32]
 80170a4:	4620      	mov	r0, r4
 80170a6:	f000 fc33 	bl	8017910 <_Bfree>
 80170aa:	9b08      	ldr	r3, [sp, #32]
 80170ac:	9304      	str	r3, [sp, #16]
 80170ae:	9b07      	ldr	r3, [sp, #28]
 80170b0:	1bda      	subs	r2, r3, r7
 80170b2:	d004      	beq.n	80170be <_dtoa_r+0x76e>
 80170b4:	9904      	ldr	r1, [sp, #16]
 80170b6:	4620      	mov	r0, r4
 80170b8:	f000 fd6a 	bl	8017b90 <__pow5mult>
 80170bc:	9004      	str	r0, [sp, #16]
 80170be:	2101      	movs	r1, #1
 80170c0:	4620      	mov	r0, r4
 80170c2:	f000 fcc5 	bl	8017a50 <__i2b>
 80170c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170c8:	4607      	mov	r7, r0
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	f000 81d0 	beq.w	8017470 <_dtoa_r+0xb20>
 80170d0:	461a      	mov	r2, r3
 80170d2:	4601      	mov	r1, r0
 80170d4:	4620      	mov	r0, r4
 80170d6:	f000 fd5b 	bl	8017b90 <__pow5mult>
 80170da:	9b06      	ldr	r3, [sp, #24]
 80170dc:	2b01      	cmp	r3, #1
 80170de:	4607      	mov	r7, r0
 80170e0:	dc40      	bgt.n	8017164 <_dtoa_r+0x814>
 80170e2:	9b00      	ldr	r3, [sp, #0]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d139      	bne.n	801715c <_dtoa_r+0x80c>
 80170e8:	9b01      	ldr	r3, [sp, #4]
 80170ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d136      	bne.n	8017160 <_dtoa_r+0x810>
 80170f2:	9b01      	ldr	r3, [sp, #4]
 80170f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80170f8:	0d1b      	lsrs	r3, r3, #20
 80170fa:	051b      	lsls	r3, r3, #20
 80170fc:	b12b      	cbz	r3, 801710a <_dtoa_r+0x7ba>
 80170fe:	9b05      	ldr	r3, [sp, #20]
 8017100:	3301      	adds	r3, #1
 8017102:	9305      	str	r3, [sp, #20]
 8017104:	f108 0801 	add.w	r8, r8, #1
 8017108:	2301      	movs	r3, #1
 801710a:	9307      	str	r3, [sp, #28]
 801710c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801710e:	2b00      	cmp	r3, #0
 8017110:	d12a      	bne.n	8017168 <_dtoa_r+0x818>
 8017112:	2001      	movs	r0, #1
 8017114:	e030      	b.n	8017178 <_dtoa_r+0x828>
 8017116:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017118:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801711c:	e795      	b.n	801704a <_dtoa_r+0x6fa>
 801711e:	9b07      	ldr	r3, [sp, #28]
 8017120:	f109 37ff 	add.w	r7, r9, #4294967295
 8017124:	42bb      	cmp	r3, r7
 8017126:	bfbf      	itttt	lt
 8017128:	9b07      	ldrlt	r3, [sp, #28]
 801712a:	9707      	strlt	r7, [sp, #28]
 801712c:	1afa      	sublt	r2, r7, r3
 801712e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017130:	bfbb      	ittet	lt
 8017132:	189b      	addlt	r3, r3, r2
 8017134:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017136:	1bdf      	subge	r7, r3, r7
 8017138:	2700      	movlt	r7, #0
 801713a:	f1b9 0f00 	cmp.w	r9, #0
 801713e:	bfb5      	itete	lt
 8017140:	9b05      	ldrlt	r3, [sp, #20]
 8017142:	9d05      	ldrge	r5, [sp, #20]
 8017144:	eba3 0509 	sublt.w	r5, r3, r9
 8017148:	464b      	movge	r3, r9
 801714a:	bfb8      	it	lt
 801714c:	2300      	movlt	r3, #0
 801714e:	e77e      	b.n	801704e <_dtoa_r+0x6fe>
 8017150:	9f07      	ldr	r7, [sp, #28]
 8017152:	9d05      	ldr	r5, [sp, #20]
 8017154:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017156:	e783      	b.n	8017060 <_dtoa_r+0x710>
 8017158:	9a07      	ldr	r2, [sp, #28]
 801715a:	e7ab      	b.n	80170b4 <_dtoa_r+0x764>
 801715c:	2300      	movs	r3, #0
 801715e:	e7d4      	b.n	801710a <_dtoa_r+0x7ba>
 8017160:	9b00      	ldr	r3, [sp, #0]
 8017162:	e7d2      	b.n	801710a <_dtoa_r+0x7ba>
 8017164:	2300      	movs	r3, #0
 8017166:	9307      	str	r3, [sp, #28]
 8017168:	693b      	ldr	r3, [r7, #16]
 801716a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801716e:	6918      	ldr	r0, [r3, #16]
 8017170:	f000 fc20 	bl	80179b4 <__hi0bits>
 8017174:	f1c0 0020 	rsb	r0, r0, #32
 8017178:	4440      	add	r0, r8
 801717a:	f010 001f 	ands.w	r0, r0, #31
 801717e:	d047      	beq.n	8017210 <_dtoa_r+0x8c0>
 8017180:	f1c0 0320 	rsb	r3, r0, #32
 8017184:	2b04      	cmp	r3, #4
 8017186:	dd3b      	ble.n	8017200 <_dtoa_r+0x8b0>
 8017188:	9b05      	ldr	r3, [sp, #20]
 801718a:	f1c0 001c 	rsb	r0, r0, #28
 801718e:	4403      	add	r3, r0
 8017190:	9305      	str	r3, [sp, #20]
 8017192:	4405      	add	r5, r0
 8017194:	4480      	add	r8, r0
 8017196:	9b05      	ldr	r3, [sp, #20]
 8017198:	2b00      	cmp	r3, #0
 801719a:	dd05      	ble.n	80171a8 <_dtoa_r+0x858>
 801719c:	461a      	mov	r2, r3
 801719e:	9904      	ldr	r1, [sp, #16]
 80171a0:	4620      	mov	r0, r4
 80171a2:	f000 fd43 	bl	8017c2c <__lshift>
 80171a6:	9004      	str	r0, [sp, #16]
 80171a8:	f1b8 0f00 	cmp.w	r8, #0
 80171ac:	dd05      	ble.n	80171ba <_dtoa_r+0x86a>
 80171ae:	4639      	mov	r1, r7
 80171b0:	4642      	mov	r2, r8
 80171b2:	4620      	mov	r0, r4
 80171b4:	f000 fd3a 	bl	8017c2c <__lshift>
 80171b8:	4607      	mov	r7, r0
 80171ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171bc:	b353      	cbz	r3, 8017214 <_dtoa_r+0x8c4>
 80171be:	4639      	mov	r1, r7
 80171c0:	9804      	ldr	r0, [sp, #16]
 80171c2:	f000 fd87 	bl	8017cd4 <__mcmp>
 80171c6:	2800      	cmp	r0, #0
 80171c8:	da24      	bge.n	8017214 <_dtoa_r+0x8c4>
 80171ca:	2300      	movs	r3, #0
 80171cc:	220a      	movs	r2, #10
 80171ce:	9904      	ldr	r1, [sp, #16]
 80171d0:	4620      	mov	r0, r4
 80171d2:	f000 fbb4 	bl	801793e <__multadd>
 80171d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171d8:	9004      	str	r0, [sp, #16]
 80171da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80171de:	2b00      	cmp	r3, #0
 80171e0:	f000 814d 	beq.w	801747e <_dtoa_r+0xb2e>
 80171e4:	2300      	movs	r3, #0
 80171e6:	4631      	mov	r1, r6
 80171e8:	220a      	movs	r2, #10
 80171ea:	4620      	mov	r0, r4
 80171ec:	f000 fba7 	bl	801793e <__multadd>
 80171f0:	9b02      	ldr	r3, [sp, #8]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	4606      	mov	r6, r0
 80171f6:	dc4f      	bgt.n	8017298 <_dtoa_r+0x948>
 80171f8:	9b06      	ldr	r3, [sp, #24]
 80171fa:	2b02      	cmp	r3, #2
 80171fc:	dd4c      	ble.n	8017298 <_dtoa_r+0x948>
 80171fe:	e011      	b.n	8017224 <_dtoa_r+0x8d4>
 8017200:	d0c9      	beq.n	8017196 <_dtoa_r+0x846>
 8017202:	9a05      	ldr	r2, [sp, #20]
 8017204:	331c      	adds	r3, #28
 8017206:	441a      	add	r2, r3
 8017208:	9205      	str	r2, [sp, #20]
 801720a:	441d      	add	r5, r3
 801720c:	4498      	add	r8, r3
 801720e:	e7c2      	b.n	8017196 <_dtoa_r+0x846>
 8017210:	4603      	mov	r3, r0
 8017212:	e7f6      	b.n	8017202 <_dtoa_r+0x8b2>
 8017214:	f1b9 0f00 	cmp.w	r9, #0
 8017218:	dc38      	bgt.n	801728c <_dtoa_r+0x93c>
 801721a:	9b06      	ldr	r3, [sp, #24]
 801721c:	2b02      	cmp	r3, #2
 801721e:	dd35      	ble.n	801728c <_dtoa_r+0x93c>
 8017220:	f8cd 9008 	str.w	r9, [sp, #8]
 8017224:	9b02      	ldr	r3, [sp, #8]
 8017226:	b963      	cbnz	r3, 8017242 <_dtoa_r+0x8f2>
 8017228:	4639      	mov	r1, r7
 801722a:	2205      	movs	r2, #5
 801722c:	4620      	mov	r0, r4
 801722e:	f000 fb86 	bl	801793e <__multadd>
 8017232:	4601      	mov	r1, r0
 8017234:	4607      	mov	r7, r0
 8017236:	9804      	ldr	r0, [sp, #16]
 8017238:	f000 fd4c 	bl	8017cd4 <__mcmp>
 801723c:	2800      	cmp	r0, #0
 801723e:	f73f adcc 	bgt.w	8016dda <_dtoa_r+0x48a>
 8017242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017244:	465d      	mov	r5, fp
 8017246:	ea6f 0a03 	mvn.w	sl, r3
 801724a:	f04f 0900 	mov.w	r9, #0
 801724e:	4639      	mov	r1, r7
 8017250:	4620      	mov	r0, r4
 8017252:	f000 fb5d 	bl	8017910 <_Bfree>
 8017256:	2e00      	cmp	r6, #0
 8017258:	f43f aeb7 	beq.w	8016fca <_dtoa_r+0x67a>
 801725c:	f1b9 0f00 	cmp.w	r9, #0
 8017260:	d005      	beq.n	801726e <_dtoa_r+0x91e>
 8017262:	45b1      	cmp	r9, r6
 8017264:	d003      	beq.n	801726e <_dtoa_r+0x91e>
 8017266:	4649      	mov	r1, r9
 8017268:	4620      	mov	r0, r4
 801726a:	f000 fb51 	bl	8017910 <_Bfree>
 801726e:	4631      	mov	r1, r6
 8017270:	4620      	mov	r0, r4
 8017272:	f000 fb4d 	bl	8017910 <_Bfree>
 8017276:	e6a8      	b.n	8016fca <_dtoa_r+0x67a>
 8017278:	2700      	movs	r7, #0
 801727a:	463e      	mov	r6, r7
 801727c:	e7e1      	b.n	8017242 <_dtoa_r+0x8f2>
 801727e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017282:	463e      	mov	r6, r7
 8017284:	e5a9      	b.n	8016dda <_dtoa_r+0x48a>
 8017286:	bf00      	nop
 8017288:	40240000 	.word	0x40240000
 801728c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801728e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017292:	2b00      	cmp	r3, #0
 8017294:	f000 80fa 	beq.w	801748c <_dtoa_r+0xb3c>
 8017298:	2d00      	cmp	r5, #0
 801729a:	dd05      	ble.n	80172a8 <_dtoa_r+0x958>
 801729c:	4631      	mov	r1, r6
 801729e:	462a      	mov	r2, r5
 80172a0:	4620      	mov	r0, r4
 80172a2:	f000 fcc3 	bl	8017c2c <__lshift>
 80172a6:	4606      	mov	r6, r0
 80172a8:	9b07      	ldr	r3, [sp, #28]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d04c      	beq.n	8017348 <_dtoa_r+0x9f8>
 80172ae:	6871      	ldr	r1, [r6, #4]
 80172b0:	4620      	mov	r0, r4
 80172b2:	f000 faf9 	bl	80178a8 <_Balloc>
 80172b6:	6932      	ldr	r2, [r6, #16]
 80172b8:	3202      	adds	r2, #2
 80172ba:	4605      	mov	r5, r0
 80172bc:	0092      	lsls	r2, r2, #2
 80172be:	f106 010c 	add.w	r1, r6, #12
 80172c2:	300c      	adds	r0, #12
 80172c4:	f7fe fd0c 	bl	8015ce0 <memcpy>
 80172c8:	2201      	movs	r2, #1
 80172ca:	4629      	mov	r1, r5
 80172cc:	4620      	mov	r0, r4
 80172ce:	f000 fcad 	bl	8017c2c <__lshift>
 80172d2:	9b00      	ldr	r3, [sp, #0]
 80172d4:	f8cd b014 	str.w	fp, [sp, #20]
 80172d8:	f003 0301 	and.w	r3, r3, #1
 80172dc:	46b1      	mov	r9, r6
 80172de:	9307      	str	r3, [sp, #28]
 80172e0:	4606      	mov	r6, r0
 80172e2:	4639      	mov	r1, r7
 80172e4:	9804      	ldr	r0, [sp, #16]
 80172e6:	f7ff faa7 	bl	8016838 <quorem>
 80172ea:	4649      	mov	r1, r9
 80172ec:	4605      	mov	r5, r0
 80172ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80172f2:	9804      	ldr	r0, [sp, #16]
 80172f4:	f000 fcee 	bl	8017cd4 <__mcmp>
 80172f8:	4632      	mov	r2, r6
 80172fa:	9000      	str	r0, [sp, #0]
 80172fc:	4639      	mov	r1, r7
 80172fe:	4620      	mov	r0, r4
 8017300:	f000 fd02 	bl	8017d08 <__mdiff>
 8017304:	68c3      	ldr	r3, [r0, #12]
 8017306:	4602      	mov	r2, r0
 8017308:	bb03      	cbnz	r3, 801734c <_dtoa_r+0x9fc>
 801730a:	4601      	mov	r1, r0
 801730c:	9008      	str	r0, [sp, #32]
 801730e:	9804      	ldr	r0, [sp, #16]
 8017310:	f000 fce0 	bl	8017cd4 <__mcmp>
 8017314:	9a08      	ldr	r2, [sp, #32]
 8017316:	4603      	mov	r3, r0
 8017318:	4611      	mov	r1, r2
 801731a:	4620      	mov	r0, r4
 801731c:	9308      	str	r3, [sp, #32]
 801731e:	f000 faf7 	bl	8017910 <_Bfree>
 8017322:	9b08      	ldr	r3, [sp, #32]
 8017324:	b9a3      	cbnz	r3, 8017350 <_dtoa_r+0xa00>
 8017326:	9a06      	ldr	r2, [sp, #24]
 8017328:	b992      	cbnz	r2, 8017350 <_dtoa_r+0xa00>
 801732a:	9a07      	ldr	r2, [sp, #28]
 801732c:	b982      	cbnz	r2, 8017350 <_dtoa_r+0xa00>
 801732e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017332:	d029      	beq.n	8017388 <_dtoa_r+0xa38>
 8017334:	9b00      	ldr	r3, [sp, #0]
 8017336:	2b00      	cmp	r3, #0
 8017338:	dd01      	ble.n	801733e <_dtoa_r+0x9ee>
 801733a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801733e:	9b05      	ldr	r3, [sp, #20]
 8017340:	1c5d      	adds	r5, r3, #1
 8017342:	f883 8000 	strb.w	r8, [r3]
 8017346:	e782      	b.n	801724e <_dtoa_r+0x8fe>
 8017348:	4630      	mov	r0, r6
 801734a:	e7c2      	b.n	80172d2 <_dtoa_r+0x982>
 801734c:	2301      	movs	r3, #1
 801734e:	e7e3      	b.n	8017318 <_dtoa_r+0x9c8>
 8017350:	9a00      	ldr	r2, [sp, #0]
 8017352:	2a00      	cmp	r2, #0
 8017354:	db04      	blt.n	8017360 <_dtoa_r+0xa10>
 8017356:	d125      	bne.n	80173a4 <_dtoa_r+0xa54>
 8017358:	9a06      	ldr	r2, [sp, #24]
 801735a:	bb1a      	cbnz	r2, 80173a4 <_dtoa_r+0xa54>
 801735c:	9a07      	ldr	r2, [sp, #28]
 801735e:	bb0a      	cbnz	r2, 80173a4 <_dtoa_r+0xa54>
 8017360:	2b00      	cmp	r3, #0
 8017362:	ddec      	ble.n	801733e <_dtoa_r+0x9ee>
 8017364:	2201      	movs	r2, #1
 8017366:	9904      	ldr	r1, [sp, #16]
 8017368:	4620      	mov	r0, r4
 801736a:	f000 fc5f 	bl	8017c2c <__lshift>
 801736e:	4639      	mov	r1, r7
 8017370:	9004      	str	r0, [sp, #16]
 8017372:	f000 fcaf 	bl	8017cd4 <__mcmp>
 8017376:	2800      	cmp	r0, #0
 8017378:	dc03      	bgt.n	8017382 <_dtoa_r+0xa32>
 801737a:	d1e0      	bne.n	801733e <_dtoa_r+0x9ee>
 801737c:	f018 0f01 	tst.w	r8, #1
 8017380:	d0dd      	beq.n	801733e <_dtoa_r+0x9ee>
 8017382:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017386:	d1d8      	bne.n	801733a <_dtoa_r+0x9ea>
 8017388:	9b05      	ldr	r3, [sp, #20]
 801738a:	9a05      	ldr	r2, [sp, #20]
 801738c:	1c5d      	adds	r5, r3, #1
 801738e:	2339      	movs	r3, #57	; 0x39
 8017390:	7013      	strb	r3, [r2, #0]
 8017392:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017396:	2b39      	cmp	r3, #57	; 0x39
 8017398:	f105 32ff 	add.w	r2, r5, #4294967295
 801739c:	d04f      	beq.n	801743e <_dtoa_r+0xaee>
 801739e:	3301      	adds	r3, #1
 80173a0:	7013      	strb	r3, [r2, #0]
 80173a2:	e754      	b.n	801724e <_dtoa_r+0x8fe>
 80173a4:	9a05      	ldr	r2, [sp, #20]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	f102 0501 	add.w	r5, r2, #1
 80173ac:	dd06      	ble.n	80173bc <_dtoa_r+0xa6c>
 80173ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80173b2:	d0e9      	beq.n	8017388 <_dtoa_r+0xa38>
 80173b4:	f108 0801 	add.w	r8, r8, #1
 80173b8:	9b05      	ldr	r3, [sp, #20]
 80173ba:	e7c2      	b.n	8017342 <_dtoa_r+0x9f2>
 80173bc:	9a02      	ldr	r2, [sp, #8]
 80173be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80173c2:	eba5 030b 	sub.w	r3, r5, fp
 80173c6:	4293      	cmp	r3, r2
 80173c8:	d021      	beq.n	801740e <_dtoa_r+0xabe>
 80173ca:	2300      	movs	r3, #0
 80173cc:	220a      	movs	r2, #10
 80173ce:	9904      	ldr	r1, [sp, #16]
 80173d0:	4620      	mov	r0, r4
 80173d2:	f000 fab4 	bl	801793e <__multadd>
 80173d6:	45b1      	cmp	r9, r6
 80173d8:	9004      	str	r0, [sp, #16]
 80173da:	f04f 0300 	mov.w	r3, #0
 80173de:	f04f 020a 	mov.w	r2, #10
 80173e2:	4649      	mov	r1, r9
 80173e4:	4620      	mov	r0, r4
 80173e6:	d105      	bne.n	80173f4 <_dtoa_r+0xaa4>
 80173e8:	f000 faa9 	bl	801793e <__multadd>
 80173ec:	4681      	mov	r9, r0
 80173ee:	4606      	mov	r6, r0
 80173f0:	9505      	str	r5, [sp, #20]
 80173f2:	e776      	b.n	80172e2 <_dtoa_r+0x992>
 80173f4:	f000 faa3 	bl	801793e <__multadd>
 80173f8:	4631      	mov	r1, r6
 80173fa:	4681      	mov	r9, r0
 80173fc:	2300      	movs	r3, #0
 80173fe:	220a      	movs	r2, #10
 8017400:	4620      	mov	r0, r4
 8017402:	f000 fa9c 	bl	801793e <__multadd>
 8017406:	4606      	mov	r6, r0
 8017408:	e7f2      	b.n	80173f0 <_dtoa_r+0xaa0>
 801740a:	f04f 0900 	mov.w	r9, #0
 801740e:	2201      	movs	r2, #1
 8017410:	9904      	ldr	r1, [sp, #16]
 8017412:	4620      	mov	r0, r4
 8017414:	f000 fc0a 	bl	8017c2c <__lshift>
 8017418:	4639      	mov	r1, r7
 801741a:	9004      	str	r0, [sp, #16]
 801741c:	f000 fc5a 	bl	8017cd4 <__mcmp>
 8017420:	2800      	cmp	r0, #0
 8017422:	dcb6      	bgt.n	8017392 <_dtoa_r+0xa42>
 8017424:	d102      	bne.n	801742c <_dtoa_r+0xadc>
 8017426:	f018 0f01 	tst.w	r8, #1
 801742a:	d1b2      	bne.n	8017392 <_dtoa_r+0xa42>
 801742c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017430:	2b30      	cmp	r3, #48	; 0x30
 8017432:	f105 32ff 	add.w	r2, r5, #4294967295
 8017436:	f47f af0a 	bne.w	801724e <_dtoa_r+0x8fe>
 801743a:	4615      	mov	r5, r2
 801743c:	e7f6      	b.n	801742c <_dtoa_r+0xadc>
 801743e:	4593      	cmp	fp, r2
 8017440:	d105      	bne.n	801744e <_dtoa_r+0xafe>
 8017442:	2331      	movs	r3, #49	; 0x31
 8017444:	f10a 0a01 	add.w	sl, sl, #1
 8017448:	f88b 3000 	strb.w	r3, [fp]
 801744c:	e6ff      	b.n	801724e <_dtoa_r+0x8fe>
 801744e:	4615      	mov	r5, r2
 8017450:	e79f      	b.n	8017392 <_dtoa_r+0xa42>
 8017452:	f8df b064 	ldr.w	fp, [pc, #100]	; 80174b8 <_dtoa_r+0xb68>
 8017456:	e007      	b.n	8017468 <_dtoa_r+0xb18>
 8017458:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801745a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80174bc <_dtoa_r+0xb6c>
 801745e:	b11b      	cbz	r3, 8017468 <_dtoa_r+0xb18>
 8017460:	f10b 0308 	add.w	r3, fp, #8
 8017464:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017466:	6013      	str	r3, [r2, #0]
 8017468:	4658      	mov	r0, fp
 801746a:	b017      	add	sp, #92	; 0x5c
 801746c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017470:	9b06      	ldr	r3, [sp, #24]
 8017472:	2b01      	cmp	r3, #1
 8017474:	f77f ae35 	ble.w	80170e2 <_dtoa_r+0x792>
 8017478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801747a:	9307      	str	r3, [sp, #28]
 801747c:	e649      	b.n	8017112 <_dtoa_r+0x7c2>
 801747e:	9b02      	ldr	r3, [sp, #8]
 8017480:	2b00      	cmp	r3, #0
 8017482:	dc03      	bgt.n	801748c <_dtoa_r+0xb3c>
 8017484:	9b06      	ldr	r3, [sp, #24]
 8017486:	2b02      	cmp	r3, #2
 8017488:	f73f aecc 	bgt.w	8017224 <_dtoa_r+0x8d4>
 801748c:	465d      	mov	r5, fp
 801748e:	4639      	mov	r1, r7
 8017490:	9804      	ldr	r0, [sp, #16]
 8017492:	f7ff f9d1 	bl	8016838 <quorem>
 8017496:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801749a:	f805 8b01 	strb.w	r8, [r5], #1
 801749e:	9a02      	ldr	r2, [sp, #8]
 80174a0:	eba5 030b 	sub.w	r3, r5, fp
 80174a4:	429a      	cmp	r2, r3
 80174a6:	ddb0      	ble.n	801740a <_dtoa_r+0xaba>
 80174a8:	2300      	movs	r3, #0
 80174aa:	220a      	movs	r2, #10
 80174ac:	9904      	ldr	r1, [sp, #16]
 80174ae:	4620      	mov	r0, r4
 80174b0:	f000 fa45 	bl	801793e <__multadd>
 80174b4:	9004      	str	r0, [sp, #16]
 80174b6:	e7ea      	b.n	801748e <_dtoa_r+0xb3e>
 80174b8:	080185f8 	.word	0x080185f8
 80174bc:	0801861c 	.word	0x0801861c

080174c0 <__sflush_r>:
 80174c0:	898a      	ldrh	r2, [r1, #12]
 80174c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174c6:	4605      	mov	r5, r0
 80174c8:	0710      	lsls	r0, r2, #28
 80174ca:	460c      	mov	r4, r1
 80174cc:	d458      	bmi.n	8017580 <__sflush_r+0xc0>
 80174ce:	684b      	ldr	r3, [r1, #4]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	dc05      	bgt.n	80174e0 <__sflush_r+0x20>
 80174d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	dc02      	bgt.n	80174e0 <__sflush_r+0x20>
 80174da:	2000      	movs	r0, #0
 80174dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80174e2:	2e00      	cmp	r6, #0
 80174e4:	d0f9      	beq.n	80174da <__sflush_r+0x1a>
 80174e6:	2300      	movs	r3, #0
 80174e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80174ec:	682f      	ldr	r7, [r5, #0]
 80174ee:	6a21      	ldr	r1, [r4, #32]
 80174f0:	602b      	str	r3, [r5, #0]
 80174f2:	d032      	beq.n	801755a <__sflush_r+0x9a>
 80174f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80174f6:	89a3      	ldrh	r3, [r4, #12]
 80174f8:	075a      	lsls	r2, r3, #29
 80174fa:	d505      	bpl.n	8017508 <__sflush_r+0x48>
 80174fc:	6863      	ldr	r3, [r4, #4]
 80174fe:	1ac0      	subs	r0, r0, r3
 8017500:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017502:	b10b      	cbz	r3, 8017508 <__sflush_r+0x48>
 8017504:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017506:	1ac0      	subs	r0, r0, r3
 8017508:	2300      	movs	r3, #0
 801750a:	4602      	mov	r2, r0
 801750c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801750e:	6a21      	ldr	r1, [r4, #32]
 8017510:	4628      	mov	r0, r5
 8017512:	47b0      	blx	r6
 8017514:	1c43      	adds	r3, r0, #1
 8017516:	89a3      	ldrh	r3, [r4, #12]
 8017518:	d106      	bne.n	8017528 <__sflush_r+0x68>
 801751a:	6829      	ldr	r1, [r5, #0]
 801751c:	291d      	cmp	r1, #29
 801751e:	d848      	bhi.n	80175b2 <__sflush_r+0xf2>
 8017520:	4a29      	ldr	r2, [pc, #164]	; (80175c8 <__sflush_r+0x108>)
 8017522:	40ca      	lsrs	r2, r1
 8017524:	07d6      	lsls	r6, r2, #31
 8017526:	d544      	bpl.n	80175b2 <__sflush_r+0xf2>
 8017528:	2200      	movs	r2, #0
 801752a:	6062      	str	r2, [r4, #4]
 801752c:	04d9      	lsls	r1, r3, #19
 801752e:	6922      	ldr	r2, [r4, #16]
 8017530:	6022      	str	r2, [r4, #0]
 8017532:	d504      	bpl.n	801753e <__sflush_r+0x7e>
 8017534:	1c42      	adds	r2, r0, #1
 8017536:	d101      	bne.n	801753c <__sflush_r+0x7c>
 8017538:	682b      	ldr	r3, [r5, #0]
 801753a:	b903      	cbnz	r3, 801753e <__sflush_r+0x7e>
 801753c:	6560      	str	r0, [r4, #84]	; 0x54
 801753e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017540:	602f      	str	r7, [r5, #0]
 8017542:	2900      	cmp	r1, #0
 8017544:	d0c9      	beq.n	80174da <__sflush_r+0x1a>
 8017546:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801754a:	4299      	cmp	r1, r3
 801754c:	d002      	beq.n	8017554 <__sflush_r+0x94>
 801754e:	4628      	mov	r0, r5
 8017550:	f000 fc94 	bl	8017e7c <_free_r>
 8017554:	2000      	movs	r0, #0
 8017556:	6360      	str	r0, [r4, #52]	; 0x34
 8017558:	e7c0      	b.n	80174dc <__sflush_r+0x1c>
 801755a:	2301      	movs	r3, #1
 801755c:	4628      	mov	r0, r5
 801755e:	47b0      	blx	r6
 8017560:	1c41      	adds	r1, r0, #1
 8017562:	d1c8      	bne.n	80174f6 <__sflush_r+0x36>
 8017564:	682b      	ldr	r3, [r5, #0]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d0c5      	beq.n	80174f6 <__sflush_r+0x36>
 801756a:	2b1d      	cmp	r3, #29
 801756c:	d001      	beq.n	8017572 <__sflush_r+0xb2>
 801756e:	2b16      	cmp	r3, #22
 8017570:	d101      	bne.n	8017576 <__sflush_r+0xb6>
 8017572:	602f      	str	r7, [r5, #0]
 8017574:	e7b1      	b.n	80174da <__sflush_r+0x1a>
 8017576:	89a3      	ldrh	r3, [r4, #12]
 8017578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801757c:	81a3      	strh	r3, [r4, #12]
 801757e:	e7ad      	b.n	80174dc <__sflush_r+0x1c>
 8017580:	690f      	ldr	r7, [r1, #16]
 8017582:	2f00      	cmp	r7, #0
 8017584:	d0a9      	beq.n	80174da <__sflush_r+0x1a>
 8017586:	0793      	lsls	r3, r2, #30
 8017588:	680e      	ldr	r6, [r1, #0]
 801758a:	bf08      	it	eq
 801758c:	694b      	ldreq	r3, [r1, #20]
 801758e:	600f      	str	r7, [r1, #0]
 8017590:	bf18      	it	ne
 8017592:	2300      	movne	r3, #0
 8017594:	eba6 0807 	sub.w	r8, r6, r7
 8017598:	608b      	str	r3, [r1, #8]
 801759a:	f1b8 0f00 	cmp.w	r8, #0
 801759e:	dd9c      	ble.n	80174da <__sflush_r+0x1a>
 80175a0:	4643      	mov	r3, r8
 80175a2:	463a      	mov	r2, r7
 80175a4:	6a21      	ldr	r1, [r4, #32]
 80175a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80175a8:	4628      	mov	r0, r5
 80175aa:	47b0      	blx	r6
 80175ac:	2800      	cmp	r0, #0
 80175ae:	dc06      	bgt.n	80175be <__sflush_r+0xfe>
 80175b0:	89a3      	ldrh	r3, [r4, #12]
 80175b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175b6:	81a3      	strh	r3, [r4, #12]
 80175b8:	f04f 30ff 	mov.w	r0, #4294967295
 80175bc:	e78e      	b.n	80174dc <__sflush_r+0x1c>
 80175be:	4407      	add	r7, r0
 80175c0:	eba8 0800 	sub.w	r8, r8, r0
 80175c4:	e7e9      	b.n	801759a <__sflush_r+0xda>
 80175c6:	bf00      	nop
 80175c8:	20400001 	.word	0x20400001

080175cc <_fflush_r>:
 80175cc:	b538      	push	{r3, r4, r5, lr}
 80175ce:	690b      	ldr	r3, [r1, #16]
 80175d0:	4605      	mov	r5, r0
 80175d2:	460c      	mov	r4, r1
 80175d4:	b1db      	cbz	r3, 801760e <_fflush_r+0x42>
 80175d6:	b118      	cbz	r0, 80175e0 <_fflush_r+0x14>
 80175d8:	6983      	ldr	r3, [r0, #24]
 80175da:	b90b      	cbnz	r3, 80175e0 <_fflush_r+0x14>
 80175dc:	f000 f860 	bl	80176a0 <__sinit>
 80175e0:	4b0c      	ldr	r3, [pc, #48]	; (8017614 <_fflush_r+0x48>)
 80175e2:	429c      	cmp	r4, r3
 80175e4:	d109      	bne.n	80175fa <_fflush_r+0x2e>
 80175e6:	686c      	ldr	r4, [r5, #4]
 80175e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175ec:	b17b      	cbz	r3, 801760e <_fflush_r+0x42>
 80175ee:	4621      	mov	r1, r4
 80175f0:	4628      	mov	r0, r5
 80175f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80175f6:	f7ff bf63 	b.w	80174c0 <__sflush_r>
 80175fa:	4b07      	ldr	r3, [pc, #28]	; (8017618 <_fflush_r+0x4c>)
 80175fc:	429c      	cmp	r4, r3
 80175fe:	d101      	bne.n	8017604 <_fflush_r+0x38>
 8017600:	68ac      	ldr	r4, [r5, #8]
 8017602:	e7f1      	b.n	80175e8 <_fflush_r+0x1c>
 8017604:	4b05      	ldr	r3, [pc, #20]	; (801761c <_fflush_r+0x50>)
 8017606:	429c      	cmp	r4, r3
 8017608:	bf08      	it	eq
 801760a:	68ec      	ldreq	r4, [r5, #12]
 801760c:	e7ec      	b.n	80175e8 <_fflush_r+0x1c>
 801760e:	2000      	movs	r0, #0
 8017610:	bd38      	pop	{r3, r4, r5, pc}
 8017612:	bf00      	nop
 8017614:	0801864c 	.word	0x0801864c
 8017618:	0801866c 	.word	0x0801866c
 801761c:	0801862c 	.word	0x0801862c

08017620 <std>:
 8017620:	2300      	movs	r3, #0
 8017622:	b510      	push	{r4, lr}
 8017624:	4604      	mov	r4, r0
 8017626:	e9c0 3300 	strd	r3, r3, [r0]
 801762a:	6083      	str	r3, [r0, #8]
 801762c:	8181      	strh	r1, [r0, #12]
 801762e:	6643      	str	r3, [r0, #100]	; 0x64
 8017630:	81c2      	strh	r2, [r0, #14]
 8017632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017636:	6183      	str	r3, [r0, #24]
 8017638:	4619      	mov	r1, r3
 801763a:	2208      	movs	r2, #8
 801763c:	305c      	adds	r0, #92	; 0x5c
 801763e:	f7fe fb5a 	bl	8015cf6 <memset>
 8017642:	4b05      	ldr	r3, [pc, #20]	; (8017658 <std+0x38>)
 8017644:	6263      	str	r3, [r4, #36]	; 0x24
 8017646:	4b05      	ldr	r3, [pc, #20]	; (801765c <std+0x3c>)
 8017648:	62a3      	str	r3, [r4, #40]	; 0x28
 801764a:	4b05      	ldr	r3, [pc, #20]	; (8017660 <std+0x40>)
 801764c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801764e:	4b05      	ldr	r3, [pc, #20]	; (8017664 <std+0x44>)
 8017650:	6224      	str	r4, [r4, #32]
 8017652:	6323      	str	r3, [r4, #48]	; 0x30
 8017654:	bd10      	pop	{r4, pc}
 8017656:	bf00      	nop
 8017658:	0801826d 	.word	0x0801826d
 801765c:	0801828f 	.word	0x0801828f
 8017660:	080182c7 	.word	0x080182c7
 8017664:	080182eb 	.word	0x080182eb

08017668 <_cleanup_r>:
 8017668:	4901      	ldr	r1, [pc, #4]	; (8017670 <_cleanup_r+0x8>)
 801766a:	f000 b885 	b.w	8017778 <_fwalk_reent>
 801766e:	bf00      	nop
 8017670:	080175cd 	.word	0x080175cd

08017674 <__sfmoreglue>:
 8017674:	b570      	push	{r4, r5, r6, lr}
 8017676:	1e4a      	subs	r2, r1, #1
 8017678:	2568      	movs	r5, #104	; 0x68
 801767a:	4355      	muls	r5, r2
 801767c:	460e      	mov	r6, r1
 801767e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017682:	f000 fc49 	bl	8017f18 <_malloc_r>
 8017686:	4604      	mov	r4, r0
 8017688:	b140      	cbz	r0, 801769c <__sfmoreglue+0x28>
 801768a:	2100      	movs	r1, #0
 801768c:	e9c0 1600 	strd	r1, r6, [r0]
 8017690:	300c      	adds	r0, #12
 8017692:	60a0      	str	r0, [r4, #8]
 8017694:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017698:	f7fe fb2d 	bl	8015cf6 <memset>
 801769c:	4620      	mov	r0, r4
 801769e:	bd70      	pop	{r4, r5, r6, pc}

080176a0 <__sinit>:
 80176a0:	6983      	ldr	r3, [r0, #24]
 80176a2:	b510      	push	{r4, lr}
 80176a4:	4604      	mov	r4, r0
 80176a6:	bb33      	cbnz	r3, 80176f6 <__sinit+0x56>
 80176a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80176ac:	6503      	str	r3, [r0, #80]	; 0x50
 80176ae:	4b12      	ldr	r3, [pc, #72]	; (80176f8 <__sinit+0x58>)
 80176b0:	4a12      	ldr	r2, [pc, #72]	; (80176fc <__sinit+0x5c>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	6282      	str	r2, [r0, #40]	; 0x28
 80176b6:	4298      	cmp	r0, r3
 80176b8:	bf04      	itt	eq
 80176ba:	2301      	moveq	r3, #1
 80176bc:	6183      	streq	r3, [r0, #24]
 80176be:	f000 f81f 	bl	8017700 <__sfp>
 80176c2:	6060      	str	r0, [r4, #4]
 80176c4:	4620      	mov	r0, r4
 80176c6:	f000 f81b 	bl	8017700 <__sfp>
 80176ca:	60a0      	str	r0, [r4, #8]
 80176cc:	4620      	mov	r0, r4
 80176ce:	f000 f817 	bl	8017700 <__sfp>
 80176d2:	2200      	movs	r2, #0
 80176d4:	60e0      	str	r0, [r4, #12]
 80176d6:	2104      	movs	r1, #4
 80176d8:	6860      	ldr	r0, [r4, #4]
 80176da:	f7ff ffa1 	bl	8017620 <std>
 80176de:	2201      	movs	r2, #1
 80176e0:	2109      	movs	r1, #9
 80176e2:	68a0      	ldr	r0, [r4, #8]
 80176e4:	f7ff ff9c 	bl	8017620 <std>
 80176e8:	2202      	movs	r2, #2
 80176ea:	2112      	movs	r1, #18
 80176ec:	68e0      	ldr	r0, [r4, #12]
 80176ee:	f7ff ff97 	bl	8017620 <std>
 80176f2:	2301      	movs	r3, #1
 80176f4:	61a3      	str	r3, [r4, #24]
 80176f6:	bd10      	pop	{r4, pc}
 80176f8:	080185e4 	.word	0x080185e4
 80176fc:	08017669 	.word	0x08017669

08017700 <__sfp>:
 8017700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017702:	4b1b      	ldr	r3, [pc, #108]	; (8017770 <__sfp+0x70>)
 8017704:	681e      	ldr	r6, [r3, #0]
 8017706:	69b3      	ldr	r3, [r6, #24]
 8017708:	4607      	mov	r7, r0
 801770a:	b913      	cbnz	r3, 8017712 <__sfp+0x12>
 801770c:	4630      	mov	r0, r6
 801770e:	f7ff ffc7 	bl	80176a0 <__sinit>
 8017712:	3648      	adds	r6, #72	; 0x48
 8017714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017718:	3b01      	subs	r3, #1
 801771a:	d503      	bpl.n	8017724 <__sfp+0x24>
 801771c:	6833      	ldr	r3, [r6, #0]
 801771e:	b133      	cbz	r3, 801772e <__sfp+0x2e>
 8017720:	6836      	ldr	r6, [r6, #0]
 8017722:	e7f7      	b.n	8017714 <__sfp+0x14>
 8017724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017728:	b16d      	cbz	r5, 8017746 <__sfp+0x46>
 801772a:	3468      	adds	r4, #104	; 0x68
 801772c:	e7f4      	b.n	8017718 <__sfp+0x18>
 801772e:	2104      	movs	r1, #4
 8017730:	4638      	mov	r0, r7
 8017732:	f7ff ff9f 	bl	8017674 <__sfmoreglue>
 8017736:	6030      	str	r0, [r6, #0]
 8017738:	2800      	cmp	r0, #0
 801773a:	d1f1      	bne.n	8017720 <__sfp+0x20>
 801773c:	230c      	movs	r3, #12
 801773e:	603b      	str	r3, [r7, #0]
 8017740:	4604      	mov	r4, r0
 8017742:	4620      	mov	r0, r4
 8017744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017746:	4b0b      	ldr	r3, [pc, #44]	; (8017774 <__sfp+0x74>)
 8017748:	6665      	str	r5, [r4, #100]	; 0x64
 801774a:	e9c4 5500 	strd	r5, r5, [r4]
 801774e:	60a5      	str	r5, [r4, #8]
 8017750:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017754:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017758:	2208      	movs	r2, #8
 801775a:	4629      	mov	r1, r5
 801775c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017760:	f7fe fac9 	bl	8015cf6 <memset>
 8017764:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017768:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801776c:	e7e9      	b.n	8017742 <__sfp+0x42>
 801776e:	bf00      	nop
 8017770:	080185e4 	.word	0x080185e4
 8017774:	ffff0001 	.word	0xffff0001

08017778 <_fwalk_reent>:
 8017778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801777c:	4680      	mov	r8, r0
 801777e:	4689      	mov	r9, r1
 8017780:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017784:	2600      	movs	r6, #0
 8017786:	b914      	cbnz	r4, 801778e <_fwalk_reent+0x16>
 8017788:	4630      	mov	r0, r6
 801778a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801778e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017792:	3f01      	subs	r7, #1
 8017794:	d501      	bpl.n	801779a <_fwalk_reent+0x22>
 8017796:	6824      	ldr	r4, [r4, #0]
 8017798:	e7f5      	b.n	8017786 <_fwalk_reent+0xe>
 801779a:	89ab      	ldrh	r3, [r5, #12]
 801779c:	2b01      	cmp	r3, #1
 801779e:	d907      	bls.n	80177b0 <_fwalk_reent+0x38>
 80177a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80177a4:	3301      	adds	r3, #1
 80177a6:	d003      	beq.n	80177b0 <_fwalk_reent+0x38>
 80177a8:	4629      	mov	r1, r5
 80177aa:	4640      	mov	r0, r8
 80177ac:	47c8      	blx	r9
 80177ae:	4306      	orrs	r6, r0
 80177b0:	3568      	adds	r5, #104	; 0x68
 80177b2:	e7ee      	b.n	8017792 <_fwalk_reent+0x1a>

080177b4 <_localeconv_r>:
 80177b4:	4b04      	ldr	r3, [pc, #16]	; (80177c8 <_localeconv_r+0x14>)
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	6a18      	ldr	r0, [r3, #32]
 80177ba:	4b04      	ldr	r3, [pc, #16]	; (80177cc <_localeconv_r+0x18>)
 80177bc:	2800      	cmp	r0, #0
 80177be:	bf08      	it	eq
 80177c0:	4618      	moveq	r0, r3
 80177c2:	30f0      	adds	r0, #240	; 0xf0
 80177c4:	4770      	bx	lr
 80177c6:	bf00      	nop
 80177c8:	20000080 	.word	0x20000080
 80177cc:	200000e4 	.word	0x200000e4

080177d0 <__swhatbuf_r>:
 80177d0:	b570      	push	{r4, r5, r6, lr}
 80177d2:	460e      	mov	r6, r1
 80177d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177d8:	2900      	cmp	r1, #0
 80177da:	b096      	sub	sp, #88	; 0x58
 80177dc:	4614      	mov	r4, r2
 80177de:	461d      	mov	r5, r3
 80177e0:	da07      	bge.n	80177f2 <__swhatbuf_r+0x22>
 80177e2:	2300      	movs	r3, #0
 80177e4:	602b      	str	r3, [r5, #0]
 80177e6:	89b3      	ldrh	r3, [r6, #12]
 80177e8:	061a      	lsls	r2, r3, #24
 80177ea:	d410      	bmi.n	801780e <__swhatbuf_r+0x3e>
 80177ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80177f0:	e00e      	b.n	8017810 <__swhatbuf_r+0x40>
 80177f2:	466a      	mov	r2, sp
 80177f4:	f000 fda0 	bl	8018338 <_fstat_r>
 80177f8:	2800      	cmp	r0, #0
 80177fa:	dbf2      	blt.n	80177e2 <__swhatbuf_r+0x12>
 80177fc:	9a01      	ldr	r2, [sp, #4]
 80177fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017802:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017806:	425a      	negs	r2, r3
 8017808:	415a      	adcs	r2, r3
 801780a:	602a      	str	r2, [r5, #0]
 801780c:	e7ee      	b.n	80177ec <__swhatbuf_r+0x1c>
 801780e:	2340      	movs	r3, #64	; 0x40
 8017810:	2000      	movs	r0, #0
 8017812:	6023      	str	r3, [r4, #0]
 8017814:	b016      	add	sp, #88	; 0x58
 8017816:	bd70      	pop	{r4, r5, r6, pc}

08017818 <__smakebuf_r>:
 8017818:	898b      	ldrh	r3, [r1, #12]
 801781a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801781c:	079d      	lsls	r5, r3, #30
 801781e:	4606      	mov	r6, r0
 8017820:	460c      	mov	r4, r1
 8017822:	d507      	bpl.n	8017834 <__smakebuf_r+0x1c>
 8017824:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017828:	6023      	str	r3, [r4, #0]
 801782a:	6123      	str	r3, [r4, #16]
 801782c:	2301      	movs	r3, #1
 801782e:	6163      	str	r3, [r4, #20]
 8017830:	b002      	add	sp, #8
 8017832:	bd70      	pop	{r4, r5, r6, pc}
 8017834:	ab01      	add	r3, sp, #4
 8017836:	466a      	mov	r2, sp
 8017838:	f7ff ffca 	bl	80177d0 <__swhatbuf_r>
 801783c:	9900      	ldr	r1, [sp, #0]
 801783e:	4605      	mov	r5, r0
 8017840:	4630      	mov	r0, r6
 8017842:	f000 fb69 	bl	8017f18 <_malloc_r>
 8017846:	b948      	cbnz	r0, 801785c <__smakebuf_r+0x44>
 8017848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801784c:	059a      	lsls	r2, r3, #22
 801784e:	d4ef      	bmi.n	8017830 <__smakebuf_r+0x18>
 8017850:	f023 0303 	bic.w	r3, r3, #3
 8017854:	f043 0302 	orr.w	r3, r3, #2
 8017858:	81a3      	strh	r3, [r4, #12]
 801785a:	e7e3      	b.n	8017824 <__smakebuf_r+0xc>
 801785c:	4b0d      	ldr	r3, [pc, #52]	; (8017894 <__smakebuf_r+0x7c>)
 801785e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017860:	89a3      	ldrh	r3, [r4, #12]
 8017862:	6020      	str	r0, [r4, #0]
 8017864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017868:	81a3      	strh	r3, [r4, #12]
 801786a:	9b00      	ldr	r3, [sp, #0]
 801786c:	6163      	str	r3, [r4, #20]
 801786e:	9b01      	ldr	r3, [sp, #4]
 8017870:	6120      	str	r0, [r4, #16]
 8017872:	b15b      	cbz	r3, 801788c <__smakebuf_r+0x74>
 8017874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017878:	4630      	mov	r0, r6
 801787a:	f000 fd6f 	bl	801835c <_isatty_r>
 801787e:	b128      	cbz	r0, 801788c <__smakebuf_r+0x74>
 8017880:	89a3      	ldrh	r3, [r4, #12]
 8017882:	f023 0303 	bic.w	r3, r3, #3
 8017886:	f043 0301 	orr.w	r3, r3, #1
 801788a:	81a3      	strh	r3, [r4, #12]
 801788c:	89a3      	ldrh	r3, [r4, #12]
 801788e:	431d      	orrs	r5, r3
 8017890:	81a5      	strh	r5, [r4, #12]
 8017892:	e7cd      	b.n	8017830 <__smakebuf_r+0x18>
 8017894:	08017669 	.word	0x08017669

08017898 <malloc>:
 8017898:	4b02      	ldr	r3, [pc, #8]	; (80178a4 <malloc+0xc>)
 801789a:	4601      	mov	r1, r0
 801789c:	6818      	ldr	r0, [r3, #0]
 801789e:	f000 bb3b 	b.w	8017f18 <_malloc_r>
 80178a2:	bf00      	nop
 80178a4:	20000080 	.word	0x20000080

080178a8 <_Balloc>:
 80178a8:	b570      	push	{r4, r5, r6, lr}
 80178aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80178ac:	4604      	mov	r4, r0
 80178ae:	460e      	mov	r6, r1
 80178b0:	b93d      	cbnz	r5, 80178c2 <_Balloc+0x1a>
 80178b2:	2010      	movs	r0, #16
 80178b4:	f7ff fff0 	bl	8017898 <malloc>
 80178b8:	6260      	str	r0, [r4, #36]	; 0x24
 80178ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80178be:	6005      	str	r5, [r0, #0]
 80178c0:	60c5      	str	r5, [r0, #12]
 80178c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80178c4:	68eb      	ldr	r3, [r5, #12]
 80178c6:	b183      	cbz	r3, 80178ea <_Balloc+0x42>
 80178c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178ca:	68db      	ldr	r3, [r3, #12]
 80178cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80178d0:	b9b8      	cbnz	r0, 8017902 <_Balloc+0x5a>
 80178d2:	2101      	movs	r1, #1
 80178d4:	fa01 f506 	lsl.w	r5, r1, r6
 80178d8:	1d6a      	adds	r2, r5, #5
 80178da:	0092      	lsls	r2, r2, #2
 80178dc:	4620      	mov	r0, r4
 80178de:	f000 fabf 	bl	8017e60 <_calloc_r>
 80178e2:	b160      	cbz	r0, 80178fe <_Balloc+0x56>
 80178e4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80178e8:	e00e      	b.n	8017908 <_Balloc+0x60>
 80178ea:	2221      	movs	r2, #33	; 0x21
 80178ec:	2104      	movs	r1, #4
 80178ee:	4620      	mov	r0, r4
 80178f0:	f000 fab6 	bl	8017e60 <_calloc_r>
 80178f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178f6:	60e8      	str	r0, [r5, #12]
 80178f8:	68db      	ldr	r3, [r3, #12]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d1e4      	bne.n	80178c8 <_Balloc+0x20>
 80178fe:	2000      	movs	r0, #0
 8017900:	bd70      	pop	{r4, r5, r6, pc}
 8017902:	6802      	ldr	r2, [r0, #0]
 8017904:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017908:	2300      	movs	r3, #0
 801790a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801790e:	e7f7      	b.n	8017900 <_Balloc+0x58>

08017910 <_Bfree>:
 8017910:	b570      	push	{r4, r5, r6, lr}
 8017912:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017914:	4606      	mov	r6, r0
 8017916:	460d      	mov	r5, r1
 8017918:	b93c      	cbnz	r4, 801792a <_Bfree+0x1a>
 801791a:	2010      	movs	r0, #16
 801791c:	f7ff ffbc 	bl	8017898 <malloc>
 8017920:	6270      	str	r0, [r6, #36]	; 0x24
 8017922:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017926:	6004      	str	r4, [r0, #0]
 8017928:	60c4      	str	r4, [r0, #12]
 801792a:	b13d      	cbz	r5, 801793c <_Bfree+0x2c>
 801792c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801792e:	686a      	ldr	r2, [r5, #4]
 8017930:	68db      	ldr	r3, [r3, #12]
 8017932:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017936:	6029      	str	r1, [r5, #0]
 8017938:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801793c:	bd70      	pop	{r4, r5, r6, pc}

0801793e <__multadd>:
 801793e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017942:	690d      	ldr	r5, [r1, #16]
 8017944:	461f      	mov	r7, r3
 8017946:	4606      	mov	r6, r0
 8017948:	460c      	mov	r4, r1
 801794a:	f101 0c14 	add.w	ip, r1, #20
 801794e:	2300      	movs	r3, #0
 8017950:	f8dc 0000 	ldr.w	r0, [ip]
 8017954:	b281      	uxth	r1, r0
 8017956:	fb02 7101 	mla	r1, r2, r1, r7
 801795a:	0c0f      	lsrs	r7, r1, #16
 801795c:	0c00      	lsrs	r0, r0, #16
 801795e:	fb02 7000 	mla	r0, r2, r0, r7
 8017962:	b289      	uxth	r1, r1
 8017964:	3301      	adds	r3, #1
 8017966:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801796a:	429d      	cmp	r5, r3
 801796c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017970:	f84c 1b04 	str.w	r1, [ip], #4
 8017974:	dcec      	bgt.n	8017950 <__multadd+0x12>
 8017976:	b1d7      	cbz	r7, 80179ae <__multadd+0x70>
 8017978:	68a3      	ldr	r3, [r4, #8]
 801797a:	42ab      	cmp	r3, r5
 801797c:	dc12      	bgt.n	80179a4 <__multadd+0x66>
 801797e:	6861      	ldr	r1, [r4, #4]
 8017980:	4630      	mov	r0, r6
 8017982:	3101      	adds	r1, #1
 8017984:	f7ff ff90 	bl	80178a8 <_Balloc>
 8017988:	6922      	ldr	r2, [r4, #16]
 801798a:	3202      	adds	r2, #2
 801798c:	f104 010c 	add.w	r1, r4, #12
 8017990:	4680      	mov	r8, r0
 8017992:	0092      	lsls	r2, r2, #2
 8017994:	300c      	adds	r0, #12
 8017996:	f7fe f9a3 	bl	8015ce0 <memcpy>
 801799a:	4621      	mov	r1, r4
 801799c:	4630      	mov	r0, r6
 801799e:	f7ff ffb7 	bl	8017910 <_Bfree>
 80179a2:	4644      	mov	r4, r8
 80179a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80179a8:	3501      	adds	r5, #1
 80179aa:	615f      	str	r7, [r3, #20]
 80179ac:	6125      	str	r5, [r4, #16]
 80179ae:	4620      	mov	r0, r4
 80179b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080179b4 <__hi0bits>:
 80179b4:	0c02      	lsrs	r2, r0, #16
 80179b6:	0412      	lsls	r2, r2, #16
 80179b8:	4603      	mov	r3, r0
 80179ba:	b9b2      	cbnz	r2, 80179ea <__hi0bits+0x36>
 80179bc:	0403      	lsls	r3, r0, #16
 80179be:	2010      	movs	r0, #16
 80179c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80179c4:	bf04      	itt	eq
 80179c6:	021b      	lsleq	r3, r3, #8
 80179c8:	3008      	addeq	r0, #8
 80179ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80179ce:	bf04      	itt	eq
 80179d0:	011b      	lsleq	r3, r3, #4
 80179d2:	3004      	addeq	r0, #4
 80179d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80179d8:	bf04      	itt	eq
 80179da:	009b      	lsleq	r3, r3, #2
 80179dc:	3002      	addeq	r0, #2
 80179de:	2b00      	cmp	r3, #0
 80179e0:	db06      	blt.n	80179f0 <__hi0bits+0x3c>
 80179e2:	005b      	lsls	r3, r3, #1
 80179e4:	d503      	bpl.n	80179ee <__hi0bits+0x3a>
 80179e6:	3001      	adds	r0, #1
 80179e8:	4770      	bx	lr
 80179ea:	2000      	movs	r0, #0
 80179ec:	e7e8      	b.n	80179c0 <__hi0bits+0xc>
 80179ee:	2020      	movs	r0, #32
 80179f0:	4770      	bx	lr

080179f2 <__lo0bits>:
 80179f2:	6803      	ldr	r3, [r0, #0]
 80179f4:	f013 0207 	ands.w	r2, r3, #7
 80179f8:	4601      	mov	r1, r0
 80179fa:	d00b      	beq.n	8017a14 <__lo0bits+0x22>
 80179fc:	07da      	lsls	r2, r3, #31
 80179fe:	d423      	bmi.n	8017a48 <__lo0bits+0x56>
 8017a00:	0798      	lsls	r0, r3, #30
 8017a02:	bf49      	itett	mi
 8017a04:	085b      	lsrmi	r3, r3, #1
 8017a06:	089b      	lsrpl	r3, r3, #2
 8017a08:	2001      	movmi	r0, #1
 8017a0a:	600b      	strmi	r3, [r1, #0]
 8017a0c:	bf5c      	itt	pl
 8017a0e:	600b      	strpl	r3, [r1, #0]
 8017a10:	2002      	movpl	r0, #2
 8017a12:	4770      	bx	lr
 8017a14:	b298      	uxth	r0, r3
 8017a16:	b9a8      	cbnz	r0, 8017a44 <__lo0bits+0x52>
 8017a18:	0c1b      	lsrs	r3, r3, #16
 8017a1a:	2010      	movs	r0, #16
 8017a1c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017a20:	bf04      	itt	eq
 8017a22:	0a1b      	lsreq	r3, r3, #8
 8017a24:	3008      	addeq	r0, #8
 8017a26:	071a      	lsls	r2, r3, #28
 8017a28:	bf04      	itt	eq
 8017a2a:	091b      	lsreq	r3, r3, #4
 8017a2c:	3004      	addeq	r0, #4
 8017a2e:	079a      	lsls	r2, r3, #30
 8017a30:	bf04      	itt	eq
 8017a32:	089b      	lsreq	r3, r3, #2
 8017a34:	3002      	addeq	r0, #2
 8017a36:	07da      	lsls	r2, r3, #31
 8017a38:	d402      	bmi.n	8017a40 <__lo0bits+0x4e>
 8017a3a:	085b      	lsrs	r3, r3, #1
 8017a3c:	d006      	beq.n	8017a4c <__lo0bits+0x5a>
 8017a3e:	3001      	adds	r0, #1
 8017a40:	600b      	str	r3, [r1, #0]
 8017a42:	4770      	bx	lr
 8017a44:	4610      	mov	r0, r2
 8017a46:	e7e9      	b.n	8017a1c <__lo0bits+0x2a>
 8017a48:	2000      	movs	r0, #0
 8017a4a:	4770      	bx	lr
 8017a4c:	2020      	movs	r0, #32
 8017a4e:	4770      	bx	lr

08017a50 <__i2b>:
 8017a50:	b510      	push	{r4, lr}
 8017a52:	460c      	mov	r4, r1
 8017a54:	2101      	movs	r1, #1
 8017a56:	f7ff ff27 	bl	80178a8 <_Balloc>
 8017a5a:	2201      	movs	r2, #1
 8017a5c:	6144      	str	r4, [r0, #20]
 8017a5e:	6102      	str	r2, [r0, #16]
 8017a60:	bd10      	pop	{r4, pc}

08017a62 <__multiply>:
 8017a62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a66:	4614      	mov	r4, r2
 8017a68:	690a      	ldr	r2, [r1, #16]
 8017a6a:	6923      	ldr	r3, [r4, #16]
 8017a6c:	429a      	cmp	r2, r3
 8017a6e:	bfb8      	it	lt
 8017a70:	460b      	movlt	r3, r1
 8017a72:	4688      	mov	r8, r1
 8017a74:	bfbc      	itt	lt
 8017a76:	46a0      	movlt	r8, r4
 8017a78:	461c      	movlt	r4, r3
 8017a7a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017a7e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017a82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017a86:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017a8a:	eb07 0609 	add.w	r6, r7, r9
 8017a8e:	42b3      	cmp	r3, r6
 8017a90:	bfb8      	it	lt
 8017a92:	3101      	addlt	r1, #1
 8017a94:	f7ff ff08 	bl	80178a8 <_Balloc>
 8017a98:	f100 0514 	add.w	r5, r0, #20
 8017a9c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017aa0:	462b      	mov	r3, r5
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	4573      	cmp	r3, lr
 8017aa6:	d316      	bcc.n	8017ad6 <__multiply+0x74>
 8017aa8:	f104 0214 	add.w	r2, r4, #20
 8017aac:	f108 0114 	add.w	r1, r8, #20
 8017ab0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017ab4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017ab8:	9300      	str	r3, [sp, #0]
 8017aba:	9b00      	ldr	r3, [sp, #0]
 8017abc:	9201      	str	r2, [sp, #4]
 8017abe:	4293      	cmp	r3, r2
 8017ac0:	d80c      	bhi.n	8017adc <__multiply+0x7a>
 8017ac2:	2e00      	cmp	r6, #0
 8017ac4:	dd03      	ble.n	8017ace <__multiply+0x6c>
 8017ac6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d05d      	beq.n	8017b8a <__multiply+0x128>
 8017ace:	6106      	str	r6, [r0, #16]
 8017ad0:	b003      	add	sp, #12
 8017ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ad6:	f843 2b04 	str.w	r2, [r3], #4
 8017ada:	e7e3      	b.n	8017aa4 <__multiply+0x42>
 8017adc:	f8b2 b000 	ldrh.w	fp, [r2]
 8017ae0:	f1bb 0f00 	cmp.w	fp, #0
 8017ae4:	d023      	beq.n	8017b2e <__multiply+0xcc>
 8017ae6:	4689      	mov	r9, r1
 8017ae8:	46ac      	mov	ip, r5
 8017aea:	f04f 0800 	mov.w	r8, #0
 8017aee:	f859 4b04 	ldr.w	r4, [r9], #4
 8017af2:	f8dc a000 	ldr.w	sl, [ip]
 8017af6:	b2a3      	uxth	r3, r4
 8017af8:	fa1f fa8a 	uxth.w	sl, sl
 8017afc:	fb0b a303 	mla	r3, fp, r3, sl
 8017b00:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017b04:	f8dc 4000 	ldr.w	r4, [ip]
 8017b08:	4443      	add	r3, r8
 8017b0a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017b0e:	fb0b 840a 	mla	r4, fp, sl, r8
 8017b12:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017b16:	46e2      	mov	sl, ip
 8017b18:	b29b      	uxth	r3, r3
 8017b1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017b1e:	454f      	cmp	r7, r9
 8017b20:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017b24:	f84a 3b04 	str.w	r3, [sl], #4
 8017b28:	d82b      	bhi.n	8017b82 <__multiply+0x120>
 8017b2a:	f8cc 8004 	str.w	r8, [ip, #4]
 8017b2e:	9b01      	ldr	r3, [sp, #4]
 8017b30:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017b34:	3204      	adds	r2, #4
 8017b36:	f1ba 0f00 	cmp.w	sl, #0
 8017b3a:	d020      	beq.n	8017b7e <__multiply+0x11c>
 8017b3c:	682b      	ldr	r3, [r5, #0]
 8017b3e:	4689      	mov	r9, r1
 8017b40:	46a8      	mov	r8, r5
 8017b42:	f04f 0b00 	mov.w	fp, #0
 8017b46:	f8b9 c000 	ldrh.w	ip, [r9]
 8017b4a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017b4e:	fb0a 440c 	mla	r4, sl, ip, r4
 8017b52:	445c      	add	r4, fp
 8017b54:	46c4      	mov	ip, r8
 8017b56:	b29b      	uxth	r3, r3
 8017b58:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017b5c:	f84c 3b04 	str.w	r3, [ip], #4
 8017b60:	f859 3b04 	ldr.w	r3, [r9], #4
 8017b64:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017b68:	0c1b      	lsrs	r3, r3, #16
 8017b6a:	fb0a b303 	mla	r3, sl, r3, fp
 8017b6e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017b72:	454f      	cmp	r7, r9
 8017b74:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017b78:	d805      	bhi.n	8017b86 <__multiply+0x124>
 8017b7a:	f8c8 3004 	str.w	r3, [r8, #4]
 8017b7e:	3504      	adds	r5, #4
 8017b80:	e79b      	b.n	8017aba <__multiply+0x58>
 8017b82:	46d4      	mov	ip, sl
 8017b84:	e7b3      	b.n	8017aee <__multiply+0x8c>
 8017b86:	46e0      	mov	r8, ip
 8017b88:	e7dd      	b.n	8017b46 <__multiply+0xe4>
 8017b8a:	3e01      	subs	r6, #1
 8017b8c:	e799      	b.n	8017ac2 <__multiply+0x60>
	...

08017b90 <__pow5mult>:
 8017b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b94:	4615      	mov	r5, r2
 8017b96:	f012 0203 	ands.w	r2, r2, #3
 8017b9a:	4606      	mov	r6, r0
 8017b9c:	460f      	mov	r7, r1
 8017b9e:	d007      	beq.n	8017bb0 <__pow5mult+0x20>
 8017ba0:	3a01      	subs	r2, #1
 8017ba2:	4c21      	ldr	r4, [pc, #132]	; (8017c28 <__pow5mult+0x98>)
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017baa:	f7ff fec8 	bl	801793e <__multadd>
 8017bae:	4607      	mov	r7, r0
 8017bb0:	10ad      	asrs	r5, r5, #2
 8017bb2:	d035      	beq.n	8017c20 <__pow5mult+0x90>
 8017bb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017bb6:	b93c      	cbnz	r4, 8017bc8 <__pow5mult+0x38>
 8017bb8:	2010      	movs	r0, #16
 8017bba:	f7ff fe6d 	bl	8017898 <malloc>
 8017bbe:	6270      	str	r0, [r6, #36]	; 0x24
 8017bc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017bc4:	6004      	str	r4, [r0, #0]
 8017bc6:	60c4      	str	r4, [r0, #12]
 8017bc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017bcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017bd0:	b94c      	cbnz	r4, 8017be6 <__pow5mult+0x56>
 8017bd2:	f240 2171 	movw	r1, #625	; 0x271
 8017bd6:	4630      	mov	r0, r6
 8017bd8:	f7ff ff3a 	bl	8017a50 <__i2b>
 8017bdc:	2300      	movs	r3, #0
 8017bde:	f8c8 0008 	str.w	r0, [r8, #8]
 8017be2:	4604      	mov	r4, r0
 8017be4:	6003      	str	r3, [r0, #0]
 8017be6:	f04f 0800 	mov.w	r8, #0
 8017bea:	07eb      	lsls	r3, r5, #31
 8017bec:	d50a      	bpl.n	8017c04 <__pow5mult+0x74>
 8017bee:	4639      	mov	r1, r7
 8017bf0:	4622      	mov	r2, r4
 8017bf2:	4630      	mov	r0, r6
 8017bf4:	f7ff ff35 	bl	8017a62 <__multiply>
 8017bf8:	4639      	mov	r1, r7
 8017bfa:	4681      	mov	r9, r0
 8017bfc:	4630      	mov	r0, r6
 8017bfe:	f7ff fe87 	bl	8017910 <_Bfree>
 8017c02:	464f      	mov	r7, r9
 8017c04:	106d      	asrs	r5, r5, #1
 8017c06:	d00b      	beq.n	8017c20 <__pow5mult+0x90>
 8017c08:	6820      	ldr	r0, [r4, #0]
 8017c0a:	b938      	cbnz	r0, 8017c1c <__pow5mult+0x8c>
 8017c0c:	4622      	mov	r2, r4
 8017c0e:	4621      	mov	r1, r4
 8017c10:	4630      	mov	r0, r6
 8017c12:	f7ff ff26 	bl	8017a62 <__multiply>
 8017c16:	6020      	str	r0, [r4, #0]
 8017c18:	f8c0 8000 	str.w	r8, [r0]
 8017c1c:	4604      	mov	r4, r0
 8017c1e:	e7e4      	b.n	8017bea <__pow5mult+0x5a>
 8017c20:	4638      	mov	r0, r7
 8017c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c26:	bf00      	nop
 8017c28:	08018780 	.word	0x08018780

08017c2c <__lshift>:
 8017c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c30:	460c      	mov	r4, r1
 8017c32:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017c36:	6923      	ldr	r3, [r4, #16]
 8017c38:	6849      	ldr	r1, [r1, #4]
 8017c3a:	eb0a 0903 	add.w	r9, sl, r3
 8017c3e:	68a3      	ldr	r3, [r4, #8]
 8017c40:	4607      	mov	r7, r0
 8017c42:	4616      	mov	r6, r2
 8017c44:	f109 0501 	add.w	r5, r9, #1
 8017c48:	42ab      	cmp	r3, r5
 8017c4a:	db32      	blt.n	8017cb2 <__lshift+0x86>
 8017c4c:	4638      	mov	r0, r7
 8017c4e:	f7ff fe2b 	bl	80178a8 <_Balloc>
 8017c52:	2300      	movs	r3, #0
 8017c54:	4680      	mov	r8, r0
 8017c56:	f100 0114 	add.w	r1, r0, #20
 8017c5a:	461a      	mov	r2, r3
 8017c5c:	4553      	cmp	r3, sl
 8017c5e:	db2b      	blt.n	8017cb8 <__lshift+0x8c>
 8017c60:	6920      	ldr	r0, [r4, #16]
 8017c62:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017c66:	f104 0314 	add.w	r3, r4, #20
 8017c6a:	f016 021f 	ands.w	r2, r6, #31
 8017c6e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017c72:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017c76:	d025      	beq.n	8017cc4 <__lshift+0x98>
 8017c78:	f1c2 0e20 	rsb	lr, r2, #32
 8017c7c:	2000      	movs	r0, #0
 8017c7e:	681e      	ldr	r6, [r3, #0]
 8017c80:	468a      	mov	sl, r1
 8017c82:	4096      	lsls	r6, r2
 8017c84:	4330      	orrs	r0, r6
 8017c86:	f84a 0b04 	str.w	r0, [sl], #4
 8017c8a:	f853 0b04 	ldr.w	r0, [r3], #4
 8017c8e:	459c      	cmp	ip, r3
 8017c90:	fa20 f00e 	lsr.w	r0, r0, lr
 8017c94:	d814      	bhi.n	8017cc0 <__lshift+0x94>
 8017c96:	6048      	str	r0, [r1, #4]
 8017c98:	b108      	cbz	r0, 8017c9e <__lshift+0x72>
 8017c9a:	f109 0502 	add.w	r5, r9, #2
 8017c9e:	3d01      	subs	r5, #1
 8017ca0:	4638      	mov	r0, r7
 8017ca2:	f8c8 5010 	str.w	r5, [r8, #16]
 8017ca6:	4621      	mov	r1, r4
 8017ca8:	f7ff fe32 	bl	8017910 <_Bfree>
 8017cac:	4640      	mov	r0, r8
 8017cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cb2:	3101      	adds	r1, #1
 8017cb4:	005b      	lsls	r3, r3, #1
 8017cb6:	e7c7      	b.n	8017c48 <__lshift+0x1c>
 8017cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017cbc:	3301      	adds	r3, #1
 8017cbe:	e7cd      	b.n	8017c5c <__lshift+0x30>
 8017cc0:	4651      	mov	r1, sl
 8017cc2:	e7dc      	b.n	8017c7e <__lshift+0x52>
 8017cc4:	3904      	subs	r1, #4
 8017cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8017cca:	f841 2f04 	str.w	r2, [r1, #4]!
 8017cce:	459c      	cmp	ip, r3
 8017cd0:	d8f9      	bhi.n	8017cc6 <__lshift+0x9a>
 8017cd2:	e7e4      	b.n	8017c9e <__lshift+0x72>

08017cd4 <__mcmp>:
 8017cd4:	6903      	ldr	r3, [r0, #16]
 8017cd6:	690a      	ldr	r2, [r1, #16]
 8017cd8:	1a9b      	subs	r3, r3, r2
 8017cda:	b530      	push	{r4, r5, lr}
 8017cdc:	d10c      	bne.n	8017cf8 <__mcmp+0x24>
 8017cde:	0092      	lsls	r2, r2, #2
 8017ce0:	3014      	adds	r0, #20
 8017ce2:	3114      	adds	r1, #20
 8017ce4:	1884      	adds	r4, r0, r2
 8017ce6:	4411      	add	r1, r2
 8017ce8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017cec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017cf0:	4295      	cmp	r5, r2
 8017cf2:	d003      	beq.n	8017cfc <__mcmp+0x28>
 8017cf4:	d305      	bcc.n	8017d02 <__mcmp+0x2e>
 8017cf6:	2301      	movs	r3, #1
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	bd30      	pop	{r4, r5, pc}
 8017cfc:	42a0      	cmp	r0, r4
 8017cfe:	d3f3      	bcc.n	8017ce8 <__mcmp+0x14>
 8017d00:	e7fa      	b.n	8017cf8 <__mcmp+0x24>
 8017d02:	f04f 33ff 	mov.w	r3, #4294967295
 8017d06:	e7f7      	b.n	8017cf8 <__mcmp+0x24>

08017d08 <__mdiff>:
 8017d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d0c:	460d      	mov	r5, r1
 8017d0e:	4607      	mov	r7, r0
 8017d10:	4611      	mov	r1, r2
 8017d12:	4628      	mov	r0, r5
 8017d14:	4614      	mov	r4, r2
 8017d16:	f7ff ffdd 	bl	8017cd4 <__mcmp>
 8017d1a:	1e06      	subs	r6, r0, #0
 8017d1c:	d108      	bne.n	8017d30 <__mdiff+0x28>
 8017d1e:	4631      	mov	r1, r6
 8017d20:	4638      	mov	r0, r7
 8017d22:	f7ff fdc1 	bl	80178a8 <_Balloc>
 8017d26:	2301      	movs	r3, #1
 8017d28:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d30:	bfa4      	itt	ge
 8017d32:	4623      	movge	r3, r4
 8017d34:	462c      	movge	r4, r5
 8017d36:	4638      	mov	r0, r7
 8017d38:	6861      	ldr	r1, [r4, #4]
 8017d3a:	bfa6      	itte	ge
 8017d3c:	461d      	movge	r5, r3
 8017d3e:	2600      	movge	r6, #0
 8017d40:	2601      	movlt	r6, #1
 8017d42:	f7ff fdb1 	bl	80178a8 <_Balloc>
 8017d46:	692b      	ldr	r3, [r5, #16]
 8017d48:	60c6      	str	r6, [r0, #12]
 8017d4a:	6926      	ldr	r6, [r4, #16]
 8017d4c:	f105 0914 	add.w	r9, r5, #20
 8017d50:	f104 0214 	add.w	r2, r4, #20
 8017d54:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017d58:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017d5c:	f100 0514 	add.w	r5, r0, #20
 8017d60:	f04f 0e00 	mov.w	lr, #0
 8017d64:	f852 ab04 	ldr.w	sl, [r2], #4
 8017d68:	f859 4b04 	ldr.w	r4, [r9], #4
 8017d6c:	fa1e f18a 	uxtah	r1, lr, sl
 8017d70:	b2a3      	uxth	r3, r4
 8017d72:	1ac9      	subs	r1, r1, r3
 8017d74:	0c23      	lsrs	r3, r4, #16
 8017d76:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017d7a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017d7e:	b289      	uxth	r1, r1
 8017d80:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017d84:	45c8      	cmp	r8, r9
 8017d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017d8a:	4694      	mov	ip, r2
 8017d8c:	f845 3b04 	str.w	r3, [r5], #4
 8017d90:	d8e8      	bhi.n	8017d64 <__mdiff+0x5c>
 8017d92:	45bc      	cmp	ip, r7
 8017d94:	d304      	bcc.n	8017da0 <__mdiff+0x98>
 8017d96:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017d9a:	b183      	cbz	r3, 8017dbe <__mdiff+0xb6>
 8017d9c:	6106      	str	r6, [r0, #16]
 8017d9e:	e7c5      	b.n	8017d2c <__mdiff+0x24>
 8017da0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017da4:	fa1e f381 	uxtah	r3, lr, r1
 8017da8:	141a      	asrs	r2, r3, #16
 8017daa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017dae:	b29b      	uxth	r3, r3
 8017db0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017db4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017db8:	f845 3b04 	str.w	r3, [r5], #4
 8017dbc:	e7e9      	b.n	8017d92 <__mdiff+0x8a>
 8017dbe:	3e01      	subs	r6, #1
 8017dc0:	e7e9      	b.n	8017d96 <__mdiff+0x8e>

08017dc2 <__d2b>:
 8017dc2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017dc6:	460e      	mov	r6, r1
 8017dc8:	2101      	movs	r1, #1
 8017dca:	ec59 8b10 	vmov	r8, r9, d0
 8017dce:	4615      	mov	r5, r2
 8017dd0:	f7ff fd6a 	bl	80178a8 <_Balloc>
 8017dd4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017dd8:	4607      	mov	r7, r0
 8017dda:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017dde:	bb34      	cbnz	r4, 8017e2e <__d2b+0x6c>
 8017de0:	9301      	str	r3, [sp, #4]
 8017de2:	f1b8 0300 	subs.w	r3, r8, #0
 8017de6:	d027      	beq.n	8017e38 <__d2b+0x76>
 8017de8:	a802      	add	r0, sp, #8
 8017dea:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017dee:	f7ff fe00 	bl	80179f2 <__lo0bits>
 8017df2:	9900      	ldr	r1, [sp, #0]
 8017df4:	b1f0      	cbz	r0, 8017e34 <__d2b+0x72>
 8017df6:	9a01      	ldr	r2, [sp, #4]
 8017df8:	f1c0 0320 	rsb	r3, r0, #32
 8017dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8017e00:	430b      	orrs	r3, r1
 8017e02:	40c2      	lsrs	r2, r0
 8017e04:	617b      	str	r3, [r7, #20]
 8017e06:	9201      	str	r2, [sp, #4]
 8017e08:	9b01      	ldr	r3, [sp, #4]
 8017e0a:	61bb      	str	r3, [r7, #24]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	bf14      	ite	ne
 8017e10:	2102      	movne	r1, #2
 8017e12:	2101      	moveq	r1, #1
 8017e14:	6139      	str	r1, [r7, #16]
 8017e16:	b1c4      	cbz	r4, 8017e4a <__d2b+0x88>
 8017e18:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017e1c:	4404      	add	r4, r0
 8017e1e:	6034      	str	r4, [r6, #0]
 8017e20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017e24:	6028      	str	r0, [r5, #0]
 8017e26:	4638      	mov	r0, r7
 8017e28:	b003      	add	sp, #12
 8017e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017e32:	e7d5      	b.n	8017de0 <__d2b+0x1e>
 8017e34:	6179      	str	r1, [r7, #20]
 8017e36:	e7e7      	b.n	8017e08 <__d2b+0x46>
 8017e38:	a801      	add	r0, sp, #4
 8017e3a:	f7ff fdda 	bl	80179f2 <__lo0bits>
 8017e3e:	9b01      	ldr	r3, [sp, #4]
 8017e40:	617b      	str	r3, [r7, #20]
 8017e42:	2101      	movs	r1, #1
 8017e44:	6139      	str	r1, [r7, #16]
 8017e46:	3020      	adds	r0, #32
 8017e48:	e7e5      	b.n	8017e16 <__d2b+0x54>
 8017e4a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017e4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017e52:	6030      	str	r0, [r6, #0]
 8017e54:	6918      	ldr	r0, [r3, #16]
 8017e56:	f7ff fdad 	bl	80179b4 <__hi0bits>
 8017e5a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017e5e:	e7e1      	b.n	8017e24 <__d2b+0x62>

08017e60 <_calloc_r>:
 8017e60:	b538      	push	{r3, r4, r5, lr}
 8017e62:	fb02 f401 	mul.w	r4, r2, r1
 8017e66:	4621      	mov	r1, r4
 8017e68:	f000 f856 	bl	8017f18 <_malloc_r>
 8017e6c:	4605      	mov	r5, r0
 8017e6e:	b118      	cbz	r0, 8017e78 <_calloc_r+0x18>
 8017e70:	4622      	mov	r2, r4
 8017e72:	2100      	movs	r1, #0
 8017e74:	f7fd ff3f 	bl	8015cf6 <memset>
 8017e78:	4628      	mov	r0, r5
 8017e7a:	bd38      	pop	{r3, r4, r5, pc}

08017e7c <_free_r>:
 8017e7c:	b538      	push	{r3, r4, r5, lr}
 8017e7e:	4605      	mov	r5, r0
 8017e80:	2900      	cmp	r1, #0
 8017e82:	d045      	beq.n	8017f10 <_free_r+0x94>
 8017e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e88:	1f0c      	subs	r4, r1, #4
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	bfb8      	it	lt
 8017e8e:	18e4      	addlt	r4, r4, r3
 8017e90:	f000 fa98 	bl	80183c4 <__malloc_lock>
 8017e94:	4a1f      	ldr	r2, [pc, #124]	; (8017f14 <_free_r+0x98>)
 8017e96:	6813      	ldr	r3, [r2, #0]
 8017e98:	4610      	mov	r0, r2
 8017e9a:	b933      	cbnz	r3, 8017eaa <_free_r+0x2e>
 8017e9c:	6063      	str	r3, [r4, #4]
 8017e9e:	6014      	str	r4, [r2, #0]
 8017ea0:	4628      	mov	r0, r5
 8017ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ea6:	f000 ba8e 	b.w	80183c6 <__malloc_unlock>
 8017eaa:	42a3      	cmp	r3, r4
 8017eac:	d90c      	bls.n	8017ec8 <_free_r+0x4c>
 8017eae:	6821      	ldr	r1, [r4, #0]
 8017eb0:	1862      	adds	r2, r4, r1
 8017eb2:	4293      	cmp	r3, r2
 8017eb4:	bf04      	itt	eq
 8017eb6:	681a      	ldreq	r2, [r3, #0]
 8017eb8:	685b      	ldreq	r3, [r3, #4]
 8017eba:	6063      	str	r3, [r4, #4]
 8017ebc:	bf04      	itt	eq
 8017ebe:	1852      	addeq	r2, r2, r1
 8017ec0:	6022      	streq	r2, [r4, #0]
 8017ec2:	6004      	str	r4, [r0, #0]
 8017ec4:	e7ec      	b.n	8017ea0 <_free_r+0x24>
 8017ec6:	4613      	mov	r3, r2
 8017ec8:	685a      	ldr	r2, [r3, #4]
 8017eca:	b10a      	cbz	r2, 8017ed0 <_free_r+0x54>
 8017ecc:	42a2      	cmp	r2, r4
 8017ece:	d9fa      	bls.n	8017ec6 <_free_r+0x4a>
 8017ed0:	6819      	ldr	r1, [r3, #0]
 8017ed2:	1858      	adds	r0, r3, r1
 8017ed4:	42a0      	cmp	r0, r4
 8017ed6:	d10b      	bne.n	8017ef0 <_free_r+0x74>
 8017ed8:	6820      	ldr	r0, [r4, #0]
 8017eda:	4401      	add	r1, r0
 8017edc:	1858      	adds	r0, r3, r1
 8017ede:	4282      	cmp	r2, r0
 8017ee0:	6019      	str	r1, [r3, #0]
 8017ee2:	d1dd      	bne.n	8017ea0 <_free_r+0x24>
 8017ee4:	6810      	ldr	r0, [r2, #0]
 8017ee6:	6852      	ldr	r2, [r2, #4]
 8017ee8:	605a      	str	r2, [r3, #4]
 8017eea:	4401      	add	r1, r0
 8017eec:	6019      	str	r1, [r3, #0]
 8017eee:	e7d7      	b.n	8017ea0 <_free_r+0x24>
 8017ef0:	d902      	bls.n	8017ef8 <_free_r+0x7c>
 8017ef2:	230c      	movs	r3, #12
 8017ef4:	602b      	str	r3, [r5, #0]
 8017ef6:	e7d3      	b.n	8017ea0 <_free_r+0x24>
 8017ef8:	6820      	ldr	r0, [r4, #0]
 8017efa:	1821      	adds	r1, r4, r0
 8017efc:	428a      	cmp	r2, r1
 8017efe:	bf04      	itt	eq
 8017f00:	6811      	ldreq	r1, [r2, #0]
 8017f02:	6852      	ldreq	r2, [r2, #4]
 8017f04:	6062      	str	r2, [r4, #4]
 8017f06:	bf04      	itt	eq
 8017f08:	1809      	addeq	r1, r1, r0
 8017f0a:	6021      	streq	r1, [r4, #0]
 8017f0c:	605c      	str	r4, [r3, #4]
 8017f0e:	e7c7      	b.n	8017ea0 <_free_r+0x24>
 8017f10:	bd38      	pop	{r3, r4, r5, pc}
 8017f12:	bf00      	nop
 8017f14:	20018364 	.word	0x20018364

08017f18 <_malloc_r>:
 8017f18:	b570      	push	{r4, r5, r6, lr}
 8017f1a:	1ccd      	adds	r5, r1, #3
 8017f1c:	f025 0503 	bic.w	r5, r5, #3
 8017f20:	3508      	adds	r5, #8
 8017f22:	2d0c      	cmp	r5, #12
 8017f24:	bf38      	it	cc
 8017f26:	250c      	movcc	r5, #12
 8017f28:	2d00      	cmp	r5, #0
 8017f2a:	4606      	mov	r6, r0
 8017f2c:	db01      	blt.n	8017f32 <_malloc_r+0x1a>
 8017f2e:	42a9      	cmp	r1, r5
 8017f30:	d903      	bls.n	8017f3a <_malloc_r+0x22>
 8017f32:	230c      	movs	r3, #12
 8017f34:	6033      	str	r3, [r6, #0]
 8017f36:	2000      	movs	r0, #0
 8017f38:	bd70      	pop	{r4, r5, r6, pc}
 8017f3a:	f000 fa43 	bl	80183c4 <__malloc_lock>
 8017f3e:	4a21      	ldr	r2, [pc, #132]	; (8017fc4 <_malloc_r+0xac>)
 8017f40:	6814      	ldr	r4, [r2, #0]
 8017f42:	4621      	mov	r1, r4
 8017f44:	b991      	cbnz	r1, 8017f6c <_malloc_r+0x54>
 8017f46:	4c20      	ldr	r4, [pc, #128]	; (8017fc8 <_malloc_r+0xb0>)
 8017f48:	6823      	ldr	r3, [r4, #0]
 8017f4a:	b91b      	cbnz	r3, 8017f54 <_malloc_r+0x3c>
 8017f4c:	4630      	mov	r0, r6
 8017f4e:	f000 f97d 	bl	801824c <_sbrk_r>
 8017f52:	6020      	str	r0, [r4, #0]
 8017f54:	4629      	mov	r1, r5
 8017f56:	4630      	mov	r0, r6
 8017f58:	f000 f978 	bl	801824c <_sbrk_r>
 8017f5c:	1c43      	adds	r3, r0, #1
 8017f5e:	d124      	bne.n	8017faa <_malloc_r+0x92>
 8017f60:	230c      	movs	r3, #12
 8017f62:	6033      	str	r3, [r6, #0]
 8017f64:	4630      	mov	r0, r6
 8017f66:	f000 fa2e 	bl	80183c6 <__malloc_unlock>
 8017f6a:	e7e4      	b.n	8017f36 <_malloc_r+0x1e>
 8017f6c:	680b      	ldr	r3, [r1, #0]
 8017f6e:	1b5b      	subs	r3, r3, r5
 8017f70:	d418      	bmi.n	8017fa4 <_malloc_r+0x8c>
 8017f72:	2b0b      	cmp	r3, #11
 8017f74:	d90f      	bls.n	8017f96 <_malloc_r+0x7e>
 8017f76:	600b      	str	r3, [r1, #0]
 8017f78:	50cd      	str	r5, [r1, r3]
 8017f7a:	18cc      	adds	r4, r1, r3
 8017f7c:	4630      	mov	r0, r6
 8017f7e:	f000 fa22 	bl	80183c6 <__malloc_unlock>
 8017f82:	f104 000b 	add.w	r0, r4, #11
 8017f86:	1d23      	adds	r3, r4, #4
 8017f88:	f020 0007 	bic.w	r0, r0, #7
 8017f8c:	1ac3      	subs	r3, r0, r3
 8017f8e:	d0d3      	beq.n	8017f38 <_malloc_r+0x20>
 8017f90:	425a      	negs	r2, r3
 8017f92:	50e2      	str	r2, [r4, r3]
 8017f94:	e7d0      	b.n	8017f38 <_malloc_r+0x20>
 8017f96:	428c      	cmp	r4, r1
 8017f98:	684b      	ldr	r3, [r1, #4]
 8017f9a:	bf16      	itet	ne
 8017f9c:	6063      	strne	r3, [r4, #4]
 8017f9e:	6013      	streq	r3, [r2, #0]
 8017fa0:	460c      	movne	r4, r1
 8017fa2:	e7eb      	b.n	8017f7c <_malloc_r+0x64>
 8017fa4:	460c      	mov	r4, r1
 8017fa6:	6849      	ldr	r1, [r1, #4]
 8017fa8:	e7cc      	b.n	8017f44 <_malloc_r+0x2c>
 8017faa:	1cc4      	adds	r4, r0, #3
 8017fac:	f024 0403 	bic.w	r4, r4, #3
 8017fb0:	42a0      	cmp	r0, r4
 8017fb2:	d005      	beq.n	8017fc0 <_malloc_r+0xa8>
 8017fb4:	1a21      	subs	r1, r4, r0
 8017fb6:	4630      	mov	r0, r6
 8017fb8:	f000 f948 	bl	801824c <_sbrk_r>
 8017fbc:	3001      	adds	r0, #1
 8017fbe:	d0cf      	beq.n	8017f60 <_malloc_r+0x48>
 8017fc0:	6025      	str	r5, [r4, #0]
 8017fc2:	e7db      	b.n	8017f7c <_malloc_r+0x64>
 8017fc4:	20018364 	.word	0x20018364
 8017fc8:	20018368 	.word	0x20018368

08017fcc <__sfputc_r>:
 8017fcc:	6893      	ldr	r3, [r2, #8]
 8017fce:	3b01      	subs	r3, #1
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	b410      	push	{r4}
 8017fd4:	6093      	str	r3, [r2, #8]
 8017fd6:	da08      	bge.n	8017fea <__sfputc_r+0x1e>
 8017fd8:	6994      	ldr	r4, [r2, #24]
 8017fda:	42a3      	cmp	r3, r4
 8017fdc:	db01      	blt.n	8017fe2 <__sfputc_r+0x16>
 8017fde:	290a      	cmp	r1, #10
 8017fe0:	d103      	bne.n	8017fea <__sfputc_r+0x1e>
 8017fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fe6:	f7fe bb67 	b.w	80166b8 <__swbuf_r>
 8017fea:	6813      	ldr	r3, [r2, #0]
 8017fec:	1c58      	adds	r0, r3, #1
 8017fee:	6010      	str	r0, [r2, #0]
 8017ff0:	7019      	strb	r1, [r3, #0]
 8017ff2:	4608      	mov	r0, r1
 8017ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ff8:	4770      	bx	lr

08017ffa <__sfputs_r>:
 8017ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ffc:	4606      	mov	r6, r0
 8017ffe:	460f      	mov	r7, r1
 8018000:	4614      	mov	r4, r2
 8018002:	18d5      	adds	r5, r2, r3
 8018004:	42ac      	cmp	r4, r5
 8018006:	d101      	bne.n	801800c <__sfputs_r+0x12>
 8018008:	2000      	movs	r0, #0
 801800a:	e007      	b.n	801801c <__sfputs_r+0x22>
 801800c:	463a      	mov	r2, r7
 801800e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018012:	4630      	mov	r0, r6
 8018014:	f7ff ffda 	bl	8017fcc <__sfputc_r>
 8018018:	1c43      	adds	r3, r0, #1
 801801a:	d1f3      	bne.n	8018004 <__sfputs_r+0xa>
 801801c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018020 <_vfiprintf_r>:
 8018020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018024:	460c      	mov	r4, r1
 8018026:	b09d      	sub	sp, #116	; 0x74
 8018028:	4617      	mov	r7, r2
 801802a:	461d      	mov	r5, r3
 801802c:	4606      	mov	r6, r0
 801802e:	b118      	cbz	r0, 8018038 <_vfiprintf_r+0x18>
 8018030:	6983      	ldr	r3, [r0, #24]
 8018032:	b90b      	cbnz	r3, 8018038 <_vfiprintf_r+0x18>
 8018034:	f7ff fb34 	bl	80176a0 <__sinit>
 8018038:	4b7c      	ldr	r3, [pc, #496]	; (801822c <_vfiprintf_r+0x20c>)
 801803a:	429c      	cmp	r4, r3
 801803c:	d158      	bne.n	80180f0 <_vfiprintf_r+0xd0>
 801803e:	6874      	ldr	r4, [r6, #4]
 8018040:	89a3      	ldrh	r3, [r4, #12]
 8018042:	0718      	lsls	r0, r3, #28
 8018044:	d55e      	bpl.n	8018104 <_vfiprintf_r+0xe4>
 8018046:	6923      	ldr	r3, [r4, #16]
 8018048:	2b00      	cmp	r3, #0
 801804a:	d05b      	beq.n	8018104 <_vfiprintf_r+0xe4>
 801804c:	2300      	movs	r3, #0
 801804e:	9309      	str	r3, [sp, #36]	; 0x24
 8018050:	2320      	movs	r3, #32
 8018052:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018056:	2330      	movs	r3, #48	; 0x30
 8018058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801805c:	9503      	str	r5, [sp, #12]
 801805e:	f04f 0b01 	mov.w	fp, #1
 8018062:	46b8      	mov	r8, r7
 8018064:	4645      	mov	r5, r8
 8018066:	f815 3b01 	ldrb.w	r3, [r5], #1
 801806a:	b10b      	cbz	r3, 8018070 <_vfiprintf_r+0x50>
 801806c:	2b25      	cmp	r3, #37	; 0x25
 801806e:	d154      	bne.n	801811a <_vfiprintf_r+0xfa>
 8018070:	ebb8 0a07 	subs.w	sl, r8, r7
 8018074:	d00b      	beq.n	801808e <_vfiprintf_r+0x6e>
 8018076:	4653      	mov	r3, sl
 8018078:	463a      	mov	r2, r7
 801807a:	4621      	mov	r1, r4
 801807c:	4630      	mov	r0, r6
 801807e:	f7ff ffbc 	bl	8017ffa <__sfputs_r>
 8018082:	3001      	adds	r0, #1
 8018084:	f000 80c2 	beq.w	801820c <_vfiprintf_r+0x1ec>
 8018088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801808a:	4453      	add	r3, sl
 801808c:	9309      	str	r3, [sp, #36]	; 0x24
 801808e:	f898 3000 	ldrb.w	r3, [r8]
 8018092:	2b00      	cmp	r3, #0
 8018094:	f000 80ba 	beq.w	801820c <_vfiprintf_r+0x1ec>
 8018098:	2300      	movs	r3, #0
 801809a:	f04f 32ff 	mov.w	r2, #4294967295
 801809e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80180a2:	9304      	str	r3, [sp, #16]
 80180a4:	9307      	str	r3, [sp, #28]
 80180a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80180aa:	931a      	str	r3, [sp, #104]	; 0x68
 80180ac:	46a8      	mov	r8, r5
 80180ae:	2205      	movs	r2, #5
 80180b0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80180b4:	485e      	ldr	r0, [pc, #376]	; (8018230 <_vfiprintf_r+0x210>)
 80180b6:	f7ef ffcb 	bl	8008050 <memchr>
 80180ba:	9b04      	ldr	r3, [sp, #16]
 80180bc:	bb78      	cbnz	r0, 801811e <_vfiprintf_r+0xfe>
 80180be:	06d9      	lsls	r1, r3, #27
 80180c0:	bf44      	itt	mi
 80180c2:	2220      	movmi	r2, #32
 80180c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80180c8:	071a      	lsls	r2, r3, #28
 80180ca:	bf44      	itt	mi
 80180cc:	222b      	movmi	r2, #43	; 0x2b
 80180ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80180d2:	782a      	ldrb	r2, [r5, #0]
 80180d4:	2a2a      	cmp	r2, #42	; 0x2a
 80180d6:	d02a      	beq.n	801812e <_vfiprintf_r+0x10e>
 80180d8:	9a07      	ldr	r2, [sp, #28]
 80180da:	46a8      	mov	r8, r5
 80180dc:	2000      	movs	r0, #0
 80180de:	250a      	movs	r5, #10
 80180e0:	4641      	mov	r1, r8
 80180e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80180e6:	3b30      	subs	r3, #48	; 0x30
 80180e8:	2b09      	cmp	r3, #9
 80180ea:	d969      	bls.n	80181c0 <_vfiprintf_r+0x1a0>
 80180ec:	b360      	cbz	r0, 8018148 <_vfiprintf_r+0x128>
 80180ee:	e024      	b.n	801813a <_vfiprintf_r+0x11a>
 80180f0:	4b50      	ldr	r3, [pc, #320]	; (8018234 <_vfiprintf_r+0x214>)
 80180f2:	429c      	cmp	r4, r3
 80180f4:	d101      	bne.n	80180fa <_vfiprintf_r+0xda>
 80180f6:	68b4      	ldr	r4, [r6, #8]
 80180f8:	e7a2      	b.n	8018040 <_vfiprintf_r+0x20>
 80180fa:	4b4f      	ldr	r3, [pc, #316]	; (8018238 <_vfiprintf_r+0x218>)
 80180fc:	429c      	cmp	r4, r3
 80180fe:	bf08      	it	eq
 8018100:	68f4      	ldreq	r4, [r6, #12]
 8018102:	e79d      	b.n	8018040 <_vfiprintf_r+0x20>
 8018104:	4621      	mov	r1, r4
 8018106:	4630      	mov	r0, r6
 8018108:	f7fe fb28 	bl	801675c <__swsetup_r>
 801810c:	2800      	cmp	r0, #0
 801810e:	d09d      	beq.n	801804c <_vfiprintf_r+0x2c>
 8018110:	f04f 30ff 	mov.w	r0, #4294967295
 8018114:	b01d      	add	sp, #116	; 0x74
 8018116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801811a:	46a8      	mov	r8, r5
 801811c:	e7a2      	b.n	8018064 <_vfiprintf_r+0x44>
 801811e:	4a44      	ldr	r2, [pc, #272]	; (8018230 <_vfiprintf_r+0x210>)
 8018120:	1a80      	subs	r0, r0, r2
 8018122:	fa0b f000 	lsl.w	r0, fp, r0
 8018126:	4318      	orrs	r0, r3
 8018128:	9004      	str	r0, [sp, #16]
 801812a:	4645      	mov	r5, r8
 801812c:	e7be      	b.n	80180ac <_vfiprintf_r+0x8c>
 801812e:	9a03      	ldr	r2, [sp, #12]
 8018130:	1d11      	adds	r1, r2, #4
 8018132:	6812      	ldr	r2, [r2, #0]
 8018134:	9103      	str	r1, [sp, #12]
 8018136:	2a00      	cmp	r2, #0
 8018138:	db01      	blt.n	801813e <_vfiprintf_r+0x11e>
 801813a:	9207      	str	r2, [sp, #28]
 801813c:	e004      	b.n	8018148 <_vfiprintf_r+0x128>
 801813e:	4252      	negs	r2, r2
 8018140:	f043 0302 	orr.w	r3, r3, #2
 8018144:	9207      	str	r2, [sp, #28]
 8018146:	9304      	str	r3, [sp, #16]
 8018148:	f898 3000 	ldrb.w	r3, [r8]
 801814c:	2b2e      	cmp	r3, #46	; 0x2e
 801814e:	d10e      	bne.n	801816e <_vfiprintf_r+0x14e>
 8018150:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018154:	2b2a      	cmp	r3, #42	; 0x2a
 8018156:	d138      	bne.n	80181ca <_vfiprintf_r+0x1aa>
 8018158:	9b03      	ldr	r3, [sp, #12]
 801815a:	1d1a      	adds	r2, r3, #4
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	9203      	str	r2, [sp, #12]
 8018160:	2b00      	cmp	r3, #0
 8018162:	bfb8      	it	lt
 8018164:	f04f 33ff 	movlt.w	r3, #4294967295
 8018168:	f108 0802 	add.w	r8, r8, #2
 801816c:	9305      	str	r3, [sp, #20]
 801816e:	4d33      	ldr	r5, [pc, #204]	; (801823c <_vfiprintf_r+0x21c>)
 8018170:	f898 1000 	ldrb.w	r1, [r8]
 8018174:	2203      	movs	r2, #3
 8018176:	4628      	mov	r0, r5
 8018178:	f7ef ff6a 	bl	8008050 <memchr>
 801817c:	b140      	cbz	r0, 8018190 <_vfiprintf_r+0x170>
 801817e:	2340      	movs	r3, #64	; 0x40
 8018180:	1b40      	subs	r0, r0, r5
 8018182:	fa03 f000 	lsl.w	r0, r3, r0
 8018186:	9b04      	ldr	r3, [sp, #16]
 8018188:	4303      	orrs	r3, r0
 801818a:	f108 0801 	add.w	r8, r8, #1
 801818e:	9304      	str	r3, [sp, #16]
 8018190:	f898 1000 	ldrb.w	r1, [r8]
 8018194:	482a      	ldr	r0, [pc, #168]	; (8018240 <_vfiprintf_r+0x220>)
 8018196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801819a:	2206      	movs	r2, #6
 801819c:	f108 0701 	add.w	r7, r8, #1
 80181a0:	f7ef ff56 	bl	8008050 <memchr>
 80181a4:	2800      	cmp	r0, #0
 80181a6:	d037      	beq.n	8018218 <_vfiprintf_r+0x1f8>
 80181a8:	4b26      	ldr	r3, [pc, #152]	; (8018244 <_vfiprintf_r+0x224>)
 80181aa:	bb1b      	cbnz	r3, 80181f4 <_vfiprintf_r+0x1d4>
 80181ac:	9b03      	ldr	r3, [sp, #12]
 80181ae:	3307      	adds	r3, #7
 80181b0:	f023 0307 	bic.w	r3, r3, #7
 80181b4:	3308      	adds	r3, #8
 80181b6:	9303      	str	r3, [sp, #12]
 80181b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181ba:	444b      	add	r3, r9
 80181bc:	9309      	str	r3, [sp, #36]	; 0x24
 80181be:	e750      	b.n	8018062 <_vfiprintf_r+0x42>
 80181c0:	fb05 3202 	mla	r2, r5, r2, r3
 80181c4:	2001      	movs	r0, #1
 80181c6:	4688      	mov	r8, r1
 80181c8:	e78a      	b.n	80180e0 <_vfiprintf_r+0xc0>
 80181ca:	2300      	movs	r3, #0
 80181cc:	f108 0801 	add.w	r8, r8, #1
 80181d0:	9305      	str	r3, [sp, #20]
 80181d2:	4619      	mov	r1, r3
 80181d4:	250a      	movs	r5, #10
 80181d6:	4640      	mov	r0, r8
 80181d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181dc:	3a30      	subs	r2, #48	; 0x30
 80181de:	2a09      	cmp	r2, #9
 80181e0:	d903      	bls.n	80181ea <_vfiprintf_r+0x1ca>
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d0c3      	beq.n	801816e <_vfiprintf_r+0x14e>
 80181e6:	9105      	str	r1, [sp, #20]
 80181e8:	e7c1      	b.n	801816e <_vfiprintf_r+0x14e>
 80181ea:	fb05 2101 	mla	r1, r5, r1, r2
 80181ee:	2301      	movs	r3, #1
 80181f0:	4680      	mov	r8, r0
 80181f2:	e7f0      	b.n	80181d6 <_vfiprintf_r+0x1b6>
 80181f4:	ab03      	add	r3, sp, #12
 80181f6:	9300      	str	r3, [sp, #0]
 80181f8:	4622      	mov	r2, r4
 80181fa:	4b13      	ldr	r3, [pc, #76]	; (8018248 <_vfiprintf_r+0x228>)
 80181fc:	a904      	add	r1, sp, #16
 80181fe:	4630      	mov	r0, r6
 8018200:	f7fd fe16 	bl	8015e30 <_printf_float>
 8018204:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018208:	4681      	mov	r9, r0
 801820a:	d1d5      	bne.n	80181b8 <_vfiprintf_r+0x198>
 801820c:	89a3      	ldrh	r3, [r4, #12]
 801820e:	065b      	lsls	r3, r3, #25
 8018210:	f53f af7e 	bmi.w	8018110 <_vfiprintf_r+0xf0>
 8018214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018216:	e77d      	b.n	8018114 <_vfiprintf_r+0xf4>
 8018218:	ab03      	add	r3, sp, #12
 801821a:	9300      	str	r3, [sp, #0]
 801821c:	4622      	mov	r2, r4
 801821e:	4b0a      	ldr	r3, [pc, #40]	; (8018248 <_vfiprintf_r+0x228>)
 8018220:	a904      	add	r1, sp, #16
 8018222:	4630      	mov	r0, r6
 8018224:	f7fe f8ba 	bl	801639c <_printf_i>
 8018228:	e7ec      	b.n	8018204 <_vfiprintf_r+0x1e4>
 801822a:	bf00      	nop
 801822c:	0801864c 	.word	0x0801864c
 8018230:	0801878c 	.word	0x0801878c
 8018234:	0801866c 	.word	0x0801866c
 8018238:	0801862c 	.word	0x0801862c
 801823c:	08018792 	.word	0x08018792
 8018240:	08018796 	.word	0x08018796
 8018244:	08015e31 	.word	0x08015e31
 8018248:	08017ffb 	.word	0x08017ffb

0801824c <_sbrk_r>:
 801824c:	b538      	push	{r3, r4, r5, lr}
 801824e:	4c06      	ldr	r4, [pc, #24]	; (8018268 <_sbrk_r+0x1c>)
 8018250:	2300      	movs	r3, #0
 8018252:	4605      	mov	r5, r0
 8018254:	4608      	mov	r0, r1
 8018256:	6023      	str	r3, [r4, #0]
 8018258:	f7f8 fa40 	bl	80106dc <_sbrk>
 801825c:	1c43      	adds	r3, r0, #1
 801825e:	d102      	bne.n	8018266 <_sbrk_r+0x1a>
 8018260:	6823      	ldr	r3, [r4, #0]
 8018262:	b103      	cbz	r3, 8018266 <_sbrk_r+0x1a>
 8018264:	602b      	str	r3, [r5, #0]
 8018266:	bd38      	pop	{r3, r4, r5, pc}
 8018268:	20019070 	.word	0x20019070

0801826c <__sread>:
 801826c:	b510      	push	{r4, lr}
 801826e:	460c      	mov	r4, r1
 8018270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018274:	f000 f8a8 	bl	80183c8 <_read_r>
 8018278:	2800      	cmp	r0, #0
 801827a:	bfab      	itete	ge
 801827c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801827e:	89a3      	ldrhlt	r3, [r4, #12]
 8018280:	181b      	addge	r3, r3, r0
 8018282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018286:	bfac      	ite	ge
 8018288:	6563      	strge	r3, [r4, #84]	; 0x54
 801828a:	81a3      	strhlt	r3, [r4, #12]
 801828c:	bd10      	pop	{r4, pc}

0801828e <__swrite>:
 801828e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018292:	461f      	mov	r7, r3
 8018294:	898b      	ldrh	r3, [r1, #12]
 8018296:	05db      	lsls	r3, r3, #23
 8018298:	4605      	mov	r5, r0
 801829a:	460c      	mov	r4, r1
 801829c:	4616      	mov	r6, r2
 801829e:	d505      	bpl.n	80182ac <__swrite+0x1e>
 80182a0:	2302      	movs	r3, #2
 80182a2:	2200      	movs	r2, #0
 80182a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182a8:	f000 f868 	bl	801837c <_lseek_r>
 80182ac:	89a3      	ldrh	r3, [r4, #12]
 80182ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80182b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80182b6:	81a3      	strh	r3, [r4, #12]
 80182b8:	4632      	mov	r2, r6
 80182ba:	463b      	mov	r3, r7
 80182bc:	4628      	mov	r0, r5
 80182be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80182c2:	f000 b817 	b.w	80182f4 <_write_r>

080182c6 <__sseek>:
 80182c6:	b510      	push	{r4, lr}
 80182c8:	460c      	mov	r4, r1
 80182ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182ce:	f000 f855 	bl	801837c <_lseek_r>
 80182d2:	1c43      	adds	r3, r0, #1
 80182d4:	89a3      	ldrh	r3, [r4, #12]
 80182d6:	bf15      	itete	ne
 80182d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80182da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80182de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80182e2:	81a3      	strheq	r3, [r4, #12]
 80182e4:	bf18      	it	ne
 80182e6:	81a3      	strhne	r3, [r4, #12]
 80182e8:	bd10      	pop	{r4, pc}

080182ea <__sclose>:
 80182ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182ee:	f000 b813 	b.w	8018318 <_close_r>
	...

080182f4 <_write_r>:
 80182f4:	b538      	push	{r3, r4, r5, lr}
 80182f6:	4c07      	ldr	r4, [pc, #28]	; (8018314 <_write_r+0x20>)
 80182f8:	4605      	mov	r5, r0
 80182fa:	4608      	mov	r0, r1
 80182fc:	4611      	mov	r1, r2
 80182fe:	2200      	movs	r2, #0
 8018300:	6022      	str	r2, [r4, #0]
 8018302:	461a      	mov	r2, r3
 8018304:	f7f8 f999 	bl	801063a <_write>
 8018308:	1c43      	adds	r3, r0, #1
 801830a:	d102      	bne.n	8018312 <_write_r+0x1e>
 801830c:	6823      	ldr	r3, [r4, #0]
 801830e:	b103      	cbz	r3, 8018312 <_write_r+0x1e>
 8018310:	602b      	str	r3, [r5, #0]
 8018312:	bd38      	pop	{r3, r4, r5, pc}
 8018314:	20019070 	.word	0x20019070

08018318 <_close_r>:
 8018318:	b538      	push	{r3, r4, r5, lr}
 801831a:	4c06      	ldr	r4, [pc, #24]	; (8018334 <_close_r+0x1c>)
 801831c:	2300      	movs	r3, #0
 801831e:	4605      	mov	r5, r0
 8018320:	4608      	mov	r0, r1
 8018322:	6023      	str	r3, [r4, #0]
 8018324:	f7f8 f9a5 	bl	8010672 <_close>
 8018328:	1c43      	adds	r3, r0, #1
 801832a:	d102      	bne.n	8018332 <_close_r+0x1a>
 801832c:	6823      	ldr	r3, [r4, #0]
 801832e:	b103      	cbz	r3, 8018332 <_close_r+0x1a>
 8018330:	602b      	str	r3, [r5, #0]
 8018332:	bd38      	pop	{r3, r4, r5, pc}
 8018334:	20019070 	.word	0x20019070

08018338 <_fstat_r>:
 8018338:	b538      	push	{r3, r4, r5, lr}
 801833a:	4c07      	ldr	r4, [pc, #28]	; (8018358 <_fstat_r+0x20>)
 801833c:	2300      	movs	r3, #0
 801833e:	4605      	mov	r5, r0
 8018340:	4608      	mov	r0, r1
 8018342:	4611      	mov	r1, r2
 8018344:	6023      	str	r3, [r4, #0]
 8018346:	f7f8 f9a0 	bl	801068a <_fstat>
 801834a:	1c43      	adds	r3, r0, #1
 801834c:	d102      	bne.n	8018354 <_fstat_r+0x1c>
 801834e:	6823      	ldr	r3, [r4, #0]
 8018350:	b103      	cbz	r3, 8018354 <_fstat_r+0x1c>
 8018352:	602b      	str	r3, [r5, #0]
 8018354:	bd38      	pop	{r3, r4, r5, pc}
 8018356:	bf00      	nop
 8018358:	20019070 	.word	0x20019070

0801835c <_isatty_r>:
 801835c:	b538      	push	{r3, r4, r5, lr}
 801835e:	4c06      	ldr	r4, [pc, #24]	; (8018378 <_isatty_r+0x1c>)
 8018360:	2300      	movs	r3, #0
 8018362:	4605      	mov	r5, r0
 8018364:	4608      	mov	r0, r1
 8018366:	6023      	str	r3, [r4, #0]
 8018368:	f7f8 f99f 	bl	80106aa <_isatty>
 801836c:	1c43      	adds	r3, r0, #1
 801836e:	d102      	bne.n	8018376 <_isatty_r+0x1a>
 8018370:	6823      	ldr	r3, [r4, #0]
 8018372:	b103      	cbz	r3, 8018376 <_isatty_r+0x1a>
 8018374:	602b      	str	r3, [r5, #0]
 8018376:	bd38      	pop	{r3, r4, r5, pc}
 8018378:	20019070 	.word	0x20019070

0801837c <_lseek_r>:
 801837c:	b538      	push	{r3, r4, r5, lr}
 801837e:	4c07      	ldr	r4, [pc, #28]	; (801839c <_lseek_r+0x20>)
 8018380:	4605      	mov	r5, r0
 8018382:	4608      	mov	r0, r1
 8018384:	4611      	mov	r1, r2
 8018386:	2200      	movs	r2, #0
 8018388:	6022      	str	r2, [r4, #0]
 801838a:	461a      	mov	r2, r3
 801838c:	f7f8 f998 	bl	80106c0 <_lseek>
 8018390:	1c43      	adds	r3, r0, #1
 8018392:	d102      	bne.n	801839a <_lseek_r+0x1e>
 8018394:	6823      	ldr	r3, [r4, #0]
 8018396:	b103      	cbz	r3, 801839a <_lseek_r+0x1e>
 8018398:	602b      	str	r3, [r5, #0]
 801839a:	bd38      	pop	{r3, r4, r5, pc}
 801839c:	20019070 	.word	0x20019070

080183a0 <__ascii_mbtowc>:
 80183a0:	b082      	sub	sp, #8
 80183a2:	b901      	cbnz	r1, 80183a6 <__ascii_mbtowc+0x6>
 80183a4:	a901      	add	r1, sp, #4
 80183a6:	b142      	cbz	r2, 80183ba <__ascii_mbtowc+0x1a>
 80183a8:	b14b      	cbz	r3, 80183be <__ascii_mbtowc+0x1e>
 80183aa:	7813      	ldrb	r3, [r2, #0]
 80183ac:	600b      	str	r3, [r1, #0]
 80183ae:	7812      	ldrb	r2, [r2, #0]
 80183b0:	1c10      	adds	r0, r2, #0
 80183b2:	bf18      	it	ne
 80183b4:	2001      	movne	r0, #1
 80183b6:	b002      	add	sp, #8
 80183b8:	4770      	bx	lr
 80183ba:	4610      	mov	r0, r2
 80183bc:	e7fb      	b.n	80183b6 <__ascii_mbtowc+0x16>
 80183be:	f06f 0001 	mvn.w	r0, #1
 80183c2:	e7f8      	b.n	80183b6 <__ascii_mbtowc+0x16>

080183c4 <__malloc_lock>:
 80183c4:	4770      	bx	lr

080183c6 <__malloc_unlock>:
 80183c6:	4770      	bx	lr

080183c8 <_read_r>:
 80183c8:	b538      	push	{r3, r4, r5, lr}
 80183ca:	4c07      	ldr	r4, [pc, #28]	; (80183e8 <_read_r+0x20>)
 80183cc:	4605      	mov	r5, r0
 80183ce:	4608      	mov	r0, r1
 80183d0:	4611      	mov	r1, r2
 80183d2:	2200      	movs	r2, #0
 80183d4:	6022      	str	r2, [r4, #0]
 80183d6:	461a      	mov	r2, r3
 80183d8:	f7f8 f912 	bl	8010600 <_read>
 80183dc:	1c43      	adds	r3, r0, #1
 80183de:	d102      	bne.n	80183e6 <_read_r+0x1e>
 80183e0:	6823      	ldr	r3, [r4, #0]
 80183e2:	b103      	cbz	r3, 80183e6 <_read_r+0x1e>
 80183e4:	602b      	str	r3, [r5, #0]
 80183e6:	bd38      	pop	{r3, r4, r5, pc}
 80183e8:	20019070 	.word	0x20019070

080183ec <__ascii_wctomb>:
 80183ec:	b149      	cbz	r1, 8018402 <__ascii_wctomb+0x16>
 80183ee:	2aff      	cmp	r2, #255	; 0xff
 80183f0:	bf85      	ittet	hi
 80183f2:	238a      	movhi	r3, #138	; 0x8a
 80183f4:	6003      	strhi	r3, [r0, #0]
 80183f6:	700a      	strbls	r2, [r1, #0]
 80183f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80183fc:	bf98      	it	ls
 80183fe:	2001      	movls	r0, #1
 8018400:	4770      	bx	lr
 8018402:	4608      	mov	r0, r1
 8018404:	4770      	bx	lr
	...

08018408 <_init>:
 8018408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801840a:	bf00      	nop
 801840c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801840e:	bc08      	pop	{r3}
 8018410:	469e      	mov	lr, r3
 8018412:	4770      	bx	lr

08018414 <_fini>:
 8018414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018416:	bf00      	nop
 8018418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801841a:	bc08      	pop	{r3}
 801841c:	469e      	mov	lr, r3
 801841e:	4770      	bx	lr
