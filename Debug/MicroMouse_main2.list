
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .text         00010898  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000460  08018898  08018898  00028898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08018cf8  08018cf8  0003025c  2**0
                  CONTENTS
  5 .ARM          00000008  08018cf8  08018cf8  00028cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08018d00  08018d00  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08018d00  08018d00  00028d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08018d04  08018d04  00028d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000025c  20000000  08018d08  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00004e24  20000260  08018f64  00030260  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005084  08018f64  00035084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014983  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002ce2  00000000  00000000  00044c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000014d0  00000000  00000000  000478f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001378  00000000  00000000  00048dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00021b3e  00000000  00000000  0004a140  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f59c  00000000  00000000  0006bc7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c862e  00000000  00000000  0007b21a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00143848  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000650c  00000000  00000000  001438c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000260 	.word	0x20000260
 800801c:	00000000 	.word	0x00000000
 8008020:	08018880 	.word	0x08018880

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000264 	.word	0x20000264
 800803c:	08018880 	.word	0x08018880

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <Side_Wall_Control>:
float R_velocity, L_velocity;
float Target_R_velo, Target_L_velo;
float wall_target_error;

//壁制御
void Side_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 8008db8:	b590      	push	{r4, r7, lr}
 8008dba:	b089      	sub	sp, #36	; 0x24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	ed87 0a05 	vstr	s0, [r7, #20]
 8008dc2:	edc7 0a04 	vstr	s1, [r7, #16]
 8008dc6:	ed87 1a03 	vstr	s2, [r7, #12]
 8008dca:	edc7 1a02 	vstr	s3, [r7, #8]
 8008dce:	ed87 2a01 	vstr	s4, [r7, #4]
 8008dd2:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 8008dd6:	f04f 0300 	mov.w	r3, #0
 8008dda:	61fb      	str	r3, [r7, #28]
 8008ddc:	f04f 0300 	mov.w	r3, #0
 8008de0:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 8008de2:	4b4c      	ldr	r3, [pc, #304]	; (8008f14 <Side_Wall_Control+0x15c>)
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d107      	bne.n	8008dfa <Side_Wall_Control+0x42>
		ei =0;
 8008dea:	4b4b      	ldr	r3, [pc, #300]	; (8008f18 <Side_Wall_Control+0x160>)
 8008dec:	f04f 0200 	mov.w	r2, #0
 8008df0:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8008df2:	4b4a      	ldr	r3, [pc, #296]	; (8008f1c <Side_Wall_Control+0x164>)
 8008df4:	f04f 0200 	mov.w	r2, #0
 8008df8:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8008dfa:	4b46      	ldr	r3, [pc, #280]	; (8008f14 <Side_Wall_Control+0x15c>)
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	701a      	strb	r2, [r3, #0]

	e = wall_target_error + target - now;//r - l
 8008e00:	4b47      	ldr	r3, [pc, #284]	; (8008f20 <Side_Wall_Control+0x168>)
 8008e02:	ed93 7a00 	vldr	s14, [r3]
 8008e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e16:	edc7 7a07 	vstr	s15, [r7, #28]
	ei += e * T;
 8008e1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8008e1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e26:	4b3c      	ldr	r3, [pc, #240]	; (8008f18 <Side_Wall_Control+0x160>)
 8008e28:	edd3 7a00 	vldr	s15, [r3]
 8008e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e30:	4b39      	ldr	r3, [pc, #228]	; (8008f18 <Side_Wall_Control+0x160>)
 8008e32:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8008e36:	4b39      	ldr	r3, [pc, #228]	; (8008f1c <Side_Wall_Control+0x164>)
 8008e38:	edd3 7a00 	vldr	s15, [r3]
 8008e3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8008e40:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008e44:	ed97 7a03 	vldr	s14, [r7, #12]
 8008e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e4c:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 8008e50:	4a32      	ldr	r2, [pc, #200]	; (8008f1c <Side_Wall_Control+0x164>)
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	6013      	str	r3, [r2, #0]

	R_wall =  (int16_t)round(KP*e + KI*ei + KD*ed);
 8008e56:	ed97 7a02 	vldr	s14, [r7, #8]
 8008e5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8008e5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e62:	4b2d      	ldr	r3, [pc, #180]	; (8008f18 <Side_Wall_Control+0x160>)
 8008e64:	edd3 6a00 	vldr	s13, [r3]
 8008e68:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e74:	edd7 6a00 	vldr	s13, [r7]
 8008e78:	edd7 7a06 	vldr	s15, [r7, #24]
 8008e7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e84:	ee17 0a90 	vmov	r0, s15
 8008e88:	f7ff fa96 	bl	80083b8 <__aeabi_f2d>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	460c      	mov	r4, r1
 8008e90:	ec44 3b10 	vmov	d0, r3, r4
 8008e94:	f00d f8ea 	bl	801606c <round>
 8008e98:	ec54 3b10 	vmov	r3, r4, d0
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	f7ff fd92 	bl	80089c8 <__aeabi_d2iz>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	b21a      	sxth	r2, r3
 8008ea8:	4b1e      	ldr	r3, [pc, #120]	; (8008f24 <Side_Wall_Control+0x16c>)
 8008eaa:	801a      	strh	r2, [r3, #0]
	L_wall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8008eac:	ed97 7a02 	vldr	s14, [r7, #8]
 8008eb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8008eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008eb8:	4b17      	ldr	r3, [pc, #92]	; (8008f18 <Side_Wall_Control+0x160>)
 8008eba:	edd3 6a00 	vldr	s13, [r3]
 8008ebe:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ec2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ec6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008eca:	edd7 6a00 	vldr	s13, [r7]
 8008ece:	edd7 7a06 	vldr	s15, [r7, #24]
 8008ed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008eda:	ee17 0a90 	vmov	r0, s15
 8008ede:	f7ff fa6b 	bl	80083b8 <__aeabi_f2d>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	ec44 3b10 	vmov	d0, r3, r4
 8008eea:	f00d f8bf 	bl	801606c <round>
 8008eee:	ec54 3b10 	vmov	r3, r4, d0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	f7ff fd67 	bl	80089c8 <__aeabi_d2iz>
 8008efa:	4603      	mov	r3, r0
 8008efc:	b21b      	sxth	r3, r3
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	425b      	negs	r3, r3
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	b21a      	sxth	r2, r3
 8008f06:	4b08      	ldr	r3, [pc, #32]	; (8008f28 <Side_Wall_Control+0x170>)
 8008f08:	801a      	strh	r2, [r3, #0]

}
 8008f0a:	bf00      	nop
 8008f0c:	3724      	adds	r7, #36	; 0x24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd90      	pop	{r4, r7, pc}
 8008f12:	bf00      	nop
 8008f14:	2000027c 	.word	0x2000027c
 8008f18:	20000280 	.word	0x20000280
 8008f1c:	20000284 	.word	0x20000284
 8008f20:	2000438c 	.word	0x2000438c
 8008f24:	2000438a 	.word	0x2000438a
 8008f28:	200043a0 	.word	0x200043a0

08008f2c <Left_Wall_Control>:

void Left_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 8008f2c:	b590      	push	{r4, r7, lr}
 8008f2e:	b089      	sub	sp, #36	; 0x24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	ed87 0a05 	vstr	s0, [r7, #20]
 8008f36:	edc7 0a04 	vstr	s1, [r7, #16]
 8008f3a:	ed87 1a03 	vstr	s2, [r7, #12]
 8008f3e:	edc7 1a02 	vstr	s3, [r7, #8]
 8008f42:	ed87 2a01 	vstr	s4, [r7, #4]
 8008f46:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 8008f4a:	f04f 0300 	mov.w	r3, #0
 8008f4e:	61fb      	str	r3, [r7, #28]
 8008f50:	f04f 0300 	mov.w	r3, #0
 8008f54:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 8008f56:	4b51      	ldr	r3, [pc, #324]	; (800909c <Left_Wall_Control+0x170>)
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d107      	bne.n	8008f6e <Left_Wall_Control+0x42>
		ei =0;
 8008f5e:	4b50      	ldr	r3, [pc, #320]	; (80090a0 <Left_Wall_Control+0x174>)
 8008f60:	f04f 0200 	mov.w	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8008f66:	4b4f      	ldr	r3, [pc, #316]	; (80090a4 <Left_Wall_Control+0x178>)
 8008f68:	f04f 0200 	mov.w	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 8008f6e:	4b4b      	ldr	r3, [pc, #300]	; (800909c <Left_Wall_Control+0x170>)
 8008f70:	2201      	movs	r2, #1
 8008f72:	701a      	strb	r2, [r3, #0]
	e = 1.2*(target - now);
 8008f74:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f78:	edd7 7a04 	vldr	s15, [r7, #16]
 8008f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f80:	ee17 0a90 	vmov	r0, s15
 8008f84:	f7ff fa18 	bl	80083b8 <__aeabi_f2d>
 8008f88:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8008f8c:	4b46      	ldr	r3, [pc, #280]	; (80090a8 <Left_Wall_Control+0x17c>)
 8008f8e:	f7ff fa6b 	bl	8008468 <__aeabi_dmul>
 8008f92:	4603      	mov	r3, r0
 8008f94:	460c      	mov	r4, r1
 8008f96:	4618      	mov	r0, r3
 8008f98:	4621      	mov	r1, r4
 8008f9a:	f7ff fd3d 	bl	8008a18 <__aeabi_d2f>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	61fb      	str	r3, [r7, #28]
	ei += e * T;
 8008fa2:	ed97 7a07 	vldr	s14, [r7, #28]
 8008fa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8008faa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fae:	4b3c      	ldr	r3, [pc, #240]	; (80090a0 <Left_Wall_Control+0x174>)
 8008fb0:	edd3 7a00 	vldr	s15, [r3]
 8008fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fb8:	4b39      	ldr	r3, [pc, #228]	; (80090a0 <Left_Wall_Control+0x174>)
 8008fba:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8008fbe:	4b39      	ldr	r3, [pc, #228]	; (80090a4 <Left_Wall_Control+0x178>)
 8008fc0:	edd3 7a00 	vldr	s15, [r3]
 8008fc4:	ed97 7a07 	vldr	s14, [r7, #28]
 8008fc8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008fcc:	ed97 7a03 	vldr	s14, [r7, #12]
 8008fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fd4:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 8008fd8:	4a32      	ldr	r2, [pc, #200]	; (80090a4 <Left_Wall_Control+0x178>)
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	6013      	str	r3, [r2, #0]
	L_leftwall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8008fde:	ed97 7a02 	vldr	s14, [r7, #8]
 8008fe2:	edd7 7a07 	vldr	s15, [r7, #28]
 8008fe6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fea:	4b2d      	ldr	r3, [pc, #180]	; (80090a0 <Left_Wall_Control+0x174>)
 8008fec:	edd3 6a00 	vldr	s13, [r3]
 8008ff0:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ff8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ffc:	edd7 6a00 	vldr	s13, [r7]
 8009000:	edd7 7a06 	vldr	s15, [r7, #24]
 8009004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800900c:	ee17 0a90 	vmov	r0, s15
 8009010:	f7ff f9d2 	bl	80083b8 <__aeabi_f2d>
 8009014:	4603      	mov	r3, r0
 8009016:	460c      	mov	r4, r1
 8009018:	ec44 3b10 	vmov	d0, r3, r4
 800901c:	f00d f826 	bl	801606c <round>
 8009020:	ec54 3b10 	vmov	r3, r4, d0
 8009024:	4618      	mov	r0, r3
 8009026:	4621      	mov	r1, r4
 8009028:	f7ff fcce 	bl	80089c8 <__aeabi_d2iz>
 800902c:	4603      	mov	r3, r0
 800902e:	b21b      	sxth	r3, r3
 8009030:	b29b      	uxth	r3, r3
 8009032:	425b      	negs	r3, r3
 8009034:	b29b      	uxth	r3, r3
 8009036:	b21a      	sxth	r2, r3
 8009038:	4b1c      	ldr	r3, [pc, #112]	; (80090ac <Left_Wall_Control+0x180>)
 800903a:	801a      	strh	r2, [r3, #0]
	R_leftwall = (int16_t)round(KP*e + KI*ei + KD*ed);
 800903c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009040:	edd7 7a07 	vldr	s15, [r7, #28]
 8009044:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009048:	4b15      	ldr	r3, [pc, #84]	; (80090a0 <Left_Wall_Control+0x174>)
 800904a:	edd3 6a00 	vldr	s13, [r3]
 800904e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009056:	ee37 7a27 	vadd.f32	s14, s14, s15
 800905a:	edd7 6a00 	vldr	s13, [r7]
 800905e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800906a:	ee17 0a90 	vmov	r0, s15
 800906e:	f7ff f9a3 	bl	80083b8 <__aeabi_f2d>
 8009072:	4603      	mov	r3, r0
 8009074:	460c      	mov	r4, r1
 8009076:	ec44 3b10 	vmov	d0, r3, r4
 800907a:	f00c fff7 	bl	801606c <round>
 800907e:	ec54 3b10 	vmov	r3, r4, d0
 8009082:	4618      	mov	r0, r3
 8009084:	4621      	mov	r1, r4
 8009086:	f7ff fc9f 	bl	80089c8 <__aeabi_d2iz>
 800908a:	4603      	mov	r3, r0
 800908c:	b21a      	sxth	r2, r3
 800908e:	4b08      	ldr	r3, [pc, #32]	; (80090b0 <Left_Wall_Control+0x184>)
 8009090:	801a      	strh	r2, [r3, #0]
}
 8009092:	bf00      	nop
 8009094:	3724      	adds	r7, #36	; 0x24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd90      	pop	{r4, r7, pc}
 800909a:	bf00      	nop
 800909c:	2000027c 	.word	0x2000027c
 80090a0:	20000288 	.word	0x20000288
 80090a4:	2000028c 	.word	0x2000028c
 80090a8:	3ff33333 	.word	0x3ff33333
 80090ac:	20004386 	.word	0x20004386
 80090b0:	200043ac 	.word	0x200043ac

080090b4 <Right_Wall_Control>:

void Right_Wall_Control(float target, float now,float T, float KP, float KI, float KD){
 80090b4:	b590      	push	{r4, r7, lr}
 80090b6:	b089      	sub	sp, #36	; 0x24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	ed87 0a05 	vstr	s0, [r7, #20]
 80090be:	edc7 0a04 	vstr	s1, [r7, #16]
 80090c2:	ed87 1a03 	vstr	s2, [r7, #12]
 80090c6:	edc7 1a02 	vstr	s3, [r7, #8]
 80090ca:	ed87 2a01 	vstr	s4, [r7, #4]
 80090ce:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 80090d2:	f04f 0300 	mov.w	r3, #0
 80090d6:	61fb      	str	r3, [r7, #28]
 80090d8:	f04f 0300 	mov.w	r3, #0
 80090dc:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 80090de:	4b51      	ldr	r3, [pc, #324]	; (8009224 <Right_Wall_Control+0x170>)
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d107      	bne.n	80090f6 <Right_Wall_Control+0x42>
		ei =0;
 80090e6:	4b50      	ldr	r3, [pc, #320]	; (8009228 <Right_Wall_Control+0x174>)
 80090e8:	f04f 0200 	mov.w	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80090ee:	4b4f      	ldr	r3, [pc, #316]	; (800922c <Right_Wall_Control+0x178>)
 80090f0:	f04f 0200 	mov.w	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80090f6:	4b4b      	ldr	r3, [pc, #300]	; (8009224 <Right_Wall_Control+0x170>)
 80090f8:	2201      	movs	r2, #1
 80090fa:	701a      	strb	r2, [r3, #0]
	e = 1.2*(target - now);
 80090fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8009100:	edd7 7a04 	vldr	s15, [r7, #16]
 8009104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009108:	ee17 0a90 	vmov	r0, s15
 800910c:	f7ff f954 	bl	80083b8 <__aeabi_f2d>
 8009110:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8009114:	4b46      	ldr	r3, [pc, #280]	; (8009230 <Right_Wall_Control+0x17c>)
 8009116:	f7ff f9a7 	bl	8008468 <__aeabi_dmul>
 800911a:	4603      	mov	r3, r0
 800911c:	460c      	mov	r4, r1
 800911e:	4618      	mov	r0, r3
 8009120:	4621      	mov	r1, r4
 8009122:	f7ff fc79 	bl	8008a18 <__aeabi_d2f>
 8009126:	4603      	mov	r3, r0
 8009128:	61fb      	str	r3, [r7, #28]
	ei += e * T;
 800912a:	ed97 7a07 	vldr	s14, [r7, #28]
 800912e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009136:	4b3c      	ldr	r3, [pc, #240]	; (8009228 <Right_Wall_Control+0x174>)
 8009138:	edd3 7a00 	vldr	s15, [r3]
 800913c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009140:	4b39      	ldr	r3, [pc, #228]	; (8009228 <Right_Wall_Control+0x174>)
 8009142:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 8009146:	4b39      	ldr	r3, [pc, #228]	; (800922c <Right_Wall_Control+0x178>)
 8009148:	edd3 7a00 	vldr	s15, [r3]
 800914c:	ed97 7a07 	vldr	s14, [r7, #28]
 8009150:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009154:	ed97 7a03 	vldr	s14, [r7, #12]
 8009158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800915c:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 8009160:	4a32      	ldr	r2, [pc, #200]	; (800922c <Right_Wall_Control+0x178>)
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	6013      	str	r3, [r2, #0]
	L_rightwall = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009166:	ed97 7a02 	vldr	s14, [r7, #8]
 800916a:	edd7 7a07 	vldr	s15, [r7, #28]
 800916e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009172:	4b2d      	ldr	r3, [pc, #180]	; (8009228 <Right_Wall_Control+0x174>)
 8009174:	edd3 6a00 	vldr	s13, [r3]
 8009178:	edd7 7a01 	vldr	s15, [r7, #4]
 800917c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009180:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009184:	edd7 6a00 	vldr	s13, [r7]
 8009188:	edd7 7a06 	vldr	s15, [r7, #24]
 800918c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009194:	ee17 0a90 	vmov	r0, s15
 8009198:	f7ff f90e 	bl	80083b8 <__aeabi_f2d>
 800919c:	4603      	mov	r3, r0
 800919e:	460c      	mov	r4, r1
 80091a0:	ec44 3b10 	vmov	d0, r3, r4
 80091a4:	f00c ff62 	bl	801606c <round>
 80091a8:	ec54 3b10 	vmov	r3, r4, d0
 80091ac:	4618      	mov	r0, r3
 80091ae:	4621      	mov	r1, r4
 80091b0:	f7ff fc0a 	bl	80089c8 <__aeabi_d2iz>
 80091b4:	4603      	mov	r3, r0
 80091b6:	b21a      	sxth	r2, r3
 80091b8:	4b1e      	ldr	r3, [pc, #120]	; (8009234 <Right_Wall_Control+0x180>)
 80091ba:	801a      	strh	r2, [r3, #0]
	R_rightwall = -(int16_t)round(KP*e + KI*ei + KD*ed);
 80091bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80091c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80091c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80091c8:	4b17      	ldr	r3, [pc, #92]	; (8009228 <Right_Wall_Control+0x174>)
 80091ca:	edd3 6a00 	vldr	s13, [r3]
 80091ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80091d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80091da:	edd7 6a00 	vldr	s13, [r7]
 80091de:	edd7 7a06 	vldr	s15, [r7, #24]
 80091e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091ea:	ee17 0a90 	vmov	r0, s15
 80091ee:	f7ff f8e3 	bl	80083b8 <__aeabi_f2d>
 80091f2:	4603      	mov	r3, r0
 80091f4:	460c      	mov	r4, r1
 80091f6:	ec44 3b10 	vmov	d0, r3, r4
 80091fa:	f00c ff37 	bl	801606c <round>
 80091fe:	ec54 3b10 	vmov	r3, r4, d0
 8009202:	4618      	mov	r0, r3
 8009204:	4621      	mov	r1, r4
 8009206:	f7ff fbdf 	bl	80089c8 <__aeabi_d2iz>
 800920a:	4603      	mov	r3, r0
 800920c:	b21b      	sxth	r3, r3
 800920e:	b29b      	uxth	r3, r3
 8009210:	425b      	negs	r3, r3
 8009212:	b29b      	uxth	r3, r3
 8009214:	b21a      	sxth	r2, r3
 8009216:	4b08      	ldr	r3, [pc, #32]	; (8009238 <Right_Wall_Control+0x184>)
 8009218:	801a      	strh	r2, [r3, #0]
}
 800921a:	bf00      	nop
 800921c:	3724      	adds	r7, #36	; 0x24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd90      	pop	{r4, r7, pc}
 8009222:	bf00      	nop
 8009224:	2000027c 	.word	0x2000027c
 8009228:	20000290 	.word	0x20000290
 800922c:	20000294 	.word	0x20000294
 8009230:	3ff33333 	.word	0x3ff33333
 8009234:	20004378 	.word	0x20004378
 8009238:	20004394 	.word	0x20004394

0800923c <Velocity_Control>:

//速度制御
void Velocity_Control(float target, float now, float T, float KP, float KI, float KD){ //TIM3,4
 800923c:	b590      	push	{r4, r7, lr}
 800923e:	b089      	sub	sp, #36	; 0x24
 8009240:	af00      	add	r7, sp, #0
 8009242:	ed87 0a05 	vstr	s0, [r7, #20]
 8009246:	edc7 0a04 	vstr	s1, [r7, #16]
 800924a:	ed87 1a03 	vstr	s2, [r7, #12]
 800924e:	edc7 1a02 	vstr	s3, [r7, #8]
 8009252:	ed87 2a01 	vstr	s4, [r7, #4]
 8009256:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 800925a:	f04f 0300 	mov.w	r3, #0
 800925e:	61fb      	str	r3, [r7, #28]
 8009260:	f04f 0300 	mov.w	r3, #0
 8009264:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 8009266:	4b47      	ldr	r3, [pc, #284]	; (8009384 <Velocity_Control+0x148>)
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d107      	bne.n	800927e <Velocity_Control+0x42>
		ei =0;
 800926e:	4b46      	ldr	r3, [pc, #280]	; (8009388 <Velocity_Control+0x14c>)
 8009270:	f04f 0200 	mov.w	r2, #0
 8009274:	601a      	str	r2, [r3, #0]
		e0 = 0;
 8009276:	4b45      	ldr	r3, [pc, #276]	; (800938c <Velocity_Control+0x150>)
 8009278:	f04f 0200 	mov.w	r2, #0
 800927c:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 800927e:	4b41      	ldr	r3, [pc, #260]	; (8009384 <Velocity_Control+0x148>)
 8009280:	2201      	movs	r2, #1
 8009282:	701a      	strb	r2, [r3, #0]
	e = target - now;
 8009284:	ed97 7a05 	vldr	s14, [r7, #20]
 8009288:	edd7 7a04 	vldr	s15, [r7, #16]
 800928c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009290:	edc7 7a07 	vstr	s15, [r7, #28]
	ei += e * T;
 8009294:	ed97 7a07 	vldr	s14, [r7, #28]
 8009298:	edd7 7a03 	vldr	s15, [r7, #12]
 800929c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092a0:	4b39      	ldr	r3, [pc, #228]	; (8009388 <Velocity_Control+0x14c>)
 80092a2:	edd3 7a00 	vldr	s15, [r3]
 80092a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092aa:	4b37      	ldr	r3, [pc, #220]	; (8009388 <Velocity_Control+0x14c>)
 80092ac:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 80092b0:	4b36      	ldr	r3, [pc, #216]	; (800938c <Velocity_Control+0x150>)
 80092b2:	edd3 7a00 	vldr	s15, [r3]
 80092b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80092ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80092be:	ed97 7a03 	vldr	s14, [r7, #12]
 80092c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092c6:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 80092ca:	4a30      	ldr	r2, [pc, #192]	; (800938c <Velocity_Control+0x150>)
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	6013      	str	r3, [r2, #0]

    //o PID制御して、PWMの出力に反映
	R_v_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 80092d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80092d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80092d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092dc:	4b2a      	ldr	r3, [pc, #168]	; (8009388 <Velocity_Control+0x14c>)
 80092de:	edd3 6a00 	vldr	s13, [r3]
 80092e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80092e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80092ee:	edd7 6a00 	vldr	s13, [r7]
 80092f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80092f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092fe:	ee17 0a90 	vmov	r0, s15
 8009302:	f7ff f859 	bl	80083b8 <__aeabi_f2d>
 8009306:	4603      	mov	r3, r0
 8009308:	460c      	mov	r4, r1
 800930a:	ec44 3b10 	vmov	d0, r3, r4
 800930e:	f00c fead 	bl	801606c <round>
 8009312:	ec54 3b10 	vmov	r3, r4, d0
 8009316:	4618      	mov	r0, r3
 8009318:	4621      	mov	r1, r4
 800931a:	f7ff fb55 	bl	80089c8 <__aeabi_d2iz>
 800931e:	4603      	mov	r3, r0
 8009320:	b21a      	sxth	r2, r3
 8009322:	4b1b      	ldr	r3, [pc, #108]	; (8009390 <Velocity_Control+0x154>)
 8009324:	801a      	strh	r2, [r3, #0]
	L_v_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009326:	ed97 7a02 	vldr	s14, [r7, #8]
 800932a:	edd7 7a07 	vldr	s15, [r7, #28]
 800932e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009332:	4b15      	ldr	r3, [pc, #84]	; (8009388 <Velocity_Control+0x14c>)
 8009334:	edd3 6a00 	vldr	s13, [r3]
 8009338:	edd7 7a01 	vldr	s15, [r7, #4]
 800933c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009340:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009344:	edd7 6a00 	vldr	s13, [r7]
 8009348:	edd7 7a06 	vldr	s15, [r7, #24]
 800934c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009354:	ee17 0a90 	vmov	r0, s15
 8009358:	f7ff f82e 	bl	80083b8 <__aeabi_f2d>
 800935c:	4603      	mov	r3, r0
 800935e:	460c      	mov	r4, r1
 8009360:	ec44 3b10 	vmov	d0, r3, r4
 8009364:	f00c fe82 	bl	801606c <round>
 8009368:	ec54 3b10 	vmov	r3, r4, d0
 800936c:	4618      	mov	r0, r3
 800936e:	4621      	mov	r1, r4
 8009370:	f7ff fb2a 	bl	80089c8 <__aeabi_d2iz>
 8009374:	4603      	mov	r3, r0
 8009376:	b21a      	sxth	r2, r3
 8009378:	4b06      	ldr	r3, [pc, #24]	; (8009394 <Velocity_Control+0x158>)
 800937a:	801a      	strh	r2, [r3, #0]

	//o代入は個でよさそう
}
 800937c:	bf00      	nop
 800937e:	3724      	adds	r7, #36	; 0x24
 8009380:	46bd      	mov	sp, r7
 8009382:	bd90      	pop	{r4, r7, pc}
 8009384:	2000027c 	.word	0x2000027c
 8009388:	20000298 	.word	0x20000298
 800938c:	2000029c 	.word	0x2000029c
 8009390:	20004390 	.word	0x20004390
 8009394:	20004384 	.word	0x20004384

08009398 <Right_Velo_Control>:

void Right_Velo_Control(float target, float now, float T, float KP, float KI, float KD){
 8009398:	b590      	push	{r4, r7, lr}
 800939a:	b089      	sub	sp, #36	; 0x24
 800939c:	af00      	add	r7, sp, #0
 800939e:	ed87 0a05 	vstr	s0, [r7, #20]
 80093a2:	edc7 0a04 	vstr	s1, [r7, #16]
 80093a6:	ed87 1a03 	vstr	s2, [r7, #12]
 80093aa:	edc7 1a02 	vstr	s3, [r7, #8]
 80093ae:	ed87 2a01 	vstr	s4, [r7, #4]
 80093b2:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 80093b6:	f04f 0300 	mov.w	r3, #0
 80093ba:	61fb      	str	r3, [r7, #28]
 80093bc:	f04f 0300 	mov.w	r3, #0
 80093c0:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 80093c2:	4b32      	ldr	r3, [pc, #200]	; (800948c <Right_Velo_Control+0xf4>)
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d107      	bne.n	80093da <Right_Velo_Control+0x42>
		ei =0;
 80093ca:	4b31      	ldr	r3, [pc, #196]	; (8009490 <Right_Velo_Control+0xf8>)
 80093cc:	f04f 0200 	mov.w	r2, #0
 80093d0:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80093d2:	4b30      	ldr	r3, [pc, #192]	; (8009494 <Right_Velo_Control+0xfc>)
 80093d4:	f04f 0200 	mov.w	r2, #0
 80093d8:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80093da:	4b2c      	ldr	r3, [pc, #176]	; (800948c <Right_Velo_Control+0xf4>)
 80093dc:	2201      	movs	r2, #1
 80093de:	701a      	strb	r2, [r3, #0]
	e = target - now;
 80093e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80093e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80093e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093ec:	edc7 7a07 	vstr	s15, [r7, #28]
	ei += e * T;
 80093f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80093f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80093f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093fc:	4b24      	ldr	r3, [pc, #144]	; (8009490 <Right_Velo_Control+0xf8>)
 80093fe:	edd3 7a00 	vldr	s15, [r3]
 8009402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009406:	4b22      	ldr	r3, [pc, #136]	; (8009490 <Right_Velo_Control+0xf8>)
 8009408:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 800940c:	4b21      	ldr	r3, [pc, #132]	; (8009494 <Right_Velo_Control+0xfc>)
 800940e:	edd3 7a00 	vldr	s15, [r3]
 8009412:	ed97 7a07 	vldr	s14, [r7, #28]
 8009416:	ee77 6a67 	vsub.f32	s13, s14, s15
 800941a:	ed97 7a03 	vldr	s14, [r7, #12]
 800941e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009422:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 8009426:	4a1b      	ldr	r2, [pc, #108]	; (8009494 <Right_Velo_Control+0xfc>)
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	6013      	str	r3, [r2, #0]

	R_velo_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 800942c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009430:	edd7 7a07 	vldr	s15, [r7, #28]
 8009434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009438:	4b15      	ldr	r3, [pc, #84]	; (8009490 <Right_Velo_Control+0xf8>)
 800943a:	edd3 6a00 	vldr	s13, [r3]
 800943e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009446:	ee37 7a27 	vadd.f32	s14, s14, s15
 800944a:	edd7 6a00 	vldr	s13, [r7]
 800944e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800945a:	ee17 0a90 	vmov	r0, s15
 800945e:	f7fe ffab 	bl	80083b8 <__aeabi_f2d>
 8009462:	4603      	mov	r3, r0
 8009464:	460c      	mov	r4, r1
 8009466:	ec44 3b10 	vmov	d0, r3, r4
 800946a:	f00c fdff 	bl	801606c <round>
 800946e:	ec54 3b10 	vmov	r3, r4, d0
 8009472:	4618      	mov	r0, r3
 8009474:	4621      	mov	r1, r4
 8009476:	f7ff faa7 	bl	80089c8 <__aeabi_d2iz>
 800947a:	4603      	mov	r3, r0
 800947c:	b21a      	sxth	r2, r3
 800947e:	4b06      	ldr	r3, [pc, #24]	; (8009498 <Right_Velo_Control+0x100>)
 8009480:	801a      	strh	r2, [r3, #0]
}
 8009482:	bf00      	nop
 8009484:	3724      	adds	r7, #36	; 0x24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd90      	pop	{r4, r7, pc}
 800948a:	bf00      	nop
 800948c:	2000027c 	.word	0x2000027c
 8009490:	200002a0 	.word	0x200002a0
 8009494:	200002a4 	.word	0x200002a4
 8009498:	2000437c 	.word	0x2000437c

0800949c <Left_Velo_Control>:

void Left_Velo_Control(float target, float now, float T, float KP, float KI, float KD){
 800949c:	b590      	push	{r4, r7, lr}
 800949e:	b089      	sub	sp, #36	; 0x24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	ed87 0a05 	vstr	s0, [r7, #20]
 80094a6:	edc7 0a04 	vstr	s1, [r7, #16]
 80094aa:	ed87 1a03 	vstr	s2, [r7, #12]
 80094ae:	edc7 1a02 	vstr	s3, [r7, #8]
 80094b2:	ed87 2a01 	vstr	s4, [r7, #4]
 80094b6:	edc7 2a00 	vstr	s5, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 80094ba:	f04f 0300 	mov.w	r3, #0
 80094be:	61fb      	str	r3, [r7, #28]
 80094c0:	f04f 0300 	mov.w	r3, #0
 80094c4:	61bb      	str	r3, [r7, #24]
	if(error_reset == 0){
 80094c6:	4b32      	ldr	r3, [pc, #200]	; (8009590 <Left_Velo_Control+0xf4>)
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d107      	bne.n	80094de <Left_Velo_Control+0x42>
		ei =0;
 80094ce:	4b31      	ldr	r3, [pc, #196]	; (8009594 <Left_Velo_Control+0xf8>)
 80094d0:	f04f 0200 	mov.w	r2, #0
 80094d4:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80094d6:	4b30      	ldr	r3, [pc, #192]	; (8009598 <Left_Velo_Control+0xfc>)
 80094d8:	f04f 0200 	mov.w	r2, #0
 80094dc:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80094de:	4b2c      	ldr	r3, [pc, #176]	; (8009590 <Left_Velo_Control+0xf4>)
 80094e0:	2201      	movs	r2, #1
 80094e2:	701a      	strb	r2, [r3, #0]
	e = target - now;
 80094e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80094e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80094ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094f0:	edc7 7a07 	vstr	s15, [r7, #28]
	ei += e * T;
 80094f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80094f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80094fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009500:	4b24      	ldr	r3, [pc, #144]	; (8009594 <Left_Velo_Control+0xf8>)
 8009502:	edd3 7a00 	vldr	s15, [r3]
 8009506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800950a:	4b22      	ldr	r3, [pc, #136]	; (8009594 <Left_Velo_Control+0xf8>)
 800950c:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 8009510:	4b21      	ldr	r3, [pc, #132]	; (8009598 <Left_Velo_Control+0xfc>)
 8009512:	edd3 7a00 	vldr	s15, [r3]
 8009516:	ed97 7a07 	vldr	s14, [r7, #28]
 800951a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800951e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009526:	edc7 7a06 	vstr	s15, [r7, #24]
	e0 = e;
 800952a:	4a1b      	ldr	r2, [pc, #108]	; (8009598 <Left_Velo_Control+0xfc>)
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	6013      	str	r3, [r2, #0]

	L_velo_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009530:	ed97 7a02 	vldr	s14, [r7, #8]
 8009534:	edd7 7a07 	vldr	s15, [r7, #28]
 8009538:	ee27 7a27 	vmul.f32	s14, s14, s15
 800953c:	4b15      	ldr	r3, [pc, #84]	; (8009594 <Left_Velo_Control+0xf8>)
 800953e:	edd3 6a00 	vldr	s13, [r3]
 8009542:	edd7 7a01 	vldr	s15, [r7, #4]
 8009546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800954a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800954e:	edd7 6a00 	vldr	s13, [r7]
 8009552:	edd7 7a06 	vldr	s15, [r7, #24]
 8009556:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800955a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800955e:	ee17 0a90 	vmov	r0, s15
 8009562:	f7fe ff29 	bl	80083b8 <__aeabi_f2d>
 8009566:	4603      	mov	r3, r0
 8009568:	460c      	mov	r4, r1
 800956a:	ec44 3b10 	vmov	d0, r3, r4
 800956e:	f00c fd7d 	bl	801606c <round>
 8009572:	ec54 3b10 	vmov	r3, r4, d0
 8009576:	4618      	mov	r0, r3
 8009578:	4621      	mov	r1, r4
 800957a:	f7ff fa25 	bl	80089c8 <__aeabi_d2iz>
 800957e:	4603      	mov	r3, r0
 8009580:	b21a      	sxth	r2, r3
 8009582:	4b06      	ldr	r3, [pc, #24]	; (800959c <Left_Velo_Control+0x100>)
 8009584:	801a      	strh	r2, [r3, #0]
}
 8009586:	bf00      	nop
 8009588:	3724      	adds	r7, #36	; 0x24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd90      	pop	{r4, r7, pc}
 800958e:	bf00      	nop
 8009590:	2000027c 	.word	0x2000027c
 8009594:	200002a8 	.word	0x200002a8
 8009598:	200002ac 	.word	0x200002ac
 800959c:	200043a2 	.word	0x200043a2

080095a0 <Enc_Velo_Control>:
	R_rotate = (int16_t)round(KP*e_R + KI*ei_R + KD*ed_R);
	L_rotate = (int16_t)round(KP*e_L + KI*ei_L + KD*ed_L);

}

void Enc_Velo_Control(float T, float KP, float KI, float KD){
 80095a0:	b590      	push	{r4, r7, lr}
 80095a2:	b087      	sub	sp, #28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80095aa:	edc7 0a02 	vstr	s1, [r7, #8]
 80095ae:	ed87 1a01 	vstr	s2, [r7, #4]
 80095b2:	edc7 1a00 	vstr	s3, [r7]

	static float ei=0, e0=0;
	 float e=0, ed=0;
 80095b6:	f04f 0300 	mov.w	r3, #0
 80095ba:	617b      	str	r3, [r7, #20]
 80095bc:	f04f 0300 	mov.w	r3, #0
 80095c0:	613b      	str	r3, [r7, #16]
	if(error_reset == 0){
 80095c2:	4b4a      	ldr	r3, [pc, #296]	; (80096ec <Enc_Velo_Control+0x14c>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d107      	bne.n	80095da <Enc_Velo_Control+0x3a>
		ei =0;
 80095ca:	4b49      	ldr	r3, [pc, #292]	; (80096f0 <Enc_Velo_Control+0x150>)
 80095cc:	f04f 0200 	mov.w	r2, #0
 80095d0:	601a      	str	r2, [r3, #0]
		e0 = 0;
 80095d2:	4b48      	ldr	r3, [pc, #288]	; (80096f4 <Enc_Velo_Control+0x154>)
 80095d4:	f04f 0200 	mov.w	r2, #0
 80095d8:	601a      	str	r2, [r3, #0]
	}
	error_reset = 1;
 80095da:	4b44      	ldr	r3, [pc, #272]	; (80096ec <Enc_Velo_Control+0x14c>)
 80095dc:	2201      	movs	r2, #1
 80095de:	701a      	strb	r2, [r3, #0]
	e = L_velocity - R_velocity;
 80095e0:	4b45      	ldr	r3, [pc, #276]	; (80096f8 <Enc_Velo_Control+0x158>)
 80095e2:	ed93 7a00 	vldr	s14, [r3]
 80095e6:	4b45      	ldr	r3, [pc, #276]	; (80096fc <Enc_Velo_Control+0x15c>)
 80095e8:	edd3 7a00 	vldr	s15, [r3]
 80095ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095f0:	edc7 7a05 	vstr	s15, [r7, #20]
	ei += e * T;
 80095f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80095f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80095fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009600:	4b3b      	ldr	r3, [pc, #236]	; (80096f0 <Enc_Velo_Control+0x150>)
 8009602:	edd3 7a00 	vldr	s15, [r3]
 8009606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800960a:	4b39      	ldr	r3, [pc, #228]	; (80096f0 <Enc_Velo_Control+0x150>)
 800960c:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 8009610:	4b38      	ldr	r3, [pc, #224]	; (80096f4 <Enc_Velo_Control+0x154>)
 8009612:	edd3 7a00 	vldr	s15, [r3]
 8009616:	ed97 7a05 	vldr	s14, [r7, #20]
 800961a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800961e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009626:	edc7 7a04 	vstr	s15, [r7, #16]
	e0 = e;
 800962a:	4a32      	ldr	r2, [pc, #200]	; (80096f4 <Enc_Velo_Control+0x154>)
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	6013      	str	r3, [r2, #0]

	R_env_control = (int16_t)round(KP*e + KI*ei + KD*ed);
 8009630:	ed97 7a02 	vldr	s14, [r7, #8]
 8009634:	edd7 7a05 	vldr	s15, [r7, #20]
 8009638:	ee27 7a27 	vmul.f32	s14, s14, s15
 800963c:	4b2c      	ldr	r3, [pc, #176]	; (80096f0 <Enc_Velo_Control+0x150>)
 800963e:	edd3 6a00 	vldr	s13, [r3]
 8009642:	edd7 7a01 	vldr	s15, [r7, #4]
 8009646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800964a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800964e:	edd7 6a00 	vldr	s13, [r7]
 8009652:	edd7 7a04 	vldr	s15, [r7, #16]
 8009656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800965a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800965e:	ee17 0a90 	vmov	r0, s15
 8009662:	f7fe fea9 	bl	80083b8 <__aeabi_f2d>
 8009666:	4603      	mov	r3, r0
 8009668:	460c      	mov	r4, r1
 800966a:	ec44 3b10 	vmov	d0, r3, r4
 800966e:	f00c fcfd 	bl	801606c <round>
 8009672:	ec54 3b10 	vmov	r3, r4, d0
 8009676:	4618      	mov	r0, r3
 8009678:	4621      	mov	r1, r4
 800967a:	f7ff f9a5 	bl	80089c8 <__aeabi_d2iz>
 800967e:	4603      	mov	r3, r0
 8009680:	b21a      	sxth	r2, r3
 8009682:	4b1f      	ldr	r3, [pc, #124]	; (8009700 <Enc_Velo_Control+0x160>)
 8009684:	801a      	strh	r2, [r3, #0]
	L_env_control = -(int16_t)round(KP*e + KI*ei + KD*ed);
 8009686:	ed97 7a02 	vldr	s14, [r7, #8]
 800968a:	edd7 7a05 	vldr	s15, [r7, #20]
 800968e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009692:	4b17      	ldr	r3, [pc, #92]	; (80096f0 <Enc_Velo_Control+0x150>)
 8009694:	edd3 6a00 	vldr	s13, [r3]
 8009698:	edd7 7a01 	vldr	s15, [r7, #4]
 800969c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80096a4:	edd7 6a00 	vldr	s13, [r7]
 80096a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80096ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096b4:	ee17 0a90 	vmov	r0, s15
 80096b8:	f7fe fe7e 	bl	80083b8 <__aeabi_f2d>
 80096bc:	4603      	mov	r3, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	ec44 3b10 	vmov	d0, r3, r4
 80096c4:	f00c fcd2 	bl	801606c <round>
 80096c8:	ec54 3b10 	vmov	r3, r4, d0
 80096cc:	4618      	mov	r0, r3
 80096ce:	4621      	mov	r1, r4
 80096d0:	f7ff f97a 	bl	80089c8 <__aeabi_d2iz>
 80096d4:	4603      	mov	r3, r0
 80096d6:	b21b      	sxth	r3, r3
 80096d8:	b29b      	uxth	r3, r3
 80096da:	425b      	negs	r3, r3
 80096dc:	b29b      	uxth	r3, r3
 80096de:	b21a      	sxth	r2, r3
 80096e0:	4b08      	ldr	r3, [pc, #32]	; (8009704 <Enc_Velo_Control+0x164>)
 80096e2:	801a      	strh	r2, [r3, #0]
}
 80096e4:	bf00      	nop
 80096e6:	371c      	adds	r7, #28
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd90      	pop	{r4, r7, pc}
 80096ec:	2000027c 	.word	0x2000027c
 80096f0:	200002b0 	.word	0x200002b0
 80096f4:	200002b4 	.word	0x200002b4
 80096f8:	2000439c 	.word	0x2000439c
 80096fc:	200043a8 	.word	0x200043a8
 8009700:	20004388 	.word	0x20004388
 8009704:	2000437a 	.word	0x2000437a

08009708 <read_byte>:
#include "ICM_20648.h"

volatile int16_t	xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	4603      	mov	r3, r0
 8009710:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8009712:	79fb      	ldrb	r3, [r7, #7]
 8009714:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009718:	b2db      	uxtb	r3, r3
 800971a:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800971c:	2200      	movs	r2, #0
 800971e:	2104      	movs	r1, #4
 8009720:	480d      	ldr	r0, [pc, #52]	; (8009758 <read_byte+0x50>)
 8009722:	f009 fad3 	bl	8012ccc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8009726:	f107 010f 	add.w	r1, r7, #15
 800972a:	2364      	movs	r3, #100	; 0x64
 800972c:	2201      	movs	r2, #1
 800972e:	480b      	ldr	r0, [pc, #44]	; (800975c <read_byte+0x54>)
 8009730:	f009 ffac 	bl	801368c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 8009734:	f107 010e 	add.w	r1, r7, #14
 8009738:	2364      	movs	r3, #100	; 0x64
 800973a:	2201      	movs	r2, #1
 800973c:	4807      	ldr	r0, [pc, #28]	; (800975c <read_byte+0x54>)
 800973e:	f00a f8d9 	bl	80138f4 <HAL_SPI_Receive>
	CS_SET;
 8009742:	2201      	movs	r2, #1
 8009744:	2104      	movs	r1, #4
 8009746:	4804      	ldr	r0, [pc, #16]	; (8009758 <read_byte+0x50>)
 8009748:	f009 fac0 	bl	8012ccc <HAL_GPIO_WritePin>

	return val;
 800974c:	7bbb      	ldrb	r3, [r7, #14]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	40020c00 	.word	0x40020c00
 800975c:	2000452c 	.word	0x2000452c

08009760 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	460a      	mov	r2, r1
 800976a:	71fb      	strb	r3, [r7, #7]
 800976c:	4613      	mov	r3, r2
 800976e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8009770:	79fb      	ldrb	r3, [r7, #7]
 8009772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009776:	b2db      	uxtb	r3, r3
 8009778:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800977a:	2200      	movs	r2, #0
 800977c:	2104      	movs	r1, #4
 800977e:	480c      	ldr	r0, [pc, #48]	; (80097b0 <write_byte+0x50>)
 8009780:	f009 faa4 	bl	8012ccc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8009784:	f107 010f 	add.w	r1, r7, #15
 8009788:	2364      	movs	r3, #100	; 0x64
 800978a:	2201      	movs	r2, #1
 800978c:	4809      	ldr	r0, [pc, #36]	; (80097b4 <write_byte+0x54>)
 800978e:	f009 ff7d 	bl	801368c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 8009792:	1db9      	adds	r1, r7, #6
 8009794:	2364      	movs	r3, #100	; 0x64
 8009796:	2201      	movs	r2, #1
 8009798:	4806      	ldr	r0, [pc, #24]	; (80097b4 <write_byte+0x54>)
 800979a:	f009 ff77 	bl	801368c <HAL_SPI_Transmit>
	CS_SET;
 800979e:	2201      	movs	r2, #1
 80097a0:	2104      	movs	r1, #4
 80097a2:	4803      	ldr	r0, [pc, #12]	; (80097b0 <write_byte+0x50>)
 80097a4:	f009 fa92 	bl	8012ccc <HAL_GPIO_WritePin>
}
 80097a8:	bf00      	nop
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	40020c00 	.word	0x40020c00
 80097b4:	2000452c 	.word	0x2000452c

080097b8 <IMU_init>:

uint8_t IMU_init() {
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80097be:	2000      	movs	r0, #0
 80097c0:	f7ff ffa2 	bl	8009708 <read_byte>
 80097c4:	4603      	mov	r3, r0
 80097c6:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 80097c8:	79bb      	ldrb	r3, [r7, #6]
 80097ca:	2be0      	cmp	r3, #224	; 0xe0
 80097cc:	d119      	bne.n	8009802 <IMU_init+0x4a>
		ret = 1;
 80097ce:	2301      	movs	r3, #1
 80097d0:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80097d2:	2101      	movs	r1, #1
 80097d4:	2006      	movs	r0, #6
 80097d6:	f7ff ffc3 	bl	8009760 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80097da:	2110      	movs	r1, #16
 80097dc:	2003      	movs	r0, #3
 80097de:	f7ff ffbf 	bl	8009760 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80097e2:	2120      	movs	r1, #32
 80097e4:	207f      	movs	r0, #127	; 0x7f
 80097e6:	f7ff ffbb 	bl	8009760 <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 80097ea:	2117      	movs	r1, #23
 80097ec:	2001      	movs	r0, #1
 80097ee:	f7ff ffb7 	bl	8009760 <write_byte>

		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//	レンジ±16g
 80097f2:	2106      	movs	r1, #6
 80097f4:	2014      	movs	r0, #20
 80097f6:	f7ff ffb3 	bl	8009760 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80097fa:	2100      	movs	r1, #0
 80097fc:	207f      	movs	r0, #127	; 0x7f
 80097fe:	f7ff ffaf 	bl	8009760 <write_byte>
	}
	return ret;
 8009802:	79fb      	ldrb	r3, [r7, #7]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <read_gyro_data>:

void read_gyro_data() {
 800980c:	b598      	push	{r3, r4, r7, lr}
 800980e:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8009810:	2033      	movs	r0, #51	; 0x33
 8009812:	f7ff ff79 	bl	8009708 <read_byte>
 8009816:	4603      	mov	r3, r0
 8009818:	021b      	lsls	r3, r3, #8
 800981a:	b21c      	sxth	r4, r3
 800981c:	2034      	movs	r0, #52	; 0x34
 800981e:	f7ff ff73 	bl	8009708 <read_byte>
 8009822:	4603      	mov	r3, r0
 8009824:	b21b      	sxth	r3, r3
 8009826:	4323      	orrs	r3, r4
 8009828:	b21a      	sxth	r2, r3
 800982a:	4b11      	ldr	r3, [pc, #68]	; (8009870 <read_gyro_data+0x64>)
 800982c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 800982e:	2035      	movs	r0, #53	; 0x35
 8009830:	f7ff ff6a 	bl	8009708 <read_byte>
 8009834:	4603      	mov	r3, r0
 8009836:	021b      	lsls	r3, r3, #8
 8009838:	b21c      	sxth	r4, r3
 800983a:	2036      	movs	r0, #54	; 0x36
 800983c:	f7ff ff64 	bl	8009708 <read_byte>
 8009840:	4603      	mov	r3, r0
 8009842:	b21b      	sxth	r3, r3
 8009844:	4323      	orrs	r3, r4
 8009846:	b21a      	sxth	r2, r3
 8009848:	4b0a      	ldr	r3, [pc, #40]	; (8009874 <read_gyro_data+0x68>)
 800984a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 800984c:	2037      	movs	r0, #55	; 0x37
 800984e:	f7ff ff5b 	bl	8009708 <read_byte>
 8009852:	4603      	mov	r3, r0
 8009854:	021b      	lsls	r3, r3, #8
 8009856:	b21c      	sxth	r4, r3
 8009858:	2038      	movs	r0, #56	; 0x38
 800985a:	f7ff ff55 	bl	8009708 <read_byte>
 800985e:	4603      	mov	r3, r0
 8009860:	b21b      	sxth	r3, r3
 8009862:	4323      	orrs	r3, r4
 8009864:	b21a      	sxth	r2, r3
 8009866:	4b04      	ldr	r3, [pc, #16]	; (8009878 <read_gyro_data+0x6c>)
 8009868:	801a      	strh	r2, [r3, #0]
}
 800986a:	bf00      	nop
 800986c:	bd98      	pop	{r3, r4, r7, pc}
 800986e:	bf00      	nop
 8009870:	200043b6 	.word	0x200043b6
 8009874:	200043b4 	.word	0x200043b4
 8009878:	200043ae 	.word	0x200043ae

0800987c <read_accel_data>:

void read_accel_data() {
 800987c:	b598      	push	{r3, r4, r7, lr}
 800987e:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8009880:	202d      	movs	r0, #45	; 0x2d
 8009882:	f7ff ff41 	bl	8009708 <read_byte>
 8009886:	4603      	mov	r3, r0
 8009888:	021b      	lsls	r3, r3, #8
 800988a:	b21c      	sxth	r4, r3
 800988c:	202e      	movs	r0, #46	; 0x2e
 800988e:	f7ff ff3b 	bl	8009708 <read_byte>
 8009892:	4603      	mov	r3, r0
 8009894:	b21b      	sxth	r3, r3
 8009896:	4323      	orrs	r3, r4
 8009898:	b21a      	sxth	r2, r3
 800989a:	4b11      	ldr	r3, [pc, #68]	; (80098e0 <read_accel_data+0x64>)
 800989c:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 800989e:	202f      	movs	r0, #47	; 0x2f
 80098a0:	f7ff ff32 	bl	8009708 <read_byte>
 80098a4:	4603      	mov	r3, r0
 80098a6:	021b      	lsls	r3, r3, #8
 80098a8:	b21c      	sxth	r4, r3
 80098aa:	2030      	movs	r0, #48	; 0x30
 80098ac:	f7ff ff2c 	bl	8009708 <read_byte>
 80098b0:	4603      	mov	r3, r0
 80098b2:	b21b      	sxth	r3, r3
 80098b4:	4323      	orrs	r3, r4
 80098b6:	b21a      	sxth	r2, r3
 80098b8:	4b0a      	ldr	r3, [pc, #40]	; (80098e4 <read_accel_data+0x68>)
 80098ba:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 80098bc:	2031      	movs	r0, #49	; 0x31
 80098be:	f7ff ff23 	bl	8009708 <read_byte>
 80098c2:	4603      	mov	r3, r0
 80098c4:	021b      	lsls	r3, r3, #8
 80098c6:	b21c      	sxth	r4, r3
 80098c8:	2032      	movs	r0, #50	; 0x32
 80098ca:	f7ff ff1d 	bl	8009708 <read_byte>
 80098ce:	4603      	mov	r3, r0
 80098d0:	b21b      	sxth	r3, r3
 80098d2:	4323      	orrs	r3, r4
 80098d4:	b21a      	sxth	r2, r3
 80098d6:	4b04      	ldr	r3, [pc, #16]	; (80098e8 <read_accel_data+0x6c>)
 80098d8:	801a      	strh	r2, [r3, #0]
}
 80098da:	bf00      	nop
 80098dc:	bd98      	pop	{r3, r4, r7, pc}
 80098de:	bf00      	nop
 80098e0:	200043b2 	.word	0x200043b2
 80098e4:	200043b8 	.word	0x200043b8
 80098e8:	200043b0 	.word	0x200043b0

080098ec <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 80098f4:	1d39      	adds	r1, r7, #4
 80098f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098fa:	2201      	movs	r2, #1
 80098fc:	4803      	ldr	r0, [pc, #12]	; (800990c <__io_putchar+0x20>)
 80098fe:	f00b ff55 	bl	80157ac <HAL_UART_Transmit>
	return ch;
 8009902:	687b      	ldr	r3, [r7, #4]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3708      	adds	r7, #8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	200045d4 	.word	0x200045d4

08009910 <Motor_Count_Clear>:
	*R_counter = round(567 * R_Volt);
	*L_counter = round(567 * L_Volt);

}

void Motor_Count_Clear(){
 8009910:	b480      	push	{r7}
 8009912:	af00      	add	r7, sp, #0
	 L_motor = L_v_control =  L_wall = L_leftwall = L_rightwall = L_rotate = L_angular_velocity = L_env_control = L_velo_control = 0;
 8009914:	4b2d      	ldr	r3, [pc, #180]	; (80099cc <Motor_Count_Clear+0xbc>)
 8009916:	2200      	movs	r2, #0
 8009918:	801a      	strh	r2, [r3, #0]
 800991a:	4b2c      	ldr	r3, [pc, #176]	; (80099cc <Motor_Count_Clear+0xbc>)
 800991c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009920:	4b2b      	ldr	r3, [pc, #172]	; (80099d0 <Motor_Count_Clear+0xc0>)
 8009922:	801a      	strh	r2, [r3, #0]
 8009924:	4b2a      	ldr	r3, [pc, #168]	; (80099d0 <Motor_Count_Clear+0xc0>)
 8009926:	f9b3 2000 	ldrsh.w	r2, [r3]
 800992a:	4b2a      	ldr	r3, [pc, #168]	; (80099d4 <Motor_Count_Clear+0xc4>)
 800992c:	801a      	strh	r2, [r3, #0]
 800992e:	4b29      	ldr	r3, [pc, #164]	; (80099d4 <Motor_Count_Clear+0xc4>)
 8009930:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009934:	4b28      	ldr	r3, [pc, #160]	; (80099d8 <Motor_Count_Clear+0xc8>)
 8009936:	801a      	strh	r2, [r3, #0]
 8009938:	4b27      	ldr	r3, [pc, #156]	; (80099d8 <Motor_Count_Clear+0xc8>)
 800993a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800993e:	4b27      	ldr	r3, [pc, #156]	; (80099dc <Motor_Count_Clear+0xcc>)
 8009940:	801a      	strh	r2, [r3, #0]
 8009942:	4b26      	ldr	r3, [pc, #152]	; (80099dc <Motor_Count_Clear+0xcc>)
 8009944:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009948:	4b25      	ldr	r3, [pc, #148]	; (80099e0 <Motor_Count_Clear+0xd0>)
 800994a:	801a      	strh	r2, [r3, #0]
 800994c:	4b24      	ldr	r3, [pc, #144]	; (80099e0 <Motor_Count_Clear+0xd0>)
 800994e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009952:	4b24      	ldr	r3, [pc, #144]	; (80099e4 <Motor_Count_Clear+0xd4>)
 8009954:	801a      	strh	r2, [r3, #0]
 8009956:	4b23      	ldr	r3, [pc, #140]	; (80099e4 <Motor_Count_Clear+0xd4>)
 8009958:	f9b3 2000 	ldrsh.w	r2, [r3]
 800995c:	4b22      	ldr	r3, [pc, #136]	; (80099e8 <Motor_Count_Clear+0xd8>)
 800995e:	801a      	strh	r2, [r3, #0]
 8009960:	4b21      	ldr	r3, [pc, #132]	; (80099e8 <Motor_Count_Clear+0xd8>)
 8009962:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009966:	4b21      	ldr	r3, [pc, #132]	; (80099ec <Motor_Count_Clear+0xdc>)
 8009968:	801a      	strh	r2, [r3, #0]
	 R_motor = R_v_control = R_wall = R_leftwall = R_rightwall = R_rotate = R_angular_velocity = R_env_control = R_velo_control = 0;
 800996a:	4b21      	ldr	r3, [pc, #132]	; (80099f0 <Motor_Count_Clear+0xe0>)
 800996c:	2200      	movs	r2, #0
 800996e:	801a      	strh	r2, [r3, #0]
 8009970:	4b1f      	ldr	r3, [pc, #124]	; (80099f0 <Motor_Count_Clear+0xe0>)
 8009972:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009976:	4b1f      	ldr	r3, [pc, #124]	; (80099f4 <Motor_Count_Clear+0xe4>)
 8009978:	801a      	strh	r2, [r3, #0]
 800997a:	4b1e      	ldr	r3, [pc, #120]	; (80099f4 <Motor_Count_Clear+0xe4>)
 800997c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009980:	4b1d      	ldr	r3, [pc, #116]	; (80099f8 <Motor_Count_Clear+0xe8>)
 8009982:	801a      	strh	r2, [r3, #0]
 8009984:	4b1c      	ldr	r3, [pc, #112]	; (80099f8 <Motor_Count_Clear+0xe8>)
 8009986:	f9b3 2000 	ldrsh.w	r2, [r3]
 800998a:	4b1c      	ldr	r3, [pc, #112]	; (80099fc <Motor_Count_Clear+0xec>)
 800998c:	801a      	strh	r2, [r3, #0]
 800998e:	4b1b      	ldr	r3, [pc, #108]	; (80099fc <Motor_Count_Clear+0xec>)
 8009990:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009994:	4b1a      	ldr	r3, [pc, #104]	; (8009a00 <Motor_Count_Clear+0xf0>)
 8009996:	801a      	strh	r2, [r3, #0]
 8009998:	4b19      	ldr	r3, [pc, #100]	; (8009a00 <Motor_Count_Clear+0xf0>)
 800999a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800999e:	4b19      	ldr	r3, [pc, #100]	; (8009a04 <Motor_Count_Clear+0xf4>)
 80099a0:	801a      	strh	r2, [r3, #0]
 80099a2:	4b18      	ldr	r3, [pc, #96]	; (8009a04 <Motor_Count_Clear+0xf4>)
 80099a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099a8:	4b17      	ldr	r3, [pc, #92]	; (8009a08 <Motor_Count_Clear+0xf8>)
 80099aa:	801a      	strh	r2, [r3, #0]
 80099ac:	4b16      	ldr	r3, [pc, #88]	; (8009a08 <Motor_Count_Clear+0xf8>)
 80099ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099b2:	4b16      	ldr	r3, [pc, #88]	; (8009a0c <Motor_Count_Clear+0xfc>)
 80099b4:	801a      	strh	r2, [r3, #0]
 80099b6:	4b15      	ldr	r3, [pc, #84]	; (8009a0c <Motor_Count_Clear+0xfc>)
 80099b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099bc:	4b14      	ldr	r3, [pc, #80]	; (8009a10 <Motor_Count_Clear+0x100>)
 80099be:	801a      	strh	r2, [r3, #0]
}
 80099c0:	bf00      	nop
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	200043a2 	.word	0x200043a2
 80099d0:	2000437a 	.word	0x2000437a
 80099d4:	20004392 	.word	0x20004392
 80099d8:	20004398 	.word	0x20004398
 80099dc:	20004378 	.word	0x20004378
 80099e0:	20004386 	.word	0x20004386
 80099e4:	200043a0 	.word	0x200043a0
 80099e8:	20004384 	.word	0x20004384
 80099ec:	20004ff0 	.word	0x20004ff0
 80099f0:	2000437c 	.word	0x2000437c
 80099f4:	20004388 	.word	0x20004388
 80099f8:	20004396 	.word	0x20004396
 80099fc:	2000439a 	.word	0x2000439a
 8009a00:	20004394 	.word	0x20004394
 8009a04:	200043ac 	.word	0x200043ac
 8009a08:	2000438a 	.word	0x2000438a
 8009a0c:	20004390 	.word	0x20004390
 8009a10:	2000449c 	.word	0x2000449c

08009a14 <Tim_Count>:

void Tim_Count(){
 8009a14:	b598      	push	{r3, r4, r7, lr}
 8009a16:	af00      	add	r7, sp, #0


	if(mode.select%2 != 1){
 8009a18:	4b19      	ldr	r3, [pc, #100]	; (8009a80 <Tim_Count+0x6c>)
 8009a1a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	bfb8      	it	lt
 8009a26:	425b      	neglt	r3, r3
 8009a28:	b25b      	sxtb	r3, r3
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d025      	beq.n	8009a7a <Tim_Count+0x66>
		timer += 1;
 8009a2e:	4b15      	ldr	r3, [pc, #84]	; (8009a84 <Tim_Count+0x70>)
 8009a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a34:	f04f 0200 	mov.w	r2, #0
 8009a38:	4b13      	ldr	r3, [pc, #76]	; (8009a88 <Tim_Count+0x74>)
 8009a3a:	f7fe fb5f 	bl	80080fc <__adddf3>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	460c      	mov	r4, r1
 8009a42:	4a10      	ldr	r2, [pc, #64]	; (8009a84 <Tim_Count+0x70>)
 8009a44:	e9c2 3400 	strd	r3, r4, [r2]
		if(timer == 1000){
 8009a48:	4b0e      	ldr	r3, [pc, #56]	; (8009a84 <Tim_Count+0x70>)
 8009a4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a4e:	f04f 0200 	mov.w	r2, #0
 8009a52:	4b0e      	ldr	r3, [pc, #56]	; (8009a8c <Tim_Count+0x78>)
 8009a54:	f7fe ff70 	bl	8008938 <__aeabi_dcmpeq>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d100      	bne.n	8009a60 <Tim_Count+0x4c>
			self_timer ++;
		}
	}

}
 8009a5e:	e00c      	b.n	8009a7a <Tim_Count+0x66>
			self_timer ++;
 8009a60:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <Tim_Count+0x7c>)
 8009a62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a66:	f04f 0200 	mov.w	r2, #0
 8009a6a:	4b07      	ldr	r3, [pc, #28]	; (8009a88 <Tim_Count+0x74>)
 8009a6c:	f7fe fb46 	bl	80080fc <__adddf3>
 8009a70:	4603      	mov	r3, r0
 8009a72:	460c      	mov	r4, r1
 8009a74:	4a06      	ldr	r2, [pc, #24]	; (8009a90 <Tim_Count+0x7c>)
 8009a76:	e9c2 3400 	strd	r3, r4, [r2]
}
 8009a7a:	bf00      	nop
 8009a7c:	bd98      	pop	{r3, r4, r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20000074 	.word	0x20000074
 8009a84:	200002e8 	.word	0x200002e8
 8009a88:	3ff00000 	.word	0x3ff00000
 8009a8c:	408f4000 	.word	0x408f4000
 8009a90:	200002e0 	.word	0x200002e0

08009a94 <map_init>:

void map_init(){
 8009a94:	b4b0      	push	{r4, r5, r7}
 8009a96:	af00      	add	r7, sp, #0
	static int i = 0, j=0;

	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009a98:	4b3c      	ldr	r3, [pc, #240]	; (8009b8c <map_init+0xf8>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	e06c      	b.n	8009b7a <map_init+0xe6>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009aa0:	4b3b      	ldr	r3, [pc, #236]	; (8009b90 <map_init+0xfc>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	601a      	str	r2, [r3, #0]
 8009aa6:	e05f      	b.n	8009b68 <map_init+0xd4>
			wall[i][j].north
			= wall[i][j].east
			= wall[i][j].south
			= wall[i][j].west = UNKNOWN;
 8009aa8:	4b38      	ldr	r3, [pc, #224]	; (8009b8c <map_init+0xf8>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	4b38      	ldr	r3, [pc, #224]	; (8009b90 <map_init+0xfc>)
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	4c38      	ldr	r4, [pc, #224]	; (8009b94 <map_init+0x100>)
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	00db      	lsls	r3, r3, #3
 8009ab6:	4413      	add	r3, r2
 8009ab8:	1819      	adds	r1, r3, r0
 8009aba:	f814 3011 	ldrb.w	r3, [r4, r1, lsl #1]
 8009abe:	2502      	movs	r5, #2
 8009ac0:	f365 1387 	bfi	r3, r5, #6, #2
 8009ac4:	f804 3011 	strb.w	r3, [r4, r1, lsl #1]
			= wall[i][j].south
 8009ac8:	4b30      	ldr	r3, [pc, #192]	; (8009b8c <map_init+0xf8>)
 8009aca:	6819      	ldr	r1, [r3, #0]
 8009acc:	4b30      	ldr	r3, [pc, #192]	; (8009b90 <map_init+0xfc>)
 8009ace:	681c      	ldr	r4, [r3, #0]
			= wall[i][j].west = UNKNOWN;
 8009ad0:	4d30      	ldr	r5, [pc, #192]	; (8009b94 <map_init+0x100>)
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	00db      	lsls	r3, r3, #3
 8009ad6:	4413      	add	r3, r2
 8009ad8:	4403      	add	r3, r0
 8009ada:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 8009ade:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009ae2:	b2dd      	uxtb	r5, r3
 8009ae4:	482b      	ldr	r0, [pc, #172]	; (8009b94 <map_init+0x100>)
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	00db      	lsls	r3, r3, #3
 8009aea:	440b      	add	r3, r1
 8009aec:	191a      	adds	r2, r3, r4
 8009aee:	f810 3012 	ldrb.w	r3, [r0, r2, lsl #1]
 8009af2:	f365 1305 	bfi	r3, r5, #4, #2
 8009af6:	f800 3012 	strb.w	r3, [r0, r2, lsl #1]
			= wall[i][j].east
 8009afa:	4b24      	ldr	r3, [pc, #144]	; (8009b8c <map_init+0xf8>)
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	4b24      	ldr	r3, [pc, #144]	; (8009b90 <map_init+0xfc>)
 8009b00:	6818      	ldr	r0, [r3, #0]
			= wall[i][j].south
 8009b02:	4d24      	ldr	r5, [pc, #144]	; (8009b94 <map_init+0x100>)
 8009b04:	460b      	mov	r3, r1
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	440b      	add	r3, r1
 8009b0a:	4423      	add	r3, r4
 8009b0c:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 8009b10:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009b14:	b2dd      	uxtb	r5, r3
 8009b16:	4c1f      	ldr	r4, [pc, #124]	; (8009b94 <map_init+0x100>)
 8009b18:	4613      	mov	r3, r2
 8009b1a:	00db      	lsls	r3, r3, #3
 8009b1c:	4413      	add	r3, r2
 8009b1e:	1819      	adds	r1, r3, r0
 8009b20:	f814 3011 	ldrb.w	r3, [r4, r1, lsl #1]
 8009b24:	f365 0383 	bfi	r3, r5, #2, #2
 8009b28:	f804 3011 	strb.w	r3, [r4, r1, lsl #1]
			wall[i][j].north
 8009b2c:	4b17      	ldr	r3, [pc, #92]	; (8009b8c <map_init+0xf8>)
 8009b2e:	681c      	ldr	r4, [r3, #0]
 8009b30:	4b17      	ldr	r3, [pc, #92]	; (8009b90 <map_init+0xfc>)
 8009b32:	681d      	ldr	r5, [r3, #0]
			= wall[i][j].east
 8009b34:	4917      	ldr	r1, [pc, #92]	; (8009b94 <map_init+0x100>)
 8009b36:	4613      	mov	r3, r2
 8009b38:	00db      	lsls	r3, r3, #3
 8009b3a:	4413      	add	r3, r2
 8009b3c:	4403      	add	r3, r0
 8009b3e:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009b42:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009b46:	b2d8      	uxtb	r0, r3
 8009b48:	4912      	ldr	r1, [pc, #72]	; (8009b94 <map_init+0x100>)
 8009b4a:	4623      	mov	r3, r4
 8009b4c:	00db      	lsls	r3, r3, #3
 8009b4e:	4423      	add	r3, r4
 8009b50:	195a      	adds	r2, r3, r5
 8009b52:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 8009b56:	f360 0301 	bfi	r3, r0, #0, #2
 8009b5a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009b5e:	4b0c      	ldr	r3, [pc, #48]	; (8009b90 <map_init+0xfc>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3301      	adds	r3, #1
 8009b64:	4a0a      	ldr	r2, [pc, #40]	; (8009b90 <map_init+0xfc>)
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	4b09      	ldr	r3, [pc, #36]	; (8009b90 <map_init+0xfc>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b08      	cmp	r3, #8
 8009b6e:	dd9b      	ble.n	8009aa8 <map_init+0x14>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009b70:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <map_init+0xf8>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3301      	adds	r3, #1
 8009b76:	4a05      	ldr	r2, [pc, #20]	; (8009b8c <map_init+0xf8>)
 8009b78:	6013      	str	r3, [r2, #0]
 8009b7a:	4b04      	ldr	r3, [pc, #16]	; (8009b8c <map_init+0xf8>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b08      	cmp	r3, #8
 8009b80:	dd8e      	ble.n	8009aa0 <map_init+0xc>

		}

	}
}
 8009b82:	bf00      	nop
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bcb0      	pop	{r4, r5, r7}
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	20004318 	.word	0x20004318
 8009b90:	2000431c 	.word	0x2000431c
 8009b94:	20004f0c 	.word	0x20004f0c

08009b98 <mapcopy>:

void mapcopy(){
 8009b98:	b490      	push	{r4, r7}
 8009b9a:	af00      	add	r7, sp, #0
		}

	}
#endif

	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009b9c:	4b4f      	ldr	r3, [pc, #316]	; (8009cdc <mapcopy+0x144>)
 8009b9e:	2208      	movs	r2, #8
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	e065      	b.n	8009c70 <mapcopy+0xd8>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009ba4:	4b4e      	ldr	r3, [pc, #312]	; (8009ce0 <mapcopy+0x148>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	e058      	b.n	8009c5e <mapcopy+0xc6>
			work_ram[k] = wall[i][j].north;
 8009bac:	4b4c      	ldr	r3, [pc, #304]	; (8009ce0 <mapcopy+0x148>)
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	4b4a      	ldr	r3, [pc, #296]	; (8009cdc <mapcopy+0x144>)
 8009bb2:	6819      	ldr	r1, [r3, #0]
 8009bb4:	484b      	ldr	r0, [pc, #300]	; (8009ce4 <mapcopy+0x14c>)
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	00db      	lsls	r3, r3, #3
 8009bba:	4413      	add	r3, r2
 8009bbc:	440b      	add	r3, r1
 8009bbe:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8009bc2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	4b47      	ldr	r3, [pc, #284]	; (8009ce8 <mapcopy+0x150>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4611      	mov	r1, r2
 8009bce:	4a47      	ldr	r2, [pc, #284]	; (8009cec <mapcopy+0x154>)
 8009bd0:	54d1      	strb	r1, [r2, r3]
			work_ram[k+1] = wall[i][j].east;
 8009bd2:	4b43      	ldr	r3, [pc, #268]	; (8009ce0 <mapcopy+0x148>)
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	4b41      	ldr	r3, [pc, #260]	; (8009cdc <mapcopy+0x144>)
 8009bd8:	6819      	ldr	r1, [r3, #0]
 8009bda:	4842      	ldr	r0, [pc, #264]	; (8009ce4 <mapcopy+0x14c>)
 8009bdc:	4613      	mov	r3, r2
 8009bde:	00db      	lsls	r3, r3, #3
 8009be0:	4413      	add	r3, r2
 8009be2:	440b      	add	r3, r1
 8009be4:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8009be8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	4b3e      	ldr	r3, [pc, #248]	; (8009ce8 <mapcopy+0x150>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	4611      	mov	r1, r2
 8009bf6:	4a3d      	ldr	r2, [pc, #244]	; (8009cec <mapcopy+0x154>)
 8009bf8:	54d1      	strb	r1, [r2, r3]
			work_ram[k+2] = wall[i][j].south;
 8009bfa:	4b39      	ldr	r3, [pc, #228]	; (8009ce0 <mapcopy+0x148>)
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	4b37      	ldr	r3, [pc, #220]	; (8009cdc <mapcopy+0x144>)
 8009c00:	6819      	ldr	r1, [r3, #0]
 8009c02:	4838      	ldr	r0, [pc, #224]	; (8009ce4 <mapcopy+0x14c>)
 8009c04:	4613      	mov	r3, r2
 8009c06:	00db      	lsls	r3, r3, #3
 8009c08:	4413      	add	r3, r2
 8009c0a:	440b      	add	r3, r1
 8009c0c:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8009c10:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	4b34      	ldr	r3, [pc, #208]	; (8009ce8 <mapcopy+0x150>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3302      	adds	r3, #2
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	4a33      	ldr	r2, [pc, #204]	; (8009cec <mapcopy+0x154>)
 8009c20:	54d1      	strb	r1, [r2, r3]
			work_ram[k+3] = wall[i][j].west;
 8009c22:	4b2f      	ldr	r3, [pc, #188]	; (8009ce0 <mapcopy+0x148>)
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	4b2d      	ldr	r3, [pc, #180]	; (8009cdc <mapcopy+0x144>)
 8009c28:	6819      	ldr	r1, [r3, #0]
 8009c2a:	482e      	ldr	r0, [pc, #184]	; (8009ce4 <mapcopy+0x14c>)
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	00db      	lsls	r3, r3, #3
 8009c30:	4413      	add	r3, r2
 8009c32:	440b      	add	r3, r1
 8009c34:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8009c38:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009c3c:	b2da      	uxtb	r2, r3
 8009c3e:	4b2a      	ldr	r3, [pc, #168]	; (8009ce8 <mapcopy+0x150>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	3303      	adds	r3, #3
 8009c44:	4611      	mov	r1, r2
 8009c46:	4a29      	ldr	r2, [pc, #164]	; (8009cec <mapcopy+0x154>)
 8009c48:	54d1      	strb	r1, [r2, r3]
			k+=4;
 8009c4a:	4b27      	ldr	r3, [pc, #156]	; (8009ce8 <mapcopy+0x150>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	3304      	adds	r3, #4
 8009c50:	4a25      	ldr	r2, [pc, #148]	; (8009ce8 <mapcopy+0x150>)
 8009c52:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009c54:	4b22      	ldr	r3, [pc, #136]	; (8009ce0 <mapcopy+0x148>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	4a21      	ldr	r2, [pc, #132]	; (8009ce0 <mapcopy+0x148>)
 8009c5c:	6013      	str	r3, [r2, #0]
 8009c5e:	4b20      	ldr	r3, [pc, #128]	; (8009ce0 <mapcopy+0x148>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b08      	cmp	r3, #8
 8009c64:	dda2      	ble.n	8009bac <mapcopy+0x14>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009c66:	4b1d      	ldr	r3, [pc, #116]	; (8009cdc <mapcopy+0x144>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	4a1b      	ldr	r2, [pc, #108]	; (8009cdc <mapcopy+0x144>)
 8009c6e:	6013      	str	r3, [r2, #0]
 8009c70:	4b1a      	ldr	r3, [pc, #104]	; (8009cdc <mapcopy+0x144>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	da95      	bge.n	8009ba4 <mapcopy+0xc>
		//要�?は4*NOS*NOS番目 - 1 まで�?ま�?
		//kは60まで行ったあと�?4*NOS*NOS になって値が�?�らず終わ�?

	}

	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009c78:	4b18      	ldr	r3, [pc, #96]	; (8009cdc <mapcopy+0x144>)
 8009c7a:	2208      	movs	r2, #8
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	e025      	b.n	8009ccc <mapcopy+0x134>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009c80:	4b17      	ldr	r3, [pc, #92]	; (8009ce0 <mapcopy+0x148>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	e018      	b.n	8009cba <mapcopy+0x122>
			work_ram[k] = walk_map[i][j];
 8009c88:	4b15      	ldr	r3, [pc, #84]	; (8009ce0 <mapcopy+0x148>)
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	4b13      	ldr	r3, [pc, #76]	; (8009cdc <mapcopy+0x144>)
 8009c8e:	6818      	ldr	r0, [r3, #0]
 8009c90:	4b15      	ldr	r3, [pc, #84]	; (8009ce8 <mapcopy+0x150>)
 8009c92:	6819      	ldr	r1, [r3, #0]
 8009c94:	4c16      	ldr	r4, [pc, #88]	; (8009cf0 <mapcopy+0x158>)
 8009c96:	4613      	mov	r3, r2
 8009c98:	00db      	lsls	r3, r3, #3
 8009c9a:	4413      	add	r3, r2
 8009c9c:	4423      	add	r3, r4
 8009c9e:	4403      	add	r3, r0
 8009ca0:	781a      	ldrb	r2, [r3, #0]
 8009ca2:	4b12      	ldr	r3, [pc, #72]	; (8009cec <mapcopy+0x154>)
 8009ca4:	545a      	strb	r2, [r3, r1]
			k+=1;
 8009ca6:	4b10      	ldr	r3, [pc, #64]	; (8009ce8 <mapcopy+0x150>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3301      	adds	r3, #1
 8009cac:	4a0e      	ldr	r2, [pc, #56]	; (8009ce8 <mapcopy+0x150>)
 8009cae:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009cb0:	4b0b      	ldr	r3, [pc, #44]	; (8009ce0 <mapcopy+0x148>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	4a0a      	ldr	r2, [pc, #40]	; (8009ce0 <mapcopy+0x148>)
 8009cb8:	6013      	str	r3, [r2, #0]
 8009cba:	4b09      	ldr	r3, [pc, #36]	; (8009ce0 <mapcopy+0x148>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b08      	cmp	r3, #8
 8009cc0:	dde2      	ble.n	8009c88 <mapcopy+0xf0>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009cc2:	4b06      	ldr	r3, [pc, #24]	; (8009cdc <mapcopy+0x144>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	4a04      	ldr	r2, [pc, #16]	; (8009cdc <mapcopy+0x144>)
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	4b03      	ldr	r3, [pc, #12]	; (8009cdc <mapcopy+0x144>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	dad5      	bge.n	8009c80 <mapcopy+0xe8>
//	if(i <= 10){
//		work_ram[i][0] = wall[1][1].east;
//		i++;
//	}
//wall[4][4].south = 64? why
}
 8009cd4:	bf00      	nop
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bc90      	pop	{r4, r7}
 8009cda:	4770      	bx	lr
 8009cdc:	20004320 	.word	0x20004320
 8009ce0:	20004324 	.word	0x20004324
 8009ce4:	20004f0c 	.word	0x20004f0c
 8009ce8:	20004328 	.word	0x20004328
 8009cec:	20000318 	.word	0x20000318
 8009cf0:	20004a60 	.word	0x20004a60

08009cf4 <mapprint>:

void mapprint(){
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	af00      	add	r7, sp, #0

	static int i = 0, j=0,k=0;
#if 1
	//迷路�?報
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009cf8:	4b48      	ldr	r3, [pc, #288]	; (8009e1c <mapprint+0x128>)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]
 8009cfe:	e053      	b.n	8009da8 <mapprint+0xb4>
		for(j=0; j < NUMBER_OF_SQUARES * 4; j++){
 8009d00:	4b47      	ldr	r3, [pc, #284]	; (8009e20 <mapprint+0x12c>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	601a      	str	r2, [r3, #0]
 8009d06:	e043      	b.n	8009d90 <mapprint+0x9c>
			printf("%u",work_ram[k]);
 8009d08:	4b46      	ldr	r3, [pc, #280]	; (8009e24 <mapprint+0x130>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a46      	ldr	r2, [pc, #280]	; (8009e28 <mapprint+0x134>)
 8009d0e:	5cd3      	ldrb	r3, [r2, r3]
 8009d10:	4619      	mov	r1, r3
 8009d12:	4846      	ldr	r0, [pc, #280]	; (8009e2c <mapprint+0x138>)
 8009d14:	f00c fe8e 	bl	8016a34 <iprintf>
			if((k+1)%(NUMBER_OF_SQUARES * 4) != 0){
 8009d18:	4b42      	ldr	r3, [pc, #264]	; (8009e24 <mapprint+0x130>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	1c59      	adds	r1, r3, #1
 8009d1e:	4b44      	ldr	r3, [pc, #272]	; (8009e30 <mapprint+0x13c>)
 8009d20:	fb83 2301 	smull	r2, r3, r3, r1
 8009d24:	10da      	asrs	r2, r3, #3
 8009d26:	17cb      	asrs	r3, r1, #31
 8009d28:	1ad2      	subs	r2, r2, r3
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	00db      	lsls	r3, r3, #3
 8009d2e:	4413      	add	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	1aca      	subs	r2, r1, r3
 8009d34:	2a00      	cmp	r2, #0
 8009d36:	d00e      	beq.n	8009d56 <mapprint+0x62>
			if((k+1) >= 4 && (k+1)%4 == 0)
 8009d38:	4b3a      	ldr	r3, [pc, #232]	; (8009e24 <mapprint+0x130>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	dd09      	ble.n	8009d56 <mapprint+0x62>
 8009d42:	4b38      	ldr	r3, [pc, #224]	; (8009e24 <mapprint+0x130>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3301      	adds	r3, #1
 8009d48:	f003 0303 	and.w	r3, r3, #3
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d102      	bne.n	8009d56 <mapprint+0x62>
				printf("  ");
 8009d50:	4838      	ldr	r0, [pc, #224]	; (8009e34 <mapprint+0x140>)
 8009d52:	f00c fe6f 	bl	8016a34 <iprintf>
			}
			if((k+1)%(NUMBER_OF_SQUARES * 4) == 0){
 8009d56:	4b33      	ldr	r3, [pc, #204]	; (8009e24 <mapprint+0x130>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	1c59      	adds	r1, r3, #1
 8009d5c:	4b34      	ldr	r3, [pc, #208]	; (8009e30 <mapprint+0x13c>)
 8009d5e:	fb83 2301 	smull	r2, r3, r3, r1
 8009d62:	10da      	asrs	r2, r3, #3
 8009d64:	17cb      	asrs	r3, r1, #31
 8009d66:	1ad2      	subs	r2, r2, r3
 8009d68:	4613      	mov	r3, r2
 8009d6a:	00db      	lsls	r3, r3, #3
 8009d6c:	4413      	add	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	1aca      	subs	r2, r1, r3
 8009d72:	2a00      	cmp	r2, #0
 8009d74:	d102      	bne.n	8009d7c <mapprint+0x88>
				printf("\r\n");
 8009d76:	4830      	ldr	r0, [pc, #192]	; (8009e38 <mapprint+0x144>)
 8009d78:	f00c fed0 	bl	8016b1c <puts>
			}
			k++;
 8009d7c:	4b29      	ldr	r3, [pc, #164]	; (8009e24 <mapprint+0x130>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	3301      	adds	r3, #1
 8009d82:	4a28      	ldr	r2, [pc, #160]	; (8009e24 <mapprint+0x130>)
 8009d84:	6013      	str	r3, [r2, #0]
		for(j=0; j < NUMBER_OF_SQUARES * 4; j++){
 8009d86:	4b26      	ldr	r3, [pc, #152]	; (8009e20 <mapprint+0x12c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	4a24      	ldr	r2, [pc, #144]	; (8009e20 <mapprint+0x12c>)
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	4b23      	ldr	r3, [pc, #140]	; (8009e20 <mapprint+0x12c>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b23      	cmp	r3, #35	; 0x23
 8009d96:	ddb7      	ble.n	8009d08 <mapprint+0x14>
		}
		printf("\r\n");
 8009d98:	4827      	ldr	r0, [pc, #156]	; (8009e38 <mapprint+0x144>)
 8009d9a:	f00c febf 	bl	8016b1c <puts>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009d9e:	4b1f      	ldr	r3, [pc, #124]	; (8009e1c <mapprint+0x128>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3301      	adds	r3, #1
 8009da4:	4a1d      	ldr	r2, [pc, #116]	; (8009e1c <mapprint+0x128>)
 8009da6:	6013      	str	r3, [r2, #0]
 8009da8:	4b1c      	ldr	r3, [pc, #112]	; (8009e1c <mapprint+0x128>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b08      	cmp	r3, #8
 8009dae:	dda7      	ble.n	8009d00 <mapprint+0xc>
	}

	printf("\r\n");
 8009db0:	4821      	ldr	r0, [pc, #132]	; (8009e38 <mapprint+0x144>)
 8009db2:	f00c feb3 	bl	8016b1c <puts>
	printf("\r\n");
 8009db6:	4820      	ldr	r0, [pc, #128]	; (8009e38 <mapprint+0x144>)
 8009db8:	f00c feb0 	bl	8016b1c <puts>


	//歩数マッ�?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009dbc:	4b17      	ldr	r3, [pc, #92]	; (8009e1c <mapprint+0x128>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	601a      	str	r2, [r3, #0]
 8009dc2:	e024      	b.n	8009e0e <mapprint+0x11a>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009dc4:	4b16      	ldr	r3, [pc, #88]	; (8009e20 <mapprint+0x12c>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	601a      	str	r2, [r3, #0]
 8009dca:	e011      	b.n	8009df0 <mapprint+0xfc>
			printf("%u  ",work_ram[k]);
 8009dcc:	4b15      	ldr	r3, [pc, #84]	; (8009e24 <mapprint+0x130>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a15      	ldr	r2, [pc, #84]	; (8009e28 <mapprint+0x134>)
 8009dd2:	5cd3      	ldrb	r3, [r2, r3]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4819      	ldr	r0, [pc, #100]	; (8009e3c <mapprint+0x148>)
 8009dd8:	f00c fe2c 	bl	8016a34 <iprintf>
			k++;
 8009ddc:	4b11      	ldr	r3, [pc, #68]	; (8009e24 <mapprint+0x130>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3301      	adds	r3, #1
 8009de2:	4a10      	ldr	r2, [pc, #64]	; (8009e24 <mapprint+0x130>)
 8009de4:	6013      	str	r3, [r2, #0]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009de6:	4b0e      	ldr	r3, [pc, #56]	; (8009e20 <mapprint+0x12c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3301      	adds	r3, #1
 8009dec:	4a0c      	ldr	r2, [pc, #48]	; (8009e20 <mapprint+0x12c>)
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <mapprint+0x12c>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b08      	cmp	r3, #8
 8009df6:	dde9      	ble.n	8009dcc <mapprint+0xd8>
		}
		printf("\r\n");
 8009df8:	480f      	ldr	r0, [pc, #60]	; (8009e38 <mapprint+0x144>)
 8009dfa:	f00c fe8f 	bl	8016b1c <puts>
		printf("\r\n");
 8009dfe:	480e      	ldr	r0, [pc, #56]	; (8009e38 <mapprint+0x144>)
 8009e00:	f00c fe8c 	bl	8016b1c <puts>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009e04:	4b05      	ldr	r3, [pc, #20]	; (8009e1c <mapprint+0x128>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	4a04      	ldr	r2, [pc, #16]	; (8009e1c <mapprint+0x128>)
 8009e0c:	6013      	str	r3, [r2, #0]
 8009e0e:	4b03      	ldr	r3, [pc, #12]	; (8009e1c <mapprint+0x128>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b08      	cmp	r3, #8
 8009e14:	ddd6      	ble.n	8009dc4 <mapprint+0xd0>
	}
#endif
//	for(int i=0; i <=10; i++)
//	printf("保存データ :: %d \r\n",work_ram[i][0]);

}
 8009e16:	bf00      	nop
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	2000432c 	.word	0x2000432c
 8009e20:	20004330 	.word	0x20004330
 8009e24:	20004334 	.word	0x20004334
 8009e28:	20000318 	.word	0x20000318
 8009e2c:	08018898 	.word	0x08018898
 8009e30:	38e38e39 	.word	0x38e38e39
 8009e34:	0801889c 	.word	0x0801889c
 8009e38:	080188a0 	.word	0x080188a0
 8009e3c:	080188a4 	.word	0x080188a4

08009e40 <Flash_clear>:
// Flashのsectoe1を消去
bool Flash_clear()
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b088      	sub	sp, #32
 8009e44:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8009e46:	f008 fb0d 	bl	8012464 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8009e52:	2302      	movs	r3, #2
 8009e54:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 8009e56:	2301      	movs	r3, #1
 8009e58:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 8009e5a:	1d3a      	adds	r2, r7, #4
 8009e5c:	f107 0308 	add.w	r3, r7, #8
 8009e60:	4611      	mov	r1, r2
 8009e62:	4618      	mov	r0, r3
 8009e64:	f008 fc5e 	bl	8012724 <HAL_FLASHEx_Erase>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 8009e6c:	f008 fb1c 	bl	80124a8 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 8009e70:	7ffb      	ldrb	r3, [r7, #31]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d105      	bne.n	8009e82 <Flash_clear+0x42>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7c:	d101      	bne.n	8009e82 <Flash_clear+0x42>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e000      	b.n	8009e84 <Flash_clear+0x44>
 8009e82:	2300      	movs	r3, #0
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	b2db      	uxtb	r3, r3
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3720      	adds	r7, #32
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
	...

08009e94 <Flash_load>:

// Flashのsector1のてwork_ramに読み出
// work_ramの先アドレスを返す
uint8_t* Flash_load() //uint8_t*
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);//BACKUP_FLASH_SECTOR_SIZE
 8009e98:	4a05      	ldr	r2, [pc, #20]	; (8009eb0 <Flash_load+0x1c>)
 8009e9a:	4b06      	ldr	r3, [pc, #24]	; (8009eb4 <Flash_load+0x20>)
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	f00c f955 	bl	8016154 <memcpy>
    return work_ram;
 8009eaa:	4b01      	ldr	r3, [pc, #4]	; (8009eb0 <Flash_load+0x1c>)
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	20000318 	.word	0x20000318
 8009eb4:	08004000 	.word	0x08004000

08009eb8 <Flash_store>:

// Flashのsector1を消去後�???��?��タを書き込
bool Flash_store()
{
 8009eb8:	b590      	push	{r4, r7, lr}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return false;
 8009ebe:	f7ff ffbf 	bl	8009e40 <Flash_clear>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	f083 0301 	eor.w	r3, r3, #1
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <Flash_store+0x1a>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	e02f      	b.n	8009f32 <Flash_store+0x7a>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 8009ed2:	4b1a      	ldr	r3, [pc, #104]	; (8009f3c <Flash_store+0x84>)
 8009ed4:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 8009ed6:	f008 fac5 	bl	8012464 <HAL_FLASH_Unlock>

    // work_ramにある4バイトごとまとめて書き込
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 8009eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ede:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60bb      	str	r3, [r7, #8]
 8009ee4:	e017      	b.n	8009f16 <Flash_store+0x5e>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4a15      	ldr	r2, [pc, #84]	; (8009f40 <Flash_store+0x88>)
        result = HAL_FLASH_Program(
 8009eec:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 8009ef8:	f04f 0400 	mov.w	r4, #0
 8009efc:	461a      	mov	r2, r3
 8009efe:	4623      	mov	r3, r4
 8009f00:	2002      	movs	r0, #2
 8009f02:	f008 f9a7 	bl	8012254 <HAL_FLASH_Program>
 8009f06:	4603      	mov	r3, r0
 8009f08:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 8009f0a:	7bfb      	ldrb	r3, [r7, #15]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d107      	bne.n	8009f20 <Flash_store+0x68>
    for (size_t i=0; i<write_cnt; i++)
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	3301      	adds	r3, #1
 8009f14:	60bb      	str	r3, [r7, #8]
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d3e3      	bcc.n	8009ee6 <Flash_store+0x2e>
 8009f1e:	e000      	b.n	8009f22 <Flash_store+0x6a>
        if (result != HAL_OK) break;
 8009f20:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8009f22:	f008 fac1 	bl	80124a8 <HAL_FLASH_Lock>

    return result == HAL_OK;
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	bf0c      	ite	eq
 8009f2c:	2301      	moveq	r3, #1
 8009f2e:	2300      	movne	r3, #0
 8009f30:	b2db      	uxtb	r3, r3
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd90      	pop	{r4, r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	20000318 	.word	0x20000318
 8009f40:	08004000 	.word	0x08004000

08009f44 <Emitter_ON>:
        printf("\r\n");
        HAL_Delay(T3);
}


void Emitter_ON(){  // 赤外線エミッタに出力比�?トグルモードを相補で
 8009f44:	b580      	push	{r7, lr}
 8009f46:	af00      	add	r7, sp, #0
#if 1
  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 8009f48:	2100      	movs	r1, #0
 8009f4a:	4804      	ldr	r0, [pc, #16]	; (8009f5c <Emitter_ON+0x18>)
 8009f4c:	f00a f93e 	bl	80141cc <HAL_TIM_OC_Start_IT>
  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 8009f50:	2100      	movs	r1, #0
 8009f52:	4802      	ldr	r0, [pc, #8]	; (8009f5c <Emitter_ON+0x18>)
 8009f54:	f00b fa0b 	bl	801536e <HAL_TIMEx_OCN_Start_IT>
#endif
}
 8009f58:	bf00      	nop
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	200043c8 	.word	0x200043c8

08009f60 <Emitter_OFF>:
void Emitter_OFF(){
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0
#if 1
  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 8009f64:	2100      	movs	r1, #0
 8009f66:	4804      	ldr	r0, [pc, #16]	; (8009f78 <Emitter_OFF+0x18>)
 8009f68:	f00a f9b4 	bl	80142d4 <HAL_TIM_OC_Stop_IT>
  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	4802      	ldr	r0, [pc, #8]	; (8009f78 <Emitter_OFF+0x18>)
 8009f70:	f00b fa52 	bl	8015418 <HAL_TIMEx_OCN_Stop_IT>
#endif
}
 8009f74:	bf00      	nop
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	200043c8 	.word	0x200043c8

08009f7c <ADC_Start>:
void ADC_Start(){  //AD値のDMA
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	af00      	add	r7, sp, #0
#if 1
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog1, 3) != HAL_OK){
 8009f80:	2203      	movs	r2, #3
 8009f82:	490a      	ldr	r1, [pc, #40]	; (8009fac <ADC_Start+0x30>)
 8009f84:	480a      	ldr	r0, [pc, #40]	; (8009fb0 <ADC_Start+0x34>)
 8009f86:	f007 f871 	bl	801106c <HAL_ADC_Start_DMA>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <ADC_Start+0x18>
  		        Error_Handler();
 8009f90:	f006 f942 	bl	8010218 <Error_Handler>
  		    }

  if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog2, 2) != HAL_OK){
 8009f94:	2202      	movs	r2, #2
 8009f96:	4907      	ldr	r1, [pc, #28]	; (8009fb4 <ADC_Start+0x38>)
 8009f98:	4807      	ldr	r0, [pc, #28]	; (8009fb8 <ADC_Start+0x3c>)
 8009f9a:	f007 f867 	bl	801106c <HAL_ADC_Start_DMA>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <ADC_Start+0x2c>
  		    	Error_Handler();
 8009fa4:	f006 f938 	bl	8010218 <Error_Handler>
 }
#endif
}
 8009fa8:	bf00      	nop
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	20000300 	.word	0x20000300
 8009fb0:	20004588 	.word	0x20004588
 8009fb4:	20000308 	.word	0x20000308
 8009fb8:	2000444c 	.word	0x2000444c

08009fbc <ADC_Stop>:
void ADC_Stop(){
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	af00      	add	r7, sp, #0
#if 1
  if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK){
 8009fc0:	4808      	ldr	r0, [pc, #32]	; (8009fe4 <ADC_Stop+0x28>)
 8009fc2:	f007 f945 	bl	8011250 <HAL_ADC_Stop_DMA>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <ADC_Stop+0x14>
  		        Error_Handler();
 8009fcc:	f006 f924 	bl	8010218 <Error_Handler>
  		    }

  if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK){
 8009fd0:	4805      	ldr	r0, [pc, #20]	; (8009fe8 <ADC_Stop+0x2c>)
 8009fd2:	f007 f93d 	bl	8011250 <HAL_ADC_Stop_DMA>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d001      	beq.n	8009fe0 <ADC_Stop+0x24>
  		    	Error_Handler();
 8009fdc:	f006 f91c 	bl	8010218 <Error_Handler>
            }
#endif
}
 8009fe0:	bf00      	nop
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	20004588 	.word	0x20004588
 8009fe8:	2000444c 	.word	0x2000444c

08009fec <Encoder_Start>:
void Encoder_Start(){  //TIM3_Left, TIM4_Right
 8009fec:	b580      	push	{r7, lr}
 8009fee:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8009ff0:	213c      	movs	r1, #60	; 0x3c
 8009ff2:	4804      	ldr	r0, [pc, #16]	; (800a004 <Encoder_Start+0x18>)
 8009ff4:	f00a fb66 	bl	80146c4 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8009ff8:	213c      	movs	r1, #60	; 0x3c
 8009ffa:	4803      	ldr	r0, [pc, #12]	; (800a008 <Encoder_Start+0x1c>)
 8009ffc:	f00a fb62 	bl	80146c4 <HAL_TIM_Encoder_Start>
}
 800a000:	bf00      	nop
 800a002:	bd80      	pop	{r7, pc}
 800a004:	200044e8 	.word	0x200044e8
 800a008:	2000440c 	.word	0x2000440c

0800a00c <Motor_PWM_Start>:
void Encoder_Stop(){

}
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800a00c:	b580      	push	{r7, lr}
 800a00e:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK){
 800a010:	210c      	movs	r1, #12
 800a012:	4809      	ldr	r0, [pc, #36]	; (800a038 <Motor_PWM_Start+0x2c>)
 800a014:	f00a fa2e 	bl	8014474 <HAL_TIM_PWM_Start>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <Motor_PWM_Start+0x16>
	 	    	            Error_Handler();
 800a01e:	f006 f8fb 	bl	8010218 <Error_Handler>
	 	    	        }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK){
 800a022:	2104      	movs	r1, #4
 800a024:	4805      	ldr	r0, [pc, #20]	; (800a03c <Motor_PWM_Start+0x30>)
 800a026:	f00a fa25 	bl	8014474 <HAL_TIM_PWM_Start>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <Motor_PWM_Start+0x28>
	 	    	            Error_Handler();
 800a030:	f006 f8f2 	bl	8010218 <Error_Handler>
	 	    	        }


#endif
}
 800a034:	bf00      	nop
 800a036:	bd80      	pop	{r7, pc}
 800a038:	20004fb0 	.word	0x20004fb0
 800a03c:	200044a4 	.word	0x200044a4

0800a040 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800a040:	b580      	push	{r7, lr}
 800a042:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK){
 800a044:	210c      	movs	r1, #12
 800a046:	4809      	ldr	r0, [pc, #36]	; (800a06c <Motor_PWM_Stop+0x2c>)
 800a048:	f00a fa52 	bl	80144f0 <HAL_TIM_PWM_Stop>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <Motor_PWM_Stop+0x16>
	 	    	            Error_Handler();
 800a052:	f006 f8e1 	bl	8010218 <Error_Handler>
	 }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK){
 800a056:	2104      	movs	r1, #4
 800a058:	4805      	ldr	r0, [pc, #20]	; (800a070 <Motor_PWM_Stop+0x30>)
 800a05a:	f00a fa49 	bl	80144f0 <HAL_TIM_PWM_Stop>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <Motor_PWM_Stop+0x28>
	 	    	            Error_Handler();
 800a064:	f006 f8d8 	bl	8010218 <Error_Handler>
	 }

#endif
}
 800a068:	bf00      	nop
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	20004fb0 	.word	0x20004fb0
 800a070:	200044a4 	.word	0x200044a4

0800a074 <Init>:
void PWM_Log(){
//左右のモータのカウント値を配列に格納


}
void Init() { // 諸
 800a074:	b580      	push	{r7, lr}
 800a076:	af00      	add	r7, sp, #0

	Emitter_ON();
 800a078:	f7ff ff64 	bl	8009f44 <Emitter_ON>
	ADC_Start();
 800a07c:	f7ff ff7e 	bl	8009f7c <ADC_Start>
	IMU_init();
 800a080:	f7ff fb9a 	bl	80097b8 <IMU_init>
	Motor_PWM_Start();
 800a084:	f7ff ffc2 	bl	800a00c <Motor_PWM_Start>
	 if (HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1) != HAL_OK){
	 	  	  	          Error_Handler();
	 }

#endif
}
 800a088:	bf00      	nop
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	0000      	movs	r0, r0
	...

0800a090 <IMU_Get_Data>:
/*---- DEFINING FUNCTION ----*/
double lowpass_filter(float x, float x0, float r)
{
	return ((r)*(x) + (1.0 - (r))* (x0));
}
double IMU_Get_Data(){// IMUの値を取
 800a090:	b5b0      	push	{r4, r5, r7, lr}
 800a092:	af00      	add	r7, sp, #0
#if 1
	//int i = 0;
	static double  /*imu_pre_angle=0,*/ imu_accel=0, imu_pre_accel=0;

    read_gyro_data();
 800a094:	f7ff fbba 	bl	800980c <read_gyro_data>
    read_accel_data();
 800a098:	f7ff fbf0 	bl	800987c <read_accel_data>

    //atan2(za,xa);
	imu_accel =  ( ( (double)zg - offset/*2.0*/ )/16.4) * PI /180;
 800a09c:	4b56      	ldr	r3, [pc, #344]	; (800a1f8 <IMU_Get_Data+0x168>)
 800a09e:	881b      	ldrh	r3, [r3, #0]
 800a0a0:	b21b      	sxth	r3, r3
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fe f976 	bl	8008394 <__aeabi_i2d>
 800a0a8:	4b54      	ldr	r3, [pc, #336]	; (800a1fc <IMU_Get_Data+0x16c>)
 800a0aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	4623      	mov	r3, r4
 800a0b2:	f7fe f821 	bl	80080f8 <__aeabi_dsub>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	4621      	mov	r1, r4
 800a0be:	a348      	add	r3, pc, #288	; (adr r3, 800a1e0 <IMU_Get_Data+0x150>)
 800a0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c4:	f7fe fafa 	bl	80086bc <__aeabi_ddiv>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	460c      	mov	r4, r1
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	a345      	add	r3, pc, #276	; (adr r3, 800a1e8 <IMU_Get_Data+0x158>)
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	f7fe f9c7 	bl	8008468 <__aeabi_dmul>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	460c      	mov	r4, r1
 800a0de:	4618      	mov	r0, r3
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	f04f 0200 	mov.w	r2, #0
 800a0e6:	4b46      	ldr	r3, [pc, #280]	; (800a200 <IMU_Get_Data+0x170>)
 800a0e8:	f7fe fae8 	bl	80086bc <__aeabi_ddiv>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	4a44      	ldr	r2, [pc, #272]	; (800a204 <IMU_Get_Data+0x174>)
 800a0f2:	e9c2 3400 	strd	r3, r4, [r2]
	imu_angle += (imu_pre_accel + imu_accel) * T1 / 2;
 800a0f6:	4b44      	ldr	r3, [pc, #272]	; (800a208 <IMU_Get_Data+0x178>)
 800a0f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0fc:	4b41      	ldr	r3, [pc, #260]	; (800a204 <IMU_Get_Data+0x174>)
 800a0fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a102:	461a      	mov	r2, r3
 800a104:	4623      	mov	r3, r4
 800a106:	f7fd fff9 	bl	80080fc <__adddf3>
 800a10a:	4603      	mov	r3, r0
 800a10c:	460c      	mov	r4, r1
 800a10e:	4618      	mov	r0, r3
 800a110:	4621      	mov	r1, r4
 800a112:	a337      	add	r3, pc, #220	; (adr r3, 800a1f0 <IMU_Get_Data+0x160>)
 800a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a118:	f7fe f9a6 	bl	8008468 <__aeabi_dmul>
 800a11c:	4603      	mov	r3, r0
 800a11e:	460c      	mov	r4, r1
 800a120:	4618      	mov	r0, r3
 800a122:	4621      	mov	r1, r4
 800a124:	f04f 0200 	mov.w	r2, #0
 800a128:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a12c:	f7fe fac6 	bl	80086bc <__aeabi_ddiv>
 800a130:	4603      	mov	r3, r0
 800a132:	460c      	mov	r4, r1
 800a134:	4618      	mov	r0, r3
 800a136:	4621      	mov	r1, r4
 800a138:	4b34      	ldr	r3, [pc, #208]	; (800a20c <IMU_Get_Data+0x17c>)
 800a13a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a13e:	461a      	mov	r2, r3
 800a140:	4623      	mov	r3, r4
 800a142:	f7fd ffdb 	bl	80080fc <__adddf3>
 800a146:	4603      	mov	r3, r0
 800a148:	460c      	mov	r4, r1
 800a14a:	4a30      	ldr	r2, [pc, #192]	; (800a20c <IMU_Get_Data+0x17c>)
 800a14c:	e9c2 3400 	strd	r3, r4, [r2]
	imu_angle -= drift_fix * PI /180;
 800a150:	4b2e      	ldr	r3, [pc, #184]	; (800a20c <IMU_Get_Data+0x17c>)
 800a152:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a156:	4b2e      	ldr	r3, [pc, #184]	; (800a210 <IMU_Get_Data+0x180>)
 800a158:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a15c:	a322      	add	r3, pc, #136	; (adr r3, 800a1e8 <IMU_Get_Data+0x158>)
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	f7fe f981 	bl	8008468 <__aeabi_dmul>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	4610      	mov	r0, r2
 800a16c:	4619      	mov	r1, r3
 800a16e:	f04f 0200 	mov.w	r2, #0
 800a172:	4b23      	ldr	r3, [pc, #140]	; (800a200 <IMU_Get_Data+0x170>)
 800a174:	f7fe faa2 	bl	80086bc <__aeabi_ddiv>
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	4620      	mov	r0, r4
 800a17e:	4629      	mov	r1, r5
 800a180:	f7fd ffba 	bl	80080f8 <__aeabi_dsub>
 800a184:	4603      	mov	r3, r0
 800a186:	460c      	mov	r4, r1
 800a188:	4a20      	ldr	r2, [pc, #128]	; (800a20c <IMU_Get_Data+0x17c>)
 800a18a:	e9c2 3400 	strd	r3, r4, [r2]
	imu_pre_accel = imu_accel;
 800a18e:	4b1d      	ldr	r3, [pc, #116]	; (800a204 <IMU_Get_Data+0x174>)
 800a190:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a194:	4a1c      	ldr	r2, [pc, #112]	; (800a208 <IMU_Get_Data+0x178>)
 800a196:	e9c2 3400 	strd	r3, r4, [r2]
	//imu_pre_angle = imu_angle;

	//0.95 * imu_pre_angle + 0.05 * (imu_pre_accel + imu_accel) * T1 / 2;
	Body_angle = imu_angle * 180 / PI;
 800a19a:	4b1c      	ldr	r3, [pc, #112]	; (800a20c <IMU_Get_Data+0x17c>)
 800a19c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1a0:	f04f 0200 	mov.w	r2, #0
 800a1a4:	4b16      	ldr	r3, [pc, #88]	; (800a200 <IMU_Get_Data+0x170>)
 800a1a6:	f7fe f95f 	bl	8008468 <__aeabi_dmul>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	460c      	mov	r4, r1
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	a30d      	add	r3, pc, #52	; (adr r3, 800a1e8 <IMU_Get_Data+0x158>)
 800a1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b8:	f7fe fa80 	bl	80086bc <__aeabi_ddiv>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	460c      	mov	r4, r1
 800a1c0:	4a14      	ldr	r2, [pc, #80]	; (800a214 <IMU_Get_Data+0x184>)
 800a1c2:	e9c2 3400 	strd	r3, r4, [r2]

	  return imu_accel;
 800a1c6:	4b0f      	ldr	r3, [pc, #60]	; (800a204 <IMU_Get_Data+0x174>)
 800a1c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1cc:	ec44 3b17 	vmov	d7, r3, r4
		//0.95 * imu_pre_angle + 0.05 * (imu_pre_accel + imu_accel) * T1 / 2;
		Body_angle = imu_angle * 180 / PI;

		  return LPF;
#endif
}
 800a1d0:	eeb0 0a47 	vmov.f32	s0, s14
 800a1d4:	eef0 0a67 	vmov.f32	s1, s15
 800a1d8:	bdb0      	pop	{r4, r5, r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	f3af 8000 	nop.w
 800a1e0:	66666666 	.word	0x66666666
 800a1e4:	40306666 	.word	0x40306666
 800a1e8:	54442d18 	.word	0x54442d18
 800a1ec:	400921fb 	.word	0x400921fb
 800a1f0:	d2f1a9fc 	.word	0xd2f1a9fc
 800a1f4:	3f50624d 	.word	0x3f50624d
 800a1f8:	200043ae 	.word	0x200043ae
 800a1fc:	200002d8 	.word	0x200002d8
 800a200:	40668000 	.word	0x40668000
 800a204:	20004338 	.word	0x20004338
 800a208:	20004340 	.word	0x20004340
 800a20c:	200002c8 	.word	0x200002c8
 800a210:	20000018 	.word	0x20000018
 800a214:	200002c0 	.word	0x200002c0

0800a218 <IMU_Control>:
void IMU_Control(double target, double now, double T, double KP, double KI, double KD){
 800a218:	b5b0      	push	{r4, r5, r7, lr}
 800a21a:	b090      	sub	sp, #64	; 0x40
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 800a222:	ed87 1b08 	vstr	d1, [r7, #32]
 800a226:	ed87 2b06 	vstr	d2, [r7, #24]
 800a22a:	ed87 3b04 	vstr	d3, [r7, #16]
 800a22e:	ed87 4b02 	vstr	d4, [r7, #8]
 800a232:	ed87 5b00 	vstr	d5, [r7]

	static double  ei=0, e0=0;
	double e=0,ed=0;
 800a236:	f04f 0300 	mov.w	r3, #0
 800a23a:	f04f 0400 	mov.w	r4, #0
 800a23e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 800a242:	f04f 0300 	mov.w	r3, #0
 800a246:	f04f 0400 	mov.w	r4, #0
 800a24a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	if(mode.imu == 0 || (Target_velocity == 0 && Target_Rad_velo == 0)){
 800a24e:	4b71      	ldr	r3, [pc, #452]	; (800a414 <IMU_Control+0x1fc>)
 800a250:	799b      	ldrb	r3, [r3, #6]
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	b2db      	uxtb	r3, r3
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00f      	beq.n	800a27c <IMU_Control+0x64>
 800a25c:	4b6e      	ldr	r3, [pc, #440]	; (800a418 <IMU_Control+0x200>)
 800a25e:	edd3 7a00 	vldr	s15, [r3]
 800a262:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a26a:	d115      	bne.n	800a298 <IMU_Control+0x80>
 800a26c:	4b6b      	ldr	r3, [pc, #428]	; (800a41c <IMU_Control+0x204>)
 800a26e:	edd3 7a00 	vldr	s15, [r3]
 800a272:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a27a:	d10d      	bne.n	800a298 <IMU_Control+0x80>

		ei = 0;
 800a27c:	4a68      	ldr	r2, [pc, #416]	; (800a420 <IMU_Control+0x208>)
 800a27e:	f04f 0300 	mov.w	r3, #0
 800a282:	f04f 0400 	mov.w	r4, #0
 800a286:	e9c2 3400 	strd	r3, r4, [r2]
		e0=0;
 800a28a:	4a66      	ldr	r2, [pc, #408]	; (800a424 <IMU_Control+0x20c>)
 800a28c:	f04f 0300 	mov.w	r3, #0
 800a290:	f04f 0400 	mov.w	r4, #0
 800a294:	e9c2 3400 	strd	r3, r4, [r2]
	}
	mode.imu = 1;
 800a298:	4a5e      	ldr	r2, [pc, #376]	; (800a414 <IMU_Control+0x1fc>)
 800a29a:	7993      	ldrb	r3, [r2, #6]
 800a29c:	f043 0301 	orr.w	r3, r3, #1
 800a2a0:	7193      	strb	r3, [r2, #6]

	e = target - now;
 800a2a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a2a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a2aa:	f7fd ff25 	bl	80080f8 <__aeabi_dsub>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	ei += e * T;
 800a2b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a2be:	f7fe f8d3 	bl	8008468 <__aeabi_dmul>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	460c      	mov	r4, r1
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	4621      	mov	r1, r4
 800a2ca:	4b55      	ldr	r3, [pc, #340]	; (800a420 <IMU_Control+0x208>)
 800a2cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	4623      	mov	r3, r4
 800a2d4:	f7fd ff12 	bl	80080fc <__adddf3>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	460c      	mov	r4, r1
 800a2dc:	4a50      	ldr	r2, [pc, #320]	; (800a420 <IMU_Control+0x208>)
 800a2de:	e9c2 3400 	strd	r3, r4, [r2]
	ed = (e- e0) / T;
 800a2e2:	4b50      	ldr	r3, [pc, #320]	; (800a424 <IMU_Control+0x20c>)
 800a2e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	4623      	mov	r3, r4
 800a2ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a2f0:	f7fd ff02 	bl	80080f8 <__aeabi_dsub>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a300:	f7fe f9dc 	bl	80086bc <__aeabi_ddiv>
 800a304:	4603      	mov	r3, r0
 800a306:	460c      	mov	r4, r1
 800a308:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	e0 = e;
 800a30c:	4a45      	ldr	r2, [pc, #276]	; (800a424 <IMU_Control+0x20c>)
 800a30e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800a312:	e9c2 3400 	strd	r3, r4, [r2]

	L_angular_velocity = -(int16_t)round(KP*e + KI*ei + KD*ed);
 800a316:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a31a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a31e:	f7fe f8a3 	bl	8008468 <__aeabi_dmul>
 800a322:	4603      	mov	r3, r0
 800a324:	460c      	mov	r4, r1
 800a326:	4625      	mov	r5, r4
 800a328:	461c      	mov	r4, r3
 800a32a:	4b3d      	ldr	r3, [pc, #244]	; (800a420 <IMU_Control+0x208>)
 800a32c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a334:	f7fe f898 	bl	8008468 <__aeabi_dmul>
 800a338:	4602      	mov	r2, r0
 800a33a:	460b      	mov	r3, r1
 800a33c:	4620      	mov	r0, r4
 800a33e:	4629      	mov	r1, r5
 800a340:	f7fd fedc 	bl	80080fc <__adddf3>
 800a344:	4603      	mov	r3, r0
 800a346:	460c      	mov	r4, r1
 800a348:	4625      	mov	r5, r4
 800a34a:	461c      	mov	r4, r3
 800a34c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a350:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a354:	f7fe f888 	bl	8008468 <__aeabi_dmul>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4620      	mov	r0, r4
 800a35e:	4629      	mov	r1, r5
 800a360:	f7fd fecc 	bl	80080fc <__adddf3>
 800a364:	4603      	mov	r3, r0
 800a366:	460c      	mov	r4, r1
 800a368:	ec44 3b17 	vmov	d7, r3, r4
 800a36c:	eeb0 0a47 	vmov.f32	s0, s14
 800a370:	eef0 0a67 	vmov.f32	s1, s15
 800a374:	f00b fe7a 	bl	801606c <round>
 800a378:	ec54 3b10 	vmov	r3, r4, d0
 800a37c:	4618      	mov	r0, r3
 800a37e:	4621      	mov	r1, r4
 800a380:	f7fe fb22 	bl	80089c8 <__aeabi_d2iz>
 800a384:	4603      	mov	r3, r0
 800a386:	b21b      	sxth	r3, r3
 800a388:	b29b      	uxth	r3, r3
 800a38a:	425b      	negs	r3, r3
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	b21a      	sxth	r2, r3
 800a390:	4b25      	ldr	r3, [pc, #148]	; (800a428 <IMU_Control+0x210>)
 800a392:	801a      	strh	r2, [r3, #0]
	R_angular_velocity =  (int16_t)round(KP*e + KI*ei + KD*ed);
 800a394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a398:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a39c:	f7fe f864 	bl	8008468 <__aeabi_dmul>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	4625      	mov	r5, r4
 800a3a6:	461c      	mov	r4, r3
 800a3a8:	4b1d      	ldr	r3, [pc, #116]	; (800a420 <IMU_Control+0x208>)
 800a3aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3b2:	f7fe f859 	bl	8008468 <__aeabi_dmul>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	4629      	mov	r1, r5
 800a3be:	f7fd fe9d 	bl	80080fc <__adddf3>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	460c      	mov	r4, r1
 800a3c6:	4625      	mov	r5, r4
 800a3c8:	461c      	mov	r4, r3
 800a3ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a3ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3d2:	f7fe f849 	bl	8008468 <__aeabi_dmul>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	460b      	mov	r3, r1
 800a3da:	4620      	mov	r0, r4
 800a3dc:	4629      	mov	r1, r5
 800a3de:	f7fd fe8d 	bl	80080fc <__adddf3>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	ec44 3b17 	vmov	d7, r3, r4
 800a3ea:	eeb0 0a47 	vmov.f32	s0, s14
 800a3ee:	eef0 0a67 	vmov.f32	s1, s15
 800a3f2:	f00b fe3b 	bl	801606c <round>
 800a3f6:	ec54 3b10 	vmov	r3, r4, d0
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	4621      	mov	r1, r4
 800a3fe:	f7fe fae3 	bl	80089c8 <__aeabi_d2iz>
 800a402:	4603      	mov	r3, r0
 800a404:	b21a      	sxth	r2, r3
 800a406:	4b09      	ldr	r3, [pc, #36]	; (800a42c <IMU_Control+0x214>)
 800a408:	801a      	strh	r2, [r3, #0]

	//b 車体度0は前回の速度制御
}
 800a40a:	bf00      	nop
 800a40c:	3740      	adds	r7, #64	; 0x40
 800a40e:	46bd      	mov	sp, r7
 800a410:	bdb0      	pop	{r4, r5, r7, pc}
 800a412:	bf00      	nop
 800a414:	20000074 	.word	0x20000074
 800a418:	200002b8 	.word	0x200002b8
 800a41c:	200002bc 	.word	0x200002bc
 800a420:	20004348 	.word	0x20004348
 800a424:	20004350 	.word	0x20004350
 800a428:	20004392 	.word	0x20004392
 800a42c:	20004396 	.word	0x20004396

0800a430 <IMU_Calib>:
void IMU_Calib(){
 800a430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a432:	b089      	sub	sp, #36	; 0x24
 800a434:	af00      	add	r7, sp, #0
 800a436:	466b      	mov	r3, sp
 800a438:	461e      	mov	r6, r3

	HAL_Delay(1000);
 800a43a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a43e:	f006 fc6f 	bl	8010d20 <HAL_Delay>

	int16_t num = 2000;
 800a442:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a446:	81fb      	strh	r3, [r7, #14]
	double zg_vals[num];
 800a448:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800a44c:	4603      	mov	r3, r0
 800a44e:	3b01      	subs	r3, #1
 800a450:	60bb      	str	r3, [r7, #8]
 800a452:	4603      	mov	r3, r0
 800a454:	4619      	mov	r1, r3
 800a456:	f04f 0200 	mov.w	r2, #0
 800a45a:	f04f 0300 	mov.w	r3, #0
 800a45e:	f04f 0400 	mov.w	r4, #0
 800a462:	0194      	lsls	r4, r2, #6
 800a464:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a468:	018b      	lsls	r3, r1, #6
 800a46a:	4603      	mov	r3, r0
 800a46c:	4619      	mov	r1, r3
 800a46e:	f04f 0200 	mov.w	r2, #0
 800a472:	f04f 0300 	mov.w	r3, #0
 800a476:	f04f 0400 	mov.w	r4, #0
 800a47a:	0194      	lsls	r4, r2, #6
 800a47c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a480:	018b      	lsls	r3, r1, #6
 800a482:	4603      	mov	r3, r0
 800a484:	00db      	lsls	r3, r3, #3
 800a486:	3307      	adds	r3, #7
 800a488:	3307      	adds	r3, #7
 800a48a:	08db      	lsrs	r3, r3, #3
 800a48c:	00db      	lsls	r3, r3, #3
 800a48e:	ebad 0d03 	sub.w	sp, sp, r3
 800a492:	466b      	mov	r3, sp
 800a494:	3307      	adds	r3, #7
 800a496:	08db      	lsrs	r3, r3, #3
 800a498:	00db      	lsls	r3, r3, #3
 800a49a:	607b      	str	r3, [r7, #4]
	double sum;
	for(uint16_t i = 0; i < num; i++){
 800a49c:	2300      	movs	r3, #0
 800a49e:	83fb      	strh	r3, [r7, #30]
 800a4a0:	e023      	b.n	800a4ea <IMU_Calib+0xba>
		zg_vals[i] = (double)zg;
 800a4a2:	4b20      	ldr	r3, [pc, #128]	; (800a524 <IMU_Calib+0xf4>)
 800a4a4:	881b      	ldrh	r3, [r3, #0]
 800a4a6:	b21b      	sxth	r3, r3
 800a4a8:	8bfd      	ldrh	r5, [r7, #30]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fd ff72 	bl	8008394 <__aeabi_i2d>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	6879      	ldr	r1, [r7, #4]
 800a4b6:	00ea      	lsls	r2, r5, #3
 800a4b8:	440a      	add	r2, r1
 800a4ba:	e9c2 3400 	strd	r3, r4, [r2]
		sum += zg_vals[i];
 800a4be:	8bfb      	ldrh	r3, [r7, #30]
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	00db      	lsls	r3, r3, #3
 800a4c4:	4413      	add	r3, r2
 800a4c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	4623      	mov	r3, r4
 800a4ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a4d2:	f7fd fe13 	bl	80080fc <__adddf3>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	460c      	mov	r4, r1
 800a4da:	e9c7 3404 	strd	r3, r4, [r7, #16]
		HAL_Delay(2);
 800a4de:	2002      	movs	r0, #2
 800a4e0:	f006 fc1e 	bl	8010d20 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 800a4e4:	8bfb      	ldrh	r3, [r7, #30]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	83fb      	strh	r3, [r7, #30]
 800a4ea:	8bfa      	ldrh	r2, [r7, #30]
 800a4ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	dbd6      	blt.n	800a4a2 <IMU_Calib+0x72>
	}

	offset = sum / num;
 800a4f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7fd ff4b 	bl	8008394 <__aeabi_i2d>
 800a4fe:	4603      	mov	r3, r0
 800a500:	460c      	mov	r4, r1
 800a502:	461a      	mov	r2, r3
 800a504:	4623      	mov	r3, r4
 800a506:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a50a:	f7fe f8d7 	bl	80086bc <__aeabi_ddiv>
 800a50e:	4603      	mov	r3, r0
 800a510:	460c      	mov	r4, r1
 800a512:	4a05      	ldr	r2, [pc, #20]	; (800a528 <IMU_Calib+0xf8>)
 800a514:	e9c2 3400 	strd	r3, r4, [r2]
 800a518:	46b5      	mov	sp, r6
}
 800a51a:	bf00      	nop
 800a51c:	3724      	adds	r7, #36	; 0x24
 800a51e:	46bd      	mov	sp, r7
 800a520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a522:	bf00      	nop
 800a524:	200043ae 	.word	0x200043ae
 800a528:	200002d8 	.word	0x200002d8

0800a52c <LED_Change>:

void LED_Change(){
 800a52c:	b580      	push	{r7, lr}
 800a52e:	af00      	add	r7, sp, #0
	//Switch
	switch(mode.LED){
 800a530:	4b5a      	ldr	r3, [pc, #360]	; (800a69c <LED_Change+0x170>)
 800a532:	f993 3000 	ldrsb.w	r3, [r3]
 800a536:	2b07      	cmp	r3, #7
 800a538:	f200 80ac 	bhi.w	800a694 <LED_Change+0x168>
 800a53c:	a201      	add	r2, pc, #4	; (adr r2, 800a544 <LED_Change+0x18>)
 800a53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a542:	bf00      	nop
 800a544:	0800a565 	.word	0x0800a565
 800a548:	0800a58b 	.word	0x0800a58b
 800a54c:	0800a5b1 	.word	0x0800a5b1
 800a550:	0800a5d7 	.word	0x0800a5d7
 800a554:	0800a5fd 	.word	0x0800a5fd
 800a558:	0800a623 	.word	0x0800a623
 800a55c:	0800a649 	.word	0x0800a649
 800a560:	0800a66f 	.word	0x0800a66f
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a564:	2200      	movs	r2, #0
 800a566:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a56a:	484d      	ldr	r0, [pc, #308]	; (800a6a0 <LED_Change+0x174>)
 800a56c:	f008 fbae 	bl	8012ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a570:	2200      	movs	r2, #0
 800a572:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a576:	484a      	ldr	r0, [pc, #296]	; (800a6a0 <LED_Change+0x174>)
 800a578:	f008 fba8 	bl	8012ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a57c:	2200      	movs	r2, #0
 800a57e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a582:	4848      	ldr	r0, [pc, #288]	; (800a6a4 <LED_Change+0x178>)
 800a584:	f008 fba2 	bl	8012ccc <HAL_GPIO_WritePin>
		break;
 800a588:	e085      	b.n	800a696 <LED_Change+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a58a:	2201      	movs	r2, #1
 800a58c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a590:	4843      	ldr	r0, [pc, #268]	; (800a6a0 <LED_Change+0x174>)
 800a592:	f008 fb9b 	bl	8012ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a596:	2200      	movs	r2, #0
 800a598:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a59c:	4840      	ldr	r0, [pc, #256]	; (800a6a0 <LED_Change+0x174>)
 800a59e:	f008 fb95 	bl	8012ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5a8:	483e      	ldr	r0, [pc, #248]	; (800a6a4 <LED_Change+0x178>)
 800a5aa:	f008 fb8f 	bl	8012ccc <HAL_GPIO_WritePin>
		break;
 800a5ae:	e072      	b.n	800a696 <LED_Change+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5b6:	483a      	ldr	r0, [pc, #232]	; (800a6a0 <LED_Change+0x174>)
 800a5b8:	f008 fb88 	bl	8012ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a5c2:	4837      	ldr	r0, [pc, #220]	; (800a6a0 <LED_Change+0x174>)
 800a5c4:	f008 fb82 	bl	8012ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5ce:	4835      	ldr	r0, [pc, #212]	; (800a6a4 <LED_Change+0x178>)
 800a5d0:	f008 fb7c 	bl	8012ccc <HAL_GPIO_WritePin>

		break;
 800a5d4:	e05f      	b.n	800a696 <LED_Change+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5dc:	4830      	ldr	r0, [pc, #192]	; (800a6a0 <LED_Change+0x174>)
 800a5de:	f008 fb75 	bl	8012ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a5e8:	482d      	ldr	r0, [pc, #180]	; (800a6a0 <LED_Change+0x174>)
 800a5ea:	f008 fb6f 	bl	8012ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5f4:	482b      	ldr	r0, [pc, #172]	; (800a6a4 <LED_Change+0x178>)
 800a5f6:	f008 fb69 	bl	8012ccc <HAL_GPIO_WritePin>
		break;
 800a5fa:	e04c      	b.n	800a696 <LED_Change+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a602:	4827      	ldr	r0, [pc, #156]	; (800a6a0 <LED_Change+0x174>)
 800a604:	f008 fb62 	bl	8012ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a608:	2200      	movs	r2, #0
 800a60a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a60e:	4824      	ldr	r0, [pc, #144]	; (800a6a0 <LED_Change+0x174>)
 800a610:	f008 fb5c 	bl	8012ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a614:	2201      	movs	r2, #1
 800a616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a61a:	4822      	ldr	r0, [pc, #136]	; (800a6a4 <LED_Change+0x178>)
 800a61c:	f008 fb56 	bl	8012ccc <HAL_GPIO_WritePin>
		break;
 800a620:	e039      	b.n	800a696 <LED_Change+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a622:	2201      	movs	r2, #1
 800a624:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a628:	481d      	ldr	r0, [pc, #116]	; (800a6a0 <LED_Change+0x174>)
 800a62a:	f008 fb4f 	bl	8012ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800a62e:	2200      	movs	r2, #0
 800a630:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a634:	481a      	ldr	r0, [pc, #104]	; (800a6a0 <LED_Change+0x174>)
 800a636:	f008 fb49 	bl	8012ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a63a:	2201      	movs	r2, #1
 800a63c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a640:	4818      	ldr	r0, [pc, #96]	; (800a6a4 <LED_Change+0x178>)
 800a642:	f008 fb43 	bl	8012ccc <HAL_GPIO_WritePin>
		break;
 800a646:	e026      	b.n	800a696 <LED_Change+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800a648:	2200      	movs	r2, #0
 800a64a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a64e:	4814      	ldr	r0, [pc, #80]	; (800a6a0 <LED_Change+0x174>)
 800a650:	f008 fb3c 	bl	8012ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a654:	2201      	movs	r2, #1
 800a656:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a65a:	4811      	ldr	r0, [pc, #68]	; (800a6a0 <LED_Change+0x174>)
 800a65c:	f008 fb36 	bl	8012ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a660:	2201      	movs	r2, #1
 800a662:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a666:	480f      	ldr	r0, [pc, #60]	; (800a6a4 <LED_Change+0x178>)
 800a668:	f008 fb30 	bl	8012ccc <HAL_GPIO_WritePin>

		break;
 800a66c:	e013      	b.n	800a696 <LED_Change+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a66e:	2201      	movs	r2, #1
 800a670:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a674:	480a      	ldr	r0, [pc, #40]	; (800a6a0 <LED_Change+0x174>)
 800a676:	f008 fb29 	bl	8012ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800a67a:	2201      	movs	r2, #1
 800a67c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a680:	4807      	ldr	r0, [pc, #28]	; (800a6a0 <LED_Change+0x174>)
 800a682:	f008 fb23 	bl	8012ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800a686:	2201      	movs	r2, #1
 800a688:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a68c:	4805      	ldr	r0, [pc, #20]	; (800a6a4 <LED_Change+0x178>)
 800a68e:	f008 fb1d 	bl	8012ccc <HAL_GPIO_WritePin>

		break;
 800a692:	e000      	b.n	800a696 <LED_Change+0x16a>
	default: break;
 800a694:	bf00      	nop

	}
}
 800a696:	bf00      	nop
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	20000074 	.word	0x20000074
 800a6a0:	40020800 	.word	0x40020800
 800a6a4:	40020400 	.word	0x40020400

0800a6a8 <Motor_Switch>:
void Motor_Switch(int16_t L, int16_t R){
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	460a      	mov	r2, r1
 800a6b2:	80fb      	strh	r3, [r7, #6]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	80bb      	strh	r3, [r7, #4]
	if (L > 0 ){
 800a6b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	dd05      	ble.n	800a6cc <Motor_Switch+0x24>
		//to -
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); //A2が左SET:1で正転
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	2104      	movs	r1, #4
 800a6c4:	481a      	ldr	r0, [pc, #104]	; (800a730 <Motor_Switch+0x88>)
 800a6c6:	f008 fb01 	bl	8012ccc <HAL_GPIO_WritePin>
 800a6ca:	e00c      	b.n	800a6e6 <Motor_Switch+0x3e>

	}
	else  if (L < 0){
 800a6cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	da08      	bge.n	800a6e6 <Motor_Switch+0x3e>
		//to +
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2104      	movs	r1, #4
 800a6d8:	4815      	ldr	r0, [pc, #84]	; (800a730 <Motor_Switch+0x88>)
 800a6da:	f008 faf7 	bl	8012ccc <HAL_GPIO_WritePin>
		L = -L;
 800a6de:	88fb      	ldrh	r3, [r7, #6]
 800a6e0:	425b      	negs	r3, r3
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	80fb      	strh	r3, [r7, #6]
	}
	if (R > 0){
 800a6e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	dd05      	ble.n	800a6fa <Motor_Switch+0x52>
		//to -
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	2101      	movs	r1, #1
 800a6f2:	480f      	ldr	r0, [pc, #60]	; (800a730 <Motor_Switch+0x88>)
 800a6f4:	f008 faea 	bl	8012ccc <HAL_GPIO_WritePin>
 800a6f8:	e00c      	b.n	800a714 <Motor_Switch+0x6c>

	}

	else if (R < 0){
 800a6fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	da08      	bge.n	800a714 <Motor_Switch+0x6c>
	  	//to +
	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //A0が右,SET:1で正転
 800a702:	2201      	movs	r2, #1
 800a704:	2101      	movs	r1, #1
 800a706:	480a      	ldr	r0, [pc, #40]	; (800a730 <Motor_Switch+0x88>)
 800a708:	f008 fae0 	bl	8012ccc <HAL_GPIO_WritePin>
	  	R = -R;
 800a70c:	88bb      	ldrh	r3, [r7, #4]
 800a70e:	425b      	negs	r3, r3
 800a710:	b29b      	uxth	r3, r3
 800a712:	80bb      	strh	r3, [r7, #4]
	}

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, L); //tim2ch4が左
 800a714:	4b07      	ldr	r3, [pc, #28]	; (800a734 <Motor_Switch+0x8c>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a71c:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, R); //tim5ch2が右
 800a71e:	4b06      	ldr	r3, [pc, #24]	; (800a738 <Motor_Switch+0x90>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a726:	639a      	str	r2, [r3, #56]	; 0x38
}
 800a728:	bf00      	nop
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	40020000 	.word	0x40020000
 800a734:	20004fb0 	.word	0x20004fb0
 800a738:	200044a4 	.word	0x200044a4

0800a73c <ADC_Get_Data>:

void ADC_Get_Data(){
 800a73c:	b480      	push	{r7}
 800a73e:	af00      	add	r7, sp, #0

	static int count = 0;

	    sl_ad1_10 = analog1[0];
 800a740:	4b80      	ldr	r3, [pc, #512]	; (800a944 <ADC_Get_Data+0x208>)
 800a742:	881b      	ldrh	r3, [r3, #0]
 800a744:	b21a      	sxth	r2, r3
 800a746:	4b80      	ldr	r3, [pc, #512]	; (800a948 <ADC_Get_Data+0x20c>)
 800a748:	801a      	strh	r2, [r3, #0]
		fr_ad1_14 = analog1[1];
 800a74a:	4b7e      	ldr	r3, [pc, #504]	; (800a944 <ADC_Get_Data+0x208>)
 800a74c:	885b      	ldrh	r3, [r3, #2]
 800a74e:	b21a      	sxth	r2, r3
 800a750:	4b7e      	ldr	r3, [pc, #504]	; (800a94c <ADC_Get_Data+0x210>)
 800a752:	801a      	strh	r2, [r3, #0]
		fl_ad2_11 = analog2[0];
 800a754:	4b7e      	ldr	r3, [pc, #504]	; (800a950 <ADC_Get_Data+0x214>)
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	b21a      	sxth	r2, r3
 800a75a:	4b7e      	ldr	r3, [pc, #504]	; (800a954 <ADC_Get_Data+0x218>)
 800a75c:	801a      	strh	r2, [r3, #0]
		sr_ad2_15 = analog2[1];
 800a75e:	4b7c      	ldr	r3, [pc, #496]	; (800a950 <ADC_Get_Data+0x214>)
 800a760:	885b      	ldrh	r3, [r3, #2]
 800a762:	b21a      	sxth	r2, r3
 800a764:	4b7c      	ldr	r3, [pc, #496]	; (800a958 <ADC_Get_Data+0x21c>)
 800a766:	801a      	strh	r2, [r3, #0]

	    sl_error = abs(sl_path - sl_ad1_10);
 800a768:	4b7c      	ldr	r3, [pc, #496]	; (800a95c <ADC_Get_Data+0x220>)
 800a76a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a76e:	461a      	mov	r2, r3
 800a770:	4b75      	ldr	r3, [pc, #468]	; (800a948 <ADC_Get_Data+0x20c>)
 800a772:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	2b00      	cmp	r3, #0
 800a77a:	bfb8      	it	lt
 800a77c:	425b      	neglt	r3, r3
 800a77e:	b21a      	sxth	r2, r3
 800a780:	4b77      	ldr	r3, [pc, #476]	; (800a960 <ADC_Get_Data+0x224>)
 800a782:	801a      	strh	r2, [r3, #0]
		fr_error = abs(fr_path - fr_ad1_14);
 800a784:	4b77      	ldr	r3, [pc, #476]	; (800a964 <ADC_Get_Data+0x228>)
 800a786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a78a:	461a      	mov	r2, r3
 800a78c:	4b6f      	ldr	r3, [pc, #444]	; (800a94c <ADC_Get_Data+0x210>)
 800a78e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a792:	1ad3      	subs	r3, r2, r3
 800a794:	2b00      	cmp	r3, #0
 800a796:	bfb8      	it	lt
 800a798:	425b      	neglt	r3, r3
 800a79a:	b21a      	sxth	r2, r3
 800a79c:	4b72      	ldr	r3, [pc, #456]	; (800a968 <ADC_Get_Data+0x22c>)
 800a79e:	801a      	strh	r2, [r3, #0]
	    fl_error = abs(fl_path - fl_ad2_11);
 800a7a0:	4b72      	ldr	r3, [pc, #456]	; (800a96c <ADC_Get_Data+0x230>)
 800a7a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	4b6a      	ldr	r3, [pc, #424]	; (800a954 <ADC_Get_Data+0x218>)
 800a7aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	bfb8      	it	lt
 800a7b4:	425b      	neglt	r3, r3
 800a7b6:	b21a      	sxth	r2, r3
 800a7b8:	4b6d      	ldr	r3, [pc, #436]	; (800a970 <ADC_Get_Data+0x234>)
 800a7ba:	801a      	strh	r2, [r3, #0]
	    sr_error = abs(sr_path - sr_ad2_15);
 800a7bc:	4b6d      	ldr	r3, [pc, #436]	; (800a974 <ADC_Get_Data+0x238>)
 800a7be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	4b64      	ldr	r3, [pc, #400]	; (800a958 <ADC_Get_Data+0x21c>)
 800a7c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	bfb8      	it	lt
 800a7d0:	425b      	neglt	r3, r3
 800a7d2:	b21a      	sxth	r2, r3
 800a7d4:	4b68      	ldr	r3, [pc, #416]	; (800a978 <ADC_Get_Data+0x23c>)
 800a7d6:	801a      	strh	r2, [r3, #0]

	    sl_path = sl_ad1_10;
 800a7d8:	4b5b      	ldr	r3, [pc, #364]	; (800a948 <ADC_Get_Data+0x20c>)
 800a7da:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a7de:	4b5f      	ldr	r3, [pc, #380]	; (800a95c <ADC_Get_Data+0x220>)
 800a7e0:	801a      	strh	r2, [r3, #0]
	    fr_path = fr_ad1_14;
 800a7e2:	4b5a      	ldr	r3, [pc, #360]	; (800a94c <ADC_Get_Data+0x210>)
 800a7e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a7e8:	4b5e      	ldr	r3, [pc, #376]	; (800a964 <ADC_Get_Data+0x228>)
 800a7ea:	801a      	strh	r2, [r3, #0]
	    fl_path = fl_ad2_11;
 800a7ec:	4b59      	ldr	r3, [pc, #356]	; (800a954 <ADC_Get_Data+0x218>)
 800a7ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a7f2:	4b5e      	ldr	r3, [pc, #376]	; (800a96c <ADC_Get_Data+0x230>)
 800a7f4:	801a      	strh	r2, [r3, #0]
		sr_path = sr_ad2_15;
 800a7f6:	4b58      	ldr	r3, [pc, #352]	; (800a958 <ADC_Get_Data+0x21c>)
 800a7f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a7fc:	4b5d      	ldr	r3, [pc, #372]	; (800a974 <ADC_Get_Data+0x238>)
 800a7fe:	801a      	strh	r2, [r3, #0]

		battery_V = analog1[2];
 800a800:	4b50      	ldr	r3, [pc, #320]	; (800a944 <ADC_Get_Data+0x208>)
 800a802:	889b      	ldrh	r3, [r3, #4]
 800a804:	ee07 3a90 	vmov	s15, r3
 800a808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a80c:	4b5b      	ldr	r3, [pc, #364]	; (800a97c <ADC_Get_Data+0x240>)
 800a80e:	edc3 7a00 	vstr	s15, [r3]
#if 1
		sl_integrate += sl_error;
 800a812:	4b5b      	ldr	r3, [pc, #364]	; (800a980 <ADC_Get_Data+0x244>)
 800a814:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a818:	b29a      	uxth	r2, r3
 800a81a:	4b51      	ldr	r3, [pc, #324]	; (800a960 <ADC_Get_Data+0x224>)
 800a81c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a820:	b29b      	uxth	r3, r3
 800a822:	4413      	add	r3, r2
 800a824:	b29b      	uxth	r3, r3
 800a826:	b21a      	sxth	r2, r3
 800a828:	4b55      	ldr	r3, [pc, #340]	; (800a980 <ADC_Get_Data+0x244>)
 800a82a:	801a      	strh	r2, [r3, #0]
		fr_integrate += fr_error;
 800a82c:	4b55      	ldr	r3, [pc, #340]	; (800a984 <ADC_Get_Data+0x248>)
 800a82e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a832:	b29a      	uxth	r2, r3
 800a834:	4b4c      	ldr	r3, [pc, #304]	; (800a968 <ADC_Get_Data+0x22c>)
 800a836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	4413      	add	r3, r2
 800a83e:	b29b      	uxth	r3, r3
 800a840:	b21a      	sxth	r2, r3
 800a842:	4b50      	ldr	r3, [pc, #320]	; (800a984 <ADC_Get_Data+0x248>)
 800a844:	801a      	strh	r2, [r3, #0]
		fl_integrate += fl_error;
 800a846:	4b50      	ldr	r3, [pc, #320]	; (800a988 <ADC_Get_Data+0x24c>)
 800a848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	4b48      	ldr	r3, [pc, #288]	; (800a970 <ADC_Get_Data+0x234>)
 800a850:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a854:	b29b      	uxth	r3, r3
 800a856:	4413      	add	r3, r2
 800a858:	b29b      	uxth	r3, r3
 800a85a:	b21a      	sxth	r2, r3
 800a85c:	4b4a      	ldr	r3, [pc, #296]	; (800a988 <ADC_Get_Data+0x24c>)
 800a85e:	801a      	strh	r2, [r3, #0]
		sr_integrate += sr_error;
 800a860:	4b4a      	ldr	r3, [pc, #296]	; (800a98c <ADC_Get_Data+0x250>)
 800a862:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a866:	b29a      	uxth	r2, r3
 800a868:	4b43      	ldr	r3, [pc, #268]	; (800a978 <ADC_Get_Data+0x23c>)
 800a86a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a86e:	b29b      	uxth	r3, r3
 800a870:	4413      	add	r3, r2
 800a872:	b29b      	uxth	r3, r3
 800a874:	b21a      	sxth	r2, r3
 800a876:	4b45      	ldr	r3, [pc, #276]	; (800a98c <ADC_Get_Data+0x250>)
 800a878:	801a      	strh	r2, [r3, #0]

		count ++;
 800a87a:	4b45      	ldr	r3, [pc, #276]	; (800a990 <ADC_Get_Data+0x254>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	3301      	adds	r3, #1
 800a880:	4a43      	ldr	r2, [pc, #268]	; (800a990 <ADC_Get_Data+0x254>)
 800a882:	6013      	str	r3, [r2, #0]
		if(count == 10){
 800a884:	4b42      	ldr	r3, [pc, #264]	; (800a990 <ADC_Get_Data+0x254>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b0a      	cmp	r3, #10
 800a88a:	d156      	bne.n	800a93a <ADC_Get_Data+0x1fe>
			sl_average = (float)sl_integrate / count;
 800a88c:	4b3c      	ldr	r3, [pc, #240]	; (800a980 <ADC_Get_Data+0x244>)
 800a88e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a892:	ee07 3a90 	vmov	s15, r3
 800a896:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a89a:	4b3d      	ldr	r3, [pc, #244]	; (800a990 <ADC_Get_Data+0x254>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	ee07 3a90 	vmov	s15, r3
 800a8a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8aa:	4b3a      	ldr	r3, [pc, #232]	; (800a994 <ADC_Get_Data+0x258>)
 800a8ac:	edc3 7a00 	vstr	s15, [r3]
			fr_average = (float)fr_integrate / count;
 800a8b0:	4b34      	ldr	r3, [pc, #208]	; (800a984 <ADC_Get_Data+0x248>)
 800a8b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8b6:	ee07 3a90 	vmov	s15, r3
 800a8ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a8be:	4b34      	ldr	r3, [pc, #208]	; (800a990 <ADC_Get_Data+0x254>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	ee07 3a90 	vmov	s15, r3
 800a8c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8ce:	4b32      	ldr	r3, [pc, #200]	; (800a998 <ADC_Get_Data+0x25c>)
 800a8d0:	edc3 7a00 	vstr	s15, [r3]
			fl_average = (float)fl_integrate / count;
 800a8d4:	4b2c      	ldr	r3, [pc, #176]	; (800a988 <ADC_Get_Data+0x24c>)
 800a8d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8da:	ee07 3a90 	vmov	s15, r3
 800a8de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a8e2:	4b2b      	ldr	r3, [pc, #172]	; (800a990 <ADC_Get_Data+0x254>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	ee07 3a90 	vmov	s15, r3
 800a8ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8f2:	4b2a      	ldr	r3, [pc, #168]	; (800a99c <ADC_Get_Data+0x260>)
 800a8f4:	edc3 7a00 	vstr	s15, [r3]
			sr_average = (float)sr_integrate / count;
 800a8f8:	4b24      	ldr	r3, [pc, #144]	; (800a98c <ADC_Get_Data+0x250>)
 800a8fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8fe:	ee07 3a90 	vmov	s15, r3
 800a902:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a906:	4b22      	ldr	r3, [pc, #136]	; (800a990 <ADC_Get_Data+0x254>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	ee07 3a90 	vmov	s15, r3
 800a90e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a916:	4b22      	ldr	r3, [pc, #136]	; (800a9a0 <ADC_Get_Data+0x264>)
 800a918:	edc3 7a00 	vstr	s15, [r3]


			sl_integrate = 0;
 800a91c:	4b18      	ldr	r3, [pc, #96]	; (800a980 <ADC_Get_Data+0x244>)
 800a91e:	2200      	movs	r2, #0
 800a920:	801a      	strh	r2, [r3, #0]
			fr_integrate = 0;
 800a922:	4b18      	ldr	r3, [pc, #96]	; (800a984 <ADC_Get_Data+0x248>)
 800a924:	2200      	movs	r2, #0
 800a926:	801a      	strh	r2, [r3, #0]
			fl_integrate = 0;
 800a928:	4b17      	ldr	r3, [pc, #92]	; (800a988 <ADC_Get_Data+0x24c>)
 800a92a:	2200      	movs	r2, #0
 800a92c:	801a      	strh	r2, [r3, #0]
			sr_integrate = 0;
 800a92e:	4b17      	ldr	r3, [pc, #92]	; (800a98c <ADC_Get_Data+0x250>)
 800a930:	2200      	movs	r2, #0
 800a932:	801a      	strh	r2, [r3, #0]

			count = 0;
 800a934:	4b16      	ldr	r3, [pc, #88]	; (800a990 <ADC_Get_Data+0x254>)
 800a936:	2200      	movs	r2, #0
 800a938:	601a      	str	r2, [r3, #0]
		}

#endif
}
 800a93a:	bf00      	nop
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr
 800a944:	20000300 	.word	0x20000300
 800a948:	20004494 	.word	0x20004494
 800a94c:	20000028 	.word	0x20000028
 800a950:	20000308 	.word	0x20000308
 800a954:	2000030e 	.word	0x2000030e
 800a958:	20004ff2 	.word	0x20004ff2
 800a95c:	20004498 	.word	0x20004498
 800a960:	20004496 	.word	0x20004496
 800a964:	20000312 	.word	0x20000312
 800a968:	20000314 	.word	0x20000314
 800a96c:	20000310 	.word	0x20000310
 800a970:	20000316 	.word	0x20000316
 800a974:	200043c0 	.word	0x200043c0
 800a978:	200044e4 	.word	0x200044e4
 800a97c:	20005058 	.word	0x20005058
 800a980:	2000449e 	.word	0x2000449e
 800a984:	200045d0 	.word	0x200045d0
 800a988:	20004584 	.word	0x20004584
 800a98c:	20004528 	.word	0x20004528
 800a990:	20004358 	.word	0x20004358
 800a994:	20005054 	.word	0x20005054
 800a998:	20004f08 	.word	0x20004f08
 800a99c:	200043c4 	.word	0x200043c4
 800a9a0:	200044a0 	.word	0x200044a0

0800a9a4 <Velocity_Get>:
float Velocity_Get(float EN, float T){ // TIM2,TIM5の割り込み周
 800a9a4:	b480      	push	{r7}
 800a9a6:	b087      	sub	sp, #28
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	ed87 0a01 	vstr	s0, [r7, #4]
 800a9ae:	edc7 0a00 	vstr	s1, [r7]

 float Circumference, TirePulse_of_Circumference, velocity;

    Circumference = TIRE_DEAMETER * PI; // 周
 800a9b2:	4b0f      	ldr	r3, [pc, #60]	; (800a9f0 <Velocity_Get+0x4c>)
 800a9b4:	617b      	str	r3, [r7, #20]
    TirePulse_of_Circumference = ENCODER_PULSE * REDUCATION_RATIO; // タイヤ周のパルス
 800a9b6:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 800a9ba:	613b      	str	r3, [r7, #16]
    velocity = EN * (Circumference /TirePulse_of_Circumference)/ T; //a 1パルスで進距離 * パルス数/制御周
 800a9bc:	edd7 6a05 	vldr	s13, [r7, #20]
 800a9c0:	edd7 7a04 	vldr	s15, [r7, #16]
 800a9c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9c8:	edd7 7a01 	vldr	s15, [r7, #4]
 800a9cc:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a9d0:	ed97 7a00 	vldr	s14, [r7]
 800a9d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9d8:	edc7 7a03 	vstr	s15, [r7, #12]

    return velocity;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	ee07 3a90 	vmov	s15, r3

	 //TIM3 or 4 // 0.0012329102 = ( 20.2mm *) / (4096 * 4)
}
 800a9e2:	eeb0 0a67 	vmov.f32	s0, s15
 800a9e6:	371c      	adds	r7, #28
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr
 800a9f0:	42816f02 	.word	0x42816f02

0800a9f4 <Encoder_Reset>:


}


void Encoder_Reset(){
 800a9f4:	b480      	push	{r7}
 800a9f6:	af00      	add	r7, sp, #0
    TIM3 -> CNT = 30000 - 1;
 800a9f8:	4b06      	ldr	r3, [pc, #24]	; (800aa14 <Encoder_Reset+0x20>)
 800a9fa:	f247 522f 	movw	r2, #29999	; 0x752f
 800a9fe:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = 30000 - 1;
 800aa00:	4b05      	ldr	r3, [pc, #20]	; (800aa18 <Encoder_Reset+0x24>)
 800aa02:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa06:	625a      	str	r2, [r3, #36]	; 0x24

}
 800aa08:	bf00      	nop
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	40000400 	.word	0x40000400
 800aa18:	40000800 	.word	0x40000800

0800aa1c <Encoder_Count>:
int16_t Encoder_Count(int16_t mode){
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	80fb      	strh	r3, [r7, #6]

	if(mode == 0){
 800aa26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d102      	bne.n	800aa34 <Encoder_Count+0x18>

		mode = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	80fb      	strh	r3, [r7, #6]
 800aa32:	e030      	b.n	800aa96 <Encoder_Count+0x7a>
	  }
	  else if(mode == 1){
 800aa34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d12c      	bne.n	800aa96 <Encoder_Count+0x7a>
	    EN3_L.integrate += EN3_L.count;
 800aa3c:	4b1a      	ldr	r3, [pc, #104]	; (800aaa8 <Encoder_Count+0x8c>)
 800aa3e:	685a      	ldr	r2, [r3, #4]
 800aa40:	4b19      	ldr	r3, [pc, #100]	; (800aaa8 <Encoder_Count+0x8c>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4413      	add	r3, r2
 800aa46:	4a18      	ldr	r2, [pc, #96]	; (800aaa8 <Encoder_Count+0x8c>)
 800aa48:	6053      	str	r3, [r2, #4]
	    EN4_R.integrate += EN4_R.count;
 800aa4a:	4b18      	ldr	r3, [pc, #96]	; (800aaac <Encoder_Count+0x90>)
 800aa4c:	685a      	ldr	r2, [r3, #4]
 800aa4e:	4b17      	ldr	r3, [pc, #92]	; (800aaac <Encoder_Count+0x90>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4413      	add	r3, r2
 800aa54:	4a15      	ldr	r2, [pc, #84]	; (800aaac <Encoder_Count+0x90>)
 800aa56:	6053      	str	r3, [r2, #4]
	    EN_Body.integrate = (float)(EN3_L.integrate + EN4_R.integrate)/2;
 800aa58:	4b13      	ldr	r3, [pc, #76]	; (800aaa8 <Encoder_Count+0x8c>)
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	4b13      	ldr	r3, [pc, #76]	; (800aaac <Encoder_Count+0x90>)
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	4413      	add	r3, r2
 800aa62:	ee07 3a90 	vmov	s15, r3
 800aa66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa6a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800aa6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa76:	ee17 2a90 	vmov	r2, s15
 800aa7a:	4b0d      	ldr	r3, [pc, #52]	; (800aab0 <Encoder_Count+0x94>)
 800aa7c:	605a      	str	r2, [r3, #4]
	    All_Pulse_cut += EN3_L.count + EN4_R.count;
 800aa7e:	4b0a      	ldr	r3, [pc, #40]	; (800aaa8 <Encoder_Count+0x8c>)
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	4b0a      	ldr	r3, [pc, #40]	; (800aaac <Encoder_Count+0x90>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	441a      	add	r2, r3
 800aa88:	4b0a      	ldr	r3, [pc, #40]	; (800aab4 <Encoder_Count+0x98>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	4a09      	ldr	r2, [pc, #36]	; (800aab4 <Encoder_Count+0x98>)
 800aa90:	6013      	str	r3, [r2, #0]
	    mode =1;
 800aa92:	2301      	movs	r3, #1
 800aa94:	80fb      	strh	r3, [r7, #6]

	  }
	return mode;
 800aa96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	370c      	adds	r7, #12
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop
 800aaa8:	20000050 	.word	0x20000050
 800aaac:	2000005c 	.word	0x2000005c
 800aab0:	20000068 	.word	0x20000068
 800aab4:	200002f8 	.word	0x200002f8

0800aab8 <wait>:
//o 走行用の関数
//Motion.cとMotion.hにまとめる
//時間待ち関数

void wait(double wait_second)
{
 800aab8:	b590      	push	{r4, r7, lr}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	ed87 0b00 	vstr	d0, [r7]
	//グローバル変数のtimerを使う
	//いらない制御を切って待つ。か、つけっぱなし。
	//つけっぱなしのパターン
	//待った先の時間 - 現在の時間
	//待ちたい時間
	double starting_point_of_time = elapsed_time;
 800aac2:	4b0f      	ldr	r3, [pc, #60]	; (800ab00 <wait+0x48>)
 800aac4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aac8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	while(starting_point_of_time + wait_second > elapsed_time)
 800aacc:	bf00      	nop
 800aace:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aad2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aad6:	f7fd fb11 	bl	80080fc <__adddf3>
 800aada:	4603      	mov	r3, r0
 800aadc:	460c      	mov	r4, r1
 800aade:	4618      	mov	r0, r3
 800aae0:	4621      	mov	r1, r4
 800aae2:	4b07      	ldr	r3, [pc, #28]	; (800ab00 <wait+0x48>)
 800aae4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aae8:	461a      	mov	r2, r3
 800aaea:	4623      	mov	r3, r4
 800aaec:	f7fd ff4c 	bl	8008988 <__aeabi_dcmpgt>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1eb      	bne.n	800aace <wait+0x16>
	{

	}

	//いらない制御を切るパターン
}
 800aaf6:	bf00      	nop
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd90      	pop	{r4, r7, pc}
 800aafe:	bf00      	nop
 800ab00:	200002f0 	.word	0x200002f0
 800ab04:	00000000 	.word	0x00000000

0800ab08 <Start_Accel>:


void Start_Accel(){
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	af00      	add	r7, sp, #0
	error_reset = 0;
 800ab0c:	4b22      	ldr	r3, [pc, #136]	; (800ab98 <Start_Accel+0x90>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ab12:	f7fe fefd 	bl	8009910 <Motor_Count_Clear>
	//IMU_init();

    EN3_L.integrate = 0;
 800ab16:	4b21      	ldr	r3, [pc, #132]	; (800ab9c <Start_Accel+0x94>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ab1c:	4b20      	ldr	r3, [pc, #128]	; (800aba0 <Start_Accel+0x98>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ab22:	4b20      	ldr	r3, [pc, #128]	; (800aba4 <Start_Accel+0x9c>)
 800ab24:	2200      	movs	r2, #0
 800ab26:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800ab28:	4b1f      	ldr	r3, [pc, #124]	; (800aba8 <Start_Accel+0xa0>)
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	70da      	strb	r2, [r3, #3]

	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < START_ACCEL_PULSE * 2){
 800ab2e:	e005      	b.n	800ab3c <Start_Accel+0x34>
		mode.control = 4;
 800ab30:	4b1d      	ldr	r3, [pc, #116]	; (800aba8 <Start_Accel+0xa0>)
 800ab32:	2204      	movs	r2, #4
 800ab34:	715a      	strb	r2, [r3, #5]
		mode.accel= 1;
 800ab36:	4b1c      	ldr	r3, [pc, #112]	; (800aba8 <Start_Accel+0xa0>)
 800ab38:	2201      	movs	r2, #1
 800ab3a:	705a      	strb	r2, [r3, #1]
	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < START_ACCEL_PULSE * 2){
 800ab3c:	4b17      	ldr	r3, [pc, #92]	; (800ab9c <Start_Accel+0x94>)
 800ab3e:	685a      	ldr	r2, [r3, #4]
 800ab40:	4b17      	ldr	r3, [pc, #92]	; (800aba0 <Start_Accel+0x98>)
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	4413      	add	r3, r2
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	db0f      	blt.n	800ab6a <Start_Accel+0x62>
 800ab4a:	4b14      	ldr	r3, [pc, #80]	; (800ab9c <Start_Accel+0x94>)
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	4b14      	ldr	r3, [pc, #80]	; (800aba0 <Start_Accel+0x98>)
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	4413      	add	r3, r2
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7fd fc1d 	bl	8008394 <__aeabi_i2d>
 800ab5a:	a30d      	add	r3, pc, #52	; (adr r3, 800ab90 <Start_Accel+0x88>)
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	f7fd fef4 	bl	800894c <__aeabi_dcmplt>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d1e2      	bne.n	800ab30 <Start_Accel+0x28>
	}
	mode.accel = 0;
 800ab6a:	4b0f      	ldr	r3, [pc, #60]	; (800aba8 <Start_Accel+0xa0>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	705a      	strb	r2, [r3, #1]
	Target_velocity = SEARCH_SPEED;
 800ab70:	4b0e      	ldr	r3, [pc, #56]	; (800abac <Start_Accel+0xa4>)
 800ab72:	4a0f      	ldr	r2, [pc, #60]	; (800abb0 <Start_Accel+0xa8>)
 800ab74:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800ab76:	4b09      	ldr	r3, [pc, #36]	; (800ab9c <Start_Accel+0x94>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ab7c:	4b08      	ldr	r3, [pc, #32]	; (800aba0 <Start_Accel+0x98>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ab82:	4b08      	ldr	r3, [pc, #32]	; (800aba4 <Start_Accel+0x9c>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	605a      	str	r2, [r3, #4]

}
 800ab88:	bf00      	nop
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	f3af 8000 	nop.w
 800ab90:	63ed7f78 	.word	0x63ed7f78
 800ab94:	40ee8874 	.word	0x40ee8874
 800ab98:	2000027c 	.word	0x2000027c
 800ab9c:	20000050 	.word	0x20000050
 800aba0:	2000005c 	.word	0x2000005c
 800aba4:	20000068 	.word	0x20000068
 800aba8:	20000074 	.word	0x20000074
 800abac:	200002b8 	.word	0x200002b8
 800abb0:	436b0000 	.word	0x436b0000
 800abb4:	00000000 	.word	0x00000000

0800abb8 <Accelerate>:

void Accelerate(){
 800abb8:	b580      	push	{r7, lr}
 800abba:	af00      	add	r7, sp, #0

	error_reset = 0;
 800abbc:	4b4a      	ldr	r3, [pc, #296]	; (800ace8 <Accelerate+0x130>)
 800abbe:	2200      	movs	r2, #0
 800abc0:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800abc2:	f7fe fea5 	bl	8009910 <Motor_Count_Clear>
	//IMU_init();

	mode.control = 3;
 800abc6:	4b49      	ldr	r3, [pc, #292]	; (800acec <Accelerate+0x134>)
 800abc8:	2203      	movs	r2, #3
 800abca:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800abcc:	4b48      	ldr	r3, [pc, #288]	; (800acf0 <Accelerate+0x138>)
 800abce:	2200      	movs	r2, #0
 800abd0:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800abd2:	4b48      	ldr	r3, [pc, #288]	; (800acf4 <Accelerate+0x13c>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800abd8:	4b47      	ldr	r3, [pc, #284]	; (800acf8 <Accelerate+0x140>)
 800abda:	2200      	movs	r2, #0
 800abdc:	605a      	str	r2, [r3, #4]
	mode.enc = 1;
 800abde:	4b43      	ldr	r3, [pc, #268]	; (800acec <Accelerate+0x134>)
 800abe0:	2201      	movs	r2, #1
 800abe2:	70da      	strb	r2, [r3, #3]

	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < ACCE_DECE_PULSE * 2){
 800abe4:	e04d      	b.n	800ac82 <Accelerate+0xca>

		mode.accel = 2;
 800abe6:	4b41      	ldr	r3, [pc, #260]	; (800acec <Accelerate+0x134>)
 800abe8:	2202      	movs	r2, #2
 800abea:	705a      	strb	r2, [r3, #1]
#if 1
		if(WALL_JUDGE_PULSE * 2 < EN3_L.integrate + EN4_R.integrate){
 800abec:	4b40      	ldr	r3, [pc, #256]	; (800acf0 <Accelerate+0x138>)
 800abee:	685a      	ldr	r2, [r3, #4]
 800abf0:	4b40      	ldr	r3, [pc, #256]	; (800acf4 <Accelerate+0x13c>)
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	4413      	add	r3, r2
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fd fbcc 	bl	8008394 <__aeabi_i2d>
 800abfc:	a336      	add	r3, pc, #216	; (adr r3, 800acd8 <Accelerate+0x120>)
 800abfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac02:	f7fd fec1 	bl	8008988 <__aeabi_dcmpgt>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d037      	beq.n	800ac7c <Accelerate+0xc4>
			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800ac0c:	4b3b      	ldr	r3, [pc, #236]	; (800acfc <Accelerate+0x144>)
 800ac0e:	edd3 7a00 	vldr	s15, [r3]
 800ac12:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800ad00 <Accelerate+0x148>
 800ac16:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac1e:	dd0d      	ble.n	800ac3c <Accelerate+0x84>
 800ac20:	4b38      	ldr	r3, [pc, #224]	; (800ad04 <Accelerate+0x14c>)
 800ac22:	edd3 7a00 	vldr	s15, [r3]
 800ac26:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ad08 <Accelerate+0x150>
 800ac2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac32:	dd03      	ble.n	800ac3c <Accelerate+0x84>
				  mode.control = 0;
 800ac34:	4b2d      	ldr	r3, [pc, #180]	; (800acec <Accelerate+0x134>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	715a      	strb	r2, [r3, #5]
 800ac3a:	e022      	b.n	800ac82 <Accelerate+0xca>

				 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
		    }
			else if(fl_average > LEFT_WALL){
 800ac3c:	4b31      	ldr	r3, [pc, #196]	; (800ad04 <Accelerate+0x14c>)
 800ac3e:	edd3 7a00 	vldr	s15, [r3]
 800ac42:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ad08 <Accelerate+0x150>
 800ac46:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac4e:	dd03      	ble.n	800ac58 <Accelerate+0xa0>
				  mode.control = 1;
 800ac50:	4b26      	ldr	r3, [pc, #152]	; (800acec <Accelerate+0x134>)
 800ac52:	2201      	movs	r2, #1
 800ac54:	715a      	strb	r2, [r3, #5]
 800ac56:	e014      	b.n	800ac82 <Accelerate+0xca>
				 // Left_Wall_Control();
		    }
			else if(fr_average > RIGHT_WALL){
 800ac58:	4b28      	ldr	r3, [pc, #160]	; (800acfc <Accelerate+0x144>)
 800ac5a:	edd3 7a00 	vldr	s15, [r3]
 800ac5e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800ad00 <Accelerate+0x148>
 800ac62:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac6a:	dd03      	ble.n	800ac74 <Accelerate+0xbc>
				  mode.control = 2;
 800ac6c:	4b1f      	ldr	r3, [pc, #124]	; (800acec <Accelerate+0x134>)
 800ac6e:	2202      	movs	r2, #2
 800ac70:	715a      	strb	r2, [r3, #5]
 800ac72:	e006      	b.n	800ac82 <Accelerate+0xca>
							 // Right_Wall_Control();
		    }
			else mode.control = 4;
 800ac74:	4b1d      	ldr	r3, [pc, #116]	; (800acec <Accelerate+0x134>)
 800ac76:	2204      	movs	r2, #4
 800ac78:	715a      	strb	r2, [r3, #5]
 800ac7a:	e002      	b.n	800ac82 <Accelerate+0xca>
		}
		else mode.control = 4;
 800ac7c:	4b1b      	ldr	r3, [pc, #108]	; (800acec <Accelerate+0x134>)
 800ac7e:	2204      	movs	r2, #4
 800ac80:	715a      	strb	r2, [r3, #5]
	while( 0 <= (EN3_L.integrate + EN4_R.integrate) && (EN3_L.integrate + EN4_R.integrate) < ACCE_DECE_PULSE * 2){
 800ac82:	4b1b      	ldr	r3, [pc, #108]	; (800acf0 <Accelerate+0x138>)
 800ac84:	685a      	ldr	r2, [r3, #4]
 800ac86:	4b1b      	ldr	r3, [pc, #108]	; (800acf4 <Accelerate+0x13c>)
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	db0f      	blt.n	800acb0 <Accelerate+0xf8>
 800ac90:	4b17      	ldr	r3, [pc, #92]	; (800acf0 <Accelerate+0x138>)
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	4b17      	ldr	r3, [pc, #92]	; (800acf4 <Accelerate+0x13c>)
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	4413      	add	r3, r2
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fd fb7a 	bl	8008394 <__aeabi_i2d>
 800aca0:	a30f      	add	r3, pc, #60	; (adr r3, 800ace0 <Accelerate+0x128>)
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	f7fd fe51 	bl	800894c <__aeabi_dcmplt>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d19a      	bne.n	800abe6 <Accelerate+0x2e>
	}
#else
	mode.control = 3;
}
#endif
	mode.accel = 0;
 800acb0:	4b0e      	ldr	r3, [pc, #56]	; (800acec <Accelerate+0x134>)
 800acb2:	2200      	movs	r2, #0
 800acb4:	705a      	strb	r2, [r3, #1]
	Target_velocity = SEARCH_SPEED;
 800acb6:	4b15      	ldr	r3, [pc, #84]	; (800ad0c <Accelerate+0x154>)
 800acb8:	4a15      	ldr	r2, [pc, #84]	; (800ad10 <Accelerate+0x158>)
 800acba:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800acbc:	4b0c      	ldr	r3, [pc, #48]	; (800acf0 <Accelerate+0x138>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800acc2:	4b0c      	ldr	r3, [pc, #48]	; (800acf4 <Accelerate+0x13c>)
 800acc4:	2200      	movs	r2, #0
 800acc6:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800acc8:	4b0b      	ldr	r3, [pc, #44]	; (800acf8 <Accelerate+0x140>)
 800acca:	2200      	movs	r2, #0
 800accc:	605a      	str	r2, [r3, #4]

}
 800acce:	bf00      	nop
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	f3af 8000 	nop.w
 800acd8:	f298ebe1 	.word	0xf298ebe1
 800acdc:	40d8b91c 	.word	0x40d8b91c
 800ace0:	a7233ab1 	.word	0xa7233ab1
 800ace4:	40e64033 	.word	0x40e64033
 800ace8:	2000027c 	.word	0x2000027c
 800acec:	20000074 	.word	0x20000074
 800acf0:	20000050 	.word	0x20000050
 800acf4:	2000005c 	.word	0x2000005c
 800acf8:	20000068 	.word	0x20000068
 800acfc:	20004f08 	.word	0x20004f08
 800ad00:	42c80000 	.word	0x42c80000
 800ad04:	200043c4 	.word	0x200043c4
 800ad08:	430c0000 	.word	0x430c0000
 800ad0c:	200002b8 	.word	0x200002b8
 800ad10:	436b0000 	.word	0x436b0000
 800ad14:	00000000 	.word	0x00000000

0800ad18 <Decelerate>:
void Decelerate(){
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	af00      	add	r7, sp, #0


	//IMU_init();
	//mode.control = 4;

	mode.control = 3;
 800ad1c:	4b4c      	ldr	r3, [pc, #304]	; (800ae50 <Decelerate+0x138>)
 800ad1e:	2203      	movs	r2, #3
 800ad20:	715a      	strb	r2, [r3, #5]
	//printf("%d\r\n",EN3_L.integrate + EN4_R.integrate);
	while( (EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2) &&  ( (sl_average + sr_average )/2 < 1850)){
 800ad22:	e055      	b.n	800add0 <Decelerate+0xb8>
		mode.accel = 3;
 800ad24:	4b4a      	ldr	r3, [pc, #296]	; (800ae50 <Decelerate+0x138>)
 800ad26:	2203      	movs	r2, #3
 800ad28:	705a      	strb	r2, [r3, #1]
		printf("%d , %d\r\n",EN3_L.integrate , EN4_R.integrate);
 800ad2a:	4b4a      	ldr	r3, [pc, #296]	; (800ae54 <Decelerate+0x13c>)
 800ad2c:	6859      	ldr	r1, [r3, #4]
 800ad2e:	4b4a      	ldr	r3, [pc, #296]	; (800ae58 <Decelerate+0x140>)
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	461a      	mov	r2, r3
 800ad34:	4849      	ldr	r0, [pc, #292]	; (800ae5c <Decelerate+0x144>)
 800ad36:	f00b fe7d 	bl	8016a34 <iprintf>
#if 1
		if(EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2 - (WALL_JUDGE_PULSE  * 2 *3/5) ){//ここの閾値の意味:減速する距離は半区画 -
 800ad3a:	4b46      	ldr	r3, [pc, #280]	; (800ae54 <Decelerate+0x13c>)
 800ad3c:	685a      	ldr	r2, [r3, #4]
 800ad3e:	4b46      	ldr	r3, [pc, #280]	; (800ae58 <Decelerate+0x140>)
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	4413      	add	r3, r2
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fd fb25 	bl	8008394 <__aeabi_i2d>
 800ad4a:	a33d      	add	r3, pc, #244	; (adr r3, 800ae40 <Decelerate+0x128>)
 800ad4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad50:	f7fd fdfc 	bl	800894c <__aeabi_dcmplt>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d037      	beq.n	800adca <Decelerate+0xb2>
		  if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800ad5a:	4b41      	ldr	r3, [pc, #260]	; (800ae60 <Decelerate+0x148>)
 800ad5c:	edd3 7a00 	vldr	s15, [r3]
 800ad60:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800ae64 <Decelerate+0x14c>
 800ad64:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad6c:	dd0d      	ble.n	800ad8a <Decelerate+0x72>
 800ad6e:	4b3e      	ldr	r3, [pc, #248]	; (800ae68 <Decelerate+0x150>)
 800ad70:	edd3 7a00 	vldr	s15, [r3]
 800ad74:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800ae6c <Decelerate+0x154>
 800ad78:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad80:	dd03      	ble.n	800ad8a <Decelerate+0x72>
			  mode.control = 0;
 800ad82:	4b33      	ldr	r3, [pc, #204]	; (800ae50 <Decelerate+0x138>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	715a      	strb	r2, [r3, #5]
 800ad88:	e022      	b.n	800add0 <Decelerate+0xb8>

			 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
	      }
		  else if(fl_average > LEFT_WALL){
 800ad8a:	4b37      	ldr	r3, [pc, #220]	; (800ae68 <Decelerate+0x150>)
 800ad8c:	edd3 7a00 	vldr	s15, [r3]
 800ad90:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ae6c <Decelerate+0x154>
 800ad94:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad9c:	dd03      	ble.n	800ada6 <Decelerate+0x8e>
			  mode.control = 1;
 800ad9e:	4b2c      	ldr	r3, [pc, #176]	; (800ae50 <Decelerate+0x138>)
 800ada0:	2201      	movs	r2, #1
 800ada2:	715a      	strb	r2, [r3, #5]
 800ada4:	e014      	b.n	800add0 <Decelerate+0xb8>
			 // Left_Wall_Control();
	      }
		  else if(fr_average > RIGHT_WALL){
 800ada6:	4b2e      	ldr	r3, [pc, #184]	; (800ae60 <Decelerate+0x148>)
 800ada8:	edd3 7a00 	vldr	s15, [r3]
 800adac:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800ae64 <Decelerate+0x14c>
 800adb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adb8:	dd03      	ble.n	800adc2 <Decelerate+0xaa>
			  mode.control = 2;
 800adba:	4b25      	ldr	r3, [pc, #148]	; (800ae50 <Decelerate+0x138>)
 800adbc:	2202      	movs	r2, #2
 800adbe:	715a      	strb	r2, [r3, #5]
 800adc0:	e006      	b.n	800add0 <Decelerate+0xb8>
						 // Right_Wall_Control();
	      }
		  else mode.control = 4;
 800adc2:	4b23      	ldr	r3, [pc, #140]	; (800ae50 <Decelerate+0x138>)
 800adc4:	2204      	movs	r2, #4
 800adc6:	715a      	strb	r2, [r3, #5]
 800adc8:	e002      	b.n	800add0 <Decelerate+0xb8>
		}
		else mode.control = 4;
 800adca:	4b21      	ldr	r3, [pc, #132]	; (800ae50 <Decelerate+0x138>)
 800adcc:	2204      	movs	r2, #4
 800adce:	715a      	strb	r2, [r3, #5]
	while( (EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2) &&  ( (sl_average + sr_average )/2 < 1850)){
 800add0:	4b20      	ldr	r3, [pc, #128]	; (800ae54 <Decelerate+0x13c>)
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	4b20      	ldr	r3, [pc, #128]	; (800ae58 <Decelerate+0x140>)
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	4413      	add	r3, r2
 800adda:	4618      	mov	r0, r3
 800addc:	f7fd fada 	bl	8008394 <__aeabi_i2d>
 800ade0:	a319      	add	r3, pc, #100	; (adr r3, 800ae48 <Decelerate+0x130>)
 800ade2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade6:	f7fd fdb1 	bl	800894c <__aeabi_dcmplt>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d012      	beq.n	800ae16 <Decelerate+0xfe>
 800adf0:	4b1f      	ldr	r3, [pc, #124]	; (800ae70 <Decelerate+0x158>)
 800adf2:	ed93 7a00 	vldr	s14, [r3]
 800adf6:	4b1f      	ldr	r3, [pc, #124]	; (800ae74 <Decelerate+0x15c>)
 800adf8:	edd3 7a00 	vldr	s15, [r3]
 800adfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ae00:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ae04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ae08:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800ae78 <Decelerate+0x160>
 800ae0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae14:	d486      	bmi.n	800ad24 <Decelerate+0xc>
#else
	mode.control = 3;
}
#endif

	mode.accel = 0;
 800ae16:	4b0e      	ldr	r3, [pc, #56]	; (800ae50 <Decelerate+0x138>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	705a      	strb	r2, [r3, #1]
	mode.control = 5;
 800ae1c:	4b0c      	ldr	r3, [pc, #48]	; (800ae50 <Decelerate+0x138>)
 800ae1e:	2205      	movs	r2, #5
 800ae20:	715a      	strb	r2, [r3, #5]
	Target_velocity = 0;
 800ae22:	4b16      	ldr	r3, [pc, #88]	; (800ae7c <Decelerate+0x164>)
 800ae24:	f04f 0200 	mov.w	r2, #0
 800ae28:	601a      	str	r2, [r3, #0]
	mode.enc = 0;
 800ae2a:	4b09      	ldr	r3, [pc, #36]	; (800ae50 <Decelerate+0x138>)
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	70da      	strb	r2, [r3, #3]
	error_reset = 0;
 800ae30:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <Decelerate+0x168>)
 800ae32:	2200      	movs	r2, #0
 800ae34:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ae36:	f7fe fd6b 	bl	8009910 <Motor_Count_Clear>


	//printf("減�?????��?��??��?��???��?��??��?��した???��?��??��?��?\r\n");
}
 800ae3a:	bf00      	nop
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	89844e41 	.word	0x89844e41
 800ae44:	40ddaaef 	.word	0x40ddaaef
 800ae48:	a7233ab1 	.word	0xa7233ab1
 800ae4c:	40e64033 	.word	0x40e64033
 800ae50:	20000074 	.word	0x20000074
 800ae54:	20000050 	.word	0x20000050
 800ae58:	2000005c 	.word	0x2000005c
 800ae5c:	08018934 	.word	0x08018934
 800ae60:	20004f08 	.word	0x20004f08
 800ae64:	42c80000 	.word	0x42c80000
 800ae68:	200043c4 	.word	0x200043c4
 800ae6c:	430c0000 	.word	0x430c0000
 800ae70:	20005054 	.word	0x20005054
 800ae74:	200044a0 	.word	0x200044a0
 800ae78:	44e74000 	.word	0x44e74000
 800ae7c:	200002b8 	.word	0x200002b8
 800ae80:	2000027c 	.word	0x2000027c
 800ae84:	00000000 	.word	0x00000000

0800ae88 <straight>:

			return Velocity;


}
void straight(){ //uint8_t block_num
 800ae88:	b5b0      	push	{r4, r5, r7, lr}
 800ae8a:	af00      	add	r7, sp, #0
//    EN3_L.integrate = 0;
//    EN4_R.integrate = 0;
//	  EN_Body.integrate = 0;
//    mode.enc = 1;

  while(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 ){
 800ae8c:	e07e      	b.n	800af8c <straight+0x104>
#if 1
	  if(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 *0.45 || Target_pulse * 2 - (WALL_JUDGE_PULSE * 12/5) < EN3_L.integrate + EN4_R.integrate){
 800ae8e:	4b54      	ldr	r3, [pc, #336]	; (800afe0 <straight+0x158>)
 800ae90:	685a      	ldr	r2, [r3, #4]
 800ae92:	4b54      	ldr	r3, [pc, #336]	; (800afe4 <straight+0x15c>)
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	4413      	add	r3, r2
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7fd fa7b 	bl	8008394 <__aeabi_i2d>
 800ae9e:	4604      	mov	r4, r0
 800aea0:	460d      	mov	r5, r1
 800aea2:	4b51      	ldr	r3, [pc, #324]	; (800afe8 <straight+0x160>)
 800aea4:	edd3 7a00 	vldr	s15, [r3]
 800aea8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aeac:	ee17 0a90 	vmov	r0, s15
 800aeb0:	f7fd fa82 	bl	80083b8 <__aeabi_f2d>
 800aeb4:	a346      	add	r3, pc, #280	; (adr r3, 800afd0 <straight+0x148>)
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	f7fd fad5 	bl	8008468 <__aeabi_dmul>
 800aebe:	4602      	mov	r2, r0
 800aec0:	460b      	mov	r3, r1
 800aec2:	4620      	mov	r0, r4
 800aec4:	4629      	mov	r1, r5
 800aec6:	f7fd fd41 	bl	800894c <__aeabi_dcmplt>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d122      	bne.n	800af16 <straight+0x8e>
 800aed0:	4b45      	ldr	r3, [pc, #276]	; (800afe8 <straight+0x160>)
 800aed2:	edd3 7a00 	vldr	s15, [r3]
 800aed6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aeda:	ee17 0a90 	vmov	r0, s15
 800aede:	f7fd fa6b 	bl	80083b8 <__aeabi_f2d>
 800aee2:	a33d      	add	r3, pc, #244	; (adr r3, 800afd8 <straight+0x150>)
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	f7fd f906 	bl	80080f8 <__aeabi_dsub>
 800aeec:	4603      	mov	r3, r0
 800aeee:	460c      	mov	r4, r1
 800aef0:	4625      	mov	r5, r4
 800aef2:	461c      	mov	r4, r3
 800aef4:	4b3a      	ldr	r3, [pc, #232]	; (800afe0 <straight+0x158>)
 800aef6:	685a      	ldr	r2, [r3, #4]
 800aef8:	4b3a      	ldr	r3, [pc, #232]	; (800afe4 <straight+0x15c>)
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	4413      	add	r3, r2
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fd fa48 	bl	8008394 <__aeabi_i2d>
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	4620      	mov	r0, r4
 800af0a:	4629      	mov	r1, r5
 800af0c:	f7fd fd1e 	bl	800894c <__aeabi_dcmplt>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d037      	beq.n	800af86 <straight+0xfe>

			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800af16:	4b35      	ldr	r3, [pc, #212]	; (800afec <straight+0x164>)
 800af18:	edd3 7a00 	vldr	s15, [r3]
 800af1c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800aff0 <straight+0x168>
 800af20:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af28:	dd0d      	ble.n	800af46 <straight+0xbe>
 800af2a:	4b32      	ldr	r3, [pc, #200]	; (800aff4 <straight+0x16c>)
 800af2c:	edd3 7a00 	vldr	s15, [r3]
 800af30:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800aff8 <straight+0x170>
 800af34:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af3c:	dd03      	ble.n	800af46 <straight+0xbe>
				  mode.control = 0;
 800af3e:	4b2f      	ldr	r3, [pc, #188]	; (800affc <straight+0x174>)
 800af40:	2200      	movs	r2, #0
 800af42:	715a      	strb	r2, [r3, #5]
 800af44:	e01e      	b.n	800af84 <straight+0xfc>

				 // Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
		    }
			else if(fl_average > LEFT_WALL){
 800af46:	4b2b      	ldr	r3, [pc, #172]	; (800aff4 <straight+0x16c>)
 800af48:	edd3 7a00 	vldr	s15, [r3]
 800af4c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800aff8 <straight+0x170>
 800af50:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af58:	dd03      	ble.n	800af62 <straight+0xda>
				  mode.control = 1;
 800af5a:	4b28      	ldr	r3, [pc, #160]	; (800affc <straight+0x174>)
 800af5c:	2201      	movs	r2, #1
 800af5e:	715a      	strb	r2, [r3, #5]
 800af60:	e014      	b.n	800af8c <straight+0x104>
				 // Left_Wall_Control();
		    }
			else if(fr_average > RIGHT_WALL){
 800af62:	4b22      	ldr	r3, [pc, #136]	; (800afec <straight+0x164>)
 800af64:	edd3 7a00 	vldr	s15, [r3]
 800af68:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800aff0 <straight+0x168>
 800af6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af74:	dd03      	ble.n	800af7e <straight+0xf6>
				  mode.control = 2;
 800af76:	4b21      	ldr	r3, [pc, #132]	; (800affc <straight+0x174>)
 800af78:	2202      	movs	r2, #2
 800af7a:	715a      	strb	r2, [r3, #5]
 800af7c:	e006      	b.n	800af8c <straight+0x104>
							 // Right_Wall_Control();
		    }
			else mode.control = 4;
 800af7e:	4b1f      	ldr	r3, [pc, #124]	; (800affc <straight+0x174>)
 800af80:	2204      	movs	r2, #4
 800af82:	715a      	strb	r2, [r3, #5]
			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800af84:	e002      	b.n	800af8c <straight+0x104>
	  }
	  else
		  mode.control = 4;
 800af86:	4b1d      	ldr	r3, [pc, #116]	; (800affc <straight+0x174>)
 800af88:	2204      	movs	r2, #4
 800af8a:	715a      	strb	r2, [r3, #5]
  while(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 ){
 800af8c:	4b14      	ldr	r3, [pc, #80]	; (800afe0 <straight+0x158>)
 800af8e:	685a      	ldr	r2, [r3, #4]
 800af90:	4b14      	ldr	r3, [pc, #80]	; (800afe4 <straight+0x15c>)
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	4413      	add	r3, r2
 800af96:	ee07 3a90 	vmov	s15, r3
 800af9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800af9e:	4b12      	ldr	r3, [pc, #72]	; (800afe8 <straight+0x160>)
 800afa0:	edd3 7a00 	vldr	s15, [r3]
 800afa4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800afa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800afac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afb0:	f53f af6d 	bmi.w	800ae8e <straight+0x6>
#else

		  mode.control = 3;
  }
#endif
      EN3_L.integrate = 0;
 800afb4:	4b0a      	ldr	r3, [pc, #40]	; (800afe0 <straight+0x158>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	605a      	str	r2, [r3, #4]
      EN4_R.integrate = 0;
 800afba:	4b0a      	ldr	r3, [pc, #40]	; (800afe4 <straight+0x15c>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	605a      	str	r2, [r3, #4]
      EN_Body.integrate = 0;
 800afc0:	4b0f      	ldr	r3, [pc, #60]	; (800b000 <straight+0x178>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	605a      	str	r2, [r3, #4]
    }

    printf("3区画進んだ??��?��? : %d \r\n",check);

#endif
}
 800afc6:	bf00      	nop
 800afc8:	bdb0      	pop	{r4, r5, r7, pc}
 800afca:	bf00      	nop
 800afcc:	f3af 8000 	nop.w
 800afd0:	cccccccd 	.word	0xcccccccd
 800afd4:	3fdccccc 	.word	0x3fdccccc
 800afd8:	89844e42 	.word	0x89844e42
 800afdc:	40ddaaef 	.word	0x40ddaaef
 800afe0:	20000050 	.word	0x20000050
 800afe4:	2000005c 	.word	0x2000005c
 800afe8:	20000000 	.word	0x20000000
 800afec:	20004f08 	.word	0x20004f08
 800aff0:	42c80000 	.word	0x42c80000
 800aff4:	200043c4 	.word	0x200043c4
 800aff8:	430c0000 	.word	0x430c0000
 800affc:	20000074 	.word	0x20000074
 800b000:	20000068 	.word	0x20000068
 800b004:	00000000 	.word	0x00000000

0800b008 <IMU_turn>:

			return Velocity;

}

void IMU_turn(int8_t target_angle, double target_angle_velo){
 800b008:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b00c:	ed2d 8b02 	vpush	{d8}
 800b010:	b084      	sub	sp, #16
 800b012:	af00      	add	r7, sp, #0
 800b014:	4603      	mov	r3, r0
 800b016:	ed87 0b00 	vstr	d0, [r7]
 800b01a:	73fb      	strb	r3, [r7, #15]
	    Motor_PWM_Start();
 800b01c:	f7fe fff6 	bl	800a00c <Motor_PWM_Start>
	    if(target_angle < 0){
 800b020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b024:	2b00      	cmp	r3, #0
 800b026:	da37      	bge.n	800b098 <IMU_turn+0x90>
	     while(target_angle < Body_angle){
 800b028:	e027      	b.n	800b07a <IMU_turn+0x72>

		   IMU_Control(target_angle_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800b02a:	4b47      	ldr	r3, [pc, #284]	; (800b148 <IMU_turn+0x140>)
 800b02c:	ed93 8b00 	vldr	d8, [r3]
 800b030:	4b46      	ldr	r3, [pc, #280]	; (800b14c <IMU_turn+0x144>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4618      	mov	r0, r3
 800b036:	f7fd f9bf 	bl	80083b8 <__aeabi_f2d>
 800b03a:	4604      	mov	r4, r0
 800b03c:	460d      	mov	r5, r1
 800b03e:	4b43      	ldr	r3, [pc, #268]	; (800b14c <IMU_turn+0x144>)
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	4618      	mov	r0, r3
 800b044:	f7fd f9b8 	bl	80083b8 <__aeabi_f2d>
 800b048:	4680      	mov	r8, r0
 800b04a:	4689      	mov	r9, r1
 800b04c:	4b3f      	ldr	r3, [pc, #252]	; (800b14c <IMU_turn+0x144>)
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	4618      	mov	r0, r3
 800b052:	f7fd f9b1 	bl	80083b8 <__aeabi_f2d>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	ec43 2b15 	vmov	d5, r2, r3
 800b05e:	ec49 8b14 	vmov	d4, r8, r9
 800b062:	ec45 4b13 	vmov	d3, r4, r5
 800b066:	ed9f 2b36 	vldr	d2, [pc, #216]	; 800b140 <IMU_turn+0x138>
 800b06a:	eeb0 1a48 	vmov.f32	s2, s16
 800b06e:	eef0 1a68 	vmov.f32	s3, s17
 800b072:	ed97 0b00 	vldr	d0, [r7]
 800b076:	f7ff f8cf 	bl	800a218 <IMU_Control>
	     while(target_angle < Body_angle){
 800b07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fd f988 	bl	8008394 <__aeabi_i2d>
 800b084:	4b32      	ldr	r3, [pc, #200]	; (800b150 <IMU_turn+0x148>)
 800b086:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b08a:	461a      	mov	r2, r3
 800b08c:	4623      	mov	r3, r4
 800b08e:	f7fd fc5d 	bl	800894c <__aeabi_dcmplt>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1c8      	bne.n	800b02a <IMU_turn+0x22>
		//printf("ジャイロ : %f \r\n", Body_angle*180/ M_PI);
	     }
	    }
	    if(target_angle > 0){
 800b098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	dd37      	ble.n	800b110 <IMU_turn+0x108>
	     while(target_angle > Body_angle){
 800b0a0:	e027      	b.n	800b0f2 <IMU_turn+0xea>

	       IMU_Control(target_angle_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800b0a2:	4b29      	ldr	r3, [pc, #164]	; (800b148 <IMU_turn+0x140>)
 800b0a4:	ed93 8b00 	vldr	d8, [r3]
 800b0a8:	4b28      	ldr	r3, [pc, #160]	; (800b14c <IMU_turn+0x144>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7fd f983 	bl	80083b8 <__aeabi_f2d>
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	460d      	mov	r5, r1
 800b0b6:	4b25      	ldr	r3, [pc, #148]	; (800b14c <IMU_turn+0x144>)
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fd f97c 	bl	80083b8 <__aeabi_f2d>
 800b0c0:	4680      	mov	r8, r0
 800b0c2:	4689      	mov	r9, r1
 800b0c4:	4b21      	ldr	r3, [pc, #132]	; (800b14c <IMU_turn+0x144>)
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fd f975 	bl	80083b8 <__aeabi_f2d>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	ec43 2b15 	vmov	d5, r2, r3
 800b0d6:	ec49 8b14 	vmov	d4, r8, r9
 800b0da:	ec45 4b13 	vmov	d3, r4, r5
 800b0de:	ed9f 2b18 	vldr	d2, [pc, #96]	; 800b140 <IMU_turn+0x138>
 800b0e2:	eeb0 1a48 	vmov.f32	s2, s16
 800b0e6:	eef0 1a68 	vmov.f32	s3, s17
 800b0ea:	ed97 0b00 	vldr	d0, [r7]
 800b0ee:	f7ff f893 	bl	800a218 <IMU_Control>
	     while(target_angle > Body_angle){
 800b0f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fd f94c 	bl	8008394 <__aeabi_i2d>
 800b0fc:	4b14      	ldr	r3, [pc, #80]	; (800b150 <IMU_turn+0x148>)
 800b0fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b102:	461a      	mov	r2, r3
 800b104:	4623      	mov	r3, r4
 800b106:	f7fd fc3f 	bl	8008988 <__aeabi_dcmpgt>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1c8      	bne.n	800b0a2 <IMU_turn+0x9a>
	    			//printf("ジャイロ : %f \r\n", Body_angle*180/ M_PI);
	     }
	    }
	    mode.enc = 0;
 800b110:	4b10      	ldr	r3, [pc, #64]	; (800b154 <IMU_turn+0x14c>)
 800b112:	2200      	movs	r2, #0
 800b114:	70da      	strb	r2, [r3, #3]
	    imu_angle = 0;
 800b116:	4a10      	ldr	r2, [pc, #64]	; (800b158 <IMU_turn+0x150>)
 800b118:	f04f 0300 	mov.w	r3, #0
 800b11c:	f04f 0400 	mov.w	r4, #0
 800b120:	e9c2 3400 	strd	r3, r4, [r2]
	    Body_angle = 0;
 800b124:	4a0a      	ldr	r2, [pc, #40]	; (800b150 <IMU_turn+0x148>)
 800b126:	f04f 0300 	mov.w	r3, #0
 800b12a:	f04f 0400 	mov.w	r4, #0
 800b12e:	e9c2 3400 	strd	r3, r4, [r2]

	//Motor_PWM_Stop();

}
 800b132:	bf00      	nop
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	ecbd 8b02 	vpop	{d8}
 800b13c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b140:	d2f1a9fc 	.word	0xd2f1a9fc
 800b144:	3f50624d 	.word	0x3f50624d
 800b148:	200002d0 	.word	0x200002d0
 800b14c:	20000044 	.word	0x20000044
 800b150:	200002c0 	.word	0x200002c0
 800b154:	20000074 	.word	0x20000074
 800b158:	200002c8 	.word	0x200002c8

0800b15c <turn_right>:

void turn_right(){
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0

	//左右の車輪速度制御
	//or 角速度制御で旋回
	  uint8_t counter=0;
 800b162:	2300      	movs	r3, #0
 800b164:	71fb      	strb	r3, [r7, #7]
	  //printf("turnはじめ\r\n");
	   while(counter < 1){
 800b166:	e045      	b.n	800b1f4 <turn_right+0x98>

			Target_velocity = 0;
 800b168:	4b28      	ldr	r3, [pc, #160]	; (800b20c <turn_right+0xb0>)
 800b16a:	f04f 0200 	mov.w	r2, #0
 800b16e:	601a      	str	r2, [r3, #0]

			error_reset = 0;
 800b170:	4b27      	ldr	r3, [pc, #156]	; (800b210 <turn_right+0xb4>)
 800b172:	2200      	movs	r2, #0
 800b174:	701a      	strb	r2, [r3, #0]
			Motor_Count_Clear();
 800b176:	f7fe fbcb 	bl	8009910 <Motor_Count_Clear>
	    EN3_L.integrate = 0;
 800b17a:	4b26      	ldr	r3, [pc, #152]	; (800b214 <turn_right+0xb8>)
 800b17c:	2200      	movs	r2, #0
 800b17e:	605a      	str	r2, [r3, #4]
	    EN4_R.integrate = 0;
 800b180:	4b25      	ldr	r3, [pc, #148]	; (800b218 <turn_right+0xbc>)
 800b182:	2200      	movs	r2, #0
 800b184:	605a      	str	r2, [r3, #4]
		  EN_Body.integrate = 0;
 800b186:	4b25      	ldr	r3, [pc, #148]	; (800b21c <turn_right+0xc0>)
 800b188:	2200      	movs	r2, #0
 800b18a:	605a      	str	r2, [r3, #4]
		  mode.enc = 1;
 800b18c:	4b24      	ldr	r3, [pc, #144]	; (800b220 <turn_right+0xc4>)
 800b18e:	2201      	movs	r2, #1
 800b190:	70da      	strb	r2, [r3, #3]
		  //int pulse_check ;
		///while(EN3_L.integrate >= -Target_pul_quarter && EN4_R.integrate <= Target_pul_quarter){
	  while(EN3_L.integrate + (-1)*EN4_R.integrate <= Target_pul_quarter*2){
 800b192:	e005      	b.n	800b1a0 <turn_right+0x44>

		  mode.control = 3;
 800b194:	4b22      	ldr	r3, [pc, #136]	; (800b220 <turn_right+0xc4>)
 800b196:	2203      	movs	r2, #3
 800b198:	715a      	strb	r2, [r3, #5]
		  Target_Rad_velo = -5;//Rotate(Target_Rad_velo, -5, Target_pul_quarter, EN3_L.integrate);
 800b19a:	4b22      	ldr	r3, [pc, #136]	; (800b224 <turn_right+0xc8>)
 800b19c:	4a22      	ldr	r2, [pc, #136]	; (800b228 <turn_right+0xcc>)
 800b19e:	601a      	str	r2, [r3, #0]
	  while(EN3_L.integrate + (-1)*EN4_R.integrate <= Target_pul_quarter*2){
 800b1a0:	4b1c      	ldr	r3, [pc, #112]	; (800b214 <turn_right+0xb8>)
 800b1a2:	685a      	ldr	r2, [r3, #4]
 800b1a4:	4b1c      	ldr	r3, [pc, #112]	; (800b218 <turn_right+0xbc>)
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	1ad3      	subs	r3, r2, r3
 800b1aa:	ee07 3a90 	vmov	s15, r3
 800b1ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b1b2:	4b1e      	ldr	r3, [pc, #120]	; (800b22c <turn_right+0xd0>)
 800b1b4:	edd3 7a00 	vldr	s15, [r3]
 800b1b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b1bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1c4:	d9e6      	bls.n	800b194 <turn_right+0x38>
//		  Target_Rad_velo = -10;
		  //pulse_check = EN3_L.integrate + (-1)*EN4_R.integrate;
		  //printf("turn中 %d\r\n",pulse_check);
	    	}

	      mode.enc = 0;
 800b1c6:	4b16      	ldr	r3, [pc, #88]	; (800b220 <turn_right+0xc4>)
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	70da      	strb	r2, [r3, #3]
	      Target_Rad_velo = 0;
 800b1cc:	4b15      	ldr	r3, [pc, #84]	; (800b224 <turn_right+0xc8>)
 800b1ce:	f04f 0200 	mov.w	r2, #0
 800b1d2:	601a      	str	r2, [r3, #0]
//	      mode.control = 4;
//	      Target_Rad_velo = 0;
	      Target_velocity = 0;
 800b1d4:	4b0d      	ldr	r3, [pc, #52]	; (800b20c <turn_right+0xb0>)
 800b1d6:	f04f 0200 	mov.w	r2, #0
 800b1da:	601a      	str	r2, [r3, #0]
//			  printf("turn中 %d, <= 目標パルス %f\r\n",pulse_check ,Target_pul_quarter*2);
//
//
//		  }
	      //Target_rotate =0;
	      EN3_L.integrate = 0;
 800b1dc:	4b0d      	ldr	r3, [pc, #52]	; (800b214 <turn_right+0xb8>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	605a      	str	r2, [r3, #4]
	      EN4_R.integrate = 0;
 800b1e2:	4b0d      	ldr	r3, [pc, #52]	; (800b218 <turn_right+0xbc>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	605a      	str	r2, [r3, #4]
	      EN_Body.integrate = 0;
 800b1e8:	4b0c      	ldr	r3, [pc, #48]	; (800b21c <turn_right+0xc0>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	605a      	str	r2, [r3, #4]
	      counter++;
 800b1ee:	79fb      	ldrb	r3, [r7, #7]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	71fb      	strb	r3, [r7, #7]
	   while(counter < 1){
 800b1f4:	79fb      	ldrb	r3, [r7, #7]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d0b6      	beq.n	800b168 <turn_right+0xc>
	     }
		error_reset = 0;
 800b1fa:	4b05      	ldr	r3, [pc, #20]	; (800b210 <turn_right+0xb4>)
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	701a      	strb	r2, [r3, #0]
		Motor_Count_Clear();
 800b200:	f7fe fb86 	bl	8009910 <Motor_Count_Clear>




}
 800b204:	bf00      	nop
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	200002b8 	.word	0x200002b8
 800b210:	2000027c 	.word	0x2000027c
 800b214:	20000050 	.word	0x20000050
 800b218:	2000005c 	.word	0x2000005c
 800b21c:	20000068 	.word	0x20000068
 800b220:	20000074 	.word	0x20000074
 800b224:	200002bc 	.word	0x200002bc
 800b228:	c0a00000 	.word	0xc0a00000
 800b22c:	20000004 	.word	0x20000004

0800b230 <turn_left>:

void turn_left(){
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0

	  uint8_t counter=0;
 800b236:	2300      	movs	r3, #0
 800b238:	71fb      	strb	r3, [r7, #7]
	  //static int check = 0, check2 = 0;

    while(counter < 1){
 800b23a:	e045      	b.n	800b2c8 <turn_left+0x98>

			Target_velocity = 0;
 800b23c:	4b28      	ldr	r3, [pc, #160]	; (800b2e0 <turn_left+0xb0>)
 800b23e:	f04f 0200 	mov.w	r2, #0
 800b242:	601a      	str	r2, [r3, #0]
			error_reset = 0;
 800b244:	4b27      	ldr	r3, [pc, #156]	; (800b2e4 <turn_left+0xb4>)
 800b246:	2200      	movs	r2, #0
 800b248:	701a      	strb	r2, [r3, #0]
			Motor_Count_Clear();
 800b24a:	f7fe fb61 	bl	8009910 <Motor_Count_Clear>
	      EN3_L.integrate = 0;
 800b24e:	4b26      	ldr	r3, [pc, #152]	; (800b2e8 <turn_left+0xb8>)
 800b250:	2200      	movs	r2, #0
 800b252:	605a      	str	r2, [r3, #4]
	      EN4_R.integrate = 0;
 800b254:	4b25      	ldr	r3, [pc, #148]	; (800b2ec <turn_left+0xbc>)
 800b256:	2200      	movs	r2, #0
 800b258:	605a      	str	r2, [r3, #4]
		  EN_Body.integrate = 0;
 800b25a:	4b25      	ldr	r3, [pc, #148]	; (800b2f0 <turn_left+0xc0>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	605a      	str	r2, [r3, #4]
		  mode.enc = 1;
 800b260:	4b24      	ldr	r3, [pc, #144]	; (800b2f4 <turn_left+0xc4>)
 800b262:	2201      	movs	r2, #1
 800b264:	70da      	strb	r2, [r3, #3]
	while((-1)*EN3_L.integrate + EN4_R.integrate <= Target_pul_quarter * 2){
 800b266:	e005      	b.n	800b274 <turn_left+0x44>

		  mode.control = 3;
 800b268:	4b22      	ldr	r3, [pc, #136]	; (800b2f4 <turn_left+0xc4>)
 800b26a:	2203      	movs	r2, #3
 800b26c:	715a      	strb	r2, [r3, #5]
		  Target_Rad_velo = 5;//Rotate(Target_Rad_velo, 5, Target_pul_quarter, EN4_R.integrate);
 800b26e:	4b22      	ldr	r3, [pc, #136]	; (800b2f8 <turn_left+0xc8>)
 800b270:	4a22      	ldr	r2, [pc, #136]	; (800b2fc <turn_left+0xcc>)
 800b272:	601a      	str	r2, [r3, #0]
	while((-1)*EN3_L.integrate + EN4_R.integrate <= Target_pul_quarter * 2){
 800b274:	4b1d      	ldr	r3, [pc, #116]	; (800b2ec <turn_left+0xbc>)
 800b276:	685a      	ldr	r2, [r3, #4]
 800b278:	4b1b      	ldr	r3, [pc, #108]	; (800b2e8 <turn_left+0xb8>)
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	ee07 3a90 	vmov	s15, r3
 800b282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b286:	4b1e      	ldr	r3, [pc, #120]	; (800b300 <turn_left+0xd0>)
 800b288:	edd3 7a00 	vldr	s15, [r3]
 800b28c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b290:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b298:	d9e6      	bls.n	800b268 <turn_left+0x38>
//	      check = EN3_L.integrate;
//	      check2 = EN4_R.integrate;
//		mode.control = 3;
//		Target_Rad_velo = 10;
	}
    mode.enc = 0;
 800b29a:	4b16      	ldr	r3, [pc, #88]	; (800b2f4 <turn_left+0xc4>)
 800b29c:	2200      	movs	r2, #0
 800b29e:	70da      	strb	r2, [r3, #3]
    Target_Rad_velo = 0;
 800b2a0:	4b15      	ldr	r3, [pc, #84]	; (800b2f8 <turn_left+0xc8>)
 800b2a2:	f04f 0200 	mov.w	r2, #0
 800b2a6:	601a      	str	r2, [r3, #0]
//	mode.control = 4;
//	Target_Rad_velo = 0;
    Target_velocity = 0;
 800b2a8:	4b0d      	ldr	r3, [pc, #52]	; (800b2e0 <turn_left+0xb0>)
 800b2aa:	f04f 0200 	mov.w	r2, #0
 800b2ae:	601a      	str	r2, [r3, #0]
    //Target_rotate =0;
    EN3_L.integrate = 0;
 800b2b0:	4b0d      	ldr	r3, [pc, #52]	; (800b2e8 <turn_left+0xb8>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b2b6:	4b0d      	ldr	r3, [pc, #52]	; (800b2ec <turn_left+0xbc>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b2bc:	4b0c      	ldr	r3, [pc, #48]	; (800b2f0 <turn_left+0xc0>)
 800b2be:	2200      	movs	r2, #0
 800b2c0:	605a      	str	r2, [r3, #4]
    counter++;
 800b2c2:	79fb      	ldrb	r3, [r7, #7]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	71fb      	strb	r3, [r7, #7]
    while(counter < 1){
 800b2c8:	79fb      	ldrb	r3, [r7, #7]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d0b6      	beq.n	800b23c <turn_left+0xc>
   }
	error_reset = 0;
 800b2ce:	4b05      	ldr	r3, [pc, #20]	; (800b2e4 <turn_left+0xb4>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800b2d4:	f7fe fb1c 	bl	8009910 <Motor_Count_Clear>
//    printf("左に90°回転時左 : %d \r\n",check);
//    printf("左に90°回転時右 : %d \r\n",check2);
//    printf("\r\n");

}
 800b2d8:	bf00      	nop
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	200002b8 	.word	0x200002b8
 800b2e4:	2000027c 	.word	0x2000027c
 800b2e8:	20000050 	.word	0x20000050
 800b2ec:	2000005c 	.word	0x2000005c
 800b2f0:	20000068 	.word	0x20000068
 800b2f4:	20000074 	.word	0x20000074
 800b2f8:	200002bc 	.word	0x200002bc
 800b2fc:	40a00000 	.word	0x40a00000
 800b300:	20000004 	.word	0x20000004
 800b304:	00000000 	.word	0x00000000

0800b308 <slow_turn_R>:

void slow_turn_R(){
 800b308:	b598      	push	{r3, r4, r7, lr}
 800b30a:	af00      	add	r7, sp, #0

		mode.control = 6;
 800b30c:	4b50      	ldr	r3, [pc, #320]	; (800b450 <slow_turn_R+0x148>)
 800b30e:	2206      	movs	r2, #6
 800b310:	715a      	strb	r2, [r3, #5]

		while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b312:	e002      	b.n	800b31a <slow_turn_R+0x12>
			mode.accel = 6;
 800b314:	4b4e      	ldr	r3, [pc, #312]	; (800b450 <slow_turn_R+0x148>)
 800b316:	2206      	movs	r2, #6
 800b318:	705a      	strb	r2, [r3, #1]
		while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b31a:	4b4e      	ldr	r3, [pc, #312]	; (800b454 <slow_turn_R+0x14c>)
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	4b4e      	ldr	r3, [pc, #312]	; (800b458 <slow_turn_R+0x150>)
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	4413      	add	r3, r2
 800b324:	4618      	mov	r0, r3
 800b326:	f7fd f835 	bl	8008394 <__aeabi_i2d>
 800b32a:	a33f      	add	r3, pc, #252	; (adr r3, 800b428 <slow_turn_R+0x120>)
 800b32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b330:	f7fd fb0c 	bl	800894c <__aeabi_dcmplt>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1ec      	bne.n	800b314 <slow_turn_R+0xc>

		}
		mode.accel = 0;
 800b33a:	4b45      	ldr	r3, [pc, #276]	; (800b450 <slow_turn_R+0x148>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	705a      	strb	r2, [r3, #1]

		while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b340:	e021      	b.n	800b386 <slow_turn_R+0x7e>
			Target_velocity = CURVE_SPEED;
 800b342:	4b46      	ldr	r3, [pc, #280]	; (800b45c <slow_turn_R+0x154>)
 800b344:	4a46      	ldr	r2, [pc, #280]	; (800b460 <slow_turn_R+0x158>)
 800b346:	601a      	str	r2, [r3, #0]
			Target_L_velo = CURVE_SPEED  * (90+TREAD_WIDTH)/90;//130/90;//124.6/90;
 800b348:	4b46      	ldr	r3, [pc, #280]	; (800b464 <slow_turn_R+0x15c>)
 800b34a:	4a47      	ldr	r2, [pc, #284]	; (800b468 <slow_turn_R+0x160>)
 800b34c:	601a      	str	r2, [r3, #0]
			Target_R_velo = Target_L_velo * (90-TREAD_WIDTH) / (90+TREAD_WIDTH);//50/130;//55.4 / 124.6;
 800b34e:	4b45      	ldr	r3, [pc, #276]	; (800b464 <slow_turn_R+0x15c>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4618      	mov	r0, r3
 800b354:	f7fd f830 	bl	80083b8 <__aeabi_f2d>
 800b358:	a335      	add	r3, pc, #212	; (adr r3, 800b430 <slow_turn_R+0x128>)
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	f7fd f883 	bl	8008468 <__aeabi_dmul>
 800b362:	4603      	mov	r3, r0
 800b364:	460c      	mov	r4, r1
 800b366:	4618      	mov	r0, r3
 800b368:	4621      	mov	r1, r4
 800b36a:	a333      	add	r3, pc, #204	; (adr r3, 800b438 <slow_turn_R+0x130>)
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	f7fd f9a4 	bl	80086bc <__aeabi_ddiv>
 800b374:	4603      	mov	r3, r0
 800b376:	460c      	mov	r4, r1
 800b378:	4618      	mov	r0, r3
 800b37a:	4621      	mov	r1, r4
 800b37c:	f7fd fb4c 	bl	8008a18 <__aeabi_d2f>
 800b380:	4602      	mov	r2, r0
 800b382:	4b3a      	ldr	r3, [pc, #232]	; (800b46c <slow_turn_R+0x164>)
 800b384:	601a      	str	r2, [r3, #0]
		while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b386:	4b33      	ldr	r3, [pc, #204]	; (800b454 <slow_turn_R+0x14c>)
 800b388:	685a      	ldr	r2, [r3, #4]
 800b38a:	4b33      	ldr	r3, [pc, #204]	; (800b458 <slow_turn_R+0x150>)
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	4413      	add	r3, r2
 800b390:	4618      	mov	r0, r3
 800b392:	f7fc ffff 	bl	8008394 <__aeabi_i2d>
 800b396:	a324      	add	r3, pc, #144	; (adr r3, 800b428 <slow_turn_R+0x120>)
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	f7fd faea 	bl	8008974 <__aeabi_dcmpge>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00f      	beq.n	800b3c6 <slow_turn_R+0xbe>
 800b3a6:	4b2b      	ldr	r3, [pc, #172]	; (800b454 <slow_turn_R+0x14c>)
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	4b2b      	ldr	r3, [pc, #172]	; (800b458 <slow_turn_R+0x150>)
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fc ffef 	bl	8008394 <__aeabi_i2d>
 800b3b6:	a322      	add	r3, pc, #136	; (adr r3, 800b440 <slow_turn_R+0x138>)
 800b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3bc:	f7fd fac6 	bl	800894c <__aeabi_dcmplt>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1bd      	bne.n	800b342 <slow_turn_R+0x3a>

		}
		while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b3c6:	e002      	b.n	800b3ce <slow_turn_R+0xc6>
			mode.accel = 7;
 800b3c8:	4b21      	ldr	r3, [pc, #132]	; (800b450 <slow_turn_R+0x148>)
 800b3ca:	2207      	movs	r2, #7
 800b3cc:	705a      	strb	r2, [r3, #1]
		while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b3ce:	4b21      	ldr	r3, [pc, #132]	; (800b454 <slow_turn_R+0x14c>)
 800b3d0:	685a      	ldr	r2, [r3, #4]
 800b3d2:	4b21      	ldr	r3, [pc, #132]	; (800b458 <slow_turn_R+0x150>)
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7fc ffdb 	bl	8008394 <__aeabi_i2d>
 800b3de:	a31a      	add	r3, pc, #104	; (adr r3, 800b448 <slow_turn_R+0x140>)
 800b3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e4:	f7fd fab2 	bl	800894c <__aeabi_dcmplt>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1ec      	bne.n	800b3c8 <slow_turn_R+0xc0>

		}
		mode.accel = 0;
 800b3ee:	4b18      	ldr	r3, [pc, #96]	; (800b450 <slow_turn_R+0x148>)
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	705a      	strb	r2, [r3, #1]
//		if(Body_angle < -90){
//			IMU_init();
//			break;
//		}

	mode.control = 4;
 800b3f4:	4b16      	ldr	r3, [pc, #88]	; (800b450 <slow_turn_R+0x148>)
 800b3f6:	2204      	movs	r2, #4
 800b3f8:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b3fa:	4b16      	ldr	r3, [pc, #88]	; (800b454 <slow_turn_R+0x14c>)
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b400:	4b15      	ldr	r3, [pc, #84]	; (800b458 <slow_turn_R+0x150>)
 800b402:	2200      	movs	r2, #0
 800b404:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b406:	4b1a      	ldr	r3, [pc, #104]	; (800b470 <slow_turn_R+0x168>)
 800b408:	2200      	movs	r2, #0
 800b40a:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b40c:	4b15      	ldr	r3, [pc, #84]	; (800b464 <slow_turn_R+0x15c>)
 800b40e:	f04f 0200 	mov.w	r2, #0
 800b412:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b414:	4b15      	ldr	r3, [pc, #84]	; (800b46c <slow_turn_R+0x164>)
 800b416:	f04f 0200 	mov.w	r2, #0
 800b41a:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b41c:	4b0f      	ldr	r3, [pc, #60]	; (800b45c <slow_turn_R+0x154>)
 800b41e:	4a15      	ldr	r2, [pc, #84]	; (800b474 <slow_turn_R+0x16c>)
 800b420:	601a      	str	r2, [r3, #0]
}
 800b422:	bf00      	nop
 800b424:	bd98      	pop	{r3, r4, r7, pc}
 800b426:	bf00      	nop
 800b428:	234f4839 	.word	0x234f4839
 800b42c:	40b7f082 	.word	0x40b7f082
 800b430:	cccccccd 	.word	0xcccccccd
 800b434:	404acccc 	.word	0x404acccc
 800b438:	9999999a 	.word	0x9999999a
 800b43c:	405f9999 	.word	0x405f9999
 800b440:	5fa0080d 	.word	0x5fa0080d
 800b444:	40eff582 	.word	0x40eff582
 800b448:	5204f88a 	.word	0x5204f88a
 800b44c:	40f179c9 	.word	0x40f179c9
 800b450:	20000074 	.word	0x20000074
 800b454:	20000050 	.word	0x20000050
 800b458:	2000005c 	.word	0x2000005c
 800b45c:	200002b8 	.word	0x200002b8
 800b460:	43340000 	.word	0x43340000
 800b464:	200043a4 	.word	0x200043a4
 800b468:	437ccccd 	.word	0x437ccccd
 800b46c:	20004380 	.word	0x20004380
 800b470:	20000068 	.word	0x20000068
 800b474:	436b0000 	.word	0x436b0000

0800b478 <slow_turn_L>:

void slow_turn_L(){
 800b478:	b598      	push	{r3, r4, r7, lr}
 800b47a:	af00      	add	r7, sp, #0
	//左右輪制御
	mode.control = 6;
 800b47c:	4b50      	ldr	r3, [pc, #320]	; (800b5c0 <slow_turn_L+0x148>)
 800b47e:	2206      	movs	r2, #6
 800b480:	715a      	strb	r2, [r3, #5]

	//等加速度加速減速
	while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b482:	e002      	b.n	800b48a <slow_turn_L+0x12>
		mode.accel = 4;
 800b484:	4b4e      	ldr	r3, [pc, #312]	; (800b5c0 <slow_turn_L+0x148>)
 800b486:	2204      	movs	r2, #4
 800b488:	705a      	strb	r2, [r3, #1]
	while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b48a:	4b4e      	ldr	r3, [pc, #312]	; (800b5c4 <slow_turn_L+0x14c>)
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	4b4e      	ldr	r3, [pc, #312]	; (800b5c8 <slow_turn_L+0x150>)
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	4413      	add	r3, r2
 800b494:	4618      	mov	r0, r3
 800b496:	f7fc ff7d 	bl	8008394 <__aeabi_i2d>
 800b49a:	a33f      	add	r3, pc, #252	; (adr r3, 800b598 <slow_turn_L+0x120>)
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	f7fd fa54 	bl	800894c <__aeabi_dcmplt>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1ec      	bne.n	800b484 <slow_turn_L+0xc>

	}
	//加速やめる
	mode.accel = 0;
 800b4aa:	4b45      	ldr	r3, [pc, #276]	; (800b5c0 <slow_turn_L+0x148>)
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	705a      	strb	r2, [r3, #1]

	//等速カーブ
	while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b4b0:	e021      	b.n	800b4f6 <slow_turn_L+0x7e>
		Target_velocity = CURVE_SPEED;
 800b4b2:	4b46      	ldr	r3, [pc, #280]	; (800b5cc <slow_turn_L+0x154>)
 800b4b4:	4a46      	ldr	r2, [pc, #280]	; (800b5d0 <slow_turn_L+0x158>)
 800b4b6:	601a      	str	r2, [r3, #0]
		Target_R_velo = CURVE_SPEED   * (90+TREAD_WIDTH)/90;
 800b4b8:	4b46      	ldr	r3, [pc, #280]	; (800b5d4 <slow_turn_L+0x15c>)
 800b4ba:	4a47      	ldr	r2, [pc, #284]	; (800b5d8 <slow_turn_L+0x160>)
 800b4bc:	601a      	str	r2, [r3, #0]
		Target_L_velo = Target_R_velo * (90-TREAD_WIDTH) / (90+TREAD_WIDTH);
 800b4be:	4b45      	ldr	r3, [pc, #276]	; (800b5d4 <slow_turn_L+0x15c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7fc ff78 	bl	80083b8 <__aeabi_f2d>
 800b4c8:	a335      	add	r3, pc, #212	; (adr r3, 800b5a0 <slow_turn_L+0x128>)
 800b4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ce:	f7fc ffcb 	bl	8008468 <__aeabi_dmul>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	460c      	mov	r4, r1
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	4621      	mov	r1, r4
 800b4da:	a333      	add	r3, pc, #204	; (adr r3, 800b5a8 <slow_turn_L+0x130>)
 800b4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e0:	f7fd f8ec 	bl	80086bc <__aeabi_ddiv>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	4621      	mov	r1, r4
 800b4ec:	f7fd fa94 	bl	8008a18 <__aeabi_d2f>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	4b3a      	ldr	r3, [pc, #232]	; (800b5dc <slow_turn_L+0x164>)
 800b4f4:	601a      	str	r2, [r3, #0]
	while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b4f6:	4b33      	ldr	r3, [pc, #204]	; (800b5c4 <slow_turn_L+0x14c>)
 800b4f8:	685a      	ldr	r2, [r3, #4]
 800b4fa:	4b33      	ldr	r3, [pc, #204]	; (800b5c8 <slow_turn_L+0x150>)
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	4413      	add	r3, r2
 800b500:	4618      	mov	r0, r3
 800b502:	f7fc ff47 	bl	8008394 <__aeabi_i2d>
 800b506:	a324      	add	r3, pc, #144	; (adr r3, 800b598 <slow_turn_L+0x120>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	f7fd fa32 	bl	8008974 <__aeabi_dcmpge>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00f      	beq.n	800b536 <slow_turn_L+0xbe>
 800b516:	4b2b      	ldr	r3, [pc, #172]	; (800b5c4 <slow_turn_L+0x14c>)
 800b518:	685a      	ldr	r2, [r3, #4]
 800b51a:	4b2b      	ldr	r3, [pc, #172]	; (800b5c8 <slow_turn_L+0x150>)
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	4413      	add	r3, r2
 800b520:	4618      	mov	r0, r3
 800b522:	f7fc ff37 	bl	8008394 <__aeabi_i2d>
 800b526:	a322      	add	r3, pc, #136	; (adr r3, 800b5b0 <slow_turn_L+0x138>)
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f7fd fa0e 	bl	800894c <__aeabi_dcmplt>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1bd      	bne.n	800b4b2 <slow_turn_L+0x3a>
		//タイヤ幅が広くなってから比率を変えていなかったはず
	}
	//等加速度加速減速
	while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b536:	e002      	b.n	800b53e <slow_turn_L+0xc6>
		mode.accel = 5;
 800b538:	4b21      	ldr	r3, [pc, #132]	; (800b5c0 <slow_turn_L+0x148>)
 800b53a:	2205      	movs	r2, #5
 800b53c:	705a      	strb	r2, [r3, #1]
	while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b53e:	4b21      	ldr	r3, [pc, #132]	; (800b5c4 <slow_turn_L+0x14c>)
 800b540:	685a      	ldr	r2, [r3, #4]
 800b542:	4b21      	ldr	r3, [pc, #132]	; (800b5c8 <slow_turn_L+0x150>)
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	4413      	add	r3, r2
 800b548:	4618      	mov	r0, r3
 800b54a:	f7fc ff23 	bl	8008394 <__aeabi_i2d>
 800b54e:	a31a      	add	r3, pc, #104	; (adr r3, 800b5b8 <slow_turn_L+0x140>)
 800b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b554:	f7fd f9fa 	bl	800894c <__aeabi_dcmplt>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1ec      	bne.n	800b538 <slow_turn_L+0xc0>

	}
	//加減速やめる
	mode.accel = 0;
 800b55e:	4b18      	ldr	r3, [pc, #96]	; (800b5c0 <slow_turn_L+0x148>)
 800b560:	2200      	movs	r2, #0
 800b562:	705a      	strb	r2, [r3, #1]
//		if(Body_angle > 90){
//			IMU_init();
//			break;
//		}

	mode.control = 4;
 800b564:	4b16      	ldr	r3, [pc, #88]	; (800b5c0 <slow_turn_L+0x148>)
 800b566:	2204      	movs	r2, #4
 800b568:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b56a:	4b16      	ldr	r3, [pc, #88]	; (800b5c4 <slow_turn_L+0x14c>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b570:	4b15      	ldr	r3, [pc, #84]	; (800b5c8 <slow_turn_L+0x150>)
 800b572:	2200      	movs	r2, #0
 800b574:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b576:	4b1a      	ldr	r3, [pc, #104]	; (800b5e0 <slow_turn_L+0x168>)
 800b578:	2200      	movs	r2, #0
 800b57a:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b57c:	4b17      	ldr	r3, [pc, #92]	; (800b5dc <slow_turn_L+0x164>)
 800b57e:	f04f 0200 	mov.w	r2, #0
 800b582:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b584:	4b13      	ldr	r3, [pc, #76]	; (800b5d4 <slow_turn_L+0x15c>)
 800b586:	f04f 0200 	mov.w	r2, #0
 800b58a:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b58c:	4b0f      	ldr	r3, [pc, #60]	; (800b5cc <slow_turn_L+0x154>)
 800b58e:	4a15      	ldr	r2, [pc, #84]	; (800b5e4 <slow_turn_L+0x16c>)
 800b590:	601a      	str	r2, [r3, #0]
}
 800b592:	bf00      	nop
 800b594:	bd98      	pop	{r3, r4, r7, pc}
 800b596:	bf00      	nop
 800b598:	234f4839 	.word	0x234f4839
 800b59c:	40b7f082 	.word	0x40b7f082
 800b5a0:	cccccccd 	.word	0xcccccccd
 800b5a4:	404acccc 	.word	0x404acccc
 800b5a8:	9999999a 	.word	0x9999999a
 800b5ac:	405f9999 	.word	0x405f9999
 800b5b0:	5fa0080d 	.word	0x5fa0080d
 800b5b4:	40eff582 	.word	0x40eff582
 800b5b8:	5204f88a 	.word	0x5204f88a
 800b5bc:	40f179c9 	.word	0x40f179c9
 800b5c0:	20000074 	.word	0x20000074
 800b5c4:	20000050 	.word	0x20000050
 800b5c8:	2000005c 	.word	0x2000005c
 800b5cc:	200002b8 	.word	0x200002b8
 800b5d0:	43340000 	.word	0x43340000
 800b5d4:	20004380 	.word	0x20004380
 800b5d8:	437ccccd 	.word	0x437ccccd
 800b5dc:	200043a4 	.word	0x200043a4
 800b5e0:	20000068 	.word	0x20000068
 800b5e4:	436b0000 	.word	0x436b0000

0800b5e8 <shinchi_turn_R>:

void shinchi_turn_R(){
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	af00      	add	r7, sp, #0

	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2 ){
 800b5ec:	e070      	b.n	800b6d0 <shinchi_turn_R+0xe8>
		if(EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2){
 800b5ee:	4b54      	ldr	r3, [pc, #336]	; (800b740 <shinchi_turn_R+0x158>)
 800b5f0:	685a      	ldr	r2, [r3, #4]
 800b5f2:	4b54      	ldr	r3, [pc, #336]	; (800b744 <shinchi_turn_R+0x15c>)
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7fc fecb 	bl	8008394 <__aeabi_i2d>
 800b5fe:	a34a      	add	r3, pc, #296	; (adr r3, 800b728 <shinchi_turn_R+0x140>)
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	f7fd f9a2 	bl	800894c <__aeabi_dcmplt>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d005      	beq.n	800b61a <shinchi_turn_R+0x32>
			mode.control = 4;
 800b60e:	4b4e      	ldr	r3, [pc, #312]	; (800b748 <shinchi_turn_R+0x160>)
 800b610:	2204      	movs	r2, #4
 800b612:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b614:	4b4d      	ldr	r3, [pc, #308]	; (800b74c <shinchi_turn_R+0x164>)
 800b616:	4a4e      	ldr	r2, [pc, #312]	; (800b750 <shinchi_turn_R+0x168>)
 800b618:	601a      	str	r2, [r3, #0]
		}
		if(DECE_CURVE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE){
 800b61a:	4b49      	ldr	r3, [pc, #292]	; (800b740 <shinchi_turn_R+0x158>)
 800b61c:	685a      	ldr	r2, [r3, #4]
 800b61e:	4b49      	ldr	r3, [pc, #292]	; (800b744 <shinchi_turn_R+0x15c>)
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	4413      	add	r3, r2
 800b624:	4618      	mov	r0, r3
 800b626:	f7fc feb5 	bl	8008394 <__aeabi_i2d>
 800b62a:	a33f      	add	r3, pc, #252	; (adr r3, 800b728 <shinchi_turn_R+0x140>)
 800b62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b630:	f7fd f9a0 	bl	8008974 <__aeabi_dcmpge>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d022      	beq.n	800b680 <shinchi_turn_R+0x98>
 800b63a:	4b41      	ldr	r3, [pc, #260]	; (800b740 <shinchi_turn_R+0x158>)
 800b63c:	685a      	ldr	r2, [r3, #4]
 800b63e:	4b41      	ldr	r3, [pc, #260]	; (800b744 <shinchi_turn_R+0x15c>)
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	4413      	add	r3, r2
 800b644:	4618      	mov	r0, r3
 800b646:	f7fc fea5 	bl	8008394 <__aeabi_i2d>
 800b64a:	a339      	add	r3, pc, #228	; (adr r3, 800b730 <shinchi_turn_R+0x148>)
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	f7fd f97c 	bl	800894c <__aeabi_dcmplt>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d012      	beq.n	800b680 <shinchi_turn_R+0x98>
		mode.control = 6;
 800b65a:	4b3b      	ldr	r3, [pc, #236]	; (800b748 <shinchi_turn_R+0x160>)
 800b65c:	2206      	movs	r2, #6
 800b65e:	715a      	strb	r2, [r3, #5]
		//IMU_Control(Target_Rad_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
		Target_velocity = CURVE_SPEED;
 800b660:	4b3a      	ldr	r3, [pc, #232]	; (800b74c <shinchi_turn_R+0x164>)
 800b662:	4a3b      	ldr	r2, [pc, #236]	; (800b750 <shinchi_turn_R+0x168>)
 800b664:	601a      	str	r2, [r3, #0]
		Target_L_velo = CURVE_SPEED  * 2;
 800b666:	4b3b      	ldr	r3, [pc, #236]	; (800b754 <shinchi_turn_R+0x16c>)
 800b668:	4a3b      	ldr	r2, [pc, #236]	; (800b758 <shinchi_turn_R+0x170>)
 800b66a:	601a      	str	r2, [r3, #0]
		Target_R_velo = Target_L_velo * 0;
 800b66c:	4b39      	ldr	r3, [pc, #228]	; (800b754 <shinchi_turn_R+0x16c>)
 800b66e:	edd3 7a00 	vldr	s15, [r3]
 800b672:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800b75c <shinchi_turn_R+0x174>
 800b676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b67a:	4b39      	ldr	r3, [pc, #228]	; (800b760 <shinchi_turn_R+0x178>)
 800b67c:	edc3 7a00 	vstr	s15, [r3]
		}
		if(DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 4 + SHINCHI_ROTATE_PULSE){
 800b680:	4b2f      	ldr	r3, [pc, #188]	; (800b740 <shinchi_turn_R+0x158>)
 800b682:	685a      	ldr	r2, [r3, #4]
 800b684:	4b2f      	ldr	r3, [pc, #188]	; (800b744 <shinchi_turn_R+0x15c>)
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	4413      	add	r3, r2
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fc fe82 	bl	8008394 <__aeabi_i2d>
 800b690:	a327      	add	r3, pc, #156	; (adr r3, 800b730 <shinchi_turn_R+0x148>)
 800b692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b696:	f7fd f96d 	bl	8008974 <__aeabi_dcmpge>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d100      	bne.n	800b6a2 <shinchi_turn_R+0xba>
 800b6a0:	e016      	b.n	800b6d0 <shinchi_turn_R+0xe8>
 800b6a2:	4b27      	ldr	r3, [pc, #156]	; (800b740 <shinchi_turn_R+0x158>)
 800b6a4:	685a      	ldr	r2, [r3, #4]
 800b6a6:	4b27      	ldr	r3, [pc, #156]	; (800b744 <shinchi_turn_R+0x15c>)
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7fc fe71 	bl	8008394 <__aeabi_i2d>
 800b6b2:	a321      	add	r3, pc, #132	; (adr r3, 800b738 <shinchi_turn_R+0x150>)
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	f7fd f948 	bl	800894c <__aeabi_dcmplt>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d100      	bne.n	800b6c4 <shinchi_turn_R+0xdc>
 800b6c2:	e005      	b.n	800b6d0 <shinchi_turn_R+0xe8>
			mode.control = 4;
 800b6c4:	4b20      	ldr	r3, [pc, #128]	; (800b748 <shinchi_turn_R+0x160>)
 800b6c6:	2204      	movs	r2, #4
 800b6c8:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b6ca:	4b20      	ldr	r3, [pc, #128]	; (800b74c <shinchi_turn_R+0x164>)
 800b6cc:	4a20      	ldr	r2, [pc, #128]	; (800b750 <shinchi_turn_R+0x168>)
 800b6ce:	601a      	str	r2, [r3, #0]
	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2 ){
 800b6d0:	4b1b      	ldr	r3, [pc, #108]	; (800b740 <shinchi_turn_R+0x158>)
 800b6d2:	685a      	ldr	r2, [r3, #4]
 800b6d4:	4b1b      	ldr	r3, [pc, #108]	; (800b744 <shinchi_turn_R+0x15c>)
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	4413      	add	r3, r2
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fc fe5a 	bl	8008394 <__aeabi_i2d>
 800b6e0:	a315      	add	r3, pc, #84	; (adr r3, 800b738 <shinchi_turn_R+0x150>)
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	f7fd f931 	bl	800894c <__aeabi_dcmplt>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	f47f af7e 	bne.w	800b5ee <shinchi_turn_R+0x6>
//			IMU_init();
//			break;
//		}

	}
	mode.control = 4;
 800b6f2:	4b15      	ldr	r3, [pc, #84]	; (800b748 <shinchi_turn_R+0x160>)
 800b6f4:	2204      	movs	r2, #4
 800b6f6:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b6f8:	4b11      	ldr	r3, [pc, #68]	; (800b740 <shinchi_turn_R+0x158>)
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b6fe:	4b11      	ldr	r3, [pc, #68]	; (800b744 <shinchi_turn_R+0x15c>)
 800b700:	2200      	movs	r2, #0
 800b702:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b704:	4b17      	ldr	r3, [pc, #92]	; (800b764 <shinchi_turn_R+0x17c>)
 800b706:	2200      	movs	r2, #0
 800b708:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b70a:	4b12      	ldr	r3, [pc, #72]	; (800b754 <shinchi_turn_R+0x16c>)
 800b70c:	f04f 0200 	mov.w	r2, #0
 800b710:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b712:	4b13      	ldr	r3, [pc, #76]	; (800b760 <shinchi_turn_R+0x178>)
 800b714:	f04f 0200 	mov.w	r2, #0
 800b718:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b71a:	4b0c      	ldr	r3, [pc, #48]	; (800b74c <shinchi_turn_R+0x164>)
 800b71c:	4a12      	ldr	r2, [pc, #72]	; (800b768 <shinchi_turn_R+0x180>)
 800b71e:	601a      	str	r2, [r3, #0]

}
 800b720:	bf00      	nop
 800b722:	bd80      	pop	{r7, pc}
 800b724:	f3af 8000 	nop.w
 800b728:	28eda8e5 	.word	0x28eda8e5
 800b72c:	40da80cf 	.word	0x40da80cf
 800b730:	62c1649a 	.word	0x62c1649a
 800b734:	40eb6333 	.word	0x40eb6333
 800b738:	7b9c1c86 	.word	0x7b9c1c86
 800b73c:	40f451cd 	.word	0x40f451cd
 800b740:	20000050 	.word	0x20000050
 800b744:	2000005c 	.word	0x2000005c
 800b748:	20000074 	.word	0x20000074
 800b74c:	200002b8 	.word	0x200002b8
 800b750:	43340000 	.word	0x43340000
 800b754:	200043a4 	.word	0x200043a4
 800b758:	43b40000 	.word	0x43b40000
 800b75c:	00000000 	.word	0x00000000
 800b760:	20004380 	.word	0x20004380
 800b764:	20000068 	.word	0x20000068
 800b768:	436b0000 	.word	0x436b0000
 800b76c:	00000000 	.word	0x00000000

0800b770 <shinchi_turn_L>:
void shinchi_turn_L(){
 800b770:	b580      	push	{r7, lr}
 800b772:	af00      	add	r7, sp, #0

	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2){
 800b774:	e070      	b.n	800b858 <shinchi_turn_L+0xe8>
		if(EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2){
 800b776:	4b54      	ldr	r3, [pc, #336]	; (800b8c8 <shinchi_turn_L+0x158>)
 800b778:	685a      	ldr	r2, [r3, #4]
 800b77a:	4b54      	ldr	r3, [pc, #336]	; (800b8cc <shinchi_turn_L+0x15c>)
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	4413      	add	r3, r2
 800b780:	4618      	mov	r0, r3
 800b782:	f7fc fe07 	bl	8008394 <__aeabi_i2d>
 800b786:	a34a      	add	r3, pc, #296	; (adr r3, 800b8b0 <shinchi_turn_L+0x140>)
 800b788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78c:	f7fd f8de 	bl	800894c <__aeabi_dcmplt>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d005      	beq.n	800b7a2 <shinchi_turn_L+0x32>
			mode.control = 4;
 800b796:	4b4e      	ldr	r3, [pc, #312]	; (800b8d0 <shinchi_turn_L+0x160>)
 800b798:	2204      	movs	r2, #4
 800b79a:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b79c:	4b4d      	ldr	r3, [pc, #308]	; (800b8d4 <shinchi_turn_L+0x164>)
 800b79e:	4a4e      	ldr	r2, [pc, #312]	; (800b8d8 <shinchi_turn_L+0x168>)
 800b7a0:	601a      	str	r2, [r3, #0]
		}
		if(DECE_CURVE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE){
 800b7a2:	4b49      	ldr	r3, [pc, #292]	; (800b8c8 <shinchi_turn_L+0x158>)
 800b7a4:	685a      	ldr	r2, [r3, #4]
 800b7a6:	4b49      	ldr	r3, [pc, #292]	; (800b8cc <shinchi_turn_L+0x15c>)
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7fc fdf1 	bl	8008394 <__aeabi_i2d>
 800b7b2:	a33f      	add	r3, pc, #252	; (adr r3, 800b8b0 <shinchi_turn_L+0x140>)
 800b7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b8:	f7fd f8dc 	bl	8008974 <__aeabi_dcmpge>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d022      	beq.n	800b808 <shinchi_turn_L+0x98>
 800b7c2:	4b41      	ldr	r3, [pc, #260]	; (800b8c8 <shinchi_turn_L+0x158>)
 800b7c4:	685a      	ldr	r2, [r3, #4]
 800b7c6:	4b41      	ldr	r3, [pc, #260]	; (800b8cc <shinchi_turn_L+0x15c>)
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7fc fde1 	bl	8008394 <__aeabi_i2d>
 800b7d2:	a339      	add	r3, pc, #228	; (adr r3, 800b8b8 <shinchi_turn_L+0x148>)
 800b7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d8:	f7fd f8b8 	bl	800894c <__aeabi_dcmplt>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d012      	beq.n	800b808 <shinchi_turn_L+0x98>
		mode.control = 6;
 800b7e2:	4b3b      	ldr	r3, [pc, #236]	; (800b8d0 <shinchi_turn_L+0x160>)
 800b7e4:	2206      	movs	r2, #6
 800b7e6:	715a      	strb	r2, [r3, #5]
		Target_velocity = CURVE_SPEED;
 800b7e8:	4b3a      	ldr	r3, [pc, #232]	; (800b8d4 <shinchi_turn_L+0x164>)
 800b7ea:	4a3b      	ldr	r2, [pc, #236]	; (800b8d8 <shinchi_turn_L+0x168>)
 800b7ec:	601a      	str	r2, [r3, #0]
		Target_R_velo = CURVE_SPEED  * 2;
 800b7ee:	4b3b      	ldr	r3, [pc, #236]	; (800b8dc <shinchi_turn_L+0x16c>)
 800b7f0:	4a3b      	ldr	r2, [pc, #236]	; (800b8e0 <shinchi_turn_L+0x170>)
 800b7f2:	601a      	str	r2, [r3, #0]
		Target_L_velo = Target_R_velo * 0;
 800b7f4:	4b39      	ldr	r3, [pc, #228]	; (800b8dc <shinchi_turn_L+0x16c>)
 800b7f6:	edd3 7a00 	vldr	s15, [r3]
 800b7fa:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800b8e4 <shinchi_turn_L+0x174>
 800b7fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b802:	4b39      	ldr	r3, [pc, #228]	; (800b8e8 <shinchi_turn_L+0x178>)
 800b804:	edc3 7a00 	vstr	s15, [r3]
		}
		if(DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 4 + SHINCHI_ROTATE_PULSE){
 800b808:	4b2f      	ldr	r3, [pc, #188]	; (800b8c8 <shinchi_turn_L+0x158>)
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	4b2f      	ldr	r3, [pc, #188]	; (800b8cc <shinchi_turn_L+0x15c>)
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	4413      	add	r3, r2
 800b812:	4618      	mov	r0, r3
 800b814:	f7fc fdbe 	bl	8008394 <__aeabi_i2d>
 800b818:	a327      	add	r3, pc, #156	; (adr r3, 800b8b8 <shinchi_turn_L+0x148>)
 800b81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81e:	f7fd f8a9 	bl	8008974 <__aeabi_dcmpge>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d100      	bne.n	800b82a <shinchi_turn_L+0xba>
 800b828:	e016      	b.n	800b858 <shinchi_turn_L+0xe8>
 800b82a:	4b27      	ldr	r3, [pc, #156]	; (800b8c8 <shinchi_turn_L+0x158>)
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	4b27      	ldr	r3, [pc, #156]	; (800b8cc <shinchi_turn_L+0x15c>)
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	4413      	add	r3, r2
 800b834:	4618      	mov	r0, r3
 800b836:	f7fc fdad 	bl	8008394 <__aeabi_i2d>
 800b83a:	a321      	add	r3, pc, #132	; (adr r3, 800b8c0 <shinchi_turn_L+0x150>)
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f7fd f884 	bl	800894c <__aeabi_dcmplt>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d100      	bne.n	800b84c <shinchi_turn_L+0xdc>
 800b84a:	e005      	b.n	800b858 <shinchi_turn_L+0xe8>
			mode.control = 4;
 800b84c:	4b20      	ldr	r3, [pc, #128]	; (800b8d0 <shinchi_turn_L+0x160>)
 800b84e:	2204      	movs	r2, #4
 800b850:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b852:	4b20      	ldr	r3, [pc, #128]	; (800b8d4 <shinchi_turn_L+0x164>)
 800b854:	4a20      	ldr	r2, [pc, #128]	; (800b8d8 <shinchi_turn_L+0x168>)
 800b856:	601a      	str	r2, [r3, #0]
	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2){
 800b858:	4b1b      	ldr	r3, [pc, #108]	; (800b8c8 <shinchi_turn_L+0x158>)
 800b85a:	685a      	ldr	r2, [r3, #4]
 800b85c:	4b1b      	ldr	r3, [pc, #108]	; (800b8cc <shinchi_turn_L+0x15c>)
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	4413      	add	r3, r2
 800b862:	4618      	mov	r0, r3
 800b864:	f7fc fd96 	bl	8008394 <__aeabi_i2d>
 800b868:	a315      	add	r3, pc, #84	; (adr r3, 800b8c0 <shinchi_turn_L+0x150>)
 800b86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86e:	f7fd f86d 	bl	800894c <__aeabi_dcmplt>
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	f47f af7e 	bne.w	800b776 <shinchi_turn_L+0x6>
//		if(Body_angle > 90){
//			IMU_init();
//			break;
//		}
	}
	mode.control = 4;
 800b87a:	4b15      	ldr	r3, [pc, #84]	; (800b8d0 <shinchi_turn_L+0x160>)
 800b87c:	2204      	movs	r2, #4
 800b87e:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b880:	4b11      	ldr	r3, [pc, #68]	; (800b8c8 <shinchi_turn_L+0x158>)
 800b882:	2200      	movs	r2, #0
 800b884:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b886:	4b11      	ldr	r3, [pc, #68]	; (800b8cc <shinchi_turn_L+0x15c>)
 800b888:	2200      	movs	r2, #0
 800b88a:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b88c:	4b17      	ldr	r3, [pc, #92]	; (800b8ec <shinchi_turn_L+0x17c>)
 800b88e:	2200      	movs	r2, #0
 800b890:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b892:	4b15      	ldr	r3, [pc, #84]	; (800b8e8 <shinchi_turn_L+0x178>)
 800b894:	f04f 0200 	mov.w	r2, #0
 800b898:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b89a:	4b10      	ldr	r3, [pc, #64]	; (800b8dc <shinchi_turn_L+0x16c>)
 800b89c:	f04f 0200 	mov.w	r2, #0
 800b8a0:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b8a2:	4b0c      	ldr	r3, [pc, #48]	; (800b8d4 <shinchi_turn_L+0x164>)
 800b8a4:	4a12      	ldr	r2, [pc, #72]	; (800b8f0 <shinchi_turn_L+0x180>)
 800b8a6:	601a      	str	r2, [r3, #0]
}
 800b8a8:	bf00      	nop
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	f3af 8000 	nop.w
 800b8b0:	28eda8e5 	.word	0x28eda8e5
 800b8b4:	40da80cf 	.word	0x40da80cf
 800b8b8:	62c1649a 	.word	0x62c1649a
 800b8bc:	40eb6333 	.word	0x40eb6333
 800b8c0:	7b9c1c86 	.word	0x7b9c1c86
 800b8c4:	40f451cd 	.word	0x40f451cd
 800b8c8:	20000050 	.word	0x20000050
 800b8cc:	2000005c 	.word	0x2000005c
 800b8d0:	20000074 	.word	0x20000074
 800b8d4:	200002b8 	.word	0x200002b8
 800b8d8:	43340000 	.word	0x43340000
 800b8dc:	20004380 	.word	0x20004380
 800b8e0:	43b40000 	.word	0x43b40000
 800b8e4:	00000000 	.word	0x00000000
 800b8e8:	200043a4 	.word	0x200043a4
 800b8ec:	20000068 	.word	0x20000068
 800b8f0:	436b0000 	.word	0x436b0000

0800b8f4 <rotate180>:
void rotate180(){
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
  uint8_t counter=0;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	71fb      	strb	r3, [r7, #7]
  //static int check = 0, check2 = 0;

   while(counter < 1){
 800b8fe:	e054      	b.n	800b9aa <rotate180+0xb6>

		Target_velocity = 0;
 800b900:	4b30      	ldr	r3, [pc, #192]	; (800b9c4 <rotate180+0xd0>)
 800b902:	f04f 0200 	mov.w	r2, #0
 800b906:	601a      	str	r2, [r3, #0]
		error_reset = 0;
 800b908:	4b2f      	ldr	r3, [pc, #188]	; (800b9c8 <rotate180+0xd4>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	701a      	strb	r2, [r3, #0]
		Motor_Count_Clear();
 800b90e:	f7fd ffff 	bl	8009910 <Motor_Count_Clear>
    EN3_L.integrate = 0;
 800b912:	4b2e      	ldr	r3, [pc, #184]	; (800b9cc <rotate180+0xd8>)
 800b914:	2200      	movs	r2, #0
 800b916:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b918:	4b2d      	ldr	r3, [pc, #180]	; (800b9d0 <rotate180+0xdc>)
 800b91a:	2200      	movs	r2, #0
 800b91c:	605a      	str	r2, [r3, #4]
	  EN_Body.integrate = 0;
 800b91e:	4b2d      	ldr	r3, [pc, #180]	; (800b9d4 <rotate180+0xe0>)
 800b920:	2200      	movs	r2, #0
 800b922:	605a      	str	r2, [r3, #4]
	  mode.enc = 1;
 800b924:	4b2c      	ldr	r3, [pc, #176]	; (800b9d8 <rotate180+0xe4>)
 800b926:	2201      	movs	r2, #1
 800b928:	70da      	strb	r2, [r3, #3]
	///while(EN3_L.integrate >= -Target_pul_quarter && EN4_R.integrate <= Target_pul_quarter){
  while(EN3_L.integrate <= Target_pul_quarter*2 || EN4_R.integrate >= -Target_pul_quarter*2){
 800b92a:	e005      	b.n	800b938 <rotate180+0x44>
	  mode.control = 3;
 800b92c:	4b2a      	ldr	r3, [pc, #168]	; (800b9d8 <rotate180+0xe4>)
 800b92e:	2203      	movs	r2, #3
 800b930:	715a      	strb	r2, [r3, #5]
	  Target_Rad_velo = -6;//Rotate(Target_Rad_velo, -5, Target_pul_quarter*2, EN3_L.integrate);
 800b932:	4b2a      	ldr	r3, [pc, #168]	; (800b9dc <rotate180+0xe8>)
 800b934:	4a2a      	ldr	r2, [pc, #168]	; (800b9e0 <rotate180+0xec>)
 800b936:	601a      	str	r2, [r3, #0]
  while(EN3_L.integrate <= Target_pul_quarter*2 || EN4_R.integrate >= -Target_pul_quarter*2){
 800b938:	4b24      	ldr	r3, [pc, #144]	; (800b9cc <rotate180+0xd8>)
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	ee07 3a90 	vmov	s15, r3
 800b940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b944:	4b27      	ldr	r3, [pc, #156]	; (800b9e4 <rotate180+0xf0>)
 800b946:	edd3 7a00 	vldr	s15, [r3]
 800b94a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b94e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b956:	d9e9      	bls.n	800b92c <rotate180+0x38>
 800b958:	4b1d      	ldr	r3, [pc, #116]	; (800b9d0 <rotate180+0xdc>)
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	ee07 3a90 	vmov	s15, r3
 800b960:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b964:	4b1f      	ldr	r3, [pc, #124]	; (800b9e4 <rotate180+0xf0>)
 800b966:	edd3 7a00 	vldr	s15, [r3]
 800b96a:	eef1 7a67 	vneg.f32	s15, s15
 800b96e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b972:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b97a:	dad7      	bge.n	800b92c <rotate180+0x38>
	  //Rotate_Control(Target_rotate,T1, velocity.KP, velocity.KI, velocity.KD);

//    	check = EN3_L.integrate;
//    	check2 = EN4_R.integrate;
    	}
      mode.enc = 0;
 800b97c:	4b16      	ldr	r3, [pc, #88]	; (800b9d8 <rotate180+0xe4>)
 800b97e:	2200      	movs	r2, #0
 800b980:	70da      	strb	r2, [r3, #3]
      Target_velocity = 0;
 800b982:	4b10      	ldr	r3, [pc, #64]	; (800b9c4 <rotate180+0xd0>)
 800b984:	f04f 0200 	mov.w	r2, #0
 800b988:	601a      	str	r2, [r3, #0]
      Target_Rad_velo =0;
 800b98a:	4b14      	ldr	r3, [pc, #80]	; (800b9dc <rotate180+0xe8>)
 800b98c:	f04f 0200 	mov.w	r2, #0
 800b990:	601a      	str	r2, [r3, #0]
      EN3_L.integrate = 0;
 800b992:	4b0e      	ldr	r3, [pc, #56]	; (800b9cc <rotate180+0xd8>)
 800b994:	2200      	movs	r2, #0
 800b996:	605a      	str	r2, [r3, #4]
      EN4_R.integrate = 0;
 800b998:	4b0d      	ldr	r3, [pc, #52]	; (800b9d0 <rotate180+0xdc>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	605a      	str	r2, [r3, #4]
  	  EN_Body.integrate = 0;
 800b99e:	4b0d      	ldr	r3, [pc, #52]	; (800b9d4 <rotate180+0xe0>)
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	605a      	str	r2, [r3, #4]

      counter++;
 800b9a4:	79fb      	ldrb	r3, [r7, #7]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	71fb      	strb	r3, [r7, #7]
   while(counter < 1){
 800b9aa:	79fb      	ldrb	r3, [r7, #7]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d0a7      	beq.n	800b900 <rotate180+0xc>
     }
	error_reset = 0;
 800b9b0:	4b05      	ldr	r3, [pc, #20]	; (800b9c8 <rotate180+0xd4>)
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800b9b6:	f7fd ffab 	bl	8009910 <Motor_Count_Clear>
//    	    printf("180°回転時左 : %d \r\n",check);
//    	    printf("180°回転時右 : %d \r\n",check2);
//    	    printf("\r\n");

}
 800b9ba:	bf00      	nop
 800b9bc:	3708      	adds	r7, #8
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	200002b8 	.word	0x200002b8
 800b9c8:	2000027c 	.word	0x2000027c
 800b9cc:	20000050 	.word	0x20000050
 800b9d0:	2000005c 	.word	0x2000005c
 800b9d4:	20000068 	.word	0x20000068
 800b9d8:	20000074 	.word	0x20000074
 800b9dc:	200002bc 	.word	0x200002bc
 800b9e0:	c0c00000 	.word	0xc0c00000
 800b9e4:	20000004 	.word	0x20000004

0800b9e8 <back_calib>:
	EN_Body.integrate = 0;
	error_reset = 0;
	Motor_Count_Clear();

}
void back_calib(){
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
	error_reset = 0;
 800b9ee:	4b2a      	ldr	r3, [pc, #168]	; (800ba98 <back_calib+0xb0>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800b9f4:	f7fd ff8c 	bl	8009910 <Motor_Count_Clear>
    EN3_L.integrate = 0;
 800b9f8:	4b28      	ldr	r3, [pc, #160]	; (800ba9c <back_calib+0xb4>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b9fe:	4b28      	ldr	r3, [pc, #160]	; (800baa0 <back_calib+0xb8>)
 800ba00:	2200      	movs	r2, #0
 800ba02:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800ba04:	4b27      	ldr	r3, [pc, #156]	; (800baa4 <back_calib+0xbc>)
 800ba06:	2200      	movs	r2, #0
 800ba08:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800ba0a:	4b27      	ldr	r3, [pc, #156]	; (800baa8 <back_calib+0xc0>)
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	70da      	strb	r2, [r3, #3]
    //50mmバック

    while(EN3_L.integrate + EN4_R.integrate > -2 * (61.75-40) / MM_PER_PULSE){
 800ba10:	e005      	b.n	800ba1e <back_calib+0x36>
    	Target_velocity = -90;
 800ba12:	4b26      	ldr	r3, [pc, #152]	; (800baac <back_calib+0xc4>)
 800ba14:	4a26      	ldr	r2, [pc, #152]	; (800bab0 <back_calib+0xc8>)
 800ba16:	601a      	str	r2, [r3, #0]
    	mode.control = 4;
 800ba18:	4b23      	ldr	r3, [pc, #140]	; (800baa8 <back_calib+0xc0>)
 800ba1a:	2204      	movs	r2, #4
 800ba1c:	715a      	strb	r2, [r3, #5]
    while(EN3_L.integrate + EN4_R.integrate > -2 * (61.75-40) / MM_PER_PULSE){
 800ba1e:	4b1f      	ldr	r3, [pc, #124]	; (800ba9c <back_calib+0xb4>)
 800ba20:	685a      	ldr	r2, [r3, #4]
 800ba22:	4b1f      	ldr	r3, [pc, #124]	; (800baa0 <back_calib+0xb8>)
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	4413      	add	r3, r2
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7fc fcb3 	bl	8008394 <__aeabi_i2d>
 800ba2e:	a318      	add	r3, pc, #96	; (adr r3, 800ba90 <back_calib+0xa8>)
 800ba30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba34:	f7fc ffa8 	bl	8008988 <__aeabi_dcmpgt>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d1e9      	bne.n	800ba12 <back_calib+0x2a>
    }
    Target_velocity = 0;
 800ba3e:	4b1b      	ldr	r3, [pc, #108]	; (800baac <back_calib+0xc4>)
 800ba40:	f04f 0200 	mov.w	r2, #0
 800ba44:	601a      	str	r2, [r3, #0]
    mode.control = 5;
 800ba46:	4b18      	ldr	r3, [pc, #96]	; (800baa8 <back_calib+0xc0>)
 800ba48:	2205      	movs	r2, #5
 800ba4a:	715a      	strb	r2, [r3, #5]
    mode.enc = 0;
 800ba4c:	4b16      	ldr	r3, [pc, #88]	; (800baa8 <back_calib+0xc0>)
 800ba4e:	2200      	movs	r2, #0
 800ba50:	70da      	strb	r2, [r3, #3]
    EN3_L.integrate = 0;
 800ba52:	4b12      	ldr	r3, [pc, #72]	; (800ba9c <back_calib+0xb4>)
 800ba54:	2200      	movs	r2, #0
 800ba56:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ba58:	4b11      	ldr	r3, [pc, #68]	; (800baa0 <back_calib+0xb8>)
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ba5e:	4b11      	ldr	r3, [pc, #68]	; (800baa4 <back_calib+0xbc>)
 800ba60:	2200      	movs	r2, #0
 800ba62:	605a      	str	r2, [r3, #4]
	error_reset = 0;
 800ba64:	4b0c      	ldr	r3, [pc, #48]	; (800ba98 <back_calib+0xb0>)
 800ba66:	2200      	movs	r2, #0
 800ba68:	701a      	strb	r2, [r3, #0]
	Motor_Count_Clear();
 800ba6a:	f7fd ff51 	bl	8009910 <Motor_Count_Clear>
    for(int i=0;i < WAIT*4;i++);
 800ba6e:	2300      	movs	r3, #0
 800ba70:	607b      	str	r3, [r7, #4]
 800ba72:	e002      	b.n	800ba7a <back_calib+0x92>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	3301      	adds	r3, #1
 800ba78:	607b      	str	r3, [r7, #4]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4a0d      	ldr	r2, [pc, #52]	; (800bab4 <back_calib+0xcc>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	ddf8      	ble.n	800ba74 <back_calib+0x8c>

}
 800ba82:	bf00      	nop
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	f3af 8000 	nop.w
 800ba90:	107febef 	.word	0x107febef
 800ba94:	c0d58254 	.word	0xc0d58254
 800ba98:	2000027c 	.word	0x2000027c
 800ba9c:	20000050 	.word	0x20000050
 800baa0:	2000005c 	.word	0x2000005c
 800baa4:	20000068 	.word	0x20000068
 800baa8:	20000074 	.word	0x20000074
 800baac:	200002b8 	.word	0x200002b8
 800bab0:	c2b40000 	.word	0xc2b40000
 800bab4:	0001d4bf 	.word	0x0001d4bf

0800bab8 <R_turn_select>:
	//経過時間計測オフ



}
void R_turn_select(){
 800bab8:	b580      	push	{r7, lr}
 800baba:	af00      	add	r7, sp, #0
  switch(mode.turn){
 800babc:	4b1e      	ldr	r3, [pc, #120]	; (800bb38 <R_turn_select+0x80>)
 800babe:	7a5b      	ldrb	r3, [r3, #9]
 800bac0:	2b03      	cmp	r3, #3
 800bac2:	d82d      	bhi.n	800bb20 <R_turn_select+0x68>
 800bac4:	a201      	add	r2, pc, #4	; (adr r2, 800bacc <R_turn_select+0x14>)
 800bac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baca:	bf00      	nop
 800bacc:	0800badd 	.word	0x0800badd
 800bad0:	0800bafb 	.word	0x0800bafb
 800bad4:	0800bb01 	.word	0x0800bb01
 800bad8:	0800bb07 	.word	0x0800bb07
  case 0:
	  Decelerate();
 800badc:	f7ff f91c 	bl	800ad18 <Decelerate>
	  wait(0.3);
 800bae0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800bb28 <R_turn_select+0x70>
 800bae4:	f7fe ffe8 	bl	800aab8 <wait>
	  turn_right();
 800bae8:	f7ff fb38 	bl	800b15c <turn_right>
	  wait(0.3);
 800baec:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bb28 <R_turn_select+0x70>
 800baf0:	f7fe ffe2 	bl	800aab8 <wait>
      Accelerate();
 800baf4:	f7ff f860 	bl	800abb8 <Accelerate>
      break;
 800baf8:	e012      	b.n	800bb20 <R_turn_select+0x68>
  case 1:
	  slow_turn_R();
 800bafa:	f7ff fc05 	bl	800b308 <slow_turn_R>
	  break;
 800bafe:	e00f      	b.n	800bb20 <R_turn_select+0x68>
  case 2:
	  shinchi_turn_R();
 800bb00:	f7ff fd72 	bl	800b5e8 <shinchi_turn_R>
	  break;
 800bb04:	e00c      	b.n	800bb20 <R_turn_select+0x68>
  case 3:
      Decelerate();
 800bb06:	f7ff f907 	bl	800ad18 <Decelerate>
      IMU_turn(-90,-5);
 800bb0a:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bb30 <R_turn_select+0x78>
 800bb0e:	f06f 0059 	mvn.w	r0, #89	; 0x59
 800bb12:	f7ff fa79 	bl	800b008 <IMU_turn>
      IMU_init();
 800bb16:	f7fd fe4f 	bl	80097b8 <IMU_init>
      Accelerate();
 800bb1a:	f7ff f84d 	bl	800abb8 <Accelerate>
      break;
 800bb1e:	bf00      	nop
  }
}
 800bb20:	bf00      	nop
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	f3af 8000 	nop.w
 800bb28:	33333333 	.word	0x33333333
 800bb2c:	3fd33333 	.word	0x3fd33333
 800bb30:	00000000 	.word	0x00000000
 800bb34:	c0140000 	.word	0xc0140000
 800bb38:	20000074 	.word	0x20000074
 800bb3c:	00000000 	.word	0x00000000

0800bb40 <L_turn_select>:
void L_turn_select(){
 800bb40:	b580      	push	{r7, lr}
 800bb42:	af00      	add	r7, sp, #0
  switch(mode.turn){
 800bb44:	4b1e      	ldr	r3, [pc, #120]	; (800bbc0 <L_turn_select+0x80>)
 800bb46:	7a5b      	ldrb	r3, [r3, #9]
 800bb48:	2b03      	cmp	r3, #3
 800bb4a:	d82c      	bhi.n	800bba6 <L_turn_select+0x66>
 800bb4c:	a201      	add	r2, pc, #4	; (adr r2, 800bb54 <L_turn_select+0x14>)
 800bb4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb52:	bf00      	nop
 800bb54:	0800bb65 	.word	0x0800bb65
 800bb58:	0800bb83 	.word	0x0800bb83
 800bb5c:	0800bb89 	.word	0x0800bb89
 800bb60:	0800bb8f 	.word	0x0800bb8f
  case 0:
	  //加減速超信地旋回
	  Decelerate();
 800bb64:	f7ff f8d8 	bl	800ad18 <Decelerate>
	  wait(0.3);
 800bb68:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800bbb0 <L_turn_select+0x70>
 800bb6c:	f7fe ffa4 	bl	800aab8 <wait>
	  turn_left();
 800bb70:	f7ff fb5e 	bl	800b230 <turn_left>
	  wait(0.3);
 800bb74:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bbb0 <L_turn_select+0x70>
 800bb78:	f7fe ff9e 	bl	800aab8 <wait>
      Accelerate();
 800bb7c:	f7ff f81c 	bl	800abb8 <Accelerate>
      break;
 800bb80:	e011      	b.n	800bba6 <L_turn_select+0x66>
  case 1:
	  //緩旋回
	  slow_turn_L();
 800bb82:	f7ff fc79 	bl	800b478 <slow_turn_L>
	  break;
 800bb86:	e00e      	b.n	800bba6 <L_turn_select+0x66>
  case 2:
	  //片輪旋回
	  shinchi_turn_L();
 800bb88:	f7ff fdf2 	bl	800b770 <shinchi_turn_L>
	  break;
 800bb8c:	e00b      	b.n	800bba6 <L_turn_select+0x66>
  case 3:
	  //IMUで等角速度超信地旋回
      Decelerate();
 800bb8e:	f7ff f8c3 	bl	800ad18 <Decelerate>
      IMU_turn(90,5);
 800bb92:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bbb8 <L_turn_select+0x78>
 800bb96:	205a      	movs	r0, #90	; 0x5a
 800bb98:	f7ff fa36 	bl	800b008 <IMU_turn>
      IMU_init();
 800bb9c:	f7fd fe0c 	bl	80097b8 <IMU_init>
      Accelerate();
 800bba0:	f7ff f80a 	bl	800abb8 <Accelerate>
      break;
 800bba4:	bf00      	nop
  }
}
 800bba6:	bf00      	nop
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	f3af 8000 	nop.w
 800bbb0:	33333333 	.word	0x33333333
 800bbb4:	3fd33333 	.word	0x3fd33333
 800bbb8:	00000000 	.word	0x00000000
 800bbbc:	40140000 	.word	0x40140000
 800bbc0:	20000074 	.word	0x20000074

0800bbc4 <Execution_Select>:
/*---- DEFINING FUNCTION ----*/

void Execution_Select(){
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	af00      	add	r7, sp, #0


	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 800bbc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bbcc:	485b      	ldr	r0, [pc, #364]	; (800bd3c <Execution_Select+0x178>)
 800bbce:	f007 f865 	bl	8012c9c <HAL_GPIO_ReadPin>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	f040 80a3 	bne.w	800bd20 <Execution_Select+0x15c>
	    	printf("押した\r\n");
 800bbda:	4859      	ldr	r0, [pc, #356]	; (800bd40 <Execution_Select+0x17c>)
 800bbdc:	f00a ff9e 	bl	8016b1c <puts>
			Motor_PWM_Stop();
 800bbe0:	f7fe fa2e 	bl	800a040 <Motor_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 800bbe4:	4857      	ldr	r0, [pc, #348]	; (800bd44 <Execution_Select+0x180>)
 800bbe6:	f008 fa90 	bl	801410a <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim8);
 800bbea:	4857      	ldr	r0, [pc, #348]	; (800bd48 <Execution_Select+0x184>)
 800bbec:	f008 fa8d 	bl	801410a <HAL_TIM_Base_Stop_IT>
			Emitter_OFF();
 800bbf0:	f7fe f9b6 	bl	8009f60 <Emitter_OFF>
			ADC_Stop();
 800bbf4:	f7fe f9e2 	bl	8009fbc <ADC_Stop>
	    	HAL_Delay(400);
 800bbf8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800bbfc:	f005 f890 	bl	8010d20 <HAL_Delay>

	    	mode.select += 1;
 800bc00:	4b52      	ldr	r3, [pc, #328]	; (800bd4c <Execution_Select+0x188>)
 800bc02:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	3301      	adds	r3, #1
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	b25a      	sxtb	r2, r3
 800bc0e:	4b4f      	ldr	r3, [pc, #316]	; (800bd4c <Execution_Select+0x188>)
 800bc10:	711a      	strb	r2, [r3, #4]
	    	if(mode.select == 5)
 800bc12:	4b4e      	ldr	r3, [pc, #312]	; (800bd4c <Execution_Select+0x188>)
 800bc14:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bc18:	2b05      	cmp	r3, #5
 800bc1a:	f040 8081 	bne.w	800bd20 <Execution_Select+0x15c>
	    		mode.select = 3;
 800bc1e:	4b4b      	ldr	r3, [pc, #300]	; (800bd4c <Execution_Select+0x188>)
 800bc20:	2203      	movs	r2, #3
 800bc22:	711a      	strb	r2, [r3, #4]

	    }

	   //printf("%d\r\n",mode.select);

	while(mode.select%2 == 1){
 800bc24:	e07c      	b.n	800bd20 <Execution_Select+0x15c>

	  	    EN3_L.count = TIM3 -> CNT;
 800bc26:	4b4a      	ldr	r3, [pc, #296]	; (800bd50 <Execution_Select+0x18c>)
 800bc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	4b49      	ldr	r3, [pc, #292]	; (800bd54 <Execution_Select+0x190>)
 800bc2e:	601a      	str	r2, [r3, #0]
	  	   // EN3_L.count = -(EN3_L.count - (30000-1));
	  	    printf("%d\r\n",EN3_L.count);
 800bc30:	4b48      	ldr	r3, [pc, #288]	; (800bd54 <Execution_Select+0x190>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4619      	mov	r1, r3
 800bc36:	4848      	ldr	r0, [pc, #288]	; (800bd58 <Execution_Select+0x194>)
 800bc38:	f00a fefc 	bl	8016a34 <iprintf>
	  	    //EN3_L.integrate += EN3_L.count;


	  if(30000 -1 + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= EN3_L.count ){
 800bc3c:	4b45      	ldr	r3, [pc, #276]	; (800bd54 <Execution_Select+0x190>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f249 522e 	movw	r2, #38190	; 0x952e
 800bc44:	4293      	cmp	r3, r2
 800bc46:	dd1e      	ble.n	800bc86 <Execution_Select+0xc2>
	  	  mode.LED += 1;
 800bc48:	4b40      	ldr	r3, [pc, #256]	; (800bd4c <Execution_Select+0x188>)
 800bc4a:	f993 3000 	ldrsb.w	r3, [r3]
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	3301      	adds	r3, #1
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	b25a      	sxtb	r2, r3
 800bc56:	4b3d      	ldr	r3, [pc, #244]	; (800bd4c <Execution_Select+0x188>)
 800bc58:	701a      	strb	r2, [r3, #0]
	  	  if(mode.LED > 7)
 800bc5a:	4b3c      	ldr	r3, [pc, #240]	; (800bd4c <Execution_Select+0x188>)
 800bc5c:	f993 3000 	ldrsb.w	r3, [r3]
 800bc60:	2b07      	cmp	r3, #7
 800bc62:	dd02      	ble.n	800bc6a <Execution_Select+0xa6>
	  		  mode.LED = 0;
 800bc64:	4b39      	ldr	r3, [pc, #228]	; (800bd4c <Execution_Select+0x188>)
 800bc66:	2200      	movs	r2, #0
 800bc68:	701a      	strb	r2, [r3, #0]
	  	  LED_Change();
 800bc6a:	f7fe fc5f 	bl	800a52c <LED_Change>

	  	  Encoder_Reset();
 800bc6e:	f7fe fec1 	bl	800a9f4 <Encoder_Reset>
	  	  //mode.execution = mode.LED;
	  	  mode.execution = mode.LED;
 800bc72:	4b36      	ldr	r3, [pc, #216]	; (800bd4c <Execution_Select+0x188>)
 800bc74:	f993 2000 	ldrsb.w	r2, [r3]
 800bc78:	4b34      	ldr	r3, [pc, #208]	; (800bd4c <Execution_Select+0x188>)
 800bc7a:	709a      	strb	r2, [r3, #2]
	  	  HAL_Delay(500);
 800bc7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bc80:	f005 f84e 	bl	8010d20 <HAL_Delay>
 800bc84:	e04c      	b.n	800bd20 <Execution_Select+0x15c>

	  }
	  else if(30000 -1 - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= EN3_L.count){
 800bc86:	4b33      	ldr	r3, [pc, #204]	; (800bd54 <Execution_Select+0x190>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f245 522f 	movw	r2, #21807	; 0x552f
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	dc1e      	bgt.n	800bcd0 <Execution_Select+0x10c>
	  	  mode.LED -= 1;
 800bc92:	4b2e      	ldr	r3, [pc, #184]	; (800bd4c <Execution_Select+0x188>)
 800bc94:	f993 3000 	ldrsb.w	r3, [r3]
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	b25a      	sxtb	r2, r3
 800bca0:	4b2a      	ldr	r3, [pc, #168]	; (800bd4c <Execution_Select+0x188>)
 800bca2:	701a      	strb	r2, [r3, #0]
	  	  if(mode.LED < 0)
 800bca4:	4b29      	ldr	r3, [pc, #164]	; (800bd4c <Execution_Select+0x188>)
 800bca6:	f993 3000 	ldrsb.w	r3, [r3]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	da02      	bge.n	800bcb4 <Execution_Select+0xf0>
	  	  		  mode.LED = 7;
 800bcae:	4b27      	ldr	r3, [pc, #156]	; (800bd4c <Execution_Select+0x188>)
 800bcb0:	2207      	movs	r2, #7
 800bcb2:	701a      	strb	r2, [r3, #0]
	  	  LED_Change();
 800bcb4:	f7fe fc3a 	bl	800a52c <LED_Change>

	  	  Encoder_Reset();
 800bcb8:	f7fe fe9c 	bl	800a9f4 <Encoder_Reset>
	  	  //mode.execution = mode.LED;
	  	  mode.execution = mode.LED;
 800bcbc:	4b23      	ldr	r3, [pc, #140]	; (800bd4c <Execution_Select+0x188>)
 800bcbe:	f993 2000 	ldrsb.w	r2, [r3]
 800bcc2:	4b22      	ldr	r3, [pc, #136]	; (800bd4c <Execution_Select+0x188>)
 800bcc4:	709a      	strb	r2, [r3, #2]
	  	  HAL_Delay(500);
 800bcc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bcca:	f005 f829 	bl	8010d20 <HAL_Delay>
 800bcce:	e027      	b.n	800bd20 <Execution_Select+0x15c>
	  }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 800bcd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bcd4:	4819      	ldr	r0, [pc, #100]	; (800bd3c <Execution_Select+0x178>)
 800bcd6:	f006 ffe1 	bl	8012c9c <HAL_GPIO_ReadPin>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d11f      	bne.n	800bd20 <Execution_Select+0x15c>
		  printf("\r\n");
 800bce0:	481e      	ldr	r0, [pc, #120]	; (800bd5c <Execution_Select+0x198>)
 800bce2:	f00a ff1b 	bl	8016b1c <puts>
		      HAL_Delay(500);
 800bce6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bcea:	f005 f819 	bl	8010d20 <HAL_Delay>
	  		  Init(); // mycodeInit(); // mycode
 800bcee:	f7fe f9c1 	bl	800a074 <Init>
	  		  TIM3 -> CNT = 30000 - 1;
 800bcf2:	4b17      	ldr	r3, [pc, #92]	; (800bd50 <Execution_Select+0x18c>)
 800bcf4:	f247 522f 	movw	r2, #29999	; 0x752f
 800bcf8:	625a      	str	r2, [r3, #36]	; 0x24
	  		  TIM4 -> CNT = 30000 - 1;
 800bcfa:	4b19      	ldr	r3, [pc, #100]	; (800bd60 <Execution_Select+0x19c>)
 800bcfc:	f247 522f 	movw	r2, #29999	; 0x752f
 800bd00:	625a      	str	r2, [r3, #36]	; 0x24
	  		  HAL_TIM_Base_Start_IT(&htim8);
 800bd02:	4811      	ldr	r0, [pc, #68]	; (800bd48 <Execution_Select+0x184>)
 800bd04:	f008 f9dd 	bl	80140c2 <HAL_TIM_Base_Start_IT>
	  		  HAL_TIM_Base_Start_IT(&htim1);
 800bd08:	480e      	ldr	r0, [pc, #56]	; (800bd44 <Execution_Select+0x180>)
 800bd0a:	f008 f9da 	bl	80140c2 <HAL_TIM_Base_Start_IT>
	  		  mode.select += 1;
 800bd0e:	4b0f      	ldr	r3, [pc, #60]	; (800bd4c <Execution_Select+0x188>)
 800bd10:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	3301      	adds	r3, #1
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	b25a      	sxtb	r2, r3
 800bd1c:	4b0b      	ldr	r3, [pc, #44]	; (800bd4c <Execution_Select+0x188>)
 800bd1e:	711a      	strb	r2, [r3, #4]
	while(mode.select%2 == 1){
 800bd20:	4b0a      	ldr	r3, [pc, #40]	; (800bd4c <Execution_Select+0x188>)
 800bd22:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f003 0301 	and.w	r3, r3, #1
 800bd2c:	bfb8      	it	lt
 800bd2e:	425b      	neglt	r3, r3
 800bd30:	b25b      	sxtb	r3, r3
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	f43f af77 	beq.w	800bc26 <Execution_Select+0x62>
}

	}
  }
 800bd38:	bf00      	nop
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	40020400 	.word	0x40020400
 800bd40:	08018940 	.word	0x08018940
 800bd44:	20004ae0 	.word	0x20004ae0
 800bd48:	200043c8 	.word	0x200043c8
 800bd4c:	20000074 	.word	0x20000074
 800bd50:	40000400 	.word	0x40000400
 800bd54:	20000050 	.word	0x20000050
 800bd58:	0801894c 	.word	0x0801894c
 800bd5c:	080188a0 	.word	0x080188a0
 800bd60:	40000800 	.word	0x40000800

0800bd64 <Walk_Map_Update>:
void Gain_Change(){

}


void Walk_Map_Update(){
 800bd64:	b490      	push	{r4, r7}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
	//初期化大事すぎた。hosu
	int i = 0, j=0, flag=0, hosu=0;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	60fb      	str	r3, [r7, #12]
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60bb      	str	r3, [r7, #8]
 800bd72:	2300      	movs	r3, #0
 800bd74:	607b      	str	r3, [r7, #4]
 800bd76:	2300      	movs	r3, #0
 800bd78:	603b      	str	r3, [r7, #0]

	//区画数に応じて"�?大歩数 + ゴールのマス�?-1"に初期�?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	60fb      	str	r3, [r7, #12]
 800bd7e:	e015      	b.n	800bdac <Walk_Map_Update+0x48>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bd80:	2300      	movs	r3, #0
 800bd82:	60bb      	str	r3, [r7, #8]
 800bd84:	e00c      	b.n	800bda0 <Walk_Map_Update+0x3c>
			walk_map[i][j] = NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1;
 800bd86:	49aa      	ldr	r1, [pc, #680]	; (800c030 <Walk_Map_Update+0x2cc>)
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	00db      	lsls	r3, r3, #3
 800bd8e:	4413      	add	r3, r2
 800bd90:	18ca      	adds	r2, r1, r3
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	4413      	add	r3, r2
 800bd96:	2250      	movs	r2, #80	; 0x50
 800bd98:	701a      	strb	r2, [r3, #0]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	60bb      	str	r3, [r7, #8]
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	2b08      	cmp	r3, #8
 800bda4:	ddef      	ble.n	800bd86 <Walk_Map_Update+0x22>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	60fb      	str	r3, [r7, #12]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2b08      	cmp	r3, #8
 800bdb0:	dde6      	ble.n	800bd80 <Walk_Map_Update+0x1c>
		}
	}

	//ゴール区画�?0に初期�?
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800bdb2:	2307      	movs	r3, #7
 800bdb4:	60fb      	str	r3, [r7, #12]
 800bdb6:	e015      	b.n	800bde4 <Walk_Map_Update+0x80>
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800bdb8:	2307      	movs	r3, #7
 800bdba:	60bb      	str	r3, [r7, #8]
 800bdbc:	e00c      	b.n	800bdd8 <Walk_Map_Update+0x74>
			walk_map[i][j] = 0;
 800bdbe:	499c      	ldr	r1, [pc, #624]	; (800c030 <Walk_Map_Update+0x2cc>)
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	00db      	lsls	r3, r3, #3
 800bdc6:	4413      	add	r3, r2
 800bdc8:	18ca      	adds	r2, r1, r3
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	4413      	add	r3, r2
 800bdce:	2200      	movs	r2, #0
 800bdd0:	701a      	strb	r2, [r3, #0]
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	60bb      	str	r3, [r7, #8]
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	2b07      	cmp	r3, #7
 800bddc:	ddef      	ble.n	800bdbe <Walk_Map_Update+0x5a>
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	3301      	adds	r3, #1
 800bde2:	60fb      	str	r3, [r7, #12]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2b07      	cmp	r3, #7
 800bde8:	dde6      	ble.n	800bdb8 <Walk_Map_Update+0x54>
		}
	}

	//壁が無�?として、�?�区画に歩数を割り当てる�??
	do{
		flag = 0;
 800bdea:	2300      	movs	r3, #0
 800bdec:	607b      	str	r3, [r7, #4]
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800bdee:	2300      	movs	r3, #0
 800bdf0:	60fb      	str	r3, [r7, #12]
 800bdf2:	e10c      	b.n	800c00e <Walk_Map_Update+0x2aa>

			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	60bb      	str	r3, [r7, #8]
 800bdf8:	e102      	b.n	800c000 <Walk_Map_Update+0x29c>
				  //map�?"�?大歩数 + ゴールのマス�?-1"でなければ値を代入�?
				  //walk_map[i][j] != NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1 &&
				  if(walk_map[i][j] == hosu){
 800bdfa:	498d      	ldr	r1, [pc, #564]	; (800c030 <Walk_Map_Update+0x2cc>)
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	4613      	mov	r3, r2
 800be00:	00db      	lsls	r3, r3, #3
 800be02:	4413      	add	r3, r2
 800be04:	18ca      	adds	r2, r1, r3
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	4413      	add	r3, r2
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	461a      	mov	r2, r3
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	4293      	cmp	r3, r2
 800be12:	f040 80f2 	bne.w	800bffa <Walk_Map_Update+0x296>

					  if(wall[i][j].north != WALL && walk_map[i][j+1] > walk_map[i][j] && j < NUMBER_OF_SQUARES - 1){
 800be16:	4987      	ldr	r1, [pc, #540]	; (800c034 <Walk_Map_Update+0x2d0>)
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	4613      	mov	r3, r2
 800be1c:	00db      	lsls	r3, r3, #3
 800be1e:	4413      	add	r3, r2
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	4413      	add	r3, r2
 800be24:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800be28:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d02d      	beq.n	800be8e <Walk_Map_Update+0x12a>
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	1c59      	adds	r1, r3, #1
 800be36:	487e      	ldr	r0, [pc, #504]	; (800c030 <Walk_Map_Update+0x2cc>)
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	4613      	mov	r3, r2
 800be3c:	00db      	lsls	r3, r3, #3
 800be3e:	4413      	add	r3, r2
 800be40:	4403      	add	r3, r0
 800be42:	440b      	add	r3, r1
 800be44:	7819      	ldrb	r1, [r3, #0]
 800be46:	487a      	ldr	r0, [pc, #488]	; (800c030 <Walk_Map_Update+0x2cc>)
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	4613      	mov	r3, r2
 800be4c:	00db      	lsls	r3, r3, #3
 800be4e:	4413      	add	r3, r2
 800be50:	18c2      	adds	r2, r0, r3
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	4413      	add	r3, r2
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	4299      	cmp	r1, r3
 800be5a:	d918      	bls.n	800be8e <Walk_Map_Update+0x12a>
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	2b07      	cmp	r3, #7
 800be60:	dc15      	bgt.n	800be8e <Walk_Map_Update+0x12a>
						  walk_map[i][j+1] = walk_map[i][j] + 1;
 800be62:	4973      	ldr	r1, [pc, #460]	; (800c030 <Walk_Map_Update+0x2cc>)
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	4613      	mov	r3, r2
 800be68:	00db      	lsls	r3, r3, #3
 800be6a:	4413      	add	r3, r2
 800be6c:	18ca      	adds	r2, r1, r3
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	4413      	add	r3, r2
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	68ba      	ldr	r2, [r7, #8]
 800be76:	1c51      	adds	r1, r2, #1
 800be78:	3301      	adds	r3, #1
 800be7a:	b2dc      	uxtb	r4, r3
 800be7c:	486c      	ldr	r0, [pc, #432]	; (800c030 <Walk_Map_Update+0x2cc>)
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	4613      	mov	r3, r2
 800be82:	00db      	lsls	r3, r3, #3
 800be84:	4413      	add	r3, r2
 800be86:	4403      	add	r3, r0
 800be88:	440b      	add	r3, r1
 800be8a:	4622      	mov	r2, r4
 800be8c:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].east != WALL && walk_map[i+1][j] > walk_map[i][j] && i < NUMBER_OF_SQUARES - 1){
 800be8e:	4969      	ldr	r1, [pc, #420]	; (800c034 <Walk_Map_Update+0x2d0>)
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	4613      	mov	r3, r2
 800be94:	00db      	lsls	r3, r3, #3
 800be96:	4413      	add	r3, r2
 800be98:	68ba      	ldr	r2, [r7, #8]
 800be9a:	4413      	add	r3, r2
 800be9c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bea0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	d02d      	beq.n	800bf06 <Walk_Map_Update+0x1a2>
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	1c5a      	adds	r2, r3, #1
 800beae:	4960      	ldr	r1, [pc, #384]	; (800c030 <Walk_Map_Update+0x2cc>)
 800beb0:	4613      	mov	r3, r2
 800beb2:	00db      	lsls	r3, r3, #3
 800beb4:	4413      	add	r3, r2
 800beb6:	18ca      	adds	r2, r1, r3
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	4413      	add	r3, r2
 800bebc:	7819      	ldrb	r1, [r3, #0]
 800bebe:	485c      	ldr	r0, [pc, #368]	; (800c030 <Walk_Map_Update+0x2cc>)
 800bec0:	68fa      	ldr	r2, [r7, #12]
 800bec2:	4613      	mov	r3, r2
 800bec4:	00db      	lsls	r3, r3, #3
 800bec6:	4413      	add	r3, r2
 800bec8:	18c2      	adds	r2, r0, r3
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	4413      	add	r3, r2
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	4299      	cmp	r1, r3
 800bed2:	d918      	bls.n	800bf06 <Walk_Map_Update+0x1a2>
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2b07      	cmp	r3, #7
 800bed8:	dc15      	bgt.n	800bf06 <Walk_Map_Update+0x1a2>
						  walk_map[i+1][j] = walk_map[i][j] + 1;
 800beda:	4955      	ldr	r1, [pc, #340]	; (800c030 <Walk_Map_Update+0x2cc>)
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	4613      	mov	r3, r2
 800bee0:	00db      	lsls	r3, r3, #3
 800bee2:	4413      	add	r3, r2
 800bee4:	18ca      	adds	r2, r1, r3
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	4413      	add	r3, r2
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	3201      	adds	r2, #1
 800bef0:	3301      	adds	r3, #1
 800bef2:	b2d8      	uxtb	r0, r3
 800bef4:	494e      	ldr	r1, [pc, #312]	; (800c030 <Walk_Map_Update+0x2cc>)
 800bef6:	4613      	mov	r3, r2
 800bef8:	00db      	lsls	r3, r3, #3
 800befa:	4413      	add	r3, r2
 800befc:	18ca      	adds	r2, r1, r3
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	4413      	add	r3, r2
 800bf02:	4602      	mov	r2, r0
 800bf04:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].south != WALL && walk_map[i][j-1] > walk_map[i][j] && j > 0){
 800bf06:	494b      	ldr	r1, [pc, #300]	; (800c034 <Walk_Map_Update+0x2d0>)
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	00db      	lsls	r3, r3, #3
 800bf0e:	4413      	add	r3, r2
 800bf10:	68ba      	ldr	r2, [r7, #8]
 800bf12:	4413      	add	r3, r2
 800bf14:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bf18:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d02d      	beq.n	800bf7e <Walk_Map_Update+0x21a>
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	1e59      	subs	r1, r3, #1
 800bf26:	4842      	ldr	r0, [pc, #264]	; (800c030 <Walk_Map_Update+0x2cc>)
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	00db      	lsls	r3, r3, #3
 800bf2e:	4413      	add	r3, r2
 800bf30:	4403      	add	r3, r0
 800bf32:	440b      	add	r3, r1
 800bf34:	7819      	ldrb	r1, [r3, #0]
 800bf36:	483e      	ldr	r0, [pc, #248]	; (800c030 <Walk_Map_Update+0x2cc>)
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	00db      	lsls	r3, r3, #3
 800bf3e:	4413      	add	r3, r2
 800bf40:	18c2      	adds	r2, r0, r3
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	4413      	add	r3, r2
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	4299      	cmp	r1, r3
 800bf4a:	d918      	bls.n	800bf7e <Walk_Map_Update+0x21a>
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	dd15      	ble.n	800bf7e <Walk_Map_Update+0x21a>
						  walk_map[i][j-1] = walk_map[i][j] + 1;
 800bf52:	4937      	ldr	r1, [pc, #220]	; (800c030 <Walk_Map_Update+0x2cc>)
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	4613      	mov	r3, r2
 800bf58:	00db      	lsls	r3, r3, #3
 800bf5a:	4413      	add	r3, r2
 800bf5c:	18ca      	adds	r2, r1, r3
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	4413      	add	r3, r2
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	1e51      	subs	r1, r2, #1
 800bf68:	3301      	adds	r3, #1
 800bf6a:	b2dc      	uxtb	r4, r3
 800bf6c:	4830      	ldr	r0, [pc, #192]	; (800c030 <Walk_Map_Update+0x2cc>)
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	4613      	mov	r3, r2
 800bf72:	00db      	lsls	r3, r3, #3
 800bf74:	4413      	add	r3, r2
 800bf76:	4403      	add	r3, r0
 800bf78:	440b      	add	r3, r1
 800bf7a:	4622      	mov	r2, r4
 800bf7c:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].west != WALL && walk_map[i-1][j] > walk_map[i][j] && i > 0){
 800bf7e:	492d      	ldr	r1, [pc, #180]	; (800c034 <Walk_Map_Update+0x2d0>)
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	4613      	mov	r3, r2
 800bf84:	00db      	lsls	r3, r3, #3
 800bf86:	4413      	add	r3, r2
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bf90:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d02d      	beq.n	800bff6 <Walk_Map_Update+0x292>
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	1e5a      	subs	r2, r3, #1
 800bf9e:	4924      	ldr	r1, [pc, #144]	; (800c030 <Walk_Map_Update+0x2cc>)
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	00db      	lsls	r3, r3, #3
 800bfa4:	4413      	add	r3, r2
 800bfa6:	18ca      	adds	r2, r1, r3
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	4413      	add	r3, r2
 800bfac:	7819      	ldrb	r1, [r3, #0]
 800bfae:	4820      	ldr	r0, [pc, #128]	; (800c030 <Walk_Map_Update+0x2cc>)
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	00db      	lsls	r3, r3, #3
 800bfb6:	4413      	add	r3, r2
 800bfb8:	18c2      	adds	r2, r0, r3
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	4299      	cmp	r1, r3
 800bfc2:	d918      	bls.n	800bff6 <Walk_Map_Update+0x292>
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	dd15      	ble.n	800bff6 <Walk_Map_Update+0x292>
						  walk_map[i-1][j] = walk_map[i][j] + 1;
 800bfca:	4919      	ldr	r1, [pc, #100]	; (800c030 <Walk_Map_Update+0x2cc>)
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	4613      	mov	r3, r2
 800bfd0:	00db      	lsls	r3, r3, #3
 800bfd2:	4413      	add	r3, r2
 800bfd4:	18ca      	adds	r2, r1, r3
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	4413      	add	r3, r2
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	3a01      	subs	r2, #1
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	b2d8      	uxtb	r0, r3
 800bfe4:	4912      	ldr	r1, [pc, #72]	; (800c030 <Walk_Map_Update+0x2cc>)
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	00db      	lsls	r3, r3, #3
 800bfea:	4413      	add	r3, r2
 800bfec:	18ca      	adds	r2, r1, r3
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	4413      	add	r3, r2
 800bff2:	4602      	mov	r2, r0
 800bff4:	701a      	strb	r2, [r3, #0]
					  }

					  flag = 1;
 800bff6:	2301      	movs	r3, #1
 800bff8:	607b      	str	r3, [r7, #4]
			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	3301      	adds	r3, #1
 800bffe:	60bb      	str	r3, [r7, #8]
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	2b08      	cmp	r3, #8
 800c004:	f77f aef9 	ble.w	800bdfa <Walk_Map_Update+0x96>
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	3301      	adds	r3, #1
 800c00c:	60fb      	str	r3, [r7, #12]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2b08      	cmp	r3, #8
 800c012:	f77f aeef 	ble.w	800bdf4 <Walk_Map_Update+0x90>
			       }
			  }
		  }
		  //歩数と繰り返しの回数は等し�?
		  hosu++;
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	3301      	adds	r3, #1
 800c01a:	603b      	str	r3, [r7, #0]
	}while(flag);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f47f aee3 	bne.w	800bdea <Walk_Map_Update+0x86>

}
 800c024:	bf00      	nop
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bc90      	pop	{r4, r7}
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	20004a60 	.word	0x20004a60
 800c034:	20004f0c 	.word	0x20004f0c

0800c038 <Tire_Maintenance>:
//
//	}
}


void Tire_Maintenance(){
 800c038:	b580      	push	{r7, lr}
 800c03a:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 800c03c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c040:	f004 fe6e 	bl	8010d20 <HAL_Delay>
	Accelerate();
 800c044:	f7fe fdb8 	bl	800abb8 <Accelerate>
	straight();
 800c048:	f7fe ff1e 	bl	800ae88 <straight>
	straight();
 800c04c:	f7fe ff1c 	bl	800ae88 <straight>
	Decelerate();
 800c050:	f7fe fe62 	bl	800ad18 <Decelerate>
	Motor_PWM_Stop();
 800c054:	f7fd fff4 	bl	800a040 <Motor_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 800c058:	480a      	ldr	r0, [pc, #40]	; (800c084 <Tire_Maintenance+0x4c>)
 800c05a:	f008 f856 	bl	801410a <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800c05e:	480a      	ldr	r0, [pc, #40]	; (800c088 <Tire_Maintenance+0x50>)
 800c060:	f008 f853 	bl	801410a <HAL_TIM_Base_Stop_IT>
	while(1){
		printf("リセ�?トな�? : %d\r\n", All_Pulse_anytime);
 800c064:	4b09      	ldr	r3, [pc, #36]	; (800c08c <Tire_Maintenance+0x54>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4619      	mov	r1, r3
 800c06a:	4809      	ldr	r0, [pc, #36]	; (800c090 <Tire_Maintenance+0x58>)
 800c06c:	f00a fce2 	bl	8016a34 <iprintf>
		printf("リセ�?トあ�? : %d\r\n", All_Pulse_cut);
 800c070:	4b08      	ldr	r3, [pc, #32]	; (800c094 <Tire_Maintenance+0x5c>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4619      	mov	r1, r3
 800c076:	4808      	ldr	r0, [pc, #32]	; (800c098 <Tire_Maintenance+0x60>)
 800c078:	f00a fcdc 	bl	8016a34 <iprintf>
		printf("\r\n");
 800c07c:	4807      	ldr	r0, [pc, #28]	; (800c09c <Tire_Maintenance+0x64>)
 800c07e:	f00a fd4d 	bl	8016b1c <puts>
		printf("リセ�?トな�? : %d\r\n", All_Pulse_anytime);
 800c082:	e7ef      	b.n	800c064 <Tire_Maintenance+0x2c>
 800c084:	20004ae0 	.word	0x20004ae0
 800c088:	200043c8 	.word	0x200043c8
 800c08c:	200002fc 	.word	0x200002fc
 800c090:	08018954 	.word	0x08018954
 800c094:	200002f8 	.word	0x200002f8
 800c098:	08018970 	.word	0x08018970
 800c09c:	080188a0 	.word	0x080188a0

0800c0a0 <wall_set>:
	}

}
void wall_set(){
 800c0a0:	b490      	push	{r4, r7}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
	uint8_t wall_dir[4];
	  wall_dir[my_direction] = (sl_average + sr_average)/2 > FRONT_WALL  ?   WALL : NOWALL;
 800c0a6:	4b96      	ldr	r3, [pc, #600]	; (800c300 <wall_set+0x260>)
 800c0a8:	ed93 7a00 	vldr	s14, [r3]
 800c0ac:	4b95      	ldr	r3, [pc, #596]	; (800c304 <wall_set+0x264>)
 800c0ae:	edd3 7a00 	vldr	s15, [r3]
 800c0b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c0b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c0ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c0be:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800c0c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ca:	bfcc      	ite	gt
 800c0cc:	2301      	movgt	r3, #1
 800c0ce:	2300      	movle	r3, #0
 800c0d0:	b2da      	uxtb	r2, r3
 800c0d2:	4b8d      	ldr	r3, [pc, #564]	; (800c308 <wall_set+0x268>)
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	f107 0108 	add.w	r1, r7, #8
 800c0da:	440b      	add	r3, r1
 800c0dc:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(my_direction + 1)%4] = fr_average > RIGHT_WALL  ?  WALL :  NOWALL;
 800c0e0:	4b8a      	ldr	r3, [pc, #552]	; (800c30c <wall_set+0x26c>)
 800c0e2:	edd3 7a00 	vldr	s15, [r3]
 800c0e6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800c310 <wall_set+0x270>
 800c0ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f2:	bfcc      	ite	gt
 800c0f4:	2301      	movgt	r3, #1
 800c0f6:	2300      	movle	r3, #0
 800c0f8:	b2d9      	uxtb	r1, r3
 800c0fa:	4b83      	ldr	r3, [pc, #524]	; (800c308 <wall_set+0x268>)
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	3301      	adds	r3, #1
 800c100:	425a      	negs	r2, r3
 800c102:	f003 0303 	and.w	r3, r3, #3
 800c106:	f002 0203 	and.w	r2, r2, #3
 800c10a:	bf58      	it	pl
 800c10c:	4253      	negpl	r3, r2
 800c10e:	460a      	mov	r2, r1
 800c110:	f107 0108 	add.w	r1, r7, #8
 800c114:	440b      	add	r3, r1
 800c116:	f803 2c04 	strb.w	r2, [r3, #-4]
		  wall_dir[(my_direction + 2)%4] = NOWALL;
 800c11a:	4b7b      	ldr	r3, [pc, #492]	; (800c308 <wall_set+0x268>)
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	3302      	adds	r3, #2
 800c120:	425a      	negs	r2, r3
 800c122:	f003 0303 	and.w	r3, r3, #3
 800c126:	f002 0203 	and.w	r2, r2, #3
 800c12a:	bf58      	it	pl
 800c12c:	4253      	negpl	r3, r2
 800c12e:	f107 0208 	add.w	r2, r7, #8
 800c132:	4413      	add	r3, r2
 800c134:	2200      	movs	r2, #0
 800c136:	f803 2c04 	strb.w	r2, [r3, #-4]
		  wall_dir[(my_direction + 3)%4] = fl_average > LEFT_WALL ?  WALL :  NOWALL;
 800c13a:	4b76      	ldr	r3, [pc, #472]	; (800c314 <wall_set+0x274>)
 800c13c:	edd3 7a00 	vldr	s15, [r3]
 800c140:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800c318 <wall_set+0x278>
 800c144:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c14c:	bfcc      	ite	gt
 800c14e:	2301      	movgt	r3, #1
 800c150:	2300      	movle	r3, #0
 800c152:	b2d9      	uxtb	r1, r3
 800c154:	4b6c      	ldr	r3, [pc, #432]	; (800c308 <wall_set+0x268>)
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	3303      	adds	r3, #3
 800c15a:	425a      	negs	r2, r3
 800c15c:	f003 0303 	and.w	r3, r3, #3
 800c160:	f002 0203 	and.w	r2, r2, #3
 800c164:	bf58      	it	pl
 800c166:	4253      	negpl	r3, r2
 800c168:	460a      	mov	r2, r1
 800c16a:	f107 0108 	add.w	r1, r7, #8
 800c16e:	440b      	add	r3, r1
 800c170:	f803 2c04 	strb.w	r2, [r3, #-4]

	  wall[x][y].north = wall_dir[0];
 800c174:	7939      	ldrb	r1, [r7, #4]
 800c176:	4b69      	ldr	r3, [pc, #420]	; (800c31c <wall_set+0x27c>)
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	461a      	mov	r2, r3
 800c17c:	4b68      	ldr	r3, [pc, #416]	; (800c320 <wall_set+0x280>)
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	461c      	mov	r4, r3
 800c182:	460b      	mov	r3, r1
 800c184:	f003 0303 	and.w	r3, r3, #3
 800c188:	b2d8      	uxtb	r0, r3
 800c18a:	4966      	ldr	r1, [pc, #408]	; (800c324 <wall_set+0x284>)
 800c18c:	4613      	mov	r3, r2
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	4413      	add	r3, r2
 800c192:	191a      	adds	r2, r3, r4
 800c194:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c198:	f360 0301 	bfi	r3, r0, #0, #2
 800c19c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].east = wall_dir[1];
 800c1a0:	7979      	ldrb	r1, [r7, #5]
 800c1a2:	4b5e      	ldr	r3, [pc, #376]	; (800c31c <wall_set+0x27c>)
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	4b5d      	ldr	r3, [pc, #372]	; (800c320 <wall_set+0x280>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	461c      	mov	r4, r3
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	f003 0303 	and.w	r3, r3, #3
 800c1b4:	b2d8      	uxtb	r0, r3
 800c1b6:	495b      	ldr	r1, [pc, #364]	; (800c324 <wall_set+0x284>)
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	00db      	lsls	r3, r3, #3
 800c1bc:	4413      	add	r3, r2
 800c1be:	191a      	adds	r2, r3, r4
 800c1c0:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c1c4:	f360 0383 	bfi	r3, r0, #2, #2
 800c1c8:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].south = wall_dir[2];
 800c1cc:	79b9      	ldrb	r1, [r7, #6]
 800c1ce:	4b53      	ldr	r3, [pc, #332]	; (800c31c <wall_set+0x27c>)
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	4b52      	ldr	r3, [pc, #328]	; (800c320 <wall_set+0x280>)
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	461c      	mov	r4, r3
 800c1da:	460b      	mov	r3, r1
 800c1dc:	f003 0303 	and.w	r3, r3, #3
 800c1e0:	b2d8      	uxtb	r0, r3
 800c1e2:	4950      	ldr	r1, [pc, #320]	; (800c324 <wall_set+0x284>)
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	00db      	lsls	r3, r3, #3
 800c1e8:	4413      	add	r3, r2
 800c1ea:	191a      	adds	r2, r3, r4
 800c1ec:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c1f0:	f360 1305 	bfi	r3, r0, #4, #2
 800c1f4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].west = wall_dir[3];
 800c1f8:	79f9      	ldrb	r1, [r7, #7]
 800c1fa:	4b48      	ldr	r3, [pc, #288]	; (800c31c <wall_set+0x27c>)
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	461a      	mov	r2, r3
 800c200:	4b47      	ldr	r3, [pc, #284]	; (800c320 <wall_set+0x280>)
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	461c      	mov	r4, r3
 800c206:	460b      	mov	r3, r1
 800c208:	f003 0303 	and.w	r3, r3, #3
 800c20c:	b2d8      	uxtb	r0, r3
 800c20e:	4945      	ldr	r1, [pc, #276]	; (800c324 <wall_set+0x284>)
 800c210:	4613      	mov	r3, r2
 800c212:	00db      	lsls	r3, r3, #3
 800c214:	4413      	add	r3, r2
 800c216:	191a      	adds	r2, r3, r4
 800c218:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c21c:	f360 1387 	bfi	r3, r0, #6, #2
 800c220:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  if(y < (NUMBER_OF_SQUARES-1) )wall[x][y+1].south = wall_dir[0];
 800c224:	4b3e      	ldr	r3, [pc, #248]	; (800c320 <wall_set+0x280>)
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	2b07      	cmp	r3, #7
 800c22a:	d815      	bhi.n	800c258 <wall_set+0x1b8>
 800c22c:	7939      	ldrb	r1, [r7, #4]
 800c22e:	4b3b      	ldr	r3, [pc, #236]	; (800c31c <wall_set+0x27c>)
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	461c      	mov	r4, r3
 800c234:	4b3a      	ldr	r3, [pc, #232]	; (800c320 <wall_set+0x280>)
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	1c5a      	adds	r2, r3, #1
 800c23a:	460b      	mov	r3, r1
 800c23c:	f003 0303 	and.w	r3, r3, #3
 800c240:	b2d8      	uxtb	r0, r3
 800c242:	4938      	ldr	r1, [pc, #224]	; (800c324 <wall_set+0x284>)
 800c244:	4623      	mov	r3, r4
 800c246:	00db      	lsls	r3, r3, #3
 800c248:	4423      	add	r3, r4
 800c24a:	441a      	add	r2, r3
 800c24c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c250:	f360 1305 	bfi	r3, r0, #4, #2
 800c254:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(x < (NUMBER_OF_SQUARES-1) )wall[x+1][y].west = wall_dir[1];
 800c258:	4b30      	ldr	r3, [pc, #192]	; (800c31c <wall_set+0x27c>)
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	2b07      	cmp	r3, #7
 800c25e:	d815      	bhi.n	800c28c <wall_set+0x1ec>
 800c260:	7979      	ldrb	r1, [r7, #5]
 800c262:	4b2e      	ldr	r3, [pc, #184]	; (800c31c <wall_set+0x27c>)
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	1c5a      	adds	r2, r3, #1
 800c268:	4b2d      	ldr	r3, [pc, #180]	; (800c320 <wall_set+0x280>)
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	461c      	mov	r4, r3
 800c26e:	460b      	mov	r3, r1
 800c270:	f003 0303 	and.w	r3, r3, #3
 800c274:	b2d8      	uxtb	r0, r3
 800c276:	492b      	ldr	r1, [pc, #172]	; (800c324 <wall_set+0x284>)
 800c278:	4613      	mov	r3, r2
 800c27a:	00db      	lsls	r3, r3, #3
 800c27c:	4413      	add	r3, r2
 800c27e:	191a      	adds	r2, r3, r4
 800c280:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c284:	f360 1387 	bfi	r3, r0, #6, #2
 800c288:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(y > 0 ) wall[x][y-1].north = wall_dir[2];
 800c28c:	4b24      	ldr	r3, [pc, #144]	; (800c320 <wall_set+0x280>)
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d015      	beq.n	800c2c0 <wall_set+0x220>
 800c294:	79b9      	ldrb	r1, [r7, #6]
 800c296:	4b21      	ldr	r3, [pc, #132]	; (800c31c <wall_set+0x27c>)
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	461c      	mov	r4, r3
 800c29c:	4b20      	ldr	r3, [pc, #128]	; (800c320 <wall_set+0x280>)
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	1e5a      	subs	r2, r3, #1
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	f003 0303 	and.w	r3, r3, #3
 800c2a8:	b2d8      	uxtb	r0, r3
 800c2aa:	491e      	ldr	r1, [pc, #120]	; (800c324 <wall_set+0x284>)
 800c2ac:	4623      	mov	r3, r4
 800c2ae:	00db      	lsls	r3, r3, #3
 800c2b0:	4423      	add	r3, r4
 800c2b2:	441a      	add	r2, r3
 800c2b4:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c2b8:	f360 0301 	bfi	r3, r0, #0, #2
 800c2bc:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(x > 0 ) wall[x-1][y].east = wall_dir[3];
 800c2c0:	4b16      	ldr	r3, [pc, #88]	; (800c31c <wall_set+0x27c>)
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d015      	beq.n	800c2f4 <wall_set+0x254>
 800c2c8:	79f9      	ldrb	r1, [r7, #7]
 800c2ca:	4b14      	ldr	r3, [pc, #80]	; (800c31c <wall_set+0x27c>)
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	1e5a      	subs	r2, r3, #1
 800c2d0:	4b13      	ldr	r3, [pc, #76]	; (800c320 <wall_set+0x280>)
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	461c      	mov	r4, r3
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	f003 0303 	and.w	r3, r3, #3
 800c2dc:	b2d8      	uxtb	r0, r3
 800c2de:	4911      	ldr	r1, [pc, #68]	; (800c324 <wall_set+0x284>)
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	00db      	lsls	r3, r3, #3
 800c2e4:	4413      	add	r3, r2
 800c2e6:	191a      	adds	r2, r3, r4
 800c2e8:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c2ec:	f360 0383 	bfi	r3, r0, #2, #2
 800c2f0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

}
 800c2f4:	bf00      	nop
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bc90      	pop	{r4, r7}
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	20005054 	.word	0x20005054
 800c304:	200044a0 	.word	0x200044a0
 800c308:	2000449a 	.word	0x2000449a
 800c30c:	20004f08 	.word	0x20004f08
 800c310:	42c80000 	.word	0x42c80000
 800c314:	200043c4 	.word	0x200043c4
 800c318:	430c0000 	.word	0x430c0000
 800c31c:	2000030c 	.word	0x2000030c
 800c320:	2000030d 	.word	0x2000030d
 800c324:	20004f0c 	.word	0x20004f0c

0800c328 <goal_area_search>:
    	}
#endif
}


void goal_area_search(){
 800c328:	b580      	push	{r7, lr}
 800c32a:	b0be      	sub	sp, #248	; 0xf8
 800c32c:	af00      	add	r7, sp, #0

	char orbit;

	//壁更新
	wall_set();
 800c32e:	f7ff feb7 	bl	800c0a0 <wall_set>

	//マップ更新
	Walk_Map_Update();
 800c332:	f7ff fd17 	bl	800bd64 <Walk_Map_Update>


	switch(my_direction){
 800c336:	4bcc      	ldr	r3, [pc, #816]	; (800c668 <goal_area_search+0x340>)
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	2b03      	cmp	r3, #3
 800c33c:	f200 86f7 	bhi.w	800d12e <goal_area_search+0xe06>
 800c340:	a201      	add	r2, pc, #4	; (adr r2, 800c348 <goal_area_search+0x20>)
 800c342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c346:	bf00      	nop
 800c348:	0800c359 	.word	0x0800c359
 800c34c:	0800c70d 	.word	0x0800c70d
 800c350:	0800cab7 	.word	0x0800cab7
 800c354:	0800cdf3 	.word	0x0800cdf3
	case north:

		//現在の座標 == ゴールの下2マス
		//xが小さいほうなら、右回り
		//直進
		Accelerate();
 800c358:	f7fe fc2e 	bl	800abb8 <Accelerate>
		Decelerate();
 800c35c:	f7fe fcdc 	bl	800ad18 <Decelerate>
		y++;
 800c360:	4bc2      	ldr	r3, [pc, #776]	; (800c66c <goal_area_search+0x344>)
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	3301      	adds	r3, #1
 800c366:	b2da      	uxtb	r2, r3
 800c368:	4bc0      	ldr	r3, [pc, #768]	; (800c66c <goal_area_search+0x344>)
 800c36a:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800c36c:	f7ff fe98 	bl	800c0a0 <wall_set>
		//待つ
		for(int i=0;i < WAIT*0.5;i++);
 800c370:	2300      	movs	r3, #0
 800c372:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c376:	e004      	b.n	800c382 <goal_area_search+0x5a>
 800c378:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c37c:	3301      	adds	r3, #1
 800c37e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c382:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800c386:	f7fc f805 	bl	8008394 <__aeabi_i2d>
 800c38a:	a3b5      	add	r3, pc, #724	; (adr r3, 800c660 <goal_area_search+0x338>)
 800c38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c390:	f7fc fadc 	bl	800894c <__aeabi_dcmplt>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1ee      	bne.n	800c378 <goal_area_search+0x50>

		if(x == X_GOAL_LESSER){
 800c39a:	4bb5      	ldr	r3, [pc, #724]	; (800c670 <goal_area_search+0x348>)
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b07      	cmp	r3, #7
 800c3a0:	d103      	bne.n	800c3aa <goal_area_search+0x82>
			orbit = 'R';
 800c3a2:	2352      	movs	r3, #82	; 0x52
 800c3a4:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800c3a8:	e006      	b.n	800c3b8 <goal_area_search+0x90>
		}
		//xが大きい方なら、左回り
		else if(x == X_GOAL_LARGER){
 800c3aa:	4bb1      	ldr	r3, [pc, #708]	; (800c670 <goal_area_search+0x348>)
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	2b07      	cmp	r3, #7
 800c3b0:	d102      	bne.n	800c3b8 <goal_area_search+0x90>
			orbit = 'L';
 800c3b2:	234c      	movs	r3, #76	; 0x4c
 800c3b4:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}

		if(orbit == 'R'){
 800c3b8:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c3bc:	2b52      	cmp	r3, #82	; 0x52
 800c3be:	f040 80c9 	bne.w	800c554 <goal_area_search+0x22c>
			//右回り
			turn_right();
 800c3c2:	f7fe fecb 	bl	800b15c <turn_right>
			my_direction = east;
 800c3c6:	4ba8      	ldr	r3, [pc, #672]	; (800c668 <goal_area_search+0x340>)
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c3d2:	e004      	b.n	800c3de <goal_area_search+0xb6>
 800c3d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c3d8:	3301      	adds	r3, #1
 800c3da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c3de:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800c3e2:	f7fb ffd7 	bl	8008394 <__aeabi_i2d>
 800c3e6:	a39e      	add	r3, pc, #632	; (adr r3, 800c660 <goal_area_search+0x338>)
 800c3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ec:	f7fc faae 	bl	800894c <__aeabi_dcmplt>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1ee      	bne.n	800c3d4 <goal_area_search+0xac>
			//直進
			Accelerate();
 800c3f6:	f7fe fbdf 	bl	800abb8 <Accelerate>
			Decelerate();
 800c3fa:	f7fe fc8d 	bl	800ad18 <Decelerate>
			x++;
 800c3fe:	4b9c      	ldr	r3, [pc, #624]	; (800c670 <goal_area_search+0x348>)
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	3301      	adds	r3, #1
 800c404:	b2da      	uxtb	r2, r3
 800c406:	4b9a      	ldr	r3, [pc, #616]	; (800c670 <goal_area_search+0x348>)
 800c408:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c40a:	f7ff fe49 	bl	800c0a0 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c40e:	2300      	movs	r3, #0
 800c410:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c414:	e004      	b.n	800c420 <goal_area_search+0xf8>
 800c416:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c41a:	3301      	adds	r3, #1
 800c41c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c420:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800c424:	f7fb ffb6 	bl	8008394 <__aeabi_i2d>
 800c428:	a38d      	add	r3, pc, #564	; (adr r3, 800c660 <goal_area_search+0x338>)
 800c42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42e:	f7fc fa8d 	bl	800894c <__aeabi_dcmplt>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1ee      	bne.n	800c416 <goal_area_search+0xee>


			//右回り
			turn_right();
 800c438:	f7fe fe90 	bl	800b15c <turn_right>
			my_direction = south;
 800c43c:	4b8a      	ldr	r3, [pc, #552]	; (800c668 <goal_area_search+0x340>)
 800c43e:	2202      	movs	r2, #2
 800c440:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c442:	2300      	movs	r3, #0
 800c444:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c448:	e004      	b.n	800c454 <goal_area_search+0x12c>
 800c44a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c44e:	3301      	adds	r3, #1
 800c450:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c454:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800c458:	f7fb ff9c 	bl	8008394 <__aeabi_i2d>
 800c45c:	a380      	add	r3, pc, #512	; (adr r3, 800c660 <goal_area_search+0x338>)
 800c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c462:	f7fc fa73 	bl	800894c <__aeabi_dcmplt>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d1ee      	bne.n	800c44a <goal_area_search+0x122>
			//直進
			Accelerate();
 800c46c:	f7fe fba4 	bl	800abb8 <Accelerate>
			Decelerate();
 800c470:	f7fe fc52 	bl	800ad18 <Decelerate>
			y--;
 800c474:	4b7d      	ldr	r3, [pc, #500]	; (800c66c <goal_area_search+0x344>)
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	3b01      	subs	r3, #1
 800c47a:	b2da      	uxtb	r2, r3
 800c47c:	4b7b      	ldr	r3, [pc, #492]	; (800c66c <goal_area_search+0x344>)
 800c47e:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c480:	f7ff fe0e 	bl	800c0a0 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c484:	2300      	movs	r3, #0
 800c486:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c48a:	e004      	b.n	800c496 <goal_area_search+0x16e>
 800c48c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c490:	3301      	adds	r3, #1
 800c492:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c496:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800c49a:	f7fb ff7b 	bl	8008394 <__aeabi_i2d>
 800c49e:	a370      	add	r3, pc, #448	; (adr r3, 800c660 <goal_area_search+0x338>)
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	f7fc fa52 	bl	800894c <__aeabi_dcmplt>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d1ee      	bne.n	800c48c <goal_area_search+0x164>

			//右回転
			turn_right();
 800c4ae:	f7fe fe55 	bl	800b15c <turn_right>
			my_direction = west;
 800c4b2:	4b6d      	ldr	r3, [pc, #436]	; (800c668 <goal_area_search+0x340>)
 800c4b4:	2203      	movs	r2, #3
 800c4b6:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c4be:	e004      	b.n	800c4ca <goal_area_search+0x1a2>
 800c4c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c4ca:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800c4ce:	f7fb ff61 	bl	8008394 <__aeabi_i2d>
 800c4d2:	a363      	add	r3, pc, #396	; (adr r3, 800c660 <goal_area_search+0x338>)
 800c4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d8:	f7fc fa38 	bl	800894c <__aeabi_dcmplt>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d1ee      	bne.n	800c4c0 <goal_area_search+0x198>
			//直進
			Accelerate();
 800c4e2:	f7fe fb69 	bl	800abb8 <Accelerate>
			Decelerate();
 800c4e6:	f7fe fc17 	bl	800ad18 <Decelerate>
			y--;
 800c4ea:	4b60      	ldr	r3, [pc, #384]	; (800c66c <goal_area_search+0x344>)
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	b2da      	uxtb	r2, r3
 800c4f2:	4b5e      	ldr	r3, [pc, #376]	; (800c66c <goal_area_search+0x344>)
 800c4f4:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c4fc:	e004      	b.n	800c508 <goal_area_search+0x1e0>
 800c4fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c502:	3301      	adds	r3, #1
 800c504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c508:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800c50c:	f7fb ff42 	bl	8008394 <__aeabi_i2d>
 800c510:	a353      	add	r3, pc, #332	; (adr r3, 800c660 <goal_area_search+0x338>)
 800c512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c516:	f7fc fa19 	bl	800894c <__aeabi_dcmplt>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1ee      	bne.n	800c4fe <goal_area_search+0x1d6>
			//左回転
			turn_left();
 800c520:	f7fe fe86 	bl	800b230 <turn_left>
			my_direction = south;
 800c524:	4b50      	ldr	r3, [pc, #320]	; (800c668 <goal_area_search+0x340>)
 800c526:	2202      	movs	r2, #2
 800c528:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c52a:	2300      	movs	r3, #0
 800c52c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c530:	e004      	b.n	800c53c <goal_area_search+0x214>
 800c532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c536:	3301      	adds	r3, #1
 800c538:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c53c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800c540:	f7fb ff28 	bl	8008394 <__aeabi_i2d>
 800c544:	a346      	add	r3, pc, #280	; (adr r3, 800c660 <goal_area_search+0x338>)
 800c546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54a:	f7fc f9ff 	bl	800894c <__aeabi_dcmplt>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1ee      	bne.n	800c532 <goal_area_search+0x20a>
		}

		if(orbit == 'L'){
 800c554:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c558:	2b4c      	cmp	r3, #76	; 0x4c
 800c55a:	f040 85ea 	bne.w	800d132 <goal_area_search+0xe0a>
			//左回り
			turn_left();
 800c55e:	f7fe fe67 	bl	800b230 <turn_left>
			my_direction = west;
 800c562:	4b41      	ldr	r3, [pc, #260]	; (800c668 <goal_area_search+0x340>)
 800c564:	2203      	movs	r2, #3
 800c566:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c568:	2300      	movs	r3, #0
 800c56a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c56e:	e004      	b.n	800c57a <goal_area_search+0x252>
 800c570:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c574:	3301      	adds	r3, #1
 800c576:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c57a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800c57e:	f7fb ff09 	bl	8008394 <__aeabi_i2d>
 800c582:	a337      	add	r3, pc, #220	; (adr r3, 800c660 <goal_area_search+0x338>)
 800c584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c588:	f7fc f9e0 	bl	800894c <__aeabi_dcmplt>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1ee      	bne.n	800c570 <goal_area_search+0x248>
			//直進
			Accelerate();
 800c592:	f7fe fb11 	bl	800abb8 <Accelerate>
			Decelerate();
 800c596:	f7fe fbbf 	bl	800ad18 <Decelerate>
			x--;
 800c59a:	4b35      	ldr	r3, [pc, #212]	; (800c670 <goal_area_search+0x348>)
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	3b01      	subs	r3, #1
 800c5a0:	b2da      	uxtb	r2, r3
 800c5a2:	4b33      	ldr	r3, [pc, #204]	; (800c670 <goal_area_search+0x348>)
 800c5a4:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c5a6:	f7ff fd7b 	bl	800c0a0 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c5b0:	e004      	b.n	800c5bc <goal_area_search+0x294>
 800c5b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c5bc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800c5c0:	f7fb fee8 	bl	8008394 <__aeabi_i2d>
 800c5c4:	a326      	add	r3, pc, #152	; (adr r3, 800c660 <goal_area_search+0x338>)
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	f7fc f9bf 	bl	800894c <__aeabi_dcmplt>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1ee      	bne.n	800c5b2 <goal_area_search+0x28a>

			turn_left();
 800c5d4:	f7fe fe2c 	bl	800b230 <turn_left>
			my_direction = south;
 800c5d8:	4b23      	ldr	r3, [pc, #140]	; (800c668 <goal_area_search+0x340>)
 800c5da:	2202      	movs	r2, #2
 800c5dc:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c5de:	2300      	movs	r3, #0
 800c5e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c5e4:	e004      	b.n	800c5f0 <goal_area_search+0x2c8>
 800c5e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c5f0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800c5f4:	f7fb fece 	bl	8008394 <__aeabi_i2d>
 800c5f8:	a319      	add	r3, pc, #100	; (adr r3, 800c660 <goal_area_search+0x338>)
 800c5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fe:	f7fc f9a5 	bl	800894c <__aeabi_dcmplt>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1ee      	bne.n	800c5e6 <goal_area_search+0x2be>
			//直進
			Accelerate();
 800c608:	f7fe fad6 	bl	800abb8 <Accelerate>
			Decelerate();
 800c60c:	f7fe fb84 	bl	800ad18 <Decelerate>
			y--;
 800c610:	4b16      	ldr	r3, [pc, #88]	; (800c66c <goal_area_search+0x344>)
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	3b01      	subs	r3, #1
 800c616:	b2da      	uxtb	r2, r3
 800c618:	4b14      	ldr	r3, [pc, #80]	; (800c66c <goal_area_search+0x344>)
 800c61a:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c61c:	f7ff fd40 	bl	800c0a0 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c620:	2300      	movs	r3, #0
 800c622:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c626:	e004      	b.n	800c632 <goal_area_search+0x30a>
 800c628:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c62c:	3301      	adds	r3, #1
 800c62e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c632:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800c636:	f7fb fead 	bl	8008394 <__aeabi_i2d>
 800c63a:	a309      	add	r3, pc, #36	; (adr r3, 800c660 <goal_area_search+0x338>)
 800c63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c640:	f7fc f984 	bl	800894c <__aeabi_dcmplt>
 800c644:	4603      	mov	r3, r0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1ee      	bne.n	800c628 <goal_area_search+0x300>

			//左回転
			turn_left();
 800c64a:	f7fe fdf1 	bl	800b230 <turn_left>
			my_direction = east;
 800c64e:	4b06      	ldr	r3, [pc, #24]	; (800c668 <goal_area_search+0x340>)
 800c650:	2201      	movs	r2, #1
 800c652:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c654:	2300      	movs	r3, #0
 800c656:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c65a:	e010      	b.n	800c67e <goal_area_search+0x356>
 800c65c:	f3af 8000 	nop.w
 800c660:	00000000 	.word	0x00000000
 800c664:	40cd4c00 	.word	0x40cd4c00
 800c668:	2000449a 	.word	0x2000449a
 800c66c:	2000030d 	.word	0x2000030d
 800c670:	2000030c 	.word	0x2000030c
 800c674:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c678:	3301      	adds	r3, #1
 800c67a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c67e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800c682:	f7fb fe87 	bl	8008394 <__aeabi_i2d>
 800c686:	a3d6      	add	r3, pc, #856	; (adr r3, 800c9e0 <goal_area_search+0x6b8>)
 800c688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68c:	f7fc f95e 	bl	800894c <__aeabi_dcmplt>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d1ee      	bne.n	800c674 <goal_area_search+0x34c>
			//直進
			Accelerate();
 800c696:	f7fe fa8f 	bl	800abb8 <Accelerate>
			Decelerate();
 800c69a:	f7fe fb3d 	bl	800ad18 <Decelerate>
			x++;
 800c69e:	4bd2      	ldr	r3, [pc, #840]	; (800c9e8 <goal_area_search+0x6c0>)
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	4bd0      	ldr	r3, [pc, #832]	; (800c9e8 <goal_area_search+0x6c0>)
 800c6a8:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c6b0:	e004      	b.n	800c6bc <goal_area_search+0x394>
 800c6b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c6bc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800c6c0:	f7fb fe68 	bl	8008394 <__aeabi_i2d>
 800c6c4:	a3c6      	add	r3, pc, #792	; (adr r3, 800c9e0 <goal_area_search+0x6b8>)
 800c6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ca:	f7fc f93f 	bl	800894c <__aeabi_dcmplt>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1ee      	bne.n	800c6b2 <goal_area_search+0x38a>
			//右回転
			turn_right();
 800c6d4:	f7fe fd42 	bl	800b15c <turn_right>
			my_direction = north;
 800c6d8:	4bc4      	ldr	r3, [pc, #784]	; (800c9ec <goal_area_search+0x6c4>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c6de:	2300      	movs	r3, #0
 800c6e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c6e4:	e004      	b.n	800c6f0 <goal_area_search+0x3c8>
 800c6e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c6f0:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800c6f4:	f7fb fe4e 	bl	8008394 <__aeabi_i2d>
 800c6f8:	a3b9      	add	r3, pc, #740	; (adr r3, 800c9e0 <goal_area_search+0x6b8>)
 800c6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fe:	f7fc f925 	bl	800894c <__aeabi_dcmplt>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d1ee      	bne.n	800c6e6 <goal_area_search+0x3be>
		}

		break;
 800c708:	f000 bd13 	b.w	800d132 <goal_area_search+0xe0a>
	case east:
		//直進
		Accelerate();
 800c70c:	f7fe fa54 	bl	800abb8 <Accelerate>
		Decelerate();
 800c710:	f7fe fb02 	bl	800ad18 <Decelerate>
		x++;
 800c714:	4bb4      	ldr	r3, [pc, #720]	; (800c9e8 <goal_area_search+0x6c0>)
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	3301      	adds	r3, #1
 800c71a:	b2da      	uxtb	r2, r3
 800c71c:	4bb2      	ldr	r3, [pc, #712]	; (800c9e8 <goal_area_search+0x6c0>)
 800c71e:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800c720:	f7ff fcbe 	bl	800c0a0 <wall_set>
		//待つ
		for(int i=0;i < WAIT*0.5;i++);
 800c724:	2300      	movs	r3, #0
 800c726:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c72a:	e004      	b.n	800c736 <goal_area_search+0x40e>
 800c72c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c730:	3301      	adds	r3, #1
 800c732:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c736:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800c73a:	f7fb fe2b 	bl	8008394 <__aeabi_i2d>
 800c73e:	a3a8      	add	r3, pc, #672	; (adr r3, 800c9e0 <goal_area_search+0x6b8>)
 800c740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c744:	f7fc f902 	bl	800894c <__aeabi_dcmplt>
 800c748:	4603      	mov	r3, r0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d1ee      	bne.n	800c72c <goal_area_search+0x404>

		//現在の座標 == ゴールの左2マス
		if(y == Y_GOAL_LESSER){
 800c74e:	4ba8      	ldr	r3, [pc, #672]	; (800c9f0 <goal_area_search+0x6c8>)
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	2b07      	cmp	r3, #7
 800c754:	d103      	bne.n	800c75e <goal_area_search+0x436>
			orbit = 'L';
 800c756:	234c      	movs	r3, #76	; 0x4c
 800c758:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800c75c:	e006      	b.n	800c76c <goal_area_search+0x444>
		}
		//yが大きい方なら、左回り
		else if(y == Y_GOAL_LARGER){
 800c75e:	4ba4      	ldr	r3, [pc, #656]	; (800c9f0 <goal_area_search+0x6c8>)
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	2b07      	cmp	r3, #7
 800c764:	d102      	bne.n	800c76c <goal_area_search+0x444>
			orbit = 'R';
 800c766:	2352      	movs	r3, #82	; 0x52
 800c768:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800c76c:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c770:	2b52      	cmp	r3, #82	; 0x52
 800c772:	f040 80c9 	bne.w	800c908 <goal_area_search+0x5e0>
			//右回り
			turn_right();
 800c776:	f7fe fcf1 	bl	800b15c <turn_right>
			my_direction = south;
 800c77a:	4b9c      	ldr	r3, [pc, #624]	; (800c9ec <goal_area_search+0x6c4>)
 800c77c:	2202      	movs	r2, #2
 800c77e:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c780:	2300      	movs	r3, #0
 800c782:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c786:	e004      	b.n	800c792 <goal_area_search+0x46a>
 800c788:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c78c:	3301      	adds	r3, #1
 800c78e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c792:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800c796:	f7fb fdfd 	bl	8008394 <__aeabi_i2d>
 800c79a:	a391      	add	r3, pc, #580	; (adr r3, 800c9e0 <goal_area_search+0x6b8>)
 800c79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a0:	f7fc f8d4 	bl	800894c <__aeabi_dcmplt>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1ee      	bne.n	800c788 <goal_area_search+0x460>
			//直進
			Accelerate();
 800c7aa:	f7fe fa05 	bl	800abb8 <Accelerate>
			Decelerate();
 800c7ae:	f7fe fab3 	bl	800ad18 <Decelerate>
			y--;
 800c7b2:	4b8f      	ldr	r3, [pc, #572]	; (800c9f0 <goal_area_search+0x6c8>)
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	b2da      	uxtb	r2, r3
 800c7ba:	4b8d      	ldr	r3, [pc, #564]	; (800c9f0 <goal_area_search+0x6c8>)
 800c7bc:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c7be:	f7ff fc6f 	bl	800c0a0 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c7c8:	e004      	b.n	800c7d4 <goal_area_search+0x4ac>
 800c7ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c7d4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800c7d8:	f7fb fddc 	bl	8008394 <__aeabi_i2d>
 800c7dc:	a380      	add	r3, pc, #512	; (adr r3, 800c9e0 <goal_area_search+0x6b8>)
 800c7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e2:	f7fc f8b3 	bl	800894c <__aeabi_dcmplt>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1ee      	bne.n	800c7ca <goal_area_search+0x4a2>

			//右回り
			turn_right();
 800c7ec:	f7fe fcb6 	bl	800b15c <turn_right>
			my_direction = west;
 800c7f0:	4b7e      	ldr	r3, [pc, #504]	; (800c9ec <goal_area_search+0x6c4>)
 800c7f2:	2203      	movs	r2, #3
 800c7f4:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c7fc:	e004      	b.n	800c808 <goal_area_search+0x4e0>
 800c7fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c802:	3301      	adds	r3, #1
 800c804:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c808:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800c80c:	f7fb fdc2 	bl	8008394 <__aeabi_i2d>
 800c810:	a373      	add	r3, pc, #460	; (adr r3, 800c9e0 <goal_area_search+0x6b8>)
 800c812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c816:	f7fc f899 	bl	800894c <__aeabi_dcmplt>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d1ee      	bne.n	800c7fe <goal_area_search+0x4d6>
			//直進
			Accelerate();
 800c820:	f7fe f9ca 	bl	800abb8 <Accelerate>
			Decelerate();
 800c824:	f7fe fa78 	bl	800ad18 <Decelerate>
			x--;
 800c828:	4b6f      	ldr	r3, [pc, #444]	; (800c9e8 <goal_area_search+0x6c0>)
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	3b01      	subs	r3, #1
 800c82e:	b2da      	uxtb	r2, r3
 800c830:	4b6d      	ldr	r3, [pc, #436]	; (800c9e8 <goal_area_search+0x6c0>)
 800c832:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c834:	f7ff fc34 	bl	800c0a0 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c838:	2300      	movs	r3, #0
 800c83a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c83e:	e004      	b.n	800c84a <goal_area_search+0x522>
 800c840:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c844:	3301      	adds	r3, #1
 800c846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c84a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800c84e:	f7fb fda1 	bl	8008394 <__aeabi_i2d>
 800c852:	a363      	add	r3, pc, #396	; (adr r3, 800c9e0 <goal_area_search+0x6b8>)
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	f7fc f878 	bl	800894c <__aeabi_dcmplt>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d1ee      	bne.n	800c840 <goal_area_search+0x518>

			//右回転
			turn_right();
 800c862:	f7fe fc7b 	bl	800b15c <turn_right>
			my_direction = north;
 800c866:	4b61      	ldr	r3, [pc, #388]	; (800c9ec <goal_area_search+0x6c4>)
 800c868:	2200      	movs	r2, #0
 800c86a:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c86c:	2300      	movs	r3, #0
 800c86e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c872:	e004      	b.n	800c87e <goal_area_search+0x556>
 800c874:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c878:	3301      	adds	r3, #1
 800c87a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c87e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800c882:	f7fb fd87 	bl	8008394 <__aeabi_i2d>
 800c886:	a356      	add	r3, pc, #344	; (adr r3, 800c9e0 <goal_area_search+0x6b8>)
 800c888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88c:	f7fc f85e 	bl	800894c <__aeabi_dcmplt>
 800c890:	4603      	mov	r3, r0
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1ee      	bne.n	800c874 <goal_area_search+0x54c>
			//直進
			Accelerate();
 800c896:	f7fe f98f 	bl	800abb8 <Accelerate>
			Decelerate();
 800c89a:	f7fe fa3d 	bl	800ad18 <Decelerate>
			y++;
 800c89e:	4b54      	ldr	r3, [pc, #336]	; (800c9f0 <goal_area_search+0x6c8>)
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	b2da      	uxtb	r2, r3
 800c8a6:	4b52      	ldr	r3, [pc, #328]	; (800c9f0 <goal_area_search+0x6c8>)
 800c8a8:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c8b0:	e004      	b.n	800c8bc <goal_area_search+0x594>
 800c8b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c8bc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800c8c0:	f7fb fd68 	bl	8008394 <__aeabi_i2d>
 800c8c4:	a346      	add	r3, pc, #280	; (adr r3, 800c9e0 <goal_area_search+0x6b8>)
 800c8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ca:	f7fc f83f 	bl	800894c <__aeabi_dcmplt>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d1ee      	bne.n	800c8b2 <goal_area_search+0x58a>
			//左回転
			turn_left();
 800c8d4:	f7fe fcac 	bl	800b230 <turn_left>
			my_direction = west;
 800c8d8:	4b44      	ldr	r3, [pc, #272]	; (800c9ec <goal_area_search+0x6c4>)
 800c8da:	2203      	movs	r2, #3
 800c8dc:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800c8de:	2300      	movs	r3, #0
 800c8e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c8e4:	e004      	b.n	800c8f0 <goal_area_search+0x5c8>
 800c8e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c8f0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c8f4:	f7fb fd4e 	bl	8008394 <__aeabi_i2d>
 800c8f8:	a339      	add	r3, pc, #228	; (adr r3, 800c9e0 <goal_area_search+0x6b8>)
 800c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fe:	f7fc f825 	bl	800894c <__aeabi_dcmplt>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1ee      	bne.n	800c8e6 <goal_area_search+0x5be>
		}

		if(orbit == 'L'){
 800c908:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c90c:	2b4c      	cmp	r3, #76	; 0x4c
 800c90e:	f040 8412 	bne.w	800d136 <goal_area_search+0xe0e>
			//左回り
			turn_left();
 800c912:	f7fe fc8d 	bl	800b230 <turn_left>
			my_direction = north;
 800c916:	4b35      	ldr	r3, [pc, #212]	; (800c9ec <goal_area_search+0x6c4>)
 800c918:	2200      	movs	r2, #0
 800c91a:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c91c:	2300      	movs	r3, #0
 800c91e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c922:	e004      	b.n	800c92e <goal_area_search+0x606>
 800c924:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c928:	3301      	adds	r3, #1
 800c92a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c92e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800c932:	f7fb fd2f 	bl	8008394 <__aeabi_i2d>
 800c936:	a32a      	add	r3, pc, #168	; (adr r3, 800c9e0 <goal_area_search+0x6b8>)
 800c938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93c:	f7fc f806 	bl	800894c <__aeabi_dcmplt>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1ee      	bne.n	800c924 <goal_area_search+0x5fc>
			//直進
			Accelerate();
 800c946:	f7fe f937 	bl	800abb8 <Accelerate>
			Decelerate();
 800c94a:	f7fe f9e5 	bl	800ad18 <Decelerate>
			y++;
 800c94e:	4b28      	ldr	r3, [pc, #160]	; (800c9f0 <goal_area_search+0x6c8>)
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	3301      	adds	r3, #1
 800c954:	b2da      	uxtb	r2, r3
 800c956:	4b26      	ldr	r3, [pc, #152]	; (800c9f0 <goal_area_search+0x6c8>)
 800c958:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c95a:	f7ff fba1 	bl	800c0a0 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c95e:	2300      	movs	r3, #0
 800c960:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c964:	e004      	b.n	800c970 <goal_area_search+0x648>
 800c966:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c96a:	3301      	adds	r3, #1
 800c96c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c970:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c974:	f7fb fd0e 	bl	8008394 <__aeabi_i2d>
 800c978:	a319      	add	r3, pc, #100	; (adr r3, 800c9e0 <goal_area_search+0x6b8>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	f7fb ffe5 	bl	800894c <__aeabi_dcmplt>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d1ee      	bne.n	800c966 <goal_area_search+0x63e>

			turn_left();
 800c988:	f7fe fc52 	bl	800b230 <turn_left>
			my_direction = west;
 800c98c:	4b17      	ldr	r3, [pc, #92]	; (800c9ec <goal_area_search+0x6c4>)
 800c98e:	2203      	movs	r2, #3
 800c990:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c992:	2300      	movs	r3, #0
 800c994:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c998:	e004      	b.n	800c9a4 <goal_area_search+0x67c>
 800c99a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c99e:	3301      	adds	r3, #1
 800c9a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c9a4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c9a8:	f7fb fcf4 	bl	8008394 <__aeabi_i2d>
 800c9ac:	a30c      	add	r3, pc, #48	; (adr r3, 800c9e0 <goal_area_search+0x6b8>)
 800c9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b2:	f7fb ffcb 	bl	800894c <__aeabi_dcmplt>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1ee      	bne.n	800c99a <goal_area_search+0x672>
			//直進
			Accelerate();
 800c9bc:	f7fe f8fc 	bl	800abb8 <Accelerate>
			Decelerate();
 800c9c0:	f7fe f9aa 	bl	800ad18 <Decelerate>
			x--;
 800c9c4:	4b08      	ldr	r3, [pc, #32]	; (800c9e8 <goal_area_search+0x6c0>)
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	3b01      	subs	r3, #1
 800c9ca:	b2da      	uxtb	r2, r3
 800c9cc:	4b06      	ldr	r3, [pc, #24]	; (800c9e8 <goal_area_search+0x6c0>)
 800c9ce:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800c9d0:	f7ff fb66 	bl	800c0a0 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c9da:	e010      	b.n	800c9fe <goal_area_search+0x6d6>
 800c9dc:	f3af 8000 	nop.w
 800c9e0:	00000000 	.word	0x00000000
 800c9e4:	40cd4c00 	.word	0x40cd4c00
 800c9e8:	2000030c 	.word	0x2000030c
 800c9ec:	2000449a 	.word	0x2000449a
 800c9f0:	2000030d 	.word	0x2000030d
 800c9f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c9fe:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800ca02:	f7fb fcc7 	bl	8008394 <__aeabi_i2d>
 800ca06:	a3bc      	add	r3, pc, #752	; (adr r3, 800ccf8 <goal_area_search+0x9d0>)
 800ca08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0c:	f7fb ff9e 	bl	800894c <__aeabi_dcmplt>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d1ee      	bne.n	800c9f4 <goal_area_search+0x6cc>

			//左回転
			turn_left();
 800ca16:	f7fe fc0b 	bl	800b230 <turn_left>
			my_direction = south;
 800ca1a:	4bb9      	ldr	r3, [pc, #740]	; (800cd00 <goal_area_search+0x9d8>)
 800ca1c:	2202      	movs	r2, #2
 800ca1e:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ca20:	2300      	movs	r3, #0
 800ca22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ca26:	e004      	b.n	800ca32 <goal_area_search+0x70a>
 800ca28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ca32:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800ca36:	f7fb fcad 	bl	8008394 <__aeabi_i2d>
 800ca3a:	a3af      	add	r3, pc, #700	; (adr r3, 800ccf8 <goal_area_search+0x9d0>)
 800ca3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca40:	f7fb ff84 	bl	800894c <__aeabi_dcmplt>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d1ee      	bne.n	800ca28 <goal_area_search+0x700>
			//直進
			Accelerate();
 800ca4a:	f7fe f8b5 	bl	800abb8 <Accelerate>
			Decelerate();
 800ca4e:	f7fe f963 	bl	800ad18 <Decelerate>
			y--;
 800ca52:	4bac      	ldr	r3, [pc, #688]	; (800cd04 <goal_area_search+0x9dc>)
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	3b01      	subs	r3, #1
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	4baa      	ldr	r3, [pc, #680]	; (800cd04 <goal_area_search+0x9dc>)
 800ca5c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ca5e:	2300      	movs	r3, #0
 800ca60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ca64:	e004      	b.n	800ca70 <goal_area_search+0x748>
 800ca66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ca70:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800ca74:	f7fb fc8e 	bl	8008394 <__aeabi_i2d>
 800ca78:	a39f      	add	r3, pc, #636	; (adr r3, 800ccf8 <goal_area_search+0x9d0>)
 800ca7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7e:	f7fb ff65 	bl	800894c <__aeabi_dcmplt>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d1ee      	bne.n	800ca66 <goal_area_search+0x73e>
			//右回転
			turn_right();
 800ca88:	f7fe fb68 	bl	800b15c <turn_right>
			my_direction = west;
 800ca8c:	4b9c      	ldr	r3, [pc, #624]	; (800cd00 <goal_area_search+0x9d8>)
 800ca8e:	2203      	movs	r2, #3
 800ca90:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800ca92:	2300      	movs	r3, #0
 800ca94:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ca96:	e002      	b.n	800ca9e <goal_area_search+0x776>
 800ca98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ca9e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800caa0:	f7fb fc78 	bl	8008394 <__aeabi_i2d>
 800caa4:	a394      	add	r3, pc, #592	; (adr r3, 800ccf8 <goal_area_search+0x9d0>)
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	f7fb ff4f 	bl	800894c <__aeabi_dcmplt>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1f1      	bne.n	800ca98 <goal_area_search+0x770>


		}
		break;
 800cab4:	e33f      	b.n	800d136 <goal_area_search+0xe0e>
	case south:
		//直進
		Accelerate();
 800cab6:	f7fe f87f 	bl	800abb8 <Accelerate>
		Decelerate();
 800caba:	f7fe f92d 	bl	800ad18 <Decelerate>
		y--;
 800cabe:	4b91      	ldr	r3, [pc, #580]	; (800cd04 <goal_area_search+0x9dc>)
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	3b01      	subs	r3, #1
 800cac4:	b2da      	uxtb	r2, r3
 800cac6:	4b8f      	ldr	r3, [pc, #572]	; (800cd04 <goal_area_search+0x9dc>)
 800cac8:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800caca:	f7ff fae9 	bl	800c0a0 <wall_set>
		//待つ
		for(int i=0;i < WAIT*0.5;i++);
 800cace:	2300      	movs	r3, #0
 800cad0:	67bb      	str	r3, [r7, #120]	; 0x78
 800cad2:	e002      	b.n	800cada <goal_area_search+0x7b2>
 800cad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cad6:	3301      	adds	r3, #1
 800cad8:	67bb      	str	r3, [r7, #120]	; 0x78
 800cada:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800cadc:	f7fb fc5a 	bl	8008394 <__aeabi_i2d>
 800cae0:	a385      	add	r3, pc, #532	; (adr r3, 800ccf8 <goal_area_search+0x9d0>)
 800cae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae6:	f7fb ff31 	bl	800894c <__aeabi_dcmplt>
 800caea:	4603      	mov	r3, r0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d1f1      	bne.n	800cad4 <goal_area_search+0x7ac>

		//現在の座標 == ゴールの上2マス
		if(x == X_GOAL_LESSER){
 800caf0:	4b85      	ldr	r3, [pc, #532]	; (800cd08 <goal_area_search+0x9e0>)
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	2b07      	cmp	r3, #7
 800caf6:	d103      	bne.n	800cb00 <goal_area_search+0x7d8>
			orbit = 'L';
 800caf8:	234c      	movs	r3, #76	; 0x4c
 800cafa:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800cafe:	e006      	b.n	800cb0e <goal_area_search+0x7e6>
		}
		//xが大きい方なら、左回り
		else if(x == X_GOAL_LARGER){
 800cb00:	4b81      	ldr	r3, [pc, #516]	; (800cd08 <goal_area_search+0x9e0>)
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2b07      	cmp	r3, #7
 800cb06:	d102      	bne.n	800cb0e <goal_area_search+0x7e6>
			orbit = 'R';
 800cb08:	2352      	movs	r3, #82	; 0x52
 800cb0a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800cb0e:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cb12:	2b52      	cmp	r3, #82	; 0x52
 800cb14:	f040 80ad 	bne.w	800cc72 <goal_area_search+0x94a>
			//右回り
			turn_right();
 800cb18:	f7fe fb20 	bl	800b15c <turn_right>
			my_direction = west;
 800cb1c:	4b78      	ldr	r3, [pc, #480]	; (800cd00 <goal_area_search+0x9d8>)
 800cb1e:	2203      	movs	r2, #3
 800cb20:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cb22:	2300      	movs	r3, #0
 800cb24:	677b      	str	r3, [r7, #116]	; 0x74
 800cb26:	e002      	b.n	800cb2e <goal_area_search+0x806>
 800cb28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	677b      	str	r3, [r7, #116]	; 0x74
 800cb2e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800cb30:	f7fb fc30 	bl	8008394 <__aeabi_i2d>
 800cb34:	a370      	add	r3, pc, #448	; (adr r3, 800ccf8 <goal_area_search+0x9d0>)
 800cb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3a:	f7fb ff07 	bl	800894c <__aeabi_dcmplt>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d1f1      	bne.n	800cb28 <goal_area_search+0x800>
			//直進
			Accelerate();
 800cb44:	f7fe f838 	bl	800abb8 <Accelerate>
			Decelerate();
 800cb48:	f7fe f8e6 	bl	800ad18 <Decelerate>
			x--;
 800cb4c:	4b6e      	ldr	r3, [pc, #440]	; (800cd08 <goal_area_search+0x9e0>)
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	3b01      	subs	r3, #1
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	4b6c      	ldr	r3, [pc, #432]	; (800cd08 <goal_area_search+0x9e0>)
 800cb56:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cb58:	f7ff faa2 	bl	800c0a0 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	673b      	str	r3, [r7, #112]	; 0x70
 800cb60:	e002      	b.n	800cb68 <goal_area_search+0x840>
 800cb62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb64:	3301      	adds	r3, #1
 800cb66:	673b      	str	r3, [r7, #112]	; 0x70
 800cb68:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800cb6a:	f7fb fc13 	bl	8008394 <__aeabi_i2d>
 800cb6e:	a362      	add	r3, pc, #392	; (adr r3, 800ccf8 <goal_area_search+0x9d0>)
 800cb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb74:	f7fb feea 	bl	800894c <__aeabi_dcmplt>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d1f1      	bne.n	800cb62 <goal_area_search+0x83a>

			//右回り
			turn_right();
 800cb7e:	f7fe faed 	bl	800b15c <turn_right>
			my_direction = north;
 800cb82:	4b5f      	ldr	r3, [pc, #380]	; (800cd00 <goal_area_search+0x9d8>)
 800cb84:	2200      	movs	r2, #0
 800cb86:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cb88:	2300      	movs	r3, #0
 800cb8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb8c:	e002      	b.n	800cb94 <goal_area_search+0x86c>
 800cb8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb90:	3301      	adds	r3, #1
 800cb92:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb94:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cb96:	f7fb fbfd 	bl	8008394 <__aeabi_i2d>
 800cb9a:	a357      	add	r3, pc, #348	; (adr r3, 800ccf8 <goal_area_search+0x9d0>)
 800cb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba0:	f7fb fed4 	bl	800894c <__aeabi_dcmplt>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1f1      	bne.n	800cb8e <goal_area_search+0x866>
			//直進
			Accelerate();
 800cbaa:	f7fe f805 	bl	800abb8 <Accelerate>
			Decelerate();
 800cbae:	f7fe f8b3 	bl	800ad18 <Decelerate>
			y++;
 800cbb2:	4b54      	ldr	r3, [pc, #336]	; (800cd04 <goal_area_search+0x9dc>)
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	b2da      	uxtb	r2, r3
 800cbba:	4b52      	ldr	r3, [pc, #328]	; (800cd04 <goal_area_search+0x9dc>)
 800cbbc:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cbbe:	f7ff fa6f 	bl	800c0a0 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbc6:	e002      	b.n	800cbce <goal_area_search+0x8a6>
 800cbc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cbca:	3301      	adds	r3, #1
 800cbcc:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbce:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800cbd0:	f7fb fbe0 	bl	8008394 <__aeabi_i2d>
 800cbd4:	a348      	add	r3, pc, #288	; (adr r3, 800ccf8 <goal_area_search+0x9d0>)
 800cbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbda:	f7fb feb7 	bl	800894c <__aeabi_dcmplt>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d1f1      	bne.n	800cbc8 <goal_area_search+0x8a0>

			//右回転
			turn_right();
 800cbe4:	f7fe faba 	bl	800b15c <turn_right>
			my_direction = east;
 800cbe8:	4b45      	ldr	r3, [pc, #276]	; (800cd00 <goal_area_search+0x9d8>)
 800cbea:	2201      	movs	r2, #1
 800cbec:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cbee:	2300      	movs	r3, #0
 800cbf0:	667b      	str	r3, [r7, #100]	; 0x64
 800cbf2:	e002      	b.n	800cbfa <goal_area_search+0x8d2>
 800cbf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	667b      	str	r3, [r7, #100]	; 0x64
 800cbfa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cbfc:	f7fb fbca 	bl	8008394 <__aeabi_i2d>
 800cc00:	a33d      	add	r3, pc, #244	; (adr r3, 800ccf8 <goal_area_search+0x9d0>)
 800cc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc06:	f7fb fea1 	bl	800894c <__aeabi_dcmplt>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d1f1      	bne.n	800cbf4 <goal_area_search+0x8cc>
			//直進
			Accelerate();
 800cc10:	f7fd ffd2 	bl	800abb8 <Accelerate>
			Decelerate();
 800cc14:	f7fe f880 	bl	800ad18 <Decelerate>
			x++;
 800cc18:	4b3b      	ldr	r3, [pc, #236]	; (800cd08 <goal_area_search+0x9e0>)
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	b2da      	uxtb	r2, r3
 800cc20:	4b39      	ldr	r3, [pc, #228]	; (800cd08 <goal_area_search+0x9e0>)
 800cc22:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cc24:	2300      	movs	r3, #0
 800cc26:	663b      	str	r3, [r7, #96]	; 0x60
 800cc28:	e002      	b.n	800cc30 <goal_area_search+0x908>
 800cc2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	663b      	str	r3, [r7, #96]	; 0x60
 800cc30:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800cc32:	f7fb fbaf 	bl	8008394 <__aeabi_i2d>
 800cc36:	a330      	add	r3, pc, #192	; (adr r3, 800ccf8 <goal_area_search+0x9d0>)
 800cc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3c:	f7fb fe86 	bl	800894c <__aeabi_dcmplt>
 800cc40:	4603      	mov	r3, r0
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d1f1      	bne.n	800cc2a <goal_area_search+0x902>
			//左回転
			turn_left();
 800cc46:	f7fe faf3 	bl	800b230 <turn_left>
			my_direction = north;
 800cc4a:	4b2d      	ldr	r3, [pc, #180]	; (800cd00 <goal_area_search+0x9d8>)
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cc50:	2300      	movs	r3, #0
 800cc52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc54:	e002      	b.n	800cc5c <goal_area_search+0x934>
 800cc56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc58:	3301      	adds	r3, #1
 800cc5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc5c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cc5e:	f7fb fb99 	bl	8008394 <__aeabi_i2d>
 800cc62:	a325      	add	r3, pc, #148	; (adr r3, 800ccf8 <goal_area_search+0x9d0>)
 800cc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc68:	f7fb fe70 	bl	800894c <__aeabi_dcmplt>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d1f1      	bne.n	800cc56 <goal_area_search+0x92e>
		}

		if(orbit == 'L'){
 800cc72:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cc76:	2b4c      	cmp	r3, #76	; 0x4c
 800cc78:	f040 825f 	bne.w	800d13a <goal_area_search+0xe12>
			//左回り
			turn_left();
 800cc7c:	f7fe fad8 	bl	800b230 <turn_left>
			my_direction = east;
 800cc80:	4b1f      	ldr	r3, [pc, #124]	; (800cd00 <goal_area_search+0x9d8>)
 800cc82:	2201      	movs	r2, #1
 800cc84:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cc86:	2300      	movs	r3, #0
 800cc88:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc8a:	e002      	b.n	800cc92 <goal_area_search+0x96a>
 800cc8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc8e:	3301      	adds	r3, #1
 800cc90:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc92:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cc94:	f7fb fb7e 	bl	8008394 <__aeabi_i2d>
 800cc98:	a317      	add	r3, pc, #92	; (adr r3, 800ccf8 <goal_area_search+0x9d0>)
 800cc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9e:	f7fb fe55 	bl	800894c <__aeabi_dcmplt>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d1f1      	bne.n	800cc8c <goal_area_search+0x964>
			//直進
			Accelerate();
 800cca8:	f7fd ff86 	bl	800abb8 <Accelerate>
			Decelerate();
 800ccac:	f7fe f834 	bl	800ad18 <Decelerate>
			x++;
 800ccb0:	4b15      	ldr	r3, [pc, #84]	; (800cd08 <goal_area_search+0x9e0>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	b2da      	uxtb	r2, r3
 800ccb8:	4b13      	ldr	r3, [pc, #76]	; (800cd08 <goal_area_search+0x9e0>)
 800ccba:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800ccbc:	f7ff f9f0 	bl	800c0a0 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	657b      	str	r3, [r7, #84]	; 0x54
 800ccc4:	e002      	b.n	800cccc <goal_area_search+0x9a4>
 800ccc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccc8:	3301      	adds	r3, #1
 800ccca:	657b      	str	r3, [r7, #84]	; 0x54
 800cccc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ccce:	f7fb fb61 	bl	8008394 <__aeabi_i2d>
 800ccd2:	a309      	add	r3, pc, #36	; (adr r3, 800ccf8 <goal_area_search+0x9d0>)
 800ccd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd8:	f7fb fe38 	bl	800894c <__aeabi_dcmplt>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1f1      	bne.n	800ccc6 <goal_area_search+0x99e>

			turn_left();
 800cce2:	f7fe faa5 	bl	800b230 <turn_left>
			my_direction = north;
 800cce6:	4b06      	ldr	r3, [pc, #24]	; (800cd00 <goal_area_search+0x9d8>)
 800cce8:	2200      	movs	r2, #0
 800ccea:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800ccec:	2300      	movs	r3, #0
 800ccee:	653b      	str	r3, [r7, #80]	; 0x50
 800ccf0:	e00f      	b.n	800cd12 <goal_area_search+0x9ea>
 800ccf2:	bf00      	nop
 800ccf4:	f3af 8000 	nop.w
 800ccf8:	00000000 	.word	0x00000000
 800ccfc:	40cd4c00 	.word	0x40cd4c00
 800cd00:	2000449a 	.word	0x2000449a
 800cd04:	2000030d 	.word	0x2000030d
 800cd08:	2000030c 	.word	0x2000030c
 800cd0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd0e:	3301      	adds	r3, #1
 800cd10:	653b      	str	r3, [r7, #80]	; 0x50
 800cd12:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cd14:	f7fb fb3e 	bl	8008394 <__aeabi_i2d>
 800cd18:	a3bb      	add	r3, pc, #748	; (adr r3, 800d008 <goal_area_search+0xce0>)
 800cd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1e:	f7fb fe15 	bl	800894c <__aeabi_dcmplt>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d1f1      	bne.n	800cd0c <goal_area_search+0x9e4>
			//直進
			Accelerate();
 800cd28:	f7fd ff46 	bl	800abb8 <Accelerate>
			Decelerate();
 800cd2c:	f7fd fff4 	bl	800ad18 <Decelerate>
			y++;
 800cd30:	4bb7      	ldr	r3, [pc, #732]	; (800d010 <goal_area_search+0xce8>)
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	3301      	adds	r3, #1
 800cd36:	b2da      	uxtb	r2, r3
 800cd38:	4bb5      	ldr	r3, [pc, #724]	; (800d010 <goal_area_search+0xce8>)
 800cd3a:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cd3c:	f7ff f9b0 	bl	800c0a0 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cd40:	2300      	movs	r3, #0
 800cd42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd44:	e002      	b.n	800cd4c <goal_area_search+0xa24>
 800cd46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd48:	3301      	adds	r3, #1
 800cd4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd4c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cd4e:	f7fb fb21 	bl	8008394 <__aeabi_i2d>
 800cd52:	a3ad      	add	r3, pc, #692	; (adr r3, 800d008 <goal_area_search+0xce0>)
 800cd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd58:	f7fb fdf8 	bl	800894c <__aeabi_dcmplt>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1f1      	bne.n	800cd46 <goal_area_search+0xa1e>

			//左回転
			turn_left();
 800cd62:	f7fe fa65 	bl	800b230 <turn_left>
			my_direction = west;
 800cd66:	4bab      	ldr	r3, [pc, #684]	; (800d014 <goal_area_search+0xcec>)
 800cd68:	2203      	movs	r2, #3
 800cd6a:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd70:	e002      	b.n	800cd78 <goal_area_search+0xa50>
 800cd72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd74:	3301      	adds	r3, #1
 800cd76:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd78:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800cd7a:	f7fb fb0b 	bl	8008394 <__aeabi_i2d>
 800cd7e:	a3a2      	add	r3, pc, #648	; (adr r3, 800d008 <goal_area_search+0xce0>)
 800cd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd84:	f7fb fde2 	bl	800894c <__aeabi_dcmplt>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d1f1      	bne.n	800cd72 <goal_area_search+0xa4a>
			//直進
			Accelerate();
 800cd8e:	f7fd ff13 	bl	800abb8 <Accelerate>
			Decelerate();
 800cd92:	f7fd ffc1 	bl	800ad18 <Decelerate>
			x--;
 800cd96:	4ba0      	ldr	r3, [pc, #640]	; (800d018 <goal_area_search+0xcf0>)
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	b2da      	uxtb	r2, r3
 800cd9e:	4b9e      	ldr	r3, [pc, #632]	; (800d018 <goal_area_search+0xcf0>)
 800cda0:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cda2:	2300      	movs	r3, #0
 800cda4:	647b      	str	r3, [r7, #68]	; 0x44
 800cda6:	e002      	b.n	800cdae <goal_area_search+0xa86>
 800cda8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdaa:	3301      	adds	r3, #1
 800cdac:	647b      	str	r3, [r7, #68]	; 0x44
 800cdae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cdb0:	f7fb faf0 	bl	8008394 <__aeabi_i2d>
 800cdb4:	a394      	add	r3, pc, #592	; (adr r3, 800d008 <goal_area_search+0xce0>)
 800cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdba:	f7fb fdc7 	bl	800894c <__aeabi_dcmplt>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d1f1      	bne.n	800cda8 <goal_area_search+0xa80>
			//右回転
			turn_right();
 800cdc4:	f7fe f9ca 	bl	800b15c <turn_right>
			my_direction = north;
 800cdc8:	4b92      	ldr	r3, [pc, #584]	; (800d014 <goal_area_search+0xcec>)
 800cdca:	2200      	movs	r2, #0
 800cdcc:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cdce:	2300      	movs	r3, #0
 800cdd0:	643b      	str	r3, [r7, #64]	; 0x40
 800cdd2:	e002      	b.n	800cdda <goal_area_search+0xab2>
 800cdd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	643b      	str	r3, [r7, #64]	; 0x40
 800cdda:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cddc:	f7fb fada 	bl	8008394 <__aeabi_i2d>
 800cde0:	a389      	add	r3, pc, #548	; (adr r3, 800d008 <goal_area_search+0xce0>)
 800cde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde6:	f7fb fdb1 	bl	800894c <__aeabi_dcmplt>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d1f1      	bne.n	800cdd4 <goal_area_search+0xaac>
		}
		break;
 800cdf0:	e1a3      	b.n	800d13a <goal_area_search+0xe12>
	case west:
		//直進
		Accelerate();
 800cdf2:	f7fd fee1 	bl	800abb8 <Accelerate>
		Decelerate();
 800cdf6:	f7fd ff8f 	bl	800ad18 <Decelerate>
		x--;
 800cdfa:	4b87      	ldr	r3, [pc, #540]	; (800d018 <goal_area_search+0xcf0>)
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	b2da      	uxtb	r2, r3
 800ce02:	4b85      	ldr	r3, [pc, #532]	; (800d018 <goal_area_search+0xcf0>)
 800ce04:	701a      	strb	r2, [r3, #0]
		//壁更新
		wall_set();
 800ce06:	f7ff f94b 	bl	800c0a0 <wall_set>
		//待つ
		for(int i=0;i < WAIT*0.5;i++);
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce0e:	e002      	b.n	800ce16 <goal_area_search+0xaee>
 800ce10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce12:	3301      	adds	r3, #1
 800ce14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ce18:	f7fb fabc 	bl	8008394 <__aeabi_i2d>
 800ce1c:	a37a      	add	r3, pc, #488	; (adr r3, 800d008 <goal_area_search+0xce0>)
 800ce1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce22:	f7fb fd93 	bl	800894c <__aeabi_dcmplt>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d1f1      	bne.n	800ce10 <goal_area_search+0xae8>

		//現在の座標 == ゴールの右2マス
		if(y == Y_GOAL_LESSER){
 800ce2c:	4b78      	ldr	r3, [pc, #480]	; (800d010 <goal_area_search+0xce8>)
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	2b07      	cmp	r3, #7
 800ce32:	d103      	bne.n	800ce3c <goal_area_search+0xb14>
			orbit = 'R';
 800ce34:	2352      	movs	r3, #82	; 0x52
 800ce36:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800ce3a:	e006      	b.n	800ce4a <goal_area_search+0xb22>
		}
		//xが大きい方なら、左回り
		else if(y == Y_GOAL_LARGER){
 800ce3c:	4b74      	ldr	r3, [pc, #464]	; (800d010 <goal_area_search+0xce8>)
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	2b07      	cmp	r3, #7
 800ce42:	d102      	bne.n	800ce4a <goal_area_search+0xb22>
			orbit = 'L';
 800ce44:	234c      	movs	r3, #76	; 0x4c
 800ce46:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if(orbit == 'R'){
 800ce4a:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800ce4e:	2b52      	cmp	r3, #82	; 0x52
 800ce50:	f040 80ad 	bne.w	800cfae <goal_area_search+0xc86>
			//右回り
			turn_right();
 800ce54:	f7fe f982 	bl	800b15c <turn_right>
			my_direction = north;
 800ce58:	4b6e      	ldr	r3, [pc, #440]	; (800d014 <goal_area_search+0xcec>)
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800ce5e:	2300      	movs	r3, #0
 800ce60:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce62:	e002      	b.n	800ce6a <goal_area_search+0xb42>
 800ce64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce66:	3301      	adds	r3, #1
 800ce68:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce6c:	f7fb fa92 	bl	8008394 <__aeabi_i2d>
 800ce70:	a365      	add	r3, pc, #404	; (adr r3, 800d008 <goal_area_search+0xce0>)
 800ce72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce76:	f7fb fd69 	bl	800894c <__aeabi_dcmplt>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1f1      	bne.n	800ce64 <goal_area_search+0xb3c>
			//直進
			Accelerate();
 800ce80:	f7fd fe9a 	bl	800abb8 <Accelerate>
			Decelerate();
 800ce84:	f7fd ff48 	bl	800ad18 <Decelerate>
			y++;
 800ce88:	4b61      	ldr	r3, [pc, #388]	; (800d010 <goal_area_search+0xce8>)
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	b2da      	uxtb	r2, r3
 800ce90:	4b5f      	ldr	r3, [pc, #380]	; (800d010 <goal_area_search+0xce8>)
 800ce92:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800ce94:	f7ff f904 	bl	800c0a0 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800ce98:	2300      	movs	r3, #0
 800ce9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ce9c:	e002      	b.n	800cea4 <goal_area_search+0xb7c>
 800ce9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea0:	3301      	adds	r3, #1
 800cea2:	637b      	str	r3, [r7, #52]	; 0x34
 800cea4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cea6:	f7fb fa75 	bl	8008394 <__aeabi_i2d>
 800ceaa:	a357      	add	r3, pc, #348	; (adr r3, 800d008 <goal_area_search+0xce0>)
 800ceac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb0:	f7fb fd4c 	bl	800894c <__aeabi_dcmplt>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d1f1      	bne.n	800ce9e <goal_area_search+0xb76>

			//右回り
			turn_right();
 800ceba:	f7fe f94f 	bl	800b15c <turn_right>
			my_direction = east;
 800cebe:	4b55      	ldr	r3, [pc, #340]	; (800d014 <goal_area_search+0xcec>)
 800cec0:	2201      	movs	r2, #1
 800cec2:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cec4:	2300      	movs	r3, #0
 800cec6:	633b      	str	r3, [r7, #48]	; 0x30
 800cec8:	e002      	b.n	800ced0 <goal_area_search+0xba8>
 800ceca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cecc:	3301      	adds	r3, #1
 800cece:	633b      	str	r3, [r7, #48]	; 0x30
 800ced0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ced2:	f7fb fa5f 	bl	8008394 <__aeabi_i2d>
 800ced6:	a34c      	add	r3, pc, #304	; (adr r3, 800d008 <goal_area_search+0xce0>)
 800ced8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cedc:	f7fb fd36 	bl	800894c <__aeabi_dcmplt>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d1f1      	bne.n	800ceca <goal_area_search+0xba2>
			//直進
			Accelerate();
 800cee6:	f7fd fe67 	bl	800abb8 <Accelerate>
			Decelerate();
 800ceea:	f7fd ff15 	bl	800ad18 <Decelerate>
			x++;
 800ceee:	4b4a      	ldr	r3, [pc, #296]	; (800d018 <goal_area_search+0xcf0>)
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	3301      	adds	r3, #1
 800cef4:	b2da      	uxtb	r2, r3
 800cef6:	4b48      	ldr	r3, [pc, #288]	; (800d018 <goal_area_search+0xcf0>)
 800cef8:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cefa:	f7ff f8d1 	bl	800c0a0 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cefe:	2300      	movs	r3, #0
 800cf00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf02:	e002      	b.n	800cf0a <goal_area_search+0xbe2>
 800cf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf06:	3301      	adds	r3, #1
 800cf08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf0c:	f7fb fa42 	bl	8008394 <__aeabi_i2d>
 800cf10:	a33d      	add	r3, pc, #244	; (adr r3, 800d008 <goal_area_search+0xce0>)
 800cf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf16:	f7fb fd19 	bl	800894c <__aeabi_dcmplt>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d1f1      	bne.n	800cf04 <goal_area_search+0xbdc>

			//右回転
			turn_right();
 800cf20:	f7fe f91c 	bl	800b15c <turn_right>
			my_direction = south;
 800cf24:	4b3b      	ldr	r3, [pc, #236]	; (800d014 <goal_area_search+0xcec>)
 800cf26:	2202      	movs	r2, #2
 800cf28:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf2e:	e002      	b.n	800cf36 <goal_area_search+0xc0e>
 800cf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf32:	3301      	adds	r3, #1
 800cf34:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf38:	f7fb fa2c 	bl	8008394 <__aeabi_i2d>
 800cf3c:	a332      	add	r3, pc, #200	; (adr r3, 800d008 <goal_area_search+0xce0>)
 800cf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf42:	f7fb fd03 	bl	800894c <__aeabi_dcmplt>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1f1      	bne.n	800cf30 <goal_area_search+0xc08>
			//直進
			Accelerate();
 800cf4c:	f7fd fe34 	bl	800abb8 <Accelerate>
			Decelerate();
 800cf50:	f7fd fee2 	bl	800ad18 <Decelerate>
			y--;
 800cf54:	4b2e      	ldr	r3, [pc, #184]	; (800d010 <goal_area_search+0xce8>)
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	3b01      	subs	r3, #1
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	4b2c      	ldr	r3, [pc, #176]	; (800d010 <goal_area_search+0xce8>)
 800cf5e:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cf60:	2300      	movs	r3, #0
 800cf62:	627b      	str	r3, [r7, #36]	; 0x24
 800cf64:	e002      	b.n	800cf6c <goal_area_search+0xc44>
 800cf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf68:	3301      	adds	r3, #1
 800cf6a:	627b      	str	r3, [r7, #36]	; 0x24
 800cf6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf6e:	f7fb fa11 	bl	8008394 <__aeabi_i2d>
 800cf72:	a325      	add	r3, pc, #148	; (adr r3, 800d008 <goal_area_search+0xce0>)
 800cf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf78:	f7fb fce8 	bl	800894c <__aeabi_dcmplt>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d1f1      	bne.n	800cf66 <goal_area_search+0xc3e>
			//左回転
			turn_left();
 800cf82:	f7fe f955 	bl	800b230 <turn_left>
			my_direction = east;
 800cf86:	4b23      	ldr	r3, [pc, #140]	; (800d014 <goal_area_search+0xcec>)
 800cf88:	2201      	movs	r2, #1
 800cf8a:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	623b      	str	r3, [r7, #32]
 800cf90:	e002      	b.n	800cf98 <goal_area_search+0xc70>
 800cf92:	6a3b      	ldr	r3, [r7, #32]
 800cf94:	3301      	adds	r3, #1
 800cf96:	623b      	str	r3, [r7, #32]
 800cf98:	6a38      	ldr	r0, [r7, #32]
 800cf9a:	f7fb f9fb 	bl	8008394 <__aeabi_i2d>
 800cf9e:	a31a      	add	r3, pc, #104	; (adr r3, 800d008 <goal_area_search+0xce0>)
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	f7fb fcd2 	bl	800894c <__aeabi_dcmplt>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d1f1      	bne.n	800cf92 <goal_area_search+0xc6a>
		}

		if(orbit == 'L'){
 800cfae:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800cfb2:	2b4c      	cmp	r3, #76	; 0x4c
 800cfb4:	f040 80c3 	bne.w	800d13e <goal_area_search+0xe16>
			//左回り
			turn_left();
 800cfb8:	f7fe f93a 	bl	800b230 <turn_left>
			my_direction = south;
 800cfbc:	4b15      	ldr	r3, [pc, #84]	; (800d014 <goal_area_search+0xcec>)
 800cfbe:	2202      	movs	r2, #2
 800cfc0:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	61fb      	str	r3, [r7, #28]
 800cfc6:	e002      	b.n	800cfce <goal_area_search+0xca6>
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	61fb      	str	r3, [r7, #28]
 800cfce:	69f8      	ldr	r0, [r7, #28]
 800cfd0:	f7fb f9e0 	bl	8008394 <__aeabi_i2d>
 800cfd4:	a30c      	add	r3, pc, #48	; (adr r3, 800d008 <goal_area_search+0xce0>)
 800cfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfda:	f7fb fcb7 	bl	800894c <__aeabi_dcmplt>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1f1      	bne.n	800cfc8 <goal_area_search+0xca0>
			//直進
			Accelerate();
 800cfe4:	f7fd fde8 	bl	800abb8 <Accelerate>
			Decelerate();
 800cfe8:	f7fd fe96 	bl	800ad18 <Decelerate>
			y--;
 800cfec:	4b08      	ldr	r3, [pc, #32]	; (800d010 <goal_area_search+0xce8>)
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	3b01      	subs	r3, #1
 800cff2:	b2da      	uxtb	r2, r3
 800cff4:	4b06      	ldr	r3, [pc, #24]	; (800d010 <goal_area_search+0xce8>)
 800cff6:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800cff8:	f7ff f852 	bl	800c0a0 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800cffc:	2300      	movs	r3, #0
 800cffe:	61bb      	str	r3, [r7, #24]
 800d000:	e00f      	b.n	800d022 <goal_area_search+0xcfa>
 800d002:	bf00      	nop
 800d004:	f3af 8000 	nop.w
 800d008:	00000000 	.word	0x00000000
 800d00c:	40cd4c00 	.word	0x40cd4c00
 800d010:	2000030d 	.word	0x2000030d
 800d014:	2000449a 	.word	0x2000449a
 800d018:	2000030c 	.word	0x2000030c
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	3301      	adds	r3, #1
 800d020:	61bb      	str	r3, [r7, #24]
 800d022:	69b8      	ldr	r0, [r7, #24]
 800d024:	f7fb f9b6 	bl	8008394 <__aeabi_i2d>
 800d028:	a349      	add	r3, pc, #292	; (adr r3, 800d150 <goal_area_search+0xe28>)
 800d02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02e:	f7fb fc8d 	bl	800894c <__aeabi_dcmplt>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1f1      	bne.n	800d01c <goal_area_search+0xcf4>

			turn_left();
 800d038:	f7fe f8fa 	bl	800b230 <turn_left>
			my_direction = east;
 800d03c:	4b46      	ldr	r3, [pc, #280]	; (800d158 <goal_area_search+0xe30>)
 800d03e:	2201      	movs	r2, #1
 800d040:	701a      	strb	r2, [r3, #0]
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800d042:	2300      	movs	r3, #0
 800d044:	617b      	str	r3, [r7, #20]
 800d046:	e002      	b.n	800d04e <goal_area_search+0xd26>
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	3301      	adds	r3, #1
 800d04c:	617b      	str	r3, [r7, #20]
 800d04e:	6978      	ldr	r0, [r7, #20]
 800d050:	f7fb f9a0 	bl	8008394 <__aeabi_i2d>
 800d054:	a33e      	add	r3, pc, #248	; (adr r3, 800d150 <goal_area_search+0xe28>)
 800d056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05a:	f7fb fc77 	bl	800894c <__aeabi_dcmplt>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b00      	cmp	r3, #0
 800d062:	d1f1      	bne.n	800d048 <goal_area_search+0xd20>
			//直進
			Accelerate();
 800d064:	f7fd fda8 	bl	800abb8 <Accelerate>
			Decelerate();
 800d068:	f7fd fe56 	bl	800ad18 <Decelerate>
			x++;
 800d06c:	4b3b      	ldr	r3, [pc, #236]	; (800d15c <goal_area_search+0xe34>)
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	3301      	adds	r3, #1
 800d072:	b2da      	uxtb	r2, r3
 800d074:	4b39      	ldr	r3, [pc, #228]	; (800d15c <goal_area_search+0xe34>)
 800d076:	701a      	strb	r2, [r3, #0]
			//壁更新
			wall_set();
 800d078:	f7ff f812 	bl	800c0a0 <wall_set>
			//待つ
			for(int i=0;i < WAIT*0.5;i++);
 800d07c:	2300      	movs	r3, #0
 800d07e:	613b      	str	r3, [r7, #16]
 800d080:	e002      	b.n	800d088 <goal_area_search+0xd60>
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	3301      	adds	r3, #1
 800d086:	613b      	str	r3, [r7, #16]
 800d088:	6938      	ldr	r0, [r7, #16]
 800d08a:	f7fb f983 	bl	8008394 <__aeabi_i2d>
 800d08e:	a330      	add	r3, pc, #192	; (adr r3, 800d150 <goal_area_search+0xe28>)
 800d090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d094:	f7fb fc5a 	bl	800894c <__aeabi_dcmplt>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d1f1      	bne.n	800d082 <goal_area_search+0xd5a>

			//左回転
			turn_left();
 800d09e:	f7fe f8c7 	bl	800b230 <turn_left>
			my_direction = north;
 800d0a2:	4b2d      	ldr	r3, [pc, #180]	; (800d158 <goal_area_search+0xe30>)
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	60fb      	str	r3, [r7, #12]
 800d0ac:	e002      	b.n	800d0b4 <goal_area_search+0xd8c>
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	60fb      	str	r3, [r7, #12]
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f7fb f96d 	bl	8008394 <__aeabi_i2d>
 800d0ba:	a325      	add	r3, pc, #148	; (adr r3, 800d150 <goal_area_search+0xe28>)
 800d0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c0:	f7fb fc44 	bl	800894c <__aeabi_dcmplt>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d1f1      	bne.n	800d0ae <goal_area_search+0xd86>
			//直進
			Accelerate();
 800d0ca:	f7fd fd75 	bl	800abb8 <Accelerate>
			Decelerate();
 800d0ce:	f7fd fe23 	bl	800ad18 <Decelerate>
			y++;
 800d0d2:	4b23      	ldr	r3, [pc, #140]	; (800d160 <goal_area_search+0xe38>)
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	b2da      	uxtb	r2, r3
 800d0da:	4b21      	ldr	r3, [pc, #132]	; (800d160 <goal_area_search+0xe38>)
 800d0dc:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d0de:	2300      	movs	r3, #0
 800d0e0:	60bb      	str	r3, [r7, #8]
 800d0e2:	e002      	b.n	800d0ea <goal_area_search+0xdc2>
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	60bb      	str	r3, [r7, #8]
 800d0ea:	68b8      	ldr	r0, [r7, #8]
 800d0ec:	f7fb f952 	bl	8008394 <__aeabi_i2d>
 800d0f0:	a317      	add	r3, pc, #92	; (adr r3, 800d150 <goal_area_search+0xe28>)
 800d0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f6:	f7fb fc29 	bl	800894c <__aeabi_dcmplt>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1f1      	bne.n	800d0e4 <goal_area_search+0xdbc>
			//右回転
			turn_right();
 800d100:	f7fe f82c 	bl	800b15c <turn_right>
			my_direction = east;
 800d104:	4b14      	ldr	r3, [pc, #80]	; (800d158 <goal_area_search+0xe30>)
 800d106:	2201      	movs	r2, #1
 800d108:	701a      	strb	r2, [r3, #0]
			for(int i=0;i < WAIT*0.5;i++);
 800d10a:	2300      	movs	r3, #0
 800d10c:	607b      	str	r3, [r7, #4]
 800d10e:	e002      	b.n	800d116 <goal_area_search+0xdee>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	3301      	adds	r3, #1
 800d114:	607b      	str	r3, [r7, #4]
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f7fb f93c 	bl	8008394 <__aeabi_i2d>
 800d11c:	a30c      	add	r3, pc, #48	; (adr r3, 800d150 <goal_area_search+0xe28>)
 800d11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d122:	f7fb fc13 	bl	800894c <__aeabi_dcmplt>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1f1      	bne.n	800d110 <goal_area_search+0xde8>
		}
		break;
 800d12c:	e007      	b.n	800d13e <goal_area_search+0xe16>
	default :
		break;
 800d12e:	bf00      	nop
 800d130:	e006      	b.n	800d140 <goal_area_search+0xe18>
		break;
 800d132:	bf00      	nop
 800d134:	e004      	b.n	800d140 <goal_area_search+0xe18>
		break;
 800d136:	bf00      	nop
 800d138:	e002      	b.n	800d140 <goal_area_search+0xe18>
		break;
 800d13a:	bf00      	nop
 800d13c:	e000      	b.n	800d140 <goal_area_search+0xe18>
		break;
 800d13e:	bf00      	nop
	}

	//マップ更新
	Walk_Map_Update();
 800d140:	f7fe fe10 	bl	800bd64 <Walk_Map_Update>



	//向きが反転して、xもしくはyが変わる

}
 800d144:	bf00      	nop
 800d146:	37f8      	adds	r7, #248	; 0xf8
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	f3af 8000 	nop.w
 800d150:	00000000 	.word	0x00000000
 800d154:	40cd4c00 	.word	0x40cd4c00
 800d158:	2000449a 	.word	0x2000449a
 800d15c:	2000030c 	.word	0x2000030c
 800d160:	2000030d 	.word	0x2000030d
 800d164:	00000000 	.word	0x00000000

0800d168 <Adachi_judge>:

//足立法探索
void Adachi_judge(){
 800d168:	b598      	push	{r3, r4, r7, lr}
 800d16a:	af00      	add	r7, sp, #0

	/*------旋回モード選択-----*/
	mode.turn = 0;
 800d16c:	4b9a      	ldr	r3, [pc, #616]	; (800d3d8 <Adachi_judge+0x270>)
 800d16e:	2200      	movs	r2, #0
 800d170:	725a      	strb	r2, [r3, #9]
	/*----------------------------*/


	//今�?�評価値よりも前の評価値が小さければ...
	//前左右
	  switch(my_direction){
 800d172:	4b9a      	ldr	r3, [pc, #616]	; (800d3dc <Adachi_judge+0x274>)
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	2b03      	cmp	r3, #3
 800d178:	f200 83ac 	bhi.w	800d8d4 <Adachi_judge+0x76c>
 800d17c:	a201      	add	r2, pc, #4	; (adr r2, 800d184 <Adachi_judge+0x1c>)
 800d17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d182:	bf00      	nop
 800d184:	0800d195 	.word	0x0800d195
 800d188:	0800d355 	.word	0x0800d355
 800d18c:	0800d535 	.word	0x0800d535
 800d190:	0800d715 	.word	0x0800d715
	  case north:
		  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d194:	4b92      	ldr	r3, [pc, #584]	; (800d3e0 <Adachi_judge+0x278>)
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	4619      	mov	r1, r3
 800d19a:	4b92      	ldr	r3, [pc, #584]	; (800d3e4 <Adachi_judge+0x27c>)
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	4a91      	ldr	r2, [pc, #580]	; (800d3e8 <Adachi_judge+0x280>)
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	00db      	lsls	r3, r3, #3
 800d1a6:	440b      	add	r3, r1
 800d1a8:	4403      	add	r3, r0
 800d1aa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d1ae:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d12b      	bne.n	800d210 <Adachi_judge+0xa8>
 800d1b8:	4b89      	ldr	r3, [pc, #548]	; (800d3e0 <Adachi_judge+0x278>)
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	4b89      	ldr	r3, [pc, #548]	; (800d3e4 <Adachi_judge+0x27c>)
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	1c5a      	adds	r2, r3, #1
 800d1c4:	4989      	ldr	r1, [pc, #548]	; (800d3ec <Adachi_judge+0x284>)
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	00db      	lsls	r3, r3, #3
 800d1ca:	4403      	add	r3, r0
 800d1cc:	440b      	add	r3, r1
 800d1ce:	4413      	add	r3, r2
 800d1d0:	781a      	ldrb	r2, [r3, #0]
 800d1d2:	4b83      	ldr	r3, [pc, #524]	; (800d3e0 <Adachi_judge+0x278>)
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	4b82      	ldr	r3, [pc, #520]	; (800d3e4 <Adachi_judge+0x27c>)
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	461c      	mov	r4, r3
 800d1de:	4983      	ldr	r1, [pc, #524]	; (800d3ec <Adachi_judge+0x284>)
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	00db      	lsls	r3, r3, #3
 800d1e4:	4403      	add	r3, r0
 800d1e6:	440b      	add	r3, r1
 800d1e8:	4423      	add	r3, r4
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d20f      	bcs.n	800d210 <Adachi_judge+0xa8>
 800d1f0:	4b7c      	ldr	r3, [pc, #496]	; (800d3e4 <Adachi_judge+0x27c>)
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	2b07      	cmp	r3, #7
 800d1f6:	d80b      	bhi.n	800d210 <Adachi_judge+0xa8>
			  //前北
			  straight();
 800d1f8:	f7fd fe46 	bl	800ae88 <straight>
			  my_direction = north;
 800d1fc:	4b77      	ldr	r3, [pc, #476]	; (800d3dc <Adachi_judge+0x274>)
 800d1fe:	2200      	movs	r2, #0
 800d200:	701a      	strb	r2, [r3, #0]
			  y++;
 800d202:	4b78      	ldr	r3, [pc, #480]	; (800d3e4 <Adachi_judge+0x27c>)
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	3301      	adds	r3, #1
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	4b76      	ldr	r3, [pc, #472]	; (800d3e4 <Adachi_judge+0x27c>)
 800d20c:	701a      	strb	r2, [r3, #0]
 800d20e:	e0a0      	b.n	800d352 <Adachi_judge+0x1ea>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d210:	4b73      	ldr	r3, [pc, #460]	; (800d3e0 <Adachi_judge+0x278>)
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	4619      	mov	r1, r3
 800d216:	4b73      	ldr	r3, [pc, #460]	; (800d3e4 <Adachi_judge+0x27c>)
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	4618      	mov	r0, r3
 800d21c:	4a72      	ldr	r2, [pc, #456]	; (800d3e8 <Adachi_judge+0x280>)
 800d21e:	460b      	mov	r3, r1
 800d220:	00db      	lsls	r3, r3, #3
 800d222:	440b      	add	r3, r1
 800d224:	4403      	add	r3, r0
 800d226:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d22a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	2b00      	cmp	r3, #0
 800d232:	d12b      	bne.n	800d28c <Adachi_judge+0x124>
 800d234:	4b6a      	ldr	r3, [pc, #424]	; (800d3e0 <Adachi_judge+0x278>)
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	1e5a      	subs	r2, r3, #1
 800d23a:	4b6a      	ldr	r3, [pc, #424]	; (800d3e4 <Adachi_judge+0x27c>)
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	4618      	mov	r0, r3
 800d240:	496a      	ldr	r1, [pc, #424]	; (800d3ec <Adachi_judge+0x284>)
 800d242:	4613      	mov	r3, r2
 800d244:	00db      	lsls	r3, r3, #3
 800d246:	4413      	add	r3, r2
 800d248:	440b      	add	r3, r1
 800d24a:	4403      	add	r3, r0
 800d24c:	781a      	ldrb	r2, [r3, #0]
 800d24e:	4b64      	ldr	r3, [pc, #400]	; (800d3e0 <Adachi_judge+0x278>)
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	4618      	mov	r0, r3
 800d254:	4b63      	ldr	r3, [pc, #396]	; (800d3e4 <Adachi_judge+0x27c>)
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	461c      	mov	r4, r3
 800d25a:	4964      	ldr	r1, [pc, #400]	; (800d3ec <Adachi_judge+0x284>)
 800d25c:	4603      	mov	r3, r0
 800d25e:	00db      	lsls	r3, r3, #3
 800d260:	4403      	add	r3, r0
 800d262:	440b      	add	r3, r1
 800d264:	4423      	add	r3, r4
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d20f      	bcs.n	800d28c <Adachi_judge+0x124>
 800d26c:	4b5c      	ldr	r3, [pc, #368]	; (800d3e0 <Adachi_judge+0x278>)
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d00b      	beq.n	800d28c <Adachi_judge+0x124>
			  //左西
			  L_turn_select();
 800d274:	f7fe fc64 	bl	800bb40 <L_turn_select>
			  my_direction = west;
 800d278:	4b58      	ldr	r3, [pc, #352]	; (800d3dc <Adachi_judge+0x274>)
 800d27a:	2203      	movs	r2, #3
 800d27c:	701a      	strb	r2, [r3, #0]
		      x--;
 800d27e:	4b58      	ldr	r3, [pc, #352]	; (800d3e0 <Adachi_judge+0x278>)
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	3b01      	subs	r3, #1
 800d284:	b2da      	uxtb	r2, r3
 800d286:	4b56      	ldr	r3, [pc, #344]	; (800d3e0 <Adachi_judge+0x278>)
 800d288:	701a      	strb	r2, [r3, #0]
 800d28a:	e062      	b.n	800d352 <Adachi_judge+0x1ea>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800d28c:	4b54      	ldr	r3, [pc, #336]	; (800d3e0 <Adachi_judge+0x278>)
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	4619      	mov	r1, r3
 800d292:	4b54      	ldr	r3, [pc, #336]	; (800d3e4 <Adachi_judge+0x27c>)
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	4618      	mov	r0, r3
 800d298:	4a53      	ldr	r2, [pc, #332]	; (800d3e8 <Adachi_judge+0x280>)
 800d29a:	460b      	mov	r3, r1
 800d29c:	00db      	lsls	r3, r3, #3
 800d29e:	440b      	add	r3, r1
 800d2a0:	4403      	add	r3, r0
 800d2a2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d2a6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d12b      	bne.n	800d308 <Adachi_judge+0x1a0>
 800d2b0:	4b4b      	ldr	r3, [pc, #300]	; (800d3e0 <Adachi_judge+0x278>)
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	1c5a      	adds	r2, r3, #1
 800d2b6:	4b4b      	ldr	r3, [pc, #300]	; (800d3e4 <Adachi_judge+0x27c>)
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	494b      	ldr	r1, [pc, #300]	; (800d3ec <Adachi_judge+0x284>)
 800d2be:	4613      	mov	r3, r2
 800d2c0:	00db      	lsls	r3, r3, #3
 800d2c2:	4413      	add	r3, r2
 800d2c4:	440b      	add	r3, r1
 800d2c6:	4403      	add	r3, r0
 800d2c8:	781a      	ldrb	r2, [r3, #0]
 800d2ca:	4b45      	ldr	r3, [pc, #276]	; (800d3e0 <Adachi_judge+0x278>)
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	4b44      	ldr	r3, [pc, #272]	; (800d3e4 <Adachi_judge+0x27c>)
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	461c      	mov	r4, r3
 800d2d6:	4945      	ldr	r1, [pc, #276]	; (800d3ec <Adachi_judge+0x284>)
 800d2d8:	4603      	mov	r3, r0
 800d2da:	00db      	lsls	r3, r3, #3
 800d2dc:	4403      	add	r3, r0
 800d2de:	440b      	add	r3, r1
 800d2e0:	4423      	add	r3, r4
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d20f      	bcs.n	800d308 <Adachi_judge+0x1a0>
 800d2e8:	4b3d      	ldr	r3, [pc, #244]	; (800d3e0 <Adachi_judge+0x278>)
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	2b07      	cmp	r3, #7
 800d2ee:	d80b      	bhi.n	800d308 <Adachi_judge+0x1a0>
			  //右東
			  R_turn_select();
 800d2f0:	f7fe fbe2 	bl	800bab8 <R_turn_select>
	          my_direction = east;
 800d2f4:	4b39      	ldr	r3, [pc, #228]	; (800d3dc <Adachi_judge+0x274>)
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	701a      	strb	r2, [r3, #0]
	          x++;
 800d2fa:	4b39      	ldr	r3, [pc, #228]	; (800d3e0 <Adachi_judge+0x278>)
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	3301      	adds	r3, #1
 800d300:	b2da      	uxtb	r2, r3
 800d302:	4b37      	ldr	r3, [pc, #220]	; (800d3e0 <Adachi_judge+0x278>)
 800d304:	701a      	strb	r2, [r3, #0]
 800d306:	e024      	b.n	800d352 <Adachi_judge+0x1ea>
		  }
		  else {
			  //後南
	          Decelerate();
 800d308:	f7fd fd06 	bl	800ad18 <Decelerate>
	          wait(0.3);
 800d30c:	ed9f 0b30 	vldr	d0, [pc, #192]	; 800d3d0 <Adachi_judge+0x268>
 800d310:	f7fd fbd2 	bl	800aab8 <wait>

	          if(mode.execution == 1)
 800d314:	4b30      	ldr	r3, [pc, #192]	; (800d3d8 <Adachi_judge+0x270>)
 800d316:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d101      	bne.n	800d322 <Adachi_judge+0x1ba>
	        	  Motor_PWM_Stop();
 800d31e:	f7fc fe8f 	bl	800a040 <Motor_PWM_Stop>

	  	      rotate180();
 800d322:	f7fe fae7 	bl	800b8f4 <rotate180>
	  	      wait(0.3);;
 800d326:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 800d3d0 <Adachi_judge+0x268>
 800d32a:	f7fd fbc5 	bl	800aab8 <wait>
	  	      back_calib();
 800d32e:	f7fe fb5b 	bl	800b9e8 <back_calib>
	  	      wait(0.3);
 800d332:	ed9f 0b27 	vldr	d0, [pc, #156]	; 800d3d0 <Adachi_judge+0x268>
 800d336:	f7fd fbbf 	bl	800aab8 <wait>
	       	  Start_Accel();
 800d33a:	f7fd fbe5 	bl	800ab08 <Start_Accel>
	       	  my_direction = south;
 800d33e:	4b27      	ldr	r3, [pc, #156]	; (800d3dc <Adachi_judge+0x274>)
 800d340:	2202      	movs	r2, #2
 800d342:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d344:	4b27      	ldr	r3, [pc, #156]	; (800d3e4 <Adachi_judge+0x27c>)
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	3b01      	subs	r3, #1
 800d34a:	b2da      	uxtb	r2, r3
 800d34c:	4b25      	ldr	r3, [pc, #148]	; (800d3e4 <Adachi_judge+0x27c>)
 800d34e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d350:	e2c1      	b.n	800d8d6 <Adachi_judge+0x76e>
 800d352:	e2c0      	b.n	800d8d6 <Adachi_judge+0x76e>

	  case east:

		  if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800d354:	4b22      	ldr	r3, [pc, #136]	; (800d3e0 <Adachi_judge+0x278>)
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	4619      	mov	r1, r3
 800d35a:	4b22      	ldr	r3, [pc, #136]	; (800d3e4 <Adachi_judge+0x27c>)
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	4618      	mov	r0, r3
 800d360:	4a21      	ldr	r2, [pc, #132]	; (800d3e8 <Adachi_judge+0x280>)
 800d362:	460b      	mov	r3, r1
 800d364:	00db      	lsls	r3, r3, #3
 800d366:	440b      	add	r3, r1
 800d368:	4403      	add	r3, r0
 800d36a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d36e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d372:	b2db      	uxtb	r3, r3
 800d374:	2b00      	cmp	r3, #0
 800d376:	d13b      	bne.n	800d3f0 <Adachi_judge+0x288>
 800d378:	4b19      	ldr	r3, [pc, #100]	; (800d3e0 <Adachi_judge+0x278>)
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	1c5a      	adds	r2, r3, #1
 800d37e:	4b19      	ldr	r3, [pc, #100]	; (800d3e4 <Adachi_judge+0x27c>)
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	4618      	mov	r0, r3
 800d384:	4919      	ldr	r1, [pc, #100]	; (800d3ec <Adachi_judge+0x284>)
 800d386:	4613      	mov	r3, r2
 800d388:	00db      	lsls	r3, r3, #3
 800d38a:	4413      	add	r3, r2
 800d38c:	440b      	add	r3, r1
 800d38e:	4403      	add	r3, r0
 800d390:	781a      	ldrb	r2, [r3, #0]
 800d392:	4b13      	ldr	r3, [pc, #76]	; (800d3e0 <Adachi_judge+0x278>)
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	4618      	mov	r0, r3
 800d398:	4b12      	ldr	r3, [pc, #72]	; (800d3e4 <Adachi_judge+0x27c>)
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	461c      	mov	r4, r3
 800d39e:	4913      	ldr	r1, [pc, #76]	; (800d3ec <Adachi_judge+0x284>)
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	00db      	lsls	r3, r3, #3
 800d3a4:	4403      	add	r3, r0
 800d3a6:	440b      	add	r3, r1
 800d3a8:	4423      	add	r3, r4
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d21f      	bcs.n	800d3f0 <Adachi_judge+0x288>
 800d3b0:	4b0b      	ldr	r3, [pc, #44]	; (800d3e0 <Adachi_judge+0x278>)
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	2b07      	cmp	r3, #7
 800d3b6:	d81b      	bhi.n	800d3f0 <Adachi_judge+0x288>
			  //前東
			  straight();
 800d3b8:	f7fd fd66 	bl	800ae88 <straight>
	       	  my_direction = east;
 800d3bc:	4b07      	ldr	r3, [pc, #28]	; (800d3dc <Adachi_judge+0x274>)
 800d3be:	2201      	movs	r2, #1
 800d3c0:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d3c2:	4b07      	ldr	r3, [pc, #28]	; (800d3e0 <Adachi_judge+0x278>)
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	b2da      	uxtb	r2, r3
 800d3ca:	4b05      	ldr	r3, [pc, #20]	; (800d3e0 <Adachi_judge+0x278>)
 800d3cc:	701a      	strb	r2, [r3, #0]
 800d3ce:	e0b0      	b.n	800d532 <Adachi_judge+0x3ca>
 800d3d0:	33333333 	.word	0x33333333
 800d3d4:	3fd33333 	.word	0x3fd33333
 800d3d8:	20000074 	.word	0x20000074
 800d3dc:	2000449a 	.word	0x2000449a
 800d3e0:	2000030c 	.word	0x2000030c
 800d3e4:	2000030d 	.word	0x2000030d
 800d3e8:	20004f0c 	.word	0x20004f0c
 800d3ec:	20004a60 	.word	0x20004a60
		  }
		  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d3f0:	4baf      	ldr	r3, [pc, #700]	; (800d6b0 <Adachi_judge+0x548>)
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	4baf      	ldr	r3, [pc, #700]	; (800d6b4 <Adachi_judge+0x54c>)
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	4aae      	ldr	r2, [pc, #696]	; (800d6b8 <Adachi_judge+0x550>)
 800d3fe:	460b      	mov	r3, r1
 800d400:	00db      	lsls	r3, r3, #3
 800d402:	440b      	add	r3, r1
 800d404:	4403      	add	r3, r0
 800d406:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d40a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	2b00      	cmp	r3, #0
 800d412:	d12b      	bne.n	800d46c <Adachi_judge+0x304>
 800d414:	4ba6      	ldr	r3, [pc, #664]	; (800d6b0 <Adachi_judge+0x548>)
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	4618      	mov	r0, r3
 800d41a:	4ba6      	ldr	r3, [pc, #664]	; (800d6b4 <Adachi_judge+0x54c>)
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	1c5a      	adds	r2, r3, #1
 800d420:	49a6      	ldr	r1, [pc, #664]	; (800d6bc <Adachi_judge+0x554>)
 800d422:	4603      	mov	r3, r0
 800d424:	00db      	lsls	r3, r3, #3
 800d426:	4403      	add	r3, r0
 800d428:	440b      	add	r3, r1
 800d42a:	4413      	add	r3, r2
 800d42c:	781a      	ldrb	r2, [r3, #0]
 800d42e:	4ba0      	ldr	r3, [pc, #640]	; (800d6b0 <Adachi_judge+0x548>)
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	4618      	mov	r0, r3
 800d434:	4b9f      	ldr	r3, [pc, #636]	; (800d6b4 <Adachi_judge+0x54c>)
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	461c      	mov	r4, r3
 800d43a:	49a0      	ldr	r1, [pc, #640]	; (800d6bc <Adachi_judge+0x554>)
 800d43c:	4603      	mov	r3, r0
 800d43e:	00db      	lsls	r3, r3, #3
 800d440:	4403      	add	r3, r0
 800d442:	440b      	add	r3, r1
 800d444:	4423      	add	r3, r4
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d20f      	bcs.n	800d46c <Adachi_judge+0x304>
 800d44c:	4b99      	ldr	r3, [pc, #612]	; (800d6b4 <Adachi_judge+0x54c>)
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	2b07      	cmp	r3, #7
 800d452:	d80b      	bhi.n	800d46c <Adachi_judge+0x304>
			  //左�?
			  L_turn_select();
 800d454:	f7fe fb74 	bl	800bb40 <L_turn_select>
	       	  my_direction = north;
 800d458:	4b99      	ldr	r3, [pc, #612]	; (800d6c0 <Adachi_judge+0x558>)
 800d45a:	2200      	movs	r2, #0
 800d45c:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d45e:	4b95      	ldr	r3, [pc, #596]	; (800d6b4 <Adachi_judge+0x54c>)
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	3301      	adds	r3, #1
 800d464:	b2da      	uxtb	r2, r3
 800d466:	4b93      	ldr	r3, [pc, #588]	; (800d6b4 <Adachi_judge+0x54c>)
 800d468:	701a      	strb	r2, [r3, #0]
 800d46a:	e062      	b.n	800d532 <Adachi_judge+0x3ca>
		  }
		  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d46c:	4b90      	ldr	r3, [pc, #576]	; (800d6b0 <Adachi_judge+0x548>)
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	4619      	mov	r1, r3
 800d472:	4b90      	ldr	r3, [pc, #576]	; (800d6b4 <Adachi_judge+0x54c>)
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	4618      	mov	r0, r3
 800d478:	4a8f      	ldr	r2, [pc, #572]	; (800d6b8 <Adachi_judge+0x550>)
 800d47a:	460b      	mov	r3, r1
 800d47c:	00db      	lsls	r3, r3, #3
 800d47e:	440b      	add	r3, r1
 800d480:	4403      	add	r3, r0
 800d482:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d486:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d12b      	bne.n	800d4e8 <Adachi_judge+0x380>
 800d490:	4b87      	ldr	r3, [pc, #540]	; (800d6b0 <Adachi_judge+0x548>)
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	4618      	mov	r0, r3
 800d496:	4b87      	ldr	r3, [pc, #540]	; (800d6b4 <Adachi_judge+0x54c>)
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	1e5a      	subs	r2, r3, #1
 800d49c:	4987      	ldr	r1, [pc, #540]	; (800d6bc <Adachi_judge+0x554>)
 800d49e:	4603      	mov	r3, r0
 800d4a0:	00db      	lsls	r3, r3, #3
 800d4a2:	4403      	add	r3, r0
 800d4a4:	440b      	add	r3, r1
 800d4a6:	4413      	add	r3, r2
 800d4a8:	781a      	ldrb	r2, [r3, #0]
 800d4aa:	4b81      	ldr	r3, [pc, #516]	; (800d6b0 <Adachi_judge+0x548>)
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	4b80      	ldr	r3, [pc, #512]	; (800d6b4 <Adachi_judge+0x54c>)
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	461c      	mov	r4, r3
 800d4b6:	4981      	ldr	r1, [pc, #516]	; (800d6bc <Adachi_judge+0x554>)
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	00db      	lsls	r3, r3, #3
 800d4bc:	4403      	add	r3, r0
 800d4be:	440b      	add	r3, r1
 800d4c0:	4423      	add	r3, r4
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d20f      	bcs.n	800d4e8 <Adachi_judge+0x380>
 800d4c8:	4b7a      	ldr	r3, [pc, #488]	; (800d6b4 <Adachi_judge+0x54c>)
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00b      	beq.n	800d4e8 <Adachi_judge+0x380>
			  //右�?
			  R_turn_select();
 800d4d0:	f7fe faf2 	bl	800bab8 <R_turn_select>
	       	  my_direction = south;
 800d4d4:	4b7a      	ldr	r3, [pc, #488]	; (800d6c0 <Adachi_judge+0x558>)
 800d4d6:	2202      	movs	r2, #2
 800d4d8:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d4da:	4b76      	ldr	r3, [pc, #472]	; (800d6b4 <Adachi_judge+0x54c>)
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	b2da      	uxtb	r2, r3
 800d4e2:	4b74      	ldr	r3, [pc, #464]	; (800d6b4 <Adachi_judge+0x54c>)
 800d4e4:	701a      	strb	r2, [r3, #0]
 800d4e6:	e024      	b.n	800d532 <Adachi_judge+0x3ca>
		  }
		  else {
			  //後西
	          Decelerate();
 800d4e8:	f7fd fc16 	bl	800ad18 <Decelerate>
	          wait(0.3);
 800d4ec:	ed9f 0b6e 	vldr	d0, [pc, #440]	; 800d6a8 <Adachi_judge+0x540>
 800d4f0:	f7fd fae2 	bl	800aab8 <wait>

	          if(mode.execution == 1)
 800d4f4:	4b73      	ldr	r3, [pc, #460]	; (800d6c4 <Adachi_judge+0x55c>)
 800d4f6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d101      	bne.n	800d502 <Adachi_judge+0x39a>
	        	  Motor_PWM_Stop();
 800d4fe:	f7fc fd9f 	bl	800a040 <Motor_PWM_Stop>

	  	      rotate180();
 800d502:	f7fe f9f7 	bl	800b8f4 <rotate180>
	  	      wait(0.3);
 800d506:	ed9f 0b68 	vldr	d0, [pc, #416]	; 800d6a8 <Adachi_judge+0x540>
 800d50a:	f7fd fad5 	bl	800aab8 <wait>
	  	      back_calib();
 800d50e:	f7fe fa6b 	bl	800b9e8 <back_calib>
	  	      wait(0.3);
 800d512:	ed9f 0b65 	vldr	d0, [pc, #404]	; 800d6a8 <Adachi_judge+0x540>
 800d516:	f7fd facf 	bl	800aab8 <wait>
	       	  Start_Accel();
 800d51a:	f7fd faf5 	bl	800ab08 <Start_Accel>

	       	  my_direction = west;
 800d51e:	4b68      	ldr	r3, [pc, #416]	; (800d6c0 <Adachi_judge+0x558>)
 800d520:	2203      	movs	r2, #3
 800d522:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d524:	4b62      	ldr	r3, [pc, #392]	; (800d6b0 <Adachi_judge+0x548>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	3b01      	subs	r3, #1
 800d52a:	b2da      	uxtb	r2, r3
 800d52c:	4b60      	ldr	r3, [pc, #384]	; (800d6b0 <Adachi_judge+0x548>)
 800d52e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d530:	e1d1      	b.n	800d8d6 <Adachi_judge+0x76e>
 800d532:	e1d0      	b.n	800d8d6 <Adachi_judge+0x76e>

	  case south:

		  if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d534:	4b5e      	ldr	r3, [pc, #376]	; (800d6b0 <Adachi_judge+0x548>)
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	4619      	mov	r1, r3
 800d53a:	4b5e      	ldr	r3, [pc, #376]	; (800d6b4 <Adachi_judge+0x54c>)
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	4618      	mov	r0, r3
 800d540:	4a5d      	ldr	r2, [pc, #372]	; (800d6b8 <Adachi_judge+0x550>)
 800d542:	460b      	mov	r3, r1
 800d544:	00db      	lsls	r3, r3, #3
 800d546:	440b      	add	r3, r1
 800d548:	4403      	add	r3, r0
 800d54a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d54e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d552:	b2db      	uxtb	r3, r3
 800d554:	2b00      	cmp	r3, #0
 800d556:	d12b      	bne.n	800d5b0 <Adachi_judge+0x448>
 800d558:	4b55      	ldr	r3, [pc, #340]	; (800d6b0 <Adachi_judge+0x548>)
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	4618      	mov	r0, r3
 800d55e:	4b55      	ldr	r3, [pc, #340]	; (800d6b4 <Adachi_judge+0x54c>)
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	1e5a      	subs	r2, r3, #1
 800d564:	4955      	ldr	r1, [pc, #340]	; (800d6bc <Adachi_judge+0x554>)
 800d566:	4603      	mov	r3, r0
 800d568:	00db      	lsls	r3, r3, #3
 800d56a:	4403      	add	r3, r0
 800d56c:	440b      	add	r3, r1
 800d56e:	4413      	add	r3, r2
 800d570:	781a      	ldrb	r2, [r3, #0]
 800d572:	4b4f      	ldr	r3, [pc, #316]	; (800d6b0 <Adachi_judge+0x548>)
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	4618      	mov	r0, r3
 800d578:	4b4e      	ldr	r3, [pc, #312]	; (800d6b4 <Adachi_judge+0x54c>)
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	461c      	mov	r4, r3
 800d57e:	494f      	ldr	r1, [pc, #316]	; (800d6bc <Adachi_judge+0x554>)
 800d580:	4603      	mov	r3, r0
 800d582:	00db      	lsls	r3, r3, #3
 800d584:	4403      	add	r3, r0
 800d586:	440b      	add	r3, r1
 800d588:	4423      	add	r3, r4
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d20f      	bcs.n	800d5b0 <Adachi_judge+0x448>
 800d590:	4b48      	ldr	r3, [pc, #288]	; (800d6b4 <Adachi_judge+0x54c>)
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00b      	beq.n	800d5b0 <Adachi_judge+0x448>
			  //前南
			  straight();
 800d598:	f7fd fc76 	bl	800ae88 <straight>
	       	  my_direction = south;
 800d59c:	4b48      	ldr	r3, [pc, #288]	; (800d6c0 <Adachi_judge+0x558>)
 800d59e:	2202      	movs	r2, #2
 800d5a0:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d5a2:	4b44      	ldr	r3, [pc, #272]	; (800d6b4 <Adachi_judge+0x54c>)
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	4b42      	ldr	r3, [pc, #264]	; (800d6b4 <Adachi_judge+0x54c>)
 800d5ac:	701a      	strb	r2, [r3, #0]
 800d5ae:	e0b0      	b.n	800d712 <Adachi_judge+0x5aa>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800d5b0:	4b3f      	ldr	r3, [pc, #252]	; (800d6b0 <Adachi_judge+0x548>)
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	4b3f      	ldr	r3, [pc, #252]	; (800d6b4 <Adachi_judge+0x54c>)
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	4a3e      	ldr	r2, [pc, #248]	; (800d6b8 <Adachi_judge+0x550>)
 800d5be:	460b      	mov	r3, r1
 800d5c0:	00db      	lsls	r3, r3, #3
 800d5c2:	440b      	add	r3, r1
 800d5c4:	4403      	add	r3, r0
 800d5c6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d5ca:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d12b      	bne.n	800d62c <Adachi_judge+0x4c4>
 800d5d4:	4b36      	ldr	r3, [pc, #216]	; (800d6b0 <Adachi_judge+0x548>)
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	1c5a      	adds	r2, r3, #1
 800d5da:	4b36      	ldr	r3, [pc, #216]	; (800d6b4 <Adachi_judge+0x54c>)
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	4618      	mov	r0, r3
 800d5e0:	4936      	ldr	r1, [pc, #216]	; (800d6bc <Adachi_judge+0x554>)
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	00db      	lsls	r3, r3, #3
 800d5e6:	4413      	add	r3, r2
 800d5e8:	440b      	add	r3, r1
 800d5ea:	4403      	add	r3, r0
 800d5ec:	781a      	ldrb	r2, [r3, #0]
 800d5ee:	4b30      	ldr	r3, [pc, #192]	; (800d6b0 <Adachi_judge+0x548>)
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	4b2f      	ldr	r3, [pc, #188]	; (800d6b4 <Adachi_judge+0x54c>)
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	461c      	mov	r4, r3
 800d5fa:	4930      	ldr	r1, [pc, #192]	; (800d6bc <Adachi_judge+0x554>)
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	00db      	lsls	r3, r3, #3
 800d600:	4403      	add	r3, r0
 800d602:	440b      	add	r3, r1
 800d604:	4423      	add	r3, r4
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	429a      	cmp	r2, r3
 800d60a:	d20f      	bcs.n	800d62c <Adachi_judge+0x4c4>
 800d60c:	4b28      	ldr	r3, [pc, #160]	; (800d6b0 <Adachi_judge+0x548>)
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	2b07      	cmp	r3, #7
 800d612:	d80b      	bhi.n	800d62c <Adachi_judge+0x4c4>
			  //左東
			  L_turn_select();
 800d614:	f7fe fa94 	bl	800bb40 <L_turn_select>
	       	  my_direction = east;
 800d618:	4b29      	ldr	r3, [pc, #164]	; (800d6c0 <Adachi_judge+0x558>)
 800d61a:	2201      	movs	r2, #1
 800d61c:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d61e:	4b24      	ldr	r3, [pc, #144]	; (800d6b0 <Adachi_judge+0x548>)
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	3301      	adds	r3, #1
 800d624:	b2da      	uxtb	r2, r3
 800d626:	4b22      	ldr	r3, [pc, #136]	; (800d6b0 <Adachi_judge+0x548>)
 800d628:	701a      	strb	r2, [r3, #0]
 800d62a:	e072      	b.n	800d712 <Adachi_judge+0x5aa>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d62c:	4b20      	ldr	r3, [pc, #128]	; (800d6b0 <Adachi_judge+0x548>)
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	4619      	mov	r1, r3
 800d632:	4b20      	ldr	r3, [pc, #128]	; (800d6b4 <Adachi_judge+0x54c>)
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	4618      	mov	r0, r3
 800d638:	4a1f      	ldr	r2, [pc, #124]	; (800d6b8 <Adachi_judge+0x550>)
 800d63a:	460b      	mov	r3, r1
 800d63c:	00db      	lsls	r3, r3, #3
 800d63e:	440b      	add	r3, r1
 800d640:	4403      	add	r3, r0
 800d642:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d646:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d13b      	bne.n	800d6c8 <Adachi_judge+0x560>
 800d650:	4b17      	ldr	r3, [pc, #92]	; (800d6b0 <Adachi_judge+0x548>)
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	1e5a      	subs	r2, r3, #1
 800d656:	4b17      	ldr	r3, [pc, #92]	; (800d6b4 <Adachi_judge+0x54c>)
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	4618      	mov	r0, r3
 800d65c:	4917      	ldr	r1, [pc, #92]	; (800d6bc <Adachi_judge+0x554>)
 800d65e:	4613      	mov	r3, r2
 800d660:	00db      	lsls	r3, r3, #3
 800d662:	4413      	add	r3, r2
 800d664:	440b      	add	r3, r1
 800d666:	4403      	add	r3, r0
 800d668:	781a      	ldrb	r2, [r3, #0]
 800d66a:	4b11      	ldr	r3, [pc, #68]	; (800d6b0 <Adachi_judge+0x548>)
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	4618      	mov	r0, r3
 800d670:	4b10      	ldr	r3, [pc, #64]	; (800d6b4 <Adachi_judge+0x54c>)
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	461c      	mov	r4, r3
 800d676:	4911      	ldr	r1, [pc, #68]	; (800d6bc <Adachi_judge+0x554>)
 800d678:	4603      	mov	r3, r0
 800d67a:	00db      	lsls	r3, r3, #3
 800d67c:	4403      	add	r3, r0
 800d67e:	440b      	add	r3, r1
 800d680:	4423      	add	r3, r4
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	429a      	cmp	r2, r3
 800d686:	d21f      	bcs.n	800d6c8 <Adachi_judge+0x560>
 800d688:	4b09      	ldr	r3, [pc, #36]	; (800d6b0 <Adachi_judge+0x548>)
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d01b      	beq.n	800d6c8 <Adachi_judge+0x560>
			  //右西
			  R_turn_select();
 800d690:	f7fe fa12 	bl	800bab8 <R_turn_select>
	       	  my_direction = west;
 800d694:	4b0a      	ldr	r3, [pc, #40]	; (800d6c0 <Adachi_judge+0x558>)
 800d696:	2203      	movs	r2, #3
 800d698:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d69a:	4b05      	ldr	r3, [pc, #20]	; (800d6b0 <Adachi_judge+0x548>)
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	b2da      	uxtb	r2, r3
 800d6a2:	4b03      	ldr	r3, [pc, #12]	; (800d6b0 <Adachi_judge+0x548>)
 800d6a4:	701a      	strb	r2, [r3, #0]
 800d6a6:	e034      	b.n	800d712 <Adachi_judge+0x5aa>
 800d6a8:	33333333 	.word	0x33333333
 800d6ac:	3fd33333 	.word	0x3fd33333
 800d6b0:	2000030c 	.word	0x2000030c
 800d6b4:	2000030d 	.word	0x2000030d
 800d6b8:	20004f0c 	.word	0x20004f0c
 800d6bc:	20004a60 	.word	0x20004a60
 800d6c0:	2000449a 	.word	0x2000449a
 800d6c4:	20000074 	.word	0x20000074
		  }
		  else {
			  //後北
	          Decelerate();
 800d6c8:	f7fd fb26 	bl	800ad18 <Decelerate>
	          wait(0.3);;
 800d6cc:	ed9f 0b84 	vldr	d0, [pc, #528]	; 800d8e0 <Adachi_judge+0x778>
 800d6d0:	f7fd f9f2 	bl	800aab8 <wait>

	          if(mode.execution == 1)
 800d6d4:	4b84      	ldr	r3, [pc, #528]	; (800d8e8 <Adachi_judge+0x780>)
 800d6d6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d101      	bne.n	800d6e2 <Adachi_judge+0x57a>
	        	  Motor_PWM_Stop();
 800d6de:	f7fc fcaf 	bl	800a040 <Motor_PWM_Stop>

	  	      rotate180();
 800d6e2:	f7fe f907 	bl	800b8f4 <rotate180>
	  	      wait(0.3);;
 800d6e6:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 800d8e0 <Adachi_judge+0x778>
 800d6ea:	f7fd f9e5 	bl	800aab8 <wait>
	  	      back_calib();
 800d6ee:	f7fe f97b 	bl	800b9e8 <back_calib>
	  	      wait(0.3);
 800d6f2:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 800d8e0 <Adachi_judge+0x778>
 800d6f6:	f7fd f9df 	bl	800aab8 <wait>
	       	  Start_Accel();
 800d6fa:	f7fd fa05 	bl	800ab08 <Start_Accel>

	       	  my_direction = north;
 800d6fe:	4b7b      	ldr	r3, [pc, #492]	; (800d8ec <Adachi_judge+0x784>)
 800d700:	2200      	movs	r2, #0
 800d702:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d704:	4b7a      	ldr	r3, [pc, #488]	; (800d8f0 <Adachi_judge+0x788>)
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	3301      	adds	r3, #1
 800d70a:	b2da      	uxtb	r2, r3
 800d70c:	4b78      	ldr	r3, [pc, #480]	; (800d8f0 <Adachi_judge+0x788>)
 800d70e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d710:	e0e1      	b.n	800d8d6 <Adachi_judge+0x76e>
 800d712:	e0e0      	b.n	800d8d6 <Adachi_judge+0x76e>

	  case west:

		  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d714:	4b77      	ldr	r3, [pc, #476]	; (800d8f4 <Adachi_judge+0x78c>)
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	4619      	mov	r1, r3
 800d71a:	4b75      	ldr	r3, [pc, #468]	; (800d8f0 <Adachi_judge+0x788>)
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	4618      	mov	r0, r3
 800d720:	4a75      	ldr	r2, [pc, #468]	; (800d8f8 <Adachi_judge+0x790>)
 800d722:	460b      	mov	r3, r1
 800d724:	00db      	lsls	r3, r3, #3
 800d726:	440b      	add	r3, r1
 800d728:	4403      	add	r3, r0
 800d72a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d72e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d732:	b2db      	uxtb	r3, r3
 800d734:	2b00      	cmp	r3, #0
 800d736:	d12b      	bne.n	800d790 <Adachi_judge+0x628>
 800d738:	4b6e      	ldr	r3, [pc, #440]	; (800d8f4 <Adachi_judge+0x78c>)
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	1e5a      	subs	r2, r3, #1
 800d73e:	4b6c      	ldr	r3, [pc, #432]	; (800d8f0 <Adachi_judge+0x788>)
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	4618      	mov	r0, r3
 800d744:	496d      	ldr	r1, [pc, #436]	; (800d8fc <Adachi_judge+0x794>)
 800d746:	4613      	mov	r3, r2
 800d748:	00db      	lsls	r3, r3, #3
 800d74a:	4413      	add	r3, r2
 800d74c:	440b      	add	r3, r1
 800d74e:	4403      	add	r3, r0
 800d750:	781a      	ldrb	r2, [r3, #0]
 800d752:	4b68      	ldr	r3, [pc, #416]	; (800d8f4 <Adachi_judge+0x78c>)
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	4618      	mov	r0, r3
 800d758:	4b65      	ldr	r3, [pc, #404]	; (800d8f0 <Adachi_judge+0x788>)
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	461c      	mov	r4, r3
 800d75e:	4967      	ldr	r1, [pc, #412]	; (800d8fc <Adachi_judge+0x794>)
 800d760:	4603      	mov	r3, r0
 800d762:	00db      	lsls	r3, r3, #3
 800d764:	4403      	add	r3, r0
 800d766:	440b      	add	r3, r1
 800d768:	4423      	add	r3, r4
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d20f      	bcs.n	800d790 <Adachi_judge+0x628>
 800d770:	4b60      	ldr	r3, [pc, #384]	; (800d8f4 <Adachi_judge+0x78c>)
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d00b      	beq.n	800d790 <Adachi_judge+0x628>
			  //前西
			  straight();
 800d778:	f7fd fb86 	bl	800ae88 <straight>
	       	  my_direction = west;
 800d77c:	4b5b      	ldr	r3, [pc, #364]	; (800d8ec <Adachi_judge+0x784>)
 800d77e:	2203      	movs	r2, #3
 800d780:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d782:	4b5c      	ldr	r3, [pc, #368]	; (800d8f4 <Adachi_judge+0x78c>)
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	3b01      	subs	r3, #1
 800d788:	b2da      	uxtb	r2, r3
 800d78a:	4b5a      	ldr	r3, [pc, #360]	; (800d8f4 <Adachi_judge+0x78c>)
 800d78c:	701a      	strb	r2, [r3, #0]
 800d78e:	e0a0      	b.n	800d8d2 <Adachi_judge+0x76a>
		  }
		  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d790:	4b58      	ldr	r3, [pc, #352]	; (800d8f4 <Adachi_judge+0x78c>)
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	4619      	mov	r1, r3
 800d796:	4b56      	ldr	r3, [pc, #344]	; (800d8f0 <Adachi_judge+0x788>)
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	4618      	mov	r0, r3
 800d79c:	4a56      	ldr	r2, [pc, #344]	; (800d8f8 <Adachi_judge+0x790>)
 800d79e:	460b      	mov	r3, r1
 800d7a0:	00db      	lsls	r3, r3, #3
 800d7a2:	440b      	add	r3, r1
 800d7a4:	4403      	add	r3, r0
 800d7a6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d7aa:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d12b      	bne.n	800d80c <Adachi_judge+0x6a4>
 800d7b4:	4b4f      	ldr	r3, [pc, #316]	; (800d8f4 <Adachi_judge+0x78c>)
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	4b4d      	ldr	r3, [pc, #308]	; (800d8f0 <Adachi_judge+0x788>)
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	1e5a      	subs	r2, r3, #1
 800d7c0:	494e      	ldr	r1, [pc, #312]	; (800d8fc <Adachi_judge+0x794>)
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	00db      	lsls	r3, r3, #3
 800d7c6:	4403      	add	r3, r0
 800d7c8:	440b      	add	r3, r1
 800d7ca:	4413      	add	r3, r2
 800d7cc:	781a      	ldrb	r2, [r3, #0]
 800d7ce:	4b49      	ldr	r3, [pc, #292]	; (800d8f4 <Adachi_judge+0x78c>)
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	4b46      	ldr	r3, [pc, #280]	; (800d8f0 <Adachi_judge+0x788>)
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	461c      	mov	r4, r3
 800d7da:	4948      	ldr	r1, [pc, #288]	; (800d8fc <Adachi_judge+0x794>)
 800d7dc:	4603      	mov	r3, r0
 800d7de:	00db      	lsls	r3, r3, #3
 800d7e0:	4403      	add	r3, r0
 800d7e2:	440b      	add	r3, r1
 800d7e4:	4423      	add	r3, r4
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d20f      	bcs.n	800d80c <Adachi_judge+0x6a4>
 800d7ec:	4b40      	ldr	r3, [pc, #256]	; (800d8f0 <Adachi_judge+0x788>)
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d00b      	beq.n	800d80c <Adachi_judge+0x6a4>
			  //左�?
			  L_turn_select();
 800d7f4:	f7fe f9a4 	bl	800bb40 <L_turn_select>
	       	  my_direction = south;
 800d7f8:	4b3c      	ldr	r3, [pc, #240]	; (800d8ec <Adachi_judge+0x784>)
 800d7fa:	2202      	movs	r2, #2
 800d7fc:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d7fe:	4b3c      	ldr	r3, [pc, #240]	; (800d8f0 <Adachi_judge+0x788>)
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	3b01      	subs	r3, #1
 800d804:	b2da      	uxtb	r2, r3
 800d806:	4b3a      	ldr	r3, [pc, #232]	; (800d8f0 <Adachi_judge+0x788>)
 800d808:	701a      	strb	r2, [r3, #0]
 800d80a:	e062      	b.n	800d8d2 <Adachi_judge+0x76a>
		  }
		  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d80c:	4b39      	ldr	r3, [pc, #228]	; (800d8f4 <Adachi_judge+0x78c>)
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	4619      	mov	r1, r3
 800d812:	4b37      	ldr	r3, [pc, #220]	; (800d8f0 <Adachi_judge+0x788>)
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	4618      	mov	r0, r3
 800d818:	4a37      	ldr	r2, [pc, #220]	; (800d8f8 <Adachi_judge+0x790>)
 800d81a:	460b      	mov	r3, r1
 800d81c:	00db      	lsls	r3, r3, #3
 800d81e:	440b      	add	r3, r1
 800d820:	4403      	add	r3, r0
 800d822:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d826:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d82a:	b2db      	uxtb	r3, r3
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d12b      	bne.n	800d888 <Adachi_judge+0x720>
 800d830:	4b30      	ldr	r3, [pc, #192]	; (800d8f4 <Adachi_judge+0x78c>)
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	4618      	mov	r0, r3
 800d836:	4b2e      	ldr	r3, [pc, #184]	; (800d8f0 <Adachi_judge+0x788>)
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	1c5a      	adds	r2, r3, #1
 800d83c:	492f      	ldr	r1, [pc, #188]	; (800d8fc <Adachi_judge+0x794>)
 800d83e:	4603      	mov	r3, r0
 800d840:	00db      	lsls	r3, r3, #3
 800d842:	4403      	add	r3, r0
 800d844:	440b      	add	r3, r1
 800d846:	4413      	add	r3, r2
 800d848:	781a      	ldrb	r2, [r3, #0]
 800d84a:	4b2a      	ldr	r3, [pc, #168]	; (800d8f4 <Adachi_judge+0x78c>)
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	4618      	mov	r0, r3
 800d850:	4b27      	ldr	r3, [pc, #156]	; (800d8f0 <Adachi_judge+0x788>)
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	461c      	mov	r4, r3
 800d856:	4929      	ldr	r1, [pc, #164]	; (800d8fc <Adachi_judge+0x794>)
 800d858:	4603      	mov	r3, r0
 800d85a:	00db      	lsls	r3, r3, #3
 800d85c:	4403      	add	r3, r0
 800d85e:	440b      	add	r3, r1
 800d860:	4423      	add	r3, r4
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	429a      	cmp	r2, r3
 800d866:	d20f      	bcs.n	800d888 <Adachi_judge+0x720>
 800d868:	4b21      	ldr	r3, [pc, #132]	; (800d8f0 <Adachi_judge+0x788>)
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	2b07      	cmp	r3, #7
 800d86e:	d80b      	bhi.n	800d888 <Adachi_judge+0x720>
			  //右�?
			  R_turn_select();
 800d870:	f7fe f922 	bl	800bab8 <R_turn_select>
	       	  my_direction = north;
 800d874:	4b1d      	ldr	r3, [pc, #116]	; (800d8ec <Adachi_judge+0x784>)
 800d876:	2200      	movs	r2, #0
 800d878:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d87a:	4b1d      	ldr	r3, [pc, #116]	; (800d8f0 <Adachi_judge+0x788>)
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	3301      	adds	r3, #1
 800d880:	b2da      	uxtb	r2, r3
 800d882:	4b1b      	ldr	r3, [pc, #108]	; (800d8f0 <Adachi_judge+0x788>)
 800d884:	701a      	strb	r2, [r3, #0]
 800d886:	e024      	b.n	800d8d2 <Adachi_judge+0x76a>
		  }
		  else {
			  //後東
	          Decelerate();
 800d888:	f7fd fa46 	bl	800ad18 <Decelerate>
	          wait(0.3);;
 800d88c:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800d8e0 <Adachi_judge+0x778>
 800d890:	f7fd f912 	bl	800aab8 <wait>

	          if(mode.execution == 1)
 800d894:	4b14      	ldr	r3, [pc, #80]	; (800d8e8 <Adachi_judge+0x780>)
 800d896:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d89a:	2b01      	cmp	r3, #1
 800d89c:	d101      	bne.n	800d8a2 <Adachi_judge+0x73a>
	        	  Motor_PWM_Stop();
 800d89e:	f7fc fbcf 	bl	800a040 <Motor_PWM_Stop>

	  	      rotate180();
 800d8a2:	f7fe f827 	bl	800b8f4 <rotate180>
	  	      wait(0.3);;
 800d8a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d8e0 <Adachi_judge+0x778>
 800d8aa:	f7fd f905 	bl	800aab8 <wait>
	  	      back_calib();
 800d8ae:	f7fe f89b 	bl	800b9e8 <back_calib>
	  	      wait(0.3);
 800d8b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800d8e0 <Adachi_judge+0x778>
 800d8b6:	f7fd f8ff 	bl	800aab8 <wait>
	       	  Start_Accel();
 800d8ba:	f7fd f925 	bl	800ab08 <Start_Accel>

	       	  my_direction = east;
 800d8be:	4b0b      	ldr	r3, [pc, #44]	; (800d8ec <Adachi_judge+0x784>)
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d8c4:	4b0b      	ldr	r3, [pc, #44]	; (800d8f4 <Adachi_judge+0x78c>)
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	b2da      	uxtb	r2, r3
 800d8cc:	4b09      	ldr	r3, [pc, #36]	; (800d8f4 <Adachi_judge+0x78c>)
 800d8ce:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d8d0:	e001      	b.n	800d8d6 <Adachi_judge+0x76e>
 800d8d2:	e000      	b.n	800d8d6 <Adachi_judge+0x76e>

	  default:
		  break;
 800d8d4:	bf00      	nop
	  }//swtich end
}
 800d8d6:	bf00      	nop
 800d8d8:	bd98      	pop	{r3, r4, r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	f3af 8000 	nop.w
 800d8e0:	33333333 	.word	0x33333333
 800d8e4:	3fd33333 	.word	0x3fd33333
 800d8e8:	20000074 	.word	0x20000074
 800d8ec:	2000449a 	.word	0x2000449a
 800d8f0:	2000030d 	.word	0x2000030d
 800d8f4:	2000030c 	.word	0x2000030c
 800d8f8:	20004f0c 	.word	0x20004f0c
 800d8fc:	20004a60 	.word	0x20004a60

0800d900 <Adachi_search>:

	  default:
		  break;
	  }//swtich end
}
void Adachi_search(){
 800d900:	b580      	push	{r7, lr}
 800d902:	af00      	add	r7, sp, #0
	//back_calib();
	/*ここは書籍から引用*/

	//マップ�?�初期�?
	map_init();
 800d904:	f7fc f8c6 	bl	8009a94 <map_init>
	//座標�?�初期�?
	x = y = 0;
 800d908:	4b2e      	ldr	r3, [pc, #184]	; (800d9c4 <Adachi_search+0xc4>)
 800d90a:	2200      	movs	r2, #0
 800d90c:	701a      	strb	r2, [r3, #0]
 800d90e:	4b2d      	ldr	r3, [pc, #180]	; (800d9c4 <Adachi_search+0xc4>)
 800d910:	781a      	ldrb	r2, [r3, #0]
 800d912:	4b2d      	ldr	r3, [pc, #180]	; (800d9c8 <Adachi_search+0xc8>)
 800d914:	701a      	strb	r2, [r3, #0]
	//方向�?�初期�?
	my_direction=north;
 800d916:	4b2d      	ldr	r3, [pc, #180]	; (800d9cc <Adachi_search+0xcc>)
 800d918:	2200      	movs	r2, #0
 800d91a:	701a      	strb	r2, [r3, #0]

	/*ここまで*/

	//壁情報の初期�?
	wall_set();
 800d91c:	f7fe fbc0 	bl	800c0a0 <wall_set>

	//開始位置の後ろはWALL
	//左右はwall_set()でセ�?�?
	wall[x][y].south = WALL;
 800d920:	4b29      	ldr	r3, [pc, #164]	; (800d9c8 <Adachi_search+0xc8>)
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	461a      	mov	r2, r3
 800d926:	4b27      	ldr	r3, [pc, #156]	; (800d9c4 <Adachi_search+0xc4>)
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	4618      	mov	r0, r3
 800d92c:	4928      	ldr	r1, [pc, #160]	; (800d9d0 <Adachi_search+0xd0>)
 800d92e:	4613      	mov	r3, r2
 800d930:	00db      	lsls	r3, r3, #3
 800d932:	4413      	add	r3, r2
 800d934:	181a      	adds	r2, r3, r0
 800d936:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800d93a:	2001      	movs	r0, #1
 800d93c:	f360 1305 	bfi	r3, r0, #4, #2
 800d940:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	//歩数マップ�?�更新(ここでは初期�?)
	Walk_Map_Update();
 800d944:	f7fe fa0e 	bl	800bd64 <Walk_Map_Update>

	//�?初�?�直進
	Start_Accel();
 800d948:	f7fd f8de 	bl	800ab08 <Start_Accel>

	x = 0;
 800d94c:	4b1e      	ldr	r3, [pc, #120]	; (800d9c8 <Adachi_search+0xc8>)
 800d94e:	2200      	movs	r2, #0
 800d950:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800d952:	4b1c      	ldr	r3, [pc, #112]	; (800d9c4 <Adachi_search+0xc4>)
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	3301      	adds	r3, #1
 800d958:	b2da      	uxtb	r2, r3
 800d95a:	4b1a      	ldr	r3, [pc, #104]	; (800d9c4 <Adachi_search+0xc4>)
 800d95c:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800d95e:	e005      	b.n	800d96c <Adachi_search+0x6c>
		//壁更新
		wall_set();
 800d960:	f7fe fb9e 	bl	800c0a0 <wall_set>

		//マップ更新
		Walk_Map_Update();
 800d964:	f7fe f9fe 	bl	800bd64 <Walk_Map_Update>

		//次の動きを判定し動く
		Adachi_judge();
 800d968:	f7ff fbfe 	bl	800d168 <Adachi_judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800d96c:	4b16      	ldr	r3, [pc, #88]	; (800d9c8 <Adachi_search+0xc8>)
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	2b06      	cmp	r3, #6
 800d972:	d9f5      	bls.n	800d960 <Adachi_search+0x60>
 800d974:	4b14      	ldr	r3, [pc, #80]	; (800d9c8 <Adachi_search+0xc8>)
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	2b07      	cmp	r3, #7
 800d97a:	d8f1      	bhi.n	800d960 <Adachi_search+0x60>
 800d97c:	4b11      	ldr	r3, [pc, #68]	; (800d9c4 <Adachi_search+0xc4>)
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	2b06      	cmp	r3, #6
 800d982:	d9ed      	bls.n	800d960 <Adachi_search+0x60>
 800d984:	4b0f      	ldr	r3, [pc, #60]	; (800d9c4 <Adachi_search+0xc4>)
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	2b07      	cmp	r3, #7
 800d98a:	d8e9      	bhi.n	800d960 <Adachi_search+0x60>
	}

	//after-gall#2
	      Decelerate();
 800d98c:	f7fd f9c4 	bl	800ad18 <Decelerate>
	      wall_set();
 800d990:	f7fe fb86 	bl	800c0a0 <wall_set>
	      Walk_Map_Update();
 800d994:	f7fe f9e6 	bl	800bd64 <Walk_Map_Update>
	      mode.LED = 7;
 800d998:	4b0e      	ldr	r3, [pc, #56]	; (800d9d4 <Adachi_search+0xd4>)
 800d99a:	2207      	movs	r2, #7
 800d99c:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800d99e:	f7fc fdc5 	bl	800a52c <LED_Change>
	      HAL_Delay(1000);
 800d9a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d9a6:	f003 f9bb 	bl	8010d20 <HAL_Delay>

//	      mapcopy();
//	      Flash_store();
	      mode.LED = 0;
 800d9aa:	4b0a      	ldr	r3, [pc, #40]	; (800d9d4 <Adachi_search+0xd4>)
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800d9b0:	f7fc fdbc 	bl	800a52c <LED_Change>
	      mapcopy();
 800d9b4:	f7fc f8f0 	bl	8009b98 <mapcopy>
	      Flash_store();
 800d9b8:	f7fc fa7e 	bl	8009eb8 <Flash_store>
//	      Flash_store();
	      //mode.execution = 3;
	      while(1)
	      {

	    	  Motor_PWM_Stop();
 800d9bc:	f7fc fb40 	bl	800a040 <Motor_PWM_Stop>
 800d9c0:	e7fc      	b.n	800d9bc <Adachi_search+0xbc>
 800d9c2:	bf00      	nop
 800d9c4:	2000030d 	.word	0x2000030d
 800d9c8:	2000030c 	.word	0x2000030c
 800d9cc:	2000449a 	.word	0x2000449a
 800d9d0:	20004f0c 	.word	0x20004f0c
 800d9d4:	20000074 	.word	0x20000074

0800d9d8 <Map_Load>:
	      }
}
void Map_Load(){
 800d9d8:	b598      	push	{r3, r4, r7, lr}
 800d9da:	af00      	add	r7, sp, #0
	//ROMの迷路�?ータをRAMに入れる
	Flash_load();
 800d9dc:	f7fc fa5a 	bl	8009e94 <Flash_load>

	//work_ram[]の�?ータをwall[][]とwalk_map[][]に入れる
	static int i = 0, j=0,k=0;

	//壁情報
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800d9e0:	4b57      	ldr	r3, [pc, #348]	; (800db40 <Map_Load+0x168>)
 800d9e2:	2208      	movs	r2, #8
 800d9e4:	601a      	str	r2, [r3, #0]
 800d9e6:	e075      	b.n	800dad4 <Map_Load+0xfc>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800d9e8:	4b56      	ldr	r3, [pc, #344]	; (800db44 <Map_Load+0x16c>)
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	601a      	str	r2, [r3, #0]
 800d9ee:	e068      	b.n	800dac2 <Map_Load+0xea>
			wall[i][j].north = work_ram[k];
 800d9f0:	4b55      	ldr	r3, [pc, #340]	; (800db48 <Map_Load+0x170>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4a55      	ldr	r2, [pc, #340]	; (800db4c <Map_Load+0x174>)
 800d9f6:	5cd1      	ldrb	r1, [r2, r3]
 800d9f8:	4b52      	ldr	r3, [pc, #328]	; (800db44 <Map_Load+0x16c>)
 800d9fa:	681a      	ldr	r2, [r3, #0]
 800d9fc:	4b50      	ldr	r3, [pc, #320]	; (800db40 <Map_Load+0x168>)
 800d9fe:	681c      	ldr	r4, [r3, #0]
 800da00:	460b      	mov	r3, r1
 800da02:	f003 0303 	and.w	r3, r3, #3
 800da06:	b2d8      	uxtb	r0, r3
 800da08:	4951      	ldr	r1, [pc, #324]	; (800db50 <Map_Load+0x178>)
 800da0a:	4613      	mov	r3, r2
 800da0c:	00db      	lsls	r3, r3, #3
 800da0e:	4413      	add	r3, r2
 800da10:	191a      	adds	r2, r3, r4
 800da12:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800da16:	f360 0301 	bfi	r3, r0, #0, #2
 800da1a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].east = work_ram[k+1];
 800da1e:	4b4a      	ldr	r3, [pc, #296]	; (800db48 <Map_Load+0x170>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	3301      	adds	r3, #1
 800da24:	4a49      	ldr	r2, [pc, #292]	; (800db4c <Map_Load+0x174>)
 800da26:	5cd1      	ldrb	r1, [r2, r3]
 800da28:	4b46      	ldr	r3, [pc, #280]	; (800db44 <Map_Load+0x16c>)
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	4b44      	ldr	r3, [pc, #272]	; (800db40 <Map_Load+0x168>)
 800da2e:	681c      	ldr	r4, [r3, #0]
 800da30:	460b      	mov	r3, r1
 800da32:	f003 0303 	and.w	r3, r3, #3
 800da36:	b2d8      	uxtb	r0, r3
 800da38:	4945      	ldr	r1, [pc, #276]	; (800db50 <Map_Load+0x178>)
 800da3a:	4613      	mov	r3, r2
 800da3c:	00db      	lsls	r3, r3, #3
 800da3e:	4413      	add	r3, r2
 800da40:	191a      	adds	r2, r3, r4
 800da42:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800da46:	f360 0383 	bfi	r3, r0, #2, #2
 800da4a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].south = work_ram[k+2];
 800da4e:	4b3e      	ldr	r3, [pc, #248]	; (800db48 <Map_Load+0x170>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	3302      	adds	r3, #2
 800da54:	4a3d      	ldr	r2, [pc, #244]	; (800db4c <Map_Load+0x174>)
 800da56:	5cd1      	ldrb	r1, [r2, r3]
 800da58:	4b3a      	ldr	r3, [pc, #232]	; (800db44 <Map_Load+0x16c>)
 800da5a:	681a      	ldr	r2, [r3, #0]
 800da5c:	4b38      	ldr	r3, [pc, #224]	; (800db40 <Map_Load+0x168>)
 800da5e:	681c      	ldr	r4, [r3, #0]
 800da60:	460b      	mov	r3, r1
 800da62:	f003 0303 	and.w	r3, r3, #3
 800da66:	b2d8      	uxtb	r0, r3
 800da68:	4939      	ldr	r1, [pc, #228]	; (800db50 <Map_Load+0x178>)
 800da6a:	4613      	mov	r3, r2
 800da6c:	00db      	lsls	r3, r3, #3
 800da6e:	4413      	add	r3, r2
 800da70:	191a      	adds	r2, r3, r4
 800da72:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800da76:	f360 1305 	bfi	r3, r0, #4, #2
 800da7a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			wall[i][j].west = work_ram[k+3];
 800da7e:	4b32      	ldr	r3, [pc, #200]	; (800db48 <Map_Load+0x170>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	3303      	adds	r3, #3
 800da84:	4a31      	ldr	r2, [pc, #196]	; (800db4c <Map_Load+0x174>)
 800da86:	5cd1      	ldrb	r1, [r2, r3]
 800da88:	4b2e      	ldr	r3, [pc, #184]	; (800db44 <Map_Load+0x16c>)
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	4b2c      	ldr	r3, [pc, #176]	; (800db40 <Map_Load+0x168>)
 800da8e:	681c      	ldr	r4, [r3, #0]
 800da90:	460b      	mov	r3, r1
 800da92:	f003 0303 	and.w	r3, r3, #3
 800da96:	b2d8      	uxtb	r0, r3
 800da98:	492d      	ldr	r1, [pc, #180]	; (800db50 <Map_Load+0x178>)
 800da9a:	4613      	mov	r3, r2
 800da9c:	00db      	lsls	r3, r3, #3
 800da9e:	4413      	add	r3, r2
 800daa0:	191a      	adds	r2, r3, r4
 800daa2:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800daa6:	f360 1387 	bfi	r3, r0, #6, #2
 800daaa:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			k+=4;
 800daae:	4b26      	ldr	r3, [pc, #152]	; (800db48 <Map_Load+0x170>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	3304      	adds	r3, #4
 800dab4:	4a24      	ldr	r2, [pc, #144]	; (800db48 <Map_Load+0x170>)
 800dab6:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800dab8:	4b22      	ldr	r3, [pc, #136]	; (800db44 <Map_Load+0x16c>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	3301      	adds	r3, #1
 800dabe:	4a21      	ldr	r2, [pc, #132]	; (800db44 <Map_Load+0x16c>)
 800dac0:	6013      	str	r3, [r2, #0]
 800dac2:	4b20      	ldr	r3, [pc, #128]	; (800db44 <Map_Load+0x16c>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2b08      	cmp	r3, #8
 800dac8:	dd92      	ble.n	800d9f0 <Map_Load+0x18>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800daca:	4b1d      	ldr	r3, [pc, #116]	; (800db40 <Map_Load+0x168>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	3b01      	subs	r3, #1
 800dad0:	4a1b      	ldr	r2, [pc, #108]	; (800db40 <Map_Load+0x168>)
 800dad2:	6013      	str	r3, [r2, #0]
 800dad4:	4b1a      	ldr	r3, [pc, #104]	; (800db40 <Map_Load+0x168>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	da85      	bge.n	800d9e8 <Map_Load+0x10>
		//kは60まで行ったあと�?4*NOS*NOS になって値が�?�らず終わ�?

	}

	//歩数マッ�?
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800dadc:	4b18      	ldr	r3, [pc, #96]	; (800db40 <Map_Load+0x168>)
 800dade:	2208      	movs	r2, #8
 800dae0:	601a      	str	r2, [r3, #0]
 800dae2:	e026      	b.n	800db32 <Map_Load+0x15a>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800dae4:	4b17      	ldr	r3, [pc, #92]	; (800db44 <Map_Load+0x16c>)
 800dae6:	2200      	movs	r2, #0
 800dae8:	601a      	str	r2, [r3, #0]
 800daea:	e019      	b.n	800db20 <Map_Load+0x148>
			walk_map[i][j] = work_ram[k];
 800daec:	4b16      	ldr	r3, [pc, #88]	; (800db48 <Map_Load+0x170>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a14      	ldr	r2, [pc, #80]	; (800db44 <Map_Load+0x16c>)
 800daf2:	6812      	ldr	r2, [r2, #0]
 800daf4:	4912      	ldr	r1, [pc, #72]	; (800db40 <Map_Load+0x168>)
 800daf6:	6809      	ldr	r1, [r1, #0]
 800daf8:	4814      	ldr	r0, [pc, #80]	; (800db4c <Map_Load+0x174>)
 800dafa:	5cc4      	ldrb	r4, [r0, r3]
 800dafc:	4815      	ldr	r0, [pc, #84]	; (800db54 <Map_Load+0x17c>)
 800dafe:	4613      	mov	r3, r2
 800db00:	00db      	lsls	r3, r3, #3
 800db02:	4413      	add	r3, r2
 800db04:	4403      	add	r3, r0
 800db06:	440b      	add	r3, r1
 800db08:	4622      	mov	r2, r4
 800db0a:	701a      	strb	r2, [r3, #0]
			k+=1;
 800db0c:	4b0e      	ldr	r3, [pc, #56]	; (800db48 <Map_Load+0x170>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	3301      	adds	r3, #1
 800db12:	4a0d      	ldr	r2, [pc, #52]	; (800db48 <Map_Load+0x170>)
 800db14:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800db16:	4b0b      	ldr	r3, [pc, #44]	; (800db44 <Map_Load+0x16c>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	3301      	adds	r3, #1
 800db1c:	4a09      	ldr	r2, [pc, #36]	; (800db44 <Map_Load+0x16c>)
 800db1e:	6013      	str	r3, [r2, #0]
 800db20:	4b08      	ldr	r3, [pc, #32]	; (800db44 <Map_Load+0x16c>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2b08      	cmp	r3, #8
 800db26:	dde1      	ble.n	800daec <Map_Load+0x114>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800db28:	4b05      	ldr	r3, [pc, #20]	; (800db40 <Map_Load+0x168>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	3b01      	subs	r3, #1
 800db2e:	4a04      	ldr	r2, [pc, #16]	; (800db40 <Map_Load+0x168>)
 800db30:	6013      	str	r3, [r2, #0]
 800db32:	4b03      	ldr	r3, [pc, #12]	; (800db40 <Map_Load+0x168>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	dad4      	bge.n	800dae4 <Map_Load+0x10c>
		}
	}

}
 800db3a:	bf00      	nop
 800db3c:	bd98      	pop	{r3, r4, r7, pc}
 800db3e:	bf00      	nop
 800db40:	2000435c 	.word	0x2000435c
 800db44:	20004360 	.word	0x20004360
 800db48:	20004364 	.word	0x20004364
 800db4c:	20000318 	.word	0x20000318
 800db50:	20004f0c 	.word	0x20004f0c
 800db54:	20004a60 	.word	0x20004a60

0800db58 <Adachi_judge2>:
void Adachi_judge2(){
 800db58:	b598      	push	{r3, r4, r7, lr}
 800db5a:	af00      	add	r7, sp, #0

	/*------旋回モード選択-----*/
	mode.turn = 0;
 800db5c:	4b98      	ldr	r3, [pc, #608]	; (800ddc0 <Adachi_judge2+0x268>)
 800db5e:	2200      	movs	r2, #0
 800db60:	725a      	strb	r2, [r3, #9]
	/*----------------------------*/


	//今�?�評価値よりも前の評価値が小さければ...
	//前左右
	  switch(my_direction){
 800db62:	4b98      	ldr	r3, [pc, #608]	; (800ddc4 <Adachi_judge2+0x26c>)
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	2b03      	cmp	r3, #3
 800db68:	f200 8394 	bhi.w	800e294 <Adachi_judge2+0x73c>
 800db6c:	a201      	add	r2, pc, #4	; (adr r2, 800db74 <Adachi_judge2+0x1c>)
 800db6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db72:	bf00      	nop
 800db74:	0800db85 	.word	0x0800db85
 800db78:	0800dd37 	.word	0x0800dd37
 800db7c:	0800df0f 	.word	0x0800df0f
 800db80:	0800e0e3 	.word	0x0800e0e3
	  case north:
		  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800db84:	4b90      	ldr	r3, [pc, #576]	; (800ddc8 <Adachi_judge2+0x270>)
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	4619      	mov	r1, r3
 800db8a:	4b90      	ldr	r3, [pc, #576]	; (800ddcc <Adachi_judge2+0x274>)
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	4618      	mov	r0, r3
 800db90:	4a8f      	ldr	r2, [pc, #572]	; (800ddd0 <Adachi_judge2+0x278>)
 800db92:	460b      	mov	r3, r1
 800db94:	00db      	lsls	r3, r3, #3
 800db96:	440b      	add	r3, r1
 800db98:	4403      	add	r3, r0
 800db9a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800db9e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d12b      	bne.n	800dc00 <Adachi_judge2+0xa8>
 800dba8:	4b87      	ldr	r3, [pc, #540]	; (800ddc8 <Adachi_judge2+0x270>)
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	4618      	mov	r0, r3
 800dbae:	4b87      	ldr	r3, [pc, #540]	; (800ddcc <Adachi_judge2+0x274>)
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	1c5a      	adds	r2, r3, #1
 800dbb4:	4987      	ldr	r1, [pc, #540]	; (800ddd4 <Adachi_judge2+0x27c>)
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	00db      	lsls	r3, r3, #3
 800dbba:	4403      	add	r3, r0
 800dbbc:	440b      	add	r3, r1
 800dbbe:	4413      	add	r3, r2
 800dbc0:	781a      	ldrb	r2, [r3, #0]
 800dbc2:	4b81      	ldr	r3, [pc, #516]	; (800ddc8 <Adachi_judge2+0x270>)
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	4b80      	ldr	r3, [pc, #512]	; (800ddcc <Adachi_judge2+0x274>)
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	461c      	mov	r4, r3
 800dbce:	4981      	ldr	r1, [pc, #516]	; (800ddd4 <Adachi_judge2+0x27c>)
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	00db      	lsls	r3, r3, #3
 800dbd4:	4403      	add	r3, r0
 800dbd6:	440b      	add	r3, r1
 800dbd8:	4423      	add	r3, r4
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d20f      	bcs.n	800dc00 <Adachi_judge2+0xa8>
 800dbe0:	4b7a      	ldr	r3, [pc, #488]	; (800ddcc <Adachi_judge2+0x274>)
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	2b07      	cmp	r3, #7
 800dbe6:	d80b      	bhi.n	800dc00 <Adachi_judge2+0xa8>
			  //前北
			  straight();
 800dbe8:	f7fd f94e 	bl	800ae88 <straight>
			  my_direction = north;
 800dbec:	4b75      	ldr	r3, [pc, #468]	; (800ddc4 <Adachi_judge2+0x26c>)
 800dbee:	2200      	movs	r2, #0
 800dbf0:	701a      	strb	r2, [r3, #0]
			  y++;
 800dbf2:	4b76      	ldr	r3, [pc, #472]	; (800ddcc <Adachi_judge2+0x274>)
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	b2da      	uxtb	r2, r3
 800dbfa:	4b74      	ldr	r3, [pc, #464]	; (800ddcc <Adachi_judge2+0x274>)
 800dbfc:	701a      	strb	r2, [r3, #0]
 800dbfe:	e099      	b.n	800dd34 <Adachi_judge2+0x1dc>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800dc00:	4b71      	ldr	r3, [pc, #452]	; (800ddc8 <Adachi_judge2+0x270>)
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	4619      	mov	r1, r3
 800dc06:	4b71      	ldr	r3, [pc, #452]	; (800ddcc <Adachi_judge2+0x274>)
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	4a70      	ldr	r2, [pc, #448]	; (800ddd0 <Adachi_judge2+0x278>)
 800dc0e:	460b      	mov	r3, r1
 800dc10:	00db      	lsls	r3, r3, #3
 800dc12:	440b      	add	r3, r1
 800dc14:	4403      	add	r3, r0
 800dc16:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dc1a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d12b      	bne.n	800dc7c <Adachi_judge2+0x124>
 800dc24:	4b68      	ldr	r3, [pc, #416]	; (800ddc8 <Adachi_judge2+0x270>)
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	1e5a      	subs	r2, r3, #1
 800dc2a:	4b68      	ldr	r3, [pc, #416]	; (800ddcc <Adachi_judge2+0x274>)
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	4968      	ldr	r1, [pc, #416]	; (800ddd4 <Adachi_judge2+0x27c>)
 800dc32:	4613      	mov	r3, r2
 800dc34:	00db      	lsls	r3, r3, #3
 800dc36:	4413      	add	r3, r2
 800dc38:	440b      	add	r3, r1
 800dc3a:	4403      	add	r3, r0
 800dc3c:	781a      	ldrb	r2, [r3, #0]
 800dc3e:	4b62      	ldr	r3, [pc, #392]	; (800ddc8 <Adachi_judge2+0x270>)
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	4618      	mov	r0, r3
 800dc44:	4b61      	ldr	r3, [pc, #388]	; (800ddcc <Adachi_judge2+0x274>)
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	461c      	mov	r4, r3
 800dc4a:	4962      	ldr	r1, [pc, #392]	; (800ddd4 <Adachi_judge2+0x27c>)
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	00db      	lsls	r3, r3, #3
 800dc50:	4403      	add	r3, r0
 800dc52:	440b      	add	r3, r1
 800dc54:	4423      	add	r3, r4
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d20f      	bcs.n	800dc7c <Adachi_judge2+0x124>
 800dc5c:	4b5a      	ldr	r3, [pc, #360]	; (800ddc8 <Adachi_judge2+0x270>)
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d00b      	beq.n	800dc7c <Adachi_judge2+0x124>
			  //左西
			  L_turn_select();
 800dc64:	f7fd ff6c 	bl	800bb40 <L_turn_select>
			  my_direction = west;
 800dc68:	4b56      	ldr	r3, [pc, #344]	; (800ddc4 <Adachi_judge2+0x26c>)
 800dc6a:	2203      	movs	r2, #3
 800dc6c:	701a      	strb	r2, [r3, #0]
		      x--;
 800dc6e:	4b56      	ldr	r3, [pc, #344]	; (800ddc8 <Adachi_judge2+0x270>)
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	3b01      	subs	r3, #1
 800dc74:	b2da      	uxtb	r2, r3
 800dc76:	4b54      	ldr	r3, [pc, #336]	; (800ddc8 <Adachi_judge2+0x270>)
 800dc78:	701a      	strb	r2, [r3, #0]
 800dc7a:	e05b      	b.n	800dd34 <Adachi_judge2+0x1dc>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800dc7c:	4b52      	ldr	r3, [pc, #328]	; (800ddc8 <Adachi_judge2+0x270>)
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	4619      	mov	r1, r3
 800dc82:	4b52      	ldr	r3, [pc, #328]	; (800ddcc <Adachi_judge2+0x274>)
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	4618      	mov	r0, r3
 800dc88:	4a51      	ldr	r2, [pc, #324]	; (800ddd0 <Adachi_judge2+0x278>)
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	00db      	lsls	r3, r3, #3
 800dc8e:	440b      	add	r3, r1
 800dc90:	4403      	add	r3, r0
 800dc92:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dc96:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d12b      	bne.n	800dcf8 <Adachi_judge2+0x1a0>
 800dca0:	4b49      	ldr	r3, [pc, #292]	; (800ddc8 <Adachi_judge2+0x270>)
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	1c5a      	adds	r2, r3, #1
 800dca6:	4b49      	ldr	r3, [pc, #292]	; (800ddcc <Adachi_judge2+0x274>)
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	4618      	mov	r0, r3
 800dcac:	4949      	ldr	r1, [pc, #292]	; (800ddd4 <Adachi_judge2+0x27c>)
 800dcae:	4613      	mov	r3, r2
 800dcb0:	00db      	lsls	r3, r3, #3
 800dcb2:	4413      	add	r3, r2
 800dcb4:	440b      	add	r3, r1
 800dcb6:	4403      	add	r3, r0
 800dcb8:	781a      	ldrb	r2, [r3, #0]
 800dcba:	4b43      	ldr	r3, [pc, #268]	; (800ddc8 <Adachi_judge2+0x270>)
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	4b42      	ldr	r3, [pc, #264]	; (800ddcc <Adachi_judge2+0x274>)
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	461c      	mov	r4, r3
 800dcc6:	4943      	ldr	r1, [pc, #268]	; (800ddd4 <Adachi_judge2+0x27c>)
 800dcc8:	4603      	mov	r3, r0
 800dcca:	00db      	lsls	r3, r3, #3
 800dccc:	4403      	add	r3, r0
 800dcce:	440b      	add	r3, r1
 800dcd0:	4423      	add	r3, r4
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d20f      	bcs.n	800dcf8 <Adachi_judge2+0x1a0>
 800dcd8:	4b3b      	ldr	r3, [pc, #236]	; (800ddc8 <Adachi_judge2+0x270>)
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	2b07      	cmp	r3, #7
 800dcde:	d80b      	bhi.n	800dcf8 <Adachi_judge2+0x1a0>
			  //右東
			  R_turn_select();
 800dce0:	f7fd feea 	bl	800bab8 <R_turn_select>
	          my_direction = east;
 800dce4:	4b37      	ldr	r3, [pc, #220]	; (800ddc4 <Adachi_judge2+0x26c>)
 800dce6:	2201      	movs	r2, #1
 800dce8:	701a      	strb	r2, [r3, #0]
	          x++;
 800dcea:	4b37      	ldr	r3, [pc, #220]	; (800ddc8 <Adachi_judge2+0x270>)
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	4b35      	ldr	r3, [pc, #212]	; (800ddc8 <Adachi_judge2+0x270>)
 800dcf4:	701a      	strb	r2, [r3, #0]
 800dcf6:	e01d      	b.n	800dd34 <Adachi_judge2+0x1dc>
		  }
		  else {
			  //後南
	          Decelerate();
 800dcf8:	f7fd f80e 	bl	800ad18 <Decelerate>
	          wait(0.3);
 800dcfc:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 800ddb8 <Adachi_judge2+0x260>
 800dd00:	f7fc feda 	bl	800aab8 <wait>

//	          if(mode.execution == 1)
//	        	  Motor_PWM_Stop();

	  	      rotate180();
 800dd04:	f7fd fdf6 	bl	800b8f4 <rotate180>
	  	      wait(0.3);;
 800dd08:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 800ddb8 <Adachi_judge2+0x260>
 800dd0c:	f7fc fed4 	bl	800aab8 <wait>
	  	      back_calib();
 800dd10:	f7fd fe6a 	bl	800b9e8 <back_calib>
	  	      wait(0.3);
 800dd14:	ed9f 0b28 	vldr	d0, [pc, #160]	; 800ddb8 <Adachi_judge2+0x260>
 800dd18:	f7fc fece 	bl	800aab8 <wait>
	       	  Start_Accel();
 800dd1c:	f7fc fef4 	bl	800ab08 <Start_Accel>
	       	  my_direction = south;
 800dd20:	4b28      	ldr	r3, [pc, #160]	; (800ddc4 <Adachi_judge2+0x26c>)
 800dd22:	2202      	movs	r2, #2
 800dd24:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800dd26:	4b29      	ldr	r3, [pc, #164]	; (800ddcc <Adachi_judge2+0x274>)
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	3b01      	subs	r3, #1
 800dd2c:	b2da      	uxtb	r2, r3
 800dd2e:	4b27      	ldr	r3, [pc, #156]	; (800ddcc <Adachi_judge2+0x274>)
 800dd30:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800dd32:	e2b0      	b.n	800e296 <Adachi_judge2+0x73e>
 800dd34:	e2af      	b.n	800e296 <Adachi_judge2+0x73e>

	  case east:

		  if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800dd36:	4b24      	ldr	r3, [pc, #144]	; (800ddc8 <Adachi_judge2+0x270>)
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	4b23      	ldr	r3, [pc, #140]	; (800ddcc <Adachi_judge2+0x274>)
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	4618      	mov	r0, r3
 800dd42:	4a23      	ldr	r2, [pc, #140]	; (800ddd0 <Adachi_judge2+0x278>)
 800dd44:	460b      	mov	r3, r1
 800dd46:	00db      	lsls	r3, r3, #3
 800dd48:	440b      	add	r3, r1
 800dd4a:	4403      	add	r3, r0
 800dd4c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dd50:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800dd54:	b2db      	uxtb	r3, r3
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d13e      	bne.n	800ddd8 <Adachi_judge2+0x280>
 800dd5a:	4b1b      	ldr	r3, [pc, #108]	; (800ddc8 <Adachi_judge2+0x270>)
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	1c5a      	adds	r2, r3, #1
 800dd60:	4b1a      	ldr	r3, [pc, #104]	; (800ddcc <Adachi_judge2+0x274>)
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	4618      	mov	r0, r3
 800dd66:	491b      	ldr	r1, [pc, #108]	; (800ddd4 <Adachi_judge2+0x27c>)
 800dd68:	4613      	mov	r3, r2
 800dd6a:	00db      	lsls	r3, r3, #3
 800dd6c:	4413      	add	r3, r2
 800dd6e:	440b      	add	r3, r1
 800dd70:	4403      	add	r3, r0
 800dd72:	781a      	ldrb	r2, [r3, #0]
 800dd74:	4b14      	ldr	r3, [pc, #80]	; (800ddc8 <Adachi_judge2+0x270>)
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	4618      	mov	r0, r3
 800dd7a:	4b14      	ldr	r3, [pc, #80]	; (800ddcc <Adachi_judge2+0x274>)
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	461c      	mov	r4, r3
 800dd80:	4914      	ldr	r1, [pc, #80]	; (800ddd4 <Adachi_judge2+0x27c>)
 800dd82:	4603      	mov	r3, r0
 800dd84:	00db      	lsls	r3, r3, #3
 800dd86:	4403      	add	r3, r0
 800dd88:	440b      	add	r3, r1
 800dd8a:	4423      	add	r3, r4
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d222      	bcs.n	800ddd8 <Adachi_judge2+0x280>
 800dd92:	4b0d      	ldr	r3, [pc, #52]	; (800ddc8 <Adachi_judge2+0x270>)
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	2b07      	cmp	r3, #7
 800dd98:	d81e      	bhi.n	800ddd8 <Adachi_judge2+0x280>
			  //前東
			  straight();
 800dd9a:	f7fd f875 	bl	800ae88 <straight>
	       	  my_direction = east;
 800dd9e:	4b09      	ldr	r3, [pc, #36]	; (800ddc4 <Adachi_judge2+0x26c>)
 800dda0:	2201      	movs	r2, #1
 800dda2:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800dda4:	4b08      	ldr	r3, [pc, #32]	; (800ddc8 <Adachi_judge2+0x270>)
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	3301      	adds	r3, #1
 800ddaa:	b2da      	uxtb	r2, r3
 800ddac:	4b06      	ldr	r3, [pc, #24]	; (800ddc8 <Adachi_judge2+0x270>)
 800ddae:	701a      	strb	r2, [r3, #0]
 800ddb0:	e0ac      	b.n	800df0c <Adachi_judge2+0x3b4>
 800ddb2:	bf00      	nop
 800ddb4:	f3af 8000 	nop.w
 800ddb8:	33333333 	.word	0x33333333
 800ddbc:	3fd33333 	.word	0x3fd33333
 800ddc0:	20000074 	.word	0x20000074
 800ddc4:	2000449a 	.word	0x2000449a
 800ddc8:	2000030c 	.word	0x2000030c
 800ddcc:	2000030d 	.word	0x2000030d
 800ddd0:	20004f0c 	.word	0x20004f0c
 800ddd4:	20004a60 	.word	0x20004a60
		  }
		  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800ddd8:	4bad      	ldr	r3, [pc, #692]	; (800e090 <Adachi_judge2+0x538>)
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	4619      	mov	r1, r3
 800ddde:	4bad      	ldr	r3, [pc, #692]	; (800e094 <Adachi_judge2+0x53c>)
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	4618      	mov	r0, r3
 800dde4:	4aac      	ldr	r2, [pc, #688]	; (800e098 <Adachi_judge2+0x540>)
 800dde6:	460b      	mov	r3, r1
 800dde8:	00db      	lsls	r3, r3, #3
 800ddea:	440b      	add	r3, r1
 800ddec:	4403      	add	r3, r0
 800ddee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ddf2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ddf6:	b2db      	uxtb	r3, r3
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d12b      	bne.n	800de54 <Adachi_judge2+0x2fc>
 800ddfc:	4ba4      	ldr	r3, [pc, #656]	; (800e090 <Adachi_judge2+0x538>)
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	4618      	mov	r0, r3
 800de02:	4ba4      	ldr	r3, [pc, #656]	; (800e094 <Adachi_judge2+0x53c>)
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	1c5a      	adds	r2, r3, #1
 800de08:	49a4      	ldr	r1, [pc, #656]	; (800e09c <Adachi_judge2+0x544>)
 800de0a:	4603      	mov	r3, r0
 800de0c:	00db      	lsls	r3, r3, #3
 800de0e:	4403      	add	r3, r0
 800de10:	440b      	add	r3, r1
 800de12:	4413      	add	r3, r2
 800de14:	781a      	ldrb	r2, [r3, #0]
 800de16:	4b9e      	ldr	r3, [pc, #632]	; (800e090 <Adachi_judge2+0x538>)
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	4618      	mov	r0, r3
 800de1c:	4b9d      	ldr	r3, [pc, #628]	; (800e094 <Adachi_judge2+0x53c>)
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	461c      	mov	r4, r3
 800de22:	499e      	ldr	r1, [pc, #632]	; (800e09c <Adachi_judge2+0x544>)
 800de24:	4603      	mov	r3, r0
 800de26:	00db      	lsls	r3, r3, #3
 800de28:	4403      	add	r3, r0
 800de2a:	440b      	add	r3, r1
 800de2c:	4423      	add	r3, r4
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	429a      	cmp	r2, r3
 800de32:	d20f      	bcs.n	800de54 <Adachi_judge2+0x2fc>
 800de34:	4b97      	ldr	r3, [pc, #604]	; (800e094 <Adachi_judge2+0x53c>)
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	2b07      	cmp	r3, #7
 800de3a:	d80b      	bhi.n	800de54 <Adachi_judge2+0x2fc>
			  //左�?
			  L_turn_select();
 800de3c:	f7fd fe80 	bl	800bb40 <L_turn_select>
	       	  my_direction = north;
 800de40:	4b97      	ldr	r3, [pc, #604]	; (800e0a0 <Adachi_judge2+0x548>)
 800de42:	2200      	movs	r2, #0
 800de44:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800de46:	4b93      	ldr	r3, [pc, #588]	; (800e094 <Adachi_judge2+0x53c>)
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	3301      	adds	r3, #1
 800de4c:	b2da      	uxtb	r2, r3
 800de4e:	4b91      	ldr	r3, [pc, #580]	; (800e094 <Adachi_judge2+0x53c>)
 800de50:	701a      	strb	r2, [r3, #0]
 800de52:	e05b      	b.n	800df0c <Adachi_judge2+0x3b4>
		  }
		  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800de54:	4b8e      	ldr	r3, [pc, #568]	; (800e090 <Adachi_judge2+0x538>)
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	4619      	mov	r1, r3
 800de5a:	4b8e      	ldr	r3, [pc, #568]	; (800e094 <Adachi_judge2+0x53c>)
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	4618      	mov	r0, r3
 800de60:	4a8d      	ldr	r2, [pc, #564]	; (800e098 <Adachi_judge2+0x540>)
 800de62:	460b      	mov	r3, r1
 800de64:	00db      	lsls	r3, r3, #3
 800de66:	440b      	add	r3, r1
 800de68:	4403      	add	r3, r0
 800de6a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800de6e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800de72:	b2db      	uxtb	r3, r3
 800de74:	2b00      	cmp	r3, #0
 800de76:	d12b      	bne.n	800ded0 <Adachi_judge2+0x378>
 800de78:	4b85      	ldr	r3, [pc, #532]	; (800e090 <Adachi_judge2+0x538>)
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	4618      	mov	r0, r3
 800de7e:	4b85      	ldr	r3, [pc, #532]	; (800e094 <Adachi_judge2+0x53c>)
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	1e5a      	subs	r2, r3, #1
 800de84:	4985      	ldr	r1, [pc, #532]	; (800e09c <Adachi_judge2+0x544>)
 800de86:	4603      	mov	r3, r0
 800de88:	00db      	lsls	r3, r3, #3
 800de8a:	4403      	add	r3, r0
 800de8c:	440b      	add	r3, r1
 800de8e:	4413      	add	r3, r2
 800de90:	781a      	ldrb	r2, [r3, #0]
 800de92:	4b7f      	ldr	r3, [pc, #508]	; (800e090 <Adachi_judge2+0x538>)
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	4618      	mov	r0, r3
 800de98:	4b7e      	ldr	r3, [pc, #504]	; (800e094 <Adachi_judge2+0x53c>)
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	461c      	mov	r4, r3
 800de9e:	497f      	ldr	r1, [pc, #508]	; (800e09c <Adachi_judge2+0x544>)
 800dea0:	4603      	mov	r3, r0
 800dea2:	00db      	lsls	r3, r3, #3
 800dea4:	4403      	add	r3, r0
 800dea6:	440b      	add	r3, r1
 800dea8:	4423      	add	r3, r4
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	429a      	cmp	r2, r3
 800deae:	d20f      	bcs.n	800ded0 <Adachi_judge2+0x378>
 800deb0:	4b78      	ldr	r3, [pc, #480]	; (800e094 <Adachi_judge2+0x53c>)
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d00b      	beq.n	800ded0 <Adachi_judge2+0x378>
			  //右�?
			  R_turn_select();
 800deb8:	f7fd fdfe 	bl	800bab8 <R_turn_select>
	       	  my_direction = south;
 800debc:	4b78      	ldr	r3, [pc, #480]	; (800e0a0 <Adachi_judge2+0x548>)
 800debe:	2202      	movs	r2, #2
 800dec0:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800dec2:	4b74      	ldr	r3, [pc, #464]	; (800e094 <Adachi_judge2+0x53c>)
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	3b01      	subs	r3, #1
 800dec8:	b2da      	uxtb	r2, r3
 800deca:	4b72      	ldr	r3, [pc, #456]	; (800e094 <Adachi_judge2+0x53c>)
 800decc:	701a      	strb	r2, [r3, #0]
 800dece:	e01d      	b.n	800df0c <Adachi_judge2+0x3b4>
		  }
		  else {
			  //後西
	          Decelerate();
 800ded0:	f7fc ff22 	bl	800ad18 <Decelerate>
	          wait(0.3);
 800ded4:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 800e088 <Adachi_judge2+0x530>
 800ded8:	f7fc fdee 	bl	800aab8 <wait>

//	          if(mode.execution == 1)
//	        	  Motor_PWM_Stop();

	  	      rotate180();
 800dedc:	f7fd fd0a 	bl	800b8f4 <rotate180>
	  	      wait(0.3);
 800dee0:	ed9f 0b69 	vldr	d0, [pc, #420]	; 800e088 <Adachi_judge2+0x530>
 800dee4:	f7fc fde8 	bl	800aab8 <wait>
	  	      back_calib();
 800dee8:	f7fd fd7e 	bl	800b9e8 <back_calib>
	  	      wait(0.3);
 800deec:	ed9f 0b66 	vldr	d0, [pc, #408]	; 800e088 <Adachi_judge2+0x530>
 800def0:	f7fc fde2 	bl	800aab8 <wait>
	       	  Start_Accel();
 800def4:	f7fc fe08 	bl	800ab08 <Start_Accel>

	       	  my_direction = west;
 800def8:	4b69      	ldr	r3, [pc, #420]	; (800e0a0 <Adachi_judge2+0x548>)
 800defa:	2203      	movs	r2, #3
 800defc:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800defe:	4b64      	ldr	r3, [pc, #400]	; (800e090 <Adachi_judge2+0x538>)
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	3b01      	subs	r3, #1
 800df04:	b2da      	uxtb	r2, r3
 800df06:	4b62      	ldr	r3, [pc, #392]	; (800e090 <Adachi_judge2+0x538>)
 800df08:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800df0a:	e1c4      	b.n	800e296 <Adachi_judge2+0x73e>
 800df0c:	e1c3      	b.n	800e296 <Adachi_judge2+0x73e>

	  case south:

		  if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800df0e:	4b60      	ldr	r3, [pc, #384]	; (800e090 <Adachi_judge2+0x538>)
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	4619      	mov	r1, r3
 800df14:	4b5f      	ldr	r3, [pc, #380]	; (800e094 <Adachi_judge2+0x53c>)
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	4618      	mov	r0, r3
 800df1a:	4a5f      	ldr	r2, [pc, #380]	; (800e098 <Adachi_judge2+0x540>)
 800df1c:	460b      	mov	r3, r1
 800df1e:	00db      	lsls	r3, r3, #3
 800df20:	440b      	add	r3, r1
 800df22:	4403      	add	r3, r0
 800df24:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800df28:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d12b      	bne.n	800df8a <Adachi_judge2+0x432>
 800df32:	4b57      	ldr	r3, [pc, #348]	; (800e090 <Adachi_judge2+0x538>)
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	4618      	mov	r0, r3
 800df38:	4b56      	ldr	r3, [pc, #344]	; (800e094 <Adachi_judge2+0x53c>)
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	1e5a      	subs	r2, r3, #1
 800df3e:	4957      	ldr	r1, [pc, #348]	; (800e09c <Adachi_judge2+0x544>)
 800df40:	4603      	mov	r3, r0
 800df42:	00db      	lsls	r3, r3, #3
 800df44:	4403      	add	r3, r0
 800df46:	440b      	add	r3, r1
 800df48:	4413      	add	r3, r2
 800df4a:	781a      	ldrb	r2, [r3, #0]
 800df4c:	4b50      	ldr	r3, [pc, #320]	; (800e090 <Adachi_judge2+0x538>)
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	4618      	mov	r0, r3
 800df52:	4b50      	ldr	r3, [pc, #320]	; (800e094 <Adachi_judge2+0x53c>)
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	461c      	mov	r4, r3
 800df58:	4950      	ldr	r1, [pc, #320]	; (800e09c <Adachi_judge2+0x544>)
 800df5a:	4603      	mov	r3, r0
 800df5c:	00db      	lsls	r3, r3, #3
 800df5e:	4403      	add	r3, r0
 800df60:	440b      	add	r3, r1
 800df62:	4423      	add	r3, r4
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	429a      	cmp	r2, r3
 800df68:	d20f      	bcs.n	800df8a <Adachi_judge2+0x432>
 800df6a:	4b4a      	ldr	r3, [pc, #296]	; (800e094 <Adachi_judge2+0x53c>)
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d00b      	beq.n	800df8a <Adachi_judge2+0x432>
			  //前南
			  straight();
 800df72:	f7fc ff89 	bl	800ae88 <straight>
	       	  my_direction = south;
 800df76:	4b4a      	ldr	r3, [pc, #296]	; (800e0a0 <Adachi_judge2+0x548>)
 800df78:	2202      	movs	r2, #2
 800df7a:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800df7c:	4b45      	ldr	r3, [pc, #276]	; (800e094 <Adachi_judge2+0x53c>)
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	3b01      	subs	r3, #1
 800df82:	b2da      	uxtb	r2, r3
 800df84:	4b43      	ldr	r3, [pc, #268]	; (800e094 <Adachi_judge2+0x53c>)
 800df86:	701a      	strb	r2, [r3, #0]
 800df88:	e0aa      	b.n	800e0e0 <Adachi_judge2+0x588>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800df8a:	4b41      	ldr	r3, [pc, #260]	; (800e090 <Adachi_judge2+0x538>)
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	4619      	mov	r1, r3
 800df90:	4b40      	ldr	r3, [pc, #256]	; (800e094 <Adachi_judge2+0x53c>)
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	4618      	mov	r0, r3
 800df96:	4a40      	ldr	r2, [pc, #256]	; (800e098 <Adachi_judge2+0x540>)
 800df98:	460b      	mov	r3, r1
 800df9a:	00db      	lsls	r3, r3, #3
 800df9c:	440b      	add	r3, r1
 800df9e:	4403      	add	r3, r0
 800dfa0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dfa4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d12b      	bne.n	800e006 <Adachi_judge2+0x4ae>
 800dfae:	4b38      	ldr	r3, [pc, #224]	; (800e090 <Adachi_judge2+0x538>)
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	1c5a      	adds	r2, r3, #1
 800dfb4:	4b37      	ldr	r3, [pc, #220]	; (800e094 <Adachi_judge2+0x53c>)
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	4618      	mov	r0, r3
 800dfba:	4938      	ldr	r1, [pc, #224]	; (800e09c <Adachi_judge2+0x544>)
 800dfbc:	4613      	mov	r3, r2
 800dfbe:	00db      	lsls	r3, r3, #3
 800dfc0:	4413      	add	r3, r2
 800dfc2:	440b      	add	r3, r1
 800dfc4:	4403      	add	r3, r0
 800dfc6:	781a      	ldrb	r2, [r3, #0]
 800dfc8:	4b31      	ldr	r3, [pc, #196]	; (800e090 <Adachi_judge2+0x538>)
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	4618      	mov	r0, r3
 800dfce:	4b31      	ldr	r3, [pc, #196]	; (800e094 <Adachi_judge2+0x53c>)
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	461c      	mov	r4, r3
 800dfd4:	4931      	ldr	r1, [pc, #196]	; (800e09c <Adachi_judge2+0x544>)
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	00db      	lsls	r3, r3, #3
 800dfda:	4403      	add	r3, r0
 800dfdc:	440b      	add	r3, r1
 800dfde:	4423      	add	r3, r4
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d20f      	bcs.n	800e006 <Adachi_judge2+0x4ae>
 800dfe6:	4b2a      	ldr	r3, [pc, #168]	; (800e090 <Adachi_judge2+0x538>)
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	2b07      	cmp	r3, #7
 800dfec:	d80b      	bhi.n	800e006 <Adachi_judge2+0x4ae>
			  //左東
			  L_turn_select();
 800dfee:	f7fd fda7 	bl	800bb40 <L_turn_select>
	       	  my_direction = east;
 800dff2:	4b2b      	ldr	r3, [pc, #172]	; (800e0a0 <Adachi_judge2+0x548>)
 800dff4:	2201      	movs	r2, #1
 800dff6:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800dff8:	4b25      	ldr	r3, [pc, #148]	; (800e090 <Adachi_judge2+0x538>)
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	3301      	adds	r3, #1
 800dffe:	b2da      	uxtb	r2, r3
 800e000:	4b23      	ldr	r3, [pc, #140]	; (800e090 <Adachi_judge2+0x538>)
 800e002:	701a      	strb	r2, [r3, #0]
 800e004:	e06c      	b.n	800e0e0 <Adachi_judge2+0x588>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e006:	4b22      	ldr	r3, [pc, #136]	; (800e090 <Adachi_judge2+0x538>)
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	4619      	mov	r1, r3
 800e00c:	4b21      	ldr	r3, [pc, #132]	; (800e094 <Adachi_judge2+0x53c>)
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	4618      	mov	r0, r3
 800e012:	4a21      	ldr	r2, [pc, #132]	; (800e098 <Adachi_judge2+0x540>)
 800e014:	460b      	mov	r3, r1
 800e016:	00db      	lsls	r3, r3, #3
 800e018:	440b      	add	r3, r1
 800e01a:	4403      	add	r3, r0
 800e01c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e020:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e024:	b2db      	uxtb	r3, r3
 800e026:	2b00      	cmp	r3, #0
 800e028:	d13c      	bne.n	800e0a4 <Adachi_judge2+0x54c>
 800e02a:	4b19      	ldr	r3, [pc, #100]	; (800e090 <Adachi_judge2+0x538>)
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	1e5a      	subs	r2, r3, #1
 800e030:	4b18      	ldr	r3, [pc, #96]	; (800e094 <Adachi_judge2+0x53c>)
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	4618      	mov	r0, r3
 800e036:	4919      	ldr	r1, [pc, #100]	; (800e09c <Adachi_judge2+0x544>)
 800e038:	4613      	mov	r3, r2
 800e03a:	00db      	lsls	r3, r3, #3
 800e03c:	4413      	add	r3, r2
 800e03e:	440b      	add	r3, r1
 800e040:	4403      	add	r3, r0
 800e042:	781a      	ldrb	r2, [r3, #0]
 800e044:	4b12      	ldr	r3, [pc, #72]	; (800e090 <Adachi_judge2+0x538>)
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	4618      	mov	r0, r3
 800e04a:	4b12      	ldr	r3, [pc, #72]	; (800e094 <Adachi_judge2+0x53c>)
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	461c      	mov	r4, r3
 800e050:	4912      	ldr	r1, [pc, #72]	; (800e09c <Adachi_judge2+0x544>)
 800e052:	4603      	mov	r3, r0
 800e054:	00db      	lsls	r3, r3, #3
 800e056:	4403      	add	r3, r0
 800e058:	440b      	add	r3, r1
 800e05a:	4423      	add	r3, r4
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d220      	bcs.n	800e0a4 <Adachi_judge2+0x54c>
 800e062:	4b0b      	ldr	r3, [pc, #44]	; (800e090 <Adachi_judge2+0x538>)
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d01c      	beq.n	800e0a4 <Adachi_judge2+0x54c>
			  //右西
			  R_turn_select();
 800e06a:	f7fd fd25 	bl	800bab8 <R_turn_select>
	       	  my_direction = west;
 800e06e:	4b0c      	ldr	r3, [pc, #48]	; (800e0a0 <Adachi_judge2+0x548>)
 800e070:	2203      	movs	r2, #3
 800e072:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800e074:	4b06      	ldr	r3, [pc, #24]	; (800e090 <Adachi_judge2+0x538>)
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	3b01      	subs	r3, #1
 800e07a:	b2da      	uxtb	r2, r3
 800e07c:	4b04      	ldr	r3, [pc, #16]	; (800e090 <Adachi_judge2+0x538>)
 800e07e:	701a      	strb	r2, [r3, #0]
 800e080:	e02e      	b.n	800e0e0 <Adachi_judge2+0x588>
 800e082:	bf00      	nop
 800e084:	f3af 8000 	nop.w
 800e088:	33333333 	.word	0x33333333
 800e08c:	3fd33333 	.word	0x3fd33333
 800e090:	2000030c 	.word	0x2000030c
 800e094:	2000030d 	.word	0x2000030d
 800e098:	20004f0c 	.word	0x20004f0c
 800e09c:	20004a60 	.word	0x20004a60
 800e0a0:	2000449a 	.word	0x2000449a
		  }
		  else {
			  //後北
	          Decelerate();
 800e0a4:	f7fc fe38 	bl	800ad18 <Decelerate>
	          wait(0.3);;
 800e0a8:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 800e2a0 <Adachi_judge2+0x748>
 800e0ac:	f7fc fd04 	bl	800aab8 <wait>

//	          if(mode.execution == 1)
//	        	  Motor_PWM_Stop();

	  	      rotate180();
 800e0b0:	f7fd fc20 	bl	800b8f4 <rotate180>
	  	      wait(0.3);;
 800e0b4:	ed9f 0b7a 	vldr	d0, [pc, #488]	; 800e2a0 <Adachi_judge2+0x748>
 800e0b8:	f7fc fcfe 	bl	800aab8 <wait>
	  	      back_calib();
 800e0bc:	f7fd fc94 	bl	800b9e8 <back_calib>
	  	      wait(0.3);
 800e0c0:	ed9f 0b77 	vldr	d0, [pc, #476]	; 800e2a0 <Adachi_judge2+0x748>
 800e0c4:	f7fc fcf8 	bl	800aab8 <wait>
	       	  Start_Accel();
 800e0c8:	f7fc fd1e 	bl	800ab08 <Start_Accel>

	       	  my_direction = north;
 800e0cc:	4b76      	ldr	r3, [pc, #472]	; (800e2a8 <Adachi_judge2+0x750>)
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800e0d2:	4b76      	ldr	r3, [pc, #472]	; (800e2ac <Adachi_judge2+0x754>)
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	b2da      	uxtb	r2, r3
 800e0da:	4b74      	ldr	r3, [pc, #464]	; (800e2ac <Adachi_judge2+0x754>)
 800e0dc:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800e0de:	e0da      	b.n	800e296 <Adachi_judge2+0x73e>
 800e0e0:	e0d9      	b.n	800e296 <Adachi_judge2+0x73e>

	  case west:

		  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e0e2:	4b73      	ldr	r3, [pc, #460]	; (800e2b0 <Adachi_judge2+0x758>)
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	4b70      	ldr	r3, [pc, #448]	; (800e2ac <Adachi_judge2+0x754>)
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	4a71      	ldr	r2, [pc, #452]	; (800e2b4 <Adachi_judge2+0x75c>)
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	00db      	lsls	r3, r3, #3
 800e0f4:	440b      	add	r3, r1
 800e0f6:	4403      	add	r3, r0
 800e0f8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e0fc:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e100:	b2db      	uxtb	r3, r3
 800e102:	2b00      	cmp	r3, #0
 800e104:	d12b      	bne.n	800e15e <Adachi_judge2+0x606>
 800e106:	4b6a      	ldr	r3, [pc, #424]	; (800e2b0 <Adachi_judge2+0x758>)
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	1e5a      	subs	r2, r3, #1
 800e10c:	4b67      	ldr	r3, [pc, #412]	; (800e2ac <Adachi_judge2+0x754>)
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	4618      	mov	r0, r3
 800e112:	4969      	ldr	r1, [pc, #420]	; (800e2b8 <Adachi_judge2+0x760>)
 800e114:	4613      	mov	r3, r2
 800e116:	00db      	lsls	r3, r3, #3
 800e118:	4413      	add	r3, r2
 800e11a:	440b      	add	r3, r1
 800e11c:	4403      	add	r3, r0
 800e11e:	781a      	ldrb	r2, [r3, #0]
 800e120:	4b63      	ldr	r3, [pc, #396]	; (800e2b0 <Adachi_judge2+0x758>)
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	4618      	mov	r0, r3
 800e126:	4b61      	ldr	r3, [pc, #388]	; (800e2ac <Adachi_judge2+0x754>)
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	461c      	mov	r4, r3
 800e12c:	4962      	ldr	r1, [pc, #392]	; (800e2b8 <Adachi_judge2+0x760>)
 800e12e:	4603      	mov	r3, r0
 800e130:	00db      	lsls	r3, r3, #3
 800e132:	4403      	add	r3, r0
 800e134:	440b      	add	r3, r1
 800e136:	4423      	add	r3, r4
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d20f      	bcs.n	800e15e <Adachi_judge2+0x606>
 800e13e:	4b5c      	ldr	r3, [pc, #368]	; (800e2b0 <Adachi_judge2+0x758>)
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00b      	beq.n	800e15e <Adachi_judge2+0x606>
			  //前西
			  straight();
 800e146:	f7fc fe9f 	bl	800ae88 <straight>
	       	  my_direction = west;
 800e14a:	4b57      	ldr	r3, [pc, #348]	; (800e2a8 <Adachi_judge2+0x750>)
 800e14c:	2203      	movs	r2, #3
 800e14e:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800e150:	4b57      	ldr	r3, [pc, #348]	; (800e2b0 <Adachi_judge2+0x758>)
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	3b01      	subs	r3, #1
 800e156:	b2da      	uxtb	r2, r3
 800e158:	4b55      	ldr	r3, [pc, #340]	; (800e2b0 <Adachi_judge2+0x758>)
 800e15a:	701a      	strb	r2, [r3, #0]
 800e15c:	e099      	b.n	800e292 <Adachi_judge2+0x73a>
		  }
		  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e15e:	4b54      	ldr	r3, [pc, #336]	; (800e2b0 <Adachi_judge2+0x758>)
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	4619      	mov	r1, r3
 800e164:	4b51      	ldr	r3, [pc, #324]	; (800e2ac <Adachi_judge2+0x754>)
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	4618      	mov	r0, r3
 800e16a:	4a52      	ldr	r2, [pc, #328]	; (800e2b4 <Adachi_judge2+0x75c>)
 800e16c:	460b      	mov	r3, r1
 800e16e:	00db      	lsls	r3, r3, #3
 800e170:	440b      	add	r3, r1
 800e172:	4403      	add	r3, r0
 800e174:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e178:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d12b      	bne.n	800e1da <Adachi_judge2+0x682>
 800e182:	4b4b      	ldr	r3, [pc, #300]	; (800e2b0 <Adachi_judge2+0x758>)
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	4618      	mov	r0, r3
 800e188:	4b48      	ldr	r3, [pc, #288]	; (800e2ac <Adachi_judge2+0x754>)
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	1e5a      	subs	r2, r3, #1
 800e18e:	494a      	ldr	r1, [pc, #296]	; (800e2b8 <Adachi_judge2+0x760>)
 800e190:	4603      	mov	r3, r0
 800e192:	00db      	lsls	r3, r3, #3
 800e194:	4403      	add	r3, r0
 800e196:	440b      	add	r3, r1
 800e198:	4413      	add	r3, r2
 800e19a:	781a      	ldrb	r2, [r3, #0]
 800e19c:	4b44      	ldr	r3, [pc, #272]	; (800e2b0 <Adachi_judge2+0x758>)
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	4b42      	ldr	r3, [pc, #264]	; (800e2ac <Adachi_judge2+0x754>)
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	461c      	mov	r4, r3
 800e1a8:	4943      	ldr	r1, [pc, #268]	; (800e2b8 <Adachi_judge2+0x760>)
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	00db      	lsls	r3, r3, #3
 800e1ae:	4403      	add	r3, r0
 800e1b0:	440b      	add	r3, r1
 800e1b2:	4423      	add	r3, r4
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	d20f      	bcs.n	800e1da <Adachi_judge2+0x682>
 800e1ba:	4b3c      	ldr	r3, [pc, #240]	; (800e2ac <Adachi_judge2+0x754>)
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d00b      	beq.n	800e1da <Adachi_judge2+0x682>
			  //左�?
			  L_turn_select();
 800e1c2:	f7fd fcbd 	bl	800bb40 <L_turn_select>
	       	  my_direction = south;
 800e1c6:	4b38      	ldr	r3, [pc, #224]	; (800e2a8 <Adachi_judge2+0x750>)
 800e1c8:	2202      	movs	r2, #2
 800e1ca:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800e1cc:	4b37      	ldr	r3, [pc, #220]	; (800e2ac <Adachi_judge2+0x754>)
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	3b01      	subs	r3, #1
 800e1d2:	b2da      	uxtb	r2, r3
 800e1d4:	4b35      	ldr	r3, [pc, #212]	; (800e2ac <Adachi_judge2+0x754>)
 800e1d6:	701a      	strb	r2, [r3, #0]
 800e1d8:	e05b      	b.n	800e292 <Adachi_judge2+0x73a>
		  }
		  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800e1da:	4b35      	ldr	r3, [pc, #212]	; (800e2b0 <Adachi_judge2+0x758>)
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	4619      	mov	r1, r3
 800e1e0:	4b32      	ldr	r3, [pc, #200]	; (800e2ac <Adachi_judge2+0x754>)
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	4a33      	ldr	r2, [pc, #204]	; (800e2b4 <Adachi_judge2+0x75c>)
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	00db      	lsls	r3, r3, #3
 800e1ec:	440b      	add	r3, r1
 800e1ee:	4403      	add	r3, r0
 800e1f0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e1f4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d12b      	bne.n	800e256 <Adachi_judge2+0x6fe>
 800e1fe:	4b2c      	ldr	r3, [pc, #176]	; (800e2b0 <Adachi_judge2+0x758>)
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	4618      	mov	r0, r3
 800e204:	4b29      	ldr	r3, [pc, #164]	; (800e2ac <Adachi_judge2+0x754>)
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	1c5a      	adds	r2, r3, #1
 800e20a:	492b      	ldr	r1, [pc, #172]	; (800e2b8 <Adachi_judge2+0x760>)
 800e20c:	4603      	mov	r3, r0
 800e20e:	00db      	lsls	r3, r3, #3
 800e210:	4403      	add	r3, r0
 800e212:	440b      	add	r3, r1
 800e214:	4413      	add	r3, r2
 800e216:	781a      	ldrb	r2, [r3, #0]
 800e218:	4b25      	ldr	r3, [pc, #148]	; (800e2b0 <Adachi_judge2+0x758>)
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	4618      	mov	r0, r3
 800e21e:	4b23      	ldr	r3, [pc, #140]	; (800e2ac <Adachi_judge2+0x754>)
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	461c      	mov	r4, r3
 800e224:	4924      	ldr	r1, [pc, #144]	; (800e2b8 <Adachi_judge2+0x760>)
 800e226:	4603      	mov	r3, r0
 800e228:	00db      	lsls	r3, r3, #3
 800e22a:	4403      	add	r3, r0
 800e22c:	440b      	add	r3, r1
 800e22e:	4423      	add	r3, r4
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	429a      	cmp	r2, r3
 800e234:	d20f      	bcs.n	800e256 <Adachi_judge2+0x6fe>
 800e236:	4b1d      	ldr	r3, [pc, #116]	; (800e2ac <Adachi_judge2+0x754>)
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	2b07      	cmp	r3, #7
 800e23c:	d80b      	bhi.n	800e256 <Adachi_judge2+0x6fe>
			  //右�?
			  R_turn_select();
 800e23e:	f7fd fc3b 	bl	800bab8 <R_turn_select>
	       	  my_direction = north;
 800e242:	4b19      	ldr	r3, [pc, #100]	; (800e2a8 <Adachi_judge2+0x750>)
 800e244:	2200      	movs	r2, #0
 800e246:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800e248:	4b18      	ldr	r3, [pc, #96]	; (800e2ac <Adachi_judge2+0x754>)
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	3301      	adds	r3, #1
 800e24e:	b2da      	uxtb	r2, r3
 800e250:	4b16      	ldr	r3, [pc, #88]	; (800e2ac <Adachi_judge2+0x754>)
 800e252:	701a      	strb	r2, [r3, #0]
 800e254:	e01d      	b.n	800e292 <Adachi_judge2+0x73a>
		  }
		  else {
			  //後東
	          Decelerate();
 800e256:	f7fc fd5f 	bl	800ad18 <Decelerate>
	          wait(0.3);;
 800e25a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800e2a0 <Adachi_judge2+0x748>
 800e25e:	f7fc fc2b 	bl	800aab8 <wait>

//	          if(mode.execution == 1)
//	        	  Motor_PWM_Stop();

	  	      rotate180();
 800e262:	f7fd fb47 	bl	800b8f4 <rotate180>
	  	      wait(0.3);;
 800e266:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e2a0 <Adachi_judge2+0x748>
 800e26a:	f7fc fc25 	bl	800aab8 <wait>
	  	      back_calib();
 800e26e:	f7fd fbbb 	bl	800b9e8 <back_calib>
	  	      wait(0.3);
 800e272:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800e2a0 <Adachi_judge2+0x748>
 800e276:	f7fc fc1f 	bl	800aab8 <wait>
	       	  Start_Accel();
 800e27a:	f7fc fc45 	bl	800ab08 <Start_Accel>

	       	  my_direction = east;
 800e27e:	4b0a      	ldr	r3, [pc, #40]	; (800e2a8 <Adachi_judge2+0x750>)
 800e280:	2201      	movs	r2, #1
 800e282:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800e284:	4b0a      	ldr	r3, [pc, #40]	; (800e2b0 <Adachi_judge2+0x758>)
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	3301      	adds	r3, #1
 800e28a:	b2da      	uxtb	r2, r3
 800e28c:	4b08      	ldr	r3, [pc, #32]	; (800e2b0 <Adachi_judge2+0x758>)
 800e28e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800e290:	e001      	b.n	800e296 <Adachi_judge2+0x73e>
 800e292:	e000      	b.n	800e296 <Adachi_judge2+0x73e>

	  default:
		  break;
 800e294:	bf00      	nop
	  }//swtich end
}
 800e296:	bf00      	nop
 800e298:	bd98      	pop	{r3, r4, r7, pc}
 800e29a:	bf00      	nop
 800e29c:	f3af 8000 	nop.w
 800e2a0:	33333333 	.word	0x33333333
 800e2a4:	3fd33333 	.word	0x3fd33333
 800e2a8:	2000449a 	.word	0x2000449a
 800e2ac:	2000030d 	.word	0x2000030d
 800e2b0:	2000030c 	.word	0x2000030c
 800e2b4:	20004f0c 	.word	0x20004f0c
 800e2b8:	20004a60 	.word	0x20004a60
 800e2bc:	00000000 	.word	0x00000000

0800e2c0 <Adachi_search2>:
void Adachi_search2(){
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	af00      	add	r7, sp, #0
	//back_calib();
	/*ここは書籍から引用*/

	Map_Load();
 800e2c4:	f7ff fb88 	bl	800d9d8 <Map_Load>

	//座標�?�初期�?
	x = y = 0;
 800e2c8:	4b33      	ldr	r3, [pc, #204]	; (800e398 <Adachi_search2+0xd8>)
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	701a      	strb	r2, [r3, #0]
 800e2ce:	4b32      	ldr	r3, [pc, #200]	; (800e398 <Adachi_search2+0xd8>)
 800e2d0:	781a      	ldrb	r2, [r3, #0]
 800e2d2:	4b32      	ldr	r3, [pc, #200]	; (800e39c <Adachi_search2+0xdc>)
 800e2d4:	701a      	strb	r2, [r3, #0]
	//方向�?�初期�?
	my_direction=north;
 800e2d6:	4b32      	ldr	r3, [pc, #200]	; (800e3a0 <Adachi_search2+0xe0>)
 800e2d8:	2200      	movs	r2, #0
 800e2da:	701a      	strb	r2, [r3, #0]

	/*ここまで*/

	//壁情報の初期�?
	wall_set();
 800e2dc:	f7fd fee0 	bl	800c0a0 <wall_set>

	//開始位置の後ろはWALL
	//左右はwall_set()でセ�?�?
	wall[x][y].south = WALL;
 800e2e0:	4b2e      	ldr	r3, [pc, #184]	; (800e39c <Adachi_search2+0xdc>)
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	4b2c      	ldr	r3, [pc, #176]	; (800e398 <Adachi_search2+0xd8>)
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	492d      	ldr	r1, [pc, #180]	; (800e3a4 <Adachi_search2+0xe4>)
 800e2ee:	4613      	mov	r3, r2
 800e2f0:	00db      	lsls	r3, r3, #3
 800e2f2:	4413      	add	r3, r2
 800e2f4:	181a      	adds	r2, r3, r0
 800e2f6:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800e2fa:	2001      	movs	r0, #1
 800e2fc:	f360 1305 	bfi	r3, r0, #4, #2
 800e300:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	//歩数マップ�?�更新(ここでは初期�?)
	Walk_Map_Update();
 800e304:	f7fd fd2e 	bl	800bd64 <Walk_Map_Update>

	//�?初�?�直進
	Start_Accel();
 800e308:	f7fc fbfe 	bl	800ab08 <Start_Accel>

	x = 0;
 800e30c:	4b23      	ldr	r3, [pc, #140]	; (800e39c <Adachi_search2+0xdc>)
 800e30e:	2200      	movs	r2, #0
 800e310:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800e312:	4b21      	ldr	r3, [pc, #132]	; (800e398 <Adachi_search2+0xd8>)
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	3301      	adds	r3, #1
 800e318:	b2da      	uxtb	r2, r3
 800e31a:	4b1f      	ldr	r3, [pc, #124]	; (800e398 <Adachi_search2+0xd8>)
 800e31c:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800e31e:	e005      	b.n	800e32c <Adachi_search2+0x6c>
		//壁更新
		wall_set();
 800e320:	f7fd febe 	bl	800c0a0 <wall_set>

		//マップ更新
		Walk_Map_Update();
 800e324:	f7fd fd1e 	bl	800bd64 <Walk_Map_Update>

		//次の動きを判定し動く
		Adachi_judge2();
 800e328:	f7ff fc16 	bl	800db58 <Adachi_judge2>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800e32c:	4b1b      	ldr	r3, [pc, #108]	; (800e39c <Adachi_search2+0xdc>)
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	2b06      	cmp	r3, #6
 800e332:	d9f5      	bls.n	800e320 <Adachi_search2+0x60>
 800e334:	4b19      	ldr	r3, [pc, #100]	; (800e39c <Adachi_search2+0xdc>)
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	2b07      	cmp	r3, #7
 800e33a:	d8f1      	bhi.n	800e320 <Adachi_search2+0x60>
 800e33c:	4b16      	ldr	r3, [pc, #88]	; (800e398 <Adachi_search2+0xd8>)
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	2b06      	cmp	r3, #6
 800e342:	d9ed      	bls.n	800e320 <Adachi_search2+0x60>
 800e344:	4b14      	ldr	r3, [pc, #80]	; (800e398 <Adachi_search2+0xd8>)
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	2b07      	cmp	r3, #7
 800e34a:	d8e9      	bhi.n	800e320 <Adachi_search2+0x60>
	}

	//after-gall#2
	      Decelerate();
 800e34c:	f7fc fce4 	bl	800ad18 <Decelerate>
	      mode.LED = 7;
 800e350:	4b15      	ldr	r3, [pc, #84]	; (800e3a8 <Adachi_search2+0xe8>)
 800e352:	2207      	movs	r2, #7
 800e354:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800e356:	f7fc f8e9 	bl	800a52c <LED_Change>
	      HAL_Delay(1000);
 800e35a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e35e:	f002 fcdf 	bl	8010d20 <HAL_Delay>
//	      mapcopy();
//	      Flash_store();
	      mode.LED = 0;
 800e362:	4b11      	ldr	r3, [pc, #68]	; (800e3a8 <Adachi_search2+0xe8>)
 800e364:	2200      	movs	r2, #0
 800e366:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800e368:	f7fc f8e0 	bl	800a52c <LED_Change>
	      mapcopy();
 800e36c:	f7fb fc14 	bl	8009b98 <mapcopy>
	      Flash_store();
 800e370:	f7fb fda2 	bl	8009eb8 <Flash_store>

	      //ゴールエリア巡回 2×2を想定
	      goal_area_search();
 800e374:	f7fd ffd8 	bl	800c328 <goal_area_search>
	  	  Decelerate();
	      rotate180();
	      wait(0.3);
	      back_calib();
#endif
	      wait(0.3);
 800e378:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800e390 <Adachi_search2+0xd0>
 800e37c:	f7fc fb9c 	bl	800aab8 <wait>
	      mapcopy();
 800e380:	f7fb fc0a 	bl	8009b98 <mapcopy>
	      Flash_store();
 800e384:	f7fb fd98 	bl	8009eb8 <Flash_store>
	      //mode.execution = 3;
	      Motor_PWM_Stop();
 800e388:	f7fb fe5a 	bl	800a040 <Motor_PWM_Stop>
}
 800e38c:	bf00      	nop
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	33333333 	.word	0x33333333
 800e394:	3fd33333 	.word	0x3fd33333
 800e398:	2000030d 	.word	0x2000030d
 800e39c:	2000030c 	.word	0x2000030c
 800e3a0:	2000449a 	.word	0x2000449a
 800e3a4:	20004f0c 	.word	0x20004f0c
 800e3a8:	20000074 	.word	0x20000074
 800e3ac:	00000000 	.word	0x00000000

0800e3b0 <Shortest_Run_Judge>:


void Shortest_Run_Judge(){
 800e3b0:	b598      	push	{r3, r4, r7, lr}
 800e3b2:	af00      	add	r7, sp, #0
	/*------旋回モード選択-----*/
	mode.turn = 0;
 800e3b4:	4b98      	ldr	r3, [pc, #608]	; (800e618 <Shortest_Run_Judge+0x268>)
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	725a      	strb	r2, [r3, #9]
	// 2 : 片輪旋回                  //
	// 3 : IMUで超信地旋回       //
	/*----------------------------*/


	switch(my_direction){
 800e3ba:	4b98      	ldr	r3, [pc, #608]	; (800e61c <Shortest_Run_Judge+0x26c>)
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	2b03      	cmp	r3, #3
 800e3c0:	f200 8398 	bhi.w	800eaf4 <Shortest_Run_Judge+0x744>
 800e3c4:	a201      	add	r2, pc, #4	; (adr r2, 800e3cc <Shortest_Run_Judge+0x1c>)
 800e3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ca:	bf00      	nop
 800e3cc:	0800e3dd 	.word	0x0800e3dd
 800e3d0:	0800e591 	.word	0x0800e591
 800e3d4:	0800e769 	.word	0x0800e769
 800e3d8:	0800e941 	.word	0x0800e941
	  		  case north:
	  			  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800e3dc:	4b90      	ldr	r3, [pc, #576]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	4b90      	ldr	r3, [pc, #576]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	4a8f      	ldr	r2, [pc, #572]	; (800e628 <Shortest_Run_Judge+0x278>)
 800e3ea:	460b      	mov	r3, r1
 800e3ec:	00db      	lsls	r3, r3, #3
 800e3ee:	440b      	add	r3, r1
 800e3f0:	4403      	add	r3, r0
 800e3f2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e3f6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d12b      	bne.n	800e458 <Shortest_Run_Judge+0xa8>
 800e400:	4b87      	ldr	r3, [pc, #540]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	4618      	mov	r0, r3
 800e406:	4b87      	ldr	r3, [pc, #540]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	1c5a      	adds	r2, r3, #1
 800e40c:	4987      	ldr	r1, [pc, #540]	; (800e62c <Shortest_Run_Judge+0x27c>)
 800e40e:	4603      	mov	r3, r0
 800e410:	00db      	lsls	r3, r3, #3
 800e412:	4403      	add	r3, r0
 800e414:	440b      	add	r3, r1
 800e416:	4413      	add	r3, r2
 800e418:	781a      	ldrb	r2, [r3, #0]
 800e41a:	4b81      	ldr	r3, [pc, #516]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	4618      	mov	r0, r3
 800e420:	4b80      	ldr	r3, [pc, #512]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	461c      	mov	r4, r3
 800e426:	4981      	ldr	r1, [pc, #516]	; (800e62c <Shortest_Run_Judge+0x27c>)
 800e428:	4603      	mov	r3, r0
 800e42a:	00db      	lsls	r3, r3, #3
 800e42c:	4403      	add	r3, r0
 800e42e:	440b      	add	r3, r1
 800e430:	4423      	add	r3, r4
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	429a      	cmp	r2, r3
 800e436:	d20f      	bcs.n	800e458 <Shortest_Run_Judge+0xa8>
 800e438:	4b7a      	ldr	r3, [pc, #488]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e43a:	781b      	ldrb	r3, [r3, #0]
 800e43c:	2b07      	cmp	r3, #7
 800e43e:	d80b      	bhi.n	800e458 <Shortest_Run_Judge+0xa8>
	  				  //前北
	  				  straight();
 800e440:	f7fc fd22 	bl	800ae88 <straight>
	  				  my_direction = north;
 800e444:	4b75      	ldr	r3, [pc, #468]	; (800e61c <Shortest_Run_Judge+0x26c>)
 800e446:	2200      	movs	r2, #0
 800e448:	701a      	strb	r2, [r3, #0]
	  				  y++;
 800e44a:	4b76      	ldr	r3, [pc, #472]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	3301      	adds	r3, #1
 800e450:	b2da      	uxtb	r2, r3
 800e452:	4b74      	ldr	r3, [pc, #464]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e454:	701a      	strb	r2, [r3, #0]
 800e456:	e09a      	b.n	800e58e <Shortest_Run_Judge+0x1de>
	  			  }
	  			  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e458:	4b71      	ldr	r3, [pc, #452]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	4619      	mov	r1, r3
 800e45e:	4b71      	ldr	r3, [pc, #452]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	4618      	mov	r0, r3
 800e464:	4a70      	ldr	r2, [pc, #448]	; (800e628 <Shortest_Run_Judge+0x278>)
 800e466:	460b      	mov	r3, r1
 800e468:	00db      	lsls	r3, r3, #3
 800e46a:	440b      	add	r3, r1
 800e46c:	4403      	add	r3, r0
 800e46e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e472:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e476:	b2db      	uxtb	r3, r3
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d12b      	bne.n	800e4d4 <Shortest_Run_Judge+0x124>
 800e47c:	4b68      	ldr	r3, [pc, #416]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	1e5a      	subs	r2, r3, #1
 800e482:	4b68      	ldr	r3, [pc, #416]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	4618      	mov	r0, r3
 800e488:	4968      	ldr	r1, [pc, #416]	; (800e62c <Shortest_Run_Judge+0x27c>)
 800e48a:	4613      	mov	r3, r2
 800e48c:	00db      	lsls	r3, r3, #3
 800e48e:	4413      	add	r3, r2
 800e490:	440b      	add	r3, r1
 800e492:	4403      	add	r3, r0
 800e494:	781a      	ldrb	r2, [r3, #0]
 800e496:	4b62      	ldr	r3, [pc, #392]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	4618      	mov	r0, r3
 800e49c:	4b61      	ldr	r3, [pc, #388]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	461c      	mov	r4, r3
 800e4a2:	4962      	ldr	r1, [pc, #392]	; (800e62c <Shortest_Run_Judge+0x27c>)
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	00db      	lsls	r3, r3, #3
 800e4a8:	4403      	add	r3, r0
 800e4aa:	440b      	add	r3, r1
 800e4ac:	4423      	add	r3, r4
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d20f      	bcs.n	800e4d4 <Shortest_Run_Judge+0x124>
 800e4b4:	4b5a      	ldr	r3, [pc, #360]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d00b      	beq.n	800e4d4 <Shortest_Run_Judge+0x124>
	  				  //左西
	  				  L_turn_select();
 800e4bc:	f7fd fb40 	bl	800bb40 <L_turn_select>
	  				  my_direction = west;
 800e4c0:	4b56      	ldr	r3, [pc, #344]	; (800e61c <Shortest_Run_Judge+0x26c>)
 800e4c2:	2203      	movs	r2, #3
 800e4c4:	701a      	strb	r2, [r3, #0]
	  			      x--;
 800e4c6:	4b56      	ldr	r3, [pc, #344]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	3b01      	subs	r3, #1
 800e4cc:	b2da      	uxtb	r2, r3
 800e4ce:	4b54      	ldr	r3, [pc, #336]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e4d0:	701a      	strb	r2, [r3, #0]
 800e4d2:	e05c      	b.n	800e58e <Shortest_Run_Judge+0x1de>
	  			  }
	  			  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800e4d4:	4b52      	ldr	r3, [pc, #328]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	4619      	mov	r1, r3
 800e4da:	4b52      	ldr	r3, [pc, #328]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	4a51      	ldr	r2, [pc, #324]	; (800e628 <Shortest_Run_Judge+0x278>)
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	00db      	lsls	r3, r3, #3
 800e4e6:	440b      	add	r3, r1
 800e4e8:	4403      	add	r3, r0
 800e4ea:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e4ee:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d12b      	bne.n	800e550 <Shortest_Run_Judge+0x1a0>
 800e4f8:	4b49      	ldr	r3, [pc, #292]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	1c5a      	adds	r2, r3, #1
 800e4fe:	4b49      	ldr	r3, [pc, #292]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	4618      	mov	r0, r3
 800e504:	4949      	ldr	r1, [pc, #292]	; (800e62c <Shortest_Run_Judge+0x27c>)
 800e506:	4613      	mov	r3, r2
 800e508:	00db      	lsls	r3, r3, #3
 800e50a:	4413      	add	r3, r2
 800e50c:	440b      	add	r3, r1
 800e50e:	4403      	add	r3, r0
 800e510:	781a      	ldrb	r2, [r3, #0]
 800e512:	4b43      	ldr	r3, [pc, #268]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	4618      	mov	r0, r3
 800e518:	4b42      	ldr	r3, [pc, #264]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	461c      	mov	r4, r3
 800e51e:	4943      	ldr	r1, [pc, #268]	; (800e62c <Shortest_Run_Judge+0x27c>)
 800e520:	4603      	mov	r3, r0
 800e522:	00db      	lsls	r3, r3, #3
 800e524:	4403      	add	r3, r0
 800e526:	440b      	add	r3, r1
 800e528:	4423      	add	r3, r4
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d20f      	bcs.n	800e550 <Shortest_Run_Judge+0x1a0>
 800e530:	4b3b      	ldr	r3, [pc, #236]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	2b07      	cmp	r3, #7
 800e536:	d80b      	bhi.n	800e550 <Shortest_Run_Judge+0x1a0>
	  				  //右東
	  				  R_turn_select();
 800e538:	f7fd fabe 	bl	800bab8 <R_turn_select>
	  		          my_direction = east;
 800e53c:	4b37      	ldr	r3, [pc, #220]	; (800e61c <Shortest_Run_Judge+0x26c>)
 800e53e:	2201      	movs	r2, #1
 800e540:	701a      	strb	r2, [r3, #0]
	  		          x++;
 800e542:	4b37      	ldr	r3, [pc, #220]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	3301      	adds	r3, #1
 800e548:	b2da      	uxtb	r2, r3
 800e54a:	4b35      	ldr	r3, [pc, #212]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e54c:	701a      	strb	r2, [r3, #0]
 800e54e:	e01e      	b.n	800e58e <Shortest_Run_Judge+0x1de>
	  			  }

	  			  else {
	  				  //後南
	  		          Decelerate();
 800e550:	f7fc fbe2 	bl	800ad18 <Decelerate>
	  		          wait(0.3);;
 800e554:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 800e610 <Shortest_Run_Judge+0x260>
 800e558:	f7fc faae 	bl	800aab8 <wait>

	  		          if(mode.execution == 1)
 800e55c:	4b2e      	ldr	r3, [pc, #184]	; (800e618 <Shortest_Run_Judge+0x268>)
 800e55e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e562:	2b01      	cmp	r3, #1
 800e564:	d101      	bne.n	800e56a <Shortest_Run_Judge+0x1ba>
	  		        	  Motor_PWM_Stop();
 800e566:	f7fb fd6b 	bl	800a040 <Motor_PWM_Stop>

	  		  	      rotate180();
 800e56a:	f7fd f9c3 	bl	800b8f4 <rotate180>
	  		  	      wait(0.3);;
 800e56e:	ed9f 0b28 	vldr	d0, [pc, #160]	; 800e610 <Shortest_Run_Judge+0x260>
 800e572:	f7fc faa1 	bl	800aab8 <wait>
	  		       	  Accelerate();
 800e576:	f7fc fb1f 	bl	800abb8 <Accelerate>
	  		       	  my_direction = south;
 800e57a:	4b28      	ldr	r3, [pc, #160]	; (800e61c <Shortest_Run_Judge+0x26c>)
 800e57c:	2202      	movs	r2, #2
 800e57e:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800e580:	4b28      	ldr	r3, [pc, #160]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	3b01      	subs	r3, #1
 800e586:	b2da      	uxtb	r2, r3
 800e588:	4b26      	ldr	r3, [pc, #152]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e58a:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800e58c:	e2b3      	b.n	800eaf6 <Shortest_Run_Judge+0x746>
 800e58e:	e2b2      	b.n	800eaf6 <Shortest_Run_Judge+0x746>

	  		  case east:

	  			  if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800e590:	4b23      	ldr	r3, [pc, #140]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	4619      	mov	r1, r3
 800e596:	4b23      	ldr	r3, [pc, #140]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	4618      	mov	r0, r3
 800e59c:	4a22      	ldr	r2, [pc, #136]	; (800e628 <Shortest_Run_Judge+0x278>)
 800e59e:	460b      	mov	r3, r1
 800e5a0:	00db      	lsls	r3, r3, #3
 800e5a2:	440b      	add	r3, r1
 800e5a4:	4403      	add	r3, r0
 800e5a6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e5aa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d13d      	bne.n	800e630 <Shortest_Run_Judge+0x280>
 800e5b4:	4b1a      	ldr	r3, [pc, #104]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	1c5a      	adds	r2, r3, #1
 800e5ba:	4b1a      	ldr	r3, [pc, #104]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	491a      	ldr	r1, [pc, #104]	; (800e62c <Shortest_Run_Judge+0x27c>)
 800e5c2:	4613      	mov	r3, r2
 800e5c4:	00db      	lsls	r3, r3, #3
 800e5c6:	4413      	add	r3, r2
 800e5c8:	440b      	add	r3, r1
 800e5ca:	4403      	add	r3, r0
 800e5cc:	781a      	ldrb	r2, [r3, #0]
 800e5ce:	4b14      	ldr	r3, [pc, #80]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	4b13      	ldr	r3, [pc, #76]	; (800e624 <Shortest_Run_Judge+0x274>)
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	461c      	mov	r4, r3
 800e5da:	4914      	ldr	r1, [pc, #80]	; (800e62c <Shortest_Run_Judge+0x27c>)
 800e5dc:	4603      	mov	r3, r0
 800e5de:	00db      	lsls	r3, r3, #3
 800e5e0:	4403      	add	r3, r0
 800e5e2:	440b      	add	r3, r1
 800e5e4:	4423      	add	r3, r4
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d221      	bcs.n	800e630 <Shortest_Run_Judge+0x280>
 800e5ec:	4b0c      	ldr	r3, [pc, #48]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	2b07      	cmp	r3, #7
 800e5f2:	d81d      	bhi.n	800e630 <Shortest_Run_Judge+0x280>
	  				  //前東
	  				  straight();
 800e5f4:	f7fc fc48 	bl	800ae88 <straight>
	  		       	  my_direction = east;
 800e5f8:	4b08      	ldr	r3, [pc, #32]	; (800e61c <Shortest_Run_Judge+0x26c>)
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800e5fe:	4b08      	ldr	r3, [pc, #32]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	3301      	adds	r3, #1
 800e604:	b2da      	uxtb	r2, r3
 800e606:	4b06      	ldr	r3, [pc, #24]	; (800e620 <Shortest_Run_Judge+0x270>)
 800e608:	701a      	strb	r2, [r3, #0]
 800e60a:	e0ac      	b.n	800e766 <Shortest_Run_Judge+0x3b6>
 800e60c:	f3af 8000 	nop.w
 800e610:	33333333 	.word	0x33333333
 800e614:	3fd33333 	.word	0x3fd33333
 800e618:	20000074 	.word	0x20000074
 800e61c:	2000449a 	.word	0x2000449a
 800e620:	2000030c 	.word	0x2000030c
 800e624:	2000030d 	.word	0x2000030d
 800e628:	20004f0c 	.word	0x20004f0c
 800e62c:	20004a60 	.word	0x20004a60
	  			  }
	  			  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800e630:	4bad      	ldr	r3, [pc, #692]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	4619      	mov	r1, r3
 800e636:	4bad      	ldr	r3, [pc, #692]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	4618      	mov	r0, r3
 800e63c:	4aac      	ldr	r2, [pc, #688]	; (800e8f0 <Shortest_Run_Judge+0x540>)
 800e63e:	460b      	mov	r3, r1
 800e640:	00db      	lsls	r3, r3, #3
 800e642:	440b      	add	r3, r1
 800e644:	4403      	add	r3, r0
 800e646:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e64a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	2b00      	cmp	r3, #0
 800e652:	d12b      	bne.n	800e6ac <Shortest_Run_Judge+0x2fc>
 800e654:	4ba4      	ldr	r3, [pc, #656]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	4618      	mov	r0, r3
 800e65a:	4ba4      	ldr	r3, [pc, #656]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	1c5a      	adds	r2, r3, #1
 800e660:	49a4      	ldr	r1, [pc, #656]	; (800e8f4 <Shortest_Run_Judge+0x544>)
 800e662:	4603      	mov	r3, r0
 800e664:	00db      	lsls	r3, r3, #3
 800e666:	4403      	add	r3, r0
 800e668:	440b      	add	r3, r1
 800e66a:	4413      	add	r3, r2
 800e66c:	781a      	ldrb	r2, [r3, #0]
 800e66e:	4b9e      	ldr	r3, [pc, #632]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	4618      	mov	r0, r3
 800e674:	4b9d      	ldr	r3, [pc, #628]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	461c      	mov	r4, r3
 800e67a:	499e      	ldr	r1, [pc, #632]	; (800e8f4 <Shortest_Run_Judge+0x544>)
 800e67c:	4603      	mov	r3, r0
 800e67e:	00db      	lsls	r3, r3, #3
 800e680:	4403      	add	r3, r0
 800e682:	440b      	add	r3, r1
 800e684:	4423      	add	r3, r4
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	429a      	cmp	r2, r3
 800e68a:	d20f      	bcs.n	800e6ac <Shortest_Run_Judge+0x2fc>
 800e68c:	4b97      	ldr	r3, [pc, #604]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	2b07      	cmp	r3, #7
 800e692:	d80b      	bhi.n	800e6ac <Shortest_Run_Judge+0x2fc>
	  				  //左�?
	  				  L_turn_select();
 800e694:	f7fd fa54 	bl	800bb40 <L_turn_select>
	  		       	  my_direction = north;
 800e698:	4b97      	ldr	r3, [pc, #604]	; (800e8f8 <Shortest_Run_Judge+0x548>)
 800e69a:	2200      	movs	r2, #0
 800e69c:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800e69e:	4b93      	ldr	r3, [pc, #588]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	b2da      	uxtb	r2, r3
 800e6a6:	4b91      	ldr	r3, [pc, #580]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e6a8:	701a      	strb	r2, [r3, #0]
 800e6aa:	e05c      	b.n	800e766 <Shortest_Run_Judge+0x3b6>
	  			  }
	  			  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e6ac:	4b8e      	ldr	r3, [pc, #568]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	4b8e      	ldr	r3, [pc, #568]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	4a8d      	ldr	r2, [pc, #564]	; (800e8f0 <Shortest_Run_Judge+0x540>)
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	00db      	lsls	r3, r3, #3
 800e6be:	440b      	add	r3, r1
 800e6c0:	4403      	add	r3, r0
 800e6c2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e6c6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e6ca:	b2db      	uxtb	r3, r3
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d12b      	bne.n	800e728 <Shortest_Run_Judge+0x378>
 800e6d0:	4b85      	ldr	r3, [pc, #532]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	4b85      	ldr	r3, [pc, #532]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	1e5a      	subs	r2, r3, #1
 800e6dc:	4985      	ldr	r1, [pc, #532]	; (800e8f4 <Shortest_Run_Judge+0x544>)
 800e6de:	4603      	mov	r3, r0
 800e6e0:	00db      	lsls	r3, r3, #3
 800e6e2:	4403      	add	r3, r0
 800e6e4:	440b      	add	r3, r1
 800e6e6:	4413      	add	r3, r2
 800e6e8:	781a      	ldrb	r2, [r3, #0]
 800e6ea:	4b7f      	ldr	r3, [pc, #508]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	4b7e      	ldr	r3, [pc, #504]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	461c      	mov	r4, r3
 800e6f6:	497f      	ldr	r1, [pc, #508]	; (800e8f4 <Shortest_Run_Judge+0x544>)
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	00db      	lsls	r3, r3, #3
 800e6fc:	4403      	add	r3, r0
 800e6fe:	440b      	add	r3, r1
 800e700:	4423      	add	r3, r4
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	429a      	cmp	r2, r3
 800e706:	d20f      	bcs.n	800e728 <Shortest_Run_Judge+0x378>
 800e708:	4b78      	ldr	r3, [pc, #480]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d00b      	beq.n	800e728 <Shortest_Run_Judge+0x378>
	  				  //右�?
	  				  R_turn_select();
 800e710:	f7fd f9d2 	bl	800bab8 <R_turn_select>
	  		       	  my_direction = south;
 800e714:	4b78      	ldr	r3, [pc, #480]	; (800e8f8 <Shortest_Run_Judge+0x548>)
 800e716:	2202      	movs	r2, #2
 800e718:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800e71a:	4b74      	ldr	r3, [pc, #464]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	3b01      	subs	r3, #1
 800e720:	b2da      	uxtb	r2, r3
 800e722:	4b72      	ldr	r3, [pc, #456]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e724:	701a      	strb	r2, [r3, #0]
 800e726:	e01e      	b.n	800e766 <Shortest_Run_Judge+0x3b6>
	  			  }
	  			  else {
	  				  //後西
	  		          Decelerate();
 800e728:	f7fc faf6 	bl	800ad18 <Decelerate>
	  		          wait(0.3);;
 800e72c:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 800e8e0 <Shortest_Run_Judge+0x530>
 800e730:	f7fc f9c2 	bl	800aab8 <wait>

	  		          if(mode.execution == 1)
 800e734:	4b71      	ldr	r3, [pc, #452]	; (800e8fc <Shortest_Run_Judge+0x54c>)
 800e736:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	d101      	bne.n	800e742 <Shortest_Run_Judge+0x392>
	  		        	  Motor_PWM_Stop();
 800e73e:	f7fb fc7f 	bl	800a040 <Motor_PWM_Stop>

	  		  	      rotate180();
 800e742:	f7fd f8d7 	bl	800b8f4 <rotate180>
	  		  	      wait(0.3);;
 800e746:	ed9f 0b66 	vldr	d0, [pc, #408]	; 800e8e0 <Shortest_Run_Judge+0x530>
 800e74a:	f7fc f9b5 	bl	800aab8 <wait>
	  		       	  Accelerate();
 800e74e:	f7fc fa33 	bl	800abb8 <Accelerate>

	  		       	  my_direction = west;
 800e752:	4b69      	ldr	r3, [pc, #420]	; (800e8f8 <Shortest_Run_Judge+0x548>)
 800e754:	2203      	movs	r2, #3
 800e756:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800e758:	4b63      	ldr	r3, [pc, #396]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	3b01      	subs	r3, #1
 800e75e:	b2da      	uxtb	r2, r3
 800e760:	4b61      	ldr	r3, [pc, #388]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e762:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800e764:	e1c7      	b.n	800eaf6 <Shortest_Run_Judge+0x746>
 800e766:	e1c6      	b.n	800eaf6 <Shortest_Run_Judge+0x746>

	  		  case south:

	  			  if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e768:	4b5f      	ldr	r3, [pc, #380]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	4619      	mov	r1, r3
 800e76e:	4b5f      	ldr	r3, [pc, #380]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	4618      	mov	r0, r3
 800e774:	4a5e      	ldr	r2, [pc, #376]	; (800e8f0 <Shortest_Run_Judge+0x540>)
 800e776:	460b      	mov	r3, r1
 800e778:	00db      	lsls	r3, r3, #3
 800e77a:	440b      	add	r3, r1
 800e77c:	4403      	add	r3, r0
 800e77e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e782:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e786:	b2db      	uxtb	r3, r3
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d12b      	bne.n	800e7e4 <Shortest_Run_Judge+0x434>
 800e78c:	4b56      	ldr	r3, [pc, #344]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	4618      	mov	r0, r3
 800e792:	4b56      	ldr	r3, [pc, #344]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	1e5a      	subs	r2, r3, #1
 800e798:	4956      	ldr	r1, [pc, #344]	; (800e8f4 <Shortest_Run_Judge+0x544>)
 800e79a:	4603      	mov	r3, r0
 800e79c:	00db      	lsls	r3, r3, #3
 800e79e:	4403      	add	r3, r0
 800e7a0:	440b      	add	r3, r1
 800e7a2:	4413      	add	r3, r2
 800e7a4:	781a      	ldrb	r2, [r3, #0]
 800e7a6:	4b50      	ldr	r3, [pc, #320]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e7a8:	781b      	ldrb	r3, [r3, #0]
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	4b4f      	ldr	r3, [pc, #316]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	461c      	mov	r4, r3
 800e7b2:	4950      	ldr	r1, [pc, #320]	; (800e8f4 <Shortest_Run_Judge+0x544>)
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	00db      	lsls	r3, r3, #3
 800e7b8:	4403      	add	r3, r0
 800e7ba:	440b      	add	r3, r1
 800e7bc:	4423      	add	r3, r4
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d20f      	bcs.n	800e7e4 <Shortest_Run_Judge+0x434>
 800e7c4:	4b49      	ldr	r3, [pc, #292]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e7c6:	781b      	ldrb	r3, [r3, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d00b      	beq.n	800e7e4 <Shortest_Run_Judge+0x434>
	  				  //前南
	  				  straight();
 800e7cc:	f7fc fb5c 	bl	800ae88 <straight>
	  		       	  my_direction = south;
 800e7d0:	4b49      	ldr	r3, [pc, #292]	; (800e8f8 <Shortest_Run_Judge+0x548>)
 800e7d2:	2202      	movs	r2, #2
 800e7d4:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800e7d6:	4b45      	ldr	r3, [pc, #276]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	3b01      	subs	r3, #1
 800e7dc:	b2da      	uxtb	r2, r3
 800e7de:	4b43      	ldr	r3, [pc, #268]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e7e0:	701a      	strb	r2, [r3, #0]
 800e7e2:	e0ac      	b.n	800e93e <Shortest_Run_Judge+0x58e>
	  			  }
	  			  else if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800e7e4:	4b40      	ldr	r3, [pc, #256]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	4b40      	ldr	r3, [pc, #256]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	4a3f      	ldr	r2, [pc, #252]	; (800e8f0 <Shortest_Run_Judge+0x540>)
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	00db      	lsls	r3, r3, #3
 800e7f6:	440b      	add	r3, r1
 800e7f8:	4403      	add	r3, r0
 800e7fa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e7fe:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e802:	b2db      	uxtb	r3, r3
 800e804:	2b00      	cmp	r3, #0
 800e806:	d12b      	bne.n	800e860 <Shortest_Run_Judge+0x4b0>
 800e808:	4b37      	ldr	r3, [pc, #220]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	1c5a      	adds	r2, r3, #1
 800e80e:	4b37      	ldr	r3, [pc, #220]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	4618      	mov	r0, r3
 800e814:	4937      	ldr	r1, [pc, #220]	; (800e8f4 <Shortest_Run_Judge+0x544>)
 800e816:	4613      	mov	r3, r2
 800e818:	00db      	lsls	r3, r3, #3
 800e81a:	4413      	add	r3, r2
 800e81c:	440b      	add	r3, r1
 800e81e:	4403      	add	r3, r0
 800e820:	781a      	ldrb	r2, [r3, #0]
 800e822:	4b31      	ldr	r3, [pc, #196]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	4618      	mov	r0, r3
 800e828:	4b30      	ldr	r3, [pc, #192]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	461c      	mov	r4, r3
 800e82e:	4931      	ldr	r1, [pc, #196]	; (800e8f4 <Shortest_Run_Judge+0x544>)
 800e830:	4603      	mov	r3, r0
 800e832:	00db      	lsls	r3, r3, #3
 800e834:	4403      	add	r3, r0
 800e836:	440b      	add	r3, r1
 800e838:	4423      	add	r3, r4
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d20f      	bcs.n	800e860 <Shortest_Run_Judge+0x4b0>
 800e840:	4b29      	ldr	r3, [pc, #164]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	2b07      	cmp	r3, #7
 800e846:	d80b      	bhi.n	800e860 <Shortest_Run_Judge+0x4b0>
	  				  //左東
	  				  L_turn_select();
 800e848:	f7fd f97a 	bl	800bb40 <L_turn_select>
	  		       	  my_direction = east;
 800e84c:	4b2a      	ldr	r3, [pc, #168]	; (800e8f8 <Shortest_Run_Judge+0x548>)
 800e84e:	2201      	movs	r2, #1
 800e850:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800e852:	4b25      	ldr	r3, [pc, #148]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	3301      	adds	r3, #1
 800e858:	b2da      	uxtb	r2, r3
 800e85a:	4b23      	ldr	r3, [pc, #140]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e85c:	701a      	strb	r2, [r3, #0]
 800e85e:	e06e      	b.n	800e93e <Shortest_Run_Judge+0x58e>
	  			  }
	  			  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e860:	4b21      	ldr	r3, [pc, #132]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	4619      	mov	r1, r3
 800e866:	4b21      	ldr	r3, [pc, #132]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	4618      	mov	r0, r3
 800e86c:	4a20      	ldr	r2, [pc, #128]	; (800e8f0 <Shortest_Run_Judge+0x540>)
 800e86e:	460b      	mov	r3, r1
 800e870:	00db      	lsls	r3, r3, #3
 800e872:	440b      	add	r3, r1
 800e874:	4403      	add	r3, r0
 800e876:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e87a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	2b00      	cmp	r3, #0
 800e882:	d13d      	bne.n	800e900 <Shortest_Run_Judge+0x550>
 800e884:	4b18      	ldr	r3, [pc, #96]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	1e5a      	subs	r2, r3, #1
 800e88a:	4b18      	ldr	r3, [pc, #96]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	4618      	mov	r0, r3
 800e890:	4918      	ldr	r1, [pc, #96]	; (800e8f4 <Shortest_Run_Judge+0x544>)
 800e892:	4613      	mov	r3, r2
 800e894:	00db      	lsls	r3, r3, #3
 800e896:	4413      	add	r3, r2
 800e898:	440b      	add	r3, r1
 800e89a:	4403      	add	r3, r0
 800e89c:	781a      	ldrb	r2, [r3, #0]
 800e89e:	4b12      	ldr	r3, [pc, #72]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	4b11      	ldr	r3, [pc, #68]	; (800e8ec <Shortest_Run_Judge+0x53c>)
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	461c      	mov	r4, r3
 800e8aa:	4912      	ldr	r1, [pc, #72]	; (800e8f4 <Shortest_Run_Judge+0x544>)
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	00db      	lsls	r3, r3, #3
 800e8b0:	4403      	add	r3, r0
 800e8b2:	440b      	add	r3, r1
 800e8b4:	4423      	add	r3, r4
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d221      	bcs.n	800e900 <Shortest_Run_Judge+0x550>
 800e8bc:	4b0a      	ldr	r3, [pc, #40]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d01d      	beq.n	800e900 <Shortest_Run_Judge+0x550>
	  				  //右西
	  				  R_turn_select();
 800e8c4:	f7fd f8f8 	bl	800bab8 <R_turn_select>
	  		       	  my_direction = west;
 800e8c8:	4b0b      	ldr	r3, [pc, #44]	; (800e8f8 <Shortest_Run_Judge+0x548>)
 800e8ca:	2203      	movs	r2, #3
 800e8cc:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800e8ce:	4b06      	ldr	r3, [pc, #24]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	3b01      	subs	r3, #1
 800e8d4:	b2da      	uxtb	r2, r3
 800e8d6:	4b04      	ldr	r3, [pc, #16]	; (800e8e8 <Shortest_Run_Judge+0x538>)
 800e8d8:	701a      	strb	r2, [r3, #0]
 800e8da:	e030      	b.n	800e93e <Shortest_Run_Judge+0x58e>
 800e8dc:	f3af 8000 	nop.w
 800e8e0:	33333333 	.word	0x33333333
 800e8e4:	3fd33333 	.word	0x3fd33333
 800e8e8:	2000030c 	.word	0x2000030c
 800e8ec:	2000030d 	.word	0x2000030d
 800e8f0:	20004f0c 	.word	0x20004f0c
 800e8f4:	20004a60 	.word	0x20004a60
 800e8f8:	2000449a 	.word	0x2000449a
 800e8fc:	20000074 	.word	0x20000074
	  			  }
	  			  else {
	  				  //後北
	  		          Decelerate();
 800e900:	f7fc fa0a 	bl	800ad18 <Decelerate>
	  		          wait(0.3);;
 800e904:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 800eb00 <Shortest_Run_Judge+0x750>
 800e908:	f7fc f8d6 	bl	800aab8 <wait>

	  		          if(mode.execution == 1)
 800e90c:	4b7e      	ldr	r3, [pc, #504]	; (800eb08 <Shortest_Run_Judge+0x758>)
 800e90e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e912:	2b01      	cmp	r3, #1
 800e914:	d101      	bne.n	800e91a <Shortest_Run_Judge+0x56a>
	  		        	  Motor_PWM_Stop();
 800e916:	f7fb fb93 	bl	800a040 <Motor_PWM_Stop>

	  		  	      rotate180();
 800e91a:	f7fc ffeb 	bl	800b8f4 <rotate180>
	  		  	      wait(0.3);;
 800e91e:	ed9f 0b78 	vldr	d0, [pc, #480]	; 800eb00 <Shortest_Run_Judge+0x750>
 800e922:	f7fc f8c9 	bl	800aab8 <wait>
	  		       	  Accelerate();
 800e926:	f7fc f947 	bl	800abb8 <Accelerate>

	  		       	  my_direction = north;
 800e92a:	4b78      	ldr	r3, [pc, #480]	; (800eb0c <Shortest_Run_Judge+0x75c>)
 800e92c:	2200      	movs	r2, #0
 800e92e:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800e930:	4b77      	ldr	r3, [pc, #476]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	3301      	adds	r3, #1
 800e936:	b2da      	uxtb	r2, r3
 800e938:	4b75      	ldr	r3, [pc, #468]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800e93a:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800e93c:	e0db      	b.n	800eaf6 <Shortest_Run_Judge+0x746>
 800e93e:	e0da      	b.n	800eaf6 <Shortest_Run_Judge+0x746>

	  		  case west:

	  			  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800e940:	4b74      	ldr	r3, [pc, #464]	; (800eb14 <Shortest_Run_Judge+0x764>)
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	4619      	mov	r1, r3
 800e946:	4b72      	ldr	r3, [pc, #456]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	4618      	mov	r0, r3
 800e94c:	4a72      	ldr	r2, [pc, #456]	; (800eb18 <Shortest_Run_Judge+0x768>)
 800e94e:	460b      	mov	r3, r1
 800e950:	00db      	lsls	r3, r3, #3
 800e952:	440b      	add	r3, r1
 800e954:	4403      	add	r3, r0
 800e956:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e95a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	2b00      	cmp	r3, #0
 800e962:	d12b      	bne.n	800e9bc <Shortest_Run_Judge+0x60c>
 800e964:	4b6b      	ldr	r3, [pc, #428]	; (800eb14 <Shortest_Run_Judge+0x764>)
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	1e5a      	subs	r2, r3, #1
 800e96a:	4b69      	ldr	r3, [pc, #420]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	4618      	mov	r0, r3
 800e970:	496a      	ldr	r1, [pc, #424]	; (800eb1c <Shortest_Run_Judge+0x76c>)
 800e972:	4613      	mov	r3, r2
 800e974:	00db      	lsls	r3, r3, #3
 800e976:	4413      	add	r3, r2
 800e978:	440b      	add	r3, r1
 800e97a:	4403      	add	r3, r0
 800e97c:	781a      	ldrb	r2, [r3, #0]
 800e97e:	4b65      	ldr	r3, [pc, #404]	; (800eb14 <Shortest_Run_Judge+0x764>)
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	4618      	mov	r0, r3
 800e984:	4b62      	ldr	r3, [pc, #392]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	461c      	mov	r4, r3
 800e98a:	4964      	ldr	r1, [pc, #400]	; (800eb1c <Shortest_Run_Judge+0x76c>)
 800e98c:	4603      	mov	r3, r0
 800e98e:	00db      	lsls	r3, r3, #3
 800e990:	4403      	add	r3, r0
 800e992:	440b      	add	r3, r1
 800e994:	4423      	add	r3, r4
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d20f      	bcs.n	800e9bc <Shortest_Run_Judge+0x60c>
 800e99c:	4b5d      	ldr	r3, [pc, #372]	; (800eb14 <Shortest_Run_Judge+0x764>)
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d00b      	beq.n	800e9bc <Shortest_Run_Judge+0x60c>
	  				  //前西
	  				  straight();
 800e9a4:	f7fc fa70 	bl	800ae88 <straight>
	  		       	  my_direction = west;
 800e9a8:	4b58      	ldr	r3, [pc, #352]	; (800eb0c <Shortest_Run_Judge+0x75c>)
 800e9aa:	2203      	movs	r2, #3
 800e9ac:	701a      	strb	r2, [r3, #0]
	  		       	  x--;
 800e9ae:	4b59      	ldr	r3, [pc, #356]	; (800eb14 <Shortest_Run_Judge+0x764>)
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	3b01      	subs	r3, #1
 800e9b4:	b2da      	uxtb	r2, r3
 800e9b6:	4b57      	ldr	r3, [pc, #348]	; (800eb14 <Shortest_Run_Judge+0x764>)
 800e9b8:	701a      	strb	r2, [r3, #0]
 800e9ba:	e09a      	b.n	800eaf2 <Shortest_Run_Judge+0x742>
	  			  }
	  			  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800e9bc:	4b55      	ldr	r3, [pc, #340]	; (800eb14 <Shortest_Run_Judge+0x764>)
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	4b53      	ldr	r3, [pc, #332]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	4a53      	ldr	r2, [pc, #332]	; (800eb18 <Shortest_Run_Judge+0x768>)
 800e9ca:	460b      	mov	r3, r1
 800e9cc:	00db      	lsls	r3, r3, #3
 800e9ce:	440b      	add	r3, r1
 800e9d0:	4403      	add	r3, r0
 800e9d2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e9d6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d12b      	bne.n	800ea38 <Shortest_Run_Judge+0x688>
 800e9e0:	4b4c      	ldr	r3, [pc, #304]	; (800eb14 <Shortest_Run_Judge+0x764>)
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	4b4a      	ldr	r3, [pc, #296]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	1e5a      	subs	r2, r3, #1
 800e9ec:	494b      	ldr	r1, [pc, #300]	; (800eb1c <Shortest_Run_Judge+0x76c>)
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	00db      	lsls	r3, r3, #3
 800e9f2:	4403      	add	r3, r0
 800e9f4:	440b      	add	r3, r1
 800e9f6:	4413      	add	r3, r2
 800e9f8:	781a      	ldrb	r2, [r3, #0]
 800e9fa:	4b46      	ldr	r3, [pc, #280]	; (800eb14 <Shortest_Run_Judge+0x764>)
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	4618      	mov	r0, r3
 800ea00:	4b43      	ldr	r3, [pc, #268]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	461c      	mov	r4, r3
 800ea06:	4945      	ldr	r1, [pc, #276]	; (800eb1c <Shortest_Run_Judge+0x76c>)
 800ea08:	4603      	mov	r3, r0
 800ea0a:	00db      	lsls	r3, r3, #3
 800ea0c:	4403      	add	r3, r0
 800ea0e:	440b      	add	r3, r1
 800ea10:	4423      	add	r3, r4
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d20f      	bcs.n	800ea38 <Shortest_Run_Judge+0x688>
 800ea18:	4b3d      	ldr	r3, [pc, #244]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d00b      	beq.n	800ea38 <Shortest_Run_Judge+0x688>
	  				  //左�?
	  				  L_turn_select();
 800ea20:	f7fd f88e 	bl	800bb40 <L_turn_select>
	  		       	  my_direction = south;
 800ea24:	4b39      	ldr	r3, [pc, #228]	; (800eb0c <Shortest_Run_Judge+0x75c>)
 800ea26:	2202      	movs	r2, #2
 800ea28:	701a      	strb	r2, [r3, #0]
	  		       	  y--;
 800ea2a:	4b39      	ldr	r3, [pc, #228]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	b2da      	uxtb	r2, r3
 800ea32:	4b37      	ldr	r3, [pc, #220]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800ea34:	701a      	strb	r2, [r3, #0]
 800ea36:	e05c      	b.n	800eaf2 <Shortest_Run_Judge+0x742>
	  			  }
	  			  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800ea38:	4b36      	ldr	r3, [pc, #216]	; (800eb14 <Shortest_Run_Judge+0x764>)
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	4b34      	ldr	r3, [pc, #208]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	4618      	mov	r0, r3
 800ea44:	4a34      	ldr	r2, [pc, #208]	; (800eb18 <Shortest_Run_Judge+0x768>)
 800ea46:	460b      	mov	r3, r1
 800ea48:	00db      	lsls	r3, r3, #3
 800ea4a:	440b      	add	r3, r1
 800ea4c:	4403      	add	r3, r0
 800ea4e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ea52:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d12b      	bne.n	800eab4 <Shortest_Run_Judge+0x704>
 800ea5c:	4b2d      	ldr	r3, [pc, #180]	; (800eb14 <Shortest_Run_Judge+0x764>)
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	4618      	mov	r0, r3
 800ea62:	4b2b      	ldr	r3, [pc, #172]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	1c5a      	adds	r2, r3, #1
 800ea68:	492c      	ldr	r1, [pc, #176]	; (800eb1c <Shortest_Run_Judge+0x76c>)
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	00db      	lsls	r3, r3, #3
 800ea6e:	4403      	add	r3, r0
 800ea70:	440b      	add	r3, r1
 800ea72:	4413      	add	r3, r2
 800ea74:	781a      	ldrb	r2, [r3, #0]
 800ea76:	4b27      	ldr	r3, [pc, #156]	; (800eb14 <Shortest_Run_Judge+0x764>)
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	4b24      	ldr	r3, [pc, #144]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800ea7e:	781b      	ldrb	r3, [r3, #0]
 800ea80:	461c      	mov	r4, r3
 800ea82:	4926      	ldr	r1, [pc, #152]	; (800eb1c <Shortest_Run_Judge+0x76c>)
 800ea84:	4603      	mov	r3, r0
 800ea86:	00db      	lsls	r3, r3, #3
 800ea88:	4403      	add	r3, r0
 800ea8a:	440b      	add	r3, r1
 800ea8c:	4423      	add	r3, r4
 800ea8e:	781b      	ldrb	r3, [r3, #0]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d20f      	bcs.n	800eab4 <Shortest_Run_Judge+0x704>
 800ea94:	4b1e      	ldr	r3, [pc, #120]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	2b07      	cmp	r3, #7
 800ea9a:	d80b      	bhi.n	800eab4 <Shortest_Run_Judge+0x704>
	  				  //右�?
	  				  R_turn_select();
 800ea9c:	f7fd f80c 	bl	800bab8 <R_turn_select>
	  		       	  my_direction = north;
 800eaa0:	4b1a      	ldr	r3, [pc, #104]	; (800eb0c <Shortest_Run_Judge+0x75c>)
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	701a      	strb	r2, [r3, #0]
	  		       	  y++;
 800eaa6:	4b1a      	ldr	r3, [pc, #104]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	3301      	adds	r3, #1
 800eaac:	b2da      	uxtb	r2, r3
 800eaae:	4b18      	ldr	r3, [pc, #96]	; (800eb10 <Shortest_Run_Judge+0x760>)
 800eab0:	701a      	strb	r2, [r3, #0]
 800eab2:	e01e      	b.n	800eaf2 <Shortest_Run_Judge+0x742>
	  			  }
	  			  else {
	  				  //後東
	  		          Decelerate();
 800eab4:	f7fc f930 	bl	800ad18 <Decelerate>
	  		          wait(0.3);;
 800eab8:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800eb00 <Shortest_Run_Judge+0x750>
 800eabc:	f7fb fffc 	bl	800aab8 <wait>

	  		          if(mode.execution == 1)
 800eac0:	4b11      	ldr	r3, [pc, #68]	; (800eb08 <Shortest_Run_Judge+0x758>)
 800eac2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d101      	bne.n	800eace <Shortest_Run_Judge+0x71e>
	  		        	  Motor_PWM_Stop();
 800eaca:	f7fb fab9 	bl	800a040 <Motor_PWM_Stop>

	  		  	      rotate180();
 800eace:	f7fc ff11 	bl	800b8f4 <rotate180>
	  		  	      wait(0.3);;
 800ead2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800eb00 <Shortest_Run_Judge+0x750>
 800ead6:	f7fb ffef 	bl	800aab8 <wait>
	  		       	  Accelerate();
 800eada:	f7fc f86d 	bl	800abb8 <Accelerate>

	  		       	  my_direction = east;
 800eade:	4b0b      	ldr	r3, [pc, #44]	; (800eb0c <Shortest_Run_Judge+0x75c>)
 800eae0:	2201      	movs	r2, #1
 800eae2:	701a      	strb	r2, [r3, #0]
	  		       	  x++;
 800eae4:	4b0b      	ldr	r3, [pc, #44]	; (800eb14 <Shortest_Run_Judge+0x764>)
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	3301      	adds	r3, #1
 800eaea:	b2da      	uxtb	r2, r3
 800eaec:	4b09      	ldr	r3, [pc, #36]	; (800eb14 <Shortest_Run_Judge+0x764>)
 800eaee:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  break;
 800eaf0:	e001      	b.n	800eaf6 <Shortest_Run_Judge+0x746>
 800eaf2:	e000      	b.n	800eaf6 <Shortest_Run_Judge+0x746>

	  		  default:
	  			  break;
 800eaf4:	bf00      	nop
	  		  }//swtich end
}
 800eaf6:	bf00      	nop
 800eaf8:	bd98      	pop	{r3, r4, r7, pc}
 800eafa:	bf00      	nop
 800eafc:	f3af 8000 	nop.w
 800eb00:	33333333 	.word	0x33333333
 800eb04:	3fd33333 	.word	0x3fd33333
 800eb08:	20000074 	.word	0x20000074
 800eb0c:	2000449a 	.word	0x2000449a
 800eb10:	2000030d 	.word	0x2000030d
 800eb14:	2000030c 	.word	0x2000030c
 800eb18:	20004f0c 	.word	0x20004f0c
 800eb1c:	20004a60 	.word	0x20004a60

0800eb20 <Shortest_Run>:
void Shortest_Run(){
 800eb20:	b598      	push	{r3, r4, r7, lr}
 800eb22:	af00      	add	r7, sp, #0

	//ROMの迷路�?ータをRAMに入れる
	Map_Load();
 800eb24:	f7fe ff58 	bl	800d9d8 <Map_Load>

	//座標�?�初期�?
	x = y = 0;
 800eb28:	4b35      	ldr	r3, [pc, #212]	; (800ec00 <Shortest_Run+0xe0>)
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	701a      	strb	r2, [r3, #0]
 800eb2e:	4b34      	ldr	r3, [pc, #208]	; (800ec00 <Shortest_Run+0xe0>)
 800eb30:	781a      	ldrb	r2, [r3, #0]
 800eb32:	4b34      	ldr	r3, [pc, #208]	; (800ec04 <Shortest_Run+0xe4>)
 800eb34:	701a      	strb	r2, [r3, #0]
	//方向�?�初期�?
	my_direction=north;
 800eb36:	4b34      	ldr	r3, [pc, #208]	; (800ec08 <Shortest_Run+0xe8>)
 800eb38:	2200      	movs	r2, #0
 800eb3a:	701a      	strb	r2, [r3, #0]

	//�?初�?�直進
	Start_Accel();
 800eb3c:	f7fb ffe4 	bl	800ab08 <Start_Accel>

	x = 0;
 800eb40:	4b30      	ldr	r3, [pc, #192]	; (800ec04 <Shortest_Run+0xe4>)
 800eb42:	2200      	movs	r2, #0
 800eb44:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800eb46:	4b2e      	ldr	r3, [pc, #184]	; (800ec00 <Shortest_Run+0xe0>)
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	b2da      	uxtb	r2, r3
 800eb4e:	4b2c      	ldr	r3, [pc, #176]	; (800ec00 <Shortest_Run+0xe0>)
 800eb50:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800eb52:	e001      	b.n	800eb58 <Shortest_Run+0x38>
		Shortest_Run_Judge();
 800eb54:	f7ff fc2c 	bl	800e3b0 <Shortest_Run_Judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800eb58:	4b2a      	ldr	r3, [pc, #168]	; (800ec04 <Shortest_Run+0xe4>)
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	2b06      	cmp	r3, #6
 800eb5e:	d9f9      	bls.n	800eb54 <Shortest_Run+0x34>
 800eb60:	4b28      	ldr	r3, [pc, #160]	; (800ec04 <Shortest_Run+0xe4>)
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	2b07      	cmp	r3, #7
 800eb66:	d8f5      	bhi.n	800eb54 <Shortest_Run+0x34>
 800eb68:	4b25      	ldr	r3, [pc, #148]	; (800ec00 <Shortest_Run+0xe0>)
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	2b06      	cmp	r3, #6
 800eb6e:	d9f1      	bls.n	800eb54 <Shortest_Run+0x34>
 800eb70:	4b23      	ldr	r3, [pc, #140]	; (800ec00 <Shortest_Run+0xe0>)
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	2b07      	cmp	r3, #7
 800eb76:	d8ed      	bhi.n	800eb54 <Shortest_Run+0x34>

	}
	goal_time[0] = timer*T1;
 800eb78:	4b24      	ldr	r3, [pc, #144]	; (800ec0c <Shortest_Run+0xec>)
 800eb7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb7e:	a31e      	add	r3, pc, #120	; (adr r3, 800ebf8 <Shortest_Run+0xd8>)
 800eb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb84:	f7f9 fc70 	bl	8008468 <__aeabi_dmul>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	460c      	mov	r4, r1
 800eb8c:	4a20      	ldr	r2, [pc, #128]	; (800ec10 <Shortest_Run+0xf0>)
 800eb8e:	e9c2 3400 	strd	r3, r4, [r2]
	goal_time[1] = self_timer;
 800eb92:	4b20      	ldr	r3, [pc, #128]	; (800ec14 <Shortest_Run+0xf4>)
 800eb94:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eb98:	4a1d      	ldr	r2, [pc, #116]	; (800ec10 <Shortest_Run+0xf0>)
 800eb9a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	      Decelerate();
 800eb9e:	f7fc f8bb 	bl	800ad18 <Decelerate>
	      //wall_set();
	      Motor_PWM_Stop();
 800eba2:	f7fb fa4d 	bl	800a040 <Motor_PWM_Stop>
	      mode.LED = 7;
 800eba6:	4b1c      	ldr	r3, [pc, #112]	; (800ec18 <Shortest_Run+0xf8>)
 800eba8:	2207      	movs	r2, #7
 800ebaa:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800ebac:	f7fb fcbe 	bl	800a52c <LED_Change>
	      HAL_Delay(1000);
 800ebb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ebb4:	f002 f8b4 	bl	8010d20 <HAL_Delay>
	      mapcopy();
 800ebb8:	f7fa ffee 	bl	8009b98 <mapcopy>
	      Flash_store();
 800ebbc:	f7fb f97c 	bl	8009eb8 <Flash_store>
	      mode.LED = 0;
 800ebc0:	4b15      	ldr	r3, [pc, #84]	; (800ec18 <Shortest_Run+0xf8>)
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800ebc6:	f7fb fcb1 	bl	800a52c <LED_Change>
	      while(1){
	    	  printf("小数のほう : %lf \r\n",goal_time[0]);
 800ebca:	4b11      	ldr	r3, [pc, #68]	; (800ec10 <Shortest_Run+0xf0>)
 800ebcc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	4623      	mov	r3, r4
 800ebd4:	4811      	ldr	r0, [pc, #68]	; (800ec1c <Shortest_Run+0xfc>)
 800ebd6:	f007 ff2d 	bl	8016a34 <iprintf>
	    	  printf("整数のほう : %lf \r\n",goal_time[1]);
 800ebda:	4b0d      	ldr	r3, [pc, #52]	; (800ec10 <Shortest_Run+0xf0>)
 800ebdc:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	4623      	mov	r3, r4
 800ebe4:	480e      	ldr	r0, [pc, #56]	; (800ec20 <Shortest_Run+0x100>)
 800ebe6:	f007 ff25 	bl	8016a34 <iprintf>
	    	  printf("\r\n");
 800ebea:	480e      	ldr	r0, [pc, #56]	; (800ec24 <Shortest_Run+0x104>)
 800ebec:	f007 ff96 	bl	8016b1c <puts>
	    	  printf("小数のほう : %lf \r\n",goal_time[0]);
 800ebf0:	e7eb      	b.n	800ebca <Shortest_Run+0xaa>
 800ebf2:	bf00      	nop
 800ebf4:	f3af 8000 	nop.w
 800ebf8:	d2f1a9fc 	.word	0xd2f1a9fc
 800ebfc:	3f50624d 	.word	0x3f50624d
 800ec00:	2000030d 	.word	0x2000030d
 800ec04:	2000030c 	.word	0x2000030c
 800ec08:	2000449a 	.word	0x2000449a
 800ec0c:	200002e8 	.word	0x200002e8
 800ec10:	20004ab8 	.word	0x20004ab8
 800ec14:	200002e0 	.word	0x200002e0
 800ec18:	20000074 	.word	0x20000074
 800ec1c:	080189a4 	.word	0x080189a4
 800ec20:	080189c0 	.word	0x080189c0
 800ec24:	080188a0 	.word	0x080188a0

0800ec28 <HAL_ADC_ConvCpltCallback>:
	      }
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* Adchandle) {
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]

}
 800ec30:	bf00      	nop
 800ec32:	370c      	adds	r7, #12
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr
 800ec3c:	0000      	movs	r0, r0
	...

0800ec40 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  // 割り込み0.05ms 20kHz
{
 800ec40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec44:	ed2d 8b02 	vpush	{d8}
 800ec48:	b082      	sub	sp, #8
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
	//static double angular_velo=CURVE_SPEED*2/90;
	//static int k=0;
	static int k=0;
  if(htim == &htim1){
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	4ab7      	ldr	r2, [pc, #732]	; (800ef30 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800ec52:	4293      	cmp	r3, r2
 800ec54:	f040 84c0 	bne.w	800f5d8 <HAL_TIM_PeriodElapsedCallback+0x998>
	  elapsed_time += T1;
 800ec58:	4bb6      	ldr	r3, [pc, #728]	; (800ef34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800ec5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ec5e:	a3b2      	add	r3, pc, #712	; (adr r3, 800ef28 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800ec60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec64:	f7f9 fa4a 	bl	80080fc <__adddf3>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	460c      	mov	r4, r1
 800ec6c:	4ab1      	ldr	r2, [pc, #708]	; (800ef34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800ec6e:	e9c2 3400 	strd	r3, r4, [r2]
	  switch(mode.interrupt){
 800ec72:	4bb1      	ldr	r3, [pc, #708]	; (800ef38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800ec74:	7a1b      	ldrb	r3, [r3, #8]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d004      	beq.n	800ec84 <HAL_TIM_PeriodElapsedCallback+0x44>
 800ec7a:	2b01      	cmp	r3, #1
 800ec7c:	f000 83cb 	beq.w	800f416 <HAL_TIM_PeriodElapsedCallback+0x7d6>
			}
			//モータ出力更新
			Motor_Switch(L_motor,R_motor);
			break;
		default:
			break;
 800ec80:	f000 bcab 	b.w	800f5da <HAL_TIM_PeriodElapsedCallback+0x99a>
      	EN3_L.count = TIM3 -> CNT;
 800ec84:	4bad      	ldr	r3, [pc, #692]	; (800ef3c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800ec86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec88:	461a      	mov	r2, r3
 800ec8a:	4bad      	ldr	r3, [pc, #692]	; (800ef40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800ec8c:	601a      	str	r2, [r3, #0]
	    EN4_R.count = TIM4 -> CNT;
 800ec8e:	4bad      	ldr	r3, [pc, #692]	; (800ef44 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800ec90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec92:	461a      	mov	r2, r3
 800ec94:	4bac      	ldr	r3, [pc, #688]	; (800ef48 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800ec96:	601a      	str	r2, [r3, #0]
	    EN3_L.count = -(EN3_L.count - (30000-1));
 800ec98:	4ba9      	ldr	r3, [pc, #676]	; (800ef40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800eca0:	332f      	adds	r3, #47	; 0x2f
 800eca2:	4aa7      	ldr	r2, [pc, #668]	; (800ef40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800eca4:	6013      	str	r3, [r2, #0]
	    EN4_R.count = -(EN4_R.count - (30000-1));
 800eca6:	4ba8      	ldr	r3, [pc, #672]	; (800ef48 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800ecae:	332f      	adds	r3, #47	; 0x2f
 800ecb0:	4aa5      	ldr	r2, [pc, #660]	; (800ef48 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800ecb2:	6013      	str	r3, [r2, #0]
	    mode.enc = Encoder_Count(mode.enc);
 800ecb4:	4ba0      	ldr	r3, [pc, #640]	; (800ef38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800ecb6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800ecba:	b21b      	sxth	r3, r3
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7fb fead 	bl	800aa1c <Encoder_Count>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	b25a      	sxtb	r2, r3
 800ecc6:	4b9c      	ldr	r3, [pc, #624]	; (800ef38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800ecc8:	70da      	strb	r2, [r3, #3]
	    All_Pulse_anytime += EN4_R.count + EN3_L.count;
 800ecca:	4b9f      	ldr	r3, [pc, #636]	; (800ef48 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800eccc:	681a      	ldr	r2, [r3, #0]
 800ecce:	4b9c      	ldr	r3, [pc, #624]	; (800ef40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	441a      	add	r2, r3
 800ecd4:	4b9d      	ldr	r3, [pc, #628]	; (800ef4c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	4413      	add	r3, r2
 800ecda:	4a9c      	ldr	r2, [pc, #624]	; (800ef4c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800ecdc:	6013      	str	r3, [r2, #0]
	    Encoder_Reset();
 800ecde:	f7fb fe89 	bl	800a9f4 <Encoder_Reset>
	    L_velocity = Velocity_Get( (float)EN3_L.count , T1 );
 800ece2:	4b97      	ldr	r3, [pc, #604]	; (800ef40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	ee07 3a90 	vmov	s15, r3
 800ecea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ecee:	eddf 0a98 	vldr	s1, [pc, #608]	; 800ef50 <HAL_TIM_PeriodElapsedCallback+0x310>
 800ecf2:	eeb0 0a67 	vmov.f32	s0, s15
 800ecf6:	f7fb fe55 	bl	800a9a4 <Velocity_Get>
 800ecfa:	eef0 7a40 	vmov.f32	s15, s0
 800ecfe:	4b95      	ldr	r3, [pc, #596]	; (800ef54 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800ed00:	edc3 7a00 	vstr	s15, [r3]
		R_velocity = Velocity_Get( (float)EN4_R.count , T1 );
 800ed04:	4b90      	ldr	r3, [pc, #576]	; (800ef48 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	ee07 3a90 	vmov	s15, r3
 800ed0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed10:	eddf 0a8f 	vldr	s1, [pc, #572]	; 800ef50 <HAL_TIM_PeriodElapsedCallback+0x310>
 800ed14:	eeb0 0a67 	vmov.f32	s0, s15
 800ed18:	f7fb fe44 	bl	800a9a4 <Velocity_Get>
 800ed1c:	eef0 7a40 	vmov.f32	s15, s0
 800ed20:	4b8d      	ldr	r3, [pc, #564]	; (800ef58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800ed22:	edc3 7a00 	vstr	s15, [r3]
	    Body_velocity = (L_velocity + R_velocity) / 2; // (進んだパルス * パルスあたりに
 800ed26:	4b8b      	ldr	r3, [pc, #556]	; (800ef54 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800ed28:	ed93 7a00 	vldr	s14, [r3]
 800ed2c:	4b8a      	ldr	r3, [pc, #552]	; (800ef58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800ed2e:	edd3 7a00 	vldr	s15, [r3]
 800ed32:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed36:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ed3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ed3e:	4b87      	ldr	r3, [pc, #540]	; (800ef5c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800ed40:	edc3 7a00 	vstr	s15, [r3]
	    imu_data = IMU_Get_Data();
 800ed44:	f7fb f9a4 	bl	800a090 <IMU_Get_Data>
 800ed48:	eeb0 7a40 	vmov.f32	s14, s0
 800ed4c:	eef0 7a60 	vmov.f32	s15, s1
 800ed50:	4b83      	ldr	r3, [pc, #524]	; (800ef60 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800ed52:	ed83 7b00 	vstr	d7, [r3]
	    switch(mode.control){
 800ed56:	4b78      	ldr	r3, [pc, #480]	; (800ef38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800ed58:	795b      	ldrb	r3, [r3, #5]
 800ed5a:	2b06      	cmp	r3, #6
 800ed5c:	f200 8191 	bhi.w	800f082 <HAL_TIM_PeriodElapsedCallback+0x442>
 800ed60:	a201      	add	r2, pc, #4	; (adr r2, 800ed68 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800ed62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed66:	bf00      	nop
 800ed68:	0800ed85 	.word	0x0800ed85
 800ed6c:	0800edf1 	.word	0x0800edf1
 800ed70:	0800ee5d 	.word	0x0800ee5d
 800ed74:	0800eec9 	.word	0x0800eec9
 800ed78:	0800ef89 	.word	0x0800ef89
 800ed7c:	0800f001 	.word	0x0800f001
 800ed80:	0800f00d 	.word	0x0800f00d
	    	   Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);
 800ed84:	4b77      	ldr	r3, [pc, #476]	; (800ef64 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ed86:	edd3 7a00 	vldr	s15, [r3]
 800ed8a:	4b77      	ldr	r3, [pc, #476]	; (800ef68 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800ed8c:	ed93 7a00 	vldr	s14, [r3]
 800ed90:	4b76      	ldr	r3, [pc, #472]	; (800ef6c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ed92:	edd3 6a00 	vldr	s13, [r3]
 800ed96:	4b75      	ldr	r3, [pc, #468]	; (800ef6c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ed98:	ed93 6a01 	vldr	s12, [r3, #4]
 800ed9c:	4b73      	ldr	r3, [pc, #460]	; (800ef6c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ed9e:	edd3 5a02 	vldr	s11, [r3, #8]
 800eda2:	eef0 2a65 	vmov.f32	s5, s11
 800eda6:	eeb0 2a46 	vmov.f32	s4, s12
 800edaa:	eef0 1a66 	vmov.f32	s3, s13
 800edae:	ed9f 1a70 	vldr	s2, [pc, #448]	; 800ef70 <HAL_TIM_PeriodElapsedCallback+0x330>
 800edb2:	eef0 0a47 	vmov.f32	s1, s14
 800edb6:	eeb0 0a67 	vmov.f32	s0, s15
 800edba:	f7f9 fffd 	bl	8008db8 <Side_Wall_Control>
	    	   Enc_Velo_Control(T1, velocity.KP, velocity.KI, velocity.KD);
 800edbe:	4b6d      	ldr	r3, [pc, #436]	; (800ef74 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800edc0:	edd3 7a00 	vldr	s15, [r3]
 800edc4:	4b6b      	ldr	r3, [pc, #428]	; (800ef74 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800edc6:	ed93 7a01 	vldr	s14, [r3, #4]
 800edca:	4b6a      	ldr	r3, [pc, #424]	; (800ef74 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800edcc:	edd3 6a02 	vldr	s13, [r3, #8]
 800edd0:	eef0 1a66 	vmov.f32	s3, s13
 800edd4:	eeb0 1a47 	vmov.f32	s2, s14
 800edd8:	eef0 0a67 	vmov.f32	s1, s15
 800eddc:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 800ef50 <HAL_TIM_PeriodElapsedCallback+0x310>
 800ede0:	f7fa fbde 	bl	80095a0 <Enc_Velo_Control>
	    	   mode.imu = 0;
 800ede4:	4a54      	ldr	r2, [pc, #336]	; (800ef38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800ede6:	7993      	ldrb	r3, [r2, #6]
 800ede8:	f36f 0300 	bfc	r3, #0, #1
 800edec:	7193      	strb	r3, [r2, #6]
	    	   break;
 800edee:	e149      	b.n	800f084 <HAL_TIM_PeriodElapsedCallback+0x444>
	    	   Left_Wall_Control(distance_wall_left, fl_average,T8, Wall.KP, Wall.KI, Wall.KD);
 800edf0:	4b61      	ldr	r3, [pc, #388]	; (800ef78 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800edf2:	edd3 7a00 	vldr	s15, [r3]
 800edf6:	4b5c      	ldr	r3, [pc, #368]	; (800ef68 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800edf8:	ed93 7a00 	vldr	s14, [r3]
 800edfc:	4b5b      	ldr	r3, [pc, #364]	; (800ef6c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800edfe:	edd3 6a00 	vldr	s13, [r3]
 800ee02:	4b5a      	ldr	r3, [pc, #360]	; (800ef6c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ee04:	ed93 6a01 	vldr	s12, [r3, #4]
 800ee08:	4b58      	ldr	r3, [pc, #352]	; (800ef6c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ee0a:	edd3 5a02 	vldr	s11, [r3, #8]
 800ee0e:	eef0 2a65 	vmov.f32	s5, s11
 800ee12:	eeb0 2a46 	vmov.f32	s4, s12
 800ee16:	eef0 1a66 	vmov.f32	s3, s13
 800ee1a:	ed9f 1a55 	vldr	s2, [pc, #340]	; 800ef70 <HAL_TIM_PeriodElapsedCallback+0x330>
 800ee1e:	eef0 0a47 	vmov.f32	s1, s14
 800ee22:	eeb0 0a67 	vmov.f32	s0, s15
 800ee26:	f7fa f881 	bl	8008f2c <Left_Wall_Control>
	    	   Enc_Velo_Control(T1, velocity.KP, velocity.KI, velocity.KD);
 800ee2a:	4b52      	ldr	r3, [pc, #328]	; (800ef74 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800ee2c:	edd3 7a00 	vldr	s15, [r3]
 800ee30:	4b50      	ldr	r3, [pc, #320]	; (800ef74 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800ee32:	ed93 7a01 	vldr	s14, [r3, #4]
 800ee36:	4b4f      	ldr	r3, [pc, #316]	; (800ef74 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800ee38:	edd3 6a02 	vldr	s13, [r3, #8]
 800ee3c:	eef0 1a66 	vmov.f32	s3, s13
 800ee40:	eeb0 1a47 	vmov.f32	s2, s14
 800ee44:	eef0 0a67 	vmov.f32	s1, s15
 800ee48:	ed9f 0a41 	vldr	s0, [pc, #260]	; 800ef50 <HAL_TIM_PeriodElapsedCallback+0x310>
 800ee4c:	f7fa fba8 	bl	80095a0 <Enc_Velo_Control>
	    	   mode.imu = 0;
 800ee50:	4a39      	ldr	r2, [pc, #228]	; (800ef38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800ee52:	7993      	ldrb	r3, [r2, #6]
 800ee54:	f36f 0300 	bfc	r3, #0, #1
 800ee58:	7193      	strb	r3, [r2, #6]
	    	   break;
 800ee5a:	e113      	b.n	800f084 <HAL_TIM_PeriodElapsedCallback+0x444>
	    	   Right_Wall_Control(distance_wall_right, fr_average,T8, Wall.KP, Wall.KI, Wall.KD);
 800ee5c:	4b47      	ldr	r3, [pc, #284]	; (800ef7c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800ee5e:	edd3 7a00 	vldr	s15, [r3]
 800ee62:	4b40      	ldr	r3, [pc, #256]	; (800ef64 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ee64:	ed93 7a00 	vldr	s14, [r3]
 800ee68:	4b40      	ldr	r3, [pc, #256]	; (800ef6c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ee6a:	edd3 6a00 	vldr	s13, [r3]
 800ee6e:	4b3f      	ldr	r3, [pc, #252]	; (800ef6c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ee70:	ed93 6a01 	vldr	s12, [r3, #4]
 800ee74:	4b3d      	ldr	r3, [pc, #244]	; (800ef6c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ee76:	edd3 5a02 	vldr	s11, [r3, #8]
 800ee7a:	eef0 2a65 	vmov.f32	s5, s11
 800ee7e:	eeb0 2a46 	vmov.f32	s4, s12
 800ee82:	eef0 1a66 	vmov.f32	s3, s13
 800ee86:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 800ef70 <HAL_TIM_PeriodElapsedCallback+0x330>
 800ee8a:	eef0 0a47 	vmov.f32	s1, s14
 800ee8e:	eeb0 0a67 	vmov.f32	s0, s15
 800ee92:	f7fa f90f 	bl	80090b4 <Right_Wall_Control>
	    	   Enc_Velo_Control(T1, velocity.KP, velocity.KI, velocity.KD);
 800ee96:	4b37      	ldr	r3, [pc, #220]	; (800ef74 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800ee98:	edd3 7a00 	vldr	s15, [r3]
 800ee9c:	4b35      	ldr	r3, [pc, #212]	; (800ef74 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800ee9e:	ed93 7a01 	vldr	s14, [r3, #4]
 800eea2:	4b34      	ldr	r3, [pc, #208]	; (800ef74 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800eea4:	edd3 6a02 	vldr	s13, [r3, #8]
 800eea8:	eef0 1a66 	vmov.f32	s3, s13
 800eeac:	eeb0 1a47 	vmov.f32	s2, s14
 800eeb0:	eef0 0a67 	vmov.f32	s1, s15
 800eeb4:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800ef50 <HAL_TIM_PeriodElapsedCallback+0x310>
 800eeb8:	f7fa fb72 	bl	80095a0 <Enc_Velo_Control>
	    	   mode.imu = 0;
 800eebc:	4a1e      	ldr	r2, [pc, #120]	; (800ef38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800eebe:	7993      	ldrb	r3, [r2, #6]
 800eec0:	f36f 0300 	bfc	r3, #0, #1
 800eec4:	7193      	strb	r3, [r2, #6]
	    	   break;
 800eec6:	e0dd      	b.n	800f084 <HAL_TIM_PeriodElapsedCallback+0x444>
	    	   IMU_Control(Target_Rad_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800eec8:	4b2d      	ldr	r3, [pc, #180]	; (800ef80 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	4618      	mov	r0, r3
 800eece:	f7f9 fa73 	bl	80083b8 <__aeabi_f2d>
 800eed2:	4604      	mov	r4, r0
 800eed4:	460d      	mov	r5, r1
 800eed6:	4b22      	ldr	r3, [pc, #136]	; (800ef60 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800eed8:	ed93 8b00 	vldr	d8, [r3]
 800eedc:	4b29      	ldr	r3, [pc, #164]	; (800ef84 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7f9 fa69 	bl	80083b8 <__aeabi_f2d>
 800eee6:	4680      	mov	r8, r0
 800eee8:	4689      	mov	r9, r1
 800eeea:	4b26      	ldr	r3, [pc, #152]	; (800ef84 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7f9 fa62 	bl	80083b8 <__aeabi_f2d>
 800eef4:	4682      	mov	sl, r0
 800eef6:	468b      	mov	fp, r1
 800eef8:	4b22      	ldr	r3, [pc, #136]	; (800ef84 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800eefa:	689b      	ldr	r3, [r3, #8]
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7f9 fa5b 	bl	80083b8 <__aeabi_f2d>
 800ef02:	4602      	mov	r2, r0
 800ef04:	460b      	mov	r3, r1
 800ef06:	ec43 2b15 	vmov	d5, r2, r3
 800ef0a:	ec4b ab14 	vmov	d4, sl, fp
 800ef0e:	ec49 8b13 	vmov	d3, r8, r9
 800ef12:	ed9f 2b05 	vldr	d2, [pc, #20]	; 800ef28 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 800ef16:	eeb0 1a48 	vmov.f32	s2, s16
 800ef1a:	eef0 1a68 	vmov.f32	s3, s17
 800ef1e:	ec45 4b10 	vmov	d0, r4, r5
 800ef22:	f7fb f979 	bl	800a218 <IMU_Control>
	    	   break;
 800ef26:	e0ad      	b.n	800f084 <HAL_TIM_PeriodElapsedCallback+0x444>
 800ef28:	d2f1a9fc 	.word	0xd2f1a9fc
 800ef2c:	3f50624d 	.word	0x3f50624d
 800ef30:	20004ae0 	.word	0x20004ae0
 800ef34:	200002f0 	.word	0x200002f0
 800ef38:	20000074 	.word	0x20000074
 800ef3c:	40000400 	.word	0x40000400
 800ef40:	20000050 	.word	0x20000050
 800ef44:	40000800 	.word	0x40000800
 800ef48:	2000005c 	.word	0x2000005c
 800ef4c:	200002fc 	.word	0x200002fc
 800ef50:	3a83126f 	.word	0x3a83126f
 800ef54:	2000439c 	.word	0x2000439c
 800ef58:	200043a8 	.word	0x200043a8
 800ef5c:	20004408 	.word	0x20004408
 800ef60:	200002d0 	.word	0x200002d0
 800ef64:	20004f08 	.word	0x20004f08
 800ef68:	200043c4 	.word	0x200043c4
 800ef6c:	2000002c 	.word	0x2000002c
 800ef70:	3851b717 	.word	0x3851b717
 800ef74:	20000038 	.word	0x20000038
 800ef78:	20000024 	.word	0x20000024
 800ef7c:	20000020 	.word	0x20000020
 800ef80:	200002bc 	.word	0x200002bc
 800ef84:	20000044 	.word	0x20000044
	    	   Enc_Velo_Control(T1, velocity.KP, velocity.KI, velocity.KD);
 800ef88:	4bab      	ldr	r3, [pc, #684]	; (800f238 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ef8a:	edd3 7a00 	vldr	s15, [r3]
 800ef8e:	4baa      	ldr	r3, [pc, #680]	; (800f238 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ef90:	ed93 7a01 	vldr	s14, [r3, #4]
 800ef94:	4ba8      	ldr	r3, [pc, #672]	; (800f238 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ef96:	edd3 6a02 	vldr	s13, [r3, #8]
 800ef9a:	eef0 1a66 	vmov.f32	s3, s13
 800ef9e:	eeb0 1a47 	vmov.f32	s2, s14
 800efa2:	eef0 0a67 	vmov.f32	s1, s15
 800efa6:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 800f23c <HAL_TIM_PeriodElapsedCallback+0x5fc>
 800efaa:	f7fa faf9 	bl	80095a0 <Enc_Velo_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800efae:	4ba4      	ldr	r3, [pc, #656]	; (800f240 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800efb0:	ed93 8b00 	vldr	d8, [r3]
 800efb4:	4ba3      	ldr	r3, [pc, #652]	; (800f244 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4618      	mov	r0, r3
 800efba:	f7f9 f9fd 	bl	80083b8 <__aeabi_f2d>
 800efbe:	4604      	mov	r4, r0
 800efc0:	460d      	mov	r5, r1
 800efc2:	4ba0      	ldr	r3, [pc, #640]	; (800f244 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7f9 f9f6 	bl	80083b8 <__aeabi_f2d>
 800efcc:	4680      	mov	r8, r0
 800efce:	4689      	mov	r9, r1
 800efd0:	4b9c      	ldr	r3, [pc, #624]	; (800f244 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800efd2:	689b      	ldr	r3, [r3, #8]
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7f9 f9ef 	bl	80083b8 <__aeabi_f2d>
 800efda:	4602      	mov	r2, r0
 800efdc:	460b      	mov	r3, r1
 800efde:	ec43 2b15 	vmov	d5, r2, r3
 800efe2:	ec49 8b14 	vmov	d4, r8, r9
 800efe6:	ec45 4b13 	vmov	d3, r4, r5
 800efea:	ed9f 2b8d 	vldr	d2, [pc, #564]	; 800f220 <HAL_TIM_PeriodElapsedCallback+0x5e0>
 800efee:	eeb0 1a48 	vmov.f32	s2, s16
 800eff2:	eef0 1a68 	vmov.f32	s3, s17
 800eff6:	ed9f 0b8c 	vldr	d0, [pc, #560]	; 800f228 <HAL_TIM_PeriodElapsedCallback+0x5e8>
 800effa:	f7fb f90d 	bl	800a218 <IMU_Control>
	    	   break;
 800effe:	e041      	b.n	800f084 <HAL_TIM_PeriodElapsedCallback+0x444>
	    	   mode.imu = 0;
 800f000:	4a91      	ldr	r2, [pc, #580]	; (800f248 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800f002:	7993      	ldrb	r3, [r2, #6]
 800f004:	f36f 0300 	bfc	r3, #0, #1
 800f008:	7193      	strb	r3, [r2, #6]
	    	   break;
 800f00a:	e03b      	b.n	800f084 <HAL_TIM_PeriodElapsedCallback+0x444>
	    	   Right_Velo_Control(Target_R_velo, R_velocity,T1, velocity.KP, velocity.KI, velocity.KD);
 800f00c:	4b8f      	ldr	r3, [pc, #572]	; (800f24c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f00e:	edd3 7a00 	vldr	s15, [r3]
 800f012:	4b8f      	ldr	r3, [pc, #572]	; (800f250 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800f014:	ed93 7a00 	vldr	s14, [r3]
 800f018:	4b87      	ldr	r3, [pc, #540]	; (800f238 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800f01a:	edd3 6a00 	vldr	s13, [r3]
 800f01e:	4b86      	ldr	r3, [pc, #536]	; (800f238 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800f020:	ed93 6a01 	vldr	s12, [r3, #4]
 800f024:	4b84      	ldr	r3, [pc, #528]	; (800f238 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800f026:	edd3 5a02 	vldr	s11, [r3, #8]
 800f02a:	eef0 2a65 	vmov.f32	s5, s11
 800f02e:	eeb0 2a46 	vmov.f32	s4, s12
 800f032:	eef0 1a66 	vmov.f32	s3, s13
 800f036:	ed9f 1a81 	vldr	s2, [pc, #516]	; 800f23c <HAL_TIM_PeriodElapsedCallback+0x5fc>
 800f03a:	eef0 0a47 	vmov.f32	s1, s14
 800f03e:	eeb0 0a67 	vmov.f32	s0, s15
 800f042:	f7fa f9a9 	bl	8009398 <Right_Velo_Control>
	    	   Left_Velo_Control(Target_L_velo, L_velocity,T1, velocity.KP, velocity.KI, velocity.KD);
 800f046:	4b83      	ldr	r3, [pc, #524]	; (800f254 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800f048:	edd3 7a00 	vldr	s15, [r3]
 800f04c:	4b82      	ldr	r3, [pc, #520]	; (800f258 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800f04e:	ed93 7a00 	vldr	s14, [r3]
 800f052:	4b79      	ldr	r3, [pc, #484]	; (800f238 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800f054:	edd3 6a00 	vldr	s13, [r3]
 800f058:	4b77      	ldr	r3, [pc, #476]	; (800f238 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800f05a:	ed93 6a01 	vldr	s12, [r3, #4]
 800f05e:	4b76      	ldr	r3, [pc, #472]	; (800f238 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800f060:	edd3 5a02 	vldr	s11, [r3, #8]
 800f064:	eef0 2a65 	vmov.f32	s5, s11
 800f068:	eeb0 2a46 	vmov.f32	s4, s12
 800f06c:	eef0 1a66 	vmov.f32	s3, s13
 800f070:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800f23c <HAL_TIM_PeriodElapsedCallback+0x5fc>
 800f074:	eef0 0a47 	vmov.f32	s1, s14
 800f078:	eeb0 0a67 	vmov.f32	s0, s15
 800f07c:	f7fa fa0e 	bl	800949c <Left_Velo_Control>
	    	   break;
 800f080:	e000      	b.n	800f084 <HAL_TIM_PeriodElapsedCallback+0x444>
	    	   break;
 800f082:	bf00      	nop
	    if( mode.accel == 1 ){
 800f084:	4b70      	ldr	r3, [pc, #448]	; (800f248 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800f086:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d116      	bne.n	800f0bc <HAL_TIM_PeriodElapsedCallback+0x47c>
		  if(Target_velocity < SEARCH_SPEED){
 800f08e:	4b73      	ldr	r3, [pc, #460]	; (800f25c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f090:	edd3 7a00 	vldr	s15, [r3]
 800f094:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800f260 <HAL_TIM_PeriodElapsedCallback+0x620>
 800f098:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a0:	f140 810b 	bpl.w	800f2ba <HAL_TIM_PeriodElapsedCallback+0x67a>
			Target_velocity += a_start;
 800f0a4:	4b6d      	ldr	r3, [pc, #436]	; (800f25c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f0a6:	ed93 7a00 	vldr	s14, [r3]
 800f0aa:	4b6e      	ldr	r3, [pc, #440]	; (800f264 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800f0ac:	edd3 7a00 	vldr	s15, [r3]
 800f0b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0b4:	4b69      	ldr	r3, [pc, #420]	; (800f25c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f0b6:	edc3 7a00 	vstr	s15, [r3]
 800f0ba:	e0fe      	b.n	800f2ba <HAL_TIM_PeriodElapsedCallback+0x67a>
	    else if( mode.accel == 2 ){
 800f0bc:	4b62      	ldr	r3, [pc, #392]	; (800f248 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800f0be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f0c2:	2b02      	cmp	r3, #2
 800f0c4:	d116      	bne.n	800f0f4 <HAL_TIM_PeriodElapsedCallback+0x4b4>
		  if(Target_velocity < SEARCH_SPEED){
 800f0c6:	4b65      	ldr	r3, [pc, #404]	; (800f25c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f0c8:	edd3 7a00 	vldr	s15, [r3]
 800f0cc:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800f260 <HAL_TIM_PeriodElapsedCallback+0x620>
 800f0d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0d8:	f140 80ef 	bpl.w	800f2ba <HAL_TIM_PeriodElapsedCallback+0x67a>
			Target_velocity += a;
 800f0dc:	4b5f      	ldr	r3, [pc, #380]	; (800f25c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f0de:	ed93 7a00 	vldr	s14, [r3]
 800f0e2:	4b61      	ldr	r3, [pc, #388]	; (800f268 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800f0e4:	edd3 7a00 	vldr	s15, [r3]
 800f0e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0ec:	4b5b      	ldr	r3, [pc, #364]	; (800f25c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f0ee:	edc3 7a00 	vstr	s15, [r3]
 800f0f2:	e0e2      	b.n	800f2ba <HAL_TIM_PeriodElapsedCallback+0x67a>
	    else if( mode.accel == 3 ){
 800f0f4:	4b54      	ldr	r3, [pc, #336]	; (800f248 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800f0f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f0fa:	2b03      	cmp	r3, #3
 800f0fc:	d116      	bne.n	800f12c <HAL_TIM_PeriodElapsedCallback+0x4ec>
		  if(Target_velocity > 2){
 800f0fe:	4b57      	ldr	r3, [pc, #348]	; (800f25c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f100:	edd3 7a00 	vldr	s15, [r3]
 800f104:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f110:	f340 80d3 	ble.w	800f2ba <HAL_TIM_PeriodElapsedCallback+0x67a>
			Target_velocity -= a;
 800f114:	4b51      	ldr	r3, [pc, #324]	; (800f25c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f116:	ed93 7a00 	vldr	s14, [r3]
 800f11a:	4b53      	ldr	r3, [pc, #332]	; (800f268 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800f11c:	edd3 7a00 	vldr	s15, [r3]
 800f120:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f124:	4b4d      	ldr	r3, [pc, #308]	; (800f25c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800f126:	edc3 7a00 	vstr	s15, [r3]
 800f12a:	e0c6      	b.n	800f2ba <HAL_TIM_PeriodElapsedCallback+0x67a>
	    else if( mode.accel == 4 ){ //左に旋回�?�?
 800f12c:	4b46      	ldr	r3, [pc, #280]	; (800f248 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800f12e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f132:	2b04      	cmp	r3, #4
 800f134:	d124      	bne.n	800f180 <HAL_TIM_PeriodElapsedCallback+0x540>
	      if(Target_R_velo < SEARCH_SPEED * (90+TREAD_WIDTH)/90){
 800f136:	4b45      	ldr	r3, [pc, #276]	; (800f24c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4618      	mov	r0, r3
 800f13c:	f7f9 f93c 	bl	80083b8 <__aeabi_f2d>
 800f140:	a33b      	add	r3, pc, #236	; (adr r3, 800f230 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800f142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f146:	f7f9 fc01 	bl	800894c <__aeabi_dcmplt>
 800f14a:	4603      	mov	r3, r0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	f000 80b4 	beq.w	800f2ba <HAL_TIM_PeriodElapsedCallback+0x67a>
	    	Target_R_velo += a_curve;
 800f152:	4b3e      	ldr	r3, [pc, #248]	; (800f24c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f154:	ed93 7a00 	vldr	s14, [r3]
 800f158:	4b44      	ldr	r3, [pc, #272]	; (800f26c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800f15a:	edd3 7a00 	vldr	s15, [r3]
 800f15e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f162:	4b3a      	ldr	r3, [pc, #232]	; (800f24c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f164:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo -= a_curve;
 800f168:	4b3a      	ldr	r3, [pc, #232]	; (800f254 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800f16a:	ed93 7a00 	vldr	s14, [r3]
 800f16e:	4b3f      	ldr	r3, [pc, #252]	; (800f26c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800f170:	edd3 7a00 	vldr	s15, [r3]
 800f174:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f178:	4b36      	ldr	r3, [pc, #216]	; (800f254 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800f17a:	edc3 7a00 	vstr	s15, [r3]
 800f17e:	e09c      	b.n	800f2ba <HAL_TIM_PeriodElapsedCallback+0x67a>
	    else if( mode.accel == 5 ){//左に旋回減�??
 800f180:	4b31      	ldr	r3, [pc, #196]	; (800f248 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800f182:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f186:	2b05      	cmp	r3, #5
 800f188:	d121      	bne.n	800f1ce <HAL_TIM_PeriodElapsedCallback+0x58e>
		      if(Target_R_velo > SEARCH_SPEED){
 800f18a:	4b30      	ldr	r3, [pc, #192]	; (800f24c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f18c:	edd3 7a00 	vldr	s15, [r3]
 800f190:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800f260 <HAL_TIM_PeriodElapsedCallback+0x620>
 800f194:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f19c:	f340 808d 	ble.w	800f2ba <HAL_TIM_PeriodElapsedCallback+0x67a>
		    	Target_R_velo -= a_curve;
 800f1a0:	4b2a      	ldr	r3, [pc, #168]	; (800f24c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f1a2:	ed93 7a00 	vldr	s14, [r3]
 800f1a6:	4b31      	ldr	r3, [pc, #196]	; (800f26c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800f1a8:	edd3 7a00 	vldr	s15, [r3]
 800f1ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1b0:	4b26      	ldr	r3, [pc, #152]	; (800f24c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f1b2:	edc3 7a00 	vstr	s15, [r3]
		    	Target_L_velo += a_curve;
 800f1b6:	4b27      	ldr	r3, [pc, #156]	; (800f254 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800f1b8:	ed93 7a00 	vldr	s14, [r3]
 800f1bc:	4b2b      	ldr	r3, [pc, #172]	; (800f26c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800f1be:	edd3 7a00 	vldr	s15, [r3]
 800f1c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1c6:	4b23      	ldr	r3, [pc, #140]	; (800f254 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800f1c8:	edc3 7a00 	vstr	s15, [r3]
 800f1cc:	e075      	b.n	800f2ba <HAL_TIM_PeriodElapsedCallback+0x67a>
	    else if( mode.accel == 6 ){//右に旋回�?�?
 800f1ce:	4b1e      	ldr	r3, [pc, #120]	; (800f248 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800f1d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f1d4:	2b06      	cmp	r3, #6
 800f1d6:	d14b      	bne.n	800f270 <HAL_TIM_PeriodElapsedCallback+0x630>
	      if(Target_L_velo < SEARCH_SPEED * (90+TREAD_WIDTH)/90){
 800f1d8:	4b1e      	ldr	r3, [pc, #120]	; (800f254 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7f9 f8eb 	bl	80083b8 <__aeabi_f2d>
 800f1e2:	a313      	add	r3, pc, #76	; (adr r3, 800f230 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800f1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e8:	f7f9 fbb0 	bl	800894c <__aeabi_dcmplt>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d063      	beq.n	800f2ba <HAL_TIM_PeriodElapsedCallback+0x67a>
	    	Target_R_velo -= a_curve;
 800f1f2:	4b16      	ldr	r3, [pc, #88]	; (800f24c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f1f4:	ed93 7a00 	vldr	s14, [r3]
 800f1f8:	4b1c      	ldr	r3, [pc, #112]	; (800f26c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800f1fa:	edd3 7a00 	vldr	s15, [r3]
 800f1fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f202:	4b12      	ldr	r3, [pc, #72]	; (800f24c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800f204:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo += a_curve;
 800f208:	4b12      	ldr	r3, [pc, #72]	; (800f254 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800f20a:	ed93 7a00 	vldr	s14, [r3]
 800f20e:	4b17      	ldr	r3, [pc, #92]	; (800f26c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800f210:	edd3 7a00 	vldr	s15, [r3]
 800f214:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f218:	4b0e      	ldr	r3, [pc, #56]	; (800f254 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800f21a:	edc3 7a00 	vstr	s15, [r3]
 800f21e:	e04c      	b.n	800f2ba <HAL_TIM_PeriodElapsedCallback+0x67a>
 800f220:	d2f1a9fc 	.word	0xd2f1a9fc
 800f224:	3f50624d 	.word	0x3f50624d
	...
 800f230:	0b60b60b 	.word	0x0b60b60b
 800f234:	4074a0b6 	.word	0x4074a0b6
 800f238:	20000038 	.word	0x20000038
 800f23c:	3a83126f 	.word	0x3a83126f
 800f240:	200002d0 	.word	0x200002d0
 800f244:	20000044 	.word	0x20000044
 800f248:	20000074 	.word	0x20000074
 800f24c:	20004380 	.word	0x20004380
 800f250:	200043a8 	.word	0x200043a8
 800f254:	200043a4 	.word	0x200043a4
 800f258:	2000439c 	.word	0x2000439c
 800f25c:	200002b8 	.word	0x200002b8
 800f260:	436b0000 	.word	0x436b0000
 800f264:	20000008 	.word	0x20000008
 800f268:	2000000c 	.word	0x2000000c
 800f26c:	20000010 	.word	0x20000010
	    else if( mode.accel == 7 ){//右に旋回減�??
 800f270:	4bb1      	ldr	r3, [pc, #708]	; (800f538 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800f272:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800f276:	2b07      	cmp	r3, #7
 800f278:	d11f      	bne.n	800f2ba <HAL_TIM_PeriodElapsedCallback+0x67a>
	      if(Target_L_velo > SEARCH_SPEED){
 800f27a:	4bb0      	ldr	r3, [pc, #704]	; (800f53c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800f27c:	edd3 7a00 	vldr	s15, [r3]
 800f280:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800f540 <HAL_TIM_PeriodElapsedCallback+0x900>
 800f284:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f28c:	dd15      	ble.n	800f2ba <HAL_TIM_PeriodElapsedCallback+0x67a>
	    	Target_R_velo += a_curve;
 800f28e:	4bad      	ldr	r3, [pc, #692]	; (800f544 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800f290:	ed93 7a00 	vldr	s14, [r3]
 800f294:	4bac      	ldr	r3, [pc, #688]	; (800f548 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800f296:	edd3 7a00 	vldr	s15, [r3]
 800f29a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f29e:	4ba9      	ldr	r3, [pc, #676]	; (800f544 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800f2a0:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo -= a_curve;
 800f2a4:	4ba5      	ldr	r3, [pc, #660]	; (800f53c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800f2a6:	ed93 7a00 	vldr	s14, [r3]
 800f2aa:	4ba7      	ldr	r3, [pc, #668]	; (800f548 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800f2ac:	edd3 7a00 	vldr	s15, [r3]
 800f2b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2b4:	4ba1      	ldr	r3, [pc, #644]	; (800f53c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800f2b6:	edc3 7a00 	vstr	s15, [r3]
	    Velocity_Control(Target_velocity, Body_velocity, T1,velocity.KP ,velocity.KI, velocity.KD);
 800f2ba:	4ba4      	ldr	r3, [pc, #656]	; (800f54c <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800f2bc:	edd3 7a00 	vldr	s15, [r3]
 800f2c0:	4ba3      	ldr	r3, [pc, #652]	; (800f550 <HAL_TIM_PeriodElapsedCallback+0x910>)
 800f2c2:	ed93 7a00 	vldr	s14, [r3]
 800f2c6:	4ba3      	ldr	r3, [pc, #652]	; (800f554 <HAL_TIM_PeriodElapsedCallback+0x914>)
 800f2c8:	edd3 6a00 	vldr	s13, [r3]
 800f2cc:	4ba1      	ldr	r3, [pc, #644]	; (800f554 <HAL_TIM_PeriodElapsedCallback+0x914>)
 800f2ce:	ed93 6a01 	vldr	s12, [r3, #4]
 800f2d2:	4ba0      	ldr	r3, [pc, #640]	; (800f554 <HAL_TIM_PeriodElapsedCallback+0x914>)
 800f2d4:	edd3 5a02 	vldr	s11, [r3, #8]
 800f2d8:	eef0 2a65 	vmov.f32	s5, s11
 800f2dc:	eeb0 2a46 	vmov.f32	s4, s12
 800f2e0:	eef0 1a66 	vmov.f32	s3, s13
 800f2e4:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 800f558 <HAL_TIM_PeriodElapsedCallback+0x918>
 800f2e8:	eef0 0a47 	vmov.f32	s1, s14
 800f2ec:	eeb0 0a67 	vmov.f32	s0, s15
 800f2f0:	f7f9 ffa4 	bl	800923c <Velocity_Control>
		L_motor = L_v_control + L_wall + L_leftwall + L_rightwall + L_rotate + L_angular_velocity + L_env_control + L_velo_control;
 800f2f4:	4b99      	ldr	r3, [pc, #612]	; (800f55c <HAL_TIM_PeriodElapsedCallback+0x91c>)
 800f2f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	4b98      	ldr	r3, [pc, #608]	; (800f560 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800f2fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f302:	b29b      	uxth	r3, r3
 800f304:	4413      	add	r3, r2
 800f306:	b29a      	uxth	r2, r3
 800f308:	4b96      	ldr	r3, [pc, #600]	; (800f564 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800f30a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f30e:	b29b      	uxth	r3, r3
 800f310:	4413      	add	r3, r2
 800f312:	b29a      	uxth	r2, r3
 800f314:	4b94      	ldr	r3, [pc, #592]	; (800f568 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800f316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	4413      	add	r3, r2
 800f31e:	b29a      	uxth	r2, r3
 800f320:	4b92      	ldr	r3, [pc, #584]	; (800f56c <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800f322:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f326:	b29b      	uxth	r3, r3
 800f328:	4413      	add	r3, r2
 800f32a:	b29a      	uxth	r2, r3
 800f32c:	4b90      	ldr	r3, [pc, #576]	; (800f570 <HAL_TIM_PeriodElapsedCallback+0x930>)
 800f32e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f332:	b29b      	uxth	r3, r3
 800f334:	4413      	add	r3, r2
 800f336:	b29a      	uxth	r2, r3
 800f338:	4b8e      	ldr	r3, [pc, #568]	; (800f574 <HAL_TIM_PeriodElapsedCallback+0x934>)
 800f33a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f33e:	b29b      	uxth	r3, r3
 800f340:	4413      	add	r3, r2
 800f342:	b29a      	uxth	r2, r3
 800f344:	4b8c      	ldr	r3, [pc, #560]	; (800f578 <HAL_TIM_PeriodElapsedCallback+0x938>)
 800f346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	4413      	add	r3, r2
 800f34e:	b29b      	uxth	r3, r3
 800f350:	b21a      	sxth	r2, r3
 800f352:	4b8a      	ldr	r3, [pc, #552]	; (800f57c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 800f354:	801a      	strh	r2, [r3, #0]
		R_motor = R_v_control + R_wall + R_leftwall + R_rightwall + R_rotate + R_angular_velocity + R_env_control + R_velo_control;
 800f356:	4b8a      	ldr	r3, [pc, #552]	; (800f580 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800f358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f35c:	b29a      	uxth	r2, r3
 800f35e:	4b89      	ldr	r3, [pc, #548]	; (800f584 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800f360:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f364:	b29b      	uxth	r3, r3
 800f366:	4413      	add	r3, r2
 800f368:	b29a      	uxth	r2, r3
 800f36a:	4b87      	ldr	r3, [pc, #540]	; (800f588 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800f36c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f370:	b29b      	uxth	r3, r3
 800f372:	4413      	add	r3, r2
 800f374:	b29a      	uxth	r2, r3
 800f376:	4b85      	ldr	r3, [pc, #532]	; (800f58c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800f378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	4413      	add	r3, r2
 800f380:	b29a      	uxth	r2, r3
 800f382:	4b83      	ldr	r3, [pc, #524]	; (800f590 <HAL_TIM_PeriodElapsedCallback+0x950>)
 800f384:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f388:	b29b      	uxth	r3, r3
 800f38a:	4413      	add	r3, r2
 800f38c:	b29a      	uxth	r2, r3
 800f38e:	4b81      	ldr	r3, [pc, #516]	; (800f594 <HAL_TIM_PeriodElapsedCallback+0x954>)
 800f390:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f394:	b29b      	uxth	r3, r3
 800f396:	4413      	add	r3, r2
 800f398:	b29a      	uxth	r2, r3
 800f39a:	4b7f      	ldr	r3, [pc, #508]	; (800f598 <HAL_TIM_PeriodElapsedCallback+0x958>)
 800f39c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	4413      	add	r3, r2
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	4b7d      	ldr	r3, [pc, #500]	; (800f59c <HAL_TIM_PeriodElapsedCallback+0x95c>)
 800f3a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3ac:	b29b      	uxth	r3, r3
 800f3ae:	4413      	add	r3, r2
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	b21a      	sxth	r2, r3
 800f3b4:	4b7a      	ldr	r3, [pc, #488]	; (800f5a0 <HAL_TIM_PeriodElapsedCallback+0x960>)
 800f3b6:	801a      	strh	r2, [r3, #0]
		if(timer <= 2000){
 800f3b8:	4b7a      	ldr	r3, [pc, #488]	; (800f5a4 <HAL_TIM_PeriodElapsedCallback+0x964>)
 800f3ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f3be:	f04f 0200 	mov.w	r2, #0
 800f3c2:	4b79      	ldr	r3, [pc, #484]	; (800f5a8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 800f3c4:	f7f9 facc 	bl	8008960 <__aeabi_dcmple>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d018      	beq.n	800f400 <HAL_TIM_PeriodElapsedCallback+0x7c0>
			if((int)timer % 5== 0){
 800f3ce:	4b75      	ldr	r3, [pc, #468]	; (800f5a4 <HAL_TIM_PeriodElapsedCallback+0x964>)
 800f3d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	4621      	mov	r1, r4
 800f3d8:	f7f9 faf6 	bl	80089c8 <__aeabi_d2iz>
 800f3dc:	4601      	mov	r1, r0
 800f3de:	4b73      	ldr	r3, [pc, #460]	; (800f5ac <HAL_TIM_PeriodElapsedCallback+0x96c>)
 800f3e0:	fb83 2301 	smull	r2, r3, r3, r1
 800f3e4:	105a      	asrs	r2, r3, #1
 800f3e6:	17cb      	asrs	r3, r1, #31
 800f3e8:	1ad2      	subs	r2, r2, r3
 800f3ea:	4613      	mov	r3, r2
 800f3ec:	009b      	lsls	r3, r3, #2
 800f3ee:	4413      	add	r3, r2
 800f3f0:	1aca      	subs	r2, r1, r3
 800f3f2:	2a00      	cmp	r2, #0
 800f3f4:	d104      	bne.n	800f400 <HAL_TIM_PeriodElapsedCallback+0x7c0>
		     k++;
 800f3f6:	4b6e      	ldr	r3, [pc, #440]	; (800f5b0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	4a6c      	ldr	r2, [pc, #432]	; (800f5b0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800f3fe:	6013      	str	r3, [r2, #0]
		Motor_Switch(L_motor,R_motor);
 800f400:	4b5e      	ldr	r3, [pc, #376]	; (800f57c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 800f402:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f406:	4b66      	ldr	r3, [pc, #408]	; (800f5a0 <HAL_TIM_PeriodElapsedCallback+0x960>)
 800f408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f40c:	4619      	mov	r1, r3
 800f40e:	4610      	mov	r0, r2
 800f410:	f7fb f94a 	bl	800a6a8 <Motor_Switch>
		break;
 800f414:	e0e1      	b.n	800f5da <HAL_TIM_PeriodElapsedCallback+0x99a>
			Tim_Count();
 800f416:	f7fa fafd 	bl	8009a14 <Tim_Count>
	      	EN3_L.count = TIM3 -> CNT;
 800f41a:	4b66      	ldr	r3, [pc, #408]	; (800f5b4 <HAL_TIM_PeriodElapsedCallback+0x974>)
 800f41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f41e:	461a      	mov	r2, r3
 800f420:	4b65      	ldr	r3, [pc, #404]	; (800f5b8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800f422:	601a      	str	r2, [r3, #0]
		    EN4_R.count = TIM4 -> CNT;
 800f424:	4b65      	ldr	r3, [pc, #404]	; (800f5bc <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800f426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f428:	461a      	mov	r2, r3
 800f42a:	4b65      	ldr	r3, [pc, #404]	; (800f5c0 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800f42c:	601a      	str	r2, [r3, #0]
		    EN3_L.count = -(EN3_L.count - (30000-1));
 800f42e:	4b62      	ldr	r3, [pc, #392]	; (800f5b8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800f436:	332f      	adds	r3, #47	; 0x2f
 800f438:	4a5f      	ldr	r2, [pc, #380]	; (800f5b8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800f43a:	6013      	str	r3, [r2, #0]
		    EN4_R.count = -(EN4_R.count - (30000-1));
 800f43c:	4b60      	ldr	r3, [pc, #384]	; (800f5c0 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800f444:	332f      	adds	r3, #47	; 0x2f
 800f446:	4a5e      	ldr	r2, [pc, #376]	; (800f5c0 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800f448:	6013      	str	r3, [r2, #0]
		    mode.enc = Encoder_Count(mode.enc);
 800f44a:	4b3b      	ldr	r3, [pc, #236]	; (800f538 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800f44c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800f450:	b21b      	sxth	r3, r3
 800f452:	4618      	mov	r0, r3
 800f454:	f7fb fae2 	bl	800aa1c <Encoder_Count>
 800f458:	4603      	mov	r3, r0
 800f45a:	b25a      	sxtb	r2, r3
 800f45c:	4b36      	ldr	r3, [pc, #216]	; (800f538 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800f45e:	70da      	strb	r2, [r3, #3]
		    All_Pulse_anytime += EN4_R.count + EN3_L.count;
 800f460:	4b57      	ldr	r3, [pc, #348]	; (800f5c0 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	4b54      	ldr	r3, [pc, #336]	; (800f5b8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	441a      	add	r2, r3
 800f46a:	4b56      	ldr	r3, [pc, #344]	; (800f5c4 <HAL_TIM_PeriodElapsedCallback+0x984>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	4413      	add	r3, r2
 800f470:	4a54      	ldr	r2, [pc, #336]	; (800f5c4 <HAL_TIM_PeriodElapsedCallback+0x984>)
 800f472:	6013      	str	r3, [r2, #0]
		    Encoder_Reset();
 800f474:	f7fb fabe 	bl	800a9f4 <Encoder_Reset>
		    L_velocity = Velocity_Get( (float)EN3_L.count , T1 );
 800f478:	4b4f      	ldr	r3, [pc, #316]	; (800f5b8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	ee07 3a90 	vmov	s15, r3
 800f480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f484:	eddf 0a34 	vldr	s1, [pc, #208]	; 800f558 <HAL_TIM_PeriodElapsedCallback+0x918>
 800f488:	eeb0 0a67 	vmov.f32	s0, s15
 800f48c:	f7fb fa8a 	bl	800a9a4 <Velocity_Get>
 800f490:	eef0 7a40 	vmov.f32	s15, s0
 800f494:	4b4c      	ldr	r3, [pc, #304]	; (800f5c8 <HAL_TIM_PeriodElapsedCallback+0x988>)
 800f496:	edc3 7a00 	vstr	s15, [r3]
			R_velocity = Velocity_Get( (float)EN4_R.count , T1 );
 800f49a:	4b49      	ldr	r3, [pc, #292]	; (800f5c0 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	ee07 3a90 	vmov	s15, r3
 800f4a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4a6:	eddf 0a2c 	vldr	s1, [pc, #176]	; 800f558 <HAL_TIM_PeriodElapsedCallback+0x918>
 800f4aa:	eeb0 0a67 	vmov.f32	s0, s15
 800f4ae:	f7fb fa79 	bl	800a9a4 <Velocity_Get>
 800f4b2:	eef0 7a40 	vmov.f32	s15, s0
 800f4b6:	4b45      	ldr	r3, [pc, #276]	; (800f5cc <HAL_TIM_PeriodElapsedCallback+0x98c>)
 800f4b8:	edc3 7a00 	vstr	s15, [r3]
			imu_data = IMU_Get_Data();
 800f4bc:	f7fa fde8 	bl	800a090 <IMU_Get_Data>
 800f4c0:	eeb0 7a40 	vmov.f32	s14, s0
 800f4c4:	eef0 7a60 	vmov.f32	s15, s1
 800f4c8:	4b41      	ldr	r3, [pc, #260]	; (800f5d0 <HAL_TIM_PeriodElapsedCallback+0x990>)
 800f4ca:	ed83 7b00 	vstr	d7, [r3]
			if(timer <= 48000){
 800f4ce:	4b35      	ldr	r3, [pc, #212]	; (800f5a4 <HAL_TIM_PeriodElapsedCallback+0x964>)
 800f4d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f4d4:	a316      	add	r3, pc, #88	; (adr r3, 800f530 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800f4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4da:	f7f9 fa41 	bl	8008960 <__aeabi_dcmple>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d01a      	beq.n	800f51a <HAL_TIM_PeriodElapsedCallback+0x8da>
				if((int)timer % 60 == 0){
 800f4e4:	4b2f      	ldr	r3, [pc, #188]	; (800f5a4 <HAL_TIM_PeriodElapsedCallback+0x964>)
 800f4e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	4621      	mov	r1, r4
 800f4ee:	f7f9 fa6b 	bl	80089c8 <__aeabi_d2iz>
 800f4f2:	4601      	mov	r1, r0
 800f4f4:	4b37      	ldr	r3, [pc, #220]	; (800f5d4 <HAL_TIM_PeriodElapsedCallback+0x994>)
 800f4f6:	fb83 2301 	smull	r2, r3, r3, r1
 800f4fa:	440b      	add	r3, r1
 800f4fc:	115a      	asrs	r2, r3, #5
 800f4fe:	17cb      	asrs	r3, r1, #31
 800f500:	1ad2      	subs	r2, r2, r3
 800f502:	4613      	mov	r3, r2
 800f504:	011b      	lsls	r3, r3, #4
 800f506:	1a9b      	subs	r3, r3, r2
 800f508:	009b      	lsls	r3, r3, #2
 800f50a:	1aca      	subs	r2, r1, r3
 800f50c:	2a00      	cmp	r2, #0
 800f50e:	d104      	bne.n	800f51a <HAL_TIM_PeriodElapsedCallback+0x8da>
			     k++;
 800f510:	4b27      	ldr	r3, [pc, #156]	; (800f5b0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	3301      	adds	r3, #1
 800f516:	4a26      	ldr	r2, [pc, #152]	; (800f5b0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800f518:	6013      	str	r3, [r2, #0]
			Motor_Switch(L_motor,R_motor);
 800f51a:	4b18      	ldr	r3, [pc, #96]	; (800f57c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 800f51c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f520:	4b1f      	ldr	r3, [pc, #124]	; (800f5a0 <HAL_TIM_PeriodElapsedCallback+0x960>)
 800f522:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f526:	4619      	mov	r1, r3
 800f528:	4610      	mov	r0, r2
 800f52a:	f7fb f8bd 	bl	800a6a8 <Motor_Switch>
			break;
 800f52e:	e054      	b.n	800f5da <HAL_TIM_PeriodElapsedCallback+0x99a>
 800f530:	00000000 	.word	0x00000000
 800f534:	40e77000 	.word	0x40e77000
 800f538:	20000074 	.word	0x20000074
 800f53c:	200043a4 	.word	0x200043a4
 800f540:	436b0000 	.word	0x436b0000
 800f544:	20004380 	.word	0x20004380
 800f548:	20000010 	.word	0x20000010
 800f54c:	200002b8 	.word	0x200002b8
 800f550:	20004408 	.word	0x20004408
 800f554:	20000038 	.word	0x20000038
 800f558:	3a83126f 	.word	0x3a83126f
 800f55c:	20004384 	.word	0x20004384
 800f560:	200043a0 	.word	0x200043a0
 800f564:	20004386 	.word	0x20004386
 800f568:	20004378 	.word	0x20004378
 800f56c:	20004398 	.word	0x20004398
 800f570:	20004392 	.word	0x20004392
 800f574:	2000437a 	.word	0x2000437a
 800f578:	200043a2 	.word	0x200043a2
 800f57c:	20004ff0 	.word	0x20004ff0
 800f580:	20004390 	.word	0x20004390
 800f584:	2000438a 	.word	0x2000438a
 800f588:	200043ac 	.word	0x200043ac
 800f58c:	20004394 	.word	0x20004394
 800f590:	2000439a 	.word	0x2000439a
 800f594:	20004396 	.word	0x20004396
 800f598:	20004388 	.word	0x20004388
 800f59c:	2000437c 	.word	0x2000437c
 800f5a0:	2000449c 	.word	0x2000449c
 800f5a4:	200002e8 	.word	0x200002e8
 800f5a8:	409f4000 	.word	0x409f4000
 800f5ac:	66666667 	.word	0x66666667
 800f5b0:	20004368 	.word	0x20004368
 800f5b4:	40000400 	.word	0x40000400
 800f5b8:	20000050 	.word	0x20000050
 800f5bc:	40000800 	.word	0x40000800
 800f5c0:	2000005c 	.word	0x2000005c
 800f5c4:	200002fc 	.word	0x200002fc
 800f5c8:	2000439c 	.word	0x2000439c
 800f5cc:	200043a8 	.word	0x200043a8
 800f5d0:	200002d0 	.word	0x200002d0
 800f5d4:	88888889 	.word	0x88888889
	  }

  }
 800f5d8:	bf00      	nop

  if(htim == &htim8){
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4a05      	ldr	r2, [pc, #20]	; (800f5f4 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800f5de:	4293      	cmp	r3, r2
 800f5e0:	d101      	bne.n	800f5e6 <HAL_TIM_PeriodElapsedCallback+0x9a6>


	  ADC_Get_Data();
 800f5e2:	f7fb f8ab 	bl	800a73c <ADC_Get_Data>


  }
}
 800f5e6:	bf00      	nop
 800f5e8:	3708      	adds	r7, #8
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	ecbd 8b02 	vpop	{d8}
 800f5f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f5f4:	200043c8 	.word	0x200043c8

0800f5f8 <Exe_num0>:


/*---- DEFINING FUNCTION ----*/

//実行時に切り替えるモード
void Exe_num0(){
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	af00      	add	r7, sp, #0
//	mode.control = 0;
//	Target_velocity=SEARCH_SPEED;
//
//	Target_Rad_velo=0;

	Adachi_search();
 800f5fc:	f7fe f980 	bl	800d900 <Adachi_search>

}
 800f600:	bf00      	nop
 800f602:	bd80      	pop	{r7, pc}

0800f604 <Exe_num1>:
void Exe_num1(){
 800f604:	b580      	push	{r7, lr}
 800f606:	af00      	add	r7, sp, #0
	Adachi_search2();
 800f608:	f7fe fe5a 	bl	800e2c0 <Adachi_search2>

}
 800f60c:	bf00      	nop
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <Exe_num2>:
void Exe_num2(){
 800f610:	b580      	push	{r7, lr}
 800f612:	af00      	add	r7, sp, #0
//        	  if(timer == 10)
//        		  printf("小数のほう : %lf \r\n",timer);
//        	  if(self_timer == 10000)
//        		  printf("整数のほう : %lf \r\n",self_timer/1000);

	Shortest_Run();
 800f614:	f7ff fa84 	bl	800eb20 <Shortest_Run>
        	  //start_calib();

}
 800f618:	bf00      	nop
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <Exe_num3>:
void Exe_num3(){
 800f61c:	b580      	push	{r7, lr}
 800f61e:	af00      	add	r7, sp, #0
	  //printf("helloあいうえお\r\n");


        	  Flash_load();
 800f620:	f7fa fc38 	bl	8009e94 <Flash_load>
          	  HAL_Delay(2000);
 800f624:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f628:	f001 fb7a 	bl	8010d20 <HAL_Delay>

          	  mapprint();
 800f62c:	f7fa fb62 	bl	8009cf4 <mapprint>
          	  while(1);
 800f630:	e7fe      	b.n	800f630 <Exe_num3+0x14>

0800f632 <Exe_num4>:
			  //printf("%d\r\n",zg);
//        		  printf("%f\r\n",Body_angle);
//        		  HAL_Delay(1);

}
void Exe_num4(){
 800f632:	b580      	push	{r7, lr}
 800f634:	af00      	add	r7, sp, #0
	Tire_Maintenance();
 800f636:	f7fc fcff 	bl	800c038 <Tire_Maintenance>
//       	  mode.enc = 1;
//        	  printf("左 : %d \r\n",EN3_L.integrate);
//        	  printf("右 : %d \r\n",EN4_R.integrate);
//        	  printf("\r\n");

}
 800f63a:	bf00      	nop
 800f63c:	bd80      	pop	{r7, pc}

0800f63e <Exe_num5>:
void Exe_num5(){
 800f63e:	b580      	push	{r7, lr}
 800f640:	af00      	add	r7, sp, #0
		  //printf("%f\r\n",identify[k]);

		 // printf("%f\t %f\r\n",identify[k],identify[k+5000]);
		 // printf("%f\r\n",identify[k]);

		  turn_right();
 800f642:	f7fb fd8b 	bl	800b15c <turn_right>
		  while(1);
 800f646:	e7fe      	b.n	800f646 <Exe_num5+0x8>

0800f648 <Exe_num6>:
    printf("\r\n");
#endif

#endif
}
void Exe_num6(){
 800f648:	b598      	push	{r3, r4, r7, lr}
 800f64a:	af00      	add	r7, sp, #0
//        	  Target_Rad_velo= 0;

        	  //Side_Wall_Control(fr_average,fl_average,T8,Wall.KP, Wall.KI,Wall.KD);

#if 1
	      printf("左 : %f\r\n",fl_average);
 800f64c:	4b18      	ldr	r3, [pc, #96]	; (800f6b0 <Exe_num6+0x68>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4618      	mov	r0, r3
 800f652:	f7f8 feb1 	bl	80083b8 <__aeabi_f2d>
 800f656:	4603      	mov	r3, r0
 800f658:	460c      	mov	r4, r1
 800f65a:	461a      	mov	r2, r3
 800f65c:	4623      	mov	r3, r4
 800f65e:	4815      	ldr	r0, [pc, #84]	; (800f6b4 <Exe_num6+0x6c>)
 800f660:	f007 f9e8 	bl	8016a34 <iprintf>
	      printf("右 : %f\r\n",fr_average);
 800f664:	4b14      	ldr	r3, [pc, #80]	; (800f6b8 <Exe_num6+0x70>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4618      	mov	r0, r3
 800f66a:	f7f8 fea5 	bl	80083b8 <__aeabi_f2d>
 800f66e:	4603      	mov	r3, r0
 800f670:	460c      	mov	r4, r1
 800f672:	461a      	mov	r2, r3
 800f674:	4623      	mov	r3, r4
 800f676:	4811      	ldr	r0, [pc, #68]	; (800f6bc <Exe_num6+0x74>)
 800f678:	f007 f9dc 	bl	8016a34 <iprintf>
	      printf("前左 : %f\r\n",sl_average);
 800f67c:	4b10      	ldr	r3, [pc, #64]	; (800f6c0 <Exe_num6+0x78>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4618      	mov	r0, r3
 800f682:	f7f8 fe99 	bl	80083b8 <__aeabi_f2d>
 800f686:	4603      	mov	r3, r0
 800f688:	460c      	mov	r4, r1
 800f68a:	461a      	mov	r2, r3
 800f68c:	4623      	mov	r3, r4
 800f68e:	480d      	ldr	r0, [pc, #52]	; (800f6c4 <Exe_num6+0x7c>)
 800f690:	f007 f9d0 	bl	8016a34 <iprintf>
	      printf("前右 : %f\r\n",sr_average);
 800f694:	4b0c      	ldr	r3, [pc, #48]	; (800f6c8 <Exe_num6+0x80>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4618      	mov	r0, r3
 800f69a:	f7f8 fe8d 	bl	80083b8 <__aeabi_f2d>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	460c      	mov	r4, r1
 800f6a2:	461a      	mov	r2, r3
 800f6a4:	4623      	mov	r3, r4
 800f6a6:	4809      	ldr	r0, [pc, #36]	; (800f6cc <Exe_num6+0x84>)
 800f6a8:	f007 f9c4 	bl	8016a34 <iprintf>

#endif


//		Velocity_Control(Target_velocity, Body_velocity, T1,velocity.KP ,velocity.KI*, velocity.KD);
}
 800f6ac:	bf00      	nop
 800f6ae:	bd98      	pop	{r3, r4, r7, pc}
 800f6b0:	200043c4 	.word	0x200043c4
 800f6b4:	080189dc 	.word	0x080189dc
 800f6b8:	20004f08 	.word	0x20004f08
 800f6bc:	080189e8 	.word	0x080189e8
 800f6c0:	20005054 	.word	0x20005054
 800f6c4:	080189f4 	.word	0x080189f4
 800f6c8:	200044a0 	.word	0x200044a0
 800f6cc:	08018a04 	.word	0x08018a04

0800f6d0 <Exe_num7>:
void Exe_num7(){
 800f6d0:	b480      	push	{r7}
 800f6d2:	af00      	add	r7, sp, #0
	  //mode.control = 5;
	 // mode.control = 3; //1 Left_wall
	Target_velocity = 0;
 800f6d4:	4b05      	ldr	r3, [pc, #20]	; (800f6ec <Exe_num7+0x1c>)
 800f6d6:	f04f 0200 	mov.w	r2, #0
 800f6da:	601a      	str	r2, [r3, #0]
	mode.control = 0;
 800f6dc:	4b04      	ldr	r3, [pc, #16]	; (800f6f0 <Exe_num7+0x20>)
 800f6de:	2200      	movs	r2, #0
 800f6e0:	715a      	strb	r2, [r3, #5]
//        		      printf("右 : %f\r\n",fr_average);
//        		  }
		  mode.control = 2;
		  Target_velocity = test_velo_7;
#endif
}
 800f6e2:	bf00      	nop
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr
 800f6ec:	200002b8 	.word	0x200002b8
 800f6f0:	20000074 	.word	0x20000074

0800f6f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800f6f8:	f001 faa0 	bl	8010c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800f6fc:	f000 f884 	bl	800f808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800f700:	f000 fcce 	bl	80100a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800f704:	f000 fca4 	bl	8010050 <MX_DMA_Init>
  MX_ADC1_Init();
 800f708:	f000 f8e8 	bl	800f8dc <MX_ADC1_Init>
  MX_ADC2_Init();
 800f70c:	f000 f954 	bl	800f9b8 <MX_ADC2_Init>
  MX_TIM3_Init();
 800f710:	f000 faae 	bl	800fc70 <MX_TIM3_Init>
  MX_TIM2_Init();
 800f714:	f000 fa36 	bl	800fb84 <MX_TIM2_Init>
  MX_SPI3_Init();
 800f718:	f000 f9ae 	bl	800fa78 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800f71c:	f000 fc6e 	bl	800fffc <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800f720:	f000 fb4e 	bl	800fdc0 <MX_TIM5_Init>
  MX_TIM4_Init();
 800f724:	f000 faf8 	bl	800fd18 <MX_TIM4_Init>
  MX_TIM8_Init();
 800f728:	f000 fbc0 	bl	800feac <MX_TIM8_Init>
  MX_TIM1_Init();
 800f72c:	f000 f9da 	bl	800fae4 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Encoder_Start();
 800f730:	f7fa fc5c 	bl	8009fec <Encoder_Start>
  Encoder_Reset();
 800f734:	f7fb f95e 	bl	800a9f4 <Encoder_Reset>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); //LED
 800f738:	2201      	movs	r2, #1
 800f73a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f73e:	482b      	ldr	r0, [pc, #172]	; (800f7ec <main+0xf8>)
 800f740:	f003 fac4 	bl	8012ccc <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800f744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f748:	f001 faea 	bl	8010d20 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET); //LED
 800f74c:	2200      	movs	r2, #0
 800f74e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f752:	4826      	ldr	r0, [pc, #152]	; (800f7ec <main+0xf8>)
 800f754:	f003 faba 	bl	8012ccc <HAL_GPIO_WritePin>

  while (1)
  {
	  Execution_Select();
 800f758:	f7fc fa34 	bl	800bbc4 <Execution_Select>

//      printf("EN3_L.integrate : %d \r\n", EN3_L.integrate);
//      printf("EN4_R.integrate : %d \r\n", EN4_R.integrate);
//      printf("EN_Body.integrate : %d \r\n", EN_Body.integrate);
	  //誤差補正のオフセット値決定
	  IMU_Calib();
 800f75c:	f7fa fe68 	bl	800a430 <IMU_Calib>
	  distance_wall_right=fr_average;
 800f760:	4b23      	ldr	r3, [pc, #140]	; (800f7f0 <main+0xfc>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	4a23      	ldr	r2, [pc, #140]	; (800f7f4 <main+0x100>)
 800f766:	6013      	str	r3, [r2, #0]
	  distance_wall_left=fl_average;
 800f768:	4b23      	ldr	r3, [pc, #140]	; (800f7f8 <main+0x104>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4a23      	ldr	r2, [pc, #140]	; (800f7fc <main+0x108>)
 800f76e:	6013      	str	r3, [r2, #0]
	  wall_target_error = distance_wall_left - distance_wall_right;
 800f770:	4b22      	ldr	r3, [pc, #136]	; (800f7fc <main+0x108>)
 800f772:	ed93 7a00 	vldr	s14, [r3]
 800f776:	4b1f      	ldr	r3, [pc, #124]	; (800f7f4 <main+0x100>)
 800f778:	edd3 7a00 	vldr	s15, [r3]
 800f77c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f780:	4b1f      	ldr	r3, [pc, #124]	; (800f800 <main+0x10c>)
 800f782:	edc3 7a00 	vstr	s15, [r3]

	  while(1){


switch(mode.execution){
 800f786:	4b1f      	ldr	r3, [pc, #124]	; (800f804 <main+0x110>)
 800f788:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f78c:	2b07      	cmp	r3, #7
 800f78e:	d82b      	bhi.n	800f7e8 <main+0xf4>
 800f790:	a201      	add	r2, pc, #4	; (adr r2, 800f798 <main+0xa4>)
 800f792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f796:	bf00      	nop
 800f798:	0800f7b9 	.word	0x0800f7b9
 800f79c:	0800f7bf 	.word	0x0800f7bf
 800f7a0:	0800f7c5 	.word	0x0800f7c5
 800f7a4:	0800f7cb 	.word	0x0800f7cb
 800f7a8:	0800f7d1 	.word	0x0800f7d1
 800f7ac:	0800f7d7 	.word	0x0800f7d7
 800f7b0:	0800f7dd 	.word	0x0800f7dd
 800f7b4:	0800f7e3 	.word	0x0800f7e3
          case 0:
        	  Exe_num0();
 800f7b8:	f7ff ff1e 	bl	800f5f8 <Exe_num0>
        	  break;
 800f7bc:	e015      	b.n	800f7ea <main+0xf6>
	  /*------------------------------------------*/
          case 1:
        	  Exe_num1();
 800f7be:	f7ff ff21 	bl	800f604 <Exe_num1>
              break;
 800f7c2:	e012      	b.n	800f7ea <main+0xf6>
	  /*------------------------------------------*/
          case 2:
        	  Exe_num2();
 800f7c4:	f7ff ff24 	bl	800f610 <Exe_num2>
	          break;
 800f7c8:	e00f      	b.n	800f7ea <main+0xf6>
	  /*------------------------------------------*/
          case 3:
        	  Exe_num3();
 800f7ca:	f7ff ff27 	bl	800f61c <Exe_num3>
              break;
 800f7ce:	e00c      	b.n	800f7ea <main+0xf6>
	  /*------------------------------------------*/
          case 4:
        	  Exe_num4();
 800f7d0:	f7ff ff2f 	bl	800f632 <Exe_num4>
        	  break;
 800f7d4:	e009      	b.n	800f7ea <main+0xf6>
	  /*------------------------------------------*/
          case 5:
        	  Exe_num5();
 800f7d6:	f7ff ff32 	bl	800f63e <Exe_num5>
	          break;
 800f7da:	e006      	b.n	800f7ea <main+0xf6>
	  /*------------------------------------------*/
          case 6:
        	  Exe_num6();
 800f7dc:	f7ff ff34 	bl	800f648 <Exe_num6>
		    break;
 800f7e0:	e003      	b.n	800f7ea <main+0xf6>
	  /*------------------------------------------*/
          case 7:
        	  Exe_num7();
 800f7e2:	f7ff ff75 	bl	800f6d0 <Exe_num7>
	  	      break;
 800f7e6:	e000      	b.n	800f7ea <main+0xf6>
          default:
        	  break;
 800f7e8:	bf00      	nop
switch(mode.execution){
 800f7ea:	e7cc      	b.n	800f786 <main+0x92>
 800f7ec:	40020800 	.word	0x40020800
 800f7f0:	20004f08 	.word	0x20004f08
 800f7f4:	20000020 	.word	0x20000020
 800f7f8:	200043c4 	.word	0x200043c4
 800f7fc:	20000024 	.word	0x20000024
 800f800:	2000438c 	.word	0x2000438c
 800f804:	20000074 	.word	0x20000074

0800f808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b094      	sub	sp, #80	; 0x50
 800f80c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f80e:	f107 0320 	add.w	r3, r7, #32
 800f812:	2230      	movs	r2, #48	; 0x30
 800f814:	2100      	movs	r1, #0
 800f816:	4618      	mov	r0, r3
 800f818:	f006 fca7 	bl	801616a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f81c:	f107 030c 	add.w	r3, r7, #12
 800f820:	2200      	movs	r2, #0
 800f822:	601a      	str	r2, [r3, #0]
 800f824:	605a      	str	r2, [r3, #4]
 800f826:	609a      	str	r2, [r3, #8]
 800f828:	60da      	str	r2, [r3, #12]
 800f82a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800f82c:	2300      	movs	r3, #0
 800f82e:	60bb      	str	r3, [r7, #8]
 800f830:	4b28      	ldr	r3, [pc, #160]	; (800f8d4 <SystemClock_Config+0xcc>)
 800f832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f834:	4a27      	ldr	r2, [pc, #156]	; (800f8d4 <SystemClock_Config+0xcc>)
 800f836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f83a:	6413      	str	r3, [r2, #64]	; 0x40
 800f83c:	4b25      	ldr	r3, [pc, #148]	; (800f8d4 <SystemClock_Config+0xcc>)
 800f83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f844:	60bb      	str	r3, [r7, #8]
 800f846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f848:	2300      	movs	r3, #0
 800f84a:	607b      	str	r3, [r7, #4]
 800f84c:	4b22      	ldr	r3, [pc, #136]	; (800f8d8 <SystemClock_Config+0xd0>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	4a21      	ldr	r2, [pc, #132]	; (800f8d8 <SystemClock_Config+0xd0>)
 800f852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f856:	6013      	str	r3, [r2, #0]
 800f858:	4b1f      	ldr	r3, [pc, #124]	; (800f8d8 <SystemClock_Config+0xd0>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f860:	607b      	str	r3, [r7, #4]
 800f862:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f864:	2301      	movs	r3, #1
 800f866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f86c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f86e:	2302      	movs	r3, #2
 800f870:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f872:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f876:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800f878:	2304      	movs	r3, #4
 800f87a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800f87c:	23a8      	movs	r3, #168	; 0xa8
 800f87e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f880:	2302      	movs	r3, #2
 800f882:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800f884:	2304      	movs	r3, #4
 800f886:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f888:	f107 0320 	add.w	r3, r7, #32
 800f88c:	4618      	mov	r0, r3
 800f88e:	f003 fa37 	bl	8012d00 <HAL_RCC_OscConfig>
 800f892:	4603      	mov	r3, r0
 800f894:	2b00      	cmp	r3, #0
 800f896:	d001      	beq.n	800f89c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800f898:	f000 fcbe 	bl	8010218 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f89c:	230f      	movs	r3, #15
 800f89e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f8a0:	2302      	movs	r3, #2
 800f8a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f8a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f8ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f8ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f8b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800f8b4:	f107 030c 	add.w	r3, r7, #12
 800f8b8:	2105      	movs	r1, #5
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f003 fc90 	bl	80131e0 <HAL_RCC_ClockConfig>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d001      	beq.n	800f8ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800f8c6:	f000 fca7 	bl	8010218 <Error_Handler>
  }
}
 800f8ca:	bf00      	nop
 800f8cc:	3750      	adds	r7, #80	; 0x50
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	40023800 	.word	0x40023800
 800f8d8:	40007000 	.word	0x40007000

0800f8dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b084      	sub	sp, #16
 800f8e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800f8e2:	463b      	mov	r3, r7
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	601a      	str	r2, [r3, #0]
 800f8e8:	605a      	str	r2, [r3, #4]
 800f8ea:	609a      	str	r2, [r3, #8]
 800f8ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800f8ee:	4b2f      	ldr	r3, [pc, #188]	; (800f9ac <MX_ADC1_Init+0xd0>)
 800f8f0:	4a2f      	ldr	r2, [pc, #188]	; (800f9b0 <MX_ADC1_Init+0xd4>)
 800f8f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f8f4:	4b2d      	ldr	r3, [pc, #180]	; (800f9ac <MX_ADC1_Init+0xd0>)
 800f8f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f8fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800f8fc:	4b2b      	ldr	r3, [pc, #172]	; (800f9ac <MX_ADC1_Init+0xd0>)
 800f8fe:	2200      	movs	r2, #0
 800f900:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800f902:	4b2a      	ldr	r3, [pc, #168]	; (800f9ac <MX_ADC1_Init+0xd0>)
 800f904:	2201      	movs	r2, #1
 800f906:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800f908:	4b28      	ldr	r3, [pc, #160]	; (800f9ac <MX_ADC1_Init+0xd0>)
 800f90a:	2201      	movs	r2, #1
 800f90c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800f90e:	4b27      	ldr	r3, [pc, #156]	; (800f9ac <MX_ADC1_Init+0xd0>)
 800f910:	2200      	movs	r2, #0
 800f912:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f916:	4b25      	ldr	r3, [pc, #148]	; (800f9ac <MX_ADC1_Init+0xd0>)
 800f918:	2200      	movs	r2, #0
 800f91a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f91c:	4b23      	ldr	r3, [pc, #140]	; (800f9ac <MX_ADC1_Init+0xd0>)
 800f91e:	4a25      	ldr	r2, [pc, #148]	; (800f9b4 <MX_ADC1_Init+0xd8>)
 800f920:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f922:	4b22      	ldr	r3, [pc, #136]	; (800f9ac <MX_ADC1_Init+0xd0>)
 800f924:	2200      	movs	r2, #0
 800f926:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800f928:	4b20      	ldr	r3, [pc, #128]	; (800f9ac <MX_ADC1_Init+0xd0>)
 800f92a:	2203      	movs	r2, #3
 800f92c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800f92e:	4b1f      	ldr	r3, [pc, #124]	; (800f9ac <MX_ADC1_Init+0xd0>)
 800f930:	2201      	movs	r2, #1
 800f932:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f936:	4b1d      	ldr	r3, [pc, #116]	; (800f9ac <MX_ADC1_Init+0xd0>)
 800f938:	2201      	movs	r2, #1
 800f93a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800f93c:	481b      	ldr	r0, [pc, #108]	; (800f9ac <MX_ADC1_Init+0xd0>)
 800f93e:	f001 fa11 	bl	8010d64 <HAL_ADC_Init>
 800f942:	4603      	mov	r3, r0
 800f944:	2b00      	cmp	r3, #0
 800f946:	d001      	beq.n	800f94c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800f948:	f000 fc66 	bl	8010218 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800f94c:	230a      	movs	r3, #10
 800f94e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f950:	2301      	movs	r3, #1
 800f952:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800f954:	2303      	movs	r3, #3
 800f956:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f958:	463b      	mov	r3, r7
 800f95a:	4619      	mov	r1, r3
 800f95c:	4813      	ldr	r0, [pc, #76]	; (800f9ac <MX_ADC1_Init+0xd0>)
 800f95e:	f001 fcdf 	bl	8011320 <HAL_ADC_ConfigChannel>
 800f962:	4603      	mov	r3, r0
 800f964:	2b00      	cmp	r3, #0
 800f966:	d001      	beq.n	800f96c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800f968:	f000 fc56 	bl	8010218 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800f96c:	230e      	movs	r3, #14
 800f96e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800f970:	2302      	movs	r3, #2
 800f972:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f974:	463b      	mov	r3, r7
 800f976:	4619      	mov	r1, r3
 800f978:	480c      	ldr	r0, [pc, #48]	; (800f9ac <MX_ADC1_Init+0xd0>)
 800f97a:	f001 fcd1 	bl	8011320 <HAL_ADC_ConfigChannel>
 800f97e:	4603      	mov	r3, r0
 800f980:	2b00      	cmp	r3, #0
 800f982:	d001      	beq.n	800f988 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800f984:	f000 fc48 	bl	8010218 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800f988:	2309      	movs	r3, #9
 800f98a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800f98c:	2303      	movs	r3, #3
 800f98e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f990:	463b      	mov	r3, r7
 800f992:	4619      	mov	r1, r3
 800f994:	4805      	ldr	r0, [pc, #20]	; (800f9ac <MX_ADC1_Init+0xd0>)
 800f996:	f001 fcc3 	bl	8011320 <HAL_ADC_ConfigChannel>
 800f99a:	4603      	mov	r3, r0
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d001      	beq.n	800f9a4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800f9a0:	f000 fc3a 	bl	8010218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800f9a4:	bf00      	nop
 800f9a6:	3710      	adds	r7, #16
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	20004588 	.word	0x20004588
 800f9b0:	40012000 	.word	0x40012000
 800f9b4:	0f000001 	.word	0x0f000001

0800f9b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b084      	sub	sp, #16
 800f9bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800f9be:	463b      	mov	r3, r7
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	601a      	str	r2, [r3, #0]
 800f9c4:	605a      	str	r2, [r3, #4]
 800f9c6:	609a      	str	r2, [r3, #8]
 800f9c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800f9ca:	4b28      	ldr	r3, [pc, #160]	; (800fa6c <MX_ADC2_Init+0xb4>)
 800f9cc:	4a28      	ldr	r2, [pc, #160]	; (800fa70 <MX_ADC2_Init+0xb8>)
 800f9ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f9d0:	4b26      	ldr	r3, [pc, #152]	; (800fa6c <MX_ADC2_Init+0xb4>)
 800f9d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f9d6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800f9d8:	4b24      	ldr	r3, [pc, #144]	; (800fa6c <MX_ADC2_Init+0xb4>)
 800f9da:	2200      	movs	r2, #0
 800f9dc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800f9de:	4b23      	ldr	r3, [pc, #140]	; (800fa6c <MX_ADC2_Init+0xb4>)
 800f9e0:	2201      	movs	r2, #1
 800f9e2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800f9e4:	4b21      	ldr	r3, [pc, #132]	; (800fa6c <MX_ADC2_Init+0xb4>)
 800f9e6:	2201      	movs	r2, #1
 800f9e8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800f9ea:	4b20      	ldr	r3, [pc, #128]	; (800fa6c <MX_ADC2_Init+0xb4>)
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f9f2:	4b1e      	ldr	r3, [pc, #120]	; (800fa6c <MX_ADC2_Init+0xb4>)
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f9f8:	4b1c      	ldr	r3, [pc, #112]	; (800fa6c <MX_ADC2_Init+0xb4>)
 800f9fa:	4a1e      	ldr	r2, [pc, #120]	; (800fa74 <MX_ADC2_Init+0xbc>)
 800f9fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f9fe:	4b1b      	ldr	r3, [pc, #108]	; (800fa6c <MX_ADC2_Init+0xb4>)
 800fa00:	2200      	movs	r2, #0
 800fa02:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800fa04:	4b19      	ldr	r3, [pc, #100]	; (800fa6c <MX_ADC2_Init+0xb4>)
 800fa06:	2202      	movs	r2, #2
 800fa08:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800fa0a:	4b18      	ldr	r3, [pc, #96]	; (800fa6c <MX_ADC2_Init+0xb4>)
 800fa0c:	2201      	movs	r2, #1
 800fa0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800fa12:	4b16      	ldr	r3, [pc, #88]	; (800fa6c <MX_ADC2_Init+0xb4>)
 800fa14:	2201      	movs	r2, #1
 800fa16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800fa18:	4814      	ldr	r0, [pc, #80]	; (800fa6c <MX_ADC2_Init+0xb4>)
 800fa1a:	f001 f9a3 	bl	8010d64 <HAL_ADC_Init>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d001      	beq.n	800fa28 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800fa24:	f000 fbf8 	bl	8010218 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800fa28:	230b      	movs	r3, #11
 800fa2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800fa30:	2303      	movs	r3, #3
 800fa32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800fa34:	463b      	mov	r3, r7
 800fa36:	4619      	mov	r1, r3
 800fa38:	480c      	ldr	r0, [pc, #48]	; (800fa6c <MX_ADC2_Init+0xb4>)
 800fa3a:	f001 fc71 	bl	8011320 <HAL_ADC_ConfigChannel>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d001      	beq.n	800fa48 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800fa44:	f000 fbe8 	bl	8010218 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800fa48:	230f      	movs	r3, #15
 800fa4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800fa4c:	2302      	movs	r3, #2
 800fa4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800fa50:	463b      	mov	r3, r7
 800fa52:	4619      	mov	r1, r3
 800fa54:	4805      	ldr	r0, [pc, #20]	; (800fa6c <MX_ADC2_Init+0xb4>)
 800fa56:	f001 fc63 	bl	8011320 <HAL_ADC_ConfigChannel>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d001      	beq.n	800fa64 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800fa60:	f000 fbda 	bl	8010218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800fa64:	bf00      	nop
 800fa66:	3710      	adds	r7, #16
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}
 800fa6c:	2000444c 	.word	0x2000444c
 800fa70:	40012100 	.word	0x40012100
 800fa74:	0f000001 	.word	0x0f000001

0800fa78 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800fa7c:	4b17      	ldr	r3, [pc, #92]	; (800fadc <MX_SPI3_Init+0x64>)
 800fa7e:	4a18      	ldr	r2, [pc, #96]	; (800fae0 <MX_SPI3_Init+0x68>)
 800fa80:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800fa82:	4b16      	ldr	r3, [pc, #88]	; (800fadc <MX_SPI3_Init+0x64>)
 800fa84:	f44f 7282 	mov.w	r2, #260	; 0x104
 800fa88:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800fa8a:	4b14      	ldr	r3, [pc, #80]	; (800fadc <MX_SPI3_Init+0x64>)
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800fa90:	4b12      	ldr	r3, [pc, #72]	; (800fadc <MX_SPI3_Init+0x64>)
 800fa92:	2200      	movs	r2, #0
 800fa94:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800fa96:	4b11      	ldr	r3, [pc, #68]	; (800fadc <MX_SPI3_Init+0x64>)
 800fa98:	2202      	movs	r2, #2
 800fa9a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800fa9c:	4b0f      	ldr	r3, [pc, #60]	; (800fadc <MX_SPI3_Init+0x64>)
 800fa9e:	2201      	movs	r2, #1
 800faa0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800faa2:	4b0e      	ldr	r3, [pc, #56]	; (800fadc <MX_SPI3_Init+0x64>)
 800faa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800faa8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800faaa:	4b0c      	ldr	r3, [pc, #48]	; (800fadc <MX_SPI3_Init+0x64>)
 800faac:	2228      	movs	r2, #40	; 0x28
 800faae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800fab0:	4b0a      	ldr	r3, [pc, #40]	; (800fadc <MX_SPI3_Init+0x64>)
 800fab2:	2200      	movs	r2, #0
 800fab4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800fab6:	4b09      	ldr	r3, [pc, #36]	; (800fadc <MX_SPI3_Init+0x64>)
 800fab8:	2200      	movs	r2, #0
 800faba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fabc:	4b07      	ldr	r3, [pc, #28]	; (800fadc <MX_SPI3_Init+0x64>)
 800fabe:	2200      	movs	r2, #0
 800fac0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800fac2:	4b06      	ldr	r3, [pc, #24]	; (800fadc <MX_SPI3_Init+0x64>)
 800fac4:	220a      	movs	r2, #10
 800fac6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800fac8:	4804      	ldr	r0, [pc, #16]	; (800fadc <MX_SPI3_Init+0x64>)
 800faca:	f003 fd7b 	bl	80135c4 <HAL_SPI_Init>
 800face:	4603      	mov	r3, r0
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d001      	beq.n	800fad8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800fad4:	f000 fba0 	bl	8010218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800fad8:	bf00      	nop
 800fada:	bd80      	pop	{r7, pc}
 800fadc:	2000452c 	.word	0x2000452c
 800fae0:	40003c00 	.word	0x40003c00

0800fae4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b086      	sub	sp, #24
 800fae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800faea:	f107 0308 	add.w	r3, r7, #8
 800faee:	2200      	movs	r2, #0
 800faf0:	601a      	str	r2, [r3, #0]
 800faf2:	605a      	str	r2, [r3, #4]
 800faf4:	609a      	str	r2, [r3, #8]
 800faf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800faf8:	463b      	mov	r3, r7
 800fafa:	2200      	movs	r2, #0
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800fb00:	4b1e      	ldr	r3, [pc, #120]	; (800fb7c <MX_TIM1_Init+0x98>)
 800fb02:	4a1f      	ldr	r2, [pc, #124]	; (800fb80 <MX_TIM1_Init+0x9c>)
 800fb04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800fb06:	4b1d      	ldr	r3, [pc, #116]	; (800fb7c <MX_TIM1_Init+0x98>)
 800fb08:	22a7      	movs	r2, #167	; 0xa7
 800fb0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fb0c:	4b1b      	ldr	r3, [pc, #108]	; (800fb7c <MX_TIM1_Init+0x98>)
 800fb0e:	2200      	movs	r2, #0
 800fb10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800fb12:	4b1a      	ldr	r3, [pc, #104]	; (800fb7c <MX_TIM1_Init+0x98>)
 800fb14:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fb18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fb1a:	4b18      	ldr	r3, [pc, #96]	; (800fb7c <MX_TIM1_Init+0x98>)
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800fb20:	4b16      	ldr	r3, [pc, #88]	; (800fb7c <MX_TIM1_Init+0x98>)
 800fb22:	2200      	movs	r2, #0
 800fb24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fb26:	4b15      	ldr	r3, [pc, #84]	; (800fb7c <MX_TIM1_Init+0x98>)
 800fb28:	2200      	movs	r2, #0
 800fb2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800fb2c:	4813      	ldr	r0, [pc, #76]	; (800fb7c <MX_TIM1_Init+0x98>)
 800fb2e:	f004 fa9d 	bl	801406c <HAL_TIM_Base_Init>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d001      	beq.n	800fb3c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800fb38:	f000 fb6e 	bl	8010218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fb3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fb40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800fb42:	f107 0308 	add.w	r3, r7, #8
 800fb46:	4619      	mov	r1, r3
 800fb48:	480c      	ldr	r0, [pc, #48]	; (800fb7c <MX_TIM1_Init+0x98>)
 800fb4a:	f005 f821 	bl	8014b90 <HAL_TIM_ConfigClockSource>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d001      	beq.n	800fb58 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800fb54:	f000 fb60 	bl	8010218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800fb60:	463b      	mov	r3, r7
 800fb62:	4619      	mov	r1, r3
 800fb64:	4805      	ldr	r0, [pc, #20]	; (800fb7c <MX_TIM1_Init+0x98>)
 800fb66:	f005 fccd 	bl	8015504 <HAL_TIMEx_MasterConfigSynchronization>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d001      	beq.n	800fb74 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800fb70:	f000 fb52 	bl	8010218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800fb74:	bf00      	nop
 800fb76:	3718      	adds	r7, #24
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	20004ae0 	.word	0x20004ae0
 800fb80:	40010000 	.word	0x40010000

0800fb84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b08e      	sub	sp, #56	; 0x38
 800fb88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fb8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb8e:	2200      	movs	r2, #0
 800fb90:	601a      	str	r2, [r3, #0]
 800fb92:	605a      	str	r2, [r3, #4]
 800fb94:	609a      	str	r2, [r3, #8]
 800fb96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fb98:	f107 0320 	add.w	r3, r7, #32
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	601a      	str	r2, [r3, #0]
 800fba0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fba2:	1d3b      	adds	r3, r7, #4
 800fba4:	2200      	movs	r2, #0
 800fba6:	601a      	str	r2, [r3, #0]
 800fba8:	605a      	str	r2, [r3, #4]
 800fbaa:	609a      	str	r2, [r3, #8]
 800fbac:	60da      	str	r2, [r3, #12]
 800fbae:	611a      	str	r2, [r3, #16]
 800fbb0:	615a      	str	r2, [r3, #20]
 800fbb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800fbb4:	4b2d      	ldr	r3, [pc, #180]	; (800fc6c <MX_TIM2_Init+0xe8>)
 800fbb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fbba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800fbbc:	4b2b      	ldr	r3, [pc, #172]	; (800fc6c <MX_TIM2_Init+0xe8>)
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fbc2:	4b2a      	ldr	r3, [pc, #168]	; (800fc6c <MX_TIM2_Init+0xe8>)
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800fbc8:	4b28      	ldr	r3, [pc, #160]	; (800fc6c <MX_TIM2_Init+0xe8>)
 800fbca:	f241 0267 	movw	r2, #4199	; 0x1067
 800fbce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fbd0:	4b26      	ldr	r3, [pc, #152]	; (800fc6c <MX_TIM2_Init+0xe8>)
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fbd6:	4b25      	ldr	r3, [pc, #148]	; (800fc6c <MX_TIM2_Init+0xe8>)
 800fbd8:	2200      	movs	r2, #0
 800fbda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800fbdc:	4823      	ldr	r0, [pc, #140]	; (800fc6c <MX_TIM2_Init+0xe8>)
 800fbde:	f004 fa45 	bl	801406c <HAL_TIM_Base_Init>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d001      	beq.n	800fbec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800fbe8:	f000 fb16 	bl	8010218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fbec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fbf0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800fbf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	481c      	ldr	r0, [pc, #112]	; (800fc6c <MX_TIM2_Init+0xe8>)
 800fbfa:	f004 ffc9 	bl	8014b90 <HAL_TIM_ConfigClockSource>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d001      	beq.n	800fc08 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800fc04:	f000 fb08 	bl	8010218 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800fc08:	4818      	ldr	r0, [pc, #96]	; (800fc6c <MX_TIM2_Init+0xe8>)
 800fc0a:	f004 fbfd 	bl	8014408 <HAL_TIM_PWM_Init>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d001      	beq.n	800fc18 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800fc14:	f000 fb00 	bl	8010218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800fc20:	f107 0320 	add.w	r3, r7, #32
 800fc24:	4619      	mov	r1, r3
 800fc26:	4811      	ldr	r0, [pc, #68]	; (800fc6c <MX_TIM2_Init+0xe8>)
 800fc28:	f005 fc6c 	bl	8015504 <HAL_TIMEx_MasterConfigSynchronization>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d001      	beq.n	800fc36 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800fc32:	f000 faf1 	bl	8010218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fc36:	2360      	movs	r3, #96	; 0x60
 800fc38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fc42:	2300      	movs	r3, #0
 800fc44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800fc46:	1d3b      	adds	r3, r7, #4
 800fc48:	220c      	movs	r2, #12
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	4807      	ldr	r0, [pc, #28]	; (800fc6c <MX_TIM2_Init+0xe8>)
 800fc4e:	f004 fed9 	bl	8014a04 <HAL_TIM_PWM_ConfigChannel>
 800fc52:	4603      	mov	r3, r0
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d001      	beq.n	800fc5c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800fc58:	f000 fade 	bl	8010218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800fc5c:	4803      	ldr	r0, [pc, #12]	; (800fc6c <MX_TIM2_Init+0xe8>)
 800fc5e:	f000 fd7b 	bl	8010758 <HAL_TIM_MspPostInit>

}
 800fc62:	bf00      	nop
 800fc64:	3738      	adds	r7, #56	; 0x38
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	20004fb0 	.word	0x20004fb0

0800fc70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b08c      	sub	sp, #48	; 0x30
 800fc74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800fc76:	f107 030c 	add.w	r3, r7, #12
 800fc7a:	2224      	movs	r2, #36	; 0x24
 800fc7c:	2100      	movs	r1, #0
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f006 fa73 	bl	801616a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fc84:	1d3b      	adds	r3, r7, #4
 800fc86:	2200      	movs	r2, #0
 800fc88:	601a      	str	r2, [r3, #0]
 800fc8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800fc8c:	4b20      	ldr	r3, [pc, #128]	; (800fd10 <MX_TIM3_Init+0xa0>)
 800fc8e:	4a21      	ldr	r2, [pc, #132]	; (800fd14 <MX_TIM3_Init+0xa4>)
 800fc90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800fc92:	4b1f      	ldr	r3, [pc, #124]	; (800fd10 <MX_TIM3_Init+0xa0>)
 800fc94:	2200      	movs	r2, #0
 800fc96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fc98:	4b1d      	ldr	r3, [pc, #116]	; (800fd10 <MX_TIM3_Init+0xa0>)
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800fc9e:	4b1c      	ldr	r3, [pc, #112]	; (800fd10 <MX_TIM3_Init+0xa0>)
 800fca0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800fca4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fca6:	4b1a      	ldr	r3, [pc, #104]	; (800fd10 <MX_TIM3_Init+0xa0>)
 800fca8:	2200      	movs	r2, #0
 800fcaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fcac:	4b18      	ldr	r3, [pc, #96]	; (800fd10 <MX_TIM3_Init+0xa0>)
 800fcae:	2200      	movs	r2, #0
 800fcb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800fcba:	2301      	movs	r3, #1
 800fcbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800fcca:	2301      	movs	r3, #1
 800fccc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800fcd6:	f107 030c 	add.w	r3, r7, #12
 800fcda:	4619      	mov	r1, r3
 800fcdc:	480c      	ldr	r0, [pc, #48]	; (800fd10 <MX_TIM3_Init+0xa0>)
 800fcde:	f004 fc5f 	bl	80145a0 <HAL_TIM_Encoder_Init>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d001      	beq.n	800fcec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800fce8:	f000 fa96 	bl	8010218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fcec:	2300      	movs	r3, #0
 800fcee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800fcf4:	1d3b      	adds	r3, r7, #4
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	4805      	ldr	r0, [pc, #20]	; (800fd10 <MX_TIM3_Init+0xa0>)
 800fcfa:	f005 fc03 	bl	8015504 <HAL_TIMEx_MasterConfigSynchronization>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d001      	beq.n	800fd08 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800fd04:	f000 fa88 	bl	8010218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800fd08:	bf00      	nop
 800fd0a:	3730      	adds	r7, #48	; 0x30
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}
 800fd10:	200044e8 	.word	0x200044e8
 800fd14:	40000400 	.word	0x40000400

0800fd18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b08c      	sub	sp, #48	; 0x30
 800fd1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800fd1e:	f107 030c 	add.w	r3, r7, #12
 800fd22:	2224      	movs	r2, #36	; 0x24
 800fd24:	2100      	movs	r1, #0
 800fd26:	4618      	mov	r0, r3
 800fd28:	f006 fa1f 	bl	801616a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fd2c:	1d3b      	adds	r3, r7, #4
 800fd2e:	2200      	movs	r2, #0
 800fd30:	601a      	str	r2, [r3, #0]
 800fd32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800fd34:	4b20      	ldr	r3, [pc, #128]	; (800fdb8 <MX_TIM4_Init+0xa0>)
 800fd36:	4a21      	ldr	r2, [pc, #132]	; (800fdbc <MX_TIM4_Init+0xa4>)
 800fd38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800fd3a:	4b1f      	ldr	r3, [pc, #124]	; (800fdb8 <MX_TIM4_Init+0xa0>)
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fd40:	4b1d      	ldr	r3, [pc, #116]	; (800fdb8 <MX_TIM4_Init+0xa0>)
 800fd42:	2200      	movs	r2, #0
 800fd44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800fd46:	4b1c      	ldr	r3, [pc, #112]	; (800fdb8 <MX_TIM4_Init+0xa0>)
 800fd48:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800fd4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fd4e:	4b1a      	ldr	r3, [pc, #104]	; (800fdb8 <MX_TIM4_Init+0xa0>)
 800fd50:	2200      	movs	r2, #0
 800fd52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fd54:	4b18      	ldr	r3, [pc, #96]	; (800fdb8 <MX_TIM4_Init+0xa0>)
 800fd56:	2200      	movs	r2, #0
 800fd58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800fd62:	2301      	movs	r3, #1
 800fd64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800fd66:	2300      	movs	r3, #0
 800fd68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800fd72:	2301      	movs	r3, #1
 800fd74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800fd76:	2300      	movs	r3, #0
 800fd78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800fd7e:	f107 030c 	add.w	r3, r7, #12
 800fd82:	4619      	mov	r1, r3
 800fd84:	480c      	ldr	r0, [pc, #48]	; (800fdb8 <MX_TIM4_Init+0xa0>)
 800fd86:	f004 fc0b 	bl	80145a0 <HAL_TIM_Encoder_Init>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d001      	beq.n	800fd94 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800fd90:	f000 fa42 	bl	8010218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fd94:	2300      	movs	r3, #0
 800fd96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fd98:	2300      	movs	r3, #0
 800fd9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800fd9c:	1d3b      	adds	r3, r7, #4
 800fd9e:	4619      	mov	r1, r3
 800fda0:	4805      	ldr	r0, [pc, #20]	; (800fdb8 <MX_TIM4_Init+0xa0>)
 800fda2:	f005 fbaf 	bl	8015504 <HAL_TIMEx_MasterConfigSynchronization>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d001      	beq.n	800fdb0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800fdac:	f000 fa34 	bl	8010218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800fdb0:	bf00      	nop
 800fdb2:	3730      	adds	r7, #48	; 0x30
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	2000440c 	.word	0x2000440c
 800fdbc:	40000800 	.word	0x40000800

0800fdc0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b08e      	sub	sp, #56	; 0x38
 800fdc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fdc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fdca:	2200      	movs	r2, #0
 800fdcc:	601a      	str	r2, [r3, #0]
 800fdce:	605a      	str	r2, [r3, #4]
 800fdd0:	609a      	str	r2, [r3, #8]
 800fdd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fdd4:	f107 0320 	add.w	r3, r7, #32
 800fdd8:	2200      	movs	r2, #0
 800fdda:	601a      	str	r2, [r3, #0]
 800fddc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fdde:	1d3b      	adds	r3, r7, #4
 800fde0:	2200      	movs	r2, #0
 800fde2:	601a      	str	r2, [r3, #0]
 800fde4:	605a      	str	r2, [r3, #4]
 800fde6:	609a      	str	r2, [r3, #8]
 800fde8:	60da      	str	r2, [r3, #12]
 800fdea:	611a      	str	r2, [r3, #16]
 800fdec:	615a      	str	r2, [r3, #20]
 800fdee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800fdf0:	4b2c      	ldr	r3, [pc, #176]	; (800fea4 <MX_TIM5_Init+0xe4>)
 800fdf2:	4a2d      	ldr	r2, [pc, #180]	; (800fea8 <MX_TIM5_Init+0xe8>)
 800fdf4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800fdf6:	4b2b      	ldr	r3, [pc, #172]	; (800fea4 <MX_TIM5_Init+0xe4>)
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fdfc:	4b29      	ldr	r3, [pc, #164]	; (800fea4 <MX_TIM5_Init+0xe4>)
 800fdfe:	2200      	movs	r2, #0
 800fe00:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800fe02:	4b28      	ldr	r3, [pc, #160]	; (800fea4 <MX_TIM5_Init+0xe4>)
 800fe04:	f241 0267 	movw	r2, #4199	; 0x1067
 800fe08:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fe0a:	4b26      	ldr	r3, [pc, #152]	; (800fea4 <MX_TIM5_Init+0xe4>)
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fe10:	4b24      	ldr	r3, [pc, #144]	; (800fea4 <MX_TIM5_Init+0xe4>)
 800fe12:	2200      	movs	r2, #0
 800fe14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800fe16:	4823      	ldr	r0, [pc, #140]	; (800fea4 <MX_TIM5_Init+0xe4>)
 800fe18:	f004 f928 	bl	801406c <HAL_TIM_Base_Init>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d001      	beq.n	800fe26 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800fe22:	f000 f9f9 	bl	8010218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fe26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800fe2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fe30:	4619      	mov	r1, r3
 800fe32:	481c      	ldr	r0, [pc, #112]	; (800fea4 <MX_TIM5_Init+0xe4>)
 800fe34:	f004 feac 	bl	8014b90 <HAL_TIM_ConfigClockSource>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d001      	beq.n	800fe42 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800fe3e:	f000 f9eb 	bl	8010218 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800fe42:	4818      	ldr	r0, [pc, #96]	; (800fea4 <MX_TIM5_Init+0xe4>)
 800fe44:	f004 fae0 	bl	8014408 <HAL_TIM_PWM_Init>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d001      	beq.n	800fe52 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800fe4e:	f000 f9e3 	bl	8010218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fe52:	2300      	movs	r3, #0
 800fe54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fe56:	2300      	movs	r3, #0
 800fe58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800fe5a:	f107 0320 	add.w	r3, r7, #32
 800fe5e:	4619      	mov	r1, r3
 800fe60:	4810      	ldr	r0, [pc, #64]	; (800fea4 <MX_TIM5_Init+0xe4>)
 800fe62:	f005 fb4f 	bl	8015504 <HAL_TIMEx_MasterConfigSynchronization>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d001      	beq.n	800fe70 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800fe6c:	f000 f9d4 	bl	8010218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fe70:	2360      	movs	r3, #96	; 0x60
 800fe72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800fe74:	2300      	movs	r3, #0
 800fe76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800fe80:	1d3b      	adds	r3, r7, #4
 800fe82:	2204      	movs	r2, #4
 800fe84:	4619      	mov	r1, r3
 800fe86:	4807      	ldr	r0, [pc, #28]	; (800fea4 <MX_TIM5_Init+0xe4>)
 800fe88:	f004 fdbc 	bl	8014a04 <HAL_TIM_PWM_ConfigChannel>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d001      	beq.n	800fe96 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800fe92:	f000 f9c1 	bl	8010218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800fe96:	4803      	ldr	r0, [pc, #12]	; (800fea4 <MX_TIM5_Init+0xe4>)
 800fe98:	f000 fc5e 	bl	8010758 <HAL_TIM_MspPostInit>

}
 800fe9c:	bf00      	nop
 800fe9e:	3738      	adds	r7, #56	; 0x38
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	200044a4 	.word	0x200044a4
 800fea8:	40000c00 	.word	0x40000c00

0800feac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b096      	sub	sp, #88	; 0x58
 800feb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800feb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800feb6:	2200      	movs	r2, #0
 800feb8:	601a      	str	r2, [r3, #0]
 800feba:	605a      	str	r2, [r3, #4]
 800febc:	609a      	str	r2, [r3, #8]
 800febe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fec0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fec4:	2200      	movs	r2, #0
 800fec6:	601a      	str	r2, [r3, #0]
 800fec8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800feca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fece:	2200      	movs	r2, #0
 800fed0:	601a      	str	r2, [r3, #0]
 800fed2:	605a      	str	r2, [r3, #4]
 800fed4:	609a      	str	r2, [r3, #8]
 800fed6:	60da      	str	r2, [r3, #12]
 800fed8:	611a      	str	r2, [r3, #16]
 800feda:	615a      	str	r2, [r3, #20]
 800fedc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800fede:	1d3b      	adds	r3, r7, #4
 800fee0:	2220      	movs	r2, #32
 800fee2:	2100      	movs	r1, #0
 800fee4:	4618      	mov	r0, r3
 800fee6:	f006 f940 	bl	801616a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800feea:	4b42      	ldr	r3, [pc, #264]	; (800fff4 <MX_TIM8_Init+0x148>)
 800feec:	4a42      	ldr	r2, [pc, #264]	; (800fff8 <MX_TIM8_Init+0x14c>)
 800feee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800fef0:	4b40      	ldr	r3, [pc, #256]	; (800fff4 <MX_TIM8_Init+0x148>)
 800fef2:	22a7      	movs	r2, #167	; 0xa7
 800fef4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fef6:	4b3f      	ldr	r3, [pc, #252]	; (800fff4 <MX_TIM8_Init+0x148>)
 800fef8:	2200      	movs	r2, #0
 800fefa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800fefc:	4b3d      	ldr	r3, [pc, #244]	; (800fff4 <MX_TIM8_Init+0x148>)
 800fefe:	2231      	movs	r2, #49	; 0x31
 800ff00:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ff02:	4b3c      	ldr	r3, [pc, #240]	; (800fff4 <MX_TIM8_Init+0x148>)
 800ff04:	2200      	movs	r2, #0
 800ff06:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800ff08:	4b3a      	ldr	r3, [pc, #232]	; (800fff4 <MX_TIM8_Init+0x148>)
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800ff0e:	4b39      	ldr	r3, [pc, #228]	; (800fff4 <MX_TIM8_Init+0x148>)
 800ff10:	2280      	movs	r2, #128	; 0x80
 800ff12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800ff14:	4837      	ldr	r0, [pc, #220]	; (800fff4 <MX_TIM8_Init+0x148>)
 800ff16:	f004 f8a9 	bl	801406c <HAL_TIM_Base_Init>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d001      	beq.n	800ff24 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800ff20:	f000 f97a 	bl	8010218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ff24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800ff2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ff2e:	4619      	mov	r1, r3
 800ff30:	4830      	ldr	r0, [pc, #192]	; (800fff4 <MX_TIM8_Init+0x148>)
 800ff32:	f004 fe2d 	bl	8014b90 <HAL_TIM_ConfigClockSource>
 800ff36:	4603      	mov	r3, r0
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d001      	beq.n	800ff40 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800ff3c:	f000 f96c 	bl	8010218 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800ff40:	482c      	ldr	r0, [pc, #176]	; (800fff4 <MX_TIM8_Init+0x148>)
 800ff42:	f004 f90d 	bl	8014160 <HAL_TIM_OC_Init>
 800ff46:	4603      	mov	r3, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d001      	beq.n	800ff50 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800ff4c:	f000 f964 	bl	8010218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ff50:	2300      	movs	r3, #0
 800ff52:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ff54:	2300      	movs	r3, #0
 800ff56:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800ff58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ff5c:	4619      	mov	r1, r3
 800ff5e:	4825      	ldr	r0, [pc, #148]	; (800fff4 <MX_TIM8_Init+0x148>)
 800ff60:	f005 fad0 	bl	8015504 <HAL_TIMEx_MasterConfigSynchronization>
 800ff64:	4603      	mov	r3, r0
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d001      	beq.n	800ff6e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800ff6a:	f000 f955 	bl	8010218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800ff6e:	2330      	movs	r3, #48	; 0x30
 800ff70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800ff72:	2318      	movs	r3, #24
 800ff74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ff76:	2300      	movs	r3, #0
 800ff78:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ff82:	2300      	movs	r3, #0
 800ff84:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ff86:	2300      	movs	r3, #0
 800ff88:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ff8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff8e:	2200      	movs	r2, #0
 800ff90:	4619      	mov	r1, r3
 800ff92:	4818      	ldr	r0, [pc, #96]	; (800fff4 <MX_TIM8_Init+0x148>)
 800ff94:	f004 fcd6 	bl	8014944 <HAL_TIM_OC_ConfigChannel>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d001      	beq.n	800ffa2 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800ff9e:	f000 f93b 	bl	8010218 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800ffa2:	4b14      	ldr	r3, [pc, #80]	; (800fff4 <MX_TIM8_Init+0x148>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	699a      	ldr	r2, [r3, #24]
 800ffa8:	4b12      	ldr	r3, [pc, #72]	; (800fff4 <MX_TIM8_Init+0x148>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	f042 0208 	orr.w	r2, r2, #8
 800ffb0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ffc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ffca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ffcc:	2300      	movs	r3, #0
 800ffce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800ffd0:	1d3b      	adds	r3, r7, #4
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	4807      	ldr	r0, [pc, #28]	; (800fff4 <MX_TIM8_Init+0x148>)
 800ffd6:	f005 fb11 	bl	80155fc <HAL_TIMEx_ConfigBreakDeadTime>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d001      	beq.n	800ffe4 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800ffe0:	f000 f91a 	bl	8010218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800ffe4:	4803      	ldr	r0, [pc, #12]	; (800fff4 <MX_TIM8_Init+0x148>)
 800ffe6:	f000 fbb7 	bl	8010758 <HAL_TIM_MspPostInit>

}
 800ffea:	bf00      	nop
 800ffec:	3758      	adds	r7, #88	; 0x58
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}
 800fff2:	bf00      	nop
 800fff4:	200043c8 	.word	0x200043c8
 800fff8:	40010400 	.word	0x40010400

0800fffc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8010000:	4b11      	ldr	r3, [pc, #68]	; (8010048 <MX_USART1_UART_Init+0x4c>)
 8010002:	4a12      	ldr	r2, [pc, #72]	; (801004c <MX_USART1_UART_Init+0x50>)
 8010004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8010006:	4b10      	ldr	r3, [pc, #64]	; (8010048 <MX_USART1_UART_Init+0x4c>)
 8010008:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 801000c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801000e:	4b0e      	ldr	r3, [pc, #56]	; (8010048 <MX_USART1_UART_Init+0x4c>)
 8010010:	2200      	movs	r2, #0
 8010012:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8010014:	4b0c      	ldr	r3, [pc, #48]	; (8010048 <MX_USART1_UART_Init+0x4c>)
 8010016:	2200      	movs	r2, #0
 8010018:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801001a:	4b0b      	ldr	r3, [pc, #44]	; (8010048 <MX_USART1_UART_Init+0x4c>)
 801001c:	2200      	movs	r2, #0
 801001e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8010020:	4b09      	ldr	r3, [pc, #36]	; (8010048 <MX_USART1_UART_Init+0x4c>)
 8010022:	220c      	movs	r2, #12
 8010024:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010026:	4b08      	ldr	r3, [pc, #32]	; (8010048 <MX_USART1_UART_Init+0x4c>)
 8010028:	2200      	movs	r2, #0
 801002a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801002c:	4b06      	ldr	r3, [pc, #24]	; (8010048 <MX_USART1_UART_Init+0x4c>)
 801002e:	2200      	movs	r2, #0
 8010030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8010032:	4805      	ldr	r0, [pc, #20]	; (8010048 <MX_USART1_UART_Init+0x4c>)
 8010034:	f005 fb6d 	bl	8015712 <HAL_UART_Init>
 8010038:	4603      	mov	r3, r0
 801003a:	2b00      	cmp	r3, #0
 801003c:	d001      	beq.n	8010042 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 801003e:	f000 f8eb 	bl	8010218 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8010042:	bf00      	nop
 8010044:	bd80      	pop	{r7, pc}
 8010046:	bf00      	nop
 8010048:	200045d4 	.word	0x200045d4
 801004c:	40011000 	.word	0x40011000

08010050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8010056:	2300      	movs	r3, #0
 8010058:	607b      	str	r3, [r7, #4]
 801005a:	4b10      	ldr	r3, [pc, #64]	; (801009c <MX_DMA_Init+0x4c>)
 801005c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801005e:	4a0f      	ldr	r2, [pc, #60]	; (801009c <MX_DMA_Init+0x4c>)
 8010060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010064:	6313      	str	r3, [r2, #48]	; 0x30
 8010066:	4b0d      	ldr	r3, [pc, #52]	; (801009c <MX_DMA_Init+0x4c>)
 8010068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801006a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801006e:	607b      	str	r3, [r7, #4]
 8010070:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8010072:	2200      	movs	r2, #0
 8010074:	2100      	movs	r1, #0
 8010076:	2038      	movs	r0, #56	; 0x38
 8010078:	f001 fcd7 	bl	8011a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 801007c:	2038      	movs	r0, #56	; 0x38
 801007e:	f001 fcf0 	bl	8011a62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8010082:	2200      	movs	r2, #0
 8010084:	2100      	movs	r1, #0
 8010086:	203a      	movs	r0, #58	; 0x3a
 8010088:	f001 fccf 	bl	8011a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 801008c:	203a      	movs	r0, #58	; 0x3a
 801008e:	f001 fce8 	bl	8011a62 <HAL_NVIC_EnableIRQ>

}
 8010092:	bf00      	nop
 8010094:	3708      	adds	r7, #8
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}
 801009a:	bf00      	nop
 801009c:	40023800 	.word	0x40023800

080100a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b08a      	sub	sp, #40	; 0x28
 80100a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80100a6:	f107 0314 	add.w	r3, r7, #20
 80100aa:	2200      	movs	r2, #0
 80100ac:	601a      	str	r2, [r3, #0]
 80100ae:	605a      	str	r2, [r3, #4]
 80100b0:	609a      	str	r2, [r3, #8]
 80100b2:	60da      	str	r2, [r3, #12]
 80100b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80100b6:	2300      	movs	r3, #0
 80100b8:	613b      	str	r3, [r7, #16]
 80100ba:	4b52      	ldr	r3, [pc, #328]	; (8010204 <MX_GPIO_Init+0x164>)
 80100bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100be:	4a51      	ldr	r2, [pc, #324]	; (8010204 <MX_GPIO_Init+0x164>)
 80100c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100c4:	6313      	str	r3, [r2, #48]	; 0x30
 80100c6:	4b4f      	ldr	r3, [pc, #316]	; (8010204 <MX_GPIO_Init+0x164>)
 80100c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100ce:	613b      	str	r3, [r7, #16]
 80100d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80100d2:	2300      	movs	r3, #0
 80100d4:	60fb      	str	r3, [r7, #12]
 80100d6:	4b4b      	ldr	r3, [pc, #300]	; (8010204 <MX_GPIO_Init+0x164>)
 80100d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100da:	4a4a      	ldr	r2, [pc, #296]	; (8010204 <MX_GPIO_Init+0x164>)
 80100dc:	f043 0304 	orr.w	r3, r3, #4
 80100e0:	6313      	str	r3, [r2, #48]	; 0x30
 80100e2:	4b48      	ldr	r3, [pc, #288]	; (8010204 <MX_GPIO_Init+0x164>)
 80100e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100e6:	f003 0304 	and.w	r3, r3, #4
 80100ea:	60fb      	str	r3, [r7, #12]
 80100ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80100ee:	2300      	movs	r3, #0
 80100f0:	60bb      	str	r3, [r7, #8]
 80100f2:	4b44      	ldr	r3, [pc, #272]	; (8010204 <MX_GPIO_Init+0x164>)
 80100f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100f6:	4a43      	ldr	r2, [pc, #268]	; (8010204 <MX_GPIO_Init+0x164>)
 80100f8:	f043 0301 	orr.w	r3, r3, #1
 80100fc:	6313      	str	r3, [r2, #48]	; 0x30
 80100fe:	4b41      	ldr	r3, [pc, #260]	; (8010204 <MX_GPIO_Init+0x164>)
 8010100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010102:	f003 0301 	and.w	r3, r3, #1
 8010106:	60bb      	str	r3, [r7, #8]
 8010108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801010a:	2300      	movs	r3, #0
 801010c:	607b      	str	r3, [r7, #4]
 801010e:	4b3d      	ldr	r3, [pc, #244]	; (8010204 <MX_GPIO_Init+0x164>)
 8010110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010112:	4a3c      	ldr	r2, [pc, #240]	; (8010204 <MX_GPIO_Init+0x164>)
 8010114:	f043 0302 	orr.w	r3, r3, #2
 8010118:	6313      	str	r3, [r2, #48]	; 0x30
 801011a:	4b3a      	ldr	r3, [pc, #232]	; (8010204 <MX_GPIO_Init+0x164>)
 801011c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801011e:	f003 0302 	and.w	r3, r3, #2
 8010122:	607b      	str	r3, [r7, #4]
 8010124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010126:	2300      	movs	r3, #0
 8010128:	603b      	str	r3, [r7, #0]
 801012a:	4b36      	ldr	r3, [pc, #216]	; (8010204 <MX_GPIO_Init+0x164>)
 801012c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801012e:	4a35      	ldr	r2, [pc, #212]	; (8010204 <MX_GPIO_Init+0x164>)
 8010130:	f043 0308 	orr.w	r3, r3, #8
 8010134:	6313      	str	r3, [r2, #48]	; 0x30
 8010136:	4b33      	ldr	r3, [pc, #204]	; (8010204 <MX_GPIO_Init+0x164>)
 8010138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801013a:	f003 0308 	and.w	r3, r3, #8
 801013e:	603b      	str	r3, [r7, #0]
 8010140:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8010142:	2200      	movs	r2, #0
 8010144:	f44f 7141 	mov.w	r1, #772	; 0x304
 8010148:	482f      	ldr	r0, [pc, #188]	; (8010208 <MX_GPIO_Init+0x168>)
 801014a:	f002 fdbf 	bl	8012ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 801014e:	2200      	movs	r2, #0
 8010150:	2105      	movs	r1, #5
 8010152:	482e      	ldr	r0, [pc, #184]	; (801020c <MX_GPIO_Init+0x16c>)
 8010154:	f002 fdba 	bl	8012ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8010158:	2200      	movs	r2, #0
 801015a:	2104      	movs	r1, #4
 801015c:	482c      	ldr	r0, [pc, #176]	; (8010210 <MX_GPIO_Init+0x170>)
 801015e:	f002 fdb5 	bl	8012ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8010162:	2200      	movs	r2, #0
 8010164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010168:	482a      	ldr	r0, [pc, #168]	; (8010214 <MX_GPIO_Init+0x174>)
 801016a:	f002 fdaf 	bl	8012ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 801016e:	f44f 7341 	mov.w	r3, #772	; 0x304
 8010172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010174:	2301      	movs	r3, #1
 8010176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010178:	2300      	movs	r3, #0
 801017a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801017c:	2300      	movs	r3, #0
 801017e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010180:	f107 0314 	add.w	r3, r7, #20
 8010184:	4619      	mov	r1, r3
 8010186:	4820      	ldr	r0, [pc, #128]	; (8010208 <MX_GPIO_Init+0x168>)
 8010188:	f002 fbee 	bl	8012968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 801018c:	2305      	movs	r3, #5
 801018e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010190:	2301      	movs	r3, #1
 8010192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010194:	2300      	movs	r3, #0
 8010196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010198:	2300      	movs	r3, #0
 801019a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801019c:	f107 0314 	add.w	r3, r7, #20
 80101a0:	4619      	mov	r1, r3
 80101a2:	481a      	ldr	r0, [pc, #104]	; (801020c <MX_GPIO_Init+0x16c>)
 80101a4:	f002 fbe0 	bl	8012968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 80101a8:	f241 0304 	movw	r3, #4100	; 0x1004
 80101ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80101ae:	2300      	movs	r3, #0
 80101b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101b2:	2300      	movs	r3, #0
 80101b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80101b6:	f107 0314 	add.w	r3, r7, #20
 80101ba:	4619      	mov	r1, r3
 80101bc:	4815      	ldr	r0, [pc, #84]	; (8010214 <MX_GPIO_Init+0x174>)
 80101be:	f002 fbd3 	bl	8012968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80101c2:	2304      	movs	r3, #4
 80101c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80101c6:	2301      	movs	r3, #1
 80101c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101ca:	2300      	movs	r3, #0
 80101cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80101ce:	2300      	movs	r3, #0
 80101d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80101d2:	f107 0314 	add.w	r3, r7, #20
 80101d6:	4619      	mov	r1, r3
 80101d8:	480d      	ldr	r0, [pc, #52]	; (8010210 <MX_GPIO_Init+0x170>)
 80101da:	f002 fbc5 	bl	8012968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80101de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80101e4:	2301      	movs	r3, #1
 80101e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101e8:	2300      	movs	r3, #0
 80101ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80101ec:	2300      	movs	r3, #0
 80101ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80101f0:	f107 0314 	add.w	r3, r7, #20
 80101f4:	4619      	mov	r1, r3
 80101f6:	4807      	ldr	r0, [pc, #28]	; (8010214 <MX_GPIO_Init+0x174>)
 80101f8:	f002 fbb6 	bl	8012968 <HAL_GPIO_Init>

}
 80101fc:	bf00      	nop
 80101fe:	3728      	adds	r7, #40	; 0x28
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}
 8010204:	40023800 	.word	0x40023800
 8010208:	40020800 	.word	0x40020800
 801020c:	40020000 	.word	0x40020000
 8010210:	40020c00 	.word	0x40020c00
 8010214:	40020400 	.word	0x40020400

08010218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010218:	b480      	push	{r7}
 801021a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801021c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801021e:	e7fe      	b.n	801021e <Error_Handler+0x6>

08010220 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010226:	2300      	movs	r3, #0
 8010228:	607b      	str	r3, [r7, #4]
 801022a:	4b13      	ldr	r3, [pc, #76]	; (8010278 <HAL_MspInit+0x58>)
 801022c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801022e:	4a12      	ldr	r2, [pc, #72]	; (8010278 <HAL_MspInit+0x58>)
 8010230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010234:	6453      	str	r3, [r2, #68]	; 0x44
 8010236:	4b10      	ldr	r3, [pc, #64]	; (8010278 <HAL_MspInit+0x58>)
 8010238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801023a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801023e:	607b      	str	r3, [r7, #4]
 8010240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010242:	2300      	movs	r3, #0
 8010244:	603b      	str	r3, [r7, #0]
 8010246:	4b0c      	ldr	r3, [pc, #48]	; (8010278 <HAL_MspInit+0x58>)
 8010248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801024a:	4a0b      	ldr	r2, [pc, #44]	; (8010278 <HAL_MspInit+0x58>)
 801024c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010250:	6413      	str	r3, [r2, #64]	; 0x40
 8010252:	4b09      	ldr	r3, [pc, #36]	; (8010278 <HAL_MspInit+0x58>)
 8010254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801025a:	603b      	str	r3, [r7, #0]
 801025c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 801025e:	2200      	movs	r2, #0
 8010260:	2100      	movs	r1, #0
 8010262:	2004      	movs	r0, #4
 8010264:	f001 fbe1 	bl	8011a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8010268:	2004      	movs	r0, #4
 801026a:	f001 fbfa 	bl	8011a62 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801026e:	bf00      	nop
 8010270:	3708      	adds	r7, #8
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	40023800 	.word	0x40023800

0801027c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b08c      	sub	sp, #48	; 0x30
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010284:	f107 031c 	add.w	r3, r7, #28
 8010288:	2200      	movs	r2, #0
 801028a:	601a      	str	r2, [r3, #0]
 801028c:	605a      	str	r2, [r3, #4]
 801028e:	609a      	str	r2, [r3, #8]
 8010290:	60da      	str	r2, [r3, #12]
 8010292:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	4a73      	ldr	r2, [pc, #460]	; (8010468 <HAL_ADC_MspInit+0x1ec>)
 801029a:	4293      	cmp	r3, r2
 801029c:	d17a      	bne.n	8010394 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 801029e:	2300      	movs	r3, #0
 80102a0:	61bb      	str	r3, [r7, #24]
 80102a2:	4b72      	ldr	r3, [pc, #456]	; (801046c <HAL_ADC_MspInit+0x1f0>)
 80102a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102a6:	4a71      	ldr	r2, [pc, #452]	; (801046c <HAL_ADC_MspInit+0x1f0>)
 80102a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80102ac:	6453      	str	r3, [r2, #68]	; 0x44
 80102ae:	4b6f      	ldr	r3, [pc, #444]	; (801046c <HAL_ADC_MspInit+0x1f0>)
 80102b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102b6:	61bb      	str	r3, [r7, #24]
 80102b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80102ba:	2300      	movs	r3, #0
 80102bc:	617b      	str	r3, [r7, #20]
 80102be:	4b6b      	ldr	r3, [pc, #428]	; (801046c <HAL_ADC_MspInit+0x1f0>)
 80102c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102c2:	4a6a      	ldr	r2, [pc, #424]	; (801046c <HAL_ADC_MspInit+0x1f0>)
 80102c4:	f043 0304 	orr.w	r3, r3, #4
 80102c8:	6313      	str	r3, [r2, #48]	; 0x30
 80102ca:	4b68      	ldr	r3, [pc, #416]	; (801046c <HAL_ADC_MspInit+0x1f0>)
 80102cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102ce:	f003 0304 	and.w	r3, r3, #4
 80102d2:	617b      	str	r3, [r7, #20]
 80102d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80102d6:	2300      	movs	r3, #0
 80102d8:	613b      	str	r3, [r7, #16]
 80102da:	4b64      	ldr	r3, [pc, #400]	; (801046c <HAL_ADC_MspInit+0x1f0>)
 80102dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102de:	4a63      	ldr	r2, [pc, #396]	; (801046c <HAL_ADC_MspInit+0x1f0>)
 80102e0:	f043 0302 	orr.w	r3, r3, #2
 80102e4:	6313      	str	r3, [r2, #48]	; 0x30
 80102e6:	4b61      	ldr	r3, [pc, #388]	; (801046c <HAL_ADC_MspInit+0x1f0>)
 80102e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102ea:	f003 0302 	and.w	r3, r3, #2
 80102ee:	613b      	str	r3, [r7, #16]
 80102f0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80102f2:	2311      	movs	r3, #17
 80102f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80102f6:	2303      	movs	r3, #3
 80102f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102fa:	2300      	movs	r3, #0
 80102fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80102fe:	f107 031c 	add.w	r3, r7, #28
 8010302:	4619      	mov	r1, r3
 8010304:	485a      	ldr	r0, [pc, #360]	; (8010470 <HAL_ADC_MspInit+0x1f4>)
 8010306:	f002 fb2f 	bl	8012968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801030a:	2302      	movs	r3, #2
 801030c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801030e:	2303      	movs	r3, #3
 8010310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010312:	2300      	movs	r3, #0
 8010314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010316:	f107 031c 	add.w	r3, r7, #28
 801031a:	4619      	mov	r1, r3
 801031c:	4855      	ldr	r0, [pc, #340]	; (8010474 <HAL_ADC_MspInit+0x1f8>)
 801031e:	f002 fb23 	bl	8012968 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8010322:	4b55      	ldr	r3, [pc, #340]	; (8010478 <HAL_ADC_MspInit+0x1fc>)
 8010324:	4a55      	ldr	r2, [pc, #340]	; (801047c <HAL_ADC_MspInit+0x200>)
 8010326:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8010328:	4b53      	ldr	r3, [pc, #332]	; (8010478 <HAL_ADC_MspInit+0x1fc>)
 801032a:	2200      	movs	r2, #0
 801032c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801032e:	4b52      	ldr	r3, [pc, #328]	; (8010478 <HAL_ADC_MspInit+0x1fc>)
 8010330:	2200      	movs	r2, #0
 8010332:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8010334:	4b50      	ldr	r3, [pc, #320]	; (8010478 <HAL_ADC_MspInit+0x1fc>)
 8010336:	2200      	movs	r2, #0
 8010338:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 801033a:	4b4f      	ldr	r3, [pc, #316]	; (8010478 <HAL_ADC_MspInit+0x1fc>)
 801033c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010340:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010342:	4b4d      	ldr	r3, [pc, #308]	; (8010478 <HAL_ADC_MspInit+0x1fc>)
 8010344:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010348:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801034a:	4b4b      	ldr	r3, [pc, #300]	; (8010478 <HAL_ADC_MspInit+0x1fc>)
 801034c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010350:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8010352:	4b49      	ldr	r3, [pc, #292]	; (8010478 <HAL_ADC_MspInit+0x1fc>)
 8010354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010358:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 801035a:	4b47      	ldr	r3, [pc, #284]	; (8010478 <HAL_ADC_MspInit+0x1fc>)
 801035c:	2200      	movs	r2, #0
 801035e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8010360:	4b45      	ldr	r3, [pc, #276]	; (8010478 <HAL_ADC_MspInit+0x1fc>)
 8010362:	2200      	movs	r2, #0
 8010364:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8010366:	4844      	ldr	r0, [pc, #272]	; (8010478 <HAL_ADC_MspInit+0x1fc>)
 8010368:	f001 fb96 	bl	8011a98 <HAL_DMA_Init>
 801036c:	4603      	mov	r3, r0
 801036e:	2b00      	cmp	r3, #0
 8010370:	d001      	beq.n	8010376 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8010372:	f7ff ff51 	bl	8010218 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	4a3f      	ldr	r2, [pc, #252]	; (8010478 <HAL_ADC_MspInit+0x1fc>)
 801037a:	639a      	str	r2, [r3, #56]	; 0x38
 801037c:	4a3e      	ldr	r2, [pc, #248]	; (8010478 <HAL_ADC_MspInit+0x1fc>)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8010382:	2200      	movs	r2, #0
 8010384:	2100      	movs	r1, #0
 8010386:	2012      	movs	r0, #18
 8010388:	f001 fb4f 	bl	8011a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 801038c:	2012      	movs	r0, #18
 801038e:	f001 fb68 	bl	8011a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8010392:	e065      	b.n	8010460 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	4a39      	ldr	r2, [pc, #228]	; (8010480 <HAL_ADC_MspInit+0x204>)
 801039a:	4293      	cmp	r3, r2
 801039c:	d160      	bne.n	8010460 <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 801039e:	2300      	movs	r3, #0
 80103a0:	60fb      	str	r3, [r7, #12]
 80103a2:	4b32      	ldr	r3, [pc, #200]	; (801046c <HAL_ADC_MspInit+0x1f0>)
 80103a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103a6:	4a31      	ldr	r2, [pc, #196]	; (801046c <HAL_ADC_MspInit+0x1f0>)
 80103a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80103ac:	6453      	str	r3, [r2, #68]	; 0x44
 80103ae:	4b2f      	ldr	r3, [pc, #188]	; (801046c <HAL_ADC_MspInit+0x1f0>)
 80103b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80103b6:	60fb      	str	r3, [r7, #12]
 80103b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80103ba:	2300      	movs	r3, #0
 80103bc:	60bb      	str	r3, [r7, #8]
 80103be:	4b2b      	ldr	r3, [pc, #172]	; (801046c <HAL_ADC_MspInit+0x1f0>)
 80103c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103c2:	4a2a      	ldr	r2, [pc, #168]	; (801046c <HAL_ADC_MspInit+0x1f0>)
 80103c4:	f043 0304 	orr.w	r3, r3, #4
 80103c8:	6313      	str	r3, [r2, #48]	; 0x30
 80103ca:	4b28      	ldr	r3, [pc, #160]	; (801046c <HAL_ADC_MspInit+0x1f0>)
 80103cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103ce:	f003 0304 	and.w	r3, r3, #4
 80103d2:	60bb      	str	r3, [r7, #8]
 80103d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80103d6:	2322      	movs	r3, #34	; 0x22
 80103d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80103da:	2303      	movs	r3, #3
 80103dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103de:	2300      	movs	r3, #0
 80103e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80103e2:	f107 031c 	add.w	r3, r7, #28
 80103e6:	4619      	mov	r1, r3
 80103e8:	4821      	ldr	r0, [pc, #132]	; (8010470 <HAL_ADC_MspInit+0x1f4>)
 80103ea:	f002 fabd 	bl	8012968 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80103ee:	4b25      	ldr	r3, [pc, #148]	; (8010484 <HAL_ADC_MspInit+0x208>)
 80103f0:	4a25      	ldr	r2, [pc, #148]	; (8010488 <HAL_ADC_MspInit+0x20c>)
 80103f2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80103f4:	4b23      	ldr	r3, [pc, #140]	; (8010484 <HAL_ADC_MspInit+0x208>)
 80103f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80103fa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80103fc:	4b21      	ldr	r3, [pc, #132]	; (8010484 <HAL_ADC_MspInit+0x208>)
 80103fe:	2200      	movs	r2, #0
 8010400:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8010402:	4b20      	ldr	r3, [pc, #128]	; (8010484 <HAL_ADC_MspInit+0x208>)
 8010404:	2200      	movs	r2, #0
 8010406:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8010408:	4b1e      	ldr	r3, [pc, #120]	; (8010484 <HAL_ADC_MspInit+0x208>)
 801040a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801040e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010410:	4b1c      	ldr	r3, [pc, #112]	; (8010484 <HAL_ADC_MspInit+0x208>)
 8010412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010416:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8010418:	4b1a      	ldr	r3, [pc, #104]	; (8010484 <HAL_ADC_MspInit+0x208>)
 801041a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801041e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8010420:	4b18      	ldr	r3, [pc, #96]	; (8010484 <HAL_ADC_MspInit+0x208>)
 8010422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010426:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8010428:	4b16      	ldr	r3, [pc, #88]	; (8010484 <HAL_ADC_MspInit+0x208>)
 801042a:	2200      	movs	r2, #0
 801042c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801042e:	4b15      	ldr	r3, [pc, #84]	; (8010484 <HAL_ADC_MspInit+0x208>)
 8010430:	2200      	movs	r2, #0
 8010432:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8010434:	4813      	ldr	r0, [pc, #76]	; (8010484 <HAL_ADC_MspInit+0x208>)
 8010436:	f001 fb2f 	bl	8011a98 <HAL_DMA_Init>
 801043a:	4603      	mov	r3, r0
 801043c:	2b00      	cmp	r3, #0
 801043e:	d001      	beq.n	8010444 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 8010440:	f7ff feea 	bl	8010218 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	4a0f      	ldr	r2, [pc, #60]	; (8010484 <HAL_ADC_MspInit+0x208>)
 8010448:	639a      	str	r2, [r3, #56]	; 0x38
 801044a:	4a0e      	ldr	r2, [pc, #56]	; (8010484 <HAL_ADC_MspInit+0x208>)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8010450:	2200      	movs	r2, #0
 8010452:	2100      	movs	r1, #0
 8010454:	2012      	movs	r0, #18
 8010456:	f001 fae8 	bl	8011a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 801045a:	2012      	movs	r0, #18
 801045c:	f001 fb01 	bl	8011a62 <HAL_NVIC_EnableIRQ>
}
 8010460:	bf00      	nop
 8010462:	3730      	adds	r7, #48	; 0x30
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	40012000 	.word	0x40012000
 801046c:	40023800 	.word	0x40023800
 8010470:	40020800 	.word	0x40020800
 8010474:	40020400 	.word	0x40020400
 8010478:	20004a00 	.word	0x20004a00
 801047c:	40026410 	.word	0x40026410
 8010480:	40012100 	.word	0x40012100
 8010484:	20004ff4 	.word	0x20004ff4
 8010488:	40026440 	.word	0x40026440

0801048c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b08a      	sub	sp, #40	; 0x28
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010494:	f107 0314 	add.w	r3, r7, #20
 8010498:	2200      	movs	r2, #0
 801049a:	601a      	str	r2, [r3, #0]
 801049c:	605a      	str	r2, [r3, #4]
 801049e:	609a      	str	r2, [r3, #8]
 80104a0:	60da      	str	r2, [r3, #12]
 80104a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4a19      	ldr	r2, [pc, #100]	; (8010510 <HAL_SPI_MspInit+0x84>)
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d12c      	bne.n	8010508 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80104ae:	2300      	movs	r3, #0
 80104b0:	613b      	str	r3, [r7, #16]
 80104b2:	4b18      	ldr	r3, [pc, #96]	; (8010514 <HAL_SPI_MspInit+0x88>)
 80104b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104b6:	4a17      	ldr	r2, [pc, #92]	; (8010514 <HAL_SPI_MspInit+0x88>)
 80104b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104bc:	6413      	str	r3, [r2, #64]	; 0x40
 80104be:	4b15      	ldr	r3, [pc, #84]	; (8010514 <HAL_SPI_MspInit+0x88>)
 80104c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80104c6:	613b      	str	r3, [r7, #16]
 80104c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80104ca:	2300      	movs	r3, #0
 80104cc:	60fb      	str	r3, [r7, #12]
 80104ce:	4b11      	ldr	r3, [pc, #68]	; (8010514 <HAL_SPI_MspInit+0x88>)
 80104d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104d2:	4a10      	ldr	r2, [pc, #64]	; (8010514 <HAL_SPI_MspInit+0x88>)
 80104d4:	f043 0304 	orr.w	r3, r3, #4
 80104d8:	6313      	str	r3, [r2, #48]	; 0x30
 80104da:	4b0e      	ldr	r3, [pc, #56]	; (8010514 <HAL_SPI_MspInit+0x88>)
 80104dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104de:	f003 0304 	and.w	r3, r3, #4
 80104e2:	60fb      	str	r3, [r7, #12]
 80104e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80104e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80104ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104ec:	2302      	movs	r3, #2
 80104ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80104f0:	2300      	movs	r3, #0
 80104f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80104f4:	2303      	movs	r3, #3
 80104f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80104f8:	2306      	movs	r3, #6
 80104fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80104fc:	f107 0314 	add.w	r3, r7, #20
 8010500:	4619      	mov	r1, r3
 8010502:	4805      	ldr	r0, [pc, #20]	; (8010518 <HAL_SPI_MspInit+0x8c>)
 8010504:	f002 fa30 	bl	8012968 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8010508:	bf00      	nop
 801050a:	3728      	adds	r7, #40	; 0x28
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}
 8010510:	40003c00 	.word	0x40003c00
 8010514:	40023800 	.word	0x40023800
 8010518:	40020800 	.word	0x40020800

0801051c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b086      	sub	sp, #24
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	4a40      	ldr	r2, [pc, #256]	; (801062c <HAL_TIM_Base_MspInit+0x110>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d116      	bne.n	801055c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 801052e:	2300      	movs	r3, #0
 8010530:	617b      	str	r3, [r7, #20]
 8010532:	4b3f      	ldr	r3, [pc, #252]	; (8010630 <HAL_TIM_Base_MspInit+0x114>)
 8010534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010536:	4a3e      	ldr	r2, [pc, #248]	; (8010630 <HAL_TIM_Base_MspInit+0x114>)
 8010538:	f043 0301 	orr.w	r3, r3, #1
 801053c:	6453      	str	r3, [r2, #68]	; 0x44
 801053e:	4b3c      	ldr	r3, [pc, #240]	; (8010630 <HAL_TIM_Base_MspInit+0x114>)
 8010540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010542:	f003 0301 	and.w	r3, r3, #1
 8010546:	617b      	str	r3, [r7, #20]
 8010548:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 801054a:	2200      	movs	r2, #0
 801054c:	2101      	movs	r1, #1
 801054e:	2019      	movs	r0, #25
 8010550:	f001 fa6b 	bl	8011a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8010554:	2019      	movs	r0, #25
 8010556:	f001 fa84 	bl	8011a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 801055a:	e062      	b.n	8010622 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010564:	d116      	bne.n	8010594 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8010566:	2300      	movs	r3, #0
 8010568:	613b      	str	r3, [r7, #16]
 801056a:	4b31      	ldr	r3, [pc, #196]	; (8010630 <HAL_TIM_Base_MspInit+0x114>)
 801056c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801056e:	4a30      	ldr	r2, [pc, #192]	; (8010630 <HAL_TIM_Base_MspInit+0x114>)
 8010570:	f043 0301 	orr.w	r3, r3, #1
 8010574:	6413      	str	r3, [r2, #64]	; 0x40
 8010576:	4b2e      	ldr	r3, [pc, #184]	; (8010630 <HAL_TIM_Base_MspInit+0x114>)
 8010578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801057a:	f003 0301 	and.w	r3, r3, #1
 801057e:	613b      	str	r3, [r7, #16]
 8010580:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8010582:	2200      	movs	r2, #0
 8010584:	2100      	movs	r1, #0
 8010586:	201c      	movs	r0, #28
 8010588:	f001 fa4f 	bl	8011a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801058c:	201c      	movs	r0, #28
 801058e:	f001 fa68 	bl	8011a62 <HAL_NVIC_EnableIRQ>
}
 8010592:	e046      	b.n	8010622 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	4a26      	ldr	r2, [pc, #152]	; (8010634 <HAL_TIM_Base_MspInit+0x118>)
 801059a:	4293      	cmp	r3, r2
 801059c:	d116      	bne.n	80105cc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801059e:	2300      	movs	r3, #0
 80105a0:	60fb      	str	r3, [r7, #12]
 80105a2:	4b23      	ldr	r3, [pc, #140]	; (8010630 <HAL_TIM_Base_MspInit+0x114>)
 80105a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105a6:	4a22      	ldr	r2, [pc, #136]	; (8010630 <HAL_TIM_Base_MspInit+0x114>)
 80105a8:	f043 0308 	orr.w	r3, r3, #8
 80105ac:	6413      	str	r3, [r2, #64]	; 0x40
 80105ae:	4b20      	ldr	r3, [pc, #128]	; (8010630 <HAL_TIM_Base_MspInit+0x114>)
 80105b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105b2:	f003 0308 	and.w	r3, r3, #8
 80105b6:	60fb      	str	r3, [r7, #12]
 80105b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80105ba:	2200      	movs	r2, #0
 80105bc:	2100      	movs	r1, #0
 80105be:	2032      	movs	r0, #50	; 0x32
 80105c0:	f001 fa33 	bl	8011a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80105c4:	2032      	movs	r0, #50	; 0x32
 80105c6:	f001 fa4c 	bl	8011a62 <HAL_NVIC_EnableIRQ>
}
 80105ca:	e02a      	b.n	8010622 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	4a19      	ldr	r2, [pc, #100]	; (8010638 <HAL_TIM_Base_MspInit+0x11c>)
 80105d2:	4293      	cmp	r3, r2
 80105d4:	d125      	bne.n	8010622 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80105d6:	2300      	movs	r3, #0
 80105d8:	60bb      	str	r3, [r7, #8]
 80105da:	4b15      	ldr	r3, [pc, #84]	; (8010630 <HAL_TIM_Base_MspInit+0x114>)
 80105dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105de:	4a14      	ldr	r2, [pc, #80]	; (8010630 <HAL_TIM_Base_MspInit+0x114>)
 80105e0:	f043 0302 	orr.w	r3, r3, #2
 80105e4:	6453      	str	r3, [r2, #68]	; 0x44
 80105e6:	4b12      	ldr	r3, [pc, #72]	; (8010630 <HAL_TIM_Base_MspInit+0x114>)
 80105e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105ea:	f003 0302 	and.w	r3, r3, #2
 80105ee:	60bb      	str	r3, [r7, #8]
 80105f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 80105f2:	2200      	movs	r2, #0
 80105f4:	2102      	movs	r1, #2
 80105f6:	202c      	movs	r0, #44	; 0x2c
 80105f8:	f001 fa17 	bl	8011a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80105fc:	202c      	movs	r0, #44	; 0x2c
 80105fe:	f001 fa30 	bl	8011a62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8010602:	2200      	movs	r2, #0
 8010604:	2100      	movs	r1, #0
 8010606:	202d      	movs	r0, #45	; 0x2d
 8010608:	f001 fa0f 	bl	8011a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 801060c:	202d      	movs	r0, #45	; 0x2d
 801060e:	f001 fa28 	bl	8011a62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8010612:	2200      	movs	r2, #0
 8010614:	2100      	movs	r1, #0
 8010616:	202e      	movs	r0, #46	; 0x2e
 8010618:	f001 fa07 	bl	8011a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 801061c:	202e      	movs	r0, #46	; 0x2e
 801061e:	f001 fa20 	bl	8011a62 <HAL_NVIC_EnableIRQ>
}
 8010622:	bf00      	nop
 8010624:	3718      	adds	r7, #24
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	40010000 	.word	0x40010000
 8010630:	40023800 	.word	0x40023800
 8010634:	40000c00 	.word	0x40000c00
 8010638:	40010400 	.word	0x40010400

0801063c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b08c      	sub	sp, #48	; 0x30
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010644:	f107 031c 	add.w	r3, r7, #28
 8010648:	2200      	movs	r2, #0
 801064a:	601a      	str	r2, [r3, #0]
 801064c:	605a      	str	r2, [r3, #4]
 801064e:	609a      	str	r2, [r3, #8]
 8010650:	60da      	str	r2, [r3, #12]
 8010652:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	4a3a      	ldr	r2, [pc, #232]	; (8010744 <HAL_TIM_Encoder_MspInit+0x108>)
 801065a:	4293      	cmp	r3, r2
 801065c:	d134      	bne.n	80106c8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 801065e:	2300      	movs	r3, #0
 8010660:	61bb      	str	r3, [r7, #24]
 8010662:	4b39      	ldr	r3, [pc, #228]	; (8010748 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010666:	4a38      	ldr	r2, [pc, #224]	; (8010748 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010668:	f043 0302 	orr.w	r3, r3, #2
 801066c:	6413      	str	r3, [r2, #64]	; 0x40
 801066e:	4b36      	ldr	r3, [pc, #216]	; (8010748 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010672:	f003 0302 	and.w	r3, r3, #2
 8010676:	61bb      	str	r3, [r7, #24]
 8010678:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801067a:	2300      	movs	r3, #0
 801067c:	617b      	str	r3, [r7, #20]
 801067e:	4b32      	ldr	r3, [pc, #200]	; (8010748 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010682:	4a31      	ldr	r2, [pc, #196]	; (8010748 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010684:	f043 0301 	orr.w	r3, r3, #1
 8010688:	6313      	str	r3, [r2, #48]	; 0x30
 801068a:	4b2f      	ldr	r3, [pc, #188]	; (8010748 <HAL_TIM_Encoder_MspInit+0x10c>)
 801068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801068e:	f003 0301 	and.w	r3, r3, #1
 8010692:	617b      	str	r3, [r7, #20]
 8010694:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010696:	23c0      	movs	r3, #192	; 0xc0
 8010698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801069a:	2302      	movs	r3, #2
 801069c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801069e:	2300      	movs	r3, #0
 80106a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80106a2:	2300      	movs	r3, #0
 80106a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80106a6:	2302      	movs	r3, #2
 80106a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80106aa:	f107 031c 	add.w	r3, r7, #28
 80106ae:	4619      	mov	r1, r3
 80106b0:	4826      	ldr	r0, [pc, #152]	; (801074c <HAL_TIM_Encoder_MspInit+0x110>)
 80106b2:	f002 f959 	bl	8012968 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80106b6:	2200      	movs	r2, #0
 80106b8:	2100      	movs	r1, #0
 80106ba:	201d      	movs	r0, #29
 80106bc:	f001 f9b5 	bl	8011a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80106c0:	201d      	movs	r0, #29
 80106c2:	f001 f9ce 	bl	8011a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80106c6:	e038      	b.n	801073a <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	4a20      	ldr	r2, [pc, #128]	; (8010750 <HAL_TIM_Encoder_MspInit+0x114>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d133      	bne.n	801073a <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80106d2:	2300      	movs	r3, #0
 80106d4:	613b      	str	r3, [r7, #16]
 80106d6:	4b1c      	ldr	r3, [pc, #112]	; (8010748 <HAL_TIM_Encoder_MspInit+0x10c>)
 80106d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106da:	4a1b      	ldr	r2, [pc, #108]	; (8010748 <HAL_TIM_Encoder_MspInit+0x10c>)
 80106dc:	f043 0304 	orr.w	r3, r3, #4
 80106e0:	6413      	str	r3, [r2, #64]	; 0x40
 80106e2:	4b19      	ldr	r3, [pc, #100]	; (8010748 <HAL_TIM_Encoder_MspInit+0x10c>)
 80106e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106e6:	f003 0304 	and.w	r3, r3, #4
 80106ea:	613b      	str	r3, [r7, #16]
 80106ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80106ee:	2300      	movs	r3, #0
 80106f0:	60fb      	str	r3, [r7, #12]
 80106f2:	4b15      	ldr	r3, [pc, #84]	; (8010748 <HAL_TIM_Encoder_MspInit+0x10c>)
 80106f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106f6:	4a14      	ldr	r2, [pc, #80]	; (8010748 <HAL_TIM_Encoder_MspInit+0x10c>)
 80106f8:	f043 0302 	orr.w	r3, r3, #2
 80106fc:	6313      	str	r3, [r2, #48]	; 0x30
 80106fe:	4b12      	ldr	r3, [pc, #72]	; (8010748 <HAL_TIM_Encoder_MspInit+0x10c>)
 8010700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010702:	f003 0302 	and.w	r3, r3, #2
 8010706:	60fb      	str	r3, [r7, #12]
 8010708:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801070a:	23c0      	movs	r3, #192	; 0xc0
 801070c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801070e:	2302      	movs	r3, #2
 8010710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010712:	2300      	movs	r3, #0
 8010714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010716:	2300      	movs	r3, #0
 8010718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 801071a:	2302      	movs	r3, #2
 801071c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801071e:	f107 031c 	add.w	r3, r7, #28
 8010722:	4619      	mov	r1, r3
 8010724:	480b      	ldr	r0, [pc, #44]	; (8010754 <HAL_TIM_Encoder_MspInit+0x118>)
 8010726:	f002 f91f 	bl	8012968 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801072a:	2200      	movs	r2, #0
 801072c:	2100      	movs	r1, #0
 801072e:	201e      	movs	r0, #30
 8010730:	f001 f97b 	bl	8011a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8010734:	201e      	movs	r0, #30
 8010736:	f001 f994 	bl	8011a62 <HAL_NVIC_EnableIRQ>
}
 801073a:	bf00      	nop
 801073c:	3730      	adds	r7, #48	; 0x30
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	40000400 	.word	0x40000400
 8010748:	40023800 	.word	0x40023800
 801074c:	40020000 	.word	0x40020000
 8010750:	40000800 	.word	0x40000800
 8010754:	40020400 	.word	0x40020400

08010758 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b08c      	sub	sp, #48	; 0x30
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010760:	f107 031c 	add.w	r3, r7, #28
 8010764:	2200      	movs	r2, #0
 8010766:	601a      	str	r2, [r3, #0]
 8010768:	605a      	str	r2, [r3, #4]
 801076a:	609a      	str	r2, [r3, #8]
 801076c:	60da      	str	r2, [r3, #12]
 801076e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010778:	d11e      	bne.n	80107b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801077a:	2300      	movs	r3, #0
 801077c:	61bb      	str	r3, [r7, #24]
 801077e:	4b43      	ldr	r3, [pc, #268]	; (801088c <HAL_TIM_MspPostInit+0x134>)
 8010780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010782:	4a42      	ldr	r2, [pc, #264]	; (801088c <HAL_TIM_MspPostInit+0x134>)
 8010784:	f043 0301 	orr.w	r3, r3, #1
 8010788:	6313      	str	r3, [r2, #48]	; 0x30
 801078a:	4b40      	ldr	r3, [pc, #256]	; (801088c <HAL_TIM_MspPostInit+0x134>)
 801078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801078e:	f003 0301 	and.w	r3, r3, #1
 8010792:	61bb      	str	r3, [r7, #24]
 8010794:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8010796:	2308      	movs	r3, #8
 8010798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801079a:	2302      	movs	r3, #2
 801079c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801079e:	2300      	movs	r3, #0
 80107a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80107a2:	2303      	movs	r3, #3
 80107a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80107a6:	2301      	movs	r3, #1
 80107a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80107aa:	f107 031c 	add.w	r3, r7, #28
 80107ae:	4619      	mov	r1, r3
 80107b0:	4837      	ldr	r0, [pc, #220]	; (8010890 <HAL_TIM_MspPostInit+0x138>)
 80107b2:	f002 f8d9 	bl	8012968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80107b6:	e064      	b.n	8010882 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	4a35      	ldr	r2, [pc, #212]	; (8010894 <HAL_TIM_MspPostInit+0x13c>)
 80107be:	4293      	cmp	r3, r2
 80107c0:	d11e      	bne.n	8010800 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80107c2:	2300      	movs	r3, #0
 80107c4:	617b      	str	r3, [r7, #20]
 80107c6:	4b31      	ldr	r3, [pc, #196]	; (801088c <HAL_TIM_MspPostInit+0x134>)
 80107c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107ca:	4a30      	ldr	r2, [pc, #192]	; (801088c <HAL_TIM_MspPostInit+0x134>)
 80107cc:	f043 0301 	orr.w	r3, r3, #1
 80107d0:	6313      	str	r3, [r2, #48]	; 0x30
 80107d2:	4b2e      	ldr	r3, [pc, #184]	; (801088c <HAL_TIM_MspPostInit+0x134>)
 80107d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107d6:	f003 0301 	and.w	r3, r3, #1
 80107da:	617b      	str	r3, [r7, #20]
 80107dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80107de:	2302      	movs	r3, #2
 80107e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107e2:	2302      	movs	r3, #2
 80107e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107e6:	2300      	movs	r3, #0
 80107e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107ea:	2300      	movs	r3, #0
 80107ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80107ee:	2302      	movs	r3, #2
 80107f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80107f2:	f107 031c 	add.w	r3, r7, #28
 80107f6:	4619      	mov	r1, r3
 80107f8:	4825      	ldr	r0, [pc, #148]	; (8010890 <HAL_TIM_MspPostInit+0x138>)
 80107fa:	f002 f8b5 	bl	8012968 <HAL_GPIO_Init>
}
 80107fe:	e040      	b.n	8010882 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	4a24      	ldr	r2, [pc, #144]	; (8010898 <HAL_TIM_MspPostInit+0x140>)
 8010806:	4293      	cmp	r3, r2
 8010808:	d13b      	bne.n	8010882 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801080a:	2300      	movs	r3, #0
 801080c:	613b      	str	r3, [r7, #16]
 801080e:	4b1f      	ldr	r3, [pc, #124]	; (801088c <HAL_TIM_MspPostInit+0x134>)
 8010810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010812:	4a1e      	ldr	r2, [pc, #120]	; (801088c <HAL_TIM_MspPostInit+0x134>)
 8010814:	f043 0301 	orr.w	r3, r3, #1
 8010818:	6313      	str	r3, [r2, #48]	; 0x30
 801081a:	4b1c      	ldr	r3, [pc, #112]	; (801088c <HAL_TIM_MspPostInit+0x134>)
 801081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801081e:	f003 0301 	and.w	r3, r3, #1
 8010822:	613b      	str	r3, [r7, #16]
 8010824:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010826:	2300      	movs	r3, #0
 8010828:	60fb      	str	r3, [r7, #12]
 801082a:	4b18      	ldr	r3, [pc, #96]	; (801088c <HAL_TIM_MspPostInit+0x134>)
 801082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801082e:	4a17      	ldr	r2, [pc, #92]	; (801088c <HAL_TIM_MspPostInit+0x134>)
 8010830:	f043 0304 	orr.w	r3, r3, #4
 8010834:	6313      	str	r3, [r2, #48]	; 0x30
 8010836:	4b15      	ldr	r3, [pc, #84]	; (801088c <HAL_TIM_MspPostInit+0x134>)
 8010838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801083a:	f003 0304 	and.w	r3, r3, #4
 801083e:	60fb      	str	r3, [r7, #12]
 8010840:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8010842:	2320      	movs	r3, #32
 8010844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010846:	2302      	movs	r3, #2
 8010848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801084a:	2300      	movs	r3, #0
 801084c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801084e:	2300      	movs	r3, #0
 8010850:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010852:	2303      	movs	r3, #3
 8010854:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010856:	f107 031c 	add.w	r3, r7, #28
 801085a:	4619      	mov	r1, r3
 801085c:	480c      	ldr	r0, [pc, #48]	; (8010890 <HAL_TIM_MspPostInit+0x138>)
 801085e:	f002 f883 	bl	8012968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8010862:	2340      	movs	r3, #64	; 0x40
 8010864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010866:	2302      	movs	r3, #2
 8010868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801086a:	2300      	movs	r3, #0
 801086c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801086e:	2300      	movs	r3, #0
 8010870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010872:	2303      	movs	r3, #3
 8010874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010876:	f107 031c 	add.w	r3, r7, #28
 801087a:	4619      	mov	r1, r3
 801087c:	4807      	ldr	r0, [pc, #28]	; (801089c <HAL_TIM_MspPostInit+0x144>)
 801087e:	f002 f873 	bl	8012968 <HAL_GPIO_Init>
}
 8010882:	bf00      	nop
 8010884:	3730      	adds	r7, #48	; 0x30
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	40023800 	.word	0x40023800
 8010890:	40020000 	.word	0x40020000
 8010894:	40000c00 	.word	0x40000c00
 8010898:	40010400 	.word	0x40010400
 801089c:	40020800 	.word	0x40020800

080108a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b08a      	sub	sp, #40	; 0x28
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80108a8:	f107 0314 	add.w	r3, r7, #20
 80108ac:	2200      	movs	r2, #0
 80108ae:	601a      	str	r2, [r3, #0]
 80108b0:	605a      	str	r2, [r3, #4]
 80108b2:	609a      	str	r2, [r3, #8]
 80108b4:	60da      	str	r2, [r3, #12]
 80108b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	4a19      	ldr	r2, [pc, #100]	; (8010924 <HAL_UART_MspInit+0x84>)
 80108be:	4293      	cmp	r3, r2
 80108c0:	d12c      	bne.n	801091c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80108c2:	2300      	movs	r3, #0
 80108c4:	613b      	str	r3, [r7, #16]
 80108c6:	4b18      	ldr	r3, [pc, #96]	; (8010928 <HAL_UART_MspInit+0x88>)
 80108c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108ca:	4a17      	ldr	r2, [pc, #92]	; (8010928 <HAL_UART_MspInit+0x88>)
 80108cc:	f043 0310 	orr.w	r3, r3, #16
 80108d0:	6453      	str	r3, [r2, #68]	; 0x44
 80108d2:	4b15      	ldr	r3, [pc, #84]	; (8010928 <HAL_UART_MspInit+0x88>)
 80108d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108d6:	f003 0310 	and.w	r3, r3, #16
 80108da:	613b      	str	r3, [r7, #16]
 80108dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80108de:	2300      	movs	r3, #0
 80108e0:	60fb      	str	r3, [r7, #12]
 80108e2:	4b11      	ldr	r3, [pc, #68]	; (8010928 <HAL_UART_MspInit+0x88>)
 80108e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108e6:	4a10      	ldr	r2, [pc, #64]	; (8010928 <HAL_UART_MspInit+0x88>)
 80108e8:	f043 0301 	orr.w	r3, r3, #1
 80108ec:	6313      	str	r3, [r2, #48]	; 0x30
 80108ee:	4b0e      	ldr	r3, [pc, #56]	; (8010928 <HAL_UART_MspInit+0x88>)
 80108f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108f2:	f003 0301 	and.w	r3, r3, #1
 80108f6:	60fb      	str	r3, [r7, #12]
 80108f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80108fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80108fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010900:	2302      	movs	r3, #2
 8010902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010904:	2300      	movs	r3, #0
 8010906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010908:	2303      	movs	r3, #3
 801090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801090c:	2307      	movs	r3, #7
 801090e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010910:	f107 0314 	add.w	r3, r7, #20
 8010914:	4619      	mov	r1, r3
 8010916:	4805      	ldr	r0, [pc, #20]	; (801092c <HAL_UART_MspInit+0x8c>)
 8010918:	f002 f826 	bl	8012968 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 801091c:	bf00      	nop
 801091e:	3728      	adds	r7, #40	; 0x28
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	40011000 	.word	0x40011000
 8010928:	40023800 	.word	0x40023800
 801092c:	40020000 	.word	0x40020000

08010930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010930:	b480      	push	{r7}
 8010932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8010934:	e7fe      	b.n	8010934 <NMI_Handler+0x4>

08010936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010936:	b480      	push	{r7}
 8010938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801093a:	e7fe      	b.n	801093a <HardFault_Handler+0x4>

0801093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801093c:	b480      	push	{r7}
 801093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010940:	e7fe      	b.n	8010940 <MemManage_Handler+0x4>

08010942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010942:	b480      	push	{r7}
 8010944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010946:	e7fe      	b.n	8010946 <BusFault_Handler+0x4>

08010948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010948:	b480      	push	{r7}
 801094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801094c:	e7fe      	b.n	801094c <UsageFault_Handler+0x4>

0801094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801094e:	b480      	push	{r7}
 8010950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010952:	bf00      	nop
 8010954:	46bd      	mov	sp, r7
 8010956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095a:	4770      	bx	lr

0801095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801095c:	b480      	push	{r7}
 801095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010960:	bf00      	nop
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr

0801096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801096a:	b480      	push	{r7}
 801096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801096e:	bf00      	nop
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr

08010978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801097c:	f000 f9b0 	bl	8010ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010980:	bf00      	nop
 8010982:	bd80      	pop	{r7, pc}

08010984 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8010988:	f001 fcb8 	bl	80122fc <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 801098c:	bf00      	nop
 801098e:	bd80      	pop	{r7, pc}

08010990 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8010994:	4803      	ldr	r0, [pc, #12]	; (80109a4 <ADC_IRQHandler+0x14>)
 8010996:	f000 fa28 	bl	8010dea <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 801099a:	4803      	ldr	r0, [pc, #12]	; (80109a8 <ADC_IRQHandler+0x18>)
 801099c:	f000 fa25 	bl	8010dea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80109a0:	bf00      	nop
 80109a2:	bd80      	pop	{r7, pc}
 80109a4:	20004588 	.word	0x20004588
 80109a8:	2000444c 	.word	0x2000444c

080109ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80109b0:	4802      	ldr	r0, [pc, #8]	; (80109bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80109b2:	f003 febe 	bl	8014732 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80109b6:	bf00      	nop
 80109b8:	bd80      	pop	{r7, pc}
 80109ba:	bf00      	nop
 80109bc:	20004ae0 	.word	0x20004ae0

080109c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80109c4:	4802      	ldr	r0, [pc, #8]	; (80109d0 <TIM2_IRQHandler+0x10>)
 80109c6:	f003 feb4 	bl	8014732 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80109ca:	bf00      	nop
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop
 80109d0:	20004fb0 	.word	0x20004fb0

080109d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80109d8:	4802      	ldr	r0, [pc, #8]	; (80109e4 <TIM3_IRQHandler+0x10>)
 80109da:	f003 feaa 	bl	8014732 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80109de:	bf00      	nop
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	200044e8 	.word	0x200044e8

080109e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80109ec:	4802      	ldr	r0, [pc, #8]	; (80109f8 <TIM4_IRQHandler+0x10>)
 80109ee:	f003 fea0 	bl	8014732 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80109f2:	bf00      	nop
 80109f4:	bd80      	pop	{r7, pc}
 80109f6:	bf00      	nop
 80109f8:	2000440c 	.word	0x2000440c

080109fc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8010a00:	4802      	ldr	r0, [pc, #8]	; (8010a0c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8010a02:	f003 fe96 	bl	8014732 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8010a06:	bf00      	nop
 8010a08:	bd80      	pop	{r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	200043c8 	.word	0x200043c8

08010a10 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8010a14:	4802      	ldr	r0, [pc, #8]	; (8010a20 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8010a16:	f003 fe8c 	bl	8014732 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8010a1a:	bf00      	nop
 8010a1c:	bd80      	pop	{r7, pc}
 8010a1e:	bf00      	nop
 8010a20:	200043c8 	.word	0x200043c8

08010a24 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8010a28:	4802      	ldr	r0, [pc, #8]	; (8010a34 <TIM8_CC_IRQHandler+0x10>)
 8010a2a:	f003 fe82 	bl	8014732 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8010a2e:	bf00      	nop
 8010a30:	bd80      	pop	{r7, pc}
 8010a32:	bf00      	nop
 8010a34:	200043c8 	.word	0x200043c8

08010a38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8010a3c:	4802      	ldr	r0, [pc, #8]	; (8010a48 <TIM5_IRQHandler+0x10>)
 8010a3e:	f003 fe78 	bl	8014732 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8010a42:	bf00      	nop
 8010a44:	bd80      	pop	{r7, pc}
 8010a46:	bf00      	nop
 8010a48:	200044a4 	.word	0x200044a4

08010a4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8010a50:	4802      	ldr	r0, [pc, #8]	; (8010a5c <DMA2_Stream0_IRQHandler+0x10>)
 8010a52:	f001 f997 	bl	8011d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8010a56:	bf00      	nop
 8010a58:	bd80      	pop	{r7, pc}
 8010a5a:	bf00      	nop
 8010a5c:	20004a00 	.word	0x20004a00

08010a60 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8010a64:	4802      	ldr	r0, [pc, #8]	; (8010a70 <DMA2_Stream2_IRQHandler+0x10>)
 8010a66:	f001 f98d 	bl	8011d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8010a6a:	bf00      	nop
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	20004ff4 	.word	0x20004ff4

08010a74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b086      	sub	sp, #24
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	60f8      	str	r0, [r7, #12]
 8010a7c:	60b9      	str	r1, [r7, #8]
 8010a7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a80:	2300      	movs	r3, #0
 8010a82:	617b      	str	r3, [r7, #20]
 8010a84:	e00a      	b.n	8010a9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010a86:	f3af 8000 	nop.w
 8010a8a:	4601      	mov	r1, r0
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	1c5a      	adds	r2, r3, #1
 8010a90:	60ba      	str	r2, [r7, #8]
 8010a92:	b2ca      	uxtb	r2, r1
 8010a94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	3301      	adds	r3, #1
 8010a9a:	617b      	str	r3, [r7, #20]
 8010a9c:	697a      	ldr	r2, [r7, #20]
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	dbf0      	blt.n	8010a86 <_read+0x12>
	}

return len;
 8010aa4:	687b      	ldr	r3, [r7, #4]
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3718      	adds	r7, #24
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}

08010aae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010aae:	b580      	push	{r7, lr}
 8010ab0:	b086      	sub	sp, #24
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	60f8      	str	r0, [r7, #12]
 8010ab6:	60b9      	str	r1, [r7, #8]
 8010ab8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010aba:	2300      	movs	r3, #0
 8010abc:	617b      	str	r3, [r7, #20]
 8010abe:	e009      	b.n	8010ad4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	1c5a      	adds	r2, r3, #1
 8010ac4:	60ba      	str	r2, [r7, #8]
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7f8 ff0f 	bl	80098ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	3301      	adds	r3, #1
 8010ad2:	617b      	str	r3, [r7, #20]
 8010ad4:	697a      	ldr	r2, [r7, #20]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	dbf1      	blt.n	8010ac0 <_write+0x12>
	}
	return len;
 8010adc:	687b      	ldr	r3, [r7, #4]
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3718      	adds	r7, #24
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}

08010ae6 <_close>:

int _close(int file)
{
 8010ae6:	b480      	push	{r7}
 8010ae8:	b083      	sub	sp, #12
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	6078      	str	r0, [r7, #4]
	return -1;
 8010aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	370c      	adds	r7, #12
 8010af6:	46bd      	mov	sp, r7
 8010af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afc:	4770      	bx	lr

08010afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010afe:	b480      	push	{r7}
 8010b00:	b083      	sub	sp, #12
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
 8010b06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010b0e:	605a      	str	r2, [r3, #4]
	return 0;
 8010b10:	2300      	movs	r3, #0
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	370c      	adds	r7, #12
 8010b16:	46bd      	mov	sp, r7
 8010b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1c:	4770      	bx	lr

08010b1e <_isatty>:

int _isatty(int file)
{
 8010b1e:	b480      	push	{r7}
 8010b20:	b083      	sub	sp, #12
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	6078      	str	r0, [r7, #4]
	return 1;
 8010b26:	2301      	movs	r3, #1
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	370c      	adds	r7, #12
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b32:	4770      	bx	lr

08010b34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010b34:	b480      	push	{r7}
 8010b36:	b085      	sub	sp, #20
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	60f8      	str	r0, [r7, #12]
 8010b3c:	60b9      	str	r1, [r7, #8]
 8010b3e:	607a      	str	r2, [r7, #4]
	return 0;
 8010b40:	2300      	movs	r3, #0
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3714      	adds	r7, #20
 8010b46:	46bd      	mov	sp, r7
 8010b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4c:	4770      	bx	lr
	...

08010b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b086      	sub	sp, #24
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010b58:	4a14      	ldr	r2, [pc, #80]	; (8010bac <_sbrk+0x5c>)
 8010b5a:	4b15      	ldr	r3, [pc, #84]	; (8010bb0 <_sbrk+0x60>)
 8010b5c:	1ad3      	subs	r3, r2, r3
 8010b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010b64:	4b13      	ldr	r3, [pc, #76]	; (8010bb4 <_sbrk+0x64>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d102      	bne.n	8010b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010b6c:	4b11      	ldr	r3, [pc, #68]	; (8010bb4 <_sbrk+0x64>)
 8010b6e:	4a12      	ldr	r2, [pc, #72]	; (8010bb8 <_sbrk+0x68>)
 8010b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010b72:	4b10      	ldr	r3, [pc, #64]	; (8010bb4 <_sbrk+0x64>)
 8010b74:	681a      	ldr	r2, [r3, #0]
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	4413      	add	r3, r2
 8010b7a:	693a      	ldr	r2, [r7, #16]
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	d207      	bcs.n	8010b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010b80:	f005 fabe 	bl	8016100 <__errno>
 8010b84:	4602      	mov	r2, r0
 8010b86:	230c      	movs	r3, #12
 8010b88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8010b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b8e:	e009      	b.n	8010ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010b90:	4b08      	ldr	r3, [pc, #32]	; (8010bb4 <_sbrk+0x64>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010b96:	4b07      	ldr	r3, [pc, #28]	; (8010bb4 <_sbrk+0x64>)
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	4413      	add	r3, r2
 8010b9e:	4a05      	ldr	r2, [pc, #20]	; (8010bb4 <_sbrk+0x64>)
 8010ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3718      	adds	r7, #24
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	20020000 	.word	0x20020000
 8010bb0:	00000400 	.word	0x00000400
 8010bb4:	2000436c 	.word	0x2000436c
 8010bb8:	20005088 	.word	0x20005088

08010bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010bc0:	4b08      	ldr	r3, [pc, #32]	; (8010be4 <SystemInit+0x28>)
 8010bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bc6:	4a07      	ldr	r2, [pc, #28]	; (8010be4 <SystemInit+0x28>)
 8010bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010bd0:	4b04      	ldr	r3, [pc, #16]	; (8010be4 <SystemInit+0x28>)
 8010bd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010bd6:	609a      	str	r2, [r3, #8]
#endif
}
 8010bd8:	bf00      	nop
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be0:	4770      	bx	lr
 8010be2:	bf00      	nop
 8010be4:	e000ed00 	.word	0xe000ed00

08010be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010c20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010bec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010bee:	e003      	b.n	8010bf8 <LoopCopyDataInit>

08010bf0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010bf0:	4b0c      	ldr	r3, [pc, #48]	; (8010c24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010bf2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010bf4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010bf6:	3104      	adds	r1, #4

08010bf8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010bf8:	480b      	ldr	r0, [pc, #44]	; (8010c28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010bfa:	4b0c      	ldr	r3, [pc, #48]	; (8010c2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010bfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010bfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010c00:	d3f6      	bcc.n	8010bf0 <CopyDataInit>
  ldr  r2, =_sbss
 8010c02:	4a0b      	ldr	r2, [pc, #44]	; (8010c30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010c04:	e002      	b.n	8010c0c <LoopFillZerobss>

08010c06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010c06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010c08:	f842 3b04 	str.w	r3, [r2], #4

08010c0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010c0c:	4b09      	ldr	r3, [pc, #36]	; (8010c34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010c0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010c10:	d3f9      	bcc.n	8010c06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010c12:	f7ff ffd3 	bl	8010bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010c16:	f005 fa79 	bl	801610c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010c1a:	f7fe fd6b 	bl	800f6f4 <main>
  bx  lr    
 8010c1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010c20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010c24:	08018d08 	.word	0x08018d08
  ldr  r0, =_sdata
 8010c28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010c2c:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 8010c30:	20000260 	.word	0x20000260
  ldr  r3, = _ebss
 8010c34:	20005084 	.word	0x20005084

08010c38 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010c38:	e7fe      	b.n	8010c38 <CAN1_RX0_IRQHandler>
	...

08010c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010c40:	4b0e      	ldr	r3, [pc, #56]	; (8010c7c <HAL_Init+0x40>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	4a0d      	ldr	r2, [pc, #52]	; (8010c7c <HAL_Init+0x40>)
 8010c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010c4c:	4b0b      	ldr	r3, [pc, #44]	; (8010c7c <HAL_Init+0x40>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	4a0a      	ldr	r2, [pc, #40]	; (8010c7c <HAL_Init+0x40>)
 8010c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010c58:	4b08      	ldr	r3, [pc, #32]	; (8010c7c <HAL_Init+0x40>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	4a07      	ldr	r2, [pc, #28]	; (8010c7c <HAL_Init+0x40>)
 8010c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010c64:	2003      	movs	r0, #3
 8010c66:	f000 fed5 	bl	8011a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010c6a:	2000      	movs	r0, #0
 8010c6c:	f000 f808 	bl	8010c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010c70:	f7ff fad6 	bl	8010220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010c74:	2300      	movs	r3, #0
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	bd80      	pop	{r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	40023c00 	.word	0x40023c00

08010c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010c88:	4b12      	ldr	r3, [pc, #72]	; (8010cd4 <HAL_InitTick+0x54>)
 8010c8a:	681a      	ldr	r2, [r3, #0]
 8010c8c:	4b12      	ldr	r3, [pc, #72]	; (8010cd8 <HAL_InitTick+0x58>)
 8010c8e:	781b      	ldrb	r3, [r3, #0]
 8010c90:	4619      	mov	r1, r3
 8010c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f000 feed 	bl	8011a7e <HAL_SYSTICK_Config>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d001      	beq.n	8010cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010caa:	2301      	movs	r3, #1
 8010cac:	e00e      	b.n	8010ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	2b0f      	cmp	r3, #15
 8010cb2:	d80a      	bhi.n	8010cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	6879      	ldr	r1, [r7, #4]
 8010cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8010cbc:	f000 feb5 	bl	8011a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010cc0:	4a06      	ldr	r2, [pc, #24]	; (8010cdc <HAL_InitTick+0x5c>)
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	e000      	b.n	8010ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010cca:	2301      	movs	r3, #1
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3708      	adds	r7, #8
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	20000080 	.word	0x20000080
 8010cd8:	20000088 	.word	0x20000088
 8010cdc:	20000084 	.word	0x20000084

08010ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010ce4:	4b06      	ldr	r3, [pc, #24]	; (8010d00 <HAL_IncTick+0x20>)
 8010ce6:	781b      	ldrb	r3, [r3, #0]
 8010ce8:	461a      	mov	r2, r3
 8010cea:	4b06      	ldr	r3, [pc, #24]	; (8010d04 <HAL_IncTick+0x24>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	4413      	add	r3, r2
 8010cf0:	4a04      	ldr	r2, [pc, #16]	; (8010d04 <HAL_IncTick+0x24>)
 8010cf2:	6013      	str	r3, [r2, #0]
}
 8010cf4:	bf00      	nop
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfc:	4770      	bx	lr
 8010cfe:	bf00      	nop
 8010d00:	20000088 	.word	0x20000088
 8010d04:	2000505c 	.word	0x2000505c

08010d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010d08:	b480      	push	{r7}
 8010d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8010d0c:	4b03      	ldr	r3, [pc, #12]	; (8010d1c <HAL_GetTick+0x14>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	46bd      	mov	sp, r7
 8010d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d18:	4770      	bx	lr
 8010d1a:	bf00      	nop
 8010d1c:	2000505c 	.word	0x2000505c

08010d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b084      	sub	sp, #16
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010d28:	f7ff ffee 	bl	8010d08 <HAL_GetTick>
 8010d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d38:	d005      	beq.n	8010d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010d3a:	4b09      	ldr	r3, [pc, #36]	; (8010d60 <HAL_Delay+0x40>)
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	461a      	mov	r2, r3
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	4413      	add	r3, r2
 8010d44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010d46:	bf00      	nop
 8010d48:	f7ff ffde 	bl	8010d08 <HAL_GetTick>
 8010d4c:	4602      	mov	r2, r0
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	1ad3      	subs	r3, r2, r3
 8010d52:	68fa      	ldr	r2, [r7, #12]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d8f7      	bhi.n	8010d48 <HAL_Delay+0x28>
  {
  }
}
 8010d58:	bf00      	nop
 8010d5a:	3710      	adds	r7, #16
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}
 8010d60:	20000088 	.word	0x20000088

08010d64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b084      	sub	sp, #16
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d101      	bne.n	8010d7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8010d76:	2301      	movs	r3, #1
 8010d78:	e033      	b.n	8010de2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d109      	bne.n	8010d96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f7ff fa7a 	bl	801027c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2200      	movs	r2, #0
 8010d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d9a:	f003 0310 	and.w	r3, r3, #16
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d118      	bne.n	8010dd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010da6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010daa:	f023 0302 	bic.w	r3, r3, #2
 8010dae:	f043 0202 	orr.w	r2, r3, #2
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f000 fbd4 	bl	8011564 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dc6:	f023 0303 	bic.w	r3, r3, #3
 8010dca:	f043 0201 	orr.w	r2, r3, #1
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	641a      	str	r2, [r3, #64]	; 0x40
 8010dd2:	e001      	b.n	8010dd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8010de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3710      	adds	r7, #16
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}

08010dea <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8010dea:	b580      	push	{r7, lr}
 8010dec:	b084      	sub	sp, #16
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8010df2:	2300      	movs	r3, #0
 8010df4:	60fb      	str	r3, [r7, #12]
 8010df6:	2300      	movs	r3, #0
 8010df8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f003 0302 	and.w	r3, r3, #2
 8010e04:	2b02      	cmp	r3, #2
 8010e06:	bf0c      	ite	eq
 8010e08:	2301      	moveq	r3, #1
 8010e0a:	2300      	movne	r3, #0
 8010e0c:	b2db      	uxtb	r3, r3
 8010e0e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	f003 0320 	and.w	r3, r3, #32
 8010e1a:	2b20      	cmp	r3, #32
 8010e1c:	bf0c      	ite	eq
 8010e1e:	2301      	moveq	r3, #1
 8010e20:	2300      	movne	r3, #0
 8010e22:	b2db      	uxtb	r3, r3
 8010e24:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d049      	beq.n	8010ec0 <HAL_ADC_IRQHandler+0xd6>
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d046      	beq.n	8010ec0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e36:	f003 0310 	and.w	r3, r3, #16
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d105      	bne.n	8010e4a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	689b      	ldr	r3, [r3, #8]
 8010e50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d12b      	bne.n	8010eb0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d127      	bne.n	8010eb0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d006      	beq.n	8010e7c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	689b      	ldr	r3, [r3, #8]
 8010e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d119      	bne.n	8010eb0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	685a      	ldr	r2, [r3, #4]
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	f022 0220 	bic.w	r2, r2, #32
 8010e8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d105      	bne.n	8010eb0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ea8:	f043 0201 	orr.w	r2, r3, #1
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f7fd feb9 	bl	800ec28 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f06f 0212 	mvn.w	r2, #18
 8010ebe:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	f003 0304 	and.w	r3, r3, #4
 8010eca:	2b04      	cmp	r3, #4
 8010ecc:	bf0c      	ite	eq
 8010ece:	2301      	moveq	r3, #1
 8010ed0:	2300      	movne	r3, #0
 8010ed2:	b2db      	uxtb	r3, r3
 8010ed4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ee0:	2b80      	cmp	r3, #128	; 0x80
 8010ee2:	bf0c      	ite	eq
 8010ee4:	2301      	moveq	r3, #1
 8010ee6:	2300      	movne	r3, #0
 8010ee8:	b2db      	uxtb	r3, r3
 8010eea:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d057      	beq.n	8010fa2 <HAL_ADC_IRQHandler+0x1b8>
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d054      	beq.n	8010fa2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010efc:	f003 0310 	and.w	r3, r3, #16
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d105      	bne.n	8010f10 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f08:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	689b      	ldr	r3, [r3, #8]
 8010f16:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d139      	bne.n	8010f92 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f24:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d006      	beq.n	8010f3a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	689b      	ldr	r3, [r3, #8]
 8010f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d12b      	bne.n	8010f92 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	685b      	ldr	r3, [r3, #4]
 8010f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d124      	bne.n	8010f92 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	689b      	ldr	r3, [r3, #8]
 8010f4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d11d      	bne.n	8010f92 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d119      	bne.n	8010f92 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	685a      	ldr	r2, [r3, #4]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010f6c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d105      	bne.n	8010f92 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f8a:	f043 0201 	orr.w	r2, r3, #1
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f000 fc64 	bl	8011860 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	f06f 020c 	mvn.w	r2, #12
 8010fa0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f003 0301 	and.w	r3, r3, #1
 8010fac:	2b01      	cmp	r3, #1
 8010fae:	bf0c      	ite	eq
 8010fb0:	2301      	moveq	r3, #1
 8010fb2:	2300      	movne	r3, #0
 8010fb4:	b2db      	uxtb	r3, r3
 8010fb6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	685b      	ldr	r3, [r3, #4]
 8010fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fc2:	2b40      	cmp	r3, #64	; 0x40
 8010fc4:	bf0c      	ite	eq
 8010fc6:	2301      	moveq	r3, #1
 8010fc8:	2300      	movne	r3, #0
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d017      	beq.n	8011004 <HAL_ADC_IRQHandler+0x21a>
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d014      	beq.n	8011004 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	f003 0301 	and.w	r3, r3, #1
 8010fe4:	2b01      	cmp	r3, #1
 8010fe6:	d10d      	bne.n	8011004 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f000 f97f 	bl	80112f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	f06f 0201 	mvn.w	r2, #1
 8011002:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f003 0320 	and.w	r3, r3, #32
 801100e:	2b20      	cmp	r3, #32
 8011010:	bf0c      	ite	eq
 8011012:	2301      	moveq	r3, #1
 8011014:	2300      	movne	r3, #0
 8011016:	b2db      	uxtb	r3, r3
 8011018:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	685b      	ldr	r3, [r3, #4]
 8011020:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011024:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011028:	bf0c      	ite	eq
 801102a:	2301      	moveq	r3, #1
 801102c:	2300      	movne	r3, #0
 801102e:	b2db      	uxtb	r3, r3
 8011030:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d015      	beq.n	8011064 <HAL_ADC_IRQHandler+0x27a>
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d012      	beq.n	8011064 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011042:	f043 0202 	orr.w	r2, r3, #2
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f06f 0220 	mvn.w	r2, #32
 8011052:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f000 f959 	bl	801130c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	f06f 0220 	mvn.w	r2, #32
 8011062:	601a      	str	r2, [r3, #0]
  }
}
 8011064:	bf00      	nop
 8011066:	3710      	adds	r7, #16
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}

0801106c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b086      	sub	sp, #24
 8011070:	af00      	add	r7, sp, #0
 8011072:	60f8      	str	r0, [r7, #12]
 8011074:	60b9      	str	r1, [r7, #8]
 8011076:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8011078:	2300      	movs	r3, #0
 801107a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011082:	2b01      	cmp	r3, #1
 8011084:	d101      	bne.n	801108a <HAL_ADC_Start_DMA+0x1e>
 8011086:	2302      	movs	r3, #2
 8011088:	e0cc      	b.n	8011224 <HAL_ADC_Start_DMA+0x1b8>
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	2201      	movs	r2, #1
 801108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	689b      	ldr	r3, [r3, #8]
 8011098:	f003 0301 	and.w	r3, r3, #1
 801109c:	2b01      	cmp	r3, #1
 801109e:	d018      	beq.n	80110d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	689a      	ldr	r2, [r3, #8]
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	f042 0201 	orr.w	r2, r2, #1
 80110ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80110b0:	4b5e      	ldr	r3, [pc, #376]	; (801122c <HAL_ADC_Start_DMA+0x1c0>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	4a5e      	ldr	r2, [pc, #376]	; (8011230 <HAL_ADC_Start_DMA+0x1c4>)
 80110b6:	fba2 2303 	umull	r2, r3, r2, r3
 80110ba:	0c9a      	lsrs	r2, r3, #18
 80110bc:	4613      	mov	r3, r2
 80110be:	005b      	lsls	r3, r3, #1
 80110c0:	4413      	add	r3, r2
 80110c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80110c4:	e002      	b.n	80110cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80110c6:	693b      	ldr	r3, [r7, #16]
 80110c8:	3b01      	subs	r3, #1
 80110ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d1f9      	bne.n	80110c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	689b      	ldr	r3, [r3, #8]
 80110d8:	f003 0301 	and.w	r3, r3, #1
 80110dc:	2b01      	cmp	r3, #1
 80110de:	f040 80a0 	bne.w	8011222 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80110ea:	f023 0301 	bic.w	r3, r3, #1
 80110ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011100:	2b00      	cmp	r3, #0
 8011102:	d007      	beq.n	8011114 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011108:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801110c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801111c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011120:	d106      	bne.n	8011130 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011126:	f023 0206 	bic.w	r2, r3, #6
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	645a      	str	r2, [r3, #68]	; 0x44
 801112e:	e002      	b.n	8011136 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2200      	movs	r2, #0
 8011134:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2200      	movs	r2, #0
 801113a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801113e:	4b3d      	ldr	r3, [pc, #244]	; (8011234 <HAL_ADC_Start_DMA+0x1c8>)
 8011140:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011146:	4a3c      	ldr	r2, [pc, #240]	; (8011238 <HAL_ADC_Start_DMA+0x1cc>)
 8011148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801114e:	4a3b      	ldr	r2, [pc, #236]	; (801123c <HAL_ADC_Start_DMA+0x1d0>)
 8011150:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011156:	4a3a      	ldr	r2, [pc, #232]	; (8011240 <HAL_ADC_Start_DMA+0x1d4>)
 8011158:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8011162:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	685a      	ldr	r2, [r3, #4]
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8011172:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	689a      	ldr	r2, [r3, #8]
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011182:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	334c      	adds	r3, #76	; 0x4c
 801118e:	4619      	mov	r1, r3
 8011190:	68ba      	ldr	r2, [r7, #8]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f000 fd2e 	bl	8011bf4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	685b      	ldr	r3, [r3, #4]
 801119c:	f003 031f 	and.w	r3, r3, #31
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d12a      	bne.n	80111fa <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	4a26      	ldr	r2, [pc, #152]	; (8011244 <HAL_ADC_Start_DMA+0x1d8>)
 80111aa:	4293      	cmp	r3, r2
 80111ac:	d015      	beq.n	80111da <HAL_ADC_Start_DMA+0x16e>
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	4a25      	ldr	r2, [pc, #148]	; (8011248 <HAL_ADC_Start_DMA+0x1dc>)
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d105      	bne.n	80111c4 <HAL_ADC_Start_DMA+0x158>
 80111b8:	4b1e      	ldr	r3, [pc, #120]	; (8011234 <HAL_ADC_Start_DMA+0x1c8>)
 80111ba:	685b      	ldr	r3, [r3, #4]
 80111bc:	f003 031f 	and.w	r3, r3, #31
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d00a      	beq.n	80111da <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	4a20      	ldr	r2, [pc, #128]	; (801124c <HAL_ADC_Start_DMA+0x1e0>)
 80111ca:	4293      	cmp	r3, r2
 80111cc:	d129      	bne.n	8011222 <HAL_ADC_Start_DMA+0x1b6>
 80111ce:	4b19      	ldr	r3, [pc, #100]	; (8011234 <HAL_ADC_Start_DMA+0x1c8>)
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	f003 031f 	and.w	r3, r3, #31
 80111d6:	2b0f      	cmp	r3, #15
 80111d8:	d823      	bhi.n	8011222 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	689b      	ldr	r3, [r3, #8]
 80111e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d11c      	bne.n	8011222 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	689a      	ldr	r2, [r3, #8]
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80111f6:	609a      	str	r2, [r3, #8]
 80111f8:	e013      	b.n	8011222 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	4a11      	ldr	r2, [pc, #68]	; (8011244 <HAL_ADC_Start_DMA+0x1d8>)
 8011200:	4293      	cmp	r3, r2
 8011202:	d10e      	bne.n	8011222 <HAL_ADC_Start_DMA+0x1b6>
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	689b      	ldr	r3, [r3, #8]
 801120a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801120e:	2b00      	cmp	r3, #0
 8011210:	d107      	bne.n	8011222 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	689a      	ldr	r2, [r3, #8]
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011220:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8011222:	2300      	movs	r3, #0
}
 8011224:	4618      	mov	r0, r3
 8011226:	3718      	adds	r7, #24
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}
 801122c:	20000080 	.word	0x20000080
 8011230:	431bde83 	.word	0x431bde83
 8011234:	40012300 	.word	0x40012300
 8011238:	0801175d 	.word	0x0801175d
 801123c:	08011817 	.word	0x08011817
 8011240:	08011833 	.word	0x08011833
 8011244:	40012000 	.word	0x40012000
 8011248:	40012100 	.word	0x40012100
 801124c:	40012200 	.word	0x40012200

08011250 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b084      	sub	sp, #16
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011258:	2300      	movs	r3, #0
 801125a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011262:	2b01      	cmp	r3, #1
 8011264:	d101      	bne.n	801126a <HAL_ADC_Stop_DMA+0x1a>
 8011266:	2302      	movs	r3, #2
 8011268:	e038      	b.n	80112dc <HAL_ADC_Stop_DMA+0x8c>
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2201      	movs	r2, #1
 801126e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	689a      	ldr	r2, [r3, #8]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	f022 0201 	bic.w	r2, r2, #1
 8011280:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	689b      	ldr	r3, [r3, #8]
 8011288:	f003 0301 	and.w	r3, r3, #1
 801128c:	2b00      	cmp	r3, #0
 801128e:	d120      	bne.n	80112d2 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	689a      	ldr	r2, [r3, #8]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801129e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112a4:	4618      	mov	r0, r3
 80112a6:	f000 fcfd 	bl	8011ca4 <HAL_DMA_Abort>
 80112aa:	4603      	mov	r3, r0
 80112ac:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	685a      	ldr	r2, [r3, #4]
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80112bc:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80112c6:	f023 0301 	bic.w	r3, r3, #1
 80112ca:	f043 0201 	orr.w	r2, r3, #1
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2200      	movs	r2, #0
 80112d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80112da:	7bfb      	ldrb	r3, [r7, #15]
}
 80112dc:	4618      	mov	r0, r3
 80112de:	3710      	adds	r7, #16
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}

080112e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80112e4:	b480      	push	{r7}
 80112e6:	b083      	sub	sp, #12
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80112ec:	bf00      	nop
 80112ee:	370c      	adds	r7, #12
 80112f0:	46bd      	mov	sp, r7
 80112f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f6:	4770      	bx	lr

080112f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80112f8:	b480      	push	{r7}
 80112fa:	b083      	sub	sp, #12
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8011300:	bf00      	nop
 8011302:	370c      	adds	r7, #12
 8011304:	46bd      	mov	sp, r7
 8011306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130a:	4770      	bx	lr

0801130c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801130c:	b480      	push	{r7}
 801130e:	b083      	sub	sp, #12
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8011314:	bf00      	nop
 8011316:	370c      	adds	r7, #12
 8011318:	46bd      	mov	sp, r7
 801131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131e:	4770      	bx	lr

08011320 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8011320:	b480      	push	{r7}
 8011322:	b085      	sub	sp, #20
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801132a:	2300      	movs	r3, #0
 801132c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011334:	2b01      	cmp	r3, #1
 8011336:	d101      	bne.n	801133c <HAL_ADC_ConfigChannel+0x1c>
 8011338:	2302      	movs	r3, #2
 801133a:	e105      	b.n	8011548 <HAL_ADC_ConfigChannel+0x228>
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2201      	movs	r2, #1
 8011340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2b09      	cmp	r3, #9
 801134a:	d925      	bls.n	8011398 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	68d9      	ldr	r1, [r3, #12]
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	b29b      	uxth	r3, r3
 8011358:	461a      	mov	r2, r3
 801135a:	4613      	mov	r3, r2
 801135c:	005b      	lsls	r3, r3, #1
 801135e:	4413      	add	r3, r2
 8011360:	3b1e      	subs	r3, #30
 8011362:	2207      	movs	r2, #7
 8011364:	fa02 f303 	lsl.w	r3, r2, r3
 8011368:	43da      	mvns	r2, r3
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	400a      	ands	r2, r1
 8011370:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	68d9      	ldr	r1, [r3, #12]
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	689a      	ldr	r2, [r3, #8]
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	b29b      	uxth	r3, r3
 8011382:	4618      	mov	r0, r3
 8011384:	4603      	mov	r3, r0
 8011386:	005b      	lsls	r3, r3, #1
 8011388:	4403      	add	r3, r0
 801138a:	3b1e      	subs	r3, #30
 801138c:	409a      	lsls	r2, r3
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	430a      	orrs	r2, r1
 8011394:	60da      	str	r2, [r3, #12]
 8011396:	e022      	b.n	80113de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	6919      	ldr	r1, [r3, #16]
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	b29b      	uxth	r3, r3
 80113a4:	461a      	mov	r2, r3
 80113a6:	4613      	mov	r3, r2
 80113a8:	005b      	lsls	r3, r3, #1
 80113aa:	4413      	add	r3, r2
 80113ac:	2207      	movs	r2, #7
 80113ae:	fa02 f303 	lsl.w	r3, r2, r3
 80113b2:	43da      	mvns	r2, r3
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	400a      	ands	r2, r1
 80113ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	6919      	ldr	r1, [r3, #16]
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	689a      	ldr	r2, [r3, #8]
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	4618      	mov	r0, r3
 80113ce:	4603      	mov	r3, r0
 80113d0:	005b      	lsls	r3, r3, #1
 80113d2:	4403      	add	r3, r0
 80113d4:	409a      	lsls	r2, r3
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	430a      	orrs	r2, r1
 80113dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	2b06      	cmp	r3, #6
 80113e4:	d824      	bhi.n	8011430 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	685a      	ldr	r2, [r3, #4]
 80113f0:	4613      	mov	r3, r2
 80113f2:	009b      	lsls	r3, r3, #2
 80113f4:	4413      	add	r3, r2
 80113f6:	3b05      	subs	r3, #5
 80113f8:	221f      	movs	r2, #31
 80113fa:	fa02 f303 	lsl.w	r3, r2, r3
 80113fe:	43da      	mvns	r2, r3
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	400a      	ands	r2, r1
 8011406:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	b29b      	uxth	r3, r3
 8011414:	4618      	mov	r0, r3
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	685a      	ldr	r2, [r3, #4]
 801141a:	4613      	mov	r3, r2
 801141c:	009b      	lsls	r3, r3, #2
 801141e:	4413      	add	r3, r2
 8011420:	3b05      	subs	r3, #5
 8011422:	fa00 f203 	lsl.w	r2, r0, r3
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	430a      	orrs	r2, r1
 801142c:	635a      	str	r2, [r3, #52]	; 0x34
 801142e:	e04c      	b.n	80114ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	2b0c      	cmp	r3, #12
 8011436:	d824      	bhi.n	8011482 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	685a      	ldr	r2, [r3, #4]
 8011442:	4613      	mov	r3, r2
 8011444:	009b      	lsls	r3, r3, #2
 8011446:	4413      	add	r3, r2
 8011448:	3b23      	subs	r3, #35	; 0x23
 801144a:	221f      	movs	r2, #31
 801144c:	fa02 f303 	lsl.w	r3, r2, r3
 8011450:	43da      	mvns	r2, r3
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	400a      	ands	r2, r1
 8011458:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	b29b      	uxth	r3, r3
 8011466:	4618      	mov	r0, r3
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	685a      	ldr	r2, [r3, #4]
 801146c:	4613      	mov	r3, r2
 801146e:	009b      	lsls	r3, r3, #2
 8011470:	4413      	add	r3, r2
 8011472:	3b23      	subs	r3, #35	; 0x23
 8011474:	fa00 f203 	lsl.w	r2, r0, r3
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	430a      	orrs	r2, r1
 801147e:	631a      	str	r2, [r3, #48]	; 0x30
 8011480:	e023      	b.n	80114ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	685a      	ldr	r2, [r3, #4]
 801148c:	4613      	mov	r3, r2
 801148e:	009b      	lsls	r3, r3, #2
 8011490:	4413      	add	r3, r2
 8011492:	3b41      	subs	r3, #65	; 0x41
 8011494:	221f      	movs	r2, #31
 8011496:	fa02 f303 	lsl.w	r3, r2, r3
 801149a:	43da      	mvns	r2, r3
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	400a      	ands	r2, r1
 80114a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	4618      	mov	r0, r3
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	685a      	ldr	r2, [r3, #4]
 80114b6:	4613      	mov	r3, r2
 80114b8:	009b      	lsls	r3, r3, #2
 80114ba:	4413      	add	r3, r2
 80114bc:	3b41      	subs	r3, #65	; 0x41
 80114be:	fa00 f203 	lsl.w	r2, r0, r3
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	430a      	orrs	r2, r1
 80114c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80114ca:	4b22      	ldr	r3, [pc, #136]	; (8011554 <HAL_ADC_ConfigChannel+0x234>)
 80114cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	4a21      	ldr	r2, [pc, #132]	; (8011558 <HAL_ADC_ConfigChannel+0x238>)
 80114d4:	4293      	cmp	r3, r2
 80114d6:	d109      	bne.n	80114ec <HAL_ADC_ConfigChannel+0x1cc>
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	2b12      	cmp	r3, #18
 80114de:	d105      	bne.n	80114ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	4a19      	ldr	r2, [pc, #100]	; (8011558 <HAL_ADC_ConfigChannel+0x238>)
 80114f2:	4293      	cmp	r3, r2
 80114f4:	d123      	bne.n	801153e <HAL_ADC_ConfigChannel+0x21e>
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	2b10      	cmp	r3, #16
 80114fc:	d003      	beq.n	8011506 <HAL_ADC_ConfigChannel+0x1e6>
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	2b11      	cmp	r3, #17
 8011504:	d11b      	bne.n	801153e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	685b      	ldr	r3, [r3, #4]
 801150a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	2b10      	cmp	r3, #16
 8011518:	d111      	bne.n	801153e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801151a:	4b10      	ldr	r3, [pc, #64]	; (801155c <HAL_ADC_ConfigChannel+0x23c>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	4a10      	ldr	r2, [pc, #64]	; (8011560 <HAL_ADC_ConfigChannel+0x240>)
 8011520:	fba2 2303 	umull	r2, r3, r2, r3
 8011524:	0c9a      	lsrs	r2, r3, #18
 8011526:	4613      	mov	r3, r2
 8011528:	009b      	lsls	r3, r3, #2
 801152a:	4413      	add	r3, r2
 801152c:	005b      	lsls	r3, r3, #1
 801152e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8011530:	e002      	b.n	8011538 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	3b01      	subs	r3, #1
 8011536:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8011538:	68bb      	ldr	r3, [r7, #8]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d1f9      	bne.n	8011532 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	2200      	movs	r2, #0
 8011542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8011546:	2300      	movs	r3, #0
}
 8011548:	4618      	mov	r0, r3
 801154a:	3714      	adds	r7, #20
 801154c:	46bd      	mov	sp, r7
 801154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011552:	4770      	bx	lr
 8011554:	40012300 	.word	0x40012300
 8011558:	40012000 	.word	0x40012000
 801155c:	20000080 	.word	0x20000080
 8011560:	431bde83 	.word	0x431bde83

08011564 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8011564:	b480      	push	{r7}
 8011566:	b085      	sub	sp, #20
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801156c:	4b79      	ldr	r3, [pc, #484]	; (8011754 <ADC_Init+0x1f0>)
 801156e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	685b      	ldr	r3, [r3, #4]
 8011574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	685a      	ldr	r2, [r3, #4]
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	431a      	orrs	r2, r3
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	685a      	ldr	r2, [r3, #4]
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011598:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	6859      	ldr	r1, [r3, #4]
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	691b      	ldr	r3, [r3, #16]
 80115a4:	021a      	lsls	r2, r3, #8
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	430a      	orrs	r2, r1
 80115ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	685a      	ldr	r2, [r3, #4]
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80115bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	6859      	ldr	r1, [r3, #4]
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	689a      	ldr	r2, [r3, #8]
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	430a      	orrs	r2, r1
 80115ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	689a      	ldr	r2, [r3, #8]
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80115de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	6899      	ldr	r1, [r3, #8]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	68da      	ldr	r2, [r3, #12]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	430a      	orrs	r2, r1
 80115f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115f6:	4a58      	ldr	r2, [pc, #352]	; (8011758 <ADC_Init+0x1f4>)
 80115f8:	4293      	cmp	r3, r2
 80115fa:	d022      	beq.n	8011642 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	689a      	ldr	r2, [r3, #8]
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801160a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	6899      	ldr	r1, [r3, #8]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	430a      	orrs	r2, r1
 801161c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	689a      	ldr	r2, [r3, #8]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801162c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	6899      	ldr	r1, [r3, #8]
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	430a      	orrs	r2, r1
 801163e:	609a      	str	r2, [r3, #8]
 8011640:	e00f      	b.n	8011662 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	689a      	ldr	r2, [r3, #8]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011650:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	689a      	ldr	r2, [r3, #8]
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011660:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	689a      	ldr	r2, [r3, #8]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	f022 0202 	bic.w	r2, r2, #2
 8011670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	6899      	ldr	r1, [r3, #8]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	7e1b      	ldrb	r3, [r3, #24]
 801167c:	005a      	lsls	r2, r3, #1
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	430a      	orrs	r2, r1
 8011684:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f893 3020 	ldrb.w	r3, [r3, #32]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d01b      	beq.n	80116c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	685a      	ldr	r2, [r3, #4]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801169e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	685a      	ldr	r2, [r3, #4]
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80116ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	6859      	ldr	r1, [r3, #4]
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ba:	3b01      	subs	r3, #1
 80116bc:	035a      	lsls	r2, r3, #13
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	430a      	orrs	r2, r1
 80116c4:	605a      	str	r2, [r3, #4]
 80116c6:	e007      	b.n	80116d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	685a      	ldr	r2, [r3, #4]
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80116d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80116e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	69db      	ldr	r3, [r3, #28]
 80116f2:	3b01      	subs	r3, #1
 80116f4:	051a      	lsls	r2, r3, #20
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	430a      	orrs	r2, r1
 80116fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	689a      	ldr	r2, [r3, #8]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801170c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	6899      	ldr	r1, [r3, #8]
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801171a:	025a      	lsls	r2, r3, #9
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	430a      	orrs	r2, r1
 8011722:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	689a      	ldr	r2, [r3, #8]
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011732:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	6899      	ldr	r1, [r3, #8]
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	695b      	ldr	r3, [r3, #20]
 801173e:	029a      	lsls	r2, r3, #10
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	430a      	orrs	r2, r1
 8011746:	609a      	str	r2, [r3, #8]
}
 8011748:	bf00      	nop
 801174a:	3714      	adds	r7, #20
 801174c:	46bd      	mov	sp, r7
 801174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011752:	4770      	bx	lr
 8011754:	40012300 	.word	0x40012300
 8011758:	0f000001 	.word	0x0f000001

0801175c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b084      	sub	sp, #16
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011768:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801176e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011772:	2b00      	cmp	r3, #0
 8011774:	d13c      	bne.n	80117f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801177a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	689b      	ldr	r3, [r3, #8]
 8011788:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801178c:	2b00      	cmp	r3, #0
 801178e:	d12b      	bne.n	80117e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8011794:	2b00      	cmp	r3, #0
 8011796:	d127      	bne.n	80117e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801179e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d006      	beq.n	80117b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	689b      	ldr	r3, [r3, #8]
 80117ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d119      	bne.n	80117e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	685a      	ldr	r2, [r3, #4]
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	f022 0220 	bic.w	r2, r2, #32
 80117c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d105      	bne.n	80117e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117e0:	f043 0201 	orr.w	r2, r3, #1
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80117e8:	68f8      	ldr	r0, [r7, #12]
 80117ea:	f7fd fa1d 	bl	800ec28 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80117ee:	e00e      	b.n	801180e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117f4:	f003 0310 	and.w	r3, r3, #16
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d003      	beq.n	8011804 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80117fc:	68f8      	ldr	r0, [r7, #12]
 80117fe:	f7ff fd85 	bl	801130c <HAL_ADC_ErrorCallback>
}
 8011802:	e004      	b.n	801180e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	4798      	blx	r3
}
 801180e:	bf00      	nop
 8011810:	3710      	adds	r7, #16
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}

08011816 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8011816:	b580      	push	{r7, lr}
 8011818:	b084      	sub	sp, #16
 801181a:	af00      	add	r7, sp, #0
 801181c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011822:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8011824:	68f8      	ldr	r0, [r7, #12]
 8011826:	f7ff fd5d 	bl	80112e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801182a:	bf00      	nop
 801182c:	3710      	adds	r7, #16
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}

08011832 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8011832:	b580      	push	{r7, lr}
 8011834:	b084      	sub	sp, #16
 8011836:	af00      	add	r7, sp, #0
 8011838:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801183e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	2240      	movs	r2, #64	; 0x40
 8011844:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801184a:	f043 0204 	orr.w	r2, r3, #4
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8011852:	68f8      	ldr	r0, [r7, #12]
 8011854:	f7ff fd5a 	bl	801130c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8011858:	bf00      	nop
 801185a:	3710      	adds	r7, #16
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}

08011860 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8011860:	b480      	push	{r7}
 8011862:	b083      	sub	sp, #12
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8011868:	bf00      	nop
 801186a:	370c      	adds	r7, #12
 801186c:	46bd      	mov	sp, r7
 801186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011872:	4770      	bx	lr

08011874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011874:	b480      	push	{r7}
 8011876:	b085      	sub	sp, #20
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f003 0307 	and.w	r3, r3, #7
 8011882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011884:	4b0c      	ldr	r3, [pc, #48]	; (80118b8 <__NVIC_SetPriorityGrouping+0x44>)
 8011886:	68db      	ldr	r3, [r3, #12]
 8011888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801188a:	68ba      	ldr	r2, [r7, #8]
 801188c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011890:	4013      	ands	r3, r2
 8011892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801189c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80118a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80118a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80118a6:	4a04      	ldr	r2, [pc, #16]	; (80118b8 <__NVIC_SetPriorityGrouping+0x44>)
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	60d3      	str	r3, [r2, #12]
}
 80118ac:	bf00      	nop
 80118ae:	3714      	adds	r7, #20
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr
 80118b8:	e000ed00 	.word	0xe000ed00

080118bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80118bc:	b480      	push	{r7}
 80118be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80118c0:	4b04      	ldr	r3, [pc, #16]	; (80118d4 <__NVIC_GetPriorityGrouping+0x18>)
 80118c2:	68db      	ldr	r3, [r3, #12]
 80118c4:	0a1b      	lsrs	r3, r3, #8
 80118c6:	f003 0307 	and.w	r3, r3, #7
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	46bd      	mov	sp, r7
 80118ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d2:	4770      	bx	lr
 80118d4:	e000ed00 	.word	0xe000ed00

080118d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80118d8:	b480      	push	{r7}
 80118da:	b083      	sub	sp, #12
 80118dc:	af00      	add	r7, sp, #0
 80118de:	4603      	mov	r3, r0
 80118e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80118e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	db0b      	blt.n	8011902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80118ea:	79fb      	ldrb	r3, [r7, #7]
 80118ec:	f003 021f 	and.w	r2, r3, #31
 80118f0:	4907      	ldr	r1, [pc, #28]	; (8011910 <__NVIC_EnableIRQ+0x38>)
 80118f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80118f6:	095b      	lsrs	r3, r3, #5
 80118f8:	2001      	movs	r0, #1
 80118fa:	fa00 f202 	lsl.w	r2, r0, r2
 80118fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8011902:	bf00      	nop
 8011904:	370c      	adds	r7, #12
 8011906:	46bd      	mov	sp, r7
 8011908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190c:	4770      	bx	lr
 801190e:	bf00      	nop
 8011910:	e000e100 	.word	0xe000e100

08011914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011914:	b480      	push	{r7}
 8011916:	b083      	sub	sp, #12
 8011918:	af00      	add	r7, sp, #0
 801191a:	4603      	mov	r3, r0
 801191c:	6039      	str	r1, [r7, #0]
 801191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011924:	2b00      	cmp	r3, #0
 8011926:	db0a      	blt.n	801193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	b2da      	uxtb	r2, r3
 801192c:	490c      	ldr	r1, [pc, #48]	; (8011960 <__NVIC_SetPriority+0x4c>)
 801192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011932:	0112      	lsls	r2, r2, #4
 8011934:	b2d2      	uxtb	r2, r2
 8011936:	440b      	add	r3, r1
 8011938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801193c:	e00a      	b.n	8011954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	b2da      	uxtb	r2, r3
 8011942:	4908      	ldr	r1, [pc, #32]	; (8011964 <__NVIC_SetPriority+0x50>)
 8011944:	79fb      	ldrb	r3, [r7, #7]
 8011946:	f003 030f 	and.w	r3, r3, #15
 801194a:	3b04      	subs	r3, #4
 801194c:	0112      	lsls	r2, r2, #4
 801194e:	b2d2      	uxtb	r2, r2
 8011950:	440b      	add	r3, r1
 8011952:	761a      	strb	r2, [r3, #24]
}
 8011954:	bf00      	nop
 8011956:	370c      	adds	r7, #12
 8011958:	46bd      	mov	sp, r7
 801195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195e:	4770      	bx	lr
 8011960:	e000e100 	.word	0xe000e100
 8011964:	e000ed00 	.word	0xe000ed00

08011968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011968:	b480      	push	{r7}
 801196a:	b089      	sub	sp, #36	; 0x24
 801196c:	af00      	add	r7, sp, #0
 801196e:	60f8      	str	r0, [r7, #12]
 8011970:	60b9      	str	r1, [r7, #8]
 8011972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f003 0307 	and.w	r3, r3, #7
 801197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801197c:	69fb      	ldr	r3, [r7, #28]
 801197e:	f1c3 0307 	rsb	r3, r3, #7
 8011982:	2b04      	cmp	r3, #4
 8011984:	bf28      	it	cs
 8011986:	2304      	movcs	r3, #4
 8011988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801198a:	69fb      	ldr	r3, [r7, #28]
 801198c:	3304      	adds	r3, #4
 801198e:	2b06      	cmp	r3, #6
 8011990:	d902      	bls.n	8011998 <NVIC_EncodePriority+0x30>
 8011992:	69fb      	ldr	r3, [r7, #28]
 8011994:	3b03      	subs	r3, #3
 8011996:	e000      	b.n	801199a <NVIC_EncodePriority+0x32>
 8011998:	2300      	movs	r3, #0
 801199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801199c:	f04f 32ff 	mov.w	r2, #4294967295
 80119a0:	69bb      	ldr	r3, [r7, #24]
 80119a2:	fa02 f303 	lsl.w	r3, r2, r3
 80119a6:	43da      	mvns	r2, r3
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	401a      	ands	r2, r3
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80119b0:	f04f 31ff 	mov.w	r1, #4294967295
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	fa01 f303 	lsl.w	r3, r1, r3
 80119ba:	43d9      	mvns	r1, r3
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80119c0:	4313      	orrs	r3, r2
         );
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	3724      	adds	r7, #36	; 0x24
 80119c6:	46bd      	mov	sp, r7
 80119c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119cc:	4770      	bx	lr
	...

080119d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b082      	sub	sp, #8
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	3b01      	subs	r3, #1
 80119dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80119e0:	d301      	bcc.n	80119e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80119e2:	2301      	movs	r3, #1
 80119e4:	e00f      	b.n	8011a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80119e6:	4a0a      	ldr	r2, [pc, #40]	; (8011a10 <SysTick_Config+0x40>)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	3b01      	subs	r3, #1
 80119ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80119ee:	210f      	movs	r1, #15
 80119f0:	f04f 30ff 	mov.w	r0, #4294967295
 80119f4:	f7ff ff8e 	bl	8011914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80119f8:	4b05      	ldr	r3, [pc, #20]	; (8011a10 <SysTick_Config+0x40>)
 80119fa:	2200      	movs	r2, #0
 80119fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80119fe:	4b04      	ldr	r3, [pc, #16]	; (8011a10 <SysTick_Config+0x40>)
 8011a00:	2207      	movs	r2, #7
 8011a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011a04:	2300      	movs	r3, #0
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3708      	adds	r7, #8
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}
 8011a0e:	bf00      	nop
 8011a10:	e000e010 	.word	0xe000e010

08011a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b082      	sub	sp, #8
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f7ff ff29 	bl	8011874 <__NVIC_SetPriorityGrouping>
}
 8011a22:	bf00      	nop
 8011a24:	3708      	adds	r7, #8
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd80      	pop	{r7, pc}

08011a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011a2a:	b580      	push	{r7, lr}
 8011a2c:	b086      	sub	sp, #24
 8011a2e:	af00      	add	r7, sp, #0
 8011a30:	4603      	mov	r3, r0
 8011a32:	60b9      	str	r1, [r7, #8]
 8011a34:	607a      	str	r2, [r7, #4]
 8011a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011a38:	2300      	movs	r3, #0
 8011a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011a3c:	f7ff ff3e 	bl	80118bc <__NVIC_GetPriorityGrouping>
 8011a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011a42:	687a      	ldr	r2, [r7, #4]
 8011a44:	68b9      	ldr	r1, [r7, #8]
 8011a46:	6978      	ldr	r0, [r7, #20]
 8011a48:	f7ff ff8e 	bl	8011968 <NVIC_EncodePriority>
 8011a4c:	4602      	mov	r2, r0
 8011a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a52:	4611      	mov	r1, r2
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7ff ff5d 	bl	8011914 <__NVIC_SetPriority>
}
 8011a5a:	bf00      	nop
 8011a5c:	3718      	adds	r7, #24
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}

08011a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011a62:	b580      	push	{r7, lr}
 8011a64:	b082      	sub	sp, #8
 8011a66:	af00      	add	r7, sp, #0
 8011a68:	4603      	mov	r3, r0
 8011a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7ff ff31 	bl	80118d8 <__NVIC_EnableIRQ>
}
 8011a76:	bf00      	nop
 8011a78:	3708      	adds	r7, #8
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}

08011a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011a7e:	b580      	push	{r7, lr}
 8011a80:	b082      	sub	sp, #8
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f7ff ffa2 	bl	80119d0 <SysTick_Config>
 8011a8c:	4603      	mov	r3, r0
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3708      	adds	r7, #8
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}
	...

08011a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b086      	sub	sp, #24
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8011aa4:	f7ff f930 	bl	8010d08 <HAL_GetTick>
 8011aa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d101      	bne.n	8011ab4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8011ab0:	2301      	movs	r3, #1
 8011ab2:	e099      	b.n	8011be8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2202      	movs	r2, #2
 8011ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	681a      	ldr	r2, [r3, #0]
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	f022 0201 	bic.w	r2, r2, #1
 8011ad2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011ad4:	e00f      	b.n	8011af6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011ad6:	f7ff f917 	bl	8010d08 <HAL_GetTick>
 8011ada:	4602      	mov	r2, r0
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	1ad3      	subs	r3, r2, r3
 8011ae0:	2b05      	cmp	r3, #5
 8011ae2:	d908      	bls.n	8011af6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2220      	movs	r2, #32
 8011ae8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2203      	movs	r2, #3
 8011aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8011af2:	2303      	movs	r3, #3
 8011af4:	e078      	b.n	8011be8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	f003 0301 	and.w	r3, r3, #1
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d1e8      	bne.n	8011ad6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011b0c:	697a      	ldr	r2, [r7, #20]
 8011b0e:	4b38      	ldr	r3, [pc, #224]	; (8011bf0 <HAL_DMA_Init+0x158>)
 8011b10:	4013      	ands	r3, r2
 8011b12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	685a      	ldr	r2, [r3, #4]
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	689b      	ldr	r3, [r3, #8]
 8011b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	691b      	ldr	r3, [r3, #16]
 8011b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	699b      	ldr	r3, [r3, #24]
 8011b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	6a1b      	ldr	r3, [r3, #32]
 8011b40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011b42:	697a      	ldr	r2, [r7, #20]
 8011b44:	4313      	orrs	r3, r2
 8011b46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b4c:	2b04      	cmp	r3, #4
 8011b4e:	d107      	bne.n	8011b60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b58:	4313      	orrs	r3, r2
 8011b5a:	697a      	ldr	r2, [r7, #20]
 8011b5c:	4313      	orrs	r3, r2
 8011b5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	697a      	ldr	r2, [r7, #20]
 8011b66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	695b      	ldr	r3, [r3, #20]
 8011b6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	f023 0307 	bic.w	r3, r3, #7
 8011b76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b7c:	697a      	ldr	r2, [r7, #20]
 8011b7e:	4313      	orrs	r3, r2
 8011b80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b86:	2b04      	cmp	r3, #4
 8011b88:	d117      	bne.n	8011bba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b8e:	697a      	ldr	r2, [r7, #20]
 8011b90:	4313      	orrs	r3, r2
 8011b92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d00e      	beq.n	8011bba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f000 fadf 	bl	8012160 <DMA_CheckFifoParam>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d008      	beq.n	8011bba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2240      	movs	r2, #64	; 0x40
 8011bac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2201      	movs	r2, #1
 8011bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	e016      	b.n	8011be8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	697a      	ldr	r2, [r7, #20]
 8011bc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f000 fa96 	bl	80120f4 <DMA_CalcBaseAndBitshift>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011bd0:	223f      	movs	r2, #63	; 0x3f
 8011bd2:	409a      	lsls	r2, r3
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2200      	movs	r2, #0
 8011bdc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	2201      	movs	r2, #1
 8011be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8011be6:	2300      	movs	r3, #0
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3718      	adds	r7, #24
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}
 8011bf0:	f010803f 	.word	0xf010803f

08011bf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b086      	sub	sp, #24
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	607a      	str	r2, [r7, #4]
 8011c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011c02:	2300      	movs	r3, #0
 8011c04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011c12:	2b01      	cmp	r3, #1
 8011c14:	d101      	bne.n	8011c1a <HAL_DMA_Start_IT+0x26>
 8011c16:	2302      	movs	r3, #2
 8011c18:	e040      	b.n	8011c9c <HAL_DMA_Start_IT+0xa8>
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	2201      	movs	r2, #1
 8011c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011c28:	b2db      	uxtb	r3, r3
 8011c2a:	2b01      	cmp	r3, #1
 8011c2c:	d12f      	bne.n	8011c8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	2202      	movs	r2, #2
 8011c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	68b9      	ldr	r1, [r7, #8]
 8011c42:	68f8      	ldr	r0, [r7, #12]
 8011c44:	f000 fa28 	bl	8012098 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011c4c:	223f      	movs	r2, #63	; 0x3f
 8011c4e:	409a      	lsls	r2, r3
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	681a      	ldr	r2, [r3, #0]
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	f042 0216 	orr.w	r2, r2, #22
 8011c62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d007      	beq.n	8011c7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	f042 0208 	orr.w	r2, r2, #8
 8011c7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	681a      	ldr	r2, [r3, #0]
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	f042 0201 	orr.w	r2, r2, #1
 8011c8a:	601a      	str	r2, [r3, #0]
 8011c8c:	e005      	b.n	8011c9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	2200      	movs	r2, #0
 8011c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8011c96:	2302      	movs	r3, #2
 8011c98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8011c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3718      	adds	r7, #24
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b084      	sub	sp, #16
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011cb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8011cb2:	f7ff f829 	bl	8010d08 <HAL_GetTick>
 8011cb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011cbe:	b2db      	uxtb	r3, r3
 8011cc0:	2b02      	cmp	r3, #2
 8011cc2:	d008      	beq.n	8011cd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2280      	movs	r2, #128	; 0x80
 8011cc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2200      	movs	r2, #0
 8011cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	e052      	b.n	8011d7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	681a      	ldr	r2, [r3, #0]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	f022 0216 	bic.w	r2, r2, #22
 8011ce4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	695a      	ldr	r2, [r3, #20]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011cf4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d103      	bne.n	8011d06 <HAL_DMA_Abort+0x62>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d007      	beq.n	8011d16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	681a      	ldr	r2, [r3, #0]
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	f022 0208 	bic.w	r2, r2, #8
 8011d14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	681a      	ldr	r2, [r3, #0]
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	f022 0201 	bic.w	r2, r2, #1
 8011d24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011d26:	e013      	b.n	8011d50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011d28:	f7fe ffee 	bl	8010d08 <HAL_GetTick>
 8011d2c:	4602      	mov	r2, r0
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	1ad3      	subs	r3, r2, r3
 8011d32:	2b05      	cmp	r3, #5
 8011d34:	d90c      	bls.n	8011d50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2220      	movs	r2, #32
 8011d3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2200      	movs	r2, #0
 8011d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2203      	movs	r2, #3
 8011d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8011d4c:	2303      	movs	r3, #3
 8011d4e:	e015      	b.n	8011d7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	f003 0301 	and.w	r3, r3, #1
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d1e4      	bne.n	8011d28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d62:	223f      	movs	r2, #63	; 0x3f
 8011d64:	409a      	lsls	r2, r3
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2201      	movs	r2, #1
 8011d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8011d7a:	2300      	movs	r3, #0
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3710      	adds	r7, #16
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b086      	sub	sp, #24
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8011d90:	4b92      	ldr	r3, [pc, #584]	; (8011fdc <HAL_DMA_IRQHandler+0x258>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	4a92      	ldr	r2, [pc, #584]	; (8011fe0 <HAL_DMA_IRQHandler+0x25c>)
 8011d96:	fba2 2303 	umull	r2, r3, r2, r3
 8011d9a:	0a9b      	lsrs	r3, r3, #10
 8011d9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011da2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8011da4:	693b      	ldr	r3, [r7, #16]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011dae:	2208      	movs	r2, #8
 8011db0:	409a      	lsls	r2, r3
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	4013      	ands	r3, r2
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d01a      	beq.n	8011df0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	f003 0304 	and.w	r3, r3, #4
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d013      	beq.n	8011df0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	681a      	ldr	r2, [r3, #0]
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	f022 0204 	bic.w	r2, r2, #4
 8011dd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ddc:	2208      	movs	r2, #8
 8011dde:	409a      	lsls	r2, r3
 8011de0:	693b      	ldr	r3, [r7, #16]
 8011de2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011de8:	f043 0201 	orr.w	r2, r3, #1
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011df4:	2201      	movs	r2, #1
 8011df6:	409a      	lsls	r2, r3
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	4013      	ands	r3, r2
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d012      	beq.n	8011e26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	695b      	ldr	r3, [r3, #20]
 8011e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d00b      	beq.n	8011e26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e12:	2201      	movs	r2, #1
 8011e14:	409a      	lsls	r2, r3
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e1e:	f043 0202 	orr.w	r2, r3, #2
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e2a:	2204      	movs	r2, #4
 8011e2c:	409a      	lsls	r2, r3
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	4013      	ands	r3, r2
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d012      	beq.n	8011e5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	f003 0302 	and.w	r3, r3, #2
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d00b      	beq.n	8011e5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e48:	2204      	movs	r2, #4
 8011e4a:	409a      	lsls	r2, r3
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e54:	f043 0204 	orr.w	r2, r3, #4
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e60:	2210      	movs	r2, #16
 8011e62:	409a      	lsls	r2, r3
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	4013      	ands	r3, r2
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d043      	beq.n	8011ef4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	f003 0308 	and.w	r3, r3, #8
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d03c      	beq.n	8011ef4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e7e:	2210      	movs	r2, #16
 8011e80:	409a      	lsls	r2, r3
 8011e82:	693b      	ldr	r3, [r7, #16]
 8011e84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d018      	beq.n	8011ec6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d108      	bne.n	8011eb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d024      	beq.n	8011ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	4798      	blx	r3
 8011eb2:	e01f      	b.n	8011ef4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d01b      	beq.n	8011ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	4798      	blx	r3
 8011ec4:	e016      	b.n	8011ef4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d107      	bne.n	8011ee4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	681a      	ldr	r2, [r3, #0]
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	f022 0208 	bic.w	r2, r2, #8
 8011ee2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d003      	beq.n	8011ef4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ef8:	2220      	movs	r2, #32
 8011efa:	409a      	lsls	r2, r3
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	4013      	ands	r3, r2
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	f000 808e 	beq.w	8012022 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	f003 0310 	and.w	r3, r3, #16
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	f000 8086 	beq.w	8012022 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f1a:	2220      	movs	r2, #32
 8011f1c:	409a      	lsls	r2, r3
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	2b05      	cmp	r3, #5
 8011f2c:	d136      	bne.n	8011f9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	681a      	ldr	r2, [r3, #0]
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	f022 0216 	bic.w	r2, r2, #22
 8011f3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	695a      	ldr	r2, [r3, #20]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011f4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d103      	bne.n	8011f5e <HAL_DMA_IRQHandler+0x1da>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d007      	beq.n	8011f6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	681a      	ldr	r2, [r3, #0]
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	f022 0208 	bic.w	r2, r2, #8
 8011f6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f72:	223f      	movs	r2, #63	; 0x3f
 8011f74:	409a      	lsls	r2, r3
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	2201      	movs	r2, #1
 8011f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d07d      	beq.n	801208e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	4798      	blx	r3
        }
        return;
 8011f9a:	e078      	b.n	801208e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d01c      	beq.n	8011fe4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d108      	bne.n	8011fca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d030      	beq.n	8012022 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	4798      	blx	r3
 8011fc8:	e02b      	b.n	8012022 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d027      	beq.n	8012022 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	4798      	blx	r3
 8011fda:	e022      	b.n	8012022 <HAL_DMA_IRQHandler+0x29e>
 8011fdc:	20000080 	.word	0x20000080
 8011fe0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d10f      	bne.n	8012012 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	f022 0210 	bic.w	r2, r2, #16
 8012000:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2200      	movs	r2, #0
 8012006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2201      	movs	r2, #1
 801200e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012016:	2b00      	cmp	r3, #0
 8012018:	d003      	beq.n	8012022 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801201e:	6878      	ldr	r0, [r7, #4]
 8012020:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012026:	2b00      	cmp	r3, #0
 8012028:	d032      	beq.n	8012090 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801202e:	f003 0301 	and.w	r3, r3, #1
 8012032:	2b00      	cmp	r3, #0
 8012034:	d022      	beq.n	801207c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2205      	movs	r2, #5
 801203a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	681a      	ldr	r2, [r3, #0]
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	f022 0201 	bic.w	r2, r2, #1
 801204c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	3301      	adds	r3, #1
 8012052:	60bb      	str	r3, [r7, #8]
 8012054:	697a      	ldr	r2, [r7, #20]
 8012056:	429a      	cmp	r2, r3
 8012058:	d307      	bcc.n	801206a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	f003 0301 	and.w	r3, r3, #1
 8012064:	2b00      	cmp	r3, #0
 8012066:	d1f2      	bne.n	801204e <HAL_DMA_IRQHandler+0x2ca>
 8012068:	e000      	b.n	801206c <HAL_DMA_IRQHandler+0x2e8>
          break;
 801206a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2200      	movs	r2, #0
 8012070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2201      	movs	r2, #1
 8012078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012080:	2b00      	cmp	r3, #0
 8012082:	d005      	beq.n	8012090 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	4798      	blx	r3
 801208c:	e000      	b.n	8012090 <HAL_DMA_IRQHandler+0x30c>
        return;
 801208e:	bf00      	nop
    }
  }
}
 8012090:	3718      	adds	r7, #24
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}
 8012096:	bf00      	nop

08012098 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012098:	b480      	push	{r7}
 801209a:	b085      	sub	sp, #20
 801209c:	af00      	add	r7, sp, #0
 801209e:	60f8      	str	r0, [r7, #12]
 80120a0:	60b9      	str	r1, [r7, #8]
 80120a2:	607a      	str	r2, [r7, #4]
 80120a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	681a      	ldr	r2, [r3, #0]
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80120b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	683a      	ldr	r2, [r7, #0]
 80120bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	689b      	ldr	r3, [r3, #8]
 80120c2:	2b40      	cmp	r3, #64	; 0x40
 80120c4:	d108      	bne.n	80120d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	687a      	ldr	r2, [r7, #4]
 80120cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	68ba      	ldr	r2, [r7, #8]
 80120d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80120d6:	e007      	b.n	80120e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	68ba      	ldr	r2, [r7, #8]
 80120de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	687a      	ldr	r2, [r7, #4]
 80120e6:	60da      	str	r2, [r3, #12]
}
 80120e8:	bf00      	nop
 80120ea:	3714      	adds	r7, #20
 80120ec:	46bd      	mov	sp, r7
 80120ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f2:	4770      	bx	lr

080120f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80120f4:	b480      	push	{r7}
 80120f6:	b085      	sub	sp, #20
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	b2db      	uxtb	r3, r3
 8012102:	3b10      	subs	r3, #16
 8012104:	4a14      	ldr	r2, [pc, #80]	; (8012158 <DMA_CalcBaseAndBitshift+0x64>)
 8012106:	fba2 2303 	umull	r2, r3, r2, r3
 801210a:	091b      	lsrs	r3, r3, #4
 801210c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801210e:	4a13      	ldr	r2, [pc, #76]	; (801215c <DMA_CalcBaseAndBitshift+0x68>)
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	4413      	add	r3, r2
 8012114:	781b      	ldrb	r3, [r3, #0]
 8012116:	461a      	mov	r2, r3
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	2b03      	cmp	r3, #3
 8012120:	d909      	bls.n	8012136 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801212a:	f023 0303 	bic.w	r3, r3, #3
 801212e:	1d1a      	adds	r2, r3, #4
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	659a      	str	r2, [r3, #88]	; 0x58
 8012134:	e007      	b.n	8012146 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801213e:	f023 0303 	bic.w	r3, r3, #3
 8012142:	687a      	ldr	r2, [r7, #4]
 8012144:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801214a:	4618      	mov	r0, r3
 801214c:	3714      	adds	r7, #20
 801214e:	46bd      	mov	sp, r7
 8012150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012154:	4770      	bx	lr
 8012156:	bf00      	nop
 8012158:	aaaaaaab 	.word	0xaaaaaaab
 801215c:	08018a2c 	.word	0x08018a2c

08012160 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8012160:	b480      	push	{r7}
 8012162:	b085      	sub	sp, #20
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012168:	2300      	movs	r3, #0
 801216a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012170:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	699b      	ldr	r3, [r3, #24]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d11f      	bne.n	80121ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	2b03      	cmp	r3, #3
 801217e:	d855      	bhi.n	801222c <DMA_CheckFifoParam+0xcc>
 8012180:	a201      	add	r2, pc, #4	; (adr r2, 8012188 <DMA_CheckFifoParam+0x28>)
 8012182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012186:	bf00      	nop
 8012188:	08012199 	.word	0x08012199
 801218c:	080121ab 	.word	0x080121ab
 8012190:	08012199 	.word	0x08012199
 8012194:	0801222d 	.word	0x0801222d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801219c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d045      	beq.n	8012230 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80121a4:	2301      	movs	r3, #1
 80121a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80121a8:	e042      	b.n	8012230 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80121b2:	d13f      	bne.n	8012234 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80121b4:	2301      	movs	r3, #1
 80121b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80121b8:	e03c      	b.n	8012234 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	699b      	ldr	r3, [r3, #24]
 80121be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80121c2:	d121      	bne.n	8012208 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80121c4:	68bb      	ldr	r3, [r7, #8]
 80121c6:	2b03      	cmp	r3, #3
 80121c8:	d836      	bhi.n	8012238 <DMA_CheckFifoParam+0xd8>
 80121ca:	a201      	add	r2, pc, #4	; (adr r2, 80121d0 <DMA_CheckFifoParam+0x70>)
 80121cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121d0:	080121e1 	.word	0x080121e1
 80121d4:	080121e7 	.word	0x080121e7
 80121d8:	080121e1 	.word	0x080121e1
 80121dc:	080121f9 	.word	0x080121f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80121e0:	2301      	movs	r3, #1
 80121e2:	73fb      	strb	r3, [r7, #15]
      break;
 80121e4:	e02f      	b.n	8012246 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d024      	beq.n	801223c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80121f2:	2301      	movs	r3, #1
 80121f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80121f6:	e021      	b.n	801223c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012200:	d11e      	bne.n	8012240 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8012202:	2301      	movs	r3, #1
 8012204:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8012206:	e01b      	b.n	8012240 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	2b02      	cmp	r3, #2
 801220c:	d902      	bls.n	8012214 <DMA_CheckFifoParam+0xb4>
 801220e:	2b03      	cmp	r3, #3
 8012210:	d003      	beq.n	801221a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8012212:	e018      	b.n	8012246 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8012214:	2301      	movs	r3, #1
 8012216:	73fb      	strb	r3, [r7, #15]
      break;
 8012218:	e015      	b.n	8012246 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801221e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012222:	2b00      	cmp	r3, #0
 8012224:	d00e      	beq.n	8012244 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8012226:	2301      	movs	r3, #1
 8012228:	73fb      	strb	r3, [r7, #15]
      break;
 801222a:	e00b      	b.n	8012244 <DMA_CheckFifoParam+0xe4>
      break;
 801222c:	bf00      	nop
 801222e:	e00a      	b.n	8012246 <DMA_CheckFifoParam+0xe6>
      break;
 8012230:	bf00      	nop
 8012232:	e008      	b.n	8012246 <DMA_CheckFifoParam+0xe6>
      break;
 8012234:	bf00      	nop
 8012236:	e006      	b.n	8012246 <DMA_CheckFifoParam+0xe6>
      break;
 8012238:	bf00      	nop
 801223a:	e004      	b.n	8012246 <DMA_CheckFifoParam+0xe6>
      break;
 801223c:	bf00      	nop
 801223e:	e002      	b.n	8012246 <DMA_CheckFifoParam+0xe6>
      break;   
 8012240:	bf00      	nop
 8012242:	e000      	b.n	8012246 <DMA_CheckFifoParam+0xe6>
      break;
 8012244:	bf00      	nop
    }
  } 
  
  return status; 
 8012246:	7bfb      	ldrb	r3, [r7, #15]
}
 8012248:	4618      	mov	r0, r3
 801224a:	3714      	adds	r7, #20
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr

08012254 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b086      	sub	sp, #24
 8012258:	af00      	add	r7, sp, #0
 801225a:	60f8      	str	r0, [r7, #12]
 801225c:	60b9      	str	r1, [r7, #8]
 801225e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012262:	2301      	movs	r3, #1
 8012264:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8012266:	4b23      	ldr	r3, [pc, #140]	; (80122f4 <HAL_FLASH_Program+0xa0>)
 8012268:	7e1b      	ldrb	r3, [r3, #24]
 801226a:	2b01      	cmp	r3, #1
 801226c:	d101      	bne.n	8012272 <HAL_FLASH_Program+0x1e>
 801226e:	2302      	movs	r3, #2
 8012270:	e03b      	b.n	80122ea <HAL_FLASH_Program+0x96>
 8012272:	4b20      	ldr	r3, [pc, #128]	; (80122f4 <HAL_FLASH_Program+0xa0>)
 8012274:	2201      	movs	r2, #1
 8012276:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012278:	f24c 3050 	movw	r0, #50000	; 0xc350
 801227c:	f000 f924 	bl	80124c8 <FLASH_WaitForLastOperation>
 8012280:	4603      	mov	r3, r0
 8012282:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8012284:	7dfb      	ldrb	r3, [r7, #23]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d12b      	bne.n	80122e2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d105      	bne.n	801229c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8012290:	783b      	ldrb	r3, [r7, #0]
 8012292:	4619      	mov	r1, r3
 8012294:	68b8      	ldr	r0, [r7, #8]
 8012296:	f000 f9cd 	bl	8012634 <FLASH_Program_Byte>
 801229a:	e016      	b.n	80122ca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	2b01      	cmp	r3, #1
 80122a0:	d105      	bne.n	80122ae <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80122a2:	883b      	ldrh	r3, [r7, #0]
 80122a4:	4619      	mov	r1, r3
 80122a6:	68b8      	ldr	r0, [r7, #8]
 80122a8:	f000 f9a0 	bl	80125ec <FLASH_Program_HalfWord>
 80122ac:	e00d      	b.n	80122ca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	2b02      	cmp	r3, #2
 80122b2:	d105      	bne.n	80122c0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	4619      	mov	r1, r3
 80122b8:	68b8      	ldr	r0, [r7, #8]
 80122ba:	f000 f975 	bl	80125a8 <FLASH_Program_Word>
 80122be:	e004      	b.n	80122ca <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80122c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80122c4:	68b8      	ldr	r0, [r7, #8]
 80122c6:	f000 f93f 	bl	8012548 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80122ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80122ce:	f000 f8fb 	bl	80124c8 <FLASH_WaitForLastOperation>
 80122d2:	4603      	mov	r3, r0
 80122d4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80122d6:	4b08      	ldr	r3, [pc, #32]	; (80122f8 <HAL_FLASH_Program+0xa4>)
 80122d8:	691b      	ldr	r3, [r3, #16]
 80122da:	4a07      	ldr	r2, [pc, #28]	; (80122f8 <HAL_FLASH_Program+0xa4>)
 80122dc:	f023 0301 	bic.w	r3, r3, #1
 80122e0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80122e2:	4b04      	ldr	r3, [pc, #16]	; (80122f4 <HAL_FLASH_Program+0xa0>)
 80122e4:	2200      	movs	r2, #0
 80122e6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80122e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3718      	adds	r7, #24
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}
 80122f2:	bf00      	nop
 80122f4:	20005060 	.word	0x20005060
 80122f8:	40023c00 	.word	0x40023c00

080122fc <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b082      	sub	sp, #8
 8012300:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8012302:	2300      	movs	r3, #0
 8012304:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8012306:	4b4b      	ldr	r3, [pc, #300]	; (8012434 <HAL_FLASH_IRQHandler+0x138>)
 8012308:	68db      	ldr	r3, [r3, #12]
 801230a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 801230e:	2b00      	cmp	r3, #0
 8012310:	d020      	beq.n	8012354 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8012312:	4b49      	ldr	r3, [pc, #292]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 8012314:	781b      	ldrb	r3, [r3, #0]
 8012316:	b2db      	uxtb	r3, r3
 8012318:	2b01      	cmp	r3, #1
 801231a:	d107      	bne.n	801232c <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 801231c:	4b46      	ldr	r3, [pc, #280]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 801231e:	68db      	ldr	r3, [r3, #12]
 8012320:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8012322:	4b45      	ldr	r3, [pc, #276]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 8012324:	f04f 32ff 	mov.w	r2, #4294967295
 8012328:	60da      	str	r2, [r3, #12]
 801232a:	e00b      	b.n	8012344 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 801232c:	4b42      	ldr	r3, [pc, #264]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 801232e:	781b      	ldrb	r3, [r3, #0]
 8012330:	b2db      	uxtb	r3, r3
 8012332:	2b02      	cmp	r3, #2
 8012334:	d103      	bne.n	801233e <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8012336:	4b40      	ldr	r3, [pc, #256]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 8012338:	691b      	ldr	r3, [r3, #16]
 801233a:	607b      	str	r3, [r7, #4]
 801233c:	e002      	b.n	8012344 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 801233e:	4b3e      	ldr	r3, [pc, #248]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 8012340:	695b      	ldr	r3, [r3, #20]
 8012342:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8012344:	f000 f998 	bl	8012678 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f000 f881 	bl	8012450 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 801234e:	4b3a      	ldr	r3, [pc, #232]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 8012350:	2200      	movs	r2, #0
 8012352:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8012354:	4b37      	ldr	r3, [pc, #220]	; (8012434 <HAL_FLASH_IRQHandler+0x138>)
 8012356:	68db      	ldr	r3, [r3, #12]
 8012358:	f003 0301 	and.w	r3, r3, #1
 801235c:	2b00      	cmp	r3, #0
 801235e:	d04a      	beq.n	80123f6 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012360:	4b34      	ldr	r3, [pc, #208]	; (8012434 <HAL_FLASH_IRQHandler+0x138>)
 8012362:	2201      	movs	r2, #1
 8012364:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8012366:	4b34      	ldr	r3, [pc, #208]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	b2db      	uxtb	r3, r3
 801236c:	2b01      	cmp	r3, #1
 801236e:	d12d      	bne.n	80123cc <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8012370:	4b31      	ldr	r3, [pc, #196]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	3b01      	subs	r3, #1
 8012376:	4a30      	ldr	r2, [pc, #192]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 8012378:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 801237a:	4b2f      	ldr	r3, [pc, #188]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d015      	beq.n	80123ae <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8012382:	4b2d      	ldr	r3, [pc, #180]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 8012384:	68db      	ldr	r3, [r3, #12]
 8012386:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f000 f857 	bl	801243c <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 801238e:	4b2a      	ldr	r3, [pc, #168]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 8012390:	68db      	ldr	r3, [r3, #12]
 8012392:	3301      	adds	r3, #1
 8012394:	4a28      	ldr	r2, [pc, #160]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 8012396:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8012398:	4b27      	ldr	r3, [pc, #156]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 801239a:	68db      	ldr	r3, [r3, #12]
 801239c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 801239e:	4b26      	ldr	r3, [pc, #152]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 80123a0:	7a1b      	ldrb	r3, [r3, #8]
 80123a2:	b2db      	uxtb	r3, r3
 80123a4:	4619      	mov	r1, r3
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f000 fa50 	bl	801284c <FLASH_Erase_Sector>
 80123ac:	e023      	b.n	80123f6 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80123ae:	f04f 33ff 	mov.w	r3, #4294967295
 80123b2:	607b      	str	r3, [r7, #4]
 80123b4:	4a20      	ldr	r2, [pc, #128]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80123ba:	4b1f      	ldr	r3, [pc, #124]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 80123bc:	2200      	movs	r2, #0
 80123be:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80123c0:	f000 fa8c 	bl	80128dc <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f000 f839 	bl	801243c <HAL_FLASH_EndOfOperationCallback>
 80123ca:	e014      	b.n	80123f6 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 80123cc:	4b1a      	ldr	r3, [pc, #104]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 80123ce:	781b      	ldrb	r3, [r3, #0]
 80123d0:	b2db      	uxtb	r3, r3
 80123d2:	2b02      	cmp	r3, #2
 80123d4:	d107      	bne.n	80123e6 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80123d6:	f000 fa81 	bl	80128dc <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80123da:	4b17      	ldr	r3, [pc, #92]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 80123dc:	691b      	ldr	r3, [r3, #16]
 80123de:	4618      	mov	r0, r3
 80123e0:	f000 f82c 	bl	801243c <HAL_FLASH_EndOfOperationCallback>
 80123e4:	e004      	b.n	80123f0 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80123e6:	4b14      	ldr	r3, [pc, #80]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 80123e8:	695b      	ldr	r3, [r3, #20]
 80123ea:	4618      	mov	r0, r3
 80123ec:	f000 f826 	bl	801243c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80123f0:	4b11      	ldr	r3, [pc, #68]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 80123f2:	2200      	movs	r2, #0
 80123f4:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80123f6:	4b10      	ldr	r3, [pc, #64]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 80123f8:	781b      	ldrb	r3, [r3, #0]
 80123fa:	b2db      	uxtb	r3, r3
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d114      	bne.n	801242a <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8012400:	4b0c      	ldr	r3, [pc, #48]	; (8012434 <HAL_FLASH_IRQHandler+0x138>)
 8012402:	691b      	ldr	r3, [r3, #16]
 8012404:	4a0b      	ldr	r2, [pc, #44]	; (8012434 <HAL_FLASH_IRQHandler+0x138>)
 8012406:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801240a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 801240c:	4b09      	ldr	r3, [pc, #36]	; (8012434 <HAL_FLASH_IRQHandler+0x138>)
 801240e:	691b      	ldr	r3, [r3, #16]
 8012410:	4a08      	ldr	r2, [pc, #32]	; (8012434 <HAL_FLASH_IRQHandler+0x138>)
 8012412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012416:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8012418:	4b06      	ldr	r3, [pc, #24]	; (8012434 <HAL_FLASH_IRQHandler+0x138>)
 801241a:	691b      	ldr	r3, [r3, #16]
 801241c:	4a05      	ldr	r2, [pc, #20]	; (8012434 <HAL_FLASH_IRQHandler+0x138>)
 801241e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8012422:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8012424:	4b04      	ldr	r3, [pc, #16]	; (8012438 <HAL_FLASH_IRQHandler+0x13c>)
 8012426:	2200      	movs	r2, #0
 8012428:	761a      	strb	r2, [r3, #24]
  }
}
 801242a:	bf00      	nop
 801242c:	3708      	adds	r7, #8
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}
 8012432:	bf00      	nop
 8012434:	40023c00 	.word	0x40023c00
 8012438:	20005060 	.word	0x20005060

0801243c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 801243c:	b480      	push	{r7}
 801243e:	b083      	sub	sp, #12
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8012444:	bf00      	nop
 8012446:	370c      	adds	r7, #12
 8012448:	46bd      	mov	sp, r7
 801244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244e:	4770      	bx	lr

08012450 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8012450:	b480      	push	{r7}
 8012452:	b083      	sub	sp, #12
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8012458:	bf00      	nop
 801245a:	370c      	adds	r7, #12
 801245c:	46bd      	mov	sp, r7
 801245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012462:	4770      	bx	lr

08012464 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8012464:	b480      	push	{r7}
 8012466:	b083      	sub	sp, #12
 8012468:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801246a:	2300      	movs	r3, #0
 801246c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801246e:	4b0b      	ldr	r3, [pc, #44]	; (801249c <HAL_FLASH_Unlock+0x38>)
 8012470:	691b      	ldr	r3, [r3, #16]
 8012472:	2b00      	cmp	r3, #0
 8012474:	da0b      	bge.n	801248e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8012476:	4b09      	ldr	r3, [pc, #36]	; (801249c <HAL_FLASH_Unlock+0x38>)
 8012478:	4a09      	ldr	r2, [pc, #36]	; (80124a0 <HAL_FLASH_Unlock+0x3c>)
 801247a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801247c:	4b07      	ldr	r3, [pc, #28]	; (801249c <HAL_FLASH_Unlock+0x38>)
 801247e:	4a09      	ldr	r2, [pc, #36]	; (80124a4 <HAL_FLASH_Unlock+0x40>)
 8012480:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8012482:	4b06      	ldr	r3, [pc, #24]	; (801249c <HAL_FLASH_Unlock+0x38>)
 8012484:	691b      	ldr	r3, [r3, #16]
 8012486:	2b00      	cmp	r3, #0
 8012488:	da01      	bge.n	801248e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801248a:	2301      	movs	r3, #1
 801248c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801248e:	79fb      	ldrb	r3, [r7, #7]
}
 8012490:	4618      	mov	r0, r3
 8012492:	370c      	adds	r7, #12
 8012494:	46bd      	mov	sp, r7
 8012496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249a:	4770      	bx	lr
 801249c:	40023c00 	.word	0x40023c00
 80124a0:	45670123 	.word	0x45670123
 80124a4:	cdef89ab 	.word	0xcdef89ab

080124a8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80124a8:	b480      	push	{r7}
 80124aa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80124ac:	4b05      	ldr	r3, [pc, #20]	; (80124c4 <HAL_FLASH_Lock+0x1c>)
 80124ae:	691b      	ldr	r3, [r3, #16]
 80124b0:	4a04      	ldr	r2, [pc, #16]	; (80124c4 <HAL_FLASH_Lock+0x1c>)
 80124b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80124b6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80124b8:	2300      	movs	r3, #0
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	46bd      	mov	sp, r7
 80124be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c2:	4770      	bx	lr
 80124c4:	40023c00 	.word	0x40023c00

080124c8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b084      	sub	sp, #16
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80124d0:	2300      	movs	r3, #0
 80124d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80124d4:	4b1a      	ldr	r3, [pc, #104]	; (8012540 <FLASH_WaitForLastOperation+0x78>)
 80124d6:	2200      	movs	r2, #0
 80124d8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80124da:	f7fe fc15 	bl	8010d08 <HAL_GetTick>
 80124de:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80124e0:	e010      	b.n	8012504 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124e8:	d00c      	beq.n	8012504 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d007      	beq.n	8012500 <FLASH_WaitForLastOperation+0x38>
 80124f0:	f7fe fc0a 	bl	8010d08 <HAL_GetTick>
 80124f4:	4602      	mov	r2, r0
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	1ad3      	subs	r3, r2, r3
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	429a      	cmp	r2, r3
 80124fe:	d201      	bcs.n	8012504 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8012500:	2303      	movs	r3, #3
 8012502:	e019      	b.n	8012538 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8012504:	4b0f      	ldr	r3, [pc, #60]	; (8012544 <FLASH_WaitForLastOperation+0x7c>)
 8012506:	68db      	ldr	r3, [r3, #12]
 8012508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801250c:	2b00      	cmp	r3, #0
 801250e:	d1e8      	bne.n	80124e2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8012510:	4b0c      	ldr	r3, [pc, #48]	; (8012544 <FLASH_WaitForLastOperation+0x7c>)
 8012512:	68db      	ldr	r3, [r3, #12]
 8012514:	f003 0301 	and.w	r3, r3, #1
 8012518:	2b00      	cmp	r3, #0
 801251a:	d002      	beq.n	8012522 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801251c:	4b09      	ldr	r3, [pc, #36]	; (8012544 <FLASH_WaitForLastOperation+0x7c>)
 801251e:	2201      	movs	r2, #1
 8012520:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8012522:	4b08      	ldr	r3, [pc, #32]	; (8012544 <FLASH_WaitForLastOperation+0x7c>)
 8012524:	68db      	ldr	r3, [r3, #12]
 8012526:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 801252a:	2b00      	cmp	r3, #0
 801252c:	d003      	beq.n	8012536 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 801252e:	f000 f8a3 	bl	8012678 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8012532:	2301      	movs	r3, #1
 8012534:	e000      	b.n	8012538 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8012536:	2300      	movs	r3, #0
  
}  
 8012538:	4618      	mov	r0, r3
 801253a:	3710      	adds	r7, #16
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}
 8012540:	20005060 	.word	0x20005060
 8012544:	40023c00 	.word	0x40023c00

08012548 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8012548:	b490      	push	{r4, r7}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	60f8      	str	r0, [r7, #12]
 8012550:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012554:	4b13      	ldr	r3, [pc, #76]	; (80125a4 <FLASH_Program_DoubleWord+0x5c>)
 8012556:	691b      	ldr	r3, [r3, #16]
 8012558:	4a12      	ldr	r2, [pc, #72]	; (80125a4 <FLASH_Program_DoubleWord+0x5c>)
 801255a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801255e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8012560:	4b10      	ldr	r3, [pc, #64]	; (80125a4 <FLASH_Program_DoubleWord+0x5c>)
 8012562:	691b      	ldr	r3, [r3, #16]
 8012564:	4a0f      	ldr	r2, [pc, #60]	; (80125a4 <FLASH_Program_DoubleWord+0x5c>)
 8012566:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801256a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801256c:	4b0d      	ldr	r3, [pc, #52]	; (80125a4 <FLASH_Program_DoubleWord+0x5c>)
 801256e:	691b      	ldr	r3, [r3, #16]
 8012570:	4a0c      	ldr	r2, [pc, #48]	; (80125a4 <FLASH_Program_DoubleWord+0x5c>)
 8012572:	f043 0301 	orr.w	r3, r3, #1
 8012576:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	683a      	ldr	r2, [r7, #0]
 801257c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 801257e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8012582:	e9d7 1200 	ldrd	r1, r2, [r7]
 8012586:	f04f 0300 	mov.w	r3, #0
 801258a:	f04f 0400 	mov.w	r4, #0
 801258e:	0013      	movs	r3, r2
 8012590:	2400      	movs	r4, #0
 8012592:	68fa      	ldr	r2, [r7, #12]
 8012594:	3204      	adds	r2, #4
 8012596:	6013      	str	r3, [r2, #0]
}
 8012598:	bf00      	nop
 801259a:	3710      	adds	r7, #16
 801259c:	46bd      	mov	sp, r7
 801259e:	bc90      	pop	{r4, r7}
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop
 80125a4:	40023c00 	.word	0x40023c00

080125a8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80125a8:	b480      	push	{r7}
 80125aa:	b083      	sub	sp, #12
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80125b2:	4b0d      	ldr	r3, [pc, #52]	; (80125e8 <FLASH_Program_Word+0x40>)
 80125b4:	691b      	ldr	r3, [r3, #16]
 80125b6:	4a0c      	ldr	r2, [pc, #48]	; (80125e8 <FLASH_Program_Word+0x40>)
 80125b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80125bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80125be:	4b0a      	ldr	r3, [pc, #40]	; (80125e8 <FLASH_Program_Word+0x40>)
 80125c0:	691b      	ldr	r3, [r3, #16]
 80125c2:	4a09      	ldr	r2, [pc, #36]	; (80125e8 <FLASH_Program_Word+0x40>)
 80125c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80125c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80125ca:	4b07      	ldr	r3, [pc, #28]	; (80125e8 <FLASH_Program_Word+0x40>)
 80125cc:	691b      	ldr	r3, [r3, #16]
 80125ce:	4a06      	ldr	r2, [pc, #24]	; (80125e8 <FLASH_Program_Word+0x40>)
 80125d0:	f043 0301 	orr.w	r3, r3, #1
 80125d4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	683a      	ldr	r2, [r7, #0]
 80125da:	601a      	str	r2, [r3, #0]
}
 80125dc:	bf00      	nop
 80125de:	370c      	adds	r7, #12
 80125e0:	46bd      	mov	sp, r7
 80125e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e6:	4770      	bx	lr
 80125e8:	40023c00 	.word	0x40023c00

080125ec <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80125ec:	b480      	push	{r7}
 80125ee:	b083      	sub	sp, #12
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
 80125f4:	460b      	mov	r3, r1
 80125f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80125f8:	4b0d      	ldr	r3, [pc, #52]	; (8012630 <FLASH_Program_HalfWord+0x44>)
 80125fa:	691b      	ldr	r3, [r3, #16]
 80125fc:	4a0c      	ldr	r2, [pc, #48]	; (8012630 <FLASH_Program_HalfWord+0x44>)
 80125fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012602:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8012604:	4b0a      	ldr	r3, [pc, #40]	; (8012630 <FLASH_Program_HalfWord+0x44>)
 8012606:	691b      	ldr	r3, [r3, #16]
 8012608:	4a09      	ldr	r2, [pc, #36]	; (8012630 <FLASH_Program_HalfWord+0x44>)
 801260a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801260e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012610:	4b07      	ldr	r3, [pc, #28]	; (8012630 <FLASH_Program_HalfWord+0x44>)
 8012612:	691b      	ldr	r3, [r3, #16]
 8012614:	4a06      	ldr	r2, [pc, #24]	; (8012630 <FLASH_Program_HalfWord+0x44>)
 8012616:	f043 0301 	orr.w	r3, r3, #1
 801261a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	887a      	ldrh	r2, [r7, #2]
 8012620:	801a      	strh	r2, [r3, #0]
}
 8012622:	bf00      	nop
 8012624:	370c      	adds	r7, #12
 8012626:	46bd      	mov	sp, r7
 8012628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262c:	4770      	bx	lr
 801262e:	bf00      	nop
 8012630:	40023c00 	.word	0x40023c00

08012634 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8012634:	b480      	push	{r7}
 8012636:	b083      	sub	sp, #12
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	460b      	mov	r3, r1
 801263e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012640:	4b0c      	ldr	r3, [pc, #48]	; (8012674 <FLASH_Program_Byte+0x40>)
 8012642:	691b      	ldr	r3, [r3, #16]
 8012644:	4a0b      	ldr	r2, [pc, #44]	; (8012674 <FLASH_Program_Byte+0x40>)
 8012646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801264a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 801264c:	4b09      	ldr	r3, [pc, #36]	; (8012674 <FLASH_Program_Byte+0x40>)
 801264e:	4a09      	ldr	r2, [pc, #36]	; (8012674 <FLASH_Program_Byte+0x40>)
 8012650:	691b      	ldr	r3, [r3, #16]
 8012652:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012654:	4b07      	ldr	r3, [pc, #28]	; (8012674 <FLASH_Program_Byte+0x40>)
 8012656:	691b      	ldr	r3, [r3, #16]
 8012658:	4a06      	ldr	r2, [pc, #24]	; (8012674 <FLASH_Program_Byte+0x40>)
 801265a:	f043 0301 	orr.w	r3, r3, #1
 801265e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	78fa      	ldrb	r2, [r7, #3]
 8012664:	701a      	strb	r2, [r3, #0]
}
 8012666:	bf00      	nop
 8012668:	370c      	adds	r7, #12
 801266a:	46bd      	mov	sp, r7
 801266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012670:	4770      	bx	lr
 8012672:	bf00      	nop
 8012674:	40023c00 	.word	0x40023c00

08012678 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8012678:	b480      	push	{r7}
 801267a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 801267c:	4b27      	ldr	r3, [pc, #156]	; (801271c <FLASH_SetErrorCode+0xa4>)
 801267e:	68db      	ldr	r3, [r3, #12]
 8012680:	f003 0310 	and.w	r3, r3, #16
 8012684:	2b00      	cmp	r3, #0
 8012686:	d008      	beq.n	801269a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8012688:	4b25      	ldr	r3, [pc, #148]	; (8012720 <FLASH_SetErrorCode+0xa8>)
 801268a:	69db      	ldr	r3, [r3, #28]
 801268c:	f043 0310 	orr.w	r3, r3, #16
 8012690:	4a23      	ldr	r2, [pc, #140]	; (8012720 <FLASH_SetErrorCode+0xa8>)
 8012692:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8012694:	4b21      	ldr	r3, [pc, #132]	; (801271c <FLASH_SetErrorCode+0xa4>)
 8012696:	2210      	movs	r2, #16
 8012698:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 801269a:	4b20      	ldr	r3, [pc, #128]	; (801271c <FLASH_SetErrorCode+0xa4>)
 801269c:	68db      	ldr	r3, [r3, #12]
 801269e:	f003 0320 	and.w	r3, r3, #32
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d008      	beq.n	80126b8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80126a6:	4b1e      	ldr	r3, [pc, #120]	; (8012720 <FLASH_SetErrorCode+0xa8>)
 80126a8:	69db      	ldr	r3, [r3, #28]
 80126aa:	f043 0308 	orr.w	r3, r3, #8
 80126ae:	4a1c      	ldr	r2, [pc, #112]	; (8012720 <FLASH_SetErrorCode+0xa8>)
 80126b0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80126b2:	4b1a      	ldr	r3, [pc, #104]	; (801271c <FLASH_SetErrorCode+0xa4>)
 80126b4:	2220      	movs	r2, #32
 80126b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80126b8:	4b18      	ldr	r3, [pc, #96]	; (801271c <FLASH_SetErrorCode+0xa4>)
 80126ba:	68db      	ldr	r3, [r3, #12]
 80126bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d008      	beq.n	80126d6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80126c4:	4b16      	ldr	r3, [pc, #88]	; (8012720 <FLASH_SetErrorCode+0xa8>)
 80126c6:	69db      	ldr	r3, [r3, #28]
 80126c8:	f043 0304 	orr.w	r3, r3, #4
 80126cc:	4a14      	ldr	r2, [pc, #80]	; (8012720 <FLASH_SetErrorCode+0xa8>)
 80126ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80126d0:	4b12      	ldr	r3, [pc, #72]	; (801271c <FLASH_SetErrorCode+0xa4>)
 80126d2:	2240      	movs	r2, #64	; 0x40
 80126d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80126d6:	4b11      	ldr	r3, [pc, #68]	; (801271c <FLASH_SetErrorCode+0xa4>)
 80126d8:	68db      	ldr	r3, [r3, #12]
 80126da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d008      	beq.n	80126f4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80126e2:	4b0f      	ldr	r3, [pc, #60]	; (8012720 <FLASH_SetErrorCode+0xa8>)
 80126e4:	69db      	ldr	r3, [r3, #28]
 80126e6:	f043 0302 	orr.w	r3, r3, #2
 80126ea:	4a0d      	ldr	r2, [pc, #52]	; (8012720 <FLASH_SetErrorCode+0xa8>)
 80126ec:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80126ee:	4b0b      	ldr	r3, [pc, #44]	; (801271c <FLASH_SetErrorCode+0xa4>)
 80126f0:	2280      	movs	r2, #128	; 0x80
 80126f2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80126f4:	4b09      	ldr	r3, [pc, #36]	; (801271c <FLASH_SetErrorCode+0xa4>)
 80126f6:	68db      	ldr	r3, [r3, #12]
 80126f8:	f003 0302 	and.w	r3, r3, #2
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d008      	beq.n	8012712 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8012700:	4b07      	ldr	r3, [pc, #28]	; (8012720 <FLASH_SetErrorCode+0xa8>)
 8012702:	69db      	ldr	r3, [r3, #28]
 8012704:	f043 0320 	orr.w	r3, r3, #32
 8012708:	4a05      	ldr	r2, [pc, #20]	; (8012720 <FLASH_SetErrorCode+0xa8>)
 801270a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 801270c:	4b03      	ldr	r3, [pc, #12]	; (801271c <FLASH_SetErrorCode+0xa4>)
 801270e:	2202      	movs	r2, #2
 8012710:	60da      	str	r2, [r3, #12]
  }
}
 8012712:	bf00      	nop
 8012714:	46bd      	mov	sp, r7
 8012716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271a:	4770      	bx	lr
 801271c:	40023c00 	.word	0x40023c00
 8012720:	20005060 	.word	0x20005060

08012724 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b084      	sub	sp, #16
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801272e:	2301      	movs	r3, #1
 8012730:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8012732:	2300      	movs	r3, #0
 8012734:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8012736:	4b31      	ldr	r3, [pc, #196]	; (80127fc <HAL_FLASHEx_Erase+0xd8>)
 8012738:	7e1b      	ldrb	r3, [r3, #24]
 801273a:	2b01      	cmp	r3, #1
 801273c:	d101      	bne.n	8012742 <HAL_FLASHEx_Erase+0x1e>
 801273e:	2302      	movs	r3, #2
 8012740:	e058      	b.n	80127f4 <HAL_FLASHEx_Erase+0xd0>
 8012742:	4b2e      	ldr	r3, [pc, #184]	; (80127fc <HAL_FLASHEx_Erase+0xd8>)
 8012744:	2201      	movs	r2, #1
 8012746:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012748:	f24c 3050 	movw	r0, #50000	; 0xc350
 801274c:	f7ff febc 	bl	80124c8 <FLASH_WaitForLastOperation>
 8012750:	4603      	mov	r3, r0
 8012752:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8012754:	7bfb      	ldrb	r3, [r7, #15]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d148      	bne.n	80127ec <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	f04f 32ff 	mov.w	r2, #4294967295
 8012760:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	2b01      	cmp	r3, #1
 8012768:	d115      	bne.n	8012796 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	691b      	ldr	r3, [r3, #16]
 801276e:	b2da      	uxtb	r2, r3
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	685b      	ldr	r3, [r3, #4]
 8012774:	4619      	mov	r1, r3
 8012776:	4610      	mov	r0, r2
 8012778:	f000 f844 	bl	8012804 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801277c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012780:	f7ff fea2 	bl	80124c8 <FLASH_WaitForLastOperation>
 8012784:	4603      	mov	r3, r0
 8012786:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8012788:	4b1d      	ldr	r3, [pc, #116]	; (8012800 <HAL_FLASHEx_Erase+0xdc>)
 801278a:	691b      	ldr	r3, [r3, #16]
 801278c:	4a1c      	ldr	r2, [pc, #112]	; (8012800 <HAL_FLASHEx_Erase+0xdc>)
 801278e:	f023 0304 	bic.w	r3, r3, #4
 8012792:	6113      	str	r3, [r2, #16]
 8012794:	e028      	b.n	80127e8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	689b      	ldr	r3, [r3, #8]
 801279a:	60bb      	str	r3, [r7, #8]
 801279c:	e01c      	b.n	80127d8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	691b      	ldr	r3, [r3, #16]
 80127a2:	b2db      	uxtb	r3, r3
 80127a4:	4619      	mov	r1, r3
 80127a6:	68b8      	ldr	r0, [r7, #8]
 80127a8:	f000 f850 	bl	801284c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80127ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80127b0:	f7ff fe8a 	bl	80124c8 <FLASH_WaitForLastOperation>
 80127b4:	4603      	mov	r3, r0
 80127b6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80127b8:	4b11      	ldr	r3, [pc, #68]	; (8012800 <HAL_FLASHEx_Erase+0xdc>)
 80127ba:	691b      	ldr	r3, [r3, #16]
 80127bc:	4a10      	ldr	r2, [pc, #64]	; (8012800 <HAL_FLASHEx_Erase+0xdc>)
 80127be:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80127c2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80127c4:	7bfb      	ldrb	r3, [r7, #15]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d003      	beq.n	80127d2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	68ba      	ldr	r2, [r7, #8]
 80127ce:	601a      	str	r2, [r3, #0]
          break;
 80127d0:	e00a      	b.n	80127e8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	3301      	adds	r3, #1
 80127d6:	60bb      	str	r3, [r7, #8]
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	68da      	ldr	r2, [r3, #12]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	689b      	ldr	r3, [r3, #8]
 80127e0:	4413      	add	r3, r2
 80127e2:	68ba      	ldr	r2, [r7, #8]
 80127e4:	429a      	cmp	r2, r3
 80127e6:	d3da      	bcc.n	801279e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80127e8:	f000 f878 	bl	80128dc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80127ec:	4b03      	ldr	r3, [pc, #12]	; (80127fc <HAL_FLASHEx_Erase+0xd8>)
 80127ee:	2200      	movs	r2, #0
 80127f0:	761a      	strb	r2, [r3, #24]

  return status;
 80127f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3710      	adds	r7, #16
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}
 80127fc:	20005060 	.word	0x20005060
 8012800:	40023c00 	.word	0x40023c00

08012804 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8012804:	b480      	push	{r7}
 8012806:	b083      	sub	sp, #12
 8012808:	af00      	add	r7, sp, #0
 801280a:	4603      	mov	r3, r0
 801280c:	6039      	str	r1, [r7, #0]
 801280e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012810:	4b0d      	ldr	r3, [pc, #52]	; (8012848 <FLASH_MassErase+0x44>)
 8012812:	691b      	ldr	r3, [r3, #16]
 8012814:	4a0c      	ldr	r2, [pc, #48]	; (8012848 <FLASH_MassErase+0x44>)
 8012816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801281a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 801281c:	4b0a      	ldr	r3, [pc, #40]	; (8012848 <FLASH_MassErase+0x44>)
 801281e:	691b      	ldr	r3, [r3, #16]
 8012820:	4a09      	ldr	r2, [pc, #36]	; (8012848 <FLASH_MassErase+0x44>)
 8012822:	f043 0304 	orr.w	r3, r3, #4
 8012826:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8012828:	4b07      	ldr	r3, [pc, #28]	; (8012848 <FLASH_MassErase+0x44>)
 801282a:	691a      	ldr	r2, [r3, #16]
 801282c:	79fb      	ldrb	r3, [r7, #7]
 801282e:	021b      	lsls	r3, r3, #8
 8012830:	4313      	orrs	r3, r2
 8012832:	4a05      	ldr	r2, [pc, #20]	; (8012848 <FLASH_MassErase+0x44>)
 8012834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012838:	6113      	str	r3, [r2, #16]
}
 801283a:	bf00      	nop
 801283c:	370c      	adds	r7, #12
 801283e:	46bd      	mov	sp, r7
 8012840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012844:	4770      	bx	lr
 8012846:	bf00      	nop
 8012848:	40023c00 	.word	0x40023c00

0801284c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 801284c:	b480      	push	{r7}
 801284e:	b085      	sub	sp, #20
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	460b      	mov	r3, r1
 8012856:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8012858:	2300      	movs	r3, #0
 801285a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 801285c:	78fb      	ldrb	r3, [r7, #3]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d102      	bne.n	8012868 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8012862:	2300      	movs	r3, #0
 8012864:	60fb      	str	r3, [r7, #12]
 8012866:	e010      	b.n	801288a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8012868:	78fb      	ldrb	r3, [r7, #3]
 801286a:	2b01      	cmp	r3, #1
 801286c:	d103      	bne.n	8012876 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801286e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012872:	60fb      	str	r3, [r7, #12]
 8012874:	e009      	b.n	801288a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8012876:	78fb      	ldrb	r3, [r7, #3]
 8012878:	2b02      	cmp	r3, #2
 801287a:	d103      	bne.n	8012884 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 801287c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012880:	60fb      	str	r3, [r7, #12]
 8012882:	e002      	b.n	801288a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8012884:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012888:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801288a:	4b13      	ldr	r3, [pc, #76]	; (80128d8 <FLASH_Erase_Sector+0x8c>)
 801288c:	691b      	ldr	r3, [r3, #16]
 801288e:	4a12      	ldr	r2, [pc, #72]	; (80128d8 <FLASH_Erase_Sector+0x8c>)
 8012890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012894:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8012896:	4b10      	ldr	r3, [pc, #64]	; (80128d8 <FLASH_Erase_Sector+0x8c>)
 8012898:	691a      	ldr	r2, [r3, #16]
 801289a:	490f      	ldr	r1, [pc, #60]	; (80128d8 <FLASH_Erase_Sector+0x8c>)
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	4313      	orrs	r3, r2
 80128a0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80128a2:	4b0d      	ldr	r3, [pc, #52]	; (80128d8 <FLASH_Erase_Sector+0x8c>)
 80128a4:	691b      	ldr	r3, [r3, #16]
 80128a6:	4a0c      	ldr	r2, [pc, #48]	; (80128d8 <FLASH_Erase_Sector+0x8c>)
 80128a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80128ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80128ae:	4b0a      	ldr	r3, [pc, #40]	; (80128d8 <FLASH_Erase_Sector+0x8c>)
 80128b0:	691a      	ldr	r2, [r3, #16]
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	00db      	lsls	r3, r3, #3
 80128b6:	4313      	orrs	r3, r2
 80128b8:	4a07      	ldr	r2, [pc, #28]	; (80128d8 <FLASH_Erase_Sector+0x8c>)
 80128ba:	f043 0302 	orr.w	r3, r3, #2
 80128be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80128c0:	4b05      	ldr	r3, [pc, #20]	; (80128d8 <FLASH_Erase_Sector+0x8c>)
 80128c2:	691b      	ldr	r3, [r3, #16]
 80128c4:	4a04      	ldr	r2, [pc, #16]	; (80128d8 <FLASH_Erase_Sector+0x8c>)
 80128c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80128ca:	6113      	str	r3, [r2, #16]
}
 80128cc:	bf00      	nop
 80128ce:	3714      	adds	r7, #20
 80128d0:	46bd      	mov	sp, r7
 80128d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d6:	4770      	bx	lr
 80128d8:	40023c00 	.word	0x40023c00

080128dc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80128dc:	b480      	push	{r7}
 80128de:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80128e0:	4b20      	ldr	r3, [pc, #128]	; (8012964 <FLASH_FlushCaches+0x88>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d017      	beq.n	801291c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80128ec:	4b1d      	ldr	r3, [pc, #116]	; (8012964 <FLASH_FlushCaches+0x88>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	4a1c      	ldr	r2, [pc, #112]	; (8012964 <FLASH_FlushCaches+0x88>)
 80128f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80128f6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80128f8:	4b1a      	ldr	r3, [pc, #104]	; (8012964 <FLASH_FlushCaches+0x88>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	4a19      	ldr	r2, [pc, #100]	; (8012964 <FLASH_FlushCaches+0x88>)
 80128fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012902:	6013      	str	r3, [r2, #0]
 8012904:	4b17      	ldr	r3, [pc, #92]	; (8012964 <FLASH_FlushCaches+0x88>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	4a16      	ldr	r2, [pc, #88]	; (8012964 <FLASH_FlushCaches+0x88>)
 801290a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801290e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8012910:	4b14      	ldr	r3, [pc, #80]	; (8012964 <FLASH_FlushCaches+0x88>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	4a13      	ldr	r2, [pc, #76]	; (8012964 <FLASH_FlushCaches+0x88>)
 8012916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801291a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 801291c:	4b11      	ldr	r3, [pc, #68]	; (8012964 <FLASH_FlushCaches+0x88>)
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012924:	2b00      	cmp	r3, #0
 8012926:	d017      	beq.n	8012958 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8012928:	4b0e      	ldr	r3, [pc, #56]	; (8012964 <FLASH_FlushCaches+0x88>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	4a0d      	ldr	r2, [pc, #52]	; (8012964 <FLASH_FlushCaches+0x88>)
 801292e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012932:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8012934:	4b0b      	ldr	r3, [pc, #44]	; (8012964 <FLASH_FlushCaches+0x88>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	4a0a      	ldr	r2, [pc, #40]	; (8012964 <FLASH_FlushCaches+0x88>)
 801293a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801293e:	6013      	str	r3, [r2, #0]
 8012940:	4b08      	ldr	r3, [pc, #32]	; (8012964 <FLASH_FlushCaches+0x88>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	4a07      	ldr	r2, [pc, #28]	; (8012964 <FLASH_FlushCaches+0x88>)
 8012946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801294a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801294c:	4b05      	ldr	r3, [pc, #20]	; (8012964 <FLASH_FlushCaches+0x88>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	4a04      	ldr	r2, [pc, #16]	; (8012964 <FLASH_FlushCaches+0x88>)
 8012952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012956:	6013      	str	r3, [r2, #0]
  }
}
 8012958:	bf00      	nop
 801295a:	46bd      	mov	sp, r7
 801295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012960:	4770      	bx	lr
 8012962:	bf00      	nop
 8012964:	40023c00 	.word	0x40023c00

08012968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012968:	b480      	push	{r7}
 801296a:	b089      	sub	sp, #36	; 0x24
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012972:	2300      	movs	r3, #0
 8012974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012976:	2300      	movs	r3, #0
 8012978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801297a:	2300      	movs	r3, #0
 801297c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801297e:	2300      	movs	r3, #0
 8012980:	61fb      	str	r3, [r7, #28]
 8012982:	e16b      	b.n	8012c5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012984:	2201      	movs	r2, #1
 8012986:	69fb      	ldr	r3, [r7, #28]
 8012988:	fa02 f303 	lsl.w	r3, r2, r3
 801298c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	697a      	ldr	r2, [r7, #20]
 8012994:	4013      	ands	r3, r2
 8012996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012998:	693a      	ldr	r2, [r7, #16]
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	429a      	cmp	r2, r3
 801299e:	f040 815a 	bne.w	8012c56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	685b      	ldr	r3, [r3, #4]
 80129a6:	2b01      	cmp	r3, #1
 80129a8:	d00b      	beq.n	80129c2 <HAL_GPIO_Init+0x5a>
 80129aa:	683b      	ldr	r3, [r7, #0]
 80129ac:	685b      	ldr	r3, [r3, #4]
 80129ae:	2b02      	cmp	r3, #2
 80129b0:	d007      	beq.n	80129c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80129b6:	2b11      	cmp	r3, #17
 80129b8:	d003      	beq.n	80129c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	685b      	ldr	r3, [r3, #4]
 80129be:	2b12      	cmp	r3, #18
 80129c0:	d130      	bne.n	8012a24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	689b      	ldr	r3, [r3, #8]
 80129c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80129c8:	69fb      	ldr	r3, [r7, #28]
 80129ca:	005b      	lsls	r3, r3, #1
 80129cc:	2203      	movs	r2, #3
 80129ce:	fa02 f303 	lsl.w	r3, r2, r3
 80129d2:	43db      	mvns	r3, r3
 80129d4:	69ba      	ldr	r2, [r7, #24]
 80129d6:	4013      	ands	r3, r2
 80129d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80129da:	683b      	ldr	r3, [r7, #0]
 80129dc:	68da      	ldr	r2, [r3, #12]
 80129de:	69fb      	ldr	r3, [r7, #28]
 80129e0:	005b      	lsls	r3, r3, #1
 80129e2:	fa02 f303 	lsl.w	r3, r2, r3
 80129e6:	69ba      	ldr	r2, [r7, #24]
 80129e8:	4313      	orrs	r3, r2
 80129ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	69ba      	ldr	r2, [r7, #24]
 80129f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	685b      	ldr	r3, [r3, #4]
 80129f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80129f8:	2201      	movs	r2, #1
 80129fa:	69fb      	ldr	r3, [r7, #28]
 80129fc:	fa02 f303 	lsl.w	r3, r2, r3
 8012a00:	43db      	mvns	r3, r3
 8012a02:	69ba      	ldr	r2, [r7, #24]
 8012a04:	4013      	ands	r3, r2
 8012a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	685b      	ldr	r3, [r3, #4]
 8012a0c:	091b      	lsrs	r3, r3, #4
 8012a0e:	f003 0201 	and.w	r2, r3, #1
 8012a12:	69fb      	ldr	r3, [r7, #28]
 8012a14:	fa02 f303 	lsl.w	r3, r2, r3
 8012a18:	69ba      	ldr	r2, [r7, #24]
 8012a1a:	4313      	orrs	r3, r2
 8012a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	69ba      	ldr	r2, [r7, #24]
 8012a22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	68db      	ldr	r3, [r3, #12]
 8012a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012a2a:	69fb      	ldr	r3, [r7, #28]
 8012a2c:	005b      	lsls	r3, r3, #1
 8012a2e:	2203      	movs	r2, #3
 8012a30:	fa02 f303 	lsl.w	r3, r2, r3
 8012a34:	43db      	mvns	r3, r3
 8012a36:	69ba      	ldr	r2, [r7, #24]
 8012a38:	4013      	ands	r3, r2
 8012a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012a3c:	683b      	ldr	r3, [r7, #0]
 8012a3e:	689a      	ldr	r2, [r3, #8]
 8012a40:	69fb      	ldr	r3, [r7, #28]
 8012a42:	005b      	lsls	r3, r3, #1
 8012a44:	fa02 f303 	lsl.w	r3, r2, r3
 8012a48:	69ba      	ldr	r2, [r7, #24]
 8012a4a:	4313      	orrs	r3, r2
 8012a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	69ba      	ldr	r2, [r7, #24]
 8012a52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012a54:	683b      	ldr	r3, [r7, #0]
 8012a56:	685b      	ldr	r3, [r3, #4]
 8012a58:	2b02      	cmp	r3, #2
 8012a5a:	d003      	beq.n	8012a64 <HAL_GPIO_Init+0xfc>
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	685b      	ldr	r3, [r3, #4]
 8012a60:	2b12      	cmp	r3, #18
 8012a62:	d123      	bne.n	8012aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012a64:	69fb      	ldr	r3, [r7, #28]
 8012a66:	08da      	lsrs	r2, r3, #3
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	3208      	adds	r2, #8
 8012a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012a72:	69fb      	ldr	r3, [r7, #28]
 8012a74:	f003 0307 	and.w	r3, r3, #7
 8012a78:	009b      	lsls	r3, r3, #2
 8012a7a:	220f      	movs	r2, #15
 8012a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8012a80:	43db      	mvns	r3, r3
 8012a82:	69ba      	ldr	r2, [r7, #24]
 8012a84:	4013      	ands	r3, r2
 8012a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	691a      	ldr	r2, [r3, #16]
 8012a8c:	69fb      	ldr	r3, [r7, #28]
 8012a8e:	f003 0307 	and.w	r3, r3, #7
 8012a92:	009b      	lsls	r3, r3, #2
 8012a94:	fa02 f303 	lsl.w	r3, r2, r3
 8012a98:	69ba      	ldr	r2, [r7, #24]
 8012a9a:	4313      	orrs	r3, r2
 8012a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012a9e:	69fb      	ldr	r3, [r7, #28]
 8012aa0:	08da      	lsrs	r2, r3, #3
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	3208      	adds	r2, #8
 8012aa6:	69b9      	ldr	r1, [r7, #24]
 8012aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012ab2:	69fb      	ldr	r3, [r7, #28]
 8012ab4:	005b      	lsls	r3, r3, #1
 8012ab6:	2203      	movs	r2, #3
 8012ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8012abc:	43db      	mvns	r3, r3
 8012abe:	69ba      	ldr	r2, [r7, #24]
 8012ac0:	4013      	ands	r3, r2
 8012ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	685b      	ldr	r3, [r3, #4]
 8012ac8:	f003 0203 	and.w	r2, r3, #3
 8012acc:	69fb      	ldr	r3, [r7, #28]
 8012ace:	005b      	lsls	r3, r3, #1
 8012ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8012ad4:	69ba      	ldr	r2, [r7, #24]
 8012ad6:	4313      	orrs	r3, r2
 8012ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	69ba      	ldr	r2, [r7, #24]
 8012ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	685b      	ldr	r3, [r3, #4]
 8012ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	f000 80b4 	beq.w	8012c56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012aee:	2300      	movs	r3, #0
 8012af0:	60fb      	str	r3, [r7, #12]
 8012af2:	4b5f      	ldr	r3, [pc, #380]	; (8012c70 <HAL_GPIO_Init+0x308>)
 8012af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012af6:	4a5e      	ldr	r2, [pc, #376]	; (8012c70 <HAL_GPIO_Init+0x308>)
 8012af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012afc:	6453      	str	r3, [r2, #68]	; 0x44
 8012afe:	4b5c      	ldr	r3, [pc, #368]	; (8012c70 <HAL_GPIO_Init+0x308>)
 8012b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012b06:	60fb      	str	r3, [r7, #12]
 8012b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012b0a:	4a5a      	ldr	r2, [pc, #360]	; (8012c74 <HAL_GPIO_Init+0x30c>)
 8012b0c:	69fb      	ldr	r3, [r7, #28]
 8012b0e:	089b      	lsrs	r3, r3, #2
 8012b10:	3302      	adds	r3, #2
 8012b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012b18:	69fb      	ldr	r3, [r7, #28]
 8012b1a:	f003 0303 	and.w	r3, r3, #3
 8012b1e:	009b      	lsls	r3, r3, #2
 8012b20:	220f      	movs	r2, #15
 8012b22:	fa02 f303 	lsl.w	r3, r2, r3
 8012b26:	43db      	mvns	r3, r3
 8012b28:	69ba      	ldr	r2, [r7, #24]
 8012b2a:	4013      	ands	r3, r2
 8012b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	4a51      	ldr	r2, [pc, #324]	; (8012c78 <HAL_GPIO_Init+0x310>)
 8012b32:	4293      	cmp	r3, r2
 8012b34:	d02b      	beq.n	8012b8e <HAL_GPIO_Init+0x226>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	4a50      	ldr	r2, [pc, #320]	; (8012c7c <HAL_GPIO_Init+0x314>)
 8012b3a:	4293      	cmp	r3, r2
 8012b3c:	d025      	beq.n	8012b8a <HAL_GPIO_Init+0x222>
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	4a4f      	ldr	r2, [pc, #316]	; (8012c80 <HAL_GPIO_Init+0x318>)
 8012b42:	4293      	cmp	r3, r2
 8012b44:	d01f      	beq.n	8012b86 <HAL_GPIO_Init+0x21e>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	4a4e      	ldr	r2, [pc, #312]	; (8012c84 <HAL_GPIO_Init+0x31c>)
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d019      	beq.n	8012b82 <HAL_GPIO_Init+0x21a>
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	4a4d      	ldr	r2, [pc, #308]	; (8012c88 <HAL_GPIO_Init+0x320>)
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d013      	beq.n	8012b7e <HAL_GPIO_Init+0x216>
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	4a4c      	ldr	r2, [pc, #304]	; (8012c8c <HAL_GPIO_Init+0x324>)
 8012b5a:	4293      	cmp	r3, r2
 8012b5c:	d00d      	beq.n	8012b7a <HAL_GPIO_Init+0x212>
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	4a4b      	ldr	r2, [pc, #300]	; (8012c90 <HAL_GPIO_Init+0x328>)
 8012b62:	4293      	cmp	r3, r2
 8012b64:	d007      	beq.n	8012b76 <HAL_GPIO_Init+0x20e>
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	4a4a      	ldr	r2, [pc, #296]	; (8012c94 <HAL_GPIO_Init+0x32c>)
 8012b6a:	4293      	cmp	r3, r2
 8012b6c:	d101      	bne.n	8012b72 <HAL_GPIO_Init+0x20a>
 8012b6e:	2307      	movs	r3, #7
 8012b70:	e00e      	b.n	8012b90 <HAL_GPIO_Init+0x228>
 8012b72:	2308      	movs	r3, #8
 8012b74:	e00c      	b.n	8012b90 <HAL_GPIO_Init+0x228>
 8012b76:	2306      	movs	r3, #6
 8012b78:	e00a      	b.n	8012b90 <HAL_GPIO_Init+0x228>
 8012b7a:	2305      	movs	r3, #5
 8012b7c:	e008      	b.n	8012b90 <HAL_GPIO_Init+0x228>
 8012b7e:	2304      	movs	r3, #4
 8012b80:	e006      	b.n	8012b90 <HAL_GPIO_Init+0x228>
 8012b82:	2303      	movs	r3, #3
 8012b84:	e004      	b.n	8012b90 <HAL_GPIO_Init+0x228>
 8012b86:	2302      	movs	r3, #2
 8012b88:	e002      	b.n	8012b90 <HAL_GPIO_Init+0x228>
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	e000      	b.n	8012b90 <HAL_GPIO_Init+0x228>
 8012b8e:	2300      	movs	r3, #0
 8012b90:	69fa      	ldr	r2, [r7, #28]
 8012b92:	f002 0203 	and.w	r2, r2, #3
 8012b96:	0092      	lsls	r2, r2, #2
 8012b98:	4093      	lsls	r3, r2
 8012b9a:	69ba      	ldr	r2, [r7, #24]
 8012b9c:	4313      	orrs	r3, r2
 8012b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012ba0:	4934      	ldr	r1, [pc, #208]	; (8012c74 <HAL_GPIO_Init+0x30c>)
 8012ba2:	69fb      	ldr	r3, [r7, #28]
 8012ba4:	089b      	lsrs	r3, r3, #2
 8012ba6:	3302      	adds	r3, #2
 8012ba8:	69ba      	ldr	r2, [r7, #24]
 8012baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012bae:	4b3a      	ldr	r3, [pc, #232]	; (8012c98 <HAL_GPIO_Init+0x330>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	43db      	mvns	r3, r3
 8012bb8:	69ba      	ldr	r2, [r7, #24]
 8012bba:	4013      	ands	r3, r2
 8012bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	685b      	ldr	r3, [r3, #4]
 8012bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d003      	beq.n	8012bd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012bca:	69ba      	ldr	r2, [r7, #24]
 8012bcc:	693b      	ldr	r3, [r7, #16]
 8012bce:	4313      	orrs	r3, r2
 8012bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8012bd2:	4a31      	ldr	r2, [pc, #196]	; (8012c98 <HAL_GPIO_Init+0x330>)
 8012bd4:	69bb      	ldr	r3, [r7, #24]
 8012bd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012bd8:	4b2f      	ldr	r3, [pc, #188]	; (8012c98 <HAL_GPIO_Init+0x330>)
 8012bda:	685b      	ldr	r3, [r3, #4]
 8012bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012bde:	693b      	ldr	r3, [r7, #16]
 8012be0:	43db      	mvns	r3, r3
 8012be2:	69ba      	ldr	r2, [r7, #24]
 8012be4:	4013      	ands	r3, r2
 8012be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	685b      	ldr	r3, [r3, #4]
 8012bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d003      	beq.n	8012bfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8012bf4:	69ba      	ldr	r2, [r7, #24]
 8012bf6:	693b      	ldr	r3, [r7, #16]
 8012bf8:	4313      	orrs	r3, r2
 8012bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012bfc:	4a26      	ldr	r2, [pc, #152]	; (8012c98 <HAL_GPIO_Init+0x330>)
 8012bfe:	69bb      	ldr	r3, [r7, #24]
 8012c00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8012c02:	4b25      	ldr	r3, [pc, #148]	; (8012c98 <HAL_GPIO_Init+0x330>)
 8012c04:	689b      	ldr	r3, [r3, #8]
 8012c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012c08:	693b      	ldr	r3, [r7, #16]
 8012c0a:	43db      	mvns	r3, r3
 8012c0c:	69ba      	ldr	r2, [r7, #24]
 8012c0e:	4013      	ands	r3, r2
 8012c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	685b      	ldr	r3, [r3, #4]
 8012c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d003      	beq.n	8012c26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8012c1e:	69ba      	ldr	r2, [r7, #24]
 8012c20:	693b      	ldr	r3, [r7, #16]
 8012c22:	4313      	orrs	r3, r2
 8012c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8012c26:	4a1c      	ldr	r2, [pc, #112]	; (8012c98 <HAL_GPIO_Init+0x330>)
 8012c28:	69bb      	ldr	r3, [r7, #24]
 8012c2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012c2c:	4b1a      	ldr	r3, [pc, #104]	; (8012c98 <HAL_GPIO_Init+0x330>)
 8012c2e:	68db      	ldr	r3, [r3, #12]
 8012c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012c32:	693b      	ldr	r3, [r7, #16]
 8012c34:	43db      	mvns	r3, r3
 8012c36:	69ba      	ldr	r2, [r7, #24]
 8012c38:	4013      	ands	r3, r2
 8012c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	685b      	ldr	r3, [r3, #4]
 8012c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d003      	beq.n	8012c50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8012c48:	69ba      	ldr	r2, [r7, #24]
 8012c4a:	693b      	ldr	r3, [r7, #16]
 8012c4c:	4313      	orrs	r3, r2
 8012c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012c50:	4a11      	ldr	r2, [pc, #68]	; (8012c98 <HAL_GPIO_Init+0x330>)
 8012c52:	69bb      	ldr	r3, [r7, #24]
 8012c54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012c56:	69fb      	ldr	r3, [r7, #28]
 8012c58:	3301      	adds	r3, #1
 8012c5a:	61fb      	str	r3, [r7, #28]
 8012c5c:	69fb      	ldr	r3, [r7, #28]
 8012c5e:	2b0f      	cmp	r3, #15
 8012c60:	f67f ae90 	bls.w	8012984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8012c64:	bf00      	nop
 8012c66:	3724      	adds	r7, #36	; 0x24
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6e:	4770      	bx	lr
 8012c70:	40023800 	.word	0x40023800
 8012c74:	40013800 	.word	0x40013800
 8012c78:	40020000 	.word	0x40020000
 8012c7c:	40020400 	.word	0x40020400
 8012c80:	40020800 	.word	0x40020800
 8012c84:	40020c00 	.word	0x40020c00
 8012c88:	40021000 	.word	0x40021000
 8012c8c:	40021400 	.word	0x40021400
 8012c90:	40021800 	.word	0x40021800
 8012c94:	40021c00 	.word	0x40021c00
 8012c98:	40013c00 	.word	0x40013c00

08012c9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012c9c:	b480      	push	{r7}
 8012c9e:	b085      	sub	sp, #20
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
 8012ca4:	460b      	mov	r3, r1
 8012ca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	691a      	ldr	r2, [r3, #16]
 8012cac:	887b      	ldrh	r3, [r7, #2]
 8012cae:	4013      	ands	r3, r2
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d002      	beq.n	8012cba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012cb4:	2301      	movs	r3, #1
 8012cb6:	73fb      	strb	r3, [r7, #15]
 8012cb8:	e001      	b.n	8012cbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8012cba:	2300      	movs	r3, #0
 8012cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	3714      	adds	r7, #20
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cca:	4770      	bx	lr

08012ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012ccc:	b480      	push	{r7}
 8012cce:	b083      	sub	sp, #12
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	460b      	mov	r3, r1
 8012cd6:	807b      	strh	r3, [r7, #2]
 8012cd8:	4613      	mov	r3, r2
 8012cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012cdc:	787b      	ldrb	r3, [r7, #1]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d003      	beq.n	8012cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012ce2:	887a      	ldrh	r2, [r7, #2]
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012ce8:	e003      	b.n	8012cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012cea:	887b      	ldrh	r3, [r7, #2]
 8012cec:	041a      	lsls	r2, r3, #16
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	619a      	str	r2, [r3, #24]
}
 8012cf2:	bf00      	nop
 8012cf4:	370c      	adds	r7, #12
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfc:	4770      	bx	lr
	...

08012d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b086      	sub	sp, #24
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d101      	bne.n	8012d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012d0e:	2301      	movs	r3, #1
 8012d10:	e25b      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	f003 0301 	and.w	r3, r3, #1
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d075      	beq.n	8012e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012d1e:	4ba3      	ldr	r3, [pc, #652]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012d20:	689b      	ldr	r3, [r3, #8]
 8012d22:	f003 030c 	and.w	r3, r3, #12
 8012d26:	2b04      	cmp	r3, #4
 8012d28:	d00c      	beq.n	8012d44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012d2a:	4ba0      	ldr	r3, [pc, #640]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012d2c:	689b      	ldr	r3, [r3, #8]
 8012d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012d32:	2b08      	cmp	r3, #8
 8012d34:	d112      	bne.n	8012d5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012d36:	4b9d      	ldr	r3, [pc, #628]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012d38:	685b      	ldr	r3, [r3, #4]
 8012d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012d42:	d10b      	bne.n	8012d5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012d44:	4b99      	ldr	r3, [pc, #612]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d05b      	beq.n	8012e08 <HAL_RCC_OscConfig+0x108>
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	685b      	ldr	r3, [r3, #4]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d157      	bne.n	8012e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012d58:	2301      	movs	r3, #1
 8012d5a:	e236      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d64:	d106      	bne.n	8012d74 <HAL_RCC_OscConfig+0x74>
 8012d66:	4b91      	ldr	r3, [pc, #580]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	4a90      	ldr	r2, [pc, #576]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012d70:	6013      	str	r3, [r2, #0]
 8012d72:	e01d      	b.n	8012db0 <HAL_RCC_OscConfig+0xb0>
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	685b      	ldr	r3, [r3, #4]
 8012d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012d7c:	d10c      	bne.n	8012d98 <HAL_RCC_OscConfig+0x98>
 8012d7e:	4b8b      	ldr	r3, [pc, #556]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	4a8a      	ldr	r2, [pc, #552]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012d88:	6013      	str	r3, [r2, #0]
 8012d8a:	4b88      	ldr	r3, [pc, #544]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	4a87      	ldr	r2, [pc, #540]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012d94:	6013      	str	r3, [r2, #0]
 8012d96:	e00b      	b.n	8012db0 <HAL_RCC_OscConfig+0xb0>
 8012d98:	4b84      	ldr	r3, [pc, #528]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	4a83      	ldr	r2, [pc, #524]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012da2:	6013      	str	r3, [r2, #0]
 8012da4:	4b81      	ldr	r3, [pc, #516]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	4a80      	ldr	r2, [pc, #512]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	685b      	ldr	r3, [r3, #4]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d013      	beq.n	8012de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012db8:	f7fd ffa6 	bl	8010d08 <HAL_GetTick>
 8012dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012dbe:	e008      	b.n	8012dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012dc0:	f7fd ffa2 	bl	8010d08 <HAL_GetTick>
 8012dc4:	4602      	mov	r2, r0
 8012dc6:	693b      	ldr	r3, [r7, #16]
 8012dc8:	1ad3      	subs	r3, r2, r3
 8012dca:	2b64      	cmp	r3, #100	; 0x64
 8012dcc:	d901      	bls.n	8012dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012dce:	2303      	movs	r3, #3
 8012dd0:	e1fb      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012dd2:	4b76      	ldr	r3, [pc, #472]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d0f0      	beq.n	8012dc0 <HAL_RCC_OscConfig+0xc0>
 8012dde:	e014      	b.n	8012e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012de0:	f7fd ff92 	bl	8010d08 <HAL_GetTick>
 8012de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012de6:	e008      	b.n	8012dfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012de8:	f7fd ff8e 	bl	8010d08 <HAL_GetTick>
 8012dec:	4602      	mov	r2, r0
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	1ad3      	subs	r3, r2, r3
 8012df2:	2b64      	cmp	r3, #100	; 0x64
 8012df4:	d901      	bls.n	8012dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012df6:	2303      	movs	r3, #3
 8012df8:	e1e7      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012dfa:	4b6c      	ldr	r3, [pc, #432]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d1f0      	bne.n	8012de8 <HAL_RCC_OscConfig+0xe8>
 8012e06:	e000      	b.n	8012e0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	f003 0302 	and.w	r3, r3, #2
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d063      	beq.n	8012ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012e16:	4b65      	ldr	r3, [pc, #404]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012e18:	689b      	ldr	r3, [r3, #8]
 8012e1a:	f003 030c 	and.w	r3, r3, #12
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d00b      	beq.n	8012e3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012e22:	4b62      	ldr	r3, [pc, #392]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012e24:	689b      	ldr	r3, [r3, #8]
 8012e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012e2a:	2b08      	cmp	r3, #8
 8012e2c:	d11c      	bne.n	8012e68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012e2e:	4b5f      	ldr	r3, [pc, #380]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012e30:	685b      	ldr	r3, [r3, #4]
 8012e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d116      	bne.n	8012e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012e3a:	4b5c      	ldr	r3, [pc, #368]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	f003 0302 	and.w	r3, r3, #2
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d005      	beq.n	8012e52 <HAL_RCC_OscConfig+0x152>
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	68db      	ldr	r3, [r3, #12]
 8012e4a:	2b01      	cmp	r3, #1
 8012e4c:	d001      	beq.n	8012e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012e4e:	2301      	movs	r3, #1
 8012e50:	e1bb      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012e52:	4b56      	ldr	r3, [pc, #344]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	691b      	ldr	r3, [r3, #16]
 8012e5e:	00db      	lsls	r3, r3, #3
 8012e60:	4952      	ldr	r1, [pc, #328]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012e62:	4313      	orrs	r3, r2
 8012e64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012e66:	e03a      	b.n	8012ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	68db      	ldr	r3, [r3, #12]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d020      	beq.n	8012eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012e70:	4b4f      	ldr	r3, [pc, #316]	; (8012fb0 <HAL_RCC_OscConfig+0x2b0>)
 8012e72:	2201      	movs	r2, #1
 8012e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e76:	f7fd ff47 	bl	8010d08 <HAL_GetTick>
 8012e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012e7c:	e008      	b.n	8012e90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012e7e:	f7fd ff43 	bl	8010d08 <HAL_GetTick>
 8012e82:	4602      	mov	r2, r0
 8012e84:	693b      	ldr	r3, [r7, #16]
 8012e86:	1ad3      	subs	r3, r2, r3
 8012e88:	2b02      	cmp	r3, #2
 8012e8a:	d901      	bls.n	8012e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012e8c:	2303      	movs	r3, #3
 8012e8e:	e19c      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012e90:	4b46      	ldr	r3, [pc, #280]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	f003 0302 	and.w	r3, r3, #2
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d0f0      	beq.n	8012e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012e9c:	4b43      	ldr	r3, [pc, #268]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	691b      	ldr	r3, [r3, #16]
 8012ea8:	00db      	lsls	r3, r3, #3
 8012eaa:	4940      	ldr	r1, [pc, #256]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012eac:	4313      	orrs	r3, r2
 8012eae:	600b      	str	r3, [r1, #0]
 8012eb0:	e015      	b.n	8012ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012eb2:	4b3f      	ldr	r3, [pc, #252]	; (8012fb0 <HAL_RCC_OscConfig+0x2b0>)
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012eb8:	f7fd ff26 	bl	8010d08 <HAL_GetTick>
 8012ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012ebe:	e008      	b.n	8012ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012ec0:	f7fd ff22 	bl	8010d08 <HAL_GetTick>
 8012ec4:	4602      	mov	r2, r0
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	1ad3      	subs	r3, r2, r3
 8012eca:	2b02      	cmp	r3, #2
 8012ecc:	d901      	bls.n	8012ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012ece:	2303      	movs	r3, #3
 8012ed0:	e17b      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012ed2:	4b36      	ldr	r3, [pc, #216]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	f003 0302 	and.w	r3, r3, #2
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d1f0      	bne.n	8012ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	f003 0308 	and.w	r3, r3, #8
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d030      	beq.n	8012f4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	695b      	ldr	r3, [r3, #20]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d016      	beq.n	8012f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012ef2:	4b30      	ldr	r3, [pc, #192]	; (8012fb4 <HAL_RCC_OscConfig+0x2b4>)
 8012ef4:	2201      	movs	r2, #1
 8012ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012ef8:	f7fd ff06 	bl	8010d08 <HAL_GetTick>
 8012efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012efe:	e008      	b.n	8012f12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012f00:	f7fd ff02 	bl	8010d08 <HAL_GetTick>
 8012f04:	4602      	mov	r2, r0
 8012f06:	693b      	ldr	r3, [r7, #16]
 8012f08:	1ad3      	subs	r3, r2, r3
 8012f0a:	2b02      	cmp	r3, #2
 8012f0c:	d901      	bls.n	8012f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012f0e:	2303      	movs	r3, #3
 8012f10:	e15b      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012f12:	4b26      	ldr	r3, [pc, #152]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f16:	f003 0302 	and.w	r3, r3, #2
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d0f0      	beq.n	8012f00 <HAL_RCC_OscConfig+0x200>
 8012f1e:	e015      	b.n	8012f4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012f20:	4b24      	ldr	r3, [pc, #144]	; (8012fb4 <HAL_RCC_OscConfig+0x2b4>)
 8012f22:	2200      	movs	r2, #0
 8012f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012f26:	f7fd feef 	bl	8010d08 <HAL_GetTick>
 8012f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012f2c:	e008      	b.n	8012f40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012f2e:	f7fd feeb 	bl	8010d08 <HAL_GetTick>
 8012f32:	4602      	mov	r2, r0
 8012f34:	693b      	ldr	r3, [r7, #16]
 8012f36:	1ad3      	subs	r3, r2, r3
 8012f38:	2b02      	cmp	r3, #2
 8012f3a:	d901      	bls.n	8012f40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8012f3c:	2303      	movs	r3, #3
 8012f3e:	e144      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012f40:	4b1a      	ldr	r3, [pc, #104]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f44:	f003 0302 	and.w	r3, r3, #2
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d1f0      	bne.n	8012f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	f003 0304 	and.w	r3, r3, #4
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	f000 80a0 	beq.w	801309a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012f5e:	4b13      	ldr	r3, [pc, #76]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d10f      	bne.n	8012f8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	60bb      	str	r3, [r7, #8]
 8012f6e:	4b0f      	ldr	r3, [pc, #60]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f72:	4a0e      	ldr	r2, [pc, #56]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012f78:	6413      	str	r3, [r2, #64]	; 0x40
 8012f7a:	4b0c      	ldr	r3, [pc, #48]	; (8012fac <HAL_RCC_OscConfig+0x2ac>)
 8012f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012f82:	60bb      	str	r3, [r7, #8]
 8012f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012f86:	2301      	movs	r3, #1
 8012f88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012f8a:	4b0b      	ldr	r3, [pc, #44]	; (8012fb8 <HAL_RCC_OscConfig+0x2b8>)
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d121      	bne.n	8012fda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012f96:	4b08      	ldr	r3, [pc, #32]	; (8012fb8 <HAL_RCC_OscConfig+0x2b8>)
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	4a07      	ldr	r2, [pc, #28]	; (8012fb8 <HAL_RCC_OscConfig+0x2b8>)
 8012f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012fa2:	f7fd feb1 	bl	8010d08 <HAL_GetTick>
 8012fa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012fa8:	e011      	b.n	8012fce <HAL_RCC_OscConfig+0x2ce>
 8012faa:	bf00      	nop
 8012fac:	40023800 	.word	0x40023800
 8012fb0:	42470000 	.word	0x42470000
 8012fb4:	42470e80 	.word	0x42470e80
 8012fb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012fbc:	f7fd fea4 	bl	8010d08 <HAL_GetTick>
 8012fc0:	4602      	mov	r2, r0
 8012fc2:	693b      	ldr	r3, [r7, #16]
 8012fc4:	1ad3      	subs	r3, r2, r3
 8012fc6:	2b02      	cmp	r3, #2
 8012fc8:	d901      	bls.n	8012fce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8012fca:	2303      	movs	r3, #3
 8012fcc:	e0fd      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012fce:	4b81      	ldr	r3, [pc, #516]	; (80131d4 <HAL_RCC_OscConfig+0x4d4>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d0f0      	beq.n	8012fbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	689b      	ldr	r3, [r3, #8]
 8012fde:	2b01      	cmp	r3, #1
 8012fe0:	d106      	bne.n	8012ff0 <HAL_RCC_OscConfig+0x2f0>
 8012fe2:	4b7d      	ldr	r3, [pc, #500]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 8012fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fe6:	4a7c      	ldr	r2, [pc, #496]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 8012fe8:	f043 0301 	orr.w	r3, r3, #1
 8012fec:	6713      	str	r3, [r2, #112]	; 0x70
 8012fee:	e01c      	b.n	801302a <HAL_RCC_OscConfig+0x32a>
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	689b      	ldr	r3, [r3, #8]
 8012ff4:	2b05      	cmp	r3, #5
 8012ff6:	d10c      	bne.n	8013012 <HAL_RCC_OscConfig+0x312>
 8012ff8:	4b77      	ldr	r3, [pc, #476]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 8012ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ffc:	4a76      	ldr	r2, [pc, #472]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 8012ffe:	f043 0304 	orr.w	r3, r3, #4
 8013002:	6713      	str	r3, [r2, #112]	; 0x70
 8013004:	4b74      	ldr	r3, [pc, #464]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 8013006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013008:	4a73      	ldr	r2, [pc, #460]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 801300a:	f043 0301 	orr.w	r3, r3, #1
 801300e:	6713      	str	r3, [r2, #112]	; 0x70
 8013010:	e00b      	b.n	801302a <HAL_RCC_OscConfig+0x32a>
 8013012:	4b71      	ldr	r3, [pc, #452]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 8013014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013016:	4a70      	ldr	r2, [pc, #448]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 8013018:	f023 0301 	bic.w	r3, r3, #1
 801301c:	6713      	str	r3, [r2, #112]	; 0x70
 801301e:	4b6e      	ldr	r3, [pc, #440]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 8013020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013022:	4a6d      	ldr	r2, [pc, #436]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 8013024:	f023 0304 	bic.w	r3, r3, #4
 8013028:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	689b      	ldr	r3, [r3, #8]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d015      	beq.n	801305e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013032:	f7fd fe69 	bl	8010d08 <HAL_GetTick>
 8013036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013038:	e00a      	b.n	8013050 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801303a:	f7fd fe65 	bl	8010d08 <HAL_GetTick>
 801303e:	4602      	mov	r2, r0
 8013040:	693b      	ldr	r3, [r7, #16]
 8013042:	1ad3      	subs	r3, r2, r3
 8013044:	f241 3288 	movw	r2, #5000	; 0x1388
 8013048:	4293      	cmp	r3, r2
 801304a:	d901      	bls.n	8013050 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801304c:	2303      	movs	r3, #3
 801304e:	e0bc      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013050:	4b61      	ldr	r3, [pc, #388]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 8013052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013054:	f003 0302 	and.w	r3, r3, #2
 8013058:	2b00      	cmp	r3, #0
 801305a:	d0ee      	beq.n	801303a <HAL_RCC_OscConfig+0x33a>
 801305c:	e014      	b.n	8013088 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801305e:	f7fd fe53 	bl	8010d08 <HAL_GetTick>
 8013062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013064:	e00a      	b.n	801307c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013066:	f7fd fe4f 	bl	8010d08 <HAL_GetTick>
 801306a:	4602      	mov	r2, r0
 801306c:	693b      	ldr	r3, [r7, #16]
 801306e:	1ad3      	subs	r3, r2, r3
 8013070:	f241 3288 	movw	r2, #5000	; 0x1388
 8013074:	4293      	cmp	r3, r2
 8013076:	d901      	bls.n	801307c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8013078:	2303      	movs	r3, #3
 801307a:	e0a6      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801307c:	4b56      	ldr	r3, [pc, #344]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 801307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013080:	f003 0302 	and.w	r3, r3, #2
 8013084:	2b00      	cmp	r3, #0
 8013086:	d1ee      	bne.n	8013066 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013088:	7dfb      	ldrb	r3, [r7, #23]
 801308a:	2b01      	cmp	r3, #1
 801308c:	d105      	bne.n	801309a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801308e:	4b52      	ldr	r3, [pc, #328]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 8013090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013092:	4a51      	ldr	r2, [pc, #324]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 8013094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013098:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	699b      	ldr	r3, [r3, #24]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	f000 8092 	beq.w	80131c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80130a4:	4b4c      	ldr	r3, [pc, #304]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 80130a6:	689b      	ldr	r3, [r3, #8]
 80130a8:	f003 030c 	and.w	r3, r3, #12
 80130ac:	2b08      	cmp	r3, #8
 80130ae:	d05c      	beq.n	801316a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	699b      	ldr	r3, [r3, #24]
 80130b4:	2b02      	cmp	r3, #2
 80130b6:	d141      	bne.n	801313c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80130b8:	4b48      	ldr	r3, [pc, #288]	; (80131dc <HAL_RCC_OscConfig+0x4dc>)
 80130ba:	2200      	movs	r2, #0
 80130bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80130be:	f7fd fe23 	bl	8010d08 <HAL_GetTick>
 80130c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80130c4:	e008      	b.n	80130d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80130c6:	f7fd fe1f 	bl	8010d08 <HAL_GetTick>
 80130ca:	4602      	mov	r2, r0
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	1ad3      	subs	r3, r2, r3
 80130d0:	2b02      	cmp	r3, #2
 80130d2:	d901      	bls.n	80130d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80130d4:	2303      	movs	r3, #3
 80130d6:	e078      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80130d8:	4b3f      	ldr	r3, [pc, #252]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d1f0      	bne.n	80130c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	69da      	ldr	r2, [r3, #28]
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	6a1b      	ldr	r3, [r3, #32]
 80130ec:	431a      	orrs	r2, r3
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130f2:	019b      	lsls	r3, r3, #6
 80130f4:	431a      	orrs	r2, r3
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130fa:	085b      	lsrs	r3, r3, #1
 80130fc:	3b01      	subs	r3, #1
 80130fe:	041b      	lsls	r3, r3, #16
 8013100:	431a      	orrs	r2, r3
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013106:	061b      	lsls	r3, r3, #24
 8013108:	4933      	ldr	r1, [pc, #204]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 801310a:	4313      	orrs	r3, r2
 801310c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801310e:	4b33      	ldr	r3, [pc, #204]	; (80131dc <HAL_RCC_OscConfig+0x4dc>)
 8013110:	2201      	movs	r2, #1
 8013112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013114:	f7fd fdf8 	bl	8010d08 <HAL_GetTick>
 8013118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801311a:	e008      	b.n	801312e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801311c:	f7fd fdf4 	bl	8010d08 <HAL_GetTick>
 8013120:	4602      	mov	r2, r0
 8013122:	693b      	ldr	r3, [r7, #16]
 8013124:	1ad3      	subs	r3, r2, r3
 8013126:	2b02      	cmp	r3, #2
 8013128:	d901      	bls.n	801312e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801312a:	2303      	movs	r3, #3
 801312c:	e04d      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801312e:	4b2a      	ldr	r3, [pc, #168]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013136:	2b00      	cmp	r3, #0
 8013138:	d0f0      	beq.n	801311c <HAL_RCC_OscConfig+0x41c>
 801313a:	e045      	b.n	80131c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801313c:	4b27      	ldr	r3, [pc, #156]	; (80131dc <HAL_RCC_OscConfig+0x4dc>)
 801313e:	2200      	movs	r2, #0
 8013140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013142:	f7fd fde1 	bl	8010d08 <HAL_GetTick>
 8013146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013148:	e008      	b.n	801315c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801314a:	f7fd fddd 	bl	8010d08 <HAL_GetTick>
 801314e:	4602      	mov	r2, r0
 8013150:	693b      	ldr	r3, [r7, #16]
 8013152:	1ad3      	subs	r3, r2, r3
 8013154:	2b02      	cmp	r3, #2
 8013156:	d901      	bls.n	801315c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8013158:	2303      	movs	r3, #3
 801315a:	e036      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801315c:	4b1e      	ldr	r3, [pc, #120]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013164:	2b00      	cmp	r3, #0
 8013166:	d1f0      	bne.n	801314a <HAL_RCC_OscConfig+0x44a>
 8013168:	e02e      	b.n	80131c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	699b      	ldr	r3, [r3, #24]
 801316e:	2b01      	cmp	r3, #1
 8013170:	d101      	bne.n	8013176 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8013172:	2301      	movs	r3, #1
 8013174:	e029      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013176:	4b18      	ldr	r3, [pc, #96]	; (80131d8 <HAL_RCC_OscConfig+0x4d8>)
 8013178:	685b      	ldr	r3, [r3, #4]
 801317a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	69db      	ldr	r3, [r3, #28]
 8013186:	429a      	cmp	r2, r3
 8013188:	d11c      	bne.n	80131c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013194:	429a      	cmp	r2, r3
 8013196:	d115      	bne.n	80131c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8013198:	68fa      	ldr	r2, [r7, #12]
 801319a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801319e:	4013      	ands	r3, r2
 80131a0:	687a      	ldr	r2, [r7, #4]
 80131a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80131a4:	4293      	cmp	r3, r2
 80131a6:	d10d      	bne.n	80131c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d106      	bne.n	80131c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80131c0:	429a      	cmp	r2, r3
 80131c2:	d001      	beq.n	80131c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80131c4:	2301      	movs	r3, #1
 80131c6:	e000      	b.n	80131ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80131c8:	2300      	movs	r3, #0
}
 80131ca:	4618      	mov	r0, r3
 80131cc:	3718      	adds	r7, #24
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}
 80131d2:	bf00      	nop
 80131d4:	40007000 	.word	0x40007000
 80131d8:	40023800 	.word	0x40023800
 80131dc:	42470060 	.word	0x42470060

080131e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b084      	sub	sp, #16
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
 80131e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d101      	bne.n	80131f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80131f0:	2301      	movs	r3, #1
 80131f2:	e0cc      	b.n	801338e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80131f4:	4b68      	ldr	r3, [pc, #416]	; (8013398 <HAL_RCC_ClockConfig+0x1b8>)
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	f003 030f 	and.w	r3, r3, #15
 80131fc:	683a      	ldr	r2, [r7, #0]
 80131fe:	429a      	cmp	r2, r3
 8013200:	d90c      	bls.n	801321c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013202:	4b65      	ldr	r3, [pc, #404]	; (8013398 <HAL_RCC_ClockConfig+0x1b8>)
 8013204:	683a      	ldr	r2, [r7, #0]
 8013206:	b2d2      	uxtb	r2, r2
 8013208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801320a:	4b63      	ldr	r3, [pc, #396]	; (8013398 <HAL_RCC_ClockConfig+0x1b8>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	f003 030f 	and.w	r3, r3, #15
 8013212:	683a      	ldr	r2, [r7, #0]
 8013214:	429a      	cmp	r2, r3
 8013216:	d001      	beq.n	801321c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013218:	2301      	movs	r3, #1
 801321a:	e0b8      	b.n	801338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	f003 0302 	and.w	r3, r3, #2
 8013224:	2b00      	cmp	r3, #0
 8013226:	d020      	beq.n	801326a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	f003 0304 	and.w	r3, r3, #4
 8013230:	2b00      	cmp	r3, #0
 8013232:	d005      	beq.n	8013240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013234:	4b59      	ldr	r3, [pc, #356]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 8013236:	689b      	ldr	r3, [r3, #8]
 8013238:	4a58      	ldr	r2, [pc, #352]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 801323a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801323e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	f003 0308 	and.w	r3, r3, #8
 8013248:	2b00      	cmp	r3, #0
 801324a:	d005      	beq.n	8013258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801324c:	4b53      	ldr	r3, [pc, #332]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 801324e:	689b      	ldr	r3, [r3, #8]
 8013250:	4a52      	ldr	r2, [pc, #328]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 8013252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013258:	4b50      	ldr	r3, [pc, #320]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 801325a:	689b      	ldr	r3, [r3, #8]
 801325c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	689b      	ldr	r3, [r3, #8]
 8013264:	494d      	ldr	r1, [pc, #308]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 8013266:	4313      	orrs	r3, r2
 8013268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	f003 0301 	and.w	r3, r3, #1
 8013272:	2b00      	cmp	r3, #0
 8013274:	d044      	beq.n	8013300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	685b      	ldr	r3, [r3, #4]
 801327a:	2b01      	cmp	r3, #1
 801327c:	d107      	bne.n	801328e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801327e:	4b47      	ldr	r3, [pc, #284]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013286:	2b00      	cmp	r3, #0
 8013288:	d119      	bne.n	80132be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801328a:	2301      	movs	r3, #1
 801328c:	e07f      	b.n	801338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	685b      	ldr	r3, [r3, #4]
 8013292:	2b02      	cmp	r3, #2
 8013294:	d003      	beq.n	801329e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801329a:	2b03      	cmp	r3, #3
 801329c:	d107      	bne.n	80132ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801329e:	4b3f      	ldr	r3, [pc, #252]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d109      	bne.n	80132be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80132aa:	2301      	movs	r3, #1
 80132ac:	e06f      	b.n	801338e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80132ae:	4b3b      	ldr	r3, [pc, #236]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	f003 0302 	and.w	r3, r3, #2
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d101      	bne.n	80132be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80132ba:	2301      	movs	r3, #1
 80132bc:	e067      	b.n	801338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80132be:	4b37      	ldr	r3, [pc, #220]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 80132c0:	689b      	ldr	r3, [r3, #8]
 80132c2:	f023 0203 	bic.w	r2, r3, #3
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	685b      	ldr	r3, [r3, #4]
 80132ca:	4934      	ldr	r1, [pc, #208]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 80132cc:	4313      	orrs	r3, r2
 80132ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80132d0:	f7fd fd1a 	bl	8010d08 <HAL_GetTick>
 80132d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80132d6:	e00a      	b.n	80132ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80132d8:	f7fd fd16 	bl	8010d08 <HAL_GetTick>
 80132dc:	4602      	mov	r2, r0
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	1ad3      	subs	r3, r2, r3
 80132e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80132e6:	4293      	cmp	r3, r2
 80132e8:	d901      	bls.n	80132ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80132ea:	2303      	movs	r3, #3
 80132ec:	e04f      	b.n	801338e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80132ee:	4b2b      	ldr	r3, [pc, #172]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 80132f0:	689b      	ldr	r3, [r3, #8]
 80132f2:	f003 020c 	and.w	r2, r3, #12
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	685b      	ldr	r3, [r3, #4]
 80132fa:	009b      	lsls	r3, r3, #2
 80132fc:	429a      	cmp	r2, r3
 80132fe:	d1eb      	bne.n	80132d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013300:	4b25      	ldr	r3, [pc, #148]	; (8013398 <HAL_RCC_ClockConfig+0x1b8>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	f003 030f 	and.w	r3, r3, #15
 8013308:	683a      	ldr	r2, [r7, #0]
 801330a:	429a      	cmp	r2, r3
 801330c:	d20c      	bcs.n	8013328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801330e:	4b22      	ldr	r3, [pc, #136]	; (8013398 <HAL_RCC_ClockConfig+0x1b8>)
 8013310:	683a      	ldr	r2, [r7, #0]
 8013312:	b2d2      	uxtb	r2, r2
 8013314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013316:	4b20      	ldr	r3, [pc, #128]	; (8013398 <HAL_RCC_ClockConfig+0x1b8>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	f003 030f 	and.w	r3, r3, #15
 801331e:	683a      	ldr	r2, [r7, #0]
 8013320:	429a      	cmp	r2, r3
 8013322:	d001      	beq.n	8013328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013324:	2301      	movs	r3, #1
 8013326:	e032      	b.n	801338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	f003 0304 	and.w	r3, r3, #4
 8013330:	2b00      	cmp	r3, #0
 8013332:	d008      	beq.n	8013346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013334:	4b19      	ldr	r3, [pc, #100]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 8013336:	689b      	ldr	r3, [r3, #8]
 8013338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	68db      	ldr	r3, [r3, #12]
 8013340:	4916      	ldr	r1, [pc, #88]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 8013342:	4313      	orrs	r3, r2
 8013344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	f003 0308 	and.w	r3, r3, #8
 801334e:	2b00      	cmp	r3, #0
 8013350:	d009      	beq.n	8013366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013352:	4b12      	ldr	r3, [pc, #72]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 8013354:	689b      	ldr	r3, [r3, #8]
 8013356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	691b      	ldr	r3, [r3, #16]
 801335e:	00db      	lsls	r3, r3, #3
 8013360:	490e      	ldr	r1, [pc, #56]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 8013362:	4313      	orrs	r3, r2
 8013364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013366:	f000 f821 	bl	80133ac <HAL_RCC_GetSysClockFreq>
 801336a:	4601      	mov	r1, r0
 801336c:	4b0b      	ldr	r3, [pc, #44]	; (801339c <HAL_RCC_ClockConfig+0x1bc>)
 801336e:	689b      	ldr	r3, [r3, #8]
 8013370:	091b      	lsrs	r3, r3, #4
 8013372:	f003 030f 	and.w	r3, r3, #15
 8013376:	4a0a      	ldr	r2, [pc, #40]	; (80133a0 <HAL_RCC_ClockConfig+0x1c0>)
 8013378:	5cd3      	ldrb	r3, [r2, r3]
 801337a:	fa21 f303 	lsr.w	r3, r1, r3
 801337e:	4a09      	ldr	r2, [pc, #36]	; (80133a4 <HAL_RCC_ClockConfig+0x1c4>)
 8013380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8013382:	4b09      	ldr	r3, [pc, #36]	; (80133a8 <HAL_RCC_ClockConfig+0x1c8>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	4618      	mov	r0, r3
 8013388:	f7fd fc7a 	bl	8010c80 <HAL_InitTick>

  return HAL_OK;
 801338c:	2300      	movs	r3, #0
}
 801338e:	4618      	mov	r0, r3
 8013390:	3710      	adds	r7, #16
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}
 8013396:	bf00      	nop
 8013398:	40023c00 	.word	0x40023c00
 801339c:	40023800 	.word	0x40023800
 80133a0:	08018a14 	.word	0x08018a14
 80133a4:	20000080 	.word	0x20000080
 80133a8:	20000084 	.word	0x20000084

080133ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80133ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133ae:	b085      	sub	sp, #20
 80133b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80133b2:	2300      	movs	r3, #0
 80133b4:	607b      	str	r3, [r7, #4]
 80133b6:	2300      	movs	r3, #0
 80133b8:	60fb      	str	r3, [r7, #12]
 80133ba:	2300      	movs	r3, #0
 80133bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80133be:	2300      	movs	r3, #0
 80133c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80133c2:	4b63      	ldr	r3, [pc, #396]	; (8013550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80133c4:	689b      	ldr	r3, [r3, #8]
 80133c6:	f003 030c 	and.w	r3, r3, #12
 80133ca:	2b04      	cmp	r3, #4
 80133cc:	d007      	beq.n	80133de <HAL_RCC_GetSysClockFreq+0x32>
 80133ce:	2b08      	cmp	r3, #8
 80133d0:	d008      	beq.n	80133e4 <HAL_RCC_GetSysClockFreq+0x38>
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	f040 80b4 	bne.w	8013540 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80133d8:	4b5e      	ldr	r3, [pc, #376]	; (8013554 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80133da:	60bb      	str	r3, [r7, #8]
       break;
 80133dc:	e0b3      	b.n	8013546 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80133de:	4b5e      	ldr	r3, [pc, #376]	; (8013558 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80133e0:	60bb      	str	r3, [r7, #8]
      break;
 80133e2:	e0b0      	b.n	8013546 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80133e4:	4b5a      	ldr	r3, [pc, #360]	; (8013550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80133ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80133ee:	4b58      	ldr	r3, [pc, #352]	; (8013550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80133f0:	685b      	ldr	r3, [r3, #4]
 80133f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d04a      	beq.n	8013490 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80133fa:	4b55      	ldr	r3, [pc, #340]	; (8013550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80133fc:	685b      	ldr	r3, [r3, #4]
 80133fe:	099b      	lsrs	r3, r3, #6
 8013400:	f04f 0400 	mov.w	r4, #0
 8013404:	f240 11ff 	movw	r1, #511	; 0x1ff
 8013408:	f04f 0200 	mov.w	r2, #0
 801340c:	ea03 0501 	and.w	r5, r3, r1
 8013410:	ea04 0602 	and.w	r6, r4, r2
 8013414:	4629      	mov	r1, r5
 8013416:	4632      	mov	r2, r6
 8013418:	f04f 0300 	mov.w	r3, #0
 801341c:	f04f 0400 	mov.w	r4, #0
 8013420:	0154      	lsls	r4, r2, #5
 8013422:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013426:	014b      	lsls	r3, r1, #5
 8013428:	4619      	mov	r1, r3
 801342a:	4622      	mov	r2, r4
 801342c:	1b49      	subs	r1, r1, r5
 801342e:	eb62 0206 	sbc.w	r2, r2, r6
 8013432:	f04f 0300 	mov.w	r3, #0
 8013436:	f04f 0400 	mov.w	r4, #0
 801343a:	0194      	lsls	r4, r2, #6
 801343c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8013440:	018b      	lsls	r3, r1, #6
 8013442:	1a5b      	subs	r3, r3, r1
 8013444:	eb64 0402 	sbc.w	r4, r4, r2
 8013448:	f04f 0100 	mov.w	r1, #0
 801344c:	f04f 0200 	mov.w	r2, #0
 8013450:	00e2      	lsls	r2, r4, #3
 8013452:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8013456:	00d9      	lsls	r1, r3, #3
 8013458:	460b      	mov	r3, r1
 801345a:	4614      	mov	r4, r2
 801345c:	195b      	adds	r3, r3, r5
 801345e:	eb44 0406 	adc.w	r4, r4, r6
 8013462:	f04f 0100 	mov.w	r1, #0
 8013466:	f04f 0200 	mov.w	r2, #0
 801346a:	0262      	lsls	r2, r4, #9
 801346c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8013470:	0259      	lsls	r1, r3, #9
 8013472:	460b      	mov	r3, r1
 8013474:	4614      	mov	r4, r2
 8013476:	4618      	mov	r0, r3
 8013478:	4621      	mov	r1, r4
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	f04f 0400 	mov.w	r4, #0
 8013480:	461a      	mov	r2, r3
 8013482:	4623      	mov	r3, r4
 8013484:	f7f5 fb18 	bl	8008ab8 <__aeabi_uldivmod>
 8013488:	4603      	mov	r3, r0
 801348a:	460c      	mov	r4, r1
 801348c:	60fb      	str	r3, [r7, #12]
 801348e:	e049      	b.n	8013524 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013490:	4b2f      	ldr	r3, [pc, #188]	; (8013550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013492:	685b      	ldr	r3, [r3, #4]
 8013494:	099b      	lsrs	r3, r3, #6
 8013496:	f04f 0400 	mov.w	r4, #0
 801349a:	f240 11ff 	movw	r1, #511	; 0x1ff
 801349e:	f04f 0200 	mov.w	r2, #0
 80134a2:	ea03 0501 	and.w	r5, r3, r1
 80134a6:	ea04 0602 	and.w	r6, r4, r2
 80134aa:	4629      	mov	r1, r5
 80134ac:	4632      	mov	r2, r6
 80134ae:	f04f 0300 	mov.w	r3, #0
 80134b2:	f04f 0400 	mov.w	r4, #0
 80134b6:	0154      	lsls	r4, r2, #5
 80134b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80134bc:	014b      	lsls	r3, r1, #5
 80134be:	4619      	mov	r1, r3
 80134c0:	4622      	mov	r2, r4
 80134c2:	1b49      	subs	r1, r1, r5
 80134c4:	eb62 0206 	sbc.w	r2, r2, r6
 80134c8:	f04f 0300 	mov.w	r3, #0
 80134cc:	f04f 0400 	mov.w	r4, #0
 80134d0:	0194      	lsls	r4, r2, #6
 80134d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80134d6:	018b      	lsls	r3, r1, #6
 80134d8:	1a5b      	subs	r3, r3, r1
 80134da:	eb64 0402 	sbc.w	r4, r4, r2
 80134de:	f04f 0100 	mov.w	r1, #0
 80134e2:	f04f 0200 	mov.w	r2, #0
 80134e6:	00e2      	lsls	r2, r4, #3
 80134e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80134ec:	00d9      	lsls	r1, r3, #3
 80134ee:	460b      	mov	r3, r1
 80134f0:	4614      	mov	r4, r2
 80134f2:	195b      	adds	r3, r3, r5
 80134f4:	eb44 0406 	adc.w	r4, r4, r6
 80134f8:	f04f 0100 	mov.w	r1, #0
 80134fc:	f04f 0200 	mov.w	r2, #0
 8013500:	02a2      	lsls	r2, r4, #10
 8013502:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8013506:	0299      	lsls	r1, r3, #10
 8013508:	460b      	mov	r3, r1
 801350a:	4614      	mov	r4, r2
 801350c:	4618      	mov	r0, r3
 801350e:	4621      	mov	r1, r4
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	f04f 0400 	mov.w	r4, #0
 8013516:	461a      	mov	r2, r3
 8013518:	4623      	mov	r3, r4
 801351a:	f7f5 facd 	bl	8008ab8 <__aeabi_uldivmod>
 801351e:	4603      	mov	r3, r0
 8013520:	460c      	mov	r4, r1
 8013522:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013524:	4b0a      	ldr	r3, [pc, #40]	; (8013550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013526:	685b      	ldr	r3, [r3, #4]
 8013528:	0c1b      	lsrs	r3, r3, #16
 801352a:	f003 0303 	and.w	r3, r3, #3
 801352e:	3301      	adds	r3, #1
 8013530:	005b      	lsls	r3, r3, #1
 8013532:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8013534:	68fa      	ldr	r2, [r7, #12]
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	fbb2 f3f3 	udiv	r3, r2, r3
 801353c:	60bb      	str	r3, [r7, #8]
      break;
 801353e:	e002      	b.n	8013546 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013540:	4b04      	ldr	r3, [pc, #16]	; (8013554 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8013542:	60bb      	str	r3, [r7, #8]
      break;
 8013544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013546:	68bb      	ldr	r3, [r7, #8]
}
 8013548:	4618      	mov	r0, r3
 801354a:	3714      	adds	r7, #20
 801354c:	46bd      	mov	sp, r7
 801354e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013550:	40023800 	.word	0x40023800
 8013554:	00f42400 	.word	0x00f42400
 8013558:	007a1200 	.word	0x007a1200

0801355c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801355c:	b480      	push	{r7}
 801355e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013560:	4b03      	ldr	r3, [pc, #12]	; (8013570 <HAL_RCC_GetHCLKFreq+0x14>)
 8013562:	681b      	ldr	r3, [r3, #0]
}
 8013564:	4618      	mov	r0, r3
 8013566:	46bd      	mov	sp, r7
 8013568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356c:	4770      	bx	lr
 801356e:	bf00      	nop
 8013570:	20000080 	.word	0x20000080

08013574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013578:	f7ff fff0 	bl	801355c <HAL_RCC_GetHCLKFreq>
 801357c:	4601      	mov	r1, r0
 801357e:	4b05      	ldr	r3, [pc, #20]	; (8013594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013580:	689b      	ldr	r3, [r3, #8]
 8013582:	0a9b      	lsrs	r3, r3, #10
 8013584:	f003 0307 	and.w	r3, r3, #7
 8013588:	4a03      	ldr	r2, [pc, #12]	; (8013598 <HAL_RCC_GetPCLK1Freq+0x24>)
 801358a:	5cd3      	ldrb	r3, [r2, r3]
 801358c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8013590:	4618      	mov	r0, r3
 8013592:	bd80      	pop	{r7, pc}
 8013594:	40023800 	.word	0x40023800
 8013598:	08018a24 	.word	0x08018a24

0801359c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80135a0:	f7ff ffdc 	bl	801355c <HAL_RCC_GetHCLKFreq>
 80135a4:	4601      	mov	r1, r0
 80135a6:	4b05      	ldr	r3, [pc, #20]	; (80135bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80135a8:	689b      	ldr	r3, [r3, #8]
 80135aa:	0b5b      	lsrs	r3, r3, #13
 80135ac:	f003 0307 	and.w	r3, r3, #7
 80135b0:	4a03      	ldr	r2, [pc, #12]	; (80135c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80135b2:	5cd3      	ldrb	r3, [r2, r3]
 80135b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	bd80      	pop	{r7, pc}
 80135bc:	40023800 	.word	0x40023800
 80135c0:	08018a24 	.word	0x08018a24

080135c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b082      	sub	sp, #8
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d101      	bne.n	80135d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80135d2:	2301      	movs	r3, #1
 80135d4:	e056      	b.n	8013684 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	2200      	movs	r2, #0
 80135da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80135e2:	b2db      	uxtb	r3, r3
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d106      	bne.n	80135f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2200      	movs	r2, #0
 80135ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80135f0:	6878      	ldr	r0, [r7, #4]
 80135f2:	f7fc ff4b 	bl	801048c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	2202      	movs	r2, #2
 80135fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	681a      	ldr	r2, [r3, #0]
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801360c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	685a      	ldr	r2, [r3, #4]
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	689b      	ldr	r3, [r3, #8]
 8013616:	431a      	orrs	r2, r3
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	68db      	ldr	r3, [r3, #12]
 801361c:	431a      	orrs	r2, r3
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	691b      	ldr	r3, [r3, #16]
 8013622:	431a      	orrs	r2, r3
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	695b      	ldr	r3, [r3, #20]
 8013628:	431a      	orrs	r2, r3
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	699b      	ldr	r3, [r3, #24]
 801362e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013632:	431a      	orrs	r2, r3
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	69db      	ldr	r3, [r3, #28]
 8013638:	431a      	orrs	r2, r3
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	6a1b      	ldr	r3, [r3, #32]
 801363e:	ea42 0103 	orr.w	r1, r2, r3
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	430a      	orrs	r2, r1
 801364c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	699b      	ldr	r3, [r3, #24]
 8013652:	0c1b      	lsrs	r3, r3, #16
 8013654:	f003 0104 	and.w	r1, r3, #4
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	430a      	orrs	r2, r1
 8013662:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	69da      	ldr	r2, [r3, #28]
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013672:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	2200      	movs	r2, #0
 8013678:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	2201      	movs	r2, #1
 801367e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8013682:	2300      	movs	r3, #0
}
 8013684:	4618      	mov	r0, r3
 8013686:	3708      	adds	r7, #8
 8013688:	46bd      	mov	sp, r7
 801368a:	bd80      	pop	{r7, pc}

0801368c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b088      	sub	sp, #32
 8013690:	af00      	add	r7, sp, #0
 8013692:	60f8      	str	r0, [r7, #12]
 8013694:	60b9      	str	r1, [r7, #8]
 8013696:	603b      	str	r3, [r7, #0]
 8013698:	4613      	mov	r3, r2
 801369a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801369c:	2300      	movs	r3, #0
 801369e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80136a6:	2b01      	cmp	r3, #1
 80136a8:	d101      	bne.n	80136ae <HAL_SPI_Transmit+0x22>
 80136aa:	2302      	movs	r3, #2
 80136ac:	e11e      	b.n	80138ec <HAL_SPI_Transmit+0x260>
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	2201      	movs	r2, #1
 80136b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80136b6:	f7fd fb27 	bl	8010d08 <HAL_GetTick>
 80136ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80136bc:	88fb      	ldrh	r3, [r7, #6]
 80136be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80136c6:	b2db      	uxtb	r3, r3
 80136c8:	2b01      	cmp	r3, #1
 80136ca:	d002      	beq.n	80136d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80136cc:	2302      	movs	r3, #2
 80136ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80136d0:	e103      	b.n	80138da <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80136d2:	68bb      	ldr	r3, [r7, #8]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d002      	beq.n	80136de <HAL_SPI_Transmit+0x52>
 80136d8:	88fb      	ldrh	r3, [r7, #6]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d102      	bne.n	80136e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80136de:	2301      	movs	r3, #1
 80136e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80136e2:	e0fa      	b.n	80138da <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	2203      	movs	r2, #3
 80136e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	2200      	movs	r2, #0
 80136f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	68ba      	ldr	r2, [r7, #8]
 80136f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	88fa      	ldrh	r2, [r7, #6]
 80136fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	88fa      	ldrh	r2, [r7, #6]
 8013702:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	2200      	movs	r2, #0
 8013708:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	2200      	movs	r2, #0
 801370e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	2200      	movs	r2, #0
 8013714:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	2200      	movs	r2, #0
 801371a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	2200      	movs	r2, #0
 8013720:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	689b      	ldr	r3, [r3, #8]
 8013726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801372a:	d107      	bne.n	801373c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	681a      	ldr	r2, [r3, #0]
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801373a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013746:	2b40      	cmp	r3, #64	; 0x40
 8013748:	d007      	beq.n	801375a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	681a      	ldr	r2, [r3, #0]
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013758:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	68db      	ldr	r3, [r3, #12]
 801375e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013762:	d14b      	bne.n	80137fc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	685b      	ldr	r3, [r3, #4]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d002      	beq.n	8013772 <HAL_SPI_Transmit+0xe6>
 801376c:	8afb      	ldrh	r3, [r7, #22]
 801376e:	2b01      	cmp	r3, #1
 8013770:	d13e      	bne.n	80137f0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013776:	881a      	ldrh	r2, [r3, #0]
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013782:	1c9a      	adds	r2, r3, #2
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801378c:	b29b      	uxth	r3, r3
 801378e:	3b01      	subs	r3, #1
 8013790:	b29a      	uxth	r2, r3
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013796:	e02b      	b.n	80137f0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	689b      	ldr	r3, [r3, #8]
 801379e:	f003 0302 	and.w	r3, r3, #2
 80137a2:	2b02      	cmp	r3, #2
 80137a4:	d112      	bne.n	80137cc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137aa:	881a      	ldrh	r2, [r3, #0]
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137b6:	1c9a      	adds	r2, r3, #2
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80137c0:	b29b      	uxth	r3, r3
 80137c2:	3b01      	subs	r3, #1
 80137c4:	b29a      	uxth	r2, r3
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80137ca:	e011      	b.n	80137f0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80137cc:	f7fd fa9c 	bl	8010d08 <HAL_GetTick>
 80137d0:	4602      	mov	r2, r0
 80137d2:	69bb      	ldr	r3, [r7, #24]
 80137d4:	1ad3      	subs	r3, r2, r3
 80137d6:	683a      	ldr	r2, [r7, #0]
 80137d8:	429a      	cmp	r2, r3
 80137da:	d803      	bhi.n	80137e4 <HAL_SPI_Transmit+0x158>
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137e2:	d102      	bne.n	80137ea <HAL_SPI_Transmit+0x15e>
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d102      	bne.n	80137f0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80137ea:	2303      	movs	r3, #3
 80137ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80137ee:	e074      	b.n	80138da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80137f4:	b29b      	uxth	r3, r3
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d1ce      	bne.n	8013798 <HAL_SPI_Transmit+0x10c>
 80137fa:	e04c      	b.n	8013896 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d002      	beq.n	801380a <HAL_SPI_Transmit+0x17e>
 8013804:	8afb      	ldrh	r3, [r7, #22]
 8013806:	2b01      	cmp	r3, #1
 8013808:	d140      	bne.n	801388c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	330c      	adds	r3, #12
 8013814:	7812      	ldrb	r2, [r2, #0]
 8013816:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801381c:	1c5a      	adds	r2, r3, #1
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013826:	b29b      	uxth	r3, r3
 8013828:	3b01      	subs	r3, #1
 801382a:	b29a      	uxth	r2, r3
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8013830:	e02c      	b.n	801388c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	689b      	ldr	r3, [r3, #8]
 8013838:	f003 0302 	and.w	r3, r3, #2
 801383c:	2b02      	cmp	r3, #2
 801383e:	d113      	bne.n	8013868 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	330c      	adds	r3, #12
 801384a:	7812      	ldrb	r2, [r2, #0]
 801384c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013852:	1c5a      	adds	r2, r3, #1
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801385c:	b29b      	uxth	r3, r3
 801385e:	3b01      	subs	r3, #1
 8013860:	b29a      	uxth	r2, r3
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	86da      	strh	r2, [r3, #54]	; 0x36
 8013866:	e011      	b.n	801388c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013868:	f7fd fa4e 	bl	8010d08 <HAL_GetTick>
 801386c:	4602      	mov	r2, r0
 801386e:	69bb      	ldr	r3, [r7, #24]
 8013870:	1ad3      	subs	r3, r2, r3
 8013872:	683a      	ldr	r2, [r7, #0]
 8013874:	429a      	cmp	r2, r3
 8013876:	d803      	bhi.n	8013880 <HAL_SPI_Transmit+0x1f4>
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801387e:	d102      	bne.n	8013886 <HAL_SPI_Transmit+0x1fa>
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d102      	bne.n	801388c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8013886:	2303      	movs	r3, #3
 8013888:	77fb      	strb	r3, [r7, #31]
          goto error;
 801388a:	e026      	b.n	80138da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013890:	b29b      	uxth	r3, r3
 8013892:	2b00      	cmp	r3, #0
 8013894:	d1cd      	bne.n	8013832 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013896:	69ba      	ldr	r2, [r7, #24]
 8013898:	6839      	ldr	r1, [r7, #0]
 801389a:	68f8      	ldr	r0, [r7, #12]
 801389c:	f000 fba4 	bl	8013fe8 <SPI_EndRxTxTransaction>
 80138a0:	4603      	mov	r3, r0
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d002      	beq.n	80138ac <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	2220      	movs	r2, #32
 80138aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	689b      	ldr	r3, [r3, #8]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d10a      	bne.n	80138ca <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80138b4:	2300      	movs	r3, #0
 80138b6:	613b      	str	r3, [r7, #16]
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	68db      	ldr	r3, [r3, #12]
 80138be:	613b      	str	r3, [r7, #16]
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	689b      	ldr	r3, [r3, #8]
 80138c6:	613b      	str	r3, [r7, #16]
 80138c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d002      	beq.n	80138d8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80138d2:	2301      	movs	r3, #1
 80138d4:	77fb      	strb	r3, [r7, #31]
 80138d6:	e000      	b.n	80138da <HAL_SPI_Transmit+0x24e>
  }

error:
 80138d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	2201      	movs	r2, #1
 80138de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	2200      	movs	r2, #0
 80138e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80138ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	3720      	adds	r7, #32
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}

080138f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b088      	sub	sp, #32
 80138f8:	af02      	add	r7, sp, #8
 80138fa:	60f8      	str	r0, [r7, #12]
 80138fc:	60b9      	str	r1, [r7, #8]
 80138fe:	603b      	str	r3, [r7, #0]
 8013900:	4613      	mov	r3, r2
 8013902:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013904:	2300      	movs	r3, #0
 8013906:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	685b      	ldr	r3, [r3, #4]
 801390c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013910:	d112      	bne.n	8013938 <HAL_SPI_Receive+0x44>
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	689b      	ldr	r3, [r3, #8]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d10e      	bne.n	8013938 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	2204      	movs	r2, #4
 801391e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8013922:	88fa      	ldrh	r2, [r7, #6]
 8013924:	683b      	ldr	r3, [r7, #0]
 8013926:	9300      	str	r3, [sp, #0]
 8013928:	4613      	mov	r3, r2
 801392a:	68ba      	ldr	r2, [r7, #8]
 801392c:	68b9      	ldr	r1, [r7, #8]
 801392e:	68f8      	ldr	r0, [r7, #12]
 8013930:	f000 f8e9 	bl	8013b06 <HAL_SPI_TransmitReceive>
 8013934:	4603      	mov	r3, r0
 8013936:	e0e2      	b.n	8013afe <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801393e:	2b01      	cmp	r3, #1
 8013940:	d101      	bne.n	8013946 <HAL_SPI_Receive+0x52>
 8013942:	2302      	movs	r3, #2
 8013944:	e0db      	b.n	8013afe <HAL_SPI_Receive+0x20a>
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	2201      	movs	r2, #1
 801394a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801394e:	f7fd f9db 	bl	8010d08 <HAL_GetTick>
 8013952:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801395a:	b2db      	uxtb	r3, r3
 801395c:	2b01      	cmp	r3, #1
 801395e:	d002      	beq.n	8013966 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8013960:	2302      	movs	r3, #2
 8013962:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013964:	e0c2      	b.n	8013aec <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d002      	beq.n	8013972 <HAL_SPI_Receive+0x7e>
 801396c:	88fb      	ldrh	r3, [r7, #6]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d102      	bne.n	8013978 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8013972:	2301      	movs	r3, #1
 8013974:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013976:	e0b9      	b.n	8013aec <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	2204      	movs	r2, #4
 801397c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	2200      	movs	r2, #0
 8013984:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	68ba      	ldr	r2, [r7, #8]
 801398a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	88fa      	ldrh	r2, [r7, #6]
 8013990:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	88fa      	ldrh	r2, [r7, #6]
 8013996:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	2200      	movs	r2, #0
 801399c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	2200      	movs	r2, #0
 80139a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	2200      	movs	r2, #0
 80139a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	2200      	movs	r2, #0
 80139ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	2200      	movs	r2, #0
 80139b4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	689b      	ldr	r3, [r3, #8]
 80139ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80139be:	d107      	bne.n	80139d0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	681a      	ldr	r2, [r3, #0]
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80139ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139da:	2b40      	cmp	r3, #64	; 0x40
 80139dc:	d007      	beq.n	80139ee <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	681a      	ldr	r2, [r3, #0]
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80139ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	68db      	ldr	r3, [r3, #12]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d162      	bne.n	8013abc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80139f6:	e02e      	b.n	8013a56 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	689b      	ldr	r3, [r3, #8]
 80139fe:	f003 0301 	and.w	r3, r3, #1
 8013a02:	2b01      	cmp	r3, #1
 8013a04:	d115      	bne.n	8013a32 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	f103 020c 	add.w	r2, r3, #12
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a12:	7812      	ldrb	r2, [r2, #0]
 8013a14:	b2d2      	uxtb	r2, r2
 8013a16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a1c:	1c5a      	adds	r2, r3, #1
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013a26:	b29b      	uxth	r3, r3
 8013a28:	3b01      	subs	r3, #1
 8013a2a:	b29a      	uxth	r2, r3
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013a30:	e011      	b.n	8013a56 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013a32:	f7fd f969 	bl	8010d08 <HAL_GetTick>
 8013a36:	4602      	mov	r2, r0
 8013a38:	693b      	ldr	r3, [r7, #16]
 8013a3a:	1ad3      	subs	r3, r2, r3
 8013a3c:	683a      	ldr	r2, [r7, #0]
 8013a3e:	429a      	cmp	r2, r3
 8013a40:	d803      	bhi.n	8013a4a <HAL_SPI_Receive+0x156>
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a48:	d102      	bne.n	8013a50 <HAL_SPI_Receive+0x15c>
 8013a4a:	683b      	ldr	r3, [r7, #0]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d102      	bne.n	8013a56 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8013a50:	2303      	movs	r3, #3
 8013a52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013a54:	e04a      	b.n	8013aec <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d1cb      	bne.n	80139f8 <HAL_SPI_Receive+0x104>
 8013a60:	e031      	b.n	8013ac6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	689b      	ldr	r3, [r3, #8]
 8013a68:	f003 0301 	and.w	r3, r3, #1
 8013a6c:	2b01      	cmp	r3, #1
 8013a6e:	d113      	bne.n	8013a98 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	68da      	ldr	r2, [r3, #12]
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a7a:	b292      	uxth	r2, r2
 8013a7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a82:	1c9a      	adds	r2, r3, #2
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013a8c:	b29b      	uxth	r3, r3
 8013a8e:	3b01      	subs	r3, #1
 8013a90:	b29a      	uxth	r2, r3
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013a96:	e011      	b.n	8013abc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013a98:	f7fd f936 	bl	8010d08 <HAL_GetTick>
 8013a9c:	4602      	mov	r2, r0
 8013a9e:	693b      	ldr	r3, [r7, #16]
 8013aa0:	1ad3      	subs	r3, r2, r3
 8013aa2:	683a      	ldr	r2, [r7, #0]
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	d803      	bhi.n	8013ab0 <HAL_SPI_Receive+0x1bc>
 8013aa8:	683b      	ldr	r3, [r7, #0]
 8013aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aae:	d102      	bne.n	8013ab6 <HAL_SPI_Receive+0x1c2>
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d102      	bne.n	8013abc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8013ab6:	2303      	movs	r3, #3
 8013ab8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013aba:	e017      	b.n	8013aec <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013ac0:	b29b      	uxth	r3, r3
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d1cd      	bne.n	8013a62 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013ac6:	693a      	ldr	r2, [r7, #16]
 8013ac8:	6839      	ldr	r1, [r7, #0]
 8013aca:	68f8      	ldr	r0, [r7, #12]
 8013acc:	f000 fa27 	bl	8013f1e <SPI_EndRxTransaction>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d002      	beq.n	8013adc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	2220      	movs	r2, #32
 8013ada:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d002      	beq.n	8013aea <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	75fb      	strb	r3, [r7, #23]
 8013ae8:	e000      	b.n	8013aec <HAL_SPI_Receive+0x1f8>
  }

error :
 8013aea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	2201      	movs	r2, #1
 8013af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	2200      	movs	r2, #0
 8013af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013afe:	4618      	mov	r0, r3
 8013b00:	3718      	adds	r7, #24
 8013b02:	46bd      	mov	sp, r7
 8013b04:	bd80      	pop	{r7, pc}

08013b06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013b06:	b580      	push	{r7, lr}
 8013b08:	b08c      	sub	sp, #48	; 0x30
 8013b0a:	af00      	add	r7, sp, #0
 8013b0c:	60f8      	str	r0, [r7, #12]
 8013b0e:	60b9      	str	r1, [r7, #8]
 8013b10:	607a      	str	r2, [r7, #4]
 8013b12:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013b14:	2301      	movs	r3, #1
 8013b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013b18:	2300      	movs	r3, #0
 8013b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013b24:	2b01      	cmp	r3, #1
 8013b26:	d101      	bne.n	8013b2c <HAL_SPI_TransmitReceive+0x26>
 8013b28:	2302      	movs	r3, #2
 8013b2a:	e18a      	b.n	8013e42 <HAL_SPI_TransmitReceive+0x33c>
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	2201      	movs	r2, #1
 8013b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013b34:	f7fd f8e8 	bl	8010d08 <HAL_GetTick>
 8013b38:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	685b      	ldr	r3, [r3, #4]
 8013b48:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8013b4a:	887b      	ldrh	r3, [r7, #2]
 8013b4c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013b52:	2b01      	cmp	r3, #1
 8013b54:	d00f      	beq.n	8013b76 <HAL_SPI_TransmitReceive+0x70>
 8013b56:	69fb      	ldr	r3, [r7, #28]
 8013b58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013b5c:	d107      	bne.n	8013b6e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	689b      	ldr	r3, [r3, #8]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d103      	bne.n	8013b6e <HAL_SPI_TransmitReceive+0x68>
 8013b66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013b6a:	2b04      	cmp	r3, #4
 8013b6c:	d003      	beq.n	8013b76 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8013b6e:	2302      	movs	r3, #2
 8013b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013b74:	e15b      	b.n	8013e2e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013b76:	68bb      	ldr	r3, [r7, #8]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d005      	beq.n	8013b88 <HAL_SPI_TransmitReceive+0x82>
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d002      	beq.n	8013b88 <HAL_SPI_TransmitReceive+0x82>
 8013b82:	887b      	ldrh	r3, [r7, #2]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d103      	bne.n	8013b90 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8013b88:	2301      	movs	r3, #1
 8013b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013b8e:	e14e      	b.n	8013e2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013b96:	b2db      	uxtb	r3, r3
 8013b98:	2b04      	cmp	r3, #4
 8013b9a:	d003      	beq.n	8013ba4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	2205      	movs	r2, #5
 8013ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	687a      	ldr	r2, [r7, #4]
 8013bae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	887a      	ldrh	r2, [r7, #2]
 8013bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	887a      	ldrh	r2, [r7, #2]
 8013bba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	68ba      	ldr	r2, [r7, #8]
 8013bc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	887a      	ldrh	r2, [r7, #2]
 8013bc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	887a      	ldrh	r2, [r7, #2]
 8013bcc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013be4:	2b40      	cmp	r3, #64	; 0x40
 8013be6:	d007      	beq.n	8013bf8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	681a      	ldr	r2, [r3, #0]
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013bf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	68db      	ldr	r3, [r3, #12]
 8013bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013c00:	d178      	bne.n	8013cf4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	685b      	ldr	r3, [r3, #4]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d002      	beq.n	8013c10 <HAL_SPI_TransmitReceive+0x10a>
 8013c0a:	8b7b      	ldrh	r3, [r7, #26]
 8013c0c:	2b01      	cmp	r3, #1
 8013c0e:	d166      	bne.n	8013cde <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c14:	881a      	ldrh	r2, [r3, #0]
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c20:	1c9a      	adds	r2, r3, #2
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	3b01      	subs	r3, #1
 8013c2e:	b29a      	uxth	r2, r3
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013c34:	e053      	b.n	8013cde <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	689b      	ldr	r3, [r3, #8]
 8013c3c:	f003 0302 	and.w	r3, r3, #2
 8013c40:	2b02      	cmp	r3, #2
 8013c42:	d11b      	bne.n	8013c7c <HAL_SPI_TransmitReceive+0x176>
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013c48:	b29b      	uxth	r3, r3
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d016      	beq.n	8013c7c <HAL_SPI_TransmitReceive+0x176>
 8013c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c50:	2b01      	cmp	r3, #1
 8013c52:	d113      	bne.n	8013c7c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c58:	881a      	ldrh	r2, [r3, #0]
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c64:	1c9a      	adds	r2, r3, #2
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013c6e:	b29b      	uxth	r3, r3
 8013c70:	3b01      	subs	r3, #1
 8013c72:	b29a      	uxth	r2, r3
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013c78:	2300      	movs	r3, #0
 8013c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	689b      	ldr	r3, [r3, #8]
 8013c82:	f003 0301 	and.w	r3, r3, #1
 8013c86:	2b01      	cmp	r3, #1
 8013c88:	d119      	bne.n	8013cbe <HAL_SPI_TransmitReceive+0x1b8>
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013c8e:	b29b      	uxth	r3, r3
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d014      	beq.n	8013cbe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	68da      	ldr	r2, [r3, #12]
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c9e:	b292      	uxth	r2, r2
 8013ca0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ca6:	1c9a      	adds	r2, r3, #2
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013cb0:	b29b      	uxth	r3, r3
 8013cb2:	3b01      	subs	r3, #1
 8013cb4:	b29a      	uxth	r2, r3
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013cba:	2301      	movs	r3, #1
 8013cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013cbe:	f7fd f823 	bl	8010d08 <HAL_GetTick>
 8013cc2:	4602      	mov	r2, r0
 8013cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc6:	1ad3      	subs	r3, r2, r3
 8013cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cca:	429a      	cmp	r2, r3
 8013ccc:	d807      	bhi.n	8013cde <HAL_SPI_TransmitReceive+0x1d8>
 8013cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cd4:	d003      	beq.n	8013cde <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013cd6:	2303      	movs	r3, #3
 8013cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013cdc:	e0a7      	b.n	8013e2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013ce2:	b29b      	uxth	r3, r3
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d1a6      	bne.n	8013c36 <HAL_SPI_TransmitReceive+0x130>
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013cec:	b29b      	uxth	r3, r3
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d1a1      	bne.n	8013c36 <HAL_SPI_TransmitReceive+0x130>
 8013cf2:	e07c      	b.n	8013dee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	685b      	ldr	r3, [r3, #4]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d002      	beq.n	8013d02 <HAL_SPI_TransmitReceive+0x1fc>
 8013cfc:	8b7b      	ldrh	r3, [r7, #26]
 8013cfe:	2b01      	cmp	r3, #1
 8013d00:	d16b      	bne.n	8013dda <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	330c      	adds	r3, #12
 8013d0c:	7812      	ldrb	r2, [r2, #0]
 8013d0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d14:	1c5a      	adds	r2, r3, #1
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013d1e:	b29b      	uxth	r3, r3
 8013d20:	3b01      	subs	r3, #1
 8013d22:	b29a      	uxth	r2, r3
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013d28:	e057      	b.n	8013dda <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	689b      	ldr	r3, [r3, #8]
 8013d30:	f003 0302 	and.w	r3, r3, #2
 8013d34:	2b02      	cmp	r3, #2
 8013d36:	d11c      	bne.n	8013d72 <HAL_SPI_TransmitReceive+0x26c>
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013d3c:	b29b      	uxth	r3, r3
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d017      	beq.n	8013d72 <HAL_SPI_TransmitReceive+0x26c>
 8013d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d44:	2b01      	cmp	r3, #1
 8013d46:	d114      	bne.n	8013d72 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	330c      	adds	r3, #12
 8013d52:	7812      	ldrb	r2, [r2, #0]
 8013d54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d5a:	1c5a      	adds	r2, r3, #1
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013d64:	b29b      	uxth	r3, r3
 8013d66:	3b01      	subs	r3, #1
 8013d68:	b29a      	uxth	r2, r3
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013d6e:	2300      	movs	r3, #0
 8013d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	689b      	ldr	r3, [r3, #8]
 8013d78:	f003 0301 	and.w	r3, r3, #1
 8013d7c:	2b01      	cmp	r3, #1
 8013d7e:	d119      	bne.n	8013db4 <HAL_SPI_TransmitReceive+0x2ae>
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d84:	b29b      	uxth	r3, r3
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d014      	beq.n	8013db4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	68da      	ldr	r2, [r3, #12]
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d94:	b2d2      	uxtb	r2, r2
 8013d96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d9c:	1c5a      	adds	r2, r3, #1
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013da6:	b29b      	uxth	r3, r3
 8013da8:	3b01      	subs	r3, #1
 8013daa:	b29a      	uxth	r2, r3
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013db0:	2301      	movs	r3, #1
 8013db2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013db4:	f7fc ffa8 	bl	8010d08 <HAL_GetTick>
 8013db8:	4602      	mov	r2, r0
 8013dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dbc:	1ad3      	subs	r3, r2, r3
 8013dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d803      	bhi.n	8013dcc <HAL_SPI_TransmitReceive+0x2c6>
 8013dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dca:	d102      	bne.n	8013dd2 <HAL_SPI_TransmitReceive+0x2cc>
 8013dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d103      	bne.n	8013dda <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8013dd2:	2303      	movs	r3, #3
 8013dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013dd8:	e029      	b.n	8013e2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013dde:	b29b      	uxth	r3, r3
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d1a2      	bne.n	8013d2a <HAL_SPI_TransmitReceive+0x224>
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013de8:	b29b      	uxth	r3, r3
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d19d      	bne.n	8013d2a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013df0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013df2:	68f8      	ldr	r0, [r7, #12]
 8013df4:	f000 f8f8 	bl	8013fe8 <SPI_EndRxTxTransaction>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d006      	beq.n	8013e0c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8013dfe:	2301      	movs	r3, #1
 8013e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	2220      	movs	r2, #32
 8013e08:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013e0a:	e010      	b.n	8013e2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	689b      	ldr	r3, [r3, #8]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d10b      	bne.n	8013e2c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013e14:	2300      	movs	r3, #0
 8013e16:	617b      	str	r3, [r7, #20]
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	68db      	ldr	r3, [r3, #12]
 8013e1e:	617b      	str	r3, [r7, #20]
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	689b      	ldr	r3, [r3, #8]
 8013e26:	617b      	str	r3, [r7, #20]
 8013e28:	697b      	ldr	r3, [r7, #20]
 8013e2a:	e000      	b.n	8013e2e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8013e2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	2201      	movs	r2, #1
 8013e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	2200      	movs	r2, #0
 8013e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013e3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	3730      	adds	r7, #48	; 0x30
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}

08013e4a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013e4a:	b580      	push	{r7, lr}
 8013e4c:	b084      	sub	sp, #16
 8013e4e:	af00      	add	r7, sp, #0
 8013e50:	60f8      	str	r0, [r7, #12]
 8013e52:	60b9      	str	r1, [r7, #8]
 8013e54:	603b      	str	r3, [r7, #0]
 8013e56:	4613      	mov	r3, r2
 8013e58:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013e5a:	e04c      	b.n	8013ef6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e62:	d048      	beq.n	8013ef6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8013e64:	f7fc ff50 	bl	8010d08 <HAL_GetTick>
 8013e68:	4602      	mov	r2, r0
 8013e6a:	69bb      	ldr	r3, [r7, #24]
 8013e6c:	1ad3      	subs	r3, r2, r3
 8013e6e:	683a      	ldr	r2, [r7, #0]
 8013e70:	429a      	cmp	r2, r3
 8013e72:	d902      	bls.n	8013e7a <SPI_WaitFlagStateUntilTimeout+0x30>
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d13d      	bne.n	8013ef6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	685a      	ldr	r2, [r3, #4]
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013e88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	685b      	ldr	r3, [r3, #4]
 8013e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013e92:	d111      	bne.n	8013eb8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	689b      	ldr	r3, [r3, #8]
 8013e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013e9c:	d004      	beq.n	8013ea8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	689b      	ldr	r3, [r3, #8]
 8013ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013ea6:	d107      	bne.n	8013eb8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	681a      	ldr	r2, [r3, #0]
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013eb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013ec0:	d10f      	bne.n	8013ee2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	681a      	ldr	r2, [r3, #0]
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013ed0:	601a      	str	r2, [r3, #0]
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	681a      	ldr	r2, [r3, #0]
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013ee0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	2201      	movs	r2, #1
 8013ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	2200      	movs	r2, #0
 8013eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8013ef2:	2303      	movs	r3, #3
 8013ef4:	e00f      	b.n	8013f16 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	689a      	ldr	r2, [r3, #8]
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	4013      	ands	r3, r2
 8013f00:	68ba      	ldr	r2, [r7, #8]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	bf0c      	ite	eq
 8013f06:	2301      	moveq	r3, #1
 8013f08:	2300      	movne	r3, #0
 8013f0a:	b2db      	uxtb	r3, r3
 8013f0c:	461a      	mov	r2, r3
 8013f0e:	79fb      	ldrb	r3, [r7, #7]
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d1a3      	bne.n	8013e5c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8013f14:	2300      	movs	r3, #0
}
 8013f16:	4618      	mov	r0, r3
 8013f18:	3710      	adds	r7, #16
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}

08013f1e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8013f1e:	b580      	push	{r7, lr}
 8013f20:	b086      	sub	sp, #24
 8013f22:	af02      	add	r7, sp, #8
 8013f24:	60f8      	str	r0, [r7, #12]
 8013f26:	60b9      	str	r1, [r7, #8]
 8013f28:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	685b      	ldr	r3, [r3, #4]
 8013f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013f32:	d111      	bne.n	8013f58 <SPI_EndRxTransaction+0x3a>
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	689b      	ldr	r3, [r3, #8]
 8013f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013f3c:	d004      	beq.n	8013f48 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	689b      	ldr	r3, [r3, #8]
 8013f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013f46:	d107      	bne.n	8013f58 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	681a      	ldr	r2, [r3, #0]
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013f56:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	685b      	ldr	r3, [r3, #4]
 8013f5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013f60:	d12a      	bne.n	8013fb8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	689b      	ldr	r3, [r3, #8]
 8013f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013f6a:	d012      	beq.n	8013f92 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	9300      	str	r3, [sp, #0]
 8013f70:	68bb      	ldr	r3, [r7, #8]
 8013f72:	2200      	movs	r2, #0
 8013f74:	2180      	movs	r1, #128	; 0x80
 8013f76:	68f8      	ldr	r0, [r7, #12]
 8013f78:	f7ff ff67 	bl	8013e4a <SPI_WaitFlagStateUntilTimeout>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d02d      	beq.n	8013fde <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f86:	f043 0220 	orr.w	r2, r3, #32
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013f8e:	2303      	movs	r3, #3
 8013f90:	e026      	b.n	8013fe0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	9300      	str	r3, [sp, #0]
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	2200      	movs	r2, #0
 8013f9a:	2101      	movs	r1, #1
 8013f9c:	68f8      	ldr	r0, [r7, #12]
 8013f9e:	f7ff ff54 	bl	8013e4a <SPI_WaitFlagStateUntilTimeout>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d01a      	beq.n	8013fde <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013fac:	f043 0220 	orr.w	r2, r3, #32
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013fb4:	2303      	movs	r3, #3
 8013fb6:	e013      	b.n	8013fe0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	9300      	str	r3, [sp, #0]
 8013fbc:	68bb      	ldr	r3, [r7, #8]
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	2101      	movs	r1, #1
 8013fc2:	68f8      	ldr	r0, [r7, #12]
 8013fc4:	f7ff ff41 	bl	8013e4a <SPI_WaitFlagStateUntilTimeout>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d007      	beq.n	8013fde <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013fd2:	f043 0220 	orr.w	r2, r3, #32
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013fda:	2303      	movs	r3, #3
 8013fdc:	e000      	b.n	8013fe0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8013fde:	2300      	movs	r3, #0
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3710      	adds	r7, #16
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b088      	sub	sp, #32
 8013fec:	af02      	add	r7, sp, #8
 8013fee:	60f8      	str	r0, [r7, #12]
 8013ff0:	60b9      	str	r1, [r7, #8]
 8013ff2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8013ff4:	4b1b      	ldr	r3, [pc, #108]	; (8014064 <SPI_EndRxTxTransaction+0x7c>)
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	4a1b      	ldr	r2, [pc, #108]	; (8014068 <SPI_EndRxTxTransaction+0x80>)
 8013ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8013ffe:	0d5b      	lsrs	r3, r3, #21
 8014000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014004:	fb02 f303 	mul.w	r3, r2, r3
 8014008:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	685b      	ldr	r3, [r3, #4]
 801400e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014012:	d112      	bne.n	801403a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	9300      	str	r3, [sp, #0]
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	2200      	movs	r2, #0
 801401c:	2180      	movs	r1, #128	; 0x80
 801401e:	68f8      	ldr	r0, [r7, #12]
 8014020:	f7ff ff13 	bl	8013e4a <SPI_WaitFlagStateUntilTimeout>
 8014024:	4603      	mov	r3, r0
 8014026:	2b00      	cmp	r3, #0
 8014028:	d016      	beq.n	8014058 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801402e:	f043 0220 	orr.w	r2, r3, #32
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014036:	2303      	movs	r3, #3
 8014038:	e00f      	b.n	801405a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d00a      	beq.n	8014056 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	3b01      	subs	r3, #1
 8014044:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	689b      	ldr	r3, [r3, #8]
 801404c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014050:	2b80      	cmp	r3, #128	; 0x80
 8014052:	d0f2      	beq.n	801403a <SPI_EndRxTxTransaction+0x52>
 8014054:	e000      	b.n	8014058 <SPI_EndRxTxTransaction+0x70>
        break;
 8014056:	bf00      	nop
  }

  return HAL_OK;
 8014058:	2300      	movs	r3, #0
}
 801405a:	4618      	mov	r0, r3
 801405c:	3718      	adds	r7, #24
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
 8014062:	bf00      	nop
 8014064:	20000080 	.word	0x20000080
 8014068:	165e9f81 	.word	0x165e9f81

0801406c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b082      	sub	sp, #8
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d101      	bne.n	801407e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801407a:	2301      	movs	r3, #1
 801407c:	e01d      	b.n	80140ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014084:	b2db      	uxtb	r3, r3
 8014086:	2b00      	cmp	r3, #0
 8014088:	d106      	bne.n	8014098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	2200      	movs	r2, #0
 801408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	f7fc fa42 	bl	801051c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	2202      	movs	r2, #2
 801409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	681a      	ldr	r2, [r3, #0]
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	3304      	adds	r3, #4
 80140a8:	4619      	mov	r1, r3
 80140aa:	4610      	mov	r0, r2
 80140ac:	f000 fe50 	bl	8014d50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2201      	movs	r2, #1
 80140b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80140b8:	2300      	movs	r3, #0
}
 80140ba:	4618      	mov	r0, r3
 80140bc:	3708      	adds	r7, #8
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}

080140c2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80140c2:	b480      	push	{r7}
 80140c4:	b085      	sub	sp, #20
 80140c6:	af00      	add	r7, sp, #0
 80140c8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	68da      	ldr	r2, [r3, #12]
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	f042 0201 	orr.w	r2, r2, #1
 80140d8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	689b      	ldr	r3, [r3, #8]
 80140e0:	f003 0307 	and.w	r3, r3, #7
 80140e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	2b06      	cmp	r3, #6
 80140ea:	d007      	beq.n	80140fc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	681a      	ldr	r2, [r3, #0]
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	f042 0201 	orr.w	r2, r2, #1
 80140fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80140fc:	2300      	movs	r3, #0
}
 80140fe:	4618      	mov	r0, r3
 8014100:	3714      	adds	r7, #20
 8014102:	46bd      	mov	sp, r7
 8014104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014108:	4770      	bx	lr

0801410a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 801410a:	b480      	push	{r7}
 801410c:	b083      	sub	sp, #12
 801410e:	af00      	add	r7, sp, #0
 8014110:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	68da      	ldr	r2, [r3, #12]
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	f022 0201 	bic.w	r2, r2, #1
 8014120:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	6a1a      	ldr	r2, [r3, #32]
 8014128:	f241 1311 	movw	r3, #4369	; 0x1111
 801412c:	4013      	ands	r3, r2
 801412e:	2b00      	cmp	r3, #0
 8014130:	d10f      	bne.n	8014152 <HAL_TIM_Base_Stop_IT+0x48>
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	6a1a      	ldr	r2, [r3, #32]
 8014138:	f240 4344 	movw	r3, #1092	; 0x444
 801413c:	4013      	ands	r3, r2
 801413e:	2b00      	cmp	r3, #0
 8014140:	d107      	bne.n	8014152 <HAL_TIM_Base_Stop_IT+0x48>
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	681a      	ldr	r2, [r3, #0]
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	f022 0201 	bic.w	r2, r2, #1
 8014150:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8014152:	2300      	movs	r3, #0
}
 8014154:	4618      	mov	r0, r3
 8014156:	370c      	adds	r7, #12
 8014158:	46bd      	mov	sp, r7
 801415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415e:	4770      	bx	lr

08014160 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b082      	sub	sp, #8
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d101      	bne.n	8014172 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 801416e:	2301      	movs	r3, #1
 8014170:	e01d      	b.n	80141ae <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014178:	b2db      	uxtb	r3, r3
 801417a:	2b00      	cmp	r3, #0
 801417c:	d106      	bne.n	801418c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	2200      	movs	r2, #0
 8014182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f000 f815 	bl	80141b6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	2202      	movs	r2, #2
 8014190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	681a      	ldr	r2, [r3, #0]
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	3304      	adds	r3, #4
 801419c:	4619      	mov	r1, r3
 801419e:	4610      	mov	r0, r2
 80141a0:	f000 fdd6 	bl	8014d50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2201      	movs	r2, #1
 80141a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80141ac:	2300      	movs	r3, #0
}
 80141ae:	4618      	mov	r0, r3
 80141b0:	3708      	adds	r7, #8
 80141b2:	46bd      	mov	sp, r7
 80141b4:	bd80      	pop	{r7, pc}

080141b6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80141b6:	b480      	push	{r7}
 80141b8:	b083      	sub	sp, #12
 80141ba:	af00      	add	r7, sp, #0
 80141bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80141be:	bf00      	nop
 80141c0:	370c      	adds	r7, #12
 80141c2:	46bd      	mov	sp, r7
 80141c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c8:	4770      	bx	lr
	...

080141cc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b084      	sub	sp, #16
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
 80141d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	2b0c      	cmp	r3, #12
 80141da:	d841      	bhi.n	8014260 <HAL_TIM_OC_Start_IT+0x94>
 80141dc:	a201      	add	r2, pc, #4	; (adr r2, 80141e4 <HAL_TIM_OC_Start_IT+0x18>)
 80141de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141e2:	bf00      	nop
 80141e4:	08014219 	.word	0x08014219
 80141e8:	08014261 	.word	0x08014261
 80141ec:	08014261 	.word	0x08014261
 80141f0:	08014261 	.word	0x08014261
 80141f4:	0801422b 	.word	0x0801422b
 80141f8:	08014261 	.word	0x08014261
 80141fc:	08014261 	.word	0x08014261
 8014200:	08014261 	.word	0x08014261
 8014204:	0801423d 	.word	0x0801423d
 8014208:	08014261 	.word	0x08014261
 801420c:	08014261 	.word	0x08014261
 8014210:	08014261 	.word	0x08014261
 8014214:	0801424f 	.word	0x0801424f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	68da      	ldr	r2, [r3, #12]
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	f042 0202 	orr.w	r2, r2, #2
 8014226:	60da      	str	r2, [r3, #12]
      break;
 8014228:	e01b      	b.n	8014262 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	68da      	ldr	r2, [r3, #12]
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	f042 0204 	orr.w	r2, r2, #4
 8014238:	60da      	str	r2, [r3, #12]
      break;
 801423a:	e012      	b.n	8014262 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	68da      	ldr	r2, [r3, #12]
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	f042 0208 	orr.w	r2, r2, #8
 801424a:	60da      	str	r2, [r3, #12]
      break;
 801424c:	e009      	b.n	8014262 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	68da      	ldr	r2, [r3, #12]
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	f042 0210 	orr.w	r2, r2, #16
 801425c:	60da      	str	r2, [r3, #12]
      break;
 801425e:	e000      	b.n	8014262 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8014260:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	2201      	movs	r2, #1
 8014268:	6839      	ldr	r1, [r7, #0]
 801426a:	4618      	mov	r0, r3
 801426c:	f001 f85a 	bl	8015324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	4a15      	ldr	r2, [pc, #84]	; (80142cc <HAL_TIM_OC_Start_IT+0x100>)
 8014276:	4293      	cmp	r3, r2
 8014278:	d004      	beq.n	8014284 <HAL_TIM_OC_Start_IT+0xb8>
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	4a14      	ldr	r2, [pc, #80]	; (80142d0 <HAL_TIM_OC_Start_IT+0x104>)
 8014280:	4293      	cmp	r3, r2
 8014282:	d101      	bne.n	8014288 <HAL_TIM_OC_Start_IT+0xbc>
 8014284:	2301      	movs	r3, #1
 8014286:	e000      	b.n	801428a <HAL_TIM_OC_Start_IT+0xbe>
 8014288:	2300      	movs	r3, #0
 801428a:	2b00      	cmp	r3, #0
 801428c:	d007      	beq.n	801429e <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801429c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	689b      	ldr	r3, [r3, #8]
 80142a4:	f003 0307 	and.w	r3, r3, #7
 80142a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	2b06      	cmp	r3, #6
 80142ae:	d007      	beq.n	80142c0 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	681a      	ldr	r2, [r3, #0]
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	f042 0201 	orr.w	r2, r2, #1
 80142be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80142c0:	2300      	movs	r3, #0
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	3710      	adds	r7, #16
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}
 80142ca:	bf00      	nop
 80142cc:	40010000 	.word	0x40010000
 80142d0:	40010400 	.word	0x40010400

080142d4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b082      	sub	sp, #8
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
 80142dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80142de:	683b      	ldr	r3, [r7, #0]
 80142e0:	2b0c      	cmp	r3, #12
 80142e2:	d841      	bhi.n	8014368 <HAL_TIM_OC_Stop_IT+0x94>
 80142e4:	a201      	add	r2, pc, #4	; (adr r2, 80142ec <HAL_TIM_OC_Stop_IT+0x18>)
 80142e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142ea:	bf00      	nop
 80142ec:	08014321 	.word	0x08014321
 80142f0:	08014369 	.word	0x08014369
 80142f4:	08014369 	.word	0x08014369
 80142f8:	08014369 	.word	0x08014369
 80142fc:	08014333 	.word	0x08014333
 8014300:	08014369 	.word	0x08014369
 8014304:	08014369 	.word	0x08014369
 8014308:	08014369 	.word	0x08014369
 801430c:	08014345 	.word	0x08014345
 8014310:	08014369 	.word	0x08014369
 8014314:	08014369 	.word	0x08014369
 8014318:	08014369 	.word	0x08014369
 801431c:	08014357 	.word	0x08014357
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	68da      	ldr	r2, [r3, #12]
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	f022 0202 	bic.w	r2, r2, #2
 801432e:	60da      	str	r2, [r3, #12]
      break;
 8014330:	e01b      	b.n	801436a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	68da      	ldr	r2, [r3, #12]
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	f022 0204 	bic.w	r2, r2, #4
 8014340:	60da      	str	r2, [r3, #12]
      break;
 8014342:	e012      	b.n	801436a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	68da      	ldr	r2, [r3, #12]
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	f022 0208 	bic.w	r2, r2, #8
 8014352:	60da      	str	r2, [r3, #12]
      break;
 8014354:	e009      	b.n	801436a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	68da      	ldr	r2, [r3, #12]
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	f022 0210 	bic.w	r2, r2, #16
 8014364:	60da      	str	r2, [r3, #12]
      break;
 8014366:	e000      	b.n	801436a <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8014368:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	2200      	movs	r2, #0
 8014370:	6839      	ldr	r1, [r7, #0]
 8014372:	4618      	mov	r0, r3
 8014374:	f000 ffd6 	bl	8015324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	4a20      	ldr	r2, [pc, #128]	; (8014400 <HAL_TIM_OC_Stop_IT+0x12c>)
 801437e:	4293      	cmp	r3, r2
 8014380:	d004      	beq.n	801438c <HAL_TIM_OC_Stop_IT+0xb8>
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	4a1f      	ldr	r2, [pc, #124]	; (8014404 <HAL_TIM_OC_Stop_IT+0x130>)
 8014388:	4293      	cmp	r3, r2
 801438a:	d101      	bne.n	8014390 <HAL_TIM_OC_Stop_IT+0xbc>
 801438c:	2301      	movs	r3, #1
 801438e:	e000      	b.n	8014392 <HAL_TIM_OC_Stop_IT+0xbe>
 8014390:	2300      	movs	r3, #0
 8014392:	2b00      	cmp	r3, #0
 8014394:	d017      	beq.n	80143c6 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	6a1a      	ldr	r2, [r3, #32]
 801439c:	f241 1311 	movw	r3, #4369	; 0x1111
 80143a0:	4013      	ands	r3, r2
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d10f      	bne.n	80143c6 <HAL_TIM_OC_Stop_IT+0xf2>
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	6a1a      	ldr	r2, [r3, #32]
 80143ac:	f240 4344 	movw	r3, #1092	; 0x444
 80143b0:	4013      	ands	r3, r2
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d107      	bne.n	80143c6 <HAL_TIM_OC_Stop_IT+0xf2>
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80143c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	6a1a      	ldr	r2, [r3, #32]
 80143cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80143d0:	4013      	ands	r3, r2
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d10f      	bne.n	80143f6 <HAL_TIM_OC_Stop_IT+0x122>
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	6a1a      	ldr	r2, [r3, #32]
 80143dc:	f240 4344 	movw	r3, #1092	; 0x444
 80143e0:	4013      	ands	r3, r2
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d107      	bne.n	80143f6 <HAL_TIM_OC_Stop_IT+0x122>
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	681a      	ldr	r2, [r3, #0]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	f022 0201 	bic.w	r2, r2, #1
 80143f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80143f6:	2300      	movs	r3, #0
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	3708      	adds	r7, #8
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bd80      	pop	{r7, pc}
 8014400:	40010000 	.word	0x40010000
 8014404:	40010400 	.word	0x40010400

08014408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b082      	sub	sp, #8
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d101      	bne.n	801441a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014416:	2301      	movs	r3, #1
 8014418:	e01d      	b.n	8014456 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014420:	b2db      	uxtb	r3, r3
 8014422:	2b00      	cmp	r3, #0
 8014424:	d106      	bne.n	8014434 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	2200      	movs	r2, #0
 801442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801442e:	6878      	ldr	r0, [r7, #4]
 8014430:	f000 f815 	bl	801445e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2202      	movs	r2, #2
 8014438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681a      	ldr	r2, [r3, #0]
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	3304      	adds	r3, #4
 8014444:	4619      	mov	r1, r3
 8014446:	4610      	mov	r0, r2
 8014448:	f000 fc82 	bl	8014d50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2201      	movs	r2, #1
 8014450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014454:	2300      	movs	r3, #0
}
 8014456:	4618      	mov	r0, r3
 8014458:	3708      	adds	r7, #8
 801445a:	46bd      	mov	sp, r7
 801445c:	bd80      	pop	{r7, pc}

0801445e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801445e:	b480      	push	{r7}
 8014460:	b083      	sub	sp, #12
 8014462:	af00      	add	r7, sp, #0
 8014464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8014466:	bf00      	nop
 8014468:	370c      	adds	r7, #12
 801446a:	46bd      	mov	sp, r7
 801446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014470:	4770      	bx	lr
	...

08014474 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b084      	sub	sp, #16
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
 801447c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	2201      	movs	r2, #1
 8014484:	6839      	ldr	r1, [r7, #0]
 8014486:	4618      	mov	r0, r3
 8014488:	f000 ff4c 	bl	8015324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	4a15      	ldr	r2, [pc, #84]	; (80144e8 <HAL_TIM_PWM_Start+0x74>)
 8014492:	4293      	cmp	r3, r2
 8014494:	d004      	beq.n	80144a0 <HAL_TIM_PWM_Start+0x2c>
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	4a14      	ldr	r2, [pc, #80]	; (80144ec <HAL_TIM_PWM_Start+0x78>)
 801449c:	4293      	cmp	r3, r2
 801449e:	d101      	bne.n	80144a4 <HAL_TIM_PWM_Start+0x30>
 80144a0:	2301      	movs	r3, #1
 80144a2:	e000      	b.n	80144a6 <HAL_TIM_PWM_Start+0x32>
 80144a4:	2300      	movs	r3, #0
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d007      	beq.n	80144ba <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80144b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	689b      	ldr	r3, [r3, #8]
 80144c0:	f003 0307 	and.w	r3, r3, #7
 80144c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	2b06      	cmp	r3, #6
 80144ca:	d007      	beq.n	80144dc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	681a      	ldr	r2, [r3, #0]
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	f042 0201 	orr.w	r2, r2, #1
 80144da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80144dc:	2300      	movs	r3, #0
}
 80144de:	4618      	mov	r0, r3
 80144e0:	3710      	adds	r7, #16
 80144e2:	46bd      	mov	sp, r7
 80144e4:	bd80      	pop	{r7, pc}
 80144e6:	bf00      	nop
 80144e8:	40010000 	.word	0x40010000
 80144ec:	40010400 	.word	0x40010400

080144f0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
 80144f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	2200      	movs	r2, #0
 8014500:	6839      	ldr	r1, [r7, #0]
 8014502:	4618      	mov	r0, r3
 8014504:	f000 ff0e 	bl	8015324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	4a22      	ldr	r2, [pc, #136]	; (8014598 <HAL_TIM_PWM_Stop+0xa8>)
 801450e:	4293      	cmp	r3, r2
 8014510:	d004      	beq.n	801451c <HAL_TIM_PWM_Stop+0x2c>
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	4a21      	ldr	r2, [pc, #132]	; (801459c <HAL_TIM_PWM_Stop+0xac>)
 8014518:	4293      	cmp	r3, r2
 801451a:	d101      	bne.n	8014520 <HAL_TIM_PWM_Stop+0x30>
 801451c:	2301      	movs	r3, #1
 801451e:	e000      	b.n	8014522 <HAL_TIM_PWM_Stop+0x32>
 8014520:	2300      	movs	r3, #0
 8014522:	2b00      	cmp	r3, #0
 8014524:	d017      	beq.n	8014556 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	6a1a      	ldr	r2, [r3, #32]
 801452c:	f241 1311 	movw	r3, #4369	; 0x1111
 8014530:	4013      	ands	r3, r2
 8014532:	2b00      	cmp	r3, #0
 8014534:	d10f      	bne.n	8014556 <HAL_TIM_PWM_Stop+0x66>
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	6a1a      	ldr	r2, [r3, #32]
 801453c:	f240 4344 	movw	r3, #1092	; 0x444
 8014540:	4013      	ands	r3, r2
 8014542:	2b00      	cmp	r3, #0
 8014544:	d107      	bne.n	8014556 <HAL_TIM_PWM_Stop+0x66>
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014554:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	6a1a      	ldr	r2, [r3, #32]
 801455c:	f241 1311 	movw	r3, #4369	; 0x1111
 8014560:	4013      	ands	r3, r2
 8014562:	2b00      	cmp	r3, #0
 8014564:	d10f      	bne.n	8014586 <HAL_TIM_PWM_Stop+0x96>
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	6a1a      	ldr	r2, [r3, #32]
 801456c:	f240 4344 	movw	r3, #1092	; 0x444
 8014570:	4013      	ands	r3, r2
 8014572:	2b00      	cmp	r3, #0
 8014574:	d107      	bne.n	8014586 <HAL_TIM_PWM_Stop+0x96>
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	681a      	ldr	r2, [r3, #0]
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	f022 0201 	bic.w	r2, r2, #1
 8014584:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	2201      	movs	r2, #1
 801458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801458e:	2300      	movs	r3, #0
}
 8014590:	4618      	mov	r0, r3
 8014592:	3708      	adds	r7, #8
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}
 8014598:	40010000 	.word	0x40010000
 801459c:	40010400 	.word	0x40010400

080145a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b086      	sub	sp, #24
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
 80145a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d101      	bne.n	80145b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80145b0:	2301      	movs	r3, #1
 80145b2:	e083      	b.n	80146bc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80145ba:	b2db      	uxtb	r3, r3
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d106      	bne.n	80145ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2200      	movs	r2, #0
 80145c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f7fc f837 	bl	801063c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2202      	movs	r2, #2
 80145d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	689b      	ldr	r3, [r3, #8]
 80145dc:	687a      	ldr	r2, [r7, #4]
 80145de:	6812      	ldr	r2, [r2, #0]
 80145e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80145e4:	f023 0307 	bic.w	r3, r3, #7
 80145e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	681a      	ldr	r2, [r3, #0]
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	3304      	adds	r3, #4
 80145f2:	4619      	mov	r1, r3
 80145f4:	4610      	mov	r0, r2
 80145f6:	f000 fbab 	bl	8014d50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	689b      	ldr	r3, [r3, #8]
 8014600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	699b      	ldr	r3, [r3, #24]
 8014608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	6a1b      	ldr	r3, [r3, #32]
 8014610:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8014612:	683b      	ldr	r3, [r7, #0]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	697a      	ldr	r2, [r7, #20]
 8014618:	4313      	orrs	r3, r2
 801461a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801461c:	693b      	ldr	r3, [r7, #16]
 801461e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014622:	f023 0303 	bic.w	r3, r3, #3
 8014626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8014628:	683b      	ldr	r3, [r7, #0]
 801462a:	689a      	ldr	r2, [r3, #8]
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	699b      	ldr	r3, [r3, #24]
 8014630:	021b      	lsls	r3, r3, #8
 8014632:	4313      	orrs	r3, r2
 8014634:	693a      	ldr	r2, [r7, #16]
 8014636:	4313      	orrs	r3, r2
 8014638:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801463a:	693b      	ldr	r3, [r7, #16]
 801463c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8014640:	f023 030c 	bic.w	r3, r3, #12
 8014644:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8014646:	693b      	ldr	r3, [r7, #16]
 8014648:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801464c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014650:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	68da      	ldr	r2, [r3, #12]
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	69db      	ldr	r3, [r3, #28]
 801465a:	021b      	lsls	r3, r3, #8
 801465c:	4313      	orrs	r3, r2
 801465e:	693a      	ldr	r2, [r7, #16]
 8014660:	4313      	orrs	r3, r2
 8014662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	691b      	ldr	r3, [r3, #16]
 8014668:	011a      	lsls	r2, r3, #4
 801466a:	683b      	ldr	r3, [r7, #0]
 801466c:	6a1b      	ldr	r3, [r3, #32]
 801466e:	031b      	lsls	r3, r3, #12
 8014670:	4313      	orrs	r3, r2
 8014672:	693a      	ldr	r2, [r7, #16]
 8014674:	4313      	orrs	r3, r2
 8014676:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801467e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8014686:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	685a      	ldr	r2, [r3, #4]
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	695b      	ldr	r3, [r3, #20]
 8014690:	011b      	lsls	r3, r3, #4
 8014692:	4313      	orrs	r3, r2
 8014694:	68fa      	ldr	r2, [r7, #12]
 8014696:	4313      	orrs	r3, r2
 8014698:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	697a      	ldr	r2, [r7, #20]
 80146a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	693a      	ldr	r2, [r7, #16]
 80146a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	68fa      	ldr	r2, [r7, #12]
 80146b0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	2201      	movs	r2, #1
 80146b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80146ba:	2300      	movs	r3, #0
}
 80146bc:	4618      	mov	r0, r3
 80146be:	3718      	adds	r7, #24
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bd80      	pop	{r7, pc}

080146c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b082      	sub	sp, #8
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
 80146cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80146ce:	683b      	ldr	r3, [r7, #0]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d002      	beq.n	80146da <HAL_TIM_Encoder_Start+0x16>
 80146d4:	2b04      	cmp	r3, #4
 80146d6:	d008      	beq.n	80146ea <HAL_TIM_Encoder_Start+0x26>
 80146d8:	e00f      	b.n	80146fa <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	2201      	movs	r2, #1
 80146e0:	2100      	movs	r1, #0
 80146e2:	4618      	mov	r0, r3
 80146e4:	f000 fe1e 	bl	8015324 <TIM_CCxChannelCmd>
      break;
 80146e8:	e016      	b.n	8014718 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	2201      	movs	r2, #1
 80146f0:	2104      	movs	r1, #4
 80146f2:	4618      	mov	r0, r3
 80146f4:	f000 fe16 	bl	8015324 <TIM_CCxChannelCmd>
      break;
 80146f8:	e00e      	b.n	8014718 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	2201      	movs	r2, #1
 8014700:	2100      	movs	r1, #0
 8014702:	4618      	mov	r0, r3
 8014704:	f000 fe0e 	bl	8015324 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	2201      	movs	r2, #1
 801470e:	2104      	movs	r1, #4
 8014710:	4618      	mov	r0, r3
 8014712:	f000 fe07 	bl	8015324 <TIM_CCxChannelCmd>
      break;
 8014716:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	681a      	ldr	r2, [r3, #0]
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	f042 0201 	orr.w	r2, r2, #1
 8014726:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8014728:	2300      	movs	r3, #0
}
 801472a:	4618      	mov	r0, r3
 801472c:	3708      	adds	r7, #8
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}

08014732 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014732:	b580      	push	{r7, lr}
 8014734:	b082      	sub	sp, #8
 8014736:	af00      	add	r7, sp, #0
 8014738:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	691b      	ldr	r3, [r3, #16]
 8014740:	f003 0302 	and.w	r3, r3, #2
 8014744:	2b02      	cmp	r3, #2
 8014746:	d122      	bne.n	801478e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	68db      	ldr	r3, [r3, #12]
 801474e:	f003 0302 	and.w	r3, r3, #2
 8014752:	2b02      	cmp	r3, #2
 8014754:	d11b      	bne.n	801478e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	f06f 0202 	mvn.w	r2, #2
 801475e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2201      	movs	r2, #1
 8014764:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	699b      	ldr	r3, [r3, #24]
 801476c:	f003 0303 	and.w	r3, r3, #3
 8014770:	2b00      	cmp	r3, #0
 8014772:	d003      	beq.n	801477c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f000 facc 	bl	8014d12 <HAL_TIM_IC_CaptureCallback>
 801477a:	e005      	b.n	8014788 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f000 fabe 	bl	8014cfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f000 facf 	bl	8014d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2200      	movs	r2, #0
 801478c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	691b      	ldr	r3, [r3, #16]
 8014794:	f003 0304 	and.w	r3, r3, #4
 8014798:	2b04      	cmp	r3, #4
 801479a:	d122      	bne.n	80147e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	68db      	ldr	r3, [r3, #12]
 80147a2:	f003 0304 	and.w	r3, r3, #4
 80147a6:	2b04      	cmp	r3, #4
 80147a8:	d11b      	bne.n	80147e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	f06f 0204 	mvn.w	r2, #4
 80147b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2202      	movs	r2, #2
 80147b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	699b      	ldr	r3, [r3, #24]
 80147c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d003      	beq.n	80147d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f000 faa2 	bl	8014d12 <HAL_TIM_IC_CaptureCallback>
 80147ce:	e005      	b.n	80147dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80147d0:	6878      	ldr	r0, [r7, #4]
 80147d2:	f000 fa94 	bl	8014cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f000 faa5 	bl	8014d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	2200      	movs	r2, #0
 80147e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	691b      	ldr	r3, [r3, #16]
 80147e8:	f003 0308 	and.w	r3, r3, #8
 80147ec:	2b08      	cmp	r3, #8
 80147ee:	d122      	bne.n	8014836 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	68db      	ldr	r3, [r3, #12]
 80147f6:	f003 0308 	and.w	r3, r3, #8
 80147fa:	2b08      	cmp	r3, #8
 80147fc:	d11b      	bne.n	8014836 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	f06f 0208 	mvn.w	r2, #8
 8014806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	2204      	movs	r2, #4
 801480c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	69db      	ldr	r3, [r3, #28]
 8014814:	f003 0303 	and.w	r3, r3, #3
 8014818:	2b00      	cmp	r3, #0
 801481a:	d003      	beq.n	8014824 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801481c:	6878      	ldr	r0, [r7, #4]
 801481e:	f000 fa78 	bl	8014d12 <HAL_TIM_IC_CaptureCallback>
 8014822:	e005      	b.n	8014830 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f000 fa6a 	bl	8014cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f000 fa7b 	bl	8014d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2200      	movs	r2, #0
 8014834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	691b      	ldr	r3, [r3, #16]
 801483c:	f003 0310 	and.w	r3, r3, #16
 8014840:	2b10      	cmp	r3, #16
 8014842:	d122      	bne.n	801488a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	68db      	ldr	r3, [r3, #12]
 801484a:	f003 0310 	and.w	r3, r3, #16
 801484e:	2b10      	cmp	r3, #16
 8014850:	d11b      	bne.n	801488a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	f06f 0210 	mvn.w	r2, #16
 801485a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	2208      	movs	r2, #8
 8014860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	69db      	ldr	r3, [r3, #28]
 8014868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801486c:	2b00      	cmp	r3, #0
 801486e:	d003      	beq.n	8014878 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014870:	6878      	ldr	r0, [r7, #4]
 8014872:	f000 fa4e 	bl	8014d12 <HAL_TIM_IC_CaptureCallback>
 8014876:	e005      	b.n	8014884 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f000 fa40 	bl	8014cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801487e:	6878      	ldr	r0, [r7, #4]
 8014880:	f000 fa51 	bl	8014d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	2200      	movs	r2, #0
 8014888:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	691b      	ldr	r3, [r3, #16]
 8014890:	f003 0301 	and.w	r3, r3, #1
 8014894:	2b01      	cmp	r3, #1
 8014896:	d10e      	bne.n	80148b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	68db      	ldr	r3, [r3, #12]
 801489e:	f003 0301 	and.w	r3, r3, #1
 80148a2:	2b01      	cmp	r3, #1
 80148a4:	d107      	bne.n	80148b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	f06f 0201 	mvn.w	r2, #1
 80148ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f7fa f9c5 	bl	800ec40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	691b      	ldr	r3, [r3, #16]
 80148bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80148c0:	2b80      	cmp	r3, #128	; 0x80
 80148c2:	d10e      	bne.n	80148e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	68db      	ldr	r3, [r3, #12]
 80148ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80148ce:	2b80      	cmp	r3, #128	; 0x80
 80148d0:	d107      	bne.n	80148e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80148da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80148dc:	6878      	ldr	r0, [r7, #4]
 80148de:	f000 fee9 	bl	80156b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	691b      	ldr	r3, [r3, #16]
 80148e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148ec:	2b40      	cmp	r3, #64	; 0x40
 80148ee:	d10e      	bne.n	801490e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	68db      	ldr	r3, [r3, #12]
 80148f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148fa:	2b40      	cmp	r3, #64	; 0x40
 80148fc:	d107      	bne.n	801490e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f000 fa16 	bl	8014d3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	691b      	ldr	r3, [r3, #16]
 8014914:	f003 0320 	and.w	r3, r3, #32
 8014918:	2b20      	cmp	r3, #32
 801491a:	d10e      	bne.n	801493a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	68db      	ldr	r3, [r3, #12]
 8014922:	f003 0320 	and.w	r3, r3, #32
 8014926:	2b20      	cmp	r3, #32
 8014928:	d107      	bne.n	801493a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	f06f 0220 	mvn.w	r2, #32
 8014932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	f000 feb3 	bl	80156a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801493a:	bf00      	nop
 801493c:	3708      	adds	r7, #8
 801493e:	46bd      	mov	sp, r7
 8014940:	bd80      	pop	{r7, pc}
	...

08014944 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b084      	sub	sp, #16
 8014948:	af00      	add	r7, sp, #0
 801494a:	60f8      	str	r0, [r7, #12]
 801494c:	60b9      	str	r1, [r7, #8]
 801494e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014956:	2b01      	cmp	r3, #1
 8014958:	d101      	bne.n	801495e <HAL_TIM_OC_ConfigChannel+0x1a>
 801495a:	2302      	movs	r3, #2
 801495c:	e04e      	b.n	80149fc <HAL_TIM_OC_ConfigChannel+0xb8>
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	2201      	movs	r2, #1
 8014962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	2202      	movs	r2, #2
 801496a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2b0c      	cmp	r3, #12
 8014972:	d839      	bhi.n	80149e8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8014974:	a201      	add	r2, pc, #4	; (adr r2, 801497c <HAL_TIM_OC_ConfigChannel+0x38>)
 8014976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801497a:	bf00      	nop
 801497c:	080149b1 	.word	0x080149b1
 8014980:	080149e9 	.word	0x080149e9
 8014984:	080149e9 	.word	0x080149e9
 8014988:	080149e9 	.word	0x080149e9
 801498c:	080149bf 	.word	0x080149bf
 8014990:	080149e9 	.word	0x080149e9
 8014994:	080149e9 	.word	0x080149e9
 8014998:	080149e9 	.word	0x080149e9
 801499c:	080149cd 	.word	0x080149cd
 80149a0:	080149e9 	.word	0x080149e9
 80149a4:	080149e9 	.word	0x080149e9
 80149a8:	080149e9 	.word	0x080149e9
 80149ac:	080149db 	.word	0x080149db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	68b9      	ldr	r1, [r7, #8]
 80149b6:	4618      	mov	r0, r3
 80149b8:	f000 fa6a 	bl	8014e90 <TIM_OC1_SetConfig>
      break;
 80149bc:	e015      	b.n	80149ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	68b9      	ldr	r1, [r7, #8]
 80149c4:	4618      	mov	r0, r3
 80149c6:	f000 fad3 	bl	8014f70 <TIM_OC2_SetConfig>
      break;
 80149ca:	e00e      	b.n	80149ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	68b9      	ldr	r1, [r7, #8]
 80149d2:	4618      	mov	r0, r3
 80149d4:	f000 fb42 	bl	801505c <TIM_OC3_SetConfig>
      break;
 80149d8:	e007      	b.n	80149ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	68b9      	ldr	r1, [r7, #8]
 80149e0:	4618      	mov	r0, r3
 80149e2:	f000 fbaf 	bl	8015144 <TIM_OC4_SetConfig>
      break;
 80149e6:	e000      	b.n	80149ea <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80149e8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	2201      	movs	r2, #1
 80149ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	2200      	movs	r2, #0
 80149f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80149fa:	2300      	movs	r3, #0
}
 80149fc:	4618      	mov	r0, r3
 80149fe:	3710      	adds	r7, #16
 8014a00:	46bd      	mov	sp, r7
 8014a02:	bd80      	pop	{r7, pc}

08014a04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b084      	sub	sp, #16
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	60f8      	str	r0, [r7, #12]
 8014a0c:	60b9      	str	r1, [r7, #8]
 8014a0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014a16:	2b01      	cmp	r3, #1
 8014a18:	d101      	bne.n	8014a1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8014a1a:	2302      	movs	r3, #2
 8014a1c:	e0b4      	b.n	8014b88 <HAL_TIM_PWM_ConfigChannel+0x184>
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	2201      	movs	r2, #1
 8014a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	2202      	movs	r2, #2
 8014a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2b0c      	cmp	r3, #12
 8014a32:	f200 809f 	bhi.w	8014b74 <HAL_TIM_PWM_ConfigChannel+0x170>
 8014a36:	a201      	add	r2, pc, #4	; (adr r2, 8014a3c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8014a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a3c:	08014a71 	.word	0x08014a71
 8014a40:	08014b75 	.word	0x08014b75
 8014a44:	08014b75 	.word	0x08014b75
 8014a48:	08014b75 	.word	0x08014b75
 8014a4c:	08014ab1 	.word	0x08014ab1
 8014a50:	08014b75 	.word	0x08014b75
 8014a54:	08014b75 	.word	0x08014b75
 8014a58:	08014b75 	.word	0x08014b75
 8014a5c:	08014af3 	.word	0x08014af3
 8014a60:	08014b75 	.word	0x08014b75
 8014a64:	08014b75 	.word	0x08014b75
 8014a68:	08014b75 	.word	0x08014b75
 8014a6c:	08014b33 	.word	0x08014b33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	68b9      	ldr	r1, [r7, #8]
 8014a76:	4618      	mov	r0, r3
 8014a78:	f000 fa0a 	bl	8014e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	699a      	ldr	r2, [r3, #24]
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	f042 0208 	orr.w	r2, r2, #8
 8014a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	699a      	ldr	r2, [r3, #24]
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	f022 0204 	bic.w	r2, r2, #4
 8014a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	6999      	ldr	r1, [r3, #24]
 8014aa2:	68bb      	ldr	r3, [r7, #8]
 8014aa4:	691a      	ldr	r2, [r3, #16]
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	430a      	orrs	r2, r1
 8014aac:	619a      	str	r2, [r3, #24]
      break;
 8014aae:	e062      	b.n	8014b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	68b9      	ldr	r1, [r7, #8]
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f000 fa5a 	bl	8014f70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	699a      	ldr	r2, [r3, #24]
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	699a      	ldr	r2, [r3, #24]
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	6999      	ldr	r1, [r3, #24]
 8014ae2:	68bb      	ldr	r3, [r7, #8]
 8014ae4:	691b      	ldr	r3, [r3, #16]
 8014ae6:	021a      	lsls	r2, r3, #8
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	430a      	orrs	r2, r1
 8014aee:	619a      	str	r2, [r3, #24]
      break;
 8014af0:	e041      	b.n	8014b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	68b9      	ldr	r1, [r7, #8]
 8014af8:	4618      	mov	r0, r3
 8014afa:	f000 faaf 	bl	801505c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	69da      	ldr	r2, [r3, #28]
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	f042 0208 	orr.w	r2, r2, #8
 8014b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	69da      	ldr	r2, [r3, #28]
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	f022 0204 	bic.w	r2, r2, #4
 8014b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	69d9      	ldr	r1, [r3, #28]
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	691a      	ldr	r2, [r3, #16]
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	430a      	orrs	r2, r1
 8014b2e:	61da      	str	r2, [r3, #28]
      break;
 8014b30:	e021      	b.n	8014b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	68b9      	ldr	r1, [r7, #8]
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f000 fb03 	bl	8015144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	69da      	ldr	r2, [r3, #28]
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	69da      	ldr	r2, [r3, #28]
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	69d9      	ldr	r1, [r3, #28]
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	691b      	ldr	r3, [r3, #16]
 8014b68:	021a      	lsls	r2, r3, #8
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	430a      	orrs	r2, r1
 8014b70:	61da      	str	r2, [r3, #28]
      break;
 8014b72:	e000      	b.n	8014b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8014b74:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	2201      	movs	r2, #1
 8014b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	2200      	movs	r2, #0
 8014b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014b86:	2300      	movs	r3, #0
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	3710      	adds	r7, #16
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}

08014b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b084      	sub	sp, #16
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
 8014b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014ba0:	2b01      	cmp	r3, #1
 8014ba2:	d101      	bne.n	8014ba8 <HAL_TIM_ConfigClockSource+0x18>
 8014ba4:	2302      	movs	r3, #2
 8014ba6:	e0a6      	b.n	8014cf6 <HAL_TIM_ConfigClockSource+0x166>
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	2201      	movs	r2, #1
 8014bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	2202      	movs	r2, #2
 8014bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	689b      	ldr	r3, [r3, #8]
 8014bbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8014bc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014bce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	68fa      	ldr	r2, [r7, #12]
 8014bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2b40      	cmp	r3, #64	; 0x40
 8014bde:	d067      	beq.n	8014cb0 <HAL_TIM_ConfigClockSource+0x120>
 8014be0:	2b40      	cmp	r3, #64	; 0x40
 8014be2:	d80b      	bhi.n	8014bfc <HAL_TIM_ConfigClockSource+0x6c>
 8014be4:	2b10      	cmp	r3, #16
 8014be6:	d073      	beq.n	8014cd0 <HAL_TIM_ConfigClockSource+0x140>
 8014be8:	2b10      	cmp	r3, #16
 8014bea:	d802      	bhi.n	8014bf2 <HAL_TIM_ConfigClockSource+0x62>
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d06f      	beq.n	8014cd0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8014bf0:	e078      	b.n	8014ce4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8014bf2:	2b20      	cmp	r3, #32
 8014bf4:	d06c      	beq.n	8014cd0 <HAL_TIM_ConfigClockSource+0x140>
 8014bf6:	2b30      	cmp	r3, #48	; 0x30
 8014bf8:	d06a      	beq.n	8014cd0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8014bfa:	e073      	b.n	8014ce4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8014bfc:	2b70      	cmp	r3, #112	; 0x70
 8014bfe:	d00d      	beq.n	8014c1c <HAL_TIM_ConfigClockSource+0x8c>
 8014c00:	2b70      	cmp	r3, #112	; 0x70
 8014c02:	d804      	bhi.n	8014c0e <HAL_TIM_ConfigClockSource+0x7e>
 8014c04:	2b50      	cmp	r3, #80	; 0x50
 8014c06:	d033      	beq.n	8014c70 <HAL_TIM_ConfigClockSource+0xe0>
 8014c08:	2b60      	cmp	r3, #96	; 0x60
 8014c0a:	d041      	beq.n	8014c90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8014c0c:	e06a      	b.n	8014ce4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8014c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014c12:	d066      	beq.n	8014ce2 <HAL_TIM_ConfigClockSource+0x152>
 8014c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014c18:	d017      	beq.n	8014c4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8014c1a:	e063      	b.n	8014ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	6818      	ldr	r0, [r3, #0]
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	6899      	ldr	r1, [r3, #8]
 8014c24:	683b      	ldr	r3, [r7, #0]
 8014c26:	685a      	ldr	r2, [r3, #4]
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	68db      	ldr	r3, [r3, #12]
 8014c2c:	f000 fb5a 	bl	80152e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	689b      	ldr	r3, [r3, #8]
 8014c36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8014c3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	68fa      	ldr	r2, [r7, #12]
 8014c46:	609a      	str	r2, [r3, #8]
      break;
 8014c48:	e04c      	b.n	8014ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	6818      	ldr	r0, [r3, #0]
 8014c4e:	683b      	ldr	r3, [r7, #0]
 8014c50:	6899      	ldr	r1, [r3, #8]
 8014c52:	683b      	ldr	r3, [r7, #0]
 8014c54:	685a      	ldr	r2, [r3, #4]
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	68db      	ldr	r3, [r3, #12]
 8014c5a:	f000 fb43 	bl	80152e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	689a      	ldr	r2, [r3, #8]
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014c6c:	609a      	str	r2, [r3, #8]
      break;
 8014c6e:	e039      	b.n	8014ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	6818      	ldr	r0, [r3, #0]
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	6859      	ldr	r1, [r3, #4]
 8014c78:	683b      	ldr	r3, [r7, #0]
 8014c7a:	68db      	ldr	r3, [r3, #12]
 8014c7c:	461a      	mov	r2, r3
 8014c7e:	f000 fab7 	bl	80151f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	2150      	movs	r1, #80	; 0x50
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f000 fb10 	bl	80152ae <TIM_ITRx_SetConfig>
      break;
 8014c8e:	e029      	b.n	8014ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6818      	ldr	r0, [r3, #0]
 8014c94:	683b      	ldr	r3, [r7, #0]
 8014c96:	6859      	ldr	r1, [r3, #4]
 8014c98:	683b      	ldr	r3, [r7, #0]
 8014c9a:	68db      	ldr	r3, [r3, #12]
 8014c9c:	461a      	mov	r2, r3
 8014c9e:	f000 fad6 	bl	801524e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	2160      	movs	r1, #96	; 0x60
 8014ca8:	4618      	mov	r0, r3
 8014caa:	f000 fb00 	bl	80152ae <TIM_ITRx_SetConfig>
      break;
 8014cae:	e019      	b.n	8014ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	6818      	ldr	r0, [r3, #0]
 8014cb4:	683b      	ldr	r3, [r7, #0]
 8014cb6:	6859      	ldr	r1, [r3, #4]
 8014cb8:	683b      	ldr	r3, [r7, #0]
 8014cba:	68db      	ldr	r3, [r3, #12]
 8014cbc:	461a      	mov	r2, r3
 8014cbe:	f000 fa97 	bl	80151f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	2140      	movs	r1, #64	; 0x40
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f000 faf0 	bl	80152ae <TIM_ITRx_SetConfig>
      break;
 8014cce:	e009      	b.n	8014ce4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	681a      	ldr	r2, [r3, #0]
 8014cd4:	683b      	ldr	r3, [r7, #0]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	4619      	mov	r1, r3
 8014cda:	4610      	mov	r0, r2
 8014cdc:	f000 fae7 	bl	80152ae <TIM_ITRx_SetConfig>
      break;
 8014ce0:	e000      	b.n	8014ce4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8014ce2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2201      	movs	r2, #1
 8014ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014cf4:	2300      	movs	r3, #0
}
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	3710      	adds	r7, #16
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	bd80      	pop	{r7, pc}

08014cfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014cfe:	b480      	push	{r7}
 8014d00:	b083      	sub	sp, #12
 8014d02:	af00      	add	r7, sp, #0
 8014d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014d06:	bf00      	nop
 8014d08:	370c      	adds	r7, #12
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d10:	4770      	bx	lr

08014d12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014d12:	b480      	push	{r7}
 8014d14:	b083      	sub	sp, #12
 8014d16:	af00      	add	r7, sp, #0
 8014d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014d1a:	bf00      	nop
 8014d1c:	370c      	adds	r7, #12
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d24:	4770      	bx	lr

08014d26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014d26:	b480      	push	{r7}
 8014d28:	b083      	sub	sp, #12
 8014d2a:	af00      	add	r7, sp, #0
 8014d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014d2e:	bf00      	nop
 8014d30:	370c      	adds	r7, #12
 8014d32:	46bd      	mov	sp, r7
 8014d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d38:	4770      	bx	lr

08014d3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014d3a:	b480      	push	{r7}
 8014d3c:	b083      	sub	sp, #12
 8014d3e:	af00      	add	r7, sp, #0
 8014d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014d42:	bf00      	nop
 8014d44:	370c      	adds	r7, #12
 8014d46:	46bd      	mov	sp, r7
 8014d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4c:	4770      	bx	lr
	...

08014d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014d50:	b480      	push	{r7}
 8014d52:	b085      	sub	sp, #20
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
 8014d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	4a40      	ldr	r2, [pc, #256]	; (8014e64 <TIM_Base_SetConfig+0x114>)
 8014d64:	4293      	cmp	r3, r2
 8014d66:	d013      	beq.n	8014d90 <TIM_Base_SetConfig+0x40>
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014d6e:	d00f      	beq.n	8014d90 <TIM_Base_SetConfig+0x40>
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	4a3d      	ldr	r2, [pc, #244]	; (8014e68 <TIM_Base_SetConfig+0x118>)
 8014d74:	4293      	cmp	r3, r2
 8014d76:	d00b      	beq.n	8014d90 <TIM_Base_SetConfig+0x40>
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	4a3c      	ldr	r2, [pc, #240]	; (8014e6c <TIM_Base_SetConfig+0x11c>)
 8014d7c:	4293      	cmp	r3, r2
 8014d7e:	d007      	beq.n	8014d90 <TIM_Base_SetConfig+0x40>
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	4a3b      	ldr	r2, [pc, #236]	; (8014e70 <TIM_Base_SetConfig+0x120>)
 8014d84:	4293      	cmp	r3, r2
 8014d86:	d003      	beq.n	8014d90 <TIM_Base_SetConfig+0x40>
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	4a3a      	ldr	r2, [pc, #232]	; (8014e74 <TIM_Base_SetConfig+0x124>)
 8014d8c:	4293      	cmp	r3, r2
 8014d8e:	d108      	bne.n	8014da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014d98:	683b      	ldr	r3, [r7, #0]
 8014d9a:	685b      	ldr	r3, [r3, #4]
 8014d9c:	68fa      	ldr	r2, [r7, #12]
 8014d9e:	4313      	orrs	r3, r2
 8014da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	4a2f      	ldr	r2, [pc, #188]	; (8014e64 <TIM_Base_SetConfig+0x114>)
 8014da6:	4293      	cmp	r3, r2
 8014da8:	d02b      	beq.n	8014e02 <TIM_Base_SetConfig+0xb2>
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014db0:	d027      	beq.n	8014e02 <TIM_Base_SetConfig+0xb2>
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	4a2c      	ldr	r2, [pc, #176]	; (8014e68 <TIM_Base_SetConfig+0x118>)
 8014db6:	4293      	cmp	r3, r2
 8014db8:	d023      	beq.n	8014e02 <TIM_Base_SetConfig+0xb2>
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	4a2b      	ldr	r2, [pc, #172]	; (8014e6c <TIM_Base_SetConfig+0x11c>)
 8014dbe:	4293      	cmp	r3, r2
 8014dc0:	d01f      	beq.n	8014e02 <TIM_Base_SetConfig+0xb2>
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	4a2a      	ldr	r2, [pc, #168]	; (8014e70 <TIM_Base_SetConfig+0x120>)
 8014dc6:	4293      	cmp	r3, r2
 8014dc8:	d01b      	beq.n	8014e02 <TIM_Base_SetConfig+0xb2>
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	4a29      	ldr	r2, [pc, #164]	; (8014e74 <TIM_Base_SetConfig+0x124>)
 8014dce:	4293      	cmp	r3, r2
 8014dd0:	d017      	beq.n	8014e02 <TIM_Base_SetConfig+0xb2>
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	4a28      	ldr	r2, [pc, #160]	; (8014e78 <TIM_Base_SetConfig+0x128>)
 8014dd6:	4293      	cmp	r3, r2
 8014dd8:	d013      	beq.n	8014e02 <TIM_Base_SetConfig+0xb2>
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	4a27      	ldr	r2, [pc, #156]	; (8014e7c <TIM_Base_SetConfig+0x12c>)
 8014dde:	4293      	cmp	r3, r2
 8014de0:	d00f      	beq.n	8014e02 <TIM_Base_SetConfig+0xb2>
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	4a26      	ldr	r2, [pc, #152]	; (8014e80 <TIM_Base_SetConfig+0x130>)
 8014de6:	4293      	cmp	r3, r2
 8014de8:	d00b      	beq.n	8014e02 <TIM_Base_SetConfig+0xb2>
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	4a25      	ldr	r2, [pc, #148]	; (8014e84 <TIM_Base_SetConfig+0x134>)
 8014dee:	4293      	cmp	r3, r2
 8014df0:	d007      	beq.n	8014e02 <TIM_Base_SetConfig+0xb2>
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	4a24      	ldr	r2, [pc, #144]	; (8014e88 <TIM_Base_SetConfig+0x138>)
 8014df6:	4293      	cmp	r3, r2
 8014df8:	d003      	beq.n	8014e02 <TIM_Base_SetConfig+0xb2>
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	4a23      	ldr	r2, [pc, #140]	; (8014e8c <TIM_Base_SetConfig+0x13c>)
 8014dfe:	4293      	cmp	r3, r2
 8014e00:	d108      	bne.n	8014e14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	68db      	ldr	r3, [r3, #12]
 8014e0e:	68fa      	ldr	r2, [r7, #12]
 8014e10:	4313      	orrs	r3, r2
 8014e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014e1a:	683b      	ldr	r3, [r7, #0]
 8014e1c:	695b      	ldr	r3, [r3, #20]
 8014e1e:	4313      	orrs	r3, r2
 8014e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	68fa      	ldr	r2, [r7, #12]
 8014e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	689a      	ldr	r2, [r3, #8]
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014e30:	683b      	ldr	r3, [r7, #0]
 8014e32:	681a      	ldr	r2, [r3, #0]
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	4a0a      	ldr	r2, [pc, #40]	; (8014e64 <TIM_Base_SetConfig+0x114>)
 8014e3c:	4293      	cmp	r3, r2
 8014e3e:	d003      	beq.n	8014e48 <TIM_Base_SetConfig+0xf8>
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	4a0c      	ldr	r2, [pc, #48]	; (8014e74 <TIM_Base_SetConfig+0x124>)
 8014e44:	4293      	cmp	r3, r2
 8014e46:	d103      	bne.n	8014e50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014e48:	683b      	ldr	r3, [r7, #0]
 8014e4a:	691a      	ldr	r2, [r3, #16]
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	2201      	movs	r2, #1
 8014e54:	615a      	str	r2, [r3, #20]
}
 8014e56:	bf00      	nop
 8014e58:	3714      	adds	r7, #20
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e60:	4770      	bx	lr
 8014e62:	bf00      	nop
 8014e64:	40010000 	.word	0x40010000
 8014e68:	40000400 	.word	0x40000400
 8014e6c:	40000800 	.word	0x40000800
 8014e70:	40000c00 	.word	0x40000c00
 8014e74:	40010400 	.word	0x40010400
 8014e78:	40014000 	.word	0x40014000
 8014e7c:	40014400 	.word	0x40014400
 8014e80:	40014800 	.word	0x40014800
 8014e84:	40001800 	.word	0x40001800
 8014e88:	40001c00 	.word	0x40001c00
 8014e8c:	40002000 	.word	0x40002000

08014e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014e90:	b480      	push	{r7}
 8014e92:	b087      	sub	sp, #28
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
 8014e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	6a1b      	ldr	r3, [r3, #32]
 8014e9e:	f023 0201 	bic.w	r2, r3, #1
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	6a1b      	ldr	r3, [r3, #32]
 8014eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	685b      	ldr	r3, [r3, #4]
 8014eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	699b      	ldr	r3, [r3, #24]
 8014eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	f023 0303 	bic.w	r3, r3, #3
 8014ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014ec8:	683b      	ldr	r3, [r7, #0]
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	68fa      	ldr	r2, [r7, #12]
 8014ece:	4313      	orrs	r3, r2
 8014ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014ed2:	697b      	ldr	r3, [r7, #20]
 8014ed4:	f023 0302 	bic.w	r3, r3, #2
 8014ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	689b      	ldr	r3, [r3, #8]
 8014ede:	697a      	ldr	r2, [r7, #20]
 8014ee0:	4313      	orrs	r3, r2
 8014ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	4a20      	ldr	r2, [pc, #128]	; (8014f68 <TIM_OC1_SetConfig+0xd8>)
 8014ee8:	4293      	cmp	r3, r2
 8014eea:	d003      	beq.n	8014ef4 <TIM_OC1_SetConfig+0x64>
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	4a1f      	ldr	r2, [pc, #124]	; (8014f6c <TIM_OC1_SetConfig+0xdc>)
 8014ef0:	4293      	cmp	r3, r2
 8014ef2:	d10c      	bne.n	8014f0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014ef4:	697b      	ldr	r3, [r7, #20]
 8014ef6:	f023 0308 	bic.w	r3, r3, #8
 8014efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014efc:	683b      	ldr	r3, [r7, #0]
 8014efe:	68db      	ldr	r3, [r3, #12]
 8014f00:	697a      	ldr	r2, [r7, #20]
 8014f02:	4313      	orrs	r3, r2
 8014f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014f06:	697b      	ldr	r3, [r7, #20]
 8014f08:	f023 0304 	bic.w	r3, r3, #4
 8014f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	4a15      	ldr	r2, [pc, #84]	; (8014f68 <TIM_OC1_SetConfig+0xd8>)
 8014f12:	4293      	cmp	r3, r2
 8014f14:	d003      	beq.n	8014f1e <TIM_OC1_SetConfig+0x8e>
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	4a14      	ldr	r2, [pc, #80]	; (8014f6c <TIM_OC1_SetConfig+0xdc>)
 8014f1a:	4293      	cmp	r3, r2
 8014f1c:	d111      	bne.n	8014f42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014f1e:	693b      	ldr	r3, [r7, #16]
 8014f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014f26:	693b      	ldr	r3, [r7, #16]
 8014f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014f2e:	683b      	ldr	r3, [r7, #0]
 8014f30:	695b      	ldr	r3, [r3, #20]
 8014f32:	693a      	ldr	r2, [r7, #16]
 8014f34:	4313      	orrs	r3, r2
 8014f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	699b      	ldr	r3, [r3, #24]
 8014f3c:	693a      	ldr	r2, [r7, #16]
 8014f3e:	4313      	orrs	r3, r2
 8014f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	693a      	ldr	r2, [r7, #16]
 8014f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	68fa      	ldr	r2, [r7, #12]
 8014f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	685a      	ldr	r2, [r3, #4]
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	697a      	ldr	r2, [r7, #20]
 8014f5a:	621a      	str	r2, [r3, #32]
}
 8014f5c:	bf00      	nop
 8014f5e:	371c      	adds	r7, #28
 8014f60:	46bd      	mov	sp, r7
 8014f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f66:	4770      	bx	lr
 8014f68:	40010000 	.word	0x40010000
 8014f6c:	40010400 	.word	0x40010400

08014f70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014f70:	b480      	push	{r7}
 8014f72:	b087      	sub	sp, #28
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
 8014f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	6a1b      	ldr	r3, [r3, #32]
 8014f7e:	f023 0210 	bic.w	r2, r3, #16
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	6a1b      	ldr	r3, [r3, #32]
 8014f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	685b      	ldr	r3, [r3, #4]
 8014f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	699b      	ldr	r3, [r3, #24]
 8014f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	021b      	lsls	r3, r3, #8
 8014fae:	68fa      	ldr	r2, [r7, #12]
 8014fb0:	4313      	orrs	r3, r2
 8014fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	f023 0320 	bic.w	r3, r3, #32
 8014fba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014fbc:	683b      	ldr	r3, [r7, #0]
 8014fbe:	689b      	ldr	r3, [r3, #8]
 8014fc0:	011b      	lsls	r3, r3, #4
 8014fc2:	697a      	ldr	r2, [r7, #20]
 8014fc4:	4313      	orrs	r3, r2
 8014fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	4a22      	ldr	r2, [pc, #136]	; (8015054 <TIM_OC2_SetConfig+0xe4>)
 8014fcc:	4293      	cmp	r3, r2
 8014fce:	d003      	beq.n	8014fd8 <TIM_OC2_SetConfig+0x68>
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	4a21      	ldr	r2, [pc, #132]	; (8015058 <TIM_OC2_SetConfig+0xe8>)
 8014fd4:	4293      	cmp	r3, r2
 8014fd6:	d10d      	bne.n	8014ff4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014fd8:	697b      	ldr	r3, [r7, #20]
 8014fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	68db      	ldr	r3, [r3, #12]
 8014fe4:	011b      	lsls	r3, r3, #4
 8014fe6:	697a      	ldr	r2, [r7, #20]
 8014fe8:	4313      	orrs	r3, r2
 8014fea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014ff2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	4a17      	ldr	r2, [pc, #92]	; (8015054 <TIM_OC2_SetConfig+0xe4>)
 8014ff8:	4293      	cmp	r3, r2
 8014ffa:	d003      	beq.n	8015004 <TIM_OC2_SetConfig+0x94>
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	4a16      	ldr	r2, [pc, #88]	; (8015058 <TIM_OC2_SetConfig+0xe8>)
 8015000:	4293      	cmp	r3, r2
 8015002:	d113      	bne.n	801502c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8015004:	693b      	ldr	r3, [r7, #16]
 8015006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801500a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801500c:	693b      	ldr	r3, [r7, #16]
 801500e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	695b      	ldr	r3, [r3, #20]
 8015018:	009b      	lsls	r3, r3, #2
 801501a:	693a      	ldr	r2, [r7, #16]
 801501c:	4313      	orrs	r3, r2
 801501e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	699b      	ldr	r3, [r3, #24]
 8015024:	009b      	lsls	r3, r3, #2
 8015026:	693a      	ldr	r2, [r7, #16]
 8015028:	4313      	orrs	r3, r2
 801502a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	693a      	ldr	r2, [r7, #16]
 8015030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	68fa      	ldr	r2, [r7, #12]
 8015036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8015038:	683b      	ldr	r3, [r7, #0]
 801503a:	685a      	ldr	r2, [r3, #4]
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	697a      	ldr	r2, [r7, #20]
 8015044:	621a      	str	r2, [r3, #32]
}
 8015046:	bf00      	nop
 8015048:	371c      	adds	r7, #28
 801504a:	46bd      	mov	sp, r7
 801504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015050:	4770      	bx	lr
 8015052:	bf00      	nop
 8015054:	40010000 	.word	0x40010000
 8015058:	40010400 	.word	0x40010400

0801505c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801505c:	b480      	push	{r7}
 801505e:	b087      	sub	sp, #28
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
 8015064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	6a1b      	ldr	r3, [r3, #32]
 801506a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	6a1b      	ldr	r3, [r3, #32]
 8015076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	685b      	ldr	r3, [r3, #4]
 801507c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	69db      	ldr	r3, [r3, #28]
 8015082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801508a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	f023 0303 	bic.w	r3, r3, #3
 8015092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	68fa      	ldr	r2, [r7, #12]
 801509a:	4313      	orrs	r3, r2
 801509c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80150a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	689b      	ldr	r3, [r3, #8]
 80150aa:	021b      	lsls	r3, r3, #8
 80150ac:	697a      	ldr	r2, [r7, #20]
 80150ae:	4313      	orrs	r3, r2
 80150b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	4a21      	ldr	r2, [pc, #132]	; (801513c <TIM_OC3_SetConfig+0xe0>)
 80150b6:	4293      	cmp	r3, r2
 80150b8:	d003      	beq.n	80150c2 <TIM_OC3_SetConfig+0x66>
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	4a20      	ldr	r2, [pc, #128]	; (8015140 <TIM_OC3_SetConfig+0xe4>)
 80150be:	4293      	cmp	r3, r2
 80150c0:	d10d      	bne.n	80150de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80150c2:	697b      	ldr	r3, [r7, #20]
 80150c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80150c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80150ca:	683b      	ldr	r3, [r7, #0]
 80150cc:	68db      	ldr	r3, [r3, #12]
 80150ce:	021b      	lsls	r3, r3, #8
 80150d0:	697a      	ldr	r2, [r7, #20]
 80150d2:	4313      	orrs	r3, r2
 80150d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80150d6:	697b      	ldr	r3, [r7, #20]
 80150d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80150dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	4a16      	ldr	r2, [pc, #88]	; (801513c <TIM_OC3_SetConfig+0xe0>)
 80150e2:	4293      	cmp	r3, r2
 80150e4:	d003      	beq.n	80150ee <TIM_OC3_SetConfig+0x92>
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	4a15      	ldr	r2, [pc, #84]	; (8015140 <TIM_OC3_SetConfig+0xe4>)
 80150ea:	4293      	cmp	r3, r2
 80150ec:	d113      	bne.n	8015116 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80150ee:	693b      	ldr	r3, [r7, #16]
 80150f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80150f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80150fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	695b      	ldr	r3, [r3, #20]
 8015102:	011b      	lsls	r3, r3, #4
 8015104:	693a      	ldr	r2, [r7, #16]
 8015106:	4313      	orrs	r3, r2
 8015108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	699b      	ldr	r3, [r3, #24]
 801510e:	011b      	lsls	r3, r3, #4
 8015110:	693a      	ldr	r2, [r7, #16]
 8015112:	4313      	orrs	r3, r2
 8015114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	693a      	ldr	r2, [r7, #16]
 801511a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	68fa      	ldr	r2, [r7, #12]
 8015120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8015122:	683b      	ldr	r3, [r7, #0]
 8015124:	685a      	ldr	r2, [r3, #4]
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	697a      	ldr	r2, [r7, #20]
 801512e:	621a      	str	r2, [r3, #32]
}
 8015130:	bf00      	nop
 8015132:	371c      	adds	r7, #28
 8015134:	46bd      	mov	sp, r7
 8015136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801513a:	4770      	bx	lr
 801513c:	40010000 	.word	0x40010000
 8015140:	40010400 	.word	0x40010400

08015144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015144:	b480      	push	{r7}
 8015146:	b087      	sub	sp, #28
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
 801514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	6a1b      	ldr	r3, [r3, #32]
 8015152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	6a1b      	ldr	r3, [r3, #32]
 801515e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	685b      	ldr	r3, [r3, #4]
 8015164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	69db      	ldr	r3, [r3, #28]
 801516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801517a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801517c:	683b      	ldr	r3, [r7, #0]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	021b      	lsls	r3, r3, #8
 8015182:	68fa      	ldr	r2, [r7, #12]
 8015184:	4313      	orrs	r3, r2
 8015186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801518e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015190:	683b      	ldr	r3, [r7, #0]
 8015192:	689b      	ldr	r3, [r3, #8]
 8015194:	031b      	lsls	r3, r3, #12
 8015196:	693a      	ldr	r2, [r7, #16]
 8015198:	4313      	orrs	r3, r2
 801519a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	4a12      	ldr	r2, [pc, #72]	; (80151e8 <TIM_OC4_SetConfig+0xa4>)
 80151a0:	4293      	cmp	r3, r2
 80151a2:	d003      	beq.n	80151ac <TIM_OC4_SetConfig+0x68>
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	4a11      	ldr	r2, [pc, #68]	; (80151ec <TIM_OC4_SetConfig+0xa8>)
 80151a8:	4293      	cmp	r3, r2
 80151aa:	d109      	bne.n	80151c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80151ac:	697b      	ldr	r3, [r7, #20]
 80151ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80151b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	695b      	ldr	r3, [r3, #20]
 80151b8:	019b      	lsls	r3, r3, #6
 80151ba:	697a      	ldr	r2, [r7, #20]
 80151bc:	4313      	orrs	r3, r2
 80151be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	697a      	ldr	r2, [r7, #20]
 80151c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	68fa      	ldr	r2, [r7, #12]
 80151ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80151cc:	683b      	ldr	r3, [r7, #0]
 80151ce:	685a      	ldr	r2, [r3, #4]
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	693a      	ldr	r2, [r7, #16]
 80151d8:	621a      	str	r2, [r3, #32]
}
 80151da:	bf00      	nop
 80151dc:	371c      	adds	r7, #28
 80151de:	46bd      	mov	sp, r7
 80151e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e4:	4770      	bx	lr
 80151e6:	bf00      	nop
 80151e8:	40010000 	.word	0x40010000
 80151ec:	40010400 	.word	0x40010400

080151f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80151f0:	b480      	push	{r7}
 80151f2:	b087      	sub	sp, #28
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	60f8      	str	r0, [r7, #12]
 80151f8:	60b9      	str	r1, [r7, #8]
 80151fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	6a1b      	ldr	r3, [r3, #32]
 8015200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	6a1b      	ldr	r3, [r3, #32]
 8015206:	f023 0201 	bic.w	r2, r3, #1
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	699b      	ldr	r3, [r3, #24]
 8015212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801521a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	011b      	lsls	r3, r3, #4
 8015220:	693a      	ldr	r2, [r7, #16]
 8015222:	4313      	orrs	r3, r2
 8015224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015226:	697b      	ldr	r3, [r7, #20]
 8015228:	f023 030a 	bic.w	r3, r3, #10
 801522c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801522e:	697a      	ldr	r2, [r7, #20]
 8015230:	68bb      	ldr	r3, [r7, #8]
 8015232:	4313      	orrs	r3, r2
 8015234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	693a      	ldr	r2, [r7, #16]
 801523a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	697a      	ldr	r2, [r7, #20]
 8015240:	621a      	str	r2, [r3, #32]
}
 8015242:	bf00      	nop
 8015244:	371c      	adds	r7, #28
 8015246:	46bd      	mov	sp, r7
 8015248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801524c:	4770      	bx	lr

0801524e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801524e:	b480      	push	{r7}
 8015250:	b087      	sub	sp, #28
 8015252:	af00      	add	r7, sp, #0
 8015254:	60f8      	str	r0, [r7, #12]
 8015256:	60b9      	str	r1, [r7, #8]
 8015258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	6a1b      	ldr	r3, [r3, #32]
 801525e:	f023 0210 	bic.w	r2, r3, #16
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	699b      	ldr	r3, [r3, #24]
 801526a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	6a1b      	ldr	r3, [r3, #32]
 8015270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015272:	697b      	ldr	r3, [r7, #20]
 8015274:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015278:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	031b      	lsls	r3, r3, #12
 801527e:	697a      	ldr	r2, [r7, #20]
 8015280:	4313      	orrs	r3, r2
 8015282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015284:	693b      	ldr	r3, [r7, #16]
 8015286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801528a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	011b      	lsls	r3, r3, #4
 8015290:	693a      	ldr	r2, [r7, #16]
 8015292:	4313      	orrs	r3, r2
 8015294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	697a      	ldr	r2, [r7, #20]
 801529a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	693a      	ldr	r2, [r7, #16]
 80152a0:	621a      	str	r2, [r3, #32]
}
 80152a2:	bf00      	nop
 80152a4:	371c      	adds	r7, #28
 80152a6:	46bd      	mov	sp, r7
 80152a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ac:	4770      	bx	lr

080152ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80152ae:	b480      	push	{r7}
 80152b0:	b085      	sub	sp, #20
 80152b2:	af00      	add	r7, sp, #0
 80152b4:	6078      	str	r0, [r7, #4]
 80152b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	689b      	ldr	r3, [r3, #8]
 80152bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80152c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80152c6:	683a      	ldr	r2, [r7, #0]
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	4313      	orrs	r3, r2
 80152cc:	f043 0307 	orr.w	r3, r3, #7
 80152d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	68fa      	ldr	r2, [r7, #12]
 80152d6:	609a      	str	r2, [r3, #8]
}
 80152d8:	bf00      	nop
 80152da:	3714      	adds	r7, #20
 80152dc:	46bd      	mov	sp, r7
 80152de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e2:	4770      	bx	lr

080152e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80152e4:	b480      	push	{r7}
 80152e6:	b087      	sub	sp, #28
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	60f8      	str	r0, [r7, #12]
 80152ec:	60b9      	str	r1, [r7, #8]
 80152ee:	607a      	str	r2, [r7, #4]
 80152f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	689b      	ldr	r3, [r3, #8]
 80152f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80152f8:	697b      	ldr	r3, [r7, #20]
 80152fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80152fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015300:	683b      	ldr	r3, [r7, #0]
 8015302:	021a      	lsls	r2, r3, #8
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	431a      	orrs	r2, r3
 8015308:	68bb      	ldr	r3, [r7, #8]
 801530a:	4313      	orrs	r3, r2
 801530c:	697a      	ldr	r2, [r7, #20]
 801530e:	4313      	orrs	r3, r2
 8015310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	697a      	ldr	r2, [r7, #20]
 8015316:	609a      	str	r2, [r3, #8]
}
 8015318:	bf00      	nop
 801531a:	371c      	adds	r7, #28
 801531c:	46bd      	mov	sp, r7
 801531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015322:	4770      	bx	lr

08015324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015324:	b480      	push	{r7}
 8015326:	b087      	sub	sp, #28
 8015328:	af00      	add	r7, sp, #0
 801532a:	60f8      	str	r0, [r7, #12]
 801532c:	60b9      	str	r1, [r7, #8]
 801532e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015330:	68bb      	ldr	r3, [r7, #8]
 8015332:	f003 031f 	and.w	r3, r3, #31
 8015336:	2201      	movs	r2, #1
 8015338:	fa02 f303 	lsl.w	r3, r2, r3
 801533c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	6a1a      	ldr	r2, [r3, #32]
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	43db      	mvns	r3, r3
 8015346:	401a      	ands	r2, r3
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	6a1a      	ldr	r2, [r3, #32]
 8015350:	68bb      	ldr	r3, [r7, #8]
 8015352:	f003 031f 	and.w	r3, r3, #31
 8015356:	6879      	ldr	r1, [r7, #4]
 8015358:	fa01 f303 	lsl.w	r3, r1, r3
 801535c:	431a      	orrs	r2, r3
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	621a      	str	r2, [r3, #32]
}
 8015362:	bf00      	nop
 8015364:	371c      	adds	r7, #28
 8015366:	46bd      	mov	sp, r7
 8015368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536c:	4770      	bx	lr

0801536e <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801536e:	b580      	push	{r7, lr}
 8015370:	b084      	sub	sp, #16
 8015372:	af00      	add	r7, sp, #0
 8015374:	6078      	str	r0, [r7, #4]
 8015376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8015378:	683b      	ldr	r3, [r7, #0]
 801537a:	2b04      	cmp	r3, #4
 801537c:	d00d      	beq.n	801539a <HAL_TIMEx_OCN_Start_IT+0x2c>
 801537e:	2b08      	cmp	r3, #8
 8015380:	d014      	beq.n	80153ac <HAL_TIMEx_OCN_Start_IT+0x3e>
 8015382:	2b00      	cmp	r3, #0
 8015384:	d000      	beq.n	8015388 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8015386:	e01a      	b.n	80153be <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	68da      	ldr	r2, [r3, #12]
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	f042 0202 	orr.w	r2, r2, #2
 8015396:	60da      	str	r2, [r3, #12]
      break;
 8015398:	e011      	b.n	80153be <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	68da      	ldr	r2, [r3, #12]
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	f042 0204 	orr.w	r2, r2, #4
 80153a8:	60da      	str	r2, [r3, #12]
      break;
 80153aa:	e008      	b.n	80153be <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	68da      	ldr	r2, [r3, #12]
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	f042 0208 	orr.w	r2, r2, #8
 80153ba:	60da      	str	r2, [r3, #12]
      break;
 80153bc:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	68da      	ldr	r2, [r3, #12]
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80153cc:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	2204      	movs	r2, #4
 80153d4:	6839      	ldr	r1, [r7, #0]
 80153d6:	4618      	mov	r0, r3
 80153d8:	f000 f976 	bl	80156c8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80153ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	689b      	ldr	r3, [r3, #8]
 80153f2:	f003 0307 	and.w	r3, r3, #7
 80153f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	2b06      	cmp	r3, #6
 80153fc:	d007      	beq.n	801540e <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	681a      	ldr	r2, [r3, #0]
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	f042 0201 	orr.w	r2, r2, #1
 801540c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801540e:	2300      	movs	r3, #0
}
 8015410:	4618      	mov	r0, r3
 8015412:	3710      	adds	r7, #16
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}

08015418 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b084      	sub	sp, #16
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8015422:	683b      	ldr	r3, [r7, #0]
 8015424:	2b04      	cmp	r3, #4
 8015426:	d00d      	beq.n	8015444 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 8015428:	2b08      	cmp	r3, #8
 801542a:	d014      	beq.n	8015456 <HAL_TIMEx_OCN_Stop_IT+0x3e>
 801542c:	2b00      	cmp	r3, #0
 801542e:	d000      	beq.n	8015432 <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8015430:	e01a      	b.n	8015468 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	68da      	ldr	r2, [r3, #12]
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	f022 0202 	bic.w	r2, r2, #2
 8015440:	60da      	str	r2, [r3, #12]
      break;
 8015442:	e011      	b.n	8015468 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	68da      	ldr	r2, [r3, #12]
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	f022 0204 	bic.w	r2, r2, #4
 8015452:	60da      	str	r2, [r3, #12]
      break;
 8015454:	e008      	b.n	8015468 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	68da      	ldr	r2, [r3, #12]
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	f022 0208 	bic.w	r2, r2, #8
 8015464:	60da      	str	r2, [r3, #12]
      break;
 8015466:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	2200      	movs	r2, #0
 801546e:	6839      	ldr	r1, [r7, #0]
 8015470:	4618      	mov	r0, r3
 8015472:	f000 f929 	bl	80156c8 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	6a1b      	ldr	r3, [r3, #32]
 801547c:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 801547e:	68fa      	ldr	r2, [r7, #12]
 8015480:	f240 4344 	movw	r3, #1092	; 0x444
 8015484:	4013      	ands	r3, r2
 8015486:	2b00      	cmp	r3, #0
 8015488:	d107      	bne.n	801549a <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	68da      	ldr	r2, [r3, #12]
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015498:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	6a1a      	ldr	r2, [r3, #32]
 80154a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80154a4:	4013      	ands	r3, r2
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d10f      	bne.n	80154ca <HAL_TIMEx_OCN_Stop_IT+0xb2>
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	6a1a      	ldr	r2, [r3, #32]
 80154b0:	f240 4344 	movw	r3, #1092	; 0x444
 80154b4:	4013      	ands	r3, r2
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d107      	bne.n	80154ca <HAL_TIMEx_OCN_Stop_IT+0xb2>
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80154c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	6a1a      	ldr	r2, [r3, #32]
 80154d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80154d4:	4013      	ands	r3, r2
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d10f      	bne.n	80154fa <HAL_TIMEx_OCN_Stop_IT+0xe2>
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	6a1a      	ldr	r2, [r3, #32]
 80154e0:	f240 4344 	movw	r3, #1092	; 0x444
 80154e4:	4013      	ands	r3, r2
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d107      	bne.n	80154fa <HAL_TIMEx_OCN_Stop_IT+0xe2>
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	681a      	ldr	r2, [r3, #0]
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	f022 0201 	bic.w	r2, r2, #1
 80154f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80154fa:	2300      	movs	r3, #0
}
 80154fc:	4618      	mov	r0, r3
 80154fe:	3710      	adds	r7, #16
 8015500:	46bd      	mov	sp, r7
 8015502:	bd80      	pop	{r7, pc}

08015504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015504:	b480      	push	{r7}
 8015506:	b085      	sub	sp, #20
 8015508:	af00      	add	r7, sp, #0
 801550a:	6078      	str	r0, [r7, #4]
 801550c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015514:	2b01      	cmp	r3, #1
 8015516:	d101      	bne.n	801551c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015518:	2302      	movs	r3, #2
 801551a:	e05a      	b.n	80155d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2201      	movs	r2, #1
 8015520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2202      	movs	r2, #2
 8015528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	685b      	ldr	r3, [r3, #4]
 8015532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	689b      	ldr	r3, [r3, #8]
 801553a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015544:	683b      	ldr	r3, [r7, #0]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	68fa      	ldr	r2, [r7, #12]
 801554a:	4313      	orrs	r3, r2
 801554c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	68fa      	ldr	r2, [r7, #12]
 8015554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	4a21      	ldr	r2, [pc, #132]	; (80155e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801555c:	4293      	cmp	r3, r2
 801555e:	d022      	beq.n	80155a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015568:	d01d      	beq.n	80155a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	4a1d      	ldr	r2, [pc, #116]	; (80155e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8015570:	4293      	cmp	r3, r2
 8015572:	d018      	beq.n	80155a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	4a1b      	ldr	r2, [pc, #108]	; (80155e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801557a:	4293      	cmp	r3, r2
 801557c:	d013      	beq.n	80155a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	4a1a      	ldr	r2, [pc, #104]	; (80155ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8015584:	4293      	cmp	r3, r2
 8015586:	d00e      	beq.n	80155a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	4a18      	ldr	r2, [pc, #96]	; (80155f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801558e:	4293      	cmp	r3, r2
 8015590:	d009      	beq.n	80155a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	4a17      	ldr	r2, [pc, #92]	; (80155f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8015598:	4293      	cmp	r3, r2
 801559a:	d004      	beq.n	80155a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	4a15      	ldr	r2, [pc, #84]	; (80155f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80155a2:	4293      	cmp	r3, r2
 80155a4:	d10c      	bne.n	80155c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80155a6:	68bb      	ldr	r3, [r7, #8]
 80155a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80155ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80155ae:	683b      	ldr	r3, [r7, #0]
 80155b0:	685b      	ldr	r3, [r3, #4]
 80155b2:	68ba      	ldr	r2, [r7, #8]
 80155b4:	4313      	orrs	r3, r2
 80155b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	68ba      	ldr	r2, [r7, #8]
 80155be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	2201      	movs	r2, #1
 80155c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	2200      	movs	r2, #0
 80155cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80155d0:	2300      	movs	r3, #0
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3714      	adds	r7, #20
 80155d6:	46bd      	mov	sp, r7
 80155d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155dc:	4770      	bx	lr
 80155de:	bf00      	nop
 80155e0:	40010000 	.word	0x40010000
 80155e4:	40000400 	.word	0x40000400
 80155e8:	40000800 	.word	0x40000800
 80155ec:	40000c00 	.word	0x40000c00
 80155f0:	40010400 	.word	0x40010400
 80155f4:	40014000 	.word	0x40014000
 80155f8:	40001800 	.word	0x40001800

080155fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80155fc:	b480      	push	{r7}
 80155fe:	b085      	sub	sp, #20
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8015606:	2300      	movs	r3, #0
 8015608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015610:	2b01      	cmp	r3, #1
 8015612:	d101      	bne.n	8015618 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8015614:	2302      	movs	r3, #2
 8015616:	e03d      	b.n	8015694 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2201      	movs	r2, #1
 801561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8015626:	683b      	ldr	r3, [r7, #0]
 8015628:	68db      	ldr	r3, [r3, #12]
 801562a:	4313      	orrs	r3, r2
 801562c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015634:	683b      	ldr	r3, [r7, #0]
 8015636:	689b      	ldr	r3, [r3, #8]
 8015638:	4313      	orrs	r3, r2
 801563a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	685b      	ldr	r3, [r3, #4]
 8015646:	4313      	orrs	r3, r2
 8015648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	4313      	orrs	r3, r2
 8015656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801565e:	683b      	ldr	r3, [r7, #0]
 8015660:	691b      	ldr	r3, [r3, #16]
 8015662:	4313      	orrs	r3, r2
 8015664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	695b      	ldr	r3, [r3, #20]
 8015670:	4313      	orrs	r3, r2
 8015672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	69db      	ldr	r3, [r3, #28]
 801567e:	4313      	orrs	r3, r2
 8015680:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	68fa      	ldr	r2, [r7, #12]
 8015688:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	2200      	movs	r2, #0
 801568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015692:	2300      	movs	r3, #0
}
 8015694:	4618      	mov	r0, r3
 8015696:	3714      	adds	r7, #20
 8015698:	46bd      	mov	sp, r7
 801569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569e:	4770      	bx	lr

080156a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80156a0:	b480      	push	{r7}
 80156a2:	b083      	sub	sp, #12
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80156a8:	bf00      	nop
 80156aa:	370c      	adds	r7, #12
 80156ac:	46bd      	mov	sp, r7
 80156ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b2:	4770      	bx	lr

080156b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80156b4:	b480      	push	{r7}
 80156b6:	b083      	sub	sp, #12
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80156bc:	bf00      	nop
 80156be:	370c      	adds	r7, #12
 80156c0:	46bd      	mov	sp, r7
 80156c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c6:	4770      	bx	lr

080156c8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80156c8:	b480      	push	{r7}
 80156ca:	b087      	sub	sp, #28
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	60f8      	str	r0, [r7, #12]
 80156d0:	60b9      	str	r1, [r7, #8]
 80156d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	f003 031f 	and.w	r3, r3, #31
 80156da:	2204      	movs	r2, #4
 80156dc:	fa02 f303 	lsl.w	r3, r2, r3
 80156e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	6a1a      	ldr	r2, [r3, #32]
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	43db      	mvns	r3, r3
 80156ea:	401a      	ands	r2, r3
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	6a1a      	ldr	r2, [r3, #32]
 80156f4:	68bb      	ldr	r3, [r7, #8]
 80156f6:	f003 031f 	and.w	r3, r3, #31
 80156fa:	6879      	ldr	r1, [r7, #4]
 80156fc:	fa01 f303 	lsl.w	r3, r1, r3
 8015700:	431a      	orrs	r2, r3
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	621a      	str	r2, [r3, #32]
}
 8015706:	bf00      	nop
 8015708:	371c      	adds	r7, #28
 801570a:	46bd      	mov	sp, r7
 801570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015710:	4770      	bx	lr

08015712 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015712:	b580      	push	{r7, lr}
 8015714:	b082      	sub	sp, #8
 8015716:	af00      	add	r7, sp, #0
 8015718:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d101      	bne.n	8015724 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015720:	2301      	movs	r3, #1
 8015722:	e03f      	b.n	80157a4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801572a:	b2db      	uxtb	r3, r3
 801572c:	2b00      	cmp	r3, #0
 801572e:	d106      	bne.n	801573e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2200      	movs	r2, #0
 8015734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015738:	6878      	ldr	r0, [r7, #4]
 801573a:	f7fb f8b1 	bl	80108a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	2224      	movs	r2, #36	; 0x24
 8015742:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	68da      	ldr	r2, [r3, #12]
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015754:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015756:	6878      	ldr	r0, [r7, #4]
 8015758:	f000 f90c 	bl	8015974 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	691a      	ldr	r2, [r3, #16]
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801576a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	695a      	ldr	r2, [r3, #20]
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801577a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	68da      	ldr	r2, [r3, #12]
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801578a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	2200      	movs	r2, #0
 8015790:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	2220      	movs	r2, #32
 8015796:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	2220      	movs	r2, #32
 801579e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80157a2:	2300      	movs	r3, #0
}
 80157a4:	4618      	mov	r0, r3
 80157a6:	3708      	adds	r7, #8
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}

080157ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b088      	sub	sp, #32
 80157b0:	af02      	add	r7, sp, #8
 80157b2:	60f8      	str	r0, [r7, #12]
 80157b4:	60b9      	str	r1, [r7, #8]
 80157b6:	603b      	str	r3, [r7, #0]
 80157b8:	4613      	mov	r3, r2
 80157ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80157bc:	2300      	movs	r3, #0
 80157be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80157c6:	b2db      	uxtb	r3, r3
 80157c8:	2b20      	cmp	r3, #32
 80157ca:	f040 8083 	bne.w	80158d4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d002      	beq.n	80157da <HAL_UART_Transmit+0x2e>
 80157d4:	88fb      	ldrh	r3, [r7, #6]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d101      	bne.n	80157de <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80157da:	2301      	movs	r3, #1
 80157dc:	e07b      	b.n	80158d6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80157e4:	2b01      	cmp	r3, #1
 80157e6:	d101      	bne.n	80157ec <HAL_UART_Transmit+0x40>
 80157e8:	2302      	movs	r3, #2
 80157ea:	e074      	b.n	80158d6 <HAL_UART_Transmit+0x12a>
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	2201      	movs	r2, #1
 80157f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	2200      	movs	r2, #0
 80157f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	2221      	movs	r2, #33	; 0x21
 80157fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8015802:	f7fb fa81 	bl	8010d08 <HAL_GetTick>
 8015806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	88fa      	ldrh	r2, [r7, #6]
 801580c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	88fa      	ldrh	r2, [r7, #6]
 8015812:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	2200      	movs	r2, #0
 8015818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801581c:	e042      	b.n	80158a4 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015822:	b29b      	uxth	r3, r3
 8015824:	3b01      	subs	r3, #1
 8015826:	b29a      	uxth	r2, r3
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	689b      	ldr	r3, [r3, #8]
 8015830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015834:	d122      	bne.n	801587c <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015836:	683b      	ldr	r3, [r7, #0]
 8015838:	9300      	str	r3, [sp, #0]
 801583a:	697b      	ldr	r3, [r7, #20]
 801583c:	2200      	movs	r2, #0
 801583e:	2180      	movs	r1, #128	; 0x80
 8015840:	68f8      	ldr	r0, [r7, #12]
 8015842:	f000 f84c 	bl	80158de <UART_WaitOnFlagUntilTimeout>
 8015846:	4603      	mov	r3, r0
 8015848:	2b00      	cmp	r3, #0
 801584a:	d001      	beq.n	8015850 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801584c:	2303      	movs	r3, #3
 801584e:	e042      	b.n	80158d6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8015850:	68bb      	ldr	r3, [r7, #8]
 8015852:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8015854:	693b      	ldr	r3, [r7, #16]
 8015856:	881b      	ldrh	r3, [r3, #0]
 8015858:	461a      	mov	r2, r3
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015862:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	691b      	ldr	r3, [r3, #16]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d103      	bne.n	8015874 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801586c:	68bb      	ldr	r3, [r7, #8]
 801586e:	3302      	adds	r3, #2
 8015870:	60bb      	str	r3, [r7, #8]
 8015872:	e017      	b.n	80158a4 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8015874:	68bb      	ldr	r3, [r7, #8]
 8015876:	3301      	adds	r3, #1
 8015878:	60bb      	str	r3, [r7, #8]
 801587a:	e013      	b.n	80158a4 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801587c:	683b      	ldr	r3, [r7, #0]
 801587e:	9300      	str	r3, [sp, #0]
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	2200      	movs	r2, #0
 8015884:	2180      	movs	r1, #128	; 0x80
 8015886:	68f8      	ldr	r0, [r7, #12]
 8015888:	f000 f829 	bl	80158de <UART_WaitOnFlagUntilTimeout>
 801588c:	4603      	mov	r3, r0
 801588e:	2b00      	cmp	r3, #0
 8015890:	d001      	beq.n	8015896 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8015892:	2303      	movs	r3, #3
 8015894:	e01f      	b.n	80158d6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8015896:	68bb      	ldr	r3, [r7, #8]
 8015898:	1c5a      	adds	r2, r3, #1
 801589a:	60ba      	str	r2, [r7, #8]
 801589c:	781a      	ldrb	r2, [r3, #0]
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80158a8:	b29b      	uxth	r3, r3
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d1b7      	bne.n	801581e <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80158ae:	683b      	ldr	r3, [r7, #0]
 80158b0:	9300      	str	r3, [sp, #0]
 80158b2:	697b      	ldr	r3, [r7, #20]
 80158b4:	2200      	movs	r2, #0
 80158b6:	2140      	movs	r1, #64	; 0x40
 80158b8:	68f8      	ldr	r0, [r7, #12]
 80158ba:	f000 f810 	bl	80158de <UART_WaitOnFlagUntilTimeout>
 80158be:	4603      	mov	r3, r0
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d001      	beq.n	80158c8 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80158c4:	2303      	movs	r3, #3
 80158c6:	e006      	b.n	80158d6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	2220      	movs	r2, #32
 80158cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80158d0:	2300      	movs	r3, #0
 80158d2:	e000      	b.n	80158d6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80158d4:	2302      	movs	r3, #2
  }
}
 80158d6:	4618      	mov	r0, r3
 80158d8:	3718      	adds	r7, #24
 80158da:	46bd      	mov	sp, r7
 80158dc:	bd80      	pop	{r7, pc}

080158de <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80158de:	b580      	push	{r7, lr}
 80158e0:	b084      	sub	sp, #16
 80158e2:	af00      	add	r7, sp, #0
 80158e4:	60f8      	str	r0, [r7, #12]
 80158e6:	60b9      	str	r1, [r7, #8]
 80158e8:	603b      	str	r3, [r7, #0]
 80158ea:	4613      	mov	r3, r2
 80158ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80158ee:	e02c      	b.n	801594a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80158f0:	69bb      	ldr	r3, [r7, #24]
 80158f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158f6:	d028      	beq.n	801594a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80158f8:	69bb      	ldr	r3, [r7, #24]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d007      	beq.n	801590e <UART_WaitOnFlagUntilTimeout+0x30>
 80158fe:	f7fb fa03 	bl	8010d08 <HAL_GetTick>
 8015902:	4602      	mov	r2, r0
 8015904:	683b      	ldr	r3, [r7, #0]
 8015906:	1ad3      	subs	r3, r2, r3
 8015908:	69ba      	ldr	r2, [r7, #24]
 801590a:	429a      	cmp	r2, r3
 801590c:	d21d      	bcs.n	801594a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	68da      	ldr	r2, [r3, #12]
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801591c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	695a      	ldr	r2, [r3, #20]
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	f022 0201 	bic.w	r2, r2, #1
 801592c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	2220      	movs	r2, #32
 8015932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	2220      	movs	r2, #32
 801593a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	2200      	movs	r2, #0
 8015942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8015946:	2303      	movs	r3, #3
 8015948:	e00f      	b.n	801596a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	681a      	ldr	r2, [r3, #0]
 8015950:	68bb      	ldr	r3, [r7, #8]
 8015952:	4013      	ands	r3, r2
 8015954:	68ba      	ldr	r2, [r7, #8]
 8015956:	429a      	cmp	r2, r3
 8015958:	bf0c      	ite	eq
 801595a:	2301      	moveq	r3, #1
 801595c:	2300      	movne	r3, #0
 801595e:	b2db      	uxtb	r3, r3
 8015960:	461a      	mov	r2, r3
 8015962:	79fb      	ldrb	r3, [r7, #7]
 8015964:	429a      	cmp	r2, r3
 8015966:	d0c3      	beq.n	80158f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8015968:	2300      	movs	r3, #0
}
 801596a:	4618      	mov	r0, r3
 801596c:	3710      	adds	r7, #16
 801596e:	46bd      	mov	sp, r7
 8015970:	bd80      	pop	{r7, pc}
	...

08015974 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015978:	b085      	sub	sp, #20
 801597a:	af00      	add	r7, sp, #0
 801597c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	691b      	ldr	r3, [r3, #16]
 8015984:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	68da      	ldr	r2, [r3, #12]
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	430a      	orrs	r2, r1
 8015992:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	689a      	ldr	r2, [r3, #8]
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	691b      	ldr	r3, [r3, #16]
 801599c:	431a      	orrs	r2, r3
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	695b      	ldr	r3, [r3, #20]
 80159a2:	431a      	orrs	r2, r3
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	69db      	ldr	r3, [r3, #28]
 80159a8:	4313      	orrs	r3, r2
 80159aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	68db      	ldr	r3, [r3, #12]
 80159b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80159b6:	f023 030c 	bic.w	r3, r3, #12
 80159ba:	687a      	ldr	r2, [r7, #4]
 80159bc:	6812      	ldr	r2, [r2, #0]
 80159be:	68f9      	ldr	r1, [r7, #12]
 80159c0:	430b      	orrs	r3, r1
 80159c2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	695b      	ldr	r3, [r3, #20]
 80159ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	699a      	ldr	r2, [r3, #24]
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	430a      	orrs	r2, r1
 80159d8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	69db      	ldr	r3, [r3, #28]
 80159de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80159e2:	f040 818b 	bne.w	8015cfc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	4ac1      	ldr	r2, [pc, #772]	; (8015cf0 <UART_SetConfig+0x37c>)
 80159ec:	4293      	cmp	r3, r2
 80159ee:	d005      	beq.n	80159fc <UART_SetConfig+0x88>
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	4abf      	ldr	r2, [pc, #764]	; (8015cf4 <UART_SetConfig+0x380>)
 80159f6:	4293      	cmp	r3, r2
 80159f8:	f040 80bd 	bne.w	8015b76 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80159fc:	f7fd fdce 	bl	801359c <HAL_RCC_GetPCLK2Freq>
 8015a00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015a02:	68bb      	ldr	r3, [r7, #8]
 8015a04:	461d      	mov	r5, r3
 8015a06:	f04f 0600 	mov.w	r6, #0
 8015a0a:	46a8      	mov	r8, r5
 8015a0c:	46b1      	mov	r9, r6
 8015a0e:	eb18 0308 	adds.w	r3, r8, r8
 8015a12:	eb49 0409 	adc.w	r4, r9, r9
 8015a16:	4698      	mov	r8, r3
 8015a18:	46a1      	mov	r9, r4
 8015a1a:	eb18 0805 	adds.w	r8, r8, r5
 8015a1e:	eb49 0906 	adc.w	r9, r9, r6
 8015a22:	f04f 0100 	mov.w	r1, #0
 8015a26:	f04f 0200 	mov.w	r2, #0
 8015a2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015a2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015a32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015a36:	4688      	mov	r8, r1
 8015a38:	4691      	mov	r9, r2
 8015a3a:	eb18 0005 	adds.w	r0, r8, r5
 8015a3e:	eb49 0106 	adc.w	r1, r9, r6
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	685b      	ldr	r3, [r3, #4]
 8015a46:	461d      	mov	r5, r3
 8015a48:	f04f 0600 	mov.w	r6, #0
 8015a4c:	196b      	adds	r3, r5, r5
 8015a4e:	eb46 0406 	adc.w	r4, r6, r6
 8015a52:	461a      	mov	r2, r3
 8015a54:	4623      	mov	r3, r4
 8015a56:	f7f3 f82f 	bl	8008ab8 <__aeabi_uldivmod>
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	460c      	mov	r4, r1
 8015a5e:	461a      	mov	r2, r3
 8015a60:	4ba5      	ldr	r3, [pc, #660]	; (8015cf8 <UART_SetConfig+0x384>)
 8015a62:	fba3 2302 	umull	r2, r3, r3, r2
 8015a66:	095b      	lsrs	r3, r3, #5
 8015a68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015a6c:	68bb      	ldr	r3, [r7, #8]
 8015a6e:	461d      	mov	r5, r3
 8015a70:	f04f 0600 	mov.w	r6, #0
 8015a74:	46a9      	mov	r9, r5
 8015a76:	46b2      	mov	sl, r6
 8015a78:	eb19 0309 	adds.w	r3, r9, r9
 8015a7c:	eb4a 040a 	adc.w	r4, sl, sl
 8015a80:	4699      	mov	r9, r3
 8015a82:	46a2      	mov	sl, r4
 8015a84:	eb19 0905 	adds.w	r9, r9, r5
 8015a88:	eb4a 0a06 	adc.w	sl, sl, r6
 8015a8c:	f04f 0100 	mov.w	r1, #0
 8015a90:	f04f 0200 	mov.w	r2, #0
 8015a94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015a98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015a9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015aa0:	4689      	mov	r9, r1
 8015aa2:	4692      	mov	sl, r2
 8015aa4:	eb19 0005 	adds.w	r0, r9, r5
 8015aa8:	eb4a 0106 	adc.w	r1, sl, r6
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	685b      	ldr	r3, [r3, #4]
 8015ab0:	461d      	mov	r5, r3
 8015ab2:	f04f 0600 	mov.w	r6, #0
 8015ab6:	196b      	adds	r3, r5, r5
 8015ab8:	eb46 0406 	adc.w	r4, r6, r6
 8015abc:	461a      	mov	r2, r3
 8015abe:	4623      	mov	r3, r4
 8015ac0:	f7f2 fffa 	bl	8008ab8 <__aeabi_uldivmod>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	460c      	mov	r4, r1
 8015ac8:	461a      	mov	r2, r3
 8015aca:	4b8b      	ldr	r3, [pc, #556]	; (8015cf8 <UART_SetConfig+0x384>)
 8015acc:	fba3 1302 	umull	r1, r3, r3, r2
 8015ad0:	095b      	lsrs	r3, r3, #5
 8015ad2:	2164      	movs	r1, #100	; 0x64
 8015ad4:	fb01 f303 	mul.w	r3, r1, r3
 8015ad8:	1ad3      	subs	r3, r2, r3
 8015ada:	00db      	lsls	r3, r3, #3
 8015adc:	3332      	adds	r3, #50	; 0x32
 8015ade:	4a86      	ldr	r2, [pc, #536]	; (8015cf8 <UART_SetConfig+0x384>)
 8015ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8015ae4:	095b      	lsrs	r3, r3, #5
 8015ae6:	005b      	lsls	r3, r3, #1
 8015ae8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015aec:	4498      	add	r8, r3
 8015aee:	68bb      	ldr	r3, [r7, #8]
 8015af0:	461d      	mov	r5, r3
 8015af2:	f04f 0600 	mov.w	r6, #0
 8015af6:	46a9      	mov	r9, r5
 8015af8:	46b2      	mov	sl, r6
 8015afa:	eb19 0309 	adds.w	r3, r9, r9
 8015afe:	eb4a 040a 	adc.w	r4, sl, sl
 8015b02:	4699      	mov	r9, r3
 8015b04:	46a2      	mov	sl, r4
 8015b06:	eb19 0905 	adds.w	r9, r9, r5
 8015b0a:	eb4a 0a06 	adc.w	sl, sl, r6
 8015b0e:	f04f 0100 	mov.w	r1, #0
 8015b12:	f04f 0200 	mov.w	r2, #0
 8015b16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015b1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015b1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015b22:	4689      	mov	r9, r1
 8015b24:	4692      	mov	sl, r2
 8015b26:	eb19 0005 	adds.w	r0, r9, r5
 8015b2a:	eb4a 0106 	adc.w	r1, sl, r6
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	685b      	ldr	r3, [r3, #4]
 8015b32:	461d      	mov	r5, r3
 8015b34:	f04f 0600 	mov.w	r6, #0
 8015b38:	196b      	adds	r3, r5, r5
 8015b3a:	eb46 0406 	adc.w	r4, r6, r6
 8015b3e:	461a      	mov	r2, r3
 8015b40:	4623      	mov	r3, r4
 8015b42:	f7f2 ffb9 	bl	8008ab8 <__aeabi_uldivmod>
 8015b46:	4603      	mov	r3, r0
 8015b48:	460c      	mov	r4, r1
 8015b4a:	461a      	mov	r2, r3
 8015b4c:	4b6a      	ldr	r3, [pc, #424]	; (8015cf8 <UART_SetConfig+0x384>)
 8015b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8015b52:	095b      	lsrs	r3, r3, #5
 8015b54:	2164      	movs	r1, #100	; 0x64
 8015b56:	fb01 f303 	mul.w	r3, r1, r3
 8015b5a:	1ad3      	subs	r3, r2, r3
 8015b5c:	00db      	lsls	r3, r3, #3
 8015b5e:	3332      	adds	r3, #50	; 0x32
 8015b60:	4a65      	ldr	r2, [pc, #404]	; (8015cf8 <UART_SetConfig+0x384>)
 8015b62:	fba2 2303 	umull	r2, r3, r2, r3
 8015b66:	095b      	lsrs	r3, r3, #5
 8015b68:	f003 0207 	and.w	r2, r3, #7
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	4442      	add	r2, r8
 8015b72:	609a      	str	r2, [r3, #8]
 8015b74:	e26f      	b.n	8016056 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8015b76:	f7fd fcfd 	bl	8013574 <HAL_RCC_GetPCLK1Freq>
 8015b7a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015b7c:	68bb      	ldr	r3, [r7, #8]
 8015b7e:	461d      	mov	r5, r3
 8015b80:	f04f 0600 	mov.w	r6, #0
 8015b84:	46a8      	mov	r8, r5
 8015b86:	46b1      	mov	r9, r6
 8015b88:	eb18 0308 	adds.w	r3, r8, r8
 8015b8c:	eb49 0409 	adc.w	r4, r9, r9
 8015b90:	4698      	mov	r8, r3
 8015b92:	46a1      	mov	r9, r4
 8015b94:	eb18 0805 	adds.w	r8, r8, r5
 8015b98:	eb49 0906 	adc.w	r9, r9, r6
 8015b9c:	f04f 0100 	mov.w	r1, #0
 8015ba0:	f04f 0200 	mov.w	r2, #0
 8015ba4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015ba8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015bac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015bb0:	4688      	mov	r8, r1
 8015bb2:	4691      	mov	r9, r2
 8015bb4:	eb18 0005 	adds.w	r0, r8, r5
 8015bb8:	eb49 0106 	adc.w	r1, r9, r6
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	685b      	ldr	r3, [r3, #4]
 8015bc0:	461d      	mov	r5, r3
 8015bc2:	f04f 0600 	mov.w	r6, #0
 8015bc6:	196b      	adds	r3, r5, r5
 8015bc8:	eb46 0406 	adc.w	r4, r6, r6
 8015bcc:	461a      	mov	r2, r3
 8015bce:	4623      	mov	r3, r4
 8015bd0:	f7f2 ff72 	bl	8008ab8 <__aeabi_uldivmod>
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	460c      	mov	r4, r1
 8015bd8:	461a      	mov	r2, r3
 8015bda:	4b47      	ldr	r3, [pc, #284]	; (8015cf8 <UART_SetConfig+0x384>)
 8015bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8015be0:	095b      	lsrs	r3, r3, #5
 8015be2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015be6:	68bb      	ldr	r3, [r7, #8]
 8015be8:	461d      	mov	r5, r3
 8015bea:	f04f 0600 	mov.w	r6, #0
 8015bee:	46a9      	mov	r9, r5
 8015bf0:	46b2      	mov	sl, r6
 8015bf2:	eb19 0309 	adds.w	r3, r9, r9
 8015bf6:	eb4a 040a 	adc.w	r4, sl, sl
 8015bfa:	4699      	mov	r9, r3
 8015bfc:	46a2      	mov	sl, r4
 8015bfe:	eb19 0905 	adds.w	r9, r9, r5
 8015c02:	eb4a 0a06 	adc.w	sl, sl, r6
 8015c06:	f04f 0100 	mov.w	r1, #0
 8015c0a:	f04f 0200 	mov.w	r2, #0
 8015c0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015c12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015c16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015c1a:	4689      	mov	r9, r1
 8015c1c:	4692      	mov	sl, r2
 8015c1e:	eb19 0005 	adds.w	r0, r9, r5
 8015c22:	eb4a 0106 	adc.w	r1, sl, r6
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	685b      	ldr	r3, [r3, #4]
 8015c2a:	461d      	mov	r5, r3
 8015c2c:	f04f 0600 	mov.w	r6, #0
 8015c30:	196b      	adds	r3, r5, r5
 8015c32:	eb46 0406 	adc.w	r4, r6, r6
 8015c36:	461a      	mov	r2, r3
 8015c38:	4623      	mov	r3, r4
 8015c3a:	f7f2 ff3d 	bl	8008ab8 <__aeabi_uldivmod>
 8015c3e:	4603      	mov	r3, r0
 8015c40:	460c      	mov	r4, r1
 8015c42:	461a      	mov	r2, r3
 8015c44:	4b2c      	ldr	r3, [pc, #176]	; (8015cf8 <UART_SetConfig+0x384>)
 8015c46:	fba3 1302 	umull	r1, r3, r3, r2
 8015c4a:	095b      	lsrs	r3, r3, #5
 8015c4c:	2164      	movs	r1, #100	; 0x64
 8015c4e:	fb01 f303 	mul.w	r3, r1, r3
 8015c52:	1ad3      	subs	r3, r2, r3
 8015c54:	00db      	lsls	r3, r3, #3
 8015c56:	3332      	adds	r3, #50	; 0x32
 8015c58:	4a27      	ldr	r2, [pc, #156]	; (8015cf8 <UART_SetConfig+0x384>)
 8015c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8015c5e:	095b      	lsrs	r3, r3, #5
 8015c60:	005b      	lsls	r3, r3, #1
 8015c62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015c66:	4498      	add	r8, r3
 8015c68:	68bb      	ldr	r3, [r7, #8]
 8015c6a:	461d      	mov	r5, r3
 8015c6c:	f04f 0600 	mov.w	r6, #0
 8015c70:	46a9      	mov	r9, r5
 8015c72:	46b2      	mov	sl, r6
 8015c74:	eb19 0309 	adds.w	r3, r9, r9
 8015c78:	eb4a 040a 	adc.w	r4, sl, sl
 8015c7c:	4699      	mov	r9, r3
 8015c7e:	46a2      	mov	sl, r4
 8015c80:	eb19 0905 	adds.w	r9, r9, r5
 8015c84:	eb4a 0a06 	adc.w	sl, sl, r6
 8015c88:	f04f 0100 	mov.w	r1, #0
 8015c8c:	f04f 0200 	mov.w	r2, #0
 8015c90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015c94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015c98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015c9c:	4689      	mov	r9, r1
 8015c9e:	4692      	mov	sl, r2
 8015ca0:	eb19 0005 	adds.w	r0, r9, r5
 8015ca4:	eb4a 0106 	adc.w	r1, sl, r6
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	685b      	ldr	r3, [r3, #4]
 8015cac:	461d      	mov	r5, r3
 8015cae:	f04f 0600 	mov.w	r6, #0
 8015cb2:	196b      	adds	r3, r5, r5
 8015cb4:	eb46 0406 	adc.w	r4, r6, r6
 8015cb8:	461a      	mov	r2, r3
 8015cba:	4623      	mov	r3, r4
 8015cbc:	f7f2 fefc 	bl	8008ab8 <__aeabi_uldivmod>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	460c      	mov	r4, r1
 8015cc4:	461a      	mov	r2, r3
 8015cc6:	4b0c      	ldr	r3, [pc, #48]	; (8015cf8 <UART_SetConfig+0x384>)
 8015cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8015ccc:	095b      	lsrs	r3, r3, #5
 8015cce:	2164      	movs	r1, #100	; 0x64
 8015cd0:	fb01 f303 	mul.w	r3, r1, r3
 8015cd4:	1ad3      	subs	r3, r2, r3
 8015cd6:	00db      	lsls	r3, r3, #3
 8015cd8:	3332      	adds	r3, #50	; 0x32
 8015cda:	4a07      	ldr	r2, [pc, #28]	; (8015cf8 <UART_SetConfig+0x384>)
 8015cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8015ce0:	095b      	lsrs	r3, r3, #5
 8015ce2:	f003 0207 	and.w	r2, r3, #7
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	4442      	add	r2, r8
 8015cec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8015cee:	e1b2      	b.n	8016056 <UART_SetConfig+0x6e2>
 8015cf0:	40011000 	.word	0x40011000
 8015cf4:	40011400 	.word	0x40011400
 8015cf8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	4ad7      	ldr	r2, [pc, #860]	; (8016060 <UART_SetConfig+0x6ec>)
 8015d02:	4293      	cmp	r3, r2
 8015d04:	d005      	beq.n	8015d12 <UART_SetConfig+0x39e>
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	4ad6      	ldr	r2, [pc, #856]	; (8016064 <UART_SetConfig+0x6f0>)
 8015d0c:	4293      	cmp	r3, r2
 8015d0e:	f040 80d1 	bne.w	8015eb4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8015d12:	f7fd fc43 	bl	801359c <HAL_RCC_GetPCLK2Freq>
 8015d16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015d18:	68bb      	ldr	r3, [r7, #8]
 8015d1a:	469a      	mov	sl, r3
 8015d1c:	f04f 0b00 	mov.w	fp, #0
 8015d20:	46d0      	mov	r8, sl
 8015d22:	46d9      	mov	r9, fp
 8015d24:	eb18 0308 	adds.w	r3, r8, r8
 8015d28:	eb49 0409 	adc.w	r4, r9, r9
 8015d2c:	4698      	mov	r8, r3
 8015d2e:	46a1      	mov	r9, r4
 8015d30:	eb18 080a 	adds.w	r8, r8, sl
 8015d34:	eb49 090b 	adc.w	r9, r9, fp
 8015d38:	f04f 0100 	mov.w	r1, #0
 8015d3c:	f04f 0200 	mov.w	r2, #0
 8015d40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015d44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015d48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015d4c:	4688      	mov	r8, r1
 8015d4e:	4691      	mov	r9, r2
 8015d50:	eb1a 0508 	adds.w	r5, sl, r8
 8015d54:	eb4b 0609 	adc.w	r6, fp, r9
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	685b      	ldr	r3, [r3, #4]
 8015d5c:	4619      	mov	r1, r3
 8015d5e:	f04f 0200 	mov.w	r2, #0
 8015d62:	f04f 0300 	mov.w	r3, #0
 8015d66:	f04f 0400 	mov.w	r4, #0
 8015d6a:	0094      	lsls	r4, r2, #2
 8015d6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015d70:	008b      	lsls	r3, r1, #2
 8015d72:	461a      	mov	r2, r3
 8015d74:	4623      	mov	r3, r4
 8015d76:	4628      	mov	r0, r5
 8015d78:	4631      	mov	r1, r6
 8015d7a:	f7f2 fe9d 	bl	8008ab8 <__aeabi_uldivmod>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	460c      	mov	r4, r1
 8015d82:	461a      	mov	r2, r3
 8015d84:	4bb8      	ldr	r3, [pc, #736]	; (8016068 <UART_SetConfig+0x6f4>)
 8015d86:	fba3 2302 	umull	r2, r3, r3, r2
 8015d8a:	095b      	lsrs	r3, r3, #5
 8015d8c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015d90:	68bb      	ldr	r3, [r7, #8]
 8015d92:	469b      	mov	fp, r3
 8015d94:	f04f 0c00 	mov.w	ip, #0
 8015d98:	46d9      	mov	r9, fp
 8015d9a:	46e2      	mov	sl, ip
 8015d9c:	eb19 0309 	adds.w	r3, r9, r9
 8015da0:	eb4a 040a 	adc.w	r4, sl, sl
 8015da4:	4699      	mov	r9, r3
 8015da6:	46a2      	mov	sl, r4
 8015da8:	eb19 090b 	adds.w	r9, r9, fp
 8015dac:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015db0:	f04f 0100 	mov.w	r1, #0
 8015db4:	f04f 0200 	mov.w	r2, #0
 8015db8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015dbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015dc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015dc4:	4689      	mov	r9, r1
 8015dc6:	4692      	mov	sl, r2
 8015dc8:	eb1b 0509 	adds.w	r5, fp, r9
 8015dcc:	eb4c 060a 	adc.w	r6, ip, sl
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	685b      	ldr	r3, [r3, #4]
 8015dd4:	4619      	mov	r1, r3
 8015dd6:	f04f 0200 	mov.w	r2, #0
 8015dda:	f04f 0300 	mov.w	r3, #0
 8015dde:	f04f 0400 	mov.w	r4, #0
 8015de2:	0094      	lsls	r4, r2, #2
 8015de4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015de8:	008b      	lsls	r3, r1, #2
 8015dea:	461a      	mov	r2, r3
 8015dec:	4623      	mov	r3, r4
 8015dee:	4628      	mov	r0, r5
 8015df0:	4631      	mov	r1, r6
 8015df2:	f7f2 fe61 	bl	8008ab8 <__aeabi_uldivmod>
 8015df6:	4603      	mov	r3, r0
 8015df8:	460c      	mov	r4, r1
 8015dfa:	461a      	mov	r2, r3
 8015dfc:	4b9a      	ldr	r3, [pc, #616]	; (8016068 <UART_SetConfig+0x6f4>)
 8015dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8015e02:	095b      	lsrs	r3, r3, #5
 8015e04:	2164      	movs	r1, #100	; 0x64
 8015e06:	fb01 f303 	mul.w	r3, r1, r3
 8015e0a:	1ad3      	subs	r3, r2, r3
 8015e0c:	011b      	lsls	r3, r3, #4
 8015e0e:	3332      	adds	r3, #50	; 0x32
 8015e10:	4a95      	ldr	r2, [pc, #596]	; (8016068 <UART_SetConfig+0x6f4>)
 8015e12:	fba2 2303 	umull	r2, r3, r2, r3
 8015e16:	095b      	lsrs	r3, r3, #5
 8015e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015e1c:	4498      	add	r8, r3
 8015e1e:	68bb      	ldr	r3, [r7, #8]
 8015e20:	469b      	mov	fp, r3
 8015e22:	f04f 0c00 	mov.w	ip, #0
 8015e26:	46d9      	mov	r9, fp
 8015e28:	46e2      	mov	sl, ip
 8015e2a:	eb19 0309 	adds.w	r3, r9, r9
 8015e2e:	eb4a 040a 	adc.w	r4, sl, sl
 8015e32:	4699      	mov	r9, r3
 8015e34:	46a2      	mov	sl, r4
 8015e36:	eb19 090b 	adds.w	r9, r9, fp
 8015e3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015e3e:	f04f 0100 	mov.w	r1, #0
 8015e42:	f04f 0200 	mov.w	r2, #0
 8015e46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015e4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015e4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015e52:	4689      	mov	r9, r1
 8015e54:	4692      	mov	sl, r2
 8015e56:	eb1b 0509 	adds.w	r5, fp, r9
 8015e5a:	eb4c 060a 	adc.w	r6, ip, sl
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	685b      	ldr	r3, [r3, #4]
 8015e62:	4619      	mov	r1, r3
 8015e64:	f04f 0200 	mov.w	r2, #0
 8015e68:	f04f 0300 	mov.w	r3, #0
 8015e6c:	f04f 0400 	mov.w	r4, #0
 8015e70:	0094      	lsls	r4, r2, #2
 8015e72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015e76:	008b      	lsls	r3, r1, #2
 8015e78:	461a      	mov	r2, r3
 8015e7a:	4623      	mov	r3, r4
 8015e7c:	4628      	mov	r0, r5
 8015e7e:	4631      	mov	r1, r6
 8015e80:	f7f2 fe1a 	bl	8008ab8 <__aeabi_uldivmod>
 8015e84:	4603      	mov	r3, r0
 8015e86:	460c      	mov	r4, r1
 8015e88:	461a      	mov	r2, r3
 8015e8a:	4b77      	ldr	r3, [pc, #476]	; (8016068 <UART_SetConfig+0x6f4>)
 8015e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8015e90:	095b      	lsrs	r3, r3, #5
 8015e92:	2164      	movs	r1, #100	; 0x64
 8015e94:	fb01 f303 	mul.w	r3, r1, r3
 8015e98:	1ad3      	subs	r3, r2, r3
 8015e9a:	011b      	lsls	r3, r3, #4
 8015e9c:	3332      	adds	r3, #50	; 0x32
 8015e9e:	4a72      	ldr	r2, [pc, #456]	; (8016068 <UART_SetConfig+0x6f4>)
 8015ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8015ea4:	095b      	lsrs	r3, r3, #5
 8015ea6:	f003 020f 	and.w	r2, r3, #15
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	4442      	add	r2, r8
 8015eb0:	609a      	str	r2, [r3, #8]
 8015eb2:	e0d0      	b.n	8016056 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8015eb4:	f7fd fb5e 	bl	8013574 <HAL_RCC_GetPCLK1Freq>
 8015eb8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015eba:	68bb      	ldr	r3, [r7, #8]
 8015ebc:	469a      	mov	sl, r3
 8015ebe:	f04f 0b00 	mov.w	fp, #0
 8015ec2:	46d0      	mov	r8, sl
 8015ec4:	46d9      	mov	r9, fp
 8015ec6:	eb18 0308 	adds.w	r3, r8, r8
 8015eca:	eb49 0409 	adc.w	r4, r9, r9
 8015ece:	4698      	mov	r8, r3
 8015ed0:	46a1      	mov	r9, r4
 8015ed2:	eb18 080a 	adds.w	r8, r8, sl
 8015ed6:	eb49 090b 	adc.w	r9, r9, fp
 8015eda:	f04f 0100 	mov.w	r1, #0
 8015ede:	f04f 0200 	mov.w	r2, #0
 8015ee2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015ee6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015eea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015eee:	4688      	mov	r8, r1
 8015ef0:	4691      	mov	r9, r2
 8015ef2:	eb1a 0508 	adds.w	r5, sl, r8
 8015ef6:	eb4b 0609 	adc.w	r6, fp, r9
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	685b      	ldr	r3, [r3, #4]
 8015efe:	4619      	mov	r1, r3
 8015f00:	f04f 0200 	mov.w	r2, #0
 8015f04:	f04f 0300 	mov.w	r3, #0
 8015f08:	f04f 0400 	mov.w	r4, #0
 8015f0c:	0094      	lsls	r4, r2, #2
 8015f0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015f12:	008b      	lsls	r3, r1, #2
 8015f14:	461a      	mov	r2, r3
 8015f16:	4623      	mov	r3, r4
 8015f18:	4628      	mov	r0, r5
 8015f1a:	4631      	mov	r1, r6
 8015f1c:	f7f2 fdcc 	bl	8008ab8 <__aeabi_uldivmod>
 8015f20:	4603      	mov	r3, r0
 8015f22:	460c      	mov	r4, r1
 8015f24:	461a      	mov	r2, r3
 8015f26:	4b50      	ldr	r3, [pc, #320]	; (8016068 <UART_SetConfig+0x6f4>)
 8015f28:	fba3 2302 	umull	r2, r3, r3, r2
 8015f2c:	095b      	lsrs	r3, r3, #5
 8015f2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015f32:	68bb      	ldr	r3, [r7, #8]
 8015f34:	469b      	mov	fp, r3
 8015f36:	f04f 0c00 	mov.w	ip, #0
 8015f3a:	46d9      	mov	r9, fp
 8015f3c:	46e2      	mov	sl, ip
 8015f3e:	eb19 0309 	adds.w	r3, r9, r9
 8015f42:	eb4a 040a 	adc.w	r4, sl, sl
 8015f46:	4699      	mov	r9, r3
 8015f48:	46a2      	mov	sl, r4
 8015f4a:	eb19 090b 	adds.w	r9, r9, fp
 8015f4e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015f52:	f04f 0100 	mov.w	r1, #0
 8015f56:	f04f 0200 	mov.w	r2, #0
 8015f5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015f5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015f62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015f66:	4689      	mov	r9, r1
 8015f68:	4692      	mov	sl, r2
 8015f6a:	eb1b 0509 	adds.w	r5, fp, r9
 8015f6e:	eb4c 060a 	adc.w	r6, ip, sl
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	685b      	ldr	r3, [r3, #4]
 8015f76:	4619      	mov	r1, r3
 8015f78:	f04f 0200 	mov.w	r2, #0
 8015f7c:	f04f 0300 	mov.w	r3, #0
 8015f80:	f04f 0400 	mov.w	r4, #0
 8015f84:	0094      	lsls	r4, r2, #2
 8015f86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015f8a:	008b      	lsls	r3, r1, #2
 8015f8c:	461a      	mov	r2, r3
 8015f8e:	4623      	mov	r3, r4
 8015f90:	4628      	mov	r0, r5
 8015f92:	4631      	mov	r1, r6
 8015f94:	f7f2 fd90 	bl	8008ab8 <__aeabi_uldivmod>
 8015f98:	4603      	mov	r3, r0
 8015f9a:	460c      	mov	r4, r1
 8015f9c:	461a      	mov	r2, r3
 8015f9e:	4b32      	ldr	r3, [pc, #200]	; (8016068 <UART_SetConfig+0x6f4>)
 8015fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8015fa4:	095b      	lsrs	r3, r3, #5
 8015fa6:	2164      	movs	r1, #100	; 0x64
 8015fa8:	fb01 f303 	mul.w	r3, r1, r3
 8015fac:	1ad3      	subs	r3, r2, r3
 8015fae:	011b      	lsls	r3, r3, #4
 8015fb0:	3332      	adds	r3, #50	; 0x32
 8015fb2:	4a2d      	ldr	r2, [pc, #180]	; (8016068 <UART_SetConfig+0x6f4>)
 8015fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8015fb8:	095b      	lsrs	r3, r3, #5
 8015fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015fbe:	4498      	add	r8, r3
 8015fc0:	68bb      	ldr	r3, [r7, #8]
 8015fc2:	469b      	mov	fp, r3
 8015fc4:	f04f 0c00 	mov.w	ip, #0
 8015fc8:	46d9      	mov	r9, fp
 8015fca:	46e2      	mov	sl, ip
 8015fcc:	eb19 0309 	adds.w	r3, r9, r9
 8015fd0:	eb4a 040a 	adc.w	r4, sl, sl
 8015fd4:	4699      	mov	r9, r3
 8015fd6:	46a2      	mov	sl, r4
 8015fd8:	eb19 090b 	adds.w	r9, r9, fp
 8015fdc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015fe0:	f04f 0100 	mov.w	r1, #0
 8015fe4:	f04f 0200 	mov.w	r2, #0
 8015fe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015fec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015ff0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015ff4:	4689      	mov	r9, r1
 8015ff6:	4692      	mov	sl, r2
 8015ff8:	eb1b 0509 	adds.w	r5, fp, r9
 8015ffc:	eb4c 060a 	adc.w	r6, ip, sl
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	685b      	ldr	r3, [r3, #4]
 8016004:	4619      	mov	r1, r3
 8016006:	f04f 0200 	mov.w	r2, #0
 801600a:	f04f 0300 	mov.w	r3, #0
 801600e:	f04f 0400 	mov.w	r4, #0
 8016012:	0094      	lsls	r4, r2, #2
 8016014:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8016018:	008b      	lsls	r3, r1, #2
 801601a:	461a      	mov	r2, r3
 801601c:	4623      	mov	r3, r4
 801601e:	4628      	mov	r0, r5
 8016020:	4631      	mov	r1, r6
 8016022:	f7f2 fd49 	bl	8008ab8 <__aeabi_uldivmod>
 8016026:	4603      	mov	r3, r0
 8016028:	460c      	mov	r4, r1
 801602a:	461a      	mov	r2, r3
 801602c:	4b0e      	ldr	r3, [pc, #56]	; (8016068 <UART_SetConfig+0x6f4>)
 801602e:	fba3 1302 	umull	r1, r3, r3, r2
 8016032:	095b      	lsrs	r3, r3, #5
 8016034:	2164      	movs	r1, #100	; 0x64
 8016036:	fb01 f303 	mul.w	r3, r1, r3
 801603a:	1ad3      	subs	r3, r2, r3
 801603c:	011b      	lsls	r3, r3, #4
 801603e:	3332      	adds	r3, #50	; 0x32
 8016040:	4a09      	ldr	r2, [pc, #36]	; (8016068 <UART_SetConfig+0x6f4>)
 8016042:	fba2 2303 	umull	r2, r3, r2, r3
 8016046:	095b      	lsrs	r3, r3, #5
 8016048:	f003 020f 	and.w	r2, r3, #15
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	4442      	add	r2, r8
 8016052:	609a      	str	r2, [r3, #8]
}
 8016054:	e7ff      	b.n	8016056 <UART_SetConfig+0x6e2>
 8016056:	bf00      	nop
 8016058:	3714      	adds	r7, #20
 801605a:	46bd      	mov	sp, r7
 801605c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016060:	40011000 	.word	0x40011000
 8016064:	40011400 	.word	0x40011400
 8016068:	51eb851f 	.word	0x51eb851f

0801606c <round>:
 801606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801606e:	ec57 6b10 	vmov	r6, r7, d0
 8016072:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8016076:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 801607a:	2c13      	cmp	r4, #19
 801607c:	463b      	mov	r3, r7
 801607e:	463d      	mov	r5, r7
 8016080:	dc17      	bgt.n	80160b2 <round+0x46>
 8016082:	2c00      	cmp	r4, #0
 8016084:	da09      	bge.n	801609a <round+0x2e>
 8016086:	3401      	adds	r4, #1
 8016088:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 801608c:	d103      	bne.n	8016096 <round+0x2a>
 801608e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016092:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016096:	2100      	movs	r1, #0
 8016098:	e02c      	b.n	80160f4 <round+0x88>
 801609a:	4a18      	ldr	r2, [pc, #96]	; (80160fc <round+0x90>)
 801609c:	4122      	asrs	r2, r4
 801609e:	4217      	tst	r7, r2
 80160a0:	d100      	bne.n	80160a4 <round+0x38>
 80160a2:	b19e      	cbz	r6, 80160cc <round+0x60>
 80160a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80160a8:	4123      	asrs	r3, r4
 80160aa:	442b      	add	r3, r5
 80160ac:	ea23 0302 	bic.w	r3, r3, r2
 80160b0:	e7f1      	b.n	8016096 <round+0x2a>
 80160b2:	2c33      	cmp	r4, #51	; 0x33
 80160b4:	dd0d      	ble.n	80160d2 <round+0x66>
 80160b6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80160ba:	d107      	bne.n	80160cc <round+0x60>
 80160bc:	4630      	mov	r0, r6
 80160be:	4639      	mov	r1, r7
 80160c0:	ee10 2a10 	vmov	r2, s0
 80160c4:	f7f2 f81a 	bl	80080fc <__adddf3>
 80160c8:	4606      	mov	r6, r0
 80160ca:	460f      	mov	r7, r1
 80160cc:	ec47 6b10 	vmov	d0, r6, r7
 80160d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160d2:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80160d6:	f04f 30ff 	mov.w	r0, #4294967295
 80160da:	40d0      	lsrs	r0, r2
 80160dc:	4206      	tst	r6, r0
 80160de:	d0f5      	beq.n	80160cc <round+0x60>
 80160e0:	2201      	movs	r2, #1
 80160e2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80160e6:	fa02 f404 	lsl.w	r4, r2, r4
 80160ea:	1931      	adds	r1, r6, r4
 80160ec:	bf28      	it	cs
 80160ee:	189b      	addcs	r3, r3, r2
 80160f0:	ea21 0100 	bic.w	r1, r1, r0
 80160f4:	461f      	mov	r7, r3
 80160f6:	460e      	mov	r6, r1
 80160f8:	e7e8      	b.n	80160cc <round+0x60>
 80160fa:	bf00      	nop
 80160fc:	000fffff 	.word	0x000fffff

08016100 <__errno>:
 8016100:	4b01      	ldr	r3, [pc, #4]	; (8016108 <__errno+0x8>)
 8016102:	6818      	ldr	r0, [r3, #0]
 8016104:	4770      	bx	lr
 8016106:	bf00      	nop
 8016108:	2000008c 	.word	0x2000008c

0801610c <__libc_init_array>:
 801610c:	b570      	push	{r4, r5, r6, lr}
 801610e:	4e0d      	ldr	r6, [pc, #52]	; (8016144 <__libc_init_array+0x38>)
 8016110:	4c0d      	ldr	r4, [pc, #52]	; (8016148 <__libc_init_array+0x3c>)
 8016112:	1ba4      	subs	r4, r4, r6
 8016114:	10a4      	asrs	r4, r4, #2
 8016116:	2500      	movs	r5, #0
 8016118:	42a5      	cmp	r5, r4
 801611a:	d109      	bne.n	8016130 <__libc_init_array+0x24>
 801611c:	4e0b      	ldr	r6, [pc, #44]	; (801614c <__libc_init_array+0x40>)
 801611e:	4c0c      	ldr	r4, [pc, #48]	; (8016150 <__libc_init_array+0x44>)
 8016120:	f002 fbae 	bl	8018880 <_init>
 8016124:	1ba4      	subs	r4, r4, r6
 8016126:	10a4      	asrs	r4, r4, #2
 8016128:	2500      	movs	r5, #0
 801612a:	42a5      	cmp	r5, r4
 801612c:	d105      	bne.n	801613a <__libc_init_array+0x2e>
 801612e:	bd70      	pop	{r4, r5, r6, pc}
 8016130:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016134:	4798      	blx	r3
 8016136:	3501      	adds	r5, #1
 8016138:	e7ee      	b.n	8016118 <__libc_init_array+0xc>
 801613a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801613e:	4798      	blx	r3
 8016140:	3501      	adds	r5, #1
 8016142:	e7f2      	b.n	801612a <__libc_init_array+0x1e>
 8016144:	08018d00 	.word	0x08018d00
 8016148:	08018d00 	.word	0x08018d00
 801614c:	08018d00 	.word	0x08018d00
 8016150:	08018d04 	.word	0x08018d04

08016154 <memcpy>:
 8016154:	b510      	push	{r4, lr}
 8016156:	1e43      	subs	r3, r0, #1
 8016158:	440a      	add	r2, r1
 801615a:	4291      	cmp	r1, r2
 801615c:	d100      	bne.n	8016160 <memcpy+0xc>
 801615e:	bd10      	pop	{r4, pc}
 8016160:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016164:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016168:	e7f7      	b.n	801615a <memcpy+0x6>

0801616a <memset>:
 801616a:	4402      	add	r2, r0
 801616c:	4603      	mov	r3, r0
 801616e:	4293      	cmp	r3, r2
 8016170:	d100      	bne.n	8016174 <memset+0xa>
 8016172:	4770      	bx	lr
 8016174:	f803 1b01 	strb.w	r1, [r3], #1
 8016178:	e7f9      	b.n	801616e <memset+0x4>

0801617a <__cvt>:
 801617a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801617e:	ec55 4b10 	vmov	r4, r5, d0
 8016182:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8016184:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016188:	2d00      	cmp	r5, #0
 801618a:	460e      	mov	r6, r1
 801618c:	4691      	mov	r9, r2
 801618e:	4619      	mov	r1, r3
 8016190:	bfb8      	it	lt
 8016192:	4622      	movlt	r2, r4
 8016194:	462b      	mov	r3, r5
 8016196:	f027 0720 	bic.w	r7, r7, #32
 801619a:	bfbb      	ittet	lt
 801619c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80161a0:	461d      	movlt	r5, r3
 80161a2:	2300      	movge	r3, #0
 80161a4:	232d      	movlt	r3, #45	; 0x2d
 80161a6:	bfb8      	it	lt
 80161a8:	4614      	movlt	r4, r2
 80161aa:	2f46      	cmp	r7, #70	; 0x46
 80161ac:	700b      	strb	r3, [r1, #0]
 80161ae:	d004      	beq.n	80161ba <__cvt+0x40>
 80161b0:	2f45      	cmp	r7, #69	; 0x45
 80161b2:	d100      	bne.n	80161b6 <__cvt+0x3c>
 80161b4:	3601      	adds	r6, #1
 80161b6:	2102      	movs	r1, #2
 80161b8:	e000      	b.n	80161bc <__cvt+0x42>
 80161ba:	2103      	movs	r1, #3
 80161bc:	ab03      	add	r3, sp, #12
 80161be:	9301      	str	r3, [sp, #4]
 80161c0:	ab02      	add	r3, sp, #8
 80161c2:	9300      	str	r3, [sp, #0]
 80161c4:	4632      	mov	r2, r6
 80161c6:	4653      	mov	r3, sl
 80161c8:	ec45 4b10 	vmov	d0, r4, r5
 80161cc:	f000 fdfc 	bl	8016dc8 <_dtoa_r>
 80161d0:	2f47      	cmp	r7, #71	; 0x47
 80161d2:	4680      	mov	r8, r0
 80161d4:	d102      	bne.n	80161dc <__cvt+0x62>
 80161d6:	f019 0f01 	tst.w	r9, #1
 80161da:	d026      	beq.n	801622a <__cvt+0xb0>
 80161dc:	2f46      	cmp	r7, #70	; 0x46
 80161de:	eb08 0906 	add.w	r9, r8, r6
 80161e2:	d111      	bne.n	8016208 <__cvt+0x8e>
 80161e4:	f898 3000 	ldrb.w	r3, [r8]
 80161e8:	2b30      	cmp	r3, #48	; 0x30
 80161ea:	d10a      	bne.n	8016202 <__cvt+0x88>
 80161ec:	2200      	movs	r2, #0
 80161ee:	2300      	movs	r3, #0
 80161f0:	4620      	mov	r0, r4
 80161f2:	4629      	mov	r1, r5
 80161f4:	f7f2 fba0 	bl	8008938 <__aeabi_dcmpeq>
 80161f8:	b918      	cbnz	r0, 8016202 <__cvt+0x88>
 80161fa:	f1c6 0601 	rsb	r6, r6, #1
 80161fe:	f8ca 6000 	str.w	r6, [sl]
 8016202:	f8da 3000 	ldr.w	r3, [sl]
 8016206:	4499      	add	r9, r3
 8016208:	2200      	movs	r2, #0
 801620a:	2300      	movs	r3, #0
 801620c:	4620      	mov	r0, r4
 801620e:	4629      	mov	r1, r5
 8016210:	f7f2 fb92 	bl	8008938 <__aeabi_dcmpeq>
 8016214:	b938      	cbnz	r0, 8016226 <__cvt+0xac>
 8016216:	2230      	movs	r2, #48	; 0x30
 8016218:	9b03      	ldr	r3, [sp, #12]
 801621a:	454b      	cmp	r3, r9
 801621c:	d205      	bcs.n	801622a <__cvt+0xb0>
 801621e:	1c59      	adds	r1, r3, #1
 8016220:	9103      	str	r1, [sp, #12]
 8016222:	701a      	strb	r2, [r3, #0]
 8016224:	e7f8      	b.n	8016218 <__cvt+0x9e>
 8016226:	f8cd 900c 	str.w	r9, [sp, #12]
 801622a:	9b03      	ldr	r3, [sp, #12]
 801622c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801622e:	eba3 0308 	sub.w	r3, r3, r8
 8016232:	4640      	mov	r0, r8
 8016234:	6013      	str	r3, [r2, #0]
 8016236:	b004      	add	sp, #16
 8016238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801623c <__exponent>:
 801623c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801623e:	2900      	cmp	r1, #0
 8016240:	4604      	mov	r4, r0
 8016242:	bfba      	itte	lt
 8016244:	4249      	neglt	r1, r1
 8016246:	232d      	movlt	r3, #45	; 0x2d
 8016248:	232b      	movge	r3, #43	; 0x2b
 801624a:	2909      	cmp	r1, #9
 801624c:	f804 2b02 	strb.w	r2, [r4], #2
 8016250:	7043      	strb	r3, [r0, #1]
 8016252:	dd20      	ble.n	8016296 <__exponent+0x5a>
 8016254:	f10d 0307 	add.w	r3, sp, #7
 8016258:	461f      	mov	r7, r3
 801625a:	260a      	movs	r6, #10
 801625c:	fb91 f5f6 	sdiv	r5, r1, r6
 8016260:	fb06 1115 	mls	r1, r6, r5, r1
 8016264:	3130      	adds	r1, #48	; 0x30
 8016266:	2d09      	cmp	r5, #9
 8016268:	f803 1c01 	strb.w	r1, [r3, #-1]
 801626c:	f103 32ff 	add.w	r2, r3, #4294967295
 8016270:	4629      	mov	r1, r5
 8016272:	dc09      	bgt.n	8016288 <__exponent+0x4c>
 8016274:	3130      	adds	r1, #48	; 0x30
 8016276:	3b02      	subs	r3, #2
 8016278:	f802 1c01 	strb.w	r1, [r2, #-1]
 801627c:	42bb      	cmp	r3, r7
 801627e:	4622      	mov	r2, r4
 8016280:	d304      	bcc.n	801628c <__exponent+0x50>
 8016282:	1a10      	subs	r0, r2, r0
 8016284:	b003      	add	sp, #12
 8016286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016288:	4613      	mov	r3, r2
 801628a:	e7e7      	b.n	801625c <__exponent+0x20>
 801628c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016290:	f804 2b01 	strb.w	r2, [r4], #1
 8016294:	e7f2      	b.n	801627c <__exponent+0x40>
 8016296:	2330      	movs	r3, #48	; 0x30
 8016298:	4419      	add	r1, r3
 801629a:	7083      	strb	r3, [r0, #2]
 801629c:	1d02      	adds	r2, r0, #4
 801629e:	70c1      	strb	r1, [r0, #3]
 80162a0:	e7ef      	b.n	8016282 <__exponent+0x46>
	...

080162a4 <_printf_float>:
 80162a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162a8:	b08d      	sub	sp, #52	; 0x34
 80162aa:	460c      	mov	r4, r1
 80162ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80162b0:	4616      	mov	r6, r2
 80162b2:	461f      	mov	r7, r3
 80162b4:	4605      	mov	r5, r0
 80162b6:	f001 fcb9 	bl	8017c2c <_localeconv_r>
 80162ba:	6803      	ldr	r3, [r0, #0]
 80162bc:	9304      	str	r3, [sp, #16]
 80162be:	4618      	mov	r0, r3
 80162c0:	f7f1 febe 	bl	8008040 <strlen>
 80162c4:	2300      	movs	r3, #0
 80162c6:	930a      	str	r3, [sp, #40]	; 0x28
 80162c8:	f8d8 3000 	ldr.w	r3, [r8]
 80162cc:	9005      	str	r0, [sp, #20]
 80162ce:	3307      	adds	r3, #7
 80162d0:	f023 0307 	bic.w	r3, r3, #7
 80162d4:	f103 0208 	add.w	r2, r3, #8
 80162d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80162dc:	f8d4 b000 	ldr.w	fp, [r4]
 80162e0:	f8c8 2000 	str.w	r2, [r8]
 80162e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80162ec:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80162f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80162f4:	9307      	str	r3, [sp, #28]
 80162f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80162fa:	f04f 32ff 	mov.w	r2, #4294967295
 80162fe:	4ba7      	ldr	r3, [pc, #668]	; (801659c <_printf_float+0x2f8>)
 8016300:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016304:	f7f2 fb4a 	bl	800899c <__aeabi_dcmpun>
 8016308:	bb70      	cbnz	r0, 8016368 <_printf_float+0xc4>
 801630a:	f04f 32ff 	mov.w	r2, #4294967295
 801630e:	4ba3      	ldr	r3, [pc, #652]	; (801659c <_printf_float+0x2f8>)
 8016310:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016314:	f7f2 fb24 	bl	8008960 <__aeabi_dcmple>
 8016318:	bb30      	cbnz	r0, 8016368 <_printf_float+0xc4>
 801631a:	2200      	movs	r2, #0
 801631c:	2300      	movs	r3, #0
 801631e:	4640      	mov	r0, r8
 8016320:	4649      	mov	r1, r9
 8016322:	f7f2 fb13 	bl	800894c <__aeabi_dcmplt>
 8016326:	b110      	cbz	r0, 801632e <_printf_float+0x8a>
 8016328:	232d      	movs	r3, #45	; 0x2d
 801632a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801632e:	4a9c      	ldr	r2, [pc, #624]	; (80165a0 <_printf_float+0x2fc>)
 8016330:	4b9c      	ldr	r3, [pc, #624]	; (80165a4 <_printf_float+0x300>)
 8016332:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8016336:	bf8c      	ite	hi
 8016338:	4690      	movhi	r8, r2
 801633a:	4698      	movls	r8, r3
 801633c:	2303      	movs	r3, #3
 801633e:	f02b 0204 	bic.w	r2, fp, #4
 8016342:	6123      	str	r3, [r4, #16]
 8016344:	6022      	str	r2, [r4, #0]
 8016346:	f04f 0900 	mov.w	r9, #0
 801634a:	9700      	str	r7, [sp, #0]
 801634c:	4633      	mov	r3, r6
 801634e:	aa0b      	add	r2, sp, #44	; 0x2c
 8016350:	4621      	mov	r1, r4
 8016352:	4628      	mov	r0, r5
 8016354:	f000 f9e6 	bl	8016724 <_printf_common>
 8016358:	3001      	adds	r0, #1
 801635a:	f040 808d 	bne.w	8016478 <_printf_float+0x1d4>
 801635e:	f04f 30ff 	mov.w	r0, #4294967295
 8016362:	b00d      	add	sp, #52	; 0x34
 8016364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016368:	4642      	mov	r2, r8
 801636a:	464b      	mov	r3, r9
 801636c:	4640      	mov	r0, r8
 801636e:	4649      	mov	r1, r9
 8016370:	f7f2 fb14 	bl	800899c <__aeabi_dcmpun>
 8016374:	b110      	cbz	r0, 801637c <_printf_float+0xd8>
 8016376:	4a8c      	ldr	r2, [pc, #560]	; (80165a8 <_printf_float+0x304>)
 8016378:	4b8c      	ldr	r3, [pc, #560]	; (80165ac <_printf_float+0x308>)
 801637a:	e7da      	b.n	8016332 <_printf_float+0x8e>
 801637c:	6861      	ldr	r1, [r4, #4]
 801637e:	1c4b      	adds	r3, r1, #1
 8016380:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8016384:	a80a      	add	r0, sp, #40	; 0x28
 8016386:	d13e      	bne.n	8016406 <_printf_float+0x162>
 8016388:	2306      	movs	r3, #6
 801638a:	6063      	str	r3, [r4, #4]
 801638c:	2300      	movs	r3, #0
 801638e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016392:	ab09      	add	r3, sp, #36	; 0x24
 8016394:	9300      	str	r3, [sp, #0]
 8016396:	ec49 8b10 	vmov	d0, r8, r9
 801639a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801639e:	6022      	str	r2, [r4, #0]
 80163a0:	f8cd a004 	str.w	sl, [sp, #4]
 80163a4:	6861      	ldr	r1, [r4, #4]
 80163a6:	4628      	mov	r0, r5
 80163a8:	f7ff fee7 	bl	801617a <__cvt>
 80163ac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80163b0:	2b47      	cmp	r3, #71	; 0x47
 80163b2:	4680      	mov	r8, r0
 80163b4:	d109      	bne.n	80163ca <_printf_float+0x126>
 80163b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163b8:	1cd8      	adds	r0, r3, #3
 80163ba:	db02      	blt.n	80163c2 <_printf_float+0x11e>
 80163bc:	6862      	ldr	r2, [r4, #4]
 80163be:	4293      	cmp	r3, r2
 80163c0:	dd47      	ble.n	8016452 <_printf_float+0x1ae>
 80163c2:	f1aa 0a02 	sub.w	sl, sl, #2
 80163c6:	fa5f fa8a 	uxtb.w	sl, sl
 80163ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80163ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80163d0:	d824      	bhi.n	801641c <_printf_float+0x178>
 80163d2:	3901      	subs	r1, #1
 80163d4:	4652      	mov	r2, sl
 80163d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80163da:	9109      	str	r1, [sp, #36]	; 0x24
 80163dc:	f7ff ff2e 	bl	801623c <__exponent>
 80163e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163e2:	1813      	adds	r3, r2, r0
 80163e4:	2a01      	cmp	r2, #1
 80163e6:	4681      	mov	r9, r0
 80163e8:	6123      	str	r3, [r4, #16]
 80163ea:	dc02      	bgt.n	80163f2 <_printf_float+0x14e>
 80163ec:	6822      	ldr	r2, [r4, #0]
 80163ee:	07d1      	lsls	r1, r2, #31
 80163f0:	d501      	bpl.n	80163f6 <_printf_float+0x152>
 80163f2:	3301      	adds	r3, #1
 80163f4:	6123      	str	r3, [r4, #16]
 80163f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d0a5      	beq.n	801634a <_printf_float+0xa6>
 80163fe:	232d      	movs	r3, #45	; 0x2d
 8016400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016404:	e7a1      	b.n	801634a <_printf_float+0xa6>
 8016406:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801640a:	f000 8177 	beq.w	80166fc <_printf_float+0x458>
 801640e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8016412:	d1bb      	bne.n	801638c <_printf_float+0xe8>
 8016414:	2900      	cmp	r1, #0
 8016416:	d1b9      	bne.n	801638c <_printf_float+0xe8>
 8016418:	2301      	movs	r3, #1
 801641a:	e7b6      	b.n	801638a <_printf_float+0xe6>
 801641c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8016420:	d119      	bne.n	8016456 <_printf_float+0x1b2>
 8016422:	2900      	cmp	r1, #0
 8016424:	6863      	ldr	r3, [r4, #4]
 8016426:	dd0c      	ble.n	8016442 <_printf_float+0x19e>
 8016428:	6121      	str	r1, [r4, #16]
 801642a:	b913      	cbnz	r3, 8016432 <_printf_float+0x18e>
 801642c:	6822      	ldr	r2, [r4, #0]
 801642e:	07d2      	lsls	r2, r2, #31
 8016430:	d502      	bpl.n	8016438 <_printf_float+0x194>
 8016432:	3301      	adds	r3, #1
 8016434:	440b      	add	r3, r1
 8016436:	6123      	str	r3, [r4, #16]
 8016438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801643a:	65a3      	str	r3, [r4, #88]	; 0x58
 801643c:	f04f 0900 	mov.w	r9, #0
 8016440:	e7d9      	b.n	80163f6 <_printf_float+0x152>
 8016442:	b913      	cbnz	r3, 801644a <_printf_float+0x1a6>
 8016444:	6822      	ldr	r2, [r4, #0]
 8016446:	07d0      	lsls	r0, r2, #31
 8016448:	d501      	bpl.n	801644e <_printf_float+0x1aa>
 801644a:	3302      	adds	r3, #2
 801644c:	e7f3      	b.n	8016436 <_printf_float+0x192>
 801644e:	2301      	movs	r3, #1
 8016450:	e7f1      	b.n	8016436 <_printf_float+0x192>
 8016452:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8016456:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801645a:	4293      	cmp	r3, r2
 801645c:	db05      	blt.n	801646a <_printf_float+0x1c6>
 801645e:	6822      	ldr	r2, [r4, #0]
 8016460:	6123      	str	r3, [r4, #16]
 8016462:	07d1      	lsls	r1, r2, #31
 8016464:	d5e8      	bpl.n	8016438 <_printf_float+0x194>
 8016466:	3301      	adds	r3, #1
 8016468:	e7e5      	b.n	8016436 <_printf_float+0x192>
 801646a:	2b00      	cmp	r3, #0
 801646c:	bfd4      	ite	le
 801646e:	f1c3 0302 	rsble	r3, r3, #2
 8016472:	2301      	movgt	r3, #1
 8016474:	4413      	add	r3, r2
 8016476:	e7de      	b.n	8016436 <_printf_float+0x192>
 8016478:	6823      	ldr	r3, [r4, #0]
 801647a:	055a      	lsls	r2, r3, #21
 801647c:	d407      	bmi.n	801648e <_printf_float+0x1ea>
 801647e:	6923      	ldr	r3, [r4, #16]
 8016480:	4642      	mov	r2, r8
 8016482:	4631      	mov	r1, r6
 8016484:	4628      	mov	r0, r5
 8016486:	47b8      	blx	r7
 8016488:	3001      	adds	r0, #1
 801648a:	d12b      	bne.n	80164e4 <_printf_float+0x240>
 801648c:	e767      	b.n	801635e <_printf_float+0xba>
 801648e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8016492:	f240 80dc 	bls.w	801664e <_printf_float+0x3aa>
 8016496:	2200      	movs	r2, #0
 8016498:	2300      	movs	r3, #0
 801649a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801649e:	f7f2 fa4b 	bl	8008938 <__aeabi_dcmpeq>
 80164a2:	2800      	cmp	r0, #0
 80164a4:	d033      	beq.n	801650e <_printf_float+0x26a>
 80164a6:	2301      	movs	r3, #1
 80164a8:	4a41      	ldr	r2, [pc, #260]	; (80165b0 <_printf_float+0x30c>)
 80164aa:	4631      	mov	r1, r6
 80164ac:	4628      	mov	r0, r5
 80164ae:	47b8      	blx	r7
 80164b0:	3001      	adds	r0, #1
 80164b2:	f43f af54 	beq.w	801635e <_printf_float+0xba>
 80164b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80164ba:	429a      	cmp	r2, r3
 80164bc:	db02      	blt.n	80164c4 <_printf_float+0x220>
 80164be:	6823      	ldr	r3, [r4, #0]
 80164c0:	07d8      	lsls	r0, r3, #31
 80164c2:	d50f      	bpl.n	80164e4 <_printf_float+0x240>
 80164c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80164c8:	4631      	mov	r1, r6
 80164ca:	4628      	mov	r0, r5
 80164cc:	47b8      	blx	r7
 80164ce:	3001      	adds	r0, #1
 80164d0:	f43f af45 	beq.w	801635e <_printf_float+0xba>
 80164d4:	f04f 0800 	mov.w	r8, #0
 80164d8:	f104 091a 	add.w	r9, r4, #26
 80164dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164de:	3b01      	subs	r3, #1
 80164e0:	4543      	cmp	r3, r8
 80164e2:	dc09      	bgt.n	80164f8 <_printf_float+0x254>
 80164e4:	6823      	ldr	r3, [r4, #0]
 80164e6:	079b      	lsls	r3, r3, #30
 80164e8:	f100 8103 	bmi.w	80166f2 <_printf_float+0x44e>
 80164ec:	68e0      	ldr	r0, [r4, #12]
 80164ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164f0:	4298      	cmp	r0, r3
 80164f2:	bfb8      	it	lt
 80164f4:	4618      	movlt	r0, r3
 80164f6:	e734      	b.n	8016362 <_printf_float+0xbe>
 80164f8:	2301      	movs	r3, #1
 80164fa:	464a      	mov	r2, r9
 80164fc:	4631      	mov	r1, r6
 80164fe:	4628      	mov	r0, r5
 8016500:	47b8      	blx	r7
 8016502:	3001      	adds	r0, #1
 8016504:	f43f af2b 	beq.w	801635e <_printf_float+0xba>
 8016508:	f108 0801 	add.w	r8, r8, #1
 801650c:	e7e6      	b.n	80164dc <_printf_float+0x238>
 801650e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016510:	2b00      	cmp	r3, #0
 8016512:	dc2b      	bgt.n	801656c <_printf_float+0x2c8>
 8016514:	2301      	movs	r3, #1
 8016516:	4a26      	ldr	r2, [pc, #152]	; (80165b0 <_printf_float+0x30c>)
 8016518:	4631      	mov	r1, r6
 801651a:	4628      	mov	r0, r5
 801651c:	47b8      	blx	r7
 801651e:	3001      	adds	r0, #1
 8016520:	f43f af1d 	beq.w	801635e <_printf_float+0xba>
 8016524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016526:	b923      	cbnz	r3, 8016532 <_printf_float+0x28e>
 8016528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801652a:	b913      	cbnz	r3, 8016532 <_printf_float+0x28e>
 801652c:	6823      	ldr	r3, [r4, #0]
 801652e:	07d9      	lsls	r1, r3, #31
 8016530:	d5d8      	bpl.n	80164e4 <_printf_float+0x240>
 8016532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016536:	4631      	mov	r1, r6
 8016538:	4628      	mov	r0, r5
 801653a:	47b8      	blx	r7
 801653c:	3001      	adds	r0, #1
 801653e:	f43f af0e 	beq.w	801635e <_printf_float+0xba>
 8016542:	f04f 0900 	mov.w	r9, #0
 8016546:	f104 0a1a 	add.w	sl, r4, #26
 801654a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801654c:	425b      	negs	r3, r3
 801654e:	454b      	cmp	r3, r9
 8016550:	dc01      	bgt.n	8016556 <_printf_float+0x2b2>
 8016552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016554:	e794      	b.n	8016480 <_printf_float+0x1dc>
 8016556:	2301      	movs	r3, #1
 8016558:	4652      	mov	r2, sl
 801655a:	4631      	mov	r1, r6
 801655c:	4628      	mov	r0, r5
 801655e:	47b8      	blx	r7
 8016560:	3001      	adds	r0, #1
 8016562:	f43f aefc 	beq.w	801635e <_printf_float+0xba>
 8016566:	f109 0901 	add.w	r9, r9, #1
 801656a:	e7ee      	b.n	801654a <_printf_float+0x2a6>
 801656c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801656e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016570:	429a      	cmp	r2, r3
 8016572:	bfa8      	it	ge
 8016574:	461a      	movge	r2, r3
 8016576:	2a00      	cmp	r2, #0
 8016578:	4691      	mov	r9, r2
 801657a:	dd07      	ble.n	801658c <_printf_float+0x2e8>
 801657c:	4613      	mov	r3, r2
 801657e:	4631      	mov	r1, r6
 8016580:	4642      	mov	r2, r8
 8016582:	4628      	mov	r0, r5
 8016584:	47b8      	blx	r7
 8016586:	3001      	adds	r0, #1
 8016588:	f43f aee9 	beq.w	801635e <_printf_float+0xba>
 801658c:	f104 031a 	add.w	r3, r4, #26
 8016590:	f04f 0b00 	mov.w	fp, #0
 8016594:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016598:	9306      	str	r3, [sp, #24]
 801659a:	e015      	b.n	80165c8 <_printf_float+0x324>
 801659c:	7fefffff 	.word	0x7fefffff
 80165a0:	08018a3c 	.word	0x08018a3c
 80165a4:	08018a38 	.word	0x08018a38
 80165a8:	08018a44 	.word	0x08018a44
 80165ac:	08018a40 	.word	0x08018a40
 80165b0:	08018a48 	.word	0x08018a48
 80165b4:	2301      	movs	r3, #1
 80165b6:	9a06      	ldr	r2, [sp, #24]
 80165b8:	4631      	mov	r1, r6
 80165ba:	4628      	mov	r0, r5
 80165bc:	47b8      	blx	r7
 80165be:	3001      	adds	r0, #1
 80165c0:	f43f aecd 	beq.w	801635e <_printf_float+0xba>
 80165c4:	f10b 0b01 	add.w	fp, fp, #1
 80165c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80165cc:	ebaa 0309 	sub.w	r3, sl, r9
 80165d0:	455b      	cmp	r3, fp
 80165d2:	dcef      	bgt.n	80165b4 <_printf_float+0x310>
 80165d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80165d8:	429a      	cmp	r2, r3
 80165da:	44d0      	add	r8, sl
 80165dc:	db15      	blt.n	801660a <_printf_float+0x366>
 80165de:	6823      	ldr	r3, [r4, #0]
 80165e0:	07da      	lsls	r2, r3, #31
 80165e2:	d412      	bmi.n	801660a <_printf_float+0x366>
 80165e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80165e8:	eba3 020a 	sub.w	r2, r3, sl
 80165ec:	eba3 0a01 	sub.w	sl, r3, r1
 80165f0:	4592      	cmp	sl, r2
 80165f2:	bfa8      	it	ge
 80165f4:	4692      	movge	sl, r2
 80165f6:	f1ba 0f00 	cmp.w	sl, #0
 80165fa:	dc0e      	bgt.n	801661a <_printf_float+0x376>
 80165fc:	f04f 0800 	mov.w	r8, #0
 8016600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016604:	f104 091a 	add.w	r9, r4, #26
 8016608:	e019      	b.n	801663e <_printf_float+0x39a>
 801660a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801660e:	4631      	mov	r1, r6
 8016610:	4628      	mov	r0, r5
 8016612:	47b8      	blx	r7
 8016614:	3001      	adds	r0, #1
 8016616:	d1e5      	bne.n	80165e4 <_printf_float+0x340>
 8016618:	e6a1      	b.n	801635e <_printf_float+0xba>
 801661a:	4653      	mov	r3, sl
 801661c:	4642      	mov	r2, r8
 801661e:	4631      	mov	r1, r6
 8016620:	4628      	mov	r0, r5
 8016622:	47b8      	blx	r7
 8016624:	3001      	adds	r0, #1
 8016626:	d1e9      	bne.n	80165fc <_printf_float+0x358>
 8016628:	e699      	b.n	801635e <_printf_float+0xba>
 801662a:	2301      	movs	r3, #1
 801662c:	464a      	mov	r2, r9
 801662e:	4631      	mov	r1, r6
 8016630:	4628      	mov	r0, r5
 8016632:	47b8      	blx	r7
 8016634:	3001      	adds	r0, #1
 8016636:	f43f ae92 	beq.w	801635e <_printf_float+0xba>
 801663a:	f108 0801 	add.w	r8, r8, #1
 801663e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016642:	1a9b      	subs	r3, r3, r2
 8016644:	eba3 030a 	sub.w	r3, r3, sl
 8016648:	4543      	cmp	r3, r8
 801664a:	dcee      	bgt.n	801662a <_printf_float+0x386>
 801664c:	e74a      	b.n	80164e4 <_printf_float+0x240>
 801664e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016650:	2a01      	cmp	r2, #1
 8016652:	dc01      	bgt.n	8016658 <_printf_float+0x3b4>
 8016654:	07db      	lsls	r3, r3, #31
 8016656:	d53a      	bpl.n	80166ce <_printf_float+0x42a>
 8016658:	2301      	movs	r3, #1
 801665a:	4642      	mov	r2, r8
 801665c:	4631      	mov	r1, r6
 801665e:	4628      	mov	r0, r5
 8016660:	47b8      	blx	r7
 8016662:	3001      	adds	r0, #1
 8016664:	f43f ae7b 	beq.w	801635e <_printf_float+0xba>
 8016668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801666c:	4631      	mov	r1, r6
 801666e:	4628      	mov	r0, r5
 8016670:	47b8      	blx	r7
 8016672:	3001      	adds	r0, #1
 8016674:	f108 0801 	add.w	r8, r8, #1
 8016678:	f43f ae71 	beq.w	801635e <_printf_float+0xba>
 801667c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801667e:	2200      	movs	r2, #0
 8016680:	f103 3aff 	add.w	sl, r3, #4294967295
 8016684:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016688:	2300      	movs	r3, #0
 801668a:	f7f2 f955 	bl	8008938 <__aeabi_dcmpeq>
 801668e:	b9c8      	cbnz	r0, 80166c4 <_printf_float+0x420>
 8016690:	4653      	mov	r3, sl
 8016692:	4642      	mov	r2, r8
 8016694:	4631      	mov	r1, r6
 8016696:	4628      	mov	r0, r5
 8016698:	47b8      	blx	r7
 801669a:	3001      	adds	r0, #1
 801669c:	d10e      	bne.n	80166bc <_printf_float+0x418>
 801669e:	e65e      	b.n	801635e <_printf_float+0xba>
 80166a0:	2301      	movs	r3, #1
 80166a2:	4652      	mov	r2, sl
 80166a4:	4631      	mov	r1, r6
 80166a6:	4628      	mov	r0, r5
 80166a8:	47b8      	blx	r7
 80166aa:	3001      	adds	r0, #1
 80166ac:	f43f ae57 	beq.w	801635e <_printf_float+0xba>
 80166b0:	f108 0801 	add.w	r8, r8, #1
 80166b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166b6:	3b01      	subs	r3, #1
 80166b8:	4543      	cmp	r3, r8
 80166ba:	dcf1      	bgt.n	80166a0 <_printf_float+0x3fc>
 80166bc:	464b      	mov	r3, r9
 80166be:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80166c2:	e6de      	b.n	8016482 <_printf_float+0x1de>
 80166c4:	f04f 0800 	mov.w	r8, #0
 80166c8:	f104 0a1a 	add.w	sl, r4, #26
 80166cc:	e7f2      	b.n	80166b4 <_printf_float+0x410>
 80166ce:	2301      	movs	r3, #1
 80166d0:	e7df      	b.n	8016692 <_printf_float+0x3ee>
 80166d2:	2301      	movs	r3, #1
 80166d4:	464a      	mov	r2, r9
 80166d6:	4631      	mov	r1, r6
 80166d8:	4628      	mov	r0, r5
 80166da:	47b8      	blx	r7
 80166dc:	3001      	adds	r0, #1
 80166de:	f43f ae3e 	beq.w	801635e <_printf_float+0xba>
 80166e2:	f108 0801 	add.w	r8, r8, #1
 80166e6:	68e3      	ldr	r3, [r4, #12]
 80166e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80166ea:	1a9b      	subs	r3, r3, r2
 80166ec:	4543      	cmp	r3, r8
 80166ee:	dcf0      	bgt.n	80166d2 <_printf_float+0x42e>
 80166f0:	e6fc      	b.n	80164ec <_printf_float+0x248>
 80166f2:	f04f 0800 	mov.w	r8, #0
 80166f6:	f104 0919 	add.w	r9, r4, #25
 80166fa:	e7f4      	b.n	80166e6 <_printf_float+0x442>
 80166fc:	2900      	cmp	r1, #0
 80166fe:	f43f ae8b 	beq.w	8016418 <_printf_float+0x174>
 8016702:	2300      	movs	r3, #0
 8016704:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016708:	ab09      	add	r3, sp, #36	; 0x24
 801670a:	9300      	str	r3, [sp, #0]
 801670c:	ec49 8b10 	vmov	d0, r8, r9
 8016710:	6022      	str	r2, [r4, #0]
 8016712:	f8cd a004 	str.w	sl, [sp, #4]
 8016716:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801671a:	4628      	mov	r0, r5
 801671c:	f7ff fd2d 	bl	801617a <__cvt>
 8016720:	4680      	mov	r8, r0
 8016722:	e648      	b.n	80163b6 <_printf_float+0x112>

08016724 <_printf_common>:
 8016724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016728:	4691      	mov	r9, r2
 801672a:	461f      	mov	r7, r3
 801672c:	688a      	ldr	r2, [r1, #8]
 801672e:	690b      	ldr	r3, [r1, #16]
 8016730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016734:	4293      	cmp	r3, r2
 8016736:	bfb8      	it	lt
 8016738:	4613      	movlt	r3, r2
 801673a:	f8c9 3000 	str.w	r3, [r9]
 801673e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016742:	4606      	mov	r6, r0
 8016744:	460c      	mov	r4, r1
 8016746:	b112      	cbz	r2, 801674e <_printf_common+0x2a>
 8016748:	3301      	adds	r3, #1
 801674a:	f8c9 3000 	str.w	r3, [r9]
 801674e:	6823      	ldr	r3, [r4, #0]
 8016750:	0699      	lsls	r1, r3, #26
 8016752:	bf42      	ittt	mi
 8016754:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016758:	3302      	addmi	r3, #2
 801675a:	f8c9 3000 	strmi.w	r3, [r9]
 801675e:	6825      	ldr	r5, [r4, #0]
 8016760:	f015 0506 	ands.w	r5, r5, #6
 8016764:	d107      	bne.n	8016776 <_printf_common+0x52>
 8016766:	f104 0a19 	add.w	sl, r4, #25
 801676a:	68e3      	ldr	r3, [r4, #12]
 801676c:	f8d9 2000 	ldr.w	r2, [r9]
 8016770:	1a9b      	subs	r3, r3, r2
 8016772:	42ab      	cmp	r3, r5
 8016774:	dc28      	bgt.n	80167c8 <_printf_common+0xa4>
 8016776:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801677a:	6822      	ldr	r2, [r4, #0]
 801677c:	3300      	adds	r3, #0
 801677e:	bf18      	it	ne
 8016780:	2301      	movne	r3, #1
 8016782:	0692      	lsls	r2, r2, #26
 8016784:	d42d      	bmi.n	80167e2 <_printf_common+0xbe>
 8016786:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801678a:	4639      	mov	r1, r7
 801678c:	4630      	mov	r0, r6
 801678e:	47c0      	blx	r8
 8016790:	3001      	adds	r0, #1
 8016792:	d020      	beq.n	80167d6 <_printf_common+0xb2>
 8016794:	6823      	ldr	r3, [r4, #0]
 8016796:	68e5      	ldr	r5, [r4, #12]
 8016798:	f8d9 2000 	ldr.w	r2, [r9]
 801679c:	f003 0306 	and.w	r3, r3, #6
 80167a0:	2b04      	cmp	r3, #4
 80167a2:	bf08      	it	eq
 80167a4:	1aad      	subeq	r5, r5, r2
 80167a6:	68a3      	ldr	r3, [r4, #8]
 80167a8:	6922      	ldr	r2, [r4, #16]
 80167aa:	bf0c      	ite	eq
 80167ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80167b0:	2500      	movne	r5, #0
 80167b2:	4293      	cmp	r3, r2
 80167b4:	bfc4      	itt	gt
 80167b6:	1a9b      	subgt	r3, r3, r2
 80167b8:	18ed      	addgt	r5, r5, r3
 80167ba:	f04f 0900 	mov.w	r9, #0
 80167be:	341a      	adds	r4, #26
 80167c0:	454d      	cmp	r5, r9
 80167c2:	d11a      	bne.n	80167fa <_printf_common+0xd6>
 80167c4:	2000      	movs	r0, #0
 80167c6:	e008      	b.n	80167da <_printf_common+0xb6>
 80167c8:	2301      	movs	r3, #1
 80167ca:	4652      	mov	r2, sl
 80167cc:	4639      	mov	r1, r7
 80167ce:	4630      	mov	r0, r6
 80167d0:	47c0      	blx	r8
 80167d2:	3001      	adds	r0, #1
 80167d4:	d103      	bne.n	80167de <_printf_common+0xba>
 80167d6:	f04f 30ff 	mov.w	r0, #4294967295
 80167da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167de:	3501      	adds	r5, #1
 80167e0:	e7c3      	b.n	801676a <_printf_common+0x46>
 80167e2:	18e1      	adds	r1, r4, r3
 80167e4:	1c5a      	adds	r2, r3, #1
 80167e6:	2030      	movs	r0, #48	; 0x30
 80167e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80167ec:	4422      	add	r2, r4
 80167ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80167f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80167f6:	3302      	adds	r3, #2
 80167f8:	e7c5      	b.n	8016786 <_printf_common+0x62>
 80167fa:	2301      	movs	r3, #1
 80167fc:	4622      	mov	r2, r4
 80167fe:	4639      	mov	r1, r7
 8016800:	4630      	mov	r0, r6
 8016802:	47c0      	blx	r8
 8016804:	3001      	adds	r0, #1
 8016806:	d0e6      	beq.n	80167d6 <_printf_common+0xb2>
 8016808:	f109 0901 	add.w	r9, r9, #1
 801680c:	e7d8      	b.n	80167c0 <_printf_common+0x9c>
	...

08016810 <_printf_i>:
 8016810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016814:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016818:	460c      	mov	r4, r1
 801681a:	7e09      	ldrb	r1, [r1, #24]
 801681c:	b085      	sub	sp, #20
 801681e:	296e      	cmp	r1, #110	; 0x6e
 8016820:	4617      	mov	r7, r2
 8016822:	4606      	mov	r6, r0
 8016824:	4698      	mov	r8, r3
 8016826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016828:	f000 80b3 	beq.w	8016992 <_printf_i+0x182>
 801682c:	d822      	bhi.n	8016874 <_printf_i+0x64>
 801682e:	2963      	cmp	r1, #99	; 0x63
 8016830:	d036      	beq.n	80168a0 <_printf_i+0x90>
 8016832:	d80a      	bhi.n	801684a <_printf_i+0x3a>
 8016834:	2900      	cmp	r1, #0
 8016836:	f000 80b9 	beq.w	80169ac <_printf_i+0x19c>
 801683a:	2958      	cmp	r1, #88	; 0x58
 801683c:	f000 8083 	beq.w	8016946 <_printf_i+0x136>
 8016840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016844:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016848:	e032      	b.n	80168b0 <_printf_i+0xa0>
 801684a:	2964      	cmp	r1, #100	; 0x64
 801684c:	d001      	beq.n	8016852 <_printf_i+0x42>
 801684e:	2969      	cmp	r1, #105	; 0x69
 8016850:	d1f6      	bne.n	8016840 <_printf_i+0x30>
 8016852:	6820      	ldr	r0, [r4, #0]
 8016854:	6813      	ldr	r3, [r2, #0]
 8016856:	0605      	lsls	r5, r0, #24
 8016858:	f103 0104 	add.w	r1, r3, #4
 801685c:	d52a      	bpl.n	80168b4 <_printf_i+0xa4>
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	6011      	str	r1, [r2, #0]
 8016862:	2b00      	cmp	r3, #0
 8016864:	da03      	bge.n	801686e <_printf_i+0x5e>
 8016866:	222d      	movs	r2, #45	; 0x2d
 8016868:	425b      	negs	r3, r3
 801686a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801686e:	486f      	ldr	r0, [pc, #444]	; (8016a2c <_printf_i+0x21c>)
 8016870:	220a      	movs	r2, #10
 8016872:	e039      	b.n	80168e8 <_printf_i+0xd8>
 8016874:	2973      	cmp	r1, #115	; 0x73
 8016876:	f000 809d 	beq.w	80169b4 <_printf_i+0x1a4>
 801687a:	d808      	bhi.n	801688e <_printf_i+0x7e>
 801687c:	296f      	cmp	r1, #111	; 0x6f
 801687e:	d020      	beq.n	80168c2 <_printf_i+0xb2>
 8016880:	2970      	cmp	r1, #112	; 0x70
 8016882:	d1dd      	bne.n	8016840 <_printf_i+0x30>
 8016884:	6823      	ldr	r3, [r4, #0]
 8016886:	f043 0320 	orr.w	r3, r3, #32
 801688a:	6023      	str	r3, [r4, #0]
 801688c:	e003      	b.n	8016896 <_printf_i+0x86>
 801688e:	2975      	cmp	r1, #117	; 0x75
 8016890:	d017      	beq.n	80168c2 <_printf_i+0xb2>
 8016892:	2978      	cmp	r1, #120	; 0x78
 8016894:	d1d4      	bne.n	8016840 <_printf_i+0x30>
 8016896:	2378      	movs	r3, #120	; 0x78
 8016898:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801689c:	4864      	ldr	r0, [pc, #400]	; (8016a30 <_printf_i+0x220>)
 801689e:	e055      	b.n	801694c <_printf_i+0x13c>
 80168a0:	6813      	ldr	r3, [r2, #0]
 80168a2:	1d19      	adds	r1, r3, #4
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	6011      	str	r1, [r2, #0]
 80168a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80168ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80168b0:	2301      	movs	r3, #1
 80168b2:	e08c      	b.n	80169ce <_printf_i+0x1be>
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	6011      	str	r1, [r2, #0]
 80168b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80168bc:	bf18      	it	ne
 80168be:	b21b      	sxthne	r3, r3
 80168c0:	e7cf      	b.n	8016862 <_printf_i+0x52>
 80168c2:	6813      	ldr	r3, [r2, #0]
 80168c4:	6825      	ldr	r5, [r4, #0]
 80168c6:	1d18      	adds	r0, r3, #4
 80168c8:	6010      	str	r0, [r2, #0]
 80168ca:	0628      	lsls	r0, r5, #24
 80168cc:	d501      	bpl.n	80168d2 <_printf_i+0xc2>
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	e002      	b.n	80168d8 <_printf_i+0xc8>
 80168d2:	0668      	lsls	r0, r5, #25
 80168d4:	d5fb      	bpl.n	80168ce <_printf_i+0xbe>
 80168d6:	881b      	ldrh	r3, [r3, #0]
 80168d8:	4854      	ldr	r0, [pc, #336]	; (8016a2c <_printf_i+0x21c>)
 80168da:	296f      	cmp	r1, #111	; 0x6f
 80168dc:	bf14      	ite	ne
 80168de:	220a      	movne	r2, #10
 80168e0:	2208      	moveq	r2, #8
 80168e2:	2100      	movs	r1, #0
 80168e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80168e8:	6865      	ldr	r5, [r4, #4]
 80168ea:	60a5      	str	r5, [r4, #8]
 80168ec:	2d00      	cmp	r5, #0
 80168ee:	f2c0 8095 	blt.w	8016a1c <_printf_i+0x20c>
 80168f2:	6821      	ldr	r1, [r4, #0]
 80168f4:	f021 0104 	bic.w	r1, r1, #4
 80168f8:	6021      	str	r1, [r4, #0]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d13d      	bne.n	801697a <_printf_i+0x16a>
 80168fe:	2d00      	cmp	r5, #0
 8016900:	f040 808e 	bne.w	8016a20 <_printf_i+0x210>
 8016904:	4665      	mov	r5, ip
 8016906:	2a08      	cmp	r2, #8
 8016908:	d10b      	bne.n	8016922 <_printf_i+0x112>
 801690a:	6823      	ldr	r3, [r4, #0]
 801690c:	07db      	lsls	r3, r3, #31
 801690e:	d508      	bpl.n	8016922 <_printf_i+0x112>
 8016910:	6923      	ldr	r3, [r4, #16]
 8016912:	6862      	ldr	r2, [r4, #4]
 8016914:	429a      	cmp	r2, r3
 8016916:	bfde      	ittt	le
 8016918:	2330      	movle	r3, #48	; 0x30
 801691a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801691e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016922:	ebac 0305 	sub.w	r3, ip, r5
 8016926:	6123      	str	r3, [r4, #16]
 8016928:	f8cd 8000 	str.w	r8, [sp]
 801692c:	463b      	mov	r3, r7
 801692e:	aa03      	add	r2, sp, #12
 8016930:	4621      	mov	r1, r4
 8016932:	4630      	mov	r0, r6
 8016934:	f7ff fef6 	bl	8016724 <_printf_common>
 8016938:	3001      	adds	r0, #1
 801693a:	d14d      	bne.n	80169d8 <_printf_i+0x1c8>
 801693c:	f04f 30ff 	mov.w	r0, #4294967295
 8016940:	b005      	add	sp, #20
 8016942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016946:	4839      	ldr	r0, [pc, #228]	; (8016a2c <_printf_i+0x21c>)
 8016948:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801694c:	6813      	ldr	r3, [r2, #0]
 801694e:	6821      	ldr	r1, [r4, #0]
 8016950:	1d1d      	adds	r5, r3, #4
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	6015      	str	r5, [r2, #0]
 8016956:	060a      	lsls	r2, r1, #24
 8016958:	d50b      	bpl.n	8016972 <_printf_i+0x162>
 801695a:	07ca      	lsls	r2, r1, #31
 801695c:	bf44      	itt	mi
 801695e:	f041 0120 	orrmi.w	r1, r1, #32
 8016962:	6021      	strmi	r1, [r4, #0]
 8016964:	b91b      	cbnz	r3, 801696e <_printf_i+0x15e>
 8016966:	6822      	ldr	r2, [r4, #0]
 8016968:	f022 0220 	bic.w	r2, r2, #32
 801696c:	6022      	str	r2, [r4, #0]
 801696e:	2210      	movs	r2, #16
 8016970:	e7b7      	b.n	80168e2 <_printf_i+0xd2>
 8016972:	064d      	lsls	r5, r1, #25
 8016974:	bf48      	it	mi
 8016976:	b29b      	uxthmi	r3, r3
 8016978:	e7ef      	b.n	801695a <_printf_i+0x14a>
 801697a:	4665      	mov	r5, ip
 801697c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016980:	fb02 3311 	mls	r3, r2, r1, r3
 8016984:	5cc3      	ldrb	r3, [r0, r3]
 8016986:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801698a:	460b      	mov	r3, r1
 801698c:	2900      	cmp	r1, #0
 801698e:	d1f5      	bne.n	801697c <_printf_i+0x16c>
 8016990:	e7b9      	b.n	8016906 <_printf_i+0xf6>
 8016992:	6813      	ldr	r3, [r2, #0]
 8016994:	6825      	ldr	r5, [r4, #0]
 8016996:	6961      	ldr	r1, [r4, #20]
 8016998:	1d18      	adds	r0, r3, #4
 801699a:	6010      	str	r0, [r2, #0]
 801699c:	0628      	lsls	r0, r5, #24
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	d501      	bpl.n	80169a6 <_printf_i+0x196>
 80169a2:	6019      	str	r1, [r3, #0]
 80169a4:	e002      	b.n	80169ac <_printf_i+0x19c>
 80169a6:	066a      	lsls	r2, r5, #25
 80169a8:	d5fb      	bpl.n	80169a2 <_printf_i+0x192>
 80169aa:	8019      	strh	r1, [r3, #0]
 80169ac:	2300      	movs	r3, #0
 80169ae:	6123      	str	r3, [r4, #16]
 80169b0:	4665      	mov	r5, ip
 80169b2:	e7b9      	b.n	8016928 <_printf_i+0x118>
 80169b4:	6813      	ldr	r3, [r2, #0]
 80169b6:	1d19      	adds	r1, r3, #4
 80169b8:	6011      	str	r1, [r2, #0]
 80169ba:	681d      	ldr	r5, [r3, #0]
 80169bc:	6862      	ldr	r2, [r4, #4]
 80169be:	2100      	movs	r1, #0
 80169c0:	4628      	mov	r0, r5
 80169c2:	f7f1 fb45 	bl	8008050 <memchr>
 80169c6:	b108      	cbz	r0, 80169cc <_printf_i+0x1bc>
 80169c8:	1b40      	subs	r0, r0, r5
 80169ca:	6060      	str	r0, [r4, #4]
 80169cc:	6863      	ldr	r3, [r4, #4]
 80169ce:	6123      	str	r3, [r4, #16]
 80169d0:	2300      	movs	r3, #0
 80169d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80169d6:	e7a7      	b.n	8016928 <_printf_i+0x118>
 80169d8:	6923      	ldr	r3, [r4, #16]
 80169da:	462a      	mov	r2, r5
 80169dc:	4639      	mov	r1, r7
 80169de:	4630      	mov	r0, r6
 80169e0:	47c0      	blx	r8
 80169e2:	3001      	adds	r0, #1
 80169e4:	d0aa      	beq.n	801693c <_printf_i+0x12c>
 80169e6:	6823      	ldr	r3, [r4, #0]
 80169e8:	079b      	lsls	r3, r3, #30
 80169ea:	d413      	bmi.n	8016a14 <_printf_i+0x204>
 80169ec:	68e0      	ldr	r0, [r4, #12]
 80169ee:	9b03      	ldr	r3, [sp, #12]
 80169f0:	4298      	cmp	r0, r3
 80169f2:	bfb8      	it	lt
 80169f4:	4618      	movlt	r0, r3
 80169f6:	e7a3      	b.n	8016940 <_printf_i+0x130>
 80169f8:	2301      	movs	r3, #1
 80169fa:	464a      	mov	r2, r9
 80169fc:	4639      	mov	r1, r7
 80169fe:	4630      	mov	r0, r6
 8016a00:	47c0      	blx	r8
 8016a02:	3001      	adds	r0, #1
 8016a04:	d09a      	beq.n	801693c <_printf_i+0x12c>
 8016a06:	3501      	adds	r5, #1
 8016a08:	68e3      	ldr	r3, [r4, #12]
 8016a0a:	9a03      	ldr	r2, [sp, #12]
 8016a0c:	1a9b      	subs	r3, r3, r2
 8016a0e:	42ab      	cmp	r3, r5
 8016a10:	dcf2      	bgt.n	80169f8 <_printf_i+0x1e8>
 8016a12:	e7eb      	b.n	80169ec <_printf_i+0x1dc>
 8016a14:	2500      	movs	r5, #0
 8016a16:	f104 0919 	add.w	r9, r4, #25
 8016a1a:	e7f5      	b.n	8016a08 <_printf_i+0x1f8>
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d1ac      	bne.n	801697a <_printf_i+0x16a>
 8016a20:	7803      	ldrb	r3, [r0, #0]
 8016a22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016a26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016a2a:	e76c      	b.n	8016906 <_printf_i+0xf6>
 8016a2c:	08018a4a 	.word	0x08018a4a
 8016a30:	08018a5b 	.word	0x08018a5b

08016a34 <iprintf>:
 8016a34:	b40f      	push	{r0, r1, r2, r3}
 8016a36:	4b0a      	ldr	r3, [pc, #40]	; (8016a60 <iprintf+0x2c>)
 8016a38:	b513      	push	{r0, r1, r4, lr}
 8016a3a:	681c      	ldr	r4, [r3, #0]
 8016a3c:	b124      	cbz	r4, 8016a48 <iprintf+0x14>
 8016a3e:	69a3      	ldr	r3, [r4, #24]
 8016a40:	b913      	cbnz	r3, 8016a48 <iprintf+0x14>
 8016a42:	4620      	mov	r0, r4
 8016a44:	f001 f868 	bl	8017b18 <__sinit>
 8016a48:	ab05      	add	r3, sp, #20
 8016a4a:	9a04      	ldr	r2, [sp, #16]
 8016a4c:	68a1      	ldr	r1, [r4, #8]
 8016a4e:	9301      	str	r3, [sp, #4]
 8016a50:	4620      	mov	r0, r4
 8016a52:	f001 fd21 	bl	8018498 <_vfiprintf_r>
 8016a56:	b002      	add	sp, #8
 8016a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a5c:	b004      	add	sp, #16
 8016a5e:	4770      	bx	lr
 8016a60:	2000008c 	.word	0x2000008c

08016a64 <_puts_r>:
 8016a64:	b570      	push	{r4, r5, r6, lr}
 8016a66:	460e      	mov	r6, r1
 8016a68:	4605      	mov	r5, r0
 8016a6a:	b118      	cbz	r0, 8016a74 <_puts_r+0x10>
 8016a6c:	6983      	ldr	r3, [r0, #24]
 8016a6e:	b90b      	cbnz	r3, 8016a74 <_puts_r+0x10>
 8016a70:	f001 f852 	bl	8017b18 <__sinit>
 8016a74:	69ab      	ldr	r3, [r5, #24]
 8016a76:	68ac      	ldr	r4, [r5, #8]
 8016a78:	b913      	cbnz	r3, 8016a80 <_puts_r+0x1c>
 8016a7a:	4628      	mov	r0, r5
 8016a7c:	f001 f84c 	bl	8017b18 <__sinit>
 8016a80:	4b23      	ldr	r3, [pc, #140]	; (8016b10 <_puts_r+0xac>)
 8016a82:	429c      	cmp	r4, r3
 8016a84:	d117      	bne.n	8016ab6 <_puts_r+0x52>
 8016a86:	686c      	ldr	r4, [r5, #4]
 8016a88:	89a3      	ldrh	r3, [r4, #12]
 8016a8a:	071b      	lsls	r3, r3, #28
 8016a8c:	d51d      	bpl.n	8016aca <_puts_r+0x66>
 8016a8e:	6923      	ldr	r3, [r4, #16]
 8016a90:	b1db      	cbz	r3, 8016aca <_puts_r+0x66>
 8016a92:	3e01      	subs	r6, #1
 8016a94:	68a3      	ldr	r3, [r4, #8]
 8016a96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016a9a:	3b01      	subs	r3, #1
 8016a9c:	60a3      	str	r3, [r4, #8]
 8016a9e:	b9e9      	cbnz	r1, 8016adc <_puts_r+0x78>
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	da2e      	bge.n	8016b02 <_puts_r+0x9e>
 8016aa4:	4622      	mov	r2, r4
 8016aa6:	210a      	movs	r1, #10
 8016aa8:	4628      	mov	r0, r5
 8016aaa:	f000 f83f 	bl	8016b2c <__swbuf_r>
 8016aae:	3001      	adds	r0, #1
 8016ab0:	d011      	beq.n	8016ad6 <_puts_r+0x72>
 8016ab2:	200a      	movs	r0, #10
 8016ab4:	e011      	b.n	8016ada <_puts_r+0x76>
 8016ab6:	4b17      	ldr	r3, [pc, #92]	; (8016b14 <_puts_r+0xb0>)
 8016ab8:	429c      	cmp	r4, r3
 8016aba:	d101      	bne.n	8016ac0 <_puts_r+0x5c>
 8016abc:	68ac      	ldr	r4, [r5, #8]
 8016abe:	e7e3      	b.n	8016a88 <_puts_r+0x24>
 8016ac0:	4b15      	ldr	r3, [pc, #84]	; (8016b18 <_puts_r+0xb4>)
 8016ac2:	429c      	cmp	r4, r3
 8016ac4:	bf08      	it	eq
 8016ac6:	68ec      	ldreq	r4, [r5, #12]
 8016ac8:	e7de      	b.n	8016a88 <_puts_r+0x24>
 8016aca:	4621      	mov	r1, r4
 8016acc:	4628      	mov	r0, r5
 8016ace:	f000 f87f 	bl	8016bd0 <__swsetup_r>
 8016ad2:	2800      	cmp	r0, #0
 8016ad4:	d0dd      	beq.n	8016a92 <_puts_r+0x2e>
 8016ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8016ada:	bd70      	pop	{r4, r5, r6, pc}
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	da04      	bge.n	8016aea <_puts_r+0x86>
 8016ae0:	69a2      	ldr	r2, [r4, #24]
 8016ae2:	429a      	cmp	r2, r3
 8016ae4:	dc06      	bgt.n	8016af4 <_puts_r+0x90>
 8016ae6:	290a      	cmp	r1, #10
 8016ae8:	d004      	beq.n	8016af4 <_puts_r+0x90>
 8016aea:	6823      	ldr	r3, [r4, #0]
 8016aec:	1c5a      	adds	r2, r3, #1
 8016aee:	6022      	str	r2, [r4, #0]
 8016af0:	7019      	strb	r1, [r3, #0]
 8016af2:	e7cf      	b.n	8016a94 <_puts_r+0x30>
 8016af4:	4622      	mov	r2, r4
 8016af6:	4628      	mov	r0, r5
 8016af8:	f000 f818 	bl	8016b2c <__swbuf_r>
 8016afc:	3001      	adds	r0, #1
 8016afe:	d1c9      	bne.n	8016a94 <_puts_r+0x30>
 8016b00:	e7e9      	b.n	8016ad6 <_puts_r+0x72>
 8016b02:	6823      	ldr	r3, [r4, #0]
 8016b04:	200a      	movs	r0, #10
 8016b06:	1c5a      	adds	r2, r3, #1
 8016b08:	6022      	str	r2, [r4, #0]
 8016b0a:	7018      	strb	r0, [r3, #0]
 8016b0c:	e7e5      	b.n	8016ada <_puts_r+0x76>
 8016b0e:	bf00      	nop
 8016b10:	08018a9c 	.word	0x08018a9c
 8016b14:	08018abc 	.word	0x08018abc
 8016b18:	08018a7c 	.word	0x08018a7c

08016b1c <puts>:
 8016b1c:	4b02      	ldr	r3, [pc, #8]	; (8016b28 <puts+0xc>)
 8016b1e:	4601      	mov	r1, r0
 8016b20:	6818      	ldr	r0, [r3, #0]
 8016b22:	f7ff bf9f 	b.w	8016a64 <_puts_r>
 8016b26:	bf00      	nop
 8016b28:	2000008c 	.word	0x2000008c

08016b2c <__swbuf_r>:
 8016b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b2e:	460e      	mov	r6, r1
 8016b30:	4614      	mov	r4, r2
 8016b32:	4605      	mov	r5, r0
 8016b34:	b118      	cbz	r0, 8016b3e <__swbuf_r+0x12>
 8016b36:	6983      	ldr	r3, [r0, #24]
 8016b38:	b90b      	cbnz	r3, 8016b3e <__swbuf_r+0x12>
 8016b3a:	f000 ffed 	bl	8017b18 <__sinit>
 8016b3e:	4b21      	ldr	r3, [pc, #132]	; (8016bc4 <__swbuf_r+0x98>)
 8016b40:	429c      	cmp	r4, r3
 8016b42:	d12a      	bne.n	8016b9a <__swbuf_r+0x6e>
 8016b44:	686c      	ldr	r4, [r5, #4]
 8016b46:	69a3      	ldr	r3, [r4, #24]
 8016b48:	60a3      	str	r3, [r4, #8]
 8016b4a:	89a3      	ldrh	r3, [r4, #12]
 8016b4c:	071a      	lsls	r2, r3, #28
 8016b4e:	d52e      	bpl.n	8016bae <__swbuf_r+0x82>
 8016b50:	6923      	ldr	r3, [r4, #16]
 8016b52:	b363      	cbz	r3, 8016bae <__swbuf_r+0x82>
 8016b54:	6923      	ldr	r3, [r4, #16]
 8016b56:	6820      	ldr	r0, [r4, #0]
 8016b58:	1ac0      	subs	r0, r0, r3
 8016b5a:	6963      	ldr	r3, [r4, #20]
 8016b5c:	b2f6      	uxtb	r6, r6
 8016b5e:	4283      	cmp	r3, r0
 8016b60:	4637      	mov	r7, r6
 8016b62:	dc04      	bgt.n	8016b6e <__swbuf_r+0x42>
 8016b64:	4621      	mov	r1, r4
 8016b66:	4628      	mov	r0, r5
 8016b68:	f000 ff6c 	bl	8017a44 <_fflush_r>
 8016b6c:	bb28      	cbnz	r0, 8016bba <__swbuf_r+0x8e>
 8016b6e:	68a3      	ldr	r3, [r4, #8]
 8016b70:	3b01      	subs	r3, #1
 8016b72:	60a3      	str	r3, [r4, #8]
 8016b74:	6823      	ldr	r3, [r4, #0]
 8016b76:	1c5a      	adds	r2, r3, #1
 8016b78:	6022      	str	r2, [r4, #0]
 8016b7a:	701e      	strb	r6, [r3, #0]
 8016b7c:	6963      	ldr	r3, [r4, #20]
 8016b7e:	3001      	adds	r0, #1
 8016b80:	4283      	cmp	r3, r0
 8016b82:	d004      	beq.n	8016b8e <__swbuf_r+0x62>
 8016b84:	89a3      	ldrh	r3, [r4, #12]
 8016b86:	07db      	lsls	r3, r3, #31
 8016b88:	d519      	bpl.n	8016bbe <__swbuf_r+0x92>
 8016b8a:	2e0a      	cmp	r6, #10
 8016b8c:	d117      	bne.n	8016bbe <__swbuf_r+0x92>
 8016b8e:	4621      	mov	r1, r4
 8016b90:	4628      	mov	r0, r5
 8016b92:	f000 ff57 	bl	8017a44 <_fflush_r>
 8016b96:	b190      	cbz	r0, 8016bbe <__swbuf_r+0x92>
 8016b98:	e00f      	b.n	8016bba <__swbuf_r+0x8e>
 8016b9a:	4b0b      	ldr	r3, [pc, #44]	; (8016bc8 <__swbuf_r+0x9c>)
 8016b9c:	429c      	cmp	r4, r3
 8016b9e:	d101      	bne.n	8016ba4 <__swbuf_r+0x78>
 8016ba0:	68ac      	ldr	r4, [r5, #8]
 8016ba2:	e7d0      	b.n	8016b46 <__swbuf_r+0x1a>
 8016ba4:	4b09      	ldr	r3, [pc, #36]	; (8016bcc <__swbuf_r+0xa0>)
 8016ba6:	429c      	cmp	r4, r3
 8016ba8:	bf08      	it	eq
 8016baa:	68ec      	ldreq	r4, [r5, #12]
 8016bac:	e7cb      	b.n	8016b46 <__swbuf_r+0x1a>
 8016bae:	4621      	mov	r1, r4
 8016bb0:	4628      	mov	r0, r5
 8016bb2:	f000 f80d 	bl	8016bd0 <__swsetup_r>
 8016bb6:	2800      	cmp	r0, #0
 8016bb8:	d0cc      	beq.n	8016b54 <__swbuf_r+0x28>
 8016bba:	f04f 37ff 	mov.w	r7, #4294967295
 8016bbe:	4638      	mov	r0, r7
 8016bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bc2:	bf00      	nop
 8016bc4:	08018a9c 	.word	0x08018a9c
 8016bc8:	08018abc 	.word	0x08018abc
 8016bcc:	08018a7c 	.word	0x08018a7c

08016bd0 <__swsetup_r>:
 8016bd0:	4b32      	ldr	r3, [pc, #200]	; (8016c9c <__swsetup_r+0xcc>)
 8016bd2:	b570      	push	{r4, r5, r6, lr}
 8016bd4:	681d      	ldr	r5, [r3, #0]
 8016bd6:	4606      	mov	r6, r0
 8016bd8:	460c      	mov	r4, r1
 8016bda:	b125      	cbz	r5, 8016be6 <__swsetup_r+0x16>
 8016bdc:	69ab      	ldr	r3, [r5, #24]
 8016bde:	b913      	cbnz	r3, 8016be6 <__swsetup_r+0x16>
 8016be0:	4628      	mov	r0, r5
 8016be2:	f000 ff99 	bl	8017b18 <__sinit>
 8016be6:	4b2e      	ldr	r3, [pc, #184]	; (8016ca0 <__swsetup_r+0xd0>)
 8016be8:	429c      	cmp	r4, r3
 8016bea:	d10f      	bne.n	8016c0c <__swsetup_r+0x3c>
 8016bec:	686c      	ldr	r4, [r5, #4]
 8016bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016bf2:	b29a      	uxth	r2, r3
 8016bf4:	0715      	lsls	r5, r2, #28
 8016bf6:	d42c      	bmi.n	8016c52 <__swsetup_r+0x82>
 8016bf8:	06d0      	lsls	r0, r2, #27
 8016bfa:	d411      	bmi.n	8016c20 <__swsetup_r+0x50>
 8016bfc:	2209      	movs	r2, #9
 8016bfe:	6032      	str	r2, [r6, #0]
 8016c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c04:	81a3      	strh	r3, [r4, #12]
 8016c06:	f04f 30ff 	mov.w	r0, #4294967295
 8016c0a:	e03e      	b.n	8016c8a <__swsetup_r+0xba>
 8016c0c:	4b25      	ldr	r3, [pc, #148]	; (8016ca4 <__swsetup_r+0xd4>)
 8016c0e:	429c      	cmp	r4, r3
 8016c10:	d101      	bne.n	8016c16 <__swsetup_r+0x46>
 8016c12:	68ac      	ldr	r4, [r5, #8]
 8016c14:	e7eb      	b.n	8016bee <__swsetup_r+0x1e>
 8016c16:	4b24      	ldr	r3, [pc, #144]	; (8016ca8 <__swsetup_r+0xd8>)
 8016c18:	429c      	cmp	r4, r3
 8016c1a:	bf08      	it	eq
 8016c1c:	68ec      	ldreq	r4, [r5, #12]
 8016c1e:	e7e6      	b.n	8016bee <__swsetup_r+0x1e>
 8016c20:	0751      	lsls	r1, r2, #29
 8016c22:	d512      	bpl.n	8016c4a <__swsetup_r+0x7a>
 8016c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c26:	b141      	cbz	r1, 8016c3a <__swsetup_r+0x6a>
 8016c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c2c:	4299      	cmp	r1, r3
 8016c2e:	d002      	beq.n	8016c36 <__swsetup_r+0x66>
 8016c30:	4630      	mov	r0, r6
 8016c32:	f001 fb5f 	bl	80182f4 <_free_r>
 8016c36:	2300      	movs	r3, #0
 8016c38:	6363      	str	r3, [r4, #52]	; 0x34
 8016c3a:	89a3      	ldrh	r3, [r4, #12]
 8016c3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016c40:	81a3      	strh	r3, [r4, #12]
 8016c42:	2300      	movs	r3, #0
 8016c44:	6063      	str	r3, [r4, #4]
 8016c46:	6923      	ldr	r3, [r4, #16]
 8016c48:	6023      	str	r3, [r4, #0]
 8016c4a:	89a3      	ldrh	r3, [r4, #12]
 8016c4c:	f043 0308 	orr.w	r3, r3, #8
 8016c50:	81a3      	strh	r3, [r4, #12]
 8016c52:	6923      	ldr	r3, [r4, #16]
 8016c54:	b94b      	cbnz	r3, 8016c6a <__swsetup_r+0x9a>
 8016c56:	89a3      	ldrh	r3, [r4, #12]
 8016c58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c60:	d003      	beq.n	8016c6a <__swsetup_r+0x9a>
 8016c62:	4621      	mov	r1, r4
 8016c64:	4630      	mov	r0, r6
 8016c66:	f001 f813 	bl	8017c90 <__smakebuf_r>
 8016c6a:	89a2      	ldrh	r2, [r4, #12]
 8016c6c:	f012 0301 	ands.w	r3, r2, #1
 8016c70:	d00c      	beq.n	8016c8c <__swsetup_r+0xbc>
 8016c72:	2300      	movs	r3, #0
 8016c74:	60a3      	str	r3, [r4, #8]
 8016c76:	6963      	ldr	r3, [r4, #20]
 8016c78:	425b      	negs	r3, r3
 8016c7a:	61a3      	str	r3, [r4, #24]
 8016c7c:	6923      	ldr	r3, [r4, #16]
 8016c7e:	b953      	cbnz	r3, 8016c96 <__swsetup_r+0xc6>
 8016c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c84:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016c88:	d1ba      	bne.n	8016c00 <__swsetup_r+0x30>
 8016c8a:	bd70      	pop	{r4, r5, r6, pc}
 8016c8c:	0792      	lsls	r2, r2, #30
 8016c8e:	bf58      	it	pl
 8016c90:	6963      	ldrpl	r3, [r4, #20]
 8016c92:	60a3      	str	r3, [r4, #8]
 8016c94:	e7f2      	b.n	8016c7c <__swsetup_r+0xac>
 8016c96:	2000      	movs	r0, #0
 8016c98:	e7f7      	b.n	8016c8a <__swsetup_r+0xba>
 8016c9a:	bf00      	nop
 8016c9c:	2000008c 	.word	0x2000008c
 8016ca0:	08018a9c 	.word	0x08018a9c
 8016ca4:	08018abc 	.word	0x08018abc
 8016ca8:	08018a7c 	.word	0x08018a7c

08016cac <quorem>:
 8016cac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cb0:	6903      	ldr	r3, [r0, #16]
 8016cb2:	690c      	ldr	r4, [r1, #16]
 8016cb4:	42a3      	cmp	r3, r4
 8016cb6:	4680      	mov	r8, r0
 8016cb8:	f2c0 8082 	blt.w	8016dc0 <quorem+0x114>
 8016cbc:	3c01      	subs	r4, #1
 8016cbe:	f101 0714 	add.w	r7, r1, #20
 8016cc2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016cc6:	f100 0614 	add.w	r6, r0, #20
 8016cca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016cce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016cd2:	eb06 030c 	add.w	r3, r6, ip
 8016cd6:	3501      	adds	r5, #1
 8016cd8:	eb07 090c 	add.w	r9, r7, ip
 8016cdc:	9301      	str	r3, [sp, #4]
 8016cde:	fbb0 f5f5 	udiv	r5, r0, r5
 8016ce2:	b395      	cbz	r5, 8016d4a <quorem+0x9e>
 8016ce4:	f04f 0a00 	mov.w	sl, #0
 8016ce8:	4638      	mov	r0, r7
 8016cea:	46b6      	mov	lr, r6
 8016cec:	46d3      	mov	fp, sl
 8016cee:	f850 2b04 	ldr.w	r2, [r0], #4
 8016cf2:	b293      	uxth	r3, r2
 8016cf4:	fb05 a303 	mla	r3, r5, r3, sl
 8016cf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016cfc:	b29b      	uxth	r3, r3
 8016cfe:	ebab 0303 	sub.w	r3, fp, r3
 8016d02:	0c12      	lsrs	r2, r2, #16
 8016d04:	f8de b000 	ldr.w	fp, [lr]
 8016d08:	fb05 a202 	mla	r2, r5, r2, sl
 8016d0c:	fa13 f38b 	uxtah	r3, r3, fp
 8016d10:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016d14:	fa1f fb82 	uxth.w	fp, r2
 8016d18:	f8de 2000 	ldr.w	r2, [lr]
 8016d1c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016d20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016d24:	b29b      	uxth	r3, r3
 8016d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016d2a:	4581      	cmp	r9, r0
 8016d2c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016d30:	f84e 3b04 	str.w	r3, [lr], #4
 8016d34:	d2db      	bcs.n	8016cee <quorem+0x42>
 8016d36:	f856 300c 	ldr.w	r3, [r6, ip]
 8016d3a:	b933      	cbnz	r3, 8016d4a <quorem+0x9e>
 8016d3c:	9b01      	ldr	r3, [sp, #4]
 8016d3e:	3b04      	subs	r3, #4
 8016d40:	429e      	cmp	r6, r3
 8016d42:	461a      	mov	r2, r3
 8016d44:	d330      	bcc.n	8016da8 <quorem+0xfc>
 8016d46:	f8c8 4010 	str.w	r4, [r8, #16]
 8016d4a:	4640      	mov	r0, r8
 8016d4c:	f001 f9fe 	bl	801814c <__mcmp>
 8016d50:	2800      	cmp	r0, #0
 8016d52:	db25      	blt.n	8016da0 <quorem+0xf4>
 8016d54:	3501      	adds	r5, #1
 8016d56:	4630      	mov	r0, r6
 8016d58:	f04f 0c00 	mov.w	ip, #0
 8016d5c:	f857 2b04 	ldr.w	r2, [r7], #4
 8016d60:	f8d0 e000 	ldr.w	lr, [r0]
 8016d64:	b293      	uxth	r3, r2
 8016d66:	ebac 0303 	sub.w	r3, ip, r3
 8016d6a:	0c12      	lsrs	r2, r2, #16
 8016d6c:	fa13 f38e 	uxtah	r3, r3, lr
 8016d70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016d74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016d78:	b29b      	uxth	r3, r3
 8016d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016d7e:	45b9      	cmp	r9, r7
 8016d80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016d84:	f840 3b04 	str.w	r3, [r0], #4
 8016d88:	d2e8      	bcs.n	8016d5c <quorem+0xb0>
 8016d8a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016d8e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016d92:	b92a      	cbnz	r2, 8016da0 <quorem+0xf4>
 8016d94:	3b04      	subs	r3, #4
 8016d96:	429e      	cmp	r6, r3
 8016d98:	461a      	mov	r2, r3
 8016d9a:	d30b      	bcc.n	8016db4 <quorem+0x108>
 8016d9c:	f8c8 4010 	str.w	r4, [r8, #16]
 8016da0:	4628      	mov	r0, r5
 8016da2:	b003      	add	sp, #12
 8016da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016da8:	6812      	ldr	r2, [r2, #0]
 8016daa:	3b04      	subs	r3, #4
 8016dac:	2a00      	cmp	r2, #0
 8016dae:	d1ca      	bne.n	8016d46 <quorem+0x9a>
 8016db0:	3c01      	subs	r4, #1
 8016db2:	e7c5      	b.n	8016d40 <quorem+0x94>
 8016db4:	6812      	ldr	r2, [r2, #0]
 8016db6:	3b04      	subs	r3, #4
 8016db8:	2a00      	cmp	r2, #0
 8016dba:	d1ef      	bne.n	8016d9c <quorem+0xf0>
 8016dbc:	3c01      	subs	r4, #1
 8016dbe:	e7ea      	b.n	8016d96 <quorem+0xea>
 8016dc0:	2000      	movs	r0, #0
 8016dc2:	e7ee      	b.n	8016da2 <quorem+0xf6>
 8016dc4:	0000      	movs	r0, r0
	...

08016dc8 <_dtoa_r>:
 8016dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dcc:	ec57 6b10 	vmov	r6, r7, d0
 8016dd0:	b097      	sub	sp, #92	; 0x5c
 8016dd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016dd4:	9106      	str	r1, [sp, #24]
 8016dd6:	4604      	mov	r4, r0
 8016dd8:	920b      	str	r2, [sp, #44]	; 0x2c
 8016dda:	9312      	str	r3, [sp, #72]	; 0x48
 8016ddc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016de0:	e9cd 6700 	strd	r6, r7, [sp]
 8016de4:	b93d      	cbnz	r5, 8016df6 <_dtoa_r+0x2e>
 8016de6:	2010      	movs	r0, #16
 8016de8:	f000 ff92 	bl	8017d10 <malloc>
 8016dec:	6260      	str	r0, [r4, #36]	; 0x24
 8016dee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016df2:	6005      	str	r5, [r0, #0]
 8016df4:	60c5      	str	r5, [r0, #12]
 8016df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016df8:	6819      	ldr	r1, [r3, #0]
 8016dfa:	b151      	cbz	r1, 8016e12 <_dtoa_r+0x4a>
 8016dfc:	685a      	ldr	r2, [r3, #4]
 8016dfe:	604a      	str	r2, [r1, #4]
 8016e00:	2301      	movs	r3, #1
 8016e02:	4093      	lsls	r3, r2
 8016e04:	608b      	str	r3, [r1, #8]
 8016e06:	4620      	mov	r0, r4
 8016e08:	f000 ffbe 	bl	8017d88 <_Bfree>
 8016e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e0e:	2200      	movs	r2, #0
 8016e10:	601a      	str	r2, [r3, #0]
 8016e12:	1e3b      	subs	r3, r7, #0
 8016e14:	bfbb      	ittet	lt
 8016e16:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016e1a:	9301      	strlt	r3, [sp, #4]
 8016e1c:	2300      	movge	r3, #0
 8016e1e:	2201      	movlt	r2, #1
 8016e20:	bfac      	ite	ge
 8016e22:	f8c8 3000 	strge.w	r3, [r8]
 8016e26:	f8c8 2000 	strlt.w	r2, [r8]
 8016e2a:	4baf      	ldr	r3, [pc, #700]	; (80170e8 <_dtoa_r+0x320>)
 8016e2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016e30:	ea33 0308 	bics.w	r3, r3, r8
 8016e34:	d114      	bne.n	8016e60 <_dtoa_r+0x98>
 8016e36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016e38:	f242 730f 	movw	r3, #9999	; 0x270f
 8016e3c:	6013      	str	r3, [r2, #0]
 8016e3e:	9b00      	ldr	r3, [sp, #0]
 8016e40:	b923      	cbnz	r3, 8016e4c <_dtoa_r+0x84>
 8016e42:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016e46:	2800      	cmp	r0, #0
 8016e48:	f000 8542 	beq.w	80178d0 <_dtoa_r+0xb08>
 8016e4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016e4e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80170fc <_dtoa_r+0x334>
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	f000 8544 	beq.w	80178e0 <_dtoa_r+0xb18>
 8016e58:	f10b 0303 	add.w	r3, fp, #3
 8016e5c:	f000 bd3e 	b.w	80178dc <_dtoa_r+0xb14>
 8016e60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016e64:	2200      	movs	r2, #0
 8016e66:	2300      	movs	r3, #0
 8016e68:	4630      	mov	r0, r6
 8016e6a:	4639      	mov	r1, r7
 8016e6c:	f7f1 fd64 	bl	8008938 <__aeabi_dcmpeq>
 8016e70:	4681      	mov	r9, r0
 8016e72:	b168      	cbz	r0, 8016e90 <_dtoa_r+0xc8>
 8016e74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016e76:	2301      	movs	r3, #1
 8016e78:	6013      	str	r3, [r2, #0]
 8016e7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	f000 8524 	beq.w	80178ca <_dtoa_r+0xb02>
 8016e82:	4b9a      	ldr	r3, [pc, #616]	; (80170ec <_dtoa_r+0x324>)
 8016e84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016e86:	f103 3bff 	add.w	fp, r3, #4294967295
 8016e8a:	6013      	str	r3, [r2, #0]
 8016e8c:	f000 bd28 	b.w	80178e0 <_dtoa_r+0xb18>
 8016e90:	aa14      	add	r2, sp, #80	; 0x50
 8016e92:	a915      	add	r1, sp, #84	; 0x54
 8016e94:	ec47 6b10 	vmov	d0, r6, r7
 8016e98:	4620      	mov	r0, r4
 8016e9a:	f001 f9ce 	bl	801823a <__d2b>
 8016e9e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016ea2:	9004      	str	r0, [sp, #16]
 8016ea4:	2d00      	cmp	r5, #0
 8016ea6:	d07c      	beq.n	8016fa2 <_dtoa_r+0x1da>
 8016ea8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016eac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016eb0:	46b2      	mov	sl, r6
 8016eb2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016eb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016eba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016ebe:	2200      	movs	r2, #0
 8016ec0:	4b8b      	ldr	r3, [pc, #556]	; (80170f0 <_dtoa_r+0x328>)
 8016ec2:	4650      	mov	r0, sl
 8016ec4:	4659      	mov	r1, fp
 8016ec6:	f7f1 f917 	bl	80080f8 <__aeabi_dsub>
 8016eca:	a381      	add	r3, pc, #516	; (adr r3, 80170d0 <_dtoa_r+0x308>)
 8016ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ed0:	f7f1 faca 	bl	8008468 <__aeabi_dmul>
 8016ed4:	a380      	add	r3, pc, #512	; (adr r3, 80170d8 <_dtoa_r+0x310>)
 8016ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eda:	f7f1 f90f 	bl	80080fc <__adddf3>
 8016ede:	4606      	mov	r6, r0
 8016ee0:	4628      	mov	r0, r5
 8016ee2:	460f      	mov	r7, r1
 8016ee4:	f7f1 fa56 	bl	8008394 <__aeabi_i2d>
 8016ee8:	a37d      	add	r3, pc, #500	; (adr r3, 80170e0 <_dtoa_r+0x318>)
 8016eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eee:	f7f1 fabb 	bl	8008468 <__aeabi_dmul>
 8016ef2:	4602      	mov	r2, r0
 8016ef4:	460b      	mov	r3, r1
 8016ef6:	4630      	mov	r0, r6
 8016ef8:	4639      	mov	r1, r7
 8016efa:	f7f1 f8ff 	bl	80080fc <__adddf3>
 8016efe:	4606      	mov	r6, r0
 8016f00:	460f      	mov	r7, r1
 8016f02:	f7f1 fd61 	bl	80089c8 <__aeabi_d2iz>
 8016f06:	2200      	movs	r2, #0
 8016f08:	4682      	mov	sl, r0
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	4630      	mov	r0, r6
 8016f0e:	4639      	mov	r1, r7
 8016f10:	f7f1 fd1c 	bl	800894c <__aeabi_dcmplt>
 8016f14:	b148      	cbz	r0, 8016f2a <_dtoa_r+0x162>
 8016f16:	4650      	mov	r0, sl
 8016f18:	f7f1 fa3c 	bl	8008394 <__aeabi_i2d>
 8016f1c:	4632      	mov	r2, r6
 8016f1e:	463b      	mov	r3, r7
 8016f20:	f7f1 fd0a 	bl	8008938 <__aeabi_dcmpeq>
 8016f24:	b908      	cbnz	r0, 8016f2a <_dtoa_r+0x162>
 8016f26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016f2a:	f1ba 0f16 	cmp.w	sl, #22
 8016f2e:	d859      	bhi.n	8016fe4 <_dtoa_r+0x21c>
 8016f30:	4970      	ldr	r1, [pc, #448]	; (80170f4 <_dtoa_r+0x32c>)
 8016f32:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016f36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016f3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f3e:	f7f1 fd23 	bl	8008988 <__aeabi_dcmpgt>
 8016f42:	2800      	cmp	r0, #0
 8016f44:	d050      	beq.n	8016fe8 <_dtoa_r+0x220>
 8016f46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016f50:	1b5d      	subs	r5, r3, r5
 8016f52:	f1b5 0801 	subs.w	r8, r5, #1
 8016f56:	bf49      	itett	mi
 8016f58:	f1c5 0301 	rsbmi	r3, r5, #1
 8016f5c:	2300      	movpl	r3, #0
 8016f5e:	9305      	strmi	r3, [sp, #20]
 8016f60:	f04f 0800 	movmi.w	r8, #0
 8016f64:	bf58      	it	pl
 8016f66:	9305      	strpl	r3, [sp, #20]
 8016f68:	f1ba 0f00 	cmp.w	sl, #0
 8016f6c:	db3e      	blt.n	8016fec <_dtoa_r+0x224>
 8016f6e:	2300      	movs	r3, #0
 8016f70:	44d0      	add	r8, sl
 8016f72:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016f76:	9307      	str	r3, [sp, #28]
 8016f78:	9b06      	ldr	r3, [sp, #24]
 8016f7a:	2b09      	cmp	r3, #9
 8016f7c:	f200 8090 	bhi.w	80170a0 <_dtoa_r+0x2d8>
 8016f80:	2b05      	cmp	r3, #5
 8016f82:	bfc4      	itt	gt
 8016f84:	3b04      	subgt	r3, #4
 8016f86:	9306      	strgt	r3, [sp, #24]
 8016f88:	9b06      	ldr	r3, [sp, #24]
 8016f8a:	f1a3 0302 	sub.w	r3, r3, #2
 8016f8e:	bfcc      	ite	gt
 8016f90:	2500      	movgt	r5, #0
 8016f92:	2501      	movle	r5, #1
 8016f94:	2b03      	cmp	r3, #3
 8016f96:	f200 808f 	bhi.w	80170b8 <_dtoa_r+0x2f0>
 8016f9a:	e8df f003 	tbb	[pc, r3]
 8016f9e:	7f7d      	.short	0x7f7d
 8016fa0:	7131      	.short	0x7131
 8016fa2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016fa6:	441d      	add	r5, r3
 8016fa8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016fac:	2820      	cmp	r0, #32
 8016fae:	dd13      	ble.n	8016fd8 <_dtoa_r+0x210>
 8016fb0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016fb4:	9b00      	ldr	r3, [sp, #0]
 8016fb6:	fa08 f800 	lsl.w	r8, r8, r0
 8016fba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016fbe:	fa23 f000 	lsr.w	r0, r3, r0
 8016fc2:	ea48 0000 	orr.w	r0, r8, r0
 8016fc6:	f7f1 f9d5 	bl	8008374 <__aeabi_ui2d>
 8016fca:	2301      	movs	r3, #1
 8016fcc:	4682      	mov	sl, r0
 8016fce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016fd2:	3d01      	subs	r5, #1
 8016fd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8016fd6:	e772      	b.n	8016ebe <_dtoa_r+0xf6>
 8016fd8:	9b00      	ldr	r3, [sp, #0]
 8016fda:	f1c0 0020 	rsb	r0, r0, #32
 8016fde:	fa03 f000 	lsl.w	r0, r3, r0
 8016fe2:	e7f0      	b.n	8016fc6 <_dtoa_r+0x1fe>
 8016fe4:	2301      	movs	r3, #1
 8016fe6:	e7b1      	b.n	8016f4c <_dtoa_r+0x184>
 8016fe8:	900f      	str	r0, [sp, #60]	; 0x3c
 8016fea:	e7b0      	b.n	8016f4e <_dtoa_r+0x186>
 8016fec:	9b05      	ldr	r3, [sp, #20]
 8016fee:	eba3 030a 	sub.w	r3, r3, sl
 8016ff2:	9305      	str	r3, [sp, #20]
 8016ff4:	f1ca 0300 	rsb	r3, sl, #0
 8016ff8:	9307      	str	r3, [sp, #28]
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	930e      	str	r3, [sp, #56]	; 0x38
 8016ffe:	e7bb      	b.n	8016f78 <_dtoa_r+0x1b0>
 8017000:	2301      	movs	r3, #1
 8017002:	930a      	str	r3, [sp, #40]	; 0x28
 8017004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017006:	2b00      	cmp	r3, #0
 8017008:	dd59      	ble.n	80170be <_dtoa_r+0x2f6>
 801700a:	9302      	str	r3, [sp, #8]
 801700c:	4699      	mov	r9, r3
 801700e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017010:	2200      	movs	r2, #0
 8017012:	6072      	str	r2, [r6, #4]
 8017014:	2204      	movs	r2, #4
 8017016:	f102 0014 	add.w	r0, r2, #20
 801701a:	4298      	cmp	r0, r3
 801701c:	6871      	ldr	r1, [r6, #4]
 801701e:	d953      	bls.n	80170c8 <_dtoa_r+0x300>
 8017020:	4620      	mov	r0, r4
 8017022:	f000 fe7d 	bl	8017d20 <_Balloc>
 8017026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017028:	6030      	str	r0, [r6, #0]
 801702a:	f1b9 0f0e 	cmp.w	r9, #14
 801702e:	f8d3 b000 	ldr.w	fp, [r3]
 8017032:	f200 80e6 	bhi.w	8017202 <_dtoa_r+0x43a>
 8017036:	2d00      	cmp	r5, #0
 8017038:	f000 80e3 	beq.w	8017202 <_dtoa_r+0x43a>
 801703c:	ed9d 7b00 	vldr	d7, [sp]
 8017040:	f1ba 0f00 	cmp.w	sl, #0
 8017044:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017048:	dd74      	ble.n	8017134 <_dtoa_r+0x36c>
 801704a:	4a2a      	ldr	r2, [pc, #168]	; (80170f4 <_dtoa_r+0x32c>)
 801704c:	f00a 030f 	and.w	r3, sl, #15
 8017050:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017054:	ed93 7b00 	vldr	d7, [r3]
 8017058:	ea4f 162a 	mov.w	r6, sl, asr #4
 801705c:	06f0      	lsls	r0, r6, #27
 801705e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017062:	d565      	bpl.n	8017130 <_dtoa_r+0x368>
 8017064:	4b24      	ldr	r3, [pc, #144]	; (80170f8 <_dtoa_r+0x330>)
 8017066:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801706a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801706e:	f7f1 fb25 	bl	80086bc <__aeabi_ddiv>
 8017072:	e9cd 0100 	strd	r0, r1, [sp]
 8017076:	f006 060f 	and.w	r6, r6, #15
 801707a:	2503      	movs	r5, #3
 801707c:	4f1e      	ldr	r7, [pc, #120]	; (80170f8 <_dtoa_r+0x330>)
 801707e:	e04c      	b.n	801711a <_dtoa_r+0x352>
 8017080:	2301      	movs	r3, #1
 8017082:	930a      	str	r3, [sp, #40]	; 0x28
 8017084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017086:	4453      	add	r3, sl
 8017088:	f103 0901 	add.w	r9, r3, #1
 801708c:	9302      	str	r3, [sp, #8]
 801708e:	464b      	mov	r3, r9
 8017090:	2b01      	cmp	r3, #1
 8017092:	bfb8      	it	lt
 8017094:	2301      	movlt	r3, #1
 8017096:	e7ba      	b.n	801700e <_dtoa_r+0x246>
 8017098:	2300      	movs	r3, #0
 801709a:	e7b2      	b.n	8017002 <_dtoa_r+0x23a>
 801709c:	2300      	movs	r3, #0
 801709e:	e7f0      	b.n	8017082 <_dtoa_r+0x2ba>
 80170a0:	2501      	movs	r5, #1
 80170a2:	2300      	movs	r3, #0
 80170a4:	9306      	str	r3, [sp, #24]
 80170a6:	950a      	str	r5, [sp, #40]	; 0x28
 80170a8:	f04f 33ff 	mov.w	r3, #4294967295
 80170ac:	9302      	str	r3, [sp, #8]
 80170ae:	4699      	mov	r9, r3
 80170b0:	2200      	movs	r2, #0
 80170b2:	2312      	movs	r3, #18
 80170b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80170b6:	e7aa      	b.n	801700e <_dtoa_r+0x246>
 80170b8:	2301      	movs	r3, #1
 80170ba:	930a      	str	r3, [sp, #40]	; 0x28
 80170bc:	e7f4      	b.n	80170a8 <_dtoa_r+0x2e0>
 80170be:	2301      	movs	r3, #1
 80170c0:	9302      	str	r3, [sp, #8]
 80170c2:	4699      	mov	r9, r3
 80170c4:	461a      	mov	r2, r3
 80170c6:	e7f5      	b.n	80170b4 <_dtoa_r+0x2ec>
 80170c8:	3101      	adds	r1, #1
 80170ca:	6071      	str	r1, [r6, #4]
 80170cc:	0052      	lsls	r2, r2, #1
 80170ce:	e7a2      	b.n	8017016 <_dtoa_r+0x24e>
 80170d0:	636f4361 	.word	0x636f4361
 80170d4:	3fd287a7 	.word	0x3fd287a7
 80170d8:	8b60c8b3 	.word	0x8b60c8b3
 80170dc:	3fc68a28 	.word	0x3fc68a28
 80170e0:	509f79fb 	.word	0x509f79fb
 80170e4:	3fd34413 	.word	0x3fd34413
 80170e8:	7ff00000 	.word	0x7ff00000
 80170ec:	08018a49 	.word	0x08018a49
 80170f0:	3ff80000 	.word	0x3ff80000
 80170f4:	08018b08 	.word	0x08018b08
 80170f8:	08018ae0 	.word	0x08018ae0
 80170fc:	08018a75 	.word	0x08018a75
 8017100:	07f1      	lsls	r1, r6, #31
 8017102:	d508      	bpl.n	8017116 <_dtoa_r+0x34e>
 8017104:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017108:	e9d7 2300 	ldrd	r2, r3, [r7]
 801710c:	f7f1 f9ac 	bl	8008468 <__aeabi_dmul>
 8017110:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017114:	3501      	adds	r5, #1
 8017116:	1076      	asrs	r6, r6, #1
 8017118:	3708      	adds	r7, #8
 801711a:	2e00      	cmp	r6, #0
 801711c:	d1f0      	bne.n	8017100 <_dtoa_r+0x338>
 801711e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017122:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017126:	f7f1 fac9 	bl	80086bc <__aeabi_ddiv>
 801712a:	e9cd 0100 	strd	r0, r1, [sp]
 801712e:	e01a      	b.n	8017166 <_dtoa_r+0x39e>
 8017130:	2502      	movs	r5, #2
 8017132:	e7a3      	b.n	801707c <_dtoa_r+0x2b4>
 8017134:	f000 80a0 	beq.w	8017278 <_dtoa_r+0x4b0>
 8017138:	f1ca 0600 	rsb	r6, sl, #0
 801713c:	4b9f      	ldr	r3, [pc, #636]	; (80173bc <_dtoa_r+0x5f4>)
 801713e:	4fa0      	ldr	r7, [pc, #640]	; (80173c0 <_dtoa_r+0x5f8>)
 8017140:	f006 020f 	and.w	r2, r6, #15
 8017144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801714c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017150:	f7f1 f98a 	bl	8008468 <__aeabi_dmul>
 8017154:	e9cd 0100 	strd	r0, r1, [sp]
 8017158:	1136      	asrs	r6, r6, #4
 801715a:	2300      	movs	r3, #0
 801715c:	2502      	movs	r5, #2
 801715e:	2e00      	cmp	r6, #0
 8017160:	d17f      	bne.n	8017262 <_dtoa_r+0x49a>
 8017162:	2b00      	cmp	r3, #0
 8017164:	d1e1      	bne.n	801712a <_dtoa_r+0x362>
 8017166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017168:	2b00      	cmp	r3, #0
 801716a:	f000 8087 	beq.w	801727c <_dtoa_r+0x4b4>
 801716e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017172:	2200      	movs	r2, #0
 8017174:	4b93      	ldr	r3, [pc, #588]	; (80173c4 <_dtoa_r+0x5fc>)
 8017176:	4630      	mov	r0, r6
 8017178:	4639      	mov	r1, r7
 801717a:	f7f1 fbe7 	bl	800894c <__aeabi_dcmplt>
 801717e:	2800      	cmp	r0, #0
 8017180:	d07c      	beq.n	801727c <_dtoa_r+0x4b4>
 8017182:	f1b9 0f00 	cmp.w	r9, #0
 8017186:	d079      	beq.n	801727c <_dtoa_r+0x4b4>
 8017188:	9b02      	ldr	r3, [sp, #8]
 801718a:	2b00      	cmp	r3, #0
 801718c:	dd35      	ble.n	80171fa <_dtoa_r+0x432>
 801718e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017192:	9308      	str	r3, [sp, #32]
 8017194:	4639      	mov	r1, r7
 8017196:	2200      	movs	r2, #0
 8017198:	4b8b      	ldr	r3, [pc, #556]	; (80173c8 <_dtoa_r+0x600>)
 801719a:	4630      	mov	r0, r6
 801719c:	f7f1 f964 	bl	8008468 <__aeabi_dmul>
 80171a0:	e9cd 0100 	strd	r0, r1, [sp]
 80171a4:	9f02      	ldr	r7, [sp, #8]
 80171a6:	3501      	adds	r5, #1
 80171a8:	4628      	mov	r0, r5
 80171aa:	f7f1 f8f3 	bl	8008394 <__aeabi_i2d>
 80171ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80171b2:	f7f1 f959 	bl	8008468 <__aeabi_dmul>
 80171b6:	2200      	movs	r2, #0
 80171b8:	4b84      	ldr	r3, [pc, #528]	; (80173cc <_dtoa_r+0x604>)
 80171ba:	f7f0 ff9f 	bl	80080fc <__adddf3>
 80171be:	4605      	mov	r5, r0
 80171c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80171c4:	2f00      	cmp	r7, #0
 80171c6:	d15d      	bne.n	8017284 <_dtoa_r+0x4bc>
 80171c8:	2200      	movs	r2, #0
 80171ca:	4b81      	ldr	r3, [pc, #516]	; (80173d0 <_dtoa_r+0x608>)
 80171cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171d0:	f7f0 ff92 	bl	80080f8 <__aeabi_dsub>
 80171d4:	462a      	mov	r2, r5
 80171d6:	4633      	mov	r3, r6
 80171d8:	e9cd 0100 	strd	r0, r1, [sp]
 80171dc:	f7f1 fbd4 	bl	8008988 <__aeabi_dcmpgt>
 80171e0:	2800      	cmp	r0, #0
 80171e2:	f040 8288 	bne.w	80176f6 <_dtoa_r+0x92e>
 80171e6:	462a      	mov	r2, r5
 80171e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80171ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171f0:	f7f1 fbac 	bl	800894c <__aeabi_dcmplt>
 80171f4:	2800      	cmp	r0, #0
 80171f6:	f040 827c 	bne.w	80176f2 <_dtoa_r+0x92a>
 80171fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80171fe:	e9cd 2300 	strd	r2, r3, [sp]
 8017202:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017204:	2b00      	cmp	r3, #0
 8017206:	f2c0 8150 	blt.w	80174aa <_dtoa_r+0x6e2>
 801720a:	f1ba 0f0e 	cmp.w	sl, #14
 801720e:	f300 814c 	bgt.w	80174aa <_dtoa_r+0x6e2>
 8017212:	4b6a      	ldr	r3, [pc, #424]	; (80173bc <_dtoa_r+0x5f4>)
 8017214:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017218:	ed93 7b00 	vldr	d7, [r3]
 801721c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801721e:	2b00      	cmp	r3, #0
 8017220:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017224:	f280 80d8 	bge.w	80173d8 <_dtoa_r+0x610>
 8017228:	f1b9 0f00 	cmp.w	r9, #0
 801722c:	f300 80d4 	bgt.w	80173d8 <_dtoa_r+0x610>
 8017230:	f040 825e 	bne.w	80176f0 <_dtoa_r+0x928>
 8017234:	2200      	movs	r2, #0
 8017236:	4b66      	ldr	r3, [pc, #408]	; (80173d0 <_dtoa_r+0x608>)
 8017238:	ec51 0b17 	vmov	r0, r1, d7
 801723c:	f7f1 f914 	bl	8008468 <__aeabi_dmul>
 8017240:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017244:	f7f1 fb96 	bl	8008974 <__aeabi_dcmpge>
 8017248:	464f      	mov	r7, r9
 801724a:	464e      	mov	r6, r9
 801724c:	2800      	cmp	r0, #0
 801724e:	f040 8234 	bne.w	80176ba <_dtoa_r+0x8f2>
 8017252:	2331      	movs	r3, #49	; 0x31
 8017254:	f10b 0501 	add.w	r5, fp, #1
 8017258:	f88b 3000 	strb.w	r3, [fp]
 801725c:	f10a 0a01 	add.w	sl, sl, #1
 8017260:	e22f      	b.n	80176c2 <_dtoa_r+0x8fa>
 8017262:	07f2      	lsls	r2, r6, #31
 8017264:	d505      	bpl.n	8017272 <_dtoa_r+0x4aa>
 8017266:	e9d7 2300 	ldrd	r2, r3, [r7]
 801726a:	f7f1 f8fd 	bl	8008468 <__aeabi_dmul>
 801726e:	3501      	adds	r5, #1
 8017270:	2301      	movs	r3, #1
 8017272:	1076      	asrs	r6, r6, #1
 8017274:	3708      	adds	r7, #8
 8017276:	e772      	b.n	801715e <_dtoa_r+0x396>
 8017278:	2502      	movs	r5, #2
 801727a:	e774      	b.n	8017166 <_dtoa_r+0x39e>
 801727c:	f8cd a020 	str.w	sl, [sp, #32]
 8017280:	464f      	mov	r7, r9
 8017282:	e791      	b.n	80171a8 <_dtoa_r+0x3e0>
 8017284:	4b4d      	ldr	r3, [pc, #308]	; (80173bc <_dtoa_r+0x5f4>)
 8017286:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801728a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801728e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017290:	2b00      	cmp	r3, #0
 8017292:	d047      	beq.n	8017324 <_dtoa_r+0x55c>
 8017294:	4602      	mov	r2, r0
 8017296:	460b      	mov	r3, r1
 8017298:	2000      	movs	r0, #0
 801729a:	494e      	ldr	r1, [pc, #312]	; (80173d4 <_dtoa_r+0x60c>)
 801729c:	f7f1 fa0e 	bl	80086bc <__aeabi_ddiv>
 80172a0:	462a      	mov	r2, r5
 80172a2:	4633      	mov	r3, r6
 80172a4:	f7f0 ff28 	bl	80080f8 <__aeabi_dsub>
 80172a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80172ac:	465d      	mov	r5, fp
 80172ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172b2:	f7f1 fb89 	bl	80089c8 <__aeabi_d2iz>
 80172b6:	4606      	mov	r6, r0
 80172b8:	f7f1 f86c 	bl	8008394 <__aeabi_i2d>
 80172bc:	4602      	mov	r2, r0
 80172be:	460b      	mov	r3, r1
 80172c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172c4:	f7f0 ff18 	bl	80080f8 <__aeabi_dsub>
 80172c8:	3630      	adds	r6, #48	; 0x30
 80172ca:	f805 6b01 	strb.w	r6, [r5], #1
 80172ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80172d2:	e9cd 0100 	strd	r0, r1, [sp]
 80172d6:	f7f1 fb39 	bl	800894c <__aeabi_dcmplt>
 80172da:	2800      	cmp	r0, #0
 80172dc:	d163      	bne.n	80173a6 <_dtoa_r+0x5de>
 80172de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80172e2:	2000      	movs	r0, #0
 80172e4:	4937      	ldr	r1, [pc, #220]	; (80173c4 <_dtoa_r+0x5fc>)
 80172e6:	f7f0 ff07 	bl	80080f8 <__aeabi_dsub>
 80172ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80172ee:	f7f1 fb2d 	bl	800894c <__aeabi_dcmplt>
 80172f2:	2800      	cmp	r0, #0
 80172f4:	f040 80b7 	bne.w	8017466 <_dtoa_r+0x69e>
 80172f8:	eba5 030b 	sub.w	r3, r5, fp
 80172fc:	429f      	cmp	r7, r3
 80172fe:	f77f af7c 	ble.w	80171fa <_dtoa_r+0x432>
 8017302:	2200      	movs	r2, #0
 8017304:	4b30      	ldr	r3, [pc, #192]	; (80173c8 <_dtoa_r+0x600>)
 8017306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801730a:	f7f1 f8ad 	bl	8008468 <__aeabi_dmul>
 801730e:	2200      	movs	r2, #0
 8017310:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017314:	4b2c      	ldr	r3, [pc, #176]	; (80173c8 <_dtoa_r+0x600>)
 8017316:	e9dd 0100 	ldrd	r0, r1, [sp]
 801731a:	f7f1 f8a5 	bl	8008468 <__aeabi_dmul>
 801731e:	e9cd 0100 	strd	r0, r1, [sp]
 8017322:	e7c4      	b.n	80172ae <_dtoa_r+0x4e6>
 8017324:	462a      	mov	r2, r5
 8017326:	4633      	mov	r3, r6
 8017328:	f7f1 f89e 	bl	8008468 <__aeabi_dmul>
 801732c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017330:	eb0b 0507 	add.w	r5, fp, r7
 8017334:	465e      	mov	r6, fp
 8017336:	e9dd 0100 	ldrd	r0, r1, [sp]
 801733a:	f7f1 fb45 	bl	80089c8 <__aeabi_d2iz>
 801733e:	4607      	mov	r7, r0
 8017340:	f7f1 f828 	bl	8008394 <__aeabi_i2d>
 8017344:	3730      	adds	r7, #48	; 0x30
 8017346:	4602      	mov	r2, r0
 8017348:	460b      	mov	r3, r1
 801734a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801734e:	f7f0 fed3 	bl	80080f8 <__aeabi_dsub>
 8017352:	f806 7b01 	strb.w	r7, [r6], #1
 8017356:	42ae      	cmp	r6, r5
 8017358:	e9cd 0100 	strd	r0, r1, [sp]
 801735c:	f04f 0200 	mov.w	r2, #0
 8017360:	d126      	bne.n	80173b0 <_dtoa_r+0x5e8>
 8017362:	4b1c      	ldr	r3, [pc, #112]	; (80173d4 <_dtoa_r+0x60c>)
 8017364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017368:	f7f0 fec8 	bl	80080fc <__adddf3>
 801736c:	4602      	mov	r2, r0
 801736e:	460b      	mov	r3, r1
 8017370:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017374:	f7f1 fb08 	bl	8008988 <__aeabi_dcmpgt>
 8017378:	2800      	cmp	r0, #0
 801737a:	d174      	bne.n	8017466 <_dtoa_r+0x69e>
 801737c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017380:	2000      	movs	r0, #0
 8017382:	4914      	ldr	r1, [pc, #80]	; (80173d4 <_dtoa_r+0x60c>)
 8017384:	f7f0 feb8 	bl	80080f8 <__aeabi_dsub>
 8017388:	4602      	mov	r2, r0
 801738a:	460b      	mov	r3, r1
 801738c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017390:	f7f1 fadc 	bl	800894c <__aeabi_dcmplt>
 8017394:	2800      	cmp	r0, #0
 8017396:	f43f af30 	beq.w	80171fa <_dtoa_r+0x432>
 801739a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801739e:	2b30      	cmp	r3, #48	; 0x30
 80173a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80173a4:	d002      	beq.n	80173ac <_dtoa_r+0x5e4>
 80173a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80173aa:	e04a      	b.n	8017442 <_dtoa_r+0x67a>
 80173ac:	4615      	mov	r5, r2
 80173ae:	e7f4      	b.n	801739a <_dtoa_r+0x5d2>
 80173b0:	4b05      	ldr	r3, [pc, #20]	; (80173c8 <_dtoa_r+0x600>)
 80173b2:	f7f1 f859 	bl	8008468 <__aeabi_dmul>
 80173b6:	e9cd 0100 	strd	r0, r1, [sp]
 80173ba:	e7bc      	b.n	8017336 <_dtoa_r+0x56e>
 80173bc:	08018b08 	.word	0x08018b08
 80173c0:	08018ae0 	.word	0x08018ae0
 80173c4:	3ff00000 	.word	0x3ff00000
 80173c8:	40240000 	.word	0x40240000
 80173cc:	401c0000 	.word	0x401c0000
 80173d0:	40140000 	.word	0x40140000
 80173d4:	3fe00000 	.word	0x3fe00000
 80173d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80173dc:	465d      	mov	r5, fp
 80173de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80173e2:	4630      	mov	r0, r6
 80173e4:	4639      	mov	r1, r7
 80173e6:	f7f1 f969 	bl	80086bc <__aeabi_ddiv>
 80173ea:	f7f1 faed 	bl	80089c8 <__aeabi_d2iz>
 80173ee:	4680      	mov	r8, r0
 80173f0:	f7f0 ffd0 	bl	8008394 <__aeabi_i2d>
 80173f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80173f8:	f7f1 f836 	bl	8008468 <__aeabi_dmul>
 80173fc:	4602      	mov	r2, r0
 80173fe:	460b      	mov	r3, r1
 8017400:	4630      	mov	r0, r6
 8017402:	4639      	mov	r1, r7
 8017404:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017408:	f7f0 fe76 	bl	80080f8 <__aeabi_dsub>
 801740c:	f805 6b01 	strb.w	r6, [r5], #1
 8017410:	eba5 060b 	sub.w	r6, r5, fp
 8017414:	45b1      	cmp	r9, r6
 8017416:	4602      	mov	r2, r0
 8017418:	460b      	mov	r3, r1
 801741a:	d139      	bne.n	8017490 <_dtoa_r+0x6c8>
 801741c:	f7f0 fe6e 	bl	80080fc <__adddf3>
 8017420:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017424:	4606      	mov	r6, r0
 8017426:	460f      	mov	r7, r1
 8017428:	f7f1 faae 	bl	8008988 <__aeabi_dcmpgt>
 801742c:	b9c8      	cbnz	r0, 8017462 <_dtoa_r+0x69a>
 801742e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017432:	4630      	mov	r0, r6
 8017434:	4639      	mov	r1, r7
 8017436:	f7f1 fa7f 	bl	8008938 <__aeabi_dcmpeq>
 801743a:	b110      	cbz	r0, 8017442 <_dtoa_r+0x67a>
 801743c:	f018 0f01 	tst.w	r8, #1
 8017440:	d10f      	bne.n	8017462 <_dtoa_r+0x69a>
 8017442:	9904      	ldr	r1, [sp, #16]
 8017444:	4620      	mov	r0, r4
 8017446:	f000 fc9f 	bl	8017d88 <_Bfree>
 801744a:	2300      	movs	r3, #0
 801744c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801744e:	702b      	strb	r3, [r5, #0]
 8017450:	f10a 0301 	add.w	r3, sl, #1
 8017454:	6013      	str	r3, [r2, #0]
 8017456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017458:	2b00      	cmp	r3, #0
 801745a:	f000 8241 	beq.w	80178e0 <_dtoa_r+0xb18>
 801745e:	601d      	str	r5, [r3, #0]
 8017460:	e23e      	b.n	80178e0 <_dtoa_r+0xb18>
 8017462:	f8cd a020 	str.w	sl, [sp, #32]
 8017466:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801746a:	2a39      	cmp	r2, #57	; 0x39
 801746c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017470:	d108      	bne.n	8017484 <_dtoa_r+0x6bc>
 8017472:	459b      	cmp	fp, r3
 8017474:	d10a      	bne.n	801748c <_dtoa_r+0x6c4>
 8017476:	9b08      	ldr	r3, [sp, #32]
 8017478:	3301      	adds	r3, #1
 801747a:	9308      	str	r3, [sp, #32]
 801747c:	2330      	movs	r3, #48	; 0x30
 801747e:	f88b 3000 	strb.w	r3, [fp]
 8017482:	465b      	mov	r3, fp
 8017484:	781a      	ldrb	r2, [r3, #0]
 8017486:	3201      	adds	r2, #1
 8017488:	701a      	strb	r2, [r3, #0]
 801748a:	e78c      	b.n	80173a6 <_dtoa_r+0x5de>
 801748c:	461d      	mov	r5, r3
 801748e:	e7ea      	b.n	8017466 <_dtoa_r+0x69e>
 8017490:	2200      	movs	r2, #0
 8017492:	4b9b      	ldr	r3, [pc, #620]	; (8017700 <_dtoa_r+0x938>)
 8017494:	f7f0 ffe8 	bl	8008468 <__aeabi_dmul>
 8017498:	2200      	movs	r2, #0
 801749a:	2300      	movs	r3, #0
 801749c:	4606      	mov	r6, r0
 801749e:	460f      	mov	r7, r1
 80174a0:	f7f1 fa4a 	bl	8008938 <__aeabi_dcmpeq>
 80174a4:	2800      	cmp	r0, #0
 80174a6:	d09a      	beq.n	80173de <_dtoa_r+0x616>
 80174a8:	e7cb      	b.n	8017442 <_dtoa_r+0x67a>
 80174aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80174ac:	2a00      	cmp	r2, #0
 80174ae:	f000 808b 	beq.w	80175c8 <_dtoa_r+0x800>
 80174b2:	9a06      	ldr	r2, [sp, #24]
 80174b4:	2a01      	cmp	r2, #1
 80174b6:	dc6e      	bgt.n	8017596 <_dtoa_r+0x7ce>
 80174b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80174ba:	2a00      	cmp	r2, #0
 80174bc:	d067      	beq.n	801758e <_dtoa_r+0x7c6>
 80174be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80174c2:	9f07      	ldr	r7, [sp, #28]
 80174c4:	9d05      	ldr	r5, [sp, #20]
 80174c6:	9a05      	ldr	r2, [sp, #20]
 80174c8:	2101      	movs	r1, #1
 80174ca:	441a      	add	r2, r3
 80174cc:	4620      	mov	r0, r4
 80174ce:	9205      	str	r2, [sp, #20]
 80174d0:	4498      	add	r8, r3
 80174d2:	f000 fcf9 	bl	8017ec8 <__i2b>
 80174d6:	4606      	mov	r6, r0
 80174d8:	2d00      	cmp	r5, #0
 80174da:	dd0c      	ble.n	80174f6 <_dtoa_r+0x72e>
 80174dc:	f1b8 0f00 	cmp.w	r8, #0
 80174e0:	dd09      	ble.n	80174f6 <_dtoa_r+0x72e>
 80174e2:	4545      	cmp	r5, r8
 80174e4:	9a05      	ldr	r2, [sp, #20]
 80174e6:	462b      	mov	r3, r5
 80174e8:	bfa8      	it	ge
 80174ea:	4643      	movge	r3, r8
 80174ec:	1ad2      	subs	r2, r2, r3
 80174ee:	9205      	str	r2, [sp, #20]
 80174f0:	1aed      	subs	r5, r5, r3
 80174f2:	eba8 0803 	sub.w	r8, r8, r3
 80174f6:	9b07      	ldr	r3, [sp, #28]
 80174f8:	b1eb      	cbz	r3, 8017536 <_dtoa_r+0x76e>
 80174fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d067      	beq.n	80175d0 <_dtoa_r+0x808>
 8017500:	b18f      	cbz	r7, 8017526 <_dtoa_r+0x75e>
 8017502:	4631      	mov	r1, r6
 8017504:	463a      	mov	r2, r7
 8017506:	4620      	mov	r0, r4
 8017508:	f000 fd7e 	bl	8018008 <__pow5mult>
 801750c:	9a04      	ldr	r2, [sp, #16]
 801750e:	4601      	mov	r1, r0
 8017510:	4606      	mov	r6, r0
 8017512:	4620      	mov	r0, r4
 8017514:	f000 fce1 	bl	8017eda <__multiply>
 8017518:	9904      	ldr	r1, [sp, #16]
 801751a:	9008      	str	r0, [sp, #32]
 801751c:	4620      	mov	r0, r4
 801751e:	f000 fc33 	bl	8017d88 <_Bfree>
 8017522:	9b08      	ldr	r3, [sp, #32]
 8017524:	9304      	str	r3, [sp, #16]
 8017526:	9b07      	ldr	r3, [sp, #28]
 8017528:	1bda      	subs	r2, r3, r7
 801752a:	d004      	beq.n	8017536 <_dtoa_r+0x76e>
 801752c:	9904      	ldr	r1, [sp, #16]
 801752e:	4620      	mov	r0, r4
 8017530:	f000 fd6a 	bl	8018008 <__pow5mult>
 8017534:	9004      	str	r0, [sp, #16]
 8017536:	2101      	movs	r1, #1
 8017538:	4620      	mov	r0, r4
 801753a:	f000 fcc5 	bl	8017ec8 <__i2b>
 801753e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017540:	4607      	mov	r7, r0
 8017542:	2b00      	cmp	r3, #0
 8017544:	f000 81d0 	beq.w	80178e8 <_dtoa_r+0xb20>
 8017548:	461a      	mov	r2, r3
 801754a:	4601      	mov	r1, r0
 801754c:	4620      	mov	r0, r4
 801754e:	f000 fd5b 	bl	8018008 <__pow5mult>
 8017552:	9b06      	ldr	r3, [sp, #24]
 8017554:	2b01      	cmp	r3, #1
 8017556:	4607      	mov	r7, r0
 8017558:	dc40      	bgt.n	80175dc <_dtoa_r+0x814>
 801755a:	9b00      	ldr	r3, [sp, #0]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d139      	bne.n	80175d4 <_dtoa_r+0x80c>
 8017560:	9b01      	ldr	r3, [sp, #4]
 8017562:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017566:	2b00      	cmp	r3, #0
 8017568:	d136      	bne.n	80175d8 <_dtoa_r+0x810>
 801756a:	9b01      	ldr	r3, [sp, #4]
 801756c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017570:	0d1b      	lsrs	r3, r3, #20
 8017572:	051b      	lsls	r3, r3, #20
 8017574:	b12b      	cbz	r3, 8017582 <_dtoa_r+0x7ba>
 8017576:	9b05      	ldr	r3, [sp, #20]
 8017578:	3301      	adds	r3, #1
 801757a:	9305      	str	r3, [sp, #20]
 801757c:	f108 0801 	add.w	r8, r8, #1
 8017580:	2301      	movs	r3, #1
 8017582:	9307      	str	r3, [sp, #28]
 8017584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017586:	2b00      	cmp	r3, #0
 8017588:	d12a      	bne.n	80175e0 <_dtoa_r+0x818>
 801758a:	2001      	movs	r0, #1
 801758c:	e030      	b.n	80175f0 <_dtoa_r+0x828>
 801758e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017590:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017594:	e795      	b.n	80174c2 <_dtoa_r+0x6fa>
 8017596:	9b07      	ldr	r3, [sp, #28]
 8017598:	f109 37ff 	add.w	r7, r9, #4294967295
 801759c:	42bb      	cmp	r3, r7
 801759e:	bfbf      	itttt	lt
 80175a0:	9b07      	ldrlt	r3, [sp, #28]
 80175a2:	9707      	strlt	r7, [sp, #28]
 80175a4:	1afa      	sublt	r2, r7, r3
 80175a6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80175a8:	bfbb      	ittet	lt
 80175aa:	189b      	addlt	r3, r3, r2
 80175ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80175ae:	1bdf      	subge	r7, r3, r7
 80175b0:	2700      	movlt	r7, #0
 80175b2:	f1b9 0f00 	cmp.w	r9, #0
 80175b6:	bfb5      	itete	lt
 80175b8:	9b05      	ldrlt	r3, [sp, #20]
 80175ba:	9d05      	ldrge	r5, [sp, #20]
 80175bc:	eba3 0509 	sublt.w	r5, r3, r9
 80175c0:	464b      	movge	r3, r9
 80175c2:	bfb8      	it	lt
 80175c4:	2300      	movlt	r3, #0
 80175c6:	e77e      	b.n	80174c6 <_dtoa_r+0x6fe>
 80175c8:	9f07      	ldr	r7, [sp, #28]
 80175ca:	9d05      	ldr	r5, [sp, #20]
 80175cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80175ce:	e783      	b.n	80174d8 <_dtoa_r+0x710>
 80175d0:	9a07      	ldr	r2, [sp, #28]
 80175d2:	e7ab      	b.n	801752c <_dtoa_r+0x764>
 80175d4:	2300      	movs	r3, #0
 80175d6:	e7d4      	b.n	8017582 <_dtoa_r+0x7ba>
 80175d8:	9b00      	ldr	r3, [sp, #0]
 80175da:	e7d2      	b.n	8017582 <_dtoa_r+0x7ba>
 80175dc:	2300      	movs	r3, #0
 80175de:	9307      	str	r3, [sp, #28]
 80175e0:	693b      	ldr	r3, [r7, #16]
 80175e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80175e6:	6918      	ldr	r0, [r3, #16]
 80175e8:	f000 fc20 	bl	8017e2c <__hi0bits>
 80175ec:	f1c0 0020 	rsb	r0, r0, #32
 80175f0:	4440      	add	r0, r8
 80175f2:	f010 001f 	ands.w	r0, r0, #31
 80175f6:	d047      	beq.n	8017688 <_dtoa_r+0x8c0>
 80175f8:	f1c0 0320 	rsb	r3, r0, #32
 80175fc:	2b04      	cmp	r3, #4
 80175fe:	dd3b      	ble.n	8017678 <_dtoa_r+0x8b0>
 8017600:	9b05      	ldr	r3, [sp, #20]
 8017602:	f1c0 001c 	rsb	r0, r0, #28
 8017606:	4403      	add	r3, r0
 8017608:	9305      	str	r3, [sp, #20]
 801760a:	4405      	add	r5, r0
 801760c:	4480      	add	r8, r0
 801760e:	9b05      	ldr	r3, [sp, #20]
 8017610:	2b00      	cmp	r3, #0
 8017612:	dd05      	ble.n	8017620 <_dtoa_r+0x858>
 8017614:	461a      	mov	r2, r3
 8017616:	9904      	ldr	r1, [sp, #16]
 8017618:	4620      	mov	r0, r4
 801761a:	f000 fd43 	bl	80180a4 <__lshift>
 801761e:	9004      	str	r0, [sp, #16]
 8017620:	f1b8 0f00 	cmp.w	r8, #0
 8017624:	dd05      	ble.n	8017632 <_dtoa_r+0x86a>
 8017626:	4639      	mov	r1, r7
 8017628:	4642      	mov	r2, r8
 801762a:	4620      	mov	r0, r4
 801762c:	f000 fd3a 	bl	80180a4 <__lshift>
 8017630:	4607      	mov	r7, r0
 8017632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017634:	b353      	cbz	r3, 801768c <_dtoa_r+0x8c4>
 8017636:	4639      	mov	r1, r7
 8017638:	9804      	ldr	r0, [sp, #16]
 801763a:	f000 fd87 	bl	801814c <__mcmp>
 801763e:	2800      	cmp	r0, #0
 8017640:	da24      	bge.n	801768c <_dtoa_r+0x8c4>
 8017642:	2300      	movs	r3, #0
 8017644:	220a      	movs	r2, #10
 8017646:	9904      	ldr	r1, [sp, #16]
 8017648:	4620      	mov	r0, r4
 801764a:	f000 fbb4 	bl	8017db6 <__multadd>
 801764e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017650:	9004      	str	r0, [sp, #16]
 8017652:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017656:	2b00      	cmp	r3, #0
 8017658:	f000 814d 	beq.w	80178f6 <_dtoa_r+0xb2e>
 801765c:	2300      	movs	r3, #0
 801765e:	4631      	mov	r1, r6
 8017660:	220a      	movs	r2, #10
 8017662:	4620      	mov	r0, r4
 8017664:	f000 fba7 	bl	8017db6 <__multadd>
 8017668:	9b02      	ldr	r3, [sp, #8]
 801766a:	2b00      	cmp	r3, #0
 801766c:	4606      	mov	r6, r0
 801766e:	dc4f      	bgt.n	8017710 <_dtoa_r+0x948>
 8017670:	9b06      	ldr	r3, [sp, #24]
 8017672:	2b02      	cmp	r3, #2
 8017674:	dd4c      	ble.n	8017710 <_dtoa_r+0x948>
 8017676:	e011      	b.n	801769c <_dtoa_r+0x8d4>
 8017678:	d0c9      	beq.n	801760e <_dtoa_r+0x846>
 801767a:	9a05      	ldr	r2, [sp, #20]
 801767c:	331c      	adds	r3, #28
 801767e:	441a      	add	r2, r3
 8017680:	9205      	str	r2, [sp, #20]
 8017682:	441d      	add	r5, r3
 8017684:	4498      	add	r8, r3
 8017686:	e7c2      	b.n	801760e <_dtoa_r+0x846>
 8017688:	4603      	mov	r3, r0
 801768a:	e7f6      	b.n	801767a <_dtoa_r+0x8b2>
 801768c:	f1b9 0f00 	cmp.w	r9, #0
 8017690:	dc38      	bgt.n	8017704 <_dtoa_r+0x93c>
 8017692:	9b06      	ldr	r3, [sp, #24]
 8017694:	2b02      	cmp	r3, #2
 8017696:	dd35      	ble.n	8017704 <_dtoa_r+0x93c>
 8017698:	f8cd 9008 	str.w	r9, [sp, #8]
 801769c:	9b02      	ldr	r3, [sp, #8]
 801769e:	b963      	cbnz	r3, 80176ba <_dtoa_r+0x8f2>
 80176a0:	4639      	mov	r1, r7
 80176a2:	2205      	movs	r2, #5
 80176a4:	4620      	mov	r0, r4
 80176a6:	f000 fb86 	bl	8017db6 <__multadd>
 80176aa:	4601      	mov	r1, r0
 80176ac:	4607      	mov	r7, r0
 80176ae:	9804      	ldr	r0, [sp, #16]
 80176b0:	f000 fd4c 	bl	801814c <__mcmp>
 80176b4:	2800      	cmp	r0, #0
 80176b6:	f73f adcc 	bgt.w	8017252 <_dtoa_r+0x48a>
 80176ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176bc:	465d      	mov	r5, fp
 80176be:	ea6f 0a03 	mvn.w	sl, r3
 80176c2:	f04f 0900 	mov.w	r9, #0
 80176c6:	4639      	mov	r1, r7
 80176c8:	4620      	mov	r0, r4
 80176ca:	f000 fb5d 	bl	8017d88 <_Bfree>
 80176ce:	2e00      	cmp	r6, #0
 80176d0:	f43f aeb7 	beq.w	8017442 <_dtoa_r+0x67a>
 80176d4:	f1b9 0f00 	cmp.w	r9, #0
 80176d8:	d005      	beq.n	80176e6 <_dtoa_r+0x91e>
 80176da:	45b1      	cmp	r9, r6
 80176dc:	d003      	beq.n	80176e6 <_dtoa_r+0x91e>
 80176de:	4649      	mov	r1, r9
 80176e0:	4620      	mov	r0, r4
 80176e2:	f000 fb51 	bl	8017d88 <_Bfree>
 80176e6:	4631      	mov	r1, r6
 80176e8:	4620      	mov	r0, r4
 80176ea:	f000 fb4d 	bl	8017d88 <_Bfree>
 80176ee:	e6a8      	b.n	8017442 <_dtoa_r+0x67a>
 80176f0:	2700      	movs	r7, #0
 80176f2:	463e      	mov	r6, r7
 80176f4:	e7e1      	b.n	80176ba <_dtoa_r+0x8f2>
 80176f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80176fa:	463e      	mov	r6, r7
 80176fc:	e5a9      	b.n	8017252 <_dtoa_r+0x48a>
 80176fe:	bf00      	nop
 8017700:	40240000 	.word	0x40240000
 8017704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017706:	f8cd 9008 	str.w	r9, [sp, #8]
 801770a:	2b00      	cmp	r3, #0
 801770c:	f000 80fa 	beq.w	8017904 <_dtoa_r+0xb3c>
 8017710:	2d00      	cmp	r5, #0
 8017712:	dd05      	ble.n	8017720 <_dtoa_r+0x958>
 8017714:	4631      	mov	r1, r6
 8017716:	462a      	mov	r2, r5
 8017718:	4620      	mov	r0, r4
 801771a:	f000 fcc3 	bl	80180a4 <__lshift>
 801771e:	4606      	mov	r6, r0
 8017720:	9b07      	ldr	r3, [sp, #28]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d04c      	beq.n	80177c0 <_dtoa_r+0x9f8>
 8017726:	6871      	ldr	r1, [r6, #4]
 8017728:	4620      	mov	r0, r4
 801772a:	f000 faf9 	bl	8017d20 <_Balloc>
 801772e:	6932      	ldr	r2, [r6, #16]
 8017730:	3202      	adds	r2, #2
 8017732:	4605      	mov	r5, r0
 8017734:	0092      	lsls	r2, r2, #2
 8017736:	f106 010c 	add.w	r1, r6, #12
 801773a:	300c      	adds	r0, #12
 801773c:	f7fe fd0a 	bl	8016154 <memcpy>
 8017740:	2201      	movs	r2, #1
 8017742:	4629      	mov	r1, r5
 8017744:	4620      	mov	r0, r4
 8017746:	f000 fcad 	bl	80180a4 <__lshift>
 801774a:	9b00      	ldr	r3, [sp, #0]
 801774c:	f8cd b014 	str.w	fp, [sp, #20]
 8017750:	f003 0301 	and.w	r3, r3, #1
 8017754:	46b1      	mov	r9, r6
 8017756:	9307      	str	r3, [sp, #28]
 8017758:	4606      	mov	r6, r0
 801775a:	4639      	mov	r1, r7
 801775c:	9804      	ldr	r0, [sp, #16]
 801775e:	f7ff faa5 	bl	8016cac <quorem>
 8017762:	4649      	mov	r1, r9
 8017764:	4605      	mov	r5, r0
 8017766:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801776a:	9804      	ldr	r0, [sp, #16]
 801776c:	f000 fcee 	bl	801814c <__mcmp>
 8017770:	4632      	mov	r2, r6
 8017772:	9000      	str	r0, [sp, #0]
 8017774:	4639      	mov	r1, r7
 8017776:	4620      	mov	r0, r4
 8017778:	f000 fd02 	bl	8018180 <__mdiff>
 801777c:	68c3      	ldr	r3, [r0, #12]
 801777e:	4602      	mov	r2, r0
 8017780:	bb03      	cbnz	r3, 80177c4 <_dtoa_r+0x9fc>
 8017782:	4601      	mov	r1, r0
 8017784:	9008      	str	r0, [sp, #32]
 8017786:	9804      	ldr	r0, [sp, #16]
 8017788:	f000 fce0 	bl	801814c <__mcmp>
 801778c:	9a08      	ldr	r2, [sp, #32]
 801778e:	4603      	mov	r3, r0
 8017790:	4611      	mov	r1, r2
 8017792:	4620      	mov	r0, r4
 8017794:	9308      	str	r3, [sp, #32]
 8017796:	f000 faf7 	bl	8017d88 <_Bfree>
 801779a:	9b08      	ldr	r3, [sp, #32]
 801779c:	b9a3      	cbnz	r3, 80177c8 <_dtoa_r+0xa00>
 801779e:	9a06      	ldr	r2, [sp, #24]
 80177a0:	b992      	cbnz	r2, 80177c8 <_dtoa_r+0xa00>
 80177a2:	9a07      	ldr	r2, [sp, #28]
 80177a4:	b982      	cbnz	r2, 80177c8 <_dtoa_r+0xa00>
 80177a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80177aa:	d029      	beq.n	8017800 <_dtoa_r+0xa38>
 80177ac:	9b00      	ldr	r3, [sp, #0]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	dd01      	ble.n	80177b6 <_dtoa_r+0x9ee>
 80177b2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80177b6:	9b05      	ldr	r3, [sp, #20]
 80177b8:	1c5d      	adds	r5, r3, #1
 80177ba:	f883 8000 	strb.w	r8, [r3]
 80177be:	e782      	b.n	80176c6 <_dtoa_r+0x8fe>
 80177c0:	4630      	mov	r0, r6
 80177c2:	e7c2      	b.n	801774a <_dtoa_r+0x982>
 80177c4:	2301      	movs	r3, #1
 80177c6:	e7e3      	b.n	8017790 <_dtoa_r+0x9c8>
 80177c8:	9a00      	ldr	r2, [sp, #0]
 80177ca:	2a00      	cmp	r2, #0
 80177cc:	db04      	blt.n	80177d8 <_dtoa_r+0xa10>
 80177ce:	d125      	bne.n	801781c <_dtoa_r+0xa54>
 80177d0:	9a06      	ldr	r2, [sp, #24]
 80177d2:	bb1a      	cbnz	r2, 801781c <_dtoa_r+0xa54>
 80177d4:	9a07      	ldr	r2, [sp, #28]
 80177d6:	bb0a      	cbnz	r2, 801781c <_dtoa_r+0xa54>
 80177d8:	2b00      	cmp	r3, #0
 80177da:	ddec      	ble.n	80177b6 <_dtoa_r+0x9ee>
 80177dc:	2201      	movs	r2, #1
 80177de:	9904      	ldr	r1, [sp, #16]
 80177e0:	4620      	mov	r0, r4
 80177e2:	f000 fc5f 	bl	80180a4 <__lshift>
 80177e6:	4639      	mov	r1, r7
 80177e8:	9004      	str	r0, [sp, #16]
 80177ea:	f000 fcaf 	bl	801814c <__mcmp>
 80177ee:	2800      	cmp	r0, #0
 80177f0:	dc03      	bgt.n	80177fa <_dtoa_r+0xa32>
 80177f2:	d1e0      	bne.n	80177b6 <_dtoa_r+0x9ee>
 80177f4:	f018 0f01 	tst.w	r8, #1
 80177f8:	d0dd      	beq.n	80177b6 <_dtoa_r+0x9ee>
 80177fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80177fe:	d1d8      	bne.n	80177b2 <_dtoa_r+0x9ea>
 8017800:	9b05      	ldr	r3, [sp, #20]
 8017802:	9a05      	ldr	r2, [sp, #20]
 8017804:	1c5d      	adds	r5, r3, #1
 8017806:	2339      	movs	r3, #57	; 0x39
 8017808:	7013      	strb	r3, [r2, #0]
 801780a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801780e:	2b39      	cmp	r3, #57	; 0x39
 8017810:	f105 32ff 	add.w	r2, r5, #4294967295
 8017814:	d04f      	beq.n	80178b6 <_dtoa_r+0xaee>
 8017816:	3301      	adds	r3, #1
 8017818:	7013      	strb	r3, [r2, #0]
 801781a:	e754      	b.n	80176c6 <_dtoa_r+0x8fe>
 801781c:	9a05      	ldr	r2, [sp, #20]
 801781e:	2b00      	cmp	r3, #0
 8017820:	f102 0501 	add.w	r5, r2, #1
 8017824:	dd06      	ble.n	8017834 <_dtoa_r+0xa6c>
 8017826:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801782a:	d0e9      	beq.n	8017800 <_dtoa_r+0xa38>
 801782c:	f108 0801 	add.w	r8, r8, #1
 8017830:	9b05      	ldr	r3, [sp, #20]
 8017832:	e7c2      	b.n	80177ba <_dtoa_r+0x9f2>
 8017834:	9a02      	ldr	r2, [sp, #8]
 8017836:	f805 8c01 	strb.w	r8, [r5, #-1]
 801783a:	eba5 030b 	sub.w	r3, r5, fp
 801783e:	4293      	cmp	r3, r2
 8017840:	d021      	beq.n	8017886 <_dtoa_r+0xabe>
 8017842:	2300      	movs	r3, #0
 8017844:	220a      	movs	r2, #10
 8017846:	9904      	ldr	r1, [sp, #16]
 8017848:	4620      	mov	r0, r4
 801784a:	f000 fab4 	bl	8017db6 <__multadd>
 801784e:	45b1      	cmp	r9, r6
 8017850:	9004      	str	r0, [sp, #16]
 8017852:	f04f 0300 	mov.w	r3, #0
 8017856:	f04f 020a 	mov.w	r2, #10
 801785a:	4649      	mov	r1, r9
 801785c:	4620      	mov	r0, r4
 801785e:	d105      	bne.n	801786c <_dtoa_r+0xaa4>
 8017860:	f000 faa9 	bl	8017db6 <__multadd>
 8017864:	4681      	mov	r9, r0
 8017866:	4606      	mov	r6, r0
 8017868:	9505      	str	r5, [sp, #20]
 801786a:	e776      	b.n	801775a <_dtoa_r+0x992>
 801786c:	f000 faa3 	bl	8017db6 <__multadd>
 8017870:	4631      	mov	r1, r6
 8017872:	4681      	mov	r9, r0
 8017874:	2300      	movs	r3, #0
 8017876:	220a      	movs	r2, #10
 8017878:	4620      	mov	r0, r4
 801787a:	f000 fa9c 	bl	8017db6 <__multadd>
 801787e:	4606      	mov	r6, r0
 8017880:	e7f2      	b.n	8017868 <_dtoa_r+0xaa0>
 8017882:	f04f 0900 	mov.w	r9, #0
 8017886:	2201      	movs	r2, #1
 8017888:	9904      	ldr	r1, [sp, #16]
 801788a:	4620      	mov	r0, r4
 801788c:	f000 fc0a 	bl	80180a4 <__lshift>
 8017890:	4639      	mov	r1, r7
 8017892:	9004      	str	r0, [sp, #16]
 8017894:	f000 fc5a 	bl	801814c <__mcmp>
 8017898:	2800      	cmp	r0, #0
 801789a:	dcb6      	bgt.n	801780a <_dtoa_r+0xa42>
 801789c:	d102      	bne.n	80178a4 <_dtoa_r+0xadc>
 801789e:	f018 0f01 	tst.w	r8, #1
 80178a2:	d1b2      	bne.n	801780a <_dtoa_r+0xa42>
 80178a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80178a8:	2b30      	cmp	r3, #48	; 0x30
 80178aa:	f105 32ff 	add.w	r2, r5, #4294967295
 80178ae:	f47f af0a 	bne.w	80176c6 <_dtoa_r+0x8fe>
 80178b2:	4615      	mov	r5, r2
 80178b4:	e7f6      	b.n	80178a4 <_dtoa_r+0xadc>
 80178b6:	4593      	cmp	fp, r2
 80178b8:	d105      	bne.n	80178c6 <_dtoa_r+0xafe>
 80178ba:	2331      	movs	r3, #49	; 0x31
 80178bc:	f10a 0a01 	add.w	sl, sl, #1
 80178c0:	f88b 3000 	strb.w	r3, [fp]
 80178c4:	e6ff      	b.n	80176c6 <_dtoa_r+0x8fe>
 80178c6:	4615      	mov	r5, r2
 80178c8:	e79f      	b.n	801780a <_dtoa_r+0xa42>
 80178ca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017930 <_dtoa_r+0xb68>
 80178ce:	e007      	b.n	80178e0 <_dtoa_r+0xb18>
 80178d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80178d2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017934 <_dtoa_r+0xb6c>
 80178d6:	b11b      	cbz	r3, 80178e0 <_dtoa_r+0xb18>
 80178d8:	f10b 0308 	add.w	r3, fp, #8
 80178dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80178de:	6013      	str	r3, [r2, #0]
 80178e0:	4658      	mov	r0, fp
 80178e2:	b017      	add	sp, #92	; 0x5c
 80178e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178e8:	9b06      	ldr	r3, [sp, #24]
 80178ea:	2b01      	cmp	r3, #1
 80178ec:	f77f ae35 	ble.w	801755a <_dtoa_r+0x792>
 80178f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80178f2:	9307      	str	r3, [sp, #28]
 80178f4:	e649      	b.n	801758a <_dtoa_r+0x7c2>
 80178f6:	9b02      	ldr	r3, [sp, #8]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	dc03      	bgt.n	8017904 <_dtoa_r+0xb3c>
 80178fc:	9b06      	ldr	r3, [sp, #24]
 80178fe:	2b02      	cmp	r3, #2
 8017900:	f73f aecc 	bgt.w	801769c <_dtoa_r+0x8d4>
 8017904:	465d      	mov	r5, fp
 8017906:	4639      	mov	r1, r7
 8017908:	9804      	ldr	r0, [sp, #16]
 801790a:	f7ff f9cf 	bl	8016cac <quorem>
 801790e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017912:	f805 8b01 	strb.w	r8, [r5], #1
 8017916:	9a02      	ldr	r2, [sp, #8]
 8017918:	eba5 030b 	sub.w	r3, r5, fp
 801791c:	429a      	cmp	r2, r3
 801791e:	ddb0      	ble.n	8017882 <_dtoa_r+0xaba>
 8017920:	2300      	movs	r3, #0
 8017922:	220a      	movs	r2, #10
 8017924:	9904      	ldr	r1, [sp, #16]
 8017926:	4620      	mov	r0, r4
 8017928:	f000 fa45 	bl	8017db6 <__multadd>
 801792c:	9004      	str	r0, [sp, #16]
 801792e:	e7ea      	b.n	8017906 <_dtoa_r+0xb3e>
 8017930:	08018a48 	.word	0x08018a48
 8017934:	08018a6c 	.word	0x08018a6c

08017938 <__sflush_r>:
 8017938:	898a      	ldrh	r2, [r1, #12]
 801793a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801793e:	4605      	mov	r5, r0
 8017940:	0710      	lsls	r0, r2, #28
 8017942:	460c      	mov	r4, r1
 8017944:	d458      	bmi.n	80179f8 <__sflush_r+0xc0>
 8017946:	684b      	ldr	r3, [r1, #4]
 8017948:	2b00      	cmp	r3, #0
 801794a:	dc05      	bgt.n	8017958 <__sflush_r+0x20>
 801794c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801794e:	2b00      	cmp	r3, #0
 8017950:	dc02      	bgt.n	8017958 <__sflush_r+0x20>
 8017952:	2000      	movs	r0, #0
 8017954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801795a:	2e00      	cmp	r6, #0
 801795c:	d0f9      	beq.n	8017952 <__sflush_r+0x1a>
 801795e:	2300      	movs	r3, #0
 8017960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017964:	682f      	ldr	r7, [r5, #0]
 8017966:	6a21      	ldr	r1, [r4, #32]
 8017968:	602b      	str	r3, [r5, #0]
 801796a:	d032      	beq.n	80179d2 <__sflush_r+0x9a>
 801796c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801796e:	89a3      	ldrh	r3, [r4, #12]
 8017970:	075a      	lsls	r2, r3, #29
 8017972:	d505      	bpl.n	8017980 <__sflush_r+0x48>
 8017974:	6863      	ldr	r3, [r4, #4]
 8017976:	1ac0      	subs	r0, r0, r3
 8017978:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801797a:	b10b      	cbz	r3, 8017980 <__sflush_r+0x48>
 801797c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801797e:	1ac0      	subs	r0, r0, r3
 8017980:	2300      	movs	r3, #0
 8017982:	4602      	mov	r2, r0
 8017984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017986:	6a21      	ldr	r1, [r4, #32]
 8017988:	4628      	mov	r0, r5
 801798a:	47b0      	blx	r6
 801798c:	1c43      	adds	r3, r0, #1
 801798e:	89a3      	ldrh	r3, [r4, #12]
 8017990:	d106      	bne.n	80179a0 <__sflush_r+0x68>
 8017992:	6829      	ldr	r1, [r5, #0]
 8017994:	291d      	cmp	r1, #29
 8017996:	d848      	bhi.n	8017a2a <__sflush_r+0xf2>
 8017998:	4a29      	ldr	r2, [pc, #164]	; (8017a40 <__sflush_r+0x108>)
 801799a:	40ca      	lsrs	r2, r1
 801799c:	07d6      	lsls	r6, r2, #31
 801799e:	d544      	bpl.n	8017a2a <__sflush_r+0xf2>
 80179a0:	2200      	movs	r2, #0
 80179a2:	6062      	str	r2, [r4, #4]
 80179a4:	04d9      	lsls	r1, r3, #19
 80179a6:	6922      	ldr	r2, [r4, #16]
 80179a8:	6022      	str	r2, [r4, #0]
 80179aa:	d504      	bpl.n	80179b6 <__sflush_r+0x7e>
 80179ac:	1c42      	adds	r2, r0, #1
 80179ae:	d101      	bne.n	80179b4 <__sflush_r+0x7c>
 80179b0:	682b      	ldr	r3, [r5, #0]
 80179b2:	b903      	cbnz	r3, 80179b6 <__sflush_r+0x7e>
 80179b4:	6560      	str	r0, [r4, #84]	; 0x54
 80179b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80179b8:	602f      	str	r7, [r5, #0]
 80179ba:	2900      	cmp	r1, #0
 80179bc:	d0c9      	beq.n	8017952 <__sflush_r+0x1a>
 80179be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80179c2:	4299      	cmp	r1, r3
 80179c4:	d002      	beq.n	80179cc <__sflush_r+0x94>
 80179c6:	4628      	mov	r0, r5
 80179c8:	f000 fc94 	bl	80182f4 <_free_r>
 80179cc:	2000      	movs	r0, #0
 80179ce:	6360      	str	r0, [r4, #52]	; 0x34
 80179d0:	e7c0      	b.n	8017954 <__sflush_r+0x1c>
 80179d2:	2301      	movs	r3, #1
 80179d4:	4628      	mov	r0, r5
 80179d6:	47b0      	blx	r6
 80179d8:	1c41      	adds	r1, r0, #1
 80179da:	d1c8      	bne.n	801796e <__sflush_r+0x36>
 80179dc:	682b      	ldr	r3, [r5, #0]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d0c5      	beq.n	801796e <__sflush_r+0x36>
 80179e2:	2b1d      	cmp	r3, #29
 80179e4:	d001      	beq.n	80179ea <__sflush_r+0xb2>
 80179e6:	2b16      	cmp	r3, #22
 80179e8:	d101      	bne.n	80179ee <__sflush_r+0xb6>
 80179ea:	602f      	str	r7, [r5, #0]
 80179ec:	e7b1      	b.n	8017952 <__sflush_r+0x1a>
 80179ee:	89a3      	ldrh	r3, [r4, #12]
 80179f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179f4:	81a3      	strh	r3, [r4, #12]
 80179f6:	e7ad      	b.n	8017954 <__sflush_r+0x1c>
 80179f8:	690f      	ldr	r7, [r1, #16]
 80179fa:	2f00      	cmp	r7, #0
 80179fc:	d0a9      	beq.n	8017952 <__sflush_r+0x1a>
 80179fe:	0793      	lsls	r3, r2, #30
 8017a00:	680e      	ldr	r6, [r1, #0]
 8017a02:	bf08      	it	eq
 8017a04:	694b      	ldreq	r3, [r1, #20]
 8017a06:	600f      	str	r7, [r1, #0]
 8017a08:	bf18      	it	ne
 8017a0a:	2300      	movne	r3, #0
 8017a0c:	eba6 0807 	sub.w	r8, r6, r7
 8017a10:	608b      	str	r3, [r1, #8]
 8017a12:	f1b8 0f00 	cmp.w	r8, #0
 8017a16:	dd9c      	ble.n	8017952 <__sflush_r+0x1a>
 8017a18:	4643      	mov	r3, r8
 8017a1a:	463a      	mov	r2, r7
 8017a1c:	6a21      	ldr	r1, [r4, #32]
 8017a1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017a20:	4628      	mov	r0, r5
 8017a22:	47b0      	blx	r6
 8017a24:	2800      	cmp	r0, #0
 8017a26:	dc06      	bgt.n	8017a36 <__sflush_r+0xfe>
 8017a28:	89a3      	ldrh	r3, [r4, #12]
 8017a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a2e:	81a3      	strh	r3, [r4, #12]
 8017a30:	f04f 30ff 	mov.w	r0, #4294967295
 8017a34:	e78e      	b.n	8017954 <__sflush_r+0x1c>
 8017a36:	4407      	add	r7, r0
 8017a38:	eba8 0800 	sub.w	r8, r8, r0
 8017a3c:	e7e9      	b.n	8017a12 <__sflush_r+0xda>
 8017a3e:	bf00      	nop
 8017a40:	20400001 	.word	0x20400001

08017a44 <_fflush_r>:
 8017a44:	b538      	push	{r3, r4, r5, lr}
 8017a46:	690b      	ldr	r3, [r1, #16]
 8017a48:	4605      	mov	r5, r0
 8017a4a:	460c      	mov	r4, r1
 8017a4c:	b1db      	cbz	r3, 8017a86 <_fflush_r+0x42>
 8017a4e:	b118      	cbz	r0, 8017a58 <_fflush_r+0x14>
 8017a50:	6983      	ldr	r3, [r0, #24]
 8017a52:	b90b      	cbnz	r3, 8017a58 <_fflush_r+0x14>
 8017a54:	f000 f860 	bl	8017b18 <__sinit>
 8017a58:	4b0c      	ldr	r3, [pc, #48]	; (8017a8c <_fflush_r+0x48>)
 8017a5a:	429c      	cmp	r4, r3
 8017a5c:	d109      	bne.n	8017a72 <_fflush_r+0x2e>
 8017a5e:	686c      	ldr	r4, [r5, #4]
 8017a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a64:	b17b      	cbz	r3, 8017a86 <_fflush_r+0x42>
 8017a66:	4621      	mov	r1, r4
 8017a68:	4628      	mov	r0, r5
 8017a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a6e:	f7ff bf63 	b.w	8017938 <__sflush_r>
 8017a72:	4b07      	ldr	r3, [pc, #28]	; (8017a90 <_fflush_r+0x4c>)
 8017a74:	429c      	cmp	r4, r3
 8017a76:	d101      	bne.n	8017a7c <_fflush_r+0x38>
 8017a78:	68ac      	ldr	r4, [r5, #8]
 8017a7a:	e7f1      	b.n	8017a60 <_fflush_r+0x1c>
 8017a7c:	4b05      	ldr	r3, [pc, #20]	; (8017a94 <_fflush_r+0x50>)
 8017a7e:	429c      	cmp	r4, r3
 8017a80:	bf08      	it	eq
 8017a82:	68ec      	ldreq	r4, [r5, #12]
 8017a84:	e7ec      	b.n	8017a60 <_fflush_r+0x1c>
 8017a86:	2000      	movs	r0, #0
 8017a88:	bd38      	pop	{r3, r4, r5, pc}
 8017a8a:	bf00      	nop
 8017a8c:	08018a9c 	.word	0x08018a9c
 8017a90:	08018abc 	.word	0x08018abc
 8017a94:	08018a7c 	.word	0x08018a7c

08017a98 <std>:
 8017a98:	2300      	movs	r3, #0
 8017a9a:	b510      	push	{r4, lr}
 8017a9c:	4604      	mov	r4, r0
 8017a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8017aa2:	6083      	str	r3, [r0, #8]
 8017aa4:	8181      	strh	r1, [r0, #12]
 8017aa6:	6643      	str	r3, [r0, #100]	; 0x64
 8017aa8:	81c2      	strh	r2, [r0, #14]
 8017aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017aae:	6183      	str	r3, [r0, #24]
 8017ab0:	4619      	mov	r1, r3
 8017ab2:	2208      	movs	r2, #8
 8017ab4:	305c      	adds	r0, #92	; 0x5c
 8017ab6:	f7fe fb58 	bl	801616a <memset>
 8017aba:	4b05      	ldr	r3, [pc, #20]	; (8017ad0 <std+0x38>)
 8017abc:	6263      	str	r3, [r4, #36]	; 0x24
 8017abe:	4b05      	ldr	r3, [pc, #20]	; (8017ad4 <std+0x3c>)
 8017ac0:	62a3      	str	r3, [r4, #40]	; 0x28
 8017ac2:	4b05      	ldr	r3, [pc, #20]	; (8017ad8 <std+0x40>)
 8017ac4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017ac6:	4b05      	ldr	r3, [pc, #20]	; (8017adc <std+0x44>)
 8017ac8:	6224      	str	r4, [r4, #32]
 8017aca:	6323      	str	r3, [r4, #48]	; 0x30
 8017acc:	bd10      	pop	{r4, pc}
 8017ace:	bf00      	nop
 8017ad0:	080186e5 	.word	0x080186e5
 8017ad4:	08018707 	.word	0x08018707
 8017ad8:	0801873f 	.word	0x0801873f
 8017adc:	08018763 	.word	0x08018763

08017ae0 <_cleanup_r>:
 8017ae0:	4901      	ldr	r1, [pc, #4]	; (8017ae8 <_cleanup_r+0x8>)
 8017ae2:	f000 b885 	b.w	8017bf0 <_fwalk_reent>
 8017ae6:	bf00      	nop
 8017ae8:	08017a45 	.word	0x08017a45

08017aec <__sfmoreglue>:
 8017aec:	b570      	push	{r4, r5, r6, lr}
 8017aee:	1e4a      	subs	r2, r1, #1
 8017af0:	2568      	movs	r5, #104	; 0x68
 8017af2:	4355      	muls	r5, r2
 8017af4:	460e      	mov	r6, r1
 8017af6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017afa:	f000 fc49 	bl	8018390 <_malloc_r>
 8017afe:	4604      	mov	r4, r0
 8017b00:	b140      	cbz	r0, 8017b14 <__sfmoreglue+0x28>
 8017b02:	2100      	movs	r1, #0
 8017b04:	e9c0 1600 	strd	r1, r6, [r0]
 8017b08:	300c      	adds	r0, #12
 8017b0a:	60a0      	str	r0, [r4, #8]
 8017b0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017b10:	f7fe fb2b 	bl	801616a <memset>
 8017b14:	4620      	mov	r0, r4
 8017b16:	bd70      	pop	{r4, r5, r6, pc}

08017b18 <__sinit>:
 8017b18:	6983      	ldr	r3, [r0, #24]
 8017b1a:	b510      	push	{r4, lr}
 8017b1c:	4604      	mov	r4, r0
 8017b1e:	bb33      	cbnz	r3, 8017b6e <__sinit+0x56>
 8017b20:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017b24:	6503      	str	r3, [r0, #80]	; 0x50
 8017b26:	4b12      	ldr	r3, [pc, #72]	; (8017b70 <__sinit+0x58>)
 8017b28:	4a12      	ldr	r2, [pc, #72]	; (8017b74 <__sinit+0x5c>)
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	6282      	str	r2, [r0, #40]	; 0x28
 8017b2e:	4298      	cmp	r0, r3
 8017b30:	bf04      	itt	eq
 8017b32:	2301      	moveq	r3, #1
 8017b34:	6183      	streq	r3, [r0, #24]
 8017b36:	f000 f81f 	bl	8017b78 <__sfp>
 8017b3a:	6060      	str	r0, [r4, #4]
 8017b3c:	4620      	mov	r0, r4
 8017b3e:	f000 f81b 	bl	8017b78 <__sfp>
 8017b42:	60a0      	str	r0, [r4, #8]
 8017b44:	4620      	mov	r0, r4
 8017b46:	f000 f817 	bl	8017b78 <__sfp>
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	60e0      	str	r0, [r4, #12]
 8017b4e:	2104      	movs	r1, #4
 8017b50:	6860      	ldr	r0, [r4, #4]
 8017b52:	f7ff ffa1 	bl	8017a98 <std>
 8017b56:	2201      	movs	r2, #1
 8017b58:	2109      	movs	r1, #9
 8017b5a:	68a0      	ldr	r0, [r4, #8]
 8017b5c:	f7ff ff9c 	bl	8017a98 <std>
 8017b60:	2202      	movs	r2, #2
 8017b62:	2112      	movs	r1, #18
 8017b64:	68e0      	ldr	r0, [r4, #12]
 8017b66:	f7ff ff97 	bl	8017a98 <std>
 8017b6a:	2301      	movs	r3, #1
 8017b6c:	61a3      	str	r3, [r4, #24]
 8017b6e:	bd10      	pop	{r4, pc}
 8017b70:	08018a34 	.word	0x08018a34
 8017b74:	08017ae1 	.word	0x08017ae1

08017b78 <__sfp>:
 8017b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b7a:	4b1b      	ldr	r3, [pc, #108]	; (8017be8 <__sfp+0x70>)
 8017b7c:	681e      	ldr	r6, [r3, #0]
 8017b7e:	69b3      	ldr	r3, [r6, #24]
 8017b80:	4607      	mov	r7, r0
 8017b82:	b913      	cbnz	r3, 8017b8a <__sfp+0x12>
 8017b84:	4630      	mov	r0, r6
 8017b86:	f7ff ffc7 	bl	8017b18 <__sinit>
 8017b8a:	3648      	adds	r6, #72	; 0x48
 8017b8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017b90:	3b01      	subs	r3, #1
 8017b92:	d503      	bpl.n	8017b9c <__sfp+0x24>
 8017b94:	6833      	ldr	r3, [r6, #0]
 8017b96:	b133      	cbz	r3, 8017ba6 <__sfp+0x2e>
 8017b98:	6836      	ldr	r6, [r6, #0]
 8017b9a:	e7f7      	b.n	8017b8c <__sfp+0x14>
 8017b9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017ba0:	b16d      	cbz	r5, 8017bbe <__sfp+0x46>
 8017ba2:	3468      	adds	r4, #104	; 0x68
 8017ba4:	e7f4      	b.n	8017b90 <__sfp+0x18>
 8017ba6:	2104      	movs	r1, #4
 8017ba8:	4638      	mov	r0, r7
 8017baa:	f7ff ff9f 	bl	8017aec <__sfmoreglue>
 8017bae:	6030      	str	r0, [r6, #0]
 8017bb0:	2800      	cmp	r0, #0
 8017bb2:	d1f1      	bne.n	8017b98 <__sfp+0x20>
 8017bb4:	230c      	movs	r3, #12
 8017bb6:	603b      	str	r3, [r7, #0]
 8017bb8:	4604      	mov	r4, r0
 8017bba:	4620      	mov	r0, r4
 8017bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bbe:	4b0b      	ldr	r3, [pc, #44]	; (8017bec <__sfp+0x74>)
 8017bc0:	6665      	str	r5, [r4, #100]	; 0x64
 8017bc2:	e9c4 5500 	strd	r5, r5, [r4]
 8017bc6:	60a5      	str	r5, [r4, #8]
 8017bc8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017bcc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017bd0:	2208      	movs	r2, #8
 8017bd2:	4629      	mov	r1, r5
 8017bd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017bd8:	f7fe fac7 	bl	801616a <memset>
 8017bdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017be0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017be4:	e7e9      	b.n	8017bba <__sfp+0x42>
 8017be6:	bf00      	nop
 8017be8:	08018a34 	.word	0x08018a34
 8017bec:	ffff0001 	.word	0xffff0001

08017bf0 <_fwalk_reent>:
 8017bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017bf4:	4680      	mov	r8, r0
 8017bf6:	4689      	mov	r9, r1
 8017bf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017bfc:	2600      	movs	r6, #0
 8017bfe:	b914      	cbnz	r4, 8017c06 <_fwalk_reent+0x16>
 8017c00:	4630      	mov	r0, r6
 8017c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c06:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017c0a:	3f01      	subs	r7, #1
 8017c0c:	d501      	bpl.n	8017c12 <_fwalk_reent+0x22>
 8017c0e:	6824      	ldr	r4, [r4, #0]
 8017c10:	e7f5      	b.n	8017bfe <_fwalk_reent+0xe>
 8017c12:	89ab      	ldrh	r3, [r5, #12]
 8017c14:	2b01      	cmp	r3, #1
 8017c16:	d907      	bls.n	8017c28 <_fwalk_reent+0x38>
 8017c18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017c1c:	3301      	adds	r3, #1
 8017c1e:	d003      	beq.n	8017c28 <_fwalk_reent+0x38>
 8017c20:	4629      	mov	r1, r5
 8017c22:	4640      	mov	r0, r8
 8017c24:	47c8      	blx	r9
 8017c26:	4306      	orrs	r6, r0
 8017c28:	3568      	adds	r5, #104	; 0x68
 8017c2a:	e7ee      	b.n	8017c0a <_fwalk_reent+0x1a>

08017c2c <_localeconv_r>:
 8017c2c:	4b04      	ldr	r3, [pc, #16]	; (8017c40 <_localeconv_r+0x14>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	6a18      	ldr	r0, [r3, #32]
 8017c32:	4b04      	ldr	r3, [pc, #16]	; (8017c44 <_localeconv_r+0x18>)
 8017c34:	2800      	cmp	r0, #0
 8017c36:	bf08      	it	eq
 8017c38:	4618      	moveq	r0, r3
 8017c3a:	30f0      	adds	r0, #240	; 0xf0
 8017c3c:	4770      	bx	lr
 8017c3e:	bf00      	nop
 8017c40:	2000008c 	.word	0x2000008c
 8017c44:	200000f0 	.word	0x200000f0

08017c48 <__swhatbuf_r>:
 8017c48:	b570      	push	{r4, r5, r6, lr}
 8017c4a:	460e      	mov	r6, r1
 8017c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c50:	2900      	cmp	r1, #0
 8017c52:	b096      	sub	sp, #88	; 0x58
 8017c54:	4614      	mov	r4, r2
 8017c56:	461d      	mov	r5, r3
 8017c58:	da07      	bge.n	8017c6a <__swhatbuf_r+0x22>
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	602b      	str	r3, [r5, #0]
 8017c5e:	89b3      	ldrh	r3, [r6, #12]
 8017c60:	061a      	lsls	r2, r3, #24
 8017c62:	d410      	bmi.n	8017c86 <__swhatbuf_r+0x3e>
 8017c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017c68:	e00e      	b.n	8017c88 <__swhatbuf_r+0x40>
 8017c6a:	466a      	mov	r2, sp
 8017c6c:	f000 fda0 	bl	80187b0 <_fstat_r>
 8017c70:	2800      	cmp	r0, #0
 8017c72:	dbf2      	blt.n	8017c5a <__swhatbuf_r+0x12>
 8017c74:	9a01      	ldr	r2, [sp, #4]
 8017c76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017c7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017c7e:	425a      	negs	r2, r3
 8017c80:	415a      	adcs	r2, r3
 8017c82:	602a      	str	r2, [r5, #0]
 8017c84:	e7ee      	b.n	8017c64 <__swhatbuf_r+0x1c>
 8017c86:	2340      	movs	r3, #64	; 0x40
 8017c88:	2000      	movs	r0, #0
 8017c8a:	6023      	str	r3, [r4, #0]
 8017c8c:	b016      	add	sp, #88	; 0x58
 8017c8e:	bd70      	pop	{r4, r5, r6, pc}

08017c90 <__smakebuf_r>:
 8017c90:	898b      	ldrh	r3, [r1, #12]
 8017c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017c94:	079d      	lsls	r5, r3, #30
 8017c96:	4606      	mov	r6, r0
 8017c98:	460c      	mov	r4, r1
 8017c9a:	d507      	bpl.n	8017cac <__smakebuf_r+0x1c>
 8017c9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017ca0:	6023      	str	r3, [r4, #0]
 8017ca2:	6123      	str	r3, [r4, #16]
 8017ca4:	2301      	movs	r3, #1
 8017ca6:	6163      	str	r3, [r4, #20]
 8017ca8:	b002      	add	sp, #8
 8017caa:	bd70      	pop	{r4, r5, r6, pc}
 8017cac:	ab01      	add	r3, sp, #4
 8017cae:	466a      	mov	r2, sp
 8017cb0:	f7ff ffca 	bl	8017c48 <__swhatbuf_r>
 8017cb4:	9900      	ldr	r1, [sp, #0]
 8017cb6:	4605      	mov	r5, r0
 8017cb8:	4630      	mov	r0, r6
 8017cba:	f000 fb69 	bl	8018390 <_malloc_r>
 8017cbe:	b948      	cbnz	r0, 8017cd4 <__smakebuf_r+0x44>
 8017cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017cc4:	059a      	lsls	r2, r3, #22
 8017cc6:	d4ef      	bmi.n	8017ca8 <__smakebuf_r+0x18>
 8017cc8:	f023 0303 	bic.w	r3, r3, #3
 8017ccc:	f043 0302 	orr.w	r3, r3, #2
 8017cd0:	81a3      	strh	r3, [r4, #12]
 8017cd2:	e7e3      	b.n	8017c9c <__smakebuf_r+0xc>
 8017cd4:	4b0d      	ldr	r3, [pc, #52]	; (8017d0c <__smakebuf_r+0x7c>)
 8017cd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8017cd8:	89a3      	ldrh	r3, [r4, #12]
 8017cda:	6020      	str	r0, [r4, #0]
 8017cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017ce0:	81a3      	strh	r3, [r4, #12]
 8017ce2:	9b00      	ldr	r3, [sp, #0]
 8017ce4:	6163      	str	r3, [r4, #20]
 8017ce6:	9b01      	ldr	r3, [sp, #4]
 8017ce8:	6120      	str	r0, [r4, #16]
 8017cea:	b15b      	cbz	r3, 8017d04 <__smakebuf_r+0x74>
 8017cec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017cf0:	4630      	mov	r0, r6
 8017cf2:	f000 fd6f 	bl	80187d4 <_isatty_r>
 8017cf6:	b128      	cbz	r0, 8017d04 <__smakebuf_r+0x74>
 8017cf8:	89a3      	ldrh	r3, [r4, #12]
 8017cfa:	f023 0303 	bic.w	r3, r3, #3
 8017cfe:	f043 0301 	orr.w	r3, r3, #1
 8017d02:	81a3      	strh	r3, [r4, #12]
 8017d04:	89a3      	ldrh	r3, [r4, #12]
 8017d06:	431d      	orrs	r5, r3
 8017d08:	81a5      	strh	r5, [r4, #12]
 8017d0a:	e7cd      	b.n	8017ca8 <__smakebuf_r+0x18>
 8017d0c:	08017ae1 	.word	0x08017ae1

08017d10 <malloc>:
 8017d10:	4b02      	ldr	r3, [pc, #8]	; (8017d1c <malloc+0xc>)
 8017d12:	4601      	mov	r1, r0
 8017d14:	6818      	ldr	r0, [r3, #0]
 8017d16:	f000 bb3b 	b.w	8018390 <_malloc_r>
 8017d1a:	bf00      	nop
 8017d1c:	2000008c 	.word	0x2000008c

08017d20 <_Balloc>:
 8017d20:	b570      	push	{r4, r5, r6, lr}
 8017d22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017d24:	4604      	mov	r4, r0
 8017d26:	460e      	mov	r6, r1
 8017d28:	b93d      	cbnz	r5, 8017d3a <_Balloc+0x1a>
 8017d2a:	2010      	movs	r0, #16
 8017d2c:	f7ff fff0 	bl	8017d10 <malloc>
 8017d30:	6260      	str	r0, [r4, #36]	; 0x24
 8017d32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017d36:	6005      	str	r5, [r0, #0]
 8017d38:	60c5      	str	r5, [r0, #12]
 8017d3a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017d3c:	68eb      	ldr	r3, [r5, #12]
 8017d3e:	b183      	cbz	r3, 8017d62 <_Balloc+0x42>
 8017d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d42:	68db      	ldr	r3, [r3, #12]
 8017d44:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017d48:	b9b8      	cbnz	r0, 8017d7a <_Balloc+0x5a>
 8017d4a:	2101      	movs	r1, #1
 8017d4c:	fa01 f506 	lsl.w	r5, r1, r6
 8017d50:	1d6a      	adds	r2, r5, #5
 8017d52:	0092      	lsls	r2, r2, #2
 8017d54:	4620      	mov	r0, r4
 8017d56:	f000 fabf 	bl	80182d8 <_calloc_r>
 8017d5a:	b160      	cbz	r0, 8017d76 <_Balloc+0x56>
 8017d5c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017d60:	e00e      	b.n	8017d80 <_Balloc+0x60>
 8017d62:	2221      	movs	r2, #33	; 0x21
 8017d64:	2104      	movs	r1, #4
 8017d66:	4620      	mov	r0, r4
 8017d68:	f000 fab6 	bl	80182d8 <_calloc_r>
 8017d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d6e:	60e8      	str	r0, [r5, #12]
 8017d70:	68db      	ldr	r3, [r3, #12]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d1e4      	bne.n	8017d40 <_Balloc+0x20>
 8017d76:	2000      	movs	r0, #0
 8017d78:	bd70      	pop	{r4, r5, r6, pc}
 8017d7a:	6802      	ldr	r2, [r0, #0]
 8017d7c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017d80:	2300      	movs	r3, #0
 8017d82:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017d86:	e7f7      	b.n	8017d78 <_Balloc+0x58>

08017d88 <_Bfree>:
 8017d88:	b570      	push	{r4, r5, r6, lr}
 8017d8a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017d8c:	4606      	mov	r6, r0
 8017d8e:	460d      	mov	r5, r1
 8017d90:	b93c      	cbnz	r4, 8017da2 <_Bfree+0x1a>
 8017d92:	2010      	movs	r0, #16
 8017d94:	f7ff ffbc 	bl	8017d10 <malloc>
 8017d98:	6270      	str	r0, [r6, #36]	; 0x24
 8017d9a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017d9e:	6004      	str	r4, [r0, #0]
 8017da0:	60c4      	str	r4, [r0, #12]
 8017da2:	b13d      	cbz	r5, 8017db4 <_Bfree+0x2c>
 8017da4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017da6:	686a      	ldr	r2, [r5, #4]
 8017da8:	68db      	ldr	r3, [r3, #12]
 8017daa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017dae:	6029      	str	r1, [r5, #0]
 8017db0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017db4:	bd70      	pop	{r4, r5, r6, pc}

08017db6 <__multadd>:
 8017db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dba:	690d      	ldr	r5, [r1, #16]
 8017dbc:	461f      	mov	r7, r3
 8017dbe:	4606      	mov	r6, r0
 8017dc0:	460c      	mov	r4, r1
 8017dc2:	f101 0c14 	add.w	ip, r1, #20
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	f8dc 0000 	ldr.w	r0, [ip]
 8017dcc:	b281      	uxth	r1, r0
 8017dce:	fb02 7101 	mla	r1, r2, r1, r7
 8017dd2:	0c0f      	lsrs	r7, r1, #16
 8017dd4:	0c00      	lsrs	r0, r0, #16
 8017dd6:	fb02 7000 	mla	r0, r2, r0, r7
 8017dda:	b289      	uxth	r1, r1
 8017ddc:	3301      	adds	r3, #1
 8017dde:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8017de2:	429d      	cmp	r5, r3
 8017de4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017de8:	f84c 1b04 	str.w	r1, [ip], #4
 8017dec:	dcec      	bgt.n	8017dc8 <__multadd+0x12>
 8017dee:	b1d7      	cbz	r7, 8017e26 <__multadd+0x70>
 8017df0:	68a3      	ldr	r3, [r4, #8]
 8017df2:	42ab      	cmp	r3, r5
 8017df4:	dc12      	bgt.n	8017e1c <__multadd+0x66>
 8017df6:	6861      	ldr	r1, [r4, #4]
 8017df8:	4630      	mov	r0, r6
 8017dfa:	3101      	adds	r1, #1
 8017dfc:	f7ff ff90 	bl	8017d20 <_Balloc>
 8017e00:	6922      	ldr	r2, [r4, #16]
 8017e02:	3202      	adds	r2, #2
 8017e04:	f104 010c 	add.w	r1, r4, #12
 8017e08:	4680      	mov	r8, r0
 8017e0a:	0092      	lsls	r2, r2, #2
 8017e0c:	300c      	adds	r0, #12
 8017e0e:	f7fe f9a1 	bl	8016154 <memcpy>
 8017e12:	4621      	mov	r1, r4
 8017e14:	4630      	mov	r0, r6
 8017e16:	f7ff ffb7 	bl	8017d88 <_Bfree>
 8017e1a:	4644      	mov	r4, r8
 8017e1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017e20:	3501      	adds	r5, #1
 8017e22:	615f      	str	r7, [r3, #20]
 8017e24:	6125      	str	r5, [r4, #16]
 8017e26:	4620      	mov	r0, r4
 8017e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017e2c <__hi0bits>:
 8017e2c:	0c02      	lsrs	r2, r0, #16
 8017e2e:	0412      	lsls	r2, r2, #16
 8017e30:	4603      	mov	r3, r0
 8017e32:	b9b2      	cbnz	r2, 8017e62 <__hi0bits+0x36>
 8017e34:	0403      	lsls	r3, r0, #16
 8017e36:	2010      	movs	r0, #16
 8017e38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017e3c:	bf04      	itt	eq
 8017e3e:	021b      	lsleq	r3, r3, #8
 8017e40:	3008      	addeq	r0, #8
 8017e42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017e46:	bf04      	itt	eq
 8017e48:	011b      	lsleq	r3, r3, #4
 8017e4a:	3004      	addeq	r0, #4
 8017e4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017e50:	bf04      	itt	eq
 8017e52:	009b      	lsleq	r3, r3, #2
 8017e54:	3002      	addeq	r0, #2
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	db06      	blt.n	8017e68 <__hi0bits+0x3c>
 8017e5a:	005b      	lsls	r3, r3, #1
 8017e5c:	d503      	bpl.n	8017e66 <__hi0bits+0x3a>
 8017e5e:	3001      	adds	r0, #1
 8017e60:	4770      	bx	lr
 8017e62:	2000      	movs	r0, #0
 8017e64:	e7e8      	b.n	8017e38 <__hi0bits+0xc>
 8017e66:	2020      	movs	r0, #32
 8017e68:	4770      	bx	lr

08017e6a <__lo0bits>:
 8017e6a:	6803      	ldr	r3, [r0, #0]
 8017e6c:	f013 0207 	ands.w	r2, r3, #7
 8017e70:	4601      	mov	r1, r0
 8017e72:	d00b      	beq.n	8017e8c <__lo0bits+0x22>
 8017e74:	07da      	lsls	r2, r3, #31
 8017e76:	d423      	bmi.n	8017ec0 <__lo0bits+0x56>
 8017e78:	0798      	lsls	r0, r3, #30
 8017e7a:	bf49      	itett	mi
 8017e7c:	085b      	lsrmi	r3, r3, #1
 8017e7e:	089b      	lsrpl	r3, r3, #2
 8017e80:	2001      	movmi	r0, #1
 8017e82:	600b      	strmi	r3, [r1, #0]
 8017e84:	bf5c      	itt	pl
 8017e86:	600b      	strpl	r3, [r1, #0]
 8017e88:	2002      	movpl	r0, #2
 8017e8a:	4770      	bx	lr
 8017e8c:	b298      	uxth	r0, r3
 8017e8e:	b9a8      	cbnz	r0, 8017ebc <__lo0bits+0x52>
 8017e90:	0c1b      	lsrs	r3, r3, #16
 8017e92:	2010      	movs	r0, #16
 8017e94:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017e98:	bf04      	itt	eq
 8017e9a:	0a1b      	lsreq	r3, r3, #8
 8017e9c:	3008      	addeq	r0, #8
 8017e9e:	071a      	lsls	r2, r3, #28
 8017ea0:	bf04      	itt	eq
 8017ea2:	091b      	lsreq	r3, r3, #4
 8017ea4:	3004      	addeq	r0, #4
 8017ea6:	079a      	lsls	r2, r3, #30
 8017ea8:	bf04      	itt	eq
 8017eaa:	089b      	lsreq	r3, r3, #2
 8017eac:	3002      	addeq	r0, #2
 8017eae:	07da      	lsls	r2, r3, #31
 8017eb0:	d402      	bmi.n	8017eb8 <__lo0bits+0x4e>
 8017eb2:	085b      	lsrs	r3, r3, #1
 8017eb4:	d006      	beq.n	8017ec4 <__lo0bits+0x5a>
 8017eb6:	3001      	adds	r0, #1
 8017eb8:	600b      	str	r3, [r1, #0]
 8017eba:	4770      	bx	lr
 8017ebc:	4610      	mov	r0, r2
 8017ebe:	e7e9      	b.n	8017e94 <__lo0bits+0x2a>
 8017ec0:	2000      	movs	r0, #0
 8017ec2:	4770      	bx	lr
 8017ec4:	2020      	movs	r0, #32
 8017ec6:	4770      	bx	lr

08017ec8 <__i2b>:
 8017ec8:	b510      	push	{r4, lr}
 8017eca:	460c      	mov	r4, r1
 8017ecc:	2101      	movs	r1, #1
 8017ece:	f7ff ff27 	bl	8017d20 <_Balloc>
 8017ed2:	2201      	movs	r2, #1
 8017ed4:	6144      	str	r4, [r0, #20]
 8017ed6:	6102      	str	r2, [r0, #16]
 8017ed8:	bd10      	pop	{r4, pc}

08017eda <__multiply>:
 8017eda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ede:	4614      	mov	r4, r2
 8017ee0:	690a      	ldr	r2, [r1, #16]
 8017ee2:	6923      	ldr	r3, [r4, #16]
 8017ee4:	429a      	cmp	r2, r3
 8017ee6:	bfb8      	it	lt
 8017ee8:	460b      	movlt	r3, r1
 8017eea:	4688      	mov	r8, r1
 8017eec:	bfbc      	itt	lt
 8017eee:	46a0      	movlt	r8, r4
 8017ef0:	461c      	movlt	r4, r3
 8017ef2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017ef6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017efa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017efe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017f02:	eb07 0609 	add.w	r6, r7, r9
 8017f06:	42b3      	cmp	r3, r6
 8017f08:	bfb8      	it	lt
 8017f0a:	3101      	addlt	r1, #1
 8017f0c:	f7ff ff08 	bl	8017d20 <_Balloc>
 8017f10:	f100 0514 	add.w	r5, r0, #20
 8017f14:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017f18:	462b      	mov	r3, r5
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	4573      	cmp	r3, lr
 8017f1e:	d316      	bcc.n	8017f4e <__multiply+0x74>
 8017f20:	f104 0214 	add.w	r2, r4, #20
 8017f24:	f108 0114 	add.w	r1, r8, #20
 8017f28:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017f2c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017f30:	9300      	str	r3, [sp, #0]
 8017f32:	9b00      	ldr	r3, [sp, #0]
 8017f34:	9201      	str	r2, [sp, #4]
 8017f36:	4293      	cmp	r3, r2
 8017f38:	d80c      	bhi.n	8017f54 <__multiply+0x7a>
 8017f3a:	2e00      	cmp	r6, #0
 8017f3c:	dd03      	ble.n	8017f46 <__multiply+0x6c>
 8017f3e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d05d      	beq.n	8018002 <__multiply+0x128>
 8017f46:	6106      	str	r6, [r0, #16]
 8017f48:	b003      	add	sp, #12
 8017f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f4e:	f843 2b04 	str.w	r2, [r3], #4
 8017f52:	e7e3      	b.n	8017f1c <__multiply+0x42>
 8017f54:	f8b2 b000 	ldrh.w	fp, [r2]
 8017f58:	f1bb 0f00 	cmp.w	fp, #0
 8017f5c:	d023      	beq.n	8017fa6 <__multiply+0xcc>
 8017f5e:	4689      	mov	r9, r1
 8017f60:	46ac      	mov	ip, r5
 8017f62:	f04f 0800 	mov.w	r8, #0
 8017f66:	f859 4b04 	ldr.w	r4, [r9], #4
 8017f6a:	f8dc a000 	ldr.w	sl, [ip]
 8017f6e:	b2a3      	uxth	r3, r4
 8017f70:	fa1f fa8a 	uxth.w	sl, sl
 8017f74:	fb0b a303 	mla	r3, fp, r3, sl
 8017f78:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017f7c:	f8dc 4000 	ldr.w	r4, [ip]
 8017f80:	4443      	add	r3, r8
 8017f82:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017f86:	fb0b 840a 	mla	r4, fp, sl, r8
 8017f8a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017f8e:	46e2      	mov	sl, ip
 8017f90:	b29b      	uxth	r3, r3
 8017f92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017f96:	454f      	cmp	r7, r9
 8017f98:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017f9c:	f84a 3b04 	str.w	r3, [sl], #4
 8017fa0:	d82b      	bhi.n	8017ffa <__multiply+0x120>
 8017fa2:	f8cc 8004 	str.w	r8, [ip, #4]
 8017fa6:	9b01      	ldr	r3, [sp, #4]
 8017fa8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017fac:	3204      	adds	r2, #4
 8017fae:	f1ba 0f00 	cmp.w	sl, #0
 8017fb2:	d020      	beq.n	8017ff6 <__multiply+0x11c>
 8017fb4:	682b      	ldr	r3, [r5, #0]
 8017fb6:	4689      	mov	r9, r1
 8017fb8:	46a8      	mov	r8, r5
 8017fba:	f04f 0b00 	mov.w	fp, #0
 8017fbe:	f8b9 c000 	ldrh.w	ip, [r9]
 8017fc2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017fc6:	fb0a 440c 	mla	r4, sl, ip, r4
 8017fca:	445c      	add	r4, fp
 8017fcc:	46c4      	mov	ip, r8
 8017fce:	b29b      	uxth	r3, r3
 8017fd0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017fd4:	f84c 3b04 	str.w	r3, [ip], #4
 8017fd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8017fdc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017fe0:	0c1b      	lsrs	r3, r3, #16
 8017fe2:	fb0a b303 	mla	r3, sl, r3, fp
 8017fe6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017fea:	454f      	cmp	r7, r9
 8017fec:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017ff0:	d805      	bhi.n	8017ffe <__multiply+0x124>
 8017ff2:	f8c8 3004 	str.w	r3, [r8, #4]
 8017ff6:	3504      	adds	r5, #4
 8017ff8:	e79b      	b.n	8017f32 <__multiply+0x58>
 8017ffa:	46d4      	mov	ip, sl
 8017ffc:	e7b3      	b.n	8017f66 <__multiply+0x8c>
 8017ffe:	46e0      	mov	r8, ip
 8018000:	e7dd      	b.n	8017fbe <__multiply+0xe4>
 8018002:	3e01      	subs	r6, #1
 8018004:	e799      	b.n	8017f3a <__multiply+0x60>
	...

08018008 <__pow5mult>:
 8018008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801800c:	4615      	mov	r5, r2
 801800e:	f012 0203 	ands.w	r2, r2, #3
 8018012:	4606      	mov	r6, r0
 8018014:	460f      	mov	r7, r1
 8018016:	d007      	beq.n	8018028 <__pow5mult+0x20>
 8018018:	3a01      	subs	r2, #1
 801801a:	4c21      	ldr	r4, [pc, #132]	; (80180a0 <__pow5mult+0x98>)
 801801c:	2300      	movs	r3, #0
 801801e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018022:	f7ff fec8 	bl	8017db6 <__multadd>
 8018026:	4607      	mov	r7, r0
 8018028:	10ad      	asrs	r5, r5, #2
 801802a:	d035      	beq.n	8018098 <__pow5mult+0x90>
 801802c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801802e:	b93c      	cbnz	r4, 8018040 <__pow5mult+0x38>
 8018030:	2010      	movs	r0, #16
 8018032:	f7ff fe6d 	bl	8017d10 <malloc>
 8018036:	6270      	str	r0, [r6, #36]	; 0x24
 8018038:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801803c:	6004      	str	r4, [r0, #0]
 801803e:	60c4      	str	r4, [r0, #12]
 8018040:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018048:	b94c      	cbnz	r4, 801805e <__pow5mult+0x56>
 801804a:	f240 2171 	movw	r1, #625	; 0x271
 801804e:	4630      	mov	r0, r6
 8018050:	f7ff ff3a 	bl	8017ec8 <__i2b>
 8018054:	2300      	movs	r3, #0
 8018056:	f8c8 0008 	str.w	r0, [r8, #8]
 801805a:	4604      	mov	r4, r0
 801805c:	6003      	str	r3, [r0, #0]
 801805e:	f04f 0800 	mov.w	r8, #0
 8018062:	07eb      	lsls	r3, r5, #31
 8018064:	d50a      	bpl.n	801807c <__pow5mult+0x74>
 8018066:	4639      	mov	r1, r7
 8018068:	4622      	mov	r2, r4
 801806a:	4630      	mov	r0, r6
 801806c:	f7ff ff35 	bl	8017eda <__multiply>
 8018070:	4639      	mov	r1, r7
 8018072:	4681      	mov	r9, r0
 8018074:	4630      	mov	r0, r6
 8018076:	f7ff fe87 	bl	8017d88 <_Bfree>
 801807a:	464f      	mov	r7, r9
 801807c:	106d      	asrs	r5, r5, #1
 801807e:	d00b      	beq.n	8018098 <__pow5mult+0x90>
 8018080:	6820      	ldr	r0, [r4, #0]
 8018082:	b938      	cbnz	r0, 8018094 <__pow5mult+0x8c>
 8018084:	4622      	mov	r2, r4
 8018086:	4621      	mov	r1, r4
 8018088:	4630      	mov	r0, r6
 801808a:	f7ff ff26 	bl	8017eda <__multiply>
 801808e:	6020      	str	r0, [r4, #0]
 8018090:	f8c0 8000 	str.w	r8, [r0]
 8018094:	4604      	mov	r4, r0
 8018096:	e7e4      	b.n	8018062 <__pow5mult+0x5a>
 8018098:	4638      	mov	r0, r7
 801809a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801809e:	bf00      	nop
 80180a0:	08018bd0 	.word	0x08018bd0

080180a4 <__lshift>:
 80180a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180a8:	460c      	mov	r4, r1
 80180aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80180ae:	6923      	ldr	r3, [r4, #16]
 80180b0:	6849      	ldr	r1, [r1, #4]
 80180b2:	eb0a 0903 	add.w	r9, sl, r3
 80180b6:	68a3      	ldr	r3, [r4, #8]
 80180b8:	4607      	mov	r7, r0
 80180ba:	4616      	mov	r6, r2
 80180bc:	f109 0501 	add.w	r5, r9, #1
 80180c0:	42ab      	cmp	r3, r5
 80180c2:	db32      	blt.n	801812a <__lshift+0x86>
 80180c4:	4638      	mov	r0, r7
 80180c6:	f7ff fe2b 	bl	8017d20 <_Balloc>
 80180ca:	2300      	movs	r3, #0
 80180cc:	4680      	mov	r8, r0
 80180ce:	f100 0114 	add.w	r1, r0, #20
 80180d2:	461a      	mov	r2, r3
 80180d4:	4553      	cmp	r3, sl
 80180d6:	db2b      	blt.n	8018130 <__lshift+0x8c>
 80180d8:	6920      	ldr	r0, [r4, #16]
 80180da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80180de:	f104 0314 	add.w	r3, r4, #20
 80180e2:	f016 021f 	ands.w	r2, r6, #31
 80180e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80180ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80180ee:	d025      	beq.n	801813c <__lshift+0x98>
 80180f0:	f1c2 0e20 	rsb	lr, r2, #32
 80180f4:	2000      	movs	r0, #0
 80180f6:	681e      	ldr	r6, [r3, #0]
 80180f8:	468a      	mov	sl, r1
 80180fa:	4096      	lsls	r6, r2
 80180fc:	4330      	orrs	r0, r6
 80180fe:	f84a 0b04 	str.w	r0, [sl], #4
 8018102:	f853 0b04 	ldr.w	r0, [r3], #4
 8018106:	459c      	cmp	ip, r3
 8018108:	fa20 f00e 	lsr.w	r0, r0, lr
 801810c:	d814      	bhi.n	8018138 <__lshift+0x94>
 801810e:	6048      	str	r0, [r1, #4]
 8018110:	b108      	cbz	r0, 8018116 <__lshift+0x72>
 8018112:	f109 0502 	add.w	r5, r9, #2
 8018116:	3d01      	subs	r5, #1
 8018118:	4638      	mov	r0, r7
 801811a:	f8c8 5010 	str.w	r5, [r8, #16]
 801811e:	4621      	mov	r1, r4
 8018120:	f7ff fe32 	bl	8017d88 <_Bfree>
 8018124:	4640      	mov	r0, r8
 8018126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801812a:	3101      	adds	r1, #1
 801812c:	005b      	lsls	r3, r3, #1
 801812e:	e7c7      	b.n	80180c0 <__lshift+0x1c>
 8018130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018134:	3301      	adds	r3, #1
 8018136:	e7cd      	b.n	80180d4 <__lshift+0x30>
 8018138:	4651      	mov	r1, sl
 801813a:	e7dc      	b.n	80180f6 <__lshift+0x52>
 801813c:	3904      	subs	r1, #4
 801813e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018142:	f841 2f04 	str.w	r2, [r1, #4]!
 8018146:	459c      	cmp	ip, r3
 8018148:	d8f9      	bhi.n	801813e <__lshift+0x9a>
 801814a:	e7e4      	b.n	8018116 <__lshift+0x72>

0801814c <__mcmp>:
 801814c:	6903      	ldr	r3, [r0, #16]
 801814e:	690a      	ldr	r2, [r1, #16]
 8018150:	1a9b      	subs	r3, r3, r2
 8018152:	b530      	push	{r4, r5, lr}
 8018154:	d10c      	bne.n	8018170 <__mcmp+0x24>
 8018156:	0092      	lsls	r2, r2, #2
 8018158:	3014      	adds	r0, #20
 801815a:	3114      	adds	r1, #20
 801815c:	1884      	adds	r4, r0, r2
 801815e:	4411      	add	r1, r2
 8018160:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018164:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018168:	4295      	cmp	r5, r2
 801816a:	d003      	beq.n	8018174 <__mcmp+0x28>
 801816c:	d305      	bcc.n	801817a <__mcmp+0x2e>
 801816e:	2301      	movs	r3, #1
 8018170:	4618      	mov	r0, r3
 8018172:	bd30      	pop	{r4, r5, pc}
 8018174:	42a0      	cmp	r0, r4
 8018176:	d3f3      	bcc.n	8018160 <__mcmp+0x14>
 8018178:	e7fa      	b.n	8018170 <__mcmp+0x24>
 801817a:	f04f 33ff 	mov.w	r3, #4294967295
 801817e:	e7f7      	b.n	8018170 <__mcmp+0x24>

08018180 <__mdiff>:
 8018180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018184:	460d      	mov	r5, r1
 8018186:	4607      	mov	r7, r0
 8018188:	4611      	mov	r1, r2
 801818a:	4628      	mov	r0, r5
 801818c:	4614      	mov	r4, r2
 801818e:	f7ff ffdd 	bl	801814c <__mcmp>
 8018192:	1e06      	subs	r6, r0, #0
 8018194:	d108      	bne.n	80181a8 <__mdiff+0x28>
 8018196:	4631      	mov	r1, r6
 8018198:	4638      	mov	r0, r7
 801819a:	f7ff fdc1 	bl	8017d20 <_Balloc>
 801819e:	2301      	movs	r3, #1
 80181a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80181a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181a8:	bfa4      	itt	ge
 80181aa:	4623      	movge	r3, r4
 80181ac:	462c      	movge	r4, r5
 80181ae:	4638      	mov	r0, r7
 80181b0:	6861      	ldr	r1, [r4, #4]
 80181b2:	bfa6      	itte	ge
 80181b4:	461d      	movge	r5, r3
 80181b6:	2600      	movge	r6, #0
 80181b8:	2601      	movlt	r6, #1
 80181ba:	f7ff fdb1 	bl	8017d20 <_Balloc>
 80181be:	692b      	ldr	r3, [r5, #16]
 80181c0:	60c6      	str	r6, [r0, #12]
 80181c2:	6926      	ldr	r6, [r4, #16]
 80181c4:	f105 0914 	add.w	r9, r5, #20
 80181c8:	f104 0214 	add.w	r2, r4, #20
 80181cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80181d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80181d4:	f100 0514 	add.w	r5, r0, #20
 80181d8:	f04f 0e00 	mov.w	lr, #0
 80181dc:	f852 ab04 	ldr.w	sl, [r2], #4
 80181e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80181e4:	fa1e f18a 	uxtah	r1, lr, sl
 80181e8:	b2a3      	uxth	r3, r4
 80181ea:	1ac9      	subs	r1, r1, r3
 80181ec:	0c23      	lsrs	r3, r4, #16
 80181ee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80181f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80181f6:	b289      	uxth	r1, r1
 80181f8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80181fc:	45c8      	cmp	r8, r9
 80181fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018202:	4694      	mov	ip, r2
 8018204:	f845 3b04 	str.w	r3, [r5], #4
 8018208:	d8e8      	bhi.n	80181dc <__mdiff+0x5c>
 801820a:	45bc      	cmp	ip, r7
 801820c:	d304      	bcc.n	8018218 <__mdiff+0x98>
 801820e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018212:	b183      	cbz	r3, 8018236 <__mdiff+0xb6>
 8018214:	6106      	str	r6, [r0, #16]
 8018216:	e7c5      	b.n	80181a4 <__mdiff+0x24>
 8018218:	f85c 1b04 	ldr.w	r1, [ip], #4
 801821c:	fa1e f381 	uxtah	r3, lr, r1
 8018220:	141a      	asrs	r2, r3, #16
 8018222:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018226:	b29b      	uxth	r3, r3
 8018228:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801822c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018230:	f845 3b04 	str.w	r3, [r5], #4
 8018234:	e7e9      	b.n	801820a <__mdiff+0x8a>
 8018236:	3e01      	subs	r6, #1
 8018238:	e7e9      	b.n	801820e <__mdiff+0x8e>

0801823a <__d2b>:
 801823a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801823e:	460e      	mov	r6, r1
 8018240:	2101      	movs	r1, #1
 8018242:	ec59 8b10 	vmov	r8, r9, d0
 8018246:	4615      	mov	r5, r2
 8018248:	f7ff fd6a 	bl	8017d20 <_Balloc>
 801824c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018250:	4607      	mov	r7, r0
 8018252:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018256:	bb34      	cbnz	r4, 80182a6 <__d2b+0x6c>
 8018258:	9301      	str	r3, [sp, #4]
 801825a:	f1b8 0300 	subs.w	r3, r8, #0
 801825e:	d027      	beq.n	80182b0 <__d2b+0x76>
 8018260:	a802      	add	r0, sp, #8
 8018262:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018266:	f7ff fe00 	bl	8017e6a <__lo0bits>
 801826a:	9900      	ldr	r1, [sp, #0]
 801826c:	b1f0      	cbz	r0, 80182ac <__d2b+0x72>
 801826e:	9a01      	ldr	r2, [sp, #4]
 8018270:	f1c0 0320 	rsb	r3, r0, #32
 8018274:	fa02 f303 	lsl.w	r3, r2, r3
 8018278:	430b      	orrs	r3, r1
 801827a:	40c2      	lsrs	r2, r0
 801827c:	617b      	str	r3, [r7, #20]
 801827e:	9201      	str	r2, [sp, #4]
 8018280:	9b01      	ldr	r3, [sp, #4]
 8018282:	61bb      	str	r3, [r7, #24]
 8018284:	2b00      	cmp	r3, #0
 8018286:	bf14      	ite	ne
 8018288:	2102      	movne	r1, #2
 801828a:	2101      	moveq	r1, #1
 801828c:	6139      	str	r1, [r7, #16]
 801828e:	b1c4      	cbz	r4, 80182c2 <__d2b+0x88>
 8018290:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018294:	4404      	add	r4, r0
 8018296:	6034      	str	r4, [r6, #0]
 8018298:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801829c:	6028      	str	r0, [r5, #0]
 801829e:	4638      	mov	r0, r7
 80182a0:	b003      	add	sp, #12
 80182a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80182aa:	e7d5      	b.n	8018258 <__d2b+0x1e>
 80182ac:	6179      	str	r1, [r7, #20]
 80182ae:	e7e7      	b.n	8018280 <__d2b+0x46>
 80182b0:	a801      	add	r0, sp, #4
 80182b2:	f7ff fdda 	bl	8017e6a <__lo0bits>
 80182b6:	9b01      	ldr	r3, [sp, #4]
 80182b8:	617b      	str	r3, [r7, #20]
 80182ba:	2101      	movs	r1, #1
 80182bc:	6139      	str	r1, [r7, #16]
 80182be:	3020      	adds	r0, #32
 80182c0:	e7e5      	b.n	801828e <__d2b+0x54>
 80182c2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80182c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80182ca:	6030      	str	r0, [r6, #0]
 80182cc:	6918      	ldr	r0, [r3, #16]
 80182ce:	f7ff fdad 	bl	8017e2c <__hi0bits>
 80182d2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80182d6:	e7e1      	b.n	801829c <__d2b+0x62>

080182d8 <_calloc_r>:
 80182d8:	b538      	push	{r3, r4, r5, lr}
 80182da:	fb02 f401 	mul.w	r4, r2, r1
 80182de:	4621      	mov	r1, r4
 80182e0:	f000 f856 	bl	8018390 <_malloc_r>
 80182e4:	4605      	mov	r5, r0
 80182e6:	b118      	cbz	r0, 80182f0 <_calloc_r+0x18>
 80182e8:	4622      	mov	r2, r4
 80182ea:	2100      	movs	r1, #0
 80182ec:	f7fd ff3d 	bl	801616a <memset>
 80182f0:	4628      	mov	r0, r5
 80182f2:	bd38      	pop	{r3, r4, r5, pc}

080182f4 <_free_r>:
 80182f4:	b538      	push	{r3, r4, r5, lr}
 80182f6:	4605      	mov	r5, r0
 80182f8:	2900      	cmp	r1, #0
 80182fa:	d045      	beq.n	8018388 <_free_r+0x94>
 80182fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018300:	1f0c      	subs	r4, r1, #4
 8018302:	2b00      	cmp	r3, #0
 8018304:	bfb8      	it	lt
 8018306:	18e4      	addlt	r4, r4, r3
 8018308:	f000 fa98 	bl	801883c <__malloc_lock>
 801830c:	4a1f      	ldr	r2, [pc, #124]	; (801838c <_free_r+0x98>)
 801830e:	6813      	ldr	r3, [r2, #0]
 8018310:	4610      	mov	r0, r2
 8018312:	b933      	cbnz	r3, 8018322 <_free_r+0x2e>
 8018314:	6063      	str	r3, [r4, #4]
 8018316:	6014      	str	r4, [r2, #0]
 8018318:	4628      	mov	r0, r5
 801831a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801831e:	f000 ba8e 	b.w	801883e <__malloc_unlock>
 8018322:	42a3      	cmp	r3, r4
 8018324:	d90c      	bls.n	8018340 <_free_r+0x4c>
 8018326:	6821      	ldr	r1, [r4, #0]
 8018328:	1862      	adds	r2, r4, r1
 801832a:	4293      	cmp	r3, r2
 801832c:	bf04      	itt	eq
 801832e:	681a      	ldreq	r2, [r3, #0]
 8018330:	685b      	ldreq	r3, [r3, #4]
 8018332:	6063      	str	r3, [r4, #4]
 8018334:	bf04      	itt	eq
 8018336:	1852      	addeq	r2, r2, r1
 8018338:	6022      	streq	r2, [r4, #0]
 801833a:	6004      	str	r4, [r0, #0]
 801833c:	e7ec      	b.n	8018318 <_free_r+0x24>
 801833e:	4613      	mov	r3, r2
 8018340:	685a      	ldr	r2, [r3, #4]
 8018342:	b10a      	cbz	r2, 8018348 <_free_r+0x54>
 8018344:	42a2      	cmp	r2, r4
 8018346:	d9fa      	bls.n	801833e <_free_r+0x4a>
 8018348:	6819      	ldr	r1, [r3, #0]
 801834a:	1858      	adds	r0, r3, r1
 801834c:	42a0      	cmp	r0, r4
 801834e:	d10b      	bne.n	8018368 <_free_r+0x74>
 8018350:	6820      	ldr	r0, [r4, #0]
 8018352:	4401      	add	r1, r0
 8018354:	1858      	adds	r0, r3, r1
 8018356:	4282      	cmp	r2, r0
 8018358:	6019      	str	r1, [r3, #0]
 801835a:	d1dd      	bne.n	8018318 <_free_r+0x24>
 801835c:	6810      	ldr	r0, [r2, #0]
 801835e:	6852      	ldr	r2, [r2, #4]
 8018360:	605a      	str	r2, [r3, #4]
 8018362:	4401      	add	r1, r0
 8018364:	6019      	str	r1, [r3, #0]
 8018366:	e7d7      	b.n	8018318 <_free_r+0x24>
 8018368:	d902      	bls.n	8018370 <_free_r+0x7c>
 801836a:	230c      	movs	r3, #12
 801836c:	602b      	str	r3, [r5, #0]
 801836e:	e7d3      	b.n	8018318 <_free_r+0x24>
 8018370:	6820      	ldr	r0, [r4, #0]
 8018372:	1821      	adds	r1, r4, r0
 8018374:	428a      	cmp	r2, r1
 8018376:	bf04      	itt	eq
 8018378:	6811      	ldreq	r1, [r2, #0]
 801837a:	6852      	ldreq	r2, [r2, #4]
 801837c:	6062      	str	r2, [r4, #4]
 801837e:	bf04      	itt	eq
 8018380:	1809      	addeq	r1, r1, r0
 8018382:	6021      	streq	r1, [r4, #0]
 8018384:	605c      	str	r4, [r3, #4]
 8018386:	e7c7      	b.n	8018318 <_free_r+0x24>
 8018388:	bd38      	pop	{r3, r4, r5, pc}
 801838a:	bf00      	nop
 801838c:	20004370 	.word	0x20004370

08018390 <_malloc_r>:
 8018390:	b570      	push	{r4, r5, r6, lr}
 8018392:	1ccd      	adds	r5, r1, #3
 8018394:	f025 0503 	bic.w	r5, r5, #3
 8018398:	3508      	adds	r5, #8
 801839a:	2d0c      	cmp	r5, #12
 801839c:	bf38      	it	cc
 801839e:	250c      	movcc	r5, #12
 80183a0:	2d00      	cmp	r5, #0
 80183a2:	4606      	mov	r6, r0
 80183a4:	db01      	blt.n	80183aa <_malloc_r+0x1a>
 80183a6:	42a9      	cmp	r1, r5
 80183a8:	d903      	bls.n	80183b2 <_malloc_r+0x22>
 80183aa:	230c      	movs	r3, #12
 80183ac:	6033      	str	r3, [r6, #0]
 80183ae:	2000      	movs	r0, #0
 80183b0:	bd70      	pop	{r4, r5, r6, pc}
 80183b2:	f000 fa43 	bl	801883c <__malloc_lock>
 80183b6:	4a21      	ldr	r2, [pc, #132]	; (801843c <_malloc_r+0xac>)
 80183b8:	6814      	ldr	r4, [r2, #0]
 80183ba:	4621      	mov	r1, r4
 80183bc:	b991      	cbnz	r1, 80183e4 <_malloc_r+0x54>
 80183be:	4c20      	ldr	r4, [pc, #128]	; (8018440 <_malloc_r+0xb0>)
 80183c0:	6823      	ldr	r3, [r4, #0]
 80183c2:	b91b      	cbnz	r3, 80183cc <_malloc_r+0x3c>
 80183c4:	4630      	mov	r0, r6
 80183c6:	f000 f97d 	bl	80186c4 <_sbrk_r>
 80183ca:	6020      	str	r0, [r4, #0]
 80183cc:	4629      	mov	r1, r5
 80183ce:	4630      	mov	r0, r6
 80183d0:	f000 f978 	bl	80186c4 <_sbrk_r>
 80183d4:	1c43      	adds	r3, r0, #1
 80183d6:	d124      	bne.n	8018422 <_malloc_r+0x92>
 80183d8:	230c      	movs	r3, #12
 80183da:	6033      	str	r3, [r6, #0]
 80183dc:	4630      	mov	r0, r6
 80183de:	f000 fa2e 	bl	801883e <__malloc_unlock>
 80183e2:	e7e4      	b.n	80183ae <_malloc_r+0x1e>
 80183e4:	680b      	ldr	r3, [r1, #0]
 80183e6:	1b5b      	subs	r3, r3, r5
 80183e8:	d418      	bmi.n	801841c <_malloc_r+0x8c>
 80183ea:	2b0b      	cmp	r3, #11
 80183ec:	d90f      	bls.n	801840e <_malloc_r+0x7e>
 80183ee:	600b      	str	r3, [r1, #0]
 80183f0:	50cd      	str	r5, [r1, r3]
 80183f2:	18cc      	adds	r4, r1, r3
 80183f4:	4630      	mov	r0, r6
 80183f6:	f000 fa22 	bl	801883e <__malloc_unlock>
 80183fa:	f104 000b 	add.w	r0, r4, #11
 80183fe:	1d23      	adds	r3, r4, #4
 8018400:	f020 0007 	bic.w	r0, r0, #7
 8018404:	1ac3      	subs	r3, r0, r3
 8018406:	d0d3      	beq.n	80183b0 <_malloc_r+0x20>
 8018408:	425a      	negs	r2, r3
 801840a:	50e2      	str	r2, [r4, r3]
 801840c:	e7d0      	b.n	80183b0 <_malloc_r+0x20>
 801840e:	428c      	cmp	r4, r1
 8018410:	684b      	ldr	r3, [r1, #4]
 8018412:	bf16      	itet	ne
 8018414:	6063      	strne	r3, [r4, #4]
 8018416:	6013      	streq	r3, [r2, #0]
 8018418:	460c      	movne	r4, r1
 801841a:	e7eb      	b.n	80183f4 <_malloc_r+0x64>
 801841c:	460c      	mov	r4, r1
 801841e:	6849      	ldr	r1, [r1, #4]
 8018420:	e7cc      	b.n	80183bc <_malloc_r+0x2c>
 8018422:	1cc4      	adds	r4, r0, #3
 8018424:	f024 0403 	bic.w	r4, r4, #3
 8018428:	42a0      	cmp	r0, r4
 801842a:	d005      	beq.n	8018438 <_malloc_r+0xa8>
 801842c:	1a21      	subs	r1, r4, r0
 801842e:	4630      	mov	r0, r6
 8018430:	f000 f948 	bl	80186c4 <_sbrk_r>
 8018434:	3001      	adds	r0, #1
 8018436:	d0cf      	beq.n	80183d8 <_malloc_r+0x48>
 8018438:	6025      	str	r5, [r4, #0]
 801843a:	e7db      	b.n	80183f4 <_malloc_r+0x64>
 801843c:	20004370 	.word	0x20004370
 8018440:	20004374 	.word	0x20004374

08018444 <__sfputc_r>:
 8018444:	6893      	ldr	r3, [r2, #8]
 8018446:	3b01      	subs	r3, #1
 8018448:	2b00      	cmp	r3, #0
 801844a:	b410      	push	{r4}
 801844c:	6093      	str	r3, [r2, #8]
 801844e:	da08      	bge.n	8018462 <__sfputc_r+0x1e>
 8018450:	6994      	ldr	r4, [r2, #24]
 8018452:	42a3      	cmp	r3, r4
 8018454:	db01      	blt.n	801845a <__sfputc_r+0x16>
 8018456:	290a      	cmp	r1, #10
 8018458:	d103      	bne.n	8018462 <__sfputc_r+0x1e>
 801845a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801845e:	f7fe bb65 	b.w	8016b2c <__swbuf_r>
 8018462:	6813      	ldr	r3, [r2, #0]
 8018464:	1c58      	adds	r0, r3, #1
 8018466:	6010      	str	r0, [r2, #0]
 8018468:	7019      	strb	r1, [r3, #0]
 801846a:	4608      	mov	r0, r1
 801846c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018470:	4770      	bx	lr

08018472 <__sfputs_r>:
 8018472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018474:	4606      	mov	r6, r0
 8018476:	460f      	mov	r7, r1
 8018478:	4614      	mov	r4, r2
 801847a:	18d5      	adds	r5, r2, r3
 801847c:	42ac      	cmp	r4, r5
 801847e:	d101      	bne.n	8018484 <__sfputs_r+0x12>
 8018480:	2000      	movs	r0, #0
 8018482:	e007      	b.n	8018494 <__sfputs_r+0x22>
 8018484:	463a      	mov	r2, r7
 8018486:	f814 1b01 	ldrb.w	r1, [r4], #1
 801848a:	4630      	mov	r0, r6
 801848c:	f7ff ffda 	bl	8018444 <__sfputc_r>
 8018490:	1c43      	adds	r3, r0, #1
 8018492:	d1f3      	bne.n	801847c <__sfputs_r+0xa>
 8018494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018498 <_vfiprintf_r>:
 8018498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801849c:	460c      	mov	r4, r1
 801849e:	b09d      	sub	sp, #116	; 0x74
 80184a0:	4617      	mov	r7, r2
 80184a2:	461d      	mov	r5, r3
 80184a4:	4606      	mov	r6, r0
 80184a6:	b118      	cbz	r0, 80184b0 <_vfiprintf_r+0x18>
 80184a8:	6983      	ldr	r3, [r0, #24]
 80184aa:	b90b      	cbnz	r3, 80184b0 <_vfiprintf_r+0x18>
 80184ac:	f7ff fb34 	bl	8017b18 <__sinit>
 80184b0:	4b7c      	ldr	r3, [pc, #496]	; (80186a4 <_vfiprintf_r+0x20c>)
 80184b2:	429c      	cmp	r4, r3
 80184b4:	d158      	bne.n	8018568 <_vfiprintf_r+0xd0>
 80184b6:	6874      	ldr	r4, [r6, #4]
 80184b8:	89a3      	ldrh	r3, [r4, #12]
 80184ba:	0718      	lsls	r0, r3, #28
 80184bc:	d55e      	bpl.n	801857c <_vfiprintf_r+0xe4>
 80184be:	6923      	ldr	r3, [r4, #16]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d05b      	beq.n	801857c <_vfiprintf_r+0xe4>
 80184c4:	2300      	movs	r3, #0
 80184c6:	9309      	str	r3, [sp, #36]	; 0x24
 80184c8:	2320      	movs	r3, #32
 80184ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80184ce:	2330      	movs	r3, #48	; 0x30
 80184d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80184d4:	9503      	str	r5, [sp, #12]
 80184d6:	f04f 0b01 	mov.w	fp, #1
 80184da:	46b8      	mov	r8, r7
 80184dc:	4645      	mov	r5, r8
 80184de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80184e2:	b10b      	cbz	r3, 80184e8 <_vfiprintf_r+0x50>
 80184e4:	2b25      	cmp	r3, #37	; 0x25
 80184e6:	d154      	bne.n	8018592 <_vfiprintf_r+0xfa>
 80184e8:	ebb8 0a07 	subs.w	sl, r8, r7
 80184ec:	d00b      	beq.n	8018506 <_vfiprintf_r+0x6e>
 80184ee:	4653      	mov	r3, sl
 80184f0:	463a      	mov	r2, r7
 80184f2:	4621      	mov	r1, r4
 80184f4:	4630      	mov	r0, r6
 80184f6:	f7ff ffbc 	bl	8018472 <__sfputs_r>
 80184fa:	3001      	adds	r0, #1
 80184fc:	f000 80c2 	beq.w	8018684 <_vfiprintf_r+0x1ec>
 8018500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018502:	4453      	add	r3, sl
 8018504:	9309      	str	r3, [sp, #36]	; 0x24
 8018506:	f898 3000 	ldrb.w	r3, [r8]
 801850a:	2b00      	cmp	r3, #0
 801850c:	f000 80ba 	beq.w	8018684 <_vfiprintf_r+0x1ec>
 8018510:	2300      	movs	r3, #0
 8018512:	f04f 32ff 	mov.w	r2, #4294967295
 8018516:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801851a:	9304      	str	r3, [sp, #16]
 801851c:	9307      	str	r3, [sp, #28]
 801851e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018522:	931a      	str	r3, [sp, #104]	; 0x68
 8018524:	46a8      	mov	r8, r5
 8018526:	2205      	movs	r2, #5
 8018528:	f818 1b01 	ldrb.w	r1, [r8], #1
 801852c:	485e      	ldr	r0, [pc, #376]	; (80186a8 <_vfiprintf_r+0x210>)
 801852e:	f7ef fd8f 	bl	8008050 <memchr>
 8018532:	9b04      	ldr	r3, [sp, #16]
 8018534:	bb78      	cbnz	r0, 8018596 <_vfiprintf_r+0xfe>
 8018536:	06d9      	lsls	r1, r3, #27
 8018538:	bf44      	itt	mi
 801853a:	2220      	movmi	r2, #32
 801853c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018540:	071a      	lsls	r2, r3, #28
 8018542:	bf44      	itt	mi
 8018544:	222b      	movmi	r2, #43	; 0x2b
 8018546:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801854a:	782a      	ldrb	r2, [r5, #0]
 801854c:	2a2a      	cmp	r2, #42	; 0x2a
 801854e:	d02a      	beq.n	80185a6 <_vfiprintf_r+0x10e>
 8018550:	9a07      	ldr	r2, [sp, #28]
 8018552:	46a8      	mov	r8, r5
 8018554:	2000      	movs	r0, #0
 8018556:	250a      	movs	r5, #10
 8018558:	4641      	mov	r1, r8
 801855a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801855e:	3b30      	subs	r3, #48	; 0x30
 8018560:	2b09      	cmp	r3, #9
 8018562:	d969      	bls.n	8018638 <_vfiprintf_r+0x1a0>
 8018564:	b360      	cbz	r0, 80185c0 <_vfiprintf_r+0x128>
 8018566:	e024      	b.n	80185b2 <_vfiprintf_r+0x11a>
 8018568:	4b50      	ldr	r3, [pc, #320]	; (80186ac <_vfiprintf_r+0x214>)
 801856a:	429c      	cmp	r4, r3
 801856c:	d101      	bne.n	8018572 <_vfiprintf_r+0xda>
 801856e:	68b4      	ldr	r4, [r6, #8]
 8018570:	e7a2      	b.n	80184b8 <_vfiprintf_r+0x20>
 8018572:	4b4f      	ldr	r3, [pc, #316]	; (80186b0 <_vfiprintf_r+0x218>)
 8018574:	429c      	cmp	r4, r3
 8018576:	bf08      	it	eq
 8018578:	68f4      	ldreq	r4, [r6, #12]
 801857a:	e79d      	b.n	80184b8 <_vfiprintf_r+0x20>
 801857c:	4621      	mov	r1, r4
 801857e:	4630      	mov	r0, r6
 8018580:	f7fe fb26 	bl	8016bd0 <__swsetup_r>
 8018584:	2800      	cmp	r0, #0
 8018586:	d09d      	beq.n	80184c4 <_vfiprintf_r+0x2c>
 8018588:	f04f 30ff 	mov.w	r0, #4294967295
 801858c:	b01d      	add	sp, #116	; 0x74
 801858e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018592:	46a8      	mov	r8, r5
 8018594:	e7a2      	b.n	80184dc <_vfiprintf_r+0x44>
 8018596:	4a44      	ldr	r2, [pc, #272]	; (80186a8 <_vfiprintf_r+0x210>)
 8018598:	1a80      	subs	r0, r0, r2
 801859a:	fa0b f000 	lsl.w	r0, fp, r0
 801859e:	4318      	orrs	r0, r3
 80185a0:	9004      	str	r0, [sp, #16]
 80185a2:	4645      	mov	r5, r8
 80185a4:	e7be      	b.n	8018524 <_vfiprintf_r+0x8c>
 80185a6:	9a03      	ldr	r2, [sp, #12]
 80185a8:	1d11      	adds	r1, r2, #4
 80185aa:	6812      	ldr	r2, [r2, #0]
 80185ac:	9103      	str	r1, [sp, #12]
 80185ae:	2a00      	cmp	r2, #0
 80185b0:	db01      	blt.n	80185b6 <_vfiprintf_r+0x11e>
 80185b2:	9207      	str	r2, [sp, #28]
 80185b4:	e004      	b.n	80185c0 <_vfiprintf_r+0x128>
 80185b6:	4252      	negs	r2, r2
 80185b8:	f043 0302 	orr.w	r3, r3, #2
 80185bc:	9207      	str	r2, [sp, #28]
 80185be:	9304      	str	r3, [sp, #16]
 80185c0:	f898 3000 	ldrb.w	r3, [r8]
 80185c4:	2b2e      	cmp	r3, #46	; 0x2e
 80185c6:	d10e      	bne.n	80185e6 <_vfiprintf_r+0x14e>
 80185c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80185cc:	2b2a      	cmp	r3, #42	; 0x2a
 80185ce:	d138      	bne.n	8018642 <_vfiprintf_r+0x1aa>
 80185d0:	9b03      	ldr	r3, [sp, #12]
 80185d2:	1d1a      	adds	r2, r3, #4
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	9203      	str	r2, [sp, #12]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	bfb8      	it	lt
 80185dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80185e0:	f108 0802 	add.w	r8, r8, #2
 80185e4:	9305      	str	r3, [sp, #20]
 80185e6:	4d33      	ldr	r5, [pc, #204]	; (80186b4 <_vfiprintf_r+0x21c>)
 80185e8:	f898 1000 	ldrb.w	r1, [r8]
 80185ec:	2203      	movs	r2, #3
 80185ee:	4628      	mov	r0, r5
 80185f0:	f7ef fd2e 	bl	8008050 <memchr>
 80185f4:	b140      	cbz	r0, 8018608 <_vfiprintf_r+0x170>
 80185f6:	2340      	movs	r3, #64	; 0x40
 80185f8:	1b40      	subs	r0, r0, r5
 80185fa:	fa03 f000 	lsl.w	r0, r3, r0
 80185fe:	9b04      	ldr	r3, [sp, #16]
 8018600:	4303      	orrs	r3, r0
 8018602:	f108 0801 	add.w	r8, r8, #1
 8018606:	9304      	str	r3, [sp, #16]
 8018608:	f898 1000 	ldrb.w	r1, [r8]
 801860c:	482a      	ldr	r0, [pc, #168]	; (80186b8 <_vfiprintf_r+0x220>)
 801860e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018612:	2206      	movs	r2, #6
 8018614:	f108 0701 	add.w	r7, r8, #1
 8018618:	f7ef fd1a 	bl	8008050 <memchr>
 801861c:	2800      	cmp	r0, #0
 801861e:	d037      	beq.n	8018690 <_vfiprintf_r+0x1f8>
 8018620:	4b26      	ldr	r3, [pc, #152]	; (80186bc <_vfiprintf_r+0x224>)
 8018622:	bb1b      	cbnz	r3, 801866c <_vfiprintf_r+0x1d4>
 8018624:	9b03      	ldr	r3, [sp, #12]
 8018626:	3307      	adds	r3, #7
 8018628:	f023 0307 	bic.w	r3, r3, #7
 801862c:	3308      	adds	r3, #8
 801862e:	9303      	str	r3, [sp, #12]
 8018630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018632:	444b      	add	r3, r9
 8018634:	9309      	str	r3, [sp, #36]	; 0x24
 8018636:	e750      	b.n	80184da <_vfiprintf_r+0x42>
 8018638:	fb05 3202 	mla	r2, r5, r2, r3
 801863c:	2001      	movs	r0, #1
 801863e:	4688      	mov	r8, r1
 8018640:	e78a      	b.n	8018558 <_vfiprintf_r+0xc0>
 8018642:	2300      	movs	r3, #0
 8018644:	f108 0801 	add.w	r8, r8, #1
 8018648:	9305      	str	r3, [sp, #20]
 801864a:	4619      	mov	r1, r3
 801864c:	250a      	movs	r5, #10
 801864e:	4640      	mov	r0, r8
 8018650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018654:	3a30      	subs	r2, #48	; 0x30
 8018656:	2a09      	cmp	r2, #9
 8018658:	d903      	bls.n	8018662 <_vfiprintf_r+0x1ca>
 801865a:	2b00      	cmp	r3, #0
 801865c:	d0c3      	beq.n	80185e6 <_vfiprintf_r+0x14e>
 801865e:	9105      	str	r1, [sp, #20]
 8018660:	e7c1      	b.n	80185e6 <_vfiprintf_r+0x14e>
 8018662:	fb05 2101 	mla	r1, r5, r1, r2
 8018666:	2301      	movs	r3, #1
 8018668:	4680      	mov	r8, r0
 801866a:	e7f0      	b.n	801864e <_vfiprintf_r+0x1b6>
 801866c:	ab03      	add	r3, sp, #12
 801866e:	9300      	str	r3, [sp, #0]
 8018670:	4622      	mov	r2, r4
 8018672:	4b13      	ldr	r3, [pc, #76]	; (80186c0 <_vfiprintf_r+0x228>)
 8018674:	a904      	add	r1, sp, #16
 8018676:	4630      	mov	r0, r6
 8018678:	f7fd fe14 	bl	80162a4 <_printf_float>
 801867c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018680:	4681      	mov	r9, r0
 8018682:	d1d5      	bne.n	8018630 <_vfiprintf_r+0x198>
 8018684:	89a3      	ldrh	r3, [r4, #12]
 8018686:	065b      	lsls	r3, r3, #25
 8018688:	f53f af7e 	bmi.w	8018588 <_vfiprintf_r+0xf0>
 801868c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801868e:	e77d      	b.n	801858c <_vfiprintf_r+0xf4>
 8018690:	ab03      	add	r3, sp, #12
 8018692:	9300      	str	r3, [sp, #0]
 8018694:	4622      	mov	r2, r4
 8018696:	4b0a      	ldr	r3, [pc, #40]	; (80186c0 <_vfiprintf_r+0x228>)
 8018698:	a904      	add	r1, sp, #16
 801869a:	4630      	mov	r0, r6
 801869c:	f7fe f8b8 	bl	8016810 <_printf_i>
 80186a0:	e7ec      	b.n	801867c <_vfiprintf_r+0x1e4>
 80186a2:	bf00      	nop
 80186a4:	08018a9c 	.word	0x08018a9c
 80186a8:	08018bdc 	.word	0x08018bdc
 80186ac:	08018abc 	.word	0x08018abc
 80186b0:	08018a7c 	.word	0x08018a7c
 80186b4:	08018be2 	.word	0x08018be2
 80186b8:	08018be6 	.word	0x08018be6
 80186bc:	080162a5 	.word	0x080162a5
 80186c0:	08018473 	.word	0x08018473

080186c4 <_sbrk_r>:
 80186c4:	b538      	push	{r3, r4, r5, lr}
 80186c6:	4c06      	ldr	r4, [pc, #24]	; (80186e0 <_sbrk_r+0x1c>)
 80186c8:	2300      	movs	r3, #0
 80186ca:	4605      	mov	r5, r0
 80186cc:	4608      	mov	r0, r1
 80186ce:	6023      	str	r3, [r4, #0]
 80186d0:	f7f8 fa3e 	bl	8010b50 <_sbrk>
 80186d4:	1c43      	adds	r3, r0, #1
 80186d6:	d102      	bne.n	80186de <_sbrk_r+0x1a>
 80186d8:	6823      	ldr	r3, [r4, #0]
 80186da:	b103      	cbz	r3, 80186de <_sbrk_r+0x1a>
 80186dc:	602b      	str	r3, [r5, #0]
 80186de:	bd38      	pop	{r3, r4, r5, pc}
 80186e0:	20005080 	.word	0x20005080

080186e4 <__sread>:
 80186e4:	b510      	push	{r4, lr}
 80186e6:	460c      	mov	r4, r1
 80186e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80186ec:	f000 f8a8 	bl	8018840 <_read_r>
 80186f0:	2800      	cmp	r0, #0
 80186f2:	bfab      	itete	ge
 80186f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80186f6:	89a3      	ldrhlt	r3, [r4, #12]
 80186f8:	181b      	addge	r3, r3, r0
 80186fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80186fe:	bfac      	ite	ge
 8018700:	6563      	strge	r3, [r4, #84]	; 0x54
 8018702:	81a3      	strhlt	r3, [r4, #12]
 8018704:	bd10      	pop	{r4, pc}

08018706 <__swrite>:
 8018706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801870a:	461f      	mov	r7, r3
 801870c:	898b      	ldrh	r3, [r1, #12]
 801870e:	05db      	lsls	r3, r3, #23
 8018710:	4605      	mov	r5, r0
 8018712:	460c      	mov	r4, r1
 8018714:	4616      	mov	r6, r2
 8018716:	d505      	bpl.n	8018724 <__swrite+0x1e>
 8018718:	2302      	movs	r3, #2
 801871a:	2200      	movs	r2, #0
 801871c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018720:	f000 f868 	bl	80187f4 <_lseek_r>
 8018724:	89a3      	ldrh	r3, [r4, #12]
 8018726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801872a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801872e:	81a3      	strh	r3, [r4, #12]
 8018730:	4632      	mov	r2, r6
 8018732:	463b      	mov	r3, r7
 8018734:	4628      	mov	r0, r5
 8018736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801873a:	f000 b817 	b.w	801876c <_write_r>

0801873e <__sseek>:
 801873e:	b510      	push	{r4, lr}
 8018740:	460c      	mov	r4, r1
 8018742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018746:	f000 f855 	bl	80187f4 <_lseek_r>
 801874a:	1c43      	adds	r3, r0, #1
 801874c:	89a3      	ldrh	r3, [r4, #12]
 801874e:	bf15      	itete	ne
 8018750:	6560      	strne	r0, [r4, #84]	; 0x54
 8018752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801875a:	81a3      	strheq	r3, [r4, #12]
 801875c:	bf18      	it	ne
 801875e:	81a3      	strhne	r3, [r4, #12]
 8018760:	bd10      	pop	{r4, pc}

08018762 <__sclose>:
 8018762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018766:	f000 b813 	b.w	8018790 <_close_r>
	...

0801876c <_write_r>:
 801876c:	b538      	push	{r3, r4, r5, lr}
 801876e:	4c07      	ldr	r4, [pc, #28]	; (801878c <_write_r+0x20>)
 8018770:	4605      	mov	r5, r0
 8018772:	4608      	mov	r0, r1
 8018774:	4611      	mov	r1, r2
 8018776:	2200      	movs	r2, #0
 8018778:	6022      	str	r2, [r4, #0]
 801877a:	461a      	mov	r2, r3
 801877c:	f7f8 f997 	bl	8010aae <_write>
 8018780:	1c43      	adds	r3, r0, #1
 8018782:	d102      	bne.n	801878a <_write_r+0x1e>
 8018784:	6823      	ldr	r3, [r4, #0]
 8018786:	b103      	cbz	r3, 801878a <_write_r+0x1e>
 8018788:	602b      	str	r3, [r5, #0]
 801878a:	bd38      	pop	{r3, r4, r5, pc}
 801878c:	20005080 	.word	0x20005080

08018790 <_close_r>:
 8018790:	b538      	push	{r3, r4, r5, lr}
 8018792:	4c06      	ldr	r4, [pc, #24]	; (80187ac <_close_r+0x1c>)
 8018794:	2300      	movs	r3, #0
 8018796:	4605      	mov	r5, r0
 8018798:	4608      	mov	r0, r1
 801879a:	6023      	str	r3, [r4, #0]
 801879c:	f7f8 f9a3 	bl	8010ae6 <_close>
 80187a0:	1c43      	adds	r3, r0, #1
 80187a2:	d102      	bne.n	80187aa <_close_r+0x1a>
 80187a4:	6823      	ldr	r3, [r4, #0]
 80187a6:	b103      	cbz	r3, 80187aa <_close_r+0x1a>
 80187a8:	602b      	str	r3, [r5, #0]
 80187aa:	bd38      	pop	{r3, r4, r5, pc}
 80187ac:	20005080 	.word	0x20005080

080187b0 <_fstat_r>:
 80187b0:	b538      	push	{r3, r4, r5, lr}
 80187b2:	4c07      	ldr	r4, [pc, #28]	; (80187d0 <_fstat_r+0x20>)
 80187b4:	2300      	movs	r3, #0
 80187b6:	4605      	mov	r5, r0
 80187b8:	4608      	mov	r0, r1
 80187ba:	4611      	mov	r1, r2
 80187bc:	6023      	str	r3, [r4, #0]
 80187be:	f7f8 f99e 	bl	8010afe <_fstat>
 80187c2:	1c43      	adds	r3, r0, #1
 80187c4:	d102      	bne.n	80187cc <_fstat_r+0x1c>
 80187c6:	6823      	ldr	r3, [r4, #0]
 80187c8:	b103      	cbz	r3, 80187cc <_fstat_r+0x1c>
 80187ca:	602b      	str	r3, [r5, #0]
 80187cc:	bd38      	pop	{r3, r4, r5, pc}
 80187ce:	bf00      	nop
 80187d0:	20005080 	.word	0x20005080

080187d4 <_isatty_r>:
 80187d4:	b538      	push	{r3, r4, r5, lr}
 80187d6:	4c06      	ldr	r4, [pc, #24]	; (80187f0 <_isatty_r+0x1c>)
 80187d8:	2300      	movs	r3, #0
 80187da:	4605      	mov	r5, r0
 80187dc:	4608      	mov	r0, r1
 80187de:	6023      	str	r3, [r4, #0]
 80187e0:	f7f8 f99d 	bl	8010b1e <_isatty>
 80187e4:	1c43      	adds	r3, r0, #1
 80187e6:	d102      	bne.n	80187ee <_isatty_r+0x1a>
 80187e8:	6823      	ldr	r3, [r4, #0]
 80187ea:	b103      	cbz	r3, 80187ee <_isatty_r+0x1a>
 80187ec:	602b      	str	r3, [r5, #0]
 80187ee:	bd38      	pop	{r3, r4, r5, pc}
 80187f0:	20005080 	.word	0x20005080

080187f4 <_lseek_r>:
 80187f4:	b538      	push	{r3, r4, r5, lr}
 80187f6:	4c07      	ldr	r4, [pc, #28]	; (8018814 <_lseek_r+0x20>)
 80187f8:	4605      	mov	r5, r0
 80187fa:	4608      	mov	r0, r1
 80187fc:	4611      	mov	r1, r2
 80187fe:	2200      	movs	r2, #0
 8018800:	6022      	str	r2, [r4, #0]
 8018802:	461a      	mov	r2, r3
 8018804:	f7f8 f996 	bl	8010b34 <_lseek>
 8018808:	1c43      	adds	r3, r0, #1
 801880a:	d102      	bne.n	8018812 <_lseek_r+0x1e>
 801880c:	6823      	ldr	r3, [r4, #0]
 801880e:	b103      	cbz	r3, 8018812 <_lseek_r+0x1e>
 8018810:	602b      	str	r3, [r5, #0]
 8018812:	bd38      	pop	{r3, r4, r5, pc}
 8018814:	20005080 	.word	0x20005080

08018818 <__ascii_mbtowc>:
 8018818:	b082      	sub	sp, #8
 801881a:	b901      	cbnz	r1, 801881e <__ascii_mbtowc+0x6>
 801881c:	a901      	add	r1, sp, #4
 801881e:	b142      	cbz	r2, 8018832 <__ascii_mbtowc+0x1a>
 8018820:	b14b      	cbz	r3, 8018836 <__ascii_mbtowc+0x1e>
 8018822:	7813      	ldrb	r3, [r2, #0]
 8018824:	600b      	str	r3, [r1, #0]
 8018826:	7812      	ldrb	r2, [r2, #0]
 8018828:	1c10      	adds	r0, r2, #0
 801882a:	bf18      	it	ne
 801882c:	2001      	movne	r0, #1
 801882e:	b002      	add	sp, #8
 8018830:	4770      	bx	lr
 8018832:	4610      	mov	r0, r2
 8018834:	e7fb      	b.n	801882e <__ascii_mbtowc+0x16>
 8018836:	f06f 0001 	mvn.w	r0, #1
 801883a:	e7f8      	b.n	801882e <__ascii_mbtowc+0x16>

0801883c <__malloc_lock>:
 801883c:	4770      	bx	lr

0801883e <__malloc_unlock>:
 801883e:	4770      	bx	lr

08018840 <_read_r>:
 8018840:	b538      	push	{r3, r4, r5, lr}
 8018842:	4c07      	ldr	r4, [pc, #28]	; (8018860 <_read_r+0x20>)
 8018844:	4605      	mov	r5, r0
 8018846:	4608      	mov	r0, r1
 8018848:	4611      	mov	r1, r2
 801884a:	2200      	movs	r2, #0
 801884c:	6022      	str	r2, [r4, #0]
 801884e:	461a      	mov	r2, r3
 8018850:	f7f8 f910 	bl	8010a74 <_read>
 8018854:	1c43      	adds	r3, r0, #1
 8018856:	d102      	bne.n	801885e <_read_r+0x1e>
 8018858:	6823      	ldr	r3, [r4, #0]
 801885a:	b103      	cbz	r3, 801885e <_read_r+0x1e>
 801885c:	602b      	str	r3, [r5, #0]
 801885e:	bd38      	pop	{r3, r4, r5, pc}
 8018860:	20005080 	.word	0x20005080

08018864 <__ascii_wctomb>:
 8018864:	b149      	cbz	r1, 801887a <__ascii_wctomb+0x16>
 8018866:	2aff      	cmp	r2, #255	; 0xff
 8018868:	bf85      	ittet	hi
 801886a:	238a      	movhi	r3, #138	; 0x8a
 801886c:	6003      	strhi	r3, [r0, #0]
 801886e:	700a      	strbls	r2, [r1, #0]
 8018870:	f04f 30ff 	movhi.w	r0, #4294967295
 8018874:	bf98      	it	ls
 8018876:	2001      	movls	r0, #1
 8018878:	4770      	bx	lr
 801887a:	4608      	mov	r0, r1
 801887c:	4770      	bx	lr
	...

08018880 <_init>:
 8018880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018882:	bf00      	nop
 8018884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018886:	bc08      	pop	{r3}
 8018888:	469e      	mov	lr, r3
 801888a:	4770      	bx	lr

0801888c <_fini>:
 801888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801888e:	bf00      	nop
 8018890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018892:	bc08      	pop	{r3}
 8018894:	469e      	mov	lr, r3
 8018896:	4770      	bx	lr
