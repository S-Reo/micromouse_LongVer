
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         000122d8  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000064c  0801a2d8  0801a2d8  0002a2d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0801a924  0801a924  000301f8  2**0
                  CONTENTS
  6 .ARM          00000008  0801a924  0801a924  0002a924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0801a92c  0801a92c  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0801a92c  0801a92c  0002a92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0801a930  0801a930  0002a930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001f8  20000000  0801a934  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000106b8  200001f8  0801ab2c  000301f8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200108b0  0801ab2c  000308b0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000249ab  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004e50  00000000  00000000  00054bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000016f8  00000000  00000000  00059a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000014a8  00000000  00000000  0005b120  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00026cbd  00000000  00000000  0005c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00017243  00000000  00000000  00083285  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c9796  00000000  00000000  0009a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00163c5e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007200  00000000  00000000  00163cdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001f8 	.word	0x200001f8
 800801c:	00000000 	.word	0x00000000
 8008020:	0801a2c0 	.word	0x0801a2c0

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001fc 	.word	0x200001fc
 800803c:	0801a2c0 	.word	0x0801a2c0

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <InitPosition>:
//
//
//
//}
void InitPosition()
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
	Pos.X = 0;
 8008dfc:	4b0b      	ldr	r3, [pc, #44]	; (8008e2c <InitPosition+0x34>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	701a      	strb	r2, [r3, #0]
	Pos.Y = 0;
 8008e02:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <InitPosition+0x34>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	705a      	strb	r2, [r3, #1]
	Pos.Car = north;
 8008e08:	4b08      	ldr	r3, [pc, #32]	; (8008e2c <InitPosition+0x34>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	70da      	strb	r2, [r3, #3]
	Pos.Dir = front;
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <InitPosition+0x34>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	709a      	strb	r2, [r3, #2]
	Pos.Act = Wait;
 8008e14:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <InitPosition+0x34>)
 8008e16:	2204      	movs	r2, #4
 8008e18:	711a      	strb	r2, [r3, #4]
	Pos.WallSaf = wall_warn;//どっちにするか
 8008e1a:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <InitPosition+0x34>)
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	715a      	strb	r2, [r3, #5]

}
 8008e20:	bf00      	nop
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	20000000 	.word	0x20000000

08008e30 <GetWallCtrlDirection>:

int GetWallCtrlDirection()
{
 8008e30:	b480      	push	{r7}
 8008e32:	af00      	add	r7, sp, #0

	switch(Pos.Car)
 8008e34:	4b9a      	ldr	r3, [pc, #616]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e36:	78db      	ldrb	r3, [r3, #3]
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	f200 812b 	bhi.w	8009094 <GetWallCtrlDirection+0x264>
 8008e3e:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <GetWallCtrlDirection+0x14>)
 8008e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e44:	08008e55 	.word	0x08008e55
 8008e48:	08008ee5 	.word	0x08008ee5
 8008e4c:	08008f75 	.word	0x08008f75
 8008e50:	08009005 	.word	0x08009005
	{
	case north:
		if(Wall[Pos.X][Pos.Y].east == wall && Wall[Pos.X][Pos.Y].west == wall)
 8008e54:	4b92      	ldr	r3, [pc, #584]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	4b91      	ldr	r3, [pc, #580]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4a90      	ldr	r2, [pc, #576]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008e62:	0103      	lsls	r3, r0, #4
 8008e64:	440b      	add	r3, r1
 8008e66:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008e6a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d111      	bne.n	8008e98 <GetWallCtrlDirection+0x68>
 8008e74:	4b8a      	ldr	r3, [pc, #552]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	4b89      	ldr	r3, [pc, #548]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e7c:	785b      	ldrb	r3, [r3, #1]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	4a88      	ldr	r2, [pc, #544]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008e82:	0103      	lsls	r3, r0, #4
 8008e84:	440b      	add	r3, r1
 8008e86:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008e8a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d101      	bne.n	8008e98 <GetWallCtrlDirection+0x68>
		{
			return D_WALL_PID;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e0fe      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall)
 8008e98:	4b81      	ldr	r3, [pc, #516]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	4b80      	ldr	r3, [pc, #512]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008ea0:	785b      	ldrb	r3, [r3, #1]
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4a7f      	ldr	r2, [pc, #508]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008ea6:	0103      	lsls	r3, r0, #4
 8008ea8:	440b      	add	r3, r1
 8008eaa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008eae:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d101      	bne.n	8008ebc <GetWallCtrlDirection+0x8c>
		{
			return R_WALL_PID;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e0ec      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].west == wall)
 8008ebc:	4b78      	ldr	r3, [pc, #480]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	4b77      	ldr	r3, [pc, #476]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008ec4:	785b      	ldrb	r3, [r3, #1]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4a76      	ldr	r2, [pc, #472]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008eca:	0103      	lsls	r3, r0, #4
 8008ecc:	440b      	add	r3, r1
 8008ece:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008ed2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d101      	bne.n	8008ee0 <GetWallCtrlDirection+0xb0>
		{
			return L_WALL_PID;
 8008edc:	2302      	movs	r3, #2
 8008ede:	e0da      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8008ee0:	2306      	movs	r3, #6
 8008ee2:	e0d8      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		break;

	case east:
		if(Wall[Pos.X][Pos.Y].north == wall && Wall[Pos.X][Pos.Y].south == wall)//south)
 8008ee4:	4b6e      	ldr	r3, [pc, #440]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	4b6d      	ldr	r3, [pc, #436]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008eec:	785b      	ldrb	r3, [r3, #1]
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4a6c      	ldr	r2, [pc, #432]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008ef2:	0103      	lsls	r3, r0, #4
 8008ef4:	440b      	add	r3, r1
 8008ef6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008efa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d111      	bne.n	8008f28 <GetWallCtrlDirection+0xf8>
 8008f04:	4b66      	ldr	r3, [pc, #408]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	4b65      	ldr	r3, [pc, #404]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	4a64      	ldr	r2, [pc, #400]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008f12:	0103      	lsls	r3, r0, #4
 8008f14:	440b      	add	r3, r1
 8008f16:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f1a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d101      	bne.n	8008f28 <GetWallCtrlDirection+0xf8>
		{
			return D_WALL_PID;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e0b6      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].north == wall)
 8008f28:	4b5d      	ldr	r3, [pc, #372]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	4b5c      	ldr	r3, [pc, #368]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f30:	785b      	ldrb	r3, [r3, #1]
 8008f32:	4619      	mov	r1, r3
 8008f34:	4a5b      	ldr	r2, [pc, #364]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008f36:	0103      	lsls	r3, r0, #4
 8008f38:	440b      	add	r3, r1
 8008f3a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f3e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d101      	bne.n	8008f4c <GetWallCtrlDirection+0x11c>
		{
			return L_WALL_PID;
 8008f48:	2302      	movs	r3, #2
 8008f4a:	e0a4      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].south == wall)
 8008f4c:	4b54      	ldr	r3, [pc, #336]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	4618      	mov	r0, r3
 8008f52:	4b53      	ldr	r3, [pc, #332]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f54:	785b      	ldrb	r3, [r3, #1]
 8008f56:	4619      	mov	r1, r3
 8008f58:	4a52      	ldr	r2, [pc, #328]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008f5a:	0103      	lsls	r3, r0, #4
 8008f5c:	440b      	add	r3, r1
 8008f5e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f62:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d101      	bne.n	8008f70 <GetWallCtrlDirection+0x140>
		{
			return R_WALL_PID;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e092      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8008f70:	2306      	movs	r3, #6
 8008f72:	e090      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		break;
	case south:
		if(Wall[Pos.X][Pos.Y].east == wall && Wall[Pos.X][Pos.Y].west == wall)
 8008f74:	4b4a      	ldr	r3, [pc, #296]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	4b49      	ldr	r3, [pc, #292]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f7c:	785b      	ldrb	r3, [r3, #1]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4a48      	ldr	r2, [pc, #288]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008f82:	0103      	lsls	r3, r0, #4
 8008f84:	440b      	add	r3, r1
 8008f86:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f8a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d111      	bne.n	8008fb8 <GetWallCtrlDirection+0x188>
 8008f94:	4b42      	ldr	r3, [pc, #264]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	4b41      	ldr	r3, [pc, #260]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008f9c:	785b      	ldrb	r3, [r3, #1]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4a40      	ldr	r2, [pc, #256]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008fa2:	0103      	lsls	r3, r0, #4
 8008fa4:	440b      	add	r3, r1
 8008fa6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008faa:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d101      	bne.n	8008fb8 <GetWallCtrlDirection+0x188>
		{
			return D_WALL_PID;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e06e      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall)
 8008fb8:	4b39      	ldr	r3, [pc, #228]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	4b38      	ldr	r3, [pc, #224]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008fc0:	785b      	ldrb	r3, [r3, #1]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	4a37      	ldr	r2, [pc, #220]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008fc6:	0103      	lsls	r3, r0, #4
 8008fc8:	440b      	add	r3, r1
 8008fca:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008fce:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d101      	bne.n	8008fdc <GetWallCtrlDirection+0x1ac>
		{
			return L_WALL_PID;
 8008fd8:	2302      	movs	r3, #2
 8008fda:	e05c      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if(Wall[Pos.X][Pos.Y].west == wall)
 8008fdc:	4b30      	ldr	r3, [pc, #192]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	4b2f      	ldr	r3, [pc, #188]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8008fe4:	785b      	ldrb	r3, [r3, #1]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	4a2e      	ldr	r2, [pc, #184]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8008fea:	0103      	lsls	r3, r0, #4
 8008fec:	440b      	add	r3, r1
 8008fee:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008ff2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d101      	bne.n	8009000 <GetWallCtrlDirection+0x1d0>
		{
			return R_WALL_PID;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e04a      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8009000:	2306      	movs	r3, #6
 8009002:	e048      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		break;
	case west:

		if ( Wall[Pos.X][Pos.Y].north == wall && Wall[Pos.X][Pos.Y].south == wall)//.westになってた。あと == south )で意味わからない処理に。
 8009004:	4b26      	ldr	r3, [pc, #152]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	4618      	mov	r0, r3
 800900a:	4b25      	ldr	r3, [pc, #148]	; (80090a0 <GetWallCtrlDirection+0x270>)
 800900c:	785b      	ldrb	r3, [r3, #1]
 800900e:	4619      	mov	r1, r3
 8009010:	4a24      	ldr	r2, [pc, #144]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8009012:	0103      	lsls	r3, r0, #4
 8009014:	440b      	add	r3, r1
 8009016:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800901a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b01      	cmp	r3, #1
 8009022:	d111      	bne.n	8009048 <GetWallCtrlDirection+0x218>
 8009024:	4b1e      	ldr	r3, [pc, #120]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	4618      	mov	r0, r3
 800902a:	4b1d      	ldr	r3, [pc, #116]	; (80090a0 <GetWallCtrlDirection+0x270>)
 800902c:	785b      	ldrb	r3, [r3, #1]
 800902e:	4619      	mov	r1, r3
 8009030:	4a1c      	ldr	r2, [pc, #112]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8009032:	0103      	lsls	r3, r0, #4
 8009034:	440b      	add	r3, r1
 8009036:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800903a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b01      	cmp	r3, #1
 8009042:	d101      	bne.n	8009048 <GetWallCtrlDirection+0x218>
		{
			return D_WALL_PID;
 8009044:	2301      	movs	r3, #1
 8009046:	e026      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if ( Wall[Pos.X][Pos.Y].north == wall )
 8009048:	4b15      	ldr	r3, [pc, #84]	; (80090a0 <GetWallCtrlDirection+0x270>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	4618      	mov	r0, r3
 800904e:	4b14      	ldr	r3, [pc, #80]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8009050:	785b      	ldrb	r3, [r3, #1]
 8009052:	4619      	mov	r1, r3
 8009054:	4a13      	ldr	r2, [pc, #76]	; (80090a4 <GetWallCtrlDirection+0x274>)
 8009056:	0103      	lsls	r3, r0, #4
 8009058:	440b      	add	r3, r1
 800905a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800905e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b01      	cmp	r3, #1
 8009066:	d101      	bne.n	800906c <GetWallCtrlDirection+0x23c>
		{
			return R_WALL_PID;
 8009068:	2303      	movs	r3, #3
 800906a:	e014      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else if ( Wall[Pos.X][Pos.Y].south == wall )
 800906c:	4b0c      	ldr	r3, [pc, #48]	; (80090a0 <GetWallCtrlDirection+0x270>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	4618      	mov	r0, r3
 8009072:	4b0b      	ldr	r3, [pc, #44]	; (80090a0 <GetWallCtrlDirection+0x270>)
 8009074:	785b      	ldrb	r3, [r3, #1]
 8009076:	4619      	mov	r1, r3
 8009078:	4a0a      	ldr	r2, [pc, #40]	; (80090a4 <GetWallCtrlDirection+0x274>)
 800907a:	0103      	lsls	r3, r0, #4
 800907c:	440b      	add	r3, r1
 800907e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009082:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b01      	cmp	r3, #1
 800908a:	d101      	bne.n	8009090 <GetWallCtrlDirection+0x260>
		{
			return L_WALL_PID;
 800908c:	2302      	movs	r3, #2
 800908e:	e002      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		else
		{
			return N_WALL_PID;
 8009090:	2306      	movs	r3, #6
 8009092:	e000      	b.n	8009096 <GetWallCtrlDirection+0x266>
		}
		break;

	default:
		//斜め方向
		return N_WALL_PID;
 8009094:	2306      	movs	r3, #6
		break;
	}

}
 8009096:	4618      	mov	r0, r3
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	20000000 	.word	0x20000000
 80090a4:	20010398 	.word	0x20010398

080090a8 <ChangeCardinal>:

void ChangeCardinal()
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
	switch(Pos.Dir)
 80090ac:	4b11      	ldr	r3, [pc, #68]	; (80090f4 <ChangeCardinal+0x4c>)
 80090ae:	789b      	ldrb	r3, [r3, #2]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d012      	beq.n	80090da <ChangeCardinal+0x32>
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	d009      	beq.n	80090cc <ChangeCardinal+0x24>
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d000      	beq.n	80090be <ChangeCardinal+0x16>
		break;
	case back:
		Pos.Car += 2;
		break;
	default:
		break;
 80090bc:	e014      	b.n	80090e8 <ChangeCardinal+0x40>
		Pos.Car ++;
 80090be:	4b0d      	ldr	r3, [pc, #52]	; (80090f4 <ChangeCardinal+0x4c>)
 80090c0:	78db      	ldrb	r3, [r3, #3]
 80090c2:	3301      	adds	r3, #1
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	4b0b      	ldr	r3, [pc, #44]	; (80090f4 <ChangeCardinal+0x4c>)
 80090c8:	70da      	strb	r2, [r3, #3]
		break;
 80090ca:	e00d      	b.n	80090e8 <ChangeCardinal+0x40>
		Pos.Car --;
 80090cc:	4b09      	ldr	r3, [pc, #36]	; (80090f4 <ChangeCardinal+0x4c>)
 80090ce:	78db      	ldrb	r3, [r3, #3]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	b2da      	uxtb	r2, r3
 80090d4:	4b07      	ldr	r3, [pc, #28]	; (80090f4 <ChangeCardinal+0x4c>)
 80090d6:	70da      	strb	r2, [r3, #3]
		break;
 80090d8:	e006      	b.n	80090e8 <ChangeCardinal+0x40>
		Pos.Car += 2;
 80090da:	4b06      	ldr	r3, [pc, #24]	; (80090f4 <ChangeCardinal+0x4c>)
 80090dc:	78db      	ldrb	r3, [r3, #3]
 80090de:	3302      	adds	r3, #2
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	4b04      	ldr	r3, [pc, #16]	; (80090f4 <ChangeCardinal+0x4c>)
 80090e4:	70da      	strb	r2, [r3, #3]
		break;
 80090e6:	bf00      	nop
	}

}
 80090e8:	bf00      	nop
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20000000 	.word	0x20000000

080090f8 <WallSafe>:
	Pos.Car = car;
	Pos.Dir = dir;
	Pos.WallSaf = safe_or_warn;
}
void WallSafe()
{
 80090f8:	b480      	push	{r7}
 80090fa:	af00      	add	r7, sp, #0
	Pos.WallSaf = wall_safe;
 80090fc:	4b03      	ldr	r3, [pc, #12]	; (800910c <WallSafe+0x14>)
 80090fe:	2200      	movs	r2, #0
 8009100:	715a      	strb	r2, [r3, #5]
}
 8009102:	bf00      	nop
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	20000000 	.word	0x20000000

08009110 <WallWarn>:
void WallWarn()
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
	Pos.WallSaf = wall_warn;
 8009114:	4b03      	ldr	r3, [pc, #12]	; (8009124 <WallWarn+0x14>)
 8009116:	2201      	movs	r2, #1
 8009118:	715a      	strb	r2, [r3, #5]
}
 800911a:	bf00      	nop
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr
 8009124:	20000000 	.word	0x20000000

08009128 <ControlWall>:
void ControlWall()
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
	//直進中で
		//端の座標なら確実に型壁制御
	//斜め走行は別でアクションを定義

	//横壁制御
	int wall_ctrl_dir = GetWallCtrlDirection();	//次の座標のも返してみて、できれば連続で制御をする。
 800912e:	f7ff fe7f 	bl	8008e30 <GetWallCtrlDirection>
 8009132:	6078      	str	r0, [r7, #4]
	//割り込み中に呼ぶかアクション中に呼ぶか。アクション中の方が座標と壁の状態が確実。いや、判定が遅れると嫌だからやっぱり割り込み。移動量はflagで。

	//PIDChangeFlagStraight(N_WALL_PID);//直進flagはどれでも無い状態。制御なし。
	PIDChangeFlag(L_WALL_PID, 0);
 8009134:	2100      	movs	r1, #0
 8009136:	2002      	movs	r0, #2
 8009138:	f006 fd5e 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800913c:	2100      	movs	r1, #0
 800913e:	2003      	movs	r0, #3
 8009140:	f006 fd5a 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 8009144:	2100      	movs	r1, #0
 8009146:	2001      	movs	r0, #1
 8009148:	f006 fd56 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag( A_VELO_PID, 0);
 800914c:	2100      	movs	r1, #0
 800914e:	2000      	movs	r0, #0
 8009150:	f006 fd52 	bl	800fbf8 <PIDChangeFlag>
	//アクションごとに壁制御を記述した方がいいかも

	//アクション、方向、壁安全。

	//減速の時、壁の状態
	if(Pos.Dir == front)		//区画の区切りで前方に進むと決めたあと、動作としては加速か、straight。初期状態はwaitから加速へ
 8009154:	4b7c      	ldr	r3, [pc, #496]	; (8009348 <ControlWall+0x220>)
 8009156:	789b      	ldrb	r3, [r3, #2]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d13f      	bne.n	80091dc <ControlWall+0xb4>
	{
		switch(Pos.Act)
 800915c:	4b7a      	ldr	r3, [pc, #488]	; (8009348 <ControlWall+0x220>)
 800915e:	791b      	ldrb	r3, [r3, #4]
 8009160:	2b05      	cmp	r3, #5
 8009162:	f200 80ec 	bhi.w	800933e <ControlWall+0x216>
 8009166:	a201      	add	r2, pc, #4	; (adr r2, 800916c <ControlWall+0x44>)
 8009168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916c:	08009185 	.word	0x08009185
 8009170:	0800933f 	.word	0x0800933f
 8009174:	0800933f 	.word	0x0800933f
 8009178:	0800933f 	.word	0x0800933f
 800917c:	0800933f 	.word	0x0800933f
 8009180:	0800918f 	.word	0x0800918f
		{
		case accel:
			PIDChangeFlag( A_VELO_PID , 1);
 8009184:	2101      	movs	r1, #1
 8009186:	2000      	movs	r0, #0
 8009188:	f006 fd36 	bl	800fbf8 <PIDChangeFlag>
			//一つ先の区画がわかっていて加速したいときに
			break;
 800918c:	e0d8      	b.n	8009340 <ControlWall+0x218>
		case decel:
			//減速はないけど一応今後のため。
			break;
		case straight:
			//3/3おっけーかも
			if( (wall_ctrl_dir != N_WALL_PID)  && (AddVelocity == 0) )	//左右どちらかに壁があるとき
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b06      	cmp	r3, #6
 8009192:	d01d      	beq.n	80091d0 <ControlWall+0xa8>
 8009194:	4b6d      	ldr	r3, [pc, #436]	; (800934c <ControlWall+0x224>)
 8009196:	edd3 7a00 	vldr	s15, [r3]
 800919a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800919e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091a2:	d115      	bne.n	80091d0 <ControlWall+0xa8>
			{
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80091a4:	4b68      	ldr	r3, [pc, #416]	; (8009348 <ControlWall+0x220>)
 80091a6:	795b      	ldrb	r3, [r3, #5]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d108      	bne.n	80091be <ControlWall+0x96>
				{
					PIDChangeFlag(wall_ctrl_dir, 1);
 80091ac:	2101      	movs	r1, #1
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f006 fd22 	bl	800fbf8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 80091b4:	2100      	movs	r1, #0
 80091b6:	2000      	movs	r0, #0
 80091b8:	f006 fd1e 	bl	800fbf8 <PIDChangeFlag>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80091bc:	e00d      	b.n	80091da <ControlWall+0xb2>
				}
				else
				{
					PIDChangeFlag(wall_ctrl_dir, 0);
 80091be:	2100      	movs	r1, #0
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f006 fd19 	bl	800fbf8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 80091c6:	2101      	movs	r1, #1
 80091c8:	2000      	movs	r0, #0
 80091ca:	f006 fd15 	bl	800fbf8 <PIDChangeFlag>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80091ce:	e004      	b.n	80091da <ControlWall+0xb2>
				}
			}
			else
			{
				PIDChangeFlag( A_VELO_PID , 1);
 80091d0:	2101      	movs	r1, #1
 80091d2:	2000      	movs	r0, #0
 80091d4:	f006 fd10 	bl	800fbf8 <PIDChangeFlag>
			}
			break;
 80091d8:	e0b2      	b.n	8009340 <ControlWall+0x218>
 80091da:	e0b1      	b.n	8009340 <ControlWall+0x218>
		//移動量がN割りのフラグ。直進は、Uターンの加減速を含まない、ただの一区画直進なので、移動量判定でできる。と思ったら分けてた?
		//Actはstraight


	}
	else if(Pos.Dir == left)	//左に行くとき
 80091dc:	4b5a      	ldr	r3, [pc, #360]	; (8009348 <ControlWall+0x220>)
 80091de:	789b      	ldrb	r3, [r3, #2]
 80091e0:	2b03      	cmp	r3, #3
 80091e2:	d140      	bne.n	8009266 <ControlWall+0x13e>
	{
		if(Pos.Act == slalom)
 80091e4:	4b58      	ldr	r3, [pc, #352]	; (8009348 <ControlWall+0x220>)
 80091e6:	791b      	ldrb	r3, [r3, #4]
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d108      	bne.n	80091fe <ControlWall+0xd6>
		{
//			PIDChangeFlag(L_WALL_PID, 0);
//			PIDChangeFlag(R_WALL_PID, 0);
//			PIDChangeFlag(D_WALL_PID, 0);
//			PIDChangeFlag( A_VELO_PID, 0);
			TargetAngularV = 0;
 80091ec:	4b58      	ldr	r3, [pc, #352]	; (8009350 <ControlWall+0x228>)
 80091ee:	f04f 0200 	mov.w	r2, #0
 80091f2:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 80091f4:	4b57      	ldr	r3, [pc, #348]	; (8009354 <ControlWall+0x22c>)
 80091f6:	f04f 0200 	mov.w	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]





}
 80091fc:	e0a0      	b.n	8009340 <ControlWall+0x218>
		else if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 80091fe:	4b52      	ldr	r3, [pc, #328]	; (8009348 <ControlWall+0x220>)
 8009200:	791b      	ldrb	r3, [r3, #4]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d11d      	bne.n	8009242 <ControlWall+0x11a>
			if( wall_ctrl_dir != N_WALL_PID )	//左右どちらかに壁があるとき
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2b06      	cmp	r3, #6
 800920a:	d015      	beq.n	8009238 <ControlWall+0x110>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 800920c:	4b4e      	ldr	r3, [pc, #312]	; (8009348 <ControlWall+0x220>)
 800920e:	795b      	ldrb	r3, [r3, #5]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d108      	bne.n	8009226 <ControlWall+0xfe>
					PIDChangeFlag(wall_ctrl_dir, 1);
 8009214:	2101      	movs	r1, #1
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f006 fcee 	bl	800fbf8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 800921c:	2100      	movs	r1, #0
 800921e:	2000      	movs	r0, #0
 8009220:	f006 fcea 	bl	800fbf8 <PIDChangeFlag>
}
 8009224:	e08c      	b.n	8009340 <ControlWall+0x218>
					PIDChangeFlag(wall_ctrl_dir, 0);
 8009226:	2100      	movs	r1, #0
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f006 fce5 	bl	800fbf8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 800922e:	2101      	movs	r1, #1
 8009230:	2000      	movs	r0, #0
 8009232:	f006 fce1 	bl	800fbf8 <PIDChangeFlag>
}
 8009236:	e083      	b.n	8009340 <ControlWall+0x218>
				PIDChangeFlag( A_VELO_PID , 1);
 8009238:	2101      	movs	r1, #1
 800923a:	2000      	movs	r0, #0
 800923c:	f006 fcdc 	bl	800fbf8 <PIDChangeFlag>
}
 8009240:	e07e      	b.n	8009340 <ControlWall+0x218>
		else if(Pos.Act == accel)
 8009242:	4b41      	ldr	r3, [pc, #260]	; (8009348 <ControlWall+0x220>)
 8009244:	791b      	ldrb	r3, [r3, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d104      	bne.n	8009254 <ControlWall+0x12c>
			PIDChangeFlag( A_VELO_PID , 1);
 800924a:	2101      	movs	r1, #1
 800924c:	2000      	movs	r0, #0
 800924e:	f006 fcd3 	bl	800fbf8 <PIDChangeFlag>
}
 8009252:	e075      	b.n	8009340 <ControlWall+0x218>
		else if(Pos.Act == rotate)
 8009254:	4b3c      	ldr	r3, [pc, #240]	; (8009348 <ControlWall+0x220>)
 8009256:	791b      	ldrb	r3, [r3, #4]
 8009258:	2b03      	cmp	r3, #3
 800925a:	d171      	bne.n	8009340 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 0);
 800925c:	2100      	movs	r1, #0
 800925e:	2000      	movs	r0, #0
 8009260:	f006 fcca 	bl	800fbf8 <PIDChangeFlag>
}
 8009264:	e06c      	b.n	8009340 <ControlWall+0x218>
	else if(Pos.Dir == right)
 8009266:	4b38      	ldr	r3, [pc, #224]	; (8009348 <ControlWall+0x220>)
 8009268:	789b      	ldrb	r3, [r3, #2]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d140      	bne.n	80092f0 <ControlWall+0x1c8>
		if(Pos.Act == slalom)
 800926e:	4b36      	ldr	r3, [pc, #216]	; (8009348 <ControlWall+0x220>)
 8009270:	791b      	ldrb	r3, [r3, #4]
 8009272:	2b02      	cmp	r3, #2
 8009274:	d108      	bne.n	8009288 <ControlWall+0x160>
			TargetAngularV = 0;
 8009276:	4b36      	ldr	r3, [pc, #216]	; (8009350 <ControlWall+0x228>)
 8009278:	f04f 0200 	mov.w	r2, #0
 800927c:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 800927e:	4b35      	ldr	r3, [pc, #212]	; (8009354 <ControlWall+0x22c>)
 8009280:	f04f 0200 	mov.w	r2, #0
 8009284:	601a      	str	r2, [r3, #0]
}
 8009286:	e05b      	b.n	8009340 <ControlWall+0x218>
		else if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 8009288:	4b2f      	ldr	r3, [pc, #188]	; (8009348 <ControlWall+0x220>)
 800928a:	791b      	ldrb	r3, [r3, #4]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d11d      	bne.n	80092cc <ControlWall+0x1a4>
			if( wall_ctrl_dir != N_WALL_PID )	//左右どちらかに壁があるとき
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b06      	cmp	r3, #6
 8009294:	d015      	beq.n	80092c2 <ControlWall+0x19a>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 8009296:	4b2c      	ldr	r3, [pc, #176]	; (8009348 <ControlWall+0x220>)
 8009298:	795b      	ldrb	r3, [r3, #5]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d108      	bne.n	80092b0 <ControlWall+0x188>
					PIDChangeFlag(wall_ctrl_dir, 1);
 800929e:	2101      	movs	r1, #1
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f006 fca9 	bl	800fbf8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 80092a6:	2100      	movs	r1, #0
 80092a8:	2000      	movs	r0, #0
 80092aa:	f006 fca5 	bl	800fbf8 <PIDChangeFlag>
}
 80092ae:	e047      	b.n	8009340 <ControlWall+0x218>
					PIDChangeFlag(wall_ctrl_dir, 0);
 80092b0:	2100      	movs	r1, #0
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f006 fca0 	bl	800fbf8 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 80092b8:	2101      	movs	r1, #1
 80092ba:	2000      	movs	r0, #0
 80092bc:	f006 fc9c 	bl	800fbf8 <PIDChangeFlag>
}
 80092c0:	e03e      	b.n	8009340 <ControlWall+0x218>
				PIDChangeFlag( A_VELO_PID , 1);
 80092c2:	2101      	movs	r1, #1
 80092c4:	2000      	movs	r0, #0
 80092c6:	f006 fc97 	bl	800fbf8 <PIDChangeFlag>
}
 80092ca:	e039      	b.n	8009340 <ControlWall+0x218>
		else if(Pos.Act == accel)
 80092cc:	4b1e      	ldr	r3, [pc, #120]	; (8009348 <ControlWall+0x220>)
 80092ce:	791b      	ldrb	r3, [r3, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d104      	bne.n	80092de <ControlWall+0x1b6>
			PIDChangeFlag( A_VELO_PID , 1);
 80092d4:	2101      	movs	r1, #1
 80092d6:	2000      	movs	r0, #0
 80092d8:	f006 fc8e 	bl	800fbf8 <PIDChangeFlag>
}
 80092dc:	e030      	b.n	8009340 <ControlWall+0x218>
		else if(Pos.Act == rotate)
 80092de:	4b1a      	ldr	r3, [pc, #104]	; (8009348 <ControlWall+0x220>)
 80092e0:	791b      	ldrb	r3, [r3, #4]
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d12c      	bne.n	8009340 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 0);
 80092e6:	2100      	movs	r1, #0
 80092e8:	2000      	movs	r0, #0
 80092ea:	f006 fc85 	bl	800fbf8 <PIDChangeFlag>
}
 80092ee:	e027      	b.n	8009340 <ControlWall+0x218>
	else if(Pos.Dir == back)
 80092f0:	4b15      	ldr	r3, [pc, #84]	; (8009348 <ControlWall+0x220>)
 80092f2:	789b      	ldrb	r3, [r3, #2]
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d123      	bne.n	8009340 <ControlWall+0x218>
		if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 80092f8:	4b13      	ldr	r3, [pc, #76]	; (8009348 <ControlWall+0x220>)
 80092fa:	791b      	ldrb	r3, [r3, #4]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d115      	bne.n	800932c <ControlWall+0x204>
			if(Pos.WallSaf == wall_safe)	//フラグ作る。前に壁が無いパターンの減速は、後半の壁の状態の影響を受けることがある。35*0.5mmが目安か。
 8009300:	4b11      	ldr	r3, [pc, #68]	; (8009348 <ControlWall+0x220>)
 8009302:	795b      	ldrb	r3, [r3, #5]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d108      	bne.n	800931a <ControlWall+0x1f2>
				PIDChangeFlag(wall_ctrl_dir , 1);
 8009308:	2101      	movs	r1, #1
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f006 fc74 	bl	800fbf8 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID, 0);
 8009310:	2100      	movs	r1, #0
 8009312:	2000      	movs	r0, #0
 8009314:	f006 fc70 	bl	800fbf8 <PIDChangeFlag>
}
 8009318:	e012      	b.n	8009340 <ControlWall+0x218>
				PIDChangeFlag(wall_ctrl_dir, 0);
 800931a:	2100      	movs	r1, #0
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f006 fc6b 	bl	800fbf8 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID , 1);
 8009322:	2101      	movs	r1, #1
 8009324:	2000      	movs	r0, #0
 8009326:	f006 fc67 	bl	800fbf8 <PIDChangeFlag>
}
 800932a:	e009      	b.n	8009340 <ControlWall+0x218>
		else if(Pos.Act == accel)
 800932c:	4b06      	ldr	r3, [pc, #24]	; (8009348 <ControlWall+0x220>)
 800932e:	791b      	ldrb	r3, [r3, #4]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d105      	bne.n	8009340 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 1);
 8009334:	2101      	movs	r1, #1
 8009336:	2000      	movs	r0, #0
 8009338:	f006 fc5e 	bl	800fbf8 <PIDChangeFlag>
}
 800933c:	e000      	b.n	8009340 <ControlWall+0x218>
			break;
 800933e:	bf00      	nop
}
 8009340:	bf00      	nop
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	20000000 	.word	0x20000000
 800934c:	2000fef4 	.word	0x2000fef4
 8009350:	2000fef8 	.word	0x2000fef8
 8009354:	2000fc2c 	.word	0x2000fc2c

08009358 <WaitStopAndReset>:
//	KeepCounter[LEFT] = INITIAL_PULSE;
//	KeepCounter[RIGHT] = INITIAL_PULSE;
//}

void WaitStopAndReset()
{
 8009358:	b580      	push	{r7, lr}
 800935a:	af00      	add	r7, sp, #0
	Pos.Act = Wait;
 800935c:	4b17      	ldr	r3, [pc, #92]	; (80093bc <WaitStopAndReset+0x64>)
 800935e:	2204      	movs	r2, #4
 8009360:	711a      	strb	r2, [r3, #4]
	ControlWall();//ベイブレード対策
 8009362:	f7ff fee1 	bl	8009128 <ControlWall>
	do
	{

		//壁制御の更新
		TargetVelocity[BODY] = 0;
 8009366:	4b16      	ldr	r3, [pc, #88]	; (80093c0 <WaitStopAndReset+0x68>)
 8009368:	f04f 0200 	mov.w	r2, #0
 800936c:	609a      	str	r2, [r3, #8]
		Acceleration = 0;
 800936e:	4b15      	ldr	r3, [pc, #84]	; (80093c4 <WaitStopAndReset+0x6c>)
 8009370:	f04f 0200 	mov.w	r2, #0
 8009374:	601a      	str	r2, [r3, #0]
		//PIDChangeFlag( D_, 0);
		TargetAngularV = 0;
 8009376:	4b14      	ldr	r3, [pc, #80]	; (80093c8 <WaitStopAndReset+0x70>)
 8009378:	f04f 0200 	mov.w	r2, #0
 800937c:	601a      	str	r2, [r3, #0]
		AngularAcceleration = 0;
 800937e:	4b13      	ldr	r3, [pc, #76]	; (80093cc <WaitStopAndReset+0x74>)
 8009380:	f04f 0200 	mov.w	r2, #0
 8009384:	601a      	str	r2, [r3, #0]
		//AngularV = 0;
		if(CurrentVelocity[LEFT] > 500)
 8009386:	4b12      	ldr	r3, [pc, #72]	; (80093d0 <WaitStopAndReset+0x78>)
 8009388:	edd3 7a00 	vldr	s15, [r3]
 800938c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80093d4 <WaitStopAndReset+0x7c>
 8009390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009398:	dd02      	ble.n	80093a0 <WaitStopAndReset+0x48>
			printf("回転停止中\r\n");
 800939a:	480f      	ldr	r0, [pc, #60]	; (80093d8 <WaitStopAndReset+0x80>)
 800939c:	f00c fe34 	bl	8016008 <puts>

	}while(CurrentVelocity[BODY] != 0);
 80093a0:	4b0b      	ldr	r3, [pc, #44]	; (80093d0 <WaitStopAndReset+0x78>)
 80093a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80093a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80093aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ae:	d1da      	bne.n	8009366 <WaitStopAndReset+0xe>
	HAL_Delay(100);
 80093b0:	2064      	movs	r0, #100	; 0x64
 80093b2:	f006 ff47 	bl	8010244 <HAL_Delay>
}
 80093b6:	bf00      	nop
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20000000 	.word	0x20000000
 80093c0:	2000fee8 	.word	0x2000fee8
 80093c4:	2000fc28 	.word	0x2000fc28
 80093c8:	2000fef8 	.word	0x2000fef8
 80093cc:	2000fc2c 	.word	0x2000fc2c
 80093d0:	2000ff24 	.word	0x2000ff24
 80093d4:	43fa0000 	.word	0x43fa0000
 80093d8:	0801a2d8 	.word	0x0801a2d8
 80093dc:	00000000 	.word	0x00000000

080093e0 <Rotate>:
	//向いた方角を変える
	ChangeCardinal();
	//printf("回転終了\r\n");
}
void Rotate(float deg, float ang_v)
{
 80093e0:	b590      	push	{r4, r7, lr}
 80093e2:	b08d      	sub	sp, #52	; 0x34
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80093ea:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = rotate;
 80093ee:	4bb2      	ldr	r3, [pc, #712]	; (80096b8 <Rotate+0x2d8>)
 80093f0:	2203      	movs	r2, #3
 80093f2:	711a      	strb	r2, [r3, #4]
	WallWarn();
 80093f4:	f7ff fe8c 	bl	8009110 <WallWarn>
	ControlWall(); //壁の読み間違いによる制御方式選択ミスで角加速から抜け出せないか、角度がリセットされている。
 80093f8:	f7ff fe96 	bl	8009128 <ControlWall>
	TargetAngularV = 0;
 80093fc:	4baf      	ldr	r3, [pc, #700]	; (80096bc <Rotate+0x2dc>)
 80093fe:	f04f 0200 	mov.w	r2, #0
 8009402:	601a      	str	r2, [r3, #0]
	//加速度が一定。角速度が増加。角速度を積分して角度。角速度の式を作り、角速度を積分して角度を求める等式を立てる。
	//Angle = インテグラル(ang_v(t))dt
	//v = v0+at	|	t=v/a	||		ang_v = ang_v0 + ang_accel *t		||	t = ang_v/ang_accel
	//x=0.5*v*v/a	|	a = 0.5*v*v*/x		||		θ=ang_v0*t+0.5*ang_v^2/ang_accel	||	ang_accel =
	//加速度(mm/((ms)^2)) =  割り込み周期(1ms)*到達速度*到達速度(((mm/s)^2)) /(2*移動距離) x = v0t + 0.5at^2 →	a=2*(x-v0*t)/t^2 	a = t*vv/(2*x)
	float accel_deg = deg*30/90;
 8009404:	edd7 7a01 	vldr	s15, [r7, #4]
 8009408:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800940c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009410:	eddf 6aab 	vldr	s13, [pc, #684]	; 80096c0 <Rotate+0x2e0>
 8009414:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009418:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float const_deg = deg*30/90;
 800941c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009420:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8009424:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009428:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80096c0 <Rotate+0x2e0>
 800942c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009430:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float decel_deg = deg*30/90;
 8009434:	edd7 7a01 	vldr	s15, [r7, #4]
 8009438:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800943c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009440:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80096c0 <Rotate+0x2e0>
 8009444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009448:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float angular_acceleration[3] = {
			64*T1*ang_v*ang_v / (2*accel_deg),
 800944c:	edd7 7a00 	vldr	s15, [r7]
 8009450:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80096c4 <Rotate+0x2e4>
 8009454:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009458:	edd7 7a00 	vldr	s15, [r7]
 800945c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009460:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009464:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009468:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float angular_acceleration[3] = {
 800946c:	edc7 7a05 	vstr	s15, [r7, #20]
 8009470:	f04f 0300 	mov.w	r3, #0
 8009474:	61bb      	str	r3, [r7, #24]
			0,
			64*T1*ang_v*ang_v / (2*decel_deg)
 8009476:	edd7 7a00 	vldr	s15, [r7]
 800947a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80096c4 <Rotate+0x2e4>
 800947e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009482:	edd7 7a00 	vldr	s15, [r7]
 8009486:	ee67 6a27 	vmul.f32	s13, s14, s15
 800948a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800948e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009492:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float angular_acceleration[3] = {
 8009496:	edc7 7a07 	vstr	s15, [r7, #28]
	};
	float move_angle[3] = {
			accel_deg * M_PI/ 180, //ラジアンに直してる
 800949a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800949c:	f7fe ff8c 	bl	80083b8 <__aeabi_f2d>
 80094a0:	a383      	add	r3, pc, #524	; (adr r3, 80096b0 <Rotate+0x2d0>)
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	f7fe ffdf 	bl	8008468 <__aeabi_dmul>
 80094aa:	4603      	mov	r3, r0
 80094ac:	460c      	mov	r4, r1
 80094ae:	4618      	mov	r0, r3
 80094b0:	4621      	mov	r1, r4
 80094b2:	f04f 0200 	mov.w	r2, #0
 80094b6:	4b84      	ldr	r3, [pc, #528]	; (80096c8 <Rotate+0x2e8>)
 80094b8:	f7ff f900 	bl	80086bc <__aeabi_ddiv>
 80094bc:	4603      	mov	r3, r0
 80094be:	460c      	mov	r4, r1
 80094c0:	4618      	mov	r0, r3
 80094c2:	4621      	mov	r1, r4
 80094c4:	f7ff fac8 	bl	8008a58 <__aeabi_d2f>
 80094c8:	4603      	mov	r3, r0
	float move_angle[3] = {
 80094ca:	60bb      	str	r3, [r7, #8]
			const_deg * M_PI/ 180,
 80094cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ce:	f7fe ff73 	bl	80083b8 <__aeabi_f2d>
 80094d2:	a377      	add	r3, pc, #476	; (adr r3, 80096b0 <Rotate+0x2d0>)
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	f7fe ffc6 	bl	8008468 <__aeabi_dmul>
 80094dc:	4603      	mov	r3, r0
 80094de:	460c      	mov	r4, r1
 80094e0:	4618      	mov	r0, r3
 80094e2:	4621      	mov	r1, r4
 80094e4:	f04f 0200 	mov.w	r2, #0
 80094e8:	4b77      	ldr	r3, [pc, #476]	; (80096c8 <Rotate+0x2e8>)
 80094ea:	f7ff f8e7 	bl	80086bc <__aeabi_ddiv>
 80094ee:	4603      	mov	r3, r0
 80094f0:	460c      	mov	r4, r1
 80094f2:	4618      	mov	r0, r3
 80094f4:	4621      	mov	r1, r4
 80094f6:	f7ff faaf 	bl	8008a58 <__aeabi_d2f>
 80094fa:	4603      	mov	r3, r0
	float move_angle[3] = {
 80094fc:	60fb      	str	r3, [r7, #12]
			decel_deg * M_PI/ 180,
 80094fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009500:	f7fe ff5a 	bl	80083b8 <__aeabi_f2d>
 8009504:	a36a      	add	r3, pc, #424	; (adr r3, 80096b0 <Rotate+0x2d0>)
 8009506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950a:	f7fe ffad 	bl	8008468 <__aeabi_dmul>
 800950e:	4603      	mov	r3, r0
 8009510:	460c      	mov	r4, r1
 8009512:	4618      	mov	r0, r3
 8009514:	4621      	mov	r1, r4
 8009516:	f04f 0200 	mov.w	r2, #0
 800951a:	4b6b      	ldr	r3, [pc, #428]	; (80096c8 <Rotate+0x2e8>)
 800951c:	f7ff f8ce 	bl	80086bc <__aeabi_ddiv>
 8009520:	4603      	mov	r3, r0
 8009522:	460c      	mov	r4, r1
 8009524:	4618      	mov	r0, r3
 8009526:	4621      	mov	r1, r4
 8009528:	f7ff fa96 	bl	8008a58 <__aeabi_d2f>
 800952c:	4603      	mov	r3, r0
	float move_angle[3] = {
 800952e:	613b      	str	r3, [r7, #16]
		}

	}
#endif

	if( ang_v > 0)	//右回転
 8009530:	edd7 7a00 	vldr	s15, [r7]
 8009534:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953c:	dd57      	ble.n	80095ee <Rotate+0x20e>
	{
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800953e:	ed97 7a02 	vldr	s14, [r7, #8]
 8009542:	4b62      	ldr	r3, [pc, #392]	; (80096cc <Rotate+0x2ec>)
 8009544:	edd3 7a00 	vldr	s15, [r3]
 8009548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800954c:	4b5f      	ldr	r3, [pc, #380]	; (80096cc <Rotate+0x2ec>)
 800954e:	edc3 7a00 	vstr	s15, [r3]

		//ここのwhileが抜けないことがある
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009552:	e002      	b.n	800955a <Rotate+0x17a>
		{
			AngularAcceleration = angular_acceleration[0]; //ここまで
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	4a5e      	ldr	r2, [pc, #376]	; (80096d0 <Rotate+0x2f0>)
 8009558:	6013      	str	r3, [r2, #0]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800955a:	4b5c      	ldr	r3, [pc, #368]	; (80096cc <Rotate+0x2ec>)
 800955c:	ed93 7a00 	vldr	s14, [r3]
 8009560:	4b5c      	ldr	r3, [pc, #368]	; (80096d4 <Rotate+0x2f4>)
 8009562:	edd3 7a00 	vldr	s15, [r3]
 8009566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800956a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956e:	dcf1      	bgt.n	8009554 <Rotate+0x174>
		}
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009570:	ed97 7a03 	vldr	s14, [r7, #12]
 8009574:	4b55      	ldr	r3, [pc, #340]	; (80096cc <Rotate+0x2ec>)
 8009576:	edd3 7a00 	vldr	s15, [r3]
 800957a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800957e:	4b53      	ldr	r3, [pc, #332]	; (80096cc <Rotate+0x2ec>)
 8009580:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle > Angle)
 8009584:	e002      	b.n	800958c <Rotate+0x1ac>
		{
			AngularAcceleration = angular_acceleration[1];//0
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	4a51      	ldr	r2, [pc, #324]	; (80096d0 <Rotate+0x2f0>)
 800958a:	6013      	str	r3, [r2, #0]
		while(TargetAngle > Angle)
 800958c:	4b4f      	ldr	r3, [pc, #316]	; (80096cc <Rotate+0x2ec>)
 800958e:	ed93 7a00 	vldr	s14, [r3]
 8009592:	4b50      	ldr	r3, [pc, #320]	; (80096d4 <Rotate+0x2f4>)
 8009594:	edd3 7a00 	vldr	s15, [r3]
 8009598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800959c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a0:	dcf1      	bgt.n	8009586 <Rotate+0x1a6>
		}
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80095a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80095a6:	4b49      	ldr	r3, [pc, #292]	; (80096cc <Rotate+0x2ec>)
 80095a8:	edd3 7a00 	vldr	s15, [r3]
 80095ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095b0:	4b46      	ldr	r3, [pc, #280]	; (80096cc <Rotate+0x2ec>)
 80095b2:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle > Angle)
 80095b6:	e00e      	b.n	80095d6 <Rotate+0x1f6>
		{
			 AngularAcceleration = -angular_acceleration[2];
 80095b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80095bc:	eef1 7a67 	vneg.f32	s15, s15
 80095c0:	4b43      	ldr	r3, [pc, #268]	; (80096d0 <Rotate+0x2f0>)
 80095c2:	edc3 7a00 	vstr	s15, [r3]
			 if( AngularV <= 0)
 80095c6:	4b44      	ldr	r3, [pc, #272]	; (80096d8 <Rotate+0x2f8>)
 80095c8:	edd3 7a00 	vldr	s15, [r3]
 80095cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d4:	d96a      	bls.n	80096ac <Rotate+0x2cc>
		while(TargetAngle > Angle)
 80095d6:	4b3d      	ldr	r3, [pc, #244]	; (80096cc <Rotate+0x2ec>)
 80095d8:	ed93 7a00 	vldr	s14, [r3]
 80095dc:	4b3d      	ldr	r3, [pc, #244]	; (80096d4 <Rotate+0x2f4>)
 80095de:	edd3 7a00 	vldr	s15, [r3]
 80095e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ea:	dce5      	bgt.n	80095b8 <Rotate+0x1d8>
 80095ec:	e077      	b.n	80096de <Rotate+0x2fe>
				 break;
			 }
		}

	}
	else if( ang_v < 0)
 80095ee:	edd7 7a00 	vldr	s15, [r7]
 80095f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095fa:	d570      	bpl.n	80096de <Rotate+0x2fe>
	{
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80095fc:	4b33      	ldr	r3, [pc, #204]	; (80096cc <Rotate+0x2ec>)
 80095fe:	ed93 7a00 	vldr	s14, [r3]
 8009602:	edd7 7a02 	vldr	s15, [r7, #8]
 8009606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800960a:	4b30      	ldr	r3, [pc, #192]	; (80096cc <Rotate+0x2ec>)
 800960c:	edc3 7a00 	vstr	s15, [r3]

		//ここのwhileが抜けないことがある
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009610:	e006      	b.n	8009620 <Rotate+0x240>
		{
			AngularAcceleration = -angular_acceleration[0]; //ここまで
 8009612:	edd7 7a05 	vldr	s15, [r7, #20]
 8009616:	eef1 7a67 	vneg.f32	s15, s15
 800961a:	4b2d      	ldr	r3, [pc, #180]	; (80096d0 <Rotate+0x2f0>)
 800961c:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009620:	4b2a      	ldr	r3, [pc, #168]	; (80096cc <Rotate+0x2ec>)
 8009622:	ed93 7a00 	vldr	s14, [r3]
 8009626:	4b2b      	ldr	r3, [pc, #172]	; (80096d4 <Rotate+0x2f4>)
 8009628:	edd3 7a00 	vldr	s15, [r3]
 800962c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009634:	d4ed      	bmi.n	8009612 <Rotate+0x232>
		}
		TargetAngle -= move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009636:	4b25      	ldr	r3, [pc, #148]	; (80096cc <Rotate+0x2ec>)
 8009638:	ed93 7a00 	vldr	s14, [r3]
 800963c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009644:	4b21      	ldr	r3, [pc, #132]	; (80096cc <Rotate+0x2ec>)
 8009646:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle < Angle)
 800964a:	e002      	b.n	8009652 <Rotate+0x272>
		{
			AngularAcceleration = angular_acceleration[1];//0
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	4a20      	ldr	r2, [pc, #128]	; (80096d0 <Rotate+0x2f0>)
 8009650:	6013      	str	r3, [r2, #0]
		while(TargetAngle < Angle)
 8009652:	4b1e      	ldr	r3, [pc, #120]	; (80096cc <Rotate+0x2ec>)
 8009654:	ed93 7a00 	vldr	s14, [r3]
 8009658:	4b1e      	ldr	r3, [pc, #120]	; (80096d4 <Rotate+0x2f4>)
 800965a:	edd3 7a00 	vldr	s15, [r3]
 800965e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009666:	d4f1      	bmi.n	800964c <Rotate+0x26c>
		}
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009668:	4b18      	ldr	r3, [pc, #96]	; (80096cc <Rotate+0x2ec>)
 800966a:	ed93 7a00 	vldr	s14, [r3]
 800966e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009676:	4b15      	ldr	r3, [pc, #84]	; (80096cc <Rotate+0x2ec>)
 8009678:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle < Angle)
 800967c:	e00a      	b.n	8009694 <Rotate+0x2b4>
		{
			 AngularAcceleration = angular_acceleration[2];
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	4a13      	ldr	r2, [pc, #76]	; (80096d0 <Rotate+0x2f0>)
 8009682:	6013      	str	r3, [r2, #0]
			 if( AngularV >= 0)
 8009684:	4b14      	ldr	r3, [pc, #80]	; (80096d8 <Rotate+0x2f8>)
 8009686:	edd3 7a00 	vldr	s15, [r3]
 800968a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800968e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009692:	da23      	bge.n	80096dc <Rotate+0x2fc>
		while(TargetAngle < Angle)
 8009694:	4b0d      	ldr	r3, [pc, #52]	; (80096cc <Rotate+0x2ec>)
 8009696:	ed93 7a00 	vldr	s14, [r3]
 800969a:	4b0e      	ldr	r3, [pc, #56]	; (80096d4 <Rotate+0x2f4>)
 800969c:	edd3 7a00 	vldr	s15, [r3]
 80096a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80096a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a8:	d4e9      	bmi.n	800967e <Rotate+0x29e>
 80096aa:	e018      	b.n	80096de <Rotate+0x2fe>
				 break;
 80096ac:	bf00      	nop
 80096ae:	e016      	b.n	80096de <Rotate+0x2fe>
 80096b0:	54442d18 	.word	0x54442d18
 80096b4:	400921fb 	.word	0x400921fb
 80096b8:	20000000 	.word	0x20000000
 80096bc:	2000fef8 	.word	0x2000fef8
 80096c0:	42b40000 	.word	0x42b40000
 80096c4:	3d83126f 	.word	0x3d83126f
 80096c8:	40668000 	.word	0x40668000
 80096cc:	2000ff14 	.word	0x2000ff14
 80096d0:	2000fc2c 	.word	0x2000fc2c
 80096d4:	2000fc24 	.word	0x2000fc24
 80096d8:	2000fc20 	.word	0x2000fc20
			 {
			 		break;
 80096dc:	bf00      	nop
			 }
		}

	}
	AngularAcceleration = 0;
 80096de:	4b32      	ldr	r3, [pc, #200]	; (80097a8 <Rotate+0x3c8>)
 80096e0:	f04f 0200 	mov.w	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]
	//TargetAngularV = 0;
	//printf("加速後の角速度 : %f\r\n",AngularV);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",AngularAcceleration);

	WaitStopAndReset();
 80096e6:	f7ff fe37 	bl	8009358 <WaitStopAndReset>
	ControlWall();
 80096ea:	f7ff fd1d 	bl	8009128 <ControlWall>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 80096ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80096f2:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80097ac <Rotate+0x3cc>
 80096f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80096fa:	ee16 0a90 	vmov	r0, s13
 80096fe:	f7fe fe5b 	bl	80083b8 <__aeabi_f2d>
 8009702:	a327      	add	r3, pc, #156	; (adr r3, 80097a0 <Rotate+0x3c0>)
 8009704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009708:	f7fe feae 	bl	8008468 <__aeabi_dmul>
 800970c:	4603      	mov	r3, r0
 800970e:	460c      	mov	r4, r1
 8009710:	4618      	mov	r0, r3
 8009712:	4621      	mov	r1, r4
 8009714:	f7ff f958 	bl	80089c8 <__aeabi_d2iz>
 8009718:	4603      	mov	r3, r0
 800971a:	623b      	str	r3, [r7, #32]
	if(ang_v < 0)
 800971c:	edd7 7a00 	vldr	s15, [r7]
 8009720:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009728:	d513      	bpl.n	8009752 <Rotate+0x372>
	{
		KeepPulse[LEFT] -= target_pulse/2;
 800972a:	4b21      	ldr	r3, [pc, #132]	; (80097b0 <Rotate+0x3d0>)
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	0fd9      	lsrs	r1, r3, #31
 8009732:	440b      	add	r3, r1
 8009734:	105b      	asrs	r3, r3, #1
 8009736:	425b      	negs	r3, r3
 8009738:	4413      	add	r3, r2
 800973a:	4a1d      	ldr	r2, [pc, #116]	; (80097b0 <Rotate+0x3d0>)
 800973c:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 800973e:	4b1c      	ldr	r3, [pc, #112]	; (80097b0 <Rotate+0x3d0>)
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	0fd9      	lsrs	r1, r3, #31
 8009746:	440b      	add	r3, r1
 8009748:	105b      	asrs	r3, r3, #1
 800974a:	4413      	add	r3, r2
 800974c:	4a18      	ldr	r2, [pc, #96]	; (80097b0 <Rotate+0x3d0>)
 800974e:	6053      	str	r3, [r2, #4]
 8009750:	e019      	b.n	8009786 <Rotate+0x3a6>
	}
	else 	if(ang_v > 0)
 8009752:	edd7 7a00 	vldr	s15, [r7]
 8009756:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800975a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800975e:	dd12      	ble.n	8009786 <Rotate+0x3a6>
	{
		KeepPulse[LEFT] += target_pulse/2;
 8009760:	4b13      	ldr	r3, [pc, #76]	; (80097b0 <Rotate+0x3d0>)
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	0fd9      	lsrs	r1, r3, #31
 8009768:	440b      	add	r3, r1
 800976a:	105b      	asrs	r3, r3, #1
 800976c:	4413      	add	r3, r2
 800976e:	4a10      	ldr	r2, [pc, #64]	; (80097b0 <Rotate+0x3d0>)
 8009770:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 8009772:	4b0f      	ldr	r3, [pc, #60]	; (80097b0 <Rotate+0x3d0>)
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	6a3b      	ldr	r3, [r7, #32]
 8009778:	0fd9      	lsrs	r1, r3, #31
 800977a:	440b      	add	r3, r1
 800977c:	105b      	asrs	r3, r3, #1
 800977e:	425b      	negs	r3, r3
 8009780:	4413      	add	r3, r2
 8009782:	4a0b      	ldr	r2, [pc, #44]	; (80097b0 <Rotate+0x3d0>)
 8009784:	6053      	str	r3, [r2, #4]
	}
	KeepPulse[BODY] = KeepPulse[BODY];
 8009786:	4b0a      	ldr	r3, [pc, #40]	; (80097b0 <Rotate+0x3d0>)
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	4a09      	ldr	r2, [pc, #36]	; (80097b0 <Rotate+0x3d0>)
 800978c:	6093      	str	r3, [r2, #8]

	//向いた方角を変える
	ChangeCardinal();
 800978e:	f7ff fc8b 	bl	80090a8 <ChangeCardinal>
	//printf("回転終了\r\n");
}
 8009792:	bf00      	nop
 8009794:	3734      	adds	r7, #52	; 0x34
 8009796:	46bd      	mov	sp, r7
 8009798:	bd90      	pop	{r4, r7, pc}
 800979a:	bf00      	nop
 800979c:	f3af 8000 	nop.w
 80097a0:	fb601669 	.word	0xfb601669
 80097a4:	40fd6f0b 	.word	0x40fd6f0b
 80097a8:	2000fc2c 	.word	0x2000fc2c
 80097ac:	43b40000 	.word	0x43b40000
 80097b0:	2000ff4c 	.word	0x2000ff4c

080097b4 <getFrontWall>:
{

}

int getFrontWall()
{
 80097b4:	b480      	push	{r7}
 80097b6:	af00      	add	r7, sp, #0

	switch(Pos.Car)//方角に合わせて、
 80097b8:	4b28      	ldr	r3, [pc, #160]	; (800985c <getFrontWall+0xa8>)
 80097ba:	78db      	ldrb	r3, [r3, #3]
 80097bc:	2b03      	cmp	r3, #3
 80097be:	d847      	bhi.n	8009850 <getFrontWall+0x9c>
 80097c0:	a201      	add	r2, pc, #4	; (adr r2, 80097c8 <getFrontWall+0x14>)
 80097c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c6:	bf00      	nop
 80097c8:	080097d9 	.word	0x080097d9
 80097cc:	080097f7 	.word	0x080097f7
 80097d0:	08009815 	.word	0x08009815
 80097d4:	08009833 	.word	0x08009833
	{

	case north:

	return Wall[Pos.X][Pos.Y].north;
 80097d8:	4b20      	ldr	r3, [pc, #128]	; (800985c <getFrontWall+0xa8>)
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	4618      	mov	r0, r3
 80097de:	4b1f      	ldr	r3, [pc, #124]	; (800985c <getFrontWall+0xa8>)
 80097e0:	785b      	ldrb	r3, [r3, #1]
 80097e2:	4619      	mov	r1, r3
 80097e4:	4a1e      	ldr	r2, [pc, #120]	; (8009860 <getFrontWall+0xac>)
 80097e6:	0103      	lsls	r3, r0, #4
 80097e8:	440b      	add	r3, r1
 80097ea:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80097ee:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	e02d      	b.n	8009852 <getFrontWall+0x9e>

	break;

	case east:

	return Wall[Pos.X][Pos.Y].east;
 80097f6:	4b19      	ldr	r3, [pc, #100]	; (800985c <getFrontWall+0xa8>)
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	4618      	mov	r0, r3
 80097fc:	4b17      	ldr	r3, [pc, #92]	; (800985c <getFrontWall+0xa8>)
 80097fe:	785b      	ldrb	r3, [r3, #1]
 8009800:	4619      	mov	r1, r3
 8009802:	4a17      	ldr	r2, [pc, #92]	; (8009860 <getFrontWall+0xac>)
 8009804:	0103      	lsls	r3, r0, #4
 8009806:	440b      	add	r3, r1
 8009808:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800980c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009810:	b2db      	uxtb	r3, r3
 8009812:	e01e      	b.n	8009852 <getFrontWall+0x9e>

	break;

	case south:

	return Wall[Pos.X][Pos.Y].south;
 8009814:	4b11      	ldr	r3, [pc, #68]	; (800985c <getFrontWall+0xa8>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	4618      	mov	r0, r3
 800981a:	4b10      	ldr	r3, [pc, #64]	; (800985c <getFrontWall+0xa8>)
 800981c:	785b      	ldrb	r3, [r3, #1]
 800981e:	4619      	mov	r1, r3
 8009820:	4a0f      	ldr	r2, [pc, #60]	; (8009860 <getFrontWall+0xac>)
 8009822:	0103      	lsls	r3, r0, #4
 8009824:	440b      	add	r3, r1
 8009826:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800982a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800982e:	b2db      	uxtb	r3, r3
 8009830:	e00f      	b.n	8009852 <getFrontWall+0x9e>

	break;

	case west:

	return Wall[Pos.X][Pos.Y].west;
 8009832:	4b0a      	ldr	r3, [pc, #40]	; (800985c <getFrontWall+0xa8>)
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	4618      	mov	r0, r3
 8009838:	4b08      	ldr	r3, [pc, #32]	; (800985c <getFrontWall+0xa8>)
 800983a:	785b      	ldrb	r3, [r3, #1]
 800983c:	4619      	mov	r1, r3
 800983e:	4a08      	ldr	r2, [pc, #32]	; (8009860 <getFrontWall+0xac>)
 8009840:	0103      	lsls	r3, r0, #4
 8009842:	440b      	add	r3, r1
 8009844:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009848:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800984c:	b2db      	uxtb	r3, r3
 800984e:	e000      	b.n	8009852 <getFrontWall+0x9e>

	break;

	default:

	break;
 8009850:	bf00      	nop

	}

}
 8009852:	4618      	mov	r0, r3
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	20000000 	.word	0x20000000
 8009860:	20010398 	.word	0x20010398
 8009864:	00000000 	.word	0x00000000

08009868 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009868:	b5b0      	push	{r4, r5, r7, lr}
 800986a:	b08a      	sub	sp, #40	; 0x28
 800986c:	af00      	add	r7, sp, #0
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 800986e:	4baa      	ldr	r3, [pc, #680]	; (8009b18 <SlalomRight+0x2b0>)
 8009870:	2202      	movs	r2, #2
 8009872:	711a      	strb	r2, [r3, #4]
	ControlWall();
 8009874:	f7ff fc58 	bl	8009128 <ControlWall>
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009878:	4ba8      	ldr	r3, [pc, #672]	; (8009b1c <SlalomRight+0x2b4>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = Sla.Pre;         //スラローム前距離
 800987e:	4ba8      	ldr	r3, [pc, #672]	; (8009b20 <SlalomRight+0x2b8>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	623b      	str	r3, [r7, #32]
	float fol = Sla.Fol;         //スラローム後距離
 8009884:	4ba6      	ldr	r3, [pc, #664]	; (8009b20 <SlalomRight+0x2b8>)
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	61fb      	str	r3, [r7, #28]
	float alpha_turn = Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
 800988a:	4ba5      	ldr	r3, [pc, #660]	; (8009b20 <SlalomRight+0x2b8>)
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	61bb      	str	r3, [r7, #24]
	//float alalpha_turn = Sla.Alalpha;
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 8009890:	4ba3      	ldr	r3, [pc, #652]	; (8009b20 <SlalomRight+0x2b8>)
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	4618      	mov	r0, r3
 8009896:	f7fe fd8f 	bl	80083b8 <__aeabi_f2d>
 800989a:	a39b      	add	r3, pc, #620	; (adr r3, 8009b08 <SlalomRight+0x2a0>)
 800989c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a0:	f7fe fde2 	bl	8008468 <__aeabi_dmul>
 80098a4:	4603      	mov	r3, r0
 80098a6:	460c      	mov	r4, r1
 80098a8:	4618      	mov	r0, r3
 80098aa:	4621      	mov	r1, r4
 80098ac:	f04f 0200 	mov.w	r2, #0
 80098b0:	4b9c      	ldr	r3, [pc, #624]	; (8009b24 <SlalomRight+0x2bc>)
 80098b2:	f7fe ff03 	bl	80086bc <__aeabi_ddiv>
 80098b6:	4603      	mov	r3, r0
 80098b8:	460c      	mov	r4, r1
 80098ba:	4618      	mov	r0, r3
 80098bc:	4621      	mov	r1, r4
 80098be:	f7ff f8cb 	bl	8008a58 <__aeabi_d2f>
 80098c2:	4603      	mov	r3, r0
 80098c4:	617b      	str	r3, [r7, #20]
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 80098c6:	4b96      	ldr	r3, [pc, #600]	; (8009b20 <SlalomRight+0x2b8>)
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fe fd74 	bl	80083b8 <__aeabi_f2d>
 80098d0:	a38d      	add	r3, pc, #564	; (adr r3, 8009b08 <SlalomRight+0x2a0>)
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	f7fe fdc7 	bl	8008468 <__aeabi_dmul>
 80098da:	4603      	mov	r3, r0
 80098dc:	460c      	mov	r4, r1
 80098de:	4618      	mov	r0, r3
 80098e0:	4621      	mov	r1, r4
 80098e2:	f04f 0200 	mov.w	r2, #0
 80098e6:	4b8f      	ldr	r3, [pc, #572]	; (8009b24 <SlalomRight+0x2bc>)
 80098e8:	f7fe fee8 	bl	80086bc <__aeabi_ddiv>
 80098ec:	4603      	mov	r3, r0
 80098ee:	460c      	mov	r4, r1
 80098f0:	4618      	mov	r0, r3
 80098f2:	4621      	mov	r1, r4
 80098f4:	f7ff f8b0 	bl	8008a58 <__aeabi_d2f>
 80098f8:	4603      	mov	r3, r0
 80098fa:	613b      	str	r3, [r7, #16]
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 80098fc:	4b88      	ldr	r3, [pc, #544]	; (8009b20 <SlalomRight+0x2b8>)
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	4618      	mov	r0, r3
 8009902:	f7fe fd59 	bl	80083b8 <__aeabi_f2d>
 8009906:	a380      	add	r3, pc, #512	; (adr r3, 8009b08 <SlalomRight+0x2a0>)
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	f7fe fdac 	bl	8008468 <__aeabi_dmul>
 8009910:	4603      	mov	r3, r0
 8009912:	460c      	mov	r4, r1
 8009914:	4618      	mov	r0, r3
 8009916:	4621      	mov	r1, r4
 8009918:	f04f 0200 	mov.w	r2, #0
 800991c:	4b81      	ldr	r3, [pc, #516]	; (8009b24 <SlalomRight+0x2bc>)
 800991e:	f7fe fecd 	bl	80086bc <__aeabi_ddiv>
 8009922:	4603      	mov	r3, r0
 8009924:	460c      	mov	r4, r1
 8009926:	4618      	mov	r0, r3
 8009928:	4621      	mov	r1, r4
 800992a:	f7ff f895 	bl	8008a58 <__aeabi_d2f>
 800992e:	4603      	mov	r3, r0
 8009930:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵
	float now_angv = AngularV;
 8009932:	4b7d      	ldr	r3, [pc, #500]	; (8009b28 <SlalomRight+0x2c0>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	60bb      	str	r3, [r7, #8]
	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009938:	4b7c      	ldr	r3, [pc, #496]	; (8009b2c <SlalomRight+0x2c4>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	4b7b      	ldr	r3, [pc, #492]	; (8009b2c <SlalomRight+0x2c4>)
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	4413      	add	r3, r2
 8009942:	607b      	str	r3, [r7, #4]
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 8009944:	f7ff ff36 	bl	80097b4 <getFrontWall>
 8009948:	4603      	mov	r3, r0
 800994a:	2b01      	cmp	r3, #1
 800994c:	d133      	bne.n	80099b6 <SlalomRight+0x14e>
	{
		while(Photo[FL] < 220 || Photo[FR] < 270/*前壁の閾値より低い間*/)
 800994e:	e00e      	b.n	800996e <SlalomRight+0x106>
		{
			TargetAngularV = 0;
 8009950:	4b77      	ldr	r3, [pc, #476]	; (8009b30 <SlalomRight+0x2c8>)
 8009952:	f04f 0200 	mov.w	r2, #0
 8009956:	601a      	str	r2, [r3, #0]
			AngularLeapsity = 0;
 8009958:	4b76      	ldr	r3, [pc, #472]	; (8009b34 <SlalomRight+0x2cc>)
 800995a:	f04f 0200 	mov.w	r2, #0
 800995e:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009960:	4b75      	ldr	r3, [pc, #468]	; (8009b38 <SlalomRight+0x2d0>)
 8009962:	f04f 0200 	mov.w	r2, #0
 8009966:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009968:	4a74      	ldr	r2, [pc, #464]	; (8009b3c <SlalomRight+0x2d4>)
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	6093      	str	r3, [r2, #8]
		while(Photo[FL] < 220 || Photo[FR] < 270/*前壁の閾値より低い間*/)
 800996e:	4b74      	ldr	r3, [pc, #464]	; (8009b40 <SlalomRight+0x2d8>)
 8009970:	edd3 7a00 	vldr	s15, [r3]
 8009974:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009b44 <SlalomRight+0x2dc>
 8009978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800997c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009980:	d4e6      	bmi.n	8009950 <SlalomRight+0xe8>
 8009982:	4b6f      	ldr	r3, [pc, #444]	; (8009b40 <SlalomRight+0x2d8>)
 8009984:	edd3 7a03 	vldr	s15, [r3, #12]
 8009988:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8009b48 <SlalomRight+0x2e0>
 800998c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009994:	d4dc      	bmi.n	8009950 <SlalomRight+0xe8>
 8009996:	e03b      	b.n	8009a10 <SlalomRight+0x1a8>
	else//なければ
	{
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 8009998:	4b65      	ldr	r3, [pc, #404]	; (8009b30 <SlalomRight+0x2c8>)
 800999a:	f04f 0200 	mov.w	r2, #0
 800999e:	601a      	str	r2, [r3, #0]
				AngularLeapsity = 0;
 80099a0:	4b64      	ldr	r3, [pc, #400]	; (8009b34 <SlalomRight+0x2cc>)
 80099a2:	f04f 0200 	mov.w	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]
				AngularAcceleration = 0;
 80099a8:	4b63      	ldr	r3, [pc, #396]	; (8009b38 <SlalomRight+0x2d0>)
 80099aa:	f04f 0200 	mov.w	r2, #0
 80099ae:	601a      	str	r2, [r3, #0]
				TargetVelocity[BODY] = v_turn;
 80099b0:	4a62      	ldr	r2, [pc, #392]	; (8009b3c <SlalomRight+0x2d4>)
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	6093      	str	r3, [r2, #8]
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f7fe fcec 	bl	8008394 <__aeabi_i2d>
 80099bc:	4604      	mov	r4, r0
 80099be:	460d      	mov	r5, r1
 80099c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80099c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80099c8:	ee17 0a90 	vmov	r0, s15
 80099cc:	f7fe fcf4 	bl	80083b8 <__aeabi_f2d>
 80099d0:	a34f      	add	r3, pc, #316	; (adr r3, 8009b10 <SlalomRight+0x2a8>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	f7fe fe71 	bl	80086bc <__aeabi_ddiv>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	4620      	mov	r0, r4
 80099e0:	4629      	mov	r1, r5
 80099e2:	f7fe fb8b 	bl	80080fc <__adddf3>
 80099e6:	4603      	mov	r3, r0
 80099e8:	460c      	mov	r4, r1
 80099ea:	4625      	mov	r5, r4
 80099ec:	461c      	mov	r4, r3
 80099ee:	4b4f      	ldr	r3, [pc, #316]	; (8009b2c <SlalomRight+0x2c4>)
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	4b4e      	ldr	r3, [pc, #312]	; (8009b2c <SlalomRight+0x2c4>)
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	4413      	add	r3, r2
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fe fccb 	bl	8008394 <__aeabi_i2d>
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	4620      	mov	r0, r4
 8009a04:	4629      	mov	r1, r5
 8009a06:	f7fe ffbf 	bl	8008988 <__aeabi_dcmpgt>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1c3      	bne.n	8009998 <SlalomRight+0x130>

				////printf("直進1\r\n");
		}
	}
	now_angv = AngularV;
 8009a10:	4b45      	ldr	r3, [pc, #276]	; (8009b28 <SlalomRight+0x2c0>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	60bb      	str	r3, [r7, #8]

	float start_angle = Angle;
 8009a16:	4b4d      	ldr	r3, [pc, #308]	; (8009b4c <SlalomRight+0x2e4>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	603b      	str	r3, [r7, #0]

	while(start_angle + ang1 > Angle)
 8009a1c:	e005      	b.n	8009a2a <SlalomRight+0x1c2>

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
		//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 8009a1e:	4a46      	ldr	r2, [pc, #280]	; (8009b38 <SlalomRight+0x2d0>)
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009a24:	4a45      	ldr	r2, [pc, #276]	; (8009b3c <SlalomRight+0x2d4>)
 8009a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a28:	6093      	str	r3, [r2, #8]
	while(start_angle + ang1 > Angle)
 8009a2a:	ed97 7a00 	vldr	s14, [r7]
 8009a2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009a32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a36:	4b45      	ldr	r3, [pc, #276]	; (8009b4c <SlalomRight+0x2e4>)
 8009a38:	edd3 7a00 	vldr	s15, [r3]
 8009a3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a44:	dceb      	bgt.n	8009a1e <SlalomRight+0x1b6>
			}
#endif

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009a46:	4b3c      	ldr	r3, [pc, #240]	; (8009b38 <SlalomRight+0x2d0>)
 8009a48:	f04f 0200 	mov.w	r2, #0
 8009a4c:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009a4e:	4b39      	ldr	r3, [pc, #228]	; (8009b34 <SlalomRight+0x2cc>)
 8009a50:	f04f 0200 	mov.w	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
	now_angv = AngularV;
 8009a56:	4b34      	ldr	r3, [pc, #208]	; (8009b28 <SlalomRight+0x2c0>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60bb      	str	r3, [r7, #8]
	//alpha_flag = 0;

	while(start_angle + ang2 > Angle)
 8009a5c:	e006      	b.n	8009a6c <SlalomRight+0x204>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009a5e:	4b34      	ldr	r3, [pc, #208]	; (8009b30 <SlalomRight+0x2c8>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a33      	ldr	r2, [pc, #204]	; (8009b30 <SlalomRight+0x2c8>)
 8009a64:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009a66:	4a35      	ldr	r2, [pc, #212]	; (8009b3c <SlalomRight+0x2d4>)
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	6093      	str	r3, [r2, #8]
	while(start_angle + ang2 > Angle)
 8009a6c:	ed97 7a00 	vldr	s14, [r7]
 8009a70:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a78:	4b34      	ldr	r3, [pc, #208]	; (8009b4c <SlalomRight+0x2e4>)
 8009a7a:	edd3 7a00 	vldr	s15, [r3]
 8009a7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a86:	dcea      	bgt.n	8009a5e <SlalomRight+0x1f6>

			}
#endif
	}

	now_angv = AngularV;
 8009a88:	4b27      	ldr	r3, [pc, #156]	; (8009b28 <SlalomRight+0x2c0>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	60bb      	str	r3, [r7, #8]
	while( start_angle + ang3 > Angle)
 8009a8e:	e016      	b.n	8009abe <SlalomRight+0x256>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 8009a90:	edd7 7a06 	vldr	s15, [r7, #24]
 8009a94:	eef1 7a67 	vneg.f32	s15, s15
 8009a98:	4b27      	ldr	r3, [pc, #156]	; (8009b38 <SlalomRight+0x2d0>)
 8009a9a:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV < 0)
 8009a9e:	4b24      	ldr	r3, [pc, #144]	; (8009b30 <SlalomRight+0x2c8>)
 8009aa0:	edd3 7a00 	vldr	s15, [r3]
 8009aa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aac:	d504      	bpl.n	8009ab8 <SlalomRight+0x250>
			{
				TargetAngularV = 0;
 8009aae:	4b20      	ldr	r3, [pc, #128]	; (8009b30 <SlalomRight+0x2c8>)
 8009ab0:	f04f 0200 	mov.w	r2, #0
 8009ab4:	601a      	str	r2, [r3, #0]
				break;
 8009ab6:	e010      	b.n	8009ada <SlalomRight+0x272>
			}
			TargetVelocity[BODY] = v_turn;
 8009ab8:	4a20      	ldr	r2, [pc, #128]	; (8009b3c <SlalomRight+0x2d4>)
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	6093      	str	r3, [r2, #8]
	while( start_angle + ang3 > Angle)
 8009abe:	ed97 7a00 	vldr	s14, [r7]
 8009ac2:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009aca:	4b20      	ldr	r3, [pc, #128]	; (8009b4c <SlalomRight+0x2e4>)
 8009acc:	edd3 7a00 	vldr	s15, [r3]
 8009ad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad8:	dcda      	bgt.n	8009a90 <SlalomRight+0x228>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009ada:	4b17      	ldr	r3, [pc, #92]	; (8009b38 <SlalomRight+0x2d0>)
 8009adc:	f04f 0200 	mov.w	r2, #0
 8009ae0:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009ae2:	4b14      	ldr	r3, [pc, #80]	; (8009b34 <SlalomRight+0x2cc>)
 8009ae4:	f04f 0200 	mov.w	r2, #0
 8009ae8:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009aea:	4b11      	ldr	r3, [pc, #68]	; (8009b30 <SlalomRight+0x2c8>)
 8009aec:	f04f 0200 	mov.w	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]
	Calc = SearchOrFast;
 8009af2:	4b17      	ldr	r3, [pc, #92]	; (8009b50 <SlalomRight+0x2e8>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a17      	ldr	r2, [pc, #92]	; (8009b54 <SlalomRight+0x2ec>)
 8009af8:	6013      	str	r3, [r2, #0]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009afa:	4b0c      	ldr	r3, [pc, #48]	; (8009b2c <SlalomRight+0x2c4>)
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	4b0b      	ldr	r3, [pc, #44]	; (8009b2c <SlalomRight+0x2c4>)
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	4413      	add	r3, r2
 8009b04:	607b      	str	r3, [r7, #4]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009b06:	e03c      	b.n	8009b82 <SlalomRight+0x31a>
 8009b08:	54442d18 	.word	0x54442d18
 8009b0c:	400921fb 	.word	0x400921fb
 8009b10:	6fa23a53 	.word	0x6fa23a53
 8009b14:	3f5028d9 	.word	0x3f5028d9
 8009b18:	20000000 	.word	0x20000000
 8009b1c:	20010168 	.word	0x20010168
 8009b20:	2000ff30 	.word	0x2000ff30
 8009b24:	40668000 	.word	0x40668000
 8009b28:	2000fc20 	.word	0x2000fc20
 8009b2c:	2000ff18 	.word	0x2000ff18
 8009b30:	2000fef8 	.word	0x2000fef8
 8009b34:	2000fc30 	.word	0x2000fc30
 8009b38:	2000fc2c 	.word	0x2000fc2c
 8009b3c:	2000fee8 	.word	0x2000fee8
 8009b40:	2000ff58 	.word	0x2000ff58
 8009b44:	435c0000 	.word	0x435c0000
 8009b48:	43870000 	.word	0x43870000
 8009b4c:	2000fc24 	.word	0x2000fc24
 8009b50:	20010598 	.word	0x20010598
 8009b54:	2001059c 	.word	0x2001059c
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009b58:	4b33      	ldr	r3, [pc, #204]	; (8009c28 <SlalomRight+0x3c0>)
 8009b5a:	f04f 0200 	mov.w	r2, #0
 8009b5e:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009b60:	4a32      	ldr	r2, [pc, #200]	; (8009c2c <SlalomRight+0x3c4>)
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	6093      	str	r3, [r2, #8]
			//printf("直進2\r\n");

			//後半の直線に入ったら計算する。
			if(Calc == 0)
 8009b66:	4b32      	ldr	r3, [pc, #200]	; (8009c30 <SlalomRight+0x3c8>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d109      	bne.n	8009b82 <SlalomRight+0x31a>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 8009b6e:	f001 fcad 	bl	800b4cc <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 8009b72:	2201      	movs	r2, #1
 8009b74:	2103      	movs	r1, #3
 8009b76:	2005      	movs	r0, #5
 8009b78:	f001 fe1a 	bl	800b7b0 <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 8009b7c:	4b2c      	ldr	r3, [pc, #176]	; (8009c30 <SlalomRight+0x3c8>)
 8009b7e:	2201      	movs	r2, #1
 8009b80:	601a      	str	r2, [r3, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7fe fc06 	bl	8008394 <__aeabi_i2d>
 8009b88:	4604      	mov	r4, r0
 8009b8a:	460d      	mov	r5, r1
 8009b8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009b90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009b94:	ee17 0a90 	vmov	r0, s15
 8009b98:	f7fe fc0e 	bl	80083b8 <__aeabi_f2d>
 8009b9c:	a31e      	add	r3, pc, #120	; (adr r3, 8009c18 <SlalomRight+0x3b0>)
 8009b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba2:	f7fe fd8b 	bl	80086bc <__aeabi_ddiv>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4620      	mov	r0, r4
 8009bac:	4629      	mov	r1, r5
 8009bae:	f7fe faa5 	bl	80080fc <__adddf3>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	4625      	mov	r5, r4
 8009bb8:	461c      	mov	r4, r3
 8009bba:	4b1e      	ldr	r3, [pc, #120]	; (8009c34 <SlalomRight+0x3cc>)
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	4b1d      	ldr	r3, [pc, #116]	; (8009c34 <SlalomRight+0x3cc>)
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7fe fbe5 	bl	8008394 <__aeabi_i2d>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	4620      	mov	r0, r4
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	f7fe fed9 	bl	8008988 <__aeabi_dcmpgt>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1bd      	bne.n	8009b58 <SlalomRight+0x2f0>
			}
	}
	TargetAngle += 90*M_PI/180;
 8009bdc:	4b16      	ldr	r3, [pc, #88]	; (8009c38 <SlalomRight+0x3d0>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fe fbe9 	bl	80083b8 <__aeabi_f2d>
 8009be6:	a30e      	add	r3, pc, #56	; (adr r3, 8009c20 <SlalomRight+0x3b8>)
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	f7fe fa86 	bl	80080fc <__adddf3>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	460c      	mov	r4, r1
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	f7fe ff2e 	bl	8008a58 <__aeabi_d2f>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	4b0e      	ldr	r3, [pc, #56]	; (8009c38 <SlalomRight+0x3d0>)
 8009c00:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009c02:	4b0c      	ldr	r3, [pc, #48]	; (8009c34 <SlalomRight+0x3cc>)
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	4a0d      	ldr	r2, [pc, #52]	; (8009c3c <SlalomRight+0x3d4>)
 8009c08:	6093      	str	r3, [r2, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009c0a:	bf00      	nop
 8009c0c:	3728      	adds	r7, #40	; 0x28
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bdb0      	pop	{r4, r5, r7, pc}
 8009c12:	bf00      	nop
 8009c14:	f3af 8000 	nop.w
 8009c18:	6fa23a53 	.word	0x6fa23a53
 8009c1c:	3f5028d9 	.word	0x3f5028d9
 8009c20:	54442d18 	.word	0x54442d18
 8009c24:	3ff921fb 	.word	0x3ff921fb
 8009c28:	2000fef8 	.word	0x2000fef8
 8009c2c:	2000fee8 	.word	0x2000fee8
 8009c30:	2001059c 	.word	0x2001059c
 8009c34:	2000ff18 	.word	0x2000ff18
 8009c38:	2000ff14 	.word	0x2000ff14
 8009c3c:	2000ff4c 	.word	0x2000ff4c

08009c40 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009c40:	b5b0      	push	{r4, r5, r7, lr}
 8009c42:	b08a      	sub	sp, #40	; 0x28
 8009c44:	af00      	add	r7, sp, #0
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 8009c46:	4ba4      	ldr	r3, [pc, #656]	; (8009ed8 <SlalomLeft+0x298>)
 8009c48:	2202      	movs	r2, #2
 8009c4a:	711a      	strb	r2, [r3, #4]
	ControlWall();
 8009c4c:	f7ff fa6c 	bl	8009128 <ControlWall>
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009c50:	4ba2      	ldr	r3, [pc, #648]	; (8009edc <SlalomLeft+0x29c>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = Sla.Pre;         //スラローム前距離
 8009c56:	4ba2      	ldr	r3, [pc, #648]	; (8009ee0 <SlalomLeft+0x2a0>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	623b      	str	r3, [r7, #32]
	float fol = Sla.Fol;         //スラローム後距離
 8009c5c:	4ba0      	ldr	r3, [pc, #640]	; (8009ee0 <SlalomLeft+0x2a0>)
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	61fb      	str	r3, [r7, #28]
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 8009c62:	4b9f      	ldr	r3, [pc, #636]	; (8009ee0 <SlalomLeft+0x2a0>)
 8009c64:	edd3 7a02 	vldr	s15, [r3, #8]
 8009c68:	eef1 7a67 	vneg.f32	s15, s15
 8009c6c:	edc7 7a06 	vstr	s15, [r7, #24]
	//float alalpha_turn = -Sla.Alalpha;
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 8009c70:	4b9b      	ldr	r3, [pc, #620]	; (8009ee0 <SlalomLeft+0x2a0>)
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fe fb9f 	bl	80083b8 <__aeabi_f2d>
 8009c7a:	a393      	add	r3, pc, #588	; (adr r3, 8009ec8 <SlalomLeft+0x288>)
 8009c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c80:	f7fe fbf2 	bl	8008468 <__aeabi_dmul>
 8009c84:	4603      	mov	r3, r0
 8009c86:	460c      	mov	r4, r1
 8009c88:	4618      	mov	r0, r3
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	f04f 0200 	mov.w	r2, #0
 8009c90:	4b94      	ldr	r3, [pc, #592]	; (8009ee4 <SlalomLeft+0x2a4>)
 8009c92:	f7fe fd13 	bl	80086bc <__aeabi_ddiv>
 8009c96:	4603      	mov	r3, r0
 8009c98:	460c      	mov	r4, r1
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	f7fe fedb 	bl	8008a58 <__aeabi_d2f>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	617b      	str	r3, [r7, #20]
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 8009ca6:	4b8e      	ldr	r3, [pc, #568]	; (8009ee0 <SlalomLeft+0x2a0>)
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe fb84 	bl	80083b8 <__aeabi_f2d>
 8009cb0:	a385      	add	r3, pc, #532	; (adr r3, 8009ec8 <SlalomLeft+0x288>)
 8009cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb6:	f7fe fbd7 	bl	8008468 <__aeabi_dmul>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	460c      	mov	r4, r1
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	f04f 0200 	mov.w	r2, #0
 8009cc6:	4b87      	ldr	r3, [pc, #540]	; (8009ee4 <SlalomLeft+0x2a4>)
 8009cc8:	f7fe fcf8 	bl	80086bc <__aeabi_ddiv>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	460c      	mov	r4, r1
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	f7fe fec0 	bl	8008a58 <__aeabi_d2f>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	613b      	str	r3, [r7, #16]
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 8009cdc:	4b80      	ldr	r3, [pc, #512]	; (8009ee0 <SlalomLeft+0x2a0>)
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fe fb69 	bl	80083b8 <__aeabi_f2d>
 8009ce6:	a378      	add	r3, pc, #480	; (adr r3, 8009ec8 <SlalomLeft+0x288>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f7fe fbbc 	bl	8008468 <__aeabi_dmul>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	f04f 0200 	mov.w	r2, #0
 8009cfc:	4b79      	ldr	r3, [pc, #484]	; (8009ee4 <SlalomLeft+0x2a4>)
 8009cfe:	f7fe fcdd 	bl	80086bc <__aeabi_ddiv>
 8009d02:	4603      	mov	r3, r0
 8009d04:	460c      	mov	r4, r1
 8009d06:	4618      	mov	r0, r3
 8009d08:	4621      	mov	r1, r4
 8009d0a:	f7fe fea5 	bl	8008a58 <__aeabi_d2f>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009d12:	4b75      	ldr	r3, [pc, #468]	; (8009ee8 <SlalomLeft+0x2a8>)
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	4b74      	ldr	r3, [pc, #464]	; (8009ee8 <SlalomLeft+0x2a8>)
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	60bb      	str	r3, [r7, #8]
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 8009d1e:	f7ff fd49 	bl	80097b4 <getFrontWall>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d12f      	bne.n	8009d88 <SlalomLeft+0x148>
	{
		while(Photo[FL] < 220 || Photo[FR] < 270/*前壁の閾値より低い間*/)
 8009d28:	e00e      	b.n	8009d48 <SlalomLeft+0x108>
		{
			TargetAngularV = 0;
 8009d2a:	4b70      	ldr	r3, [pc, #448]	; (8009eec <SlalomLeft+0x2ac>)
 8009d2c:	f04f 0200 	mov.w	r2, #0
 8009d30:	601a      	str	r2, [r3, #0]
			AngularLeapsity = 0;
 8009d32:	4b6f      	ldr	r3, [pc, #444]	; (8009ef0 <SlalomLeft+0x2b0>)
 8009d34:	f04f 0200 	mov.w	r2, #0
 8009d38:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009d3a:	4b6e      	ldr	r3, [pc, #440]	; (8009ef4 <SlalomLeft+0x2b4>)
 8009d3c:	f04f 0200 	mov.w	r2, #0
 8009d40:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009d42:	4a6d      	ldr	r2, [pc, #436]	; (8009ef8 <SlalomLeft+0x2b8>)
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	6093      	str	r3, [r2, #8]
		while(Photo[FL] < 220 || Photo[FR] < 270/*前壁の閾値より低い間*/)
 8009d48:	4b6c      	ldr	r3, [pc, #432]	; (8009efc <SlalomLeft+0x2bc>)
 8009d4a:	edd3 7a00 	vldr	s15, [r3]
 8009d4e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8009f00 <SlalomLeft+0x2c0>
 8009d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d5a:	d4e6      	bmi.n	8009d2a <SlalomLeft+0xea>
 8009d5c:	4b67      	ldr	r3, [pc, #412]	; (8009efc <SlalomLeft+0x2bc>)
 8009d5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009d62:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8009f04 <SlalomLeft+0x2c4>
 8009d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6e:	d4dc      	bmi.n	8009d2a <SlalomLeft+0xea>
 8009d70:	e037      	b.n	8009de2 <SlalomLeft+0x1a2>
	else//なければ
	{
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 8009d72:	4b5e      	ldr	r3, [pc, #376]	; (8009eec <SlalomLeft+0x2ac>)
 8009d74:	f04f 0200 	mov.w	r2, #0
 8009d78:	601a      	str	r2, [r3, #0]
				AngularAcceleration = 0;
 8009d7a:	4b5e      	ldr	r3, [pc, #376]	; (8009ef4 <SlalomLeft+0x2b4>)
 8009d7c:	f04f 0200 	mov.w	r2, #0
 8009d80:	601a      	str	r2, [r3, #0]
				TargetVelocity[BODY] = v_turn;
 8009d82:	4a5d      	ldr	r2, [pc, #372]	; (8009ef8 <SlalomLeft+0x2b8>)
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	6093      	str	r3, [r2, #8]
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009d88:	68b8      	ldr	r0, [r7, #8]
 8009d8a:	f7fe fb03 	bl	8008394 <__aeabi_i2d>
 8009d8e:	4604      	mov	r4, r0
 8009d90:	460d      	mov	r5, r1
 8009d92:	edd7 7a08 	vldr	s15, [r7, #32]
 8009d96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009d9a:	ee17 0a90 	vmov	r0, s15
 8009d9e:	f7fe fb0b 	bl	80083b8 <__aeabi_f2d>
 8009da2:	a34b      	add	r3, pc, #300	; (adr r3, 8009ed0 <SlalomLeft+0x290>)
 8009da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da8:	f7fe fc88 	bl	80086bc <__aeabi_ddiv>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	4620      	mov	r0, r4
 8009db2:	4629      	mov	r1, r5
 8009db4:	f7fe f9a2 	bl	80080fc <__adddf3>
 8009db8:	4603      	mov	r3, r0
 8009dba:	460c      	mov	r4, r1
 8009dbc:	4625      	mov	r5, r4
 8009dbe:	461c      	mov	r4, r3
 8009dc0:	4b49      	ldr	r3, [pc, #292]	; (8009ee8 <SlalomLeft+0x2a8>)
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	4b48      	ldr	r3, [pc, #288]	; (8009ee8 <SlalomLeft+0x2a8>)
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	4413      	add	r3, r2
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe fae2 	bl	8008394 <__aeabi_i2d>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	f7fe fdd6 	bl	8008988 <__aeabi_dcmpgt>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1c7      	bne.n	8009d72 <SlalomLeft+0x132>
				////printf("直進1\r\n");
		}
	}


	float start_angle = Angle;
 8009de2:	4b49      	ldr	r3, [pc, #292]	; (8009f08 <SlalomLeft+0x2c8>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	607b      	str	r3, [r7, #4]
	while(start_angle - ang1 < Angle)
 8009de8:	e005      	b.n	8009df6 <SlalomLeft+0x1b6>

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 8009dea:	4a42      	ldr	r2, [pc, #264]	; (8009ef4 <SlalomLeft+0x2b4>)
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009df0:	4a41      	ldr	r2, [pc, #260]	; (8009ef8 <SlalomLeft+0x2b8>)
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	6093      	str	r3, [r2, #8]
	while(start_angle - ang1 < Angle)
 8009df6:	ed97 7a01 	vldr	s14, [r7, #4]
 8009dfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8009dfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e02:	4b41      	ldr	r3, [pc, #260]	; (8009f08 <SlalomLeft+0x2c8>)
 8009e04:	edd3 7a00 	vldr	s15, [r3]
 8009e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e10:	d4eb      	bmi.n	8009dea <SlalomLeft+0x1aa>

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009e12:	4b38      	ldr	r3, [pc, #224]	; (8009ef4 <SlalomLeft+0x2b4>)
 8009e14:	f04f 0200 	mov.w	r2, #0
 8009e18:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009e1a:	4b35      	ldr	r3, [pc, #212]	; (8009ef0 <SlalomLeft+0x2b0>)
 8009e1c:	f04f 0200 	mov.w	r2, #0
 8009e20:	601a      	str	r2, [r3, #0]
	//alpha_flag = 0;

	while(start_angle - ang2 < Angle)
 8009e22:	e006      	b.n	8009e32 <SlalomLeft+0x1f2>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009e24:	4b31      	ldr	r3, [pc, #196]	; (8009eec <SlalomLeft+0x2ac>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a30      	ldr	r2, [pc, #192]	; (8009eec <SlalomLeft+0x2ac>)
 8009e2a:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009e2c:	4a32      	ldr	r2, [pc, #200]	; (8009ef8 <SlalomLeft+0x2b8>)
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	6093      	str	r3, [r2, #8]
	while(start_angle - ang2 < Angle)
 8009e32:	ed97 7a01 	vldr	s14, [r7, #4]
 8009e36:	edd7 7a04 	vldr	s15, [r7, #16]
 8009e3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e3e:	4b32      	ldr	r3, [pc, #200]	; (8009f08 <SlalomLeft+0x2c8>)
 8009e40:	edd3 7a00 	vldr	s15, [r3]
 8009e44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e4c:	d4ea      	bmi.n	8009e24 <SlalomLeft+0x1e4>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < Angle)
 8009e4e:	e016      	b.n	8009e7e <SlalomLeft+0x23e>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 8009e50:	edd7 7a06 	vldr	s15, [r7, #24]
 8009e54:	eef1 7a67 	vneg.f32	s15, s15
 8009e58:	4b26      	ldr	r3, [pc, #152]	; (8009ef4 <SlalomLeft+0x2b4>)
 8009e5a:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV > 0)
 8009e5e:	4b23      	ldr	r3, [pc, #140]	; (8009eec <SlalomLeft+0x2ac>)
 8009e60:	edd3 7a00 	vldr	s15, [r3]
 8009e64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e6c:	dd04      	ble.n	8009e78 <SlalomLeft+0x238>
			{
				TargetAngularV = 0;
 8009e6e:	4b1f      	ldr	r3, [pc, #124]	; (8009eec <SlalomLeft+0x2ac>)
 8009e70:	f04f 0200 	mov.w	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
				break;
 8009e76:	e010      	b.n	8009e9a <SlalomLeft+0x25a>
			}
			TargetVelocity[BODY] = v_turn;
 8009e78:	4a1f      	ldr	r2, [pc, #124]	; (8009ef8 <SlalomLeft+0x2b8>)
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7c:	6093      	str	r3, [r2, #8]
	while( start_angle - ang3 < Angle)
 8009e7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009e82:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e8a:	4b1f      	ldr	r3, [pc, #124]	; (8009f08 <SlalomLeft+0x2c8>)
 8009e8c:	edd3 7a00 	vldr	s15, [r3]
 8009e90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e98:	d4da      	bmi.n	8009e50 <SlalomLeft+0x210>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009e9a:	4b16      	ldr	r3, [pc, #88]	; (8009ef4 <SlalomLeft+0x2b4>)
 8009e9c:	f04f 0200 	mov.w	r2, #0
 8009ea0:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009ea2:	4b13      	ldr	r3, [pc, #76]	; (8009ef0 <SlalomLeft+0x2b0>)
 8009ea4:	f04f 0200 	mov.w	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009eaa:	4b10      	ldr	r3, [pc, #64]	; (8009eec <SlalomLeft+0x2ac>)
 8009eac:	f04f 0200 	mov.w	r2, #0
 8009eb0:	601a      	str	r2, [r3, #0]
	Calc = SearchOrFast;
 8009eb2:	4b16      	ldr	r3, [pc, #88]	; (8009f0c <SlalomLeft+0x2cc>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a16      	ldr	r2, [pc, #88]	; (8009f10 <SlalomLeft+0x2d0>)
 8009eb8:	6013      	str	r3, [r2, #0]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009eba:	4b0b      	ldr	r3, [pc, #44]	; (8009ee8 <SlalomLeft+0x2a8>)
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	4b0a      	ldr	r3, [pc, #40]	; (8009ee8 <SlalomLeft+0x2a8>)
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009ec6:	e03a      	b.n	8009f3e <SlalomLeft+0x2fe>
 8009ec8:	54442d18 	.word	0x54442d18
 8009ecc:	400921fb 	.word	0x400921fb
 8009ed0:	6fa23a53 	.word	0x6fa23a53
 8009ed4:	3f5028d9 	.word	0x3f5028d9
 8009ed8:	20000000 	.word	0x20000000
 8009edc:	20010168 	.word	0x20010168
 8009ee0:	2000ff30 	.word	0x2000ff30
 8009ee4:	40668000 	.word	0x40668000
 8009ee8:	2000ff18 	.word	0x2000ff18
 8009eec:	2000fef8 	.word	0x2000fef8
 8009ef0:	2000fc30 	.word	0x2000fc30
 8009ef4:	2000fc2c 	.word	0x2000fc2c
 8009ef8:	2000fee8 	.word	0x2000fee8
 8009efc:	2000ff58 	.word	0x2000ff58
 8009f00:	435c0000 	.word	0x435c0000
 8009f04:	43870000 	.word	0x43870000
 8009f08:	2000fc24 	.word	0x2000fc24
 8009f0c:	20010598 	.word	0x20010598
 8009f10:	2001059c 	.word	0x2001059c
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009f14:	4b32      	ldr	r3, [pc, #200]	; (8009fe0 <SlalomLeft+0x3a0>)
 8009f16:	f04f 0200 	mov.w	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009f1c:	4a31      	ldr	r2, [pc, #196]	; (8009fe4 <SlalomLeft+0x3a4>)
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	6093      	str	r3, [r2, #8]
			//printf("直進2\r\n");
			if(Calc == 0)
 8009f22:	4b31      	ldr	r3, [pc, #196]	; (8009fe8 <SlalomLeft+0x3a8>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d109      	bne.n	8009f3e <SlalomLeft+0x2fe>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 8009f2a:	f001 facf 	bl	800b4cc <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 8009f2e:	2201      	movs	r2, #1
 8009f30:	2103      	movs	r1, #3
 8009f32:	2005      	movs	r0, #5
 8009f34:	f001 fc3c 	bl	800b7b0 <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 8009f38:	4b2b      	ldr	r3, [pc, #172]	; (8009fe8 <SlalomLeft+0x3a8>)
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	601a      	str	r2, [r3, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009f3e:	68b8      	ldr	r0, [r7, #8]
 8009f40:	f7fe fa28 	bl	8008394 <__aeabi_i2d>
 8009f44:	4604      	mov	r4, r0
 8009f46:	460d      	mov	r5, r1
 8009f48:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009f50:	ee17 0a90 	vmov	r0, s15
 8009f54:	f7fe fa30 	bl	80083b8 <__aeabi_f2d>
 8009f58:	a31d      	add	r3, pc, #116	; (adr r3, 8009fd0 <SlalomLeft+0x390>)
 8009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5e:	f7fe fbad 	bl	80086bc <__aeabi_ddiv>
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	4620      	mov	r0, r4
 8009f68:	4629      	mov	r1, r5
 8009f6a:	f7fe f8c7 	bl	80080fc <__adddf3>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	460c      	mov	r4, r1
 8009f72:	4625      	mov	r5, r4
 8009f74:	461c      	mov	r4, r3
 8009f76:	4b1d      	ldr	r3, [pc, #116]	; (8009fec <SlalomLeft+0x3ac>)
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	4b1c      	ldr	r3, [pc, #112]	; (8009fec <SlalomLeft+0x3ac>)
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	4413      	add	r3, r2
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fe fa07 	bl	8008394 <__aeabi_i2d>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	f7fe fcfb 	bl	8008988 <__aeabi_dcmpgt>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1bd      	bne.n	8009f14 <SlalomLeft+0x2d4>
			}
	}
	TargetAngle += -90*M_PI/180;
 8009f98:	4b15      	ldr	r3, [pc, #84]	; (8009ff0 <SlalomLeft+0x3b0>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7fe fa0b 	bl	80083b8 <__aeabi_f2d>
 8009fa2:	a30d      	add	r3, pc, #52	; (adr r3, 8009fd8 <SlalomLeft+0x398>)
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	f7fe f8a6 	bl	80080f8 <__aeabi_dsub>
 8009fac:	4603      	mov	r3, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	4621      	mov	r1, r4
 8009fb4:	f7fe fd50 	bl	8008a58 <__aeabi_d2f>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	4b0d      	ldr	r3, [pc, #52]	; (8009ff0 <SlalomLeft+0x3b0>)
 8009fbc:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009fbe:	4b0b      	ldr	r3, [pc, #44]	; (8009fec <SlalomLeft+0x3ac>)
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	4a0c      	ldr	r2, [pc, #48]	; (8009ff4 <SlalomLeft+0x3b4>)
 8009fc4:	6093      	str	r3, [r2, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009fc6:	bf00      	nop
 8009fc8:	3728      	adds	r7, #40	; 0x28
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	6fa23a53 	.word	0x6fa23a53
 8009fd4:	3f5028d9 	.word	0x3f5028d9
 8009fd8:	54442d18 	.word	0x54442d18
 8009fdc:	3ff921fb 	.word	0x3ff921fb
 8009fe0:	2000fef8 	.word	0x2000fef8
 8009fe4:	2000fee8 	.word	0x2000fee8
 8009fe8:	2001059c 	.word	0x2001059c
 8009fec:	2000ff18 	.word	0x2000ff18
 8009ff0:	2000ff14 	.word	0x2000ff14
 8009ff4:	2000ff4c 	.word	0x2000ff4c

08009ff8 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
 8009ff8:	b5b0      	push	{r4, r5, r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	ed87 0a01 	vstr	s0, [r7, #4]
 800a002:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = accel;
 800a006:	4b56      	ldr	r3, [pc, #344]	; (800a160 <Accel+0x168>)
 800a008:	2200      	movs	r2, #0
 800a00a:	711a      	strb	r2, [r3, #4]
	ControlWall();
 800a00c:	f7ff f88c 	bl	8009128 <ControlWall>
	TargetAngularV = 0;
 800a010:	4b54      	ldr	r3, [pc, #336]	; (800a164 <Accel+0x16c>)
 800a012:	f04f 0200 	mov.w	r2, #0
 800a016:	601a      	str	r2, [r3, #0]
	float additional_speed=0;
 800a018:	f04f 0300 	mov.w	r3, #0
 800a01c:	60fb      	str	r3, [r7, #12]
	additional_speed = explore_speed - CurrentVelocity[BODY];
 800a01e:	4b52      	ldr	r3, [pc, #328]	; (800a168 <Accel+0x170>)
 800a020:	edd3 7a02 	vldr	s15, [r3, #8]
 800a024:	ed97 7a00 	vldr	s14, [r7]
 800a028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a02c:	edc7 7a03 	vstr	s15, [r7, #12]
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	 //TotalPulse[BODY];
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 800a030:	edd7 7a03 	vldr	s15, [r7, #12]
 800a034:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800a16c <Accel+0x174>
 800a038:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a03c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a040:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a044:	edd7 7a01 	vldr	s15, [r7, #4]
 800a048:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a04c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a050:	4b47      	ldr	r3, [pc, #284]	; (800a170 <Accel+0x178>)
 800a052:	edc3 7a00 	vstr	s15, [r3]
	WallWarn();
 800a056:	f7ff f85b 	bl	8009110 <WallWarn>
	//printf("%d, %d\r\n",VelocityLeftOut,VelocityRightOut);
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 800a05a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a05e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a062:	ee17 0a90 	vmov	r0, s15
 800a066:	f7fe f9a7 	bl	80083b8 <__aeabi_f2d>
 800a06a:	a339      	add	r3, pc, #228	; (adr r3, 800a150 <Accel+0x158>)
 800a06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a070:	f7fe fb24 	bl	80086bc <__aeabi_ddiv>
 800a074:	4603      	mov	r3, r0
 800a076:	460c      	mov	r4, r1
 800a078:	4618      	mov	r0, r3
 800a07a:	4621      	mov	r1, r4
 800a07c:	f7fe fca4 	bl	80089c8 <__aeabi_d2iz>
 800a080:	4603      	mov	r3, r0
 800a082:	60bb      	str	r3, [r7, #8]

	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	Calc = SearchOrFast;//Fastでは1を代入。
 800a084:	4b3b      	ldr	r3, [pc, #236]	; (800a174 <Accel+0x17c>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a3b      	ldr	r2, [pc, #236]	; (800a178 <Accel+0x180>)
 800a08a:	6013      	str	r3, [r2, #0]
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800a08c:	e035      	b.n	800a0fa <Accel+0x102>
	{
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 800a08e:	4b3b      	ldr	r3, [pc, #236]	; (800a17c <Accel+0x184>)
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	4618      	mov	r0, r3
 800a094:	f7fe f97e 	bl	8008394 <__aeabi_i2d>
 800a098:	4604      	mov	r4, r0
 800a09a:	460d      	mov	r5, r1
 800a09c:	68b8      	ldr	r0, [r7, #8]
 800a09e:	f7fe f979 	bl	8008394 <__aeabi_i2d>
 800a0a2:	a32d      	add	r3, pc, #180	; (adr r3, 800a158 <Accel+0x160>)
 800a0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a8:	f7fe f9de 	bl	8008468 <__aeabi_dmul>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	f7fe f822 	bl	80080fc <__adddf3>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	4625      	mov	r5, r4
 800a0be:	461c      	mov	r4, r3
 800a0c0:	4b2f      	ldr	r3, [pc, #188]	; (800a180 <Accel+0x188>)
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fe f965 	bl	8008394 <__aeabi_i2d>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	f7fe fc3b 	bl	800894c <__aeabi_dcmplt>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d100      	bne.n	800a0de <Accel+0xe6>
 800a0dc:	e00d      	b.n	800a0fa <Accel+0x102>
 800a0de:	4b26      	ldr	r3, [pc, #152]	; (800a178 <Accel+0x180>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d109      	bne.n	800a0fa <Accel+0x102>
		{
			wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 800a0e6:	f001 f9f1 	bl	800b4cc <wall_set>
			//計算して
			make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	2103      	movs	r1, #3
 800a0ee:	2005      	movs	r0, #5
 800a0f0:	f001 fb5e 	bl	800b7b0 <make_map>
			//UpdateWalkMap();
			//次のアクションを渡すのは別のところで。
			Calc = 1;
 800a0f4:	4b20      	ldr	r3, [pc, #128]	; (800a178 <Accel+0x180>)
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	601a      	str	r2, [r3, #0]
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800a0fa:	4b20      	ldr	r3, [pc, #128]	; (800a17c <Accel+0x184>)
 800a0fc:	689a      	ldr	r2, [r3, #8]
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	441a      	add	r2, r3
 800a102:	4b1f      	ldr	r3, [pc, #124]	; (800a180 <Accel+0x188>)
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	429a      	cmp	r2, r3
 800a108:	dcc1      	bgt.n	800a08e <Accel+0x96>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			KeepCounter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	Acceleration = 0;
 800a10a:	4b19      	ldr	r3, [pc, #100]	; (800a170 <Accel+0x178>)
 800a10c:	f04f 0200 	mov.w	r2, #0
 800a110:	601a      	str	r2, [r3, #0]
	//壁読んで、

	KeepPulse[BODY] += target_pulse;
 800a112:	4b1a      	ldr	r3, [pc, #104]	; (800a17c <Accel+0x184>)
 800a114:	689a      	ldr	r2, [r3, #8]
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	4413      	add	r3, r2
 800a11a:	4a18      	ldr	r2, [pc, #96]	; (800a17c <Accel+0x184>)
 800a11c:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a11e:	4b17      	ldr	r3, [pc, #92]	; (800a17c <Accel+0x184>)
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	0fd9      	lsrs	r1, r3, #31
 800a126:	440b      	add	r3, r1
 800a128:	105b      	asrs	r3, r3, #1
 800a12a:	4413      	add	r3, r2
 800a12c:	4a13      	ldr	r2, [pc, #76]	; (800a17c <Accel+0x184>)
 800a12e:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a130:	4b12      	ldr	r3, [pc, #72]	; (800a17c <Accel+0x184>)
 800a132:	685a      	ldr	r2, [r3, #4]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	0fd9      	lsrs	r1, r3, #31
 800a138:	440b      	add	r3, r1
 800a13a:	105b      	asrs	r3, r3, #1
 800a13c:	4413      	add	r3, r2
 800a13e:	4a0f      	ldr	r2, [pc, #60]	; (800a17c <Accel+0x184>)
 800a140:	6053      	str	r3, [r2, #4]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 800a142:	bf00      	nop
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bdb0      	pop	{r4, r5, r7, pc}
 800a14a:	bf00      	nop
 800a14c:	f3af 8000 	nop.w
 800a150:	6fa23a53 	.word	0x6fa23a53
 800a154:	3f5028d9 	.word	0x3f5028d9
 800a158:	9999999a 	.word	0x9999999a
 800a15c:	3fe99999 	.word	0x3fe99999
 800a160:	20000000 	.word	0x20000000
 800a164:	2000fef8 	.word	0x2000fef8
 800a168:	2000ff24 	.word	0x2000ff24
 800a16c:	3a83126f 	.word	0x3a83126f
 800a170:	2000fc28 	.word	0x2000fc28
 800a174:	20010598 	.word	0x20010598
 800a178:	2001059c 	.word	0x2001059c
 800a17c:	2000ff4c 	.word	0x2000ff4c
 800a180:	2000ff18 	.word	0x2000ff18
 800a184:	00000000 	.word	0x00000000

0800a188 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 800a188:	b5b0      	push	{r4, r5, r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	ed87 0a01 	vstr	s0, [r7, #4]
 800a192:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = decel;
 800a196:	4b60      	ldr	r3, [pc, #384]	; (800a318 <Decel+0x190>)
 800a198:	2201      	movs	r2, #1
 800a19a:	711a      	strb	r2, [r3, #4]
	//int keep_pulse = TotalPulse[BODY];
	float down_speed=0;
 800a19c:	f04f 0300 	mov.w	r3, #0
 800a1a0:	60fb      	str	r3, [r7, #12]
	down_speed = CurrentVelocity[BODY] - end_speed;
 800a1a2:	4b5e      	ldr	r3, [pc, #376]	; (800a31c <Decel+0x194>)
 800a1a4:	ed93 7a02 	vldr	s14, [r3, #8]
 800a1a8:	edd7 7a00 	vldr	s15, [r7]
 800a1ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1b0:	edc7 7a03 	vstr	s15, [r7, #12]
	//速度減分 = 到達したい探索速度 - 現在の速度
	//これなら現在速度が探索速度に追いついているときは加速度0にできる。
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 800a1b4:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1b8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800a320 <Decel+0x198>
 800a1bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a1c0:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1c4:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a1c8:	edd7 7a01 	vldr	s15, [r7, #4]
 800a1cc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a1d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1d4:	eef1 7a67 	vneg.f32	s15, s15
 800a1d8:	4b52      	ldr	r3, [pc, #328]	; (800a324 <Decel+0x19c>)
 800a1da:	edc3 7a00 	vstr	s15, [r3]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	WallSafe();
 800a1de:	f7fe ff8b 	bl	80090f8 <WallSafe>
	ControlWall();
 800a1e2:	f7fe ffa1 	bl	8009128 <ControlWall>
	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 800a1e6:	edd7 7a01 	vldr	s15, [r7, #4]
 800a1ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a1ee:	ee17 0a90 	vmov	r0, s15
 800a1f2:	f7fe f8e1 	bl	80083b8 <__aeabi_f2d>
 800a1f6:	a344      	add	r3, pc, #272	; (adr r3, 800a308 <Decel+0x180>)
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f7fe fa5e 	bl	80086bc <__aeabi_ddiv>
 800a200:	4603      	mov	r3, r0
 800a202:	460c      	mov	r4, r1
 800a204:	4618      	mov	r0, r3
 800a206:	4621      	mov	r1, r4
 800a208:	f7fe fbde 	bl	80089c8 <__aeabi_d2iz>
 800a20c:	4603      	mov	r3, r0
 800a20e:	60bb      	str	r3, [r7, #8]
	//止まり切らずに壁に突っ込むのは、
		//適切なタイミングでwhileを抜けたのに出力の反映が遅れたパターンと、
		//これより前の直進が長くても壁センサのおかげで止まれるはずなので出力が残っちゃったパターン。
		//かもしくは条件が成立しちゃっているセンサ値が問題のパターン。
	//スラロームのあとはKeepPulse[BODY]が変わっていないので、そのせいで減速距離が取れていない可能性がある。壁センサも一応見る
	while(/* (	(Photo[FR]+Photo[FL]) < 3800) && */( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800a210:	e052      	b.n	800a2b8 <Decel+0x130>
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			KeepCounter[RIGHT] = INITIAL_PULSE;
//		}
		//式の順番はあとで前後するかも
		//ControlWall();
		if(TargetVelocity[BODY] <= 0)
 800a212:	4b45      	ldr	r3, [pc, #276]	; (800a328 <Decel+0x1a0>)
 800a214:	edd3 7a02 	vldr	s15, [r3, #8]
 800a218:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a220:	d810      	bhi.n	800a244 <Decel+0xbc>
		{
			TargetVelocity[BODY] = 0;
 800a222:	4b41      	ldr	r3, [pc, #260]	; (800a328 <Decel+0x1a0>)
 800a224:	f04f 0200 	mov.w	r2, #0
 800a228:	609a      	str	r2, [r3, #8]
			Acceleration = 0;
 800a22a:	4b3e      	ldr	r3, [pc, #248]	; (800a324 <Decel+0x19c>)
 800a22c:	f04f 0200 	mov.w	r2, #0
 800a230:	601a      	str	r2, [r3, #0]
			TargetAngularV = 0;
 800a232:	4b3e      	ldr	r3, [pc, #248]	; (800a32c <Decel+0x1a4>)
 800a234:	f04f 0200 	mov.w	r2, #0
 800a238:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 800a23a:	4b3d      	ldr	r3, [pc, #244]	; (800a330 <Decel+0x1a8>)
 800a23c:	f04f 0200 	mov.w	r2, #0
 800a240:	601a      	str	r2, [r3, #0]
			break;
 800a242:	e041      	b.n	800a2c8 <Decel+0x140>
		}
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 800a244:	4b3b      	ldr	r3, [pc, #236]	; (800a334 <Decel+0x1ac>)
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fe f8a3 	bl	8008394 <__aeabi_i2d>
 800a24e:	4604      	mov	r4, r0
 800a250:	460d      	mov	r5, r1
 800a252:	68b8      	ldr	r0, [r7, #8]
 800a254:	f7fe f89e 	bl	8008394 <__aeabi_i2d>
 800a258:	a32d      	add	r3, pc, #180	; (adr r3, 800a310 <Decel+0x188>)
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	f7fe f903 	bl	8008468 <__aeabi_dmul>
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	4620      	mov	r0, r4
 800a268:	4629      	mov	r1, r5
 800a26a:	f7fd ff47 	bl	80080fc <__adddf3>
 800a26e:	4603      	mov	r3, r0
 800a270:	460c      	mov	r4, r1
 800a272:	4625      	mov	r5, r4
 800a274:	461c      	mov	r4, r3
 800a276:	4b30      	ldr	r3, [pc, #192]	; (800a338 <Decel+0x1b0>)
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7fe f88a 	bl	8008394 <__aeabi_i2d>
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	4620      	mov	r0, r4
 800a286:	4629      	mov	r1, r5
 800a288:	f7fe fb60 	bl	800894c <__aeabi_dcmplt>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d100      	bne.n	800a294 <Decel+0x10c>
 800a292:	e011      	b.n	800a2b8 <Decel+0x130>
		{
			WallWarn();
 800a294:	f7fe ff3c 	bl	8009110 <WallWarn>
			//ControlWall();
			PIDChangeFlag(L_WALL_PID, 0);
 800a298:	2100      	movs	r1, #0
 800a29a:	2002      	movs	r0, #2
 800a29c:	f005 fcac 	bl	800fbf8 <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	2003      	movs	r0, #3
 800a2a4:	f005 fca8 	bl	800fbf8 <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	2001      	movs	r0, #1
 800a2ac:	f005 fca4 	bl	800fbf8 <PIDChangeFlag>
			PIDChangeFlag( A_VELO_PID , 1);
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	f005 fca0 	bl	800fbf8 <PIDChangeFlag>
	while(/* (	(Photo[FR]+Photo[FL]) < 3800) && */( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800a2b8:	4b1e      	ldr	r3, [pc, #120]	; (800a334 <Decel+0x1ac>)
 800a2ba:	689a      	ldr	r2, [r3, #8]
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	441a      	add	r2, r3
 800a2c0:	4b1d      	ldr	r3, [pc, #116]	; (800a338 <Decel+0x1b0>)
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	dca4      	bgt.n	800a212 <Decel+0x8a>

		}


	}
	WaitStopAndReset();
 800a2c8:	f7ff f846 	bl	8009358 <WaitStopAndReset>
	KeepPulse[BODY] += target_pulse;
 800a2cc:	4b19      	ldr	r3, [pc, #100]	; (800a334 <Decel+0x1ac>)
 800a2ce:	689a      	ldr	r2, [r3, #8]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	4a17      	ldr	r2, [pc, #92]	; (800a334 <Decel+0x1ac>)
 800a2d6:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a2d8:	4b16      	ldr	r3, [pc, #88]	; (800a334 <Decel+0x1ac>)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	0fd9      	lsrs	r1, r3, #31
 800a2e0:	440b      	add	r3, r1
 800a2e2:	105b      	asrs	r3, r3, #1
 800a2e4:	4413      	add	r3, r2
 800a2e6:	4a13      	ldr	r2, [pc, #76]	; (800a334 <Decel+0x1ac>)
 800a2e8:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a2ea:	4b12      	ldr	r3, [pc, #72]	; (800a334 <Decel+0x1ac>)
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	0fd9      	lsrs	r1, r3, #31
 800a2f2:	440b      	add	r3, r1
 800a2f4:	105b      	asrs	r3, r3, #1
 800a2f6:	4413      	add	r3, r2
 800a2f8:	4a0e      	ldr	r2, [pc, #56]	; (800a334 <Decel+0x1ac>)
 800a2fa:	6053      	str	r3, [r2, #4]


}
 800a2fc:	bf00      	nop
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bdb0      	pop	{r4, r5, r7, pc}
 800a304:	f3af 8000 	nop.w
 800a308:	6fa23a53 	.word	0x6fa23a53
 800a30c:	3f5028d9 	.word	0x3f5028d9
 800a310:	cccccccd 	.word	0xcccccccd
 800a314:	3fe4cccc 	.word	0x3fe4cccc
 800a318:	20000000 	.word	0x20000000
 800a31c:	2000ff24 	.word	0x2000ff24
 800a320:	3a83126f 	.word	0x3a83126f
 800a324:	2000fc28 	.word	0x2000fc28
 800a328:	2000fee8 	.word	0x2000fee8
 800a32c:	2000fef8 	.word	0x2000fef8
 800a330:	2000fc2c 	.word	0x2000fc2c
 800a334:	2000ff4c 	.word	0x2000ff4c
 800a338:	2000ff18 	.word	0x2000ff18
 800a33c:	00000000 	.word	0x00000000

0800a340 <Calib>:
//色々な処理を合わせて先に関数を作ってしまう方がいいかも。
//加速だけ、減速だけ、定速で、などを組み合わせて台形加減速で一区画走る、とか数区画走れる、途中で壁を見る、とか。
void Calib(int distance)
{
 800a340:	b590      	push	{r4, r7, lr}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
	//Pos.を考え中
	int target_pulse = (int)(2*distance/MM_PER_PULSE);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	005b      	lsls	r3, r3, #1
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7fe f821 	bl	8008394 <__aeabi_i2d>
 800a352:	a32b      	add	r3, pc, #172	; (adr r3, 800a400 <Calib+0xc0>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	f7fe f9b0 	bl	80086bc <__aeabi_ddiv>
 800a35c:	4603      	mov	r3, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	4618      	mov	r0, r3
 800a362:	4621      	mov	r1, r4
 800a364:	f7fe fb30 	bl	80089c8 <__aeabi_d2iz>
 800a368:	4603      	mov	r3, r0
 800a36a:	60fb      	str	r3, [r7, #12]
	//int keep_pulse = TotalPulse[BODY]+target_pulse;
	if(target_pulse > 0)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	dd15      	ble.n	800a39e <Calib+0x5e>
	{
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 800a372:	e006      	b.n	800a382 <Calib+0x42>
		{
			Acceleration = 0;
 800a374:	4b1c      	ldr	r3, [pc, #112]	; (800a3e8 <Calib+0xa8>)
 800a376:	f04f 0200 	mov.w	r2, #0
 800a37a:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = 70;
 800a37c:	4b1b      	ldr	r3, [pc, #108]	; (800a3ec <Calib+0xac>)
 800a37e:	4a1c      	ldr	r2, [pc, #112]	; (800a3f0 <Calib+0xb0>)
 800a380:	609a      	str	r2, [r3, #8]
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 800a382:	4b1c      	ldr	r3, [pc, #112]	; (800a3f4 <Calib+0xb4>)
 800a384:	689a      	ldr	r2, [r3, #8]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	441a      	add	r2, r3
 800a38a:	4b1b      	ldr	r3, [pc, #108]	; (800a3f8 <Calib+0xb8>)
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	429a      	cmp	r2, r3
 800a390:	dcf0      	bgt.n	800a374 <Calib+0x34>
		}
		KeepPulse[BODY] += target_pulse;
 800a392:	4b18      	ldr	r3, [pc, #96]	; (800a3f4 <Calib+0xb4>)
 800a394:	689a      	ldr	r2, [r3, #8]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	4413      	add	r3, r2
 800a39a:	4a16      	ldr	r2, [pc, #88]	; (800a3f4 <Calib+0xb4>)
 800a39c:	6093      	str	r3, [r2, #8]

	}
	if(target_pulse < 0 )
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	da15      	bge.n	800a3d0 <Calib+0x90>
	{
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 800a3a4:	e006      	b.n	800a3b4 <Calib+0x74>
		{
			Acceleration = 0;
 800a3a6:	4b10      	ldr	r3, [pc, #64]	; (800a3e8 <Calib+0xa8>)
 800a3a8:	f04f 0200 	mov.w	r2, #0
 800a3ac:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = -100;
 800a3ae:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <Calib+0xac>)
 800a3b0:	4a12      	ldr	r2, [pc, #72]	; (800a3fc <Calib+0xbc>)
 800a3b2:	609a      	str	r2, [r3, #8]
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 800a3b4:	4b0f      	ldr	r3, [pc, #60]	; (800a3f4 <Calib+0xb4>)
 800a3b6:	689a      	ldr	r2, [r3, #8]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	441a      	add	r2, r3
 800a3bc:	4b0e      	ldr	r3, [pc, #56]	; (800a3f8 <Calib+0xb8>)
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	dbf0      	blt.n	800a3a6 <Calib+0x66>
		}
		KeepPulse[BODY] += target_pulse;
 800a3c4:	4b0b      	ldr	r3, [pc, #44]	; (800a3f4 <Calib+0xb4>)
 800a3c6:	689a      	ldr	r2, [r3, #8]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	4a09      	ldr	r2, [pc, #36]	; (800a3f4 <Calib+0xb4>)
 800a3ce:	6093      	str	r3, [r2, #8]
	}
	TargetVelocity[BODY] = 0;
 800a3d0:	4b06      	ldr	r3, [pc, #24]	; (800a3ec <Calib+0xac>)
 800a3d2:	f04f 0200 	mov.w	r2, #0
 800a3d6:	609a      	str	r2, [r3, #8]
	Acceleration = 0;
 800a3d8:	4b03      	ldr	r3, [pc, #12]	; (800a3e8 <Calib+0xa8>)
 800a3da:	f04f 0200 	mov.w	r2, #0
 800a3de:	601a      	str	r2, [r3, #0]
}
 800a3e0:	bf00      	nop
 800a3e2:	3714      	adds	r7, #20
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd90      	pop	{r4, r7, pc}
 800a3e8:	2000fc28 	.word	0x2000fc28
 800a3ec:	2000fee8 	.word	0x2000fee8
 800a3f0:	428c0000 	.word	0x428c0000
 800a3f4:	2000ff4c 	.word	0x2000ff4c
 800a3f8:	2000ff18 	.word	0x2000ff18
 800a3fc:	c2c80000 	.word	0xc2c80000
 800a400:	6fa23a53 	.word	0x6fa23a53
 800a404:	3f5028d9 	.word	0x3f5028d9

0800a408 <Compensate>:
void Compensate()
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	af00      	add	r7, sp, #0
	//誤差補正する
	//Pos.を考え中
	Pos.Act = compensate;
 800a40c:	4b04      	ldr	r3, [pc, #16]	; (800a420 <Compensate+0x18>)
 800a40e:	2206      	movs	r2, #6
 800a410:	711a      	strb	r2, [r3, #4]
	TargetPhoto[FL];

#else
	//バック補正
	//ControlWall();
	Calib(-50);
 800a412:	f06f 0031 	mvn.w	r0, #49	; 0x31
 800a416:	f7ff ff93 	bl	800a340 <Calib>

//	Accel(7,-70);
//	Decel(7,0);
#endif

}
 800a41a:	bf00      	nop
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	20000000 	.word	0x20000000

0800a424 <AjustCenter>:
float AjustCenter(){
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
	//x,y,lrfb
	PIDChangeFlag(L_WALL_PID, 0);
 800a42a:	2100      	movs	r1, #0
 800a42c:	2002      	movs	r0, #2
 800a42e:	f005 fbe3 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800a432:	2100      	movs	r1, #0
 800a434:	2003      	movs	r0, #3
 800a436:	f005 fbdf 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800a43a:	2100      	movs	r1, #0
 800a43c:	2001      	movs	r0, #1
 800a43e:	f005 fbdb 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag( A_VELO_PID, 0);
 800a442:	2100      	movs	r1, #0
 800a444:	2000      	movs	r0, #0
 800a446:	f005 fbd7 	bl	800fbf8 <PIDChangeFlag>

	int wall_ctrl = GetWallCtrlDirection();
 800a44a:	f7fe fcf1 	bl	8008e30 <GetWallCtrlDirection>
 800a44e:	6078      	str	r0, [r7, #4]
	PIDChangeFlag(wall_ctrl, 1);
 800a450:	2101      	movs	r1, #1
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f005 fbd0 	bl	800fbf8 <PIDChangeFlag>

	switch(Pos.Car%4)
 800a458:	4b7a      	ldr	r3, [pc, #488]	; (800a644 <AjustCenter+0x220>)
 800a45a:	78db      	ldrb	r3, [r3, #3]
 800a45c:	f003 0303 	and.w	r3, r3, #3
 800a460:	2b03      	cmp	r3, #3
 800a462:	f200 80d2 	bhi.w	800a60a <AjustCenter+0x1e6>
 800a466:	a201      	add	r2, pc, #4	; (adr r2, 800a46c <AjustCenter+0x48>)
 800a468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46c:	0800a47d 	.word	0x0800a47d
 800a470:	0800a4e3 	.word	0x0800a4e3
 800a474:	0800a547 	.word	0x0800a547
 800a478:	0800a5a9 	.word	0x0800a5a9
	{
	case north: //use west or north wall
			if (Wall[Pos.X][Pos.Y].north == wall) //前に壁があれば前で調整
 800a47c:	4b71      	ldr	r3, [pc, #452]	; (800a644 <AjustCenter+0x220>)
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	4618      	mov	r0, r3
 800a482:	4b70      	ldr	r3, [pc, #448]	; (800a644 <AjustCenter+0x220>)
 800a484:	785b      	ldrb	r3, [r3, #1]
 800a486:	4619      	mov	r1, r3
 800a488:	4a6f      	ldr	r2, [pc, #444]	; (800a648 <AjustCenter+0x224>)
 800a48a:	0103      	lsls	r3, r0, #4
 800a48c:	440b      	add	r3, r1
 800a48e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a492:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a496:	b2db      	uxtb	r3, r3
 800a498:	2b01      	cmp	r3, #1
 800a49a:	f000 80b8 	beq.w	800a60e <AjustCenter+0x1ea>
			{
				//前壁調整
					//前壁との距離と前二つの差分、左右の壁とのバランスが安定するまで制御ループ

			}
			else if (Wall[Pos.X][Pos.Y].south == wall) //後ろに壁があるときはバック
 800a49e:	4b69      	ldr	r3, [pc, #420]	; (800a644 <AjustCenter+0x220>)
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	4b67      	ldr	r3, [pc, #412]	; (800a644 <AjustCenter+0x220>)
 800a4a6:	785b      	ldrb	r3, [r3, #1]
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	4a67      	ldr	r2, [pc, #412]	; (800a648 <AjustCenter+0x224>)
 800a4ac:	0103      	lsls	r3, r0, #4
 800a4ae:	440b      	add	r3, r1
 800a4b0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a4b4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	f040 80a7 	bne.w	800a60e <AjustCenter+0x1ea>
			{
				Compensate();	//後ろ壁調整
 800a4c0:	f7ff ffa2 	bl	800a408 <Compensate>

				Pid[wall_ctrl].flag = 0;
 800a4c4:	4a61      	ldr	r2, [pc, #388]	; (800a64c <AjustCenter+0x228>)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	212c      	movs	r1, #44	; 0x2c
 800a4ca:	fb01 f303 	mul.w	r3, r1, r3
 800a4ce:	4413      	add	r3, r2
 800a4d0:	3328      	adds	r3, #40	; 0x28
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]
				TargetAngularV = 0;
 800a4d6:	4b5e      	ldr	r3, [pc, #376]	; (800a650 <AjustCenter+0x22c>)
 800a4d8:	f04f 0200 	mov.w	r2, #0
 800a4dc:	601a      	str	r2, [r3, #0]
				return 61.5;
 800a4de:	4b5d      	ldr	r3, [pc, #372]	; (800a654 <AjustCenter+0x230>)
 800a4e0:	e0a8      	b.n	800a634 <AjustCenter+0x210>
			}
		break;
	case east:
			if (Wall[Pos.X][Pos.Y].east == wall) //前に壁があれば前で調整
 800a4e2:	4b58      	ldr	r3, [pc, #352]	; (800a644 <AjustCenter+0x220>)
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	4b56      	ldr	r3, [pc, #344]	; (800a644 <AjustCenter+0x220>)
 800a4ea:	785b      	ldrb	r3, [r3, #1]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	4a56      	ldr	r2, [pc, #344]	; (800a648 <AjustCenter+0x224>)
 800a4f0:	0103      	lsls	r3, r0, #4
 800a4f2:	440b      	add	r3, r1
 800a4f4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a4f8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	f000 8087 	beq.w	800a612 <AjustCenter+0x1ee>
			{
				//前壁調整
			}
			else if (Wall[Pos.X][Pos.Y].west == wall) //後ろに壁があるときはバック
 800a504:	4b4f      	ldr	r3, [pc, #316]	; (800a644 <AjustCenter+0x220>)
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	4618      	mov	r0, r3
 800a50a:	4b4e      	ldr	r3, [pc, #312]	; (800a644 <AjustCenter+0x220>)
 800a50c:	785b      	ldrb	r3, [r3, #1]
 800a50e:	4619      	mov	r1, r3
 800a510:	4a4d      	ldr	r2, [pc, #308]	; (800a648 <AjustCenter+0x224>)
 800a512:	0103      	lsls	r3, r0, #4
 800a514:	440b      	add	r3, r1
 800a516:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a51a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	2b01      	cmp	r3, #1
 800a522:	d176      	bne.n	800a612 <AjustCenter+0x1ee>
			{
				Compensate();//後ろ壁調整
 800a524:	f7ff ff70 	bl	800a408 <Compensate>
				Pid[wall_ctrl].flag = 0;
 800a528:	4a48      	ldr	r2, [pc, #288]	; (800a64c <AjustCenter+0x228>)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	212c      	movs	r1, #44	; 0x2c
 800a52e:	fb01 f303 	mul.w	r3, r1, r3
 800a532:	4413      	add	r3, r2
 800a534:	3328      	adds	r3, #40	; 0x28
 800a536:	2200      	movs	r2, #0
 800a538:	601a      	str	r2, [r3, #0]
				TargetAngularV = 0;
 800a53a:	4b45      	ldr	r3, [pc, #276]	; (800a650 <AjustCenter+0x22c>)
 800a53c:	f04f 0200 	mov.w	r2, #0
 800a540:	601a      	str	r2, [r3, #0]
				return 61.5;
 800a542:	4b44      	ldr	r3, [pc, #272]	; (800a654 <AjustCenter+0x230>)
 800a544:	e076      	b.n	800a634 <AjustCenter+0x210>
			}
		break;
	case south:
			if (Wall[Pos.X][Pos.Y].south == wall) //前に壁があれば前で調整
 800a546:	4b3f      	ldr	r3, [pc, #252]	; (800a644 <AjustCenter+0x220>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	4618      	mov	r0, r3
 800a54c:	4b3d      	ldr	r3, [pc, #244]	; (800a644 <AjustCenter+0x220>)
 800a54e:	785b      	ldrb	r3, [r3, #1]
 800a550:	4619      	mov	r1, r3
 800a552:	4a3d      	ldr	r2, [pc, #244]	; (800a648 <AjustCenter+0x224>)
 800a554:	0103      	lsls	r3, r0, #4
 800a556:	440b      	add	r3, r1
 800a558:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a55c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a560:	b2db      	uxtb	r3, r3
 800a562:	2b01      	cmp	r3, #1
 800a564:	d057      	beq.n	800a616 <AjustCenter+0x1f2>
			{
				//前壁調整
			}
			else if (Wall[Pos.X][Pos.Y].north == wall) //後ろに壁があるときはバック
 800a566:	4b37      	ldr	r3, [pc, #220]	; (800a644 <AjustCenter+0x220>)
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	4618      	mov	r0, r3
 800a56c:	4b35      	ldr	r3, [pc, #212]	; (800a644 <AjustCenter+0x220>)
 800a56e:	785b      	ldrb	r3, [r3, #1]
 800a570:	4619      	mov	r1, r3
 800a572:	4a35      	ldr	r2, [pc, #212]	; (800a648 <AjustCenter+0x224>)
 800a574:	0103      	lsls	r3, r0, #4
 800a576:	440b      	add	r3, r1
 800a578:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a57c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b01      	cmp	r3, #1
 800a584:	d147      	bne.n	800a616 <AjustCenter+0x1f2>
			{
				Compensate();//後ろ壁調整
 800a586:	f7ff ff3f 	bl	800a408 <Compensate>
				Pid[wall_ctrl].flag = 0;
 800a58a:	4a30      	ldr	r2, [pc, #192]	; (800a64c <AjustCenter+0x228>)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	212c      	movs	r1, #44	; 0x2c
 800a590:	fb01 f303 	mul.w	r3, r1, r3
 800a594:	4413      	add	r3, r2
 800a596:	3328      	adds	r3, #40	; 0x28
 800a598:	2200      	movs	r2, #0
 800a59a:	601a      	str	r2, [r3, #0]
				TargetAngularV = 0;
 800a59c:	4b2c      	ldr	r3, [pc, #176]	; (800a650 <AjustCenter+0x22c>)
 800a59e:	f04f 0200 	mov.w	r2, #0
 800a5a2:	601a      	str	r2, [r3, #0]
				return 61.5;
 800a5a4:	4b2b      	ldr	r3, [pc, #172]	; (800a654 <AjustCenter+0x230>)
 800a5a6:	e045      	b.n	800a634 <AjustCenter+0x210>
			}
		break;
	case west:
			if (Wall[Pos.X][Pos.Y].west == wall) //前に壁があれば前で調整
 800a5a8:	4b26      	ldr	r3, [pc, #152]	; (800a644 <AjustCenter+0x220>)
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	4b25      	ldr	r3, [pc, #148]	; (800a644 <AjustCenter+0x220>)
 800a5b0:	785b      	ldrb	r3, [r3, #1]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	4a24      	ldr	r2, [pc, #144]	; (800a648 <AjustCenter+0x224>)
 800a5b6:	0103      	lsls	r3, r0, #4
 800a5b8:	440b      	add	r3, r1
 800a5ba:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a5be:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d020      	beq.n	800a60a <AjustCenter+0x1e6>
			{
				//前壁調整
			}
			else if (Wall[Pos.X][Pos.Y].east == wall) //後ろに壁があるときはバック
 800a5c8:	4b1e      	ldr	r3, [pc, #120]	; (800a644 <AjustCenter+0x220>)
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	4b1d      	ldr	r3, [pc, #116]	; (800a644 <AjustCenter+0x220>)
 800a5d0:	785b      	ldrb	r3, [r3, #1]
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	4a1c      	ldr	r2, [pc, #112]	; (800a648 <AjustCenter+0x224>)
 800a5d6:	0103      	lsls	r3, r0, #4
 800a5d8:	440b      	add	r3, r1
 800a5da:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a5de:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d110      	bne.n	800a60a <AjustCenter+0x1e6>
			{
				Compensate();//後ろ壁調整
 800a5e8:	f7ff ff0e 	bl	800a408 <Compensate>
				Pid[wall_ctrl].flag = 0;
 800a5ec:	4a17      	ldr	r2, [pc, #92]	; (800a64c <AjustCenter+0x228>)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	212c      	movs	r1, #44	; 0x2c
 800a5f2:	fb01 f303 	mul.w	r3, r1, r3
 800a5f6:	4413      	add	r3, r2
 800a5f8:	3328      	adds	r3, #40	; 0x28
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	601a      	str	r2, [r3, #0]
				TargetAngularV = 0;
 800a5fe:	4b14      	ldr	r3, [pc, #80]	; (800a650 <AjustCenter+0x22c>)
 800a600:	f04f 0200 	mov.w	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
				return 61.5;
 800a606:	4b13      	ldr	r3, [pc, #76]	; (800a654 <AjustCenter+0x230>)
 800a608:	e014      	b.n	800a634 <AjustCenter+0x210>
			}
	default:
		break;
 800a60a:	bf00      	nop
 800a60c:	e004      	b.n	800a618 <AjustCenter+0x1f4>
		break;
 800a60e:	bf00      	nop
 800a610:	e002      	b.n	800a618 <AjustCenter+0x1f4>
		break;
 800a612:	bf00      	nop
 800a614:	e000      	b.n	800a618 <AjustCenter+0x1f4>
		break;
 800a616:	bf00      	nop
	}
	Pid[wall_ctrl].flag = 0;
 800a618:	4a0c      	ldr	r2, [pc, #48]	; (800a64c <AjustCenter+0x228>)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	212c      	movs	r1, #44	; 0x2c
 800a61e:	fb01 f303 	mul.w	r3, r1, r3
 800a622:	4413      	add	r3, r2
 800a624:	3328      	adds	r3, #40	; 0x28
 800a626:	2200      	movs	r2, #0
 800a628:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 800a62a:	4b09      	ldr	r3, [pc, #36]	; (800a650 <AjustCenter+0x22c>)
 800a62c:	f04f 0200 	mov.w	r2, #0
 800a630:	601a      	str	r2, [r3, #0]
	return 45;
 800a632:	4b09      	ldr	r3, [pc, #36]	; (800a658 <AjustCenter+0x234>)
 800a634:	ee07 3a90 	vmov	s15, r3
}
 800a638:	eeb0 0a67 	vmov.f32	s0, s15
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20000000 	.word	0x20000000
 800a648:	20010398 	.word	0x20010398
 800a64c:	2000fd18 	.word	0x2000fd18
 800a650:	2000fef8 	.word	0x2000fef8
 800a654:	42760000 	.word	0x42760000
 800a658:	42340000 	.word	0x42340000
 800a65c:	00000000 	.word	0x00000000

0800a660 <GoStraight>:
void GoStraight(float move_distance,  float explore_speed, float accel)
{
 800a660:	b5b0      	push	{r4, r5, r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	ed87 0a03 	vstr	s0, [r7, #12]
 800a66a:	edc7 0a02 	vstr	s1, [r7, #8]
 800a66e:	ed87 1a01 	vstr	s2, [r7, #4]
	//explore_speed += accel;

	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	//移動量は90だけど、加速に要する距離はその半分とか好きに変えられるように。
	//int keep_pulse = TotalPulse[BODY];
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 800a672:	edd7 7a03 	vldr	s15, [r7, #12]
 800a676:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a67a:	ee17 0a90 	vmov	r0, s15
 800a67e:	f7fd fe9b 	bl	80083b8 <__aeabi_f2d>
 800a682:	a377      	add	r3, pc, #476	; (adr r3, 800a860 <GoStraight+0x200>)
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	f7fe f818 	bl	80086bc <__aeabi_ddiv>
 800a68c:	4603      	mov	r3, r0
 800a68e:	460c      	mov	r4, r1
 800a690:	4618      	mov	r0, r3
 800a692:	4621      	mov	r1, r4
 800a694:	f7fe f998 	bl	80089c8 <__aeabi_d2iz>
 800a698:	4603      	mov	r3, r0
 800a69a:	617b      	str	r3, [r7, #20]

	if(accel != 0) //加速するとき
 800a69c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a6a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a8:	d022      	beq.n	800a6f0 <GoStraight+0x90>
	{
		WallWarn();
 800a6aa:	f7fe fd31 	bl	8009110 <WallWarn>
		ControlWall();
 800a6ae:	f7fe fd3b 	bl	8009128 <ControlWall>
		Accel( move_distance/2 , explore_speed+accel);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 800a6b2:	edd7 7a03 	vldr	s15, [r7, #12]
 800a6b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a6ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a6be:	ed97 7a02 	vldr	s14, [r7, #8]
 800a6c2:	edd7 7a01 	vldr	s15, [r7, #4]
 800a6c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6ca:	eef0 0a67 	vmov.f32	s1, s15
 800a6ce:	eeb0 0a66 	vmov.f32	s0, s13
 800a6d2:	f7ff fc91 	bl	8009ff8 <Accel>
		while( ( KeepPulse[BODY] + (target_pulse/2)) > ( TotalPulse[BODY]) )
 800a6d6:	bf00      	nop
 800a6d8:	4b5b      	ldr	r3, [pc, #364]	; (800a848 <GoStraight+0x1e8>)
 800a6da:	689a      	ldr	r2, [r3, #8]
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	0fd9      	lsrs	r1, r3, #31
 800a6e0:	440b      	add	r3, r1
 800a6e2:	105b      	asrs	r3, r3, #1
 800a6e4:	441a      	add	r2, r3
 800a6e6:	4b59      	ldr	r3, [pc, #356]	; (800a84c <GoStraight+0x1ec>)
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	dcf4      	bgt.n	800a6d8 <GoStraight+0x78>
 800a6ee:	e082      	b.n	800a7f6 <GoStraight+0x196>
	//		}
		}
	}
	else
	{
		Pos.Act = straight;
 800a6f0:	4b57      	ldr	r3, [pc, #348]	; (800a850 <GoStraight+0x1f0>)
 800a6f2:	2205      	movs	r2, #5
 800a6f4:	711a      	strb	r2, [r3, #4]
		WallSafe();
 800a6f6:	f7fe fcff 	bl	80090f8 <WallSafe>
		ControlWall();
 800a6fa:	f7fe fd15 	bl	8009128 <ControlWall>
		Calc = SearchOrFast;
 800a6fe:	4b55      	ldr	r3, [pc, #340]	; (800a854 <GoStraight+0x1f4>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a55      	ldr	r2, [pc, #340]	; (800a858 <GoStraight+0x1f8>)
 800a704:	6013      	str	r3, [r2, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 800a706:	e06e      	b.n	800a7e6 <GoStraight+0x186>
		{
			//最初の45mmで加速をストップ
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 800a708:	4b4f      	ldr	r3, [pc, #316]	; (800a848 <GoStraight+0x1e8>)
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fd fe41 	bl	8008394 <__aeabi_i2d>
 800a712:	4604      	mov	r4, r0
 800a714:	460d      	mov	r5, r1
 800a716:	6978      	ldr	r0, [r7, #20]
 800a718:	f7fd fe3c 	bl	8008394 <__aeabi_i2d>
 800a71c:	a346      	add	r3, pc, #280	; (adr r3, 800a838 <GoStraight+0x1d8>)
 800a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a722:	f7fd fea1 	bl	8008468 <__aeabi_dmul>
 800a726:	4602      	mov	r2, r0
 800a728:	460b      	mov	r3, r1
 800a72a:	4620      	mov	r0, r4
 800a72c:	4629      	mov	r1, r5
 800a72e:	f7fd fce5 	bl	80080fc <__adddf3>
 800a732:	4603      	mov	r3, r0
 800a734:	460c      	mov	r4, r1
 800a736:	4625      	mov	r5, r4
 800a738:	461c      	mov	r4, r3
 800a73a:	4b44      	ldr	r3, [pc, #272]	; (800a84c <GoStraight+0x1ec>)
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	4618      	mov	r0, r3
 800a740:	f7fd fe28 	bl	8008394 <__aeabi_i2d>
 800a744:	4602      	mov	r2, r0
 800a746:	460b      	mov	r3, r1
 800a748:	4620      	mov	r0, r4
 800a74a:	4629      	mov	r1, r5
 800a74c:	f7fe f8fe 	bl	800894c <__aeabi_dcmplt>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d011      	beq.n	800a77a <GoStraight+0x11a>
			{
				WallWarn();
 800a756:	f7fe fcdb 	bl	8009110 <WallWarn>
				PIDChangeFlag(L_WALL_PID, 0);
 800a75a:	2100      	movs	r1, #0
 800a75c:	2002      	movs	r0, #2
 800a75e:	f005 fa4b 	bl	800fbf8 <PIDChangeFlag>
				PIDChangeFlag(R_WALL_PID, 0);
 800a762:	2100      	movs	r1, #0
 800a764:	2003      	movs	r0, #3
 800a766:	f005 fa47 	bl	800fbf8 <PIDChangeFlag>
				PIDChangeFlag(D_WALL_PID, 0);
 800a76a:	2100      	movs	r1, #0
 800a76c:	2001      	movs	r0, #1
 800a76e:	f005 fa43 	bl	800fbf8 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID , 1);
 800a772:	2101      	movs	r1, #1
 800a774:	2000      	movs	r0, #0
 800a776:	f005 fa3f 	bl	800fbf8 <PIDChangeFlag>
			}

			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 800a77a:	4b33      	ldr	r3, [pc, #204]	; (800a848 <GoStraight+0x1e8>)
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fd fe08 	bl	8008394 <__aeabi_i2d>
 800a784:	4604      	mov	r4, r0
 800a786:	460d      	mov	r5, r1
 800a788:	6978      	ldr	r0, [r7, #20]
 800a78a:	f7fd fe03 	bl	8008394 <__aeabi_i2d>
 800a78e:	a32c      	add	r3, pc, #176	; (adr r3, 800a840 <GoStraight+0x1e0>)
 800a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a794:	f7fd fe68 	bl	8008468 <__aeabi_dmul>
 800a798:	4602      	mov	r2, r0
 800a79a:	460b      	mov	r3, r1
 800a79c:	4620      	mov	r0, r4
 800a79e:	4629      	mov	r1, r5
 800a7a0:	f7fd fcac 	bl	80080fc <__adddf3>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	4625      	mov	r5, r4
 800a7aa:	461c      	mov	r4, r3
 800a7ac:	4b27      	ldr	r3, [pc, #156]	; (800a84c <GoStraight+0x1ec>)
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7fd fdef 	bl	8008394 <__aeabi_i2d>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	4629      	mov	r1, r5
 800a7be:	f7fe f8c5 	bl	800894c <__aeabi_dcmplt>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d100      	bne.n	800a7ca <GoStraight+0x16a>
 800a7c8:	e00d      	b.n	800a7e6 <GoStraight+0x186>
 800a7ca:	4b23      	ldr	r3, [pc, #140]	; (800a858 <GoStraight+0x1f8>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d109      	bne.n	800a7e6 <GoStraight+0x186>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 800a7d2:	f000 fe7b 	bl	800b4cc <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	2103      	movs	r1, #3
 800a7da:	2005      	movs	r0, #5
 800a7dc:	f000 ffe8 	bl	800b7b0 <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 800a7e0:	4b1d      	ldr	r3, [pc, #116]	; (800a858 <GoStraight+0x1f8>)
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	601a      	str	r2, [r3, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 800a7e6:	4b18      	ldr	r3, [pc, #96]	; (800a848 <GoStraight+0x1e8>)
 800a7e8:	689a      	ldr	r2, [r3, #8]
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	441a      	add	r2, r3
 800a7ee:	4b17      	ldr	r3, [pc, #92]	; (800a84c <GoStraight+0x1ec>)
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	dc88      	bgt.n	800a708 <GoStraight+0xa8>
	//余分に加速した場合、あとの減速で速度を落としきれないことになっていたので、減速時にその時の速度を使うようにした。
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
//	int target_pulse = (int)(2*(move_distance/2)/MM_PER_PULSE);
//	int keep_pulse = TotalPulse[BODY];
	//WallWarn();
	Acceleration = 0;
 800a7f6:	4b19      	ldr	r3, [pc, #100]	; (800a85c <GoStraight+0x1fc>)
 800a7f8:	f04f 0200 	mov.w	r2, #0
 800a7fc:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += target_pulse;
 800a7fe:	4b12      	ldr	r3, [pc, #72]	; (800a848 <GoStraight+0x1e8>)
 800a800:	689a      	ldr	r2, [r3, #8]
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	4413      	add	r3, r2
 800a806:	4a10      	ldr	r2, [pc, #64]	; (800a848 <GoStraight+0x1e8>)
 800a808:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a80a:	4b0f      	ldr	r3, [pc, #60]	; (800a848 <GoStraight+0x1e8>)
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	0fd9      	lsrs	r1, r3, #31
 800a812:	440b      	add	r3, r1
 800a814:	105b      	asrs	r3, r3, #1
 800a816:	4413      	add	r3, r2
 800a818:	4a0b      	ldr	r2, [pc, #44]	; (800a848 <GoStraight+0x1e8>)
 800a81a:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a81c:	4b0a      	ldr	r3, [pc, #40]	; (800a848 <GoStraight+0x1e8>)
 800a81e:	685a      	ldr	r2, [r3, #4]
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	0fd9      	lsrs	r1, r3, #31
 800a824:	440b      	add	r3, r1
 800a826:	105b      	asrs	r3, r3, #1
 800a828:	4413      	add	r3, r2
 800a82a:	4a07      	ldr	r2, [pc, #28]	; (800a848 <GoStraight+0x1e8>)
 800a82c:	6053      	str	r3, [r2, #4]

	//Uターンは別パターン

	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。

}
 800a82e:	bf00      	nop
 800a830:	3718      	adds	r7, #24
 800a832:	46bd      	mov	sp, r7
 800a834:	bdb0      	pop	{r4, r5, r7, pc}
 800a836:	bf00      	nop
 800a838:	9999999a 	.word	0x9999999a
 800a83c:	3fd99999 	.word	0x3fd99999
 800a840:	9999999a 	.word	0x9999999a
 800a844:	3fe99999 	.word	0x3fe99999
 800a848:	2000ff4c 	.word	0x2000ff4c
 800a84c:	2000ff18 	.word	0x2000ff18
 800a850:	20000000 	.word	0x20000000
 800a854:	20010598 	.word	0x20010598
 800a858:	2001059c 	.word	0x2001059c
 800a85c:	2000fc28 	.word	0x2000fc28
 800a860:	6fa23a53 	.word	0x6fa23a53
 800a864:	3f5028d9 	.word	0x3f5028d9

0800a868 <TurnRight>:
void TurnRight(char mode)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	4603      	mov	r3, r0
 800a870:	71fb      	strb	r3, [r7, #7]
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	2b53      	cmp	r3, #83	; 0x53
 800a876:	d023      	beq.n	800a8c0 <TurnRight+0x58>
 800a878:	2b54      	cmp	r3, #84	; 0x54
 800a87a:	d000      	beq.n	800a87e <TurnRight+0x16>
	case 'S':
		//スラローム
		SlalomRight();
		break;
	default :
		break;
 800a87c:	e023      	b.n	800a8c6 <TurnRight+0x5e>
		Decel(45, 0);
 800a87e:	eddf 0a14 	vldr	s1, [pc, #80]	; 800a8d0 <TurnRight+0x68>
 800a882:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800a8d4 <TurnRight+0x6c>
 800a886:	f7ff fc7f 	bl	800a188 <Decel>
		Rotate( 90 , 2*M_PI);//1.5
 800a88a:	eddf 0a13 	vldr	s1, [pc, #76]	; 800a8d8 <TurnRight+0x70>
 800a88e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a8dc <TurnRight+0x74>
 800a892:	f7fe fda5 	bl	80093e0 <Rotate>
		float acc = AjustCenter();
 800a896:	f7ff fdc5 	bl	800a424 <AjustCenter>
 800a89a:	ed87 0a03 	vstr	s0, [r7, #12]
		HAL_Delay(100);
 800a89e:	2064      	movs	r0, #100	; 0x64
 800a8a0:	f005 fcd0 	bl	8010244 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	f005 f9a6 	bl	800fbf8 <PIDChangeFlag>
		Accel(acc, ExploreVelocity);
 800a8ac:	4b0c      	ldr	r3, [pc, #48]	; (800a8e0 <TurnRight+0x78>)
 800a8ae:	edd3 7a00 	vldr	s15, [r3]
 800a8b2:	eef0 0a67 	vmov.f32	s1, s15
 800a8b6:	ed97 0a03 	vldr	s0, [r7, #12]
 800a8ba:	f7ff fb9d 	bl	8009ff8 <Accel>
		break;
 800a8be:	e002      	b.n	800a8c6 <TurnRight+0x5e>
		SlalomRight();
 800a8c0:	f7fe ffd2 	bl	8009868 <SlalomRight>
		break;
 800a8c4:	bf00      	nop
	}


}
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	00000000 	.word	0x00000000
 800a8d4:	42340000 	.word	0x42340000
 800a8d8:	40c90fdb 	.word	0x40c90fdb
 800a8dc:	42b40000 	.word	0x42b40000
 800a8e0:	20010168 	.word	0x20010168

0800a8e4 <TurnLeft>:
void TurnLeft(char mode)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	71fb      	strb	r3, [r7, #7]
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800a8ee:	79fb      	ldrb	r3, [r7, #7]
 800a8f0:	2b53      	cmp	r3, #83	; 0x53
 800a8f2:	d026      	beq.n	800a942 <TurnLeft+0x5e>
 800a8f4:	2b54      	cmp	r3, #84	; 0x54
 800a8f6:	d000      	beq.n	800a8fa <TurnLeft+0x16>
	case 'S':
		//スラローム
		SlalomLeft();
		break;
	default :
		break;
 800a8f8:	e026      	b.n	800a948 <TurnLeft+0x64>
		Decel(45, 0);
 800a8fa:	eddf 0a15 	vldr	s1, [pc, #84]	; 800a950 <TurnLeft+0x6c>
 800a8fe:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800a954 <TurnLeft+0x70>
 800a902:	f7ff fc41 	bl	800a188 <Decel>
		Rotate( 90 , -2*M_PI);//-1.5
 800a906:	eddf 0a14 	vldr	s1, [pc, #80]	; 800a958 <TurnLeft+0x74>
 800a90a:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800a95c <TurnLeft+0x78>
 800a90e:	f7fe fd67 	bl	80093e0 <Rotate>
		HAL_Delay(100);
 800a912:	2064      	movs	r0, #100	; 0x64
 800a914:	f005 fc96 	bl	8010244 <HAL_Delay>
		float acc = AjustCenter();
 800a918:	f7ff fd84 	bl	800a424 <AjustCenter>
 800a91c:	ed87 0a03 	vstr	s0, [r7, #12]
		HAL_Delay(100);
 800a920:	2064      	movs	r0, #100	; 0x64
 800a922:	f005 fc8f 	bl	8010244 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800a926:	2101      	movs	r1, #1
 800a928:	2000      	movs	r0, #0
 800a92a:	f005 f965 	bl	800fbf8 <PIDChangeFlag>
		Accel(acc, ExploreVelocity);
 800a92e:	4b0c      	ldr	r3, [pc, #48]	; (800a960 <TurnLeft+0x7c>)
 800a930:	edd3 7a00 	vldr	s15, [r3]
 800a934:	eef0 0a67 	vmov.f32	s1, s15
 800a938:	ed97 0a03 	vldr	s0, [r7, #12]
 800a93c:	f7ff fb5c 	bl	8009ff8 <Accel>
		break;
 800a940:	e002      	b.n	800a948 <TurnLeft+0x64>
		SlalomLeft();
 800a942:	f7ff f97d 	bl	8009c40 <SlalomLeft>
		break;
 800a946:	bf00      	nop
	}

}
 800a948:	bf00      	nop
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	00000000 	.word	0x00000000
 800a954:	42340000 	.word	0x42340000
 800a958:	c0c90fdb 	.word	0xc0c90fdb
 800a95c:	42b40000 	.word	0x42b40000
 800a960:	20010168 	.word	0x20010168

0800a964 <GoBack>:
void GoBack()
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
	//減速して
	Decel(45, 0);
 800a96a:	eddf 0a10 	vldr	s1, [pc, #64]	; 800a9ac <GoBack+0x48>
 800a96e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a9b0 <GoBack+0x4c>
 800a972:	f7ff fc09 	bl	800a188 <Decel>
	//補正して
	//Compensate();
	//Calib();
	//回転して
#if 1
	Rotate(180, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 800a976:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800a9b4 <GoBack+0x50>
 800a97a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800a9b8 <GoBack+0x54>
 800a97e:	f7fe fd2f 	bl	80093e0 <Rotate>
	RotateTest(180);
	AjustCenter();

#endif

	float acc = AjustCenter();
 800a982:	f7ff fd4f 	bl	800a424 <AjustCenter>
 800a986:	ed87 0a01 	vstr	s0, [r7, #4]
	//TargetAngle += 180*M_PI/180;
	//加速する
//	PIDReset(L_VELO_PID);
//	PIDReset(R_VELO_PID);
//	PIDReset(A_VELO_PID);
	HAL_Delay(200);
 800a98a:	20c8      	movs	r0, #200	; 0xc8
 800a98c:	f005 fc5a 	bl	8010244 <HAL_Delay>

//	Compensate();
	//PIDChangeFlag( A_VELO_PID, 1);
	Accel(acc, ExploreVelocity);
 800a990:	4b0a      	ldr	r3, [pc, #40]	; (800a9bc <GoBack+0x58>)
 800a992:	edd3 7a00 	vldr	s15, [r3]
 800a996:	eef0 0a67 	vmov.f32	s1, s15
 800a99a:	ed97 0a01 	vldr	s0, [r7, #4]
 800a99e:	f7ff fb2b 	bl	8009ff8 <Accel>
	//ここまでで目標走行距離を完了する

}
 800a9a2:	bf00      	nop
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	00000000 	.word	0x00000000
 800a9b0:	42340000 	.word	0x42340000
 800a9b4:	40c90fdb 	.word	0x40c90fdb
 800a9b8:	43340000 	.word	0x43340000
 800a9bc:	20010168 	.word	0x20010168

0800a9c0 <SelectAction>:
//{
//
//}
//進行方向決定の処理をどうするかで書き方が変わる。フラグを使うとか。
void SelectAction(char turn_mode)	//前後左右であらわす
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	71fb      	strb	r3, [r7, #7]
	//現在の座標から次の座標に行くまでの処理を一つのアクションとする
	switch(Pos.Dir%4) //条件を増やす場合は割る数字に注意
 800a9ca:	4b1b      	ldr	r3, [pc, #108]	; (800aa38 <SelectAction+0x78>)
 800a9cc:	789b      	ldrb	r3, [r3, #2]
 800a9ce:	f003 0303 	and.w	r3, r3, #3
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	d82a      	bhi.n	800aa2c <SelectAction+0x6c>
 800a9d6:	a201      	add	r2, pc, #4	; (adr r2, 800a9dc <SelectAction+0x1c>)
 800a9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9dc:	0800a9ed 	.word	0x0800a9ed
 800a9e0:	0800aa13 	.word	0x0800aa13
 800a9e4:	0800aa27 	.word	0x0800aa27
 800a9e8:	0800aa1d 	.word	0x0800aa1d
	{
	//直進
	case front:
		//直進flagオン
		//PIDChangeFlag( A_VELO_PID, 1);
		AddVelocity = 0;
 800a9ec:	4b13      	ldr	r3, [pc, #76]	; (800aa3c <SelectAction+0x7c>)
 800a9ee:	f04f 0200 	mov.w	r2, #0
 800a9f2:	601a      	str	r2, [r3, #0]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800a9f4:	4b12      	ldr	r3, [pc, #72]	; (800aa40 <SelectAction+0x80>)
 800a9f6:	edd3 7a00 	vldr	s15, [r3]
 800a9fa:	4b10      	ldr	r3, [pc, #64]	; (800aa3c <SelectAction+0x7c>)
 800a9fc:	ed93 7a00 	vldr	s14, [r3]
 800aa00:	eeb0 1a47 	vmov.f32	s2, s14
 800aa04:	eef0 0a67 	vmov.f32	s1, s15
 800aa08:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800aa44 <SelectAction+0x84>
 800aa0c:	f7ff fe28 	bl	800a660 <GoStraight>

		break;
 800aa10:	e00d      	b.n	800aa2e <SelectAction+0x6e>
	//右方向
	case right:	//左右の違いは目標値がそれぞれ入れ替わるだけだから、上手く書けば一つの関数でできる
		//スラロームターンと減速プラスターンetc
		TurnRight(turn_mode);
 800aa12:	79fb      	ldrb	r3, [r7, #7]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7ff ff27 	bl	800a868 <TurnRight>
		break;
 800aa1a:	e008      	b.n	800aa2e <SelectAction+0x6e>
	//左方向
	case left:
		TurnLeft(turn_mode);
 800aa1c:	79fb      	ldrb	r3, [r7, #7]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff ff60 	bl	800a8e4 <TurnLeft>
		break;
 800aa24:	e003      	b.n	800aa2e <SelectAction+0x6e>
	case back:
		GoBack();	//Uターン
 800aa26:	f7ff ff9d 	bl	800a964 <GoBack>
		break;
 800aa2a:	e000      	b.n	800aa2e <SelectAction+0x6e>


	default :
		break;
 800aa2c:	bf00      	nop

	}
}
 800aa2e:	bf00      	nop
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	20000000 	.word	0x20000000
 800aa3c:	2000fef4 	.word	0x2000fef4
 800aa40:	20010168 	.word	0x20010168
 800aa44:	42b40000 	.word	0x42b40000

0800aa48 <Explore_IT>:
	//4つめが終わる前に0.5msが過ぎる説。
}


void Explore_IT()
{
 800aa48:	b5b0      	push	{r4, r5, r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0

//*-----------------*/

	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800aa4e:	4bb0      	ldr	r3, [pc, #704]	; (800ad10 <Explore_IT+0x2c8>)
 800aa50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa52:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800aa56:	332f      	adds	r3, #47	; 0x2f
 800aa58:	461a      	mov	r2, r3
 800aa5a:	4bae      	ldr	r3, [pc, #696]	; (800ad14 <Explore_IT+0x2cc>)
 800aa5c:	601a      	str	r2, [r3, #0]
	TIM3->CNT = INITIAL_PULSE;
 800aa5e:	4bac      	ldr	r3, [pc, #688]	; (800ad10 <Explore_IT+0x2c8>)
 800aa60:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa64:	625a      	str	r2, [r3, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800aa66:	4bac      	ldr	r3, [pc, #688]	; (800ad18 <Explore_IT+0x2d0>)
 800aa68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6a:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800aa6e:	332f      	adds	r3, #47	; 0x2f
 800aa70:	461a      	mov	r2, r3
 800aa72:	4ba8      	ldr	r3, [pc, #672]	; (800ad14 <Explore_IT+0x2cc>)
 800aa74:	605a      	str	r2, [r3, #4]
	TIM4->CNT = INITIAL_PULSE;
 800aa76:	4ba8      	ldr	r3, [pc, #672]	; (800ad18 <Explore_IT+0x2d0>)
 800aa78:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa7c:	625a      	str	r2, [r3, #36]	; 0x24

	//速度 mm/s
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800aa7e:	4ba5      	ldr	r3, [pc, #660]	; (800ad14 <Explore_IT+0x2cc>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	ee07 3a90 	vmov	s15, r3
 800aa86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa8a:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800ad1c <Explore_IT+0x2d4>
 800aa8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa92:	4ba3      	ldr	r3, [pc, #652]	; (800ad20 <Explore_IT+0x2d8>)
 800aa94:	edc3 7a00 	vstr	s15, [r3]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800aa98:	4b9e      	ldr	r3, [pc, #632]	; (800ad14 <Explore_IT+0x2cc>)
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	ee07 3a90 	vmov	s15, r3
 800aaa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aaa4:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 800ad1c <Explore_IT+0x2d4>
 800aaa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aaac:	4b9c      	ldr	r3, [pc, #624]	; (800ad20 <Explore_IT+0x2d8>)
 800aaae:	edc3 7a01 	vstr	s15, [r3, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800aab2:	4b9b      	ldr	r3, [pc, #620]	; (800ad20 <Explore_IT+0x2d8>)
 800aab4:	ed93 7a00 	vldr	s14, [r3]
 800aab8:	4b99      	ldr	r3, [pc, #612]	; (800ad20 <Explore_IT+0x2d8>)
 800aaba:	edd3 7a01 	vldr	s15, [r3, #4]
 800aabe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aac2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800aac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aaca:	4b95      	ldr	r3, [pc, #596]	; (800ad20 <Explore_IT+0x2d8>)
 800aacc:	edc3 7a02 	vstr	s15, [r3, #8]
	if((1 <= dbc) && (dbc <= 8000))
 800aad0:	4b94      	ldr	r3, [pc, #592]	; (800ad24 <Explore_IT+0x2dc>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	dd1b      	ble.n	800ab10 <Explore_IT+0xc8>
 800aad8:	4b92      	ldr	r3, [pc, #584]	; (800ad24 <Explore_IT+0x2dc>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800aae0:	dc16      	bgt.n	800ab10 <Explore_IT+0xc8>
	{
		debugVL[dbc-1] = CurrentVelocity[LEFT];
 800aae2:	4b90      	ldr	r3, [pc, #576]	; (800ad24 <Explore_IT+0x2dc>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	3b01      	subs	r3, #1
 800aae8:	4a8d      	ldr	r2, [pc, #564]	; (800ad20 <Explore_IT+0x2d8>)
 800aaea:	6812      	ldr	r2, [r2, #0]
 800aaec:	498e      	ldr	r1, [pc, #568]	; (800ad28 <Explore_IT+0x2e0>)
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	440b      	add	r3, r1
 800aaf2:	601a      	str	r2, [r3, #0]
		debugVR[dbc-1] = CurrentVelocity[RIGHT];
 800aaf4:	4b8b      	ldr	r3, [pc, #556]	; (800ad24 <Explore_IT+0x2dc>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	4a89      	ldr	r2, [pc, #548]	; (800ad20 <Explore_IT+0x2d8>)
 800aafc:	6852      	ldr	r2, [r2, #4]
 800aafe:	498b      	ldr	r1, [pc, #556]	; (800ad2c <Explore_IT+0x2e4>)
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	440b      	add	r3, r1
 800ab04:	601a      	str	r2, [r3, #0]
		dbc ++;
 800ab06:	4b87      	ldr	r3, [pc, #540]	; (800ad24 <Explore_IT+0x2dc>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	4a85      	ldr	r2, [pc, #532]	; (800ad24 <Explore_IT+0x2dc>)
 800ab0e:	6013      	str	r3, [r2, #0]
	}


	//移動量 mm/msを積算

	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800ab10:	4b87      	ldr	r3, [pc, #540]	; (800ad30 <Explore_IT+0x2e8>)
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	4b7f      	ldr	r3, [pc, #508]	; (800ad14 <Explore_IT+0x2cc>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4413      	add	r3, r2
 800ab1a:	4a85      	ldr	r2, [pc, #532]	; (800ad30 <Explore_IT+0x2e8>)
 800ab1c:	6013      	str	r3, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800ab1e:	4b84      	ldr	r3, [pc, #528]	; (800ad30 <Explore_IT+0x2e8>)
 800ab20:	685a      	ldr	r2, [r3, #4]
 800ab22:	4b7c      	ldr	r3, [pc, #496]	; (800ad14 <Explore_IT+0x2cc>)
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	4413      	add	r3, r2
 800ab28:	4a81      	ldr	r2, [pc, #516]	; (800ad30 <Explore_IT+0x2e8>)
 800ab2a:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800ab2c:	4b80      	ldr	r3, [pc, #512]	; (800ad30 <Explore_IT+0x2e8>)
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	4b7f      	ldr	r3, [pc, #508]	; (800ad30 <Explore_IT+0x2e8>)
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	4413      	add	r3, r2
 800ab36:	4a7e      	ldr	r2, [pc, #504]	; (800ad30 <Explore_IT+0x2e8>)
 800ab38:	6093      	str	r3, [r2, #8]
#if 1
	//static float angle=0;
	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
 800ab3a:	2138      	movs	r1, #56	; 0x38
 800ab3c:	2037      	movs	r0, #55	; 0x37
 800ab3e:	f004 f94f 	bl	800ede0 <ReadIMU>
 800ab42:	eef0 7a40 	vmov.f32	s15, s0
 800ab46:	4b7b      	ldr	r3, [pc, #492]	; (800ad34 <Explore_IT+0x2ec>)
 800ab48:	edc3 7a00 	vstr	s15, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800ab4c:	4b79      	ldr	r3, [pc, #484]	; (800ad34 <Explore_IT+0x2ec>)
 800ab4e:	ed93 7a00 	vldr	s14, [r3]
 800ab52:	4b79      	ldr	r3, [pc, #484]	; (800ad38 <Explore_IT+0x2f0>)
 800ab54:	edd3 7a00 	vldr	s15, [r3]
 800ab58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab5c:	ed9f 7a77 	vldr	s14, [pc, #476]	; 800ad3c <Explore_IT+0x2f4>
 800ab60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab64:	edc7 7a05 	vstr	s15, [r7, #20]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800ab68:	6978      	ldr	r0, [r7, #20]
 800ab6a:	f7fd fc25 	bl	80083b8 <__aeabi_f2d>
 800ab6e:	a362      	add	r3, pc, #392	; (adr r3, 800acf8 <Explore_IT+0x2b0>)
 800ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab74:	f7fd fc78 	bl	8008468 <__aeabi_dmul>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	4625      	mov	r5, r4
 800ab7e:	461c      	mov	r4, r3
 800ab80:	4b6f      	ldr	r3, [pc, #444]	; (800ad40 <Explore_IT+0x2f8>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7fd fc17 	bl	80083b8 <__aeabi_f2d>
 800ab8a:	a35d      	add	r3, pc, #372	; (adr r3, 800ad00 <Explore_IT+0x2b8>)
 800ab8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab90:	f7fd fc6a 	bl	8008468 <__aeabi_dmul>
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	4620      	mov	r0, r4
 800ab9a:	4629      	mov	r1, r5
 800ab9c:	f7fd faae 	bl	80080fc <__adddf3>
 800aba0:	4603      	mov	r3, r0
 800aba2:	460c      	mov	r4, r1
 800aba4:	4618      	mov	r0, r3
 800aba6:	4621      	mov	r1, r4
 800aba8:	f7fd ff56 	bl	8008a58 <__aeabi_d2f>
 800abac:	4603      	mov	r3, r0
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef1 7a67 	vneg.f32	s15, s15
 800abb6:	4b63      	ldr	r3, [pc, #396]	; (800ad44 <Explore_IT+0x2fc>)
 800abb8:	edc3 7a00 	vstr	s15, [r3]
    zg_last = zg_law;
 800abbc:	4a60      	ldr	r2, [pc, #384]	; (800ad40 <Explore_IT+0x2f8>)
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	6013      	str	r3, [r2, #0]
	Angle += AngularV * T1;
 800abc2:	4b60      	ldr	r3, [pc, #384]	; (800ad44 <Explore_IT+0x2fc>)
 800abc4:	edd3 7a00 	vldr	s15, [r3]
 800abc8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800ad48 <Explore_IT+0x300>
 800abcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800abd0:	4b5e      	ldr	r3, [pc, #376]	; (800ad4c <Explore_IT+0x304>)
 800abd2:	edd3 7a00 	vldr	s15, [r3]
 800abd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abda:	4b5c      	ldr	r3, [pc, #368]	; (800ad4c <Explore_IT+0x304>)
 800abdc:	edc3 7a00 	vstr	s15, [r3]
	AngularV = ( CurrentVelocity[LEFT] - CurrentVelocity[RIGHT] ) *convert_to_angularv;
	Angle += AngularV * T1;

#endif

	int wall_d =0,wall_l =0,wall_r =0,wall_f=0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	613b      	str	r3, [r7, #16]
 800abe4:	2300      	movs	r3, #0
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	2300      	movs	r3, #0
 800abea:	60bb      	str	r3, [r7, #8]
 800abec:	2300      	movs	r3, #0
 800abee:	607b      	str	r3, [r7, #4]
		int ang_out=0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	603b      	str	r3, [r7, #0]

		if( Pos.Dir == front || Pos.Act == compensate || Pos.Act == rotate)
 800abf4:	4b56      	ldr	r3, [pc, #344]	; (800ad50 <Explore_IT+0x308>)
 800abf6:	789b      	ldrb	r3, [r3, #2]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d008      	beq.n	800ac0e <Explore_IT+0x1c6>
 800abfc:	4b54      	ldr	r3, [pc, #336]	; (800ad50 <Explore_IT+0x308>)
 800abfe:	791b      	ldrb	r3, [r3, #4]
 800ac00:	2b06      	cmp	r3, #6
 800ac02:	d004      	beq.n	800ac0e <Explore_IT+0x1c6>
 800ac04:	4b52      	ldr	r3, [pc, #328]	; (800ad50 <Explore_IT+0x308>)
 800ac06:	791b      	ldrb	r3, [r3, #4]
 800ac08:	2b03      	cmp	r3, #3
 800ac0a:	f040 8129 	bne.w	800ae60 <Explore_IT+0x418>
		{
			if( Pid[A_VELO_PID].flag == 1 )
 800ac0e:	4b51      	ldr	r3, [pc, #324]	; (800ad54 <Explore_IT+0x30c>)
 800ac10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d116      	bne.n	800ac44 <Explore_IT+0x1fc>
			{
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800ac16:	4b50      	ldr	r3, [pc, #320]	; (800ad58 <Explore_IT+0x310>)
 800ac18:	edd3 7a00 	vldr	s15, [r3]
 800ac1c:	4b4b      	ldr	r3, [pc, #300]	; (800ad4c <Explore_IT+0x304>)
 800ac1e:	ed93 7a00 	vldr	s14, [r3]
 800ac22:	eef0 0a47 	vmov.f32	s1, s14
 800ac26:	eeb0 0a67 	vmov.f32	s0, s15
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	f005 f838 	bl	800fca0 <PIDControl>
 800ac30:	6038      	str	r0, [r7, #0]
				TargetAngularV = (float)ang_out;	//ひとまずこの辺の値の微調整は置いておく。制御方法として有効なのがわかった。
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	ee07 3a90 	vmov	s15, r3
 800ac38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac3c:	4b47      	ldr	r3, [pc, #284]	; (800ad5c <Explore_IT+0x314>)
 800ac3e:	edc3 7a00 	vstr	s15, [r3]
 800ac42:	e10d      	b.n	800ae60 <Explore_IT+0x418>
			}
			else if( Pid[D_WALL_PID].flag == 1 )
 800ac44:	4b43      	ldr	r3, [pc, #268]	; (800ad54 <Explore_IT+0x30c>)
 800ac46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d12a      	bne.n	800aca2 <Explore_IT+0x25a>
			{
				wall_d = PIDControl( D_WALL_PID, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 800ac4c:	4b44      	ldr	r3, [pc, #272]	; (800ad60 <Explore_IT+0x318>)
 800ac4e:	edd3 6a02 	vldr	s13, [r3, #8]
 800ac52:	4b43      	ldr	r3, [pc, #268]	; (800ad60 <Explore_IT+0x318>)
 800ac54:	ed93 7a01 	vldr	s14, [r3, #4]
 800ac58:	4b42      	ldr	r3, [pc, #264]	; (800ad64 <Explore_IT+0x31c>)
 800ac5a:	edd3 7a00 	vldr	s15, [r3]
 800ac5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac62:	eef0 0a67 	vmov.f32	s1, s15
 800ac66:	eeb0 0a66 	vmov.f32	s0, s13
 800ac6a:	2001      	movs	r0, #1
 800ac6c:	f005 f818 	bl	800fca0 <PIDControl>
 800ac70:	6138      	str	r0, [r7, #16]
				TargetAngularV = (float)wall_d*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	ee07 3a90 	vmov	s15, r3
 800ac78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac7c:	ee17 0a90 	vmov	r0, s15
 800ac80:	f7fd fb9a 	bl	80083b8 <__aeabi_f2d>
 800ac84:	a320      	add	r3, pc, #128	; (adr r3, 800ad08 <Explore_IT+0x2c0>)
 800ac86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8a:	f7fd fbed 	bl	8008468 <__aeabi_dmul>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	460c      	mov	r4, r1
 800ac92:	4618      	mov	r0, r3
 800ac94:	4621      	mov	r1, r4
 800ac96:	f7fd fedf 	bl	8008a58 <__aeabi_d2f>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	4b2f      	ldr	r3, [pc, #188]	; (800ad5c <Explore_IT+0x314>)
 800ac9e:	601a      	str	r2, [r3, #0]
 800aca0:	e0de      	b.n	800ae60 <Explore_IT+0x418>
			}
			else if( Pid[L_WALL_PID].flag == 1 )
 800aca2:	4b2c      	ldr	r3, [pc, #176]	; (800ad54 <Explore_IT+0x30c>)
 800aca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d15f      	bne.n	800ad6c <Explore_IT+0x324>
			{
				wall_l = PIDControl( L_WALL_PID,  Photo[SL], TargetPhoto[SL]);
 800acac:	4b2c      	ldr	r3, [pc, #176]	; (800ad60 <Explore_IT+0x318>)
 800acae:	edd3 7a02 	vldr	s15, [r3, #8]
 800acb2:	4b2d      	ldr	r3, [pc, #180]	; (800ad68 <Explore_IT+0x320>)
 800acb4:	ed93 7a02 	vldr	s14, [r3, #8]
 800acb8:	eef0 0a47 	vmov.f32	s1, s14
 800acbc:	eeb0 0a67 	vmov.f32	s0, s15
 800acc0:	2002      	movs	r0, #2
 800acc2:	f004 ffed 	bl	800fca0 <PIDControl>
 800acc6:	60f8      	str	r0, [r7, #12]
				TargetAngularV = (float)wall_l*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	ee07 3a90 	vmov	s15, r3
 800acce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acd2:	ee17 0a90 	vmov	r0, s15
 800acd6:	f7fd fb6f 	bl	80083b8 <__aeabi_f2d>
 800acda:	a30b      	add	r3, pc, #44	; (adr r3, 800ad08 <Explore_IT+0x2c0>)
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace0:	f7fd fbc2 	bl	8008468 <__aeabi_dmul>
 800ace4:	4603      	mov	r3, r0
 800ace6:	460c      	mov	r4, r1
 800ace8:	4618      	mov	r0, r3
 800acea:	4621      	mov	r1, r4
 800acec:	f7fd feb4 	bl	8008a58 <__aeabi_d2f>
 800acf0:	4602      	mov	r2, r0
 800acf2:	4b1a      	ldr	r3, [pc, #104]	; (800ad5c <Explore_IT+0x314>)
 800acf4:	601a      	str	r2, [r3, #0]
 800acf6:	e0b3      	b.n	800ae60 <Explore_IT+0x418>
 800acf8:	47ae147b 	.word	0x47ae147b
 800acfc:	3f847ae1 	.word	0x3f847ae1
 800ad00:	7ae147ae 	.word	0x7ae147ae
 800ad04:	3fefae14 	.word	0x3fefae14
 800ad08:	d2f1a9fc 	.word	0xd2f1a9fc
 800ad0c:	3f50624d 	.word	0x3f50624d
 800ad10:	40000400 	.word	0x40000400
 800ad14:	2001038c 	.word	0x2001038c
 800ad18:	40000800 	.word	0x40000800
 800ad1c:	3f7c7e45 	.word	0x3f7c7e45
 800ad20:	2000ff24 	.word	0x2000ff24
 800ad24:	2000fc14 	.word	0x2000fc14
 800ad28:	20000214 	.word	0x20000214
 800ad2c:	20007f14 	.word	0x20007f14
 800ad30:	2000ff18 	.word	0x2000ff18
 800ad34:	2000fcd4 	.word	0x2000fcd4
 800ad38:	2000fcd0 	.word	0x2000fcd0
 800ad3c:	3a8b7d78 	.word	0x3a8b7d78
 800ad40:	2000fc18 	.word	0x2000fc18
 800ad44:	2000fc20 	.word	0x2000fc20
 800ad48:	3a83126f 	.word	0x3a83126f
 800ad4c:	2000fc24 	.word	0x2000fc24
 800ad50:	20000000 	.word	0x20000000
 800ad54:	2000fd18 	.word	0x2000fd18
 800ad58:	2000ff14 	.word	0x2000ff14
 800ad5c:	2000fef8 	.word	0x2000fef8
 800ad60:	2000ff58 	.word	0x2000ff58
 800ad64:	2000ff0c 	.word	0x2000ff0c
 800ad68:	20010174 	.word	0x20010174

			}
			else if( Pid[R_WALL_PID].flag == 1 )
 800ad6c:	4b78      	ldr	r3, [pc, #480]	; (800af50 <Explore_IT+0x508>)
 800ad6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d125      	bne.n	800adc2 <Explore_IT+0x37a>
			{
				wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 800ad76:	4b77      	ldr	r3, [pc, #476]	; (800af54 <Explore_IT+0x50c>)
 800ad78:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad7c:	4b76      	ldr	r3, [pc, #472]	; (800af58 <Explore_IT+0x510>)
 800ad7e:	ed93 7a01 	vldr	s14, [r3, #4]
 800ad82:	eef0 0a47 	vmov.f32	s1, s14
 800ad86:	eeb0 0a67 	vmov.f32	s0, s15
 800ad8a:	2003      	movs	r0, #3
 800ad8c:	f004 ff88 	bl	800fca0 <PIDControl>
 800ad90:	60b8      	str	r0, [r7, #8]
				TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	ee07 3a90 	vmov	s15, r3
 800ad98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad9c:	ee17 0a90 	vmov	r0, s15
 800ada0:	f7fd fb0a 	bl	80083b8 <__aeabi_f2d>
 800ada4:	a366      	add	r3, pc, #408	; (adr r3, 800af40 <Explore_IT+0x4f8>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	f7fd fb5d 	bl	8008468 <__aeabi_dmul>
 800adae:	4603      	mov	r3, r0
 800adb0:	460c      	mov	r4, r1
 800adb2:	4618      	mov	r0, r3
 800adb4:	4621      	mov	r1, r4
 800adb6:	f7fd fe4f 	bl	8008a58 <__aeabi_d2f>
 800adba:	4602      	mov	r2, r0
 800adbc:	4b67      	ldr	r3, [pc, #412]	; (800af5c <Explore_IT+0x514>)
 800adbe:	601a      	str	r2, [r3, #0]
 800adc0:	e04e      	b.n	800ae60 <Explore_IT+0x418>
			}
			else if( Pid[F_WALL_PID].flag == 1)
 800adc2:	4b63      	ldr	r3, [pc, #396]	; (800af50 <Explore_IT+0x508>)
 800adc4:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d149      	bne.n	800ae60 <Explore_IT+0x418>
			{
				wall_f = PIDControl( F_WALL_PID,   Photo[FR], Photo[FL]+1000);
 800adcc:	4b62      	ldr	r3, [pc, #392]	; (800af58 <Explore_IT+0x510>)
 800adce:	edd3 6a03 	vldr	s13, [r3, #12]
 800add2:	4b61      	ldr	r3, [pc, #388]	; (800af58 <Explore_IT+0x510>)
 800add4:	edd3 7a00 	vldr	s15, [r3]
 800add8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800af60 <Explore_IT+0x518>
 800addc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ade0:	eef0 0a67 	vmov.f32	s1, s15
 800ade4:	eeb0 0a66 	vmov.f32	s0, s13
 800ade8:	2008      	movs	r0, #8
 800adea:	f004 ff59 	bl	800fca0 <PIDControl>
 800adee:	6078      	str	r0, [r7, #4]
				TargetAngularV = (float)wall_f*0.001;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	ee07 3a90 	vmov	s15, r3
 800adf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adfa:	ee17 0a90 	vmov	r0, s15
 800adfe:	f7fd fadb 	bl	80083b8 <__aeabi_f2d>
 800ae02:	a34f      	add	r3, pc, #316	; (adr r3, 800af40 <Explore_IT+0x4f8>)
 800ae04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae08:	f7fd fb2e 	bl	8008468 <__aeabi_dmul>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	460c      	mov	r4, r1
 800ae10:	4618      	mov	r0, r3
 800ae12:	4621      	mov	r1, r4
 800ae14:	f7fd fe20 	bl	8008a58 <__aeabi_d2f>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	4b50      	ldr	r3, [pc, #320]	; (800af5c <Explore_IT+0x514>)
 800ae1c:	601a      	str	r2, [r3, #0]

				TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
 800ae1e:	4b4e      	ldr	r3, [pc, #312]	; (800af58 <Explore_IT+0x510>)
 800ae20:	ed93 7a03 	vldr	s14, [r3, #12]
 800ae24:	4b4c      	ldr	r3, [pc, #304]	; (800af58 <Explore_IT+0x510>)
 800ae26:	edd3 7a00 	vldr	s15, [r3]
 800ae2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae2e:	eddf 0a4d 	vldr	s1, [pc, #308]	; 800af64 <Explore_IT+0x51c>
 800ae32:	eeb0 0a67 	vmov.f32	s0, s15
 800ae36:	2009      	movs	r0, #9
 800ae38:	f004 ff32 	bl	800fca0 <PIDControl>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fd faa8 	bl	8008394 <__aeabi_i2d>
 800ae44:	a340      	add	r3, pc, #256	; (adr r3, 800af48 <Explore_IT+0x500>)
 800ae46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4a:	f7fd fb0d 	bl	8008468 <__aeabi_dmul>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	460c      	mov	r4, r1
 800ae52:	4618      	mov	r0, r3
 800ae54:	4621      	mov	r1, r4
 800ae56:	f7fd fdff 	bl	8008a58 <__aeabi_d2f>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	4b42      	ldr	r3, [pc, #264]	; (800af68 <Explore_IT+0x520>)
 800ae5e:	609a      	str	r2, [r3, #8]
			}
		}

	TargetVelocity[BODY] += Acceleration;
 800ae60:	4b41      	ldr	r3, [pc, #260]	; (800af68 <Explore_IT+0x520>)
 800ae62:	ed93 7a02 	vldr	s14, [r3, #8]
 800ae66:	4b41      	ldr	r3, [pc, #260]	; (800af6c <Explore_IT+0x524>)
 800ae68:	edd3 7a00 	vldr	s15, [r3]
 800ae6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae70:	4b3d      	ldr	r3, [pc, #244]	; (800af68 <Explore_IT+0x520>)
 800ae72:	edc3 7a02 	vstr	s15, [r3, #8]
	AngularAcceleration += AngularLeapsity;
 800ae76:	4b3e      	ldr	r3, [pc, #248]	; (800af70 <Explore_IT+0x528>)
 800ae78:	ed93 7a00 	vldr	s14, [r3]
 800ae7c:	4b3d      	ldr	r3, [pc, #244]	; (800af74 <Explore_IT+0x52c>)
 800ae7e:	edd3 7a00 	vldr	s15, [r3]
 800ae82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae86:	4b3a      	ldr	r3, [pc, #232]	; (800af70 <Explore_IT+0x528>)
 800ae88:	edc3 7a00 	vstr	s15, [r3]
	TargetAngularV += AngularAcceleration;
 800ae8c:	4b33      	ldr	r3, [pc, #204]	; (800af5c <Explore_IT+0x514>)
 800ae8e:	ed93 7a00 	vldr	s14, [r3]
 800ae92:	4b37      	ldr	r3, [pc, #220]	; (800af70 <Explore_IT+0x528>)
 800ae94:	edd3 7a00 	vldr	s15, [r3]
 800ae98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae9c:	4b2f      	ldr	r3, [pc, #188]	; (800af5c <Explore_IT+0x514>)
 800ae9e:	edc3 7a00 	vstr	s15, [r3]
	//TargetAngularV += AngularAcceleration;
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800aea2:	4b31      	ldr	r3, [pc, #196]	; (800af68 <Explore_IT+0x520>)
 800aea4:	ed93 7a02 	vldr	s14, [r3, #8]
 800aea8:	4b2c      	ldr	r3, [pc, #176]	; (800af5c <Explore_IT+0x514>)
 800aeaa:	edd3 7a00 	vldr	s15, [r3]
 800aeae:	eddf 6a32 	vldr	s13, [pc, #200]	; 800af78 <Explore_IT+0x530>
 800aeb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800aeb6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800aeba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800aebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aec2:	4b29      	ldr	r3, [pc, #164]	; (800af68 <Explore_IT+0x520>)
 800aec4:	edc3 7a01 	vstr	s15, [r3, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800aec8:	4b24      	ldr	r3, [pc, #144]	; (800af5c <Explore_IT+0x514>)
 800aeca:	edd3 7a00 	vldr	s15, [r3]
 800aece:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800af78 <Explore_IT+0x530>
 800aed2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aed6:	4b24      	ldr	r3, [pc, #144]	; (800af68 <Explore_IT+0x520>)
 800aed8:	edd3 7a01 	vldr	s15, [r3, #4]
 800aedc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aee0:	4b21      	ldr	r3, [pc, #132]	; (800af68 <Explore_IT+0x520>)
 800aee2:	edc3 7a00 	vstr	s15, [r3]

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800aee6:	4b20      	ldr	r3, [pc, #128]	; (800af68 <Explore_IT+0x520>)
 800aee8:	edd3 7a00 	vldr	s15, [r3]
 800aeec:	4b23      	ldr	r3, [pc, #140]	; (800af7c <Explore_IT+0x534>)
 800aeee:	ed93 7a00 	vldr	s14, [r3]
 800aef2:	eef0 0a47 	vmov.f32	s1, s14
 800aef6:	eeb0 0a67 	vmov.f32	s0, s15
 800aefa:	2004      	movs	r0, #4
 800aefc:	f004 fed0 	bl	800fca0 <PIDControl>
 800af00:	4602      	mov	r2, r0
 800af02:	4b1f      	ldr	r3, [pc, #124]	; (800af80 <Explore_IT+0x538>)
 800af04:	601a      	str	r2, [r3, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800af06:	4b18      	ldr	r3, [pc, #96]	; (800af68 <Explore_IT+0x520>)
 800af08:	edd3 7a01 	vldr	s15, [r3, #4]
 800af0c:	4b1b      	ldr	r3, [pc, #108]	; (800af7c <Explore_IT+0x534>)
 800af0e:	ed93 7a01 	vldr	s14, [r3, #4]
 800af12:	eef0 0a47 	vmov.f32	s1, s14
 800af16:	eeb0 0a67 	vmov.f32	s0, s15
 800af1a:	2005      	movs	r0, #5
 800af1c:	f004 fec0 	bl	800fca0 <PIDControl>
 800af20:	4602      	mov	r2, r0
 800af22:	4b18      	ldr	r3, [pc, #96]	; (800af84 <Explore_IT+0x53c>)
 800af24:	601a      	str	r2, [r3, #0]

	//モータに出力
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800af26:	4b16      	ldr	r3, [pc, #88]	; (800af80 <Explore_IT+0x538>)
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	4b16      	ldr	r3, [pc, #88]	; (800af84 <Explore_IT+0x53c>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4619      	mov	r1, r3
 800af30:	4610      	mov	r0, r2
 800af32:	f004 f9bd 	bl	800f2b0 <Motor_Switch>

}
 800af36:	bf00      	nop
 800af38:	3718      	adds	r7, #24
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bdb0      	pop	{r4, r5, r7, pc}
 800af3e:	bf00      	nop
 800af40:	d2f1a9fc 	.word	0xd2f1a9fc
 800af44:	3f50624d 	.word	0x3f50624d
 800af48:	9999999a 	.word	0x9999999a
 800af4c:	3fb99999 	.word	0x3fb99999
 800af50:	2000fd18 	.word	0x2000fd18
 800af54:	20010174 	.word	0x20010174
 800af58:	2000ff58 	.word	0x2000ff58
 800af5c:	2000fef8 	.word	0x2000fef8
 800af60:	447a0000 	.word	0x447a0000
 800af64:	457a0000 	.word	0x457a0000
 800af68:	2000fee8 	.word	0x2000fee8
 800af6c:	2000fc28 	.word	0x2000fc28
 800af70:	2000fc2c 	.word	0x2000fc2c
 800af74:	2000fc30 	.word	0x2000fc30
 800af78:	42176666 	.word	0x42176666
 800af7c:	2000ff24 	.word	0x2000ff24
 800af80:	2001016c 	.word	0x2001016c
 800af84:	20010188 	.word	0x20010188

0800af88 <WritingFree_IT>:
void WritingFree_IT()
{
 800af88:	b5b0      	push	{r4, r5, r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800af8e:	4b90      	ldr	r3, [pc, #576]	; (800b1d0 <WritingFree_IT+0x248>)
 800af90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af92:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800af96:	332f      	adds	r3, #47	; 0x2f
 800af98:	461a      	mov	r2, r3
 800af9a:	4b8e      	ldr	r3, [pc, #568]	; (800b1d4 <WritingFree_IT+0x24c>)
 800af9c:	601a      	str	r2, [r3, #0]
	TIM3->CNT = INITIAL_PULSE;
 800af9e:	4b8c      	ldr	r3, [pc, #560]	; (800b1d0 <WritingFree_IT+0x248>)
 800afa0:	f247 522f 	movw	r2, #29999	; 0x752f
 800afa4:	625a      	str	r2, [r3, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800afa6:	4b8c      	ldr	r3, [pc, #560]	; (800b1d8 <WritingFree_IT+0x250>)
 800afa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afaa:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800afae:	332f      	adds	r3, #47	; 0x2f
 800afb0:	461a      	mov	r2, r3
 800afb2:	4b88      	ldr	r3, [pc, #544]	; (800b1d4 <WritingFree_IT+0x24c>)
 800afb4:	605a      	str	r2, [r3, #4]
	TIM4->CNT = INITIAL_PULSE;
 800afb6:	4b88      	ldr	r3, [pc, #544]	; (800b1d8 <WritingFree_IT+0x250>)
 800afb8:	f247 522f 	movw	r2, #29999	; 0x752f
 800afbc:	625a      	str	r2, [r3, #36]	; 0x24

	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800afbe:	4b85      	ldr	r3, [pc, #532]	; (800b1d4 <WritingFree_IT+0x24c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	ee07 3a90 	vmov	s15, r3
 800afc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afca:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800b1dc <WritingFree_IT+0x254>
 800afce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afd2:	4b83      	ldr	r3, [pc, #524]	; (800b1e0 <WritingFree_IT+0x258>)
 800afd4:	edc3 7a00 	vstr	s15, [r3]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800afd8:	4b7e      	ldr	r3, [pc, #504]	; (800b1d4 <WritingFree_IT+0x24c>)
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	ee07 3a90 	vmov	s15, r3
 800afe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afe4:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b1dc <WritingFree_IT+0x254>
 800afe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afec:	4b7c      	ldr	r3, [pc, #496]	; (800b1e0 <WritingFree_IT+0x258>)
 800afee:	edc3 7a01 	vstr	s15, [r3, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800aff2:	4b7b      	ldr	r3, [pc, #492]	; (800b1e0 <WritingFree_IT+0x258>)
 800aff4:	ed93 7a00 	vldr	s14, [r3]
 800aff8:	4b79      	ldr	r3, [pc, #484]	; (800b1e0 <WritingFree_IT+0x258>)
 800affa:	edd3 7a01 	vldr	s15, [r3, #4]
 800affe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b002:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b00a:	4b75      	ldr	r3, [pc, #468]	; (800b1e0 <WritingFree_IT+0x258>)
 800b00c:	edc3 7a02 	vstr	s15, [r3, #8]
//			velodebug_flag = 0;
//		}
//
//	}
	//移動量 mm/msを積算
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800b010:	4b74      	ldr	r3, [pc, #464]	; (800b1e4 <WritingFree_IT+0x25c>)
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	4b6f      	ldr	r3, [pc, #444]	; (800b1d4 <WritingFree_IT+0x24c>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4413      	add	r3, r2
 800b01a:	4a72      	ldr	r2, [pc, #456]	; (800b1e4 <WritingFree_IT+0x25c>)
 800b01c:	6013      	str	r3, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800b01e:	4b71      	ldr	r3, [pc, #452]	; (800b1e4 <WritingFree_IT+0x25c>)
 800b020:	685a      	ldr	r2, [r3, #4]
 800b022:	4b6c      	ldr	r3, [pc, #432]	; (800b1d4 <WritingFree_IT+0x24c>)
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	4413      	add	r3, r2
 800b028:	4a6e      	ldr	r2, [pc, #440]	; (800b1e4 <WritingFree_IT+0x25c>)
 800b02a:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800b02c:	4b6d      	ldr	r3, [pc, #436]	; (800b1e4 <WritingFree_IT+0x25c>)
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	4b6c      	ldr	r3, [pc, #432]	; (800b1e4 <WritingFree_IT+0x25c>)
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	4413      	add	r3, r2
 800b036:	4a6b      	ldr	r2, [pc, #428]	; (800b1e4 <WritingFree_IT+0x25c>)
 800b038:	6093      	str	r3, [r2, #8]
#if 1

	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
 800b03a:	2138      	movs	r1, #56	; 0x38
 800b03c:	2037      	movs	r0, #55	; 0x37
 800b03e:	f003 fecf 	bl	800ede0 <ReadIMU>
 800b042:	eef0 7a40 	vmov.f32	s15, s0
 800b046:	4b68      	ldr	r3, [pc, #416]	; (800b1e8 <WritingFree_IT+0x260>)
 800b048:	edc3 7a00 	vstr	s15, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800b04c:	4b66      	ldr	r3, [pc, #408]	; (800b1e8 <WritingFree_IT+0x260>)
 800b04e:	ed93 7a00 	vldr	s14, [r3]
 800b052:	4b66      	ldr	r3, [pc, #408]	; (800b1ec <WritingFree_IT+0x264>)
 800b054:	edd3 7a00 	vldr	s15, [r3]
 800b058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b05c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800b1f0 <WritingFree_IT+0x268>
 800b060:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b064:	edc7 7a01 	vstr	s15, [r7, #4]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7fd f9a5 	bl	80083b8 <__aeabi_f2d>
 800b06e:	a354      	add	r3, pc, #336	; (adr r3, 800b1c0 <WritingFree_IT+0x238>)
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	f7fd f9f8 	bl	8008468 <__aeabi_dmul>
 800b078:	4603      	mov	r3, r0
 800b07a:	460c      	mov	r4, r1
 800b07c:	4625      	mov	r5, r4
 800b07e:	461c      	mov	r4, r3
 800b080:	4b5c      	ldr	r3, [pc, #368]	; (800b1f4 <WritingFree_IT+0x26c>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4618      	mov	r0, r3
 800b086:	f7fd f997 	bl	80083b8 <__aeabi_f2d>
 800b08a:	a34f      	add	r3, pc, #316	; (adr r3, 800b1c8 <WritingFree_IT+0x240>)
 800b08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b090:	f7fd f9ea 	bl	8008468 <__aeabi_dmul>
 800b094:	4602      	mov	r2, r0
 800b096:	460b      	mov	r3, r1
 800b098:	4620      	mov	r0, r4
 800b09a:	4629      	mov	r1, r5
 800b09c:	f7fd f82e 	bl	80080fc <__adddf3>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	460c      	mov	r4, r1
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	f7fd fcd6 	bl	8008a58 <__aeabi_d2f>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	ee07 3a90 	vmov	s15, r3
 800b0b2:	eef1 7a67 	vneg.f32	s15, s15
 800b0b6:	4b50      	ldr	r3, [pc, #320]	; (800b1f8 <WritingFree_IT+0x270>)
 800b0b8:	edc3 7a00 	vstr	s15, [r3]
    zg_last = zg_law;
 800b0bc:	4a4d      	ldr	r2, [pc, #308]	; (800b1f4 <WritingFree_IT+0x26c>)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6013      	str	r3, [r2, #0]
	Angle += AngularV * T1;
 800b0c2:	4b4d      	ldr	r3, [pc, #308]	; (800b1f8 <WritingFree_IT+0x270>)
 800b0c4:	edd3 7a00 	vldr	s15, [r3]
 800b0c8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800b1fc <WritingFree_IT+0x274>
 800b0cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b0d0:	4b4b      	ldr	r3, [pc, #300]	; (800b200 <WritingFree_IT+0x278>)
 800b0d2:	edd3 7a00 	vldr	s15, [r3]
 800b0d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0da:	4b49      	ldr	r3, [pc, #292]	; (800b200 <WritingFree_IT+0x278>)
 800b0dc:	edc3 7a00 	vstr	s15, [r3]
				TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
			}
		}
#endif

	AngularAcceleration += AngularLeapsity;
 800b0e0:	4b48      	ldr	r3, [pc, #288]	; (800b204 <WritingFree_IT+0x27c>)
 800b0e2:	ed93 7a00 	vldr	s14, [r3]
 800b0e6:	4b48      	ldr	r3, [pc, #288]	; (800b208 <WritingFree_IT+0x280>)
 800b0e8:	edd3 7a00 	vldr	s15, [r3]
 800b0ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0f0:	4b44      	ldr	r3, [pc, #272]	; (800b204 <WritingFree_IT+0x27c>)
 800b0f2:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[BODY] += Acceleration;
 800b0f6:	4b45      	ldr	r3, [pc, #276]	; (800b20c <WritingFree_IT+0x284>)
 800b0f8:	ed93 7a02 	vldr	s14, [r3, #8]
 800b0fc:	4b44      	ldr	r3, [pc, #272]	; (800b210 <WritingFree_IT+0x288>)
 800b0fe:	edd3 7a00 	vldr	s15, [r3]
 800b102:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b106:	4b41      	ldr	r3, [pc, #260]	; (800b20c <WritingFree_IT+0x284>)
 800b108:	edc3 7a02 	vstr	s15, [r3, #8]
	TargetAngularV += AngularAcceleration;
 800b10c:	4b41      	ldr	r3, [pc, #260]	; (800b214 <WritingFree_IT+0x28c>)
 800b10e:	ed93 7a00 	vldr	s14, [r3]
 800b112:	4b3c      	ldr	r3, [pc, #240]	; (800b204 <WritingFree_IT+0x27c>)
 800b114:	edd3 7a00 	vldr	s15, [r3]
 800b118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b11c:	4b3d      	ldr	r3, [pc, #244]	; (800b214 <WritingFree_IT+0x28c>)
 800b11e:	edc3 7a00 	vstr	s15, [r3]

	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800b122:	4b3a      	ldr	r3, [pc, #232]	; (800b20c <WritingFree_IT+0x284>)
 800b124:	ed93 7a02 	vldr	s14, [r3, #8]
 800b128:	4b3a      	ldr	r3, [pc, #232]	; (800b214 <WritingFree_IT+0x28c>)
 800b12a:	edd3 7a00 	vldr	s15, [r3]
 800b12e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800b218 <WritingFree_IT+0x290>
 800b132:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b136:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b13a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b13e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b142:	4b32      	ldr	r3, [pc, #200]	; (800b20c <WritingFree_IT+0x284>)
 800b144:	edc3 7a01 	vstr	s15, [r3, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800b148:	4b32      	ldr	r3, [pc, #200]	; (800b214 <WritingFree_IT+0x28c>)
 800b14a:	edd3 7a00 	vldr	s15, [r3]
 800b14e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b218 <WritingFree_IT+0x290>
 800b152:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b156:	4b2d      	ldr	r3, [pc, #180]	; (800b20c <WritingFree_IT+0x284>)
 800b158:	edd3 7a01 	vldr	s15, [r3, #4]
 800b15c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b160:	4b2a      	ldr	r3, [pc, #168]	; (800b20c <WritingFree_IT+0x284>)
 800b162:	edc3 7a00 	vstr	s15, [r3]

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800b166:	4b29      	ldr	r3, [pc, #164]	; (800b20c <WritingFree_IT+0x284>)
 800b168:	edd3 7a00 	vldr	s15, [r3]
 800b16c:	4b1c      	ldr	r3, [pc, #112]	; (800b1e0 <WritingFree_IT+0x258>)
 800b16e:	ed93 7a00 	vldr	s14, [r3]
 800b172:	eef0 0a47 	vmov.f32	s1, s14
 800b176:	eeb0 0a67 	vmov.f32	s0, s15
 800b17a:	2004      	movs	r0, #4
 800b17c:	f004 fd90 	bl	800fca0 <PIDControl>
 800b180:	4602      	mov	r2, r0
 800b182:	4b26      	ldr	r3, [pc, #152]	; (800b21c <WritingFree_IT+0x294>)
 800b184:	601a      	str	r2, [r3, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800b186:	4b21      	ldr	r3, [pc, #132]	; (800b20c <WritingFree_IT+0x284>)
 800b188:	edd3 7a01 	vldr	s15, [r3, #4]
 800b18c:	4b14      	ldr	r3, [pc, #80]	; (800b1e0 <WritingFree_IT+0x258>)
 800b18e:	ed93 7a01 	vldr	s14, [r3, #4]
 800b192:	eef0 0a47 	vmov.f32	s1, s14
 800b196:	eeb0 0a67 	vmov.f32	s0, s15
 800b19a:	2005      	movs	r0, #5
 800b19c:	f004 fd80 	bl	800fca0 <PIDControl>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	4b1f      	ldr	r3, [pc, #124]	; (800b220 <WritingFree_IT+0x298>)
 800b1a4:	601a      	str	r2, [r3, #0]

	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800b1a6:	4b1d      	ldr	r3, [pc, #116]	; (800b21c <WritingFree_IT+0x294>)
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	4b1d      	ldr	r3, [pc, #116]	; (800b220 <WritingFree_IT+0x298>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	f004 f87d 	bl	800f2b0 <Motor_Switch>


}
 800b1b6:	bf00      	nop
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bdb0      	pop	{r4, r5, r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	47ae147b 	.word	0x47ae147b
 800b1c4:	3f847ae1 	.word	0x3f847ae1
 800b1c8:	7ae147ae 	.word	0x7ae147ae
 800b1cc:	3fefae14 	.word	0x3fefae14
 800b1d0:	40000400 	.word	0x40000400
 800b1d4:	2001038c 	.word	0x2001038c
 800b1d8:	40000800 	.word	0x40000800
 800b1dc:	3f7c7e45 	.word	0x3f7c7e45
 800b1e0:	2000ff24 	.word	0x2000ff24
 800b1e4:	2000ff18 	.word	0x2000ff18
 800b1e8:	2000fcd4 	.word	0x2000fcd4
 800b1ec:	2000fcd0 	.word	0x2000fcd0
 800b1f0:	3a8b7d78 	.word	0x3a8b7d78
 800b1f4:	2000fc1c 	.word	0x2000fc1c
 800b1f8:	2000fc20 	.word	0x2000fc20
 800b1fc:	3a83126f 	.word	0x3a83126f
 800b200:	2000fc24 	.word	0x2000fc24
 800b204:	2000fc2c 	.word	0x2000fc2c
 800b208:	2000fc30 	.word	0x2000fc30
 800b20c:	2000fee8 	.word	0x2000fee8
 800b210:	2000fc28 	.word	0x2000fc28
 800b214:	2000fef8 	.word	0x2000fef8
 800b218:	42176666 	.word	0x42176666
 800b21c:	2001016c 	.word	0x2001016c
 800b220:	20010188 	.word	0x20010188

0800b224 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
	if( htim == &htim1)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a26      	ldr	r2, [pc, #152]	; (800b2c8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d10e      	bne.n	800b252 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		switch(IT_mode){
 800b234:	4b25      	ldr	r3, [pc, #148]	; (800b2cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d007      	beq.n	800b24c <HAL_TIM_PeriodElapsedCallback+0x28>
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d00a      	beq.n	800b256 <HAL_TIM_PeriodElapsedCallback+0x32>
 800b240:	2b00      	cmp	r3, #0
 800b242:	d000      	beq.n	800b246 <HAL_TIM_PeriodElapsedCallback+0x22>
			break;
		case 2:

			break;
		default :
			break;
 800b244:	e008      	b.n	800b258 <HAL_TIM_PeriodElapsedCallback+0x34>
			Explore_IT();
 800b246:	f7ff fbff 	bl	800aa48 <Explore_IT>
			break;
 800b24a:	e005      	b.n	800b258 <HAL_TIM_PeriodElapsedCallback+0x34>
			WritingFree_IT();
 800b24c:	f7ff fe9c 	bl	800af88 <WritingFree_IT>
			break;
 800b250:	e002      	b.n	800b258 <HAL_TIM_PeriodElapsedCallback+0x34>
		}
	}
 800b252:	bf00      	nop
 800b254:	e000      	b.n	800b258 <HAL_TIM_PeriodElapsedCallback+0x34>
			break;
 800b256:	bf00      	nop

	if( htim == &htim8)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a1d      	ldr	r2, [pc, #116]	; (800b2d0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d12f      	bne.n	800b2c0 <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		//timer8 += t;

		//壁センサデータの更新
		Photo[FL] = GetWallDataAverage(20, adc1[0], FL);	//adc1_IN10
 800b260:	4b1c      	ldr	r3, [pc, #112]	; (800b2d4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2200      	movs	r2, #0
 800b266:	4619      	mov	r1, r3
 800b268:	2014      	movs	r0, #20
 800b26a:	f004 f891 	bl	800f390 <GetWallDataAverage>
 800b26e:	eef0 7a40 	vmov.f32	s15, s0
 800b272:	4b19      	ldr	r3, [pc, #100]	; (800b2d8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b274:	edc3 7a00 	vstr	s15, [r3]
		Photo[SR] = GetWallDataAverage(20, adc1[1], SR);	//adc1_IN14
 800b278:	4b16      	ldr	r3, [pc, #88]	; (800b2d4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	2201      	movs	r2, #1
 800b27e:	4619      	mov	r1, r3
 800b280:	2014      	movs	r0, #20
 800b282:	f004 f885 	bl	800f390 <GetWallDataAverage>
 800b286:	eef0 7a40 	vmov.f32	s15, s0
 800b28a:	4b13      	ldr	r3, [pc, #76]	; (800b2d8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b28c:	edc3 7a01 	vstr	s15, [r3, #4]
		Photo[SL] = GetWallDataAverage(20, adc2[0], SL);	//adc2_IN11
 800b290:	4b12      	ldr	r3, [pc, #72]	; (800b2dc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2202      	movs	r2, #2
 800b296:	4619      	mov	r1, r3
 800b298:	2014      	movs	r0, #20
 800b29a:	f004 f879 	bl	800f390 <GetWallDataAverage>
 800b29e:	eef0 7a40 	vmov.f32	s15, s0
 800b2a2:	4b0d      	ldr	r3, [pc, #52]	; (800b2d8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b2a4:	edc3 7a02 	vstr	s15, [r3, #8]
		Photo[FR] = GetWallDataAverage(20, adc2[1], FR);	//adc2_IN15
 800b2a8:	4b0c      	ldr	r3, [pc, #48]	; (800b2dc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	2203      	movs	r2, #3
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	2014      	movs	r0, #20
 800b2b2:	f004 f86d 	bl	800f390 <GetWallDataAverage>
 800b2b6:	eef0 7a40 	vmov.f32	s15, s0
 800b2ba:	4b07      	ldr	r3, [pc, #28]	; (800b2d8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b2bc:	edc3 7a03 	vstr	s15, [r3, #12]
	}
}
 800b2c0:	bf00      	nop
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	200107e8 	.word	0x200107e8
 800b2cc:	2000fedc 	.word	0x2000fedc
 800b2d0:	200105a0 	.word	0x200105a0
 800b2d4:	2000fcbc 	.word	0x2000fcbc
 800b2d8:	2000ff58 	.word	0x2000ff58
 800b2dc:	2000fcc8 	.word	0x2000fcc8

0800b2e0 <flash_store_init>:
//{
//
//}
//壁データの初期化
void flash_store_init()
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
	uint32_t address=start_adress_sector1;
 800b2e6:	4b2c      	ldr	r3, [pc, #176]	; (800b398 <flash_store_init+0xb8>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	60fb      	str	r3, [r7, #12]

	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	60bb      	str	r3, [r7, #8]
 800b2f0:	e04b      	b.n	800b38a <flash_store_init+0xaa>
	{
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	607b      	str	r3, [r7, #4]
 800b2f6:	e042      	b.n	800b37e <flash_store_init+0x9e>
			{
				FLASH_Write_Word(address+0, Wall[i][j].north);
 800b2f8:	4928      	ldr	r1, [pc, #160]	; (800b39c <flash_store_init+0xbc>)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	011a      	lsls	r2, r3, #4
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	4413      	add	r3, r2
 800b302:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b306:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	4619      	mov	r1, r3
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f003 fc42 	bl	800eb98 <FLASH_Write_Word>
				FLASH_Write_Word(address+4, Wall[i][j].east);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	1d18      	adds	r0, r3, #4
 800b318:	4920      	ldr	r1, [pc, #128]	; (800b39c <flash_store_init+0xbc>)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	011a      	lsls	r2, r3, #4
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	4413      	add	r3, r2
 800b322:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b326:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	4619      	mov	r1, r3
 800b32e:	f003 fc33 	bl	800eb98 <FLASH_Write_Word>
				FLASH_Write_Word(address+8, Wall[i][j].south);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f103 0008 	add.w	r0, r3, #8
 800b338:	4918      	ldr	r1, [pc, #96]	; (800b39c <flash_store_init+0xbc>)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	011a      	lsls	r2, r3, #4
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	4413      	add	r3, r2
 800b342:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b346:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	4619      	mov	r1, r3
 800b34e:	f003 fc23 	bl	800eb98 <FLASH_Write_Word>
				FLASH_Write_Word(address+12, Wall[i][j].west);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f103 000c 	add.w	r0, r3, #12
 800b358:	4910      	ldr	r1, [pc, #64]	; (800b39c <flash_store_init+0xbc>)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	011a      	lsls	r2, r3, #4
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	4413      	add	r3, r2
 800b362:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b366:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	4619      	mov	r1, r3
 800b36e:	f003 fc13 	bl	800eb98 <FLASH_Write_Word>
				address += 16;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	3310      	adds	r3, #16
 800b376:	60fb      	str	r3, [r7, #12]
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	3301      	adds	r3, #1
 800b37c:	607b      	str	r3, [r7, #4]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2b0f      	cmp	r3, #15
 800b382:	ddb9      	ble.n	800b2f8 <flash_store_init+0x18>
	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	3301      	adds	r3, #1
 800b388:	60bb      	str	r3, [r7, #8]
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	2b0f      	cmp	r3, #15
 800b38e:	ddb0      	ble.n	800b2f2 <flash_store_init+0x12>
			}
	}
}
 800b390:	bf00      	nop
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	0801a5d8 	.word	0x0801a5d8
 800b39c:	20010398 	.word	0x20010398

0800b3a0 <wall_init>:
void wall_init(){
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0

	//全部未探索にする
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	60fb      	str	r3, [r7, #12]
 800b3aa:	e03b      	b.n	800b424 <wall_init+0x84>
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	60bb      	str	r3, [r7, #8]
 800b3b0:	e032      	b.n	800b418 <wall_init+0x78>
				Wall[i][j].north = UNKNOWN;
 800b3b2:	4945      	ldr	r1, [pc, #276]	; (800b4c8 <wall_init+0x128>)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	011a      	lsls	r2, r3, #4
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	441a      	add	r2, r3
 800b3bc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b3c0:	2002      	movs	r0, #2
 800b3c2:	f360 0301 	bfi	r3, r0, #0, #2
 800b3c6:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].east = UNKNOWN;
 800b3ca:	493f      	ldr	r1, [pc, #252]	; (800b4c8 <wall_init+0x128>)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	011a      	lsls	r2, r3, #4
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	441a      	add	r2, r3
 800b3d4:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b3d8:	2002      	movs	r0, #2
 800b3da:	f360 0383 	bfi	r3, r0, #2, #2
 800b3de:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].south = UNKNOWN;
 800b3e2:	4939      	ldr	r1, [pc, #228]	; (800b4c8 <wall_init+0x128>)
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	011a      	lsls	r2, r3, #4
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	441a      	add	r2, r3
 800b3ec:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b3f0:	2002      	movs	r0, #2
 800b3f2:	f360 1305 	bfi	r3, r0, #4, #2
 800b3f6:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].west = UNKNOWN;
 800b3fa:	4933      	ldr	r1, [pc, #204]	; (800b4c8 <wall_init+0x128>)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	011a      	lsls	r2, r3, #4
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	441a      	add	r2, r3
 800b404:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b408:	2002      	movs	r0, #2
 800b40a:	f360 1387 	bfi	r3, r0, #6, #2
 800b40e:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	3301      	adds	r3, #1
 800b416:	60bb      	str	r3, [r7, #8]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	2b0f      	cmp	r3, #15
 800b41c:	ddc9      	ble.n	800b3b2 <wall_init+0x12>
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	3301      	adds	r3, #1
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2b0f      	cmp	r3, #15
 800b428:	ddc0      	ble.n	800b3ac <wall_init+0xc>

			}
	}

	//外周を壁ありにする
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800b42a:	2300      	movs	r3, #0
 800b42c:	607b      	str	r3, [r7, #4]
 800b42e:	e02a      	b.n	800b486 <wall_init+0xe6>
	{
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800b430:	4a25      	ldr	r2, [pc, #148]	; (800b4c8 <wall_init+0x128>)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	015b      	lsls	r3, r3, #5
 800b436:	4413      	add	r3, r2
 800b438:	f103 021e 	add.w	r2, r3, #30
 800b43c:	7813      	ldrb	r3, [r2, #0]
 800b43e:	2101      	movs	r1, #1
 800b440:	f361 0301 	bfi	r3, r1, #0, #2
 800b444:	7013      	strb	r3, [r2, #0]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800b446:	4920      	ldr	r1, [pc, #128]	; (800b4c8 <wall_init+0x128>)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800b44e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b452:	2001      	movs	r0, #1
 800b454:	f360 0383 	bfi	r3, r0, #2, #2
 800b458:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		Wall[n][0].south = WALL;
 800b45c:	4a1a      	ldr	r2, [pc, #104]	; (800b4c8 <wall_init+0x128>)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	015b      	lsls	r3, r3, #5
 800b462:	441a      	add	r2, r3
 800b464:	7813      	ldrb	r3, [r2, #0]
 800b466:	2101      	movs	r1, #1
 800b468:	f361 1305 	bfi	r3, r1, #4, #2
 800b46c:	7013      	strb	r3, [r2, #0]
		Wall[0][n].west = WALL;
 800b46e:	4916      	ldr	r1, [pc, #88]	; (800b4c8 <wall_init+0x128>)
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b476:	2001      	movs	r0, #1
 800b478:	f360 1387 	bfi	r3, r0, #6, #2
 800b47c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	3301      	adds	r3, #1
 800b484:	607b      	str	r3, [r7, #4]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b0f      	cmp	r3, #15
 800b48a:	ddd1      	ble.n	800b430 <wall_init+0x90>
	}

	//スタート座標の東壁に壁ありにする
	Wall[0][0].east = WALL;
 800b48c:	4a0e      	ldr	r2, [pc, #56]	; (800b4c8 <wall_init+0x128>)
 800b48e:	7813      	ldrb	r3, [r2, #0]
 800b490:	2101      	movs	r1, #1
 800b492:	f361 0383 	bfi	r3, r1, #2, #2
 800b496:	7013      	strb	r3, [r2, #0]
	Wall[0][0].north = NOWALL;
 800b498:	4a0b      	ldr	r2, [pc, #44]	; (800b4c8 <wall_init+0x128>)
 800b49a:	7813      	ldrb	r3, [r2, #0]
 800b49c:	f36f 0301 	bfc	r3, #0, #2
 800b4a0:	7013      	strb	r3, [r2, #0]
	Wall[1][0].west = WALL;
 800b4a2:	4a09      	ldr	r2, [pc, #36]	; (800b4c8 <wall_init+0x128>)
 800b4a4:	f892 3020 	ldrb.w	r3, [r2, #32]
 800b4a8:	2101      	movs	r1, #1
 800b4aa:	f361 1387 	bfi	r3, r1, #6, #2
 800b4ae:	f882 3020 	strb.w	r3, [r2, #32]
	Wall[0][1].south = NOWALL;
 800b4b2:	4a05      	ldr	r2, [pc, #20]	; (800b4c8 <wall_init+0x128>)
 800b4b4:	7893      	ldrb	r3, [r2, #2]
 800b4b6:	f36f 1305 	bfc	r3, #4, #2
 800b4ba:	7093      	strb	r3, [r2, #2]
//	Flash_clear_sector1();

	//書く
	//flash_store_init();

}
 800b4bc:	bf00      	nop
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr
 800b4c8:	20010398 	.word	0x20010398

0800b4cc <wall_set>:
	FLASH_Write_Word(address+8, Wall[x][y].south);
	FLASH_Write_Word(address+12, Wall[x][y].west);

}
//壁の更新xyグローバル
void wall_set(){
 800b4cc:	b490      	push	{r4, r7}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
	uint8_t wall_dir[4];
	//壁センサ値を読んで、各方角の壁の有無を判定
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800b4d2:	4b8b      	ldr	r3, [pc, #556]	; (800b700 <wall_set+0x234>)
 800b4d4:	ed93 7a00 	vldr	s14, [r3]
 800b4d8:	4b89      	ldr	r3, [pc, #548]	; (800b700 <wall_set+0x234>)
 800b4da:	edd3 7a03 	vldr	s15, [r3, #12]
 800b4de:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b4e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b4e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b4ea:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800b704 <wall_set+0x238>
 800b4ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f6:	bfcc      	ite	gt
 800b4f8:	2301      	movgt	r3, #1
 800b4fa:	2300      	movle	r3, #0
 800b4fc:	b2da      	uxtb	r2, r3
 800b4fe:	4b82      	ldr	r3, [pc, #520]	; (800b708 <wall_set+0x23c>)
 800b500:	7a5b      	ldrb	r3, [r3, #9]
 800b502:	f107 0108 	add.w	r1, r7, #8
 800b506:	440b      	add	r3, r1
 800b508:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800b50c:	4b7c      	ldr	r3, [pc, #496]	; (800b700 <wall_set+0x234>)
 800b50e:	edd3 7a01 	vldr	s15, [r3, #4]
 800b512:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800b70c <wall_set+0x240>
 800b516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b51e:	bfcc      	ite	gt
 800b520:	2301      	movgt	r3, #1
 800b522:	2300      	movle	r3, #0
 800b524:	b2d9      	uxtb	r1, r3
 800b526:	4b78      	ldr	r3, [pc, #480]	; (800b708 <wall_set+0x23c>)
 800b528:	7a5b      	ldrb	r3, [r3, #9]
 800b52a:	3301      	adds	r3, #1
 800b52c:	425a      	negs	r2, r3
 800b52e:	f003 0303 	and.w	r3, r3, #3
 800b532:	f002 0203 	and.w	r2, r2, #3
 800b536:	bf58      	it	pl
 800b538:	4253      	negpl	r3, r2
 800b53a:	460a      	mov	r2, r1
 800b53c:	f107 0108 	add.w	r1, r7, #8
 800b540:	440b      	add	r3, r1
 800b542:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800b546:	4b70      	ldr	r3, [pc, #448]	; (800b708 <wall_set+0x23c>)
 800b548:	7a5b      	ldrb	r3, [r3, #9]
 800b54a:	3302      	adds	r3, #2
 800b54c:	425a      	negs	r2, r3
 800b54e:	f003 0303 	and.w	r3, r3, #3
 800b552:	f002 0203 	and.w	r2, r2, #3
 800b556:	bf58      	it	pl
 800b558:	4253      	negpl	r3, r2
 800b55a:	f107 0208 	add.w	r2, r7, #8
 800b55e:	4413      	add	r3, r2
 800b560:	2200      	movs	r2, #0
 800b562:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800b566:	4b66      	ldr	r3, [pc, #408]	; (800b700 <wall_set+0x234>)
 800b568:	edd3 7a02 	vldr	s15, [r3, #8]
 800b56c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800b710 <wall_set+0x244>
 800b570:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b578:	bfcc      	ite	gt
 800b57a:	2301      	movgt	r3, #1
 800b57c:	2300      	movle	r3, #0
 800b57e:	b2d9      	uxtb	r1, r3
 800b580:	4b61      	ldr	r3, [pc, #388]	; (800b708 <wall_set+0x23c>)
 800b582:	7a5b      	ldrb	r3, [r3, #9]
 800b584:	3303      	adds	r3, #3
 800b586:	425a      	negs	r2, r3
 800b588:	f003 0303 	and.w	r3, r3, #3
 800b58c:	f002 0203 	and.w	r2, r2, #3
 800b590:	bf58      	it	pl
 800b592:	4253      	negpl	r3, r2
 800b594:	460a      	mov	r2, r1
 800b596:	f107 0108 	add.w	r1, r7, #8
 800b59a:	440b      	add	r3, r1
 800b59c:	f803 2c04 	strb.w	r2, [r3, #-4]

	  //各方角の壁に壁の有無を代入
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800b5a0:	7939      	ldrb	r1, [r7, #4]
 800b5a2:	4b59      	ldr	r3, [pc, #356]	; (800b708 <wall_set+0x23c>)
 800b5a4:	799b      	ldrb	r3, [r3, #6]
 800b5a6:	461c      	mov	r4, r3
 800b5a8:	4b57      	ldr	r3, [pc, #348]	; (800b708 <wall_set+0x23c>)
 800b5aa:	79db      	ldrb	r3, [r3, #7]
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	f003 0303 	and.w	r3, r3, #3
 800b5b4:	b2d8      	uxtb	r0, r3
 800b5b6:	4957      	ldr	r1, [pc, #348]	; (800b714 <wall_set+0x248>)
 800b5b8:	0123      	lsls	r3, r4, #4
 800b5ba:	441a      	add	r2, r3
 800b5bc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b5c0:	f360 0301 	bfi	r3, r0, #0, #2
 800b5c4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
 800b5c8:	7979      	ldrb	r1, [r7, #5]
 800b5ca:	4b4f      	ldr	r3, [pc, #316]	; (800b708 <wall_set+0x23c>)
 800b5cc:	799b      	ldrb	r3, [r3, #6]
 800b5ce:	461c      	mov	r4, r3
 800b5d0:	4b4d      	ldr	r3, [pc, #308]	; (800b708 <wall_set+0x23c>)
 800b5d2:	79db      	ldrb	r3, [r3, #7]
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	f003 0303 	and.w	r3, r3, #3
 800b5dc:	b2d8      	uxtb	r0, r3
 800b5de:	494d      	ldr	r1, [pc, #308]	; (800b714 <wall_set+0x248>)
 800b5e0:	0123      	lsls	r3, r4, #4
 800b5e2:	441a      	add	r2, r3
 800b5e4:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b5e8:	f360 0383 	bfi	r3, r0, #2, #2
 800b5ec:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
 800b5f0:	79b9      	ldrb	r1, [r7, #6]
 800b5f2:	4b45      	ldr	r3, [pc, #276]	; (800b708 <wall_set+0x23c>)
 800b5f4:	799b      	ldrb	r3, [r3, #6]
 800b5f6:	461c      	mov	r4, r3
 800b5f8:	4b43      	ldr	r3, [pc, #268]	; (800b708 <wall_set+0x23c>)
 800b5fa:	79db      	ldrb	r3, [r3, #7]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	460b      	mov	r3, r1
 800b600:	f003 0303 	and.w	r3, r3, #3
 800b604:	b2d8      	uxtb	r0, r3
 800b606:	4943      	ldr	r1, [pc, #268]	; (800b714 <wall_set+0x248>)
 800b608:	0123      	lsls	r3, r4, #4
 800b60a:	441a      	add	r2, r3
 800b60c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b610:	f360 1305 	bfi	r3, r0, #4, #2
 800b614:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
 800b618:	79f9      	ldrb	r1, [r7, #7]
 800b61a:	4b3b      	ldr	r3, [pc, #236]	; (800b708 <wall_set+0x23c>)
 800b61c:	799b      	ldrb	r3, [r3, #6]
 800b61e:	461c      	mov	r4, r3
 800b620:	4b39      	ldr	r3, [pc, #228]	; (800b708 <wall_set+0x23c>)
 800b622:	79db      	ldrb	r3, [r3, #7]
 800b624:	461a      	mov	r2, r3
 800b626:	460b      	mov	r3, r1
 800b628:	f003 0303 	and.w	r3, r3, #3
 800b62c:	b2d8      	uxtb	r0, r3
 800b62e:	4939      	ldr	r1, [pc, #228]	; (800b714 <wall_set+0x248>)
 800b630:	0123      	lsls	r3, r4, #4
 800b632:	441a      	add	r2, r3
 800b634:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b638:	f360 1387 	bfi	r3, r0, #6, #2
 800b63c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  //端の座標でなければ反対の壁も記入
	  //uint32_t address;
	  if(Pos.NextY < (NUMBER_OF_SQUARES-1) )
 800b640:	4b31      	ldr	r3, [pc, #196]	; (800b708 <wall_set+0x23c>)
 800b642:	79db      	ldrb	r3, [r3, #7]
 800b644:	2b0e      	cmp	r3, #14
 800b646:	d812      	bhi.n	800b66e <wall_set+0x1a2>
	  {
		  Wall[Pos.NextX][Pos.NextY+1].south = wall_dir[0];//北端でなければ
 800b648:	7939      	ldrb	r1, [r7, #4]
 800b64a:	4b2f      	ldr	r3, [pc, #188]	; (800b708 <wall_set+0x23c>)
 800b64c:	799b      	ldrb	r3, [r3, #6]
 800b64e:	461a      	mov	r2, r3
 800b650:	4b2d      	ldr	r3, [pc, #180]	; (800b708 <wall_set+0x23c>)
 800b652:	79db      	ldrb	r3, [r3, #7]
 800b654:	3301      	adds	r3, #1
 800b656:	f001 0103 	and.w	r1, r1, #3
 800b65a:	b2c8      	uxtb	r0, r1
 800b65c:	492d      	ldr	r1, [pc, #180]	; (800b714 <wall_set+0x248>)
 800b65e:	0112      	lsls	r2, r2, #4
 800b660:	441a      	add	r2, r3
 800b662:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b666:	f360 1305 	bfi	r3, r0, #4, #2
 800b66a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  //address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY+1)*16*(NUMBER_OF_SQUARES) );
		  //FLASH_Write_Word(address+8, Wall[Pos.NextX][Pos.NextY+1].south);
	  }
	  if(Pos.NextX < (NUMBER_OF_SQUARES-1) )
 800b66e:	4b26      	ldr	r3, [pc, #152]	; (800b708 <wall_set+0x23c>)
 800b670:	799b      	ldrb	r3, [r3, #6]
 800b672:	2b0e      	cmp	r3, #14
 800b674:	d811      	bhi.n	800b69a <wall_set+0x1ce>
	  {
		  Wall[Pos.NextX+1][Pos.NextY].west = wall_dir[1];//東端でなければ
 800b676:	7979      	ldrb	r1, [r7, #5]
 800b678:	4b23      	ldr	r3, [pc, #140]	; (800b708 <wall_set+0x23c>)
 800b67a:	799b      	ldrb	r3, [r3, #6]
 800b67c:	3301      	adds	r3, #1
 800b67e:	4a22      	ldr	r2, [pc, #136]	; (800b708 <wall_set+0x23c>)
 800b680:	79d2      	ldrb	r2, [r2, #7]
 800b682:	f001 0103 	and.w	r1, r1, #3
 800b686:	b2c8      	uxtb	r0, r1
 800b688:	4922      	ldr	r1, [pc, #136]	; (800b714 <wall_set+0x248>)
 800b68a:	011b      	lsls	r3, r3, #4
 800b68c:	441a      	add	r2, r3
 800b68e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b692:	f360 1387 	bfi	r3, r0, #6, #2
 800b696:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
//		  address = start_adress_sector1 + ( (Pos.NextX+1)*16) + ( (Pos.NextY)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+12, Wall[Pos.NextX+1][Pos.NextY].west);
	  }
	  if(Pos.NextY > 0 )
 800b69a:	4b1b      	ldr	r3, [pc, #108]	; (800b708 <wall_set+0x23c>)
 800b69c:	79db      	ldrb	r3, [r3, #7]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d012      	beq.n	800b6c8 <wall_set+0x1fc>
	  {
		  Wall[Pos.NextX][Pos.NextY-1].north = wall_dir[2];//南端でなければ
 800b6a2:	79b9      	ldrb	r1, [r7, #6]
 800b6a4:	4b18      	ldr	r3, [pc, #96]	; (800b708 <wall_set+0x23c>)
 800b6a6:	799b      	ldrb	r3, [r3, #6]
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	4b17      	ldr	r3, [pc, #92]	; (800b708 <wall_set+0x23c>)
 800b6ac:	79db      	ldrb	r3, [r3, #7]
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	f001 0103 	and.w	r1, r1, #3
 800b6b4:	b2c8      	uxtb	r0, r1
 800b6b6:	4917      	ldr	r1, [pc, #92]	; (800b714 <wall_set+0x248>)
 800b6b8:	0112      	lsls	r2, r2, #4
 800b6ba:	441a      	add	r2, r3
 800b6bc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b6c0:	f360 0301 	bfi	r3, r0, #0, #2
 800b6c4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
//		  address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY-1)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+0, Wall[Pos.NextX][Pos.NextY-1].north);
	  }
	  if(Pos.NextX > 0 )
 800b6c8:	4b0f      	ldr	r3, [pc, #60]	; (800b708 <wall_set+0x23c>)
 800b6ca:	799b      	ldrb	r3, [r3, #6]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d011      	beq.n	800b6f4 <wall_set+0x228>
	  {
		  Wall[Pos.NextX-1][Pos.NextY].east = wall_dir[3];//西端でなければ
 800b6d0:	79f9      	ldrb	r1, [r7, #7]
 800b6d2:	4b0d      	ldr	r3, [pc, #52]	; (800b708 <wall_set+0x23c>)
 800b6d4:	799b      	ldrb	r3, [r3, #6]
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	4a0b      	ldr	r2, [pc, #44]	; (800b708 <wall_set+0x23c>)
 800b6da:	79d2      	ldrb	r2, [r2, #7]
 800b6dc:	f001 0103 	and.w	r1, r1, #3
 800b6e0:	b2c8      	uxtb	r0, r1
 800b6e2:	490c      	ldr	r1, [pc, #48]	; (800b714 <wall_set+0x248>)
 800b6e4:	011b      	lsls	r3, r3, #4
 800b6e6:	441a      	add	r2, r3
 800b6e8:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b6ec:	f360 0383 	bfi	r3, r0, #2, #2
 800b6f0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]


	  //一旦flashお休み。
	  //flashに書き込む
//	  wall_store_running(Pos.X,Pos.Y);
}
 800b6f4:	bf00      	nop
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bc90      	pop	{r4, r7}
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	2000ff58 	.word	0x2000ff58
 800b704:	428c0000 	.word	0x428c0000
 800b708:	20000000 	.word	0x20000000
 800b70c:	42b40000 	.word	0x42b40000
 800b710:	42c80000 	.word	0x42c80000
 800b714:	20010398 	.word	0x20010398

0800b718 <init_map>:


void init_map(int x, int y)
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
//迷路の歩数Mapを初期化する。全体を0xff、引数の座標x,yは0で初期化する

	int i,j;

	for(i = 0; i < NUMBER_OF_SQUARES; i++)		//迷路の大きさ分ループ(x座標)
 800b722:	2300      	movs	r3, #0
 800b724:	60fb      	str	r3, [r7, #12]
 800b726:	e013      	b.n	800b750 <init_map+0x38>
	{
		for(j = 0; j < NUMBER_OF_SQUARES; j++)	//迷路の大きさ分ループ(y座標)
 800b728:	2300      	movs	r3, #0
 800b72a:	60bb      	str	r3, [r7, #8]
 800b72c:	e00a      	b.n	800b744 <init_map+0x2c>
		{
			walk_map[i][j] = 255;	//すべて255で埋める
 800b72e:	491f      	ldr	r1, [pc, #124]	; (800b7ac <init_map+0x94>)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	011a      	lsls	r2, r3, #4
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	4413      	add	r3, r2
 800b738:	22ff      	movs	r2, #255	; 0xff
 800b73a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(j = 0; j < NUMBER_OF_SQUARES; j++)	//迷路の大きさ分ループ(y座標)
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	3301      	adds	r3, #1
 800b742:	60bb      	str	r3, [r7, #8]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	2b0f      	cmp	r3, #15
 800b748:	ddf1      	ble.n	800b72e <init_map+0x16>
	for(i = 0; i < NUMBER_OF_SQUARES; i++)		//迷路の大きさ分ループ(x座標)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3301      	adds	r3, #1
 800b74e:	60fb      	str	r3, [r7, #12]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2b0f      	cmp	r3, #15
 800b754:	dde8      	ble.n	800b728 <init_map+0x10>
		}
	}

	walk_map[x][y] = 0;				//ゴール座標の歩数を０に設定
 800b756:	4915      	ldr	r1, [pc, #84]	; (800b7ac <init_map+0x94>)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	011a      	lsls	r2, r3, #4
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	4413      	add	r3, r2
 800b760:	2200      	movs	r2, #0
 800b762:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	walk_map[x][y+1] = 0;
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	3301      	adds	r3, #1
 800b76a:	4910      	ldr	r1, [pc, #64]	; (800b7ac <init_map+0x94>)
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	0112      	lsls	r2, r2, #4
 800b770:	4413      	add	r3, r2
 800b772:	2200      	movs	r2, #0
 800b774:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	walk_map[x+1][y] = 0;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	3301      	adds	r3, #1
 800b77c:	490b      	ldr	r1, [pc, #44]	; (800b7ac <init_map+0x94>)
 800b77e:	011a      	lsls	r2, r3, #4
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	4413      	add	r3, r2
 800b784:	2200      	movs	r2, #0
 800b786:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	walk_map[x+1][y+1] = 0;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	1c5a      	adds	r2, r3, #1
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	3301      	adds	r3, #1
 800b792:	4906      	ldr	r1, [pc, #24]	; (800b7ac <init_map+0x94>)
 800b794:	0112      	lsls	r2, r2, #4
 800b796:	4413      	add	r3, r2
 800b798:	2200      	movs	r2, #0
 800b79a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	//歩数マップは合ってることにしよう。

}
 800b79e:	bf00      	nop
 800b7a0:	3714      	adds	r7, #20
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	2000ff68 	.word	0x2000ff68

0800b7b0 <make_map>:


void make_map(int x, int y, int mask)	//歩数マップを作成する
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b088      	sub	sp, #32
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
//maskの値(MASK_SEARCH or MASK_SECOND)によって、
//探索用の歩数Mapを作るか、最短走行の歩数Mapを作るかが切り替わる
	int i,j;
	_Bool change_flag;			//Map作成終了を見極めるためのフラグ

	init_map(x,y);				//Mapを初期化する
 800b7bc:	68b9      	ldr	r1, [r7, #8]
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	f7ff ffaa 	bl	800b718 <init_map>

	do //(6,9)(7,10)に対して、7,11がおかしい。
	{
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	75fb      	strb	r3, [r7, #23]
		for(i = 0; i < NUMBER_OF_SQUARES; i++)			//迷路の大きさ分ループ(x座標)
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	61fb      	str	r3, [r7, #28]
 800b7cc:	e0d8      	b.n	800b980 <make_map+0x1d0>
		{
			for(j = 0; j < NUMBER_OF_SQUARES; j++)		//迷路の大きさ分ループ(y座標)
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	61bb      	str	r3, [r7, #24]
 800b7d2:	e0ce      	b.n	800b972 <make_map+0x1c2>
			{
				if(walk_map[i][j] == 255)		//255の場合は次へ
 800b7d4:	4970      	ldr	r1, [pc, #448]	; (800b998 <make_map+0x1e8>)
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	011a      	lsls	r2, r3, #4
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	4413      	add	r3, r2
 800b7de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b7e2:	2bff      	cmp	r3, #255	; 0xff
 800b7e4:	f000 80c1 	beq.w	800b96a <make_map+0x1ba>
				{
					continue;
				}

				if(j < NUMBER_OF_SQUARES-1)					//範囲チェック
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	2b0e      	cmp	r3, #14
 800b7ec:	dc2c      	bgt.n	800b848 <make_map+0x98>
				{
					if( (Wall[i][j].north & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b7ee:	496b      	ldr	r1, [pc, #428]	; (800b99c <make_map+0x1ec>)
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	011a      	lsls	r2, r3, #4
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b7fc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b800:	b2db      	uxtb	r3, r3
 800b802:	461a      	mov	r2, r3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4013      	ands	r3, r2
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d11d      	bne.n	800b848 <make_map+0x98>
					{
						if(walk_map[i][j+1] == 255)			//まだ値が入っていなければ
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	3301      	adds	r3, #1
 800b810:	4961      	ldr	r1, [pc, #388]	; (800b998 <make_map+0x1e8>)
 800b812:	69fa      	ldr	r2, [r7, #28]
 800b814:	0112      	lsls	r2, r2, #4
 800b816:	4413      	add	r3, r2
 800b818:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b81c:	2bff      	cmp	r3, #255	; 0xff
 800b81e:	d113      	bne.n	800b848 <make_map+0x98>
						{
							walk_map[i][j+1] = walk_map[i][j] + 1;	//値を代入
 800b820:	495d      	ldr	r1, [pc, #372]	; (800b998 <make_map+0x1e8>)
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	011a      	lsls	r2, r3, #4
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	4413      	add	r3, r2
 800b82a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	3301      	adds	r3, #1
 800b832:	3201      	adds	r2, #1
 800b834:	b290      	uxth	r0, r2
 800b836:	4958      	ldr	r1, [pc, #352]	; (800b998 <make_map+0x1e8>)
 800b838:	69fa      	ldr	r2, [r7, #28]
 800b83a:	0112      	lsls	r2, r2, #4
 800b83c:	4413      	add	r3, r2
 800b83e:	4602      	mov	r2, r0
 800b840:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800b844:	2301      	movs	r3, #1
 800b846:	75fb      	strb	r3, [r7, #23]
						}
					}
				}

				if(i < NUMBER_OF_SQUARES-1)					//範囲チェック
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	2b0e      	cmp	r3, #14
 800b84c:	dc2c      	bgt.n	800b8a8 <make_map+0xf8>
				{
					if( (Wall[i][j].east & mask) == NOWALL)		//壁がなければ
 800b84e:	4953      	ldr	r1, [pc, #332]	; (800b99c <make_map+0x1ec>)
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	011a      	lsls	r2, r3, #4
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	4413      	add	r3, r2
 800b858:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b85c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b860:	b2db      	uxtb	r3, r3
 800b862:	461a      	mov	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4013      	ands	r3, r2
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d11d      	bne.n	800b8a8 <make_map+0xf8>
					{
						if(walk_map[i+1][j] == 255)			//値が入っていなければ
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	3301      	adds	r3, #1
 800b870:	4949      	ldr	r1, [pc, #292]	; (800b998 <make_map+0x1e8>)
 800b872:	011a      	lsls	r2, r3, #4
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	4413      	add	r3, r2
 800b878:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b87c:	2bff      	cmp	r3, #255	; 0xff
 800b87e:	d113      	bne.n	800b8a8 <make_map+0xf8>
						{
							walk_map[i+1][j] = walk_map[i][j] + 1;	//値を代入
 800b880:	4945      	ldr	r1, [pc, #276]	; (800b998 <make_map+0x1e8>)
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	011a      	lsls	r2, r3, #4
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	4413      	add	r3, r2
 800b88a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	3301      	adds	r3, #1
 800b892:	3201      	adds	r2, #1
 800b894:	b290      	uxth	r0, r2
 800b896:	4940      	ldr	r1, [pc, #256]	; (800b998 <make_map+0x1e8>)
 800b898:	011a      	lsls	r2, r3, #4
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	4413      	add	r3, r2
 800b89e:	4602      	mov	r2, r0
 800b8a0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	75fb      	strb	r3, [r7, #23]
						}
					}
				}

				if(j > 0)						//範囲チェック
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	dd2c      	ble.n	800b908 <make_map+0x158>
				{
					if( (Wall[i][j].south & mask) == NOWALL)	//壁がなければ
 800b8ae:	493b      	ldr	r1, [pc, #236]	; (800b99c <make_map+0x1ec>)
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	011a      	lsls	r2, r3, #4
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b8bc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4013      	ands	r3, r2
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d11d      	bne.n	800b908 <make_map+0x158>
					{
						if(walk_map[i][j-1] == 255)			//値が入っていなければ
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	3b01      	subs	r3, #1
 800b8d0:	4931      	ldr	r1, [pc, #196]	; (800b998 <make_map+0x1e8>)
 800b8d2:	69fa      	ldr	r2, [r7, #28]
 800b8d4:	0112      	lsls	r2, r2, #4
 800b8d6:	4413      	add	r3, r2
 800b8d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b8dc:	2bff      	cmp	r3, #255	; 0xff
 800b8de:	d113      	bne.n	800b908 <make_map+0x158>
						{
							walk_map[i][j-1] = walk_map[i][j] + 1;	//値を代入
 800b8e0:	492d      	ldr	r1, [pc, #180]	; (800b998 <make_map+0x1e8>)
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	011a      	lsls	r2, r3, #4
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	3201      	adds	r2, #1
 800b8f4:	b290      	uxth	r0, r2
 800b8f6:	4928      	ldr	r1, [pc, #160]	; (800b998 <make_map+0x1e8>)
 800b8f8:	69fa      	ldr	r2, [r7, #28]
 800b8fa:	0112      	lsls	r2, r2, #4
 800b8fc:	4413      	add	r3, r2
 800b8fe:	4602      	mov	r2, r0
 800b900:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800b904:	2301      	movs	r3, #1
 800b906:	75fb      	strb	r3, [r7, #23]
						}
					}
				}

				if(i > 0)						//範囲チェック
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	dd2e      	ble.n	800b96c <make_map+0x1bc>
				{
					if( (Wall[i][j].west & mask) == NOWALL)		//壁がなければ
 800b90e:	4923      	ldr	r1, [pc, #140]	; (800b99c <make_map+0x1ec>)
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	011a      	lsls	r2, r3, #4
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	4413      	add	r3, r2
 800b918:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b91c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800b920:	b2db      	uxtb	r3, r3
 800b922:	461a      	mov	r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4013      	ands	r3, r2
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d11f      	bne.n	800b96c <make_map+0x1bc>
					{
						if(walk_map[i-1][j] == 255)			//値が入っていなければ
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	3b01      	subs	r3, #1
 800b930:	4919      	ldr	r1, [pc, #100]	; (800b998 <make_map+0x1e8>)
 800b932:	011a      	lsls	r2, r3, #4
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	4413      	add	r3, r2
 800b938:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b93c:	2bff      	cmp	r3, #255	; 0xff
 800b93e:	d115      	bne.n	800b96c <make_map+0x1bc>
						{
							walk_map[i-1][j] = walk_map[i][j] + 1;	//値を代入
 800b940:	4915      	ldr	r1, [pc, #84]	; (800b998 <make_map+0x1e8>)
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	011a      	lsls	r2, r3, #4
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	4413      	add	r3, r2
 800b94a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	3b01      	subs	r3, #1
 800b952:	3201      	adds	r2, #1
 800b954:	b290      	uxth	r0, r2
 800b956:	4910      	ldr	r1, [pc, #64]	; (800b998 <make_map+0x1e8>)
 800b958:	011a      	lsls	r2, r3, #4
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	4413      	add	r3, r2
 800b95e:	4602      	mov	r2, r0
 800b960:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800b964:	2301      	movs	r3, #1
 800b966:	75fb      	strb	r3, [r7, #23]
 800b968:	e000      	b.n	800b96c <make_map+0x1bc>
					continue;
 800b96a:	bf00      	nop
			for(j = 0; j < NUMBER_OF_SQUARES; j++)		//迷路の大きさ分ループ(y座標)
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	3301      	adds	r3, #1
 800b970:	61bb      	str	r3, [r7, #24]
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	2b0f      	cmp	r3, #15
 800b976:	f77f af2d 	ble.w	800b7d4 <make_map+0x24>
		for(i = 0; i < NUMBER_OF_SQUARES; i++)			//迷路の大きさ分ループ(x座標)
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	3301      	adds	r3, #1
 800b97e:	61fb      	str	r3, [r7, #28]
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	2b0f      	cmp	r3, #15
 800b984:	f77f af23 	ble.w	800b7ce <make_map+0x1e>

			}

		}

	}while(change_flag == true);	//全体を作り終わるまで待つ
 800b988:	7dfb      	ldrb	r3, [r7, #23]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	f47f af1a 	bne.w	800b7c4 <make_map+0x14>

}
 800b990:	bf00      	nop
 800b992:	3720      	adds	r7, #32
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	2000ff68 	.word	0x2000ff68
 800b99c:	20010398 	.word	0x20010398

0800b9a0 <wall_ram_print>:
	flash_store_init();

}
//壁データの表示
//北から時計回り
void wall_ram_print(){
 800b9a0:	b5b0      	push	{r4, r5, r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af02      	add	r7, sp, #8

	//迷路
	for(int j=NUMBER_OF_SQUARES-1; j >= 0 ; j--){
 800b9a6:	230f      	movs	r3, #15
 800b9a8:	607b      	str	r3, [r7, #4]
 800b9aa:	e040      	b.n	800ba2e <wall_ram_print+0x8e>
		for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	603b      	str	r3, [r7, #0]
 800b9b0:	e034      	b.n	800ba1c <wall_ram_print+0x7c>
			//メモリの読み出し
			//北東南西の順に表示
			//北東南西 北東南西 ...
			//4回毎にスペース
		    printf("%d%d%d%d ",Wall[i][j].north, Wall[i][j].east, Wall[i][j].south, Wall[i][j].west);
 800b9b2:	4925      	ldr	r1, [pc, #148]	; (800ba48 <wall_ram_print+0xa8>)
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	011a      	lsls	r2, r3, #4
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b9c0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	491f      	ldr	r1, [pc, #124]	; (800ba48 <wall_ram_print+0xa8>)
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	011a      	lsls	r2, r3, #4
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b9d6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	461c      	mov	r4, r3
 800b9de:	491a      	ldr	r1, [pc, #104]	; (800ba48 <wall_ram_print+0xa8>)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	011a      	lsls	r2, r3, #4
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b9ec:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	461d      	mov	r5, r3
 800b9f4:	4914      	ldr	r1, [pc, #80]	; (800ba48 <wall_ram_print+0xa8>)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	011a      	lsls	r2, r3, #4
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800ba02:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	9300      	str	r3, [sp, #0]
 800ba0a:	462b      	mov	r3, r5
 800ba0c:	4622      	mov	r2, r4
 800ba0e:	4601      	mov	r1, r0
 800ba10:	480e      	ldr	r0, [pc, #56]	; (800ba4c <wall_ram_print+0xac>)
 800ba12:	f00a fa85 	bl	8015f20 <iprintf>
		for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	603b      	str	r3, [r7, #0]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	2b0f      	cmp	r3, #15
 800ba20:	ddc7      	ble.n	800b9b2 <wall_ram_print+0x12>

		}
		printf("\r\n");
 800ba22:	480b      	ldr	r0, [pc, #44]	; (800ba50 <wall_ram_print+0xb0>)
 800ba24:	f00a faf0 	bl	8016008 <puts>
	for(int j=NUMBER_OF_SQUARES-1; j >= 0 ; j--){
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	607b      	str	r3, [r7, #4]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	dabb      	bge.n	800b9ac <wall_ram_print+0xc>
	}

	printf("\r\n");
 800ba34:	4806      	ldr	r0, [pc, #24]	; (800ba50 <wall_ram_print+0xb0>)
 800ba36:	f00a fae7 	bl	8016008 <puts>
	printf("\r\n");
 800ba3a:	4805      	ldr	r0, [pc, #20]	; (800ba50 <wall_ram_print+0xb0>)
 800ba3c:	f00a fae4 	bl	8016008 <puts>
}
 800ba40:	bf00      	nop
 800ba42:	3708      	adds	r7, #8
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bdb0      	pop	{r4, r5, r7, pc}
 800ba48:	20010398 	.word	0x20010398
 800ba4c:	0801a304 	.word	0x0801a304
 800ba50:	0801a2f0 	.word	0x0801a2f0

0800ba54 <flash_copy_to_ram>:
//	}

}

void flash_copy_to_ram()
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b088      	sub	sp, #32
 800ba58:	af00      	add	r7, sp, #0
	uint32_t address=start_adress_sector1;
 800ba5a:	4b3e      	ldr	r3, [pc, #248]	; (800bb54 <flash_copy_to_ram+0x100>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	61fb      	str	r3, [r7, #28]

	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800ba60:	2300      	movs	r3, #0
 800ba62:	61bb      	str	r3, [r7, #24]
 800ba64:	e06f      	b.n	800bb46 <flash_copy_to_ram+0xf2>
	{
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800ba66:	2300      	movs	r3, #0
 800ba68:	617b      	str	r3, [r7, #20]
 800ba6a:	e066      	b.n	800bb3a <flash_copy_to_ram+0xe6>
			{
				uint32_t wall_data[4]={0};
 800ba6c:	1d3b      	adds	r3, r7, #4
 800ba6e:	2200      	movs	r2, #0
 800ba70:	601a      	str	r2, [r3, #0]
 800ba72:	605a      	str	r2, [r3, #4]
 800ba74:	609a      	str	r2, [r3, #8]
 800ba76:	60da      	str	r2, [r3, #12]
				FLASH_Read_Word(address+0, &wall_data[0]);
 800ba78:	1d3b      	adds	r3, r7, #4
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	69f8      	ldr	r0, [r7, #28]
 800ba7e:	f003 f8b3 	bl	800ebe8 <FLASH_Read_Word>
				FLASH_Read_Word(address+4, &wall_data[1]);
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	1d1a      	adds	r2, r3, #4
 800ba86:	1d3b      	adds	r3, r7, #4
 800ba88:	3304      	adds	r3, #4
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4610      	mov	r0, r2
 800ba8e:	f003 f8ab 	bl	800ebe8 <FLASH_Read_Word>
				FLASH_Read_Word(address+8, &wall_data[2]);
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	f103 0208 	add.w	r2, r3, #8
 800ba98:	1d3b      	adds	r3, r7, #4
 800ba9a:	3308      	adds	r3, #8
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	4610      	mov	r0, r2
 800baa0:	f003 f8a2 	bl	800ebe8 <FLASH_Read_Word>
				FLASH_Read_Word(address+12, &wall_data[3]);
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	f103 020c 	add.w	r2, r3, #12
 800baaa:	1d3b      	adds	r3, r7, #4
 800baac:	330c      	adds	r3, #12
 800baae:	4619      	mov	r1, r3
 800bab0:	4610      	mov	r0, r2
 800bab2:	f003 f899 	bl	800ebe8 <FLASH_Read_Word>
				Wall[i][j].north = wall_data[0];
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f003 0303 	and.w	r3, r3, #3
 800babc:	b2d8      	uxtb	r0, r3
 800babe:	4926      	ldr	r1, [pc, #152]	; (800bb58 <flash_copy_to_ram+0x104>)
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	011a      	lsls	r2, r3, #4
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	441a      	add	r2, r3
 800bac8:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bacc:	f360 0301 	bfi	r3, r0, #0, #2
 800bad0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].east = wall_data[1];
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	f003 0303 	and.w	r3, r3, #3
 800bada:	b2d8      	uxtb	r0, r3
 800badc:	491e      	ldr	r1, [pc, #120]	; (800bb58 <flash_copy_to_ram+0x104>)
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	011a      	lsls	r2, r3, #4
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	441a      	add	r2, r3
 800bae6:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800baea:	f360 0383 	bfi	r3, r0, #2, #2
 800baee:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].south = wall_data[2];
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f003 0303 	and.w	r3, r3, #3
 800baf8:	b2d8      	uxtb	r0, r3
 800bafa:	4917      	ldr	r1, [pc, #92]	; (800bb58 <flash_copy_to_ram+0x104>)
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	011a      	lsls	r2, r3, #4
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	441a      	add	r2, r3
 800bb04:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bb08:	f360 1305 	bfi	r3, r0, #4, #2
 800bb0c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].west = wall_data[3];
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	f003 0303 	and.w	r3, r3, #3
 800bb16:	b2d8      	uxtb	r0, r3
 800bb18:	490f      	ldr	r1, [pc, #60]	; (800bb58 <flash_copy_to_ram+0x104>)
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	011a      	lsls	r2, r3, #4
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	441a      	add	r2, r3
 800bb22:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bb26:	f360 1387 	bfi	r3, r0, #6, #2
 800bb2a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				address += 16;
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	3310      	adds	r3, #16
 800bb32:	61fb      	str	r3, [r7, #28]
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	3301      	adds	r3, #1
 800bb38:	617b      	str	r3, [r7, #20]
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	2b0f      	cmp	r3, #15
 800bb3e:	dd95      	ble.n	800ba6c <flash_copy_to_ram+0x18>
	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	3301      	adds	r3, #1
 800bb44:	61bb      	str	r3, [r7, #24]
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	2b0f      	cmp	r3, #15
 800bb4a:	dd8c      	ble.n	800ba66 <flash_copy_to_ram+0x12>
			}
	}

}
 800bb4c:	bf00      	nop
 800bb4e:	3720      	adds	r7, #32
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	0801a5d8 	.word	0x0801a5d8
 800bb58:	20010398 	.word	0x20010398

0800bb5c <InitExplore>:
#include "Debug.h"

#include <main.h>
void TIM5Init();
void InitExplore()
{
 800bb5c:	b590      	push	{r4, r7, lr}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
	PIDReset(A_VELO_PID);

	HAL_Delay(500);
#else
	//ペリフェラルの動作開始
	Motor_PWM_Start();
 800bb62:	f003 fb71 	bl	800f248 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800bb66:	f003 fa75 	bl	800f054 <EncoderStart>
	EmitterON();
 800bb6a:	f003 fa93 	bl	800f094 <EmitterON>
	ADCStart();
 800bb6e:	f002 ff93 	bl	800ea98 <ADCStart>
//		HAL_Delay(500);
//		htim2.Init.Prescaler -= 2;
//
//	}
	uint8_t imu_check;
	imu_check = IMU_init();
 800bb72:	f003 f9c3 	bl	800eefc <IMU_init>
 800bb76:	4603      	mov	r3, r0
 800bb78:	71fb      	strb	r3, [r7, #7]
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bb7a:	79fb      	ldrb	r3, [r7, #7]
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	4849      	ldr	r0, [pc, #292]	; (800bca4 <InitExplore+0x148>)
 800bb80:	f00a f9ce 	bl	8015f20 <iprintf>
#if 1 //IMUから値が来なくなる現象の対策
	imu_check =IMU_init();
 800bb84:	f003 f9ba 	bl	800eefc <IMU_init>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	71fb      	strb	r3, [r7, #7]
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bb8c:	79fb      	ldrb	r3, [r7, #7]
 800bb8e:	4619      	mov	r1, r3
 800bb90:	4844      	ldr	r0, [pc, #272]	; (800bca4 <InitExplore+0x148>)
 800bb92:	f00a f9c5 	bl	8015f20 <iprintf>
#endif
	HAL_Delay(100);
 800bb96:	2064      	movs	r0, #100	; 0x64
 800bb98:	f004 fb54 	bl	8010244 <HAL_Delay>

	ZGyro = ReadIMU(0x37, 0x38);
 800bb9c:	2138      	movs	r1, #56	; 0x38
 800bb9e:	2037      	movs	r0, #55	; 0x37
 800bba0:	f003 f91e 	bl	800ede0 <ReadIMU>
 800bba4:	eef0 7a40 	vmov.f32	s15, s0
 800bba8:	4b3f      	ldr	r3, [pc, #252]	; (800bca8 <InitExplore+0x14c>)
 800bbaa:	edc3 7a00 	vstr	s15, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800bbae:	4b3e      	ldr	r3, [pc, #248]	; (800bca8 <InitExplore+0x14c>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fc fc00 	bl	80083b8 <__aeabi_f2d>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	460c      	mov	r4, r1
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	4623      	mov	r3, r4
 800bbc0:	483a      	ldr	r0, [pc, #232]	; (800bcac <InitExplore+0x150>)
 800bbc2:	f00a f9ad 	bl	8015f20 <iprintf>
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	2004      	movs	r0, #4
 800bbca:	f004 f815 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800bbce:	2100      	movs	r1, #0
 800bbd0:	2005      	movs	r0, #5
 800bbd2:	f004 f811 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	2002      	movs	r0, #2
 800bbda:	f004 f80d 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bbde:	2100      	movs	r1, #0
 800bbe0:	2003      	movs	r0, #3
 800bbe2:	f004 f809 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800bbe6:	2100      	movs	r1, #0
 800bbe8:	2001      	movs	r0, #1
 800bbea:	f004 f805 	bl	800fbf8 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800bbee:	2100      	movs	r1, #0
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	f004 f801 	bl	800fbf8 <PIDChangeFlag>


	Load_Gain();
 800bbf6:	f003 fd43 	bl	800f680 <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800bbfa:	f247 512f 	movw	r1, #29999	; 0x752f
 800bbfe:	482c      	ldr	r0, [pc, #176]	; (800bcb0 <InitExplore+0x154>)
 800bc00:	f003 fbb8 	bl	800f374 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800bc04:	f247 512f 	movw	r1, #29999	; 0x752f
 800bc08:	482a      	ldr	r0, [pc, #168]	; (800bcb4 <InitExplore+0x158>)
 800bc0a:	f003 fbb3 	bl	800f374 <InitPulse>
//	  }

  }
#endif
	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800bc0e:	482a      	ldr	r0, [pc, #168]	; (800bcb8 <InitExplore+0x15c>)
 800bc10:	f007 f9ff 	bl	8013012 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800bc14:	4829      	ldr	r0, [pc, #164]	; (800bcbc <InitExplore+0x160>)
 800bc16:	f007 f9fc 	bl	8013012 <HAL_TIM_Base_Start_IT>
		printf("生値%f, 角速度%f ang/s, %f rad/s\r\n",ZGyro,ZGyro/16.4f, AngularV);
	}

#endif

	TargetVelocity[BODY] = 0;
 800bc1a:	4b29      	ldr	r3, [pc, #164]	; (800bcc0 <InitExplore+0x164>)
 800bc1c:	f04f 0200 	mov.w	r2, #0
 800bc20:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800bc22:	4b28      	ldr	r3, [pc, #160]	; (800bcc4 <InitExplore+0x168>)
 800bc24:	f04f 0200 	mov.w	r2, #0
 800bc28:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800bc2a:	4b27      	ldr	r3, [pc, #156]	; (800bcc8 <InitExplore+0x16c>)
 800bc2c:	f04f 0200 	mov.w	r2, #0
 800bc30:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800bc32:	4b26      	ldr	r3, [pc, #152]	; (800bccc <InitExplore+0x170>)
 800bc34:	f04f 0200 	mov.w	r2, #0
 800bc38:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800bc3a:	4b25      	ldr	r3, [pc, #148]	; (800bcd0 <InitExplore+0x174>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800bc40:	4b23      	ldr	r3, [pc, #140]	; (800bcd0 <InitExplore+0x174>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800bc46:	4b22      	ldr	r3, [pc, #136]	; (800bcd0 <InitExplore+0x174>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800bc4c:	f003 f980 	bl	800ef50 <IMU_Calib>
#if 0
	TargetPhoto[SL] = Photo[SL];
	TargetPhoto[SR] = Photo[SR];
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
#else
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800bc50:	4b20      	ldr	r3, [pc, #128]	; (800bcd4 <InitExplore+0x178>)
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	4a20      	ldr	r2, [pc, #128]	; (800bcd8 <InitExplore+0x17c>)
 800bc56:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
 800bc58:	4b1e      	ldr	r3, [pc, #120]	; (800bcd4 <InitExplore+0x178>)
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	4a1e      	ldr	r2, [pc, #120]	; (800bcd8 <InitExplore+0x17c>)
 800bc5e:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800bc60:	4b1d      	ldr	r3, [pc, #116]	; (800bcd8 <InitExplore+0x17c>)
 800bc62:	ed93 7a02 	vldr	s14, [r3, #8]
 800bc66:	4b1c      	ldr	r3, [pc, #112]	; (800bcd8 <InitExplore+0x17c>)
 800bc68:	edd3 7a01 	vldr	s15, [r3, #4]
 800bc6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc70:	4b1a      	ldr	r3, [pc, #104]	; (800bcdc <InitExplore+0x180>)
 800bc72:	edc3 7a00 	vstr	s15, [r3]

#endif
	PIDReset(L_VELO_PID);
 800bc76:	2004      	movs	r0, #4
 800bc78:	f003 ffd4 	bl	800fc24 <PIDReset>
	PIDReset(R_VELO_PID);
 800bc7c:	2005      	movs	r0, #5
 800bc7e:	f003 ffd1 	bl	800fc24 <PIDReset>

	PIDReset(A_VELO_PID);
 800bc82:	2000      	movs	r0, #0
 800bc84:	f003 ffce 	bl	800fc24 <PIDReset>
	PIDReset(L_WALL_PID);
 800bc88:	2002      	movs	r0, #2
 800bc8a:	f003 ffcb 	bl	800fc24 <PIDReset>
	PIDReset(R_WALL_PID);
 800bc8e:	2003      	movs	r0, #3
 800bc90:	f003 ffc8 	bl	800fc24 <PIDReset>
	PIDReset(D_WALL_PID);
 800bc94:	2001      	movs	r0, #1
 800bc96:	f003 ffc5 	bl	800fc24 <PIDReset>

#endif
}
 800bc9a:	bf00      	nop
 800bc9c:	370c      	adds	r7, #12
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd90      	pop	{r4, r7, pc}
 800bca2:	bf00      	nop
 800bca4:	0801a314 	.word	0x0801a314
 800bca8:	2000fcd4 	.word	0x2000fcd4
 800bcac:	0801a330 	.word	0x0801a330
 800bcb0:	40000424 	.word	0x40000424
 800bcb4:	40000824 	.word	0x40000824
 800bcb8:	200107e8 	.word	0x200107e8
 800bcbc:	200105a0 	.word	0x200105a0
 800bcc0:	2000fee8 	.word	0x2000fee8
 800bcc4:	2000fef8 	.word	0x2000fef8
 800bcc8:	2000fc28 	.word	0x2000fc28
 800bccc:	2000fc2c 	.word	0x2000fc2c
 800bcd0:	2000ff18 	.word	0x2000ff18
 800bcd4:	2000ff58 	.word	0x2000ff58
 800bcd8:	20010174 	.word	0x20010174
 800bcdc:	2000ff0c 	.word	0x2000ff0c

0800bce0 <InitFastest>:

void InitFastest()
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
	Motor_PWM_Start();
 800bce6:	f003 faaf 	bl	800f248 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800bcea:	f003 f9b3 	bl	800f054 <EncoderStart>
	EmitterON();
 800bcee:	f003 f9d1 	bl	800f094 <EmitterON>
	ADCStart();
 800bcf2:	f002 fed1 	bl	800ea98 <ADCStart>

	uint8_t imu_check;
	imu_check =IMU_init();
 800bcf6:	f003 f901 	bl	800eefc <IMU_init>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	71fb      	strb	r3, [r7, #7]

	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bcfe:	79fb      	ldrb	r3, [r7, #7]
 800bd00:	4619      	mov	r1, r3
 800bd02:	4838      	ldr	r0, [pc, #224]	; (800bde4 <InitFastest+0x104>)
 800bd04:	f00a f90c 	bl	8015f20 <iprintf>
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800bd08:	2100      	movs	r1, #0
 800bd0a:	2004      	movs	r0, #4
 800bd0c:	f003 ff74 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800bd10:	2100      	movs	r1, #0
 800bd12:	2005      	movs	r0, #5
 800bd14:	f003 ff70 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bd18:	2100      	movs	r1, #0
 800bd1a:	2002      	movs	r0, #2
 800bd1c:	f003 ff6c 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bd20:	2100      	movs	r1, #0
 800bd22:	2003      	movs	r0, #3
 800bd24:	f003 ff68 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800bd28:	2100      	movs	r1, #0
 800bd2a:	2001      	movs	r0, #1
 800bd2c:	f003 ff64 	bl	800fbf8 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800bd30:	2100      	movs	r1, #0
 800bd32:	2000      	movs	r0, #0
 800bd34:	f003 ff60 	bl	800fbf8 <PIDChangeFlag>


	Load_Gain();
 800bd38:	f003 fca2 	bl	800f680 <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800bd3c:	f247 512f 	movw	r1, #29999	; 0x752f
 800bd40:	4829      	ldr	r0, [pc, #164]	; (800bde8 <InitFastest+0x108>)
 800bd42:	f003 fb17 	bl	800f374 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800bd46:	f247 512f 	movw	r1, #29999	; 0x752f
 800bd4a:	4828      	ldr	r0, [pc, #160]	; (800bdec <InitFastest+0x10c>)
 800bd4c:	f003 fb12 	bl	800f374 <InitPulse>
//	  }

  }
#endif
	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800bd50:	4827      	ldr	r0, [pc, #156]	; (800bdf0 <InitFastest+0x110>)
 800bd52:	f007 f95e 	bl	8013012 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800bd56:	4827      	ldr	r0, [pc, #156]	; (800bdf4 <InitFastest+0x114>)
 800bd58:	f007 f95b 	bl	8013012 <HAL_TIM_Base_Start_IT>


	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
 800bd5c:	4b26      	ldr	r3, [pc, #152]	; (800bdf8 <InitFastest+0x118>)
 800bd5e:	f04f 0200 	mov.w	r2, #0
 800bd62:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800bd64:	4b25      	ldr	r3, [pc, #148]	; (800bdfc <InitFastest+0x11c>)
 800bd66:	f04f 0200 	mov.w	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800bd6c:	4b24      	ldr	r3, [pc, #144]	; (800be00 <InitFastest+0x120>)
 800bd6e:	f04f 0200 	mov.w	r2, #0
 800bd72:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800bd74:	4b23      	ldr	r3, [pc, #140]	; (800be04 <InitFastest+0x124>)
 800bd76:	f04f 0200 	mov.w	r2, #0
 800bd7a:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800bd7c:	4b22      	ldr	r3, [pc, #136]	; (800be08 <InitFastest+0x128>)
 800bd7e:	2200      	movs	r2, #0
 800bd80:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800bd82:	4b21      	ldr	r3, [pc, #132]	; (800be08 <InitFastest+0x128>)
 800bd84:	2200      	movs	r2, #0
 800bd86:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800bd88:	4b1f      	ldr	r3, [pc, #124]	; (800be08 <InitFastest+0x128>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800bd8e:	f003 f8df 	bl	800ef50 <IMU_Calib>
	//zg_offset = 0;
	TargetPhoto[SL] = Photo[SL];
 800bd92:	4b1e      	ldr	r3, [pc, #120]	; (800be0c <InitFastest+0x12c>)
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	4a1e      	ldr	r2, [pc, #120]	; (800be10 <InitFastest+0x130>)
 800bd98:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];
 800bd9a:	4b1c      	ldr	r3, [pc, #112]	; (800be0c <InitFastest+0x12c>)
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	4a1c      	ldr	r2, [pc, #112]	; (800be10 <InitFastest+0x130>)
 800bda0:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800bda2:	4b1b      	ldr	r3, [pc, #108]	; (800be10 <InitFastest+0x130>)
 800bda4:	ed93 7a02 	vldr	s14, [r3, #8]
 800bda8:	4b19      	ldr	r3, [pc, #100]	; (800be10 <InitFastest+0x130>)
 800bdaa:	edd3 7a01 	vldr	s15, [r3, #4]
 800bdae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdb2:	4b18      	ldr	r3, [pc, #96]	; (800be14 <InitFastest+0x134>)
 800bdb4:	edc3 7a00 	vstr	s15, [r3]

	PIDReset(L_VELO_PID);
 800bdb8:	2004      	movs	r0, #4
 800bdba:	f003 ff33 	bl	800fc24 <PIDReset>
	PIDReset(R_VELO_PID);
 800bdbe:	2005      	movs	r0, #5
 800bdc0:	f003 ff30 	bl	800fc24 <PIDReset>
	PIDReset(A_VELO_PID);
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	f003 ff2d 	bl	800fc24 <PIDReset>
	PIDReset(L_WALL_PID);
 800bdca:	2002      	movs	r0, #2
 800bdcc:	f003 ff2a 	bl	800fc24 <PIDReset>
	PIDReset(R_WALL_PID);
 800bdd0:	2003      	movs	r0, #3
 800bdd2:	f003 ff27 	bl	800fc24 <PIDReset>
	PIDReset(D_WALL_PID);
 800bdd6:	2001      	movs	r0, #1
 800bdd8:	f003 ff24 	bl	800fc24 <PIDReset>


}
 800bddc:	bf00      	nop
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	0801a314 	.word	0x0801a314
 800bde8:	40000424 	.word	0x40000424
 800bdec:	40000824 	.word	0x40000824
 800bdf0:	200107e8 	.word	0x200107e8
 800bdf4:	200105a0 	.word	0x200105a0
 800bdf8:	2000fee8 	.word	0x2000fee8
 800bdfc:	2000fef8 	.word	0x2000fef8
 800be00:	2000fc28 	.word	0x2000fc28
 800be04:	2000fc2c 	.word	0x2000fc2c
 800be08:	2000ff18 	.word	0x2000ff18
 800be0c:	2000ff58 	.word	0x2000ff58
 800be10:	20010174 	.word	0x20010174
 800be14:	2000ff0c 	.word	0x2000ff0c

0800be18 <Debug>:
void Debug()
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
//	while(1)
//	{
//
//	}
#if 1
	InitExplore();
 800be1e:	f7ff fe9d 	bl	800bb5c <InitExplore>
	InitPosition();
 800be22:	f7fc ffe9 	bl	8008df8 <InitPosition>
	wall_init();
 800be26:	f7ff fabb 	bl	800b3a0 <wall_init>

	TotalPulse[RIGHT] = 0;
 800be2a:	4b37      	ldr	r3, [pc, #220]	; (800bf08 <Debug+0xf0>)
 800be2c:	2200      	movs	r2, #0
 800be2e:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800be30:	4b35      	ldr	r3, [pc, #212]	; (800bf08 <Debug+0xf0>)
 800be32:	2200      	movs	r2, #0
 800be34:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800be36:	4b34      	ldr	r3, [pc, #208]	; (800bf08 <Debug+0xf0>)
 800be38:	2200      	movs	r2, #0
 800be3a:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800be3c:	2101      	movs	r1, #1
 800be3e:	2004      	movs	r0, #4
 800be40:	f003 feda 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800be44:	2101      	movs	r1, #1
 800be46:	2005      	movs	r0, #5
 800be48:	f003 fed6 	bl	800fbf8 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800be4c:	4b2e      	ldr	r3, [pc, #184]	; (800bf08 <Debug+0xf0>)
 800be4e:	6899      	ldr	r1, [r3, #8]
 800be50:	4b2d      	ldr	r3, [pc, #180]	; (800bf08 <Debug+0xf0>)
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	4b2c      	ldr	r3, [pc, #176]	; (800bf08 <Debug+0xf0>)
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	482c      	ldr	r0, [pc, #176]	; (800bf0c <Debug+0xf4>)
 800be5a:	f00a f861 	bl	8015f20 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800be5e:	2100      	movs	r1, #0
 800be60:	2001      	movs	r0, #1
 800be62:	f003 fec9 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800be66:	2100      	movs	r1, #0
 800be68:	2002      	movs	r0, #2
 800be6a:	f003 fec5 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800be6e:	2100      	movs	r1, #0
 800be70:	2003      	movs	r0, #3
 800be72:	f003 fec1 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 1);
 800be76:	2101      	movs	r1, #1
 800be78:	2000      	movs	r0, #0
 800be7a:	f003 febd 	bl	800fbf8 <PIDChangeFlag>
	ExploreVelocity=0;
 800be7e:	4b24      	ldr	r3, [pc, #144]	; (800bf10 <Debug+0xf8>)
 800be80:	f04f 0200 	mov.w	r2, #0
 800be84:	601a      	str	r2, [r3, #0]
	ChangeLED(3);
 800be86:	2003      	movs	r0, #3
 800be88:	f003 f920 	bl	800f0cc <ChangeLED>
	//HAL_Delay(500);

	//IT_mode = WRITINGFREE;
	IT_mode = EXPLORE;
 800be8c:	4b21      	ldr	r3, [pc, #132]	; (800bf14 <Debug+0xfc>)
 800be8e:	2200      	movs	r2, #0
 800be90:	601a      	str	r2, [r3, #0]
		printf("%f, %f, %f, %f\r\n", Photo[FL], Photo[FR], Photo[FL] - Photo[FR],Photo[FL] + Photo[FR] );
	}
	PIDChangeFlag(F_WALL_PID, 0);
#endif
#if 1 //直進テスト
	ExploreVelocity = 135;
 800be92:	4b1f      	ldr	r3, [pc, #124]	; (800bf10 <Debug+0xf8>)
 800be94:	4a20      	ldr	r2, [pc, #128]	; (800bf18 <Debug+0x100>)
 800be96:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800be98:	4b20      	ldr	r3, [pc, #128]	; (800bf1c <Debug+0x104>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	709a      	strb	r2, [r3, #2]
	Accel(61.75,ExploreVelocity);
 800be9e:	4b1c      	ldr	r3, [pc, #112]	; (800bf10 <Debug+0xf8>)
 800bea0:	edd3 7a00 	vldr	s15, [r3]
 800bea4:	eef0 0a67 	vmov.f32	s1, s15
 800bea8:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800bf20 <Debug+0x108>
 800beac:	f7fe f8a4 	bl	8009ff8 <Accel>
	for(int i=0; i < 1; i++)
 800beb0:	2300      	movs	r3, #0
 800beb2:	607b      	str	r3, [r7, #4]
 800beb4:	e015      	b.n	800bee2 <Debug+0xca>
	{
		Pos.Dir = front;
 800beb6:	4b19      	ldr	r3, [pc, #100]	; (800bf1c <Debug+0x104>)
 800beb8:	2200      	movs	r2, #0
 800beba:	709a      	strb	r2, [r3, #2]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800bebc:	4b14      	ldr	r3, [pc, #80]	; (800bf10 <Debug+0xf8>)
 800bebe:	edd3 7a00 	vldr	s15, [r3]
 800bec2:	4b18      	ldr	r3, [pc, #96]	; (800bf24 <Debug+0x10c>)
 800bec4:	ed93 7a00 	vldr	s14, [r3]
 800bec8:	eeb0 1a47 	vmov.f32	s2, s14
 800becc:	eef0 0a67 	vmov.f32	s1, s15
 800bed0:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800bf28 <Debug+0x110>
 800bed4:	f7fe fbc4 	bl	800a660 <GoStraight>
		//Pos.Dir = right;
		SlalomRight();
 800bed8:	f7fd fcc6 	bl	8009868 <SlalomRight>
	for(int i=0; i < 1; i++)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	3301      	adds	r3, #1
 800bee0:	607b      	str	r3, [r7, #4]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	dde6      	ble.n	800beb6 <Debug+0x9e>

	}
	Pos.Dir = front;
 800bee8:	4b0c      	ldr	r3, [pc, #48]	; (800bf1c <Debug+0x104>)
 800beea:	2200      	movs	r2, #0
 800beec:	709a      	strb	r2, [r3, #2]
	//Decel(45,0);
	TargetVelocity[BODY] = 0;
 800beee:	4b0f      	ldr	r3, [pc, #60]	; (800bf2c <Debug+0x114>)
 800bef0:	f04f 0200 	mov.w	r2, #0
 800bef4:	609a      	str	r2, [r3, #8]
	HAL_Delay(1000);
 800bef6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800befa:	f004 f9a3 	bl	8010244 <HAL_Delay>
	while(1)
	{
		printf("SL:%f, SR:%f, FL:%f, FR:%f\r\n",Photo[SL],Photo[SR],Photo[FL],Photo[FR]);
	}
#endif
}
 800befe:	bf00      	nop
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	2000ff18 	.word	0x2000ff18
 800bf0c:	0801a33c 	.word	0x0801a33c
 800bf10:	20010168 	.word	0x20010168
 800bf14:	2000fedc 	.word	0x2000fedc
 800bf18:	43070000 	.word	0x43070000
 800bf1c:	20000000 	.word	0x20000000
 800bf20:	42770000 	.word	0x42770000
 800bf24:	2000fef4 	.word	0x2000fef4
 800bf28:	42b40000 	.word	0x42b40000
 800bf2c:	2000fee8 	.word	0x2000fee8

0800bf30 <ParameterSetting>:
void ParameterSetting()
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	af00      	add	r7, sp, #0
	Load_Gain();
 800bf34:	f003 fba4 	bl	800f680 <Load_Gain>
	Change_Gain();
 800bf38:	f003 fc5e 	bl	800f7f8 <Change_Gain>

}
 800bf3c:	bf00      	nop
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <GainTestRWall>:
	{
		TargetVelocity[BODY] = 300;
	}
}
void GainTestRWall()
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	af00      	add	r7, sp, #0
	IT_mode = EXPLORE;
 800bf44:	4b18      	ldr	r3, [pc, #96]	; (800bfa8 <GainTestRWall+0x68>)
 800bf46:	2200      	movs	r2, #0
 800bf48:	601a      	str	r2, [r3, #0]
	InitExplore();
 800bf4a:	f7ff fe07 	bl	800bb5c <InitExplore>
	InitPosition();
 800bf4e:	f7fc ff53 	bl	8008df8 <InitPosition>
	wall_init();
 800bf52:	f7ff fa25 	bl	800b3a0 <wall_init>
	TotalPulse[RIGHT] = 0;
 800bf56:	4b15      	ldr	r3, [pc, #84]	; (800bfac <GainTestRWall+0x6c>)
 800bf58:	2200      	movs	r2, #0
 800bf5a:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bf5c:	4b13      	ldr	r3, [pc, #76]	; (800bfac <GainTestRWall+0x6c>)
 800bf5e:	2200      	movs	r2, #0
 800bf60:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800bf62:	4b12      	ldr	r3, [pc, #72]	; (800bfac <GainTestRWall+0x6c>)
 800bf64:	2200      	movs	r2, #0
 800bf66:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800bf68:	2101      	movs	r1, #1
 800bf6a:	2004      	movs	r0, #4
 800bf6c:	f003 fe44 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bf70:	2101      	movs	r1, #1
 800bf72:	2005      	movs	r0, #5
 800bf74:	f003 fe40 	bl	800fbf8 <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800bf78:	2100      	movs	r1, #0
 800bf7a:	2001      	movs	r0, #1
 800bf7c:	f003 fe3c 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bf80:	2100      	movs	r1, #0
 800bf82:	2002      	movs	r0, #2
 800bf84:	f003 fe38 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800bf88:	2101      	movs	r1, #1
 800bf8a:	2003      	movs	r0, #3
 800bf8c:	f003 fe34 	bl	800fbf8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800bf90:	4b07      	ldr	r3, [pc, #28]	; (800bfb0 <GainTestRWall+0x70>)
 800bf92:	f04f 0200 	mov.w	r2, #0
 800bf96:	601a      	str	r2, [r3, #0]
	ChangeLED(1);
 800bf98:	2001      	movs	r0, #1
 800bf9a:	f003 f897 	bl	800f0cc <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800bf9e:	4b05      	ldr	r3, [pc, #20]	; (800bfb4 <GainTestRWall+0x74>)
 800bfa0:	f04f 0200 	mov.w	r2, #0
 800bfa4:	609a      	str	r2, [r3, #8]
 800bfa6:	e7fa      	b.n	800bf9e <GainTestRWall+0x5e>
 800bfa8:	2000fedc 	.word	0x2000fedc
 800bfac:	2000ff18 	.word	0x2000ff18
 800bfb0:	20010168 	.word	0x20010168
 800bfb4:	2000fee8 	.word	0x2000fee8

0800bfb8 <GainTestDWall>:

	}
}
void GainTestDWall()
{
 800bfb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfbc:	b086      	sub	sp, #24
 800bfbe:	af06      	add	r7, sp, #24
	IT_mode = EXPLORE;
 800bfc0:	4b2c      	ldr	r3, [pc, #176]	; (800c074 <GainTestDWall+0xbc>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	601a      	str	r2, [r3, #0]
	InitExplore();
 800bfc6:	f7ff fdc9 	bl	800bb5c <InitExplore>
	InitPosition();
 800bfca:	f7fc ff15 	bl	8008df8 <InitPosition>
	wall_init();
 800bfce:	f7ff f9e7 	bl	800b3a0 <wall_init>
	TotalPulse[RIGHT] = 0;
 800bfd2:	4b29      	ldr	r3, [pc, #164]	; (800c078 <GainTestDWall+0xc0>)
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bfd8:	4b27      	ldr	r3, [pc, #156]	; (800c078 <GainTestDWall+0xc0>)
 800bfda:	2200      	movs	r2, #0
 800bfdc:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800bfde:	4b26      	ldr	r3, [pc, #152]	; (800c078 <GainTestDWall+0xc0>)
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	2004      	movs	r0, #4
 800bfe8:	f003 fe06 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bfec:	2101      	movs	r1, #1
 800bfee:	2005      	movs	r0, #5
 800bff0:	f003 fe02 	bl	800fbf8 <PIDChangeFlag>
	//PIDChangeFlagStraight(D_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 1);
 800bff4:	2101      	movs	r1, #1
 800bff6:	2001      	movs	r0, #1
 800bff8:	f003 fdfe 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bffc:	2100      	movs	r1, #0
 800bffe:	2002      	movs	r0, #2
 800c000:	f003 fdfa 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c004:	2100      	movs	r1, #0
 800c006:	2003      	movs	r0, #3
 800c008:	f003 fdf6 	bl	800fbf8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800c00c:	4b1b      	ldr	r3, [pc, #108]	; (800c07c <GainTestDWall+0xc4>)
 800c00e:	f04f 0200 	mov.w	r2, #0
 800c012:	601a      	str	r2, [r3, #0]
	ChangeLED(2);
 800c014:	2002      	movs	r0, #2
 800c016:	f003 f859 	bl	800f0cc <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800c01a:	4b19      	ldr	r3, [pc, #100]	; (800c080 <GainTestDWall+0xc8>)
 800c01c:	f04f 0200 	mov.w	r2, #0
 800c020:	609a      	str	r2, [r3, #8]
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800c022:	4b18      	ldr	r3, [pc, #96]	; (800c084 <GainTestDWall+0xcc>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4618      	mov	r0, r3
 800c028:	f7fc f9c6 	bl	80083b8 <__aeabi_f2d>
 800c02c:	4682      	mov	sl, r0
 800c02e:	468b      	mov	fp, r1
 800c030:	4b14      	ldr	r3, [pc, #80]	; (800c084 <GainTestDWall+0xcc>)
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	4618      	mov	r0, r3
 800c036:	f7fc f9bf 	bl	80083b8 <__aeabi_f2d>
 800c03a:	4604      	mov	r4, r0
 800c03c:	460d      	mov	r5, r1
 800c03e:	4b11      	ldr	r3, [pc, #68]	; (800c084 <GainTestDWall+0xcc>)
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	4618      	mov	r0, r3
 800c044:	f7fc f9b8 	bl	80083b8 <__aeabi_f2d>
 800c048:	4680      	mov	r8, r0
 800c04a:	4689      	mov	r9, r1
 800c04c:	4b0d      	ldr	r3, [pc, #52]	; (800c084 <GainTestDWall+0xcc>)
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	4618      	mov	r0, r3
 800c052:	f7fc f9b1 	bl	80083b8 <__aeabi_f2d>
 800c056:	4602      	mov	r2, r0
 800c058:	460b      	mov	r3, r1
 800c05a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c05e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c062:	e9cd 4500 	strd	r4, r5, [sp]
 800c066:	4652      	mov	r2, sl
 800c068:	465b      	mov	r3, fp
 800c06a:	4807      	ldr	r0, [pc, #28]	; (800c088 <GainTestDWall+0xd0>)
 800c06c:	f009 ff58 	bl	8015f20 <iprintf>
		TargetVelocity[BODY] = 0;
 800c070:	e7d3      	b.n	800c01a <GainTestDWall+0x62>
 800c072:	bf00      	nop
 800c074:	2000fedc 	.word	0x2000fedc
 800c078:	2000ff18 	.word	0x2000ff18
 800c07c:	20010168 	.word	0x20010168
 800c080:	2000fee8 	.word	0x2000fee8
 800c084:	2000ff58 	.word	0x2000ff58
 800c088:	0801a370 	.word	0x0801a370

0800c08c <GainTestAVelo>:
	}
}

void GainTestAVelo()
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	af00      	add	r7, sp, #0
	IT_mode = EXPLORE;
 800c090:	4b1a      	ldr	r3, [pc, #104]	; (800c0fc <GainTestAVelo+0x70>)
 800c092:	2200      	movs	r2, #0
 800c094:	601a      	str	r2, [r3, #0]
	InitExplore();
 800c096:	f7ff fd61 	bl	800bb5c <InitExplore>
	InitPosition();
 800c09a:	f7fc fead 	bl	8008df8 <InitPosition>
	wall_init();
 800c09e:	f7ff f97f 	bl	800b3a0 <wall_init>
	TotalPulse[RIGHT] = 0;
 800c0a2:	4b17      	ldr	r3, [pc, #92]	; (800c100 <GainTestAVelo+0x74>)
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c0a8:	4b15      	ldr	r3, [pc, #84]	; (800c100 <GainTestAVelo+0x74>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c0ae:	4b14      	ldr	r3, [pc, #80]	; (800c100 <GainTestAVelo+0x74>)
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800c0b4:	2101      	movs	r1, #1
 800c0b6:	2004      	movs	r0, #4
 800c0b8:	f003 fd9e 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c0bc:	2101      	movs	r1, #1
 800c0be:	2005      	movs	r0, #5
 800c0c0:	f003 fd9a 	bl	800fbf8 <PIDChangeFlag>
	//PIDChangeFlagStraight(A_VELO_PID);
	PIDChangeFlag(A_VELO_PID, 1);
 800c0c4:	2101      	movs	r1, #1
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	f003 fd96 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800c0cc:	2100      	movs	r1, #0
 800c0ce:	2001      	movs	r0, #1
 800c0d0:	f003 fd92 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	2002      	movs	r0, #2
 800c0d8:	f003 fd8e 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c0dc:	2100      	movs	r1, #0
 800c0de:	2003      	movs	r0, #3
 800c0e0:	f003 fd8a 	bl	800fbf8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800c0e4:	4b07      	ldr	r3, [pc, #28]	; (800c104 <GainTestAVelo+0x78>)
 800c0e6:	f04f 0200 	mov.w	r2, #0
 800c0ea:	601a      	str	r2, [r3, #0]
	ChangeLED(5);
 800c0ec:	2005      	movs	r0, #5
 800c0ee:	f002 ffed 	bl	800f0cc <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800c0f2:	4b05      	ldr	r3, [pc, #20]	; (800c108 <GainTestAVelo+0x7c>)
 800c0f4:	f04f 0200 	mov.w	r2, #0
 800c0f8:	609a      	str	r2, [r3, #8]
 800c0fa:	e7fa      	b.n	800c0f2 <GainTestAVelo+0x66>
 800c0fc:	2000fedc 	.word	0x2000fedc
 800c100:	2000ff18 	.word	0x2000ff18
 800c104:	20010168 	.word	0x20010168
 800c108:	2000fee8 	.word	0x2000fee8

0800c10c <WritingFree>:
		//printf("%f, %f\r\n", AngularV, Angle);

	}
}
void WritingFree()
{
 800c10c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c110:	b08a      	sub	sp, #40	; 0x28
 800c112:	af08      	add	r7, sp, #32
	IT_mode = WRITINGFREE;
 800c114:	4b3c      	ldr	r3, [pc, #240]	; (800c208 <WritingFree+0xfc>)
 800c116:	2201      	movs	r2, #1
 800c118:	601a      	str	r2, [r3, #0]

	InitExplore();
 800c11a:	f7ff fd1f 	bl	800bb5c <InitExplore>

	printf("3\r\n");
 800c11e:	483b      	ldr	r0, [pc, #236]	; (800c20c <WritingFree+0x100>)
 800c120:	f009 ff72 	bl	8016008 <puts>

	InitPosition();
 800c124:	f7fc fe68 	bl	8008df8 <InitPosition>

	wall_init();
 800c128:	f7ff f93a 	bl	800b3a0 <wall_init>
	printf("4\r\n");
 800c12c:	4838      	ldr	r0, [pc, #224]	; (800c210 <WritingFree+0x104>)
 800c12e:	f009 ff6b 	bl	8016008 <puts>

	TotalPulse[RIGHT] = 0;
 800c132:	4b38      	ldr	r3, [pc, #224]	; (800c214 <WritingFree+0x108>)
 800c134:	2200      	movs	r2, #0
 800c136:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c138:	4b36      	ldr	r3, [pc, #216]	; (800c214 <WritingFree+0x108>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c13e:	4b35      	ldr	r3, [pc, #212]	; (800c214 <WritingFree+0x108>)
 800c140:	2200      	movs	r2, #0
 800c142:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800c144:	2101      	movs	r1, #1
 800c146:	2004      	movs	r0, #4
 800c148:	f003 fd56 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c14c:	2101      	movs	r1, #1
 800c14e:	2005      	movs	r0, #5
 800c150:	f003 fd52 	bl	800fbf8 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c154:	2100      	movs	r1, #0
 800c156:	2001      	movs	r0, #1
 800c158:	f003 fd4e 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c15c:	2100      	movs	r1, #0
 800c15e:	2002      	movs	r0, #2
 800c160:	f003 fd4a 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c164:	2100      	movs	r1, #0
 800c166:	2003      	movs	r0, #3
 800c168:	f003 fd46 	bl	800fbf8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800c16c:	4b2a      	ldr	r3, [pc, #168]	; (800c218 <WritingFree+0x10c>)
 800c16e:	f04f 0200 	mov.w	r2, #0
 800c172:	601a      	str	r2, [r3, #0]
	ChangeLED(7);
 800c174:	2007      	movs	r0, #7
 800c176:	f002 ffa9 	bl	800f0cc <ChangeLED>
#else
	while(1)
	{
//		ExploreVelocity=300;
//		GoStraight(9000, ExploreVelocity, 0);
		TargetVelocity[BODY] = 0;
 800c17a:	4b28      	ldr	r3, [pc, #160]	; (800c21c <WritingFree+0x110>)
 800c17c:	f04f 0200 	mov.w	r2, #0
 800c180:	609a      	str	r2, [r3, #8]


		printf("%f, %f, %f, %f, %f\r\n",ZGyro, Photo[FL],Photo[FR],Photo[FL]+Photo[FR],(Photo[FL]+Photo[FR])/2);//壁センサ前のチェック。
 800c182:	4b27      	ldr	r3, [pc, #156]	; (800c220 <WritingFree+0x114>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4618      	mov	r0, r3
 800c188:	f7fc f916 	bl	80083b8 <__aeabi_f2d>
 800c18c:	e9c7 0100 	strd	r0, r1, [r7]
 800c190:	4b24      	ldr	r3, [pc, #144]	; (800c224 <WritingFree+0x118>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4618      	mov	r0, r3
 800c196:	f7fc f90f 	bl	80083b8 <__aeabi_f2d>
 800c19a:	4604      	mov	r4, r0
 800c19c:	460d      	mov	r5, r1
 800c19e:	4b21      	ldr	r3, [pc, #132]	; (800c224 <WritingFree+0x118>)
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7fc f908 	bl	80083b8 <__aeabi_f2d>
 800c1a8:	4680      	mov	r8, r0
 800c1aa:	4689      	mov	r9, r1
 800c1ac:	4b1d      	ldr	r3, [pc, #116]	; (800c224 <WritingFree+0x118>)
 800c1ae:	ed93 7a00 	vldr	s14, [r3]
 800c1b2:	4b1c      	ldr	r3, [pc, #112]	; (800c224 <WritingFree+0x118>)
 800c1b4:	edd3 7a03 	vldr	s15, [r3, #12]
 800c1b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1bc:	ee17 0a90 	vmov	r0, s15
 800c1c0:	f7fc f8fa 	bl	80083b8 <__aeabi_f2d>
 800c1c4:	4682      	mov	sl, r0
 800c1c6:	468b      	mov	fp, r1
 800c1c8:	4b16      	ldr	r3, [pc, #88]	; (800c224 <WritingFree+0x118>)
 800c1ca:	ed93 7a00 	vldr	s14, [r3]
 800c1ce:	4b15      	ldr	r3, [pc, #84]	; (800c224 <WritingFree+0x118>)
 800c1d0:	edd3 7a03 	vldr	s15, [r3, #12]
 800c1d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c1dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c1e0:	ee16 0a90 	vmov	r0, s13
 800c1e4:	f7fc f8e8 	bl	80083b8 <__aeabi_f2d>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c1f0:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800c1f4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c1f8:	e9cd 4500 	strd	r4, r5, [sp]
 800c1fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c200:	4809      	ldr	r0, [pc, #36]	; (800c228 <WritingFree+0x11c>)
 800c202:	f009 fe8d 	bl	8015f20 <iprintf>
		TargetVelocity[BODY] = 0;
 800c206:	e7b8      	b.n	800c17a <WritingFree+0x6e>
 800c208:	2000fedc 	.word	0x2000fedc
 800c20c:	0801a3a0 	.word	0x0801a3a0
 800c210:	0801a3a4 	.word	0x0801a3a4
 800c214:	2000ff18 	.word	0x2000ff18
 800c218:	20010168 	.word	0x20010168
 800c21c:	2000fee8 	.word	0x2000fee8
 800c220:	2000fcd4 	.word	0x2000fcd4
 800c224:	2000ff58 	.word	0x2000ff58
 800c228:	0801a3a8 	.word	0x0801a3a8

0800c22c <FastestRun>:
	}
	//探索の場合は迷路とステータスの準備
}

void FastestRun()
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af02      	add	r7, sp, #8
	IT_mode = EXPLORE;
 800c232:	4b76      	ldr	r3, [pc, #472]	; (800c40c <FastestRun+0x1e0>)
 800c234:	2200      	movs	r2, #0
 800c236:	601a      	str	r2, [r3, #0]
	//IT_mode = WRITINGFREE;
	//諸々の初期化
	HAL_Delay(250);
 800c238:	20fa      	movs	r0, #250	; 0xfa
 800c23a:	f004 f803 	bl	8010244 <HAL_Delay>
	Photo[FR] = 0;
 800c23e:	4b74      	ldr	r3, [pc, #464]	; (800c410 <FastestRun+0x1e4>)
 800c240:	f04f 0200 	mov.w	r2, #0
 800c244:	60da      	str	r2, [r3, #12]
	  int8_t mode=1;
 800c246:	2301      	movs	r3, #1
 800c248:	71bb      	strb	r3, [r7, #6]
	  printf("mode : %d\r\n", mode);
 800c24a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c24e:	4619      	mov	r1, r3
 800c250:	4870      	ldr	r0, [pc, #448]	; (800c414 <FastestRun+0x1e8>)
 800c252:	f009 fe65 	bl	8015f20 <iprintf>
	  ModeSelect( 1, 2, &mode);
 800c256:	1dbb      	adds	r3, r7, #6
 800c258:	461a      	mov	r2, r3
 800c25a:	2102      	movs	r1, #2
 800c25c:	2001      	movs	r0, #1
 800c25e:	f003 fea1 	bl	800ffa4 <ModeSelect>
	  Signal( mode );
 800c262:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c266:	4618      	mov	r0, r3
 800c268:	f003 fe4a 	bl	800ff00 <Signal>
	  printf("Switch\r\n");
 800c26c:	486a      	ldr	r0, [pc, #424]	; (800c418 <FastestRun+0x1ec>)
 800c26e:	f009 fecb 	bl	8016008 <puts>

		HAL_Delay(250);
 800c272:	20fa      	movs	r0, #250	; 0xfa
 800c274:	f003 ffe6 	bl	8010244 <HAL_Delay>
		Photo[FR] = 0;
 800c278:	4b65      	ldr	r3, [pc, #404]	; (800c410 <FastestRun+0x1e4>)
 800c27a:	f04f 0200 	mov.w	r2, #0
 800c27e:	60da      	str	r2, [r3, #12]
		  int8_t mode2=1;
 800c280:	2301      	movs	r3, #1
 800c282:	717b      	strb	r3, [r7, #5]
		  printf("mode : %d\r\n", mode2);
 800c284:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800c288:	4619      	mov	r1, r3
 800c28a:	4862      	ldr	r0, [pc, #392]	; (800c414 <FastestRun+0x1e8>)
 800c28c:	f009 fe48 	bl	8015f20 <iprintf>
		  ModeSelect( 1, 4, &mode2);
 800c290:	1d7b      	adds	r3, r7, #5
 800c292:	461a      	mov	r2, r3
 800c294:	2104      	movs	r1, #4
 800c296:	2001      	movs	r0, #1
 800c298:	f003 fe84 	bl	800ffa4 <ModeSelect>
		  Signal( mode2 );
 800c29c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f003 fe2d 	bl	800ff00 <Signal>
		  printf("Switch\r\n");
 800c2a6:	485c      	ldr	r0, [pc, #368]	; (800c418 <FastestRun+0x1ec>)
 800c2a8:	f009 feae 	bl	8016008 <puts>
	TIM5Init();
 800c2ac:	f001 f98a 	bl	800d5c4 <TIM5Init>

	InitFastest();
 800c2b0:	f7ff fd16 	bl	800bce0 <InitFastest>
	InitPosition();
 800c2b4:	f7fc fda0 	bl	8008df8 <InitPosition>


	wall_init();
 800c2b8:	f7ff f872 	bl	800b3a0 <wall_init>

	TotalPulse[RIGHT] = 0;
 800c2bc:	4b57      	ldr	r3, [pc, #348]	; (800c41c <FastestRun+0x1f0>)
 800c2be:	2200      	movs	r2, #0
 800c2c0:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c2c2:	4b56      	ldr	r3, [pc, #344]	; (800c41c <FastestRun+0x1f0>)
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c2c8:	4b54      	ldr	r3, [pc, #336]	; (800c41c <FastestRun+0x1f0>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800c2ce:	2101      	movs	r1, #1
 800c2d0:	2004      	movs	r0, #4
 800c2d2:	f003 fc91 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c2d6:	2101      	movs	r1, #1
 800c2d8:	2005      	movs	r0, #5
 800c2da:	f003 fc8d 	bl	800fbf8 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800c2de:	4b4f      	ldr	r3, [pc, #316]	; (800c41c <FastestRun+0x1f0>)
 800c2e0:	6899      	ldr	r1, [r3, #8]
 800c2e2:	4b4e      	ldr	r3, [pc, #312]	; (800c41c <FastestRun+0x1f0>)
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	4b4d      	ldr	r3, [pc, #308]	; (800c41c <FastestRun+0x1f0>)
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	484d      	ldr	r0, [pc, #308]	; (800c420 <FastestRun+0x1f4>)
 800c2ec:	f009 fe18 	bl	8015f20 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	2001      	movs	r0, #1
 800c2f4:	f003 fc80 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	2002      	movs	r0, #2
 800c2fc:	f003 fc7c 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c300:	2100      	movs	r1, #0
 800c302:	2003      	movs	r0, #3
 800c304:	f003 fc78 	bl	800fbf8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	char turn_mode;
	if(mode == 1)
 800c308:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d105      	bne.n	800c31c <FastestRun+0xf0>
	{
		ExploreVelocity = 400;
 800c310:	4b44      	ldr	r3, [pc, #272]	; (800c424 <FastestRun+0x1f8>)
 800c312:	4a45      	ldr	r2, [pc, #276]	; (800c428 <FastestRun+0x1fc>)
 800c314:	601a      	str	r2, [r3, #0]
		turn_mode = 'T';
 800c316:	2354      	movs	r3, #84	; 0x54
 800c318:	71fb      	strb	r3, [r7, #7]
 800c31a:	e005      	b.n	800c328 <FastestRun+0xfc>
	}
	else if(mode == 2)
 800c31c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c320:	2b02      	cmp	r3, #2
 800c322:	d101      	bne.n	800c328 <FastestRun+0xfc>
	{
		turn_mode = 'S';
 800c324:	2353      	movs	r3, #83	; 0x53
 800c326:	71fb      	strb	r3, [r7, #7]
	}

	switch(mode2)
 800c328:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800c32c:	3b01      	subs	r3, #1
 800c32e:	2b03      	cmp	r3, #3
 800c330:	d84d      	bhi.n	800c3ce <FastestRun+0x1a2>
 800c332:	a201      	add	r2, pc, #4	; (adr r2, 800c338 <FastestRun+0x10c>)
 800c334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c338:	0800c349 	.word	0x0800c349
 800c33c:	0800c375 	.word	0x0800c375
 800c340:	0800c3a1 	.word	0x0800c3a1
 800c344:	0800c3cf 	.word	0x0800c3cf
	{
	case 1:
		ExploreVelocity=90;
 800c348:	4b36      	ldr	r3, [pc, #216]	; (800c424 <FastestRun+0x1f8>)
 800c34a:	4a38      	ldr	r2, [pc, #224]	; (800c42c <FastestRun+0x200>)
 800c34c:	601a      	str	r2, [r3, #0]
		//未
		Sla.Pre = 9;
 800c34e:	4b38      	ldr	r3, [pc, #224]	; (800c430 <FastestRun+0x204>)
 800c350:	4a38      	ldr	r2, [pc, #224]	; (800c434 <FastestRun+0x208>)
 800c352:	601a      	str	r2, [r3, #0]
		Sla.Fol = 13;
 800c354:	4b36      	ldr	r3, [pc, #216]	; (800c430 <FastestRun+0x204>)
 800c356:	4a38      	ldr	r2, [pc, #224]	; (800c438 <FastestRun+0x20c>)
 800c358:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.014;
 800c35a:	4b35      	ldr	r3, [pc, #212]	; (800c430 <FastestRun+0x204>)
 800c35c:	4a37      	ldr	r2, [pc, #220]	; (800c43c <FastestRun+0x210>)
 800c35e:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c360:	4b33      	ldr	r3, [pc, #204]	; (800c430 <FastestRun+0x204>)
 800c362:	4a37      	ldr	r2, [pc, #220]	; (800c440 <FastestRun+0x214>)
 800c364:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c366:	4b32      	ldr	r3, [pc, #200]	; (800c430 <FastestRun+0x204>)
 800c368:	4a36      	ldr	r2, [pc, #216]	; (800c444 <FastestRun+0x218>)
 800c36a:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c36c:	4b30      	ldr	r3, [pc, #192]	; (800c430 <FastestRun+0x204>)
 800c36e:	4a2f      	ldr	r2, [pc, #188]	; (800c42c <FastestRun+0x200>)
 800c370:	619a      	str	r2, [r3, #24]
		break;
 800c372:	e02c      	b.n	800c3ce <FastestRun+0x1a2>
	case 2:
		//完
		ExploreVelocity=135;
 800c374:	4b2b      	ldr	r3, [pc, #172]	; (800c424 <FastestRun+0x1f8>)
 800c376:	4a34      	ldr	r2, [pc, #208]	; (800c448 <FastestRun+0x21c>)
 800c378:	601a      	str	r2, [r3, #0]
		Sla.Pre = 5;
 800c37a:	4b2d      	ldr	r3, [pc, #180]	; (800c430 <FastestRun+0x204>)
 800c37c:	4a33      	ldr	r2, [pc, #204]	; (800c44c <FastestRun+0x220>)
 800c37e:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800c380:	4b2b      	ldr	r3, [pc, #172]	; (800c430 <FastestRun+0x204>)
 800c382:	4a32      	ldr	r2, [pc, #200]	; (800c44c <FastestRun+0x220>)
 800c384:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.0273;
 800c386:	4b2a      	ldr	r3, [pc, #168]	; (800c430 <FastestRun+0x204>)
 800c388:	4a31      	ldr	r2, [pc, #196]	; (800c450 <FastestRun+0x224>)
 800c38a:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c38c:	4b28      	ldr	r3, [pc, #160]	; (800c430 <FastestRun+0x204>)
 800c38e:	4a2c      	ldr	r2, [pc, #176]	; (800c440 <FastestRun+0x214>)
 800c390:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c392:	4b27      	ldr	r3, [pc, #156]	; (800c430 <FastestRun+0x204>)
 800c394:	4a2b      	ldr	r2, [pc, #172]	; (800c444 <FastestRun+0x218>)
 800c396:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c398:	4b25      	ldr	r3, [pc, #148]	; (800c430 <FastestRun+0x204>)
 800c39a:	4a24      	ldr	r2, [pc, #144]	; (800c42c <FastestRun+0x200>)
 800c39c:	619a      	str	r2, [r3, #24]
		break;
 800c39e:	e016      	b.n	800c3ce <FastestRun+0x1a2>
//		Sla.Fol = 10;
//		Sla.Alpha = 0.04478;
//		Sla.Theta1 = 30;
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;
		ExploreVelocity=180;
 800c3a0:	4b20      	ldr	r3, [pc, #128]	; (800c424 <FastestRun+0x1f8>)
 800c3a2:	4a2c      	ldr	r2, [pc, #176]	; (800c454 <FastestRun+0x228>)
 800c3a4:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800c3a6:	4b22      	ldr	r3, [pc, #136]	; (800c430 <FastestRun+0x204>)
 800c3a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c3ac:	601a      	str	r2, [r3, #0]
		Sla.Fol = 3.5;
 800c3ae:	4b20      	ldr	r3, [pc, #128]	; (800c430 <FastestRun+0x204>)
 800c3b0:	4a29      	ldr	r2, [pc, #164]	; (800c458 <FastestRun+0x22c>)
 800c3b2:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.04;
 800c3b4:	4b1e      	ldr	r3, [pc, #120]	; (800c430 <FastestRun+0x204>)
 800c3b6:	4a29      	ldr	r2, [pc, #164]	; (800c45c <FastestRun+0x230>)
 800c3b8:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c3ba:	4b1d      	ldr	r3, [pc, #116]	; (800c430 <FastestRun+0x204>)
 800c3bc:	4a20      	ldr	r2, [pc, #128]	; (800c440 <FastestRun+0x214>)
 800c3be:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c3c0:	4b1b      	ldr	r3, [pc, #108]	; (800c430 <FastestRun+0x204>)
 800c3c2:	4a20      	ldr	r2, [pc, #128]	; (800c444 <FastestRun+0x218>)
 800c3c4:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c3c6:	4b1a      	ldr	r3, [pc, #104]	; (800c430 <FastestRun+0x204>)
 800c3c8:	4a18      	ldr	r2, [pc, #96]	; (800c42c <FastestRun+0x200>)
 800c3ca:	619a      	str	r2, [r3, #24]
		break;
 800c3cc:	bf00      	nop
//		Sla.Theta3 = 90;
		break;

	}

	ChangeLED(4);
 800c3ce:	2004      	movs	r0, #4
 800c3d0:	f002 fe7c 	bl	800f0cc <ChangeLED>


	//マップデータの取得。flashから壁データを取得。
	flash_copy_to_ram();
 800c3d4:	f7ff fb3e 	bl	800ba54 <flash_copy_to_ram>
	//最短経路導出(今回は省けそう。)

	//走る
	fast_run( X_GOAL_LESSER, Y_GOAL_LESSER,X_GOAL_LARGER,Y_GOAL_LARGER, turn_mode);
 800c3d8:	79fb      	ldrb	r3, [r7, #7]
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	2304      	movs	r3, #4
 800c3de:	2206      	movs	r2, #6
 800c3e0:	2103      	movs	r1, #3
 800c3e2:	2005      	movs	r0, #5
 800c3e4:	f001 f818 	bl	800d418 <fast_run>

	//ゴールしたら減速して、停止。
	Decel(45,0);
 800c3e8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800c460 <FastestRun+0x234>
 800c3ec:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800c464 <FastestRun+0x238>
 800c3f0:	f7fd feca 	bl	800a188 <Decel>
	//終了合図
	Signal(7);
 800c3f4:	2007      	movs	r0, #7
 800c3f6:	f003 fd83 	bl	800ff00 <Signal>

	while(1)
	{
		HAL_Delay(10*1000);
 800c3fa:	f242 7010 	movw	r0, #10000	; 0x2710
 800c3fe:	f003 ff21 	bl	8010244 <HAL_Delay>
		printf("ログ出力\r\n");
 800c402:	4819      	ldr	r0, [pc, #100]	; (800c468 <FastestRun+0x23c>)
 800c404:	f009 fe00 	bl	8016008 <puts>
		HAL_Delay(10*1000);
 800c408:	e7f7      	b.n	800c3fa <FastestRun+0x1ce>
 800c40a:	bf00      	nop
 800c40c:	2000fedc 	.word	0x2000fedc
 800c410:	2000ff58 	.word	0x2000ff58
 800c414:	0801a3c0 	.word	0x0801a3c0
 800c418:	0801a3cc 	.word	0x0801a3cc
 800c41c:	2000ff18 	.word	0x2000ff18
 800c420:	0801a33c 	.word	0x0801a33c
 800c424:	20010168 	.word	0x20010168
 800c428:	43c80000 	.word	0x43c80000
 800c42c:	42b40000 	.word	0x42b40000
 800c430:	2000ff30 	.word	0x2000ff30
 800c434:	41100000 	.word	0x41100000
 800c438:	41500000 	.word	0x41500000
 800c43c:	3c656042 	.word	0x3c656042
 800c440:	41f00000 	.word	0x41f00000
 800c444:	42700000 	.word	0x42700000
 800c448:	43070000 	.word	0x43070000
 800c44c:	40a00000 	.word	0x40a00000
 800c450:	3cdfa440 	.word	0x3cdfa440
 800c454:	43340000 	.word	0x43340000
 800c458:	40600000 	.word	0x40600000
 800c45c:	3d23d70a 	.word	0x3d23d70a
 800c460:	00000000 	.word	0x00000000
 800c464:	42340000 	.word	0x42340000
 800c468:	0801a3d4 	.word	0x0801a3d4

0800c46c <Explore>:
	}
}
void Explore()
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
	IT_mode = EXPLORE;
 800c472:	4ba1      	ldr	r3, [pc, #644]	; (800c6f8 <Explore+0x28c>)
 800c474:	2200      	movs	r2, #0
 800c476:	601a      	str	r2, [r3, #0]
	//IT_mode = WRITINGFREE;
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(100);
 800c478:	2064      	movs	r0, #100	; 0x64
 800c47a:	f003 fee3 	bl	8010244 <HAL_Delay>
	Photo[FR] = 0;
 800c47e:	4b9f      	ldr	r3, [pc, #636]	; (800c6fc <Explore+0x290>)
 800c480:	f04f 0200 	mov.w	r2, #0
 800c484:	60da      	str	r2, [r3, #12]
	int8_t mode=1;
 800c486:	2301      	movs	r3, #1
 800c488:	71bb      	strb	r3, [r7, #6]
		printf("mode : %d\r\n", mode);
 800c48a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c48e:	4619      	mov	r1, r3
 800c490:	489b      	ldr	r0, [pc, #620]	; (800c700 <Explore+0x294>)
 800c492:	f009 fd45 	bl	8015f20 <iprintf>
	ModeSelect( 1, 2, &mode);
 800c496:	1dbb      	adds	r3, r7, #6
 800c498:	461a      	mov	r2, r3
 800c49a:	2102      	movs	r1, #2
 800c49c:	2001      	movs	r0, #1
 800c49e:	f003 fd81 	bl	800ffa4 <ModeSelect>
	Signal( mode );
 800c4a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f003 fd2a 	bl	800ff00 <Signal>
		printf("Switch\r\n");
 800c4ac:	4895      	ldr	r0, [pc, #596]	; (800c704 <Explore+0x298>)
 800c4ae:	f009 fdab 	bl	8016008 <puts>

	HAL_Delay(100);
 800c4b2:	2064      	movs	r0, #100	; 0x64
 800c4b4:	f003 fec6 	bl	8010244 <HAL_Delay>
	Photo[FR] = 0;
 800c4b8:	4b90      	ldr	r3, [pc, #576]	; (800c6fc <Explore+0x290>)
 800c4ba:	f04f 0200 	mov.w	r2, #0
 800c4be:	60da      	str	r2, [r3, #12]
	int8_t mode2=1;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	717b      	strb	r3, [r7, #5]
		printf("mode : %d\r\n", mode2);
 800c4c4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	488d      	ldr	r0, [pc, #564]	; (800c700 <Explore+0x294>)
 800c4cc:	f009 fd28 	bl	8015f20 <iprintf>
	ModeSelect( 1, 4, &mode2);
 800c4d0:	1d7b      	adds	r3, r7, #5
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	2104      	movs	r1, #4
 800c4d6:	2001      	movs	r0, #1
 800c4d8:	f003 fd64 	bl	800ffa4 <ModeSelect>
	Signal( mode2 );
 800c4dc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f003 fd0d 	bl	800ff00 <Signal>
		printf("Switch\r\n");
 800c4e6:	4887      	ldr	r0, [pc, #540]	; (800c704 <Explore+0x298>)
 800c4e8:	f009 fd8e 	bl	8016008 <puts>

	TIM5Init();
 800c4ec:	f001 f86a 	bl	800d5c4 <TIM5Init>
	InitExplore();
 800c4f0:	f7ff fb34 	bl	800bb5c <InitExplore>
		printf("aaa\r\n");
 800c4f4:	4884      	ldr	r0, [pc, #528]	; (800c708 <Explore+0x29c>)
 800c4f6:	f009 fd87 	bl	8016008 <puts>

	InitPosition();
 800c4fa:	f7fc fc7d 	bl	8008df8 <InitPosition>
		printf("bbb\r\n");
 800c4fe:	4883      	ldr	r0, [pc, #524]	; (800c70c <Explore+0x2a0>)
 800c500:	f009 fd82 	bl	8016008 <puts>

	wall_init();
 800c504:	f7fe ff4c 	bl	800b3a0 <wall_init>
		printf("ccc\r\n");
 800c508:	4881      	ldr	r0, [pc, #516]	; (800c710 <Explore+0x2a4>)
 800c50a:	f009 fd7d 	bl	8016008 <puts>

	TotalPulse[RIGHT] = 0;
 800c50e:	4b81      	ldr	r3, [pc, #516]	; (800c714 <Explore+0x2a8>)
 800c510:	2200      	movs	r2, #0
 800c512:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c514:	4b7f      	ldr	r3, [pc, #508]	; (800c714 <Explore+0x2a8>)
 800c516:	2200      	movs	r2, #0
 800c518:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c51a:	4b7e      	ldr	r3, [pc, #504]	; (800c714 <Explore+0x2a8>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800c520:	2101      	movs	r1, #1
 800c522:	2004      	movs	r0, #4
 800c524:	f003 fb68 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c528:	2101      	movs	r1, #1
 800c52a:	2005      	movs	r0, #5
 800c52c:	f003 fb64 	bl	800fbf8 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c530:	2100      	movs	r1, #0
 800c532:	2001      	movs	r0, #1
 800c534:	f003 fb60 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c538:	2100      	movs	r1, #0
 800c53a:	2002      	movs	r0, #2
 800c53c:	f003 fb5c 	bl	800fbf8 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c540:	2100      	movs	r1, #0
 800c542:	2003      	movs	r0, #3
 800c544:	f003 fb58 	bl	800fbf8 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	ChangeLED(2);
 800c548:	2002      	movs	r0, #2
 800c54a:	f002 fdbf 	bl	800f0cc <ChangeLED>

	//スラロームか、一区画ずつかを選ぶ。
	char turn_mode;
	if(mode == 1)
 800c54e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c552:	2b01      	cmp	r3, #1
 800c554:	d105      	bne.n	800c562 <Explore+0xf6>
	{
		turn_mode = 'T';
 800c556:	2354      	movs	r3, #84	; 0x54
 800c558:	71fb      	strb	r3, [r7, #7]
		ExploreVelocity=300;
 800c55a:	4b6f      	ldr	r3, [pc, #444]	; (800c718 <Explore+0x2ac>)
 800c55c:	4a6f      	ldr	r2, [pc, #444]	; (800c71c <Explore+0x2b0>)
 800c55e:	601a      	str	r2, [r3, #0]
 800c560:	e005      	b.n	800c56e <Explore+0x102>
	}
	else if(mode == 2)
 800c562:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c566:	2b02      	cmp	r3, #2
 800c568:	d101      	bne.n	800c56e <Explore+0x102>
	{
		turn_mode = 'S';
 800c56a:	2353      	movs	r3, #83	; 0x53
 800c56c:	71fb      	strb	r3, [r7, #7]
	}

	switch(mode2)
 800c56e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800c572:	3b01      	subs	r3, #1
 800c574:	2b03      	cmp	r3, #3
 800c576:	d866      	bhi.n	800c646 <Explore+0x1da>
 800c578:	a201      	add	r2, pc, #4	; (adr r2, 800c580 <Explore+0x114>)
 800c57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c57e:	bf00      	nop
 800c580:	0800c591 	.word	0x0800c591
 800c584:	0800c5bd 	.word	0x0800c5bd
 800c588:	0800c5eb 	.word	0x0800c5eb
 800c58c:	0800c617 	.word	0x0800c617
	{
	case 1:
		ExploreVelocity=90;
 800c590:	4b61      	ldr	r3, [pc, #388]	; (800c718 <Explore+0x2ac>)
 800c592:	4a63      	ldr	r2, [pc, #396]	; (800c720 <Explore+0x2b4>)
 800c594:	601a      	str	r2, [r3, #0]
		//未
		Sla.Pre = 9;
 800c596:	4b63      	ldr	r3, [pc, #396]	; (800c724 <Explore+0x2b8>)
 800c598:	4a63      	ldr	r2, [pc, #396]	; (800c728 <Explore+0x2bc>)
 800c59a:	601a      	str	r2, [r3, #0]
		Sla.Fol = 13;
 800c59c:	4b61      	ldr	r3, [pc, #388]	; (800c724 <Explore+0x2b8>)
 800c59e:	4a63      	ldr	r2, [pc, #396]	; (800c72c <Explore+0x2c0>)
 800c5a0:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.014;
 800c5a2:	4b60      	ldr	r3, [pc, #384]	; (800c724 <Explore+0x2b8>)
 800c5a4:	4a62      	ldr	r2, [pc, #392]	; (800c730 <Explore+0x2c4>)
 800c5a6:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c5a8:	4b5e      	ldr	r3, [pc, #376]	; (800c724 <Explore+0x2b8>)
 800c5aa:	4a62      	ldr	r2, [pc, #392]	; (800c734 <Explore+0x2c8>)
 800c5ac:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c5ae:	4b5d      	ldr	r3, [pc, #372]	; (800c724 <Explore+0x2b8>)
 800c5b0:	4a61      	ldr	r2, [pc, #388]	; (800c738 <Explore+0x2cc>)
 800c5b2:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c5b4:	4b5b      	ldr	r3, [pc, #364]	; (800c724 <Explore+0x2b8>)
 800c5b6:	4a5a      	ldr	r2, [pc, #360]	; (800c720 <Explore+0x2b4>)
 800c5b8:	619a      	str	r2, [r3, #24]
//		Sla.Fol = 12;
//		Sla.Alalpha = 0.0007;
//		Sla.Theta1 = 30;
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;
		break;
 800c5ba:	e044      	b.n	800c646 <Explore+0x1da>
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;



		ExploreVelocity=180;
 800c5bc:	4b56      	ldr	r3, [pc, #344]	; (800c718 <Explore+0x2ac>)
 800c5be:	4a5f      	ldr	r2, [pc, #380]	; (800c73c <Explore+0x2d0>)
 800c5c0:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800c5c2:	4b58      	ldr	r3, [pc, #352]	; (800c724 <Explore+0x2b8>)
 800c5c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c5c8:	601a      	str	r2, [r3, #0]
		Sla.Fol = 3.5;
 800c5ca:	4b56      	ldr	r3, [pc, #344]	; (800c724 <Explore+0x2b8>)
 800c5cc:	4a5c      	ldr	r2, [pc, #368]	; (800c740 <Explore+0x2d4>)
 800c5ce:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.04;
 800c5d0:	4b54      	ldr	r3, [pc, #336]	; (800c724 <Explore+0x2b8>)
 800c5d2:	4a5c      	ldr	r2, [pc, #368]	; (800c744 <Explore+0x2d8>)
 800c5d4:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c5d6:	4b53      	ldr	r3, [pc, #332]	; (800c724 <Explore+0x2b8>)
 800c5d8:	4a56      	ldr	r2, [pc, #344]	; (800c734 <Explore+0x2c8>)
 800c5da:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c5dc:	4b51      	ldr	r3, [pc, #324]	; (800c724 <Explore+0x2b8>)
 800c5de:	4a56      	ldr	r2, [pc, #344]	; (800c738 <Explore+0x2cc>)
 800c5e0:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c5e2:	4b50      	ldr	r3, [pc, #320]	; (800c724 <Explore+0x2b8>)
 800c5e4:	4a4e      	ldr	r2, [pc, #312]	; (800c720 <Explore+0x2b4>)
 800c5e6:	619a      	str	r2, [r3, #24]
		break;
 800c5e8:	e02d      	b.n	800c646 <Explore+0x1da>
	case 3:
		ExploreVelocity=240;
 800c5ea:	4b4b      	ldr	r3, [pc, #300]	; (800c718 <Explore+0x2ac>)
 800c5ec:	4a56      	ldr	r2, [pc, #344]	; (800c748 <Explore+0x2dc>)
 800c5ee:	601a      	str	r2, [r3, #0]
		Sla.Pre = 3;
 800c5f0:	4b4c      	ldr	r3, [pc, #304]	; (800c724 <Explore+0x2b8>)
 800c5f2:	4a56      	ldr	r2, [pc, #344]	; (800c74c <Explore+0x2e0>)
 800c5f4:	601a      	str	r2, [r3, #0]
		Sla.Fol = 10;
 800c5f6:	4b4b      	ldr	r3, [pc, #300]	; (800c724 <Explore+0x2b8>)
 800c5f8:	4a55      	ldr	r2, [pc, #340]	; (800c750 <Explore+0x2e4>)
 800c5fa:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.08;
 800c5fc:	4b49      	ldr	r3, [pc, #292]	; (800c724 <Explore+0x2b8>)
 800c5fe:	4a55      	ldr	r2, [pc, #340]	; (800c754 <Explore+0x2e8>)
 800c600:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c602:	4b48      	ldr	r3, [pc, #288]	; (800c724 <Explore+0x2b8>)
 800c604:	4a4b      	ldr	r2, [pc, #300]	; (800c734 <Explore+0x2c8>)
 800c606:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c608:	4b46      	ldr	r3, [pc, #280]	; (800c724 <Explore+0x2b8>)
 800c60a:	4a4b      	ldr	r2, [pc, #300]	; (800c738 <Explore+0x2cc>)
 800c60c:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c60e:	4b45      	ldr	r3, [pc, #276]	; (800c724 <Explore+0x2b8>)
 800c610:	4a43      	ldr	r2, [pc, #268]	; (800c720 <Explore+0x2b4>)
 800c612:	619a      	str	r2, [r3, #24]
		break;
 800c614:	e017      	b.n	800c646 <Explore+0x1da>
	case 4:
		ExploreVelocity=300;
 800c616:	4b40      	ldr	r3, [pc, #256]	; (800c718 <Explore+0x2ac>)
 800c618:	4a40      	ldr	r2, [pc, #256]	; (800c71c <Explore+0x2b0>)
 800c61a:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800c61c:	4b41      	ldr	r3, [pc, #260]	; (800c724 <Explore+0x2b8>)
 800c61e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c622:	601a      	str	r2, [r3, #0]
		Sla.Fol = 4;
 800c624:	4b3f      	ldr	r3, [pc, #252]	; (800c724 <Explore+0x2b8>)
 800c626:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800c62a:	605a      	str	r2, [r3, #4]
		Sla.Alalpha = 0.12;
 800c62c:	4b3d      	ldr	r3, [pc, #244]	; (800c724 <Explore+0x2b8>)
 800c62e:	4a4a      	ldr	r2, [pc, #296]	; (800c758 <Explore+0x2ec>)
 800c630:	60da      	str	r2, [r3, #12]
		Sla.Theta1 = 30;
 800c632:	4b3c      	ldr	r3, [pc, #240]	; (800c724 <Explore+0x2b8>)
 800c634:	4a3f      	ldr	r2, [pc, #252]	; (800c734 <Explore+0x2c8>)
 800c636:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c638:	4b3a      	ldr	r3, [pc, #232]	; (800c724 <Explore+0x2b8>)
 800c63a:	4a3f      	ldr	r2, [pc, #252]	; (800c738 <Explore+0x2cc>)
 800c63c:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c63e:	4b39      	ldr	r3, [pc, #228]	; (800c724 <Explore+0x2b8>)
 800c640:	4a37      	ldr	r2, [pc, #220]	; (800c720 <Explore+0x2b4>)
 800c642:	619a      	str	r2, [r3, #24]
		//		//未

		break;
 800c644:	bf00      	nop

	}
	SearchOrFast = 0;
 800c646:	4b45      	ldr	r3, [pc, #276]	; (800c75c <Explore+0x2f0>)
 800c648:	2200      	movs	r2, #0
 800c64a:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800c64c:	4b44      	ldr	r3, [pc, #272]	; (800c760 <Explore+0x2f4>)
 800c64e:	2200      	movs	r2, #0
 800c650:	709a      	strb	r2, [r3, #2]
	Pos.Car = north;
 800c652:	4b43      	ldr	r3, [pc, #268]	; (800c760 <Explore+0x2f4>)
 800c654:	2200      	movs	r2, #0
 800c656:	70da      	strb	r2, [r3, #3]
	Pos.NextX = Pos.X;
 800c658:	4b41      	ldr	r3, [pc, #260]	; (800c760 <Explore+0x2f4>)
 800c65a:	781a      	ldrb	r2, [r3, #0]
 800c65c:	4b40      	ldr	r3, [pc, #256]	; (800c760 <Explore+0x2f4>)
 800c65e:	719a      	strb	r2, [r3, #6]
	Pos.NextY = Pos.Y + 1;
 800c660:	4b3f      	ldr	r3, [pc, #252]	; (800c760 <Explore+0x2f4>)
 800c662:	785b      	ldrb	r3, [r3, #1]
 800c664:	3301      	adds	r3, #1
 800c666:	b2da      	uxtb	r2, r3
 800c668:	4b3d      	ldr	r3, [pc, #244]	; (800c760 <Explore+0x2f4>)
 800c66a:	71da      	strb	r2, [r3, #7]
	Pos.NextCar = north;
 800c66c:	4b3c      	ldr	r3, [pc, #240]	; (800c760 <Explore+0x2f4>)
 800c66e:	2200      	movs	r2, #0
 800c670:	725a      	strb	r2, [r3, #9]
	dbc = 1;
 800c672:	4b3c      	ldr	r3, [pc, #240]	; (800c764 <Explore+0x2f8>)
 800c674:	2201      	movs	r2, #1
 800c676:	601a      	str	r2, [r3, #0]
	Accel(61.5, ExploreVelocity);
 800c678:	4b27      	ldr	r3, [pc, #156]	; (800c718 <Explore+0x2ac>)
 800c67a:	edd3 7a00 	vldr	s15, [r3]
 800c67e:	eef0 0a67 	vmov.f32	s1, s15
 800c682:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800c768 <Explore+0x2fc>
 800c686:	f7fd fcb7 	bl	8009ff8 <Accel>
 	Pos.X = Pos.NextX;
 800c68a:	4b35      	ldr	r3, [pc, #212]	; (800c760 <Explore+0x2f4>)
 800c68c:	799a      	ldrb	r2, [r3, #6]
 800c68e:	4b34      	ldr	r3, [pc, #208]	; (800c760 <Explore+0x2f4>)
 800c690:	701a      	strb	r2, [r3, #0]
    Pos.Y = Pos.NextY;
 800c692:	4b33      	ldr	r3, [pc, #204]	; (800c760 <Explore+0x2f4>)
 800c694:	79da      	ldrb	r2, [r3, #7]
 800c696:	4b32      	ldr	r3, [pc, #200]	; (800c760 <Explore+0x2f4>)
 800c698:	705a      	strb	r2, [r3, #1]
	Pos.Car = Pos.NextCar;
 800c69a:	4b31      	ldr	r3, [pc, #196]	; (800c760 <Explore+0x2f4>)
 800c69c:	7a5a      	ldrb	r2, [r3, #9]
 800c69e:	4b30      	ldr	r3, [pc, #192]	; (800c760 <Explore+0x2f4>)
 800c6a0:	70da      	strb	r2, [r3, #3]

	while(  !( (X_GOAL_LESSER <= Pos.X) && (Pos.X <= X_GOAL_LARGER) ) ||  !( ( Y_GOAL_LESSER <= Pos.Y) && (Pos.Y <= Y_GOAL_LARGER) )  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c6a2:	e008      	b.n	800c6b6 <Explore+0x24a>
	{
//		static int cc =0;
		ChangeLED(Pos.Car);
 800c6a4:	4b2e      	ldr	r3, [pc, #184]	; (800c760 <Explore+0x2f4>)
 800c6a6:	78db      	ldrb	r3, [r3, #3]
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f002 fd0f 	bl	800f0cc <ChangeLED>
		KyushinJudge( turn_mode );
 800c6ae:	79fb      	ldrb	r3, [r7, #7]
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f000 f85f 	bl	800c774 <KyushinJudge>
	while(  !( (X_GOAL_LESSER <= Pos.X) && (Pos.X <= X_GOAL_LARGER) ) ||  !( ( Y_GOAL_LESSER <= Pos.Y) && (Pos.Y <= Y_GOAL_LARGER) )  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c6b6:	4b2a      	ldr	r3, [pc, #168]	; (800c760 <Explore+0x2f4>)
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	2b04      	cmp	r3, #4
 800c6bc:	d9f2      	bls.n	800c6a4 <Explore+0x238>
 800c6be:	4b28      	ldr	r3, [pc, #160]	; (800c760 <Explore+0x2f4>)
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	2b06      	cmp	r3, #6
 800c6c4:	d8ee      	bhi.n	800c6a4 <Explore+0x238>
 800c6c6:	4b26      	ldr	r3, [pc, #152]	; (800c760 <Explore+0x2f4>)
 800c6c8:	785b      	ldrb	r3, [r3, #1]
 800c6ca:	2b02      	cmp	r3, #2
 800c6cc:	d9ea      	bls.n	800c6a4 <Explore+0x238>
 800c6ce:	4b24      	ldr	r3, [pc, #144]	; (800c760 <Explore+0x2f4>)
 800c6d0:	785b      	ldrb	r3, [r3, #1]
 800c6d2:	2b04      	cmp	r3, #4
 800c6d4:	d8e6      	bhi.n	800c6a4 <Explore+0x238>
	}
//	while(1)
//	{
//		TargetVelocity[BODY] = 0;
//	}
	Decel(45, 0);
 800c6d6:	eddf 0a25 	vldr	s1, [pc, #148]	; 800c76c <Explore+0x300>
 800c6da:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800c770 <Explore+0x304>
 800c6de:	f7fd fd53 	bl	800a188 <Decel>
//		printf("total L: %d, total R: %d\r\n",TotalPulse[LEFT],TotalPulse[RIGHT]);
//		HAL_Delay(1000);


	//flashのクリア。
	Flash_clear_sector1();
 800c6e2:	f002 faff 	bl	800ece4 <Flash_clear_sector1>
	//マップ書き込み
	flash_store_init();
 800c6e6:	f7fe fdfb 	bl	800b2e0 <flash_store_init>

	//完了の合図
	Signal(7);
 800c6ea:	2007      	movs	r0, #7
 800c6ec:	f003 fc08 	bl	800ff00 <Signal>

	//flashに保存
	while(1)
	{
		wall_ram_print();
 800c6f0:	f7ff f956 	bl	800b9a0 <wall_ram_print>
 800c6f4:	e7fc      	b.n	800c6f0 <Explore+0x284>
 800c6f6:	bf00      	nop
 800c6f8:	2000fedc 	.word	0x2000fedc
 800c6fc:	2000ff58 	.word	0x2000ff58
 800c700:	0801a3c0 	.word	0x0801a3c0
 800c704:	0801a3cc 	.word	0x0801a3cc
 800c708:	0801a3e4 	.word	0x0801a3e4
 800c70c:	0801a3ec 	.word	0x0801a3ec
 800c710:	0801a3f4 	.word	0x0801a3f4
 800c714:	2000ff18 	.word	0x2000ff18
 800c718:	20010168 	.word	0x20010168
 800c71c:	43960000 	.word	0x43960000
 800c720:	42b40000 	.word	0x42b40000
 800c724:	2000ff30 	.word	0x2000ff30
 800c728:	41100000 	.word	0x41100000
 800c72c:	41500000 	.word	0x41500000
 800c730:	3c656042 	.word	0x3c656042
 800c734:	41f00000 	.word	0x41f00000
 800c738:	42700000 	.word	0x42700000
 800c73c:	43340000 	.word	0x43340000
 800c740:	40600000 	.word	0x40600000
 800c744:	3d23d70a 	.word	0x3d23d70a
 800c748:	43700000 	.word	0x43700000
 800c74c:	40400000 	.word	0x40400000
 800c750:	41200000 	.word	0x41200000
 800c754:	3da3d70a 	.word	0x3da3d70a
 800c758:	3df5c28f 	.word	0x3df5c28f
 800c75c:	20010598 	.word	0x20010598
 800c760:	20000000 	.word	0x20000000
 800c764:	2000fc14 	.word	0x2000fc14
 800c768:	42760000 	.word	0x42760000
 800c76c:	00000000 	.word	0x00000000
 800c770:	42340000 	.word	0x42340000

0800c774 <KyushinJudge>:
int SearchOrFast;

void AdachiJudge(){
}
void KyushinJudge(char turn_mode)
{
 800c774:	b590      	push	{r4, r7, lr}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	4603      	mov	r3, r0
 800c77c:	71fb      	strb	r3, [r7, #7]
	//歩数マップから進行方向を導き出すのは、アクションが終わった後、座標と方角が更新されてから。
	switch(Pos.Car)
 800c77e:	4b8d      	ldr	r3, [pc, #564]	; (800c9b4 <KyushinJudge+0x240>)
 800c780:	78db      	ldrb	r3, [r3, #3]
 800c782:	2b03      	cmp	r3, #3
 800c784:	f200 8445 	bhi.w	800d012 <KyushinJudge+0x89e>
 800c788:	a201      	add	r2, pc, #4	; (adr r2, 800c790 <KyushinJudge+0x1c>)
 800c78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c78e:	bf00      	nop
 800c790:	0800c7a1 	.word	0x0800c7a1
 800c794:	0800c9c1 	.word	0x0800c9c1
 800c798:	0800cbe1 	.word	0x0800cbe1
 800c79c:	0800ce01 	.word	0x0800ce01
	{
		  case north:
			  if(Wall[Pos.X][Pos.Y].north == NOWALL && walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800c7a0:	4b84      	ldr	r3, [pc, #528]	; (800c9b4 <KyushinJudge+0x240>)
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	4b83      	ldr	r3, [pc, #524]	; (800c9b4 <KyushinJudge+0x240>)
 800c7a8:	785b      	ldrb	r3, [r3, #1]
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	4a82      	ldr	r2, [pc, #520]	; (800c9b8 <KyushinJudge+0x244>)
 800c7ae:	0103      	lsls	r3, r0, #4
 800c7b0:	440b      	add	r3, r1
 800c7b2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c7b6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d13c      	bne.n	800c83a <KyushinJudge+0xc6>
 800c7c0:	4b7c      	ldr	r3, [pc, #496]	; (800c9b4 <KyushinJudge+0x240>)
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	4b7b      	ldr	r3, [pc, #492]	; (800c9b4 <KyushinJudge+0x240>)
 800c7c8:	785b      	ldrb	r3, [r3, #1]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	497b      	ldr	r1, [pc, #492]	; (800c9bc <KyushinJudge+0x248>)
 800c7ce:	0112      	lsls	r2, r2, #4
 800c7d0:	4413      	add	r3, r2
 800c7d2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800c7d6:	4b77      	ldr	r3, [pc, #476]	; (800c9b4 <KyushinJudge+0x240>)
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	461c      	mov	r4, r3
 800c7dc:	4b75      	ldr	r3, [pc, #468]	; (800c9b4 <KyushinJudge+0x240>)
 800c7de:	785b      	ldrb	r3, [r3, #1]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	4976      	ldr	r1, [pc, #472]	; (800c9bc <KyushinJudge+0x248>)
 800c7e4:	0123      	lsls	r3, r4, #4
 800c7e6:	4403      	add	r3, r0
 800c7e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d224      	bcs.n	800c83a <KyushinJudge+0xc6>
 800c7f0:	4b70      	ldr	r3, [pc, #448]	; (800c9b4 <KyushinJudge+0x240>)
 800c7f2:	785b      	ldrb	r3, [r3, #1]
 800c7f4:	2b0e      	cmp	r3, #14
 800c7f6:	d820      	bhi.n	800c83a <KyushinJudge+0xc6>
				  //前北
				  Pos.Dir = front;
 800c7f8:	4b6e      	ldr	r3, [pc, #440]	; (800c9b4 <KyushinJudge+0x240>)
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800c7fe:	4b6d      	ldr	r3, [pc, #436]	; (800c9b4 <KyushinJudge+0x240>)
 800c800:	781a      	ldrb	r2, [r3, #0]
 800c802:	4b6c      	ldr	r3, [pc, #432]	; (800c9b4 <KyushinJudge+0x240>)
 800c804:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y+1;
 800c806:	4b6b      	ldr	r3, [pc, #428]	; (800c9b4 <KyushinJudge+0x240>)
 800c808:	785b      	ldrb	r3, [r3, #1]
 800c80a:	3301      	adds	r3, #1
 800c80c:	b2da      	uxtb	r2, r3
 800c80e:	4b69      	ldr	r3, [pc, #420]	; (800c9b4 <KyushinJudge+0x240>)
 800c810:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = north;
 800c812:	4b68      	ldr	r3, [pc, #416]	; (800c9b4 <KyushinJudge+0x240>)
 800c814:	2200      	movs	r2, #0
 800c816:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c818:	79fb      	ldrb	r3, [r7, #7]
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fe f8d0 	bl	800a9c0 <SelectAction>
				  Pos.Car = Pos.NextCar;
 800c820:	4b64      	ldr	r3, [pc, #400]	; (800c9b4 <KyushinJudge+0x240>)
 800c822:	7a5a      	ldrb	r2, [r3, #9]
 800c824:	4b63      	ldr	r3, [pc, #396]	; (800c9b4 <KyushinJudge+0x240>)
 800c826:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c828:	4b62      	ldr	r3, [pc, #392]	; (800c9b4 <KyushinJudge+0x240>)
 800c82a:	799a      	ldrb	r2, [r3, #6]
 800c82c:	4b61      	ldr	r3, [pc, #388]	; (800c9b4 <KyushinJudge+0x240>)
 800c82e:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c830:	4b60      	ldr	r3, [pc, #384]	; (800c9b4 <KyushinJudge+0x240>)
 800c832:	79da      	ldrb	r2, [r3, #7]
 800c834:	4b5f      	ldr	r3, [pc, #380]	; (800c9b4 <KyushinJudge+0x240>)
 800c836:	705a      	strb	r2, [r3, #1]
 800c838:	e0ba      	b.n	800c9b0 <KyushinJudge+0x23c>
			  }
			  else if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800c83a:	4b5e      	ldr	r3, [pc, #376]	; (800c9b4 <KyushinJudge+0x240>)
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	4618      	mov	r0, r3
 800c840:	4b5c      	ldr	r3, [pc, #368]	; (800c9b4 <KyushinJudge+0x240>)
 800c842:	785b      	ldrb	r3, [r3, #1]
 800c844:	4619      	mov	r1, r3
 800c846:	4a5c      	ldr	r2, [pc, #368]	; (800c9b8 <KyushinJudge+0x244>)
 800c848:	0103      	lsls	r3, r0, #4
 800c84a:	440b      	add	r3, r1
 800c84c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c850:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c854:	b2db      	uxtb	r3, r3
 800c856:	2b00      	cmp	r3, #0
 800c858:	d13c      	bne.n	800c8d4 <KyushinJudge+0x160>
 800c85a:	4b56      	ldr	r3, [pc, #344]	; (800c9b4 <KyushinJudge+0x240>)
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	3b01      	subs	r3, #1
 800c860:	4a54      	ldr	r2, [pc, #336]	; (800c9b4 <KyushinJudge+0x240>)
 800c862:	7852      	ldrb	r2, [r2, #1]
 800c864:	4611      	mov	r1, r2
 800c866:	4a55      	ldr	r2, [pc, #340]	; (800c9bc <KyushinJudge+0x248>)
 800c868:	011b      	lsls	r3, r3, #4
 800c86a:	440b      	add	r3, r1
 800c86c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c870:	4b50      	ldr	r3, [pc, #320]	; (800c9b4 <KyushinJudge+0x240>)
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	461c      	mov	r4, r3
 800c876:	4b4f      	ldr	r3, [pc, #316]	; (800c9b4 <KyushinJudge+0x240>)
 800c878:	785b      	ldrb	r3, [r3, #1]
 800c87a:	4618      	mov	r0, r3
 800c87c:	494f      	ldr	r1, [pc, #316]	; (800c9bc <KyushinJudge+0x248>)
 800c87e:	0123      	lsls	r3, r4, #4
 800c880:	4403      	add	r3, r0
 800c882:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c886:	429a      	cmp	r2, r3
 800c888:	d224      	bcs.n	800c8d4 <KyushinJudge+0x160>
 800c88a:	4b4a      	ldr	r3, [pc, #296]	; (800c9b4 <KyushinJudge+0x240>)
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d020      	beq.n	800c8d4 <KyushinJudge+0x160>
				  //左西
    			  Pos.Dir = left;
 800c892:	4b48      	ldr	r3, [pc, #288]	; (800c9b4 <KyushinJudge+0x240>)
 800c894:	2203      	movs	r2, #3
 800c896:	709a      	strb	r2, [r3, #2]
    			  Pos.NextX = Pos.X - 1;
 800c898:	4b46      	ldr	r3, [pc, #280]	; (800c9b4 <KyushinJudge+0x240>)
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	3b01      	subs	r3, #1
 800c89e:	b2da      	uxtb	r2, r3
 800c8a0:	4b44      	ldr	r3, [pc, #272]	; (800c9b4 <KyushinJudge+0x240>)
 800c8a2:	719a      	strb	r2, [r3, #6]
    			  Pos.NextY = Pos.Y;
 800c8a4:	4b43      	ldr	r3, [pc, #268]	; (800c9b4 <KyushinJudge+0x240>)
 800c8a6:	785a      	ldrb	r2, [r3, #1]
 800c8a8:	4b42      	ldr	r3, [pc, #264]	; (800c9b4 <KyushinJudge+0x240>)
 800c8aa:	71da      	strb	r2, [r3, #7]
    			  Pos.NextCar = west;
 800c8ac:	4b41      	ldr	r3, [pc, #260]	; (800c9b4 <KyushinJudge+0x240>)
 800c8ae:	2203      	movs	r2, #3
 800c8b0:	725a      	strb	r2, [r3, #9]
    			  SelectAction(turn_mode);
 800c8b2:	79fb      	ldrb	r3, [r7, #7]
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7fe f883 	bl	800a9c0 <SelectAction>
    			  Pos.Car = Pos.NextCar;
 800c8ba:	4b3e      	ldr	r3, [pc, #248]	; (800c9b4 <KyushinJudge+0x240>)
 800c8bc:	7a5a      	ldrb	r2, [r3, #9]
 800c8be:	4b3d      	ldr	r3, [pc, #244]	; (800c9b4 <KyushinJudge+0x240>)
 800c8c0:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c8c2:	4b3c      	ldr	r3, [pc, #240]	; (800c9b4 <KyushinJudge+0x240>)
 800c8c4:	799a      	ldrb	r2, [r3, #6]
 800c8c6:	4b3b      	ldr	r3, [pc, #236]	; (800c9b4 <KyushinJudge+0x240>)
 800c8c8:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c8ca:	4b3a      	ldr	r3, [pc, #232]	; (800c9b4 <KyushinJudge+0x240>)
 800c8cc:	79da      	ldrb	r2, [r3, #7]
 800c8ce:	4b39      	ldr	r3, [pc, #228]	; (800c9b4 <KyushinJudge+0x240>)
 800c8d0:	705a      	strb	r2, [r3, #1]
 800c8d2:	e06d      	b.n	800c9b0 <KyushinJudge+0x23c>
			  }
			  else if(Wall[Pos.X][Pos.Y].east == NOWALL &&walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X <  NUMBER_OF_SQUARES-1){
 800c8d4:	4b37      	ldr	r3, [pc, #220]	; (800c9b4 <KyushinJudge+0x240>)
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	4b36      	ldr	r3, [pc, #216]	; (800c9b4 <KyushinJudge+0x240>)
 800c8dc:	785b      	ldrb	r3, [r3, #1]
 800c8de:	4619      	mov	r1, r3
 800c8e0:	4a35      	ldr	r2, [pc, #212]	; (800c9b8 <KyushinJudge+0x244>)
 800c8e2:	0103      	lsls	r3, r0, #4
 800c8e4:	440b      	add	r3, r1
 800c8e6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c8ea:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d13c      	bne.n	800c96e <KyushinJudge+0x1fa>
 800c8f4:	4b2f      	ldr	r3, [pc, #188]	; (800c9b4 <KyushinJudge+0x240>)
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	4a2e      	ldr	r2, [pc, #184]	; (800c9b4 <KyushinJudge+0x240>)
 800c8fc:	7852      	ldrb	r2, [r2, #1]
 800c8fe:	4611      	mov	r1, r2
 800c900:	4a2e      	ldr	r2, [pc, #184]	; (800c9bc <KyushinJudge+0x248>)
 800c902:	011b      	lsls	r3, r3, #4
 800c904:	440b      	add	r3, r1
 800c906:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c90a:	4b2a      	ldr	r3, [pc, #168]	; (800c9b4 <KyushinJudge+0x240>)
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	461c      	mov	r4, r3
 800c910:	4b28      	ldr	r3, [pc, #160]	; (800c9b4 <KyushinJudge+0x240>)
 800c912:	785b      	ldrb	r3, [r3, #1]
 800c914:	4618      	mov	r0, r3
 800c916:	4929      	ldr	r1, [pc, #164]	; (800c9bc <KyushinJudge+0x248>)
 800c918:	0123      	lsls	r3, r4, #4
 800c91a:	4403      	add	r3, r0
 800c91c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c920:	429a      	cmp	r2, r3
 800c922:	d224      	bcs.n	800c96e <KyushinJudge+0x1fa>
 800c924:	4b23      	ldr	r3, [pc, #140]	; (800c9b4 <KyushinJudge+0x240>)
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	2b0e      	cmp	r3, #14
 800c92a:	d820      	bhi.n	800c96e <KyushinJudge+0x1fa>
				  //右東
				  Pos.Dir = right;//この方角で右と決まった時点で次の座標が決まっている
 800c92c:	4b21      	ldr	r3, [pc, #132]	; (800c9b4 <KyushinJudge+0x240>)
 800c92e:	2201      	movs	r2, #1
 800c930:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X + 1;
 800c932:	4b20      	ldr	r3, [pc, #128]	; (800c9b4 <KyushinJudge+0x240>)
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	3301      	adds	r3, #1
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	4b1e      	ldr	r3, [pc, #120]	; (800c9b4 <KyushinJudge+0x240>)
 800c93c:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800c93e:	4b1d      	ldr	r3, [pc, #116]	; (800c9b4 <KyushinJudge+0x240>)
 800c940:	785a      	ldrb	r2, [r3, #1]
 800c942:	4b1c      	ldr	r3, [pc, #112]	; (800c9b4 <KyushinJudge+0x240>)
 800c944:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = east;
 800c946:	4b1b      	ldr	r3, [pc, #108]	; (800c9b4 <KyushinJudge+0x240>)
 800c948:	2201      	movs	r2, #1
 800c94a:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800c94c:	79fb      	ldrb	r3, [r7, #7]
 800c94e:	4618      	mov	r0, r3
 800c950:	f7fe f836 	bl	800a9c0 <SelectAction>
		          Pos.Car = Pos.NextCar;
 800c954:	4b17      	ldr	r3, [pc, #92]	; (800c9b4 <KyushinJudge+0x240>)
 800c956:	7a5a      	ldrb	r2, [r3, #9]
 800c958:	4b16      	ldr	r3, [pc, #88]	; (800c9b4 <KyushinJudge+0x240>)
 800c95a:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c95c:	4b15      	ldr	r3, [pc, #84]	; (800c9b4 <KyushinJudge+0x240>)
 800c95e:	799a      	ldrb	r2, [r3, #6]
 800c960:	4b14      	ldr	r3, [pc, #80]	; (800c9b4 <KyushinJudge+0x240>)
 800c962:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c964:	4b13      	ldr	r3, [pc, #76]	; (800c9b4 <KyushinJudge+0x240>)
 800c966:	79da      	ldrb	r2, [r3, #7]
 800c968:	4b12      	ldr	r3, [pc, #72]	; (800c9b4 <KyushinJudge+0x240>)
 800c96a:	705a      	strb	r2, [r3, #1]
 800c96c:	e020      	b.n	800c9b0 <KyushinJudge+0x23c>
			  }
			  else {
				  Pos.Dir = back;
 800c96e:	4b11      	ldr	r3, [pc, #68]	; (800c9b4 <KyushinJudge+0x240>)
 800c970:	2202      	movs	r2, #2
 800c972:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800c974:	4b0f      	ldr	r3, [pc, #60]	; (800c9b4 <KyushinJudge+0x240>)
 800c976:	781a      	ldrb	r2, [r3, #0]
 800c978:	4b0e      	ldr	r3, [pc, #56]	; (800c9b4 <KyushinJudge+0x240>)
 800c97a:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y - 1;
 800c97c:	4b0d      	ldr	r3, [pc, #52]	; (800c9b4 <KyushinJudge+0x240>)
 800c97e:	785b      	ldrb	r3, [r3, #1]
 800c980:	3b01      	subs	r3, #1
 800c982:	b2da      	uxtb	r2, r3
 800c984:	4b0b      	ldr	r3, [pc, #44]	; (800c9b4 <KyushinJudge+0x240>)
 800c986:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = south;
 800c988:	4b0a      	ldr	r3, [pc, #40]	; (800c9b4 <KyushinJudge+0x240>)
 800c98a:	2202      	movs	r2, #2
 800c98c:	725a      	strb	r2, [r3, #9]
				  //後南
				  SelectAction(turn_mode);
 800c98e:	79fb      	ldrb	r3, [r7, #7]
 800c990:	4618      	mov	r0, r3
 800c992:	f7fe f815 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800c996:	4b07      	ldr	r3, [pc, #28]	; (800c9b4 <KyushinJudge+0x240>)
 800c998:	7a5a      	ldrb	r2, [r3, #9]
 800c99a:	4b06      	ldr	r3, [pc, #24]	; (800c9b4 <KyushinJudge+0x240>)
 800c99c:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800c99e:	4b05      	ldr	r3, [pc, #20]	; (800c9b4 <KyushinJudge+0x240>)
 800c9a0:	799a      	ldrb	r2, [r3, #6]
 800c9a2:	4b04      	ldr	r3, [pc, #16]	; (800c9b4 <KyushinJudge+0x240>)
 800c9a4:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800c9a6:	4b03      	ldr	r3, [pc, #12]	; (800c9b4 <KyushinJudge+0x240>)
 800c9a8:	79da      	ldrb	r2, [r3, #7]
 800c9aa:	4b02      	ldr	r3, [pc, #8]	; (800c9b4 <KyushinJudge+0x240>)
 800c9ac:	705a      	strb	r2, [r3, #1]
			  }
			  break;
 800c9ae:	e331      	b.n	800d014 <KyushinJudge+0x8a0>
 800c9b0:	e330      	b.n	800d014 <KyushinJudge+0x8a0>
 800c9b2:	bf00      	nop
 800c9b4:	20000000 	.word	0x20000000
 800c9b8:	20010398 	.word	0x20010398
 800c9bc:	2000ff68 	.word	0x2000ff68

		  case east:

			  if(Wall[Pos.X][Pos.Y].east == NOWALL && walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X < NUMBER_OF_SQUARES-1){
 800c9c0:	4b84      	ldr	r3, [pc, #528]	; (800cbd4 <KyushinJudge+0x460>)
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	4b83      	ldr	r3, [pc, #524]	; (800cbd4 <KyushinJudge+0x460>)
 800c9c8:	785b      	ldrb	r3, [r3, #1]
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	4a82      	ldr	r2, [pc, #520]	; (800cbd8 <KyushinJudge+0x464>)
 800c9ce:	0103      	lsls	r3, r0, #4
 800c9d0:	440b      	add	r3, r1
 800c9d2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c9d6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d13c      	bne.n	800ca5a <KyushinJudge+0x2e6>
 800c9e0:	4b7c      	ldr	r3, [pc, #496]	; (800cbd4 <KyushinJudge+0x460>)
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	4a7b      	ldr	r2, [pc, #492]	; (800cbd4 <KyushinJudge+0x460>)
 800c9e8:	7852      	ldrb	r2, [r2, #1]
 800c9ea:	4611      	mov	r1, r2
 800c9ec:	4a7b      	ldr	r2, [pc, #492]	; (800cbdc <KyushinJudge+0x468>)
 800c9ee:	011b      	lsls	r3, r3, #4
 800c9f0:	440b      	add	r3, r1
 800c9f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c9f6:	4b77      	ldr	r3, [pc, #476]	; (800cbd4 <KyushinJudge+0x460>)
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	461c      	mov	r4, r3
 800c9fc:	4b75      	ldr	r3, [pc, #468]	; (800cbd4 <KyushinJudge+0x460>)
 800c9fe:	785b      	ldrb	r3, [r3, #1]
 800ca00:	4618      	mov	r0, r3
 800ca02:	4976      	ldr	r1, [pc, #472]	; (800cbdc <KyushinJudge+0x468>)
 800ca04:	0123      	lsls	r3, r4, #4
 800ca06:	4403      	add	r3, r0
 800ca08:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d224      	bcs.n	800ca5a <KyushinJudge+0x2e6>
 800ca10:	4b70      	ldr	r3, [pc, #448]	; (800cbd4 <KyushinJudge+0x460>)
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	2b0e      	cmp	r3, #14
 800ca16:	d820      	bhi.n	800ca5a <KyushinJudge+0x2e6>
				  //前東
				  Pos.Dir = front;
 800ca18:	4b6e      	ldr	r3, [pc, #440]	; (800cbd4 <KyushinJudge+0x460>)
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X + 1;
 800ca1e:	4b6d      	ldr	r3, [pc, #436]	; (800cbd4 <KyushinJudge+0x460>)
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	3301      	adds	r3, #1
 800ca24:	b2da      	uxtb	r2, r3
 800ca26:	4b6b      	ldr	r3, [pc, #428]	; (800cbd4 <KyushinJudge+0x460>)
 800ca28:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800ca2a:	4b6a      	ldr	r3, [pc, #424]	; (800cbd4 <KyushinJudge+0x460>)
 800ca2c:	785a      	ldrb	r2, [r3, #1]
 800ca2e:	4b69      	ldr	r3, [pc, #420]	; (800cbd4 <KyushinJudge+0x460>)
 800ca30:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = east;
 800ca32:	4b68      	ldr	r3, [pc, #416]	; (800cbd4 <KyushinJudge+0x460>)
 800ca34:	2201      	movs	r2, #1
 800ca36:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800ca38:	79fb      	ldrb	r3, [r7, #7]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7fd ffc0 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800ca40:	4b64      	ldr	r3, [pc, #400]	; (800cbd4 <KyushinJudge+0x460>)
 800ca42:	7a5a      	ldrb	r2, [r3, #9]
 800ca44:	4b63      	ldr	r3, [pc, #396]	; (800cbd4 <KyushinJudge+0x460>)
 800ca46:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800ca48:	4b62      	ldr	r3, [pc, #392]	; (800cbd4 <KyushinJudge+0x460>)
 800ca4a:	799a      	ldrb	r2, [r3, #6]
 800ca4c:	4b61      	ldr	r3, [pc, #388]	; (800cbd4 <KyushinJudge+0x460>)
 800ca4e:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800ca50:	4b60      	ldr	r3, [pc, #384]	; (800cbd4 <KyushinJudge+0x460>)
 800ca52:	79da      	ldrb	r2, [r3, #7]
 800ca54:	4b5f      	ldr	r3, [pc, #380]	; (800cbd4 <KyushinJudge+0x460>)
 800ca56:	705a      	strb	r2, [r3, #1]
 800ca58:	e0ba      	b.n	800cbd0 <KyushinJudge+0x45c>
			  }
			  else if(Wall[Pos.X][Pos.Y].north == NOWALL && walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800ca5a:	4b5e      	ldr	r3, [pc, #376]	; (800cbd4 <KyushinJudge+0x460>)
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	4618      	mov	r0, r3
 800ca60:	4b5c      	ldr	r3, [pc, #368]	; (800cbd4 <KyushinJudge+0x460>)
 800ca62:	785b      	ldrb	r3, [r3, #1]
 800ca64:	4619      	mov	r1, r3
 800ca66:	4a5c      	ldr	r2, [pc, #368]	; (800cbd8 <KyushinJudge+0x464>)
 800ca68:	0103      	lsls	r3, r0, #4
 800ca6a:	440b      	add	r3, r1
 800ca6c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ca70:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d13c      	bne.n	800caf4 <KyushinJudge+0x380>
 800ca7a:	4b56      	ldr	r3, [pc, #344]	; (800cbd4 <KyushinJudge+0x460>)
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	461a      	mov	r2, r3
 800ca80:	4b54      	ldr	r3, [pc, #336]	; (800cbd4 <KyushinJudge+0x460>)
 800ca82:	785b      	ldrb	r3, [r3, #1]
 800ca84:	3301      	adds	r3, #1
 800ca86:	4955      	ldr	r1, [pc, #340]	; (800cbdc <KyushinJudge+0x468>)
 800ca88:	0112      	lsls	r2, r2, #4
 800ca8a:	4413      	add	r3, r2
 800ca8c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ca90:	4b50      	ldr	r3, [pc, #320]	; (800cbd4 <KyushinJudge+0x460>)
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	461c      	mov	r4, r3
 800ca96:	4b4f      	ldr	r3, [pc, #316]	; (800cbd4 <KyushinJudge+0x460>)
 800ca98:	785b      	ldrb	r3, [r3, #1]
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	494f      	ldr	r1, [pc, #316]	; (800cbdc <KyushinJudge+0x468>)
 800ca9e:	0123      	lsls	r3, r4, #4
 800caa0:	4403      	add	r3, r0
 800caa2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d224      	bcs.n	800caf4 <KyushinJudge+0x380>
 800caaa:	4b4a      	ldr	r3, [pc, #296]	; (800cbd4 <KyushinJudge+0x460>)
 800caac:	785b      	ldrb	r3, [r3, #1]
 800caae:	2b0e      	cmp	r3, #14
 800cab0:	d820      	bhi.n	800caf4 <KyushinJudge+0x380>
				  //左?��?

    			  Pos.Dir = left;
 800cab2:	4b48      	ldr	r3, [pc, #288]	; (800cbd4 <KyushinJudge+0x460>)
 800cab4:	2203      	movs	r2, #3
 800cab6:	709a      	strb	r2, [r3, #2]
    			  Pos.NextX = Pos.X;
 800cab8:	4b46      	ldr	r3, [pc, #280]	; (800cbd4 <KyushinJudge+0x460>)
 800caba:	781a      	ldrb	r2, [r3, #0]
 800cabc:	4b45      	ldr	r3, [pc, #276]	; (800cbd4 <KyushinJudge+0x460>)
 800cabe:	719a      	strb	r2, [r3, #6]
    			  Pos.NextY = Pos.Y+1;
 800cac0:	4b44      	ldr	r3, [pc, #272]	; (800cbd4 <KyushinJudge+0x460>)
 800cac2:	785b      	ldrb	r3, [r3, #1]
 800cac4:	3301      	adds	r3, #1
 800cac6:	b2da      	uxtb	r2, r3
 800cac8:	4b42      	ldr	r3, [pc, #264]	; (800cbd4 <KyushinJudge+0x460>)
 800caca:	71da      	strb	r2, [r3, #7]
    			  Pos.NextCar = north;
 800cacc:	4b41      	ldr	r3, [pc, #260]	; (800cbd4 <KyushinJudge+0x460>)
 800cace:	2200      	movs	r2, #0
 800cad0:	725a      	strb	r2, [r3, #9]
    			  SelectAction(turn_mode);
 800cad2:	79fb      	ldrb	r3, [r7, #7]
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7fd ff73 	bl	800a9c0 <SelectAction>
    			  Pos.Car = Pos.NextCar;
 800cada:	4b3e      	ldr	r3, [pc, #248]	; (800cbd4 <KyushinJudge+0x460>)
 800cadc:	7a5a      	ldrb	r2, [r3, #9]
 800cade:	4b3d      	ldr	r3, [pc, #244]	; (800cbd4 <KyushinJudge+0x460>)
 800cae0:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cae2:	4b3c      	ldr	r3, [pc, #240]	; (800cbd4 <KyushinJudge+0x460>)
 800cae4:	799a      	ldrb	r2, [r3, #6]
 800cae6:	4b3b      	ldr	r3, [pc, #236]	; (800cbd4 <KyushinJudge+0x460>)
 800cae8:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800caea:	4b3a      	ldr	r3, [pc, #232]	; (800cbd4 <KyushinJudge+0x460>)
 800caec:	79da      	ldrb	r2, [r3, #7]
 800caee:	4b39      	ldr	r3, [pc, #228]	; (800cbd4 <KyushinJudge+0x460>)
 800caf0:	705a      	strb	r2, [r3, #1]
 800caf2:	e06d      	b.n	800cbd0 <KyushinJudge+0x45c>
			  }
			  else if(Wall[Pos.X][Pos.Y].south == NOWALL && walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800caf4:	4b37      	ldr	r3, [pc, #220]	; (800cbd4 <KyushinJudge+0x460>)
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	4618      	mov	r0, r3
 800cafa:	4b36      	ldr	r3, [pc, #216]	; (800cbd4 <KyushinJudge+0x460>)
 800cafc:	785b      	ldrb	r3, [r3, #1]
 800cafe:	4619      	mov	r1, r3
 800cb00:	4a35      	ldr	r2, [pc, #212]	; (800cbd8 <KyushinJudge+0x464>)
 800cb02:	0103      	lsls	r3, r0, #4
 800cb04:	440b      	add	r3, r1
 800cb06:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cb0a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d13c      	bne.n	800cb8e <KyushinJudge+0x41a>
 800cb14:	4b2f      	ldr	r3, [pc, #188]	; (800cbd4 <KyushinJudge+0x460>)
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	4b2e      	ldr	r3, [pc, #184]	; (800cbd4 <KyushinJudge+0x460>)
 800cb1c:	785b      	ldrb	r3, [r3, #1]
 800cb1e:	3b01      	subs	r3, #1
 800cb20:	492e      	ldr	r1, [pc, #184]	; (800cbdc <KyushinJudge+0x468>)
 800cb22:	0112      	lsls	r2, r2, #4
 800cb24:	4413      	add	r3, r2
 800cb26:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800cb2a:	4b2a      	ldr	r3, [pc, #168]	; (800cbd4 <KyushinJudge+0x460>)
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	461c      	mov	r4, r3
 800cb30:	4b28      	ldr	r3, [pc, #160]	; (800cbd4 <KyushinJudge+0x460>)
 800cb32:	785b      	ldrb	r3, [r3, #1]
 800cb34:	4618      	mov	r0, r3
 800cb36:	4929      	ldr	r1, [pc, #164]	; (800cbdc <KyushinJudge+0x468>)
 800cb38:	0123      	lsls	r3, r4, #4
 800cb3a:	4403      	add	r3, r0
 800cb3c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d224      	bcs.n	800cb8e <KyushinJudge+0x41a>
 800cb44:	4b23      	ldr	r3, [pc, #140]	; (800cbd4 <KyushinJudge+0x460>)
 800cb46:	785b      	ldrb	r3, [r3, #1]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d020      	beq.n	800cb8e <KyushinJudge+0x41a>
				  //右?��?
				  Pos.Dir = right;
 800cb4c:	4b21      	ldr	r3, [pc, #132]	; (800cbd4 <KyushinJudge+0x460>)
 800cb4e:	2201      	movs	r2, #1
 800cb50:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800cb52:	4b20      	ldr	r3, [pc, #128]	; (800cbd4 <KyushinJudge+0x460>)
 800cb54:	781a      	ldrb	r2, [r3, #0]
 800cb56:	4b1f      	ldr	r3, [pc, #124]	; (800cbd4 <KyushinJudge+0x460>)
 800cb58:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y - 1;
 800cb5a:	4b1e      	ldr	r3, [pc, #120]	; (800cbd4 <KyushinJudge+0x460>)
 800cb5c:	785b      	ldrb	r3, [r3, #1]
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	4b1c      	ldr	r3, [pc, #112]	; (800cbd4 <KyushinJudge+0x460>)
 800cb64:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = south;
 800cb66:	4b1b      	ldr	r3, [pc, #108]	; (800cbd4 <KyushinJudge+0x460>)
 800cb68:	2202      	movs	r2, #2
 800cb6a:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800cb6c:	79fb      	ldrb	r3, [r7, #7]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fd ff26 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800cb74:	4b17      	ldr	r3, [pc, #92]	; (800cbd4 <KyushinJudge+0x460>)
 800cb76:	7a5a      	ldrb	r2, [r3, #9]
 800cb78:	4b16      	ldr	r3, [pc, #88]	; (800cbd4 <KyushinJudge+0x460>)
 800cb7a:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cb7c:	4b15      	ldr	r3, [pc, #84]	; (800cbd4 <KyushinJudge+0x460>)
 800cb7e:	799a      	ldrb	r2, [r3, #6]
 800cb80:	4b14      	ldr	r3, [pc, #80]	; (800cbd4 <KyushinJudge+0x460>)
 800cb82:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cb84:	4b13      	ldr	r3, [pc, #76]	; (800cbd4 <KyushinJudge+0x460>)
 800cb86:	79da      	ldrb	r2, [r3, #7]
 800cb88:	4b12      	ldr	r3, [pc, #72]	; (800cbd4 <KyushinJudge+0x460>)
 800cb8a:	705a      	strb	r2, [r3, #1]
 800cb8c:	e020      	b.n	800cbd0 <KyushinJudge+0x45c>
			  }
			  else {
				  //後西
				  Pos.Dir = back;
 800cb8e:	4b11      	ldr	r3, [pc, #68]	; (800cbd4 <KyushinJudge+0x460>)
 800cb90:	2202      	movs	r2, #2
 800cb92:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X - 1;
 800cb94:	4b0f      	ldr	r3, [pc, #60]	; (800cbd4 <KyushinJudge+0x460>)
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	3b01      	subs	r3, #1
 800cb9a:	b2da      	uxtb	r2, r3
 800cb9c:	4b0d      	ldr	r3, [pc, #52]	; (800cbd4 <KyushinJudge+0x460>)
 800cb9e:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800cba0:	4b0c      	ldr	r3, [pc, #48]	; (800cbd4 <KyushinJudge+0x460>)
 800cba2:	785a      	ldrb	r2, [r3, #1]
 800cba4:	4b0b      	ldr	r3, [pc, #44]	; (800cbd4 <KyushinJudge+0x460>)
 800cba6:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = west;
 800cba8:	4b0a      	ldr	r3, [pc, #40]	; (800cbd4 <KyushinJudge+0x460>)
 800cbaa:	2203      	movs	r2, #3
 800cbac:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800cbae:	79fb      	ldrb	r3, [r7, #7]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7fd ff05 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800cbb6:	4b07      	ldr	r3, [pc, #28]	; (800cbd4 <KyushinJudge+0x460>)
 800cbb8:	7a5a      	ldrb	r2, [r3, #9]
 800cbba:	4b06      	ldr	r3, [pc, #24]	; (800cbd4 <KyushinJudge+0x460>)
 800cbbc:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cbbe:	4b05      	ldr	r3, [pc, #20]	; (800cbd4 <KyushinJudge+0x460>)
 800cbc0:	799a      	ldrb	r2, [r3, #6]
 800cbc2:	4b04      	ldr	r3, [pc, #16]	; (800cbd4 <KyushinJudge+0x460>)
 800cbc4:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cbc6:	4b03      	ldr	r3, [pc, #12]	; (800cbd4 <KyushinJudge+0x460>)
 800cbc8:	79da      	ldrb	r2, [r3, #7]
 800cbca:	4b02      	ldr	r3, [pc, #8]	; (800cbd4 <KyushinJudge+0x460>)
 800cbcc:	705a      	strb	r2, [r3, #1]
			  }
			  break;
 800cbce:	e221      	b.n	800d014 <KyushinJudge+0x8a0>
 800cbd0:	e220      	b.n	800d014 <KyushinJudge+0x8a0>
 800cbd2:	bf00      	nop
 800cbd4:	20000000 	.word	0x20000000
 800cbd8:	20010398 	.word	0x20010398
 800cbdc:	2000ff68 	.word	0x2000ff68

		  case south:

			  if(Wall[Pos.X][Pos.Y].south == NOWALL &&walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800cbe0:	4b84      	ldr	r3, [pc, #528]	; (800cdf4 <KyushinJudge+0x680>)
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	4b83      	ldr	r3, [pc, #524]	; (800cdf4 <KyushinJudge+0x680>)
 800cbe8:	785b      	ldrb	r3, [r3, #1]
 800cbea:	4619      	mov	r1, r3
 800cbec:	4a82      	ldr	r2, [pc, #520]	; (800cdf8 <KyushinJudge+0x684>)
 800cbee:	0103      	lsls	r3, r0, #4
 800cbf0:	440b      	add	r3, r1
 800cbf2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cbf6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d13c      	bne.n	800cc7a <KyushinJudge+0x506>
 800cc00:	4b7c      	ldr	r3, [pc, #496]	; (800cdf4 <KyushinJudge+0x680>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	461a      	mov	r2, r3
 800cc06:	4b7b      	ldr	r3, [pc, #492]	; (800cdf4 <KyushinJudge+0x680>)
 800cc08:	785b      	ldrb	r3, [r3, #1]
 800cc0a:	3b01      	subs	r3, #1
 800cc0c:	497b      	ldr	r1, [pc, #492]	; (800cdfc <KyushinJudge+0x688>)
 800cc0e:	0112      	lsls	r2, r2, #4
 800cc10:	4413      	add	r3, r2
 800cc12:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800cc16:	4b77      	ldr	r3, [pc, #476]	; (800cdf4 <KyushinJudge+0x680>)
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	461c      	mov	r4, r3
 800cc1c:	4b75      	ldr	r3, [pc, #468]	; (800cdf4 <KyushinJudge+0x680>)
 800cc1e:	785b      	ldrb	r3, [r3, #1]
 800cc20:	4618      	mov	r0, r3
 800cc22:	4976      	ldr	r1, [pc, #472]	; (800cdfc <KyushinJudge+0x688>)
 800cc24:	0123      	lsls	r3, r4, #4
 800cc26:	4403      	add	r3, r0
 800cc28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d224      	bcs.n	800cc7a <KyushinJudge+0x506>
 800cc30:	4b70      	ldr	r3, [pc, #448]	; (800cdf4 <KyushinJudge+0x680>)
 800cc32:	785b      	ldrb	r3, [r3, #1]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d020      	beq.n	800cc7a <KyushinJudge+0x506>
				  //前南
				  Pos.Dir = front;
 800cc38:	4b6e      	ldr	r3, [pc, #440]	; (800cdf4 <KyushinJudge+0x680>)
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800cc3e:	4b6d      	ldr	r3, [pc, #436]	; (800cdf4 <KyushinJudge+0x680>)
 800cc40:	781a      	ldrb	r2, [r3, #0]
 800cc42:	4b6c      	ldr	r3, [pc, #432]	; (800cdf4 <KyushinJudge+0x680>)
 800cc44:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y - 1;
 800cc46:	4b6b      	ldr	r3, [pc, #428]	; (800cdf4 <KyushinJudge+0x680>)
 800cc48:	785b      	ldrb	r3, [r3, #1]
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	b2da      	uxtb	r2, r3
 800cc4e:	4b69      	ldr	r3, [pc, #420]	; (800cdf4 <KyushinJudge+0x680>)
 800cc50:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = south;
 800cc52:	4b68      	ldr	r3, [pc, #416]	; (800cdf4 <KyushinJudge+0x680>)
 800cc54:	2202      	movs	r2, #2
 800cc56:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800cc58:	79fb      	ldrb	r3, [r7, #7]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7fd feb0 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800cc60:	4b64      	ldr	r3, [pc, #400]	; (800cdf4 <KyushinJudge+0x680>)
 800cc62:	7a5a      	ldrb	r2, [r3, #9]
 800cc64:	4b63      	ldr	r3, [pc, #396]	; (800cdf4 <KyushinJudge+0x680>)
 800cc66:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cc68:	4b62      	ldr	r3, [pc, #392]	; (800cdf4 <KyushinJudge+0x680>)
 800cc6a:	799a      	ldrb	r2, [r3, #6]
 800cc6c:	4b61      	ldr	r3, [pc, #388]	; (800cdf4 <KyushinJudge+0x680>)
 800cc6e:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cc70:	4b60      	ldr	r3, [pc, #384]	; (800cdf4 <KyushinJudge+0x680>)
 800cc72:	79da      	ldrb	r2, [r3, #7]
 800cc74:	4b5f      	ldr	r3, [pc, #380]	; (800cdf4 <KyushinJudge+0x680>)
 800cc76:	705a      	strb	r2, [r3, #1]
 800cc78:	e0ba      	b.n	800cdf0 <KyushinJudge+0x67c>
			  }
			  else if(Wall[Pos.X][Pos.Y].east == NOWALL &&walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X < NUMBER_OF_SQUARES-1){
 800cc7a:	4b5e      	ldr	r3, [pc, #376]	; (800cdf4 <KyushinJudge+0x680>)
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	4b5c      	ldr	r3, [pc, #368]	; (800cdf4 <KyushinJudge+0x680>)
 800cc82:	785b      	ldrb	r3, [r3, #1]
 800cc84:	4619      	mov	r1, r3
 800cc86:	4a5c      	ldr	r2, [pc, #368]	; (800cdf8 <KyushinJudge+0x684>)
 800cc88:	0103      	lsls	r3, r0, #4
 800cc8a:	440b      	add	r3, r1
 800cc8c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cc90:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d13c      	bne.n	800cd14 <KyushinJudge+0x5a0>
 800cc9a:	4b56      	ldr	r3, [pc, #344]	; (800cdf4 <KyushinJudge+0x680>)
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	4a54      	ldr	r2, [pc, #336]	; (800cdf4 <KyushinJudge+0x680>)
 800cca2:	7852      	ldrb	r2, [r2, #1]
 800cca4:	4611      	mov	r1, r2
 800cca6:	4a55      	ldr	r2, [pc, #340]	; (800cdfc <KyushinJudge+0x688>)
 800cca8:	011b      	lsls	r3, r3, #4
 800ccaa:	440b      	add	r3, r1
 800ccac:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ccb0:	4b50      	ldr	r3, [pc, #320]	; (800cdf4 <KyushinJudge+0x680>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	461c      	mov	r4, r3
 800ccb6:	4b4f      	ldr	r3, [pc, #316]	; (800cdf4 <KyushinJudge+0x680>)
 800ccb8:	785b      	ldrb	r3, [r3, #1]
 800ccba:	4618      	mov	r0, r3
 800ccbc:	494f      	ldr	r1, [pc, #316]	; (800cdfc <KyushinJudge+0x688>)
 800ccbe:	0123      	lsls	r3, r4, #4
 800ccc0:	4403      	add	r3, r0
 800ccc2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d224      	bcs.n	800cd14 <KyushinJudge+0x5a0>
 800ccca:	4b4a      	ldr	r3, [pc, #296]	; (800cdf4 <KyushinJudge+0x680>)
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	2b0e      	cmp	r3, #14
 800ccd0:	d820      	bhi.n	800cd14 <KyushinJudge+0x5a0>
				  //左東
    			  Pos.Dir = left;
 800ccd2:	4b48      	ldr	r3, [pc, #288]	; (800cdf4 <KyushinJudge+0x680>)
 800ccd4:	2203      	movs	r2, #3
 800ccd6:	709a      	strb	r2, [r3, #2]
    			  Pos.NextX = Pos.X + 1;
 800ccd8:	4b46      	ldr	r3, [pc, #280]	; (800cdf4 <KyushinJudge+0x680>)
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	b2da      	uxtb	r2, r3
 800cce0:	4b44      	ldr	r3, [pc, #272]	; (800cdf4 <KyushinJudge+0x680>)
 800cce2:	719a      	strb	r2, [r3, #6]
    			  Pos.NextY = Pos.Y;
 800cce4:	4b43      	ldr	r3, [pc, #268]	; (800cdf4 <KyushinJudge+0x680>)
 800cce6:	785a      	ldrb	r2, [r3, #1]
 800cce8:	4b42      	ldr	r3, [pc, #264]	; (800cdf4 <KyushinJudge+0x680>)
 800ccea:	71da      	strb	r2, [r3, #7]
    			  Pos.NextCar = east;
 800ccec:	4b41      	ldr	r3, [pc, #260]	; (800cdf4 <KyushinJudge+0x680>)
 800ccee:	2201      	movs	r2, #1
 800ccf0:	725a      	strb	r2, [r3, #9]
    			  SelectAction(turn_mode);
 800ccf2:	79fb      	ldrb	r3, [r7, #7]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7fd fe63 	bl	800a9c0 <SelectAction>
    			  Pos.Car = Pos.NextCar;
 800ccfa:	4b3e      	ldr	r3, [pc, #248]	; (800cdf4 <KyushinJudge+0x680>)
 800ccfc:	7a5a      	ldrb	r2, [r3, #9]
 800ccfe:	4b3d      	ldr	r3, [pc, #244]	; (800cdf4 <KyushinJudge+0x680>)
 800cd00:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cd02:	4b3c      	ldr	r3, [pc, #240]	; (800cdf4 <KyushinJudge+0x680>)
 800cd04:	799a      	ldrb	r2, [r3, #6]
 800cd06:	4b3b      	ldr	r3, [pc, #236]	; (800cdf4 <KyushinJudge+0x680>)
 800cd08:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cd0a:	4b3a      	ldr	r3, [pc, #232]	; (800cdf4 <KyushinJudge+0x680>)
 800cd0c:	79da      	ldrb	r2, [r3, #7]
 800cd0e:	4b39      	ldr	r3, [pc, #228]	; (800cdf4 <KyushinJudge+0x680>)
 800cd10:	705a      	strb	r2, [r3, #1]
 800cd12:	e06d      	b.n	800cdf0 <KyushinJudge+0x67c>
			  }
			  else if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800cd14:	4b37      	ldr	r3, [pc, #220]	; (800cdf4 <KyushinJudge+0x680>)
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	4b36      	ldr	r3, [pc, #216]	; (800cdf4 <KyushinJudge+0x680>)
 800cd1c:	785b      	ldrb	r3, [r3, #1]
 800cd1e:	4619      	mov	r1, r3
 800cd20:	4a35      	ldr	r2, [pc, #212]	; (800cdf8 <KyushinJudge+0x684>)
 800cd22:	0103      	lsls	r3, r0, #4
 800cd24:	440b      	add	r3, r1
 800cd26:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cd2a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d13c      	bne.n	800cdae <KyushinJudge+0x63a>
 800cd34:	4b2f      	ldr	r3, [pc, #188]	; (800cdf4 <KyushinJudge+0x680>)
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	4a2e      	ldr	r2, [pc, #184]	; (800cdf4 <KyushinJudge+0x680>)
 800cd3c:	7852      	ldrb	r2, [r2, #1]
 800cd3e:	4611      	mov	r1, r2
 800cd40:	4a2e      	ldr	r2, [pc, #184]	; (800cdfc <KyushinJudge+0x688>)
 800cd42:	011b      	lsls	r3, r3, #4
 800cd44:	440b      	add	r3, r1
 800cd46:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800cd4a:	4b2a      	ldr	r3, [pc, #168]	; (800cdf4 <KyushinJudge+0x680>)
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	461c      	mov	r4, r3
 800cd50:	4b28      	ldr	r3, [pc, #160]	; (800cdf4 <KyushinJudge+0x680>)
 800cd52:	785b      	ldrb	r3, [r3, #1]
 800cd54:	4618      	mov	r0, r3
 800cd56:	4929      	ldr	r1, [pc, #164]	; (800cdfc <KyushinJudge+0x688>)
 800cd58:	0123      	lsls	r3, r4, #4
 800cd5a:	4403      	add	r3, r0
 800cd5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d224      	bcs.n	800cdae <KyushinJudge+0x63a>
 800cd64:	4b23      	ldr	r3, [pc, #140]	; (800cdf4 <KyushinJudge+0x680>)
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d020      	beq.n	800cdae <KyushinJudge+0x63a>
				  //右西
				  Pos.Dir = right;
 800cd6c:	4b21      	ldr	r3, [pc, #132]	; (800cdf4 <KyushinJudge+0x680>)
 800cd6e:	2201      	movs	r2, #1
 800cd70:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X - 1;
 800cd72:	4b20      	ldr	r3, [pc, #128]	; (800cdf4 <KyushinJudge+0x680>)
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	3b01      	subs	r3, #1
 800cd78:	b2da      	uxtb	r2, r3
 800cd7a:	4b1e      	ldr	r3, [pc, #120]	; (800cdf4 <KyushinJudge+0x680>)
 800cd7c:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800cd7e:	4b1d      	ldr	r3, [pc, #116]	; (800cdf4 <KyushinJudge+0x680>)
 800cd80:	785a      	ldrb	r2, [r3, #1]
 800cd82:	4b1c      	ldr	r3, [pc, #112]	; (800cdf4 <KyushinJudge+0x680>)
 800cd84:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = west;
 800cd86:	4b1b      	ldr	r3, [pc, #108]	; (800cdf4 <KyushinJudge+0x680>)
 800cd88:	2203      	movs	r2, #3
 800cd8a:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800cd8c:	79fb      	ldrb	r3, [r7, #7]
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7fd fe16 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800cd94:	4b17      	ldr	r3, [pc, #92]	; (800cdf4 <KyushinJudge+0x680>)
 800cd96:	7a5a      	ldrb	r2, [r3, #9]
 800cd98:	4b16      	ldr	r3, [pc, #88]	; (800cdf4 <KyushinJudge+0x680>)
 800cd9a:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cd9c:	4b15      	ldr	r3, [pc, #84]	; (800cdf4 <KyushinJudge+0x680>)
 800cd9e:	799a      	ldrb	r2, [r3, #6]
 800cda0:	4b14      	ldr	r3, [pc, #80]	; (800cdf4 <KyushinJudge+0x680>)
 800cda2:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cda4:	4b13      	ldr	r3, [pc, #76]	; (800cdf4 <KyushinJudge+0x680>)
 800cda6:	79da      	ldrb	r2, [r3, #7]
 800cda8:	4b12      	ldr	r3, [pc, #72]	; (800cdf4 <KyushinJudge+0x680>)
 800cdaa:	705a      	strb	r2, [r3, #1]
 800cdac:	e020      	b.n	800cdf0 <KyushinJudge+0x67c>
			  }
			  else {
				  //後北
				  Pos.Dir = back;
 800cdae:	4b11      	ldr	r3, [pc, #68]	; (800cdf4 <KyushinJudge+0x680>)
 800cdb0:	2202      	movs	r2, #2
 800cdb2:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800cdb4:	4b0f      	ldr	r3, [pc, #60]	; (800cdf4 <KyushinJudge+0x680>)
 800cdb6:	781a      	ldrb	r2, [r3, #0]
 800cdb8:	4b0e      	ldr	r3, [pc, #56]	; (800cdf4 <KyushinJudge+0x680>)
 800cdba:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y+1;
 800cdbc:	4b0d      	ldr	r3, [pc, #52]	; (800cdf4 <KyushinJudge+0x680>)
 800cdbe:	785b      	ldrb	r3, [r3, #1]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	4b0b      	ldr	r3, [pc, #44]	; (800cdf4 <KyushinJudge+0x680>)
 800cdc6:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = north;
 800cdc8:	4b0a      	ldr	r3, [pc, #40]	; (800cdf4 <KyushinJudge+0x680>)
 800cdca:	2200      	movs	r2, #0
 800cdcc:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800cdce:	79fb      	ldrb	r3, [r7, #7]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fd fdf5 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800cdd6:	4b07      	ldr	r3, [pc, #28]	; (800cdf4 <KyushinJudge+0x680>)
 800cdd8:	7a5a      	ldrb	r2, [r3, #9]
 800cdda:	4b06      	ldr	r3, [pc, #24]	; (800cdf4 <KyushinJudge+0x680>)
 800cddc:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cdde:	4b05      	ldr	r3, [pc, #20]	; (800cdf4 <KyushinJudge+0x680>)
 800cde0:	799a      	ldrb	r2, [r3, #6]
 800cde2:	4b04      	ldr	r3, [pc, #16]	; (800cdf4 <KyushinJudge+0x680>)
 800cde4:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cde6:	4b03      	ldr	r3, [pc, #12]	; (800cdf4 <KyushinJudge+0x680>)
 800cde8:	79da      	ldrb	r2, [r3, #7]
 800cdea:	4b02      	ldr	r3, [pc, #8]	; (800cdf4 <KyushinJudge+0x680>)
 800cdec:	705a      	strb	r2, [r3, #1]
			  }
			  break;
 800cdee:	e111      	b.n	800d014 <KyushinJudge+0x8a0>
 800cdf0:	e110      	b.n	800d014 <KyushinJudge+0x8a0>
 800cdf2:	bf00      	nop
 800cdf4:	20000000 	.word	0x20000000
 800cdf8:	20010398 	.word	0x20010398
 800cdfc:	2000ff68 	.word	0x2000ff68

		  case west:

			  if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800ce00:	4b86      	ldr	r3, [pc, #536]	; (800d01c <KyushinJudge+0x8a8>)
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	4618      	mov	r0, r3
 800ce06:	4b85      	ldr	r3, [pc, #532]	; (800d01c <KyushinJudge+0x8a8>)
 800ce08:	785b      	ldrb	r3, [r3, #1]
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	4a84      	ldr	r2, [pc, #528]	; (800d020 <KyushinJudge+0x8ac>)
 800ce0e:	0103      	lsls	r3, r0, #4
 800ce10:	440b      	add	r3, r1
 800ce12:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ce16:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d13c      	bne.n	800ce9a <KyushinJudge+0x726>
 800ce20:	4b7e      	ldr	r3, [pc, #504]	; (800d01c <KyushinJudge+0x8a8>)
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	3b01      	subs	r3, #1
 800ce26:	4a7d      	ldr	r2, [pc, #500]	; (800d01c <KyushinJudge+0x8a8>)
 800ce28:	7852      	ldrb	r2, [r2, #1]
 800ce2a:	4611      	mov	r1, r2
 800ce2c:	4a7d      	ldr	r2, [pc, #500]	; (800d024 <KyushinJudge+0x8b0>)
 800ce2e:	011b      	lsls	r3, r3, #4
 800ce30:	440b      	add	r3, r1
 800ce32:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ce36:	4b79      	ldr	r3, [pc, #484]	; (800d01c <KyushinJudge+0x8a8>)
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	461c      	mov	r4, r3
 800ce3c:	4b77      	ldr	r3, [pc, #476]	; (800d01c <KyushinJudge+0x8a8>)
 800ce3e:	785b      	ldrb	r3, [r3, #1]
 800ce40:	4618      	mov	r0, r3
 800ce42:	4978      	ldr	r1, [pc, #480]	; (800d024 <KyushinJudge+0x8b0>)
 800ce44:	0123      	lsls	r3, r4, #4
 800ce46:	4403      	add	r3, r0
 800ce48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d224      	bcs.n	800ce9a <KyushinJudge+0x726>
 800ce50:	4b72      	ldr	r3, [pc, #456]	; (800d01c <KyushinJudge+0x8a8>)
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d020      	beq.n	800ce9a <KyushinJudge+0x726>
				  //前西
				  Pos.Dir = front;
 800ce58:	4b70      	ldr	r3, [pc, #448]	; (800d01c <KyushinJudge+0x8a8>)
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X - 1;
 800ce5e:	4b6f      	ldr	r3, [pc, #444]	; (800d01c <KyushinJudge+0x8a8>)
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	3b01      	subs	r3, #1
 800ce64:	b2da      	uxtb	r2, r3
 800ce66:	4b6d      	ldr	r3, [pc, #436]	; (800d01c <KyushinJudge+0x8a8>)
 800ce68:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800ce6a:	4b6c      	ldr	r3, [pc, #432]	; (800d01c <KyushinJudge+0x8a8>)
 800ce6c:	785a      	ldrb	r2, [r3, #1]
 800ce6e:	4b6b      	ldr	r3, [pc, #428]	; (800d01c <KyushinJudge+0x8a8>)
 800ce70:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = west;
 800ce72:	4b6a      	ldr	r3, [pc, #424]	; (800d01c <KyushinJudge+0x8a8>)
 800ce74:	2203      	movs	r2, #3
 800ce76:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800ce78:	79fb      	ldrb	r3, [r7, #7]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7fd fda0 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800ce80:	4b66      	ldr	r3, [pc, #408]	; (800d01c <KyushinJudge+0x8a8>)
 800ce82:	7a5a      	ldrb	r2, [r3, #9]
 800ce84:	4b65      	ldr	r3, [pc, #404]	; (800d01c <KyushinJudge+0x8a8>)
 800ce86:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800ce88:	4b64      	ldr	r3, [pc, #400]	; (800d01c <KyushinJudge+0x8a8>)
 800ce8a:	799a      	ldrb	r2, [r3, #6]
 800ce8c:	4b63      	ldr	r3, [pc, #396]	; (800d01c <KyushinJudge+0x8a8>)
 800ce8e:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800ce90:	4b62      	ldr	r3, [pc, #392]	; (800d01c <KyushinJudge+0x8a8>)
 800ce92:	79da      	ldrb	r2, [r3, #7]
 800ce94:	4b61      	ldr	r3, [pc, #388]	; (800d01c <KyushinJudge+0x8a8>)
 800ce96:	705a      	strb	r2, [r3, #1]
 800ce98:	e0ba      	b.n	800d010 <KyushinJudge+0x89c>
			  }
			  else if(Wall[Pos.X][Pos.Y].south == NOWALL &&walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800ce9a:	4b60      	ldr	r3, [pc, #384]	; (800d01c <KyushinJudge+0x8a8>)
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	4618      	mov	r0, r3
 800cea0:	4b5e      	ldr	r3, [pc, #376]	; (800d01c <KyushinJudge+0x8a8>)
 800cea2:	785b      	ldrb	r3, [r3, #1]
 800cea4:	4619      	mov	r1, r3
 800cea6:	4a5e      	ldr	r2, [pc, #376]	; (800d020 <KyushinJudge+0x8ac>)
 800cea8:	0103      	lsls	r3, r0, #4
 800ceaa:	440b      	add	r3, r1
 800ceac:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ceb0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800ceb4:	b2db      	uxtb	r3, r3
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d13c      	bne.n	800cf34 <KyushinJudge+0x7c0>
 800ceba:	4b58      	ldr	r3, [pc, #352]	; (800d01c <KyushinJudge+0x8a8>)
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	461a      	mov	r2, r3
 800cec0:	4b56      	ldr	r3, [pc, #344]	; (800d01c <KyushinJudge+0x8a8>)
 800cec2:	785b      	ldrb	r3, [r3, #1]
 800cec4:	3b01      	subs	r3, #1
 800cec6:	4957      	ldr	r1, [pc, #348]	; (800d024 <KyushinJudge+0x8b0>)
 800cec8:	0112      	lsls	r2, r2, #4
 800ceca:	4413      	add	r3, r2
 800cecc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ced0:	4b52      	ldr	r3, [pc, #328]	; (800d01c <KyushinJudge+0x8a8>)
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	461c      	mov	r4, r3
 800ced6:	4b51      	ldr	r3, [pc, #324]	; (800d01c <KyushinJudge+0x8a8>)
 800ced8:	785b      	ldrb	r3, [r3, #1]
 800ceda:	4618      	mov	r0, r3
 800cedc:	4951      	ldr	r1, [pc, #324]	; (800d024 <KyushinJudge+0x8b0>)
 800cede:	0123      	lsls	r3, r4, #4
 800cee0:	4403      	add	r3, r0
 800cee2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d224      	bcs.n	800cf34 <KyushinJudge+0x7c0>
 800ceea:	4b4c      	ldr	r3, [pc, #304]	; (800d01c <KyushinJudge+0x8a8>)
 800ceec:	785b      	ldrb	r3, [r3, #1]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d020      	beq.n	800cf34 <KyushinJudge+0x7c0>
				  //左?��?
    			  Pos.Dir = left;
 800cef2:	4b4a      	ldr	r3, [pc, #296]	; (800d01c <KyushinJudge+0x8a8>)
 800cef4:	2203      	movs	r2, #3
 800cef6:	709a      	strb	r2, [r3, #2]
    			  Pos.NextX = Pos.X;
 800cef8:	4b48      	ldr	r3, [pc, #288]	; (800d01c <KyushinJudge+0x8a8>)
 800cefa:	781a      	ldrb	r2, [r3, #0]
 800cefc:	4b47      	ldr	r3, [pc, #284]	; (800d01c <KyushinJudge+0x8a8>)
 800cefe:	719a      	strb	r2, [r3, #6]
    			  Pos.NextY = Pos.Y - 1;
 800cf00:	4b46      	ldr	r3, [pc, #280]	; (800d01c <KyushinJudge+0x8a8>)
 800cf02:	785b      	ldrb	r3, [r3, #1]
 800cf04:	3b01      	subs	r3, #1
 800cf06:	b2da      	uxtb	r2, r3
 800cf08:	4b44      	ldr	r3, [pc, #272]	; (800d01c <KyushinJudge+0x8a8>)
 800cf0a:	71da      	strb	r2, [r3, #7]
    			  Pos.NextCar = south;
 800cf0c:	4b43      	ldr	r3, [pc, #268]	; (800d01c <KyushinJudge+0x8a8>)
 800cf0e:	2202      	movs	r2, #2
 800cf10:	725a      	strb	r2, [r3, #9]
    			  SelectAction(turn_mode);
 800cf12:	79fb      	ldrb	r3, [r7, #7]
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7fd fd53 	bl	800a9c0 <SelectAction>
    			  Pos.Car = Pos.NextCar;
 800cf1a:	4b40      	ldr	r3, [pc, #256]	; (800d01c <KyushinJudge+0x8a8>)
 800cf1c:	7a5a      	ldrb	r2, [r3, #9]
 800cf1e:	4b3f      	ldr	r3, [pc, #252]	; (800d01c <KyushinJudge+0x8a8>)
 800cf20:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cf22:	4b3e      	ldr	r3, [pc, #248]	; (800d01c <KyushinJudge+0x8a8>)
 800cf24:	799a      	ldrb	r2, [r3, #6]
 800cf26:	4b3d      	ldr	r3, [pc, #244]	; (800d01c <KyushinJudge+0x8a8>)
 800cf28:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cf2a:	4b3c      	ldr	r3, [pc, #240]	; (800d01c <KyushinJudge+0x8a8>)
 800cf2c:	79da      	ldrb	r2, [r3, #7]
 800cf2e:	4b3b      	ldr	r3, [pc, #236]	; (800d01c <KyushinJudge+0x8a8>)
 800cf30:	705a      	strb	r2, [r3, #1]
 800cf32:	e06d      	b.n	800d010 <KyushinJudge+0x89c>
			  }
			  else if(Wall[Pos.X][Pos.Y].north == NOWALL &&walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800cf34:	4b39      	ldr	r3, [pc, #228]	; (800d01c <KyushinJudge+0x8a8>)
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	4b38      	ldr	r3, [pc, #224]	; (800d01c <KyushinJudge+0x8a8>)
 800cf3c:	785b      	ldrb	r3, [r3, #1]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	4a37      	ldr	r2, [pc, #220]	; (800d020 <KyushinJudge+0x8ac>)
 800cf42:	0103      	lsls	r3, r0, #4
 800cf44:	440b      	add	r3, r1
 800cf46:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cf4a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d13c      	bne.n	800cfce <KyushinJudge+0x85a>
 800cf54:	4b31      	ldr	r3, [pc, #196]	; (800d01c <KyushinJudge+0x8a8>)
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	461a      	mov	r2, r3
 800cf5a:	4b30      	ldr	r3, [pc, #192]	; (800d01c <KyushinJudge+0x8a8>)
 800cf5c:	785b      	ldrb	r3, [r3, #1]
 800cf5e:	3301      	adds	r3, #1
 800cf60:	4930      	ldr	r1, [pc, #192]	; (800d024 <KyushinJudge+0x8b0>)
 800cf62:	0112      	lsls	r2, r2, #4
 800cf64:	4413      	add	r3, r2
 800cf66:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800cf6a:	4b2c      	ldr	r3, [pc, #176]	; (800d01c <KyushinJudge+0x8a8>)
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	461c      	mov	r4, r3
 800cf70:	4b2a      	ldr	r3, [pc, #168]	; (800d01c <KyushinJudge+0x8a8>)
 800cf72:	785b      	ldrb	r3, [r3, #1]
 800cf74:	4618      	mov	r0, r3
 800cf76:	492b      	ldr	r1, [pc, #172]	; (800d024 <KyushinJudge+0x8b0>)
 800cf78:	0123      	lsls	r3, r4, #4
 800cf7a:	4403      	add	r3, r0
 800cf7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d224      	bcs.n	800cfce <KyushinJudge+0x85a>
 800cf84:	4b25      	ldr	r3, [pc, #148]	; (800d01c <KyushinJudge+0x8a8>)
 800cf86:	785b      	ldrb	r3, [r3, #1]
 800cf88:	2b0e      	cmp	r3, #14
 800cf8a:	d820      	bhi.n	800cfce <KyushinJudge+0x85a>
				  //右?��?
				  Pos.Dir = right;
 800cf8c:	4b23      	ldr	r3, [pc, #140]	; (800d01c <KyushinJudge+0x8a8>)
 800cf8e:	2201      	movs	r2, #1
 800cf90:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X;
 800cf92:	4b22      	ldr	r3, [pc, #136]	; (800d01c <KyushinJudge+0x8a8>)
 800cf94:	781a      	ldrb	r2, [r3, #0]
 800cf96:	4b21      	ldr	r3, [pc, #132]	; (800d01c <KyushinJudge+0x8a8>)
 800cf98:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y+1;
 800cf9a:	4b20      	ldr	r3, [pc, #128]	; (800d01c <KyushinJudge+0x8a8>)
 800cf9c:	785b      	ldrb	r3, [r3, #1]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	b2da      	uxtb	r2, r3
 800cfa2:	4b1e      	ldr	r3, [pc, #120]	; (800d01c <KyushinJudge+0x8a8>)
 800cfa4:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = north;
 800cfa6:	4b1d      	ldr	r3, [pc, #116]	; (800d01c <KyushinJudge+0x8a8>)
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800cfac:	79fb      	ldrb	r3, [r7, #7]
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fd fd06 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800cfb4:	4b19      	ldr	r3, [pc, #100]	; (800d01c <KyushinJudge+0x8a8>)
 800cfb6:	7a5a      	ldrb	r2, [r3, #9]
 800cfb8:	4b18      	ldr	r3, [pc, #96]	; (800d01c <KyushinJudge+0x8a8>)
 800cfba:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cfbc:	4b17      	ldr	r3, [pc, #92]	; (800d01c <KyushinJudge+0x8a8>)
 800cfbe:	799a      	ldrb	r2, [r3, #6]
 800cfc0:	4b16      	ldr	r3, [pc, #88]	; (800d01c <KyushinJudge+0x8a8>)
 800cfc2:	701a      	strb	r2, [r3, #0]
		          Pos.Y = Pos.NextY;
 800cfc4:	4b15      	ldr	r3, [pc, #84]	; (800d01c <KyushinJudge+0x8a8>)
 800cfc6:	79da      	ldrb	r2, [r3, #7]
 800cfc8:	4b14      	ldr	r3, [pc, #80]	; (800d01c <KyushinJudge+0x8a8>)
 800cfca:	705a      	strb	r2, [r3, #1]
 800cfcc:	e020      	b.n	800d010 <KyushinJudge+0x89c>
			  }
			  else {
				  //後東
				  Pos.Dir = back;
 800cfce:	4b13      	ldr	r3, [pc, #76]	; (800d01c <KyushinJudge+0x8a8>)
 800cfd0:	2202      	movs	r2, #2
 800cfd2:	709a      	strb	r2, [r3, #2]
				  Pos.NextX = Pos.X + 1;
 800cfd4:	4b11      	ldr	r3, [pc, #68]	; (800d01c <KyushinJudge+0x8a8>)
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	4b0f      	ldr	r3, [pc, #60]	; (800d01c <KyushinJudge+0x8a8>)
 800cfde:	719a      	strb	r2, [r3, #6]
				  Pos.NextY = Pos.Y;
 800cfe0:	4b0e      	ldr	r3, [pc, #56]	; (800d01c <KyushinJudge+0x8a8>)
 800cfe2:	785a      	ldrb	r2, [r3, #1]
 800cfe4:	4b0d      	ldr	r3, [pc, #52]	; (800d01c <KyushinJudge+0x8a8>)
 800cfe6:	71da      	strb	r2, [r3, #7]
				  Pos.NextCar = east;
 800cfe8:	4b0c      	ldr	r3, [pc, #48]	; (800d01c <KyushinJudge+0x8a8>)
 800cfea:	2201      	movs	r2, #1
 800cfec:	725a      	strb	r2, [r3, #9]
				  SelectAction(turn_mode);
 800cfee:	79fb      	ldrb	r3, [r7, #7]
 800cff0:	4618      	mov	r0, r3
 800cff2:	f7fd fce5 	bl	800a9c0 <SelectAction>
		       	  Pos.Car = Pos.NextCar;
 800cff6:	4b09      	ldr	r3, [pc, #36]	; (800d01c <KyushinJudge+0x8a8>)
 800cff8:	7a5a      	ldrb	r2, [r3, #9]
 800cffa:	4b08      	ldr	r3, [pc, #32]	; (800d01c <KyushinJudge+0x8a8>)
 800cffc:	70da      	strb	r2, [r3, #3]
		       	  Pos.X = Pos.NextX;
 800cffe:	4b07      	ldr	r3, [pc, #28]	; (800d01c <KyushinJudge+0x8a8>)
 800d000:	799a      	ldrb	r2, [r3, #6]
 800d002:	4b06      	ldr	r3, [pc, #24]	; (800d01c <KyushinJudge+0x8a8>)
 800d004:	701a      	strb	r2, [r3, #0]
		       	  Pos.Y = Pos.NextY;
 800d006:	4b05      	ldr	r3, [pc, #20]	; (800d01c <KyushinJudge+0x8a8>)
 800d008:	79da      	ldrb	r2, [r3, #7]
 800d00a:	4b04      	ldr	r3, [pc, #16]	; (800d01c <KyushinJudge+0x8a8>)
 800d00c:	705a      	strb	r2, [r3, #1]
			  }
			  break;
 800d00e:	e001      	b.n	800d014 <KyushinJudge+0x8a0>
 800d010:	e000      	b.n	800d014 <KyushinJudge+0x8a0>

		  default:
			  break;
 800d012:	bf00      	nop
		  //swtich end
	}

}
 800d014:	bf00      	nop
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd90      	pop	{r4, r7, pc}
 800d01c:	20000000 	.word	0x20000000
 800d020:	20010398 	.word	0x20010398
 800d024:	2000ff68 	.word	0x2000ff68

0800d028 <is_unknown>:
    	  default:
    		  break;
    	  }//swtich end
}
_Bool is_unknown(int x, int y)	//指定された区画が未探索か否かを判断する関数 未探索:true　探索済:false
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
	//座標x,yが未探索区間か否かを調べる

	if((Wall[x][y].north == UNKNOWN) || (Wall[x][y].east == UNKNOWN) || (Wall[x][y].south == UNKNOWN) || (Wall[x][y].west == UNKNOWN))
 800d032:	491c      	ldr	r1, [pc, #112]	; (800d0a4 <is_unknown+0x7c>)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	011a      	lsls	r2, r3, #4
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	4413      	add	r3, r2
 800d03c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800d040:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d044:	b2db      	uxtb	r3, r3
 800d046:	2b02      	cmp	r3, #2
 800d048:	d023      	beq.n	800d092 <is_unknown+0x6a>
 800d04a:	4916      	ldr	r1, [pc, #88]	; (800d0a4 <is_unknown+0x7c>)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	011a      	lsls	r2, r3, #4
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	4413      	add	r3, r2
 800d054:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800d058:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	2b02      	cmp	r3, #2
 800d060:	d017      	beq.n	800d092 <is_unknown+0x6a>
 800d062:	4910      	ldr	r1, [pc, #64]	; (800d0a4 <is_unknown+0x7c>)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	011a      	lsls	r2, r3, #4
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	4413      	add	r3, r2
 800d06c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800d070:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d074:	b2db      	uxtb	r3, r3
 800d076:	2b02      	cmp	r3, #2
 800d078:	d00b      	beq.n	800d092 <is_unknown+0x6a>
 800d07a:	490a      	ldr	r1, [pc, #40]	; (800d0a4 <is_unknown+0x7c>)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	011a      	lsls	r2, r3, #4
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	4413      	add	r3, r2
 800d084:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800d088:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	2b02      	cmp	r3, #2
 800d090:	d101      	bne.n	800d096 <is_unknown+0x6e>
	{			//どこかの壁情報が不明のままであれば
		return true;	//未探索
 800d092:	2301      	movs	r3, #1
 800d094:	e000      	b.n	800d098 <is_unknown+0x70>
	}
	else
	{
		return false;	//探索済
 800d096:	2300      	movs	r3, #0
	}
}
 800d098:	4618      	mov	r0, r3
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr
 800d0a4:	20010398 	.word	0x20010398

0800d0a8 <get_priority>:
int get_priority(int x, int y, cardinal car)	//そのマスの情報から、優先度を算出する
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b086      	sub	sp, #24
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	71fb      	strb	r3, [r7, #7]
	//それに加え、自分の向きと、行きたい方向から、
	//前(2)横(1)後(0)の優先度を付加する。

	int priority;	//優先度を記録する変数

	priority = 0;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	617b      	str	r3, [r7, #20]

	if(Pos.Car == car)				//行きたい方向が現在の進行方向と同じ場合
 800d0ba:	4b15      	ldr	r3, [pc, #84]	; (800d110 <get_priority+0x68>)
 800d0bc:	78db      	ldrb	r3, [r3, #3]
 800d0be:	79fa      	ldrb	r2, [r7, #7]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d102      	bne.n	800d0ca <get_priority+0x22>
	{
		priority = 2;
 800d0c4:	2302      	movs	r3, #2
 800d0c6:	617b      	str	r3, [r7, #20]
 800d0c8:	e012      	b.n	800d0f0 <get_priority+0x48>
	}
	else if( ((4+Pos.Car-car)%4) == 2)		//行きたい方向が現在の進行方向と逆の場合
 800d0ca:	4b11      	ldr	r3, [pc, #68]	; (800d110 <get_priority+0x68>)
 800d0cc:	78db      	ldrb	r3, [r3, #3]
 800d0ce:	1d1a      	adds	r2, r3, #4
 800d0d0:	79fb      	ldrb	r3, [r7, #7]
 800d0d2:	1ad3      	subs	r3, r2, r3
 800d0d4:	425a      	negs	r2, r3
 800d0d6:	f003 0303 	and.w	r3, r3, #3
 800d0da:	f002 0203 	and.w	r2, r2, #3
 800d0de:	bf58      	it	pl
 800d0e0:	4253      	negpl	r3, r2
 800d0e2:	2b02      	cmp	r3, #2
 800d0e4:	d102      	bne.n	800d0ec <get_priority+0x44>
	{
		priority = 0;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	617b      	str	r3, [r7, #20]
 800d0ea:	e001      	b.n	800d0f0 <get_priority+0x48>
	}
	else						//それ以外(左右どちらか)の場合
	{
		priority = 1;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	617b      	str	r3, [r7, #20]
	}


	if(is_unknown(x,y) == true)
 800d0f0:	68b9      	ldr	r1, [r7, #8]
 800d0f2:	68f8      	ldr	r0, [r7, #12]
 800d0f4:	f7ff ff98 	bl	800d028 <is_unknown>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d002      	beq.n	800d104 <get_priority+0x5c>
	{
		priority += 4;				//未探索の場合優先度をさらに付加
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	3304      	adds	r3, #4
 800d102:	617b      	str	r3, [r7, #20]
	}

	return priority;				//優先度を返す
 800d104:	697b      	ldr	r3, [r7, #20]

}
 800d106:	4618      	mov	r0, r3
 800d108:	3718      	adds	r7, #24
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	20000000 	.word	0x20000000

0800d114 <get_nextdir>:
int get_nextdir(int x, int y, int mask)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b088      	sub	sp, #32
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	607a      	str	r2, [r7, #4]
	//ゴール座標x,yに向かう場合、今どちらに行くべきかを判断する。
	//探索、最短の切り替えのためのmaskを指定、dirは方角を示す
	int little,priority,tmp_priority;		//最小の値を探すために使用する変数


	make_map(x,y,mask);				//歩数Map生成
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	68b9      	ldr	r1, [r7, #8]
 800d124:	68f8      	ldr	r0, [r7, #12]
 800d126:	f7fe fb43 	bl	800b7b0 <make_map>
	little = 255;					//最小歩数を255歩(mapがunsigned char型なので)に設定
 800d12a:	23ff      	movs	r3, #255	; 0xff
 800d12c:	61fb      	str	r3, [r7, #28]

	priority = 0;					//優先度の初期値は0
 800d12e:	2300      	movs	r3, #0
 800d130:	61bb      	str	r3, [r7, #24]

		//maskの意味はstatic_parameter.hを参照
	if( (Wall[Pos.X][Pos.Y].north & mask) == NOWALL)			//北に壁がなければ
 800d132:	4ba1      	ldr	r3, [pc, #644]	; (800d3b8 <get_nextdir+0x2a4>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	4618      	mov	r0, r3
 800d138:	4b9f      	ldr	r3, [pc, #636]	; (800d3b8 <get_nextdir+0x2a4>)
 800d13a:	785b      	ldrb	r3, [r3, #1]
 800d13c:	4619      	mov	r1, r3
 800d13e:	4a9f      	ldr	r2, [pc, #636]	; (800d3bc <get_nextdir+0x2a8>)
 800d140:	0103      	lsls	r3, r0, #4
 800d142:	440b      	add	r3, r1
 800d144:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d148:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	461a      	mov	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4013      	ands	r3, r2
 800d154:	2b00      	cmp	r3, #0
 800d156:	d143      	bne.n	800d1e0 <get_nextdir+0xcc>
	{
		tmp_priority = get_priority(Pos.X, Pos.Y + 1, north);	//優先度を算出
 800d158:	4b97      	ldr	r3, [pc, #604]	; (800d3b8 <get_nextdir+0x2a4>)
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	4618      	mov	r0, r3
 800d15e:	4b96      	ldr	r3, [pc, #600]	; (800d3b8 <get_nextdir+0x2a4>)
 800d160:	785b      	ldrb	r3, [r3, #1]
 800d162:	3301      	adds	r3, #1
 800d164:	2200      	movs	r2, #0
 800d166:	4619      	mov	r1, r3
 800d168:	f7ff ff9e 	bl	800d0a8 <get_priority>
 800d16c:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X][Pos.Y+1] < little)				//一番歩数が小さい方向を見つける
 800d16e:	4b92      	ldr	r3, [pc, #584]	; (800d3b8 <get_nextdir+0x2a4>)
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	461a      	mov	r2, r3
 800d174:	4b90      	ldr	r3, [pc, #576]	; (800d3b8 <get_nextdir+0x2a4>)
 800d176:	785b      	ldrb	r3, [r3, #1]
 800d178:	3301      	adds	r3, #1
 800d17a:	4991      	ldr	r1, [pc, #580]	; (800d3c0 <get_nextdir+0x2ac>)
 800d17c:	0112      	lsls	r2, r2, #4
 800d17e:	4413      	add	r3, r2
 800d180:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d184:	461a      	mov	r2, r3
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	4293      	cmp	r3, r2
 800d18a:	dd11      	ble.n	800d1b0 <get_nextdir+0x9c>
		{
			little = walk_map[Pos.X][Pos.Y+1];			//ひとまず北が歩数が小さい事にする
 800d18c:	4b8a      	ldr	r3, [pc, #552]	; (800d3b8 <get_nextdir+0x2a4>)
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	461a      	mov	r2, r3
 800d192:	4b89      	ldr	r3, [pc, #548]	; (800d3b8 <get_nextdir+0x2a4>)
 800d194:	785b      	ldrb	r3, [r3, #1]
 800d196:	3301      	adds	r3, #1
 800d198:	4989      	ldr	r1, [pc, #548]	; (800d3c0 <get_nextdir+0x2ac>)
 800d19a:	0112      	lsls	r2, r2, #4
 800d19c:	4413      	add	r3, r2
 800d19e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d1a2:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = north;						//方向を保存
 800d1a4:	4b84      	ldr	r3, [pc, #528]	; (800d3b8 <get_nextdir+0x2a4>)
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	61bb      	str	r3, [r7, #24]
 800d1ae:	e017      	b.n	800d1e0 <get_nextdir+0xcc>
		}
		else if(walk_map[Pos.X][Pos.Y+1] == little)			//歩数が同じ場合は優先度から判断する
 800d1b0:	4b81      	ldr	r3, [pc, #516]	; (800d3b8 <get_nextdir+0x2a4>)
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	4b80      	ldr	r3, [pc, #512]	; (800d3b8 <get_nextdir+0x2a4>)
 800d1b8:	785b      	ldrb	r3, [r3, #1]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	4980      	ldr	r1, [pc, #512]	; (800d3c0 <get_nextdir+0x2ac>)
 800d1be:	0112      	lsls	r2, r2, #4
 800d1c0:	4413      	add	r3, r2
 800d1c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d108      	bne.n	800d1e0 <get_nextdir+0xcc>
		{
			if(priority < tmp_priority )				//優先度を評価
 800d1ce:	69ba      	ldr	r2, [r7, #24]
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	da04      	bge.n	800d1e0 <get_nextdir+0xcc>
			{
				Pos.NextCar = north;					//方向を更新
 800d1d6:	4b78      	ldr	r3, [pc, #480]	; (800d3b8 <get_nextdir+0x2a4>)
 800d1d8:	2200      	movs	r2, #0
 800d1da:	725a      	strb	r2, [r3, #9]
				priority = tmp_priority;			//優先度を保存
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].east & mask) == NOWALL)			//東に壁がなければ
 800d1e0:	4b75      	ldr	r3, [pc, #468]	; (800d3b8 <get_nextdir+0x2a4>)
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	4b74      	ldr	r3, [pc, #464]	; (800d3b8 <get_nextdir+0x2a4>)
 800d1e8:	785b      	ldrb	r3, [r3, #1]
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	4a73      	ldr	r2, [pc, #460]	; (800d3bc <get_nextdir+0x2a8>)
 800d1ee:	0103      	lsls	r3, r0, #4
 800d1f0:	440b      	add	r3, r1
 800d1f2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d1f6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	4013      	ands	r3, r2
 800d202:	2b00      	cmp	r3, #0
 800d204:	d142      	bne.n	800d28c <get_nextdir+0x178>
	{
		tmp_priority = get_priority(Pos.X + 1, Pos.Y, east);	//優先度を算出
 800d206:	4b6c      	ldr	r3, [pc, #432]	; (800d3b8 <get_nextdir+0x2a4>)
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	1c58      	adds	r0, r3, #1
 800d20c:	4b6a      	ldr	r3, [pc, #424]	; (800d3b8 <get_nextdir+0x2a4>)
 800d20e:	785b      	ldrb	r3, [r3, #1]
 800d210:	2201      	movs	r2, #1
 800d212:	4619      	mov	r1, r3
 800d214:	f7ff ff48 	bl	800d0a8 <get_priority>
 800d218:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X + 1][Pos.Y] < little)				//一番歩数が小さい方向を見つける
 800d21a:	4b67      	ldr	r3, [pc, #412]	; (800d3b8 <get_nextdir+0x2a4>)
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	3301      	adds	r3, #1
 800d220:	4a65      	ldr	r2, [pc, #404]	; (800d3b8 <get_nextdir+0x2a4>)
 800d222:	7852      	ldrb	r2, [r2, #1]
 800d224:	4611      	mov	r1, r2
 800d226:	4a66      	ldr	r2, [pc, #408]	; (800d3c0 <get_nextdir+0x2ac>)
 800d228:	011b      	lsls	r3, r3, #4
 800d22a:	440b      	add	r3, r1
 800d22c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d230:	461a      	mov	r2, r3
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	4293      	cmp	r3, r2
 800d236:	dd11      	ble.n	800d25c <get_nextdir+0x148>
		{
			little = walk_map[Pos.X+1][Pos.Y];			//ひとまず東が歩数が小さい事にする
 800d238:	4b5f      	ldr	r3, [pc, #380]	; (800d3b8 <get_nextdir+0x2a4>)
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	3301      	adds	r3, #1
 800d23e:	4a5e      	ldr	r2, [pc, #376]	; (800d3b8 <get_nextdir+0x2a4>)
 800d240:	7852      	ldrb	r2, [r2, #1]
 800d242:	4611      	mov	r1, r2
 800d244:	4a5e      	ldr	r2, [pc, #376]	; (800d3c0 <get_nextdir+0x2ac>)
 800d246:	011b      	lsls	r3, r3, #4
 800d248:	440b      	add	r3, r1
 800d24a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d24e:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = east;						//方向を保存
 800d250:	4b59      	ldr	r3, [pc, #356]	; (800d3b8 <get_nextdir+0x2a4>)
 800d252:	2201      	movs	r2, #1
 800d254:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	61bb      	str	r3, [r7, #24]
 800d25a:	e017      	b.n	800d28c <get_nextdir+0x178>
		}
		else if(walk_map[Pos.X + 1][Pos.Y] == little)			//歩数が同じ場合、優先度から判断
 800d25c:	4b56      	ldr	r3, [pc, #344]	; (800d3b8 <get_nextdir+0x2a4>)
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	3301      	adds	r3, #1
 800d262:	4a55      	ldr	r2, [pc, #340]	; (800d3b8 <get_nextdir+0x2a4>)
 800d264:	7852      	ldrb	r2, [r2, #1]
 800d266:	4611      	mov	r1, r2
 800d268:	4a55      	ldr	r2, [pc, #340]	; (800d3c0 <get_nextdir+0x2ac>)
 800d26a:	011b      	lsls	r3, r3, #4
 800d26c:	440b      	add	r3, r1
 800d26e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d272:	461a      	mov	r2, r3
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	4293      	cmp	r3, r2
 800d278:	d108      	bne.n	800d28c <get_nextdir+0x178>
		{
			if(priority < tmp_priority)				//優先度を評価
 800d27a:	69ba      	ldr	r2, [r7, #24]
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	429a      	cmp	r2, r3
 800d280:	da04      	bge.n	800d28c <get_nextdir+0x178>
			{
				Pos.NextCar = east;					//方向を保存
 800d282:	4b4d      	ldr	r3, [pc, #308]	; (800d3b8 <get_nextdir+0x2a4>)
 800d284:	2201      	movs	r2, #1
 800d286:	725a      	strb	r2, [r3, #9]
				priority = tmp_priority;			//優先度を保存
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].south & mask) == NOWALL)			//南に壁がなければ
 800d28c:	4b4a      	ldr	r3, [pc, #296]	; (800d3b8 <get_nextdir+0x2a4>)
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	4618      	mov	r0, r3
 800d292:	4b49      	ldr	r3, [pc, #292]	; (800d3b8 <get_nextdir+0x2a4>)
 800d294:	785b      	ldrb	r3, [r3, #1]
 800d296:	4619      	mov	r1, r3
 800d298:	4a48      	ldr	r2, [pc, #288]	; (800d3bc <get_nextdir+0x2a8>)
 800d29a:	0103      	lsls	r3, r0, #4
 800d29c:	440b      	add	r3, r1
 800d29e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d2a2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4013      	ands	r3, r2
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d143      	bne.n	800d33a <get_nextdir+0x226>
	{
		tmp_priority = get_priority(Pos.X, Pos.Y - 1, south);	//優先度を算出
 800d2b2:	4b41      	ldr	r3, [pc, #260]	; (800d3b8 <get_nextdir+0x2a4>)
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	4b3f      	ldr	r3, [pc, #252]	; (800d3b8 <get_nextdir+0x2a4>)
 800d2ba:	785b      	ldrb	r3, [r3, #1]
 800d2bc:	3b01      	subs	r3, #1
 800d2be:	2202      	movs	r2, #2
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	f7ff fef1 	bl	800d0a8 <get_priority>
 800d2c6:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X][Pos.Y - 1] < little)				//一番歩数が小さい方向を見つける
 800d2c8:	4b3b      	ldr	r3, [pc, #236]	; (800d3b8 <get_nextdir+0x2a4>)
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	4b3a      	ldr	r3, [pc, #232]	; (800d3b8 <get_nextdir+0x2a4>)
 800d2d0:	785b      	ldrb	r3, [r3, #1]
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	493a      	ldr	r1, [pc, #232]	; (800d3c0 <get_nextdir+0x2ac>)
 800d2d6:	0112      	lsls	r2, r2, #4
 800d2d8:	4413      	add	r3, r2
 800d2da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d2de:	461a      	mov	r2, r3
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	dd11      	ble.n	800d30a <get_nextdir+0x1f6>
		{
			little = walk_map[Pos.X][Pos.Y-1];			//ひとまず南が歩数が小さい事にする
 800d2e6:	4b34      	ldr	r3, [pc, #208]	; (800d3b8 <get_nextdir+0x2a4>)
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	4b32      	ldr	r3, [pc, #200]	; (800d3b8 <get_nextdir+0x2a4>)
 800d2ee:	785b      	ldrb	r3, [r3, #1]
 800d2f0:	3b01      	subs	r3, #1
 800d2f2:	4933      	ldr	r1, [pc, #204]	; (800d3c0 <get_nextdir+0x2ac>)
 800d2f4:	0112      	lsls	r2, r2, #4
 800d2f6:	4413      	add	r3, r2
 800d2f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d2fc:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = south;						//方向を保存
 800d2fe:	4b2e      	ldr	r3, [pc, #184]	; (800d3b8 <get_nextdir+0x2a4>)
 800d300:	2202      	movs	r2, #2
 800d302:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	61bb      	str	r3, [r7, #24]
 800d308:	e017      	b.n	800d33a <get_nextdir+0x226>
		}
		else if(walk_map[Pos.X][Pos.Y - 1] == little)			//歩数が同じ場合、優先度で評価
 800d30a:	4b2b      	ldr	r3, [pc, #172]	; (800d3b8 <get_nextdir+0x2a4>)
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	461a      	mov	r2, r3
 800d310:	4b29      	ldr	r3, [pc, #164]	; (800d3b8 <get_nextdir+0x2a4>)
 800d312:	785b      	ldrb	r3, [r3, #1]
 800d314:	3b01      	subs	r3, #1
 800d316:	492a      	ldr	r1, [pc, #168]	; (800d3c0 <get_nextdir+0x2ac>)
 800d318:	0112      	lsls	r2, r2, #4
 800d31a:	4413      	add	r3, r2
 800d31c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d320:	461a      	mov	r2, r3
 800d322:	69fb      	ldr	r3, [r7, #28]
 800d324:	4293      	cmp	r3, r2
 800d326:	d108      	bne.n	800d33a <get_nextdir+0x226>
		{
			if(priority < tmp_priority)				//優先度を評価
 800d328:	69ba      	ldr	r2, [r7, #24]
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	da04      	bge.n	800d33a <get_nextdir+0x226>
			{
				Pos.NextCar = south;					//方向を保存
 800d330:	4b21      	ldr	r3, [pc, #132]	; (800d3b8 <get_nextdir+0x2a4>)
 800d332:	2202      	movs	r2, #2
 800d334:	725a      	strb	r2, [r3, #9]
				priority = tmp_priority;			//優先度を保存
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].west & mask) == NOWALL)			//西に壁がなければ
 800d33a:	4b1f      	ldr	r3, [pc, #124]	; (800d3b8 <get_nextdir+0x2a4>)
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	4618      	mov	r0, r3
 800d340:	4b1d      	ldr	r3, [pc, #116]	; (800d3b8 <get_nextdir+0x2a4>)
 800d342:	785b      	ldrb	r3, [r3, #1]
 800d344:	4619      	mov	r1, r3
 800d346:	4a1d      	ldr	r2, [pc, #116]	; (800d3bc <get_nextdir+0x2a8>)
 800d348:	0103      	lsls	r3, r0, #4
 800d34a:	440b      	add	r3, r1
 800d34c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d350:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d354:	b2db      	uxtb	r3, r3
 800d356:	461a      	mov	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4013      	ands	r3, r2
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d145      	bne.n	800d3ec <get_nextdir+0x2d8>
	{
		tmp_priority = get_priority(Pos.X - 1, Pos.Y, west);	//優先度を算出
 800d360:	4b15      	ldr	r3, [pc, #84]	; (800d3b8 <get_nextdir+0x2a4>)
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	1e58      	subs	r0, r3, #1
 800d366:	4b14      	ldr	r3, [pc, #80]	; (800d3b8 <get_nextdir+0x2a4>)
 800d368:	785b      	ldrb	r3, [r3, #1]
 800d36a:	2203      	movs	r2, #3
 800d36c:	4619      	mov	r1, r3
 800d36e:	f7ff fe9b 	bl	800d0a8 <get_priority>
 800d372:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X-1][Pos.Y] < little)				//一番歩数が小さい方向を見つける
 800d374:	4b10      	ldr	r3, [pc, #64]	; (800d3b8 <get_nextdir+0x2a4>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	3b01      	subs	r3, #1
 800d37a:	4a0f      	ldr	r2, [pc, #60]	; (800d3b8 <get_nextdir+0x2a4>)
 800d37c:	7852      	ldrb	r2, [r2, #1]
 800d37e:	4611      	mov	r1, r2
 800d380:	4a0f      	ldr	r2, [pc, #60]	; (800d3c0 <get_nextdir+0x2ac>)
 800d382:	011b      	lsls	r3, r3, #4
 800d384:	440b      	add	r3, r1
 800d386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d38a:	461a      	mov	r2, r3
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	4293      	cmp	r3, r2
 800d390:	dd18      	ble.n	800d3c4 <get_nextdir+0x2b0>
		{
			little = walk_map[Pos.X-1][Pos.Y];			//西が歩数が小さい
 800d392:	4b09      	ldr	r3, [pc, #36]	; (800d3b8 <get_nextdir+0x2a4>)
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	3b01      	subs	r3, #1
 800d398:	4a07      	ldr	r2, [pc, #28]	; (800d3b8 <get_nextdir+0x2a4>)
 800d39a:	7852      	ldrb	r2, [r2, #1]
 800d39c:	4611      	mov	r1, r2
 800d39e:	4a08      	ldr	r2, [pc, #32]	; (800d3c0 <get_nextdir+0x2ac>)
 800d3a0:	011b      	lsls	r3, r3, #4
 800d3a2:	440b      	add	r3, r1
 800d3a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3a8:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = west;						//方向を保存
 800d3aa:	4b03      	ldr	r3, [pc, #12]	; (800d3b8 <get_nextdir+0x2a4>)
 800d3ac:	2203      	movs	r2, #3
 800d3ae:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	61bb      	str	r3, [r7, #24]
 800d3b4:	e01a      	b.n	800d3ec <get_nextdir+0x2d8>
 800d3b6:	bf00      	nop
 800d3b8:	20000000 	.word	0x20000000
 800d3bc:	20010398 	.word	0x20010398
 800d3c0:	2000ff68 	.word	0x2000ff68
		}
		else if(walk_map[Pos.X - 1][Pos.Y] == little)			//歩数が同じ場合、優先度で評価
 800d3c4:	4b12      	ldr	r3, [pc, #72]	; (800d410 <get_nextdir+0x2fc>)
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	4a11      	ldr	r2, [pc, #68]	; (800d410 <get_nextdir+0x2fc>)
 800d3cc:	7852      	ldrb	r2, [r2, #1]
 800d3ce:	4611      	mov	r1, r2
 800d3d0:	4a10      	ldr	r2, [pc, #64]	; (800d414 <get_nextdir+0x300>)
 800d3d2:	011b      	lsls	r3, r3, #4
 800d3d4:	440b      	add	r3, r1
 800d3d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3da:	461a      	mov	r2, r3
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d104      	bne.n	800d3ec <get_nextdir+0x2d8>
		{
			Pos.NextCar = west;						//方向を保存
 800d3e2:	4b0b      	ldr	r3, [pc, #44]	; (800d410 <get_nextdir+0x2fc>)
 800d3e4:	2203      	movs	r2, #3
 800d3e6:	725a      	strb	r2, [r3, #9]
			priority = tmp_priority;				//優先度を保存
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	61bb      	str	r3, [r7, #24]
		}
	}


	return ( (int)( ( 4 + Pos.NextCar - Pos.Car) % 4 ) );			//どっちに向かうべきかを返す。
 800d3ec:	4b08      	ldr	r3, [pc, #32]	; (800d410 <get_nextdir+0x2fc>)
 800d3ee:	7a5b      	ldrb	r3, [r3, #9]
 800d3f0:	3304      	adds	r3, #4
 800d3f2:	4a07      	ldr	r2, [pc, #28]	; (800d410 <get_nextdir+0x2fc>)
 800d3f4:	78d2      	ldrb	r2, [r2, #3]
 800d3f6:	1a9b      	subs	r3, r3, r2
 800d3f8:	425a      	negs	r2, r3
 800d3fa:	f003 0303 	and.w	r3, r3, #3
 800d3fe:	f002 0203 	and.w	r2, r2, #3
 800d402:	bf58      	it	pl
 800d404:	4253      	negpl	r3, r2
										//演算の意味はmytyedef.h内のenum宣言から。

}
 800d406:	4618      	mov	r0, r3
 800d408:	3720      	adds	r7, #32
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	20000000 	.word	0x20000000
 800d414:	2000ff68 	.word	0x2000ff68

0800d418 <fast_run>:
void fast_run(int x, int y,int x2, int y2, char turn_mode)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	607a      	str	r2, [r7, #4]
 800d424:	603b      	str	r3, [r7, #0]
//		case west:
//			Pos.X--;	//西を向いたときはX座標を減らす
//			break;
//
//	}
	SearchOrFast = 1;
 800d426:	4b4e      	ldr	r3, [pc, #312]	; (800d560 <fast_run+0x148>)
 800d428:	2201      	movs	r2, #1
 800d42a:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800d42c:	4b4d      	ldr	r3, [pc, #308]	; (800d564 <fast_run+0x14c>)
 800d42e:	2200      	movs	r2, #0
 800d430:	709a      	strb	r2, [r3, #2]
	Pos.Car = north;
 800d432:	4b4c      	ldr	r3, [pc, #304]	; (800d564 <fast_run+0x14c>)
 800d434:	2200      	movs	r2, #0
 800d436:	70da      	strb	r2, [r3, #3]
	Pos.NextX = Pos.X;
 800d438:	4b4a      	ldr	r3, [pc, #296]	; (800d564 <fast_run+0x14c>)
 800d43a:	781a      	ldrb	r2, [r3, #0]
 800d43c:	4b49      	ldr	r3, [pc, #292]	; (800d564 <fast_run+0x14c>)
 800d43e:	719a      	strb	r2, [r3, #6]
	Pos.NextY = Pos.Y + 1;
 800d440:	4b48      	ldr	r3, [pc, #288]	; (800d564 <fast_run+0x14c>)
 800d442:	785b      	ldrb	r3, [r3, #1]
 800d444:	3301      	adds	r3, #1
 800d446:	b2da      	uxtb	r2, r3
 800d448:	4b46      	ldr	r3, [pc, #280]	; (800d564 <fast_run+0x14c>)
 800d44a:	71da      	strb	r2, [r3, #7]
	Pos.NextCar = north;
 800d44c:	4b45      	ldr	r3, [pc, #276]	; (800d564 <fast_run+0x14c>)
 800d44e:	2200      	movs	r2, #0
 800d450:	725a      	strb	r2, [r3, #9]
	Accel(61.75, ExploreVelocity);
 800d452:	4b45      	ldr	r3, [pc, #276]	; (800d568 <fast_run+0x150>)
 800d454:	edd3 7a00 	vldr	s15, [r3]
 800d458:	eef0 0a67 	vmov.f32	s1, s15
 800d45c:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800d56c <fast_run+0x154>
 800d460:	f7fc fdca 	bl	8009ff8 <Accel>
 	Pos.X = Pos.NextX;
 800d464:	4b3f      	ldr	r3, [pc, #252]	; (800d564 <fast_run+0x14c>)
 800d466:	799a      	ldrb	r2, [r3, #6]
 800d468:	4b3e      	ldr	r3, [pc, #248]	; (800d564 <fast_run+0x14c>)
 800d46a:	701a      	strb	r2, [r3, #0]
    Pos.Y = Pos.NextY;
 800d46c:	4b3d      	ldr	r3, [pc, #244]	; (800d564 <fast_run+0x14c>)
 800d46e:	79da      	ldrb	r2, [r3, #7]
 800d470:	4b3c      	ldr	r3, [pc, #240]	; (800d564 <fast_run+0x14c>)
 800d472:	705a      	strb	r2, [r3, #1]
	Pos.Car = Pos.NextCar;	//自分の向きを更新
 800d474:	4b3b      	ldr	r3, [pc, #236]	; (800d564 <fast_run+0x14c>)
 800d476:	7a5a      	ldrb	r2, [r3, #9]
 800d478:	4b3a      	ldr	r3, [pc, #232]	; (800d564 <fast_run+0x14c>)
 800d47a:	70da      	strb	r2, [r3, #3]

	while( !((x <= Pos.X && Pos.X <= x2) && (y <= Pos.Y && Pos.Y <= y2)) ){			//ゴールするまで繰り返す
 800d47c:	e054      	b.n	800d528 <fast_run+0x110>
		Pos.Dir = get_nextdir(x,y,0x03);//新しい区画に入ったところで、次の方向を求める。方向と方角がわかる。
 800d47e:	2203      	movs	r2, #3
 800d480:	68b9      	ldr	r1, [r7, #8]
 800d482:	68f8      	ldr	r0, [r7, #12]
 800d484:	f7ff fe46 	bl	800d114 <get_nextdir>
 800d488:	4603      	mov	r3, r0
 800d48a:	b2da      	uxtb	r2, r3
 800d48c:	4b35      	ldr	r3, [pc, #212]	; (800d564 <fast_run+0x14c>)
 800d48e:	709a      	strb	r2, [r3, #2]
		//向いた方向によって自分の座標を更新する
		switch(Pos.NextCar)//
 800d490:	4b34      	ldr	r3, [pc, #208]	; (800d564 <fast_run+0x14c>)
 800d492:	7a5b      	ldrb	r3, [r3, #9]
 800d494:	2b03      	cmp	r3, #3
 800d496:	d837      	bhi.n	800d508 <fast_run+0xf0>
 800d498:	a201      	add	r2, pc, #4	; (adr r2, 800d4a0 <fast_run+0x88>)
 800d49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d49e:	bf00      	nop
 800d4a0:	0800d4b1 	.word	0x0800d4b1
 800d4a4:	0800d4c7 	.word	0x0800d4c7
 800d4a8:	0800d4dd 	.word	0x0800d4dd
 800d4ac:	0800d4f3 	.word	0x0800d4f3
		{
			case north:
				Pos.NextX = Pos.X;
 800d4b0:	4b2c      	ldr	r3, [pc, #176]	; (800d564 <fast_run+0x14c>)
 800d4b2:	781a      	ldrb	r2, [r3, #0]
 800d4b4:	4b2b      	ldr	r3, [pc, #172]	; (800d564 <fast_run+0x14c>)
 800d4b6:	719a      	strb	r2, [r3, #6]
				Pos.NextY = Pos.Y + 1;	//北を向いた時はY座標を増やす
 800d4b8:	4b2a      	ldr	r3, [pc, #168]	; (800d564 <fast_run+0x14c>)
 800d4ba:	785b      	ldrb	r3, [r3, #1]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	b2da      	uxtb	r2, r3
 800d4c0:	4b28      	ldr	r3, [pc, #160]	; (800d564 <fast_run+0x14c>)
 800d4c2:	71da      	strb	r2, [r3, #7]
				break;
 800d4c4:	e020      	b.n	800d508 <fast_run+0xf0>

			case east:
				Pos.NextX = Pos.X + 1;	//東を向いた時はX座標を増やす
 800d4c6:	4b27      	ldr	r3, [pc, #156]	; (800d564 <fast_run+0x14c>)
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	b2da      	uxtb	r2, r3
 800d4ce:	4b25      	ldr	r3, [pc, #148]	; (800d564 <fast_run+0x14c>)
 800d4d0:	719a      	strb	r2, [r3, #6]
				Pos.NextY = Pos.Y;
 800d4d2:	4b24      	ldr	r3, [pc, #144]	; (800d564 <fast_run+0x14c>)
 800d4d4:	785a      	ldrb	r2, [r3, #1]
 800d4d6:	4b23      	ldr	r3, [pc, #140]	; (800d564 <fast_run+0x14c>)
 800d4d8:	71da      	strb	r2, [r3, #7]
				break;
 800d4da:	e015      	b.n	800d508 <fast_run+0xf0>

			case south:
				Pos.NextX = Pos.X;
 800d4dc:	4b21      	ldr	r3, [pc, #132]	; (800d564 <fast_run+0x14c>)
 800d4de:	781a      	ldrb	r2, [r3, #0]
 800d4e0:	4b20      	ldr	r3, [pc, #128]	; (800d564 <fast_run+0x14c>)
 800d4e2:	719a      	strb	r2, [r3, #6]
				Pos.NextY = Pos.Y - 1;	//南を向いた時はY座標を減らす
 800d4e4:	4b1f      	ldr	r3, [pc, #124]	; (800d564 <fast_run+0x14c>)
 800d4e6:	785b      	ldrb	r3, [r3, #1]
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	b2da      	uxtb	r2, r3
 800d4ec:	4b1d      	ldr	r3, [pc, #116]	; (800d564 <fast_run+0x14c>)
 800d4ee:	71da      	strb	r2, [r3, #7]
				break;
 800d4f0:	e00a      	b.n	800d508 <fast_run+0xf0>

			case west:
				Pos.NextX = Pos.X - 1;	//西を向いたときはX座標を減らす
 800d4f2:	4b1c      	ldr	r3, [pc, #112]	; (800d564 <fast_run+0x14c>)
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	3b01      	subs	r3, #1
 800d4f8:	b2da      	uxtb	r2, r3
 800d4fa:	4b1a      	ldr	r3, [pc, #104]	; (800d564 <fast_run+0x14c>)
 800d4fc:	719a      	strb	r2, [r3, #6]
				Pos.NextY = Pos.Y;
 800d4fe:	4b19      	ldr	r3, [pc, #100]	; (800d564 <fast_run+0x14c>)
 800d500:	785a      	ldrb	r2, [r3, #1]
 800d502:	4b18      	ldr	r3, [pc, #96]	; (800d564 <fast_run+0x14c>)
 800d504:	71da      	strb	r2, [r3, #7]
				break;
 800d506:	bf00      	nop

		}
		SelectAction(turn_mode);
 800d508:	7e3b      	ldrb	r3, [r7, #24]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7fd fa58 	bl	800a9c0 <SelectAction>
	 	Pos.X = Pos.NextX;
 800d510:	4b14      	ldr	r3, [pc, #80]	; (800d564 <fast_run+0x14c>)
 800d512:	799a      	ldrb	r2, [r3, #6]
 800d514:	4b13      	ldr	r3, [pc, #76]	; (800d564 <fast_run+0x14c>)
 800d516:	701a      	strb	r2, [r3, #0]
	    Pos.Y = Pos.NextY;
 800d518:	4b12      	ldr	r3, [pc, #72]	; (800d564 <fast_run+0x14c>)
 800d51a:	79da      	ldrb	r2, [r3, #7]
 800d51c:	4b11      	ldr	r3, [pc, #68]	; (800d564 <fast_run+0x14c>)
 800d51e:	705a      	strb	r2, [r3, #1]
		Pos.Car = Pos.NextCar;	//自分の向きを修正
 800d520:	4b10      	ldr	r3, [pc, #64]	; (800d564 <fast_run+0x14c>)
 800d522:	7a5a      	ldrb	r2, [r3, #9]
 800d524:	4b0f      	ldr	r3, [pc, #60]	; (800d564 <fast_run+0x14c>)
 800d526:	70da      	strb	r2, [r3, #3]
	while( !((x <= Pos.X && Pos.X <= x2) && (y <= Pos.Y && Pos.Y <= y2)) ){			//ゴールするまで繰り返す
 800d528:	4b0e      	ldr	r3, [pc, #56]	; (800d564 <fast_run+0x14c>)
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	461a      	mov	r2, r3
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	4293      	cmp	r3, r2
 800d532:	dca4      	bgt.n	800d47e <fast_run+0x66>
 800d534:	4b0b      	ldr	r3, [pc, #44]	; (800d564 <fast_run+0x14c>)
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	461a      	mov	r2, r3
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	4293      	cmp	r3, r2
 800d53e:	db9e      	blt.n	800d47e <fast_run+0x66>
 800d540:	4b08      	ldr	r3, [pc, #32]	; (800d564 <fast_run+0x14c>)
 800d542:	785b      	ldrb	r3, [r3, #1]
 800d544:	461a      	mov	r2, r3
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	4293      	cmp	r3, r2
 800d54a:	dc98      	bgt.n	800d47e <fast_run+0x66>
 800d54c:	4b05      	ldr	r3, [pc, #20]	; (800d564 <fast_run+0x14c>)
 800d54e:	785b      	ldrb	r3, [r3, #1]
 800d550:	461a      	mov	r2, r3
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	4293      	cmp	r3, r2
 800d556:	db92      	blt.n	800d47e <fast_run+0x66>
//		Pos.Car = Pos.NextCar;	//自分の向きを修正
//
//
	}
//	straight(SECTION*straight_count,FAST_ACCEL,FAST_SPEED,0.0);
}
 800d558:	bf00      	nop
 800d55a:	3710      	adds	r7, #16
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	20010598 	.word	0x20010598
 800d564:	20000000 	.word	0x20000000
 800d568:	20010168 	.word	0x20010168
 800d56c:	42770000 	.word	0x42770000

0800d570 <__io_putchar>:
	#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#define GETCHAR_PROTOTYPE int f getc(FILE* f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800d578:	1d39      	adds	r1, r7, #4
 800d57a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d57e:	2201      	movs	r2, #1
 800d580:	4803      	ldr	r0, [pc, #12]	; (800d590 <__io_putchar+0x20>)
 800d582:	f007 f901 	bl	8014788 <HAL_UART_Transmit>
	return ch;
 800d586:	687b      	ldr	r3, [r7, #4]
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	20010748 	.word	0x20010748

0800d594 <__io_getchar>:
int __io_getchar(void) {
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
HAL_StatusTypeDef Status = HAL_BUSY;
 800d59a:	2302      	movs	r3, #2
 800d59c:	71fb      	strb	r3, [r7, #7]
uint8_t Data;

while(Status != HAL_OK)
 800d59e:	e007      	b.n	800d5b0 <__io_getchar+0x1c>
{
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800d5a0:	1db9      	adds	r1, r7, #6
 800d5a2:	230a      	movs	r3, #10
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	4806      	ldr	r0, [pc, #24]	; (800d5c0 <__io_getchar+0x2c>)
 800d5a8:	f007 f987 	bl	80148ba <HAL_UART_Receive>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	71fb      	strb	r3, [r7, #7]
while(Status != HAL_OK)
 800d5b0:	79fb      	ldrb	r3, [r7, #7]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d1f4      	bne.n	800d5a0 <__io_getchar+0xc>
//{
//	return 0;
//	break;
//}
}
return(Data);
 800d5b6:	79bb      	ldrb	r3, [r7, #6]
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3708      	adds	r7, #8
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	20010748 	.word	0x20010748

0800d5c4 <TIM5Init>:

void TIM5Init(){
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	af00      	add	r7, sp, #0
	MX_TIM5_Init();
 800d5c8:	f000 fbc8 	bl	800dd5c <MX_TIM5_Init>
	printf("OKOK\r\n");
 800d5cc:	4802      	ldr	r0, [pc, #8]	; (800d5d8 <TIM5Init+0x14>)
 800d5ce:	f008 fd1b 	bl	8016008 <puts>
}
 800d5d2:	bf00      	nop
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	0801a3fc 	.word	0x0801a3fc

0800d5dc <HAL_GPIO_EXTI_Callback>:
int gpio_callback_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12)
 800d5e6:	88fb      	ldrh	r3, [r7, #6]
 800d5e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5ec:	d10b      	bne.n	800d606 <HAL_GPIO_EXTI_Callback+0x2a>
	{
	  gpio_callback_count++;
 800d5ee:	4b09      	ldr	r3, [pc, #36]	; (800d614 <HAL_GPIO_EXTI_Callback+0x38>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	4a07      	ldr	r2, [pc, #28]	; (800d614 <HAL_GPIO_EXTI_Callback+0x38>)
 800d5f6:	6013      	str	r3, [r2, #0]
	  //ChangeLED(gpio_callback_count);

	  if(gpio_callback_count > 1) gpio_callback_count=0;
 800d5f8:	4b06      	ldr	r3, [pc, #24]	; (800d614 <HAL_GPIO_EXTI_Callback+0x38>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	dd02      	ble.n	800d606 <HAL_GPIO_EXTI_Callback+0x2a>
 800d600:	4b04      	ldr	r3, [pc, #16]	; (800d614 <HAL_GPIO_EXTI_Callback+0x38>)
 800d602:	2200      	movs	r2, #0
 800d604:	601a      	str	r2, [r3, #0]
	}
}
 800d606:	bf00      	nop
 800d608:	370c      	adds	r7, #12
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop
 800d614:	2000fc34 	.word	0x2000fc34

0800d618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//濃茶
	printf("濃茶!\r\n");
 800d61e:	4859      	ldr	r0, [pc, #356]	; (800d784 <main+0x16c>)
 800d620:	f008 fcf2 	bl	8016008 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d624:	f002 fd9c 	bl	8010160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d628:	f000 f8bc 	bl	800d7a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d62c:	f000 fd06 	bl	800e03c <MX_GPIO_Init>
  MX_DMA_Init();
 800d630:	f000 fcdc 	bl	800dfec <MX_DMA_Init>
  MX_ADC1_Init();
 800d634:	f000 f920 	bl	800d878 <MX_ADC1_Init>
  MX_ADC2_Init();
 800d638:	f000 f98c 	bl	800d954 <MX_ADC2_Init>
  MX_TIM3_Init();
 800d63c:	f000 fae6 	bl	800dc0c <MX_TIM3_Init>
  MX_TIM2_Init();
 800d640:	f000 fa6e 	bl	800db20 <MX_TIM2_Init>
  MX_SPI3_Init();
 800d644:	f000 f9e6 	bl	800da14 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800d648:	f000 fca6 	bl	800df98 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800d64c:	f000 fb86 	bl	800dd5c <MX_TIM5_Init>
  MX_TIM4_Init();
 800d650:	f000 fb30 	bl	800dcb4 <MX_TIM4_Init>
  MX_TIM8_Init();
 800d654:	f000 fbf8 	bl	800de48 <MX_TIM8_Init>
  MX_TIM1_Init();
 800d658:	f000 fa12 	bl	800da80 <MX_TIM1_Init>
	  HAL_Delay(10000);

  }

#endif
  ADCStart();
 800d65c:	f001 fa1c 	bl	800ea98 <ADCStart>
  HAL_Delay(500);
 800d660:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d664:	f002 fdee 	bl	8010244 <HAL_Delay>

  BatteryCheck( (int)adc1[2] );
 800d668:	4b47      	ldr	r3, [pc, #284]	; (800d788 <main+0x170>)
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	4618      	mov	r0, r3
 800d66e:	f002 fc65 	bl	800ff3c <BatteryCheck>


  int8_t mode=0;
 800d672:	2300      	movs	r3, #0
 800d674:	71fb      	strb	r3, [r7, #7]
  printf("mode : %d\r\n", mode);
 800d676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d67a:	4619      	mov	r1, r3
 800d67c:	4843      	ldr	r0, [pc, #268]	; (800d78c <main+0x174>)
 800d67e:	f008 fc4f 	bl	8015f20 <iprintf>
  ModeSelect( 0, 7, &mode);
 800d682:	1dfb      	adds	r3, r7, #7
 800d684:	461a      	mov	r2, r3
 800d686:	2107      	movs	r1, #7
 800d688:	2000      	movs	r0, #0
 800d68a:	f002 fc8b 	bl	800ffa4 <ModeSelect>
  MX_TIM5_Init();
 800d68e:	f000 fb65 	bl	800dd5c <MX_TIM5_Init>
  Signal( mode );
 800d692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d696:	4618      	mov	r0, r3
 800d698:	f002 fc32 	bl	800ff00 <Signal>
  printf("Switch\r\n");
 800d69c:	483c      	ldr	r0, [pc, #240]	; (800d790 <main+0x178>)
 800d69e:	f008 fcb3 	bl	8016008 <puts>

  PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);//1200,0);//2430,0);//7.3,1215,0);//40kHzの//14.6, 2430,0);//(20khzのと?��?);//1200,0.0);//2430, 0.002);//21.96,2450,0.002);//14,6000,0.002);//11.1, 2430, 0.002);////D0.0036 //I2430くら 36.6*0.6=18+3.96
 800d6a2:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 800d794 <main+0x17c>
 800d6a6:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800d798 <main+0x180>
 800d6aa:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800d79c <main+0x184>
 800d6ae:	2004      	movs	r0, #4
 800d6b0:	f002 fa76 	bl	800fba0 <PIDSetGain>
  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);// 1200,0);//2430,0);//7.3,1215,0);//14.6, 2430,0);//1200,0.0);//, 2430,0);//17.5//2430, 0.002);//21.96,2450,0.002);//14,6000,0.002);//11.1, 2430, 0.002);//I150,
 800d6b4:	ed9f 1a37 	vldr	s2, [pc, #220]	; 800d794 <main+0x17c>
 800d6b8:	eddf 0a37 	vldr	s1, [pc, #220]	; 800d798 <main+0x180>
 800d6bc:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800d79c <main+0x184>
 800d6c0:	2005      	movs	r0, #5
 800d6c2:	f002 fa6d 	bl	800fba0 <PIDSetGain>
  //PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
  PIDSetGain(A_VELO_PID, 12,0,
 800d6c6:	ed9f 1a36 	vldr	s2, [pc, #216]	; 800d7a0 <main+0x188>
 800d6ca:	eddf 0a35 	vldr	s1, [pc, #212]	; 800d7a0 <main+0x188>
 800d6ce:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	f002 fa64 	bl	800fba0 <PIDSetGain>
		  0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
  PIDSetGain(F_WALL_PID, 6, 0, 0	);
 800d6d8:	ed9f 1a31 	vldr	s2, [pc, #196]	; 800d7a0 <main+0x188>
 800d6dc:	eddf 0a30 	vldr	s1, [pc, #192]	; 800d7a0 <main+0x188>
 800d6e0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800d6e4:	2008      	movs	r0, #8
 800d6e6:	f002 fa5b 	bl	800fba0 <PIDSetGain>
  PIDSetGain(D_WALL_PID, 6, 0, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800d6ea:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 800d7a0 <main+0x188>
 800d6ee:	eddf 0a2c 	vldr	s1, [pc, #176]	; 800d7a0 <main+0x188>
 800d6f2:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800d6f6:	2001      	movs	r0, #1
 800d6f8:	f002 fa52 	bl	800fba0 <PIDSetGain>
  PIDSetGain(L_WALL_PID, 12,0,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800d6fc:	ed9f 1a28 	vldr	s2, [pc, #160]	; 800d7a0 <main+0x188>
 800d700:	eddf 0a27 	vldr	s1, [pc, #156]	; 800d7a0 <main+0x188>
 800d704:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800d708:	2002      	movs	r0, #2
 800d70a:	f002 fa49 	bl	800fba0 <PIDSetGain>
  PIDSetGain(R_WALL_PID, 12,0,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800d70e:	ed9f 1a24 	vldr	s2, [pc, #144]	; 800d7a0 <main+0x188>
 800d712:	eddf 0a23 	vldr	s1, [pc, #140]	; 800d7a0 <main+0x188>
 800d716:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800d71a:	2003      	movs	r0, #3
 800d71c:	f002 fa40 	bl	800fba0 <PIDSetGain>

  while (1)
  {
	  switch( mode )
 800d720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d724:	2b07      	cmp	r3, #7
 800d726:	d82b      	bhi.n	800d780 <main+0x168>
 800d728:	a201      	add	r2, pc, #4	; (adr r2, 800d730 <main+0x118>)
 800d72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d72e:	bf00      	nop
 800d730:	0800d751 	.word	0x0800d751
 800d734:	0800d757 	.word	0x0800d757
 800d738:	0800d75d 	.word	0x0800d75d
 800d73c:	0800d763 	.word	0x0800d763
 800d740:	0800d769 	.word	0x0800d769
 800d744:	0800d76f 	.word	0x0800d76f
 800d748:	0800d775 	.word	0x0800d775
 800d74c:	0800d77b 	.word	0x0800d77b
	  {
	  case 0:

		  ParameterSetting();
 800d750:	f7fe fbee 	bl	800bf30 <ParameterSetting>
		//wall_flash_print();
		  break;
 800d754:	e015      	b.n	800d782 <main+0x16a>
	  case 1:
		  GainTestRWall();
 800d756:	f7fe fbf3 	bl	800bf40 <GainTestRWall>
		  break;
 800d75a:	e012      	b.n	800d782 <main+0x16a>
	  case 2:
		  GainTestDWall();
 800d75c:	f7fe fc2c 	bl	800bfb8 <GainTestDWall>
		  break;
 800d760:	e00f      	b.n	800d782 <main+0x16a>
	  case 3:
		  Debug();
 800d762:	f7fe fb59 	bl	800be18 <Debug>
		  break;
 800d766:	e00c      	b.n	800d782 <main+0x16a>
	  case 4:
		  //GainTestLWall();
		  FastestRun();
 800d768:	f7fe fd60 	bl	800c22c <FastestRun>
		  break;
 800d76c:	e009      	b.n	800d782 <main+0x16a>
	  case 5:
		  GainTestAVelo();
 800d76e:	f7fe fc8d 	bl	800c08c <GainTestAVelo>
		  break;
 800d772:	e006      	b.n	800d782 <main+0x16a>
	  case 6:
		  Explore();
 800d774:	f7fe fe7a 	bl	800c46c <Explore>
		  break;
 800d778:	e003      	b.n	800d782 <main+0x16a>
	  case 7:
		  WritingFree();
 800d77a:	f7fe fcc7 	bl	800c10c <WritingFree>
		  break;
 800d77e:	e000      	b.n	800d782 <main+0x16a>
	  default :
		  break;
 800d780:	bf00      	nop
	  switch( mode )
 800d782:	e7cd      	b.n	800d720 <main+0x108>
 800d784:	0801a404 	.word	0x0801a404
 800d788:	2000fcbc 	.word	0x2000fcbc
 800d78c:	0801a410 	.word	0x0801a410
 800d790:	0801a41c 	.word	0x0801a41c
 800d794:	3a83126f 	.word	0x3a83126f
 800d798:	452f0000 	.word	0x452f0000
 800d79c:	4169999a 	.word	0x4169999a
 800d7a0:	00000000 	.word	0x00000000

0800d7a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b094      	sub	sp, #80	; 0x50
 800d7a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d7aa:	f107 0320 	add.w	r3, r7, #32
 800d7ae:	2230      	movs	r2, #48	; 0x30
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f007 fd6d 	bl	8015292 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d7b8:	f107 030c 	add.w	r3, r7, #12
 800d7bc:	2200      	movs	r2, #0
 800d7be:	601a      	str	r2, [r3, #0]
 800d7c0:	605a      	str	r2, [r3, #4]
 800d7c2:	609a      	str	r2, [r3, #8]
 800d7c4:	60da      	str	r2, [r3, #12]
 800d7c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	60bb      	str	r3, [r7, #8]
 800d7cc:	4b28      	ldr	r3, [pc, #160]	; (800d870 <SystemClock_Config+0xcc>)
 800d7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7d0:	4a27      	ldr	r2, [pc, #156]	; (800d870 <SystemClock_Config+0xcc>)
 800d7d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7d6:	6413      	str	r3, [r2, #64]	; 0x40
 800d7d8:	4b25      	ldr	r3, [pc, #148]	; (800d870 <SystemClock_Config+0xcc>)
 800d7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7e0:	60bb      	str	r3, [r7, #8]
 800d7e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	607b      	str	r3, [r7, #4]
 800d7e8:	4b22      	ldr	r3, [pc, #136]	; (800d874 <SystemClock_Config+0xd0>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a21      	ldr	r2, [pc, #132]	; (800d874 <SystemClock_Config+0xd0>)
 800d7ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d7f2:	6013      	str	r3, [r2, #0]
 800d7f4:	4b1f      	ldr	r3, [pc, #124]	; (800d874 <SystemClock_Config+0xd0>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7fc:	607b      	str	r3, [r7, #4]
 800d7fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d800:	2301      	movs	r3, #1
 800d802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d808:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d80a:	2302      	movs	r3, #2
 800d80c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d80e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800d814:	2304      	movs	r3, #4
 800d816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800d818:	23a8      	movs	r3, #168	; 0xa8
 800d81a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d81c:	2302      	movs	r3, #2
 800d81e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800d820:	2304      	movs	r3, #4
 800d822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d824:	f107 0320 	add.w	r3, r7, #32
 800d828:	4618      	mov	r0, r3
 800d82a:	f004 fa11 	bl	8011c50 <HAL_RCC_OscConfig>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d001      	beq.n	800d838 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d834:	f000 fcd6 	bl	800e1e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d838:	230f      	movs	r3, #15
 800d83a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d83c:	2302      	movs	r3, #2
 800d83e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d840:	2300      	movs	r3, #0
 800d842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d844:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d848:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d84a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d84e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d850:	f107 030c 	add.w	r3, r7, #12
 800d854:	2105      	movs	r1, #5
 800d856:	4618      	mov	r0, r3
 800d858:	f004 fc6a 	bl	8012130 <HAL_RCC_ClockConfig>
 800d85c:	4603      	mov	r3, r0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d001      	beq.n	800d866 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800d862:	f000 fcbf 	bl	800e1e4 <Error_Handler>
  }
}
 800d866:	bf00      	nop
 800d868:	3750      	adds	r7, #80	; 0x50
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
 800d86e:	bf00      	nop
 800d870:	40023800 	.word	0x40023800
 800d874:	40007000 	.word	0x40007000

0800d878 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800d87e:	463b      	mov	r3, r7
 800d880:	2200      	movs	r2, #0
 800d882:	601a      	str	r2, [r3, #0]
 800d884:	605a      	str	r2, [r3, #4]
 800d886:	609a      	str	r2, [r3, #8]
 800d888:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800d88a:	4b2f      	ldr	r3, [pc, #188]	; (800d948 <MX_ADC1_Init+0xd0>)
 800d88c:	4a2f      	ldr	r2, [pc, #188]	; (800d94c <MX_ADC1_Init+0xd4>)
 800d88e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800d890:	4b2d      	ldr	r3, [pc, #180]	; (800d948 <MX_ADC1_Init+0xd0>)
 800d892:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d896:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d898:	4b2b      	ldr	r3, [pc, #172]	; (800d948 <MX_ADC1_Init+0xd0>)
 800d89a:	2200      	movs	r2, #0
 800d89c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800d89e:	4b2a      	ldr	r3, [pc, #168]	; (800d948 <MX_ADC1_Init+0xd0>)
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800d8a4:	4b28      	ldr	r3, [pc, #160]	; (800d948 <MX_ADC1_Init+0xd0>)
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d8aa:	4b27      	ldr	r3, [pc, #156]	; (800d948 <MX_ADC1_Init+0xd0>)
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d8b2:	4b25      	ldr	r3, [pc, #148]	; (800d948 <MX_ADC1_Init+0xd0>)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d8b8:	4b23      	ldr	r3, [pc, #140]	; (800d948 <MX_ADC1_Init+0xd0>)
 800d8ba:	4a25      	ldr	r2, [pc, #148]	; (800d950 <MX_ADC1_Init+0xd8>)
 800d8bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d8be:	4b22      	ldr	r3, [pc, #136]	; (800d948 <MX_ADC1_Init+0xd0>)
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800d8c4:	4b20      	ldr	r3, [pc, #128]	; (800d948 <MX_ADC1_Init+0xd0>)
 800d8c6:	2203      	movs	r2, #3
 800d8c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800d8ca:	4b1f      	ldr	r3, [pc, #124]	; (800d948 <MX_ADC1_Init+0xd0>)
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d8d2:	4b1d      	ldr	r3, [pc, #116]	; (800d948 <MX_ADC1_Init+0xd0>)
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d8d8:	481b      	ldr	r0, [pc, #108]	; (800d948 <MX_ADC1_Init+0xd0>)
 800d8da:	f002 fcd5 	bl	8010288 <HAL_ADC_Init>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d001      	beq.n	800d8e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800d8e4:	f000 fc7e 	bl	800e1e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800d8e8:	230a      	movs	r3, #10
 800d8ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800d8f0:	2303      	movs	r3, #3
 800d8f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d8f4:	463b      	mov	r3, r7
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	4813      	ldr	r0, [pc, #76]	; (800d948 <MX_ADC1_Init+0xd0>)
 800d8fa:	f002 fe63 	bl	80105c4 <HAL_ADC_ConfigChannel>
 800d8fe:	4603      	mov	r3, r0
 800d900:	2b00      	cmp	r3, #0
 800d902:	d001      	beq.n	800d908 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800d904:	f000 fc6e 	bl	800e1e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800d908:	230e      	movs	r3, #14
 800d90a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800d90c:	2302      	movs	r3, #2
 800d90e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d910:	463b      	mov	r3, r7
 800d912:	4619      	mov	r1, r3
 800d914:	480c      	ldr	r0, [pc, #48]	; (800d948 <MX_ADC1_Init+0xd0>)
 800d916:	f002 fe55 	bl	80105c4 <HAL_ADC_ConfigChannel>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d001      	beq.n	800d924 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800d920:	f000 fc60 	bl	800e1e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800d924:	2309      	movs	r3, #9
 800d926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800d928:	2303      	movs	r3, #3
 800d92a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d92c:	463b      	mov	r3, r7
 800d92e:	4619      	mov	r1, r3
 800d930:	4805      	ldr	r0, [pc, #20]	; (800d948 <MX_ADC1_Init+0xd0>)
 800d932:	f002 fe47 	bl	80105c4 <HAL_ADC_ConfigChannel>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d001      	beq.n	800d940 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800d93c:	f000 fc52 	bl	800e1e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800d940:	bf00      	nop
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	20010700 	.word	0x20010700
 800d94c:	40012000 	.word	0x40012000
 800d950:	0f000001 	.word	0x0f000001

0800d954 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800d95a:	463b      	mov	r3, r7
 800d95c:	2200      	movs	r2, #0
 800d95e:	601a      	str	r2, [r3, #0]
 800d960:	605a      	str	r2, [r3, #4]
 800d962:	609a      	str	r2, [r3, #8]
 800d964:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800d966:	4b28      	ldr	r3, [pc, #160]	; (800da08 <MX_ADC2_Init+0xb4>)
 800d968:	4a28      	ldr	r2, [pc, #160]	; (800da0c <MX_ADC2_Init+0xb8>)
 800d96a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800d96c:	4b26      	ldr	r3, [pc, #152]	; (800da08 <MX_ADC2_Init+0xb4>)
 800d96e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d972:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800d974:	4b24      	ldr	r3, [pc, #144]	; (800da08 <MX_ADC2_Init+0xb4>)
 800d976:	2200      	movs	r2, #0
 800d978:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800d97a:	4b23      	ldr	r3, [pc, #140]	; (800da08 <MX_ADC2_Init+0xb4>)
 800d97c:	2201      	movs	r2, #1
 800d97e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800d980:	4b21      	ldr	r3, [pc, #132]	; (800da08 <MX_ADC2_Init+0xb4>)
 800d982:	2201      	movs	r2, #1
 800d984:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800d986:	4b20      	ldr	r3, [pc, #128]	; (800da08 <MX_ADC2_Init+0xb4>)
 800d988:	2200      	movs	r2, #0
 800d98a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d98e:	4b1e      	ldr	r3, [pc, #120]	; (800da08 <MX_ADC2_Init+0xb4>)
 800d990:	2200      	movs	r2, #0
 800d992:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d994:	4b1c      	ldr	r3, [pc, #112]	; (800da08 <MX_ADC2_Init+0xb4>)
 800d996:	4a1e      	ldr	r2, [pc, #120]	; (800da10 <MX_ADC2_Init+0xbc>)
 800d998:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d99a:	4b1b      	ldr	r3, [pc, #108]	; (800da08 <MX_ADC2_Init+0xb4>)
 800d99c:	2200      	movs	r2, #0
 800d99e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800d9a0:	4b19      	ldr	r3, [pc, #100]	; (800da08 <MX_ADC2_Init+0xb4>)
 800d9a2:	2202      	movs	r2, #2
 800d9a4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800d9a6:	4b18      	ldr	r3, [pc, #96]	; (800da08 <MX_ADC2_Init+0xb4>)
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d9ae:	4b16      	ldr	r3, [pc, #88]	; (800da08 <MX_ADC2_Init+0xb4>)
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800d9b4:	4814      	ldr	r0, [pc, #80]	; (800da08 <MX_ADC2_Init+0xb4>)
 800d9b6:	f002 fc67 	bl	8010288 <HAL_ADC_Init>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d001      	beq.n	800d9c4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800d9c0:	f000 fc10 	bl	800e1e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800d9c4:	230b      	movs	r3, #11
 800d9c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800d9cc:	2303      	movs	r3, #3
 800d9ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800d9d0:	463b      	mov	r3, r7
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	480c      	ldr	r0, [pc, #48]	; (800da08 <MX_ADC2_Init+0xb4>)
 800d9d6:	f002 fdf5 	bl	80105c4 <HAL_ADC_ConfigChannel>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d001      	beq.n	800d9e4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800d9e0:	f000 fc00 	bl	800e1e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800d9e4:	230f      	movs	r3, #15
 800d9e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800d9e8:	2302      	movs	r3, #2
 800d9ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800d9ec:	463b      	mov	r3, r7
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	4805      	ldr	r0, [pc, #20]	; (800da08 <MX_ADC2_Init+0xb4>)
 800d9f2:	f002 fde7 	bl	80105c4 <HAL_ADC_ConfigChannel>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d001      	beq.n	800da00 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800d9fc:	f000 fbf2 	bl	800e1e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800da00:	bf00      	nop
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	20010620 	.word	0x20010620
 800da0c:	40012100 	.word	0x40012100
 800da10:	0f000001 	.word	0x0f000001

0800da14 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800da18:	4b17      	ldr	r3, [pc, #92]	; (800da78 <MX_SPI3_Init+0x64>)
 800da1a:	4a18      	ldr	r2, [pc, #96]	; (800da7c <MX_SPI3_Init+0x68>)
 800da1c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800da1e:	4b16      	ldr	r3, [pc, #88]	; (800da78 <MX_SPI3_Init+0x64>)
 800da20:	f44f 7282 	mov.w	r2, #260	; 0x104
 800da24:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800da26:	4b14      	ldr	r3, [pc, #80]	; (800da78 <MX_SPI3_Init+0x64>)
 800da28:	2200      	movs	r2, #0
 800da2a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800da2c:	4b12      	ldr	r3, [pc, #72]	; (800da78 <MX_SPI3_Init+0x64>)
 800da2e:	2200      	movs	r2, #0
 800da30:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800da32:	4b11      	ldr	r3, [pc, #68]	; (800da78 <MX_SPI3_Init+0x64>)
 800da34:	2202      	movs	r2, #2
 800da36:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800da38:	4b0f      	ldr	r3, [pc, #60]	; (800da78 <MX_SPI3_Init+0x64>)
 800da3a:	2201      	movs	r2, #1
 800da3c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800da3e:	4b0e      	ldr	r3, [pc, #56]	; (800da78 <MX_SPI3_Init+0x64>)
 800da40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da44:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800da46:	4b0c      	ldr	r3, [pc, #48]	; (800da78 <MX_SPI3_Init+0x64>)
 800da48:	2228      	movs	r2, #40	; 0x28
 800da4a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800da4c:	4b0a      	ldr	r3, [pc, #40]	; (800da78 <MX_SPI3_Init+0x64>)
 800da4e:	2200      	movs	r2, #0
 800da50:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800da52:	4b09      	ldr	r3, [pc, #36]	; (800da78 <MX_SPI3_Init+0x64>)
 800da54:	2200      	movs	r2, #0
 800da56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da58:	4b07      	ldr	r3, [pc, #28]	; (800da78 <MX_SPI3_Init+0x64>)
 800da5a:	2200      	movs	r2, #0
 800da5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800da5e:	4b06      	ldr	r3, [pc, #24]	; (800da78 <MX_SPI3_Init+0x64>)
 800da60:	220a      	movs	r2, #10
 800da62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800da64:	4804      	ldr	r0, [pc, #16]	; (800da78 <MX_SPI3_Init+0x64>)
 800da66:	f004 fd55 	bl	8012514 <HAL_SPI_Init>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d001      	beq.n	800da74 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800da70:	f000 fbb8 	bl	800e1e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800da74:	bf00      	nop
 800da76:	bd80      	pop	{r7, pc}
 800da78:	200106a8 	.word	0x200106a8
 800da7c:	40003c00 	.word	0x40003c00

0800da80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800da86:	f107 0308 	add.w	r3, r7, #8
 800da8a:	2200      	movs	r2, #0
 800da8c:	601a      	str	r2, [r3, #0]
 800da8e:	605a      	str	r2, [r3, #4]
 800da90:	609a      	str	r2, [r3, #8]
 800da92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800da94:	463b      	mov	r3, r7
 800da96:	2200      	movs	r2, #0
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800da9c:	4b1e      	ldr	r3, [pc, #120]	; (800db18 <MX_TIM1_Init+0x98>)
 800da9e:	4a1f      	ldr	r2, [pc, #124]	; (800db1c <MX_TIM1_Init+0x9c>)
 800daa0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800daa2:	4b1d      	ldr	r3, [pc, #116]	; (800db18 <MX_TIM1_Init+0x98>)
 800daa4:	22a7      	movs	r2, #167	; 0xa7
 800daa6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800daa8:	4b1b      	ldr	r3, [pc, #108]	; (800db18 <MX_TIM1_Init+0x98>)
 800daaa:	2200      	movs	r2, #0
 800daac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800daae:	4b1a      	ldr	r3, [pc, #104]	; (800db18 <MX_TIM1_Init+0x98>)
 800dab0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800dab4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dab6:	4b18      	ldr	r3, [pc, #96]	; (800db18 <MX_TIM1_Init+0x98>)
 800dab8:	2200      	movs	r2, #0
 800daba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800dabc:	4b16      	ldr	r3, [pc, #88]	; (800db18 <MX_TIM1_Init+0x98>)
 800dabe:	2200      	movs	r2, #0
 800dac0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dac2:	4b15      	ldr	r3, [pc, #84]	; (800db18 <MX_TIM1_Init+0x98>)
 800dac4:	2200      	movs	r2, #0
 800dac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800dac8:	4813      	ldr	r0, [pc, #76]	; (800db18 <MX_TIM1_Init+0x98>)
 800daca:	f005 fa77 	bl	8012fbc <HAL_TIM_Base_Init>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d001      	beq.n	800dad8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800dad4:	f000 fb86 	bl	800e1e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dadc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800dade:	f107 0308 	add.w	r3, r7, #8
 800dae2:	4619      	mov	r1, r3
 800dae4:	480c      	ldr	r0, [pc, #48]	; (800db18 <MX_TIM1_Init+0x98>)
 800dae6:	f006 f841 	bl	8013b6c <HAL_TIM_ConfigClockSource>
 800daea:	4603      	mov	r3, r0
 800daec:	2b00      	cmp	r3, #0
 800daee:	d001      	beq.n	800daf4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800daf0:	f000 fb78 	bl	800e1e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800daf4:	2300      	movs	r3, #0
 800daf6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800daf8:	2300      	movs	r3, #0
 800dafa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800dafc:	463b      	mov	r3, r7
 800dafe:	4619      	mov	r1, r3
 800db00:	4805      	ldr	r0, [pc, #20]	; (800db18 <MX_TIM1_Init+0x98>)
 800db02:	f006 fced 	bl	80144e0 <HAL_TIMEx_MasterConfigSynchronization>
 800db06:	4603      	mov	r3, r0
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d001      	beq.n	800db10 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800db0c:	f000 fb6a 	bl	800e1e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800db10:	bf00      	nop
 800db12:	3718      	adds	r7, #24
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	200107e8 	.word	0x200107e8
 800db1c:	40010000 	.word	0x40010000

0800db20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b08e      	sub	sp, #56	; 0x38
 800db24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800db26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db2a:	2200      	movs	r2, #0
 800db2c:	601a      	str	r2, [r3, #0]
 800db2e:	605a      	str	r2, [r3, #4]
 800db30:	609a      	str	r2, [r3, #8]
 800db32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800db34:	f107 0320 	add.w	r3, r7, #32
 800db38:	2200      	movs	r2, #0
 800db3a:	601a      	str	r2, [r3, #0]
 800db3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800db3e:	1d3b      	adds	r3, r7, #4
 800db40:	2200      	movs	r2, #0
 800db42:	601a      	str	r2, [r3, #0]
 800db44:	605a      	str	r2, [r3, #4]
 800db46:	609a      	str	r2, [r3, #8]
 800db48:	60da      	str	r2, [r3, #12]
 800db4a:	611a      	str	r2, [r3, #16]
 800db4c:	615a      	str	r2, [r3, #20]
 800db4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800db50:	4b2d      	ldr	r3, [pc, #180]	; (800dc08 <MX_TIM2_Init+0xe8>)
 800db52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800db56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800db58:	4b2b      	ldr	r3, [pc, #172]	; (800dc08 <MX_TIM2_Init+0xe8>)
 800db5a:	2200      	movs	r2, #0
 800db5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800db5e:	4b2a      	ldr	r3, [pc, #168]	; (800dc08 <MX_TIM2_Init+0xe8>)
 800db60:	2200      	movs	r2, #0
 800db62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800db64:	4b28      	ldr	r3, [pc, #160]	; (800dc08 <MX_TIM2_Init+0xe8>)
 800db66:	f241 0267 	movw	r2, #4199	; 0x1067
 800db6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800db6c:	4b26      	ldr	r3, [pc, #152]	; (800dc08 <MX_TIM2_Init+0xe8>)
 800db6e:	2200      	movs	r2, #0
 800db70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800db72:	4b25      	ldr	r3, [pc, #148]	; (800dc08 <MX_TIM2_Init+0xe8>)
 800db74:	2200      	movs	r2, #0
 800db76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800db78:	4823      	ldr	r0, [pc, #140]	; (800dc08 <MX_TIM2_Init+0xe8>)
 800db7a:	f005 fa1f 	bl	8012fbc <HAL_TIM_Base_Init>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d001      	beq.n	800db88 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800db84:	f000 fb2e 	bl	800e1e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800db88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800db8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db92:	4619      	mov	r1, r3
 800db94:	481c      	ldr	r0, [pc, #112]	; (800dc08 <MX_TIM2_Init+0xe8>)
 800db96:	f005 ffe9 	bl	8013b6c <HAL_TIM_ConfigClockSource>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d001      	beq.n	800dba4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800dba0:	f000 fb20 	bl	800e1e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800dba4:	4818      	ldr	r0, [pc, #96]	; (800dc08 <MX_TIM2_Init+0xe8>)
 800dba6:	f005 fbd7 	bl	8013358 <HAL_TIM_PWM_Init>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d001      	beq.n	800dbb4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800dbb0:	f000 fb18 	bl	800e1e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800dbbc:	f107 0320 	add.w	r3, r7, #32
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	4811      	ldr	r0, [pc, #68]	; (800dc08 <MX_TIM2_Init+0xe8>)
 800dbc4:	f006 fc8c 	bl	80144e0 <HAL_TIMEx_MasterConfigSynchronization>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d001      	beq.n	800dbd2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800dbce:	f000 fb09 	bl	800e1e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dbd2:	2360      	movs	r3, #96	; 0x60
 800dbd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800dbe2:	1d3b      	adds	r3, r7, #4
 800dbe4:	220c      	movs	r2, #12
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	4807      	ldr	r0, [pc, #28]	; (800dc08 <MX_TIM2_Init+0xe8>)
 800dbea:	f005 fef9 	bl	80139e0 <HAL_TIM_PWM_ConfigChannel>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d001      	beq.n	800dbf8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800dbf4:	f000 faf6 	bl	800e1e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800dbf8:	4803      	ldr	r0, [pc, #12]	; (800dc08 <MX_TIM2_Init+0xe8>)
 800dbfa:	f000 fd4d 	bl	800e698 <HAL_TIM_MspPostInit>

}
 800dbfe:	bf00      	nop
 800dc00:	3738      	adds	r7, #56	; 0x38
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	2000fc3c 	.word	0x2000fc3c

0800dc0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b08c      	sub	sp, #48	; 0x30
 800dc10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800dc12:	f107 030c 	add.w	r3, r7, #12
 800dc16:	2224      	movs	r2, #36	; 0x24
 800dc18:	2100      	movs	r1, #0
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f007 fb39 	bl	8015292 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc20:	1d3b      	adds	r3, r7, #4
 800dc22:	2200      	movs	r2, #0
 800dc24:	601a      	str	r2, [r3, #0]
 800dc26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dc28:	4b20      	ldr	r3, [pc, #128]	; (800dcac <MX_TIM3_Init+0xa0>)
 800dc2a:	4a21      	ldr	r2, [pc, #132]	; (800dcb0 <MX_TIM3_Init+0xa4>)
 800dc2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800dc2e:	4b1f      	ldr	r3, [pc, #124]	; (800dcac <MX_TIM3_Init+0xa0>)
 800dc30:	2200      	movs	r2, #0
 800dc32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc34:	4b1d      	ldr	r3, [pc, #116]	; (800dcac <MX_TIM3_Init+0xa0>)
 800dc36:	2200      	movs	r2, #0
 800dc38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800dc3a:	4b1c      	ldr	r3, [pc, #112]	; (800dcac <MX_TIM3_Init+0xa0>)
 800dc3c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800dc40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc42:	4b1a      	ldr	r3, [pc, #104]	; (800dcac <MX_TIM3_Init+0xa0>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc48:	4b18      	ldr	r3, [pc, #96]	; (800dcac <MX_TIM3_Init+0xa0>)
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800dc4e:	2303      	movs	r3, #3
 800dc50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800dc52:	2300      	movs	r3, #0
 800dc54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800dc56:	2301      	movs	r3, #1
 800dc58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800dc62:	2300      	movs	r3, #0
 800dc64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800dc66:	2301      	movs	r3, #1
 800dc68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800dc72:	f107 030c 	add.w	r3, r7, #12
 800dc76:	4619      	mov	r1, r3
 800dc78:	480c      	ldr	r0, [pc, #48]	; (800dcac <MX_TIM3_Init+0xa0>)
 800dc7a:	f005 fc39 	bl	80134f0 <HAL_TIM_Encoder_Init>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d001      	beq.n	800dc88 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800dc84:	f000 faae 	bl	800e1e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800dc90:	1d3b      	adds	r3, r7, #4
 800dc92:	4619      	mov	r1, r3
 800dc94:	4805      	ldr	r0, [pc, #20]	; (800dcac <MX_TIM3_Init+0xa0>)
 800dc96:	f006 fc23 	bl	80144e0 <HAL_TIMEx_MasterConfigSynchronization>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d001      	beq.n	800dca4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800dca0:	f000 faa0 	bl	800e1e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800dca4:	bf00      	nop
 800dca6:	3730      	adds	r7, #48	; 0x30
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	20010668 	.word	0x20010668
 800dcb0:	40000400 	.word	0x40000400

0800dcb4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b08c      	sub	sp, #48	; 0x30
 800dcb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800dcba:	f107 030c 	add.w	r3, r7, #12
 800dcbe:	2224      	movs	r2, #36	; 0x24
 800dcc0:	2100      	movs	r1, #0
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f007 fae5 	bl	8015292 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dcc8:	1d3b      	adds	r3, r7, #4
 800dcca:	2200      	movs	r2, #0
 800dccc:	601a      	str	r2, [r3, #0]
 800dcce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800dcd0:	4b20      	ldr	r3, [pc, #128]	; (800dd54 <MX_TIM4_Init+0xa0>)
 800dcd2:	4a21      	ldr	r2, [pc, #132]	; (800dd58 <MX_TIM4_Init+0xa4>)
 800dcd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800dcd6:	4b1f      	ldr	r3, [pc, #124]	; (800dd54 <MX_TIM4_Init+0xa0>)
 800dcd8:	2200      	movs	r2, #0
 800dcda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dcdc:	4b1d      	ldr	r3, [pc, #116]	; (800dd54 <MX_TIM4_Init+0xa0>)
 800dcde:	2200      	movs	r2, #0
 800dce0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800dce2:	4b1c      	ldr	r3, [pc, #112]	; (800dd54 <MX_TIM4_Init+0xa0>)
 800dce4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800dce8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dcea:	4b1a      	ldr	r3, [pc, #104]	; (800dd54 <MX_TIM4_Init+0xa0>)
 800dcec:	2200      	movs	r2, #0
 800dcee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dcf0:	4b18      	ldr	r3, [pc, #96]	; (800dd54 <MX_TIM4_Init+0xa0>)
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800dcf6:	2303      	movs	r3, #3
 800dcf8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800dd02:	2300      	movs	r3, #0
 800dd04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800dd06:	2300      	movs	r3, #0
 800dd08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800dd12:	2300      	movs	r3, #0
 800dd14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800dd16:	2300      	movs	r3, #0
 800dd18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800dd1a:	f107 030c 	add.w	r3, r7, #12
 800dd1e:	4619      	mov	r1, r3
 800dd20:	480c      	ldr	r0, [pc, #48]	; (800dd54 <MX_TIM4_Init+0xa0>)
 800dd22:	f005 fbe5 	bl	80134f0 <HAL_TIM_Encoder_Init>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d001      	beq.n	800dd30 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800dd2c:	f000 fa5a 	bl	800e1e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dd30:	2300      	movs	r3, #0
 800dd32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dd34:	2300      	movs	r3, #0
 800dd36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800dd38:	1d3b      	adds	r3, r7, #4
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	4805      	ldr	r0, [pc, #20]	; (800dd54 <MX_TIM4_Init+0xa0>)
 800dd3e:	f006 fbcf 	bl	80144e0 <HAL_TIMEx_MasterConfigSynchronization>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d001      	beq.n	800dd4c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800dd48:	f000 fa4c 	bl	800e1e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800dd4c:	bf00      	nop
 800dd4e:	3730      	adds	r7, #48	; 0x30
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	200105e0 	.word	0x200105e0
 800dd58:	40000800 	.word	0x40000800

0800dd5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b08e      	sub	sp, #56	; 0x38
 800dd60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dd62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd66:	2200      	movs	r2, #0
 800dd68:	601a      	str	r2, [r3, #0]
 800dd6a:	605a      	str	r2, [r3, #4]
 800dd6c:	609a      	str	r2, [r3, #8]
 800dd6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dd70:	f107 0320 	add.w	r3, r7, #32
 800dd74:	2200      	movs	r2, #0
 800dd76:	601a      	str	r2, [r3, #0]
 800dd78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dd7a:	1d3b      	adds	r3, r7, #4
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	601a      	str	r2, [r3, #0]
 800dd80:	605a      	str	r2, [r3, #4]
 800dd82:	609a      	str	r2, [r3, #8]
 800dd84:	60da      	str	r2, [r3, #12]
 800dd86:	611a      	str	r2, [r3, #16]
 800dd88:	615a      	str	r2, [r3, #20]
 800dd8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800dd8c:	4b2c      	ldr	r3, [pc, #176]	; (800de40 <MX_TIM5_Init+0xe4>)
 800dd8e:	4a2d      	ldr	r2, [pc, #180]	; (800de44 <MX_TIM5_Init+0xe8>)
 800dd90:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800dd92:	4b2b      	ldr	r3, [pc, #172]	; (800de40 <MX_TIM5_Init+0xe4>)
 800dd94:	2200      	movs	r2, #0
 800dd96:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd98:	4b29      	ldr	r3, [pc, #164]	; (800de40 <MX_TIM5_Init+0xe4>)
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800dd9e:	4b28      	ldr	r3, [pc, #160]	; (800de40 <MX_TIM5_Init+0xe4>)
 800dda0:	f241 0267 	movw	r2, #4199	; 0x1067
 800dda4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dda6:	4b26      	ldr	r3, [pc, #152]	; (800de40 <MX_TIM5_Init+0xe4>)
 800dda8:	2200      	movs	r2, #0
 800ddaa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ddac:	4b24      	ldr	r3, [pc, #144]	; (800de40 <MX_TIM5_Init+0xe4>)
 800ddae:	2200      	movs	r2, #0
 800ddb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800ddb2:	4823      	ldr	r0, [pc, #140]	; (800de40 <MX_TIM5_Init+0xe4>)
 800ddb4:	f005 f902 	bl	8012fbc <HAL_TIM_Base_Init>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d001      	beq.n	800ddc2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800ddbe:	f000 fa11 	bl	800e1e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ddc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddc6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800ddc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ddcc:	4619      	mov	r1, r3
 800ddce:	481c      	ldr	r0, [pc, #112]	; (800de40 <MX_TIM5_Init+0xe4>)
 800ddd0:	f005 fecc 	bl	8013b6c <HAL_TIM_ConfigClockSource>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d001      	beq.n	800ddde <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800ddda:	f000 fa03 	bl	800e1e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800ddde:	4818      	ldr	r0, [pc, #96]	; (800de40 <MX_TIM5_Init+0xe4>)
 800dde0:	f005 faba 	bl	8013358 <HAL_TIM_PWM_Init>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d001      	beq.n	800ddee <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800ddea:	f000 f9fb 	bl	800e1e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800ddf6:	f107 0320 	add.w	r3, r7, #32
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	4810      	ldr	r0, [pc, #64]	; (800de40 <MX_TIM5_Init+0xe4>)
 800ddfe:	f006 fb6f 	bl	80144e0 <HAL_TIMEx_MasterConfigSynchronization>
 800de02:	4603      	mov	r3, r0
 800de04:	2b00      	cmp	r3, #0
 800de06:	d001      	beq.n	800de0c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800de08:	f000 f9ec 	bl	800e1e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800de0c:	2360      	movs	r3, #96	; 0x60
 800de0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800de10:	2300      	movs	r3, #0
 800de12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800de14:	2300      	movs	r3, #0
 800de16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800de18:	2300      	movs	r3, #0
 800de1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800de1c:	1d3b      	adds	r3, r7, #4
 800de1e:	2204      	movs	r2, #4
 800de20:	4619      	mov	r1, r3
 800de22:	4807      	ldr	r0, [pc, #28]	; (800de40 <MX_TIM5_Init+0xe4>)
 800de24:	f005 fddc 	bl	80139e0 <HAL_TIM_PWM_ConfigChannel>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d001      	beq.n	800de32 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800de2e:	f000 f9d9 	bl	800e1e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800de32:	4803      	ldr	r0, [pc, #12]	; (800de40 <MX_TIM5_Init+0xe4>)
 800de34:	f000 fc30 	bl	800e698 <HAL_TIM_MspPostInit>

}
 800de38:	bf00      	nop
 800de3a:	3738      	adds	r7, #56	; 0x38
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	2000fc7c 	.word	0x2000fc7c
 800de44:	40000c00 	.word	0x40000c00

0800de48 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b096      	sub	sp, #88	; 0x58
 800de4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800de4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de52:	2200      	movs	r2, #0
 800de54:	601a      	str	r2, [r3, #0]
 800de56:	605a      	str	r2, [r3, #4]
 800de58:	609a      	str	r2, [r3, #8]
 800de5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800de5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800de60:	2200      	movs	r2, #0
 800de62:	601a      	str	r2, [r3, #0]
 800de64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800de66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de6a:	2200      	movs	r2, #0
 800de6c:	601a      	str	r2, [r3, #0]
 800de6e:	605a      	str	r2, [r3, #4]
 800de70:	609a      	str	r2, [r3, #8]
 800de72:	60da      	str	r2, [r3, #12]
 800de74:	611a      	str	r2, [r3, #16]
 800de76:	615a      	str	r2, [r3, #20]
 800de78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800de7a:	1d3b      	adds	r3, r7, #4
 800de7c:	2220      	movs	r2, #32
 800de7e:	2100      	movs	r1, #0
 800de80:	4618      	mov	r0, r3
 800de82:	f007 fa06 	bl	8015292 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800de86:	4b42      	ldr	r3, [pc, #264]	; (800df90 <MX_TIM8_Init+0x148>)
 800de88:	4a42      	ldr	r2, [pc, #264]	; (800df94 <MX_TIM8_Init+0x14c>)
 800de8a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800de8c:	4b40      	ldr	r3, [pc, #256]	; (800df90 <MX_TIM8_Init+0x148>)
 800de8e:	22a7      	movs	r2, #167	; 0xa7
 800de90:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de92:	4b3f      	ldr	r3, [pc, #252]	; (800df90 <MX_TIM8_Init+0x148>)
 800de94:	2200      	movs	r2, #0
 800de96:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800de98:	4b3d      	ldr	r3, [pc, #244]	; (800df90 <MX_TIM8_Init+0x148>)
 800de9a:	2231      	movs	r2, #49	; 0x31
 800de9c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800de9e:	4b3c      	ldr	r3, [pc, #240]	; (800df90 <MX_TIM8_Init+0x148>)
 800dea0:	2200      	movs	r2, #0
 800dea2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800dea4:	4b3a      	ldr	r3, [pc, #232]	; (800df90 <MX_TIM8_Init+0x148>)
 800dea6:	2200      	movs	r2, #0
 800dea8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800deaa:	4b39      	ldr	r3, [pc, #228]	; (800df90 <MX_TIM8_Init+0x148>)
 800deac:	2280      	movs	r2, #128	; 0x80
 800deae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800deb0:	4837      	ldr	r0, [pc, #220]	; (800df90 <MX_TIM8_Init+0x148>)
 800deb2:	f005 f883 	bl	8012fbc <HAL_TIM_Base_Init>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d001      	beq.n	800dec0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800debc:	f000 f992 	bl	800e1e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dec4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800dec6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800deca:	4619      	mov	r1, r3
 800decc:	4830      	ldr	r0, [pc, #192]	; (800df90 <MX_TIM8_Init+0x148>)
 800dece:	f005 fe4d 	bl	8013b6c <HAL_TIM_ConfigClockSource>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d001      	beq.n	800dedc <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800ded8:	f000 f984 	bl	800e1e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800dedc:	482c      	ldr	r0, [pc, #176]	; (800df90 <MX_TIM8_Init+0x148>)
 800dede:	f005 f8e7 	bl	80130b0 <HAL_TIM_OC_Init>
 800dee2:	4603      	mov	r3, r0
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d001      	beq.n	800deec <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800dee8:	f000 f97c 	bl	800e1e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800deec:	2300      	movs	r3, #0
 800deee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800def0:	2300      	movs	r3, #0
 800def2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800def4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800def8:	4619      	mov	r1, r3
 800defa:	4825      	ldr	r0, [pc, #148]	; (800df90 <MX_TIM8_Init+0x148>)
 800defc:	f006 faf0 	bl	80144e0 <HAL_TIMEx_MasterConfigSynchronization>
 800df00:	4603      	mov	r3, r0
 800df02:	2b00      	cmp	r3, #0
 800df04:	d001      	beq.n	800df0a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800df06:	f000 f96d 	bl	800e1e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800df0a:	2330      	movs	r3, #48	; 0x30
 800df0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800df0e:	2318      	movs	r3, #24
 800df10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800df12:	2300      	movs	r3, #0
 800df14:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800df16:	2300      	movs	r3, #0
 800df18:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800df1a:	2300      	movs	r3, #0
 800df1c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800df1e:	2300      	movs	r3, #0
 800df20:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800df22:	2300      	movs	r3, #0
 800df24:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800df26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df2a:	2200      	movs	r2, #0
 800df2c:	4619      	mov	r1, r3
 800df2e:	4818      	ldr	r0, [pc, #96]	; (800df90 <MX_TIM8_Init+0x148>)
 800df30:	f005 fcf6 	bl	8013920 <HAL_TIM_OC_ConfigChannel>
 800df34:	4603      	mov	r3, r0
 800df36:	2b00      	cmp	r3, #0
 800df38:	d001      	beq.n	800df3e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800df3a:	f000 f953 	bl	800e1e4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800df3e:	4b14      	ldr	r3, [pc, #80]	; (800df90 <MX_TIM8_Init+0x148>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	699a      	ldr	r2, [r3, #24]
 800df44:	4b12      	ldr	r3, [pc, #72]	; (800df90 <MX_TIM8_Init+0x148>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f042 0208 	orr.w	r2, r2, #8
 800df4c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800df4e:	2300      	movs	r3, #0
 800df50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800df52:	2300      	movs	r3, #0
 800df54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800df56:	2300      	movs	r3, #0
 800df58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800df5e:	2300      	movs	r3, #0
 800df60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800df62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800df66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800df68:	2300      	movs	r3, #0
 800df6a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800df6c:	1d3b      	adds	r3, r7, #4
 800df6e:	4619      	mov	r1, r3
 800df70:	4807      	ldr	r0, [pc, #28]	; (800df90 <MX_TIM8_Init+0x148>)
 800df72:	f006 fb31 	bl	80145d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800df76:	4603      	mov	r3, r0
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d001      	beq.n	800df80 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800df7c:	f000 f932 	bl	800e1e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800df80:	4803      	ldr	r0, [pc, #12]	; (800df90 <MX_TIM8_Init+0x148>)
 800df82:	f000 fb89 	bl	800e698 <HAL_TIM_MspPostInit>

}
 800df86:	bf00      	nop
 800df88:	3758      	adds	r7, #88	; 0x58
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}
 800df8e:	bf00      	nop
 800df90:	200105a0 	.word	0x200105a0
 800df94:	40010400 	.word	0x40010400

0800df98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800df9c:	4b11      	ldr	r3, [pc, #68]	; (800dfe4 <MX_USART1_UART_Init+0x4c>)
 800df9e:	4a12      	ldr	r2, [pc, #72]	; (800dfe8 <MX_USART1_UART_Init+0x50>)
 800dfa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800dfa2:	4b10      	ldr	r3, [pc, #64]	; (800dfe4 <MX_USART1_UART_Init+0x4c>)
 800dfa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800dfa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dfaa:	4b0e      	ldr	r3, [pc, #56]	; (800dfe4 <MX_USART1_UART_Init+0x4c>)
 800dfac:	2200      	movs	r2, #0
 800dfae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800dfb0:	4b0c      	ldr	r3, [pc, #48]	; (800dfe4 <MX_USART1_UART_Init+0x4c>)
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800dfb6:	4b0b      	ldr	r3, [pc, #44]	; (800dfe4 <MX_USART1_UART_Init+0x4c>)
 800dfb8:	2200      	movs	r2, #0
 800dfba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800dfbc:	4b09      	ldr	r3, [pc, #36]	; (800dfe4 <MX_USART1_UART_Init+0x4c>)
 800dfbe:	220c      	movs	r2, #12
 800dfc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dfc2:	4b08      	ldr	r3, [pc, #32]	; (800dfe4 <MX_USART1_UART_Init+0x4c>)
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800dfc8:	4b06      	ldr	r3, [pc, #24]	; (800dfe4 <MX_USART1_UART_Init+0x4c>)
 800dfca:	2200      	movs	r2, #0
 800dfcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800dfce:	4805      	ldr	r0, [pc, #20]	; (800dfe4 <MX_USART1_UART_Init+0x4c>)
 800dfd0:	f006 fb8d 	bl	80146ee <HAL_UART_Init>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d001      	beq.n	800dfde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800dfda:	f000 f903 	bl	800e1e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800dfde:	bf00      	nop
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	20010748 	.word	0x20010748
 800dfe8:	40011000 	.word	0x40011000

0800dfec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800dff2:	2300      	movs	r3, #0
 800dff4:	607b      	str	r3, [r7, #4]
 800dff6:	4b10      	ldr	r3, [pc, #64]	; (800e038 <MX_DMA_Init+0x4c>)
 800dff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dffa:	4a0f      	ldr	r2, [pc, #60]	; (800e038 <MX_DMA_Init+0x4c>)
 800dffc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e000:	6313      	str	r3, [r2, #48]	; 0x30
 800e002:	4b0d      	ldr	r3, [pc, #52]	; (800e038 <MX_DMA_Init+0x4c>)
 800e004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e00a:	607b      	str	r3, [r7, #4]
 800e00c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800e00e:	2200      	movs	r2, #0
 800e010:	2100      	movs	r1, #0
 800e012:	2038      	movs	r0, #56	; 0x38
 800e014:	f002 fe51 	bl	8010cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800e018:	2038      	movs	r0, #56	; 0x38
 800e01a:	f002 fe6a 	bl	8010cf2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800e01e:	2200      	movs	r2, #0
 800e020:	2100      	movs	r1, #0
 800e022:	203a      	movs	r0, #58	; 0x3a
 800e024:	f002 fe49 	bl	8010cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800e028:	203a      	movs	r0, #58	; 0x3a
 800e02a:	f002 fe62 	bl	8010cf2 <HAL_NVIC_EnableIRQ>

}
 800e02e:	bf00      	nop
 800e030:	3708      	adds	r7, #8
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
 800e036:	bf00      	nop
 800e038:	40023800 	.word	0x40023800

0800e03c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b08a      	sub	sp, #40	; 0x28
 800e040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e042:	f107 0314 	add.w	r3, r7, #20
 800e046:	2200      	movs	r2, #0
 800e048:	601a      	str	r2, [r3, #0]
 800e04a:	605a      	str	r2, [r3, #4]
 800e04c:	609a      	str	r2, [r3, #8]
 800e04e:	60da      	str	r2, [r3, #12]
 800e050:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e052:	2300      	movs	r3, #0
 800e054:	613b      	str	r3, [r7, #16]
 800e056:	4b5d      	ldr	r3, [pc, #372]	; (800e1cc <MX_GPIO_Init+0x190>)
 800e058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e05a:	4a5c      	ldr	r2, [pc, #368]	; (800e1cc <MX_GPIO_Init+0x190>)
 800e05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e060:	6313      	str	r3, [r2, #48]	; 0x30
 800e062:	4b5a      	ldr	r3, [pc, #360]	; (800e1cc <MX_GPIO_Init+0x190>)
 800e064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e06a:	613b      	str	r3, [r7, #16]
 800e06c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e06e:	2300      	movs	r3, #0
 800e070:	60fb      	str	r3, [r7, #12]
 800e072:	4b56      	ldr	r3, [pc, #344]	; (800e1cc <MX_GPIO_Init+0x190>)
 800e074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e076:	4a55      	ldr	r2, [pc, #340]	; (800e1cc <MX_GPIO_Init+0x190>)
 800e078:	f043 0304 	orr.w	r3, r3, #4
 800e07c:	6313      	str	r3, [r2, #48]	; 0x30
 800e07e:	4b53      	ldr	r3, [pc, #332]	; (800e1cc <MX_GPIO_Init+0x190>)
 800e080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e082:	f003 0304 	and.w	r3, r3, #4
 800e086:	60fb      	str	r3, [r7, #12]
 800e088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e08a:	2300      	movs	r3, #0
 800e08c:	60bb      	str	r3, [r7, #8]
 800e08e:	4b4f      	ldr	r3, [pc, #316]	; (800e1cc <MX_GPIO_Init+0x190>)
 800e090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e092:	4a4e      	ldr	r2, [pc, #312]	; (800e1cc <MX_GPIO_Init+0x190>)
 800e094:	f043 0301 	orr.w	r3, r3, #1
 800e098:	6313      	str	r3, [r2, #48]	; 0x30
 800e09a:	4b4c      	ldr	r3, [pc, #304]	; (800e1cc <MX_GPIO_Init+0x190>)
 800e09c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e09e:	f003 0301 	and.w	r3, r3, #1
 800e0a2:	60bb      	str	r3, [r7, #8]
 800e0a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	607b      	str	r3, [r7, #4]
 800e0aa:	4b48      	ldr	r3, [pc, #288]	; (800e1cc <MX_GPIO_Init+0x190>)
 800e0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ae:	4a47      	ldr	r2, [pc, #284]	; (800e1cc <MX_GPIO_Init+0x190>)
 800e0b0:	f043 0302 	orr.w	r3, r3, #2
 800e0b4:	6313      	str	r3, [r2, #48]	; 0x30
 800e0b6:	4b45      	ldr	r3, [pc, #276]	; (800e1cc <MX_GPIO_Init+0x190>)
 800e0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ba:	f003 0302 	and.w	r3, r3, #2
 800e0be:	607b      	str	r3, [r7, #4]
 800e0c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	603b      	str	r3, [r7, #0]
 800e0c6:	4b41      	ldr	r3, [pc, #260]	; (800e1cc <MX_GPIO_Init+0x190>)
 800e0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ca:	4a40      	ldr	r2, [pc, #256]	; (800e1cc <MX_GPIO_Init+0x190>)
 800e0cc:	f043 0308 	orr.w	r3, r3, #8
 800e0d0:	6313      	str	r3, [r2, #48]	; 0x30
 800e0d2:	4b3e      	ldr	r3, [pc, #248]	; (800e1cc <MX_GPIO_Init+0x190>)
 800e0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0d6:	f003 0308 	and.w	r3, r3, #8
 800e0da:	603b      	str	r3, [r7, #0]
 800e0dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f44f 7141 	mov.w	r1, #772	; 0x304
 800e0e4:	483a      	ldr	r0, [pc, #232]	; (800e1d0 <MX_GPIO_Init+0x194>)
 800e0e6:	f003 fd81 	bl	8011bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	2105      	movs	r1, #5
 800e0ee:	4839      	ldr	r0, [pc, #228]	; (800e1d4 <MX_GPIO_Init+0x198>)
 800e0f0:	f003 fd7c 	bl	8011bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	2104      	movs	r1, #4
 800e0f8:	4837      	ldr	r0, [pc, #220]	; (800e1d8 <MX_GPIO_Init+0x19c>)
 800e0fa:	f003 fd77 	bl	8011bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e0fe:	2200      	movs	r2, #0
 800e100:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e104:	4835      	ldr	r0, [pc, #212]	; (800e1dc <MX_GPIO_Init+0x1a0>)
 800e106:	f003 fd71 	bl	8011bec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800e10a:	f44f 7341 	mov.w	r3, #772	; 0x304
 800e10e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e110:	2301      	movs	r3, #1
 800e112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e114:	2300      	movs	r3, #0
 800e116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e118:	2300      	movs	r3, #0
 800e11a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e11c:	f107 0314 	add.w	r3, r7, #20
 800e120:	4619      	mov	r1, r3
 800e122:	482b      	ldr	r0, [pc, #172]	; (800e1d0 <MX_GPIO_Init+0x194>)
 800e124:	f003 fbc8 	bl	80118b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800e128:	2305      	movs	r3, #5
 800e12a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e12c:	2301      	movs	r3, #1
 800e12e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e130:	2300      	movs	r3, #0
 800e132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e134:	2300      	movs	r3, #0
 800e136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e138:	f107 0314 	add.w	r3, r7, #20
 800e13c:	4619      	mov	r1, r3
 800e13e:	4825      	ldr	r0, [pc, #148]	; (800e1d4 <MX_GPIO_Init+0x198>)
 800e140:	f003 fbba 	bl	80118b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800e144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e14a:	4b25      	ldr	r3, [pc, #148]	; (800e1e0 <MX_GPIO_Init+0x1a4>)
 800e14c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e14e:	2300      	movs	r3, #0
 800e150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e152:	f107 0314 	add.w	r3, r7, #20
 800e156:	4619      	mov	r1, r3
 800e158:	4820      	ldr	r0, [pc, #128]	; (800e1dc <MX_GPIO_Init+0x1a0>)
 800e15a:	f003 fbad 	bl	80118b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800e15e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e164:	2300      	movs	r3, #0
 800e166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e168:	2300      	movs	r3, #0
 800e16a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e16c:	f107 0314 	add.w	r3, r7, #20
 800e170:	4619      	mov	r1, r3
 800e172:	4818      	ldr	r0, [pc, #96]	; (800e1d4 <MX_GPIO_Init+0x198>)
 800e174:	f003 fba0 	bl	80118b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e178:	2304      	movs	r3, #4
 800e17a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e17c:	2301      	movs	r3, #1
 800e17e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e180:	2300      	movs	r3, #0
 800e182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e184:	2300      	movs	r3, #0
 800e186:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e188:	f107 0314 	add.w	r3, r7, #20
 800e18c:	4619      	mov	r1, r3
 800e18e:	4812      	ldr	r0, [pc, #72]	; (800e1d8 <MX_GPIO_Init+0x19c>)
 800e190:	f003 fb92 	bl	80118b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e194:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e19a:	2301      	movs	r3, #1
 800e19c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e1a6:	f107 0314 	add.w	r3, r7, #20
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	480b      	ldr	r0, [pc, #44]	; (800e1dc <MX_GPIO_Init+0x1a0>)
 800e1ae:	f003 fb83 	bl	80118b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	2100      	movs	r1, #0
 800e1b6:	2028      	movs	r0, #40	; 0x28
 800e1b8:	f002 fd7f 	bl	8010cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800e1bc:	2028      	movs	r0, #40	; 0x28
 800e1be:	f002 fd98 	bl	8010cf2 <HAL_NVIC_EnableIRQ>

}
 800e1c2:	bf00      	nop
 800e1c4:	3728      	adds	r7, #40	; 0x28
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	40023800 	.word	0x40023800
 800e1d0:	40020800 	.word	0x40020800
 800e1d4:	40020000 	.word	0x40020000
 800e1d8:	40020c00 	.word	0x40020c00
 800e1dc:	40020400 	.word	0x40020400
 800e1e0:	10110000 	.word	0x10110000

0800e1e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800e1e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800e1ea:	e7fe      	b.n	800e1ea <Error_Handler+0x6>

0800e1ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	607b      	str	r3, [r7, #4]
 800e1f6:	4b10      	ldr	r3, [pc, #64]	; (800e238 <HAL_MspInit+0x4c>)
 800e1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1fa:	4a0f      	ldr	r2, [pc, #60]	; (800e238 <HAL_MspInit+0x4c>)
 800e1fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e200:	6453      	str	r3, [r2, #68]	; 0x44
 800e202:	4b0d      	ldr	r3, [pc, #52]	; (800e238 <HAL_MspInit+0x4c>)
 800e204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e20a:	607b      	str	r3, [r7, #4]
 800e20c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e20e:	2300      	movs	r3, #0
 800e210:	603b      	str	r3, [r7, #0]
 800e212:	4b09      	ldr	r3, [pc, #36]	; (800e238 <HAL_MspInit+0x4c>)
 800e214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e216:	4a08      	ldr	r2, [pc, #32]	; (800e238 <HAL_MspInit+0x4c>)
 800e218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e21c:	6413      	str	r3, [r2, #64]	; 0x40
 800e21e:	4b06      	ldr	r3, [pc, #24]	; (800e238 <HAL_MspInit+0x4c>)
 800e220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e226:	603b      	str	r3, [r7, #0]
 800e228:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e22a:	bf00      	nop
 800e22c:	370c      	adds	r7, #12
 800e22e:	46bd      	mov	sp, r7
 800e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e234:	4770      	bx	lr
 800e236:	bf00      	nop
 800e238:	40023800 	.word	0x40023800

0800e23c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b08c      	sub	sp, #48	; 0x30
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e244:	f107 031c 	add.w	r3, r7, #28
 800e248:	2200      	movs	r2, #0
 800e24a:	601a      	str	r2, [r3, #0]
 800e24c:	605a      	str	r2, [r3, #4]
 800e24e:	609a      	str	r2, [r3, #8]
 800e250:	60da      	str	r2, [r3, #12]
 800e252:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4a6b      	ldr	r2, [pc, #428]	; (800e408 <HAL_ADC_MspInit+0x1cc>)
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d172      	bne.n	800e344 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e25e:	2300      	movs	r3, #0
 800e260:	61bb      	str	r3, [r7, #24]
 800e262:	4b6a      	ldr	r3, [pc, #424]	; (800e40c <HAL_ADC_MspInit+0x1d0>)
 800e264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e266:	4a69      	ldr	r2, [pc, #420]	; (800e40c <HAL_ADC_MspInit+0x1d0>)
 800e268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e26c:	6453      	str	r3, [r2, #68]	; 0x44
 800e26e:	4b67      	ldr	r3, [pc, #412]	; (800e40c <HAL_ADC_MspInit+0x1d0>)
 800e270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e276:	61bb      	str	r3, [r7, #24]
 800e278:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e27a:	2300      	movs	r3, #0
 800e27c:	617b      	str	r3, [r7, #20]
 800e27e:	4b63      	ldr	r3, [pc, #396]	; (800e40c <HAL_ADC_MspInit+0x1d0>)
 800e280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e282:	4a62      	ldr	r2, [pc, #392]	; (800e40c <HAL_ADC_MspInit+0x1d0>)
 800e284:	f043 0304 	orr.w	r3, r3, #4
 800e288:	6313      	str	r3, [r2, #48]	; 0x30
 800e28a:	4b60      	ldr	r3, [pc, #384]	; (800e40c <HAL_ADC_MspInit+0x1d0>)
 800e28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e28e:	f003 0304 	and.w	r3, r3, #4
 800e292:	617b      	str	r3, [r7, #20]
 800e294:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e296:	2300      	movs	r3, #0
 800e298:	613b      	str	r3, [r7, #16]
 800e29a:	4b5c      	ldr	r3, [pc, #368]	; (800e40c <HAL_ADC_MspInit+0x1d0>)
 800e29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e29e:	4a5b      	ldr	r2, [pc, #364]	; (800e40c <HAL_ADC_MspInit+0x1d0>)
 800e2a0:	f043 0302 	orr.w	r3, r3, #2
 800e2a4:	6313      	str	r3, [r2, #48]	; 0x30
 800e2a6:	4b59      	ldr	r3, [pc, #356]	; (800e40c <HAL_ADC_MspInit+0x1d0>)
 800e2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2aa:	f003 0302 	and.w	r3, r3, #2
 800e2ae:	613b      	str	r3, [r7, #16]
 800e2b0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800e2b2:	2311      	movs	r3, #17
 800e2b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e2b6:	2303      	movs	r3, #3
 800e2b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e2be:	f107 031c 	add.w	r3, r7, #28
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	4852      	ldr	r0, [pc, #328]	; (800e410 <HAL_ADC_MspInit+0x1d4>)
 800e2c6:	f003 faf7 	bl	80118b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e2ca:	2302      	movs	r3, #2
 800e2cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e2ce:	2303      	movs	r3, #3
 800e2d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e2d6:	f107 031c 	add.w	r3, r7, #28
 800e2da:	4619      	mov	r1, r3
 800e2dc:	484d      	ldr	r0, [pc, #308]	; (800e414 <HAL_ADC_MspInit+0x1d8>)
 800e2de:	f003 faeb 	bl	80118b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800e2e2:	4b4d      	ldr	r3, [pc, #308]	; (800e418 <HAL_ADC_MspInit+0x1dc>)
 800e2e4:	4a4d      	ldr	r2, [pc, #308]	; (800e41c <HAL_ADC_MspInit+0x1e0>)
 800e2e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800e2e8:	4b4b      	ldr	r3, [pc, #300]	; (800e418 <HAL_ADC_MspInit+0x1dc>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e2ee:	4b4a      	ldr	r3, [pc, #296]	; (800e418 <HAL_ADC_MspInit+0x1dc>)
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e2f4:	4b48      	ldr	r3, [pc, #288]	; (800e418 <HAL_ADC_MspInit+0x1dc>)
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800e2fa:	4b47      	ldr	r3, [pc, #284]	; (800e418 <HAL_ADC_MspInit+0x1dc>)
 800e2fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e300:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e302:	4b45      	ldr	r3, [pc, #276]	; (800e418 <HAL_ADC_MspInit+0x1dc>)
 800e304:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e308:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e30a:	4b43      	ldr	r3, [pc, #268]	; (800e418 <HAL_ADC_MspInit+0x1dc>)
 800e30c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e310:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800e312:	4b41      	ldr	r3, [pc, #260]	; (800e418 <HAL_ADC_MspInit+0x1dc>)
 800e314:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e318:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800e31a:	4b3f      	ldr	r3, [pc, #252]	; (800e418 <HAL_ADC_MspInit+0x1dc>)
 800e31c:	2200      	movs	r2, #0
 800e31e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e320:	4b3d      	ldr	r3, [pc, #244]	; (800e418 <HAL_ADC_MspInit+0x1dc>)
 800e322:	2200      	movs	r2, #0
 800e324:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800e326:	483c      	ldr	r0, [pc, #240]	; (800e418 <HAL_ADC_MspInit+0x1dc>)
 800e328:	f002 fcfe 	bl	8010d28 <HAL_DMA_Init>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d001      	beq.n	800e336 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800e332:	f7ff ff57 	bl	800e1e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	4a37      	ldr	r2, [pc, #220]	; (800e418 <HAL_ADC_MspInit+0x1dc>)
 800e33a:	639a      	str	r2, [r3, #56]	; 0x38
 800e33c:	4a36      	ldr	r2, [pc, #216]	; (800e418 <HAL_ADC_MspInit+0x1dc>)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800e342:	e05d      	b.n	800e400 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4a35      	ldr	r2, [pc, #212]	; (800e420 <HAL_ADC_MspInit+0x1e4>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d158      	bne.n	800e400 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800e34e:	2300      	movs	r3, #0
 800e350:	60fb      	str	r3, [r7, #12]
 800e352:	4b2e      	ldr	r3, [pc, #184]	; (800e40c <HAL_ADC_MspInit+0x1d0>)
 800e354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e356:	4a2d      	ldr	r2, [pc, #180]	; (800e40c <HAL_ADC_MspInit+0x1d0>)
 800e358:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e35c:	6453      	str	r3, [r2, #68]	; 0x44
 800e35e:	4b2b      	ldr	r3, [pc, #172]	; (800e40c <HAL_ADC_MspInit+0x1d0>)
 800e360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e366:	60fb      	str	r3, [r7, #12]
 800e368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e36a:	2300      	movs	r3, #0
 800e36c:	60bb      	str	r3, [r7, #8]
 800e36e:	4b27      	ldr	r3, [pc, #156]	; (800e40c <HAL_ADC_MspInit+0x1d0>)
 800e370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e372:	4a26      	ldr	r2, [pc, #152]	; (800e40c <HAL_ADC_MspInit+0x1d0>)
 800e374:	f043 0304 	orr.w	r3, r3, #4
 800e378:	6313      	str	r3, [r2, #48]	; 0x30
 800e37a:	4b24      	ldr	r3, [pc, #144]	; (800e40c <HAL_ADC_MspInit+0x1d0>)
 800e37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e37e:	f003 0304 	and.w	r3, r3, #4
 800e382:	60bb      	str	r3, [r7, #8]
 800e384:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800e386:	2322      	movs	r3, #34	; 0x22
 800e388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e38a:	2303      	movs	r3, #3
 800e38c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e38e:	2300      	movs	r3, #0
 800e390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e392:	f107 031c 	add.w	r3, r7, #28
 800e396:	4619      	mov	r1, r3
 800e398:	481d      	ldr	r0, [pc, #116]	; (800e410 <HAL_ADC_MspInit+0x1d4>)
 800e39a:	f003 fa8d 	bl	80118b8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800e39e:	4b21      	ldr	r3, [pc, #132]	; (800e424 <HAL_ADC_MspInit+0x1e8>)
 800e3a0:	4a21      	ldr	r2, [pc, #132]	; (800e428 <HAL_ADC_MspInit+0x1ec>)
 800e3a2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800e3a4:	4b1f      	ldr	r3, [pc, #124]	; (800e424 <HAL_ADC_MspInit+0x1e8>)
 800e3a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e3aa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e3ac:	4b1d      	ldr	r3, [pc, #116]	; (800e424 <HAL_ADC_MspInit+0x1e8>)
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e3b2:	4b1c      	ldr	r3, [pc, #112]	; (800e424 <HAL_ADC_MspInit+0x1e8>)
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800e3b8:	4b1a      	ldr	r3, [pc, #104]	; (800e424 <HAL_ADC_MspInit+0x1e8>)
 800e3ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e3be:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e3c0:	4b18      	ldr	r3, [pc, #96]	; (800e424 <HAL_ADC_MspInit+0x1e8>)
 800e3c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e3c6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e3c8:	4b16      	ldr	r3, [pc, #88]	; (800e424 <HAL_ADC_MspInit+0x1e8>)
 800e3ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e3ce:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800e3d0:	4b14      	ldr	r3, [pc, #80]	; (800e424 <HAL_ADC_MspInit+0x1e8>)
 800e3d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e3d6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800e3d8:	4b12      	ldr	r3, [pc, #72]	; (800e424 <HAL_ADC_MspInit+0x1e8>)
 800e3da:	2200      	movs	r2, #0
 800e3dc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e3de:	4b11      	ldr	r3, [pc, #68]	; (800e424 <HAL_ADC_MspInit+0x1e8>)
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800e3e4:	480f      	ldr	r0, [pc, #60]	; (800e424 <HAL_ADC_MspInit+0x1e8>)
 800e3e6:	f002 fc9f 	bl	8010d28 <HAL_DMA_Init>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d001      	beq.n	800e3f4 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800e3f0:	f7ff fef8 	bl	800e1e4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	4a0b      	ldr	r2, [pc, #44]	; (800e424 <HAL_ADC_MspInit+0x1e8>)
 800e3f8:	639a      	str	r2, [r3, #56]	; 0x38
 800e3fa:	4a0a      	ldr	r2, [pc, #40]	; (800e424 <HAL_ADC_MspInit+0x1e8>)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6393      	str	r3, [r2, #56]	; 0x38
}
 800e400:	bf00      	nop
 800e402:	3730      	adds	r7, #48	; 0x30
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	40012000 	.word	0x40012000
 800e40c:	40023800 	.word	0x40023800
 800e410:	40020800 	.word	0x40020800
 800e414:	40020400 	.word	0x40020400
 800e418:	20010788 	.word	0x20010788
 800e41c:	40026410 	.word	0x40026410
 800e420:	40012100 	.word	0x40012100
 800e424:	20010828 	.word	0x20010828
 800e428:	40026440 	.word	0x40026440

0800e42c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b08a      	sub	sp, #40	; 0x28
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e434:	f107 0314 	add.w	r3, r7, #20
 800e438:	2200      	movs	r2, #0
 800e43a:	601a      	str	r2, [r3, #0]
 800e43c:	605a      	str	r2, [r3, #4]
 800e43e:	609a      	str	r2, [r3, #8]
 800e440:	60da      	str	r2, [r3, #12]
 800e442:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	4a19      	ldr	r2, [pc, #100]	; (800e4b0 <HAL_SPI_MspInit+0x84>)
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d12c      	bne.n	800e4a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800e44e:	2300      	movs	r3, #0
 800e450:	613b      	str	r3, [r7, #16]
 800e452:	4b18      	ldr	r3, [pc, #96]	; (800e4b4 <HAL_SPI_MspInit+0x88>)
 800e454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e456:	4a17      	ldr	r2, [pc, #92]	; (800e4b4 <HAL_SPI_MspInit+0x88>)
 800e458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e45c:	6413      	str	r3, [r2, #64]	; 0x40
 800e45e:	4b15      	ldr	r3, [pc, #84]	; (800e4b4 <HAL_SPI_MspInit+0x88>)
 800e460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e466:	613b      	str	r3, [r7, #16]
 800e468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e46a:	2300      	movs	r3, #0
 800e46c:	60fb      	str	r3, [r7, #12]
 800e46e:	4b11      	ldr	r3, [pc, #68]	; (800e4b4 <HAL_SPI_MspInit+0x88>)
 800e470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e472:	4a10      	ldr	r2, [pc, #64]	; (800e4b4 <HAL_SPI_MspInit+0x88>)
 800e474:	f043 0304 	orr.w	r3, r3, #4
 800e478:	6313      	str	r3, [r2, #48]	; 0x30
 800e47a:	4b0e      	ldr	r3, [pc, #56]	; (800e4b4 <HAL_SPI_MspInit+0x88>)
 800e47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e47e:	f003 0304 	and.w	r3, r3, #4
 800e482:	60fb      	str	r3, [r7, #12]
 800e484:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800e486:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e48a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e48c:	2302      	movs	r3, #2
 800e48e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e490:	2300      	movs	r3, #0
 800e492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e494:	2303      	movs	r3, #3
 800e496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800e498:	2306      	movs	r3, #6
 800e49a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e49c:	f107 0314 	add.w	r3, r7, #20
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	4805      	ldr	r0, [pc, #20]	; (800e4b8 <HAL_SPI_MspInit+0x8c>)
 800e4a4:	f003 fa08 	bl	80118b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800e4a8:	bf00      	nop
 800e4aa:	3728      	adds	r7, #40	; 0x28
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	40003c00 	.word	0x40003c00
 800e4b4:	40023800 	.word	0x40023800
 800e4b8:	40020800 	.word	0x40020800

0800e4bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b086      	sub	sp, #24
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	4a30      	ldr	r2, [pc, #192]	; (800e58c <HAL_TIM_Base_MspInit+0xd0>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d116      	bne.n	800e4fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	617b      	str	r3, [r7, #20]
 800e4d2:	4b2f      	ldr	r3, [pc, #188]	; (800e590 <HAL_TIM_Base_MspInit+0xd4>)
 800e4d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4d6:	4a2e      	ldr	r2, [pc, #184]	; (800e590 <HAL_TIM_Base_MspInit+0xd4>)
 800e4d8:	f043 0301 	orr.w	r3, r3, #1
 800e4dc:	6453      	str	r3, [r2, #68]	; 0x44
 800e4de:	4b2c      	ldr	r3, [pc, #176]	; (800e590 <HAL_TIM_Base_MspInit+0xd4>)
 800e4e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4e2:	f003 0301 	and.w	r3, r3, #1
 800e4e6:	617b      	str	r3, [r7, #20]
 800e4e8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	2019      	movs	r0, #25
 800e4f0:	f002 fbe3 	bl	8010cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800e4f4:	2019      	movs	r0, #25
 800e4f6:	f002 fbfc 	bl	8010cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800e4fa:	e042      	b.n	800e582 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e504:	d10e      	bne.n	800e524 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e506:	2300      	movs	r3, #0
 800e508:	613b      	str	r3, [r7, #16]
 800e50a:	4b21      	ldr	r3, [pc, #132]	; (800e590 <HAL_TIM_Base_MspInit+0xd4>)
 800e50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e50e:	4a20      	ldr	r2, [pc, #128]	; (800e590 <HAL_TIM_Base_MspInit+0xd4>)
 800e510:	f043 0301 	orr.w	r3, r3, #1
 800e514:	6413      	str	r3, [r2, #64]	; 0x40
 800e516:	4b1e      	ldr	r3, [pc, #120]	; (800e590 <HAL_TIM_Base_MspInit+0xd4>)
 800e518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e51a:	f003 0301 	and.w	r3, r3, #1
 800e51e:	613b      	str	r3, [r7, #16]
 800e520:	693b      	ldr	r3, [r7, #16]
}
 800e522:	e02e      	b.n	800e582 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	4a1a      	ldr	r2, [pc, #104]	; (800e594 <HAL_TIM_Base_MspInit+0xd8>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d10e      	bne.n	800e54c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800e52e:	2300      	movs	r3, #0
 800e530:	60fb      	str	r3, [r7, #12]
 800e532:	4b17      	ldr	r3, [pc, #92]	; (800e590 <HAL_TIM_Base_MspInit+0xd4>)
 800e534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e536:	4a16      	ldr	r2, [pc, #88]	; (800e590 <HAL_TIM_Base_MspInit+0xd4>)
 800e538:	f043 0308 	orr.w	r3, r3, #8
 800e53c:	6413      	str	r3, [r2, #64]	; 0x40
 800e53e:	4b14      	ldr	r3, [pc, #80]	; (800e590 <HAL_TIM_Base_MspInit+0xd4>)
 800e540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e542:	f003 0308 	and.w	r3, r3, #8
 800e546:	60fb      	str	r3, [r7, #12]
 800e548:	68fb      	ldr	r3, [r7, #12]
}
 800e54a:	e01a      	b.n	800e582 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM8)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4a11      	ldr	r2, [pc, #68]	; (800e598 <HAL_TIM_Base_MspInit+0xdc>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d115      	bne.n	800e582 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800e556:	2300      	movs	r3, #0
 800e558:	60bb      	str	r3, [r7, #8]
 800e55a:	4b0d      	ldr	r3, [pc, #52]	; (800e590 <HAL_TIM_Base_MspInit+0xd4>)
 800e55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e55e:	4a0c      	ldr	r2, [pc, #48]	; (800e590 <HAL_TIM_Base_MspInit+0xd4>)
 800e560:	f043 0302 	orr.w	r3, r3, #2
 800e564:	6453      	str	r3, [r2, #68]	; 0x44
 800e566:	4b0a      	ldr	r3, [pc, #40]	; (800e590 <HAL_TIM_Base_MspInit+0xd4>)
 800e568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e56a:	f003 0302 	and.w	r3, r3, #2
 800e56e:	60bb      	str	r3, [r7, #8]
 800e570:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800e572:	2200      	movs	r2, #0
 800e574:	2101      	movs	r1, #1
 800e576:	202c      	movs	r0, #44	; 0x2c
 800e578:	f002 fb9f 	bl	8010cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800e57c:	202c      	movs	r0, #44	; 0x2c
 800e57e:	f002 fbb8 	bl	8010cf2 <HAL_NVIC_EnableIRQ>
}
 800e582:	bf00      	nop
 800e584:	3718      	adds	r7, #24
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
 800e58a:	bf00      	nop
 800e58c:	40010000 	.word	0x40010000
 800e590:	40023800 	.word	0x40023800
 800e594:	40000c00 	.word	0x40000c00
 800e598:	40010400 	.word	0x40010400

0800e59c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b08c      	sub	sp, #48	; 0x30
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5a4:	f107 031c 	add.w	r3, r7, #28
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	601a      	str	r2, [r3, #0]
 800e5ac:	605a      	str	r2, [r3, #4]
 800e5ae:	609a      	str	r2, [r3, #8]
 800e5b0:	60da      	str	r2, [r3, #12]
 800e5b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4a32      	ldr	r2, [pc, #200]	; (800e684 <HAL_TIM_Encoder_MspInit+0xe8>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d12c      	bne.n	800e618 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e5be:	2300      	movs	r3, #0
 800e5c0:	61bb      	str	r3, [r7, #24]
 800e5c2:	4b31      	ldr	r3, [pc, #196]	; (800e688 <HAL_TIM_Encoder_MspInit+0xec>)
 800e5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5c6:	4a30      	ldr	r2, [pc, #192]	; (800e688 <HAL_TIM_Encoder_MspInit+0xec>)
 800e5c8:	f043 0302 	orr.w	r3, r3, #2
 800e5cc:	6413      	str	r3, [r2, #64]	; 0x40
 800e5ce:	4b2e      	ldr	r3, [pc, #184]	; (800e688 <HAL_TIM_Encoder_MspInit+0xec>)
 800e5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5d2:	f003 0302 	and.w	r3, r3, #2
 800e5d6:	61bb      	str	r3, [r7, #24]
 800e5d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5da:	2300      	movs	r3, #0
 800e5dc:	617b      	str	r3, [r7, #20]
 800e5de:	4b2a      	ldr	r3, [pc, #168]	; (800e688 <HAL_TIM_Encoder_MspInit+0xec>)
 800e5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5e2:	4a29      	ldr	r2, [pc, #164]	; (800e688 <HAL_TIM_Encoder_MspInit+0xec>)
 800e5e4:	f043 0301 	orr.w	r3, r3, #1
 800e5e8:	6313      	str	r3, [r2, #48]	; 0x30
 800e5ea:	4b27      	ldr	r3, [pc, #156]	; (800e688 <HAL_TIM_Encoder_MspInit+0xec>)
 800e5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ee:	f003 0301 	and.w	r3, r3, #1
 800e5f2:	617b      	str	r3, [r7, #20]
 800e5f4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e5f6:	23c0      	movs	r3, #192	; 0xc0
 800e5f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5fa:	2302      	movs	r3, #2
 800e5fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5fe:	2300      	movs	r3, #0
 800e600:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e602:	2300      	movs	r3, #0
 800e604:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e606:	2302      	movs	r3, #2
 800e608:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e60a:	f107 031c 	add.w	r3, r7, #28
 800e60e:	4619      	mov	r1, r3
 800e610:	481e      	ldr	r0, [pc, #120]	; (800e68c <HAL_TIM_Encoder_MspInit+0xf0>)
 800e612:	f003 f951 	bl	80118b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800e616:	e030      	b.n	800e67a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a1c      	ldr	r2, [pc, #112]	; (800e690 <HAL_TIM_Encoder_MspInit+0xf4>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d12b      	bne.n	800e67a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e622:	2300      	movs	r3, #0
 800e624:	613b      	str	r3, [r7, #16]
 800e626:	4b18      	ldr	r3, [pc, #96]	; (800e688 <HAL_TIM_Encoder_MspInit+0xec>)
 800e628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e62a:	4a17      	ldr	r2, [pc, #92]	; (800e688 <HAL_TIM_Encoder_MspInit+0xec>)
 800e62c:	f043 0304 	orr.w	r3, r3, #4
 800e630:	6413      	str	r3, [r2, #64]	; 0x40
 800e632:	4b15      	ldr	r3, [pc, #84]	; (800e688 <HAL_TIM_Encoder_MspInit+0xec>)
 800e634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e636:	f003 0304 	and.w	r3, r3, #4
 800e63a:	613b      	str	r3, [r7, #16]
 800e63c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e63e:	2300      	movs	r3, #0
 800e640:	60fb      	str	r3, [r7, #12]
 800e642:	4b11      	ldr	r3, [pc, #68]	; (800e688 <HAL_TIM_Encoder_MspInit+0xec>)
 800e644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e646:	4a10      	ldr	r2, [pc, #64]	; (800e688 <HAL_TIM_Encoder_MspInit+0xec>)
 800e648:	f043 0302 	orr.w	r3, r3, #2
 800e64c:	6313      	str	r3, [r2, #48]	; 0x30
 800e64e:	4b0e      	ldr	r3, [pc, #56]	; (800e688 <HAL_TIM_Encoder_MspInit+0xec>)
 800e650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e652:	f003 0302 	and.w	r3, r3, #2
 800e656:	60fb      	str	r3, [r7, #12]
 800e658:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e65a:	23c0      	movs	r3, #192	; 0xc0
 800e65c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e65e:	2302      	movs	r3, #2
 800e660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e662:	2300      	movs	r3, #0
 800e664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e666:	2300      	movs	r3, #0
 800e668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800e66a:	2302      	movs	r3, #2
 800e66c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e66e:	f107 031c 	add.w	r3, r7, #28
 800e672:	4619      	mov	r1, r3
 800e674:	4807      	ldr	r0, [pc, #28]	; (800e694 <HAL_TIM_Encoder_MspInit+0xf8>)
 800e676:	f003 f91f 	bl	80118b8 <HAL_GPIO_Init>
}
 800e67a:	bf00      	nop
 800e67c:	3730      	adds	r7, #48	; 0x30
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	40000400 	.word	0x40000400
 800e688:	40023800 	.word	0x40023800
 800e68c:	40020000 	.word	0x40020000
 800e690:	40000800 	.word	0x40000800
 800e694:	40020400 	.word	0x40020400

0800e698 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b08c      	sub	sp, #48	; 0x30
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6a0:	f107 031c 	add.w	r3, r7, #28
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	601a      	str	r2, [r3, #0]
 800e6a8:	605a      	str	r2, [r3, #4]
 800e6aa:	609a      	str	r2, [r3, #8]
 800e6ac:	60da      	str	r2, [r3, #12]
 800e6ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6b8:	d11e      	bne.n	800e6f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	61bb      	str	r3, [r7, #24]
 800e6be:	4b43      	ldr	r3, [pc, #268]	; (800e7cc <HAL_TIM_MspPostInit+0x134>)
 800e6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6c2:	4a42      	ldr	r2, [pc, #264]	; (800e7cc <HAL_TIM_MspPostInit+0x134>)
 800e6c4:	f043 0301 	orr.w	r3, r3, #1
 800e6c8:	6313      	str	r3, [r2, #48]	; 0x30
 800e6ca:	4b40      	ldr	r3, [pc, #256]	; (800e7cc <HAL_TIM_MspPostInit+0x134>)
 800e6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6ce:	f003 0301 	and.w	r3, r3, #1
 800e6d2:	61bb      	str	r3, [r7, #24]
 800e6d4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e6d6:	2308      	movs	r3, #8
 800e6d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6da:	2302      	movs	r3, #2
 800e6dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e6e2:	2303      	movs	r3, #3
 800e6e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e6ea:	f107 031c 	add.w	r3, r7, #28
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	4837      	ldr	r0, [pc, #220]	; (800e7d0 <HAL_TIM_MspPostInit+0x138>)
 800e6f2:	f003 f8e1 	bl	80118b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800e6f6:	e064      	b.n	800e7c2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4a35      	ldr	r2, [pc, #212]	; (800e7d4 <HAL_TIM_MspPostInit+0x13c>)
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d11e      	bne.n	800e740 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e702:	2300      	movs	r3, #0
 800e704:	617b      	str	r3, [r7, #20]
 800e706:	4b31      	ldr	r3, [pc, #196]	; (800e7cc <HAL_TIM_MspPostInit+0x134>)
 800e708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e70a:	4a30      	ldr	r2, [pc, #192]	; (800e7cc <HAL_TIM_MspPostInit+0x134>)
 800e70c:	f043 0301 	orr.w	r3, r3, #1
 800e710:	6313      	str	r3, [r2, #48]	; 0x30
 800e712:	4b2e      	ldr	r3, [pc, #184]	; (800e7cc <HAL_TIM_MspPostInit+0x134>)
 800e714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e716:	f003 0301 	and.w	r3, r3, #1
 800e71a:	617b      	str	r3, [r7, #20]
 800e71c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e71e:	2302      	movs	r3, #2
 800e720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e722:	2302      	movs	r3, #2
 800e724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e726:	2300      	movs	r3, #0
 800e728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e72a:	2300      	movs	r3, #0
 800e72c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800e72e:	2302      	movs	r3, #2
 800e730:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e732:	f107 031c 	add.w	r3, r7, #28
 800e736:	4619      	mov	r1, r3
 800e738:	4825      	ldr	r0, [pc, #148]	; (800e7d0 <HAL_TIM_MspPostInit+0x138>)
 800e73a:	f003 f8bd 	bl	80118b8 <HAL_GPIO_Init>
}
 800e73e:	e040      	b.n	800e7c2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4a24      	ldr	r2, [pc, #144]	; (800e7d8 <HAL_TIM_MspPostInit+0x140>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d13b      	bne.n	800e7c2 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e74a:	2300      	movs	r3, #0
 800e74c:	613b      	str	r3, [r7, #16]
 800e74e:	4b1f      	ldr	r3, [pc, #124]	; (800e7cc <HAL_TIM_MspPostInit+0x134>)
 800e750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e752:	4a1e      	ldr	r2, [pc, #120]	; (800e7cc <HAL_TIM_MspPostInit+0x134>)
 800e754:	f043 0301 	orr.w	r3, r3, #1
 800e758:	6313      	str	r3, [r2, #48]	; 0x30
 800e75a:	4b1c      	ldr	r3, [pc, #112]	; (800e7cc <HAL_TIM_MspPostInit+0x134>)
 800e75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e75e:	f003 0301 	and.w	r3, r3, #1
 800e762:	613b      	str	r3, [r7, #16]
 800e764:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e766:	2300      	movs	r3, #0
 800e768:	60fb      	str	r3, [r7, #12]
 800e76a:	4b18      	ldr	r3, [pc, #96]	; (800e7cc <HAL_TIM_MspPostInit+0x134>)
 800e76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e76e:	4a17      	ldr	r2, [pc, #92]	; (800e7cc <HAL_TIM_MspPostInit+0x134>)
 800e770:	f043 0304 	orr.w	r3, r3, #4
 800e774:	6313      	str	r3, [r2, #48]	; 0x30
 800e776:	4b15      	ldr	r3, [pc, #84]	; (800e7cc <HAL_TIM_MspPostInit+0x134>)
 800e778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e77a:	f003 0304 	and.w	r3, r3, #4
 800e77e:	60fb      	str	r3, [r7, #12]
 800e780:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800e782:	2320      	movs	r3, #32
 800e784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e786:	2302      	movs	r3, #2
 800e788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e78a:	2300      	movs	r3, #0
 800e78c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e78e:	2300      	movs	r3, #0
 800e790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e792:	2303      	movs	r3, #3
 800e794:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e796:	f107 031c 	add.w	r3, r7, #28
 800e79a:	4619      	mov	r1, r3
 800e79c:	480c      	ldr	r0, [pc, #48]	; (800e7d0 <HAL_TIM_MspPostInit+0x138>)
 800e79e:	f003 f88b 	bl	80118b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e7a2:	2340      	movs	r3, #64	; 0x40
 800e7a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7a6:	2302      	movs	r3, #2
 800e7a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e7b2:	2303      	movs	r3, #3
 800e7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e7b6:	f107 031c 	add.w	r3, r7, #28
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	4807      	ldr	r0, [pc, #28]	; (800e7dc <HAL_TIM_MspPostInit+0x144>)
 800e7be:	f003 f87b 	bl	80118b8 <HAL_GPIO_Init>
}
 800e7c2:	bf00      	nop
 800e7c4:	3730      	adds	r7, #48	; 0x30
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	40023800 	.word	0x40023800
 800e7d0:	40020000 	.word	0x40020000
 800e7d4:	40000c00 	.word	0x40000c00
 800e7d8:	40010400 	.word	0x40010400
 800e7dc:	40020800 	.word	0x40020800

0800e7e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b08a      	sub	sp, #40	; 0x28
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e7e8:	f107 0314 	add.w	r3, r7, #20
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	601a      	str	r2, [r3, #0]
 800e7f0:	605a      	str	r2, [r3, #4]
 800e7f2:	609a      	str	r2, [r3, #8]
 800e7f4:	60da      	str	r2, [r3, #12]
 800e7f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4a19      	ldr	r2, [pc, #100]	; (800e864 <HAL_UART_MspInit+0x84>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d12c      	bne.n	800e85c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e802:	2300      	movs	r3, #0
 800e804:	613b      	str	r3, [r7, #16]
 800e806:	4b18      	ldr	r3, [pc, #96]	; (800e868 <HAL_UART_MspInit+0x88>)
 800e808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e80a:	4a17      	ldr	r2, [pc, #92]	; (800e868 <HAL_UART_MspInit+0x88>)
 800e80c:	f043 0310 	orr.w	r3, r3, #16
 800e810:	6453      	str	r3, [r2, #68]	; 0x44
 800e812:	4b15      	ldr	r3, [pc, #84]	; (800e868 <HAL_UART_MspInit+0x88>)
 800e814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e816:	f003 0310 	and.w	r3, r3, #16
 800e81a:	613b      	str	r3, [r7, #16]
 800e81c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e81e:	2300      	movs	r3, #0
 800e820:	60fb      	str	r3, [r7, #12]
 800e822:	4b11      	ldr	r3, [pc, #68]	; (800e868 <HAL_UART_MspInit+0x88>)
 800e824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e826:	4a10      	ldr	r2, [pc, #64]	; (800e868 <HAL_UART_MspInit+0x88>)
 800e828:	f043 0301 	orr.w	r3, r3, #1
 800e82c:	6313      	str	r3, [r2, #48]	; 0x30
 800e82e:	4b0e      	ldr	r3, [pc, #56]	; (800e868 <HAL_UART_MspInit+0x88>)
 800e830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e832:	f003 0301 	and.w	r3, r3, #1
 800e836:	60fb      	str	r3, [r7, #12]
 800e838:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e83a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e83e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e840:	2302      	movs	r3, #2
 800e842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e844:	2300      	movs	r3, #0
 800e846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e848:	2303      	movs	r3, #3
 800e84a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e84c:	2307      	movs	r3, #7
 800e84e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e850:	f107 0314 	add.w	r3, r7, #20
 800e854:	4619      	mov	r1, r3
 800e856:	4805      	ldr	r0, [pc, #20]	; (800e86c <HAL_UART_MspInit+0x8c>)
 800e858:	f003 f82e 	bl	80118b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800e85c:	bf00      	nop
 800e85e:	3728      	adds	r7, #40	; 0x28
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}
 800e864:	40011000 	.word	0x40011000
 800e868:	40023800 	.word	0x40023800
 800e86c:	40020000 	.word	0x40020000

0800e870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e870:	b480      	push	{r7}
 800e872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e874:	e7fe      	b.n	800e874 <NMI_Handler+0x4>

0800e876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e876:	b480      	push	{r7}
 800e878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e87a:	e7fe      	b.n	800e87a <HardFault_Handler+0x4>

0800e87c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e87c:	b480      	push	{r7}
 800e87e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e880:	e7fe      	b.n	800e880 <MemManage_Handler+0x4>

0800e882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e882:	b480      	push	{r7}
 800e884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e886:	e7fe      	b.n	800e886 <BusFault_Handler+0x4>

0800e888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e888:	b480      	push	{r7}
 800e88a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e88c:	e7fe      	b.n	800e88c <UsageFault_Handler+0x4>

0800e88e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e88e:	b480      	push	{r7}
 800e890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e892:	bf00      	nop
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr

0800e89c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e89c:	b480      	push	{r7}
 800e89e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e8a0:	bf00      	nop
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr

0800e8aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e8aa:	b480      	push	{r7}
 800e8ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e8ae:	bf00      	nop
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e8bc:	f001 fca2 	bl	8010204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e8c0:	bf00      	nop
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e8c8:	4802      	ldr	r0, [pc, #8]	; (800e8d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800e8ca:	f004 ff21 	bl	8013710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800e8ce:	bf00      	nop
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	200107e8 	.word	0x200107e8

0800e8d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800e8dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e8e0:	f003 f99e 	bl	8011c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800e8e4:	bf00      	nop
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800e8ec:	4802      	ldr	r0, [pc, #8]	; (800e8f8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800e8ee:	f004 ff0f 	bl	8013710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800e8f2:	bf00      	nop
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	200105a0 	.word	0x200105a0

0800e8fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800e900:	4802      	ldr	r0, [pc, #8]	; (800e90c <DMA2_Stream0_IRQHandler+0x10>)
 800e902:	f002 fb87 	bl	8011014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800e906:	bf00      	nop
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	20010788 	.word	0x20010788

0800e910 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800e914:	4802      	ldr	r0, [pc, #8]	; (800e920 <DMA2_Stream2_IRQHandler+0x10>)
 800e916:	f002 fb7d 	bl	8011014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800e91a:	bf00      	nop
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	20010828 	.word	0x20010828

0800e924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e924:	b480      	push	{r7}
 800e926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e928:	4b08      	ldr	r3, [pc, #32]	; (800e94c <SystemInit+0x28>)
 800e92a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e92e:	4a07      	ldr	r2, [pc, #28]	; (800e94c <SystemInit+0x28>)
 800e930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e938:	4b04      	ldr	r3, [pc, #16]	; (800e94c <SystemInit+0x28>)
 800e93a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e93e:	609a      	str	r2, [r3, #8]
#endif
}
 800e940:	bf00      	nop
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr
 800e94a:	bf00      	nop
 800e94c:	e000ed00 	.word	0xe000ed00

0800e950 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b086      	sub	sp, #24
 800e954:	af00      	add	r7, sp, #0
 800e956:	60f8      	str	r0, [r7, #12]
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e95c:	2300      	movs	r3, #0
 800e95e:	617b      	str	r3, [r7, #20]
 800e960:	e00a      	b.n	800e978 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800e962:	f7fe fe17 	bl	800d594 <__io_getchar>
 800e966:	4601      	mov	r1, r0
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	1c5a      	adds	r2, r3, #1
 800e96c:	60ba      	str	r2, [r7, #8]
 800e96e:	b2ca      	uxtb	r2, r1
 800e970:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	3301      	adds	r3, #1
 800e976:	617b      	str	r3, [r7, #20]
 800e978:	697a      	ldr	r2, [r7, #20]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	dbf0      	blt.n	800e962 <_read+0x12>
	}

return len;
 800e980:	687b      	ldr	r3, [r7, #4]
}
 800e982:	4618      	mov	r0, r3
 800e984:	3718      	adds	r7, #24
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b086      	sub	sp, #24
 800e98e:	af00      	add	r7, sp, #0
 800e990:	60f8      	str	r0, [r7, #12]
 800e992:	60b9      	str	r1, [r7, #8]
 800e994:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e996:	2300      	movs	r3, #0
 800e998:	617b      	str	r3, [r7, #20]
 800e99a:	e009      	b.n	800e9b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	1c5a      	adds	r2, r3, #1
 800e9a0:	60ba      	str	r2, [r7, #8]
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f7fe fde3 	bl	800d570 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	617b      	str	r3, [r7, #20]
 800e9b0:	697a      	ldr	r2, [r7, #20]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	dbf1      	blt.n	800e99c <_write+0x12>
	}
	return len;
 800e9b8:	687b      	ldr	r3, [r7, #4]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3718      	adds	r7, #24
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <_close>:

int _close(int file)
{
 800e9c2:	b480      	push	{r7}
 800e9c4:	b083      	sub	sp, #12
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
	return -1;
 800e9ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	370c      	adds	r7, #12
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr

0800e9da <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e9da:	b480      	push	{r7}
 800e9dc:	b083      	sub	sp, #12
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	6078      	str	r0, [r7, #4]
 800e9e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e9ea:	605a      	str	r2, [r3, #4]
	return 0;
 800e9ec:	2300      	movs	r3, #0
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	370c      	adds	r7, #12
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr

0800e9fa <_isatty>:

int _isatty(int file)
{
 800e9fa:	b480      	push	{r7}
 800e9fc:	b083      	sub	sp, #12
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
	return 1;
 800ea02:	2301      	movs	r3, #1
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	370c      	adds	r7, #12
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	60f8      	str	r0, [r7, #12]
 800ea18:	60b9      	str	r1, [r7, #8]
 800ea1a:	607a      	str	r2, [r7, #4]
	return 0;
 800ea1c:	2300      	movs	r3, #0
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3714      	adds	r7, #20
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr
	...

0800ea2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b086      	sub	sp, #24
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ea34:	4a14      	ldr	r2, [pc, #80]	; (800ea88 <_sbrk+0x5c>)
 800ea36:	4b15      	ldr	r3, [pc, #84]	; (800ea8c <_sbrk+0x60>)
 800ea38:	1ad3      	subs	r3, r2, r3
 800ea3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ea40:	4b13      	ldr	r3, [pc, #76]	; (800ea90 <_sbrk+0x64>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d102      	bne.n	800ea4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ea48:	4b11      	ldr	r3, [pc, #68]	; (800ea90 <_sbrk+0x64>)
 800ea4a:	4a12      	ldr	r2, [pc, #72]	; (800ea94 <_sbrk+0x68>)
 800ea4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ea4e:	4b10      	ldr	r3, [pc, #64]	; (800ea90 <_sbrk+0x64>)
 800ea50:	681a      	ldr	r2, [r3, #0]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	4413      	add	r3, r2
 800ea56:	693a      	ldr	r2, [r7, #16]
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d207      	bcs.n	800ea6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ea5c:	f006 fbe4 	bl	8015228 <__errno>
 800ea60:	4602      	mov	r2, r0
 800ea62:	230c      	movs	r3, #12
 800ea64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800ea66:	f04f 33ff 	mov.w	r3, #4294967295
 800ea6a:	e009      	b.n	800ea80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ea6c:	4b08      	ldr	r3, [pc, #32]	; (800ea90 <_sbrk+0x64>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ea72:	4b07      	ldr	r3, [pc, #28]	; (800ea90 <_sbrk+0x64>)
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	4413      	add	r3, r2
 800ea7a:	4a05      	ldr	r2, [pc, #20]	; (800ea90 <_sbrk+0x64>)
 800ea7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3718      	adds	r7, #24
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}
 800ea88:	20020000 	.word	0x20020000
 800ea8c:	00000400 	.word	0x00000400
 800ea90:	2000fc38 	.word	0x2000fc38
 800ea94:	200108b0 	.word	0x200108b0

0800ea98 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800ea9c:	2203      	movs	r2, #3
 800ea9e:	490a      	ldr	r1, [pc, #40]	; (800eac8 <ADCStart+0x30>)
 800eaa0:	480a      	ldr	r0, [pc, #40]	; (800eacc <ADCStart+0x34>)
 800eaa2:	f001 fc35 	bl	8010310 <HAL_ADC_Start_DMA>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d001      	beq.n	800eab0 <ADCStart+0x18>
	{
		Error_Handler();
 800eaac:	f7ff fb9a 	bl	800e1e4 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800eab0:	2202      	movs	r2, #2
 800eab2:	4907      	ldr	r1, [pc, #28]	; (800ead0 <ADCStart+0x38>)
 800eab4:	4807      	ldr	r0, [pc, #28]	; (800ead4 <ADCStart+0x3c>)
 800eab6:	f001 fc2b 	bl	8010310 <HAL_ADC_Start_DMA>
 800eaba:	4603      	mov	r3, r0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d001      	beq.n	800eac4 <ADCStart+0x2c>
	{
		Error_Handler();
 800eac0:	f7ff fb90 	bl	800e1e4 <Error_Handler>
	}

}
 800eac4:	bf00      	nop
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	2000fcbc 	.word	0x2000fcbc
 800eacc:	20010700 	.word	0x20010700
 800ead0:	2000fcc8 	.word	0x2000fcc8
 800ead4:	20010620 	.word	0x20010620

0800ead8 <ADCStop>:
void ADCStop()
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800eadc:	480e      	ldr	r0, [pc, #56]	; (800eb18 <ADCStop+0x40>)
 800eade:	f001 fd09 	bl	80104f4 <HAL_ADC_Stop_DMA>
 800eae2:	4603      	mov	r3, r0
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d007      	beq.n	800eaf8 <ADCStop+0x20>
	{
		printf("な\r\n");
 800eae8:	480c      	ldr	r0, [pc, #48]	; (800eb1c <ADCStop+0x44>)
 800eaea:	f007 fa8d 	bl	8016008 <puts>
		Error_Handler();
 800eaee:	f7ff fb79 	bl	800e1e4 <Error_Handler>
		printf("に\r\n");
 800eaf2:	480b      	ldr	r0, [pc, #44]	; (800eb20 <ADCStop+0x48>)
 800eaf4:	f007 fa88 	bl	8016008 <puts>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800eaf8:	480a      	ldr	r0, [pc, #40]	; (800eb24 <ADCStop+0x4c>)
 800eafa:	f001 fcfb 	bl	80104f4 <HAL_ADC_Stop_DMA>
 800eafe:	4603      	mov	r3, r0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d007      	beq.n	800eb14 <ADCStop+0x3c>
	{
		printf("ぬ\r\n");
 800eb04:	4808      	ldr	r0, [pc, #32]	; (800eb28 <ADCStop+0x50>)
 800eb06:	f007 fa7f 	bl	8016008 <puts>
		Error_Handler();
 800eb0a:	f7ff fb6b 	bl	800e1e4 <Error_Handler>
		printf("ね\r\n");
 800eb0e:	4807      	ldr	r0, [pc, #28]	; (800eb2c <ADCStop+0x54>)
 800eb10:	f007 fa7a 	bl	8016008 <puts>
	}
}
 800eb14:	bf00      	nop
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	20010700 	.word	0x20010700
 800eb1c:	0801a424 	.word	0x0801a424
 800eb20:	0801a42c 	.word	0x0801a42c
 800eb24:	20010620 	.word	0x20010620
 800eb28:	0801a434 	.word	0x0801a434
 800eb2c:	0801a43c 	.word	0x0801a43c

0800eb30 <FLASH_Unlock>:
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
 800eb30:	b480      	push	{r7}
 800eb32:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 800eb34:	4b05      	ldr	r3, [pc, #20]	; (800eb4c <FLASH_Unlock+0x1c>)
 800eb36:	4a06      	ldr	r2, [pc, #24]	; (800eb50 <FLASH_Unlock+0x20>)
 800eb38:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800eb3a:	4b04      	ldr	r3, [pc, #16]	; (800eb4c <FLASH_Unlock+0x1c>)
 800eb3c:	4a05      	ldr	r2, [pc, #20]	; (800eb54 <FLASH_Unlock+0x24>)
 800eb3e:	605a      	str	r2, [r3, #4]
}
 800eb40:	bf00      	nop
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr
 800eb4a:	bf00      	nop
 800eb4c:	40023c00 	.word	0x40023c00
 800eb50:	45670123 	.word	0x45670123
 800eb54:	cdef89ab 	.word	0xcdef89ab

0800eb58 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800eb5c:	4b05      	ldr	r3, [pc, #20]	; (800eb74 <FLASH_Lock+0x1c>)
 800eb5e:	691b      	ldr	r3, [r3, #16]
 800eb60:	4a04      	ldr	r2, [pc, #16]	; (800eb74 <FLASH_Lock+0x1c>)
 800eb62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eb66:	6113      	str	r3, [r2, #16]

}
 800eb68:	bf00      	nop
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	40023c00 	.word	0x40023c00

0800eb78 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800eb7c:	bf00      	nop
 800eb7e:	4b05      	ldr	r3, [pc, #20]	; (800eb94 <FLASH_WaitBusy+0x1c>)
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d1f9      	bne.n	800eb7e <FLASH_WaitBusy+0x6>
}
 800eb8a:	bf00      	nop
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr
 800eb94:	40023c00 	.word	0x40023c00

0800eb98 <FLASH_Write_Word>:

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800eba2:	f7ff ffc5 	bl	800eb30 <FLASH_Unlock>

	FLASH_WaitBusy();
 800eba6:	f7ff ffe7 	bl	800eb78 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800ebaa:	4b0e      	ldr	r3, [pc, #56]	; (800ebe4 <FLASH_Write_Word+0x4c>)
 800ebac:	691b      	ldr	r3, [r3, #16]
 800ebae:	4a0d      	ldr	r2, [pc, #52]	; (800ebe4 <FLASH_Write_Word+0x4c>)
 800ebb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ebb4:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800ebb6:	4b0b      	ldr	r3, [pc, #44]	; (800ebe4 <FLASH_Write_Word+0x4c>)
 800ebb8:	691b      	ldr	r3, [r3, #16]
 800ebba:	4a0a      	ldr	r2, [pc, #40]	; (800ebe4 <FLASH_Write_Word+0x4c>)
 800ebbc:	f043 0301 	orr.w	r3, r3, #1
 800ebc0:	6113      	str	r3, [r2, #16]

	*(__IO uint32_t*)address = data;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	683a      	ldr	r2, [r7, #0]
 800ebc6:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800ebc8:	f7ff ffd6 	bl	800eb78 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800ebcc:	4b05      	ldr	r3, [pc, #20]	; (800ebe4 <FLASH_Write_Word+0x4c>)
 800ebce:	691b      	ldr	r3, [r3, #16]
 800ebd0:	4a04      	ldr	r2, [pc, #16]	; (800ebe4 <FLASH_Write_Word+0x4c>)
 800ebd2:	f023 0301 	bic.w	r3, r3, #1
 800ebd6:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800ebd8:	f7ff ffbe 	bl	800eb58 <FLASH_Lock>
}
 800ebdc:	bf00      	nop
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}
 800ebe4:	40023c00 	.word	0x40023c00

0800ebe8 <FLASH_Read_Word>:
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800ebf2:	f7ff ff9d 	bl	800eb30 <FLASH_Unlock>

	FLASH_WaitBusy();
 800ebf6:	f7ff ffbf 	bl	800eb78 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800ebfa:	4b0f      	ldr	r3, [pc, #60]	; (800ec38 <FLASH_Read_Word+0x50>)
 800ebfc:	691b      	ldr	r3, [r3, #16]
 800ebfe:	4a0e      	ldr	r2, [pc, #56]	; (800ec38 <FLASH_Read_Word+0x50>)
 800ec00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ec04:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800ec06:	4b0c      	ldr	r3, [pc, #48]	; (800ec38 <FLASH_Read_Word+0x50>)
 800ec08:	691b      	ldr	r3, [r3, #16]
 800ec0a:	4a0b      	ldr	r2, [pc, #44]	; (800ec38 <FLASH_Read_Word+0x50>)
 800ec0c:	f043 0301 	orr.w	r3, r3, #1
 800ec10:	6113      	str	r3, [r2, #16]

	* data = *(__IO uint32_t*)address;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800ec1a:	f7ff ffad 	bl	800eb78 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800ec1e:	4b06      	ldr	r3, [pc, #24]	; (800ec38 <FLASH_Read_Word+0x50>)
 800ec20:	691b      	ldr	r3, [r3, #16]
 800ec22:	4a05      	ldr	r2, [pc, #20]	; (800ec38 <FLASH_Read_Word+0x50>)
 800ec24:	f023 0301 	bic.w	r3, r3, #1
 800ec28:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800ec2a:	f7ff ff95 	bl	800eb58 <FLASH_Lock>
}
 800ec2e:	bf00      	nop
 800ec30:	3708      	adds	r7, #8
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	40023c00 	.word	0x40023c00

0800ec3c <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 800ec48:	f7ff ff72 	bl	800eb30 <FLASH_Unlock>

	FLASH_WaitBusy();
 800ec4c:	f7ff ff94 	bl	800eb78 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800ec50:	4b0e      	ldr	r3, [pc, #56]	; (800ec8c <FLASH_Write_Word_F+0x50>)
 800ec52:	691b      	ldr	r3, [r3, #16]
 800ec54:	4a0d      	ldr	r2, [pc, #52]	; (800ec8c <FLASH_Write_Word_F+0x50>)
 800ec56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ec5a:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800ec5c:	4b0b      	ldr	r3, [pc, #44]	; (800ec8c <FLASH_Write_Word_F+0x50>)
 800ec5e:	691b      	ldr	r3, [r3, #16]
 800ec60:	4a0a      	ldr	r2, [pc, #40]	; (800ec8c <FLASH_Write_Word_F+0x50>)
 800ec62:	f043 0301 	orr.w	r3, r3, #1
 800ec66:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	683a      	ldr	r2, [r7, #0]
 800ec6c:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800ec6e:	f7ff ff83 	bl	800eb78 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800ec72:	4b06      	ldr	r3, [pc, #24]	; (800ec8c <FLASH_Write_Word_F+0x50>)
 800ec74:	691b      	ldr	r3, [r3, #16]
 800ec76:	4a05      	ldr	r2, [pc, #20]	; (800ec8c <FLASH_Write_Word_F+0x50>)
 800ec78:	f023 0301 	bic.w	r3, r3, #1
 800ec7c:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800ec7e:	f7ff ff6b 	bl	800eb58 <FLASH_Lock>
}
 800ec82:	bf00      	nop
 800ec84:	3708      	adds	r7, #8
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	40023c00 	.word	0x40023c00

0800ec90 <FLASH_Read_Word_F>:
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800ec9a:	f7ff ff49 	bl	800eb30 <FLASH_Unlock>

	FLASH_WaitBusy();
 800ec9e:	f7ff ff6b 	bl	800eb78 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800eca2:	4b0f      	ldr	r3, [pc, #60]	; (800ece0 <FLASH_Read_Word_F+0x50>)
 800eca4:	691b      	ldr	r3, [r3, #16]
 800eca6:	4a0e      	ldr	r2, [pc, #56]	; (800ece0 <FLASH_Read_Word_F+0x50>)
 800eca8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ecac:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800ecae:	4b0c      	ldr	r3, [pc, #48]	; (800ece0 <FLASH_Read_Word_F+0x50>)
 800ecb0:	691b      	ldr	r3, [r3, #16]
 800ecb2:	4a0b      	ldr	r2, [pc, #44]	; (800ece0 <FLASH_Read_Word_F+0x50>)
 800ecb4:	f043 0301 	orr.w	r3, r3, #1
 800ecb8:	6113      	str	r3, [r2, #16]

	* data = *(__IO float*)address;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800ecc2:	f7ff ff59 	bl	800eb78 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800ecc6:	4b06      	ldr	r3, [pc, #24]	; (800ece0 <FLASH_Read_Word_F+0x50>)
 800ecc8:	691b      	ldr	r3, [r3, #16]
 800ecca:	4a05      	ldr	r2, [pc, #20]	; (800ece0 <FLASH_Read_Word_F+0x50>)
 800eccc:	f023 0301 	bic.w	r3, r3, #1
 800ecd0:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800ecd2:	f7ff ff41 	bl	800eb58 <FLASH_Lock>
}
 800ecd6:	bf00      	nop
 800ecd8:	3708      	adds	r7, #8
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	40023c00 	.word	0x40023c00

0800ece4 <Flash_clear_sector1>:
//char _backup_flash_start_3;
//char _backup_flash_start_11;
// 配置と定義はリンカスクリプトで行う

bool Flash_clear_sector1()// Flashのsectoe1を消去
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b088      	sub	sp, #32
 800ece8:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800ecea:	f002 fbfb 	bl	80114e4 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_1;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800ecf6:	2302      	movs	r3, #2
 800ecf8:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800ecfe:	1d3a      	adds	r2, r7, #4
 800ed00:	f107 0308 	add.w	r3, r7, #8
 800ed04:	4611      	mov	r1, r2
 800ed06:	4618      	mov	r0, r3
 800ed08:	f002 fcb4 	bl	8011674 <HAL_FLASHEx_Erase>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800ed10:	f002 fc0a 	bl	8011528 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800ed14:	7ffb      	ldrb	r3, [r7, #31]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d105      	bne.n	800ed26 <Flash_clear_sector1+0x42>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed20:	d101      	bne.n	800ed26 <Flash_clear_sector1+0x42>
 800ed22:	2301      	movs	r3, #1
 800ed24:	e000      	b.n	800ed28 <Flash_clear_sector1+0x44>
 800ed26:	2300      	movs	r3, #0
 800ed28:	f003 0301 	and.w	r3, r3, #1
 800ed2c:	b2db      	uxtb	r3, r3
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3720      	adds	r7, #32
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}

0800ed36 <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 800ed36:	b580      	push	{r7, lr}
 800ed38:	b088      	sub	sp, #32
 800ed3a:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800ed3c:	f002 fbd2 	bl	80114e4 <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800ed40:	2300      	movs	r3, #0
 800ed42:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800ed44:	2309      	movs	r3, #9
 800ed46:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800ed48:	2302      	movs	r3, #2
 800ed4a:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	617b      	str	r3, [r7, #20]

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800ed50:	1d3a      	adds	r2, r7, #4
 800ed52:	f107 0308 	add.w	r3, r7, #8
 800ed56:	4611      	mov	r1, r2
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f002 fc8b 	bl	8011674 <HAL_FLASHEx_Erase>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	77fb      	strb	r3, [r7, #31]

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 800ed62:	f002 fbe1 	bl	8011528 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800ed66:	7ffb      	ldrb	r3, [r7, #31]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d105      	bne.n	800ed78 <Flash_clear_sector9+0x42>
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed72:	d101      	bne.n	800ed78 <Flash_clear_sector9+0x42>
 800ed74:	2301      	movs	r3, #1
 800ed76:	e000      	b.n	800ed7a <Flash_clear_sector9+0x44>
 800ed78:	2300      	movs	r3, #0
 800ed7a:	f003 0301 	and.w	r3, r3, #1
 800ed7e:	b2db      	uxtb	r3, r3
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3720      	adds	r7, #32
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <read_byte>:
//		Error_Handler();
//		printf("エラー2\r\n");
//	}
//	printf("ok\r\n");
//}
inline uint8_t read_byte( uint8_t reg ) {
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	4603      	mov	r3, r0
 800ed90:	71fb      	strb	r3, [r7, #7]

	uint8_t ret,val;

	ret = reg | 0x80;
 800ed92:	79fb      	ldrb	r3, [r7, #7]
 800ed94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	2104      	movs	r1, #4
 800eda0:	480d      	ldr	r0, [pc, #52]	; (800edd8 <read_byte+0x50>)
 800eda2:	f002 ff23 	bl	8011bec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800eda6:	f107 010f 	add.w	r1, r7, #15
 800edaa:	2364      	movs	r3, #100	; 0x64
 800edac:	2201      	movs	r2, #1
 800edae:	480b      	ldr	r0, [pc, #44]	; (800eddc <read_byte+0x54>)
 800edb0:	f003 fc14 	bl	80125dc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800edb4:	f107 010e 	add.w	r1, r7, #14
 800edb8:	2364      	movs	r3, #100	; 0x64
 800edba:	2201      	movs	r2, #1
 800edbc:	4807      	ldr	r0, [pc, #28]	; (800eddc <read_byte+0x54>)
 800edbe:	f003 fd41 	bl	8012844 <HAL_SPI_Receive>
	CS_SET;
 800edc2:	2201      	movs	r2, #1
 800edc4:	2104      	movs	r1, #4
 800edc6:	4804      	ldr	r0, [pc, #16]	; (800edd8 <read_byte+0x50>)
 800edc8:	f002 ff10 	bl	8011bec <HAL_GPIO_WritePin>
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return val;
 800edcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	40020c00 	.word	0x40020c00
 800eddc:	200106a8 	.word	0x200106a8

0800ede0 <ReadIMU>:
inline float ReadIMU(uint8_t a, uint8_t b) {
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b086      	sub	sp, #24
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	4603      	mov	r3, r0
 800ede8:	460a      	mov	r2, r1
 800edea:	71fb      	strb	r3, [r7, #7]
 800edec:	4613      	mov	r3, r2
 800edee:	71bb      	strb	r3, [r7, #6]

	uint8_t ret1, ret2,val1,val2;
	uint8_t ret[2] = {
 800edf0:	79fb      	ldrb	r3, [r7, #7]
 800edf2:	723b      	strb	r3, [r7, #8]
 800edf4:	79bb      	ldrb	r3, [r7, #6]
 800edf6:	727b      	strb	r3, [r7, #9]
			a,//0x37,
			b//0x38,
	};
	int16_t law_data;
	float res;
	ret1 = ret[0] | 0x80;
 800edf8:	7a3b      	ldrb	r3, [r7, #8]
 800edfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	73fb      	strb	r3, [r7, #15]
	ret2 = ret[1] | 0x80;
 800ee02:	7a7b      	ldrb	r3, [r7, #9]
 800ee04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee08:	b2db      	uxtb	r3, r3
 800ee0a:	73bb      	strb	r3, [r7, #14]
//	reg[0] = 0x37;
//	reg[1] = 0x38;
//
//	ret = reg[0] | 0x80;
	CS_RESET;
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	2104      	movs	r1, #4
 800ee10:	4822      	ldr	r0, [pc, #136]	; (800ee9c <ReadIMU+0xbc>)
 800ee12:	f002 feeb 	bl	8011bec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800ee16:	f107 010f 	add.w	r1, r7, #15
 800ee1a:	2364      	movs	r3, #100	; 0x64
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	4820      	ldr	r0, [pc, #128]	; (800eea0 <ReadIMU+0xc0>)
 800ee20:	f003 fbdc 	bl	80125dc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 800ee24:	f107 010d 	add.w	r1, r7, #13
 800ee28:	2364      	movs	r3, #100	; 0x64
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	481c      	ldr	r0, [pc, #112]	; (800eea0 <ReadIMU+0xc0>)
 800ee2e:	f003 fd09 	bl	8012844 <HAL_SPI_Receive>
	CS_SET;
 800ee32:	2201      	movs	r2, #1
 800ee34:	2104      	movs	r1, #4
 800ee36:	4819      	ldr	r0, [pc, #100]	; (800ee9c <ReadIMU+0xbc>)
 800ee38:	f002 fed8 	bl	8011bec <HAL_GPIO_WritePin>

//	ret = reg[1] | 0x80;
	CS_RESET;
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	2104      	movs	r1, #4
 800ee40:	4816      	ldr	r0, [pc, #88]	; (800ee9c <ReadIMU+0xbc>)
 800ee42:	f002 fed3 	bl	8011bec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800ee46:	f107 010e 	add.w	r1, r7, #14
 800ee4a:	2364      	movs	r3, #100	; 0x64
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	4814      	ldr	r0, [pc, #80]	; (800eea0 <ReadIMU+0xc0>)
 800ee50:	f003 fbc4 	bl	80125dc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 800ee54:	f107 010c 	add.w	r1, r7, #12
 800ee58:	2364      	movs	r3, #100	; 0x64
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	4810      	ldr	r0, [pc, #64]	; (800eea0 <ReadIMU+0xc0>)
 800ee5e:	f003 fcf1 	bl	8012844 <HAL_SPI_Receive>
	CS_SET;
 800ee62:	2201      	movs	r2, #1
 800ee64:	2104      	movs	r1, #4
 800ee66:	480d      	ldr	r0, [pc, #52]	; (800ee9c <ReadIMU+0xbc>)
 800ee68:	f002 fec0 	bl	8011bec <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 800ee6c:	7b7b      	ldrb	r3, [r7, #13]
 800ee6e:	021b      	lsls	r3, r3, #8
 800ee70:	b21a      	sxth	r2, r3
 800ee72:	7b3b      	ldrb	r3, [r7, #12]
 800ee74:	b21b      	sxth	r3, r3
 800ee76:	4313      	orrs	r3, r2
 800ee78:	82fb      	strh	r3, [r7, #22]
	res = (float)law_data;
 800ee7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ee7e:	ee07 3a90 	vmov	s15, r3
 800ee82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee86:	edc7 7a04 	vstr	s15, [r7, #16]
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return res;
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	ee07 3a90 	vmov	s15, r3
}
 800ee90:	eeb0 0a67 	vmov.f32	s0, s15
 800ee94:	3718      	adds	r7, #24
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	40020c00 	.word	0x40020c00
 800eea0:	200106a8 	.word	0x200106a8

0800eea4 <write_byte>:
void write_byte( uint8_t reg, uint8_t val )  {
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	4603      	mov	r3, r0
 800eeac:	460a      	mov	r2, r1
 800eeae:	71fb      	strb	r3, [r7, #7]
 800eeb0:	4613      	mov	r3, r2
 800eeb2:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800eeb4:	79fb      	ldrb	r3, [r7, #7]
 800eeb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eeba:	b2db      	uxtb	r3, r3
 800eebc:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800eebe:	2200      	movs	r2, #0
 800eec0:	2104      	movs	r1, #4
 800eec2:	480c      	ldr	r0, [pc, #48]	; (800eef4 <write_byte+0x50>)
 800eec4:	f002 fe92 	bl	8011bec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800eec8:	f107 010f 	add.w	r1, r7, #15
 800eecc:	2364      	movs	r3, #100	; 0x64
 800eece:	2201      	movs	r2, #1
 800eed0:	4809      	ldr	r0, [pc, #36]	; (800eef8 <write_byte+0x54>)
 800eed2:	f003 fb83 	bl	80125dc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800eed6:	1db9      	adds	r1, r7, #6
 800eed8:	2364      	movs	r3, #100	; 0x64
 800eeda:	2201      	movs	r2, #1
 800eedc:	4806      	ldr	r0, [pc, #24]	; (800eef8 <write_byte+0x54>)
 800eede:	f003 fb7d 	bl	80125dc <HAL_SPI_Transmit>
	CS_SET;
 800eee2:	2201      	movs	r2, #1
 800eee4:	2104      	movs	r1, #4
 800eee6:	4803      	ldr	r0, [pc, #12]	; (800eef4 <write_byte+0x50>)
 800eee8:	f002 fe80 	bl	8011bec <HAL_GPIO_WritePin>
}
 800eeec:	bf00      	nop
 800eeee:	3710      	adds	r7, #16
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}
 800eef4:	40020c00 	.word	0x40020c00
 800eef8:	200106a8 	.word	0x200106a8

0800eefc <IMU_init>:

uint8_t IMU_init() {
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800ef02:	2000      	movs	r0, #0
 800ef04:	f7ff ff40 	bl	800ed88 <read_byte>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 800ef0c:	79bb      	ldrb	r3, [r7, #6]
 800ef0e:	2be0      	cmp	r3, #224	; 0xe0
 800ef10:	d119      	bne.n	800ef46 <IMU_init+0x4a>
		ret = 1;
 800ef12:	2301      	movs	r3, #1
 800ef14:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800ef16:	2101      	movs	r1, #1
 800ef18:	2006      	movs	r0, #6
 800ef1a:	f7ff ffc3 	bl	800eea4 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800ef1e:	2110      	movs	r1, #16
 800ef20:	2003      	movs	r0, #3
 800ef22:	f7ff ffbf 	bl	800eea4 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800ef26:	2120      	movs	r1, #32
 800ef28:	207f      	movs	r0, #127	; 0x7f
 800ef2a:	f7ff ffbb 	bl	800eea4 <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800ef2e:	2117      	movs	r1, #23
 800ef30:	2001      	movs	r0, #1
 800ef32:	f7ff ffb7 	bl	800eea4 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000

		write_byte(0x14,0x17);	//	レンジ±16g 0x06
 800ef36:	2117      	movs	r1, #23
 800ef38:	2014      	movs	r0, #20
 800ef3a:	f7ff ffb3 	bl	800eea4 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16

		write_byte(0x7F,0x00);	//USER_BANK0
 800ef3e:	2100      	movs	r1, #0
 800ef40:	207f      	movs	r0, #127	; 0x7f
 800ef42:	f7ff ffaf 	bl	800eea4 <write_byte>
	}
	return ret;
 800ef46:	79fb      	ldrb	r3, [r7, #7]
	//0x14, 0x7F : 0000 1110, 0111 1111
	//retはregのまま。
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3708      	adds	r7, #8
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}

0800ef50 <IMU_Calib>:
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
}

void IMU_Calib(){
 800ef50:	b580      	push	{r7, lr}
 800ef52:	f5ad 5dfa 	sub.w	sp, sp, #8000	; 0x1f40
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0


	HAL_Delay(100);
 800ef5a:	2064      	movs	r0, #100	; 0x64
 800ef5c:	f001 f972 	bl	8010244 <HAL_Delay>

	int num = 2000;
 800ef60:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ef64:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800ef68:	f102 0204 	add.w	r2, r2, #4
 800ef6c:	6013      	str	r3, [r2, #0]
	float zg_vals[2000]={0.0f};
 800ef6e:	f107 0310 	add.w	r3, r7, #16
 800ef72:	3b0c      	subs	r3, #12
 800ef74:	4618      	mov	r0, r3
 800ef76:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	f006 f988 	bl	8015292 <memset>
	float sum=0;
 800ef82:	f04f 0300 	mov.w	r3, #0
 800ef86:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800ef8a:	f102 020c 	add.w	r2, r2, #12
 800ef8e:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < num; i++){
 800ef90:	2300      	movs	r3, #0
 800ef92:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800ef96:	f102 0208 	add.w	r2, r2, #8
 800ef9a:	6013      	str	r3, [r2, #0]
 800ef9c:	e034      	b.n	800f008 <IMU_Calib+0xb8>
		zg_vals[i] = ZGyro;
 800ef9e:	4b2a      	ldr	r3, [pc, #168]	; (800f048 <IMU_Calib+0xf8>)
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	f107 0310 	add.w	r3, r7, #16
 800efa6:	3b0c      	subs	r3, #12
 800efa8:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 800efac:	f101 0108 	add.w	r1, r1, #8
 800efb0:	6809      	ldr	r1, [r1, #0]
 800efb2:	0089      	lsls	r1, r1, #2
 800efb4:	440b      	add	r3, r1
 800efb6:	601a      	str	r2, [r3, #0]
		sum += zg_vals[i];
 800efb8:	f107 0310 	add.w	r3, r7, #16
 800efbc:	3b0c      	subs	r3, #12
 800efbe:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800efc2:	f102 0208 	add.w	r2, r2, #8
 800efc6:	6812      	ldr	r2, [r2, #0]
 800efc8:	0092      	lsls	r2, r2, #2
 800efca:	4413      	add	r3, r2
 800efcc:	edd3 7a00 	vldr	s15, [r3]
 800efd0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800efd4:	f103 030c 	add.w	r3, r3, #12
 800efd8:	ed93 7a00 	vldr	s14, [r3]
 800efdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800efe0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800efe4:	f103 030c 	add.w	r3, r3, #12
 800efe8:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 800efec:	2002      	movs	r0, #2
 800efee:	f001 f929 	bl	8010244 <HAL_Delay>
	for(int i = 0; i < num; i++){
 800eff2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800eff6:	f103 0308 	add.w	r3, r3, #8
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	3301      	adds	r3, #1
 800effe:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800f002:	f102 0208 	add.w	r2, r2, #8
 800f006:	6013      	str	r3, [r2, #0]
 800f008:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f00c:	f103 0308 	add.w	r3, r3, #8
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f016:	f103 0304 	add.w	r3, r3, #4
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	dbbe      	blt.n	800ef9e <IMU_Calib+0x4e>
//	for(int i=0; i < num; i++)
//	{
//		printf("zg_vals[%d]: %lf\r\n",i,zg_vals[i]);
//	}
//	printf("sum:%lf",sum);
	zg_offset = sum / 2000.0f;
 800f020:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800f024:	f103 030c 	add.w	r3, r3, #12
 800f028:	ed93 7a00 	vldr	s14, [r3]
 800f02c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800f04c <IMU_Calib+0xfc>
 800f030:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f034:	4b06      	ldr	r3, [pc, #24]	; (800f050 <IMU_Calib+0x100>)
 800f036:	edc3 7a00 	vstr	s15, [r3]
}
 800f03a:	bf00      	nop
 800f03c:	f507 57fa 	add.w	r7, r7, #8000	; 0x1f40
 800f040:	3710      	adds	r7, #16
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	2000fcd4 	.word	0x2000fcd4
 800f04c:	44fa0000 	.word	0x44fa0000
 800f050:	2000fcd0 	.word	0x2000fcd0

0800f054 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800f054:	b580      	push	{r7, lr}
 800f056:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800f058:	213c      	movs	r1, #60	; 0x3c
 800f05a:	4804      	ldr	r0, [pc, #16]	; (800f06c <EncoderStart+0x18>)
 800f05c:	f004 fada 	bl	8013614 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800f060:	213c      	movs	r1, #60	; 0x3c
 800f062:	4803      	ldr	r0, [pc, #12]	; (800f070 <EncoderStart+0x1c>)
 800f064:	f004 fad6 	bl	8013614 <HAL_TIM_Encoder_Start>
}
 800f068:	bf00      	nop
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	20010668 	.word	0x20010668
 800f070:	200105e0 	.word	0x200105e0

0800f074 <EncoderStop>:
//PulseInit((int *) (&(TIM3->CNT) ), INITIAL_PULSE_L);
//PulseInit((int *) (&(TIM4->CNT) ), INITIAL_PUSEL_R );
void EncoderStop()
{
 800f074:	b580      	push	{r7, lr}
 800f076:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 800f078:	213c      	movs	r1, #60	; 0x3c
 800f07a:	4804      	ldr	r0, [pc, #16]	; (800f08c <EncoderStop+0x18>)
 800f07c:	f004 fb01 	bl	8013682 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4,TIM_CHANNEL_ALL);
 800f080:	213c      	movs	r1, #60	; 0x3c
 800f082:	4803      	ldr	r0, [pc, #12]	; (800f090 <EncoderStop+0x1c>)
 800f084:	f004 fafd 	bl	8013682 <HAL_TIM_Encoder_Stop>
}
 800f088:	bf00      	nop
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	20010668 	.word	0x20010668
 800f090:	200105e0 	.word	0x200105e0

0800f094 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800f094:	b580      	push	{r7, lr}
 800f096:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800f098:	2100      	movs	r1, #0
 800f09a:	4804      	ldr	r0, [pc, #16]	; (800f0ac <EmitterON+0x18>)
 800f09c:	f004 f83e 	bl	801311c <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800f0a0:	2100      	movs	r1, #0
 800f0a2:	4802      	ldr	r0, [pc, #8]	; (800f0ac <EmitterON+0x18>)
 800f0a4:	f005 f951 	bl	801434a <HAL_TIMEx_OCN_Start_IT>

}
 800f0a8:	bf00      	nop
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	200105a0 	.word	0x200105a0

0800f0b0 <EmitterOFF>:
void EmitterOFF()
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800f0b4:	2100      	movs	r1, #0
 800f0b6:	4804      	ldr	r0, [pc, #16]	; (800f0c8 <EmitterOFF+0x18>)
 800f0b8:	f004 f8b4 	bl	8013224 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800f0bc:	2100      	movs	r1, #0
 800f0be:	4802      	ldr	r0, [pc, #8]	; (800f0c8 <EmitterOFF+0x18>)
 800f0c0:	f005 f998 	bl	80143f4 <HAL_TIMEx_OCN_Stop_IT>

}
 800f0c4:	bf00      	nop
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	200105a0 	.word	0x200105a0

0800f0cc <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2b07      	cmp	r3, #7
 800f0d8:	f200 80ac 	bhi.w	800f234 <ChangeLED+0x168>
 800f0dc:	a201      	add	r2, pc, #4	; (adr r2, 800f0e4 <ChangeLED+0x18>)
 800f0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e2:	bf00      	nop
 800f0e4:	0800f105 	.word	0x0800f105
 800f0e8:	0800f12b 	.word	0x0800f12b
 800f0ec:	0800f151 	.word	0x0800f151
 800f0f0:	0800f177 	.word	0x0800f177
 800f0f4:	0800f19d 	.word	0x0800f19d
 800f0f8:	0800f1c3 	.word	0x0800f1c3
 800f0fc:	0800f1e9 	.word	0x0800f1e9
 800f100:	0800f20f 	.word	0x0800f20f
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800f104:	2200      	movs	r2, #0
 800f106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f10a:	484d      	ldr	r0, [pc, #308]	; (800f240 <ChangeLED+0x174>)
 800f10c:	f002 fd6e 	bl	8011bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800f110:	2200      	movs	r2, #0
 800f112:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f116:	484a      	ldr	r0, [pc, #296]	; (800f240 <ChangeLED+0x174>)
 800f118:	f002 fd68 	bl	8011bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f11c:	2200      	movs	r2, #0
 800f11e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f122:	4848      	ldr	r0, [pc, #288]	; (800f244 <ChangeLED+0x178>)
 800f124:	f002 fd62 	bl	8011bec <HAL_GPIO_WritePin>
		break;
 800f128:	e085      	b.n	800f236 <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800f12a:	2201      	movs	r2, #1
 800f12c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f130:	4843      	ldr	r0, [pc, #268]	; (800f240 <ChangeLED+0x174>)
 800f132:	f002 fd5b 	bl	8011bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800f136:	2200      	movs	r2, #0
 800f138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f13c:	4840      	ldr	r0, [pc, #256]	; (800f240 <ChangeLED+0x174>)
 800f13e:	f002 fd55 	bl	8011bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f142:	2200      	movs	r2, #0
 800f144:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f148:	483e      	ldr	r0, [pc, #248]	; (800f244 <ChangeLED+0x178>)
 800f14a:	f002 fd4f 	bl	8011bec <HAL_GPIO_WritePin>
		break;
 800f14e:	e072      	b.n	800f236 <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800f150:	2200      	movs	r2, #0
 800f152:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f156:	483a      	ldr	r0, [pc, #232]	; (800f240 <ChangeLED+0x174>)
 800f158:	f002 fd48 	bl	8011bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800f15c:	2201      	movs	r2, #1
 800f15e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f162:	4837      	ldr	r0, [pc, #220]	; (800f240 <ChangeLED+0x174>)
 800f164:	f002 fd42 	bl	8011bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f168:	2200      	movs	r2, #0
 800f16a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f16e:	4835      	ldr	r0, [pc, #212]	; (800f244 <ChangeLED+0x178>)
 800f170:	f002 fd3c 	bl	8011bec <HAL_GPIO_WritePin>

		break;
 800f174:	e05f      	b.n	800f236 <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800f176:	2201      	movs	r2, #1
 800f178:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f17c:	4830      	ldr	r0, [pc, #192]	; (800f240 <ChangeLED+0x174>)
 800f17e:	f002 fd35 	bl	8011bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800f182:	2201      	movs	r2, #1
 800f184:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f188:	482d      	ldr	r0, [pc, #180]	; (800f240 <ChangeLED+0x174>)
 800f18a:	f002 fd2f 	bl	8011bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f18e:	2200      	movs	r2, #0
 800f190:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f194:	482b      	ldr	r0, [pc, #172]	; (800f244 <ChangeLED+0x178>)
 800f196:	f002 fd29 	bl	8011bec <HAL_GPIO_WritePin>
		break;
 800f19a:	e04c      	b.n	800f236 <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800f19c:	2200      	movs	r2, #0
 800f19e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1a2:	4827      	ldr	r0, [pc, #156]	; (800f240 <ChangeLED+0x174>)
 800f1a4:	f002 fd22 	bl	8011bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f1ae:	4824      	ldr	r0, [pc, #144]	; (800f240 <ChangeLED+0x174>)
 800f1b0:	f002 fd1c 	bl	8011bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1ba:	4822      	ldr	r0, [pc, #136]	; (800f244 <ChangeLED+0x178>)
 800f1bc:	f002 fd16 	bl	8011bec <HAL_GPIO_WritePin>
		break;
 800f1c0:	e039      	b.n	800f236 <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1c8:	481d      	ldr	r0, [pc, #116]	; (800f240 <ChangeLED+0x174>)
 800f1ca:	f002 fd0f 	bl	8011bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f1d4:	481a      	ldr	r0, [pc, #104]	; (800f240 <ChangeLED+0x174>)
 800f1d6:	f002 fd09 	bl	8011bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f1da:	2201      	movs	r2, #1
 800f1dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1e0:	4818      	ldr	r0, [pc, #96]	; (800f244 <ChangeLED+0x178>)
 800f1e2:	f002 fd03 	bl	8011bec <HAL_GPIO_WritePin>
		break;
 800f1e6:	e026      	b.n	800f236 <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1ee:	4814      	ldr	r0, [pc, #80]	; (800f240 <ChangeLED+0x174>)
 800f1f0:	f002 fcfc 	bl	8011bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800f1f4:	2201      	movs	r2, #1
 800f1f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f1fa:	4811      	ldr	r0, [pc, #68]	; (800f240 <ChangeLED+0x174>)
 800f1fc:	f002 fcf6 	bl	8011bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f200:	2201      	movs	r2, #1
 800f202:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f206:	480f      	ldr	r0, [pc, #60]	; (800f244 <ChangeLED+0x178>)
 800f208:	f002 fcf0 	bl	8011bec <HAL_GPIO_WritePin>

		break;
 800f20c:	e013      	b.n	800f236 <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800f20e:	2201      	movs	r2, #1
 800f210:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f214:	480a      	ldr	r0, [pc, #40]	; (800f240 <ChangeLED+0x174>)
 800f216:	f002 fce9 	bl	8011bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800f21a:	2201      	movs	r2, #1
 800f21c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f220:	4807      	ldr	r0, [pc, #28]	; (800f240 <ChangeLED+0x174>)
 800f222:	f002 fce3 	bl	8011bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f226:	2201      	movs	r2, #1
 800f228:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f22c:	4805      	ldr	r0, [pc, #20]	; (800f244 <ChangeLED+0x178>)
 800f22e:	f002 fcdd 	bl	8011bec <HAL_GPIO_WritePin>

		break;
 800f232:	e000      	b.n	800f236 <ChangeLED+0x16a>
	default: break;
 800f234:	bf00      	nop

	}
}
 800f236:	bf00      	nop
 800f238:	3708      	adds	r7, #8
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop
 800f240:	40020800 	.word	0x40020800
 800f244:	40020400 	.word	0x40020400

0800f248 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800f248:	b580      	push	{r7, lr}
 800f24a:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800f24c:	210c      	movs	r1, #12
 800f24e:	4809      	ldr	r0, [pc, #36]	; (800f274 <Motor_PWM_Start+0x2c>)
 800f250:	f004 f8b8 	bl	80133c4 <HAL_TIM_PWM_Start>
 800f254:	4603      	mov	r3, r0
 800f256:	2b00      	cmp	r3, #0
 800f258:	d001      	beq.n	800f25e <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800f25a:	f7fe ffc3 	bl	800e1e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800f25e:	2104      	movs	r1, #4
 800f260:	4805      	ldr	r0, [pc, #20]	; (800f278 <Motor_PWM_Start+0x30>)
 800f262:	f004 f8af 	bl	80133c4 <HAL_TIM_PWM_Start>
 800f266:	4603      	mov	r3, r0
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d001      	beq.n	800f270 <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800f26c:	f7fe ffba 	bl	800e1e4 <Error_Handler>
  }
#endif
}
 800f270:	bf00      	nop
 800f272:	bd80      	pop	{r7, pc}
 800f274:	2000fc3c 	.word	0x2000fc3c
 800f278:	2000fc7c 	.word	0x2000fc7c

0800f27c <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800f27c:	b580      	push	{r7, lr}
 800f27e:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800f280:	210c      	movs	r1, #12
 800f282:	4809      	ldr	r0, [pc, #36]	; (800f2a8 <Motor_PWM_Stop+0x2c>)
 800f284:	f004 f8dc 	bl	8013440 <HAL_TIM_PWM_Stop>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d001      	beq.n	800f292 <Motor_PWM_Stop+0x16>
  {
	  Error_Handler();
 800f28e:	f7fe ffa9 	bl	800e1e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800f292:	2104      	movs	r1, #4
 800f294:	4805      	ldr	r0, [pc, #20]	; (800f2ac <Motor_PWM_Stop+0x30>)
 800f296:	f004 f8d3 	bl	8013440 <HAL_TIM_PWM_Stop>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d001      	beq.n	800f2a4 <Motor_PWM_Stop+0x28>
  {
	  Error_Handler();
 800f2a0:	f7fe ffa0 	bl	800e1e4 <Error_Handler>
  }
#endif
}
 800f2a4:	bf00      	nop
 800f2a6:	bd80      	pop	{r7, pc}
 800f2a8:	2000fc3c 	.word	0x2000fc3c
 800f2ac:	2000fc7c 	.word	0x2000fc7c

0800f2b0 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	dd05      	ble.n	800f2cc <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	2104      	movs	r1, #4
 800f2c4:	4828      	ldr	r0, [pc, #160]	; (800f368 <Motor_Switch+0xb8>)
 800f2c6:	f002 fc91 	bl	8011bec <HAL_GPIO_WritePin>
 800f2ca:	e00a      	b.n	800f2e2 <Motor_Switch+0x32>

	}
	else  if (left < 0){
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	da07      	bge.n	800f2e2 <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	2104      	movs	r1, #4
 800f2d6:	4824      	ldr	r0, [pc, #144]	; (800f368 <Motor_Switch+0xb8>)
 800f2d8:	f002 fc88 	bl	8011bec <HAL_GPIO_WritePin>
		left = -left;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	425b      	negs	r3, r3
 800f2e0:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	dd05      	ble.n	800f2f4 <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	2101      	movs	r1, #1
 800f2ec:	481e      	ldr	r0, [pc, #120]	; (800f368 <Motor_Switch+0xb8>)
 800f2ee:	f002 fc7d 	bl	8011bec <HAL_GPIO_WritePin>
 800f2f2:	e00a      	b.n	800f30a <Motor_Switch+0x5a>

	}

	else if (right < 0){
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	da07      	bge.n	800f30a <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	2101      	movs	r1, #1
 800f2fe:	481a      	ldr	r0, [pc, #104]	; (800f368 <Motor_Switch+0xb8>)
 800f300:	f002 fc74 	bl	8011bec <HAL_GPIO_WritePin>
	  	right = -right;
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	425b      	negs	r3, r3
 800f308:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7f9 f842 	bl	8008394 <__aeabi_i2d>
 800f310:	a313      	add	r3, pc, #76	; (adr r3, 800f360 <Motor_Switch+0xb0>)
 800f312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f316:	f7f9 fb37 	bl	8008988 <__aeabi_dcmpgt>
 800f31a:	4603      	mov	r3, r0
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d002      	beq.n	800f326 <Motor_Switch+0x76>
 800f320:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800f324:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 800f326:	6838      	ldr	r0, [r7, #0]
 800f328:	f7f9 f834 	bl	8008394 <__aeabi_i2d>
 800f32c:	a30c      	add	r3, pc, #48	; (adr r3, 800f360 <Motor_Switch+0xb0>)
 800f32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f332:	f7f9 fb29 	bl	8008988 <__aeabi_dcmpgt>
 800f336:	4603      	mov	r3, r0
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d002      	beq.n	800f342 <Motor_Switch+0x92>
 800f33c:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800f340:	603b      	str	r3, [r7, #0]


	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800f342:	4b0a      	ldr	r3, [pc, #40]	; (800f36c <Motor_Switch+0xbc>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	683a      	ldr	r2, [r7, #0]
 800f348:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800f34a:	4b09      	ldr	r3, [pc, #36]	; (800f370 <Motor_Switch+0xc0>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	641a      	str	r2, [r3, #64]	; 0x40
}
 800f352:	bf00      	nop
 800f354:	3708      	adds	r7, #8
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	f3af 8000 	nop.w
 800f360:	00000000 	.word	0x00000000
 800f364:	40a3b000 	.word	0x40a3b000
 800f368:	40020000 	.word	0x40020000
 800f36c:	2000fc7c 	.word	0x2000fc7c
 800f370:	2000fc3c 	.word	0x2000fc3c

0800f374 <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 800f374:	b480      	push	{r7}
 800f376:	b083      	sub	sp, #12
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	683a      	ldr	r2, [r7, #0]
 800f382:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 800f384:	bf00      	nop
 800f386:	370c      	adds	r7, #12
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr

0800f390 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 800f390:	b480      	push	{r7}
 800f392:	b087      	sub	sp, #28
 800f394:	af00      	add	r7, sp, #0
 800f396:	60f8      	str	r0, [r7, #12]
 800f398:	60b9      	str	r1, [r7, #8]
 800f39a:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 800f3a0:	4a2c      	ldr	r2, [pc, #176]	; (800f454 <GetWallDataAverage+0xc4>)
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	1ad3      	subs	r3, r2, r3
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	bfb8      	it	lt
 800f3b0:	425b      	neglt	r3, r3
 800f3b2:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 800f3b4:	4927      	ldr	r1, [pc, #156]	; (800f454 <GetWallDataAverage+0xc4>)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	697a      	ldr	r2, [r7, #20]
 800f3ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 800f3be:	4a26      	ldr	r2, [pc, #152]	; (800f458 <GetWallDataAverage+0xc8>)
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	441a      	add	r2, r3
 800f3ca:	4923      	ldr	r1, [pc, #140]	; (800f458 <GetWallDataAverage+0xc8>)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 800f3d2:	4a22      	ldr	r2, [pc, #136]	; (800f45c <GetWallDataAverage+0xcc>)
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3da:	1c5a      	adds	r2, r3, #1
 800f3dc:	491f      	ldr	r1, [pc, #124]	; (800f45c <GetWallDataAverage+0xcc>)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800f3e4:	4a1d      	ldr	r2, [pc, #116]	; (800f45c <GetWallDataAverage+0xcc>)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d121      	bne.n	800f436 <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800f3f2:	4a19      	ldr	r2, [pc, #100]	; (800f458 <GetWallDataAverage+0xc8>)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3fa:	ee07 3a90 	vmov	s15, r3
 800f3fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f402:	4a16      	ldr	r2, [pc, #88]	; (800f45c <GetWallDataAverage+0xcc>)
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f40a:	ee07 3a90 	vmov	s15, r3
 800f40e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f416:	4a12      	ldr	r2, [pc, #72]	; (800f460 <GetWallDataAverage+0xd0>)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	4413      	add	r3, r2
 800f41e:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 800f422:	4a0d      	ldr	r2, [pc, #52]	; (800f458 <GetWallDataAverage+0xc8>)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2100      	movs	r1, #0
 800f428:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 800f42c:	4a0b      	ldr	r2, [pc, #44]	; (800f45c <GetWallDataAverage+0xcc>)
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2100      	movs	r1, #0
 800f432:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 800f436:	4a0a      	ldr	r2, [pc, #40]	; (800f460 <GetWallDataAverage+0xd0>)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	009b      	lsls	r3, r3, #2
 800f43c:	4413      	add	r3, r2
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	ee07 3a90 	vmov	s15, r3
}
 800f444:	eeb0 0a67 	vmov.f32	s0, s15
 800f448:	371c      	adds	r7, #28
 800f44a:	46bd      	mov	sp, r7
 800f44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f450:	4770      	bx	lr
 800f452:	bf00      	nop
 800f454:	2000fcd8 	.word	0x2000fcd8
 800f458:	2000fce8 	.word	0x2000fce8
 800f45c:	2000fcf8 	.word	0x2000fcf8
 800f460:	2000fd08 	.word	0x2000fd08

0800f464 <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 800f464:	b480      	push	{r7}
 800f466:	b087      	sub	sp, #28
 800f468:	af00      	add	r7, sp, #0
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	ed87 0a02 	vstr	s0, [r7, #8]
 800f470:	edc7 0a01 	vstr	s1, [r7, #4]
 800f474:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 800f478:	f04f 0300 	mov.w	r3, #0
 800f47c:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	ee07 3a90 	vmov	s15, r3
 800f484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f488:	edd7 7a02 	vldr	s15, [r7, #8]
 800f48c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f490:	edd7 7a01 	vldr	s15, [r7, #4]
 800f494:	ee67 6a27 	vmul.f32	s13, s14, s15
 800f498:	ed97 7a00 	vldr	s14, [r7]
 800f49c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f4a0:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	ee07 3a90 	vmov	s15, r3
}
 800f4aa:	eeb0 0a67 	vmov.f32	s0, s15
 800f4ae:	371c      	adds	r7, #28
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr

0800f4b8 <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b085      	sub	sp, #20
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	60bb      	str	r3, [r7, #8]
 800f4ca:	e007      	b.n	800f4dc <IntegerPower+0x24>
	{
		pattern_num *= integer;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	fb02 f303 	mul.w	r3, r2, r3
 800f4d4:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	3301      	adds	r3, #1
 800f4da:	60bb      	str	r3, [r7, #8]
 800f4dc:	68ba      	ldr	r2, [r7, #8]
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	dbf3      	blt.n	800f4cc <IntegerPower+0x14>
	}
	return pattern_num;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3714      	adds	r7, #20
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr

0800f4f2 <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 800f4f2:	b480      	push	{r7}
 800f4f4:	b08b      	sub	sp, #44	; 0x2c
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	ed87 0a03 	vstr	s0, [r7, #12]
 800f4fc:	edc7 0a02 	vstr	s1, [r7, #8]
 800f500:	ed87 1a01 	vstr	s2, [r7, #4]
 800f504:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 800f506:	edd7 6a03 	vldr	s13, [r7, #12]
 800f50a:	ed97 7a01 	vldr	s14, [r7, #4]
 800f50e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f512:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 800f516:	edd7 6a02 	vldr	s13, [r7, #8]
 800f51a:	ed97 7a01 	vldr	s14, [r7, #4]
 800f51e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f522:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800f526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f52a:	edd7 7a06 	vldr	s15, [r7, #24]
 800f52e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	ee07 3a90 	vmov	s15, r3
 800f538:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f53c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f540:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 800f544:	2300      	movs	r3, #0
 800f546:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800f548:	2300      	movs	r3, #0
 800f54a:	623b      	str	r3, [r7, #32]
 800f54c:	e018      	b.n	800f580 <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800f54e:	6a3b      	ldr	r3, [r7, #32]
 800f550:	ee07 3a90 	vmov	s15, r3
 800f554:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f558:	edd7 7a05 	vldr	s15, [r7, #20]
 800f55c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f560:	edd7 7a06 	vldr	s15, [r7, #24]
 800f564:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f568:	ed97 7a07 	vldr	s14, [r7, #28]
 800f56c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f574:	db01      	blt.n	800f57a <GetBatteryLevel+0x88>
		{
			pattern = i;
 800f576:	6a3b      	ldr	r3, [r7, #32]
 800f578:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800f57a:	6a3b      	ldr	r3, [r7, #32]
 800f57c:	3301      	adds	r3, #1
 800f57e:	623b      	str	r3, [r7, #32]
 800f580:	6a3a      	ldr	r2, [r7, #32]
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	429a      	cmp	r2, r3
 800f586:	dbe2      	blt.n	800f54e <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 800f588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	372c      	adds	r7, #44	; 0x2c
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr
	...

0800f598 <Buffering>:
//{
//	Photo[SL];
//	FLASH_Write_Word_F(address, data);
//}
void Buffering()
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	af00      	add	r7, sp, #0
	  setbuf(stdout,NULL);
 800f59c:	4b07      	ldr	r3, [pc, #28]	; (800f5bc <Buffering+0x24>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	689b      	ldr	r3, [r3, #8]
 800f5a2:	2100      	movs	r1, #0
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f006 fd4f 	bl	8016048 <setbuf>
	  setbuf(stdin,NULL);
 800f5aa:	4b04      	ldr	r3, [pc, #16]	; (800f5bc <Buffering+0x24>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	2100      	movs	r1, #0
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f006 fd48 	bl	8016048 <setbuf>
}
 800f5b8:	bf00      	nop
 800f5ba:	bd80      	pop	{r7, pc}
 800f5bc:	20000028 	.word	0x20000028

0800f5c0 <Copy_Gain>:
void Copy_Gain()
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b092      	sub	sp, #72	; 0x48
 800f5c4:	af00      	add	r7, sp, #0
	//コピーしなくても、単品で書き込める。
	//セクター消去して、一つ一つ書き込む。
	//printf("\r\nどしたん\r\n");

	uint32_t address = start_adress_sector9;
 800f5c6:	4b2c      	ldr	r3, [pc, #176]	; (800f678 <Copy_Gain+0xb8>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	647b      	str	r3, [r7, #68]	; 0x44
	float data[16]={0};
 800f5cc:	463b      	mov	r3, r7
 800f5ce:	2240      	movs	r2, #64	; 0x40
 800f5d0:	2100      	movs	r1, #0
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f005 fe5d 	bl	8015292 <memset>
	data[0] = Pid[L_VELO_PID].KP;
 800f5d8:	4b28      	ldr	r3, [pc, #160]	; (800f67c <Copy_Gain+0xbc>)
 800f5da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f5de:	603b      	str	r3, [r7, #0]
	data[1] = Pid[L_VELO_PID].KI;
 800f5e0:	4b26      	ldr	r3, [pc, #152]	; (800f67c <Copy_Gain+0xbc>)
 800f5e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f5e6:	607b      	str	r3, [r7, #4]
	data[2] = Pid[L_VELO_PID].KD;
 800f5e8:	4b24      	ldr	r3, [pc, #144]	; (800f67c <Copy_Gain+0xbc>)
 800f5ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f5ee:	60bb      	str	r3, [r7, #8]

	data[3] = Pid[A_VELO_PID].KP;
 800f5f0:	4b22      	ldr	r3, [pc, #136]	; (800f67c <Copy_Gain+0xbc>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	60fb      	str	r3, [r7, #12]
	data[4] = Pid[A_VELO_PID].KI;
 800f5f6:	4b21      	ldr	r3, [pc, #132]	; (800f67c <Copy_Gain+0xbc>)
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	613b      	str	r3, [r7, #16]
	data[5] = Pid[A_VELO_PID].KD;
 800f5fc:	4b1f      	ldr	r3, [pc, #124]	; (800f67c <Copy_Gain+0xbc>)
 800f5fe:	689b      	ldr	r3, [r3, #8]
 800f600:	617b      	str	r3, [r7, #20]

	data[6] = Pid[L_WALL_PID].KP;
 800f602:	4b1e      	ldr	r3, [pc, #120]	; (800f67c <Copy_Gain+0xbc>)
 800f604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f606:	61bb      	str	r3, [r7, #24]
	data[7] = Pid[L_WALL_PID].KI;
 800f608:	4b1c      	ldr	r3, [pc, #112]	; (800f67c <Copy_Gain+0xbc>)
 800f60a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f60c:	61fb      	str	r3, [r7, #28]
	data[8] = Pid[L_WALL_PID].KD;
 800f60e:	4b1b      	ldr	r3, [pc, #108]	; (800f67c <Copy_Gain+0xbc>)
 800f610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f612:	623b      	str	r3, [r7, #32]

	data[9] = Pid[R_WALL_PID].KP;
 800f614:	4b19      	ldr	r3, [pc, #100]	; (800f67c <Copy_Gain+0xbc>)
 800f616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f61a:	627b      	str	r3, [r7, #36]	; 0x24
	data[10] = Pid[R_WALL_PID].KI;
 800f61c:	4b17      	ldr	r3, [pc, #92]	; (800f67c <Copy_Gain+0xbc>)
 800f61e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f622:	62bb      	str	r3, [r7, #40]	; 0x28
	data[11] = Pid[R_WALL_PID].KD;
 800f624:	4b15      	ldr	r3, [pc, #84]	; (800f67c <Copy_Gain+0xbc>)
 800f626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f62a:	62fb      	str	r3, [r7, #44]	; 0x2c

	data[12] = Pid[D_WALL_PID].KP;
 800f62c:	4b13      	ldr	r3, [pc, #76]	; (800f67c <Copy_Gain+0xbc>)
 800f62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f630:	633b      	str	r3, [r7, #48]	; 0x30
	data[13] = Pid[D_WALL_PID].KI;
 800f632:	4b12      	ldr	r3, [pc, #72]	; (800f67c <Copy_Gain+0xbc>)
 800f634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f636:	637b      	str	r3, [r7, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 800f638:	4b10      	ldr	r3, [pc, #64]	; (800f67c <Copy_Gain+0xbc>)
 800f63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f63c:	63bb      	str	r3, [r7, #56]	; 0x38
	for(int i=0; i < 15; i++)
 800f63e:	2300      	movs	r3, #0
 800f640:	643b      	str	r3, [r7, #64]	; 0x40
 800f642:	e012      	b.n	800f66a <Copy_Gain+0xaa>
	{

		FLASH_Write_Word_F( address, data[i]);
 800f644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f646:	009b      	lsls	r3, r3, #2
 800f648:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f64c:	4413      	add	r3, r2
 800f64e:	3b48      	subs	r3, #72	; 0x48
 800f650:	edd3 7a00 	vldr	s15, [r3]
 800f654:	eeb0 0a67 	vmov.f32	s0, s15
 800f658:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f65a:	f7ff faef 	bl	800ec3c <FLASH_Write_Word_F>
		address += 0x04;
 800f65e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f660:	3304      	adds	r3, #4
 800f662:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i < 15; i++)
 800f664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f666:	3301      	adds	r3, #1
 800f668:	643b      	str	r3, [r7, #64]	; 0x40
 800f66a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f66c:	2b0e      	cmp	r3, #14
 800f66e:	dde9      	ble.n	800f644 <Copy_Gain+0x84>

	//printf("\r\nはなしきこか？\r\n");
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
 800f670:	bf00      	nop
 800f672:	3748      	adds	r7, #72	; 0x48
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	0801a5dc 	.word	0x0801a5dc
 800f67c:	2000fd18 	.word	0x2000fd18

0800f680 <Load_Gain>:
void Load_Gain()
{
 800f680:	b590      	push	{r4, r7, lr}
 800f682:	b095      	sub	sp, #84	; 0x54
 800f684:	af00      	add	r7, sp, #0
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 800f686:	4b59      	ldr	r3, [pc, #356]	; (800f7ec <Load_Gain+0x16c>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	64fb      	str	r3, [r7, #76]	; 0x4c
	float data[16]={0};//1個多く要素を作る。
 800f68c:	463b      	mov	r3, r7
 800f68e:	2240      	movs	r2, #64	; 0x40
 800f690:	2100      	movs	r1, #0
 800f692:	4618      	mov	r0, r3
 800f694:	f005 fdfd 	bl	8015292 <memset>

	//チェック
	int judge;
	uint8_t j=0;
 800f698:	2300      	movs	r3, #0
 800f69a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 800f69e:	2300      	movs	r3, #0
 800f6a0:	647b      	str	r3, [r7, #68]	; 0x44
 800f6a2:	e038      	b.n	800f716 <Load_Gain+0x96>
	{
		FLASH_Read_Word_F( address, &data[i]);//かこれ
 800f6a4:	463a      	mov	r2, r7
 800f6a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6a8:	009b      	lsls	r3, r3, #2
 800f6aa:	4413      	add	r3, r2
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f6b0:	f7ff faee 	bl	800ec90 <FLASH_Read_Word_F>
		address += 0x04;
 800f6b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6b6:	3304      	adds	r3, #4
 800f6b8:	64fb      	str	r3, [r7, #76]	; 0x4c
		printf("%d, %f\r\n",i,data[i]);
 800f6ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6bc:	009b      	lsls	r3, r3, #2
 800f6be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f6c2:	4413      	add	r3, r2
 800f6c4:	3b50      	subs	r3, #80	; 0x50
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7f8 fe75 	bl	80083b8 <__aeabi_f2d>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	460c      	mov	r4, r1
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	4623      	mov	r3, r4
 800f6d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6d8:	4845      	ldr	r0, [pc, #276]	; (800f7f0 <Load_Gain+0x170>)
 800f6da:	f006 fc21 	bl	8015f20 <iprintf>
		//work_ram[]がデフォ値なら、そのまま
		judge = isnanf(data[i]);
 800f6de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6e0:	009b      	lsls	r3, r3, #2
 800f6e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f6e6:	4413      	add	r3, r2
 800f6e8:	3b50      	subs	r3, #80	; 0x50
 800f6ea:	edd3 7a00 	vldr	s15, [r3]
 800f6ee:	eef4 7a67 	vcmp.f32	s15, s15
 800f6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f6:	bf6c      	ite	vs
 800f6f8:	2301      	movvs	r3, #1
 800f6fa:	2300      	movvc	r3, #0
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	643b      	str	r3, [r7, #64]	; 0x40
		if(judge != 0)
 800f700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f702:	2b00      	cmp	r3, #0
 800f704:	d004      	beq.n	800f710 <Load_Gain+0x90>
		{
			j++;
 800f706:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800f70a:	3301      	adds	r3, #1
 800f70c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 800f710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f712:	3301      	adds	r3, #1
 800f714:	647b      	str	r3, [r7, #68]	; 0x44
 800f716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f718:	2b0e      	cmp	r3, #14
 800f71a:	ddc3      	ble.n	800f6a4 <Load_Gain+0x24>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 800f71c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800f720:	4619      	mov	r1, r3
 800f722:	4834      	ldr	r0, [pc, #208]	; (800f7f4 <Load_Gain+0x174>)
 800f724:	f006 fbfc 	bl	8015f20 <iprintf>
		if(j == 15)//全てnan0であれば
 800f728:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800f72c:	2b0f      	cmp	r3, #15
 800f72e:	d059      	beq.n	800f7e4 <Load_Gain+0x164>
//			Pid[A_VELO_PID].KD = data[5];
//
//			Pid[L_WALL_PID].KP = data[6];
//			Pid[L_WALL_PID].KI = data[7];
//			Pid[L_WALL_PID].KD = data[8];
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 800f730:	edd7 7a00 	vldr	s15, [r7]
 800f734:	ed97 7a01 	vldr	s14, [r7, #4]
 800f738:	edd7 6a02 	vldr	s13, [r7, #8]
 800f73c:	eeb0 1a66 	vmov.f32	s2, s13
 800f740:	eef0 0a47 	vmov.f32	s1, s14
 800f744:	eeb0 0a67 	vmov.f32	s0, s15
 800f748:	2004      	movs	r0, #4
 800f74a:	f000 fa29 	bl	800fba0 <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 800f74e:	edd7 7a00 	vldr	s15, [r7]
 800f752:	ed97 7a01 	vldr	s14, [r7, #4]
 800f756:	edd7 6a02 	vldr	s13, [r7, #8]
 800f75a:	eeb0 1a66 	vmov.f32	s2, s13
 800f75e:	eef0 0a47 	vmov.f32	s1, s14
 800f762:	eeb0 0a67 	vmov.f32	s0, s15
 800f766:	2005      	movs	r0, #5
 800f768:	f000 fa1a 	bl	800fba0 <PIDSetGain>
			//PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
			//PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
			//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800f76c:	edd7 7a03 	vldr	s15, [r7, #12]
 800f770:	ed97 7a04 	vldr	s14, [r7, #16]
 800f774:	edd7 6a05 	vldr	s13, [r7, #20]
 800f778:	eeb0 1a66 	vmov.f32	s2, s13
 800f77c:	eef0 0a47 	vmov.f32	s1, s14
 800f780:	eeb0 0a67 	vmov.f32	s0, s15
 800f784:	2000      	movs	r0, #0
 800f786:	f000 fa0b 	bl	800fba0 <PIDSetGain>
			//Iは積分=偏差を消す。ゲインが大きいと偏差が縮まるが、収束がはやくなるがオーバーシュートが起きる。
			//Dは微分= 振動を抑えられるぶん収束が遅くなる。
			//PIDSetGain(D_WALL_PID, data[0], data[1], data[2]);
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 800f78a:	edd7 7a06 	vldr	s15, [r7, #24]
 800f78e:	ed97 7a07 	vldr	s14, [r7, #28]
 800f792:	edd7 6a08 	vldr	s13, [r7, #32]
 800f796:	eeb0 1a66 	vmov.f32	s2, s13
 800f79a:	eef0 0a47 	vmov.f32	s1, s14
 800f79e:	eeb0 0a67 	vmov.f32	s0, s15
 800f7a2:	2002      	movs	r0, #2
 800f7a4:	f000 f9fc 	bl	800fba0 <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 800f7a8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f7ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f7b0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800f7b4:	eeb0 1a66 	vmov.f32	s2, s13
 800f7b8:	eef0 0a47 	vmov.f32	s1, s14
 800f7bc:	eeb0 0a67 	vmov.f32	s0, s15
 800f7c0:	2003      	movs	r0, #3
 800f7c2:	f000 f9ed 	bl	800fba0 <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 800f7c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f7ca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f7ce:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800f7d2:	eeb0 1a66 	vmov.f32	s2, s13
 800f7d6:	eef0 0a47 	vmov.f32	s1, s14
 800f7da:	eeb0 0a67 	vmov.f32	s0, s15
 800f7de:	2001      	movs	r0, #1
 800f7e0:	f000 f9de 	bl	800fba0 <PIDSetGain>
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 800f7e4:	bf00      	nop
 800f7e6:	3754      	adds	r7, #84	; 0x54
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd90      	pop	{r4, r7, pc}
 800f7ec:	0801a5dc 	.word	0x0801a5dc
 800f7f0:	0801a444 	.word	0x0801a444
 800f7f4:	0801a450 	.word	0x0801a450

0800f7f8 <Change_Gain>:
void Change_Gain()
{
 800f7f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f7fc:	b086      	sub	sp, #24
 800f7fe:	af04      	add	r7, sp, #16
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 800f800:	48af      	ldr	r0, [pc, #700]	; (800fac0 <Change_Gain+0x2c8>)
 800f802:	f003 fc2a 	bl	801305a <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800f806:	48af      	ldr	r0, [pc, #700]	; (800fac4 <Change_Gain+0x2cc>)
 800f808:	f003 fc27 	bl	801305a <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 800f80c:	f7ff fd36 	bl	800f27c <Motor_PWM_Stop>
	EmitterOFF();
 800f810:	f7ff fc4e 	bl	800f0b0 <EmitterOFF>
//	ADCStart();
//	printf("start\r\n");
	//ADCStop();//ここ
	HAL_Delay(200);
 800f814:	20c8      	movs	r0, #200	; 0xc8
 800f816:	f000 fd15 	bl	8010244 <HAL_Delay>

	//ゲイン調整する
	char change_mode='0';
 800f81a:	2330      	movs	r3, #48	; 0x30
 800f81c:	71fb      	strb	r3, [r7, #7]
	char pid = '0';
 800f81e:	2330      	movs	r3, #48	; 0x30
 800f820:	71bb      	strb	r3, [r7, #6]
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 800f822:	48a9      	ldr	r0, [pc, #676]	; (800fac8 <Change_Gain+0x2d0>)
 800f824:	f006 fbf0 	bl	8016008 <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800f828:	4ba8      	ldr	r3, [pc, #672]	; (800facc <Change_Gain+0x2d4>)
 800f82a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f82e:	4618      	mov	r0, r3
 800f830:	f7f8 fdc2 	bl	80083b8 <__aeabi_f2d>
 800f834:	4680      	mov	r8, r0
 800f836:	4689      	mov	r9, r1
 800f838:	4ba4      	ldr	r3, [pc, #656]	; (800facc <Change_Gain+0x2d4>)
 800f83a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f83e:	4618      	mov	r0, r3
 800f840:	f7f8 fdba 	bl	80083b8 <__aeabi_f2d>
 800f844:	4604      	mov	r4, r0
 800f846:	460d      	mov	r5, r1
 800f848:	4ba0      	ldr	r3, [pc, #640]	; (800facc <Change_Gain+0x2d4>)
 800f84a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f84e:	4618      	mov	r0, r3
 800f850:	f7f8 fdb2 	bl	80083b8 <__aeabi_f2d>
 800f854:	4602      	mov	r2, r0
 800f856:	460b      	mov	r3, r1
 800f858:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f85c:	e9cd 4500 	strd	r4, r5, [sp]
 800f860:	4642      	mov	r2, r8
 800f862:	464b      	mov	r3, r9
 800f864:	489a      	ldr	r0, [pc, #616]	; (800fad0 <Change_Gain+0x2d8>)
 800f866:	f006 fb5b 	bl	8015f20 <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800f86a:	4b98      	ldr	r3, [pc, #608]	; (800facc <Change_Gain+0x2d4>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	4618      	mov	r0, r3
 800f870:	f7f8 fda2 	bl	80083b8 <__aeabi_f2d>
 800f874:	4680      	mov	r8, r0
 800f876:	4689      	mov	r9, r1
 800f878:	4b94      	ldr	r3, [pc, #592]	; (800facc <Change_Gain+0x2d4>)
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7f8 fd9b 	bl	80083b8 <__aeabi_f2d>
 800f882:	4604      	mov	r4, r0
 800f884:	460d      	mov	r5, r1
 800f886:	4b91      	ldr	r3, [pc, #580]	; (800facc <Change_Gain+0x2d4>)
 800f888:	689b      	ldr	r3, [r3, #8]
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7f8 fd94 	bl	80083b8 <__aeabi_f2d>
 800f890:	4602      	mov	r2, r0
 800f892:	460b      	mov	r3, r1
 800f894:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f898:	e9cd 4500 	strd	r4, r5, [sp]
 800f89c:	4642      	mov	r2, r8
 800f89e:	464b      	mov	r3, r9
 800f8a0:	488c      	ldr	r0, [pc, #560]	; (800fad4 <Change_Gain+0x2dc>)
 800f8a2:	f006 fb3d 	bl	8015f20 <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 800f8a6:	4b89      	ldr	r3, [pc, #548]	; (800facc <Change_Gain+0x2d4>)
 800f8a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7f8 fd84 	bl	80083b8 <__aeabi_f2d>
 800f8b0:	4680      	mov	r8, r0
 800f8b2:	4689      	mov	r9, r1
 800f8b4:	4b85      	ldr	r3, [pc, #532]	; (800facc <Change_Gain+0x2d4>)
 800f8b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7f8 fd7d 	bl	80083b8 <__aeabi_f2d>
 800f8be:	4604      	mov	r4, r0
 800f8c0:	460d      	mov	r5, r1
 800f8c2:	4b82      	ldr	r3, [pc, #520]	; (800facc <Change_Gain+0x2d4>)
 800f8c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7f8 fd76 	bl	80083b8 <__aeabi_f2d>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f8d4:	e9cd 4500 	strd	r4, r5, [sp]
 800f8d8:	4642      	mov	r2, r8
 800f8da:	464b      	mov	r3, r9
 800f8dc:	487e      	ldr	r0, [pc, #504]	; (800fad8 <Change_Gain+0x2e0>)
 800f8de:	f006 fb1f 	bl	8015f20 <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 800f8e2:	4b7a      	ldr	r3, [pc, #488]	; (800facc <Change_Gain+0x2d4>)
 800f8e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7f8 fd65 	bl	80083b8 <__aeabi_f2d>
 800f8ee:	4680      	mov	r8, r0
 800f8f0:	4689      	mov	r9, r1
 800f8f2:	4b76      	ldr	r3, [pc, #472]	; (800facc <Change_Gain+0x2d4>)
 800f8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7f8 fd5d 	bl	80083b8 <__aeabi_f2d>
 800f8fe:	4604      	mov	r4, r0
 800f900:	460d      	mov	r5, r1
 800f902:	4b72      	ldr	r3, [pc, #456]	; (800facc <Change_Gain+0x2d4>)
 800f904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f908:	4618      	mov	r0, r3
 800f90a:	f7f8 fd55 	bl	80083b8 <__aeabi_f2d>
 800f90e:	4602      	mov	r2, r0
 800f910:	460b      	mov	r3, r1
 800f912:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f916:	e9cd 4500 	strd	r4, r5, [sp]
 800f91a:	4642      	mov	r2, r8
 800f91c:	464b      	mov	r3, r9
 800f91e:	486f      	ldr	r0, [pc, #444]	; (800fadc <Change_Gain+0x2e4>)
 800f920:	f006 fafe 	bl	8015f20 <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 800f924:	4b69      	ldr	r3, [pc, #420]	; (800facc <Change_Gain+0x2d4>)
 800f926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f928:	4618      	mov	r0, r3
 800f92a:	f7f8 fd45 	bl	80083b8 <__aeabi_f2d>
 800f92e:	4680      	mov	r8, r0
 800f930:	4689      	mov	r9, r1
 800f932:	4b66      	ldr	r3, [pc, #408]	; (800facc <Change_Gain+0x2d4>)
 800f934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f936:	4618      	mov	r0, r3
 800f938:	f7f8 fd3e 	bl	80083b8 <__aeabi_f2d>
 800f93c:	4604      	mov	r4, r0
 800f93e:	460d      	mov	r5, r1
 800f940:	4b62      	ldr	r3, [pc, #392]	; (800facc <Change_Gain+0x2d4>)
 800f942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f944:	4618      	mov	r0, r3
 800f946:	f7f8 fd37 	bl	80083b8 <__aeabi_f2d>
 800f94a:	4602      	mov	r2, r0
 800f94c:	460b      	mov	r3, r1
 800f94e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f952:	e9cd 4500 	strd	r4, r5, [sp]
 800f956:	4642      	mov	r2, r8
 800f958:	464b      	mov	r3, r9
 800f95a:	4861      	ldr	r0, [pc, #388]	; (800fae0 <Change_Gain+0x2e8>)
 800f95c:	f006 fae0 	bl	8015f20 <iprintf>

		Buffering();
 800f960:	f7ff fe1a 	bl	800f598 <Buffering>
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 800f964:	485f      	ldr	r0, [pc, #380]	; (800fae4 <Change_Gain+0x2ec>)
 800f966:	f006 fadb 	bl	8015f20 <iprintf>
 800f96a:	1dfb      	adds	r3, r7, #7
 800f96c:	4619      	mov	r1, r3
 800f96e:	485e      	ldr	r0, [pc, #376]	; (800fae8 <Change_Gain+0x2f0>)
 800f970:	f006 fb52 	bl	8016018 <iscanf>
		if(change_mode == '0')
 800f974:	79fb      	ldrb	r3, [r7, #7]
 800f976:	2b30      	cmp	r3, #48	; 0x30
 800f978:	f000 80f4 	beq.w	800fb64 <Change_Gain+0x36c>
			break;
		}
		else
		{

			Buffering();
 800f97c:	f7ff fe0c 	bl	800f598 <Buffering>
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 800f980:	485a      	ldr	r0, [pc, #360]	; (800faec <Change_Gain+0x2f4>)
 800f982:	f006 facd 	bl	8015f20 <iprintf>
 800f986:	1dbb      	adds	r3, r7, #6
 800f988:	4619      	mov	r1, r3
 800f98a:	4857      	ldr	r0, [pc, #348]	; (800fae8 <Change_Gain+0x2f0>)
 800f98c:	f006 fb44 	bl	8016018 <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 800f990:	79fb      	ldrb	r3, [r7, #7]
 800f992:	4619      	mov	r1, r3
 800f994:	79bb      	ldrb	r3, [r7, #6]
 800f996:	461a      	mov	r2, r3
 800f998:	4855      	ldr	r0, [pc, #340]	; (800faf0 <Change_Gain+0x2f8>)
 800f99a:	f006 fac1 	bl	8015f20 <iprintf>

			Buffering();
 800f99e:	f7ff fdfb 	bl	800f598 <Buffering>
			printf("\r\n値を入力 : ");
 800f9a2:	4854      	ldr	r0, [pc, #336]	; (800faf4 <Change_Gain+0x2fc>)
 800f9a4:	f006 fabc 	bl	8015f20 <iprintf>

			switch(change_mode)
 800f9a8:	79fb      	ldrb	r3, [r7, #7]
 800f9aa:	3b31      	subs	r3, #49	; 0x31
 800f9ac:	2b04      	cmp	r3, #4
 800f9ae:	f200 80c1 	bhi.w	800fb34 <Change_Gain+0x33c>
 800f9b2:	a201      	add	r2, pc, #4	; (adr r2, 800f9b8 <Change_Gain+0x1c0>)
 800f9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9b8:	0800f9cd 	.word	0x0800f9cd
 800f9bc:	0800f9ff 	.word	0x0800f9ff
 800f9c0:	0800fa31 	.word	0x0800fa31
 800f9c4:	0800fa61 	.word	0x0800fa61
 800f9c8:	0800fa91 	.word	0x0800fa91
			{
			case '1'://並進速度制御ゲイン
				//printf("p , i or d ?");scanf("%c",pid);

				if(pid == 'p')
 800f9cc:	79bb      	ldrb	r3, [r7, #6]
 800f9ce:	2b70      	cmp	r3, #112	; 0x70
 800f9d0:	d104      	bne.n	800f9dc <Change_Gain+0x1e4>
				{
					scanf("%f",&Pid[L_VELO_PID].KP);
 800f9d2:	4949      	ldr	r1, [pc, #292]	; (800faf8 <Change_Gain+0x300>)
 800f9d4:	4849      	ldr	r0, [pc, #292]	; (800fafc <Change_Gain+0x304>)
 800f9d6:	f006 fb1f 	bl	8016018 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_VELO_PID].KD);
				}
				break;
 800f9da:	e0af      	b.n	800fb3c <Change_Gain+0x344>
				else if(pid == 'i')
 800f9dc:	79bb      	ldrb	r3, [r7, #6]
 800f9de:	2b69      	cmp	r3, #105	; 0x69
 800f9e0:	d104      	bne.n	800f9ec <Change_Gain+0x1f4>
					scanf("%f",&Pid[L_VELO_PID].KI);
 800f9e2:	4947      	ldr	r1, [pc, #284]	; (800fb00 <Change_Gain+0x308>)
 800f9e4:	4845      	ldr	r0, [pc, #276]	; (800fafc <Change_Gain+0x304>)
 800f9e6:	f006 fb17 	bl	8016018 <iscanf>
				break;
 800f9ea:	e0a7      	b.n	800fb3c <Change_Gain+0x344>
				else if(pid == 'd')
 800f9ec:	79bb      	ldrb	r3, [r7, #6]
 800f9ee:	2b64      	cmp	r3, #100	; 0x64
 800f9f0:	f040 80a4 	bne.w	800fb3c <Change_Gain+0x344>
					scanf("%f",&Pid[L_VELO_PID].KD);
 800f9f4:	4943      	ldr	r1, [pc, #268]	; (800fb04 <Change_Gain+0x30c>)
 800f9f6:	4841      	ldr	r0, [pc, #260]	; (800fafc <Change_Gain+0x304>)
 800f9f8:	f006 fb0e 	bl	8016018 <iscanf>
				break;
 800f9fc:	e09e      	b.n	800fb3c <Change_Gain+0x344>

			case '2'://回転角速度制御ゲイン
				if(pid == 'p')
 800f9fe:	79bb      	ldrb	r3, [r7, #6]
 800fa00:	2b70      	cmp	r3, #112	; 0x70
 800fa02:	d104      	bne.n	800fa0e <Change_Gain+0x216>
				{
					scanf("%f",&Pid[A_VELO_PID].KP);
 800fa04:	4931      	ldr	r1, [pc, #196]	; (800facc <Change_Gain+0x2d4>)
 800fa06:	483d      	ldr	r0, [pc, #244]	; (800fafc <Change_Gain+0x304>)
 800fa08:	f006 fb06 	bl	8016018 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[A_VELO_PID].KD);
				}
				break;
 800fa0c:	e098      	b.n	800fb40 <Change_Gain+0x348>
				else if(pid == 'i')
 800fa0e:	79bb      	ldrb	r3, [r7, #6]
 800fa10:	2b69      	cmp	r3, #105	; 0x69
 800fa12:	d104      	bne.n	800fa1e <Change_Gain+0x226>
					scanf("%f",&Pid[A_VELO_PID].KI);
 800fa14:	493c      	ldr	r1, [pc, #240]	; (800fb08 <Change_Gain+0x310>)
 800fa16:	4839      	ldr	r0, [pc, #228]	; (800fafc <Change_Gain+0x304>)
 800fa18:	f006 fafe 	bl	8016018 <iscanf>
				break;
 800fa1c:	e090      	b.n	800fb40 <Change_Gain+0x348>
				else if(pid == 'd')
 800fa1e:	79bb      	ldrb	r3, [r7, #6]
 800fa20:	2b64      	cmp	r3, #100	; 0x64
 800fa22:	f040 808d 	bne.w	800fb40 <Change_Gain+0x348>
					scanf("%f",&Pid[A_VELO_PID].KD);
 800fa26:	4939      	ldr	r1, [pc, #228]	; (800fb0c <Change_Gain+0x314>)
 800fa28:	4834      	ldr	r0, [pc, #208]	; (800fafc <Change_Gain+0x304>)
 800fa2a:	f006 faf5 	bl	8016018 <iscanf>
				break;
 800fa2e:	e087      	b.n	800fb40 <Change_Gain+0x348>

			case '3'://壁制御ゲイン
				if(pid == 'p')
 800fa30:	79bb      	ldrb	r3, [r7, #6]
 800fa32:	2b70      	cmp	r3, #112	; 0x70
 800fa34:	d104      	bne.n	800fa40 <Change_Gain+0x248>
				{
					scanf("%f",&Pid[L_WALL_PID].KP);
 800fa36:	4936      	ldr	r1, [pc, #216]	; (800fb10 <Change_Gain+0x318>)
 800fa38:	4830      	ldr	r0, [pc, #192]	; (800fafc <Change_Gain+0x304>)
 800fa3a:	f006 faed 	bl	8016018 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_WALL_PID].KD);
				}
				break;
 800fa3e:	e081      	b.n	800fb44 <Change_Gain+0x34c>
				else if(pid == 'i')
 800fa40:	79bb      	ldrb	r3, [r7, #6]
 800fa42:	2b69      	cmp	r3, #105	; 0x69
 800fa44:	d104      	bne.n	800fa50 <Change_Gain+0x258>
					scanf("%f",&Pid[L_WALL_PID].KI);
 800fa46:	4933      	ldr	r1, [pc, #204]	; (800fb14 <Change_Gain+0x31c>)
 800fa48:	482c      	ldr	r0, [pc, #176]	; (800fafc <Change_Gain+0x304>)
 800fa4a:	f006 fae5 	bl	8016018 <iscanf>
				break;
 800fa4e:	e079      	b.n	800fb44 <Change_Gain+0x34c>
				else if(pid == 'd')
 800fa50:	79bb      	ldrb	r3, [r7, #6]
 800fa52:	2b64      	cmp	r3, #100	; 0x64
 800fa54:	d176      	bne.n	800fb44 <Change_Gain+0x34c>
					scanf("%f",&Pid[L_WALL_PID].KD);
 800fa56:	4930      	ldr	r1, [pc, #192]	; (800fb18 <Change_Gain+0x320>)
 800fa58:	4828      	ldr	r0, [pc, #160]	; (800fafc <Change_Gain+0x304>)
 800fa5a:	f006 fadd 	bl	8016018 <iscanf>
				break;
 800fa5e:	e071      	b.n	800fb44 <Change_Gain+0x34c>
			case '4'://壁制御ゲイン
				if(pid == 'p')
 800fa60:	79bb      	ldrb	r3, [r7, #6]
 800fa62:	2b70      	cmp	r3, #112	; 0x70
 800fa64:	d104      	bne.n	800fa70 <Change_Gain+0x278>
				{
					scanf("%f",&Pid[R_WALL_PID].KP);
 800fa66:	492d      	ldr	r1, [pc, #180]	; (800fb1c <Change_Gain+0x324>)
 800fa68:	4824      	ldr	r0, [pc, #144]	; (800fafc <Change_Gain+0x304>)
 800fa6a:	f006 fad5 	bl	8016018 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
 800fa6e:	e06b      	b.n	800fb48 <Change_Gain+0x350>
				else if(pid == 'i')
 800fa70:	79bb      	ldrb	r3, [r7, #6]
 800fa72:	2b69      	cmp	r3, #105	; 0x69
 800fa74:	d104      	bne.n	800fa80 <Change_Gain+0x288>
					scanf("%f",&Pid[R_WALL_PID].KI);
 800fa76:	492a      	ldr	r1, [pc, #168]	; (800fb20 <Change_Gain+0x328>)
 800fa78:	4820      	ldr	r0, [pc, #128]	; (800fafc <Change_Gain+0x304>)
 800fa7a:	f006 facd 	bl	8016018 <iscanf>
				break;
 800fa7e:	e063      	b.n	800fb48 <Change_Gain+0x350>
				else if(pid == 'd')
 800fa80:	79bb      	ldrb	r3, [r7, #6]
 800fa82:	2b64      	cmp	r3, #100	; 0x64
 800fa84:	d160      	bne.n	800fb48 <Change_Gain+0x350>
					scanf("%f",&Pid[R_WALL_PID].KD);
 800fa86:	4927      	ldr	r1, [pc, #156]	; (800fb24 <Change_Gain+0x32c>)
 800fa88:	481c      	ldr	r0, [pc, #112]	; (800fafc <Change_Gain+0x304>)
 800fa8a:	f006 fac5 	bl	8016018 <iscanf>
				break;
 800fa8e:	e05b      	b.n	800fb48 <Change_Gain+0x350>
			case '5'://壁制御ゲイン
				if(pid == 'p')
 800fa90:	79bb      	ldrb	r3, [r7, #6]
 800fa92:	2b70      	cmp	r3, #112	; 0x70
 800fa94:	d104      	bne.n	800faa0 <Change_Gain+0x2a8>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
 800fa96:	4924      	ldr	r1, [pc, #144]	; (800fb28 <Change_Gain+0x330>)
 800fa98:	4818      	ldr	r0, [pc, #96]	; (800fafc <Change_Gain+0x304>)
 800fa9a:	f006 fabd 	bl	8016018 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[D_WALL_PID].KD);
				}
				break;
 800fa9e:	e055      	b.n	800fb4c <Change_Gain+0x354>
				else if(pid == 'i')
 800faa0:	79bb      	ldrb	r3, [r7, #6]
 800faa2:	2b69      	cmp	r3, #105	; 0x69
 800faa4:	d104      	bne.n	800fab0 <Change_Gain+0x2b8>
					scanf("%f",&Pid[D_WALL_PID].KI);
 800faa6:	4921      	ldr	r1, [pc, #132]	; (800fb2c <Change_Gain+0x334>)
 800faa8:	4814      	ldr	r0, [pc, #80]	; (800fafc <Change_Gain+0x304>)
 800faaa:	f006 fab5 	bl	8016018 <iscanf>
				break;
 800faae:	e04d      	b.n	800fb4c <Change_Gain+0x354>
				else if(pid == 'd')
 800fab0:	79bb      	ldrb	r3, [r7, #6]
 800fab2:	2b64      	cmp	r3, #100	; 0x64
 800fab4:	d14a      	bne.n	800fb4c <Change_Gain+0x354>
					scanf("%f",&Pid[D_WALL_PID].KD);
 800fab6:	491e      	ldr	r1, [pc, #120]	; (800fb30 <Change_Gain+0x338>)
 800fab8:	4810      	ldr	r0, [pc, #64]	; (800fafc <Change_Gain+0x304>)
 800faba:	f006 faad 	bl	8016018 <iscanf>
				break;
 800fabe:	e045      	b.n	800fb4c <Change_Gain+0x354>
 800fac0:	200107e8 	.word	0x200107e8
 800fac4:	200105a0 	.word	0x200105a0
 800fac8:	0801a458 	.word	0x0801a458
 800facc:	2000fd18 	.word	0x2000fd18
 800fad0:	0801a470 	.word	0x0801a470
 800fad4:	0801a490 	.word	0x0801a490
 800fad8:	0801a4ac 	.word	0x0801a4ac
 800fadc:	0801a4c8 	.word	0x0801a4c8
 800fae0:	0801a4e4 	.word	0x0801a4e4
 800fae4:	0801a500 	.word	0x0801a500
 800fae8:	0801a518 	.word	0x0801a518
 800faec:	0801a51c 	.word	0x0801a51c
 800faf0:	0801a530 	.word	0x0801a530
 800faf4:	0801a554 	.word	0x0801a554
 800faf8:	2000fdc8 	.word	0x2000fdc8
 800fafc:	0801a568 	.word	0x0801a568
 800fb00:	2000fdcc 	.word	0x2000fdcc
 800fb04:	2000fdd0 	.word	0x2000fdd0
 800fb08:	2000fd1c 	.word	0x2000fd1c
 800fb0c:	2000fd20 	.word	0x2000fd20
 800fb10:	2000fd70 	.word	0x2000fd70
 800fb14:	2000fd74 	.word	0x2000fd74
 800fb18:	2000fd78 	.word	0x2000fd78
 800fb1c:	2000fd9c 	.word	0x2000fd9c
 800fb20:	2000fda0 	.word	0x2000fda0
 800fb24:	2000fda4 	.word	0x2000fda4
 800fb28:	2000fd44 	.word	0x2000fd44
 800fb2c:	2000fd48 	.word	0x2000fd48
 800fb30:	2000fd4c 	.word	0x2000fd4c
			default :
				printf("該当しません\r\n");
 800fb34:	4816      	ldr	r0, [pc, #88]	; (800fb90 <Change_Gain+0x398>)
 800fb36:	f006 fa67 	bl	8016008 <puts>
				break;
 800fb3a:	e008      	b.n	800fb4e <Change_Gain+0x356>
				break;
 800fb3c:	bf00      	nop
 800fb3e:	e006      	b.n	800fb4e <Change_Gain+0x356>
				break;
 800fb40:	bf00      	nop
 800fb42:	e004      	b.n	800fb4e <Change_Gain+0x356>
				break;
 800fb44:	bf00      	nop
 800fb46:	e002      	b.n	800fb4e <Change_Gain+0x356>
				break;
 800fb48:	bf00      	nop
 800fb4a:	e000      	b.n	800fb4e <Change_Gain+0x356>
				break;
 800fb4c:	bf00      	nop
			}
			Buffering();
 800fb4e:	f7ff fd23 	bl	800f598 <Buffering>
			scanf("%c",&nl);
 800fb52:	1d7b      	adds	r3, r7, #5
 800fb54:	4619      	mov	r1, r3
 800fb56:	480f      	ldr	r0, [pc, #60]	; (800fb94 <Change_Gain+0x39c>)
 800fb58:	f006 fa5e 	bl	8016018 <iscanf>
			printf("\r\n");
 800fb5c:	480e      	ldr	r0, [pc, #56]	; (800fb98 <Change_Gain+0x3a0>)
 800fb5e:	f006 fa53 	bl	8016008 <puts>
		printf("現在のPIDゲイン\r\n");
 800fb62:	e65e      	b.n	800f822 <Change_Gain+0x2a>
			break;
 800fb64:	bf00      	nop
		}

	}
	printf("\r\n完了\r\n");
 800fb66:	480d      	ldr	r0, [pc, #52]	; (800fb9c <Change_Gain+0x3a4>)
 800fb68:	f006 fa4e 	bl	8016008 <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 800fb6c:	f7ff f8e3 	bl	800ed36 <Flash_clear_sector9>
	//printf("\r\nどや\r\n");
	Copy_Gain();
 800fb70:	f7ff fd26 	bl	800f5c0 <Copy_Gain>
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 800fb74:	2007      	movs	r0, #7
 800fb76:	f7ff faa9 	bl	800f0cc <ChangeLED>
	HAL_Delay(200);
 800fb7a:	20c8      	movs	r0, #200	; 0xc8
 800fb7c:	f000 fb62 	bl	8010244 <HAL_Delay>
	ChangeLED(0);
 800fb80:	2000      	movs	r0, #0
 800fb82:	f7ff faa3 	bl	800f0cc <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 800fb86:	bf00      	nop
 800fb88:	3708      	adds	r7, #8
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800fb90:	0801a56c 	.word	0x0801a56c
 800fb94:	0801a518 	.word	0x0801a518
 800fb98:	0801a580 	.word	0x0801a580
 800fb9c:	0801a584 	.word	0x0801a584

0800fba0 <PIDSetGain>:
//		elast[i] = 0;
//		//PidFlag[i] = 0;
//	}
//}
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 800fba0:	b480      	push	{r7}
 800fba2:	b085      	sub	sp, #20
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	ed87 0a02 	vstr	s0, [r7, #8]
 800fbac:	edc7 0a01 	vstr	s1, [r7, #4]
 800fbb0:	ed87 1a00 	vstr	s2, [r7]
	Pid[n].KP = kp;
 800fbb4:	4a0f      	ldr	r2, [pc, #60]	; (800fbf4 <PIDSetGain+0x54>)
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	212c      	movs	r1, #44	; 0x2c
 800fbba:	fb01 f303 	mul.w	r3, r1, r3
 800fbbe:	4413      	add	r3, r2
 800fbc0:	68ba      	ldr	r2, [r7, #8]
 800fbc2:	601a      	str	r2, [r3, #0]
	Pid[n].KI = ki;
 800fbc4:	4a0b      	ldr	r2, [pc, #44]	; (800fbf4 <PIDSetGain+0x54>)
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	212c      	movs	r1, #44	; 0x2c
 800fbca:	fb01 f303 	mul.w	r3, r1, r3
 800fbce:	4413      	add	r3, r2
 800fbd0:	3304      	adds	r3, #4
 800fbd2:	687a      	ldr	r2, [r7, #4]
 800fbd4:	601a      	str	r2, [r3, #0]
	Pid[n].KD = kd;
 800fbd6:	4a07      	ldr	r2, [pc, #28]	; (800fbf4 <PIDSetGain+0x54>)
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	212c      	movs	r1, #44	; 0x2c
 800fbdc:	fb01 f303 	mul.w	r3, r1, r3
 800fbe0:	4413      	add	r3, r2
 800fbe2:	3308      	adds	r3, #8
 800fbe4:	683a      	ldr	r2, [r7, #0]
 800fbe6:	601a      	str	r2, [r3, #0]

}
 800fbe8:	bf00      	nop
 800fbea:	3714      	adds	r7, #20
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr
 800fbf4:	2000fd18 	.word	0x2000fd18

0800fbf8 <PIDChangeFlag>:
//	ei[n] = 0;
//	elast[n] = 0;
//}

void PIDChangeFlag(int n, int on_or_off)
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b083      	sub	sp, #12
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	6039      	str	r1, [r7, #0]
	Pid[n].flag = on_or_off;
 800fc02:	4a07      	ldr	r2, [pc, #28]	; (800fc20 <PIDChangeFlag+0x28>)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	212c      	movs	r1, #44	; 0x2c
 800fc08:	fb01 f303 	mul.w	r3, r1, r3
 800fc0c:	4413      	add	r3, r2
 800fc0e:	3328      	adds	r3, #40	; 0x28
 800fc10:	683a      	ldr	r2, [r7, #0]
 800fc12:	601a      	str	r2, [r3, #0]
}
 800fc14:	bf00      	nop
 800fc16:	370c      	adds	r7, #12
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1e:	4770      	bx	lr
 800fc20:	2000fd18 	.word	0x2000fd18

0800fc24 <PIDReset>:
int PIDGetFlag(int n)
{
	return Pid[n].flag;
}
void PIDReset(int n)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 800fc2c:	4a1b      	ldr	r2, [pc, #108]	; (800fc9c <PIDReset+0x78>)
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	212c      	movs	r1, #44	; 0x2c
 800fc32:	fb01 f303 	mul.w	r3, r1, r3
 800fc36:	4413      	add	r3, r2
 800fc38:	330c      	adds	r3, #12
 800fc3a:	f04f 0200 	mov.w	r2, #0
 800fc3e:	601a      	str	r2, [r3, #0]
	Pid[n].ei = 0;
 800fc40:	4a16      	ldr	r2, [pc, #88]	; (800fc9c <PIDReset+0x78>)
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	212c      	movs	r1, #44	; 0x2c
 800fc46:	fb01 f303 	mul.w	r3, r1, r3
 800fc4a:	4413      	add	r3, r2
 800fc4c:	3310      	adds	r3, #16
 800fc4e:	f04f 0200 	mov.w	r2, #0
 800fc52:	601a      	str	r2, [r3, #0]
	Pid[n].ed = 0;
 800fc54:	4a11      	ldr	r2, [pc, #68]	; (800fc9c <PIDReset+0x78>)
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	212c      	movs	r1, #44	; 0x2c
 800fc5a:	fb01 f303 	mul.w	r3, r1, r3
 800fc5e:	4413      	add	r3, r2
 800fc60:	3314      	adds	r3, #20
 800fc62:	f04f 0200 	mov.w	r2, #0
 800fc66:	601a      	str	r2, [r3, #0]
	Pid[n].elast = 0;
 800fc68:	4a0c      	ldr	r2, [pc, #48]	; (800fc9c <PIDReset+0x78>)
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	212c      	movs	r1, #44	; 0x2c
 800fc6e:	fb01 f303 	mul.w	r3, r1, r3
 800fc72:	4413      	add	r3, r2
 800fc74:	3318      	adds	r3, #24
 800fc76:	f04f 0200 	mov.w	r2, #0
 800fc7a:	601a      	str	r2, [r3, #0]
	Pid[n].out = 0;
 800fc7c:	4a07      	ldr	r2, [pc, #28]	; (800fc9c <PIDReset+0x78>)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	212c      	movs	r1, #44	; 0x2c
 800fc82:	fb01 f303 	mul.w	r3, r1, r3
 800fc86:	4413      	add	r3, r2
 800fc88:	3324      	adds	r3, #36	; 0x24
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	601a      	str	r2, [r3, #0]
}
 800fc8e:	bf00      	nop
 800fc90:	370c      	adds	r7, #12
 800fc92:	46bd      	mov	sp, r7
 800fc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc98:	4770      	bx	lr
 800fc9a:	bf00      	nop
 800fc9c:	2000fd18 	.word	0x2000fd18

0800fca0 <PIDControl>:
//{
//	Pid[n].target = target;
//	Pid[n].current = current;
//}
inline int PIDControl(int n, float target, float current)
{
 800fca0:	b590      	push	{r4, r7, lr}
 800fca2:	b085      	sub	sp, #20
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	ed87 0a02 	vstr	s0, [r7, #8]
 800fcac:	edc7 0a01 	vstr	s1, [r7, #4]
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 800fcb0:	4a90      	ldr	r2, [pc, #576]	; (800fef4 <PIDControl+0x254>)
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	212c      	movs	r1, #44	; 0x2c
 800fcb6:	fb01 f303 	mul.w	r3, r1, r3
 800fcba:	4413      	add	r3, r2
 800fcbc:	3328      	adds	r3, #40	; 0x28
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d132      	bne.n	800fd2a <PIDControl+0x8a>
	{
		Pid[n].e = 0.0f;
 800fcc4:	4a8b      	ldr	r2, [pc, #556]	; (800fef4 <PIDControl+0x254>)
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	212c      	movs	r1, #44	; 0x2c
 800fcca:	fb01 f303 	mul.w	r3, r1, r3
 800fcce:	4413      	add	r3, r2
 800fcd0:	330c      	adds	r3, #12
 800fcd2:	f04f 0200 	mov.w	r2, #0
 800fcd6:	601a      	str	r2, [r3, #0]
		Pid[n].ei = 0.0f;
 800fcd8:	4a86      	ldr	r2, [pc, #536]	; (800fef4 <PIDControl+0x254>)
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	212c      	movs	r1, #44	; 0x2c
 800fcde:	fb01 f303 	mul.w	r3, r1, r3
 800fce2:	4413      	add	r3, r2
 800fce4:	3310      	adds	r3, #16
 800fce6:	f04f 0200 	mov.w	r2, #0
 800fcea:	601a      	str	r2, [r3, #0]
		Pid[n].ed = 0.0f;
 800fcec:	4a81      	ldr	r2, [pc, #516]	; (800fef4 <PIDControl+0x254>)
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	212c      	movs	r1, #44	; 0x2c
 800fcf2:	fb01 f303 	mul.w	r3, r1, r3
 800fcf6:	4413      	add	r3, r2
 800fcf8:	3314      	adds	r3, #20
 800fcfa:	f04f 0200 	mov.w	r2, #0
 800fcfe:	601a      	str	r2, [r3, #0]
		Pid[n].elast = 0.0f;
 800fd00:	4a7c      	ldr	r2, [pc, #496]	; (800fef4 <PIDControl+0x254>)
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	212c      	movs	r1, #44	; 0x2c
 800fd06:	fb01 f303 	mul.w	r3, r1, r3
 800fd0a:	4413      	add	r3, r2
 800fd0c:	3318      	adds	r3, #24
 800fd0e:	f04f 0200 	mov.w	r2, #0
 800fd12:	601a      	str	r2, [r3, #0]
		Pid[n].out = 0;
 800fd14:	4a77      	ldr	r2, [pc, #476]	; (800fef4 <PIDControl+0x254>)
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	212c      	movs	r1, #44	; 0x2c
 800fd1a:	fb01 f303 	mul.w	r3, r1, r3
 800fd1e:	4413      	add	r3, r2
 800fd20:	3324      	adds	r3, #36	; 0x24
 800fd22:	2200      	movs	r2, #0
 800fd24:	601a      	str	r2, [r3, #0]
		return 0;
 800fd26:	2300      	movs	r3, #0
 800fd28:	e0df      	b.n	800feea <PIDControl+0x24a>
		//PIDReset(n);
	}
	else
	{
		Pid[n].target = target;
 800fd2a:	4a72      	ldr	r2, [pc, #456]	; (800fef4 <PIDControl+0x254>)
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	212c      	movs	r1, #44	; 0x2c
 800fd30:	fb01 f303 	mul.w	r3, r1, r3
 800fd34:	4413      	add	r3, r2
 800fd36:	3320      	adds	r3, #32
 800fd38:	68ba      	ldr	r2, [r7, #8]
 800fd3a:	601a      	str	r2, [r3, #0]
		Pid[n].current = current;
 800fd3c:	4a6d      	ldr	r2, [pc, #436]	; (800fef4 <PIDControl+0x254>)
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	212c      	movs	r1, #44	; 0x2c
 800fd42:	fb01 f303 	mul.w	r3, r1, r3
 800fd46:	4413      	add	r3, r2
 800fd48:	331c      	adds	r3, #28
 800fd4a:	687a      	ldr	r2, [r7, #4]
 800fd4c:	601a      	str	r2, [r3, #0]

		Pid[n].e = Pid[n].target - Pid[n].current;
 800fd4e:	4a69      	ldr	r2, [pc, #420]	; (800fef4 <PIDControl+0x254>)
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	212c      	movs	r1, #44	; 0x2c
 800fd54:	fb01 f303 	mul.w	r3, r1, r3
 800fd58:	4413      	add	r3, r2
 800fd5a:	3320      	adds	r3, #32
 800fd5c:	ed93 7a00 	vldr	s14, [r3]
 800fd60:	4a64      	ldr	r2, [pc, #400]	; (800fef4 <PIDControl+0x254>)
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	212c      	movs	r1, #44	; 0x2c
 800fd66:	fb01 f303 	mul.w	r3, r1, r3
 800fd6a:	4413      	add	r3, r2
 800fd6c:	331c      	adds	r3, #28
 800fd6e:	edd3 7a00 	vldr	s15, [r3]
 800fd72:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd76:	4a5f      	ldr	r2, [pc, #380]	; (800fef4 <PIDControl+0x254>)
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	212c      	movs	r1, #44	; 0x2c
 800fd7c:	fb01 f303 	mul.w	r3, r1, r3
 800fd80:	4413      	add	r3, r2
 800fd82:	330c      	adds	r3, #12
 800fd84:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ei += Pid[n].e * pid_T;
 800fd88:	4a5a      	ldr	r2, [pc, #360]	; (800fef4 <PIDControl+0x254>)
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	212c      	movs	r1, #44	; 0x2c
 800fd8e:	fb01 f303 	mul.w	r3, r1, r3
 800fd92:	4413      	add	r3, r2
 800fd94:	3310      	adds	r3, #16
 800fd96:	ed93 7a00 	vldr	s14, [r3]
 800fd9a:	4a56      	ldr	r2, [pc, #344]	; (800fef4 <PIDControl+0x254>)
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	212c      	movs	r1, #44	; 0x2c
 800fda0:	fb01 f303 	mul.w	r3, r1, r3
 800fda4:	4413      	add	r3, r2
 800fda6:	330c      	adds	r3, #12
 800fda8:	edd3 7a00 	vldr	s15, [r3]
 800fdac:	eddf 6a52 	vldr	s13, [pc, #328]	; 800fef8 <PIDControl+0x258>
 800fdb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fdb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fdb8:	4a4e      	ldr	r2, [pc, #312]	; (800fef4 <PIDControl+0x254>)
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	212c      	movs	r1, #44	; 0x2c
 800fdbe:	fb01 f303 	mul.w	r3, r1, r3
 800fdc2:	4413      	add	r3, r2
 800fdc4:	3310      	adds	r3, #16
 800fdc6:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800fdca:	4a4a      	ldr	r2, [pc, #296]	; (800fef4 <PIDControl+0x254>)
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	212c      	movs	r1, #44	; 0x2c
 800fdd0:	fb01 f303 	mul.w	r3, r1, r3
 800fdd4:	4413      	add	r3, r2
 800fdd6:	330c      	adds	r3, #12
 800fdd8:	ed93 7a00 	vldr	s14, [r3]
 800fddc:	4a45      	ldr	r2, [pc, #276]	; (800fef4 <PIDControl+0x254>)
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	212c      	movs	r1, #44	; 0x2c
 800fde2:	fb01 f303 	mul.w	r3, r1, r3
 800fde6:	4413      	add	r3, r2
 800fde8:	3318      	adds	r3, #24
 800fdea:	edd3 7a00 	vldr	s15, [r3]
 800fdee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fdf2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800fefc <PIDControl+0x25c>
 800fdf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fdfa:	4a3e      	ldr	r2, [pc, #248]	; (800fef4 <PIDControl+0x254>)
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	212c      	movs	r1, #44	; 0x2c
 800fe00:	fb01 f303 	mul.w	r3, r1, r3
 800fe04:	4413      	add	r3, r2
 800fe06:	3314      	adds	r3, #20
 800fe08:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].elast = Pid[n].e;
 800fe0c:	4a39      	ldr	r2, [pc, #228]	; (800fef4 <PIDControl+0x254>)
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	212c      	movs	r1, #44	; 0x2c
 800fe12:	fb01 f303 	mul.w	r3, r1, r3
 800fe16:	4413      	add	r3, r2
 800fe18:	330c      	adds	r3, #12
 800fe1a:	681a      	ldr	r2, [r3, #0]
 800fe1c:	4935      	ldr	r1, [pc, #212]	; (800fef4 <PIDControl+0x254>)
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	202c      	movs	r0, #44	; 0x2c
 800fe22:	fb00 f303 	mul.w	r3, r0, r3
 800fe26:	440b      	add	r3, r1
 800fe28:	3318      	adds	r3, #24
 800fe2a:	601a      	str	r2, [r3, #0]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800fe2c:	4a31      	ldr	r2, [pc, #196]	; (800fef4 <PIDControl+0x254>)
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	212c      	movs	r1, #44	; 0x2c
 800fe32:	fb01 f303 	mul.w	r3, r1, r3
 800fe36:	4413      	add	r3, r2
 800fe38:	ed93 7a00 	vldr	s14, [r3]
 800fe3c:	4a2d      	ldr	r2, [pc, #180]	; (800fef4 <PIDControl+0x254>)
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	212c      	movs	r1, #44	; 0x2c
 800fe42:	fb01 f303 	mul.w	r3, r1, r3
 800fe46:	4413      	add	r3, r2
 800fe48:	330c      	adds	r3, #12
 800fe4a:	edd3 7a00 	vldr	s15, [r3]
 800fe4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fe52:	4a28      	ldr	r2, [pc, #160]	; (800fef4 <PIDControl+0x254>)
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	212c      	movs	r1, #44	; 0x2c
 800fe58:	fb01 f303 	mul.w	r3, r1, r3
 800fe5c:	4413      	add	r3, r2
 800fe5e:	3304      	adds	r3, #4
 800fe60:	edd3 6a00 	vldr	s13, [r3]
 800fe64:	4a23      	ldr	r2, [pc, #140]	; (800fef4 <PIDControl+0x254>)
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	212c      	movs	r1, #44	; 0x2c
 800fe6a:	fb01 f303 	mul.w	r3, r1, r3
 800fe6e:	4413      	add	r3, r2
 800fe70:	3310      	adds	r3, #16
 800fe72:	edd3 7a00 	vldr	s15, [r3]
 800fe76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fe7e:	4a1d      	ldr	r2, [pc, #116]	; (800fef4 <PIDControl+0x254>)
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	212c      	movs	r1, #44	; 0x2c
 800fe84:	fb01 f303 	mul.w	r3, r1, r3
 800fe88:	4413      	add	r3, r2
 800fe8a:	3308      	adds	r3, #8
 800fe8c:	edd3 6a00 	vldr	s13, [r3]
 800fe90:	4a18      	ldr	r2, [pc, #96]	; (800fef4 <PIDControl+0x254>)
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	212c      	movs	r1, #44	; 0x2c
 800fe96:	fb01 f303 	mul.w	r3, r1, r3
 800fe9a:	4413      	add	r3, r2
 800fe9c:	3314      	adds	r3, #20
 800fe9e:	edd3 7a00 	vldr	s15, [r3]
 800fea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800feaa:	ee17 0a90 	vmov	r0, s15
 800feae:	f7f8 fa83 	bl	80083b8 <__aeabi_f2d>
 800feb2:	4603      	mov	r3, r0
 800feb4:	460c      	mov	r4, r1
 800feb6:	ec44 3b10 	vmov	d0, r3, r4
 800feba:	f005 f96b 	bl	8015194 <round>
 800febe:	ec54 3b10 	vmov	r3, r4, d0
 800fec2:	4618      	mov	r0, r3
 800fec4:	4621      	mov	r1, r4
 800fec6:	f7f8 fd7f 	bl	80089c8 <__aeabi_d2iz>
 800feca:	4a0a      	ldr	r2, [pc, #40]	; (800fef4 <PIDControl+0x254>)
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	212c      	movs	r1, #44	; 0x2c
 800fed0:	fb01 f303 	mul.w	r3, r1, r3
 800fed4:	4413      	add	r3, r2
 800fed6:	3324      	adds	r3, #36	; 0x24
 800fed8:	6018      	str	r0, [r3, #0]
		return Pid[n].out;
 800feda:	4a06      	ldr	r2, [pc, #24]	; (800fef4 <PIDControl+0x254>)
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	212c      	movs	r1, #44	; 0x2c
 800fee0:	fb01 f303 	mul.w	r3, r1, r3
 800fee4:	4413      	add	r3, r2
 800fee6:	3324      	adds	r3, #36	; 0x24
 800fee8:	681b      	ldr	r3, [r3, #0]
	}
	//*output = Pid[n].out;
	//PIDOutput( n, output );

}
 800feea:	4618      	mov	r0, r3
 800feec:	3714      	adds	r7, #20
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd90      	pop	{r4, r7, pc}
 800fef2:	bf00      	nop
 800fef4:	2000fd18 	.word	0x2000fd18
 800fef8:	3a83126f 	.word	0x3a83126f
 800fefc:	4479ffff 	.word	0x4479ffff

0800ff00 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int mode)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b084      	sub	sp, #16
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
	for(int i=0; i < 5; i++)
 800ff08:	2300      	movs	r3, #0
 800ff0a:	60fb      	str	r3, [r7, #12]
 800ff0c:	e00e      	b.n	800ff2c <Signal+0x2c>
	{
		ChangeLED(mode);
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f7ff f8dc 	bl	800f0cc <ChangeLED>
		HAL_Delay(100);
 800ff14:	2064      	movs	r0, #100	; 0x64
 800ff16:	f000 f995 	bl	8010244 <HAL_Delay>
		ChangeLED(0);
 800ff1a:	2000      	movs	r0, #0
 800ff1c:	f7ff f8d6 	bl	800f0cc <ChangeLED>
		HAL_Delay(100);
 800ff20:	2064      	movs	r0, #100	; 0x64
 800ff22:	f000 f98f 	bl	8010244 <HAL_Delay>
	for(int i=0; i < 5; i++)
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	3301      	adds	r3, #1
 800ff2a:	60fb      	str	r3, [r7, #12]
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2b04      	cmp	r3, #4
 800ff30:	dded      	ble.n	800ff0e <Signal+0xe>
	}
}
 800ff32:	bf00      	nop
 800ff34:	3710      	adds	r7, #16
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}
	...

0800ff3c <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b086      	sub	sp, #24
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800ff44:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800ff90 <BatteryCheck+0x54>
 800ff48:	eddf 0a12 	vldr	s1, [pc, #72]	; 800ff94 <BatteryCheck+0x58>
 800ff4c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f7ff fa87 	bl	800f464 <ADCToBatteryVoltage>
 800ff56:	ed87 0a05 	vstr	s0, [r7, #20]

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800ff5a:	2103      	movs	r1, #3
 800ff5c:	2002      	movs	r0, #2
 800ff5e:	f7ff faab 	bl	800f4b8 <IntegerPower>
 800ff62:	6138      	str	r0, [r7, #16]

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800ff64:	6938      	ldr	r0, [r7, #16]
 800ff66:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800ff98 <BatteryCheck+0x5c>
 800ff6a:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800ff9c <BatteryCheck+0x60>
 800ff6e:	ed97 0a05 	vldr	s0, [r7, #20]
 800ff72:	f7ff fabe 	bl	800f4f2 <GetBatteryLevel>
 800ff76:	60f8      	str	r0, [r7, #12]

	printf("%d\r\n", battery_level);
 800ff78:	68f9      	ldr	r1, [r7, #12]
 800ff7a:	4809      	ldr	r0, [pc, #36]	; (800ffa0 <BatteryCheck+0x64>)
 800ff7c:	f005 ffd0 	bl	8015f20 <iprintf>
	Signal( battery_level );
 800ff80:	68f8      	ldr	r0, [r7, #12]
 800ff82:	f7ff ffbd 	bl	800ff00 <Signal>
}
 800ff86:	bf00      	nop
 800ff88:	3718      	adds	r7, #24
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	45800000 	.word	0x45800000
 800ff94:	40533333 	.word	0x40533333
 800ff98:	41066666 	.word	0x41066666
 800ff9c:	40e66666 	.word	0x40e66666
 800ffa0:	0801a590 	.word	0x0801a590

0800ffa4 <ModeSelect>:
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。


void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b086      	sub	sp, #24
 800ffa8:	af02      	add	r7, sp, #8
 800ffaa:	4603      	mov	r3, r0
 800ffac:	603a      	str	r2, [r7, #0]
 800ffae:	71fb      	strb	r3, [r7, #7]
 800ffb0:	460b      	mov	r3, r1
 800ffb2:	71bb      	strb	r3, [r7, #6]
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ
	EmitterON();
 800ffb4:	f7ff f86e 	bl	800f094 <EmitterON>
	ADCStart();
 800ffb8:	f7fe fd6e 	bl	800ea98 <ADCStart>
	HAL_TIM_Base_Start_IT(&htim8);
 800ffbc:	484b      	ldr	r0, [pc, #300]	; (80100ec <ModeSelect+0x148>)
 800ffbe:	f003 f828 	bl	8013012 <HAL_TIM_Base_Start_IT>
	//壁センサの値を持ってくる。
	//エンコーダ開始。初期値セット込み
	EncoderStart();
 800ffc2:	f7ff f847 	bl	800f054 <EncoderStart>
	HAL_Delay(1000);
 800ffc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ffca:	f000 f93b 	bl	8010244 <HAL_Delay>
	//while中で選択
	*pMode=min;
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	79fa      	ldrb	r2, [r7, #7]
 800ffd2:	701a      	strb	r2, [r3, #0]

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE);
 800ffd4:	f247 512f 	movw	r1, #29999	; 0x752f
 800ffd8:	4845      	ldr	r0, [pc, #276]	; (80100f0 <ModeSelect+0x14c>)
 800ffda:	f7ff f9cb 	bl	800f374 <InitPulse>

	int ENC3_LEFT;
	while(Photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 800ffde:	e06d      	b.n	80100bc <ModeSelect+0x118>
	{
		printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
 800ffe0:	4b44      	ldr	r3, [pc, #272]	; (80100f4 <ModeSelect+0x150>)
 800ffe2:	68db      	ldr	r3, [r3, #12]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7f8 f9e7 	bl	80083b8 <__aeabi_f2d>
 800ffea:	460a      	mov	r2, r1
 800ffec:	4601      	mov	r1, r0
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	9300      	str	r3, [sp, #0]
 800fff2:	4613      	mov	r3, r2
 800fff4:	460a      	mov	r2, r1
 800fff6:	4840      	ldr	r0, [pc, #256]	; (80100f8 <ModeSelect+0x154>)
 800fff8:	f005 ff92 	bl	8015f20 <iprintf>
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800fffc:	4b3f      	ldr	r3, [pc, #252]	; (80100fc <ModeSelect+0x158>)
 800fffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010000:	60fb      	str	r3, [r7, #12]

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	ee07 3a90 	vmov	s15, r3
 8010008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801000c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8010100 <ModeSelect+0x15c>
 8010010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010018:	db21      	blt.n	801005e <ModeSelect+0xba>
		  {
		  	  *pMode += 1;
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	f993 3000 	ldrsb.w	r3, [r3]
 8010020:	b2db      	uxtb	r3, r3
 8010022:	3301      	adds	r3, #1
 8010024:	b2db      	uxtb	r3, r3
 8010026:	b25a      	sxtb	r2, r3
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode > max)
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	f993 3000 	ldrsb.w	r3, [r3]
 8010032:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8010036:	429a      	cmp	r2, r3
 8010038:	da02      	bge.n	8010040 <ModeSelect+0x9c>
		  	  {
		  		  *pMode = min;
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	79fa      	ldrb	r2, [r7, #7]
 801003e:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	f993 3000 	ldrsb.w	r3, [r3]
 8010046:	4618      	mov	r0, r3
 8010048:	f7ff f840 	bl	800f0cc <ChangeLED>
		  	  //Motor_Buzzer(440.0f*powf(powf((float)2,(float)1/12),(float)*pMode), 250);
		  	  InitPulse((int *) &(TIM3->CNT), INITIAL_PULSE);
 801004c:	f247 512f 	movw	r1, #29999	; 0x752f
 8010050:	4827      	ldr	r0, [pc, #156]	; (80100f0 <ModeSelect+0x14c>)
 8010052:	f7ff f98f 	bl	800f374 <InitPulse>
		  	  HAL_Delay(500);
 8010056:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801005a:	f000 f8f3 	bl	8010244 <HAL_Delay>

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	ee07 3a90 	vmov	s15, r3
 8010064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010068:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8010104 <ModeSelect+0x160>
 801006c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010074:	d900      	bls.n	8010078 <ModeSelect+0xd4>
 8010076:	e021      	b.n	80100bc <ModeSelect+0x118>
		  {
		  	  *pMode -= 1;
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	f993 3000 	ldrsb.w	r3, [r3]
 801007e:	b2db      	uxtb	r3, r3
 8010080:	3b01      	subs	r3, #1
 8010082:	b2db      	uxtb	r3, r3
 8010084:	b25a      	sxtb	r2, r3
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode < min)
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	f993 3000 	ldrsb.w	r3, [r3]
 8010090:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8010094:	429a      	cmp	r2, r3
 8010096:	dd02      	ble.n	801009e <ModeSelect+0xfa>
		  	  {
		  	  		  *pMode = max;
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	79ba      	ldrb	r2, [r7, #6]
 801009c:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	f993 3000 	ldrsb.w	r3, [r3]
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7ff f811 	bl	800f0cc <ChangeLED>
		  	  //Motor_Buzzer(440.0f*powf(powf((float)2,(float)1/12),(float)*pMode), 250);
		  	  InitPulse( (int *)&(TIM3->CNT), INITIAL_PULSE);
 80100aa:	f247 512f 	movw	r1, #29999	; 0x752f
 80100ae:	4810      	ldr	r0, [pc, #64]	; (80100f0 <ModeSelect+0x14c>)
 80100b0:	f7ff f960 	bl	800f374 <InitPulse>
		  	  HAL_Delay(500);
 80100b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80100b8:	f000 f8c4 	bl	8010244 <HAL_Delay>
	while(Photo[FR]/*構造体アロー*/ < 250/**/) //前向きの
 80100bc:	4b0d      	ldr	r3, [pc, #52]	; (80100f4 <ModeSelect+0x150>)
 80100be:	edd3 7a03 	vldr	s15, [r3, #12]
 80100c2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8010108 <ModeSelect+0x164>
 80100c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80100ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ce:	d487      	bmi.n	800ffe0 <ModeSelect+0x3c>
		  }
	}

	EmitterOFF();
 80100d0:	f7fe ffee 	bl	800f0b0 <EmitterOFF>
	ADCStop();
 80100d4:	f7fe fd00 	bl	800ead8 <ADCStop>
	HAL_TIM_Base_Stop_IT(&htim8);
 80100d8:	4804      	ldr	r0, [pc, #16]	; (80100ec <ModeSelect+0x148>)
 80100da:	f002 ffbe 	bl	801305a <HAL_TIM_Base_Stop_IT>

	//エンコーダストップ
	EncoderStop();
 80100de:	f7fe ffc9 	bl	800f074 <EncoderStop>

	//モード選択後どうするか
}
 80100e2:	bf00      	nop
 80100e4:	3710      	adds	r7, #16
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	200105a0 	.word	0x200105a0
 80100f0:	40000424 	.word	0x40000424
 80100f4:	2000ff58 	.word	0x2000ff58
 80100f8:	0801a598 	.word	0x0801a598
 80100fc:	40000400 	.word	0x40000400
 8010100:	47352f00 	.word	0x47352f00
 8010104:	4654bc00 	.word	0x4654bc00
 8010108:	437a0000 	.word	0x437a0000

0801010c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 801010c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010144 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010110:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010112:	e003      	b.n	801011c <LoopCopyDataInit>

08010114 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010114:	4b0c      	ldr	r3, [pc, #48]	; (8010148 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010116:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010118:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801011a:	3104      	adds	r1, #4

0801011c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801011c:	480b      	ldr	r0, [pc, #44]	; (801014c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801011e:	4b0c      	ldr	r3, [pc, #48]	; (8010150 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010120:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010122:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010124:	d3f6      	bcc.n	8010114 <CopyDataInit>
  ldr  r2, =_sbss
 8010126:	4a0b      	ldr	r2, [pc, #44]	; (8010154 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010128:	e002      	b.n	8010130 <LoopFillZerobss>

0801012a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801012a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801012c:	f842 3b04 	str.w	r3, [r2], #4

08010130 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010130:	4b09      	ldr	r3, [pc, #36]	; (8010158 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010132:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010134:	d3f9      	bcc.n	801012a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010136:	f7fe fbf5 	bl	800e924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801013a:	f005 f87b 	bl	8015234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801013e:	f7fd fa6b 	bl	800d618 <main>
  bx  lr    
 8010142:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010144:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010148:	0801a934 	.word	0x0801a934
  ldr  r0, =_sdata
 801014c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010150:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8010154:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8010158:	200108b0 	.word	0x200108b0

0801015c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801015c:	e7fe      	b.n	801015c <ADC_IRQHandler>
	...

08010160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010164:	4b0e      	ldr	r3, [pc, #56]	; (80101a0 <HAL_Init+0x40>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	4a0d      	ldr	r2, [pc, #52]	; (80101a0 <HAL_Init+0x40>)
 801016a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801016e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010170:	4b0b      	ldr	r3, [pc, #44]	; (80101a0 <HAL_Init+0x40>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	4a0a      	ldr	r2, [pc, #40]	; (80101a0 <HAL_Init+0x40>)
 8010176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801017a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801017c:	4b08      	ldr	r3, [pc, #32]	; (80101a0 <HAL_Init+0x40>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	4a07      	ldr	r2, [pc, #28]	; (80101a0 <HAL_Init+0x40>)
 8010182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010188:	2003      	movs	r0, #3
 801018a:	f000 fd8b 	bl	8010ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801018e:	2000      	movs	r0, #0
 8010190:	f000 f808 	bl	80101a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010194:	f7fe f82a 	bl	800e1ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010198:	2300      	movs	r3, #0
}
 801019a:	4618      	mov	r0, r3
 801019c:	bd80      	pop	{r7, pc}
 801019e:	bf00      	nop
 80101a0:	40023c00 	.word	0x40023c00

080101a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80101ac:	4b12      	ldr	r3, [pc, #72]	; (80101f8 <HAL_InitTick+0x54>)
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	4b12      	ldr	r3, [pc, #72]	; (80101fc <HAL_InitTick+0x58>)
 80101b2:	781b      	ldrb	r3, [r3, #0]
 80101b4:	4619      	mov	r1, r3
 80101b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80101ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80101be:	fbb2 f3f3 	udiv	r3, r2, r3
 80101c2:	4618      	mov	r0, r3
 80101c4:	f000 fda3 	bl	8010d0e <HAL_SYSTICK_Config>
 80101c8:	4603      	mov	r3, r0
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d001      	beq.n	80101d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80101ce:	2301      	movs	r3, #1
 80101d0:	e00e      	b.n	80101f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2b0f      	cmp	r3, #15
 80101d6:	d80a      	bhi.n	80101ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80101d8:	2200      	movs	r2, #0
 80101da:	6879      	ldr	r1, [r7, #4]
 80101dc:	f04f 30ff 	mov.w	r0, #4294967295
 80101e0:	f000 fd6b 	bl	8010cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80101e4:	4a06      	ldr	r2, [pc, #24]	; (8010200 <HAL_InitTick+0x5c>)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80101ea:	2300      	movs	r3, #0
 80101ec:	e000      	b.n	80101f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80101ee:	2301      	movs	r3, #1
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	2000001c 	.word	0x2000001c
 80101fc:	20000024 	.word	0x20000024
 8010200:	20000020 	.word	0x20000020

08010204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010204:	b480      	push	{r7}
 8010206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010208:	4b06      	ldr	r3, [pc, #24]	; (8010224 <HAL_IncTick+0x20>)
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	461a      	mov	r2, r3
 801020e:	4b06      	ldr	r3, [pc, #24]	; (8010228 <HAL_IncTick+0x24>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	4413      	add	r3, r2
 8010214:	4a04      	ldr	r2, [pc, #16]	; (8010228 <HAL_IncTick+0x24>)
 8010216:	6013      	str	r3, [r2, #0]
}
 8010218:	bf00      	nop
 801021a:	46bd      	mov	sp, r7
 801021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010220:	4770      	bx	lr
 8010222:	bf00      	nop
 8010224:	20000024 	.word	0x20000024
 8010228:	20010888 	.word	0x20010888

0801022c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801022c:	b480      	push	{r7}
 801022e:	af00      	add	r7, sp, #0
  return uwTick;
 8010230:	4b03      	ldr	r3, [pc, #12]	; (8010240 <HAL_GetTick+0x14>)
 8010232:	681b      	ldr	r3, [r3, #0]
}
 8010234:	4618      	mov	r0, r3
 8010236:	46bd      	mov	sp, r7
 8010238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023c:	4770      	bx	lr
 801023e:	bf00      	nop
 8010240:	20010888 	.word	0x20010888

08010244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b084      	sub	sp, #16
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801024c:	f7ff ffee 	bl	801022c <HAL_GetTick>
 8010250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	f1b3 3fff 	cmp.w	r3, #4294967295
 801025c:	d005      	beq.n	801026a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801025e:	4b09      	ldr	r3, [pc, #36]	; (8010284 <HAL_Delay+0x40>)
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	461a      	mov	r2, r3
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	4413      	add	r3, r2
 8010268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801026a:	bf00      	nop
 801026c:	f7ff ffde 	bl	801022c <HAL_GetTick>
 8010270:	4602      	mov	r2, r0
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	1ad3      	subs	r3, r2, r3
 8010276:	68fa      	ldr	r2, [r7, #12]
 8010278:	429a      	cmp	r2, r3
 801027a:	d8f7      	bhi.n	801026c <HAL_Delay+0x28>
  {
  }
}
 801027c:	bf00      	nop
 801027e:	3710      	adds	r7, #16
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}
 8010284:	20000024 	.word	0x20000024

08010288 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b084      	sub	sp, #16
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010290:	2300      	movs	r3, #0
 8010292:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d101      	bne.n	801029e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801029a:	2301      	movs	r3, #1
 801029c:	e033      	b.n	8010306 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d109      	bne.n	80102ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f7fd ffc8 	bl	800e23c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2200      	movs	r2, #0
 80102b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2200      	movs	r2, #0
 80102b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102be:	f003 0310 	and.w	r3, r3, #16
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d118      	bne.n	80102f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80102ce:	f023 0302 	bic.w	r3, r3, #2
 80102d2:	f043 0202 	orr.w	r2, r3, #2
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f000 fa94 	bl	8010808 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2200      	movs	r2, #0
 80102e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ea:	f023 0303 	bic.w	r3, r3, #3
 80102ee:	f043 0201 	orr.w	r2, r3, #1
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	641a      	str	r2, [r3, #64]	; 0x40
 80102f6:	e001      	b.n	80102fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80102f8:	2301      	movs	r3, #1
 80102fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2200      	movs	r2, #0
 8010300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8010304:	7bfb      	ldrb	r3, [r7, #15]
}
 8010306:	4618      	mov	r0, r3
 8010308:	3710      	adds	r7, #16
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}
	...

08010310 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b086      	sub	sp, #24
 8010314:	af00      	add	r7, sp, #0
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	60b9      	str	r1, [r7, #8]
 801031a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 801031c:	2300      	movs	r3, #0
 801031e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010326:	2b01      	cmp	r3, #1
 8010328:	d101      	bne.n	801032e <HAL_ADC_Start_DMA+0x1e>
 801032a:	2302      	movs	r3, #2
 801032c:	e0cc      	b.n	80104c8 <HAL_ADC_Start_DMA+0x1b8>
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2201      	movs	r2, #1
 8010332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	689b      	ldr	r3, [r3, #8]
 801033c:	f003 0301 	and.w	r3, r3, #1
 8010340:	2b01      	cmp	r3, #1
 8010342:	d018      	beq.n	8010376 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	689a      	ldr	r2, [r3, #8]
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	f042 0201 	orr.w	r2, r2, #1
 8010352:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8010354:	4b5e      	ldr	r3, [pc, #376]	; (80104d0 <HAL_ADC_Start_DMA+0x1c0>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	4a5e      	ldr	r2, [pc, #376]	; (80104d4 <HAL_ADC_Start_DMA+0x1c4>)
 801035a:	fba2 2303 	umull	r2, r3, r2, r3
 801035e:	0c9a      	lsrs	r2, r3, #18
 8010360:	4613      	mov	r3, r2
 8010362:	005b      	lsls	r3, r3, #1
 8010364:	4413      	add	r3, r2
 8010366:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8010368:	e002      	b.n	8010370 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	3b01      	subs	r3, #1
 801036e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d1f9      	bne.n	801036a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	689b      	ldr	r3, [r3, #8]
 801037c:	f003 0301 	and.w	r3, r3, #1
 8010380:	2b01      	cmp	r3, #1
 8010382:	f040 80a0 	bne.w	80104c6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801038a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801038e:	f023 0301 	bic.w	r3, r3, #1
 8010392:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d007      	beq.n	80103b8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80103b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80103c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103c4:	d106      	bne.n	80103d4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103ca:	f023 0206 	bic.w	r2, r3, #6
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	645a      	str	r2, [r3, #68]	; 0x44
 80103d2:	e002      	b.n	80103da <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	2200      	movs	r2, #0
 80103d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2200      	movs	r2, #0
 80103de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80103e2:	4b3d      	ldr	r3, [pc, #244]	; (80104d8 <HAL_ADC_Start_DMA+0x1c8>)
 80103e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103ea:	4a3c      	ldr	r2, [pc, #240]	; (80104dc <HAL_ADC_Start_DMA+0x1cc>)
 80103ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103f2:	4a3b      	ldr	r2, [pc, #236]	; (80104e0 <HAL_ADC_Start_DMA+0x1d0>)
 80103f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103fa:	4a3a      	ldr	r2, [pc, #232]	; (80104e4 <HAL_ADC_Start_DMA+0x1d4>)
 80103fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8010406:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	685a      	ldr	r2, [r3, #4]
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8010416:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	689a      	ldr	r2, [r3, #8]
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010426:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	334c      	adds	r3, #76	; 0x4c
 8010432:	4619      	mov	r1, r3
 8010434:	68ba      	ldr	r2, [r7, #8]
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f000 fd24 	bl	8010e84 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	685b      	ldr	r3, [r3, #4]
 8010440:	f003 031f 	and.w	r3, r3, #31
 8010444:	2b00      	cmp	r3, #0
 8010446:	d12a      	bne.n	801049e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a26      	ldr	r2, [pc, #152]	; (80104e8 <HAL_ADC_Start_DMA+0x1d8>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d015      	beq.n	801047e <HAL_ADC_Start_DMA+0x16e>
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4a25      	ldr	r2, [pc, #148]	; (80104ec <HAL_ADC_Start_DMA+0x1dc>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d105      	bne.n	8010468 <HAL_ADC_Start_DMA+0x158>
 801045c:	4b1e      	ldr	r3, [pc, #120]	; (80104d8 <HAL_ADC_Start_DMA+0x1c8>)
 801045e:	685b      	ldr	r3, [r3, #4]
 8010460:	f003 031f 	and.w	r3, r3, #31
 8010464:	2b00      	cmp	r3, #0
 8010466:	d00a      	beq.n	801047e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	4a20      	ldr	r2, [pc, #128]	; (80104f0 <HAL_ADC_Start_DMA+0x1e0>)
 801046e:	4293      	cmp	r3, r2
 8010470:	d129      	bne.n	80104c6 <HAL_ADC_Start_DMA+0x1b6>
 8010472:	4b19      	ldr	r3, [pc, #100]	; (80104d8 <HAL_ADC_Start_DMA+0x1c8>)
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	f003 031f 	and.w	r3, r3, #31
 801047a:	2b0f      	cmp	r3, #15
 801047c:	d823      	bhi.n	80104c6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	689b      	ldr	r3, [r3, #8]
 8010484:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010488:	2b00      	cmp	r3, #0
 801048a:	d11c      	bne.n	80104c6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	689a      	ldr	r2, [r3, #8]
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801049a:	609a      	str	r2, [r3, #8]
 801049c:	e013      	b.n	80104c6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	4a11      	ldr	r2, [pc, #68]	; (80104e8 <HAL_ADC_Start_DMA+0x1d8>)
 80104a4:	4293      	cmp	r3, r2
 80104a6:	d10e      	bne.n	80104c6 <HAL_ADC_Start_DMA+0x1b6>
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	689b      	ldr	r3, [r3, #8]
 80104ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d107      	bne.n	80104c6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	689a      	ldr	r2, [r3, #8]
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80104c4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80104c6:	2300      	movs	r3, #0
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3718      	adds	r7, #24
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	2000001c 	.word	0x2000001c
 80104d4:	431bde83 	.word	0x431bde83
 80104d8:	40012300 	.word	0x40012300
 80104dc:	08010a01 	.word	0x08010a01
 80104e0:	08010abb 	.word	0x08010abb
 80104e4:	08010ad7 	.word	0x08010ad7
 80104e8:	40012000 	.word	0x40012000
 80104ec:	40012100 	.word	0x40012100
 80104f0:	40012200 	.word	0x40012200

080104f4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b084      	sub	sp, #16
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80104fc:	2300      	movs	r3, #0
 80104fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010506:	2b01      	cmp	r3, #1
 8010508:	d101      	bne.n	801050e <HAL_ADC_Stop_DMA+0x1a>
 801050a:	2302      	movs	r3, #2
 801050c:	e038      	b.n	8010580 <HAL_ADC_Stop_DMA+0x8c>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2201      	movs	r2, #1
 8010512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	689a      	ldr	r2, [r3, #8]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	f022 0201 	bic.w	r2, r2, #1
 8010524:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	689b      	ldr	r3, [r3, #8]
 801052c:	f003 0301 	and.w	r3, r3, #1
 8010530:	2b00      	cmp	r3, #0
 8010532:	d120      	bne.n	8010576 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	689a      	ldr	r2, [r3, #8]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010542:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010548:	4618      	mov	r0, r3
 801054a:	f000 fcf3 	bl	8010f34 <HAL_DMA_Abort>
 801054e:	4603      	mov	r3, r0
 8010550:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	685a      	ldr	r2, [r3, #4]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8010560:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010566:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801056a:	f023 0301 	bic.w	r3, r3, #1
 801056e:	f043 0201 	orr.w	r2, r3, #1
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2200      	movs	r2, #0
 801057a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 801057e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010580:	4618      	mov	r0, r3
 8010582:	3710      	adds	r7, #16
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}

08010588 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8010588:	b480      	push	{r7}
 801058a:	b083      	sub	sp, #12
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8010590:	bf00      	nop
 8010592:	370c      	adds	r7, #12
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr

0801059c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801059c:	b480      	push	{r7}
 801059e:	b083      	sub	sp, #12
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80105a4:	bf00      	nop
 80105a6:	370c      	adds	r7, #12
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr

080105b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80105b0:	b480      	push	{r7}
 80105b2:	b083      	sub	sp, #12
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80105b8:	bf00      	nop
 80105ba:	370c      	adds	r7, #12
 80105bc:	46bd      	mov	sp, r7
 80105be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c2:	4770      	bx	lr

080105c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80105c4:	b480      	push	{r7}
 80105c6:	b085      	sub	sp, #20
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
 80105cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80105ce:	2300      	movs	r3, #0
 80105d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80105d8:	2b01      	cmp	r3, #1
 80105da:	d101      	bne.n	80105e0 <HAL_ADC_ConfigChannel+0x1c>
 80105dc:	2302      	movs	r3, #2
 80105de:	e105      	b.n	80107ec <HAL_ADC_ConfigChannel+0x228>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2201      	movs	r2, #1
 80105e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	2b09      	cmp	r3, #9
 80105ee:	d925      	bls.n	801063c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	68d9      	ldr	r1, [r3, #12]
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	461a      	mov	r2, r3
 80105fe:	4613      	mov	r3, r2
 8010600:	005b      	lsls	r3, r3, #1
 8010602:	4413      	add	r3, r2
 8010604:	3b1e      	subs	r3, #30
 8010606:	2207      	movs	r2, #7
 8010608:	fa02 f303 	lsl.w	r3, r2, r3
 801060c:	43da      	mvns	r2, r3
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	400a      	ands	r2, r1
 8010614:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	68d9      	ldr	r1, [r3, #12]
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	689a      	ldr	r2, [r3, #8]
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	b29b      	uxth	r3, r3
 8010626:	4618      	mov	r0, r3
 8010628:	4603      	mov	r3, r0
 801062a:	005b      	lsls	r3, r3, #1
 801062c:	4403      	add	r3, r0
 801062e:	3b1e      	subs	r3, #30
 8010630:	409a      	lsls	r2, r3
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	430a      	orrs	r2, r1
 8010638:	60da      	str	r2, [r3, #12]
 801063a:	e022      	b.n	8010682 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	6919      	ldr	r1, [r3, #16]
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	b29b      	uxth	r3, r3
 8010648:	461a      	mov	r2, r3
 801064a:	4613      	mov	r3, r2
 801064c:	005b      	lsls	r3, r3, #1
 801064e:	4413      	add	r3, r2
 8010650:	2207      	movs	r2, #7
 8010652:	fa02 f303 	lsl.w	r3, r2, r3
 8010656:	43da      	mvns	r2, r3
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	400a      	ands	r2, r1
 801065e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	6919      	ldr	r1, [r3, #16]
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	689a      	ldr	r2, [r3, #8]
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	b29b      	uxth	r3, r3
 8010670:	4618      	mov	r0, r3
 8010672:	4603      	mov	r3, r0
 8010674:	005b      	lsls	r3, r3, #1
 8010676:	4403      	add	r3, r0
 8010678:	409a      	lsls	r2, r3
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	430a      	orrs	r2, r1
 8010680:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	685b      	ldr	r3, [r3, #4]
 8010686:	2b06      	cmp	r3, #6
 8010688:	d824      	bhi.n	80106d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	685a      	ldr	r2, [r3, #4]
 8010694:	4613      	mov	r3, r2
 8010696:	009b      	lsls	r3, r3, #2
 8010698:	4413      	add	r3, r2
 801069a:	3b05      	subs	r3, #5
 801069c:	221f      	movs	r2, #31
 801069e:	fa02 f303 	lsl.w	r3, r2, r3
 80106a2:	43da      	mvns	r2, r3
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	400a      	ands	r2, r1
 80106aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	b29b      	uxth	r3, r3
 80106b8:	4618      	mov	r0, r3
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	685a      	ldr	r2, [r3, #4]
 80106be:	4613      	mov	r3, r2
 80106c0:	009b      	lsls	r3, r3, #2
 80106c2:	4413      	add	r3, r2
 80106c4:	3b05      	subs	r3, #5
 80106c6:	fa00 f203 	lsl.w	r2, r0, r3
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	430a      	orrs	r2, r1
 80106d0:	635a      	str	r2, [r3, #52]	; 0x34
 80106d2:	e04c      	b.n	801076e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	685b      	ldr	r3, [r3, #4]
 80106d8:	2b0c      	cmp	r3, #12
 80106da:	d824      	bhi.n	8010726 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	685a      	ldr	r2, [r3, #4]
 80106e6:	4613      	mov	r3, r2
 80106e8:	009b      	lsls	r3, r3, #2
 80106ea:	4413      	add	r3, r2
 80106ec:	3b23      	subs	r3, #35	; 0x23
 80106ee:	221f      	movs	r2, #31
 80106f0:	fa02 f303 	lsl.w	r3, r2, r3
 80106f4:	43da      	mvns	r2, r3
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	400a      	ands	r2, r1
 80106fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	b29b      	uxth	r3, r3
 801070a:	4618      	mov	r0, r3
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	685a      	ldr	r2, [r3, #4]
 8010710:	4613      	mov	r3, r2
 8010712:	009b      	lsls	r3, r3, #2
 8010714:	4413      	add	r3, r2
 8010716:	3b23      	subs	r3, #35	; 0x23
 8010718:	fa00 f203 	lsl.w	r2, r0, r3
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	430a      	orrs	r2, r1
 8010722:	631a      	str	r2, [r3, #48]	; 0x30
 8010724:	e023      	b.n	801076e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	685a      	ldr	r2, [r3, #4]
 8010730:	4613      	mov	r3, r2
 8010732:	009b      	lsls	r3, r3, #2
 8010734:	4413      	add	r3, r2
 8010736:	3b41      	subs	r3, #65	; 0x41
 8010738:	221f      	movs	r2, #31
 801073a:	fa02 f303 	lsl.w	r3, r2, r3
 801073e:	43da      	mvns	r2, r3
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	400a      	ands	r2, r1
 8010746:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	b29b      	uxth	r3, r3
 8010754:	4618      	mov	r0, r3
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	685a      	ldr	r2, [r3, #4]
 801075a:	4613      	mov	r3, r2
 801075c:	009b      	lsls	r3, r3, #2
 801075e:	4413      	add	r3, r2
 8010760:	3b41      	subs	r3, #65	; 0x41
 8010762:	fa00 f203 	lsl.w	r2, r0, r3
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	430a      	orrs	r2, r1
 801076c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801076e:	4b22      	ldr	r3, [pc, #136]	; (80107f8 <HAL_ADC_ConfigChannel+0x234>)
 8010770:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4a21      	ldr	r2, [pc, #132]	; (80107fc <HAL_ADC_ConfigChannel+0x238>)
 8010778:	4293      	cmp	r3, r2
 801077a:	d109      	bne.n	8010790 <HAL_ADC_ConfigChannel+0x1cc>
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	2b12      	cmp	r3, #18
 8010782:	d105      	bne.n	8010790 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	685b      	ldr	r3, [r3, #4]
 8010788:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	4a19      	ldr	r2, [pc, #100]	; (80107fc <HAL_ADC_ConfigChannel+0x238>)
 8010796:	4293      	cmp	r3, r2
 8010798:	d123      	bne.n	80107e2 <HAL_ADC_ConfigChannel+0x21e>
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	2b10      	cmp	r3, #16
 80107a0:	d003      	beq.n	80107aa <HAL_ADC_ConfigChannel+0x1e6>
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	2b11      	cmp	r3, #17
 80107a8:	d11b      	bne.n	80107e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	2b10      	cmp	r3, #16
 80107bc:	d111      	bne.n	80107e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80107be:	4b10      	ldr	r3, [pc, #64]	; (8010800 <HAL_ADC_ConfigChannel+0x23c>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	4a10      	ldr	r2, [pc, #64]	; (8010804 <HAL_ADC_ConfigChannel+0x240>)
 80107c4:	fba2 2303 	umull	r2, r3, r2, r3
 80107c8:	0c9a      	lsrs	r2, r3, #18
 80107ca:	4613      	mov	r3, r2
 80107cc:	009b      	lsls	r3, r3, #2
 80107ce:	4413      	add	r3, r2
 80107d0:	005b      	lsls	r3, r3, #1
 80107d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80107d4:	e002      	b.n	80107dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	3b01      	subs	r3, #1
 80107da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d1f9      	bne.n	80107d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2200      	movs	r2, #0
 80107e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80107ea:	2300      	movs	r3, #0
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3714      	adds	r7, #20
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr
 80107f8:	40012300 	.word	0x40012300
 80107fc:	40012000 	.word	0x40012000
 8010800:	2000001c 	.word	0x2000001c
 8010804:	431bde83 	.word	0x431bde83

08010808 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010808:	b480      	push	{r7}
 801080a:	b085      	sub	sp, #20
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010810:	4b79      	ldr	r3, [pc, #484]	; (80109f8 <ADC_Init+0x1f0>)
 8010812:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	685a      	ldr	r2, [r3, #4]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	685b      	ldr	r3, [r3, #4]
 8010828:	431a      	orrs	r2, r3
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	685a      	ldr	r2, [r3, #4]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801083c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	6859      	ldr	r1, [r3, #4]
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	691b      	ldr	r3, [r3, #16]
 8010848:	021a      	lsls	r2, r3, #8
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	430a      	orrs	r2, r1
 8010850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	685a      	ldr	r2, [r3, #4]
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8010860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	6859      	ldr	r1, [r3, #4]
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	689a      	ldr	r2, [r3, #8]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	430a      	orrs	r2, r1
 8010872:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	689a      	ldr	r2, [r3, #8]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	6899      	ldr	r1, [r3, #8]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	68da      	ldr	r2, [r3, #12]
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	430a      	orrs	r2, r1
 8010894:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801089a:	4a58      	ldr	r2, [pc, #352]	; (80109fc <ADC_Init+0x1f4>)
 801089c:	4293      	cmp	r3, r2
 801089e:	d022      	beq.n	80108e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	689a      	ldr	r2, [r3, #8]
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80108ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	6899      	ldr	r1, [r3, #8]
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	430a      	orrs	r2, r1
 80108c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	689a      	ldr	r2, [r3, #8]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80108d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	6899      	ldr	r1, [r3, #8]
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	430a      	orrs	r2, r1
 80108e2:	609a      	str	r2, [r3, #8]
 80108e4:	e00f      	b.n	8010906 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	689a      	ldr	r2, [r3, #8]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80108f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	689a      	ldr	r2, [r3, #8]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010904:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	689a      	ldr	r2, [r3, #8]
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	f022 0202 	bic.w	r2, r2, #2
 8010914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	6899      	ldr	r1, [r3, #8]
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	7e1b      	ldrb	r3, [r3, #24]
 8010920:	005a      	lsls	r2, r3, #1
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	430a      	orrs	r2, r1
 8010928:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d01b      	beq.n	801096c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	685a      	ldr	r2, [r3, #4]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010942:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	685a      	ldr	r2, [r3, #4]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8010952:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	6859      	ldr	r1, [r3, #4]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801095e:	3b01      	subs	r3, #1
 8010960:	035a      	lsls	r2, r3, #13
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	430a      	orrs	r2, r1
 8010968:	605a      	str	r2, [r3, #4]
 801096a:	e007      	b.n	801097c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	685a      	ldr	r2, [r3, #4]
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801097a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801098a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	69db      	ldr	r3, [r3, #28]
 8010996:	3b01      	subs	r3, #1
 8010998:	051a      	lsls	r2, r3, #20
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	430a      	orrs	r2, r1
 80109a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	689a      	ldr	r2, [r3, #8]
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80109b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	6899      	ldr	r1, [r3, #8]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109be:	025a      	lsls	r2, r3, #9
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	430a      	orrs	r2, r1
 80109c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	689a      	ldr	r2, [r3, #8]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80109d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	6899      	ldr	r1, [r3, #8]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	695b      	ldr	r3, [r3, #20]
 80109e2:	029a      	lsls	r2, r3, #10
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	430a      	orrs	r2, r1
 80109ea:	609a      	str	r2, [r3, #8]
}
 80109ec:	bf00      	nop
 80109ee:	3714      	adds	r7, #20
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr
 80109f8:	40012300 	.word	0x40012300
 80109fc:	0f000001 	.word	0x0f000001

08010a00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b084      	sub	sp, #16
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d13c      	bne.n	8010a94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	689b      	ldr	r3, [r3, #8]
 8010a2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d12b      	bne.n	8010a8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d127      	bne.n	8010a8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d006      	beq.n	8010a58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	689b      	ldr	r3, [r3, #8]
 8010a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d119      	bne.n	8010a8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	685a      	ldr	r2, [r3, #4]
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	f022 0220 	bic.w	r2, r2, #32
 8010a66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d105      	bne.n	8010a8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a84:	f043 0201 	orr.w	r2, r3, #1
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8010a8c:	68f8      	ldr	r0, [r7, #12]
 8010a8e:	f7ff fd7b 	bl	8010588 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8010a92:	e00e      	b.n	8010ab2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a98:	f003 0310 	and.w	r3, r3, #16
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d003      	beq.n	8010aa8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8010aa0:	68f8      	ldr	r0, [r7, #12]
 8010aa2:	f7ff fd85 	bl	80105b0 <HAL_ADC_ErrorCallback>
}
 8010aa6:	e004      	b.n	8010ab2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	4798      	blx	r3
}
 8010ab2:	bf00      	nop
 8010ab4:	3710      	adds	r7, #16
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}

08010aba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8010aba:	b580      	push	{r7, lr}
 8010abc:	b084      	sub	sp, #16
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ac6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8010ac8:	68f8      	ldr	r0, [r7, #12]
 8010aca:	f7ff fd67 	bl	801059c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010ace:	bf00      	nop
 8010ad0:	3710      	adds	r7, #16
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}

08010ad6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8010ad6:	b580      	push	{r7, lr}
 8010ad8:	b084      	sub	sp, #16
 8010ada:	af00      	add	r7, sp, #0
 8010adc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ae2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	2240      	movs	r2, #64	; 0x40
 8010ae8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010aee:	f043 0204 	orr.w	r2, r3, #4
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8010af6:	68f8      	ldr	r0, [r7, #12]
 8010af8:	f7ff fd5a 	bl	80105b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010afc:	bf00      	nop
 8010afe:	3710      	adds	r7, #16
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010b04:	b480      	push	{r7}
 8010b06:	b085      	sub	sp, #20
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f003 0307 	and.w	r3, r3, #7
 8010b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010b14:	4b0c      	ldr	r3, [pc, #48]	; (8010b48 <__NVIC_SetPriorityGrouping+0x44>)
 8010b16:	68db      	ldr	r3, [r3, #12]
 8010b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010b1a:	68ba      	ldr	r2, [r7, #8]
 8010b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010b20:	4013      	ands	r3, r2
 8010b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010b36:	4a04      	ldr	r2, [pc, #16]	; (8010b48 <__NVIC_SetPriorityGrouping+0x44>)
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	60d3      	str	r3, [r2, #12]
}
 8010b3c:	bf00      	nop
 8010b3e:	3714      	adds	r7, #20
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr
 8010b48:	e000ed00 	.word	0xe000ed00

08010b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010b50:	4b04      	ldr	r3, [pc, #16]	; (8010b64 <__NVIC_GetPriorityGrouping+0x18>)
 8010b52:	68db      	ldr	r3, [r3, #12]
 8010b54:	0a1b      	lsrs	r3, r3, #8
 8010b56:	f003 0307 	and.w	r3, r3, #7
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b62:	4770      	bx	lr
 8010b64:	e000ed00 	.word	0xe000ed00

08010b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b083      	sub	sp, #12
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	4603      	mov	r3, r0
 8010b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	db0b      	blt.n	8010b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010b7a:	79fb      	ldrb	r3, [r7, #7]
 8010b7c:	f003 021f 	and.w	r2, r3, #31
 8010b80:	4907      	ldr	r1, [pc, #28]	; (8010ba0 <__NVIC_EnableIRQ+0x38>)
 8010b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b86:	095b      	lsrs	r3, r3, #5
 8010b88:	2001      	movs	r0, #1
 8010b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8010b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8010b92:	bf00      	nop
 8010b94:	370c      	adds	r7, #12
 8010b96:	46bd      	mov	sp, r7
 8010b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9c:	4770      	bx	lr
 8010b9e:	bf00      	nop
 8010ba0:	e000e100 	.word	0xe000e100

08010ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010ba4:	b480      	push	{r7}
 8010ba6:	b083      	sub	sp, #12
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	4603      	mov	r3, r0
 8010bac:	6039      	str	r1, [r7, #0]
 8010bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	db0a      	blt.n	8010bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	b2da      	uxtb	r2, r3
 8010bbc:	490c      	ldr	r1, [pc, #48]	; (8010bf0 <__NVIC_SetPriority+0x4c>)
 8010bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010bc2:	0112      	lsls	r2, r2, #4
 8010bc4:	b2d2      	uxtb	r2, r2
 8010bc6:	440b      	add	r3, r1
 8010bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010bcc:	e00a      	b.n	8010be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	b2da      	uxtb	r2, r3
 8010bd2:	4908      	ldr	r1, [pc, #32]	; (8010bf4 <__NVIC_SetPriority+0x50>)
 8010bd4:	79fb      	ldrb	r3, [r7, #7]
 8010bd6:	f003 030f 	and.w	r3, r3, #15
 8010bda:	3b04      	subs	r3, #4
 8010bdc:	0112      	lsls	r2, r2, #4
 8010bde:	b2d2      	uxtb	r2, r2
 8010be0:	440b      	add	r3, r1
 8010be2:	761a      	strb	r2, [r3, #24]
}
 8010be4:	bf00      	nop
 8010be6:	370c      	adds	r7, #12
 8010be8:	46bd      	mov	sp, r7
 8010bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bee:	4770      	bx	lr
 8010bf0:	e000e100 	.word	0xe000e100
 8010bf4:	e000ed00 	.word	0xe000ed00

08010bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b089      	sub	sp, #36	; 0x24
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	60f8      	str	r0, [r7, #12]
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	f003 0307 	and.w	r3, r3, #7
 8010c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010c0c:	69fb      	ldr	r3, [r7, #28]
 8010c0e:	f1c3 0307 	rsb	r3, r3, #7
 8010c12:	2b04      	cmp	r3, #4
 8010c14:	bf28      	it	cs
 8010c16:	2304      	movcs	r3, #4
 8010c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010c1a:	69fb      	ldr	r3, [r7, #28]
 8010c1c:	3304      	adds	r3, #4
 8010c1e:	2b06      	cmp	r3, #6
 8010c20:	d902      	bls.n	8010c28 <NVIC_EncodePriority+0x30>
 8010c22:	69fb      	ldr	r3, [r7, #28]
 8010c24:	3b03      	subs	r3, #3
 8010c26:	e000      	b.n	8010c2a <NVIC_EncodePriority+0x32>
 8010c28:	2300      	movs	r3, #0
 8010c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8010c30:	69bb      	ldr	r3, [r7, #24]
 8010c32:	fa02 f303 	lsl.w	r3, r2, r3
 8010c36:	43da      	mvns	r2, r3
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	401a      	ands	r2, r3
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010c40:	f04f 31ff 	mov.w	r1, #4294967295
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	fa01 f303 	lsl.w	r3, r1, r3
 8010c4a:	43d9      	mvns	r1, r3
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010c50:	4313      	orrs	r3, r2
         );
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3724      	adds	r7, #36	; 0x24
 8010c56:	46bd      	mov	sp, r7
 8010c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5c:	4770      	bx	lr
	...

08010c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	3b01      	subs	r3, #1
 8010c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010c70:	d301      	bcc.n	8010c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010c72:	2301      	movs	r3, #1
 8010c74:	e00f      	b.n	8010c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010c76:	4a0a      	ldr	r2, [pc, #40]	; (8010ca0 <SysTick_Config+0x40>)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	3b01      	subs	r3, #1
 8010c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010c7e:	210f      	movs	r1, #15
 8010c80:	f04f 30ff 	mov.w	r0, #4294967295
 8010c84:	f7ff ff8e 	bl	8010ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010c88:	4b05      	ldr	r3, [pc, #20]	; (8010ca0 <SysTick_Config+0x40>)
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010c8e:	4b04      	ldr	r3, [pc, #16]	; (8010ca0 <SysTick_Config+0x40>)
 8010c90:	2207      	movs	r2, #7
 8010c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010c94:	2300      	movs	r3, #0
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	3708      	adds	r7, #8
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
 8010c9e:	bf00      	nop
 8010ca0:	e000e010 	.word	0xe000e010

08010ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b082      	sub	sp, #8
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f7ff ff29 	bl	8010b04 <__NVIC_SetPriorityGrouping>
}
 8010cb2:	bf00      	nop
 8010cb4:	3708      	adds	r7, #8
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}

08010cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010cba:	b580      	push	{r7, lr}
 8010cbc:	b086      	sub	sp, #24
 8010cbe:	af00      	add	r7, sp, #0
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	60b9      	str	r1, [r7, #8]
 8010cc4:	607a      	str	r2, [r7, #4]
 8010cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010ccc:	f7ff ff3e 	bl	8010b4c <__NVIC_GetPriorityGrouping>
 8010cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010cd2:	687a      	ldr	r2, [r7, #4]
 8010cd4:	68b9      	ldr	r1, [r7, #8]
 8010cd6:	6978      	ldr	r0, [r7, #20]
 8010cd8:	f7ff ff8e 	bl	8010bf8 <NVIC_EncodePriority>
 8010cdc:	4602      	mov	r2, r0
 8010cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ce2:	4611      	mov	r1, r2
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7ff ff5d 	bl	8010ba4 <__NVIC_SetPriority>
}
 8010cea:	bf00      	nop
 8010cec:	3718      	adds	r7, #24
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010cf2:	b580      	push	{r7, lr}
 8010cf4:	b082      	sub	sp, #8
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7ff ff31 	bl	8010b68 <__NVIC_EnableIRQ>
}
 8010d06:	bf00      	nop
 8010d08:	3708      	adds	r7, #8
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}

08010d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010d0e:	b580      	push	{r7, lr}
 8010d10:	b082      	sub	sp, #8
 8010d12:	af00      	add	r7, sp, #0
 8010d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f7ff ffa2 	bl	8010c60 <SysTick_Config>
 8010d1c:	4603      	mov	r3, r0
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3708      	adds	r7, #8
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
	...

08010d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b086      	sub	sp, #24
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8010d30:	2300      	movs	r3, #0
 8010d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8010d34:	f7ff fa7a 	bl	801022c <HAL_GetTick>
 8010d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d101      	bne.n	8010d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8010d40:	2301      	movs	r3, #1
 8010d42:	e099      	b.n	8010e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2200      	movs	r2, #0
 8010d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2202      	movs	r2, #2
 8010d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	681a      	ldr	r2, [r3, #0]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f022 0201 	bic.w	r2, r2, #1
 8010d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010d64:	e00f      	b.n	8010d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010d66:	f7ff fa61 	bl	801022c <HAL_GetTick>
 8010d6a:	4602      	mov	r2, r0
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	1ad3      	subs	r3, r2, r3
 8010d70:	2b05      	cmp	r3, #5
 8010d72:	d908      	bls.n	8010d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2220      	movs	r2, #32
 8010d78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	2203      	movs	r2, #3
 8010d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8010d82:	2303      	movs	r3, #3
 8010d84:	e078      	b.n	8010e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	f003 0301 	and.w	r3, r3, #1
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d1e8      	bne.n	8010d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8010d9c:	697a      	ldr	r2, [r7, #20]
 8010d9e:	4b38      	ldr	r3, [pc, #224]	; (8010e80 <HAL_DMA_Init+0x158>)
 8010da0:	4013      	ands	r3, r2
 8010da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	685a      	ldr	r2, [r3, #4]
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	689b      	ldr	r3, [r3, #8]
 8010dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	691b      	ldr	r3, [r3, #16]
 8010db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	699b      	ldr	r3, [r3, #24]
 8010dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	6a1b      	ldr	r3, [r3, #32]
 8010dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010dd2:	697a      	ldr	r2, [r7, #20]
 8010dd4:	4313      	orrs	r3, r2
 8010dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ddc:	2b04      	cmp	r3, #4
 8010dde:	d107      	bne.n	8010df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010de8:	4313      	orrs	r3, r2
 8010dea:	697a      	ldr	r2, [r7, #20]
 8010dec:	4313      	orrs	r3, r2
 8010dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	697a      	ldr	r2, [r7, #20]
 8010df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	695b      	ldr	r3, [r3, #20]
 8010dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	f023 0307 	bic.w	r3, r3, #7
 8010e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e0c:	697a      	ldr	r2, [r7, #20]
 8010e0e:	4313      	orrs	r3, r2
 8010e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e16:	2b04      	cmp	r3, #4
 8010e18:	d117      	bne.n	8010e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e1e:	697a      	ldr	r2, [r7, #20]
 8010e20:	4313      	orrs	r3, r2
 8010e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d00e      	beq.n	8010e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f000 fadf 	bl	80113f0 <DMA_CheckFifoParam>
 8010e32:	4603      	mov	r3, r0
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d008      	beq.n	8010e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2240      	movs	r2, #64	; 0x40
 8010e3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2201      	movs	r2, #1
 8010e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8010e46:	2301      	movs	r3, #1
 8010e48:	e016      	b.n	8010e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	697a      	ldr	r2, [r7, #20]
 8010e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f000 fa96 	bl	8011384 <DMA_CalcBaseAndBitshift>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e60:	223f      	movs	r2, #63	; 0x3f
 8010e62:	409a      	lsls	r2, r3
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2201      	movs	r2, #1
 8010e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8010e76:	2300      	movs	r3, #0
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3718      	adds	r7, #24
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}
 8010e80:	f010803f 	.word	0xf010803f

08010e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b086      	sub	sp, #24
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	60b9      	str	r1, [r7, #8]
 8010e8e:	607a      	str	r2, [r7, #4]
 8010e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010e92:	2300      	movs	r3, #0
 8010e94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010ea2:	2b01      	cmp	r3, #1
 8010ea4:	d101      	bne.n	8010eaa <HAL_DMA_Start_IT+0x26>
 8010ea6:	2302      	movs	r3, #2
 8010ea8:	e040      	b.n	8010f2c <HAL_DMA_Start_IT+0xa8>
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	2201      	movs	r2, #1
 8010eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010eb8:	b2db      	uxtb	r3, r3
 8010eba:	2b01      	cmp	r3, #1
 8010ebc:	d12f      	bne.n	8010f1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	2202      	movs	r2, #2
 8010ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	687a      	ldr	r2, [r7, #4]
 8010ed0:	68b9      	ldr	r1, [r7, #8]
 8010ed2:	68f8      	ldr	r0, [r7, #12]
 8010ed4:	f000 fa28 	bl	8011328 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010edc:	223f      	movs	r2, #63	; 0x3f
 8010ede:	409a      	lsls	r2, r3
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	681a      	ldr	r2, [r3, #0]
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	f042 0216 	orr.w	r2, r2, #22
 8010ef2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d007      	beq.n	8010f0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	681a      	ldr	r2, [r3, #0]
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	f042 0208 	orr.w	r2, r2, #8
 8010f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	681a      	ldr	r2, [r3, #0]
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	f042 0201 	orr.w	r2, r2, #1
 8010f1a:	601a      	str	r2, [r3, #0]
 8010f1c:	e005      	b.n	8010f2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	2200      	movs	r2, #0
 8010f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8010f26:	2302      	movs	r3, #2
 8010f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8010f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3718      	adds	r7, #24
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b084      	sub	sp, #16
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8010f42:	f7ff f973 	bl	801022c <HAL_GetTick>
 8010f46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	2b02      	cmp	r3, #2
 8010f52:	d008      	beq.n	8010f66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2280      	movs	r2, #128	; 0x80
 8010f58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8010f62:	2301      	movs	r3, #1
 8010f64:	e052      	b.n	801100c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	681a      	ldr	r2, [r3, #0]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	f022 0216 	bic.w	r2, r2, #22
 8010f74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	695a      	ldr	r2, [r3, #20]
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010f84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d103      	bne.n	8010f96 <HAL_DMA_Abort+0x62>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d007      	beq.n	8010fa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	681a      	ldr	r2, [r3, #0]
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	f022 0208 	bic.w	r2, r2, #8
 8010fa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	681a      	ldr	r2, [r3, #0]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	f022 0201 	bic.w	r2, r2, #1
 8010fb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010fb6:	e013      	b.n	8010fe0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010fb8:	f7ff f938 	bl	801022c <HAL_GetTick>
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	1ad3      	subs	r3, r2, r3
 8010fc2:	2b05      	cmp	r3, #5
 8010fc4:	d90c      	bls.n	8010fe0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	2220      	movs	r2, #32
 8010fca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2200      	movs	r2, #0
 8010fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2203      	movs	r2, #3
 8010fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8010fdc:	2303      	movs	r3, #3
 8010fde:	e015      	b.n	801100c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f003 0301 	and.w	r3, r3, #1
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d1e4      	bne.n	8010fb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ff2:	223f      	movs	r2, #63	; 0x3f
 8010ff4:	409a      	lsls	r2, r3
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2201      	movs	r2, #1
 8011006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 801100a:	2300      	movs	r3, #0
}
 801100c:	4618      	mov	r0, r3
 801100e:	3710      	adds	r7, #16
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b086      	sub	sp, #24
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801101c:	2300      	movs	r3, #0
 801101e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8011020:	4b92      	ldr	r3, [pc, #584]	; (801126c <HAL_DMA_IRQHandler+0x258>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	4a92      	ldr	r2, [pc, #584]	; (8011270 <HAL_DMA_IRQHandler+0x25c>)
 8011026:	fba2 2303 	umull	r2, r3, r2, r3
 801102a:	0a9b      	lsrs	r3, r3, #10
 801102c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011032:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801103e:	2208      	movs	r2, #8
 8011040:	409a      	lsls	r2, r3
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	4013      	ands	r3, r2
 8011046:	2b00      	cmp	r3, #0
 8011048:	d01a      	beq.n	8011080 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	f003 0304 	and.w	r3, r3, #4
 8011054:	2b00      	cmp	r3, #0
 8011056:	d013      	beq.n	8011080 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	681a      	ldr	r2, [r3, #0]
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	f022 0204 	bic.w	r2, r2, #4
 8011066:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801106c:	2208      	movs	r2, #8
 801106e:	409a      	lsls	r2, r3
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011078:	f043 0201 	orr.w	r2, r3, #1
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011084:	2201      	movs	r2, #1
 8011086:	409a      	lsls	r2, r3
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	4013      	ands	r3, r2
 801108c:	2b00      	cmp	r3, #0
 801108e:	d012      	beq.n	80110b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	695b      	ldr	r3, [r3, #20]
 8011096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801109a:	2b00      	cmp	r3, #0
 801109c:	d00b      	beq.n	80110b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110a2:	2201      	movs	r2, #1
 80110a4:	409a      	lsls	r2, r3
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110ae:	f043 0202 	orr.w	r2, r3, #2
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110ba:	2204      	movs	r2, #4
 80110bc:	409a      	lsls	r2, r3
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	4013      	ands	r3, r2
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d012      	beq.n	80110ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	f003 0302 	and.w	r3, r3, #2
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d00b      	beq.n	80110ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110d8:	2204      	movs	r2, #4
 80110da:	409a      	lsls	r2, r3
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110e4:	f043 0204 	orr.w	r2, r3, #4
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110f0:	2210      	movs	r2, #16
 80110f2:	409a      	lsls	r2, r3
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	4013      	ands	r3, r2
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d043      	beq.n	8011184 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	f003 0308 	and.w	r3, r3, #8
 8011106:	2b00      	cmp	r3, #0
 8011108:	d03c      	beq.n	8011184 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801110e:	2210      	movs	r2, #16
 8011110:	409a      	lsls	r2, r3
 8011112:	693b      	ldr	r3, [r7, #16]
 8011114:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011120:	2b00      	cmp	r3, #0
 8011122:	d018      	beq.n	8011156 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801112e:	2b00      	cmp	r3, #0
 8011130:	d108      	bne.n	8011144 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011136:	2b00      	cmp	r3, #0
 8011138:	d024      	beq.n	8011184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	4798      	blx	r3
 8011142:	e01f      	b.n	8011184 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011148:	2b00      	cmp	r3, #0
 801114a:	d01b      	beq.n	8011184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	4798      	blx	r3
 8011154:	e016      	b.n	8011184 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011160:	2b00      	cmp	r3, #0
 8011162:	d107      	bne.n	8011174 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	681a      	ldr	r2, [r3, #0]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	f022 0208 	bic.w	r2, r2, #8
 8011172:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011178:	2b00      	cmp	r3, #0
 801117a:	d003      	beq.n	8011184 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011188:	2220      	movs	r2, #32
 801118a:	409a      	lsls	r2, r3
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	4013      	ands	r3, r2
 8011190:	2b00      	cmp	r3, #0
 8011192:	f000 808e 	beq.w	80112b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	f003 0310 	and.w	r3, r3, #16
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	f000 8086 	beq.w	80112b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80111aa:	2220      	movs	r2, #32
 80111ac:	409a      	lsls	r2, r3
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	2b05      	cmp	r3, #5
 80111bc:	d136      	bne.n	801122c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	681a      	ldr	r2, [r3, #0]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f022 0216 	bic.w	r2, r2, #22
 80111cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	695a      	ldr	r2, [r3, #20]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80111dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d103      	bne.n	80111ee <HAL_DMA_IRQHandler+0x1da>
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d007      	beq.n	80111fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	681a      	ldr	r2, [r3, #0]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f022 0208 	bic.w	r2, r2, #8
 80111fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011202:	223f      	movs	r2, #63	; 0x3f
 8011204:	409a      	lsls	r2, r3
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2200      	movs	r2, #0
 801120e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2201      	movs	r2, #1
 8011216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801121e:	2b00      	cmp	r3, #0
 8011220:	d07d      	beq.n	801131e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	4798      	blx	r3
        }
        return;
 801122a:	e078      	b.n	801131e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011236:	2b00      	cmp	r3, #0
 8011238:	d01c      	beq.n	8011274 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011244:	2b00      	cmp	r3, #0
 8011246:	d108      	bne.n	801125a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801124c:	2b00      	cmp	r3, #0
 801124e:	d030      	beq.n	80112b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	4798      	blx	r3
 8011258:	e02b      	b.n	80112b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801125e:	2b00      	cmp	r3, #0
 8011260:	d027      	beq.n	80112b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	4798      	blx	r3
 801126a:	e022      	b.n	80112b2 <HAL_DMA_IRQHandler+0x29e>
 801126c:	2000001c 	.word	0x2000001c
 8011270:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801127e:	2b00      	cmp	r3, #0
 8011280:	d10f      	bne.n	80112a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	681a      	ldr	r2, [r3, #0]
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	f022 0210 	bic.w	r2, r2, #16
 8011290:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2200      	movs	r2, #0
 8011296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2201      	movs	r2, #1
 801129e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d003      	beq.n	80112b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d032      	beq.n	8011320 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112be:	f003 0301 	and.w	r3, r3, #1
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d022      	beq.n	801130c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2205      	movs	r2, #5
 80112ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	681a      	ldr	r2, [r3, #0]
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	f022 0201 	bic.w	r2, r2, #1
 80112dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	3301      	adds	r3, #1
 80112e2:	60bb      	str	r3, [r7, #8]
 80112e4:	697a      	ldr	r2, [r7, #20]
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d307      	bcc.n	80112fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	f003 0301 	and.w	r3, r3, #1
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d1f2      	bne.n	80112de <HAL_DMA_IRQHandler+0x2ca>
 80112f8:	e000      	b.n	80112fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80112fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2200      	movs	r2, #0
 8011300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2201      	movs	r2, #1
 8011308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011310:	2b00      	cmp	r3, #0
 8011312:	d005      	beq.n	8011320 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	4798      	blx	r3
 801131c:	e000      	b.n	8011320 <HAL_DMA_IRQHandler+0x30c>
        return;
 801131e:	bf00      	nop
    }
  }
}
 8011320:	3718      	adds	r7, #24
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
 8011326:	bf00      	nop

08011328 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011328:	b480      	push	{r7}
 801132a:	b085      	sub	sp, #20
 801132c:	af00      	add	r7, sp, #0
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	60b9      	str	r1, [r7, #8]
 8011332:	607a      	str	r2, [r7, #4]
 8011334:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	681a      	ldr	r2, [r3, #0]
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011344:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	683a      	ldr	r2, [r7, #0]
 801134c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	689b      	ldr	r3, [r3, #8]
 8011352:	2b40      	cmp	r3, #64	; 0x40
 8011354:	d108      	bne.n	8011368 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	687a      	ldr	r2, [r7, #4]
 801135c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	68ba      	ldr	r2, [r7, #8]
 8011364:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8011366:	e007      	b.n	8011378 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	68ba      	ldr	r2, [r7, #8]
 801136e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	60da      	str	r2, [r3, #12]
}
 8011378:	bf00      	nop
 801137a:	3714      	adds	r7, #20
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr

08011384 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8011384:	b480      	push	{r7}
 8011386:	b085      	sub	sp, #20
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	b2db      	uxtb	r3, r3
 8011392:	3b10      	subs	r3, #16
 8011394:	4a14      	ldr	r2, [pc, #80]	; (80113e8 <DMA_CalcBaseAndBitshift+0x64>)
 8011396:	fba2 2303 	umull	r2, r3, r2, r3
 801139a:	091b      	lsrs	r3, r3, #4
 801139c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801139e:	4a13      	ldr	r2, [pc, #76]	; (80113ec <DMA_CalcBaseAndBitshift+0x68>)
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	4413      	add	r3, r2
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	461a      	mov	r2, r3
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	2b03      	cmp	r3, #3
 80113b0:	d909      	bls.n	80113c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80113ba:	f023 0303 	bic.w	r3, r3, #3
 80113be:	1d1a      	adds	r2, r3, #4
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	659a      	str	r2, [r3, #88]	; 0x58
 80113c4:	e007      	b.n	80113d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80113ce:	f023 0303 	bic.w	r3, r3, #3
 80113d2:	687a      	ldr	r2, [r7, #4]
 80113d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3714      	adds	r7, #20
 80113de:	46bd      	mov	sp, r7
 80113e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e4:	4770      	bx	lr
 80113e6:	bf00      	nop
 80113e8:	aaaaaaab 	.word	0xaaaaaaab
 80113ec:	0801a5e0 	.word	0x0801a5e0

080113f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80113f0:	b480      	push	{r7}
 80113f2:	b085      	sub	sp, #20
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80113f8:	2300      	movs	r3, #0
 80113fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011400:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	699b      	ldr	r3, [r3, #24]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d11f      	bne.n	801144a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	2b03      	cmp	r3, #3
 801140e:	d855      	bhi.n	80114bc <DMA_CheckFifoParam+0xcc>
 8011410:	a201      	add	r2, pc, #4	; (adr r2, 8011418 <DMA_CheckFifoParam+0x28>)
 8011412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011416:	bf00      	nop
 8011418:	08011429 	.word	0x08011429
 801141c:	0801143b 	.word	0x0801143b
 8011420:	08011429 	.word	0x08011429
 8011424:	080114bd 	.word	0x080114bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801142c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011430:	2b00      	cmp	r3, #0
 8011432:	d045      	beq.n	80114c0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8011434:	2301      	movs	r3, #1
 8011436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011438:	e042      	b.n	80114c0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801143e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011442:	d13f      	bne.n	80114c4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8011444:	2301      	movs	r3, #1
 8011446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011448:	e03c      	b.n	80114c4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	699b      	ldr	r3, [r3, #24]
 801144e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011452:	d121      	bne.n	8011498 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	2b03      	cmp	r3, #3
 8011458:	d836      	bhi.n	80114c8 <DMA_CheckFifoParam+0xd8>
 801145a:	a201      	add	r2, pc, #4	; (adr r2, 8011460 <DMA_CheckFifoParam+0x70>)
 801145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011460:	08011471 	.word	0x08011471
 8011464:	08011477 	.word	0x08011477
 8011468:	08011471 	.word	0x08011471
 801146c:	08011489 	.word	0x08011489
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8011470:	2301      	movs	r3, #1
 8011472:	73fb      	strb	r3, [r7, #15]
      break;
 8011474:	e02f      	b.n	80114d6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801147a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801147e:	2b00      	cmp	r3, #0
 8011480:	d024      	beq.n	80114cc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8011482:	2301      	movs	r3, #1
 8011484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011486:	e021      	b.n	80114cc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801148c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011490:	d11e      	bne.n	80114d0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8011492:	2301      	movs	r3, #1
 8011494:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8011496:	e01b      	b.n	80114d0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	2b02      	cmp	r3, #2
 801149c:	d902      	bls.n	80114a4 <DMA_CheckFifoParam+0xb4>
 801149e:	2b03      	cmp	r3, #3
 80114a0:	d003      	beq.n	80114aa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80114a2:	e018      	b.n	80114d6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80114a4:	2301      	movs	r3, #1
 80114a6:	73fb      	strb	r3, [r7, #15]
      break;
 80114a8:	e015      	b.n	80114d6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d00e      	beq.n	80114d4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80114b6:	2301      	movs	r3, #1
 80114b8:	73fb      	strb	r3, [r7, #15]
      break;
 80114ba:	e00b      	b.n	80114d4 <DMA_CheckFifoParam+0xe4>
      break;
 80114bc:	bf00      	nop
 80114be:	e00a      	b.n	80114d6 <DMA_CheckFifoParam+0xe6>
      break;
 80114c0:	bf00      	nop
 80114c2:	e008      	b.n	80114d6 <DMA_CheckFifoParam+0xe6>
      break;
 80114c4:	bf00      	nop
 80114c6:	e006      	b.n	80114d6 <DMA_CheckFifoParam+0xe6>
      break;
 80114c8:	bf00      	nop
 80114ca:	e004      	b.n	80114d6 <DMA_CheckFifoParam+0xe6>
      break;
 80114cc:	bf00      	nop
 80114ce:	e002      	b.n	80114d6 <DMA_CheckFifoParam+0xe6>
      break;   
 80114d0:	bf00      	nop
 80114d2:	e000      	b.n	80114d6 <DMA_CheckFifoParam+0xe6>
      break;
 80114d4:	bf00      	nop
    }
  } 
  
  return status; 
 80114d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3714      	adds	r7, #20
 80114dc:	46bd      	mov	sp, r7
 80114de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e2:	4770      	bx	lr

080114e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80114e4:	b480      	push	{r7}
 80114e6:	b083      	sub	sp, #12
 80114e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80114ea:	2300      	movs	r3, #0
 80114ec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80114ee:	4b0b      	ldr	r3, [pc, #44]	; (801151c <HAL_FLASH_Unlock+0x38>)
 80114f0:	691b      	ldr	r3, [r3, #16]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	da0b      	bge.n	801150e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80114f6:	4b09      	ldr	r3, [pc, #36]	; (801151c <HAL_FLASH_Unlock+0x38>)
 80114f8:	4a09      	ldr	r2, [pc, #36]	; (8011520 <HAL_FLASH_Unlock+0x3c>)
 80114fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80114fc:	4b07      	ldr	r3, [pc, #28]	; (801151c <HAL_FLASH_Unlock+0x38>)
 80114fe:	4a09      	ldr	r2, [pc, #36]	; (8011524 <HAL_FLASH_Unlock+0x40>)
 8011500:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011502:	4b06      	ldr	r3, [pc, #24]	; (801151c <HAL_FLASH_Unlock+0x38>)
 8011504:	691b      	ldr	r3, [r3, #16]
 8011506:	2b00      	cmp	r3, #0
 8011508:	da01      	bge.n	801150e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801150a:	2301      	movs	r3, #1
 801150c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801150e:	79fb      	ldrb	r3, [r7, #7]
}
 8011510:	4618      	mov	r0, r3
 8011512:	370c      	adds	r7, #12
 8011514:	46bd      	mov	sp, r7
 8011516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151a:	4770      	bx	lr
 801151c:	40023c00 	.word	0x40023c00
 8011520:	45670123 	.word	0x45670123
 8011524:	cdef89ab 	.word	0xcdef89ab

08011528 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8011528:	b480      	push	{r7}
 801152a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 801152c:	4b05      	ldr	r3, [pc, #20]	; (8011544 <HAL_FLASH_Lock+0x1c>)
 801152e:	691b      	ldr	r3, [r3, #16]
 8011530:	4a04      	ldr	r2, [pc, #16]	; (8011544 <HAL_FLASH_Lock+0x1c>)
 8011532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011536:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8011538:	2300      	movs	r3, #0
}
 801153a:	4618      	mov	r0, r3
 801153c:	46bd      	mov	sp, r7
 801153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011542:	4770      	bx	lr
 8011544:	40023c00 	.word	0x40023c00

08011548 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8011548:	b580      	push	{r7, lr}
 801154a:	b084      	sub	sp, #16
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011550:	2300      	movs	r3, #0
 8011552:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011554:	4b1a      	ldr	r3, [pc, #104]	; (80115c0 <FLASH_WaitForLastOperation+0x78>)
 8011556:	2200      	movs	r2, #0
 8011558:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801155a:	f7fe fe67 	bl	801022c <HAL_GetTick>
 801155e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011560:	e010      	b.n	8011584 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011568:	d00c      	beq.n	8011584 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d007      	beq.n	8011580 <FLASH_WaitForLastOperation+0x38>
 8011570:	f7fe fe5c 	bl	801022c <HAL_GetTick>
 8011574:	4602      	mov	r2, r0
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	1ad3      	subs	r3, r2, r3
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	429a      	cmp	r2, r3
 801157e:	d201      	bcs.n	8011584 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8011580:	2303      	movs	r3, #3
 8011582:	e019      	b.n	80115b8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011584:	4b0f      	ldr	r3, [pc, #60]	; (80115c4 <FLASH_WaitForLastOperation+0x7c>)
 8011586:	68db      	ldr	r3, [r3, #12]
 8011588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801158c:	2b00      	cmp	r3, #0
 801158e:	d1e8      	bne.n	8011562 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8011590:	4b0c      	ldr	r3, [pc, #48]	; (80115c4 <FLASH_WaitForLastOperation+0x7c>)
 8011592:	68db      	ldr	r3, [r3, #12]
 8011594:	f003 0301 	and.w	r3, r3, #1
 8011598:	2b00      	cmp	r3, #0
 801159a:	d002      	beq.n	80115a2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801159c:	4b09      	ldr	r3, [pc, #36]	; (80115c4 <FLASH_WaitForLastOperation+0x7c>)
 801159e:	2201      	movs	r2, #1
 80115a0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80115a2:	4b08      	ldr	r3, [pc, #32]	; (80115c4 <FLASH_WaitForLastOperation+0x7c>)
 80115a4:	68db      	ldr	r3, [r3, #12]
 80115a6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d003      	beq.n	80115b6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80115ae:	f000 f80b 	bl	80115c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80115b2:	2301      	movs	r3, #1
 80115b4:	e000      	b.n	80115b8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80115b6:	2300      	movs	r3, #0
  
}  
 80115b8:	4618      	mov	r0, r3
 80115ba:	3710      	adds	r7, #16
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}
 80115c0:	2001088c 	.word	0x2001088c
 80115c4:	40023c00 	.word	0x40023c00

080115c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80115c8:	b480      	push	{r7}
 80115ca:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80115cc:	4b27      	ldr	r3, [pc, #156]	; (801166c <FLASH_SetErrorCode+0xa4>)
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	f003 0310 	and.w	r3, r3, #16
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d008      	beq.n	80115ea <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80115d8:	4b25      	ldr	r3, [pc, #148]	; (8011670 <FLASH_SetErrorCode+0xa8>)
 80115da:	69db      	ldr	r3, [r3, #28]
 80115dc:	f043 0310 	orr.w	r3, r3, #16
 80115e0:	4a23      	ldr	r2, [pc, #140]	; (8011670 <FLASH_SetErrorCode+0xa8>)
 80115e2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80115e4:	4b21      	ldr	r3, [pc, #132]	; (801166c <FLASH_SetErrorCode+0xa4>)
 80115e6:	2210      	movs	r2, #16
 80115e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80115ea:	4b20      	ldr	r3, [pc, #128]	; (801166c <FLASH_SetErrorCode+0xa4>)
 80115ec:	68db      	ldr	r3, [r3, #12]
 80115ee:	f003 0320 	and.w	r3, r3, #32
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d008      	beq.n	8011608 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80115f6:	4b1e      	ldr	r3, [pc, #120]	; (8011670 <FLASH_SetErrorCode+0xa8>)
 80115f8:	69db      	ldr	r3, [r3, #28]
 80115fa:	f043 0308 	orr.w	r3, r3, #8
 80115fe:	4a1c      	ldr	r2, [pc, #112]	; (8011670 <FLASH_SetErrorCode+0xa8>)
 8011600:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8011602:	4b1a      	ldr	r3, [pc, #104]	; (801166c <FLASH_SetErrorCode+0xa4>)
 8011604:	2220      	movs	r2, #32
 8011606:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8011608:	4b18      	ldr	r3, [pc, #96]	; (801166c <FLASH_SetErrorCode+0xa4>)
 801160a:	68db      	ldr	r3, [r3, #12]
 801160c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011610:	2b00      	cmp	r3, #0
 8011612:	d008      	beq.n	8011626 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8011614:	4b16      	ldr	r3, [pc, #88]	; (8011670 <FLASH_SetErrorCode+0xa8>)
 8011616:	69db      	ldr	r3, [r3, #28]
 8011618:	f043 0304 	orr.w	r3, r3, #4
 801161c:	4a14      	ldr	r2, [pc, #80]	; (8011670 <FLASH_SetErrorCode+0xa8>)
 801161e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8011620:	4b12      	ldr	r3, [pc, #72]	; (801166c <FLASH_SetErrorCode+0xa4>)
 8011622:	2240      	movs	r2, #64	; 0x40
 8011624:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8011626:	4b11      	ldr	r3, [pc, #68]	; (801166c <FLASH_SetErrorCode+0xa4>)
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801162e:	2b00      	cmp	r3, #0
 8011630:	d008      	beq.n	8011644 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8011632:	4b0f      	ldr	r3, [pc, #60]	; (8011670 <FLASH_SetErrorCode+0xa8>)
 8011634:	69db      	ldr	r3, [r3, #28]
 8011636:	f043 0302 	orr.w	r3, r3, #2
 801163a:	4a0d      	ldr	r2, [pc, #52]	; (8011670 <FLASH_SetErrorCode+0xa8>)
 801163c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801163e:	4b0b      	ldr	r3, [pc, #44]	; (801166c <FLASH_SetErrorCode+0xa4>)
 8011640:	2280      	movs	r2, #128	; 0x80
 8011642:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8011644:	4b09      	ldr	r3, [pc, #36]	; (801166c <FLASH_SetErrorCode+0xa4>)
 8011646:	68db      	ldr	r3, [r3, #12]
 8011648:	f003 0302 	and.w	r3, r3, #2
 801164c:	2b00      	cmp	r3, #0
 801164e:	d008      	beq.n	8011662 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8011650:	4b07      	ldr	r3, [pc, #28]	; (8011670 <FLASH_SetErrorCode+0xa8>)
 8011652:	69db      	ldr	r3, [r3, #28]
 8011654:	f043 0320 	orr.w	r3, r3, #32
 8011658:	4a05      	ldr	r2, [pc, #20]	; (8011670 <FLASH_SetErrorCode+0xa8>)
 801165a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 801165c:	4b03      	ldr	r3, [pc, #12]	; (801166c <FLASH_SetErrorCode+0xa4>)
 801165e:	2202      	movs	r2, #2
 8011660:	60da      	str	r2, [r3, #12]
  }
}
 8011662:	bf00      	nop
 8011664:	46bd      	mov	sp, r7
 8011666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166a:	4770      	bx	lr
 801166c:	40023c00 	.word	0x40023c00
 8011670:	2001088c 	.word	0x2001088c

08011674 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b084      	sub	sp, #16
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801167e:	2301      	movs	r3, #1
 8011680:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8011682:	2300      	movs	r3, #0
 8011684:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8011686:	4b31      	ldr	r3, [pc, #196]	; (801174c <HAL_FLASHEx_Erase+0xd8>)
 8011688:	7e1b      	ldrb	r3, [r3, #24]
 801168a:	2b01      	cmp	r3, #1
 801168c:	d101      	bne.n	8011692 <HAL_FLASHEx_Erase+0x1e>
 801168e:	2302      	movs	r3, #2
 8011690:	e058      	b.n	8011744 <HAL_FLASHEx_Erase+0xd0>
 8011692:	4b2e      	ldr	r3, [pc, #184]	; (801174c <HAL_FLASHEx_Erase+0xd8>)
 8011694:	2201      	movs	r2, #1
 8011696:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011698:	f24c 3050 	movw	r0, #50000	; 0xc350
 801169c:	f7ff ff54 	bl	8011548 <FLASH_WaitForLastOperation>
 80116a0:	4603      	mov	r3, r0
 80116a2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80116a4:	7bfb      	ldrb	r3, [r7, #15]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d148      	bne.n	801173c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	f04f 32ff 	mov.w	r2, #4294967295
 80116b0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	2b01      	cmp	r3, #1
 80116b8:	d115      	bne.n	80116e6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	691b      	ldr	r3, [r3, #16]
 80116be:	b2da      	uxtb	r2, r3
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	685b      	ldr	r3, [r3, #4]
 80116c4:	4619      	mov	r1, r3
 80116c6:	4610      	mov	r0, r2
 80116c8:	f000 f844 	bl	8011754 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80116cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80116d0:	f7ff ff3a 	bl	8011548 <FLASH_WaitForLastOperation>
 80116d4:	4603      	mov	r3, r0
 80116d6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80116d8:	4b1d      	ldr	r3, [pc, #116]	; (8011750 <HAL_FLASHEx_Erase+0xdc>)
 80116da:	691b      	ldr	r3, [r3, #16]
 80116dc:	4a1c      	ldr	r2, [pc, #112]	; (8011750 <HAL_FLASHEx_Erase+0xdc>)
 80116de:	f023 0304 	bic.w	r3, r3, #4
 80116e2:	6113      	str	r3, [r2, #16]
 80116e4:	e028      	b.n	8011738 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	689b      	ldr	r3, [r3, #8]
 80116ea:	60bb      	str	r3, [r7, #8]
 80116ec:	e01c      	b.n	8011728 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	691b      	ldr	r3, [r3, #16]
 80116f2:	b2db      	uxtb	r3, r3
 80116f4:	4619      	mov	r1, r3
 80116f6:	68b8      	ldr	r0, [r7, #8]
 80116f8:	f000 f850 	bl	801179c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80116fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011700:	f7ff ff22 	bl	8011548 <FLASH_WaitForLastOperation>
 8011704:	4603      	mov	r3, r0
 8011706:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8011708:	4b11      	ldr	r3, [pc, #68]	; (8011750 <HAL_FLASHEx_Erase+0xdc>)
 801170a:	691b      	ldr	r3, [r3, #16]
 801170c:	4a10      	ldr	r2, [pc, #64]	; (8011750 <HAL_FLASHEx_Erase+0xdc>)
 801170e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8011712:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8011714:	7bfb      	ldrb	r3, [r7, #15]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d003      	beq.n	8011722 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	68ba      	ldr	r2, [r7, #8]
 801171e:	601a      	str	r2, [r3, #0]
          break;
 8011720:	e00a      	b.n	8011738 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	3301      	adds	r3, #1
 8011726:	60bb      	str	r3, [r7, #8]
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	68da      	ldr	r2, [r3, #12]
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	689b      	ldr	r3, [r3, #8]
 8011730:	4413      	add	r3, r2
 8011732:	68ba      	ldr	r2, [r7, #8]
 8011734:	429a      	cmp	r2, r3
 8011736:	d3da      	bcc.n	80116ee <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8011738:	f000 f878 	bl	801182c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801173c:	4b03      	ldr	r3, [pc, #12]	; (801174c <HAL_FLASHEx_Erase+0xd8>)
 801173e:	2200      	movs	r2, #0
 8011740:	761a      	strb	r2, [r3, #24]

  return status;
 8011742:	7bfb      	ldrb	r3, [r7, #15]
}
 8011744:	4618      	mov	r0, r3
 8011746:	3710      	adds	r7, #16
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}
 801174c:	2001088c 	.word	0x2001088c
 8011750:	40023c00 	.word	0x40023c00

08011754 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8011754:	b480      	push	{r7}
 8011756:	b083      	sub	sp, #12
 8011758:	af00      	add	r7, sp, #0
 801175a:	4603      	mov	r3, r0
 801175c:	6039      	str	r1, [r7, #0]
 801175e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011760:	4b0d      	ldr	r3, [pc, #52]	; (8011798 <FLASH_MassErase+0x44>)
 8011762:	691b      	ldr	r3, [r3, #16]
 8011764:	4a0c      	ldr	r2, [pc, #48]	; (8011798 <FLASH_MassErase+0x44>)
 8011766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801176a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 801176c:	4b0a      	ldr	r3, [pc, #40]	; (8011798 <FLASH_MassErase+0x44>)
 801176e:	691b      	ldr	r3, [r3, #16]
 8011770:	4a09      	ldr	r2, [pc, #36]	; (8011798 <FLASH_MassErase+0x44>)
 8011772:	f043 0304 	orr.w	r3, r3, #4
 8011776:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8011778:	4b07      	ldr	r3, [pc, #28]	; (8011798 <FLASH_MassErase+0x44>)
 801177a:	691a      	ldr	r2, [r3, #16]
 801177c:	79fb      	ldrb	r3, [r7, #7]
 801177e:	021b      	lsls	r3, r3, #8
 8011780:	4313      	orrs	r3, r2
 8011782:	4a05      	ldr	r2, [pc, #20]	; (8011798 <FLASH_MassErase+0x44>)
 8011784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011788:	6113      	str	r3, [r2, #16]
}
 801178a:	bf00      	nop
 801178c:	370c      	adds	r7, #12
 801178e:	46bd      	mov	sp, r7
 8011790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011794:	4770      	bx	lr
 8011796:	bf00      	nop
 8011798:	40023c00 	.word	0x40023c00

0801179c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 801179c:	b480      	push	{r7}
 801179e:	b085      	sub	sp, #20
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	460b      	mov	r3, r1
 80117a6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80117a8:	2300      	movs	r3, #0
 80117aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80117ac:	78fb      	ldrb	r3, [r7, #3]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d102      	bne.n	80117b8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80117b2:	2300      	movs	r3, #0
 80117b4:	60fb      	str	r3, [r7, #12]
 80117b6:	e010      	b.n	80117da <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80117b8:	78fb      	ldrb	r3, [r7, #3]
 80117ba:	2b01      	cmp	r3, #1
 80117bc:	d103      	bne.n	80117c6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80117be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80117c2:	60fb      	str	r3, [r7, #12]
 80117c4:	e009      	b.n	80117da <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80117c6:	78fb      	ldrb	r3, [r7, #3]
 80117c8:	2b02      	cmp	r3, #2
 80117ca:	d103      	bne.n	80117d4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80117cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80117d0:	60fb      	str	r3, [r7, #12]
 80117d2:	e002      	b.n	80117da <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80117d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80117d8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80117da:	4b13      	ldr	r3, [pc, #76]	; (8011828 <FLASH_Erase_Sector+0x8c>)
 80117dc:	691b      	ldr	r3, [r3, #16]
 80117de:	4a12      	ldr	r2, [pc, #72]	; (8011828 <FLASH_Erase_Sector+0x8c>)
 80117e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80117e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80117e6:	4b10      	ldr	r3, [pc, #64]	; (8011828 <FLASH_Erase_Sector+0x8c>)
 80117e8:	691a      	ldr	r2, [r3, #16]
 80117ea:	490f      	ldr	r1, [pc, #60]	; (8011828 <FLASH_Erase_Sector+0x8c>)
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	4313      	orrs	r3, r2
 80117f0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80117f2:	4b0d      	ldr	r3, [pc, #52]	; (8011828 <FLASH_Erase_Sector+0x8c>)
 80117f4:	691b      	ldr	r3, [r3, #16]
 80117f6:	4a0c      	ldr	r2, [pc, #48]	; (8011828 <FLASH_Erase_Sector+0x8c>)
 80117f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80117fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80117fe:	4b0a      	ldr	r3, [pc, #40]	; (8011828 <FLASH_Erase_Sector+0x8c>)
 8011800:	691a      	ldr	r2, [r3, #16]
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	00db      	lsls	r3, r3, #3
 8011806:	4313      	orrs	r3, r2
 8011808:	4a07      	ldr	r2, [pc, #28]	; (8011828 <FLASH_Erase_Sector+0x8c>)
 801180a:	f043 0302 	orr.w	r3, r3, #2
 801180e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8011810:	4b05      	ldr	r3, [pc, #20]	; (8011828 <FLASH_Erase_Sector+0x8c>)
 8011812:	691b      	ldr	r3, [r3, #16]
 8011814:	4a04      	ldr	r2, [pc, #16]	; (8011828 <FLASH_Erase_Sector+0x8c>)
 8011816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801181a:	6113      	str	r3, [r2, #16]
}
 801181c:	bf00      	nop
 801181e:	3714      	adds	r7, #20
 8011820:	46bd      	mov	sp, r7
 8011822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011826:	4770      	bx	lr
 8011828:	40023c00 	.word	0x40023c00

0801182c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801182c:	b480      	push	{r7}
 801182e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8011830:	4b20      	ldr	r3, [pc, #128]	; (80118b4 <FLASH_FlushCaches+0x88>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011838:	2b00      	cmp	r3, #0
 801183a:	d017      	beq.n	801186c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801183c:	4b1d      	ldr	r3, [pc, #116]	; (80118b4 <FLASH_FlushCaches+0x88>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4a1c      	ldr	r2, [pc, #112]	; (80118b4 <FLASH_FlushCaches+0x88>)
 8011842:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011846:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8011848:	4b1a      	ldr	r3, [pc, #104]	; (80118b4 <FLASH_FlushCaches+0x88>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	4a19      	ldr	r2, [pc, #100]	; (80118b4 <FLASH_FlushCaches+0x88>)
 801184e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011852:	6013      	str	r3, [r2, #0]
 8011854:	4b17      	ldr	r3, [pc, #92]	; (80118b4 <FLASH_FlushCaches+0x88>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	4a16      	ldr	r2, [pc, #88]	; (80118b4 <FLASH_FlushCaches+0x88>)
 801185a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801185e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011860:	4b14      	ldr	r3, [pc, #80]	; (80118b4 <FLASH_FlushCaches+0x88>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	4a13      	ldr	r2, [pc, #76]	; (80118b4 <FLASH_FlushCaches+0x88>)
 8011866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801186a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 801186c:	4b11      	ldr	r3, [pc, #68]	; (80118b4 <FLASH_FlushCaches+0x88>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011874:	2b00      	cmp	r3, #0
 8011876:	d017      	beq.n	80118a8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8011878:	4b0e      	ldr	r3, [pc, #56]	; (80118b4 <FLASH_FlushCaches+0x88>)
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	4a0d      	ldr	r2, [pc, #52]	; (80118b4 <FLASH_FlushCaches+0x88>)
 801187e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011882:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8011884:	4b0b      	ldr	r3, [pc, #44]	; (80118b4 <FLASH_FlushCaches+0x88>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	4a0a      	ldr	r2, [pc, #40]	; (80118b4 <FLASH_FlushCaches+0x88>)
 801188a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801188e:	6013      	str	r3, [r2, #0]
 8011890:	4b08      	ldr	r3, [pc, #32]	; (80118b4 <FLASH_FlushCaches+0x88>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	4a07      	ldr	r2, [pc, #28]	; (80118b4 <FLASH_FlushCaches+0x88>)
 8011896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801189a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801189c:	4b05      	ldr	r3, [pc, #20]	; (80118b4 <FLASH_FlushCaches+0x88>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	4a04      	ldr	r2, [pc, #16]	; (80118b4 <FLASH_FlushCaches+0x88>)
 80118a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80118a6:	6013      	str	r3, [r2, #0]
  }
}
 80118a8:	bf00      	nop
 80118aa:	46bd      	mov	sp, r7
 80118ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b0:	4770      	bx	lr
 80118b2:	bf00      	nop
 80118b4:	40023c00 	.word	0x40023c00

080118b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80118b8:	b480      	push	{r7}
 80118ba:	b089      	sub	sp, #36	; 0x24
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
 80118c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80118c2:	2300      	movs	r3, #0
 80118c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80118c6:	2300      	movs	r3, #0
 80118c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80118ca:	2300      	movs	r3, #0
 80118cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80118ce:	2300      	movs	r3, #0
 80118d0:	61fb      	str	r3, [r7, #28]
 80118d2:	e16b      	b.n	8011bac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80118d4:	2201      	movs	r2, #1
 80118d6:	69fb      	ldr	r3, [r7, #28]
 80118d8:	fa02 f303 	lsl.w	r3, r2, r3
 80118dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	697a      	ldr	r2, [r7, #20]
 80118e4:	4013      	ands	r3, r2
 80118e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80118e8:	693a      	ldr	r2, [r7, #16]
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	429a      	cmp	r2, r3
 80118ee:	f040 815a 	bne.w	8011ba6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	2b01      	cmp	r3, #1
 80118f8:	d00b      	beq.n	8011912 <HAL_GPIO_Init+0x5a>
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	685b      	ldr	r3, [r3, #4]
 80118fe:	2b02      	cmp	r3, #2
 8011900:	d007      	beq.n	8011912 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011906:	2b11      	cmp	r3, #17
 8011908:	d003      	beq.n	8011912 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	685b      	ldr	r3, [r3, #4]
 801190e:	2b12      	cmp	r3, #18
 8011910:	d130      	bne.n	8011974 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	689b      	ldr	r3, [r3, #8]
 8011916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011918:	69fb      	ldr	r3, [r7, #28]
 801191a:	005b      	lsls	r3, r3, #1
 801191c:	2203      	movs	r2, #3
 801191e:	fa02 f303 	lsl.w	r3, r2, r3
 8011922:	43db      	mvns	r3, r3
 8011924:	69ba      	ldr	r2, [r7, #24]
 8011926:	4013      	ands	r3, r2
 8011928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	68da      	ldr	r2, [r3, #12]
 801192e:	69fb      	ldr	r3, [r7, #28]
 8011930:	005b      	lsls	r3, r3, #1
 8011932:	fa02 f303 	lsl.w	r3, r2, r3
 8011936:	69ba      	ldr	r2, [r7, #24]
 8011938:	4313      	orrs	r3, r2
 801193a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	69ba      	ldr	r2, [r7, #24]
 8011940:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	685b      	ldr	r3, [r3, #4]
 8011946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011948:	2201      	movs	r2, #1
 801194a:	69fb      	ldr	r3, [r7, #28]
 801194c:	fa02 f303 	lsl.w	r3, r2, r3
 8011950:	43db      	mvns	r3, r3
 8011952:	69ba      	ldr	r2, [r7, #24]
 8011954:	4013      	ands	r3, r2
 8011956:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	685b      	ldr	r3, [r3, #4]
 801195c:	091b      	lsrs	r3, r3, #4
 801195e:	f003 0201 	and.w	r2, r3, #1
 8011962:	69fb      	ldr	r3, [r7, #28]
 8011964:	fa02 f303 	lsl.w	r3, r2, r3
 8011968:	69ba      	ldr	r2, [r7, #24]
 801196a:	4313      	orrs	r3, r2
 801196c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	69ba      	ldr	r2, [r7, #24]
 8011972:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	68db      	ldr	r3, [r3, #12]
 8011978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801197a:	69fb      	ldr	r3, [r7, #28]
 801197c:	005b      	lsls	r3, r3, #1
 801197e:	2203      	movs	r2, #3
 8011980:	fa02 f303 	lsl.w	r3, r2, r3
 8011984:	43db      	mvns	r3, r3
 8011986:	69ba      	ldr	r2, [r7, #24]
 8011988:	4013      	ands	r3, r2
 801198a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	689a      	ldr	r2, [r3, #8]
 8011990:	69fb      	ldr	r3, [r7, #28]
 8011992:	005b      	lsls	r3, r3, #1
 8011994:	fa02 f303 	lsl.w	r3, r2, r3
 8011998:	69ba      	ldr	r2, [r7, #24]
 801199a:	4313      	orrs	r3, r2
 801199c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	69ba      	ldr	r2, [r7, #24]
 80119a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	685b      	ldr	r3, [r3, #4]
 80119a8:	2b02      	cmp	r3, #2
 80119aa:	d003      	beq.n	80119b4 <HAL_GPIO_Init+0xfc>
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	685b      	ldr	r3, [r3, #4]
 80119b0:	2b12      	cmp	r3, #18
 80119b2:	d123      	bne.n	80119fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80119b4:	69fb      	ldr	r3, [r7, #28]
 80119b6:	08da      	lsrs	r2, r3, #3
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	3208      	adds	r2, #8
 80119bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80119c2:	69fb      	ldr	r3, [r7, #28]
 80119c4:	f003 0307 	and.w	r3, r3, #7
 80119c8:	009b      	lsls	r3, r3, #2
 80119ca:	220f      	movs	r2, #15
 80119cc:	fa02 f303 	lsl.w	r3, r2, r3
 80119d0:	43db      	mvns	r3, r3
 80119d2:	69ba      	ldr	r2, [r7, #24]
 80119d4:	4013      	ands	r3, r2
 80119d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	691a      	ldr	r2, [r3, #16]
 80119dc:	69fb      	ldr	r3, [r7, #28]
 80119de:	f003 0307 	and.w	r3, r3, #7
 80119e2:	009b      	lsls	r3, r3, #2
 80119e4:	fa02 f303 	lsl.w	r3, r2, r3
 80119e8:	69ba      	ldr	r2, [r7, #24]
 80119ea:	4313      	orrs	r3, r2
 80119ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80119ee:	69fb      	ldr	r3, [r7, #28]
 80119f0:	08da      	lsrs	r2, r3, #3
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	3208      	adds	r2, #8
 80119f6:	69b9      	ldr	r1, [r7, #24]
 80119f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011a02:	69fb      	ldr	r3, [r7, #28]
 8011a04:	005b      	lsls	r3, r3, #1
 8011a06:	2203      	movs	r2, #3
 8011a08:	fa02 f303 	lsl.w	r3, r2, r3
 8011a0c:	43db      	mvns	r3, r3
 8011a0e:	69ba      	ldr	r2, [r7, #24]
 8011a10:	4013      	ands	r3, r2
 8011a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	f003 0203 	and.w	r2, r3, #3
 8011a1c:	69fb      	ldr	r3, [r7, #28]
 8011a1e:	005b      	lsls	r3, r3, #1
 8011a20:	fa02 f303 	lsl.w	r3, r2, r3
 8011a24:	69ba      	ldr	r2, [r7, #24]
 8011a26:	4313      	orrs	r3, r2
 8011a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	69ba      	ldr	r2, [r7, #24]
 8011a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	685b      	ldr	r3, [r3, #4]
 8011a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	f000 80b4 	beq.w	8011ba6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011a3e:	2300      	movs	r3, #0
 8011a40:	60fb      	str	r3, [r7, #12]
 8011a42:	4b5f      	ldr	r3, [pc, #380]	; (8011bc0 <HAL_GPIO_Init+0x308>)
 8011a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a46:	4a5e      	ldr	r2, [pc, #376]	; (8011bc0 <HAL_GPIO_Init+0x308>)
 8011a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8011a4e:	4b5c      	ldr	r3, [pc, #368]	; (8011bc0 <HAL_GPIO_Init+0x308>)
 8011a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a56:	60fb      	str	r3, [r7, #12]
 8011a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8011a5a:	4a5a      	ldr	r2, [pc, #360]	; (8011bc4 <HAL_GPIO_Init+0x30c>)
 8011a5c:	69fb      	ldr	r3, [r7, #28]
 8011a5e:	089b      	lsrs	r3, r3, #2
 8011a60:	3302      	adds	r3, #2
 8011a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011a68:	69fb      	ldr	r3, [r7, #28]
 8011a6a:	f003 0303 	and.w	r3, r3, #3
 8011a6e:	009b      	lsls	r3, r3, #2
 8011a70:	220f      	movs	r2, #15
 8011a72:	fa02 f303 	lsl.w	r3, r2, r3
 8011a76:	43db      	mvns	r3, r3
 8011a78:	69ba      	ldr	r2, [r7, #24]
 8011a7a:	4013      	ands	r3, r2
 8011a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	4a51      	ldr	r2, [pc, #324]	; (8011bc8 <HAL_GPIO_Init+0x310>)
 8011a82:	4293      	cmp	r3, r2
 8011a84:	d02b      	beq.n	8011ade <HAL_GPIO_Init+0x226>
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	4a50      	ldr	r2, [pc, #320]	; (8011bcc <HAL_GPIO_Init+0x314>)
 8011a8a:	4293      	cmp	r3, r2
 8011a8c:	d025      	beq.n	8011ada <HAL_GPIO_Init+0x222>
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	4a4f      	ldr	r2, [pc, #316]	; (8011bd0 <HAL_GPIO_Init+0x318>)
 8011a92:	4293      	cmp	r3, r2
 8011a94:	d01f      	beq.n	8011ad6 <HAL_GPIO_Init+0x21e>
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	4a4e      	ldr	r2, [pc, #312]	; (8011bd4 <HAL_GPIO_Init+0x31c>)
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	d019      	beq.n	8011ad2 <HAL_GPIO_Init+0x21a>
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	4a4d      	ldr	r2, [pc, #308]	; (8011bd8 <HAL_GPIO_Init+0x320>)
 8011aa2:	4293      	cmp	r3, r2
 8011aa4:	d013      	beq.n	8011ace <HAL_GPIO_Init+0x216>
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	4a4c      	ldr	r2, [pc, #304]	; (8011bdc <HAL_GPIO_Init+0x324>)
 8011aaa:	4293      	cmp	r3, r2
 8011aac:	d00d      	beq.n	8011aca <HAL_GPIO_Init+0x212>
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	4a4b      	ldr	r2, [pc, #300]	; (8011be0 <HAL_GPIO_Init+0x328>)
 8011ab2:	4293      	cmp	r3, r2
 8011ab4:	d007      	beq.n	8011ac6 <HAL_GPIO_Init+0x20e>
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	4a4a      	ldr	r2, [pc, #296]	; (8011be4 <HAL_GPIO_Init+0x32c>)
 8011aba:	4293      	cmp	r3, r2
 8011abc:	d101      	bne.n	8011ac2 <HAL_GPIO_Init+0x20a>
 8011abe:	2307      	movs	r3, #7
 8011ac0:	e00e      	b.n	8011ae0 <HAL_GPIO_Init+0x228>
 8011ac2:	2308      	movs	r3, #8
 8011ac4:	e00c      	b.n	8011ae0 <HAL_GPIO_Init+0x228>
 8011ac6:	2306      	movs	r3, #6
 8011ac8:	e00a      	b.n	8011ae0 <HAL_GPIO_Init+0x228>
 8011aca:	2305      	movs	r3, #5
 8011acc:	e008      	b.n	8011ae0 <HAL_GPIO_Init+0x228>
 8011ace:	2304      	movs	r3, #4
 8011ad0:	e006      	b.n	8011ae0 <HAL_GPIO_Init+0x228>
 8011ad2:	2303      	movs	r3, #3
 8011ad4:	e004      	b.n	8011ae0 <HAL_GPIO_Init+0x228>
 8011ad6:	2302      	movs	r3, #2
 8011ad8:	e002      	b.n	8011ae0 <HAL_GPIO_Init+0x228>
 8011ada:	2301      	movs	r3, #1
 8011adc:	e000      	b.n	8011ae0 <HAL_GPIO_Init+0x228>
 8011ade:	2300      	movs	r3, #0
 8011ae0:	69fa      	ldr	r2, [r7, #28]
 8011ae2:	f002 0203 	and.w	r2, r2, #3
 8011ae6:	0092      	lsls	r2, r2, #2
 8011ae8:	4093      	lsls	r3, r2
 8011aea:	69ba      	ldr	r2, [r7, #24]
 8011aec:	4313      	orrs	r3, r2
 8011aee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011af0:	4934      	ldr	r1, [pc, #208]	; (8011bc4 <HAL_GPIO_Init+0x30c>)
 8011af2:	69fb      	ldr	r3, [r7, #28]
 8011af4:	089b      	lsrs	r3, r3, #2
 8011af6:	3302      	adds	r3, #2
 8011af8:	69ba      	ldr	r2, [r7, #24]
 8011afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011afe:	4b3a      	ldr	r3, [pc, #232]	; (8011be8 <HAL_GPIO_Init+0x330>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011b04:	693b      	ldr	r3, [r7, #16]
 8011b06:	43db      	mvns	r3, r3
 8011b08:	69ba      	ldr	r2, [r7, #24]
 8011b0a:	4013      	ands	r3, r2
 8011b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	685b      	ldr	r3, [r3, #4]
 8011b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d003      	beq.n	8011b22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8011b1a:	69ba      	ldr	r2, [r7, #24]
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	4313      	orrs	r3, r2
 8011b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011b22:	4a31      	ldr	r2, [pc, #196]	; (8011be8 <HAL_GPIO_Init+0x330>)
 8011b24:	69bb      	ldr	r3, [r7, #24]
 8011b26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8011b28:	4b2f      	ldr	r3, [pc, #188]	; (8011be8 <HAL_GPIO_Init+0x330>)
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011b2e:	693b      	ldr	r3, [r7, #16]
 8011b30:	43db      	mvns	r3, r3
 8011b32:	69ba      	ldr	r2, [r7, #24]
 8011b34:	4013      	ands	r3, r2
 8011b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d003      	beq.n	8011b4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8011b44:	69ba      	ldr	r2, [r7, #24]
 8011b46:	693b      	ldr	r3, [r7, #16]
 8011b48:	4313      	orrs	r3, r2
 8011b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8011b4c:	4a26      	ldr	r2, [pc, #152]	; (8011be8 <HAL_GPIO_Init+0x330>)
 8011b4e:	69bb      	ldr	r3, [r7, #24]
 8011b50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011b52:	4b25      	ldr	r3, [pc, #148]	; (8011be8 <HAL_GPIO_Init+0x330>)
 8011b54:	689b      	ldr	r3, [r3, #8]
 8011b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	43db      	mvns	r3, r3
 8011b5c:	69ba      	ldr	r2, [r7, #24]
 8011b5e:	4013      	ands	r3, r2
 8011b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	685b      	ldr	r3, [r3, #4]
 8011b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d003      	beq.n	8011b76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8011b6e:	69ba      	ldr	r2, [r7, #24]
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	4313      	orrs	r3, r2
 8011b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8011b76:	4a1c      	ldr	r2, [pc, #112]	; (8011be8 <HAL_GPIO_Init+0x330>)
 8011b78:	69bb      	ldr	r3, [r7, #24]
 8011b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011b7c:	4b1a      	ldr	r3, [pc, #104]	; (8011be8 <HAL_GPIO_Init+0x330>)
 8011b7e:	68db      	ldr	r3, [r3, #12]
 8011b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	43db      	mvns	r3, r3
 8011b86:	69ba      	ldr	r2, [r7, #24]
 8011b88:	4013      	ands	r3, r2
 8011b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	685b      	ldr	r3, [r3, #4]
 8011b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d003      	beq.n	8011ba0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8011b98:	69ba      	ldr	r2, [r7, #24]
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	4313      	orrs	r3, r2
 8011b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011ba0:	4a11      	ldr	r2, [pc, #68]	; (8011be8 <HAL_GPIO_Init+0x330>)
 8011ba2:	69bb      	ldr	r3, [r7, #24]
 8011ba4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011ba6:	69fb      	ldr	r3, [r7, #28]
 8011ba8:	3301      	adds	r3, #1
 8011baa:	61fb      	str	r3, [r7, #28]
 8011bac:	69fb      	ldr	r3, [r7, #28]
 8011bae:	2b0f      	cmp	r3, #15
 8011bb0:	f67f ae90 	bls.w	80118d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011bb4:	bf00      	nop
 8011bb6:	3724      	adds	r7, #36	; 0x24
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbe:	4770      	bx	lr
 8011bc0:	40023800 	.word	0x40023800
 8011bc4:	40013800 	.word	0x40013800
 8011bc8:	40020000 	.word	0x40020000
 8011bcc:	40020400 	.word	0x40020400
 8011bd0:	40020800 	.word	0x40020800
 8011bd4:	40020c00 	.word	0x40020c00
 8011bd8:	40021000 	.word	0x40021000
 8011bdc:	40021400 	.word	0x40021400
 8011be0:	40021800 	.word	0x40021800
 8011be4:	40021c00 	.word	0x40021c00
 8011be8:	40013c00 	.word	0x40013c00

08011bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011bec:	b480      	push	{r7}
 8011bee:	b083      	sub	sp, #12
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	460b      	mov	r3, r1
 8011bf6:	807b      	strh	r3, [r7, #2]
 8011bf8:	4613      	mov	r3, r2
 8011bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011bfc:	787b      	ldrb	r3, [r7, #1]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d003      	beq.n	8011c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011c02:	887a      	ldrh	r2, [r7, #2]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8011c08:	e003      	b.n	8011c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8011c0a:	887b      	ldrh	r3, [r7, #2]
 8011c0c:	041a      	lsls	r2, r3, #16
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	619a      	str	r2, [r3, #24]
}
 8011c12:	bf00      	nop
 8011c14:	370c      	adds	r7, #12
 8011c16:	46bd      	mov	sp, r7
 8011c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1c:	4770      	bx	lr
	...

08011c20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	4603      	mov	r3, r0
 8011c28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8011c2a:	4b08      	ldr	r3, [pc, #32]	; (8011c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011c2c:	695a      	ldr	r2, [r3, #20]
 8011c2e:	88fb      	ldrh	r3, [r7, #6]
 8011c30:	4013      	ands	r3, r2
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d006      	beq.n	8011c44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8011c36:	4a05      	ldr	r2, [pc, #20]	; (8011c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011c38:	88fb      	ldrh	r3, [r7, #6]
 8011c3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8011c3c:	88fb      	ldrh	r3, [r7, #6]
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7fb fccc 	bl	800d5dc <HAL_GPIO_EXTI_Callback>
  }
}
 8011c44:	bf00      	nop
 8011c46:	3708      	adds	r7, #8
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	40013c00 	.word	0x40013c00

08011c50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b086      	sub	sp, #24
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d101      	bne.n	8011c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011c5e:	2301      	movs	r3, #1
 8011c60:	e25b      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	f003 0301 	and.w	r3, r3, #1
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d075      	beq.n	8011d5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011c6e:	4ba3      	ldr	r3, [pc, #652]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011c70:	689b      	ldr	r3, [r3, #8]
 8011c72:	f003 030c 	and.w	r3, r3, #12
 8011c76:	2b04      	cmp	r3, #4
 8011c78:	d00c      	beq.n	8011c94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011c7a:	4ba0      	ldr	r3, [pc, #640]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011c7c:	689b      	ldr	r3, [r3, #8]
 8011c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011c82:	2b08      	cmp	r3, #8
 8011c84:	d112      	bne.n	8011cac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011c86:	4b9d      	ldr	r3, [pc, #628]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011c92:	d10b      	bne.n	8011cac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011c94:	4b99      	ldr	r3, [pc, #612]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d05b      	beq.n	8011d58 <HAL_RCC_OscConfig+0x108>
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	685b      	ldr	r3, [r3, #4]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d157      	bne.n	8011d58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8011ca8:	2301      	movs	r3, #1
 8011caa:	e236      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	685b      	ldr	r3, [r3, #4]
 8011cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011cb4:	d106      	bne.n	8011cc4 <HAL_RCC_OscConfig+0x74>
 8011cb6:	4b91      	ldr	r3, [pc, #580]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	4a90      	ldr	r2, [pc, #576]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011cc0:	6013      	str	r3, [r2, #0]
 8011cc2:	e01d      	b.n	8011d00 <HAL_RCC_OscConfig+0xb0>
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	685b      	ldr	r3, [r3, #4]
 8011cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011ccc:	d10c      	bne.n	8011ce8 <HAL_RCC_OscConfig+0x98>
 8011cce:	4b8b      	ldr	r3, [pc, #556]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	4a8a      	ldr	r2, [pc, #552]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011cd8:	6013      	str	r3, [r2, #0]
 8011cda:	4b88      	ldr	r3, [pc, #544]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	4a87      	ldr	r2, [pc, #540]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011ce4:	6013      	str	r3, [r2, #0]
 8011ce6:	e00b      	b.n	8011d00 <HAL_RCC_OscConfig+0xb0>
 8011ce8:	4b84      	ldr	r3, [pc, #528]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	4a83      	ldr	r2, [pc, #524]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011cf2:	6013      	str	r3, [r2, #0]
 8011cf4:	4b81      	ldr	r3, [pc, #516]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	4a80      	ldr	r2, [pc, #512]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d013      	beq.n	8011d30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d08:	f7fe fa90 	bl	801022c <HAL_GetTick>
 8011d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011d0e:	e008      	b.n	8011d22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011d10:	f7fe fa8c 	bl	801022c <HAL_GetTick>
 8011d14:	4602      	mov	r2, r0
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	1ad3      	subs	r3, r2, r3
 8011d1a:	2b64      	cmp	r3, #100	; 0x64
 8011d1c:	d901      	bls.n	8011d22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8011d1e:	2303      	movs	r3, #3
 8011d20:	e1fb      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011d22:	4b76      	ldr	r3, [pc, #472]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d0f0      	beq.n	8011d10 <HAL_RCC_OscConfig+0xc0>
 8011d2e:	e014      	b.n	8011d5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d30:	f7fe fa7c 	bl	801022c <HAL_GetTick>
 8011d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011d36:	e008      	b.n	8011d4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011d38:	f7fe fa78 	bl	801022c <HAL_GetTick>
 8011d3c:	4602      	mov	r2, r0
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	1ad3      	subs	r3, r2, r3
 8011d42:	2b64      	cmp	r3, #100	; 0x64
 8011d44:	d901      	bls.n	8011d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011d46:	2303      	movs	r3, #3
 8011d48:	e1e7      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011d4a:	4b6c      	ldr	r3, [pc, #432]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d1f0      	bne.n	8011d38 <HAL_RCC_OscConfig+0xe8>
 8011d56:	e000      	b.n	8011d5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	f003 0302 	and.w	r3, r3, #2
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d063      	beq.n	8011e2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011d66:	4b65      	ldr	r3, [pc, #404]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011d68:	689b      	ldr	r3, [r3, #8]
 8011d6a:	f003 030c 	and.w	r3, r3, #12
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d00b      	beq.n	8011d8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011d72:	4b62      	ldr	r3, [pc, #392]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011d74:	689b      	ldr	r3, [r3, #8]
 8011d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011d7a:	2b08      	cmp	r3, #8
 8011d7c:	d11c      	bne.n	8011db8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011d7e:	4b5f      	ldr	r3, [pc, #380]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011d80:	685b      	ldr	r3, [r3, #4]
 8011d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d116      	bne.n	8011db8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011d8a:	4b5c      	ldr	r3, [pc, #368]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	f003 0302 	and.w	r3, r3, #2
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d005      	beq.n	8011da2 <HAL_RCC_OscConfig+0x152>
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	68db      	ldr	r3, [r3, #12]
 8011d9a:	2b01      	cmp	r3, #1
 8011d9c:	d001      	beq.n	8011da2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8011d9e:	2301      	movs	r3, #1
 8011da0:	e1bb      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011da2:	4b56      	ldr	r3, [pc, #344]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	691b      	ldr	r3, [r3, #16]
 8011dae:	00db      	lsls	r3, r3, #3
 8011db0:	4952      	ldr	r1, [pc, #328]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011db2:	4313      	orrs	r3, r2
 8011db4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011db6:	e03a      	b.n	8011e2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	68db      	ldr	r3, [r3, #12]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d020      	beq.n	8011e02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011dc0:	4b4f      	ldr	r3, [pc, #316]	; (8011f00 <HAL_RCC_OscConfig+0x2b0>)
 8011dc2:	2201      	movs	r2, #1
 8011dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011dc6:	f7fe fa31 	bl	801022c <HAL_GetTick>
 8011dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011dcc:	e008      	b.n	8011de0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011dce:	f7fe fa2d 	bl	801022c <HAL_GetTick>
 8011dd2:	4602      	mov	r2, r0
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	1ad3      	subs	r3, r2, r3
 8011dd8:	2b02      	cmp	r3, #2
 8011dda:	d901      	bls.n	8011de0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8011ddc:	2303      	movs	r3, #3
 8011dde:	e19c      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011de0:	4b46      	ldr	r3, [pc, #280]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	f003 0302 	and.w	r3, r3, #2
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d0f0      	beq.n	8011dce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011dec:	4b43      	ldr	r3, [pc, #268]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	691b      	ldr	r3, [r3, #16]
 8011df8:	00db      	lsls	r3, r3, #3
 8011dfa:	4940      	ldr	r1, [pc, #256]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011dfc:	4313      	orrs	r3, r2
 8011dfe:	600b      	str	r3, [r1, #0]
 8011e00:	e015      	b.n	8011e2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011e02:	4b3f      	ldr	r3, [pc, #252]	; (8011f00 <HAL_RCC_OscConfig+0x2b0>)
 8011e04:	2200      	movs	r2, #0
 8011e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e08:	f7fe fa10 	bl	801022c <HAL_GetTick>
 8011e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011e0e:	e008      	b.n	8011e22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011e10:	f7fe fa0c 	bl	801022c <HAL_GetTick>
 8011e14:	4602      	mov	r2, r0
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	1ad3      	subs	r3, r2, r3
 8011e1a:	2b02      	cmp	r3, #2
 8011e1c:	d901      	bls.n	8011e22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8011e1e:	2303      	movs	r3, #3
 8011e20:	e17b      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011e22:	4b36      	ldr	r3, [pc, #216]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	f003 0302 	and.w	r3, r3, #2
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d1f0      	bne.n	8011e10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	f003 0308 	and.w	r3, r3, #8
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d030      	beq.n	8011e9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	695b      	ldr	r3, [r3, #20]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d016      	beq.n	8011e70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011e42:	4b30      	ldr	r3, [pc, #192]	; (8011f04 <HAL_RCC_OscConfig+0x2b4>)
 8011e44:	2201      	movs	r2, #1
 8011e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011e48:	f7fe f9f0 	bl	801022c <HAL_GetTick>
 8011e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011e4e:	e008      	b.n	8011e62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011e50:	f7fe f9ec 	bl	801022c <HAL_GetTick>
 8011e54:	4602      	mov	r2, r0
 8011e56:	693b      	ldr	r3, [r7, #16]
 8011e58:	1ad3      	subs	r3, r2, r3
 8011e5a:	2b02      	cmp	r3, #2
 8011e5c:	d901      	bls.n	8011e62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8011e5e:	2303      	movs	r3, #3
 8011e60:	e15b      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011e62:	4b26      	ldr	r3, [pc, #152]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e66:	f003 0302 	and.w	r3, r3, #2
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d0f0      	beq.n	8011e50 <HAL_RCC_OscConfig+0x200>
 8011e6e:	e015      	b.n	8011e9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011e70:	4b24      	ldr	r3, [pc, #144]	; (8011f04 <HAL_RCC_OscConfig+0x2b4>)
 8011e72:	2200      	movs	r2, #0
 8011e74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011e76:	f7fe f9d9 	bl	801022c <HAL_GetTick>
 8011e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011e7c:	e008      	b.n	8011e90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011e7e:	f7fe f9d5 	bl	801022c <HAL_GetTick>
 8011e82:	4602      	mov	r2, r0
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	1ad3      	subs	r3, r2, r3
 8011e88:	2b02      	cmp	r3, #2
 8011e8a:	d901      	bls.n	8011e90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8011e8c:	2303      	movs	r3, #3
 8011e8e:	e144      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011e90:	4b1a      	ldr	r3, [pc, #104]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e94:	f003 0302 	and.w	r3, r3, #2
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d1f0      	bne.n	8011e7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	f003 0304 	and.w	r3, r3, #4
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	f000 80a0 	beq.w	8011fea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011eae:	4b13      	ldr	r3, [pc, #76]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d10f      	bne.n	8011eda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011eba:	2300      	movs	r3, #0
 8011ebc:	60bb      	str	r3, [r7, #8]
 8011ebe:	4b0f      	ldr	r3, [pc, #60]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ec2:	4a0e      	ldr	r2, [pc, #56]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8011eca:	4b0c      	ldr	r3, [pc, #48]	; (8011efc <HAL_RCC_OscConfig+0x2ac>)
 8011ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011ed2:	60bb      	str	r3, [r7, #8]
 8011ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011eda:	4b0b      	ldr	r3, [pc, #44]	; (8011f08 <HAL_RCC_OscConfig+0x2b8>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d121      	bne.n	8011f2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011ee6:	4b08      	ldr	r3, [pc, #32]	; (8011f08 <HAL_RCC_OscConfig+0x2b8>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	4a07      	ldr	r2, [pc, #28]	; (8011f08 <HAL_RCC_OscConfig+0x2b8>)
 8011eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011ef2:	f7fe f99b 	bl	801022c <HAL_GetTick>
 8011ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011ef8:	e011      	b.n	8011f1e <HAL_RCC_OscConfig+0x2ce>
 8011efa:	bf00      	nop
 8011efc:	40023800 	.word	0x40023800
 8011f00:	42470000 	.word	0x42470000
 8011f04:	42470e80 	.word	0x42470e80
 8011f08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011f0c:	f7fe f98e 	bl	801022c <HAL_GetTick>
 8011f10:	4602      	mov	r2, r0
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	1ad3      	subs	r3, r2, r3
 8011f16:	2b02      	cmp	r3, #2
 8011f18:	d901      	bls.n	8011f1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8011f1a:	2303      	movs	r3, #3
 8011f1c:	e0fd      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011f1e:	4b81      	ldr	r3, [pc, #516]	; (8012124 <HAL_RCC_OscConfig+0x4d4>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d0f0      	beq.n	8011f0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	689b      	ldr	r3, [r3, #8]
 8011f2e:	2b01      	cmp	r3, #1
 8011f30:	d106      	bne.n	8011f40 <HAL_RCC_OscConfig+0x2f0>
 8011f32:	4b7d      	ldr	r3, [pc, #500]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 8011f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f36:	4a7c      	ldr	r2, [pc, #496]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 8011f38:	f043 0301 	orr.w	r3, r3, #1
 8011f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8011f3e:	e01c      	b.n	8011f7a <HAL_RCC_OscConfig+0x32a>
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	689b      	ldr	r3, [r3, #8]
 8011f44:	2b05      	cmp	r3, #5
 8011f46:	d10c      	bne.n	8011f62 <HAL_RCC_OscConfig+0x312>
 8011f48:	4b77      	ldr	r3, [pc, #476]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 8011f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f4c:	4a76      	ldr	r2, [pc, #472]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 8011f4e:	f043 0304 	orr.w	r3, r3, #4
 8011f52:	6713      	str	r3, [r2, #112]	; 0x70
 8011f54:	4b74      	ldr	r3, [pc, #464]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 8011f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f58:	4a73      	ldr	r2, [pc, #460]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 8011f5a:	f043 0301 	orr.w	r3, r3, #1
 8011f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8011f60:	e00b      	b.n	8011f7a <HAL_RCC_OscConfig+0x32a>
 8011f62:	4b71      	ldr	r3, [pc, #452]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 8011f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f66:	4a70      	ldr	r2, [pc, #448]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 8011f68:	f023 0301 	bic.w	r3, r3, #1
 8011f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8011f6e:	4b6e      	ldr	r3, [pc, #440]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 8011f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f72:	4a6d      	ldr	r2, [pc, #436]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 8011f74:	f023 0304 	bic.w	r3, r3, #4
 8011f78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	689b      	ldr	r3, [r3, #8]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d015      	beq.n	8011fae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011f82:	f7fe f953 	bl	801022c <HAL_GetTick>
 8011f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011f88:	e00a      	b.n	8011fa0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011f8a:	f7fe f94f 	bl	801022c <HAL_GetTick>
 8011f8e:	4602      	mov	r2, r0
 8011f90:	693b      	ldr	r3, [r7, #16]
 8011f92:	1ad3      	subs	r3, r2, r3
 8011f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f98:	4293      	cmp	r3, r2
 8011f9a:	d901      	bls.n	8011fa0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8011f9c:	2303      	movs	r3, #3
 8011f9e:	e0bc      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011fa0:	4b61      	ldr	r3, [pc, #388]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 8011fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fa4:	f003 0302 	and.w	r3, r3, #2
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d0ee      	beq.n	8011f8a <HAL_RCC_OscConfig+0x33a>
 8011fac:	e014      	b.n	8011fd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011fae:	f7fe f93d 	bl	801022c <HAL_GetTick>
 8011fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011fb4:	e00a      	b.n	8011fcc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011fb6:	f7fe f939 	bl	801022c <HAL_GetTick>
 8011fba:	4602      	mov	r2, r0
 8011fbc:	693b      	ldr	r3, [r7, #16]
 8011fbe:	1ad3      	subs	r3, r2, r3
 8011fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fc4:	4293      	cmp	r3, r2
 8011fc6:	d901      	bls.n	8011fcc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8011fc8:	2303      	movs	r3, #3
 8011fca:	e0a6      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011fcc:	4b56      	ldr	r3, [pc, #344]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 8011fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fd0:	f003 0302 	and.w	r3, r3, #2
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d1ee      	bne.n	8011fb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011fd8:	7dfb      	ldrb	r3, [r7, #23]
 8011fda:	2b01      	cmp	r3, #1
 8011fdc:	d105      	bne.n	8011fea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011fde:	4b52      	ldr	r3, [pc, #328]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 8011fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fe2:	4a51      	ldr	r2, [pc, #324]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 8011fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011fe8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	699b      	ldr	r3, [r3, #24]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	f000 8092 	beq.w	8012118 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011ff4:	4b4c      	ldr	r3, [pc, #304]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 8011ff6:	689b      	ldr	r3, [r3, #8]
 8011ff8:	f003 030c 	and.w	r3, r3, #12
 8011ffc:	2b08      	cmp	r3, #8
 8011ffe:	d05c      	beq.n	80120ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	699b      	ldr	r3, [r3, #24]
 8012004:	2b02      	cmp	r3, #2
 8012006:	d141      	bne.n	801208c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012008:	4b48      	ldr	r3, [pc, #288]	; (801212c <HAL_RCC_OscConfig+0x4dc>)
 801200a:	2200      	movs	r2, #0
 801200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801200e:	f7fe f90d 	bl	801022c <HAL_GetTick>
 8012012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012014:	e008      	b.n	8012028 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012016:	f7fe f909 	bl	801022c <HAL_GetTick>
 801201a:	4602      	mov	r2, r0
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	1ad3      	subs	r3, r2, r3
 8012020:	2b02      	cmp	r3, #2
 8012022:	d901      	bls.n	8012028 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8012024:	2303      	movs	r3, #3
 8012026:	e078      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012028:	4b3f      	ldr	r3, [pc, #252]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012030:	2b00      	cmp	r3, #0
 8012032:	d1f0      	bne.n	8012016 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	69da      	ldr	r2, [r3, #28]
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	6a1b      	ldr	r3, [r3, #32]
 801203c:	431a      	orrs	r2, r3
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012042:	019b      	lsls	r3, r3, #6
 8012044:	431a      	orrs	r2, r3
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801204a:	085b      	lsrs	r3, r3, #1
 801204c:	3b01      	subs	r3, #1
 801204e:	041b      	lsls	r3, r3, #16
 8012050:	431a      	orrs	r2, r3
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012056:	061b      	lsls	r3, r3, #24
 8012058:	4933      	ldr	r1, [pc, #204]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 801205a:	4313      	orrs	r3, r2
 801205c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801205e:	4b33      	ldr	r3, [pc, #204]	; (801212c <HAL_RCC_OscConfig+0x4dc>)
 8012060:	2201      	movs	r2, #1
 8012062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012064:	f7fe f8e2 	bl	801022c <HAL_GetTick>
 8012068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801206a:	e008      	b.n	801207e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801206c:	f7fe f8de 	bl	801022c <HAL_GetTick>
 8012070:	4602      	mov	r2, r0
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	1ad3      	subs	r3, r2, r3
 8012076:	2b02      	cmp	r3, #2
 8012078:	d901      	bls.n	801207e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801207a:	2303      	movs	r3, #3
 801207c:	e04d      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801207e:	4b2a      	ldr	r3, [pc, #168]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012086:	2b00      	cmp	r3, #0
 8012088:	d0f0      	beq.n	801206c <HAL_RCC_OscConfig+0x41c>
 801208a:	e045      	b.n	8012118 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801208c:	4b27      	ldr	r3, [pc, #156]	; (801212c <HAL_RCC_OscConfig+0x4dc>)
 801208e:	2200      	movs	r2, #0
 8012090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012092:	f7fe f8cb 	bl	801022c <HAL_GetTick>
 8012096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012098:	e008      	b.n	80120ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801209a:	f7fe f8c7 	bl	801022c <HAL_GetTick>
 801209e:	4602      	mov	r2, r0
 80120a0:	693b      	ldr	r3, [r7, #16]
 80120a2:	1ad3      	subs	r3, r2, r3
 80120a4:	2b02      	cmp	r3, #2
 80120a6:	d901      	bls.n	80120ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80120a8:	2303      	movs	r3, #3
 80120aa:	e036      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80120ac:	4b1e      	ldr	r3, [pc, #120]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d1f0      	bne.n	801209a <HAL_RCC_OscConfig+0x44a>
 80120b8:	e02e      	b.n	8012118 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	699b      	ldr	r3, [r3, #24]
 80120be:	2b01      	cmp	r3, #1
 80120c0:	d101      	bne.n	80120c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80120c2:	2301      	movs	r3, #1
 80120c4:	e029      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80120c6:	4b18      	ldr	r3, [pc, #96]	; (8012128 <HAL_RCC_OscConfig+0x4d8>)
 80120c8:	685b      	ldr	r3, [r3, #4]
 80120ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	69db      	ldr	r3, [r3, #28]
 80120d6:	429a      	cmp	r2, r3
 80120d8:	d11c      	bne.n	8012114 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80120e4:	429a      	cmp	r2, r3
 80120e6:	d115      	bne.n	8012114 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80120e8:	68fa      	ldr	r2, [r7, #12]
 80120ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80120ee:	4013      	ands	r3, r2
 80120f0:	687a      	ldr	r2, [r7, #4]
 80120f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80120f4:	4293      	cmp	r3, r2
 80120f6:	d10d      	bne.n	8012114 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8012102:	429a      	cmp	r2, r3
 8012104:	d106      	bne.n	8012114 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8012110:	429a      	cmp	r2, r3
 8012112:	d001      	beq.n	8012118 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8012114:	2301      	movs	r3, #1
 8012116:	e000      	b.n	801211a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8012118:	2300      	movs	r3, #0
}
 801211a:	4618      	mov	r0, r3
 801211c:	3718      	adds	r7, #24
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
 8012122:	bf00      	nop
 8012124:	40007000 	.word	0x40007000
 8012128:	40023800 	.word	0x40023800
 801212c:	42470060 	.word	0x42470060

08012130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b084      	sub	sp, #16
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
 8012138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d101      	bne.n	8012144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012140:	2301      	movs	r3, #1
 8012142:	e0cc      	b.n	80122de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012144:	4b68      	ldr	r3, [pc, #416]	; (80122e8 <HAL_RCC_ClockConfig+0x1b8>)
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	f003 030f 	and.w	r3, r3, #15
 801214c:	683a      	ldr	r2, [r7, #0]
 801214e:	429a      	cmp	r2, r3
 8012150:	d90c      	bls.n	801216c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012152:	4b65      	ldr	r3, [pc, #404]	; (80122e8 <HAL_RCC_ClockConfig+0x1b8>)
 8012154:	683a      	ldr	r2, [r7, #0]
 8012156:	b2d2      	uxtb	r2, r2
 8012158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801215a:	4b63      	ldr	r3, [pc, #396]	; (80122e8 <HAL_RCC_ClockConfig+0x1b8>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	f003 030f 	and.w	r3, r3, #15
 8012162:	683a      	ldr	r2, [r7, #0]
 8012164:	429a      	cmp	r2, r3
 8012166:	d001      	beq.n	801216c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012168:	2301      	movs	r3, #1
 801216a:	e0b8      	b.n	80122de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	f003 0302 	and.w	r3, r3, #2
 8012174:	2b00      	cmp	r3, #0
 8012176:	d020      	beq.n	80121ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	f003 0304 	and.w	r3, r3, #4
 8012180:	2b00      	cmp	r3, #0
 8012182:	d005      	beq.n	8012190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012184:	4b59      	ldr	r3, [pc, #356]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 8012186:	689b      	ldr	r3, [r3, #8]
 8012188:	4a58      	ldr	r2, [pc, #352]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 801218a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801218e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	f003 0308 	and.w	r3, r3, #8
 8012198:	2b00      	cmp	r3, #0
 801219a:	d005      	beq.n	80121a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801219c:	4b53      	ldr	r3, [pc, #332]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 801219e:	689b      	ldr	r3, [r3, #8]
 80121a0:	4a52      	ldr	r2, [pc, #328]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 80121a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80121a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80121a8:	4b50      	ldr	r3, [pc, #320]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 80121aa:	689b      	ldr	r3, [r3, #8]
 80121ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	689b      	ldr	r3, [r3, #8]
 80121b4:	494d      	ldr	r1, [pc, #308]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 80121b6:	4313      	orrs	r3, r2
 80121b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	f003 0301 	and.w	r3, r3, #1
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d044      	beq.n	8012250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	685b      	ldr	r3, [r3, #4]
 80121ca:	2b01      	cmp	r3, #1
 80121cc:	d107      	bne.n	80121de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80121ce:	4b47      	ldr	r3, [pc, #284]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d119      	bne.n	801220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80121da:	2301      	movs	r3, #1
 80121dc:	e07f      	b.n	80122de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	685b      	ldr	r3, [r3, #4]
 80121e2:	2b02      	cmp	r3, #2
 80121e4:	d003      	beq.n	80121ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80121ea:	2b03      	cmp	r3, #3
 80121ec:	d107      	bne.n	80121fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80121ee:	4b3f      	ldr	r3, [pc, #252]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d109      	bne.n	801220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80121fa:	2301      	movs	r3, #1
 80121fc:	e06f      	b.n	80122de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80121fe:	4b3b      	ldr	r3, [pc, #236]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	f003 0302 	and.w	r3, r3, #2
 8012206:	2b00      	cmp	r3, #0
 8012208:	d101      	bne.n	801220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801220a:	2301      	movs	r3, #1
 801220c:	e067      	b.n	80122de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801220e:	4b37      	ldr	r3, [pc, #220]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 8012210:	689b      	ldr	r3, [r3, #8]
 8012212:	f023 0203 	bic.w	r2, r3, #3
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	685b      	ldr	r3, [r3, #4]
 801221a:	4934      	ldr	r1, [pc, #208]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 801221c:	4313      	orrs	r3, r2
 801221e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012220:	f7fe f804 	bl	801022c <HAL_GetTick>
 8012224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012226:	e00a      	b.n	801223e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012228:	f7fe f800 	bl	801022c <HAL_GetTick>
 801222c:	4602      	mov	r2, r0
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	1ad3      	subs	r3, r2, r3
 8012232:	f241 3288 	movw	r2, #5000	; 0x1388
 8012236:	4293      	cmp	r3, r2
 8012238:	d901      	bls.n	801223e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801223a:	2303      	movs	r3, #3
 801223c:	e04f      	b.n	80122de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801223e:	4b2b      	ldr	r3, [pc, #172]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 8012240:	689b      	ldr	r3, [r3, #8]
 8012242:	f003 020c 	and.w	r2, r3, #12
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	685b      	ldr	r3, [r3, #4]
 801224a:	009b      	lsls	r3, r3, #2
 801224c:	429a      	cmp	r2, r3
 801224e:	d1eb      	bne.n	8012228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012250:	4b25      	ldr	r3, [pc, #148]	; (80122e8 <HAL_RCC_ClockConfig+0x1b8>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	f003 030f 	and.w	r3, r3, #15
 8012258:	683a      	ldr	r2, [r7, #0]
 801225a:	429a      	cmp	r2, r3
 801225c:	d20c      	bcs.n	8012278 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801225e:	4b22      	ldr	r3, [pc, #136]	; (80122e8 <HAL_RCC_ClockConfig+0x1b8>)
 8012260:	683a      	ldr	r2, [r7, #0]
 8012262:	b2d2      	uxtb	r2, r2
 8012264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012266:	4b20      	ldr	r3, [pc, #128]	; (80122e8 <HAL_RCC_ClockConfig+0x1b8>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	f003 030f 	and.w	r3, r3, #15
 801226e:	683a      	ldr	r2, [r7, #0]
 8012270:	429a      	cmp	r2, r3
 8012272:	d001      	beq.n	8012278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012274:	2301      	movs	r3, #1
 8012276:	e032      	b.n	80122de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	f003 0304 	and.w	r3, r3, #4
 8012280:	2b00      	cmp	r3, #0
 8012282:	d008      	beq.n	8012296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012284:	4b19      	ldr	r3, [pc, #100]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 8012286:	689b      	ldr	r3, [r3, #8]
 8012288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	68db      	ldr	r3, [r3, #12]
 8012290:	4916      	ldr	r1, [pc, #88]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 8012292:	4313      	orrs	r3, r2
 8012294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	f003 0308 	and.w	r3, r3, #8
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d009      	beq.n	80122b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80122a2:	4b12      	ldr	r3, [pc, #72]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 80122a4:	689b      	ldr	r3, [r3, #8]
 80122a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	691b      	ldr	r3, [r3, #16]
 80122ae:	00db      	lsls	r3, r3, #3
 80122b0:	490e      	ldr	r1, [pc, #56]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 80122b2:	4313      	orrs	r3, r2
 80122b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80122b6:	f000 f821 	bl	80122fc <HAL_RCC_GetSysClockFreq>
 80122ba:	4601      	mov	r1, r0
 80122bc:	4b0b      	ldr	r3, [pc, #44]	; (80122ec <HAL_RCC_ClockConfig+0x1bc>)
 80122be:	689b      	ldr	r3, [r3, #8]
 80122c0:	091b      	lsrs	r3, r3, #4
 80122c2:	f003 030f 	and.w	r3, r3, #15
 80122c6:	4a0a      	ldr	r2, [pc, #40]	; (80122f0 <HAL_RCC_ClockConfig+0x1c0>)
 80122c8:	5cd3      	ldrb	r3, [r2, r3]
 80122ca:	fa21 f303 	lsr.w	r3, r1, r3
 80122ce:	4a09      	ldr	r2, [pc, #36]	; (80122f4 <HAL_RCC_ClockConfig+0x1c4>)
 80122d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80122d2:	4b09      	ldr	r3, [pc, #36]	; (80122f8 <HAL_RCC_ClockConfig+0x1c8>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7fd ff64 	bl	80101a4 <HAL_InitTick>

  return HAL_OK;
 80122dc:	2300      	movs	r3, #0
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3710      	adds	r7, #16
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
 80122e6:	bf00      	nop
 80122e8:	40023c00 	.word	0x40023c00
 80122ec:	40023800 	.word	0x40023800
 80122f0:	0801a5c0 	.word	0x0801a5c0
 80122f4:	2000001c 	.word	0x2000001c
 80122f8:	20000020 	.word	0x20000020

080122fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80122fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122fe:	b085      	sub	sp, #20
 8012300:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012302:	2300      	movs	r3, #0
 8012304:	607b      	str	r3, [r7, #4]
 8012306:	2300      	movs	r3, #0
 8012308:	60fb      	str	r3, [r7, #12]
 801230a:	2300      	movs	r3, #0
 801230c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801230e:	2300      	movs	r3, #0
 8012310:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012312:	4b63      	ldr	r3, [pc, #396]	; (80124a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012314:	689b      	ldr	r3, [r3, #8]
 8012316:	f003 030c 	and.w	r3, r3, #12
 801231a:	2b04      	cmp	r3, #4
 801231c:	d007      	beq.n	801232e <HAL_RCC_GetSysClockFreq+0x32>
 801231e:	2b08      	cmp	r3, #8
 8012320:	d008      	beq.n	8012334 <HAL_RCC_GetSysClockFreq+0x38>
 8012322:	2b00      	cmp	r3, #0
 8012324:	f040 80b4 	bne.w	8012490 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012328:	4b5e      	ldr	r3, [pc, #376]	; (80124a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801232a:	60bb      	str	r3, [r7, #8]
       break;
 801232c:	e0b3      	b.n	8012496 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801232e:	4b5e      	ldr	r3, [pc, #376]	; (80124a8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8012330:	60bb      	str	r3, [r7, #8]
      break;
 8012332:	e0b0      	b.n	8012496 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012334:	4b5a      	ldr	r3, [pc, #360]	; (80124a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012336:	685b      	ldr	r3, [r3, #4]
 8012338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801233c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801233e:	4b58      	ldr	r3, [pc, #352]	; (80124a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012340:	685b      	ldr	r3, [r3, #4]
 8012342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012346:	2b00      	cmp	r3, #0
 8012348:	d04a      	beq.n	80123e0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801234a:	4b55      	ldr	r3, [pc, #340]	; (80124a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801234c:	685b      	ldr	r3, [r3, #4]
 801234e:	099b      	lsrs	r3, r3, #6
 8012350:	f04f 0400 	mov.w	r4, #0
 8012354:	f240 11ff 	movw	r1, #511	; 0x1ff
 8012358:	f04f 0200 	mov.w	r2, #0
 801235c:	ea03 0501 	and.w	r5, r3, r1
 8012360:	ea04 0602 	and.w	r6, r4, r2
 8012364:	4629      	mov	r1, r5
 8012366:	4632      	mov	r2, r6
 8012368:	f04f 0300 	mov.w	r3, #0
 801236c:	f04f 0400 	mov.w	r4, #0
 8012370:	0154      	lsls	r4, r2, #5
 8012372:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8012376:	014b      	lsls	r3, r1, #5
 8012378:	4619      	mov	r1, r3
 801237a:	4622      	mov	r2, r4
 801237c:	1b49      	subs	r1, r1, r5
 801237e:	eb62 0206 	sbc.w	r2, r2, r6
 8012382:	f04f 0300 	mov.w	r3, #0
 8012386:	f04f 0400 	mov.w	r4, #0
 801238a:	0194      	lsls	r4, r2, #6
 801238c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8012390:	018b      	lsls	r3, r1, #6
 8012392:	1a5b      	subs	r3, r3, r1
 8012394:	eb64 0402 	sbc.w	r4, r4, r2
 8012398:	f04f 0100 	mov.w	r1, #0
 801239c:	f04f 0200 	mov.w	r2, #0
 80123a0:	00e2      	lsls	r2, r4, #3
 80123a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80123a6:	00d9      	lsls	r1, r3, #3
 80123a8:	460b      	mov	r3, r1
 80123aa:	4614      	mov	r4, r2
 80123ac:	195b      	adds	r3, r3, r5
 80123ae:	eb44 0406 	adc.w	r4, r4, r6
 80123b2:	f04f 0100 	mov.w	r1, #0
 80123b6:	f04f 0200 	mov.w	r2, #0
 80123ba:	0262      	lsls	r2, r4, #9
 80123bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80123c0:	0259      	lsls	r1, r3, #9
 80123c2:	460b      	mov	r3, r1
 80123c4:	4614      	mov	r4, r2
 80123c6:	4618      	mov	r0, r3
 80123c8:	4621      	mov	r1, r4
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f04f 0400 	mov.w	r4, #0
 80123d0:	461a      	mov	r2, r3
 80123d2:	4623      	mov	r3, r4
 80123d4:	f7f6 fb90 	bl	8008af8 <__aeabi_uldivmod>
 80123d8:	4603      	mov	r3, r0
 80123da:	460c      	mov	r4, r1
 80123dc:	60fb      	str	r3, [r7, #12]
 80123de:	e049      	b.n	8012474 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80123e0:	4b2f      	ldr	r3, [pc, #188]	; (80124a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	099b      	lsrs	r3, r3, #6
 80123e6:	f04f 0400 	mov.w	r4, #0
 80123ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80123ee:	f04f 0200 	mov.w	r2, #0
 80123f2:	ea03 0501 	and.w	r5, r3, r1
 80123f6:	ea04 0602 	and.w	r6, r4, r2
 80123fa:	4629      	mov	r1, r5
 80123fc:	4632      	mov	r2, r6
 80123fe:	f04f 0300 	mov.w	r3, #0
 8012402:	f04f 0400 	mov.w	r4, #0
 8012406:	0154      	lsls	r4, r2, #5
 8012408:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801240c:	014b      	lsls	r3, r1, #5
 801240e:	4619      	mov	r1, r3
 8012410:	4622      	mov	r2, r4
 8012412:	1b49      	subs	r1, r1, r5
 8012414:	eb62 0206 	sbc.w	r2, r2, r6
 8012418:	f04f 0300 	mov.w	r3, #0
 801241c:	f04f 0400 	mov.w	r4, #0
 8012420:	0194      	lsls	r4, r2, #6
 8012422:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8012426:	018b      	lsls	r3, r1, #6
 8012428:	1a5b      	subs	r3, r3, r1
 801242a:	eb64 0402 	sbc.w	r4, r4, r2
 801242e:	f04f 0100 	mov.w	r1, #0
 8012432:	f04f 0200 	mov.w	r2, #0
 8012436:	00e2      	lsls	r2, r4, #3
 8012438:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801243c:	00d9      	lsls	r1, r3, #3
 801243e:	460b      	mov	r3, r1
 8012440:	4614      	mov	r4, r2
 8012442:	195b      	adds	r3, r3, r5
 8012444:	eb44 0406 	adc.w	r4, r4, r6
 8012448:	f04f 0100 	mov.w	r1, #0
 801244c:	f04f 0200 	mov.w	r2, #0
 8012450:	02a2      	lsls	r2, r4, #10
 8012452:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8012456:	0299      	lsls	r1, r3, #10
 8012458:	460b      	mov	r3, r1
 801245a:	4614      	mov	r4, r2
 801245c:	4618      	mov	r0, r3
 801245e:	4621      	mov	r1, r4
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f04f 0400 	mov.w	r4, #0
 8012466:	461a      	mov	r2, r3
 8012468:	4623      	mov	r3, r4
 801246a:	f7f6 fb45 	bl	8008af8 <__aeabi_uldivmod>
 801246e:	4603      	mov	r3, r0
 8012470:	460c      	mov	r4, r1
 8012472:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012474:	4b0a      	ldr	r3, [pc, #40]	; (80124a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8012476:	685b      	ldr	r3, [r3, #4]
 8012478:	0c1b      	lsrs	r3, r3, #16
 801247a:	f003 0303 	and.w	r3, r3, #3
 801247e:	3301      	adds	r3, #1
 8012480:	005b      	lsls	r3, r3, #1
 8012482:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8012484:	68fa      	ldr	r2, [r7, #12]
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	fbb2 f3f3 	udiv	r3, r2, r3
 801248c:	60bb      	str	r3, [r7, #8]
      break;
 801248e:	e002      	b.n	8012496 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012490:	4b04      	ldr	r3, [pc, #16]	; (80124a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8012492:	60bb      	str	r3, [r7, #8]
      break;
 8012494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012496:	68bb      	ldr	r3, [r7, #8]
}
 8012498:	4618      	mov	r0, r3
 801249a:	3714      	adds	r7, #20
 801249c:	46bd      	mov	sp, r7
 801249e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124a0:	40023800 	.word	0x40023800
 80124a4:	00f42400 	.word	0x00f42400
 80124a8:	007a1200 	.word	0x007a1200

080124ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80124ac:	b480      	push	{r7}
 80124ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80124b0:	4b03      	ldr	r3, [pc, #12]	; (80124c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80124b2:	681b      	ldr	r3, [r3, #0]
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	46bd      	mov	sp, r7
 80124b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124bc:	4770      	bx	lr
 80124be:	bf00      	nop
 80124c0:	2000001c 	.word	0x2000001c

080124c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80124c8:	f7ff fff0 	bl	80124ac <HAL_RCC_GetHCLKFreq>
 80124cc:	4601      	mov	r1, r0
 80124ce:	4b05      	ldr	r3, [pc, #20]	; (80124e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80124d0:	689b      	ldr	r3, [r3, #8]
 80124d2:	0a9b      	lsrs	r3, r3, #10
 80124d4:	f003 0307 	and.w	r3, r3, #7
 80124d8:	4a03      	ldr	r2, [pc, #12]	; (80124e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80124da:	5cd3      	ldrb	r3, [r2, r3]
 80124dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80124e0:	4618      	mov	r0, r3
 80124e2:	bd80      	pop	{r7, pc}
 80124e4:	40023800 	.word	0x40023800
 80124e8:	0801a5d0 	.word	0x0801a5d0

080124ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80124f0:	f7ff ffdc 	bl	80124ac <HAL_RCC_GetHCLKFreq>
 80124f4:	4601      	mov	r1, r0
 80124f6:	4b05      	ldr	r3, [pc, #20]	; (801250c <HAL_RCC_GetPCLK2Freq+0x20>)
 80124f8:	689b      	ldr	r3, [r3, #8]
 80124fa:	0b5b      	lsrs	r3, r3, #13
 80124fc:	f003 0307 	and.w	r3, r3, #7
 8012500:	4a03      	ldr	r2, [pc, #12]	; (8012510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012502:	5cd3      	ldrb	r3, [r2, r3]
 8012504:	fa21 f303 	lsr.w	r3, r1, r3
}
 8012508:	4618      	mov	r0, r3
 801250a:	bd80      	pop	{r7, pc}
 801250c:	40023800 	.word	0x40023800
 8012510:	0801a5d0 	.word	0x0801a5d0

08012514 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d101      	bne.n	8012526 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012522:	2301      	movs	r3, #1
 8012524:	e056      	b.n	80125d4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2200      	movs	r2, #0
 801252a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012532:	b2db      	uxtb	r3, r3
 8012534:	2b00      	cmp	r3, #0
 8012536:	d106      	bne.n	8012546 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2200      	movs	r2, #0
 801253c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012540:	6878      	ldr	r0, [r7, #4]
 8012542:	f7fb ff73 	bl	800e42c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2202      	movs	r2, #2
 801254a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	681a      	ldr	r2, [r3, #0]
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801255c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	685a      	ldr	r2, [r3, #4]
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	689b      	ldr	r3, [r3, #8]
 8012566:	431a      	orrs	r2, r3
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	68db      	ldr	r3, [r3, #12]
 801256c:	431a      	orrs	r2, r3
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	691b      	ldr	r3, [r3, #16]
 8012572:	431a      	orrs	r2, r3
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	695b      	ldr	r3, [r3, #20]
 8012578:	431a      	orrs	r2, r3
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	699b      	ldr	r3, [r3, #24]
 801257e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012582:	431a      	orrs	r2, r3
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	69db      	ldr	r3, [r3, #28]
 8012588:	431a      	orrs	r2, r3
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	6a1b      	ldr	r3, [r3, #32]
 801258e:	ea42 0103 	orr.w	r1, r2, r3
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	430a      	orrs	r2, r1
 801259c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	699b      	ldr	r3, [r3, #24]
 80125a2:	0c1b      	lsrs	r3, r3, #16
 80125a4:	f003 0104 	and.w	r1, r3, #4
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	430a      	orrs	r2, r1
 80125b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	69da      	ldr	r2, [r3, #28]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80125c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2200      	movs	r2, #0
 80125c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2201      	movs	r2, #1
 80125ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80125d2:	2300      	movs	r3, #0
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	3708      	adds	r7, #8
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}

080125dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b088      	sub	sp, #32
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	60f8      	str	r0, [r7, #12]
 80125e4:	60b9      	str	r1, [r7, #8]
 80125e6:	603b      	str	r3, [r7, #0]
 80125e8:	4613      	mov	r3, r2
 80125ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80125ec:	2300      	movs	r3, #0
 80125ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80125f6:	2b01      	cmp	r3, #1
 80125f8:	d101      	bne.n	80125fe <HAL_SPI_Transmit+0x22>
 80125fa:	2302      	movs	r3, #2
 80125fc:	e11e      	b.n	801283c <HAL_SPI_Transmit+0x260>
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	2201      	movs	r2, #1
 8012602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012606:	f7fd fe11 	bl	801022c <HAL_GetTick>
 801260a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801260c:	88fb      	ldrh	r3, [r7, #6]
 801260e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012616:	b2db      	uxtb	r3, r3
 8012618:	2b01      	cmp	r3, #1
 801261a:	d002      	beq.n	8012622 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801261c:	2302      	movs	r3, #2
 801261e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012620:	e103      	b.n	801282a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d002      	beq.n	801262e <HAL_SPI_Transmit+0x52>
 8012628:	88fb      	ldrh	r3, [r7, #6]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d102      	bne.n	8012634 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801262e:	2301      	movs	r3, #1
 8012630:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012632:	e0fa      	b.n	801282a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	2203      	movs	r2, #3
 8012638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	2200      	movs	r2, #0
 8012640:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	68ba      	ldr	r2, [r7, #8]
 8012646:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	88fa      	ldrh	r2, [r7, #6]
 801264c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	88fa      	ldrh	r2, [r7, #6]
 8012652:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	2200      	movs	r2, #0
 8012658:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	2200      	movs	r2, #0
 801265e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	2200      	movs	r2, #0
 8012664:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	2200      	movs	r2, #0
 801266a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	2200      	movs	r2, #0
 8012670:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	689b      	ldr	r3, [r3, #8]
 8012676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801267a:	d107      	bne.n	801268c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	681a      	ldr	r2, [r3, #0]
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801268a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012696:	2b40      	cmp	r3, #64	; 0x40
 8012698:	d007      	beq.n	80126aa <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	681a      	ldr	r2, [r3, #0]
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80126a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	68db      	ldr	r3, [r3, #12]
 80126ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80126b2:	d14b      	bne.n	801274c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	685b      	ldr	r3, [r3, #4]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d002      	beq.n	80126c2 <HAL_SPI_Transmit+0xe6>
 80126bc:	8afb      	ldrh	r3, [r7, #22]
 80126be:	2b01      	cmp	r3, #1
 80126c0:	d13e      	bne.n	8012740 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126c6:	881a      	ldrh	r2, [r3, #0]
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126d2:	1c9a      	adds	r2, r3, #2
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80126dc:	b29b      	uxth	r3, r3
 80126de:	3b01      	subs	r3, #1
 80126e0:	b29a      	uxth	r2, r3
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80126e6:	e02b      	b.n	8012740 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	689b      	ldr	r3, [r3, #8]
 80126ee:	f003 0302 	and.w	r3, r3, #2
 80126f2:	2b02      	cmp	r3, #2
 80126f4:	d112      	bne.n	801271c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126fa:	881a      	ldrh	r2, [r3, #0]
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012706:	1c9a      	adds	r2, r3, #2
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012710:	b29b      	uxth	r3, r3
 8012712:	3b01      	subs	r3, #1
 8012714:	b29a      	uxth	r2, r3
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	86da      	strh	r2, [r3, #54]	; 0x36
 801271a:	e011      	b.n	8012740 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801271c:	f7fd fd86 	bl	801022c <HAL_GetTick>
 8012720:	4602      	mov	r2, r0
 8012722:	69bb      	ldr	r3, [r7, #24]
 8012724:	1ad3      	subs	r3, r2, r3
 8012726:	683a      	ldr	r2, [r7, #0]
 8012728:	429a      	cmp	r2, r3
 801272a:	d803      	bhi.n	8012734 <HAL_SPI_Transmit+0x158>
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012732:	d102      	bne.n	801273a <HAL_SPI_Transmit+0x15e>
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d102      	bne.n	8012740 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 801273a:	2303      	movs	r3, #3
 801273c:	77fb      	strb	r3, [r7, #31]
          goto error;
 801273e:	e074      	b.n	801282a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012744:	b29b      	uxth	r3, r3
 8012746:	2b00      	cmp	r3, #0
 8012748:	d1ce      	bne.n	80126e8 <HAL_SPI_Transmit+0x10c>
 801274a:	e04c      	b.n	80127e6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	685b      	ldr	r3, [r3, #4]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d002      	beq.n	801275a <HAL_SPI_Transmit+0x17e>
 8012754:	8afb      	ldrh	r3, [r7, #22]
 8012756:	2b01      	cmp	r3, #1
 8012758:	d140      	bne.n	80127dc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	330c      	adds	r3, #12
 8012764:	7812      	ldrb	r2, [r2, #0]
 8012766:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801276c:	1c5a      	adds	r2, r3, #1
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012776:	b29b      	uxth	r3, r3
 8012778:	3b01      	subs	r3, #1
 801277a:	b29a      	uxth	r2, r3
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8012780:	e02c      	b.n	80127dc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	689b      	ldr	r3, [r3, #8]
 8012788:	f003 0302 	and.w	r3, r3, #2
 801278c:	2b02      	cmp	r3, #2
 801278e:	d113      	bne.n	80127b8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	330c      	adds	r3, #12
 801279a:	7812      	ldrb	r2, [r2, #0]
 801279c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127a2:	1c5a      	adds	r2, r3, #1
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80127ac:	b29b      	uxth	r3, r3
 80127ae:	3b01      	subs	r3, #1
 80127b0:	b29a      	uxth	r2, r3
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80127b6:	e011      	b.n	80127dc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80127b8:	f7fd fd38 	bl	801022c <HAL_GetTick>
 80127bc:	4602      	mov	r2, r0
 80127be:	69bb      	ldr	r3, [r7, #24]
 80127c0:	1ad3      	subs	r3, r2, r3
 80127c2:	683a      	ldr	r2, [r7, #0]
 80127c4:	429a      	cmp	r2, r3
 80127c6:	d803      	bhi.n	80127d0 <HAL_SPI_Transmit+0x1f4>
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127ce:	d102      	bne.n	80127d6 <HAL_SPI_Transmit+0x1fa>
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d102      	bne.n	80127dc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80127d6:	2303      	movs	r3, #3
 80127d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80127da:	e026      	b.n	801282a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80127e0:	b29b      	uxth	r3, r3
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d1cd      	bne.n	8012782 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80127e6:	69ba      	ldr	r2, [r7, #24]
 80127e8:	6839      	ldr	r1, [r7, #0]
 80127ea:	68f8      	ldr	r0, [r7, #12]
 80127ec:	f000 fba4 	bl	8012f38 <SPI_EndRxTxTransaction>
 80127f0:	4603      	mov	r3, r0
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d002      	beq.n	80127fc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	2220      	movs	r2, #32
 80127fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	689b      	ldr	r3, [r3, #8]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d10a      	bne.n	801281a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012804:	2300      	movs	r3, #0
 8012806:	613b      	str	r3, [r7, #16]
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	613b      	str	r3, [r7, #16]
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	689b      	ldr	r3, [r3, #8]
 8012816:	613b      	str	r3, [r7, #16]
 8012818:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801281e:	2b00      	cmp	r3, #0
 8012820:	d002      	beq.n	8012828 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8012822:	2301      	movs	r3, #1
 8012824:	77fb      	strb	r3, [r7, #31]
 8012826:	e000      	b.n	801282a <HAL_SPI_Transmit+0x24e>
  }

error:
 8012828:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	2201      	movs	r2, #1
 801282e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	2200      	movs	r2, #0
 8012836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801283a:	7ffb      	ldrb	r3, [r7, #31]
}
 801283c:	4618      	mov	r0, r3
 801283e:	3720      	adds	r7, #32
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}

08012844 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b088      	sub	sp, #32
 8012848:	af02      	add	r7, sp, #8
 801284a:	60f8      	str	r0, [r7, #12]
 801284c:	60b9      	str	r1, [r7, #8]
 801284e:	603b      	str	r3, [r7, #0]
 8012850:	4613      	mov	r3, r2
 8012852:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012854:	2300      	movs	r3, #0
 8012856:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	685b      	ldr	r3, [r3, #4]
 801285c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012860:	d112      	bne.n	8012888 <HAL_SPI_Receive+0x44>
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	689b      	ldr	r3, [r3, #8]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d10e      	bne.n	8012888 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	2204      	movs	r2, #4
 801286e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012872:	88fa      	ldrh	r2, [r7, #6]
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	9300      	str	r3, [sp, #0]
 8012878:	4613      	mov	r3, r2
 801287a:	68ba      	ldr	r2, [r7, #8]
 801287c:	68b9      	ldr	r1, [r7, #8]
 801287e:	68f8      	ldr	r0, [r7, #12]
 8012880:	f000 f8e9 	bl	8012a56 <HAL_SPI_TransmitReceive>
 8012884:	4603      	mov	r3, r0
 8012886:	e0e2      	b.n	8012a4e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801288e:	2b01      	cmp	r3, #1
 8012890:	d101      	bne.n	8012896 <HAL_SPI_Receive+0x52>
 8012892:	2302      	movs	r3, #2
 8012894:	e0db      	b.n	8012a4e <HAL_SPI_Receive+0x20a>
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	2201      	movs	r2, #1
 801289a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801289e:	f7fd fcc5 	bl	801022c <HAL_GetTick>
 80128a2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80128aa:	b2db      	uxtb	r3, r3
 80128ac:	2b01      	cmp	r3, #1
 80128ae:	d002      	beq.n	80128b6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80128b0:	2302      	movs	r3, #2
 80128b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80128b4:	e0c2      	b.n	8012a3c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d002      	beq.n	80128c2 <HAL_SPI_Receive+0x7e>
 80128bc:	88fb      	ldrh	r3, [r7, #6]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d102      	bne.n	80128c8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80128c2:	2301      	movs	r3, #1
 80128c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80128c6:	e0b9      	b.n	8012a3c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	2204      	movs	r2, #4
 80128cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	2200      	movs	r2, #0
 80128d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	68ba      	ldr	r2, [r7, #8]
 80128da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	88fa      	ldrh	r2, [r7, #6]
 80128e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	88fa      	ldrh	r2, [r7, #6]
 80128e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	2200      	movs	r2, #0
 80128ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	2200      	movs	r2, #0
 80128f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2200      	movs	r2, #0
 80128f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	2200      	movs	r2, #0
 80128fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	2200      	movs	r2, #0
 8012904:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	689b      	ldr	r3, [r3, #8]
 801290a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801290e:	d107      	bne.n	8012920 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	681a      	ldr	r2, [r3, #0]
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801291e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801292a:	2b40      	cmp	r3, #64	; 0x40
 801292c:	d007      	beq.n	801293e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	681a      	ldr	r2, [r3, #0]
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801293c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	68db      	ldr	r3, [r3, #12]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d162      	bne.n	8012a0c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8012946:	e02e      	b.n	80129a6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	689b      	ldr	r3, [r3, #8]
 801294e:	f003 0301 	and.w	r3, r3, #1
 8012952:	2b01      	cmp	r3, #1
 8012954:	d115      	bne.n	8012982 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	f103 020c 	add.w	r2, r3, #12
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012962:	7812      	ldrb	r2, [r2, #0]
 8012964:	b2d2      	uxtb	r2, r2
 8012966:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801296c:	1c5a      	adds	r2, r3, #1
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012976:	b29b      	uxth	r3, r3
 8012978:	3b01      	subs	r3, #1
 801297a:	b29a      	uxth	r2, r3
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012980:	e011      	b.n	80129a6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012982:	f7fd fc53 	bl	801022c <HAL_GetTick>
 8012986:	4602      	mov	r2, r0
 8012988:	693b      	ldr	r3, [r7, #16]
 801298a:	1ad3      	subs	r3, r2, r3
 801298c:	683a      	ldr	r2, [r7, #0]
 801298e:	429a      	cmp	r2, r3
 8012990:	d803      	bhi.n	801299a <HAL_SPI_Receive+0x156>
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012998:	d102      	bne.n	80129a0 <HAL_SPI_Receive+0x15c>
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d102      	bne.n	80129a6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80129a0:	2303      	movs	r3, #3
 80129a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80129a4:	e04a      	b.n	8012a3c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80129aa:	b29b      	uxth	r3, r3
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d1cb      	bne.n	8012948 <HAL_SPI_Receive+0x104>
 80129b0:	e031      	b.n	8012a16 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	689b      	ldr	r3, [r3, #8]
 80129b8:	f003 0301 	and.w	r3, r3, #1
 80129bc:	2b01      	cmp	r3, #1
 80129be:	d113      	bne.n	80129e8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	68da      	ldr	r2, [r3, #12]
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129ca:	b292      	uxth	r2, r2
 80129cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129d2:	1c9a      	adds	r2, r3, #2
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80129dc:	b29b      	uxth	r3, r3
 80129de:	3b01      	subs	r3, #1
 80129e0:	b29a      	uxth	r2, r3
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80129e6:	e011      	b.n	8012a0c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80129e8:	f7fd fc20 	bl	801022c <HAL_GetTick>
 80129ec:	4602      	mov	r2, r0
 80129ee:	693b      	ldr	r3, [r7, #16]
 80129f0:	1ad3      	subs	r3, r2, r3
 80129f2:	683a      	ldr	r2, [r7, #0]
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d803      	bhi.n	8012a00 <HAL_SPI_Receive+0x1bc>
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129fe:	d102      	bne.n	8012a06 <HAL_SPI_Receive+0x1c2>
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d102      	bne.n	8012a0c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8012a06:	2303      	movs	r3, #3
 8012a08:	75fb      	strb	r3, [r7, #23]
          goto error;
 8012a0a:	e017      	b.n	8012a3c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012a10:	b29b      	uxth	r3, r3
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d1cd      	bne.n	80129b2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012a16:	693a      	ldr	r2, [r7, #16]
 8012a18:	6839      	ldr	r1, [r7, #0]
 8012a1a:	68f8      	ldr	r0, [r7, #12]
 8012a1c:	f000 fa27 	bl	8012e6e <SPI_EndRxTransaction>
 8012a20:	4603      	mov	r3, r0
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d002      	beq.n	8012a2c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	2220      	movs	r2, #32
 8012a2a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d002      	beq.n	8012a3a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8012a34:	2301      	movs	r3, #1
 8012a36:	75fb      	strb	r3, [r7, #23]
 8012a38:	e000      	b.n	8012a3c <HAL_SPI_Receive+0x1f8>
  }

error :
 8012a3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	2201      	movs	r2, #1
 8012a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	2200      	movs	r2, #0
 8012a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a4e:	4618      	mov	r0, r3
 8012a50:	3718      	adds	r7, #24
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}

08012a56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8012a56:	b580      	push	{r7, lr}
 8012a58:	b08c      	sub	sp, #48	; 0x30
 8012a5a:	af00      	add	r7, sp, #0
 8012a5c:	60f8      	str	r0, [r7, #12]
 8012a5e:	60b9      	str	r1, [r7, #8]
 8012a60:	607a      	str	r2, [r7, #4]
 8012a62:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8012a64:	2301      	movs	r3, #1
 8012a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012a74:	2b01      	cmp	r3, #1
 8012a76:	d101      	bne.n	8012a7c <HAL_SPI_TransmitReceive+0x26>
 8012a78:	2302      	movs	r3, #2
 8012a7a:	e18a      	b.n	8012d92 <HAL_SPI_TransmitReceive+0x33c>
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	2201      	movs	r2, #1
 8012a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012a84:	f7fd fbd2 	bl	801022c <HAL_GetTick>
 8012a88:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	685b      	ldr	r3, [r3, #4]
 8012a98:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8012a9a:	887b      	ldrh	r3, [r7, #2]
 8012a9c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8012a9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012aa2:	2b01      	cmp	r3, #1
 8012aa4:	d00f      	beq.n	8012ac6 <HAL_SPI_TransmitReceive+0x70>
 8012aa6:	69fb      	ldr	r3, [r7, #28]
 8012aa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012aac:	d107      	bne.n	8012abe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	689b      	ldr	r3, [r3, #8]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d103      	bne.n	8012abe <HAL_SPI_TransmitReceive+0x68>
 8012ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012aba:	2b04      	cmp	r3, #4
 8012abc:	d003      	beq.n	8012ac6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8012abe:	2302      	movs	r3, #2
 8012ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8012ac4:	e15b      	b.n	8012d7e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d005      	beq.n	8012ad8 <HAL_SPI_TransmitReceive+0x82>
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d002      	beq.n	8012ad8 <HAL_SPI_TransmitReceive+0x82>
 8012ad2:	887b      	ldrh	r3, [r7, #2]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d103      	bne.n	8012ae0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8012ad8:	2301      	movs	r3, #1
 8012ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8012ade:	e14e      	b.n	8012d7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012ae6:	b2db      	uxtb	r3, r3
 8012ae8:	2b04      	cmp	r3, #4
 8012aea:	d003      	beq.n	8012af4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	2205      	movs	r2, #5
 8012af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	2200      	movs	r2, #0
 8012af8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	687a      	ldr	r2, [r7, #4]
 8012afe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	887a      	ldrh	r2, [r7, #2]
 8012b04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	887a      	ldrh	r2, [r7, #2]
 8012b0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	68ba      	ldr	r2, [r7, #8]
 8012b10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	887a      	ldrh	r2, [r7, #2]
 8012b16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	887a      	ldrh	r2, [r7, #2]
 8012b1c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2200      	movs	r2, #0
 8012b22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	2200      	movs	r2, #0
 8012b28:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b34:	2b40      	cmp	r3, #64	; 0x40
 8012b36:	d007      	beq.n	8012b48 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	681a      	ldr	r2, [r3, #0]
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012b46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	68db      	ldr	r3, [r3, #12]
 8012b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012b50:	d178      	bne.n	8012c44 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	685b      	ldr	r3, [r3, #4]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d002      	beq.n	8012b60 <HAL_SPI_TransmitReceive+0x10a>
 8012b5a:	8b7b      	ldrh	r3, [r7, #26]
 8012b5c:	2b01      	cmp	r3, #1
 8012b5e:	d166      	bne.n	8012c2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b64:	881a      	ldrh	r2, [r3, #0]
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b70:	1c9a      	adds	r2, r3, #2
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012b7a:	b29b      	uxth	r3, r3
 8012b7c:	3b01      	subs	r3, #1
 8012b7e:	b29a      	uxth	r2, r3
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012b84:	e053      	b.n	8012c2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	689b      	ldr	r3, [r3, #8]
 8012b8c:	f003 0302 	and.w	r3, r3, #2
 8012b90:	2b02      	cmp	r3, #2
 8012b92:	d11b      	bne.n	8012bcc <HAL_SPI_TransmitReceive+0x176>
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d016      	beq.n	8012bcc <HAL_SPI_TransmitReceive+0x176>
 8012b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba0:	2b01      	cmp	r3, #1
 8012ba2:	d113      	bne.n	8012bcc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ba8:	881a      	ldrh	r2, [r3, #0]
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bb4:	1c9a      	adds	r2, r3, #2
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012bbe:	b29b      	uxth	r3, r3
 8012bc0:	3b01      	subs	r3, #1
 8012bc2:	b29a      	uxth	r2, r3
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012bc8:	2300      	movs	r3, #0
 8012bca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	689b      	ldr	r3, [r3, #8]
 8012bd2:	f003 0301 	and.w	r3, r3, #1
 8012bd6:	2b01      	cmp	r3, #1
 8012bd8:	d119      	bne.n	8012c0e <HAL_SPI_TransmitReceive+0x1b8>
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012bde:	b29b      	uxth	r3, r3
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d014      	beq.n	8012c0e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	68da      	ldr	r2, [r3, #12]
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bee:	b292      	uxth	r2, r2
 8012bf0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bf6:	1c9a      	adds	r2, r3, #2
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012c00:	b29b      	uxth	r3, r3
 8012c02:	3b01      	subs	r3, #1
 8012c04:	b29a      	uxth	r2, r3
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8012c0e:	f7fd fb0d 	bl	801022c <HAL_GetTick>
 8012c12:	4602      	mov	r2, r0
 8012c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c16:	1ad3      	subs	r3, r2, r3
 8012c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	d807      	bhi.n	8012c2e <HAL_SPI_TransmitReceive+0x1d8>
 8012c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c24:	d003      	beq.n	8012c2e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8012c26:	2303      	movs	r3, #3
 8012c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8012c2c:	e0a7      	b.n	8012d7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012c32:	b29b      	uxth	r3, r3
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d1a6      	bne.n	8012b86 <HAL_SPI_TransmitReceive+0x130>
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012c3c:	b29b      	uxth	r3, r3
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d1a1      	bne.n	8012b86 <HAL_SPI_TransmitReceive+0x130>
 8012c42:	e07c      	b.n	8012d3e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	685b      	ldr	r3, [r3, #4]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d002      	beq.n	8012c52 <HAL_SPI_TransmitReceive+0x1fc>
 8012c4c:	8b7b      	ldrh	r3, [r7, #26]
 8012c4e:	2b01      	cmp	r3, #1
 8012c50:	d16b      	bne.n	8012d2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	330c      	adds	r3, #12
 8012c5c:	7812      	ldrb	r2, [r2, #0]
 8012c5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c64:	1c5a      	adds	r2, r3, #1
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012c6e:	b29b      	uxth	r3, r3
 8012c70:	3b01      	subs	r3, #1
 8012c72:	b29a      	uxth	r2, r3
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012c78:	e057      	b.n	8012d2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	689b      	ldr	r3, [r3, #8]
 8012c80:	f003 0302 	and.w	r3, r3, #2
 8012c84:	2b02      	cmp	r3, #2
 8012c86:	d11c      	bne.n	8012cc2 <HAL_SPI_TransmitReceive+0x26c>
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012c8c:	b29b      	uxth	r3, r3
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d017      	beq.n	8012cc2 <HAL_SPI_TransmitReceive+0x26c>
 8012c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c94:	2b01      	cmp	r3, #1
 8012c96:	d114      	bne.n	8012cc2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	330c      	adds	r3, #12
 8012ca2:	7812      	ldrb	r2, [r2, #0]
 8012ca4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012caa:	1c5a      	adds	r2, r3, #1
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012cb4:	b29b      	uxth	r3, r3
 8012cb6:	3b01      	subs	r3, #1
 8012cb8:	b29a      	uxth	r2, r3
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	689b      	ldr	r3, [r3, #8]
 8012cc8:	f003 0301 	and.w	r3, r3, #1
 8012ccc:	2b01      	cmp	r3, #1
 8012cce:	d119      	bne.n	8012d04 <HAL_SPI_TransmitReceive+0x2ae>
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012cd4:	b29b      	uxth	r3, r3
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d014      	beq.n	8012d04 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	68da      	ldr	r2, [r3, #12]
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ce4:	b2d2      	uxtb	r2, r2
 8012ce6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cec:	1c5a      	adds	r2, r3, #1
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012cf6:	b29b      	uxth	r3, r3
 8012cf8:	3b01      	subs	r3, #1
 8012cfa:	b29a      	uxth	r2, r3
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012d00:	2301      	movs	r3, #1
 8012d02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8012d04:	f7fd fa92 	bl	801022c <HAL_GetTick>
 8012d08:	4602      	mov	r2, r0
 8012d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0c:	1ad3      	subs	r3, r2, r3
 8012d0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d803      	bhi.n	8012d1c <HAL_SPI_TransmitReceive+0x2c6>
 8012d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d1a:	d102      	bne.n	8012d22 <HAL_SPI_TransmitReceive+0x2cc>
 8012d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d103      	bne.n	8012d2a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8012d22:	2303      	movs	r3, #3
 8012d24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8012d28:	e029      	b.n	8012d7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012d2e:	b29b      	uxth	r3, r3
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d1a2      	bne.n	8012c7a <HAL_SPI_TransmitReceive+0x224>
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d19d      	bne.n	8012c7a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d42:	68f8      	ldr	r0, [r7, #12]
 8012d44:	f000 f8f8 	bl	8012f38 <SPI_EndRxTxTransaction>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d006      	beq.n	8012d5c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8012d4e:	2301      	movs	r3, #1
 8012d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	2220      	movs	r2, #32
 8012d58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8012d5a:	e010      	b.n	8012d7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	689b      	ldr	r3, [r3, #8]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d10b      	bne.n	8012d7c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012d64:	2300      	movs	r3, #0
 8012d66:	617b      	str	r3, [r7, #20]
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	68db      	ldr	r3, [r3, #12]
 8012d6e:	617b      	str	r3, [r7, #20]
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	689b      	ldr	r3, [r3, #8]
 8012d76:	617b      	str	r3, [r7, #20]
 8012d78:	697b      	ldr	r3, [r7, #20]
 8012d7a:	e000      	b.n	8012d7e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8012d7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	2201      	movs	r2, #1
 8012d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	2200      	movs	r2, #0
 8012d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3730      	adds	r7, #48	; 0x30
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}

08012d9a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012d9a:	b580      	push	{r7, lr}
 8012d9c:	b084      	sub	sp, #16
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	60f8      	str	r0, [r7, #12]
 8012da2:	60b9      	str	r1, [r7, #8]
 8012da4:	603b      	str	r3, [r7, #0]
 8012da6:	4613      	mov	r3, r2
 8012da8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012daa:	e04c      	b.n	8012e46 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012db2:	d048      	beq.n	8012e46 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8012db4:	f7fd fa3a 	bl	801022c <HAL_GetTick>
 8012db8:	4602      	mov	r2, r0
 8012dba:	69bb      	ldr	r3, [r7, #24]
 8012dbc:	1ad3      	subs	r3, r2, r3
 8012dbe:	683a      	ldr	r2, [r7, #0]
 8012dc0:	429a      	cmp	r2, r3
 8012dc2:	d902      	bls.n	8012dca <SPI_WaitFlagStateUntilTimeout+0x30>
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d13d      	bne.n	8012e46 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	685a      	ldr	r2, [r3, #4]
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012dd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	685b      	ldr	r3, [r3, #4]
 8012dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012de2:	d111      	bne.n	8012e08 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	689b      	ldr	r3, [r3, #8]
 8012de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012dec:	d004      	beq.n	8012df8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	689b      	ldr	r3, [r3, #8]
 8012df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012df6:	d107      	bne.n	8012e08 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	681a      	ldr	r2, [r3, #0]
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012e06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012e10:	d10f      	bne.n	8012e32 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	681a      	ldr	r2, [r3, #0]
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012e20:	601a      	str	r2, [r3, #0]
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	681a      	ldr	r2, [r3, #0]
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012e30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	2201      	movs	r2, #1
 8012e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8012e42:	2303      	movs	r3, #3
 8012e44:	e00f      	b.n	8012e66 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	689a      	ldr	r2, [r3, #8]
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	4013      	ands	r3, r2
 8012e50:	68ba      	ldr	r2, [r7, #8]
 8012e52:	429a      	cmp	r2, r3
 8012e54:	bf0c      	ite	eq
 8012e56:	2301      	moveq	r3, #1
 8012e58:	2300      	movne	r3, #0
 8012e5a:	b2db      	uxtb	r3, r3
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	79fb      	ldrb	r3, [r7, #7]
 8012e60:	429a      	cmp	r2, r3
 8012e62:	d1a3      	bne.n	8012dac <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8012e64:	2300      	movs	r3, #0
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	3710      	adds	r7, #16
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}

08012e6e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8012e6e:	b580      	push	{r7, lr}
 8012e70:	b086      	sub	sp, #24
 8012e72:	af02      	add	r7, sp, #8
 8012e74:	60f8      	str	r0, [r7, #12]
 8012e76:	60b9      	str	r1, [r7, #8]
 8012e78:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	685b      	ldr	r3, [r3, #4]
 8012e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012e82:	d111      	bne.n	8012ea8 <SPI_EndRxTransaction+0x3a>
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	689b      	ldr	r3, [r3, #8]
 8012e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012e8c:	d004      	beq.n	8012e98 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	689b      	ldr	r3, [r3, #8]
 8012e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012e96:	d107      	bne.n	8012ea8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	681a      	ldr	r2, [r3, #0]
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012ea6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012eb0:	d12a      	bne.n	8012f08 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	689b      	ldr	r3, [r3, #8]
 8012eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012eba:	d012      	beq.n	8012ee2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	9300      	str	r3, [sp, #0]
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	2180      	movs	r1, #128	; 0x80
 8012ec6:	68f8      	ldr	r0, [r7, #12]
 8012ec8:	f7ff ff67 	bl	8012d9a <SPI_WaitFlagStateUntilTimeout>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d02d      	beq.n	8012f2e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ed6:	f043 0220 	orr.w	r2, r3, #32
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8012ede:	2303      	movs	r3, #3
 8012ee0:	e026      	b.n	8012f30 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	9300      	str	r3, [sp, #0]
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	2200      	movs	r2, #0
 8012eea:	2101      	movs	r1, #1
 8012eec:	68f8      	ldr	r0, [r7, #12]
 8012eee:	f7ff ff54 	bl	8012d9a <SPI_WaitFlagStateUntilTimeout>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d01a      	beq.n	8012f2e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012efc:	f043 0220 	orr.w	r2, r3, #32
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8012f04:	2303      	movs	r3, #3
 8012f06:	e013      	b.n	8012f30 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	9300      	str	r3, [sp, #0]
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	2200      	movs	r2, #0
 8012f10:	2101      	movs	r1, #1
 8012f12:	68f8      	ldr	r0, [r7, #12]
 8012f14:	f7ff ff41 	bl	8012d9a <SPI_WaitFlagStateUntilTimeout>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d007      	beq.n	8012f2e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f22:	f043 0220 	orr.w	r2, r3, #32
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8012f2a:	2303      	movs	r3, #3
 8012f2c:	e000      	b.n	8012f30 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8012f2e:	2300      	movs	r3, #0
}
 8012f30:	4618      	mov	r0, r3
 8012f32:	3710      	adds	r7, #16
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}

08012f38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b088      	sub	sp, #32
 8012f3c:	af02      	add	r7, sp, #8
 8012f3e:	60f8      	str	r0, [r7, #12]
 8012f40:	60b9      	str	r1, [r7, #8]
 8012f42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8012f44:	4b1b      	ldr	r3, [pc, #108]	; (8012fb4 <SPI_EndRxTxTransaction+0x7c>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	4a1b      	ldr	r2, [pc, #108]	; (8012fb8 <SPI_EndRxTxTransaction+0x80>)
 8012f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8012f4e:	0d5b      	lsrs	r3, r3, #21
 8012f50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012f54:	fb02 f303 	mul.w	r3, r2, r3
 8012f58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	685b      	ldr	r3, [r3, #4]
 8012f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012f62:	d112      	bne.n	8012f8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	9300      	str	r3, [sp, #0]
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	2180      	movs	r1, #128	; 0x80
 8012f6e:	68f8      	ldr	r0, [r7, #12]
 8012f70:	f7ff ff13 	bl	8012d9a <SPI_WaitFlagStateUntilTimeout>
 8012f74:	4603      	mov	r3, r0
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d016      	beq.n	8012fa8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f7e:	f043 0220 	orr.w	r2, r3, #32
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8012f86:	2303      	movs	r3, #3
 8012f88:	e00f      	b.n	8012faa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8012f8a:	697b      	ldr	r3, [r7, #20]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d00a      	beq.n	8012fa6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8012f90:	697b      	ldr	r3, [r7, #20]
 8012f92:	3b01      	subs	r3, #1
 8012f94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	689b      	ldr	r3, [r3, #8]
 8012f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012fa0:	2b80      	cmp	r3, #128	; 0x80
 8012fa2:	d0f2      	beq.n	8012f8a <SPI_EndRxTxTransaction+0x52>
 8012fa4:	e000      	b.n	8012fa8 <SPI_EndRxTxTransaction+0x70>
        break;
 8012fa6:	bf00      	nop
  }

  return HAL_OK;
 8012fa8:	2300      	movs	r3, #0
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3718      	adds	r7, #24
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
 8012fb2:	bf00      	nop
 8012fb4:	2000001c 	.word	0x2000001c
 8012fb8:	165e9f81 	.word	0x165e9f81

08012fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b082      	sub	sp, #8
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d101      	bne.n	8012fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012fca:	2301      	movs	r3, #1
 8012fcc:	e01d      	b.n	801300a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012fd4:	b2db      	uxtb	r3, r3
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d106      	bne.n	8012fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2200      	movs	r2, #0
 8012fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012fe2:	6878      	ldr	r0, [r7, #4]
 8012fe4:	f7fb fa6a 	bl	800e4bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	2202      	movs	r2, #2
 8012fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	681a      	ldr	r2, [r3, #0]
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	3304      	adds	r3, #4
 8012ff8:	4619      	mov	r1, r3
 8012ffa:	4610      	mov	r0, r2
 8012ffc:	f000 fe96 	bl	8013d2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	2201      	movs	r2, #1
 8013004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013008:	2300      	movs	r3, #0
}
 801300a:	4618      	mov	r0, r3
 801300c:	3708      	adds	r7, #8
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}

08013012 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013012:	b480      	push	{r7}
 8013014:	b085      	sub	sp, #20
 8013016:	af00      	add	r7, sp, #0
 8013018:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	68da      	ldr	r2, [r3, #12]
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	f042 0201 	orr.w	r2, r2, #1
 8013028:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	689b      	ldr	r3, [r3, #8]
 8013030:	f003 0307 	and.w	r3, r3, #7
 8013034:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	2b06      	cmp	r3, #6
 801303a:	d007      	beq.n	801304c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	681a      	ldr	r2, [r3, #0]
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	f042 0201 	orr.w	r2, r2, #1
 801304a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801304c:	2300      	movs	r3, #0
}
 801304e:	4618      	mov	r0, r3
 8013050:	3714      	adds	r7, #20
 8013052:	46bd      	mov	sp, r7
 8013054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013058:	4770      	bx	lr

0801305a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 801305a:	b480      	push	{r7}
 801305c:	b083      	sub	sp, #12
 801305e:	af00      	add	r7, sp, #0
 8013060:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	68da      	ldr	r2, [r3, #12]
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	f022 0201 	bic.w	r2, r2, #1
 8013070:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	6a1a      	ldr	r2, [r3, #32]
 8013078:	f241 1311 	movw	r3, #4369	; 0x1111
 801307c:	4013      	ands	r3, r2
 801307e:	2b00      	cmp	r3, #0
 8013080:	d10f      	bne.n	80130a2 <HAL_TIM_Base_Stop_IT+0x48>
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	6a1a      	ldr	r2, [r3, #32]
 8013088:	f240 4344 	movw	r3, #1092	; 0x444
 801308c:	4013      	ands	r3, r2
 801308e:	2b00      	cmp	r3, #0
 8013090:	d107      	bne.n	80130a2 <HAL_TIM_Base_Stop_IT+0x48>
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	681a      	ldr	r2, [r3, #0]
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	f022 0201 	bic.w	r2, r2, #1
 80130a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80130a2:	2300      	movs	r3, #0
}
 80130a4:	4618      	mov	r0, r3
 80130a6:	370c      	adds	r7, #12
 80130a8:	46bd      	mov	sp, r7
 80130aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ae:	4770      	bx	lr

080130b0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b082      	sub	sp, #8
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d101      	bne.n	80130c2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80130be:	2301      	movs	r3, #1
 80130c0:	e01d      	b.n	80130fe <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80130c8:	b2db      	uxtb	r3, r3
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d106      	bne.n	80130dc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2200      	movs	r2, #0
 80130d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80130d6:	6878      	ldr	r0, [r7, #4]
 80130d8:	f000 f815 	bl	8013106 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	2202      	movs	r2, #2
 80130e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	681a      	ldr	r2, [r3, #0]
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	3304      	adds	r3, #4
 80130ec:	4619      	mov	r1, r3
 80130ee:	4610      	mov	r0, r2
 80130f0:	f000 fe1c 	bl	8013d2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2201      	movs	r2, #1
 80130f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80130fc:	2300      	movs	r3, #0
}
 80130fe:	4618      	mov	r0, r3
 8013100:	3708      	adds	r7, #8
 8013102:	46bd      	mov	sp, r7
 8013104:	bd80      	pop	{r7, pc}

08013106 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8013106:	b480      	push	{r7}
 8013108:	b083      	sub	sp, #12
 801310a:	af00      	add	r7, sp, #0
 801310c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 801310e:	bf00      	nop
 8013110:	370c      	adds	r7, #12
 8013112:	46bd      	mov	sp, r7
 8013114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013118:	4770      	bx	lr
	...

0801311c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b084      	sub	sp, #16
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	2b0c      	cmp	r3, #12
 801312a:	d841      	bhi.n	80131b0 <HAL_TIM_OC_Start_IT+0x94>
 801312c:	a201      	add	r2, pc, #4	; (adr r2, 8013134 <HAL_TIM_OC_Start_IT+0x18>)
 801312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013132:	bf00      	nop
 8013134:	08013169 	.word	0x08013169
 8013138:	080131b1 	.word	0x080131b1
 801313c:	080131b1 	.word	0x080131b1
 8013140:	080131b1 	.word	0x080131b1
 8013144:	0801317b 	.word	0x0801317b
 8013148:	080131b1 	.word	0x080131b1
 801314c:	080131b1 	.word	0x080131b1
 8013150:	080131b1 	.word	0x080131b1
 8013154:	0801318d 	.word	0x0801318d
 8013158:	080131b1 	.word	0x080131b1
 801315c:	080131b1 	.word	0x080131b1
 8013160:	080131b1 	.word	0x080131b1
 8013164:	0801319f 	.word	0x0801319f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	68da      	ldr	r2, [r3, #12]
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	f042 0202 	orr.w	r2, r2, #2
 8013176:	60da      	str	r2, [r3, #12]
      break;
 8013178:	e01b      	b.n	80131b2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	68da      	ldr	r2, [r3, #12]
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	f042 0204 	orr.w	r2, r2, #4
 8013188:	60da      	str	r2, [r3, #12]
      break;
 801318a:	e012      	b.n	80131b2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	68da      	ldr	r2, [r3, #12]
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	f042 0208 	orr.w	r2, r2, #8
 801319a:	60da      	str	r2, [r3, #12]
      break;
 801319c:	e009      	b.n	80131b2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	68da      	ldr	r2, [r3, #12]
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	f042 0210 	orr.w	r2, r2, #16
 80131ac:	60da      	str	r2, [r3, #12]
      break;
 80131ae:	e000      	b.n	80131b2 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80131b0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	2201      	movs	r2, #1
 80131b8:	6839      	ldr	r1, [r7, #0]
 80131ba:	4618      	mov	r0, r3
 80131bc:	f001 f8a0 	bl	8014300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	4a15      	ldr	r2, [pc, #84]	; (801321c <HAL_TIM_OC_Start_IT+0x100>)
 80131c6:	4293      	cmp	r3, r2
 80131c8:	d004      	beq.n	80131d4 <HAL_TIM_OC_Start_IT+0xb8>
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	4a14      	ldr	r2, [pc, #80]	; (8013220 <HAL_TIM_OC_Start_IT+0x104>)
 80131d0:	4293      	cmp	r3, r2
 80131d2:	d101      	bne.n	80131d8 <HAL_TIM_OC_Start_IT+0xbc>
 80131d4:	2301      	movs	r3, #1
 80131d6:	e000      	b.n	80131da <HAL_TIM_OC_Start_IT+0xbe>
 80131d8:	2300      	movs	r3, #0
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d007      	beq.n	80131ee <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80131ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	689b      	ldr	r3, [r3, #8]
 80131f4:	f003 0307 	and.w	r3, r3, #7
 80131f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	2b06      	cmp	r3, #6
 80131fe:	d007      	beq.n	8013210 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	681a      	ldr	r2, [r3, #0]
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	f042 0201 	orr.w	r2, r2, #1
 801320e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013210:	2300      	movs	r3, #0
}
 8013212:	4618      	mov	r0, r3
 8013214:	3710      	adds	r7, #16
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}
 801321a:	bf00      	nop
 801321c:	40010000 	.word	0x40010000
 8013220:	40010400 	.word	0x40010400

08013224 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b082      	sub	sp, #8
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
 801322c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	2b0c      	cmp	r3, #12
 8013232:	d841      	bhi.n	80132b8 <HAL_TIM_OC_Stop_IT+0x94>
 8013234:	a201      	add	r2, pc, #4	; (adr r2, 801323c <HAL_TIM_OC_Stop_IT+0x18>)
 8013236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801323a:	bf00      	nop
 801323c:	08013271 	.word	0x08013271
 8013240:	080132b9 	.word	0x080132b9
 8013244:	080132b9 	.word	0x080132b9
 8013248:	080132b9 	.word	0x080132b9
 801324c:	08013283 	.word	0x08013283
 8013250:	080132b9 	.word	0x080132b9
 8013254:	080132b9 	.word	0x080132b9
 8013258:	080132b9 	.word	0x080132b9
 801325c:	08013295 	.word	0x08013295
 8013260:	080132b9 	.word	0x080132b9
 8013264:	080132b9 	.word	0x080132b9
 8013268:	080132b9 	.word	0x080132b9
 801326c:	080132a7 	.word	0x080132a7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	68da      	ldr	r2, [r3, #12]
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	f022 0202 	bic.w	r2, r2, #2
 801327e:	60da      	str	r2, [r3, #12]
      break;
 8013280:	e01b      	b.n	80132ba <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	68da      	ldr	r2, [r3, #12]
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	f022 0204 	bic.w	r2, r2, #4
 8013290:	60da      	str	r2, [r3, #12]
      break;
 8013292:	e012      	b.n	80132ba <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	68da      	ldr	r2, [r3, #12]
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	f022 0208 	bic.w	r2, r2, #8
 80132a2:	60da      	str	r2, [r3, #12]
      break;
 80132a4:	e009      	b.n	80132ba <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	68da      	ldr	r2, [r3, #12]
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	f022 0210 	bic.w	r2, r2, #16
 80132b4:	60da      	str	r2, [r3, #12]
      break;
 80132b6:	e000      	b.n	80132ba <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 80132b8:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	2200      	movs	r2, #0
 80132c0:	6839      	ldr	r1, [r7, #0]
 80132c2:	4618      	mov	r0, r3
 80132c4:	f001 f81c 	bl	8014300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	4a20      	ldr	r2, [pc, #128]	; (8013350 <HAL_TIM_OC_Stop_IT+0x12c>)
 80132ce:	4293      	cmp	r3, r2
 80132d0:	d004      	beq.n	80132dc <HAL_TIM_OC_Stop_IT+0xb8>
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	4a1f      	ldr	r2, [pc, #124]	; (8013354 <HAL_TIM_OC_Stop_IT+0x130>)
 80132d8:	4293      	cmp	r3, r2
 80132da:	d101      	bne.n	80132e0 <HAL_TIM_OC_Stop_IT+0xbc>
 80132dc:	2301      	movs	r3, #1
 80132de:	e000      	b.n	80132e2 <HAL_TIM_OC_Stop_IT+0xbe>
 80132e0:	2300      	movs	r3, #0
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d017      	beq.n	8013316 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	6a1a      	ldr	r2, [r3, #32]
 80132ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80132f0:	4013      	ands	r3, r2
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d10f      	bne.n	8013316 <HAL_TIM_OC_Stop_IT+0xf2>
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	6a1a      	ldr	r2, [r3, #32]
 80132fc:	f240 4344 	movw	r3, #1092	; 0x444
 8013300:	4013      	ands	r3, r2
 8013302:	2b00      	cmp	r3, #0
 8013304:	d107      	bne.n	8013316 <HAL_TIM_OC_Stop_IT+0xf2>
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013314:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	6a1a      	ldr	r2, [r3, #32]
 801331c:	f241 1311 	movw	r3, #4369	; 0x1111
 8013320:	4013      	ands	r3, r2
 8013322:	2b00      	cmp	r3, #0
 8013324:	d10f      	bne.n	8013346 <HAL_TIM_OC_Stop_IT+0x122>
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	6a1a      	ldr	r2, [r3, #32]
 801332c:	f240 4344 	movw	r3, #1092	; 0x444
 8013330:	4013      	ands	r3, r2
 8013332:	2b00      	cmp	r3, #0
 8013334:	d107      	bne.n	8013346 <HAL_TIM_OC_Stop_IT+0x122>
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	681a      	ldr	r2, [r3, #0]
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	f022 0201 	bic.w	r2, r2, #1
 8013344:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013346:	2300      	movs	r3, #0
}
 8013348:	4618      	mov	r0, r3
 801334a:	3708      	adds	r7, #8
 801334c:	46bd      	mov	sp, r7
 801334e:	bd80      	pop	{r7, pc}
 8013350:	40010000 	.word	0x40010000
 8013354:	40010400 	.word	0x40010400

08013358 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b082      	sub	sp, #8
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d101      	bne.n	801336a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013366:	2301      	movs	r3, #1
 8013368:	e01d      	b.n	80133a6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013370:	b2db      	uxtb	r3, r3
 8013372:	2b00      	cmp	r3, #0
 8013374:	d106      	bne.n	8013384 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2200      	movs	r2, #0
 801337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f000 f815 	bl	80133ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	2202      	movs	r2, #2
 8013388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	681a      	ldr	r2, [r3, #0]
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	3304      	adds	r3, #4
 8013394:	4619      	mov	r1, r3
 8013396:	4610      	mov	r0, r2
 8013398:	f000 fcc8 	bl	8013d2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2201      	movs	r2, #1
 80133a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80133a4:	2300      	movs	r3, #0
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	3708      	adds	r7, #8
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}

080133ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80133ae:	b480      	push	{r7}
 80133b0:	b083      	sub	sp, #12
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80133b6:	bf00      	nop
 80133b8:	370c      	adds	r7, #12
 80133ba:	46bd      	mov	sp, r7
 80133bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c0:	4770      	bx	lr
	...

080133c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b084      	sub	sp, #16
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
 80133cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	2201      	movs	r2, #1
 80133d4:	6839      	ldr	r1, [r7, #0]
 80133d6:	4618      	mov	r0, r3
 80133d8:	f000 ff92 	bl	8014300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	4a15      	ldr	r2, [pc, #84]	; (8013438 <HAL_TIM_PWM_Start+0x74>)
 80133e2:	4293      	cmp	r3, r2
 80133e4:	d004      	beq.n	80133f0 <HAL_TIM_PWM_Start+0x2c>
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	4a14      	ldr	r2, [pc, #80]	; (801343c <HAL_TIM_PWM_Start+0x78>)
 80133ec:	4293      	cmp	r3, r2
 80133ee:	d101      	bne.n	80133f4 <HAL_TIM_PWM_Start+0x30>
 80133f0:	2301      	movs	r3, #1
 80133f2:	e000      	b.n	80133f6 <HAL_TIM_PWM_Start+0x32>
 80133f4:	2300      	movs	r3, #0
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d007      	beq.n	801340a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013408:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	689b      	ldr	r3, [r3, #8]
 8013410:	f003 0307 	and.w	r3, r3, #7
 8013414:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	2b06      	cmp	r3, #6
 801341a:	d007      	beq.n	801342c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	681a      	ldr	r2, [r3, #0]
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	f042 0201 	orr.w	r2, r2, #1
 801342a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801342c:	2300      	movs	r3, #0
}
 801342e:	4618      	mov	r0, r3
 8013430:	3710      	adds	r7, #16
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
 8013436:	bf00      	nop
 8013438:	40010000 	.word	0x40010000
 801343c:	40010400 	.word	0x40010400

08013440 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b082      	sub	sp, #8
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
 8013448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	2200      	movs	r2, #0
 8013450:	6839      	ldr	r1, [r7, #0]
 8013452:	4618      	mov	r0, r3
 8013454:	f000 ff54 	bl	8014300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	4a22      	ldr	r2, [pc, #136]	; (80134e8 <HAL_TIM_PWM_Stop+0xa8>)
 801345e:	4293      	cmp	r3, r2
 8013460:	d004      	beq.n	801346c <HAL_TIM_PWM_Stop+0x2c>
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	4a21      	ldr	r2, [pc, #132]	; (80134ec <HAL_TIM_PWM_Stop+0xac>)
 8013468:	4293      	cmp	r3, r2
 801346a:	d101      	bne.n	8013470 <HAL_TIM_PWM_Stop+0x30>
 801346c:	2301      	movs	r3, #1
 801346e:	e000      	b.n	8013472 <HAL_TIM_PWM_Stop+0x32>
 8013470:	2300      	movs	r3, #0
 8013472:	2b00      	cmp	r3, #0
 8013474:	d017      	beq.n	80134a6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	6a1a      	ldr	r2, [r3, #32]
 801347c:	f241 1311 	movw	r3, #4369	; 0x1111
 8013480:	4013      	ands	r3, r2
 8013482:	2b00      	cmp	r3, #0
 8013484:	d10f      	bne.n	80134a6 <HAL_TIM_PWM_Stop+0x66>
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	6a1a      	ldr	r2, [r3, #32]
 801348c:	f240 4344 	movw	r3, #1092	; 0x444
 8013490:	4013      	ands	r3, r2
 8013492:	2b00      	cmp	r3, #0
 8013494:	d107      	bne.n	80134a6 <HAL_TIM_PWM_Stop+0x66>
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80134a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	6a1a      	ldr	r2, [r3, #32]
 80134ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80134b0:	4013      	ands	r3, r2
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d10f      	bne.n	80134d6 <HAL_TIM_PWM_Stop+0x96>
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	6a1a      	ldr	r2, [r3, #32]
 80134bc:	f240 4344 	movw	r3, #1092	; 0x444
 80134c0:	4013      	ands	r3, r2
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d107      	bne.n	80134d6 <HAL_TIM_PWM_Stop+0x96>
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	681a      	ldr	r2, [r3, #0]
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	f022 0201 	bic.w	r2, r2, #1
 80134d4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	2201      	movs	r2, #1
 80134da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80134de:	2300      	movs	r3, #0
}
 80134e0:	4618      	mov	r0, r3
 80134e2:	3708      	adds	r7, #8
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}
 80134e8:	40010000 	.word	0x40010000
 80134ec:	40010400 	.word	0x40010400

080134f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b086      	sub	sp, #24
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
 80134f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d101      	bne.n	8013504 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8013500:	2301      	movs	r3, #1
 8013502:	e083      	b.n	801360c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801350a:	b2db      	uxtb	r3, r3
 801350c:	2b00      	cmp	r3, #0
 801350e:	d106      	bne.n	801351e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2200      	movs	r2, #0
 8013514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f7fb f83f 	bl	800e59c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	2202      	movs	r2, #2
 8013522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	689b      	ldr	r3, [r3, #8]
 801352c:	687a      	ldr	r2, [r7, #4]
 801352e:	6812      	ldr	r2, [r2, #0]
 8013530:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013534:	f023 0307 	bic.w	r3, r3, #7
 8013538:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681a      	ldr	r2, [r3, #0]
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	3304      	adds	r3, #4
 8013542:	4619      	mov	r1, r3
 8013544:	4610      	mov	r0, r2
 8013546:	f000 fbf1 	bl	8013d2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	689b      	ldr	r3, [r3, #8]
 8013550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	699b      	ldr	r3, [r3, #24]
 8013558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	6a1b      	ldr	r3, [r3, #32]
 8013560:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	697a      	ldr	r2, [r7, #20]
 8013568:	4313      	orrs	r3, r2
 801356a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801356c:	693b      	ldr	r3, [r7, #16]
 801356e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013572:	f023 0303 	bic.w	r3, r3, #3
 8013576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8013578:	683b      	ldr	r3, [r7, #0]
 801357a:	689a      	ldr	r2, [r3, #8]
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	699b      	ldr	r3, [r3, #24]
 8013580:	021b      	lsls	r3, r3, #8
 8013582:	4313      	orrs	r3, r2
 8013584:	693a      	ldr	r2, [r7, #16]
 8013586:	4313      	orrs	r3, r2
 8013588:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8013590:	f023 030c 	bic.w	r3, r3, #12
 8013594:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801359c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80135a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	68da      	ldr	r2, [r3, #12]
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	69db      	ldr	r3, [r3, #28]
 80135aa:	021b      	lsls	r3, r3, #8
 80135ac:	4313      	orrs	r3, r2
 80135ae:	693a      	ldr	r2, [r7, #16]
 80135b0:	4313      	orrs	r3, r2
 80135b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	691b      	ldr	r3, [r3, #16]
 80135b8:	011a      	lsls	r2, r3, #4
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	6a1b      	ldr	r3, [r3, #32]
 80135be:	031b      	lsls	r3, r3, #12
 80135c0:	4313      	orrs	r3, r2
 80135c2:	693a      	ldr	r2, [r7, #16]
 80135c4:	4313      	orrs	r3, r2
 80135c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80135ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80135d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	685a      	ldr	r2, [r3, #4]
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	695b      	ldr	r3, [r3, #20]
 80135e0:	011b      	lsls	r3, r3, #4
 80135e2:	4313      	orrs	r3, r2
 80135e4:	68fa      	ldr	r2, [r7, #12]
 80135e6:	4313      	orrs	r3, r2
 80135e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	697a      	ldr	r2, [r7, #20]
 80135f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	693a      	ldr	r2, [r7, #16]
 80135f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	68fa      	ldr	r2, [r7, #12]
 8013600:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	2201      	movs	r2, #1
 8013606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801360a:	2300      	movs	r3, #0
}
 801360c:	4618      	mov	r0, r3
 801360e:	3718      	adds	r7, #24
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}

08013614 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b082      	sub	sp, #8
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
 801361c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d002      	beq.n	801362a <HAL_TIM_Encoder_Start+0x16>
 8013624:	2b04      	cmp	r3, #4
 8013626:	d008      	beq.n	801363a <HAL_TIM_Encoder_Start+0x26>
 8013628:	e00f      	b.n	801364a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	2201      	movs	r2, #1
 8013630:	2100      	movs	r1, #0
 8013632:	4618      	mov	r0, r3
 8013634:	f000 fe64 	bl	8014300 <TIM_CCxChannelCmd>
      break;
 8013638:	e016      	b.n	8013668 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	2201      	movs	r2, #1
 8013640:	2104      	movs	r1, #4
 8013642:	4618      	mov	r0, r3
 8013644:	f000 fe5c 	bl	8014300 <TIM_CCxChannelCmd>
      break;
 8013648:	e00e      	b.n	8013668 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	2201      	movs	r2, #1
 8013650:	2100      	movs	r1, #0
 8013652:	4618      	mov	r0, r3
 8013654:	f000 fe54 	bl	8014300 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	2201      	movs	r2, #1
 801365e:	2104      	movs	r1, #4
 8013660:	4618      	mov	r0, r3
 8013662:	f000 fe4d 	bl	8014300 <TIM_CCxChannelCmd>
      break;
 8013666:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	681a      	ldr	r2, [r3, #0]
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	f042 0201 	orr.w	r2, r2, #1
 8013676:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013678:	2300      	movs	r3, #0
}
 801367a:	4618      	mov	r0, r3
 801367c:	3708      	adds	r7, #8
 801367e:	46bd      	mov	sp, r7
 8013680:	bd80      	pop	{r7, pc}

08013682 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013682:	b580      	push	{r7, lr}
 8013684:	b082      	sub	sp, #8
 8013686:	af00      	add	r7, sp, #0
 8013688:	6078      	str	r0, [r7, #4]
 801368a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 801368c:	683b      	ldr	r3, [r7, #0]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d002      	beq.n	8013698 <HAL_TIM_Encoder_Stop+0x16>
 8013692:	2b04      	cmp	r3, #4
 8013694:	d008      	beq.n	80136a8 <HAL_TIM_Encoder_Stop+0x26>
 8013696:	e00f      	b.n	80136b8 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	2200      	movs	r2, #0
 801369e:	2100      	movs	r1, #0
 80136a0:	4618      	mov	r0, r3
 80136a2:	f000 fe2d 	bl	8014300 <TIM_CCxChannelCmd>
      break;
 80136a6:	e016      	b.n	80136d6 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	2200      	movs	r2, #0
 80136ae:	2104      	movs	r1, #4
 80136b0:	4618      	mov	r0, r3
 80136b2:	f000 fe25 	bl	8014300 <TIM_CCxChannelCmd>
      break;
 80136b6:	e00e      	b.n	80136d6 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	2200      	movs	r2, #0
 80136be:	2100      	movs	r1, #0
 80136c0:	4618      	mov	r0, r3
 80136c2:	f000 fe1d 	bl	8014300 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	2200      	movs	r2, #0
 80136cc:	2104      	movs	r1, #4
 80136ce:	4618      	mov	r0, r3
 80136d0:	f000 fe16 	bl	8014300 <TIM_CCxChannelCmd>
      break;
 80136d4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	6a1a      	ldr	r2, [r3, #32]
 80136dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80136e0:	4013      	ands	r3, r2
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d10f      	bne.n	8013706 <HAL_TIM_Encoder_Stop+0x84>
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	6a1a      	ldr	r2, [r3, #32]
 80136ec:	f240 4344 	movw	r3, #1092	; 0x444
 80136f0:	4013      	ands	r3, r2
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d107      	bne.n	8013706 <HAL_TIM_Encoder_Stop+0x84>
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	681a      	ldr	r2, [r3, #0]
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	f022 0201 	bic.w	r2, r2, #1
 8013704:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013706:	2300      	movs	r3, #0
}
 8013708:	4618      	mov	r0, r3
 801370a:	3708      	adds	r7, #8
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}

08013710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b082      	sub	sp, #8
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	691b      	ldr	r3, [r3, #16]
 801371e:	f003 0302 	and.w	r3, r3, #2
 8013722:	2b02      	cmp	r3, #2
 8013724:	d122      	bne.n	801376c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	68db      	ldr	r3, [r3, #12]
 801372c:	f003 0302 	and.w	r3, r3, #2
 8013730:	2b02      	cmp	r3, #2
 8013732:	d11b      	bne.n	801376c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	f06f 0202 	mvn.w	r2, #2
 801373c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	2201      	movs	r2, #1
 8013742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	699b      	ldr	r3, [r3, #24]
 801374a:	f003 0303 	and.w	r3, r3, #3
 801374e:	2b00      	cmp	r3, #0
 8013750:	d003      	beq.n	801375a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013752:	6878      	ldr	r0, [r7, #4]
 8013754:	f000 facb 	bl	8013cee <HAL_TIM_IC_CaptureCallback>
 8013758:	e005      	b.n	8013766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	f000 fabd 	bl	8013cda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f000 face 	bl	8013d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	2200      	movs	r2, #0
 801376a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	691b      	ldr	r3, [r3, #16]
 8013772:	f003 0304 	and.w	r3, r3, #4
 8013776:	2b04      	cmp	r3, #4
 8013778:	d122      	bne.n	80137c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	68db      	ldr	r3, [r3, #12]
 8013780:	f003 0304 	and.w	r3, r3, #4
 8013784:	2b04      	cmp	r3, #4
 8013786:	d11b      	bne.n	80137c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	f06f 0204 	mvn.w	r2, #4
 8013790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	2202      	movs	r2, #2
 8013796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	699b      	ldr	r3, [r3, #24]
 801379e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d003      	beq.n	80137ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80137a6:	6878      	ldr	r0, [r7, #4]
 80137a8:	f000 faa1 	bl	8013cee <HAL_TIM_IC_CaptureCallback>
 80137ac:	e005      	b.n	80137ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80137ae:	6878      	ldr	r0, [r7, #4]
 80137b0:	f000 fa93 	bl	8013cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f000 faa4 	bl	8013d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	2200      	movs	r2, #0
 80137be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	691b      	ldr	r3, [r3, #16]
 80137c6:	f003 0308 	and.w	r3, r3, #8
 80137ca:	2b08      	cmp	r3, #8
 80137cc:	d122      	bne.n	8013814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	68db      	ldr	r3, [r3, #12]
 80137d4:	f003 0308 	and.w	r3, r3, #8
 80137d8:	2b08      	cmp	r3, #8
 80137da:	d11b      	bne.n	8013814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	f06f 0208 	mvn.w	r2, #8
 80137e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2204      	movs	r2, #4
 80137ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	69db      	ldr	r3, [r3, #28]
 80137f2:	f003 0303 	and.w	r3, r3, #3
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d003      	beq.n	8013802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80137fa:	6878      	ldr	r0, [r7, #4]
 80137fc:	f000 fa77 	bl	8013cee <HAL_TIM_IC_CaptureCallback>
 8013800:	e005      	b.n	801380e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	f000 fa69 	bl	8013cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013808:	6878      	ldr	r0, [r7, #4]
 801380a:	f000 fa7a 	bl	8013d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2200      	movs	r2, #0
 8013812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	691b      	ldr	r3, [r3, #16]
 801381a:	f003 0310 	and.w	r3, r3, #16
 801381e:	2b10      	cmp	r3, #16
 8013820:	d122      	bne.n	8013868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	68db      	ldr	r3, [r3, #12]
 8013828:	f003 0310 	and.w	r3, r3, #16
 801382c:	2b10      	cmp	r3, #16
 801382e:	d11b      	bne.n	8013868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	f06f 0210 	mvn.w	r2, #16
 8013838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	2208      	movs	r2, #8
 801383e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	69db      	ldr	r3, [r3, #28]
 8013846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801384a:	2b00      	cmp	r3, #0
 801384c:	d003      	beq.n	8013856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	f000 fa4d 	bl	8013cee <HAL_TIM_IC_CaptureCallback>
 8013854:	e005      	b.n	8013862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f000 fa3f 	bl	8013cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f000 fa50 	bl	8013d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	2200      	movs	r2, #0
 8013866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	691b      	ldr	r3, [r3, #16]
 801386e:	f003 0301 	and.w	r3, r3, #1
 8013872:	2b01      	cmp	r3, #1
 8013874:	d10e      	bne.n	8013894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	68db      	ldr	r3, [r3, #12]
 801387c:	f003 0301 	and.w	r3, r3, #1
 8013880:	2b01      	cmp	r3, #1
 8013882:	d107      	bne.n	8013894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	f06f 0201 	mvn.w	r2, #1
 801388c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	f7f7 fcc8 	bl	800b224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	691b      	ldr	r3, [r3, #16]
 801389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801389e:	2b80      	cmp	r3, #128	; 0x80
 80138a0:	d10e      	bne.n	80138c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	68db      	ldr	r3, [r3, #12]
 80138a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80138ac:	2b80      	cmp	r3, #128	; 0x80
 80138ae:	d107      	bne.n	80138c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80138b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f000 fee8 	bl	8014690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	691b      	ldr	r3, [r3, #16]
 80138c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138ca:	2b40      	cmp	r3, #64	; 0x40
 80138cc:	d10e      	bne.n	80138ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	68db      	ldr	r3, [r3, #12]
 80138d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138d8:	2b40      	cmp	r3, #64	; 0x40
 80138da:	d107      	bne.n	80138ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80138e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f000 fa15 	bl	8013d16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	691b      	ldr	r3, [r3, #16]
 80138f2:	f003 0320 	and.w	r3, r3, #32
 80138f6:	2b20      	cmp	r3, #32
 80138f8:	d10e      	bne.n	8013918 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	68db      	ldr	r3, [r3, #12]
 8013900:	f003 0320 	and.w	r3, r3, #32
 8013904:	2b20      	cmp	r3, #32
 8013906:	d107      	bne.n	8013918 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	f06f 0220 	mvn.w	r2, #32
 8013910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013912:	6878      	ldr	r0, [r7, #4]
 8013914:	f000 feb2 	bl	801467c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013918:	bf00      	nop
 801391a:	3708      	adds	r7, #8
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}

08013920 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b084      	sub	sp, #16
 8013924:	af00      	add	r7, sp, #0
 8013926:	60f8      	str	r0, [r7, #12]
 8013928:	60b9      	str	r1, [r7, #8]
 801392a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013932:	2b01      	cmp	r3, #1
 8013934:	d101      	bne.n	801393a <HAL_TIM_OC_ConfigChannel+0x1a>
 8013936:	2302      	movs	r3, #2
 8013938:	e04e      	b.n	80139d8 <HAL_TIM_OC_ConfigChannel+0xb8>
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	2201      	movs	r2, #1
 801393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	2202      	movs	r2, #2
 8013946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	2b0c      	cmp	r3, #12
 801394e:	d839      	bhi.n	80139c4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8013950:	a201      	add	r2, pc, #4	; (adr r2, 8013958 <HAL_TIM_OC_ConfigChannel+0x38>)
 8013952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013956:	bf00      	nop
 8013958:	0801398d 	.word	0x0801398d
 801395c:	080139c5 	.word	0x080139c5
 8013960:	080139c5 	.word	0x080139c5
 8013964:	080139c5 	.word	0x080139c5
 8013968:	0801399b 	.word	0x0801399b
 801396c:	080139c5 	.word	0x080139c5
 8013970:	080139c5 	.word	0x080139c5
 8013974:	080139c5 	.word	0x080139c5
 8013978:	080139a9 	.word	0x080139a9
 801397c:	080139c5 	.word	0x080139c5
 8013980:	080139c5 	.word	0x080139c5
 8013984:	080139c5 	.word	0x080139c5
 8013988:	080139b7 	.word	0x080139b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	68b9      	ldr	r1, [r7, #8]
 8013992:	4618      	mov	r0, r3
 8013994:	f000 fa6a 	bl	8013e6c <TIM_OC1_SetConfig>
      break;
 8013998:	e015      	b.n	80139c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	68b9      	ldr	r1, [r7, #8]
 80139a0:	4618      	mov	r0, r3
 80139a2:	f000 fad3 	bl	8013f4c <TIM_OC2_SetConfig>
      break;
 80139a6:	e00e      	b.n	80139c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	68b9      	ldr	r1, [r7, #8]
 80139ae:	4618      	mov	r0, r3
 80139b0:	f000 fb42 	bl	8014038 <TIM_OC3_SetConfig>
      break;
 80139b4:	e007      	b.n	80139c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	68b9      	ldr	r1, [r7, #8]
 80139bc:	4618      	mov	r0, r3
 80139be:	f000 fbaf 	bl	8014120 <TIM_OC4_SetConfig>
      break;
 80139c2:	e000      	b.n	80139c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80139c4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	2201      	movs	r2, #1
 80139ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	2200      	movs	r2, #0
 80139d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80139d6:	2300      	movs	r3, #0
}
 80139d8:	4618      	mov	r0, r3
 80139da:	3710      	adds	r7, #16
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd80      	pop	{r7, pc}

080139e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b084      	sub	sp, #16
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	60f8      	str	r0, [r7, #12]
 80139e8:	60b9      	str	r1, [r7, #8]
 80139ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80139f2:	2b01      	cmp	r3, #1
 80139f4:	d101      	bne.n	80139fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80139f6:	2302      	movs	r3, #2
 80139f8:	e0b4      	b.n	8013b64 <HAL_TIM_PWM_ConfigChannel+0x184>
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	2201      	movs	r2, #1
 80139fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	2202      	movs	r2, #2
 8013a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	2b0c      	cmp	r3, #12
 8013a0e:	f200 809f 	bhi.w	8013b50 <HAL_TIM_PWM_ConfigChannel+0x170>
 8013a12:	a201      	add	r2, pc, #4	; (adr r2, 8013a18 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8013a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a18:	08013a4d 	.word	0x08013a4d
 8013a1c:	08013b51 	.word	0x08013b51
 8013a20:	08013b51 	.word	0x08013b51
 8013a24:	08013b51 	.word	0x08013b51
 8013a28:	08013a8d 	.word	0x08013a8d
 8013a2c:	08013b51 	.word	0x08013b51
 8013a30:	08013b51 	.word	0x08013b51
 8013a34:	08013b51 	.word	0x08013b51
 8013a38:	08013acf 	.word	0x08013acf
 8013a3c:	08013b51 	.word	0x08013b51
 8013a40:	08013b51 	.word	0x08013b51
 8013a44:	08013b51 	.word	0x08013b51
 8013a48:	08013b0f 	.word	0x08013b0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	68b9      	ldr	r1, [r7, #8]
 8013a52:	4618      	mov	r0, r3
 8013a54:	f000 fa0a 	bl	8013e6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	699a      	ldr	r2, [r3, #24]
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	f042 0208 	orr.w	r2, r2, #8
 8013a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	699a      	ldr	r2, [r3, #24]
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	f022 0204 	bic.w	r2, r2, #4
 8013a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	6999      	ldr	r1, [r3, #24]
 8013a7e:	68bb      	ldr	r3, [r7, #8]
 8013a80:	691a      	ldr	r2, [r3, #16]
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	430a      	orrs	r2, r1
 8013a88:	619a      	str	r2, [r3, #24]
      break;
 8013a8a:	e062      	b.n	8013b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	68b9      	ldr	r1, [r7, #8]
 8013a92:	4618      	mov	r0, r3
 8013a94:	f000 fa5a 	bl	8013f4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	699a      	ldr	r2, [r3, #24]
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	699a      	ldr	r2, [r3, #24]
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	6999      	ldr	r1, [r3, #24]
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	691b      	ldr	r3, [r3, #16]
 8013ac2:	021a      	lsls	r2, r3, #8
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	430a      	orrs	r2, r1
 8013aca:	619a      	str	r2, [r3, #24]
      break;
 8013acc:	e041      	b.n	8013b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	68b9      	ldr	r1, [r7, #8]
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f000 faaf 	bl	8014038 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	69da      	ldr	r2, [r3, #28]
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	f042 0208 	orr.w	r2, r2, #8
 8013ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	69da      	ldr	r2, [r3, #28]
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	f022 0204 	bic.w	r2, r2, #4
 8013af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	69d9      	ldr	r1, [r3, #28]
 8013b00:	68bb      	ldr	r3, [r7, #8]
 8013b02:	691a      	ldr	r2, [r3, #16]
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	430a      	orrs	r2, r1
 8013b0a:	61da      	str	r2, [r3, #28]
      break;
 8013b0c:	e021      	b.n	8013b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	68b9      	ldr	r1, [r7, #8]
 8013b14:	4618      	mov	r0, r3
 8013b16:	f000 fb03 	bl	8014120 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	69da      	ldr	r2, [r3, #28]
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	69da      	ldr	r2, [r3, #28]
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	69d9      	ldr	r1, [r3, #28]
 8013b40:	68bb      	ldr	r3, [r7, #8]
 8013b42:	691b      	ldr	r3, [r3, #16]
 8013b44:	021a      	lsls	r2, r3, #8
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	430a      	orrs	r2, r1
 8013b4c:	61da      	str	r2, [r3, #28]
      break;
 8013b4e:	e000      	b.n	8013b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8013b50:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	2201      	movs	r2, #1
 8013b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	2200      	movs	r2, #0
 8013b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013b62:	2300      	movs	r3, #0
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3710      	adds	r7, #16
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b084      	sub	sp, #16
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
 8013b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013b7c:	2b01      	cmp	r3, #1
 8013b7e:	d101      	bne.n	8013b84 <HAL_TIM_ConfigClockSource+0x18>
 8013b80:	2302      	movs	r3, #2
 8013b82:	e0a6      	b.n	8013cd2 <HAL_TIM_ConfigClockSource+0x166>
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2201      	movs	r2, #1
 8013b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2202      	movs	r2, #2
 8013b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	689b      	ldr	r3, [r3, #8]
 8013b9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8013ba2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013baa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	68fa      	ldr	r2, [r7, #12]
 8013bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	2b40      	cmp	r3, #64	; 0x40
 8013bba:	d067      	beq.n	8013c8c <HAL_TIM_ConfigClockSource+0x120>
 8013bbc:	2b40      	cmp	r3, #64	; 0x40
 8013bbe:	d80b      	bhi.n	8013bd8 <HAL_TIM_ConfigClockSource+0x6c>
 8013bc0:	2b10      	cmp	r3, #16
 8013bc2:	d073      	beq.n	8013cac <HAL_TIM_ConfigClockSource+0x140>
 8013bc4:	2b10      	cmp	r3, #16
 8013bc6:	d802      	bhi.n	8013bce <HAL_TIM_ConfigClockSource+0x62>
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d06f      	beq.n	8013cac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8013bcc:	e078      	b.n	8013cc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8013bce:	2b20      	cmp	r3, #32
 8013bd0:	d06c      	beq.n	8013cac <HAL_TIM_ConfigClockSource+0x140>
 8013bd2:	2b30      	cmp	r3, #48	; 0x30
 8013bd4:	d06a      	beq.n	8013cac <HAL_TIM_ConfigClockSource+0x140>
      break;
 8013bd6:	e073      	b.n	8013cc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8013bd8:	2b70      	cmp	r3, #112	; 0x70
 8013bda:	d00d      	beq.n	8013bf8 <HAL_TIM_ConfigClockSource+0x8c>
 8013bdc:	2b70      	cmp	r3, #112	; 0x70
 8013bde:	d804      	bhi.n	8013bea <HAL_TIM_ConfigClockSource+0x7e>
 8013be0:	2b50      	cmp	r3, #80	; 0x50
 8013be2:	d033      	beq.n	8013c4c <HAL_TIM_ConfigClockSource+0xe0>
 8013be4:	2b60      	cmp	r3, #96	; 0x60
 8013be6:	d041      	beq.n	8013c6c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8013be8:	e06a      	b.n	8013cc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8013bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013bee:	d066      	beq.n	8013cbe <HAL_TIM_ConfigClockSource+0x152>
 8013bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013bf4:	d017      	beq.n	8013c26 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8013bf6:	e063      	b.n	8013cc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	6818      	ldr	r0, [r3, #0]
 8013bfc:	683b      	ldr	r3, [r7, #0]
 8013bfe:	6899      	ldr	r1, [r3, #8]
 8013c00:	683b      	ldr	r3, [r7, #0]
 8013c02:	685a      	ldr	r2, [r3, #4]
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	68db      	ldr	r3, [r3, #12]
 8013c08:	f000 fb5a 	bl	80142c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	689b      	ldr	r3, [r3, #8]
 8013c12:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013c1a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	68fa      	ldr	r2, [r7, #12]
 8013c22:	609a      	str	r2, [r3, #8]
      break;
 8013c24:	e04c      	b.n	8013cc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	6818      	ldr	r0, [r3, #0]
 8013c2a:	683b      	ldr	r3, [r7, #0]
 8013c2c:	6899      	ldr	r1, [r3, #8]
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	685a      	ldr	r2, [r3, #4]
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	68db      	ldr	r3, [r3, #12]
 8013c36:	f000 fb43 	bl	80142c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	689a      	ldr	r2, [r3, #8]
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013c48:	609a      	str	r2, [r3, #8]
      break;
 8013c4a:	e039      	b.n	8013cc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6818      	ldr	r0, [r3, #0]
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	6859      	ldr	r1, [r3, #4]
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	68db      	ldr	r3, [r3, #12]
 8013c58:	461a      	mov	r2, r3
 8013c5a:	f000 fab7 	bl	80141cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	2150      	movs	r1, #80	; 0x50
 8013c64:	4618      	mov	r0, r3
 8013c66:	f000 fb10 	bl	801428a <TIM_ITRx_SetConfig>
      break;
 8013c6a:	e029      	b.n	8013cc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	6818      	ldr	r0, [r3, #0]
 8013c70:	683b      	ldr	r3, [r7, #0]
 8013c72:	6859      	ldr	r1, [r3, #4]
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	68db      	ldr	r3, [r3, #12]
 8013c78:	461a      	mov	r2, r3
 8013c7a:	f000 fad6 	bl	801422a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	2160      	movs	r1, #96	; 0x60
 8013c84:	4618      	mov	r0, r3
 8013c86:	f000 fb00 	bl	801428a <TIM_ITRx_SetConfig>
      break;
 8013c8a:	e019      	b.n	8013cc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	6818      	ldr	r0, [r3, #0]
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	6859      	ldr	r1, [r3, #4]
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	68db      	ldr	r3, [r3, #12]
 8013c98:	461a      	mov	r2, r3
 8013c9a:	f000 fa97 	bl	80141cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	2140      	movs	r1, #64	; 0x40
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f000 faf0 	bl	801428a <TIM_ITRx_SetConfig>
      break;
 8013caa:	e009      	b.n	8013cc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	681a      	ldr	r2, [r3, #0]
 8013cb0:	683b      	ldr	r3, [r7, #0]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	4619      	mov	r1, r3
 8013cb6:	4610      	mov	r0, r2
 8013cb8:	f000 fae7 	bl	801428a <TIM_ITRx_SetConfig>
      break;
 8013cbc:	e000      	b.n	8013cc0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8013cbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	2201      	movs	r2, #1
 8013cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2200      	movs	r2, #0
 8013ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013cd0:	2300      	movs	r3, #0
}
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	3710      	adds	r7, #16
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}

08013cda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013cda:	b480      	push	{r7}
 8013cdc:	b083      	sub	sp, #12
 8013cde:	af00      	add	r7, sp, #0
 8013ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013ce2:	bf00      	nop
 8013ce4:	370c      	adds	r7, #12
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cec:	4770      	bx	lr

08013cee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013cee:	b480      	push	{r7}
 8013cf0:	b083      	sub	sp, #12
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013cf6:	bf00      	nop
 8013cf8:	370c      	adds	r7, #12
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d00:	4770      	bx	lr

08013d02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013d02:	b480      	push	{r7}
 8013d04:	b083      	sub	sp, #12
 8013d06:	af00      	add	r7, sp, #0
 8013d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013d0a:	bf00      	nop
 8013d0c:	370c      	adds	r7, #12
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d14:	4770      	bx	lr

08013d16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013d16:	b480      	push	{r7}
 8013d18:	b083      	sub	sp, #12
 8013d1a:	af00      	add	r7, sp, #0
 8013d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013d1e:	bf00      	nop
 8013d20:	370c      	adds	r7, #12
 8013d22:	46bd      	mov	sp, r7
 8013d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d28:	4770      	bx	lr
	...

08013d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013d2c:	b480      	push	{r7}
 8013d2e:	b085      	sub	sp, #20
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
 8013d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	4a40      	ldr	r2, [pc, #256]	; (8013e40 <TIM_Base_SetConfig+0x114>)
 8013d40:	4293      	cmp	r3, r2
 8013d42:	d013      	beq.n	8013d6c <TIM_Base_SetConfig+0x40>
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d4a:	d00f      	beq.n	8013d6c <TIM_Base_SetConfig+0x40>
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	4a3d      	ldr	r2, [pc, #244]	; (8013e44 <TIM_Base_SetConfig+0x118>)
 8013d50:	4293      	cmp	r3, r2
 8013d52:	d00b      	beq.n	8013d6c <TIM_Base_SetConfig+0x40>
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	4a3c      	ldr	r2, [pc, #240]	; (8013e48 <TIM_Base_SetConfig+0x11c>)
 8013d58:	4293      	cmp	r3, r2
 8013d5a:	d007      	beq.n	8013d6c <TIM_Base_SetConfig+0x40>
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	4a3b      	ldr	r2, [pc, #236]	; (8013e4c <TIM_Base_SetConfig+0x120>)
 8013d60:	4293      	cmp	r3, r2
 8013d62:	d003      	beq.n	8013d6c <TIM_Base_SetConfig+0x40>
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	4a3a      	ldr	r2, [pc, #232]	; (8013e50 <TIM_Base_SetConfig+0x124>)
 8013d68:	4293      	cmp	r3, r2
 8013d6a:	d108      	bne.n	8013d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	685b      	ldr	r3, [r3, #4]
 8013d78:	68fa      	ldr	r2, [r7, #12]
 8013d7a:	4313      	orrs	r3, r2
 8013d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	4a2f      	ldr	r2, [pc, #188]	; (8013e40 <TIM_Base_SetConfig+0x114>)
 8013d82:	4293      	cmp	r3, r2
 8013d84:	d02b      	beq.n	8013dde <TIM_Base_SetConfig+0xb2>
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d8c:	d027      	beq.n	8013dde <TIM_Base_SetConfig+0xb2>
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	4a2c      	ldr	r2, [pc, #176]	; (8013e44 <TIM_Base_SetConfig+0x118>)
 8013d92:	4293      	cmp	r3, r2
 8013d94:	d023      	beq.n	8013dde <TIM_Base_SetConfig+0xb2>
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	4a2b      	ldr	r2, [pc, #172]	; (8013e48 <TIM_Base_SetConfig+0x11c>)
 8013d9a:	4293      	cmp	r3, r2
 8013d9c:	d01f      	beq.n	8013dde <TIM_Base_SetConfig+0xb2>
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	4a2a      	ldr	r2, [pc, #168]	; (8013e4c <TIM_Base_SetConfig+0x120>)
 8013da2:	4293      	cmp	r3, r2
 8013da4:	d01b      	beq.n	8013dde <TIM_Base_SetConfig+0xb2>
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	4a29      	ldr	r2, [pc, #164]	; (8013e50 <TIM_Base_SetConfig+0x124>)
 8013daa:	4293      	cmp	r3, r2
 8013dac:	d017      	beq.n	8013dde <TIM_Base_SetConfig+0xb2>
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	4a28      	ldr	r2, [pc, #160]	; (8013e54 <TIM_Base_SetConfig+0x128>)
 8013db2:	4293      	cmp	r3, r2
 8013db4:	d013      	beq.n	8013dde <TIM_Base_SetConfig+0xb2>
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	4a27      	ldr	r2, [pc, #156]	; (8013e58 <TIM_Base_SetConfig+0x12c>)
 8013dba:	4293      	cmp	r3, r2
 8013dbc:	d00f      	beq.n	8013dde <TIM_Base_SetConfig+0xb2>
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	4a26      	ldr	r2, [pc, #152]	; (8013e5c <TIM_Base_SetConfig+0x130>)
 8013dc2:	4293      	cmp	r3, r2
 8013dc4:	d00b      	beq.n	8013dde <TIM_Base_SetConfig+0xb2>
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	4a25      	ldr	r2, [pc, #148]	; (8013e60 <TIM_Base_SetConfig+0x134>)
 8013dca:	4293      	cmp	r3, r2
 8013dcc:	d007      	beq.n	8013dde <TIM_Base_SetConfig+0xb2>
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	4a24      	ldr	r2, [pc, #144]	; (8013e64 <TIM_Base_SetConfig+0x138>)
 8013dd2:	4293      	cmp	r3, r2
 8013dd4:	d003      	beq.n	8013dde <TIM_Base_SetConfig+0xb2>
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	4a23      	ldr	r2, [pc, #140]	; (8013e68 <TIM_Base_SetConfig+0x13c>)
 8013dda:	4293      	cmp	r3, r2
 8013ddc:	d108      	bne.n	8013df0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013de6:	683b      	ldr	r3, [r7, #0]
 8013de8:	68db      	ldr	r3, [r3, #12]
 8013dea:	68fa      	ldr	r2, [r7, #12]
 8013dec:	4313      	orrs	r3, r2
 8013dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013df6:	683b      	ldr	r3, [r7, #0]
 8013df8:	695b      	ldr	r3, [r3, #20]
 8013dfa:	4313      	orrs	r3, r2
 8013dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	68fa      	ldr	r2, [r7, #12]
 8013e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	689a      	ldr	r2, [r3, #8]
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	681a      	ldr	r2, [r3, #0]
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	4a0a      	ldr	r2, [pc, #40]	; (8013e40 <TIM_Base_SetConfig+0x114>)
 8013e18:	4293      	cmp	r3, r2
 8013e1a:	d003      	beq.n	8013e24 <TIM_Base_SetConfig+0xf8>
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	4a0c      	ldr	r2, [pc, #48]	; (8013e50 <TIM_Base_SetConfig+0x124>)
 8013e20:	4293      	cmp	r3, r2
 8013e22:	d103      	bne.n	8013e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013e24:	683b      	ldr	r3, [r7, #0]
 8013e26:	691a      	ldr	r2, [r3, #16]
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2201      	movs	r2, #1
 8013e30:	615a      	str	r2, [r3, #20]
}
 8013e32:	bf00      	nop
 8013e34:	3714      	adds	r7, #20
 8013e36:	46bd      	mov	sp, r7
 8013e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3c:	4770      	bx	lr
 8013e3e:	bf00      	nop
 8013e40:	40010000 	.word	0x40010000
 8013e44:	40000400 	.word	0x40000400
 8013e48:	40000800 	.word	0x40000800
 8013e4c:	40000c00 	.word	0x40000c00
 8013e50:	40010400 	.word	0x40010400
 8013e54:	40014000 	.word	0x40014000
 8013e58:	40014400 	.word	0x40014400
 8013e5c:	40014800 	.word	0x40014800
 8013e60:	40001800 	.word	0x40001800
 8013e64:	40001c00 	.word	0x40001c00
 8013e68:	40002000 	.word	0x40002000

08013e6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013e6c:	b480      	push	{r7}
 8013e6e:	b087      	sub	sp, #28
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
 8013e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	6a1b      	ldr	r3, [r3, #32]
 8013e7a:	f023 0201 	bic.w	r2, r3, #1
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6a1b      	ldr	r3, [r3, #32]
 8013e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	685b      	ldr	r3, [r3, #4]
 8013e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	699b      	ldr	r3, [r3, #24]
 8013e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	f023 0303 	bic.w	r3, r3, #3
 8013ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013ea4:	683b      	ldr	r3, [r7, #0]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	68fa      	ldr	r2, [r7, #12]
 8013eaa:	4313      	orrs	r3, r2
 8013eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013eae:	697b      	ldr	r3, [r7, #20]
 8013eb0:	f023 0302 	bic.w	r3, r3, #2
 8013eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	689b      	ldr	r3, [r3, #8]
 8013eba:	697a      	ldr	r2, [r7, #20]
 8013ebc:	4313      	orrs	r3, r2
 8013ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	4a20      	ldr	r2, [pc, #128]	; (8013f44 <TIM_OC1_SetConfig+0xd8>)
 8013ec4:	4293      	cmp	r3, r2
 8013ec6:	d003      	beq.n	8013ed0 <TIM_OC1_SetConfig+0x64>
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	4a1f      	ldr	r2, [pc, #124]	; (8013f48 <TIM_OC1_SetConfig+0xdc>)
 8013ecc:	4293      	cmp	r3, r2
 8013ece:	d10c      	bne.n	8013eea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013ed0:	697b      	ldr	r3, [r7, #20]
 8013ed2:	f023 0308 	bic.w	r3, r3, #8
 8013ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	68db      	ldr	r3, [r3, #12]
 8013edc:	697a      	ldr	r2, [r7, #20]
 8013ede:	4313      	orrs	r3, r2
 8013ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013ee2:	697b      	ldr	r3, [r7, #20]
 8013ee4:	f023 0304 	bic.w	r3, r3, #4
 8013ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	4a15      	ldr	r2, [pc, #84]	; (8013f44 <TIM_OC1_SetConfig+0xd8>)
 8013eee:	4293      	cmp	r3, r2
 8013ef0:	d003      	beq.n	8013efa <TIM_OC1_SetConfig+0x8e>
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	4a14      	ldr	r2, [pc, #80]	; (8013f48 <TIM_OC1_SetConfig+0xdc>)
 8013ef6:	4293      	cmp	r3, r2
 8013ef8:	d111      	bne.n	8013f1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013efa:	693b      	ldr	r3, [r7, #16]
 8013efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013f02:	693b      	ldr	r3, [r7, #16]
 8013f04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	695b      	ldr	r3, [r3, #20]
 8013f0e:	693a      	ldr	r2, [r7, #16]
 8013f10:	4313      	orrs	r3, r2
 8013f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013f14:	683b      	ldr	r3, [r7, #0]
 8013f16:	699b      	ldr	r3, [r3, #24]
 8013f18:	693a      	ldr	r2, [r7, #16]
 8013f1a:	4313      	orrs	r3, r2
 8013f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	693a      	ldr	r2, [r7, #16]
 8013f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	68fa      	ldr	r2, [r7, #12]
 8013f28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	685a      	ldr	r2, [r3, #4]
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	697a      	ldr	r2, [r7, #20]
 8013f36:	621a      	str	r2, [r3, #32]
}
 8013f38:	bf00      	nop
 8013f3a:	371c      	adds	r7, #28
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f42:	4770      	bx	lr
 8013f44:	40010000 	.word	0x40010000
 8013f48:	40010400 	.word	0x40010400

08013f4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013f4c:	b480      	push	{r7}
 8013f4e:	b087      	sub	sp, #28
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
 8013f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	6a1b      	ldr	r3, [r3, #32]
 8013f5a:	f023 0210 	bic.w	r2, r3, #16
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6a1b      	ldr	r3, [r3, #32]
 8013f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	685b      	ldr	r3, [r3, #4]
 8013f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	699b      	ldr	r3, [r3, #24]
 8013f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	021b      	lsls	r3, r3, #8
 8013f8a:	68fa      	ldr	r2, [r7, #12]
 8013f8c:	4313      	orrs	r3, r2
 8013f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013f90:	697b      	ldr	r3, [r7, #20]
 8013f92:	f023 0320 	bic.w	r3, r3, #32
 8013f96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	689b      	ldr	r3, [r3, #8]
 8013f9c:	011b      	lsls	r3, r3, #4
 8013f9e:	697a      	ldr	r2, [r7, #20]
 8013fa0:	4313      	orrs	r3, r2
 8013fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	4a22      	ldr	r2, [pc, #136]	; (8014030 <TIM_OC2_SetConfig+0xe4>)
 8013fa8:	4293      	cmp	r3, r2
 8013faa:	d003      	beq.n	8013fb4 <TIM_OC2_SetConfig+0x68>
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	4a21      	ldr	r2, [pc, #132]	; (8014034 <TIM_OC2_SetConfig+0xe8>)
 8013fb0:	4293      	cmp	r3, r2
 8013fb2:	d10d      	bne.n	8013fd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	68db      	ldr	r3, [r3, #12]
 8013fc0:	011b      	lsls	r3, r3, #4
 8013fc2:	697a      	ldr	r2, [r7, #20]
 8013fc4:	4313      	orrs	r3, r2
 8013fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013fc8:	697b      	ldr	r3, [r7, #20]
 8013fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013fce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	4a17      	ldr	r2, [pc, #92]	; (8014030 <TIM_OC2_SetConfig+0xe4>)
 8013fd4:	4293      	cmp	r3, r2
 8013fd6:	d003      	beq.n	8013fe0 <TIM_OC2_SetConfig+0x94>
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	4a16      	ldr	r2, [pc, #88]	; (8014034 <TIM_OC2_SetConfig+0xe8>)
 8013fdc:	4293      	cmp	r3, r2
 8013fde:	d113      	bne.n	8014008 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013fe0:	693b      	ldr	r3, [r7, #16]
 8013fe2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013fe6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013fe8:	693b      	ldr	r3, [r7, #16]
 8013fea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013fee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	695b      	ldr	r3, [r3, #20]
 8013ff4:	009b      	lsls	r3, r3, #2
 8013ff6:	693a      	ldr	r2, [r7, #16]
 8013ff8:	4313      	orrs	r3, r2
 8013ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013ffc:	683b      	ldr	r3, [r7, #0]
 8013ffe:	699b      	ldr	r3, [r3, #24]
 8014000:	009b      	lsls	r3, r3, #2
 8014002:	693a      	ldr	r2, [r7, #16]
 8014004:	4313      	orrs	r3, r2
 8014006:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	693a      	ldr	r2, [r7, #16]
 801400c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	68fa      	ldr	r2, [r7, #12]
 8014012:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014014:	683b      	ldr	r3, [r7, #0]
 8014016:	685a      	ldr	r2, [r3, #4]
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	697a      	ldr	r2, [r7, #20]
 8014020:	621a      	str	r2, [r3, #32]
}
 8014022:	bf00      	nop
 8014024:	371c      	adds	r7, #28
 8014026:	46bd      	mov	sp, r7
 8014028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402c:	4770      	bx	lr
 801402e:	bf00      	nop
 8014030:	40010000 	.word	0x40010000
 8014034:	40010400 	.word	0x40010400

08014038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014038:	b480      	push	{r7}
 801403a:	b087      	sub	sp, #28
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
 8014040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	6a1b      	ldr	r3, [r3, #32]
 8014046:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	6a1b      	ldr	r3, [r3, #32]
 8014052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	685b      	ldr	r3, [r3, #4]
 8014058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	69db      	ldr	r3, [r3, #28]
 801405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	f023 0303 	bic.w	r3, r3, #3
 801406e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	68fa      	ldr	r2, [r7, #12]
 8014076:	4313      	orrs	r3, r2
 8014078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801407a:	697b      	ldr	r3, [r7, #20]
 801407c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	689b      	ldr	r3, [r3, #8]
 8014086:	021b      	lsls	r3, r3, #8
 8014088:	697a      	ldr	r2, [r7, #20]
 801408a:	4313      	orrs	r3, r2
 801408c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	4a21      	ldr	r2, [pc, #132]	; (8014118 <TIM_OC3_SetConfig+0xe0>)
 8014092:	4293      	cmp	r3, r2
 8014094:	d003      	beq.n	801409e <TIM_OC3_SetConfig+0x66>
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	4a20      	ldr	r2, [pc, #128]	; (801411c <TIM_OC3_SetConfig+0xe4>)
 801409a:	4293      	cmp	r3, r2
 801409c:	d10d      	bne.n	80140ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801409e:	697b      	ldr	r3, [r7, #20]
 80140a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80140a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	68db      	ldr	r3, [r3, #12]
 80140aa:	021b      	lsls	r3, r3, #8
 80140ac:	697a      	ldr	r2, [r7, #20]
 80140ae:	4313      	orrs	r3, r2
 80140b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80140b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	4a16      	ldr	r2, [pc, #88]	; (8014118 <TIM_OC3_SetConfig+0xe0>)
 80140be:	4293      	cmp	r3, r2
 80140c0:	d003      	beq.n	80140ca <TIM_OC3_SetConfig+0x92>
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	4a15      	ldr	r2, [pc, #84]	; (801411c <TIM_OC3_SetConfig+0xe4>)
 80140c6:	4293      	cmp	r3, r2
 80140c8:	d113      	bne.n	80140f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80140ca:	693b      	ldr	r3, [r7, #16]
 80140cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80140d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80140d2:	693b      	ldr	r3, [r7, #16]
 80140d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80140d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	695b      	ldr	r3, [r3, #20]
 80140de:	011b      	lsls	r3, r3, #4
 80140e0:	693a      	ldr	r2, [r7, #16]
 80140e2:	4313      	orrs	r3, r2
 80140e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	699b      	ldr	r3, [r3, #24]
 80140ea:	011b      	lsls	r3, r3, #4
 80140ec:	693a      	ldr	r2, [r7, #16]
 80140ee:	4313      	orrs	r3, r2
 80140f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	693a      	ldr	r2, [r7, #16]
 80140f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	68fa      	ldr	r2, [r7, #12]
 80140fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	685a      	ldr	r2, [r3, #4]
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	697a      	ldr	r2, [r7, #20]
 801410a:	621a      	str	r2, [r3, #32]
}
 801410c:	bf00      	nop
 801410e:	371c      	adds	r7, #28
 8014110:	46bd      	mov	sp, r7
 8014112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014116:	4770      	bx	lr
 8014118:	40010000 	.word	0x40010000
 801411c:	40010400 	.word	0x40010400

08014120 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014120:	b480      	push	{r7}
 8014122:	b087      	sub	sp, #28
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
 8014128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	6a1b      	ldr	r3, [r3, #32]
 801412e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	6a1b      	ldr	r3, [r3, #32]
 801413a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	685b      	ldr	r3, [r3, #4]
 8014140:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	69db      	ldr	r3, [r3, #28]
 8014146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801414e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014158:	683b      	ldr	r3, [r7, #0]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	021b      	lsls	r3, r3, #8
 801415e:	68fa      	ldr	r2, [r7, #12]
 8014160:	4313      	orrs	r3, r2
 8014162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014164:	693b      	ldr	r3, [r7, #16]
 8014166:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801416a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801416c:	683b      	ldr	r3, [r7, #0]
 801416e:	689b      	ldr	r3, [r3, #8]
 8014170:	031b      	lsls	r3, r3, #12
 8014172:	693a      	ldr	r2, [r7, #16]
 8014174:	4313      	orrs	r3, r2
 8014176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	4a12      	ldr	r2, [pc, #72]	; (80141c4 <TIM_OC4_SetConfig+0xa4>)
 801417c:	4293      	cmp	r3, r2
 801417e:	d003      	beq.n	8014188 <TIM_OC4_SetConfig+0x68>
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	4a11      	ldr	r2, [pc, #68]	; (80141c8 <TIM_OC4_SetConfig+0xa8>)
 8014184:	4293      	cmp	r3, r2
 8014186:	d109      	bne.n	801419c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014188:	697b      	ldr	r3, [r7, #20]
 801418a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801418e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	695b      	ldr	r3, [r3, #20]
 8014194:	019b      	lsls	r3, r3, #6
 8014196:	697a      	ldr	r2, [r7, #20]
 8014198:	4313      	orrs	r3, r2
 801419a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	697a      	ldr	r2, [r7, #20]
 80141a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	68fa      	ldr	r2, [r7, #12]
 80141a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80141a8:	683b      	ldr	r3, [r7, #0]
 80141aa:	685a      	ldr	r2, [r3, #4]
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	693a      	ldr	r2, [r7, #16]
 80141b4:	621a      	str	r2, [r3, #32]
}
 80141b6:	bf00      	nop
 80141b8:	371c      	adds	r7, #28
 80141ba:	46bd      	mov	sp, r7
 80141bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c0:	4770      	bx	lr
 80141c2:	bf00      	nop
 80141c4:	40010000 	.word	0x40010000
 80141c8:	40010400 	.word	0x40010400

080141cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80141cc:	b480      	push	{r7}
 80141ce:	b087      	sub	sp, #28
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	60f8      	str	r0, [r7, #12]
 80141d4:	60b9      	str	r1, [r7, #8]
 80141d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	6a1b      	ldr	r3, [r3, #32]
 80141dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	6a1b      	ldr	r3, [r3, #32]
 80141e2:	f023 0201 	bic.w	r2, r3, #1
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	699b      	ldr	r3, [r3, #24]
 80141ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80141f0:	693b      	ldr	r3, [r7, #16]
 80141f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80141f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	011b      	lsls	r3, r3, #4
 80141fc:	693a      	ldr	r2, [r7, #16]
 80141fe:	4313      	orrs	r3, r2
 8014200:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014202:	697b      	ldr	r3, [r7, #20]
 8014204:	f023 030a 	bic.w	r3, r3, #10
 8014208:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801420a:	697a      	ldr	r2, [r7, #20]
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	4313      	orrs	r3, r2
 8014210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	693a      	ldr	r2, [r7, #16]
 8014216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	697a      	ldr	r2, [r7, #20]
 801421c:	621a      	str	r2, [r3, #32]
}
 801421e:	bf00      	nop
 8014220:	371c      	adds	r7, #28
 8014222:	46bd      	mov	sp, r7
 8014224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014228:	4770      	bx	lr

0801422a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801422a:	b480      	push	{r7}
 801422c:	b087      	sub	sp, #28
 801422e:	af00      	add	r7, sp, #0
 8014230:	60f8      	str	r0, [r7, #12]
 8014232:	60b9      	str	r1, [r7, #8]
 8014234:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	6a1b      	ldr	r3, [r3, #32]
 801423a:	f023 0210 	bic.w	r2, r3, #16
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	699b      	ldr	r3, [r3, #24]
 8014246:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	6a1b      	ldr	r3, [r3, #32]
 801424c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801424e:	697b      	ldr	r3, [r7, #20]
 8014250:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014254:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	031b      	lsls	r3, r3, #12
 801425a:	697a      	ldr	r2, [r7, #20]
 801425c:	4313      	orrs	r3, r2
 801425e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014260:	693b      	ldr	r3, [r7, #16]
 8014262:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014266:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	011b      	lsls	r3, r3, #4
 801426c:	693a      	ldr	r2, [r7, #16]
 801426e:	4313      	orrs	r3, r2
 8014270:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	697a      	ldr	r2, [r7, #20]
 8014276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	693a      	ldr	r2, [r7, #16]
 801427c:	621a      	str	r2, [r3, #32]
}
 801427e:	bf00      	nop
 8014280:	371c      	adds	r7, #28
 8014282:	46bd      	mov	sp, r7
 8014284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014288:	4770      	bx	lr

0801428a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801428a:	b480      	push	{r7}
 801428c:	b085      	sub	sp, #20
 801428e:	af00      	add	r7, sp, #0
 8014290:	6078      	str	r0, [r7, #4]
 8014292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	689b      	ldr	r3, [r3, #8]
 8014298:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80142a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80142a2:	683a      	ldr	r2, [r7, #0]
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	4313      	orrs	r3, r2
 80142a8:	f043 0307 	orr.w	r3, r3, #7
 80142ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	68fa      	ldr	r2, [r7, #12]
 80142b2:	609a      	str	r2, [r3, #8]
}
 80142b4:	bf00      	nop
 80142b6:	3714      	adds	r7, #20
 80142b8:	46bd      	mov	sp, r7
 80142ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142be:	4770      	bx	lr

080142c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80142c0:	b480      	push	{r7}
 80142c2:	b087      	sub	sp, #28
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	60f8      	str	r0, [r7, #12]
 80142c8:	60b9      	str	r1, [r7, #8]
 80142ca:	607a      	str	r2, [r7, #4]
 80142cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	689b      	ldr	r3, [r3, #8]
 80142d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80142da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	021a      	lsls	r2, r3, #8
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	431a      	orrs	r2, r3
 80142e4:	68bb      	ldr	r3, [r7, #8]
 80142e6:	4313      	orrs	r3, r2
 80142e8:	697a      	ldr	r2, [r7, #20]
 80142ea:	4313      	orrs	r3, r2
 80142ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	697a      	ldr	r2, [r7, #20]
 80142f2:	609a      	str	r2, [r3, #8]
}
 80142f4:	bf00      	nop
 80142f6:	371c      	adds	r7, #28
 80142f8:	46bd      	mov	sp, r7
 80142fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fe:	4770      	bx	lr

08014300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014300:	b480      	push	{r7}
 8014302:	b087      	sub	sp, #28
 8014304:	af00      	add	r7, sp, #0
 8014306:	60f8      	str	r0, [r7, #12]
 8014308:	60b9      	str	r1, [r7, #8]
 801430a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	f003 031f 	and.w	r3, r3, #31
 8014312:	2201      	movs	r2, #1
 8014314:	fa02 f303 	lsl.w	r3, r2, r3
 8014318:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	6a1a      	ldr	r2, [r3, #32]
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	43db      	mvns	r3, r3
 8014322:	401a      	ands	r2, r3
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	6a1a      	ldr	r2, [r3, #32]
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	f003 031f 	and.w	r3, r3, #31
 8014332:	6879      	ldr	r1, [r7, #4]
 8014334:	fa01 f303 	lsl.w	r3, r1, r3
 8014338:	431a      	orrs	r2, r3
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	621a      	str	r2, [r3, #32]
}
 801433e:	bf00      	nop
 8014340:	371c      	adds	r7, #28
 8014342:	46bd      	mov	sp, r7
 8014344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014348:	4770      	bx	lr

0801434a <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801434a:	b580      	push	{r7, lr}
 801434c:	b084      	sub	sp, #16
 801434e:	af00      	add	r7, sp, #0
 8014350:	6078      	str	r0, [r7, #4]
 8014352:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	2b04      	cmp	r3, #4
 8014358:	d00d      	beq.n	8014376 <HAL_TIMEx_OCN_Start_IT+0x2c>
 801435a:	2b08      	cmp	r3, #8
 801435c:	d014      	beq.n	8014388 <HAL_TIMEx_OCN_Start_IT+0x3e>
 801435e:	2b00      	cmp	r3, #0
 8014360:	d000      	beq.n	8014364 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8014362:	e01a      	b.n	801439a <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	68da      	ldr	r2, [r3, #12]
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	f042 0202 	orr.w	r2, r2, #2
 8014372:	60da      	str	r2, [r3, #12]
      break;
 8014374:	e011      	b.n	801439a <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	68da      	ldr	r2, [r3, #12]
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	f042 0204 	orr.w	r2, r2, #4
 8014384:	60da      	str	r2, [r3, #12]
      break;
 8014386:	e008      	b.n	801439a <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	68da      	ldr	r2, [r3, #12]
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	f042 0208 	orr.w	r2, r2, #8
 8014396:	60da      	str	r2, [r3, #12]
      break;
 8014398:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	68da      	ldr	r2, [r3, #12]
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80143a8:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	2204      	movs	r2, #4
 80143b0:	6839      	ldr	r1, [r7, #0]
 80143b2:	4618      	mov	r0, r3
 80143b4:	f000 f976 	bl	80146a4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80143c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	689b      	ldr	r3, [r3, #8]
 80143ce:	f003 0307 	and.w	r3, r3, #7
 80143d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	2b06      	cmp	r3, #6
 80143d8:	d007      	beq.n	80143ea <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	681a      	ldr	r2, [r3, #0]
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	f042 0201 	orr.w	r2, r2, #1
 80143e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80143ea:	2300      	movs	r3, #0
}
 80143ec:	4618      	mov	r0, r3
 80143ee:	3710      	adds	r7, #16
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd80      	pop	{r7, pc}

080143f4 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b084      	sub	sp, #16
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
 80143fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80143fe:	683b      	ldr	r3, [r7, #0]
 8014400:	2b04      	cmp	r3, #4
 8014402:	d00d      	beq.n	8014420 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 8014404:	2b08      	cmp	r3, #8
 8014406:	d014      	beq.n	8014432 <HAL_TIMEx_OCN_Stop_IT+0x3e>
 8014408:	2b00      	cmp	r3, #0
 801440a:	d000      	beq.n	801440e <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 801440c:	e01a      	b.n	8014444 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	68da      	ldr	r2, [r3, #12]
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	f022 0202 	bic.w	r2, r2, #2
 801441c:	60da      	str	r2, [r3, #12]
      break;
 801441e:	e011      	b.n	8014444 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	68da      	ldr	r2, [r3, #12]
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	f022 0204 	bic.w	r2, r2, #4
 801442e:	60da      	str	r2, [r3, #12]
      break;
 8014430:	e008      	b.n	8014444 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	68da      	ldr	r2, [r3, #12]
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	f022 0208 	bic.w	r2, r2, #8
 8014440:	60da      	str	r2, [r3, #12]
      break;
 8014442:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	2200      	movs	r2, #0
 801444a:	6839      	ldr	r1, [r7, #0]
 801444c:	4618      	mov	r0, r3
 801444e:	f000 f929 	bl	80146a4 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	6a1b      	ldr	r3, [r3, #32]
 8014458:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 801445a:	68fa      	ldr	r2, [r7, #12]
 801445c:	f240 4344 	movw	r3, #1092	; 0x444
 8014460:	4013      	ands	r3, r2
 8014462:	2b00      	cmp	r3, #0
 8014464:	d107      	bne.n	8014476 <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	68da      	ldr	r2, [r3, #12]
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014474:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	6a1a      	ldr	r2, [r3, #32]
 801447c:	f241 1311 	movw	r3, #4369	; 0x1111
 8014480:	4013      	ands	r3, r2
 8014482:	2b00      	cmp	r3, #0
 8014484:	d10f      	bne.n	80144a6 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	6a1a      	ldr	r2, [r3, #32]
 801448c:	f240 4344 	movw	r3, #1092	; 0x444
 8014490:	4013      	ands	r3, r2
 8014492:	2b00      	cmp	r3, #0
 8014494:	d107      	bne.n	80144a6 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80144a4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	6a1a      	ldr	r2, [r3, #32]
 80144ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80144b0:	4013      	ands	r3, r2
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d10f      	bne.n	80144d6 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	6a1a      	ldr	r2, [r3, #32]
 80144bc:	f240 4344 	movw	r3, #1092	; 0x444
 80144c0:	4013      	ands	r3, r2
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d107      	bne.n	80144d6 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	681a      	ldr	r2, [r3, #0]
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	f022 0201 	bic.w	r2, r2, #1
 80144d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80144d6:	2300      	movs	r3, #0
}
 80144d8:	4618      	mov	r0, r3
 80144da:	3710      	adds	r7, #16
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}

080144e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80144e0:	b480      	push	{r7}
 80144e2:	b085      	sub	sp, #20
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80144f0:	2b01      	cmp	r3, #1
 80144f2:	d101      	bne.n	80144f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80144f4:	2302      	movs	r3, #2
 80144f6:	e05a      	b.n	80145ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2201      	movs	r2, #1
 80144fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2202      	movs	r2, #2
 8014504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	685b      	ldr	r3, [r3, #4]
 801450e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	689b      	ldr	r3, [r3, #8]
 8014516:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801451e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014520:	683b      	ldr	r3, [r7, #0]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	68fa      	ldr	r2, [r7, #12]
 8014526:	4313      	orrs	r3, r2
 8014528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	68fa      	ldr	r2, [r7, #12]
 8014530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	4a21      	ldr	r2, [pc, #132]	; (80145bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8014538:	4293      	cmp	r3, r2
 801453a:	d022      	beq.n	8014582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014544:	d01d      	beq.n	8014582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	4a1d      	ldr	r2, [pc, #116]	; (80145c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801454c:	4293      	cmp	r3, r2
 801454e:	d018      	beq.n	8014582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	4a1b      	ldr	r2, [pc, #108]	; (80145c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8014556:	4293      	cmp	r3, r2
 8014558:	d013      	beq.n	8014582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	4a1a      	ldr	r2, [pc, #104]	; (80145c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8014560:	4293      	cmp	r3, r2
 8014562:	d00e      	beq.n	8014582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	4a18      	ldr	r2, [pc, #96]	; (80145cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801456a:	4293      	cmp	r3, r2
 801456c:	d009      	beq.n	8014582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	4a17      	ldr	r2, [pc, #92]	; (80145d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8014574:	4293      	cmp	r3, r2
 8014576:	d004      	beq.n	8014582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	4a15      	ldr	r2, [pc, #84]	; (80145d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801457e:	4293      	cmp	r3, r2
 8014580:	d10c      	bne.n	801459c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014588:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	685b      	ldr	r3, [r3, #4]
 801458e:	68ba      	ldr	r2, [r7, #8]
 8014590:	4313      	orrs	r3, r2
 8014592:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	68ba      	ldr	r2, [r7, #8]
 801459a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	2201      	movs	r2, #1
 80145a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2200      	movs	r2, #0
 80145a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80145ac:	2300      	movs	r3, #0
}
 80145ae:	4618      	mov	r0, r3
 80145b0:	3714      	adds	r7, #20
 80145b2:	46bd      	mov	sp, r7
 80145b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b8:	4770      	bx	lr
 80145ba:	bf00      	nop
 80145bc:	40010000 	.word	0x40010000
 80145c0:	40000400 	.word	0x40000400
 80145c4:	40000800 	.word	0x40000800
 80145c8:	40000c00 	.word	0x40000c00
 80145cc:	40010400 	.word	0x40010400
 80145d0:	40014000 	.word	0x40014000
 80145d4:	40001800 	.word	0x40001800

080145d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80145d8:	b480      	push	{r7}
 80145da:	b085      	sub	sp, #20
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
 80145e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80145e2:	2300      	movs	r3, #0
 80145e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80145ec:	2b01      	cmp	r3, #1
 80145ee:	d101      	bne.n	80145f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80145f0:	2302      	movs	r3, #2
 80145f2:	e03d      	b.n	8014670 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	2201      	movs	r2, #1
 80145f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	68db      	ldr	r3, [r3, #12]
 8014606:	4313      	orrs	r3, r2
 8014608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	689b      	ldr	r3, [r3, #8]
 8014614:	4313      	orrs	r3, r2
 8014616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	685b      	ldr	r3, [r3, #4]
 8014622:	4313      	orrs	r3, r2
 8014624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	4313      	orrs	r3, r2
 8014632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	691b      	ldr	r3, [r3, #16]
 801463e:	4313      	orrs	r3, r2
 8014640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	695b      	ldr	r3, [r3, #20]
 801464c:	4313      	orrs	r3, r2
 801464e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	69db      	ldr	r3, [r3, #28]
 801465a:	4313      	orrs	r3, r2
 801465c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	68fa      	ldr	r2, [r7, #12]
 8014664:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2200      	movs	r2, #0
 801466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801466e:	2300      	movs	r3, #0
}
 8014670:	4618      	mov	r0, r3
 8014672:	3714      	adds	r7, #20
 8014674:	46bd      	mov	sp, r7
 8014676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467a:	4770      	bx	lr

0801467c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801467c:	b480      	push	{r7}
 801467e:	b083      	sub	sp, #12
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014684:	bf00      	nop
 8014686:	370c      	adds	r7, #12
 8014688:	46bd      	mov	sp, r7
 801468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468e:	4770      	bx	lr

08014690 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014690:	b480      	push	{r7}
 8014692:	b083      	sub	sp, #12
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014698:	bf00      	nop
 801469a:	370c      	adds	r7, #12
 801469c:	46bd      	mov	sp, r7
 801469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a2:	4770      	bx	lr

080146a4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80146a4:	b480      	push	{r7}
 80146a6:	b087      	sub	sp, #28
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	60f8      	str	r0, [r7, #12]
 80146ac:	60b9      	str	r1, [r7, #8]
 80146ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	f003 031f 	and.w	r3, r3, #31
 80146b6:	2204      	movs	r2, #4
 80146b8:	fa02 f303 	lsl.w	r3, r2, r3
 80146bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	6a1a      	ldr	r2, [r3, #32]
 80146c2:	697b      	ldr	r3, [r7, #20]
 80146c4:	43db      	mvns	r3, r3
 80146c6:	401a      	ands	r2, r3
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	6a1a      	ldr	r2, [r3, #32]
 80146d0:	68bb      	ldr	r3, [r7, #8]
 80146d2:	f003 031f 	and.w	r3, r3, #31
 80146d6:	6879      	ldr	r1, [r7, #4]
 80146d8:	fa01 f303 	lsl.w	r3, r1, r3
 80146dc:	431a      	orrs	r2, r3
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	621a      	str	r2, [r3, #32]
}
 80146e2:	bf00      	nop
 80146e4:	371c      	adds	r7, #28
 80146e6:	46bd      	mov	sp, r7
 80146e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ec:	4770      	bx	lr

080146ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80146ee:	b580      	push	{r7, lr}
 80146f0:	b082      	sub	sp, #8
 80146f2:	af00      	add	r7, sp, #0
 80146f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d101      	bne.n	8014700 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80146fc:	2301      	movs	r3, #1
 80146fe:	e03f      	b.n	8014780 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014706:	b2db      	uxtb	r3, r3
 8014708:	2b00      	cmp	r3, #0
 801470a:	d106      	bne.n	801471a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	2200      	movs	r2, #0
 8014710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f7fa f863 	bl	800e7e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	2224      	movs	r2, #36	; 0x24
 801471e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	68da      	ldr	r2, [r3, #12]
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014730:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f000 f9b2 	bl	8014a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	691a      	ldr	r2, [r3, #16]
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014746:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	695a      	ldr	r2, [r3, #20]
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014756:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	68da      	ldr	r2, [r3, #12]
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014766:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2200      	movs	r2, #0
 801476c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2220      	movs	r2, #32
 8014772:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2220      	movs	r2, #32
 801477a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801477e:	2300      	movs	r3, #0
}
 8014780:	4618      	mov	r0, r3
 8014782:	3708      	adds	r7, #8
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}

08014788 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b088      	sub	sp, #32
 801478c:	af02      	add	r7, sp, #8
 801478e:	60f8      	str	r0, [r7, #12]
 8014790:	60b9      	str	r1, [r7, #8]
 8014792:	603b      	str	r3, [r7, #0]
 8014794:	4613      	mov	r3, r2
 8014796:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8014798:	2300      	movs	r3, #0
 801479a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80147a2:	b2db      	uxtb	r3, r3
 80147a4:	2b20      	cmp	r3, #32
 80147a6:	f040 8083 	bne.w	80148b0 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80147aa:	68bb      	ldr	r3, [r7, #8]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d002      	beq.n	80147b6 <HAL_UART_Transmit+0x2e>
 80147b0:	88fb      	ldrh	r3, [r7, #6]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d101      	bne.n	80147ba <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80147b6:	2301      	movs	r3, #1
 80147b8:	e07b      	b.n	80148b2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80147c0:	2b01      	cmp	r3, #1
 80147c2:	d101      	bne.n	80147c8 <HAL_UART_Transmit+0x40>
 80147c4:	2302      	movs	r3, #2
 80147c6:	e074      	b.n	80148b2 <HAL_UART_Transmit+0x12a>
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	2201      	movs	r2, #1
 80147cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	2200      	movs	r2, #0
 80147d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	2221      	movs	r2, #33	; 0x21
 80147da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80147de:	f7fb fd25 	bl	801022c <HAL_GetTick>
 80147e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	88fa      	ldrh	r2, [r7, #6]
 80147e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	88fa      	ldrh	r2, [r7, #6]
 80147ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	2200      	movs	r2, #0
 80147f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80147f8:	e042      	b.n	8014880 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80147fe:	b29b      	uxth	r3, r3
 8014800:	3b01      	subs	r3, #1
 8014802:	b29a      	uxth	r2, r3
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	689b      	ldr	r3, [r3, #8]
 801480c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014810:	d122      	bne.n	8014858 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	9300      	str	r3, [sp, #0]
 8014816:	697b      	ldr	r3, [r7, #20]
 8014818:	2200      	movs	r2, #0
 801481a:	2180      	movs	r1, #128	; 0x80
 801481c:	68f8      	ldr	r0, [r7, #12]
 801481e:	f000 f8f2 	bl	8014a06 <UART_WaitOnFlagUntilTimeout>
 8014822:	4603      	mov	r3, r0
 8014824:	2b00      	cmp	r3, #0
 8014826:	d001      	beq.n	801482c <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8014828:	2303      	movs	r3, #3
 801482a:	e042      	b.n	80148b2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8014830:	693b      	ldr	r3, [r7, #16]
 8014832:	881b      	ldrh	r3, [r3, #0]
 8014834:	461a      	mov	r2, r3
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801483e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	691b      	ldr	r3, [r3, #16]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d103      	bne.n	8014850 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	3302      	adds	r3, #2
 801484c:	60bb      	str	r3, [r7, #8]
 801484e:	e017      	b.n	8014880 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	3301      	adds	r3, #1
 8014854:	60bb      	str	r3, [r7, #8]
 8014856:	e013      	b.n	8014880 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	9300      	str	r3, [sp, #0]
 801485c:	697b      	ldr	r3, [r7, #20]
 801485e:	2200      	movs	r2, #0
 8014860:	2180      	movs	r1, #128	; 0x80
 8014862:	68f8      	ldr	r0, [r7, #12]
 8014864:	f000 f8cf 	bl	8014a06 <UART_WaitOnFlagUntilTimeout>
 8014868:	4603      	mov	r3, r0
 801486a:	2b00      	cmp	r3, #0
 801486c:	d001      	beq.n	8014872 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 801486e:	2303      	movs	r3, #3
 8014870:	e01f      	b.n	80148b2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	1c5a      	adds	r2, r3, #1
 8014876:	60ba      	str	r2, [r7, #8]
 8014878:	781a      	ldrb	r2, [r3, #0]
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014884:	b29b      	uxth	r3, r3
 8014886:	2b00      	cmp	r3, #0
 8014888:	d1b7      	bne.n	80147fa <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801488a:	683b      	ldr	r3, [r7, #0]
 801488c:	9300      	str	r3, [sp, #0]
 801488e:	697b      	ldr	r3, [r7, #20]
 8014890:	2200      	movs	r2, #0
 8014892:	2140      	movs	r1, #64	; 0x40
 8014894:	68f8      	ldr	r0, [r7, #12]
 8014896:	f000 f8b6 	bl	8014a06 <UART_WaitOnFlagUntilTimeout>
 801489a:	4603      	mov	r3, r0
 801489c:	2b00      	cmp	r3, #0
 801489e:	d001      	beq.n	80148a4 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80148a0:	2303      	movs	r3, #3
 80148a2:	e006      	b.n	80148b2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	2220      	movs	r2, #32
 80148a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80148ac:	2300      	movs	r3, #0
 80148ae:	e000      	b.n	80148b2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80148b0:	2302      	movs	r3, #2
  }
}
 80148b2:	4618      	mov	r0, r3
 80148b4:	3718      	adds	r7, #24
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bd80      	pop	{r7, pc}

080148ba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80148ba:	b580      	push	{r7, lr}
 80148bc:	b088      	sub	sp, #32
 80148be:	af02      	add	r7, sp, #8
 80148c0:	60f8      	str	r0, [r7, #12]
 80148c2:	60b9      	str	r1, [r7, #8]
 80148c4:	603b      	str	r3, [r7, #0]
 80148c6:	4613      	mov	r3, r2
 80148c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80148ca:	2300      	movs	r3, #0
 80148cc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80148d4:	b2db      	uxtb	r3, r3
 80148d6:	2b20      	cmp	r3, #32
 80148d8:	f040 8090 	bne.w	80149fc <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d002      	beq.n	80148e8 <HAL_UART_Receive+0x2e>
 80148e2:	88fb      	ldrh	r3, [r7, #6]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d101      	bne.n	80148ec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80148e8:	2301      	movs	r3, #1
 80148ea:	e088      	b.n	80149fe <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80148f2:	2b01      	cmp	r3, #1
 80148f4:	d101      	bne.n	80148fa <HAL_UART_Receive+0x40>
 80148f6:	2302      	movs	r3, #2
 80148f8:	e081      	b.n	80149fe <HAL_UART_Receive+0x144>
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	2201      	movs	r2, #1
 80148fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	2200      	movs	r2, #0
 8014906:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	2222      	movs	r2, #34	; 0x22
 801490c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8014910:	f7fb fc8c 	bl	801022c <HAL_GetTick>
 8014914:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	88fa      	ldrh	r2, [r7, #6]
 801491a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	88fa      	ldrh	r2, [r7, #6]
 8014920:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	2200      	movs	r2, #0
 8014926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 801492a:	e05c      	b.n	80149e6 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8014930:	b29b      	uxth	r3, r3
 8014932:	3b01      	subs	r3, #1
 8014934:	b29a      	uxth	r2, r3
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	689b      	ldr	r3, [r3, #8]
 801493e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014942:	d12b      	bne.n	801499c <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014944:	683b      	ldr	r3, [r7, #0]
 8014946:	9300      	str	r3, [sp, #0]
 8014948:	697b      	ldr	r3, [r7, #20]
 801494a:	2200      	movs	r2, #0
 801494c:	2120      	movs	r1, #32
 801494e:	68f8      	ldr	r0, [r7, #12]
 8014950:	f000 f859 	bl	8014a06 <UART_WaitOnFlagUntilTimeout>
 8014954:	4603      	mov	r3, r0
 8014956:	2b00      	cmp	r3, #0
 8014958:	d001      	beq.n	801495e <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 801495a:	2303      	movs	r3, #3
 801495c:	e04f      	b.n	80149fe <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	691b      	ldr	r3, [r3, #16]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d10c      	bne.n	8014984 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	685b      	ldr	r3, [r3, #4]
 8014970:	b29b      	uxth	r3, r3
 8014972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014976:	b29a      	uxth	r2, r3
 8014978:	693b      	ldr	r3, [r7, #16]
 801497a:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 801497c:	68bb      	ldr	r3, [r7, #8]
 801497e:	3302      	adds	r3, #2
 8014980:	60bb      	str	r3, [r7, #8]
 8014982:	e030      	b.n	80149e6 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	685b      	ldr	r3, [r3, #4]
 801498a:	b29b      	uxth	r3, r3
 801498c:	b2db      	uxtb	r3, r3
 801498e:	b29a      	uxth	r2, r3
 8014990:	693b      	ldr	r3, [r7, #16]
 8014992:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8014994:	68bb      	ldr	r3, [r7, #8]
 8014996:	3301      	adds	r3, #1
 8014998:	60bb      	str	r3, [r7, #8]
 801499a:	e024      	b.n	80149e6 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801499c:	683b      	ldr	r3, [r7, #0]
 801499e:	9300      	str	r3, [sp, #0]
 80149a0:	697b      	ldr	r3, [r7, #20]
 80149a2:	2200      	movs	r2, #0
 80149a4:	2120      	movs	r1, #32
 80149a6:	68f8      	ldr	r0, [r7, #12]
 80149a8:	f000 f82d 	bl	8014a06 <UART_WaitOnFlagUntilTimeout>
 80149ac:	4603      	mov	r3, r0
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d001      	beq.n	80149b6 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80149b2:	2303      	movs	r3, #3
 80149b4:	e023      	b.n	80149fe <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	691b      	ldr	r3, [r3, #16]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d108      	bne.n	80149d0 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	6859      	ldr	r1, [r3, #4]
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	1c5a      	adds	r2, r3, #1
 80149c8:	60ba      	str	r2, [r7, #8]
 80149ca:	b2ca      	uxtb	r2, r1
 80149cc:	701a      	strb	r2, [r3, #0]
 80149ce:	e00a      	b.n	80149e6 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	685b      	ldr	r3, [r3, #4]
 80149d6:	b2da      	uxtb	r2, r3
 80149d8:	68bb      	ldr	r3, [r7, #8]
 80149da:	1c59      	adds	r1, r3, #1
 80149dc:	60b9      	str	r1, [r7, #8]
 80149de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80149e2:	b2d2      	uxtb	r2, r2
 80149e4:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80149ea:	b29b      	uxth	r3, r3
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d19d      	bne.n	801492c <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	2220      	movs	r2, #32
 80149f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80149f8:	2300      	movs	r3, #0
 80149fa:	e000      	b.n	80149fe <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80149fc:	2302      	movs	r3, #2
  }
}
 80149fe:	4618      	mov	r0, r3
 8014a00:	3718      	adds	r7, #24
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}

08014a06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8014a06:	b580      	push	{r7, lr}
 8014a08:	b084      	sub	sp, #16
 8014a0a:	af00      	add	r7, sp, #0
 8014a0c:	60f8      	str	r0, [r7, #12]
 8014a0e:	60b9      	str	r1, [r7, #8]
 8014a10:	603b      	str	r3, [r7, #0]
 8014a12:	4613      	mov	r3, r2
 8014a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014a16:	e02c      	b.n	8014a72 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014a18:	69bb      	ldr	r3, [r7, #24]
 8014a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a1e:	d028      	beq.n	8014a72 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8014a20:	69bb      	ldr	r3, [r7, #24]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d007      	beq.n	8014a36 <UART_WaitOnFlagUntilTimeout+0x30>
 8014a26:	f7fb fc01 	bl	801022c <HAL_GetTick>
 8014a2a:	4602      	mov	r2, r0
 8014a2c:	683b      	ldr	r3, [r7, #0]
 8014a2e:	1ad3      	subs	r3, r2, r3
 8014a30:	69ba      	ldr	r2, [r7, #24]
 8014a32:	429a      	cmp	r2, r3
 8014a34:	d21d      	bcs.n	8014a72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	68da      	ldr	r2, [r3, #12]
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8014a44:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	695a      	ldr	r2, [r3, #20]
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	f022 0201 	bic.w	r2, r2, #1
 8014a54:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	2220      	movs	r2, #32
 8014a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	2220      	movs	r2, #32
 8014a62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	2200      	movs	r2, #0
 8014a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8014a6e:	2303      	movs	r3, #3
 8014a70:	e00f      	b.n	8014a92 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	681a      	ldr	r2, [r3, #0]
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	4013      	ands	r3, r2
 8014a7c:	68ba      	ldr	r2, [r7, #8]
 8014a7e:	429a      	cmp	r2, r3
 8014a80:	bf0c      	ite	eq
 8014a82:	2301      	moveq	r3, #1
 8014a84:	2300      	movne	r3, #0
 8014a86:	b2db      	uxtb	r3, r3
 8014a88:	461a      	mov	r2, r3
 8014a8a:	79fb      	ldrb	r3, [r7, #7]
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	d0c3      	beq.n	8014a18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8014a90:	2300      	movs	r3, #0
}
 8014a92:	4618      	mov	r0, r3
 8014a94:	3710      	adds	r7, #16
 8014a96:	46bd      	mov	sp, r7
 8014a98:	bd80      	pop	{r7, pc}
	...

08014a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aa0:	b085      	sub	sp, #20
 8014aa2:	af00      	add	r7, sp, #0
 8014aa4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	691b      	ldr	r3, [r3, #16]
 8014aac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	68da      	ldr	r2, [r3, #12]
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	430a      	orrs	r2, r1
 8014aba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	689a      	ldr	r2, [r3, #8]
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	691b      	ldr	r3, [r3, #16]
 8014ac4:	431a      	orrs	r2, r3
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	695b      	ldr	r3, [r3, #20]
 8014aca:	431a      	orrs	r2, r3
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	69db      	ldr	r3, [r3, #28]
 8014ad0:	4313      	orrs	r3, r2
 8014ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	68db      	ldr	r3, [r3, #12]
 8014ada:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8014ade:	f023 030c 	bic.w	r3, r3, #12
 8014ae2:	687a      	ldr	r2, [r7, #4]
 8014ae4:	6812      	ldr	r2, [r2, #0]
 8014ae6:	68f9      	ldr	r1, [r7, #12]
 8014ae8:	430b      	orrs	r3, r1
 8014aea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	695b      	ldr	r3, [r3, #20]
 8014af2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	699a      	ldr	r2, [r3, #24]
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	430a      	orrs	r2, r1
 8014b00:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	69db      	ldr	r3, [r3, #28]
 8014b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014b0a:	f040 818b 	bne.w	8014e24 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	4ac1      	ldr	r2, [pc, #772]	; (8014e18 <UART_SetConfig+0x37c>)
 8014b14:	4293      	cmp	r3, r2
 8014b16:	d005      	beq.n	8014b24 <UART_SetConfig+0x88>
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	4abf      	ldr	r2, [pc, #764]	; (8014e1c <UART_SetConfig+0x380>)
 8014b1e:	4293      	cmp	r3, r2
 8014b20:	f040 80bd 	bne.w	8014c9e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014b24:	f7fd fce2 	bl	80124ec <HAL_RCC_GetPCLK2Freq>
 8014b28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014b2a:	68bb      	ldr	r3, [r7, #8]
 8014b2c:	461d      	mov	r5, r3
 8014b2e:	f04f 0600 	mov.w	r6, #0
 8014b32:	46a8      	mov	r8, r5
 8014b34:	46b1      	mov	r9, r6
 8014b36:	eb18 0308 	adds.w	r3, r8, r8
 8014b3a:	eb49 0409 	adc.w	r4, r9, r9
 8014b3e:	4698      	mov	r8, r3
 8014b40:	46a1      	mov	r9, r4
 8014b42:	eb18 0805 	adds.w	r8, r8, r5
 8014b46:	eb49 0906 	adc.w	r9, r9, r6
 8014b4a:	f04f 0100 	mov.w	r1, #0
 8014b4e:	f04f 0200 	mov.w	r2, #0
 8014b52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8014b56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8014b5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8014b5e:	4688      	mov	r8, r1
 8014b60:	4691      	mov	r9, r2
 8014b62:	eb18 0005 	adds.w	r0, r8, r5
 8014b66:	eb49 0106 	adc.w	r1, r9, r6
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	685b      	ldr	r3, [r3, #4]
 8014b6e:	461d      	mov	r5, r3
 8014b70:	f04f 0600 	mov.w	r6, #0
 8014b74:	196b      	adds	r3, r5, r5
 8014b76:	eb46 0406 	adc.w	r4, r6, r6
 8014b7a:	461a      	mov	r2, r3
 8014b7c:	4623      	mov	r3, r4
 8014b7e:	f7f3 ffbb 	bl	8008af8 <__aeabi_uldivmod>
 8014b82:	4603      	mov	r3, r0
 8014b84:	460c      	mov	r4, r1
 8014b86:	461a      	mov	r2, r3
 8014b88:	4ba5      	ldr	r3, [pc, #660]	; (8014e20 <UART_SetConfig+0x384>)
 8014b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8014b8e:	095b      	lsrs	r3, r3, #5
 8014b90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8014b94:	68bb      	ldr	r3, [r7, #8]
 8014b96:	461d      	mov	r5, r3
 8014b98:	f04f 0600 	mov.w	r6, #0
 8014b9c:	46a9      	mov	r9, r5
 8014b9e:	46b2      	mov	sl, r6
 8014ba0:	eb19 0309 	adds.w	r3, r9, r9
 8014ba4:	eb4a 040a 	adc.w	r4, sl, sl
 8014ba8:	4699      	mov	r9, r3
 8014baa:	46a2      	mov	sl, r4
 8014bac:	eb19 0905 	adds.w	r9, r9, r5
 8014bb0:	eb4a 0a06 	adc.w	sl, sl, r6
 8014bb4:	f04f 0100 	mov.w	r1, #0
 8014bb8:	f04f 0200 	mov.w	r2, #0
 8014bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014bc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014bc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014bc8:	4689      	mov	r9, r1
 8014bca:	4692      	mov	sl, r2
 8014bcc:	eb19 0005 	adds.w	r0, r9, r5
 8014bd0:	eb4a 0106 	adc.w	r1, sl, r6
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	685b      	ldr	r3, [r3, #4]
 8014bd8:	461d      	mov	r5, r3
 8014bda:	f04f 0600 	mov.w	r6, #0
 8014bde:	196b      	adds	r3, r5, r5
 8014be0:	eb46 0406 	adc.w	r4, r6, r6
 8014be4:	461a      	mov	r2, r3
 8014be6:	4623      	mov	r3, r4
 8014be8:	f7f3 ff86 	bl	8008af8 <__aeabi_uldivmod>
 8014bec:	4603      	mov	r3, r0
 8014bee:	460c      	mov	r4, r1
 8014bf0:	461a      	mov	r2, r3
 8014bf2:	4b8b      	ldr	r3, [pc, #556]	; (8014e20 <UART_SetConfig+0x384>)
 8014bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8014bf8:	095b      	lsrs	r3, r3, #5
 8014bfa:	2164      	movs	r1, #100	; 0x64
 8014bfc:	fb01 f303 	mul.w	r3, r1, r3
 8014c00:	1ad3      	subs	r3, r2, r3
 8014c02:	00db      	lsls	r3, r3, #3
 8014c04:	3332      	adds	r3, #50	; 0x32
 8014c06:	4a86      	ldr	r2, [pc, #536]	; (8014e20 <UART_SetConfig+0x384>)
 8014c08:	fba2 2303 	umull	r2, r3, r2, r3
 8014c0c:	095b      	lsrs	r3, r3, #5
 8014c0e:	005b      	lsls	r3, r3, #1
 8014c10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014c14:	4498      	add	r8, r3
 8014c16:	68bb      	ldr	r3, [r7, #8]
 8014c18:	461d      	mov	r5, r3
 8014c1a:	f04f 0600 	mov.w	r6, #0
 8014c1e:	46a9      	mov	r9, r5
 8014c20:	46b2      	mov	sl, r6
 8014c22:	eb19 0309 	adds.w	r3, r9, r9
 8014c26:	eb4a 040a 	adc.w	r4, sl, sl
 8014c2a:	4699      	mov	r9, r3
 8014c2c:	46a2      	mov	sl, r4
 8014c2e:	eb19 0905 	adds.w	r9, r9, r5
 8014c32:	eb4a 0a06 	adc.w	sl, sl, r6
 8014c36:	f04f 0100 	mov.w	r1, #0
 8014c3a:	f04f 0200 	mov.w	r2, #0
 8014c3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014c42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014c46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014c4a:	4689      	mov	r9, r1
 8014c4c:	4692      	mov	sl, r2
 8014c4e:	eb19 0005 	adds.w	r0, r9, r5
 8014c52:	eb4a 0106 	adc.w	r1, sl, r6
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	685b      	ldr	r3, [r3, #4]
 8014c5a:	461d      	mov	r5, r3
 8014c5c:	f04f 0600 	mov.w	r6, #0
 8014c60:	196b      	adds	r3, r5, r5
 8014c62:	eb46 0406 	adc.w	r4, r6, r6
 8014c66:	461a      	mov	r2, r3
 8014c68:	4623      	mov	r3, r4
 8014c6a:	f7f3 ff45 	bl	8008af8 <__aeabi_uldivmod>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	460c      	mov	r4, r1
 8014c72:	461a      	mov	r2, r3
 8014c74:	4b6a      	ldr	r3, [pc, #424]	; (8014e20 <UART_SetConfig+0x384>)
 8014c76:	fba3 1302 	umull	r1, r3, r3, r2
 8014c7a:	095b      	lsrs	r3, r3, #5
 8014c7c:	2164      	movs	r1, #100	; 0x64
 8014c7e:	fb01 f303 	mul.w	r3, r1, r3
 8014c82:	1ad3      	subs	r3, r2, r3
 8014c84:	00db      	lsls	r3, r3, #3
 8014c86:	3332      	adds	r3, #50	; 0x32
 8014c88:	4a65      	ldr	r2, [pc, #404]	; (8014e20 <UART_SetConfig+0x384>)
 8014c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8014c8e:	095b      	lsrs	r3, r3, #5
 8014c90:	f003 0207 	and.w	r2, r3, #7
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	4442      	add	r2, r8
 8014c9a:	609a      	str	r2, [r3, #8]
 8014c9c:	e26f      	b.n	801517e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8014c9e:	f7fd fc11 	bl	80124c4 <HAL_RCC_GetPCLK1Freq>
 8014ca2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	461d      	mov	r5, r3
 8014ca8:	f04f 0600 	mov.w	r6, #0
 8014cac:	46a8      	mov	r8, r5
 8014cae:	46b1      	mov	r9, r6
 8014cb0:	eb18 0308 	adds.w	r3, r8, r8
 8014cb4:	eb49 0409 	adc.w	r4, r9, r9
 8014cb8:	4698      	mov	r8, r3
 8014cba:	46a1      	mov	r9, r4
 8014cbc:	eb18 0805 	adds.w	r8, r8, r5
 8014cc0:	eb49 0906 	adc.w	r9, r9, r6
 8014cc4:	f04f 0100 	mov.w	r1, #0
 8014cc8:	f04f 0200 	mov.w	r2, #0
 8014ccc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8014cd0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8014cd4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8014cd8:	4688      	mov	r8, r1
 8014cda:	4691      	mov	r9, r2
 8014cdc:	eb18 0005 	adds.w	r0, r8, r5
 8014ce0:	eb49 0106 	adc.w	r1, r9, r6
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	685b      	ldr	r3, [r3, #4]
 8014ce8:	461d      	mov	r5, r3
 8014cea:	f04f 0600 	mov.w	r6, #0
 8014cee:	196b      	adds	r3, r5, r5
 8014cf0:	eb46 0406 	adc.w	r4, r6, r6
 8014cf4:	461a      	mov	r2, r3
 8014cf6:	4623      	mov	r3, r4
 8014cf8:	f7f3 fefe 	bl	8008af8 <__aeabi_uldivmod>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	460c      	mov	r4, r1
 8014d00:	461a      	mov	r2, r3
 8014d02:	4b47      	ldr	r3, [pc, #284]	; (8014e20 <UART_SetConfig+0x384>)
 8014d04:	fba3 2302 	umull	r2, r3, r3, r2
 8014d08:	095b      	lsrs	r3, r3, #5
 8014d0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8014d0e:	68bb      	ldr	r3, [r7, #8]
 8014d10:	461d      	mov	r5, r3
 8014d12:	f04f 0600 	mov.w	r6, #0
 8014d16:	46a9      	mov	r9, r5
 8014d18:	46b2      	mov	sl, r6
 8014d1a:	eb19 0309 	adds.w	r3, r9, r9
 8014d1e:	eb4a 040a 	adc.w	r4, sl, sl
 8014d22:	4699      	mov	r9, r3
 8014d24:	46a2      	mov	sl, r4
 8014d26:	eb19 0905 	adds.w	r9, r9, r5
 8014d2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8014d2e:	f04f 0100 	mov.w	r1, #0
 8014d32:	f04f 0200 	mov.w	r2, #0
 8014d36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014d3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014d3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014d42:	4689      	mov	r9, r1
 8014d44:	4692      	mov	sl, r2
 8014d46:	eb19 0005 	adds.w	r0, r9, r5
 8014d4a:	eb4a 0106 	adc.w	r1, sl, r6
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	685b      	ldr	r3, [r3, #4]
 8014d52:	461d      	mov	r5, r3
 8014d54:	f04f 0600 	mov.w	r6, #0
 8014d58:	196b      	adds	r3, r5, r5
 8014d5a:	eb46 0406 	adc.w	r4, r6, r6
 8014d5e:	461a      	mov	r2, r3
 8014d60:	4623      	mov	r3, r4
 8014d62:	f7f3 fec9 	bl	8008af8 <__aeabi_uldivmod>
 8014d66:	4603      	mov	r3, r0
 8014d68:	460c      	mov	r4, r1
 8014d6a:	461a      	mov	r2, r3
 8014d6c:	4b2c      	ldr	r3, [pc, #176]	; (8014e20 <UART_SetConfig+0x384>)
 8014d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8014d72:	095b      	lsrs	r3, r3, #5
 8014d74:	2164      	movs	r1, #100	; 0x64
 8014d76:	fb01 f303 	mul.w	r3, r1, r3
 8014d7a:	1ad3      	subs	r3, r2, r3
 8014d7c:	00db      	lsls	r3, r3, #3
 8014d7e:	3332      	adds	r3, #50	; 0x32
 8014d80:	4a27      	ldr	r2, [pc, #156]	; (8014e20 <UART_SetConfig+0x384>)
 8014d82:	fba2 2303 	umull	r2, r3, r2, r3
 8014d86:	095b      	lsrs	r3, r3, #5
 8014d88:	005b      	lsls	r3, r3, #1
 8014d8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014d8e:	4498      	add	r8, r3
 8014d90:	68bb      	ldr	r3, [r7, #8]
 8014d92:	461d      	mov	r5, r3
 8014d94:	f04f 0600 	mov.w	r6, #0
 8014d98:	46a9      	mov	r9, r5
 8014d9a:	46b2      	mov	sl, r6
 8014d9c:	eb19 0309 	adds.w	r3, r9, r9
 8014da0:	eb4a 040a 	adc.w	r4, sl, sl
 8014da4:	4699      	mov	r9, r3
 8014da6:	46a2      	mov	sl, r4
 8014da8:	eb19 0905 	adds.w	r9, r9, r5
 8014dac:	eb4a 0a06 	adc.w	sl, sl, r6
 8014db0:	f04f 0100 	mov.w	r1, #0
 8014db4:	f04f 0200 	mov.w	r2, #0
 8014db8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014dbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014dc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014dc4:	4689      	mov	r9, r1
 8014dc6:	4692      	mov	sl, r2
 8014dc8:	eb19 0005 	adds.w	r0, r9, r5
 8014dcc:	eb4a 0106 	adc.w	r1, sl, r6
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	685b      	ldr	r3, [r3, #4]
 8014dd4:	461d      	mov	r5, r3
 8014dd6:	f04f 0600 	mov.w	r6, #0
 8014dda:	196b      	adds	r3, r5, r5
 8014ddc:	eb46 0406 	adc.w	r4, r6, r6
 8014de0:	461a      	mov	r2, r3
 8014de2:	4623      	mov	r3, r4
 8014de4:	f7f3 fe88 	bl	8008af8 <__aeabi_uldivmod>
 8014de8:	4603      	mov	r3, r0
 8014dea:	460c      	mov	r4, r1
 8014dec:	461a      	mov	r2, r3
 8014dee:	4b0c      	ldr	r3, [pc, #48]	; (8014e20 <UART_SetConfig+0x384>)
 8014df0:	fba3 1302 	umull	r1, r3, r3, r2
 8014df4:	095b      	lsrs	r3, r3, #5
 8014df6:	2164      	movs	r1, #100	; 0x64
 8014df8:	fb01 f303 	mul.w	r3, r1, r3
 8014dfc:	1ad3      	subs	r3, r2, r3
 8014dfe:	00db      	lsls	r3, r3, #3
 8014e00:	3332      	adds	r3, #50	; 0x32
 8014e02:	4a07      	ldr	r2, [pc, #28]	; (8014e20 <UART_SetConfig+0x384>)
 8014e04:	fba2 2303 	umull	r2, r3, r2, r3
 8014e08:	095b      	lsrs	r3, r3, #5
 8014e0a:	f003 0207 	and.w	r2, r3, #7
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	4442      	add	r2, r8
 8014e14:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8014e16:	e1b2      	b.n	801517e <UART_SetConfig+0x6e2>
 8014e18:	40011000 	.word	0x40011000
 8014e1c:	40011400 	.word	0x40011400
 8014e20:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	4ad7      	ldr	r2, [pc, #860]	; (8015188 <UART_SetConfig+0x6ec>)
 8014e2a:	4293      	cmp	r3, r2
 8014e2c:	d005      	beq.n	8014e3a <UART_SetConfig+0x39e>
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	4ad6      	ldr	r2, [pc, #856]	; (801518c <UART_SetConfig+0x6f0>)
 8014e34:	4293      	cmp	r3, r2
 8014e36:	f040 80d1 	bne.w	8014fdc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8014e3a:	f7fd fb57 	bl	80124ec <HAL_RCC_GetPCLK2Freq>
 8014e3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014e40:	68bb      	ldr	r3, [r7, #8]
 8014e42:	469a      	mov	sl, r3
 8014e44:	f04f 0b00 	mov.w	fp, #0
 8014e48:	46d0      	mov	r8, sl
 8014e4a:	46d9      	mov	r9, fp
 8014e4c:	eb18 0308 	adds.w	r3, r8, r8
 8014e50:	eb49 0409 	adc.w	r4, r9, r9
 8014e54:	4698      	mov	r8, r3
 8014e56:	46a1      	mov	r9, r4
 8014e58:	eb18 080a 	adds.w	r8, r8, sl
 8014e5c:	eb49 090b 	adc.w	r9, r9, fp
 8014e60:	f04f 0100 	mov.w	r1, #0
 8014e64:	f04f 0200 	mov.w	r2, #0
 8014e68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8014e6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8014e70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8014e74:	4688      	mov	r8, r1
 8014e76:	4691      	mov	r9, r2
 8014e78:	eb1a 0508 	adds.w	r5, sl, r8
 8014e7c:	eb4b 0609 	adc.w	r6, fp, r9
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	685b      	ldr	r3, [r3, #4]
 8014e84:	4619      	mov	r1, r3
 8014e86:	f04f 0200 	mov.w	r2, #0
 8014e8a:	f04f 0300 	mov.w	r3, #0
 8014e8e:	f04f 0400 	mov.w	r4, #0
 8014e92:	0094      	lsls	r4, r2, #2
 8014e94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8014e98:	008b      	lsls	r3, r1, #2
 8014e9a:	461a      	mov	r2, r3
 8014e9c:	4623      	mov	r3, r4
 8014e9e:	4628      	mov	r0, r5
 8014ea0:	4631      	mov	r1, r6
 8014ea2:	f7f3 fe29 	bl	8008af8 <__aeabi_uldivmod>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	460c      	mov	r4, r1
 8014eaa:	461a      	mov	r2, r3
 8014eac:	4bb8      	ldr	r3, [pc, #736]	; (8015190 <UART_SetConfig+0x6f4>)
 8014eae:	fba3 2302 	umull	r2, r3, r3, r2
 8014eb2:	095b      	lsrs	r3, r3, #5
 8014eb4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8014eb8:	68bb      	ldr	r3, [r7, #8]
 8014eba:	469b      	mov	fp, r3
 8014ebc:	f04f 0c00 	mov.w	ip, #0
 8014ec0:	46d9      	mov	r9, fp
 8014ec2:	46e2      	mov	sl, ip
 8014ec4:	eb19 0309 	adds.w	r3, r9, r9
 8014ec8:	eb4a 040a 	adc.w	r4, sl, sl
 8014ecc:	4699      	mov	r9, r3
 8014ece:	46a2      	mov	sl, r4
 8014ed0:	eb19 090b 	adds.w	r9, r9, fp
 8014ed4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8014ed8:	f04f 0100 	mov.w	r1, #0
 8014edc:	f04f 0200 	mov.w	r2, #0
 8014ee0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014ee4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014ee8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014eec:	4689      	mov	r9, r1
 8014eee:	4692      	mov	sl, r2
 8014ef0:	eb1b 0509 	adds.w	r5, fp, r9
 8014ef4:	eb4c 060a 	adc.w	r6, ip, sl
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	685b      	ldr	r3, [r3, #4]
 8014efc:	4619      	mov	r1, r3
 8014efe:	f04f 0200 	mov.w	r2, #0
 8014f02:	f04f 0300 	mov.w	r3, #0
 8014f06:	f04f 0400 	mov.w	r4, #0
 8014f0a:	0094      	lsls	r4, r2, #2
 8014f0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8014f10:	008b      	lsls	r3, r1, #2
 8014f12:	461a      	mov	r2, r3
 8014f14:	4623      	mov	r3, r4
 8014f16:	4628      	mov	r0, r5
 8014f18:	4631      	mov	r1, r6
 8014f1a:	f7f3 fded 	bl	8008af8 <__aeabi_uldivmod>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	460c      	mov	r4, r1
 8014f22:	461a      	mov	r2, r3
 8014f24:	4b9a      	ldr	r3, [pc, #616]	; (8015190 <UART_SetConfig+0x6f4>)
 8014f26:	fba3 1302 	umull	r1, r3, r3, r2
 8014f2a:	095b      	lsrs	r3, r3, #5
 8014f2c:	2164      	movs	r1, #100	; 0x64
 8014f2e:	fb01 f303 	mul.w	r3, r1, r3
 8014f32:	1ad3      	subs	r3, r2, r3
 8014f34:	011b      	lsls	r3, r3, #4
 8014f36:	3332      	adds	r3, #50	; 0x32
 8014f38:	4a95      	ldr	r2, [pc, #596]	; (8015190 <UART_SetConfig+0x6f4>)
 8014f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8014f3e:	095b      	lsrs	r3, r3, #5
 8014f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f44:	4498      	add	r8, r3
 8014f46:	68bb      	ldr	r3, [r7, #8]
 8014f48:	469b      	mov	fp, r3
 8014f4a:	f04f 0c00 	mov.w	ip, #0
 8014f4e:	46d9      	mov	r9, fp
 8014f50:	46e2      	mov	sl, ip
 8014f52:	eb19 0309 	adds.w	r3, r9, r9
 8014f56:	eb4a 040a 	adc.w	r4, sl, sl
 8014f5a:	4699      	mov	r9, r3
 8014f5c:	46a2      	mov	sl, r4
 8014f5e:	eb19 090b 	adds.w	r9, r9, fp
 8014f62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8014f66:	f04f 0100 	mov.w	r1, #0
 8014f6a:	f04f 0200 	mov.w	r2, #0
 8014f6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014f72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014f76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014f7a:	4689      	mov	r9, r1
 8014f7c:	4692      	mov	sl, r2
 8014f7e:	eb1b 0509 	adds.w	r5, fp, r9
 8014f82:	eb4c 060a 	adc.w	r6, ip, sl
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	685b      	ldr	r3, [r3, #4]
 8014f8a:	4619      	mov	r1, r3
 8014f8c:	f04f 0200 	mov.w	r2, #0
 8014f90:	f04f 0300 	mov.w	r3, #0
 8014f94:	f04f 0400 	mov.w	r4, #0
 8014f98:	0094      	lsls	r4, r2, #2
 8014f9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8014f9e:	008b      	lsls	r3, r1, #2
 8014fa0:	461a      	mov	r2, r3
 8014fa2:	4623      	mov	r3, r4
 8014fa4:	4628      	mov	r0, r5
 8014fa6:	4631      	mov	r1, r6
 8014fa8:	f7f3 fda6 	bl	8008af8 <__aeabi_uldivmod>
 8014fac:	4603      	mov	r3, r0
 8014fae:	460c      	mov	r4, r1
 8014fb0:	461a      	mov	r2, r3
 8014fb2:	4b77      	ldr	r3, [pc, #476]	; (8015190 <UART_SetConfig+0x6f4>)
 8014fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8014fb8:	095b      	lsrs	r3, r3, #5
 8014fba:	2164      	movs	r1, #100	; 0x64
 8014fbc:	fb01 f303 	mul.w	r3, r1, r3
 8014fc0:	1ad3      	subs	r3, r2, r3
 8014fc2:	011b      	lsls	r3, r3, #4
 8014fc4:	3332      	adds	r3, #50	; 0x32
 8014fc6:	4a72      	ldr	r2, [pc, #456]	; (8015190 <UART_SetConfig+0x6f4>)
 8014fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8014fcc:	095b      	lsrs	r3, r3, #5
 8014fce:	f003 020f 	and.w	r2, r3, #15
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	4442      	add	r2, r8
 8014fd8:	609a      	str	r2, [r3, #8]
 8014fda:	e0d0      	b.n	801517e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8014fdc:	f7fd fa72 	bl	80124c4 <HAL_RCC_GetPCLK1Freq>
 8014fe0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014fe2:	68bb      	ldr	r3, [r7, #8]
 8014fe4:	469a      	mov	sl, r3
 8014fe6:	f04f 0b00 	mov.w	fp, #0
 8014fea:	46d0      	mov	r8, sl
 8014fec:	46d9      	mov	r9, fp
 8014fee:	eb18 0308 	adds.w	r3, r8, r8
 8014ff2:	eb49 0409 	adc.w	r4, r9, r9
 8014ff6:	4698      	mov	r8, r3
 8014ff8:	46a1      	mov	r9, r4
 8014ffa:	eb18 080a 	adds.w	r8, r8, sl
 8014ffe:	eb49 090b 	adc.w	r9, r9, fp
 8015002:	f04f 0100 	mov.w	r1, #0
 8015006:	f04f 0200 	mov.w	r2, #0
 801500a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801500e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015012:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015016:	4688      	mov	r8, r1
 8015018:	4691      	mov	r9, r2
 801501a:	eb1a 0508 	adds.w	r5, sl, r8
 801501e:	eb4b 0609 	adc.w	r6, fp, r9
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	685b      	ldr	r3, [r3, #4]
 8015026:	4619      	mov	r1, r3
 8015028:	f04f 0200 	mov.w	r2, #0
 801502c:	f04f 0300 	mov.w	r3, #0
 8015030:	f04f 0400 	mov.w	r4, #0
 8015034:	0094      	lsls	r4, r2, #2
 8015036:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801503a:	008b      	lsls	r3, r1, #2
 801503c:	461a      	mov	r2, r3
 801503e:	4623      	mov	r3, r4
 8015040:	4628      	mov	r0, r5
 8015042:	4631      	mov	r1, r6
 8015044:	f7f3 fd58 	bl	8008af8 <__aeabi_uldivmod>
 8015048:	4603      	mov	r3, r0
 801504a:	460c      	mov	r4, r1
 801504c:	461a      	mov	r2, r3
 801504e:	4b50      	ldr	r3, [pc, #320]	; (8015190 <UART_SetConfig+0x6f4>)
 8015050:	fba3 2302 	umull	r2, r3, r3, r2
 8015054:	095b      	lsrs	r3, r3, #5
 8015056:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801505a:	68bb      	ldr	r3, [r7, #8]
 801505c:	469b      	mov	fp, r3
 801505e:	f04f 0c00 	mov.w	ip, #0
 8015062:	46d9      	mov	r9, fp
 8015064:	46e2      	mov	sl, ip
 8015066:	eb19 0309 	adds.w	r3, r9, r9
 801506a:	eb4a 040a 	adc.w	r4, sl, sl
 801506e:	4699      	mov	r9, r3
 8015070:	46a2      	mov	sl, r4
 8015072:	eb19 090b 	adds.w	r9, r9, fp
 8015076:	eb4a 0a0c 	adc.w	sl, sl, ip
 801507a:	f04f 0100 	mov.w	r1, #0
 801507e:	f04f 0200 	mov.w	r2, #0
 8015082:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015086:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801508a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801508e:	4689      	mov	r9, r1
 8015090:	4692      	mov	sl, r2
 8015092:	eb1b 0509 	adds.w	r5, fp, r9
 8015096:	eb4c 060a 	adc.w	r6, ip, sl
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	685b      	ldr	r3, [r3, #4]
 801509e:	4619      	mov	r1, r3
 80150a0:	f04f 0200 	mov.w	r2, #0
 80150a4:	f04f 0300 	mov.w	r3, #0
 80150a8:	f04f 0400 	mov.w	r4, #0
 80150ac:	0094      	lsls	r4, r2, #2
 80150ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80150b2:	008b      	lsls	r3, r1, #2
 80150b4:	461a      	mov	r2, r3
 80150b6:	4623      	mov	r3, r4
 80150b8:	4628      	mov	r0, r5
 80150ba:	4631      	mov	r1, r6
 80150bc:	f7f3 fd1c 	bl	8008af8 <__aeabi_uldivmod>
 80150c0:	4603      	mov	r3, r0
 80150c2:	460c      	mov	r4, r1
 80150c4:	461a      	mov	r2, r3
 80150c6:	4b32      	ldr	r3, [pc, #200]	; (8015190 <UART_SetConfig+0x6f4>)
 80150c8:	fba3 1302 	umull	r1, r3, r3, r2
 80150cc:	095b      	lsrs	r3, r3, #5
 80150ce:	2164      	movs	r1, #100	; 0x64
 80150d0:	fb01 f303 	mul.w	r3, r1, r3
 80150d4:	1ad3      	subs	r3, r2, r3
 80150d6:	011b      	lsls	r3, r3, #4
 80150d8:	3332      	adds	r3, #50	; 0x32
 80150da:	4a2d      	ldr	r2, [pc, #180]	; (8015190 <UART_SetConfig+0x6f4>)
 80150dc:	fba2 2303 	umull	r2, r3, r2, r3
 80150e0:	095b      	lsrs	r3, r3, #5
 80150e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80150e6:	4498      	add	r8, r3
 80150e8:	68bb      	ldr	r3, [r7, #8]
 80150ea:	469b      	mov	fp, r3
 80150ec:	f04f 0c00 	mov.w	ip, #0
 80150f0:	46d9      	mov	r9, fp
 80150f2:	46e2      	mov	sl, ip
 80150f4:	eb19 0309 	adds.w	r3, r9, r9
 80150f8:	eb4a 040a 	adc.w	r4, sl, sl
 80150fc:	4699      	mov	r9, r3
 80150fe:	46a2      	mov	sl, r4
 8015100:	eb19 090b 	adds.w	r9, r9, fp
 8015104:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015108:	f04f 0100 	mov.w	r1, #0
 801510c:	f04f 0200 	mov.w	r2, #0
 8015110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015114:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015118:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801511c:	4689      	mov	r9, r1
 801511e:	4692      	mov	sl, r2
 8015120:	eb1b 0509 	adds.w	r5, fp, r9
 8015124:	eb4c 060a 	adc.w	r6, ip, sl
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	685b      	ldr	r3, [r3, #4]
 801512c:	4619      	mov	r1, r3
 801512e:	f04f 0200 	mov.w	r2, #0
 8015132:	f04f 0300 	mov.w	r3, #0
 8015136:	f04f 0400 	mov.w	r4, #0
 801513a:	0094      	lsls	r4, r2, #2
 801513c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015140:	008b      	lsls	r3, r1, #2
 8015142:	461a      	mov	r2, r3
 8015144:	4623      	mov	r3, r4
 8015146:	4628      	mov	r0, r5
 8015148:	4631      	mov	r1, r6
 801514a:	f7f3 fcd5 	bl	8008af8 <__aeabi_uldivmod>
 801514e:	4603      	mov	r3, r0
 8015150:	460c      	mov	r4, r1
 8015152:	461a      	mov	r2, r3
 8015154:	4b0e      	ldr	r3, [pc, #56]	; (8015190 <UART_SetConfig+0x6f4>)
 8015156:	fba3 1302 	umull	r1, r3, r3, r2
 801515a:	095b      	lsrs	r3, r3, #5
 801515c:	2164      	movs	r1, #100	; 0x64
 801515e:	fb01 f303 	mul.w	r3, r1, r3
 8015162:	1ad3      	subs	r3, r2, r3
 8015164:	011b      	lsls	r3, r3, #4
 8015166:	3332      	adds	r3, #50	; 0x32
 8015168:	4a09      	ldr	r2, [pc, #36]	; (8015190 <UART_SetConfig+0x6f4>)
 801516a:	fba2 2303 	umull	r2, r3, r2, r3
 801516e:	095b      	lsrs	r3, r3, #5
 8015170:	f003 020f 	and.w	r2, r3, #15
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	4442      	add	r2, r8
 801517a:	609a      	str	r2, [r3, #8]
}
 801517c:	e7ff      	b.n	801517e <UART_SetConfig+0x6e2>
 801517e:	bf00      	nop
 8015180:	3714      	adds	r7, #20
 8015182:	46bd      	mov	sp, r7
 8015184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015188:	40011000 	.word	0x40011000
 801518c:	40011400 	.word	0x40011400
 8015190:	51eb851f 	.word	0x51eb851f

08015194 <round>:
 8015194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015196:	ec57 6b10 	vmov	r6, r7, d0
 801519a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 801519e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80151a2:	2c13      	cmp	r4, #19
 80151a4:	463b      	mov	r3, r7
 80151a6:	463d      	mov	r5, r7
 80151a8:	dc17      	bgt.n	80151da <round+0x46>
 80151aa:	2c00      	cmp	r4, #0
 80151ac:	da09      	bge.n	80151c2 <round+0x2e>
 80151ae:	3401      	adds	r4, #1
 80151b0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80151b4:	d103      	bne.n	80151be <round+0x2a>
 80151b6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80151ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80151be:	2100      	movs	r1, #0
 80151c0:	e02c      	b.n	801521c <round+0x88>
 80151c2:	4a18      	ldr	r2, [pc, #96]	; (8015224 <round+0x90>)
 80151c4:	4122      	asrs	r2, r4
 80151c6:	4217      	tst	r7, r2
 80151c8:	d100      	bne.n	80151cc <round+0x38>
 80151ca:	b19e      	cbz	r6, 80151f4 <round+0x60>
 80151cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80151d0:	4123      	asrs	r3, r4
 80151d2:	442b      	add	r3, r5
 80151d4:	ea23 0302 	bic.w	r3, r3, r2
 80151d8:	e7f1      	b.n	80151be <round+0x2a>
 80151da:	2c33      	cmp	r4, #51	; 0x33
 80151dc:	dd0d      	ble.n	80151fa <round+0x66>
 80151de:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80151e2:	d107      	bne.n	80151f4 <round+0x60>
 80151e4:	4630      	mov	r0, r6
 80151e6:	4639      	mov	r1, r7
 80151e8:	ee10 2a10 	vmov	r2, s0
 80151ec:	f7f2 ff86 	bl	80080fc <__adddf3>
 80151f0:	4606      	mov	r6, r0
 80151f2:	460f      	mov	r7, r1
 80151f4:	ec47 6b10 	vmov	d0, r6, r7
 80151f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151fa:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80151fe:	f04f 30ff 	mov.w	r0, #4294967295
 8015202:	40d0      	lsrs	r0, r2
 8015204:	4206      	tst	r6, r0
 8015206:	d0f5      	beq.n	80151f4 <round+0x60>
 8015208:	2201      	movs	r2, #1
 801520a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801520e:	fa02 f404 	lsl.w	r4, r2, r4
 8015212:	1931      	adds	r1, r6, r4
 8015214:	bf28      	it	cs
 8015216:	189b      	addcs	r3, r3, r2
 8015218:	ea21 0100 	bic.w	r1, r1, r0
 801521c:	461f      	mov	r7, r3
 801521e:	460e      	mov	r6, r1
 8015220:	e7e8      	b.n	80151f4 <round+0x60>
 8015222:	bf00      	nop
 8015224:	000fffff 	.word	0x000fffff

08015228 <__errno>:
 8015228:	4b01      	ldr	r3, [pc, #4]	; (8015230 <__errno+0x8>)
 801522a:	6818      	ldr	r0, [r3, #0]
 801522c:	4770      	bx	lr
 801522e:	bf00      	nop
 8015230:	20000028 	.word	0x20000028

08015234 <__libc_init_array>:
 8015234:	b570      	push	{r4, r5, r6, lr}
 8015236:	4e0d      	ldr	r6, [pc, #52]	; (801526c <__libc_init_array+0x38>)
 8015238:	4c0d      	ldr	r4, [pc, #52]	; (8015270 <__libc_init_array+0x3c>)
 801523a:	1ba4      	subs	r4, r4, r6
 801523c:	10a4      	asrs	r4, r4, #2
 801523e:	2500      	movs	r5, #0
 8015240:	42a5      	cmp	r5, r4
 8015242:	d109      	bne.n	8015258 <__libc_init_array+0x24>
 8015244:	4e0b      	ldr	r6, [pc, #44]	; (8015274 <__libc_init_array+0x40>)
 8015246:	4c0c      	ldr	r4, [pc, #48]	; (8015278 <__libc_init_array+0x44>)
 8015248:	f005 f83a 	bl	801a2c0 <_init>
 801524c:	1ba4      	subs	r4, r4, r6
 801524e:	10a4      	asrs	r4, r4, #2
 8015250:	2500      	movs	r5, #0
 8015252:	42a5      	cmp	r5, r4
 8015254:	d105      	bne.n	8015262 <__libc_init_array+0x2e>
 8015256:	bd70      	pop	{r4, r5, r6, pc}
 8015258:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801525c:	4798      	blx	r3
 801525e:	3501      	adds	r5, #1
 8015260:	e7ee      	b.n	8015240 <__libc_init_array+0xc>
 8015262:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015266:	4798      	blx	r3
 8015268:	3501      	adds	r5, #1
 801526a:	e7f2      	b.n	8015252 <__libc_init_array+0x1e>
 801526c:	0801a92c 	.word	0x0801a92c
 8015270:	0801a92c 	.word	0x0801a92c
 8015274:	0801a92c 	.word	0x0801a92c
 8015278:	0801a930 	.word	0x0801a930

0801527c <memcpy>:
 801527c:	b510      	push	{r4, lr}
 801527e:	1e43      	subs	r3, r0, #1
 8015280:	440a      	add	r2, r1
 8015282:	4291      	cmp	r1, r2
 8015284:	d100      	bne.n	8015288 <memcpy+0xc>
 8015286:	bd10      	pop	{r4, pc}
 8015288:	f811 4b01 	ldrb.w	r4, [r1], #1
 801528c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015290:	e7f7      	b.n	8015282 <memcpy+0x6>

08015292 <memset>:
 8015292:	4402      	add	r2, r0
 8015294:	4603      	mov	r3, r0
 8015296:	4293      	cmp	r3, r2
 8015298:	d100      	bne.n	801529c <memset+0xa>
 801529a:	4770      	bx	lr
 801529c:	f803 1b01 	strb.w	r1, [r3], #1
 80152a0:	e7f9      	b.n	8015296 <memset+0x4>

080152a2 <__cvt>:
 80152a2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80152a6:	ec55 4b10 	vmov	r4, r5, d0
 80152aa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80152ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80152b0:	2d00      	cmp	r5, #0
 80152b2:	460e      	mov	r6, r1
 80152b4:	4691      	mov	r9, r2
 80152b6:	4619      	mov	r1, r3
 80152b8:	bfb8      	it	lt
 80152ba:	4622      	movlt	r2, r4
 80152bc:	462b      	mov	r3, r5
 80152be:	f027 0720 	bic.w	r7, r7, #32
 80152c2:	bfbb      	ittet	lt
 80152c4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80152c8:	461d      	movlt	r5, r3
 80152ca:	2300      	movge	r3, #0
 80152cc:	232d      	movlt	r3, #45	; 0x2d
 80152ce:	bfb8      	it	lt
 80152d0:	4614      	movlt	r4, r2
 80152d2:	2f46      	cmp	r7, #70	; 0x46
 80152d4:	700b      	strb	r3, [r1, #0]
 80152d6:	d004      	beq.n	80152e2 <__cvt+0x40>
 80152d8:	2f45      	cmp	r7, #69	; 0x45
 80152da:	d100      	bne.n	80152de <__cvt+0x3c>
 80152dc:	3601      	adds	r6, #1
 80152de:	2102      	movs	r1, #2
 80152e0:	e000      	b.n	80152e4 <__cvt+0x42>
 80152e2:	2103      	movs	r1, #3
 80152e4:	ab03      	add	r3, sp, #12
 80152e6:	9301      	str	r3, [sp, #4]
 80152e8:	ab02      	add	r3, sp, #8
 80152ea:	9300      	str	r3, [sp, #0]
 80152ec:	4632      	mov	r2, r6
 80152ee:	4653      	mov	r3, sl
 80152f0:	ec45 4b10 	vmov	d0, r4, r5
 80152f4:	f001 ff80 	bl	80171f8 <_dtoa_r>
 80152f8:	2f47      	cmp	r7, #71	; 0x47
 80152fa:	4680      	mov	r8, r0
 80152fc:	d102      	bne.n	8015304 <__cvt+0x62>
 80152fe:	f019 0f01 	tst.w	r9, #1
 8015302:	d026      	beq.n	8015352 <__cvt+0xb0>
 8015304:	2f46      	cmp	r7, #70	; 0x46
 8015306:	eb08 0906 	add.w	r9, r8, r6
 801530a:	d111      	bne.n	8015330 <__cvt+0x8e>
 801530c:	f898 3000 	ldrb.w	r3, [r8]
 8015310:	2b30      	cmp	r3, #48	; 0x30
 8015312:	d10a      	bne.n	801532a <__cvt+0x88>
 8015314:	2200      	movs	r2, #0
 8015316:	2300      	movs	r3, #0
 8015318:	4620      	mov	r0, r4
 801531a:	4629      	mov	r1, r5
 801531c:	f7f3 fb0c 	bl	8008938 <__aeabi_dcmpeq>
 8015320:	b918      	cbnz	r0, 801532a <__cvt+0x88>
 8015322:	f1c6 0601 	rsb	r6, r6, #1
 8015326:	f8ca 6000 	str.w	r6, [sl]
 801532a:	f8da 3000 	ldr.w	r3, [sl]
 801532e:	4499      	add	r9, r3
 8015330:	2200      	movs	r2, #0
 8015332:	2300      	movs	r3, #0
 8015334:	4620      	mov	r0, r4
 8015336:	4629      	mov	r1, r5
 8015338:	f7f3 fafe 	bl	8008938 <__aeabi_dcmpeq>
 801533c:	b938      	cbnz	r0, 801534e <__cvt+0xac>
 801533e:	2230      	movs	r2, #48	; 0x30
 8015340:	9b03      	ldr	r3, [sp, #12]
 8015342:	454b      	cmp	r3, r9
 8015344:	d205      	bcs.n	8015352 <__cvt+0xb0>
 8015346:	1c59      	adds	r1, r3, #1
 8015348:	9103      	str	r1, [sp, #12]
 801534a:	701a      	strb	r2, [r3, #0]
 801534c:	e7f8      	b.n	8015340 <__cvt+0x9e>
 801534e:	f8cd 900c 	str.w	r9, [sp, #12]
 8015352:	9b03      	ldr	r3, [sp, #12]
 8015354:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015356:	eba3 0308 	sub.w	r3, r3, r8
 801535a:	4640      	mov	r0, r8
 801535c:	6013      	str	r3, [r2, #0]
 801535e:	b004      	add	sp, #16
 8015360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015364 <__exponent>:
 8015364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015366:	2900      	cmp	r1, #0
 8015368:	4604      	mov	r4, r0
 801536a:	bfba      	itte	lt
 801536c:	4249      	neglt	r1, r1
 801536e:	232d      	movlt	r3, #45	; 0x2d
 8015370:	232b      	movge	r3, #43	; 0x2b
 8015372:	2909      	cmp	r1, #9
 8015374:	f804 2b02 	strb.w	r2, [r4], #2
 8015378:	7043      	strb	r3, [r0, #1]
 801537a:	dd20      	ble.n	80153be <__exponent+0x5a>
 801537c:	f10d 0307 	add.w	r3, sp, #7
 8015380:	461f      	mov	r7, r3
 8015382:	260a      	movs	r6, #10
 8015384:	fb91 f5f6 	sdiv	r5, r1, r6
 8015388:	fb06 1115 	mls	r1, r6, r5, r1
 801538c:	3130      	adds	r1, #48	; 0x30
 801538e:	2d09      	cmp	r5, #9
 8015390:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015394:	f103 32ff 	add.w	r2, r3, #4294967295
 8015398:	4629      	mov	r1, r5
 801539a:	dc09      	bgt.n	80153b0 <__exponent+0x4c>
 801539c:	3130      	adds	r1, #48	; 0x30
 801539e:	3b02      	subs	r3, #2
 80153a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80153a4:	42bb      	cmp	r3, r7
 80153a6:	4622      	mov	r2, r4
 80153a8:	d304      	bcc.n	80153b4 <__exponent+0x50>
 80153aa:	1a10      	subs	r0, r2, r0
 80153ac:	b003      	add	sp, #12
 80153ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153b0:	4613      	mov	r3, r2
 80153b2:	e7e7      	b.n	8015384 <__exponent+0x20>
 80153b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153b8:	f804 2b01 	strb.w	r2, [r4], #1
 80153bc:	e7f2      	b.n	80153a4 <__exponent+0x40>
 80153be:	2330      	movs	r3, #48	; 0x30
 80153c0:	4419      	add	r1, r3
 80153c2:	7083      	strb	r3, [r0, #2]
 80153c4:	1d02      	adds	r2, r0, #4
 80153c6:	70c1      	strb	r1, [r0, #3]
 80153c8:	e7ef      	b.n	80153aa <__exponent+0x46>
	...

080153cc <_printf_float>:
 80153cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153d0:	b08d      	sub	sp, #52	; 0x34
 80153d2:	460c      	mov	r4, r1
 80153d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80153d8:	4616      	mov	r6, r2
 80153da:	461f      	mov	r7, r3
 80153dc:	4605      	mov	r5, r0
 80153de:	f003 f9a5 	bl	801872c <_localeconv_r>
 80153e2:	6803      	ldr	r3, [r0, #0]
 80153e4:	9304      	str	r3, [sp, #16]
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7f2 fe2a 	bl	8008040 <strlen>
 80153ec:	2300      	movs	r3, #0
 80153ee:	930a      	str	r3, [sp, #40]	; 0x28
 80153f0:	f8d8 3000 	ldr.w	r3, [r8]
 80153f4:	9005      	str	r0, [sp, #20]
 80153f6:	3307      	adds	r3, #7
 80153f8:	f023 0307 	bic.w	r3, r3, #7
 80153fc:	f103 0208 	add.w	r2, r3, #8
 8015400:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015404:	f8d4 b000 	ldr.w	fp, [r4]
 8015408:	f8c8 2000 	str.w	r2, [r8]
 801540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015410:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015414:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015418:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801541c:	9307      	str	r3, [sp, #28]
 801541e:	f8cd 8018 	str.w	r8, [sp, #24]
 8015422:	f04f 32ff 	mov.w	r2, #4294967295
 8015426:	4ba7      	ldr	r3, [pc, #668]	; (80156c4 <_printf_float+0x2f8>)
 8015428:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801542c:	f7f3 fab6 	bl	800899c <__aeabi_dcmpun>
 8015430:	bb70      	cbnz	r0, 8015490 <_printf_float+0xc4>
 8015432:	f04f 32ff 	mov.w	r2, #4294967295
 8015436:	4ba3      	ldr	r3, [pc, #652]	; (80156c4 <_printf_float+0x2f8>)
 8015438:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801543c:	f7f3 fa90 	bl	8008960 <__aeabi_dcmple>
 8015440:	bb30      	cbnz	r0, 8015490 <_printf_float+0xc4>
 8015442:	2200      	movs	r2, #0
 8015444:	2300      	movs	r3, #0
 8015446:	4640      	mov	r0, r8
 8015448:	4649      	mov	r1, r9
 801544a:	f7f3 fa7f 	bl	800894c <__aeabi_dcmplt>
 801544e:	b110      	cbz	r0, 8015456 <_printf_float+0x8a>
 8015450:	232d      	movs	r3, #45	; 0x2d
 8015452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015456:	4a9c      	ldr	r2, [pc, #624]	; (80156c8 <_printf_float+0x2fc>)
 8015458:	4b9c      	ldr	r3, [pc, #624]	; (80156cc <_printf_float+0x300>)
 801545a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801545e:	bf8c      	ite	hi
 8015460:	4690      	movhi	r8, r2
 8015462:	4698      	movls	r8, r3
 8015464:	2303      	movs	r3, #3
 8015466:	f02b 0204 	bic.w	r2, fp, #4
 801546a:	6123      	str	r3, [r4, #16]
 801546c:	6022      	str	r2, [r4, #0]
 801546e:	f04f 0900 	mov.w	r9, #0
 8015472:	9700      	str	r7, [sp, #0]
 8015474:	4633      	mov	r3, r6
 8015476:	aa0b      	add	r2, sp, #44	; 0x2c
 8015478:	4621      	mov	r1, r4
 801547a:	4628      	mov	r0, r5
 801547c:	f000 f9e6 	bl	801584c <_printf_common>
 8015480:	3001      	adds	r0, #1
 8015482:	f040 808d 	bne.w	80155a0 <_printf_float+0x1d4>
 8015486:	f04f 30ff 	mov.w	r0, #4294967295
 801548a:	b00d      	add	sp, #52	; 0x34
 801548c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015490:	4642      	mov	r2, r8
 8015492:	464b      	mov	r3, r9
 8015494:	4640      	mov	r0, r8
 8015496:	4649      	mov	r1, r9
 8015498:	f7f3 fa80 	bl	800899c <__aeabi_dcmpun>
 801549c:	b110      	cbz	r0, 80154a4 <_printf_float+0xd8>
 801549e:	4a8c      	ldr	r2, [pc, #560]	; (80156d0 <_printf_float+0x304>)
 80154a0:	4b8c      	ldr	r3, [pc, #560]	; (80156d4 <_printf_float+0x308>)
 80154a2:	e7da      	b.n	801545a <_printf_float+0x8e>
 80154a4:	6861      	ldr	r1, [r4, #4]
 80154a6:	1c4b      	adds	r3, r1, #1
 80154a8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80154ac:	a80a      	add	r0, sp, #40	; 0x28
 80154ae:	d13e      	bne.n	801552e <_printf_float+0x162>
 80154b0:	2306      	movs	r3, #6
 80154b2:	6063      	str	r3, [r4, #4]
 80154b4:	2300      	movs	r3, #0
 80154b6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80154ba:	ab09      	add	r3, sp, #36	; 0x24
 80154bc:	9300      	str	r3, [sp, #0]
 80154be:	ec49 8b10 	vmov	d0, r8, r9
 80154c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80154c6:	6022      	str	r2, [r4, #0]
 80154c8:	f8cd a004 	str.w	sl, [sp, #4]
 80154cc:	6861      	ldr	r1, [r4, #4]
 80154ce:	4628      	mov	r0, r5
 80154d0:	f7ff fee7 	bl	80152a2 <__cvt>
 80154d4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80154d8:	2b47      	cmp	r3, #71	; 0x47
 80154da:	4680      	mov	r8, r0
 80154dc:	d109      	bne.n	80154f2 <_printf_float+0x126>
 80154de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154e0:	1cd8      	adds	r0, r3, #3
 80154e2:	db02      	blt.n	80154ea <_printf_float+0x11e>
 80154e4:	6862      	ldr	r2, [r4, #4]
 80154e6:	4293      	cmp	r3, r2
 80154e8:	dd47      	ble.n	801557a <_printf_float+0x1ae>
 80154ea:	f1aa 0a02 	sub.w	sl, sl, #2
 80154ee:	fa5f fa8a 	uxtb.w	sl, sl
 80154f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80154f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80154f8:	d824      	bhi.n	8015544 <_printf_float+0x178>
 80154fa:	3901      	subs	r1, #1
 80154fc:	4652      	mov	r2, sl
 80154fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015502:	9109      	str	r1, [sp, #36]	; 0x24
 8015504:	f7ff ff2e 	bl	8015364 <__exponent>
 8015508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801550a:	1813      	adds	r3, r2, r0
 801550c:	2a01      	cmp	r2, #1
 801550e:	4681      	mov	r9, r0
 8015510:	6123      	str	r3, [r4, #16]
 8015512:	dc02      	bgt.n	801551a <_printf_float+0x14e>
 8015514:	6822      	ldr	r2, [r4, #0]
 8015516:	07d1      	lsls	r1, r2, #31
 8015518:	d501      	bpl.n	801551e <_printf_float+0x152>
 801551a:	3301      	adds	r3, #1
 801551c:	6123      	str	r3, [r4, #16]
 801551e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015522:	2b00      	cmp	r3, #0
 8015524:	d0a5      	beq.n	8015472 <_printf_float+0xa6>
 8015526:	232d      	movs	r3, #45	; 0x2d
 8015528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801552c:	e7a1      	b.n	8015472 <_printf_float+0xa6>
 801552e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015532:	f000 8177 	beq.w	8015824 <_printf_float+0x458>
 8015536:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801553a:	d1bb      	bne.n	80154b4 <_printf_float+0xe8>
 801553c:	2900      	cmp	r1, #0
 801553e:	d1b9      	bne.n	80154b4 <_printf_float+0xe8>
 8015540:	2301      	movs	r3, #1
 8015542:	e7b6      	b.n	80154b2 <_printf_float+0xe6>
 8015544:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015548:	d119      	bne.n	801557e <_printf_float+0x1b2>
 801554a:	2900      	cmp	r1, #0
 801554c:	6863      	ldr	r3, [r4, #4]
 801554e:	dd0c      	ble.n	801556a <_printf_float+0x19e>
 8015550:	6121      	str	r1, [r4, #16]
 8015552:	b913      	cbnz	r3, 801555a <_printf_float+0x18e>
 8015554:	6822      	ldr	r2, [r4, #0]
 8015556:	07d2      	lsls	r2, r2, #31
 8015558:	d502      	bpl.n	8015560 <_printf_float+0x194>
 801555a:	3301      	adds	r3, #1
 801555c:	440b      	add	r3, r1
 801555e:	6123      	str	r3, [r4, #16]
 8015560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015562:	65a3      	str	r3, [r4, #88]	; 0x58
 8015564:	f04f 0900 	mov.w	r9, #0
 8015568:	e7d9      	b.n	801551e <_printf_float+0x152>
 801556a:	b913      	cbnz	r3, 8015572 <_printf_float+0x1a6>
 801556c:	6822      	ldr	r2, [r4, #0]
 801556e:	07d0      	lsls	r0, r2, #31
 8015570:	d501      	bpl.n	8015576 <_printf_float+0x1aa>
 8015572:	3302      	adds	r3, #2
 8015574:	e7f3      	b.n	801555e <_printf_float+0x192>
 8015576:	2301      	movs	r3, #1
 8015578:	e7f1      	b.n	801555e <_printf_float+0x192>
 801557a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801557e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015582:	4293      	cmp	r3, r2
 8015584:	db05      	blt.n	8015592 <_printf_float+0x1c6>
 8015586:	6822      	ldr	r2, [r4, #0]
 8015588:	6123      	str	r3, [r4, #16]
 801558a:	07d1      	lsls	r1, r2, #31
 801558c:	d5e8      	bpl.n	8015560 <_printf_float+0x194>
 801558e:	3301      	adds	r3, #1
 8015590:	e7e5      	b.n	801555e <_printf_float+0x192>
 8015592:	2b00      	cmp	r3, #0
 8015594:	bfd4      	ite	le
 8015596:	f1c3 0302 	rsble	r3, r3, #2
 801559a:	2301      	movgt	r3, #1
 801559c:	4413      	add	r3, r2
 801559e:	e7de      	b.n	801555e <_printf_float+0x192>
 80155a0:	6823      	ldr	r3, [r4, #0]
 80155a2:	055a      	lsls	r2, r3, #21
 80155a4:	d407      	bmi.n	80155b6 <_printf_float+0x1ea>
 80155a6:	6923      	ldr	r3, [r4, #16]
 80155a8:	4642      	mov	r2, r8
 80155aa:	4631      	mov	r1, r6
 80155ac:	4628      	mov	r0, r5
 80155ae:	47b8      	blx	r7
 80155b0:	3001      	adds	r0, #1
 80155b2:	d12b      	bne.n	801560c <_printf_float+0x240>
 80155b4:	e767      	b.n	8015486 <_printf_float+0xba>
 80155b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80155ba:	f240 80dc 	bls.w	8015776 <_printf_float+0x3aa>
 80155be:	2200      	movs	r2, #0
 80155c0:	2300      	movs	r3, #0
 80155c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80155c6:	f7f3 f9b7 	bl	8008938 <__aeabi_dcmpeq>
 80155ca:	2800      	cmp	r0, #0
 80155cc:	d033      	beq.n	8015636 <_printf_float+0x26a>
 80155ce:	2301      	movs	r3, #1
 80155d0:	4a41      	ldr	r2, [pc, #260]	; (80156d8 <_printf_float+0x30c>)
 80155d2:	4631      	mov	r1, r6
 80155d4:	4628      	mov	r0, r5
 80155d6:	47b8      	blx	r7
 80155d8:	3001      	adds	r0, #1
 80155da:	f43f af54 	beq.w	8015486 <_printf_float+0xba>
 80155de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80155e2:	429a      	cmp	r2, r3
 80155e4:	db02      	blt.n	80155ec <_printf_float+0x220>
 80155e6:	6823      	ldr	r3, [r4, #0]
 80155e8:	07d8      	lsls	r0, r3, #31
 80155ea:	d50f      	bpl.n	801560c <_printf_float+0x240>
 80155ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80155f0:	4631      	mov	r1, r6
 80155f2:	4628      	mov	r0, r5
 80155f4:	47b8      	blx	r7
 80155f6:	3001      	adds	r0, #1
 80155f8:	f43f af45 	beq.w	8015486 <_printf_float+0xba>
 80155fc:	f04f 0800 	mov.w	r8, #0
 8015600:	f104 091a 	add.w	r9, r4, #26
 8015604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015606:	3b01      	subs	r3, #1
 8015608:	4543      	cmp	r3, r8
 801560a:	dc09      	bgt.n	8015620 <_printf_float+0x254>
 801560c:	6823      	ldr	r3, [r4, #0]
 801560e:	079b      	lsls	r3, r3, #30
 8015610:	f100 8103 	bmi.w	801581a <_printf_float+0x44e>
 8015614:	68e0      	ldr	r0, [r4, #12]
 8015616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015618:	4298      	cmp	r0, r3
 801561a:	bfb8      	it	lt
 801561c:	4618      	movlt	r0, r3
 801561e:	e734      	b.n	801548a <_printf_float+0xbe>
 8015620:	2301      	movs	r3, #1
 8015622:	464a      	mov	r2, r9
 8015624:	4631      	mov	r1, r6
 8015626:	4628      	mov	r0, r5
 8015628:	47b8      	blx	r7
 801562a:	3001      	adds	r0, #1
 801562c:	f43f af2b 	beq.w	8015486 <_printf_float+0xba>
 8015630:	f108 0801 	add.w	r8, r8, #1
 8015634:	e7e6      	b.n	8015604 <_printf_float+0x238>
 8015636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015638:	2b00      	cmp	r3, #0
 801563a:	dc2b      	bgt.n	8015694 <_printf_float+0x2c8>
 801563c:	2301      	movs	r3, #1
 801563e:	4a26      	ldr	r2, [pc, #152]	; (80156d8 <_printf_float+0x30c>)
 8015640:	4631      	mov	r1, r6
 8015642:	4628      	mov	r0, r5
 8015644:	47b8      	blx	r7
 8015646:	3001      	adds	r0, #1
 8015648:	f43f af1d 	beq.w	8015486 <_printf_float+0xba>
 801564c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801564e:	b923      	cbnz	r3, 801565a <_printf_float+0x28e>
 8015650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015652:	b913      	cbnz	r3, 801565a <_printf_float+0x28e>
 8015654:	6823      	ldr	r3, [r4, #0]
 8015656:	07d9      	lsls	r1, r3, #31
 8015658:	d5d8      	bpl.n	801560c <_printf_float+0x240>
 801565a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801565e:	4631      	mov	r1, r6
 8015660:	4628      	mov	r0, r5
 8015662:	47b8      	blx	r7
 8015664:	3001      	adds	r0, #1
 8015666:	f43f af0e 	beq.w	8015486 <_printf_float+0xba>
 801566a:	f04f 0900 	mov.w	r9, #0
 801566e:	f104 0a1a 	add.w	sl, r4, #26
 8015672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015674:	425b      	negs	r3, r3
 8015676:	454b      	cmp	r3, r9
 8015678:	dc01      	bgt.n	801567e <_printf_float+0x2b2>
 801567a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801567c:	e794      	b.n	80155a8 <_printf_float+0x1dc>
 801567e:	2301      	movs	r3, #1
 8015680:	4652      	mov	r2, sl
 8015682:	4631      	mov	r1, r6
 8015684:	4628      	mov	r0, r5
 8015686:	47b8      	blx	r7
 8015688:	3001      	adds	r0, #1
 801568a:	f43f aefc 	beq.w	8015486 <_printf_float+0xba>
 801568e:	f109 0901 	add.w	r9, r9, #1
 8015692:	e7ee      	b.n	8015672 <_printf_float+0x2a6>
 8015694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015696:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015698:	429a      	cmp	r2, r3
 801569a:	bfa8      	it	ge
 801569c:	461a      	movge	r2, r3
 801569e:	2a00      	cmp	r2, #0
 80156a0:	4691      	mov	r9, r2
 80156a2:	dd07      	ble.n	80156b4 <_printf_float+0x2e8>
 80156a4:	4613      	mov	r3, r2
 80156a6:	4631      	mov	r1, r6
 80156a8:	4642      	mov	r2, r8
 80156aa:	4628      	mov	r0, r5
 80156ac:	47b8      	blx	r7
 80156ae:	3001      	adds	r0, #1
 80156b0:	f43f aee9 	beq.w	8015486 <_printf_float+0xba>
 80156b4:	f104 031a 	add.w	r3, r4, #26
 80156b8:	f04f 0b00 	mov.w	fp, #0
 80156bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80156c0:	9306      	str	r3, [sp, #24]
 80156c2:	e015      	b.n	80156f0 <_printf_float+0x324>
 80156c4:	7fefffff 	.word	0x7fefffff
 80156c8:	0801a5f0 	.word	0x0801a5f0
 80156cc:	0801a5ec 	.word	0x0801a5ec
 80156d0:	0801a5f8 	.word	0x0801a5f8
 80156d4:	0801a5f4 	.word	0x0801a5f4
 80156d8:	0801a81b 	.word	0x0801a81b
 80156dc:	2301      	movs	r3, #1
 80156de:	9a06      	ldr	r2, [sp, #24]
 80156e0:	4631      	mov	r1, r6
 80156e2:	4628      	mov	r0, r5
 80156e4:	47b8      	blx	r7
 80156e6:	3001      	adds	r0, #1
 80156e8:	f43f aecd 	beq.w	8015486 <_printf_float+0xba>
 80156ec:	f10b 0b01 	add.w	fp, fp, #1
 80156f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80156f4:	ebaa 0309 	sub.w	r3, sl, r9
 80156f8:	455b      	cmp	r3, fp
 80156fa:	dcef      	bgt.n	80156dc <_printf_float+0x310>
 80156fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015700:	429a      	cmp	r2, r3
 8015702:	44d0      	add	r8, sl
 8015704:	db15      	blt.n	8015732 <_printf_float+0x366>
 8015706:	6823      	ldr	r3, [r4, #0]
 8015708:	07da      	lsls	r2, r3, #31
 801570a:	d412      	bmi.n	8015732 <_printf_float+0x366>
 801570c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801570e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015710:	eba3 020a 	sub.w	r2, r3, sl
 8015714:	eba3 0a01 	sub.w	sl, r3, r1
 8015718:	4592      	cmp	sl, r2
 801571a:	bfa8      	it	ge
 801571c:	4692      	movge	sl, r2
 801571e:	f1ba 0f00 	cmp.w	sl, #0
 8015722:	dc0e      	bgt.n	8015742 <_printf_float+0x376>
 8015724:	f04f 0800 	mov.w	r8, #0
 8015728:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801572c:	f104 091a 	add.w	r9, r4, #26
 8015730:	e019      	b.n	8015766 <_printf_float+0x39a>
 8015732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015736:	4631      	mov	r1, r6
 8015738:	4628      	mov	r0, r5
 801573a:	47b8      	blx	r7
 801573c:	3001      	adds	r0, #1
 801573e:	d1e5      	bne.n	801570c <_printf_float+0x340>
 8015740:	e6a1      	b.n	8015486 <_printf_float+0xba>
 8015742:	4653      	mov	r3, sl
 8015744:	4642      	mov	r2, r8
 8015746:	4631      	mov	r1, r6
 8015748:	4628      	mov	r0, r5
 801574a:	47b8      	blx	r7
 801574c:	3001      	adds	r0, #1
 801574e:	d1e9      	bne.n	8015724 <_printf_float+0x358>
 8015750:	e699      	b.n	8015486 <_printf_float+0xba>
 8015752:	2301      	movs	r3, #1
 8015754:	464a      	mov	r2, r9
 8015756:	4631      	mov	r1, r6
 8015758:	4628      	mov	r0, r5
 801575a:	47b8      	blx	r7
 801575c:	3001      	adds	r0, #1
 801575e:	f43f ae92 	beq.w	8015486 <_printf_float+0xba>
 8015762:	f108 0801 	add.w	r8, r8, #1
 8015766:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801576a:	1a9b      	subs	r3, r3, r2
 801576c:	eba3 030a 	sub.w	r3, r3, sl
 8015770:	4543      	cmp	r3, r8
 8015772:	dcee      	bgt.n	8015752 <_printf_float+0x386>
 8015774:	e74a      	b.n	801560c <_printf_float+0x240>
 8015776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015778:	2a01      	cmp	r2, #1
 801577a:	dc01      	bgt.n	8015780 <_printf_float+0x3b4>
 801577c:	07db      	lsls	r3, r3, #31
 801577e:	d53a      	bpl.n	80157f6 <_printf_float+0x42a>
 8015780:	2301      	movs	r3, #1
 8015782:	4642      	mov	r2, r8
 8015784:	4631      	mov	r1, r6
 8015786:	4628      	mov	r0, r5
 8015788:	47b8      	blx	r7
 801578a:	3001      	adds	r0, #1
 801578c:	f43f ae7b 	beq.w	8015486 <_printf_float+0xba>
 8015790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015794:	4631      	mov	r1, r6
 8015796:	4628      	mov	r0, r5
 8015798:	47b8      	blx	r7
 801579a:	3001      	adds	r0, #1
 801579c:	f108 0801 	add.w	r8, r8, #1
 80157a0:	f43f ae71 	beq.w	8015486 <_printf_float+0xba>
 80157a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157a6:	2200      	movs	r2, #0
 80157a8:	f103 3aff 	add.w	sl, r3, #4294967295
 80157ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80157b0:	2300      	movs	r3, #0
 80157b2:	f7f3 f8c1 	bl	8008938 <__aeabi_dcmpeq>
 80157b6:	b9c8      	cbnz	r0, 80157ec <_printf_float+0x420>
 80157b8:	4653      	mov	r3, sl
 80157ba:	4642      	mov	r2, r8
 80157bc:	4631      	mov	r1, r6
 80157be:	4628      	mov	r0, r5
 80157c0:	47b8      	blx	r7
 80157c2:	3001      	adds	r0, #1
 80157c4:	d10e      	bne.n	80157e4 <_printf_float+0x418>
 80157c6:	e65e      	b.n	8015486 <_printf_float+0xba>
 80157c8:	2301      	movs	r3, #1
 80157ca:	4652      	mov	r2, sl
 80157cc:	4631      	mov	r1, r6
 80157ce:	4628      	mov	r0, r5
 80157d0:	47b8      	blx	r7
 80157d2:	3001      	adds	r0, #1
 80157d4:	f43f ae57 	beq.w	8015486 <_printf_float+0xba>
 80157d8:	f108 0801 	add.w	r8, r8, #1
 80157dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157de:	3b01      	subs	r3, #1
 80157e0:	4543      	cmp	r3, r8
 80157e2:	dcf1      	bgt.n	80157c8 <_printf_float+0x3fc>
 80157e4:	464b      	mov	r3, r9
 80157e6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80157ea:	e6de      	b.n	80155aa <_printf_float+0x1de>
 80157ec:	f04f 0800 	mov.w	r8, #0
 80157f0:	f104 0a1a 	add.w	sl, r4, #26
 80157f4:	e7f2      	b.n	80157dc <_printf_float+0x410>
 80157f6:	2301      	movs	r3, #1
 80157f8:	e7df      	b.n	80157ba <_printf_float+0x3ee>
 80157fa:	2301      	movs	r3, #1
 80157fc:	464a      	mov	r2, r9
 80157fe:	4631      	mov	r1, r6
 8015800:	4628      	mov	r0, r5
 8015802:	47b8      	blx	r7
 8015804:	3001      	adds	r0, #1
 8015806:	f43f ae3e 	beq.w	8015486 <_printf_float+0xba>
 801580a:	f108 0801 	add.w	r8, r8, #1
 801580e:	68e3      	ldr	r3, [r4, #12]
 8015810:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015812:	1a9b      	subs	r3, r3, r2
 8015814:	4543      	cmp	r3, r8
 8015816:	dcf0      	bgt.n	80157fa <_printf_float+0x42e>
 8015818:	e6fc      	b.n	8015614 <_printf_float+0x248>
 801581a:	f04f 0800 	mov.w	r8, #0
 801581e:	f104 0919 	add.w	r9, r4, #25
 8015822:	e7f4      	b.n	801580e <_printf_float+0x442>
 8015824:	2900      	cmp	r1, #0
 8015826:	f43f ae8b 	beq.w	8015540 <_printf_float+0x174>
 801582a:	2300      	movs	r3, #0
 801582c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015830:	ab09      	add	r3, sp, #36	; 0x24
 8015832:	9300      	str	r3, [sp, #0]
 8015834:	ec49 8b10 	vmov	d0, r8, r9
 8015838:	6022      	str	r2, [r4, #0]
 801583a:	f8cd a004 	str.w	sl, [sp, #4]
 801583e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015842:	4628      	mov	r0, r5
 8015844:	f7ff fd2d 	bl	80152a2 <__cvt>
 8015848:	4680      	mov	r8, r0
 801584a:	e648      	b.n	80154de <_printf_float+0x112>

0801584c <_printf_common>:
 801584c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015850:	4691      	mov	r9, r2
 8015852:	461f      	mov	r7, r3
 8015854:	688a      	ldr	r2, [r1, #8]
 8015856:	690b      	ldr	r3, [r1, #16]
 8015858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801585c:	4293      	cmp	r3, r2
 801585e:	bfb8      	it	lt
 8015860:	4613      	movlt	r3, r2
 8015862:	f8c9 3000 	str.w	r3, [r9]
 8015866:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801586a:	4606      	mov	r6, r0
 801586c:	460c      	mov	r4, r1
 801586e:	b112      	cbz	r2, 8015876 <_printf_common+0x2a>
 8015870:	3301      	adds	r3, #1
 8015872:	f8c9 3000 	str.w	r3, [r9]
 8015876:	6823      	ldr	r3, [r4, #0]
 8015878:	0699      	lsls	r1, r3, #26
 801587a:	bf42      	ittt	mi
 801587c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015880:	3302      	addmi	r3, #2
 8015882:	f8c9 3000 	strmi.w	r3, [r9]
 8015886:	6825      	ldr	r5, [r4, #0]
 8015888:	f015 0506 	ands.w	r5, r5, #6
 801588c:	d107      	bne.n	801589e <_printf_common+0x52>
 801588e:	f104 0a19 	add.w	sl, r4, #25
 8015892:	68e3      	ldr	r3, [r4, #12]
 8015894:	f8d9 2000 	ldr.w	r2, [r9]
 8015898:	1a9b      	subs	r3, r3, r2
 801589a:	42ab      	cmp	r3, r5
 801589c:	dc28      	bgt.n	80158f0 <_printf_common+0xa4>
 801589e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80158a2:	6822      	ldr	r2, [r4, #0]
 80158a4:	3300      	adds	r3, #0
 80158a6:	bf18      	it	ne
 80158a8:	2301      	movne	r3, #1
 80158aa:	0692      	lsls	r2, r2, #26
 80158ac:	d42d      	bmi.n	801590a <_printf_common+0xbe>
 80158ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80158b2:	4639      	mov	r1, r7
 80158b4:	4630      	mov	r0, r6
 80158b6:	47c0      	blx	r8
 80158b8:	3001      	adds	r0, #1
 80158ba:	d020      	beq.n	80158fe <_printf_common+0xb2>
 80158bc:	6823      	ldr	r3, [r4, #0]
 80158be:	68e5      	ldr	r5, [r4, #12]
 80158c0:	f8d9 2000 	ldr.w	r2, [r9]
 80158c4:	f003 0306 	and.w	r3, r3, #6
 80158c8:	2b04      	cmp	r3, #4
 80158ca:	bf08      	it	eq
 80158cc:	1aad      	subeq	r5, r5, r2
 80158ce:	68a3      	ldr	r3, [r4, #8]
 80158d0:	6922      	ldr	r2, [r4, #16]
 80158d2:	bf0c      	ite	eq
 80158d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80158d8:	2500      	movne	r5, #0
 80158da:	4293      	cmp	r3, r2
 80158dc:	bfc4      	itt	gt
 80158de:	1a9b      	subgt	r3, r3, r2
 80158e0:	18ed      	addgt	r5, r5, r3
 80158e2:	f04f 0900 	mov.w	r9, #0
 80158e6:	341a      	adds	r4, #26
 80158e8:	454d      	cmp	r5, r9
 80158ea:	d11a      	bne.n	8015922 <_printf_common+0xd6>
 80158ec:	2000      	movs	r0, #0
 80158ee:	e008      	b.n	8015902 <_printf_common+0xb6>
 80158f0:	2301      	movs	r3, #1
 80158f2:	4652      	mov	r2, sl
 80158f4:	4639      	mov	r1, r7
 80158f6:	4630      	mov	r0, r6
 80158f8:	47c0      	blx	r8
 80158fa:	3001      	adds	r0, #1
 80158fc:	d103      	bne.n	8015906 <_printf_common+0xba>
 80158fe:	f04f 30ff 	mov.w	r0, #4294967295
 8015902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015906:	3501      	adds	r5, #1
 8015908:	e7c3      	b.n	8015892 <_printf_common+0x46>
 801590a:	18e1      	adds	r1, r4, r3
 801590c:	1c5a      	adds	r2, r3, #1
 801590e:	2030      	movs	r0, #48	; 0x30
 8015910:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015914:	4422      	add	r2, r4
 8015916:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801591a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801591e:	3302      	adds	r3, #2
 8015920:	e7c5      	b.n	80158ae <_printf_common+0x62>
 8015922:	2301      	movs	r3, #1
 8015924:	4622      	mov	r2, r4
 8015926:	4639      	mov	r1, r7
 8015928:	4630      	mov	r0, r6
 801592a:	47c0      	blx	r8
 801592c:	3001      	adds	r0, #1
 801592e:	d0e6      	beq.n	80158fe <_printf_common+0xb2>
 8015930:	f109 0901 	add.w	r9, r9, #1
 8015934:	e7d8      	b.n	80158e8 <_printf_common+0x9c>
	...

08015938 <_printf_i>:
 8015938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801593c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015940:	460c      	mov	r4, r1
 8015942:	7e09      	ldrb	r1, [r1, #24]
 8015944:	b085      	sub	sp, #20
 8015946:	296e      	cmp	r1, #110	; 0x6e
 8015948:	4617      	mov	r7, r2
 801594a:	4606      	mov	r6, r0
 801594c:	4698      	mov	r8, r3
 801594e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015950:	f000 80b3 	beq.w	8015aba <_printf_i+0x182>
 8015954:	d822      	bhi.n	801599c <_printf_i+0x64>
 8015956:	2963      	cmp	r1, #99	; 0x63
 8015958:	d036      	beq.n	80159c8 <_printf_i+0x90>
 801595a:	d80a      	bhi.n	8015972 <_printf_i+0x3a>
 801595c:	2900      	cmp	r1, #0
 801595e:	f000 80b9 	beq.w	8015ad4 <_printf_i+0x19c>
 8015962:	2958      	cmp	r1, #88	; 0x58
 8015964:	f000 8083 	beq.w	8015a6e <_printf_i+0x136>
 8015968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801596c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015970:	e032      	b.n	80159d8 <_printf_i+0xa0>
 8015972:	2964      	cmp	r1, #100	; 0x64
 8015974:	d001      	beq.n	801597a <_printf_i+0x42>
 8015976:	2969      	cmp	r1, #105	; 0x69
 8015978:	d1f6      	bne.n	8015968 <_printf_i+0x30>
 801597a:	6820      	ldr	r0, [r4, #0]
 801597c:	6813      	ldr	r3, [r2, #0]
 801597e:	0605      	lsls	r5, r0, #24
 8015980:	f103 0104 	add.w	r1, r3, #4
 8015984:	d52a      	bpl.n	80159dc <_printf_i+0xa4>
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	6011      	str	r1, [r2, #0]
 801598a:	2b00      	cmp	r3, #0
 801598c:	da03      	bge.n	8015996 <_printf_i+0x5e>
 801598e:	222d      	movs	r2, #45	; 0x2d
 8015990:	425b      	negs	r3, r3
 8015992:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015996:	486f      	ldr	r0, [pc, #444]	; (8015b54 <_printf_i+0x21c>)
 8015998:	220a      	movs	r2, #10
 801599a:	e039      	b.n	8015a10 <_printf_i+0xd8>
 801599c:	2973      	cmp	r1, #115	; 0x73
 801599e:	f000 809d 	beq.w	8015adc <_printf_i+0x1a4>
 80159a2:	d808      	bhi.n	80159b6 <_printf_i+0x7e>
 80159a4:	296f      	cmp	r1, #111	; 0x6f
 80159a6:	d020      	beq.n	80159ea <_printf_i+0xb2>
 80159a8:	2970      	cmp	r1, #112	; 0x70
 80159aa:	d1dd      	bne.n	8015968 <_printf_i+0x30>
 80159ac:	6823      	ldr	r3, [r4, #0]
 80159ae:	f043 0320 	orr.w	r3, r3, #32
 80159b2:	6023      	str	r3, [r4, #0]
 80159b4:	e003      	b.n	80159be <_printf_i+0x86>
 80159b6:	2975      	cmp	r1, #117	; 0x75
 80159b8:	d017      	beq.n	80159ea <_printf_i+0xb2>
 80159ba:	2978      	cmp	r1, #120	; 0x78
 80159bc:	d1d4      	bne.n	8015968 <_printf_i+0x30>
 80159be:	2378      	movs	r3, #120	; 0x78
 80159c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80159c4:	4864      	ldr	r0, [pc, #400]	; (8015b58 <_printf_i+0x220>)
 80159c6:	e055      	b.n	8015a74 <_printf_i+0x13c>
 80159c8:	6813      	ldr	r3, [r2, #0]
 80159ca:	1d19      	adds	r1, r3, #4
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	6011      	str	r1, [r2, #0]
 80159d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80159d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80159d8:	2301      	movs	r3, #1
 80159da:	e08c      	b.n	8015af6 <_printf_i+0x1be>
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	6011      	str	r1, [r2, #0]
 80159e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80159e4:	bf18      	it	ne
 80159e6:	b21b      	sxthne	r3, r3
 80159e8:	e7cf      	b.n	801598a <_printf_i+0x52>
 80159ea:	6813      	ldr	r3, [r2, #0]
 80159ec:	6825      	ldr	r5, [r4, #0]
 80159ee:	1d18      	adds	r0, r3, #4
 80159f0:	6010      	str	r0, [r2, #0]
 80159f2:	0628      	lsls	r0, r5, #24
 80159f4:	d501      	bpl.n	80159fa <_printf_i+0xc2>
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	e002      	b.n	8015a00 <_printf_i+0xc8>
 80159fa:	0668      	lsls	r0, r5, #25
 80159fc:	d5fb      	bpl.n	80159f6 <_printf_i+0xbe>
 80159fe:	881b      	ldrh	r3, [r3, #0]
 8015a00:	4854      	ldr	r0, [pc, #336]	; (8015b54 <_printf_i+0x21c>)
 8015a02:	296f      	cmp	r1, #111	; 0x6f
 8015a04:	bf14      	ite	ne
 8015a06:	220a      	movne	r2, #10
 8015a08:	2208      	moveq	r2, #8
 8015a0a:	2100      	movs	r1, #0
 8015a0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015a10:	6865      	ldr	r5, [r4, #4]
 8015a12:	60a5      	str	r5, [r4, #8]
 8015a14:	2d00      	cmp	r5, #0
 8015a16:	f2c0 8095 	blt.w	8015b44 <_printf_i+0x20c>
 8015a1a:	6821      	ldr	r1, [r4, #0]
 8015a1c:	f021 0104 	bic.w	r1, r1, #4
 8015a20:	6021      	str	r1, [r4, #0]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d13d      	bne.n	8015aa2 <_printf_i+0x16a>
 8015a26:	2d00      	cmp	r5, #0
 8015a28:	f040 808e 	bne.w	8015b48 <_printf_i+0x210>
 8015a2c:	4665      	mov	r5, ip
 8015a2e:	2a08      	cmp	r2, #8
 8015a30:	d10b      	bne.n	8015a4a <_printf_i+0x112>
 8015a32:	6823      	ldr	r3, [r4, #0]
 8015a34:	07db      	lsls	r3, r3, #31
 8015a36:	d508      	bpl.n	8015a4a <_printf_i+0x112>
 8015a38:	6923      	ldr	r3, [r4, #16]
 8015a3a:	6862      	ldr	r2, [r4, #4]
 8015a3c:	429a      	cmp	r2, r3
 8015a3e:	bfde      	ittt	le
 8015a40:	2330      	movle	r3, #48	; 0x30
 8015a42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015a46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015a4a:	ebac 0305 	sub.w	r3, ip, r5
 8015a4e:	6123      	str	r3, [r4, #16]
 8015a50:	f8cd 8000 	str.w	r8, [sp]
 8015a54:	463b      	mov	r3, r7
 8015a56:	aa03      	add	r2, sp, #12
 8015a58:	4621      	mov	r1, r4
 8015a5a:	4630      	mov	r0, r6
 8015a5c:	f7ff fef6 	bl	801584c <_printf_common>
 8015a60:	3001      	adds	r0, #1
 8015a62:	d14d      	bne.n	8015b00 <_printf_i+0x1c8>
 8015a64:	f04f 30ff 	mov.w	r0, #4294967295
 8015a68:	b005      	add	sp, #20
 8015a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a6e:	4839      	ldr	r0, [pc, #228]	; (8015b54 <_printf_i+0x21c>)
 8015a70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015a74:	6813      	ldr	r3, [r2, #0]
 8015a76:	6821      	ldr	r1, [r4, #0]
 8015a78:	1d1d      	adds	r5, r3, #4
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	6015      	str	r5, [r2, #0]
 8015a7e:	060a      	lsls	r2, r1, #24
 8015a80:	d50b      	bpl.n	8015a9a <_printf_i+0x162>
 8015a82:	07ca      	lsls	r2, r1, #31
 8015a84:	bf44      	itt	mi
 8015a86:	f041 0120 	orrmi.w	r1, r1, #32
 8015a8a:	6021      	strmi	r1, [r4, #0]
 8015a8c:	b91b      	cbnz	r3, 8015a96 <_printf_i+0x15e>
 8015a8e:	6822      	ldr	r2, [r4, #0]
 8015a90:	f022 0220 	bic.w	r2, r2, #32
 8015a94:	6022      	str	r2, [r4, #0]
 8015a96:	2210      	movs	r2, #16
 8015a98:	e7b7      	b.n	8015a0a <_printf_i+0xd2>
 8015a9a:	064d      	lsls	r5, r1, #25
 8015a9c:	bf48      	it	mi
 8015a9e:	b29b      	uxthmi	r3, r3
 8015aa0:	e7ef      	b.n	8015a82 <_printf_i+0x14a>
 8015aa2:	4665      	mov	r5, ip
 8015aa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8015aa8:	fb02 3311 	mls	r3, r2, r1, r3
 8015aac:	5cc3      	ldrb	r3, [r0, r3]
 8015aae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015ab2:	460b      	mov	r3, r1
 8015ab4:	2900      	cmp	r1, #0
 8015ab6:	d1f5      	bne.n	8015aa4 <_printf_i+0x16c>
 8015ab8:	e7b9      	b.n	8015a2e <_printf_i+0xf6>
 8015aba:	6813      	ldr	r3, [r2, #0]
 8015abc:	6825      	ldr	r5, [r4, #0]
 8015abe:	6961      	ldr	r1, [r4, #20]
 8015ac0:	1d18      	adds	r0, r3, #4
 8015ac2:	6010      	str	r0, [r2, #0]
 8015ac4:	0628      	lsls	r0, r5, #24
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	d501      	bpl.n	8015ace <_printf_i+0x196>
 8015aca:	6019      	str	r1, [r3, #0]
 8015acc:	e002      	b.n	8015ad4 <_printf_i+0x19c>
 8015ace:	066a      	lsls	r2, r5, #25
 8015ad0:	d5fb      	bpl.n	8015aca <_printf_i+0x192>
 8015ad2:	8019      	strh	r1, [r3, #0]
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	6123      	str	r3, [r4, #16]
 8015ad8:	4665      	mov	r5, ip
 8015ada:	e7b9      	b.n	8015a50 <_printf_i+0x118>
 8015adc:	6813      	ldr	r3, [r2, #0]
 8015ade:	1d19      	adds	r1, r3, #4
 8015ae0:	6011      	str	r1, [r2, #0]
 8015ae2:	681d      	ldr	r5, [r3, #0]
 8015ae4:	6862      	ldr	r2, [r4, #4]
 8015ae6:	2100      	movs	r1, #0
 8015ae8:	4628      	mov	r0, r5
 8015aea:	f7f2 fab1 	bl	8008050 <memchr>
 8015aee:	b108      	cbz	r0, 8015af4 <_printf_i+0x1bc>
 8015af0:	1b40      	subs	r0, r0, r5
 8015af2:	6060      	str	r0, [r4, #4]
 8015af4:	6863      	ldr	r3, [r4, #4]
 8015af6:	6123      	str	r3, [r4, #16]
 8015af8:	2300      	movs	r3, #0
 8015afa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015afe:	e7a7      	b.n	8015a50 <_printf_i+0x118>
 8015b00:	6923      	ldr	r3, [r4, #16]
 8015b02:	462a      	mov	r2, r5
 8015b04:	4639      	mov	r1, r7
 8015b06:	4630      	mov	r0, r6
 8015b08:	47c0      	blx	r8
 8015b0a:	3001      	adds	r0, #1
 8015b0c:	d0aa      	beq.n	8015a64 <_printf_i+0x12c>
 8015b0e:	6823      	ldr	r3, [r4, #0]
 8015b10:	079b      	lsls	r3, r3, #30
 8015b12:	d413      	bmi.n	8015b3c <_printf_i+0x204>
 8015b14:	68e0      	ldr	r0, [r4, #12]
 8015b16:	9b03      	ldr	r3, [sp, #12]
 8015b18:	4298      	cmp	r0, r3
 8015b1a:	bfb8      	it	lt
 8015b1c:	4618      	movlt	r0, r3
 8015b1e:	e7a3      	b.n	8015a68 <_printf_i+0x130>
 8015b20:	2301      	movs	r3, #1
 8015b22:	464a      	mov	r2, r9
 8015b24:	4639      	mov	r1, r7
 8015b26:	4630      	mov	r0, r6
 8015b28:	47c0      	blx	r8
 8015b2a:	3001      	adds	r0, #1
 8015b2c:	d09a      	beq.n	8015a64 <_printf_i+0x12c>
 8015b2e:	3501      	adds	r5, #1
 8015b30:	68e3      	ldr	r3, [r4, #12]
 8015b32:	9a03      	ldr	r2, [sp, #12]
 8015b34:	1a9b      	subs	r3, r3, r2
 8015b36:	42ab      	cmp	r3, r5
 8015b38:	dcf2      	bgt.n	8015b20 <_printf_i+0x1e8>
 8015b3a:	e7eb      	b.n	8015b14 <_printf_i+0x1dc>
 8015b3c:	2500      	movs	r5, #0
 8015b3e:	f104 0919 	add.w	r9, r4, #25
 8015b42:	e7f5      	b.n	8015b30 <_printf_i+0x1f8>
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d1ac      	bne.n	8015aa2 <_printf_i+0x16a>
 8015b48:	7803      	ldrb	r3, [r0, #0]
 8015b4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015b4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015b52:	e76c      	b.n	8015a2e <_printf_i+0xf6>
 8015b54:	0801a5fc 	.word	0x0801a5fc
 8015b58:	0801a60d 	.word	0x0801a60d

08015b5c <_scanf_float>:
 8015b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b60:	469a      	mov	sl, r3
 8015b62:	688b      	ldr	r3, [r1, #8]
 8015b64:	4616      	mov	r6, r2
 8015b66:	1e5a      	subs	r2, r3, #1
 8015b68:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015b6c:	b087      	sub	sp, #28
 8015b6e:	bf83      	ittte	hi
 8015b70:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015b74:	189b      	addhi	r3, r3, r2
 8015b76:	9301      	strhi	r3, [sp, #4]
 8015b78:	2300      	movls	r3, #0
 8015b7a:	bf86      	itte	hi
 8015b7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015b80:	608b      	strhi	r3, [r1, #8]
 8015b82:	9301      	strls	r3, [sp, #4]
 8015b84:	680b      	ldr	r3, [r1, #0]
 8015b86:	4688      	mov	r8, r1
 8015b88:	f04f 0b00 	mov.w	fp, #0
 8015b8c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015b90:	f848 3b1c 	str.w	r3, [r8], #28
 8015b94:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015b98:	4607      	mov	r7, r0
 8015b9a:	460c      	mov	r4, r1
 8015b9c:	4645      	mov	r5, r8
 8015b9e:	465a      	mov	r2, fp
 8015ba0:	46d9      	mov	r9, fp
 8015ba2:	f8cd b008 	str.w	fp, [sp, #8]
 8015ba6:	68a1      	ldr	r1, [r4, #8]
 8015ba8:	b181      	cbz	r1, 8015bcc <_scanf_float+0x70>
 8015baa:	6833      	ldr	r3, [r6, #0]
 8015bac:	781b      	ldrb	r3, [r3, #0]
 8015bae:	2b49      	cmp	r3, #73	; 0x49
 8015bb0:	d071      	beq.n	8015c96 <_scanf_float+0x13a>
 8015bb2:	d84d      	bhi.n	8015c50 <_scanf_float+0xf4>
 8015bb4:	2b39      	cmp	r3, #57	; 0x39
 8015bb6:	d840      	bhi.n	8015c3a <_scanf_float+0xde>
 8015bb8:	2b31      	cmp	r3, #49	; 0x31
 8015bba:	f080 8088 	bcs.w	8015cce <_scanf_float+0x172>
 8015bbe:	2b2d      	cmp	r3, #45	; 0x2d
 8015bc0:	f000 8090 	beq.w	8015ce4 <_scanf_float+0x188>
 8015bc4:	d815      	bhi.n	8015bf2 <_scanf_float+0x96>
 8015bc6:	2b2b      	cmp	r3, #43	; 0x2b
 8015bc8:	f000 808c 	beq.w	8015ce4 <_scanf_float+0x188>
 8015bcc:	f1b9 0f00 	cmp.w	r9, #0
 8015bd0:	d003      	beq.n	8015bda <_scanf_float+0x7e>
 8015bd2:	6823      	ldr	r3, [r4, #0]
 8015bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015bd8:	6023      	str	r3, [r4, #0]
 8015bda:	3a01      	subs	r2, #1
 8015bdc:	2a01      	cmp	r2, #1
 8015bde:	f200 80ea 	bhi.w	8015db6 <_scanf_float+0x25a>
 8015be2:	4545      	cmp	r5, r8
 8015be4:	f200 80dc 	bhi.w	8015da0 <_scanf_float+0x244>
 8015be8:	2601      	movs	r6, #1
 8015bea:	4630      	mov	r0, r6
 8015bec:	b007      	add	sp, #28
 8015bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bf2:	2b2e      	cmp	r3, #46	; 0x2e
 8015bf4:	f000 809f 	beq.w	8015d36 <_scanf_float+0x1da>
 8015bf8:	2b30      	cmp	r3, #48	; 0x30
 8015bfa:	d1e7      	bne.n	8015bcc <_scanf_float+0x70>
 8015bfc:	6820      	ldr	r0, [r4, #0]
 8015bfe:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015c02:	d064      	beq.n	8015cce <_scanf_float+0x172>
 8015c04:	9b01      	ldr	r3, [sp, #4]
 8015c06:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015c0a:	6020      	str	r0, [r4, #0]
 8015c0c:	f109 0901 	add.w	r9, r9, #1
 8015c10:	b11b      	cbz	r3, 8015c1a <_scanf_float+0xbe>
 8015c12:	3b01      	subs	r3, #1
 8015c14:	3101      	adds	r1, #1
 8015c16:	9301      	str	r3, [sp, #4]
 8015c18:	60a1      	str	r1, [r4, #8]
 8015c1a:	68a3      	ldr	r3, [r4, #8]
 8015c1c:	3b01      	subs	r3, #1
 8015c1e:	60a3      	str	r3, [r4, #8]
 8015c20:	6923      	ldr	r3, [r4, #16]
 8015c22:	3301      	adds	r3, #1
 8015c24:	6123      	str	r3, [r4, #16]
 8015c26:	6873      	ldr	r3, [r6, #4]
 8015c28:	3b01      	subs	r3, #1
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	6073      	str	r3, [r6, #4]
 8015c2e:	f340 80ac 	ble.w	8015d8a <_scanf_float+0x22e>
 8015c32:	6833      	ldr	r3, [r6, #0]
 8015c34:	3301      	adds	r3, #1
 8015c36:	6033      	str	r3, [r6, #0]
 8015c38:	e7b5      	b.n	8015ba6 <_scanf_float+0x4a>
 8015c3a:	2b45      	cmp	r3, #69	; 0x45
 8015c3c:	f000 8085 	beq.w	8015d4a <_scanf_float+0x1ee>
 8015c40:	2b46      	cmp	r3, #70	; 0x46
 8015c42:	d06a      	beq.n	8015d1a <_scanf_float+0x1be>
 8015c44:	2b41      	cmp	r3, #65	; 0x41
 8015c46:	d1c1      	bne.n	8015bcc <_scanf_float+0x70>
 8015c48:	2a01      	cmp	r2, #1
 8015c4a:	d1bf      	bne.n	8015bcc <_scanf_float+0x70>
 8015c4c:	2202      	movs	r2, #2
 8015c4e:	e046      	b.n	8015cde <_scanf_float+0x182>
 8015c50:	2b65      	cmp	r3, #101	; 0x65
 8015c52:	d07a      	beq.n	8015d4a <_scanf_float+0x1ee>
 8015c54:	d818      	bhi.n	8015c88 <_scanf_float+0x12c>
 8015c56:	2b54      	cmp	r3, #84	; 0x54
 8015c58:	d066      	beq.n	8015d28 <_scanf_float+0x1cc>
 8015c5a:	d811      	bhi.n	8015c80 <_scanf_float+0x124>
 8015c5c:	2b4e      	cmp	r3, #78	; 0x4e
 8015c5e:	d1b5      	bne.n	8015bcc <_scanf_float+0x70>
 8015c60:	2a00      	cmp	r2, #0
 8015c62:	d146      	bne.n	8015cf2 <_scanf_float+0x196>
 8015c64:	f1b9 0f00 	cmp.w	r9, #0
 8015c68:	d145      	bne.n	8015cf6 <_scanf_float+0x19a>
 8015c6a:	6821      	ldr	r1, [r4, #0]
 8015c6c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015c70:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015c74:	d13f      	bne.n	8015cf6 <_scanf_float+0x19a>
 8015c76:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015c7a:	6021      	str	r1, [r4, #0]
 8015c7c:	2201      	movs	r2, #1
 8015c7e:	e02e      	b.n	8015cde <_scanf_float+0x182>
 8015c80:	2b59      	cmp	r3, #89	; 0x59
 8015c82:	d01e      	beq.n	8015cc2 <_scanf_float+0x166>
 8015c84:	2b61      	cmp	r3, #97	; 0x61
 8015c86:	e7de      	b.n	8015c46 <_scanf_float+0xea>
 8015c88:	2b6e      	cmp	r3, #110	; 0x6e
 8015c8a:	d0e9      	beq.n	8015c60 <_scanf_float+0x104>
 8015c8c:	d815      	bhi.n	8015cba <_scanf_float+0x15e>
 8015c8e:	2b66      	cmp	r3, #102	; 0x66
 8015c90:	d043      	beq.n	8015d1a <_scanf_float+0x1be>
 8015c92:	2b69      	cmp	r3, #105	; 0x69
 8015c94:	d19a      	bne.n	8015bcc <_scanf_float+0x70>
 8015c96:	f1bb 0f00 	cmp.w	fp, #0
 8015c9a:	d138      	bne.n	8015d0e <_scanf_float+0x1b2>
 8015c9c:	f1b9 0f00 	cmp.w	r9, #0
 8015ca0:	d197      	bne.n	8015bd2 <_scanf_float+0x76>
 8015ca2:	6821      	ldr	r1, [r4, #0]
 8015ca4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015ca8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015cac:	d195      	bne.n	8015bda <_scanf_float+0x7e>
 8015cae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015cb2:	6021      	str	r1, [r4, #0]
 8015cb4:	f04f 0b01 	mov.w	fp, #1
 8015cb8:	e011      	b.n	8015cde <_scanf_float+0x182>
 8015cba:	2b74      	cmp	r3, #116	; 0x74
 8015cbc:	d034      	beq.n	8015d28 <_scanf_float+0x1cc>
 8015cbe:	2b79      	cmp	r3, #121	; 0x79
 8015cc0:	d184      	bne.n	8015bcc <_scanf_float+0x70>
 8015cc2:	f1bb 0f07 	cmp.w	fp, #7
 8015cc6:	d181      	bne.n	8015bcc <_scanf_float+0x70>
 8015cc8:	f04f 0b08 	mov.w	fp, #8
 8015ccc:	e007      	b.n	8015cde <_scanf_float+0x182>
 8015cce:	eb12 0f0b 	cmn.w	r2, fp
 8015cd2:	f47f af7b 	bne.w	8015bcc <_scanf_float+0x70>
 8015cd6:	6821      	ldr	r1, [r4, #0]
 8015cd8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015cdc:	6021      	str	r1, [r4, #0]
 8015cde:	702b      	strb	r3, [r5, #0]
 8015ce0:	3501      	adds	r5, #1
 8015ce2:	e79a      	b.n	8015c1a <_scanf_float+0xbe>
 8015ce4:	6821      	ldr	r1, [r4, #0]
 8015ce6:	0608      	lsls	r0, r1, #24
 8015ce8:	f57f af70 	bpl.w	8015bcc <_scanf_float+0x70>
 8015cec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015cf0:	e7f4      	b.n	8015cdc <_scanf_float+0x180>
 8015cf2:	2a02      	cmp	r2, #2
 8015cf4:	d047      	beq.n	8015d86 <_scanf_float+0x22a>
 8015cf6:	f1bb 0f01 	cmp.w	fp, #1
 8015cfa:	d003      	beq.n	8015d04 <_scanf_float+0x1a8>
 8015cfc:	f1bb 0f04 	cmp.w	fp, #4
 8015d00:	f47f af64 	bne.w	8015bcc <_scanf_float+0x70>
 8015d04:	f10b 0b01 	add.w	fp, fp, #1
 8015d08:	fa5f fb8b 	uxtb.w	fp, fp
 8015d0c:	e7e7      	b.n	8015cde <_scanf_float+0x182>
 8015d0e:	f1bb 0f03 	cmp.w	fp, #3
 8015d12:	d0f7      	beq.n	8015d04 <_scanf_float+0x1a8>
 8015d14:	f1bb 0f05 	cmp.w	fp, #5
 8015d18:	e7f2      	b.n	8015d00 <_scanf_float+0x1a4>
 8015d1a:	f1bb 0f02 	cmp.w	fp, #2
 8015d1e:	f47f af55 	bne.w	8015bcc <_scanf_float+0x70>
 8015d22:	f04f 0b03 	mov.w	fp, #3
 8015d26:	e7da      	b.n	8015cde <_scanf_float+0x182>
 8015d28:	f1bb 0f06 	cmp.w	fp, #6
 8015d2c:	f47f af4e 	bne.w	8015bcc <_scanf_float+0x70>
 8015d30:	f04f 0b07 	mov.w	fp, #7
 8015d34:	e7d3      	b.n	8015cde <_scanf_float+0x182>
 8015d36:	6821      	ldr	r1, [r4, #0]
 8015d38:	0588      	lsls	r0, r1, #22
 8015d3a:	f57f af47 	bpl.w	8015bcc <_scanf_float+0x70>
 8015d3e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015d42:	6021      	str	r1, [r4, #0]
 8015d44:	f8cd 9008 	str.w	r9, [sp, #8]
 8015d48:	e7c9      	b.n	8015cde <_scanf_float+0x182>
 8015d4a:	6821      	ldr	r1, [r4, #0]
 8015d4c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015d50:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015d54:	d006      	beq.n	8015d64 <_scanf_float+0x208>
 8015d56:	0548      	lsls	r0, r1, #21
 8015d58:	f57f af38 	bpl.w	8015bcc <_scanf_float+0x70>
 8015d5c:	f1b9 0f00 	cmp.w	r9, #0
 8015d60:	f43f af3b 	beq.w	8015bda <_scanf_float+0x7e>
 8015d64:	0588      	lsls	r0, r1, #22
 8015d66:	bf58      	it	pl
 8015d68:	9802      	ldrpl	r0, [sp, #8]
 8015d6a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015d6e:	bf58      	it	pl
 8015d70:	eba9 0000 	subpl.w	r0, r9, r0
 8015d74:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015d78:	bf58      	it	pl
 8015d7a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015d7e:	6021      	str	r1, [r4, #0]
 8015d80:	f04f 0900 	mov.w	r9, #0
 8015d84:	e7ab      	b.n	8015cde <_scanf_float+0x182>
 8015d86:	2203      	movs	r2, #3
 8015d88:	e7a9      	b.n	8015cde <_scanf_float+0x182>
 8015d8a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015d8e:	9205      	str	r2, [sp, #20]
 8015d90:	4631      	mov	r1, r6
 8015d92:	4638      	mov	r0, r7
 8015d94:	4798      	blx	r3
 8015d96:	9a05      	ldr	r2, [sp, #20]
 8015d98:	2800      	cmp	r0, #0
 8015d9a:	f43f af04 	beq.w	8015ba6 <_scanf_float+0x4a>
 8015d9e:	e715      	b.n	8015bcc <_scanf_float+0x70>
 8015da0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015da4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015da8:	4632      	mov	r2, r6
 8015daa:	4638      	mov	r0, r7
 8015dac:	4798      	blx	r3
 8015dae:	6923      	ldr	r3, [r4, #16]
 8015db0:	3b01      	subs	r3, #1
 8015db2:	6123      	str	r3, [r4, #16]
 8015db4:	e715      	b.n	8015be2 <_scanf_float+0x86>
 8015db6:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015dba:	2b06      	cmp	r3, #6
 8015dbc:	d80a      	bhi.n	8015dd4 <_scanf_float+0x278>
 8015dbe:	f1bb 0f02 	cmp.w	fp, #2
 8015dc2:	d968      	bls.n	8015e96 <_scanf_float+0x33a>
 8015dc4:	f1ab 0b03 	sub.w	fp, fp, #3
 8015dc8:	fa5f fb8b 	uxtb.w	fp, fp
 8015dcc:	eba5 0b0b 	sub.w	fp, r5, fp
 8015dd0:	455d      	cmp	r5, fp
 8015dd2:	d14b      	bne.n	8015e6c <_scanf_float+0x310>
 8015dd4:	6823      	ldr	r3, [r4, #0]
 8015dd6:	05da      	lsls	r2, r3, #23
 8015dd8:	d51f      	bpl.n	8015e1a <_scanf_float+0x2be>
 8015dda:	055b      	lsls	r3, r3, #21
 8015ddc:	d468      	bmi.n	8015eb0 <_scanf_float+0x354>
 8015dde:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015de2:	6923      	ldr	r3, [r4, #16]
 8015de4:	2965      	cmp	r1, #101	; 0x65
 8015de6:	f103 33ff 	add.w	r3, r3, #4294967295
 8015dea:	f105 3bff 	add.w	fp, r5, #4294967295
 8015dee:	6123      	str	r3, [r4, #16]
 8015df0:	d00d      	beq.n	8015e0e <_scanf_float+0x2b2>
 8015df2:	2945      	cmp	r1, #69	; 0x45
 8015df4:	d00b      	beq.n	8015e0e <_scanf_float+0x2b2>
 8015df6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015dfa:	4632      	mov	r2, r6
 8015dfc:	4638      	mov	r0, r7
 8015dfe:	4798      	blx	r3
 8015e00:	6923      	ldr	r3, [r4, #16]
 8015e02:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015e06:	3b01      	subs	r3, #1
 8015e08:	f1a5 0b02 	sub.w	fp, r5, #2
 8015e0c:	6123      	str	r3, [r4, #16]
 8015e0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e12:	4632      	mov	r2, r6
 8015e14:	4638      	mov	r0, r7
 8015e16:	4798      	blx	r3
 8015e18:	465d      	mov	r5, fp
 8015e1a:	6826      	ldr	r6, [r4, #0]
 8015e1c:	f016 0610 	ands.w	r6, r6, #16
 8015e20:	d17a      	bne.n	8015f18 <_scanf_float+0x3bc>
 8015e22:	702e      	strb	r6, [r5, #0]
 8015e24:	6823      	ldr	r3, [r4, #0]
 8015e26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015e2e:	d142      	bne.n	8015eb6 <_scanf_float+0x35a>
 8015e30:	9b02      	ldr	r3, [sp, #8]
 8015e32:	eba9 0303 	sub.w	r3, r9, r3
 8015e36:	425a      	negs	r2, r3
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d149      	bne.n	8015ed0 <_scanf_float+0x374>
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	4641      	mov	r1, r8
 8015e40:	4638      	mov	r0, r7
 8015e42:	f000 ffed 	bl	8016e20 <_strtod_r>
 8015e46:	6825      	ldr	r5, [r4, #0]
 8015e48:	f8da 3000 	ldr.w	r3, [sl]
 8015e4c:	f015 0f02 	tst.w	r5, #2
 8015e50:	f103 0204 	add.w	r2, r3, #4
 8015e54:	ec59 8b10 	vmov	r8, r9, d0
 8015e58:	f8ca 2000 	str.w	r2, [sl]
 8015e5c:	d043      	beq.n	8015ee6 <_scanf_float+0x38a>
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	e9c3 8900 	strd	r8, r9, [r3]
 8015e64:	68e3      	ldr	r3, [r4, #12]
 8015e66:	3301      	adds	r3, #1
 8015e68:	60e3      	str	r3, [r4, #12]
 8015e6a:	e6be      	b.n	8015bea <_scanf_float+0x8e>
 8015e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e70:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015e74:	4632      	mov	r2, r6
 8015e76:	4638      	mov	r0, r7
 8015e78:	4798      	blx	r3
 8015e7a:	6923      	ldr	r3, [r4, #16]
 8015e7c:	3b01      	subs	r3, #1
 8015e7e:	6123      	str	r3, [r4, #16]
 8015e80:	e7a6      	b.n	8015dd0 <_scanf_float+0x274>
 8015e82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e86:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015e8a:	4632      	mov	r2, r6
 8015e8c:	4638      	mov	r0, r7
 8015e8e:	4798      	blx	r3
 8015e90:	6923      	ldr	r3, [r4, #16]
 8015e92:	3b01      	subs	r3, #1
 8015e94:	6123      	str	r3, [r4, #16]
 8015e96:	4545      	cmp	r5, r8
 8015e98:	d8f3      	bhi.n	8015e82 <_scanf_float+0x326>
 8015e9a:	e6a5      	b.n	8015be8 <_scanf_float+0x8c>
 8015e9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ea0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015ea4:	4632      	mov	r2, r6
 8015ea6:	4638      	mov	r0, r7
 8015ea8:	4798      	blx	r3
 8015eaa:	6923      	ldr	r3, [r4, #16]
 8015eac:	3b01      	subs	r3, #1
 8015eae:	6123      	str	r3, [r4, #16]
 8015eb0:	4545      	cmp	r5, r8
 8015eb2:	d8f3      	bhi.n	8015e9c <_scanf_float+0x340>
 8015eb4:	e698      	b.n	8015be8 <_scanf_float+0x8c>
 8015eb6:	9b03      	ldr	r3, [sp, #12]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d0bf      	beq.n	8015e3c <_scanf_float+0x2e0>
 8015ebc:	9904      	ldr	r1, [sp, #16]
 8015ebe:	230a      	movs	r3, #10
 8015ec0:	4632      	mov	r2, r6
 8015ec2:	3101      	adds	r1, #1
 8015ec4:	4638      	mov	r0, r7
 8015ec6:	f001 f837 	bl	8016f38 <_strtol_r>
 8015eca:	9b03      	ldr	r3, [sp, #12]
 8015ecc:	9d04      	ldr	r5, [sp, #16]
 8015ece:	1ac2      	subs	r2, r0, r3
 8015ed0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015ed4:	429d      	cmp	r5, r3
 8015ed6:	bf28      	it	cs
 8015ed8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015edc:	490f      	ldr	r1, [pc, #60]	; (8015f1c <_scanf_float+0x3c0>)
 8015ede:	4628      	mov	r0, r5
 8015ee0:	f000 f96e 	bl	80161c0 <siprintf>
 8015ee4:	e7aa      	b.n	8015e3c <_scanf_float+0x2e0>
 8015ee6:	f015 0504 	ands.w	r5, r5, #4
 8015eea:	d1b8      	bne.n	8015e5e <_scanf_float+0x302>
 8015eec:	681f      	ldr	r7, [r3, #0]
 8015eee:	ee10 2a10 	vmov	r2, s0
 8015ef2:	464b      	mov	r3, r9
 8015ef4:	ee10 0a10 	vmov	r0, s0
 8015ef8:	4649      	mov	r1, r9
 8015efa:	f7f2 fd4f 	bl	800899c <__aeabi_dcmpun>
 8015efe:	b128      	cbz	r0, 8015f0c <_scanf_float+0x3b0>
 8015f00:	4628      	mov	r0, r5
 8015f02:	f000 f957 	bl	80161b4 <nanf>
 8015f06:	ed87 0a00 	vstr	s0, [r7]
 8015f0a:	e7ab      	b.n	8015e64 <_scanf_float+0x308>
 8015f0c:	4640      	mov	r0, r8
 8015f0e:	4649      	mov	r1, r9
 8015f10:	f7f2 fda2 	bl	8008a58 <__aeabi_d2f>
 8015f14:	6038      	str	r0, [r7, #0]
 8015f16:	e7a5      	b.n	8015e64 <_scanf_float+0x308>
 8015f18:	2600      	movs	r6, #0
 8015f1a:	e666      	b.n	8015bea <_scanf_float+0x8e>
 8015f1c:	0801a61e 	.word	0x0801a61e

08015f20 <iprintf>:
 8015f20:	b40f      	push	{r0, r1, r2, r3}
 8015f22:	4b0a      	ldr	r3, [pc, #40]	; (8015f4c <iprintf+0x2c>)
 8015f24:	b513      	push	{r0, r1, r4, lr}
 8015f26:	681c      	ldr	r4, [r3, #0]
 8015f28:	b124      	cbz	r4, 8015f34 <iprintf+0x14>
 8015f2a:	69a3      	ldr	r3, [r4, #24]
 8015f2c:	b913      	cbnz	r3, 8015f34 <iprintf+0x14>
 8015f2e:	4620      	mov	r0, r4
 8015f30:	f002 f81c 	bl	8017f6c <__sinit>
 8015f34:	ab05      	add	r3, sp, #20
 8015f36:	9a04      	ldr	r2, [sp, #16]
 8015f38:	68a1      	ldr	r1, [r4, #8]
 8015f3a:	9301      	str	r3, [sp, #4]
 8015f3c:	4620      	mov	r0, r4
 8015f3e:	f003 fab3 	bl	80194a8 <_vfiprintf_r>
 8015f42:	b002      	add	sp, #8
 8015f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f48:	b004      	add	sp, #16
 8015f4a:	4770      	bx	lr
 8015f4c:	20000028 	.word	0x20000028

08015f50 <_puts_r>:
 8015f50:	b570      	push	{r4, r5, r6, lr}
 8015f52:	460e      	mov	r6, r1
 8015f54:	4605      	mov	r5, r0
 8015f56:	b118      	cbz	r0, 8015f60 <_puts_r+0x10>
 8015f58:	6983      	ldr	r3, [r0, #24]
 8015f5a:	b90b      	cbnz	r3, 8015f60 <_puts_r+0x10>
 8015f5c:	f002 f806 	bl	8017f6c <__sinit>
 8015f60:	69ab      	ldr	r3, [r5, #24]
 8015f62:	68ac      	ldr	r4, [r5, #8]
 8015f64:	b913      	cbnz	r3, 8015f6c <_puts_r+0x1c>
 8015f66:	4628      	mov	r0, r5
 8015f68:	f002 f800 	bl	8017f6c <__sinit>
 8015f6c:	4b23      	ldr	r3, [pc, #140]	; (8015ffc <_puts_r+0xac>)
 8015f6e:	429c      	cmp	r4, r3
 8015f70:	d117      	bne.n	8015fa2 <_puts_r+0x52>
 8015f72:	686c      	ldr	r4, [r5, #4]
 8015f74:	89a3      	ldrh	r3, [r4, #12]
 8015f76:	071b      	lsls	r3, r3, #28
 8015f78:	d51d      	bpl.n	8015fb6 <_puts_r+0x66>
 8015f7a:	6923      	ldr	r3, [r4, #16]
 8015f7c:	b1db      	cbz	r3, 8015fb6 <_puts_r+0x66>
 8015f7e:	3e01      	subs	r6, #1
 8015f80:	68a3      	ldr	r3, [r4, #8]
 8015f82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015f86:	3b01      	subs	r3, #1
 8015f88:	60a3      	str	r3, [r4, #8]
 8015f8a:	b9e9      	cbnz	r1, 8015fc8 <_puts_r+0x78>
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	da2e      	bge.n	8015fee <_puts_r+0x9e>
 8015f90:	4622      	mov	r2, r4
 8015f92:	210a      	movs	r1, #10
 8015f94:	4628      	mov	r0, r5
 8015f96:	f000 ffe1 	bl	8016f5c <__swbuf_r>
 8015f9a:	3001      	adds	r0, #1
 8015f9c:	d011      	beq.n	8015fc2 <_puts_r+0x72>
 8015f9e:	200a      	movs	r0, #10
 8015fa0:	e011      	b.n	8015fc6 <_puts_r+0x76>
 8015fa2:	4b17      	ldr	r3, [pc, #92]	; (8016000 <_puts_r+0xb0>)
 8015fa4:	429c      	cmp	r4, r3
 8015fa6:	d101      	bne.n	8015fac <_puts_r+0x5c>
 8015fa8:	68ac      	ldr	r4, [r5, #8]
 8015faa:	e7e3      	b.n	8015f74 <_puts_r+0x24>
 8015fac:	4b15      	ldr	r3, [pc, #84]	; (8016004 <_puts_r+0xb4>)
 8015fae:	429c      	cmp	r4, r3
 8015fb0:	bf08      	it	eq
 8015fb2:	68ec      	ldreq	r4, [r5, #12]
 8015fb4:	e7de      	b.n	8015f74 <_puts_r+0x24>
 8015fb6:	4621      	mov	r1, r4
 8015fb8:	4628      	mov	r0, r5
 8015fba:	f001 f821 	bl	8017000 <__swsetup_r>
 8015fbe:	2800      	cmp	r0, #0
 8015fc0:	d0dd      	beq.n	8015f7e <_puts_r+0x2e>
 8015fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8015fc6:	bd70      	pop	{r4, r5, r6, pc}
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	da04      	bge.n	8015fd6 <_puts_r+0x86>
 8015fcc:	69a2      	ldr	r2, [r4, #24]
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	dc06      	bgt.n	8015fe0 <_puts_r+0x90>
 8015fd2:	290a      	cmp	r1, #10
 8015fd4:	d004      	beq.n	8015fe0 <_puts_r+0x90>
 8015fd6:	6823      	ldr	r3, [r4, #0]
 8015fd8:	1c5a      	adds	r2, r3, #1
 8015fda:	6022      	str	r2, [r4, #0]
 8015fdc:	7019      	strb	r1, [r3, #0]
 8015fde:	e7cf      	b.n	8015f80 <_puts_r+0x30>
 8015fe0:	4622      	mov	r2, r4
 8015fe2:	4628      	mov	r0, r5
 8015fe4:	f000 ffba 	bl	8016f5c <__swbuf_r>
 8015fe8:	3001      	adds	r0, #1
 8015fea:	d1c9      	bne.n	8015f80 <_puts_r+0x30>
 8015fec:	e7e9      	b.n	8015fc2 <_puts_r+0x72>
 8015fee:	6823      	ldr	r3, [r4, #0]
 8015ff0:	200a      	movs	r0, #10
 8015ff2:	1c5a      	adds	r2, r3, #1
 8015ff4:	6022      	str	r2, [r4, #0]
 8015ff6:	7018      	strb	r0, [r3, #0]
 8015ff8:	e7e5      	b.n	8015fc6 <_puts_r+0x76>
 8015ffa:	bf00      	nop
 8015ffc:	0801a6a8 	.word	0x0801a6a8
 8016000:	0801a6c8 	.word	0x0801a6c8
 8016004:	0801a688 	.word	0x0801a688

08016008 <puts>:
 8016008:	4b02      	ldr	r3, [pc, #8]	; (8016014 <puts+0xc>)
 801600a:	4601      	mov	r1, r0
 801600c:	6818      	ldr	r0, [r3, #0]
 801600e:	f7ff bf9f 	b.w	8015f50 <_puts_r>
 8016012:	bf00      	nop
 8016014:	20000028 	.word	0x20000028

08016018 <iscanf>:
 8016018:	b40f      	push	{r0, r1, r2, r3}
 801601a:	4b0a      	ldr	r3, [pc, #40]	; (8016044 <iscanf+0x2c>)
 801601c:	b513      	push	{r0, r1, r4, lr}
 801601e:	681c      	ldr	r4, [r3, #0]
 8016020:	b124      	cbz	r4, 801602c <iscanf+0x14>
 8016022:	69a3      	ldr	r3, [r4, #24]
 8016024:	b913      	cbnz	r3, 801602c <iscanf+0x14>
 8016026:	4620      	mov	r0, r4
 8016028:	f001 ffa0 	bl	8017f6c <__sinit>
 801602c:	ab05      	add	r3, sp, #20
 801602e:	9a04      	ldr	r2, [sp, #16]
 8016030:	6861      	ldr	r1, [r4, #4]
 8016032:	9301      	str	r3, [sp, #4]
 8016034:	4620      	mov	r0, r4
 8016036:	f003 fc9d 	bl	8019974 <_vfiscanf_r>
 801603a:	b002      	add	sp, #8
 801603c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016040:	b004      	add	sp, #16
 8016042:	4770      	bx	lr
 8016044:	20000028 	.word	0x20000028

08016048 <setbuf>:
 8016048:	2900      	cmp	r1, #0
 801604a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801604e:	bf0c      	ite	eq
 8016050:	2202      	moveq	r2, #2
 8016052:	2200      	movne	r2, #0
 8016054:	f000 b800 	b.w	8016058 <setvbuf>

08016058 <setvbuf>:
 8016058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801605c:	461d      	mov	r5, r3
 801605e:	4b51      	ldr	r3, [pc, #324]	; (80161a4 <setvbuf+0x14c>)
 8016060:	681e      	ldr	r6, [r3, #0]
 8016062:	4604      	mov	r4, r0
 8016064:	460f      	mov	r7, r1
 8016066:	4690      	mov	r8, r2
 8016068:	b126      	cbz	r6, 8016074 <setvbuf+0x1c>
 801606a:	69b3      	ldr	r3, [r6, #24]
 801606c:	b913      	cbnz	r3, 8016074 <setvbuf+0x1c>
 801606e:	4630      	mov	r0, r6
 8016070:	f001 ff7c 	bl	8017f6c <__sinit>
 8016074:	4b4c      	ldr	r3, [pc, #304]	; (80161a8 <setvbuf+0x150>)
 8016076:	429c      	cmp	r4, r3
 8016078:	d152      	bne.n	8016120 <setvbuf+0xc8>
 801607a:	6874      	ldr	r4, [r6, #4]
 801607c:	f1b8 0f02 	cmp.w	r8, #2
 8016080:	d006      	beq.n	8016090 <setvbuf+0x38>
 8016082:	f1b8 0f01 	cmp.w	r8, #1
 8016086:	f200 8089 	bhi.w	801619c <setvbuf+0x144>
 801608a:	2d00      	cmp	r5, #0
 801608c:	f2c0 8086 	blt.w	801619c <setvbuf+0x144>
 8016090:	4621      	mov	r1, r4
 8016092:	4630      	mov	r0, r6
 8016094:	f001 feee 	bl	8017e74 <_fflush_r>
 8016098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801609a:	b141      	cbz	r1, 80160ae <setvbuf+0x56>
 801609c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160a0:	4299      	cmp	r1, r3
 80160a2:	d002      	beq.n	80160aa <setvbuf+0x52>
 80160a4:	4630      	mov	r0, r6
 80160a6:	f002 ffdb 	bl	8019060 <_free_r>
 80160aa:	2300      	movs	r3, #0
 80160ac:	6363      	str	r3, [r4, #52]	; 0x34
 80160ae:	2300      	movs	r3, #0
 80160b0:	61a3      	str	r3, [r4, #24]
 80160b2:	6063      	str	r3, [r4, #4]
 80160b4:	89a3      	ldrh	r3, [r4, #12]
 80160b6:	061b      	lsls	r3, r3, #24
 80160b8:	d503      	bpl.n	80160c2 <setvbuf+0x6a>
 80160ba:	6921      	ldr	r1, [r4, #16]
 80160bc:	4630      	mov	r0, r6
 80160be:	f002 ffcf 	bl	8019060 <_free_r>
 80160c2:	89a3      	ldrh	r3, [r4, #12]
 80160c4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80160c8:	f023 0303 	bic.w	r3, r3, #3
 80160cc:	f1b8 0f02 	cmp.w	r8, #2
 80160d0:	81a3      	strh	r3, [r4, #12]
 80160d2:	d05d      	beq.n	8016190 <setvbuf+0x138>
 80160d4:	ab01      	add	r3, sp, #4
 80160d6:	466a      	mov	r2, sp
 80160d8:	4621      	mov	r1, r4
 80160da:	4630      	mov	r0, r6
 80160dc:	f002 fb34 	bl	8018748 <__swhatbuf_r>
 80160e0:	89a3      	ldrh	r3, [r4, #12]
 80160e2:	4318      	orrs	r0, r3
 80160e4:	81a0      	strh	r0, [r4, #12]
 80160e6:	bb2d      	cbnz	r5, 8016134 <setvbuf+0xdc>
 80160e8:	9d00      	ldr	r5, [sp, #0]
 80160ea:	4628      	mov	r0, r5
 80160ec:	f002 fb90 	bl	8018810 <malloc>
 80160f0:	4607      	mov	r7, r0
 80160f2:	2800      	cmp	r0, #0
 80160f4:	d14e      	bne.n	8016194 <setvbuf+0x13c>
 80160f6:	f8dd 9000 	ldr.w	r9, [sp]
 80160fa:	45a9      	cmp	r9, r5
 80160fc:	d13c      	bne.n	8016178 <setvbuf+0x120>
 80160fe:	f04f 30ff 	mov.w	r0, #4294967295
 8016102:	89a3      	ldrh	r3, [r4, #12]
 8016104:	f043 0302 	orr.w	r3, r3, #2
 8016108:	81a3      	strh	r3, [r4, #12]
 801610a:	2300      	movs	r3, #0
 801610c:	60a3      	str	r3, [r4, #8]
 801610e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016112:	6023      	str	r3, [r4, #0]
 8016114:	6123      	str	r3, [r4, #16]
 8016116:	2301      	movs	r3, #1
 8016118:	6163      	str	r3, [r4, #20]
 801611a:	b003      	add	sp, #12
 801611c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016120:	4b22      	ldr	r3, [pc, #136]	; (80161ac <setvbuf+0x154>)
 8016122:	429c      	cmp	r4, r3
 8016124:	d101      	bne.n	801612a <setvbuf+0xd2>
 8016126:	68b4      	ldr	r4, [r6, #8]
 8016128:	e7a8      	b.n	801607c <setvbuf+0x24>
 801612a:	4b21      	ldr	r3, [pc, #132]	; (80161b0 <setvbuf+0x158>)
 801612c:	429c      	cmp	r4, r3
 801612e:	bf08      	it	eq
 8016130:	68f4      	ldreq	r4, [r6, #12]
 8016132:	e7a3      	b.n	801607c <setvbuf+0x24>
 8016134:	2f00      	cmp	r7, #0
 8016136:	d0d8      	beq.n	80160ea <setvbuf+0x92>
 8016138:	69b3      	ldr	r3, [r6, #24]
 801613a:	b913      	cbnz	r3, 8016142 <setvbuf+0xea>
 801613c:	4630      	mov	r0, r6
 801613e:	f001 ff15 	bl	8017f6c <__sinit>
 8016142:	f1b8 0f01 	cmp.w	r8, #1
 8016146:	bf08      	it	eq
 8016148:	89a3      	ldrheq	r3, [r4, #12]
 801614a:	6027      	str	r7, [r4, #0]
 801614c:	bf04      	itt	eq
 801614e:	f043 0301 	orreq.w	r3, r3, #1
 8016152:	81a3      	strheq	r3, [r4, #12]
 8016154:	89a3      	ldrh	r3, [r4, #12]
 8016156:	f013 0008 	ands.w	r0, r3, #8
 801615a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 801615e:	d01b      	beq.n	8016198 <setvbuf+0x140>
 8016160:	f013 0001 	ands.w	r0, r3, #1
 8016164:	bf18      	it	ne
 8016166:	426d      	negne	r5, r5
 8016168:	f04f 0300 	mov.w	r3, #0
 801616c:	bf1d      	ittte	ne
 801616e:	60a3      	strne	r3, [r4, #8]
 8016170:	61a5      	strne	r5, [r4, #24]
 8016172:	4618      	movne	r0, r3
 8016174:	60a5      	streq	r5, [r4, #8]
 8016176:	e7d0      	b.n	801611a <setvbuf+0xc2>
 8016178:	4648      	mov	r0, r9
 801617a:	f002 fb49 	bl	8018810 <malloc>
 801617e:	4607      	mov	r7, r0
 8016180:	2800      	cmp	r0, #0
 8016182:	d0bc      	beq.n	80160fe <setvbuf+0xa6>
 8016184:	89a3      	ldrh	r3, [r4, #12]
 8016186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801618a:	81a3      	strh	r3, [r4, #12]
 801618c:	464d      	mov	r5, r9
 801618e:	e7d3      	b.n	8016138 <setvbuf+0xe0>
 8016190:	2000      	movs	r0, #0
 8016192:	e7b6      	b.n	8016102 <setvbuf+0xaa>
 8016194:	46a9      	mov	r9, r5
 8016196:	e7f5      	b.n	8016184 <setvbuf+0x12c>
 8016198:	60a0      	str	r0, [r4, #8]
 801619a:	e7be      	b.n	801611a <setvbuf+0xc2>
 801619c:	f04f 30ff 	mov.w	r0, #4294967295
 80161a0:	e7bb      	b.n	801611a <setvbuf+0xc2>
 80161a2:	bf00      	nop
 80161a4:	20000028 	.word	0x20000028
 80161a8:	0801a6a8 	.word	0x0801a6a8
 80161ac:	0801a6c8 	.word	0x0801a6c8
 80161b0:	0801a688 	.word	0x0801a688

080161b4 <nanf>:
 80161b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80161bc <nanf+0x8>
 80161b8:	4770      	bx	lr
 80161ba:	bf00      	nop
 80161bc:	7fc00000 	.word	0x7fc00000

080161c0 <siprintf>:
 80161c0:	b40e      	push	{r1, r2, r3}
 80161c2:	b500      	push	{lr}
 80161c4:	b09c      	sub	sp, #112	; 0x70
 80161c6:	ab1d      	add	r3, sp, #116	; 0x74
 80161c8:	9002      	str	r0, [sp, #8]
 80161ca:	9006      	str	r0, [sp, #24]
 80161cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80161d0:	4809      	ldr	r0, [pc, #36]	; (80161f8 <siprintf+0x38>)
 80161d2:	9107      	str	r1, [sp, #28]
 80161d4:	9104      	str	r1, [sp, #16]
 80161d6:	4909      	ldr	r1, [pc, #36]	; (80161fc <siprintf+0x3c>)
 80161d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80161dc:	9105      	str	r1, [sp, #20]
 80161de:	6800      	ldr	r0, [r0, #0]
 80161e0:	9301      	str	r3, [sp, #4]
 80161e2:	a902      	add	r1, sp, #8
 80161e4:	f003 f83e 	bl	8019264 <_svfiprintf_r>
 80161e8:	9b02      	ldr	r3, [sp, #8]
 80161ea:	2200      	movs	r2, #0
 80161ec:	701a      	strb	r2, [r3, #0]
 80161ee:	b01c      	add	sp, #112	; 0x70
 80161f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80161f4:	b003      	add	sp, #12
 80161f6:	4770      	bx	lr
 80161f8:	20000028 	.word	0x20000028
 80161fc:	ffff0208 	.word	0xffff0208

08016200 <sulp>:
 8016200:	b570      	push	{r4, r5, r6, lr}
 8016202:	4604      	mov	r4, r0
 8016204:	460d      	mov	r5, r1
 8016206:	ec45 4b10 	vmov	d0, r4, r5
 801620a:	4616      	mov	r6, r2
 801620c:	f002 fde6 	bl	8018ddc <__ulp>
 8016210:	ec51 0b10 	vmov	r0, r1, d0
 8016214:	b17e      	cbz	r6, 8016236 <sulp+0x36>
 8016216:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801621a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801621e:	2b00      	cmp	r3, #0
 8016220:	dd09      	ble.n	8016236 <sulp+0x36>
 8016222:	051b      	lsls	r3, r3, #20
 8016224:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016228:	2400      	movs	r4, #0
 801622a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801622e:	4622      	mov	r2, r4
 8016230:	462b      	mov	r3, r5
 8016232:	f7f2 f919 	bl	8008468 <__aeabi_dmul>
 8016236:	bd70      	pop	{r4, r5, r6, pc}

08016238 <_strtod_l>:
 8016238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801623c:	461f      	mov	r7, r3
 801623e:	b0a1      	sub	sp, #132	; 0x84
 8016240:	2300      	movs	r3, #0
 8016242:	4681      	mov	r9, r0
 8016244:	4638      	mov	r0, r7
 8016246:	460e      	mov	r6, r1
 8016248:	9217      	str	r2, [sp, #92]	; 0x5c
 801624a:	931c      	str	r3, [sp, #112]	; 0x70
 801624c:	f002 fa6c 	bl	8018728 <__localeconv_l>
 8016250:	4680      	mov	r8, r0
 8016252:	6800      	ldr	r0, [r0, #0]
 8016254:	f7f1 fef4 	bl	8008040 <strlen>
 8016258:	f04f 0a00 	mov.w	sl, #0
 801625c:	4604      	mov	r4, r0
 801625e:	f04f 0b00 	mov.w	fp, #0
 8016262:	961b      	str	r6, [sp, #108]	; 0x6c
 8016264:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016266:	781a      	ldrb	r2, [r3, #0]
 8016268:	2a0d      	cmp	r2, #13
 801626a:	d832      	bhi.n	80162d2 <_strtod_l+0x9a>
 801626c:	2a09      	cmp	r2, #9
 801626e:	d236      	bcs.n	80162de <_strtod_l+0xa6>
 8016270:	2a00      	cmp	r2, #0
 8016272:	d03e      	beq.n	80162f2 <_strtod_l+0xba>
 8016274:	2300      	movs	r3, #0
 8016276:	930d      	str	r3, [sp, #52]	; 0x34
 8016278:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801627a:	782b      	ldrb	r3, [r5, #0]
 801627c:	2b30      	cmp	r3, #48	; 0x30
 801627e:	f040 80ac 	bne.w	80163da <_strtod_l+0x1a2>
 8016282:	786b      	ldrb	r3, [r5, #1]
 8016284:	2b58      	cmp	r3, #88	; 0x58
 8016286:	d001      	beq.n	801628c <_strtod_l+0x54>
 8016288:	2b78      	cmp	r3, #120	; 0x78
 801628a:	d167      	bne.n	801635c <_strtod_l+0x124>
 801628c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801628e:	9301      	str	r3, [sp, #4]
 8016290:	ab1c      	add	r3, sp, #112	; 0x70
 8016292:	9300      	str	r3, [sp, #0]
 8016294:	9702      	str	r7, [sp, #8]
 8016296:	ab1d      	add	r3, sp, #116	; 0x74
 8016298:	4a88      	ldr	r2, [pc, #544]	; (80164bc <_strtod_l+0x284>)
 801629a:	a91b      	add	r1, sp, #108	; 0x6c
 801629c:	4648      	mov	r0, r9
 801629e:	f001 ff5a 	bl	8018156 <__gethex>
 80162a2:	f010 0407 	ands.w	r4, r0, #7
 80162a6:	4606      	mov	r6, r0
 80162a8:	d005      	beq.n	80162b6 <_strtod_l+0x7e>
 80162aa:	2c06      	cmp	r4, #6
 80162ac:	d12b      	bne.n	8016306 <_strtod_l+0xce>
 80162ae:	3501      	adds	r5, #1
 80162b0:	2300      	movs	r3, #0
 80162b2:	951b      	str	r5, [sp, #108]	; 0x6c
 80162b4:	930d      	str	r3, [sp, #52]	; 0x34
 80162b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	f040 859a 	bne.w	8016df2 <_strtod_l+0xbba>
 80162be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162c0:	b1e3      	cbz	r3, 80162fc <_strtod_l+0xc4>
 80162c2:	4652      	mov	r2, sl
 80162c4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80162c8:	ec43 2b10 	vmov	d0, r2, r3
 80162cc:	b021      	add	sp, #132	; 0x84
 80162ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162d2:	2a2b      	cmp	r2, #43	; 0x2b
 80162d4:	d015      	beq.n	8016302 <_strtod_l+0xca>
 80162d6:	2a2d      	cmp	r2, #45	; 0x2d
 80162d8:	d004      	beq.n	80162e4 <_strtod_l+0xac>
 80162da:	2a20      	cmp	r2, #32
 80162dc:	d1ca      	bne.n	8016274 <_strtod_l+0x3c>
 80162de:	3301      	adds	r3, #1
 80162e0:	931b      	str	r3, [sp, #108]	; 0x6c
 80162e2:	e7bf      	b.n	8016264 <_strtod_l+0x2c>
 80162e4:	2201      	movs	r2, #1
 80162e6:	920d      	str	r2, [sp, #52]	; 0x34
 80162e8:	1c5a      	adds	r2, r3, #1
 80162ea:	921b      	str	r2, [sp, #108]	; 0x6c
 80162ec:	785b      	ldrb	r3, [r3, #1]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d1c2      	bne.n	8016278 <_strtod_l+0x40>
 80162f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80162f4:	961b      	str	r6, [sp, #108]	; 0x6c
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	f040 8579 	bne.w	8016dee <_strtod_l+0xbb6>
 80162fc:	4652      	mov	r2, sl
 80162fe:	465b      	mov	r3, fp
 8016300:	e7e2      	b.n	80162c8 <_strtod_l+0x90>
 8016302:	2200      	movs	r2, #0
 8016304:	e7ef      	b.n	80162e6 <_strtod_l+0xae>
 8016306:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016308:	b13a      	cbz	r2, 801631a <_strtod_l+0xe2>
 801630a:	2135      	movs	r1, #53	; 0x35
 801630c:	a81e      	add	r0, sp, #120	; 0x78
 801630e:	f002 fe5d 	bl	8018fcc <__copybits>
 8016312:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016314:	4648      	mov	r0, r9
 8016316:	f002 fac9 	bl	80188ac <_Bfree>
 801631a:	3c01      	subs	r4, #1
 801631c:	2c04      	cmp	r4, #4
 801631e:	d806      	bhi.n	801632e <_strtod_l+0xf6>
 8016320:	e8df f004 	tbb	[pc, r4]
 8016324:	1714030a 	.word	0x1714030a
 8016328:	0a          	.byte	0x0a
 8016329:	00          	.byte	0x00
 801632a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801632e:	0730      	lsls	r0, r6, #28
 8016330:	d5c1      	bpl.n	80162b6 <_strtod_l+0x7e>
 8016332:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016336:	e7be      	b.n	80162b6 <_strtod_l+0x7e>
 8016338:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801633c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801633e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016342:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016346:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801634a:	e7f0      	b.n	801632e <_strtod_l+0xf6>
 801634c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80164c0 <_strtod_l+0x288>
 8016350:	e7ed      	b.n	801632e <_strtod_l+0xf6>
 8016352:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016356:	f04f 3aff 	mov.w	sl, #4294967295
 801635a:	e7e8      	b.n	801632e <_strtod_l+0xf6>
 801635c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801635e:	1c5a      	adds	r2, r3, #1
 8016360:	921b      	str	r2, [sp, #108]	; 0x6c
 8016362:	785b      	ldrb	r3, [r3, #1]
 8016364:	2b30      	cmp	r3, #48	; 0x30
 8016366:	d0f9      	beq.n	801635c <_strtod_l+0x124>
 8016368:	2b00      	cmp	r3, #0
 801636a:	d0a4      	beq.n	80162b6 <_strtod_l+0x7e>
 801636c:	2301      	movs	r3, #1
 801636e:	2500      	movs	r5, #0
 8016370:	9306      	str	r3, [sp, #24]
 8016372:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016374:	9308      	str	r3, [sp, #32]
 8016376:	9507      	str	r5, [sp, #28]
 8016378:	9505      	str	r5, [sp, #20]
 801637a:	220a      	movs	r2, #10
 801637c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801637e:	7807      	ldrb	r7, [r0, #0]
 8016380:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016384:	b2d9      	uxtb	r1, r3
 8016386:	2909      	cmp	r1, #9
 8016388:	d929      	bls.n	80163de <_strtod_l+0x1a6>
 801638a:	4622      	mov	r2, r4
 801638c:	f8d8 1000 	ldr.w	r1, [r8]
 8016390:	f003 fd8b 	bl	8019eaa <strncmp>
 8016394:	2800      	cmp	r0, #0
 8016396:	d031      	beq.n	80163fc <_strtod_l+0x1c4>
 8016398:	2000      	movs	r0, #0
 801639a:	9c05      	ldr	r4, [sp, #20]
 801639c:	9004      	str	r0, [sp, #16]
 801639e:	463b      	mov	r3, r7
 80163a0:	4602      	mov	r2, r0
 80163a2:	2b65      	cmp	r3, #101	; 0x65
 80163a4:	d001      	beq.n	80163aa <_strtod_l+0x172>
 80163a6:	2b45      	cmp	r3, #69	; 0x45
 80163a8:	d114      	bne.n	80163d4 <_strtod_l+0x19c>
 80163aa:	b924      	cbnz	r4, 80163b6 <_strtod_l+0x17e>
 80163ac:	b910      	cbnz	r0, 80163b4 <_strtod_l+0x17c>
 80163ae:	9b06      	ldr	r3, [sp, #24]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d09e      	beq.n	80162f2 <_strtod_l+0xba>
 80163b4:	2400      	movs	r4, #0
 80163b6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80163b8:	1c73      	adds	r3, r6, #1
 80163ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80163bc:	7873      	ldrb	r3, [r6, #1]
 80163be:	2b2b      	cmp	r3, #43	; 0x2b
 80163c0:	d078      	beq.n	80164b4 <_strtod_l+0x27c>
 80163c2:	2b2d      	cmp	r3, #45	; 0x2d
 80163c4:	d070      	beq.n	80164a8 <_strtod_l+0x270>
 80163c6:	f04f 0c00 	mov.w	ip, #0
 80163ca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80163ce:	2f09      	cmp	r7, #9
 80163d0:	d97c      	bls.n	80164cc <_strtod_l+0x294>
 80163d2:	961b      	str	r6, [sp, #108]	; 0x6c
 80163d4:	f04f 0e00 	mov.w	lr, #0
 80163d8:	e09a      	b.n	8016510 <_strtod_l+0x2d8>
 80163da:	2300      	movs	r3, #0
 80163dc:	e7c7      	b.n	801636e <_strtod_l+0x136>
 80163de:	9905      	ldr	r1, [sp, #20]
 80163e0:	2908      	cmp	r1, #8
 80163e2:	bfdd      	ittte	le
 80163e4:	9907      	ldrle	r1, [sp, #28]
 80163e6:	fb02 3301 	mlale	r3, r2, r1, r3
 80163ea:	9307      	strle	r3, [sp, #28]
 80163ec:	fb02 3505 	mlagt	r5, r2, r5, r3
 80163f0:	9b05      	ldr	r3, [sp, #20]
 80163f2:	3001      	adds	r0, #1
 80163f4:	3301      	adds	r3, #1
 80163f6:	9305      	str	r3, [sp, #20]
 80163f8:	901b      	str	r0, [sp, #108]	; 0x6c
 80163fa:	e7bf      	b.n	801637c <_strtod_l+0x144>
 80163fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80163fe:	191a      	adds	r2, r3, r4
 8016400:	921b      	str	r2, [sp, #108]	; 0x6c
 8016402:	9a05      	ldr	r2, [sp, #20]
 8016404:	5d1b      	ldrb	r3, [r3, r4]
 8016406:	2a00      	cmp	r2, #0
 8016408:	d037      	beq.n	801647a <_strtod_l+0x242>
 801640a:	9c05      	ldr	r4, [sp, #20]
 801640c:	4602      	mov	r2, r0
 801640e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016412:	2909      	cmp	r1, #9
 8016414:	d913      	bls.n	801643e <_strtod_l+0x206>
 8016416:	2101      	movs	r1, #1
 8016418:	9104      	str	r1, [sp, #16]
 801641a:	e7c2      	b.n	80163a2 <_strtod_l+0x16a>
 801641c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801641e:	1c5a      	adds	r2, r3, #1
 8016420:	921b      	str	r2, [sp, #108]	; 0x6c
 8016422:	785b      	ldrb	r3, [r3, #1]
 8016424:	3001      	adds	r0, #1
 8016426:	2b30      	cmp	r3, #48	; 0x30
 8016428:	d0f8      	beq.n	801641c <_strtod_l+0x1e4>
 801642a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801642e:	2a08      	cmp	r2, #8
 8016430:	f200 84e4 	bhi.w	8016dfc <_strtod_l+0xbc4>
 8016434:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016436:	9208      	str	r2, [sp, #32]
 8016438:	4602      	mov	r2, r0
 801643a:	2000      	movs	r0, #0
 801643c:	4604      	mov	r4, r0
 801643e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016442:	f100 0101 	add.w	r1, r0, #1
 8016446:	d012      	beq.n	801646e <_strtod_l+0x236>
 8016448:	440a      	add	r2, r1
 801644a:	eb00 0c04 	add.w	ip, r0, r4
 801644e:	4621      	mov	r1, r4
 8016450:	270a      	movs	r7, #10
 8016452:	458c      	cmp	ip, r1
 8016454:	d113      	bne.n	801647e <_strtod_l+0x246>
 8016456:	1821      	adds	r1, r4, r0
 8016458:	2908      	cmp	r1, #8
 801645a:	f104 0401 	add.w	r4, r4, #1
 801645e:	4404      	add	r4, r0
 8016460:	dc19      	bgt.n	8016496 <_strtod_l+0x25e>
 8016462:	9b07      	ldr	r3, [sp, #28]
 8016464:	210a      	movs	r1, #10
 8016466:	fb01 e303 	mla	r3, r1, r3, lr
 801646a:	9307      	str	r3, [sp, #28]
 801646c:	2100      	movs	r1, #0
 801646e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016470:	1c58      	adds	r0, r3, #1
 8016472:	901b      	str	r0, [sp, #108]	; 0x6c
 8016474:	785b      	ldrb	r3, [r3, #1]
 8016476:	4608      	mov	r0, r1
 8016478:	e7c9      	b.n	801640e <_strtod_l+0x1d6>
 801647a:	9805      	ldr	r0, [sp, #20]
 801647c:	e7d3      	b.n	8016426 <_strtod_l+0x1ee>
 801647e:	2908      	cmp	r1, #8
 8016480:	f101 0101 	add.w	r1, r1, #1
 8016484:	dc03      	bgt.n	801648e <_strtod_l+0x256>
 8016486:	9b07      	ldr	r3, [sp, #28]
 8016488:	437b      	muls	r3, r7
 801648a:	9307      	str	r3, [sp, #28]
 801648c:	e7e1      	b.n	8016452 <_strtod_l+0x21a>
 801648e:	2910      	cmp	r1, #16
 8016490:	bfd8      	it	le
 8016492:	437d      	mulle	r5, r7
 8016494:	e7dd      	b.n	8016452 <_strtod_l+0x21a>
 8016496:	2c10      	cmp	r4, #16
 8016498:	bfdc      	itt	le
 801649a:	210a      	movle	r1, #10
 801649c:	fb01 e505 	mlale	r5, r1, r5, lr
 80164a0:	e7e4      	b.n	801646c <_strtod_l+0x234>
 80164a2:	2301      	movs	r3, #1
 80164a4:	9304      	str	r3, [sp, #16]
 80164a6:	e781      	b.n	80163ac <_strtod_l+0x174>
 80164a8:	f04f 0c01 	mov.w	ip, #1
 80164ac:	1cb3      	adds	r3, r6, #2
 80164ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80164b0:	78b3      	ldrb	r3, [r6, #2]
 80164b2:	e78a      	b.n	80163ca <_strtod_l+0x192>
 80164b4:	f04f 0c00 	mov.w	ip, #0
 80164b8:	e7f8      	b.n	80164ac <_strtod_l+0x274>
 80164ba:	bf00      	nop
 80164bc:	0801a624 	.word	0x0801a624
 80164c0:	7ff00000 	.word	0x7ff00000
 80164c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80164c6:	1c5f      	adds	r7, r3, #1
 80164c8:	971b      	str	r7, [sp, #108]	; 0x6c
 80164ca:	785b      	ldrb	r3, [r3, #1]
 80164cc:	2b30      	cmp	r3, #48	; 0x30
 80164ce:	d0f9      	beq.n	80164c4 <_strtod_l+0x28c>
 80164d0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80164d4:	2f08      	cmp	r7, #8
 80164d6:	f63f af7d 	bhi.w	80163d4 <_strtod_l+0x19c>
 80164da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80164de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80164e0:	930a      	str	r3, [sp, #40]	; 0x28
 80164e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80164e4:	1c5f      	adds	r7, r3, #1
 80164e6:	971b      	str	r7, [sp, #108]	; 0x6c
 80164e8:	785b      	ldrb	r3, [r3, #1]
 80164ea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80164ee:	f1b8 0f09 	cmp.w	r8, #9
 80164f2:	d937      	bls.n	8016564 <_strtod_l+0x32c>
 80164f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80164f6:	1a7f      	subs	r7, r7, r1
 80164f8:	2f08      	cmp	r7, #8
 80164fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80164fe:	dc37      	bgt.n	8016570 <_strtod_l+0x338>
 8016500:	45be      	cmp	lr, r7
 8016502:	bfa8      	it	ge
 8016504:	46be      	movge	lr, r7
 8016506:	f1bc 0f00 	cmp.w	ip, #0
 801650a:	d001      	beq.n	8016510 <_strtod_l+0x2d8>
 801650c:	f1ce 0e00 	rsb	lr, lr, #0
 8016510:	2c00      	cmp	r4, #0
 8016512:	d151      	bne.n	80165b8 <_strtod_l+0x380>
 8016514:	2800      	cmp	r0, #0
 8016516:	f47f aece 	bne.w	80162b6 <_strtod_l+0x7e>
 801651a:	9a06      	ldr	r2, [sp, #24]
 801651c:	2a00      	cmp	r2, #0
 801651e:	f47f aeca 	bne.w	80162b6 <_strtod_l+0x7e>
 8016522:	9a04      	ldr	r2, [sp, #16]
 8016524:	2a00      	cmp	r2, #0
 8016526:	f47f aee4 	bne.w	80162f2 <_strtod_l+0xba>
 801652a:	2b4e      	cmp	r3, #78	; 0x4e
 801652c:	d027      	beq.n	801657e <_strtod_l+0x346>
 801652e:	dc21      	bgt.n	8016574 <_strtod_l+0x33c>
 8016530:	2b49      	cmp	r3, #73	; 0x49
 8016532:	f47f aede 	bne.w	80162f2 <_strtod_l+0xba>
 8016536:	49a0      	ldr	r1, [pc, #640]	; (80167b8 <_strtod_l+0x580>)
 8016538:	a81b      	add	r0, sp, #108	; 0x6c
 801653a:	f002 f83f 	bl	80185bc <__match>
 801653e:	2800      	cmp	r0, #0
 8016540:	f43f aed7 	beq.w	80162f2 <_strtod_l+0xba>
 8016544:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016546:	499d      	ldr	r1, [pc, #628]	; (80167bc <_strtod_l+0x584>)
 8016548:	3b01      	subs	r3, #1
 801654a:	a81b      	add	r0, sp, #108	; 0x6c
 801654c:	931b      	str	r3, [sp, #108]	; 0x6c
 801654e:	f002 f835 	bl	80185bc <__match>
 8016552:	b910      	cbnz	r0, 801655a <_strtod_l+0x322>
 8016554:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016556:	3301      	adds	r3, #1
 8016558:	931b      	str	r3, [sp, #108]	; 0x6c
 801655a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80167d0 <_strtod_l+0x598>
 801655e:	f04f 0a00 	mov.w	sl, #0
 8016562:	e6a8      	b.n	80162b6 <_strtod_l+0x7e>
 8016564:	210a      	movs	r1, #10
 8016566:	fb01 3e0e 	mla	lr, r1, lr, r3
 801656a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801656e:	e7b8      	b.n	80164e2 <_strtod_l+0x2aa>
 8016570:	46be      	mov	lr, r7
 8016572:	e7c8      	b.n	8016506 <_strtod_l+0x2ce>
 8016574:	2b69      	cmp	r3, #105	; 0x69
 8016576:	d0de      	beq.n	8016536 <_strtod_l+0x2fe>
 8016578:	2b6e      	cmp	r3, #110	; 0x6e
 801657a:	f47f aeba 	bne.w	80162f2 <_strtod_l+0xba>
 801657e:	4990      	ldr	r1, [pc, #576]	; (80167c0 <_strtod_l+0x588>)
 8016580:	a81b      	add	r0, sp, #108	; 0x6c
 8016582:	f002 f81b 	bl	80185bc <__match>
 8016586:	2800      	cmp	r0, #0
 8016588:	f43f aeb3 	beq.w	80162f2 <_strtod_l+0xba>
 801658c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801658e:	781b      	ldrb	r3, [r3, #0]
 8016590:	2b28      	cmp	r3, #40	; 0x28
 8016592:	d10e      	bne.n	80165b2 <_strtod_l+0x37a>
 8016594:	aa1e      	add	r2, sp, #120	; 0x78
 8016596:	498b      	ldr	r1, [pc, #556]	; (80167c4 <_strtod_l+0x58c>)
 8016598:	a81b      	add	r0, sp, #108	; 0x6c
 801659a:	f002 f823 	bl	80185e4 <__hexnan>
 801659e:	2805      	cmp	r0, #5
 80165a0:	d107      	bne.n	80165b2 <_strtod_l+0x37a>
 80165a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80165a4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80165a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80165ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80165b0:	e681      	b.n	80162b6 <_strtod_l+0x7e>
 80165b2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80167d8 <_strtod_l+0x5a0>
 80165b6:	e7d2      	b.n	801655e <_strtod_l+0x326>
 80165b8:	ebae 0302 	sub.w	r3, lr, r2
 80165bc:	9306      	str	r3, [sp, #24]
 80165be:	9b05      	ldr	r3, [sp, #20]
 80165c0:	9807      	ldr	r0, [sp, #28]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	bf08      	it	eq
 80165c6:	4623      	moveq	r3, r4
 80165c8:	2c10      	cmp	r4, #16
 80165ca:	9305      	str	r3, [sp, #20]
 80165cc:	46a0      	mov	r8, r4
 80165ce:	bfa8      	it	ge
 80165d0:	f04f 0810 	movge.w	r8, #16
 80165d4:	f7f1 fece 	bl	8008374 <__aeabi_ui2d>
 80165d8:	2c09      	cmp	r4, #9
 80165da:	4682      	mov	sl, r0
 80165dc:	468b      	mov	fp, r1
 80165de:	dc13      	bgt.n	8016608 <_strtod_l+0x3d0>
 80165e0:	9b06      	ldr	r3, [sp, #24]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	f43f ae67 	beq.w	80162b6 <_strtod_l+0x7e>
 80165e8:	9b06      	ldr	r3, [sp, #24]
 80165ea:	dd7a      	ble.n	80166e2 <_strtod_l+0x4aa>
 80165ec:	2b16      	cmp	r3, #22
 80165ee:	dc61      	bgt.n	80166b4 <_strtod_l+0x47c>
 80165f0:	4a75      	ldr	r2, [pc, #468]	; (80167c8 <_strtod_l+0x590>)
 80165f2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80165f6:	e9de 0100 	ldrd	r0, r1, [lr]
 80165fa:	4652      	mov	r2, sl
 80165fc:	465b      	mov	r3, fp
 80165fe:	f7f1 ff33 	bl	8008468 <__aeabi_dmul>
 8016602:	4682      	mov	sl, r0
 8016604:	468b      	mov	fp, r1
 8016606:	e656      	b.n	80162b6 <_strtod_l+0x7e>
 8016608:	4b6f      	ldr	r3, [pc, #444]	; (80167c8 <_strtod_l+0x590>)
 801660a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801660e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016612:	f7f1 ff29 	bl	8008468 <__aeabi_dmul>
 8016616:	4606      	mov	r6, r0
 8016618:	4628      	mov	r0, r5
 801661a:	460f      	mov	r7, r1
 801661c:	f7f1 feaa 	bl	8008374 <__aeabi_ui2d>
 8016620:	4602      	mov	r2, r0
 8016622:	460b      	mov	r3, r1
 8016624:	4630      	mov	r0, r6
 8016626:	4639      	mov	r1, r7
 8016628:	f7f1 fd68 	bl	80080fc <__adddf3>
 801662c:	2c0f      	cmp	r4, #15
 801662e:	4682      	mov	sl, r0
 8016630:	468b      	mov	fp, r1
 8016632:	ddd5      	ble.n	80165e0 <_strtod_l+0x3a8>
 8016634:	9b06      	ldr	r3, [sp, #24]
 8016636:	eba4 0808 	sub.w	r8, r4, r8
 801663a:	4498      	add	r8, r3
 801663c:	f1b8 0f00 	cmp.w	r8, #0
 8016640:	f340 8096 	ble.w	8016770 <_strtod_l+0x538>
 8016644:	f018 030f 	ands.w	r3, r8, #15
 8016648:	d00a      	beq.n	8016660 <_strtod_l+0x428>
 801664a:	495f      	ldr	r1, [pc, #380]	; (80167c8 <_strtod_l+0x590>)
 801664c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016650:	4652      	mov	r2, sl
 8016652:	465b      	mov	r3, fp
 8016654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016658:	f7f1 ff06 	bl	8008468 <__aeabi_dmul>
 801665c:	4682      	mov	sl, r0
 801665e:	468b      	mov	fp, r1
 8016660:	f038 080f 	bics.w	r8, r8, #15
 8016664:	d073      	beq.n	801674e <_strtod_l+0x516>
 8016666:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801666a:	dd47      	ble.n	80166fc <_strtod_l+0x4c4>
 801666c:	2400      	movs	r4, #0
 801666e:	46a0      	mov	r8, r4
 8016670:	9407      	str	r4, [sp, #28]
 8016672:	9405      	str	r4, [sp, #20]
 8016674:	2322      	movs	r3, #34	; 0x22
 8016676:	f8df b158 	ldr.w	fp, [pc, #344]	; 80167d0 <_strtod_l+0x598>
 801667a:	f8c9 3000 	str.w	r3, [r9]
 801667e:	f04f 0a00 	mov.w	sl, #0
 8016682:	9b07      	ldr	r3, [sp, #28]
 8016684:	2b00      	cmp	r3, #0
 8016686:	f43f ae16 	beq.w	80162b6 <_strtod_l+0x7e>
 801668a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801668c:	4648      	mov	r0, r9
 801668e:	f002 f90d 	bl	80188ac <_Bfree>
 8016692:	9905      	ldr	r1, [sp, #20]
 8016694:	4648      	mov	r0, r9
 8016696:	f002 f909 	bl	80188ac <_Bfree>
 801669a:	4641      	mov	r1, r8
 801669c:	4648      	mov	r0, r9
 801669e:	f002 f905 	bl	80188ac <_Bfree>
 80166a2:	9907      	ldr	r1, [sp, #28]
 80166a4:	4648      	mov	r0, r9
 80166a6:	f002 f901 	bl	80188ac <_Bfree>
 80166aa:	4621      	mov	r1, r4
 80166ac:	4648      	mov	r0, r9
 80166ae:	f002 f8fd 	bl	80188ac <_Bfree>
 80166b2:	e600      	b.n	80162b6 <_strtod_l+0x7e>
 80166b4:	9a06      	ldr	r2, [sp, #24]
 80166b6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80166ba:	4293      	cmp	r3, r2
 80166bc:	dbba      	blt.n	8016634 <_strtod_l+0x3fc>
 80166be:	4d42      	ldr	r5, [pc, #264]	; (80167c8 <_strtod_l+0x590>)
 80166c0:	f1c4 040f 	rsb	r4, r4, #15
 80166c4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80166c8:	4652      	mov	r2, sl
 80166ca:	465b      	mov	r3, fp
 80166cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166d0:	f7f1 feca 	bl	8008468 <__aeabi_dmul>
 80166d4:	9b06      	ldr	r3, [sp, #24]
 80166d6:	1b1c      	subs	r4, r3, r4
 80166d8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80166dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80166e0:	e78d      	b.n	80165fe <_strtod_l+0x3c6>
 80166e2:	f113 0f16 	cmn.w	r3, #22
 80166e6:	dba5      	blt.n	8016634 <_strtod_l+0x3fc>
 80166e8:	4a37      	ldr	r2, [pc, #220]	; (80167c8 <_strtod_l+0x590>)
 80166ea:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80166ee:	e9d2 2300 	ldrd	r2, r3, [r2]
 80166f2:	4650      	mov	r0, sl
 80166f4:	4659      	mov	r1, fp
 80166f6:	f7f1 ffe1 	bl	80086bc <__aeabi_ddiv>
 80166fa:	e782      	b.n	8016602 <_strtod_l+0x3ca>
 80166fc:	2300      	movs	r3, #0
 80166fe:	4e33      	ldr	r6, [pc, #204]	; (80167cc <_strtod_l+0x594>)
 8016700:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016704:	4650      	mov	r0, sl
 8016706:	4659      	mov	r1, fp
 8016708:	461d      	mov	r5, r3
 801670a:	f1b8 0f01 	cmp.w	r8, #1
 801670e:	dc21      	bgt.n	8016754 <_strtod_l+0x51c>
 8016710:	b10b      	cbz	r3, 8016716 <_strtod_l+0x4de>
 8016712:	4682      	mov	sl, r0
 8016714:	468b      	mov	fp, r1
 8016716:	4b2d      	ldr	r3, [pc, #180]	; (80167cc <_strtod_l+0x594>)
 8016718:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801671c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016720:	4652      	mov	r2, sl
 8016722:	465b      	mov	r3, fp
 8016724:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016728:	f7f1 fe9e 	bl	8008468 <__aeabi_dmul>
 801672c:	4b28      	ldr	r3, [pc, #160]	; (80167d0 <_strtod_l+0x598>)
 801672e:	460a      	mov	r2, r1
 8016730:	400b      	ands	r3, r1
 8016732:	4928      	ldr	r1, [pc, #160]	; (80167d4 <_strtod_l+0x59c>)
 8016734:	428b      	cmp	r3, r1
 8016736:	4682      	mov	sl, r0
 8016738:	d898      	bhi.n	801666c <_strtod_l+0x434>
 801673a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801673e:	428b      	cmp	r3, r1
 8016740:	bf86      	itte	hi
 8016742:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80167dc <_strtod_l+0x5a4>
 8016746:	f04f 3aff 	movhi.w	sl, #4294967295
 801674a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801674e:	2300      	movs	r3, #0
 8016750:	9304      	str	r3, [sp, #16]
 8016752:	e077      	b.n	8016844 <_strtod_l+0x60c>
 8016754:	f018 0f01 	tst.w	r8, #1
 8016758:	d006      	beq.n	8016768 <_strtod_l+0x530>
 801675a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016762:	f7f1 fe81 	bl	8008468 <__aeabi_dmul>
 8016766:	2301      	movs	r3, #1
 8016768:	3501      	adds	r5, #1
 801676a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801676e:	e7cc      	b.n	801670a <_strtod_l+0x4d2>
 8016770:	d0ed      	beq.n	801674e <_strtod_l+0x516>
 8016772:	f1c8 0800 	rsb	r8, r8, #0
 8016776:	f018 020f 	ands.w	r2, r8, #15
 801677a:	d00a      	beq.n	8016792 <_strtod_l+0x55a>
 801677c:	4b12      	ldr	r3, [pc, #72]	; (80167c8 <_strtod_l+0x590>)
 801677e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016782:	4650      	mov	r0, sl
 8016784:	4659      	mov	r1, fp
 8016786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801678a:	f7f1 ff97 	bl	80086bc <__aeabi_ddiv>
 801678e:	4682      	mov	sl, r0
 8016790:	468b      	mov	fp, r1
 8016792:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016796:	d0da      	beq.n	801674e <_strtod_l+0x516>
 8016798:	f1b8 0f1f 	cmp.w	r8, #31
 801679c:	dd20      	ble.n	80167e0 <_strtod_l+0x5a8>
 801679e:	2400      	movs	r4, #0
 80167a0:	46a0      	mov	r8, r4
 80167a2:	9407      	str	r4, [sp, #28]
 80167a4:	9405      	str	r4, [sp, #20]
 80167a6:	2322      	movs	r3, #34	; 0x22
 80167a8:	f04f 0a00 	mov.w	sl, #0
 80167ac:	f04f 0b00 	mov.w	fp, #0
 80167b0:	f8c9 3000 	str.w	r3, [r9]
 80167b4:	e765      	b.n	8016682 <_strtod_l+0x44a>
 80167b6:	bf00      	nop
 80167b8:	0801a5f1 	.word	0x0801a5f1
 80167bc:	0801a67b 	.word	0x0801a67b
 80167c0:	0801a5f9 	.word	0x0801a5f9
 80167c4:	0801a638 	.word	0x0801a638
 80167c8:	0801a720 	.word	0x0801a720
 80167cc:	0801a6f8 	.word	0x0801a6f8
 80167d0:	7ff00000 	.word	0x7ff00000
 80167d4:	7ca00000 	.word	0x7ca00000
 80167d8:	fff80000 	.word	0xfff80000
 80167dc:	7fefffff 	.word	0x7fefffff
 80167e0:	f018 0310 	ands.w	r3, r8, #16
 80167e4:	bf18      	it	ne
 80167e6:	236a      	movne	r3, #106	; 0x6a
 80167e8:	4da0      	ldr	r5, [pc, #640]	; (8016a6c <_strtod_l+0x834>)
 80167ea:	9304      	str	r3, [sp, #16]
 80167ec:	4650      	mov	r0, sl
 80167ee:	4659      	mov	r1, fp
 80167f0:	2300      	movs	r3, #0
 80167f2:	f1b8 0f00 	cmp.w	r8, #0
 80167f6:	f300 810a 	bgt.w	8016a0e <_strtod_l+0x7d6>
 80167fa:	b10b      	cbz	r3, 8016800 <_strtod_l+0x5c8>
 80167fc:	4682      	mov	sl, r0
 80167fe:	468b      	mov	fp, r1
 8016800:	9b04      	ldr	r3, [sp, #16]
 8016802:	b1bb      	cbz	r3, 8016834 <_strtod_l+0x5fc>
 8016804:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016808:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801680c:	2b00      	cmp	r3, #0
 801680e:	4659      	mov	r1, fp
 8016810:	dd10      	ble.n	8016834 <_strtod_l+0x5fc>
 8016812:	2b1f      	cmp	r3, #31
 8016814:	f340 8107 	ble.w	8016a26 <_strtod_l+0x7ee>
 8016818:	2b34      	cmp	r3, #52	; 0x34
 801681a:	bfde      	ittt	le
 801681c:	3b20      	suble	r3, #32
 801681e:	f04f 32ff 	movle.w	r2, #4294967295
 8016822:	fa02 f303 	lslle.w	r3, r2, r3
 8016826:	f04f 0a00 	mov.w	sl, #0
 801682a:	bfcc      	ite	gt
 801682c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016830:	ea03 0b01 	andle.w	fp, r3, r1
 8016834:	2200      	movs	r2, #0
 8016836:	2300      	movs	r3, #0
 8016838:	4650      	mov	r0, sl
 801683a:	4659      	mov	r1, fp
 801683c:	f7f2 f87c 	bl	8008938 <__aeabi_dcmpeq>
 8016840:	2800      	cmp	r0, #0
 8016842:	d1ac      	bne.n	801679e <_strtod_l+0x566>
 8016844:	9b07      	ldr	r3, [sp, #28]
 8016846:	9300      	str	r3, [sp, #0]
 8016848:	9a05      	ldr	r2, [sp, #20]
 801684a:	9908      	ldr	r1, [sp, #32]
 801684c:	4623      	mov	r3, r4
 801684e:	4648      	mov	r0, r9
 8016850:	f002 f87e 	bl	8018950 <__s2b>
 8016854:	9007      	str	r0, [sp, #28]
 8016856:	2800      	cmp	r0, #0
 8016858:	f43f af08 	beq.w	801666c <_strtod_l+0x434>
 801685c:	9a06      	ldr	r2, [sp, #24]
 801685e:	9b06      	ldr	r3, [sp, #24]
 8016860:	2a00      	cmp	r2, #0
 8016862:	f1c3 0300 	rsb	r3, r3, #0
 8016866:	bfa8      	it	ge
 8016868:	2300      	movge	r3, #0
 801686a:	930e      	str	r3, [sp, #56]	; 0x38
 801686c:	2400      	movs	r4, #0
 801686e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016872:	9316      	str	r3, [sp, #88]	; 0x58
 8016874:	46a0      	mov	r8, r4
 8016876:	9b07      	ldr	r3, [sp, #28]
 8016878:	4648      	mov	r0, r9
 801687a:	6859      	ldr	r1, [r3, #4]
 801687c:	f001 ffe2 	bl	8018844 <_Balloc>
 8016880:	9005      	str	r0, [sp, #20]
 8016882:	2800      	cmp	r0, #0
 8016884:	f43f aef6 	beq.w	8016674 <_strtod_l+0x43c>
 8016888:	9b07      	ldr	r3, [sp, #28]
 801688a:	691a      	ldr	r2, [r3, #16]
 801688c:	3202      	adds	r2, #2
 801688e:	f103 010c 	add.w	r1, r3, #12
 8016892:	0092      	lsls	r2, r2, #2
 8016894:	300c      	adds	r0, #12
 8016896:	f7fe fcf1 	bl	801527c <memcpy>
 801689a:	aa1e      	add	r2, sp, #120	; 0x78
 801689c:	a91d      	add	r1, sp, #116	; 0x74
 801689e:	ec4b ab10 	vmov	d0, sl, fp
 80168a2:	4648      	mov	r0, r9
 80168a4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80168a8:	f002 fb0e 	bl	8018ec8 <__d2b>
 80168ac:	901c      	str	r0, [sp, #112]	; 0x70
 80168ae:	2800      	cmp	r0, #0
 80168b0:	f43f aee0 	beq.w	8016674 <_strtod_l+0x43c>
 80168b4:	2101      	movs	r1, #1
 80168b6:	4648      	mov	r0, r9
 80168b8:	f002 f8d6 	bl	8018a68 <__i2b>
 80168bc:	4680      	mov	r8, r0
 80168be:	2800      	cmp	r0, #0
 80168c0:	f43f aed8 	beq.w	8016674 <_strtod_l+0x43c>
 80168c4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80168c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80168c8:	2e00      	cmp	r6, #0
 80168ca:	bfab      	itete	ge
 80168cc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80168ce:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80168d0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80168d2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80168d4:	bfac      	ite	ge
 80168d6:	18f7      	addge	r7, r6, r3
 80168d8:	1b9d      	sublt	r5, r3, r6
 80168da:	9b04      	ldr	r3, [sp, #16]
 80168dc:	1af6      	subs	r6, r6, r3
 80168de:	4416      	add	r6, r2
 80168e0:	4b63      	ldr	r3, [pc, #396]	; (8016a70 <_strtod_l+0x838>)
 80168e2:	3e01      	subs	r6, #1
 80168e4:	429e      	cmp	r6, r3
 80168e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80168ea:	f280 80af 	bge.w	8016a4c <_strtod_l+0x814>
 80168ee:	1b9b      	subs	r3, r3, r6
 80168f0:	2b1f      	cmp	r3, #31
 80168f2:	eba2 0203 	sub.w	r2, r2, r3
 80168f6:	f04f 0101 	mov.w	r1, #1
 80168fa:	f300 809b 	bgt.w	8016a34 <_strtod_l+0x7fc>
 80168fe:	fa01 f303 	lsl.w	r3, r1, r3
 8016902:	930f      	str	r3, [sp, #60]	; 0x3c
 8016904:	2300      	movs	r3, #0
 8016906:	930a      	str	r3, [sp, #40]	; 0x28
 8016908:	18be      	adds	r6, r7, r2
 801690a:	9b04      	ldr	r3, [sp, #16]
 801690c:	42b7      	cmp	r7, r6
 801690e:	4415      	add	r5, r2
 8016910:	441d      	add	r5, r3
 8016912:	463b      	mov	r3, r7
 8016914:	bfa8      	it	ge
 8016916:	4633      	movge	r3, r6
 8016918:	42ab      	cmp	r3, r5
 801691a:	bfa8      	it	ge
 801691c:	462b      	movge	r3, r5
 801691e:	2b00      	cmp	r3, #0
 8016920:	bfc2      	ittt	gt
 8016922:	1af6      	subgt	r6, r6, r3
 8016924:	1aed      	subgt	r5, r5, r3
 8016926:	1aff      	subgt	r7, r7, r3
 8016928:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801692a:	b1bb      	cbz	r3, 801695c <_strtod_l+0x724>
 801692c:	4641      	mov	r1, r8
 801692e:	461a      	mov	r2, r3
 8016930:	4648      	mov	r0, r9
 8016932:	f002 f939 	bl	8018ba8 <__pow5mult>
 8016936:	4680      	mov	r8, r0
 8016938:	2800      	cmp	r0, #0
 801693a:	f43f ae9b 	beq.w	8016674 <_strtod_l+0x43c>
 801693e:	4601      	mov	r1, r0
 8016940:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016942:	4648      	mov	r0, r9
 8016944:	f002 f899 	bl	8018a7a <__multiply>
 8016948:	900c      	str	r0, [sp, #48]	; 0x30
 801694a:	2800      	cmp	r0, #0
 801694c:	f43f ae92 	beq.w	8016674 <_strtod_l+0x43c>
 8016950:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016952:	4648      	mov	r0, r9
 8016954:	f001 ffaa 	bl	80188ac <_Bfree>
 8016958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801695a:	931c      	str	r3, [sp, #112]	; 0x70
 801695c:	2e00      	cmp	r6, #0
 801695e:	dc7a      	bgt.n	8016a56 <_strtod_l+0x81e>
 8016960:	9b06      	ldr	r3, [sp, #24]
 8016962:	2b00      	cmp	r3, #0
 8016964:	dd08      	ble.n	8016978 <_strtod_l+0x740>
 8016966:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016968:	9905      	ldr	r1, [sp, #20]
 801696a:	4648      	mov	r0, r9
 801696c:	f002 f91c 	bl	8018ba8 <__pow5mult>
 8016970:	9005      	str	r0, [sp, #20]
 8016972:	2800      	cmp	r0, #0
 8016974:	f43f ae7e 	beq.w	8016674 <_strtod_l+0x43c>
 8016978:	2d00      	cmp	r5, #0
 801697a:	dd08      	ble.n	801698e <_strtod_l+0x756>
 801697c:	462a      	mov	r2, r5
 801697e:	9905      	ldr	r1, [sp, #20]
 8016980:	4648      	mov	r0, r9
 8016982:	f002 f95f 	bl	8018c44 <__lshift>
 8016986:	9005      	str	r0, [sp, #20]
 8016988:	2800      	cmp	r0, #0
 801698a:	f43f ae73 	beq.w	8016674 <_strtod_l+0x43c>
 801698e:	2f00      	cmp	r7, #0
 8016990:	dd08      	ble.n	80169a4 <_strtod_l+0x76c>
 8016992:	4641      	mov	r1, r8
 8016994:	463a      	mov	r2, r7
 8016996:	4648      	mov	r0, r9
 8016998:	f002 f954 	bl	8018c44 <__lshift>
 801699c:	4680      	mov	r8, r0
 801699e:	2800      	cmp	r0, #0
 80169a0:	f43f ae68 	beq.w	8016674 <_strtod_l+0x43c>
 80169a4:	9a05      	ldr	r2, [sp, #20]
 80169a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80169a8:	4648      	mov	r0, r9
 80169aa:	f002 f9b9 	bl	8018d20 <__mdiff>
 80169ae:	4604      	mov	r4, r0
 80169b0:	2800      	cmp	r0, #0
 80169b2:	f43f ae5f 	beq.w	8016674 <_strtod_l+0x43c>
 80169b6:	68c3      	ldr	r3, [r0, #12]
 80169b8:	930c      	str	r3, [sp, #48]	; 0x30
 80169ba:	2300      	movs	r3, #0
 80169bc:	60c3      	str	r3, [r0, #12]
 80169be:	4641      	mov	r1, r8
 80169c0:	f002 f994 	bl	8018cec <__mcmp>
 80169c4:	2800      	cmp	r0, #0
 80169c6:	da55      	bge.n	8016a74 <_strtod_l+0x83c>
 80169c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169ca:	b9e3      	cbnz	r3, 8016a06 <_strtod_l+0x7ce>
 80169cc:	f1ba 0f00 	cmp.w	sl, #0
 80169d0:	d119      	bne.n	8016a06 <_strtod_l+0x7ce>
 80169d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80169d6:	b9b3      	cbnz	r3, 8016a06 <_strtod_l+0x7ce>
 80169d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80169dc:	0d1b      	lsrs	r3, r3, #20
 80169de:	051b      	lsls	r3, r3, #20
 80169e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80169e4:	d90f      	bls.n	8016a06 <_strtod_l+0x7ce>
 80169e6:	6963      	ldr	r3, [r4, #20]
 80169e8:	b913      	cbnz	r3, 80169f0 <_strtod_l+0x7b8>
 80169ea:	6923      	ldr	r3, [r4, #16]
 80169ec:	2b01      	cmp	r3, #1
 80169ee:	dd0a      	ble.n	8016a06 <_strtod_l+0x7ce>
 80169f0:	4621      	mov	r1, r4
 80169f2:	2201      	movs	r2, #1
 80169f4:	4648      	mov	r0, r9
 80169f6:	f002 f925 	bl	8018c44 <__lshift>
 80169fa:	4641      	mov	r1, r8
 80169fc:	4604      	mov	r4, r0
 80169fe:	f002 f975 	bl	8018cec <__mcmp>
 8016a02:	2800      	cmp	r0, #0
 8016a04:	dc67      	bgt.n	8016ad6 <_strtod_l+0x89e>
 8016a06:	9b04      	ldr	r3, [sp, #16]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d171      	bne.n	8016af0 <_strtod_l+0x8b8>
 8016a0c:	e63d      	b.n	801668a <_strtod_l+0x452>
 8016a0e:	f018 0f01 	tst.w	r8, #1
 8016a12:	d004      	beq.n	8016a1e <_strtod_l+0x7e6>
 8016a14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016a18:	f7f1 fd26 	bl	8008468 <__aeabi_dmul>
 8016a1c:	2301      	movs	r3, #1
 8016a1e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016a22:	3508      	adds	r5, #8
 8016a24:	e6e5      	b.n	80167f2 <_strtod_l+0x5ba>
 8016a26:	f04f 32ff 	mov.w	r2, #4294967295
 8016a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8016a2e:	ea03 0a0a 	and.w	sl, r3, sl
 8016a32:	e6ff      	b.n	8016834 <_strtod_l+0x5fc>
 8016a34:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016a38:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016a3c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016a40:	36e2      	adds	r6, #226	; 0xe2
 8016a42:	fa01 f306 	lsl.w	r3, r1, r6
 8016a46:	930a      	str	r3, [sp, #40]	; 0x28
 8016a48:	910f      	str	r1, [sp, #60]	; 0x3c
 8016a4a:	e75d      	b.n	8016908 <_strtod_l+0x6d0>
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8016a50:	2301      	movs	r3, #1
 8016a52:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a54:	e758      	b.n	8016908 <_strtod_l+0x6d0>
 8016a56:	4632      	mov	r2, r6
 8016a58:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016a5a:	4648      	mov	r0, r9
 8016a5c:	f002 f8f2 	bl	8018c44 <__lshift>
 8016a60:	901c      	str	r0, [sp, #112]	; 0x70
 8016a62:	2800      	cmp	r0, #0
 8016a64:	f47f af7c 	bne.w	8016960 <_strtod_l+0x728>
 8016a68:	e604      	b.n	8016674 <_strtod_l+0x43c>
 8016a6a:	bf00      	nop
 8016a6c:	0801a650 	.word	0x0801a650
 8016a70:	fffffc02 	.word	0xfffffc02
 8016a74:	465d      	mov	r5, fp
 8016a76:	f040 8086 	bne.w	8016b86 <_strtod_l+0x94e>
 8016a7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016a7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016a80:	b32a      	cbz	r2, 8016ace <_strtod_l+0x896>
 8016a82:	4aaf      	ldr	r2, [pc, #700]	; (8016d40 <_strtod_l+0xb08>)
 8016a84:	4293      	cmp	r3, r2
 8016a86:	d153      	bne.n	8016b30 <_strtod_l+0x8f8>
 8016a88:	9b04      	ldr	r3, [sp, #16]
 8016a8a:	4650      	mov	r0, sl
 8016a8c:	b1d3      	cbz	r3, 8016ac4 <_strtod_l+0x88c>
 8016a8e:	4aad      	ldr	r2, [pc, #692]	; (8016d44 <_strtod_l+0xb0c>)
 8016a90:	402a      	ands	r2, r5
 8016a92:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016a96:	f04f 31ff 	mov.w	r1, #4294967295
 8016a9a:	d816      	bhi.n	8016aca <_strtod_l+0x892>
 8016a9c:	0d12      	lsrs	r2, r2, #20
 8016a9e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8016aa6:	4298      	cmp	r0, r3
 8016aa8:	d142      	bne.n	8016b30 <_strtod_l+0x8f8>
 8016aaa:	4ba7      	ldr	r3, [pc, #668]	; (8016d48 <_strtod_l+0xb10>)
 8016aac:	429d      	cmp	r5, r3
 8016aae:	d102      	bne.n	8016ab6 <_strtod_l+0x87e>
 8016ab0:	3001      	adds	r0, #1
 8016ab2:	f43f addf 	beq.w	8016674 <_strtod_l+0x43c>
 8016ab6:	4ba3      	ldr	r3, [pc, #652]	; (8016d44 <_strtod_l+0xb0c>)
 8016ab8:	402b      	ands	r3, r5
 8016aba:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016abe:	f04f 0a00 	mov.w	sl, #0
 8016ac2:	e7a0      	b.n	8016a06 <_strtod_l+0x7ce>
 8016ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ac8:	e7ed      	b.n	8016aa6 <_strtod_l+0x86e>
 8016aca:	460b      	mov	r3, r1
 8016acc:	e7eb      	b.n	8016aa6 <_strtod_l+0x86e>
 8016ace:	bb7b      	cbnz	r3, 8016b30 <_strtod_l+0x8f8>
 8016ad0:	f1ba 0f00 	cmp.w	sl, #0
 8016ad4:	d12c      	bne.n	8016b30 <_strtod_l+0x8f8>
 8016ad6:	9904      	ldr	r1, [sp, #16]
 8016ad8:	4a9a      	ldr	r2, [pc, #616]	; (8016d44 <_strtod_l+0xb0c>)
 8016ada:	465b      	mov	r3, fp
 8016adc:	b1f1      	cbz	r1, 8016b1c <_strtod_l+0x8e4>
 8016ade:	ea02 010b 	and.w	r1, r2, fp
 8016ae2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016ae6:	dc19      	bgt.n	8016b1c <_strtod_l+0x8e4>
 8016ae8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016aec:	f77f ae5b 	ble.w	80167a6 <_strtod_l+0x56e>
 8016af0:	4a96      	ldr	r2, [pc, #600]	; (8016d4c <_strtod_l+0xb14>)
 8016af2:	2300      	movs	r3, #0
 8016af4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016af8:	4650      	mov	r0, sl
 8016afa:	4659      	mov	r1, fp
 8016afc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016b00:	f7f1 fcb2 	bl	8008468 <__aeabi_dmul>
 8016b04:	4682      	mov	sl, r0
 8016b06:	468b      	mov	fp, r1
 8016b08:	2900      	cmp	r1, #0
 8016b0a:	f47f adbe 	bne.w	801668a <_strtod_l+0x452>
 8016b0e:	2800      	cmp	r0, #0
 8016b10:	f47f adbb 	bne.w	801668a <_strtod_l+0x452>
 8016b14:	2322      	movs	r3, #34	; 0x22
 8016b16:	f8c9 3000 	str.w	r3, [r9]
 8016b1a:	e5b6      	b.n	801668a <_strtod_l+0x452>
 8016b1c:	4013      	ands	r3, r2
 8016b1e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016b22:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016b26:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016b2a:	f04f 3aff 	mov.w	sl, #4294967295
 8016b2e:	e76a      	b.n	8016a06 <_strtod_l+0x7ce>
 8016b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b32:	b193      	cbz	r3, 8016b5a <_strtod_l+0x922>
 8016b34:	422b      	tst	r3, r5
 8016b36:	f43f af66 	beq.w	8016a06 <_strtod_l+0x7ce>
 8016b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b3c:	9a04      	ldr	r2, [sp, #16]
 8016b3e:	4650      	mov	r0, sl
 8016b40:	4659      	mov	r1, fp
 8016b42:	b173      	cbz	r3, 8016b62 <_strtod_l+0x92a>
 8016b44:	f7ff fb5c 	bl	8016200 <sulp>
 8016b48:	4602      	mov	r2, r0
 8016b4a:	460b      	mov	r3, r1
 8016b4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016b50:	f7f1 fad4 	bl	80080fc <__adddf3>
 8016b54:	4682      	mov	sl, r0
 8016b56:	468b      	mov	fp, r1
 8016b58:	e755      	b.n	8016a06 <_strtod_l+0x7ce>
 8016b5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b5c:	ea13 0f0a 	tst.w	r3, sl
 8016b60:	e7e9      	b.n	8016b36 <_strtod_l+0x8fe>
 8016b62:	f7ff fb4d 	bl	8016200 <sulp>
 8016b66:	4602      	mov	r2, r0
 8016b68:	460b      	mov	r3, r1
 8016b6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016b6e:	f7f1 fac3 	bl	80080f8 <__aeabi_dsub>
 8016b72:	2200      	movs	r2, #0
 8016b74:	2300      	movs	r3, #0
 8016b76:	4682      	mov	sl, r0
 8016b78:	468b      	mov	fp, r1
 8016b7a:	f7f1 fedd 	bl	8008938 <__aeabi_dcmpeq>
 8016b7e:	2800      	cmp	r0, #0
 8016b80:	f47f ae11 	bne.w	80167a6 <_strtod_l+0x56e>
 8016b84:	e73f      	b.n	8016a06 <_strtod_l+0x7ce>
 8016b86:	4641      	mov	r1, r8
 8016b88:	4620      	mov	r0, r4
 8016b8a:	f002 f9ec 	bl	8018f66 <__ratio>
 8016b8e:	ec57 6b10 	vmov	r6, r7, d0
 8016b92:	2200      	movs	r2, #0
 8016b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016b98:	ee10 0a10 	vmov	r0, s0
 8016b9c:	4639      	mov	r1, r7
 8016b9e:	f7f1 fedf 	bl	8008960 <__aeabi_dcmple>
 8016ba2:	2800      	cmp	r0, #0
 8016ba4:	d077      	beq.n	8016c96 <_strtod_l+0xa5e>
 8016ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d04a      	beq.n	8016c42 <_strtod_l+0xa0a>
 8016bac:	4b68      	ldr	r3, [pc, #416]	; (8016d50 <_strtod_l+0xb18>)
 8016bae:	2200      	movs	r2, #0
 8016bb0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016bb4:	4f66      	ldr	r7, [pc, #408]	; (8016d50 <_strtod_l+0xb18>)
 8016bb6:	2600      	movs	r6, #0
 8016bb8:	4b62      	ldr	r3, [pc, #392]	; (8016d44 <_strtod_l+0xb0c>)
 8016bba:	402b      	ands	r3, r5
 8016bbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8016bbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016bc0:	4b64      	ldr	r3, [pc, #400]	; (8016d54 <_strtod_l+0xb1c>)
 8016bc2:	429a      	cmp	r2, r3
 8016bc4:	f040 80ce 	bne.w	8016d64 <_strtod_l+0xb2c>
 8016bc8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016bcc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016bd0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016bd4:	ec4b ab10 	vmov	d0, sl, fp
 8016bd8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016bdc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016be0:	f002 f8fc 	bl	8018ddc <__ulp>
 8016be4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016be8:	ec53 2b10 	vmov	r2, r3, d0
 8016bec:	f7f1 fc3c 	bl	8008468 <__aeabi_dmul>
 8016bf0:	4652      	mov	r2, sl
 8016bf2:	465b      	mov	r3, fp
 8016bf4:	f7f1 fa82 	bl	80080fc <__adddf3>
 8016bf8:	460b      	mov	r3, r1
 8016bfa:	4952      	ldr	r1, [pc, #328]	; (8016d44 <_strtod_l+0xb0c>)
 8016bfc:	4a56      	ldr	r2, [pc, #344]	; (8016d58 <_strtod_l+0xb20>)
 8016bfe:	4019      	ands	r1, r3
 8016c00:	4291      	cmp	r1, r2
 8016c02:	4682      	mov	sl, r0
 8016c04:	d95b      	bls.n	8016cbe <_strtod_l+0xa86>
 8016c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c08:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016c0c:	4293      	cmp	r3, r2
 8016c0e:	d103      	bne.n	8016c18 <_strtod_l+0x9e0>
 8016c10:	9b08      	ldr	r3, [sp, #32]
 8016c12:	3301      	adds	r3, #1
 8016c14:	f43f ad2e 	beq.w	8016674 <_strtod_l+0x43c>
 8016c18:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016d48 <_strtod_l+0xb10>
 8016c1c:	f04f 3aff 	mov.w	sl, #4294967295
 8016c20:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016c22:	4648      	mov	r0, r9
 8016c24:	f001 fe42 	bl	80188ac <_Bfree>
 8016c28:	9905      	ldr	r1, [sp, #20]
 8016c2a:	4648      	mov	r0, r9
 8016c2c:	f001 fe3e 	bl	80188ac <_Bfree>
 8016c30:	4641      	mov	r1, r8
 8016c32:	4648      	mov	r0, r9
 8016c34:	f001 fe3a 	bl	80188ac <_Bfree>
 8016c38:	4621      	mov	r1, r4
 8016c3a:	4648      	mov	r0, r9
 8016c3c:	f001 fe36 	bl	80188ac <_Bfree>
 8016c40:	e619      	b.n	8016876 <_strtod_l+0x63e>
 8016c42:	f1ba 0f00 	cmp.w	sl, #0
 8016c46:	d11a      	bne.n	8016c7e <_strtod_l+0xa46>
 8016c48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016c4c:	b9eb      	cbnz	r3, 8016c8a <_strtod_l+0xa52>
 8016c4e:	2200      	movs	r2, #0
 8016c50:	4b3f      	ldr	r3, [pc, #252]	; (8016d50 <_strtod_l+0xb18>)
 8016c52:	4630      	mov	r0, r6
 8016c54:	4639      	mov	r1, r7
 8016c56:	f7f1 fe79 	bl	800894c <__aeabi_dcmplt>
 8016c5a:	b9c8      	cbnz	r0, 8016c90 <_strtod_l+0xa58>
 8016c5c:	4630      	mov	r0, r6
 8016c5e:	4639      	mov	r1, r7
 8016c60:	2200      	movs	r2, #0
 8016c62:	4b3e      	ldr	r3, [pc, #248]	; (8016d5c <_strtod_l+0xb24>)
 8016c64:	f7f1 fc00 	bl	8008468 <__aeabi_dmul>
 8016c68:	4606      	mov	r6, r0
 8016c6a:	460f      	mov	r7, r1
 8016c6c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016c70:	9618      	str	r6, [sp, #96]	; 0x60
 8016c72:	9319      	str	r3, [sp, #100]	; 0x64
 8016c74:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016c78:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016c7c:	e79c      	b.n	8016bb8 <_strtod_l+0x980>
 8016c7e:	f1ba 0f01 	cmp.w	sl, #1
 8016c82:	d102      	bne.n	8016c8a <_strtod_l+0xa52>
 8016c84:	2d00      	cmp	r5, #0
 8016c86:	f43f ad8e 	beq.w	80167a6 <_strtod_l+0x56e>
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	4b34      	ldr	r3, [pc, #208]	; (8016d60 <_strtod_l+0xb28>)
 8016c8e:	e78f      	b.n	8016bb0 <_strtod_l+0x978>
 8016c90:	2600      	movs	r6, #0
 8016c92:	4f32      	ldr	r7, [pc, #200]	; (8016d5c <_strtod_l+0xb24>)
 8016c94:	e7ea      	b.n	8016c6c <_strtod_l+0xa34>
 8016c96:	4b31      	ldr	r3, [pc, #196]	; (8016d5c <_strtod_l+0xb24>)
 8016c98:	4630      	mov	r0, r6
 8016c9a:	4639      	mov	r1, r7
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	f7f1 fbe3 	bl	8008468 <__aeabi_dmul>
 8016ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ca4:	4606      	mov	r6, r0
 8016ca6:	460f      	mov	r7, r1
 8016ca8:	b933      	cbnz	r3, 8016cb8 <_strtod_l+0xa80>
 8016caa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016cae:	9010      	str	r0, [sp, #64]	; 0x40
 8016cb0:	9311      	str	r3, [sp, #68]	; 0x44
 8016cb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016cb6:	e7df      	b.n	8016c78 <_strtod_l+0xa40>
 8016cb8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016cbc:	e7f9      	b.n	8016cb2 <_strtod_l+0xa7a>
 8016cbe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016cc2:	9b04      	ldr	r3, [sp, #16]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d1ab      	bne.n	8016c20 <_strtod_l+0x9e8>
 8016cc8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016ccc:	0d1b      	lsrs	r3, r3, #20
 8016cce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016cd0:	051b      	lsls	r3, r3, #20
 8016cd2:	429a      	cmp	r2, r3
 8016cd4:	465d      	mov	r5, fp
 8016cd6:	d1a3      	bne.n	8016c20 <_strtod_l+0x9e8>
 8016cd8:	4639      	mov	r1, r7
 8016cda:	4630      	mov	r0, r6
 8016cdc:	f7f1 fe74 	bl	80089c8 <__aeabi_d2iz>
 8016ce0:	f7f1 fb58 	bl	8008394 <__aeabi_i2d>
 8016ce4:	460b      	mov	r3, r1
 8016ce6:	4602      	mov	r2, r0
 8016ce8:	4639      	mov	r1, r7
 8016cea:	4630      	mov	r0, r6
 8016cec:	f7f1 fa04 	bl	80080f8 <__aeabi_dsub>
 8016cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cf2:	4606      	mov	r6, r0
 8016cf4:	460f      	mov	r7, r1
 8016cf6:	b933      	cbnz	r3, 8016d06 <_strtod_l+0xace>
 8016cf8:	f1ba 0f00 	cmp.w	sl, #0
 8016cfc:	d103      	bne.n	8016d06 <_strtod_l+0xace>
 8016cfe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016d02:	2d00      	cmp	r5, #0
 8016d04:	d06d      	beq.n	8016de2 <_strtod_l+0xbaa>
 8016d06:	a30a      	add	r3, pc, #40	; (adr r3, 8016d30 <_strtod_l+0xaf8>)
 8016d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d0c:	4630      	mov	r0, r6
 8016d0e:	4639      	mov	r1, r7
 8016d10:	f7f1 fe1c 	bl	800894c <__aeabi_dcmplt>
 8016d14:	2800      	cmp	r0, #0
 8016d16:	f47f acb8 	bne.w	801668a <_strtod_l+0x452>
 8016d1a:	a307      	add	r3, pc, #28	; (adr r3, 8016d38 <_strtod_l+0xb00>)
 8016d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d20:	4630      	mov	r0, r6
 8016d22:	4639      	mov	r1, r7
 8016d24:	f7f1 fe30 	bl	8008988 <__aeabi_dcmpgt>
 8016d28:	2800      	cmp	r0, #0
 8016d2a:	f43f af79 	beq.w	8016c20 <_strtod_l+0x9e8>
 8016d2e:	e4ac      	b.n	801668a <_strtod_l+0x452>
 8016d30:	94a03595 	.word	0x94a03595
 8016d34:	3fdfffff 	.word	0x3fdfffff
 8016d38:	35afe535 	.word	0x35afe535
 8016d3c:	3fe00000 	.word	0x3fe00000
 8016d40:	000fffff 	.word	0x000fffff
 8016d44:	7ff00000 	.word	0x7ff00000
 8016d48:	7fefffff 	.word	0x7fefffff
 8016d4c:	39500000 	.word	0x39500000
 8016d50:	3ff00000 	.word	0x3ff00000
 8016d54:	7fe00000 	.word	0x7fe00000
 8016d58:	7c9fffff 	.word	0x7c9fffff
 8016d5c:	3fe00000 	.word	0x3fe00000
 8016d60:	bff00000 	.word	0xbff00000
 8016d64:	9b04      	ldr	r3, [sp, #16]
 8016d66:	b333      	cbz	r3, 8016db6 <_strtod_l+0xb7e>
 8016d68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d6a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016d6e:	d822      	bhi.n	8016db6 <_strtod_l+0xb7e>
 8016d70:	a327      	add	r3, pc, #156	; (adr r3, 8016e10 <_strtod_l+0xbd8>)
 8016d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d76:	4630      	mov	r0, r6
 8016d78:	4639      	mov	r1, r7
 8016d7a:	f7f1 fdf1 	bl	8008960 <__aeabi_dcmple>
 8016d7e:	b1a0      	cbz	r0, 8016daa <_strtod_l+0xb72>
 8016d80:	4639      	mov	r1, r7
 8016d82:	4630      	mov	r0, r6
 8016d84:	f7f1 fe48 	bl	8008a18 <__aeabi_d2uiz>
 8016d88:	2800      	cmp	r0, #0
 8016d8a:	bf08      	it	eq
 8016d8c:	2001      	moveq	r0, #1
 8016d8e:	f7f1 faf1 	bl	8008374 <__aeabi_ui2d>
 8016d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d94:	4606      	mov	r6, r0
 8016d96:	460f      	mov	r7, r1
 8016d98:	bb03      	cbnz	r3, 8016ddc <_strtod_l+0xba4>
 8016d9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d9e:	9012      	str	r0, [sp, #72]	; 0x48
 8016da0:	9313      	str	r3, [sp, #76]	; 0x4c
 8016da2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016da6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016dac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016dae:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016db2:	1a9b      	subs	r3, r3, r2
 8016db4:	930b      	str	r3, [sp, #44]	; 0x2c
 8016db6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016dba:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016dbe:	f002 f80d 	bl	8018ddc <__ulp>
 8016dc2:	4650      	mov	r0, sl
 8016dc4:	ec53 2b10 	vmov	r2, r3, d0
 8016dc8:	4659      	mov	r1, fp
 8016dca:	f7f1 fb4d 	bl	8008468 <__aeabi_dmul>
 8016dce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016dd2:	f7f1 f993 	bl	80080fc <__adddf3>
 8016dd6:	4682      	mov	sl, r0
 8016dd8:	468b      	mov	fp, r1
 8016dda:	e772      	b.n	8016cc2 <_strtod_l+0xa8a>
 8016ddc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016de0:	e7df      	b.n	8016da2 <_strtod_l+0xb6a>
 8016de2:	a30d      	add	r3, pc, #52	; (adr r3, 8016e18 <_strtod_l+0xbe0>)
 8016de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016de8:	f7f1 fdb0 	bl	800894c <__aeabi_dcmplt>
 8016dec:	e79c      	b.n	8016d28 <_strtod_l+0xaf0>
 8016dee:	2300      	movs	r3, #0
 8016df0:	930d      	str	r3, [sp, #52]	; 0x34
 8016df2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016df4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016df6:	6013      	str	r3, [r2, #0]
 8016df8:	f7ff ba61 	b.w	80162be <_strtod_l+0x86>
 8016dfc:	2b65      	cmp	r3, #101	; 0x65
 8016dfe:	f04f 0200 	mov.w	r2, #0
 8016e02:	f43f ab4e 	beq.w	80164a2 <_strtod_l+0x26a>
 8016e06:	2101      	movs	r1, #1
 8016e08:	4614      	mov	r4, r2
 8016e0a:	9104      	str	r1, [sp, #16]
 8016e0c:	f7ff bacb 	b.w	80163a6 <_strtod_l+0x16e>
 8016e10:	ffc00000 	.word	0xffc00000
 8016e14:	41dfffff 	.word	0x41dfffff
 8016e18:	94a03595 	.word	0x94a03595
 8016e1c:	3fcfffff 	.word	0x3fcfffff

08016e20 <_strtod_r>:
 8016e20:	4b05      	ldr	r3, [pc, #20]	; (8016e38 <_strtod_r+0x18>)
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	b410      	push	{r4}
 8016e26:	6a1b      	ldr	r3, [r3, #32]
 8016e28:	4c04      	ldr	r4, [pc, #16]	; (8016e3c <_strtod_r+0x1c>)
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	bf08      	it	eq
 8016e2e:	4623      	moveq	r3, r4
 8016e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e34:	f7ff ba00 	b.w	8016238 <_strtod_l>
 8016e38:	20000028 	.word	0x20000028
 8016e3c:	2000008c 	.word	0x2000008c

08016e40 <_strtol_l.isra.0>:
 8016e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e44:	4680      	mov	r8, r0
 8016e46:	4689      	mov	r9, r1
 8016e48:	4692      	mov	sl, r2
 8016e4a:	461e      	mov	r6, r3
 8016e4c:	460f      	mov	r7, r1
 8016e4e:	463d      	mov	r5, r7
 8016e50:	9808      	ldr	r0, [sp, #32]
 8016e52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e56:	f001 fc55 	bl	8018704 <__locale_ctype_ptr_l>
 8016e5a:	4420      	add	r0, r4
 8016e5c:	7843      	ldrb	r3, [r0, #1]
 8016e5e:	f013 0308 	ands.w	r3, r3, #8
 8016e62:	d132      	bne.n	8016eca <_strtol_l.isra.0+0x8a>
 8016e64:	2c2d      	cmp	r4, #45	; 0x2d
 8016e66:	d132      	bne.n	8016ece <_strtol_l.isra.0+0x8e>
 8016e68:	787c      	ldrb	r4, [r7, #1]
 8016e6a:	1cbd      	adds	r5, r7, #2
 8016e6c:	2201      	movs	r2, #1
 8016e6e:	2e00      	cmp	r6, #0
 8016e70:	d05d      	beq.n	8016f2e <_strtol_l.isra.0+0xee>
 8016e72:	2e10      	cmp	r6, #16
 8016e74:	d109      	bne.n	8016e8a <_strtol_l.isra.0+0x4a>
 8016e76:	2c30      	cmp	r4, #48	; 0x30
 8016e78:	d107      	bne.n	8016e8a <_strtol_l.isra.0+0x4a>
 8016e7a:	782b      	ldrb	r3, [r5, #0]
 8016e7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016e80:	2b58      	cmp	r3, #88	; 0x58
 8016e82:	d14f      	bne.n	8016f24 <_strtol_l.isra.0+0xe4>
 8016e84:	786c      	ldrb	r4, [r5, #1]
 8016e86:	2610      	movs	r6, #16
 8016e88:	3502      	adds	r5, #2
 8016e8a:	2a00      	cmp	r2, #0
 8016e8c:	bf14      	ite	ne
 8016e8e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016e92:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016e96:	2700      	movs	r7, #0
 8016e98:	fbb1 fcf6 	udiv	ip, r1, r6
 8016e9c:	4638      	mov	r0, r7
 8016e9e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016ea2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016ea6:	2b09      	cmp	r3, #9
 8016ea8:	d817      	bhi.n	8016eda <_strtol_l.isra.0+0x9a>
 8016eaa:	461c      	mov	r4, r3
 8016eac:	42a6      	cmp	r6, r4
 8016eae:	dd23      	ble.n	8016ef8 <_strtol_l.isra.0+0xb8>
 8016eb0:	1c7b      	adds	r3, r7, #1
 8016eb2:	d007      	beq.n	8016ec4 <_strtol_l.isra.0+0x84>
 8016eb4:	4584      	cmp	ip, r0
 8016eb6:	d31c      	bcc.n	8016ef2 <_strtol_l.isra.0+0xb2>
 8016eb8:	d101      	bne.n	8016ebe <_strtol_l.isra.0+0x7e>
 8016eba:	45a6      	cmp	lr, r4
 8016ebc:	db19      	blt.n	8016ef2 <_strtol_l.isra.0+0xb2>
 8016ebe:	fb00 4006 	mla	r0, r0, r6, r4
 8016ec2:	2701      	movs	r7, #1
 8016ec4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ec8:	e7eb      	b.n	8016ea2 <_strtol_l.isra.0+0x62>
 8016eca:	462f      	mov	r7, r5
 8016ecc:	e7bf      	b.n	8016e4e <_strtol_l.isra.0+0xe>
 8016ece:	2c2b      	cmp	r4, #43	; 0x2b
 8016ed0:	bf04      	itt	eq
 8016ed2:	1cbd      	addeq	r5, r7, #2
 8016ed4:	787c      	ldrbeq	r4, [r7, #1]
 8016ed6:	461a      	mov	r2, r3
 8016ed8:	e7c9      	b.n	8016e6e <_strtol_l.isra.0+0x2e>
 8016eda:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016ede:	2b19      	cmp	r3, #25
 8016ee0:	d801      	bhi.n	8016ee6 <_strtol_l.isra.0+0xa6>
 8016ee2:	3c37      	subs	r4, #55	; 0x37
 8016ee4:	e7e2      	b.n	8016eac <_strtol_l.isra.0+0x6c>
 8016ee6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016eea:	2b19      	cmp	r3, #25
 8016eec:	d804      	bhi.n	8016ef8 <_strtol_l.isra.0+0xb8>
 8016eee:	3c57      	subs	r4, #87	; 0x57
 8016ef0:	e7dc      	b.n	8016eac <_strtol_l.isra.0+0x6c>
 8016ef2:	f04f 37ff 	mov.w	r7, #4294967295
 8016ef6:	e7e5      	b.n	8016ec4 <_strtol_l.isra.0+0x84>
 8016ef8:	1c7b      	adds	r3, r7, #1
 8016efa:	d108      	bne.n	8016f0e <_strtol_l.isra.0+0xce>
 8016efc:	2322      	movs	r3, #34	; 0x22
 8016efe:	f8c8 3000 	str.w	r3, [r8]
 8016f02:	4608      	mov	r0, r1
 8016f04:	f1ba 0f00 	cmp.w	sl, #0
 8016f08:	d107      	bne.n	8016f1a <_strtol_l.isra.0+0xda>
 8016f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f0e:	b102      	cbz	r2, 8016f12 <_strtol_l.isra.0+0xd2>
 8016f10:	4240      	negs	r0, r0
 8016f12:	f1ba 0f00 	cmp.w	sl, #0
 8016f16:	d0f8      	beq.n	8016f0a <_strtol_l.isra.0+0xca>
 8016f18:	b10f      	cbz	r7, 8016f1e <_strtol_l.isra.0+0xde>
 8016f1a:	f105 39ff 	add.w	r9, r5, #4294967295
 8016f1e:	f8ca 9000 	str.w	r9, [sl]
 8016f22:	e7f2      	b.n	8016f0a <_strtol_l.isra.0+0xca>
 8016f24:	2430      	movs	r4, #48	; 0x30
 8016f26:	2e00      	cmp	r6, #0
 8016f28:	d1af      	bne.n	8016e8a <_strtol_l.isra.0+0x4a>
 8016f2a:	2608      	movs	r6, #8
 8016f2c:	e7ad      	b.n	8016e8a <_strtol_l.isra.0+0x4a>
 8016f2e:	2c30      	cmp	r4, #48	; 0x30
 8016f30:	d0a3      	beq.n	8016e7a <_strtol_l.isra.0+0x3a>
 8016f32:	260a      	movs	r6, #10
 8016f34:	e7a9      	b.n	8016e8a <_strtol_l.isra.0+0x4a>
	...

08016f38 <_strtol_r>:
 8016f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f3a:	4c06      	ldr	r4, [pc, #24]	; (8016f54 <_strtol_r+0x1c>)
 8016f3c:	4d06      	ldr	r5, [pc, #24]	; (8016f58 <_strtol_r+0x20>)
 8016f3e:	6824      	ldr	r4, [r4, #0]
 8016f40:	6a24      	ldr	r4, [r4, #32]
 8016f42:	2c00      	cmp	r4, #0
 8016f44:	bf08      	it	eq
 8016f46:	462c      	moveq	r4, r5
 8016f48:	9400      	str	r4, [sp, #0]
 8016f4a:	f7ff ff79 	bl	8016e40 <_strtol_l.isra.0>
 8016f4e:	b003      	add	sp, #12
 8016f50:	bd30      	pop	{r4, r5, pc}
 8016f52:	bf00      	nop
 8016f54:	20000028 	.word	0x20000028
 8016f58:	2000008c 	.word	0x2000008c

08016f5c <__swbuf_r>:
 8016f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f5e:	460e      	mov	r6, r1
 8016f60:	4614      	mov	r4, r2
 8016f62:	4605      	mov	r5, r0
 8016f64:	b118      	cbz	r0, 8016f6e <__swbuf_r+0x12>
 8016f66:	6983      	ldr	r3, [r0, #24]
 8016f68:	b90b      	cbnz	r3, 8016f6e <__swbuf_r+0x12>
 8016f6a:	f000 ffff 	bl	8017f6c <__sinit>
 8016f6e:	4b21      	ldr	r3, [pc, #132]	; (8016ff4 <__swbuf_r+0x98>)
 8016f70:	429c      	cmp	r4, r3
 8016f72:	d12a      	bne.n	8016fca <__swbuf_r+0x6e>
 8016f74:	686c      	ldr	r4, [r5, #4]
 8016f76:	69a3      	ldr	r3, [r4, #24]
 8016f78:	60a3      	str	r3, [r4, #8]
 8016f7a:	89a3      	ldrh	r3, [r4, #12]
 8016f7c:	071a      	lsls	r2, r3, #28
 8016f7e:	d52e      	bpl.n	8016fde <__swbuf_r+0x82>
 8016f80:	6923      	ldr	r3, [r4, #16]
 8016f82:	b363      	cbz	r3, 8016fde <__swbuf_r+0x82>
 8016f84:	6923      	ldr	r3, [r4, #16]
 8016f86:	6820      	ldr	r0, [r4, #0]
 8016f88:	1ac0      	subs	r0, r0, r3
 8016f8a:	6963      	ldr	r3, [r4, #20]
 8016f8c:	b2f6      	uxtb	r6, r6
 8016f8e:	4283      	cmp	r3, r0
 8016f90:	4637      	mov	r7, r6
 8016f92:	dc04      	bgt.n	8016f9e <__swbuf_r+0x42>
 8016f94:	4621      	mov	r1, r4
 8016f96:	4628      	mov	r0, r5
 8016f98:	f000 ff6c 	bl	8017e74 <_fflush_r>
 8016f9c:	bb28      	cbnz	r0, 8016fea <__swbuf_r+0x8e>
 8016f9e:	68a3      	ldr	r3, [r4, #8]
 8016fa0:	3b01      	subs	r3, #1
 8016fa2:	60a3      	str	r3, [r4, #8]
 8016fa4:	6823      	ldr	r3, [r4, #0]
 8016fa6:	1c5a      	adds	r2, r3, #1
 8016fa8:	6022      	str	r2, [r4, #0]
 8016faa:	701e      	strb	r6, [r3, #0]
 8016fac:	6963      	ldr	r3, [r4, #20]
 8016fae:	3001      	adds	r0, #1
 8016fb0:	4283      	cmp	r3, r0
 8016fb2:	d004      	beq.n	8016fbe <__swbuf_r+0x62>
 8016fb4:	89a3      	ldrh	r3, [r4, #12]
 8016fb6:	07db      	lsls	r3, r3, #31
 8016fb8:	d519      	bpl.n	8016fee <__swbuf_r+0x92>
 8016fba:	2e0a      	cmp	r6, #10
 8016fbc:	d117      	bne.n	8016fee <__swbuf_r+0x92>
 8016fbe:	4621      	mov	r1, r4
 8016fc0:	4628      	mov	r0, r5
 8016fc2:	f000 ff57 	bl	8017e74 <_fflush_r>
 8016fc6:	b190      	cbz	r0, 8016fee <__swbuf_r+0x92>
 8016fc8:	e00f      	b.n	8016fea <__swbuf_r+0x8e>
 8016fca:	4b0b      	ldr	r3, [pc, #44]	; (8016ff8 <__swbuf_r+0x9c>)
 8016fcc:	429c      	cmp	r4, r3
 8016fce:	d101      	bne.n	8016fd4 <__swbuf_r+0x78>
 8016fd0:	68ac      	ldr	r4, [r5, #8]
 8016fd2:	e7d0      	b.n	8016f76 <__swbuf_r+0x1a>
 8016fd4:	4b09      	ldr	r3, [pc, #36]	; (8016ffc <__swbuf_r+0xa0>)
 8016fd6:	429c      	cmp	r4, r3
 8016fd8:	bf08      	it	eq
 8016fda:	68ec      	ldreq	r4, [r5, #12]
 8016fdc:	e7cb      	b.n	8016f76 <__swbuf_r+0x1a>
 8016fde:	4621      	mov	r1, r4
 8016fe0:	4628      	mov	r0, r5
 8016fe2:	f000 f80d 	bl	8017000 <__swsetup_r>
 8016fe6:	2800      	cmp	r0, #0
 8016fe8:	d0cc      	beq.n	8016f84 <__swbuf_r+0x28>
 8016fea:	f04f 37ff 	mov.w	r7, #4294967295
 8016fee:	4638      	mov	r0, r7
 8016ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ff2:	bf00      	nop
 8016ff4:	0801a6a8 	.word	0x0801a6a8
 8016ff8:	0801a6c8 	.word	0x0801a6c8
 8016ffc:	0801a688 	.word	0x0801a688

08017000 <__swsetup_r>:
 8017000:	4b32      	ldr	r3, [pc, #200]	; (80170cc <__swsetup_r+0xcc>)
 8017002:	b570      	push	{r4, r5, r6, lr}
 8017004:	681d      	ldr	r5, [r3, #0]
 8017006:	4606      	mov	r6, r0
 8017008:	460c      	mov	r4, r1
 801700a:	b125      	cbz	r5, 8017016 <__swsetup_r+0x16>
 801700c:	69ab      	ldr	r3, [r5, #24]
 801700e:	b913      	cbnz	r3, 8017016 <__swsetup_r+0x16>
 8017010:	4628      	mov	r0, r5
 8017012:	f000 ffab 	bl	8017f6c <__sinit>
 8017016:	4b2e      	ldr	r3, [pc, #184]	; (80170d0 <__swsetup_r+0xd0>)
 8017018:	429c      	cmp	r4, r3
 801701a:	d10f      	bne.n	801703c <__swsetup_r+0x3c>
 801701c:	686c      	ldr	r4, [r5, #4]
 801701e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017022:	b29a      	uxth	r2, r3
 8017024:	0715      	lsls	r5, r2, #28
 8017026:	d42c      	bmi.n	8017082 <__swsetup_r+0x82>
 8017028:	06d0      	lsls	r0, r2, #27
 801702a:	d411      	bmi.n	8017050 <__swsetup_r+0x50>
 801702c:	2209      	movs	r2, #9
 801702e:	6032      	str	r2, [r6, #0]
 8017030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017034:	81a3      	strh	r3, [r4, #12]
 8017036:	f04f 30ff 	mov.w	r0, #4294967295
 801703a:	e03e      	b.n	80170ba <__swsetup_r+0xba>
 801703c:	4b25      	ldr	r3, [pc, #148]	; (80170d4 <__swsetup_r+0xd4>)
 801703e:	429c      	cmp	r4, r3
 8017040:	d101      	bne.n	8017046 <__swsetup_r+0x46>
 8017042:	68ac      	ldr	r4, [r5, #8]
 8017044:	e7eb      	b.n	801701e <__swsetup_r+0x1e>
 8017046:	4b24      	ldr	r3, [pc, #144]	; (80170d8 <__swsetup_r+0xd8>)
 8017048:	429c      	cmp	r4, r3
 801704a:	bf08      	it	eq
 801704c:	68ec      	ldreq	r4, [r5, #12]
 801704e:	e7e6      	b.n	801701e <__swsetup_r+0x1e>
 8017050:	0751      	lsls	r1, r2, #29
 8017052:	d512      	bpl.n	801707a <__swsetup_r+0x7a>
 8017054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017056:	b141      	cbz	r1, 801706a <__swsetup_r+0x6a>
 8017058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801705c:	4299      	cmp	r1, r3
 801705e:	d002      	beq.n	8017066 <__swsetup_r+0x66>
 8017060:	4630      	mov	r0, r6
 8017062:	f001 fffd 	bl	8019060 <_free_r>
 8017066:	2300      	movs	r3, #0
 8017068:	6363      	str	r3, [r4, #52]	; 0x34
 801706a:	89a3      	ldrh	r3, [r4, #12]
 801706c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017070:	81a3      	strh	r3, [r4, #12]
 8017072:	2300      	movs	r3, #0
 8017074:	6063      	str	r3, [r4, #4]
 8017076:	6923      	ldr	r3, [r4, #16]
 8017078:	6023      	str	r3, [r4, #0]
 801707a:	89a3      	ldrh	r3, [r4, #12]
 801707c:	f043 0308 	orr.w	r3, r3, #8
 8017080:	81a3      	strh	r3, [r4, #12]
 8017082:	6923      	ldr	r3, [r4, #16]
 8017084:	b94b      	cbnz	r3, 801709a <__swsetup_r+0x9a>
 8017086:	89a3      	ldrh	r3, [r4, #12]
 8017088:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801708c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017090:	d003      	beq.n	801709a <__swsetup_r+0x9a>
 8017092:	4621      	mov	r1, r4
 8017094:	4630      	mov	r0, r6
 8017096:	f001 fb7b 	bl	8018790 <__smakebuf_r>
 801709a:	89a2      	ldrh	r2, [r4, #12]
 801709c:	f012 0301 	ands.w	r3, r2, #1
 80170a0:	d00c      	beq.n	80170bc <__swsetup_r+0xbc>
 80170a2:	2300      	movs	r3, #0
 80170a4:	60a3      	str	r3, [r4, #8]
 80170a6:	6963      	ldr	r3, [r4, #20]
 80170a8:	425b      	negs	r3, r3
 80170aa:	61a3      	str	r3, [r4, #24]
 80170ac:	6923      	ldr	r3, [r4, #16]
 80170ae:	b953      	cbnz	r3, 80170c6 <__swsetup_r+0xc6>
 80170b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80170b8:	d1ba      	bne.n	8017030 <__swsetup_r+0x30>
 80170ba:	bd70      	pop	{r4, r5, r6, pc}
 80170bc:	0792      	lsls	r2, r2, #30
 80170be:	bf58      	it	pl
 80170c0:	6963      	ldrpl	r3, [r4, #20]
 80170c2:	60a3      	str	r3, [r4, #8]
 80170c4:	e7f2      	b.n	80170ac <__swsetup_r+0xac>
 80170c6:	2000      	movs	r0, #0
 80170c8:	e7f7      	b.n	80170ba <__swsetup_r+0xba>
 80170ca:	bf00      	nop
 80170cc:	20000028 	.word	0x20000028
 80170d0:	0801a6a8 	.word	0x0801a6a8
 80170d4:	0801a6c8 	.word	0x0801a6c8
 80170d8:	0801a688 	.word	0x0801a688

080170dc <quorem>:
 80170dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170e0:	6903      	ldr	r3, [r0, #16]
 80170e2:	690c      	ldr	r4, [r1, #16]
 80170e4:	42a3      	cmp	r3, r4
 80170e6:	4680      	mov	r8, r0
 80170e8:	f2c0 8082 	blt.w	80171f0 <quorem+0x114>
 80170ec:	3c01      	subs	r4, #1
 80170ee:	f101 0714 	add.w	r7, r1, #20
 80170f2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80170f6:	f100 0614 	add.w	r6, r0, #20
 80170fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80170fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017102:	eb06 030c 	add.w	r3, r6, ip
 8017106:	3501      	adds	r5, #1
 8017108:	eb07 090c 	add.w	r9, r7, ip
 801710c:	9301      	str	r3, [sp, #4]
 801710e:	fbb0 f5f5 	udiv	r5, r0, r5
 8017112:	b395      	cbz	r5, 801717a <quorem+0x9e>
 8017114:	f04f 0a00 	mov.w	sl, #0
 8017118:	4638      	mov	r0, r7
 801711a:	46b6      	mov	lr, r6
 801711c:	46d3      	mov	fp, sl
 801711e:	f850 2b04 	ldr.w	r2, [r0], #4
 8017122:	b293      	uxth	r3, r2
 8017124:	fb05 a303 	mla	r3, r5, r3, sl
 8017128:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801712c:	b29b      	uxth	r3, r3
 801712e:	ebab 0303 	sub.w	r3, fp, r3
 8017132:	0c12      	lsrs	r2, r2, #16
 8017134:	f8de b000 	ldr.w	fp, [lr]
 8017138:	fb05 a202 	mla	r2, r5, r2, sl
 801713c:	fa13 f38b 	uxtah	r3, r3, fp
 8017140:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017144:	fa1f fb82 	uxth.w	fp, r2
 8017148:	f8de 2000 	ldr.w	r2, [lr]
 801714c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017150:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017154:	b29b      	uxth	r3, r3
 8017156:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801715a:	4581      	cmp	r9, r0
 801715c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017160:	f84e 3b04 	str.w	r3, [lr], #4
 8017164:	d2db      	bcs.n	801711e <quorem+0x42>
 8017166:	f856 300c 	ldr.w	r3, [r6, ip]
 801716a:	b933      	cbnz	r3, 801717a <quorem+0x9e>
 801716c:	9b01      	ldr	r3, [sp, #4]
 801716e:	3b04      	subs	r3, #4
 8017170:	429e      	cmp	r6, r3
 8017172:	461a      	mov	r2, r3
 8017174:	d330      	bcc.n	80171d8 <quorem+0xfc>
 8017176:	f8c8 4010 	str.w	r4, [r8, #16]
 801717a:	4640      	mov	r0, r8
 801717c:	f001 fdb6 	bl	8018cec <__mcmp>
 8017180:	2800      	cmp	r0, #0
 8017182:	db25      	blt.n	80171d0 <quorem+0xf4>
 8017184:	3501      	adds	r5, #1
 8017186:	4630      	mov	r0, r6
 8017188:	f04f 0c00 	mov.w	ip, #0
 801718c:	f857 2b04 	ldr.w	r2, [r7], #4
 8017190:	f8d0 e000 	ldr.w	lr, [r0]
 8017194:	b293      	uxth	r3, r2
 8017196:	ebac 0303 	sub.w	r3, ip, r3
 801719a:	0c12      	lsrs	r2, r2, #16
 801719c:	fa13 f38e 	uxtah	r3, r3, lr
 80171a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80171a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80171a8:	b29b      	uxth	r3, r3
 80171aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80171ae:	45b9      	cmp	r9, r7
 80171b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80171b4:	f840 3b04 	str.w	r3, [r0], #4
 80171b8:	d2e8      	bcs.n	801718c <quorem+0xb0>
 80171ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80171be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80171c2:	b92a      	cbnz	r2, 80171d0 <quorem+0xf4>
 80171c4:	3b04      	subs	r3, #4
 80171c6:	429e      	cmp	r6, r3
 80171c8:	461a      	mov	r2, r3
 80171ca:	d30b      	bcc.n	80171e4 <quorem+0x108>
 80171cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80171d0:	4628      	mov	r0, r5
 80171d2:	b003      	add	sp, #12
 80171d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171d8:	6812      	ldr	r2, [r2, #0]
 80171da:	3b04      	subs	r3, #4
 80171dc:	2a00      	cmp	r2, #0
 80171de:	d1ca      	bne.n	8017176 <quorem+0x9a>
 80171e0:	3c01      	subs	r4, #1
 80171e2:	e7c5      	b.n	8017170 <quorem+0x94>
 80171e4:	6812      	ldr	r2, [r2, #0]
 80171e6:	3b04      	subs	r3, #4
 80171e8:	2a00      	cmp	r2, #0
 80171ea:	d1ef      	bne.n	80171cc <quorem+0xf0>
 80171ec:	3c01      	subs	r4, #1
 80171ee:	e7ea      	b.n	80171c6 <quorem+0xea>
 80171f0:	2000      	movs	r0, #0
 80171f2:	e7ee      	b.n	80171d2 <quorem+0xf6>
 80171f4:	0000      	movs	r0, r0
	...

080171f8 <_dtoa_r>:
 80171f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171fc:	ec57 6b10 	vmov	r6, r7, d0
 8017200:	b097      	sub	sp, #92	; 0x5c
 8017202:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017204:	9106      	str	r1, [sp, #24]
 8017206:	4604      	mov	r4, r0
 8017208:	920b      	str	r2, [sp, #44]	; 0x2c
 801720a:	9312      	str	r3, [sp, #72]	; 0x48
 801720c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017210:	e9cd 6700 	strd	r6, r7, [sp]
 8017214:	b93d      	cbnz	r5, 8017226 <_dtoa_r+0x2e>
 8017216:	2010      	movs	r0, #16
 8017218:	f001 fafa 	bl	8018810 <malloc>
 801721c:	6260      	str	r0, [r4, #36]	; 0x24
 801721e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017222:	6005      	str	r5, [r0, #0]
 8017224:	60c5      	str	r5, [r0, #12]
 8017226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017228:	6819      	ldr	r1, [r3, #0]
 801722a:	b151      	cbz	r1, 8017242 <_dtoa_r+0x4a>
 801722c:	685a      	ldr	r2, [r3, #4]
 801722e:	604a      	str	r2, [r1, #4]
 8017230:	2301      	movs	r3, #1
 8017232:	4093      	lsls	r3, r2
 8017234:	608b      	str	r3, [r1, #8]
 8017236:	4620      	mov	r0, r4
 8017238:	f001 fb38 	bl	80188ac <_Bfree>
 801723c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801723e:	2200      	movs	r2, #0
 8017240:	601a      	str	r2, [r3, #0]
 8017242:	1e3b      	subs	r3, r7, #0
 8017244:	bfbb      	ittet	lt
 8017246:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801724a:	9301      	strlt	r3, [sp, #4]
 801724c:	2300      	movge	r3, #0
 801724e:	2201      	movlt	r2, #1
 8017250:	bfac      	ite	ge
 8017252:	f8c8 3000 	strge.w	r3, [r8]
 8017256:	f8c8 2000 	strlt.w	r2, [r8]
 801725a:	4baf      	ldr	r3, [pc, #700]	; (8017518 <_dtoa_r+0x320>)
 801725c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017260:	ea33 0308 	bics.w	r3, r3, r8
 8017264:	d114      	bne.n	8017290 <_dtoa_r+0x98>
 8017266:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017268:	f242 730f 	movw	r3, #9999	; 0x270f
 801726c:	6013      	str	r3, [r2, #0]
 801726e:	9b00      	ldr	r3, [sp, #0]
 8017270:	b923      	cbnz	r3, 801727c <_dtoa_r+0x84>
 8017272:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017276:	2800      	cmp	r0, #0
 8017278:	f000 8542 	beq.w	8017d00 <_dtoa_r+0xb08>
 801727c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801727e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801752c <_dtoa_r+0x334>
 8017282:	2b00      	cmp	r3, #0
 8017284:	f000 8544 	beq.w	8017d10 <_dtoa_r+0xb18>
 8017288:	f10b 0303 	add.w	r3, fp, #3
 801728c:	f000 bd3e 	b.w	8017d0c <_dtoa_r+0xb14>
 8017290:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017294:	2200      	movs	r2, #0
 8017296:	2300      	movs	r3, #0
 8017298:	4630      	mov	r0, r6
 801729a:	4639      	mov	r1, r7
 801729c:	f7f1 fb4c 	bl	8008938 <__aeabi_dcmpeq>
 80172a0:	4681      	mov	r9, r0
 80172a2:	b168      	cbz	r0, 80172c0 <_dtoa_r+0xc8>
 80172a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80172a6:	2301      	movs	r3, #1
 80172a8:	6013      	str	r3, [r2, #0]
 80172aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	f000 8524 	beq.w	8017cfa <_dtoa_r+0xb02>
 80172b2:	4b9a      	ldr	r3, [pc, #616]	; (801751c <_dtoa_r+0x324>)
 80172b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80172b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80172ba:	6013      	str	r3, [r2, #0]
 80172bc:	f000 bd28 	b.w	8017d10 <_dtoa_r+0xb18>
 80172c0:	aa14      	add	r2, sp, #80	; 0x50
 80172c2:	a915      	add	r1, sp, #84	; 0x54
 80172c4:	ec47 6b10 	vmov	d0, r6, r7
 80172c8:	4620      	mov	r0, r4
 80172ca:	f001 fdfd 	bl	8018ec8 <__d2b>
 80172ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80172d2:	9004      	str	r0, [sp, #16]
 80172d4:	2d00      	cmp	r5, #0
 80172d6:	d07c      	beq.n	80173d2 <_dtoa_r+0x1da>
 80172d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80172dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80172e0:	46b2      	mov	sl, r6
 80172e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80172e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80172ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80172ee:	2200      	movs	r2, #0
 80172f0:	4b8b      	ldr	r3, [pc, #556]	; (8017520 <_dtoa_r+0x328>)
 80172f2:	4650      	mov	r0, sl
 80172f4:	4659      	mov	r1, fp
 80172f6:	f7f0 feff 	bl	80080f8 <__aeabi_dsub>
 80172fa:	a381      	add	r3, pc, #516	; (adr r3, 8017500 <_dtoa_r+0x308>)
 80172fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017300:	f7f1 f8b2 	bl	8008468 <__aeabi_dmul>
 8017304:	a380      	add	r3, pc, #512	; (adr r3, 8017508 <_dtoa_r+0x310>)
 8017306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801730a:	f7f0 fef7 	bl	80080fc <__adddf3>
 801730e:	4606      	mov	r6, r0
 8017310:	4628      	mov	r0, r5
 8017312:	460f      	mov	r7, r1
 8017314:	f7f1 f83e 	bl	8008394 <__aeabi_i2d>
 8017318:	a37d      	add	r3, pc, #500	; (adr r3, 8017510 <_dtoa_r+0x318>)
 801731a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801731e:	f7f1 f8a3 	bl	8008468 <__aeabi_dmul>
 8017322:	4602      	mov	r2, r0
 8017324:	460b      	mov	r3, r1
 8017326:	4630      	mov	r0, r6
 8017328:	4639      	mov	r1, r7
 801732a:	f7f0 fee7 	bl	80080fc <__adddf3>
 801732e:	4606      	mov	r6, r0
 8017330:	460f      	mov	r7, r1
 8017332:	f7f1 fb49 	bl	80089c8 <__aeabi_d2iz>
 8017336:	2200      	movs	r2, #0
 8017338:	4682      	mov	sl, r0
 801733a:	2300      	movs	r3, #0
 801733c:	4630      	mov	r0, r6
 801733e:	4639      	mov	r1, r7
 8017340:	f7f1 fb04 	bl	800894c <__aeabi_dcmplt>
 8017344:	b148      	cbz	r0, 801735a <_dtoa_r+0x162>
 8017346:	4650      	mov	r0, sl
 8017348:	f7f1 f824 	bl	8008394 <__aeabi_i2d>
 801734c:	4632      	mov	r2, r6
 801734e:	463b      	mov	r3, r7
 8017350:	f7f1 faf2 	bl	8008938 <__aeabi_dcmpeq>
 8017354:	b908      	cbnz	r0, 801735a <_dtoa_r+0x162>
 8017356:	f10a 3aff 	add.w	sl, sl, #4294967295
 801735a:	f1ba 0f16 	cmp.w	sl, #22
 801735e:	d859      	bhi.n	8017414 <_dtoa_r+0x21c>
 8017360:	4970      	ldr	r1, [pc, #448]	; (8017524 <_dtoa_r+0x32c>)
 8017362:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017366:	e9dd 2300 	ldrd	r2, r3, [sp]
 801736a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801736e:	f7f1 fb0b 	bl	8008988 <__aeabi_dcmpgt>
 8017372:	2800      	cmp	r0, #0
 8017374:	d050      	beq.n	8017418 <_dtoa_r+0x220>
 8017376:	f10a 3aff 	add.w	sl, sl, #4294967295
 801737a:	2300      	movs	r3, #0
 801737c:	930f      	str	r3, [sp, #60]	; 0x3c
 801737e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017380:	1b5d      	subs	r5, r3, r5
 8017382:	f1b5 0801 	subs.w	r8, r5, #1
 8017386:	bf49      	itett	mi
 8017388:	f1c5 0301 	rsbmi	r3, r5, #1
 801738c:	2300      	movpl	r3, #0
 801738e:	9305      	strmi	r3, [sp, #20]
 8017390:	f04f 0800 	movmi.w	r8, #0
 8017394:	bf58      	it	pl
 8017396:	9305      	strpl	r3, [sp, #20]
 8017398:	f1ba 0f00 	cmp.w	sl, #0
 801739c:	db3e      	blt.n	801741c <_dtoa_r+0x224>
 801739e:	2300      	movs	r3, #0
 80173a0:	44d0      	add	r8, sl
 80173a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80173a6:	9307      	str	r3, [sp, #28]
 80173a8:	9b06      	ldr	r3, [sp, #24]
 80173aa:	2b09      	cmp	r3, #9
 80173ac:	f200 8090 	bhi.w	80174d0 <_dtoa_r+0x2d8>
 80173b0:	2b05      	cmp	r3, #5
 80173b2:	bfc4      	itt	gt
 80173b4:	3b04      	subgt	r3, #4
 80173b6:	9306      	strgt	r3, [sp, #24]
 80173b8:	9b06      	ldr	r3, [sp, #24]
 80173ba:	f1a3 0302 	sub.w	r3, r3, #2
 80173be:	bfcc      	ite	gt
 80173c0:	2500      	movgt	r5, #0
 80173c2:	2501      	movle	r5, #1
 80173c4:	2b03      	cmp	r3, #3
 80173c6:	f200 808f 	bhi.w	80174e8 <_dtoa_r+0x2f0>
 80173ca:	e8df f003 	tbb	[pc, r3]
 80173ce:	7f7d      	.short	0x7f7d
 80173d0:	7131      	.short	0x7131
 80173d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80173d6:	441d      	add	r5, r3
 80173d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80173dc:	2820      	cmp	r0, #32
 80173de:	dd13      	ble.n	8017408 <_dtoa_r+0x210>
 80173e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80173e4:	9b00      	ldr	r3, [sp, #0]
 80173e6:	fa08 f800 	lsl.w	r8, r8, r0
 80173ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80173ee:	fa23 f000 	lsr.w	r0, r3, r0
 80173f2:	ea48 0000 	orr.w	r0, r8, r0
 80173f6:	f7f0 ffbd 	bl	8008374 <__aeabi_ui2d>
 80173fa:	2301      	movs	r3, #1
 80173fc:	4682      	mov	sl, r0
 80173fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017402:	3d01      	subs	r5, #1
 8017404:	9313      	str	r3, [sp, #76]	; 0x4c
 8017406:	e772      	b.n	80172ee <_dtoa_r+0xf6>
 8017408:	9b00      	ldr	r3, [sp, #0]
 801740a:	f1c0 0020 	rsb	r0, r0, #32
 801740e:	fa03 f000 	lsl.w	r0, r3, r0
 8017412:	e7f0      	b.n	80173f6 <_dtoa_r+0x1fe>
 8017414:	2301      	movs	r3, #1
 8017416:	e7b1      	b.n	801737c <_dtoa_r+0x184>
 8017418:	900f      	str	r0, [sp, #60]	; 0x3c
 801741a:	e7b0      	b.n	801737e <_dtoa_r+0x186>
 801741c:	9b05      	ldr	r3, [sp, #20]
 801741e:	eba3 030a 	sub.w	r3, r3, sl
 8017422:	9305      	str	r3, [sp, #20]
 8017424:	f1ca 0300 	rsb	r3, sl, #0
 8017428:	9307      	str	r3, [sp, #28]
 801742a:	2300      	movs	r3, #0
 801742c:	930e      	str	r3, [sp, #56]	; 0x38
 801742e:	e7bb      	b.n	80173a8 <_dtoa_r+0x1b0>
 8017430:	2301      	movs	r3, #1
 8017432:	930a      	str	r3, [sp, #40]	; 0x28
 8017434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017436:	2b00      	cmp	r3, #0
 8017438:	dd59      	ble.n	80174ee <_dtoa_r+0x2f6>
 801743a:	9302      	str	r3, [sp, #8]
 801743c:	4699      	mov	r9, r3
 801743e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017440:	2200      	movs	r2, #0
 8017442:	6072      	str	r2, [r6, #4]
 8017444:	2204      	movs	r2, #4
 8017446:	f102 0014 	add.w	r0, r2, #20
 801744a:	4298      	cmp	r0, r3
 801744c:	6871      	ldr	r1, [r6, #4]
 801744e:	d953      	bls.n	80174f8 <_dtoa_r+0x300>
 8017450:	4620      	mov	r0, r4
 8017452:	f001 f9f7 	bl	8018844 <_Balloc>
 8017456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017458:	6030      	str	r0, [r6, #0]
 801745a:	f1b9 0f0e 	cmp.w	r9, #14
 801745e:	f8d3 b000 	ldr.w	fp, [r3]
 8017462:	f200 80e6 	bhi.w	8017632 <_dtoa_r+0x43a>
 8017466:	2d00      	cmp	r5, #0
 8017468:	f000 80e3 	beq.w	8017632 <_dtoa_r+0x43a>
 801746c:	ed9d 7b00 	vldr	d7, [sp]
 8017470:	f1ba 0f00 	cmp.w	sl, #0
 8017474:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017478:	dd74      	ble.n	8017564 <_dtoa_r+0x36c>
 801747a:	4a2a      	ldr	r2, [pc, #168]	; (8017524 <_dtoa_r+0x32c>)
 801747c:	f00a 030f 	and.w	r3, sl, #15
 8017480:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017484:	ed93 7b00 	vldr	d7, [r3]
 8017488:	ea4f 162a 	mov.w	r6, sl, asr #4
 801748c:	06f0      	lsls	r0, r6, #27
 801748e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017492:	d565      	bpl.n	8017560 <_dtoa_r+0x368>
 8017494:	4b24      	ldr	r3, [pc, #144]	; (8017528 <_dtoa_r+0x330>)
 8017496:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801749a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801749e:	f7f1 f90d 	bl	80086bc <__aeabi_ddiv>
 80174a2:	e9cd 0100 	strd	r0, r1, [sp]
 80174a6:	f006 060f 	and.w	r6, r6, #15
 80174aa:	2503      	movs	r5, #3
 80174ac:	4f1e      	ldr	r7, [pc, #120]	; (8017528 <_dtoa_r+0x330>)
 80174ae:	e04c      	b.n	801754a <_dtoa_r+0x352>
 80174b0:	2301      	movs	r3, #1
 80174b2:	930a      	str	r3, [sp, #40]	; 0x28
 80174b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174b6:	4453      	add	r3, sl
 80174b8:	f103 0901 	add.w	r9, r3, #1
 80174bc:	9302      	str	r3, [sp, #8]
 80174be:	464b      	mov	r3, r9
 80174c0:	2b01      	cmp	r3, #1
 80174c2:	bfb8      	it	lt
 80174c4:	2301      	movlt	r3, #1
 80174c6:	e7ba      	b.n	801743e <_dtoa_r+0x246>
 80174c8:	2300      	movs	r3, #0
 80174ca:	e7b2      	b.n	8017432 <_dtoa_r+0x23a>
 80174cc:	2300      	movs	r3, #0
 80174ce:	e7f0      	b.n	80174b2 <_dtoa_r+0x2ba>
 80174d0:	2501      	movs	r5, #1
 80174d2:	2300      	movs	r3, #0
 80174d4:	9306      	str	r3, [sp, #24]
 80174d6:	950a      	str	r5, [sp, #40]	; 0x28
 80174d8:	f04f 33ff 	mov.w	r3, #4294967295
 80174dc:	9302      	str	r3, [sp, #8]
 80174de:	4699      	mov	r9, r3
 80174e0:	2200      	movs	r2, #0
 80174e2:	2312      	movs	r3, #18
 80174e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80174e6:	e7aa      	b.n	801743e <_dtoa_r+0x246>
 80174e8:	2301      	movs	r3, #1
 80174ea:	930a      	str	r3, [sp, #40]	; 0x28
 80174ec:	e7f4      	b.n	80174d8 <_dtoa_r+0x2e0>
 80174ee:	2301      	movs	r3, #1
 80174f0:	9302      	str	r3, [sp, #8]
 80174f2:	4699      	mov	r9, r3
 80174f4:	461a      	mov	r2, r3
 80174f6:	e7f5      	b.n	80174e4 <_dtoa_r+0x2ec>
 80174f8:	3101      	adds	r1, #1
 80174fa:	6071      	str	r1, [r6, #4]
 80174fc:	0052      	lsls	r2, r2, #1
 80174fe:	e7a2      	b.n	8017446 <_dtoa_r+0x24e>
 8017500:	636f4361 	.word	0x636f4361
 8017504:	3fd287a7 	.word	0x3fd287a7
 8017508:	8b60c8b3 	.word	0x8b60c8b3
 801750c:	3fc68a28 	.word	0x3fc68a28
 8017510:	509f79fb 	.word	0x509f79fb
 8017514:	3fd34413 	.word	0x3fd34413
 8017518:	7ff00000 	.word	0x7ff00000
 801751c:	0801a81c 	.word	0x0801a81c
 8017520:	3ff80000 	.word	0x3ff80000
 8017524:	0801a720 	.word	0x0801a720
 8017528:	0801a6f8 	.word	0x0801a6f8
 801752c:	0801a681 	.word	0x0801a681
 8017530:	07f1      	lsls	r1, r6, #31
 8017532:	d508      	bpl.n	8017546 <_dtoa_r+0x34e>
 8017534:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017538:	e9d7 2300 	ldrd	r2, r3, [r7]
 801753c:	f7f0 ff94 	bl	8008468 <__aeabi_dmul>
 8017540:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017544:	3501      	adds	r5, #1
 8017546:	1076      	asrs	r6, r6, #1
 8017548:	3708      	adds	r7, #8
 801754a:	2e00      	cmp	r6, #0
 801754c:	d1f0      	bne.n	8017530 <_dtoa_r+0x338>
 801754e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017552:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017556:	f7f1 f8b1 	bl	80086bc <__aeabi_ddiv>
 801755a:	e9cd 0100 	strd	r0, r1, [sp]
 801755e:	e01a      	b.n	8017596 <_dtoa_r+0x39e>
 8017560:	2502      	movs	r5, #2
 8017562:	e7a3      	b.n	80174ac <_dtoa_r+0x2b4>
 8017564:	f000 80a0 	beq.w	80176a8 <_dtoa_r+0x4b0>
 8017568:	f1ca 0600 	rsb	r6, sl, #0
 801756c:	4b9f      	ldr	r3, [pc, #636]	; (80177ec <_dtoa_r+0x5f4>)
 801756e:	4fa0      	ldr	r7, [pc, #640]	; (80177f0 <_dtoa_r+0x5f8>)
 8017570:	f006 020f 	and.w	r2, r6, #15
 8017574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801757c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017580:	f7f0 ff72 	bl	8008468 <__aeabi_dmul>
 8017584:	e9cd 0100 	strd	r0, r1, [sp]
 8017588:	1136      	asrs	r6, r6, #4
 801758a:	2300      	movs	r3, #0
 801758c:	2502      	movs	r5, #2
 801758e:	2e00      	cmp	r6, #0
 8017590:	d17f      	bne.n	8017692 <_dtoa_r+0x49a>
 8017592:	2b00      	cmp	r3, #0
 8017594:	d1e1      	bne.n	801755a <_dtoa_r+0x362>
 8017596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017598:	2b00      	cmp	r3, #0
 801759a:	f000 8087 	beq.w	80176ac <_dtoa_r+0x4b4>
 801759e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80175a2:	2200      	movs	r2, #0
 80175a4:	4b93      	ldr	r3, [pc, #588]	; (80177f4 <_dtoa_r+0x5fc>)
 80175a6:	4630      	mov	r0, r6
 80175a8:	4639      	mov	r1, r7
 80175aa:	f7f1 f9cf 	bl	800894c <__aeabi_dcmplt>
 80175ae:	2800      	cmp	r0, #0
 80175b0:	d07c      	beq.n	80176ac <_dtoa_r+0x4b4>
 80175b2:	f1b9 0f00 	cmp.w	r9, #0
 80175b6:	d079      	beq.n	80176ac <_dtoa_r+0x4b4>
 80175b8:	9b02      	ldr	r3, [sp, #8]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	dd35      	ble.n	801762a <_dtoa_r+0x432>
 80175be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80175c2:	9308      	str	r3, [sp, #32]
 80175c4:	4639      	mov	r1, r7
 80175c6:	2200      	movs	r2, #0
 80175c8:	4b8b      	ldr	r3, [pc, #556]	; (80177f8 <_dtoa_r+0x600>)
 80175ca:	4630      	mov	r0, r6
 80175cc:	f7f0 ff4c 	bl	8008468 <__aeabi_dmul>
 80175d0:	e9cd 0100 	strd	r0, r1, [sp]
 80175d4:	9f02      	ldr	r7, [sp, #8]
 80175d6:	3501      	adds	r5, #1
 80175d8:	4628      	mov	r0, r5
 80175da:	f7f0 fedb 	bl	8008394 <__aeabi_i2d>
 80175de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80175e2:	f7f0 ff41 	bl	8008468 <__aeabi_dmul>
 80175e6:	2200      	movs	r2, #0
 80175e8:	4b84      	ldr	r3, [pc, #528]	; (80177fc <_dtoa_r+0x604>)
 80175ea:	f7f0 fd87 	bl	80080fc <__adddf3>
 80175ee:	4605      	mov	r5, r0
 80175f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80175f4:	2f00      	cmp	r7, #0
 80175f6:	d15d      	bne.n	80176b4 <_dtoa_r+0x4bc>
 80175f8:	2200      	movs	r2, #0
 80175fa:	4b81      	ldr	r3, [pc, #516]	; (8017800 <_dtoa_r+0x608>)
 80175fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017600:	f7f0 fd7a 	bl	80080f8 <__aeabi_dsub>
 8017604:	462a      	mov	r2, r5
 8017606:	4633      	mov	r3, r6
 8017608:	e9cd 0100 	strd	r0, r1, [sp]
 801760c:	f7f1 f9bc 	bl	8008988 <__aeabi_dcmpgt>
 8017610:	2800      	cmp	r0, #0
 8017612:	f040 8288 	bne.w	8017b26 <_dtoa_r+0x92e>
 8017616:	462a      	mov	r2, r5
 8017618:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801761c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017620:	f7f1 f994 	bl	800894c <__aeabi_dcmplt>
 8017624:	2800      	cmp	r0, #0
 8017626:	f040 827c 	bne.w	8017b22 <_dtoa_r+0x92a>
 801762a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801762e:	e9cd 2300 	strd	r2, r3, [sp]
 8017632:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017634:	2b00      	cmp	r3, #0
 8017636:	f2c0 8150 	blt.w	80178da <_dtoa_r+0x6e2>
 801763a:	f1ba 0f0e 	cmp.w	sl, #14
 801763e:	f300 814c 	bgt.w	80178da <_dtoa_r+0x6e2>
 8017642:	4b6a      	ldr	r3, [pc, #424]	; (80177ec <_dtoa_r+0x5f4>)
 8017644:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017648:	ed93 7b00 	vldr	d7, [r3]
 801764c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801764e:	2b00      	cmp	r3, #0
 8017650:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017654:	f280 80d8 	bge.w	8017808 <_dtoa_r+0x610>
 8017658:	f1b9 0f00 	cmp.w	r9, #0
 801765c:	f300 80d4 	bgt.w	8017808 <_dtoa_r+0x610>
 8017660:	f040 825e 	bne.w	8017b20 <_dtoa_r+0x928>
 8017664:	2200      	movs	r2, #0
 8017666:	4b66      	ldr	r3, [pc, #408]	; (8017800 <_dtoa_r+0x608>)
 8017668:	ec51 0b17 	vmov	r0, r1, d7
 801766c:	f7f0 fefc 	bl	8008468 <__aeabi_dmul>
 8017670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017674:	f7f1 f97e 	bl	8008974 <__aeabi_dcmpge>
 8017678:	464f      	mov	r7, r9
 801767a:	464e      	mov	r6, r9
 801767c:	2800      	cmp	r0, #0
 801767e:	f040 8234 	bne.w	8017aea <_dtoa_r+0x8f2>
 8017682:	2331      	movs	r3, #49	; 0x31
 8017684:	f10b 0501 	add.w	r5, fp, #1
 8017688:	f88b 3000 	strb.w	r3, [fp]
 801768c:	f10a 0a01 	add.w	sl, sl, #1
 8017690:	e22f      	b.n	8017af2 <_dtoa_r+0x8fa>
 8017692:	07f2      	lsls	r2, r6, #31
 8017694:	d505      	bpl.n	80176a2 <_dtoa_r+0x4aa>
 8017696:	e9d7 2300 	ldrd	r2, r3, [r7]
 801769a:	f7f0 fee5 	bl	8008468 <__aeabi_dmul>
 801769e:	3501      	adds	r5, #1
 80176a0:	2301      	movs	r3, #1
 80176a2:	1076      	asrs	r6, r6, #1
 80176a4:	3708      	adds	r7, #8
 80176a6:	e772      	b.n	801758e <_dtoa_r+0x396>
 80176a8:	2502      	movs	r5, #2
 80176aa:	e774      	b.n	8017596 <_dtoa_r+0x39e>
 80176ac:	f8cd a020 	str.w	sl, [sp, #32]
 80176b0:	464f      	mov	r7, r9
 80176b2:	e791      	b.n	80175d8 <_dtoa_r+0x3e0>
 80176b4:	4b4d      	ldr	r3, [pc, #308]	; (80177ec <_dtoa_r+0x5f4>)
 80176b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80176ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80176be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d047      	beq.n	8017754 <_dtoa_r+0x55c>
 80176c4:	4602      	mov	r2, r0
 80176c6:	460b      	mov	r3, r1
 80176c8:	2000      	movs	r0, #0
 80176ca:	494e      	ldr	r1, [pc, #312]	; (8017804 <_dtoa_r+0x60c>)
 80176cc:	f7f0 fff6 	bl	80086bc <__aeabi_ddiv>
 80176d0:	462a      	mov	r2, r5
 80176d2:	4633      	mov	r3, r6
 80176d4:	f7f0 fd10 	bl	80080f8 <__aeabi_dsub>
 80176d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80176dc:	465d      	mov	r5, fp
 80176de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80176e2:	f7f1 f971 	bl	80089c8 <__aeabi_d2iz>
 80176e6:	4606      	mov	r6, r0
 80176e8:	f7f0 fe54 	bl	8008394 <__aeabi_i2d>
 80176ec:	4602      	mov	r2, r0
 80176ee:	460b      	mov	r3, r1
 80176f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80176f4:	f7f0 fd00 	bl	80080f8 <__aeabi_dsub>
 80176f8:	3630      	adds	r6, #48	; 0x30
 80176fa:	f805 6b01 	strb.w	r6, [r5], #1
 80176fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017702:	e9cd 0100 	strd	r0, r1, [sp]
 8017706:	f7f1 f921 	bl	800894c <__aeabi_dcmplt>
 801770a:	2800      	cmp	r0, #0
 801770c:	d163      	bne.n	80177d6 <_dtoa_r+0x5de>
 801770e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017712:	2000      	movs	r0, #0
 8017714:	4937      	ldr	r1, [pc, #220]	; (80177f4 <_dtoa_r+0x5fc>)
 8017716:	f7f0 fcef 	bl	80080f8 <__aeabi_dsub>
 801771a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801771e:	f7f1 f915 	bl	800894c <__aeabi_dcmplt>
 8017722:	2800      	cmp	r0, #0
 8017724:	f040 80b7 	bne.w	8017896 <_dtoa_r+0x69e>
 8017728:	eba5 030b 	sub.w	r3, r5, fp
 801772c:	429f      	cmp	r7, r3
 801772e:	f77f af7c 	ble.w	801762a <_dtoa_r+0x432>
 8017732:	2200      	movs	r2, #0
 8017734:	4b30      	ldr	r3, [pc, #192]	; (80177f8 <_dtoa_r+0x600>)
 8017736:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801773a:	f7f0 fe95 	bl	8008468 <__aeabi_dmul>
 801773e:	2200      	movs	r2, #0
 8017740:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017744:	4b2c      	ldr	r3, [pc, #176]	; (80177f8 <_dtoa_r+0x600>)
 8017746:	e9dd 0100 	ldrd	r0, r1, [sp]
 801774a:	f7f0 fe8d 	bl	8008468 <__aeabi_dmul>
 801774e:	e9cd 0100 	strd	r0, r1, [sp]
 8017752:	e7c4      	b.n	80176de <_dtoa_r+0x4e6>
 8017754:	462a      	mov	r2, r5
 8017756:	4633      	mov	r3, r6
 8017758:	f7f0 fe86 	bl	8008468 <__aeabi_dmul>
 801775c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017760:	eb0b 0507 	add.w	r5, fp, r7
 8017764:	465e      	mov	r6, fp
 8017766:	e9dd 0100 	ldrd	r0, r1, [sp]
 801776a:	f7f1 f92d 	bl	80089c8 <__aeabi_d2iz>
 801776e:	4607      	mov	r7, r0
 8017770:	f7f0 fe10 	bl	8008394 <__aeabi_i2d>
 8017774:	3730      	adds	r7, #48	; 0x30
 8017776:	4602      	mov	r2, r0
 8017778:	460b      	mov	r3, r1
 801777a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801777e:	f7f0 fcbb 	bl	80080f8 <__aeabi_dsub>
 8017782:	f806 7b01 	strb.w	r7, [r6], #1
 8017786:	42ae      	cmp	r6, r5
 8017788:	e9cd 0100 	strd	r0, r1, [sp]
 801778c:	f04f 0200 	mov.w	r2, #0
 8017790:	d126      	bne.n	80177e0 <_dtoa_r+0x5e8>
 8017792:	4b1c      	ldr	r3, [pc, #112]	; (8017804 <_dtoa_r+0x60c>)
 8017794:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017798:	f7f0 fcb0 	bl	80080fc <__adddf3>
 801779c:	4602      	mov	r2, r0
 801779e:	460b      	mov	r3, r1
 80177a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80177a4:	f7f1 f8f0 	bl	8008988 <__aeabi_dcmpgt>
 80177a8:	2800      	cmp	r0, #0
 80177aa:	d174      	bne.n	8017896 <_dtoa_r+0x69e>
 80177ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80177b0:	2000      	movs	r0, #0
 80177b2:	4914      	ldr	r1, [pc, #80]	; (8017804 <_dtoa_r+0x60c>)
 80177b4:	f7f0 fca0 	bl	80080f8 <__aeabi_dsub>
 80177b8:	4602      	mov	r2, r0
 80177ba:	460b      	mov	r3, r1
 80177bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80177c0:	f7f1 f8c4 	bl	800894c <__aeabi_dcmplt>
 80177c4:	2800      	cmp	r0, #0
 80177c6:	f43f af30 	beq.w	801762a <_dtoa_r+0x432>
 80177ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80177ce:	2b30      	cmp	r3, #48	; 0x30
 80177d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80177d4:	d002      	beq.n	80177dc <_dtoa_r+0x5e4>
 80177d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80177da:	e04a      	b.n	8017872 <_dtoa_r+0x67a>
 80177dc:	4615      	mov	r5, r2
 80177de:	e7f4      	b.n	80177ca <_dtoa_r+0x5d2>
 80177e0:	4b05      	ldr	r3, [pc, #20]	; (80177f8 <_dtoa_r+0x600>)
 80177e2:	f7f0 fe41 	bl	8008468 <__aeabi_dmul>
 80177e6:	e9cd 0100 	strd	r0, r1, [sp]
 80177ea:	e7bc      	b.n	8017766 <_dtoa_r+0x56e>
 80177ec:	0801a720 	.word	0x0801a720
 80177f0:	0801a6f8 	.word	0x0801a6f8
 80177f4:	3ff00000 	.word	0x3ff00000
 80177f8:	40240000 	.word	0x40240000
 80177fc:	401c0000 	.word	0x401c0000
 8017800:	40140000 	.word	0x40140000
 8017804:	3fe00000 	.word	0x3fe00000
 8017808:	e9dd 6700 	ldrd	r6, r7, [sp]
 801780c:	465d      	mov	r5, fp
 801780e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017812:	4630      	mov	r0, r6
 8017814:	4639      	mov	r1, r7
 8017816:	f7f0 ff51 	bl	80086bc <__aeabi_ddiv>
 801781a:	f7f1 f8d5 	bl	80089c8 <__aeabi_d2iz>
 801781e:	4680      	mov	r8, r0
 8017820:	f7f0 fdb8 	bl	8008394 <__aeabi_i2d>
 8017824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017828:	f7f0 fe1e 	bl	8008468 <__aeabi_dmul>
 801782c:	4602      	mov	r2, r0
 801782e:	460b      	mov	r3, r1
 8017830:	4630      	mov	r0, r6
 8017832:	4639      	mov	r1, r7
 8017834:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017838:	f7f0 fc5e 	bl	80080f8 <__aeabi_dsub>
 801783c:	f805 6b01 	strb.w	r6, [r5], #1
 8017840:	eba5 060b 	sub.w	r6, r5, fp
 8017844:	45b1      	cmp	r9, r6
 8017846:	4602      	mov	r2, r0
 8017848:	460b      	mov	r3, r1
 801784a:	d139      	bne.n	80178c0 <_dtoa_r+0x6c8>
 801784c:	f7f0 fc56 	bl	80080fc <__adddf3>
 8017850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017854:	4606      	mov	r6, r0
 8017856:	460f      	mov	r7, r1
 8017858:	f7f1 f896 	bl	8008988 <__aeabi_dcmpgt>
 801785c:	b9c8      	cbnz	r0, 8017892 <_dtoa_r+0x69a>
 801785e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017862:	4630      	mov	r0, r6
 8017864:	4639      	mov	r1, r7
 8017866:	f7f1 f867 	bl	8008938 <__aeabi_dcmpeq>
 801786a:	b110      	cbz	r0, 8017872 <_dtoa_r+0x67a>
 801786c:	f018 0f01 	tst.w	r8, #1
 8017870:	d10f      	bne.n	8017892 <_dtoa_r+0x69a>
 8017872:	9904      	ldr	r1, [sp, #16]
 8017874:	4620      	mov	r0, r4
 8017876:	f001 f819 	bl	80188ac <_Bfree>
 801787a:	2300      	movs	r3, #0
 801787c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801787e:	702b      	strb	r3, [r5, #0]
 8017880:	f10a 0301 	add.w	r3, sl, #1
 8017884:	6013      	str	r3, [r2, #0]
 8017886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017888:	2b00      	cmp	r3, #0
 801788a:	f000 8241 	beq.w	8017d10 <_dtoa_r+0xb18>
 801788e:	601d      	str	r5, [r3, #0]
 8017890:	e23e      	b.n	8017d10 <_dtoa_r+0xb18>
 8017892:	f8cd a020 	str.w	sl, [sp, #32]
 8017896:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801789a:	2a39      	cmp	r2, #57	; 0x39
 801789c:	f105 33ff 	add.w	r3, r5, #4294967295
 80178a0:	d108      	bne.n	80178b4 <_dtoa_r+0x6bc>
 80178a2:	459b      	cmp	fp, r3
 80178a4:	d10a      	bne.n	80178bc <_dtoa_r+0x6c4>
 80178a6:	9b08      	ldr	r3, [sp, #32]
 80178a8:	3301      	adds	r3, #1
 80178aa:	9308      	str	r3, [sp, #32]
 80178ac:	2330      	movs	r3, #48	; 0x30
 80178ae:	f88b 3000 	strb.w	r3, [fp]
 80178b2:	465b      	mov	r3, fp
 80178b4:	781a      	ldrb	r2, [r3, #0]
 80178b6:	3201      	adds	r2, #1
 80178b8:	701a      	strb	r2, [r3, #0]
 80178ba:	e78c      	b.n	80177d6 <_dtoa_r+0x5de>
 80178bc:	461d      	mov	r5, r3
 80178be:	e7ea      	b.n	8017896 <_dtoa_r+0x69e>
 80178c0:	2200      	movs	r2, #0
 80178c2:	4b9b      	ldr	r3, [pc, #620]	; (8017b30 <_dtoa_r+0x938>)
 80178c4:	f7f0 fdd0 	bl	8008468 <__aeabi_dmul>
 80178c8:	2200      	movs	r2, #0
 80178ca:	2300      	movs	r3, #0
 80178cc:	4606      	mov	r6, r0
 80178ce:	460f      	mov	r7, r1
 80178d0:	f7f1 f832 	bl	8008938 <__aeabi_dcmpeq>
 80178d4:	2800      	cmp	r0, #0
 80178d6:	d09a      	beq.n	801780e <_dtoa_r+0x616>
 80178d8:	e7cb      	b.n	8017872 <_dtoa_r+0x67a>
 80178da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80178dc:	2a00      	cmp	r2, #0
 80178de:	f000 808b 	beq.w	80179f8 <_dtoa_r+0x800>
 80178e2:	9a06      	ldr	r2, [sp, #24]
 80178e4:	2a01      	cmp	r2, #1
 80178e6:	dc6e      	bgt.n	80179c6 <_dtoa_r+0x7ce>
 80178e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80178ea:	2a00      	cmp	r2, #0
 80178ec:	d067      	beq.n	80179be <_dtoa_r+0x7c6>
 80178ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80178f2:	9f07      	ldr	r7, [sp, #28]
 80178f4:	9d05      	ldr	r5, [sp, #20]
 80178f6:	9a05      	ldr	r2, [sp, #20]
 80178f8:	2101      	movs	r1, #1
 80178fa:	441a      	add	r2, r3
 80178fc:	4620      	mov	r0, r4
 80178fe:	9205      	str	r2, [sp, #20]
 8017900:	4498      	add	r8, r3
 8017902:	f001 f8b1 	bl	8018a68 <__i2b>
 8017906:	4606      	mov	r6, r0
 8017908:	2d00      	cmp	r5, #0
 801790a:	dd0c      	ble.n	8017926 <_dtoa_r+0x72e>
 801790c:	f1b8 0f00 	cmp.w	r8, #0
 8017910:	dd09      	ble.n	8017926 <_dtoa_r+0x72e>
 8017912:	4545      	cmp	r5, r8
 8017914:	9a05      	ldr	r2, [sp, #20]
 8017916:	462b      	mov	r3, r5
 8017918:	bfa8      	it	ge
 801791a:	4643      	movge	r3, r8
 801791c:	1ad2      	subs	r2, r2, r3
 801791e:	9205      	str	r2, [sp, #20]
 8017920:	1aed      	subs	r5, r5, r3
 8017922:	eba8 0803 	sub.w	r8, r8, r3
 8017926:	9b07      	ldr	r3, [sp, #28]
 8017928:	b1eb      	cbz	r3, 8017966 <_dtoa_r+0x76e>
 801792a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801792c:	2b00      	cmp	r3, #0
 801792e:	d067      	beq.n	8017a00 <_dtoa_r+0x808>
 8017930:	b18f      	cbz	r7, 8017956 <_dtoa_r+0x75e>
 8017932:	4631      	mov	r1, r6
 8017934:	463a      	mov	r2, r7
 8017936:	4620      	mov	r0, r4
 8017938:	f001 f936 	bl	8018ba8 <__pow5mult>
 801793c:	9a04      	ldr	r2, [sp, #16]
 801793e:	4601      	mov	r1, r0
 8017940:	4606      	mov	r6, r0
 8017942:	4620      	mov	r0, r4
 8017944:	f001 f899 	bl	8018a7a <__multiply>
 8017948:	9904      	ldr	r1, [sp, #16]
 801794a:	9008      	str	r0, [sp, #32]
 801794c:	4620      	mov	r0, r4
 801794e:	f000 ffad 	bl	80188ac <_Bfree>
 8017952:	9b08      	ldr	r3, [sp, #32]
 8017954:	9304      	str	r3, [sp, #16]
 8017956:	9b07      	ldr	r3, [sp, #28]
 8017958:	1bda      	subs	r2, r3, r7
 801795a:	d004      	beq.n	8017966 <_dtoa_r+0x76e>
 801795c:	9904      	ldr	r1, [sp, #16]
 801795e:	4620      	mov	r0, r4
 8017960:	f001 f922 	bl	8018ba8 <__pow5mult>
 8017964:	9004      	str	r0, [sp, #16]
 8017966:	2101      	movs	r1, #1
 8017968:	4620      	mov	r0, r4
 801796a:	f001 f87d 	bl	8018a68 <__i2b>
 801796e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017970:	4607      	mov	r7, r0
 8017972:	2b00      	cmp	r3, #0
 8017974:	f000 81d0 	beq.w	8017d18 <_dtoa_r+0xb20>
 8017978:	461a      	mov	r2, r3
 801797a:	4601      	mov	r1, r0
 801797c:	4620      	mov	r0, r4
 801797e:	f001 f913 	bl	8018ba8 <__pow5mult>
 8017982:	9b06      	ldr	r3, [sp, #24]
 8017984:	2b01      	cmp	r3, #1
 8017986:	4607      	mov	r7, r0
 8017988:	dc40      	bgt.n	8017a0c <_dtoa_r+0x814>
 801798a:	9b00      	ldr	r3, [sp, #0]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d139      	bne.n	8017a04 <_dtoa_r+0x80c>
 8017990:	9b01      	ldr	r3, [sp, #4]
 8017992:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017996:	2b00      	cmp	r3, #0
 8017998:	d136      	bne.n	8017a08 <_dtoa_r+0x810>
 801799a:	9b01      	ldr	r3, [sp, #4]
 801799c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80179a0:	0d1b      	lsrs	r3, r3, #20
 80179a2:	051b      	lsls	r3, r3, #20
 80179a4:	b12b      	cbz	r3, 80179b2 <_dtoa_r+0x7ba>
 80179a6:	9b05      	ldr	r3, [sp, #20]
 80179a8:	3301      	adds	r3, #1
 80179aa:	9305      	str	r3, [sp, #20]
 80179ac:	f108 0801 	add.w	r8, r8, #1
 80179b0:	2301      	movs	r3, #1
 80179b2:	9307      	str	r3, [sp, #28]
 80179b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d12a      	bne.n	8017a10 <_dtoa_r+0x818>
 80179ba:	2001      	movs	r0, #1
 80179bc:	e030      	b.n	8017a20 <_dtoa_r+0x828>
 80179be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80179c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80179c4:	e795      	b.n	80178f2 <_dtoa_r+0x6fa>
 80179c6:	9b07      	ldr	r3, [sp, #28]
 80179c8:	f109 37ff 	add.w	r7, r9, #4294967295
 80179cc:	42bb      	cmp	r3, r7
 80179ce:	bfbf      	itttt	lt
 80179d0:	9b07      	ldrlt	r3, [sp, #28]
 80179d2:	9707      	strlt	r7, [sp, #28]
 80179d4:	1afa      	sublt	r2, r7, r3
 80179d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80179d8:	bfbb      	ittet	lt
 80179da:	189b      	addlt	r3, r3, r2
 80179dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80179de:	1bdf      	subge	r7, r3, r7
 80179e0:	2700      	movlt	r7, #0
 80179e2:	f1b9 0f00 	cmp.w	r9, #0
 80179e6:	bfb5      	itete	lt
 80179e8:	9b05      	ldrlt	r3, [sp, #20]
 80179ea:	9d05      	ldrge	r5, [sp, #20]
 80179ec:	eba3 0509 	sublt.w	r5, r3, r9
 80179f0:	464b      	movge	r3, r9
 80179f2:	bfb8      	it	lt
 80179f4:	2300      	movlt	r3, #0
 80179f6:	e77e      	b.n	80178f6 <_dtoa_r+0x6fe>
 80179f8:	9f07      	ldr	r7, [sp, #28]
 80179fa:	9d05      	ldr	r5, [sp, #20]
 80179fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80179fe:	e783      	b.n	8017908 <_dtoa_r+0x710>
 8017a00:	9a07      	ldr	r2, [sp, #28]
 8017a02:	e7ab      	b.n	801795c <_dtoa_r+0x764>
 8017a04:	2300      	movs	r3, #0
 8017a06:	e7d4      	b.n	80179b2 <_dtoa_r+0x7ba>
 8017a08:	9b00      	ldr	r3, [sp, #0]
 8017a0a:	e7d2      	b.n	80179b2 <_dtoa_r+0x7ba>
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	9307      	str	r3, [sp, #28]
 8017a10:	693b      	ldr	r3, [r7, #16]
 8017a12:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017a16:	6918      	ldr	r0, [r3, #16]
 8017a18:	f000 ffd8 	bl	80189cc <__hi0bits>
 8017a1c:	f1c0 0020 	rsb	r0, r0, #32
 8017a20:	4440      	add	r0, r8
 8017a22:	f010 001f 	ands.w	r0, r0, #31
 8017a26:	d047      	beq.n	8017ab8 <_dtoa_r+0x8c0>
 8017a28:	f1c0 0320 	rsb	r3, r0, #32
 8017a2c:	2b04      	cmp	r3, #4
 8017a2e:	dd3b      	ble.n	8017aa8 <_dtoa_r+0x8b0>
 8017a30:	9b05      	ldr	r3, [sp, #20]
 8017a32:	f1c0 001c 	rsb	r0, r0, #28
 8017a36:	4403      	add	r3, r0
 8017a38:	9305      	str	r3, [sp, #20]
 8017a3a:	4405      	add	r5, r0
 8017a3c:	4480      	add	r8, r0
 8017a3e:	9b05      	ldr	r3, [sp, #20]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	dd05      	ble.n	8017a50 <_dtoa_r+0x858>
 8017a44:	461a      	mov	r2, r3
 8017a46:	9904      	ldr	r1, [sp, #16]
 8017a48:	4620      	mov	r0, r4
 8017a4a:	f001 f8fb 	bl	8018c44 <__lshift>
 8017a4e:	9004      	str	r0, [sp, #16]
 8017a50:	f1b8 0f00 	cmp.w	r8, #0
 8017a54:	dd05      	ble.n	8017a62 <_dtoa_r+0x86a>
 8017a56:	4639      	mov	r1, r7
 8017a58:	4642      	mov	r2, r8
 8017a5a:	4620      	mov	r0, r4
 8017a5c:	f001 f8f2 	bl	8018c44 <__lshift>
 8017a60:	4607      	mov	r7, r0
 8017a62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a64:	b353      	cbz	r3, 8017abc <_dtoa_r+0x8c4>
 8017a66:	4639      	mov	r1, r7
 8017a68:	9804      	ldr	r0, [sp, #16]
 8017a6a:	f001 f93f 	bl	8018cec <__mcmp>
 8017a6e:	2800      	cmp	r0, #0
 8017a70:	da24      	bge.n	8017abc <_dtoa_r+0x8c4>
 8017a72:	2300      	movs	r3, #0
 8017a74:	220a      	movs	r2, #10
 8017a76:	9904      	ldr	r1, [sp, #16]
 8017a78:	4620      	mov	r0, r4
 8017a7a:	f000 ff2e 	bl	80188da <__multadd>
 8017a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a80:	9004      	str	r0, [sp, #16]
 8017a82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	f000 814d 	beq.w	8017d26 <_dtoa_r+0xb2e>
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	4631      	mov	r1, r6
 8017a90:	220a      	movs	r2, #10
 8017a92:	4620      	mov	r0, r4
 8017a94:	f000 ff21 	bl	80188da <__multadd>
 8017a98:	9b02      	ldr	r3, [sp, #8]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	4606      	mov	r6, r0
 8017a9e:	dc4f      	bgt.n	8017b40 <_dtoa_r+0x948>
 8017aa0:	9b06      	ldr	r3, [sp, #24]
 8017aa2:	2b02      	cmp	r3, #2
 8017aa4:	dd4c      	ble.n	8017b40 <_dtoa_r+0x948>
 8017aa6:	e011      	b.n	8017acc <_dtoa_r+0x8d4>
 8017aa8:	d0c9      	beq.n	8017a3e <_dtoa_r+0x846>
 8017aaa:	9a05      	ldr	r2, [sp, #20]
 8017aac:	331c      	adds	r3, #28
 8017aae:	441a      	add	r2, r3
 8017ab0:	9205      	str	r2, [sp, #20]
 8017ab2:	441d      	add	r5, r3
 8017ab4:	4498      	add	r8, r3
 8017ab6:	e7c2      	b.n	8017a3e <_dtoa_r+0x846>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	e7f6      	b.n	8017aaa <_dtoa_r+0x8b2>
 8017abc:	f1b9 0f00 	cmp.w	r9, #0
 8017ac0:	dc38      	bgt.n	8017b34 <_dtoa_r+0x93c>
 8017ac2:	9b06      	ldr	r3, [sp, #24]
 8017ac4:	2b02      	cmp	r3, #2
 8017ac6:	dd35      	ble.n	8017b34 <_dtoa_r+0x93c>
 8017ac8:	f8cd 9008 	str.w	r9, [sp, #8]
 8017acc:	9b02      	ldr	r3, [sp, #8]
 8017ace:	b963      	cbnz	r3, 8017aea <_dtoa_r+0x8f2>
 8017ad0:	4639      	mov	r1, r7
 8017ad2:	2205      	movs	r2, #5
 8017ad4:	4620      	mov	r0, r4
 8017ad6:	f000 ff00 	bl	80188da <__multadd>
 8017ada:	4601      	mov	r1, r0
 8017adc:	4607      	mov	r7, r0
 8017ade:	9804      	ldr	r0, [sp, #16]
 8017ae0:	f001 f904 	bl	8018cec <__mcmp>
 8017ae4:	2800      	cmp	r0, #0
 8017ae6:	f73f adcc 	bgt.w	8017682 <_dtoa_r+0x48a>
 8017aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017aec:	465d      	mov	r5, fp
 8017aee:	ea6f 0a03 	mvn.w	sl, r3
 8017af2:	f04f 0900 	mov.w	r9, #0
 8017af6:	4639      	mov	r1, r7
 8017af8:	4620      	mov	r0, r4
 8017afa:	f000 fed7 	bl	80188ac <_Bfree>
 8017afe:	2e00      	cmp	r6, #0
 8017b00:	f43f aeb7 	beq.w	8017872 <_dtoa_r+0x67a>
 8017b04:	f1b9 0f00 	cmp.w	r9, #0
 8017b08:	d005      	beq.n	8017b16 <_dtoa_r+0x91e>
 8017b0a:	45b1      	cmp	r9, r6
 8017b0c:	d003      	beq.n	8017b16 <_dtoa_r+0x91e>
 8017b0e:	4649      	mov	r1, r9
 8017b10:	4620      	mov	r0, r4
 8017b12:	f000 fecb 	bl	80188ac <_Bfree>
 8017b16:	4631      	mov	r1, r6
 8017b18:	4620      	mov	r0, r4
 8017b1a:	f000 fec7 	bl	80188ac <_Bfree>
 8017b1e:	e6a8      	b.n	8017872 <_dtoa_r+0x67a>
 8017b20:	2700      	movs	r7, #0
 8017b22:	463e      	mov	r6, r7
 8017b24:	e7e1      	b.n	8017aea <_dtoa_r+0x8f2>
 8017b26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017b2a:	463e      	mov	r6, r7
 8017b2c:	e5a9      	b.n	8017682 <_dtoa_r+0x48a>
 8017b2e:	bf00      	nop
 8017b30:	40240000 	.word	0x40240000
 8017b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b36:	f8cd 9008 	str.w	r9, [sp, #8]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	f000 80fa 	beq.w	8017d34 <_dtoa_r+0xb3c>
 8017b40:	2d00      	cmp	r5, #0
 8017b42:	dd05      	ble.n	8017b50 <_dtoa_r+0x958>
 8017b44:	4631      	mov	r1, r6
 8017b46:	462a      	mov	r2, r5
 8017b48:	4620      	mov	r0, r4
 8017b4a:	f001 f87b 	bl	8018c44 <__lshift>
 8017b4e:	4606      	mov	r6, r0
 8017b50:	9b07      	ldr	r3, [sp, #28]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d04c      	beq.n	8017bf0 <_dtoa_r+0x9f8>
 8017b56:	6871      	ldr	r1, [r6, #4]
 8017b58:	4620      	mov	r0, r4
 8017b5a:	f000 fe73 	bl	8018844 <_Balloc>
 8017b5e:	6932      	ldr	r2, [r6, #16]
 8017b60:	3202      	adds	r2, #2
 8017b62:	4605      	mov	r5, r0
 8017b64:	0092      	lsls	r2, r2, #2
 8017b66:	f106 010c 	add.w	r1, r6, #12
 8017b6a:	300c      	adds	r0, #12
 8017b6c:	f7fd fb86 	bl	801527c <memcpy>
 8017b70:	2201      	movs	r2, #1
 8017b72:	4629      	mov	r1, r5
 8017b74:	4620      	mov	r0, r4
 8017b76:	f001 f865 	bl	8018c44 <__lshift>
 8017b7a:	9b00      	ldr	r3, [sp, #0]
 8017b7c:	f8cd b014 	str.w	fp, [sp, #20]
 8017b80:	f003 0301 	and.w	r3, r3, #1
 8017b84:	46b1      	mov	r9, r6
 8017b86:	9307      	str	r3, [sp, #28]
 8017b88:	4606      	mov	r6, r0
 8017b8a:	4639      	mov	r1, r7
 8017b8c:	9804      	ldr	r0, [sp, #16]
 8017b8e:	f7ff faa5 	bl	80170dc <quorem>
 8017b92:	4649      	mov	r1, r9
 8017b94:	4605      	mov	r5, r0
 8017b96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017b9a:	9804      	ldr	r0, [sp, #16]
 8017b9c:	f001 f8a6 	bl	8018cec <__mcmp>
 8017ba0:	4632      	mov	r2, r6
 8017ba2:	9000      	str	r0, [sp, #0]
 8017ba4:	4639      	mov	r1, r7
 8017ba6:	4620      	mov	r0, r4
 8017ba8:	f001 f8ba 	bl	8018d20 <__mdiff>
 8017bac:	68c3      	ldr	r3, [r0, #12]
 8017bae:	4602      	mov	r2, r0
 8017bb0:	bb03      	cbnz	r3, 8017bf4 <_dtoa_r+0x9fc>
 8017bb2:	4601      	mov	r1, r0
 8017bb4:	9008      	str	r0, [sp, #32]
 8017bb6:	9804      	ldr	r0, [sp, #16]
 8017bb8:	f001 f898 	bl	8018cec <__mcmp>
 8017bbc:	9a08      	ldr	r2, [sp, #32]
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	4611      	mov	r1, r2
 8017bc2:	4620      	mov	r0, r4
 8017bc4:	9308      	str	r3, [sp, #32]
 8017bc6:	f000 fe71 	bl	80188ac <_Bfree>
 8017bca:	9b08      	ldr	r3, [sp, #32]
 8017bcc:	b9a3      	cbnz	r3, 8017bf8 <_dtoa_r+0xa00>
 8017bce:	9a06      	ldr	r2, [sp, #24]
 8017bd0:	b992      	cbnz	r2, 8017bf8 <_dtoa_r+0xa00>
 8017bd2:	9a07      	ldr	r2, [sp, #28]
 8017bd4:	b982      	cbnz	r2, 8017bf8 <_dtoa_r+0xa00>
 8017bd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017bda:	d029      	beq.n	8017c30 <_dtoa_r+0xa38>
 8017bdc:	9b00      	ldr	r3, [sp, #0]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	dd01      	ble.n	8017be6 <_dtoa_r+0x9ee>
 8017be2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017be6:	9b05      	ldr	r3, [sp, #20]
 8017be8:	1c5d      	adds	r5, r3, #1
 8017bea:	f883 8000 	strb.w	r8, [r3]
 8017bee:	e782      	b.n	8017af6 <_dtoa_r+0x8fe>
 8017bf0:	4630      	mov	r0, r6
 8017bf2:	e7c2      	b.n	8017b7a <_dtoa_r+0x982>
 8017bf4:	2301      	movs	r3, #1
 8017bf6:	e7e3      	b.n	8017bc0 <_dtoa_r+0x9c8>
 8017bf8:	9a00      	ldr	r2, [sp, #0]
 8017bfa:	2a00      	cmp	r2, #0
 8017bfc:	db04      	blt.n	8017c08 <_dtoa_r+0xa10>
 8017bfe:	d125      	bne.n	8017c4c <_dtoa_r+0xa54>
 8017c00:	9a06      	ldr	r2, [sp, #24]
 8017c02:	bb1a      	cbnz	r2, 8017c4c <_dtoa_r+0xa54>
 8017c04:	9a07      	ldr	r2, [sp, #28]
 8017c06:	bb0a      	cbnz	r2, 8017c4c <_dtoa_r+0xa54>
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	ddec      	ble.n	8017be6 <_dtoa_r+0x9ee>
 8017c0c:	2201      	movs	r2, #1
 8017c0e:	9904      	ldr	r1, [sp, #16]
 8017c10:	4620      	mov	r0, r4
 8017c12:	f001 f817 	bl	8018c44 <__lshift>
 8017c16:	4639      	mov	r1, r7
 8017c18:	9004      	str	r0, [sp, #16]
 8017c1a:	f001 f867 	bl	8018cec <__mcmp>
 8017c1e:	2800      	cmp	r0, #0
 8017c20:	dc03      	bgt.n	8017c2a <_dtoa_r+0xa32>
 8017c22:	d1e0      	bne.n	8017be6 <_dtoa_r+0x9ee>
 8017c24:	f018 0f01 	tst.w	r8, #1
 8017c28:	d0dd      	beq.n	8017be6 <_dtoa_r+0x9ee>
 8017c2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017c2e:	d1d8      	bne.n	8017be2 <_dtoa_r+0x9ea>
 8017c30:	9b05      	ldr	r3, [sp, #20]
 8017c32:	9a05      	ldr	r2, [sp, #20]
 8017c34:	1c5d      	adds	r5, r3, #1
 8017c36:	2339      	movs	r3, #57	; 0x39
 8017c38:	7013      	strb	r3, [r2, #0]
 8017c3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017c3e:	2b39      	cmp	r3, #57	; 0x39
 8017c40:	f105 32ff 	add.w	r2, r5, #4294967295
 8017c44:	d04f      	beq.n	8017ce6 <_dtoa_r+0xaee>
 8017c46:	3301      	adds	r3, #1
 8017c48:	7013      	strb	r3, [r2, #0]
 8017c4a:	e754      	b.n	8017af6 <_dtoa_r+0x8fe>
 8017c4c:	9a05      	ldr	r2, [sp, #20]
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	f102 0501 	add.w	r5, r2, #1
 8017c54:	dd06      	ble.n	8017c64 <_dtoa_r+0xa6c>
 8017c56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017c5a:	d0e9      	beq.n	8017c30 <_dtoa_r+0xa38>
 8017c5c:	f108 0801 	add.w	r8, r8, #1
 8017c60:	9b05      	ldr	r3, [sp, #20]
 8017c62:	e7c2      	b.n	8017bea <_dtoa_r+0x9f2>
 8017c64:	9a02      	ldr	r2, [sp, #8]
 8017c66:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017c6a:	eba5 030b 	sub.w	r3, r5, fp
 8017c6e:	4293      	cmp	r3, r2
 8017c70:	d021      	beq.n	8017cb6 <_dtoa_r+0xabe>
 8017c72:	2300      	movs	r3, #0
 8017c74:	220a      	movs	r2, #10
 8017c76:	9904      	ldr	r1, [sp, #16]
 8017c78:	4620      	mov	r0, r4
 8017c7a:	f000 fe2e 	bl	80188da <__multadd>
 8017c7e:	45b1      	cmp	r9, r6
 8017c80:	9004      	str	r0, [sp, #16]
 8017c82:	f04f 0300 	mov.w	r3, #0
 8017c86:	f04f 020a 	mov.w	r2, #10
 8017c8a:	4649      	mov	r1, r9
 8017c8c:	4620      	mov	r0, r4
 8017c8e:	d105      	bne.n	8017c9c <_dtoa_r+0xaa4>
 8017c90:	f000 fe23 	bl	80188da <__multadd>
 8017c94:	4681      	mov	r9, r0
 8017c96:	4606      	mov	r6, r0
 8017c98:	9505      	str	r5, [sp, #20]
 8017c9a:	e776      	b.n	8017b8a <_dtoa_r+0x992>
 8017c9c:	f000 fe1d 	bl	80188da <__multadd>
 8017ca0:	4631      	mov	r1, r6
 8017ca2:	4681      	mov	r9, r0
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	220a      	movs	r2, #10
 8017ca8:	4620      	mov	r0, r4
 8017caa:	f000 fe16 	bl	80188da <__multadd>
 8017cae:	4606      	mov	r6, r0
 8017cb0:	e7f2      	b.n	8017c98 <_dtoa_r+0xaa0>
 8017cb2:	f04f 0900 	mov.w	r9, #0
 8017cb6:	2201      	movs	r2, #1
 8017cb8:	9904      	ldr	r1, [sp, #16]
 8017cba:	4620      	mov	r0, r4
 8017cbc:	f000 ffc2 	bl	8018c44 <__lshift>
 8017cc0:	4639      	mov	r1, r7
 8017cc2:	9004      	str	r0, [sp, #16]
 8017cc4:	f001 f812 	bl	8018cec <__mcmp>
 8017cc8:	2800      	cmp	r0, #0
 8017cca:	dcb6      	bgt.n	8017c3a <_dtoa_r+0xa42>
 8017ccc:	d102      	bne.n	8017cd4 <_dtoa_r+0xadc>
 8017cce:	f018 0f01 	tst.w	r8, #1
 8017cd2:	d1b2      	bne.n	8017c3a <_dtoa_r+0xa42>
 8017cd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017cd8:	2b30      	cmp	r3, #48	; 0x30
 8017cda:	f105 32ff 	add.w	r2, r5, #4294967295
 8017cde:	f47f af0a 	bne.w	8017af6 <_dtoa_r+0x8fe>
 8017ce2:	4615      	mov	r5, r2
 8017ce4:	e7f6      	b.n	8017cd4 <_dtoa_r+0xadc>
 8017ce6:	4593      	cmp	fp, r2
 8017ce8:	d105      	bne.n	8017cf6 <_dtoa_r+0xafe>
 8017cea:	2331      	movs	r3, #49	; 0x31
 8017cec:	f10a 0a01 	add.w	sl, sl, #1
 8017cf0:	f88b 3000 	strb.w	r3, [fp]
 8017cf4:	e6ff      	b.n	8017af6 <_dtoa_r+0x8fe>
 8017cf6:	4615      	mov	r5, r2
 8017cf8:	e79f      	b.n	8017c3a <_dtoa_r+0xa42>
 8017cfa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017d60 <_dtoa_r+0xb68>
 8017cfe:	e007      	b.n	8017d10 <_dtoa_r+0xb18>
 8017d00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d02:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017d64 <_dtoa_r+0xb6c>
 8017d06:	b11b      	cbz	r3, 8017d10 <_dtoa_r+0xb18>
 8017d08:	f10b 0308 	add.w	r3, fp, #8
 8017d0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017d0e:	6013      	str	r3, [r2, #0]
 8017d10:	4658      	mov	r0, fp
 8017d12:	b017      	add	sp, #92	; 0x5c
 8017d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d18:	9b06      	ldr	r3, [sp, #24]
 8017d1a:	2b01      	cmp	r3, #1
 8017d1c:	f77f ae35 	ble.w	801798a <_dtoa_r+0x792>
 8017d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d22:	9307      	str	r3, [sp, #28]
 8017d24:	e649      	b.n	80179ba <_dtoa_r+0x7c2>
 8017d26:	9b02      	ldr	r3, [sp, #8]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	dc03      	bgt.n	8017d34 <_dtoa_r+0xb3c>
 8017d2c:	9b06      	ldr	r3, [sp, #24]
 8017d2e:	2b02      	cmp	r3, #2
 8017d30:	f73f aecc 	bgt.w	8017acc <_dtoa_r+0x8d4>
 8017d34:	465d      	mov	r5, fp
 8017d36:	4639      	mov	r1, r7
 8017d38:	9804      	ldr	r0, [sp, #16]
 8017d3a:	f7ff f9cf 	bl	80170dc <quorem>
 8017d3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017d42:	f805 8b01 	strb.w	r8, [r5], #1
 8017d46:	9a02      	ldr	r2, [sp, #8]
 8017d48:	eba5 030b 	sub.w	r3, r5, fp
 8017d4c:	429a      	cmp	r2, r3
 8017d4e:	ddb0      	ble.n	8017cb2 <_dtoa_r+0xaba>
 8017d50:	2300      	movs	r3, #0
 8017d52:	220a      	movs	r2, #10
 8017d54:	9904      	ldr	r1, [sp, #16]
 8017d56:	4620      	mov	r0, r4
 8017d58:	f000 fdbf 	bl	80188da <__multadd>
 8017d5c:	9004      	str	r0, [sp, #16]
 8017d5e:	e7ea      	b.n	8017d36 <_dtoa_r+0xb3e>
 8017d60:	0801a81b 	.word	0x0801a81b
 8017d64:	0801a678 	.word	0x0801a678

08017d68 <__sflush_r>:
 8017d68:	898a      	ldrh	r2, [r1, #12]
 8017d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d6e:	4605      	mov	r5, r0
 8017d70:	0710      	lsls	r0, r2, #28
 8017d72:	460c      	mov	r4, r1
 8017d74:	d458      	bmi.n	8017e28 <__sflush_r+0xc0>
 8017d76:	684b      	ldr	r3, [r1, #4]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	dc05      	bgt.n	8017d88 <__sflush_r+0x20>
 8017d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	dc02      	bgt.n	8017d88 <__sflush_r+0x20>
 8017d82:	2000      	movs	r0, #0
 8017d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d8a:	2e00      	cmp	r6, #0
 8017d8c:	d0f9      	beq.n	8017d82 <__sflush_r+0x1a>
 8017d8e:	2300      	movs	r3, #0
 8017d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017d94:	682f      	ldr	r7, [r5, #0]
 8017d96:	6a21      	ldr	r1, [r4, #32]
 8017d98:	602b      	str	r3, [r5, #0]
 8017d9a:	d032      	beq.n	8017e02 <__sflush_r+0x9a>
 8017d9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017d9e:	89a3      	ldrh	r3, [r4, #12]
 8017da0:	075a      	lsls	r2, r3, #29
 8017da2:	d505      	bpl.n	8017db0 <__sflush_r+0x48>
 8017da4:	6863      	ldr	r3, [r4, #4]
 8017da6:	1ac0      	subs	r0, r0, r3
 8017da8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017daa:	b10b      	cbz	r3, 8017db0 <__sflush_r+0x48>
 8017dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017dae:	1ac0      	subs	r0, r0, r3
 8017db0:	2300      	movs	r3, #0
 8017db2:	4602      	mov	r2, r0
 8017db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017db6:	6a21      	ldr	r1, [r4, #32]
 8017db8:	4628      	mov	r0, r5
 8017dba:	47b0      	blx	r6
 8017dbc:	1c43      	adds	r3, r0, #1
 8017dbe:	89a3      	ldrh	r3, [r4, #12]
 8017dc0:	d106      	bne.n	8017dd0 <__sflush_r+0x68>
 8017dc2:	6829      	ldr	r1, [r5, #0]
 8017dc4:	291d      	cmp	r1, #29
 8017dc6:	d848      	bhi.n	8017e5a <__sflush_r+0xf2>
 8017dc8:	4a29      	ldr	r2, [pc, #164]	; (8017e70 <__sflush_r+0x108>)
 8017dca:	40ca      	lsrs	r2, r1
 8017dcc:	07d6      	lsls	r6, r2, #31
 8017dce:	d544      	bpl.n	8017e5a <__sflush_r+0xf2>
 8017dd0:	2200      	movs	r2, #0
 8017dd2:	6062      	str	r2, [r4, #4]
 8017dd4:	04d9      	lsls	r1, r3, #19
 8017dd6:	6922      	ldr	r2, [r4, #16]
 8017dd8:	6022      	str	r2, [r4, #0]
 8017dda:	d504      	bpl.n	8017de6 <__sflush_r+0x7e>
 8017ddc:	1c42      	adds	r2, r0, #1
 8017dde:	d101      	bne.n	8017de4 <__sflush_r+0x7c>
 8017de0:	682b      	ldr	r3, [r5, #0]
 8017de2:	b903      	cbnz	r3, 8017de6 <__sflush_r+0x7e>
 8017de4:	6560      	str	r0, [r4, #84]	; 0x54
 8017de6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017de8:	602f      	str	r7, [r5, #0]
 8017dea:	2900      	cmp	r1, #0
 8017dec:	d0c9      	beq.n	8017d82 <__sflush_r+0x1a>
 8017dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017df2:	4299      	cmp	r1, r3
 8017df4:	d002      	beq.n	8017dfc <__sflush_r+0x94>
 8017df6:	4628      	mov	r0, r5
 8017df8:	f001 f932 	bl	8019060 <_free_r>
 8017dfc:	2000      	movs	r0, #0
 8017dfe:	6360      	str	r0, [r4, #52]	; 0x34
 8017e00:	e7c0      	b.n	8017d84 <__sflush_r+0x1c>
 8017e02:	2301      	movs	r3, #1
 8017e04:	4628      	mov	r0, r5
 8017e06:	47b0      	blx	r6
 8017e08:	1c41      	adds	r1, r0, #1
 8017e0a:	d1c8      	bne.n	8017d9e <__sflush_r+0x36>
 8017e0c:	682b      	ldr	r3, [r5, #0]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d0c5      	beq.n	8017d9e <__sflush_r+0x36>
 8017e12:	2b1d      	cmp	r3, #29
 8017e14:	d001      	beq.n	8017e1a <__sflush_r+0xb2>
 8017e16:	2b16      	cmp	r3, #22
 8017e18:	d101      	bne.n	8017e1e <__sflush_r+0xb6>
 8017e1a:	602f      	str	r7, [r5, #0]
 8017e1c:	e7b1      	b.n	8017d82 <__sflush_r+0x1a>
 8017e1e:	89a3      	ldrh	r3, [r4, #12]
 8017e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e24:	81a3      	strh	r3, [r4, #12]
 8017e26:	e7ad      	b.n	8017d84 <__sflush_r+0x1c>
 8017e28:	690f      	ldr	r7, [r1, #16]
 8017e2a:	2f00      	cmp	r7, #0
 8017e2c:	d0a9      	beq.n	8017d82 <__sflush_r+0x1a>
 8017e2e:	0793      	lsls	r3, r2, #30
 8017e30:	680e      	ldr	r6, [r1, #0]
 8017e32:	bf08      	it	eq
 8017e34:	694b      	ldreq	r3, [r1, #20]
 8017e36:	600f      	str	r7, [r1, #0]
 8017e38:	bf18      	it	ne
 8017e3a:	2300      	movne	r3, #0
 8017e3c:	eba6 0807 	sub.w	r8, r6, r7
 8017e40:	608b      	str	r3, [r1, #8]
 8017e42:	f1b8 0f00 	cmp.w	r8, #0
 8017e46:	dd9c      	ble.n	8017d82 <__sflush_r+0x1a>
 8017e48:	4643      	mov	r3, r8
 8017e4a:	463a      	mov	r2, r7
 8017e4c:	6a21      	ldr	r1, [r4, #32]
 8017e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017e50:	4628      	mov	r0, r5
 8017e52:	47b0      	blx	r6
 8017e54:	2800      	cmp	r0, #0
 8017e56:	dc06      	bgt.n	8017e66 <__sflush_r+0xfe>
 8017e58:	89a3      	ldrh	r3, [r4, #12]
 8017e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e5e:	81a3      	strh	r3, [r4, #12]
 8017e60:	f04f 30ff 	mov.w	r0, #4294967295
 8017e64:	e78e      	b.n	8017d84 <__sflush_r+0x1c>
 8017e66:	4407      	add	r7, r0
 8017e68:	eba8 0800 	sub.w	r8, r8, r0
 8017e6c:	e7e9      	b.n	8017e42 <__sflush_r+0xda>
 8017e6e:	bf00      	nop
 8017e70:	20400001 	.word	0x20400001

08017e74 <_fflush_r>:
 8017e74:	b538      	push	{r3, r4, r5, lr}
 8017e76:	690b      	ldr	r3, [r1, #16]
 8017e78:	4605      	mov	r5, r0
 8017e7a:	460c      	mov	r4, r1
 8017e7c:	b1db      	cbz	r3, 8017eb6 <_fflush_r+0x42>
 8017e7e:	b118      	cbz	r0, 8017e88 <_fflush_r+0x14>
 8017e80:	6983      	ldr	r3, [r0, #24]
 8017e82:	b90b      	cbnz	r3, 8017e88 <_fflush_r+0x14>
 8017e84:	f000 f872 	bl	8017f6c <__sinit>
 8017e88:	4b0c      	ldr	r3, [pc, #48]	; (8017ebc <_fflush_r+0x48>)
 8017e8a:	429c      	cmp	r4, r3
 8017e8c:	d109      	bne.n	8017ea2 <_fflush_r+0x2e>
 8017e8e:	686c      	ldr	r4, [r5, #4]
 8017e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e94:	b17b      	cbz	r3, 8017eb6 <_fflush_r+0x42>
 8017e96:	4621      	mov	r1, r4
 8017e98:	4628      	mov	r0, r5
 8017e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e9e:	f7ff bf63 	b.w	8017d68 <__sflush_r>
 8017ea2:	4b07      	ldr	r3, [pc, #28]	; (8017ec0 <_fflush_r+0x4c>)
 8017ea4:	429c      	cmp	r4, r3
 8017ea6:	d101      	bne.n	8017eac <_fflush_r+0x38>
 8017ea8:	68ac      	ldr	r4, [r5, #8]
 8017eaa:	e7f1      	b.n	8017e90 <_fflush_r+0x1c>
 8017eac:	4b05      	ldr	r3, [pc, #20]	; (8017ec4 <_fflush_r+0x50>)
 8017eae:	429c      	cmp	r4, r3
 8017eb0:	bf08      	it	eq
 8017eb2:	68ec      	ldreq	r4, [r5, #12]
 8017eb4:	e7ec      	b.n	8017e90 <_fflush_r+0x1c>
 8017eb6:	2000      	movs	r0, #0
 8017eb8:	bd38      	pop	{r3, r4, r5, pc}
 8017eba:	bf00      	nop
 8017ebc:	0801a6a8 	.word	0x0801a6a8
 8017ec0:	0801a6c8 	.word	0x0801a6c8
 8017ec4:	0801a688 	.word	0x0801a688

08017ec8 <fflush>:
 8017ec8:	4601      	mov	r1, r0
 8017eca:	b920      	cbnz	r0, 8017ed6 <fflush+0xe>
 8017ecc:	4b04      	ldr	r3, [pc, #16]	; (8017ee0 <fflush+0x18>)
 8017ece:	4905      	ldr	r1, [pc, #20]	; (8017ee4 <fflush+0x1c>)
 8017ed0:	6818      	ldr	r0, [r3, #0]
 8017ed2:	f000 b8d3 	b.w	801807c <_fwalk_reent>
 8017ed6:	4b04      	ldr	r3, [pc, #16]	; (8017ee8 <fflush+0x20>)
 8017ed8:	6818      	ldr	r0, [r3, #0]
 8017eda:	f7ff bfcb 	b.w	8017e74 <_fflush_r>
 8017ede:	bf00      	nop
 8017ee0:	0801a5e8 	.word	0x0801a5e8
 8017ee4:	08017e75 	.word	0x08017e75
 8017ee8:	20000028 	.word	0x20000028

08017eec <std>:
 8017eec:	2300      	movs	r3, #0
 8017eee:	b510      	push	{r4, lr}
 8017ef0:	4604      	mov	r4, r0
 8017ef2:	e9c0 3300 	strd	r3, r3, [r0]
 8017ef6:	6083      	str	r3, [r0, #8]
 8017ef8:	8181      	strh	r1, [r0, #12]
 8017efa:	6643      	str	r3, [r0, #100]	; 0x64
 8017efc:	81c2      	strh	r2, [r0, #14]
 8017efe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017f02:	6183      	str	r3, [r0, #24]
 8017f04:	4619      	mov	r1, r3
 8017f06:	2208      	movs	r2, #8
 8017f08:	305c      	adds	r0, #92	; 0x5c
 8017f0a:	f7fd f9c2 	bl	8015292 <memset>
 8017f0e:	4b05      	ldr	r3, [pc, #20]	; (8017f24 <std+0x38>)
 8017f10:	6263      	str	r3, [r4, #36]	; 0x24
 8017f12:	4b05      	ldr	r3, [pc, #20]	; (8017f28 <std+0x3c>)
 8017f14:	62a3      	str	r3, [r4, #40]	; 0x28
 8017f16:	4b05      	ldr	r3, [pc, #20]	; (8017f2c <std+0x40>)
 8017f18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017f1a:	4b05      	ldr	r3, [pc, #20]	; (8017f30 <std+0x44>)
 8017f1c:	6224      	str	r4, [r4, #32]
 8017f1e:	6323      	str	r3, [r4, #48]	; 0x30
 8017f20:	bd10      	pop	{r4, pc}
 8017f22:	bf00      	nop
 8017f24:	08019e25 	.word	0x08019e25
 8017f28:	08019e47 	.word	0x08019e47
 8017f2c:	08019e7f 	.word	0x08019e7f
 8017f30:	08019ea3 	.word	0x08019ea3

08017f34 <_cleanup_r>:
 8017f34:	4901      	ldr	r1, [pc, #4]	; (8017f3c <_cleanup_r+0x8>)
 8017f36:	f000 b8a1 	b.w	801807c <_fwalk_reent>
 8017f3a:	bf00      	nop
 8017f3c:	08017e75 	.word	0x08017e75

08017f40 <__sfmoreglue>:
 8017f40:	b570      	push	{r4, r5, r6, lr}
 8017f42:	1e4a      	subs	r2, r1, #1
 8017f44:	2568      	movs	r5, #104	; 0x68
 8017f46:	4355      	muls	r5, r2
 8017f48:	460e      	mov	r6, r1
 8017f4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017f4e:	f001 f8d5 	bl	80190fc <_malloc_r>
 8017f52:	4604      	mov	r4, r0
 8017f54:	b140      	cbz	r0, 8017f68 <__sfmoreglue+0x28>
 8017f56:	2100      	movs	r1, #0
 8017f58:	e9c0 1600 	strd	r1, r6, [r0]
 8017f5c:	300c      	adds	r0, #12
 8017f5e:	60a0      	str	r0, [r4, #8]
 8017f60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017f64:	f7fd f995 	bl	8015292 <memset>
 8017f68:	4620      	mov	r0, r4
 8017f6a:	bd70      	pop	{r4, r5, r6, pc}

08017f6c <__sinit>:
 8017f6c:	6983      	ldr	r3, [r0, #24]
 8017f6e:	b510      	push	{r4, lr}
 8017f70:	4604      	mov	r4, r0
 8017f72:	bb33      	cbnz	r3, 8017fc2 <__sinit+0x56>
 8017f74:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017f78:	6503      	str	r3, [r0, #80]	; 0x50
 8017f7a:	4b12      	ldr	r3, [pc, #72]	; (8017fc4 <__sinit+0x58>)
 8017f7c:	4a12      	ldr	r2, [pc, #72]	; (8017fc8 <__sinit+0x5c>)
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	6282      	str	r2, [r0, #40]	; 0x28
 8017f82:	4298      	cmp	r0, r3
 8017f84:	bf04      	itt	eq
 8017f86:	2301      	moveq	r3, #1
 8017f88:	6183      	streq	r3, [r0, #24]
 8017f8a:	f000 f81f 	bl	8017fcc <__sfp>
 8017f8e:	6060      	str	r0, [r4, #4]
 8017f90:	4620      	mov	r0, r4
 8017f92:	f000 f81b 	bl	8017fcc <__sfp>
 8017f96:	60a0      	str	r0, [r4, #8]
 8017f98:	4620      	mov	r0, r4
 8017f9a:	f000 f817 	bl	8017fcc <__sfp>
 8017f9e:	2200      	movs	r2, #0
 8017fa0:	60e0      	str	r0, [r4, #12]
 8017fa2:	2104      	movs	r1, #4
 8017fa4:	6860      	ldr	r0, [r4, #4]
 8017fa6:	f7ff ffa1 	bl	8017eec <std>
 8017faa:	2201      	movs	r2, #1
 8017fac:	2109      	movs	r1, #9
 8017fae:	68a0      	ldr	r0, [r4, #8]
 8017fb0:	f7ff ff9c 	bl	8017eec <std>
 8017fb4:	2202      	movs	r2, #2
 8017fb6:	2112      	movs	r1, #18
 8017fb8:	68e0      	ldr	r0, [r4, #12]
 8017fba:	f7ff ff97 	bl	8017eec <std>
 8017fbe:	2301      	movs	r3, #1
 8017fc0:	61a3      	str	r3, [r4, #24]
 8017fc2:	bd10      	pop	{r4, pc}
 8017fc4:	0801a5e8 	.word	0x0801a5e8
 8017fc8:	08017f35 	.word	0x08017f35

08017fcc <__sfp>:
 8017fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fce:	4b1b      	ldr	r3, [pc, #108]	; (801803c <__sfp+0x70>)
 8017fd0:	681e      	ldr	r6, [r3, #0]
 8017fd2:	69b3      	ldr	r3, [r6, #24]
 8017fd4:	4607      	mov	r7, r0
 8017fd6:	b913      	cbnz	r3, 8017fde <__sfp+0x12>
 8017fd8:	4630      	mov	r0, r6
 8017fda:	f7ff ffc7 	bl	8017f6c <__sinit>
 8017fde:	3648      	adds	r6, #72	; 0x48
 8017fe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017fe4:	3b01      	subs	r3, #1
 8017fe6:	d503      	bpl.n	8017ff0 <__sfp+0x24>
 8017fe8:	6833      	ldr	r3, [r6, #0]
 8017fea:	b133      	cbz	r3, 8017ffa <__sfp+0x2e>
 8017fec:	6836      	ldr	r6, [r6, #0]
 8017fee:	e7f7      	b.n	8017fe0 <__sfp+0x14>
 8017ff0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017ff4:	b16d      	cbz	r5, 8018012 <__sfp+0x46>
 8017ff6:	3468      	adds	r4, #104	; 0x68
 8017ff8:	e7f4      	b.n	8017fe4 <__sfp+0x18>
 8017ffa:	2104      	movs	r1, #4
 8017ffc:	4638      	mov	r0, r7
 8017ffe:	f7ff ff9f 	bl	8017f40 <__sfmoreglue>
 8018002:	6030      	str	r0, [r6, #0]
 8018004:	2800      	cmp	r0, #0
 8018006:	d1f1      	bne.n	8017fec <__sfp+0x20>
 8018008:	230c      	movs	r3, #12
 801800a:	603b      	str	r3, [r7, #0]
 801800c:	4604      	mov	r4, r0
 801800e:	4620      	mov	r0, r4
 8018010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018012:	4b0b      	ldr	r3, [pc, #44]	; (8018040 <__sfp+0x74>)
 8018014:	6665      	str	r5, [r4, #100]	; 0x64
 8018016:	e9c4 5500 	strd	r5, r5, [r4]
 801801a:	60a5      	str	r5, [r4, #8]
 801801c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018020:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018024:	2208      	movs	r2, #8
 8018026:	4629      	mov	r1, r5
 8018028:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801802c:	f7fd f931 	bl	8015292 <memset>
 8018030:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018034:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018038:	e7e9      	b.n	801800e <__sfp+0x42>
 801803a:	bf00      	nop
 801803c:	0801a5e8 	.word	0x0801a5e8
 8018040:	ffff0001 	.word	0xffff0001

08018044 <_fwalk>:
 8018044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018048:	4688      	mov	r8, r1
 801804a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801804e:	2600      	movs	r6, #0
 8018050:	b914      	cbnz	r4, 8018058 <_fwalk+0x14>
 8018052:	4630      	mov	r0, r6
 8018054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018058:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801805c:	3f01      	subs	r7, #1
 801805e:	d501      	bpl.n	8018064 <_fwalk+0x20>
 8018060:	6824      	ldr	r4, [r4, #0]
 8018062:	e7f5      	b.n	8018050 <_fwalk+0xc>
 8018064:	89ab      	ldrh	r3, [r5, #12]
 8018066:	2b01      	cmp	r3, #1
 8018068:	d906      	bls.n	8018078 <_fwalk+0x34>
 801806a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801806e:	3301      	adds	r3, #1
 8018070:	d002      	beq.n	8018078 <_fwalk+0x34>
 8018072:	4628      	mov	r0, r5
 8018074:	47c0      	blx	r8
 8018076:	4306      	orrs	r6, r0
 8018078:	3568      	adds	r5, #104	; 0x68
 801807a:	e7ef      	b.n	801805c <_fwalk+0x18>

0801807c <_fwalk_reent>:
 801807c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018080:	4680      	mov	r8, r0
 8018082:	4689      	mov	r9, r1
 8018084:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018088:	2600      	movs	r6, #0
 801808a:	b914      	cbnz	r4, 8018092 <_fwalk_reent+0x16>
 801808c:	4630      	mov	r0, r6
 801808e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018092:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018096:	3f01      	subs	r7, #1
 8018098:	d501      	bpl.n	801809e <_fwalk_reent+0x22>
 801809a:	6824      	ldr	r4, [r4, #0]
 801809c:	e7f5      	b.n	801808a <_fwalk_reent+0xe>
 801809e:	89ab      	ldrh	r3, [r5, #12]
 80180a0:	2b01      	cmp	r3, #1
 80180a2:	d907      	bls.n	80180b4 <_fwalk_reent+0x38>
 80180a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80180a8:	3301      	adds	r3, #1
 80180aa:	d003      	beq.n	80180b4 <_fwalk_reent+0x38>
 80180ac:	4629      	mov	r1, r5
 80180ae:	4640      	mov	r0, r8
 80180b0:	47c8      	blx	r9
 80180b2:	4306      	orrs	r6, r0
 80180b4:	3568      	adds	r5, #104	; 0x68
 80180b6:	e7ee      	b.n	8018096 <_fwalk_reent+0x1a>

080180b8 <rshift>:
 80180b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180ba:	6906      	ldr	r6, [r0, #16]
 80180bc:	114b      	asrs	r3, r1, #5
 80180be:	429e      	cmp	r6, r3
 80180c0:	f100 0414 	add.w	r4, r0, #20
 80180c4:	dd30      	ble.n	8018128 <rshift+0x70>
 80180c6:	f011 011f 	ands.w	r1, r1, #31
 80180ca:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80180ce:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80180d2:	d108      	bne.n	80180e6 <rshift+0x2e>
 80180d4:	4621      	mov	r1, r4
 80180d6:	42b2      	cmp	r2, r6
 80180d8:	460b      	mov	r3, r1
 80180da:	d211      	bcs.n	8018100 <rshift+0x48>
 80180dc:	f852 3b04 	ldr.w	r3, [r2], #4
 80180e0:	f841 3b04 	str.w	r3, [r1], #4
 80180e4:	e7f7      	b.n	80180d6 <rshift+0x1e>
 80180e6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80180ea:	f1c1 0c20 	rsb	ip, r1, #32
 80180ee:	40cd      	lsrs	r5, r1
 80180f0:	3204      	adds	r2, #4
 80180f2:	4623      	mov	r3, r4
 80180f4:	42b2      	cmp	r2, r6
 80180f6:	4617      	mov	r7, r2
 80180f8:	d30c      	bcc.n	8018114 <rshift+0x5c>
 80180fa:	601d      	str	r5, [r3, #0]
 80180fc:	b105      	cbz	r5, 8018100 <rshift+0x48>
 80180fe:	3304      	adds	r3, #4
 8018100:	1b1a      	subs	r2, r3, r4
 8018102:	42a3      	cmp	r3, r4
 8018104:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018108:	bf08      	it	eq
 801810a:	2300      	moveq	r3, #0
 801810c:	6102      	str	r2, [r0, #16]
 801810e:	bf08      	it	eq
 8018110:	6143      	streq	r3, [r0, #20]
 8018112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018114:	683f      	ldr	r7, [r7, #0]
 8018116:	fa07 f70c 	lsl.w	r7, r7, ip
 801811a:	433d      	orrs	r5, r7
 801811c:	f843 5b04 	str.w	r5, [r3], #4
 8018120:	f852 5b04 	ldr.w	r5, [r2], #4
 8018124:	40cd      	lsrs	r5, r1
 8018126:	e7e5      	b.n	80180f4 <rshift+0x3c>
 8018128:	4623      	mov	r3, r4
 801812a:	e7e9      	b.n	8018100 <rshift+0x48>

0801812c <__hexdig_fun>:
 801812c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018130:	2b09      	cmp	r3, #9
 8018132:	d802      	bhi.n	801813a <__hexdig_fun+0xe>
 8018134:	3820      	subs	r0, #32
 8018136:	b2c0      	uxtb	r0, r0
 8018138:	4770      	bx	lr
 801813a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801813e:	2b05      	cmp	r3, #5
 8018140:	d801      	bhi.n	8018146 <__hexdig_fun+0x1a>
 8018142:	3847      	subs	r0, #71	; 0x47
 8018144:	e7f7      	b.n	8018136 <__hexdig_fun+0xa>
 8018146:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801814a:	2b05      	cmp	r3, #5
 801814c:	d801      	bhi.n	8018152 <__hexdig_fun+0x26>
 801814e:	3827      	subs	r0, #39	; 0x27
 8018150:	e7f1      	b.n	8018136 <__hexdig_fun+0xa>
 8018152:	2000      	movs	r0, #0
 8018154:	4770      	bx	lr

08018156 <__gethex>:
 8018156:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801815a:	b08b      	sub	sp, #44	; 0x2c
 801815c:	468a      	mov	sl, r1
 801815e:	9002      	str	r0, [sp, #8]
 8018160:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018162:	9306      	str	r3, [sp, #24]
 8018164:	4690      	mov	r8, r2
 8018166:	f000 fadf 	bl	8018728 <__localeconv_l>
 801816a:	6803      	ldr	r3, [r0, #0]
 801816c:	9303      	str	r3, [sp, #12]
 801816e:	4618      	mov	r0, r3
 8018170:	f7ef ff66 	bl	8008040 <strlen>
 8018174:	9b03      	ldr	r3, [sp, #12]
 8018176:	9001      	str	r0, [sp, #4]
 8018178:	4403      	add	r3, r0
 801817a:	f04f 0b00 	mov.w	fp, #0
 801817e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018182:	9307      	str	r3, [sp, #28]
 8018184:	f8da 3000 	ldr.w	r3, [sl]
 8018188:	3302      	adds	r3, #2
 801818a:	461f      	mov	r7, r3
 801818c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018190:	2830      	cmp	r0, #48	; 0x30
 8018192:	d06c      	beq.n	801826e <__gethex+0x118>
 8018194:	f7ff ffca 	bl	801812c <__hexdig_fun>
 8018198:	4604      	mov	r4, r0
 801819a:	2800      	cmp	r0, #0
 801819c:	d16a      	bne.n	8018274 <__gethex+0x11e>
 801819e:	9a01      	ldr	r2, [sp, #4]
 80181a0:	9903      	ldr	r1, [sp, #12]
 80181a2:	4638      	mov	r0, r7
 80181a4:	f001 fe81 	bl	8019eaa <strncmp>
 80181a8:	2800      	cmp	r0, #0
 80181aa:	d166      	bne.n	801827a <__gethex+0x124>
 80181ac:	9b01      	ldr	r3, [sp, #4]
 80181ae:	5cf8      	ldrb	r0, [r7, r3]
 80181b0:	18fe      	adds	r6, r7, r3
 80181b2:	f7ff ffbb 	bl	801812c <__hexdig_fun>
 80181b6:	2800      	cmp	r0, #0
 80181b8:	d062      	beq.n	8018280 <__gethex+0x12a>
 80181ba:	4633      	mov	r3, r6
 80181bc:	7818      	ldrb	r0, [r3, #0]
 80181be:	2830      	cmp	r0, #48	; 0x30
 80181c0:	461f      	mov	r7, r3
 80181c2:	f103 0301 	add.w	r3, r3, #1
 80181c6:	d0f9      	beq.n	80181bc <__gethex+0x66>
 80181c8:	f7ff ffb0 	bl	801812c <__hexdig_fun>
 80181cc:	fab0 f580 	clz	r5, r0
 80181d0:	096d      	lsrs	r5, r5, #5
 80181d2:	4634      	mov	r4, r6
 80181d4:	f04f 0b01 	mov.w	fp, #1
 80181d8:	463a      	mov	r2, r7
 80181da:	4616      	mov	r6, r2
 80181dc:	3201      	adds	r2, #1
 80181de:	7830      	ldrb	r0, [r6, #0]
 80181e0:	f7ff ffa4 	bl	801812c <__hexdig_fun>
 80181e4:	2800      	cmp	r0, #0
 80181e6:	d1f8      	bne.n	80181da <__gethex+0x84>
 80181e8:	9a01      	ldr	r2, [sp, #4]
 80181ea:	9903      	ldr	r1, [sp, #12]
 80181ec:	4630      	mov	r0, r6
 80181ee:	f001 fe5c 	bl	8019eaa <strncmp>
 80181f2:	b950      	cbnz	r0, 801820a <__gethex+0xb4>
 80181f4:	b954      	cbnz	r4, 801820c <__gethex+0xb6>
 80181f6:	9b01      	ldr	r3, [sp, #4]
 80181f8:	18f4      	adds	r4, r6, r3
 80181fa:	4622      	mov	r2, r4
 80181fc:	4616      	mov	r6, r2
 80181fe:	3201      	adds	r2, #1
 8018200:	7830      	ldrb	r0, [r6, #0]
 8018202:	f7ff ff93 	bl	801812c <__hexdig_fun>
 8018206:	2800      	cmp	r0, #0
 8018208:	d1f8      	bne.n	80181fc <__gethex+0xa6>
 801820a:	b10c      	cbz	r4, 8018210 <__gethex+0xba>
 801820c:	1ba4      	subs	r4, r4, r6
 801820e:	00a4      	lsls	r4, r4, #2
 8018210:	7833      	ldrb	r3, [r6, #0]
 8018212:	2b50      	cmp	r3, #80	; 0x50
 8018214:	d001      	beq.n	801821a <__gethex+0xc4>
 8018216:	2b70      	cmp	r3, #112	; 0x70
 8018218:	d140      	bne.n	801829c <__gethex+0x146>
 801821a:	7873      	ldrb	r3, [r6, #1]
 801821c:	2b2b      	cmp	r3, #43	; 0x2b
 801821e:	d031      	beq.n	8018284 <__gethex+0x12e>
 8018220:	2b2d      	cmp	r3, #45	; 0x2d
 8018222:	d033      	beq.n	801828c <__gethex+0x136>
 8018224:	1c71      	adds	r1, r6, #1
 8018226:	f04f 0900 	mov.w	r9, #0
 801822a:	7808      	ldrb	r0, [r1, #0]
 801822c:	f7ff ff7e 	bl	801812c <__hexdig_fun>
 8018230:	1e43      	subs	r3, r0, #1
 8018232:	b2db      	uxtb	r3, r3
 8018234:	2b18      	cmp	r3, #24
 8018236:	d831      	bhi.n	801829c <__gethex+0x146>
 8018238:	f1a0 0210 	sub.w	r2, r0, #16
 801823c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018240:	f7ff ff74 	bl	801812c <__hexdig_fun>
 8018244:	1e43      	subs	r3, r0, #1
 8018246:	b2db      	uxtb	r3, r3
 8018248:	2b18      	cmp	r3, #24
 801824a:	d922      	bls.n	8018292 <__gethex+0x13c>
 801824c:	f1b9 0f00 	cmp.w	r9, #0
 8018250:	d000      	beq.n	8018254 <__gethex+0xfe>
 8018252:	4252      	negs	r2, r2
 8018254:	4414      	add	r4, r2
 8018256:	f8ca 1000 	str.w	r1, [sl]
 801825a:	b30d      	cbz	r5, 80182a0 <__gethex+0x14a>
 801825c:	f1bb 0f00 	cmp.w	fp, #0
 8018260:	bf0c      	ite	eq
 8018262:	2706      	moveq	r7, #6
 8018264:	2700      	movne	r7, #0
 8018266:	4638      	mov	r0, r7
 8018268:	b00b      	add	sp, #44	; 0x2c
 801826a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801826e:	f10b 0b01 	add.w	fp, fp, #1
 8018272:	e78a      	b.n	801818a <__gethex+0x34>
 8018274:	2500      	movs	r5, #0
 8018276:	462c      	mov	r4, r5
 8018278:	e7ae      	b.n	80181d8 <__gethex+0x82>
 801827a:	463e      	mov	r6, r7
 801827c:	2501      	movs	r5, #1
 801827e:	e7c7      	b.n	8018210 <__gethex+0xba>
 8018280:	4604      	mov	r4, r0
 8018282:	e7fb      	b.n	801827c <__gethex+0x126>
 8018284:	f04f 0900 	mov.w	r9, #0
 8018288:	1cb1      	adds	r1, r6, #2
 801828a:	e7ce      	b.n	801822a <__gethex+0xd4>
 801828c:	f04f 0901 	mov.w	r9, #1
 8018290:	e7fa      	b.n	8018288 <__gethex+0x132>
 8018292:	230a      	movs	r3, #10
 8018294:	fb03 0202 	mla	r2, r3, r2, r0
 8018298:	3a10      	subs	r2, #16
 801829a:	e7cf      	b.n	801823c <__gethex+0xe6>
 801829c:	4631      	mov	r1, r6
 801829e:	e7da      	b.n	8018256 <__gethex+0x100>
 80182a0:	1bf3      	subs	r3, r6, r7
 80182a2:	3b01      	subs	r3, #1
 80182a4:	4629      	mov	r1, r5
 80182a6:	2b07      	cmp	r3, #7
 80182a8:	dc49      	bgt.n	801833e <__gethex+0x1e8>
 80182aa:	9802      	ldr	r0, [sp, #8]
 80182ac:	f000 faca 	bl	8018844 <_Balloc>
 80182b0:	9b01      	ldr	r3, [sp, #4]
 80182b2:	f100 0914 	add.w	r9, r0, #20
 80182b6:	f04f 0b00 	mov.w	fp, #0
 80182ba:	f1c3 0301 	rsb	r3, r3, #1
 80182be:	4605      	mov	r5, r0
 80182c0:	f8cd 9010 	str.w	r9, [sp, #16]
 80182c4:	46da      	mov	sl, fp
 80182c6:	9308      	str	r3, [sp, #32]
 80182c8:	42b7      	cmp	r7, r6
 80182ca:	d33b      	bcc.n	8018344 <__gethex+0x1ee>
 80182cc:	9804      	ldr	r0, [sp, #16]
 80182ce:	f840 ab04 	str.w	sl, [r0], #4
 80182d2:	eba0 0009 	sub.w	r0, r0, r9
 80182d6:	1080      	asrs	r0, r0, #2
 80182d8:	6128      	str	r0, [r5, #16]
 80182da:	0147      	lsls	r7, r0, #5
 80182dc:	4650      	mov	r0, sl
 80182de:	f000 fb75 	bl	80189cc <__hi0bits>
 80182e2:	f8d8 6000 	ldr.w	r6, [r8]
 80182e6:	1a3f      	subs	r7, r7, r0
 80182e8:	42b7      	cmp	r7, r6
 80182ea:	dd64      	ble.n	80183b6 <__gethex+0x260>
 80182ec:	1bbf      	subs	r7, r7, r6
 80182ee:	4639      	mov	r1, r7
 80182f0:	4628      	mov	r0, r5
 80182f2:	f000 fe85 	bl	8019000 <__any_on>
 80182f6:	4682      	mov	sl, r0
 80182f8:	b178      	cbz	r0, 801831a <__gethex+0x1c4>
 80182fa:	1e7b      	subs	r3, r7, #1
 80182fc:	1159      	asrs	r1, r3, #5
 80182fe:	f003 021f 	and.w	r2, r3, #31
 8018302:	f04f 0a01 	mov.w	sl, #1
 8018306:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801830a:	fa0a f202 	lsl.w	r2, sl, r2
 801830e:	420a      	tst	r2, r1
 8018310:	d003      	beq.n	801831a <__gethex+0x1c4>
 8018312:	4553      	cmp	r3, sl
 8018314:	dc46      	bgt.n	80183a4 <__gethex+0x24e>
 8018316:	f04f 0a02 	mov.w	sl, #2
 801831a:	4639      	mov	r1, r7
 801831c:	4628      	mov	r0, r5
 801831e:	f7ff fecb 	bl	80180b8 <rshift>
 8018322:	443c      	add	r4, r7
 8018324:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018328:	42a3      	cmp	r3, r4
 801832a:	da52      	bge.n	80183d2 <__gethex+0x27c>
 801832c:	4629      	mov	r1, r5
 801832e:	9802      	ldr	r0, [sp, #8]
 8018330:	f000 fabc 	bl	80188ac <_Bfree>
 8018334:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018336:	2300      	movs	r3, #0
 8018338:	6013      	str	r3, [r2, #0]
 801833a:	27a3      	movs	r7, #163	; 0xa3
 801833c:	e793      	b.n	8018266 <__gethex+0x110>
 801833e:	3101      	adds	r1, #1
 8018340:	105b      	asrs	r3, r3, #1
 8018342:	e7b0      	b.n	80182a6 <__gethex+0x150>
 8018344:	1e73      	subs	r3, r6, #1
 8018346:	9305      	str	r3, [sp, #20]
 8018348:	9a07      	ldr	r2, [sp, #28]
 801834a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801834e:	4293      	cmp	r3, r2
 8018350:	d018      	beq.n	8018384 <__gethex+0x22e>
 8018352:	f1bb 0f20 	cmp.w	fp, #32
 8018356:	d107      	bne.n	8018368 <__gethex+0x212>
 8018358:	9b04      	ldr	r3, [sp, #16]
 801835a:	f8c3 a000 	str.w	sl, [r3]
 801835e:	3304      	adds	r3, #4
 8018360:	f04f 0a00 	mov.w	sl, #0
 8018364:	9304      	str	r3, [sp, #16]
 8018366:	46d3      	mov	fp, sl
 8018368:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801836c:	f7ff fede 	bl	801812c <__hexdig_fun>
 8018370:	f000 000f 	and.w	r0, r0, #15
 8018374:	fa00 f00b 	lsl.w	r0, r0, fp
 8018378:	ea4a 0a00 	orr.w	sl, sl, r0
 801837c:	f10b 0b04 	add.w	fp, fp, #4
 8018380:	9b05      	ldr	r3, [sp, #20]
 8018382:	e00d      	b.n	80183a0 <__gethex+0x24a>
 8018384:	9b05      	ldr	r3, [sp, #20]
 8018386:	9a08      	ldr	r2, [sp, #32]
 8018388:	4413      	add	r3, r2
 801838a:	42bb      	cmp	r3, r7
 801838c:	d3e1      	bcc.n	8018352 <__gethex+0x1fc>
 801838e:	4618      	mov	r0, r3
 8018390:	9a01      	ldr	r2, [sp, #4]
 8018392:	9903      	ldr	r1, [sp, #12]
 8018394:	9309      	str	r3, [sp, #36]	; 0x24
 8018396:	f001 fd88 	bl	8019eaa <strncmp>
 801839a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801839c:	2800      	cmp	r0, #0
 801839e:	d1d8      	bne.n	8018352 <__gethex+0x1fc>
 80183a0:	461e      	mov	r6, r3
 80183a2:	e791      	b.n	80182c8 <__gethex+0x172>
 80183a4:	1eb9      	subs	r1, r7, #2
 80183a6:	4628      	mov	r0, r5
 80183a8:	f000 fe2a 	bl	8019000 <__any_on>
 80183ac:	2800      	cmp	r0, #0
 80183ae:	d0b2      	beq.n	8018316 <__gethex+0x1c0>
 80183b0:	f04f 0a03 	mov.w	sl, #3
 80183b4:	e7b1      	b.n	801831a <__gethex+0x1c4>
 80183b6:	da09      	bge.n	80183cc <__gethex+0x276>
 80183b8:	1bf7      	subs	r7, r6, r7
 80183ba:	4629      	mov	r1, r5
 80183bc:	463a      	mov	r2, r7
 80183be:	9802      	ldr	r0, [sp, #8]
 80183c0:	f000 fc40 	bl	8018c44 <__lshift>
 80183c4:	1be4      	subs	r4, r4, r7
 80183c6:	4605      	mov	r5, r0
 80183c8:	f100 0914 	add.w	r9, r0, #20
 80183cc:	f04f 0a00 	mov.w	sl, #0
 80183d0:	e7a8      	b.n	8018324 <__gethex+0x1ce>
 80183d2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80183d6:	42a0      	cmp	r0, r4
 80183d8:	dd6a      	ble.n	80184b0 <__gethex+0x35a>
 80183da:	1b04      	subs	r4, r0, r4
 80183dc:	42a6      	cmp	r6, r4
 80183de:	dc2e      	bgt.n	801843e <__gethex+0x2e8>
 80183e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80183e4:	2b02      	cmp	r3, #2
 80183e6:	d022      	beq.n	801842e <__gethex+0x2d8>
 80183e8:	2b03      	cmp	r3, #3
 80183ea:	d024      	beq.n	8018436 <__gethex+0x2e0>
 80183ec:	2b01      	cmp	r3, #1
 80183ee:	d115      	bne.n	801841c <__gethex+0x2c6>
 80183f0:	42a6      	cmp	r6, r4
 80183f2:	d113      	bne.n	801841c <__gethex+0x2c6>
 80183f4:	2e01      	cmp	r6, #1
 80183f6:	dc0b      	bgt.n	8018410 <__gethex+0x2ba>
 80183f8:	9a06      	ldr	r2, [sp, #24]
 80183fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80183fe:	6013      	str	r3, [r2, #0]
 8018400:	2301      	movs	r3, #1
 8018402:	612b      	str	r3, [r5, #16]
 8018404:	f8c9 3000 	str.w	r3, [r9]
 8018408:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801840a:	2762      	movs	r7, #98	; 0x62
 801840c:	601d      	str	r5, [r3, #0]
 801840e:	e72a      	b.n	8018266 <__gethex+0x110>
 8018410:	1e71      	subs	r1, r6, #1
 8018412:	4628      	mov	r0, r5
 8018414:	f000 fdf4 	bl	8019000 <__any_on>
 8018418:	2800      	cmp	r0, #0
 801841a:	d1ed      	bne.n	80183f8 <__gethex+0x2a2>
 801841c:	4629      	mov	r1, r5
 801841e:	9802      	ldr	r0, [sp, #8]
 8018420:	f000 fa44 	bl	80188ac <_Bfree>
 8018424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018426:	2300      	movs	r3, #0
 8018428:	6013      	str	r3, [r2, #0]
 801842a:	2750      	movs	r7, #80	; 0x50
 801842c:	e71b      	b.n	8018266 <__gethex+0x110>
 801842e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018430:	2b00      	cmp	r3, #0
 8018432:	d0e1      	beq.n	80183f8 <__gethex+0x2a2>
 8018434:	e7f2      	b.n	801841c <__gethex+0x2c6>
 8018436:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018438:	2b00      	cmp	r3, #0
 801843a:	d1dd      	bne.n	80183f8 <__gethex+0x2a2>
 801843c:	e7ee      	b.n	801841c <__gethex+0x2c6>
 801843e:	1e67      	subs	r7, r4, #1
 8018440:	f1ba 0f00 	cmp.w	sl, #0
 8018444:	d131      	bne.n	80184aa <__gethex+0x354>
 8018446:	b127      	cbz	r7, 8018452 <__gethex+0x2fc>
 8018448:	4639      	mov	r1, r7
 801844a:	4628      	mov	r0, r5
 801844c:	f000 fdd8 	bl	8019000 <__any_on>
 8018450:	4682      	mov	sl, r0
 8018452:	117a      	asrs	r2, r7, #5
 8018454:	2301      	movs	r3, #1
 8018456:	f007 071f 	and.w	r7, r7, #31
 801845a:	fa03 f707 	lsl.w	r7, r3, r7
 801845e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018462:	4621      	mov	r1, r4
 8018464:	421f      	tst	r7, r3
 8018466:	4628      	mov	r0, r5
 8018468:	bf18      	it	ne
 801846a:	f04a 0a02 	orrne.w	sl, sl, #2
 801846e:	1b36      	subs	r6, r6, r4
 8018470:	f7ff fe22 	bl	80180b8 <rshift>
 8018474:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018478:	2702      	movs	r7, #2
 801847a:	f1ba 0f00 	cmp.w	sl, #0
 801847e:	d048      	beq.n	8018512 <__gethex+0x3bc>
 8018480:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018484:	2b02      	cmp	r3, #2
 8018486:	d015      	beq.n	80184b4 <__gethex+0x35e>
 8018488:	2b03      	cmp	r3, #3
 801848a:	d017      	beq.n	80184bc <__gethex+0x366>
 801848c:	2b01      	cmp	r3, #1
 801848e:	d109      	bne.n	80184a4 <__gethex+0x34e>
 8018490:	f01a 0f02 	tst.w	sl, #2
 8018494:	d006      	beq.n	80184a4 <__gethex+0x34e>
 8018496:	f8d9 3000 	ldr.w	r3, [r9]
 801849a:	ea4a 0a03 	orr.w	sl, sl, r3
 801849e:	f01a 0f01 	tst.w	sl, #1
 80184a2:	d10e      	bne.n	80184c2 <__gethex+0x36c>
 80184a4:	f047 0710 	orr.w	r7, r7, #16
 80184a8:	e033      	b.n	8018512 <__gethex+0x3bc>
 80184aa:	f04f 0a01 	mov.w	sl, #1
 80184ae:	e7d0      	b.n	8018452 <__gethex+0x2fc>
 80184b0:	2701      	movs	r7, #1
 80184b2:	e7e2      	b.n	801847a <__gethex+0x324>
 80184b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184b6:	f1c3 0301 	rsb	r3, r3, #1
 80184ba:	9315      	str	r3, [sp, #84]	; 0x54
 80184bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d0f0      	beq.n	80184a4 <__gethex+0x34e>
 80184c2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80184c6:	f105 0314 	add.w	r3, r5, #20
 80184ca:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80184ce:	eb03 010a 	add.w	r1, r3, sl
 80184d2:	f04f 0c00 	mov.w	ip, #0
 80184d6:	4618      	mov	r0, r3
 80184d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80184dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80184e0:	d01c      	beq.n	801851c <__gethex+0x3c6>
 80184e2:	3201      	adds	r2, #1
 80184e4:	6002      	str	r2, [r0, #0]
 80184e6:	2f02      	cmp	r7, #2
 80184e8:	f105 0314 	add.w	r3, r5, #20
 80184ec:	d138      	bne.n	8018560 <__gethex+0x40a>
 80184ee:	f8d8 2000 	ldr.w	r2, [r8]
 80184f2:	3a01      	subs	r2, #1
 80184f4:	42b2      	cmp	r2, r6
 80184f6:	d10a      	bne.n	801850e <__gethex+0x3b8>
 80184f8:	1171      	asrs	r1, r6, #5
 80184fa:	2201      	movs	r2, #1
 80184fc:	f006 061f 	and.w	r6, r6, #31
 8018500:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018504:	fa02 f606 	lsl.w	r6, r2, r6
 8018508:	421e      	tst	r6, r3
 801850a:	bf18      	it	ne
 801850c:	4617      	movne	r7, r2
 801850e:	f047 0720 	orr.w	r7, r7, #32
 8018512:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018514:	601d      	str	r5, [r3, #0]
 8018516:	9b06      	ldr	r3, [sp, #24]
 8018518:	601c      	str	r4, [r3, #0]
 801851a:	e6a4      	b.n	8018266 <__gethex+0x110>
 801851c:	4299      	cmp	r1, r3
 801851e:	f843 cc04 	str.w	ip, [r3, #-4]
 8018522:	d8d8      	bhi.n	80184d6 <__gethex+0x380>
 8018524:	68ab      	ldr	r3, [r5, #8]
 8018526:	4599      	cmp	r9, r3
 8018528:	db12      	blt.n	8018550 <__gethex+0x3fa>
 801852a:	6869      	ldr	r1, [r5, #4]
 801852c:	9802      	ldr	r0, [sp, #8]
 801852e:	3101      	adds	r1, #1
 8018530:	f000 f988 	bl	8018844 <_Balloc>
 8018534:	692a      	ldr	r2, [r5, #16]
 8018536:	3202      	adds	r2, #2
 8018538:	f105 010c 	add.w	r1, r5, #12
 801853c:	4683      	mov	fp, r0
 801853e:	0092      	lsls	r2, r2, #2
 8018540:	300c      	adds	r0, #12
 8018542:	f7fc fe9b 	bl	801527c <memcpy>
 8018546:	4629      	mov	r1, r5
 8018548:	9802      	ldr	r0, [sp, #8]
 801854a:	f000 f9af 	bl	80188ac <_Bfree>
 801854e:	465d      	mov	r5, fp
 8018550:	692b      	ldr	r3, [r5, #16]
 8018552:	1c5a      	adds	r2, r3, #1
 8018554:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018558:	612a      	str	r2, [r5, #16]
 801855a:	2201      	movs	r2, #1
 801855c:	615a      	str	r2, [r3, #20]
 801855e:	e7c2      	b.n	80184e6 <__gethex+0x390>
 8018560:	692a      	ldr	r2, [r5, #16]
 8018562:	454a      	cmp	r2, r9
 8018564:	dd0b      	ble.n	801857e <__gethex+0x428>
 8018566:	2101      	movs	r1, #1
 8018568:	4628      	mov	r0, r5
 801856a:	f7ff fda5 	bl	80180b8 <rshift>
 801856e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018572:	3401      	adds	r4, #1
 8018574:	42a3      	cmp	r3, r4
 8018576:	f6ff aed9 	blt.w	801832c <__gethex+0x1d6>
 801857a:	2701      	movs	r7, #1
 801857c:	e7c7      	b.n	801850e <__gethex+0x3b8>
 801857e:	f016 061f 	ands.w	r6, r6, #31
 8018582:	d0fa      	beq.n	801857a <__gethex+0x424>
 8018584:	449a      	add	sl, r3
 8018586:	f1c6 0620 	rsb	r6, r6, #32
 801858a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801858e:	f000 fa1d 	bl	80189cc <__hi0bits>
 8018592:	42b0      	cmp	r0, r6
 8018594:	dbe7      	blt.n	8018566 <__gethex+0x410>
 8018596:	e7f0      	b.n	801857a <__gethex+0x424>

08018598 <L_shift>:
 8018598:	f1c2 0208 	rsb	r2, r2, #8
 801859c:	0092      	lsls	r2, r2, #2
 801859e:	b570      	push	{r4, r5, r6, lr}
 80185a0:	f1c2 0620 	rsb	r6, r2, #32
 80185a4:	6843      	ldr	r3, [r0, #4]
 80185a6:	6804      	ldr	r4, [r0, #0]
 80185a8:	fa03 f506 	lsl.w	r5, r3, r6
 80185ac:	432c      	orrs	r4, r5
 80185ae:	40d3      	lsrs	r3, r2
 80185b0:	6004      	str	r4, [r0, #0]
 80185b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80185b6:	4288      	cmp	r0, r1
 80185b8:	d3f4      	bcc.n	80185a4 <L_shift+0xc>
 80185ba:	bd70      	pop	{r4, r5, r6, pc}

080185bc <__match>:
 80185bc:	b530      	push	{r4, r5, lr}
 80185be:	6803      	ldr	r3, [r0, #0]
 80185c0:	3301      	adds	r3, #1
 80185c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80185c6:	b914      	cbnz	r4, 80185ce <__match+0x12>
 80185c8:	6003      	str	r3, [r0, #0]
 80185ca:	2001      	movs	r0, #1
 80185cc:	bd30      	pop	{r4, r5, pc}
 80185ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80185d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80185d6:	2d19      	cmp	r5, #25
 80185d8:	bf98      	it	ls
 80185da:	3220      	addls	r2, #32
 80185dc:	42a2      	cmp	r2, r4
 80185de:	d0f0      	beq.n	80185c2 <__match+0x6>
 80185e0:	2000      	movs	r0, #0
 80185e2:	e7f3      	b.n	80185cc <__match+0x10>

080185e4 <__hexnan>:
 80185e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e8:	680b      	ldr	r3, [r1, #0]
 80185ea:	6801      	ldr	r1, [r0, #0]
 80185ec:	115f      	asrs	r7, r3, #5
 80185ee:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80185f2:	f013 031f 	ands.w	r3, r3, #31
 80185f6:	b087      	sub	sp, #28
 80185f8:	bf18      	it	ne
 80185fa:	3704      	addne	r7, #4
 80185fc:	2500      	movs	r5, #0
 80185fe:	1f3e      	subs	r6, r7, #4
 8018600:	4682      	mov	sl, r0
 8018602:	4690      	mov	r8, r2
 8018604:	9301      	str	r3, [sp, #4]
 8018606:	f847 5c04 	str.w	r5, [r7, #-4]
 801860a:	46b1      	mov	r9, r6
 801860c:	4634      	mov	r4, r6
 801860e:	9502      	str	r5, [sp, #8]
 8018610:	46ab      	mov	fp, r5
 8018612:	784a      	ldrb	r2, [r1, #1]
 8018614:	1c4b      	adds	r3, r1, #1
 8018616:	9303      	str	r3, [sp, #12]
 8018618:	b342      	cbz	r2, 801866c <__hexnan+0x88>
 801861a:	4610      	mov	r0, r2
 801861c:	9105      	str	r1, [sp, #20]
 801861e:	9204      	str	r2, [sp, #16]
 8018620:	f7ff fd84 	bl	801812c <__hexdig_fun>
 8018624:	2800      	cmp	r0, #0
 8018626:	d143      	bne.n	80186b0 <__hexnan+0xcc>
 8018628:	9a04      	ldr	r2, [sp, #16]
 801862a:	9905      	ldr	r1, [sp, #20]
 801862c:	2a20      	cmp	r2, #32
 801862e:	d818      	bhi.n	8018662 <__hexnan+0x7e>
 8018630:	9b02      	ldr	r3, [sp, #8]
 8018632:	459b      	cmp	fp, r3
 8018634:	dd13      	ble.n	801865e <__hexnan+0x7a>
 8018636:	454c      	cmp	r4, r9
 8018638:	d206      	bcs.n	8018648 <__hexnan+0x64>
 801863a:	2d07      	cmp	r5, #7
 801863c:	dc04      	bgt.n	8018648 <__hexnan+0x64>
 801863e:	462a      	mov	r2, r5
 8018640:	4649      	mov	r1, r9
 8018642:	4620      	mov	r0, r4
 8018644:	f7ff ffa8 	bl	8018598 <L_shift>
 8018648:	4544      	cmp	r4, r8
 801864a:	d944      	bls.n	80186d6 <__hexnan+0xf2>
 801864c:	2300      	movs	r3, #0
 801864e:	f1a4 0904 	sub.w	r9, r4, #4
 8018652:	f844 3c04 	str.w	r3, [r4, #-4]
 8018656:	f8cd b008 	str.w	fp, [sp, #8]
 801865a:	464c      	mov	r4, r9
 801865c:	461d      	mov	r5, r3
 801865e:	9903      	ldr	r1, [sp, #12]
 8018660:	e7d7      	b.n	8018612 <__hexnan+0x2e>
 8018662:	2a29      	cmp	r2, #41	; 0x29
 8018664:	d14a      	bne.n	80186fc <__hexnan+0x118>
 8018666:	3102      	adds	r1, #2
 8018668:	f8ca 1000 	str.w	r1, [sl]
 801866c:	f1bb 0f00 	cmp.w	fp, #0
 8018670:	d044      	beq.n	80186fc <__hexnan+0x118>
 8018672:	454c      	cmp	r4, r9
 8018674:	d206      	bcs.n	8018684 <__hexnan+0xa0>
 8018676:	2d07      	cmp	r5, #7
 8018678:	dc04      	bgt.n	8018684 <__hexnan+0xa0>
 801867a:	462a      	mov	r2, r5
 801867c:	4649      	mov	r1, r9
 801867e:	4620      	mov	r0, r4
 8018680:	f7ff ff8a 	bl	8018598 <L_shift>
 8018684:	4544      	cmp	r4, r8
 8018686:	d928      	bls.n	80186da <__hexnan+0xf6>
 8018688:	4643      	mov	r3, r8
 801868a:	f854 2b04 	ldr.w	r2, [r4], #4
 801868e:	f843 2b04 	str.w	r2, [r3], #4
 8018692:	42a6      	cmp	r6, r4
 8018694:	d2f9      	bcs.n	801868a <__hexnan+0xa6>
 8018696:	2200      	movs	r2, #0
 8018698:	f843 2b04 	str.w	r2, [r3], #4
 801869c:	429e      	cmp	r6, r3
 801869e:	d2fb      	bcs.n	8018698 <__hexnan+0xb4>
 80186a0:	6833      	ldr	r3, [r6, #0]
 80186a2:	b91b      	cbnz	r3, 80186ac <__hexnan+0xc8>
 80186a4:	4546      	cmp	r6, r8
 80186a6:	d127      	bne.n	80186f8 <__hexnan+0x114>
 80186a8:	2301      	movs	r3, #1
 80186aa:	6033      	str	r3, [r6, #0]
 80186ac:	2005      	movs	r0, #5
 80186ae:	e026      	b.n	80186fe <__hexnan+0x11a>
 80186b0:	3501      	adds	r5, #1
 80186b2:	2d08      	cmp	r5, #8
 80186b4:	f10b 0b01 	add.w	fp, fp, #1
 80186b8:	dd06      	ble.n	80186c8 <__hexnan+0xe4>
 80186ba:	4544      	cmp	r4, r8
 80186bc:	d9cf      	bls.n	801865e <__hexnan+0x7a>
 80186be:	2300      	movs	r3, #0
 80186c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80186c4:	2501      	movs	r5, #1
 80186c6:	3c04      	subs	r4, #4
 80186c8:	6822      	ldr	r2, [r4, #0]
 80186ca:	f000 000f 	and.w	r0, r0, #15
 80186ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80186d2:	6020      	str	r0, [r4, #0]
 80186d4:	e7c3      	b.n	801865e <__hexnan+0x7a>
 80186d6:	2508      	movs	r5, #8
 80186d8:	e7c1      	b.n	801865e <__hexnan+0x7a>
 80186da:	9b01      	ldr	r3, [sp, #4]
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d0df      	beq.n	80186a0 <__hexnan+0xbc>
 80186e0:	f04f 32ff 	mov.w	r2, #4294967295
 80186e4:	f1c3 0320 	rsb	r3, r3, #32
 80186e8:	fa22 f303 	lsr.w	r3, r2, r3
 80186ec:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80186f0:	401a      	ands	r2, r3
 80186f2:	f847 2c04 	str.w	r2, [r7, #-4]
 80186f6:	e7d3      	b.n	80186a0 <__hexnan+0xbc>
 80186f8:	3e04      	subs	r6, #4
 80186fa:	e7d1      	b.n	80186a0 <__hexnan+0xbc>
 80186fc:	2004      	movs	r0, #4
 80186fe:	b007      	add	sp, #28
 8018700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018704 <__locale_ctype_ptr_l>:
 8018704:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018708:	4770      	bx	lr
	...

0801870c <__locale_ctype_ptr>:
 801870c:	4b04      	ldr	r3, [pc, #16]	; (8018720 <__locale_ctype_ptr+0x14>)
 801870e:	4a05      	ldr	r2, [pc, #20]	; (8018724 <__locale_ctype_ptr+0x18>)
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	6a1b      	ldr	r3, [r3, #32]
 8018714:	2b00      	cmp	r3, #0
 8018716:	bf08      	it	eq
 8018718:	4613      	moveq	r3, r2
 801871a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801871e:	4770      	bx	lr
 8018720:	20000028 	.word	0x20000028
 8018724:	2000008c 	.word	0x2000008c

08018728 <__localeconv_l>:
 8018728:	30f0      	adds	r0, #240	; 0xf0
 801872a:	4770      	bx	lr

0801872c <_localeconv_r>:
 801872c:	4b04      	ldr	r3, [pc, #16]	; (8018740 <_localeconv_r+0x14>)
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	6a18      	ldr	r0, [r3, #32]
 8018732:	4b04      	ldr	r3, [pc, #16]	; (8018744 <_localeconv_r+0x18>)
 8018734:	2800      	cmp	r0, #0
 8018736:	bf08      	it	eq
 8018738:	4618      	moveq	r0, r3
 801873a:	30f0      	adds	r0, #240	; 0xf0
 801873c:	4770      	bx	lr
 801873e:	bf00      	nop
 8018740:	20000028 	.word	0x20000028
 8018744:	2000008c 	.word	0x2000008c

08018748 <__swhatbuf_r>:
 8018748:	b570      	push	{r4, r5, r6, lr}
 801874a:	460e      	mov	r6, r1
 801874c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018750:	2900      	cmp	r1, #0
 8018752:	b096      	sub	sp, #88	; 0x58
 8018754:	4614      	mov	r4, r2
 8018756:	461d      	mov	r5, r3
 8018758:	da07      	bge.n	801876a <__swhatbuf_r+0x22>
 801875a:	2300      	movs	r3, #0
 801875c:	602b      	str	r3, [r5, #0]
 801875e:	89b3      	ldrh	r3, [r6, #12]
 8018760:	061a      	lsls	r2, r3, #24
 8018762:	d410      	bmi.n	8018786 <__swhatbuf_r+0x3e>
 8018764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018768:	e00e      	b.n	8018788 <__swhatbuf_r+0x40>
 801876a:	466a      	mov	r2, sp
 801876c:	f001 fd18 	bl	801a1a0 <_fstat_r>
 8018770:	2800      	cmp	r0, #0
 8018772:	dbf2      	blt.n	801875a <__swhatbuf_r+0x12>
 8018774:	9a01      	ldr	r2, [sp, #4]
 8018776:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801877a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801877e:	425a      	negs	r2, r3
 8018780:	415a      	adcs	r2, r3
 8018782:	602a      	str	r2, [r5, #0]
 8018784:	e7ee      	b.n	8018764 <__swhatbuf_r+0x1c>
 8018786:	2340      	movs	r3, #64	; 0x40
 8018788:	2000      	movs	r0, #0
 801878a:	6023      	str	r3, [r4, #0]
 801878c:	b016      	add	sp, #88	; 0x58
 801878e:	bd70      	pop	{r4, r5, r6, pc}

08018790 <__smakebuf_r>:
 8018790:	898b      	ldrh	r3, [r1, #12]
 8018792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018794:	079d      	lsls	r5, r3, #30
 8018796:	4606      	mov	r6, r0
 8018798:	460c      	mov	r4, r1
 801879a:	d507      	bpl.n	80187ac <__smakebuf_r+0x1c>
 801879c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80187a0:	6023      	str	r3, [r4, #0]
 80187a2:	6123      	str	r3, [r4, #16]
 80187a4:	2301      	movs	r3, #1
 80187a6:	6163      	str	r3, [r4, #20]
 80187a8:	b002      	add	sp, #8
 80187aa:	bd70      	pop	{r4, r5, r6, pc}
 80187ac:	ab01      	add	r3, sp, #4
 80187ae:	466a      	mov	r2, sp
 80187b0:	f7ff ffca 	bl	8018748 <__swhatbuf_r>
 80187b4:	9900      	ldr	r1, [sp, #0]
 80187b6:	4605      	mov	r5, r0
 80187b8:	4630      	mov	r0, r6
 80187ba:	f000 fc9f 	bl	80190fc <_malloc_r>
 80187be:	b948      	cbnz	r0, 80187d4 <__smakebuf_r+0x44>
 80187c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187c4:	059a      	lsls	r2, r3, #22
 80187c6:	d4ef      	bmi.n	80187a8 <__smakebuf_r+0x18>
 80187c8:	f023 0303 	bic.w	r3, r3, #3
 80187cc:	f043 0302 	orr.w	r3, r3, #2
 80187d0:	81a3      	strh	r3, [r4, #12]
 80187d2:	e7e3      	b.n	801879c <__smakebuf_r+0xc>
 80187d4:	4b0d      	ldr	r3, [pc, #52]	; (801880c <__smakebuf_r+0x7c>)
 80187d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80187d8:	89a3      	ldrh	r3, [r4, #12]
 80187da:	6020      	str	r0, [r4, #0]
 80187dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80187e0:	81a3      	strh	r3, [r4, #12]
 80187e2:	9b00      	ldr	r3, [sp, #0]
 80187e4:	6163      	str	r3, [r4, #20]
 80187e6:	9b01      	ldr	r3, [sp, #4]
 80187e8:	6120      	str	r0, [r4, #16]
 80187ea:	b15b      	cbz	r3, 8018804 <__smakebuf_r+0x74>
 80187ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80187f0:	4630      	mov	r0, r6
 80187f2:	f001 fce7 	bl	801a1c4 <_isatty_r>
 80187f6:	b128      	cbz	r0, 8018804 <__smakebuf_r+0x74>
 80187f8:	89a3      	ldrh	r3, [r4, #12]
 80187fa:	f023 0303 	bic.w	r3, r3, #3
 80187fe:	f043 0301 	orr.w	r3, r3, #1
 8018802:	81a3      	strh	r3, [r4, #12]
 8018804:	89a3      	ldrh	r3, [r4, #12]
 8018806:	431d      	orrs	r5, r3
 8018808:	81a5      	strh	r5, [r4, #12]
 801880a:	e7cd      	b.n	80187a8 <__smakebuf_r+0x18>
 801880c:	08017f35 	.word	0x08017f35

08018810 <malloc>:
 8018810:	4b02      	ldr	r3, [pc, #8]	; (801881c <malloc+0xc>)
 8018812:	4601      	mov	r1, r0
 8018814:	6818      	ldr	r0, [r3, #0]
 8018816:	f000 bc71 	b.w	80190fc <_malloc_r>
 801881a:	bf00      	nop
 801881c:	20000028 	.word	0x20000028

08018820 <__ascii_mbtowc>:
 8018820:	b082      	sub	sp, #8
 8018822:	b901      	cbnz	r1, 8018826 <__ascii_mbtowc+0x6>
 8018824:	a901      	add	r1, sp, #4
 8018826:	b142      	cbz	r2, 801883a <__ascii_mbtowc+0x1a>
 8018828:	b14b      	cbz	r3, 801883e <__ascii_mbtowc+0x1e>
 801882a:	7813      	ldrb	r3, [r2, #0]
 801882c:	600b      	str	r3, [r1, #0]
 801882e:	7812      	ldrb	r2, [r2, #0]
 8018830:	1c10      	adds	r0, r2, #0
 8018832:	bf18      	it	ne
 8018834:	2001      	movne	r0, #1
 8018836:	b002      	add	sp, #8
 8018838:	4770      	bx	lr
 801883a:	4610      	mov	r0, r2
 801883c:	e7fb      	b.n	8018836 <__ascii_mbtowc+0x16>
 801883e:	f06f 0001 	mvn.w	r0, #1
 8018842:	e7f8      	b.n	8018836 <__ascii_mbtowc+0x16>

08018844 <_Balloc>:
 8018844:	b570      	push	{r4, r5, r6, lr}
 8018846:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018848:	4604      	mov	r4, r0
 801884a:	460e      	mov	r6, r1
 801884c:	b93d      	cbnz	r5, 801885e <_Balloc+0x1a>
 801884e:	2010      	movs	r0, #16
 8018850:	f7ff ffde 	bl	8018810 <malloc>
 8018854:	6260      	str	r0, [r4, #36]	; 0x24
 8018856:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801885a:	6005      	str	r5, [r0, #0]
 801885c:	60c5      	str	r5, [r0, #12]
 801885e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018860:	68eb      	ldr	r3, [r5, #12]
 8018862:	b183      	cbz	r3, 8018886 <_Balloc+0x42>
 8018864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018866:	68db      	ldr	r3, [r3, #12]
 8018868:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801886c:	b9b8      	cbnz	r0, 801889e <_Balloc+0x5a>
 801886e:	2101      	movs	r1, #1
 8018870:	fa01 f506 	lsl.w	r5, r1, r6
 8018874:	1d6a      	adds	r2, r5, #5
 8018876:	0092      	lsls	r2, r2, #2
 8018878:	4620      	mov	r0, r4
 801887a:	f000 fbe2 	bl	8019042 <_calloc_r>
 801887e:	b160      	cbz	r0, 801889a <_Balloc+0x56>
 8018880:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018884:	e00e      	b.n	80188a4 <_Balloc+0x60>
 8018886:	2221      	movs	r2, #33	; 0x21
 8018888:	2104      	movs	r1, #4
 801888a:	4620      	mov	r0, r4
 801888c:	f000 fbd9 	bl	8019042 <_calloc_r>
 8018890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018892:	60e8      	str	r0, [r5, #12]
 8018894:	68db      	ldr	r3, [r3, #12]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d1e4      	bne.n	8018864 <_Balloc+0x20>
 801889a:	2000      	movs	r0, #0
 801889c:	bd70      	pop	{r4, r5, r6, pc}
 801889e:	6802      	ldr	r2, [r0, #0]
 80188a0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80188a4:	2300      	movs	r3, #0
 80188a6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80188aa:	e7f7      	b.n	801889c <_Balloc+0x58>

080188ac <_Bfree>:
 80188ac:	b570      	push	{r4, r5, r6, lr}
 80188ae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80188b0:	4606      	mov	r6, r0
 80188b2:	460d      	mov	r5, r1
 80188b4:	b93c      	cbnz	r4, 80188c6 <_Bfree+0x1a>
 80188b6:	2010      	movs	r0, #16
 80188b8:	f7ff ffaa 	bl	8018810 <malloc>
 80188bc:	6270      	str	r0, [r6, #36]	; 0x24
 80188be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80188c2:	6004      	str	r4, [r0, #0]
 80188c4:	60c4      	str	r4, [r0, #12]
 80188c6:	b13d      	cbz	r5, 80188d8 <_Bfree+0x2c>
 80188c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80188ca:	686a      	ldr	r2, [r5, #4]
 80188cc:	68db      	ldr	r3, [r3, #12]
 80188ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80188d2:	6029      	str	r1, [r5, #0]
 80188d4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80188d8:	bd70      	pop	{r4, r5, r6, pc}

080188da <__multadd>:
 80188da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188de:	690d      	ldr	r5, [r1, #16]
 80188e0:	461f      	mov	r7, r3
 80188e2:	4606      	mov	r6, r0
 80188e4:	460c      	mov	r4, r1
 80188e6:	f101 0c14 	add.w	ip, r1, #20
 80188ea:	2300      	movs	r3, #0
 80188ec:	f8dc 0000 	ldr.w	r0, [ip]
 80188f0:	b281      	uxth	r1, r0
 80188f2:	fb02 7101 	mla	r1, r2, r1, r7
 80188f6:	0c0f      	lsrs	r7, r1, #16
 80188f8:	0c00      	lsrs	r0, r0, #16
 80188fa:	fb02 7000 	mla	r0, r2, r0, r7
 80188fe:	b289      	uxth	r1, r1
 8018900:	3301      	adds	r3, #1
 8018902:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018906:	429d      	cmp	r5, r3
 8018908:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801890c:	f84c 1b04 	str.w	r1, [ip], #4
 8018910:	dcec      	bgt.n	80188ec <__multadd+0x12>
 8018912:	b1d7      	cbz	r7, 801894a <__multadd+0x70>
 8018914:	68a3      	ldr	r3, [r4, #8]
 8018916:	42ab      	cmp	r3, r5
 8018918:	dc12      	bgt.n	8018940 <__multadd+0x66>
 801891a:	6861      	ldr	r1, [r4, #4]
 801891c:	4630      	mov	r0, r6
 801891e:	3101      	adds	r1, #1
 8018920:	f7ff ff90 	bl	8018844 <_Balloc>
 8018924:	6922      	ldr	r2, [r4, #16]
 8018926:	3202      	adds	r2, #2
 8018928:	f104 010c 	add.w	r1, r4, #12
 801892c:	4680      	mov	r8, r0
 801892e:	0092      	lsls	r2, r2, #2
 8018930:	300c      	adds	r0, #12
 8018932:	f7fc fca3 	bl	801527c <memcpy>
 8018936:	4621      	mov	r1, r4
 8018938:	4630      	mov	r0, r6
 801893a:	f7ff ffb7 	bl	80188ac <_Bfree>
 801893e:	4644      	mov	r4, r8
 8018940:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018944:	3501      	adds	r5, #1
 8018946:	615f      	str	r7, [r3, #20]
 8018948:	6125      	str	r5, [r4, #16]
 801894a:	4620      	mov	r0, r4
 801894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018950 <__s2b>:
 8018950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018954:	460c      	mov	r4, r1
 8018956:	4615      	mov	r5, r2
 8018958:	461f      	mov	r7, r3
 801895a:	2209      	movs	r2, #9
 801895c:	3308      	adds	r3, #8
 801895e:	4606      	mov	r6, r0
 8018960:	fb93 f3f2 	sdiv	r3, r3, r2
 8018964:	2100      	movs	r1, #0
 8018966:	2201      	movs	r2, #1
 8018968:	429a      	cmp	r2, r3
 801896a:	db20      	blt.n	80189ae <__s2b+0x5e>
 801896c:	4630      	mov	r0, r6
 801896e:	f7ff ff69 	bl	8018844 <_Balloc>
 8018972:	9b08      	ldr	r3, [sp, #32]
 8018974:	6143      	str	r3, [r0, #20]
 8018976:	2d09      	cmp	r5, #9
 8018978:	f04f 0301 	mov.w	r3, #1
 801897c:	6103      	str	r3, [r0, #16]
 801897e:	dd19      	ble.n	80189b4 <__s2b+0x64>
 8018980:	f104 0809 	add.w	r8, r4, #9
 8018984:	46c1      	mov	r9, r8
 8018986:	442c      	add	r4, r5
 8018988:	f819 3b01 	ldrb.w	r3, [r9], #1
 801898c:	4601      	mov	r1, r0
 801898e:	3b30      	subs	r3, #48	; 0x30
 8018990:	220a      	movs	r2, #10
 8018992:	4630      	mov	r0, r6
 8018994:	f7ff ffa1 	bl	80188da <__multadd>
 8018998:	45a1      	cmp	r9, r4
 801899a:	d1f5      	bne.n	8018988 <__s2b+0x38>
 801899c:	eb08 0405 	add.w	r4, r8, r5
 80189a0:	3c08      	subs	r4, #8
 80189a2:	1b2d      	subs	r5, r5, r4
 80189a4:	1963      	adds	r3, r4, r5
 80189a6:	42bb      	cmp	r3, r7
 80189a8:	db07      	blt.n	80189ba <__s2b+0x6a>
 80189aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189ae:	0052      	lsls	r2, r2, #1
 80189b0:	3101      	adds	r1, #1
 80189b2:	e7d9      	b.n	8018968 <__s2b+0x18>
 80189b4:	340a      	adds	r4, #10
 80189b6:	2509      	movs	r5, #9
 80189b8:	e7f3      	b.n	80189a2 <__s2b+0x52>
 80189ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 80189be:	4601      	mov	r1, r0
 80189c0:	3b30      	subs	r3, #48	; 0x30
 80189c2:	220a      	movs	r2, #10
 80189c4:	4630      	mov	r0, r6
 80189c6:	f7ff ff88 	bl	80188da <__multadd>
 80189ca:	e7eb      	b.n	80189a4 <__s2b+0x54>

080189cc <__hi0bits>:
 80189cc:	0c02      	lsrs	r2, r0, #16
 80189ce:	0412      	lsls	r2, r2, #16
 80189d0:	4603      	mov	r3, r0
 80189d2:	b9b2      	cbnz	r2, 8018a02 <__hi0bits+0x36>
 80189d4:	0403      	lsls	r3, r0, #16
 80189d6:	2010      	movs	r0, #16
 80189d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80189dc:	bf04      	itt	eq
 80189de:	021b      	lsleq	r3, r3, #8
 80189e0:	3008      	addeq	r0, #8
 80189e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80189e6:	bf04      	itt	eq
 80189e8:	011b      	lsleq	r3, r3, #4
 80189ea:	3004      	addeq	r0, #4
 80189ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80189f0:	bf04      	itt	eq
 80189f2:	009b      	lsleq	r3, r3, #2
 80189f4:	3002      	addeq	r0, #2
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	db06      	blt.n	8018a08 <__hi0bits+0x3c>
 80189fa:	005b      	lsls	r3, r3, #1
 80189fc:	d503      	bpl.n	8018a06 <__hi0bits+0x3a>
 80189fe:	3001      	adds	r0, #1
 8018a00:	4770      	bx	lr
 8018a02:	2000      	movs	r0, #0
 8018a04:	e7e8      	b.n	80189d8 <__hi0bits+0xc>
 8018a06:	2020      	movs	r0, #32
 8018a08:	4770      	bx	lr

08018a0a <__lo0bits>:
 8018a0a:	6803      	ldr	r3, [r0, #0]
 8018a0c:	f013 0207 	ands.w	r2, r3, #7
 8018a10:	4601      	mov	r1, r0
 8018a12:	d00b      	beq.n	8018a2c <__lo0bits+0x22>
 8018a14:	07da      	lsls	r2, r3, #31
 8018a16:	d423      	bmi.n	8018a60 <__lo0bits+0x56>
 8018a18:	0798      	lsls	r0, r3, #30
 8018a1a:	bf49      	itett	mi
 8018a1c:	085b      	lsrmi	r3, r3, #1
 8018a1e:	089b      	lsrpl	r3, r3, #2
 8018a20:	2001      	movmi	r0, #1
 8018a22:	600b      	strmi	r3, [r1, #0]
 8018a24:	bf5c      	itt	pl
 8018a26:	600b      	strpl	r3, [r1, #0]
 8018a28:	2002      	movpl	r0, #2
 8018a2a:	4770      	bx	lr
 8018a2c:	b298      	uxth	r0, r3
 8018a2e:	b9a8      	cbnz	r0, 8018a5c <__lo0bits+0x52>
 8018a30:	0c1b      	lsrs	r3, r3, #16
 8018a32:	2010      	movs	r0, #16
 8018a34:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018a38:	bf04      	itt	eq
 8018a3a:	0a1b      	lsreq	r3, r3, #8
 8018a3c:	3008      	addeq	r0, #8
 8018a3e:	071a      	lsls	r2, r3, #28
 8018a40:	bf04      	itt	eq
 8018a42:	091b      	lsreq	r3, r3, #4
 8018a44:	3004      	addeq	r0, #4
 8018a46:	079a      	lsls	r2, r3, #30
 8018a48:	bf04      	itt	eq
 8018a4a:	089b      	lsreq	r3, r3, #2
 8018a4c:	3002      	addeq	r0, #2
 8018a4e:	07da      	lsls	r2, r3, #31
 8018a50:	d402      	bmi.n	8018a58 <__lo0bits+0x4e>
 8018a52:	085b      	lsrs	r3, r3, #1
 8018a54:	d006      	beq.n	8018a64 <__lo0bits+0x5a>
 8018a56:	3001      	adds	r0, #1
 8018a58:	600b      	str	r3, [r1, #0]
 8018a5a:	4770      	bx	lr
 8018a5c:	4610      	mov	r0, r2
 8018a5e:	e7e9      	b.n	8018a34 <__lo0bits+0x2a>
 8018a60:	2000      	movs	r0, #0
 8018a62:	4770      	bx	lr
 8018a64:	2020      	movs	r0, #32
 8018a66:	4770      	bx	lr

08018a68 <__i2b>:
 8018a68:	b510      	push	{r4, lr}
 8018a6a:	460c      	mov	r4, r1
 8018a6c:	2101      	movs	r1, #1
 8018a6e:	f7ff fee9 	bl	8018844 <_Balloc>
 8018a72:	2201      	movs	r2, #1
 8018a74:	6144      	str	r4, [r0, #20]
 8018a76:	6102      	str	r2, [r0, #16]
 8018a78:	bd10      	pop	{r4, pc}

08018a7a <__multiply>:
 8018a7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a7e:	4614      	mov	r4, r2
 8018a80:	690a      	ldr	r2, [r1, #16]
 8018a82:	6923      	ldr	r3, [r4, #16]
 8018a84:	429a      	cmp	r2, r3
 8018a86:	bfb8      	it	lt
 8018a88:	460b      	movlt	r3, r1
 8018a8a:	4688      	mov	r8, r1
 8018a8c:	bfbc      	itt	lt
 8018a8e:	46a0      	movlt	r8, r4
 8018a90:	461c      	movlt	r4, r3
 8018a92:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018a96:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018a9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018a9e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018aa2:	eb07 0609 	add.w	r6, r7, r9
 8018aa6:	42b3      	cmp	r3, r6
 8018aa8:	bfb8      	it	lt
 8018aaa:	3101      	addlt	r1, #1
 8018aac:	f7ff feca 	bl	8018844 <_Balloc>
 8018ab0:	f100 0514 	add.w	r5, r0, #20
 8018ab4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018ab8:	462b      	mov	r3, r5
 8018aba:	2200      	movs	r2, #0
 8018abc:	4573      	cmp	r3, lr
 8018abe:	d316      	bcc.n	8018aee <__multiply+0x74>
 8018ac0:	f104 0214 	add.w	r2, r4, #20
 8018ac4:	f108 0114 	add.w	r1, r8, #20
 8018ac8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018acc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018ad0:	9300      	str	r3, [sp, #0]
 8018ad2:	9b00      	ldr	r3, [sp, #0]
 8018ad4:	9201      	str	r2, [sp, #4]
 8018ad6:	4293      	cmp	r3, r2
 8018ad8:	d80c      	bhi.n	8018af4 <__multiply+0x7a>
 8018ada:	2e00      	cmp	r6, #0
 8018adc:	dd03      	ble.n	8018ae6 <__multiply+0x6c>
 8018ade:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d05d      	beq.n	8018ba2 <__multiply+0x128>
 8018ae6:	6106      	str	r6, [r0, #16]
 8018ae8:	b003      	add	sp, #12
 8018aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018aee:	f843 2b04 	str.w	r2, [r3], #4
 8018af2:	e7e3      	b.n	8018abc <__multiply+0x42>
 8018af4:	f8b2 b000 	ldrh.w	fp, [r2]
 8018af8:	f1bb 0f00 	cmp.w	fp, #0
 8018afc:	d023      	beq.n	8018b46 <__multiply+0xcc>
 8018afe:	4689      	mov	r9, r1
 8018b00:	46ac      	mov	ip, r5
 8018b02:	f04f 0800 	mov.w	r8, #0
 8018b06:	f859 4b04 	ldr.w	r4, [r9], #4
 8018b0a:	f8dc a000 	ldr.w	sl, [ip]
 8018b0e:	b2a3      	uxth	r3, r4
 8018b10:	fa1f fa8a 	uxth.w	sl, sl
 8018b14:	fb0b a303 	mla	r3, fp, r3, sl
 8018b18:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018b1c:	f8dc 4000 	ldr.w	r4, [ip]
 8018b20:	4443      	add	r3, r8
 8018b22:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018b26:	fb0b 840a 	mla	r4, fp, sl, r8
 8018b2a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018b2e:	46e2      	mov	sl, ip
 8018b30:	b29b      	uxth	r3, r3
 8018b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018b36:	454f      	cmp	r7, r9
 8018b38:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018b3c:	f84a 3b04 	str.w	r3, [sl], #4
 8018b40:	d82b      	bhi.n	8018b9a <__multiply+0x120>
 8018b42:	f8cc 8004 	str.w	r8, [ip, #4]
 8018b46:	9b01      	ldr	r3, [sp, #4]
 8018b48:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018b4c:	3204      	adds	r2, #4
 8018b4e:	f1ba 0f00 	cmp.w	sl, #0
 8018b52:	d020      	beq.n	8018b96 <__multiply+0x11c>
 8018b54:	682b      	ldr	r3, [r5, #0]
 8018b56:	4689      	mov	r9, r1
 8018b58:	46a8      	mov	r8, r5
 8018b5a:	f04f 0b00 	mov.w	fp, #0
 8018b5e:	f8b9 c000 	ldrh.w	ip, [r9]
 8018b62:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018b66:	fb0a 440c 	mla	r4, sl, ip, r4
 8018b6a:	445c      	add	r4, fp
 8018b6c:	46c4      	mov	ip, r8
 8018b6e:	b29b      	uxth	r3, r3
 8018b70:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018b74:	f84c 3b04 	str.w	r3, [ip], #4
 8018b78:	f859 3b04 	ldr.w	r3, [r9], #4
 8018b7c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018b80:	0c1b      	lsrs	r3, r3, #16
 8018b82:	fb0a b303 	mla	r3, sl, r3, fp
 8018b86:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018b8a:	454f      	cmp	r7, r9
 8018b8c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018b90:	d805      	bhi.n	8018b9e <__multiply+0x124>
 8018b92:	f8c8 3004 	str.w	r3, [r8, #4]
 8018b96:	3504      	adds	r5, #4
 8018b98:	e79b      	b.n	8018ad2 <__multiply+0x58>
 8018b9a:	46d4      	mov	ip, sl
 8018b9c:	e7b3      	b.n	8018b06 <__multiply+0x8c>
 8018b9e:	46e0      	mov	r8, ip
 8018ba0:	e7dd      	b.n	8018b5e <__multiply+0xe4>
 8018ba2:	3e01      	subs	r6, #1
 8018ba4:	e799      	b.n	8018ada <__multiply+0x60>
	...

08018ba8 <__pow5mult>:
 8018ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bac:	4615      	mov	r5, r2
 8018bae:	f012 0203 	ands.w	r2, r2, #3
 8018bb2:	4606      	mov	r6, r0
 8018bb4:	460f      	mov	r7, r1
 8018bb6:	d007      	beq.n	8018bc8 <__pow5mult+0x20>
 8018bb8:	3a01      	subs	r2, #1
 8018bba:	4c21      	ldr	r4, [pc, #132]	; (8018c40 <__pow5mult+0x98>)
 8018bbc:	2300      	movs	r3, #0
 8018bbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018bc2:	f7ff fe8a 	bl	80188da <__multadd>
 8018bc6:	4607      	mov	r7, r0
 8018bc8:	10ad      	asrs	r5, r5, #2
 8018bca:	d035      	beq.n	8018c38 <__pow5mult+0x90>
 8018bcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018bce:	b93c      	cbnz	r4, 8018be0 <__pow5mult+0x38>
 8018bd0:	2010      	movs	r0, #16
 8018bd2:	f7ff fe1d 	bl	8018810 <malloc>
 8018bd6:	6270      	str	r0, [r6, #36]	; 0x24
 8018bd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018bdc:	6004      	str	r4, [r0, #0]
 8018bde:	60c4      	str	r4, [r0, #12]
 8018be0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018be4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018be8:	b94c      	cbnz	r4, 8018bfe <__pow5mult+0x56>
 8018bea:	f240 2171 	movw	r1, #625	; 0x271
 8018bee:	4630      	mov	r0, r6
 8018bf0:	f7ff ff3a 	bl	8018a68 <__i2b>
 8018bf4:	2300      	movs	r3, #0
 8018bf6:	f8c8 0008 	str.w	r0, [r8, #8]
 8018bfa:	4604      	mov	r4, r0
 8018bfc:	6003      	str	r3, [r0, #0]
 8018bfe:	f04f 0800 	mov.w	r8, #0
 8018c02:	07eb      	lsls	r3, r5, #31
 8018c04:	d50a      	bpl.n	8018c1c <__pow5mult+0x74>
 8018c06:	4639      	mov	r1, r7
 8018c08:	4622      	mov	r2, r4
 8018c0a:	4630      	mov	r0, r6
 8018c0c:	f7ff ff35 	bl	8018a7a <__multiply>
 8018c10:	4639      	mov	r1, r7
 8018c12:	4681      	mov	r9, r0
 8018c14:	4630      	mov	r0, r6
 8018c16:	f7ff fe49 	bl	80188ac <_Bfree>
 8018c1a:	464f      	mov	r7, r9
 8018c1c:	106d      	asrs	r5, r5, #1
 8018c1e:	d00b      	beq.n	8018c38 <__pow5mult+0x90>
 8018c20:	6820      	ldr	r0, [r4, #0]
 8018c22:	b938      	cbnz	r0, 8018c34 <__pow5mult+0x8c>
 8018c24:	4622      	mov	r2, r4
 8018c26:	4621      	mov	r1, r4
 8018c28:	4630      	mov	r0, r6
 8018c2a:	f7ff ff26 	bl	8018a7a <__multiply>
 8018c2e:	6020      	str	r0, [r4, #0]
 8018c30:	f8c0 8000 	str.w	r8, [r0]
 8018c34:	4604      	mov	r4, r0
 8018c36:	e7e4      	b.n	8018c02 <__pow5mult+0x5a>
 8018c38:	4638      	mov	r0, r7
 8018c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c3e:	bf00      	nop
 8018c40:	0801a7e8 	.word	0x0801a7e8

08018c44 <__lshift>:
 8018c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c48:	460c      	mov	r4, r1
 8018c4a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018c4e:	6923      	ldr	r3, [r4, #16]
 8018c50:	6849      	ldr	r1, [r1, #4]
 8018c52:	eb0a 0903 	add.w	r9, sl, r3
 8018c56:	68a3      	ldr	r3, [r4, #8]
 8018c58:	4607      	mov	r7, r0
 8018c5a:	4616      	mov	r6, r2
 8018c5c:	f109 0501 	add.w	r5, r9, #1
 8018c60:	42ab      	cmp	r3, r5
 8018c62:	db32      	blt.n	8018cca <__lshift+0x86>
 8018c64:	4638      	mov	r0, r7
 8018c66:	f7ff fded 	bl	8018844 <_Balloc>
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	4680      	mov	r8, r0
 8018c6e:	f100 0114 	add.w	r1, r0, #20
 8018c72:	461a      	mov	r2, r3
 8018c74:	4553      	cmp	r3, sl
 8018c76:	db2b      	blt.n	8018cd0 <__lshift+0x8c>
 8018c78:	6920      	ldr	r0, [r4, #16]
 8018c7a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018c7e:	f104 0314 	add.w	r3, r4, #20
 8018c82:	f016 021f 	ands.w	r2, r6, #31
 8018c86:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018c8a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018c8e:	d025      	beq.n	8018cdc <__lshift+0x98>
 8018c90:	f1c2 0e20 	rsb	lr, r2, #32
 8018c94:	2000      	movs	r0, #0
 8018c96:	681e      	ldr	r6, [r3, #0]
 8018c98:	468a      	mov	sl, r1
 8018c9a:	4096      	lsls	r6, r2
 8018c9c:	4330      	orrs	r0, r6
 8018c9e:	f84a 0b04 	str.w	r0, [sl], #4
 8018ca2:	f853 0b04 	ldr.w	r0, [r3], #4
 8018ca6:	459c      	cmp	ip, r3
 8018ca8:	fa20 f00e 	lsr.w	r0, r0, lr
 8018cac:	d814      	bhi.n	8018cd8 <__lshift+0x94>
 8018cae:	6048      	str	r0, [r1, #4]
 8018cb0:	b108      	cbz	r0, 8018cb6 <__lshift+0x72>
 8018cb2:	f109 0502 	add.w	r5, r9, #2
 8018cb6:	3d01      	subs	r5, #1
 8018cb8:	4638      	mov	r0, r7
 8018cba:	f8c8 5010 	str.w	r5, [r8, #16]
 8018cbe:	4621      	mov	r1, r4
 8018cc0:	f7ff fdf4 	bl	80188ac <_Bfree>
 8018cc4:	4640      	mov	r0, r8
 8018cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cca:	3101      	adds	r1, #1
 8018ccc:	005b      	lsls	r3, r3, #1
 8018cce:	e7c7      	b.n	8018c60 <__lshift+0x1c>
 8018cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018cd4:	3301      	adds	r3, #1
 8018cd6:	e7cd      	b.n	8018c74 <__lshift+0x30>
 8018cd8:	4651      	mov	r1, sl
 8018cda:	e7dc      	b.n	8018c96 <__lshift+0x52>
 8018cdc:	3904      	subs	r1, #4
 8018cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ce2:	f841 2f04 	str.w	r2, [r1, #4]!
 8018ce6:	459c      	cmp	ip, r3
 8018ce8:	d8f9      	bhi.n	8018cde <__lshift+0x9a>
 8018cea:	e7e4      	b.n	8018cb6 <__lshift+0x72>

08018cec <__mcmp>:
 8018cec:	6903      	ldr	r3, [r0, #16]
 8018cee:	690a      	ldr	r2, [r1, #16]
 8018cf0:	1a9b      	subs	r3, r3, r2
 8018cf2:	b530      	push	{r4, r5, lr}
 8018cf4:	d10c      	bne.n	8018d10 <__mcmp+0x24>
 8018cf6:	0092      	lsls	r2, r2, #2
 8018cf8:	3014      	adds	r0, #20
 8018cfa:	3114      	adds	r1, #20
 8018cfc:	1884      	adds	r4, r0, r2
 8018cfe:	4411      	add	r1, r2
 8018d00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018d04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018d08:	4295      	cmp	r5, r2
 8018d0a:	d003      	beq.n	8018d14 <__mcmp+0x28>
 8018d0c:	d305      	bcc.n	8018d1a <__mcmp+0x2e>
 8018d0e:	2301      	movs	r3, #1
 8018d10:	4618      	mov	r0, r3
 8018d12:	bd30      	pop	{r4, r5, pc}
 8018d14:	42a0      	cmp	r0, r4
 8018d16:	d3f3      	bcc.n	8018d00 <__mcmp+0x14>
 8018d18:	e7fa      	b.n	8018d10 <__mcmp+0x24>
 8018d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8018d1e:	e7f7      	b.n	8018d10 <__mcmp+0x24>

08018d20 <__mdiff>:
 8018d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d24:	460d      	mov	r5, r1
 8018d26:	4607      	mov	r7, r0
 8018d28:	4611      	mov	r1, r2
 8018d2a:	4628      	mov	r0, r5
 8018d2c:	4614      	mov	r4, r2
 8018d2e:	f7ff ffdd 	bl	8018cec <__mcmp>
 8018d32:	1e06      	subs	r6, r0, #0
 8018d34:	d108      	bne.n	8018d48 <__mdiff+0x28>
 8018d36:	4631      	mov	r1, r6
 8018d38:	4638      	mov	r0, r7
 8018d3a:	f7ff fd83 	bl	8018844 <_Balloc>
 8018d3e:	2301      	movs	r3, #1
 8018d40:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d48:	bfa4      	itt	ge
 8018d4a:	4623      	movge	r3, r4
 8018d4c:	462c      	movge	r4, r5
 8018d4e:	4638      	mov	r0, r7
 8018d50:	6861      	ldr	r1, [r4, #4]
 8018d52:	bfa6      	itte	ge
 8018d54:	461d      	movge	r5, r3
 8018d56:	2600      	movge	r6, #0
 8018d58:	2601      	movlt	r6, #1
 8018d5a:	f7ff fd73 	bl	8018844 <_Balloc>
 8018d5e:	692b      	ldr	r3, [r5, #16]
 8018d60:	60c6      	str	r6, [r0, #12]
 8018d62:	6926      	ldr	r6, [r4, #16]
 8018d64:	f105 0914 	add.w	r9, r5, #20
 8018d68:	f104 0214 	add.w	r2, r4, #20
 8018d6c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018d70:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018d74:	f100 0514 	add.w	r5, r0, #20
 8018d78:	f04f 0e00 	mov.w	lr, #0
 8018d7c:	f852 ab04 	ldr.w	sl, [r2], #4
 8018d80:	f859 4b04 	ldr.w	r4, [r9], #4
 8018d84:	fa1e f18a 	uxtah	r1, lr, sl
 8018d88:	b2a3      	uxth	r3, r4
 8018d8a:	1ac9      	subs	r1, r1, r3
 8018d8c:	0c23      	lsrs	r3, r4, #16
 8018d8e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018d92:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018d96:	b289      	uxth	r1, r1
 8018d98:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018d9c:	45c8      	cmp	r8, r9
 8018d9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018da2:	4694      	mov	ip, r2
 8018da4:	f845 3b04 	str.w	r3, [r5], #4
 8018da8:	d8e8      	bhi.n	8018d7c <__mdiff+0x5c>
 8018daa:	45bc      	cmp	ip, r7
 8018dac:	d304      	bcc.n	8018db8 <__mdiff+0x98>
 8018dae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018db2:	b183      	cbz	r3, 8018dd6 <__mdiff+0xb6>
 8018db4:	6106      	str	r6, [r0, #16]
 8018db6:	e7c5      	b.n	8018d44 <__mdiff+0x24>
 8018db8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018dbc:	fa1e f381 	uxtah	r3, lr, r1
 8018dc0:	141a      	asrs	r2, r3, #16
 8018dc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018dc6:	b29b      	uxth	r3, r3
 8018dc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018dcc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018dd0:	f845 3b04 	str.w	r3, [r5], #4
 8018dd4:	e7e9      	b.n	8018daa <__mdiff+0x8a>
 8018dd6:	3e01      	subs	r6, #1
 8018dd8:	e7e9      	b.n	8018dae <__mdiff+0x8e>
	...

08018ddc <__ulp>:
 8018ddc:	4b12      	ldr	r3, [pc, #72]	; (8018e28 <__ulp+0x4c>)
 8018dde:	ee10 2a90 	vmov	r2, s1
 8018de2:	401a      	ands	r2, r3
 8018de4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	dd04      	ble.n	8018df6 <__ulp+0x1a>
 8018dec:	2000      	movs	r0, #0
 8018dee:	4619      	mov	r1, r3
 8018df0:	ec41 0b10 	vmov	d0, r0, r1
 8018df4:	4770      	bx	lr
 8018df6:	425b      	negs	r3, r3
 8018df8:	151b      	asrs	r3, r3, #20
 8018dfa:	2b13      	cmp	r3, #19
 8018dfc:	f04f 0000 	mov.w	r0, #0
 8018e00:	f04f 0100 	mov.w	r1, #0
 8018e04:	dc04      	bgt.n	8018e10 <__ulp+0x34>
 8018e06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018e0a:	fa42 f103 	asr.w	r1, r2, r3
 8018e0e:	e7ef      	b.n	8018df0 <__ulp+0x14>
 8018e10:	3b14      	subs	r3, #20
 8018e12:	2b1e      	cmp	r3, #30
 8018e14:	f04f 0201 	mov.w	r2, #1
 8018e18:	bfda      	itte	le
 8018e1a:	f1c3 031f 	rsble	r3, r3, #31
 8018e1e:	fa02 f303 	lslle.w	r3, r2, r3
 8018e22:	4613      	movgt	r3, r2
 8018e24:	4618      	mov	r0, r3
 8018e26:	e7e3      	b.n	8018df0 <__ulp+0x14>
 8018e28:	7ff00000 	.word	0x7ff00000

08018e2c <__b2d>:
 8018e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e2e:	6905      	ldr	r5, [r0, #16]
 8018e30:	f100 0714 	add.w	r7, r0, #20
 8018e34:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018e38:	1f2e      	subs	r6, r5, #4
 8018e3a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018e3e:	4620      	mov	r0, r4
 8018e40:	f7ff fdc4 	bl	80189cc <__hi0bits>
 8018e44:	f1c0 0320 	rsb	r3, r0, #32
 8018e48:	280a      	cmp	r0, #10
 8018e4a:	600b      	str	r3, [r1, #0]
 8018e4c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018ec4 <__b2d+0x98>
 8018e50:	dc14      	bgt.n	8018e7c <__b2d+0x50>
 8018e52:	f1c0 0e0b 	rsb	lr, r0, #11
 8018e56:	fa24 f10e 	lsr.w	r1, r4, lr
 8018e5a:	42b7      	cmp	r7, r6
 8018e5c:	ea41 030c 	orr.w	r3, r1, ip
 8018e60:	bf34      	ite	cc
 8018e62:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018e66:	2100      	movcs	r1, #0
 8018e68:	3015      	adds	r0, #21
 8018e6a:	fa04 f000 	lsl.w	r0, r4, r0
 8018e6e:	fa21 f10e 	lsr.w	r1, r1, lr
 8018e72:	ea40 0201 	orr.w	r2, r0, r1
 8018e76:	ec43 2b10 	vmov	d0, r2, r3
 8018e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e7c:	42b7      	cmp	r7, r6
 8018e7e:	bf3a      	itte	cc
 8018e80:	f1a5 0608 	subcc.w	r6, r5, #8
 8018e84:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018e88:	2100      	movcs	r1, #0
 8018e8a:	380b      	subs	r0, #11
 8018e8c:	d015      	beq.n	8018eba <__b2d+0x8e>
 8018e8e:	4084      	lsls	r4, r0
 8018e90:	f1c0 0520 	rsb	r5, r0, #32
 8018e94:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018e98:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018e9c:	42be      	cmp	r6, r7
 8018e9e:	fa21 fc05 	lsr.w	ip, r1, r5
 8018ea2:	ea44 030c 	orr.w	r3, r4, ip
 8018ea6:	bf8c      	ite	hi
 8018ea8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018eac:	2400      	movls	r4, #0
 8018eae:	fa01 f000 	lsl.w	r0, r1, r0
 8018eb2:	40ec      	lsrs	r4, r5
 8018eb4:	ea40 0204 	orr.w	r2, r0, r4
 8018eb8:	e7dd      	b.n	8018e76 <__b2d+0x4a>
 8018eba:	ea44 030c 	orr.w	r3, r4, ip
 8018ebe:	460a      	mov	r2, r1
 8018ec0:	e7d9      	b.n	8018e76 <__b2d+0x4a>
 8018ec2:	bf00      	nop
 8018ec4:	3ff00000 	.word	0x3ff00000

08018ec8 <__d2b>:
 8018ec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018ecc:	460e      	mov	r6, r1
 8018ece:	2101      	movs	r1, #1
 8018ed0:	ec59 8b10 	vmov	r8, r9, d0
 8018ed4:	4615      	mov	r5, r2
 8018ed6:	f7ff fcb5 	bl	8018844 <_Balloc>
 8018eda:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018ede:	4607      	mov	r7, r0
 8018ee0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018ee4:	bb34      	cbnz	r4, 8018f34 <__d2b+0x6c>
 8018ee6:	9301      	str	r3, [sp, #4]
 8018ee8:	f1b8 0300 	subs.w	r3, r8, #0
 8018eec:	d027      	beq.n	8018f3e <__d2b+0x76>
 8018eee:	a802      	add	r0, sp, #8
 8018ef0:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018ef4:	f7ff fd89 	bl	8018a0a <__lo0bits>
 8018ef8:	9900      	ldr	r1, [sp, #0]
 8018efa:	b1f0      	cbz	r0, 8018f3a <__d2b+0x72>
 8018efc:	9a01      	ldr	r2, [sp, #4]
 8018efe:	f1c0 0320 	rsb	r3, r0, #32
 8018f02:	fa02 f303 	lsl.w	r3, r2, r3
 8018f06:	430b      	orrs	r3, r1
 8018f08:	40c2      	lsrs	r2, r0
 8018f0a:	617b      	str	r3, [r7, #20]
 8018f0c:	9201      	str	r2, [sp, #4]
 8018f0e:	9b01      	ldr	r3, [sp, #4]
 8018f10:	61bb      	str	r3, [r7, #24]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	bf14      	ite	ne
 8018f16:	2102      	movne	r1, #2
 8018f18:	2101      	moveq	r1, #1
 8018f1a:	6139      	str	r1, [r7, #16]
 8018f1c:	b1c4      	cbz	r4, 8018f50 <__d2b+0x88>
 8018f1e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018f22:	4404      	add	r4, r0
 8018f24:	6034      	str	r4, [r6, #0]
 8018f26:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018f2a:	6028      	str	r0, [r5, #0]
 8018f2c:	4638      	mov	r0, r7
 8018f2e:	b003      	add	sp, #12
 8018f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018f38:	e7d5      	b.n	8018ee6 <__d2b+0x1e>
 8018f3a:	6179      	str	r1, [r7, #20]
 8018f3c:	e7e7      	b.n	8018f0e <__d2b+0x46>
 8018f3e:	a801      	add	r0, sp, #4
 8018f40:	f7ff fd63 	bl	8018a0a <__lo0bits>
 8018f44:	9b01      	ldr	r3, [sp, #4]
 8018f46:	617b      	str	r3, [r7, #20]
 8018f48:	2101      	movs	r1, #1
 8018f4a:	6139      	str	r1, [r7, #16]
 8018f4c:	3020      	adds	r0, #32
 8018f4e:	e7e5      	b.n	8018f1c <__d2b+0x54>
 8018f50:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018f54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018f58:	6030      	str	r0, [r6, #0]
 8018f5a:	6918      	ldr	r0, [r3, #16]
 8018f5c:	f7ff fd36 	bl	80189cc <__hi0bits>
 8018f60:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018f64:	e7e1      	b.n	8018f2a <__d2b+0x62>

08018f66 <__ratio>:
 8018f66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f6a:	4688      	mov	r8, r1
 8018f6c:	4669      	mov	r1, sp
 8018f6e:	4681      	mov	r9, r0
 8018f70:	f7ff ff5c 	bl	8018e2c <__b2d>
 8018f74:	a901      	add	r1, sp, #4
 8018f76:	4640      	mov	r0, r8
 8018f78:	ec57 6b10 	vmov	r6, r7, d0
 8018f7c:	f7ff ff56 	bl	8018e2c <__b2d>
 8018f80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018f84:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018f88:	eba3 0c02 	sub.w	ip, r3, r2
 8018f8c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018f90:	1a9b      	subs	r3, r3, r2
 8018f92:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018f96:	ec5b ab10 	vmov	sl, fp, d0
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	bfce      	itee	gt
 8018f9e:	463a      	movgt	r2, r7
 8018fa0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018fa4:	465a      	movle	r2, fp
 8018fa6:	4659      	mov	r1, fp
 8018fa8:	463d      	mov	r5, r7
 8018faa:	bfd4      	ite	le
 8018fac:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018fb0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018fb4:	4630      	mov	r0, r6
 8018fb6:	ee10 2a10 	vmov	r2, s0
 8018fba:	460b      	mov	r3, r1
 8018fbc:	4629      	mov	r1, r5
 8018fbe:	f7ef fb7d 	bl	80086bc <__aeabi_ddiv>
 8018fc2:	ec41 0b10 	vmov	d0, r0, r1
 8018fc6:	b003      	add	sp, #12
 8018fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018fcc <__copybits>:
 8018fcc:	3901      	subs	r1, #1
 8018fce:	b510      	push	{r4, lr}
 8018fd0:	1149      	asrs	r1, r1, #5
 8018fd2:	6914      	ldr	r4, [r2, #16]
 8018fd4:	3101      	adds	r1, #1
 8018fd6:	f102 0314 	add.w	r3, r2, #20
 8018fda:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018fde:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018fe2:	42a3      	cmp	r3, r4
 8018fe4:	4602      	mov	r2, r0
 8018fe6:	d303      	bcc.n	8018ff0 <__copybits+0x24>
 8018fe8:	2300      	movs	r3, #0
 8018fea:	428a      	cmp	r2, r1
 8018fec:	d305      	bcc.n	8018ffa <__copybits+0x2e>
 8018fee:	bd10      	pop	{r4, pc}
 8018ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ff4:	f840 2b04 	str.w	r2, [r0], #4
 8018ff8:	e7f3      	b.n	8018fe2 <__copybits+0x16>
 8018ffa:	f842 3b04 	str.w	r3, [r2], #4
 8018ffe:	e7f4      	b.n	8018fea <__copybits+0x1e>

08019000 <__any_on>:
 8019000:	f100 0214 	add.w	r2, r0, #20
 8019004:	6900      	ldr	r0, [r0, #16]
 8019006:	114b      	asrs	r3, r1, #5
 8019008:	4298      	cmp	r0, r3
 801900a:	b510      	push	{r4, lr}
 801900c:	db11      	blt.n	8019032 <__any_on+0x32>
 801900e:	dd0a      	ble.n	8019026 <__any_on+0x26>
 8019010:	f011 011f 	ands.w	r1, r1, #31
 8019014:	d007      	beq.n	8019026 <__any_on+0x26>
 8019016:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801901a:	fa24 f001 	lsr.w	r0, r4, r1
 801901e:	fa00 f101 	lsl.w	r1, r0, r1
 8019022:	428c      	cmp	r4, r1
 8019024:	d10b      	bne.n	801903e <__any_on+0x3e>
 8019026:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801902a:	4293      	cmp	r3, r2
 801902c:	d803      	bhi.n	8019036 <__any_on+0x36>
 801902e:	2000      	movs	r0, #0
 8019030:	bd10      	pop	{r4, pc}
 8019032:	4603      	mov	r3, r0
 8019034:	e7f7      	b.n	8019026 <__any_on+0x26>
 8019036:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801903a:	2900      	cmp	r1, #0
 801903c:	d0f5      	beq.n	801902a <__any_on+0x2a>
 801903e:	2001      	movs	r0, #1
 8019040:	e7f6      	b.n	8019030 <__any_on+0x30>

08019042 <_calloc_r>:
 8019042:	b538      	push	{r3, r4, r5, lr}
 8019044:	fb02 f401 	mul.w	r4, r2, r1
 8019048:	4621      	mov	r1, r4
 801904a:	f000 f857 	bl	80190fc <_malloc_r>
 801904e:	4605      	mov	r5, r0
 8019050:	b118      	cbz	r0, 801905a <_calloc_r+0x18>
 8019052:	4622      	mov	r2, r4
 8019054:	2100      	movs	r1, #0
 8019056:	f7fc f91c 	bl	8015292 <memset>
 801905a:	4628      	mov	r0, r5
 801905c:	bd38      	pop	{r3, r4, r5, pc}
	...

08019060 <_free_r>:
 8019060:	b538      	push	{r3, r4, r5, lr}
 8019062:	4605      	mov	r5, r0
 8019064:	2900      	cmp	r1, #0
 8019066:	d045      	beq.n	80190f4 <_free_r+0x94>
 8019068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801906c:	1f0c      	subs	r4, r1, #4
 801906e:	2b00      	cmp	r3, #0
 8019070:	bfb8      	it	lt
 8019072:	18e4      	addlt	r4, r4, r3
 8019074:	f001 f8e1 	bl	801a23a <__malloc_lock>
 8019078:	4a1f      	ldr	r2, [pc, #124]	; (80190f8 <_free_r+0x98>)
 801907a:	6813      	ldr	r3, [r2, #0]
 801907c:	4610      	mov	r0, r2
 801907e:	b933      	cbnz	r3, 801908e <_free_r+0x2e>
 8019080:	6063      	str	r3, [r4, #4]
 8019082:	6014      	str	r4, [r2, #0]
 8019084:	4628      	mov	r0, r5
 8019086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801908a:	f001 b8d7 	b.w	801a23c <__malloc_unlock>
 801908e:	42a3      	cmp	r3, r4
 8019090:	d90c      	bls.n	80190ac <_free_r+0x4c>
 8019092:	6821      	ldr	r1, [r4, #0]
 8019094:	1862      	adds	r2, r4, r1
 8019096:	4293      	cmp	r3, r2
 8019098:	bf04      	itt	eq
 801909a:	681a      	ldreq	r2, [r3, #0]
 801909c:	685b      	ldreq	r3, [r3, #4]
 801909e:	6063      	str	r3, [r4, #4]
 80190a0:	bf04      	itt	eq
 80190a2:	1852      	addeq	r2, r2, r1
 80190a4:	6022      	streq	r2, [r4, #0]
 80190a6:	6004      	str	r4, [r0, #0]
 80190a8:	e7ec      	b.n	8019084 <_free_r+0x24>
 80190aa:	4613      	mov	r3, r2
 80190ac:	685a      	ldr	r2, [r3, #4]
 80190ae:	b10a      	cbz	r2, 80190b4 <_free_r+0x54>
 80190b0:	42a2      	cmp	r2, r4
 80190b2:	d9fa      	bls.n	80190aa <_free_r+0x4a>
 80190b4:	6819      	ldr	r1, [r3, #0]
 80190b6:	1858      	adds	r0, r3, r1
 80190b8:	42a0      	cmp	r0, r4
 80190ba:	d10b      	bne.n	80190d4 <_free_r+0x74>
 80190bc:	6820      	ldr	r0, [r4, #0]
 80190be:	4401      	add	r1, r0
 80190c0:	1858      	adds	r0, r3, r1
 80190c2:	4282      	cmp	r2, r0
 80190c4:	6019      	str	r1, [r3, #0]
 80190c6:	d1dd      	bne.n	8019084 <_free_r+0x24>
 80190c8:	6810      	ldr	r0, [r2, #0]
 80190ca:	6852      	ldr	r2, [r2, #4]
 80190cc:	605a      	str	r2, [r3, #4]
 80190ce:	4401      	add	r1, r0
 80190d0:	6019      	str	r1, [r3, #0]
 80190d2:	e7d7      	b.n	8019084 <_free_r+0x24>
 80190d4:	d902      	bls.n	80190dc <_free_r+0x7c>
 80190d6:	230c      	movs	r3, #12
 80190d8:	602b      	str	r3, [r5, #0]
 80190da:	e7d3      	b.n	8019084 <_free_r+0x24>
 80190dc:	6820      	ldr	r0, [r4, #0]
 80190de:	1821      	adds	r1, r4, r0
 80190e0:	428a      	cmp	r2, r1
 80190e2:	bf04      	itt	eq
 80190e4:	6811      	ldreq	r1, [r2, #0]
 80190e6:	6852      	ldreq	r2, [r2, #4]
 80190e8:	6062      	str	r2, [r4, #4]
 80190ea:	bf04      	itt	eq
 80190ec:	1809      	addeq	r1, r1, r0
 80190ee:	6021      	streq	r1, [r4, #0]
 80190f0:	605c      	str	r4, [r3, #4]
 80190f2:	e7c7      	b.n	8019084 <_free_r+0x24>
 80190f4:	bd38      	pop	{r3, r4, r5, pc}
 80190f6:	bf00      	nop
 80190f8:	2000fed0 	.word	0x2000fed0

080190fc <_malloc_r>:
 80190fc:	b570      	push	{r4, r5, r6, lr}
 80190fe:	1ccd      	adds	r5, r1, #3
 8019100:	f025 0503 	bic.w	r5, r5, #3
 8019104:	3508      	adds	r5, #8
 8019106:	2d0c      	cmp	r5, #12
 8019108:	bf38      	it	cc
 801910a:	250c      	movcc	r5, #12
 801910c:	2d00      	cmp	r5, #0
 801910e:	4606      	mov	r6, r0
 8019110:	db01      	blt.n	8019116 <_malloc_r+0x1a>
 8019112:	42a9      	cmp	r1, r5
 8019114:	d903      	bls.n	801911e <_malloc_r+0x22>
 8019116:	230c      	movs	r3, #12
 8019118:	6033      	str	r3, [r6, #0]
 801911a:	2000      	movs	r0, #0
 801911c:	bd70      	pop	{r4, r5, r6, pc}
 801911e:	f001 f88c 	bl	801a23a <__malloc_lock>
 8019122:	4a21      	ldr	r2, [pc, #132]	; (80191a8 <_malloc_r+0xac>)
 8019124:	6814      	ldr	r4, [r2, #0]
 8019126:	4621      	mov	r1, r4
 8019128:	b991      	cbnz	r1, 8019150 <_malloc_r+0x54>
 801912a:	4c20      	ldr	r4, [pc, #128]	; (80191ac <_malloc_r+0xb0>)
 801912c:	6823      	ldr	r3, [r4, #0]
 801912e:	b91b      	cbnz	r3, 8019138 <_malloc_r+0x3c>
 8019130:	4630      	mov	r0, r6
 8019132:	f000 fe35 	bl	8019da0 <_sbrk_r>
 8019136:	6020      	str	r0, [r4, #0]
 8019138:	4629      	mov	r1, r5
 801913a:	4630      	mov	r0, r6
 801913c:	f000 fe30 	bl	8019da0 <_sbrk_r>
 8019140:	1c43      	adds	r3, r0, #1
 8019142:	d124      	bne.n	801918e <_malloc_r+0x92>
 8019144:	230c      	movs	r3, #12
 8019146:	6033      	str	r3, [r6, #0]
 8019148:	4630      	mov	r0, r6
 801914a:	f001 f877 	bl	801a23c <__malloc_unlock>
 801914e:	e7e4      	b.n	801911a <_malloc_r+0x1e>
 8019150:	680b      	ldr	r3, [r1, #0]
 8019152:	1b5b      	subs	r3, r3, r5
 8019154:	d418      	bmi.n	8019188 <_malloc_r+0x8c>
 8019156:	2b0b      	cmp	r3, #11
 8019158:	d90f      	bls.n	801917a <_malloc_r+0x7e>
 801915a:	600b      	str	r3, [r1, #0]
 801915c:	50cd      	str	r5, [r1, r3]
 801915e:	18cc      	adds	r4, r1, r3
 8019160:	4630      	mov	r0, r6
 8019162:	f001 f86b 	bl	801a23c <__malloc_unlock>
 8019166:	f104 000b 	add.w	r0, r4, #11
 801916a:	1d23      	adds	r3, r4, #4
 801916c:	f020 0007 	bic.w	r0, r0, #7
 8019170:	1ac3      	subs	r3, r0, r3
 8019172:	d0d3      	beq.n	801911c <_malloc_r+0x20>
 8019174:	425a      	negs	r2, r3
 8019176:	50e2      	str	r2, [r4, r3]
 8019178:	e7d0      	b.n	801911c <_malloc_r+0x20>
 801917a:	428c      	cmp	r4, r1
 801917c:	684b      	ldr	r3, [r1, #4]
 801917e:	bf16      	itet	ne
 8019180:	6063      	strne	r3, [r4, #4]
 8019182:	6013      	streq	r3, [r2, #0]
 8019184:	460c      	movne	r4, r1
 8019186:	e7eb      	b.n	8019160 <_malloc_r+0x64>
 8019188:	460c      	mov	r4, r1
 801918a:	6849      	ldr	r1, [r1, #4]
 801918c:	e7cc      	b.n	8019128 <_malloc_r+0x2c>
 801918e:	1cc4      	adds	r4, r0, #3
 8019190:	f024 0403 	bic.w	r4, r4, #3
 8019194:	42a0      	cmp	r0, r4
 8019196:	d005      	beq.n	80191a4 <_malloc_r+0xa8>
 8019198:	1a21      	subs	r1, r4, r0
 801919a:	4630      	mov	r0, r6
 801919c:	f000 fe00 	bl	8019da0 <_sbrk_r>
 80191a0:	3001      	adds	r0, #1
 80191a2:	d0cf      	beq.n	8019144 <_malloc_r+0x48>
 80191a4:	6025      	str	r5, [r4, #0]
 80191a6:	e7db      	b.n	8019160 <_malloc_r+0x64>
 80191a8:	2000fed0 	.word	0x2000fed0
 80191ac:	2000fed4 	.word	0x2000fed4

080191b0 <__ssputs_r>:
 80191b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191b4:	688e      	ldr	r6, [r1, #8]
 80191b6:	429e      	cmp	r6, r3
 80191b8:	4682      	mov	sl, r0
 80191ba:	460c      	mov	r4, r1
 80191bc:	4690      	mov	r8, r2
 80191be:	4699      	mov	r9, r3
 80191c0:	d837      	bhi.n	8019232 <__ssputs_r+0x82>
 80191c2:	898a      	ldrh	r2, [r1, #12]
 80191c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80191c8:	d031      	beq.n	801922e <__ssputs_r+0x7e>
 80191ca:	6825      	ldr	r5, [r4, #0]
 80191cc:	6909      	ldr	r1, [r1, #16]
 80191ce:	1a6f      	subs	r7, r5, r1
 80191d0:	6965      	ldr	r5, [r4, #20]
 80191d2:	2302      	movs	r3, #2
 80191d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80191d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80191dc:	f109 0301 	add.w	r3, r9, #1
 80191e0:	443b      	add	r3, r7
 80191e2:	429d      	cmp	r5, r3
 80191e4:	bf38      	it	cc
 80191e6:	461d      	movcc	r5, r3
 80191e8:	0553      	lsls	r3, r2, #21
 80191ea:	d530      	bpl.n	801924e <__ssputs_r+0x9e>
 80191ec:	4629      	mov	r1, r5
 80191ee:	f7ff ff85 	bl	80190fc <_malloc_r>
 80191f2:	4606      	mov	r6, r0
 80191f4:	b950      	cbnz	r0, 801920c <__ssputs_r+0x5c>
 80191f6:	230c      	movs	r3, #12
 80191f8:	f8ca 3000 	str.w	r3, [sl]
 80191fc:	89a3      	ldrh	r3, [r4, #12]
 80191fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019202:	81a3      	strh	r3, [r4, #12]
 8019204:	f04f 30ff 	mov.w	r0, #4294967295
 8019208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801920c:	463a      	mov	r2, r7
 801920e:	6921      	ldr	r1, [r4, #16]
 8019210:	f7fc f834 	bl	801527c <memcpy>
 8019214:	89a3      	ldrh	r3, [r4, #12]
 8019216:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801921a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801921e:	81a3      	strh	r3, [r4, #12]
 8019220:	6126      	str	r6, [r4, #16]
 8019222:	6165      	str	r5, [r4, #20]
 8019224:	443e      	add	r6, r7
 8019226:	1bed      	subs	r5, r5, r7
 8019228:	6026      	str	r6, [r4, #0]
 801922a:	60a5      	str	r5, [r4, #8]
 801922c:	464e      	mov	r6, r9
 801922e:	454e      	cmp	r6, r9
 8019230:	d900      	bls.n	8019234 <__ssputs_r+0x84>
 8019232:	464e      	mov	r6, r9
 8019234:	4632      	mov	r2, r6
 8019236:	4641      	mov	r1, r8
 8019238:	6820      	ldr	r0, [r4, #0]
 801923a:	f000 ffe5 	bl	801a208 <memmove>
 801923e:	68a3      	ldr	r3, [r4, #8]
 8019240:	1b9b      	subs	r3, r3, r6
 8019242:	60a3      	str	r3, [r4, #8]
 8019244:	6823      	ldr	r3, [r4, #0]
 8019246:	441e      	add	r6, r3
 8019248:	6026      	str	r6, [r4, #0]
 801924a:	2000      	movs	r0, #0
 801924c:	e7dc      	b.n	8019208 <__ssputs_r+0x58>
 801924e:	462a      	mov	r2, r5
 8019250:	f000 fff5 	bl	801a23e <_realloc_r>
 8019254:	4606      	mov	r6, r0
 8019256:	2800      	cmp	r0, #0
 8019258:	d1e2      	bne.n	8019220 <__ssputs_r+0x70>
 801925a:	6921      	ldr	r1, [r4, #16]
 801925c:	4650      	mov	r0, sl
 801925e:	f7ff feff 	bl	8019060 <_free_r>
 8019262:	e7c8      	b.n	80191f6 <__ssputs_r+0x46>

08019264 <_svfiprintf_r>:
 8019264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019268:	461d      	mov	r5, r3
 801926a:	898b      	ldrh	r3, [r1, #12]
 801926c:	061f      	lsls	r7, r3, #24
 801926e:	b09d      	sub	sp, #116	; 0x74
 8019270:	4680      	mov	r8, r0
 8019272:	460c      	mov	r4, r1
 8019274:	4616      	mov	r6, r2
 8019276:	d50f      	bpl.n	8019298 <_svfiprintf_r+0x34>
 8019278:	690b      	ldr	r3, [r1, #16]
 801927a:	b96b      	cbnz	r3, 8019298 <_svfiprintf_r+0x34>
 801927c:	2140      	movs	r1, #64	; 0x40
 801927e:	f7ff ff3d 	bl	80190fc <_malloc_r>
 8019282:	6020      	str	r0, [r4, #0]
 8019284:	6120      	str	r0, [r4, #16]
 8019286:	b928      	cbnz	r0, 8019294 <_svfiprintf_r+0x30>
 8019288:	230c      	movs	r3, #12
 801928a:	f8c8 3000 	str.w	r3, [r8]
 801928e:	f04f 30ff 	mov.w	r0, #4294967295
 8019292:	e0c8      	b.n	8019426 <_svfiprintf_r+0x1c2>
 8019294:	2340      	movs	r3, #64	; 0x40
 8019296:	6163      	str	r3, [r4, #20]
 8019298:	2300      	movs	r3, #0
 801929a:	9309      	str	r3, [sp, #36]	; 0x24
 801929c:	2320      	movs	r3, #32
 801929e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80192a2:	2330      	movs	r3, #48	; 0x30
 80192a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80192a8:	9503      	str	r5, [sp, #12]
 80192aa:	f04f 0b01 	mov.w	fp, #1
 80192ae:	4637      	mov	r7, r6
 80192b0:	463d      	mov	r5, r7
 80192b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80192b6:	b10b      	cbz	r3, 80192bc <_svfiprintf_r+0x58>
 80192b8:	2b25      	cmp	r3, #37	; 0x25
 80192ba:	d13e      	bne.n	801933a <_svfiprintf_r+0xd6>
 80192bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80192c0:	d00b      	beq.n	80192da <_svfiprintf_r+0x76>
 80192c2:	4653      	mov	r3, sl
 80192c4:	4632      	mov	r2, r6
 80192c6:	4621      	mov	r1, r4
 80192c8:	4640      	mov	r0, r8
 80192ca:	f7ff ff71 	bl	80191b0 <__ssputs_r>
 80192ce:	3001      	adds	r0, #1
 80192d0:	f000 80a4 	beq.w	801941c <_svfiprintf_r+0x1b8>
 80192d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192d6:	4453      	add	r3, sl
 80192d8:	9309      	str	r3, [sp, #36]	; 0x24
 80192da:	783b      	ldrb	r3, [r7, #0]
 80192dc:	2b00      	cmp	r3, #0
 80192de:	f000 809d 	beq.w	801941c <_svfiprintf_r+0x1b8>
 80192e2:	2300      	movs	r3, #0
 80192e4:	f04f 32ff 	mov.w	r2, #4294967295
 80192e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80192ec:	9304      	str	r3, [sp, #16]
 80192ee:	9307      	str	r3, [sp, #28]
 80192f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80192f4:	931a      	str	r3, [sp, #104]	; 0x68
 80192f6:	462f      	mov	r7, r5
 80192f8:	2205      	movs	r2, #5
 80192fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80192fe:	4850      	ldr	r0, [pc, #320]	; (8019440 <_svfiprintf_r+0x1dc>)
 8019300:	f7ee fea6 	bl	8008050 <memchr>
 8019304:	9b04      	ldr	r3, [sp, #16]
 8019306:	b9d0      	cbnz	r0, 801933e <_svfiprintf_r+0xda>
 8019308:	06d9      	lsls	r1, r3, #27
 801930a:	bf44      	itt	mi
 801930c:	2220      	movmi	r2, #32
 801930e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019312:	071a      	lsls	r2, r3, #28
 8019314:	bf44      	itt	mi
 8019316:	222b      	movmi	r2, #43	; 0x2b
 8019318:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801931c:	782a      	ldrb	r2, [r5, #0]
 801931e:	2a2a      	cmp	r2, #42	; 0x2a
 8019320:	d015      	beq.n	801934e <_svfiprintf_r+0xea>
 8019322:	9a07      	ldr	r2, [sp, #28]
 8019324:	462f      	mov	r7, r5
 8019326:	2000      	movs	r0, #0
 8019328:	250a      	movs	r5, #10
 801932a:	4639      	mov	r1, r7
 801932c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019330:	3b30      	subs	r3, #48	; 0x30
 8019332:	2b09      	cmp	r3, #9
 8019334:	d94d      	bls.n	80193d2 <_svfiprintf_r+0x16e>
 8019336:	b1b8      	cbz	r0, 8019368 <_svfiprintf_r+0x104>
 8019338:	e00f      	b.n	801935a <_svfiprintf_r+0xf6>
 801933a:	462f      	mov	r7, r5
 801933c:	e7b8      	b.n	80192b0 <_svfiprintf_r+0x4c>
 801933e:	4a40      	ldr	r2, [pc, #256]	; (8019440 <_svfiprintf_r+0x1dc>)
 8019340:	1a80      	subs	r0, r0, r2
 8019342:	fa0b f000 	lsl.w	r0, fp, r0
 8019346:	4318      	orrs	r0, r3
 8019348:	9004      	str	r0, [sp, #16]
 801934a:	463d      	mov	r5, r7
 801934c:	e7d3      	b.n	80192f6 <_svfiprintf_r+0x92>
 801934e:	9a03      	ldr	r2, [sp, #12]
 8019350:	1d11      	adds	r1, r2, #4
 8019352:	6812      	ldr	r2, [r2, #0]
 8019354:	9103      	str	r1, [sp, #12]
 8019356:	2a00      	cmp	r2, #0
 8019358:	db01      	blt.n	801935e <_svfiprintf_r+0xfa>
 801935a:	9207      	str	r2, [sp, #28]
 801935c:	e004      	b.n	8019368 <_svfiprintf_r+0x104>
 801935e:	4252      	negs	r2, r2
 8019360:	f043 0302 	orr.w	r3, r3, #2
 8019364:	9207      	str	r2, [sp, #28]
 8019366:	9304      	str	r3, [sp, #16]
 8019368:	783b      	ldrb	r3, [r7, #0]
 801936a:	2b2e      	cmp	r3, #46	; 0x2e
 801936c:	d10c      	bne.n	8019388 <_svfiprintf_r+0x124>
 801936e:	787b      	ldrb	r3, [r7, #1]
 8019370:	2b2a      	cmp	r3, #42	; 0x2a
 8019372:	d133      	bne.n	80193dc <_svfiprintf_r+0x178>
 8019374:	9b03      	ldr	r3, [sp, #12]
 8019376:	1d1a      	adds	r2, r3, #4
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	9203      	str	r2, [sp, #12]
 801937c:	2b00      	cmp	r3, #0
 801937e:	bfb8      	it	lt
 8019380:	f04f 33ff 	movlt.w	r3, #4294967295
 8019384:	3702      	adds	r7, #2
 8019386:	9305      	str	r3, [sp, #20]
 8019388:	4d2e      	ldr	r5, [pc, #184]	; (8019444 <_svfiprintf_r+0x1e0>)
 801938a:	7839      	ldrb	r1, [r7, #0]
 801938c:	2203      	movs	r2, #3
 801938e:	4628      	mov	r0, r5
 8019390:	f7ee fe5e 	bl	8008050 <memchr>
 8019394:	b138      	cbz	r0, 80193a6 <_svfiprintf_r+0x142>
 8019396:	2340      	movs	r3, #64	; 0x40
 8019398:	1b40      	subs	r0, r0, r5
 801939a:	fa03 f000 	lsl.w	r0, r3, r0
 801939e:	9b04      	ldr	r3, [sp, #16]
 80193a0:	4303      	orrs	r3, r0
 80193a2:	3701      	adds	r7, #1
 80193a4:	9304      	str	r3, [sp, #16]
 80193a6:	7839      	ldrb	r1, [r7, #0]
 80193a8:	4827      	ldr	r0, [pc, #156]	; (8019448 <_svfiprintf_r+0x1e4>)
 80193aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80193ae:	2206      	movs	r2, #6
 80193b0:	1c7e      	adds	r6, r7, #1
 80193b2:	f7ee fe4d 	bl	8008050 <memchr>
 80193b6:	2800      	cmp	r0, #0
 80193b8:	d038      	beq.n	801942c <_svfiprintf_r+0x1c8>
 80193ba:	4b24      	ldr	r3, [pc, #144]	; (801944c <_svfiprintf_r+0x1e8>)
 80193bc:	bb13      	cbnz	r3, 8019404 <_svfiprintf_r+0x1a0>
 80193be:	9b03      	ldr	r3, [sp, #12]
 80193c0:	3307      	adds	r3, #7
 80193c2:	f023 0307 	bic.w	r3, r3, #7
 80193c6:	3308      	adds	r3, #8
 80193c8:	9303      	str	r3, [sp, #12]
 80193ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193cc:	444b      	add	r3, r9
 80193ce:	9309      	str	r3, [sp, #36]	; 0x24
 80193d0:	e76d      	b.n	80192ae <_svfiprintf_r+0x4a>
 80193d2:	fb05 3202 	mla	r2, r5, r2, r3
 80193d6:	2001      	movs	r0, #1
 80193d8:	460f      	mov	r7, r1
 80193da:	e7a6      	b.n	801932a <_svfiprintf_r+0xc6>
 80193dc:	2300      	movs	r3, #0
 80193de:	3701      	adds	r7, #1
 80193e0:	9305      	str	r3, [sp, #20]
 80193e2:	4619      	mov	r1, r3
 80193e4:	250a      	movs	r5, #10
 80193e6:	4638      	mov	r0, r7
 80193e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80193ec:	3a30      	subs	r2, #48	; 0x30
 80193ee:	2a09      	cmp	r2, #9
 80193f0:	d903      	bls.n	80193fa <_svfiprintf_r+0x196>
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d0c8      	beq.n	8019388 <_svfiprintf_r+0x124>
 80193f6:	9105      	str	r1, [sp, #20]
 80193f8:	e7c6      	b.n	8019388 <_svfiprintf_r+0x124>
 80193fa:	fb05 2101 	mla	r1, r5, r1, r2
 80193fe:	2301      	movs	r3, #1
 8019400:	4607      	mov	r7, r0
 8019402:	e7f0      	b.n	80193e6 <_svfiprintf_r+0x182>
 8019404:	ab03      	add	r3, sp, #12
 8019406:	9300      	str	r3, [sp, #0]
 8019408:	4622      	mov	r2, r4
 801940a:	4b11      	ldr	r3, [pc, #68]	; (8019450 <_svfiprintf_r+0x1ec>)
 801940c:	a904      	add	r1, sp, #16
 801940e:	4640      	mov	r0, r8
 8019410:	f7fb ffdc 	bl	80153cc <_printf_float>
 8019414:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019418:	4681      	mov	r9, r0
 801941a:	d1d6      	bne.n	80193ca <_svfiprintf_r+0x166>
 801941c:	89a3      	ldrh	r3, [r4, #12]
 801941e:	065b      	lsls	r3, r3, #25
 8019420:	f53f af35 	bmi.w	801928e <_svfiprintf_r+0x2a>
 8019424:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019426:	b01d      	add	sp, #116	; 0x74
 8019428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801942c:	ab03      	add	r3, sp, #12
 801942e:	9300      	str	r3, [sp, #0]
 8019430:	4622      	mov	r2, r4
 8019432:	4b07      	ldr	r3, [pc, #28]	; (8019450 <_svfiprintf_r+0x1ec>)
 8019434:	a904      	add	r1, sp, #16
 8019436:	4640      	mov	r0, r8
 8019438:	f7fc fa7e 	bl	8015938 <_printf_i>
 801943c:	e7ea      	b.n	8019414 <_svfiprintf_r+0x1b0>
 801943e:	bf00      	nop
 8019440:	0801a7f4 	.word	0x0801a7f4
 8019444:	0801a7fa 	.word	0x0801a7fa
 8019448:	0801a7fe 	.word	0x0801a7fe
 801944c:	080153cd 	.word	0x080153cd
 8019450:	080191b1 	.word	0x080191b1

08019454 <__sfputc_r>:
 8019454:	6893      	ldr	r3, [r2, #8]
 8019456:	3b01      	subs	r3, #1
 8019458:	2b00      	cmp	r3, #0
 801945a:	b410      	push	{r4}
 801945c:	6093      	str	r3, [r2, #8]
 801945e:	da08      	bge.n	8019472 <__sfputc_r+0x1e>
 8019460:	6994      	ldr	r4, [r2, #24]
 8019462:	42a3      	cmp	r3, r4
 8019464:	db01      	blt.n	801946a <__sfputc_r+0x16>
 8019466:	290a      	cmp	r1, #10
 8019468:	d103      	bne.n	8019472 <__sfputc_r+0x1e>
 801946a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801946e:	f7fd bd75 	b.w	8016f5c <__swbuf_r>
 8019472:	6813      	ldr	r3, [r2, #0]
 8019474:	1c58      	adds	r0, r3, #1
 8019476:	6010      	str	r0, [r2, #0]
 8019478:	7019      	strb	r1, [r3, #0]
 801947a:	4608      	mov	r0, r1
 801947c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019480:	4770      	bx	lr

08019482 <__sfputs_r>:
 8019482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019484:	4606      	mov	r6, r0
 8019486:	460f      	mov	r7, r1
 8019488:	4614      	mov	r4, r2
 801948a:	18d5      	adds	r5, r2, r3
 801948c:	42ac      	cmp	r4, r5
 801948e:	d101      	bne.n	8019494 <__sfputs_r+0x12>
 8019490:	2000      	movs	r0, #0
 8019492:	e007      	b.n	80194a4 <__sfputs_r+0x22>
 8019494:	463a      	mov	r2, r7
 8019496:	f814 1b01 	ldrb.w	r1, [r4], #1
 801949a:	4630      	mov	r0, r6
 801949c:	f7ff ffda 	bl	8019454 <__sfputc_r>
 80194a0:	1c43      	adds	r3, r0, #1
 80194a2:	d1f3      	bne.n	801948c <__sfputs_r+0xa>
 80194a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080194a8 <_vfiprintf_r>:
 80194a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194ac:	460c      	mov	r4, r1
 80194ae:	b09d      	sub	sp, #116	; 0x74
 80194b0:	4617      	mov	r7, r2
 80194b2:	461d      	mov	r5, r3
 80194b4:	4606      	mov	r6, r0
 80194b6:	b118      	cbz	r0, 80194c0 <_vfiprintf_r+0x18>
 80194b8:	6983      	ldr	r3, [r0, #24]
 80194ba:	b90b      	cbnz	r3, 80194c0 <_vfiprintf_r+0x18>
 80194bc:	f7fe fd56 	bl	8017f6c <__sinit>
 80194c0:	4b7c      	ldr	r3, [pc, #496]	; (80196b4 <_vfiprintf_r+0x20c>)
 80194c2:	429c      	cmp	r4, r3
 80194c4:	d158      	bne.n	8019578 <_vfiprintf_r+0xd0>
 80194c6:	6874      	ldr	r4, [r6, #4]
 80194c8:	89a3      	ldrh	r3, [r4, #12]
 80194ca:	0718      	lsls	r0, r3, #28
 80194cc:	d55e      	bpl.n	801958c <_vfiprintf_r+0xe4>
 80194ce:	6923      	ldr	r3, [r4, #16]
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d05b      	beq.n	801958c <_vfiprintf_r+0xe4>
 80194d4:	2300      	movs	r3, #0
 80194d6:	9309      	str	r3, [sp, #36]	; 0x24
 80194d8:	2320      	movs	r3, #32
 80194da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80194de:	2330      	movs	r3, #48	; 0x30
 80194e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80194e4:	9503      	str	r5, [sp, #12]
 80194e6:	f04f 0b01 	mov.w	fp, #1
 80194ea:	46b8      	mov	r8, r7
 80194ec:	4645      	mov	r5, r8
 80194ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80194f2:	b10b      	cbz	r3, 80194f8 <_vfiprintf_r+0x50>
 80194f4:	2b25      	cmp	r3, #37	; 0x25
 80194f6:	d154      	bne.n	80195a2 <_vfiprintf_r+0xfa>
 80194f8:	ebb8 0a07 	subs.w	sl, r8, r7
 80194fc:	d00b      	beq.n	8019516 <_vfiprintf_r+0x6e>
 80194fe:	4653      	mov	r3, sl
 8019500:	463a      	mov	r2, r7
 8019502:	4621      	mov	r1, r4
 8019504:	4630      	mov	r0, r6
 8019506:	f7ff ffbc 	bl	8019482 <__sfputs_r>
 801950a:	3001      	adds	r0, #1
 801950c:	f000 80c2 	beq.w	8019694 <_vfiprintf_r+0x1ec>
 8019510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019512:	4453      	add	r3, sl
 8019514:	9309      	str	r3, [sp, #36]	; 0x24
 8019516:	f898 3000 	ldrb.w	r3, [r8]
 801951a:	2b00      	cmp	r3, #0
 801951c:	f000 80ba 	beq.w	8019694 <_vfiprintf_r+0x1ec>
 8019520:	2300      	movs	r3, #0
 8019522:	f04f 32ff 	mov.w	r2, #4294967295
 8019526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801952a:	9304      	str	r3, [sp, #16]
 801952c:	9307      	str	r3, [sp, #28]
 801952e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019532:	931a      	str	r3, [sp, #104]	; 0x68
 8019534:	46a8      	mov	r8, r5
 8019536:	2205      	movs	r2, #5
 8019538:	f818 1b01 	ldrb.w	r1, [r8], #1
 801953c:	485e      	ldr	r0, [pc, #376]	; (80196b8 <_vfiprintf_r+0x210>)
 801953e:	f7ee fd87 	bl	8008050 <memchr>
 8019542:	9b04      	ldr	r3, [sp, #16]
 8019544:	bb78      	cbnz	r0, 80195a6 <_vfiprintf_r+0xfe>
 8019546:	06d9      	lsls	r1, r3, #27
 8019548:	bf44      	itt	mi
 801954a:	2220      	movmi	r2, #32
 801954c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019550:	071a      	lsls	r2, r3, #28
 8019552:	bf44      	itt	mi
 8019554:	222b      	movmi	r2, #43	; 0x2b
 8019556:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801955a:	782a      	ldrb	r2, [r5, #0]
 801955c:	2a2a      	cmp	r2, #42	; 0x2a
 801955e:	d02a      	beq.n	80195b6 <_vfiprintf_r+0x10e>
 8019560:	9a07      	ldr	r2, [sp, #28]
 8019562:	46a8      	mov	r8, r5
 8019564:	2000      	movs	r0, #0
 8019566:	250a      	movs	r5, #10
 8019568:	4641      	mov	r1, r8
 801956a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801956e:	3b30      	subs	r3, #48	; 0x30
 8019570:	2b09      	cmp	r3, #9
 8019572:	d969      	bls.n	8019648 <_vfiprintf_r+0x1a0>
 8019574:	b360      	cbz	r0, 80195d0 <_vfiprintf_r+0x128>
 8019576:	e024      	b.n	80195c2 <_vfiprintf_r+0x11a>
 8019578:	4b50      	ldr	r3, [pc, #320]	; (80196bc <_vfiprintf_r+0x214>)
 801957a:	429c      	cmp	r4, r3
 801957c:	d101      	bne.n	8019582 <_vfiprintf_r+0xda>
 801957e:	68b4      	ldr	r4, [r6, #8]
 8019580:	e7a2      	b.n	80194c8 <_vfiprintf_r+0x20>
 8019582:	4b4f      	ldr	r3, [pc, #316]	; (80196c0 <_vfiprintf_r+0x218>)
 8019584:	429c      	cmp	r4, r3
 8019586:	bf08      	it	eq
 8019588:	68f4      	ldreq	r4, [r6, #12]
 801958a:	e79d      	b.n	80194c8 <_vfiprintf_r+0x20>
 801958c:	4621      	mov	r1, r4
 801958e:	4630      	mov	r0, r6
 8019590:	f7fd fd36 	bl	8017000 <__swsetup_r>
 8019594:	2800      	cmp	r0, #0
 8019596:	d09d      	beq.n	80194d4 <_vfiprintf_r+0x2c>
 8019598:	f04f 30ff 	mov.w	r0, #4294967295
 801959c:	b01d      	add	sp, #116	; 0x74
 801959e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195a2:	46a8      	mov	r8, r5
 80195a4:	e7a2      	b.n	80194ec <_vfiprintf_r+0x44>
 80195a6:	4a44      	ldr	r2, [pc, #272]	; (80196b8 <_vfiprintf_r+0x210>)
 80195a8:	1a80      	subs	r0, r0, r2
 80195aa:	fa0b f000 	lsl.w	r0, fp, r0
 80195ae:	4318      	orrs	r0, r3
 80195b0:	9004      	str	r0, [sp, #16]
 80195b2:	4645      	mov	r5, r8
 80195b4:	e7be      	b.n	8019534 <_vfiprintf_r+0x8c>
 80195b6:	9a03      	ldr	r2, [sp, #12]
 80195b8:	1d11      	adds	r1, r2, #4
 80195ba:	6812      	ldr	r2, [r2, #0]
 80195bc:	9103      	str	r1, [sp, #12]
 80195be:	2a00      	cmp	r2, #0
 80195c0:	db01      	blt.n	80195c6 <_vfiprintf_r+0x11e>
 80195c2:	9207      	str	r2, [sp, #28]
 80195c4:	e004      	b.n	80195d0 <_vfiprintf_r+0x128>
 80195c6:	4252      	negs	r2, r2
 80195c8:	f043 0302 	orr.w	r3, r3, #2
 80195cc:	9207      	str	r2, [sp, #28]
 80195ce:	9304      	str	r3, [sp, #16]
 80195d0:	f898 3000 	ldrb.w	r3, [r8]
 80195d4:	2b2e      	cmp	r3, #46	; 0x2e
 80195d6:	d10e      	bne.n	80195f6 <_vfiprintf_r+0x14e>
 80195d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80195dc:	2b2a      	cmp	r3, #42	; 0x2a
 80195de:	d138      	bne.n	8019652 <_vfiprintf_r+0x1aa>
 80195e0:	9b03      	ldr	r3, [sp, #12]
 80195e2:	1d1a      	adds	r2, r3, #4
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	9203      	str	r2, [sp, #12]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	bfb8      	it	lt
 80195ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80195f0:	f108 0802 	add.w	r8, r8, #2
 80195f4:	9305      	str	r3, [sp, #20]
 80195f6:	4d33      	ldr	r5, [pc, #204]	; (80196c4 <_vfiprintf_r+0x21c>)
 80195f8:	f898 1000 	ldrb.w	r1, [r8]
 80195fc:	2203      	movs	r2, #3
 80195fe:	4628      	mov	r0, r5
 8019600:	f7ee fd26 	bl	8008050 <memchr>
 8019604:	b140      	cbz	r0, 8019618 <_vfiprintf_r+0x170>
 8019606:	2340      	movs	r3, #64	; 0x40
 8019608:	1b40      	subs	r0, r0, r5
 801960a:	fa03 f000 	lsl.w	r0, r3, r0
 801960e:	9b04      	ldr	r3, [sp, #16]
 8019610:	4303      	orrs	r3, r0
 8019612:	f108 0801 	add.w	r8, r8, #1
 8019616:	9304      	str	r3, [sp, #16]
 8019618:	f898 1000 	ldrb.w	r1, [r8]
 801961c:	482a      	ldr	r0, [pc, #168]	; (80196c8 <_vfiprintf_r+0x220>)
 801961e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019622:	2206      	movs	r2, #6
 8019624:	f108 0701 	add.w	r7, r8, #1
 8019628:	f7ee fd12 	bl	8008050 <memchr>
 801962c:	2800      	cmp	r0, #0
 801962e:	d037      	beq.n	80196a0 <_vfiprintf_r+0x1f8>
 8019630:	4b26      	ldr	r3, [pc, #152]	; (80196cc <_vfiprintf_r+0x224>)
 8019632:	bb1b      	cbnz	r3, 801967c <_vfiprintf_r+0x1d4>
 8019634:	9b03      	ldr	r3, [sp, #12]
 8019636:	3307      	adds	r3, #7
 8019638:	f023 0307 	bic.w	r3, r3, #7
 801963c:	3308      	adds	r3, #8
 801963e:	9303      	str	r3, [sp, #12]
 8019640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019642:	444b      	add	r3, r9
 8019644:	9309      	str	r3, [sp, #36]	; 0x24
 8019646:	e750      	b.n	80194ea <_vfiprintf_r+0x42>
 8019648:	fb05 3202 	mla	r2, r5, r2, r3
 801964c:	2001      	movs	r0, #1
 801964e:	4688      	mov	r8, r1
 8019650:	e78a      	b.n	8019568 <_vfiprintf_r+0xc0>
 8019652:	2300      	movs	r3, #0
 8019654:	f108 0801 	add.w	r8, r8, #1
 8019658:	9305      	str	r3, [sp, #20]
 801965a:	4619      	mov	r1, r3
 801965c:	250a      	movs	r5, #10
 801965e:	4640      	mov	r0, r8
 8019660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019664:	3a30      	subs	r2, #48	; 0x30
 8019666:	2a09      	cmp	r2, #9
 8019668:	d903      	bls.n	8019672 <_vfiprintf_r+0x1ca>
 801966a:	2b00      	cmp	r3, #0
 801966c:	d0c3      	beq.n	80195f6 <_vfiprintf_r+0x14e>
 801966e:	9105      	str	r1, [sp, #20]
 8019670:	e7c1      	b.n	80195f6 <_vfiprintf_r+0x14e>
 8019672:	fb05 2101 	mla	r1, r5, r1, r2
 8019676:	2301      	movs	r3, #1
 8019678:	4680      	mov	r8, r0
 801967a:	e7f0      	b.n	801965e <_vfiprintf_r+0x1b6>
 801967c:	ab03      	add	r3, sp, #12
 801967e:	9300      	str	r3, [sp, #0]
 8019680:	4622      	mov	r2, r4
 8019682:	4b13      	ldr	r3, [pc, #76]	; (80196d0 <_vfiprintf_r+0x228>)
 8019684:	a904      	add	r1, sp, #16
 8019686:	4630      	mov	r0, r6
 8019688:	f7fb fea0 	bl	80153cc <_printf_float>
 801968c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019690:	4681      	mov	r9, r0
 8019692:	d1d5      	bne.n	8019640 <_vfiprintf_r+0x198>
 8019694:	89a3      	ldrh	r3, [r4, #12]
 8019696:	065b      	lsls	r3, r3, #25
 8019698:	f53f af7e 	bmi.w	8019598 <_vfiprintf_r+0xf0>
 801969c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801969e:	e77d      	b.n	801959c <_vfiprintf_r+0xf4>
 80196a0:	ab03      	add	r3, sp, #12
 80196a2:	9300      	str	r3, [sp, #0]
 80196a4:	4622      	mov	r2, r4
 80196a6:	4b0a      	ldr	r3, [pc, #40]	; (80196d0 <_vfiprintf_r+0x228>)
 80196a8:	a904      	add	r1, sp, #16
 80196aa:	4630      	mov	r0, r6
 80196ac:	f7fc f944 	bl	8015938 <_printf_i>
 80196b0:	e7ec      	b.n	801968c <_vfiprintf_r+0x1e4>
 80196b2:	bf00      	nop
 80196b4:	0801a6a8 	.word	0x0801a6a8
 80196b8:	0801a7f4 	.word	0x0801a7f4
 80196bc:	0801a6c8 	.word	0x0801a6c8
 80196c0:	0801a688 	.word	0x0801a688
 80196c4:	0801a7fa 	.word	0x0801a7fa
 80196c8:	0801a7fe 	.word	0x0801a7fe
 80196cc:	080153cd 	.word	0x080153cd
 80196d0:	08019483 	.word	0x08019483

080196d4 <__svfiscanf_r>:
 80196d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196d8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80196dc:	460c      	mov	r4, r1
 80196de:	2100      	movs	r1, #0
 80196e0:	9144      	str	r1, [sp, #272]	; 0x110
 80196e2:	9145      	str	r1, [sp, #276]	; 0x114
 80196e4:	499f      	ldr	r1, [pc, #636]	; (8019964 <__svfiscanf_r+0x290>)
 80196e6:	91a0      	str	r1, [sp, #640]	; 0x280
 80196e8:	f10d 0804 	add.w	r8, sp, #4
 80196ec:	499e      	ldr	r1, [pc, #632]	; (8019968 <__svfiscanf_r+0x294>)
 80196ee:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801996c <__svfiscanf_r+0x298>
 80196f2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80196f6:	4606      	mov	r6, r0
 80196f8:	4692      	mov	sl, r2
 80196fa:	91a1      	str	r1, [sp, #644]	; 0x284
 80196fc:	9300      	str	r3, [sp, #0]
 80196fe:	270a      	movs	r7, #10
 8019700:	f89a 3000 	ldrb.w	r3, [sl]
 8019704:	2b00      	cmp	r3, #0
 8019706:	f000 812a 	beq.w	801995e <__svfiscanf_r+0x28a>
 801970a:	4655      	mov	r5, sl
 801970c:	f7fe fffe 	bl	801870c <__locale_ctype_ptr>
 8019710:	f815 bb01 	ldrb.w	fp, [r5], #1
 8019714:	4458      	add	r0, fp
 8019716:	7843      	ldrb	r3, [r0, #1]
 8019718:	f013 0308 	ands.w	r3, r3, #8
 801971c:	d01c      	beq.n	8019758 <__svfiscanf_r+0x84>
 801971e:	6863      	ldr	r3, [r4, #4]
 8019720:	2b00      	cmp	r3, #0
 8019722:	dd12      	ble.n	801974a <__svfiscanf_r+0x76>
 8019724:	f7fe fff2 	bl	801870c <__locale_ctype_ptr>
 8019728:	6823      	ldr	r3, [r4, #0]
 801972a:	781a      	ldrb	r2, [r3, #0]
 801972c:	4410      	add	r0, r2
 801972e:	7842      	ldrb	r2, [r0, #1]
 8019730:	0712      	lsls	r2, r2, #28
 8019732:	d401      	bmi.n	8019738 <__svfiscanf_r+0x64>
 8019734:	46aa      	mov	sl, r5
 8019736:	e7e3      	b.n	8019700 <__svfiscanf_r+0x2c>
 8019738:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801973a:	3201      	adds	r2, #1
 801973c:	9245      	str	r2, [sp, #276]	; 0x114
 801973e:	6862      	ldr	r2, [r4, #4]
 8019740:	3301      	adds	r3, #1
 8019742:	3a01      	subs	r2, #1
 8019744:	6062      	str	r2, [r4, #4]
 8019746:	6023      	str	r3, [r4, #0]
 8019748:	e7e9      	b.n	801971e <__svfiscanf_r+0x4a>
 801974a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801974c:	4621      	mov	r1, r4
 801974e:	4630      	mov	r0, r6
 8019750:	4798      	blx	r3
 8019752:	2800      	cmp	r0, #0
 8019754:	d0e6      	beq.n	8019724 <__svfiscanf_r+0x50>
 8019756:	e7ed      	b.n	8019734 <__svfiscanf_r+0x60>
 8019758:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801975c:	f040 8082 	bne.w	8019864 <__svfiscanf_r+0x190>
 8019760:	9343      	str	r3, [sp, #268]	; 0x10c
 8019762:	9341      	str	r3, [sp, #260]	; 0x104
 8019764:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8019768:	2b2a      	cmp	r3, #42	; 0x2a
 801976a:	d103      	bne.n	8019774 <__svfiscanf_r+0xa0>
 801976c:	2310      	movs	r3, #16
 801976e:	9341      	str	r3, [sp, #260]	; 0x104
 8019770:	f10a 0502 	add.w	r5, sl, #2
 8019774:	46aa      	mov	sl, r5
 8019776:	f815 1b01 	ldrb.w	r1, [r5], #1
 801977a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801977e:	2a09      	cmp	r2, #9
 8019780:	d922      	bls.n	80197c8 <__svfiscanf_r+0xf4>
 8019782:	2203      	movs	r2, #3
 8019784:	4879      	ldr	r0, [pc, #484]	; (801996c <__svfiscanf_r+0x298>)
 8019786:	f7ee fc63 	bl	8008050 <memchr>
 801978a:	b138      	cbz	r0, 801979c <__svfiscanf_r+0xc8>
 801978c:	eba0 0309 	sub.w	r3, r0, r9
 8019790:	2001      	movs	r0, #1
 8019792:	4098      	lsls	r0, r3
 8019794:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019796:	4318      	orrs	r0, r3
 8019798:	9041      	str	r0, [sp, #260]	; 0x104
 801979a:	46aa      	mov	sl, r5
 801979c:	f89a 3000 	ldrb.w	r3, [sl]
 80197a0:	2b67      	cmp	r3, #103	; 0x67
 80197a2:	f10a 0501 	add.w	r5, sl, #1
 80197a6:	d82b      	bhi.n	8019800 <__svfiscanf_r+0x12c>
 80197a8:	2b65      	cmp	r3, #101	; 0x65
 80197aa:	f080 809f 	bcs.w	80198ec <__svfiscanf_r+0x218>
 80197ae:	2b47      	cmp	r3, #71	; 0x47
 80197b0:	d810      	bhi.n	80197d4 <__svfiscanf_r+0x100>
 80197b2:	2b45      	cmp	r3, #69	; 0x45
 80197b4:	f080 809a 	bcs.w	80198ec <__svfiscanf_r+0x218>
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d06c      	beq.n	8019896 <__svfiscanf_r+0x1c2>
 80197bc:	2b25      	cmp	r3, #37	; 0x25
 80197be:	d051      	beq.n	8019864 <__svfiscanf_r+0x190>
 80197c0:	2303      	movs	r3, #3
 80197c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80197c4:	9742      	str	r7, [sp, #264]	; 0x108
 80197c6:	e027      	b.n	8019818 <__svfiscanf_r+0x144>
 80197c8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80197ca:	fb07 1303 	mla	r3, r7, r3, r1
 80197ce:	3b30      	subs	r3, #48	; 0x30
 80197d0:	9343      	str	r3, [sp, #268]	; 0x10c
 80197d2:	e7cf      	b.n	8019774 <__svfiscanf_r+0xa0>
 80197d4:	2b5b      	cmp	r3, #91	; 0x5b
 80197d6:	d06a      	beq.n	80198ae <__svfiscanf_r+0x1da>
 80197d8:	d80c      	bhi.n	80197f4 <__svfiscanf_r+0x120>
 80197da:	2b58      	cmp	r3, #88	; 0x58
 80197dc:	d1f0      	bne.n	80197c0 <__svfiscanf_r+0xec>
 80197de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80197e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80197e4:	9241      	str	r2, [sp, #260]	; 0x104
 80197e6:	2210      	movs	r2, #16
 80197e8:	9242      	str	r2, [sp, #264]	; 0x108
 80197ea:	2b6e      	cmp	r3, #110	; 0x6e
 80197ec:	bf8c      	ite	hi
 80197ee:	2304      	movhi	r3, #4
 80197f0:	2303      	movls	r3, #3
 80197f2:	e010      	b.n	8019816 <__svfiscanf_r+0x142>
 80197f4:	2b63      	cmp	r3, #99	; 0x63
 80197f6:	d065      	beq.n	80198c4 <__svfiscanf_r+0x1f0>
 80197f8:	2b64      	cmp	r3, #100	; 0x64
 80197fa:	d1e1      	bne.n	80197c0 <__svfiscanf_r+0xec>
 80197fc:	9742      	str	r7, [sp, #264]	; 0x108
 80197fe:	e7f4      	b.n	80197ea <__svfiscanf_r+0x116>
 8019800:	2b70      	cmp	r3, #112	; 0x70
 8019802:	d04b      	beq.n	801989c <__svfiscanf_r+0x1c8>
 8019804:	d826      	bhi.n	8019854 <__svfiscanf_r+0x180>
 8019806:	2b6e      	cmp	r3, #110	; 0x6e
 8019808:	d062      	beq.n	80198d0 <__svfiscanf_r+0x1fc>
 801980a:	d84c      	bhi.n	80198a6 <__svfiscanf_r+0x1d2>
 801980c:	2b69      	cmp	r3, #105	; 0x69
 801980e:	d1d7      	bne.n	80197c0 <__svfiscanf_r+0xec>
 8019810:	2300      	movs	r3, #0
 8019812:	9342      	str	r3, [sp, #264]	; 0x108
 8019814:	2303      	movs	r3, #3
 8019816:	9347      	str	r3, [sp, #284]	; 0x11c
 8019818:	6863      	ldr	r3, [r4, #4]
 801981a:	2b00      	cmp	r3, #0
 801981c:	dd68      	ble.n	80198f0 <__svfiscanf_r+0x21c>
 801981e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019820:	0659      	lsls	r1, r3, #25
 8019822:	d407      	bmi.n	8019834 <__svfiscanf_r+0x160>
 8019824:	f7fe ff72 	bl	801870c <__locale_ctype_ptr>
 8019828:	6823      	ldr	r3, [r4, #0]
 801982a:	781a      	ldrb	r2, [r3, #0]
 801982c:	4410      	add	r0, r2
 801982e:	7842      	ldrb	r2, [r0, #1]
 8019830:	0712      	lsls	r2, r2, #28
 8019832:	d464      	bmi.n	80198fe <__svfiscanf_r+0x22a>
 8019834:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019836:	2b02      	cmp	r3, #2
 8019838:	dc73      	bgt.n	8019922 <__svfiscanf_r+0x24e>
 801983a:	466b      	mov	r3, sp
 801983c:	4622      	mov	r2, r4
 801983e:	a941      	add	r1, sp, #260	; 0x104
 8019840:	4630      	mov	r0, r6
 8019842:	f000 f8bf 	bl	80199c4 <_scanf_chars>
 8019846:	2801      	cmp	r0, #1
 8019848:	f000 8089 	beq.w	801995e <__svfiscanf_r+0x28a>
 801984c:	2802      	cmp	r0, #2
 801984e:	f47f af71 	bne.w	8019734 <__svfiscanf_r+0x60>
 8019852:	e01d      	b.n	8019890 <__svfiscanf_r+0x1bc>
 8019854:	2b75      	cmp	r3, #117	; 0x75
 8019856:	d0d1      	beq.n	80197fc <__svfiscanf_r+0x128>
 8019858:	2b78      	cmp	r3, #120	; 0x78
 801985a:	d0c0      	beq.n	80197de <__svfiscanf_r+0x10a>
 801985c:	2b73      	cmp	r3, #115	; 0x73
 801985e:	d1af      	bne.n	80197c0 <__svfiscanf_r+0xec>
 8019860:	2302      	movs	r3, #2
 8019862:	e7d8      	b.n	8019816 <__svfiscanf_r+0x142>
 8019864:	6863      	ldr	r3, [r4, #4]
 8019866:	2b00      	cmp	r3, #0
 8019868:	dd0c      	ble.n	8019884 <__svfiscanf_r+0x1b0>
 801986a:	6823      	ldr	r3, [r4, #0]
 801986c:	781a      	ldrb	r2, [r3, #0]
 801986e:	455a      	cmp	r2, fp
 8019870:	d175      	bne.n	801995e <__svfiscanf_r+0x28a>
 8019872:	3301      	adds	r3, #1
 8019874:	6862      	ldr	r2, [r4, #4]
 8019876:	6023      	str	r3, [r4, #0]
 8019878:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801987a:	3a01      	subs	r2, #1
 801987c:	3301      	adds	r3, #1
 801987e:	6062      	str	r2, [r4, #4]
 8019880:	9345      	str	r3, [sp, #276]	; 0x114
 8019882:	e757      	b.n	8019734 <__svfiscanf_r+0x60>
 8019884:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019886:	4621      	mov	r1, r4
 8019888:	4630      	mov	r0, r6
 801988a:	4798      	blx	r3
 801988c:	2800      	cmp	r0, #0
 801988e:	d0ec      	beq.n	801986a <__svfiscanf_r+0x196>
 8019890:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019892:	2800      	cmp	r0, #0
 8019894:	d159      	bne.n	801994a <__svfiscanf_r+0x276>
 8019896:	f04f 30ff 	mov.w	r0, #4294967295
 801989a:	e05c      	b.n	8019956 <__svfiscanf_r+0x282>
 801989c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801989e:	f042 0220 	orr.w	r2, r2, #32
 80198a2:	9241      	str	r2, [sp, #260]	; 0x104
 80198a4:	e79b      	b.n	80197de <__svfiscanf_r+0x10a>
 80198a6:	2308      	movs	r3, #8
 80198a8:	9342      	str	r3, [sp, #264]	; 0x108
 80198aa:	2304      	movs	r3, #4
 80198ac:	e7b3      	b.n	8019816 <__svfiscanf_r+0x142>
 80198ae:	4629      	mov	r1, r5
 80198b0:	4640      	mov	r0, r8
 80198b2:	f000 fa85 	bl	8019dc0 <__sccl>
 80198b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80198b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198bc:	9341      	str	r3, [sp, #260]	; 0x104
 80198be:	4605      	mov	r5, r0
 80198c0:	2301      	movs	r3, #1
 80198c2:	e7a8      	b.n	8019816 <__svfiscanf_r+0x142>
 80198c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80198c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198ca:	9341      	str	r3, [sp, #260]	; 0x104
 80198cc:	2300      	movs	r3, #0
 80198ce:	e7a2      	b.n	8019816 <__svfiscanf_r+0x142>
 80198d0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80198d2:	06c3      	lsls	r3, r0, #27
 80198d4:	f53f af2e 	bmi.w	8019734 <__svfiscanf_r+0x60>
 80198d8:	9b00      	ldr	r3, [sp, #0]
 80198da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80198dc:	1d19      	adds	r1, r3, #4
 80198de:	9100      	str	r1, [sp, #0]
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	07c0      	lsls	r0, r0, #31
 80198e4:	bf4c      	ite	mi
 80198e6:	801a      	strhmi	r2, [r3, #0]
 80198e8:	601a      	strpl	r2, [r3, #0]
 80198ea:	e723      	b.n	8019734 <__svfiscanf_r+0x60>
 80198ec:	2305      	movs	r3, #5
 80198ee:	e792      	b.n	8019816 <__svfiscanf_r+0x142>
 80198f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80198f2:	4621      	mov	r1, r4
 80198f4:	4630      	mov	r0, r6
 80198f6:	4798      	blx	r3
 80198f8:	2800      	cmp	r0, #0
 80198fa:	d090      	beq.n	801981e <__svfiscanf_r+0x14a>
 80198fc:	e7c8      	b.n	8019890 <__svfiscanf_r+0x1bc>
 80198fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019900:	3201      	adds	r2, #1
 8019902:	9245      	str	r2, [sp, #276]	; 0x114
 8019904:	6862      	ldr	r2, [r4, #4]
 8019906:	3a01      	subs	r2, #1
 8019908:	2a00      	cmp	r2, #0
 801990a:	6062      	str	r2, [r4, #4]
 801990c:	dd02      	ble.n	8019914 <__svfiscanf_r+0x240>
 801990e:	3301      	adds	r3, #1
 8019910:	6023      	str	r3, [r4, #0]
 8019912:	e787      	b.n	8019824 <__svfiscanf_r+0x150>
 8019914:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019916:	4621      	mov	r1, r4
 8019918:	4630      	mov	r0, r6
 801991a:	4798      	blx	r3
 801991c:	2800      	cmp	r0, #0
 801991e:	d081      	beq.n	8019824 <__svfiscanf_r+0x150>
 8019920:	e7b6      	b.n	8019890 <__svfiscanf_r+0x1bc>
 8019922:	2b04      	cmp	r3, #4
 8019924:	dc06      	bgt.n	8019934 <__svfiscanf_r+0x260>
 8019926:	466b      	mov	r3, sp
 8019928:	4622      	mov	r2, r4
 801992a:	a941      	add	r1, sp, #260	; 0x104
 801992c:	4630      	mov	r0, r6
 801992e:	f000 f8ad 	bl	8019a8c <_scanf_i>
 8019932:	e788      	b.n	8019846 <__svfiscanf_r+0x172>
 8019934:	4b0e      	ldr	r3, [pc, #56]	; (8019970 <__svfiscanf_r+0x29c>)
 8019936:	2b00      	cmp	r3, #0
 8019938:	f43f aefc 	beq.w	8019734 <__svfiscanf_r+0x60>
 801993c:	466b      	mov	r3, sp
 801993e:	4622      	mov	r2, r4
 8019940:	a941      	add	r1, sp, #260	; 0x104
 8019942:	4630      	mov	r0, r6
 8019944:	f7fc f90a 	bl	8015b5c <_scanf_float>
 8019948:	e77d      	b.n	8019846 <__svfiscanf_r+0x172>
 801994a:	89a3      	ldrh	r3, [r4, #12]
 801994c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019950:	bf18      	it	ne
 8019952:	f04f 30ff 	movne.w	r0, #4294967295
 8019956:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801995a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801995e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019960:	e7f9      	b.n	8019956 <__svfiscanf_r+0x282>
 8019962:	bf00      	nop
 8019964:	0801a05d 	.word	0x0801a05d
 8019968:	08019c89 	.word	0x08019c89
 801996c:	0801a7fa 	.word	0x0801a7fa
 8019970:	08015b5d 	.word	0x08015b5d

08019974 <_vfiscanf_r>:
 8019974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019978:	460c      	mov	r4, r1
 801997a:	4616      	mov	r6, r2
 801997c:	461f      	mov	r7, r3
 801997e:	4605      	mov	r5, r0
 8019980:	b118      	cbz	r0, 801998a <_vfiscanf_r+0x16>
 8019982:	6983      	ldr	r3, [r0, #24]
 8019984:	b90b      	cbnz	r3, 801998a <_vfiscanf_r+0x16>
 8019986:	f7fe faf1 	bl	8017f6c <__sinit>
 801998a:	4b0b      	ldr	r3, [pc, #44]	; (80199b8 <_vfiscanf_r+0x44>)
 801998c:	429c      	cmp	r4, r3
 801998e:	d108      	bne.n	80199a2 <_vfiscanf_r+0x2e>
 8019990:	686c      	ldr	r4, [r5, #4]
 8019992:	463b      	mov	r3, r7
 8019994:	4632      	mov	r2, r6
 8019996:	4621      	mov	r1, r4
 8019998:	4628      	mov	r0, r5
 801999a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801999e:	f7ff be99 	b.w	80196d4 <__svfiscanf_r>
 80199a2:	4b06      	ldr	r3, [pc, #24]	; (80199bc <_vfiscanf_r+0x48>)
 80199a4:	429c      	cmp	r4, r3
 80199a6:	d101      	bne.n	80199ac <_vfiscanf_r+0x38>
 80199a8:	68ac      	ldr	r4, [r5, #8]
 80199aa:	e7f2      	b.n	8019992 <_vfiscanf_r+0x1e>
 80199ac:	4b04      	ldr	r3, [pc, #16]	; (80199c0 <_vfiscanf_r+0x4c>)
 80199ae:	429c      	cmp	r4, r3
 80199b0:	bf08      	it	eq
 80199b2:	68ec      	ldreq	r4, [r5, #12]
 80199b4:	e7ed      	b.n	8019992 <_vfiscanf_r+0x1e>
 80199b6:	bf00      	nop
 80199b8:	0801a6a8 	.word	0x0801a6a8
 80199bc:	0801a6c8 	.word	0x0801a6c8
 80199c0:	0801a688 	.word	0x0801a688

080199c4 <_scanf_chars>:
 80199c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199c8:	4615      	mov	r5, r2
 80199ca:	688a      	ldr	r2, [r1, #8]
 80199cc:	4680      	mov	r8, r0
 80199ce:	460c      	mov	r4, r1
 80199d0:	b932      	cbnz	r2, 80199e0 <_scanf_chars+0x1c>
 80199d2:	698a      	ldr	r2, [r1, #24]
 80199d4:	2a00      	cmp	r2, #0
 80199d6:	bf14      	ite	ne
 80199d8:	f04f 32ff 	movne.w	r2, #4294967295
 80199dc:	2201      	moveq	r2, #1
 80199de:	608a      	str	r2, [r1, #8]
 80199e0:	6822      	ldr	r2, [r4, #0]
 80199e2:	06d1      	lsls	r1, r2, #27
 80199e4:	bf5f      	itttt	pl
 80199e6:	681a      	ldrpl	r2, [r3, #0]
 80199e8:	1d11      	addpl	r1, r2, #4
 80199ea:	6019      	strpl	r1, [r3, #0]
 80199ec:	6817      	ldrpl	r7, [r2, #0]
 80199ee:	2600      	movs	r6, #0
 80199f0:	69a3      	ldr	r3, [r4, #24]
 80199f2:	b1db      	cbz	r3, 8019a2c <_scanf_chars+0x68>
 80199f4:	2b01      	cmp	r3, #1
 80199f6:	d107      	bne.n	8019a08 <_scanf_chars+0x44>
 80199f8:	682b      	ldr	r3, [r5, #0]
 80199fa:	6962      	ldr	r2, [r4, #20]
 80199fc:	781b      	ldrb	r3, [r3, #0]
 80199fe:	5cd3      	ldrb	r3, [r2, r3]
 8019a00:	b9a3      	cbnz	r3, 8019a2c <_scanf_chars+0x68>
 8019a02:	2e00      	cmp	r6, #0
 8019a04:	d132      	bne.n	8019a6c <_scanf_chars+0xa8>
 8019a06:	e006      	b.n	8019a16 <_scanf_chars+0x52>
 8019a08:	2b02      	cmp	r3, #2
 8019a0a:	d007      	beq.n	8019a1c <_scanf_chars+0x58>
 8019a0c:	2e00      	cmp	r6, #0
 8019a0e:	d12d      	bne.n	8019a6c <_scanf_chars+0xa8>
 8019a10:	69a3      	ldr	r3, [r4, #24]
 8019a12:	2b01      	cmp	r3, #1
 8019a14:	d12a      	bne.n	8019a6c <_scanf_chars+0xa8>
 8019a16:	2001      	movs	r0, #1
 8019a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a1c:	f7fe fe76 	bl	801870c <__locale_ctype_ptr>
 8019a20:	682b      	ldr	r3, [r5, #0]
 8019a22:	781b      	ldrb	r3, [r3, #0]
 8019a24:	4418      	add	r0, r3
 8019a26:	7843      	ldrb	r3, [r0, #1]
 8019a28:	071b      	lsls	r3, r3, #28
 8019a2a:	d4ef      	bmi.n	8019a0c <_scanf_chars+0x48>
 8019a2c:	6823      	ldr	r3, [r4, #0]
 8019a2e:	06da      	lsls	r2, r3, #27
 8019a30:	bf5e      	ittt	pl
 8019a32:	682b      	ldrpl	r3, [r5, #0]
 8019a34:	781b      	ldrbpl	r3, [r3, #0]
 8019a36:	703b      	strbpl	r3, [r7, #0]
 8019a38:	682a      	ldr	r2, [r5, #0]
 8019a3a:	686b      	ldr	r3, [r5, #4]
 8019a3c:	f102 0201 	add.w	r2, r2, #1
 8019a40:	602a      	str	r2, [r5, #0]
 8019a42:	68a2      	ldr	r2, [r4, #8]
 8019a44:	f103 33ff 	add.w	r3, r3, #4294967295
 8019a48:	f102 32ff 	add.w	r2, r2, #4294967295
 8019a4c:	606b      	str	r3, [r5, #4]
 8019a4e:	f106 0601 	add.w	r6, r6, #1
 8019a52:	bf58      	it	pl
 8019a54:	3701      	addpl	r7, #1
 8019a56:	60a2      	str	r2, [r4, #8]
 8019a58:	b142      	cbz	r2, 8019a6c <_scanf_chars+0xa8>
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	dcc8      	bgt.n	80199f0 <_scanf_chars+0x2c>
 8019a5e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019a62:	4629      	mov	r1, r5
 8019a64:	4640      	mov	r0, r8
 8019a66:	4798      	blx	r3
 8019a68:	2800      	cmp	r0, #0
 8019a6a:	d0c1      	beq.n	80199f0 <_scanf_chars+0x2c>
 8019a6c:	6823      	ldr	r3, [r4, #0]
 8019a6e:	f013 0310 	ands.w	r3, r3, #16
 8019a72:	d105      	bne.n	8019a80 <_scanf_chars+0xbc>
 8019a74:	68e2      	ldr	r2, [r4, #12]
 8019a76:	3201      	adds	r2, #1
 8019a78:	60e2      	str	r2, [r4, #12]
 8019a7a:	69a2      	ldr	r2, [r4, #24]
 8019a7c:	b102      	cbz	r2, 8019a80 <_scanf_chars+0xbc>
 8019a7e:	703b      	strb	r3, [r7, #0]
 8019a80:	6923      	ldr	r3, [r4, #16]
 8019a82:	441e      	add	r6, r3
 8019a84:	6126      	str	r6, [r4, #16]
 8019a86:	2000      	movs	r0, #0
 8019a88:	e7c6      	b.n	8019a18 <_scanf_chars+0x54>
	...

08019a8c <_scanf_i>:
 8019a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a90:	469a      	mov	sl, r3
 8019a92:	4b74      	ldr	r3, [pc, #464]	; (8019c64 <_scanf_i+0x1d8>)
 8019a94:	460c      	mov	r4, r1
 8019a96:	4683      	mov	fp, r0
 8019a98:	4616      	mov	r6, r2
 8019a9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019a9e:	b087      	sub	sp, #28
 8019aa0:	ab03      	add	r3, sp, #12
 8019aa2:	68a7      	ldr	r7, [r4, #8]
 8019aa4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019aa8:	4b6f      	ldr	r3, [pc, #444]	; (8019c68 <_scanf_i+0x1dc>)
 8019aaa:	69a1      	ldr	r1, [r4, #24]
 8019aac:	4a6f      	ldr	r2, [pc, #444]	; (8019c6c <_scanf_i+0x1e0>)
 8019aae:	2903      	cmp	r1, #3
 8019ab0:	bf08      	it	eq
 8019ab2:	461a      	moveq	r2, r3
 8019ab4:	1e7b      	subs	r3, r7, #1
 8019ab6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8019aba:	bf84      	itt	hi
 8019abc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019ac0:	60a3      	strhi	r3, [r4, #8]
 8019ac2:	6823      	ldr	r3, [r4, #0]
 8019ac4:	9200      	str	r2, [sp, #0]
 8019ac6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019aca:	bf88      	it	hi
 8019acc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019ad0:	f104 091c 	add.w	r9, r4, #28
 8019ad4:	6023      	str	r3, [r4, #0]
 8019ad6:	bf8c      	ite	hi
 8019ad8:	197f      	addhi	r7, r7, r5
 8019ada:	2700      	movls	r7, #0
 8019adc:	464b      	mov	r3, r9
 8019ade:	f04f 0800 	mov.w	r8, #0
 8019ae2:	9301      	str	r3, [sp, #4]
 8019ae4:	6831      	ldr	r1, [r6, #0]
 8019ae6:	ab03      	add	r3, sp, #12
 8019ae8:	2202      	movs	r2, #2
 8019aea:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019aee:	7809      	ldrb	r1, [r1, #0]
 8019af0:	f7ee faae 	bl	8008050 <memchr>
 8019af4:	9b01      	ldr	r3, [sp, #4]
 8019af6:	b330      	cbz	r0, 8019b46 <_scanf_i+0xba>
 8019af8:	f1b8 0f01 	cmp.w	r8, #1
 8019afc:	d15a      	bne.n	8019bb4 <_scanf_i+0x128>
 8019afe:	6862      	ldr	r2, [r4, #4]
 8019b00:	b92a      	cbnz	r2, 8019b0e <_scanf_i+0x82>
 8019b02:	6822      	ldr	r2, [r4, #0]
 8019b04:	2108      	movs	r1, #8
 8019b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019b0a:	6061      	str	r1, [r4, #4]
 8019b0c:	6022      	str	r2, [r4, #0]
 8019b0e:	6822      	ldr	r2, [r4, #0]
 8019b10:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019b14:	6022      	str	r2, [r4, #0]
 8019b16:	68a2      	ldr	r2, [r4, #8]
 8019b18:	1e51      	subs	r1, r2, #1
 8019b1a:	60a1      	str	r1, [r4, #8]
 8019b1c:	b19a      	cbz	r2, 8019b46 <_scanf_i+0xba>
 8019b1e:	6832      	ldr	r2, [r6, #0]
 8019b20:	1c51      	adds	r1, r2, #1
 8019b22:	6031      	str	r1, [r6, #0]
 8019b24:	7812      	ldrb	r2, [r2, #0]
 8019b26:	701a      	strb	r2, [r3, #0]
 8019b28:	1c5d      	adds	r5, r3, #1
 8019b2a:	6873      	ldr	r3, [r6, #4]
 8019b2c:	3b01      	subs	r3, #1
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	6073      	str	r3, [r6, #4]
 8019b32:	dc07      	bgt.n	8019b44 <_scanf_i+0xb8>
 8019b34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019b38:	4631      	mov	r1, r6
 8019b3a:	4658      	mov	r0, fp
 8019b3c:	4798      	blx	r3
 8019b3e:	2800      	cmp	r0, #0
 8019b40:	f040 8086 	bne.w	8019c50 <_scanf_i+0x1c4>
 8019b44:	462b      	mov	r3, r5
 8019b46:	f108 0801 	add.w	r8, r8, #1
 8019b4a:	f1b8 0f03 	cmp.w	r8, #3
 8019b4e:	d1c8      	bne.n	8019ae2 <_scanf_i+0x56>
 8019b50:	6862      	ldr	r2, [r4, #4]
 8019b52:	b90a      	cbnz	r2, 8019b58 <_scanf_i+0xcc>
 8019b54:	220a      	movs	r2, #10
 8019b56:	6062      	str	r2, [r4, #4]
 8019b58:	6862      	ldr	r2, [r4, #4]
 8019b5a:	4945      	ldr	r1, [pc, #276]	; (8019c70 <_scanf_i+0x1e4>)
 8019b5c:	6960      	ldr	r0, [r4, #20]
 8019b5e:	9301      	str	r3, [sp, #4]
 8019b60:	1a89      	subs	r1, r1, r2
 8019b62:	f000 f92d 	bl	8019dc0 <__sccl>
 8019b66:	9b01      	ldr	r3, [sp, #4]
 8019b68:	f04f 0800 	mov.w	r8, #0
 8019b6c:	461d      	mov	r5, r3
 8019b6e:	68a3      	ldr	r3, [r4, #8]
 8019b70:	6822      	ldr	r2, [r4, #0]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d03a      	beq.n	8019bec <_scanf_i+0x160>
 8019b76:	6831      	ldr	r1, [r6, #0]
 8019b78:	6960      	ldr	r0, [r4, #20]
 8019b7a:	f891 c000 	ldrb.w	ip, [r1]
 8019b7e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019b82:	2800      	cmp	r0, #0
 8019b84:	d032      	beq.n	8019bec <_scanf_i+0x160>
 8019b86:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019b8a:	d121      	bne.n	8019bd0 <_scanf_i+0x144>
 8019b8c:	0510      	lsls	r0, r2, #20
 8019b8e:	d51f      	bpl.n	8019bd0 <_scanf_i+0x144>
 8019b90:	f108 0801 	add.w	r8, r8, #1
 8019b94:	b117      	cbz	r7, 8019b9c <_scanf_i+0x110>
 8019b96:	3301      	adds	r3, #1
 8019b98:	3f01      	subs	r7, #1
 8019b9a:	60a3      	str	r3, [r4, #8]
 8019b9c:	6873      	ldr	r3, [r6, #4]
 8019b9e:	3b01      	subs	r3, #1
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	6073      	str	r3, [r6, #4]
 8019ba4:	dd1b      	ble.n	8019bde <_scanf_i+0x152>
 8019ba6:	6833      	ldr	r3, [r6, #0]
 8019ba8:	3301      	adds	r3, #1
 8019baa:	6033      	str	r3, [r6, #0]
 8019bac:	68a3      	ldr	r3, [r4, #8]
 8019bae:	3b01      	subs	r3, #1
 8019bb0:	60a3      	str	r3, [r4, #8]
 8019bb2:	e7dc      	b.n	8019b6e <_scanf_i+0xe2>
 8019bb4:	f1b8 0f02 	cmp.w	r8, #2
 8019bb8:	d1ad      	bne.n	8019b16 <_scanf_i+0x8a>
 8019bba:	6822      	ldr	r2, [r4, #0]
 8019bbc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019bc0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019bc4:	d1bf      	bne.n	8019b46 <_scanf_i+0xba>
 8019bc6:	2110      	movs	r1, #16
 8019bc8:	6061      	str	r1, [r4, #4]
 8019bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019bce:	e7a1      	b.n	8019b14 <_scanf_i+0x88>
 8019bd0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019bd4:	6022      	str	r2, [r4, #0]
 8019bd6:	780b      	ldrb	r3, [r1, #0]
 8019bd8:	702b      	strb	r3, [r5, #0]
 8019bda:	3501      	adds	r5, #1
 8019bdc:	e7de      	b.n	8019b9c <_scanf_i+0x110>
 8019bde:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019be2:	4631      	mov	r1, r6
 8019be4:	4658      	mov	r0, fp
 8019be6:	4798      	blx	r3
 8019be8:	2800      	cmp	r0, #0
 8019bea:	d0df      	beq.n	8019bac <_scanf_i+0x120>
 8019bec:	6823      	ldr	r3, [r4, #0]
 8019bee:	05d9      	lsls	r1, r3, #23
 8019bf0:	d50c      	bpl.n	8019c0c <_scanf_i+0x180>
 8019bf2:	454d      	cmp	r5, r9
 8019bf4:	d908      	bls.n	8019c08 <_scanf_i+0x17c>
 8019bf6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019bfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019bfe:	4632      	mov	r2, r6
 8019c00:	4658      	mov	r0, fp
 8019c02:	4798      	blx	r3
 8019c04:	1e6f      	subs	r7, r5, #1
 8019c06:	463d      	mov	r5, r7
 8019c08:	454d      	cmp	r5, r9
 8019c0a:	d029      	beq.n	8019c60 <_scanf_i+0x1d4>
 8019c0c:	6822      	ldr	r2, [r4, #0]
 8019c0e:	f012 0210 	ands.w	r2, r2, #16
 8019c12:	d113      	bne.n	8019c3c <_scanf_i+0x1b0>
 8019c14:	702a      	strb	r2, [r5, #0]
 8019c16:	6863      	ldr	r3, [r4, #4]
 8019c18:	9e00      	ldr	r6, [sp, #0]
 8019c1a:	4649      	mov	r1, r9
 8019c1c:	4658      	mov	r0, fp
 8019c1e:	47b0      	blx	r6
 8019c20:	f8da 3000 	ldr.w	r3, [sl]
 8019c24:	6821      	ldr	r1, [r4, #0]
 8019c26:	1d1a      	adds	r2, r3, #4
 8019c28:	f8ca 2000 	str.w	r2, [sl]
 8019c2c:	f011 0f20 	tst.w	r1, #32
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	d010      	beq.n	8019c56 <_scanf_i+0x1ca>
 8019c34:	6018      	str	r0, [r3, #0]
 8019c36:	68e3      	ldr	r3, [r4, #12]
 8019c38:	3301      	adds	r3, #1
 8019c3a:	60e3      	str	r3, [r4, #12]
 8019c3c:	eba5 0509 	sub.w	r5, r5, r9
 8019c40:	44a8      	add	r8, r5
 8019c42:	6925      	ldr	r5, [r4, #16]
 8019c44:	4445      	add	r5, r8
 8019c46:	6125      	str	r5, [r4, #16]
 8019c48:	2000      	movs	r0, #0
 8019c4a:	b007      	add	sp, #28
 8019c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c50:	f04f 0800 	mov.w	r8, #0
 8019c54:	e7ca      	b.n	8019bec <_scanf_i+0x160>
 8019c56:	07ca      	lsls	r2, r1, #31
 8019c58:	bf4c      	ite	mi
 8019c5a:	8018      	strhmi	r0, [r3, #0]
 8019c5c:	6018      	strpl	r0, [r3, #0]
 8019c5e:	e7ea      	b.n	8019c36 <_scanf_i+0x1aa>
 8019c60:	2001      	movs	r0, #1
 8019c62:	e7f2      	b.n	8019c4a <_scanf_i+0x1be>
 8019c64:	0801a5b4 	.word	0x0801a5b4
 8019c68:	08016f39 	.word	0x08016f39
 8019c6c:	08019fc5 	.word	0x08019fc5
 8019c70:	0801a815 	.word	0x0801a815

08019c74 <lflush>:
 8019c74:	8983      	ldrh	r3, [r0, #12]
 8019c76:	f003 0309 	and.w	r3, r3, #9
 8019c7a:	2b09      	cmp	r3, #9
 8019c7c:	d101      	bne.n	8019c82 <lflush+0xe>
 8019c7e:	f7fe b923 	b.w	8017ec8 <fflush>
 8019c82:	2000      	movs	r0, #0
 8019c84:	4770      	bx	lr
	...

08019c88 <__srefill_r>:
 8019c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c8a:	460c      	mov	r4, r1
 8019c8c:	4605      	mov	r5, r0
 8019c8e:	b118      	cbz	r0, 8019c98 <__srefill_r+0x10>
 8019c90:	6983      	ldr	r3, [r0, #24]
 8019c92:	b90b      	cbnz	r3, 8019c98 <__srefill_r+0x10>
 8019c94:	f7fe f96a 	bl	8017f6c <__sinit>
 8019c98:	4b3c      	ldr	r3, [pc, #240]	; (8019d8c <__srefill_r+0x104>)
 8019c9a:	429c      	cmp	r4, r3
 8019c9c:	d10a      	bne.n	8019cb4 <__srefill_r+0x2c>
 8019c9e:	686c      	ldr	r4, [r5, #4]
 8019ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	6063      	str	r3, [r4, #4]
 8019ca8:	b293      	uxth	r3, r2
 8019caa:	069e      	lsls	r6, r3, #26
 8019cac:	d50c      	bpl.n	8019cc8 <__srefill_r+0x40>
 8019cae:	f04f 30ff 	mov.w	r0, #4294967295
 8019cb2:	e067      	b.n	8019d84 <__srefill_r+0xfc>
 8019cb4:	4b36      	ldr	r3, [pc, #216]	; (8019d90 <__srefill_r+0x108>)
 8019cb6:	429c      	cmp	r4, r3
 8019cb8:	d101      	bne.n	8019cbe <__srefill_r+0x36>
 8019cba:	68ac      	ldr	r4, [r5, #8]
 8019cbc:	e7f0      	b.n	8019ca0 <__srefill_r+0x18>
 8019cbe:	4b35      	ldr	r3, [pc, #212]	; (8019d94 <__srefill_r+0x10c>)
 8019cc0:	429c      	cmp	r4, r3
 8019cc2:	bf08      	it	eq
 8019cc4:	68ec      	ldreq	r4, [r5, #12]
 8019cc6:	e7eb      	b.n	8019ca0 <__srefill_r+0x18>
 8019cc8:	0758      	lsls	r0, r3, #29
 8019cca:	d449      	bmi.n	8019d60 <__srefill_r+0xd8>
 8019ccc:	06d9      	lsls	r1, r3, #27
 8019cce:	d405      	bmi.n	8019cdc <__srefill_r+0x54>
 8019cd0:	2309      	movs	r3, #9
 8019cd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019cd6:	602b      	str	r3, [r5, #0]
 8019cd8:	81a2      	strh	r2, [r4, #12]
 8019cda:	e7e8      	b.n	8019cae <__srefill_r+0x26>
 8019cdc:	071a      	lsls	r2, r3, #28
 8019cde:	d50b      	bpl.n	8019cf8 <__srefill_r+0x70>
 8019ce0:	4621      	mov	r1, r4
 8019ce2:	4628      	mov	r0, r5
 8019ce4:	f7fe f8c6 	bl	8017e74 <_fflush_r>
 8019ce8:	2800      	cmp	r0, #0
 8019cea:	d1e0      	bne.n	8019cae <__srefill_r+0x26>
 8019cec:	89a3      	ldrh	r3, [r4, #12]
 8019cee:	60a0      	str	r0, [r4, #8]
 8019cf0:	f023 0308 	bic.w	r3, r3, #8
 8019cf4:	81a3      	strh	r3, [r4, #12]
 8019cf6:	61a0      	str	r0, [r4, #24]
 8019cf8:	89a3      	ldrh	r3, [r4, #12]
 8019cfa:	f043 0304 	orr.w	r3, r3, #4
 8019cfe:	81a3      	strh	r3, [r4, #12]
 8019d00:	6923      	ldr	r3, [r4, #16]
 8019d02:	b91b      	cbnz	r3, 8019d0c <__srefill_r+0x84>
 8019d04:	4621      	mov	r1, r4
 8019d06:	4628      	mov	r0, r5
 8019d08:	f7fe fd42 	bl	8018790 <__smakebuf_r>
 8019d0c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8019d10:	b2be      	uxth	r6, r7
 8019d12:	07b3      	lsls	r3, r6, #30
 8019d14:	d00f      	beq.n	8019d36 <__srefill_r+0xae>
 8019d16:	2301      	movs	r3, #1
 8019d18:	81a3      	strh	r3, [r4, #12]
 8019d1a:	4b1f      	ldr	r3, [pc, #124]	; (8019d98 <__srefill_r+0x110>)
 8019d1c:	491f      	ldr	r1, [pc, #124]	; (8019d9c <__srefill_r+0x114>)
 8019d1e:	6818      	ldr	r0, [r3, #0]
 8019d20:	f006 0609 	and.w	r6, r6, #9
 8019d24:	f7fe f98e 	bl	8018044 <_fwalk>
 8019d28:	2e09      	cmp	r6, #9
 8019d2a:	81a7      	strh	r7, [r4, #12]
 8019d2c:	d103      	bne.n	8019d36 <__srefill_r+0xae>
 8019d2e:	4621      	mov	r1, r4
 8019d30:	4628      	mov	r0, r5
 8019d32:	f7fe f819 	bl	8017d68 <__sflush_r>
 8019d36:	6922      	ldr	r2, [r4, #16]
 8019d38:	6022      	str	r2, [r4, #0]
 8019d3a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019d3c:	6963      	ldr	r3, [r4, #20]
 8019d3e:	6a21      	ldr	r1, [r4, #32]
 8019d40:	4628      	mov	r0, r5
 8019d42:	47b0      	blx	r6
 8019d44:	2800      	cmp	r0, #0
 8019d46:	6060      	str	r0, [r4, #4]
 8019d48:	dc1d      	bgt.n	8019d86 <__srefill_r+0xfe>
 8019d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d4e:	bf17      	itett	ne
 8019d50:	2200      	movne	r2, #0
 8019d52:	f043 0320 	orreq.w	r3, r3, #32
 8019d56:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8019d5a:	6062      	strne	r2, [r4, #4]
 8019d5c:	81a3      	strh	r3, [r4, #12]
 8019d5e:	e7a6      	b.n	8019cae <__srefill_r+0x26>
 8019d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019d62:	2900      	cmp	r1, #0
 8019d64:	d0cc      	beq.n	8019d00 <__srefill_r+0x78>
 8019d66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019d6a:	4299      	cmp	r1, r3
 8019d6c:	d002      	beq.n	8019d74 <__srefill_r+0xec>
 8019d6e:	4628      	mov	r0, r5
 8019d70:	f7ff f976 	bl	8019060 <_free_r>
 8019d74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019d76:	6063      	str	r3, [r4, #4]
 8019d78:	2000      	movs	r0, #0
 8019d7a:	6360      	str	r0, [r4, #52]	; 0x34
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d0bf      	beq.n	8019d00 <__srefill_r+0x78>
 8019d80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019d82:	6023      	str	r3, [r4, #0]
 8019d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d86:	2000      	movs	r0, #0
 8019d88:	e7fc      	b.n	8019d84 <__srefill_r+0xfc>
 8019d8a:	bf00      	nop
 8019d8c:	0801a6a8 	.word	0x0801a6a8
 8019d90:	0801a6c8 	.word	0x0801a6c8
 8019d94:	0801a688 	.word	0x0801a688
 8019d98:	0801a5e8 	.word	0x0801a5e8
 8019d9c:	08019c75 	.word	0x08019c75

08019da0 <_sbrk_r>:
 8019da0:	b538      	push	{r3, r4, r5, lr}
 8019da2:	4c06      	ldr	r4, [pc, #24]	; (8019dbc <_sbrk_r+0x1c>)
 8019da4:	2300      	movs	r3, #0
 8019da6:	4605      	mov	r5, r0
 8019da8:	4608      	mov	r0, r1
 8019daa:	6023      	str	r3, [r4, #0]
 8019dac:	f7f4 fe3e 	bl	800ea2c <_sbrk>
 8019db0:	1c43      	adds	r3, r0, #1
 8019db2:	d102      	bne.n	8019dba <_sbrk_r+0x1a>
 8019db4:	6823      	ldr	r3, [r4, #0]
 8019db6:	b103      	cbz	r3, 8019dba <_sbrk_r+0x1a>
 8019db8:	602b      	str	r3, [r5, #0]
 8019dba:	bd38      	pop	{r3, r4, r5, pc}
 8019dbc:	200108ac 	.word	0x200108ac

08019dc0 <__sccl>:
 8019dc0:	b570      	push	{r4, r5, r6, lr}
 8019dc2:	780b      	ldrb	r3, [r1, #0]
 8019dc4:	2b5e      	cmp	r3, #94	; 0x5e
 8019dc6:	bf13      	iteet	ne
 8019dc8:	1c4a      	addne	r2, r1, #1
 8019dca:	1c8a      	addeq	r2, r1, #2
 8019dcc:	784b      	ldrbeq	r3, [r1, #1]
 8019dce:	2100      	movne	r1, #0
 8019dd0:	bf08      	it	eq
 8019dd2:	2101      	moveq	r1, #1
 8019dd4:	1e44      	subs	r4, r0, #1
 8019dd6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019dda:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019dde:	42ac      	cmp	r4, r5
 8019de0:	d1fb      	bne.n	8019dda <__sccl+0x1a>
 8019de2:	b913      	cbnz	r3, 8019dea <__sccl+0x2a>
 8019de4:	3a01      	subs	r2, #1
 8019de6:	4610      	mov	r0, r2
 8019de8:	bd70      	pop	{r4, r5, r6, pc}
 8019dea:	f081 0401 	eor.w	r4, r1, #1
 8019dee:	54c4      	strb	r4, [r0, r3]
 8019df0:	1c51      	adds	r1, r2, #1
 8019df2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019df6:	2d2d      	cmp	r5, #45	; 0x2d
 8019df8:	f101 36ff 	add.w	r6, r1, #4294967295
 8019dfc:	460a      	mov	r2, r1
 8019dfe:	d006      	beq.n	8019e0e <__sccl+0x4e>
 8019e00:	2d5d      	cmp	r5, #93	; 0x5d
 8019e02:	d0f0      	beq.n	8019de6 <__sccl+0x26>
 8019e04:	b90d      	cbnz	r5, 8019e0a <__sccl+0x4a>
 8019e06:	4632      	mov	r2, r6
 8019e08:	e7ed      	b.n	8019de6 <__sccl+0x26>
 8019e0a:	462b      	mov	r3, r5
 8019e0c:	e7ef      	b.n	8019dee <__sccl+0x2e>
 8019e0e:	780e      	ldrb	r6, [r1, #0]
 8019e10:	2e5d      	cmp	r6, #93	; 0x5d
 8019e12:	d0fa      	beq.n	8019e0a <__sccl+0x4a>
 8019e14:	42b3      	cmp	r3, r6
 8019e16:	dcf8      	bgt.n	8019e0a <__sccl+0x4a>
 8019e18:	3301      	adds	r3, #1
 8019e1a:	429e      	cmp	r6, r3
 8019e1c:	54c4      	strb	r4, [r0, r3]
 8019e1e:	dcfb      	bgt.n	8019e18 <__sccl+0x58>
 8019e20:	3102      	adds	r1, #2
 8019e22:	e7e6      	b.n	8019df2 <__sccl+0x32>

08019e24 <__sread>:
 8019e24:	b510      	push	{r4, lr}
 8019e26:	460c      	mov	r4, r1
 8019e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e2c:	f000 fa2e 	bl	801a28c <_read_r>
 8019e30:	2800      	cmp	r0, #0
 8019e32:	bfab      	itete	ge
 8019e34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019e36:	89a3      	ldrhlt	r3, [r4, #12]
 8019e38:	181b      	addge	r3, r3, r0
 8019e3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019e3e:	bfac      	ite	ge
 8019e40:	6563      	strge	r3, [r4, #84]	; 0x54
 8019e42:	81a3      	strhlt	r3, [r4, #12]
 8019e44:	bd10      	pop	{r4, pc}

08019e46 <__swrite>:
 8019e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e4a:	461f      	mov	r7, r3
 8019e4c:	898b      	ldrh	r3, [r1, #12]
 8019e4e:	05db      	lsls	r3, r3, #23
 8019e50:	4605      	mov	r5, r0
 8019e52:	460c      	mov	r4, r1
 8019e54:	4616      	mov	r6, r2
 8019e56:	d505      	bpl.n	8019e64 <__swrite+0x1e>
 8019e58:	2302      	movs	r3, #2
 8019e5a:	2200      	movs	r2, #0
 8019e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e60:	f000 f9c0 	bl	801a1e4 <_lseek_r>
 8019e64:	89a3      	ldrh	r3, [r4, #12]
 8019e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019e6e:	81a3      	strh	r3, [r4, #12]
 8019e70:	4632      	mov	r2, r6
 8019e72:	463b      	mov	r3, r7
 8019e74:	4628      	mov	r0, r5
 8019e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019e7a:	f000 b96f 	b.w	801a15c <_write_r>

08019e7e <__sseek>:
 8019e7e:	b510      	push	{r4, lr}
 8019e80:	460c      	mov	r4, r1
 8019e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e86:	f000 f9ad 	bl	801a1e4 <_lseek_r>
 8019e8a:	1c43      	adds	r3, r0, #1
 8019e8c:	89a3      	ldrh	r3, [r4, #12]
 8019e8e:	bf15      	itete	ne
 8019e90:	6560      	strne	r0, [r4, #84]	; 0x54
 8019e92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019e96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019e9a:	81a3      	strheq	r3, [r4, #12]
 8019e9c:	bf18      	it	ne
 8019e9e:	81a3      	strhne	r3, [r4, #12]
 8019ea0:	bd10      	pop	{r4, pc}

08019ea2 <__sclose>:
 8019ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ea6:	f000 b96b 	b.w	801a180 <_close_r>

08019eaa <strncmp>:
 8019eaa:	b510      	push	{r4, lr}
 8019eac:	b16a      	cbz	r2, 8019eca <strncmp+0x20>
 8019eae:	3901      	subs	r1, #1
 8019eb0:	1884      	adds	r4, r0, r2
 8019eb2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019eb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019eba:	4293      	cmp	r3, r2
 8019ebc:	d103      	bne.n	8019ec6 <strncmp+0x1c>
 8019ebe:	42a0      	cmp	r0, r4
 8019ec0:	d001      	beq.n	8019ec6 <strncmp+0x1c>
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d1f5      	bne.n	8019eb2 <strncmp+0x8>
 8019ec6:	1a98      	subs	r0, r3, r2
 8019ec8:	bd10      	pop	{r4, pc}
 8019eca:	4610      	mov	r0, r2
 8019ecc:	e7fc      	b.n	8019ec8 <strncmp+0x1e>

08019ece <_strtoul_l.isra.0>:
 8019ece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ed2:	4680      	mov	r8, r0
 8019ed4:	4689      	mov	r9, r1
 8019ed6:	4692      	mov	sl, r2
 8019ed8:	461e      	mov	r6, r3
 8019eda:	460f      	mov	r7, r1
 8019edc:	463d      	mov	r5, r7
 8019ede:	9808      	ldr	r0, [sp, #32]
 8019ee0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019ee4:	f7fe fc0e 	bl	8018704 <__locale_ctype_ptr_l>
 8019ee8:	4420      	add	r0, r4
 8019eea:	7843      	ldrb	r3, [r0, #1]
 8019eec:	f013 0308 	ands.w	r3, r3, #8
 8019ef0:	d130      	bne.n	8019f54 <_strtoul_l.isra.0+0x86>
 8019ef2:	2c2d      	cmp	r4, #45	; 0x2d
 8019ef4:	d130      	bne.n	8019f58 <_strtoul_l.isra.0+0x8a>
 8019ef6:	787c      	ldrb	r4, [r7, #1]
 8019ef8:	1cbd      	adds	r5, r7, #2
 8019efa:	2101      	movs	r1, #1
 8019efc:	2e00      	cmp	r6, #0
 8019efe:	d05c      	beq.n	8019fba <_strtoul_l.isra.0+0xec>
 8019f00:	2e10      	cmp	r6, #16
 8019f02:	d109      	bne.n	8019f18 <_strtoul_l.isra.0+0x4a>
 8019f04:	2c30      	cmp	r4, #48	; 0x30
 8019f06:	d107      	bne.n	8019f18 <_strtoul_l.isra.0+0x4a>
 8019f08:	782b      	ldrb	r3, [r5, #0]
 8019f0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019f0e:	2b58      	cmp	r3, #88	; 0x58
 8019f10:	d14e      	bne.n	8019fb0 <_strtoul_l.isra.0+0xe2>
 8019f12:	786c      	ldrb	r4, [r5, #1]
 8019f14:	2610      	movs	r6, #16
 8019f16:	3502      	adds	r5, #2
 8019f18:	f04f 32ff 	mov.w	r2, #4294967295
 8019f1c:	2300      	movs	r3, #0
 8019f1e:	fbb2 f2f6 	udiv	r2, r2, r6
 8019f22:	fb06 fc02 	mul.w	ip, r6, r2
 8019f26:	ea6f 0c0c 	mvn.w	ip, ip
 8019f2a:	4618      	mov	r0, r3
 8019f2c:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019f30:	2f09      	cmp	r7, #9
 8019f32:	d817      	bhi.n	8019f64 <_strtoul_l.isra.0+0x96>
 8019f34:	463c      	mov	r4, r7
 8019f36:	42a6      	cmp	r6, r4
 8019f38:	dd23      	ble.n	8019f82 <_strtoul_l.isra.0+0xb4>
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	db1e      	blt.n	8019f7c <_strtoul_l.isra.0+0xae>
 8019f3e:	4282      	cmp	r2, r0
 8019f40:	d31c      	bcc.n	8019f7c <_strtoul_l.isra.0+0xae>
 8019f42:	d101      	bne.n	8019f48 <_strtoul_l.isra.0+0x7a>
 8019f44:	45a4      	cmp	ip, r4
 8019f46:	db19      	blt.n	8019f7c <_strtoul_l.isra.0+0xae>
 8019f48:	fb00 4006 	mla	r0, r0, r6, r4
 8019f4c:	2301      	movs	r3, #1
 8019f4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019f52:	e7eb      	b.n	8019f2c <_strtoul_l.isra.0+0x5e>
 8019f54:	462f      	mov	r7, r5
 8019f56:	e7c1      	b.n	8019edc <_strtoul_l.isra.0+0xe>
 8019f58:	2c2b      	cmp	r4, #43	; 0x2b
 8019f5a:	bf04      	itt	eq
 8019f5c:	1cbd      	addeq	r5, r7, #2
 8019f5e:	787c      	ldrbeq	r4, [r7, #1]
 8019f60:	4619      	mov	r1, r3
 8019f62:	e7cb      	b.n	8019efc <_strtoul_l.isra.0+0x2e>
 8019f64:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019f68:	2f19      	cmp	r7, #25
 8019f6a:	d801      	bhi.n	8019f70 <_strtoul_l.isra.0+0xa2>
 8019f6c:	3c37      	subs	r4, #55	; 0x37
 8019f6e:	e7e2      	b.n	8019f36 <_strtoul_l.isra.0+0x68>
 8019f70:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019f74:	2f19      	cmp	r7, #25
 8019f76:	d804      	bhi.n	8019f82 <_strtoul_l.isra.0+0xb4>
 8019f78:	3c57      	subs	r4, #87	; 0x57
 8019f7a:	e7dc      	b.n	8019f36 <_strtoul_l.isra.0+0x68>
 8019f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8019f80:	e7e5      	b.n	8019f4e <_strtoul_l.isra.0+0x80>
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	da09      	bge.n	8019f9a <_strtoul_l.isra.0+0xcc>
 8019f86:	2322      	movs	r3, #34	; 0x22
 8019f88:	f8c8 3000 	str.w	r3, [r8]
 8019f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8019f90:	f1ba 0f00 	cmp.w	sl, #0
 8019f94:	d107      	bne.n	8019fa6 <_strtoul_l.isra.0+0xd8>
 8019f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f9a:	b101      	cbz	r1, 8019f9e <_strtoul_l.isra.0+0xd0>
 8019f9c:	4240      	negs	r0, r0
 8019f9e:	f1ba 0f00 	cmp.w	sl, #0
 8019fa2:	d0f8      	beq.n	8019f96 <_strtoul_l.isra.0+0xc8>
 8019fa4:	b10b      	cbz	r3, 8019faa <_strtoul_l.isra.0+0xdc>
 8019fa6:	f105 39ff 	add.w	r9, r5, #4294967295
 8019faa:	f8ca 9000 	str.w	r9, [sl]
 8019fae:	e7f2      	b.n	8019f96 <_strtoul_l.isra.0+0xc8>
 8019fb0:	2430      	movs	r4, #48	; 0x30
 8019fb2:	2e00      	cmp	r6, #0
 8019fb4:	d1b0      	bne.n	8019f18 <_strtoul_l.isra.0+0x4a>
 8019fb6:	2608      	movs	r6, #8
 8019fb8:	e7ae      	b.n	8019f18 <_strtoul_l.isra.0+0x4a>
 8019fba:	2c30      	cmp	r4, #48	; 0x30
 8019fbc:	d0a4      	beq.n	8019f08 <_strtoul_l.isra.0+0x3a>
 8019fbe:	260a      	movs	r6, #10
 8019fc0:	e7aa      	b.n	8019f18 <_strtoul_l.isra.0+0x4a>
	...

08019fc4 <_strtoul_r>:
 8019fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019fc6:	4c06      	ldr	r4, [pc, #24]	; (8019fe0 <_strtoul_r+0x1c>)
 8019fc8:	4d06      	ldr	r5, [pc, #24]	; (8019fe4 <_strtoul_r+0x20>)
 8019fca:	6824      	ldr	r4, [r4, #0]
 8019fcc:	6a24      	ldr	r4, [r4, #32]
 8019fce:	2c00      	cmp	r4, #0
 8019fd0:	bf08      	it	eq
 8019fd2:	462c      	moveq	r4, r5
 8019fd4:	9400      	str	r4, [sp, #0]
 8019fd6:	f7ff ff7a 	bl	8019ece <_strtoul_l.isra.0>
 8019fda:	b003      	add	sp, #12
 8019fdc:	bd30      	pop	{r4, r5, pc}
 8019fde:	bf00      	nop
 8019fe0:	20000028 	.word	0x20000028
 8019fe4:	2000008c 	.word	0x2000008c

08019fe8 <__submore>:
 8019fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fec:	460c      	mov	r4, r1
 8019fee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019ff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ff4:	4299      	cmp	r1, r3
 8019ff6:	d11d      	bne.n	801a034 <__submore+0x4c>
 8019ff8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019ffc:	f7ff f87e 	bl	80190fc <_malloc_r>
 801a000:	b918      	cbnz	r0, 801a00a <__submore+0x22>
 801a002:	f04f 30ff 	mov.w	r0, #4294967295
 801a006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a00a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a00e:	63a3      	str	r3, [r4, #56]	; 0x38
 801a010:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a014:	6360      	str	r0, [r4, #52]	; 0x34
 801a016:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a01a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a01e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a022:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a026:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a02a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a02e:	6020      	str	r0, [r4, #0]
 801a030:	2000      	movs	r0, #0
 801a032:	e7e8      	b.n	801a006 <__submore+0x1e>
 801a034:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a036:	0077      	lsls	r7, r6, #1
 801a038:	463a      	mov	r2, r7
 801a03a:	f000 f900 	bl	801a23e <_realloc_r>
 801a03e:	4605      	mov	r5, r0
 801a040:	2800      	cmp	r0, #0
 801a042:	d0de      	beq.n	801a002 <__submore+0x1a>
 801a044:	eb00 0806 	add.w	r8, r0, r6
 801a048:	4601      	mov	r1, r0
 801a04a:	4632      	mov	r2, r6
 801a04c:	4640      	mov	r0, r8
 801a04e:	f7fb f915 	bl	801527c <memcpy>
 801a052:	f8c4 8000 	str.w	r8, [r4]
 801a056:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a05a:	e7e9      	b.n	801a030 <__submore+0x48>

0801a05c <_ungetc_r>:
 801a05c:	1c4b      	adds	r3, r1, #1
 801a05e:	b570      	push	{r4, r5, r6, lr}
 801a060:	4606      	mov	r6, r0
 801a062:	460d      	mov	r5, r1
 801a064:	4614      	mov	r4, r2
 801a066:	d103      	bne.n	801a070 <_ungetc_r+0x14>
 801a068:	f04f 35ff 	mov.w	r5, #4294967295
 801a06c:	4628      	mov	r0, r5
 801a06e:	bd70      	pop	{r4, r5, r6, pc}
 801a070:	b118      	cbz	r0, 801a07a <_ungetc_r+0x1e>
 801a072:	6983      	ldr	r3, [r0, #24]
 801a074:	b90b      	cbnz	r3, 801a07a <_ungetc_r+0x1e>
 801a076:	f7fd ff79 	bl	8017f6c <__sinit>
 801a07a:	4b2e      	ldr	r3, [pc, #184]	; (801a134 <_ungetc_r+0xd8>)
 801a07c:	429c      	cmp	r4, r3
 801a07e:	d12c      	bne.n	801a0da <_ungetc_r+0x7e>
 801a080:	6874      	ldr	r4, [r6, #4]
 801a082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a086:	f023 0320 	bic.w	r3, r3, #32
 801a08a:	81a3      	strh	r3, [r4, #12]
 801a08c:	b29b      	uxth	r3, r3
 801a08e:	0759      	lsls	r1, r3, #29
 801a090:	d413      	bmi.n	801a0ba <_ungetc_r+0x5e>
 801a092:	06da      	lsls	r2, r3, #27
 801a094:	d5e8      	bpl.n	801a068 <_ungetc_r+0xc>
 801a096:	071b      	lsls	r3, r3, #28
 801a098:	d50b      	bpl.n	801a0b2 <_ungetc_r+0x56>
 801a09a:	4621      	mov	r1, r4
 801a09c:	4630      	mov	r0, r6
 801a09e:	f7fd fee9 	bl	8017e74 <_fflush_r>
 801a0a2:	2800      	cmp	r0, #0
 801a0a4:	d1e0      	bne.n	801a068 <_ungetc_r+0xc>
 801a0a6:	89a3      	ldrh	r3, [r4, #12]
 801a0a8:	60a0      	str	r0, [r4, #8]
 801a0aa:	f023 0308 	bic.w	r3, r3, #8
 801a0ae:	81a3      	strh	r3, [r4, #12]
 801a0b0:	61a0      	str	r0, [r4, #24]
 801a0b2:	89a3      	ldrh	r3, [r4, #12]
 801a0b4:	f043 0304 	orr.w	r3, r3, #4
 801a0b8:	81a3      	strh	r3, [r4, #12]
 801a0ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a0bc:	6862      	ldr	r2, [r4, #4]
 801a0be:	b2ed      	uxtb	r5, r5
 801a0c0:	b1e3      	cbz	r3, 801a0fc <_ungetc_r+0xa0>
 801a0c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a0c4:	4293      	cmp	r3, r2
 801a0c6:	dd12      	ble.n	801a0ee <_ungetc_r+0x92>
 801a0c8:	6823      	ldr	r3, [r4, #0]
 801a0ca:	1e5a      	subs	r2, r3, #1
 801a0cc:	6022      	str	r2, [r4, #0]
 801a0ce:	f803 5c01 	strb.w	r5, [r3, #-1]
 801a0d2:	6863      	ldr	r3, [r4, #4]
 801a0d4:	3301      	adds	r3, #1
 801a0d6:	6063      	str	r3, [r4, #4]
 801a0d8:	e7c8      	b.n	801a06c <_ungetc_r+0x10>
 801a0da:	4b17      	ldr	r3, [pc, #92]	; (801a138 <_ungetc_r+0xdc>)
 801a0dc:	429c      	cmp	r4, r3
 801a0de:	d101      	bne.n	801a0e4 <_ungetc_r+0x88>
 801a0e0:	68b4      	ldr	r4, [r6, #8]
 801a0e2:	e7ce      	b.n	801a082 <_ungetc_r+0x26>
 801a0e4:	4b15      	ldr	r3, [pc, #84]	; (801a13c <_ungetc_r+0xe0>)
 801a0e6:	429c      	cmp	r4, r3
 801a0e8:	bf08      	it	eq
 801a0ea:	68f4      	ldreq	r4, [r6, #12]
 801a0ec:	e7c9      	b.n	801a082 <_ungetc_r+0x26>
 801a0ee:	4621      	mov	r1, r4
 801a0f0:	4630      	mov	r0, r6
 801a0f2:	f7ff ff79 	bl	8019fe8 <__submore>
 801a0f6:	2800      	cmp	r0, #0
 801a0f8:	d0e6      	beq.n	801a0c8 <_ungetc_r+0x6c>
 801a0fa:	e7b5      	b.n	801a068 <_ungetc_r+0xc>
 801a0fc:	6921      	ldr	r1, [r4, #16]
 801a0fe:	6823      	ldr	r3, [r4, #0]
 801a100:	b151      	cbz	r1, 801a118 <_ungetc_r+0xbc>
 801a102:	4299      	cmp	r1, r3
 801a104:	d208      	bcs.n	801a118 <_ungetc_r+0xbc>
 801a106:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801a10a:	42a9      	cmp	r1, r5
 801a10c:	d104      	bne.n	801a118 <_ungetc_r+0xbc>
 801a10e:	3b01      	subs	r3, #1
 801a110:	3201      	adds	r2, #1
 801a112:	6023      	str	r3, [r4, #0]
 801a114:	6062      	str	r2, [r4, #4]
 801a116:	e7a9      	b.n	801a06c <_ungetc_r+0x10>
 801a118:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801a11c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a120:	6363      	str	r3, [r4, #52]	; 0x34
 801a122:	2303      	movs	r3, #3
 801a124:	63a3      	str	r3, [r4, #56]	; 0x38
 801a126:	4623      	mov	r3, r4
 801a128:	f803 5f46 	strb.w	r5, [r3, #70]!
 801a12c:	6023      	str	r3, [r4, #0]
 801a12e:	2301      	movs	r3, #1
 801a130:	e7d1      	b.n	801a0d6 <_ungetc_r+0x7a>
 801a132:	bf00      	nop
 801a134:	0801a6a8 	.word	0x0801a6a8
 801a138:	0801a6c8 	.word	0x0801a6c8
 801a13c:	0801a688 	.word	0x0801a688

0801a140 <__ascii_wctomb>:
 801a140:	b149      	cbz	r1, 801a156 <__ascii_wctomb+0x16>
 801a142:	2aff      	cmp	r2, #255	; 0xff
 801a144:	bf85      	ittet	hi
 801a146:	238a      	movhi	r3, #138	; 0x8a
 801a148:	6003      	strhi	r3, [r0, #0]
 801a14a:	700a      	strbls	r2, [r1, #0]
 801a14c:	f04f 30ff 	movhi.w	r0, #4294967295
 801a150:	bf98      	it	ls
 801a152:	2001      	movls	r0, #1
 801a154:	4770      	bx	lr
 801a156:	4608      	mov	r0, r1
 801a158:	4770      	bx	lr
	...

0801a15c <_write_r>:
 801a15c:	b538      	push	{r3, r4, r5, lr}
 801a15e:	4c07      	ldr	r4, [pc, #28]	; (801a17c <_write_r+0x20>)
 801a160:	4605      	mov	r5, r0
 801a162:	4608      	mov	r0, r1
 801a164:	4611      	mov	r1, r2
 801a166:	2200      	movs	r2, #0
 801a168:	6022      	str	r2, [r4, #0]
 801a16a:	461a      	mov	r2, r3
 801a16c:	f7f4 fc0d 	bl	800e98a <_write>
 801a170:	1c43      	adds	r3, r0, #1
 801a172:	d102      	bne.n	801a17a <_write_r+0x1e>
 801a174:	6823      	ldr	r3, [r4, #0]
 801a176:	b103      	cbz	r3, 801a17a <_write_r+0x1e>
 801a178:	602b      	str	r3, [r5, #0]
 801a17a:	bd38      	pop	{r3, r4, r5, pc}
 801a17c:	200108ac 	.word	0x200108ac

0801a180 <_close_r>:
 801a180:	b538      	push	{r3, r4, r5, lr}
 801a182:	4c06      	ldr	r4, [pc, #24]	; (801a19c <_close_r+0x1c>)
 801a184:	2300      	movs	r3, #0
 801a186:	4605      	mov	r5, r0
 801a188:	4608      	mov	r0, r1
 801a18a:	6023      	str	r3, [r4, #0]
 801a18c:	f7f4 fc19 	bl	800e9c2 <_close>
 801a190:	1c43      	adds	r3, r0, #1
 801a192:	d102      	bne.n	801a19a <_close_r+0x1a>
 801a194:	6823      	ldr	r3, [r4, #0]
 801a196:	b103      	cbz	r3, 801a19a <_close_r+0x1a>
 801a198:	602b      	str	r3, [r5, #0]
 801a19a:	bd38      	pop	{r3, r4, r5, pc}
 801a19c:	200108ac 	.word	0x200108ac

0801a1a0 <_fstat_r>:
 801a1a0:	b538      	push	{r3, r4, r5, lr}
 801a1a2:	4c07      	ldr	r4, [pc, #28]	; (801a1c0 <_fstat_r+0x20>)
 801a1a4:	2300      	movs	r3, #0
 801a1a6:	4605      	mov	r5, r0
 801a1a8:	4608      	mov	r0, r1
 801a1aa:	4611      	mov	r1, r2
 801a1ac:	6023      	str	r3, [r4, #0]
 801a1ae:	f7f4 fc14 	bl	800e9da <_fstat>
 801a1b2:	1c43      	adds	r3, r0, #1
 801a1b4:	d102      	bne.n	801a1bc <_fstat_r+0x1c>
 801a1b6:	6823      	ldr	r3, [r4, #0]
 801a1b8:	b103      	cbz	r3, 801a1bc <_fstat_r+0x1c>
 801a1ba:	602b      	str	r3, [r5, #0]
 801a1bc:	bd38      	pop	{r3, r4, r5, pc}
 801a1be:	bf00      	nop
 801a1c0:	200108ac 	.word	0x200108ac

0801a1c4 <_isatty_r>:
 801a1c4:	b538      	push	{r3, r4, r5, lr}
 801a1c6:	4c06      	ldr	r4, [pc, #24]	; (801a1e0 <_isatty_r+0x1c>)
 801a1c8:	2300      	movs	r3, #0
 801a1ca:	4605      	mov	r5, r0
 801a1cc:	4608      	mov	r0, r1
 801a1ce:	6023      	str	r3, [r4, #0]
 801a1d0:	f7f4 fc13 	bl	800e9fa <_isatty>
 801a1d4:	1c43      	adds	r3, r0, #1
 801a1d6:	d102      	bne.n	801a1de <_isatty_r+0x1a>
 801a1d8:	6823      	ldr	r3, [r4, #0]
 801a1da:	b103      	cbz	r3, 801a1de <_isatty_r+0x1a>
 801a1dc:	602b      	str	r3, [r5, #0]
 801a1de:	bd38      	pop	{r3, r4, r5, pc}
 801a1e0:	200108ac 	.word	0x200108ac

0801a1e4 <_lseek_r>:
 801a1e4:	b538      	push	{r3, r4, r5, lr}
 801a1e6:	4c07      	ldr	r4, [pc, #28]	; (801a204 <_lseek_r+0x20>)
 801a1e8:	4605      	mov	r5, r0
 801a1ea:	4608      	mov	r0, r1
 801a1ec:	4611      	mov	r1, r2
 801a1ee:	2200      	movs	r2, #0
 801a1f0:	6022      	str	r2, [r4, #0]
 801a1f2:	461a      	mov	r2, r3
 801a1f4:	f7f4 fc0c 	bl	800ea10 <_lseek>
 801a1f8:	1c43      	adds	r3, r0, #1
 801a1fa:	d102      	bne.n	801a202 <_lseek_r+0x1e>
 801a1fc:	6823      	ldr	r3, [r4, #0]
 801a1fe:	b103      	cbz	r3, 801a202 <_lseek_r+0x1e>
 801a200:	602b      	str	r3, [r5, #0]
 801a202:	bd38      	pop	{r3, r4, r5, pc}
 801a204:	200108ac 	.word	0x200108ac

0801a208 <memmove>:
 801a208:	4288      	cmp	r0, r1
 801a20a:	b510      	push	{r4, lr}
 801a20c:	eb01 0302 	add.w	r3, r1, r2
 801a210:	d807      	bhi.n	801a222 <memmove+0x1a>
 801a212:	1e42      	subs	r2, r0, #1
 801a214:	4299      	cmp	r1, r3
 801a216:	d00a      	beq.n	801a22e <memmove+0x26>
 801a218:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a21c:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a220:	e7f8      	b.n	801a214 <memmove+0xc>
 801a222:	4283      	cmp	r3, r0
 801a224:	d9f5      	bls.n	801a212 <memmove+0xa>
 801a226:	1881      	adds	r1, r0, r2
 801a228:	1ad2      	subs	r2, r2, r3
 801a22a:	42d3      	cmn	r3, r2
 801a22c:	d100      	bne.n	801a230 <memmove+0x28>
 801a22e:	bd10      	pop	{r4, pc}
 801a230:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a234:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a238:	e7f7      	b.n	801a22a <memmove+0x22>

0801a23a <__malloc_lock>:
 801a23a:	4770      	bx	lr

0801a23c <__malloc_unlock>:
 801a23c:	4770      	bx	lr

0801a23e <_realloc_r>:
 801a23e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a240:	4607      	mov	r7, r0
 801a242:	4614      	mov	r4, r2
 801a244:	460e      	mov	r6, r1
 801a246:	b921      	cbnz	r1, 801a252 <_realloc_r+0x14>
 801a248:	4611      	mov	r1, r2
 801a24a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a24e:	f7fe bf55 	b.w	80190fc <_malloc_r>
 801a252:	b922      	cbnz	r2, 801a25e <_realloc_r+0x20>
 801a254:	f7fe ff04 	bl	8019060 <_free_r>
 801a258:	4625      	mov	r5, r4
 801a25a:	4628      	mov	r0, r5
 801a25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a25e:	f000 f827 	bl	801a2b0 <_malloc_usable_size_r>
 801a262:	42a0      	cmp	r0, r4
 801a264:	d20f      	bcs.n	801a286 <_realloc_r+0x48>
 801a266:	4621      	mov	r1, r4
 801a268:	4638      	mov	r0, r7
 801a26a:	f7fe ff47 	bl	80190fc <_malloc_r>
 801a26e:	4605      	mov	r5, r0
 801a270:	2800      	cmp	r0, #0
 801a272:	d0f2      	beq.n	801a25a <_realloc_r+0x1c>
 801a274:	4631      	mov	r1, r6
 801a276:	4622      	mov	r2, r4
 801a278:	f7fb f800 	bl	801527c <memcpy>
 801a27c:	4631      	mov	r1, r6
 801a27e:	4638      	mov	r0, r7
 801a280:	f7fe feee 	bl	8019060 <_free_r>
 801a284:	e7e9      	b.n	801a25a <_realloc_r+0x1c>
 801a286:	4635      	mov	r5, r6
 801a288:	e7e7      	b.n	801a25a <_realloc_r+0x1c>
	...

0801a28c <_read_r>:
 801a28c:	b538      	push	{r3, r4, r5, lr}
 801a28e:	4c07      	ldr	r4, [pc, #28]	; (801a2ac <_read_r+0x20>)
 801a290:	4605      	mov	r5, r0
 801a292:	4608      	mov	r0, r1
 801a294:	4611      	mov	r1, r2
 801a296:	2200      	movs	r2, #0
 801a298:	6022      	str	r2, [r4, #0]
 801a29a:	461a      	mov	r2, r3
 801a29c:	f7f4 fb58 	bl	800e950 <_read>
 801a2a0:	1c43      	adds	r3, r0, #1
 801a2a2:	d102      	bne.n	801a2aa <_read_r+0x1e>
 801a2a4:	6823      	ldr	r3, [r4, #0]
 801a2a6:	b103      	cbz	r3, 801a2aa <_read_r+0x1e>
 801a2a8:	602b      	str	r3, [r5, #0]
 801a2aa:	bd38      	pop	{r3, r4, r5, pc}
 801a2ac:	200108ac 	.word	0x200108ac

0801a2b0 <_malloc_usable_size_r>:
 801a2b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a2b4:	1f18      	subs	r0, r3, #4
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	bfbc      	itt	lt
 801a2ba:	580b      	ldrlt	r3, [r1, r0]
 801a2bc:	18c0      	addlt	r0, r0, r3
 801a2be:	4770      	bx	lr

0801a2c0 <_init>:
 801a2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2c2:	bf00      	nop
 801a2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a2c6:	bc08      	pop	{r3}
 801a2c8:	469e      	mov	lr, r3
 801a2ca:	4770      	bx	lr

0801a2cc <_fini>:
 801a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2ce:	bf00      	nop
 801a2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a2d2:	bc08      	pop	{r3}
 801a2d4:	469e      	mov	lr, r3
 801a2d6:	4770      	bx	lr
